push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
call
sub
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
lea
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
cmp
setne
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
call
mov
mov
jmp
mov
jmp
lea
mov
mov
mov
mov
mov
mov
call
mov
mov
jmp
mov
mov
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
movzx
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
call
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
movzx
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
movzx
mov
mov
mov
mov
mov
call
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
lea
mov
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
call
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
lea
mov
mov
mov
cmp
cmove
mov
jmp
lea
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
mov
mov
call
sub
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
call
mov
mov
jmp
mov
jmp
xchg
push
mov
push
sub
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
lea
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
add
pop
pop
ret
jmp
nop
push
mov
push
push
push
sub
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
jmp
lea
lea
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmove
mov
jmp
mov
jmp
mov
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
lea
mov
movzx
mov
mov
sub
mov
movzx
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
mov
mov
mov
call
lea
mov
movzx
mov
mov
add
add
sub
mov
movzx
mov
mov
mov
add
add
mov
add
mov
mov
mov
mov
mov
mov
call
lea
lea
mov
mov
call
mov
mov
mov
mov
cmp
setl
and
mov
mov
mov
sub
mov
add
mov
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
lea
lea
mov
mov
call
mov
mov
mov
cmp
setl
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
lea
lea
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
lea
lea
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
lea
lea
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
lea
lea
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
lea
lea
mov
mov
call
mov
mov
cmp
setl
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
lea
lea
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
lea
lea
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
lea
lea
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
lea
lea
mov
mov
call
mov
mov
mov
cmp
setl
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
lea
lea
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
lea
lea
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
mov
call
mov
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
call
mov
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
call
mov
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
call
mov
jmp
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
lea
mov
movzx
mov
mov
sub
add
add
mov
shl
add
movzx
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
movzx
mov
mov
sub
sub
mov
movzx
mov
mov
mov
add
add
mov
add
mov
mov
mov
mov
mov
mov
call
lea
lea
mov
mov
call
mov
mov
jmp
lea
lea
mov
mov
call
mov
mov
jmp
mov
jmp
lea
lea
mov
mov
call
mov
mov
jmp
mov
jmp
mov
jmp
lea
lea
mov
mov
call
mov
mov
jmp
mov
mov
call
mov
mov
jmp
mov
jmp
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
call
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
call
call
xor
mov
mov
call
mov
add
pop
pop
pop
pop
ret
call
mov
jmp
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovge
mov
jmp
mov
mov
cmp
cmovle
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
sub
add
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
add
add
sub
sub
sub
add
mov
mov
jmp
data16
push
mov
push
push
push
sub
mov
lea
lea
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
lea
mov
mov
mov
mov
call
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
sub
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
call
mov
mov
mov
cmp
cmovae
mov
jmp
mov
mov
cmp
cmovae
mov
jmp
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
jmp
mov
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
movsx
mov
mov
xor
and
mov
mov
xor
and
xor
and
and
mov
mov
or
mov
or
xor
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
sub
sub
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
cmp
setb
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
movzx
mov
mov
add
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
sub
sub
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
add
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
movsx
mov
xor
and
mov
xor
and
xor
and
and
or
or
xor
mov
mov
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
movsx
mov
and
xor
or
mov
sub
add
add
mov
mov
shl
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
sub
sub
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
jmp
mov
mov
jmp
mov
mov
movsx
mov
and
xor
or
mov
add
add
sub
mov
mov
shl
mov
mov
jmp
mov
mov
mov
jmp
nop
push
mov
push
push
push
and
sub
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
mov
lea
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
mov
mov
call
sub
mov
mov
cmp
cmovne
mov
mov
jmp
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
mov
mov
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
call
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
add
add
sub
mov
mov
movzx
mov
mov
mov
movzx
mov
xor
and
xor
mov
mov
and
mov
mov
xor
and
and
mov
mov
mov
or
mov
or
xor
mov
mov
mov
cmp
mov
cmove
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
sub
sub
mov
mov
jmp
add
pop
pop
pop
pop
ret
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
cmp
setb
and
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
add
add
mov
mov
mov
mov
movzx
mov
mov
mov
mov
movzx
mov
xor
mov
and
xor
and
or
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
add
sub
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
sub
mov
mov
call
add
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
sub
add
add
sub
mov
mov
mov
call
add
mov
mov
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
movzx
mov
mov
mov
mov
movzx
mov
xor
and
xor
and
mov
xor
and
and
or
or
xor
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
jmp
mov
mov
sub
add
add
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
sub
mov
mov
call
add
mov
jmp
xchg
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
cmp
setb
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
cmp
setb
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
movzx
mov
sub
mov
sub
mov
mov
movzx
mov
xor
mov
and
xor
and
or
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
jmp
mov
mov
sub
sub
mov
mov
jmp
add
pop
pop
pop
pop
ret
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setb
and
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
lea
mov
mov
movzx
mov
mov
sub
mov
mov
movzx
mov
mov
mov
mov
add
add
mov
mov
add
mov
imul
add
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
add
add
sub
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
add
pop
pop
pop
pop
ret
mov
jmp
lea
mov
mov
movzx
mov
mov
sub
mov
mov
movzx
mov
mov
mov
mov
add
add
mov
mov
add
mov
imul
add
mov
mov
mov
mov
mov
call
mov
jmp
mov
jmp
xchg
push
mov
push
push
push
sub
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
lea
mov
mov
mov
movzx
mov
mov
sub
sub
mov
mov
movzx
mov
mov
mov
mov
add
add
mov
mov
add
mov
mov
shl
add
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
add
add
sub
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
call
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
add
pop
pop
pop
pop
ret
lea
mov
mov
mov
movzx
mov
mov
sub
sub
mov
mov
movzx
mov
mov
mov
mov
add
add
mov
mov
add
mov
mov
shl
add
mov
mov
mov
mov
mov
call
mov
jmp
call
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setb
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
sub
sub
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setb
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
lea
mov
mov
mov
mov
movzx
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
movzx
mov
mov
mov
mov
mov
mov
mov
mov
add
add
mov
mov
mov
add
mov
mov
mov
mov
shl
add
sub
mov
mov
mov
mov
mov
call
add
mov
jmp
mov
mov
add
add
sub
mov
mov
mov
mov
add
add
sub
mov
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
lea
pop
pop
pop
pop
ret
mov
call
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
cmp
setb
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
lea
mov
mov
movzx
mov
mov
sub
mov
mov
movzx
mov
mov
mov
mov
add
add
mov
mov
add
mov
mov
shl
add
mov
mov
mov
mov
mov
call
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
mov
sub
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
add
pop
pop
pop
pop
ret
mov
jmp
mov
add
add
sub
mov
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
cmp
setb
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
sub
sub
mov
mov
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
lea
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
lea
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
sub
sub
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
add
add
sub
mov
mov
mov
mov
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
jmp
mov
mov
sub
sub
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
call
mov
mov
add
sub
sub
mov
mov
jmp
mov
mov
mov
mov
movzx
cmp
cmovne
mov
jmp
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
sub
add
add
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
sub
sub
add
add
sub
sub
mov
mov
shl
add
add
mov
mov
mov
mov
mov
mov
call
mov
sub
add
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
jmp
mov
mov
sub
sub
mov
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
sub
add
add
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
mov
jmp
xchg
push
mov
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
mov
jmp
mov
add
pop
pop
ret
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
jmp
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
add
sub
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
sub
mov
sub
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
jmp
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
jmp
mov
mov
add
add
sub
mov
mov
mov
jmp
xchg
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
cmp
cmova
mov
jmp
mov
mov
mov
mov
movsx
mov
mov
movsx
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
movzx
mov
mov
mov
movzx
cmp
cmovl
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
movsx
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
add
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
movzx
mov
mov
movzx
cmp
cmovl
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
cmp
seta
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
movzx
mov
movzx
cmp
cmovne
mov
jmp
mov
mov
mov
movzx
mov
movzx
cmp
cmovl
mov
mov
jmp
mov
mov
mov
movzx
cmp
cmove
mov
jmp
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
add
mov
mov
add
mov
mov
sub
sub
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
mov
jmp
mov
mov
jmp
mov
jmp
xchg
push
mov
push
push
push
sub
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
call
mov
call
mov
imul
sub
mov
mov
mov
mov
mov
mov
mov
call
mov
sub
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
movzx
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
mov
sub
mov
mov
mov
mov
sub
sub
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
lea
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
call
mov
call
mov
imul
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
sub
sub
mov
mov
mov
mov
sub
sub
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
lea
mov
mov
mov
mov
mov
lea
mov
mov
call
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovb
mov
jmp
mov
movzx
mov
mov
xor
mov
and
xor
and
or
mov
mov
mov
mov
mov
jmp
mov
mov
sub
sub
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
add
pop
pop
pop
pop
ret
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
call
mov
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setb
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
movzx
mov
xor
and
mov
xor
and
xor
and
and
or
or
xor
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
mov
sub
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
add
pop
pop
pop
pop
ret
mov
jmp
mov
jmp
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
jmp
nop
push
mov
push
push
sub
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
mov
cmovne
mov
jmp
lea
pop
pop
pop
ret
mov
call
mov
mov
mov
mov
mov
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
imul
mov
sub
sub
mov
shr
xor
mov
xor
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
imul
add
add
sub
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
movzx
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
add
mov
mov
jmp
mov
mov
mov
mov
add
mov
mov
mov
movzx
cmp
cmove
mov
jmp
mov
jmp
mov
jmp
mov
mov
movzx
movzx
cmp
cmovne
mov
jmp
mov
mov
mov
mov
add
mov
mov
mov
cmp
cmovne
mov
jmp
mov
jmp
mov
add
mov
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
add
mov
mov
mov
cmp
cmovne
mov
jmp
mov
jmp
mov
mov
movzx
movzx
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
add
mov
mov
mov
movzx
cmp
cmove
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
movzx
movzx
cmp
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
add
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
movzx
movzx
cmp
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
add
mov
mov
add
mov
movzx
mov
mov
mov
mov
movzx
cmp
cmove
mov
jmp
mov
jmp
mov
mov
movzx
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
mov
movzx
mov
mov
mov
add
mov
mov
mov
movzx
cmp
setne
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
movzx
cmp
cmove
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
mov
movzx
mov
mov
add
mov
mov
mov
movzx
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
movzx
cmp
cmove
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
mov
jmp
mov
jmp
mov
jmp
mov
add
mov
mov
mov
add
mov
mov
mov
mov
jmp
mov
add
mov
mov
mov
add
mov
mov
mov
mov
jmp
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
cmp
cmova
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
shl
add
mov
add
sub
sub
shl
add
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setae
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
add
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
jmp
mov
mov
mov
shl
add
mov
add
sub
sub
shl
add
mov
mov
jmp
mov
jmp
mov
jmp
mov
add
mov
mov
jmp
mov
mov
jmp
data16
push
mov
push
sub
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
movzx
mov
call
mov
movzx
mov
mov
call
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
movzx
cmp
cmove
mov
jmp
mov
mov
jmp
mov
add
mov
mov
add
mov
mov
jmp
mov
movzx
mov
call
mov
movzx
mov
mov
call
mov
sub
sub
add
mov
mov
jmp
mov
add
pop
pop
ret
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
cdq
idiv
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
mov
sub
mov
mov
mov
mov
mov
mov
cdq
idiv
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
mov
and
and
mov
mov
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
cdq
idiv
mov
mov
mov
mov
mov
jmp
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
mov
cdq
mov
idiv
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
cmp
setb
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
movsx
mov
xor
and
mov
xor
and
xor
and
and
or
or
xor
mov
mov
mov
jmp
mov
mov
mov
sub
sub
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
sub
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
sub
mov
mov
mov
call
mov
mov
jmp
int3
int3
int3
int3
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
lea
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
call
lea
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
sub
sub
add
mov
mov
shl
add
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
add
pop
pop
pop
pop
ret
mov
jmp
mov
mov
lea
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
call
lea
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
sub
sub
add
mov
mov
shl
add
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
lea
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
add
mov
mov
mov
sub
add
mov
mov
jmp
mov
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
mov
mov
lea
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
add
mov
imul
and
cmp
sete
and
mov
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
movzx
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
mov
sub
sub
sub
mov
mov
mov
call
add
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
jmp
mov
mov
movzx
mov
movzx
mov
mov
mov
mov
add
add
sub
mov
movzx
mov
movzx
mov
mov
mov
mov
add
add
sub
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
jmp
mov
movzx
mov
movzx
mov
mov
mov
mov
sub
mov
movzx
mov
movzx
mov
mov
mov
mov
mov
movzx
mov
mov
add
add
mov
movzx
mov
add
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
mov
sub
sub
sub
mov
mov
mov
call
add
mov
mov
mov
cmp
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
sub
mov
call
add
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
sub
mov
call
add
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
sub
mov
call
add
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
sub
mov
call
add
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
sub
mov
mov
mov
call
add
mov
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
cmp
setne
mov
xor
and
mov
xor
and
xor
and
and
or
or
xor
test
cmovne
mov
jmp
mov
movzx
mov
mov
mov
add
mov
mov
jmp
mov
mov
mov
mov
sub
sub
add
mov
sub
add
add
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
add
sub
sub
add
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
call
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
jmp
mov
mov
mov
call
mov
jmp
mov
jmp
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
lea
lea
lea
lea
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
movzx
mov
mov
call
mov
mov
mov
cmp
setl
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
call
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
call
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
add
pop
pop
pop
pop
ret
lea
lea
lea
lea
mov
mov
mov
mov
mov
mov
call
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
movzx
mov
mov
call
mov
mov
jmp
mov
mov
call
mov
mov
jmp
mov
jmp
mov
jmp
mov
jmp
mov
mov
call
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
lea
mov
mov
mov
mov
mov
mov
call
mov
mov
lea
mov
mov
mov
mov
mov
mov
call
mov
mov
lea
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
movzx
mov
mov
movzx
mov
mov
mov
sub
mov
sub
add
sub
mov
movzx
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
mov
mov
mov
mov
call
mov
lea
mov
mov
mov
call
mov
lea
lea
mov
mov
mov
mov
mov
call
lea
mov
call
mov
lea
lea
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
lea
mov
mov
sub
sub
add
mov
shl
add
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
lea
mov
call
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
lea
mov
mov
mov
mov
call
sub
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
add
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
jmp
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
cmp
cmove
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
call
mov
lea
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
call
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
lea
mov
call
mov
mov
jmp
lea
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
call
mov
lea
mov
mov
mov
mov
mov
call
mov
jmp
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
call
mov
jmp
mov
mov
call
mov
jmp
mov
mov
jmp
mov
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
add
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
jmp
mov
jmp
mov
mov
call
mov
mov
jmp
int3
int3
push
mov
push
push
push
sub
mov
lea
mov
mov
mov
call
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
add
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
add
add
mov
mov
mov
sub
sub
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
jmp
mov
sub
add
add
mov
shl
add
mov
mov
mov
mov
mov
mov
mov
add
mov
add
mov
mov
mov
call
mov
mov
jmp
mov
sub
add
add
mov
mov
mov
add
add
sub
mov
mov
jmp
sbb
xchg
sub
repnz
mov
pop
leave
push
js
xchg
lea
(bad)
imul
ret
bound
call
out
pop
inc
jbe
pop
fadd
in
mov
leave
jbe
jnp
adc
imul
dec
das
or
adc
jmp
fnsave
je
push
shl
mov
sub
cld
cmp
repz
xor
mov
jmp
enter
adc
push
sar
push
mov
std
fcomip
fbstp
arpl
leave
add
es
pop
pusha
fldenv
sbb
stos
(bad)
fisttp
jmp
lods
ja
ficom
test
ret
adc
scas
and
xchg
shl
pushf
cmc
push
ror
xor
stc
dec
push
cli
jmp
arpl
sub
aas
mov
ins
je
adc
xor
cmp
ret
add
ss
sub
fmul
and
mov
(bad)
call
mov
mov
xor
adc
add
fisubr
paddq
aaa
mov
or
jae
xor
sbb
mov
cmc
cmp
into
(bad)
xor
sub
lods
sbb
repz
mov
adc
in
call
imul
xor
dec
icebp
and
or
push
in
ins
pop
out
data16
jl
scas
fnsave
je
mov
dec
dec
push
push
dec
loop
ds
pop
scas
pcmpeqw
pop
aas
jb
cwde
xchg
mov
push
pop
adc
in
mov
push
push
popa
call
jmp
(bad)
push
std
sub
jnp
iret
fucomi
pop
lock
fmul
push
inc
cmp
and
cmc
mov
jb
pop
xor
pusha
arpl
aaa
ja
js
push
adc
mov
or
add
lods
sub
xlat
mov
sbb
sbb
rcl
popa
cmp
out
lods
sbb
std
(bad)
in
das
mov
cmc
mov
mov
std
xchg
mov
stos
and
retf
jmp
adc
dec
les
mov
vmaskmovdqu
leave
div
call
sub
bound
out
test
call
mov
dec
sub
(bad)
enter
adc
repnz
sbb
rcl
push
sub
push
pop
xor
push
popf
out
xor
xchg
cmp
adc
shl
mov
ror
mov
or
arpl
lods
cvtpi2ps
inc
mov
aam
mov
les
xor
jecxz
es
stos
cmp
mov
xlat
(bad)
push
pop
xchg
xchg
rcl
pop
mov
sbb
icebp
pop
inc
sbb
test
cmp
push
loope
js
sbb
mov
xor
fdivr
jno
test
ror
or
aaa
test
(bad)
pop
cld
and
mov
mov
aad
pop
leave
fisttp
scas
inc
push
cmc
mov
sbb
movs
fidivr
dec
loopne
loop
push
xchg
xchg
pop
ds
jmp
mov
xacquire
aam
xchg
mov
mov
les
mov
test
loope
xor
sar
xor
push
int
cmp
arpl
jp
mov
mov
and
mov
(bad)
cmp
add
and
and
pusha
je
ficomp
rcr
daa
das
cmp
clc
out
sbb
fs
jmp
call
std
pop
and
push
movs
(bad)
xor
adc
inc
test
inc
pop
jnp
outs
sbb
dec
add
(bad)
cld
sbb
mov
loop
jl
les
inc
or
(bad)
leave
push
mov
cs
add
pop
add
sti
pop
mov
mov
xor
in
xlat
mov
dec
test
ret
jnp
adc
adc
test
lods
fimul
inc
push
mov
push
push
ret
ss
hlt
fild
cmp
iret
push
daa
sahf
movlhps
add
pop
clc
cmp
jp
add
push
or
xchg
and
cmps
mov
sbb
xor
add
int
call
jge
mov
mov
and
xor
add
das
imul
das
test
inc
jp
mov
inc
dec
imul
out
scas
add
xor
hlt
and
arpl
inc
out
cs
das
or
xor
scas
inc
jo
mov
jns
mov
data16
jbe
pop
pop
push
inc
sub
sub
dec
js
inc
pop
xor
or
push
cmps
pop
ret
stos
out
jmp
lds
lea
outs
punpcklbw
repz
push
fidivr
add
in
sub
sub
scas
hlt
cmp
mov
dec
jle
add
mov
add
xchg
mov
scas
loope
icebp
xor
outs
stc
jecxz
cld
push
mov
cmps
sbb
pop
mov
addr16
std
or
cmps
mov
mov
imul
bound
sahf
ss
sbb
das
cmp
cmp
imul
pop
cdq
inc
lds
mov
fwait
inc
out
inc
(bad)
mov
enter
rcl
ins
or
gs
inc
dec
or
xchg
cli
jl
lahf
das
in
or
frstor
sbb
mov
add
scas
repz
dec
push
cli
and
pop
aas
push
dec
sahf
add
jg
arpl
pop
adc
mov
sub
mov
dec
cmp
adc
jmp
mov
(bad)
stc
inc
shr
hlt
movs
jle
cmp
(bad)
ficom
daa
push
ins
pop
cmp
dec
imul
int
out
aas
lods
push
shl
les
pusha
imul
test
xlat
jno
and
inc
pop
fadd
cmp
add
fdiv
mov
popf
xlat
add
cmp
js
movs
mov
int
xchg
push
cs
add
or
jb
test
outs
cmps
push
sbb
dec
rcr
repnz
mov
sub
jge
jge
adc
jmp
ficomp
jmp
xor
pop
cmp
sbb
xchg
fadd
or
jb
test
dec
pop
adc
fs
xchg
aam
xchg
dec
pop
or
sbb
stos
fcom
jle
mov
mov
cmc
pop
sub
loop
mov
pop
jne
ret
ficom
pop
loop
(bad)
out
jnp
loope
pop
fs
adc
aam
pop
imul
dec
push
inc
adc
and
push
pop
add
mov
out
lock
xchg
sub
mov
xchg
cmps
cmp
loopne
mov
arpl
pop
and
(bad)
aam
mov
out
loop
jae
pop
dec
mov
test
mov
mov
inc
jbe
cmps
(bad)
jmp
fsubr
jl
int
popa
sahf
scas
adc
in
xchg
lods
dec
or
ds
mov
movs
add
pop
lea
rcr
aas
fistp
inc
test
idiv
scas
iret
stc
clc
mov
sub
ins
cmp
mov
sub
jle
inc
aas
xchg
repz
js
leave
frstor
adc
mov
sbb
sub
lds
pop
nop
fwait
inc
fs
shl
loop
mov
fild
pop
sahf
loopne
adc
shr
add
sbb
bound
jb
das
into
out
adc
xor
js
xor
out
scas
sub
fstp
mov
mov
jge
scas
mov
and
jmp
sub
jae
xor
xchg
sti
xchg
fwait
add
iret
cmp
repz
jecxz
je
frstor
jge
jl
movs
push
dec
retf
in
imul
sbb
popa
(bad)
loope
lock
push
outs
cmp
and
leave
sahf
mov
(bad)
int
pop
mov
shl
rcr
into
mov
lds
rcr
out
fxch
(bad)
(bad)
and
jg
and
cmp
cmps
out
(bad)
fs
jecxz
ror
pop
sbb
sbb
or
stos
mov
gs
mov
div
dec
mov
aaa
push
mov
mov
mov
jae
imul
jp
sub
cwde
inc
stc
in
jbe
or
jno
and
mov
xor
repz
fs
sbb
in
mov
push
stos
inc
test
retf
mov
out
pop
cmps
xchg
mov
xchg
and
(bad)
push
aad
adc
or
hlt
fwait
sbb
fdivp
test
sbb
dec
(bad)
sahf
imul
or
or
sub
wrmsr
push
(bad)
pop
push
jecxz
mul
and
sti
mov
add
enter
neg
mov
cmp
dec
call
ret
(bad)
sar
push
stc
sub
hlt
dec
inc
sbb
sub
rol
jp
frstor
ins
dec
jge
dec
fldcw
popf
loope
and
and
mov
popa
pop
mov
push
shl
push
push
test
int
cmp
in
loop
inc
jmp
push
popa
retf
jns
push
retf
adc
mov
mov
sti
jecxz
fmul
movs
shr
in
pop
mov
jnp
xor
pop
push
sbb
sbb
mov
cmp
rcl
xor
ss
inc
inc
iret
jle
mov
loopne
(bad)
pop
dec
mov
cs
ret
movd
sbb
and
int
sub
cmp
mov
pop
and
or
adc
push
mov
adc
or
cwde
dec
inc
repnz
lods
outs
(bad)
clc
lock
ins
push
jp
sbb
js
mov
mov
mov
cli
lahf
adc
out
test
pop
mov
gs
stos
jne
in
adc
out
xlat
inc
jbe
mov
fstp
aas
sbb
call
cli
jp
cli
dec
jl
fxch
test
loopne
retf
mov
aas
lods
or
mov
jbe
xchg
ficomp
mov
push
pop
mov
out
iret
or
cdq
(bad)
fwait
cmp
out
stos
leave
pop
push
and
jp
mov
xor
jmp
push
das
mov
rcl
or
or
(bad)
push
xlat
or
cmp
dec
sbb
push
dec
shl
cli
int3
in
sub
jno
and
retf
clc
push
xchg
call
cmp
outs
cmp
shl
shl
movs
in
xchg
cmp
cld
dec
pop
jle
fild
push
jo
push
cs
jne
mov
cli
retf
mov
pop
mov
xadd
fdivr
mov
xchg
aaa
xchg
(bad)
dec
inc
es
xchg
imul
retf
or
add
mov
fmul
lea
mov
cmp
(bad)
retf
push
in
daa
popf
fwait
icebp
xchg
sbb
sbb
jg
dec
inc
dec
and
imul
shl
mov
leave
jae
in
outs
test
pop
inc
rcl
sub
fstp
data16
xchg
in
int3
pusha
call
mov
jae
(bad)
lahf
fwait
or
push
test
shl
outs
test
retf
and
adc
xor
ss
in
mov
(bad)
mov
jb
gs
adc
push
(bad)
or
xchg
cmp
call
fwait
sahf
repnz
fild
dec
stos
jnp
sbb
mov
ss
mov
add
pop
scas
out
fdivr
mov
add
fadd
in
cmps
ss
xchg
out
loop
iret
dec
iret
loop
nop
mov
pop
or
das
fmul
scas
jge
js
outs
cdq
mov
sub
movs
dec
pop
outs
cmp
mov
sub
pop
sahf
and
add
jb
je
or
xor
jge
imul
cs
loopne
cmps
mov
call
mov
cmp
xchg
(bad)
lods
and
mov
add
jno
out
mov
mov
in
data16
ret
pop
and
cli
pop
cmps
jmp
mov
pop
mov
xchg
sbb
sub
sti
pushf
test
xchg
pusha
lock
or
out
inc
sub
(bad)
call
inc
push
stc
add
shl
out
xor
dec
pop
inc
shl
adc
(bad)
cmp
lock
mov
ins
fucomip
movs
mov
or
fisttp
and
sbb
stos
stc
shl
aad
int
add
push
aad
fcomip
sti
fnstcw
or
into
push
mov
mov
add
clc
out
jge
sub
and
popf
xchg
es
cwde
out
lahf
cmp
lods
inc
repz
or
inc
jmp
inc
imul
sti
outs
inc
dec
je
daa
jecxz
sub
cmp
in
xor
and
push
icebp
stos
or
xor
shl
pop
mov
jle
mov
mov
aam
mov
adc
mov
jne
(bad)
dec
ins
pop
and
loopne
cwde
cmps
clc
test
add
retf
jg
sbb
fdivr
test
test
cdq
ins
xchg
sti
js
jo
mov
cmps
stc
inc
add
pop
mov
outs
test
jo
ret
push
dec
xor
cld
push
scas
push
jmp
push
and
(bad)
out
inc
adc
sub
mov
mov
fst
or
inc
adc
push
ret
ds
inc
mov
cli
out
outs
xor
pop
ja
(bad)
adc
mov
cmps
data16
scas
movs
lods
movs
mov
mov
pop
xchg
mul
in
dec
fidivr
sbb
sub
push
mov
lods
push
(bad)
test
rcl
adc
stc
lock
movs
cmp
jmp
les
sub
popa
mov
and
call
mov
sbb
mov
(bad)
popa
adc
jg
push
fs
enter
aad
arpl
pop
ret
adc
adc
mov
sub
jl
dec
mov
xchg
(bad)
dec
cmp
lahf
dec
data16
aad
or
inc
xor
loope
or
xchg
pop
add
(bad)
retf
or
dec
and
mov
fwait
sub
rcr
mov
sbb
xor
add
sub
and
cmp
stos
es
xor
es
mov
push
inc
xor
cwde
not
sti
mov
out
ret
xlat
je
repz
add
mov
sbb
or
aad
addr16
pop
xor
retf
xlat
cmp
push
or
adc
cs
loop
push
stos
xor
int3
inc
push
xchg
or
(bad)
mov
(bad)
mov
or
hlt
es
xchg
in
lea
add
lods
or
call
int3
jnp
test
enter
dec
rcr
mov
cdq
xor
jmp
js
bound
sahf
mov
jbe
dec
aad
xlat
fistp
scas
cmps
not
adc
adc
rcr
push
movs
adc
adc
stos
mov
or
ins
push
xchg
push
jp
push
push
and
mov
jmp
inc
out
out
pushf
xchg
or
not
cmp
and
sub
nop
(bad)
pop
(bad)
jne
xor
imul
repz
pop
xor
pusha
fcom
je
or
xchg
cmp
popa
xadd
mov
js
out
cmp
jbe
pop
push
ror
cmp
mov
int3
test
(bad)
lods
leave
(bad)
lahf
shl
xlat
retf
not
outs
in
cmc
leave
sub
cdq
xchg
(bad)
xchg
arpl
and
and
mov
popf
or
pop
int3
pusha
sbb
aaa
cdq
hlt
outs
pop
sar
rcl
mov
div
hlt
sub
ss
push
xlat
sbb
jo
pop
or
sub
movs
adc
lock
xor
es
mov
push
popa
lds
sbb
or
mov
sbb
into
mov
sub
push
sbb
pop
sub
test
jmp
jle
in
neg
mov
movs
popa
pop
cmc
mov
movs
mov
scas
dec
jmp
mov
(bad)
xchg
cmp
jbe
lahf
test
mov
(bad)
mov
mov
movs
enter
mov
push
out
fcomi
mov
out
mov
inc
cdq
add
add
enter
sub
les
inc
inc
shr
cmp
outs
cs
pop
fwait
lods
dec
sub
in
popf
shl
movs
in
adc
jmp
sbb
mov
les
cmp
jns
sbb
test
retf
out
xor
xchg
(bad)
jae
daa
push
ins
pop
test
xchg
add
stos
ins
jge
pop
jb
cmp
cwde
(bad)
or
(bad)
mov
or
push
jns
mov
dec
dec
ffree
mov
sub
jno
push
in
adc
push
push
shl
retf
cmp
dec
iret
adc
fbld
xchg
fnstsw
test
sbb
jle
aad
cdq
cmp
dec
iret
movd
dec
aad
mov
push
xlat
repz
mov
cdq
mov
sbb
push
jns
xor
enter
stc
ds
outs
sub
loop
and
cmp
(bad)
mov
adc
jb
inc
loope
adc
and
mov
dec
ret
outs
mov
xor
jae
into
mov
jl
leave
cmps
addr16
xor
or
jne
pushf
daa
loope
imul
push
lods
xchg
xor
lods
sbb
pop
add
cwde
pop
xor
mov
in
in
adc
cmc
xchg
jno
cwde
sbb
pusha
inc
sti
ds
dec
es
push
mov
lods
sub
mov
cmps
xchg
or
out
jmp
cmp
mov
inc
mov
and
pop
(bad)
leave
stos
lds
cld
push
inc
lods
fmul
gs
shl
gs
je
stc
push
ja
inc
gs
sbb
in
jo
ds
cld
mov
popf
lahf
pusha
gs
bound
sti
lea
dec
call
xor
sbb
(bad)
aam
cld
and
rol
add
xor
in
in
mov
mov
and
pop
and
inc
xor
outs
cmp
(bad)
aad
popa
out
(bad)
or
or
imul
inc
mov
or
fsub
out
retf
cli
out
sti
(bad)
lea
sbb
daa
pop
sbb
add
loop
jg
aad
cmp
xlat
or
shr
mov
sub
retf
loop
(bad)
out
add
or
loope
pushf
mov
and
(bad)
div
fcomi
ja
push
push
int3
mov
mov
popa
xchg
retf
outs
sbb
ins
clc
sub
test
sbb
or
dec
(bad)
push
mov
hlt
pop
ret
mov
mov
(bad)
enter
or
cmp
scas
mov
jge
bound
jne
js
das
mov
sub
(bad)
push
bound
jae
jbe
jmp
int3
hlt
xchg
cld
repz
add
div
xor
mov
rcl
fwait
call
dec
enter
sbb
and
xor
push
rol
pop
mov
xor
cwde
fistp
pop
lahf
stos
imul
push
sbb
xor
sub
dec
adc
popa
jo
or
data16
xor
je
sub
fwait
in
xor
mov
jb
mov
mov
ss
and
pop
xchg
stc
sti
cmp
mov
sahf
call
cwde
and
mov
xor
sbb
loop
inc
lods
int3
add
das
sbb
lods
or
sar
lds
sti
push
mov
out
cmp
(bad)
cmps
mov
sub
stos
add
dec
push
cli
cmp
jns
sbb
shl
xchg
or
std
sbb
mov
int
(bad)
imul
inc
ins
scas
(bad)
xor
jbe
xor
pop
lea
pop
sub
and
or
xor
lods
sbb
sub
test
adc
jg
xor
xor
loop
bound
adc
xchg
pop
add
pusha
and
jmp
repz
int
mov
pop
pop
cmp
je
popf
fldenv
shr
xchg
mov
jmp
retf
into
xchg
lahf
fadd
pop
hlt
inc
jecxz
jl
and
xor
(bad)
xlat
arpl
push
cmp
cmp
test
adc
fidivr
fld
mov
jecxz
add
lahf
mov
push
mov
pop
pop
daa
fcmovnb
repz
mov
sbb
mov
in
sub
or
xor
sbb
in
mov
pop
mov
and
das
in
std
out
int
enter
lods
xchg
pop
cmc
push
jecxz
push
push
imul
xchg
mov
jp
in
lods
in
push
mov
cwde
cmp
ror
dec
mov
fs
fldln2
pop
loope
pusha
call
je
or
aad
or
nop
mov
mov
cmovbe
mov
mov
jnp
mov
in
call
add
ins
push
and
pushf
je
or
out
fld
cmp
adc
(bad)
ret
mul
add
cld
arpl
ja
fisubr
outs
lahf
clc
int
scas
(bad)
mov
ficomp
cmp
push
mov
out
repz
scas
int3
sub
pop
pop
xchg
adc
ret
imul
push
xor
fisub
loop
sahf
dec
dec
movs
jg
call
mov
ret
sbb
add
cmp
int
adc
repz
inc
popf
(bad)
aam
xor
ja
ror
ficomp
ret
xchg
cmps
mov
jp
stos
data16
sub
or
inc
xlat
or
pop
mov
into
ins
xchg
adc
sbb
mov
lods
lods
xlat
inc
mov
push
addr16
sti
jmp
or
sub
addr16
push
jns
in
fs
jmp
push
inc
rcr
mov
jmp
jge
xchg
lods
aad
out
into
fsub
addr16
jnp
jb
pop
pop
hlt
fistp
or
push
add
dec
push
or
pop
add
loopne
jne
test
mov
cmp
fimul
repz
or
loope
call
mov
loop
mov
xchg
mov
in
std
lods
add
pusha
data16
sub
push
push
sub
mov
sbb
pushf
ins
retf
add
stos
pop
add
cwde
daa
dec
add
push
das
adc
jl
fstp
xchg
(bad)
add
out
gs
sbb
cmp
fild
sub
sti
sahf
clc
das
enter
sub
imul
lods
xor
mov
scas
push
test
pop
add
mov
(bad)
jmp
shl
test
sbb
or
cmp
pop
inc
sub
call
icebp
(bad)
bound
hlt
xchg
pop
mov
pop
sub
inc
cmps
jl
and
out
mov
or
or
dec
jne
push
cmp
sbb
nop
js
call
das
retf
ja
(bad)
fs
pop
push
lods
aas
call
vmovsd
rol
push
dec
pop
push
jle
jecxz
pop
mov
jbe
test
mov
xor
sub
add
sub
add
inc
jne
(bad)
mov
scas
push
push
inc
ja
and
mov
rol
pushf
nop
in
adc
sub
and
xchg
push
jmp
scas
nop
cmp
and
jns
jbe
sbb
cs
mov
sbb
xchg
int
rcr
out
cmc
mov
or
leave
inc
push
xor
dec
in
sbb
jl
and
mov
inc
jle
pop
in
jmp
xor
pop
jne
adc
jl
test
cli
sahf
inc
retf
sub
outs
sbb
cmp
(bad)
aas
fs
sub
ins
call
cdq
jmp
pop
fstp
add
fst
adc
fsubr
hlt
(bad)
mov
or
sahf
sub
jmp
ins
pop
mov
imul
pop
mov
inc
push
mov
pop
mov
pusha
pop
hlt
mov
test
mov
xchg
sahf
dec
pop
lahf
xchg
pusha
out
and
jmp
xchg
push
xchg
pop
jp
mov
fs
push
xchg
mov
je
aad
mov
cld
les
or
int3
add
adc
leave
retf
stc
sbb
pop
xchg
sar
mov
nop
mov
outs
pushf
loopne
push
jbe
cs
test
pushf
cmp
pop
imul
retf
adc
adc
mov
cli
inc
bound
add
mov
add
add
pop
xor
stc
push
mov
mov
sub
rol
mov
inc
(bad)
(bad)
mov
mov
mov
xchg
jmp
fisub
add
scas
xchg
sbb
das
dec
mov
inc
fimul
add
daa
dec
add
ror
push
call
mov
sub
shl
jo
cmp
dec
stc
xor
out
fmul
loopne
sub
and
push
das
jo
fiadd
cmp
sbb
cmovne
or
mov
mov
dec
sub
aaa
cmp
mov
mov
loopne
mov
pop
cmps
lods
cmp
sub
(bad)
mov
fcom
mov
daa
adc
(bad)
pushf
in
fs
adc
pop
out
(bad)
(bad)
dec
push
mov
stc
rol
xchg
inc
adc
inc
xor
push
mov
call
sahf
pushf
mov
inc
loopne
mov
xchg
test
mov
(bad)
fwait
inc
into
dec
mov
push
mov
inc
rcl
aaa
icebp
ja
adc
xchg
jnp
or
jg
sar
push
cmp
dec
stc
pop
mov
mov
fdecstp
sub
out
pop
repz
xor
stos
mov
xchg
out
jecxz
cli
sbb
sub
pop
sar
xchg
test
cs
out
sub
pop
add
pop
and
push
cli
fdiv
mov
inc
and
jmp
icebp
dec
das
add
xchg
jecxz
mov
scas
mov
test
lds
cmps
xchg
sub
fs
pushf
inc
mov
jne
pusha
cli
pop
add
popf
rcr
std
movs
cmp
dec
inc
mov
inc
inc
cmp
call
jge
mov
shr
nop
push
pop
inc
and
pusha
rcr
push
cwde
mov
or
retf
popf
into
shl
imul
xor
add
inc
mov
aas
and
sbb
(bad)
pop
add
jbe
aas
push
pop
aam
add
repnz
es
mov
movs
mov
(bad)
mov
cmp
mov
sbb
in
dec
ins
push
lock
xor
xchg
fdivr
pop
daa
adc
or
js
xor
loope
aam
adc
fnstcw
out
adc
xlat
jl
dec
outs
inc
xchg
retf
dec
sbb
lds
xchg
ins
call
pop
(bad)
ins
cmps
xor
pop
sub
push
jp
jl
ror
or
lds
adc
mov
push
mov
test
sbb
push
sub
pop
sub
adc
xchg
popf
test
xchg
cwde
and
pop
and
inc
dec
mov
shl
xchg
data16
inc
push
movs
lods
loopne
int3
jns
adc
(bad)
fisttp
imul
jmp
js
xchg
and
sub
rcl
and
push
gs
xor
sahf
mov
dec
scas
icebp
inc
jmp
push
daa
mov
(bad)
dec
dec
mov
iret
add
and
jb
and
push
jle
nop
dec
out
dec
jno
nop
call
push
sahf
fisubr
jg
aaa
inc
fsubr
mov
add
lds
aaa
jbe
movs
ror
xor
inc
push
lods
lahf
dec
scas
cli
in
dec
and
sbb
aam
xchg
lahf
data16
jnp
outs
repz
or
push
(bad)
inc
popa
and
inc
test
sub
inc
pusha
dec
cmps
adc
pop
repz
jmp
or
cdq
or
xchg
inc
add
pop
jns
jno
retf
out
jns
shl
fwait
adc
and
mov
and
imul
std
popf
inc
cmp
in
mov
add
std
sbb
add
fwait
setno
rcl
arpl
xchg
call
popf
mov
mov
mov
pop
push
pop
jbe
or
daa
pop
not
aas
xor
ss
(bad)
in
sbb
jg
mov
loop
push
fldln2
xchg
add
ins
jmp
cmps
jl
into
sahf
inc
push
sbb
cmp
icebp
sub
(bad)
hlt
test
or
out
inc
aam
sbb
shr
or
ror
(bad)
adc
movs
retf
das
test
aam
nop
hlt
enter
ins
jge
or
es
jmp
int3
adc
jne
ins
outs
xlat
xchg
out
in
xor
mov
rcl
mov
sub
sub
call
adc
inc
mov
and
mov
pop
test
mov
pop
cwde
retf
mov
mov
imul
and
(bad)
(bad)
shr
je
sbb
push
mov
push
jne
jp
xchg
iret
or
ss
pop
movs
jo
loopne
repz
push
rcr
movs
cmp
mul
mov
pop
inc
jo
pop
std
or
cdq
cmps
xchg
inc
pop
and
and
push
ja
cwde
repnz
add
neg
ret
arpl
out
jmp
cmp
sub
cmc
adc
mov
or
out
add
leave
push
push
repz
pushf
cld
pop
retf
pminub
xchg
mov
or
popa
call
jb
and
je
xor
pusha
or
xor
adc
lds
(bad)
jb
dec
iret
(bad)
aaa
popa
xchg
ins
ucomiss
xor
sub
jne
and
(bad)
imul
add
add
and
loopne
and
push
dec
push
stos
(bad)
mov
cmc
lods
icebp
adc
stos
pop
mov
push
xchg
mov
ins
inc
jb
scas
cdq
arpl
dec
lea
xor
movs
leave
pop
jae
fcmovu
push
popa
inc
ins
in
adc
sar
loope
lods
xor
or
xchg
lahf
mov
call
pop
ds
sub
les
and
cmp
sub
dec
jge
add
push
jo
cdq
xchg
pop
out
jmp
and
sbb
in
jo
jno
sbb
mov
scas
scas
xor
push
fdiv
mov
aam
cmp
inc
dec
push
push
(bad)
cmps
mov
call
mov
sbb
cmps
xchg
sbb
and
jnp
fsubr
gs
xchg
mov
xor
in
ret
std
adc
cmps
movs
jo
fdiv
lahf
push
arpl
inc
les
movs
sbb
mov
cwde
cmp
call
mov
in
sbb
jmp
daa
ins
cwde
push
inc
fsub
push
into
adc
imul
ins
mov
push
xor
push
xchg
push
push
jge
ja
mov
sbb
imul
inc
cmp
(bad)
cmps
mov
inc
mov
gs
stos
pop
fwait
or
fmul
fsub
ror
jmp
push
push
xchg
dec
es
lock
mov
test
aas
adc
fcmove
mov
push
cwde
call
sbb
mov
inc
inc
imul
and
mov
cmp
ja
sub
sbb
jo
sbb
shl
xchg
mov
lods
repnz
pop
inc
cs
pushf
mov
mov
scas
lods
dec
mov
add
mov
lock
and
adc
je
and
cmc
cmp
pop
jbe
pop
repnz
test
ins
loopne
pop
jbe
outs
iret
or
inc
pusha
cdq
fidivr
hlt
(bad)
sti
scas
sti
sub
or
adc
add
dec
out
scas
test
into
(bad)
(bad)
push
(bad)
das
mov
(bad)
pop
ss
arpl
std
push
fst
push
fsincos
pushf
inc
mov
movs
jge
gs
jecxz
jno
(bad)
mov
xor
add
cmp
jno
call
xor
adc
ret
dec
mov
jo
jl
xchg
push
jns
iret
or
mov
and
or
or
jne
ret
and
pop
mov
mov
cmp
add
ins
mov
sub
repnz
call
retf
jo
and
jne
inc
jmp
pop
xor
sti
aad
jl
fmul
sbb
mov
aam
xor
fwait
pop
sbb
std
ins
add
fmul
loopne
outs
cmp
mov
or
push
mov
mov
and
popa
lahf
scas
pop
shr
sub
xor
and
and
jp
sbb
loopne
int
mov
lods
rol
cs
repz
addr16
sbb
cmps
fucompp
and
sub
fcom
leave
ror
shl
mov
je
jmp
dec
popa
mov
push
mov
in
lods
arpl
lds
mov
rol
mov
and
int3
add
and
push
fdivr
(bad)
ficom
add
sbb
sysexit
jmp
xchg
jge
out
add
clc
dec
clc
fbld
push
add
or
mov
jecxz
nop
clc
lds
mov
xchg
daa
out
add
in
mov
outs
je
or
lock
mov
or
pushf
sub
stos
xor
xchg
push
xchg
cmp
cdq
scas
and
ficomp
nop
test
arpl
mov
leave
pop
bound
ficomp
cmp
push
or
or
pushf
sub
push
pop
repz
daa
outs
inc
fdivr
jae
jg
xchg
loopne
outs
and
mov
inc
xor
mov
mov
loope
sub
xchg
and
or
sub
mov
and
fdiv
cmp
fidivr
cmps
pop
or
add
call
dec
cwde
sbb
push
add
fwait
mov
add
add
popf
popa
pop
mov
popf
cmp
pop
mov
repz
in
jge
adc
mov
rcl
mov
jne
cmp
mov
vmwrite
jg
packsswb
cmp
inc
shl
aam
pop
pop
push
into
aad
sbb
movs
and
push
inc
cmps
cmp
fcom
enter
push
stc
dec
in
xor
jne
repz
cmp
in
and
jl
inc
out
daa
mov
rcr
mov
pop
ins
rcr
out
cmp
inc
mov
pop
mov
pusha
dec
push
xor
lods
push
cmps
pop
sub
(bad)
popa
sbb
mov
stos
mov
jl
out
lods
adc
cmps
(bad)
add
sar
push
retf
ss
xchg
imul
push
pop
jl
dec
fcom
mov
test
dec
and
hlt
sbb
mov
dec
or
jnp
fsubr
push
push
sbb
hlt
push
shr
xor
pop
cmp
sbb
hlt
in
rcr
jl
and
push
iret
not
adc
push
jmp
arpl
mov
dec
xor
adc
pop
push
or
jmp
inc
aas
in
popa
sahf
aas
adc
adc
scas
push
sbb
push
mov
pop
inc
dec
es
jo
aad
lock
push
sub
mov
mov
cli
pop
ret
dec
std
mov
push
ret
jle
cdq
mov
stos
pusha
add
shr
jb
stos
nop
lods
bound
xlat
xchg
(bad)
xchg
ret
inc
pop
outs
and
xor
scas
mov
inc
sub
pop
cmc
or
popf
idiv
outs
sbb
add
sti
push
cmp
pop
pop
mul
mov
shr
scas
push
pop
mov
nop
mov
call
lahf
jge
ret
jp
add
xchg
sub
pop
fisttp
(bad)
sub
mov
cs
cmp
les
mov
xor
dec
fsub
add
nop
mov
add
jge
test
mov
xchg
inc
pop
repz
fsub
sub
mov
ror
mov
pop
enter
retf
cwde
ret
(bad)
cld
push
push
cmps
cmps
into
xor
les
ds
pop
jbe
and
xchg
or
int3
inc
sub
out
mov
push
cmps
cmps
xchg
mov
lods
and
(bad)
mov
jb
mov
mov
test
pop
jae
jno
out
mov
adc
sti
out
pop
and
inc
and
push
jno
inc
cmp
enter
cmp
fsubr
push
outs
mov
lods
movs
dec
push
xor
in
dec
mov
inc
stos
les
push
xchg
xchg
into
shr
daa
pushf
ret
xchg
inc
ins
jmp
add
and
mov
adc
jns
jae
jecxz
not
mov
push
pop
daa
arpl
mov
vmwrite
dec
inc
or
mov
inc
mov
lods
rol
sub
lods
jns
adc
adc
push
sub
mov
dec
push
ja
stos
repnz
push
repz
mov
fstp
jmp
(bad)
ins
mov
xchg
or
(bad)
arpl
push
or
mov
xlat
push
pop
sbb
bound
and
repnz
cmp
fs
xor
outs
adc
adc
sbb
xor
sahf
mov
sbb
pop
cdq
rcr
ss
cmc
or
outs
mov
cmps
sub
dec
xchg
aad
adc
ficomp
xlat
(bad)
cmp
leave
jne
add
push
inc
ret
call
loopne
lahf
ret
cmp
js
ss
fistp
addr16
loop
xchg
mov
adc
daa
cli
or
(bad)
std
push
movs
and
addr16
pop
imul
call
dec
ja
push
pusha
std
cmp
mov
sbb
or
sub
mov
jge
add
hlt
retf
mov
in
ret
nop
(bad)
adc
out
out
(bad)
outs
xlat
lds
add
(bad)
push
imul
jge
or
adc
icebp
cld
mov
imul
les
jno
cmp
(bad)
lods
fld
mov
mov
xor
aam
mov
pusha
or
sub
jb
dec
mov
(bad)
stos
and
scas
xchg
push
scas
mov
inc
dec
int
adc
push
outs
enter
cmp
stos
jle
inc
mov
cmps
pop
push
mov
cld
shl
inc
sub
xor
movs
xchg
sub
retf
stos
xor
mov
dec
push
or
mov
int
mov
push
sbb
or
add
and
jle
fsub
jmp
fild
div
je
(bad)
in
add
jbe
dec
sub
pop
dec
sub
call
(bad)
cld
mov
cmp
cli
cmps
jp
test
adc
mov
iret
add
into
and
ins
push
jp
popf
fs
and
cli
or
rol
and
inc
fdecstp
fsub
and
es
div
sahf
mov
or
sub
js
popf
outs
test
aam
add
inc
sub
test
imul
add
xchg
std
mov
ins
jo
push
push
popa
popa
or
cdq
pop
(bad)
pop
aaa
repnz
cld
sti
(bad)
dec
repz
pop
sub
pop
push
jl
addr16
outs
call
jb
dec
fdiv
mov
popf
daa
fs
mov
(bad)
xor
icebp
mov
dec
cmovg
mov
add
adc
push
ror
jg
cwde
cmps
mov
dec
ret
repnz
mov
lds
fst
out
fnstcw
sbb
das
ret
dec
jmp
aas
xor
jae
jle
add
fwait
or
mov
cmp
jg
and
gs
cmp
push
pop
loop
push
aad
and
jo
pop
enter
test
fild
lea
sbb
jo
sbb
ja
xor
add
test
jp
xchg
dec
lahf
mov
jbe
xor
jo
cmp
dec
dec
jge
shl
xor
lahf
push
das
int
xchg
pop
(bad)
pusha
jo
das
retf
jo
cmp
dec
daa
pop
inc
nop
adc
or
lahf
lds
lea
test
shl
fisttp
adc
mov
test
xor
test
xchg
cwde
xchg
sbb
mov
sub
sub
mov
cmps
stos
imul
jno
xchg
aas
fs
outs
out
enter
aam
xor
shr
inc
push
dec
test
call
in
mov
shl
call
jg
mov
xor
or
xor
(bad)
xor
call
and
add
rcl
jns
adc
push
movs
(bad)
mov
cs
ss
push
icebp
fnstenv
cdq
jmp
daa
call
lahf
sbb
mov
or
adc
inc
mov
outs
shl
cmp
mov
and
jne
es
jle
aaa
fld
outs
jb
lock
in
fwait
mov
neg
cmps
cwde
or
out
iret
and
mov
stos
pop
imul
retf
lods
das
mov
pop
sti
shl
add
inc
adc
pushf
xlat
adc
push
mov
sahf
pop
js
pop
loope
nop
add
loope
ret
pushf
adc
jmp
mov
inc
pusha
rcl
loop
sub
push
sub
sahf
(bad)
mov
jmp
xor
rcl
jno
fsubr
in
and
mov
sub
mov
add
jle
lods
mov
adc
mov
iret
pusha
inc
and
dec
int3
push
retf
out
xchg
jae
das
mov
in
or
pop
xor
inc
jae
test
jp
stos
jmp
add
xlat
and
pushf
int3
mov
inc
arpl
ds
or
adc
cmps
outs
jl
repz
div
or
fucom
adc
or
repnz
mov
dec
sub
mov
sbb
iret
adc
dec
pop
fs
jnp
cwde
xor
sahf
xor
cmp
pop
mov
lock
inc
xor
jp
jmp
pop
add
mov
ins
ins
push
sub
dec
jge
xor
sub
in
push
push
loop
push
jns
pop
inc
ins
fwait
and
mov
push
and
xchg
inc
pushf
fstp
imul
sbb
xor
xor
lods
les
fs
and
mov
stos
sub
pop
mov
aas
mov
xchg
dec
inc
pop
(bad)
sbb
lods
dec
cli
lods
imul
dec
adc
mov
loop
adc
mov
or
rcr
pop
ss
in
mov
jo
xchg
add
loop
mov
xchg
pop
cmp
in
xor
cli
add
mov
pusha
in
es
(bad)
xor
fadd
push
pop
cli
fsubr
stos
or
das
out
mov
loope
jmp
xchg
and
cmps
lods
arpl
xchg
lods
scas
add
inc
jns
in
out
(bad)
pop
ror
jl
sub
cmp
sub
inc
cmp
or
and
in
sbb
pop
ror
daa
xor
cld
inc
inc
adc
addr16
adc
jl
in
test
popf
and
ins
push
(bad)
cld
jns
and
pop
jno
mov
int3
stc
sub
rcl
clc
ja
inc
cld
jnp
mov
adc
adc
(bad)
fcmovu
mov
cmp
and
add
mov
fist
mov
jno
lods
js
or
mov
jecxz
mov
xchg
xor
int
or
fisttp
(bad)
add
pop
mov
loopne
fist
or
cmps
fstp
scas
dec
xor
inc
push
lahf
sti
or
dec
push
mov
or
pop
jmp
dec
mov
cmps
ins
mov
mov
and
les
jnp
into
out
aad
popf
movs
imul
add
xor
iret
pop
icebp
fidivr
ficom
ins
aam
sub
mov
jbe
dec
rcl
mov
test
retf
int
cmc
test
cmp
fisub
movs
mov
sbb
mov
stos
inc
aad
fisub
out
push
cld
mov
inc
cld
adc
(bad)
mov
out
sub
fst
call
mov
mov
add
mov
xchg
or
adc
xchg
mov
adc
sbb
mov
dec
fdivr
ret
fnstenv
cmc
dec
jp
dec
cwde
shr
dec
lods
push
and
mov
mov
jns
in
mov
sbb
jno
aaa
gs
pusha
fcom
std
ror
sub
or
ins
push
inc
scas
dec
pop
push
cmp
push
out
pop
clc
fidiv
test
enter
loop
fstp
pop
sti
jo
fwait
jp
dec
das
add
cmp
mov
add
lods
dec
out
sbb
gs
pop
dec
xchg
xchg
and
dec
mov
push
xchg
std
cmp
test
xor
pop
inc
repnz
test
mov
or
push
cmp
aas
pushf
push
fdiv
adc
mov
jnp
clc
repnz
mul
dec
and
mov
xlat
cs
mov
sbb
aas
mov
pushf
mov
and
lds
xchg
xor
bswap
movs
pop
mov
push
cmp
jmp
mov
mov
call
loop
fimul
dec
sti
cmp
std
or
ret
out
int3
dec
push
pop
xchg
inc
dec
out
pop
sub
and
push
inc
xor
jecxz
xchg
pop
cwde
test
push
sub
aad
mov
inc
mov
in
ins
bound
loope
cli
cmp
jge
mov
pop
loopne
das
sub
call
aam
repnz
(bad)
sbb
lock
sbb
sub
xor
mov
push
sar
jne
inc
aad
ds
and
sar
sbb
sub
rol
retf
or
pop
push
dec
push
retf
sar
cmp
pop
lods
sub
pop
cwde
loop
loopne
add
arpl
aad
adc
addr16
dec
pop
pop
aam
fisubr
sub
mov
shl
xchg
cmp
mov
enter
jge
sbb
enter
pop
stos
and
ret
sbb
push
and
std
(bad)
xor
add
stos
cdq
nop
xchg
push
push
cli
or
mov
dec
mov
dec
adc
jo
xchg
aaa
mov
fstp
sbb
push
hlt
cmp
cmps
aas
mov
loop
test
scas
add
pop
pop
jecxz
add
xchg
scas
ficom
adc
xor
inc
mov
ficom
retf
jg
jbe
cli
push
cmp
inc
test
inc
and
cmc
sub
inc
aaa
dec
xchg
jnp
ror
daa
test
xchg
mov
add
cs
retf
enter
aad
inc
inc
dec
dec
mov
push
sub
fstp
lahf
in
cld
inc
into
pop
pop
add
shl
adc
ret
cli
push
mov
lods
loop
repnz
xchg
ins
fistp
shr
test
mov
push
cmp
xor
ins
jmp
fwait
ror
test
push
jnp
in
xor
out
icebp
gs
push
icebp
and
lods
push
jns
jp
mov
mov
fsubr
test
adc
scas
sub
add
or
addr16
movs
cmp
stos
aad
les
mov
(bad)
mov
fsubp
cvtdq2ps
xchg
sbb
dec
imul
pop
test
mov
cmp
pop
cmp
outs
ror
mov
data16
adc
sahf
std
xor
(bad)
jo
xor
mov
pop
les
mov
pop
push
mov
pop
fistp
data16
icebp
mov
rcr
addr16
popf
jno
inc
int
imul
and
mov
cmps
adc
pop
adc
retf
adc
into
fist
or
test
stc
popa
(bad)
pop
xchg
cmp
idiv
rcr
xor
fdiv
mov
cmc
movs
xor
pop
push
jecxz
in
int
into
arpl
mov
mov
and
pop
ror
cwde
repz
das
shl
mov
into
mov
sbb
test
or
add
inc
push
icebp
sbb
int
nop
scas
das
test
adc
cmps
sbb
dec
loopne
add
mov
xlat
sub
pop
pop
in
push
jns
dec
arpl
sbb
xchg
icebp
pusha
xchg
cmp
fbstp
dec
xor
or
or
jno
and
xor
mov
dec
add
cmc
sub
xor
mov
sti
mov
test
(bad)
lock
mov
in
retf
ror
int3
add
mov
add
or
adc
sub
pop
sub
cld
cmp
dec
xchg
ss
dec
xchg
pop
punpckhdq
adc
xlat
arpl
pop
cmc
pop
mov
add
sbb
(bad)
sbb
shl
ins
inc
and
or
aam
mov
mov
add
mov
xor
xor
xchg
push
pop
sub
mov
jae
imul
jns
fiadd
push
mov
cld
inc
xchg
jl
test
xlat
xchg
and
rcl
sub
call
and
xor
mov
shl
sbb
fbld
xor
les
pop
mov
cmp
mov
jmp
aas
xor
mov
inc
sub
pop
pop
jb
out
int
and
loop
fidivr
dec
cmp
pop
adc
mov
mov
hlt
repz
mov
adc
push
popf
cmps
lahf
(bad)
arpl
dec
int
push
(bad)
dec
dec
lds
rol
(bad)
xchg
enter
(bad)
cmp
retf
sbb
retf
daa
mov
test
ss
les
dec
sahf
ror
inc
pop
outs
pop
pushf
js
mov
xor
inc
dec
sbb
sbb
outs
dec
mov
lea
(bad)
out
xchg
ds
rcl
fiadd
lock
repz
dec
xchg
mov
lea
repnz
dec
or
cld
inc
jnp
(bad)
cmp
stc
fdiv
loopne
push
js
movs
mov
jmp
in
lahf
outs
mov
fld
push
ret
test
pop
sub
xor
mov
mov
cmps
mov
lds
movs
xchg
jmp
or
ror
or
lods
ret
mov
pop
cmp
test
dec
sbb
cdq
ror
and
cwde
rol
mov
xor
mov
push
add
popf
mov
pop
mov
inc
pop
clc
xor
loop
outs
pop
retf
pop
test
jne
pop
mov
cdq
lea
cwde
fmul
sbb
cmp
adc
test
or
sahf
imul
js
push
xor
jge
out
into
loope
sbb
out
das
mov
(bad)
adc
sub
(bad)
fucomip
sub
movs
call
adc
ret
inc
(bad)
cmp
imul
and
sti
test
xor
xchg
pushf
jo
add
jno
mov
dec
lock
pop
ret
jmp
xchg
push
and
dec
jnp
mov
push
in
pop
xor
repz
cdq
xlat
adc
mov
cmp
outs
mov
xor
loopne
jmp
mov
or
jns
adc
mov
add
je
stos
push
(bad)
xor
pop
(bad)
jae
adc
inc
cdq
scas
mov
jmp
test
lea
inc
cmps
pop
(bad)
outs
sbb
hlt
sub
jge
mov
out
movs
(bad)
sbb
ret
dec
les
(bad)
and
js
sub
pop
addr16
in
pop
call
pop
push
inc
jmp
mov
ror
add
cld
ret
jge
fwait
int3
lds
mov
fistp
mov
or
jno
out
xchg
popf
dec
out
xor
push
push
pushf
dec
pushf
in
xchg
imul
mov
and
shr
bnd
push
dec
test
pop
jb
fstp
in
sahf
mov
mov
jno
mov
push
jmp
sub
cmp
ror
mov
cwde
clc
imul
push
pop
inc
mov
popf
hlt
adc
clc
inc
push
jns
jmp
push
sbb
pop
inc
sahf
and
inc
aas
and
enter
cmp
fadd
loop
cwde
fist
pop
inc
mov
cld
jns
sub
push
push
cmp
adc
pop
pop
lock
es
xor
cdq
jno
(bad)
cmp
shl
out
inc
add
in
add
push
jmp
loopne
fisttp
mov
ja
arpl
arpl
jbe
in
and
push
shr
cmp
xchg
add
adc
neg
call
xchg
sub
test
stos
add
jl
xchg
jmp
push
dec
cmp
rep
call
arpl
imul
push
mov
cmp
aam
push
ret
lods
jae
xchg
and
shr
inc
sbb
inc
mov
xor
push
mov
or
test
push
aas
sahf
sub
sbb
loop
sti
lds
inc
push
mov
inc
test
fist
cmp
out
ss
mov
and
cmp
int3
adc
(bad)
push
push
mov
cmp
(bad)
loope
inc
and
xchg
jno
mov
ins
rcl
or
jp
in
fsub
add
psrld
inc
cli
mov
outs
mov
mov
test
fisttp
xor
adc
in
jl
hlt
cmps
loop
xchg
cmp
sub
push
push
dec
ins
aam
daa
sub
sub
xchg
push
js
xchg
cld
jb
mov
mov
(bad)
hlt
mov
inc
test
stos
dec
xchg
add
out
shr
cld
out
ds
jmp
(bad)
retf
scas
test
out
xchg
cld
pushf
jle
jno
adc
fdivr
cmps
sub
enter
cmp
ds
push
jns
xor
mov
gs
cmp
jl
out
stos
je
or
pop
push
ret
lea
outs
pop
movs
or
adc
xchg
loope
ret
jl
mov
enter
jbe
sbb
test
popf
repnz
scas
jecxz
jl
cdq
daa
mov
sti
cmp
cmp
sub
jl
mov
xchg
or
cli
add
xchg
lods
mov
push
in
sub
adc
lea
scas
ins
jbe
mov
mov
pop
imul
test
daa
aam
stos
dec
xor
add
cmp
in
inc
push
pop
xchg
dec
add
jbe
out
pop
inc
out
add
push
jae
int
jge
nop
inc
mov
scas
icebp
mov
lock
and
(bad)
pop
fisubr
xor
aad
cwde
popa
cmp
test
mov
sbb
test
inc
jno
mov
mov
nop
inc
es
xchg
pop
adc
aad
fcmove
loopne
mov
xchg
jns
cld
icebp
fidivr
jecxz
gs
cmps
dec
es
jb
jae
jge
ror
push
mov
shl
(bad)
js
pop
xchg
sub
(bad)
lahf
inc
repnz
dec
xchg
inc
jnp
cmp
dec
mov
(bad)
(bad)
clc
dec
jbe
hlt
cdq
bound
add
in
repnz
dec
add
jns
lock
sbb
lock
push
or
out
ret
neg
mov
repnz
ins
inc
popa
sti
aaa
(bad)
in
adc
mov
sub
add
jge
xlat
or
mov
push
stos
xor
mov
push
cmp
inc
push
inc
adc
or
mov
imul
clc
pop
or
jg
adc
(bad)
fprem1
not
les
cmps
scas
cwde
fscale
pushf
hlt
jle
inc
shl
popa
or
mov
adc
jg
cli
mov
fs
pop
inc
inc
push
aaa
push
fisubr
push
scas
int3
mov
xchg
lea
sbb
ficomp
daa
pop
stos
push
lahf
lods
leave
mov
xchg
cli
xchg
std
retf
pop
mov
mov
cdq
(bad)
lea
in
mov
mov
outs
pcmpgtw
ins
mov
pop
div
mov
cwde
out
add
dec
push
pop
or
jbe
jl
mov
sbb
loopne
xor
(bad)
fcmovne
pushf
push
xchg
inc
in
das
pop
bound
ret
stos
hlt
stos
pop
jmp
neg
(bad)
mov
mov
ss
mov
(bad)
jmp
add
(bad)
jb
xchg
(bad)
inc
jns
mov
hlt
mov
(bad)
cmp
mov
adc
pop
leave
xchg
pop
mov
add
nop
cmp
aad
icebp
out
xchg
shr
add
jl
fistp
mov
jmp
stos
add
imul
sub
xchg
and
jb
adc
jno
cmp
ins
out
or
jmp
lods
cmp
test
shr
mov
aam
retf
push
imul
stc
or
dec
jnp
fs
dec
imul
jg
ja
dec
cmp
nop
fistp
stos
adc
push
inc
sub
shl
lock
jl
dec
mov
aam
in
(bad)
outs
sbb
push
in
mov
(bad)
and
adc
adc
dec
pop
shl
fwait
dec
push
(bad)
push
cmc
add
(bad)
dec
cmc
xor
jmp
add
or
lods
hlt
lahf
and
or
dec
xor
add
push
aas
fisttp
getsec
dec
and
mov
out
jp
sbb
xor
xchg
stos
shl
mov
pop
sbb
lock
push
enter
or
push
mov
lods
(bad)
std
scas
movs
out
pop
daa
and
jnp
mov
shr
fcmovnb
mov
lea
popf
out
sub
comiss
mov
test
imul
xor
test
sahf
mov
(bad)
test
imul
pusha
lock
mov
xor
inc
mov
cmps
inc
test
cmps
aas
sbb
out
test
inc
sbb
loope
pop
pop
cmp
cmp
call
jle
in
pop
stos
lahf
sub
mov
add
sub
sbb
les
test
or
inc
in
je
scas
in
inc
jmp
aaa
push
mov
jns
in
push
push
icebp
mov
aaa
test
and
jle
inc
pop
pushf
clc
mov
repnz
inc
pop
into
xchg
cmps
pop
push
xchg
xchg
jmp
std
sahf
or
xchg
adc
pusha
in
pop
or
mov
jmp
nop
or
jge
icebp
jae
pop
in
adc
cdq
jbe
or
jecxz
lock
cmp
jecxz
mov
fs
fiadd
dec
lds
lea
sbb
dec
adc
lods
movs
jnp
pop
ss
adc
push
mov
pushf
test
jl
pop
(bad)
enter
mov
popa
movs
ret
xchg
mov
jb
mov
and
je
xor
stos
mov
aaa
push
sub
imul
jno
aas
(bad)
pop
or
outs
ja
lods
sub
or
or
xor
outs
xchg
mov
loop
in
repnz
cmps
cs
inc
mov
mov
retf
adc
sub
in
jp
out
mov
mov
mov
mov
jae
mov
sahf
sahf
ins
push
dec
and
xchg
rcl
ds
sar
aas
cld
sbb
push
lods
sub
div
sti
xlat
push
mov
xor
pop
sbb
pop
in
sbb
add
cmp
lods
cmp
iret
jmp
es
std
jmp
inc
mov
test
loop
cwde
pop
sbb
mov
les
and
xchg
in
xor
leave
pop
sar
mov
mov
sar
loopne
inc
pop
rcl
das
mov
jno
add
hlt
jmp
scas
mov
das
jmp
mov
jnp
sbb
add
out
push
pushf
push
out
jge
sahf
xor
int3
out
popf
or
jmp
rcl
cli
push
test
not
and
jmp
cmp
jmp
imul
adc
jl
add
and
cdq
arpl
dec
mov
cmps
mov
or
(bad)
hlt
(bad)
fwait
xor
inc
leave
popa
cmps
pop
sub
jmp
clc
jmp
int3
ins
adc
or
and
dec
cmp
and
ror
sar
loop
out
and
ficomp
push
sbb
aaa
xchg
je
sub
data16
inc
(bad)
outs
call
and
outs
test
out
or
jbe
lods
int3
retf
(bad)
sbb
add
sub
jmp
dec
push
cmp
pop
je
ret
cmp
sbb
adc
cmp
cmp
dec
cmp
jp
popaw
outs
rol
inc
rcl
das
sub
scas
cs
je
out
mov
sbb
jmp
cmp
add
push
cmp
movs
sbb
shl
push
xor
test
retf
iret
add
retf
mov
dec
dec
arpl
lahf
add
and
cmc
jae
adc
(bad)
push
into
dec
or
mov
(bad)
jne
push
rol
popf
adc
push
sbb
xchg
jnp
adc
lods
mov
sbb
sub
push
xlat
stos
or
icebp
sbb
dec
and
retf
inc
jmp
pushf
mov
inc
cmp
ins
mov
scas
sbb
mov
aad
xor
(bad)
lock
dec
cld
aaa
xlat
cmp
(bad)
call
pop
push
pop
mov
(bad)
jne
mov
std
repz
es
test
fcomp
retf
dec
cdq
fsubr
cmc
xor
adc
les
test
sbb
int
xor
repnz
ficom
dec
jl
and
mov
icebp
xchg
test
es
(bad)
mov
jmp
xlat
sbb
mov
std
sbb
mov
and
inc
loop
cmp
stos
mov
xchg
jo
and
pop
jo
aam
imul
xor
jmp
mov
push
pop
xchg
mov
push
and
aaa
gs
into
nop
jl
shl
sbb
test
or
out
call
stos
fcomp
ins
cmp
cmp
aam
lahf
adc
(bad)
fcomp
lock
adc
cld
push
xchg
cwde
pop
push
xor
mov
add
xor
push
std
aaa
mov
sbb
loope
retf
xor
ins
fiadd
sub
dec
fiadd
int
ror
outs
adc
(bad)
jo
jle
jl
sub
dec
jmp
cs
cwde
fsubr
and
mov
clc
in
cwde
cmps
js
inc
adc
in
jo
(bad)
fwait
xor
mov
es
test
out
xor
test
xchg
sub
xor
popf
sbb
mov
in
add
js
push
dec
ret
or
in
jp
aad
leave
call
(bad)
fsubr
cmps
test
fnsave
and
in
xchg
icebp
pop
pop
outs
sbb
popa
or
xor
movs
mov
push
mov
mov
xchg
fs
repz
mov
xor
pop
cmp
and
xor
adc
fwait
mov
mov
dec
jae
das
lods
adc
xchg
dec
gs
ficomp
es
lds
mov
xor
ffreep
sbb
call
sub
mov
adc
rcl
push
mov
cmp
scas
or
pop
ficom
inc
lods
neg
je
test
or
test
test
aas
ror
cmp
pushf
jbe
es
pop
push
push
pop
sub
pop
es
mov
sahf
sbb
test
dec
iret
jns
int3
dec
loopne
test
mov
adc
adc
and
adc
mov
push
call
mov
ret
scas
int3
xchg
out
fidivr
mov
icebp
pop
repnz
fcom
sbb
lahf
sub
test
inc
mov
test
pop
leave
xlat
jl
sbb
cmc
pop
pusha
or
ret
pusha
mov
mov
xchg
mov
xor
ficomp
sbb
shl
inc
pop
div
adc
mov
dec
cmp
js
test
pop
mov
repnz
mov
mov
ss
pop
xchg
sbb
loop
adc
es
xchg
data16
mov
lds
clc
dec
xor
stos
cmp
xor
das
push
addr16
mov
int
leave
test
clc
add
rcr
(bad)
fmul
daa
mov
das
inc
or
push
pop
mov
dec
pushf
pop
scas
div
int
pushf
mov
inc
inc
shl
les
rcr
xchg
cdq
xor
repnz
and
jg
jbe
xchg
add
jmp
mov
gs
out
into
sahf
push
mov
and
jo
xchg
clc
pop
pop
aaa
int
mov
mov
outs
bound
jp
sbb
leave
push
push
test
js
ret
add
add
leave
dec
xor
pop
dec
mov
adc
js
mov
inc
mov
pop
push
push
(bad)
mov
retf
(bad)
mul
out
adc
jo
jecxz
ds
sub
mov
jmp
mov
inc
jp
test
loopne
push
jne
sub
fcom
ret
dec
jecxz
les
loop
xor
arpl
js
push
xor
loop
cs
pop
stc
popa
lahf
sub
push
mov
test
aaa
xchg
adc
and
jo
mov
dec
jl
add
(bad)
pop
hlt
dec
jmp
aam
outs
jne
mov
xchg
jns
mov
xchg
sub
xor
lahf
repnz
repz
fscale
iret
xchg
add
sub
xchg
inc
pusha
mov
cmp
mov
loope
or
ret
sbb
lods
je
pop
movs
out
scas
push
fnsave
and
and
pop
test
and
std
mov
cld
fild
repnz
xor
lods
int
jns
pusha
mov
jns
dec
movs
int
xchg
neg
pop
jp
in
and
push
idiv
adc
mov
dec
sbb
mov
mov
call
leave
std
inc
add
clc
sub
push
popa
(bad)
pop
shr
mov
int3
lea
shl
(bad)
mov
dec
pop
dec
jmp
pop
inc
std
mov
pop
fwait
int
cmp
mov
mov
loope
adc
mov
retf
push
inc
movs
or
jb
cli
mov
ins
les
popa
repnz
arpl
std
in
mov
sar
or
sub
sub
popa
pop
test
and
or
sub
push
test
cs
sbb
push
cmps
sbb
xor
push
fild
mov
xor
and
mov
sub
lahf
scas
jg
aad
sbb
sbb
test
mov
ins
mov
add
cmp
push
ins
pop
xor
stc
push
popf
jb
div
mov
retf
mov
gs
inc
mov
xor
and
mov
popf
addr16
xor
xchg
push
mov
test
bnd
neg
(bad)
iret
and
ss
fisttp
adc
cs
pop
lahf
ins
adc
add
(bad)
mov
cmp
jae
jne
loope
int
dec
jmp
test
add
imul
clc
mov
jmp
and
(bad)
lea
lds
loope
jge
add
inc
xor
mov
cmp
lods
lock
mov
add
jmp
push
(bad)
lock
mov
jmp
or
(bad)
movs
es
pop
call
xor
cmp
mov
cmps
or
movs
aaa
mov
je
mov
in
mov
sar
pop
lea
scas
mov
movs
imul
dec
into
std
popa
add
cmps
cwde
pop
jns
dec
xchg
add
call
ins
stos
fsub
mov
ret
push
sub
aas
mov
ret
outs
cmp
mov
jbe
pushf
dec
jmp
inc
inc
jge
sbb
loop
aad
xchg
pusha
aas
loop
and
pop
pop
les
mov
outs
in
xor
mov
mov
push
retf
pusha
and
jg
repnz
scas
repz
jnp
cs
ss
aam
mov
pop
jbe
and
ins
scas
jge
std
mov
add
ins
sbb
adc
xor
lock
hlt
cmp
inc
cdq
daa
(bad)
(bad)
jnp
mov
sbb
pop
bound
movs
sbb
in
pushf
not
test
mov
inc
push
pop
aaa
(bad)
xchg
cmps
xchg
call
and
add
mov
ficom
cld
(bad)
ds
call
xor
stc
sbb
pop
and
movs
mov
and
(bad)
push
fmul
jecxz
rcl
mov
sub
xchg
sub
and
xchg
jns
push
lods
mov
lahf
test
in
clc
mov
fwait
jmp
xor
sbb
sar
jp
mov
jns
xlat
sub
cld
pop
fwait
add
outs
in
int3
cdq
push
(bad)
lock
mov
pop
push
cdq
aaa
inc
lock
sti
sbb
fs
jp
dec
push
in
retf
sbb
out
sbb
cli
push
inc
pop
push
pushf
mov
pop
das
cmp
add
lods
pop
js
pushf
xor
and
outs
addr16
xchg
xchg
and
mov
ins
jne
fisubr
test
jle
cs
mov
pop
xchg
scas
push
jg
mov
dec
or
lahf
inc
or
sub
loopne
add
dec
leave
retf
xchg
pop
push
pop
cmp
aaa
dec
jns
add
int
mov
aam
arpl
dec
out
hlt
aad
pusha
les
mov
mov
xchg
test
retf
loope
and
mov
fistp
mov
pushf
fldcw
jns
mov
fnstenv
aas
adc
movs
mov
dec
inc
fist
(bad)
push
repnz
mov
push
jp
gs
dec
sub
mov
jecxz
das
ss
and
sub
xchg
cmps
and
imul
sbb
push
xchg
pop
fdivr
(bad)
jno
jmp
fistp
test
xlat
iret
adc
sti
sbb
add
pop
loop
inc
cmps
out
lock
loope
pop
call
adc
xchg
cld
dec
vmread
sbb
shl
jo
sar
repnz
sbb
(bad)
and
sar
lahf
mov
out
xor
adc
test
push
dec
in
test
movs
mov
lds
xchg
jbe
mov
lods
(bad)
clc
push
fstp
or
dec
loope
pop
xor
fwait
out
(bad)
sub
sub
(bad)
cmp
ds
xchg
sbb
std
mov
test
fst
sahf
mov
inc
call
push
and
je
call
daa
push
mov
in
mov
xor
xchg
iret
adc
mov
jbe
sti
add
sbb
push
pop
xchg
cmp
es
aas
stc
sbb
lock
arpl
mov
xchg
jmp
mov
xor
cmp
xchg
mov
xchg
add
jo
sbb
mov
cmps
sbb
loop
leave
cwde
adc
les
sub
das
dec
out
fs
int3
push
mov
pop
stos
test
or
add
les
dec
cmps
jnp
mov
call
(bad)
les
call
xchg
push
inc
mov
and
(bad)
shr
jp
cmp
fist
cdq
inc
add
cmp
dec
push
xchg
jge
popa
mov
cmp
or
ins
xor
call
aad
add
mov
(bad)
rcl
mov
dec
imul
inc
and
retf
inc
push
inc
mov
pushf
mov
mov
mov
sub
sahf
pop
mov
movs
cmp
pop
mov
cmps
and
pop
adc
rcr
add
pop
mov
aam
out
clc
xor
repz
movs
mov
lock
test
mov
imul
pusha
pop
add
into
iretw
loop
jb
sub
dec
shl
mov
fwait
out
jl
cmps
sub
jmp
sub
out
sar
mov
dec
add
(bad)
mov
lock
lock
mov
sbb
mov
loop
gs
retf
mov
or
mov
and
xchg
fbld
addr16
adc
cmp
stos
sbb
sub
cmp
or
fst
dec
hlt
inc
mov
pushf
push
cmps
mov
inc
push
ficom
mov
xor
dec
sbb
repz
mov
xchg
inc
aaa
dec
push
xlat
rcl
movs
iret
xchg
jmp
or
pop
ja
push
push
mov
rcl
push
fstp
cmp
mov
inc
int3
inc
inc
arpl
rcl
test
add
inc
xor
sbb
sub
pop
cld
dec
jnp
jbe
or
push
mov
cmp
movntq
call
and
clc
xor
mov
push
adc
fidiv
pop
neg
push
cmp
add
jb
jnp
mov
movs
inc
push
popa
mov
jbe
jbe
cdq
iret
and
push
fld
aam
shl
sahf
mov
les
mov
mov
loop
(bad)
push
lea
adc
jo
add
xchg
imul
loopne
mov
mov
pushf
scas
ja
jno
cmc
div
inc
pop
clc
fadd
or
inc
(bad)
push
adc
stc
aam
in
cmp
fnsave
sub
enter
mov
inc
jns
mov
pop
jecxz
jmp
dec
pushf
push
jg
mov
std
cmps
push
xchg
ret
inc
jns
int3
mov
call
outs
cli
pop
xchg
adc
jmp
push
pop
dec
xor
in
fsub
jno
sahf
or
mov
popa
sub
cld
xchg
fadd
mov
in
inc
push
or
mov
popa
les
jecxz
in
push
pop
cdq
and
pusha
pop
mov
inc
sub
shl
cmps
into
cs
and
add
and
jnp
xchg
fiadd
xlat
xchg
push
lods
add
xchg
and
out
adc
inc
test
mov
inc
adc
mov
bound
stos
or
mov
xchg
add
movs
jmp
sahf
les
sub
jo
sub
outs
loope
sub
lods
or
stos
push
fcom
and
gs
jno
mov
sbb
ins
out
call
mov
dec
and
(bad)
adc
sti
push
pop
cwde
add
dec
imul
mov
sti
inc
loope
aam
cdq
mov
add
cli
sar
out
cmc
mov
test
or
imul
mov
mov
sti
xchg
mov
int3
call
(bad)
xor
outs
pop
fcmovbe
or
outs
pop
ror
out
bound
xlat
or
adc
jo
imul
fsub
push
inc
jb
add
pop
in
cmps
and
sub
push
dec
xlat
cdq
push
sbb
test
push
mov
jmp
pop
dec
inc
inc
pop
or
lds
out
mov
sub
mov
(bad)
xchg
icebp
movs
js
aad
lods
sbb
jae
ins
and
sub
or
daa
jb
iret
data16
xchg
jmp
mov
jge
fbstp
dec
imul
sbb
sub
outs
imul
loopne
adc
push
jle
jae
sub
or
sub
loop
xlat
inc
ds
fimul
gs
xchg
xchg
jecxz
xchg
(bad)
pop
mov
mov
xor
add
aaa
xor
imul
sub
and
sbb
arpl
mov
adc
sub
jecxz
scas
aas
sbb
sbb
xchg
mov
popa
sbb
cmp
scas
jno
add
add
dec
sub
(bad)
cmp
popf
iret
or
inc
stos
retf
push
mov
or
out
aaa
mov
push
rol
or
cld
call
test
add
or
das
mov
es
stos
bound
add
popa
iret
add
adc
das
lds
(bad)
pop
fbld
bound
cmps
mov
xchg
mov
int3
push
jmp
test
inc
outs
mov
mov
mov
jecxz
sbb
adc
xchg
inc
mov
scas
cmp
div
fs
add
jae
mov
xchg
std
je
mov
cli
mov
or
daa
and
push
icebp
das
xor
aad
or
mov
pop
popa
out
ins
shr
ins
(bad)
mov
xor
out
sbb
leave
add
jbe
jl
or
sub
mov
dec
call
(bad)
jmp
dec
xchg
mov
add
sub
dec
mov
jb
push
add
or
popa
cwde
pushf
xor
in
push
fcos
push
stos
mov
cmp
fimul
div
mov
pop
sbb
aam
xchg
rol
mov
xchg
xor
lahf
loopne
dec
dec
cmp
fs
rol
mov
mov
adc
push
in
shr
cmp
sbb
cs
daa
loopne
mov
repnz
leave
pop
fldln2
cwde
xor
mov
pop
je
pop
cmp
test
out
popa
inc
mov
push
inc
jnp
stc
out
fbld
(bad)
call
jmp
mov
(bad)
jle
and
mov
(bad)
(bad)
add
int3
mov
push
pushf
xchg
sub
pop
scas
call
xlat
out
cmp
mov
retf
sbb
ins
aas
adc
mov
mov
inc
in
jg
dec
xchg
pusha
sub
or
mov
cmp
loope
call
mov
mov
pop
(bad)
loopne
sbb
xor
fild
dec
xchg
or
inc
mov
sbb
and
xchg
adc
sbb
mov
stos
mov
jecxz
sbb
push
jbe
fcomp
mov
dec
test
cmp
(bad)
dec
test
mov
push
jmp
xor
sub
jbe
push
xor
test
or
aad
or
push
dec
push
ins
dec
mov
dec
or
daa
jmp
mov
enter
js
fimul
es
imul
or
push
mov
mov
stos
or
push
loop
sti
pop
fist
pop
in
mov
add
dec
in
cmp
cli
adc
cs
dec
pop
loop
mov
bnd
pop
in
push
adc
push
xlat
(bad)
in
add
imul
or
call
jns
mov
repz
pop
and
and
ins
sub
lods
rol
faddp
sbb
push
mov
xchg
jp
addr16
bound
loop
cmp
dec
dec
data16
mov
data16
fistp
sub
mov
add
pop
fisub
mov
hlt
sbb
lds
fs
xor
call
(bad)
cmp
ja
and
sub
cdq
add
mov
cwde
movs
fisub
push
in
shr
and
sub
gs
movs
cmps
ret
xchg
rcl
mov
mov
out
push
fmul
repnz
test
cmp
cmc
and
pop
cmp
(bad)
push
xor
in
cli
adc
movs
push
cs
es
adc
or
inc
into
add
jmp
xchg
push
cmps
push
and
dec
aam
in
cmp
xchg
xchg
imul
jge
loopne
mov
sbb
pop
call
sub
dec
loopne
dec
add
pop
icebp
aam
out
cld
push
or
cmps
mov
mov
jmp
stos
scas
mov
pop
inc
inc
lds
push
xchg
(bad)
xor
(bad)
jge
jb
dec
adc
shl
mov
xchg
jnp
and
and
(bad)
arpl
mov
sahf
pop
pop
cmc
lock
rcl
test
ja
push
mov
stos
sysexit
or
xchg
xor
push
push
sub
mov
jns
lods
mov
cmp
js
or
pop
push
mov
cmps
cmp
cld
loop
comiss
or
in
jmp
jns
sub
out
mov
xchg
jecxz
sbb
stos
je
or
pop
and
add
push
mov
mov
es
int
sahf
dec
enter
mov
cmps
sti
or
cmp
out
ins
test
add
dec
retf
cmp
push
in
mov
aam
cmps
ss
aas
jp
inc
sbb
ss
inc
in
pushf
jecxz
(bad)
in
lahf
mov
rol
pusha
cdq
adc
arpl
in
test
push
outs
push
xchg
mov
popa
call
gs
xchg
cmp
gs
iret
inc
rcr
mov
montmul
cmps
xchg
and
mov
aad
pop
mov
inc
call
jecxz
push
push
cmc
test
jl
jbe
les
mov
ror
lods
(bad)
mov
mov
jg
sti
outs
adc
jne
and
inc
xchg
(bad)
das
stc
or
xor
cmps
dec
ret
pop
dec
(bad)
out
mov
sbb
in
fcom
inc
call
sub
mov
hlt
cli
push
enter
mov
dec
fld
sti
out
and
mov
leave
and
icebp
fidiv
or
mov
push
daa
repnz
shl
cmps
or
mov
stos
pop
je
gs
test
(bad)
jmp
hlt
dec
lahf
or
add
mov
xchg
retf
mov
arpl
rcl
dec
or
jae
shl
loope
jle
pop
(bad)
dec
stc
test
es
mov
or
pop
add
inc
mov
stos
fs
loop
loope
jne
mov
fdiv
pop
sbb
and
psubb
sub
xchg
jp
shr
ins
sub
xor
sbb
in
fwait
push
adc
sub
repz
xor
retf
jne
call
leave
inc
or
fcom
mov
pop
shr
fwait
sub
scas
and
push
jp
adc
dec
sub
cmp
pop
jbe
pop
scas
arpl
xlat
outs
push
inc
outs
test
inc
push
and
shl
push
mov
(bad)
fsub
mov
mov
loope
test
xchg
cmc
mov
and
lock
div
(bad)
rcl
xlat
jmp
dec
mov
and
dec
jno
dec
and
dec
xor
rol
mov
movs
inc
mov
in
enter
and
ret
movs
pop
jae
xor
loope
fdiv
sub
xchg
mov
adc
test
and
fsub
fsub
fiadd
lods
loopne
cli
faddp
push
mov
mov
cli
sub
xchg
and
js
xlat
test
sbb
mov
jg
loop
out
cmp
lods
inc
lea
push
mov
clc
jp
adc
jge
loope
and
push
jae
je
ins
xchg
int3
fisttp
mov
mov
jecxz
or
rol
enter
push
aam
push
push
ss
daa
xor
inc
push
xor
inc
mov
packsswb
bound
pop
daa
mov
pop
aad
retf
in
(bad)
loop
or
test
ins
sub
fcom
das
rcr
dec
pop
jnp
mov
and
pop
gs
or
sbb
adc
xor
(bad)
cs
(bad)
and
push
test
ret
mov
rcl
xchg
ret
cmc
mov
int
call
pop
stc
das
ror
mov
shl
or
in
inc
xor
scas
pop
cmps
inc
pop
cs
shr
jl
jmp
ret
add
xchg
cmp
scas
call
loope
loope
push
xor
ror
rcr
pop
or
pushf
mov
xor
es
dec
clc
popf
rol
push
xchg
inc
xchg
call
pop
or
sub
push
and
push
outs
adc
(bad)
rol
add
mov
(bad)
int
dec
popf
and
popf
or
xchg
jb
pop
push
aas
push
(bad)
int3
scas
sub
in
pop
push
leave
inc
dec
sub
repz
daa
add
addr16
xor
shl
mov
jne
cmp
pop
outs
aam
lods
xlat
(bad)
pop
mov
ret
(bad)
fidivr
stos
in
rol
or
aas
imul
mov
cmp
movs
imul
jne
icebp
int
scas
mov
ret
inc
(bad)
cmp
inc
xor
push
ins
fwait
shl
pop
movs
mov
fstp
data16
fbld
push
cld
pop
movs
adc
addr16
aad
bswap
sub
sbb
pop
jns
(bad)
je
mov
pop
cmp
xlat
adc
mov
sti
in
xchg
mov
sub
(bad)
sbb
pop
lock
aas
dec
fwait
mov
fnsave
inc
iret
mov
sbb
push
inc
(bad)
adc
out
ins
xchg
stc
call
and
std
mov
movs
mov
pop
rcr
int3
loopne
pop
arpl
add
mov
(bad)
pop
cwde
sbb
data16
lahf
imul
ins
ins
jnp
daa
(bad)
cmp
mov
add
pusha
cmps
or
jge
movs
jmp
cmp
dec
fisub
test
idiv
cld
sub
mov
xor
mov
mov
jmp
rcr
mov
(bad)
gs
push
pop
jae
outs
xchg
repz
das
or
mov
xchg
movs
shr
imul
fstp
cmps
psubd
clc
int
mov
adc
repz
xor
xchg
ins
fcom
call
mov
cmps
das
dec
fcomi
int3
retf
mov
and
sbb
es
cmps
xchg
sub
push
push
nop
clc
fcomp
xor
outs
and
(bad)
cld
mov
movs
inc
sub
cmp
mov
pop
mov
mul
shl
enter
cs
mov
int3
dec
pop
jo
ror
(bad)
jne
xchg
stos
dec
aad
dec
mov
call
jmp
add
sub
jns
mov
cli
push
xchg
jg
ret
fcmove
rcr
sub
mov
sub
xor
fimul
cwde
repnz
(bad)
adc
cld
jmp
xor
add
push
lds
jp
xor
retf
nop
xor
fistp
xor
or
adc
and
test
out
mov
in
out
cld
cmp
inc
out
mov
ss
sahf
gs
push
pop
cmp
aam
rol
xchg
clc
jg
movs
repz
mov
ins
mov
ret
lock
sti
data16
stos
sahf
icebp
ficom
cmc
paddsw
or
push
mov
data16
add
xchg
xchg
adc
int3
outs
js
std
icebp
sbb
sar
sbb
jnp
int3
xor
test
push
mov
aam
sub
out
outs
out
gs
adc
das
push
mov
jne
loop
jmp
int
fdiv
in
fcmovu
jmp
push
dec
sar
push
inc
dec
xchg
jne
cli
or
adc
and
pushf
imul
sub
mov
push
add
and
popa
clc
sbb
jmp
retf
push
jmp
clc
cs
iret
pop
pop
sub
and
or
std
mov
out
mov
jns
jne
jp
push
mov
xor
stos
cmp
sahf
rcl
mov
clc
cmc
push
pop
dec
inc
cwde
push
push
xchg
pop
into
or
or
repnz
sahf
into
aad
jp
cdq
pop
xor
div
mov
pop
out
and
stos
dec
and
xor
cmp
sahf
sbb
inc
or
jecxz
call
stos
mov
mov
xor
cmp
call
jbe
int
nop
rol
into
mov
arpl
movs
dec
loop
mov
add
outs
or
cwde
pop
sub
test
or
mov
xor
or
mov
and
cld
call
dec
out
(bad)
mov
adc
cmp
xchg
sub
jae
dec
push
or
(bad)
loop
out
add
ja
dec
dec
scas
js
xchg
jecxz
sub
arpl
aaa
(bad)
(bad)
adc
cs
test
cwde
aam
cwde
jne
movs
jle
cmp
mov
test
sub
add
pop
sbb
movs
push
rcr
imul
in
xchg
cld
neg
jle
xchg
sbb
(bad)
fisttp
pop
mov
jbe
ja
in
ret
into
dec
mov
mov
mov
mov
push
jle
pop
leave
ror
xor
loop
ror
cmp
mov
mov
sbb
scas
push
mov
cmp
or
sub
jbe
jae
ror
push
outs
lahf
leave
(bad)
leave
push
jo
pop
or
mov
adc
xchg
xchg
mov
int3
fbstp
and
popa
mov
dec
cmp
sub
adc
les
dec
ins
mov
nop
scas
inc
inc
xor
adc
or
mov
jo
sub
sbb
xor
pop
jle
mov
jge
mov
adc
sub
add
cmps
neg
inc
popa
retf
popf
out
xlat
fisttp
sub
push
xor
lahf
daa
cmps
icebp
stos
push
jle
adc
hlt
jo
sbb
pop
xor
lock
mov
or
push
les
push
cmps
push
test
mov
cwde
imul
ins
inc
push
fldenv
imul
or
mov
jmp
mov
dec
leave
out
fs
inc
jle
stos
mov
(bad)
mov
adc
cmp
inc
jmp
(bad)
jmp
add
jecxz
arpl
leave
sar
inc
lods
mov
inc
mov
dec
dec
xchg
jmp
in
pop
mov
mov
ret
arpl
mov
jle
mov
jo
(bad)
gs
test
fs
inc
mov
mov
jmp
fidivr
cwde
aam
cdq
mov
jb
sub
retf
mov
(bad)
movs
test
sbb
ja
nop
dec
nop
fs
(bad)
sub
test
or
adc
dec
mov
dec
xchg
out
pop
xor
sub
cmc
ret
aam
cmp
xor
or
mul
adc
sub
pop
ins
mov
xchg
sub
xlat
pushf
ror
stc
or
jbe
in
ret
fld
xchg
xchg
mov
sbb
ins
pusha
sahf
or
mov
icebp
and
sub
mov
xor
xchg
(bad)
aam
add
pop
movs
(bad)
jmp
mov
(bad)
aad
inc
fmul
retf
pop
pop
dec
hlt
dec
jmp
ror
bnd
iret
aaa
xchg
mov
xor
or
stc
fst
cmp
dec
leave
adc
test
(bad)
rcr
addr16
dec
xor
push
lahf
jmp
aad
fdivp
cli
lds
dec
or
ror
jae
xor
bound
lock
test
cmp
fisub
ret
outs
xor
dec
and
xchg
in
add
in
dec
out
das
movs
inc
dec
outs
aad
and
arpl
loope
add
cmc
push
add
(bad)
int
leave
mov
sbb
xor
int3
adc
dec
(bad)
cld
and
stos
jle
not
sbb
cmps
xchg
stos
into
xchg
(bad)
pushf
dec
inc
dec
xlat
imul
fmul
rcl
and
jl
mov
push
mov
aam
mov
mov
jbe
call
adc
out
cld
(bad)
dec
hlt
in
out
int3
jns
inc
inc
cs
out
fnstsw
fdivr
dec
mov
mov
xchg
adc
(bad)
leave
out
jmp
daa
popa
sbb
jecxz
retf
add
adc
movs
(bad)
dec
xor
fsub
fwait
xor
and
cmp
test
or
and
mov
mov
cvtps2pd
in
jns
jmp
adc
fcos
js
fwait
and
jnp
rol
mov
je
mov
test
dec
cmps
mov
(bad)
repnz
cmp
js
call
lahf
mov
(bad)
pushf
sbb
add
cdq
sbb
dec
aad
push
xchg
inc
inc
mov
sub
push
xchg
cmc
push
imul
enter
(bad)
sub
jle
dec
or
fnstcw
inc
cs
bound
call
mov
pop
adc
fdivr
cmp
pop
adc
mov
xor
clc
jmp
mov
popa
mov
pop
lods
out
retf
or
and
mov
mov
rcr
mov
cmps
jge
aad
shr
pop
test
out
popa
pushf
sub
shr
shr
or
xchg
fadd
inc
lds
xchg
lods
pop
xor
xor
mov
push
xor
div
repz
inc
data16
fs
inc
loope
sbb
jl
inc
inc
adc
sub
outs
ins
fs
add
stos
mov
dec
gs
mov
imul
xchg
sub
sbb
movs
data16
js
mov
ja
repnz
jg
and
adc
adc
jnp
in
push
out
sbb
ret
sbb
add
mov
mov
mov
dec
in
mov
loope
xor
jb
test
pop
maskmovq
test
icebp
pusha
imul
pop
out
and
pop
push
pop
mov
xor
cmps
dec
xchg
pop
out
cmp
mov
sub
dec
ret
mov
ja
(bad)
jg
inc
or
mov
fisub
jo
pop
inc
aaa
and
popa
push
push
fisttp
mov
sbb
or
push
(bad)
outs
mov
and
aaa
fidiv
pop
push
das
in
(bad)
pop
mov
out
mov
mov
pop
cmc
or
jmp
lods
cli
ret
loop
aad
lods
cli
sbb
or
movs
adc
cmps
xchg
mov
jp
repnz
inc
das
in
pop
inc
xor
fstp
sbb
and
shr
and
addr16
jne
inc
shl
imul
jge
rcr
dec
jbe
in
push
not
jp
std
sbb
neg
push
movs
into
les
or
and
cmps
add
xor
push
mov
sub
cmp
jge
pop
push
xchg
retf
cmp
ds
js
fsub
popf
xor
push
in
cmps
aam
loopne
in
sahf
pop
or
xchg
mov
jg
ins
jbe
adc
bound
cmp
xor
xchg
push
mov
mov
imul
fiadd
test
xor
scas
inc
jnp
std
mov
test
cli
jecxz
push
daa
mov
call
fdiv
xchg
fisttp
std
sahf
retf
jo
mov
add
dec
fcom
pop
addr16
fs
jmp
pop
into
xor
sbb
(bad)
aad
pop
jmp
daa
sbb
fs
loop
cwde
movs
fmul
aad
xor
sbb
dec
push
sar
lods
jmp
ins
push
sbb
dec
ins
push
neg
stc
mov
std
ret
jb
(bad)
jns
push
sbb
push
in
inc
pop
rcr
(bad)
shr
cld
jne
cld
jbe
stos
mov
adc
adc
lock
daa
sbb
cmp
push
pop
enter
xor
push
sub
mov
jmp
dec
call
cmp
or
cmps
cld
jne
xor
fwait
loopne
out
dec
cmp
fild
repz
sub
xchg
sub
cmp
xlat
data16
and
or
jae
out
push
repz
mov
(bad)
push
jmp
inc
dec
ja
dec
or
out
inc
xchg
imul
cmp
cmp
call
pop
mov
(bad)
adc
lods
ds
add
mov
add
lods
xor
sti
xor
xor
(bad)
dec
test
cmps
pop
mov
aad
shl
int3
fidiv
movs
clc
push
and
pop
(bad)
(bad)
ins
sbb
ja
stc
fidiv
and
inc
mov
lods
shl
mov
sub
les
jo
(bad)
and
push
xchg
fldenv
adc
mov
xchg
lods
push
repz
mov
jecxz
or
sub
adc
(bad)
cld
cmp
retf
aas
imul
jno
loope
(bad)
cli
mov
std
and
mov
dec
stos
and
ret
pop
pop
daa
xchg
jae
xlat
repz
mov
push
ret
dec
scas
icebp
movs
ins
in
das
jne
mov
cmp
push
mov
dec
pop
mov
cmp
movs
push
xchg
pushf
(bad)
jmp
mov
mov
pop
mov
pop
lods
and
jmp
and
sbb
les
scas
fiadd
and
cmp
jmp
push
add
add
add
xor
(bad)
sbb
push
dec
addr16
mov
cmp
inc
js
imul
or
mov
push
jle
mov
int3
test
jae
and
xor
test
xor
pop
add
jle
lahf
xchg
mov
add
jns
cmp
sbb
sub
js
pop
ret
mov
out
je
jle
stos
popf
xchg
mov
cwde
scas
push
jmp
arpl
inc
inc
add
pusha
lea
ja
jl
jl
test
add
adc
dec
mov
out
out
rol
dec
ins
rcl
dec
sbb
and
cmp
lock
jmp
mov
je
jge
sti
imul
int3
rol
(bad)
retf
jnp
das
cli
cmp
fcom
nop
cdq
sbb
popf
lds
xchg
stc
inc
xchg
data16
cs
sub
sub
sub
ins
daa
jne
pop
sbb
es
sub
cmc
popf
dec
jmp
push
je
fucomi
sbb
cld
cli
cmps
fnstsw
or
pop
or
pop
scas
add
lods
dec
sbb
iret
pop
jo
xor
jl
push
add
ds
sub
mov
fist
mov
inc
scas
aad
or
mov
rol
fcmovbe
mov
jmp
add
sub
pop
test
xchg
mov
mov
call
push
pop
mov
fimul
dec
sub
sbb
inc
push
jg
jns
daa
aas
cmp
mov
in
je
loop
ret
push
outs
test
test
adc
cmp
imul
mov
movs
stc
or
jp
(bad)
mov
mov
or
enter
lods
sbb
adc
stos
popa
inc
shl
dec
add
call
xor
cmp
mov
in
mov
cmps
or
dec
adc
js
mov
bound
movs
fmul
aas
aas
push
fchs
sbb
sub
and
xor
fwait
dec
test
arpl
jmp
jle
aas
add
cmp
cmp
inc
add
push
mov
(bad)
mov
xlat
inc
aas
sbb
aas
movs
loope
clc
(bad)
retf
lods
pop
dec
sbb
dec
add
cmp
outs
loop
add
push
ror
push
sub
xchg
es
cmp
or
xchg
test
bound
scas
leave
pop
push
popf
dec
in
scas
addr16
and
cld
inc
jne
or
xchg
shr
arpl
jb
mov
push
add
push
sbb
sbb
jae
xor
xor
jne
or
pop
jbe
push
cdq
je
add
ins
fsubr
xchg
jmp
add
sub
jle
ror
add
xchg
jecxz
sub
dec
and
cmc
test
jo
pop
loope
adc
outs
not
test
(bad)
mov
movs
repnz
aas
push
adc
mov
idiv
cmp
ins
jl
mov
or
iret
jle
mul
inc
pop
ins
jecxz
xor
xchg
xchg
add
loopne
mov
jne
loop
movs
mov
cli
sbb
ret
js
inc
std
imul
jno
mov
movs
shl
dec
enter
mov
leave
sub
je
retf
inc
pop
rcr
add
jo
push
dec
mov
adc
outs
out
or
mov
push
add
adc
popa
mov
sub
in
jbe
xchg
scas
or
cmc
scas
sub
xchg
aam
xor
out
loope
pop
dec
sti
mov
clc
jnp
jecxz
sub
cmp
ins
mov
stc
gs
mov
movs
mov
cmp
xchg
aam
mov
out
push
fiadd
pop
js
mov
push
arpl
pop
in
out
out
retf
cmp
xor
jle
mov
psubq
ret
dec
and
or
imul
int
inc
mov
ins
call
retf
push
mov
iret
dec
or
repz
inc
inc
fisub
ret
mul
xor
les
sub
xchg
test
aam
leave
shl
and
fs
sbb
sbb
jnp
xor
sub
pop
pop
ins
inc
out
mov
inc
jne
stc
mov
fst
shl
(bad)
xlat
rol
je
mov
push
adc
(bad)
out
jmp
inc
xor
jmp
mov
stos
iret
mov
pusha
ror
je
sbb
fst
lods
repnz
in
mov
mov
repnz
or
iret
add
ins
daa
cwde
dec
or
add
xor
sbb
retf
jne
dec
mov
dec
cmp
popa
jl
lds
dec
mov
outs
aas
leave
xor
gs
cmc
adc
mov
shr
xlat
popf
in
xchg
repz
jecxz
icebp
loope
adc
or
ins
mov
mov
sbb
push
jns
imul
loop
fisub
or
cmp
pop
rol
daa
jg
xchg
pushf
dec
cs
imul
inc
sbb
icebp
mov
jb
test
loopne
jb
pop
rol
cmp
fcom
mov
push
xchg
popa
aad
cmp
mov
inc
pushf
jecxz
push
fadd
cmp
add
pop
jbe
inc
fldcw
dec
retf
dec
push
jne
push
retf
out
das
xchg
iret
pop
(bad)
cmp
sub
cs
cmps
test
hlt
cmp
xchg
cmp
push
cmp
mov
sbb
lea
repnz
retf
es
cmp
jge
sahf
arpl
adc
or
repnz
shl
scas
mov
pusha
mov
push
push
mov
pop
ja
mov
ins
cli
ror
mov
ds
push
shl
aam
out
jne
mov
jo
push
inc
shl
push
movs
xor
inc
or
pop
outs
xchg
jmp
xchg
mov
jnp
xchg
je
push
sbb
imul
pop
mov
cmp
cdq
out
add
stos
inc
adc
sub
mov
pusha
add
ror
dec
frstor
cmps
sbb
inc
int
nop
iret
pop
imul
inc
in
inc
hlt
outs
clc
fidivr
xchg
(bad)
std
gs
(bad)
icebp
ins
fadd
mov
fsubr
mov
arpl
fiadd
adc
shl
test
cmps
sbb
mov
in
sti
and
ja
sub
jne
pop
sar
push
enter
xchg
cli
clc
jp
sbb
aam
out
push
mov
shr
jmp
sar
or
xchg
sar
aad
mov
xchg
aad
lds
push
pop
movs
sub
cmp
bswap
rol
add
mov
mov
ins
hlt
int3
adc
data16
pop
dec
jmp
dec
add
call
outs
retf
scas
inc
xchg
push
ss
mov
pop
ds
pop
cld
xlat
adc
mov
jecxz
pushf
mov
sub
add
lods
out
shr
loope
sbb
loop
popf
adc
imul
lods
enter
das
add
fs
add
dec
daa
pop
xor
add
popa
pop
cmp
mov
les
ins
cmp
pusha
push
inc
fisttp
cli
das
ins
fistp
in
sti
pop
xabort
push
cs
jge
inc
test
shl
inc
aas
movs
sar
(bad)
add
gs
or
pop
jp
mov
out
(bad)
mov
sti
mov
cmp
add
adc
sahf
or
das
ins
mov
popa
fidivr
mov
jl
cmp
cmp
xchg
jns
adc
cli
repnz
cmpxchg
pop
adc
dec
mov
jne
and
out
dec
int
inc
loop
mov
and
sar
mov
xchg
fisttp
and
imul
fidivr
pop
add
popa
out
add
outs
and
cdq
mov
xor
jno
push
shl
push
js
sub
push
xor
inc
jge
bound
ss
dec
push
sub
leave
loopne
xchg
xlat
ds
sbb
push
jecxz
sub
in
cmovl
test
(bad)
push
sub
das
xchg
pop
sbb
sbb
push
jmp
cmp
loop
popa
ins
push
sti
xchg
inc
(bad)
mov
xchg
retf
imul
sub
jne
mov
jle
cmps
xor
mov
pushf
cmps
push
sbb
mov
adc
sar
push
out
dec
loope
aam
pop
jnp
cmps
lahf
aaa
sar
inc
inc
mov
pop
aam
xchg
xor
push
gs
lds
fdivp
(bad)
es
or
sar
dec
test
jno
jmp
or
xor
jecxz
add
adc
jmp
mov
inc
mov
pop
mov
pop
dec
std
sbb
imul
out
lea
push
inc
loope
loope
mov
cmp
add
push
xlat
adc
mov
mov
pop
mov
sbb
leave
cmps
nop
push
nop
mov
dec
cmps
(bad)
sub
stc
je
push
or
push
call
imul
sar
stos
enter
jne
inc
stos
cmp
jl
movs
or
mov
mov
out
cmps
(bad)
push
sti
pop
mov
sbb
sbb
sbb
and
mov
jo
(bad)
test
std
xor
xor
lea
test
cmp
add
mov
push
sti
loop
fmul
je
fisttp
test
cdq
scas
mov
(bad)
xlat
or
adc
loopne
rol
in
call
pop
cmp
and
add
int
sar
retf
jmp
xor
sbb
in
test
aad
pop
retf
sub
xchg
retf
ror
push
enter
jns
addr16
mov
rol
jp
pop
jns
adc
pop
stc
arpl
mov
pop
xor
dec
mov
cs
adc
sub
ror
dec
pop
cld
and
mov
out
daa
pop
mov
and
jo
push
pop
aam
push
push
push
pop
mov
mov
(bad)
arpl
inc
int
push
mov
jae
mov
xchg
jo
mov
lods
sti
dec
push
cmp
sub
add
adc
mov
or
pusha
(bad)
and
lods
cwde
bswap
and
mov
xor
test
mov
retf
das
xor
and
repz
scas
adc
xchg
sahf
int3
jb
or
cmp
cmp
stos
stos
pop
lock
shl
retf
test
jg
scas
int3
jb
mov
push
mov
ror
sti
lods
dec
adc
mov
fwait
jle
nop
sbb
retf
sub
sar
inc
cs
stos
pop
add
ret
nop/reserved
push
xor
push
mov
jbe
imul
out
mov
test
xchg
aas
dec
lods
popa
inc
lea
mov
in
fst
pop
cmp
lods
mov
dec
ds
pop
fwait
jle
dec
test
xor
and
js
mov
fcmovb
push
cwde
push
cmps
test
pusha
imul
dec
shl
and
sahf
ficomp
mov
dec
dec
mov
mov
push
pop
xchg
sub
jmp
sar
fs
faddp
mov
data16
sbb
sub
test
dec
sbb
jp
ret
scas
arpl
sar
or
sub
jecxz
xchg
call
test
jno
loopne
pop
cmp
adc
inc
and
in
jg
test
js
pop
inc
pop
dec
sub
push
xchg
jmp
not
mov
jno
jl
push
add
add
das
mov
jnp
or
pop
adc
cdq
sub
cmp
or
jle
xor
cmp
push
and
mov
xor
(bad)
or
(bad)
push
fadd
fadd
aam
xor
cmps
jo
iret
fwait
mov
push
cli
cmp
adc
inc
outs
and
lds
out
push
jmp
xor
mov
xchg
cmp
jbe
arpl
cmp
sub
icebp
jecxz
loop
fsubr
pop
dec
fadd
mov
das
pop
call
movs
ret
js
js
mov
sub
popf
fs
shl
retf
shr
(bad)
(bad)
mov
sahf
in
mov
pop
dec
mov
out
and
sti
sub
sub
(bad)
pop
lahf
adc
sar
cld
push
push
iret
jge
jbe
pop
xchg
mov
cld
or
dec
pusha
mov
lods
aad
imul
push
je
mov
ins
icebp
or
or
div
js
aas
xchg
(bad)
cmp
scas
jg
sub
popf
in
cmp
mov
dec
fild
and
test
(bad)
std
mov
cmp
xor
xor
pop
test
inc
rcl
push
enter
jb
loop
cmp
jl
mov
dec
sbb
lahf
out
cmps
(bad)
push
sti
pop
mov
push
cmp
add
sbb
mov
push
test
jo
cmp
out
cmp
aas
int
push
inc
and
out
mov
or
adc
mov
sub
add
std
leave
ja
ret
sbb
lods
dec
call
pop
cmps
sub
fdiv
pop
(bad)
ficom
in
adc
sar
fidiv
mov
into
ror
and
clc
mov
repz
in
xor
out
mov
mov
mov
popf
fstp
push
xchg
enter
mov
enter
jns
mov
dec
add
pop
movs
jae
not
xor
pusha
jne
sbb
cmp
xor
inc
test
adc
(bad)
cmc
mov
jb
sub
jmp
dec
lock
or
sbb
ficom
shl
jo
pop
ret
push
(bad)
call
push
cmp
test
mov
cld
lds
jp
(bad)
loop
mov
lods
cdq
and
push
cs
and
dec
addr16
cmps
inc
out
call
mov
rcl
int
stos
or
in
mov
stos
mov
cli
push
sub
dec
test
dec
dec
sbb
or
push
fcmovu
adc
inc
std
jmp
mov
out
rcl
mov
fcomp
jmp
rol
scas
lock
call
jo
push
mov
mov
dec
sub
test
bound
fs
fldcw
mov
cmp
cmp
fld
out
cmp
js
xchg
loope
add
rol
mov
mov
and
mov
lock
mov
xchg
out
lock
jle
call
pop
jmp
arpl
xchg
dec
mov
pop
imul
out
in
inc
test
and
pop
data16
xchg
mov
mov
add
push
add
push
lods
inc
xchg
leave
out
xor
jp
sbb
push
jmp
ror
clc
fnstenv
cmp
mov
or
sub
mov
in
cmps
pusha
jge
inc
pop
inc
jg
mov
xor
ret
add
mov
imul
scas
ja
pushf
movs
mov
push
or
pop
push
test
out
push
adc
mov
shl
and
jle
adc
test
int
mov
aam
mov
es
mov
add
into
loopne
call
(bad)
inc
movs
push
xor
or
adc
(bad)
inc
(bad)
popa
xchg
jb
mov
unpcklps
jle
leave
jnp
addr16
push
pusha
fdiv
jmp
rcr
outs
jg
sub
out
imul
jle
sbb
pushf
add
mov
fadd
and
mov
cld
jle
cmps
mov
es
push
pop
out
adc
popa
f2xm1
paddusw
cmp
fisttp
add
iret
dec
mov
mov
(bad)
xchg
cmp
xchg
dec
cmps
dec
aam
add
out
jmp
(bad)
jg
cld
popf
cwde
mov
nop
sub
cld
pop
ja
jmp
hlt
cmp
pop
cs
repnz
jmp
mov
lock
cdq
cwde
lods
ins
adc
sbb
in
and
pop
aaa
mov
pop
or
jbe
aas
js
or
repnz
stos
(bad)
fcmovnbe
loop
pop
les
xor
pusha
aas
xchg
xchg
jno
xchg
fiadd
movs
jb
enter
lods
jb
and
inc
xor
lahf
cmp
and
sub
mov
movs
test
xchg
push
rcr
cmp
repnz
jge
jg
pop
std
and
pop
pop
mov
ds
jb
jl
xor
fmul
ficom
call
js
mov
stos
cmp
popa
fwait
xor
aas
ja
xor
fcmovu
sub
bound
dec
mov
xchg
js
adc
mov
cdq
adc
mov
xchg
lea
sbb
js
loopne
gs
jl
inc
into
push
cwde
mov
cmp
cdq
(bad)
aaa
mov
arpl
fld
(bad)
or
nop
jb
pushf
icebp
(bad)
add
push
imul
fdiv
or
fdiv
gs
xlat
retf
cmps
and
sti
lods
inc
in
mov
inc
cmp
sbb
movs
ds
call
jg
mov
test
das
pop
mov
jns
mov
jns
jmp
repnz
cmps
lods
out
outs
xchg
cmp
and
lea
bound
shl
adc
aad
inc
adc
dec
out
cmps
mov
leave
stc
hlt
mov
icebp
dec
je
sti
and
dec
adc
movs
dec
idiv
dec
sti
push
xchg
xchg
fdivr
jmp
mov
ror
jae
popf
mov
cmp
retf
ss
pop
dec
push
push
mov
stc
push
sbb
retf
mov
xchg
std
inc
cdq
fldenv
popf
hlt
and
in
ds
sub
xchg
cmp
add
dec
and
push
out
push
repz
ss
sbb
iret
mov
pop
and
pop
sbb
xchg
jmp
das
(bad)
sahf
(bad)
cwde
shr
outs
cwde
test
rcr
fstp
cmp
test
jp
fisubr
popf
adc
mov
inc
sar
fmulp
call
addr16
push
jnp
mov
mov
adc
push
cmc
cmp
pop
rol
mov
ins
jl
iret
fcom
fmul
pop
popa
ja
adc
fwait
bound
popf
push
mov
into
cwde
push
ret
sti
fsubr
mov
lock
enter
cmp
pop
(bad)
sbb
xchg
mov
inc
gs
movs
clc
jns
loopne
in
jnp
cld
cld
and
cmp
adc
sbb
je
mov
repnz
mov
outs
jge
popf
enter
pop
sbb
les
sahf
cmp
sbb
mov
jbe
int
imul
push
and
sub
repz
mov
bound
mov
imul
into
cli
inc
xlat
nop
push
retf
outs
lahf
fld
leave
and
sub
mov
fdiv
nop
inc
stos
mov
and
and
jg
loopne
in
fdiv
mov
in
jecxz
add
mov
dec
sub
sub
cmp
cmp
lods
jle
xlat
jmp
mov
(bad)
cmovo
sub
mov
pushf
xchg
js
adc
loope
shr
sbb
jns
inc
xchg
pop
push
add
or
jge
(bad)
cmp
push
clc
lock
leave
mov
xchg
mul
cmp
mov
pop
ror
mov
sub
or
loopne
in
(bad)
mov
lahf
ins
repz
cmps
je
bound
cld
fucompp
cmps
or
cmp
push
(bad)
cwde
int
push
xchg
push
dec
(bad)
mov
push
test
in
pop
mov
and
xchg
ficom
push
das
cli
(bad)
mov
adc
lods
adc
and
xchg
and
dec
sbb
xchg
repz
in
jmp
test
pop
xchg
jb
push
jbe
int3
push
rol
adc
or
jae
in
xchg
scas
movs
sahf
psubd
loope
jmp
stos
cmp
jnp
jns
nop
sti
inc
mov
add
out
nop
cli
or
mov
test
mov
dec
push
pop
adc
sbb
jns
in
mov
mov
mov
and
div
mov
jp
adc
jmp
push
mov
inc
and
mov
xor
jnp
ror
fsub
sti
sbb
cmp
cmps
jg
out
sbb
pop
loopne
and
xchg
mov
or
sub
repz
sbb
mul
fnstsw
pusha
inc
jmp
popa
push
call
adc
popa
fistp
call
inc
sub
sub
push
ins
adc
in
mov
sti
vpperm
popf
push
mov
jl
in
jae
or
xchg
fdiv
jno
jae
adc
cld
ror
cmp
cmp
adc
retf
scas
lea
or
enter
cmp
cdq
ins
pop
jo
in
arpl
xor
hlt
test
mov
imul
std
(bad)
imul
mov
stos
mov
fcomp
pop
push
dec
loope
or
ficom
mov
mov
sbb
pop
inc
int
jge
push
add
push
push
xchg
aad
and
rcr
ins
aaa
cmc
adc
xchg
cmc
jo
sar
cmp
call
dec
jns
scas
pushf
sub
add
aaa
dec
push
hlt
ret
mov
(bad)
sub
and
repz
and
or
ins
in
jns
push
ret
imul
cwde
and
mul
and
sub
cmps
movs
fst
jmp
out
jne
ret
cli
ret
lods
jae
fimul
pop
add
pop
cmp
adc
ds
cmp
call
pop
jl
std
inc
arpl
mov
add
pusha
lods
mov
fisub
test
into
fidiv
ja
std
bound
cld
adc
loopne
ja
mov
fmulp
cs
popa
jg
shl
mov
add
and
cmp
push
add
adc
cli
pmuludq
aam
add
loopne
(bad)
sub
xchg
add
and
push
icebp
or
and
add
push
push
inc
rcl
cmp
outs
add
fimul
stos
loope
clc
jmp
mov
(bad)
sti
neg
and
push
rcr
cli
or
test
les
test
inc
sub
popf
aas
and
out
mov
dec
adc
fbld
pusha
clc
adc
add
xchg
xchg
cmp
(bad)
sbb
ss
push
ss
cs
aaa
push
dec
out
adc
xchg
call
inc
add
fst
in
test
out
adc
fstp
out
(bad)
(bad)
fstp
(bad)
cmp
xchg
shl
mov
inc
shl
mov
inc
int3
test
mov
add
test
test
fldenv
fnsave
cmps
ins
ss
loopne
mov
cmc
jne
mov
out
cmps
lods
mov
push
adc
push
test
enter
add
popa
arpl
int3
cmp
sbb
jmp
pop
cmp
inc
mov
xor
cwde
dec
mov
and
test
scas
cli
test
call
cwde
xor
call
rcl
jle
mov
adc
or
sti
movs
loope
enter
cli
cmp
pop
pop
data16
jb
dec
push
push
inc
push
inc
popf
add
call
jmp
out
aaa
and
or
xor
call
ret
xchg
sub
mov
movs
popa
cmp
jb
(bad)
(bad)
daa
push
mov
mov
and
add
mov
xor
xchg
paddb
adc
push
and
(bad)
stos
and
mov
mov
mov
jne
mov
clc
fist
int3
xor
imul
dec
ins
cdq
add
jbe
inc
repz
xor
int
(bad)
add
adc
mov
scas
or
push
inc
call
arpl
mov
jmp
cmp
leave
dec
push
pusha
test
fistp
int
arpl
add
enter
ds
clc
aaa
pop
sub
ja
shl
push
call
pop
xchg
call
xlat
shl
rcl
adc
cmp
xor
push
mov
ja
xor
mov
pushf
jo
out
sar
pop
jecxz
push
stos
out
pop
add
movs
int3
stos
nop
cwde
out
cdq
sbb
scas
cli
mov
push
shl
(bad)
mov
inc
pop
arpl
jne
add
rcr
stos
mov
mov
jne
sahf
inc
pop
mov
or
inc
cdq
dec
pop
dec
dec
ret
in
or
pop
mov
sub
int
cwde
mov
mov
ret
adc
xchg
scas
pop
cmp
stc
jl
hlt
fsubr
out
gs
or
mov
arpl
iret
je
out
sub
push
mov
inc
mov
into
xor
push
(bad)
fsub
dec
push
in
mov
mov
inc
(bad)
jb
pop
cmp
and
inc
loop
shufps
jle
icebp
scas
test
and
pop
or
mov
fdivr
pop
mov
xchg
ja
repnz
push
inc
loopne
ins
jmp
ja
jo
mov
push
mov
push
dec
(bad)
inc
idiv
xor
hlt
mov
xlat
in
addr16
push
mov
add
out
test
test
mov
or
movs
adc
cmp
jg
jns
jb
mov
in
gs
pop
repz
in
imul
iret
pop
jne
out
dec
je
xchg
out
lock
cmp
push
xor
bound
aam
fld
pop
sbb
push
aad
sub
psrlq
shl
pop
sub
dec
lsl
or
dec
pop
push
jbe
dec
xchg
aas
test
lock
stos
popa
call
in
stos
leave
je
inc
jb
mov
inc
je
sub
jb
add
cli
pop
stc
inc
bound
sub
inc
call
(bad)
ror
sub
push
dec
jl
hlt
and
pop
jmp
cdq
mov
pop
loopne
(bad)
pop
push
xor
test
fistp
data16
mov
movs
push
push
stc
cmp
enter
mov
xchg
lods
inc
retf
xchg
scas
mov
inc
sbb
femms
xor
ss
dec
test
xchg
les
mov
jge
movs
imul
push
jbe
scas
shl
jecxz
pop
and
mov
pop
retw
xchg
add
jnp
scas
cli
cmp
jmp
xchg
pop
mov
or
pop
mov
js
outs
movs
mov
mov
movs
test
mov
adc
shl
sbb
adc
and
dec
in
xor
sbb
movs
fcom
dec
cmps
mov
fimul
jbe
arpl
es
pop
scas
xor
rol
cli
pop
push
sbb
xor
iret
xchg
adc
xor
inc
pop
sub
sub
aas
mov
lods
ds
mov
add
mov
(bad)
sub
add
call
mov
jnp
iret
push
or
xchg
dec
ficom
mov
pop
data16
inc
out
sub
jecxz
inc
adc
or
adc
or
dec
movs
or
shr
out
shr
int3
popf
stc
mov
in
je
movs
jmp
ja
es
ins
sbb
rcl
call
popa
inc
ret
scas
push
adc
shl
pop
bound
mov
fmul
repnz
outs
fnstsw
cmp
ins
ret
sar
rcr
sahf
jge
ss
xor
pop
add
out
jle
xchg
push
or
jno
pusha
sbb
inc
movs
ins
idiv
retf
in
gs
add
fiadd
pop
sbb
push
in
imul
loopne
mov
ret
lods
sti
sub
lods
cmp
lea
sahf
jecxz
xor
mov
jg
push
push
xchg
lods
jl
in
cld
mov
xlat
mov
jmp
sbb
popf
inc
arpl
cmp
mov
sbb
retf
pop
cmp
js
add
pushf
aaa
xor
inc
mov
repz
push
adc
jbe
imul
lea
out
ins
pop
pop
cdq
push
and
inc
hlt
xor
add
stc
inc
adc
pop
loopne
sbb
iret
xchg
std
jbe
in
scas
inc
mov
call
in
jb
add
aas
xchg
mov
add
scas
cld
clc
xchg
push
add
mov
sub
jle
mov
ret
fild
cmp
sub
dec
outs
cmp
(bad)
xor
mov
pop
adc
ret
stos
(bad)
mov
sbb
shr
fistp
sbb
xlat
pushf
lea
pop
fidivr
mov
lahf
add
cmps
add
bound
mov
addr16
not
mul
out
mov
outs
dec
js
ja
bound
stc
inc
xor
mov
cmp
xchg
bound
xor
test
add
or
jo
mov
repnz
outs
cmp
call
xor
imul
inc
xchg
jmp
xchg
repnz
pop
push
push
adc
js
push
jl
push
ror
mov
jbe
in
int
inc
icebp
pusha
jle
lds
shl
(bad)
and
das
jmp
or
pop
xor
mov
sub
outs
sub
jno
jecxz
sbb
rol
xchg
js
test
mov
mov
sbb
xor
in
icebp
cmp
or
shl
xor
daa
popa
mov
push
push
cdq
aad
lock
in
xor
lahf
loopne
loope
mov
jmp
(bad)
imul
or
jnp
push
mov
push
es
popa
fisub
sahf
lods
xchg
dec
iret
dec
lods
jne
gs
ficomp
rol
sbb
outs
push
shr
xchg
push
jae
and
sub
fisub
sub
cli
inc
jns
push
mov
pusha
mov
mov
mov
fistp
arpl
repnz
adc
add
movs
xor
lahf
push
adc
retf
jns
cs
es
mov
xor
fs
mov
mov
pushf
into
and
test
or
jno
sahf
xchg
out
inc
inc
ret
fdivr
out
sub
dec
in
mov
jns
xchg
clc
dec
lods
push
pop
ret
xchg
and
jmp
sbb
xchg
mov
push
lock
ficomp
fist
mov
(bad)
push
adc
jmp
adc
mov
jmp
xchg
push
jecxz
jp
add
aad
sti
fdivr
out
movs
mov
sub
adc
dec
pop
lea
and
clc
cs
mov
stos
aaa
cli
dec
daa
jo
lahf
xchg
xchg
out
icebp
mov
cmp
pop
daa
add
jb
std
loopne
cmp
mov
inc
cs
retf
loope
scas
adc
gs
gs
xchg
pop
pop
sbb
jnp
sbb
cmp
push
add
adc
ins
add
js
sbb
lods
cmps
sbb
mov
mov
clc
ret
in
and
push
push
std
add
das
sbb
mov
pmulhw
nop
jno
adc
out
ins
fcomp
jbe
pushf
mov
in
es
fwait
mov
iret
data16
cmp
push
inc
xchg
push
sahf
xchg
pop
cmp
cli
cmp
mov
cs
xlat
ja
mov
loop
jnp
adc
inc
adc
hlt
jg
ret
ffreep
mov
add
push
repz
neg
mov
pop
jne
vsubpd
das
test
out
popf
mov
das
and
fwait
aaa
mov
push
rol
adc
rcr
or
sub
fnstenv
ret
in
rcr
jo
inc
ret
in
mov
sbb
(bad)
lods
cmps
je
sub
and
movs
sbb
add
fistp
mov
repnz
in
jne
mov
pop
push
push
out
sahf
(bad)
sti
in
pop
jnp
fistp
inc
shl
mov
xor
hlt
dec
mov
mov
je
arpl
lods
outs
jg
leave
call
std
outs
test
pushf
xchg
out
cmc
mov
fstp
jmp
bswap
or
movs
das
addr16
push
push
jne
arpl
and
outs
mov
dec
adc
xlat
fcomp
mov
adc
mov
mov
test
inc
int3
mov
mov
push
mov
test
push
mov
sbb
xchg
test
inc
test
xchg
bound
bound
pop
jns
mov
mov
btr
shr
pop
(bad)
push
xlat
lock
mov
fistp
sub
sbb
xlat
ja
mov
lea
inc
retf
or
sti
arpl
xchg
dec
push
mov
pushf
jmp
jmp
or
pop
inc
adc
daa
fmul
imul
cmp
sbb
or
or
in
retf
mov
fsub
mov
retf
and
dec
test
jmp
mov
add
and
les
arpl
push
jl
fbstp
sar
js
pop
mov
mov
inc
or
(bad)
mov
clc
xchg
loop
aas
jmp
xchg
inc
push
fisub
or
ror
inc
xchg
dec
shl
jns
dec
sub
popf
cdq
pusha
dec
jno
leave
in
add
push
sar
xor
ins
xchg
jmp
shr
xor
xor
pop
retf
imul
(bad)
pop
sub
xor
pushf
add
jge
test
or
dec
scas
rcr
jbe
xor
xchg
dec
hlt
leave
sete
aaa
std
or
out
ds
les
movs
push
in
push
add
(bad)
fcomp
xchg
mov
sub
xchg
xchg
ss
sub
fstp
push
stc
and
pop
fild
mov
jns
cld
scas
ja
pusha
das
dec
jp
add
ins
pusha
mov
pop
sub
stos
pop
pop
loope
mov
dec
jo
das
add
test
inc
(bad)
sbb
push
lods
fsubr
cmps
(bad)
jae
rcl
pop
push
inc
ds
clc
push
jl
and
mov
int
mov
mov
or
lds
dec
mov
movs
push
in
addr16
fs
pop
jl
jb
jno
dec
pushf
sub
int
adc
imul
nop
pop
fs
push
pusha
out
not
lods
xlat
sti
or
xchg
fild
cmp
xor
lahf
add
or
cmp
fiadd
inc
sbb
ret
push
pop
mov
dec
jge
add
mov
outs
pop
xor
and
cld
sti
xor
movs
inc
push
push
inc
stos
icebp
ja
cdq
out
xor
mov
pop
in
and
sbb
dec
nop
bound
and
pop
data16
rcl
or
push
inc
dec
push
mov
test
std
pop
mov
test
adc
lock
jbe
add
add
pop
ret
popa
test
nop
(bad)
jge
leave
ds
sbb
outs
or
(bad)
(bad)
shr
inc
mov
sub
nop
mov
and
sbb
mov
sub
out
inc
mov
cmp
repnz
test
pop
sub
mov
mov
mov
in
mov
nop
outs
rcl
push
in
pop
mov
stos
in
mov
call
inc
xor
push
shl
mov
repnz
das
ds
or
mov
ss
cdq
add
aad
rol
push
popf
fsub
movs
stos
xchg
jbe
or
repnz
pop
mov
add
add
test
hlt
xchg
int
pop
push
xchg
mov
nop
shr
xor
sbb
loop
lods
adc
push
mov
mov
je
sub
and
outs
push
mov
popa
(bad)
push
jo
mov
adc
les
fcmovnu
pushf
fld
pavgb
cmps
push
mov
lods
xchg
pop
lds
ror
pop
sbb
outs
or
scas
inc
add
dec
cwde
es
jns
adc
xchg
mov
js
sub
loope
sbb
add
sub
add
jno
out
dec
out
adc
sbb
movs
cmc
ins
outs
repnz
fucom
(bad)
out
rcl
mov
inc
and
pop
cmp
cmp
and
dec
mov
xor
mov
in
call
jae
xchg
mov
xchg
push
fstp
je
jl
cmp
stc
push
loope
pop
nop
sahf
jmp
cmp
mov
in
inc
dec
adc
movs
and
ret
arpl
mov
fidivr
jp
pop
sbb
imul
test
add
call
leave
and
mov
fcmove
aaa
out
sub
cli
push
loopne
pop
cdq
(bad)
mov
inc
dec
nop
inc
mov
mov
xchg
hlt
test
inc
mov
cli
xchg
mov
das
xchg
std
ds
aas
fdivr
mov
add
retf
outs
pop
rol
jp
out
sbb
ret
xlat
popa
fwait
push
xchg
inc
and
or
(bad)
cmp
xor
popa
xor
(bad)
adc
les
mov
out
fisttp
or
inc
xor
add
nop
das
pop
ins
sub
pop
sub
pop
scas
aas
inc
dec
imul
gs
clc
xchg
inc
in
push
sub
out
mov
adc
pop
pop
rcr
dec
cmp
addr16
mov
add
int3
mov
jp
mov
push
test
rol
push
sahf
mov
mov
pop
pop
scas
call
pop
js
imul
int
xor
push
jecxz
lds
mov
lds
xchg
fadd
mov
jnp
bound
jbe
dec
icebp
jl
push
aas
inc
push
push
xor
mov
mov
js
inc
sbb
push
les
jp
mov
shl
loope
sub
clc
xchg
push
scas
adc
retf
(bad)
mov
xor
adc
pusha
adc
iret
bound
in
lds
scas
sbb
or
loope
test
cmps
cmp
and
dec
fsubr
xor
xchg
leave
sbb
xchg
data16
data16
mov
xchg
popa
mov
xchg
xchg
push
in
test
retf
cmp
cmps
ja
push
push
repnz
sub
ret
inc
dec
xchg
pusha
daa
out
cdq
imul
xor
xor
ret
adc
les
push
hlt
pop
mov
das
(bad)
push
jle
jo
pop
lock
(bad)
xchg
xlat
adc
iret
xor
xchg
mov
mov
cmps
mov
push
mov
xchg
(bad)
(bad)
in
sub
es
xor
call
scas
jb
fnstsw
add
dec
imul
inc
xor
inc
in
cmc
pop
xor
add
aas
push
mov
adc
and
lods
fistp
mov
add
stos
mov
ins
jns
mov
popf
jmp
loop
or
xchg
mov
hlt
cs
and
mov
repz
inc
mov
jo
fisub
scas
sar
fist
das
pop
pop
das
je
xchg
das
loop
pop
retf
mov
retf
sub
test
and
and
cmp
xor
cli
(bad)
jo
in
add
adc
sbb
outs
push
jo
ss
cmp
jns
xchg
sub
sub
gs
sub
sub
(bad)
xor
cmps
repnz
hlt
int
fidivr
xchg
adc
add
call
dec
sub
out
mov
pop
pop
nop
fidivr
mov
fistp
inc
ds
cmp
dec
scas
movs
sar
xchg
sbb
aam
pop
mov
adc
cmp
call
jp
inc
push
cmp
jmp
cdq
cli
cmp
push
addr16
mov
fwait
jecxz
test
cmps
in
into
dec
xchg
cwde
and
(bad)
ror
and
and
sub
xchg
xchg
mov
mov
mov
or
add
in
arpl
cmp
and
pop
(bad)
fmul
pop
jmp
mov
(bad)
sub
pop
in
push
jns
scas
mov
push
pop
cmc
popa
pop
cwde
jns
sbb
scas
pop
jno
repz
in
pop
dec
inc
add
stos
xchg
outs
mov
movs
int
int3
jno
mov
or
xchg
jo
enter
mov
push
lods
push
lock
ret
mov
out
xor
(bad)
pop
cmc
hlt
jle
ret
outs
cld
or
sub
or
out
ins
cmp
sub
nop
mov
repz
mov
popa
mov
adc
push
add
mov
adc
cld
stos
jo
and
push
out
dec
cmps
loope
or
inc
bound
int
shl
jmp
add
pop
xor
xor
push
fisttp
pop
addr16
fisttp
jg
ins
dec
into
cs
mov
mov
cmp
ret
jge
mov
test
popa
(bad)
ins
push
clc
jns
inc
jbe
enter
lahf
ds
inc
inc
and
inc
ror
add
sahf
sub
push
fiadd
retf
outs
popf
jle
jecxz
test
rol
dec
shl
xchg
into
rcr
jb
mov
repnz
fst
ins
and
xor
ss
jle
mov
jp
into
sbb
or
leave
jae
jge
jecxz
cmp
pop
sahf
ins
push
mov
mov
arpl
test
jno
pusha
xor
adc
mov
fs
mov
data16
and
sub
sbb
xor
mov
mov
outs
sub
call
test
icebp
cmps
imul
lods
ret
sahf
pop
adc
jmp
std
jne
jl
sub
mov
add
add
ret
xlat
fnstsw
pop
aad
inc
push
sub
stos
imul
aaa
mov
std
xlat
sbb
lahf
(bad)
cwde
mov
xchg
ins
mov
dec
adc
shr
je
mov
cld
xchg
leave
js
mov
mov
pop
and
jmp
ret
out
jle
sub
mov
mov
fs
jp
das
movs
jecxz
mov
fwait
stos
out
xor
mov
ret
data16
xor
nop
jmp
cmps
aas
mov
test
test
bound
(bad)
test
cli
xchg
movs
pusha
sub
pop
lds
pop
mov
push
adc
cmc
adc
and
jne
(bad)
adc
xchg
bndldx
(bad)
into
sbb
sbb
ret
pop
cmp
mov
scas
jns
xor
jmp
push
push
je
jno
sbb
sub
mov
mov
aaa
cwde
lds
pop
cmc
lea
test
fisub
pop
in
push
pusha
out
idiv
cmp
inc
retf
jp
pop
aam
shl
fisttp
mov
mov
iret
dec
add
sbb
push
clc
stos
retf
test
out
dec
push
jg
test
add
out
pusha
jb
ss
loopne
mov
(bad)
std
ds
sbb
movs
jecxz
xor
mov
jne
sbb
daa
xchg
and
adc
and
push
enter
adc
fldcw
pop
pop
je
sti
nop
pop
dec
movs
mov
imul
cmp
jl
jns
jb
mov
pop
mov
aaa
dec
cwde
cmp
out
nop
in
cs
js
mov
add
stos
neg
das
adc
jge
mov
adc
dec
mov
xchg
jno
pusha
jmp
lea
sbb
and
lods
clc
jb
scas
(bad)
int
js
and
out
jmp
or
cmc
pop
inc
pop
outs
adc
adc
xchg
or
aaa
(bad)
add
jnp
dec
clc
in
mov
(bad)
(bad)
add
rcr
das
dec
add
sbb
jl
jmp
xor
aam
add
xchg
popf
push
retf
xchg
push
shl
sub
adc
std
shr
pop
mov
xor
mov
inc
pop
sub
cdq
jecxz
adc
ret
inc
add
popf
(bad)
(bad)
jnp
adc
jle
sub
sub
pusha
je
popa
or
xchg
popa
cli
pop
jge
sbb
inc
push
lock
dec
int
push
push
mov
sahf
jo
gs
stos
cmc
cmp
pop
xor
jno
cmp
mov
and
ret
xchg
fstp
dec
pusha
out
lea
cs
jb
ins
shl
popf
mov
sub
call
cmp
rcr
push
xor
icebp
cmp
iret
pop
add
add
pop
cli
inc
adc
mov
repnz
mov
push
add
jmp
inc
jb
xchg
inc
push
and
jo
sbb
xchg
into
icebp
mov
cmp
add
scas
xor
aam
xor
sar
xchg
push
xchg
jnp
movs
inc
push
cmps
dec
ret
in
lods
scas
int
aad
xchg
inc
jae
clc
fsubp
sub
add
pop
loop
mov
(bad)
aam
out
xor
add
xor
fdivp
cmp
scas
inc
loopne
push
and
xchg
mov
mov
adc
ficomp
cmp
in
cwde
add
(bad)
std
sbb
cmp
xor
mov
jae
sub
enter
test
aaa
inc
or
stc
test
scas
pusha
js
clc
mov
jecxz
jg
add
sti
pop
aad
xchg
jb
push
jb
jmp
adc
mov
ret
daa
je
add
stc
cmp
cmp
call
pop
sub
pusha
cmp
test
bnd
and
add
daa
push
inc
xchg
scas
rcr
in
mov
lds
cli
dec
mov
retf
ret
bound
movd
dec
push
addr16
loop
cmp
retf
leave
xor
out
in
and
loope
cmp
fidivr
ss
out
rep
imul
sub
inc
jb
aas
xchg
int
inc
jg
imul
mov
mov
mov
ja
dec
mov
dec
cmp
cmps
sbb
call
sub
test
jnp
frstor
sar
pop
pop
movs
pushf
or
pop
in
push
rcr
cmp
mov
rol
ret
aad
inc
jb
scas
or
xor
or
iret
push
ins
scas
iret
jp
in
outs
aam
loope
mov
push
sub
add
pop
xchg
hlt
repz
(bad)
ret
inc
inc
mov
cld
nop
es
xor
dec
pop
mov
iret
push
jmp
dec
xchg
inc
(bad)
and
repz
shl
jp
dec
add
push
cmc
int
mov
mov
xchg
movs
add
or
mov
mov
cmp
gs
ret
sbb
stos
jmp
add
cmp
stc
mov
hlt
cmp
jecxz
nop
mov
das
push
or
xor
in
scas
jno
dec
pop
cmp
xlat
bound
daa
adc
pop
sbb
mov
push
jp
cmp
aas
scas
cmp
lds
(bad)
xchg
lock
mov
out
inc
mov
or
and
rcr
loopne
fadd
movs
std
sub
(bad)
ret
inc
pop
add
movs
mov
jo
hlt
out
pusha
cs
adc
sahf
add
jp
mov
(bad)
out
dec
stos
mov
adc
xor
jle
xor
jg
mov
inc
imul
mov
or
cmps
dec
dec
ds
mov
leave
jo
or
pop
(bad)
bound
int
stos
aas
sbb
or
(bad)
jbe
out
call
dec
xor
test
mov
and
adc
pop
jns
adc
out
pop
leave
mov
and
jmp
aam
or
jg
icebp
imul
dec
fsubr
pop
lock
mov
or
mov
call
(bad)
fs
push
push
mov
dec
stos
imul
xlat
mov
adc
cs
cmp
jmp
std
int3
adc
xchg
push
xor
inc
push
pop
sub
pop
xor
sub
stos
shr
pop
rol
mov
retf
mov
sub
and
and
xchg
call
xor
(bad)
retf
out
imul
lods
cmps
call
mov
pop
lahf
iret
cdq
in
mov
inc
jb
call
es
aas
lea
mov
cmps
mov
not
out
sub
dec
adc
sbb
cmpxchg
adc
push
sbb
dec
in
dec
aam
js
call
dec
adc
push
cmp
xchg
mov
dec
popf
idiv
inc
mov
out
ins
vrsqrtps
(bad)
jle
gs
mov
add
in
daa
xor
ds
idiv
jns
mov
sbb
adc
les
fadd
adc
mov
movs
nop
sub
cmp
and
shr
sbb
pop
xchg
loop
push
add
ds
data16
sub
jne
sbb
xchg
push
or
jb
cmps
test
cmp
sub
pop
mov
and
loopne
and
out
and
aam
push
addr16
nop
mov
test
in
aaa
js
lods
cmp
imul
jmp
les
jp
dec
mov
adc
sub
ds
lock
mov
cli
outs
xchg
jge
xchg
imul
shr
(bad)
inc
les
push
lods
icebp
clc
add
enter
in
ss
dec
xlat
(bad)
push
(bad)
lds
ret
fst
gs
ins
cmc
mov
pusha
sub
(bad)
or
mov
mov
in
push
(bad)
out
xchg
sbb
shl
jb
addr16
punpckhwd
mov
cmp
dec
push
adc
movs
inc
mov
and
out
adc
fst
ja
add
pop
sbb
mov
pop
ins
enter
imul
test
mov
out
repz
(bad)
jle
add
push
nop
sbb
lahf
push
nop
js
add
rcl
fimul
mov
jnp
call
test
jo
jl
das
mov
ja
mov
pop
mov
jge
fs
and
ud0
(bad)
sub
lods
int
inc
jne
cmp
mov
js
sub
sbb
inc
addr16
jmp
lock
rcl
jecxz
into
xchg
(bad)
dec
xor
xchg
jne
imul
jl
mov
lds
in
push
jmp
cmc
xchg
(bad)
or
cmp
loopne
lds
mov
in
jp
shl
std
test
sbb
lods
inc
movs
aas
inc
add
test
add
jb
lds
push
push
inc
inc
and
loopne
xor
out
xlat
imul
mov
jp
test
fiadd
lea
dec
push
and
repnz
pop
ret
rcr
fdivr
cmps
xor
rol
dec
xchg
nop
retf
dec
jp
test
mov
enter
pop
jnp
sub
fnstenv
jp
xchg
pop
leave
xor
lea
in
cmp
jmp
lahf
(bad)
clc
int3
ss
hlt
sub
leave
div
xchg
and
cmp
mov
jmp
imul
addr16
pop
dec
ret
jmp
fadd
nop
mov
inc
dec
ficom
cmp
inc
mov
int3
arpl
cdq
mov
pop
aam
xchg
cmp
cmp
pop
push
mov
fwait
ins
clc
leave
pop
jno
retf
dec
sahf
push
mov
into
fstp
xchg
das
pop
into
sub
addr16
pushf
out
jnp
cmp
sti
int
add
sub
cwde
or
dec
mov
cdq
je
cmp
in
mov
pop
and
add
pop
mov
sbb
push
cli
inc
mov
(bad)
dec
sbb
in
call
sbb
inc
lds
inc
js
xchg
inc
call
movs
nop
pop
rcr
mov
nop
leave
ins
push
adc
es
mov
dec
addr16
or
push
xor
add
leave
cwde
sbb
sub
adc
add
jns
sbb
ds
lods
js
lahf
repnz
cmp
push
clc
push
pop
ja
xchg
sub
sahf
nop
out
add
fisubr
cmp
xor
dec
jne
cmp
adc
hlt
mov
clc
lahf
add
pop
fisubr
cmp
or
mov
jbe
pop
loopne
sbb
enter
push
push
inc
repnz
dec
mov
mov
dec
arpl
mov
and
lahf
test
jecxz
xchg
popa
ror
mov
jecxz
pop
scas
dec
add
not
xchg
cmp
push
and
dec
mov
mov
out
sbb
and
pusha
loopne
pusha
shl
jbe
adc
push
add
or
add
loope
and
cli
inc
in
jno
xchg
jecxz
icebp
icebp
mov
nop
hlt
jbe
jmp
add
pushf
pop
shl
and
mov
jmp
(bad)
add
addr16
inc
pop
add
adc
out
movs
fisub
push
fcomp
inc
mov
xchg
mov
xchg
mov
xchg
mov
mov
pop
out
pop
push
call
mov
mov
xchg
mov
out
stos
movs
in
mov
(bad)
gs
test
add
jae
sub
loop
xor
std
lahf
stos
in
mov
call
gs
adc
mov
pop
sbb
add
fwait
xchg
lods
add
or
jp
je
jnp
aas
and
leave
sub
inc
(bad)
shr
cmp
sub
cmps
movs
loop
popa
lods
sahf
mov
adc
mov
or
cdq
add
popf
shl
or
in
jbe
dec
rcl
pop
push
pop
pop
clc
mov
pop
cli
in
out
add
dec
test
pushf
inc
out
and
imul
in
and
in
xchg
xchg
aad
aaa
pushf
pop
enter
jge
rcl
repnz
push
jae
call
mov
dec
leave
xlat
in
cli
(bad)
cmp
push
lods
out
shr
repz
(bad)
sti
mov
dec
loopne
retf
lea
push
das
and
cdq
mov
jecxz
jle
fs
or
or
stos
add
mov
bound
lock
inc
aam
ficom
or
leave
shl
lds
movs
nop
mov
mov
test
lods
daa
xor
lahf
xor
xchg
sti
sbb
mov
call
sar
ret
rol
cmp
cmp
mov
pushf
imul
in
push
mov
js
and
lea
cmps
jb
cmp
jnp
ret
jne
adc
mov
shl
ins
pop
fxch
push
inc
or
push
mov
jbe
iret
(bad)
out
xor
jmp
add
cmp
nop
xchg
xor
xchg
push
mov
daa
rcl
mov
sti
cs
out
invd
outs
shl
sbb
mov
addr16
pop
sub
in
jmp
mov
call
test
jmp
out
cmp
loope
int
stc
movs
mov
mov
push
stos
scas
dec
add
pop
dec
mov
stc
or
loop
pop
lahf
pop
mov
sahf
sbb
cmp
sbb
dec
cld
repnz
fidiv
repz
dec
movs
pop
shl
mov
push
fld
loop
shl
dec
loope
mov
cld
dec
mov
dec
mov
sub
adc
not
es
add
cmp
xchg
out
inc
fsub
aad
cmovle
inc
into
std
mov
mov
outs
cmps
pop
int3
repz
mov
aaa
pop
sub
push
inc
mov
and
push
mov
cli
mov
(bad)
aas
push
jmp
scas
bound
sar
fnstenv
cmp
mov
loop
cmp
out
(bad)
push
inc
scas
jne
sahf
std
sbb
sub
add
cmps
daa
enter
adc
and
pop
or
ret
mov
pop
shr
std
pushf
dec
xchg
das
(bad)
out
loop
or
or
(bad)
bound
mov
aad
cmp
sbb
cld
mov
jo
lock
mov
xor
out
inc
inc
ret
or
or
push
ret
mov
inc
sar
cli
gs
stos
repnz
ret
in
arpl
push
inc
lods
jno
outs
mov
pop
xor
cmp
ficom
inc
mov
dec
into
dec
out
inc
nop
cmp
into
push
jp
sbb
aas
xchg
mov
push
(bad)
mov
outs
fs
xchg
xor
and
mov
sbb
daa
popf
inc
jp
(bad)
shl
jno
pop
mov
cmp
inc
mov
lods
xor
xchg
in
jnp
retf
add
mov
add
adc
and
int
ja
pop
jl
ins
je
mov
inc
cmc
sbb
and
fiadd
es
test
dec
in
test
or
cmp
adc
stos
rcr
shr
jge
mov
pop
lods
inc
dec
(bad)
adc
out
test
dec
inc
jb
fldenv
les
and
rcl
shr
cdq
shl
jecxz
mov
jb
cmp
movs
std
repz
cdq
pushf
fisub
pop
xor
les
fisttp
lahf
std
push
ficom
push
mov
push
in
mov
cwde
retf
mov
(bad)
fnstenv
ror
loopne
xchg
sbb
adc
scas
shl
and
cmp
cdq
and
jae
cmp
dec
xor
test
or
cmp
aaa
imul
fsubr
popf
test
sbb
jl
inc
sahf
jo
cs
jb
fcomp
les
int
push
add
jp
loop
fidivr
fsub
retf
mov
lds
mov
inc
sbb
(bad)
and
aam
mov
adc
push
xchg
dec
jmp
stc
cmp
cmps
rcl
adc
nop
mov
(bad)
push
push
neg
xor
xlat
jecxz
pop
xlat
or
popa
adc
jmp
(bad)
xor
lock
aam
pop
xor
xchg
jne
xor
dec
push
adc
mov
adc
jge
jno
xchg
xor
ficom
out
out
xlat
and
cmp
gs
sbb
pop
fisttp
and
std
imul
xchg
inc
out
test
icebp
movs
test
jmp
mov
stc
add
and
nop
rol
shl
pop
jnp
(bad)
or
xor
xchg
add
stc
and
adc
bound
movs
jp
sbb
and
retf
dec
movs
sahf
jle
inc
mov
mov
stc
push
inc
jle
(bad)
popf
mov
es
in
(bad)
mov
xor
scas
cmp
(bad)
ficomp
mov
mov
aas
push
mov
add
push
iret
dec
pop
inc
dec
push
add
push
cmc
mov
cmc
mov
stos
je
cmp
repnz
mov
or
sbb
dec
jp
out
pop
cmps
(bad)
shl
jmp
fistp
pop
stos
or
in
cmc
into
(bad)
sub
retf
sbb
fstp
movs
inc
dec
clc
repnz
stos
xchg
adc
mov
jbe
pop
mov
push
dec
cs
push
popa
fsub
cmc
mov
ds
dec
pop
cs
(bad)
mov
and
fsubr
jge
mov
inc
pop
loop
sub
js
in
mov
dec
pop
ret
and
sbb
(bad)
push
je
leave
lahf
iret
cmp
push
ret
aam
shr
and
jmp
mov
outs
adc
sub
sub
ss
pushf
inc
push
loopne
(bad)
sub
sbb
or
or
out
jne
sbb
leave
repnz
cmp
cmp
data16
sub
inc
imul
loopne
out
pop
and
mov
stos
fisubr
es
clc
test
inc
mov
clc
and
lahf
jns
sub
ret
cs
jecxz
(bad)
shl
dec
sbb
stos
das
and
xchg
push
in
clc
test
vpackuswb
pop
iret
stos
jmp
(bad)
cli
lods
mov
mov
xchg
dec
fmul
(bad)
fidivr
ror
xchg
sub
mov
and
addr16
xchg
sub
cmps
cmc
(bad)
push
pop
xchg
sub
out
pop
pop
test
inc
jmp
out
in
das
mov
mov
in
out
fneni(8087
mov
mov
in
jmp
jmp
repz
cli
es
sub
push
sub
(bad)
daa
popf
retf
ret
stos
movs
loope
mov
push
(bad)
std
mov
mov
xchg
in
mov
mov
dec
inc
push
pop
mov
sahf
dec
adc
retf
xor
aaa
jge
mov
cld
int
arpl
pop
jns
lds
(bad)
(bad)
movs
add
out
(bad)
test
call
or
adc
push
xor
icebp
ret
dec
sbb
out
leave
in
std
dec
dec
sub
push
fadd
(bad)
pusha
push
xchg
into
call
jbe
and
mov
inc
fwait
and
inc
fiadd
nop
push
dec
mov
push
sub
pop
(bad)
dec
ret
ins
sbb
add
fiadd
push
out
cs
sahf
outs
jo
aad
pop
arpl
mov
push
dec
xchg
sub
inc
dec
loopne
vandnps
cmps
xor
iret
mov
retf
add
outs
mov
xchg
or
mov
mov
shr
jmp
jecxz
(bad)
arpl
sub
pop
jno
jmp
aaa
movs
(bad)
lods
fwait
stc
xchg
pop
add
dec
and
pop
cmps
retf
(bad)
inc
jae
mov
jle
outs
xchg
xor
pop
pushf
mov
cmp
loope
pop
push
mov
outs
retf
and
lods
add
fiadd
mov
or
call
loop
les
adc
xor
imul
int
jo
cdq
out
inc
mov
in
jnp
and
stc
xor
scas
sahf
nop
imul
mov
iret
or
xor
push
out
mov
jb
xchg
mov
mov
test
cmps
push
paddsw
dec
push
stos
mov
dec
test
xor
mov
add
jnp
mov
mov
mov
leave
pop
imul
stc
inc
fwait
in
mov
mov
add
and
fucom
mov
push
dec
fiadd
push
ins
lods
nop
mov
out
mov
shl
xor
push
test
jmp
push
push
mov
aaa
mov
jo
fsubr
or
xchg
sub
add
inc
das
adc
and
sahf
into
aam
lock
push
cmp
xor
sub
mov
cwde
and
pop
push
xlat
popa
inc
dec
(bad)
xchg
les
call
mov
into
push
aas
push
cmp
(bad)
ja
scas
jle
mov
sbb
fild
jmp
adc
dec
dec
or
gs
dec
mov
add
and
mov
fcmovbe
cmp
xchg
(bad)
sti
adc
lods
sbb
inc
sbb
push
enter
add
sti
fldenv
ja
push
test
mov
scas
add
and
gs
cdq
pop
inc
and
push
add
jmp
int3
mov
cmova
cmp
add
push
lods
in
mov
and
shl
pop
rcr
or
hlt
pop
mov
inc
sbb
pop
shr
cmp
jb
(bad)
aad
pop
dec
das
mov
fiadd
pop
(bad)
das
(bad)
push
cmp
out
das
sub
imul
push
les
add
ficom
mov
mov
loope
push
or
xchg
ja
js
push
sbb
push
nop
aaa
aad
fist
jl
fild
xor
inc
sub
shl
aam
lds
arpl
and
stos
std
push
xchg
jl
pusha
dec
pushf
mov
daa
pop
pushf
cmp
lock
add
les
ror
rcl
dec
push
inc
and
and
dec
cmc
pop
(bad)
pop
inc
jmp
cld
outs
dec
fstp
loop
lds
sub
stos
mov
dec
cmp
cs
jae
xchg
mov
imul
cmps
stos
cdq
cmp
test
inc
js
fnstenv
or
dec
test
or
xchg
fsub
pop
or
xchg
jp
sar
dec
data16
adc
lea
inc
outs
pop
mov
sbb
mov
jg
pop
push
lods
addr16
push
add
and
add
jns
int3
adc
out
outs
mov
cmps
pushf
pop
dec
adc
lea
add
pop
lock
push
(bad)
fisub
stc
es
std
shl
outs
in
pop
es
pop
fstp
lea
fnstcw
mov
lock
push
into
mov
or
cld
test
faddp
les
in
adc
test
add
loop
lahf
add
pop
fsub
(bad)
fistp
aam
jno
fimul
sbb
imul
dec
les
xor
sub
mov
dec
cmc
mov
fst
push
enter
pop
js
fisttp
mov
retf
outs
(bad)
dec
arpl
(bad)
aas
dec
push
xor
int
lds
iret
pop
jmp
xchg
sahf
add
ret
xor
xlat
pop
sub
retf
push
popa
into
or
pusha
pop
or
jnp
lods
nop
mov
das
pusha
(bad)
pop
inc
bound
(bad)
sbb
rcr
ret
les
and
cmps
push
(bad)
ds
stos
push
push
push
push
into
pop
sbb
mov
sti
ss
xchg
dec
jnp
js
test
stos
mov
leave
call
xor
push
(bad)
cmp
fisttp
loop
imul
dec
add
push
arpl
lods
sbb
inc
cmp
ins
jmp
aaa
mov
mov
(bad)
hlt
mov
mov
xchg
mov
test
push
gs
mov
jmp
(bad)
lahf
imul
pop
pop
cwde
std
xchg
pop
cmp
repz
lods
cmp
ret
push
cmps
mov
xchg
mov
inc
jnp
cmp
lahf
jp
lea
xor
ins
adc
(bad)
out
call
stc
bound
sub
dec
fsub
sub
test
mov
iret
push
mov
inc
lds
push
mov
sub
inc
cs
in
(bad)
mov
scas
push
xchg
ds
and
test
movs
dec
shr
(bad)
data16
scas
jne
mov
jmp
std
mov
or
std
sbb
inc
pop
outs
es
inc
in
sbb
fild
aaa
pop
cmc
lahf
lock
sub
int3
lea
popa
movs
cmp
out
add
push
aam
ret
(bad)
cmps
ret
adc
or
add
dec
stc
movs
push
push
lea
xchg
inc
lahf
iret
pop
iret
fadd
mov
retf
fidivr
mov
sahf
mov
les
ds
fisub
daa
cmp
xchg
aas
rol
stos
and
lea
xor
cmps
ins
xchg
or
mov
xor
dec
jecxz
(bad)
or
push
xchg
mov
jb
dec
cmp
cmp
daa
sub
push
jl
mov
dec
sub
xor
mov
sbb
(bad)
and
stc
pop
mov
repnz
dec
out
inc
xchg
xchg
pop
leave
and
add
and
mov
in
dec
and
inc
jbe
cs
neg
ss
dec
scas
add
and
pop
xor
test
mov
shl
sbb
add
loop
xchg
pop
sub
sbb
lods
jmp
xor
add
ja
or
bound
daa
xchg
mov
pop
call
cwde
mov
nop
std
sub
int3
and
mov
clc
les
jnp
in
push
fild
jge
retf
fchs
movs
sbb
pop
je
inc
and
xchg
inc
(bad)
lock
dec
frstor
loop
fstp
mov
pop
mov
jnp
add
adc
nop
ja
or
xchg
cs
sar
jecxz
dec
jne
nop
sub
test
scas
push
(bad)
icebp
dec
gs
pop
jns
xchg
lahf
push
movs
jge
outs
(bad)
and
xchg
nop
sbb
push
(bad)
fadd
mov
mov
xor
inc
xchg
cmp
pop
lods
xor
or
outs
loop
sub
sbb
lahf
inc
cmp
dec
sar
inc
mov
loopne
popa
call
retf
fnsave
pop
and
sbb
inc
cli
mov
cmove
jmp
sbb
jnp
outs
mov
mov
outs
and
inc
jmp
xor
adc
jbe
(bad)
push
mov
bound
enter
sbb
mov
cli
push
test
jbe
cmp
push
stos
push
pop
sub
mov
jecxz
and
sbb
inc
aaa
lock
push
test
sub
data16
call
hlt
call
pop
scas
ficomp
repz
mov
jbe
je
(bad)
mov
push
cmp
mov
sahf
sbb
cdq
nop
mov
lods
mov
mov
mov
popf
ficom
fld
xor
in
and
mov
ins
mov
ds
sbb
mov
jl
hlt
(bad)
in
shr
pop
dec
outs
call
mov
scas
or
push
sbb
push
jg
pop
retf
or
leave
mov
loopne
clc
hlt
sbb
push
std
das
test
mov
fidiv
jg
cmc
push
xchg
icebp
pop
jb
ins
push
mov
xchg
cmp
test
inc
mov
(bad)
sar
ficomp
xor
scas
mov
in
sub
and
pop
or
shr
ror
enter
js
leave
daa
push
push
int3
js
in
gs
sub
shl
test
and
retf
sbb
int3
int3
pushw
adc
or
xchg
dec
(bad)
ds
int
jne
push
fxtract
ds
push
add
pop
(bad)
pop
or
or
fimul
movs
jp
imul
adc
mov
shl
mov
hlt
ins
xor
cmps
bnd
fld
cmp
gs
add
add
mov
cmp
movs
push
adc
dec
test
lods
jp
loope
(bad)
(bad)
sbb
and
sbb
int
mov
retf
into
pop
cmp
pop
neg
stos
rcr
cmp
xlat
rol
sub
sub
loopne
gs
inc
addr16
sub
cmp
xchg
lods
push
idiv
jmp
bnd
ret
dec
(bad)
stos
push
xchg
jp
stc
retf
sar
inc
(bad)
aad
adc
sbb
cld
jns
arpl
mov
ins
call
inc
jb
lock
clc
xchg
fs
push
cdq
dec
retf
xor
in
fs
inc
fsub
xor
int3
dec
js
sub
loop
mov
pop
jne
push
xchg
movs
push
adc
jnp
shl
bound
inc
iret
mov
mov
pop
jge
inc
cmp
pop
movs
lock
jg
into
pop
movs
out
psubw
fisubr
inc
jp
mov
in
out
pop
inc
mov
and
stc
add
loope
inc
fs
sub
pop
imul
(bad)
jp
in
xor
fdivrp
inc
movs
jl
out
out
or
retf
xchg
mov
into
xbegin
inc
fld
fnstsw
mov
cmp
test
sub
mov
cld
loop
into
and
cmp
ja
int
stos
mov
jg
push
cmp
xlat
mov
cmc
add
mov
jp
ret
push
loope
add
ja
adc
sbb
mov
aam
inc
in
xor
fstp
or
leave
das
adc
sbb
sub
add
xor
loope
inc
cmc
dec
xor
sbb
or
loope
sahf
xlat
add
push
shl
les
jl
das
in
jg
ret
inc
lock
stos
rcr
xchg
aaa
loope
imul
stc
imul
xor
imul
ds
test
pop
arpl
mov
cmp
iret
dec
dec
xchg
dec
sysexit
arpl
adc
xor
loopne
jge
shl
clc
into
shl
fsub
mov
inc
sub
fmul
aaa
sbb
fnstsw
inc
in
in
mov
xchg
out
mov
fcmovb
or
push
ret
xchg
test
ss
cmp
inc
rol
jo
mov
mov
mov
sbb
xchg
test
call
inc
test
fidiv
add
dec
jp
sar
rol
add
mov
dec
out
xchg
push
inc
sar
fs
sbb
mov
enter
inc
adc
sub
xchg
cmc
add
outs
cmc
sub
sub
mov
mov
xchg
mov
rcr
pop
sbb
outs
xchg
push
call
pop
dec
ins
and
pop
xchg
repz
scas
aad
fucomip
mov
pop
jbe
sahf
xchg
jb
mov
lods
loopne
inc
and
int
je
cmps
leave
pop
shl
or
loopne
popf
ret
xchg
aad
inc
leave
fst
mov
sbb
or
inc
pushf
lods
call
push
into
mov
and
add
push
(bad)
and
out
lods
loop
sbb
aaa
ror
inc
push
sbb
(bad)
jo
test
jg
je
mov
add
inc
shr
idiv
dec
jg
inc
fidivr
call
lods
lock
sub
test
cli
sub
jl
adc
inc
fcomp
jle
cmps
mov
ins
sahf
jge
add
icebp
inc
sub
pop
dec
rol
fstp
push
xchg
call
xor
pop
loop
clc
popf
fld
jae
inc
lods
retf
jl
adc
xchg
xor
xchg
inc
cmp
mov
sar
and
mov
js
cmp
push
sbb
sub
mov
jo
mov
inc
and
mov
mov
adc
mov
pop
stos
mov
pop
or
bound
fcmovnb
sub
cmp
or
fdiv
gs
inc
pop
aam
adc
fcom
fcmovu
call
sar
lds
xlat
xchg
xchg
jg
cmps
pop
pop
xor
adc
and
push
dec
in
js
push
add
adc
data16
jp
sub
aam
mov
ret
and
pop
int3
jmp
and
aas
rcl
stos
mov
add
cmps
xchg
movs
add
clc
mul
xor
in
stos
dec
std
add
cs
and
mov
sahf
xor
or
pop
hlt
icebp
scas
push
movs
jmp
xchg
inc
fwait
mov
ucomiss
loop
add
push
ins
pop
lds
ss
xchg
mov
adc
mov
jl
mov
jo
fild
adc
retf
sub
pusha
sbb
inc
(bad)
mov
les
mov
aam
scas
bound
jns
out
icebp
pop
aad
jnp
mov
(bad)
sti
push
movs
loope
xor
loope
popf
push
add
stos
test
jae
lods
jbe
sub
mov
add
leave
aaa
cmp
(bad)
jmp
(bad)
rcr
cld
inc
leave
inc
in
rcr
mov
fnstsw
popf
(bad)
xlat
retf
movs
mov
and
jb
sub
stc
(bad)
or
stc
or
fs
stos
aad
test
stos
mov
push
mov
adc
outs
mov
jl
add
movs
je
pop
retf
cmp
loop
push
paddusb
repz
into
jmp
test
mov
nop
std
sub
xchg
lods
or
mov
xchg
retf
ja
add
add
mov
xchg
jno
es
fnstsw
adc
sar
out
xor
out
inc
cmp
jnp
std
ror
in
out
dec
add
mov
dec
xchg
cmp
fnstsw
sbb
push
bound
data16
retf
push
push
nop
jle
jmp
adc
sar
stc
nop
push
fst
(bad)
je
mov
xor
out
(bad)
call
jne
adc
cmps
dec
imul
cmps
out
loop
lea
xor
aaa
and
pop
jo
pop
sysenter
(bad)
bnd
cmp
jbe
or
cwde
je
lahf
ja
xchg
xor
int3
idiv
je
sbb
daa
arpl
jmp
adc
dec
shr
xchg
imul
arpl
mov
scas
sub
push
ret
aaa
lahf
xchg
jbe
fst
idiv
or
dec
rol
add
shr
scas
iret
push
xchg
sbb
dec
inc
xor
dec
push
add
xlat
xor
mov
push
es
fstp
das
sti
iret
sbb
jp
ins
mov
and
dec
mov
arpl
cmp
jns
leave
fwait
test
jmp
retf
lock
ins
loop
fcomp
inc
scas
cld
jp
jl
inc
mov
(bad)
xchg
push
mov
mov
mov
lahf
pop
mov
int
out
mov
xor
(bad)
pop
adc
pop
sbb
jne
or
arpl
dec
(bad)
loop
ret
movs
adc
stos
mov
pop
mov
and
add
inc
mov
fisttp
sbb
and
dec
xor
dec
cmp
sar
or
fsub
call
inc
xchg
jae
mov
dec
test
and
ds
cmp
cmp
(bad)
xchg
sub
xchg
popf
lods
sub
lods
pop
inc
jg
jo
dec
in
stc
mov
and
out
jns
icebp
jmp
scas
cmp
aad
popa
test
pop
movs
retf
and
mov
cmp
xchg
inc
aad
ror
adc
mov
imul
mov
jnp
add
iret
mov
fadd
fstp
rcr
fsubr
inc
fstp
retf
fcomp
mov
mov
fsubr
jge
pop
fcom
pop
sub
mov
nop
push
sub
sbb
inc
scas
adc
cmp
and
mov
cld
jmp
add
adc
xlat
cmp
loop
inc
stos
xchg
sahf
retf
(bad)
shr
mov
jg
sub
lock
and
add
xchg
pop
das
jns
addr16
out
ret
push
mov
sahf
int
test
inc
sub
or
sbb
dec
inc
rcr
fsub
pop
fidiv
out
add
pop
adc
sar
hlt
sbb
push
cmp
adc
fwait
xchg
jns
and
adc
mov
lods
lea
sub
pop
out
inc
push
cmp
pop
mov
jl
push
int3
fsubr
xor
jg
inc
jg
rcl
and
sub
call
mov
xchg
iret
stos
repz
lahf
cmps
xchg
cdq
or
sub
aad
(bad)
mov
ins
adc
push
pop
pop
jecxz
xor
xchg
inc
mov
ret
fucomip
and
inc
sbb
cli
into
xchg
cmp
xor
pop
sub
mov
cdq
mov
jg
or
out
test
mov
aam
scas
jno
cwde
dec
mov
pop
jb
xor
out
xacquire
dec
inc
inc
xchg
gs
sbb
jns
outs
mov
arpl
push
dec
mov
movs
inc
jns
out
xor
mov
xchg
or
stos
test
mov
dec
(bad)
sub
mov
inc
xchg
adc
pop
data16
xchg
push
and
cmp
or
adc
je
out
inc
sub
and
jb
das
push
std
ja
out
adc
mov
adc
scas
mov
sub
cmp
pop
imul
mov
dec
cmp
clc
je
adc
mov
iret
mov
cmp
out
xor
fmulp
popa
sub
xchg
cmp
das
lods
into
mov
jnp
mov
cmp
fistp
es
push
push
mov
sar
pop
sbb
into
dec
aad
sub
dec
mov
jl
inc
and
bnd
sbb
je
xlat
das
pop
dec
popf
fidiv
adc
adc
sbb
xchg
jp
xchg
cwde
xchg
pop
or
mov
jbe
jmp
push
sahf
pop
movs
movs
test
dec
sbb
mov
ins
and
dec
nop
aas
inc
pop
or
pop
repz
shl
dec
movs
mov
jne
or
xor
pop
aaa
test
lahf
call
and
lock
pop
and
in
sar
mov
push
pop
push
pop
not
adc
pop
cmp
jae
in
pushf
iret
dec
(bad)
std
adc
js
scas
sbb
imul
add
jl
jo
cmp
inc
pop
dec
les
or
mov
dec
and
nop
and
repz
lahf
dec
adc
enter
es
mov
cmp
icebp
js
cmps
ficom
rol
xor
scas
mov
sti
out
jp
loopne
or
pop
xchg
xchg
inc
repnz
repz
stos
imul
mov
dec
pop
clc
scas
(bad)
adc
call
mov
(bad)
lds
in
addr16
test
or
mov
gs
data16
out
movs
icebp
sub
pop
leave
pop
js
inc
fst
cwde
mov
adc
lods
pop
cdq
idiv
pop
jns
fwait
call
inc
scas
js
fucom
push
arpl
sbb
data16
inc
adc
lock
rcr
fwait
sub
ret
and
mov
pop
jmp
ins
sbb
cmps
pop
lea
push
or
movs
xlat
test
push
cmp
inc
jne
mov
into
(bad)
daa
push
ins
in
into
adc
add
les
scas
pop
ins
push
jmp
or
retf
jne
mov
xchg
shl
sbb
push
sbb
sub
lea
aad
shl
into
test
ret
mov
dec
ds
or
les
xchg
mov
inc
es
add
sub
add
cmc
pop
or
adc
sahf
mov
jg
aas
sub
add
idiv
adc
out
sub
dec
add
js
pop
xor
xchg
and
aad
fsubr
test
lea
test
cli
add
shr
cmp
ss
xchg
dec
push
in
jno
inc
pushf
std
mov
jge
push
aam
fnstsw
adc
lea
retf
mov
push
xor
outs
int3
xchg
xor
jo
mov
add
into
test
int
out
sbb
cli
call
ficom
sti
fbstp
sub
mov
iret
(bad)
in
push
stc
sub
push
cmp
mov
rcr
outs
jg
stc
mov
xor
jb
test
(bad)
shr
clc
mov
push
sbb
sti
addr16
sub
imul
mov
or
xchg
inc
cmp
loope
and
and
pop
pop
ret
dec
call
sar
rcl
or
mov
mov
aam
loope
add
pop
(bad)
mov
inc
stos
dec
ins
lds
cs
imul
(bad)
or
mov
mov
xchg
push
dec
hlt
pop
aad
mov
scas
and
(bad)
jae
dec
fadd
push
sbb
test
add
aad
pop
or
mov
in
dec
sub
aam
inc
in
sbb
lods
mov
or
mov
enter
jae
inc
mov
out
push
mov
cli
push
cmp
stc
mov
jb
sti
test
pop
sar
jno
push
cmp
inc
jmp
lahf
fwait
loopne
stc
test
mov
xor
pushf
push
mov
pushf
jb
fwait
and
or
dec
and
mov
stos
dec
and
push
sbb
loopne
outs
and
xchg
cmp
test
push
mov
int
xor
jne
mov
mov
(bad)
in
mov
mov
push
sub
test
inc
nop
stos
shr
cdq
pavgw
jns
jns
mov
cmps
ja
nop
and
or
cmp
dec
in
test
pop
repz
cmp
stos
or
mov
adc
out
inc
repz
(bad)
fimul
loope
out
fisttp
out
mov
or
leave
and
into
inc
push
xlat
out
data16
in
dec
adc
sbb
sahf
ja
dec
mov
aad
aas
test
les
jne
sub
popa
cwde
sahf
dec
aas
push
movs
xchg
pop
jae
clc
jb
(bad)
jge
movs
xlat
inc
mov
add
mov
xor
stc
leave
out
stos
(bad)
into
div
jno
push
call
loope
inc
ss
mov
fild
mov
dec
push
mov
cdq
push
arpl
nop
das
mov
ins
jmp
movs
cmps
cs
and
or
fidivr
push
lds
dec
or
rcl
pop
repnz
ss
loop
mov
dec
mov
pop
shl
enter
cli
iret
gs
je
iret
(bad)
in
dec
in
mov
dec
bound
xchg
and
arpl
add
lods
xor
aaa
es
push
push
sub
mov
stos
mov
ins
es
pusha
dec
jae
data16
jne
inc
pop
lahf
cmp
in
cmps
add
fistp
into
in
mov
push
dec
int
adc
sbb
out
jecxz
movs
cdq
loop
sub
xor
lods
xchg
mov
jae
xchg
or
mov
mov
inc
mov
sbb
pop
sbb
fwait
mov
test
cmp
or
mov
mov
rcl
mov
xlat
pop
retf
jl
imul
xor
scas
xchg
xlat
and
int
nop
ins
in
push
lea
pop
in
sahf
push
push
mov
ret
out
hlt
ror
(bad)
cmps
sti
daa
dec
mov
push
and
or
fwait
vpmacssdql
bound
lds
sbb
aam
in
mov
clc
(bad)
ds
mov
dec
push
scas
cmp
inc
pop
test
push
xchg
dec
mov
xor
and
test
mov
stos
adc
mov
adc
jnp
jmp
push
pop
fisubr
(bad)
fild
xchg
push
fcmovbe
imul
into
bound
inc
pop
call
ret
stc
dec
push
int3
lds
gs
xchg
xchg
sbb
pusha
mov
sbb
xchg
call
daa
mov
sub
jmp
push
int3
sbb
sbb
xor
jb
out
pop
daa
repz
add
imul
adc
aaa
adc
imul
push
pop
jns
enter
in
push
pushf
js
in
lock
movs
mov
mov
enter
fst
lods
sub
jns
adc
js
or
adc
mov
add
pop
sbb
push
adc
add
xchg
xor
inc
out
in
jp
cmp
popa
push
pop
es
jae
les
mov
or
pusha
or
add
and
sbb
push
out
sbb
(bad)
retf
rol
inc
xchg
push
cli
mov
into
cmc
fcom
push
mov
ficomp
add
aaa
mov
cdq
inc
in
movs
xor
fimul
pusha
dec
mov
(bad)
(bad)
sub
leave
(bad)
(bad)
or
mov
dec
lock
movs
dec
fiadd
sbb
jmp
add
loop
stos
ins
mov
cmp
retf
fbstp
and
push
adc
cmp
inc
dec
jp
xchg
sub
mov
pop
mov
popf
ss
push
jbe
ins
repnz
dec
add
adc
push
mov
lock
dec
cmc
add
xchg
gs
sbb
mov
pop
add
jge
dec
add
in
pop
ds
ret
jp
fwait
sbb
cmps
(bad)
jge
popa
push
push
sub
sbb
(bad)
and
xor
dec
push
jns
dec
mov
popf
scas
add
lock
pop
sbb
adc
adc
mov
mov
in
test
in
shr
xor
adc
lea
scas
mov
scas
mov
(bad)
mov
ja
and
inc
mov
stos
leave
add
shl
cmps
mov
xor
rcl
xor
dec
jo
pop
mov
(bad)
call
sbb
inc
mov
and
xor
stos
imul
repz
push
or
fsub
cmp
lahf
loopne
mul
outs
lahf
inc
adc
sbb
mov
jecxz
add
mov
ret
cmps
adc
dec
in
icebp
imul
xor
(bad)
jb
loope
mov
and
or
lods
test
call
mov
in
jl
stc
pop
or
clc
outs
enter
test
jb
idiv
aam
mov
cmp
aad
cs
jno
dec
add
dec
jno
pop
xor
cmc
add
ja
or
(bad)
ds
ret
jecxz
dec
js
jns
mov
(bad)
test
push
int
add
sub
push
sti
popa
(bad)
jmp
ds
xor
inc
mov
mov
mov
and
add
push
jge
dec
inc
sbb
sbb
xchg
call
hlt
test
pop
inc
test
pop
pop
hlt
test
sub
adc
jnp
dec
mov
sbb
jmp
(bad)
cmps
addr16
inc
push
retf
xchg
inc
enter
mov
repnz
loopne
cmps
sbb
setl
sub
add
adc
push
mov
add
test
jbe
scas
and
or
xchg
add
mov
sub
cwde
outs
hlt
jnp
ins
pop
fcmovnbe
rcl
sub
xor
cmp
out
popf
shr
outs
cmp
ins
xchg
cmps
inc
scas
dec
ficom
pop
hlt
push
jl
hlt
mov
dec
push
(bad)
loope
mov
stos
sub
and
pop
xor
xor
xor
jg
sbb
fiadd
dec
push
call
ins
jl
leave
xor
pop
and
pop
or
ja
cdq
mov
in
push
fdiv
pop
add
inc
(bad)
sbb
adc
not
int3
lahf
sub
movs
sbb
retf
je
(bad)
pop
int
js
jno
mov
jnp
dec
lods
popa
sub
jl
jae
mov
cmp
leave
je
mov
dec
mov
dec
push
add
cs
cmp
ror
popa
in
pop
rcr
dec
push
mov
retf
sub
sub
in
loope
aam
imul
add
jge
or
and
sub
(bad)
and
movs
mov
push
inc
lea
and
or
int
imul
jnp
fstp
out
sub
out
mov
leave
dec
cdq
ins
sub
mov
sar
push
in
push
xor
add
push
jp
jl
mov
jno
inc
mov
(bad)
sbb
mov
push
cmp
sbb
jo
pushf
sbb
lods
jo
fisubr
repnz
cld
cmp
cmp
mov
dec
mov
into
mov
inc
add
loopne
(bad)
std
iret
ja
les
mov
cmp
movs
mov
push
fcmovnbe
xchg
or
call
xchg
fisttp
pop
out
fmulp
and
stc
mov
hlt
ret
repz
fwait
fwait
sub
mov
mov
popf
shr
lahf
test
test
stc
loopne
mov
scas
aaa
and
jns
mov
dec
add
dec
jbe
lahf
adc
int3
xchg
jne
das
repnz
mov
ret
imul
mov
cmp
in
pushf
cmps
cmp
inc
sbb
and
mov
cmp
cmp
movs
push
fisub
xor
sub
jno
jmp
push
aas
pop
int3
and
loop
jne
ret
cmp
xlat
leave
out
retf
adc
xchg
add
cmp
gs
jae
retf
sub
xchg
mov
dec
mov
std
mov
mov
test
out
jecxz
sub
sbb
iret
jmp
mov
adc
push
add
sbb
rcl
popa
or
push
adc
mov
sub
(bad)
sbb
inc
test
jmp
scas
sub
aaa
leave
dec
mov
or
sub
dec
xor
movs
and
inc
xor
xor
push
cmps
or
adc
pop
push
dec
xor
push
ret
stos
(bad)
movs
jbe
mov
push
dec
xlat
dec
push
movs
sbb
sub
lea
mov
mov
daa
gs
dec
add
or
xor
cs
and
div
push
or
xchg
ret
sbb
push
xchg
inc
xor
inc
xor
inc
pusha
pop
mov
mov
stos
clc
aas
add
ss
mov
jge
cli
rol
cmps
adc
adc
xor
in
stc
scas
sub
mov
mov
mov
sub
scas
dec
mov
or
cwde
lahf
jge
lods
ss
cld
sub
dec
call
hlt
(bad)
repnz
call
dec
aaa
fnstsw
push
in
jmp
sub
into
out
es
shr
scas
jg
pusha
nop
sti
and
xchg
xor
loope
ins
mov
in
or
cmp
test
std
addr16
jns
adc
xor
cmp
mov
add
ja
(bad)
lock
push
pop
std
arpl
fcom
pop
dec
imul
add
push
fidivr
inc
or
jb
rcr
jne
aaa
jl
dec
dec
repnz
clc
aad
dec
sbb
pusha
dec
push
imul
(bad)
or
repnz
mov
(bad)
or
fmul
pop
repnz
mov
push
or
dec
xchg
cmp
mov
pushf
fldpi
cmp
mov
or
out
stos
shr
push
fwait
xlat
cmps
fldenv
test
add
les
ret
mov
fcom
jno
popf
xchg
xor
dec
mov
leave
pop
(bad)
cmp
jmp
xor
ins
fnsave
xchg
arpl
push
enter
jl
addr16
pusha
pop
lds
push
pop
sub
mov
popf
sub
mov
lahf
(bad)
imul
jae
shl
cmps
push
push
mov
scas
mov
iret
xor
call
xor
pop
fldenv
push
pop
push
loopne
mov
mov
das
enter
cmp
sub
out
and
mov
in
inc
push
mov
add
xlat
test
or
out
pop
fbstp
mov
mov
loop
int
shr
sub
(bad)
jmp
xchg
call
outs
call
in
mov
and
test
in
fwait
xchg
mov
mov
nop
push
popf
rol
lds
push
pop
mov
ds
pop
das
mov
jb
mov
adc
adc
into
sbb
stos
(bad)
out
inc
lea
and
adc
setge
or
pop
xchg
and
jmp
cld
test
in
mov
std
aaa
(bad)
pop
push
fs
jp
inc
and
sar
pop
sub
fldcw
pop
outs
cmp
jmp
jecxz
stc
add
rol
dec
mov
xchg
pop
mov
sbb
inc
xchg
lods
clc
dec
push
call
pop
sub
pop
sahf
xchg
sbb
addr16
cmps
popa
in
mov
push
mov
jmp
pusha
adc
inc
inc
jecxz
ficom
movs
pop
inc
or
retf
adc
add
jmp
sub
inc
pop
test
retf
cmc
xchg
int3
add
cmp
xlat
(bad)
in
sti
inc
sub
mov
mov
xor
and
dec
dec
test
cs
pop
out
and
imul
das
jne
das
mov
pop
jo
or
clc
loope
cmp
and
not
gs
(bad)
xor
(bad)
dec
mov
adc
pop
test
jns
ss
dec
sahf
call
nop
nop
xchg
mov
je
xor
or
bound
iret
je
mov
jmp
aam
cmps
clc
pop
enter
shl
stos
int
test
pop
or
sbb
sahf
gs
(bad)
pop
popa
lock
mov
xor
cmp
ret
ja
xlat
aam
xchg
mov
dec
adc
pop
adc
into
push
sbb
in
cmp
dec
dec
imul
daa
test
add
fstp
cmc
adc
sbb
sbb
retf
sar
enter
idiv
jbe
fsubr
hlt
dec
ds
or
loope
pusha
xchg
mov
(bad)
mov
cs
adc
div
jge
sbb
pusha
stos
dec
mov
sbb
or
repz
mov
mov
push
scas
outs
popf
rol
pop
mov
mov
adc
pop
std
fcomp
out
test
in
add
sub
stos
lock
jns
mov
rcr
ret
dec
cmps
fisubr
(bad)
cmp
into
outs
rol
fs
mov
adc
imul
mov
xchg
jmp
scas
das
daa
js
sbb
js
arpl
cmp
xor
and
push
hlt
data16
mov
scas
xchg
movs
dec
inc
dec
fucomip
sub
sbb
dec
sbb
lock
cwde
shr
test
adc
scas
jmp
arpl
shl
(bad)
fdivrp
pop
add
sar
(bad)
xlat
in
jno
test
xor
(bad)
addr16
(bad)
jmp
mov
sahf
repz
pop
mov
cmp
add
xchg
push
mov
xor
pop
and
pop
aaa
ds
retf
cmp
ds
cmp
pusha
in
pushf
addr16
add
les
loope
popa
fidivr
sbb
jecxz
dec
add
sub
push
sti
in
cmp
mov
iret
adc
(bad)
ds
and
jb
pusha
adc
push
shr
clc
pop
ds
cmovle
add
bound
daa
mov
mov
dec
inc
lock
push
mov
pop
xlat
(bad)
cmp
outs
mov
das
inc
dec
retf
inc
mov
rol
fsub
mov
push
jo
adc
imul
int
sahf
or
push
icebp
xchg
test
(bad)
fcomp
es
movs
cmps
mov
mov
(bad)
fcomp
xchg
dec
and
push
dec
cs
neg
jle
popf
arpl
int3
aas
adc
xchg
fs
cmps
inc
les
sbb
push
imul
dec
test
pop
jmp
cdq
jne
dec
fistp
lds
sub
mov
dec
xlat
adc
xor
pop
imul
cmp
push
sti
aad
test
pop
sbb
mov
xchg
pop
lahf
sub
cmp
mov
cdq
dec
les
jg
mov
push
out
mov
jae
fst
mov
out
cmp
shl
xchg
xor
pop
add
xor
aas
inc
dec
je
sbb
retf
loope
hlt
js
add
push
pop
sbb
push
daa
jle
jmp
push
adc
sbb
dec
mov
call
and
es
adc
jg
cli
call
xchg
retf
fadd
pop
outs
mov
cmps
mov
call
adc
cwde
ficomp
nop
outs
inc
sbb
ja
jns
fld
(bad)
clc
xchg
mov
imul
jne
sub
adc
lods
jg
add
or
test
mov
jns
in
fld
dec
movs
mov
push
fwait
jge
pop
out
adc
(bad)
iret
into
ins
sbb
pop
mov
popf
inc
cdq
sbb
mov
push
or
jns
fstp
push
movs
dec
in
jle
sub
lea
mov
jle
mov
jae
ficom
mov
fidivr
dec
push
outs
aas
das
dec
dec
je
aam
push
cmp
fwait
cmp
mov
push
imul
mov
out
int
pop
enter
fcom
jp
aas
lea
xor
outs
pop
cld
scas
jmp
push
push
pusha
mov
sub
dec
mov
push
fist
sti
(bad)
push
mov
jge
mov
add
pop
mov
mov
std
mov
mul
scas
pusha
mov
adc
sbb
sbb
stos
sub
out
xchg
push
ret
das
into
pop
punpcklbw
out
(bad)
cmc
imul
daa
or
ret
mov
pop
pusha
push
inc
pop
jl
fwait
pusha
addr16
jle
leave
repnz
inc
in
adc
xchg
inc
in
icebp
xor
mov
out
stos
bound
dec
cs
fdivr
pop
cmp
push
adc
ffree
push
mov
sub
test
je
add
ins
pusha
sbb
xchg
pop
fst
test
loop
mov
or
push
arpl
(bad)
in
movs
xchg
out
test
(bad)
lock
(bad)
in
cld
add
cmps
imul
cdq
pushf
(bad)
ss
int3
sbb
xor
(bad)
popf
mov
fsqrt
movs
lods
cmp
cs
xor
int3
fbld
call
dec
and
xchg
push
sub
jb
lds
outs
mov
pop
pop
sbb
cmp
mov
dec
dec
inc
inc
pusha
pop
add
inc
adc
mov
xchg
pop
xchg
adc
bound
add
dec
xchg
mov
shr
loopne
xchg
sbb
add
aaa
or
ret
inc
pop
out
push
inc
push
js
out
into
mov
mov
(bad)
fsubr
stos
stos
mov
arpl
je
jp
add
sub
ins
fisttp
or
xor
pop
(bad)
div
push
(bad)
repnz
retf
fnstenv
jno
xor
pop
mov
out
xor
or
push
or
sbb
jp
push
jnp
je
sbb
imul
mov
xchg
scas
sbb
das
jae
pop
dec
ss
cmp
les
add
pusha
(bad)
xor
xchg
xchg
mov
add
dec
popf
mov
scas
dec
ret
stos
cli
mov
mov
xor
pushf
movs
std
and
mov
cld
scas
lahf
cmp
rcl
sti
jl
fwait
outs
xor
push
shr
adc
int3
cmc
movs
inc
aam
aaa
sar
nop
mov
adc
outs
int
enter
sbb
arpl
imul
int
jno
xchg
das
adc
scas
sub
call
fisttp
cmp
add
int3
mov
mov
sbb
mov
mov
mov
into
or
shl
or
movs
xchg
inc
and
push
das
fsubr
dec
xor
xor
jecxz
adc
push
mov
jno
mov
inc
call
movs
jg
or
nop
ss
push
out
dec
add
and
hlt
pushf
(bad)
mov
and
nop
and
jnp
shl
jg
xchg
mov
cmps
in
arpl
outs
lods
cmp
mov
xchg
stos
jp
adc
cs
sar
sahf
mul
nop
adc
or
jne
jne
cmps
xchg
cmps
pop
mov
in
pop
fisttp
ficom
add
ror
imul
jmp
push
(bad)
mov
mov
aaa
add
(bad)
jecxz
push
sahf
lea
sbb
inc
xor
jg
fdiv
jmp
and
outs
lods
dec
pop
jae
imul
mov
aam
out
ins
dec
mov
das
pop
mov
pusha
addr16
pop
(bad)
and
loop
inc
das
mov
mov
mov
and
adc
adc
je
mov
pop
pusha
rcr
js
shr
xor
adc
push
in
repz
out
data16
sbb
xlat
retf
loop
or
add
mov
sahf
mov
pop
mov
(bad)
jbe
add
mov
jmp
or
jecxz
scas
outs
test
loop
push
div
xchg
mov
push
sti
ins
dec
jb
mov
mov
test
aam
daa
push
sub
push
movs
lds
dec
mov
mov
bound
aaa
shl
xchg
retf
pop
lock
inc
push
ja
inc
sbb
mov
pop
mov
js
arpl
hlt
mul
mov
pusha
stos
mov
xchg
(bad)
lock
retf
scas
cmp
add
int3
sbb
cmp
pop
and
arpl
dec
fld
ret
mov
cmps
je
mov
jp
inc
push
psubw
in
push
out
cmp
mov
in
(bad)
loope
neg
mov
mov
mov
sub
test
fnstcw
xchg
bound
je
(bad)
in
(bad)
and
retf
mov
test
and
addr16
bound
retf
xor
pop
hlt
adc
(bad)
jmp
mov
push
push
loop
dec
aas
imul
scas
stc
stos
gs
nop
push
out
pop
sub
jmp
dec
mov
loopne
jnp
(bad)
pop
lock
sub
jmp
jl
dec
cmc
mov
xor
enter
jno
push
inc
sar
inc
inc
mov
jl
enter
pushf
mov
pop
mov
sbb
mov
sbb
add
ss
pop
pop
xor
jo
mov
xchg
and
ja
cmp
jl
pop
sbb
sub
arpl
mov
stos
pop
(bad)
rcr
jle
and
push
(bad)
jns
and
stos
cmp
and
xchg
jnp
dec
jle
ja
push
push
fist
push
lds
jl
pop
adc
push
call
int
(bad)
std
icebp
push
call
retf
push
inc
dec
jge
(bad)
mov
cmps
mov
movs
repnz
loope
gs
js
jmp
jbe
sbb
fdiv
jbe
push
dec
icebp
mov
add
sbb
lods
shl
(bad)
inc
jmp
cmp
mov
inc
bound
les
push
mov
pop
push
clc
loope
dec
mov
add
xor
pop
mov
inc
sub
and
add
int
mov
jle
push
jge
addr16
fcomp
bound
jp
xor
es
jmp
ror
nop
js
mov
sbb
mov
jb
fwait
and
mov
or
out
add
cwde
jmp
jb
jno
push
pop
jns
(bad)
fisubr
mov
mov
cmc
rcl
fstp
cwde
cmps
sbb
fwait
stos
(bad)
lods
in
pop
mov
xlat
push
xchg
inc
mov
mov
das
lahf
push
mov
pop
call
mov
mov
mov
fwait
xchg
loope
mov
cmp
xor
aaa
cmp
xlat
xchg
les
clc
retf
in
mov
imul
push
ret
ds
dec
dec
mov
and
fstp
sub
cmc
gs
lock
adc
test
data16
xor
(bad)
xchg
xor
and
sbb
add
cdq
dec
or
mov
repz
jo
imul
add
add
jp
jp
shl
scas
cdq
inc
daa
aad
movs
fdiv
mov
push
mov
test
push
ret
fidivr
arpl
cli
sub
aad
push
inc
inc
or
outs
jge
popf
adc
adc
push
es
pop
inc
xor
(bad)
xchg
stos
aaa
pop
or
and
movs
dec
add
mov
mov
cli
mov
dec
popf
add
ss
test
mov
xchg
pushf
imul
inc
fcomp
(bad)
xchg
mov
jp
dec
mov
cwde
ds
fdiv
xchg
sbb
rol
dec
push
mov
cs
jo
sbb
xchg
out
sar
push
xchg
imul
gs
jmp
sub
mov
arpl
inc
aam
std
mov
cs
or
jle
sbb
repz
scas
addr16
push
sbb
fcomp
and
adc
mov
pop
bound
out
fisub
adc
lock
fsubr
movs
cmp
aad
imul
xor
aaa
pop
sbb
int
pop
nop
adc
cmp
and
jno
test
sub
pxor
dec
loopne
mov
mov
cld
lea
rcl
out
xchg
aas
or
adc
mov
pusha
cli
addr16
xchg
inc
fistp
mov
mov
and
out
pop
mov
icebp
imul
pusha
adc
cld
in
retf
pop
rol
movs
in
xor
sbb
out
sbb
adc
int3
mov
push
(bad)
sahf
mov
test
and
dec
push
ret
into
mov
call
or
pop
and
inc
mov
imul
(bad)
cmp
mov
and
push
in
ret
push
out
imul
jl
xchg
(bad)
jl
push
mov
sbb
outs
daa
ja
enter
ss
mov
jb
(bad)
cmp
mov
sub
sub
shl
jmp
lock
fst
int
bound
lock
cmp
iret
repz
imul
mov
xor
lods
retf
sub
inc
loopne
fcmovu
and
stc
inc
mov
push
cld
movs
imul
dec
pop
scas
pop
imul
jbe
repz
jae
icebp
in
in
push
mov
rcl
sbb
lods
popa
sub
stc
push
sub
daa
shl
xor
push
sar
fsubr
fstp
push
xor
xchg
sub
bound
add
push
jl
mov
mov
int3
pop
xchg
fsub
outs
dec
mov
xor
leave
push
push
cmp
shl
cmc
mov
mov
sahf
jno
lea
mov
mov
xor
movs
jbe
inc
sub
mov
cmps
jl
jns
sbb
ja
scas
push
stos
adc
scas
ja
mov
add
loope
sub
inc
mov
mov
add
xchg
pushf
push
sahf
xor
fsubr
mov
dec
xchg
iret
das
ret
mov
leave
retf
add
mov
imul
xchg
sbb
push
outs
jecxz
mov
scas
rcr
jmp
push
xchg
bound
mov
rol
aam
outs
iret
dec
jb
(bad)
int3
jns
sbb
push
mov
aaa
or
fidivr
push
adc
ret
cmp
(bad)
cld
add
int3
shl
stos
fbld
scas
(bad)
dec
inc
test
jbe
mov
punpckhwd
and
lods
lods
retf
mov
and
cmp
cmp
aam
jo
jmp
or
mov
jae
or
pop
pop
mov
cli
xor
mov
scas
scas
inc
movs
into
mov
(bad)
pop
les
sub
mov
or
jne
jp
fcomp
dec
push
out
icebp
test
das
out
xchg
mov
pop
ret
clc
loop
cdq
jo
fs
and
call
cmp
clc
(bad)
stos
xchg
imul
popf
mov
mov
popa
and
cmp
outs
lods
jb
push
shl
xor
shr
cmp
outs
enter
movs
hlt
and
xchg
sbb
cmp
(bad)
mov
mov
repz
rcl
cld
cmps
adc
lea
add
inc
mov
inc
xor
dec
sub
imul
mov
(bad)
mov
push
inc
xchg
test
(bad)
mov
jae
xchg
sar
inc
or
test
pop
retf
shr
leave
sbb
xchg
cmps
adc
add
outs
mov
das
scas
js
and
xor
adc
scas
push
stos
jecxz
jg
pusha
pop
xor
imul
inc
inc
mov
inc
xor
stos
clc
or
push
jecxz
sub
push
lea
push
mov
dec
dec
(bad)
leave
mov
xchg
adc
test
nop
pop
sub
cmp
cmp
xor
cmp
mov
add
ds
cwde
fld
push
adc
psrld
sub
adc
je
repz
jp
cdq
jae
sbb
lods
mov
mov
push
sbb
add
jo
xor
xlat
inc
inc
stos
inc
and
pop
jecxz
mov
jecxz
movs
jecxz
push
and
aam
out
inc
cmp
scas
jnp
pop
cmps
push
mov
fistp
jl
pop
mov
add
(bad)
inc
and
and
sub
cmp
push
mov
xchg
ins
cmp
ins
sbb
aad
and
and
shr
jbe
inc
adc
sbb
pop
(bad)
loop
mov
(bad)
cmp
call
inc
sub
jb
xor
adc
mov
retf
out
call
call
lahf
sbb
and
mov
add
push
inc
mov
dec
mov
stos
pushf
mov
movs
inc
push
(bad)
in
stc
mov
mov
rol
aam
rcl
outs
setne
jmp
inc
test
xchg
dec
sub
jbe
mov
sub
sbb
popf
out
movs
cmp
lods
xchg
lods
jecxz
stc
je
push
xlat
lods
jecxz
fs
cwde
ja
fstp
add
push
cmp
mov
mov
data16
mov
ret
pop
jbe
add
sti
in
mov
ja
inc
mov
loop
loope
mov
stc
mov
mov
imul
sar
jle
imul
les
test
call
or
dec
ror
in
push
mov
(bad)
or
sbb
inc
rep
int
out
outs
test
es
xlat
mov
pop
mov
push
sahf
rol
loop
cmp
pop
cmps
movs
push
jae
mov
adc
mov
nop
mov
xor
call
push
and
gs
cmp
mov
cmp
jne
push
cmp
jle
adc
push
lds
push
aam
imul
mov
movs
push
out
mov
add
stos
mov
outs
or
hlt
xchg
je
push
popa
popa
(bad)
jp
outs
mov
mov
xchg
adc
jmp
push
gs
sub
cwde
sbb
xchg
push
xor
jl
jb
dec
pop
loopne
rcl
scas
jne
jge
sub
mov
pop
inc
rol
or
hlt
pushf
test
dec
and
jb
into
cmp
test
stos
and
cmp
sti
add
xchg
in
dec
jae
adc
cdq
mov
repnz
cmp
ins
jp
cmp
inc
arpl
imul
pop
in
pop
in
stc
pop
std
xor
(bad)
dec
sub
mov
cmp
and
adc
retf
dec
xchg
sbb
stos
push
mov
mov
loope
mov
arpl
das
jecxz
dec
(bad)
or
xchg
dec
fs
cld
(bad)
in
xor
mov
stos
movs
adc
cli
stos
dec
cmp
add
sub
mov
push
gs
mov
jno
call
out
stos
jno
or
(bad)
call
add
add
nop
stc
or
jmp
in
int
add
shl
pop
sub
cs
mov
daa
lahf
inc
dec
sub
mov
cmp
xor
cs
pop
push
fimul
push
rcl
jl
icebp
jo
dec
dec
rcr
inc
test
cmp
sub
ret
ffree
scas
mov
dec
push
into
xlat
lods
das
loop
ins
mov
shr
jle
aad
push
xchg
mov
dec
popf
out
je
mov
inc
adc
std
mov
and
jecxz
in
dec
xor
push
retf
es
gs
xor
jle
fwait
push
in
cmp
lock
push
xchg
mov
sbb
xchg
fsub
cdq
addr16
xchg
pushf
and
ins
rcl
lea
call
ss
pop
or
push
pop
aas
(bad)
js
arpl
cmp
sub
lds
adc
int
lods
pop
adc
dec
(bad)
out
cmps
add
sub
(bad)
cmp
ss
sbb
sbb
push
pop
popa
dec
das
xor
inc
test
jp
jl
jmp
sub
or
cwde
cmc
inc
hlt
and
ror
dec
lahf
mov
jae
push
daa
mov
imul
iret
call
sub
push
and
into
dec
jmp
inc
(bad)
fdivr
xchg
js
xchg
mov
je
mov
fld
push
fist
mov
(bad)
dec
pop
ins
mov
lds
cdq
dec
cmp
inc
test
adc
leave
push
sbb
jmp
shr
xor
dec
adc
cmp
mov
sahf
jp
jle
ficom
xor
popf
cmp
les
ret
xchg
or
xor
sub
inc
adc
fwait
or
rol
mov
jle
popa
dec
push
stc
adc
jns
jo
push
adc
and
xchg
cmp
js
shr
aad
add
pop
mov
jae
ret
pop
sbb
mov
jns
or
dec
and
xor
mov
call
ins
ret
in
je
aam
jl
repz
test
jg
fsub
and
ss
fdecstp
cmp
lds
jle
repnz
push
test
dec
mov
dec
jbe
sub
fidiv
std
daa
push
jge
pusha
cmp
lods
rcl
dec
push
xchg
mov
mov
mov
xchg
sub
inc
cmp
jno
jl
push
out
xchg
lock
fisub
xor
or
xchg
lds
cmp
dec
shl
pop
or
scas
pop
nop
inc
or
mov
test
and
lods
jmp
inc
mov
jmp
mov
push
and
fnsave
inc
mov
add
adc
rcr
pop
dec
mov
jle
mov
mov
retf
or
pop
mov
lock
hlt
add
and
retf
xchg
sti
cs
scas
dec
xor
xor
(bad)
sub
or
mov
pop
leave
xchg
addr16
pop
mov
lea
iret
scas
ins
dec
mov
and
repnz
ins
and
mov
pusha
(bad)
sub
mov
ror
iret
sub
and
sub
icebp
in
cmp
loop
add
fcom
xchg
inc
hlt
jmp
shl
loop
ret
repnz
(bad)
mov
add
(bad)
pop
icebp
jno
jg
pop
ffree
or
int3
jp
pop
adc
ja
mov
cmp
pusha
das
push
fstp
pop
or
sbb
call
jp
and
add
jmp
inc
sub
in
mov
in
movs
mov
lods
and
es
je
cld
sbb
int3
mov
mov
fnstenv
cmp
fwait
imul
sbb
dec
push
outs
inc
shl
mov
jl
ror
cmp
mov
test
lds
sub
xchg
cmc
(bad)
je
xor
xchg
jae
pop
repz
and
mov
xor
cmp
mov
dec
xchg
mov
inc
adc
dec
sub
jno
xor
(bad)
syscall
hlt
mov
pop
pop
and
ins
lahf
scas
fist
movs
inc
fdivr
shl
xor
into
or
inc
sub
sbb
shl
outs
rol
ret
call
sub
pop
lods
mov
nop
mov
mov
cmp
cld
ja
pop
dec
lods
sub
xchg
or
inc
loopne
push
je
rcl
cmps
adc
push
cld
jae
pop
ret
cmp
rcl
imul
xor
aad
adc
lods
pop
out
and
fldcw
fcmovne
(bad)
repnz
mov
jecxz
fcmovnu
daa
sti
aad
(bad)
(bad)
les
in
pop
mov
push
scas
sbb
jne
(bad)
sbb
push
mov
and
ret
mov
mov
dec
sbb
sti
pushf
mov
sub
gs
add
jns
add
es
test
aad
popf
mov
retf
es
push
xor
ret
pushf
jae
mov
xchg
lods
retf
xor
jns
sbb
adc
cli
pop
xor
ss
mov
sub
xchg
pop
cwde
outs
or
jo
mov
rol
call
aad
cmp
or
ds
ins
mov
adc
cwde
dec
sbb
mov
push
or
jns
rol
lods
cmp
push
jne
fwait
inc
sbb
pop
jae
sub
sub
cld
jle
xchg
xor
outs
into
rol
or
jmp
popa
lock
jne
add
jecxz
lgs
(bad)
push
xor
(bad)
in
push
call
shl
adc
cmp
iret
sub
pop
fisub
fsubr
gs
rcl
cmp
inc
imul
cmps
and
mov
out
call
jmp
push
scas
pop
mov
aad
inc
xchg
mov
je
sar
dec
(bad)
dec
inc
xor
push
movs
pop
cmp
dec
or
or
and
xchg
mov
jb
sub
or
fndisi(8087
jle
(bad)
jge
shl
cld
sbb
adc
retf
or
repz
dec
bound
arpl
hlt
div
xor
iret
dec
test
adc
stos
inc
push
xchg
dec
inc
pop
test
fcomp
(bad)
lods
enter
jo
adc
xchg
or
dec
xchg
adc
dec
(bad)
pop
push
inc
movs
jp
mov
push
and
sbb
inc
mov
in
in
popf
loop
xor
lods
cmps
jae
fistp
and
dec
pop
add
out
data16
sbb
(bad)
or
movs
or
lea
mov
adc
or
pop
push
dec
jnp
adc
fld
inc
aam
lods
add
xor
cmp
and
dec
cmp
in
lea
cmp
xchg
pop
fwait
or
sbb
cmp
stc
pop
data16
mov
and
or
adc
loopne
rol
push
leave
dec
(bad)
xchg
mov
jmp
add
add
in
fist
pop
mov
lea
dec
pushf
dec
cmp
gs
(bad)
jmp
and
xor
scas
sub
dec
int
jo
push
fcomp
sub
cmp
les
sbb
mov
jmp
rcl
ins
sbb
inc
push
retf
inc
and
fcmovnb
mov
jmp
int3
jg
rol
add
xchg
sub
cmp
cs
pop
sub
adc
outs
int
dec
mov
(bad)
jle
(bad)
clc
jecxz
xor
not
shl
call
and
or
jl
fs
push
push
xchg
sar
push
(bad)
out
mov
ds
xor
add
fs
popa
outs
mov
fsubrp
xchg
jle
mov
cld
mov
sbb
mov
push
cli
sbb
test
mov
inc
popf
mov
xchg
(bad)
out
and
adc
call
mov
adc
std
add
imul
adc
in
cmp
push
xchg
push
lea
mov
call
scas
cmp
cmc
(bad)
xchg
out
shr
leave
leave
hlt
xchg
dec
push
mov
shl
inc
movs
ins
cs
cmps
fs
add
sar
xchg
inc
cmps
dec
not
cmp
and
add
pop
and
ds
movs
mov
jae
enter
jne
pop
fwait
dec
jp
jmp
adc
ror
(bad)
aam
sbb
fsub
dec
std
add
mov
lock
mov
(bad)
mov
and
and
data16
jno
hlt
sbb
js
ss
(bad)
adc
lock
cli
cdq
imul
add
dec
mov
dec
adc
cmps
xchg
mov
cmp
lgs
dec
add
xor
cmp
push
stos
movs
popa
out
and
loopne
in
mov
cdq
mov
or
adc
in
cld
aam
dec
ret
mov
aas
pop
xor
mov
adc
mov
push
mov
pop
daa
jmp
mov
scas
push
jnp
xor
lods
push
lahf
gs
fidiv
push
pop
dec
adc
clc
out
(bad)
std
push
loop
sbb
jnp
cwde
pop
lods
out
out
imul
neg
adc
or
lock
test
jnp
sub
test
sbb
adc
clc
outs
bound
dec
shl
add
mov
xchg
aad
int3
push
sbb
imul
and
cmp
push
repz
sub
mov
loop
stos
dec
popf
neg
sbb
inc
dec
bound
mov
pop
aas
and
stos
adc
adc
lds
adc
ficom
test
cmp
int3
loope
out
jl
aaa
pop
in
cmc
sub
pop
test
retf
or
test
dec
(bad)
lods
xlat
into
in
in
iret
call
adc
or
push
rcl
dec
xlat
aaa
inc
mov
or
mov
push
xor
xchg
or
cmps
or
pop
mov
ja
adc
mov
jo
scas
add
gs
in
pop
xor
mov
xchg
mov
xchg
mov
mov
cld
pushf
inc
jns
jp
or
popa
icebp
pusha
std
je
sbb
xor
repz
push
sar
xor
sub
or
shl
fisttp
push
ds
xor
mul
mov
popa
mov
and
adc
sub
fwait
push
dec
dec
mov
in
add
mov
sti
ins
loope
sahf
fs
mov
xor
iret
ret
lea
(bad)
cmc
jae
in
shr
and
pop
pop
lods
mov
xor
sbb
xor
iret
stos
mov
mov
lods
adc
mov
mov
mov
js
push
stos
pop
sub
(bad)
retf
pop
mov
mov
push
cmps
cli
aas
ja
or
ja
mov
addr16
xlat
(bad)
jle
lods
leave
inc
imul
sahf
jns
and
xor
mov
out
sub
mov
fsubr
enter
in
or
ret
push
xchg
(bad)
xor
inc
jge
xchg
pop
or
stos
rcr
mov
xchg
pop
xchg
jbe
jo
das
ins
or
retf
int3
sub
out
es
xchg
outs
push
rol
push
mov
pop
sub
test
ret
and
pop
mov
push
(bad)
iret
sbb
call
jecxz
add
repnz
xchg
inc
call
enter
stc
ffreep
das
lock
adc
or
sub
mov
ins
bswap
je
pop
adc
jns
fsubr
ja
cdq
or
out
jge
jno
outs
(bad)
jle
inc
cmp
test
test
cmc
pop
jb
xchg
ja
fadd
and
jl
mov
rcl
repz
jmp
pop
loop
and
add
jl
add
mov
movs
faddp
xchg
scas
stc
pop
mov
mov
pop
fldenv
pop
and
nop
jp
ret
mov
xchg
fs
dec
jg
fistp
sbb
cs
adc
pushf
fcom
inc
cmps
push
bnd
movs
lds
out
sti
aam
iret
cs
(bad)
mov
lea
sar
xor
stos
xchg
enter
push
inc
mov
inc
jecxz
iret
jno
mov
call
rcl
adc
shr
mov
repz
add
xchg
adc
cmp
push
jno
not
mov
push
xor
out
cmc
ins
pop
jbe
mov
dec
mov
jb
neg
in
mov
cmp
ins
sbb
xor
bound
sub
and
mov
adc
out
mul
scas
jl
dec
clc
mov
cmp
sbb
in
leave
aas
jle
mov
fidivr
xchg
push
mov
lods
popa
and
ds
ins
inc
retfw
xor
xchg
sub
out
in
pop
adc
and
sub
hlt
adc
jnp
xor
pushf
add
pop
mov
bound
je
sub
inc
add
call
sbb
mov
sub
push
out
sbb
sbb
pop
mov
shl
(bad)
cdq
cmp
pushf
repz
sti
mov
stos
xchg
mov
in
je
dec
mov
js
int3
adc
sub
push
pusha
sbb
out
ins
push
sahf
in
test
mov
mov
leave
cmp
pop
fsubr
ins
adc
out
scas
xchg
dec
mov
mov
jp
mov
outs
pop
adc
data16
retf
bound
mov
imul
and
lods
push
adc
mov
xchg
sar
push
in
xor
movs
retf
lea
test
jmp
push
xor
xchg
rcr
cmp
xor
jmp
sub
dec
inc
in
sahf
pushf
retf
inc
inc
cwde
fld
push
jecxz
retf
popa
xor
mov
inc
pop
jo
sbb
pop
stos
jmp
fbld
push
jns
jmp
and
mov
bound
imul
sub
mov
mov
pop
out
jecxz
add
popf
jmp
and
jp
out
repz
and
xchg
mov
repz
ret
pop
ret
push
mov
scas
lahf
and
inc
or
pop
pop
sbb
imul
jp
test
shl
pusha
xor
mov
push
test
jne
mov
leave
mov
mov
mov
add
fwait
out
xor
inc
add
push
jmp
dec
outs
pop
out
ins
test
sub
daa
js
popf
sub
aas
sbb
pop
shr
xchg
and
(bad)
imul
or
mov
push
ret
mov
inc
in
dec
popf
push
fcomp
cmp
sub
in
jne
sar
and
jb
cmp
call
test
cmp
icebp
(bad)
sbb
cwde
sbb
xadd
mov
arpl
lea
loop
cmps
ins
inc
outs
push
int3
scas
pop
stc
xchg
inc
cmps
fld
push
repnz
call
mov
mov
jns
ret
jns
pop
inc
xchg
jmp
sub
popf
add
das
shr
js
and
pop
push
rcr
dec
js
loopne
mov
xor
dec
(bad)
mov
out
fild
push
ror
outs
mov
cmps
(bad)
stos
aad
ret
sti
fsub
add
iret
inc
popf
ja
sahf
cwde
pop
outs
cmp
int3
xor
xchg
pop
int3
lock
stos
mov
dec
push
sti
push
sub
sbb
or
xor
jge
pop
sahf
push
jbe
or
xchg
aas
stos
(bad)
cli
add
(bad)
push
cld
mov
neg
sar
dec
mov
(bad)
cmp
out
fbstp
lods
int3
repnz
stc
add
push
mov
fwait
jo
daa
jo
jb
jb
dec
inc
loope
js
rcr
push
push
or
dec
push
loope
xchg
daa
mov
ret
or
dec
pop
cs
fnsave
jmp
xchg
div
pushf
pop
mov
jmp
pop
jg
mov
in
stos
or
sub
inc
pop
icebp
scas
scas
mov
xchg
push
pop
les
ss
ret
jne
gs
jne
pop
pop
movs
pop
lock
sbb
xchg
(bad)
add
sbb
jmp
in
rol
add
pop
and
das
(bad)
in
pop
adc
dec
ds
loopne
sbb
push
lea
push
sbb
ds
sbb
in
or
out
out
dec
(bad)
int
jge
add
fwait
jno
inc
fnstenv
fcom
lods
or
jmp
std
and
xor
mov
int3
xchg
adc
and
jne
add
cdq
js
in
xchg
add
pop
das
repz
xchg
nop
add
jl
jb
cmp
je
iret
stos
pusha
imul
repz
sbb
xchg
repnz
test
adc
sar
dec
loopne
inc
in
inc
xor
fdivr
push
repz
cmps
rcl
in
fldenv
adc
int3
sub
data16
and
sbb
loopne
jecxz
ins
sahf
ds
mov
add
push
das
movs
push
out
jg
jno
rol
cdq
out
sbb
imul
xchg
test
test
lock
mov
sahf
test
xlat
jmp
aad
aaa
into
sbb
mov
gs
scas
push
call
addr16
adc
(bad)
push
xchg
nop
push
icebp
ds
retf
xchg
sbb
mov
xchg
pop
mov
mov
popf
jb
sub
cmp
popa
add
sub
repz
bswap
(bad)
mov
pushf
xor
sbb
imul
jmp
mov
test
fwait
adc
xor
xchg
in
pop
adc
and
mov
retf
mov
sub
inc
rcl
dec
jbe
call
push
cs
inc
pop
sbb
and
mov
adc
cmps
inc
mov
leave
jge
pop
mov
loopne
or
sub
scas
add
sbb
xlat
pushf
cld
fnsave
dec
cli
push
push
dec
add
in
call
mov
clc
sub
out
test
jbe
pop
ins
add
pop
cld
int3
add
xchg
inc
add
hlt
xchg
hlt
cmc
mov
or
ins
push
mov
xchg
adc
pop
jbe
call
dec
sub
in
rcl
sub
fmul
xor
jg
fbstp
lds
pop
adc
xor
dec
in
gs
les
xchg
xor
repz
mov
es
mov
push
adc
xchg
and
ins
push
dec
jmp
mov
repnz
enter
mov
enter
(bad)
call
lea
push
aam
inc
add
retf
in
fisub
add
inc
add
aas
in
mov
aam
jmp
cmp
sub
jns
mov
(bad)
out
out
(bad)
test
push
les
push
sbb
inc
movs
pop
ja
lahf
mov
mov
out
push
les
pop
shl
or
jmp
push
mov
sbb
or
mov
scas
pop
mov
(bad)
dec
mov
mul
icebp
fcom
in
mov
std
lock
cdq
pop
leave
fiadd
mov
sbb
inc
push
add
sbb
das
mov
lock
and
fstp
fsub
dec
lods
fs
cwde
xor
lea
ins
retf
xchg
mov
dec
ret
ret
fld
adc
mov
mov
mov
dec
fwait
mov
sub
push
xchg
and
add
push
push
nop
and
sub
(bad)
push
inc
arpl
mov
jp
stc
mov
xor
push
add
in
jo
es
or
(bad)
mov
or
adc
js
in
fst
inc
adc
pop
pop
test
pavgb
inc
in
push
aam
mov
ret
mov
cmp
lods
dec
daa
dec
repz
sti
jns
xchg
pushf
dec
or
inc
movs
int
inc
(bad)
hlt
adc
je
out
imul
or
add
inc
pusha
xor
lds
stc
sysexit
sbb
hlt
xor
jne
pop
mov
stc
xlat
jge
aaa
ds
dec
mov
bound
pop
or
retf
scas
stos
hlt
ja
mov
sub
icebp
dec
jo
sub
loop
adc
push
cmp
push
cmp
ret
sbb
in
cdq
dec
sar
cwde
or
or
xchg
dec
inc
mov
and
(bad)
mov
(bad)
xchg
jp
shl
out
add
cli
inc
repnz
inc
cmps
out
push
and
mov
jbe
sub
mov
inc
or
pop
retf
pop
stos
push
and
je
pop
and
stos
jge
inc
hlt
mov
jbe
add
push
sbb
nop
popa
jmp
inc
pop
pop
enter
ffreep
cmc
ds
pop
cmp
push
and
mov
js
mov
lods
mov
xchg
fcomp
inc
add
jb
and
lahf
xor
ret
push
rol
lahf
fidivr
repz
cmp
fild
pop
xor
cs
mov
test
adc
fs
in
pop
inc
push
popa
sahf
aam
ret
inc
dec
stos
loope
adc
lods
hlt
cmc
jge
mov
cli
fsubr
inc
mov
(bad)
aaa
dec
and
sbb
jne
test
push
mov
ficomp
shl
mov
imul
call
fld
dec
repz
jne
mov
ds
ret
fldenv
(bad)
fldcw
dec
ret
jb
sbb
es
fidivr
sub
add
mov
inc
ret
and
call
xor
xchg
dec
out
lock
and
in
movs
inc
add
dec
cmp
dec
test
mov
xchg
movs
jg
fs
mov
cmc
add
push
dec
and
sbb
mov
outs
push
test
cmc
xor
cmps
or
sbb
jae
lods
enter
sti
mov
ss
xchg
mov
xchg
xor
and
or
sahf
js
push
push
loopne
or
xchg
(bad)
fidiv
(bad)
out
and
push
aad
in
mov
movs
pusha
xchg
(bad)
mov
push
xchg
add
cmp
pop
leave
and
dec
pop
mov
fsub
mov
out
ret
ja
mov
test
sbb
push
adc
sbb
push
or
mov
inc
xchg
es
(bad)
and
loope
cmp
dec
pushf
popf
add
out
int3
pusha
popf
ins
jmp
pusha
sub
outs
cwde
mov
xchg
fwait
rcl
jo
cs
in
cld
push
jno
mov
sbb
repz
dec
repnz
test
in
mov
lods
ret
fimul
jb
ficom
lock
jne
mov
dec
aad
fldcw
push
sub
icebp
push
sub
test
mov
(bad)
fstp
inc
push
mov
fbstp
int3
or
mov
lock
xor
out
jecxz
xchg
push
out
stc
ds
jmp
ret
pop
inc
ror
adc
je
inc
iret
cmp
jns
fisttp
push
popa
dec
clc
or
add
call
(bad)
mov
dec
or
lock
shr
cwde
aaa
mov
aaa
xor
ds
sub
inc
aad
not
sub
inc
xchg
in
xchg
dec
pop
cmp
sbb
test
pusha
mov
movs
lods
nop
cld
cmp
inc
out
test
lds
ret
popa
jbe
jnp
fisubr
pop
dec
loop
sub
add
aaa
dec
repnz
mov
or
pop
retf
stc
es
xor
fsub
add
and
sub
or
jne
icebp
fidiv
test
icebp
and
cmp
test
loope
mov
arpl
mov
pop
loop
sub
fisub
sbb
icebp
ret
cwde
std
stos
inc
out
xchg
aam
scas
cmp
mov
xchg
adc
bound
or
cmps
cmp
and
sub
ror
fld
xchg
and
inc
fmul
fwait
sahf
jmp
outs
add
jp
repnz
movs
call
shl
xchg
nop
sbb
mov
inc
inc
xchg
pop
fiadd
fcomp
aam
adc
out
enter
stos
inc
(bad)
int3
retf
ret
dec
pop
sbb
adc
ret
mov
clc
bound
jae
pop
xor
jg
xlat
adc
pop
cmp
fwait
xchg
scas
push
iret
inc
int3
call
mov
or
xor
daa
pop
xchg
dec
jnp
stos
inc
push
mov
repz
ds
scas
cmp
test
cwde
das
cs
jmp
imul
in
mov
fidiv
repnz
and
sbb
fisub
fild
icebp
adc
popa
dec
pop
dec
punpcklbw
jmp
sahf
adc
add
mov
sub
in
lds
add
inc
call
std
out
stos
(bad)
clc
xchg
jmp
test
pop
or
retf
aam
mov
push
pop
outs
fprem1
cmp
mov
lahf
mov
xchg
psubw
mov
sub
cli
ja
or
enter
sbb
lods
pop
and
mov
jge
test
add
gs
jge
(bad)
jl
out
pop
ret
stc
ret
add
dec
fsubr
dec
mov
mov
je
outs
outs
(bad)
ja
mov
std
push
fcom
enter
int3
cmovae
pop
dec
icebp
sahf
mov
xor
stos
test
cdq
xor
push
push
(bad)
in
xor
mov
xchg
mov
iret
sbb
add
lea
enter
inc
lds
mov
push
push
pop
(bad)
or
pop
mov
inc
ss
pop
fs
dec
test
rcl
inc
call
mov
inc
test
cmp
adc
push
xlat
fstp
mov
repz
jmp
push
fstp
pop
mov
enter
dec
mov
(bad)
adc
mul
fisubr
dec
adc
(bad)
cmp
xor
xchg
cmp
xor
or
xchg
out
sti
cli
mov
jbe
and
and
cmp
mov
(bad)
aam
mov
std
jno
xchg
sahf
stos
push
jbe
jne
(bad)
mov
int3
adc
push
dec
out
inc
jo
(bad)
fndisi(8087
dec
in
aad
mov
ret
cs
popa
les
cmp
adc
xchg
in
add
mov
jecxz
and
mov
mov
data16
xchg
test
test
aaa
xor
ss
shl
push
sub
push
hlt
or
std
in
mov
sub
dec
push
int
xlat
int
cmp
mov
aas
add
out
imul
cmp
mov
lods
pop
push
mov
(bad)
aam
int
ss
sbb
dec
mov
mov
pop
cmps
cdq
int
mov
adc
sub
xchg
jb
mov
inc
add
sahf
pop
inc
ss
push
sub
jge
movs
mov
out
cwde
les
mov
add
mov
dec
retf
jno
pop
pop
mov
inc
xchg
iret
xchg
neg
btc
stos
add
stos
sbb
pop
xchg
mov
add
dec
stos
push
mov
cmc
stos
xor
or
(bad)
sub
xor
pop
push
mov
shl
jg
inc
add
loope
mov
dec
and
cmps
hlt
mov
adc
(bad)
mov
mov
xchg
and
mov
or
not
and
mov
sub
cs
fbstp
xchg
ds
stos
in
ret
mov
xchg
or
pop
sbb
dec
stos
hlt
fsub
pop
dec
pop
out
mov
ss
cmp
cmp
jmp
mov
inc
call
add
mov
cli
dec
shl
add
test
out
repnz
dec
sahf
xchg
jno
out
push
in
lds
test
sub
int
dec
std
xor
out
loopne
mov
push
push
jne
iret
or
adc
add
dec
dec
repnz
xchg
push
push
ret
pop
adc
pop
mov
cmp
sub
add
enter
mov
or
sahf
add
xor
sbb
pop
jmp
mov
stc
mov
cli
test
push
std
push
mov
cwde
shr
es
scas
out
jns
xchg
xor
sti
push
hlt
cmps
cmp
mov
pop
addr16
sub
pushf
adc
pop
mov
lahf
push
push
cli
mov
mov
lahf
inc
cmc
fcomp
es
or
sti
sub
mov
(bad)
sub
adc
inc
movs
or
dec
xchg
sub
aad
movs
scas
push
repz
sbb
xchg
inc
hlt
repz
push
mov
jl
leave
pop
dec
mov
ret
or
mov
jp
xor
stos
iret
icebp
in
jmp
neg
outs
and
int3
xchg
cdq
push
iret
gs
fidiv
inc
lahf
pop
inc
adc
jbe
pushf
sub
dec
inc
cwde
and
xchg
scas
jbe
xchg
in
mov
mov
fwait
xor
jmp
lds
sub
imul
mov
inc
es
pop
mov
(bad)
pop
push
xor
sar
es
aad
aas
pusha
inc
shl
(bad)
push
push
cmp
dec
imul
sbb
add
fsubr
cwde
mov
mov
stc
mov
pop
enter
mov
xchg
or
jne
adc
jns
mov
cs
dec
mov
mov
push
push
sub
jmp
(bad)
(bad)
xor
pop
adc
fcom
push
fwait
lahf
jne
sahf
test
gs
adc
push
in
arpl
stos
and
clc
leave
mov
cmp
adc
sti
rcr
pop
(bad)
jecxz
cmc
mov
fwait
leave
(bad)
daa
add
jns
loop
adc
adc
sbb
hlt
repz
pop
pop
cmp
inc
fstp
mov
cmp
out
sbb
and
(bad)
pusha
loop
rcr
cli
inc
adc
inc
mov
scas
or
jbe
aad
push
jmp
aas
pop
jp
jns
(bad)
pop
movs
nop
jge
xchg
pop
ss
push
(bad)
sti
nop
add
xor
mov
mov
out
jg
and
mov
repz
repz
repnz
ds
xor
popf
sub
jns
dec
xor
ret
push
ret
or
add
in
int3
xchg
push
and
sub
sbb
pop
hlt
sti
mov
sbb
sahf
out
imul
xchg
mov
dec
stos
movs
in
scas
xor
ins
loopne
lock
cdq
push
and
pop
je
outs
repz
jo
scas
retf
outs
mov
mov
retf
cmp
daa
pushf
sub
cmp
dec
shr
jecxz
hlt
in
imul
mov
loop
fstp
std
aas
cmp
inc
cwde
add
lock
ins
and
rol
je
sub
dec
push
jmp
ds
push
adc
retf
adc
push
popf
pop
ret
jbe
(bad)
inc
jbe
cmps
cmp
(bad)
fistp
inc
xchg
aas
cmc
jne
adc
inc
lock
xchg
add
cs
ja
div
cmp
adc
aaa
scas
pop
outs
loopne
ins
pop
pop
or
retf
sbb
call
mov
clc
(bad)
leave
dec
push
leave
bound
stos
neg
mov
out
add
test
push
xchg
shl
imul
popa
lea
jmp
stos
imul
lahf
jne
lea
imul
fwait
jge
inc
adc
repz
mul
jnp
addr16
ficom
int
cdq
aad
pop
mov
repnz
mov
neg
cld
in
fild
cmp
jnp
jno
add
in
std
pop
add
imul
lods
jnp
ret
popf
mov
or
nop
push
jmp
push
mov
int
jcxz
imul
inc
sbb
sub
aam
xor
and
jmp
cmp
mov
add
pop
adc
mov
in
pop
jne
push
lods
dec
pop
mov
adc
add
cmp
mov
and
mov
mov
jmp
fcmovne
or
sar
sahf
mov
xchg
sub
mov
add
rcr
mov
or
in
dec
stc
std
arpl
jmp
pushf
and
xor
add
fidivr
jg
data16
pop
scas
mov
(bad)
cmp
pop
jnp
xchg
mov
mov
int3
or
lods
sub
retf
dec
push
leave
repnz
xchg
push
ds
(bad)
out
sbb
xchg
out
enter
pop
pop
push
gs
js
mov
sub
push
or
pop
jbe
xchg
cmps
dec
mov
gs
xor
and
adc
stos
clc
jmp
mov
adc
sbb
or
mov
pushf
mov
sub
mov
dec
fdiv
in
popa
dec
out
pop
cmp
cld
repnz
and
stos
jbe
sbb
stos
fmul
(bad)
scas
(bad)
nop
mov
cmp
(bad)
hlt
pushf
lds
cmp
in
mov
sbb
cmc
jo
add
addr16
cli
mov
out
cwde
fmul
cmp
lods
mov
cld
mov
adc
rol
cmp
xor
in
loopne
sbb
pop
in
mov
sub
xor
inc
sbb
sub
mov
push
rcr
daa
and
lods
inc
jno
and
stos
mov
aad
xchg
shr
mov
out
jmp
and
inc
mov
or
adc
dec
jle
iret
in
inc
dec
cs
dec
jmp
mov
das
inc
and
inc
jno
repnz
push
movs
test
dec
xor
adc
jae
mov
dec
or
test
fistp
sub
and
mov
add
retf
js
jle
xchg
mov
inc
dec
dec
fimul
js
add
lea
cwde
repz
in
jbe
bound
adc
inc
loop
jb
xchg
addr16
movs
sbb
imul
xor
xchg
push
xchg
outs
xor
fisubr
add
or
(bad)
cli
or
push
xchg
leave
cmp
inc
js
pop
out
rcl
stc
mov
sub
hlt
cmps
addr16
and
jo
push
xchg
test
stos
rol
lds
dec
dec
aam
adc
or
ror
push
sbb
std
cs
sub
in
jge
outs
je
or
pop
sti
pop
dec
adc
push
cmp
loope
test
loopne
movs
xchg
dec
inc
push
jbe
mov
mov
std
add
pop
es
xchg
mov
jge
pop
adc
push
push
lods
gs
inc
ret
int
push
jo
pop
cld
or
in
or
sub
ret
and
mov
(bad)
call
cmps
pop
fdiv
pusha
pop
and
mov
inc
xchg
cld
mov
mov
xchg
scas
and
pop
xchg
ja
aad
xchg
xor
sub
xor
inc
outs
outs
in
stos
pop
pusha
movs
popa
mov
adc
je
out
inc
and
xchg
and
push
jmp
jmp
xchg
or
push
mov
mov
fsubr
in
adc
lods
lods
test
pop
retw
pop
mov
out
retf
fsub
adc
mov
add
mov
dec
add
arpl
ret
mov
push
ins
retf
dec
aaa
xchg
int
pop
mov
(bad)
and
mov
pusha
(bad)
xor
loopne
data16
xor
push
(bad)
repnz
js
sti
jl
fmul
adc
inc
hlt
sbb
js
retf
lock
inc
sbb
dec
sub
js
inc
loopne
shl
mov
mov
adc
push
sar
in
repz
in
mov
out
add
xchg
ror
sbb
xchg
nop
xor
jne
sahf
pop
mov
jmp
arpl
adc
mov
sahf
pushf
in
pop
aaa
mov
xor
js
sbb
cmps
xor
sar
mov
ret
sbb
push
popf
inc
cmp
sbb
ins
fisub
xor
arpl
pop
in
mov
outs
mov
sub
outs
jne
xchg
pushw
repnz
retf
mov
fimul
push
ss
ins
scas
mov
pusha
sbb
scas
ins
std
(bad)
popa
popf
in
(bad)
inc
mov
sbb
data16
test
cmc
add
adc
(bad)
cmp
(bad)
inc
or
or
imul
mov
jo
pop
xor
std
sub
push
jbe
std
cmp
lea
loopne
out
add
shl
(bad)
fs
test
(bad)
sbb
retf
test
call
inc
les
inc
data16
in
jl
pop
mov
jg
mov
rol
and
(bad)
push
out
and
aad
cld
out
inc
or
int3
scas
arpl
inc
repz
mov
adc
adc
add
dec
rcr
fst
outs
mov
sub
movs
loopne
mov
push
jg
mov
push
push
mov
shl
lods
sbb
and
and
adc
jle
rol
loope
es
add
cmc
xchg
es
mov
dec
repz
push
mov
cmc
rcr
adc
aas
sub
jp
ins
pop
rcl
cld
mov
sub
in
add
inc
cmp
pop
pop
les
int3
pop
repz
test
lods
lds
sar
aaa
adc
mov
mov
sub
mov
adc
dec
and
push
xchg
or
popf
add
dec
scas
lahf
jle
cdq
sbb
add
and
mov
sub
fwait
sub
jbe
shl
out
mov
mov
lea
dec
imul
daa
mov
ret
cmps
fmul
cmps
(bad)
adc
movs
arpl
jns
mov
cmps
shl
and
ins
mov
sub
jle
arpl
std
mov
xor
mov
inc
mov
shl
add
inc
iret
sti
pop
xchg
lds
pusha
jno
dec
mov
idiv
xor
sub
test
ucomiss
out
lods
xchg
clc
or
sahf
shl
dec
mov
cmp
dec
les
or
aad
mov
stc
sub
mov
xor
and
push
hlt
stos
and
jmp
clc
punpckhdq
data16
sub
adc
out
mov
loop
sub
push
lahf
nop
cdq
nop
mov
mov
xchg
movs
xor
popa
push
ficomp
mov
sbb
pop
inc
retf
mov
loop
or
imul
pop
add
dec
fucomp
push
in
jle
inc
push
aad
pop
pop
xchg
add
jmp
out
push
(bad)
sti
dec
int
out
mov
xchg
push
and
scas
sbb
stc
add
pop
or
gs
scas
cmp
dec
sar
dec
push
mov
pop
fs
inc
sbb
in
inc
sbb
adc
fild
push
(bad)
mov
xor
adc
out
sbb
in
std
mov
jge
ss
xchg
clc
out
sbb
cmp
in
sbb
retf
jl
fcomp
stos
shl
cld
mov
push
div
push
bnd
xchg
mov
addr16
pop
fucomp
div
push
hlt
lds
push
imul
ins
sub
nop
jmp
lds
cdq
scas
mov
or
mov
call
fnstcw
jnp
mov
mov
loop
xor
aaa
ds
jge
sbb
leave
test
mov
mov
and
sar
dec
xor
mov
sub
in
sbb
mov
sub
sbb
lods
xlat
xor
mov
mov
and
pop
retf
nop
push
add
pop
mov
mov
push
and
push
fs
pop
(bad)
xchg
jmp
jmp
xor
scas
sub
pushf
adc
lahf
test
icebp
and
sbb
cmp
inc
jo
add
shl
sbb
movs
push
add
pop
gs
push
cmp
xor
gs
mov
dec
mov
pop
cs
xor
sar
push
xchg
pusha
xchg
inc
jge
mov
frstor
lea
mov
or
cmp
fstp
aad
add
mov
sbb
fsubp
mov
ficom
mov
inc
mov
add
int
add
sbb
and
push
test
and
xchg
stos
mov
xchg
int
sub
mov
repnz
ds
mov
leave
sbb
xchg
sub
jb
pop
dec
cmp
outs
sahf
ds
fnsave
leave
loop
cmps
jle
leave
and
inc
into
jb
lods
xchg
sar
push
xchg
daa
outs
cmps
dec
mov
xchg
das
imul
jne
ds
mov
sbb
lods
mov
xchg
sbb
xchg
jp
push
mov
aad
push
mov
xchg
or
retf
mov
add
add
xchg
push
mov
aas
into
(bad)
pop
push
push
mov
mov
ja
(bad)
loopne
jae
jmp
dec
in
and
mov
and
dec
test
outs
pop
dec
mov
aaa
stos
pop
xor
movs
mov
push
add
daa
test
fld
xchg
push
test
rcl
mov
add
or
xchg
fadd
xchg
push
mov
sub
pushf
ds
hlt
push
aam
stos
addr16
xor
loop
sar
dec
jg
mov
shl
xchg
and
mov
adc
cli
mov
push
retf
loop
outs
repz
icebp
mov
pop
pop
scas
pop
jge
ss
inc
mov
das
mov
ret
push
sbb
cs
loope
xchg
sti
ret
(bad)
ja
and
inc
or
addr16
imul
or
xor
cli
xchg
pop
ds
dec
mov
ss
sub
push
pop
inc
pop
pop
push
mov
jnp
or
mov
loop
popa
xchg
in
imul
push
sub
xchg
cdq
test
fisttp
pop
ss
inc
clc
sbb
jb
cmp
ror
stos
xor
adc
lahf
stc
sub
add
js
sahf
mov
pop
pop
mov
jp
sub
in
loope
sbb
fs
jo
cmps
mov
jmp
mov
scas
inc
and
pop
rol
add
addr16
xchg
push
out
adc
xchg
mov
pop
push
mov
cmp
lods
pop
or
sub
xor
nop
mov
or
and
pop
dec
cmp
pusha
icebp
jle
mov
aaa
loope
xchg
bound
cmps
icebp
rcl
cmp
push
test
and
call
or
iret
in
sub
jle
leave
call
mov
mov
cld
sbb
cdq
pop
inc
push
xor
outs
nop
les
out
sub
outs
xchg
or
push
jbe
xor
mov
data16
mov
xor
xchg
popf
fsub
fcom
push
outs
mov
call
cmp
sub
lahf
pusha
jae
int
imul
push
xchg
std
into
leave
imul
cwde
dec
rcr
sub
sub
push
movs
shl
inc
lgs
cmp
adc
lock
in
mov
stc
mov
pop
loope
ror
mov
popa
dec
(bad)
jmp
hlt
inc
cmp
into
mov
mov
adc
bound
aaa
pop
pop
inc
(bad)
push
push
adc
xchg
cli
xor
sbb
add
jmp
sar
push
or
sbb
sub
outs
jb
pop
(bad)
mov
jns
sub
or
test
jle
daa
mov
mov
in
sub
aad
stos
test
jle
cld
aam
cli
jmp
sub
cs
mov
jae
and
lods
fidiv
mov
cmps
cwde
fiadd
retf
cmps
inc
xor
mov
cmps
leave
neg
push
adc
xor
push
fisttp
imul
push
mov
inc
clc
jge
fiadd
cdq
fist
and
xor
(bad)
pop
hlt
cmp
pop
daa
mov
(bad)
dec
cmp
dec
jne
cdq
or
ror
xor
xor
xor
clc
jnp
mov
sub
scas
adc
es
lds
push
xchg
jne
or
add
and
sub
fyl2xp1
fwait
int
into
sub
fld
add
mov
push
push
cmps
jbe
dec
jmp
pop
(bad)
aaa
jne
push
jo
rcl
mov
pop
add
mov
in
cmc
mov
into
pop
aam
retf
xchg
out
lea
hlt
loop
sub
test
mov
loope
mov
test
cdq
fs
or
or
inc
bnd
retf
sub
dec
xor
in
push
sahf
jnp
push
out
leave
arpl
mov
sub
ret
sub
lock
stos
jmp
push
popf
aas
rcr
mov
movs
cld
retf
mov
lds
dec
loope
ins
adc
mov
sahf
jmp
push
xchg
mov
mov
dec
into
cld
retf
ds
retf
add
test
adc
daa
(bad)
sub
mov
add
push
jnp
jnp
xor
mov
sbb
dec
icebp
mov
sbb
or
jmp
xor
sbb
mov
jae
aam
add
mov
fld
mov
push
std
inc
mov
mov
sahf
inc
push
cmc
mov
inc
adc
push
lods
cmp
add
and
cli
scas
add
adc
cdq
xlat
jp
fcomi
cmp
in
cmp
je
xchg
cmp
jb
push
jle
mov
or
cmp
aam
jns
jg
pop
lea
leave
push
idiv
add
loopne
sti
inc
enter
bound
shl
test
cdq
xchg
cli
lock
imul
sti
test
mov
xchg
and
mov
ins
xchg
sbb
out
test
jno
cmp
mov
pop
inc
sti
aad
xor
int
out
je
jg
out
mov
adc
push
push
popa
das
(bad)
add
push
outs
cs
call
test
cld
inc
xchg
fwait
fwait
dec
jle
mov
(bad)
in
pop
cmp
das
jle
jae
jbe
ret
outs
add
cmps
ret
ins
jo
inc
hlt
push
in
jecxz
leave
pop
mov
movs
or
or
test
out
xchg
dec
cwde
(bad)
mov
dec
adc
pop
(bad)
movs
adc
hlt
or
ins
mov
xor
mov
add
mov
mov
mov
shl
and
call
push
push
mov
mov
push
cmps
cmps
daa
and
inc
jg
mov
sbb
cmp
push
movs
loope
jg
repz
add
pusha
mov
dec
hlt
int3
adc
das
pop
jle
test
cmp
push
cmc
paddb
add
sbb
shl
xchg
and
dec
mov
mov
div
ins
out
sahf
cmc
xor
mov
enter
lock
xchg
fcmovbe
pop
cmp
pop
sub
jg
cwde
aaa
outs
js
sbb
sub
add
push
xchg
fild
data16
inc
rcr
out
cwde
cmps
stos
(bad)
cmps
sbb
jo
jg
sbb
sbb
mov
pusha
mov
aad
int3
xchg
test
dec
sbb
mul
mov
sbb
in
and
sar
push
xchg
popf
inc
cmp
in
iret
pop
sti
push
push
retf
ret
sbb
ja
push
mov
xchg
inc
leave
cld
cmp
push
in
push
lahf
dec
and
outs
xchg
xchg
or
test
mov
jg
jp
dec
ins
adc
pop
xor
or
sub
add
ds
inc
loope
jno
sub
push
cmp
(bad)
sub
push
push
sbb
mov
xchg
in
or
mov
mov
mov
or
mov
mov
outs
mov
popa
push
dec
xlat
xchg
test
ss
xor
push
and
adc
mov
xchg
cmp
(bad)
enter
shl
dec
mov
les
pushf
pop
rcl
mov
dec
test
push
xchg
mov
push
cmps
jl
mov
sbb
dec
pop
cmp
push
add
inc
cli
add
scas
movs
aas
jns
push
adc
out
or
(bad)
jns
or
sar
(bad)
cmp
inc
push
push
retf
cmp
pop
pop
ss
add
fcomp
fucom
inc
jae
ret
js
mov
rcr
and
jo
sbb
nop
cs
bound
pop
aaa
and
pushf
dec
sub
in
mov
xchg
and
add
fistp
stc
inc
inc
clc
and
pop
push
pop
(bad)
fisttp
push
mov
push
daa
mov
push
cmp
pop
fcomp
pop
sub
aaa
inc
scas
movs
cmp
movs
push
(bad)
inc
dec
jge
stc
xor
adc
jle
ret
dec
mov
mov
scas
retf
pop
cmp
addr16
adc
mov
add
adc
popf
mov
sub
sub
div
aaa
cs
cmps
pop
(bad)
mov
fidiv
loop
bound
mov
dec
movs
add
xor
mov
stos
jnp
je
repnz
dec
or
or
sub
in
aad
pop
pop
dec
xchg
data16
outs
sub
xchg
add
mov
popa
xchg
or
loop
adc
mov
fs
repnz
pop
cli
inc
cli
sub
fstp
lods
pop
in
call
pop
fimul
out
inc
mov
push
cdq
mov
(bad)
loop
adc
pop
movs
mov
cmp
lahf
jp
out
dec
out
pop
sub
mov
fwait
cmp
mov
imul
retf
call
cmps
mov
push
stc
fsubr
or
xlat
or
aam
cmp
imul
jl
outs
cmp
pushf
hlt
fld
dec
repnz
adc
loope
out
retf
ror
and
(bad)
ficom
aas
outs
mov
mov
outs
aas
das
leave
ret
shr
into
cmps
movs
call
fidivr
inc
je
call
mov
inc
mov
call
add
fxch
mov
(bad)
scas
inc
jae
test
add
push
pop
fincstp
cmp
std
es
shl
sbb
fst
jne
add
jb
pop
jae
jns
add
aas
pop
xchg
mov
lods
repz
cld
test
or
stos
mov
aaa
test
in
into
adc
adc
int3
sbb
inc
lods
imul
adc
sub
and
aas
hlt
mov
movs
push
popf
mov
ret
mov
int
mov
shl
xor
lahf
push
and
js
jo
inc
(bad)
sbb
mov
xchg
fadd
mov
movs
pop
jns
lock
clc
pop
xor
push
mov
arpl
lahf
ja
jg
scas
inc
dec
rol
out
gs
dec
sti
in
(bad)
pusha
leave
icebp
sbb
leave
scas
inc
bound
pop
mov
popa
pop
shr
inc
mov
inc
jmp
cmp
or
dec
scas
and
(bad)
jno
fiadd
sbb
inc
nop
cmc
add
xchg
push
fmul
rcr
leave
mov
jno
inc
pusha
sbb
pop
sbb
lock
dec
pop
mov
mov
es
enter
push
(bad)
and
aas
pop
xchg
inc
sar
lahf
sub
mov
cmps
rcr
cmp
loope
arpl
cmp
data16
inc
sub
add
xchg
jae
arpl
addr16
fldenv
mov
cld
dec
mov
rcr
jne
cmc
cmps
add
add
(bad)
into
fimul
movups
xor
out
inc
adc
(bad)
fs
mov
repz
sbb
(bad)
pop
fwait
mov
mov
adc
frndint
fimul
mov
sub
div
mov
and
jns
test
sub
xor
mov
push
out
push
mov
shr
adc
outs
cs
dec
(bad)
push
push
push
mov
mov
stos
ror
xchg
mov
xchg
dec
mov
xchg
xchg
ror
ins
sbb
fst
push
(bad)
sbb
fimul
ds
push
loope
(bad)
mov
es
sub
stc
mov
or
in
stos
inc
mov
jl
jge
xchg
aaa
sbb
mov
retf
les
push
adc
std
in
inc
sub
lods
(bad)
aam
jmp
jg
shr
test
fs
stos
and
punpckhdq
sbb
loop
add
xchg
mov
push
xchg
lods
cmp
ror
or
imul
std
ja
and
cmps
das
fimul
xor
and
stos
fadd
dec
sbb
fs
fstp
ror
out
daa
test
dec
ja
arpl
jae
in
mov
nop
out
xchg
inc
sar
inc
cmp
ret
pop
xor
imul
fiadd
(bad)
jl
cmc
pop
retf
daa
pusha
push
jl
cs
rcr
mov
dec
or
sbb
retf
jns
inc
ret
cs
aam
lahf
lock
push
cli
loope
sub
xor
push
mov
test
jno
daa
mov
inc
ror
inc
xor
mov
dec
stc
add
imul
pop
lea
adc
xchg
mov
bound
and
adc
sub
add
mov
adc
jl
addr16
fstp
in
push
icebp
fsubr
outs
enter
push
out
xchg
xchg
test
std
push
(bad)
add
les
add
aam
scas
ret
xor
arpl
dec
pop
out
or
sbb
(bad)
jl
(bad)
pop
mov
jno
jge
mov
push
push
(bad)
das
push
pop
fwait
out
xchg
xchg
inc
adc
in
mov
inc
stos
cs
jle
xchg
add
ja
shl
mov
arpl
fcomp
xchg
(bad)
test
int
mov
xchg
mov
mov
shl
(bad)
or
inc
daa
rcl
bound
add
xchg
fwait
mov
inc
(bad)
daa
jmp
mov
(bad)
jmp
push
push
(bad)
out
push
fdiv
push
mov
xor
in
add
aas
xchg
and
jne
ret
lods
add
retf
retf
out
test
cs
stc
rcl
movs
das
inc
lea
ins
dec
aad
pop
lock
arpl
leave
inc
aaa
daa
or
cmp
pop
dec
ficomp
ss
pop
dec
cdq
jmp
je
jb
xor
push
test
mov
inc
(bad)
fisub
cmp
xor
pop
inc
jp
mov
cs
xchg
jmp
sub
sbb
mov
dec
pop
sbb
sbb
mov
mov
inc
out
pusha
adc
xor
jns
jg
outs
mov
not
cmp
or
lahf
add
pop
pop
inc
jle
inc
in
cmp
std
aas
pop
ins
scas
and
or
adc
push
aas
scas
push
adc
and
out
inc
popa
scas
sub
xor
adc
pop
ss
outs
xchg
xchg
push
mov
jo
mov
inc
or
mov
add
dec
js
retf
xor
jnp
jmp
cmp
xor
xchg
jmp
xchg
mov
sti
in
or
js
stos
(bad)
xchg
sbb
jo
mov
mov
push
dec
dec
or
xor
dec
xchg
or
fiadd
pop
idiv
movs
mov
and
arpl
add
cmc
mov
outs
into
and
mov
dec
xchg
xor
jo
lea
cmp
cld
mov
test
mov
or
cmp
jmp
cmp
mov
pop
mov
hlt
cs
mov
mov
adc
gs
out
pop
inc
push
mov
out
sub
mov
xchg
push
(bad)
mov
inc
mov
(bad)
mov
mov
or
jg
fs
inc
fcom
adc
mov
pop
fild
jp
dec
or
out
add
ds
int3
mov
inc
inc
xchg
dec
jge
xchg
jge
fldenv
rcr
and
lds
push
pop
scas
cdq
aaa
add
loop
and
inc
ret
adc
mov
das
(bad)
mov
fnsave
movs
bound
xchg
fwait
xchg
or
ds
aaa
xchg
and
sub
pop
mov
lds
mov
lds
mov
int3
loop
jmp
cli
(bad)
jmp
jno
bound
stc
aad
and
or
scas
pop
adc
pop
pop
dec
shl
cmc
iret
out
dec
push
ins
push
mov
in
outs
adc
mov
push
fisubr
adc
mov
shl
leave
retf
sub
outs
retf
add
les
or
jl
sbb
loopne
mov
loop
call
inc
or
popf
scas
lods
fucomp
movs
mov
out
mov
push
repnz
aas
sub
cli
mov
xor
push
cmc
stos
and
pop
lea
and
inc
pushf
fisub
hlt
ins
push
add
stos
inc
mov
data16
outs
pop
movs
xor
das
(bad)
lds
sbb
push
mov
add
and
mov
pop
in
adc
imul
xor
in
out
cli
sub
(bad)
and
pop
mov
repz
dec
pop
add
inc
call
xor
ror
popa
push
mov
aaa
adc
aaa
push
add
inc
cdq
sbb
or
pop
dec
inc
or
scas
sub
daa
mov
jl
sar
in
outs
aaa
leave
sub
test
push
cmp
pop
cmps
mov
fild
sub
popa
add
cli
arpl
cld
push
into
es
pusha
je
pop
xchg
int
jbe
mov
xchg
loop
adc
enter
test
sub
lock
or
call
push
xor
cs
sbb
or
and
test
push
pop
loope
sub
pop
xchg
xchg
stos
std
sbb
inc
mov
ror
push
fbld
addr16
test
jmp
cwde
sub
arpl
mov
push
dec
xchg
xor
ret
xchg
aam
pop
dec
add
sti
and
sub
jne
add
pop
add
(bad)
icebp
push
mov
sub
pop
mov
fisubr
and
inc
add
jne
js
fcomp
dec
cwde
xchg
jb
in
xor
pop
xchg
dec
dec
inc
(bad)
xchg
xlat
ins
stc
dec
into
ins
dec
and
cs
sub
fiadd
xchg
fs
xlat
mov
inc
dec
mov
and
dec
(bad)
in
xor
stos
inc
mov
sbb
mov
xchg
pushf
mov
xchg
fwait
aas
ds
add
mov
fdiv
pop
retf
push
movs
mov
dec
in
lods
jecxz
jp
cmp
jge
outs
in
mov
in
retf
test
mov
cld
adc
mov
std
jnp
neg
push
sbb
imul
repnz
movs
iret
fisubr
xchg
dec
in
xchg
pop
mov
push
int
mov
dec
sub
jnp
ja
sbb
je
xor
jae
fbld
out
bound
aaa
stos
aam
mov
pop
pop
call
fwait
jge
mov
aam
test
int
(bad)
jl
mov
mov
jge
mov
mov
out
fcom
inc
iret
nop
xchg
into
outs
mov
or
cld
cdq
sti
sbb
fimul
and
mov
xchg
stos
callw
call
mov
jle
repnz
xor
push
inc
mov
movs
jo
sbb
jo
pop
lods
push
lahf
pop
cdq
rcr
add
test
xchg
inc
ins
inc
inc
dec
ins
xor
xchg
xor
in
and
push
lock
ret
jg
lahf
jg
(bad)
inc
dec
sub
fmul
ficomp
push
jg
xchg
dec
mov
pop
in
out
pop
stc
dec
or
mov
inc
mov
mov
inc
add
inc
or
out
les
dec
sub
iret
or
push
stos
lods
push
pop
fild
mov
cmp
mov
mov
adc
stc
pop
jnp
aaa
icebp
test
jp
add
inc
and
sub
repnz
cmp
dec
mov
inc
loopne
jns
or
xchg
outs
fist
imul
call
dec
cmp
aaa
xchg
movs
push
xchg
sub
or
outs
and
loope
and
fwait
or
mov
mov
(bad)
xlat
lahf
inc
mov
add
sub
pop
sbb
pop
mov
dec
cld
popf
sub
test
mov
ror
mov
movs
fiadd
mov
jno
outs
adc
mov
retf
or
mov
enter
pop
lods
leave
sbb
int3
inc
xchg
inc
mov
pop
rcl
mov
add
aam
hlt
(bad)
cmps
mov
test
mov
add
js
pop
push
dec
and
xor
mov
push
ja
in
xor
cmp
setl
add
mov
push
push
loopne
push
fs
sahf
sbb
dec
adc
ffree
out
mov
pop
in
or
repnz
or
repnz
pop
repz
mov
stos
xor
hlt
adc
xchg
sahf
call
test
mov
push
or
cwde
out
mov
jmp
push
sbb
lea
call
into
fnsave
je
push
cmps
add
and
out
mov
sbb
jecxz
sbb
(bad)
mov
mov
xor
inc
push
xchg
jg
int3
inc
gs
xchg
jns
pushf
add
inc
sub
in
or
add
test
popa
stos
adc
sub
not
push
div
lahf
mov
ss
out
xor
adc
pushf
retf
not
jae
daa
sbb
sub
rol
stc
adc
xchg
aas
(bad)
loopne
test
or
and
or
(bad)
xchg
jo
mov
call
mov
cmps
repnz
std
or
pop
lahf
add
jmp
bound
cmc
mov
popa
iret
jnp
mov
cdq
(bad)
xchg
or
stos
sbb
in
push
call
shl
repnz
call
cmp
test
xchg
jge
out
fcomp
cmp
sub
call
call
inc
dec
sbb
xlat
test
add
clc
out
repz
test
call
push
aam
or
(bad)
inc
inc
fisubr
adc
lds
push
std
in
mov
xor
fimul
add
push
ins
lea
sti
pusha
(bad)
repz
cmp
jg
lods
mov
cwde
pop
push
in
pop
pop
jl
inc
pop
jp
add
cmps
outs
outs
pop
push
arpl
dec
lock
test
cdq
push
ja
xor
aaa
inc
mov
outs
(bad)
pusha
bound
movs
sbb
enter
stc
xor
pop
into
pop
lock
jg
sbb
xchg
popa
cli
je
cmp
out
std
arpl
fwait
nop
retf
jle
dec
ja
inc
pop
lds
outs
fimul
fptan
jp
mov
sbb
and
ins
or
je
movs
cdq
jnp
sub
es
outs
sub
xchg
loop
jne
and
dec
cmp
ins
dec
and
mov
pop
pop
sbb
cmp
sub
aad
call
stos
cdq
fldcw
mov
cli
call
push
sbb
rol
jecxz
mov
into
rcr
jne
les
mov
shr
mov
(bad)
pop
sar
add
or
movs
push
mov
pop
addr16
push
jecxz
repnz
int3
xor
lahf
(bad)
mov
jmp
idiv
aas
push
sub
loopne
and
pop
mov
inc
mov
fidiv
jns
sbb
mov
shl
xor
xor
mov
pop
jle
cmp
add
pop
dec
jae
jmp
sbb
mov
movs
sub
cmp
int3
inc
test
ror
fisub
ins
call
or
mov
xchg
dec
hlt
inc
mov
mov
cld
adc
xor
cmc
push
icebp
jmp
push
test
mov
pop
xor
lds
push
adc
mov
call
ds
jno
jg
not
dec
outs
cs
in
jb
and
inc
test
mov
xchg
dec
mov
mov
dec
loope
cmp
cmp
retf
inc
xor
clc
pushf
pop
push
cmp
hlt
loopne
lods
and
mov
test
lds
and
xor
shl
mov
mov
sub
dec
shl
jae
xor
mov
mov
or
adc
call
ss
jle
push
xchg
sbb
icebp
cmp
sub
cli
sub
iret
call
pop
mov
in
cmp
jmp
int
test
jl
jo
repnz
shr
int
jnp
(bad)
rsm
jle
aam
sbb
jg
cmc
mov
adc
fcomp
or
test
fadd
hlt
or
mov
push
lea
dec
sar
jecxz
inc
push
into
arpl
(bad)
pusha
jge
out
adc
mov
and
cmps
mov
stos
(bad)
mov
scas
mov
lods
or
nop
sub
pop
mov
xor
push
push
enter
pop
lea
aaa
retf
mov
pop
xchg
dec
add
pop
add
cwde
mov
out
sbb
pushf
or
jmp
into
daa
xchg
sbb
sbb
sbb
mov
movs
data16
push
jmp
mov
adc
retf
and
mov
adc
inc
cs
daa
pop
add
xchg
icebp
jge
mov
mov
cmp
cmp
mov
jle
movs
pop
adc
movs
cmc
push
xor
mov
or
lods
imul
test
iret
add
xor
loope
cld
mov
fwait
pop
adc
mov
xchg
mov
faddp
fwait
outs
repz
pushf
es
fsubr
clc
sub
sub
mov
loop
(bad)
out
lds
sbb
ins
ror
imul
add
cwde
adc
call
in
pop
and
mov
fisubr
push
test
into
pop
arpl
(bad)
bsf
loop
cli
inc
inc
add
inc
stos
add
les
or
test
sahf
dec
jge
movs
cwde
sbb
mov
add
shl
sahf
and
les
ds
lea
xchg
lds
push
arpl
sti
test
pop
(bad)
iret
mov
xchg
das
rol
out
dec
jl
xchg
arpl
js
mov
outs
xchg
cmps
repnz
push
mov
fdiv
adc
bound
popa
out
cld
lds
movs
je
add
retf
add
cmp
test
and
mov
(bad)
mov
dec
pop
das
or
or
push
dec
in
jbe
ss
(bad)
popf
push
jle
and
mov
and
or
jl
(bad)
js
enter
rcl
xor
push
jl
test
arpl
pop
push
enter
dec
mov
mov
jbe
in
mov
jb
call
leave
mov
push
cld
inc
mov
stc
int
pop
jl
repz
or
lea
xor
clc
mov
out
sbb
call
inc
ror
rcl
and
mov
lock
pop
out
jmp
arpl
and
pop
outs
les
dec
retf
cmps
push
push
mov
mov
es
pusha
mov
mov
sbb
bound
mov
cmps
inc
sub
ins
lahf
test
rol
mov
mov
push
push
and
fbstp
mov
push
sbb
sahf
pop
(bad)
adc
sbb
sbb
mov
adc
(bad)
fimul
aam
call
outs
cmp
pop
mov
cmp
out
xor
jns
jl
pop
ins
add
daa
dec
(bad)
fstp
mov
sbb
or
ja
pop
mov
hlt
cli
imul
rcr
mov
mov
sbb
jg
pop
mov
call
iret
and
mov
gs
mov
pusha
jl
inc
pop
out
inc
ja
mov
rol
jmp
push
fwait
xchg
ret
nop
cld
or
ret
mov
fcomi
xor
inc
xchg
mov
call
and
ret
cmp
pop
push
mul
sahf
aas
ret
add
sub
mov
imul
adc
lea
push
mov
jle
mov
sti
jge
mov
push
ins
jle
xor
mov
pop
(bad)
mov
out
push
jo
mov
stos
push
jmp
lock
jno
jg
rcr
jl
sub
fistp
sub
xchg
xlat
adc
adc
ror
xchg
lods
ret
ror
mov
push
pop
xchg
inc
inc
imul
jl
mov
stos
jae
(bad)
inc
nop
or
push
mov
or
xchg
push
sub
and
(bad)
jb
push
(bad)
or
aam
stc
cdq
lods
pop
cmp
pusha
fwait
cli
fimul
fsub
mov
aas
cmp
mov
jmp
dec
popf
mov
test
xchg
stos
test
jbe
dec
test
mov
mov
cmp
fsubp
iret
stos
mov
aaa
pop
or
mov
mov
aas
loopne
int
push
rol
mov
int3
xchg
addr16
movs
pop
lea
cmp
pop
pop
ret
sub
(bad)
in
xchg
jmp
mov
push
adc
fmul
retf
daa
fcom
pusha
mov
lods
popw
(bad)
movs
test
inc
rcr
in
mov
xor
movs
add
dec
dec
repz
dec
pop
adc
icebp
(bad)
aaa
sbb
mov
pop
jecxz
hlt
sub
mov
lods
test
mov
out
sti
sbb
push
imul
int
sbb
push
test
jne
imul
push
and
and
popf
leave
cs
mov
cmp
ins
js
mov
hlt
gs
jbe
inc
pop
mov
ins
and
mov
or
jns
jecxz
test
xlat
ins
inc
mov
fisubr
add
cdq
cdq
mov
jecxz
mov
xchg
enter
add
outs
sbb
cs
push
sbb
jo
mov
jecxz
add
dec
aad
push
adc
ins
or
adc
aam
jl
pop
mov
mov
push
fist
inc
pop
sbb
fisubr
outs
sbb
mov
imul
fist
lock
or
jp
mov
mov
xchg
(bad)
es
rcl
les
xchg
(bad)
jne
add
repnz
ins
cmc
lock
xor
popf
leave
fcmovne
jb
cmp
retf
scas
add
add
sbb
sub
imul
out
xor
mov
mov
cld
or
test
dec
cmc
out
in
mov
data16
or
rol
sti
cmps
mov
adc
lock
dec
or
cmp
push
(bad)
mov
mov
fistp
inc
bound
iret
cdq
sub
jb
out
and
mov
hlt
or
jg
cwde
xchg
cwde
daa
call
push
data16
push
mov
mov
rcl
adc
push
popa
(bad)
outs
adc
and
or
sbb
(bad)
dec
pop
jne
cmp
(bad)
xlat
int3
int
push
(bad)
(bad)
inc
test
lods
pop
jecxz
cdq
aaa
(bad)
idiv
mov
sti
mov
call
int3
xor
add
xchg
mov
test
or
mov
aas
push
lea
mov
js
dec
in
mov
shl
test
inc
sub
xchg
mov
add
stos
add
jbe
cmc
mov
adc
fchs
jg
xchg
sub
aam
pop
repz
pusha
(bad)
push
out
pop
fmul
stos
xchg
cwde
jmp
rol
mov
jo
cmp
sub
adc
add
push
inc
xchg
dec
jp
push
loop
mov
lahf
cmp
in
pop
pop
sub
clc
xchg
sub
(bad)
xchg
inc
movs
shl
iret
lods
xchg
dec
fcmove
or
in
mov
jl
inc
dec
add
int
push
sub
ds
retf
das
add
inc
in
push
fs
repnz
inc
outs
push
popf
pop
sahf
sbb
fneni(8087
popa
sbb
mov
xchg
add
fiadd
xor
push
adc
pop
sbb
sbb
or
xchg
out
daa
imul
jp
loop
xor
add
mov
daa
mov
data16
jmp
jae
cs
mov
dec
jns
cmp
loopne
int
pushf
mov
sbb
arpl
push
pop
mov
fsubr
fs
mov
ror
cs
add
shr
fcomp
scas
jb
imul
stc
mov
shl
push
cmps
imul
aas
je
lds
imul
pop
push
les
call
int3
push
jb
mov
or
les
(bad)
mov
cmp
bound
mov
jge
inc
xor
cmp
push
mov
jp
sbb
js
sub
loope
bnd
lods
lods
add
xchg
and
enter
and
icebp
cld
xor
sbb
mov
sub
mov
fs
jnp
cmp
stc
push
push
cmc
aam
enter
push
cmps
sub
add
enter
call
arpl
ret
jns
loop
inc
outs
out
pop
scas
push
jecxz
retf
in
and
inc
ret
jle
xlat
cdq
jbe
mov
cmp
addr16
fs
movs
(bad)
fst
and
xchg
mov
dec
cmps
sub
dec
adc
in
fs
sbb
cmp
cmp
push
add
or
retf
cmp
pusha
pop
cmc
mov
(bad)
cmp
mov
xchg
xor
mov
in
aam
jbe
or
and
push
cwde
stc
add
lods
cmp
cmp
(bad)
imul
mov
cld
ins
stos
jo
jp
ja
nop
xor
iret
push
call
in
fidivr
jmp
jae
add
cld
call
mov
pop
les
ins
fmul
push
inc
lea
inc
mov
xchg
call
and
ss
ins
ror
add
mov
cmps
fdiv
cwde
cmps
sbb
xchg
xchg
pop
jb
jl
xor
mov
loop
push
and
pop
adc
rcr
adc
iret
data16
dec
cmp
lods
mov
sub
jmp
movs
fld
(bad)
sbb
daa
mov
mov
cmps
adc
int3
add
in
and
not
sub
jbe
lds
js
xor
cmp
pop
movs
mov
pop
scas
jmp
or
sub
out
mov
jecxz
xchg
shufps
pop
scas
pop
add
retf
dec
cwde
jg
aad
mov
and
dec
or
ficomp
jecxz
jmp
in
jle
mov
jns
pop
push
push
scas
ins
sti
push
adc
jg
xchg
sub
cmp
dec
push
ja
data16
sar
sub
call
stc
pop
xor
sbb
fcmovbe
adc
movs
pop
(bad)
add
scas
in
stos
(bad)
nop
(bad)
xchg
and
xor
(bad)
sub
stc
popf
shr
sub
sub
bound
mov
adc
sub
ss
int
scas
inc
cmp
add
xor
movs
pop
pop
mov
retf
sub
sub
lods
(bad)
jge
add
repnz
mov
js
xor
les
dec
xchg
sbb
imul
xchg
and
ret
cmp
sbb
push
cmp
push
dec
xchg
in
or
push
into
in
inc
lods
sbb
retf
mov
sub
mov
ins
je
mov
xor
or
mul
dec
cmp
test
iret
cwde
mov
mov
popf
(bad)
push
fs
(bad)
mov
inc
jle
test
pop
add
ins
les
les
mov
inc
jae
pop
sbb
sub
push
mov
enter
sub
data16
mov
repnz
xor
or
(bad)
pop
icebp
mov
not
jae
push
inc
cmp
mov
retf
mov
icebp
div
jecxz
push
pop
cs
mov
cdq
sar
aas
lods
jecxz
test
add
pop
cld
stos
rcr
mov
hlt
mov
(bad)
mov
je
sahf
repz
mov
in
sub
xchg
push
and
aas
scas
js
movs
nop
sbb
arpl
adc
cwde
push
cdq
xchg
dec
fisubr
xchg
mov
fild
aaa
call
sub
std
or
lds
lods
inc
mov
stc
cmp
push
fsubr
sub
xchg
and
int3
mov
movs
out
bound
push
pushf
stos
xchg
test
mov
cmp
mov
or
pop
inc
jo
ret
leave
push
inc
xor
sar
inc
(bad)
jnp
test
repnz
mov
jmp
and
mov
jo
adc
or
push
push
aam
sub
ss
(bad)
and
int
in
(bad)
es
jae
jnp
pop
pop
iret
add
and
les
mov
lods
xor
lds
mov
fisubr
push
jmp
adc
rol
sti
adc
dec
add
mov
inc
add
push
jl
int3
adc
adc
aas
mov
frstor
popa
clc
inc
retf
xor
add
mov
aaa
xchg
sub
shl
js
xchg
xchg
das
adc
mov
outs
cld
movs
loope
sbb
mov
rcl
(bad)
fbstp
fwait
out
(bad)
daa
inc
shr
push
call
lds
sub
call
(bad)
xor
mov
es
xchg
inc
jmp
scas
sbb
xchg
or
call
inc
xor
in
fwait
push
adc
adc
test
stc
add
mov
xchg
mov
xlat
ins
push
sbb
(bad)
in
and
ja
pop
loope
mov
mov
inc
fnstsw
out
mov
lock
add
loopne
shl
jl
pop
addr16
aaa
loope
push
jbe
dec
push
data16
push
jmp
mov
test
dec
test
and
inc
dec
stos
out
mov
push
dec
jb
mov
test
scas
(bad)
fwait
push
stc
xor
sbb
adc
ins
push
mov
test
pop
jnp
push
push
ret
inc
sbb
xchg
test
mov
(bad)
rcl
data16
or
cmp
jmp
inc
mov
ja
std
jbe
int
push
jae
shr
rcl
sahf
sti
not
sub
pop
sub
sbb
test
sub
adc
or
cmp
fwait
and
and
jmp
xor
idiv
scas
inc
jmp
cmp
lods
enter
xchg
jp
stos
xchg
jo
jbe
pop
cmc
mov
ja
jno
repnz
sbb
ret
(bad)
ins
test
lahf
das
xchg
dec
inc
sar
loop
push
dec
call
add
ins
out
add
jmp
inc
mov
inc
test
add
das
jmp
dec
xchg
inc
add
das
mov
cmp
mov
out
xchg
dec
(bad)
clc
push
mov
fwait
jg
mov
std
add
stos
push
xchg
hlt
or
arpl
sbb
or
sub
call
pop
cmc
mov
dec
std
sub
or
fstp
cmp
in
movs
ins
fwait
mov
pop
shl
neg
jl
popa
sbb
mov
sub
xchg
inc
arpl
outs
inc
shl
inc
call
es
in
scas
aam
xor
sbb
cwde
fsub
popa
push
mov
test
outs
shl
imul
neg
mov
mov
xchg
inc
jae
in
add
test
dec
cmp
shl
pusha
test
cwde
jb
scas
mov
neg
xchg
push
mov
pop
dec
cmp
out
ret
cmp
sub
dec
sbb
mov
push
das
push
mov
stos
cld
mov
add
jmp
dec
std
inc
pop
pop
cmp
ss
std
sti
jmp
rcr
dec
shl
and
int3
mov
dec
add
(bad)
cmc
sbb
enter
iret
xchg
aas
rcr
idiv
mov
or
out
xchg
adc
mov
add
sbb
push
mov
cmc
test
in
sti
jmp
pop
mov
mov
mov
pop
int
xor
dec
stc
xchg
ins
sbb
xchg
addr16
dec
loope
pop
aad
and
lds
or
lea
jg
xchg
push
outs
ins
test
jmp
(bad)
jbe
mov
pushf
xchg
fld
cmp
sbb
mov
rol
imul
push
xor
imul
mov
sub
retf
push
inc
mov
jne
jle
or
push
sar
inc
jne
pop
inc
pop
sbb
cmc
xchg
sar
mov
shr
xor
and
push
fisub
mov
dec
sbb
or
pop
stos
repz
adc
mov
sub
adc
lds
mov
push
loop
fnstsw
mov
push
jp
(bad)
push
sbb
or
clc
out
add
ret
xchg
dec
stos
fisub
xchg
(bad)
mov
sbb
pop
je
inc
sbb
mov
jl
push
or
and
push
imul
sbb
fs
lds
and
fcom
pop
popa
jne
sbb
lea
aam
dec
sbb
into
push
es
xlat
leave
or
pop
stos
add
in
adc
(bad)
cmps
(bad)
hlt
push
jae
cmps
mov
cld
pushf
stos
pop
push
jg
fldenv
pop
or
mov
sbb
or
jecxz
xor
push
mov
or
jae
or
and
pause
inc
cmp
aam
leave
retf
ins
push
mov
jl
in
xlat
ret
pop
dec
jne
ins
in
dec
popa
jmp
add
ins
nop
xor
xor
xchg
mov
adc
cmps
xlat
mov
push
push
mov
or
sbb
mov
jmp
sub
ins
adc
sub
jmp
mov
push
mov
dec
pop
mov
ins
ret
inc
sub
cmc
jl
inc
(bad)
js
inc
mov
xor
jmp
mov
xor
rcl
into
pop
and
popf
pop
cmp
dec
add
and
stos
mov
mov
xchg
sbb
int3
scas
adc
pop
or
jno
fidiv
dec
mov
imul
mov
fld
les
loopne
inc
(bad)
fld
dec
in
or
test
sub
call
mov
pop
inc
ret
data16
sub
adc
je
test
sar
dec
mov
jb
ss
das
inc
aad
movs
pop
xchg
or
and
out
xor
add
cmps
sub
mov
push
sub
loopne
cmp
(bad)
cmps
popf
dec
mov
in
mov
cdq
adc
xor
fwait
mov
adc
in
jl
xor
push
in
enter
jno
adc
push
out
add
arpl
pop
dec
repnz
jno
shr
(bad)
test
in
pop
inc
into
xor
(bad)
out
inc
xor
adc
mov
dec
sub
test
fidivr
ins
xor
push
sub
jmp
or
(bad)
ds
lods
rol
mov
inc
sti
push
icebp
sti
icebp
push
pop
add
or
fstp
mov
cs
xchg
and
xor
out
and
scas
out
mov
mov
xlat
repnz
es
into
repz
lods
inc
mov
cmp
arpl
cmp
pop
sbb
or
or
adc
xchg
in
int
sbb
xlat
cmps
scas
mov
aad
jp
shl
cmps
rcl
loope
test
lea
xor
es
div
arpl
jmp
mov
xchg
stos
dec
dec
data16
mov
in
dec
loopne
pop
pushf
mov
add
add
mov
jae
jns
out
cmp
fidiv
mov
pop
and
ret
mov
cmps
adc
mov
inc
mov
inc
push
jl
call
dec
or
ins
and
cdq
mov
pop
cwde
jl
mov
pop
inc
mov
dec
jp
dec
cmp
jb
(bad)
cmp
int
daa
adc
and
es
sub
stos
popa
mov
xor
clc
mov
mov
adc
adc
mov
imul
cli
daa
ret
pop
xchg
pop
mov
in
push
push
xchg
int
ins
scas
aas
int3
pop
mov
cmp
in
jg
aam
test
ins
add
inc
and
rcr
sbb
sub
mov
xor
sub
cwde
inc
and
cmps
xchg
xlat
rcl
push
xlat
jo
jge
or
bound
or
mov
ficom
scas
and
push
je
push
mov
lds
daa
push
test
sar
adc
mov
pushf
pop
adc
xchg
cmp
cmovge
sub
(bad)
popf
fistp
nop
mov
xlat
pop
sahf
push
fcomp
cmp
retf
inc
aad
movs
jno
mov
in
dec
push
jmp
clc
cmp
and
sub
add
pop
and
lods
enter
icebp
cmp
jmp
dec
mov
cmp
outs
mov
(bad)
pop
jne
imul
cmps
mov
pop
and
push
lahf
jmp
loop
stos
pop
lock
fist
int
and
adc
xor
(bad)
mov
sub
dec
jne
xor
mov
into
lods
and
sahf
shl
iret
jb
fbstp
and
das
into
hlt
(bad)
imul
xor
pop
lds
push
jb
js
(bad)
xor
inc
xor
sub
js
add
and
rcr
sub
rol
ja
xor
mov
(bad)
dec
fsubr
adc
rcl
fsub
lahf
pop
enter
inc
xlat
mov
add
fcom
adc
dec
sbb
mov
sub
mov
mov
sbb
mov
nop
jb
xor
cs
mov
fsubp
sub
mov
jle
inc
test
sar
inc
icebp
inc
dec
(bad)
sahf
adc
out
jp
cmps
dec
jecxz
mov
iret
dec
or
or
mov
sbb
xchg
sub
jl
mov
frstor
jnp
scas
into
not
loope
push
fisttp
fs
cmp
in
jo
pushf
jmp
jmp
or
xchg
icebp
(bad)
mov
cmp
add
xchg
mov
in
fdiv
clc
and
xchg
xchg
adc
pop
cs
jmp
ret
clc
mov
add
out
and
rcl
push
push
ret
inc
pop
jecxz
out
dec
push
inc
aam
xchg
sbb
scas
sbb
ret
inc
and
cwde
xchg
jecxz
gs
jle
pop
xor
cli
scas
arpl
ins
nop
inc
(bad)
imul
jnp
out
pop
push
shl
out
aaa
mov
mov
ss
in
cli
add
pop
in
or
pop
or
pop
or
or
xor
dec
cli
hlt
jp
xor
popf
add
pop
mov
pusha
icebp
test
inc
icebp
in
out
in
and
movs
xchg
adc
fdiv
or
mov
lods
xchg
stc
xor
(bad)
rcl
add
mov
mov
mov
adc
push
push
sub
dec
add
push
(bad)
jl
or
pop
inc
loopne
int
push
out
imul
(bad)
test
xor
cs
jmp
jle
(bad)
inc
push
adc
mov
or
out
sti
inc
and
push
xor
mov
sbb
scas
xor
xchg
sub
xchg
pop
aad
repz
jecxz
inc
ins
jnp
inc
repz
mov
mov
mov
jecxz
cmp
call
icebp
jne
sub
pop
and
pop
loopne
pop
xor
pop
pop
bswap
imul
lea
imul
adc
das
imul
or
outs
inc
and
call
(bad)
jle
mov
or
push
xchg
aas
or
xchg
rol
or
mov
and
retf
daa
adc
repz
push
sbb
inc
or
mov
fnsave
dec
xor
pop
fidiv
out
(bad)
aaa
sbb
popf
xor
mov
ret
rcl
(bad)
sub
test
scas
adc
scas
scas
ins
int3
jge
aaa
add
cs
movs
cmp
mov
aaa
cmps
int3
cmp
xlat
cmc
fwait
inc
add
mov
adc
xor
stos
retf
pop
push
sbb
jp
jge
push
mov
pop
sbb
xchg
cmc
push
cmp
mov
or
nop
(bad)
in
xor
aad
sbb
jg
jg
pushf
cmc
inc
dec
rcr
push
or
mov
lods
sbb
push
aam
dec
dec
inc
jg
les
fild
jnp
adc
sub
shr
add
jb
xchg
mov
ds
inc
pop
cmc
aam
adc
mov
xor
inc
xchg
pop
mov
(bad)
and
jno
xor
pop
cmp
int
cli
or
faddp
pusha
inc
sti
(bad)
cs
sub
xor
add
inc
popa
movlps
jmp
mov
sub
mov
sbb
(bad)
xchg
imul
fcmovnb
add
mov
cld
mov
adc
hlt
or
cmp
scas
loopne
xchg
cdq
ror
mov
dec
retf
pop
mov
pop
and
jns
cmp
popf
leave
inc
pop
in
repnz
and
mov
and
mov
rol
sbb
leave
push
fidivr
lds
aas
cmps
mov
pop
jge
data16
push
push
movs
pop
pop
xor
xchg
dec
inc
adc
jne
and
mov
inc
add
sbb
xor
sahf
dec
add
add
aad
pusha
rol
xor
mov
sub
mov
into
mov
jp
push
xor
pop
ds
xlat
jnp
outs
ja
jle
xchg
ins
outs
xlat
pusha
jg
mov
jp
fs
xchg
out
aas
xchg
cmps
int
push
pusha
sub
or
adc
loopne
pop
dec
jbe
and
dec
test
jge
jmp
mov
xor
aad
jb
stos
and
mov
jno
xchg
(bad)
jl
fcmovu
mov
dec
out
and
add
not
cld
and
ja
cmp
stc
dec
xor
mov
push
adc
lods
(bad)
in
(bad)
test
pop
xchg
mov
repz
add
mov
mov
xchg
retf
or
jge
hlt
xchg
xchg
daa
in
mov
sub
jg
pushf
inc
cmp
add
add
jmp
imul
out
jo
sti
hlt
mov
in
push
xlat
xor
in
cmp
lods
push
or
or
fdivrp
clc
inc
inc
mov
movs
mov
sar
dec
rcr
ss
inc
fcom
fcomp
imul
cmc
push
mov
(bad)
dec
scas
mov
adc
mov
popf
mov
out
jmp
mov
pop
inc
push
pop
mov
stos
add
test
xor
jle
ja
fsubr
mov
out
sbb
dec
cwde
(bad)
adc
mov
test
gs
in
dec
push
mov
call
push
sbb
fsub
dec
fisttp
aam
repnz
mov
push
loope
in
aad
(bad)
mov
sub
sbb
push
push
sar
cld
cs
ret
add
mov
pop
adc
movs
cmp
add
jae
pop
jns
push
pop
mov
scas
stc
pop
jg
int3
fs
pop
in
sti
inc
push
and
adc
mov
inc
dec
dec
mov
jmp
push
cmp
lahf
jle
imul
push
imul
mov
or
pop
scas
xor
inc
das
sub
push
test
adc
mov
xchg
sub
jecxz
aam
cmp
pop
popf
push
sbb
or
cmp
dec
ins
xor
pop
sbb
outs
ficom
inc
xor
jb
inc
nop
das
xchg
inc
scas
add
scas
nop
das
mov
ret
fld
mov
jmp
imul
sub
(bad)
push
cmps
scas
mov
xor
daa
adc
jbe
pxor
jg
sub
push
aas
test
mov
mov
cmp
movs
cmp
dec
repnz
sub
push
clc
cmps
inc
xchg
push
pushf
test
fs
or
cdq
dec
sbb
dec
or
bound
jge
xchg
scas
xchg
ret
mov
out
pusha
jl
add
jbe
cmc
loop
shr
rol
mov
inc
out
cmc
(bad)
loope
and
idiv
add
adc
fidiv
sub
mov
sbb
xchg
inc
ret
mov
and
(bad)
mov
ja
ja
es
mov
push
cmc
add
and
clc
cmp
push
xchg
fiadd
mov
out
sub
pusha
out
daa
std
nop
int3
push
inc
das
and
push
xchg
jmp
lods
cmc
shr
out
sub
repz
xchg
mov
lock
mov
xchg
sbb
mov
shl
out
jg
mov
push
nop
ja
repz
pop
mov
fisubr
push
inc
inc
and
inc
add
pop
mov
xchg
in
or
bound
shr
jno
push
std
push
sub
sbb
inc
sbb
pop
xchg
aas
pop
mov
push
lods
shr
xor
ins
push
ret
add
push
push
cmp
adc
and
test
ret
and
xchg
add
fnstenv
ror
mov
lods
jge
iret
arpl
mov
dec
cmc
sub
fcompp
xchg
jg
or
pop
sub
fwait
pusha
retf
jmp
std
pop
loopne
xor
lods
es
dec
dec
test
xlat
call
je
or
add
rcr
popa
loopne
mov
sbb
shl
mov
xchg
xor
sbb
cld
imul
and
adc
push
movs
ret
inc
pushf
sub
xor
push
pop
inc
call
lahf
aaa
sahf
imul
imul
rcr
mov
(bad)
jmp
push
lahf
(bad)
mov
dec
jae
push
or
push
(bad)
ret
fisubr
neg
jns
or
mov
add
hlt
ret
sub
mov
mov
outs
scas
ins
int
(bad)
loopne
pusha
mov
test
sub
xor
push
jp
dec
in
ret
retf
retf
and
or
push
ror
cmovae
cmp
sub
xchg
sub
mov
fcom
cmp
cmc
imul
push
loopne
imul
xchg
inc
or
cli
adc
dec
add
das
movs
adc
shr
cmp
dec
inc
xor
inc
jecxz
das
push
push
rcr
pop
ror
clc
in
pop
in
cmps
sahf
push
ror
xor
and
pop
sbb
jae
fcomp
mov
cld
or
mov
xchg
bound
icebp
adc
ud2
or
jb
xchg
out
scas
loop
xchg
mov
mov
inc
ins
out
stos
std
adc
xor
(bad)
(bad)
das
xor
cli
pop
mov
push
inc
dec
dec
cmp
(bad)
imul
jmp
inc
hlt
in
out
mov
stos
mov
scas
adc
jo
(bad)
cld
add
cmp
retf
mov
dec
mov
retf
cmps
leave
mov
retf
ja
dec
mov
cld
imul
test
ror
ds
div
push
jb
jge
dec
push
fsub
aam
sub
pop
repz
push
sbb
js
jp
int
cmc
or
and
ficomp
pushf
in
dec
xor
lahf
xchg
or
adc
jbe
xchg
adc
push
sti
inc
test
daa
mov
pop
test
mov
(bad)
nop
je
aas
mov
mov
and
dec
call
dec
xchg
test
(bad)
lahf
or
call
cmp
adc
inc
call
in
pop
mov
hlt
ins
fs
retf
mov
out
mov
sub
lds
ins
icebp
stos
lock
sbb
xor
stos
es
mul
stos
jg
dec
inc
cmp
xchg
test
scas
(bad)
pushf
adc
pop
and
fnstenv
mov
lahf
aad
pop
(bad)
cmp
mov
pop
cmps
aas
cmc
adc
push
adc
and
jne
or
pushf
pop
adc
cld
mov
inc
(bad)
retf
gs
stos
add
aam
nop
jecxz
cmp
ins
jae
push
or
ins
and
cmp
mov
data16
and
lahf
push
je
jecxz
pop
push
push
mov
mov
nop
shr
jl
xor
mov
jmp
fidivr
pushf
fsubr
outs
add
xchg
pop
pop
loope
adc
jmp
inc
scas
imul
or
jge
push
in
mov
sub
mov
sar
enter
gs
pop
jp
mov
cwde
jp
mov
shl
fdivr
add
pop
xchg
clc
mov
mov
and
push
sub
cmp
sub
sahf
adc
pop
mov
mov
sub
and
mov
bound
dec
arpl
imul
push
pop
push
pop
mov
add
jle
fldcw
dec
je
add
dec
mov
clc
into
add
lods
cmc
js
pop
iret
(bad)
ret
pop
push
int
jo
(bad)
xchg
adc
or
nop
pop
dec
popa
lods
aaa
jmp
mov
fstp
adc
not
dec
xor
inc
dec
call
inc
cmc
test
and
pop
dec
push
inc
aad
bndldx
mov
aas
out
cli
mov
inc
cld
rcl
pop
adc
xor
or
cmps
mov
add
dec
imul
mov
inc
mov
shr
add
fbstp
ficom
jno
inc
pop
ret
leave
add
repnz
fcomp
pop
lock
gs
out
movs
inc
cmp
jae
iret
inc
sahf
sbb
movs
mov
add
out
jecxz
in
sub
xchg
jmp
out
stc
inc
loopne
xchg
jmp
aas
dec
mov
sbb
mov
push
adc
dec
test
je
rcr
test
(bad)
adc
mov
test
hlt
mov
pushf
mov
iret
test
inc
repz
jmp
enter
mov
dec
(bad)
ja
pushf
in
cmp
inc
jl
cs
outs
sbb
fidivr
(bad)
aam
jmp
adc
fisub
fsubp
fnstsw
dec
cmp
repnz
fsub
mov
out
sub
popf
mov
dec
(bad)
stos
sub
mov
xchg
aaa
sub
push
test
sbb
mov
fwait
test
push
inc
int
clc
nop
test
mov
mov
push
dec
stos
inc
adc
lds
xor
mov
rcr
and
stos
pop
enter
mov
sbb
loope
(bad)
sub
daa
cmp
and
add
outs
mov
mov
shl
xabort
xchg
in
jae
push
push
les
cmc
cdq
lahf
call
cmc
xchg
sbb
push
dec
jbe
cmc
addr16
sub
xchg
lahf
jo
cwde
inc
in
fmul
rol
in
mov
cmp
sahf
pop
popa
dec
cmps
cli
jne
das
rcr
and
popf
pushf
js
inc
out
fnstenv
aad
inc
or
dec
sub
in
stos
and
jg
sub
mov
cmp
jp
addr16
icebp
cmp
cli
or
retf
(bad)
shl
push
hlt
jle
fld
push
repz
mov
movs
(bad)
(bad)
cld
in
scas
push
sub
cdq
adc
test
or
xor
cmp
mov
out
repz
mov
push
sbb
sbb
imul
and
xor
cmps
pushf
(bad)
push
push
(bad)
add
iret
test
pop
jle
sub
adc
mov
xor
popa
push
mov
nop
fidiv
add
out
aad
and
xor
outs
mov
gs
scas
in
daa
dec
iret
retf
sbb
or
xchg
dec
stos
pop
sub
test
mov
in
dec
cdq
aaa
or
push
pop
push
pusha
add
adc
(bad)
cmps
sub
sbb
test
jle
push
out
xor
pop
sub
aaa
sahf
out
aad
mov
jle
jle
sbb
mov
mov
pop
jle
and
std
in
outs
push
xchg
test
adc
and
jp
loope
or
stos
pushf
hlt
call
ret
dec
fsubrp
adc
inc
xchg
cmps
mov
sbb
mov
mov
inc
inc
and
cld
pushf
cld
out
data16
mov
mov
pop
neg
mov
dec
outs
dec
movd
adc
imul
jnp
ss
inc
inc
loope
xor
scas
mov
xor
sar
sub
call
jmp
mov
inc
stos
cmps
jnp
sbb
cmp
jl
loop
sub
loope
push
das
and
lock
jb
(bad)
fistp
xor
mov
mov
pop
jbe
push
mov
jp
adc
push
add
xor
xor
cmp
pusha
scas
jbe
mov
cmps
mov
cmp
rol
cs
mov
dec
and
xor
mov
nop
dec
and
loopne
jecxz
out
or
dec
stc
fnstcw
popa
cmps
xor
mov
mov
jg
in
bound
sub
jo
xchg
jmp
cdq
jecxz
sub
lods
std
in
mov
add
mov
pop
loopne
mov
outs
cwde
stos
adc
mov
xor
jl
out
aas
loop
xchg
clc
xlat
inc
loop
out
lock
or
lea
test
sub
jo
mov
pop
mov
jne
es
xor
xor
outs
lds
cmc
call
dec
cmps
xchg
js
pop
cwde
outs
lahf
cmp
xor
mul
dec
imul
aaa
adc
and
movs
aas
sbb
inc
loop
or
sar
sub
sub
cmp
cli
and
jg
sbb
pop
sbb
lahf
sbb
sub
xchg
inc
sahf
mov
mov
pushf
and
xchg
mov
jb
dec
stos
aad
inc
adc
and
push
or
sub
fidivr
adc
jns
data16
scas
mov
(bad)
mov
add
es
popf
mov
(bad)
xchg
xchg
paddusw
push
arpl
shr
stos
(bad)
pop
sar
mov
pop
jo
or
cli
jecxz
clc
arpl
(bad)
inc
je
mov
xchg
out
out
mov
ja
mov
dec
mov
es
arpl
add
mov
out
fwait
mov
adc
fdivr
cdq
or
or
imul
jmp
add
aad
aam
push
mov
movs
int3
ins
(bad)
jns
and
mov
mov
dec
aad
sub
repz
es
retf
clc
(bad)
pop
push
sbb
stos
push
fwait
loop
dec
adc
inc
or
mov
sbb
clc
cmp
shr
pop
sbb
popa
loope
(bad)
sub
in
test
push
sub
aam
pusha
int3
ins
ja
xchg
xchg
or
push
in
adc
sbb
sar
cmp
ins
icebp
inc
inc
add
mov
imul
jbe
out
jno
clc
cmp
fst
or
xchg
test
sbb
mov
sbb
test
mov
xchg
adc
neg
push
sbb
cmps
jns
movs
lahf
xor
and
retf
in
xlat
push
fcomp
add
fcom
daa
movs
xchg
jp
or
out
cmp
dec
data16
xor
fidivr
jp
in
push
mov
iret
jmp
mov
test
leave
sti
loope
sahf
or
pop
jno
ja
loopne
or
(bad)
cli
mov
sub
mov
sub
jecxz
or
stc
jge
xlat
inc
pop
or
jno
cmp
push
fnstenv
div
movs
fbstp
nop
(bad)
test
cmp
jae
js
mov
jmp
outs
pop
cmp
mov
push
jecxz
rcl
aas
cmp
ds
mov
cwde
push
push
or
stos
shr
push
sub
sub
and
mov
nop
hlt
adc
jmp
push
inc
dec
cwde
push
fsubrp
and
and
xor
into
add
and
jmp
ja
stos
sub
aad
out
pop
inc
xchg
(bad)
mov
push
repz
shl
call
js
or
mov
stos
inc
xchg
jae
sti
shl
xor
lea
test
mov
js
dec
mov
and
jl
cld
jbe
test
mov
cmps
mov
sbb
retf
test
mov
div
sahf
jnp
sti
push
and
mov
mov
mov
jmp
std
add
sar
jo
jns
cmps
xchg
call
inc
inc
push
ja
not
hlt
ret
das
pop
fisubr
lahf
jnp
adc
xchg
mov
and
dec
pop
(bad)
adc
leave
or
pop
cmp
jg
pop
mov
pop
push
(bad)
jnp
or
rcl
bnd
jmp
jmp
or
jge
inc
loope
fsincos
push
xor
nop
ret
cmp
pusha
mov
mov
xor
fstp
aas
sar
enter
fs
mov
scas
pop
loopne
add
dec
icebp
and
lds
mov
fs
loopne
data16
add
cmp
or
pop
pusha
sbb
cdq
cmp
pop
and
(bad)
mov
clc
pushf
iret
jo
sub
aam
imul
sbb
aas
push
jns
jb
std
or
push
js
or
ja
adc
rol
mov
daa
dec
mov
push
out
imul
ja
pop
jg
xor
movs
aaa
mov
(bad)
xchg
or
ja
out
push
push
clc
loop
lahf
mov
push
lds
inc
jecxz
pusha
mov
push
mov
(bad)
mov
pop
outs
das
je
jmp
aas
add
repz
ins
cmp
ja
push
stos
ret
mov
or
daa
movs
aas
inc
add
cs
sahf
push
adc
dec
sub
pmaddwd
in
ja
pop
sbb
call
(bad)
pop
out
gs
ss
dec
xchg
aas
clc
jne
mov
xchg
stos
push
dec
mov
sti
sub
cmps
stos
imul
jmp
xor
popa
lock
loopne
outs
call
jne
xor
mov
aas
in
pop
jmp
aad
lods
movs
lds
stos
pop
loope
sbb
das
xor
sub
sub
xor
sbb
and
mov
inc
ret
mov
lahf
jbe
movs
mov
ins
aad
and
or
jle
cmp
pushf
xchg
mov
stc
sbb
pusha
xor
push
aam
ss
mov
xchg
imul
(bad)
in
mov
jb
in
es
push
dec
fiadd
mov
pop
jnp
inc
pop
imul
xor
cdq
scas
sub
add
scas
push
stc
adc
pmuludq
cmp
rcl
sbb
adc
cmps
mov
adc
xchg
into
es
lahf
mov
imul
cmc
out
cmp
push
fsub
shl
sahf
mov
ret
loopne
enter
int
mov
jecxz
or
test
mov
ja
inc
aas
mov
adc
sbb
sub
ins
(bad)
push
aaa
dec
jmp
mov
das
mov
sar
cdq
mov
xchg
(bad)
push
adc
loop
mov
or
and
(bad)
adc
hlt
push
movs
stos
sub
and
add
xchg
repnz
add
div
sahf
mov
data16
enter
pop
inc
jmp
push
mov
jp
push
ficom
imul
sub
jecxz
imul
imul
mov
icebp
mov
jnp
xchg
xchg
fsub
sbb
mov
imul
add
sbb
addr16
push
adc
sub
cld
push
out
std
retf
icebp
seta
jl
js
pop
aas
push
mov
cmp
es
or
push
adc
jo
inc
jb
pop
in
pop
add
cmps
(bad)
jnp
inc
lahf
cld
xchg
fcmovu
add
test
push
jp
sub
xor
jmp
loopne
lds
push
pusha
or
enter
ret
cld
ins
test
jmp
inc
aaa
jne
cmp
cli
cmps
jnp
ret
jno
sub
out
lahf
out
jns
xor
sbb
or
shl
push
mov
repnz
imul
mov
push
and
inc
cmp
xchg
leave
sti
cld
and
sbb
enter
fwait
fwait
mov
xchg
push
add
retf
jecxz
cmp
retf
addr16
inc
fucomp
cwde
dec
cmp
cmc
xchg
push
mov
retf
or
mov
into
add
ret
in
dec
adc
push
inc
jmp
add
mov
call
mov
pop
and
adc
inc
cmc
mov
pop
jle
cmps
adc
(bad)
je
push
mov
mov
int3
lock
pop
aad
fld
inc
pop
les
(bad)
je
inc
(bad)
jns
sub
popa
fs
sbb
repnz
sar
out
add
addr16
loope
icebp
adc
frstor
dec
jl
or
cmps
in
fcom
stos
(bad)
clc
and
ins
sbb
stos
adc
cmp
out
fwait
out
mov
jae
add
inc
lahf
push
inc
dec
cli
cld
pop
ret
dec
rcr
xchg
lods
push
test
clc
(bad)
scas
mov
ss
pop
sbb
in
stos
aaa
call
out
sbb
pop
sti
xor
(bad)
fcomp
fisttp
mov
sub
movs
xlat
and
ds
aam
loop
stos
sar
ins
cwde
stos
cdq
dec
loop
cmp
jmp
(bad)
mov
fmul
jae
loop
(bad)
mov
dec
cmp
jne
push
sbb
idiv
rcl
xor
jmp
adc
dec
mov
call
sbb
mov
into
sub
mov
repz
mov
and
test
addr16
mov
js
pop
leave
xor
call
xchg
xchg
(bad)
js
(bad)
sbb
lea
pop
jl
xor
das
fstp
mov
jae
or
cmp
push
sub
pop
or
mov
mov
repz
fisubr
pop
jp
dec
ret
jne
push
sub
stos
push
sbb
xor
mov
and
push
fst
xchg
push
lods
aaa
pop
inc
sub
xchg
mov
movs
adc
outs
lods
adc
jge
push
test
hlt
out
mov
rol
ins
xor
imul
scas
xor
pop
cmp
lock
aas
pop
loop
inc
push
pusha
pushf
sub
rol
cmp
test
fmul
les
add
leave
in
ins
push
movs
(bad)
mov
(bad)
xchg
pop
dec
adc
out
fwait
adc
xor
sub
sub
jae
push
sub
pusha
push
enter
or
mov
sbb
xlat
add
imul
sub
or
sub
stos
int3
xor
xchg
add
jno
dec
hlt
mov
ret
xchg
shl
call
lods
in
jle
cmp
inc
mov
ror
mov
cdq
adc
push
or
and
icebp
mov
test
lods
ja
in
inc
add
lahf
(bad)
add
xchg
lahf
cmp
lods
out
(bad)
js
or
sub
adc
mov
dec
mov
loop
inc
pop
aad
inc
xchg
aad
mov
mov
mov
mov
mov
sub
cdq
mov
push
pop
and
mov
sar
mov
push
int3
lea
out
or
lods
xchg
jl
sub
xchg
inc
push
mov
xchg
repz
fcomp
(bad)
je
adc
adc
pop
cmp
icebp
aaa
cmc
nop
nop
jecxz
imul
clc
(bad)
xchg
mov
push
mov
cld
mov
enter
popa
cmp
icebp
push
adc
mov
in
aas
cmps
push
inc
pop
(bad)
mov
in
mov
dec
ins
shl
mov
and
dec
leave
das
mov
popf
jns
je
stos
push
aad
aam
inc
xor
movs
je
sub
inc
call
ror
ret
push
cmp
push
sahf
lods
mov
mov
cld
jg
inc
bound
addr16
cmp
sbb
stos
cmps
adc
imul
ret
jb
xchg
mov
xchg
mov
fwait
inc
jnp
call
out
add
adc
or
mov
or
xor
sub
call
mov
add
in
into
xor
push
push
xlat
das
int3
es
lods
ret
pop
cli
add
dec
dec
push
dec
popa
mov
fwait
adc
push
xchg
xchg
in
xor
aas
icebp
in
inc
int3
push
add
and
div
mov
mov
sbb
dec
adc
nop
and
jo
in
nop
out
rol
mov
cmp
mov
in
inc
in
enter
fs
test
sub
add
ja
test
xchg
ror
xor
jno
cli
fidiv
pop
arpl
je
mov
cmp
aas
pop
pop
and
jmp
pop
or
and
mov
or
jge
popf
cmc
adc
mov
(bad)
push
fimul
xlat
sub
cmps
imul
mov
or
inc
(bad)
jo
data16
shl
push
inc
cli
sbb
cwde
cmp
(bad)
sbb
int3
lods
inc
(bad)
out
xchg
xchg
mov
mov
xor
stos
jle
lods
pop
(bad)
aam
fdiv
in
jp
ss
lea
mov
push
xor
sub
repnz
jge
frstor
add
sar
pop
test
and
pop
sub
dec
or
mov
pop
mov
inc
lea
aad
sbb
(bad)
jb
add
(bad)
sbb
push
pop
fild
pop
nop
cmp
add
mov
xchg
mov
out
inc
and
mov
and
adc
out
push
mov
jo
ds
cdq
cmps
loop
push
pop
pushf
stos
pop
clc
mov
sbb
or
pop
clc
imul
mov
cld
mov
scas
pop
xchg
mov
xor
inc
mov
adc
out
sub
je
sub
sar
out
loope
cmp
xchg
xor
pop
pop
dec
lods
hlt
popf
mov
(bad)
(bad)
inc
sub
ja
and
jecxz
jns
sti
and
fadd
and
pop
pop
in
mov
mov
ja
les
fwait
xlat
je
std
xchg
push
data16
xchg
inc
ret
repnz
jp
imul
push
(bad)
cld
cmp
fiadd
fisubr
adc
pop
mov
mov
call
inc
push
mov
mov
in
push
stc
push
fmul
mov
loopne
xchg
jg
imul
gs
xchg
inc
mov
inc
jmp
xor
adc
mov
out
lds
push
mov
mov
int3
dec
dec
xor
mov
sub
jnp
or
lds
xchg
aas
mov
mov
pop
(bad)
popa
pop
or
ja
fistp
fisubr
and
sti
out
or
adc
ss
ror
(bad)
dec
jb
dec
retf
rcr
(bad)
ffree
inc
fcom
dec
sar
idiv
ins
outs
jg
jp
xchg
sub
sub
test
test
sub
pop
xchg
sahf
cmps
push
cdq
ja
dec
(bad)
aaa
test
dec
cli
xchg
shr
in
fiadd
jmp
and
inc
sbb
jmp
push
(bad)
mov
sbb
mov
push
mov
xchg
add
xor
enter
push
jle
neg
and
sub
sbb
pushf
jae
jb
shl
xchg
and
push
dec
icebp
test
push
push
jae
xchg
jno
push
retf
xor
and
and
xchg
cs
mov
popf
mov
scas
ins
shl
je
int
jnp
dec
pop
rcl
lock
jge
adc
(bad)
in
imul
outs
mov
mov
ret
mov
or
pusha
(bad)
and
mov
mov
jg
inc
rcl
das
xchg
jmp
jmp
jp
sub
pop
loop
fistp
cld
or
fsubr
cwde
sub
mov
(bad)
dec
mov
daa
call
loop
jae
cwde
popa
pop
xor
xchg
(bad)
xchg
jg
push
movs
push
pop
(bad)
stos
cwde
mov
jp
sahf
jnp
aaa
pop
out
ins
push
jo
arpl
or
and
pop
adc
rcl
add
(bad)
xor
xor
push
aaa
(bad)
(bad)
sub
in
add
or
or
dec
xlat
ficom
push
add
xchg
rol
cmp
push
stc
lods
(bad)
and
(bad)
movs
xor
xor
jecxz
iret
in
push
ret
dec
mov
shr
push
jmp
cli
sub
jle
jne
pop
test
test
xchg
mov
fisttp
ds
jl
ins
imul
xchg
test
aam
std
rol
cmp
es
inc
(bad)
scas
inc
or
sbb
popf
cmp
push
cmp
adc
and
mov
sbb
movs
adc
mov
sub
push
mov
xchg
sub
jns
xchg
test
clc
aad
inc
xchg
aam
icebp
sub
les
and
bound
cmps
and
push
push
je
std
sub
push
dec
jge
dec
je
dec
sbb
mov
or
dec
or
pop
cdq
repz
mov
mov
inc
jle
pop
lahf
fsubr
test
ins
test
shl
or
popf
js
add
cmp
shl
jo
adc
(bad)
loopne
mov
daa
into
imul
add
mov
sbb
inc
or
les
sbb
and
xchg
sub
not
scas
jle
les
push
cmpxchg
sbb
aad
in
pop
loopne
or
adc
jno
or
sub
adc
xor
xor
adc
loopne
fcom
aas
mov
mov
push
movs
xchg
or
fidiv
pop
popa
cmp
or
test
adc
jle
xor
in
cld
or
(bad)
movs
mov
mov
test
mov
sbb
cmp
jbe
sbb
xchg
enter
cmp
push
popf
add
jne
sahf
dec
lods
sahf
mov
pop
pop
dec
and
or
push
sub
jl
push
movs
pushf
push
scas
mov
pushf
xchg
(bad)
hlt
adc
cmps
mov
mov
inc
out
push
or
push
imul
mov
or
jns
cmp
aam
mov
push
mov
sbb
inc
sub
ja
mov
into
jne
out
pushf
jns
and
cmp
neg
test
cmp
ss
popf
lds
imul
jmp
in
clc
dec
or
sbb
xor
pusha
cmp
call
xchg
dec
push
pop
xchg
(bad)
and
gs
inc
iret
movs
scas
xchg
enter
popf
jg
mov
jb
mov
mov
repz
sbb
out
cmp
repnz
dec
repz
push
bound
lock
add
jle
imul
aad
loop
adc
icebp
lahf
inc
jecxz
adc
int3
xchg
push
push
jmp
jnp
into
pop
not
stos
mov
dec
or
jmp
inc
aas
adc
add
in
rcr
jnp
jo
movs
jecxz
push
imul
div
mov
sbb
(bad)
sahf
stc
(bad)
mov
mov
dec
repnz
cmp
dec
cmp
add
lods
pop
xchg
mov
retf
or
jae
push
imul
(bad)
jae
and
jns
mov
mov
fadd
div
daa
(bad)
pop
add
push
hlt
arpl
add
push
pop
cmps
mov
fisttp
xchg
cdq
daa
mov
pusha
cmps
test
or
test
adc
pop
add
cmc
cmp
cmp
inc
not
cli
mov
test
out
in
xor
(bad)
lods
lds
arpl
mov
pop
mov
jl
and
sbb
dec
imul
aas
es
xchg
pop
jo
lock
shl
pop
and
ins
xchg
ficom
cmps
jno
les
shl
enter
loope
xchg
scas
adc
mov
mov
jmp
scas
sbb
mov
lods
daa
xchg
ret
das
xchg
mov
adc
rcr
enter
sbb
inc
push
ja
mov
out
add
xor
dec
test
pop
add
mov
pop
dec
in
mov
add
mov
daa
push
mov
inc
in
test
je
sahf
jae
xchg
jae
jno
or
outs
mov
je
fscale
je
xchg
pushf
lods
mov
in
push
ret
sub
sbb
imul
scas
test
ret
clc
jp
pop
xchg
int
(bad)
lods
cmp
je
fs
cmp
jno
jne
arpl
or
pushf
push
das
aam
je
out
jns
or
iret
mov
outs
mov
fwait
jp
repnz
mov
xchg
push
jbe
(bad)
xor
sbb
sbb
inc
mov
jb
mov
xchg
pushf
fmul
mov
jno
aaa
or
cli
jno
sbb
push
push
addr16
push
test
loopne
add
mov
mov
dec
add
dec
jo
pop
mov
ds
pop
sar
push
enter
mov
xchg
mov
aaa
add
fwait
sbb
retf
shr
push
cmp
neg
dec
sbb
mov
cdq
adc
punpcklbw
mov
xchg
pop
(bad)
push
out
stos
or
and
and
adc
es
mov
pop
add
lahf
push
(bad)
cwde
mov
dec
ins
aas
jmp
inc
mov
mov
add
mov
or
mov
fmul
mov
arpl
cmp
dec
imul
nop
xchg
jmp
mov
sub
ror
pop
jge
aam
cmp
int
or
test
ret
cwde
inc
dec
sub
jmp
(bad)
mov
js
push
fsub
mov
test
jle
mov
stos
mov
mov
stc
(bad)
sahf
or
sti
stos
inc
lods
push
mov
xchg
scas
inc
adc
fwait
rcr
sub
pop
jmp
mov
arpl
and
cmps
inc
outs
cmp
push
out
mov
lods
pop
ror
lahf
jmp
lods
jno
das
popf
cmp
mov
and
out
sub
xchg
jp
or
fs
xchg
mov
fnstenv
jecxz
xchg
pop
daa
and
cmp
popf
popf
mul
cmp
xchg
adc
stos
dec
xor
mov
lahf
pop
push
js
lods
xor
push
mov
or
ins
iret
cwde
mov
mov
lock
test
adc
mov
cmp
mov
sti
mov
outs
or
mov
xchg
sbb
(bad)
fldcw
imul
mov
mov
inc
cmp
mov
shl
or
mov
mov
push
or
test
mov
out
rol
jmp
cmp
sbb
fimul
or
les
int3
xchg
adc
(bad)
mov
loope
lods
jle
adc
mov
pop
sub
mov
mov
mov
mov
xor
sub
lea
lea
xor
mov
xor
xor
(bad)
popf
cmp
mov
cmp
mov
xor
stos
jle
mov
js
hlt
sub
xchg
inc
xor
xchg
mov
inc
push
adc
and
cmp
scas
and
push
jp
xchg
mov
mov
mov
add
sbb
inc
xor
ss
mov
test
in
call
in
sbb
movs
pop
aaa
xor
clc
js
ds
nop
dec
cwde
or
xchg
mov
js
sbb
icebp
mov
xor
xchg
stos
push
outs
jl
lods
xor
push
xchg
retf
lods
mov
adc
inc
jl
fdivr
stos
mov
add
retf
mov
outs
adc
into
xchg
sbb
retf
mov
add
pushf
and
fs
mov
mov
call
xchg
scas
mov
lods
adc
xchg
add
daa
mov
cmp
cmc
test
scas
and
or
lahf
sub
inc
pop
and
xchg
fdiv
scas
ficomp
fild
aad
mov
fsubr
adc
fisttp
add
pop
mov
mov
sbb
sub
call
xchg
or
jle
xchg
xchg
mov
in
push
mov
xchg
(bad)
mov
or
leave
mov
out
xchg
push
sub
loopne
xchg
dec
cmp
in
adc
fst
jmp
and
pusha
sbb
push
pushf
xlat
mov
shr
(bad)
movs
addr16
and
call
loopne
mov
pop
mov
loope
pop
sbb
sbb
jns
and
adc
out
mov
mov
or
psubd
xchg
loope
data16
lods
dec
mov
fist
and
and
jmp
mov
cmp
push
test
fstp
lock
mov
call
mov
mov
ss
cmp
and
sub
and
(bad)
test
dec
push
call
nop
aam
rol
add
lea
ret
les
cmc
stos
xlat
aam
xor
fstp
pop
adc
lods
and
xchg
jnp
sbb
sbb
push
retf
mov
cmp
movs
paddq
sbb
mov
scas
sub
ss
ins
aam
xchg
scas
dec
outs
sbb
xchg
sbb
and
add
mov
out
mov
ret
fst
mov
stos
mov
adc
mov
call
gs
out
push
fcom
fcmove
fwait
push
add
sbb
pushf
lods
mov
mov
fwait
es
call
icebp
rcr
cld
mov
mov
nop
pop
sbb
test
rol
fld1
xor
scas
outs
or
fnstcw
fcmovne
xchg
cwde
outs
sbb
(bad)
mov
mov
fs
cmp
dec
jle
cli
mov
xchg
sub
dec
add
cli
sbb
aam
cmp
cmp
(bad)
retf
mov
xor
or
sbb
add
jmp
ficom
push
jmp
cmp
into
sub
dec
lods
adc
add
mov
shl
rol
push
add
sbb
call
leave
(bad)
bound
pop
and
rcr
xor
mov
mov
and
jno
push
(bad)
or
stos
jge
pusha
ins
or
cs
sub
mov
sar
xor
test
jns
retf
cli
(bad)
mov
mov
jns
dec
test
and
lods
cli
repz
mov
sub
scas
push
movs
mov
je
xor
fild
iret
cmp
mov
dec
rep
sbb
fs
scas
jmp
lahf
adc
jp
adc
dec
cmp
xor
jmp
mov
jl
inc
int
in
cmp
je
(bad)
(bad)
shl
(bad)
dec
push
sub
jo
mov
daa
add
stc
iret
mov
stos
icebp
push
les
mov
jge
sbb
aas
ja
sbb
dec
xor
sub
sub
cmp
sbb
popf
movs
jmp
nop
jo
in
inc
test
out
lea
push
aam
jae
push
loope
xchg
xchg
mov
dec
jmp
or
(bad)
mov
int
out
adc
mov
(bad)
jecxz
ror
test
leave
pop
sbb
repnz
sub
pop
adc
mov
mov
push
inc
int3
test
mov
mov
or
mov
mov
mov
lahf
jp
div
(bad)
adc
das
shr
stos
add
imul
pop
push
fild
repz
mov
fimul
or
mov
xchg
dec
(bad)
into
loope
pop
sub
push
xor
test
xor
push
stos
mov
add
retf
retf
push
and
retf
sub
ds
cmps
mov
mov
cmp
jne
enter
lods
mov
ret
adc
push
icebp
mov
movs
add
dec
mul
sar
jg
pop
push
push
imul
jae
int
in
int
mov
mov
call
xchg
or
xchg
jl
(bad)
in
lock
dec
rcl
mov
push
ret
mov
jl
inc
pusha
xor
shl
xor
call
add
jl
pop
in
dec
dec
fcomp
jp
adc
and
xor
pop
es
adc
cmps
retf
loope
in
test
mov
cmp
lods
sbb
and
push
je
sub
mul
xor
or
je
adc
mov
adc
cmp
scas
adc
outs
dec
adc
sub
mov
ret
inc
cdq
shl
aas
gs
loopne
adc
mov
mov
repnz
stos
outs
push
add
loopne
rol
leave
pop
jne
or
mov
int3
clc
dec
jbe
das
mov
xchg
dec
neg
pop
mov
pop
inc
imul
and
mov
in
or
cmps
push
scas
mov
call
ss
xor
dec
ss
sbb
sbb
cmp
icebp
mov
bound
cmp
inc
call
cmp
pop
add
lods
(bad)
icebp
nop
mov
cmp
(bad)
fld
loope
or
adc
mov
jmp
pop
(bad)
ins
out
je
or
test
ret
jmp
mov
xchg
push
jp
mov
inc
(bad)
hlt
xlat
(bad)
xchg
jle
jo
icebp
loope
jmp
movs
cmp
imul
sahf
(bad)
pusha
imul
sbb
push
mov
sub
add
push
add
(bad)
test
fsub
cmp
adc
mov
out
je
cmp
mov
sub
loopne
inc
cli
jp
sub
or
mov
xor
cmp
je
int3
into
cmp
jecxz
in
ret
mov
lahf
mov
or
test
xor
pushf
outs
leave
inc
adc
ret
add
fisttp
push
popf
jmp
or
(bad)
repnz
iret
mov
repz
add
ins
adc
fcomp
ss
mov
dec
add
dec
(bad)
xchg
ss
(bad)
jp
retf
and
arpl
xchg
push
(bad)
adc
js
cmp
cs
mov
arpl
into
clc
sub
mov
loope
mov
sub
pop
imul
dec
shr
dec
or
jmp
out
ins
and
addr16
and
cmp
ja
out
call
cmp
mov
cmp
cmp
mov
test
shl
mov
mov
xchg
jb
adc
sub
mov
push
mov
jg
jno
pop
cmp
jns
hlt
out
fwait
ret
push
mov
cmc
mov
jle
(bad)
xchg
cmc
test
(bad)
in
push
push
or
inc
ffreep
pusha
fidivr
pop
enter
or
out
data16
das
daa
repz
mov
adc
or
pop
mov
aaa
pop
clc
outs
mov
dec
mov
in
add
jne
mov
xchg
lahf
or
dec
loope
xchg
out
nop
push
and
ja
inc
jmp
xchg
ds
adc
std
cmp
popa
mov
push
and
sub
sbb
stos
push
stc
adc
push
pushf
cli
jns
movs
imul
sub
jo
dec
repz
add
xchg
ja
mov
pop
xor
stos
push
xchg
inc
retf
mov
xchg
mov
add
das
fnstsw
cdq
imul
mov
gs
adc
shr
(bad)
outs
jmp
jp
imul
and
mov
push
inc
pop
call
mov
jmp
and
xchg
pop
clc
(bad)
pop
daa
pushf
jnp
(bad)
adc
test
lods
popf
xchg
ins
mov
or
int3
xchg
dec
pusha
inc
inc
dec
jle
enter
mov
cmp
push
shl
loop
xor
int3
xor
cmps
(bad)
dec
fisttp
lea
psubd
pop
and
cmp
gs
sbb
outs
stos
fistp
jo
or
shl
sbb
sub
ins
(bad)
xlat
cli
mov
jns
mov
movs
dec
mov
mov
scas
cmp
mov
jno
jge
sbb
(bad)
xchg
and
add
mov
jb
add
dec
ret
jmp
and
rep
shl
lds
jb
jne
mov
xchg
pop
clc
xchg
imul
ja
pop
pop
pop
push
sahf
cs
std
test
mov
xchg
lahf
pop
mov
test
pop
jge
mov
test
loopne
and
rcl
out
mov
mov
jo
jg
xor
call
sbb
mov
mov
pop
jno
ss
sbb
les
push
push
stc
pop
ins
les
inc
test
mov
mov
pop
dec
pop
and
out
ds
lods
mov
jmp
in
loop
sbb
mov
call
dec
pop
adc
test
inc
inc
mov
fmul
sub
movs
fistp
(bad)
mov
sti
mov
lods
enter
call
pop
push
popa
dec
sbb
sbb
dec
ret
mov
push
dec
out
(bad)
mov
and
fistp
sub
sbb
(bad)
pop
sbb
inc
jge
sar
pop
xchg
shr
test
cwde
push
mov
ins
push
(bad)
xor
dec
jmp
xchg
jge
imul
call
pushf
loopne
(bad)
sbb
push
inc
xchg
sub
sti
jmp
xor
sbb
jmp
stos
mov
pop
mov
xchg
aam
mov
or
in
adc
pusha
mov
add
ins
inc
int3
pop
or
scas
daa
fnstenv
mov
je
sub
add
dec
jmp
fbld
cmp
xor
imul
and
and
cdq
add
fwait
neg
pop
xchg
repz
mov
push
xor
or
mov
dec
mov
out
sbb
inc
push
sub
jae
cs
inc
ror
sub
loop
loopne
mov
cmp
sbb
int
push
xchg
iret
ficomp
movs
fcom
dec
add
add
cmp
(bad)
dec
sub
mov
retf
xchg
add
sbb
hlt
test
inc
out
cmp
fdivr
xchg
sub
call
dec
sub
cmp
bnd
popa
icebp
popf
mov
cdq
or
add
jnp
repnz
add
sub
jns
xor
xor
pop
mov
mov
stos
xor
mov
fbstp
push
loop
pop
or
pushfw
ins
unpcklps
sub
xchg
pop
jge
pop
mov
retf
adc
jmp
pop
(bad)
mov
cli
xchg
add
scas
aad
push
cmp
les
jbe
jae
mov
mov
sub
xchg
in
(bad)
rol
cwde
push
mov
pusha
mov
xchg
sbb
xor
ret
mov
nop
lea
sti
mov
retf
mov
push
sbb
fist
pop
lock
(bad)
jmp
cmp
pop
jbe
fwait
mov
pusha
pop
bound
stos
mov
aaa
jp
lods
outs
mov
fisub
add
add
cmp
retf
xor
pop
adc
add
loopne
cmp
push
and
xchg
jmp
ds
in
lss
sbb
jnp
pop
pop
fsub
scas
(bad)
cli
pop
push
jg
pop
(bad)
rol
add
pushf
mov
aaa
ror
push
mov
popa
jno
mov
lahf
inc
mov
fwait
movs
mov
push
xlat
mov
push
cmp
test
hlt
xor
push
mov
shl
inc
mov
pop
adc
or
sub
mov
mov
cmps
and
jecxz
xadd
into
ins
mov
sub
xor
push
fld
dec
fld
inc
dec
push
das
in
mov
mov
ins
pop
jns
pop
xchg
or
adc
dec
push
jl
jmp
cmp
adc
xor
std
sub
out
enter
sub
dec
push
jne
(bad)
dec
mul
call
out
ror
fst
inc
test
js
push
push
pop
imul
adc
jg
inc
mov
cld
ffree
sub
jne
das
sbb
(bad)
xchg
daa
inc
arpl
outs
push
inc
imul
sbb
rcr
jbe
xor
popf
outs
xchg
jnp
ja
popa
cwde
push
ret
xor
and
xchg
cmp
sub
test
jl
mov
shl
test
or
mov
jge
fcom
mov
mov
aad
adc
std
and
mov
adc
xor
push
sub
add
adc
aas
clc
xchg
psubw
xchg
xchg
sbb
sub
add
movs
int
(bad)
retf
ss
out
es
call
pop
cmp
inc
popf
mov
push
imul
lds
pop
xchg
inc
scas
dec
jmp
xlat
xchg
mov
push
push
pop
mov
dec
cs
ret
pavgw
pop
sahf
mov
mov
nop
aam
out
ins
ins
scas
sbb
bt
loopne
xor
pop
in
mov
jo
mov
std
sbb
inc
mov
ror
cwde
add
or
dec
or
clc
stos
cld
(bad)
mov
dec
loopne
lods
fbld
xor
xor
ror
in
pop
ja
sub
cld
shl
sub
xchg
pop
imul
sub
cmps
or
idiv
jno
retf
jae
aad
jnp
inc
cmc
adc
cmp
call
cmp
enter
gs
pop
mov
cli
icebp
mov
pop
push
sub
cmp
popa
sbb
sbb
repnz
push
mov
mov
jg
sbb
mov
sbb
dec
movs
loope
cdq
cld
leave
sbb
(bad)
jg
mov
push
clc
adc
push
pop
les
and
or
add
addr16
jmp
xor
xchg
add
loop
sub
pop
test
push
push
dec
mov
cmp
dec
ja
mov
adc
pushf
jnp
pushf
je
pop
repnz
jecxz
pop
inc
mov
adc
call
sahf
jle
jge
rcl
arpl
(bad)
fcomp
repnz
mov
inc
clc
sti
std
sbb
or
iret
sub
inc
into
ror
jp
clc
add
ins
cmp
add
cs
and
xchg
pop
sub
scas
push
lahf
sti
add
sub
outs
test
popa
pop
inc
dec
mov
sub
jnp
mov
(bad)
cmps
adc
cmp
fwait
unpckhps
xchg
retf
or
inc
ins
imul
cwde
add
in
loope
pop
jge
mov
sub
dec
sti
mov
movs
arpl
repz
mov
dec
mov
(bad)
in
cdq
aaa
jmp
ficomp
dec
div
and
push
in
cdq
int3
adc
mov
rcl
sub
sbb
push
dec
out
popf
inc
ins
imul
or
mov
daa
call
shl
hlt
hlt
mov
fmul
lods
test
cli
lds
les
xor
popf
mov
mov
cmp
adc
dec
sub
sub
jecxz
dec
es
call
fcmovne
imul
push
xor
adc
popf
(bad)
out
loop
dec
sub
call
repz
mov
sti
and
iret
rcr
out
cmc
stc
xchg
fwait
sbb
cmps
mov
cmp
push
ret
icebp
jb
ficomp
inc
adc
mov
inc
mov
fwait
imul
jp
mov
iret
mov
sbb
fbstp
mov
push
push
dec
int3
and
addr16
mov
cli
cmps
xor
or
dec
and
mov
sub
inc
jb
stos
add
repnz
retf
jge
bound
jmp
or
dec
ins
cmp
int
xlat
push
pop
fcmove
sbb
dec
inc
test
inc
int3
call
das
mov
je
jmp
sbb
es
mov
cmp
lds
push
retf
leave
mov
xor
mov
hlt
jb
in
sub
and
push
sbb
pusha
in
shl
mov
xor
mov
add
mov
mov
movs
mov
in
sub
sbb
retf
aam
push
or
mov
push
(bad)
imul
mov
test
jb
dec
dec
pop
out
sub
xlat
pop
fs
ret
lock
clc
loop
loopne
cmp
dec
add
add
jmp
cmp
mov
jb
or
bound
dec
test
shl
sar
je
mov
jecxz
es
or
mov
fcmovbe
sbb
push
int3
xchg
mov
push
mov
push
test
cli
push
rcr
or
js
arpl
xchg
fdivr
jae
mov
clc
aas
adc
mov
adc
mov
ror
sub
mov
push
ins
call
xor
push
sub
inc
pop
inc
(bad)
mov
test
cmp
sbb
iret
fwait
adc
cmc
push
sti
cs
imul
in
or
fsubr
mov
jbe
jne
adc
ret
or
or
lods
xchg
xor
mov
lahf
adc
jecxz
fsubr
(bad)
hlt
(bad)
xor
and
sub
adc
sub
sar
xchg
push
sbb
push
in
mov
jne
data16
imul
push
mov
vpmacswd
shr
jnp
and
inc
inc
push
pusha
rol
leave
data16
xor
std
xor
(bad)
xlat
jmp
sahf
or
bound
add
out
pushf
xchg
sbb
lea
or
add
into
ss
or
int3
jp
add
jp
lea
pusha
sbb
add
pop
shl
or
and
dec
sub
stos
hlt
and
repnz
inc
mov
pushf
loopne
sbb
sub
imul
mov
pop
xor
pop
inc
pop
out
and
lea
call
aam
and
les
mov
daa
or
loop
push
inc
retf
dec
das
push
pop
call
jmp
cld
or
xor
xor
or
shr
call
pusha
test
pusha
repz
lahf
fld
push
(bad)
cmp
mov
loope
lods
mov
rcl
outs
xor
fisttp
inc
fist
loop
popa
inc
push
retf
mov
add
add
dec
call
out
inc
scas
aad
js
cmc
cdq
popf
cmp
ins
outs
ret
jns
call
loope
shl
pusha
jbe
inc
ror
sub
or
daa
(bad)
imul
lahf
sbb
(bad)
dec
dec
pop
cs
lea
fcomp
cs
jae
ret
clc
xchg
int
add
push
inc
lods
fs
out
push
repz
jge
mov
js
(bad)
test
cmps
xchg
xchg
mov
jmp
add
(bad)
jle
jb
adc
leave
icebp
mov
dec
cld
ins
and
or
imul
dec
push
sbb
jle
xor
cmp
out
dec
pop
mov
pop
jne
cmp
aad
jge
dec
pop
dec
or
jb
or
mov
fwait
movs
adc
inc
popf
movs
out
jl
pop
adc
sbb
sar
and
pop
stos
int
lea
das
call
add
lds
cmc
fiadd
mov
xlat
lods
sbb
(bad)
or
cmps
mov
movs
mov
mov
sbb
sub
shl
pop
inc
mov
mov
je
je
fld
test
rcr
scas
cli
sub
lods
or
scas
adc
inc
adc
ds
jmp
fistp
and
pop
adc
or
cmp
push
xor
xchg
xchg
out
cmp
xlat
(bad)
fimul
in
(bad)
outs
inc
add
cmp
adc
or
aas
inc
xchg
iret
mov
push
xlat
xchg
or
push
(bad)
imul
sub
out
add
xor
out
loopne
es
(bad)
les
xchg
mov
rcl
mov
hlt
mov
inc
pop
and
mov
stos
sub
jl
ficom
stc
rcl
xor
addr16
out
inc
sbb
bnd
lock
or
sub
test
es
test
xor
push
in
repz
xchg
and
xchg
push
in
es
push
fmul
xor
pop
jg
mov
jecxz
mov
iret
shl
inc
jecxz
stos
into
mov
popa
sbb
and
repnz
jne
xchg
lods
das
in
push
sub
jmp
ror
loop
push
(bad)
in
(bad)
enter
sbb
sbb
in
xor
iret
(bad)
(bad)
mov
mov
adc
pop
push
outs
fwait
jl
call
sbb
pop
pop
out
mov
fcom
xor
mul
daa
pop
hlt
inc
mov
and
push
mov
retf
mov
dec
data16
idiv
adc
adc
sub
fdiv
ds
dec
adc
adc
clc
cs
inc
(bad)
cmp
sbb
mov
aas
addr16
sub
sbb
and
mov
stos
mov
dec
push
jge
in
adc
out
scas
mov
pop
sbb
and
jb
add
adc
aaa
mov
cs
sub
nop
xor
mov
jno
jno
scas
leave
popa
pop
sbb
mov
rol
gs
pop
(bad)
(bad)
popf
adc
sub
cli
out
adc
inc
iret
and
retf
mov
cmp
cmp
add
rcr
push
test
or
lods
or
add
call
mov
mov
mov
stos
adc
(bad)
sar
cmp
out
and
cmp
xor
pop
leave
cmp
gs
cmp
jbe
or
lea
cmp
jnp
mov
fidivr
push
inc
ret
cmps
push
mov
(bad)
lock
inc
pusha
je
retf
aam
xlat
mov
xchg
dec
push
mov
scas
pop
cmp
mov
inc
mov
pop
cld
pop
out
mov
stos
mov
fld
add
cmp
loope
sbb
repnz
pop
xchg
loope
rcl
inc
mov
mov
inc
fmul
fsubr
rcr
or
ss
xchg
jge
cmp
sbb
mov
jle
mov
xor
fiadd
xlat
in
xor
cmp
retf
jbe
jmp
test
jbe
dec
loopne
mov
inc
inc
fsubr
addr16
and
lock
adc
adc
sti
ins
sub
retf
sbb
sub
jns
jne
cmp
outs
mov
frstor
xor
in
pop
lahf
push
or
retf
mov
pop
dec
fstp
lea
xchg
jge
or
and
inc
fwait
stos
daa
pop
jnp
test
jnp
sbb
and
sahf
in
lods
sbb
jne
pop
inc
outs
scas
jmp
mov
out
std
lods
xor
cdq
mov
jl
inc
movs
lock
add
bound
ss
cmp
stos
push
xor
jmp
sbb
ret
pusha
jno
ss
cdq
scas
cmp
sub
ss
jg
aad
aam
xchg
fmul
test
repnz
pusha
or
inc
(bad)
cmp
mov
in
dec
push
in
cmp
sub
pop
dec
xchg
or
aad
push
add
adc
hlt
mov
daa
ins
das
daa
push
sub
sbb
mov
mov
pop
jmp
mov
add
mov
(bad)
movs
test
xchg
jno
mov
or
or
ficom
jns
aam
sub
out
dec
mov
push
mov
cmp
jne
jo
jp
jecxz
jmp
push
push
loopne
mov
stc
into
ror
adc
jecxz
stos
inc
cwde
mov
(bad)
and
mov
out
push
sub
int3
call
add
test
sbb
add
inc
pop
in
inc
cmc
push
mov
xchg
mov
sbb
xor
mov
sub
and
cmp
jb
inc
jmp
sahf
sbb
inc
mov
xlat
in
jbe
hlt
and
cdq
mov
mov
in
jmp
imul
outs
das
mov
movmskps
ja
int
out
clc
sbb
or
inc
cmp
jecxz
call
ret
xchg
or
mov
jne
sub
xchg
mov
mov
or
cs
rol
pop
jae
leave
xchg
and
jns
loope
mov
dec
popf
cwde
leave
imul
je
es
jmp
inc
es
sub
pop
(bad)
push
ja
popa
shl
in
gs
lock
xlat
cs
push
or
bound
dec
fnstenv
push
pop
jmp
add
xchg
retf
pop
and
daa
sbb
mov
sub
into
sti
nop
sbb
fadd
hlt
cmps
popa
cmp
mov
stos
mov
push
data16
sbb
pop
lods
cmps
int3
xchg
imul
sahf
cs
pop
xchg
add
rcr
push
inc
inc
sbb
jae
(bad)
push
jmp
jmp
jg
jno
shr
fmul
lods
ret
sbb
xchg
das
loope
add
retf
add
push
mov
mov
push
dec
sub
cmps
inc
(bad)
sbb
std
in
add
dec
push
pop
cmp
cmc
popf
imul
sub
and
sub
mov
popa
ss
adc
das
retf
icebp
adc
cmc
js
or
mov
sbb
add
cmp
fistp
sar
rol
or
mov
jmp
and
outs
dec
(bad)
cmp
push
push
pop
mov
out
pusha
popf
xor
inc
cdq
mov
add
or
sub
js
inc
into
and
mov
cmp
adc
push
xchg
movs
(bad)
mov
test
data16
adc
add
pop
leave
pop
cmc
xlat
jmp
test
test
and
out
das
mov
clc
ss
out
mov
sahf
mov
mov
(bad)
aam
inc
push
dec
popa
dec
cli
mov
out
adc
stos
nop
sbb
and
imul
test
sbb
jnp
sub
cmp
fwait
out
cmc
cdq
aaa
cmp
inc
nop
push
mov
rol
jl
sbb
imul
into
fisubr
ds
fnstenv
cdq
leave
jmp
fidivr
out
and
scas
xor
cmp
lahf
shl
daa
std
iret
xchg
call
(bad)
mov
ins
xor
movs
xlat
mov
iret
jmp
retf
sub
jae
pop
out
mov
rol
(bad)
sbb
ret
ret
dec
mov
hlt
(bad)
and
inc
enter
ret
test
daa
cmp
xlat
fiadd
ja
push
xchg
mov
stc
outs
test
pusha
push
or
or
jnp
loopne
push
into
int3
and
xor
leave
test
ds
pop
dec
shl
mov
retf
add
adc
enter
xchg
and
xor
mov
int3
mov
pop
xchg
mov
test
xor
adc
sbb
mov
clc
ror
push
jmp
stos
xchg
adc
sahf
xor
add
and
cwde
gs
ficomp
xchg
xor
test
cmp
popf
movs
(bad)
in
lods
test
iret
(bad)
(bad)
sbb
stos
std
xor
dec
gs
mov
lahf
inc
out
adc
push
xchg
cmps
sub
pop
cmp
cmc
stc
mov
scas
in
inc
iret
std
add
cwde
shl
inc
mov
jle
icebp
add
and
fs
cmps
cwde
mov
ret
fcomp
pop
call
(bad)
in
mov
lds
jl
xor
cmps
pop
sub
mov
ficom
xlat
pop
jae
gs
js
or
pop
test
push
mov
mov
dec
lock
xchg
aaa
mov
(bad)
les
sbb
cmp
inc
outs
add
xor
int3
sub
lods
jg
enter
xchg
or
adc
int3
inc
xor
outs
jp
idiv
out
sub
xor
sub
mov
or
cmp
fsubr
inc
sub
bound
imul
jnp
sub
pop
xchg
outs
mov
inc
popf
mov
lock
jl
jo
mov
jnp
jnp
pop
mov
cld
out
add
movs
jno
in
and
scas
ret
std
ins
ret
inc
test
arpl
je
popf
shl
pop
and
sub
add
dec
aaa
pop
fs
fdiv
std
addr16
nop
es
mov
fdiv
mov
cld
adc
gs
stos
pop
push
mov
imul
outs
add
fist
sbb
mov
add
out
and
out
xor
xor
ins
pop
fs
loopne
mov
fdiv
and
sub
movs
pop
push
xchg
repz
fstp
or
in
imul
inc
and
imul
sub
jmp
popa
sbb
aad
call
mov
shl
dec
iret
fstp
mov
call
or
arpl
jne
imul
pushf
inc
adc
outs
cmp
(bad)
fisubr
push
ins
or
loop
mov
ds
rol
inc
mov
les
jle
mov
js
jo
sbb
adc
xchg
push
mov
sbb
(bad)
mov
shl
(bad)
xor
bound
jnp
adc
dec
into
mov
out
data16
popa
in
stos
inc
xchg
push
into
xchg
pushf
lods
mov
cdq
fwait
mov
sbb
jp
cs
ds
pop
scas
cmp
call
push
scas
es
adc
jge
sub
mov
adc
push
jno
int3
daa
push
lock
test
pop
rcl
push
sbb
push
cmps
xchg
test
sub
sti
out
mov
sub
div
xchg
xor
fst
in
daa
hlt
call
js
add
js
mov
fild
fs
or
(bad)
fs
lahf
jb
enter
push
mov
xor
jmp
adc
(bad)
fcomp
jg
push
das
push
mov
jbe
or
jae
xchg
arpl
push
popa
dec
mov
inc
push
fdivr
mov
lods
lock
repz
xchg
pop
xchg
mov
mov
popa
shl
scas
retf
mov
arpl
mov
mov
fisttp
out
bswap
lods
cmps
inc
mov
cmp
dec
lea
in
pop
or
push
push
cmp
dec
test
mov
sbb
ss
js
mov
cli
in
(bad)
out
cmp
ror
jno
or
pop
dec
pop
xchg
into
fsub
adc
data16
shl
movs
shl
mov
test
(bad)
call
xchg
inc
mov
dec
pushf
jp
push
xchg
sub
aas
jae
outs
xor
fdiv
scas
lock
repz
adc
int3
retf
out
pop
cmp
cli
ja
fst
add
sub
cli
ds
pusha
cmp
inc
pop
mov
and
mov
jg
sahf
cdq
out
js
std
xchg
div
outs
inc
dec
add
jns
dec
jecxz
fist
lds
rcr
inc
or
inc
push
lea
xor
and
leave
es
scas
leave
xor
adc
in
push
nop
call
sbb
popa
pop
std
mov
neg
mov
jnp
mov
push
shl
pop
add
in
leave
in
pop
stos
inc
mov
repnz
cmp
gs
dec
clc
add
mov
jle
add
sbb
mov
stc
sub
imul
std
stos
xchg
inc
fisub
jecxz
nop
ret
(bad)
enter
loop
ret
and
sbb
cs
fild
popf
rol
ins
ret
xor
fnstenv
movs
inc
xchg
leave
push
ja
rcr
mov
outs
mov
das
jo
test
aam
pop
inc
mov
jecxz
out
loop
call
adc
pop
(bad)
popf
sub
xchg
inc
rcl
ja
gs
cmp
push
(bad)
jno
in
sub
out
xchg
ins
dec
cmp
mov
and
or
push
stc
xchg
test
leave
(bad)
sti
jge
xchg
pop
xor
jo
aaa
push
mov
fcmovne
lock
pop
(bad)
loope
jmp
sbb
cmps
in
inc
fmul
dec
pop
xor
iret
ds
inc
dec
xor
inc
inc
mov
stos
cld
fwait
clc
pop
bound
add
(bad)
mov
jbe
adc
push
inc
xchg
popf
aas
xor
and
js
mov
or
retf
push
(bad)
xchg
pop
xor
clc
or
or
push
xchg
aad
mov
xchg
bnd
int
mov
cs
pop
stc
and
pushf
test
inc
xchg
imul
das
mov
and
fwait
pop
pop
sub
inc
retf
push
lahf
pop
in
and
adc
out
repnz
sub
mov
mov
jmp
mov
lods
push
pop
dec
leave
fwait
pop
jmp
xchg
jne
sbb
mov
imul
push
mov
push
push
or
cmp
nop
stos
test
loopne
loop
push
fdiv
(bad)
jmp
out
cmp
sbb
bswap
into
stos
and
xor
jb
shl
mov
cmp
mov
inc
ds
call
out
xor
ins
sub
ss
jnp
dec
adc
sahf
(bad)
hlt
frstor
int
das
and
test
(bad)
in
push
adc
jae
movzx
xchg
into
mov
pop
stos
push
jno
xor
ficom
nop
ret
cmps
cmps
xor
push
mov
out
push
mov
jne
test
and
dec
div
xor
or
test
inc
lods
and
pop
ins
push
sub
rol
mov
lock
sbb
sub
add
out
mov
adc
xchg
xchg
in
shl
rcr
cmp
or
popf
mov
pop
mov
mov
cmp
and
lods
sub
inc
or
mov
mov
shl
ja
rcr
add
dec
xor
ror
jecxz
dec
dec
fs
mov
sbb
mov
repz
and
les
dec
mov
xchg
jno
das
dec
and
lods
clc
fcomp
jno
xor
call
xlat
addr16
lahf
jne
mov
lods
fdivp
frstor
fs
push
mov
mov
dec
imul
pop
and
retf
es
scas
imul
lahf
mov
call
out
mov
pop
sbb
jl
std
mov
push
push
das
je
mov
sbb
scas
push
hlt
not
mov
loopne
in
clc
inc
ds
jae
loop
cmp
ja
and
ds
aam
imul
xchg
jnp
sbb
jl
xchg
jno
and
pop
shr
inc
sbb
cs
inc
imul
dec
push
jno
add
retf
nop
jge
test
ds
fmulp
cdq
xor
push
or
call
lea
push
jecxz
pop
mov
je
mov
add
(bad)
imul
mov
or
xchg
mov
cmps
sbb
jmp
call
jbe
jl
sbb
fst
or
pop
jg
or
mov
cmps
lods
dec
inc
lahf
add
rcl
les
loop
fwait
dec
sub
jb
ss
mov
pop
push
(bad)
pop
sbb
ins
cdq
mov
cld
je
xchg
enter
(bad)
cmc
adc
lahf
lds
and
lods
test
test
js
les
loop
ficomp
in
fldenv
je
int3
jnp
dec
sbb
lds
dec
std
clc
lods
je
pop
ret
outs
test
(bad)
push
shr
mov
int
ins
fcomi
or
in
push
pop
cmps
cmp
xor
shl
add
mov
aaa
mov
jns
xor
mov
or
sbb
fbstp
dec
jle
jl
push
(bad)
mov
test
jge
cs
push
in
mov
popf
enter
cld
xor
sbb
mov
scas
xor
cmps
std
std
add
fwait
dec
aam
(bad)
sub
std
cmps
daa
sbb
lock
outs
xor
jge
mov
int
fstp
fild
int3
cwde
jo
add
pop
inc
repz
fsub
int3
icebp
and
add
mov
retf
stc
mov
daa
in
outs
hlt
mov
adc
clc
or
scas
mov
adc
lds
mov
mov
push
pop
dec
sar
fcom
in
call
sub
retf
dec
xor
(bad)
mov
push
mov
xor
lods
(bad)
mov
in
fisttp
gs
call
ja
xchg
out
jmp
and
cmp
dec
cli
pusha
adc
cld
push
add
cld
fisttp
mov
sahf
scas
(bad)
loope
and
mov
and
loop
xor
push
dec
mov
adc
enter
dec
cmp
add
(bad)
cmp
adc
adc
ret
xor
xlat
mov
add
ret
lock
lods
(bad)
scas
push
stos
mov
pop
cmp
leave
pushf
jnp
scas
adc
or
sbb
pushf
sbb
inc
aaa
loopne
mov
cmp
pop
mov
popf
int
sar
inc
sub
and
movs
std
es
adc
inc
pop
movs
mov
mov
push
dec
test
test
xchg
or
xchg
bound
sub
iret
mov
jp
mov
inc
add
xor
push
or
test
inc
sub
jne
stos
loop
xor
or
and
dec
jnp
fldcw
lock
ins
shr
ins
add
test
adc
popa
xchg
pop
popa
ins
retf
cdq
pusha
call
jmp
(bad)
ins
(bad)
dec
and
cmp
es
fst
and
xor
pop
loope
data16
mov
cmps
fwait
xor
and
repnz
jl
icebp
iret
mov
(bad)
mov
imul
shl
shl
sbb
xchg
mov
ds
jp
pop
ds
push
fisub
fwait
(bad)
sub
jl
aaa
xor
adc
adc
out
xor
or
inc
icebp
or
add
scas
pop
pop
fs
jecxz
xchg
push
daa
cmp
stos
xchg
int3
jge
in
rol
sahf
lock
pushf
inc
jnp
pusha
sbb
or
fmul
retf
int
loope
mov
or
ins
mov
add
sbb
dec
sub
or
ret
xor
fdiv
mov
jo
call
xor
pusha
sub
sbb
out
sbb
jge
fidivr
adc
fwait
cli
inc
call
mov
ret
or
pusha
icebp
mov
dec
mov
mov
sar
jmp
sub
daa
adc
loopne
push
out
scas
sbb
int3
inc
repz
push
adc
lds
pop
xlat
xor
jne
shr
mov
ret
imul
push
dec
add
jmp
and
das
sub
(bad)
mov
adc
or
add
mov
lea
or
scas
lock
xor
pop
push
imul
sbb
out
xchg
or
mov
xchg
jb
add
retf
xlat
test
and
mov
ficom
pmullw
arpl
dec
repnz
inc
adc
stc
aaa
(bad)
repz
mov
push
mov
call
xor
mov
xchg
ss
iret
mov
mov
push
cmp
mov
and
push
sbb
pop
inc
add
es
sti
iret
inc
xor
xor
sahf
std
ret
ins
clc
mov
jo
fiadd
push
inc
cmp
sar
stos
xchg
ins
lock
add
ds
mov
add
mov
inc
cwde
or
out
cmp
ds
bound
sub
cmp
pop
mov
inc
rol
dec
iret
dec
cwde
shr
push
lds
fwait
cmps
push
jmp
into
xchg
pusha
mov
lahf
sbb
stos
mov
bound
xor
mov
lock
out
inc
int
ret
stos
cmp
fidivr
mov
cmps
cmp
test
xchg
sbb
xchg
add
adc
inc
in
jl
and
jl
xchg
xchg
sti
pop
mov
das
mov
jmp
popa
sub
sahf
pop
xchg
xor
pop
dec
enter
das
mov
mov
aaa
xchg
dec
or
sar
pop
rcr
jno
and
inc
test
push
fwait
dec
pop
and
(bad)
pop
ins
or
out
push
sbb
sub
cmps
rcr
dec
inc
lods
pop
cwde
mov
popf
xchg
iret
scas
(bad)
popa
pop
push
jae
sar
mov
mov
bound
loopne
or
push
jmp
sub
or
or
jge
jle
push
daa
add
mov
stc
xchg
out
cld
xchg
mov
test
sbb
xchg
popa
sbb
dec
xrelease
rol
in
mov
out
xchg
out
adc
arpl
or
push
dec
jl
dec
push
jp
loopne
and
fiadd
shr
mov
dec
stos
sar
jo
mov
(bad)
push
jno
inc
clc
add
out
dec
cmp
mov
xchg
inc
mov
jl
ds
fdiv
test
out
mov
xlat
or
or
xor
data16
fadd
mov
and
add
scas
sbb
sub
dec
call
sahf
mov
popf
dec
in
ins
inc
xchg
mov
jnp
div
sub
sti
stos
inc
aas
mov
imul
mov
push
mov
loopne
xor
sbb
aaa
clc
jg
mov
adc
daa
retf
rcl
fwait
loopne
cmp
cmp
les
add
lds
jo
repnz
aas
ins
xlat
jmp
(bad)
cmc
(bad)
icebp
sti
imul
or
jg
xor
aas
lds
int3
add
mov
stos
jmp
cmp
dec
in
xchg
mov
jge
sbb
ret
mov
ds
pop
ror
pop
jmp
sar
jnp
and
mov
push
mov
inc
mov
sbb
sbb
inc
nop
push
mov
cmp
mov
dec
test
aad
shl
bndldx
push
call
(bad)
out
inc
push
jmp
std
sar
jb
call
sub
repnz
push
mov
fadd
or
pusha
pop
push
add
ss
imul
adc
push
(bad)
or
retf
add
mov
adc
mov
sub
lods
loop
bound
icebp
and
gs
and
bound
neg
cmp
jns
adc
cmp
test
pop
add
ss
inc
or
pop
lahf
std
jge
inc
loopne
dec
inc
dec
jbe
dec
in
adc
jnp
push
xor
sbb
enter
mov
cld
mov
inc
jbe
or
test
ror
pop
aaa
or
add
push
mov
mov
das
mov
scas
int3
cmp
inc
push
sbb
pop
add
or
mov
inc
mov
add
push
in
mov
sbb
in
iret
int
mov
je
add
jo
fsubr
loope
dec
jmp
cmp
shl
shl
dec
icebp
xor
sub
das
mov
ja
aas
ja
add
jl
mov
dec
ss
push
js
adc
inc
nop
int
stc
jns
adc
push
xchg
loopne
xor
es
ins
jmp
jae
cmps
clc
popf
mov
xor
fld
fs
int3
add
push
xchg
(bad)
cmp
test
jmp
inc
push
fisttp
ja
lods
scas
fnstsw
and
mov
loop
sub
shr
and
or
dec
cdq
sub
shl
jmp
adc
inc
rcr
mov
and
xor
jle
push
or
xchg
shl
push
shr
cdq
jle
mov
sub
popf
mov
and
push
xor
xchg
mov
test
sub
adc
fiadd
test
pop
sbb
dec
jo
cmps
mov
dec
inc
jo
jp
push
jae
arpl
sub
sub
pop
test
mov
jbe
gs
outs
xor
lods
push
adc
int
xor
adc
push
cmp
dec
mov
xchg
mov
cmp
pop
adc
and
pop
add
push
test
inc
xchg
mov
add
out
repnz
retf
or
and
mov
cmps
and
repnz
xchg
xor
push
lds
mov
mov
enter
movs
push
xchg
xor
movs
pop
test
mov
mov
or
push
mov
push
enter
jns
mov
mov
pop
cmp
sub
mov
in
stos
ds
dec
test
mov
mov
push
jne
pop
mov
push
jmpw
and
xchg
(bad)
mov
bound
or
scas
jne
or
jg
adc
cmc
neg
mov
jp
call
pop
or
ja
sahf
inc
mov
sbb
xchg
cmp
jo
(bad)
mov
(bad)
pop
adc
inc
fidivr
sbb
fs
sbb
dec
add
mov
cdq
pop
dec
mov
xchg
ins
sbb
push
dec
js
ror
sbb
(bad)
and
xchg
push
mov
mov
xchg
xchg
fs
ins
loope
mov
pop
pushf
push
cmp
ret
pop
jmp
mov
daa
jne
(bad)
cld
jmp
outs
fdiv
mov
sub
out
push
jo
stos
add
adc
cld
mov
adc
cmp
xor
dec
cld
div
mov
and
(bad)
gs
shl
sbb
jbe
mov
icebp
mov
pop
jae
push
aad
pop
data16
jge
add
movs
test
shr
sub
xchg
jp
neg
push
test
cs
ja
inc
movs
jmp
(bad)
cwde
cdq
push
dec
cmp
dec
cmp
aaa
mov
sub
mov
xchg
mov
mov
fmul
into
mov
inc
sbb
rol
daa
fst
stc
sar
popa
or
mov
pop
sbb
clc
push
jle
jae
(bad)
dec
jmp
ss
add
test
mov
mov
test
mov
mov
inc
sub
sbb
mov
fsub
sbb
inc
push
mov
retf
xor
jle
movs
repnz
push
jo
les
stos
out
pushf
jb
sub
jecxz
stos
push
ficom
mov
jp
mov
imul
xchg
(bad)
mov
ffreep
adc
outs
fs
clc
ror
in
add
xchg
(bad)
fistp
xor
aad
nop
xchg
xor
call
push
sbb
out
dec
push
mul
jmp
(bad)
cmp
imul
sub
retf
mov
ret
push
ss
call
sub
pop
cli
xlat
or
pop
push
in
pop
dec
push
mov
shr
add
push
sbb
xor
pop
(bad)
push
sbb
dec
push
call
imul
sar
ror
sub
push
sti
pop
mov
add
sub
mov
or
sub
in
cmp
aas
iret
xlat
adc
and
enter
inc
pop
mov
cmp
pop
ret
jg
shl
or
fidivr
js
(bad)
sbb
fdivr
cmps
mov
pop
jmp
cmp
clc
jmp
loop
ret
add
leave
pop
fild
test
mov
shl
aam
call
out
stc
adc
out
(bad)
and
aas
mov
xchg
(bad)
or
(bad)
lock
lahf
xor
aaa
mov
lods
add
test
shl
xchg
scas
(bad)
mov
mov
enter
jns
addr16
mov
rol
dec
inc
neg
jns
sbb
or
pop
sbb
pusha
fcmovne
jne
cmp
push
xor
into
push
mov
out
ss
daa
sahf
push
inc
in
mul
leave
repnz
or
jno
popf
dec
mov
daa
das
mov
jle
push
pop
cmp
pushf
pop
out
jne
mov
sbb
(bad)
cmp
sub
inc
mov
out
sub
pop
dec
mov
sbb
or
adc
pop
cmps
stc
jmp
ja
mov
int
push
xchg
(bad)
outs
push
jmp
adc
ins
(bad)
adc
jo
(bad)
scas
ret
ret
sbb
pop
xchg
cmp
js
mov
dec
dec
out
(bad)
loope
mov
jae
jp
mov
aad
inc
pop
(bad)
cmc
inc
push
ret
pop
(bad)
fmul
loopne
and
push
adc
in
or
push
test
jge
retf
ret
repz
or
xchg
jmp
add
cmp
lods
test
rol
push
(bad)
lods
and
add
fmul
cmp
inc
push
jmp
lock
js
sbb
jmp
test
in
add
inc
and
test
xchg
and
neg
jle
(bad)
lahf
es
fstp
clc
ins
xor
xor
fcompp
enter
xacquire
jmp
xor
ret
test
aaa
out
add
mov
fmul
jge
cmp
xor
cli
sbb
cmp
jo
or
cdq
xchg
or
jmp
jecxz
cli
fimul
outs
add
dec
mov
cmp
jge
pop
jp
or
jmp
rol
dec
js
xchg
(bad)
pop
cs
push
nop
dec
and
es
or
gs
mov
push
fs
sahf
mov
cmps
mov
int
imul
cmp
out
das
add
popf
fist
cmp
add
dec
in
push
jmp
div
popa
mov
pop
mov
mov
fild
pop
das
or
paddd
fs
(bad)
ror
cmps
or
mov
call
mov
fcomip
lahf
add
sub
sub
xor
js
das
mov
daa
enter
push
(bad)
xor
xor
adc
cmp
ds
pop
fidivr
pop
sbb
cmp
in
popf
dec
es
cmps
push
out
push
lahf
push
jmp
jo
push
sub
sbb
(bad)
cmp
push
das
lea
sub
add
mov
outs
test
gs
add
mov
scas
adc
sbb
movs
test
dec
nop
loop
mov
cld
out
loop
cli
jo
cmp
adc
lea
test
stos
pop
mov
retf
fst
popf
sub
aas
cdq
rol
cwde
ss
xchg
ret
jle
mov
lods
dec
lods
into
hlt
mov
call
mov
movs
loope
pop
(bad)
mov
sbb
imul
sar
push
enter
mov
push
mov
mov
clc
xchg
and
and
or
mov
push
in
lock
enter
(bad)
cmc
pop
xor
lahf
loopne
int
jle
int
pop
pop
cmps
pop
adc
retf
xchg
jge
xor
push
ins
pop
inc
push
mov
pushf
loopne
jmp
xlat
push
movs
sti
sub
outs
jo
call
fld
loop
push
fwait
dec
retf
test
mov
jns
push
call
jmp
js
in
inc
icebp
cwde
shl
sub
loopne
retf
repnz
iret
sbb
xor
add
mov
jbe
mov
retf
sub
dec
cmps
(bad)
cmp
inc
mov
daa
(bad)
jno
pop
lods
repz
lods
dec
idiv
xor
sub
xor
fs
call
lds
push
into
sub
es
lock
or
mov
inc
mov
inc
(bad)
stc
dec
pusha
mov
movs
mov
sti
inc
ret
sub
gs
es
jp
inc
sbb
cmp
xor
inc
mov
sbb
or
xchg
loopne
inc
int3
and
(bad)
lea
adc
in
jb
adc
pop
cmp
cdq
cs
loop
shl
outs
and
repnz
shl
das
out
fs
and
mov
test
imul
xchg
in
ds
inc
call
xor
cmp
cmc
es
sahf
xlat
ins
mov
popf
les
lock
fs
sub
movs
lea
rol
add
aaa
fsub
shl
stc
jmp
and
leave
mov
mov
xchg
sub
mov
(bad)
lods
xchg
out
mov
fdivrp
test
lock
jno
in
icebp
leave
in
clc
mov
mov
sar
test
(bad)
repz
add
idiv
push
mov
daa
xchg
clc
dec
xor
mov
(bad)
dec
dec
mov
pop
mov
icebp
shr
imul
add
(bad)
fbstp
and
xor
jne
clc
mov
imul
gs
cmps
inc
mov
scas
jp
scas
ins
or
adc
hlt
add
lahf
fldl2t
push
mov
out
inc
xchg
inc
mov
es
hlt
test
jecxz
fild
add
mov
mov
xor
ret
movs
bound
push
cmp
pop
and
jmp
and
into
pop
dec
push
test
or
push
aaa
(bad)
mov
mov
push
enter
inc
and
inc
loop
ret
int
popf
dec
jp
xchg
rol
imul
addr16
movs
retf
movs
test
inc
in
call
enter
xchg
pop
jge
sbb
test
jne
sbb
std
and
repz
gs
push
ret
xchg
sub
adc
sti
popf
mov
add
mov
leave
xchg
push
fidiv
dec
mov
jmp
ret
push
stc
fwait
cmps
sub
mov
cmc
xchg
inc
push
adc
mov
jno
mov
ja
rcr
test
pop
mov
pop
or
xchg
sti
ins
inc
int
bound
outs
push
cmp
sub
xchg
push
or
jno
or
jge
mov
cli
mov
jmp
aam
rcl
push
(bad)
retf
pushf
jmp
sub
mov
pop
lods
mov
frstor
jae
jp
pusha
rcl
mov
into
ds
mov
sub
mov
cwde
push
xor
or
cmp
jmp
adc
mov
mov
imul
or
fisub
jp
ja
cmp
js
(bad)
mov
sub
dec
and
lods
lahf
mov
repnz
out
jns
fdiv
adc
stos
sbb
bound
sbb
mov
push
mov
jp
or
jle
loope
pop
pop
neg
and
jge
sub
jno
test
stos
xchg
cdq
push
fstp
fst
push
pusha
jmp
mov
mov
out
jae
xchg
aad
or
add
pop
and
cmp
movs
pushf
mov
push
mov
rcr
bound
in
mov
push
lock
inc
test
out
cli
(bad)
xchg
(bad)
mov
or
cwde
fild
loop
aam
test
cmp
sbb
xchg
mov
aam
ja
xor
ds
adc
jmp
pop
add
call
imul
pop
cmc
and
xchg
add
and
push
push
pop
push
adc
push
push
and
retf
xor
push
setg
xchg
int3
fnstcw
sahf
arpl
nop
pusha
gs
xor
add
das
sbb
pop
out
cli
adc
scas
(bad)
mov
inc
inc
sbb
jle
cmp
cmps
sbb
loopne
inc
cmps
(bad)
cmp
into
int3
jg
adc
xchg
retf
push
sub
pop
mov
imul
pop
sbb
dec
add
push
lahf
sbb
dec
mov
or
adc
sub
aas
test
adc
fmul
repnz
push
ret
bound
add
and
(bad)
popf
mov
test
or
fadd
dec
lahf
fimul
inc
push
mov
push
retf
into
pop
sbb
add
dec
sbb
hlt
pop
lea
int
sub
movs
cmps
outs
mov
inc
movs
jmp
jmp
add
add
ret
push
jae
jecxz
inc
pop
add
clc
add
imul
in
xchg
neg
ja
or
es
mov
out
mov
sbb
dec
bound
mov
stos
bound
call
movs
ja
mov
pusha
jno
imul
push
xchg
add
pusha
test
mov
test
fcom
pop
or
jp
xchg
mov
push
push
xor
mov
pop
sub
cmp
jnp
cmp
sub
test
jmp
scas
adc
jns
cmp
shl
call
sahf
loopne
lea
retf
jno
(bad)
cmp
shr
movs
cdq
and
push
inc
sub
iret
iret
inc
adc
pop
scas
div
fnop
adc
dec
add
popa
loopne
int3
pop
jecxz
mov
ror
out
inc
retf
xchg
cmp
sahf
dec
popa
xchg
add
btr
cmp
call
pop
pop
call
ins
xchg
bound
imul
cmp
stos
and
push
cmp
dec
adc
test
(bad)
and
(bad)
retf
sti
sbb
dec
cmp
sbb
aaa
(bad)
in
jg
test
push
cmp
mov
xchg
pop
and
arpl
jbe
sbb
iret
push
jb
inc
pop
rol
xor
lds
adc
or
fiadd
or
mov
leave
in
cmp
es
in
out
and
sbb
xchg
mov
icebp
imul
gs
push
mov
xchg
xchg
fdivr
imul
rcr
loope
mov
adc
xchg
adc
jmp
cmp
data16
es
outs
mov
cmc
xor
ret
sbb
out
xchg
pop
adc
enter
mov
jle
adc
stc
out
std
add
daa
aas
or
mov
or
mov
stos
sub
gs
test
adc
pop
push
and
mov
or
hlt
in
pop
mov
jnp
pop
mov
jnp
(bad)
in
std
popa
push
push
sub
loopne
inc
les
jge
cdq
fwait
sbb
xor
push
test
sub
(bad)
fldenv
push
sar
xor
mov
outs
lock
mov
jg
xchg
lods
fwait
into
or
xchg
shl
in
rol
out
add
cmp
clc
inc
(bad)
xchg
sub
mov
jnp
sbb
mov
mov
cmp
call
aaa
lock
retf
dec
jp
ds
lahf
sahf
mov
je
stos
mov
aad
adc
sbb
push
int3
fdivr
pop
es
jno
sti
xchg
jle
inc
lods
movs
push
push
pop
pop
push
mov
jge
push
(bad)
out
hlt
loopne
jmp
mov
lds
ins
xor
clc
cwde
pop
jge
test
mov
test
push
std
or
arpl
push
or
repz
xchg
jno
mov
cmp
cwde
in
push
ret
xor
push
out
loop
iret
xchg
stos
into
xlat
pop
stc
pop
xchg
loopne
cmp
jp
sub
and
sbb
mov
cld
pusha
sub
and
stos
dec
adc
nop
sar
xchg
xchg
cmp
jae
adc
mov
(bad)
sti
mov
adc
iret
cmps
inc
test
iret
push
xor
(bad)
enter
shr
(bad)
pop
addr16
mov
xor
lea
aam
lea
dec
push
test
pop
dec
adc
cs
jl
mov
pop
dec
mov
sub
scas
xlat
fnstenv
retf
or
sub
cmp
inc
sub
ins
and
mov
jbe
shr
cmp
jg
hlt
inc
shl
mov
push
popa
xor
lahf
movs
into
push
sbb
out
pop
cmp
lar
pop
sub
inc
aas
fs
mov
xchg
retf
lahf
mov
movs
and
xor
aad
ficomp
push
or
jno
(bad)
call
push
popf
fstp
fisttp
imul
std
lods
rcr
mov
mov
push
push
stc
dec
push
or
push
test
pop
jmp
fcmovnbe
cmp
xlat
and
test
cmp
repnz
fnstcw
pop
lods
and
sbb
jae
repz
scas
nop
test
xor
push
jmp
movs
cmp
xchg
cmps
bound
movs
retf
and
inc
loop
pop
loop
clc
setbe
fidiv
loop
(bad)
popa
cmp
jns
jge
cmp
mov
ins
add
mov
jg
mov
and
in
fsqrt
retf
out
and
cmp
hlt
hlt
inc
outs
inc
dec
aad
mov
adc
jle
out
add
data16
jmp
sbb
xor
sahf
arpl
imul
mov
add
mov
xor
ror
lods
ret
mov
std
xchg
cwde
das
loop
rcr
cmp
mul
inc
mov
mov
fs
imul
sbb
outs
shr
into
dec
and
fcom
or
cmp
mov
add
jne
cwde
test
push
xor
and
shr
in
xchg
inc
sbb
pop
xchg
fisub
jg
xor
add
pop
xlat
pop
rep
jns
sbb
push
add
xchg
out
inc
repnz
sub
mov
xchg
push
lds
dec
outs
movs
mov
mov
fstp
ret
int3
movs
mov
bnd
sar
cmps
jnp
mov
mov
xchg
outs
and
popf
je
mov
jecxz
nop
sub
mov
or
loop
loop
cmp
jns
inc
cmp
jne
dec
or
cmp
push
int3
sbb
loope
jmp
shl
stc
or
cmp
add
test
(bad)
and
lds
retf
lds
mov
aam
in
jo
lahf
pop
cmp
call
mov
pop
or
sub
stos
pop
ins
cs
fs
outs
xor
dec
and
sbb
inc
xchg
jb
inc
jb
(bad)
xchg
mov
dec
pop
lods
push
mov
add
push
mov
clc
push
mov
das
lahf
xchg
push
cmp
inc
mov
ret
(bad)
in
dec
pop
scas
stc
lea
std
adc
call
loop
xor
add
adc
push
and
mov
mov
xor
lds
inc
inc
fiadd
scas
push
cmps
push
mov
inc
aaa
es
xchg
jmp
jbe
push
push
aad
mov
(bad)
jbe
daa
add
mov
sar
or
retf
jno
lea
call
out
mov
repnz
add
push
push
(bad)
cmp
and
sbb
and
push
fidivr
out
pop
rol
cmp
add
or
mov
cwde
fisub
les
mov
int3
movs
cmps
jae
xor
test
hlt
adc
or
mov
into
pop
jnp
mov
stos
jmp
cmps
neg
out
push
addr16
push
icebp
pop
cli
and
xchg
pusha
aam
push
or
lds
xor
aam
ja
mov
mov
outs
lahf
xchg
test
repnz
les
fstp
sub
call
sti
idiv
inc
sti
je
inc
pop
mov
mov
(bad)
cli
xor
xor
sbb
imul
shl
adc
fidivr
data16
loopne
ds
cmp
sub
outs
push
mov
mov
enter
pop
xor
push
sub
clc
in
mov
pop
adc
scas
std
push
push
popf
jmp
and
mov
mov
es
ficomp
ret
cdq
stc
cmc
inc
pop
mov
cwde
aas
and
push
xchg
xlat
aam
cmps
mov
and
mov
bound
int3
xchg
or
mov
retf
or
push
daa
pop
pop
jle
and
(bad)
jg
inc
pusha
dec
lahf
and
scas
in
lds
sar
mov
jno
pop
xchg
loope
lods
add
mov
sub
int3
cdq
je
pop
jo
ret
adc
repnz
dec
vpxor
push
mov
cld
daa
jns
jno
repnz
leave
aaa
jae
out
inc
dec
or
push
adc
and
sub
jae
gs
dec
inc
cwde
add
jns
mov
loope
sbb
push
and
xchg
push
mov
cmp
clc
fsub
xchg
inc
rol
pop
inc
rcl
test
push
jle
jbe
hlt
mov
arpl
aam
data16
mov
jne
cdq
jbe
push
or
add
inc
ret
ficom
out
inc
dec
aaa
push
mov
mov
cmps
mov
mov
mov
lock
pop
inc
mov
jecxz
inc
movs
jmp
lahf
(bad)
jmp
jg
xor
lahf
jle
nop
and
or
outs
shl
jae
lods
ror
pop
or
xchg
enter
popf
add
stos
push
outs
outs
or
hlt
or
jnp
lds
jb
(bad)
pop
scas
push
addr16
inc
mov
pop
scas
adc
pop
mov
outs
mov
leave
cld
mov
mov
sti
ss
jns
fmul
sbb
pop
push
aaa
mov
not
push
mov
sub
cs
arpl
lods
pop
mov
imul
int
mov
sbb
pop
loop
sti
dec
fistp
aaa
ret
nop
push
ja
add
imul
pop
sbb
mov
xlat
je
mov
xor
and
xchg
sbb
xor
stos
dec
je
push
shl
ins
add
sub
lds
xor
xchg
ss
pushf
mov
(bad)
imul
call
outs
std
adc
dec
pop
or
xor
aad
mov
dec
fs
ror
mov
and
lahf
out
out
and
mov
(bad)
dec
jmp
std
cmp
cmp
arpl
pop
mov
(bad)
aad
dec
mov
call
add
push
push
fbstp
movs
in
xor
out
fwait
adc
inc
sti
sbb
cmps
shl
es
cmp
sbb
fcom
inc
lea
inc
jmp
loop
sbb
repz
jmp
jnp
add
jge
fcmovnbe
int3
cdq
imul
push
add
retf
sbb
dec
dec
sub
sbb
adc
xor
nop
mov
in
fld
mov
pop
and
sub
and
iret
or
out
or
mov
jge
xchg
rol
mov
repnz
lahf
fdivr
xchg
popa
dec
jno
xor
mov
push
sbb
cwde
inc
test
xor
push
and
dec
fwait
xchg
dec
mov
cmp
mov
nop
and
ss
cmps
lock
repz
sti
add
sbb
push
jno
push
retf
(bad)
into
mov
lods
and
movs
inc
mov
fidivr
hlt
xor
fist
mov
imul
gs
mov
add
aas
jbe
fcomp
and
dec
rcr
in
jbe
add
push
in
add
repnz
cmp
stc
gs
call
cmps
ret
jle
cmp
mov
fcom
mov
sbb
xlat
test
add
cmp
shl
pop
xchg
aad
adc
pusha
test
jne
data16
jae
in
xchg
ins
aad
shr
addr16
cmp
sub
imul
(bad)
pop
adc
mov
xchg
cmp
daa
inc
mov
loopne
pusha
cmp
pop
or
xchg
(bad)
fnstenv
cmp
push
ds
adc
dec
fs
scas
dec
pop
mov
sar
js
std
psubd
mov
pusha
jne
lea
pop
jb
mov
mov
xchg
dec
or
imul
dec
scas
pushf
mov
sub
ins
repz
or
shl
inc
loope
xor
cmps
sbb
and
imul
pop
call
dec
and
arpl
pop
add
test
mov
(bad)
mov
sbb
dec
add
out
or
pcmpgtw
xchg
cmc
cmp
xchg
movs
xlat
push
inc
mov
dec
jle
dec
out
into
mov
es
pop
cmp
cmp
sub
je
pop
lds
xor
ins
inc
push
xchg
mov
cmps
mov
xor
xor
jns
inc
mov
and
sbb
dec
movs
mov
enter
sub
mov
fidiv
add
add
into
xchg
retf
arpl
push
fxch
pop
or
pop
mov
(bad)
jmp
shr
jg
adc
jg
in
cli
lds
data16
data16
push
jg
and
ins
cmps
fsub
mov
sar
jae
aam
ins
pop
(bad)
movs
cmp
push
(bad)
push
adc
jmp
xchg
cmps
mov
and
lea
mov
jno
vmovq
in
sub
or
fsubr
pop
call
inc
push
ret
fs
and
or
(bad)
imul
push
int3
inc
add
add
ja
xchg
js
push
add
push
rcl
jp
cmps
test
fisttp
pop
push
inc
lock
xor
mov
pop
ja
push
push
loop
les
fimul
rcl
jg
jns
cmps
jne
call
xchg
jno
xchg
xchg
pop
jne
cmp
xchg
pop
gs
loopne
cmp
cmps
jmp
inc
xchg
pusha
and
imul
sub
js
xor
mov
repnz
xor
push
in
jp
ror
fucomp
in
stos
xchg
rcr
xchg
or
mov
or
fdiv
ins
inc
add
popa
je
fcmovu
push
push
imul
int
out
dec
rol
xor
or
out
wrmsr
push
or
arpl
retf
jl
popf
fstp
pop
cli
clc
sbb
jmp
rol
sahf
in
fcmovnu
daa
mov
in
jne
xlat
and
sub
mov
add
mov
cmp
adc
pop
stos
in
scas
pop
sbb
jecxz
loop
or
nop
inc
rdmsr
cwde
inc
push
or
xor
outs
aas
jmp
mov
xchg
pop
add
ret
aam
fnstsw
xor
adc
push
mov
xor
push
stos
ret
xchg
loopne
add
push
std
xor
add
daa
repz
in
dec
mov
in
test
dec
inc
jg
and
xor
call
add
adc
ins
xchg
pop
inc
push
xchg
imul
cmps
adc
stos
ss
lods
int
pcmpeqd
aaa
ja
xchg
cmp
xor
or
push
jae
fimul
or
pop
pop
mov
stos
ror
xchg
gs
adc
ins
inc
inc
in
ret
mov
and
js
call
lds
jle
xor
push
sbb
iret
pop
and
sbb
neg
pop
imul
fst
(bad)
test
jno
xchg
jle
cmp
push
sub
mul
ins
and
and
pop
sbb
popa
push
rol
ror
sti
mov
sub
inc
mov
sub
pop
push
jl
xor
mov
outs
mov
jle
fucom
ins
push
(bad)
fdivr
add
pop
dec
mov
mov
test
dec
aaa
mov
rcl
cmps
fwait
retf
add
pop
mov
pop
mov
imul
mov
xor
(bad)
iret
fstp
sbb
arpl
test
fstp
popf
fst
aas
dec
je
je
aas
sbb
sub
fild
pop
or
mov
pop
cmp
pop
aaa
push
sub
stos
inc
inc
add
jb
inc
adc
in
jecxz
mov
int3
loope
dec
jne
jo
out
push
mov
mov
lods
aad
daa
cmps
les
movs
adc
mov
ins
out
daa
and
mov
stos
mov
jae
enter
add
and
push
sub
mov
dec
mov
mov
mov
popa
sar
scas
inc
xchg
and
jae
push
into
aas
and
inc
nop
xchg
mov
mov
ins
cmps
push
hlt
and
psrlw
sub
aaa
bnd
js
aam
loopne
xor
jge
xchg
pop
fnsave
mov
or
adc
loopne
mov
test
(bad)
les
(bad)
jecxz
shr
mov
xchg
adc
push
sar
fistp
jl
popa
dec
das
(bad)
int
out
jl
xchg
jnp
pop
sbb
jle
push
sub
repz
xor
jmp
std
dec
xchg
mov
pop
jnp
sahf
cmps
cmc
push
hlt
xchg
dec
xchg
pop
enter
je
xchg
ss
js
cwde
in
icebp
bound
iret
sbb
imul
jmp
push
ror
fcmovne
cs
jp
xchg
mov
xchg
or
ds
sar
ja
ins
stos
stos
nop
fnstsw
movs
cmp
dec
jmp
adc
or
or
and
mov
push
add
(bad)
out
paddd
shl
movs
repz
aas
pushf
sub
je
scas
xchg
mov
shl
sub
ds
ret
inc
cmps
and
cmps
add
cwde
fld
je
mov
pop
push
sar
dec
cmp
outs
push
jne
popf
lahf
pushaw
cmps
push
ret
or
cmp
loop
(bad)
ds
sbb
nop
es
mov
jmp
arpl
lahf
pop
mov
xor
sti
or
test
add
push
push
ins
ins
movs
jns
sub
iret
into
pop
movntps
ret
or
bnd
push
mov
cli
sbb
cmp
adc
cmp
mov
push
(bad)
pushf
ins
js
out
in
aaa
adc
sahf
pop
inc
clc
pop
mov
retf
push
std
jb
aas
fmul
and
mov
xor
pop
mov
sbb
lds
loop
lods
mov
push
into
(bad)
std
div
cli
and
jmp
pop
int3
lahf
jmp
dec
test
fs
jle
adc
mov
xchg
test
mov
jp
push
cmps
into
outs
or
cli
(bad)
pop
out
cmps
mov
jmp
mov
sbb
std
and
imul
(bad)
sti
ffreep
xchg
push
push
scas
cmp
jecxz
outs
pop
mov
sbb
cdq
popa
outs
cwde
pop
ins
dec
xchg
pop
daa
adc
scas
daa
push
in
outs
(bad)
cmp
movs
retf
and
jns
in
jnp
dec
pop
ffree
imul
xchg
std
xchg
mov
ja
lods
jnp
mov
and
rcl
loop
push
fcomi
inc
jmp
test
popf
inc
pop
push
idiv
adc
ja
in
aaa
and
and
and
shr
mov
push
inc
fnstsw
std
lahf
int
scas
ds
cmp
dec
mov
push
fadd
mov
and
cmp
jmp
call
call
mul
(bad)
in
(bad)
fld
push
cmc
and
sub
xor
(bad)
sbb
dec
mov
lods
cmps
scas
pop
adc
fistp
outs
mov
dec
adc
and
sub
xchg
jp
xchg
cmp
push
push
arpl
pop
pushf
enter
adc
sub
push
popa
adc
mov
stc
xor
inc
ins
ret
daa
cmp
dec
xchg
xchg
add
inc
push
fwait
(bad)
in
xor
dec
jbe
(bad)
adc
pop
out
aad
ins
fst
xor
mov
mov
inc
cmp
add
aam
pop
push
imul
cdq
xor
arpl
and
jmp
add
js
or
add
(bad)
jo
cmps
mov
jp
sub
xchg
repnz
and
xchg
mov
push
ror
nop
mov
mov
scas
fcom
adc
mov
xchg
cmp
sbb
stc
cli
mov
cli
xor
scas
neg
mul
cmp
cli
or
nop
rcl
lods
outs
pop
jmp
jbe
(bad)
(bad)
test
add
(bad)
jo
iret
repnz
(bad)
test
and
sbb
jno
jbe
push
or
stos
jmp
inc
pop
xor
sbb
stc
sub
fmul
dec
test
leave
inc
add
push
loopne
cld
inc
clc
sbb
or
stos
or
ret
mov
mov
and
popa
mov
mov
mov
cld
inc
fsub
jbe
scas
jmp
push
ror
movs
pusha
cmp
adc
out
lds
cmps
sahf
mov
push
push
(bad)
loop
sbb
call
test
jmp
iret
jne
in
or
push
pusha
out
pop
mov
test
push
bound
jno
movs
lahf
or
cmps
popf
fcmovb
add
sbb
and
popf
inc
sbb
mov
aam
retf
dec
mov
lods
xchg
and
jl
sbb
inc
into
xchg
pop
and
les
adc
test
cmps
lds
sahf
push
test
push
ds
or
into
icebp
push
mov
jbe
cmp
push
adc
cs
repz
mov
js
or
mov
out
imul
sbb
sar
div
xor
pop
push
in
int3
lahf
and
push
mov
scas
repnz
(bad)
pop
(bad)
or
arpl
fs
xor
jg
xchg
mov
and
jmp
dec
cmps
in
retf
xchg
cmps
in
call
pop
jl
xor
mov
ret
inc
or
(bad)
jne
mov
mov
pop
xor
push
jmp
inc
mov
xchg
mov
leave
sub
xchg
jmp
jns
xor
jle
mov
mov
sub
jmp
add
retf
out
das
push
xor
push
sub
sbb
cwde
sub
aas
xchg
rol
nop
mov
cmp
cmp
jne
nop
test
mov
lock
push
les
popa
add
xchg
cmps
add
mov
xlat
push
sub
sub
scas
lock
xor
adc
cmp
add
lea
into
jns
push
xchg
or
outs
inc
fs
js
imul
stos
pop
pusha
dec
sti
push
lods
or
pop
scas
neg
mov
or
imul
inc
gs
repnz
mov
popf
aam
je
xor
jge
mov
push
xor
xor
retf
imul
movs
jo
adc
add
ins
xor
mov
loope
inc
cld
push
xchg
sbb
push
mov
pop
sar
icebp
sar
mov
jmp
jns
pop
int
sub
ins
pop
sbb
sub
nop
add
adc
jecxz
(bad)
pop
sub
gs
nop
outs
push
mov
or
sti
dec
push
sbb
aaa
stos
pop
xor
cmp
xchg
data16
sbb
dec
bound
out
fcom
jle
or
push
cs
sub
(bad)
pop
xor
das
enter
call
js
(bad)
hlt
push
je
pop
pop
fsubr
js
fld
ja
test
inc
or
(bad)
movs
jae
(bad)
inc
shl
mov
loopne
test
and
mov
mov
jne
push
pop
(bad)
pop
mov
and
mov
dec
icebp
dec
mov
outs
sti
imul
cmp
call
push
imul
leave
mov
fwait
cdq
jmp
std
xor
lods
or
clc
cmp
inc
mov
je
and
cmp
jbe
pop
mov
imul
aam
mov
mov
pushf
div
xor
jmp
add
adc
or
xchg
cli
repnz
es
jb
daa
test
out
stos
jo
sbb
dec
push
out
addr16
sbb
data16
xlat
cmp
out
popa
mov
shl
add
lods
(bad)
push
add
jns
(bad)
xor
outs
add
cmp
push
imul
cmp
loop
(bad)
mov
mov
sbb
or
loope
add
and
fistp
inc
or
sahf
cmp
imul
loope
xchg
xor
std
je
aas
aaa
fwait
mov
sub
mov
xchg
ror
cmp
pusha
xor
not
sar
sub
mov
cmp
mov
je
fldcw
dec
ds
fidiv
mov
hlt
jnp
fistp
sub
(bad)
ins
add
retf
inc
adc
mov
outs
test
xlat
dec
adc
out
cmp
rcr
ret
xlat
outs
int3
xor
mov
mov
jl
mov
or
rcl
test
dec
mov
pop
push
retf
enter
pop
data16
(bad)
adc
in
aam
pop
test
push
xor
sbb
jno
pop
or
test
fadd
xchg
mov
ret
jp
loopne
jns
mov
xor
iret
mov
lods
jbe
xor
cld
in
jg
jmp
out
dec
sbb
jno
jmp
lock
rol
push
mov
adc
mov
cld
adc
loopne
ret
bound
push
pusha
xor
retf
icebp
push
or
shr
popa
or
dec
scas
jge
push
xchg
clflush
dec
cvttps2pi
add
imul
jno
sbb
push
mov
fst
jmp
in
sar
lods
ds
lods
mov
add
ret
adc
inc
and
and
cmc
mov
cmp
and
mov
or
inc
pusha
add
jecxz
movs
inc
add
pop
jae
mov
iret
dec
pushf
inc
sahf
call
iret
adc
xlat
dec
mov
xor
inc
pop
ret
mov
cmp
mov
aaa
add
sbb
jl
arpl
imul
pushf
sub
mov
cmps
pop
adc
dec
mov
retf
or
pop
dec
jge
dec
xor
sub
mov
and
ja
mov
rol
pop
pop
mov
addr16
pop
mov
mov
cli
outs
inc
sub
xchg
xchg
and
mov
sub
pop
enter
or
mov
aaa
cmps
(bad)
mov
adc
or
daa
cmp
add
fsubr
call
jo
push
jae
push
xor
xlat
(bad)
mov
into
clc
gs
and
scas
and
repz
std
jecxz
ins
xchg
mov
and
int
cmp
sub
adc
xchg
pop
ja
iret
std
and
mov
dec
pop
test
mov
pop
mov
adc
cdq
mov
inc
out
lahf
lds
push
rcl
lods
ja
and
xchg
jmp
mov
add
or
dec
fisttp
retf
call
jl
iret
mov
jl
and
adc
adc
push
scas
ret
imul
cmp
mov
and
sbb
fdivr
jnp
js
jns
pop
xchg
(bad)
loope
xchg
and
data16
mov
mov
or
sti
in
sti
sub
cmp
pushf
stos
push
sahf
iret
add
dec
push
dec
jne
sub
les
pop
lds
sub
push
in
xor
ret
pop
pop
in
test
xor
aad
push
pop
(bad)
fistp
xchg
outs
mov
into
cmp
je
fisttp
mov
scas
mov
test
mov
mov
je
data16
dec
or
add
repz
and
in
scas
or
or
push
and
cld
add
enter
or
inc
ins
push
xor
inc
cdq
mov
sbb
mov
cmp
inc
xor
push
daa
adc
lahf
aas
xchg
jl
pop
cmp
jecxz
mov
in
pop
lds
jne
adc
inc
aaa
fcomip
push
jmp
jne
stos
retf
and
inc
out
cmc
repnz
es
add
movs
mov
sahf
cmps
push
repz
inc
jmp
mov
rol
or
jg
stos
daa
(bad)
popf
shr
xchg
cmp
xchg
sar
push
and
retf
rcl
pop
fist
pop
sbb
in
(bad)
(bad)
push
push
sbb
addr16
call
mov
xchg
pop
dec
(bad)
into
mov
xor
sub
lock
cmp
outs
lea
pusha
mov
ret
xchg
daa
jb
cs
in
retf
in
clc
jbe
push
jle
sbb
imul
jge
fld
cwde
sub
jae
xor
(bad)
or
cmp
pop
dec
xchg
and
shl
cmps
mov
mov
jns
pop
test
dec
push
inc
push
cmps
jne
dec
(bad)
push
sbb
push
sar
shl
jbe
icebp
xchg
retf
inc
cmps
stc
cmovns
xchg
retf
cmp
dec
mov
pop
jle
sbb
(bad)
mov
addr16
sbb
(bad)
in
jae
jae
movs
fmul
rcl
scas
pop
mov
fdiv
add
dec
stc
xlat
jne
retf
es
ficomp
lods
mov
or
mov
int
dec
adc
mov
fld
or
cmp
stc
push
std
xchg
jp
repnz
add
and
(bad)
jmp
ds
or
test
jl
sub
dec
ins
dec
cmc
stos
mov
icebp
pusha
movs
dec
(bad)
push
pushf
mov
das
sbb
cld
in
push
fcom
pop
scas
mov
(bad)
sbb
xchg
leave
jb
or
dec
mov
scas
daa
and
rcr
pop
stos
(bad)
sbb
dec
mov
jno
jne
or
mov
add
lds
add
pop
stos
in
and
xchg
inc
sub
mov
loope
jg
cmp
sub
rol
mov
pop
aas
add
sbb
adc
mov
xor
loope
cmps
mov
test
jle
scas
mov
aad
retf
push
frstor
cmp
or
test
out
int3
aas
push
jno
jmp
inc
rcl
xor
sbb
xor
jl
jmp
jb
push
stc
mov
xor
and
adc
cmc
xchg
jle
sub
out
push
out
stc
mov
xchg
in
and
fcmovnbe
jnp
cmp
dec
stos
les
xchg
mov
popa
push
mov
jge
mov
push
cmp
lock
loopne
(bad)
in
out
jecxz
in
in
sub
ja
idiv
ret
popf
fs
imul
mov
xor
xor
or
ror
aad
mov
clc
arpl
lds
jge
into
imul
int
mov
pop
in
jmp
fnstsw
add
jecxz
enter
lock
xchg
stos
push
add
inc
cdq
sbb
lea
dec
enter
mov
push
mov
scas
in
shl
pop
rol
repz
fldcw
shld
outs
adc
repz
mov
or
mov
xchg
test
loopne
mov
icebp
dec
pop
add
popa
and
or
imul
ds
daa
mov
inc
nop
mov
call
cmc
cmp
cmp
loop
cmp
iret
jle
leave
fmulp
push
test
cmps
mov
xchg
nop
add
sbb
loope
pop
cmp
or
jmp
inc
ins
call
mov
mov
xor
inc
imul
mov
mul
jno
hlt
cwde
not
xchg
and
fistp
push
ret
ret
mov
out
sub
iret
mov
test
mov
movs
in
cmps
mov
pop
in
aaa
in
xchg
xor
sbb
cmp
lds
push
push
mov
inc
xchg
(bad)
mov
mov
mov
cdq
cdq
(bad)
mov
imul
adc
pop
and
fcmovne
xchg
movs
dec
icebp
loopne
mov
ret
dec
pop
jle
push
loop
xor
not
mov
sahf
xor
ja
lahf
dec
mov
gs
(bad)
add
jnp
xchg
or
mov
fcom
out
push
ins
gs
cmp
icebp
scas
and
dec
sbb
ja
xor
push
fstp
sub
jbe
jge
jmp
jns
cli
mov
sub
add
sub
std
mov
fucom
xchg
and
mov
cs
dec
pop
pushf
out
dec
mov
and
add
fcomp
in
or
jbe
xor
ret
popf
(bad)
call
mov
push
bound
es
push
or
cmp
sti
pop
cmc
fdiv
lahf
fcom
mov
ins
popa
scas
sub
imul
int
sbb
or
pop
idiv
or
mov
xchg
pop
mov
lea
jp
xor
xchg
(bad)
push
cmp
sub
xchg
into
rcl
aad
xor
movs
jle
or
jecxz
pop
cmp
aas
and
mov
pop
pop
aas
dec
cmp
dec
lock
jbe
loopne
repnz
sar
fdivr
in
inc
dec
inc
mov
add
imul
nop
lss
movs
adc
stc
lods
jge
add
jb
jne
push
lods
or
cdq
scas
adc
cmp
stos
leave
mov
mov
into
ss
push
add
int
or
fsub
pop
fsubp
sahf
jmp
and
sbb
push
fdiv
jb
push
fild
loope
mov
add
jecxz
inc
mov
gs
or
mov
cmp
lea
(bad)
pop
sbb
retf
pushf
mov
(bad)
fnstsw
cmp
sahf
push
lds
pop
dec
fwait
add
mov
loopne
jg
sub
ret
(bad)
mov
push
(bad)
scas
dec
test
sar
jnp
xlat
add
jne
mov
adc
cmps
pop
jmp
or
dec
cld
adc
aam
pop
call
mov
stos
ins
or
(bad)
maxps
loop
xlat
test
nop
xchg
and
dec
adc
iret
into
dec
fwait
call
in
rol
inc
test
mov
imul
icebp
sbb
lahf
aad
ja
sub
cmp
call
dec
dec
xchg
enter
xlat
out
sub
loop
daa
jecxz
jge
pop
test
sbb
pop
mov
mov
mov
inc
cmp
jnp
loope
jle
cli
(bad)
jmp
add
or
rcl
fbstp
test
mov
mov
loop
dec
jb
xchg
movs
xor
fild
cmp
xchg
xor
push
iret
jmp
cli
mov
into
pop
mov
dec
out
mov
in
in
push
adc
cmps
pop
dec
mov
xchg
(bad)
fidivr
(bad)
(bad)
clc
pop
data16
add
sar
fdivr
lods
out
scas
loopne
in
clc
fisubr
xor
iret
lds
or
adc
pop
push
(bad)
fwait
cmc
pop
add
jg
int3
cmc
mov
xchg
sub
jmp
jbe
add
daa
xlat
pop
(bad)
inc
adc
inc
push
dec
test
int3
xor
ins
xor
sub
or
mov
pop
neg
out
lahf
xchg
loopne
lods
loopne
imul
xor
div
pop
in
shl
sub
pop
dec
lock
push
ins
cwde
test
pop
push
mov
mov
jae
jl
loope
dec
fild
pop
out
cmps
lea
imul
rcl
daa
add
mov
fadd
mov
push
inc
in
dec
sti
and
mov
mov
jge
(bad)
inc
pop
fld
arpl
not
pop
jmp
add
mov
stos
enter
ja
in
les
inc
or
xor
adc
push
mov
ret
(bad)
cs
aas
dec
cmps
inc
cdq
bound
mov
dec
mov
push
sub
mov
jle
daa
enter
add
ret
xchg
jge
les
retf
scas
sbb
js
std
cmp
jae
inc
test
push
loope
out
cmp
lahf
imul
into
in
jecxz
pop
sbb
cwde
fs
outs
inc
ins
dec
dec
mov
sub
jg
or
sbb
mov
jle
(bad)
ficomp
inc
mov
lock
in
mov
das
clc
jns
mov
push
scas
mov
or
sbb
fld
pop
sub
stos
or
iret
xor
jl
retf
push
push
pop
push
inc
lds
cmps
retf
jo
pushf
sbb
push
fwait
loope
add
push
jmp
push
mov
jo
or
inc
mov
hlt
add
fcmovbe
pop
push
cdq
scas
(bad)
popa
push
jge
pop
scas
popa
out
les
rcr
jp
cs
es
hlt
xchg
cld
sar
add
jg
and
sbb
mov
imul
nop
mov
in
dec
add
aaa
inc
xchg
mov
pushf
outs
scas
bound
mov
sub
in
rcr
dec
in
pop
fistp
push
mov
adc
jmp
inc
test
into
jecxz
xchg
push
cs
lock
test
loop
lods
add
mov
push
shr
mov
cs
fisub
nop
jae
and
add
cld
mov
test
in
cdq
into
mov
call
cmp
sub
int3
lds
hlt
out
in
or
jp
and
cld
aas
sahf
sub
jmp
xor
leave
or
and
pop
popa
arpl
and
mov
les
lock
(bad)
in
ror
sub
jl
gs
lock
mov
inc
push
jmp
data16
inc
sbb
ret
xchg
fisubr
ins
mov
mov
sbb
pop
addr16
jp
mov
dec
adc
mov
out
mov
rcl
fild
sbb
aad
sub
(bad)
mov
jle
pop
imul
shr
fnsave
and
and
jmp
sahf
neg
or
mov
enter
mov
mov
mov
xchg
lahf
std
push
jnp
test
jge
daa
dec
ret
ret
add
pop
cld
adc
aad
dec
inc
push
dec
xchg
scas
ret
xor
push
or
xchg
xchg
jmp
out
scas
jae
xor
cld
retf
shl
scas
cmp
xchg
jb
mov
inc
ds
inc
repz
cmp
cmp
and
int
inc
fs
pop
and
mov
xchg
mov
adc
mov
inc
sbb
leave
jmp
(bad)
pop
les
rol
in
in
in
das
into
ins
sbb
cmp
adc
out
xchg
and
inc
mov
pop
or
sbb
sbb
ja
stos
add
(bad)
rol
stos
lahf
xor
and
lods
out
daa
scas
lock
sub
repnz
vpunpcklbw
add
jbe
pop
repz
jg
popa
rcr
sti
sub
lds
movs
jmp
sahf
jb
xchg
pop
add
jo
inc
cld
jno
xchg
jmp
and
cwde
or
or
push
cdq
sahf
push
into
cmp
push
fcom
loope
push
add
mov
jle
jge
das
jb
std
push
dec
fsubr
rol
sahf
push
or
inc
lahf
ror
pop
call
push
test
or
mov
add
pop
rol
mov
xchg
je
push
push
sub
mov
jmp
cmp
mov
idiv
clc
aaa
push
sbb
stos
dec
aaa
pop
sahf
movs
out
sub
xor
add
enter
movs
scas
lock
add
lock
imul
and
aad
(bad)
(bad)
(bad)
mov
inc
ins
pop
pop
jnp
adc
mov
repnz
push
cmp
fisttp
fs
in
pop
and
push
push
sub
xchg
nop
mov
or
loop
push
ror
ins
cwde
dec
scas
(bad)
jne
out
add
idiv
pop
mov
sub
mov
push
ficom
push
cmps
stos
and
inc
sub
push
inc
fld
push
test
js
xor
xor
add
ror
push
div
add
push
pushf
outs
adc
sti
gs
mov
or
sub
inc
in
in
xchg
icebp
add
add
cmp
retf
je
xchg
cmp
out
sub
jle
sahf
stos
add
movs
vpunpckhqdq
jmp
into
movs
mov
repnz
mov
xor
lahf
test
pop
push
adc
nop
push
adc
xor
cmps
mov
cli
popa
mov
mov
call
ror
inc
dec
cmp
xor
push
push
inc
add
mov
loop
popa
(bad)
sbb
(bad)
mov
retf
mov
je
std
(bad)
dec
fld
js
pop
retf
inc
cmc
mov
and
cmp
inc
or
dec
fnstenv
jnp
dec
scas
mov
adc
and
popf
div
add
sub
retf
push
movnti
je
inc
xchg
mov
test
or
fs
imul
sar
in
out
inc
mov
dec
mov
ins
jge
inc
or
xlat
test
inc
push
retf
into
dec
sbb
mov
fisttp
xchg
push
push
ret
push
test
or
cmps
test
icebp
sar
jmp
or
push
adc
push
inc
add
xor
enter
push
les
ret
mov
dec
or
mov
popa
adc
cmp
xor
push
xor
fst
xor
stos
dec
sti
sub
pushf
sub
popf
sub
pop
cmp
fwait
movs
bswap
pop
sub
jmp
int
inc
rcl
ja
push
shl
inc
mov
jnp
les
je
xchg
mov
xchg
je
pop
retf
inc
xchg
repnz
push
cmp
ja
ret
movs
retf
push
add
add
ja
adc
iret
adc
mov
and
daa
sbb
mov
xchg
test
xchg
inc
in
ficomp
mov
pop
dec
frstor
into
mov
cmp
addr16
retf
pop
lahf
aam
leave
outs
lods
and
pop
shl
(bad)
jns
adc
movs
mov
sub
jb
cmp
retf
fsub
jae
jmp
dec
out
daa
add
push
stc
jl
imul
rcl
cmp
dec
xchg
(bad)
and
sbb
adc
pusha
nop
es
and
(bad)
sbb
dec
jecxz
out
mov
xor
(bad)
pop
es
std
imul
into
adc
inc
pop
push
add
je
pop
enter
jp
std
adc
dec
sbb
(bad)
cmc
push
rep
frstor
shr
out
test
pop
shr
repz
sahf
jno
xchg
(bad)
cmps
aam
int
movs
push
(bad)
xor
outs
jl
scas
mov
scas
sub
(bad)
rcl
jl
xchg
movs
jb
imul
sub
xchg
test
jbe
pop
fcom
test
xor
xor
inc
ror
add
pop
sub
dec
sub
imul
hlt
push
out
mov
ins
adc
jb
jb
sub
test
sti
pop
sbb
in
ins
das
mov
in
lock
aaa
jae
add
pusha
push
daa
imul
mov
inc
adc
shr
sub
pop
out
xchg
mov
cmp
pusha
and
pop
popa
mov
mov
hlt
inc
fwait
leave
popw
(bad)
in
cmp
push
clc
pop
and
mov
sbb
xchg
and
outs
(bad)
jecxz
or
lods
and
cld
mov
fmul
test
dec
in
mov
mov
ins
xlat
xor
in
rcl
inc
frstor
push
xlat
test
dec
std
pop
imul
clc
push
cli
pop
inc
mov
test
sub
jp
inc
pop
repnz
movs
inc
jnp
loop
xchg
xchg
ins
push
loopne
sbb
add
xchg
dec
(bad)
and
adc
imul
out
fwait
adc
dec
or
lods
push
jae
push
dec
sub
outs
and
xchg
scas
outs
xor
stos
jno
xor
sub
pop
mov
es
lahf
repnz
ds
packuswb
xchg
xor
mov
inc
imul
or
push
push
push
mov
add
mov
call
jmp
mov
mov
add
push
fadd
xlat
jne
adc
addr16
arpl
pop
push
out
cmp
push
adc
and
jecxz
vpackuswb
bound
test
aam
jbe
xchg
and
mov
shl
push
jl
xchg
xchg
jb
dec
inc
loop
mov
iret
push
test
fsub
daa
pop
aaa
test
cmc
cmp
not
rcr
sbb
(bad)
dec
mov
xlat
sub
mov
and
inc
sub
fst
repz
xchg
ins
mov
movs
stos
ja
add
xchg
push
fild
daa
aaa
lahf
mov
adc
int3
lods
retf
pop
sub
outs
mov
adc
ret
jg
in
test
xchg
loopne
jbe
inc
mov
xor
mov
sub
sbb
jmp
cmps
es
mov
pop
cmp
and
sbb
sahf
std
add
call
sub
dec
loopne
sbb
retf
dec
imul
out
call
fbld
push
xor
in
mov
dec
sub
out
jmp
hlt
push
ds
cmp
mov
cs
fdiv
popa
push
or
xor
cmps
loop
in
pop
ss
add
stc
jbe
or
xor
mov
cmps
cmps
lock
xor
xor
mov
add
mov
imul
add
sbb
mov
pop
sub
stos
xor
add
xor
fcomp
push
adc
or
cmp
push
mov
mov
in
jle
out
(bad)
loopne
popf
sbb
in
aaa
add
hlt
or
into
leave
fimul
retf
ins
enter
(bad)
mov
push
aam
(bad)
inc
loope
test
inc
pop
or
(bad)
mov
in
data16
cli
cmp
inc
cwde
mov
jo
mov
mov
bound
push
dec
daa
pop
or
xor
gs
data16
sbb
test
aaa
fcomp
cmp
xchg
neg
scas
dec
mov
sub
popa
mov
add
push
jne
pop
rcr
stc
pop
fdivr
arpl
pushf
cmps
inc
in
shr
call
out
push
sbb
xchg
icebp
sahf
push
mov
jg
cmp
test
and
sub
sbb
movs
(bad)
adc
sar
push
cmp
sahf
rol
mov
call
push
ins
xor
fld
jb
sub
xor
xor
stc
cmp
sbb
sub
mov
popa
mov
sub
xor
dec
mov
mov
mov
dec
fadd
mov
out
cs
inc
xchg
xchg
in
sahf
retf
in
mov
sar
sar
cmp
inc
jnp
mov
xor
add
xchg
pop
sbb
jnp
lods
dec
in
adc
and
fsubr
and
mov
xor
hlt
xchg
mov
dec
lock
push
loop
cmps
ficom
cs
inc
or
xchg
jg
cmp
call
js
jl
repz
enter
cmp
rcr
out
xor
add
stc
stos
loop
xor
shl
and
pop
or
movs
mov
cli
ror
add
xor
fadd
add
(bad)
mov
mov
cmp
leave
xchg
add
in
(bad)
push
sbb
scas
pop
and
pop
mov
repz
jbe
daa
jne
out
or
das
fnsave
sar
mov
xlat
push
shl
iret
inc
movs
je
mov
ret
aas
stos
pop
inc
sub
rcr
iret
repnz
mov
icebp
sahf
inc
aaa
adc
push
push
or
push
sahf
in
iret
neg
test
test
jmp
lods
fbld
cli
pop
test
sbb
xchg
retf
aaa
loopne
gs
fld
mov
mov
jmp
xor
dec
jbe
jnp
xchg
fld
bound
mov
push
imul
sub
xchg
out
push
in
jae
xor
lahf
sar
sbb
aam
call
dec
mov
mov
sub
lock
cmc
xor
mov
test
popf
push
repnz
pop
(bad)
stos
jge
xor
fstp
xor
jns
mov
xchg
fisttp
aad
adc
fwait
add
daa
mov
sysexit
(bad)
stos
es
(bad)
mov
fs
adc
stc
mov
and
adc
push
push
pop
xchg
add
pop
sbb
xchg
aas
sbb
mov
repnz
mov
mov
enter
jmp
lds
mov
ds
add
sbb
xor
pop
push
jb
das
xor
jo
scas
std
cmc
(bad)
cmp
lds
(bad)
jne
daa
push
iret
adc
mov
arpl
fild
pop
jbe
loop
xlat
mov
push
sti
push
shl
sbb
cmp
jnp
sub
dec
sbb
addr16
xchg
or
dec
fcmovnbe
stos
cmp
inc
hlt
inc
fbld
push
and
es
ja
sbb
mov
sub
out
sub
or
or
jo
jns
stos
sub
in
or
in
enter
lods
sar
fild
aas
mov
imul
ret
fiadd
pop
pop
inc
fwait
and
pushf
dec
in
or
and
test
dec
adc
sub
repnz
xor
xchg
sub
dec
gs
mov
stos
push
es
das
adc
enter
lds
pop
push
enter
int
pushf
jmp
push
or
adc
repnz
scas
push
test
push
mov
jo
xor
mov
mov
and
mov
add
adc
les
inc
pop
sub
xlat
mov
rcr
ds
jno
inc
iret
into
movs
test
in
ret
xor
mov
ja
stos
xchg
inc
fsub
and
sbb
sub
sub
sti
mov
(bad)
sbb
repnz
jbe
sti
jmp
or
retf
mov
sbb
call
cmp
push
fadd
out
es
mov
push
jno
add
je
retf
dec
enter
push
dec
sub
pop
inc
int
inc
retf
and
xlat
ret
xchg
outs
pop
push
pop
js
out
out
and
mov
xor
sbb
mov
inc
test
adc
mov
out
out
ins
int
or
jb
aad
xchg
mov
sbb
inc
ins
dec
(bad)
(bad)
cli
push
or
mov
pop
aaa
dec
les
(bad)
(bad)
shr
test
mov
mov
pusha
int3
mov
cmc
xchg
adc
cmp
xchg
mov
jge
fisttp
(bad)
clc
cmps
pop
jp
test
push
shr
jmp
mov
imul
mov
and
add
pushf
pop
ror
test
pop
push
ret
imul
and
xchg
mov
iret
call
stos
xchg
stc
loopne
enter
jmp
ret
div
shr
ja
retf
xor
cmps
sbb
mov
cmp
cmova
cmp
and
popa
add
fidivr
outs
or
xor
xchg
leave
stos
fsubr
or
add
cmp
stos
out
gs
pop
lock
gs
sbb
out
cmp
retf
mov
adc
xchg
inc
daa
mov
mov
push
cmp
inc
jmp
jne
cmp
mov
fs
loop
add
push
repnz
sbb
sbb
xor
cs
pop
mov
out
pop
mov
push
mov
dec
xor
mov
pop
inc
fldenv
mov
xlat
cmp
imul
add
cs
sub
jl
sbb
mov
ins
lds
ror
adc
jo
shl
stos
icebp
rol
stc
jae
push
jl
jmp
test
jns
sub
and
cmp
retf
push
mov
mov
xor
scas
cmc
hlt
sub
movs
in
sti
lock
fst
leave
sbb
hlt
popa
mov
out
in
lds
scas
lods
mov
(bad)
aad
xchg
cld
aad
sar
mov
sub
lods
dec
(bad)
xlat
cmp
in
les
loop
bound
lods
mov
pop
mov
xor
pop
xchg
xchg
inc
jno
jg
fwait
pusha
adc
dec
inc
rol
add
xor
addr16
test
inc
mov
dec
inc
add
loope
rcr
sub
or
sar
rcr
jge
push
sbb
mov
adc
inc
and
adc
mov
shl
scas
and
jp
push
shl
test
pop
jb
in
or
add
push
stc
dec
add
hlt
and
adc
sub
inc
dec
adc
dec
push
ss
nop
lds
repz
jge
sbb
std
dec
xchg
out
mov
in
inc
(bad)
sbb
outs
adc
fdiv
(bad)
aad
sbb
cld
push
enter
and
mov
stos
and
xchg
pop
hlt
mov
jmp
enter
inc
or
fst
jp
inc
mov
push
sub
xor
or
loopne
pop
and
or
mov
xor
add
sub
mov
mov
jle
ja
mov
adc
pop
(bad)
pop
xchg
add
mov
pop
ret
mov
mov
mov
mov
push
dec
or
jae
int3
int3
ja
fld
enter
xor
push
cmps
cmp
adc
pop
mov
(bad)
xchg
fimul
ret
loopne
mov
(bad)
(bad)
and
jb
and
call
and
adc
pop
lea
(bad)
jnp
and
adc
(bad)
icebp
int
or
sub
lds
ja
repnz
push
or
xchg
dec
inc
in
push
lds
popf
shl
outs
inc
int3
(bad)
add
add
test
lahf
cmp
imul
inc
sbb
adc
inc
cs
neg
xor
mov
das
mov
retf
push
test
retf
mov
pop
mov
iret
mov
scas
(bad)
inc
mov
add
mov
jle
das
xchg
aad
outs
fdiv
inc
sbb
and
mov
push
add
addr16
in
dec
sub
in
mov
xor
xchg
stos
sahf
pop
loope
test
push
lds
push
(bad)
dec
push
push
ins
cmps
movs
push
retf
xchg
and
cld
fnsave
std
push
sbb
cmp
adc
sbb
inc
xor
pop
inc
jb
mov
(bad)
jnp
loope
dec
cmp
movs
or
pushaw
mov
sub
adc
push
dec
jmp
js
lea
cmc
sub
out
push
repnz
inc
pop
scas
js
dec
pop
dec
in
neg
rcr
mov
or
gs
sbb
sbb
mov
retf
push
out
stc
les
mov
xor
loope
cs
aas
inc
and
add
pop
dec
xchg
mov
mov
and
out
(bad)
gs
sbb
mov
xchg
scas
fsubr
lea
sar
ret
add
add
xchg
push
pop
lods
jns
and
fs
ret
call
test
sub
push
in
test
jo
in
jno
jns
in
dec
rol
js
loopne
pop
lds
(bad)
aaa
mov
adc
popa
dec
xchg
cld
sahf
add
or
adc
adc
mov
xchg
ret
lds
mov
sar
cmp
jge
or
test
fimul
cdq
pushf
adc
imul
call
out
dec
loopne
enter
sbb
arpl
mov
sar
ret
sub
in
in
pushf
ja
aas
jg
mov
pop
es
xor
xlat
mov
inc
test
dec
ins
(bad)
cmp
ds
repnz
iret
xor
jae
sbb
jnp
fild
(bad)
les
bound
fist
push
scas
pop
sub
jb
stc
and
rol
sub
ret
mov
and
imul
(bad)
sub
sti
mov
sbb
or
mov
stos
fsubr
mov
sbb
jno
or
fiadd
mov
loop
mov
clc
ja
xchg
xor
cmp
imul
lahf
mov
popf
sahf
push
(bad)
test
pusha
mov
jae
in
rcl
jl
sub
pop
cmp
fnstcw
xchg
into
mov
sub
pop
ins
lds
or
(bad)
jge
pop
inc
popa
daa
xor
ds
adc
cs
sub
and
leave
mov
out
addr16
std
test
jo
pushf
mov
nop
mov
js
dec
push
or
or
dec
pusha
and
int3
fadd
retf
inc
(bad)
cmp
sbb
scas
cmp
aam
stos
test
push
add
imul
jae
inc
cmp
mov
add
jmp
dec
jmp
adc
xchg
cmp
stos
add
scas
(bad)
jb
jo
inc
int
inc
popa
mov
sub
in
sti
outs
es
push
push
adc
xor
sub
push
enter
mov
lahf
xor
test
(bad)
outs
push
dec
and
push
mov
es
push
xchg
or
stos
adc
inc
fstp
leave
scas
sub
jecxz
repnz
dec
(bad)
(bad)
ins
mov
pop
mov
add
jnp
pushf
ja
cmc
in
int3
sbb
in
repnz
(bad)
ins
adc
stc
leave
ficomp
sahf
adc
out
xchg
jne
push
jl
mov
mov
mov
pusha
nop
or
mov
dec
enter
int
(bad)
stos
dec
sub
outs
or
adc
mov
add
pop
int3
into
or
rcr
adc
retf
cmc
arpl
fs
push
scas
pushf
out
gs
dec
out
outs
data16
cmp
repnz
dec
sub
xchg
sti
mov
push
or
inc
mov
xchg
out
inc
adc
mov
fwait
test
xor
loope
mov
xchg
adc
ret
pop
rcl
(bad)
inc
cld
sahf
fcomp
sub
push
fiadd
jnp
cmp
iret
loope
pop
mov
inc
cmp
mov
mov
fcomi
fisttp
adc
jbe
sub
sub
mov
rcl
loop
xchg
xchg
push
sar
in
lds
iret
sub
aad
cmp
jl
dec
mov
dec
inc
push
mov
mov
lahf
cmp
std
movs
and
popf
cmp
je
xchg
ins
aaa
leave
inc
push
into
nop
push
adc
jne
xchg
adc
popa
xor
pop
jb
call
hlt
arpl
cmp
data16
stos
pop
xlat
cmp
test
scas
in
std
xchg
jle
dec
fmul
push
js
mov
sub
xlat
push
and
jo
imul
and
not
push
pop
adc
popf
xchg
jo
ins
jecxz
push
xchg
jle
bound
lock
xchg
leave
push
ja
push
(bad)
add
adc
call
cli
out
or
mov
cmp
out
clc
shr
jne
and
stos
cmps
sub
lods
xchg
dec
popa
add
gs
add
sbb
jne
imul
cmp
mov
pop
jp
push
(bad)
lods
add
pop
jns
stc
mov
fs
loopne
dec
neg
gs
lock
loopne
and
and
ss
cmp
cli
je
or
hlt
fadd
and
sub
test
loop
sbb
mov
cmp
enter
dec
dec
rcl
jl
mov
aas
movs
cld
fwait
aam
sbb
mov
shr
pusha
xlat
les
into
(bad)
(bad)
push
in
dec
push
ss
movs
call
xchg
adc
mov
jmp
retf
mov
ins
stos
lods
ret
xlat
shl
outs
dec
push
jne
ret
xchg
jne
adc
xchg
sub
push
jecxz
stos
jle
and
pop
and
mov
test
dec
pop
add
jg
fisubr
call
cwde
popf
fstp
xchg
pop
in
fndisi(8087
bound
mov
aaa
sbb
push
cmps
cdq
ret
fwait
xor
push
add
jp
ja
std
adc
icebp
cmp
fld
xchg
je
sbb
int3
stc
hlt
mov
pop
xchg
shl
jns
sbb
ss
bound
test
cmp
cmp
(bad)
in
sbb
pop
xchg
mov
into
jmp
xor
rol
jne
ins
push
in
mov
sar
inc
xor
outs
or
xor
dec
sub
mov
push
add
inc
pusha
test
adc
(bad)
pushf
out
xor
rol
dec
mov
add
mov
imul
inc
data16
ds
cwde
and
not
mov
jnp
ins
hlt
fninit
fnclex
inc
imul
scas
push
shr
or
xor
push
imul
push
mov
addr16
adc
add
lds
sti
sar
jno
xchg
into
xchg
mov
jne
ins
das
out
rdmsr
push
push
fwait
add
cmp
mov
sub
ja
test
sub
lods
ret
dec
fsub
addr16
fldpi
add
hlt
xchg
xor
popf
leave
push
mov
test
jmp
mov
cmps
js
xchg
imul
cmp
popf
mov
ja
and
int3
cmps
ins
pop
fst
movhps
lock
fsubr
sub
arpl
outs
stos
pusha
in
test
jmp
mov
sahf
cmp
je
mov
sbb
pop
imul
adc
inc
cs
push
lahf
push
sbb
sub
test
jnp
mov
adc
mov
xor
sbb
xor
mov
ds
outs
(bad)
mov
push
aaa
fsubr
inc
out
cmp
pop
cmp
or
fdivr
(bad)
outs
or
in
jp
inc
pop
in
mov
add
scas
or
sub
into
xchg
daa
lock
movs
push
mov
mov
cmps
push
cmp
jbe
int3
outs
push
ins
push
mov
fwait
mov
xchg
sub
push
(bad)
out
mov
jp
push
add
pop
jecxz
retf
mov
cmp
ss
adc
(bad)
adc
test
fbstp
mov
fs
je
adc
dec
ror
jne
push
cwde
lods
outs
adc
inc
scas
mov
neg
mov
xchg
mov
std
xlat
pop
daa
adc
jl
lock
mov
imul
in
shr
cli
mov
hlt
xor
push
ja
xor
xchg
sbb
add
aad
call
loop
xchg
ss
fst
and
daa
mov
rol
cli
adc
das
sbb
pop
pop
loopne
pop
jb
xor
ins
pop
(bad)
push
sbb
imul
ins
pop
ror
or
adc
jbe
sub
lahf
iret
outs
jnp
mov
or
bound
loopne
dec
inc
jmp
ror
xchg
outs
aad
ror
dec
add
pop
pop
mov
cmp
mov
pop
call
and
push
inc
mov
mov
jns
dec
imul
xchg
gs
out
adc
cmp
stc
adc
inc
sbb
repz
loopne
inc
add
rol
mov
push
lock
call
mov
dec
movs
inc
push
mov
jo
mov
xchg
and
push
outs
(bad)
stos
inc
mov
lods
mov
pop
adc
(bad)
jp
imul
movs
dec
jge
ds
inc
add
ror
xchg
mov
mov
lods
aas
mov
pop
loope
out
xor
xchg
xchg
adc
(bad)
jae
add
shr
dec
(bad)
cmp
xor
mov
retf
jle
mov
imul
call
sub
das
xchg
mov
mov
dec
loop
enter
fisttp
pop
stos
add
or
icebp
stc
cs
test
cmp
fucom
ret
cs
jmp
int3
inc
cli
xor
ja
(bad)
test
cmc
mov
dec
cmp
(bad)
in
push
ja
sbb
push
and
sub
xlat
imul
jno
cld
sub
push
push
xchg
pusha
iret
pushf
xchg
ret
pushf
push
dec
dec
jecxz
adc
push
ror
xor
and
loopne
hlt
sub
or
adc
pop
or
adc
push
or
loop
jmp
mov
xchg
jge
lock
mov
inc
icebp
xor
shr
mov
and
scas
pop
mov
loope
sahf
cli
jns
pusha
sub
inc
js
jecxz
sub
and
(bad)
xchg
aam
sub
aas
dec
ja
outs
pop
nop
jp
(bad)
ror
add
mov
inc
add
dec
jmp
xchg
mov
push
and
xlat
cdq
pop
adc
aas
pop
aas
cmp
jbe
mov
(bad)
js
(bad)
icebp
call
inc
lods
fnstenv
pop
mov
ucomiss
push
(bad)
push
inc
pop
in
loop
cli
popa
lods
cld
pusha
shr
cmc
daa
sbb
sub
xchg
adc
sbb
stc
xchg
lahf
out
xchg
in
stc
xor
xor
mov
and
hlt
cmc
shr
std
repz
and
aaa
pop
adc
sahf
sbb
inc
icebp
inc
dec
push
mov
out
shl
into
mov
push
mov
dec
movs
mov
daa
or
test
fcmove
icebp
(bad)
stos
inc
dec
xor
mov
lea
cmps
push
outs
imul
stos
jbe
push
sub
mov
stos
pop
add
int3
mov
ins
inc
push
xor
or
pop
push
sub
call
mov
pop
push
in
jns
add
jb
dec
ret
(bad)
dec
ret
int3
sbb
xchg
inc
pop
imul
sti
repnz
inc
pop
mov
popa
xor
test
mov
mov
dec
mov
popa
test
push
jmp
xchg
retf
rol
cdq
ds
lds
test
fbld
fcmovu
jns
nop
sbb
mov
ja
out
add
pop
mov
xor
mov
outs
adc
xor
adc
xor
pushf
mov
xchg
enter
es
lahf
xchg
push
and
aaa
and
or
and
jo
dec
lahf
leave
inc
inc
idiv
pop
ja
mov
es
pmuludq
mov
bound
es
lock
lock
int3
test
xor
mov
mov
pushf
arpl
cmp
call
shl
inc
(bad)
int3
dec
inc
cmp
mov
test
adc
int3
jmp
in
in
arpl
pop
clc
jmp
mov
call
mov
mov
icebp
arpl
pop
and
movs
xor
mov
fidiv
mov
pop
xchg
mov
pop
rol
rol
mov
xor
rcl
div
xchg
in
in
inc
bound
xchg
cmp
cdq
jle
add
sub
pop
pop
iret
sbb
mov
arpl
daa
std
loope
iret
adc
stc
xchg
in
cmps
push
call
imul
cwde
fmul
cmp
in
cmps
mov
add
setno
fld
jne
xlat
mov
enter
push
(bad)
lods
cmc
or
pop
and
fild
dec
jae
int
pop
out
mov
mov
loopne
sbb
jge
mov
mov
pop
mov
cmps
jp
xchg
mov
lahf
cdq
jo
enter
sahf
push
sbb
pusha
addr16
pop
sub
not
push
cdq
mov
pop
push
iret
adc
cwde
loop
sbb
in
loopne
add
dec
push
mov
lods
out
enter
add
in
arpl
push
sbb
mov
xor
and
jno
adc
inc
(bad)
mov
xor
inc
imul
dec
repnz
fild
test
jno
mov
cmps
cmp
adc
iret
lea
pop
outs
jp
pop
push
cmc
and
inc
jmp
sbb
rcr
and
push
dec
xchg
out
xchg
pop
aad
scas
push
adc
inc
popa
xchg
dec
iret
es
out
ret
cmp
and
pop
add
mov
repz
lea
jmp
stos
cmp
out
mov
xchg
mov
inc
retf
add
mov
xchg
ja
jmp
in
js
jns
out
loopne
inc
pushf
jl
retf
xor
dec
std
test
repnz
push
jge
mov
(bad)
mov
sbb
jo
xchg
lods
inc
sub
int3
cs
mov
mov
sti
cmps
add
adc
mov
imul
push
loop
jno
xchg
sahf
sub
call
mov
push
push
or
mov
test
pop
cmp
xor
hlt
nop
xchg
repz
mov
adc
(bad)
pop
repnz
mov
loopne
push
jbe
retf
jae
mov
and
ins
movs
sub
outs
push
mov
outs
sub
aad
dec
aas
fbld
inc
jae
add
fwait
xor
xchg
mov
sar
stos
push
mov
pop
push
mov
shl
pushf
xor
push
enter
daa
add
sub
test
lods
(bad)
dec
outs
inc
push
aas
ret
push
movs
inc
dec
ins
pop
mov
mov
outs
mov
test
dec
hlt
cmp
jo
jl
add
movs
jb
mov
xor
mov
(bad)
ins
scas
push
sub
and
rol
jle
mov
leave
mov
push
jmp
into
cli
dec
sub
mov
(bad)
cmp
sbb
test
ret
sbb
aaa
xchg
push
sub
add
scas
pop
adc
or
inc
sbb
push
test
gs
push
fcom
sbb
movs
xor
cmps
push
mov
test
push
mov
test
jnp
xor
jne
clc
mov
adc
mov
cdq
inc
movs
ins
push
xor
mov
adc
or
xor
idiv
or
mov
ror
push
cmps
push
in
ja
frndint
fs
sbb
pmaxsw
push
mov
dec
fldcw
inc
xor
loope
movs
and
or
in
not
rcr
mov
push
add
ds
clc
cld
pop
aaa
adc
(bad)
mov
fmul
xchg
pop
sbb
pop
out
shr
mov
(bad)
cmc
retf
cmc
xchg
dec
dec
jge
test
jns
xlat
jge
push
imul
sub
(bad)
out
fwait
cmp
xchg
test
dec
retf
and
test
lods
dec
imul
leave
push
adc
xchg
(bad)
dec
pop
push
lods
xlat
das
add
jecxz
inc
lods
mov
aaa
jo
ja
add
inc
(bad)
aad
xchg
sbb
sar
mov
push
fwait
pushf
aam
loope
jns
loopne
inc
push
(bad)
and
xchg
or
das
cli
daa
jo
mov
imul
mov
mov
aam
cmp
in
in
clc
loopne
ss
stc
push
pop
add
call
mov
push
or
hlt
sar
jmp
or
out
(bad)
mov
jg
xchg
dec
fstp
xlat
aad
and
mov
xor
push
pop
leave
push
fsubr
mov
adc
cmp
movs
loope
cmps
cmp
das
ja
mov
and
push
mov
cmp
jae
pop
pop
cwde
dec
inc
inc
mov
push
mov
outs
jae
dec
pop
les
movs
ins
loopne
mov
sbb
inc
sbb
jae
jmp
or
jp
das
jp
mov
retf
or
cmp
jl
add
add
ret
and
imul
hlt
and
sbb
fcmovb
xchg
out
or
std
in
push
jne
sub
leave
cmp
jmp
in
loope
arpl
sub
mov
sub
shl
mov
pop
es
fsubr
sub
pushf
push
and
pop
arpl
stos
pop
repz
cmp
inc
sbb
aad
inc
sub
sub
adc
movs
stos
and
(bad)
adc
mov
adc
dec
inc
jmp
shl
repz
bound
loope
push
retf
imul
ss
movs
pop
mov
ss
lahf
fs
addr16
(bad)
fldenv
xlat
test
mov
rcr
mov
sar
mov
jmp
add
arpl
mov
xchg
fwait
cs
fwait
sbb
jb
ins
mov
sbb
cmp
dec
xchg
cmps
movs
aaa
and
in
pop
pop
cmc
js
call
mov
sub
sbb
lds
cdq
sub
leave
dec
fsub
loopne
pop
push
sti
xchg
daa
jno
push
scas
or
(bad)
in
mov
xor
cs
mov
pop
mov
jmp
test
stos
pop
mov
jmp
jecxz
adc
and
arpl
rol
cli
jae
pusha
scas
mov
outs
mov
out
mov
jle
mov
fsub
(bad)
aaa
dec
mov
push
out
popa
stc
push
rol
(bad)
js
in
jo
sub
pop
scas
push
dec
sahf
imul
or
(bad)
xor
into
inc
rep
jmp
jg
mov
loop
pusha
mov
mov
adc
fiadd
mov
shr
pop
jbe
mov
loop
dec
mov
sti
cmc
int3
ins
or
(bad)
and
adc
dec
mov
bound
xor
sub
mov
in
aam
ret
jns
or
ins
int3
int3
lahf
xlat
add
inc
popf
sbb
not
add
or
jmp
add
aad
stc
call
xor
sbb
mov
mov
mov
mov
pop
sbb
out
sbb
xchg
clc
fsubr
cmps
mov
stos
icebp
in
and
out
jl
and
in
in
loop
loop
or
popf
jmp
jmp
xor
sbb
xchg
or
xchg
psrlw
int
mov
mov
push
add
pop
xor
sbb
dec
dec
std
jae
push
push
ret
ds
jmp
mov
aam
mov
adc
mov
push
retf
inc
sti
retf
sub
jp
pop
and
inc
mov
(bad)
(bad)
mov
test
jo
cmp
iret
call
in
shl
fdivr
or
cmp
rcl
push
stos
mov
or
cs
pop
lahf
push
dec
lahf
inc
mov
sbb
push
push
sbb
sti
sub
pop
enter
add
sub
mov
and
stos
mov
xor
popf
aam
adc
js
shl
movs
xchg
sub
sbb
and
push
mul
in
lds
add
push
rcl
in
sbb
cwde
call
dec
jg
ds
push
sbb
sub
and
int
add
loope
stc
dec
add
and
stos
mov
jg
mov
mov
sbb
push
mov
cmp
adc
cmp
or
test
mov
inc
fild
repz
stos
mov
outs
test
lea
jbe
xchg
sbb
gs
mov
in
mov
pop
call
into
xchg
mov
jmp
cld
push
push
leave
(bad)
loope
rol
push
popf
inc
or
dec
in
sbb
sar
mov
(bad)
and
dec
icebp
popa
inc
mov
gs
shl
dec
push
outs
jp
lea
cld
add
inc
mov
dec
or
push
adc
pop
add
arpl
call
inc
mov
loope
mov
pusha
add
not
mov
ins
jns
shl
or
mov
dec
lock
pop
clc
cmps
jnp
into
in
data16
mov
inc
adc
imul
jbe
sbb
stc
clc
mov
(bad)
fisttp
inc
and
movs
aam
sbb
rcr
into
les
xchg
fwait
cmp
ror
or
iret
push
push
cmps
retf
pop
adc
xor
or
mov
pop
pop
jle
xchg
jecxz
jg
mov
in
loop
ja
ja
cmc
cli
jp
pop
lds
fiadd
repnz
dec
ins
mov
adc
sub
push
jns
mov
xchg
shr
jno
mov
sub
stos
test
call
jl
adc
outs
sbb
out
jmp
out
mov
or
xchg
mov
stos
loope
(bad)
aas
les
movs
dec
mov
xchg
iret
or
xchg
jmp
ins
cmps
fnstenv
(bad)
out
js
and
dec
loop
and
outs
pop
push
ficom
ins
jecxz
adc
sahf
out
push
aam
jge
pop
mov
add
popa
ds
outs
call
test
adc
in
mov
in
jp
jmp
adc
or
popf
adc
cmps
mov
dec
dec
nop
mov
psubb
fidiv
cmp
loope
hlt
pop
dec
cmp
and
mov
lea
je
stc
out
je
mov
shr
mov
inc
shl
cs
iret
loope
jnp
jae
es
cmp
push
fisttp
and
add
jnp
add
loopne
fld
sbb
inc
mov
sbb
lea
out
sub
jo
sbb
mul
mov
aaa
mov
enter
sub
cmc
mov
add
xor
or
jg
jp
sub
xchg
xor
mov
scas
push
add
sti
mov
dec
sub
jo
jnp
stos
stc
in
sub
call
jno
pushw
pop
(bad)
mov
loop
loopne
(bad)
mov
inc
xor
cmp
push
pmaddwd
jge
inc
retf
hlt
mov
daa
mov
jo
js
cdq
ret
xor
xor
push
jg
sbb
fisub
idiv
outs
ficom
test
pop
cld
or
inc
stos
mov
dec
jns
mov
add
leave
mov
sbb
aaa
xchg
shl
es
push
push
loopne
jle
xchg
daa
jne
and
ret
in
pusha
leave
cdq
stc
pop
shr
jb
add
imul
mov
mov
ja
cmp
imul
test
xor
push
jo
push
inc
cmp
call
xchg
loope
xchg
cmp
jne
imul
sub
push
cmp
aaa
cmp
out
cmp
dec
pop
mov
mov
mov
leave
mov
cmp
and
test
mov
pusha
push
add
ret
retf
aad
cmp
jl
js
enter
mov
in
jb
cmps
je
jbe
mov
arpl
outs
fld
enter
mov
sub
push
clc
sbb
pmulhuw
aas
iret
mov
jne
fbld
retf
loopne
cmps
xchg
or
gs
adc
mov
inc
jp
aaa
add
into
mov
pusha
int3
pop
mov
jle
adc
jg
sahf
sbb
aaa
(bad)
cdq
lods
and
xchg
outs
ja
sbb
sub
fs
mov
or
pop
inc
jge
clc
out
mov
lods
enter
stos
jno
mov
adc
shr
test
dec
mov
dec
mov
mov
inc
outs
cwde
jnp
adc
imul
xchg
fidiv
mul
retf
cld
xchg
jae
in
imul
push
jno
adc
add
add
xchg
aaa
test
inc
ss
movs
cmp
sub
clc
sub
mov
imul
lock
cmp
lods
mov
enter
stos
es
dec
fs
shl
rcl
into
imul
int3
lahf
mov
stos
in
fidiv
mov
rol
fstp
pop
fcom
xchg
stos
mov
mov
nop
mov
call
(bad)
cli
jmp
ret
xor
cmps
sahf
xchg
std
xchg
into
inc
hlt
sbb
xchg
popa
pop
popf
div
mov
jmp
dec
cdq
mov
or
jns
xor
push
push
adc
dec
lahf
adc
js
push
mov
sbb
cmp
push
mov
push
dec
jp
rcl
aam
sbb
dec
and
rcr
sub
push
cs
fidiv
popa
pop
inc
sbb
pusha
push
outs
or
dec
xor
mov
cmp
adc
in
adc
mov
pop
add
xor
popf
test
cs
add
mov
xchg
iret
mov
mov
push
idiv
or
hlt
mov
int
sub
ja
push
inc
jmp
(bad)
xor
inc
adc
sbb
nop
jmp
popa
mov
inc
(bad)
cmp
aas
or
arpl
popa
mov
mov
js
(bad)
xchg
add
cmp
lods
jo
pop
test
sahf
cmp
mov
xlat
movs
jne
rcl
aad
mov
xchg
sbb
lods
rol
jmp
neg
out
mov
scas
arpl
jbe
jp
cmp
inc
and
popa
cmp
pusha
shl
push
mov
or
mov
loopne
iret
sbb
xchg
stos
out
push
cmps
jb
or
mov
retf
mov
pop
xor
jbe
xor
daa
sub
fnstenv
cmp
jmp
mov
scas
(bad)
xchg
out
mov
fst
sub
xchg
fsub
jl
cs
mov
mov
xchg
mov
jo
add
cld
mov
xchg
daa
mov
mov
inc
cmc
test
lds
ret
xor
adc
mov
mov
idiv
adc
test
imul
arpl
pushf
push
cmp
adc
lds
cmp
xchg
xchg
cmp
jecxz
mov
and
and
test
pop
int
fs
cmps
aam
bound
dec
and
inc
ror
mov
push
repnz
push
aad
push
push
dec
sub
mov
mov
sub
popf
scas
std
xchg
loop
loope
lahf
pop
xor
inc
jb
push
mov
repz
ins
push
push
pop
mov
jmp
int
jae
movs
fcom
cmp
pop
inc
pop
into
out
mov
lea
shl
lahf
retf
push
out
and
imul
xchg
mul
movs
lock
clc
jne
sbb
add
jle
ror
xchg
inc
shl
ja
or
and
add
jmp
leave
test
in
fs
mov
add
mov
or
repz
repz
test
lds
and
mov
ins
shl
jns
inc
jle
mov
mov
call
aas
adc
out
jne
inc
loope
outs
lock
hlt
push
int
ss
xchg
push
push
outs
jnp
xor
push
inc
loop
or
in
js
cmps
das
adc
repnz
jecxz
add
xchg
fwait
push
jge
hlt
call
mov
xchg
jo
jge
jne
sbb
mov
out
xchg
lock
(bad)
call
xor
dec
adc
jecxz
xor
fdiv
(bad)
call
mov
mov
addr16
retf
sahf
in
lods
aam
out
add
out
test
adc
add
adc
ss
mov
lods
ja
pop
in
inc
pop
mov
mov
mov
push
outs
jle
js
push
pushf
push
(bad)
ss
push
stos
fucomp
xor
icebp
adc
push
adc
cmps
addr16
sub
loope
and
outs
push
xor
mov
jle
adc
add
fnstenv
shl
or
lea
or
cdq
sbb
ins
sub
push
xor
xor
out
repnz
imul
pop
fwait
fwait
pop
lods
shl
in
scas
dec
push
(bad)
cmp
pop
outs
sub
adc
sbb
mov
int
push
aaa
inc
dec
fxch
sub
call
ror
inc
dec
movs
movs
sbb
xor
or
aad
jmp
jl
rol
dec
xchg
in
das
sbb
dec
scas
aam
sub
sbb
dec
mov
loop
push
into
xchg
adc
clc
aas
mov
pop
cld
movs
mov
hlt
lods
cmp
xor
jbe
xchg
mul
add
mov
jmp
dec
lods
and
push
loopne
pusha
iret
mov
test
data16
xor
add
or
adc
jle
or
jp
push
sub
pop
fimul
stos
jmp
repz
inc
shr
add
and
loope
xchg
jle
fsub
pop
addr16
mov
add
or
jge
es
mov
add
dec
lods
cmp
xchg
mov
je
lahf
jg
xchg
sub
imul
(bad)
test
test
outs
sub
ret
rol
inc
repz
mov
stc
push
mov
fld
fwait
cmp
push
dec
retf
vpaddw
inc
mov
in
stc
inc
push
xor
mov
das
inc
in
jge
lds
(bad)
jmp
or
sbb
add
scas
dec
ror
in
add
adc
fst
std
mov
xor
pop
sub
push
push
repnz
cwde
loopne
mov
jge
sub
bound
imul
rol
inc
bound
mov
xor
call
mov
jecxz
jae
add
std
enter
aas
mov
fld
cmps
push
cdq
inc
adc
push
or
fidiv
adc
out
or
xor
nop
clc
loop
mov
xor
enter
int3
neg
jg
cwde
(bad)
js
push
mov
xchg
push
fimul
fnstcw
xchg
imul
xchg
sbb
mov
out
push
hlt
inc
jnp
xchg
or
and
push
lods
fidivr
adc
pop
xchg
push
mov
mov
adc
sbb
add
leave
aad
in
and
or
dec
mov
std
in
sub
imul
movs
sahf
or
test
sub
mov
adc
(bad)
scas
adc
and
mov
dec
cmp
int3
lods
pop
and
das
sbb
mov
test
outs
stc
dec
cmp
ja
add
pushf
rcr
cmps
and
mov
inc
nop
test
or
(bad)
outs
cmp
and
lahf
jg
dec
lds
or
ja
mov
mov
mov
in
dec
out
mov
mov
xchg
loope
in
jbe
push
add
mov
xchg
dec
mov
sti
xor
jecxz
inc
or
xor
mov
sbb
mov
cld
retf
xchg
jb
mov
push
test
fwait
dec
jns
(bad)
popf
loopne
pop
call
into
cmp
sub
test
xchg
mov
loopne
(bad)
fstp
fstp
test
xchg
clc
(bad)
mov
push
aam
cmp
call
aad
fnstenv
dec
pop
xchg
mov
fmul
adc
nop
(bad)
dec
test
pop
mov
es
sub
aam
pusha
(bad)
sbb
mov
js
push
jmp
std
or
js
xor
inc
xor
fiadd
stos
in
xor
dec
push
lds
push
mul
xchg
pop
jmp
cmp
(bad)
fist
loop
mov
inc
mov
mov
pop
mov
adc
inc
mov
jbe
aas
inc
or
jecxz
test
(bad)
mov
data16
cmp
xchg
int
mov
mov
(bad)
sbb
jmp
bound
outs
xor
lock
inc
mov
scas
shl
jbe
ret
mov
repz
scas
ss
push
xor
or
bts
fbld
pop
sub
cld
movs
inc
sahf
fimul
jbe
hlt
cmps
add
mov
jmp
mov
outs
and
push
push
les
pop
mov
pop
mov
push
sbb
lods
ds
adc
gs
mov
arpl
retf
gs
xor
idiv
or
(bad)
jbe
cmp
int
adc
or
or
call
mov
fidiv
cwde
imul
or
int3
sub
rcr
pop
movs
cmp
div
cmps
repnz
(bad)
loope
or
dec
pop
cmp
xchg
scas
test
cmp
pop
adc
ins
adc
stos
add
sbb
and
bound
in
clc
bnd
movs
std
aas
btr
outs
hlt
das
xor
in
pop
add
movs
fcom
xor
jg
fimul
(bad)
aad
mov
mov
jecxz
mov
push
lahf
cmp
sub
scas
ss
cmp
or
es
xchg
lods
cli
or
sbb
jne
or
or
xchg
push
jnp
add
push
adc
inc
cmp
jmp
mov
cmp
mov
cmp
shr
or
jl
cmp
call
dec
pop
mov
xchg
jmp
jo
lea
mov
cli
syscall
sbb
test
int3
xlat
cmp
pop
inc
mov
cmps
jb
loop
or
xor
ins
jae
xlat
sbb
call
sub
enter
mov
jg
push
into
ret
enter
aam
jno
stos
dec
je
adc
lahf
mov
(bad)
and
jg
lea
mov
sub
cmps
push
nop
outs
mov
push
adc
push
mov
mov
cmp
push
fs
and
in
mov
pop
xlat
sahf
pushf
xchg
sub
xchg
js
aam
aaa
clc
cmc
sahf
jmp
push
push
stos
fisubr
es
push
xchg
clc
xchg
hlt
pusha
jmp
not
test
fsub
adc
in
cmp
addr16
repz
mov
ret
cdq
mov
in
repz
adc
stos
getsec
(bad)
scas
cli
hlt
test
adc
(bad)
ins
mov
sub
cmc
aaa
inc
mov
dec
jbe
sar
adc
jmp
xor
mov
ror
stos
arpl
push
push
sub
add
movs
dec
add
sbb
jmp
mov
and
push
inc
in
rol
mov
(bad)
dec
cmc
push
xchg
cmp
jns
iret
in
repz
sub
mov
xchg
sub
sbb
repz
push
(bad)
cld
pop
dec
out
daa
nop
xor
push
dec
mov
mov
and
popa
push
scas
sub
inc
lea
or
clc
add
in
mov
imul
idiv
out
or
xor
cmp
inc
sub
out
push
imul
xor
lock
cld
jno
sub
sub
pushf
push
stos
add
push
ffree
push
movs
nop
imul
jg
xchg
idiv
pushf
mov
jge
mov
jo
mov
mov
cmp
and
xchg
sub
rcl
adc
shl
fsubr
pop
pop
(bad)
hlt
add
sbb
cmps
outs
scas
inc
add
sub
pop
fist
ins
rcr
arpl
jns
and
scas
stc
sub
adc
jecxz
aaa
mov
jae
cwde
pop
cmp
adc
cmp
inc
mov
in
cmp
mov
dec
and
scas
mov
adc
shl
push
fsubr
pop
repz
jnp
jne
cmp
adc
mov
shl
bound
sub
out
jecxz
inc
int3
or
dec
or
inc
sbb
cmc
cmp
and
hlt
stos
xor
dec
xlat
push
inc
xor
or
int
adc
movs
xor
scas
and
jne
rol
or
stc
push
in
cmp
jae
cdq
dec
shl
cld
je
aad
jg
xchg
(bad)
cmps
push
call
test
cmps
in
leave
(bad)
call
sti
cld
pop
stc
out
add
rcr
cmpxchg
test
cmp
xchg
cmc
shl
in
cmp
nop
xchg
push
mov
movs
mov
lea
repnz
cmps
mov
and
or
(bad)
adc
sti
pusha
sahf
xor
jns
mov
inc
mov
out
into
aaa
rcl
push
jns
mov
and
sahf
push
imul
daa
xchg
xchg
(bad)
outs
pop
jge
adc
dec
into
add
js
mov
imul
stc
xlat
(bad)
mov
or
jbe
das
pop
jbe
aam
inc
icebp
jmp
ja
outs
repnz
out
neg
mov
aaa
(bad)
hlt
mov
push
cwde
mov
lods
push
jg
fcom
sar
xchg
mov
sub
cli
out
in
push
push
clc
pop
test
imul
sbb
je
aad
push
cmp
jnp
outs
jmp
std
sbb
mov
lods
push
xor
sub
cld
movs
mov
lds
int3
cs
xchg
cmp
mov
cmp
dec
mov
retf
dec
jge
pusha
adc
ins
test
pop
enter
retf
jmp
and
push
sub
je
push
pusha
mov
scas
adc
jmp
pusha
push
mov
into
das
push
clc
mov
in
add
xchg
push
jle
sub
loopne
cmp
push
rcl
movs
push
sub
push
pop
sub
movs
push
scas
dec
sub
shl
fs
call
pop
icebp
inc
aaa
xchg
aad
sub
pop
shl
xlat
enter
add
out
outs
xchg
loope
sub
cmc
scas
xor
js
xchg
hlt
lods
push
jmp
retf
fbstp
or
loop
bound
rcl
and
xchg
dec
jmp
sbb
movs
pop
out
or
scas
fdiv
fxch
inc
sbb
mov
and
dec
pop
jl
nop
jle
xor
jge
mov
sub
out
cmps
jae
js
je
ret
(bad)
jecxz
xchg
or
inc
lock
and
push
popf
jle
mov
dec
out
xchg
dec
jnp
mov
hlt
pop
dec
add
mov
xor
cs
inc
test
cmovne
imul
or
jno
pop
out
int
cmp
jl
adc
or
enter
pop
adc
cwde
das
inc
loope
popf
mov
add
mov
jmp
mov
mov
aaa
pop
or
cmp
xlat
mov
(bad)
int3
fbld
sar
and
jle
aad
dec
dec
and
cli
test
sub
out
mov
or
js
inc
(bad)
in
xchg
jmp
enter
inc
(bad)
loopne
push
and
and
fs
fucom
das
in
or
lea
in
xchg
and
sti
dec
outs
jmp
mov
jl
dec
fld
add
push
pushf
jmp
popf
es
and
jle
or
rol
fdiv
in
lea
push
retf
jp
add
imul
inc
jg
lods
xor
lods
fist
loope
aaa
movs
lds
inc
mov
dec
in
mov
hlt
push
mov
mov
daa
test
and
pop
in
mov
jne
xchg
mov
pop
into
adc
and
fs
dec
and
mul
lods
imul
stos
xchg
cmps
mov
mov
fadd
or
push
retf
mov
hlt
cmps
pop
lahf
add
test
jmp
or
sbb
xchg
dec
stos
push
sub
dec
icebp
dec
cli
push
dec
mov
cli
xor
hlt
popf
out
jmp
hlt
pushf
or
cmp
dec
xor
in
mov
shl
cmps
jg
sbb
sub
add
out
test
xor
in
cmp
cmp
bound
jl
cmp
pop
sub
outs
mov
inc
inc
and
js
pop
cmp
daa
addr16
jmp
mov
xchg
imul
loop
inc
sbb
inc
(bad)
pop
data16
scas
int
add
cli
pop
mov
movs
inc
mov
cmp
stos
(bad)
mov
lods
or
sbb
movs
arpl
pop
rcr
outs
sbb
xchg
icebp
movs
mov
mov
daa
les
xchg
jae
bound
push
mov
test
add
xchg
cmp
dec
popf
adc
ror
xchg
icebp
inc
and
adc
and
lahf
dec
out
ins
ja
stos
fidiv
push
ds
sub
repz
movs
adc
ja
dec
add
sti
dec
sbb
and
push
pop
inc
pop
icebp
sar
ja
cmp
jo
cmps
inc
(bad)
pop
jge
mov
into
dec
xchg
scas
imul
inc
stos
push
popa
mov
xor
sub
add
ja
and
pop
sahf
fsub
xor
sar
mov
mov
ss
repnz
jnp
xchg
push
pop
jne
mov
into
ds
lods
pop
jnp
gs
movs
xor
mov
lds
ret
inc
pop
mov
scas
xchg
add
xchg
push
int3
and
fsubr
leave
iret
lods
dec
fdivr
pop
inc
sbb
jl
sub
push
(bad)
lds
dec
aad
pop
cmc
inc
out
movs
add
dec
scas
and
inc
and
fadd
and
cld
pusha
add
out
clc
mov
inc
mov
sub
mov
inc
sbb
and
jae
(bad)
mov
cli
adc
sti
cmp
popa
arpl
inc
retf
(bad)
sub
lods
sbb
or
je
inc
mov
and
cmp
add
sub
in
in
dec
mov
cmp
call
aaa
dec
mov
fcom
mov
lods
sub
adc
sbb
test
add
dec
jge
aas
fwait
loop
dec
ja
jg
std
lods
dec
and
pusha
add
lahf
sbb
adc
xchg
ss
cld
sub
mov
sub
fld
hlt
test
loope
mov
cmp
icebp
imul
xchg
sub
imul
or
(bad)
adc
out
test
pop
xchg
push
into
jmp
outs
xor
add
add
inc
ffreep
dec
aam
inc
imul
addr16
ror
mov
xchg
fimul
xchg
pop
out
cmp
in
xor
xchg
and
aad
jle
adc
cmps
stos
daa
inc
rol
out
fistp
push
call
es
sbb
mov
push
add
xlat
sar
pop
mov
inc
push
adc
mov
inc
in
lock
xor
jg
jb
xor
jne
cmp
xchg
movs
sbb
cmp
dec
data16
or
mov
mov
leave
mov
add
inc
sub
test
adc
cmp
add
xchg
xchg
xor
lods
(bad)
scas
lods
imul
and
dec
outs
shl
mov
cmp
repz
and
mov
mov
ret
jbe
arpl
(bad)
out
inc
(bad)
pushf
in
neg
pop
adc
out
adc
adc
jle
sub
and
pop
jns
out
cmps
cwde
sbb
xor
retf
(bad)
push
test
shl
in
pcmpeqw
cmp
add
sbb
shr
xchg
ins
or
pop
cmps
ins
aad
sbb
pop
cmp
push
ficom
out
gs
xor
in
cwde
xor
ss
outs
jne
cdq
je
adc
mov
bnd
into
pop
push
fidivr
push
push
sbb
pop
fnstcw
sbb
pop
and
cmps
xor
aad
scas
jl
shl
iret
sub
fs
pusha
movs
jecxz
mov
fist
xchg
xlat
jo
out
cmps
aaa
out
shl
cmp
sbb
add
cmps
aaa
jmp
adc
adc
stos
cmps
cmp
mov
das
jo
stos
lea
scas
xchg
mov
jg
jmp
and
int3
test
lds
or
lods
push
popf
sar
in
push
fidivr
aam
(bad)
out
add
sahf
call
sub
or
pop
hlt
popa
mov
push
sub
jne
xor
add
int
xchg
push
xor
inc
inc
fstp
mov
inc
xlat
mov
xor
inc
xor
jbe
cli
mov
xchg
or
jb
push
dec
popa
xchg
and
mov
arpl
cmp
sbb
fstp
pop
cmp
push
ret
pop
adc
ds
sub
repz
aaa
inc
movs
ja
enter
aaa
add
nop
cmp
call
adc
jne
lahf
gs
scas
pop
fdiv
mov
push
xor
adc
out
sbb
lock
clc
cs
add
leave
cld
mov
(bad)
rcl
mov
sub
mov
push
popf
mov
loopne
mov
int3
pop
retf
push
call
inc
adc
repnz
es
(bad)
stos
mov
mov
mov
jnp
sub
mov
inc
jae
mov
adc
inc
pop
jmp
icebp
pop
daa
or
dec
xor
leave
pop
in
loope
or
push
dec
mov
mov
mov
or
pop
jbe
retf
mov
mov
aam
rcr
jge
sbb
fidivr
inc
pop
sbb
retf
xchg
leave
dec
in
(bad)
out
enter
cmp
ss
ret
retf
inc
mov
jl
jmp
jb
jmp
(bad)
jl
js
popf
lock
das
mov
adc
xor
(bad)
pop
rcl
in
(bad)
or
sbb
dec
push
rol
cmps
jge
mov
inc
nop
cmp
data16
rol
or
pop
cmp
jb
mov
cmp
sbb
test
push
pmaxsw
repz
jl
popa
pop
and
pop
jp
es
clc
cmp
movs
jg
xchg
and
and
sti
add
mov
mov
ret
jae
fnstcw
xchg
push
test
test
and
push
sbb
sub
aam
xchg
or
(bad)
ins
les
es
es
rol
dec
fnstcw
loopne
outs
or
push
sub
jns
in
cmp
jle
(bad)
mov
push
mov
mov
loopne
fild
mov
aam
adc
mov
jmp
xor
push
mov
push
cmps
pop
add
sub
sub
push
jno
xor
and
inc
nop
xchg
cld
sbb
inc
mov
ficom
shr
popa
fld
retf
push
sub
into
fisubr
jae
xor
jne
imul
cmps
dec
int
sbb
aam
mov
xchg
clc
or
addr16
inc
sbb
sub
inc
outs
or
jmp
push
xor
inc
(bad)
ss
mov
mov
int3
mov
mov
lods
inc
daa
xor
popa
cmp
in
or
sub
adc
outs
push
in
int
mov
ror
(bad)
int
stos
inc
pop
movs
xchg
and
jmp
or
cwde
cmc
ror
out
and
out
xor
jae
sub
or
(bad)
mov
cmp
iret
stos
test
xchg
xor
sti
jno
pop
push
xor
mov
pusha
jnp
sub
retf
pushf
leave
jne
add
mov
stos
dec
add
sub
cmp
retf
pushf
adc
xchg
aas
sbb
inc
sub
dec
adc
das
xor
mov
inc
jmp
lahf
or
jbe
cdq
fucomi
(bad)
jmp
xchg
xlat
push
and
pop
scas
jo
stc
pop
adc
fimul
fistp
sbb
sub
sub
int3
mov
jbe
in
in
mov
loope
xchg
addr16
dec
adc
dec
les
cwde
push
sub
cmp
daa
movs
enter
fidiv
(bad)
fsub
sub
xor
div
jle
mov
sbb
lock
or
std
jmp
sbb
jge
or
sub
mov
xor
fisttp
mov
dec
sbb
sbb
adc
inc
stos
jbe
jo
nop
out
into
ins
add
cmp
xchg
pop
sar
sbb
pop
enter
jge
fwait
jb
sub
add
aam
dec
int
popa
nop
push
jge
lahf
int
les
or
mov
shl
icebp
ret
add
out
arpl
pop
inc
sti
test
in
jecxz
push
frstor
pop
shl
loop
xchg
fwait
daa
cmp
ins
clc
nop
sub
imul
mov
adc
icebp
daa
inc
add
outs
xor
(bad)
mov
std
jp
xchg
xor
in
adc
dec
mov
sbb
das
mov
mov
popa
push
fidiv
repnz
pop
aaa
xchg
fstp
xchg
test
xchg
mov
arpl
adc
adc
mov
outs
add
mov
rcr
and
jmp
mov
mov
cmp
loop
push
jb
mov
pop
add
push
jnp
cmp
adc
cs
dec
loope
dec
jp
or
sub
or
cmps
push
dec
xor
addr16
(bad)
aaa
push
fsubr
les
sub
pop
jnp
clc
movs
mov
xlat
loope
test
shl
add
out
cmps
ins
(bad)
xlat
loopne
fstp
push
in
sbb
or
inc
enter
ret
and
jne
enter
push
fs
cmp
mov
adc
pushf
arpl
sbb
outs
pop
mov
jae
push
and
inc
lea
mov
lea
inc
sub
inc
sahf
hlt
ss
xchg
pop
ins
push
sub
fistp
mov
push
sahf
sub
imul
mov
clc
xor
mov
and
jle
les
fld
fwait
jbe
test
jmp
add
retf
sub
sbb
pop
jmp
das
pusha
sti
test
fcomp
cmp
inc
leave
(bad)
stos
hlt
outs
dec
fdivr
mov
inc
(bad)
cmp
adc
call
pop
jmp
and
cmc
icebp
dec
push
xor
push
cmps
mov
repnz
dec
movs
jge
xadd
imul
sub
sbb
lock
or
aad
mov
rcr
xchg
xchg
(bad)
popa
mov
push
xor
fwait
(bad)
cmps
pusha
adc
push
test
jne
pop
dec
add
mov
(bad)
or
lock
les
mov
add
test
mov
xchg
lds
mov
retf
out
xor
int
cmps
test
loopne
mov
jbe
stc
sbb
popa
ins
call
cs
les
pop
jecxz
or
cdq
shr
mov
cdq
mov
mov
push
adc
pop
popf
push
cld
inc
shl
adc
or
aad
fisub
or
sti
mov
push
xchg
sub
push
inc
mov
lock
jecxz
sbb
or
mov
daa
add
pop
sahf
fnstsw
cmp
jle
cmp
adc
add
push
push
mov
and
and
sbb
in
jp
push
int
fild
push
mov
hlt
fidivr
mov
push
mov
adc
scas
sub
sbb
movs
js
jb
pop
out
shr
movs
rol
aaa
mov
dec
jmp
cdq
or
sub
sub
sar
aad
popf
aam
push
mov
and
cmp
inc
out
or
mov
jge
movs
cli
or
ss
mov
ins
xchg
int
xor
xor
test
outs
fwait
leave
mov
sub
mov
push
push
scas
push
add
ss
cmp
pop
rcr
sub
lods
cmc
dec
(bad)
cmp
imul
mov
dec
mov
ret
push
dec
and
dec
pop
nop
out
sbb
cmp
jle
or
pop
xchg
xor
adc
push
cld
sub
dec
movs
and
(bad)
dec
nop
mov
shr
push
dec
retf
test
xchg
into
or
sbb
sub
loopne
xchg
shl
fstp
je
xchg
add
fucomip
mov
add
xchg
fwait
mov
mov
fnstcw
jns
mov
mov
pop
int
test
sbb
cmp
mov
fnsave
jo
(bad)
and
mov
test
mov
cmp
pushf
sti
sub
outs
push
les
xchg
in
test
push
jbe
fldcw
sub
cmp
mov
pop
mov
movs
fcomp
add
mov
mov
outs
daa
fsubr
jnp
rol
arpl
stos
mov
add
xor
fisttp
sub
rol
and
sahf
sbb
aaa
scas
mov
enter
xchg
push
xchg
stc
jbe
loope
cli
(bad)
sbb
(bad)
mov
xor
test
mov
fbld
push
push
jbe
stos
aam
xor
(bad)
sti
dec
add
pop
stos
xor
in
inc
cmp
and
data16
loope
(bad)
jmp
mov
aam
dec
push
xchg
in
retf
dec
cmp
adc
idiv
adc
dec
inc
out
push
(bad)
pop
xchg
cmp
xor
jg
jmp
lods
dec
adc
not
mov
or
sub
and
xlat
dec
movs
stos
xor
nop
mov
xchg
jmp
mov
aas
rol
mov
push
ja
inc
lods
pop
cmp
loopne
outs
(bad)
mov
stc
(bad)
sbb
pop
xchg
les
xchg
jmp
rcr
lahf
lea
cmp
xchg
and
aaa
(bad)
scas
add
cmps
ret
xchg
dec
shl
mov
outs
pop
loop
gs
movs
or
mov
pop
fdiv
xlat
mov
mov
push
lods
pop
inc
and
sti
sub
je
lea
mov
mov
enter
cmp
sbb
fiadd
or
and
scas
cdq
je
icebp
mov
sub
call
add
mov
js
pop
jecxz
mov
xor
push
sbb
and
pop
mov
not
or
icebp
mov
push
shr
bound
mov
lahf
push
sbb
push
cmp
inc
or
stos
ss
mov
out
push
sub
movs
cmps
push
xor
gs
(bad)
lods
std
outs
pop
sbb
cmp
xor
movs
push
and
push
jno
mov
dec
adc
dec
movs
mov
mov
and
outs
les
outs
adc
jg
aaa
xchg
mov
mov
jle
cmp
pop
(bad)
cwde
mov
jnp
adc
mov
jbe
ins
adc
jno
or
inc
jbe
mov
sar
mov
js
pop
mov
repnz
dec
sbb
scas
cs
data16
stos
push
popf
(bad)
cmps
xor
movs
test
pop
mov
std
in
jae
jl
das
jmp
(bad)
retf
(bad)
pop
mov
push
and
frstor
nop
outs
push
cli
xchg
popf
sbb
mov
std
jbe
jnp
or
xchg
sub
retf
outs
mov
jbe
cmp
xor
or
inc
push
imul
push
adc
es
test
lods
shl
(bad)
inc
ds
aad
hlt
stos
repnz
push
add
sbb
cmp
imul
xchg
inc
(bad)
pop
dec
ror
nop
mov
jbe
addr16
shl
nop
mov
loop
jns
and
call
repnz
pop
loop
ds
adc
hlt
xchg
stc
ins
xor
jne
mov
jo
pop
outs
sub
bound
mov
repnz
lods
test
add
or
out
adc
pop
sub
pop
pop
adc
jbe
adc
dec
ret
(bad)
pop
push
dec
test
and
mov
cmc
mov
adc
mov
aaa
repz
dec
fcmovu
jmp
mov
fistp
mov
and
mov
jae
jo
inc
push
mov
jecxz
retf
cmps
je
movs
in
mov
lods
mov
mov
(bad)
ja
add
push
xor
inc
lds
lds
aaa
pop
or
and
dec
jb
inc
jl
setg
push
cmps
and
sub
call
loopne
mov
cwde
(bad)
call
or
push
ret
jecxz
fdiv
aas
pushf
cmps
or
xchg
fwait
mov
sbb
imul
ret
popf
mov
jae
lods
adc
sub
daa
inc
jns
scas
fmul
sub
stos
push
out
out
sbb
pusha
popf
loope
aas
sub
pop
adc
adc
je
call
sbb
in
adc
mov
dec
rcl
sbb
xchg
sbb
(bad)
xchg
jl
fldz
cs
jo
xchg
addr16
stos
xor
jnp
jno
add
cmp
scas
or
inc
mov
das
jo
push
inc
jmp
or
call
jmp
sub
lahf
stos
inc
pop
sahf
and
popf
jge
push
sbb
bound
cmp
dec
xor
dec
test
imul
adc
pop
arpl
daa
loopne
jle
mov
into
icebp
push
retf
mov
jne
retf
mov
outs
push
xor
adc
std
fsub
sbb
push
cmp
sbb
inc
popa
mov
int
jle
jo
jbe
es
std
movs
sbb
cmp
pop
inc
cmp
into
mov
mov
shl
mov
mov
cmp
ins
or
fcomp
pop
js
cld
pop
pop
pusha
aas
inc
test
jle
jmp
adc
cs
xchg
ja
jo
sbb
neg
jb
loop
test
aaa
lock
xor
test
sub
xchg
xchg
cmp
jmp
cli
adc
repnz
call
fsub
dec
out
scas
ins
or
dec
inc
lds
ret
(bad)
pop
mov
mov
sub
xchg
add
pop
imul
js
out
fldenv
sub
fstp
repnz
int
or
ss
loop
ja
outs
int
push
pop
ins
(bad)
rcr
mov
adc
in
push
mov
adc
stos
push
idiv
sub
or
movs
loope
push
arpl
aam
out
cmp
aad
add
movs
repz
push
mov
jnp
pop
(bad)
xchg
jle
daa
and
push
addr16
out
inc
adc
push
loope
in
sti
push
test
dec
mov
adc
dec
xchg
lahf
icebp
cmp
jne
movs
fld
cli
pop
sbb
std
data16
pusha
sbb
imul
inc
or
(bad)
xor
pop
lds
xor
mov
call
push
rol
fmul
mov
adc
and
push
popf
sbb
xchg
js
jg
test
cwde
pop
push
push
shr
inc
fmul
(bad)
cmps
or
cwde
mov
mov
jns
mov
addr16
push
test
and
das
mov
xchg
loop
and
call
jbe
add
push
jg
mov
adc
sbb
cmp
inc
loope
mov
fadd
mov
pop
(bad)
das
nop
pop
jmp
adc
daa
push
push
pop
pop
cdq
shl
ds
aas
addr16
jge
adc
addr16
icebp
test
and
cdq
sub
repnz
mov
push
js
and
sbb
ret
retf
xchg
jmp
gs
stos
push
ror
cmp
jb
sbb
shl
icebp
inc
out
iret
shr
push
(bad)
fldz
out
push
lods
push
pop
push
push
pushf
xchg
jae
mov
in
dec
fs
sbb
cmp
sbb
inc
mov
ret
jge
popf
and
sbb
in
jmp
sub
and
(bad)
dec
in
cmp
into
stc
dec
dec
add
fidiv
int
int
inc
(bad)
jno
cmps
std
push
xor
adc
nop
pop
sahf
pushf
call
sti
inc
cmp
lock
fnsave
clc
sbb
jp
sub
and
sbb
push
lock
push
jecxz
out
mov
or
rol
out
clc
jb
jo
xor
lahf
dec
push
bnd
outs
xchg
ret
fadd
mov
pop
dec
fistp
mov
aaa
pop
mov
inc
xchg
sub
shl
cld
popa
cmp
jl
inc
nop
int
or
pop
cs
mov
cmps
inc
xchg
ror
xchg
test
fs
mov
shl
jmp
xchg
jl
push
idiv
push
pop
xor
jae
inc
mov
movs
sbb
pop
sub
cld
jmp
mov
retf
sub
or
mov
or
mov
add
xchg
inc
lahf
push
xor
scas
mov
mov
jecxz
mov
mov
xor
and
(bad)
jle
ins
test
mov
adc
clc
movs
movs
push
mov
(bad)
jp
mov
mov
adc
adc
mov
aas
or
cli
mov
jne
les
xchg
cmp
(bad)
or
sbb
sahf
sbb
xchg
fucomi
mov
cwde
push
scas
xlat
out
or
mov
shl
pop
mov
pop
sahf
imul
push
lods
mov
syscall
mov
push
push
mul
ror
pop
sub
mov
scas
xchg
or
outs
loop
fcomp
scas
add
js
fwait
scas
aaa
xchg
and
jg
enter
shl
xchg
cmp
ins
mov
pop
loopne
ins
xchg
scas
mov
fisubr
imul
jo
mov
or
jmp
mov
ror
int3
(bad)
mov
(bad)
iret
and
call
out
xchg
and
daa
outs
sbb
retf
push
cmp
daa
jp
dec
retf
ret
loop
xchg
mov
mov
xchg
shr
std
test
cmp
pop
lods
hlt
mov
pop
push
add
int
ins
mov
adc
lock
int3
adc
push
sub
ret
daa
jne
les
nop
mov
and
jmp
movs
xchg
jg
dec
(bad)
clc
push
cmp
ret
or
push
and
fild
into
pop
dec
push
xor
dec
lods
fisttp
test
xchg
or
cmc
or
mov
fild
cmp
loopne
sbb
push
or
int3
enter
mov
iret
push
sbb
scas
pop
dec
mul
xor
jnp
out
cmp
add
sti
call
add
ins
push
mov
mov
mov
mov
arpl
fwait
leave
mov
aad
not
js
inc
pop
lods
dec
mov
push
inc
call
and
xor
outs
cdq
sbb
mov
mov
xor
and
and
scas
inc
ja
test
aad
daa
or
fwait
dec
push
jmp
mov
pop
sub
das
push
pop
mov
mov
pushf
iret
jmp
inc
xor
mov
ret
test
mov
pop
outs
je
pop
mov
pop
or
sbb
sbb
xchg
(bad)
ret
mov
mov
mov
xor
ret
inc
jb
add
or
imul
inc
fwait
mov
inc
jns
rcl
jecxz
wrmsr
fiadd
inc
out
test
add
call
pop
pop
xchg
test
xchg
mov
mov
mov
nop
xchg
mov
shl
pop
loope
adc
dec
adc
xor
pop
aam
sbb
push
fnstenv
add
xor
sbb
adc
push
jne
xlat
out
mov
ror
push
ins
push
mov
or
in
add
mov
stos
adc
ds
je
mov
nop
pop
pop
test
imul
cmps
xchg
lea
sahf
dec
mov
mov
add
pop
cdq
mov
pop
call
mov
mov
mov
inc
mov
test
cdq
in
cmc
and
std
movs
jp
fwait
(bad)
sbb
ins
in
in
ror
les
adc
scas
pop
and
outs
pop
and
in
xor
inc
aas
inc
mov
pop
jb
into
outs
push
jnp
cmps
dec
inc
fwait
iret
fwait
mov
xchg
int3
xchg
push
xchg
dec
enter
(bad)
dec
stos
(bad)
pop
sbb
mov
cmp
imul
mov
add
aaa
sti
daa
jb
test
pop
cdq
inc
call
xor
lds
push
cld
adc
inc
cmp
repz
mov
dec
mov
sub
std
xor
pusha
jne
(bad)
push
add
bnd
push
out
cld
inc
adc
cs
cmp
scas
test
dec
xor
mov
jns
retf
cmps
dec
or
push
in
fbstp
mov
leave
gs
or
inc
sbb
and
add
movs
mov
retf
(bad)
add
mov
outs
(bad)
cmp
cmp
cmp
fdiv
mov
js
inc
pop
mov
fnstenv
sbb
repz
addr16
cmp
push
sahf
jno
inc
pop
int
jl
out
dec
aaa
cmp
cmp
add
mov
call
jecxz
cmps
cmp
dec
or
and
xchg
jp
add
adc
sbb
aad
shr
es
xor
and
test
cmp
mov
rcr
fxtract
repnz
adc
ss
xchg
dec
into
jge
cld
and
shl
jns
ins
std
daa
loope
cmp
lods
xchg
cdq
xor
test
jp
mov
nop
push
xor
aas
and
in
cmp
adc
loopne
scas
into
mov
rcl
xor
das
mov
leave
fisttp
cmp
mov
sbb
outs
mov
(bad)
push
mov
cmp
popf
ret
add
xlat
push
lahf
sti
push
and
ret
shl
ficom
mov
mov
mov
ins
lea
iret
or
repnz
mov
pop
xchg
and
out
enter
pop
fs
xchg
mov
fisttp
aas
iret
jl
pushw
mov
adc
int3
sti
inc
or
push
fcmove
(bad)
add
sub
loope
push
pushf
add
jno
in
imul
pop
mov
and
vmovaps
retf
inc
mov
add
ins
jmp
sub
xchg
es
div
les
outs
jg
pop
cmp
(bad)
pop
movs
xchg
and
and
retf
aad
dec
or
mov
arpl
and
jp
pushf
and
and
outs
int3
mov
cld
in
xchg
daa
adc
xlat
es
adc
push
pop
dec
outs
sub
xchg
ss
cmc
jb
and
jl
push
les
jmp
dec
aad
xor
jge
add
(bad)
movs
xor
inc
inc
xor
sti
in
inc
sar
mov
repnz
enter
and
xor
mov
inc
push
add
adc
mov
jecxz
push
imul
movs
movd
leave
jmp
data16
ss
popa
fwait
push
in
lds
dec
adc
clc
and
clc
cdq
xor
push
dec
pushf
aam
push
mov
inc
dec
jecxz
aam
pushf
mov
jbe
and
loopne
sub
in
mov
mov
loop
shl
adc
pop
sub
sbb
dec
iret
clc
jge
sub
mov
and
jg
outs
or
xchg
jge
or
loopne
add
cli
in
sub
mov
sub
cmp
idiv
xor
(bad)
cmps
mov
or
mov
pop
push
xor
adc
xchg
add
xchg
add
test
(bad)
leave
jp
shl
xor
cli
mov
cwde
shl
push
xchg
sar
or
sbb
es
jb
div
bound
lock
sub
pop
xor
and
xor
mov
push
imul
out
clc
sti
inc
movs
(bad)
xor
add
cdq
or
push
repnz
push
pop
(bad)
sub
mov
xchg
retf
cld
ins
fisub
push
sbb
pusha
fnsave
rol
mov
sub
in
xor
das
pop
push
mov
mov
pop
or
and
adc
fldcw
(bad)
fisub
popf
je
inc
test
adc
pop
sbb
mov
mov
mov
aaa
xchg
adc
das
add
dec
jecxz
push
dec
add
imul
lock
ror
rcl
adc
in
adc
movs
ja
pop
pop
ss
adc
mov
mov
adc
mov
out
mov
cmp
movs
into
ret
(bad)
scas
cs
stc
jp
arpl
(bad)
adc
gs
loop
cmps
movs
mov
out
loope
jp
or
adc
in
inc
sub
ror
inc
and
xor
aad
inc
pop
adc
and
sbb
inc
loop
stc
idiv
push
dec
(bad)
cmp
push
je
cmp
shl
aam
loope
fldenv
inc
ss
adc
xchg
enter
test
mov
mov
mov
fisttp
std
jno
jns
stos
and
popf
imul
xlat
ud1
mov
std
test
or
mov
adc
cmps
enter
xor
aad
push
ins
adc
pop
mov
cmp
outs
and
jne
sbb
out
jo
mov
scas
sub
jl
test
jl
xchg
outs
push
inc
scas
jl
add
inc
lea
in
mov
std
push
shl
add
lea
(bad)
rcl
push
mov
jmp
adc
in
cmps
imul
iret
les
pop
mov
out
and
push
mov
push
pop
jle
bound
mov
adc
mov
cmp
jbe
mov
int
sub
mov
bound
movs
ror
clc
fnop
bound
jl
adc
icebp
daa
fstp
cmp
inc
cmp
sub
shl
mov
clc
xchg
sar
xchg
push
push
inc
lahf
scas
and
fisttp
imul
fdivp
adc
ja
cmp
xchg
gs
ins
jbe
jns
dec
fld
js
cmp
or
jne
adc
jnp
(bad)
cmp
retf
loop
or
cmp
(bad)
out
jmp
push
adc
push
mov
xor
pop
mov
and
mov
mov
test
es
sbb
lods
push
cli
mov
(bad)
dec
nop
add
sbb
popf
stos
mov
lahf
cs
xor
stc
mov
clc
inc
fsubrp
push
fdivrp
test
repnz
jg
jge
mov
lahf
aam
xchg
(bad)
nop
js
hlt
cmp
xor
out
mov
cmp
pop
xor
repnz
mov
push
js
xor
stc
idiv
pop
out
and
pop
outs
ins
sub
sbb
pop
sbb
aad
out
push
xchg
add
mov
jne
mov
cmc
gs
leave
push
cwde
mov
int
nop
cli
cmp
dec
pop
in
adc
jno
test
sbb
repz
sub
enter
gs
mov
push
xchg
adc
add
aaa
mov
xor
dec
cmps
push
add
ins
add
adc
fstp
rcl
cmp
and
xchg
push
add
movs
in
int
push
jl
sbb
inc
pop
lds
fisttp
jmp
dec
mov
(bad)
sbb
(bad)
dec
lahf
xor
les
xchg
je
aas
jp
lock
in
add
pop
sbb
cmp
test
cs
out
mov
aam
adc
cmp
cmp
rcr
nop
mov
mov
sub
mov
mov
jg
push
and
(bad)
sub
into
repz
lock
in
retf
pop
sti
movs
jge
sub
sar
mov
ret
ds
push
or
js
pop
and
mov
jno
mov
aam
adc
icebp
call
packuswb
xlat
dec
stos
out
in
in
loope
mov
cdq
inc
test
cmc
dec
cmp
push
jmp
sub
imul
outs
faddp
test
pop
imul
and
or
ror
cmp
mov
repz
pop
jp
xchg
mov
addr16
popf
jl
xchg
jne
pushf
pop
or
push
pop
cmp
cdq
adc
mov
daa
cmp
and
leave
sub
xor
adc
fmul
push
sub
xchg
iret
and
adc
daa
enter
rcr
retf
pop
out
mov
cdq
iret
pop
int3
cmp
push
xchg
jne
mov
and
in
lock
fsubr
jmp
adc
sbb
int3
and
fnstcw
xlat
test
pop
jmp
addr16
(bad)
push
cmp
pop
adc
ins
js
inc
mov
(bad)
xchg
retf
and
and
sub
jmp
jmp
mov
and
jg
push
fdivr
js
mov
dec
cs
jge
stos
mov
sbb
xchg
mov
imul
fidivr
stc
adc
or
sub
dec
ror
stos
inc
mov
pop
lds
outs
adc
cmps
imul
int
cmp
jmp
mov
imul
pop
dec
adc
mov
mov
mov
mov
mov
or
bound
xchg
fisttp
enter
pusha
cmc
outs
leave
mov
mov
mov
sub
push
test
cmp
mov
jp
push
bnd
push
xchg
(bad)
jmp
out
sbb
stos
mov
inc
sti
test
pop
add
pop
mov
xchg
pop
mov
push
test
ret
adc
pop
jno
cwde
fisub
push
popf
loope
int3
cli
dec
jge
dec
movs
ins
ins
push
aam
js
adc
xchg
xor
and
adc
or
shl
xchg
xor
imul
mov
ret
add
bound
mov
clc
loope
popa
sbb
push
mov
out
mov
cdq
jg
pop
gs
(bad)
jns
mov
or
sbb
sti
aam
scas
adc
mov
data16
cmp
fnstenv
pop
and
je
dec
add
cmp
xor
push
jns
scas
pop
jg
push
fld
stos
pmulhw
pop
movs
ror
jmp
or
es
fwait
jecxz
loopne
dec
sbb
dec
push
inc
loope
push
je
scas
pusha
retf
fcmovnbe
fidiv
out
add
scas
or
pop
mov
(bad)
out
inc
imul
neg
cmp
daa
xor
ja
push
fistp
mov
dec
mov
loope
mov
ins
add
push
pop
xchg
sbb
out
pop
clc
pop
rol
dec
push
retf
cmp
(bad)
inc
ja
sub
rol
mov
dec
add
xor
stc
in
pop
xor
cmps
push
stos
fisttp
jnp
mov
in
mov
push
cmp
push
pop
fwait
out
and
shl
fld
mov
pop
add
or
adc
push
fxam
dec
(bad)
jae
pop
mov
or
or
test
pop
push
xor
sub
sar
push
js
push
dec
shl
int3
mov
inc
inc
mov
lahf
xchg
xor
out
cmp
mov
cmp
mov
jge
cwde
scas
sbb
sti
jp
xor
add
or
and
(bad)
popf
and
push
jle
mov
sbb
mov
pop
fimul
push
cmp
mov
cs
pop
xor
push
bnd
pop
jecxz
jl
xor
ret
loope
ja
mov
sti
retf
sar
xchg
and
jae
fdivr
jae
call
popf
fucomi
shr
data16
pop
dec
add
in
fs
pop
test
push
add
jge
cmp
adc
mov
js
ret
mov
xlat
jb
mov
rcl
shr
mov
aam
fnstcw
aam
mov
pop
pop
mul
jl
stos
rcr
sub
adc
add
xor
(bad)
jp
cmp
dec
or
push
fistp
push
sub
popa
lea
inc
(bad)
mov
cwde
pop
sub
out
mov
sbb
mov
daa
dec
fld
inc
ret
cmp
fsubr
test
or
aaa
pop
jb
(bad)
loopne
test
inc
cmp
pushf
xlat
sar
adc
fsubr
out
dec
jp
inc
jecxz
je
dec
out
popf
push
add
sbb
adc
out
mov
cmps
shl
arpl
loopne
fst
ds
cld
push
stc
jns
cmp
test
push
inc
test
icebp
(bad)
dec
enter
je
jo
in
mov
pop
(bad)
ffreep
pop
mov
jne
mov
call
inc
or
bound
add
jg
aas
xlat
sub
pop
xor
jns
adc
xchg
movs
dec
pop
sahf
sub
out
inc
icebp
sub
pop
sar
push
mov
test
push
stos
(bad)
sbb
rol
icebp
stos
cli
inc
pop
pop
xchg
loopne
imul
call
jle
pop
push
(bad)
xlat
jle
jl
ds
mov
pop
dec
cmps
into
movs
pop
outs
mov
push
adc
mov
inc
call
es
in
fsub
retf
push
fidiv
cs
sub
stos
and
jae
in
dec
xchg
ret
dec
mov
xchg
out
push
jmp
daa
mov
rcr
icebp
sub
rol
mov
adc
mov
mov
or
and
nop
lods
das
jle
pushf
fdivr
in
repnz
mov
shl
add
ret
cs
adc
movs
out
push
push
jge
ins
loop
(bad)
ins
cs
add
xor
out
jl
mov
cmp
stos
mov
aaa
adc
clc
adc
js
mov
pop
jbe
frstor
sub
in
jle
inc
out
in
cmp
test
out
sbb
out
inc
mov
idiv
pop
pop
mov
mov
std
lahf
(bad)
sbb
inc
mov
cmc
cmp
daa
out
pop
gs
shl
out
pop
xor
or
jb
mov
push
(bad)
jo
cmp
jns
rol
popa
pop
ficom
or
jne
inc
mov
jns
in
add
std
scas
mov
add
inc
hlt
cwde
push
call
ss
test
and
movs
and
cdq
cmp
loop
enter
in
popa
push
test
sub
or
inc
xor
sar
mov
in
jbe
lods
ins
mov
add
dec
cmps
or
lods
cmp
xchg
icebp
(bad)
sub
xchg
mov
pop
sbb
adc
fs
shl
xchg
xchg
cmp
lods
push
push
fstp
das
jnp
jbe
(bad)
xchg
add
enter
cmps
sub
loope
push
outs
fisubr
fiadd
rol
jg
push
(bad)
mov
jge
bound
in
fisubr
rep
push
inc
mov
loope
(bad)
in
or
lods
mov
imul
inc
bound
push
jae
sub
mov
mov
retf
mov
ja
xchg
dec
scas
je
mov
add
and
mov
xchg
ds
sub
adc
call
paddd
mov
jle
push
sbb
push
or
xchg
imul
daa
test
pop
sbb
stos
dec
call
fsub
movs
or
mov
xchg
jle
and
sub
xor
or
je
ins
out
out
mov
nop
inc
in
(bad)
fsub
loope
mov
div
inc
std
sub
jb
jbe
xchg
lds
lods
jge
out
icebp
inc
repz
xor
xlat
mov
test
and
inc
popf
xchg
xchg
les
out
test
mov
imul
out
clc
adc
ja
add
fcomp
in
or
jo
xor
add
mov
fcom
ss
pop
mov
mov
cmps
sub
enter
and
mov
fldenv
(bad)
add
(bad)
push
mov
and
jecxz
cmp
enter
and
mov
inc
mov
xchg
dec
cmp
fsubr
mov
sub
push
test
js
aam
and
sbb
hlt
inc
or
cld
xor
xchg
rcr
arpl
ret
jmp
outs
adc
mov
add
push
lods
in
scas
adc
lods
cmc
inc
push
inc
icebp
sbb
cmp
jo
jbe
mov
(bad)
sar
pushf
call
xor
or
or
loopne
int
mov
sub
or
fld
sti
jno
pop
mov
fstp
mov
repz
cld
sbb
xor
jecxz
push
repnz
jecxz
add
iret
or
lahf
push
pop
into
xchg
fsubr
xchg
ins
lock
sbb
sbb
push
into
out
outs
lds
paddd
dec
mov
xor
mov
(bad)
mov
scas
les
inc
addr16
outs
add
stc
xor
inc
outs
pop
loopne
mov
addr16
into
adc
das
addr16
xor
push
pop
loopne
scas
mov
jnp
retf
push
pop
dec
and
stc
xor
dec
pop
int
cmp
mov
adc
(bad)
mov
xor
dec
jnp
mov
rcl
cmp
and
dec
test
fs
aad
or
lods
rcl
mov
mov
rcl
jle
rcl
mov
in
and
ss
stos
lea
sbb
rcr
jo
je
inc
test
cmp
jmp
and
xchg
arpl
and
imul
cdq
pop
call
retf
and
inc
inc
imul
and
xlat
out
mov
xlat
sbb
leave
lea
dec
dec
dec
mov
outs
cmp
jne
jg
inc
fcmovu
xor
stos
fs
loop
loope
cmp
cdq
rcr
les
mov
aaa
push
xor
test
mov
js
call
aam
arpl
and
jecxz
xchg
jge
inc
jmp
gs
test
outs
xchg
(bad)
jp
jmp
ins
bound
and
cmps
or
andnps
fs
mov
pop
dec
mov
push
pop
pusha
out
shl
call
cwde
ret
fidiv
xchg
aaa
call
xor
jmp
fst
sqrtps
sahf
retf
jae
jg
aas
ret
aas
xor
popf
mov
mov
loope
popa
fwait
xchg
(bad)
mov
jo
inc
data16
jb
loope
mov
adc
nop
adc
mov
jbe
fcom
cld
jmp
outs
ret
jae
xor
sbb
call
mov
mov
daa
jge
cmp
inc
loope
or
push
fxch
add
inc
adc
jmp
das
adc
adc
and
xlat
pop
imul
adc
ja
or
adc
(bad)
mov
movs
icebp
lock
dec
mov
stc
sahf
mov
inc
inc
pop
mov
jle
pop
xchg
mov
loope
fwait
push
xor
and
repnz
jnp
mov
bound
test
dec
and
stc
pop
out
xchg
xsave
(bad)
(bad)
fstp
lahf
or
retf
jno
cmp
mov
or
jae
(bad)
icebp
cmp
dec
add
push
sub
pop
or
popf
cdq
mov
or
mov
jae
(bad)
jl
fstp
ficom
(bad)
into
or
sub
jmp
jo
and
fisttp
stos
shl
popf
out
out
in
xchg
mov
jmp
cmp
clc
rcl
or
push
push
cmps
push
jnp
or
fidiv
cdq
cwde
xchg
xchg
in
fisubr
in
out
adc
stos
lods
xor
mov
(bad)
adc
jecxz
sub
sbb
mov
pop
push
pop
xchg
in
popf
cld
es
sbb
push
int3
movs
fld
jno
dec
pop
les
fadd
xlat
xchg
dec
mov
xchg
pop
lock
scas
push
or
jg
inc
sub
inc
out
push
std
xor
xor
sar
shl
cmp
inc
jno
hlt
mov
out
xchg
mov
das
movs
push
xchg
dec
icebp
shr
(bad)
xlat
std
sahf
xchg
jns
jl
gs
out
pushf
lock
cld
mov
ins
gs
mov
push
dec
sub
fnstenv
inc
(bad)
mov
push
popa
sti
adc
mov
ret
stos
test
and
jae
stos
(bad)
lds
push
(bad)
sbb
push
inc
cli
xchg
dec
inc
sub
pop
aam
jp
adc
pusha
out
icebp
xor
int3
xor
sub
adc
mov
out
jnp
jo
fnsave
push
sub
fmul
xor
mov
and
je
xchg
sub
inc
dec
sbb
push
jge
fisttp
pop
xor
nop
cmp
nop
je
sbb
mov
jmp
mov
ins
pop
ss
add
or
(bad)
sbb
cwde
rol
nop
xchg
cmc
mov
pop
xor
mov
sub
sub
pop
rcr
inc
xor
(bad)
mov
xchg
push
rcl
sub
inc
dec
mov
push
dec
pop
mov
jecxz
lahf
pop
jo
fdivr
or
outs
test
out
jae
fcomp
jg
xchg
scas
data16
fstp
inc
iret
and
mov
dec
jb
scas
pop
jo
dec
mov
push
sbb
(bad)
loopne
mov
xor
fs
test
inc
and
in
sub
xchg
test
outs
cmp
rol
sar
fisttp
clc
in
test
dec
mov
iret
iret
inc
std
adc
iret
outs
in
ins
cmp
mov
inc
imul
aaa
stc
sbb
cmp
cmps
mov
mov
jmp
in
mov
mov
inc
outs
add
sar
fdivp
mov
(bad)
xor
dec
mov
push
jb
mov
xchg
lock
jae
mov
pop
pop
lods
js
jmp
mov
mov
cmp
mov
in
pop
inc
jl
jmp
int3
cmc
dec
dec
adc
stc
adc
pop
pop
fs
out
ret
outs
(bad)
xor
jmp
mov
fisttp
out
sub
imul
xchg
push
cmp
sub
movs
cli
xchg
icebp
popa
shl
retf
push
sub
adc
rol
and
int
xchg
or
pop
sub
dec
mov
and
jecxz
call
je
add
fist
outs
jle
stc
xor
xor
int
or
pop
jp
adc
(bad)
mov
pop
mov
xchg
into
push
jnp
stc
scas
ja
nop
add
push
lea
xchg
mov
mov
aas
stos
cld
or
pop
jg
add
mov
cmp
loope
jle
not
movs
ins
adc
rcl
stos
jmp
jnp
mov
xor
xchg
jp
mov
xor
pop
aaa
xchg
mul
aaa
inc
jmp
dec
inc
das
fst
dec
les
retf
mov
add
push
sub
sub
xor
jl
sbb
jmp
call
and
outs
sbb
jnp
int3
mov
sbb
leave
inc
push
popf
data16
jnp
sahf
jo
dec
pop
cmp
pop
push
pop
xchg
rcl
jnp
xchg
jb
xor
test
push
cmp
dec
and
fild
jmp
pop
imul
or
stc
call
ret
popf
adc
push
fwait
aas
loopne
(bad)
cmc
addr16
arpl
mov
jp
lahf
lds
jmp
mov
mov
out
aam
cmc
mov
and
mov
sub
je
inc
ss
mov
sbb
test
xor
push
and
shl
push
pop
mov
mov
jle
sub
(bad)
dec
push
shr
cmp
push
inc
add
mov
adc
movs
mov
push
shl
test
jecxz
dec
cwde
jp
(bad)
bound
cdq
or
fs
in
xor
daa
test
jnp
jnp
xchg
jge
pop
mov
lahf
sbb
dec
push
cmps
mov
inc
outs
push
cmps
mov
jge
test
lods
loop
or
mov
addr16
(bad)
fsub
out
xchg
mov
adc
stos
sub
gs
js
ins
mov
dec
xchg
pusha
jecxz
pop
cmc
xor
shr
shl
sub
(bad)
fisubr
retf
test
mov
gs
sbb
icebp
add
cmp
repz
mov
add
lods
fldcw
mov
pop
jp
push
in
adc
adc
bound
and
jbe
or
je
or
push
lods
sub
cmp
sub
push
(bad)
mov
in
xor
jno
cli
fdivr
jb
es
pop
stos
outs
bnd
pop
pop
add
and
pop
push
dec
inc
jmp
xchg
movs
movs
(bad)
repnz
pop
or
(bad)
xchg
mov
jnp
sub
pop
pop
test
loope
xchg
mov
out
mov
enter
in
dec
loopne
pop
test
cmp
loop
ds
jne
adc
xchg
sbb
ja
mov
out
icebp
nop
add
add
add
jmp
or
je
add
neg
mov
xor
ret
mov
inc
push
lds
imul
imul
sti
(bad)
clc
and
xchg
xor
jne
dec
call
add
pop
scas
ins
jge
mov
mov
or
dec
clc
stos
mov
adc
mov
mov
(bad)
lea
xchg
jbe
fisubr
aas
inc
adc
and
call
mov
(bad)
pop
cmc
scas
gs
daa
fist
enter
daa
adc
mov
and
mov
mov
inc
xchg
mov
clc
jo
imul
xchg
cmp
scas
jp
add
(bad)
jo
or
or
xor
outs
mov
sbb
(bad)
cdq
scas
push
xchg
push
cmp
nop
cli
sub
arpl
or
push
(bad)
sbb
retf
jno
sbb
fistp
xchg
push
pop
out
push
imul
scas
call
mov
xchg
mov
cmp
sbb
push
sbb
jge
xchg
imul
add
mov
(bad)
jb
jg
sub
sbb
xor
pusha
popf
mov
push
mov
pop
xchg
rol
(bad)
mov
cmps
in
mov
adc
daa
dec
and
sbb
cmp
adc
gs
loopne
aad
pop
enter
out
push
(bad)
dec
stos
f2xm1
pop
sub
test
repz
mov
bound
push
lahf
test
cli
lods
ftst
gs
xor
call
sub
popf
mov
push
mov
aad
lds
jbe
or
dec
or
ss
push
pushf
loope
jmp
cmp
mov
sbb
mov
cld
push
push
sbb
daa
fild
repnz
xor
std
cmp
or
add
outs
push
leave
xor
(bad)
push
cwde
cwde
stos
xchg
ins
adc
nop
outs
aas
push
pushf
call
(bad)
arpl
shr
or
retf
xchg
add
mov
jmp
js
push
in
lahf
retf
lahf
call
adc
jno
push
hlt
add
sbb
mov
mov
stos
fst
cmps
std
push
sub
or
lods
out
inc
xor
add
out
js
xlat
push
inc
adc
jo
ins
or
xchg
pop
call
sti
enter
push
add
mov
sahf
pop
ja
and
scas
pusha
(bad)
in
call
int
mov
les
test
pop
jle
aad
sti
mov
adc
dec
cmp
stos
imul
cmp
xor
dec
fimul
lods
add
jmp
jb
mov
fucom
sbb
mov
loopne
adc
mul
or
psrlw
lods
repz
(bad)
push
or
jg
and
fsubr
fidivr
rol
add
add
xchg
(bad)
aad
mov
int3
repz
out
cmp
pop
add
ds
call
repnz
test
inc
jb
sub
into
and
inc
dec
retf
mov
(bad)
test
dec
xor
xlat
adc
clc
rcpps
and
pop
lock
dec
loope
mov
sub
jle
loope
nop
aam
lock
mov
add
(bad)
lahf
jae
push
repnz
mov
xchg
push
xchg
(bad)
cdq
cmp
ret
inc
cdq
outs
and
adc
push
cmc
stc
pop
cmovge
div
mov
fwait
loopne
inc
jae
push
mov
fstp
jmp
ins
retf
cmps
sbb
ficom
in
xor
test
test
or
in
inc
mov
cmp
push
and
aam
add
cs
pushf
out
jmp
and
cmp
pop
mov
lds
cmp
in
mov
cld
out
repz
xchg
inc
cmp
into
pop
push
mov
sbb
test
pop
data16
xchg
int3
stc
mov
jle
lock
in
mov
in
mov
mov
sbb
cmp
arpl
mov
mov
pusha
push
(bad)
xlat
or
js
aam
imul
and
(bad)
not
pop
shl
enter
push
sbb
ins
push
jge
mov
mov
ror
retf
jge
int
or
in
nop
mov
mov
ins
(bad)
xor
sbb
sti
stos
sbb
jmp
xor
mov
ret
rcr
jo
lds
idiv
imul
mov
add
loop
mov
hlt
shl
mov
xor
push
push
mov
and
cmp
sub
repz
test
mov
and
retf
or
xchg
inc
mov
cmp
dec
cmc
push
(bad)
add
ds
cmp
inc
dec
mov
pop
mov
cmc
inc
mov
js
sbb
xchg
xchg
add
(bad)
xchg
fs
jl
cli
mov
ss
xchg
sar
cmp
adc
jl
mov
mov
addr16
xchg
stos
mov
sbb
repz
(bad)
adc
adc
sub
bswap
data16
mov
push
movs
mov
cdq
mov
imul
mov
jecxz
ss
cmps
add
mov
lahf
in
dec
retf
fstp
pop
mov
popa
sbb
jp
and
outs
mov
inc
mov
sub
inc
xchg
pop
xchg
mov
mov
mov
xor
dec
fwait
mov
in
add
mov
js
iret
inc
into
dec
push
aaa
sbb
jns
mov
sbb
stos
mov
das
push
sbb
jmp
adc
mov
out
mov
mov
fwait
dec
push
daa
xor
sti
sbb
dec
loop
aad
push
pushf
and
sub
or
je
das
into
xchg
cdq
dec
jns
mov
sub
add
es
push
and
ins
iret
out
xor
repnz
xor
test
lock
sti
cmp
xchg
pop
sahf
cmp
push
fbstp
call
iret
sbb
jnp
mov
mov
in
mov
inc
aad
(bad)
movs
inc
iret
pop
add
pusha
imul
push
lahf
cdq
es
sbb
out
xchg
movs
sar
sbb
(bad)
(bad)
push
std
add
pop
fwait
mov
repz
mov
fdiv
sub
ficom
xchg
pop
in
aad
jmp
lock
sbb
jg
enter
sub
cmp
and
or
iret
icebp
pop
push
ins
ret
ss
xchg
xchg
outs
dec
in
pop
inc
or
aas
adc
or
lods
sbb
les
xchg
push
add
loope
jne
cmps
push
icebp
and
lods
mov
scas
fptan
sub
adc
or
add
icebp
mov
fwait
adc
adc
add
push
and
sbb
mov
adc
das
adc
nop
jp
pop
pusha
cmps
and
xchg
cmp
cmp
push
and
sub
inc
call
test
xor
jnp
lea
mov
add
inc
add
retf
push
sti
mov
sahf
or
and
shl
mov
mov
sahf
cmc
cld
pop
push
shr
neg
fimul
loopne
mov
jge
(bad)
or
(bad)
push
movs
adc
jbe
adc
movs
adc
adc
and
addr16
fucomip
or
sbb
sar
xchg
jmp
js
push
mov
push
or
jle
jecxz
add
inc
xor
test
std
jle
retf
dec
sbb
push
aad
lea
mov
aas
rcl
cmp
shl
mov
jne
inc
add
popa
fld
popa
inc
aad
push
sub
adc
jo
int3
jle
out
mov
mov
es
dec
push
add
adc
fs
push
fld
push
sar
jns
outs
fsubr
dec
xchg
ja
fimul
mov
inc
inc
aam
fsubr
test
or
popf
jns
sti
jne
push
loop
(bad)
dec
jo
sbb
xor
xchg
xchg
fimul
jo
je
sub
dec
mov
dec
add
popf
pop
(bad)
bound
xchg
ds
push
outs
cs
retf
leave
fild
pop
dec
inc
or
sbb
cmps
xchg
cld
sbb
sbb
dec
add
in
add
mov
call
fsub
xor
inc
retf
inc
mov
push
sub
sbb
into
out
stc
in
xchg
or
jne
cwde
xlat
jmp
push
out
aam
jb
push
mov
loope
inc
in
(bad)
in
push
add
icebp
adc
cmp
popf
outs
fldl2e
xchg
das
arpl
add
adc
pop
aam
shr
pop
popa
out
push
inc
in
and
clc
or
popa
cld
pop
cmps
(bad)
enter
sub
aam
xlat
mov
in
repz
in
mov
les
pop
push
lods
cmp
popa
mov
cld
mov
jae
cmp
xchg
jo
adc
cmp
mov
stc
pop
dec
or
dec
xchg
adc
inc
mov
jnp
dec
push
mov
push
jmp
nop
gs
mov
lods
push
fnstenv
cmp
pop
xor
mov
mov
jns
mov
inc
mov
pop
inc
jae
daa
jg
and
inc
add
mov
daa
mov
push
jle
daa
push
data16
(bad)
lock
sbb
dec
dec
dec
aas
push
add
aas
pop
jns
ss
jno
adc
or
(bad)
inc
hlt
add
sub
js
push
adc
sub
popa
dec
jle
xchg
push
adc
cmps
lods
mov
sti
not
mov
fadd
rol
jb
push
aaa
leave
jl
dec
push
mov
shr
jnp
xor
(bad)
xlat
cmp
and
sbb
sub
lahf
dec
push
jg
dec
pop
cmp
cmps
mov
adc
es
iret
popf
test
cmp
mov
inc
add
jo
fs
mov
sbb
push
push
xchg
cmp
imul
rol
int3
gs
add
call
psrlw
jmp
add
cmps
test
bound
xchg
xchg
pop
dec
fist
test
int
push
push
mov
aaa
pop
push
jo
retf
mov
or
mov
inc
movs
jle
mov
iret
mov
leave
mov
(bad)
xor
xchg
enter
xchg
retf
or
jmp
icebp
ror
push
push
call
imul
push
fdiv
into
xor
mov
leave
inc
lds
mov
mov
mov
mov
adc
in
scas
les
fsubr
mov
test
jge
pop
sbb
ds
pop
mov
pop
ja
cmp
popf
je
pop
scas
and
stos
pop
(bad)
cmp
sub
inc
lea
adc
add
cmp
mov
mov
not
xchg
fwait
dec
int3
test
cmp
jo
fsub
sbb
jecxz
mov
mov
les
not
dec
sub
(bad)
ror
imul
inc
and
int
ins
pop
jmp
pop
test
das
ret
and
jne
or
stos
aaa
cmp
dec
aas
push
cli
sbb
xor
je
inc
dec
pop
or
add
sbb
in
mov
adc
scas
outs
ror
mov
and
mov
dec
add
adc
div
inc
mov
int
shr
iret
int3
push
jp
packsswb
cwde
js
sub
jmp
jl
ins
repnz
push
cdq
pop
popa
pop
mov
and
in
adc
or
aas
adc
adc
adc
(bad)
(bad)
call
ss
jne
or
dec
test
js
xor
inc
dec
jle
out
lods
xchg
gs
retf
adc
stc
ret
and
push
repnz
add
fisub
inc
cmp
retf
push
and
cmovge
popa
cmp
aaa
mov
push
test
inc
adc
ret
xchg
fild
outs
xlat
gs
outs
and
dec
out
jb
sub
xor
cmp
jbe
inc
int
in
enter
nop/reserved
cmp
and
pusha
xchg
add
ror
sbb
loop
jecxz
hlt
in
ins
cmp
into
in
pop
adc
cmp
jbe
xor
mov
test
fist
test
cmp
mov
fmul
adc
ss
loop
popa
fdivr
fistp
mov
ins
pop
shl
and
pop
pop
inc
into
ret
and
mov
leave
mov
loop
idiv
inc
mov
out
ret
push
ret
jbe
dec
pusha
push
loope
push
and
push
jae
mov
mov
popf
ret
imul
mov
mov
mov
call
push
sbb
and
push
aas
mov
(bad)
mov
lods
stos
(bad)
imul
test
in
sbb
jbe
stos
dec
mov
lea
shl
in
jp
xor
mov
xchg
fs
mul
scas
inc
repz
and
(bad)
mov
arpl
or
mov
in
push
(bad)
inc
jp
shr
sti
mov
push
or
ret
push
sub
or
xor
push
sub
sbb
xor
pop
add
jg
and
shr
add
test
jb
jo
(bad)
popa
dec
xchg
movs
in
jmp
enter
push
adc
dec
retf
push
xchg
mov
cdq
movs
jge
pop
inc
mov
xchg
add
mov
push
push
mov
jne
rol
jmp
xchg
pop
cmp
mov
cmp
aaa
(bad)
les
add
jo
pop
xchg
cmp
xchg
mov
jae
jg
xchg
push
ja
test
loop
out
or
out
xchg
fsubp
cli
jecxz
(bad)
fnsave
stos
movs
call
mov
loopne
or
js
retf
cmc
rcl
push
push
or
xor
inc
pop
mov
mov
jl
inc
xor
lods
cmp
dec
sub
out
pushf
push
loop
pandn
movs
jl
test
outs
push
xchg
sub
mul
sub
(bad)
push
fadd
mov
push
lock
add
pop
push
push
push
repz
stc
dec
movs
xor
jp
cmp
jmp
jl
loopne
xor
fst
test
call
jp
shr
push
test
or
jno
xchg
pop
les
xor
sbb
sbb
mov
sar
mov
inc
jp
test
lock
and
in
push
mov
push
sar
pop
sub
in
jmp
add
inc
xchg
pop
test
dec
fadd
sbb
push
mov
(bad)
xor
lea
push
add
pop
ss
push
mul
push
sub
mov
inc
mov
les
mov
stc
sbb
adc
nop
cmc
stc
push
out
ret
or
in
jmp
aam
or
and
pushf
dec
jnp
sub
sbb
movs
iret
outs
leave
out
idiv
mov
sahf
call
clc
nop
lods
push
shl
clc
pop
add
mov
sub
repnz
adc
adc
push
and
adc
cmc
push
sub
loopne
rcl
lds
and
enter
out
fisub
daa
rcr
push
das
nop
je
cli
dec
pop
scas
jne
adc
scas
sbb
test
popa
mov
adc
movs
sbb
frstor
mov
scas
mov
fsubr
jecxz
jge
mov
and
movs
jp
xor
xchg
sub
jecxz
jne
cld
pop
in
pop
cld
pop
enter
fild
jne
nop
(bad)
mov
out
pusha
jecxz
pop
test
push
sbb
push
fsubr
fs
xchg
cmp
pushf
fcomp
je
and
(bad)
mov
and
aad
xchg
dec
jge
push
data16
push
ss
js
pop
adc
dec
jno
sbb
cmps
cmp
cmp
pop
sahf
repz
lods
les
jle
cmp
lods
sub
jmp
mov
lock
cmps
outs
mov
pusha
aam
adc
pop
mov
mov
xor
sbb
loop
jne
jmp
popa
ins
int
stc
daa
pop
xchg
cld
add
ret
xchg
and
(bad)
adc
test
pop
ret
rcr
in
out
push
out
ret
popf
mov
rcl
or
push
pushf
mov
sahf
jns
sbb
sbb
pop
mov
push
sti
icebp
pop
add
jb
cmps
int3
mov
dec
les
sar
mov
out
push
sbb
or
shr
popf
add
sub
jge
fadd
fnstsw
mov
xlat
sbb
add
in
dec
adc
pop
pop
sti
and
xor
popa
pop
pop
pop
sub
mov
hlt
icebp
inc
adc
adc
imul
dec
fdiv
mov
(bad)
push
leave
push
(bad)
(bad)
es
lock
outs
shl
fwait
mov
data16
jg
cmp
pop
fild
jmp
loop
fcmovnbe
clc
fcom
gs
fnstenv
aam
addr16
add
inc
imul
push
out
in
jmp
pop
(bad)
shr
test
push
test
add
sti
jbe
jo
ins
test
bnd
(bad)
in
jl
and
mov
movs
sbb
push
add
jb
jmp
sub
rcr
cmp
sub
(bad)
mov
inc
dec
push
mov
xchg
xor
sbb
wbinvd
outs
lahf
test
push
xchg
repz
test
data16
xchg
or
inc
stos
sbb
or
xchg
push
mov
in
fadd
test
retf
loope
sbb
out
mov
(bad)
dec
cmp
or
inc
mov
mov
pusha
add
lds
ret
addr16
sub
int
and
fiadd
js
xor
xchg
rcl
jno
popf
imul
(bad)
pop
arpl
adc
in
mov
mov
movs
sub
gs
jecxz
dec
sbb
jb
mov
cld
int3
leave
adc
loopne
cmovns
loop
sahf
jmp
dec
xchg
adc
sbb
nop
ins
addr16
xchg
stos
cmp
out
pop
push
ins
lds
jmp
aaa
daa
add
mov
mov
push
jmp
dec
imul
add
mov
stos
lock
ror
add
lea
enter
enter
jne
sub
das
push
xchg
fs
sub
jbe
mov
jbe
push
pop
cmp
dec
mov
int3
mov
adc
sbb
aaa
(bad)
push
push
sub
adc
popf
clc
push
cmp
xor
fimul
jo
xchg
cmps
loop
lahf
jp
mov
sbb
je
ffreep
mov
xchg
sbb
inc
mov
call
test
movs
ret
mov
loopne
inc
pop
adc
loope
mov
cmp
add
sbb
stc
sbb
int3
sub
test
push
cmp
jae
adc
ins
adc
sbb
xchg
xor
add
pushf
arpl
dec
pusha
lock
int3
sub
loopne
xchg
xor
lds
pop
and
mov
lds
sub
jle
inc
inc
(bad)
mov
push
imul
test
retf
movs
sbb
mov
icebp
or
fsubp
test
lock
adc
or
cmp
or
jo
outs
shl
in
ss
mov
sbb
cmp
imul
lock
sti
dec
stos
fstp
ds
push
shr
sbb
(bad)
push
pop
dec
cmp
ds
xor
enter
jo
xor
mov
in
aaa
(bad)
mov
lahf
cli
and
fst
vmovshdup
pop
cmp
imul
pop
dec
in
push
in
push
cmp
mov
mov
mov
pop
pop
scas
(bad)
and
sbb
add
sbb
inc
sbb
out
shl
mov
sub
cld
jge
sbb
cdq
jecxz
push
adc
sub
cmp
sub
mov
leave
std
pop
xlat
sub
cmp
jp
push
mov
icebp
popa
test
sub
adc
aad
cmp
(bad)
idiv
ds
jmp
fisubr
push
sahf
ja
mov
imul
jg
ret
(bad)
sbb
mov
xor
(bad)
sbb
leave
sub
xchg
jo
icebp
push
cmps
xor
in
dec
cli
loop
dec
mov
mov
push
xchg
retf
pop
(bad)
ficomp
data16
cdq
mov
push
and
out
sbb
or
cli
sahf
or
outs
lea
dec
clc
push
sub
jmp
stos
jne
dec
hlt
aaa
imul
pop
push
inc
jmp
mov
cwde
push
shl
scas
dec
movs
repz
xor
out
jnp
and
imul
imul
inc
or
jle
mov
loopne
out
js
inc
lock
lds
jl
cld
xor
dec
sbb
mov
je
jb
fcmovnu
test
push
xchg
mov
ret
into
retf
shl
popf
adc
xor
js
into
shr
not
fidivr
xchg
jl
xchg
mov
adc
jg
or
adc
mov
xchg
jns
test
pushf
lods
pop
jl
adc
and
and
rcr
int3
sub
imul
adc
sti
iret
jmp
adc
push
or
xor
inc
arpl
fnstcw
xchg
or
pop
cmp
push
adc
cmp
adc
mov
cmp
test
(bad)
cld
fwait
inc
push
test
call
pop
cwde
or
mov
in
call
pop
imul
pop
and
shl
repz
sbb
pop
pop
mov
outs
mov
dec
sub
sahf
inc
add
(bad)
sti
add
pop
xchg
popa
fwait
pop
clc
xchg
sub
(bad)
fcos
pop
pusha
add
outs
retf
mov
(bad)
movs
dec
fs
dec
sub
lock
dec
out
mov
adc
lahf
jo
pop
inc
out
xchg
test
cwde
je
mov
bound
(bad)
add
ret
or
cs
fisubr
sbb
inc
pop
mov
xor
adc
call
push
scas
das
hlt
push
cmp
xor
repz
lods
jle
push
pop
dec
sahf
mov
jmp
mov
add
loopne
mov
push
mov
lock
sub
test
cmps
mov
mov
sub
popf
pop
add
popf
test
cdq
cmp
sbb
mov
push
xor
cmc
leave
pop
loopne
lods
or
out
aas
iret
or
mov
pop
mov
sahf
(bad)
(bad)
cmp
mov
xor
in
xor
pop
push
pushf
call
sub
push
push
lahf
repz
fs
xchg
jmp
stc
dec
shl
ds
sbb
(bad)
adc
in
dec
jnp
and
xchg
push
and
movs
mov
inc
ror
pop
jnp
dec
ficom
add
test
inc
sub
mov
mov
ins
test
jns
mov
xor
loope
pop
push
or
add
mov
inc
mov
cmp
xor
jmp
fcmovne
dec
imul
add
cdq
dec
add
scas
pop
and
mov
fdiv
mov
lock
mov
lods
scas
push
repz
mov
push
icebp
aas
out
sub
xor
add
cli
bound
movs
and
outs
xchg
jl
mov
mov
mov
and
daa
popa
cli
mov
push
into
jle
les
std
inc
pop
rcr
test
sub
and
cli
jl
(bad)
cmps
aas
call
pushf
std
test
mov
sar
adc
in
cmp
je
sbb
bound
cld
(bad)
push
sub
inc
pushf
jle
fxch
int3
lea
pop
test
hlt
mov
fst
in
push
jg
lods
jmp
sbb
mov
sbb
out
mov
in
mov
pop
popa
dec
out
mov
push
sahf
jno
adc
push
sub
jl
or
mov
lods
or
lods
scas
push
gs
hlt
enter
push
leave
out
pop
mov
lahf
stos
jno
rcr
mov
inc
arpl
dec
test
outs
sub
jae
test
lock
mov
pop
cmps
sub
add
aas
mov
fdivr
lds
dec
cmp
jge
test
mov
(bad)
shl
mov
or
xchg
jno
mov
fisub
mov
jo
sub
dec
ret
or
push
or
(bad)
ins
cld
daa
xor
push
hlt
test
ss
dec
mov
xchg
xor
(bad)
dec
pop
pop
test
jecxz
pop
lahf
loop
jae
js
loope
cmps
int3
mov
retf
shl
lea
adc
lds
xchg
mov
sahf
sub
leave
scas
lods
das
scas
adc
mov
xlat
jne
ret
ins
jmp
mov
or
mov
pop
pop
rol
push
addr16
stos
imul
in
sub
out
movs
jmp
rcr
sub
call
stc
and
push
fmul
mov
mov
mov
int3
dec
dec
pop
lds
dec
dec
sub
lea
cmp
xchg
mov
rcl
adc
clc
inc
(bad)
bsf
out
mov
ds
xchg
fiadd
mov
inc
scas
push
or
jp
and
dec
jno
(bad)
ret
jb
jg
and
rol
mov
mov
sbb
loopne
ror
repz
and
jmp
push
sbb
dec
nop
fadd
sbb
ds
popa
pusha
shl
ja
loopne
or
out
sub
jnp
nop
int
adc
add
ins
add
cmp
stc
out
(bad)
jne
xor
pushf
adc
push
mov
inc
mov
sbb
and
ret
cs
dec
inc
mov
sbb
add
pop
adc
jle
cmp
popf
mov
in
ror
jle
or
mov
ja
rcr
(bad)
cs
clc
xchg
xor
push
test
jne
sti
int3
cmc
push
cli
cmps
jbe
shl
je
bound
mov
ja
adc
jbe
and
adc
js
imul
cmp
stc
or
inc
ja
jnp
cmp
lahf
std
push
xor
shl
pop
shr
not
mov
dec
icebp
mov
and
xor
aas
inc
cmp
jl
jle
sbb
out
leave
sahf
loop
call
or
adc
mov
adc
inc
sar
cmp
retf
dec
pop
sub
inc
fldenv
(bad)
sti
test
(bad)
hlt
bnd
clc
push
jmp
out
xchg
movs
push
nop
xor
cld
add
data16
push
jae
ret
add
add
push
pop
fwait
icebp
mov
and
mov
push
jmp
mov
call
mov
pop
(bad)
lahf
sahf
dec
xchg
inc
lahf
arpl
pop
scas
or
adc
add
push
pop
xchg
sahf
lock
sub
dec
push
aaa
icebp
mov
dec
mov
cmp
inc
inc
lea
push
pop
nop
lods
add
lock
hlt
xlat
mov
fwait
xchg
mov
push
movs
clc
in
retf
and
sub
cwde
hlt
jae
cdq
mov
push
std
not
inc
xlat
cld
mov
je
dec
and
bound
ror
sub
or
push
aam
xor
push
inc
ret
mov
push
mov
hlt
mov
xor
add
hlt
inc
xchg
int3
mov
stc
test
fwait
or
xor
pop
xor
and
int3
xchg
retf
mov
dec
push
add
push
sbb
jmp
test
out
xor
in
int3
xlat
loopne
add
stos
pop
push
jle
push
pcmpeqd
int
(bad)
rcr
gs
ret
lods
xor
mov
addr16
scas
push
push
fnstenv
sub
clc
mov
mov
sub
lea
sar
int
adc
add
adc
mov
mov
dec
sbb
ret
mov
jl
inc
jl
mov
test
ins
and
iret
fadd
js
in
ret
ins
outs
inc
dec
dec
inc
push
pop
mov
mov
popf
jb
(bad)
rcl
outs
in
pop
or
std
push
sub
mov
adc
push
call
clc
rcr
mov
xchg
stos
mov
in
cmps
int3
inc
cmp
xchg
dec
hlt
jb
pop
or
xchg
stos
xchg
or
xchg
mov
cmp
mov
cmps
pop
adc
xchg
ja
aaa
cld
je
push
mov
jmp
dec
ss
pop
cmp
sbb
leave
mov
push
daa
mov
fsub
jecxz
in
popa
pop
xchg
sbb
jb
(bad)
ss
dec
sbb
in
xchg
mov
jmp
xor
push
popf
pop
cmp
push
adc
iret
ins
lods
pop
cmp
imul
gs
xchg
add
fcmovnbe
xchg
push
test
push
les
and
cmp
sbb
xor
repz
pop
pop
movs
cmc
mov
xchg
xor
aaa
mov
xlat
pushf
inc
inc
or
or
addr16
ret
xor
dec
jb
cli
imul
sbb
sbb
(bad)
push
test
inc
shr
adc
jge
add
push
movs
das
pop
lds
xchg
sti
mov
popf
sti
mov
mov
aaa
mov
mov
lds
mov
inc
std
gs
mov
lds
mov
xor
fsub
out
fisub
push
lods
mov
add
cmp
dec
movs
add
movs
or
das
pop
inc
loopne
enter
or
fimul
jmp
fidiv
cmp
sbb
cli
sahf
fldenv
call
fld
sub
mov
out
mov
xor
push
ret
sahf
jb
test
mov
call
mov
cmps
jns
out
cmp
aad
mov
and
adc
repz
std
sub
jne
stos
mov
pop
sub
int3
inc
mov
cmps
push
loopne
push
sar
cmp
out
clc
inc
std
jmp
pop
dec
in
pusha
ins
mov
adc
not
sbb
aad
outs
inc
jg
in
jbe
cmp
xchg
mov
aas
bound
adc
and
dec
sbb
data16
jmp
std
jbe
(bad)
jl
sub
inc
lods
xchg
or
ins
dec
mov
jne
pop
xchg
cmc
mov
mov
and
sahf
cdq
out
adc
(bad)
xor
repz
inc
push
mov
mov
cmp
loope
jl
pop
pop
adc
std
sbb
shr
pop
mov
mov
mov
rcr
mov
(bad)
cmp
jne
(bad)
cs
add
push
jg
cld
in
jmp
xchg
out
repnz
push
cdq
mov
aam
inc
add
jne
push
mov
mov
mov
and
cmps
mov
xchg
pop
inc
and
fdiv
cmp
and
sbb
shr
inc
sub
and
(bad)
lds
repnz
mov
push
xor
mov
in
sbb
inc
(bad)
add
cmc
add
je
and
push
inc
icebp
jecxz
loopne
lds
retf
mov
pop
cs
aaa
adc
mov
std
test
sbb
gs
mov
mov
mov
xor
(bad)
dec
sub
mov
cmps
loope
add
ret
call
add
loop
(bad)
add
or
arpl
push
mov
pop
xor
scas
push
daa
out
add
(bad)
cld
xor
mov
jb
xchg
rol
xor
cwde
push
inc
call
lock
(bad)
push
push
sbb
stos
pop
jl
(bad)
mov
xlat
jecxz
mov
add
pop
sbb
mov
stos
mov
fsubr
daa
or
mov
xchg
inc
cmps
jo
imul
mov
pop
lea
mov
aas
push
xor
aas
push
push
(bad)
pop
xor
repz
jae
imul
(bad)
mov
jge
sbb
xchg
sub
xor
sbb
int3
push
ss
mov
lds
cwde
or
jmp
mov
lods
repnz
fxch
or
lock
push
stos
jecxz
rcr
sub
cmp
sub
pop
jge
mov
push
sub
or
(bad)
xchg
imul
dec
lock
pop
xchg
fmulp
(bad)
std
not
mov
adc
xchg
arpl
shr
std
aas
das
call
pop
(bad)
xlat
jmp
xchg
loope
std
pop
jns
test
icebp
ja
stos
xor
pop
and
retf
pop
(bad)
stos
jle
cmp
inc
std
jb
xor
ins
cli
cmp
mov
jo
dec
xlat
dec
sbb
dec
mov
jg
shr
call
fimul
push
test
dec
cmp
loop
cmp
jbe
ret
into
mov
les
jge
ins
je
loope
call
retf
lahf
call
jge
jae
push
cmc
mov
retf
push
fidiv
cmp
push
cs
jmp
imul
ret
jecxz
loop
out
add
xor
sbb
mov
iret
out
mov
push
inc
test
imul
test
call
pop
adc
cmc
int
sti
ins
dec
xchg
ret
dec
je
ins
shl
ins
mov
fild
call
pop
mov
shr
nop
inc
adc
shr
add
push
pop
outs
jmp
bound
cwde
inc
mov
shl
outs
cli
adc
lods
jge
rcr
aad
cmp
(bad)
and
cmp
lods
adc
cwde
mov
shr
push
dec
jae
std
inc
sar
or
es
pop
jne
xor
mov
push
mov
sub
mov
push
pushf
rcr
mov
adc
in
loop
xchg
mov
imul
fimul
cmps
xchg
call
hlt
xchg
sub
xchg
jne
pavgw
jmp
xchg
sub
sub
dec
dec
jmp
xchg
sbb
scas
mov
sub
(bad)
jns
scas
add
movs
sbb
test
add
outs
xor
inc
dec
ror
lods
mov
cmp
jb
data16
repnz
sub
pop
pusha
inc
jbe
push
lds
inc
xchg
adc
fist
rol
cmc
into
sub
imul
xor
test
mov
out
ret
jl
mov
neg
lds
bswap
mov
das
(bad)
shl
popf
jno
inc
sub
mov
xchg
jl
xor
push
fstp
push
push
or
push
out
daa
out
call
(bad)
cmc
nop
xor
repz
imul
repz
call
xchg
xchg
shl
mov
pushf
cwde
repnz
jb
and
and
imul
nop
push
cmp
retf
xor
test
push
in
icebp
cdq
pop
dec
sbb
inc
lahf
xchg
into
enter
xchg
rcl
jmp
cld
add
adc
dec
ret
(bad)
aaa
push
jbe
cs
cmps
mov
and
jno
xchg
daa
push
mov
int
xchg
pushf
jmp
dec
add
jo
rcl
pop
test
pminsw
jge
mov
xchg
test
ret
push
jmp
mov
xchg
sbb
xor
pop
stos
jo
cli
daa
pop
mov
mov
add
fld
out
pop
lfs
loope
(bad)
popf
scas
test
and
inc
mov
out
pop
add
cli
retf
rol
addr16
leave
lock
stos
stos
pusha
ins
sti
rol
sub
movs
aad
into
lahf
xchg
adc
xor
int3
adc
mov
or
jo
jl
fidiv
aas
jg
mov
mov
and
sbb
into
aad
push
cwde
mov
pop
ds
sar
mov
mov
stos
shl
or
idiv
cmc
aam
or
xor
and
sar
mov
shr
retf
dec
or
push
outs
pushf
call
and
jl
pusha
in
and
jno
mov
stos
ins
cli
retf
push
aam
xor
push
push
rol
aas
in
inc
outs
call
into
pop
xchg
inc
sar
in
lods
and
nop
cmp
dec
jbe
inc
or
sbb
enter
push
inc
ds
sbb
cli
pop
imul
outs
inc
sbb
test
fst
xchg
popf
and
jne
jo
(bad)
jl
mov
jmp
mov
nop
jge
nop
les
dec
stos
xchg
cld
inc
iret
add
sub
cli
imul
lock
push
push
cmp
arpl
mov
es
pop
and
jle
dec
mov
push
cmps
push
xchg
jno
in
retf
inc
sar
push
inc
fcomp
bound
frstor
das
dec
pop
movs
std
sub
lahf
pop
or
push
jo
in
stc
jne
dec
jns
icebp
dec
stc
add
cmps
fimul
mov
bound
xor
add
mov
pop
aas
or
aam
(bad)
mov
adc
out
mov
or
mov
clc
into
push
pop
xor
cmp
shl
test
xchg
leave
outs
add
ret
fimul
xchg
mov
js
mov
(bad)
adc
xchg
outs
imul
mov
neg
inc
in
gs
add
dec
inc
dec
jb
sbb
test
retf
jmp
dec
iret
sbb
jmp
pop
sub
push
pop
xchg
mov
inc
arpl
adc
and
push
repnz
arpl
pushf
ror
fwait
jo
fisubr
sahf
repnz
cld
xlat
xchg
inc
aaa
fdiv
retf
aaa
and
addr16
xlat
gs
xchg
jno
mov
pop
pop
sbb
repz
mov
retf
cmp
inc
in
cdq
int
lahf
cmp
mov
pop
sahf
sbb
nop
lock
mov
lock
adc
aas
cli
push
jl
xor
push
bound
push
out
xor
and
xchg
addr16
dec
cmps
xlat
add
mov
loopne
and
adc
adc
clc
mov
in
loopne
mov
xor
jbe
into
mov
mov
push
xchg
es
rcl
mov
push
xchg
(bad)
ds
test
push
add
sbb
xor
mov
mov
jns
popf
pop
loop
addr16
push
and
movs
out
jg
xor
jae
sub
jmp
mov
pop
int
je
mov
mov
loope
rcl
call
mov
mov
sti
xchg
ret
data16
pop
mov
push
dec
or
les
inc
scas
sub
mul
jo
loop
inc
dec
mov
add
jmp
mov
idiv
xor
mov
sbb
scas
or
xor
pop
xchg
js
mov
scas
mov
jmp
iret
movs
cmc
(bad)
jp
data16
cmp
imul
dec
stos
cmps
pop
adc
jl
pop
pop
add
dec
push
sbb
sub
and
dec
mov
jmp
sbb
sbb
and
imul
xor
jb
ret
cmp
xchg
outs
fdivr
imul
xchg
repnz
mov
mov
adc
sbb
out
mov
xor
inc
fnstcw
ja
jae
mov
rcl
sub
jo
pop
fcmove
into
sahf
repz
jae
repnz
sbb
mov
das
jb
aam
add
stc
loopne
cmp
cmps
and
retf
pop
jne
cmc
je
dec
imul
fmul
jb
hlt
fbstp
scas
int3
shr
cld
adc
jmp
repz
leave
or
or
imul
sub
mov
cmc
mov
fisubr
into
jle
adc
jmp
pop
jle
sti
xor
mov
pop
sub
sti
lods
test
push
in
cmp
ror
xchg
pop
add
arpl
sti
jbe
inc
pop
sbb
push
inc
pop
jbe
mov
cli
inc
jge
xor
push
or
mov
dec
test
xor
mov
fst
mov
fisttp
hlt
push
xor
icebp
sub
mov
xchg
mov
addr16
in
adc
out
cmp
sti
loopne
in
inc
push
xchg
xchg
add
fsubr
inc
and
lahf
jns
clc
addr16
jmp
imul
mov
adc
mov
ficomp
add
ror
adc
dec
lds
je
out
loop
stc
sub
aaa
cld
nop
xchg
dec
jl
mov
and
sbb
xchg
cmp
rcr
push
push
or
cmp
jo
pop
fstp
mov
sub
xchg
jae
xchg
or
or
sbb
inc
inc
mov
stos
inc
push
js
outs
jb
sub
jno
xchg
xchg
cwde
addr16
dec
jp
adc
jo
dec
sub
xchg
pop
xchg
lods
add
push
in
jg
in
scas
dec
cmps
inc
xor
cmc
hlt
(bad)
adc
cmp
mov
imul
inc
rcl
jns
add
(bad)
scas
retf
push
push
dec
push
sub
movs
mov
push
xor
nop
xor
bnd
sbb
pop
cld
inc
push
or
push
shr
jp
cmp
neg
or
nop
or
loopne
sbb
jne
dec
scas
popf
cmps
(bad)
iret
mov
mul
mov
mov
jmp
xor
push
add
aad
popa
and
rol
mov
and
lds
cmp
adc
xchg
push
xchg
inc
mov
dec
ins
imul
out
daa
(bad)
adc
ja
(bad)
into
and
cmp
pop
mov
jb
adc
mov
or
test
pop
inc
mov
push
aam
loop
xchg
jae
(bad)
adc
lds
jae
sbb
xor
test
jle
sbb
ja
xor
xlat
(bad)
out
movs
mov
push
pop
into
jns
add
and
out
sub
add
xor
pop
ins
call
test
jnp
data16
in
xor
or
cmps
xor
shl
adc
or
into
cld
(bad)
mov
mov
push
ret
stc
stos
ins
stos
xor
in
mov
mov
ja
mov
sbb
das
pop
es
add
call
adc
daa
mov
ret
and
xchg
inc
rcl
inc
(bad)
repnz
cmp
mov
adc
pop
mov
icebp
imul
pop
out
sub
sub
scas
jne
jmp
pop
out
outs
jp
sub
cmps
jns
mov
fidivr
dec
ja
sahf
inc
adc
jmp
xchg
pop
icebp
mov
js
mov
mov
scas
jo
lahf
je
aad
(bad)
dec
inc
push
jecxz
fs
jo
inc
call
pop
push
addr16
pop
xor
push
cmp
(bad)
mov
xchg
push
nop
jo
ins
fidiv
es
test
lods
(bad)
push
xor
sti
aad
inc
dec
mov
sti
addr16
lock
lds
into
xor
cmp
inc
loope
sbb
mov
jbe
push
popa
cld
cmp
xchg
and
and
or
push
mov
call
mov
and
shl
and
lods
cmove
clc
imul
and
inc
jns
and
in
sub
adc
ds
movs
push
es
push
inc
in
shl
dec
outs
mov
scas
fcmovnb
dec
add
sbb
xchg
and
jmp
xchg
cwde
iret
xchg
std
inc
fdivr
movs
and
sti
jmp
inc
jbe
inc
sahf
and
sbb
stos
test
daa
arpl
mov
cdq
inc
je
inc
setg
jb
cmc
lea
jp
xchg
gs
sub
xchg
sub
arpl
cmps
pop
push
xor
test
sub
rol
loopne
jns
lods
mov
les
stc
or
cwde
cmp
(bad)
push
arpl
sbb
dec
and
cs
mov
jp
cmp
xchg
movs
dec
adc
xlat
mov
mov
inc
cdq
cmp
aas
jp
xchg
xchg
mov
mov
mov
jge
jmp
std
lahf
call
ins
cmps
movs
std
jmp
retf
jmp
sub
adc
adc
enter
icebp
in
xlat
xchg
nop
and
in
lock
int3
inc
ja
or
xor
jo
retf
std
pop
sahf
push
or
aam
adc
push
(bad)
movs
mov
mov
sub
loope
xor
sub
xchg
inc
mov
(bad)
out
icebp
xor
jle
ds
add
xchg
pushf
lds
aas
jb
or
mul
lahf
fistp
int3
mov
cdq
xor
repz
xchg
test
adc
movs
or
aaa
mov
pop
jle
jmp
add
mov
adc
pop
leave
add
in
sub
jns
(bad)
xchg
xor
inc
shr
add
inc
and
push
adc
dec
or
jnp
jge
es
scas
loop
or
out
mov
inc
cmp
sub
pop
xchg
add
mov
mov
movs
dec
cmovnp
mov
push
in
mov
popf
jg
xchg
jge
mov
cmp
rcl
inc
xor
ficomp
imul
cmps
retf
xchg
js
mov
push
out
push
nop
push
push
cmps
cmps
mov
or
dec
data16
cmps
adc
fiadd
ret
call
mov
pop
pop
cmc
ret
into
icebp
xchg
out
push
cdq
add
retf
fild
lock
fistp
(bad)
jge
leave
pop
outs
retf
cmp
lock
test
xchg
jne
pushf
movs
pop
push
retf
push
pop
mov
sub
rcr
jne
jmp
mov
jae
lea
lock
dec
push
js
mov
mov
stos
ins
push
ror
or
inc
mov
not
iret
mov
push
push
ror
and
clc
xchg
cs
cmps
cmp
fist
jmp
ret
and
or
sub
add
mov
push
cmps
(bad)
imul
shl
cmps
sub
lods
jbe
out
call
pop
fwait
sub
mov
sar
les
push
adc
inc
mov
adc
push
ins
and
dec
stos
jle
push
call
aas
push
repz
in
cld
loop
call
lahf
adc
sahf
mov
jecxz
or
outs
adc
(bad)
out
mov
sahf
rcl
enter
in
jmp
add
lds
mov
and
push
das
cmp
jo
jl
adc
pop
adc
push
jge
xchg
(bad)
in
push
lods
fcomp
mov
shl
clc
dec
cmp
mov
xor
xor
dec
cmps
jmp
test
cmp
lods
mov
int3
mov
out
imul
aaa
aaa
sub
test
(bad)
adc
mov
pop
das
xor
adc
add
mov
into
repz
hlt
add
xor
int
sub
int3
pop
ins
je
fild
cmc
sahf
ficomp
sub
pusha
pop
inc
stos
aaa
mov
mov
cli
gs
pop
int
xor
and
add
pop
data16
mov
mov
push
cmps
pop
pop
cmp
xchg
push
sbb
shl
scas
xchg
call
inc
cmp
div
pop
xchg
nop
leave
loopne
mov
xor
or
and
mov
fwait
das
clc
dec
call
lods
test
js
daa
hlt
jae
mov
push
jecxz
ins
inc
add
in
and
scas
xchg
push
jp
jecxz
pop
cwde
mov
jns
mov
cmp
add
inc
aam
mov
add
mov
lea
sub
popa
inc
es
arpl
push
jne
pop
lea
fnstcw
cmp
cmp
add
adc
shl
les
lods
cmp
sub
fidivr
movs
inc
inc
sbb
sbb
lds
lahf
or
pop
sti
shr
fmul
cmp
test
dec
mov
push
cdq
push
or
loop
sti
xchg
sbb
or
lods
mov
data16
ficom
xor
mov
xchg
in
and
pop
push
pop
mov
or
test
mov
(bad)
mov
shr
xor
jp
jl
jecxz
mov
cli
std
jmp
push
add
(bad)
popf
or
movs
aam
pop
clc
sub
mov
addr16
aad
pop
inc
adc
stc
into
push
jae
pusha
xor
xchg
out
and
dec
daa
bound
pusha
imul
xchg
popa
sub
pop
dec
pop
inc
xor
(bad)
aam
ss
js
imul
or
jo
add
push
addr16
fs
popa
mov
lea
js
in
dec
xor
dec
rol
pop
repnz
inc
fcmovnb
ds
xchg
pop
xor
or
mov
fcmovu
bound
fstp
xchg
jae
rcr
data16
mov
and
test
popa
xchg
push
fs
or
jecxz
movs
ficom
sbb
(bad)
and
repnz
(bad)
push
dec
je
shl
mov
ja
mov
xchg
jnp
dec
(bad)
jno
jnp
outs
ror
push
and
dec
(bad)
idiv
movs
fild
call
add
cmp
shl
test
les
inc
pop
dec
loop
in
std
xor
add
xchg
outs
ins
xchg
test
inc
push
nop
das
aad
movs
fs
jns
lds
aaa
lock
add
mov
aam
pop
sahf
mov
xchg
jns
adc
adc
stos
xchg
in
mov
call
pop
push
jmp
push
retf
dec
test
dec
scas
les
cmp
add
fiadd
ss
push
jno
pop
(bad)
and
test
bnd
lock
(bad)
xor
fwait
push
sub
out
addr16
stc
das
inc
loopne
call
in
mov
and
fstp
mov
push
cmps
fs
clc
ins
shl
add
in
xchg
sub
int3
test
lock
jbe
xchg
cmp
add
and
add
inc
xchg
push
cs
sbb
fwait
mov
inc
mov
aas
(bad)
stos
mov
hlt
sub
pop
(bad)
xchg
adc
mov
xor
pop
cmp
xor
lea
out
push
pop
xchg
movs
imul
in
push
stc
in
push
mov
jmp
addr16
push
mov
mov
push
pop
dec
cwde
push
mov
dec
sbb
inc
arpl
pop
mov
xchg
mov
xor
mov
cmp
aad
pop
aam
movs
(bad)
lock
ret
sub
stc
and
cmp
mov
les
push
sub
xor
pop
repnz
repnz
mov
inc
jmp
cmp
xrelease
hlt
popf
fnstcw
nop
stos
ss
sar
les
int
sahf
cmc
sbb
pusha
(bad)
sub
lods
sti
push
into
ret
shl
pop
pop
aam
mov
loope
aad
adc
cmp
jbe
push
mov
pop
or
dec
mov
mov
retf
sub
or
das
test
jne
dec
aas
sbb
lahf
or
mov
fsubr
test
and
rol
jae
sbb
aaa
xor
dec
iret
xor
xlat
ror
jbe
sbb
in
lods
inc
mov
ror
mov
ins
into
imul
in
add
in
cmp
in
cs
sbb
or
dec
in
or
xchg
mov
jle
das
adc
adc
or
and
ret
mov
icebp
shr
and
bnd
ins
int3
cmp
shl
inc
mov
enter
xchg
cs
mov
pop
sub
sub
leave
stc
mov
imul
ret
pushf
enter
dec
ss
xchg
cmp
push
daa
push
xchg
daa
fsub
sub
jecxz
mov
sti
push
jno
in
addr16
ror
push
or
retf
pop
sbb
or
or
je
jl
jmp
daa
out
pop
rol
jp
mov
loopne
jbe
push
data16
call
cmps
pop
sbb
lahf
inc
add
lods
lock
les
loop
dec
mov
jne
fiadd
in
hlt
popf
xor
(bad)
adc
out
sar
dec
xchg
jnp
jp
add
jge
dec
inc
call
ins
dec
fbstp
pop
or
int3
fdivr
mov
cmps
repnz
cmps
cdq
(bad)
xor
cmp
cld
xchg
cmps
imul
arpl
jmp
test
aad
xor
retf
jl
xchg
cmp
in
dec
call
test
rol
pop
and
out
(bad)
stc
push
or
adc
push
repnz
aaa
and
push
in
js
adc
mov
lahf
xchg
fidiv
cld
inc
mov
push
pop
cmovb
and
cwde
loop
mov
mov
aam
mov
mov
sub
fnstcw
mov
jae
(bad)
jle
mov
mov
fucomi
test
pusha
adc
rcr
sbb
mov
sbb
pop
push
cmp
inc
mov
cmp
cmp
shl
bound
add
(bad)
in
scas
fsub
or
jo
clc
shl
xchg
xchg
shr
ja
shl
and
call
mov
movs
push
jno
xchg
sar
cwde
dec
ja
jae
inc
inc
add
inc
dec
pop
ss
popa
or
dec
mov
sbb
je
pop
shr
xor
lods
add
xchg
pop
out
(bad)
cmp
xor
gs
mov
jnp
xlat
add
popa
mov
retf
test
xor
jp
popf
cmps
fistp
add
cmp
fs
or
out
push
xor
push
jmp
in
std
pop
rol
stc
push
and
aas
push
dec
lods
or
or
fmul
ins
stos
xchg
xchg
jp
jecxz
stc
inc
mov
pop
loope
adc
mov
fcmovbe
scas
dec
cmps
mov
pop
cmc
mov
stos
inc
sbb
mov
jp
sub
push
fidiv
and
xchg
cmp
push
xchg
mov
cld
pop
loopne
inc
test
jbe
sub
dec
xor
sbb
jne
pushf
xor
adc
cmc
lea
dec
jo
inc
div
mov
mov
icebp
int3
rep
push
pop
ret
pop
mov
ja
ss
(bad)
cmp
jno
imul
add
pushf
sbb
out
stos
add
xlat
ds
addr16
mov
imul
dec
xchg
fstp
imul
aaa
cwde
rcr
mov
ds
xor
out
inc
dec
cmp
scas
mov
push
xor
pop
add
xor
push
movs
inc
push
cwde
pop
arpl
into
or
xor
enter
adc
bound
xchg
inc
add
mov
push
mov
pop
dec
xor
js
shl
cmp
das
sub
scas
sar
xchg
xor
jb
xchg
xchg
mov
pop
fcmovnb
cmp
retf
mov
lock
shr
sbb
dec
bound
rcl
or
dec
add
fstp
mov
xor
cmp
adc
enter
shr
ror
nop
jp
xor
adc
retf
cmp
xchg
mov
or
pusha
xor
xor
int
inc
sbb
mov
outs
fisub
popa
stc
cmps
mov
imul
push
mov
cmc
pushf
jecxz
inc
ja
movs
dec
cmp
jg
mov
pop
rcl
inc
stos
es
aaa
xchg
movs
mov
loop
push
and
mov
jmp
add
pop
into
mov
or
or
pop
enter
cwde
neg
fwait
cmp
cmp
and
mov
imul
loop
adc
mov
stos
xchg
fistp
fcom
sbb
sub
mov
xchg
pop
adc
int
in
sub
mov
(bad)
adc
test
rcr
test
ss
pop
xor
psllq
mov
mov
mov
in
push
jmp
mov
or
cmps
jle
mov
jnp
sub
dec
ret
mov
call
add
xchg
mov
dec
dec
das
movs
mov
bound
mov
adc
scas
imul
les
sar
cmc
xchg
mov
xchg
inc
fwait
add
xor
jns
xchg
jp
xor
add
add
mov
mov
sbb
push
xchg
hlt
inc
ins
mov
loope
pop
pop
xchg
cmp
xchg
out
test
adc
sub
xor
mov
sahf
fs
or
fs
loopne
cmp
pop
adc
add
inc
add
dec
mov
mov
and
cwde
outs
mov
xchg
out
test
or
xchg
pop
fwait
mov
mov
int3
sub
mov
mov
xor
mov
add
scas
xchg
push
push
push
mov
jge
lds
xchg
mov
pusha
stos
jne
sub
or
inc
rcr
fdivrp
mov
dec
push
movs
nop
(bad)
sbb
add
ss
ins
sub
jno
adc
jecxz
les
lods
jp
cdq
cli
mov
test
cmc
int3
add
scas
pop
cmps
aam
test
jmp
jle
(bad)
imul
fdivr
jns
lods
shl
stos
cmps
add
mov
xor
icebp
dec
add
call
ret
loopne
(bad)
(bad)
or
arpl
mov
out
cdq
repz
in
in
cmp
aad
and
push
jno
push
inc
adc
xchg
pop
daa
clc
test
jmp
lods
mov
in
movs
jne
jno
lods
cs
mov
rcr
or
enter
adc
mov
stos
jg
mov
cmp
out
xor
arpl
jo
fs
mov
in
push
mov
xor
movs
jmp
pop
mov
pop
iret
inc
mov
stos
or
jbe
cwde
xchg
push
dec
ins
xchg
fdivrp
loop
sbb
aaa
fcmovbe
push
push
xor
jmp
mov
sbb
out
add
push
ja
stos
jmp
movs
add
dec
mov
mov
pop
xor
jl
push
adc
test
push
and
sub
inc
cwde
test
xchg
test
xchg
or
sbb
(bad)
das
ds
cmp
test
pop
pop
cmp
shr
pop
mov
retf
leave
(bad)
icebp
int3
fdivrp
sbb
call
dec
mov
push
mov
lds
iret
cwde
mov
pop
cli
stc
jmp
ds
(bad)
push
(bad)
mov
sub
out
pusha
popa
and
add
xor
cmp
mov
hlt
clc
xchg
mov
(bad)
fst
les
cmp
xor
xor
sbb
in
adc
out
push
push
std
inc
scas
sbb
fdivr
into
pop
add
and
push
mov
push
inc
push
adc
daa
pusha
adc
sub
pusha
sbb
ja
xchg
add
test
push
fs
mov
loopne
adc
cmp
mov
and
and
ins
add
sbb
push
push
out
mov
addr16
sub
pop
call
inc
mov
fwait
nop
push
adc
or
icebp
out
or
fs
add
test
sub
cld
mul
enter
gs
jmp
sbb
push
ret
mov
(bad)
test
dec
sub
scas
mov
loope
sbb
mov
jne
add
inc
sub
inc
outs
xchg
stos
bound
js
adc
or
loop
push
ins
clc
adc
mov
rcl
sub
ret
or
shr
mov
pusha
repnz
das
jp
push
mov
push
stos
xchg
in
das
push
jge
aad
aad
push
inc
xchg
dec
mov
test
bound
lahf
xor
mov
je
std
sbb
mov
sub
dec
mov
add
pop
mov
ja
cli
stc
mov
sbb
or
fs
std
pop
ins
jbe
mov
mov
cmp
mov
imul
daa
daa
out
xor
cmps
icebp
fld
les
shl
xor
call
push
push
hlt
in
nop
mov
mov
mov
push
mov
adc
pop
in
movs
push
sbb
jnp
fnstenv
adc
popa
in
call
add
mov
inc
push
xor
std
pop
icebp
push
pop
add
push
push
rcl
xchg
push
xchg
mov
adc
lods
pop
add
cmp
cmp
cdq
adc
lahf
mov
repz
mov
cmp
or
inc
push
int
pop
loope
(bad)
pop
out
push
or
(bad)
fcmovnbe
mov
outs
push
xor
int
or
mov
lds
sbb
push
mov
icebp
pop
add
adc
call
ds
clc
mov
sti
loopne
data16
mov
icebp
cld
inc
loope
mov
neg
push
mov
out
mov
dec
pop
in
jo
sar
pop
xchg
mov
call
or
mov
out
test
dec
or
or
imul
ins
dec
xor
sbb
inc
sbb
xor
in
nop
dec
push
adc
outs
clc
xchg
add
pop
ins
ins
jb
push
out
jb
mov
adc
mov
sub
mov
sbb
cmp
xor
scas
fiadd
push
ret
lods
std
push
imul
fxch
sub
cmp
push
inc
xor
in
test
daa
ja
mov
cmp
aam
push
(bad)
mov
fwait
xor
loopne
push
outs
in
je
sbb
mov
enter
inc
jp
in
xor
test
or
pop
xlat
sbb
addr16
div
dec
dec
push
and
jl
daa
test
icebp
loop
xchg
fcmovnb
and
dec
cmp
push
cmp
or
das
int3
push
mov
mov
mov
aad
dec
sar
dec
rcl
icebp
pop
jmp
mov
ins
ror
push
not
movs
mov
(bad)
hlt
push
bt
aaa
inc
pop
sub
imul
(bad)
mov
adc
adc
fiadd
sbb
test
retf
in
loop
xchg
jb
mov
push
and
mov
pop
pusha
jne
sbb
bound
inc
rcr
cmps
adc
inc
aas
movs
sub
sbb
repz
xchg
mov
cmps
js
dec
mov
xor
ds
cmp
and
outs
inc
js
ss
mov
xor
lds
xor
iret
jmp
scas
test
addr16
arpl
push
out
out
sub
sbb
jecxz
cmp
icebp
jl
test
cwde
dec
enter
dec
inc
icebp
dec
mov
out
sub
inc
leave
fwait
mov
push
pop
daa
fld
sar
xor
cmovbe
mov
mov
in
and
sbb
jb
inc
xchg
xor
xchg
inc
movs
rol
pop
cmp
dec
or
push
cmp
pop
cmps
jae
cmp
and
and
push
std
jg
inc
aas
or
sub
adc
push
jecxz
cmp
cld
mov
sbb
push
lods
pushf
(bad)
ja
xchg
pop
cmps
or
adc
sar
nop
cs
cmp
mov
(bad)
dec
pusha
cdq
outs
lahf
xor
stos
or
clc
push
std
ficomp
mov
mov
or
movs
dec
pop
sbb
xor
xchg
and
or
int3
mov
adc
dec
fisub
mov
scas
or
loope
aas
sub
(bad)
cmp
xor
mov
adc
in
adc
bound
sub
retf
xor
stos
(bad)
sub
jmp
fdivr
iret
sbb
mov
mov
int3
addr16
xchg
sbb
jb
sbb
pop
fld
popf
es
pushf
sub
mov
lods
lods
mov
xchg
and
ja
dec
pop
dec
sub
dec
add
xor
repz
add
mov
retf
lods
jge
out
icebp
mov
test
mov
fucom
fst
loope
mov
mov
das
and
aam
lock
je
sbb
loopne
add
and
cmp
inc
call
repnz
imul
jne
mov
loope
cmp
push
addr16
inc
pop
repnz
cld
cdq
xor
sub
xor
test
push
push
xchg
sub
dec
adc
xor
ja
or
sub
mov
call
and
fisubr
popa
cmp
cmp
out
call
aaa
int3
or
popa
jecxz
lds
mov
xor
clc
sub
sbb
lods
dec
rol
pop
and
jecxz
div
ds
dec
ss
arpl
inc
cwde
stos
add
rcr
inc
mov
movs
sar
mov
mov
ins
mov
aas
ja
(bad)
ins
fwait
ja
mov
inc
aad
adc
inc
in
stos
push
das
mov
mov
dec
ins
(bad)
inc
jg
add
js
dec
jno
add
adc
add
loop
adc
cmp
stos
bound
sub
jmp
or
cld
aad
push
fidivr
rcl
aaa
cvtdq2ps
sub
ja
mov
push
repz
push
add
adc
mov
xchg
mov
cmc
fadd
jge
and
mov
(bad)
lods
shr
inc
mov
in
sahf
icebp
mov
sub
add
test
mov
mov
into
mov
mov
xor
pop
retf
scas
ror
shr
xlat
mov
add
(bad)
(bad)
dec
movs
pop
(bad)
ss
sub
cmp
jl
sub
xchg
mov
push
xlat
mov
sub
enter
cmp
add
stos
inc
ror
xor
dec
push
leave
lods
mov
xor
sar
cmps
jo
repz
add
inc
aam
mov
jmp
mov
inc
int
aas
in
inc
ret
jne
shr
jg
mov
or
mov
jo
out
clc
aaa
cld
pop
scas
pop
xlat
adc
dec
test
rol
and
out
stc
mov
mov
cmp
pop
mov
addr16
lahf
cli
mov
inc
mov
call
pop
out
loop
sub
sub
mov
and
sub
push
jno
imul
sahf
adc
out
clc
les
ins
jbe
jle
fimul
add
sbb
push
push
push
jg
neg
aaa
mov
in
js
cmp
in
enter
jno
adc
jge
fcmovne
test
push
shl
sar
and
add
jmp
or
mov
push
imul
pop
mov
mov
xchg
ficomp
fnstenv
xor
lock
fadd
sti
bound
xor
aaa
mov
dec
in
popa
pushf
gs
pusha
inc
(bad)
mov
repnz
test
xchg
icebp
push
daa
aad
push
fs
jno
mov
xlat
test
cmp
adc
dec
arpl
fidiv
sbb
ror
mov
cmps
adc
mov
inc
dec
movs
pop
adc
or
sbb
shr
ret
test
(bad)
in
add
sbb
add
scas
jb
call
clc
inc
pop
cs
cld
xchg
sub
hlt
inc
out
lods
stos
fld
lods
js
and
call
cmp
sar
push
push
fs
ficom
ret
popf
and
(bad)
mov
add
in
stc
repnz
cmp
rcl
and
dec
pop
outs
stos
aaa
aad
aad
push
stc
scas
cmps
enter
aas
cmp
scas
push
add
in
mov
outs
jmp
ins
adc
add
stos
inc
xor
pop
mov
inc
and
adc
push
imul
iret
nop
dec
lods
mov
dec
push
hlt
repnz
xor
cdq
jp
jecxz
hlt
data16
mov
ins
mov
add
cmp
daa
push
mov
rcr
sbb
ret
sub
lahf
cs
ret
dec
xchg
xchg
out
lahf
or
out
out
xchg
sti
jnp
out
add
lock
imul
out
enter
push
push
movs
add
ror
fld
add
mov
outs
loope
fstp
cli
sbb
dec
movs
jmp
jge
and
sbb
test
stos
or
loope
and
lock
fucom
cwde
jne
cmps
fidivr
sub
scas
leave
fisubr
(bad)
pushf
js
ror
xor
sar
addr16
loop
les
aam
inc
mov
push
inc
push
cmp
jl
sub
jmp
jmp
fstp
inc
(bad)
sbb
pop
push
test
test
out
popf
pop
sub
dec
loop
addr16
popa
call
fild
loope
int
jae
add
xchg
int3
sub
loop
shr
pop
pop
mov
scas
cs
popf
push
outs
lods
inc
mov
loope
leave
xchg
push
lea
and
inc
shl
or
sub
enter
xchg
jle
test
cmps
outs
fadd
pop
inc
dec
sub
daa
inc
mov
mov
stc
ret
es
dec
push
bnd
push
enter
and
sbb
jnp
popf
into
test
aaa
sub
unpckhps
adc
sub
and
mov
sub
inc
inc
sbb
out
sub
int
cmp
xor
or
mov
icebp
mov
cmp
cmp
sub
sub
fwait
mov
scas
push
stc
in
cli
test
push
fiadd
sahf
fcomp
jg
mov
lds
scas
or
retf
jp
(bad)
hlt
mov
arpl
retf
int3
cmps
push
inc
inc
fiadd
add
cdq
sti
mov
mov
movs
fstp
ss
aad
cmp
push
push
not
push
mov
pop
jl
cmp
dec
mov
mov
mov
mov
cmp
mov
addr16
outs
icebp
inc
test
cmp
xor
push
dec
ds
mov
xor
push
mov
iret
sbb
and
aas
addr16
pop
loopne
sub
pop
adc
int
adc
cmps
jmp
gs
in
rcl
aas
xchg
cwde
repz
and
mov
cli
jnp
aas
sbb
fisubr
mov
pop
fdivr
cmc
ret
stos
ret
sahf
xchg
shr
dec
mov
into
hlt
jmp
mov
cmp
mov
pop
push
cmps
mov
adc
out
mov
sub
push
push
out
mov
lods
xlat
(bad)
mov
xchg
and
ret
mov
adc
daa
ficom
sbb
sub
sub
add
lods
lock
aad
in
mov
xchg
adc
mov
adc
and
and
lea
out
and
cmp
jno
cmp
pushf
xchg
fild
fmul
cmp
mov
popf
mov
push
cdq
bound
pusha
adc
xchg
inc
shl
and
xor
outs
cmps
adc
or
add
push
(bad)
cwde
rol
scas
adc
idiv
mov
ins
or
dec
pop
mov
sub
cmp
sub
lods
mov
lahf
mov
sbb
dec
das
xchg
mov
mov
movs
stc
jle
cwde
mov
cmp
dec
push
fabs
lock
(bad)
mov
repnz
mov
outs
or
cmp
lahf
mov
ret
test
das
mov
cmp
pop
xor
inc
sub
repz
ficom
pop
(bad)
fs
cli
mov
jmp
mov
test
sub
loope
cdq
mov
aam
js
movs
jae
push
jo
std
mov
jle
pop
or
addr16
iret
les
sar
popf
add
jle
and
test
pop
leave
faddp
test
mov
and
cmp
jae
std
aaa
in
xlat
rol
cmp
cmp
imul
mov
in
add
mov
adc
xor
aad
leave
shl
leave
pop
inc
pop
movs
pop
mov
cdq
jge
sub
cli
pop
mov
pop
fidiv
xor
xchg
inc
add
xor
adc
lock
bound
std
into
dec
scas
out
cdq
js
push
xchg
aaa
int3
jecxz
ficom
cmps
(bad)
les
push
mov
pop
xchg
dec
ins
pop
mov
cwde
mov
xor
std
cmp
aas
xchg
mov
inc
or
push
pop
imul
mov
xor
lods
daa
adc
mov
sub
jne
fmul
pusha
mov
daa
imul
leave
bound
loope
test
mov
inc
pop
add
mov
mov
sub
out
mov
outs
mov
sbb
cli
cmp
addr16
(bad)
in
or
adc
dec
pop
ja
icebp
sbb
into
out
aad
aas
popa
stos
xor
test
les
cmp
pop
mov
out
xor
mov
xchg
mov
fucomp
mov
sub
push
jg
dec
mov
add
ja
retf
adc
jbe
inc
fs
jne
inc
sub
repz
movs
icebp
ins
inc
stos
push
(bad)
pop
lock
fwait
push
adc
sbb
fbld
add
push
push
loop
jae
pop
push
mov
les
aad
jmp
fbstp
shr
cs
test
outs
adc
cld
shl
xor
or
mov
sub
out
mov
mov
imul
or
xor
inc
jmp
retf
dec
pop
mov
test
fwait
or
push
ds
jmp
jle
call
inc
scas
stc
fimul
mov
in
out
rcl
jmp
xchg
imul
aam
arpl
mov
pop
js
cmp
jne
push
ss
adc
das
jb
or
pushf
add
push
sar
leave
sbb
mov
aad
cwde
jno
jns
push
icebp
mov
dec
(bad)
xor
pop
cmc
(bad)
pop
or
add
das
ror
sbb
jecxz
sub
pushf
dec
xchg
scas
jle
push
mov
and
xlat
repz
int3
push
ss
and
fs
inc
push
and
lods
xor
jbe
rol
mov
jne
inc
nop
dec
int3
arpl
test
sub
movs
xchg
jb
fdivr
test
dec
sar
test
or
sub
and
or
ss
repz
add
and
and
and
mov
ins
add
mov
int3
xor
rcl
xor
ds
mov
dec
push
dec
mov
in
cld
daa
repnz
mov
fadd
scas
fistp
push
pop
inc
cwde
cmp
repz
push
dec
push
(bad)
stos
adc
xlat
pop
sbb
and
adc
addr16
sub
out
(bad)
aad
add
sar
retf
lock
out
xchg
xchg
push
(bad)
dec
mov
adc
xor
pop
xchg
sbb
adc
mov
imul
aas
xor
pop
jge
fisubr
cmc
iret
and
jmp
das
inc
mov
xchg
stos
mov
iret
int
cmc
fstp
adc
(bad)
mov
sbb
stos
pop
jno
iret
cmp
inc
test
inc
inc
dec
out
mov
mov
jle
add
adc
jo
dec
es
jmp
aaa
ja
outs
adc
or
outs
aaa
std
mov
cdq
cld
rcl
popf
in
push
mov
mov
xor
hlt
fcomp
cmp
mov
dec
jle
fadd
add
call
jmp
jae
ins
sahf
ja
pop
shl
mov
aad
repnz
dec
rcr
mov
add
aas
daa
cwde
sti
jae
es
aam
sbb
aas
mov
push
sbb
repnz
cli
lock
mov
lods
dec
fsub
pusha
and
imul
(bad)
push
cmps
xchg
jmp
mov
or
push
pop
jns
add
idiv
cdq
add
in
add
sub
aas
daa
rol
dec
icebp
retf
add
mov
jg
enter
xlat
mov
clc
jns
or
stos
stos
in
mov
mov
aad
call
int3
adc
sub
cmp
(bad)
popf
sub
movs
popa
out
loopne
sbb
aas
mov
(bad)
sahf
xor
xchg
repnz
jge
pop
mov
inc
in
js
jbe
adc
adc
push
jae
pop
outs
jo
mov
xor
xchg
in
jge
lea
push
aaa
xchg
je
cmp
outs
mov
mov
mov
pop
push
xor
pop
mov
es
mov
pop
test
mov
(bad)
cmp
pop
call
inc
stos
pop
sbb
xchg
mov
repz
(bad)
jmp
loope
cwde
es
nop
cdq
push
pop
lock
clc
add
cmps
loopne
imul
cmp
int3
ficomp
loopne
xor
shl
mov
inc
adc
iret
mov
out
add
stos
add
dec
retf
xchg
push
pop
rcl
pusha
push
cmp
mov
fdivr
jmp
sbb
clc
lods
outs
dec
test
dec
jg
ins
pop
mul
hlt
xchg
jae
nop
cmp
lods
xor
push
adc
sbb
jbe
xlat
aad
and
jno
add
mov
push
call
ja
pop
add
push
xor
mov
icebp
mov
cmps
js
mov
push
mov
mov
stos
cmps
sub
or
inc
fwait
aas
mov
dec
xchg
enter
loop
dec
popf
movs
sbb
xchg
jg
sub
add
jb
push
aas
cmp
es
push
popa
enter
and
mov
adc
sar
js
not
add
shl
and
leave
xchg
movs
inc
or
fadd
cmp
adc
dec
xchg
jne
sbb
pop
jnp
mov
outs
xor
mov
add
push
pop
xor
inc
xor
mov
call
fwait
mov
daa
stc
retf
push
mov
cmp
and
loopne
aas
push
je
outs
xor
retf
cmps
(bad)
jge
aas
repz
cwde
or
add
and
sbb
mov
sti
jmp
(bad)
jo
retf
dec
cmp
inc
mov
ret
inc
pop
cmp
lahf
in
adc
test
mov
int3
inc
push
sbb
mov
and
(bad)
cmp
push
adc
pop
das
rcl
lock
push
mov
xchg
cmc
not
fld
pop
mov
jns
mov
adc
lods
das
inc
xchg
mov
push
mov
div
xchg
rcl
fbld
es
int3
ins
mov
popf
pmaxsw
add
add
xchg
push
sahf
mov
and
mov
cwde
loopne
or
repz
inc
mov
dec
dec
in
daa
icebp
jg
lods
mov
movs
(bad)
jbe
pop
adc
add
add
mov
xor
out
lahf
lods
cmps
adc
daa
nop
loop
popa
add
jno
sub
cli
outs
xchg
jecxz
mov
xchg
mov
je
xor
movs
xchg
into
sub
push
jbe
or
push
(bad)
mov
pop
sbb
loope
js
cs
sub
jmp
outs
(bad)
push
call
jmp
dec
cmps
xchg
fdivr
push
mov
cmps
stc
mov
seto
into
movs
aaa
pop
cmp
cmps
out
fadd
pop
je
sub
ins
sar
add
fnstenv
xchg
mov
dec
sub
inc
sbb
jecxz
js
mov
inc
pushf
cmp
sub
jmp
fist
imul
xchg
mov
shl
popa
mov
or
adc
scas
mov
mov
add
loop
ret
retf
maxps
mov
sub
pop
je
add
enter
out
in
or
mov
jp
test
cmp
pop
and
jge
and
pusha
xlat
hlt
push
cmp
xchg
xor
inc
enter
ja
retf
dec
add
push
shr
push
push
jecxz
inc
(bad)
adc
cli
sti
xor
xchg
add
test
dec
pop
sbb
mov
(bad)
leave
mov
jb
jns
cld
adc
mov
xchg
icebp
and
daa
arpl
fwait
(bad)
jge
repnz
cdq
xor
cli
nop
repnz
cs
inc
lods
dec
(bad)
sbb
(bad)
jno
push
repnz
dec
int3
jns
push
mov
push
shr
repnz
add
test
loopne
adc
mov
pop
and
xor
addr16
ret
xor
dec
jmp
fldcw
lods
into
add
call
mov
inc
cmps
xor
push
pop
(bad)
mov
lea
pop
pop
mov
(bad)
leave
cmp
in
push
test
or
cmp
mov
mov
pop
add
sbb
out
dec
ficom
(bad)
jle
jmp
adc
mov
mov
jno
nop
shl
retf
shl
xor
popa
mov
imul
cmp
popa
aam
lahf
jns
mov
in
mov
sbb
adc
dec
push
push
ins
xlat
and
inc
popa
inc
and
xchg
push
popa
lds
push
daa
push
or
rcl
in
xchg
ja
add
imul
xor
add
jb
retf
outs
imul
ret
inc
ins
pop
call
stc
js
stos
dec
mov
sbb
(bad)
inc
call
into
(bad)
out
push
je
mov
cmp
jge
rol
iret
pop
pushf
xor
je
scas
mov
and
add
loopne
jge
test
and
cmp
xchg
inc
inc
inc
aad
adc
arpl
inc
sti
out
push
test
(bad)
in
inc
jnp
popa
in
sub
fisttp
stc
loope
cld
mov
call
lods
fmul
sub
cmp
out
push
mov
push
dec
test
lfs
jecxz
dec
ret
gs
mov
ja
xchg
ja
jnp
aas
stc
mov
enter
mov
push
rcr
and
aaa
es
sbb
jae
test
cwde
cmp
test
jns
jecxz
and
out
popa
retf
mov
repnz
test
mov
sub
scas
mov
gs
xchg
fild
movs
jmp
ss
sahf
adc
loope
cmps
jle
es
movs
ja
jns
bound
daa
mov
sub
idiv
and
repz
fbld
and
cdq
arpl
(bad)
jno
stc
lock
ja
jb
(bad)
fwait
ss
xchg
(bad)
inc
imul
je
(bad)
adc
je
push
sub
int
xlat
shr
jno
sbb
fsub
test
mov
jno
sbb
(bad)
cmps
push
nop
pop
(bad)
daa
push
stc
fwait
out
and
add
iret
jns
sbb
dec
(bad)
push
aaa
mov
je
(bad)
dec
cmps
leave
mov
sahf
test
mov
cwde
popf
cmp
ins
aad
je
lods
mov
jbe
sbb
popf
push
in
loop
sbb
dec
adc
retf
leave
fistp
mov
std
inc
and
cmp
stos
and
mov
test
mov
jo
mov
pop
retf
das
in
add
lahf
mov
cmp
mov
mov
xor
xchg
or
fcom
mov
repnz
push
ds
movs
shl
pop
frstor
cmp
mov
sbb
out
push
(bad)
jmp
fdiv
call
sbb
cmp
in
or
lock
shl
mov
add
rcl
ss
mov
std
repz
in
(bad)
ds
cmp
ror
sbb
cmps
xchg
xor
lods
outs
rol
ins
mov
xchg
pop
and
popf
pop
add
sub
lods
sub
and
sbb
pop
lock
xchg
ret
mov
xchg
xor
add
mov
(bad)
mov
rcr
lock
and
mov
loopne
mov
fdivr
ffreep
jecxz
popf
xor
xchg
pop
dec
imul
daa
sub
sub
idiv
fwait
sbb
rcl
cmp
dec
mov
lds
loopne
mov
pop
out
cmp
push
test
retf
sbb
ror
xchg
in
setnp
jne
cmp
push
loop
mov
data16
mov
mov
sub
dec
fbstp
out
(bad)
jo
aas
xlat
xor
add
jmp
paddd
xchg
sar
mov
dec
or
std
mov
cmps
mov
jae
lds
push
cmp
push
and
jmp
sub
repnz
popf
lahf
jmp
cmps
fs
mov
faddp
xor
mov
hlt
jl
ret
repz
xchg
into
std
mov
pop
out
test
lock
push
fwait
jae
imul
xchg
push
push
jns
cmp
sub
sti
cdq
push
mov
rcl
out
fisubr
lods
mov
out
inc
fs
inc
data16
mov
fist
addr16
xor
sbb
push
neg
mov
push
sbb
into
jns
sar
int3
stos
mov
xchg
push
jae
movs
adc
dec
mov
add
mov
adc
cmps
or
pop
lea
inc
seta
sbb
pop
fdiv
call
sbb
xor
sub
dec
cli
push
pop
xlat
(bad)
cmc
arpl
dec
sbb
lock
adc
mov
fisttp
ja
dec
and
fisubr
sti
add
jmp
inc
push
cmp
bound
jb
mov
inc
adc
sub
rol
out
bnd
pop
(bad)
jno
mov
inc
std
adc
sbb
or
add
out
retf
adc
shl
cmc
cmp
xor
movs
std
jge
fdivr
mov
jmp
outs
adc
pop
test
lods
and
and
mov
bnd
cs
cs
loope
stos
inc
loopne
jle
iret
mov
jle
test
jno
movs
out
xchg
push
retf
rcr
xchg
cmps
xchg
js
fmul
in
cld
push
mov
pop
push
sbb
mov
js
loop
pop
test
mov
mov
dec
xchg
je
jb
push
retf
adc
jnp
imul
push
dec
fs
in
mov
cdq
mov
(bad)
mov
pop
call
shl
mov
adc
dec
mov
fsubr
mov
daa
ror
adc
adc
mov
mov
cmps
mov
xchg
sbb
test
mov
cs
xchg
mov
sbb
imul
lahf
repz
inc
sar
popa
pusha
repz
or
lea
fldcw
xchg
add
jb
ret
ror
mov
xchg
jle
mov
cmovns
cmp
cdq
mov
(bad)
imul
cmp
loopne
fldcw
fld
mov
stos
jmp
imul
les
cdq
pop
imul
cmp
cmp
mov
mov
jns
mov
jno
das
sub
mov
xor
shl
rol
je
or
stc
fnsetpm(287
nop
(bad)
push
jno
pop
je
jnp
fld
dec
stos
mov
loop
inc
sbb
xor
push
push
cmp
push
mov
das
add
adc
lods
cli
daa
ret
hlt
inc
lods
jno
js
call
int
stos
call
clc
addr16
in
out
push
jns
out
adc
int
sbb
sub
iret
cmps
push
fst
mov
aam
inc
jns
lds
dec
sbb
mov
mov
fmul
lods
lods
and
lock
pop
push
mov
or
(bad)
mov
pushf
and
push
jg
xchg
and
mov
or
and
data16
bound
nop
or
push
daa
aaa
mov
and
mov
inc
fs
int3
pop
and
push
mov
jecxz
fwait
push
push
jb
ins
enter
retf
sub
in
fistp
pop
mov
stc
out
mov
cmp
popf
push
test
and
pushf
cs
imul
pop
bound
inc
pop
push
dec
enter
jl
popa
popf
xor
lea
jge
test
sbb
sbb
das
xor
fwait
jb
and
jno
push
lods
iret
mov
(bad)
scas
mov
int3
push
sub
ins
scas
movs
mov
and
lods
in
push
and
mov
jne
jge
mov
in
cld
pop
jp
out
into
mov
inc
out
mov
dec
outs
cmp
out
mov
add
push
or
pusha
cwde
or
mov
dec
aaa
enter
in
in
mov
pop
mov
test
aaa
in
jge
and
sbb
inc
xchg
in
and
add
test
fild
ror
int
mov
cmp
xor
cmp
sub
cmp
stc
fwait
mov
xchg
mov
mov
arpl
fstp
jno
lea
(bad)
and
adc
jg
jmp
cmp
jae
test
jmp
jno
mov
fwait
outs
call
push
mov
cli
sbb
and
pop
pop
cmps
adc
xor
or
push
mov
add
mov
or
cdq
shl
scas
bound
inc
mov
sbb
or
cmp
(bad)
push
cli
iret
out
mov
stos
fcom
cmp
mov
neg
(bad)
mov
fadd
addr16
push
mov
ja
mov
(bad)
mov
lods
mov
xrelease
dec
aad
je
xchg
mov
mov
js
jmp
jmp
mov
hlt
setae
push
sti
in
jmp
push
cld
mov
test
push
mov
cmc
les
in
dec
sub
sbb
or
sbb
or
or
aam
fcmove
mov
xchg
and
sar
gs
jle
mov
stc
xor
stc
pop
pop
mul
shl
inc
popa
nop
jnp
rol
loopne
mov
cmp
dec
nop
mov
pop
into
mov
popf
adc
fadd
dec
movs
sar
inc
xchg
out
scas
dec
inc
mov
mov
sbb
pop
inc
mov
fsubr
mov
jo
rol
rcl
sahf
leave
fsubr
mov
xor
jbe
test
sbb
sti
add
adc
adc
and
sbb
nop
cwde
and
ss
iret
cmp
js
pop
movs
test
push
out
cmp
pop
(bad)
jne
and
retf
add
inc
dec
add
sbb
mov
adc
in
and
call
xchg
and
cli
cmp
fmul
jnp
iret
mov
movs
shr
inc
pop
pop
enter
and
aas
jbe
cmp
cld
aad
cmp
xor
adc
sbb
cmp
mov
cmp
retf
xor
push
retf
frstor
cmps
jae
mov
mov
sub
addr16
pop
add
les
jbe
call
outs
repnz
setl
push
shl
inc
jg
xchg
xor
dec
call
imul
sub
adc
or
pop
fldl2e
jmp
push
test
cmp
int3
imul
gs
int3
inc
xor
sbb
jmp
js
jle
sbb
hlt
push
imul
mov
dec
pop
shl
iret
mov
or
dec
cs
xchg
retf
aam
(bad)
(bad)
xchg
push
add
das
test
stos
les
mov
cmp
test
push
sbb
mov
mov
pop
sbb
mov
repz
mov
cmp
popf
test
cmp
imul
mov
popf
sub
add
and
scas
cmp
pop
call
and
inc
int3
lea
test
mov
(bad)
mov
or
out
mov
shl
sbb
cmps
push
mov
jle
cdq
nop
test
loope
pop
dec
lea
mov
paddb
inc
or
jge
leave
push
jle
jl
popf
arpl
jmp
or
or
leave
dec
adc
push
shl
and
sbb
out
jmp
and
out
sub
sar
xchg
inc
mov
inc
daa
mov
mov
sbb
data16
stos
xor
(bad)
out
clc
bound
(bad)
rcr
adc
push
xor
sbb
add
or
lods
shr
mov
or
xor
ins
fcom
or
movs
mov
jbe
lea
push
pop
rcl
cmp
pop
scas
sub
repz
and
loopne
push
daa
mov
idiv
xor
out
cmp
mov
je
outs
adc
mov
je
inc
popf
mov
pusha
pop
add
stc
jbe
pop
jns
loop
into
nop
scas
ins
inc
iret
cs
xlat
xchg
outs
sar
xlat
xchg
xchg
xchg
call
movs
enter
mov
ins
jp
jmp
scas
movs
popf
ds
in
cmp
cmp
ins
fcomp
stos
cmp
mov
lahf
jb
adc
ficomp
or
mov
push
cmp
mov
aaa
xor
dec
push
or
cmps
jge
jmp
add
push
ror
das
fsubr
rcr
xor
popa
ret
push
adc
cwde
test
jno
push
cmp
inc
loopne
iret
pop
pop
dec
mov
ret
cli
jp
or
mov
mov
and
sar
xor
je
(bad)
sti
and
cs
and
mov
pop
push
jle
cdq
adc
mov
leave
mov
xchg
ins
xchg
cmps
push
mov
bound
in
test
xor
jae
aas
pmullw
jge
std
pop
(bad)
loop
push
rcr
pop
(bad)
mov
xor
xchg
repnz
cmp
cmp
call
push
mov
pop
out
xor
lods
outs
inc
xor
and
jg
and
xchg
cmp
pop
mov
jno
ror
rcr
scas
mov
ins
cmp
dec
aad
mov
xchg
icebp
retf
dec
fcomp
add
jne
add
lea
dec
cmp
sbb
inc
mov
gs
pop
or
in
das
add
cmc
jne
icebp
stos
mov
push
hlt
pop
adc
shl
push
jmp
sub
dec
stos
jle
xchg
pop
test
movs
ja
gs
ins
dec
movs
xchg
mov
jecxz
push
bound
lea
in
and
jge
jb
mov
(bad)
lods
jle
fwait
ret
xchg
xchg
rol
shl
mov
fld
out
clc
repnz
cmp
xor
and
jp
mov
inc
adc
ins
ja
sub
and
adc
out
inc
(bad)
ror
inc
std
sbb
add
int3
pop
into
pop
or
cmp
mov
mov
mov
pop
pop
in
es
dec
push
(bad)
jbe
fcom
retf
inc
nop
ret
gs
or
scas
shr
push
out
icebp
lods
out
(bad)
and
xchg
cli
lods
xor
hlt
xchg
pop
sub
mov
add
lds
test
add
jge
jg
push
xchg
adc
xor
lea
jge
stc
lds
std
retf
ins
jp
daa
push
cmp
(bad)
xchg
repnz
push
retf
sub
inc
jb
jb
mul
jle
call
lods
in
jmp
or
(bad)
clc
bound
jl
not
push
inc
fnstcw
stos
in
lahf
or
adc
jge
repz
adc
addr16
mov
mov
mov
in
mov
fdiv
jp
mov
xor
adc
fisubr
push
std
pop
jns
sbb
sbb
pushf
test
lods
cmp
mov
clc
loop
cdq
jns
pop
mov
push
xor
push
cmp
fdiv
lods
cmps
fst
movs
loop
cli
gs
mov
jmp
xor
push
hlt
mov
out
xor
aad
cmp
scas
cdq
es
loopne
test
adc
adc
dec
pop
gs
pop
mov
push
dec
icebp
pop
mov
or
mov
jp
fild
mov
cmp
push
pop
or
imul
cwde
add
pmovmskb
adc
stos
cs
add
push
test
jb
jmp
leave
xchg
xlat
scas
repnz
dec
push
xor
in
out
aam
push
dec
pop
sub
adc
mov
outs
pop
dec
push
dec
sub
shr
jmp
js
add
into
neg
pop
jbe
sbb
jne
dec
fsubr
in
mov
push
cmps
pop
cmp
(bad)
jmp
push
add
or
neg
inc
std
leave
mov
xchg
mov
dec
into
pop
sub
bound
jmp
mov
push
in
syscall
mov
jne
sub
clc
push
jnp
(bad)
sub
div
inc
mov
push
call
fmul
mov
jno
sbb
sahf
sbb
dec
mov
(bad)
fst
pop
jbe
outs
xchg
stc
aaa
or
repz
dec
adc
dec
mov
push
jp
repnz
call
jp
jnp
dec
mov
mov
xor
in
cmps
push
dec
inc
jbe
cmp
bound
leave
imul
add
push
xchg
mov
jge
arpl
fwait
inc
fucomp
xchg
or
call
dec
mov
add
out
inc
inc
cwde
push
push
dec
and
mov
or
movs
pop
cld
fisttp
cmc
and
jo
and
into
cdq
mov
cmc
clc
sbb
pop
pop
adc
pop
fstp
push
cmps
xchg
stos
xor
or
sahf
(bad)
mov
jae
inc
mov
(bad)
shl
idiv
fnstenv
in
mov
adc
xor
jo
push
adc
(bad)
cmp
push
xchg
push
retf
movs
int
aad
(bad)
pop
inc
gs
lods
int
pop
mov
jno
out
repnz
jns
mov
push
repnz
jp
inc
sub
popa
add
adc
xchg
loopne
add
lods
inc
arpl
sbb
cmc
xor
in
out
and
aad
push
loopne
scas
cwde
inc
jmp
dec
push
jge
loop
js
push
ret
shr
and
ins
repnz
stc
out
pop
sub
fwait
lods
int
sahf
fnstenv
pop
popa
outs
add
mov
rol
test
xor
push
test
popf
sub
(bad)
(bad)
jmp
pop
mov
xor
push
(bad)
mov
xchg
ja
lea
cmp
xchg
adc
mov
mov
or
call
iret
fcomp
in
inc
add
cwde
xchg
inc
cmc
dec
inc
sbb
pop
push
lahf
jge
xchg
or
cmp
xchg
jmp
sbb
cld
in
jo
mov
jnp
add
pop
in
dec
hlt
aas
jle
shl
sahf
test
mov
push
cmp
or
mov
stos
mov
sbb
sar
arpl
ret
adc
(bad)
fwait
sbb
xchg
aad
data16
sub
fimul
push
pop
pusha
in
sub
xor
cmp
xor
mov
mov
jmp
or
push
outs
jno
imul
ins
add
xor
sub
inc
out
xchg
sub
popa
xchg
inc
sub
and
lea
retf
pop
xchg
inc
pop
out
push
stc
cmp
jns
outs
or
jmp
repz
retf
fiadd
push
retf
out
imul
add
xchg
pop
pop
xor
and
add
not
xchg
xor
iret
push
xor
lock
pop
fwait
and
cmp
ss
out
loope
data16
outs
clc
icebp
xchg
imul
cmc
mov
ret
xchg
cmp
popf
or
cmp
xchg
sub
nop
add
fidivr
pop
mov
dec
xchg
inc
std
mov
pop
aad
inc
mov
xor
cmp
(bad)
inc
into
sub
sub
xor
push
ja
cmp
and
sahf
add
movs
or
sub
ror
adc
sbb
and
inc
jmp
jecxz
enter
sub
mov
ds
lods
inc
sbb
push
xchg
test
lods
in
inc
in
fstp
jmp
and
sbb
jecxz
sti
push
and
xchg
add
adc
(bad)
shr
stos
hlt
cmp
dec
addr16
outs
or
hlt
(bad)
sub
cmp
jle
and
dec
scas
xor
pop
fcomp
(bad)
mov
outs
dec
or
sub
cmp
lahf
fistp
push
push
xchg
(bad)
scas
in
enter
outs
out
inc
imul
xor
out
jns
sbb
aaa
aad
lock
retf
icebp
dec
inc
loop
icebp
mov
sub
fbstp
or
mov
and
std
push
jmp
cmc
mov
enter
xor
push
mov
fnstcw
jnp
xor
iret
daa
jns
mov
std
dec
js
leave
repnz
mov
int
neg
les
sub
xchg
xchg
and
hlt
adc
pmuludq
jg
leave
add
and
push
mov
dec
inc
xchg
adc
mov
adc
mov
mov
retf
jp
nop
jns
inc
scas
mov
dec
push
(bad)
fiadd
xlat
pop
jg
pop
leave
scas
jbe
mov
ffreep
rcr
or
sbb
ficom
add
cmc
add
das
int
retf
in
dec
cdq
sbb
inc
mov
ret
jnp
fcomi
inc
test
daa
add
rcl
jg
nop
dec
push
xchg
into
rol
dec
cmp
test
mul
(bad)
das
rol
mov
push
inc
pop
pop
movs
sub
ret
shl
rol
inc
bound
(bad)
sbb
jle
mov
cmps
movs
aaa
cmc
mov
stc
sar
in
and
(bad)
jno
ds
pop
enter
jb
ror
into
adc
mov
cmps
sub
mov
jg
into
jp
inc
dec
vmovaps
ds
xchg
ror
je
inc
mov
out
pop
and
xchg
mov
mov
scas
mov
(bad)
fwait
(bad)
jnp
retf
pop
rcr
shr
pushf
and
in
jbe
scas
retf
lds
mov
xchg
shr
sbb
inc
adc
xor
push
push
push
sbb
xchg
jne
push
call
mov
mov
push
jmp
stos
fmul
jae
imul
jae
push
(bad)
or
jns
std
ins
dec
mov
mov
cmp
lahf
retf
or
and
cmps
fdivr
in
xchg
pop
lods
std
and
mov
lea
pop
sub
dec
push
aad
cwde
icebp
mov
jbe
add
jae
mov
je
(bad)
xchg
std
dec
pop
mov
lock
mov
lea
lock
dec
mov
lock
mov
mov
dec
jp
or
cld
and
retf
jp
lahf
and
test
dec
imul
test
adc
inc
inc
es
data16
lods
arpl
mov
pop
loope
inc
cmps
mov
movs
cmp
cmps
mov
data16
mov
js
or
(bad)
lds
ret
shr
xchg
xor
cmp
sti
addr16
stos
mov
mov
inc
jle
out
mov
retf
pop
(bad)
mov
cdq
add
in
dec
stos
jmp
call
push
mov
leave
inc
outs
lea
in
ret
push
cli
mov
or
push
les
adc
mov
test
xor
jae
xchg
std
mov
pop
push
rol
xor
jne
add
in
add
iret
push
movq
and
ror
xor
push
xlat
pusha
sahf
jp
dec
fld
cmp
loopne
adc
cmp
inc
pop
pop
jge
mov
xor
inc
inc
hlt
inc
in
sbb
test
idiv
jl
sub
add
mov
sub
and
loopne
test
iret
stos
jle
scas
jb
push
push
xor
movs
test
or
sti
lods
pop
mov
fdiv
in
repnz
cdq
arpl
rol
dec
xchg
xchg
scas
push
xor
pop
dec
sub
popf
call
nop
(bad)
adc
dec
or
inc
push
jo
push
cmps
call
and
xor
add
aaa
stc
sub
loope
add
mov
and
das
(bad)
cmps
and
inc
mov
test
fnstcw
(bad)
dec
sub
inc
imul
mov
jno
(bad)
loopne
cmp
(bad)
leave
and
cmp
jo
sbb
jp
outs
sub
and
sub
(bad)
outs
or
xchg
or
inc
mov
cmp
(bad)
sub
sbb
fcom
jo
call
repz
fdiv
bound
adc
add
dec
fwait
mov
retf
push
mov
sub
xchg
xchg
xchg
fidiv
jmp
pop
or
pop
jp
jbe
xchg
jns
and
cs
addr16
imul
cmc
xchg
xchg
scas
jp
jle
mov
pop
in
adc
sub
aaa
xchg
cmp
xor
fs
mov
pop
outs
repz
jg
mov
(bad)
and
adc
stos
or
retf
mov
test
test
fcmovne
(bad)
sar
jb
test
ficom
je
xor
xchg
cmp
xor
movs
div
push
test
jecxz
adc
(bad)
dec
jge
pop
fdivrp
cmc
ret
mov
adc
and
jae
outs
inc
sbb
inc
retf
test
inc
mov
adc
cmp
scas
pop
(bad)
shl
repz
inc
xor
or
pusha
leave
mov
fs
inc
stos
popa
adc
and
test
repz
adc
retf
mov
sti
jge
pop
push
mov
xchg
lea
(bad)
adc
(bad)
jno
mov
fisubr
jne
add
fwait
inc
clc
jge
loopne
sub
mov
and
xor
and
push
sar
aam
and
mov
jnp
jp
(bad)
cmp
clc
rcl
shl
inc
cmc
jne
mov
and
gs
inc
cmps
sub
lea
pusha
loopne
imul
ja
loopne
test
push
cdq
stc
xchg
xchg
pusha
add
lahf
nop
or
pushf
ret
xor
cmp
jmp
nop
adc
hlt
add
jg
iret
jle
outs
imul
mov
push
loope
xchg
mov
mov
sbb
sbb
jl
jnp
xchg
test
mov
mov
or
movs
mov
and
fwait
inc
hlt
pop
cmp
mov
xchg
dec
stos
sti
add
jnp
sub
jmp
mov
sbb
stos
or
add
fcomip
daa
push
ror
adc
out
lods
jnp
and
repz
jl
cmp
jl
xchg
test
ins
outs
mov
mov
outs
cwde
(bad)
or
jae
mov
rcr
leave
mov
in
add
shr
stos
cwde
iret
int3
int
cmp
cmc
sbb
sub
fdiv
mov
not
je
adc
sbb
adc
adc
dec
and
cmp
icebp
ds
add
retf
cwde
xchg
push
repz
mov
push
jmp
imul
shl
mov
pop
int3
sbb
fnsave
movs
scas
mov
(bad)
dec
xlat
xchg
xor
ins
jne
mov
mov
je
cli
ror
mov
repz
popf
dec
int
movs
js
imul
inc
icebp
mov
mov
repnz
movs
test
cmps
call
xchg
js
lahf
cmc
mov
and
pop
retf
or
push
and
dec
xor
scas
mov
(bad)
adc
sub
xor
aam
test
mov
and
push
push
inc
mov
call
cmp
sub
dec
leave
nop
xchg
out
sbb
fidiv
and
jmp
adc
pop
fwait
sub
or
mov
add
mov
loop
jb
std
and
in
fsubr
call
jl
or
xlat
imul
lahf
or
push
std
repz
push
jmp
sahf
cwde
mov
clc
jae
fadd
jl
scas
jne
fst
loop
scas
mov
xchg
stos
or
test
push
inc
push
sub
movs
popf
loop
fimul
mov
imul
cmp
adc
fnstenv
mov
enter
ret
jns
imul
lods
out
pop
in
pusha
inc
lahf
(bad)
out
js
pop
xlat
in
mov
mov
ret
jo
dec
test
das
jp
scas
rcr
gs
jmp
out
test
dec
std
hlt
mov
mov
lods
pop
and
je
jo
xor
push
(bad)
frstor
xor
ins
test
adc
mov
retf
mov
loopne
stos
loop
in
fnstcw
pop
mov
popf
jp
aaa
lods
test
int
push
jecxz
ret
xor
pop
fwait
ins
adc
adc
and
adc
mov
or
stos
movs
add
fstp
aad
les
mov
int3
mov
pushf
out
test
test
cmp
(bad)
jp
push
jp
(bad)
or
clc
sbb
popf
pushf
es
lahf
mov
inc
gs
cmp
fwait
inc
push
sbb
mov
mov
inc
mov
jne
pop
lds
mov
stos
or
mov
sbb
mov
jle
shl
cmp
loope
lahf
push
or
xor
sbb
add
cmps
sbb
or
fidivr
clc
fiadd
mov
xor
cld
inc
xchg
fld
mov
mov
adc
adc
jns
mov
ja
fsubrp
scas
inc
repz
xor
mov
lahf
jmp
fdivp
add
ja
mov
dec
mov
test
bound
test
hlt
int
loope
push
push
mov
add
int
fsubr
bound
jb
lods
test
adc
sbb
xor
mov
mov
fsubr
push
mov
(bad)
movs
cmp
enter
arpl
fdiv
jecxz
(bad)
fucomi
(bad)
jp
ret
inc
pop
shl
out
fdivp
jno
jge
add
je
push
fadd
xor
sbb
jb
push
mov
mov
mov
js
rcl
cmc
pop
cmps
or
sub
cmp
bound
and
addr16
xchg
adc
test
adc
daa
cmp
lock
xor
and
mov
or
dec
sub
mov
fwait
dec
gs
loope
out
inc
mov
call
jl
add
mov
cmp
data16
pop
int
mov
mov
push
dec
mov
(bad)
test
movs
xchg
push
arpl
inc
sub
xor
loope
mov
push
popa
mov
push
mov
xor
loop
and
out
std
push
movs
xor
lds
jae
shl
xchg
out
and
repnz
in
ds
loope
arpl
jl
repnz
cmp
or
jnp
cwde
jg
jge
adc
add
jbe
mov
aad
(bad)
xor
cdq
jno
fidivr
inc
shr
mov
add
pop
pop
or
int3
arpl
xchg
into
adc
dec
mov
sbb
jl
xor
fwait
mov
pop
dec
jg
fwait
dec
iret
inc
pop
test
aad
aad
jg
clc
cdq
(bad)
mov
mov
jp
jmp
fcomp
ins
cli
outs
pop
lock
and
dec
adc
rcr
addr16
outs
dec
in
xor
dec
loop
jle
cmp
gs
adc
fs
jmp
jo
pop
jp
jns
ss
stos
and
xor
jae
add
jg
outs
adc
test
cmp
int
dec
in
addps
leave
popf
push
gs
test
inc
push
pusha
pop
nop
sub
add
xor
shl
adc
cmp
pop
mov
jge
ins
push
dec
cmps
outs
sub
and
in
mov
mov
mov
add
loope
jno
(bad)
jg
and
es
mov
test
shl
fs
xchg
ret
xchg
fstp
xchg
sbb
pop
js
xchg
inc
stc
sub
sti
in
mov
sbb
icebp
pop
inc
or
sbb
mov
cmp
aas
and
je
idiv
add
jbe
ror
cmp
out
aad
popf
or
dec
jns
mov
scas
jmp
mov
mov
jb
imul
jge
or
loope
sbb
pop
cmp
not
lods
ret
ret
xor
dec
inc
adc
sbb
xor
sbb
sub
sbb
lock
lock
xchg
cmp
and
push
inc
jno
in
test
in
xchg
cmp
sbb
stos
adc
push
movs
imul
pop
add
pop
push
jb
and
inc
stos
std
cmps
mov
repnz
dec
(bad)
pusha
jb
inc
inc
mov
pushf
xor
add
mov
sbb
jno
or
retf
mov
push
sub
xor
and
dec
sar
out
pop
icebp
cmp
stos
repnz
in
(bad)
(bad)
cld
movs
pop
pop
fs
fs
pop
inc
inc
lahf
retf
jp
lds
leave
stos
rol
ds
jb
inc
add
sub
mov
pop
pop
push
mov
mov
das
outs
jb
pop
ret
dec
adc
mov
inc
and
(bad)
ficomp
and
adc
mov
pushf
jge
cmp
xor
mov
cmp
je
mov
int
stos
ja
jg
std
scas
fs
inc
xchg
das
push
xor
jp
xchg
add
ins
xor
sti
mov
mov
mov
cmp
mov
rcl
(bad)
js
inc
pusha
jl
inc
sub
jb
jg
jmp
pushf
clc
(bad)
test
xor
adc
push
pop
inc
fs
mov
adc
loopne
lahf
sbb
and
fwait
test
mov
test
in
ror
popa
jo
fdiv
add
repnz
push
arpl
test
loope
cdq
arpl
inc
cmp
add
cmp
add
inc
dec
xchg
jp
mov
(bad)
xor
movs
and
add
test
pop
test
mov
test
iret
pop
ds
inc
add
push
lds
loop
mov
mov
fild
add
int3
fdiv
cli
mov
in
add
push
mov
inc
adc
and
cli
(bad)
outs
pop
push
mov
dec
dec
out
dec
nop
add
push
(bad)
sbb
mov
dec
scas
xchg
hlt
jbe
or
ror
dec
movs
scas
pop
mov
jns
jmp
or
lods
add
and
add
outs
jg
imul
sbb
fsub
and
jo
mov
and
scas
mov
pop
sbb
xlat
ja
adc
data16
xchg
pop
loope
movs
test
xor
psubusb
mov
xchg
jnp
sub
fld
std
pop
leave
push
mov
mov
pushf
mov
xchg
mov
adc
stc
mov
stos
mul
(bad)
mov
out
cmp
daa
ins
mov
in
fucomip
in
(bad)
xlat
dec
dec
cdq
sub
es
mov
jno
imul
lods
neg
nop
pop
les
cmp
jmp
iret
stos
in
call
xor
add
and
in
dec
loope
pushf
xlat
or
mov
aaa
xchg
sub
ins
(bad)
xor
jmp
push
mov
mov
mov
jge
ins
out
push
cmp
and
mov
das
sub
rol
retf
xchg
(bad)
or
xor
call
or
jg
xor
xchg
inc
lds
jo
clc
adc
mov
outs
ret
loopne
stc
add
test
inc
(bad)
push
inc
mov
jae
mov
push
mov
mov
or
cmp
xchg
mov
mov
pop
stc
mov
sbb
and
add
pusha
mov
das
sbb
(bad)
int3
adc
sti
jne
push
adc
test
dec
vpackssdw
loopne
es
jmp
xchg
sysret
jmp
retf
dec
in
imul
and
aaa
rcr
push
cmps
sti
jmp
dec
test
dec
jns
std
sbb
xlat
and
sub
aas
stos
hlt
jle
add
sub
cmp
or
test
ins
sbb
push
jnp
push
add
xor
mov
fistp
push
out
cmp
sub
sub
pop
(bad)
js
jae
mov
cs
push
movs
cmps
aad
xor
popf
cmp
inc
inc
or
aam
jns
fcomp
fadd
mov
adc
adc
add
jecxz
push
and
sbb
aaa
and
stc
dec
ins
xchg
loopne
mov
stos
stos
and
mov
les
sub
es
dec
outs
dec
movs
jmp
mov
or
dec
ins
mov
pop
inc
sub
and
and
jne
pop
shl
xor
(bad)
mov
and
pop
fwait
pop
nop
dec
cmps
ins
sub
rcl
push
inc
push
jmp
ds
adc
adc
(bad)
fcomp
je
pusha
or
nop
jmp
mov
test
outs
ror
jo
sub
lods
jge
imul
mov
(bad)
mov
fist
jns
add
adc
xlat
sbb
jmp
xor
in
int3
mov
test
fld
mov
inc
or
push
add
scas
push
pop
cmp
push
jo
or
(bad)
pop
xlat
xchg
xlat
mov
stc
and
lods
and
mov
fs
mov
mov
push
jecxz
lods
pushf
xchg
mov
loop
xchg
call
enter
jb
aas
test
cdq
ret
fld
jg
repnz
push
lds
xchg
cmp
inc
push
imul
retf
dec
cmp
jg
sbb
test
fisttp
jns
mov
jno
mov
cmp
call
repz
fdivr
push
xor
mov
in
and
cmc
rcl
push
popa
sbb
lea
js
jecxz
mov
adc
sar
or
push
outs
aas
cmp
in
loope
pop
shr
shl
pop
(bad)
mov
mov
imul
sbb
or
imul
out
sbb
int3
enter
(bad)
mov
mov
hlt
dec
aad
(bad)
stos
and
lods
ret
sub
aaa
inc
dec
jle
nop
jmp
cmp
xchg
mov
push
sbb
dec
cld
in
or
cmps
fbstp
test
in
sub
lods
mov
mov
lea
xor
and
rcr
push
shrd
lahf
jbe
jmp
jge
and
xchg
jo
test
add
shl
sbb
xchg
and
(bad)
fld
or
sub
in
ins
push
sub
inc
les
out
popf
out
cdq
fisub
lahf
ret
div
bnd
pop
js
inc
call
imul
mov
in
js
sahf
add
mov
jecxz
sar
xchg
sar
xor
mov
iret
adc
cdq
or
pushf
and
mov
adc
aad
add
dec
ds
sub
aad
scas
and
ret
push
add
dec
xchg
jne
iret
jmp
loop
hlt
inc
scas
pop
mov
xchg
(bad)
add
popa
pop
and
xchg
data16
jo
sti
mov
ins
adc
mov
lock
movs
dec
ret
ret
adc
cmp
inc
or
xlat
adc
rol
mov
mov
or
shl
stos
jl
jb
pop
pop
les
pop
sti
pop
aam
add
fwait
jb
pushf
or
inc
bswap
pop
dec
dec
jnp
rcr
sub
out
jmp
out
mov
(bad)
adc
push
push
inc
iret
and
lds
ss
cwde
movs
add
xchg
aam
jnp
ds
sbb
mov
adc
(bad)
in
adc
std
push
pusha
mov
pop
out
adc
cs
add
mov
repz
loopne
mov
push
pop
inc
fst
test
sbb
jge
test
stc
mov
retf
push
stos
xchg
xor
add
xor
inc
cwde
push
inc
adc
sbb
aam
push
lods
retf
data16
xor
adc
(bad)
(bad)
int3
ret
in
sbb
(bad)
enter
dec
icebp
push
or
mov
jl
mov
idiv
rcr
in
push
and
xor
aas
mov
xlat
adc
mov
add
pop
push
cmp
jmp
pop
add
loopne
adc
or
out
bound
mov
or
test
sub
(bad)
mov
sub
nop
add
and
retf
dec
push
dec
jno
push
adc
packssdw
(bad)
ja
and
mov
fcom
jno
scas
sbb
add
push
in
repz
jne
or
aam
div
retf
cmps
jo
imul
fisub
xchg
jbe
repz
push
inc
dec
iret
(bad)
cmp
ret
test
movs
mov
xor
out
sbb
out
xor
or
inc
pop
lods
sar
mov
nop
inc
popf
mov
jl
mov
out
jmp
push
imul
fdiv
std
and
(bad)
aad
cli
jmp
enter
jmp
cdq
das
js
movs
pop
jbe
cmp
imul
push
fistp
movs
arpl
cmp
(bad)
mov
or
call
out
sub
jmp
je
or
sbb
mov
dec
(bad)
arpl
pop
fwait
retf
scas
xchg
mov
jno
push
sub
arpl
jp
inc
mov
push
addr16
or
out
shl
sub
and
out
cmc
xor
mov
xchg
lahf
lea
ret
ins
jmp
into
adc
add
icebp
sbb
sub
or
arpl
xchg
repz
sbb
out
loop
(bad)
lock
cld
xchg
add
xchg
std
out
mov
mov
jl
call
pushf
fidiv
dec
adc
mov
mov
sti
movs
adc
mov
shl
xlat
aaa
and
mov
add
jmp
test
dec
adc
xor
retf
sbb
(bad)
xchg
cmp
mov
pushf
js
cld
pop
movs
inc
ret
xor
inc
mov
xchg
fisub
shr
mov
pop
mov
pop
pop
dec
inc
push
out
cmp
mov
jno
fsub
fsubr
push
cmps
scas
mov
stc
ss
jp
in
retf
mov
hlt
call
out
loopne
dec
mov
mov
(bad)
cmp
dec
xchg
out
xchg
jmp
pusha
mov
mov
sbb
addr16
pusha
and
call
cli
mov
sub
retf
cmc
lea
loopne
pop
(bad)
call
test
sub
cdq
xchg
pop
movs
std
sub
leave
fstp
fisttp
dec
int
add
mov
mov
out
jno
fldenv
nop
sti
xor
lahf
fcos
add
mov
push
cmp
arpl
pop
rcl
ja
sbb
mov
test
sub
test
inc
jle
adc
push
push
sbb
pushf
push
loopne
hlt
out
sahf
clc
test
inc
jle
lea
mov
mov
push
call
jnp
mov
js
fcmovu
icebp
xchg
jbe
test
sub
iret
mov
scas
lds
xchg
cdq
inc
inc
retf
xor
or
add
outs
pusha
retf
cmc
xor
xor
les
cmc
aad
mov
mov
out
rol
es
xor
pop
fisubr
ins
push
lea
into
inc
mov
pop
scas
xchg
clc
stos
mov
jge
mov
out
fisub
jcxz
add
fwait
mov
xchg
push
xor
jecxz
out
(bad)
fcom
mov
retf
cmp
les
mov
pop
xchg
jnp
dec
jo
les
scas
(bad)
xchg
retf
popf
idiv
(bad)
xchg
test
ficomp
stos
in
(bad)
ror
lock
retf
mov
lods
mov
sbb
in
mov
mov
(bad)
inc
int
sahf
xchg
adc
mov
xchg
pusha
jmp
jecxz
retf
pop
mov
mov
jns
push
sbb
mov
jns
xor
cmc
pushf
add
mov
cmc
dec
stos
loopne
popa
ret
adc
int3
popf
mov
sub
mov
out
add
jmp
adc
scas
add
adc
mov
test
call
cmp
(bad)
sahf
sbb
jae
sub
aad
out
mov
aaa
adc
xlat
(bad)
sbb
arpl
sar
inc
pop
dec
int
aas
push
mov
aas
pop
mov
jecxz
iret
fisttp
jle
inc
fisub
loopne
add
xor
fistp
lea
lods
cmp
push
xor
and
or
push
jecxz
(bad)
xchg
jecxz
test
push
call
push
sub
xchg
and
sqrtps
and
ds
cmp
(bad)
jno
std
repz
clc
inc
in
js
ror
and
bound
sbb
mov
mov
sbb
clc
pop
xor
loope
ret
(bad)
scas
sbb
add
xchg
dec
repnz
sahf
mov
lds
xchg
sub
imul
push
js
les
jne
xor
jecxz
mov
fild
or
pop
mov
lahf
int
and
jg
popa
fdiv
js
lds
push
fs
dec
outs
add
mov
fst
std
loop
inc
and
xor
mov
adc
faddp
mov
(bad)
sub
test
leave
das
in
pop
jb
or
sbb
mov
aas
inc
in
mov
js
test
repnz
or
xchg
xchg
pusha
mov
pusha
dec
iret
push
mov
nop
inc
es
leave
in
ficomp
add
aas
push
xchg
imul
sbb
jmp
js
scas
call
out
ret
shl
mov
mov
mov
xchg
fs
das
sahf
or
nop
and
imul
inc
dec
ds
(bad)
mov
outs
cmp
and
pusha
cmc
pop
push
and
ret
imul
xchg
in
arpl
cwde
push
arpl
fbld
pop
sahf
and
inc
or
into
push
jmp
xor
cmp
push
retf
push
jno
test
aad
sahf
or
pop
adc
jmp
xchg
ret
out
nop
push
out
xor
arpl
inc
aaa
retf
addr16
or
leave
aaa
and
daa
add
rcl
push
(bad)
shl
pop
or
adc
cs
jmp
aam
aad
jbe
sahf
ja
aam
aam
out
and
mov
fs
push
pop
arpl
or
push
sub
inc
mov
in
clc
xchg
gs
ss
(bad)
jmp
ret
loopne
and
outs
pop
jmp
jns
je
mov
adc
and
mov
sbb
sahf
pusha
push
sub
scas
jns
mov
jae
cld
js
sti
arpl
pop
sbb
sub
cwde
fs
xchg
pop
jnp
jae
jo
shl
and
jne
jno
bound
or
xchg
mov
out
xlat
in
xor
imul
dec
aas
mov
xchg
lahf
dec
movs
ret
adc
(bad)
lods
outs
stos
pop
lahf
mul
ja
sbb
fcomp
cmps
sub
cwde
add
mov
cmp
in
lock
and
mov
cmp
push
mul
jo
cmp
icebp
xor
aaa
(bad)
inc
stc
jmp
daa
imul
(bad)
aaa
mov
retf
bound
cmp
rol
das
xsaves
and
push
mov
imul
adc
add
pop
sahf
lods
pop
xchg
mov
jb
sub
mov
dec
in
pop
or
(bad)
cmps
mov
mov
js
xor
xor
push
mov
(bad)
xchg
int3
push
push
add
pop
add
call
ja
scas
pop
push
and
jns
sbb
inc
mov
arpl
jae
inc
pushf
aaa
movs
hlt
and
jbe
fmul
push
push
or
pop
movs
aas
jg
imul
cdq
mov
scas
sub
pop
enter
pop
sub
push
lock
sub
popf
std
out
into
aas
and
add
push
cmps
dec
fld
adc
mov
pop
adc
fs
and
pop
lods
mov
push
clc
test
ret
mov
mov
popf
xor
icebp
xor
jb
repz
retf
out
fstp
aad
push
xor
clc
out
lods
ins
dec
(bad)
leave
mov
stos
sbb
div
lods
inc
xor
and
xor
push
hlt
stos
dec
mov
jnp
test
adc
add
fisttp
cdq
cld
sbb
or
mov
sbb
jmp
fist
pop
sub
cmps
popf
mov
lods
mov
inc
cmp
adc
aas
xchg
test
xor
xor
sbb
cmp
mov
movs
dec
stos
mov
inc
and
test
jbe
xchg
adc
pop
loopne
or
cmps
frstor
cmp
fild
pop
xor
iret
cmps
jg
imul
jb
xor
inc
pop
pop
(bad)
xor
xchg
add
pop
rcl
inc
xchg
fisubr
(bad)
push
add
and
gs
fisubr
dec
inc
movs
mov
dec
mov
bound
mov
push
and
pop
into
mov
pop
popa
xchg
cwde
rol
cmp
fdivr
and
pop
int
mov
in
xor
pop
dec
js
fstp
xor
push
dec
jge
xor
scas
stos
cmps
cmp
out
sub
in
pop
cmp
mov
cmp
pusha
outs
(bad)
imul
jns
xlat
xor
imul
push
sub
inc
cs
test
adc
pushf
lods
dec
into
xchg
fwait
int3
mov
xchg
mov
mov
pushf
ror
xor
aam
fs
imul
fadd
stos
popf
sub
mov
in
push
aaa
pop
rol
lds
dec
xor
fcom
add
xchg
into
arpl
sub
icebp
repz
das
aaa
(bad)
jmp
pop
mov
popa
(bad)
pusha
sub
daa
mov
ret
fmul
out
imul
ds
jg
repnz
mov
sbb
pop
adc
sbb
and
pop
repnz
(bad)
int
jg
pushf
imul
xor
sub
sahf
inc
pop
je
and
cwde
stc
lahf
mov
cli
xchg
test
adc
sub
fld
in
xor
aaa
jp
push
adc
retf
push
cmp
adc
or
mov
data16
push
jae
je
pop
rcr
mov
sbb
mov
ret
cmp
out
dec
pop
sbb
add
inc
push
push
lock
xchg
ins
push
dec
mov
xor
pop
loop
jg
cwde
ficomp
xchg
(bad)
mov
push
pop
sbb
jge
ret
loope
cwde
pop
pop
cmps
(bad)
sbb
xchg
loop
cmc
pop
sub
in
pushf
mov
sub
adc
dec
aad
pop
in
stos
pop
or
mov
or
dec
hlt
(bad)
scas
popf
cld
jecxz
fist
mov
std
mov
test
mov
les
adc
cmps
push
in
xchg
fisttp
jp
mov
cld
stc
sub
cmp
push
jmp
popa
bswap
fild
(bad)
mov
fwait
push
pop
cmps
inc
stos
and
out
pop
cmp
jne
mov
(bad)
push
movs
push
mov
aaa
mov
adc
fisubr
jmp
fdivr
ror
es
jmp
aam
pop
repnz
lahf
and
rol
and
push
push
cwde
call
loope
add
jnp
fs
adc
icebp
inc
pop
cmp
or
sub
xor
xchg
inc
das
push
or
xlat
and
popf
pop
in
cmp
out
std
sbb
xchg
jecxz
mov
adc
adc
cmp
xchg
cmp
dec
mov
sub
movs
leave
pop
cmps
(bad)
jnp
test
xchg
add
in
popa
test
sbb
cmp
add
xlat
cs
ror
sub
mov
stc
xor
cwde
test
mov
dec
mov
cmps
dec
push
xlat
imul
ins
xchg
pop
mov
pop
mov
retf
stc
sar
outs
sub
fnstcw
cmp
jl
iret
jmp
cdq
lds
jmp
loopne
jecxz
add
xchg
int
loopne
fxch
dec
push
jo
movs
lods
mov
pop
call
outs
scas
(bad)
jns
popf
int3
shl
push
addr16
out
sti
push
cs
cmps
jmp
ss
push
sbb
sub
sub
cld
push
dec
aaa
sbb
(bad)
(bad)
(bad)
jle
ret
mov
xor
mov
or
sti
outs
pop
call
arpl
ror
mov
sti
dec
adc
mov
mov
leave
sub
std
adc
push
call
cmc
stc
ret
xchg
dec
dec
inc
or
add
movs
jnp
ret
cld
sbb
adc
lds
add
adc
das
jl
dec
xor
and
and
scas
or
ja
inc
pop
mov
cmps
and
jmp
push
xor
sub
sbb
xchg
push
mov
scas
cmp
jo
rol
add
and
shl
sub
xor
jno
add
push
xchg
out
add
push
mov
fiadd
test
inc
dec
mov
fs
repz
repz
add
mov
push
xor
sbb
sahf
sub
cmp
sub
dec
test
iret
fild
cwde
pop
xchg
push
mov
into
add
pop
mov
mov
adc
sub
pop
mov
xor
jge
clc
arpl
dec
test
fst
jb
and
inc
pop
jmp
adc
stc
leave
scas
add
mov
adc
push
inc
ret
stos
outs
or
push
adc
jbe
sub
fsubr
mov
jg
(bad)
push
jp
out
cli
lahf
add
jo
dec
movs
nop
div
mov
add
pop
pop
push
mov
aas
lods
scas
out
out
mov
cli
jmp
retf
jns
cmp
jg
cmp
jb
enter
js
cmp
imul
cmps
fidivr
sbb
mov
cmp
(bad)
jmp
jp
addr16
shl
dec
push
loop
mov
mov
out
fdivr
imul
xchg
dec
mov
sbb
mov
cli
ss
out
jbe
sub
test
pop
pushf
imul
push
sub
sbb
pop
mov
aad
dec
sar
adc
pop
and
test
xchg
outs
mov
les
xor
sub
sub
xor
cs
leave
adc
out
iret
xor
dec
push
pop
push
fidivr
cmp
jg
dec
stos
shl
(bad)
mov
les
pop
into
imul
jmp
mov
cld
lods
(bad)
aam
ins
sub
test
pop
add
mov
sbb
loop
jl
cmps
in
cdq
xchg
adc
arpl
cmp
fdivrp
sbb
daa
rol
sub
jno
and
push
adc
mov
stc
jno
mov
inc
out
dec
idiv
aas
sar
sbb
mov
push
mov
xor
sar
popf
jmp
dec
push
inc
and
mov
xchg
mov
je
mov
adc
jl
push
shr
retf
mov
and
aaa
add
mov
lds
js
aam
movs
or
cmps
popf
ror
dec
dec
mov
cmps
sbb
aam
test
stc
stos
adc
cmp
in
push
xchg
mov
xchg
fcomp
stos
sub
jmp
xor
arpl
loop
sub
push
mov
cmp
mov
ja
xchg
sub
pop
nop
mov
mov
jmp
mov
pop
mov
jg
cld
add
or
inc
dec
hlt
stos
pusha
sub
xor
push
pop
jmp
daa
shl
sub
retf
ds
push
mov
aad
outs
mov
mov
mov
add
adc
lods
adc
add
out
ja
cli
shl
add
mov
in
push
xor
ret
(bad)
fs
cld
fisub
int3
in
out
cmp
mov
cld
mov
jae
stos
lods
(bad)
loopne
je
cmp
cmp
or
int3
movs
addr16
push
inc
or
test
and
(bad)
mov
fwait
retf
dec
ds
inc
gs
fcom
mov
xor
call
sti
or
ret
sbb
mov
add
push
sub
mov
icebp
fcom
push
xchg
stc
ret
fild
sub
pushf
test
xchg
and
fadd
jle
enter
adc
push
daa
das
push
pop
mov
ins
add
pushf
mov
mov
adc
movs
mov
sbb
xor
out
pusha
sub
mov
rol
ins
push
lds
ficom
xchg
sbb
dec
cmpxchg8b
ins
add
pop
mov
fld
cld
xor
or
adc
shl
jmp
leave
retf
or
loop
in
cmp
fidiv
and
es
xor
cwde
pop
shr
stos
add
dec
in
dec
mov
es
lods
mov
push
in
push
aas
or
xor
cdq
test
std
idiv
jmp
and
sub
jge
sub
ret
jns
jmp
jno
ins
push
jmp
fs
sbb
shl
or
stos
fcomp
(bad)
dec
and
and
les
xchg
pop
jne
jb
mov
pop
sbb
and
push
shl
(bad)
sbb
add
push
xor
or
sbb
and
sub
pop
mov
dec
push
ss
jo
ins
fisubr
jbe
adc
jl
sbb
or
stc
pop
mov
icebp
dec
fdiv
xor
adc
stos
das
xor
lods
mov
loopne
mov
adc
lods
in
sub
mov
repnz
cmc
aaa
loop
push
int
xlat
sbb
sub
ret
push
addr16
or
mov
arpl
mov
xor
or
push
jecxz
push
(bad)
stc
div
mov
xor
into
mov
cmp
jg
aaa
pop
cmc
and
pop
cmp
in
mov
pusha
retf
movs
xor
push
jne
sub
sbb
cmps
add
imul
jnp
push
cmps
xchg
fisub
mov
xor
add
xchg
jecxz
in
pop
and
mov
cmp
in
or
lds
js
adc
adc
shl
xchg
mov
sbb
dec
stc
popf
loopne
popa
fldcw
leave
or
cmp
test
mov
and
xor
mov
inc
fwait
mov
fwait
stc
cdq
mov
xchg
pop
div
dec
nop
mov
imul
pop
data16
std
pop
mov
ret
cmp
pop
fnstcw
push
es
sbb
or
or
dec
leave
nop
loope
pusha
jnp
push
mov
jae
int3
loope
popa
adc
jbe
clc
add
and
cmc
pop
stc
xchg
xor
cmpps
mov
mov
aaa
sbb
cs
popf
scas
and
(bad)
pop
xchg
push
imul
inc
push
mov
ret
clc
lea
pop
pop
sbb
pop
dec
xchg
(bad)
div
int
icebp
in
rol
add
adc
cmp
mov
out
add
xchg
add
xchg
push
jns
cs
jns
fiadd
mov
and
repz
adc
xor
inc
daa
dec
in
sub
pop
xchg
jp
lahf
or
aaa
imul
mov
and
inc
sbb
gs
(bad)
int
hlt
pop
lods
sub
ja
call
mov
push
xchg
in
retf
imul
push
and
and
pusha
cmp
sub
popa
mov
lahf
scas
(bad)
jg
(bad)
dec
xor
cmp
les
fnstcw
stos
lldt
mov
mov
pop
mov
outs
mov
cld
iret
cmp
adc
clc
fiadd
mov
sti
movs
popa
push
dec
push
icebp
fbld
push
or
mov
jmp
out
ins
add
inc
jp
jbe
mov
push
jmp
xchg
jp
jns
pop
std
iret
daa
pop
xor
sbb
adc
retf
ja
inc
int3
push
aam
jle
inc
and
inc
aam
fs
and
cwde
cmp
or
adc
or
pop
inc
mov
ins
stc
js
call
jae
sub
int
dec
sti
cmps
push
out
nop
int
nop
sub
mov
pop
cmp
xor
ror
movs
ss
fnstsw
add
jns
mov
or
push
xor
pop
mov
(bad)
call
inc
call
or
jmp
(bad)
and
test
jne
xchg
cmp
add
mov
jbe
gs
mov
movs
sub
(bad)
icebp
push
or
xlat
xchg
mov
rdmsr
mov
xor
retf
add
mov
scas
jmp
push
dec
or
ins
sbb
add
das
cwde
pop
or
lods
out
in
pcmpeqd
popf
cmp
push
iret
mul
bound
mov
pop
stos
movs
push
(bad)
xor
(bad)
and
xlat
xchg
jge
enter
jmp
cmp
jmp
xchg
into
cmps
xchg
popa
test
sub
push
pop
pop
inc
sbb
mov
dec
in
mov
je
int
fwait
adc
push
(bad)
(bad)
lods
je
std
and
pop
mov
adc
mov
jecxz
or
sub
mov
call
sbb
pop
(bad)
int
jecxz
sahf
jmp
shl
jno
push
adc
jae
fsubr
inc
fdivr
and
jl
mov
or
xor
out
lea
aad
loope
xlat
arpl
dec
inc
fisubr
les
xor
inc
xchg
push
rcr
mov
into
fdivr
push
mov
test
mov
push
repz
fnstenv
fisubr
shr
pop
or
sub
cmp
xor
cs
sahf
sti
(bad)
fsubrp
in
repz
lock
mov
icebp
add
inc
mov
aas
stos
fnsave
jl
mov
push
cmps
in
sti
jge
fstp
adc
lock
mov
repnz
pop
arpl
clc
adc
dec
mov
shl
xchg
xor
clc
nop
pop
rcl
adc
jbe
into
leave
cmp
add
lock
mov
clc
cmp
push
mov
jl
push
sbb
cmp
nop
mov
xor
call
push
hlt
jg
lods
fldcw
ftst
out
xor
cmp
xchg
fadd
mov
and
add
fcomp
ret
sub
pop
mov
xor
jns
xchg
sti
mov
pop
call
outs
retf
xlat
dec
(bad)
sbb
mov
(bad)
ds
fucomip
pusha
pop
mov
jbe
adc
jae
jge
dec
mov
test
add
mov
xchg
fidivr
in
and
adc
cmc
xchg
mov
imul
pop
push
and
scas
aas
sub
inc
je
cmp
adc
xchg
sbb
outs
mov
fadd
mov
cli
sub
adc
(bad)
jl
mov
jno
or
das
cld
shl
and
fwait
loopne
aad
push
pop
mov
std
xlat
push
cld
jle
je
mov
fcomp
cwde
jmp
dec
mov
call
std
jp
adc
ds
cmp
mov
and
fldcw
js
xor
push
pusha
push
fist
adc
mov
or
in
sub
leave
dec
retf
js
sar
xchg
fcomp
jecxz
ror
pop
fwait
mul
retf
loop
sub
lods
add
lock
ss
inc
xchg
pop
test
jo
pusha
pop
aad
push
mov
add
xchg
or
mov
not
inc
xchg
mov
mov
sbb
push
pop
stos
nop
cmp
and
sub
out
repnz
aad
jmp
mov
(bad)
rol
sub
(bad)
out
scas
and
mov
push
mov
jne
in
hlt
pusha
xor
lahf
cmc
sbb
xor
test
push
pop
sbb
adc
mov
push
push
aam
inc
sbb
das
jns
jecxz
sbb
sub
test
adc
xor
adc
jb
bnd
inc
clc
sub
dec
test
sub
cmp
and
lods
xlat
addr16
in
es
jno
addr16
xor
dec
xchg
out
cdq
xchg
adc
push
xor
movs
pop
addr16
adc
push
sbb
lods
stos
(bad)
xor
xor
(bad)
loope
sar
lds
pop
in
or
push
mov
xor
jmp
stos
movs
mov
or
push
add
call
out
sbb
xchg
out
in
sbb
and
cld
add
sahf
cdq
xor
(bad)
lds
mov
es
dec
jg
xchg
ss
ret
fsub
jne
lea
cdq
dec
in
imul
ret
xchg
scas
jo
jbe
movs
mov
ss
ss
idiv
ds
fxch
add
push
push
xchg
in
fadd
and
add
add
in
pop
shr
mov
inc
outs
in
mov
sub
pop
jo
and
ret
es
stos
pop
cmp
xor
cmp
jb
mov
and
imul
mov
ja
dec
hlt
mov
push
mov
adc
leave
iret
data16
sbb
inc
mov
leave
in
mov
fdiv
push
out
fild
mov
push
jne
fs
out
cmps
cmc
pop
xor
jns
pop
das
dec
and
es
xor
inc
nop
loopne
dec
push
pop
sar
fisub
inc
bound
icebp
int3
cld
cmp
cld
adc
xchg
mov
ret
call
xchg
pop
mov
mov
and
dec
nop
mov
xor
les
mov
loopne
pop
imul
jecxz
mov
mov
ja
(bad)
dec
sub
add
mov
ret
sbb
ror
inc
mov
cdq
std
ficomp
and
mov
lock
lds
add
lea
or
pushf
pushf
ret
push
ret
in
mov
add
pop
fst
pop
jg
and
sub
pop
(bad)
push
xchg
in
or
repz
add
and
jb
mov
add
xchg
push
mov
add
popa
push
outs
dec
sub
mov
js
mov
(bad)
push
das
sbb
aad
jg
fbld
adc
lods
cmp
pusha
aad
mov
jl
stc
sub
imul
add
ret
movs
jp
(bad)
mov
or
dec
inc
jmp
arpl
cmp
push
or
ret
sbb
std
sar
test
jecxz
out
pushf
ret
out
mov
cwde
jle
rcr
pop
sbb
arpl
sub
sub
out
xchg
dec
stos
xchg
imul
fdiv
sub
mov
cli
int3
dec
jg
gs
sbb
or
mov
jmp
data16
cli
jbe
sbb
sahf
push
stos
jl
jo
hlt
inc
xor
stos
out
loope
and
int3
adc
inc
jge
push
scas
icebp
and
aam
or
test
adc
inc
jno
bnd
in
sbb
mov
dec
pusha
outs
fldenv
add
lea
mov
or
push
out
bound
loopne
xor
call
std
mov
out
outs
dec
inc
mov
cmp
out
pop
xchg
mov
ret
mov
or
xor
imul
mov
pop
pop
fnstcw
pop
jge
xor
cmp
scas
stc
in
cli
test
push
mov
pop
es
sub
and
mov
push
dec
xchg
loope
repz
dec
ss
and
(bad)
fcom
adc
and
or
mov
adc
ja
pop
out
mov
(bad)
jns
lods
push
cmps
pop
cmp
jmp
pop
shl
pop
jl
mov
test
pop
ins
jns
fmul
aas
ja
fistp
lea
cwde
lods
movs
or
add
mov
cdq
in
and
lods
out
rcr
mov
shl
mov
das
xchg
jns
mov
or
cmp
xchg
sbb
mov
adc
jge
ins
cmp
(bad)
ficomp
push
dec
xchg
dec
aam
xchg
mov
mov
fimul
mov
xchg
fs
or
loopne
fdivr
mov
add
xchg
sbb
scas
or
aam
scas
push
(bad)
xlat
enter
ins
loop
(bad)
imul
adc
clc
sub
ds
bound
retf
test
xchg
imul
xchg
and
xchg
shr
in
or
call
dec
loope
inc
fnstcw
adc
sub
mov
clc
push
push
add
mov
dec
sbb
jmp
inc
je
lods
pop
cli
jb
inc
stos
xlat
pop
shr
movs
fwait
gs
lds
int3
inc
ror
in
sbb
arpl
loopne
dec
retf
fnstenv
sahf
rcl
outs
mov
fnsave
mov
outs
inc
loope
mov
xor
mov
hlt
jl
xor
sbb
sbb
fiadd
push
dec
fbstp
inc
adc
and
es
pop
sub
mov
cmp
jno
enter
test
mov
call
and
cdq
xor
jl
gs
push
xchg
rcr
sub
cmp
(bad)
scas
movntps
dec
xor
movs
pusha
mov
adc
fs
and
push
inc
push
push
xor
mov
add
mov
ret
(bad)
fsubr
je
fdivr
lds
mov
in
mov
mov
clc
push
mov
jmp
loope
imul
sti
pop
and
and
out
push
int3
stos
jecxz
xor
paddsb
fwait
inc
loope
adc
cmc
xlat
cmp
mov
fwait
test
jbe
out
mov
inc
inc
fs
sub
jo
aad
int3
gs
pop
sbb
mov
mov
shr
fs
shl
sar
int3
popa
cli
push
xor
mov
(bad)
mov
(bad)
push
xchg
leave
jg
add
sbb
mov
fnstsw
xchg
scas
mov
or
inc
mov
add
mov
dec
mov
jmp
mov
(bad)
retf
mov
into
jae
lods
sbb
inc
dec
lea
mov
sub
lods
scas
aam
lahf
mov
ds
bound
(bad)
hlt
mov
jo
mov
dec
popf
dec
xor
(bad)
cmp
pop
adc
inc
jae
imul
retf
push
arpl
sbb
mov
push
leave
jne
clc
retf
mov
es
sub
stc
pop
(bad)
lock
pop
nop
sahf
sub
sbb
std
outs
xchg
sub
xor
fcomip
xor
adc
inc
xor
setno
repnz
sub
push
or
out
rcl
mov
cmp
jne
xchg
inc
stos
repz
pop
jns
outs
adc
rcl
cmc
mov
dec
cmp
jecxz
xor
mov
push
sub
cmps
pop
mov
mov
(bad)
lods
(bad)
out
jb
out
or
sub
sub
xor
inc
xor
inc
sub
and
scas
push
in
mov
(bad)
sbb
loopne
or
scas
or
outs
or
adc
es
mov
adc
mov
pop
pop
test
mov
(bad)
sub
jg
imul
fnstcw
cmp
sub
(bad)
cld
jmp
retf
and
arpl
mov
pop
jg
mov
inc
inc
sbb
push
(bad)
mul
mov
jge
aaa
scas
pop
sti
pusha
dec
and
mov
jae
scas
mov
adc
ds
adc
pop
rcr
mov
mov
pop
cld
adc
vphaddwd
loop
test
sbb
mov
not
cli
movs
int3
adc
jge
and
pop
jns
sahf
mov
xor
mov
shr
scas
jnp
popa
inc
js
add
push
stos
loop
je
cld
leave
and
mov
cdq
xor
push
add
jne
jno
out
xor
inc
add
fs
add
mov
and
cli
add
xor
adc
jmp
data16
movs
push
jb
sub
mov
jno
fisub
adc
ret
sub
pop
sbb
fwait
pop
loopne
int
pop
jae
stc
xchg
pop
push
test
imul
pop
cmp
mov
and
mov
daa
mov
add
xor
cld
jl
rcr
cmp
xchg
push
and
mov
jecxz
test
int3
dec
pushf
pusha
retf
loop
aam
sbb
inc
mov
rol
xor
push
jmp
jbe
jp
dec
ins
sti
sub
sbb
or
movs
ins
loop
sbb
inc
pop
aad
test
rcl
mov
adc
out
aas
cmp
mov
adc
leave
jg
pop
inc
dec
and
movs
cmps
ss
adc
out
repz
and
ds
mov
pop
dec
cwde
fldcw
jl
les
cmp
movs
mov
dec
or
bound
(bad)
push
fadd
xor
adc
push
inc
ds
mov
rcl
push
cs
sbb
aaa
xchg
jo
add
or
popf
jns
fcmovnb
fild
xlat
cdq
arpl
mov
inc
inc
mov
lock
cmc
lahf
sbb
aam
lods
pop
mov
mov
mov
ffree
lock
ins
push
push
jle
rcr
int
jge
add
mov
pushf
xchg
jns
jmp
add
lock
lahf
pusha
inc
push
cmp
push
idiv
jge
or
call
les
lock
fnstenv
cmp
jae
sbb
in
int3
mov
xchg
adc
ins
pusha
adc
xor
jecxz
iret
push
enter
loopne
jns
or
sub
jnp
mov
dec
cdq
imul
ss
rcl
inc
add
call
cs
mov
mov
popa
ret
lods
jmp
pop
inc
arpl
lods
pop
iret
jmp
mov
cdq
stos
lea
cmp
sbb
mov
sub
popf
ret
inc
dec
cmp
jo
movs
(bad)
fadd
jne
push
or
faddp
jb
std
jno
imul
fldenv
sar
dec
add
int
pusha
sub
add
popf
xlat
mov
and
jo
jno
movs
ins
aad
bound
and
clc
pushf
push
mov
xchg
xchg
rep
sbb
pop
es
(bad)
push
hlt
adc
mov
lea
or
or
jecxz
test
sub
inc
ret
sbb
inc
leave
repnz
adc
out
sbb
icebp
cmp
push
push
mov
jle
xchg
mov
jge
cmc
mov
out
imul
dec
add
cmp
mov
(bad)
mov
inc
adc
hlt
unpcklps
cmp
cmps
mov
mov
adc
add
mov
xor
cmp
fwait
push
and
daa
mov
xchg
sub
add
xchg
pop
dec
fstp
test
cmp
outs
mov
aam
push
and
mov
aam
inc
jno
out
cmp
mov
das
xor
or
push
xor
and
jge
ins
nop
xor
shr
test
push
push
les
int3
dec
push
stos
scas
imul
fldl2t
call
pushf
mov
js
imul
call
push
xchg
fsub
lds
sub
ret
loop
out
movs
pop
test
mov
sub
jnp
add
rcl
pop
cmp
jo
mov
jb
imul
xor
mov
fs
push
fisub
retf
jb
cmp
add
call
xchg
mov
jl
cmps
and
pop
out
ss
jge
in
js
push
push
(bad)
(bad)
and
imul
lds
das
xor
aas
cmp
cmp
pop
mov
ret
cmps
cli
inc
push
daa
mov
test
sub
sub
jae
cdq
retf
addr16
or
jbe
inc
pop
loope
out
mov
jnp
sub
dec
es
lea
pop
fadd
fidiv
ficom
inc
xor
lds
cmps
imul
lods
js
mov
sub
aaa
stos
pop
addr16
lods
jg
nop
inc
add
cmp
xor
(bad)
sub
inc
stos
or
jmp
add
push
push
push
and
cmp
sbb
pop
or
test
inc
mov
pop
int
add
xchg
cmp
mov
leave
sar
outs
gs
test
pop
das
lahf
(bad)
cmp
inc
sti
xor
ret
mov
addr16
push
mov
loop
add
das
add
pop
and
ret
sbb
dec
sbb
psubusw
push
mov
xor
fist
xor
sbb
into
int3
push
out
adc
dec
adc
fwait
mov
cmc
pop
push
mov
and
inc
mov
fisubr
xchg
mov
inc
cwde
mov
mov
mov
pop
fldenv
mov
aam
xchg
(bad)
rcr
aaa
add
dec
xchg
enter
aam
test
frstor
mov
clc
inc
cmp
xchg
inc
ja
fs
call
xchg
push
test
rcr
jl
stc
pop
xor
(bad)
loope
imul
ins
sub
jg
aad
sbb
pop
jmp
test
mov
std
fld
mov
xchg
jns
push
mov
mov
idiv
imul
jbe
pop
pop
in
add
ds
pop
xchg
jge
xchg
adc
pop
inc
jg
sub
shr
das
cmp
mov
pop
push
out
xchg
sbb
int3
movs
aam
rcr
js
jbe
adc
xchg
in
xor
dec
xor
jl
push
jae
loope
xor
lock
das
leave
aad
cmc
lahf
adc
pop
(bad)
aam
mov
lods
add
loop
adc
mov
push
xchg
mov
scas
(bad)
mov
jae
push
std
xchg
int
inc
cdq
ds
cmp
inc
ret
mov
js
pusha
mov
test
or
arpl
cmp
and
sti
mov
adc
sti
ss
in
push
data16
mov
hlt
fs
stos
cmp
or
jg
and
pop
shl
and
cmp
sbb
icebp
loop
mov
xor
xchg
ds
or
mov
sub
add
ja
xchg
cdq
mov
mov
cdq
sbb
ja
cli
sbb
aas
lods
jmp
dec
mov
cmp
jb
imul
retf
ret
xchg
iret
stos
mov
sub
rcr
ficom
jmp
(bad)
jmp
idiv
(bad)
pusha
mov
movs
sub
and
mov
add
sub
es
(bad)
ds
jl
cmps
mov
stos
fnstsw
jne
or
addr16
mov
sbb
cmc
ret
sub
or
push
xor
(bad)
mov
in
push
sub
dec
in
pop
scas
cs
xchg
test
sub
scas
outs
mov
adc
pop
popf
cld
and
push
fsub
lds
js
mov
mov
imul
fist
and
mov
arpl
add
and
cli
add
aam
mov
jl
xor
lock
ret
sbb
scas
xchg
xor
clc
cmp
inc
mov
adc
cmc
or
(bad)
shl
mov
rol
push
lea
scas
mov
sbb
hlt
repnz
push
frstor
cmps
jns
adc
mov
popf
les
and
add
in
cmp
das
fnstenv
pushw
stos
mov
cld
inc
repz
mov
loope
retf
inc
pop
or
cmc
in
leave
pop
popf
(bad)
adc
in
mov
ror
add
pop
inc
imul
jl
push
cmps
xchg
sub
inc
retf
mul
mov
imul
xor
cmps
mov
aam
or
pop
movs
push
jb
leave
mov
test
stos
into
in
and
lods
push
push
sub
xchg
or
imul
loopne
fldcw
inc
sbb
pop
lea
(bad)
fsubr
add
out
add
xchg
push
xor
push
aaa
or
or
std
jecxz
dec
xchg
jae
retf
scas
jnp
popa
mov
sbb
push
out
sub
add
mov
inc
es
xchg
imul
aam
sahf
sahf
imul
cmp
mov
xor
mov
and
dec
sub
or
(bad)
mov
imul
in
call
push
mov
pop
icebp
mov
(bad)
ins
jo
fld
retf
ret
mov
ss
jno
repz
sbb
test
ss
add
mov
loop
mul
lds
(bad)
cli
stos
add
icebp
xchg
xchg
pop
or
pop
dec
mov
jne
adc
(bad)
xor
aas
mov
imul
scas
retf
cs
and
inc
mov
mov
in
sub
xchg
out
ins
sub
or
mov
imul
mov
std
mov
pop
fldenv
xor
xlat
ds
push
dec
cmps
call
ds
clc
repz
aad
lods
das
seto
pop
push
frstor
in
movs
jae
std
mov
adc
sub
jb
ret
mov
fisttp
(bad)
mov
popf
pop
xor
xchg
cli
div
xchg
pusha
in
jecxz
push
jbe
icebp
mov
nop
xchg
mov
fldcw
adc
mov
push
mov
adc
addr16
leave
push
pop
add
adc
sub
jecxz
adc
fbstp
fild
stos
xlat
retf
jmp
rcl
out
dec
repz
sub
mov
mov
stos
or
ins
repnz
pop
std
add
cmps
push
pop
icebp
ss
ret
aas
retf
push
xchg
add
loopne
jo
aaa
mov
or
pop
icebp
sbb
call
gs
push
add
arpl
mov
call
es
sbb
dec
ja
lods
dec
fwait
jge
push
aaa
out
sub
dec
aas
or
push
js
out
sbb
sbb
xor
jg
test
xor
(bad)
imul
ins
xchg
or
cmp
sub
or
push
gs
push
and
inc
inc
inc
or
jle
rcr
(bad)
into
adc
sub
(bad)
adc
add
jge
push
sbb
push
out
pop
imul
xchg
and
sbb
sub
dec
psllq
sar
mov
mov
sti
xor
lods
sub
(bad)
jecxz
(bad)
mov
cmps
and
add
cmps
stc
inc
aaa
or
loop
xlat
daa
cmp
pop
outs
ret
retf
fmul
in
movs
jecxz
(bad)
mov
mov
loope
mov
imul
jle
pop
mov
mov
je
xchg
inc
xchg
popa
mov
adc
push
mov
cmps
out
mov
or
sub
ins
dec
rdmsr
jae
fiadd
mov
jns
xor
daa
bound
push
out
xchg
addr16
in
mov
dec
outs
inc
push
ins
push
stos
and
cmps
frstor
adc
(bad)
jns
scas
scas
(bad)
daa
es
mov
xchg
lahf
mov
cmp
add
(bad)
pushf
ret
mov
pop
lods
daa
push
retf
mov
jle
gs
jnp
scas
into
leave
(bad)
jne
rcl
xor
js
enter
(bad)
sbb
xor
aam
loopne
xor
int
and
cmp
rol
jae
dec
outs
push
movs
xor
(bad)
stc
outs
fnsetpm(287
xchg
cdq
dec
jno
(bad)
test
lea
jl
(bad)
rcl
adc
inc
lods
push
scas
or
or
jle
shl
clc
adc
inc
adc
gs
cmp
cmp
out
fdivp
out
mov
and
popa
mov
sbb
les
out
test
mov
pop
add
jmp
mov
imul
add
xchg
xor
inc
push
or
inc
cs
pushf
dec
ds
pushf
mov
call
xchg
and
xor
dec
arpl
dec
push
lods
mov
int3
cld
les
mov
dec
popf
dec
cmp
mov
push
push
sar
mov
xchg
fmul
loop
movs
pop
and
fimul
xchg
ss
push
mov
mov
sbb
inc
aam
or
outs
push
cwde
inc
xchg
push
ins
fs
mov
xchg
mov
mov
out
sbb
bound
hlt
aaa
data16
xor
fcom
adc
push
sbb
mov
pop
hlt
push
xor
pop
adc
out
cmps
movs
repz
sbb
adc
fisub
out
xchg
fisttp
jl
in
cmps
dec
cmp
and
adc
icebp
inc
je
push
xor
popf
mov
add
mov
push
gs
sbb
xor
aaa
xchg
mov
jmp
jl
fimul
in
xchg
dec
add
fwait
inc
adc
mov
mov
push
retf
adc
jmp
jnp
sahf
inc
jecxz
bound
stos
cmp
icebp
adc
cwde
sbb
push
cmp
mov
inc
or
shl
cmp
out
(bad)
mov
or
mov
inc
adc
jp
out
movs
out
pop
inc
pop
jecxz
data16
and
scas
(bad)
cmp
cmp
push
call
and
sub
les
or
inc
xor
sbb
add
push
punpckhbw
dec
(bad)
je
ss
sub
xchg
(bad)
mov
ds
(bad)
in
fs
sahf
jb
mov
stos
js
(bad)
shl
popf
fadd
or
rcr
dec
loope
nop
or
push
mov
jmp
push
scas
das
and
popf
daa
jnp
outs
push
popa
dec
push
in
jbe
xor
fs
icebp
mov
mul
push
ficomp
repz
(bad)
imul
es
push
pop
movs
sub
adc
adc
jecxz
pop
and
mov
and
pop
clc
not
idiv
das
addr16
mov
outs
ja
gs
imul
inc
push
es
xchg
cmp
or
push
fsub
and
ss
adc
icebp
push
fild
daa
sub
sbb
psubw
(bad)
pop
mov
jno
push
sub
test
pop
fadd
jmp
mov
push
retf
add
cmc
mov
jae
jae
mov
lock
add
in
sub
xor
(bad)
push
out
in
cmp
and
sbb
add
push
pop
cmps
pop
(bad)
pop
popf
jb
(bad)
cmp
imul
sbb
scas
mov
test
loope
mov
cmp
icebp
ins
push
or
outs
pop
imul
call
mov
mov
mov
jbe
fwait
clc
jbe
test
das
ret
and
addr16
cmp
daa
leave
mov
mov
push
es
das
inc
jge
shr
push
outs
mov
aaa
hlt
push
jp
pop
jecxz
mov
dec
mov
add
stc
dec
mov
scas
add
mov
into
js
aas
cmps
fist
adc
fcmovnb
test
xor
es
int3
cdq
mov
jp
out
mov
stc
xchg
inc
sbb
and
add
mov
in
js
dec
mov
sub
cs
outs
mov
xlat
dec
cld
mov
stos
mov
add
sbb
sub
je
mov
pop
push
jb
and
loopne
arpl
ins
add
loop
xor
mov
and
jmp
ins
(bad)
neg
jle
or
ds
test
jmp
sub
mov
es
mov
add
ja
pop
(bad)
stc
and
jae
mov
pop
sub
jns
sub
lea
fidivr
jbe
movs
pop
clc
cmp
int3
jle
retf
xchg
mov
(bad)
stos
test
xchg
xchg
popf
pop
jae
fadd
loopne
cmp
enter
dec
mov
pop
dec
fstp
arpl
cmps
xchg
hlt
loopne
popa
mov
ror
sbb
adc
jge
(bad)
outs
mov
das
out
fisttp
pop
push
mov
inc
add
adc
fidiv
in
push
cmc
cmp
and
sub
pop
ficom
pop
add
ss
ror
mov
jb
cmp
xor
ds
int
jno
in
gs
adc
push
mov
push
cmps
mov
test
gs
jp
mov
push
pusha
push
enter
mov
xor
add
cli
dec
ret
sbb
cmp
mov
jecxz
dec
sbb
lea
add
sub
inc
in
mov
dec
nop
and
pop
mov
add
push
jno
lods
mov
test
cdq
push
dec
jbe
scas
shl
xchg
sbb
jmp
cwde
pop
outs
jg
pop
in
xchg
lods
mov
into
lods
jmp
sbb
imul
xchg
pop
in
es
push
icebp
retfw
push
(bad)
js
nop
popf
inc
sbb
inc
dec
mov
shl
jnp
call
dec
xor
add
js
mov
aam
mov
xchg
inc
(bad)
and
imul
mov
shl
clc
mov
xchg
aas
inc
imul
retf
cld
xor
aad
xchg
sbb
jecxz
adc
div
mov
pusha
stos
mov
aam
mov
sbb
or
out
fnstcw
loopne
cwde
or
adc
icebp
fld
imul
test
xchg
(bad)
mov
dec
sub
and
push
inc
das
xor
ret
repnz
repz
mov
cmp
dec
jb
jmp
jl
mov
push
pop
cmps
leave
jecxz
inc
inc
sub
movs
xor
(bad)
imul
in
loopne
(bad)
and
iret
popf
lock
pop
aaa
dec
(bad)
call
add
xchg
xlat
repnz
shl
psubd
add
shl
pop
adc
(bad)
sbb
or
lods
dec
mov
sub
call
popf
test
and
in
rcl
dec
sub
retf
mov
es
icebp
ret
es
mov
imul
test
and
out
in
hlt
fwait
sahf
addr16
std
mov
and
ins
(bad)
xor
idiv
jmp
outs
popf
pop
xchg
xchg
fst
lock
sub
or
xlat
movs
adc
ud2
aad
es
dec
cmp
sahf
or
xor
dec
aad
xchg
mov
(bad)
dec
fistp
(bad)
cwde
jl
xchg
mov
sub
pop
pusha
imul
mov
in
inc
push
xchg
inc
call
xchg
inc
jge
jmp
je
mov
ror
test
push
sub
mov
fwait
fwait
std
dec
jns
dec
cmp
xor
or
xor
rol
add
cmp
icebp
mov
scas
mov
push
ret
pop
rcr
mov
popf
in
cmp
push
xchg
sub
xor
dec
xor
adc
(bad)
in
jb
pop
jge
cmps
fadd
ret
add
in
std
repz
(bad)
adc
mov
inc
sbb
sub
adc
hlt
outs
cs
xchg
outs
adc
daa
mov
dec
and
sbb
mov
push
(bad)
mov
cmps
push
loop
jmp
fiadd
loopne
add
in
and
scas
in
fimul
retf
jne
cmp
xor
into
and
add
out
in
jg
jne
inc
popa
mov
(bad)
sbb
ss
ja
or
push
sti
call
pop
mov
cmp
cmc
cmc
in
fdivr
fstp
or
or
pusha
fdivr
add
in
call
inc
mov
leave
push
cwde
cmp
jbe
sahf
out
cmc
outs
ror
dec
rol
ins
xchg
inc
ret
pavgw
push
cmp
dec
fcomp
lods
inc
out
inc
adc
stc
xor
fs
aam
pop
and
mov
jp
or
jl
fdivr
popa
aam
sub
mov
fmul
mov
nop
fdivr
adc
mov
popa
inc
sbb
clc
out
cmp
xlat
jp
ins
add
dec
xchg
retf
(bad)
frstor
in
rol
addr16
xchg
push
or
mov
ret
xchg
pushf
xchg
push
enter
movs
inc
sub
mov
bound
call
repz
jp
enter
bnd
mov
push
mov
pop
xor
jl
jns
and
es
inc
(bad)
lods
movs
scas
cs
jns
sahf
retf
aam
repnz
in
call
fistp
mov
mov
cmp
or
xor
pop
sti
fwait
test
push
mov
and
movs
jmp
and
cmc
ffreep
daa
call
bnd
or
inc
sub
mov
adc
rcr
inc
mov
scas
mov
or
xchg
mov
cmp
stc
sub
dec
mov
pop
jbe
loope
js
mov
out
add
mov
daa
cmps
mov
xor
sub
adc
fwait
repnz
and
popf
imul
dec
inc
fadd
nop
mov
and
rcr
(bad)
daa
out
sar
addr16
sahf
or
dec
jge
jns
push
dec
inc
lea
movs
inc
mov
adc
(bad)
fstp
sbb
pushf
vcvtss2sd
sti
or
sub
aas
xor
leave
(bad)
sbb
adc
sbb
adc
addr16
mov
call
or
sar
fmul
dec
adc
mov
dec
push
xchg
xchg
pop
xor
mov
sbb
jo
fs
ins
ror
sbb
into
and
inc
in
fiadd
or
in
jmp
neg
dec
dec
frstor
hlt
stc
inc
sub
icebp
enter
dec
xchg
cmp
enter
js
loopne
(bad)
jmp
hlt
jge
fsubr
addr16
mov
fdivr
mov
sub
push
xor
test
lods
inc
push
test
xor
into
rcr
leave
popf
dec
call
mov
je
mov
push
pop
imul
jp
push
aaa
add
jmp
int
push
fimul
das
(bad)
out
mov
aaa
cmp
mov
adc
sbb
pop
xchg
sub
outs
mov
cmp
scas
and
mov
in
in
pop
in
stos
fbld
sub
lods
mov
(bad)
mov
cmp
push
add
cmp
inc
loope
jge
push
mov
jl
fnstsw
sub
push
in
jns
test
pop
cmc
dec
repnz
dec
sub
and
imul
or
sub
lahf
adc
movs
pop
cmps
or
call
lods
les
pop
jmp
aaa
mov
sub
or
xlat
adc
mov
lods
add
push
dec
out
mov
(bad)
push
cld
push
(bad)
mov
daa
fsub
call
xor
mov
(bad)
mov
shr
mov
shl
mov
nop
adc
loop
mov
mov
clc
mov
repz
mov
cld
dec
mov
mov
cmovl
adc
xor
leave
les
mov
fsubr
jge
je
sub
mov
pop
in
loope
lds
aas
shl
fldcw
(bad)
std
lock
sbb
je
mov
stos
(bad)
push
push
pop
pop
ret
dec
push
push
or
div
js
push
add
pop
push
call
dec
ror
adc
xor
cmp
das
mov
adc
cmp
adc
repz
(bad)
ss
pushf
cmp
add
dec
adc
cmp
mov
and
dec
es
outs
(bad)
into
push
inc
fs
sub
aam
pop
mov
push
adc
or
xchg
sbb
sub
mov
jb
(bad)
loope
pop
inc
dec
cmp
cmp
mov
dec
in
add
mov
mov
add
shl
inc
xchg
cmp
and
mov
lock
arpl
rcr
call
in
push
lea
cmp
outs
xor
jmp
ja
sbb
and
or
ss
daa
ret
jne
into
sub
cld
sbb
mov
sub
push
enter
cli
retf
and
stos
and
fnstenv
int
test
gs
dec
inc
es
sbb
cmc
inc
retf
add
test
pop
jmp
not
sub
inc
jp
xlat
xor
and
and
and
std
cmp
mov
cmps
inc
out
and
mov
and
hlt
in
pop
scas
sub
cld
leave
pop
add
fistp
movaps
cwde
fild
ror
push
mov
aaa
pop
cmps
pop
mov
add
dec
setl
lahf
sbb
adc
push
in
mov
mov
or
jecxz
and
leave
shl
sbb
mov
cmc
vmovd
adc
sbb
mov
test
aad
scas
mov
adc
inc
loope
test
fstp
mov
jge
jmp
pop
xchg
loopne
shl
out
lods
movs
cdq
add
inc
fist
sbb
sbb
std
aas
sub
xchg
jmp
xor
adc
retf
mov
js
sbb
scas
mov
out
or
popa
push
pop
retf
sbb
pop
and
mov
xchg
push
cmc
cmc
mov
(bad)
ror
std
fs
add
sbb
cdq
jo
dec
ret
movs
xor
and
loop
jbe
cmc
cmp
pop
shl
sar
addr16
cdq
cdq
sub
cmp
push
adc
adc
ds
push
dec
repnz
repz
dec
push
stos
add
mov
(bad)
sbb
pop
mov
int
ficomp
cmp
out
sbb
push
nop
jne
pop
icebp
sub
das
jnp
movs
jae
and
retf
gs
aam
leave
fmul
iret
imul
push
xchg
mov
jmp
out
sahf
mov
jmp
inc
scas
jae
or
outs
je
jno
xchg
or
sahf
repnz
daa
xchg
jl
call
xchg
pusha
pusha
dec
sub
cli
(bad)
cs
xor
ja
jp
es
movs
(bad)
fldenv
vsqrtsd
hlt
mov
push
shr
cvtps2pd
imul
cli
xchg
pop
or
loopne
fmul
imul
test
pop
rol
shl
test
mov
add
push
(bad)
jmp
cmp
or
cld
push
inc
ret
xchg
pop
jb
push
bound
jns
add
mov
and
in
fdivr
aas
clc
inc
jbe
fst
(bad)
int3
mov
cmp
push
mov
sahf
push
xor
push
cmp
shl
es
loopne
or
movs
mov
sbb
jae
mov
jnp
inc
xor
test
or
int
push
iret
inc
xor
sub
add
aaa
sahf
inc
fmul
int3
jbe
push
mov
mov
clc
pop
loop
inc
push
scas
xchg
movs
ret
arpl
mov
jge
jge
fsubr
inc
push
sbb
jb
adc
dec
sbb
dec
(bad)
sub
xor
sub
retf
sbb
mov
test
in
(bad)
leave
adc
pop
not
js
icebp
sub
(bad)
jbe
in
sub
xor
sbb
pop
jl
add
aas
test
inc
mov
ins
push
rcl
jge
mov
mov
(bad)
jmp
dec
aad
jg
mov
mov
test
lds
pusha
lds
cmc
dec
sub
xor
aaa
vandps
mov
inc
fwait
test
neg
cmp
jo
mov
out
mov
je
or
jmp
js
or
inc
mov
jne
enter
lahf
xlat
xlat
aad
xchg
aad
jmp
ret
sbb
mov
push
mov
test
add
stos
mov
sbb
inc
xchg
inc
and
sub
mov
frstor
and
inc
push
mov
mov
mov
cmp
ja
sahf
dec
pop
xlat
jae
add
sti
mov
fistp
mov
outs
pop
sbb
push
test
inc
pop
movs
pushf
cmp
ins
inc
adc
inc
jmp
dec
add
pop
int
cmp
cmp
dec
and
push
xor
iret
mov
jg
inc
(bad)
repz
clc
out
push
mov
daa
xor
bnd
out
rcl
in
mov
xchg
pop
popa
push
jnp
dec
push
out
lea
push
int3
outs
jp
push
inc
stos
fnstsw
repnz
xchg
push
mov
fimul
inc
repz
repz
jns
add
and
pop
pop
test
loopne
stc
(bad)
sub
das
test
ret
aad
xchg
mov
jp
push
movs
fs
mov
inc
iret
js
dec
sub
push
sbb
cmp
and
sti
scas
xor
dec
add
jp
add
iret
mov
cs
add
mov
or
pop
popa
sub
push
addr16
pop
push
sar
loope
cwde
mov
shl
in
xor
aaa
mov
push
and
mov
test
and
pushf
(bad)
add
xor
mov
mov
je
mov
js
sub
and
cmp
fincstp
popa
add
dec
xchg
xchg
push
test
xor
lods
or
(bad)
adc
add
add
sub
out
stos
jnp
and
or
stos
leave
not
dec
xchg
jg
fcom
dec
and
dec
ret
nop
retf
cmp
cmps
imul
js
dec
cmp
adc
pop
cmp
adc
mov
sbb
add
jb
or
loopne
(bad)
in
lock
jne
(bad)
and
sbb
adc
bound
test
and
out
mov
dec
xor
(bad)
(bad)
add
xchg
mov
mov
mov
dec
cmp
mov
out
cwde
dec
adc
inc
fldln2
push
push
ja
push
mov
xchg
scas
jbe
mov
movs
dec
cmp
repz
lods
lock
repnz
cwde
fcomp
pop
mov
mul
repnz
inc
mov
sahf
cmps
mov
sub
pop
push
int3
sub
int
xchg
ins
jae
or
jo
int3
inc
in
pop
jecxz
push
sub
jae
pushf
clc
mov
jecxz
fiadd
outs
xor
xor
or
pop
and
std
or
jp
clc
push
dec
hlt
mov
sbb
in
enter
push
aam
cmp
retf
cdq
ror
dec
or
inc
fistp
jnp
aad
fild
(bad)
mov
cmp
cmp
loop
push
js
sub
imul
cs
mov
cmp
retf
imul
sub
das
xchg
mov
mov
adc
push
add
js
xchg
pusha
repz
sub
push
aam
imul
pop
mov
mov
jo
(bad)
and
rcl
cmp
or
mov
sbb
add
cmp
aam
sbb
cs
pop
pop
push
movs
sbb
mov
lods
cmps
jmp
aam
out
dec
pop
xchg
mov
rcl
jmp
cdq
mov
das
inc
mov
sub
scas
adc
sbb
pop
(bad)
in
adc
test
xor
retf
iret
dec
dec
pop
xor
push
lods
ror
xchg
dec
or
loopne
mov
xchg
loope
call
pop
push
dec
repz
ficomp
adc
dec
icebp
les
ret
outs
retf
aaa
fneni(8087
xchg
cmp
loopne
pop
ror
aas
adc
pop
sbb
ds
xchg
and
cmps
jno
call
ds
cmps
call
pop
aam
xlat
and
jmp
data16
retf
inc
repz
mov
pop
sub
lds
inc
cmps
cwde
cmp
push
aad
int3
sbb
inc
int
shr
paddd
shl
jne
in
call
xor
in
js
popf
mov
mov
in
cdq
ror
add
fsub
add
mov
adc
xor
scas
aad
mov
push
arpl
in
push
ret
stos
inc
hlt
mov
adc
adc
fwait
lock
add
inc
(bad)
clc
fisub
sub
dec
mov
out
jmp
aam
std
ror
in
jbe
sti
(bad)
fnstsw
(bad)
fst
xchg
push
lods
mov
or
push
push
icebp
adc
xchg
fsub
mov
xchg
adc
dec
inc
dec
xchg
add
and
jno
mov
daa
sbb
sub
xchg
pop
mov
fs
(bad)
pop
jbe
scas
jecxz
das
mov
jl
push
pop
cmp
jbe
(bad)
les
cmpps
xor
pop
mov
ja
das
imul
aad
push
pop
cwde
retf
bound
xchg
jmp
shl
pop
sbb
stos
gs
mov
addr16
and
icebp
lods
aad
ja
test
mov
mov
sbb
out
fcmovne
inc
or
inc
add
scas
fsubr
or
stc
add
js
dec
mov
jp
scas
lock
mov
xchg
xor
dec
retf
ss
pop
mov
lock
cmp
sub
rcr
inc
add
int
and
sub
les
out
hlt
dec
xacquire
xor
mov
add
adc
pop
cmp
repz
inc
pop
and
pop
fnsave
inc
lods
dec
fstp
push
xchg
out
iret
jns
jno
and
adc
rcr
xor
inc
push
xchg
les
pop
(bad)
fstp
mov
mov
push
fcom
gs
test
jmp
push
cmp
xor
dec
sti
int
pop
jae
test
push
dec
lods
ret
leave
fsub
mov
into
scas
sahf
xor
outs
imul
xchg
xchg
pop
push
int
pop
aad
mov
inc
jne
mov
sbb
add
jle
imul
mov
aaa
stos
test
test
cmp
rep
jb
enter
int3
xchg
dec
das
call
lods
cdq
pop
repnz
push
mov
dec
xor
add
jb
les
pop
sbb
stos
loopne
cmp
fiadd
cmp
xor
scas
imul
fsubr
adc
out
das
(bad)
cmp
icebp
iret
cmps
inc
jmp
aas
xchg
mov
loope
pushf
(bad)
loop
fwait
xchg
pop
jb
movs
xor
lods
cs
clc
dec
mov
pop
jge
xchg
dec
xchg
call
rcr
mov
mov
push
sbb
cmp
mov
cmp
dec
push
xchg
sub
cmps
outs
ins
xchg
daa
loopne
sbb
vpshaq
in
or
push
or
inc
fldcw
loopne
ds
mov
lahf
add
add
pop
dec
sti
mov
loopne
pop
sbb
inc
push
cs
(bad)
sbb
pop
gs
sbb
out
popf
in
das
mov
retf
xchg
lods
in
mov
xchg
shl
pop
or
sbb
in
(bad)
xor
jp
dec
dec
int3
addr16
sahf
int
sbb
test
jo
cwde
ds
jp
mov
mov
fcomp
adc
cmp
stc
add
pop
aaa
mov
mov
dec
mov
dec
xlat
jne
sub
adc
dec
xor
sbb
push
cmps
xor
call
or
push
cld
push
fwait
out
das
add
pushf
adc
shl
outs
or
in
xchg
cmp
mov
add
mov
sub
test
sub
sbb
jmp
leave
sahf
shr
call
xlat
pop
bswap
ret
popa
aam
stos
mov
lock
fs
jmp
sub
mov
shl
jb
leave
xor
mov
add
(bad)
cmc
add
(bad)
xor
out
xchg
cmp
cld
cli
pop
mov
out
dec
mov
call
add
sahf
mov
rol
push
mov
pop
dec
mov
test
cmp
adc
jmp
cmp
inc
xchg
inc
xlat
and
mov
cmp
out
clc
fmul
add
dec
inc
je
sbb
mov
jb
fcom
out
lea
sub
adc
or
test
(bad)
and
ret
aaa
mov
adc
lahf
push
sub
mov
push
add
loopne
inc
call
mov
ror
pop
popf
pop
push
test
mov
mov
or
mov
dec
cmp
pushf
jns
dec
cdq
movs
sub
shr
sbb
inc
or
ins
shl
repz
std
or
dec
cmp
mov
sub
push
pop
mov
push
pusha
and
xchg
sbb
daa
fdiv
aad
ins
cmc
sahf
mov
sar
ja
or
adc
cmp
xchg
mov
xor
leave
fistp
cmp
in
adc
jbe
jle
ds
aad
test
dec
jno
div
mov
leave
mov
push
xchg
add
pop
sub
xchg
dec
repz
mov
xchg
pop
retf
jbe
stos
cmp
imul
ins
mov
mov
mov
pop
inc
push
out
mov
jecxz
fcomip
fisubr
ja
sbb
je
test
pop
in
add
cli
das
cdq
mov
mov
cmovs
loope
push
jno
ret
jecxz
xor
mov
scas
mov
inc
add
gs
push
outs
and
in
or
aad
mov
stc
(bad)
sub
and
pop
jp
sar
daa
(bad)
fild
dec
clc
inc
jle
xchg
in
inc
mov
add
pop
les
cmps
imul
jmp
push
fld
inc
repnz
add
xor
mov
push
out
sub
sar
adc
adc
aad
fbstp
shl
jg
sti
dec
cmp
lods
sbb
fsubp
fcmovbe
jbe
(bad)
out
push
xchg
adc
lock
xlat
and
or
sub
daa
(bad)
in
ins
cvtpi2ps
xlat
xchg
into
mov
int3
adc
push
fild
fiadd
mov
aad
jle
add
pop
jne
push
jl
dec
(bad)
psadbw
pop
jp
lds
adc
and
jno
mov
mov
mov
imul
out
imul
jnp
jmp
jmp
into
xchg
sub
lds
enter
and
gs
sbb
or
nop
in
cwde
retf
(bad)
push
or
(bad)
dec
rol
cmp
inc
ret
out
lods
inc
and
dec
in
push
icebp
mov
jp
imul
cmc
pop
hlt
and
add
add
sbb
xchg
dec
addr16
and
dec
and
push
mov
icebp
pop
movs
or
ds
push
push
test
call
mov
adc
adc
xor
jecxz
repnz
push
mov
mov
mov
mov
mov
sub
movs
imul
xchg
popf
sti
data16
sub
xchg
ficom
push
dec
(bad)
prefetch
jmp
mov
div
xchg
pop
inc
fstp
nop
in
xor
pop
je
push
int
ja
jle
xor
push
mov
ror
xor
addr16
xchg
push
iret
jl
jle
int3
dec
rcr
enter
ret
cmp
sbb
pop
ror
clc
icebp
mov
loop
(bad)
(bad)
mov
inc
fimul
cdq
ins
sar
out
xchg
or
add
into
dec
(bad)
leave
std
sub
xor
xchg
lea
scas
movs
jno
in
scas
xacquire
pop
loopne
call
cmp
ins
scas
xchg
div
cs
and
mov
push
push
xchg
cmp
movs
cmp
xor
das
jmp
mov
lea
push
adc
mov
fnstcw
add
sub
fsub
or
jb
lahf
loope
mov
stos
(bad)
aam
pop
lahf
xchg
pop
pop
pop
add
jg
rcr
add
adc
cdq
mov
fisttp
mov
cmp
or
mov
mov
push
shl
cmp
xchg
js
push
sub
mov
xchg
xchg
sbb
retf
sbb
xor
pop
retf
fild
test
je
iret
gs
nop
mov
push
add
and
and
jnp
push
cmc
pop
stos
test
aam
ja
jb
pop
test
jne
sub
mov
jg
dec
sar
dec
sbb
fadd
loop
outs
mov
jb
int
aas
sbb
stc
mov
iret
mov
jmp
shl
lea
jmp
dec
leave
pop
inc
add
add
imul
ja
mov
mov
mov
inc
mov
enter
push
mov
mov
sbb
popf
ret
fs
cmc
push
cmps
jne
dec
movs
push
sub
mov
and
(bad)
or
ret
xchg
dec
aaa
xor
sahf
jecxz
shr
inc
addr16
xor
cli
push
mov
mov
out
dec
sbb
dec
and
push
gs
stc
mov
inc
out
adc
add
sub
iret
sub
sub
icebp
push
pop
pop
das
std
lahf
pop
outs
sbb
data16
jnp
sbb
lods
pop
call
cli
int3
movs
into
popf
adc
dec
sub
jmp
xchg
ret
retf
call
dec
dec
jno
add
mov
push
cs
mov
mov
jmp
aas
inc
lods
pop
jnp
mov
or
cmps
stc
mov
gs
cli
xchg
inc
imul
mul
sbb
pop
cmp
in
mov
sub
cmp
or
fidiv
and
sub
add
add
mov
sti
rol
pop
jmp
add
xlat
cmp
mov
xchg
sbb
push
xor
mov
movs
cmp
jnp
add
mov
fldenv
cwde
into
std
mov
dec
sbb
xchg
aad
aaa
adc
fcomp
in
mov
inc
aaa
xchg
lea
cmp
pop
jbe
and
pusha
clts
fcom
aaa
je
lahf
pop
dec
jmp
sbb
jl
xchg
addr16
pop
adc
rcr
mov
mov
aas
mov
adc
push
ds
add
mov
jne
cmp
fcom
aaa
add
lahf
dec
(bad)
test
pop
xchg
imul
sahf
cs
cli
(bad)
sbb
sti
push
imul
inc
retf
xchg
leave
jns
sub
je
sbb
adc
pop
pusha
ja
call
push
js
jl
(bad)
fistp
outs
mov
or
adc
mov
mov
push
inc
iret
or
pusha
ja
lods
sar
inc
imul
fimul
push
in
or
icebp
lds
stos
out
test
mov
mov
das
and
cmp
mov
mov
xchg
lea
adc
sub
mov
cwde
jmp
stos
out
enter
sahf
mov
outs
cwde
sbb
pusha
add
sbb
ja
xor
lods
dec
pop
push
call
cmps
jns
test
fist
pop
or
sub
int3
adc
mov
pushf
ret
in
outs
push
scas
mov
sbb
xchg
pop
ror
fadd
fst
xchg
loopne
ror
pop
std
outs
cld
test
inc
fucomi
inc
pop
pop
mov
dec
pop
and
inc
mov
stc
shr
add
movs
add
cmps
jecxz
inc
je
cmp
shl
or
nop
inc
xchg
mov
push
jae
sti
lods
add
pop
mov
push
xor
cmps
lods
stos
or
into
mov
ficom
cld
sub
jmp
ja
sub
mov
mov
push
in
dec
mov
out
aas
dec
inc
and
inc
inc
and
call
jl
mov
rcr
std
jmp
in
jmp
and
and
inc
ins
jno
nop
mov
call
sbb
sub
dec
jnp
or
push
in
dec
(bad)
imul
push
sbb
cli
cmp
mov
pop
xor
call
mov
scas
sbb
mov
rol
(bad)
pop
lea
mov
cmp
mov
or
ja
stos
data16
mov
pop
pop
dec
fstp
dec
adc
stc
xchg
popf
add
push
mov
gs
pop
test
sbb
mov
(bad)
out
out
xchg
daa
fidivr
adc
inc
jge
pop
mov
push
mov
sahf
popa
cmp
mov
(bad)
xor
je
xor
shl
iret
popf
xchg
into
and
(bad)
mov
ds
pop
fild
or
cld
sub
xor
cmc
outs
enter
push
cli
mov
push
retf
addr16
mov
mov
into
les
aad
out
push
xchg
fsub
nop
jmp
cdq
retf
mov
mov
sbb
es
(bad)
lea
pushf
lea
jbe
in
fdiv
cwde
xchg
fild
jl
and
cmp
mov
push
test
and
lds
lahf
aaa
inc
cmps
mov
mov
xlat
push
mov
retf
xchg
repnz
xor
sub
das
inc
std
(bad)
fldenv
(bad)
pusha
or
pushf
mov
pop
mov
rol
dec
loopne
sub
out
sub
mov
xchg
or
jl
push
sub
mov
xchg
mov
sbb
xchg
mov
mov
sub
lods
adc
jbe
stos
call
pop
loope
mov
repz
cli
push
xor
mov
or
push
mov
sbb
push
and
add
cmc
fild
sbb
mov
(bad)
(bad)
inc
add
outs
mov
ret
ss
xchg
iret
push
je
ss
xor
jo
sti
push
inc
push
retf
(bad)
jno
mov
cmp
cdq
aaa
ret
push
imul
stos
(bad)
mov
dec
sub
jbe
or
or
repz
inc
mov
ins
inc
dec
test
push
clc
shl
sub
mov
std
test
out
push
lods
loope
xchg
jp
or
retf
cmp
movs
or
call
sbb
out
jae
aad
mov
or
xchg
loope
inc
ds
fisttp
arpl
ja
cmp
jl
add
mov
mov
mov
jae
cmp
xchg
enter
sbb
jg
sti
dec
les
repz
stc
push
pop
pop
sbb
(bad)
fidiv
sub
stc
daa
lock
xchg
ins
aas
aad
cmps
clc
xchg
out
add
push
dec
popa
xchg
aaa
js
mov
repnz
push
xchg
push
jmp
es
mov
ret
mov
mov
sar
outs
ds
ja
inc
jnp
mov
fmul
rcr
sub
shr
cmps
enter
lods
dec
inc
out
fld
iret
push
mov
xlat
fiadd
sbb
mov
cmp
cwde
les
pusha
not
loop
inc
lds
xchg
xor
push
xor
outs
xlat
cmc
pop
and
lods
pop
or
xchg
sub
test
dec
dec
sbb
iret
idiv
adc
mov
lods
(bad)
push
add
jle
mov
call
stc
xchg
push
xchg
div
mov
imul
in
dec
sahf
clc
lea
lods
adc
int
xchg
jb
rsm
xchg
imul
push
loopne
jp
cmc
pop
mov
cmps
bound
dec
cmps
rcr
mov
jno
push
cs
fbld
fstp
jmp
int
inc
pop
out
mov
dec
cmp
pop
cmp
pop
sub
test
inc
inc
fmul
inc
mov
popa
test
sti
mov
ins
pop
lods
sbb
xchg
jae
movs
shl
xor
jo
std
out
mov
test
dec
xlat
scas
sahf
lods
jecxz
xor
lahf
loop
cmp
psubq
dec
ret
jg
shr
in
les
jnp
in
jns
dec
data16
push
movs
icebp
sbb
scas
movs
fwait
jp
cmp
outs
loope
jmp
call
cmps
push
les
jmp
adc
nop
scas
fsub
xchg
mov
int3
test
das
push
sub
out
pop
pop
fstp
and
outs
sti
push
out
sbb
xor
pushf
mov
ret
das
pop
or
or
cmp
vmovaps
dec
xlat
outs
iret
shl
jg
adc
jo
scas
inc
movs
dec
pop
dec
mov
jnp
push
sbb
mov
leave
aam
dec
pop
adc
sahf
ds
jl
lods
mov
test
dec
clc
xchg
std
std
mov
dec
cs
retf
std
push
test
cdq
jne
dec
lahf
or
sub
test
ds
sub
or
sub
or
lds
out
sbb
lods
rol
jo
mov
pop
push
dec
jecxz
sti
mov
jecxz
sbb
ins
jge
emms
and
dec
and
inc
daa
push
sbb
(bad)
sbb
inc
movs
mov
mov
pop
loopne
in
jae
inc
jnp
inc
mov
popf
icebp
pop
mov
outs
scas
imul
mov
adc
adc
jg
into
xchg
fist
out
sbb
addr16
iret
pop
aam
push
xor
dec
out
push
or
addr16
jb
xor
push
jae
mov
mov
gs
sub
sbb
push
(bad)
jae
cmp
adc
pusha
in
fsubr
pop
xchg
fs
adc
cwde
sub
push
sbb
cmps
fild
mov
push
pop
sar
dec
xor
fsubr
mov
shl
and
sub
into
mov
dec
sbb
sub
xor
in
pop
ret
dec
jbe
xchg
(bad)
in
test
or
add
inc
mov
ss
pop
(bad)
int3
nop
call
add
ror
sbb
cvtps2pd
enter
adc
and
stos
push
outs
ds
mov
pushf
icebp
jp
lahf
cmp
call
js
cmps
xor
shr
adc
pop
(bad)
in
xor
and
sub
pop
in
out
rcl
popf
or
ret
push
push
(bad)
hlt
ret
mov
mov
ds
scas
inc
stos
xlat
push
loop
into
fisttp
ret
stos
and
mov
xor
out
adc
scas
and
xlat
sbb
jl
add
jmp
push
imul
push
hlt
pop
dec
add
adc
jl
dec
fist
in
dec
jb
push
mov
test
imul
mov
sbb
popa
fisttp
rcr
scas
(bad)
mov
push
cli
inc
int3
cmps
xor
mov
dec
jne
xchg
mov
ds
call
das
out
ins
popf
ins
sti
mov
mov
test
cmp
arpl
fs
inc
shl
pop
pminub
(bad)
cmp
jmp
das
or
sbb
lea
add
imul
cmp
mov
sbb
sbb
fsub
sub
ss
in
dec
push
xor
xlat
mov
dec
les
jno
enter
jmp
mov
inc
repnz
and
cmp
repnz
jecxz
std
mov
and
and
inc
mov
mul
sti
jnp
es
out
mov
ss
push
les
and
mov
(bad)
mov
add
or
sbb
inc
mov
mov
mov
adc
or
sub
ins
xor
dec
or
dec
push
pop
mov
adc
sbb
add
inc
push
add
and
test
pushf
das
cmovg
add
shr
sbb
push
in
popa
jl
xor
pusha
pop
xchg
loopne
arpl
pop
fild
rcr
nop
popf
cmps
or
cmp
pop
fild
lahf
inc
inc
int
aad
ss
(bad)
std
iret
adc
pop
aas
jnp
push
out
sub
or
push
scas
jmp
add
xchg
xor
mov
je
push
ffree
mov
and
xchg
aad
xor
mov
shr
cmp
lods
addr16
xchg
jne
push
dec
(bad)
(bad)
es
call
pushf
cmp
gs
jge
(bad)
push
sub
mov
cli
push
mov
cmp
xchg
mov
mov
mov
jo
mov
cmps
pop
sbb
rcl
das
mov
inc
mov
push
dec
icebp
xchg
test
test
ins
sub
mov
and
loop
push
mov
rcl
outs
icebp
and
xor
loopne
jae
dec
sbb
jle
cmc
dec
inc
and
xor
mov
mov
adc
mov
mov
xchg
jmp
(bad)
xchg
(bad)
cmps
lds
(bad)
std
sbb
imul
cmps
aam
lds
mov
pop
pop
arpl
(bad)
cwde
ja
or
pop
(bad)
mov
es
ret
aam
xor
adc
ret
std
gs
scas
xchg
xor
sbb
xchg
rcl
jb
loopne
fs
lahf
adc
or
pop
rol
enter
je
xor
sub
and
push
ja
sbb
jbe
stos
push
inc
movs
mov
or
pop
lahf
inc
mov
jle
inc
jge
hlt
fistp
les
rcr
icebp
jo
and
mov
in
das
lods
cmp
jb
mov
sub
pop
test
out
or
fs
mov
xlat
jmp
sbb
fwait
mov
mov
inc
(bad)
fcomi
rol
jmp
rcl
loope
inc
pop
enter
ins
sbb
fs
push
push
int
inc
in
push
and
in
cmp
mov
xchg
icebp
jmp
enter
and
xor
push
aam
pop
xor
js
mov
scas
int3
add
imul
mov
fisubr
mov
fcmovnbe
sahf
mov
push
repnz
jae
mov
je
cmp
ret
popa
xchg
cmp
pop
and
fcomip
dec
xor
iret
mov
(bad)
jge
cmp
and
sub
push
fwait
jle
cli
mov
inc
xor
faddp
dec
jmp
inc
xchg
sbb
out
and
lahf
aad
cmc
sub
into
sbb
fs
and
push
adc
xor
shl
add
add
fidivr
dec
adc
and
test
stos
das
jns
cmp
aas
cmc
xchg
aaa
pop
bound
imul
mov
cwde
inc
les
dec
cwde
int3
test
mov
mov
in
movs
push
fiadd
scas
das
arpl
out
or
jp
(bad)
(bad)
out
inc
add
cs
daa
xor
test
fdivr
leave
dec
add
sar
mov
or
mov
fimul
movs
ret
addr16
(bad)
mov
test
push
cs
(bad)
or
(bad)
add
inc
and
or
inc
or
fwait
jbe
pop
and
fisubr
inc
xor
lds
or
mov
shr
jnp
mov
jae
sub
cmps
cmps
test
push
add
adc
enter
mov
adc
pop
xor
mov
fmul
mov
adc
je
jbe
mov
push
push
and
pop
lods
and
pop
rol
sahf
addr16
sti
movs
bound
repnz
or
and
xchg
jmp
xchg
mov
enter
sar
inc
dec
mov
loope
popa
inc
sar
and
sbb
adc
call
xchg
int3
adc
out
push
test
xchg
jg
jmp
xchg
bound
in
xlat
aaa
jbe
inc
mov
daa
mov
test
mov
sti
and
pop
in
cdq
xchg
and
mov
addr16
sti
nop
inc
jo
sar
push
es
(bad)
lea
dec
and
cmp
popf
cmp
push
int3
adc
pop
sub
mov
inc
push
in
popa
and
into
out
ja
mov
dec
je
into
ins
pop
lds
mov
lahf
ficom
and
and
aam
cwde
mov
cmps
idiv
cwde
sbb
jmp
call
jmp
sbb
sar
aad
xchg
hlt
cli
dec
pop
jge
dec
mov
fdiv
sbb
mov
movs
mov
cmp
sub
dec
xchg
push
mov
sbb
mov
xchg
call
outs
push
popa
dec
adc
jg
jge
cmp
(bad)
push
sbb
adc
fdivr
retf
(bad)
mov
inc
xlat
xor
inc
fcmovnbe
pop
dec
and
add
fst
lahf
mov
addr16
mov
cli
int3
and
cmp
xchg
pop
rol
pusha
mov
pop
mov
and
sbb
push
adc
mov
js
repz
or
inc
mov
loopne
adc
call
cmc
clc
dec
mov
add
sbb
pop
ret
arpl
sub
push
cmps
mov
inc
dec
jl
fld
jl
push
idiv
inc
scas
lods
mov
jae
arpl
imul
cmps
cmp
clc
test
ins
mov
xor
ror
cmps
push
cld
push
loope
cmp
mov
fild
int3
popf
mov
hlt
dec
push
lds
push
fldl2e
mov
ja
test
mov
aam
inc
enter
(bad)
aad
dec
inc
loope
mov
inc
jne
sub
xor
xor
call
ror
pop
mov
arpl
jns
mov
mov
adc
sbb
jno
and
pop
jl
pop
dec
fwait
repnz
iret
xor
adc
adc
cs
shl
pop
aam
faddp
popa
aam
bound
jae
pop
lahf
xor
adc
adc
push
xchg
sahf
jb
ss
mov
adc
jecxz
maxps
ss
out
fnsave
sbb
mov
mul
jp
cld
mov
loope
cwde
fisttp
mov
aam
push
icebp
shl
cmp
sub
fsub
test
mov
lock
xor
jne
lods
jae
ja
xor
mov
lahf
outs
imul
mov
add
repnz
jno
mov
cli
or
lds
fwait
dec
fcmove
int3
sub
or
adc
add
and
push
push
mov
pop
cmp
movs
ret
loopne
xor
mov
test
push
jo
mov
dec
stos
(bad)
push
pop
adc
xchg
or
mov
sub
imul
jo
xor
add
pop
test
cmps
mov
or
sbb
(bad)
leave
mov
clc
adc
sbb
push
ja
pop
mov
out
pop
out
adc
inc
mov
pop
jle
adc
jmp
lds
cdq
neg
fcmovnb
or
jg
popf
push
(bad)
in
es
adc
mov
mov
repnz
popf
mov
mov
outs
adc
call
cmp
loope
jmp
nop
adc
jns
lods
cmp
rcr
(bad)
and
push
jg
movs
test
shl
cmp
xchg
xor
xchg
inc
popa
mov
leave
pusha
lods
pop
jns
cwde
cmp
fwait
mov
mov
inc
or
das
cmp
ror
jmp
cmp
dec
popa
xor
mov
push
ret
(bad)
mov
mov
dec
fwait
mov
retf
adc
data16
xor
sub
adc
in
mov
or
dec
mov
cs
sub
cmp
ficom
push
push
out
outs
mov
push
xchg
push
mov
aam
add
fisubr
mov
fistp
mov
inc
cmps
mov
movs
inc
jle
dec
int3
sbb
in
cli
mov
(bad)
mov
mov
adc
in
cwde
mov
sub
stos
aaa
xchg
pop
and
sar
jg
jnp
and
out
gs
and
and
mov
ss
ret
hlt
and
iret
cmps
ds
mov
sbb
pop
fnstenv
std
sbb
(bad)
cmps
jno
addr16
das
test
mov
test
(bad)
pushf
xchg
pop
xor
leave
test
out
(bad)
lea
mov
add
push
dec
call
mov
pop
push
pop
dec
enter
push
mov
fstp
lock
cdq
mov
and
mov
cmps
gs
ret
sub
dec
push
inc
cmp
(bad)
mov
lahf
pop
xchg
in
jo
dec
outs
jmp
arpl
inc
push
(bad)
not
jecxz
in
mov
ds
lds
dec
adc
pop
adc
ins
sub
mov
pop
mov
stos
pop
jl
push
test
ret
(bad)
fiadd
xor
leave
out
sbb
shl
cmps
mov
popf
adc
lea
mov
lea
inc
int3
bound
or
fs
mov
dec
adc
mov
pop
out
cmp
add
and
jns
jge
dec
sub
imul
dec
jmp
jae
pop
sbb
retf
xchg
pop
xchg
pop
outs
pop
cmp
aam
push
add
out
or
sbb
int
icebp
je
dec
jb
das
add
fmul
or
ret
data16
imul
cmc
shl
pop
sub
sub
mov
sbb
xchg
or
gs
(bad)
ins
out
xchg
lea
and
pop
sub
push
lods
mov
inc
adc
fisttp
les
pusha
mov
sbb
shl
jg
cli
jmp
hlt
movs
mov
or
sbb
adc
call
jle
mov
or
ja
loopne
xchg
mov
xor
aaa
or
push
xor
and
jns
lods
push
outs
outs
adc
mov
lock
sbb
test
fs
dec
mov
loopne
imul
int
fwait
aaa
aad
les
cwde
outs
sub
and
idiv
loope
jmp
inc
mov
ss
mov
push
scas
or
imul
adc
mov
cmp
sbb
nop
loope
add
mov
pusha
xchg
pop
jns
mov
jp
dec
mov
imul
push
add
popf
add
dec
(bad)
test
mov
push
jo
fcom
out
test
hlt
sar
pop
(bad)
jno
adc
mov
cmp
std
xlat
xchg
inc
hlt
mov
adc
mov
sub
sbb
dec
icebp
adc
inc
mov
xchg
mov
fwait
or
pop
push
mov
pop
jl
or
les
adc
ss
add
cwde
jno
outs
cli
out
jmp
fs
call
xchg
dec
jecxz
ret
fst
cmp
xor
adc
ror
das
sub
ret
test
mov
and
adc
shl
lock
mov
sub
imul
fadd
push
stc
repz
movsx
xchg
cmps
push
pop
test
in
fs
(bad)
out
cmp
pop
jno
(bad)
dec
inc
mov
xchg
dec
(bad)
lock
jns
je
sub
xor
cwde
mov
retf
repnz
dec
mov
xor
cmp
inc
push
(bad)
and
cmp
or
push
pop
fsubr
mov
cs
ret
xor
arpl
cdq
shl
adc
jl
test
addr16
aas
enter
daa
mov
lods
sub
mov
std
pop
cwde
inc
fimul
dec
bound
test
dec
mov
dec
in
sub
jmp
add
ins
lea
test
div
jno
(bad)
loopne
inc
xor
jl
cld
and
jle
cdq
xor
fcmovbe
cmp
call
pop
mov
pop
jo
push
push
xchg
ret
jne
mov
(bad)
(bad)
mov
adc
inc
shl
pop
cmps
dec
retf
popa
xchg
mov
or
mov
jns
add
fdivr
adc
push
call
mov
inc
add
lds
(bad)
sti
popa
sbb
test
xchg
loop
pusha
xor
clc
and
(bad)
mov
inc
add
mov
ja
stc
test
cmp
cmc
sti
jno
mov
in
std
inc
xchg
sub
ins
lods
jecxz
or
setge
adc
adc
mov
stos
nop
and
push
les
outs
add
inc
(bad)
ficomp
push
or
stos
xor
sbb
sub
pop
xchg
or
push
(bad)
mov
push
pop
sbb
inc
test
adc
clc
fld
or
ret
xchg
lods
jecxz
gs
(bad)
imul
xchg
dec
lods
cmps
or
mov
pop
rcr
(bad)
out
mov
ds
pop
div
pusha
inc
cmova
pop
sti
int3
fisub
sbb
push
jae
and
lods
aad
pop
dec
pop
iret
inc
imul
dec
lods
retf
push
xchg
dec
sub
sbb
push
and
add
fstp
loope
shl
xor
adc
sahf
cmp
scas
jp
ja
sub
pop
cld
jg
jae
mov
in
push
xor
mov
aam
mov
push
sub
push
add
xor
dec
rcr
pusha
jecxz
xchg
jg
in
adc
ficom
imul
adc
movs
sbb
xchg
or
mov
ins
adc
pop
gs
and
adc
jl
(bad)
fst
jmp
dec
stos
push
mov
(bad)
cmc
jmp
pushf
(bad)
add
fsubr
inc
or
sub
xchg
pusha
(bad)
or
add
pop
imul
xchg
cmps
cmc
retf
jnp
in
je
adc
push
das
mov
shl
and
sbb
or
call
iret
sub
imul
cld
mov
in
adc
add
stc
push
popa
je
dec
cmps
push
es
retf
popa
sub
mov
movs
div
stc
pop
or
cmp
test
sbb
pop
(bad)
jg
int3
rcr
mov
daa
and
cmp
push
or
inc
or
cmp
pusha
pop
inc
pop
fisttp
push
outs
rol
sti
mov
pop
cmc
ins
or
movs
out
push
mov
dec
push
adc
push
xor
or
scas
scas
leave
jnp
(bad)
jbe
fwait
sub
(bad)
adc
cmc
(bad)
stos
dec
inc
and
push
xchg
adc
cli
icebp
cmc
leave
cli
mov
inc
ret
arpl
inc
sahf
loop
inc
out
outs
pop
loope
in
jbe
push
push
repnz
icebp
dec
out
out
adc
dec
adc
mov
imul
lds
mov
sub
push
add
sbb
push
dec
jne
adc
mov
sbb
push
jns
dec
bound
or
or
fyl2x
and
xor
or
inc
shr
retf
mov
fyl2x
in
icebp
(bad)
je
gs
mov
icebp
arpl
out
pop
dec
es
add
and
inc
btr
inc
mov
imul
mov
xchg
mov
adc
push
add
cmp
and
inc
and
jo
dec
repz
or
push
ds
push
sbb
mov
imul
mov
cmp
mov
xchg
pop
xchg
xchg
mov
imul
iret
test
test
sbb
add
pushf
cli
jo
outs
jae
xchg
in
sub
fnstenv
push
xlat
shr
das
jno
inc
jo
(bad)
mov
jmp
dec
and
cmps
push
sub
sub
mov
push
add
jecxz
jle
add
out
cs
fldenv
cmp
xchg
add
test
mov
fstp
inc
adc
pop
outs
cmp
mov
dec
movlps
(bad)
int3
arpl
lds
add
xchg
adc
lds
push
inc
icebp
xchg
int3
jns
jbe
and
xchg
popf
push
push
daa
js
pop
shr
neg
retf
push
push
fld
sbb
add
sbb
mov
pop
inc
loope
repnz
jo
fnstcw
ficom
jo
fwait
addr16
push
mov
adc
xchg
or
repz
dec
jbe
adc
sub
out
add
push
inc
inc
jmp
clc
sbb
les
int
pop
sub
lds
cmps
into
jae
or
pushf
jmp
loope
repz
stos
das
and
mov
push
dec
test
xchg
ficom
and
inc
inc
and
mov
jne
stos
ja
adc
ffree
sub
pushf
jecxz
fstp
iret
lea
lods
xor
mul
in
jb
daa
push
mov
mov
cli
add
inc
mov
mov
aad
xchg
mov
xchg
mov
mov
pop
jmp
fadd
jb
test
jmp
popf
dec
test
rcr
or
dec
cmp
addr16
xor
aas
adc
adc
leave
xchg
mov
or
xchg
adc
inc
jmp
mov
or
push
jo
xchg
mul
jmp
sbb
popa
popf
inc
mov
inc
lods
stos
cli
inc
sub
jno
xchg
mov
inc
jge
inc
pop
or
repnz
ja
push
jmp
pusha
(bad)
mov
in
je
push
(bad)
add
mov
sbb
mov
adc
xchg
aam
(bad)
lods
inc
sbb
pushf
mov
add
pop
out
or
sub
mov
icebp
and
(bad)
std
xor
hlt
fisub
sbb
xchg
inc
scas
clc
or
mov
and
je
fdivr
ficomp
or
xor
shl
xchg
mov
pop
lock
cld
add
inc
lahf
mov
ret
or
je
jp
add
jae
cmp
inc
mov
jl
xlat
adc
out
mov
popf
fwait
enter
(bad)
(bad)
xchg
or
aaa
mov
sbb
xchg
out
xor
pop
js
pop
push
stos
dec
jg
push
adc
push
jg
xchg
call
pushf
adc
cmp
movs
mov
rcr
mov
sub
pop
lahf
xchg
mov
xchg
arpl
ret
cs
push
inc
xchg
push
rcr
inc
out
fbstp
cmp
add
mov
ror
or
push
retf
and
xchg
(bad)
mov
ss
retf
(bad)
fst
inc
mov
dec
adc
adc
add
ret
jle
(bad)
push
and
pop
enter
clc
call
ret
cmp
clc
push
sbb
push
push
xchg
push
aas
adc
lea
inc
jge
lds
jle
cmp
(bad)
outs
sbb
bts
mov
push
shl
jno
mov
push
ror
inc
mov
push
cmps
sub
mov
iret
lds
fs
cwde
mov
adc
into
stos
ret
aaa
push
jmp
xchg
stc
push
(bad)
pop
jns
and
xor
test
hlt
imul
cmp
retf
repnz
and
push
int
les
repnz
and
fcomp
in
dec
jmp
jp
in
mov
out
adc
hlt
icebp
pause
out
shl
pop
es
xor
repz
std
cmp
xchg
call
addr16
cmp
shr
fs
or
inc
in
add
scas
mov
or
mov
pop
inc
repz
scas
hlt
jl
inc
mov
out
and
ja
dec
xor
vcvtss2sd
js
aad
mov
stc
mov
jbe
sub
and
adc
popf
dec
mov
cmps
jo
test
xor
ror
add
mov
mov
es
aaa
and
imul
sbb
xchg
mov
xor
adc
xchg
xchg
add
leave
inc
stos
jbe
(bad)
gs
ror
push
retf
movs
fwait
sbb
loopne
adc
jl
je
bound
dec
arpl
jb
adc
add
jno
je
lahf
scas
popf
loopne
imul
push
movs
(bad)
jl
cs
xchg
imul
gs
scas
inc
pop
or
jmp
fisttp
add
xor
ret
add
pop
sub
int
test
aaa
cmps
stc
sbb
dec
adc
fsubr
inc
push
cdq
movs
cwde
(bad)
dec
mov
repz
sbb
adc
or
fwait
jge
or
lahf
enter
or
das
repnz
pop
stos
pop
xor
jb
and
push
xchg
jl
fmul
sbb
add
mov
sbb
pop
ds
packsswb
movs
jmp
xchg
sub
call
dec
push
jae
inc
popa
fild
imul
adc
and
xor
or
jl
xchg
rcr
inc
in
repnz
repz
dec
mov
push
push
movs
clc
and
jno
or
xchg
sbb
repnz
pop
aam
out
jge
(bad)
stc
aam
addr16
push
mov
stc
fwait
xchg
ss
dec
inc
test
and
adc
enter
out
sti
pop
aad
out
aaa
mov
pop
mov
cli
lock
cmp
pop
lods
cmp
add
fcmovb
out
dec
(bad)
adc
shl
push
fstp
adc
arpl
movs
aad
popa
or
pop
mov
mov
xchg
push
arpl
dec
lock
pop
loope
cmp
ins
arpl
daa
dec
mov
jg
mov
stos
cmp
jb
sub
imul
push
and
imul
popa
daa
mov
jae
dec
xor
popa
adc
(bad)
jnp
lahf
sbb
movs
sub
and
xor
xor
and
leave
jp
add
in
adc
cmp
scas
imul
xor
pop
movs
push
dec
les
xchg
dec
pusha
jl
pop
test
mov
jo
sar
std
in
fidivr
ja
leave
jp
ss
add
pop
push
jne
xor
add
cwde
pop
cmp
outs
cmp
int3
cwde
xchg
mov
sti
fucomip
pop
popa
fisttp
jmp
sbb
fld
(bad)
push
cmp
lahf
lods
jbe
jne
pop
inc
(bad)
lds
mov
xchg
std
(bad)
dec
add
inc
inc
xor
in
aam
or
arpl
inc
xchg
idiv
mov
pop
mov
mov
cs
into
(bad)
out
mov
div
mov
repnz
mov
jecxz
in
xchg
add
fadd
inc
mov
add
or
or
inc
push
sbb
sub
pop
arpl
aaa
fisubr
xlat
adc
cdq
loope
out
push
mov
cdq
mov
mov
rcr
inc
fs
in
(bad)
repnz
std
dec
shr
mov
sub
mov
movs
xchg
arpl
jmp
or
pop
push
dec
mov
ret
ret
mov
inc
xchg
add
xor
xor
(bad)
call
push
push
pop
jns
icebp
adc
repz
jo
cmp
push
sub
pop
sbb
mov
shl
movs
dec
divps
pusha
(bad)
sbb
xchg
(bad)
imul
mov
scas
mov
ins
sbb
jae
shl
sti
mov
lock
sbb
push
lods
test
popf
mov
mov
popf
fistp
dec
xchg
ret
adc
mov
mov
clc
scas
(bad)
cld
(bad)
or
gs
mov
inc
sbb
jmp
jmp
cld
cmp
fwait
pop
test
mov
pop
dec
xor
loop
cdq
enter
jne
pop
fmul
das
adc
add
sbb
or
or
fsub
dec
test
in
test
retf
dec
mov
push
and
sub
cmp
jns
das
dec
mov
xor
pop
adc
mov
or
in
sbb
sbb
xor
push
test
cmps
out
repnz
push
jae
cmp
test
cmps
mov
xchg
leave
into
je
retf
leave
push
add
aam
stos
lock
iret
sbb
data16
cmp
stc
lods
lock
es
sbb
add
and
retf
shl
inc
loopne
hlt
(bad)
aad
out
xchg
lods
dec
mov
rol
(bad)
popa
popf
sti
ret
ds
xor
adc
je
(bad)
and
inc
dec
cwde
add
daa
cmp
jmp
popf
cmp
rcl
fcom
loopne
dec
into
mov
jae
retf
outs
mov
inc
js
ins
aaa
pop
ds
jns
lea
loope
addr16
mov
test
push
push
add
xchg
mov
add
movs
pop
fidivr
add
cli
sub
fwait
pop
pop
test
sub
aad
test
ficomp
sbb
pop
aad
and
mov
in
xchg
lock
sub
imul
pusha
sbb
pop
sbb
loop
cmp
int3
fst
inc
loopne
or
inc
ins
sbb
clc
inc
push
fld
pusha
nop
call
dec
out
sub
sbb
ret
adc
xchg
cmc
cld
push
loope
mov
sub
push
ret
loopne
pop
nop
fisttp
mov
sub
xchg
sbb
sub
call
das
push
cmp
jmp
add
ret
mov
loopne
mov
or
imul
fdecstp
pushf
stos
fld
in
ret
sub
jp
adc
jno
ins
xor
ins
inc
mov
cmps
mov
neg
into
push
dec
cmp
inc
sbb
dec
das
adc
inc
mov
inc
pop
in
ins
mov
(bad)
mov
bound
(bad)
adc
std
pop
adc
pop
sbb
push
idiv
imul
sub
mov
clc
enter
leave
jge
sbb
sub
ja
loop
dec
pop
adc
in
ja
aam
test
int
pop
cmp
pop
pop
jmp
dec
mov
xor
aam
adc
gs
js
or
jbe
push
dec
fcmovne
imul
inc
adc
push
or
in
jbe
add
adc
mov
mov
fsubr
jno
hlt
fdiv
nop
xchg
jle
sub
stos
fnstenv
add
push
mov
xchg
ret
sub
imul
fst
in
cld
push
pop
lds
nop
dec
mov
jnp
lods
es
xchg
and
adc
movs
mov
fist
cwde
inc
daa
cwde
inc
mov
dec
fld
push
mov
repz
mov
inc
lahf
adc
inc
enter
out
inc
cli
aam
je
call
fs
(bad)
clc
push
nop
in
sub
rcr
arpl
es
add
jne
cmp
movs
dec
mov
add
push
fist
adc
cli
push
cmp
xor
les
mov
pop
scas
ss
nop
int3
in
fiadd
dec
loop
test
xor
push
mov
mov
es
or
jbe
xchg
(bad)
in
adc
jbe
mov
inc
xor
lock
sar
shl
xchg
jge
mov
push
pop
fcmovnb
mov
fwait
test
fnsave
add
sbb
adc
test
hlt
push
setl
clc
mov
xchg
sbb
mov
jecxz
cmp
test
and
lock
push
test
mov
in
xor
jae
test
lods
lea
mov
mov
push
jbe
mov
mov
and
out
imul
and
in
cdq
ss
das
adc
rcr
leave
jne
iret
bound
js
dec
test
cmp
push
jl
popa
sti
dec
inc
sbb
stos
(bad)
or
cmp
(bad)
shl
fisttp
and
jmp
mov
mov
sub
sbb
loopne
out
in
es
outs
sbb
mov
xchg
int3
xchg
or
stos
xor
dec
fs
popa
cmp
scas
jmp
jo
inc
sbb
fisttp
dec
pop
fs
fisttp
jp
adc
outs
mov
mov
aaa
pop
ds
dec
and
inc
sub
repz
out
std
mov
das
and
push
(bad)
inc
push
cmp
pop
loope
fcomp
scas
dec
mov
jmp
test
adc
adc
rol
data16
mov
mul
xor
cwde
inc
mov
jns
jl
push
addr16
push
in
mov
add
add
repz
mov
idiv
add
cs
jge
dec
loopne
sbb
retf
cwde
and
dec
push
cmc
inc
mov
mov
xchg
cli
dec
dec
or
lea
repz
cmp
aad
inc
xchg
sub
add
popf
iret
sti
xor
int3
repz
adc
addr16
jb
jge
loope
xor
sub
stc
ds
sbb
ja
(bad)
cdq
int3
or
cmp
stc
jo
inc
addr16
imul
pop
add
cmp
loope
cmps
xchg
mov
adc
adc
pop
outs
pushf
mov
shr
pmuludq
in
adc
adc
nop
dec
xchg
dec
aaa
test
imul
nop
fs
or
and
mov
lods
pop
xchg
mov
leave
and
dec
pop
mov
fimul
mov
ret
pop
mov
add
mov
lock
inc
inc
lods
imul
adc
cli
imul
push
jo
pop
daa
mov
mov
sub
pop
fld
cmp
and
mov
and
dec
push
sub
enter
or
fistp
dec
sbb
icebp
movs
inc
cmp
shl
int3
shl
(bad)
mov
sbb
(bad)
jmp
ins
cdq
gs
jb
out
sub
push
dec
mov
xor
dec
ret
adc
push
aas
lods
or
clc
daa
je
imul
or
ret
cmc
ds
xchg
neg
or
ffreep
std
jnp
arpl
add
cmp
push
mov
pop
(bad)
fs
jmp
or
arpl
scas
dec
pop
sub
xchg
mov
jno
sbb
std
sti
push
movs
repnz
stos
sar
test
sbb
jl
fsub
stc
js
pop
pop
sub
jge
xlat
jae
jb
or
jmp
inc
(bad)
outs
fcmovb
arpl
lods
or
adc
mov
and
lods
cmp
shr
jge
sbb
shl
sbb
xlat
or
outs
xor
ror
add
or
mov
lods
and
jmp
stos
pop
push
jbe
stc
out
dec
add
or
scas
inc
pop
ds
adc
ins
sub
xchg
sbb
dec
lods
into
mov
jp
fnstcw
in
(bad)
cmps
in
popa
push
sbb
push
(bad)
cmps
xchg
add
inc
fsub
pop
in
cmp
jno
fnsave
pop
pop
xor
push
push
movs
int3
rcl
mov
mov
inc
add
int3
mov
mov
and
jb
push
lods
xchg
push
sar
mul
mov
inc
pop
fdiv
pop
adc
jmp
inc
or
lock
jecxz
cmp
cmp
add
push
xor
pop
push
mov
and
arpl
out
or
jmp
rol
mov
scas
pop
pop
push
sub
jge
sub
adc
mov
icebp
xor
test
and
mov
mov
sub
dec
cmc
xchg
shr
ja
pop
jecxz
mov
or
push
fcmovnu
mov
inc
dec
sub
pop
pusha
test
arpl
mov
pop
pop
scas
xchg
je
adc
enter
sub
fimul
fidivr
loope
mov
push
popa
arpl
jb
pop
pop
xor
dec
aam
outs
pop
gs
data16
xor
mov
or
jnp
in
mov
add
movs
loope
out
leave
cmp
and
pop
gs
jae
push
and
ret
aam
mov
pop
xchg
lods
and
jmp
(bad)
loopne
into
fwait
popa
jns
aam
mov
mov
or
rcl
pop
cmp
pop
ror
or
pop
fcom
jmp
mov
jmp
idiv
nop
(bad)
push
jbe
in
mov
or
scas
xor
aas
rcl
aam
and
outs
or
fld
in
adc
or
adc
je
movs
loop
jmp
test
xchg
sub
and
out
cmp
xchg
(bad)
pop
inc
sub
xor
inc
cld
out
xor
ins
arpl
arpl
jmp
test
cmp
cmp
cmp
push
sbb
movs
cld
push
fmul
pop
ret
mov
out
cwde
fdiv
sub
shl
pmullw
loopne
xchg
retf
cmps
inc
bound
pop
inc
enter
cmp
(bad)
fwait
cmp
dec
sti
sti
test
or
icebp
mov
push
mov
inc
fsubr
inc
(bad)
int3
loope
inc
push
mov
push
or
je
jne
(bad)
mov
jp
aad
lds
lds
lea
(bad)
xor
add
jmp
xor
mov
jg
or
shl
pop
add
daa
jo
or
xor
loop
stos
dec
pop
icebp
fistp
adc
test
faddp
jb
jg
je
xor
pop
inc
dec
(bad)
fwait
xor
in
xchg
sub
push
xor
mov
pop
pushf
out
and
shl
pop
call
jnp
mov
sbb
clc
mov
xor
test
adc
mov
mov
adc
mov
call
mov
loopne
dec
and
push
test
xor
stos
push
stos
mov
daa
add
mov
mov
push
xchg
aaa
stos
int3
pop
into
mov
ins
jp
lods
xchg
jne
inc
repnz
imul
mov
adc
cld
(bad)
jne
pop
push
cmc
test
(bad)
clc
and
movs
sub
xor
rol
xor
out
sti
push
dec
and
loopne
pop
lahf
mov
mov
jle
xchg
test
sub
pusha
call
or
es
adc
mov
nop
xchg
dec
adc
mov
xchg
mov
mov
shr
rol
aad
inc
cmp
sub
add
jmp
rcr
push
add
aad
jns
mov
xor
lahf
movs
push
sub
lods
movs
mov
sbb
pop
cli
lahf
fist
add
aad
jmp
sub
test
cdq
sub
fmul
and
and
mov
int3
inc
and
sub
push
lods
lahf
mov
idiv
cs
dec
or
dec
retf
and
inc
mov
mov
inc
push
popa
leave
je
rol
test
aad
popf
das
cmc
out
in
rcl
sub
test
outs
jl
dec
call
mov
xor
ja
lds
sbb
push
shl
aad
sub
sub
cli
dec
mov
ins
loopne
add
or
push
xchg
scas
sar
mov
ret
dec
enter
adc
mov
xchg
mov
dec
imul
mul
or
imul
iret
dec
ins
aad
enter
push
add
sar
sbb
inc
cmp
sub
pop
push
mov
sbb
jmp
test
jl
or
(bad)
xchg
icebp
int3
gs
cli
out
call
adc
std
ja
push
lds
and
ja
cmc
jns
lods
adc
retf
mov
popa
retf
push
mov
dec
call
fwait
sub
xor
fwait
mov
in
cmps
or
and
push
out
lods
jns
push
aas
sbb
(bad)
cld
cmc
js
fcom
mov
mov
js
popf
loopne
loope
add
mov
jo
pop
add
pop
int
add
mov
dec
xor
sbb
xchg
mov
fsubr
mov
mov
pop
aaa
sbb
fsub
movs
add
cmp
push
ja
xlat
cmp
int
dec
lods
loope
in
fimul
pusha
push
push
inc
aas
pop
test
mov
rol
add
push
sbb
mov
push
imul
call
retf
xchg
xor
ins
les
stos
rcl
xor
dec
or
adc
retf
add
cmp
sub
fild
out
jmp
lahf
aad
xchg
data16
(bad)
mov
jno
lock
xchg
cmp
dec
leave
mov
cmp
out
cs
xor
ss
(bad)
cmp
(bad)
sbb
cdq
and
scas
(bad)
iret
repz
shl
stc
jmp
ins
out
xchg
add
ret
and
xor
shr
es
push
in
daa
xchg
jmp
sbb
ror
jl
cmc
xchg
sbb
movs
mov
in
pop
leave
icebp
xchg
mov
sbb
fldcw
hlt
into
fld
lock
or
popa
or
test
adc
(bad)
fdivr
daa
add
or
mov
adc
mov
push
ds
vunpcklps
outs
jne
pop
cmps
mov
dec
std
jg
adc
movs
retf
leave
fucomi
jmp
pushf
xchg
add
push
mov
or
xor
cmp
mov
and
and
mov
jl
fist
ror
popf
daa
scas
dec
loopne
jae
arpl
xchg
mov
das
inc
sub
mov
ds
in
jecxz
shr
out
loop
jne
inc
lods
lods
pop
adc
dec
imul
les
sbb
xchg
and
cdq
add
push
pop
loope
jg
cmp
lock
retf
jnp
stos
(bad)
ds
in
loopne
popa
inc
aad
int3
test
jbe
cmc
fs
out
(bad)
shl
inc
xchg
sbb
test
sti
js
lds
in
fld
or
dec
fidivr
icebp
xlat
cmp
cmc
scas
push
jg
mov
push
mov
adc
icebp
ret
cld
sub
bound
adc
dec
std
lahf
dec
adc
mov
jg
ja
movs
enter
repz
clc
sub
rcr
in
inc
aaa
cmp
int3
ins
fsubr
jae
pop
nop
xor
mov
test
arpl
pop
adc
sbb
push
fadd
adc
cmp
rol
jl
in
xor
pop
shl
sbb
pushf
mov
fmul
movs
add
bndldx
push
outs
inc
call
mov
into
xchg
loop
sbb
scas
fs
leave
push
mov
test
inc
test
aaa
add
dec
fbld
mov
push
leave
pop
dec
movs
adc
lock
inc
sbb
aam
jl
ss
fild
xchg
xchg
xchg
mov
ret
mov
pop
lock
add
xadd
jne
scas
cmovns
mov
aad
enter
and
mov
inc
pop
cli
jle
fisttp
cli
fisub
xor
das
les
sub
xlat
retf
adc
call
stc
or
je
ret
cmps
sahf
push
mov
pop
add
das
push
ss
pop
mov
mov
jbe
xor
xchg
clc
in
scas
xchg
fild
lods
xchg
pop
and
sbb
ror
fsub
test
mov
xor
mov
cmc
inc
sbb
ins
loop
pop
and
pop
cmps
icebp
leave
test
add
pop
xor
xchg
pop
inc
fisttp
sub
fadd
push
push
cld
out
add
adc
mov
test
xchg
hlt
push
sahf
add
sti
push
mov
jg
(bad)
(bad)
cs
mov
jno
fimul
push
in
mov
dec
daa
xor
pop
push
add
fs
xor
sub
outs
mov
out
stos
jge
inc
cmp
adc
jno
test
(bad)
add
call
push
fnstenv
xor
iret
retf
jecxz
nop
jmp
test
add
mov
dec
jo
sub
lods
sbb
out
mov
xor
ret
out
push
pop
add
and
es
ror
add
stos
rcr
cmps
add
xchg
stos
cmp
pop
clc
call
inc
iret
in
sub
sbb
sub
inc
dec
mov
add
dec
dec
cs
mov
xor
(bad)
or
sbb
xchg
dec
es
loop
repz
xor
sub
jmp
jge
movs
push
add
inc
movs
cdq
adc
scas
bound
out
cdq
jl
mov
xlat
fst
pop
jb
stos
pop
std
test
pop
xchg
(bad)
cmp
stc
ins
mov
mov
loopne
jmp
aas
inc
scas
movs
jno
xor
daa
jnp
dec
pop
mov
mov
stos
aam
xchg
in
mov
cwde
ins
jbe
sbb
or
mov
jo
lahf
pusha
lods
popf
hlt
loopne
jmp
rol
aam
pop
push
sbb
adc
pop
repnz
push
not
jmp
popa
clc
mov
pop
popf
pusha
and
fcom
cmp
xchg
arpl
int3
fldenv
not
fbld
iret
sbb
lods
cmps
cwde
mov
mov
jl
lahf
mov
out
cmp
(bad)
cli
mov
sub
sub
jbe
lock
xchg
int
mov
popf
cmps
xor
dec
in
push
jge
jo
pop
mov
cdq
aam
cmp
lods
jl
mov
cmp
aaa
or
inc
test
nop
sbb
sub
xchg
mov
lods
loop
push
mov
and
mov
adc
ficom
aas
pop
mov
enter
mov
adc
stos
adc
jns
add
dec
js
mov
(bad)
pop
or
or
add
arpl
cmp
shr
ins
arpl
add
push
pop
dec
push
mov
ror
dec
call
push
push
xchg
test
test
fsubr
push
clc
in
mov
pop
jecxz
adc
enter
cmps
mov
add
sbb
inc
dec
inc
ret
out
das
xor
xchg
cmps
in
lds
call
fsub
imul
or
mov
dec
and
jmp
out
xor
int3
and
dec
gs
(bad)
mov
jae
in
(bad)
cdq
pop
pop
bound
push
enter
das
xor
sbb
mov
pop
js
(bad)
shl
dec
das
push
jbe
push
sbb
jecxz
out
and
mov
jge
mov
dec
mov
and
mov
fiadd
ror
cmp
jg
mov
mov
jnp
mov
cld
adc
fisub
fincstp
xor
sub
sbb
pop
icebp
gs
mov
cdq
aaa
mov
in
cdq
movs
(bad)
mov
jmp
sti
push
(bad)
int
sub
xchg
daa
push
xchg
stos
or
imul
(bad)
push
xchg
sub
pop
popa
pop
jmp
dec
repz
cmp
adc
mov
and
inc
push
repz
test
lods
add
push
ret
stos
add
stos
int3
popa
or
sub
and
sbb
inc
pop
(bad)
and
or
aad
ret
xchg
(bad)
cwde
adc
clc
sub
mov
lea
cmp
jo
mov
les
mul
cmps
pop
(bad)
pop
mov
mov
(bad)
mov
dec
and
sub
or
mov
movs
or
adc
es
dec
test
sbb
jbe
mov
mov
cmp
imul
cmp
sbb
aad
push
mov
retf
sbb
mov
cmp
add
inc
mov
and
arpl
mov
mov
mov
(bad)
and
pop
adc
adc
(bad)
dec
or
fisubr
rcl
not
bound
int3
inc
mov
js
sbb
mov
jmp
pop
(bad)
ret
add
sar
jecxz
mov
mov
mov
js
pop
push
add
push
add
je
sub
out
les
inc
push
push
push
jnp
mov
adc
int3
push
mov
test
push
dec
add
shr
adc
push
dec
pop
or
inc
push
jmp
push
mov
jecxz
mov
scas
sar
inc
or
(bad)
retf
out
nop
dec
clc
xor
or
out
dec
pop
inc
out
shr
scas
popf
lds
inc
imul
sub
cdq
je
mov
popa
(bad)
fisub
or
(bad)
jp
cmp
xchg
add
test
sidtd
retf
les
mov
sub
and
dec
xchg
fwait
arpl
addr16
(bad)
movs
xchg
sar
lahf
test
xchg
repnz
cdq
aam
dec
sub
jo
mov
aad
call
shr
aaa
int
into
ja
pushf
test
pop
xlat
(bad)
jo
cmp
pop
retf
push
xchg
pop
inc
movs
adc
ins
(bad)
lock
adc
add
pop
out
or
mov
aaa
hlt
adc
xor
mov
jmp
mov
lock
sti
pop
movd
mov
add
cmp
fbld
pop
shr
jecxz
rcl
sbb
or
mov
inc
xor
ffreep
cs
mov
leave
push
clc
leave
mov
push
retf
jb
jmp
add
mov
fcom
cmp
fwait
jge
adc
xor
fwait
sbb
aad
repnz
xor
pop
popa
test
add
cli
jge
dec
inc
clc
shr
mov
lods
dec
mov
call
rcl
leave
xchg
jno
(bad)
mov
in
lock
ret
add
std
ret
in
xchg
stos
repnz
(bad)
repz
fsubr
stos
or
into
sahf
iret
push
fdiv
lds
dec
aas
push
xor
retf
xor
mov
jne
push
xchg
push
push
dec
inc
mov
xchg
je
(bad)
jecxz
mov
mov
pop
pop
xor
fiadd
adc
fucom
aaa
mov
cmc
and
push
test
shl
shl
sub
test
jne
in
inc
push
sub
sar
pusha
mov
adc
and
mov
xor
push
int3
lods
arpl
pop
pop
bound
iret
jmp
fist
movs
sub
xchg
xchg
lds
repz
cld
call
push
imul
test
fstp
pop
and
(bad)
pop
adc
scas
shl
sub
adc
mov
aas
test
pop
xchg
inc
out
mov
mov
(bad)
mov
call
or
out
std
jge
sub
mov
mov
in
sub
aaa
jle
xor
test
push
in
jmp
aam
loopne
dec
js
scas
mov
imul
cmp
cmp
imul
inc
or
push
jmp
arpl
lock
cmps
pop
xchg
xor
add
or
ins
(bad)
fwait
lock
scas
pushf
bound
adc
cmc
and
mov
jl
mov
ins
inc
scas
push
loopne
adc
mov
mov
push
add
leave
pop
jmp
add
jge
xchg
jne
add
fadd
dec
adc
xlat
clc
in
cwde
mov
cmp
inc
push
mov
stc
push
or
(bad)
mov
inc
and
test
pop
mov
mov
jb
fimul
add
jp
cdq
fdivr
jl
or
fxch
xor
mov
cmp
xchg
(bad)
cmp
ds
pusha
dec
js
dec
stos
add
test
mov
mov
cmps
inc
xchg
mov
outs
jbe
mov
gs
pop
push
test
jbe
jl
mov
daa
arpl
jle
out
pop
lahf
sbb
mov
cmp
xor
push
sahf
dec
push
lods
jmp
mov
sbb
push
shl
(bad)
push
lds
test
pop
cmp
enter
je
int3
mov
aas
div
sbb
sub
int3
mov
and
mov
mov
pop
pop
dec
out
jmp
jge
mov
cmp
xacquire
repz
cmp
inc
hlt
add
(bad)
fwait
(bad)
scas
and
lds
inc
popa
mov
add
jp
aad
std
inc
cmp
lods
inc
mov
xor
fiadd
inc
inc
(bad)
popf
mov
and
inc
leave
or
sbb
xchg
cdq
(bad)
jl
ficomp
jmp
jmp
mov
ret
fdivr
push
out
xor
scas
add
icebp
add
inc
adc
mov
repnz
and
cld
xchg
dec
into
mov
xlat
in
mov
lods
mov
popa
sbb
mov
movs
mov
imul
xchg
outs
int3
jns
cmp
pusha
mov
ins
out
cmc
inc
xchg
add
xchg
hlt
and
jle
ins
data16
cli
ja
stos
enter
in
xchg
ret
and
sbb
sbb
dec
(bad)
mov
dec
stc
imul
jecxz
sbb
test
jns
xor
lods
add
nop
add
and
lea
adc
imul
mov
lea
(bad)
or
into
xchg
rcl
adc
add
cmp
aas
pusha
or
inc
aad
dec
pop
xchg
lahf
push
push
in
(bad)
add
bound
adc
sub
or
or
daa
sbb
inc
xchg
call
lds
push
cmp
ss
dec
push
das
fwait
aad
(bad)
xchg
popf
pop
xlat
and
mov
xchg
adc
inc
jnp
in
adc
and
add
jp
inc
call
stos
ret
pop
mov
and
sbb
cwde
xor
jbe
mov
out
sbb
int
clc
(bad)
and
pop
ins
inc
lock
xchg
mov
fcomp
pop
cmp
dec
mov
or
cmp
jp
fstp
jae
jo
inc
and
adc
push
lods
jmp
mov
aaa
mov
lahf
pop
and
arpl
sbb
(bad)
adc
mov
in
mov
dec
test
inc
(bad)
and
or
nop
or
add
imul
adc
mov
ins
pop
repnz
rcl
cmps
xor
jnp
mov
xchg
mov
mov
xchg
push
push
cwde
or
xchg
loopne
cmp
and
jne
cmp
rcl
stc
shl
ins
mov
mov
ret
popf
bound
xlat
mov
fdivr
(bad)
push
dec
ror
mov
test
jne
imul
pop
shr
inc
(bad)
fwait
jmp
jmp
dec
ror
mov
inc
fs
add
jge
loopne
bound
(bad)
test
movs
test
mov
cli
pop
lods
and
jnp
inc
jle
clc
pop
xchg
or
test
mov
sub
aad
cwde
or
fwait
add
sub
sti
sub
jo
pop
ds
mov
mov
fld
jne
ror
adc
js
and
pusha
lahf
push
cmp
je
add
aad
sub
cmp
je
test
into
xchg
add
rcr
outs
loop
sub
jmp
je
test
mov
iret
or
dec
(bad)
jge
movs
cmp
inc
jae
dec
sub
jmp
adc
xchg
mov
cmps
xchg
rol
xchg
popf
popf
inc
fwait
shl
sahf
sahf
ins
jmp
mov
cmc
mov
xor
dec
sbb
jp
lods
sbb
fst
push
(bad)
hlt
adc
inc
xchg
adc
pop
out
test
xor
bound
or
jmp
inc
sbb
daa
out
push
cdq
mov
xor
xchg
jle
push
aam
lock
call
test
pop
xor
mov
repnz
fs
ret
inc
movs
inc
and
cwde
scas
mov
out
mov
in
(bad)
lahf
mov
jg
mov
mov
or
pop
pop
(bad)
pmaxub
aas
xchg
jns
pop
mov
leave
mul
les
and
jge
(bad)
(bad)
mov
or
add
add
mov
push
mov
jmp
data16
push
sbb
nop
outs
aam
cmps
in
xchg
inc
loop
ret
inc
repnz
pop
jae
add
jo
sub
push
xor
mov
jg
dec
cli
cld
(bad)
(bad)
mov
iret
pop
nop
xor
xor
push
rcr
test
add
mov
dec
inc
add
or
dec
pop
aaa
pop
(bad)
sti
pop
je
dec
inc
xor
cmp
cmp
push
add
xchg
pop
cmps
xchg
xchg
xchg
lods
sti
mov
pusha
jno
test
imul
call
jb
rcr
xchg
fs
dec
or
sub
push
dec
sti
cmp
iret
jbe
mov
pop
mov
arpl
cwde
in
mov
ficom
scas
jb
fs
sbb
jle
xor
mov
mov
sub
fdivr
xchg
pop
or
pop
inc
call
fmul
push
and
ja
pop
divps
cmps
in
jne
or
aad
jnp
inc
loop
in
pop
xchg
cmp
cs
push
jmp
sub
xchg
retf
lea
test
mov
repz
adc
inc
add
scas
popa
loope
cmps
and
test
in
pop
dec
xor
shl
pop
je
nop
xchg
ja
pop
scas
dec
mov
jg
retf
les
push
xchg
movs
nop
ror
mov
xor
daa
int3
mov
inc
pop
std
(bad)
push
xchg
aad
repz
dec
and
xor
or
ins
cmps
dec
int3
data16
popf
lods
pop
sbb
adc
pop
out
(bad)
pop
loopne
dec
std
adc
cli
lds
add
pop
pop
(bad)
test
mov
fidiv
inc
ins
cdq
adc
inc
mov
lds
gs
movs
sbb
adc
xor
mov
push
adc
popf
xlat
pop
shl
sahf
arpl
add
adc
les
jge
dec
xor
(bad)
jno
push
mov
add
push
cmp
shl
iret
fwait
lods
jae
push
dec
lods
adc
cmc
fistp
jle
push
xor
cmp
aam
in
pushf
sub
iret
xor
xor
pop
dec
rcl
push
or
mov
ins
jno
bound
sub
cmps
mov
movs
test
adc
or
dec
mov
popf
mov
ret
pop
mov
int
clc
fsubr
mov
call
imul
jno
lods
ds
out
or
jns
imul
add
icebp
sti
sub
xchg
adc
(bad)
xchg
xor
and
cwde
jmp
cmp
mov
sti
aam
dec
mov
xchg
adc
pop
rcr
cli
shl
inc
or
inc
or
sbb
push
or
adc
push
jne
mov
stos
mov
fisttp
int3
add
adc
shl
int
pop
add
mov
lods
sti
jbe
jne
inc
inc
dec
sahf
sbb
fdivp
push
or
xchg
sub
mov
mov
js
push
or
cmp
pop
xchg
div
or
adc
(bad)
lock
rol
bound
xchg
xchg
sub
push
loop
inc
xlat
nop
call
xor
std
adc
cmp
aaa
out
jne
fwait
(bad)
push
ss
ror
cmc
sbb
ins
retf
std
xchg
push
adc
mov
fs
mov
out
retf
sub
pop
inc
in
imul
cmp
sub
dec
fs
hlt
mov
mov
fild
pop
in
or
mov
inc
sub
daa
call
call
inc
and
loopne
push
call
imul
sub
push
adc
aam
arpl
in
leave
dec
sahf
test
pop
pusha
cs
mov
loop
cmp
adc
outs
int
pop
push
bound
call
pop
xor
popf
dec
(bad)
jne
mov
inc
xchg
je
add
fnstcw
mov
out
dec
enter
xchg
lods
sub
popa
adc
test
fmulp
sub
ins
das
lock
(bad)
fisub
xor
movs
ficom
out
jne
pop
fisttp
test
and
ins
aas
push
std
mov
(bad)
movs
lock
rol
xchg
push
clc
(bad)
fdiv
sbb
lds
mov
in
push
retf
sahf
cmp
jmp
out
push
dec
pop
test
mov
cdq
stos
stc
(bad)
mov
(bad)
cmp
sbb
sub
test
push
iret
mov
cmp
jge
mov
inc
retf
ins
int
jb
call
lods
mov
loope
push
popa
ds
adc
adc
mov
lock
div
call
sbb
push
(bad)
mov
sub
ret
sbb
rol
sub
repz
pop
jae
xchg
fsubr
dec
(bad)
mov
xor
jecxz
or
lahf
sbb
hlt
push
scas
sbb
dec
xchg
mov
retf
les
(bad)
out
div
gs
loope
cmc
xor
add
retf
xchg
out
mov
into
(bad)
jmp
sub
mov
dec
or
push
and
mov
je
ret
dec
jno
je
aas
lea
test
std
jbe
xor
mov
cmps
jg
fidiv
inc
cmps
or
fisubr
loop
sbb
or
jbe
adc
sar
ret
sub
bound
sbb
(bad)
loop
inc
jno
enterw
sub
dec
arpl
inc
mov
enter
fmul
sub
ins
dec
lods
inc
push
sub
(bad)
jle
pop
cmp
jmp
stos
arpl
push
or
push
fild
sub
dec
iret
cld
loop
push
call
or
ins
stos
add
loop
pop
imul
ficomp
daa
and
or
jg
dec
(bad)
leave
push
xor
inc
push
inc
jno
push
sbb
jnp
imul
jg
or
mov
mov
cs
rcr
jmp
push
fadd
cmc
aaa
inc
xchg
sbb
imul
adc
cmp
test
fst
shr
sbb
gs
movs
daa
push
inc
adc
add
call
mov
ret
dec
mov
and
xor
(bad)
cmp
fadd
(bad)
xchg
fistp
aas
out
xor
mov
ss
or
adc
in
cli
out
push
sbb
(bad)
cmp
xor
jne
mov
xor
test
sub
inc
sahf
jge
jbe
daa
mov
cmp
(bad)
sahf
ins
or
fisttp
rol
es
sbb
inc
mov
inc
and
lahf
jp
mov
das
pusha
jle
cli
mov
lock
fist
jnp
xchg
out
into
int
jb
mov
imul
lea
rcl
add
dec
enter
sbb
pop
sub
xchg
faddp
pop
fdivr
pop
loop
or
arpl
cmp
inc
dec
push
sbb
jle
sub
inc
push
adc
mov
and
retf
clc
inc
call
(bad)
push
ss
push
xor
pop
push
int
and
icebp
jnp
shl
push
in
addr16
(bad)
pop
inc
aaa
sbb
pop
mov
pop
repz
int
(bad)
js
rcr
cmc
inc
mov
cmp
jecxz
imul
hlt
jmp
or
xor
int3
cmp
cmp
push
pop
adc
xchg
cmp
add
inc
jno
mov
sub
inc
popf
sbb
xchg
jp
jnp
std
xor
push
stos
push
adc
pop
inc
lods
jmp
mov
ins
stc
or
cdq
aad
pop
push
stos
mov
xor
or
sub
fistp
lahf
mov
enter
cmps
outs
ret
push
xchg
cmps
fistp
aaa
fs
and
gs
leave
jl
jmp
fsubr
js
out
out
xchg
pushw
dec
int
sbb
call
test
pop
adc
fwait
cmp
test
add
out
loop
loopne
(bad)
cmp
arpl
cld
add
sub
inc
and
adc
jg
jmp
dec
clc
xor
outs
and
sbb
and
sbb
rcl
mov
cdq
pop
or
sub
xchg
outs
aaa
xchg
sbb
dec
add
fimul
mov
dec
sar
cmp
xlat
std
push
pop
lea
jns
dec
movs
call
mov
out
(bad)
(bad)
or
aaa
push
inc
mov
cmp
jo
int3
in
cmp
lods
and
(bad)
enter
mov
or
pop
cmps
cmp
jnp
pop
fild
out
ss
cmp
mov
cmp
cmc
push
in
cmps
outs
or
out
sub
lods
cli
xor
add
(bad)
test
aam
inc
addr16
xchg
push
or
inc
test
cli
in
mov
lock
inc
cmc
inc
hlt
push
in
inc
sub
loopne
sbb
cmps
adc
and
idiv
cmps
lods
push
add
mov
adc
add
add
cmp
data16
mov
adc
mov
or
loopne
cmp
xor
adc
repz
es
call
add
sub
mov
push
fs
movs
call
cmp
mov
rol
aad
jle
call
push
ret
cmp
mov
adc
lods
xchg
xchg
add
call
mov
call
dec
mov
cld
mov
xor
jbe
mov
xor
mov
sub
dec
out
adc
inc
cmps
hlt
cld
mov
sbb
push
mov
mov
xor
ror
dec
or
ja
mov
sub
pop
inc
jl
int
test
and
mov
das
adc
stos
jecxz
fcom
es
adc
gs
cmps
and
fst
cdq
mov
push
dec
inc
mov
add
or
mov
inc
loopne
dec
in
adc
and
or
and
push
jmp
repz
js
adc
ins
pop
add
cld
dec
add
mov
hlt
xor
movs
push
xchg
test
scas
add
mov
dec
call
mov
xchg
mov
(bad)
test
pusha
xchg
int
push
das
aam
push
jb
sbb
ins
movs
fnstsw
dec
sub
sbb
popa
mov
stc
add
fwait
or
retf
outs
fnstsw
retf
jns
jne
or
and
mov
jmp
jae
inc
pop
xor
inc
ficomp
cmp
mov
imul
test
stc
repz
dec
pop
sbb
out
mov
outs
scas
je
jp
mov
adc
pop
xchg
push
pop
fwait
cmp
adc
pop
addr16
push
fcmovnbe
dec
int
iret
cmp
pop
add
mov
mov
xor
xchg
movups
(bad)
scas
push
pop
dec
out
in
cmp
in
inc
sub
repnz
aaa
arpl
jmp
retf
pop
xor
cld
xor
push
cmps
daa
das
push
sub
neg
dec
rol
js
icebp
ins
cld
pop
(bad)
cli
inc
cmps
jb
outs
lds
stos
fist
add
ret
and
dec
imul
mov
cwde
pop
enter
imul
stos
(bad)
sub
mov
push
xchg
sbb
mov
push
push
inc
push
hlt
repnz
in
jo
sbb
push
xor
inc
add
xchg
(bad)
cmc
cmc
adc
sahf
xchg
jae
sar
repz
sahf
cmp
leave
and
bswap
loopne
xchg
xchg
rcl
ret
adc
cmp
lods
retf
fstp
inc
dec
fs
xchg
and
jmp
dec
add
addr16
imul
mov
enter
ja
mov
ins
int
mov
(bad)
ins
or
leave
cmps
retf
sbb
push
popa
icebp
sub
mov
adc
in
aam
outs
pop
and
clc
hlt
sub
push
(bad)
pop
add
dec
dec
push
jg
or
movs
jmp
mov
sub
cmp
xor
pop
sub
sahf
push
jg
stc
jl
add
retf
ret
push
inc
scas
push
push
and
add
imul
xchg
push
or
cmp
jbe
jg
ror
iret
sbb
dec
les
(bad)
pop
out
xor
add
clc
shl
movs
pusha
mov
fisubr
popa
pause
sub
push
aad
xchg
mov
pop
mov
retf
lahf
and
jl
sub
dec
out
jnp
or
push
hlt
or
cmp
add
sahf
scas
cmp
fs
xor
xor
cmp
les
pop
mov
push
sbb
shl
jmp
xchg
call
(bad)
outs
gs
pop
in
adc
mov
add
push
outs
cld
mov
push
(bad)
jmp
sar
out
push
dec
add
adc
stc
mov
mov
ret
sub
xor
xlat
dec
repnz
mov
aaa
xchg
mov
push
lds
dec
loop
ds
arpl
fcom
lea
fwait
add
mov
xor
add
sub
inc
xor
xchg
sub
int3
inc
adc
pop
loopne
dec
cli
test
jb
mov
mov
(bad)
in
pop
add
in
into
xor
pop
clc
jge
xchg
jg
test
jo
out
aam
packsswb
jg
rcl
jne
scas
jmp
adc
js
pop
into
mov
xor
test
not
pop
sub
ins
cwde
mov
lahf
and
js
loope
cmp
popa
dec
sbb
cmp
xchg
inc
paddusb
lods
stc
leave
adc
loopne
(bad)
out
imul
push
ret
outs
inc
jae
(bad)
in
mov
imul
les
push
gs
cmp
aas
(bad)
xchg
jmp
pop
mov
iret
(bad)
pop
mov
cmp
sub
xchg
xacquire
jae
adc
leave
clc
xor
mov
pxor
int3
mov
sar
fimul
ja
xchg
(bad)
mov
cmps
enter
clc
sar
jmp
cli
push
jne
dec
push
inc
push
stos
pop
lahf
cmp
fdiv
jge
push
fisttp
xlat
(bad)
cmp
loop
outs
add
sbb
in
(bad)
mov
icebp
ss
and
mov
test
jmp
xor
mov
dec
sbb
pop
cmps
cmp
jae
ror
test
rol
push
loopne
mov
jmp
jno
js
ret
fisub
xor
mov
fcmovnb
xchg
stos
int
fcomp
sub
shl
(bad)
mov
mov
aas
iret
mov
ror
cmp
mov
adc
scas
outs
cmp
jno
xor
pop
pushf
push
rcr
lods
into
sbb
mov
sbb
in
sub
hlt
pop
mov
push
in
sub
sub
mov
icebp
fsubr
push
cmp
pop
pop
inc
fidivr
pop
lods
ins
aaa
rcl
(bad)
int3
leave
pop
add
pusha
push
js
push
pop
aam
sbb
lods
lods
adc
test
sub
cmps
int3
inc
fcmovb
jl
mov
loopne
push
mov
mov
scas
in
dec
stos
retf
mov
outs
in
push
dec
dec
stos
(bad)
cmp
data16
mov
outs
ss
and
cmps
push
dec
add
fmul
add
(bad)
(bad)
jae
aad
mov
(bad)
clc
adc
(bad)
gs
and
mov
jmp
aad
(bad)
cmc
call
mov
adc
fcom
jb
stos
push
into
dec
inc
jecxz
sbb
mov
(bad)
shr
cmp
clc
mov
sub
jne
pop
pop
cmps
test
leave
xchg
icebp
mov
sar
fsub
xor
inc
in
mov
jge
das
jl
shl
(bad)
pop
addr16
pop
fwait
daa
sbb
pop
loopne
jg
xor
push
and
shr
mov
xor
xor
pop
nop
and
(bad)
ror
or
out
sti
or
nop
test
call
add
pop
mov
(bad)
xor
stos
mov
pop
push
lahf
pop
rol
xchg
add
xchg
sbb
xchg
mov
jecxz
lahf
je
dec
push
mov
pusha
mov
sbb
out
pop
pop
mov
mov
lods
inc
jmp
pop
fimul
fistp
xor
adc
jge
or
xchg
cmp
dec
or
sbb
call
mov
pusha
data16
je
jnp
pusha
imul
je
out
push
pop
jns
add
push
pusha
jp
add
retf
sbb
push
pop
ins
je
and
jns
sbb
mov
pop
xor
adc
jmp
push
pop
rcr
ss
adc
leave
mov
inc
sub
mov
lahf
push
mov
xor
mov
cmp
xchg
cmps
out
pop
cs
mov
jae
pop
rol
out
jno
mov
pop
icebp
repnz
xor
std
movs
xchg
in
sti
repnz
aas
sub
mov
div
loopne
inc
into
fwait
fs
aaa
mov
into
sub
dec
or
stc
mov
test
gs
pop
pop
mov
inc
dec
mov
in
mov
dec
push
mov
or
ss
push
loope
add
clc
out
adc
jnp
xchg
xchg
lods
add
mov
in
daa
jge
je
test
xor
ds
mov
mov
jno
js
int3
xchg
repnz
add
sbb
in
int3
std
loope
outs
dec
call
or
out
lock
and
ja
fstp
retf
cmp
repz
mov
dec
cmp
mov
scas
jge
test
mov
xchg
push
mov
adc
test
lods
sub
or
add
repnz
fisttp
xchg
nop
xor
pop
mov
daa
(bad)
shl
cmp
adc
mov
add
popa
mov
stos
mov
add
rcr
inc
xor
test
adc
add
mov
sbb
aas
repnz
lods
dec
call
enter
mov
out
jmp
pop
xor
shr
shl
es
fwait
cmp
xor
loope
sub
pop
jns
xor
adc
cmp
xchg
loopne
sub
rcr
cmp
jbe
popf
imul
jo
cmp
or
xchg
pop
mov
cli
add
mov
mov
mov
(bad)
retf
ret
adc
pop
mov
ficomp
(bad)
jns
rcl
cmc
movs
inc
scas
sbb
rdpmc
sub
lods
scas
in
(bad)
dec
jno
aas
jmp
sbb
and
mov
sub
outs
hlt
repz
retf
aam
and
xchg
push
inc
sbb
mov
vmwrite
mov
jno
jmp
sbb
sub
fistp
mov
lds
mov
mov
data16
xor
xor
mov
adc
sub
adc
rcl
sbb
ds
add
sbb
cmp
jmp
and
mov
push
ret
mov
rol
jg
xchg
jg
cmp
jle
stos
fcom
xor
push
fs
adc
mov
retf
jnp
bound
fdivr
sbb
aas
scas
xchg
cmp
inc
mov
sbb
add
push
push
test
push
clc
or
push
pop
arpl
and
jecxz
dec
fsub
hlt
outs
test
cmp
xor
out
dec
ss
cmc
dec
ficomp
jmp
xchg
sub
jns
repz
xchg
sbb
dec
jb
loopne
jmp
stos
push
jmp
loope
fild
retf
ss
pop
loope
ja
push
fisttp
xchg
inc
jecxz
add
add
outs
cld
cmc
cmp
mov
mov
mov
lods
outs
pop
daa
enter
jns
mov
xor
mov
mov
adc
adc
push
popa
out
cmp
xchg
jne
sbb
xchg
mov
ins
(bad)
jge
jecxz
out
jne
loop
inc
xor
ret
aad
ret
lods
adc
jmp
inc
jecxz
push
cli
adc
mov
push
push
imul
test
in
cmp
movs
adc
adc
leave
pop
cmps
and
repz
hlt
es
cmp
xor
loopne
and
shl
lock
(bad)
cmp
jg
sbb
fsubr
sbb
and
cmps
out
cmp
push
scas
mov
scas
cmp
xchg
loop
fs
ja
and
icebp
lock
rcl
add
rcl
ins
popf
stos
lea
ss
xor
inc
repz
xchg
push
(bad)
or
fdivr
adc
xchg
lds
and
add
stos
ret
out
outs
int3
aaa
pop
hlt
push
bound
inc
data16
cli
ja
jo
arpl
leave
daa
fwait
rol
dec
scas
jge
jg
outs
or
sti
aad
push
jnp
xlat
test
test
js
cmc
shl
pop
pushf
jb
adc
push
or
hlt
push
lahf
xor
pop
adc
and
mov
aas
jmp
cs
sbb
popa
out
push
or
or
imul
mov
jb
leave
and
call
out
or
xor
arpl
dec
sbb
cmc
and
dec
or
sbb
call
ja
idiv
movs
and
sub
add
jne
mov
and
push
or
adc
aaa
lock
and
mov
mov
retf
ret
xchg
loop
mov
mov
icebp
dec
add
mov
or
sar
dec
outs
jecxz
xchg
jbe
sti
push
pop
mov
cld
int3
jmp
xchg
jmp
gs
or
jmp
mov
sub
push
neg
rcr
mov
pop
nop
mov
add
xor
jecxz
and
pop
out
ss
dec
out
sub
fnstsw
or
shl
mov
shl
fs
xchg
mov
stos
sar
ja
aas
inc
mov
xchg
push
fidiv
daa
mov
out
sub
xchg
or
(bad)
repnz
xor
pop
mov
pusha
xor
scas
(bad)
out
sar
fcmovb
inc
rep
imul
sbb
cmp
std
xchg
xor
pop
pusha
xor
lock
fiadd
xor
push
xor
call
and
push
inc
push
retf
sahf
xchg
pop
loopne
or
sbb
mov
retf
test
xor
adc
popa
dec
pop
xchg
ins
mov
mov
scas
add
mov
imul
push
xlat
xor
mov
gs
aas
es
cmp
scas
xchg
xchg
xor
jo
mov
jl
cld
mov
lods
mov
inc
sbb
outs
leave
loop
scas
test
jmp
retf
(bad)
adc
sub
in
daa
icebp
int3
sbb
push
xchg
sub
jle
jmp
fsubp
xchg
xchg
loop
xor
pop
adc
cmp
fbld
cdq
lea
pop
or
bound
sbb
(bad)
hlt
pushf
jnp
imul
pusha
rol
lods
fdivr
(bad)
lea
cdq
jns
push
add
enter
std
test
mov
outs
mov
inc
dec
mov
je
sbb
out
fstp
cdq
mov
fistp
pop
lock
stos
test
push
iret
das
ror
add
sbb
mov
ss
pusha
outs
data16
cmp
in
pop
jecxz
mov
cmp
(bad)
mov
scas
sub
sub
dec
sub
inc
(bad)
mov
mov
(bad)
inc
push
int
pop
pop
pop
aas
mov
pusha
in
xor
cmc
xchg
lods
stc
nop
push
aad
mov
sbb
push
push
adc
xchg
fdivr
jecxz
cmp
push
daa
mov
dec
popa
xchg
mov
jle
add
lods
mov
xor
mov
inc
popa
push
leave
sub
shr
lea
mov
bnd
pop
inc
sub
outs
adc
cli
loopne
imul
bsr
lea
stos
test
jge
add
jp
fs
loopne
adc
popa
lea
jecxz
or
gs
movs
outs
aad
mov
cmp
push
jecxz
retf
mov
and
xchg
sub
hlt
pop
pop
stos
enter
and
scas
and
sub
ja
sti
adc
xor
and
rcl
dec
cmps
xor
add
imul
jl
frstor
dec
or
rcl
pop
(bad)
sub
mov
pop
mov
add
enter
shl
mov
dec
adc
aaa
dec
mov
sbb
mov
mov
ins
mov
inc
imul
rcr
xchg
jp
or
and
mov
cld
dec
or
in
iret
sbb
stos
fstp
push
cmp
fcom
dec
test
pop
xor
xchg
push
inc
das
lock
add
gs
pop
neg
pop
and
(bad)
add
(bad)
mov
pop
pop
mov
cld
sbb
or
fcmovnb
repz
out
push
test
sub
xchg
mov
pop
push
adc
mov
je
data16
cs
dec
xchg
push
sbb
test
int
mov
mov
gs
jmp
dec
cdq
cmp
and
xor
movs
daa
fsubr
adc
aaa
bound
je
xor
cmp
push
repz
and
sub
pop
les
push
lea
dec
lds
dec
sub
mov
mov
jb
leave
push
in
sbb
fidivr
pop
cmps
in
pop
sub
loope
leave
and
std
jnp
repz
das
sub
sub
jmp
push
arpl
sar
(bad)
bound
jmp
xor
sub
pop
into
adc
je
xor
cmp
add
xchg
mov
cmp
jmp
push
sub
cmp
push
test
pop
adc
or
sub
or
stc
movs
push
mov
addr16
adc
sub
jmp
(bad)
dec
test
outs
movs
jne
pop
pop
sub
outs
or
or
ret
and
push
out
shl
js
out
pop
xor
out
popa
jae
nop
mov
fdiv
imul
les
xor
jle
inc
jo
hlt
loop
xchg
and
(bad)
loopne
retf
sbb
jle
pop
pop
mov
cwde
push
mov
pop
shl
mov
mov
or
dec
jnp
aas
push
imul
jae
sbb
xchg
mov
sbb
movs
jbe
xor
xchg
jecxz
clc
ret
jmp
dec
xor
out
and
les
dec
or
cs
add
rcr
sti
push
movs
sbb
sbb
sbb
inc
sub
leave
lea
pop
dec
out
mov
adc
adc
mov
jg
mov
dec
sbb
jae
fs
mov
mov
or
xor
jge
push
(bad)
fidivr
mov
getsec
jo
lods
jmp
adc
inc
pop
mov
xchg
in
in
mov
imul
push
cmc
xchg
and
mov
xchg
std
xchg
test
(bad)
rcl
xchg
or
out
les
mov
aad
mov
mov
dec
movs
cmp
mov
push
popf
inc
test
sub
mov
pop
dec
mov
cmp
femms
into
loope
lods
mov
js
das
hlt
push
cld
push
inc
fs
pop
movs
enter
sti
movs
ret
mov
lods
out
cmp
cld
mov
pusha
push
ss
xchg
jnp
scas
sbb
(bad)
pop
mov
sub
je
jmp
sub
pop
fnstenv
test
lds
add
cmp
jbe
mov
call
repnz
jp
push
cmps
fimul
imul
dec
aaa
xor
or
mov
jge
lahf
(bad)
inc
pop
pop
in
into
enter
ja
les
mov
stos
nop
jp
inc
es
lahf
loope
mov
out
out
sub
push
jp
mov
int
add
push
int
xchg
je
sub
ins
les
mov
add
out
fistp
cwde
sub
and
jnp
sub
mov
fcmovnbe
out
xchg
es
ins
inc
xchg
pushf
mov
and
dec
fs
xor
cli
jnp
and
lods
cmps
aas
pop
pop
lods
imul
and
pop
(bad)
clc
scas
or
sub
push
sub
lods
fxrstor
cs
xor
mov
cwde
jbe
ret
add
push
dec
cmp
dec
mov
dec
adc
sub
and
dec
dec
cmp
and
xchg
clc
mov
in
shl
repz
in
or
add
dec
sub
popa
pop
int3
or
add
jg
mov
test
xchg
fld
add
aaa
push
mov
xchg
cmp
sub
enter
dec
mov
dec
pop
jg
jmp
fadd
sahf
push
pop
fistp
test
in
test
push
sub
jp
inc
sub
or
or
xchg
stos
mov
xor
pusha
cli
xor
sbb
and
iret
cmp
inc
mov
aaa
test
shl
lock
mov
(bad)
shl
jge
movs
popa
jg
xor
jbe
jo
sar
adc
in
fld
push
jne
(bad)
sti
rcr
xor
and
ja
mov
aam
jp
test
and
dec
jo
xlat
xchg
je
inc
lods
sub
and
mov
jbe
sbb
cmp
int
jmp
add
push
mov
jle
out
outs
cmc
mov
sub
lds
sub
stos
dec
leave
nop
push
int3
lods
cmps
cmp
retf
jo
inc
cmp
sub
jns
dec
das
int3
mov
jecxz
mov
and
xchg
pop
aas
inc
xor
movs
xchg
imul
and
or
into
lock
jbe
aam
inc
pop
sub
pop
xlat
fbld
push
cs
inc
test
sbb
and
cmp
sti
mov
pop
or
aam
jmp
inc
aas
mov
sbb
or
mov
adc
(bad)
jge
ss
lea
ror
or
jnp
xchg
and
mov
cli
xchg
ja
cmp
cmp
lds
jnp
ret
push
cmp
push
nop
retf
mov
xchg
sub
popa
enter
cdq
or
daa
out
mov
cli
imul
xor
test
mov
xchg
out
adc
je
out
rcr
stc
inc
fcom
inc
das
cld
pop
push
push
add
push
pop
out
mov
mov
mov
cmp
xor
push
jo
xor
and
adc
fadd
fwait
inc
rcr
je
xchg
sub
mov
lahf
in
mov
popa
cmps
push
in
ins
inc
push
scas
(bad)
test
add
dec
scas
jno
arpl
stos
dec
xchg
mov
js
sub
dec
(bad)
xchg
cmp
pushf
add
lock
or
sub
repz
or
ins
push
sbb
sar
call
mov
(bad)
int
adc
hlt
in
ret
(bad)
add
das
(bad)
int3
imul
add
jmp
pop
lods
iret
dec
xchg
fisttp
sbb
test
aas
sub
aaa
fcmovb
cs
test
in
cmps
pop
and
arpl
sbb
dec
ins
inc
outs
ret
jmp
movs
or
je
outs
pop
mov
in
mov
outs
cli
inc
cli
retf
pop
sub
xor
xor
inc
or
dec
pop
movs
xchg
push
or
mov
loop
ds
xor
mov
add
jno
xchg
les
pop
jns
popf
mov
mov
xor
in
lea
mov
fimul
mov
int
ds
out
js
mov
push
jno
sub
mov
sbb
pop
movs
inc
jl
xchg
push
or
sub
in
inc
outs
das
(bad)
pop
in
jmp
(bad)
pushf
sub
sti
and
jp
das
neg
sub
outs
sar
dec
pop
mov
sbb
fstp
or
lods
ret
je
push
sub
lock
sbb
lods
push
xor
jns
cmp
cmps
or
cwde
xlat
out
cmp
adc
mov
int
in
(bad)
mov
in
add
fs
das
sbb
inc
pop
shl
pop
scas
test
mov
data16
adc
sahf
cdq
xor
xchg
sahf
test
jb
mov
je
xchg
(bad)
loope
sub
xchg
nop
inc
xchg
fcomp
fcomp
jne
ds
add
mov
sub
in
adc
mov
xor
adc
sub
retf
cs
jge
retf
rcr
loop
mov
push
les
call
xchg
inc
test
or
out
pop
scas
mov
in
out
xor
jl
(bad)
aam
mov
add
dec
xor
mov
mov
xor
xchg
in
div
outs
rcl
sbb
jne
and
mov
mov
int3
dec
fld
xor
and
dec
aaa
jmp
(bad)
cmp
push
pop
xor
data16
and
cmc
jbe
jno
xchg
sbb
inc
adc
add
jo
in
push
out
jecxz
xor
fdivrp
pop
mov
std
outs
and
cdq
xor
int
fild
lahf
or
(bad)
mov
cdq
sbb
pop
sysenter
xor
mov
push
mov
jmp
xchg
jle
dec
pop
(bad)
(bad)
xchg
jle
mov
arpl
xor
xchg
jmp
(bad)
fsubr
push
and
cmp
add
pushf
add
imul
ins
dec
xchg
cwde
mul
in
push
sbb
test
gs
cmp
shr
jno
mov
stc
fcom
ficomp
imul
retf
sbb
imul
aam
xchg
(bad)
sub
test
push
aaa
xor
inc
aad
push
jns
retf
clc
aaa
jns
pusha
cdq
adc
push
rol
xlat
cli
or
hlt
(bad)
bound
les
icebp
les
sahf
sbb
sub
imul
dec
jnp
xor
dec
mov
push
inc
mov
mov
xchg
jg
leave
pop
jnp
pop
or
inc
add
aam
mov
call
cwde
ficomp
out
outs
adc
dec
ret
out
enter
or
push
mov
mov
push
out
xor
sbb
xchg
jmp
add
in
dec
lds
cmps
lods
mov
dec
pushf
sbb
cld
out
out
(bad)
fcmovb
inc
int3
sub
mov
in
arpl
fs
mov
inc
pop
inc
fild
outs
dec
xor
in
and
xchg
shl
jae
sub
mov
in
enter
es
mov
and
ror
cs
ss
inc
mov
and
jle
mov
mov
cmps
xchg
inc
shr
xchg
mov
mov
je
repz
pop
in
cmp
inc
fnstcw
(bad)
jge
hlt
and
ss
rcr
xor
inc
dec
jno
or
aas
push
mov
jae
inc
cmp
ds
and
jbe
dec
or
xchg
push
pop
add
daa
mov
shr
dec
loope
adc
adc
jle
jne
inc
in
mov
mov
into
or
push
push
sub
aaa
addr16
mov
out
arpl
sub
push
repz
mov
mov
jecxz
cdq
leave
adc
fcom
lock
mov
outs
xor
sbb
xor
xchg
in
fnsave
inc
(bad)
mov
sbb
je
ins
(bad)
in
inc
jle
sar
ss
push
cli
mov
add
aaa
mov
push
cmp
std
jmp
mov
pop
xchg
xor
mov
sbb
stc
scas
in
push
repnz
or
repz
jp
or
push
shr
ds
push
push
cmp
leave
ss
or
jnp
test
sbb
out
xchg
mov
in
repnz
jno
icebp
scas
popa
adc
xchg
imul
mov
pop
sahf
xchg
pushf
test
repnz
outs
ja
cwde
shl
mov
loopne
inc
pop
stos
or
dec
cwde
les
mov
(bad)
js
mov
cmp
pop
(bad)
imul
cli
(bad)
leave
sahf
push
mov
loopne
daa
mov
lock
mov
mov
dec
les
mov
fild
neg
outs
or
out
cmps
add
data16
mov
arpl
cmp
jno
ret
inc
(bad)
pop
(bad)
stos
jmp
mov
adc
cwde
sbb
fsubr
mov
push
xor
cmps
cld
jmp
outs
and
iret
pop
adc
adc
xor
push
xchg
sbb
loopne
inc
adc
imul
sub
add
sbb
cli
pop
pop
pusha
pop
add
enter
jle
jo
lods
xchg
xchg
pop
fwait
cmps
mov
push
jne
movs
ins
xor
in
jmp
call
mov
sahf
xchg
(bad)
pusha
dec
jl
dec
ins
lods
xchg
test
pushf
cmp
imul
popa
xor
nop
xor
rcr
sbb
sub
(bad)
call
pushf
lods
loope
inc
mov
xchg
jl
addr16
push
in
pop
sysenter
outs
xchg
pop
mov
inc
and
ja
stos
test
xchg
cmps
frstor
test
arpl
imul
pushf
aad
inc
fstp
xor
inc
dec
sub
mov
cwde
call
outs
shl
gs
push
cmp
(bad)
or
aam
push
movs
mov
ins
push
inc
shl
xor
cmp
push
ins
ja
js
sar
bswap
and
mov
cmps
stc
out
cmc
into
or
dec
int
dec
in
or
or
in
xlat
int3
ret
iret
dec
push
xor
arpl
aam
adc
xchg
cli
fidiv
movs
hlt
mov
in
mov
inc
or
sahf
and
cli
mov
mov
mov
fist
xor
ss
dec
and
lock
div
loop
sar
jno
push
not
xchg
xchg
mov
out
jg
(bad)
cmp
imul
and
das
jnp
ret
push
xor
cmp
fwait
cmp
jecxz
mov
aaa
mov
lea
mov
(bad)
cmp
xor
sahf
sbb
xor
out
or
xor
xchg
out
ja
sub
ficom
mov
xchg
ds
cmp
(bad)
push
cmp
aaa
mov
or
or
xchg
push
push
shr
(bad)
aad
jge
mov
icebp
jmp
xor
xchg
adc
push
fisttp
push
jae
push
jmp
int3
mov
je
pop
mov
and
data16
pop
stos
pop
ror
jno
inc
mov
xchg
push
leave
cmps
dec
jmp
ror
jg
inc
ficom
push
or
inc
call
mov
(bad)
leave
inc
pusha
or
pushf
push
jmp
xchg
retf
gs
xor
push
or
xor
gs
mov
mov
clc
cli
adc
adc
xchg
es
xchg
mov
popf
enter
dec
shl
jmp
mov
jmp
(bad)
sub
(bad)
(bad)
mov
cmps
lahf
outs
add
sbb
mov
push
or
adc
in
xchg
sbb
mov
or
scas
jp
inc
aad
mov
sbb
cli
dec
sbb
aaa
xchg
fmul
adc
jg
mov
ret
xor
pushf
arpl
jge
and
fist
je
in
cmp
lock
xor
aad
fnsave
test
mov
xchg
stos
stc
or
push
adc
cld
xchg
dec
push
lea
sbb
sub
mov
nop
or
pop
int3
push
in
sbb
push
mov
int
(bad)
cs
popf
call
test
push
test
xchg
cli
and
(bad)
mov
out
dec
int
cli
inc
xchg
mov
xor
jmp
test
fwait
xor
mov
test
ret
xchg
sbb
and
or
push
cwde
adc
xlat
jmp
adc
out
and
lods
sub
pop
ret
jmp
jns
cwde
pop
dec
mov
inc
lods
mov
xor
daa
hlt
dec
sub
or
mov
add
clc
(bad)
mov
and
sub
lea
data16
pop
into
or
xchg
xchg
imul
mov
scas
and
inc
mov
pop
push
cdq
ret
jae
cmp
mov
(bad)
sub
int
ins
out
pop
call
jno
mov
idiv
push
(bad)
scas
push
and
push
imul
mov
gs
in
enter
call
call
movs
sub
pop
aas
mov
sar
add
pop
addr16
jmp
xlat
cdq
popf
int
stos
(bad)
loope
pop
or
in
sub
xor
std
jl
(bad)
hlt
call
sbb
lea
in
dec
pop
pop
pop
and
pop
int
inc
in
js
mov
inc
call
addr16
dec
xor
rcl
xor
leave
mov
dec
cld
iret
jns
in
push
int3
mov
mov
retfw
sbb
sti
ins
add
movs
push
ja
add
pop
mov
rcl
pop
jne
mov
xor
sub
gs
cmps
mov
stos
ins
and
xchg
push
sbb
fs
cmps
mov
lds
mov
clc
ss
and
lock
adc
int3
jg
cs
jb
loope
cdq
inc
xor
imul
iret
or
jo
fs
jmp
jge
push
outs
push
ret
sub
or
or
into
jp
inc
or
sar
cld
packuswb
and
mov
jp
pop
push
sub
lods
daa
mov
in
and
(bad)
cmp
mov
adc
adc
fwait
out
fwait
sub
vcvtpd2dq
lods
test
test
bound
fild
retf
push
das
in
xchg
(bad)
loopne
pop
dec
mov
(bad)
shl
repz
int3
test
sbb
jb
add
mov
lock
outs
pusha
mov
jg
mov
out
mov
jl
ror
rcr
aam
dec
or
lahf
in
jle
and
cmp
adc
jne
or
xchg
cmp
jns
mov
sbb
out
jno
ja
loopne
sahf
out
cmp
in
cmp
fincstp
xor
dec
scas
xchg
adc
shr
in
and
movs
ja
scas
sbb
rol
lods
sbb
ss
adc
aas
mov
out
mov
sbb
ret
fucom
in
(bad)
sar
mov
cmp
rcr
mov
xor
leave
push
push
add
and
fiadd
cmp
sbb
or
xor
push
lock
loopne
xor
pop
cmps
mov
xor
lods
and
shl
sahf
inc
add
out
adc
cmp
pop
mov
push
inc
jnp
sahf
cwde
retf
cmps
adc
pop
test
mov
sub
popa
ss
aam
cmp
xchg
xchg
hlt
into
(bad)
sti
cdq
mov
arpl
jb
jge
cmp
and
stc
push
dec
cld
stos
enter
push
movs
out
jl
push
aaa
and
js
and
shr
push
pop
push
stos
shl
icebp
mov
or
popa
test
pop
xchg
sbb
js
out
xchg
inc
lods
cmc
xor
adc
test
mov
cmp
dec
add
add
sub
das
lods
ins
test
mov
(bad)
cmps
test
add
add
rcr
push
pop
loopne
lods
cmps
and
fldenv
push
cmc
mov
xchg
adc
jb
xor
mov
mov
adc
movsx
and
xor
pop
aas
mov
push
in
mov
pop
push
jle
push
(bad)
fidivr
adc
(bad)
sbb
jae
std
imul
mov
popf
dec
inc
inc
movs
popf
jae
and
dec
or
enter
dec
sub
shl
enter
mov
call
push
push
and
pop
js
and
scas
pop
sub
hlt
push
add
xchg
adc
fidiv
mov
and
aad
(bad)
(bad)
pop
push
sub
or
fiadd
out
fisubr
dec
sar
add
sub
and
(bad)
bound
jmp
sub
push
jb
ss
jnp
cmp
leave
mov
mov
test
aas
mov
mov
sbb
imul
repnz
test
loop
fbld
inc
jb
pop
jle
ret
repz
sub
ins
sub
mov
sbb
mov
push
sub
sub
sbb
xor
(bad)
inc
push
mov
push
fwait
in
call
mov
push
inc
loopne
xchg
pop
aas
sbb
ins
inc
cmp
pop
out
jp
lods
sbb
xchg
and
jmp
cmp
mov
ret
sar
or
fldcw
movs
mov
mov
adc
sti
out
mov
pop
add
int
or
aas
jns
lahf
les
(bad)
cwde
mov
daa
xor
(bad)
call
sub
dec
imul
in
jle
fidivr
retf
inc
sbb
cmc
mov
pushf
pop
inc
(bad)
xchg
xor
xchg
and
leave
sbb
mov
movs
fild
jns
into
fiadd
inc
pop
(bad)
mov
cmps
pusha
xor
and
in
adc
pop
add
mov
mov
push
inc
add
retf
jmp
mov
sub
ins
xlat
test
and
xchg
xor
js
les
and
dec
loope
jmp
fs
in
into
popa
sbb
xchg
jmp
adc
jb
inc
mov
je
add
or
sub
pop
xchg
imul
inc
mov
stc
jb
push
dec
xchg
mov
fwait
push
pop
mov
jecxz
test
mov
(bad)
jmp
rcl
pop
push
adc
mov
sbb
and
jecxz
shr
fcmovnbe
and
fwait
aad
jo
lds
mov
mov
fdiv
call
inc
fcom
inc
dec
movs
mov
jmp
jne
imul
dec
jnp
sahf
cmp
mov
inc
fidivr
and
add
sbb
shl
inc
mov
sbb
adc
xchg
jmp
pushf
push
cmp
or
rcl
std
js
vphsubdq
inc
stos
dec
jnp
dec
add
sbb
lods
pop
pushf
cmc
test
arpl
sar
cli
leave
das
stos
xchg
fdivr
aad
jo
mov
iret
xchg
jb
ret
clc
inc
scas
cmp
cmps
arpl
sbb
mov
sbb
cmp
outs
add
js
add
enter
and
lahf
jecxz
pop
es
ds
push
xchg
sub
or
and
sbb
push
mov
mov
dec
mov
in
(bad)
xlat
and
pop
push
out
ja
mov
sbb
jmp
jbe
cmp
dec
add
push
sbb
pusha
shl
ss
rol
loope
ins
pusha
cmp
bound
inc
xchg
or
into
rcl
mov
into
sub
imul
clc
mov
mov
add
add
fcom
clc
(bad)
jecxz
push
mov
mov
repz
inc
ret
mov
rcr
adc
dec
test
iret
mov
imul
jmp
jb
sbb
jnp
or
and
jnp
cmp
sub
bound
in
xchg
jg
inc
dec
and
mov
stos
push
jg
test
jg
ja
jo
sbb
jo
sbb
fisubr
daa
add
jmp
clc
jl
mov
or
mov
loope
imul
out
mov
int
cmp
in
sbb
jmp
mov
icebp
pushf
stos
ins
int
mov
fst
fcomi
sub
ins
pushf
add
loop
mov
push
loopne
cmp
sub
(bad)
gs
jecxz
ret
rol
ins
(bad)
fisubr
stos
cwde
add
scas
jp
cmp
daa
jle
pop
mov
xchg
(bad)
sub
ret
or
test
jmp
or
pop
inc
push
js
repnz
shl
mov
sub
lods
rcl
lock
or
mov
adc
pushf
cwde
adc
call
jb
jnp
fimul
mov
aam
or
cmp
test
repz
xchg
pop
push
test
mov
sub
js
and
cmp
in
dec
add
sbb
fwait
xchg
(bad)
dec
outs
stos
leave
std
and
push
add
clc
xchg
popa
push
sbb
inc
fadd
pop
push
hlt
call
mov
push
cmp
sub
(bad)
imul
xchg
jmp
clc
ss
push
popf
adc
push
xlat
jae
pop
movs
jecxz
test
shr
push
xor
add
mov
mov
xchg
neg
mov
mov
into
xchg
inc
outs
pusha
ror
ja
test
pop
stc
inc
sti
outs
jae
mov
dec
call
or
adc
out
xchg
sub
fidivr
mov
add
adc
in
fist
xor
cmps
sbb
sbb
and
xchg
enter
and
shl
je
xchg
call
out
mov
add
add
into
fwait
inc
or
icebp
xchg
(bad)
in
pop
or
lods
adc
cmp
subps
sbb
cwde
pushf
pop
mov
and
test
sub
xor
jecxz
inc
jns
and
and
jecxz
xchg
mov
jl
mov
ins
xchg
sti
add
mov
xor
add
lea
sbb
outs
push
ds
leave
pop
xchg
out
jmp
mov
pop
adc
inc
(bad)
lock
(bad)
mov
mov
into
jae
outs
gs
and
addr16
test
cmp
fld
and
mov
imul
test
sub
fidivr
neg
loop
stos
add
push
xor
mov
test
pop
loopne
jp
bound
inc
or
mov
mov
test
dec
mov
fdivr
(bad)
int3
loope
ds
ret
(bad)
mov
pop
mov
loopne
sti
shl
mov
xchg
movs
out
and
sbb
mov
mov
and
lea
sahf
pop
(bad)
cld
add
pusha
fnstsw
mov
adc
sub
pushf
dec
jmp
sbb
int
sub
test
mov
out
retf
sub
mov
(bad)
repnz
dec
mov
sbb
lods
mov
xor
das
lock
cld
iret
cmp
xor
loope
inc
cdq
xchg
pop
mov
dec
and
xor
shr
imul
xchg
(bad)
ds
test
cmp
ds
fsub
fsubr
sbb
add
pop
adc
enter
jnp
dec
cmp
xchg
repnz
xchg
dec
outs
pop
pop
popf
test
inc
mov
mov
add
sub
ret
(bad)
(bad)
out
push
mov
repz
icebp
jo
adc
xor
retf
stos
sbb
mov
fwait
popa
out
ret
ret
xor
aam
mov
ja
push
call
inc
jge
jle
push
cmps
cmp
rcr
sub
das
push
pop
(bad)
ds
sbb
adc
out
xor
xor
fsubr
lods
sub
mov
cmps
xchg
jecxz
jbe
out
call
push
test
sti
fdiv
mov
push
and
cwde
fld
xor
in
xchg
mov
ins
xchg
sbb
in
and
enter
(bad)
sub
lods
int3
cmps
cmp
cmp
push
or
icebp
fwait
pop
cmp
pop
mov
push
clc
and
sub
adc
bound
cmps
push
test
sub
jge
mov
push
(bad)
ins
mov
lods
idiv
test
jmp
xchg
mov
ins
pop
and
jne
int3
dec
sub
inc
hlt
pop
push
stc
ud0
sbb
in
xchg
jb
test
call
fsub
push
popa
ror
stos
scas
and
loopne
and
das
xchg
xor
aam
fs
mov
pushf
into
and
sbb
xchg
push
stos
sbb
jg
pop
fcmovu
out
sbb
fsubr
jecxz
dec
xchg
fmul
push
sub
push
outs
pop
loopne
mov
and
les
sub
mov
addr16
and
add
out
xor
cmp
sbb
cmp
sbb
dec
mov
cmc
addr16
nop
daa
fiadd
jae
jp
jo
ja
sahf
test
pop
mov
adc
dec
fsub
jb
cwde
stos
mov
ins
mov
es
lea
je
add
rol
ret
jg
js
add
xchg
mov
inc
xchg
add
push
in
add
mov
sbb
adc
push
lock
std
das
(bad)
pop
into
stc
mov
mov
mov
add
iret
sub
mov
xchg
fwait
cmps
add
sub
out
in
fstp
loope
cmp
inc
mov
cwde
cli
adc
push
mov
mov
shl
(bad)
mov
(bad)
iret
pop
push
daa
popf
sti
arpl
cmps
out
dec
xchg
xchg
outs
stos
cld
and
fbstp
retf
jns
aas
xchg
adc
or
mov
ror
loope
addr16
lea
int
mov
cmps
repz
mov
ret
jl
iret
push
mov
dec
sbb
test
xor
push
push
js
into
fiadd
xchg
mov
int3
pop
arpl
dec
push
fcom
sbb
retf
inc
mov
mov
loopne
pusha
div
ret
sub
jecxz
dec
iret
lahf
xor
pop
(bad)
sti
mov
inc
mov
call
bts
dec
cmp
pop
cld
adc
sbb
cmp
xor
stos
fist
dec
adc
jns
cmp
pusha
aaa
(bad)
mov
mov
and
push
(bad)
xrelease
xlat
xchg
push
push
repz
ds
out
jmp
mov
cmp
pop
sub
(bad)
jno
movs
or
retf
cdq
dec
retf
sub
inc
xchg
sub
cs
rol
cmps
sub
sub
push
mov
clc
fsubrp
in
in
stc
mov
das
ret
scas
adc
mov
leave
dec
stc
jnp
mov
push
loope
movs
mov
std
mov
or
xchg
push
sahf
cmps
sti
push
jne
push
shl
add
mov
jge
dec
std
jnp
shr
jl
mov
out
jbe
inc
or
sub
and
movs
sbb
stc
jg
std
idiv
ins
gs
inc
dec
mov
inc
(bad)
repz
dec
mov
imul
push
gs
gs
ds
jge
pop
mov
pop
call
adc
xor
mov
xchg
xchg
pushf
or
push
(bad)
in
arpl
or
mov
ror
adc
mov
sub
adc
jle
mov
(bad)
jecxz
aad
ins
repz
leave
jo
sti
mov
sub
test
push
cmp
add
and
pop
mov
aaa
push
(bad)
icebp
ds
mov
xor
push
aam
adc
mov
jg
mov
in
shl
dec
cld
mov
jns
push
adc
loop
fdiv
enter
pusha
test
nop
mov
fdiv
pop
add
push
jmp
mov
cmps
add
std
lock
enter
es
sub
test
jl
cdq
xor
ja
pop
cmc
ins
cs
loope
aaa
pusha
ficomp
cmp
xor
scas
jmp
adc
inc
mov
or
loopne
call
cmp
jbe
out
out
retf
movs
xchg
fild
retf
dec
ins
xor
or
jae
aas
repnz
inc
jo
cmp
cli
addr16
ds
jmp
xor
(bad)
out
ins
mov
push
movs
fs
jno
mov
jnp
add
imul
(bad)
inc
and
gs
xchg
fwait
pop
or
sub
mul
stos
outs
or
jmp
jne
loop
jmp
cdq
out
loop
mov
sub
add
inc
(bad)
repz
cmp
jbe
cwde
inc
loop
sub
jmp
xchg
and
xor
add
add
mov
jmp
xor
fisubr
test
inc
outs
in
imul
rol
pop
ins
and
add
push
out
xlat
fs
mov
cmps
cmp
in
dec
pop
stc
outs
int3
fst
push
mov
pop
das
sbb
popa
mov
lea
jmp
shl
pusha
dec
push
pop
xchg
sbb
aas
in
js
enter
rcr
mov
add
sub
xor
sbb
jge
sbb
sub
mov
mov
cmp
mov
cwde
cmp
repz
push
pop
pop
cmp
inc
sar
rol
adc
push
dec
sbb
add
mov
test
dec
pop
in
sub
ret
dec
cmps
scas
ret
addr16
jbe
pop
(bad)
stc
cmp
mov
mov
xor
xor
in
and
outs
adc
xchg
icebp
fldcw
xchg
mov
sahf
push
sbb
ins
xor
fmul
aad
xchg
mov
or
mov
pop
loope
inc
pop
cwde
push
mov
shr
mov
push
lods
data16
sar
data16
in
jge
in
lds
clc
add
shr
es
shl
pop
fisub
inc
mov
imul
adc
and
loope
in
inc
cmp
push
xor
dec
inc
xchg
jno
xor
mov
imul
scas
push
out
aaa
dec
fisttp
sub
bound
pop
loop
push
jg
out
jl
push
cmp
(bad)
jle
push
ins
xchg
xchg
mov
mul
sub
xchg
mov
mov
fwait
out
mov
sub
daa
dec
sar
jns
add
loope
clc
mov
mov
xchg
mov
xchg
movs
pop
test
test
(bad)
push
adc
cmps
jnp
jne
int
bound
xor
sahf
daa
dec
scas
rol
mov
and
fsubrp
test
adc
movs
or
popa
pop
cmps
sub
push
aad
lea
push
(bad)
retf
and
pop
in
aad
mov
cmp
pop
out
pop
movs
out
call
adc
push
xor
pop
ins
gs
nop
pop
mov
lds
add
inc
adc
mov
jg
loopne
cmps
cmps
or
daa
repz
es
sti
dec
adc
outs
push
arpl
adc
aam
ss
push
(bad)
es
nop
retf
sub
sbb
or
rol
cld
movs
cmps
cs
daa
mov
stc
ins
cmc
test
jp
das
push
inc
les
xor
shl
imul
test
adc
mov
jmp
test
jae
push
shl
cmp
nop
scas
xchg
stc
mov
inc
icebp
mov
jbe
push
test
cs
mov
into
push
(bad)
aaa
ja
call
dec
stos
(bad)
cld
cmp
pop
inc
dec
sbb
xor
inc
lods
mov
mov
xor
sbb
daa
jl
mov
loop
xchg
mov
cwde
adc
adc
(bad)
aas
push
xor
popa
pop
inc
in
add
inc
push
add
cmps
scas
pop
jo
fisubr
imul
das
cmp
call
mov
push
dec
int
jo
mov
sub
icebp
inc
jns
sub
sub
shl
scas
push
inc
inc
leave
pop
mov
(bad)
xor
mov
retf
mov
test
mov
dec
pop
sbb
push
das
(bad)
sbb
jno
das
rcl
leave
push
and
mov
cmps
mov
xor
outs
std
imul
out
xchg
jle
test
mov
xchg
loop
xor
xchg
dec
cmc
ror
shr
sub
(bad)
popf
repz
movs
push
jge
sub
dec
sub
inc
ficomp
sbb
dec
push
je
dec
xor
jp
(bad)
mov
out
in
cmc
ins
mov
jge
into
shl
lods
outs
cmp
jbe
add
scas
fwait
cld
or
or
lds
sahf
lahf
ret
stc
inc
pop
ins
in
jge
into
sar
pushf
movs
test
mov
arpl
addr16
mov
cs
xor
mul
lea
das
loop
sub
mov
pop
adc
cmp
(bad)
mov
jp
in
pop
mov
out
repz
jle
ins
inc
and
adc
imul
inc
ret
mov
jmp
fdiv
xchg
je
xor
pop
xchg
pop
dec
xchg
popa
inc
jl
lds
xchg
mov
outs
cli
lods
out
pop
xchg
lock
mov
mov
jp
jne
xchg
bound
xor
push
push
int3
mov
jmp
fs
dec
cwde
shr
mov
push
pop
pusha
mov
mov
push
int
mov
add
cmps
shl
mov
push
mov
iret
dec
xor
lods
ror
jae
shl
adc
cld
or
pop
sbb
movs
mov
cmp
(bad)
pop
fidivr
mov
jp
jo
jne
pop
out
adc
lock
sahf
rol
pop
push
jmp
xchg
sub
jo
je
xor
jne
or
and
mov
cdq
cmp
xor
push
sub
aam
dec
inc
lock
adc
and
add
jle
test
popa
lds
adc
stos
call
pop
sbb
ret
movs
fwait
cmp
ret
cmp
jne
jns
ror
sub
xor
cli
lods
ss
mov
inc
scas
leave
(bad)
lahf
and
jns
sub
cmp
or
out
cmp
cs
pop
push
pop
sub
add
fadd
test
adc
add
div
push
mov
and
movs
inc
stc
mov
dec
inc
pop
lods
scas
pop
aas
inc
loope
pop
xchg
mov
push
jbe
xchg
sar
push
cmp
push
push
cmc
leave
test
or
xor
cmp
idiv
push
test
retf
adc
mov
dec
xchg
add
jo
push
aas
add
cmc
shl
jmp
aam
push
jo
test
pop
sar
jg
in
mov
(bad)
pop
xor
rcl
call
lock
cmp
js
shl
mov
lahf
repnz
stos
mul
jnp
sbb
jp
jp
out
jle
mov
mov
ror
pop
pop
test
out
pop
push
sub
enter
inc
fidiv
addr16
sub
mov
lods
(bad)
xor
repz
or
es
je
rol
mov
mov
call
cli
sbb
or
adc
shl
xchg
test
jns
ret
push
loopne
(bad)
fwait
xor
cmps
outs
jno
jl
dec
aam
pop
bound
icebp
jno
mov
into
nop
fimul
lds
int3
call
jl
icebp
mov
sub
sub
inc
cmp
fdivr
cmps
mov
mov
in
push
cmc
lock
pop
(bad)
jecxz
arpl
xchg
cmp
and
or
jge
adc
dec
lahf
mov
mov
jb
add
loopne
jl
or
sub
xchg
inc
mov
push
scas
cld
cld
icebp
mov
push
sub
and
addr16
and
xchg
mov
xor
call
and
into
jecxz
inc
mov
jns
xchg
pushf
jb
enter
cli
imul
inc
ja
cmp
push
mov
clc
aaa
sub
cmp
les
hlt
add
jg
mov
push
sub
mov
xor
retf
cmp
xchg
les
jmp
mov
lahf
cdq
popa
and
jae
inc
pop
pop
inc
push
in
cs
pop
xchg
pusha
stos
mov
pop
sub
mov
ss
jecxz
mov
jl
mov
mov
or
in
cs
cmp
sub
dec
retf
pop
adc
xchg
add
mov
adc
xchg
xor
mov
mov
fnsave
stos
int
jns
and
ss
stos
add
sub
lock
or
sbb
rol
call
jbe
xor
xor
dec
ret
arpl
je
mov
fidiv
mov
mov
adc
sub
push
pop
fmul
pop
add
dec
mov
lds
jns
and
jp
and
adc
call
addr16
add
mov
(bad)
rcl
sub
dec
loopne
add
clc
(bad)
(bad)
ja
pushf
mov
arpl
push
nop
jbe
(bad)
enter
mov
add
sar
fst
lea
clc
std
sub
sub
or
lods
fld
sub
imul
nop
imul
add
lea
xchg
fadd
xor
lea
inc
fimul
mov
push
not
xor
mov
xlat
enter
add
push
xchg
jns
retf
lock
mov
pop
mov
shl
inc
fidiv
daa
loope
popf
loop
gs
mov
xchg
dec
cld
pop
outs
out
dec
pop
dec
ds
sub
fcmovu
sbb
fucom
jns
nop
ret
xchg
push
or
popa
inc
ret
ret
jg
jnp
das
cli
inc
dec
jnp
test
dec
lds
xor
popa
rol
xlat
mov
retf
scas
push
xchg
adc
es
fmul
fadd
outs
sbb
bound
ja
cmp
mov
mov
add
xchg
xor
out
scas
mov
pop
xor
retf
mov
pop
ret
sti
xchg
cmc
fs
adc
in
test
test
xchg
xchg
mov
add
xchg
jnp
jns
adc
inc
mov
pushf
add
(bad)
pop
iret
lods
xchg
jmp
ins
inc
(bad)
adc
pop
xor
jge
outs
call
or
hlt
movs
dec
scas
js
add
aaa
aas
sysexit
cmp
dec
push
std
pusha
jp
xchg
mov
mov
adc
cmp
iret
mov
out
add
sub
in
dec
fistp
mov
call
mov
dec
(bad)
push
aam
repnz
int
mov
cmp
lahf
leave
adc
das
hlt
push
ret
cmp
hlt
pusha
lods
inc
fbstp
loopne
iret
lods
mov
stc
rcr
(bad)
and
xchg
outs
mov
pop
jb
or
xchg
ror
test
loop
loope
in
repnz
push
fisub
inc
out
repnz
hlt
xor
iret
push
mov
and
aaa
xchg
cld
in
xor
test
sub
mov
jge
pop
sub
bound
cmp
mov
jne
lods
cmp
sub
out
(bad)
fsubr
jbe
inc
push
rol
or
dec
(bad)
iret
push
pop
mov
std
sbb
fs
xchg
div
fs
aas
out
mov
push
lods
shr
xor
jae
pop
ins
(bad)
adc
popa
fisub
xchg
inc
addr16
add
fist
(bad)
add
xor
lods
xor
sub
(bad)
or
xchg
(bad)
cmp
test
sbb
fstp
inc
in
lea
xchg
xor
out
cmps
mov
fwait
stos
push
cmc
mov
movs
rcr
xor
test
sub
(bad)
jbe
shl
clc
push
sub
nop
imul
xor
dec
fisub
mov
pushf
add
movd
add
fs
sar
mov
xor
mov
stos
mov
dec
lahf
inc
inc
cmovl
jmp
mov
arpl
push
xchg
mov
inc
stc
fisttp
shl
fidivr
sbb
mov
push
jmp
inc
ja
dec
jo
dec
jne
xchg
xlat
fmulp
sbb
inc
cmc
popa
cld
cmps
es
mov
jne
dec
mov
cdq
push
mov
ret
push
mov
test
inc
mov
push
pop
pop
test
cmc
test
int3
aaa
dec
adc
das
mov
or
push
inc
test
int
imul
lea
jle
mov
inc
jge
and
and
test
sub
xor
or
arpl
cmps
jno
sbb
add
popf
add
idiv
test
mov
ret
mov
pop
mov
lahf
repnz
sti
jg
cmp
dec
out
inc
test
inc
sar
xor
out
(bad)
int3
push
adc
es
push
sbb
xchg
mov
jge
inc
jbe
stos
adc
aad
scas
cmp
xor
cmp
outs
jp
lods
ins
mov
jg
ss
arpl
cmp
mov
mov
jne
mov
push
sbb
out
fld
cmps
dec
jecxz
mov
dec
adc
test
and
movs
mov
pop
push
inc
xor
adc
clc
or
shl
aad
jecxz
xor
push
popa
clc
fbstp
hlt
mov
jecxz
mov
call
xchg
iret
or
inc
lods
mov
call
sub
sbb
xlat
sbb
xor
sar
ds
jmp
or
or
(bad)
mov
and
add
pop
aad
mov
(bad)
mov
leavew
xchg
jp
lock
cmc
and
sbb
repz
out
imul
ds
cmps
cmc
or
repnz
daa
and
cmp
inc
inc
fimul
sti
ja
sub
into
shr
fcomp
adc
iret
sar
aad
or
mov
inc
shr
loop
pop
push
push
imul
out
das
pop
std
cmps
mov
pushf
pop
ffreep
outs
inc
out
jne
cld
ins
sbb
in
fwait
rcl
mov
leave
or
in
fst
pushf
test
jecxz
mov
push
xchg
test
inc
fs
jge
hlt
cmp
xchg
xlat
xor
jmp
cmp
fstp
icebp
hlt
mov
jbe
stc
data16
push
jnp
mov
jg
mov
inc
fwait
push
leave
retf
cmp
cmp
out
enter
mov
inc
and
cs
add
mov
(bad)
call
pop
in
inc
and
retf
es
push
mov
in
retf
icebp
dec
mov
ror
pushf
scas
xlat
das
and
ret
and
fisttp
mov
ss
scas
push
jb
jns
test
sbb
lock
push
xchg
add
or
or
mov
pop
bound
(bad)
fcom
pop
lea
add
sub
adc
sbb
(bad)
fdivr
leave
xchg
fild
es
jmp
sub
adc
dec
sub
jmp
push
lods
mov
(bad)
jmp
xchg
cs
mov
iret
repnz
hlt
(bad)
xchg
pop
xchg
cmp
inc
fsubrp
test
out
sub
(bad)
push
pop
adc
lods
nop
adc
imul
fs
lods
dec
sub
bound
pop
push
test
cld
lahf
add
das
jmp
stos
imul
out
pop
mov
dec
ss
idiv
dec
das
dec
dec
movs
add
pusha
or
pop
mov
pop
test
sbb
pop
aam
rcl
mov
xchg
xor
push
mov
dec
sub
cld
xor
mov
lahf
mov
iret
push
mov
lahf
popf
sti
not
xor
and
mov
mov
retf
push
adc
loope
in
scas
lock
shl
movs
pushf
ja
imul
xchg
inc
push
or
push
adc
adc
ins
xchg
cli
jb
arpl
std
add
scas
in
jmp
dec
and
test
xor
push
jo
mov
adc
sub
scas
dec
and
cmp
add
ins
xchg
test
inc
pop
cli
sbb
mov
ss
(bad)
inc
(bad)
lods
inc
nop
adc
inc
sbb
sbb
aad
aas
push
cmp
hlt
or
inc
out
xor
xchg
aas
cmp
add
js
mov
mov
push
scas
fmul
adc
retf
(bad)
pop
sub
sub
jp
int
dec
pop
jcxz
ror
cmps
pop
stc
or
sahf
sub
cmp
es
or
imul
leave
clc
imul
xor
adc
adc
jmp
mov
mov
dec
in
adc
adc
(bad)
jnp
sbb
lahf
cmp
sub
cmps
cmps
jae
or
fisttp
xor
nop
mov
mov
and
fbstp
repz
jle
repz
push
rol
enter
icebp
or
cwde
aas
sub
jmp
lds
mov
fisubr
scas
or
add
jns
xchg
rcl
sbb
or
and
push
fdivr
pop
xchg
push
xchg
ds
cmp
push
test
sbb
xchg
jb
and
dec
xor
xor
adc
mov
ficom
jmp
jmp
arpl
daa
xor
and
sahf
mov
sbb
sbb
sbb
ss
mov
push
xchg
dec
repnz
(bad)
adc
shl
push
icebp
mov
test
add
repz
xor
shl
lahf
dec
pop
lea
cmp
or
ficom
test
stc
mov
cmp
icebp
cmp
test
push
shr
lods
jae
aam
mov
fild
sub
xor
xchg
or
xchg
je
adc
jmp
or
and
add
loop
jl
lahf
mov
(bad)
mov
mov
jg
dec
push
(bad)
jns
dec
mov
push
add
and
pop
ins
hlt
out
mov
div
lock
mov
xchg
mov
jmp
jge
daa
or
fidivr
loopne
repnz
lahf
jns
dec
test
inc
loope
mov
adc
mov
stos
cmp
and
pop
or
sub
clc
sub
adc
push
mov
pusha
movs
pop
fcomp
cmp
inc
inc
lahf
xor
sub
out
mov
loopne
aas
mov
jle
mov
sub
pop
mov
and
(bad)
fisttp
push
pushf
and
sar
shr
mov
or
repz
add
cwde
adc
lea
int3
int
push
jl
cmp
lea
push
ficom
(bad)
mov
xrelease
test
fisub
adc
mov
dec
push
mov
lds
pop
mov
loop
stos
ficomp
cld
hlt
mov
pushf
sub
lods
cdq
ror
pop
lods
imul
fcos
sub
inc
jmp
mov
daa
pop
lds
call
scas
or
cli
mov
ret
in
add
and
into
pop
int
outs
out
mov
sar
repz
jo
cdq
inc
out
mov
les
es
leave
mov
ret
mov
js
outs
ds
push
mov
jle
aaa
je
jne
arpl
sti
sahf
sub
inc
dec
lods
jp
scas
ret
sbb
popa
sar
adc
sahf
and
fsubrp
clc
jecxz
xchg
or
out
cld
or
dec
push
ins
jl
stc
lea
shr
jl
enter
fucomp
dec
rcl
daa
pop
jne
mov
adc
aam
add
dec
imul
mov
popf
jae
repnz
and
mov
lds
add
mov
cmp
dec
cdq
in
sti
imul
jns
push
jmp
adc
movs
repz
mov
xor
fstp
push
mov
aad
sbb
push
pop
fld
stos
in
dec
(bad)
or
xchg
ds
inc
add
das
jl
cmp
shl
pop
inc
(bad)
and
push
jmp
cmp
dec
repnz
xchg
mov
jb
cmp
adc
cmps
sub
inc
test
ins
sbb
ins
cli
inc
fwait
sub
lods
xchg
sti
pop
rol
test
outs
adc
xchg
pushf
imul
int3
test
es
das
xchg
push
pop
and
cmps
xor
add
pop
dec
aad
mov
jle
call
(bad)
je
mov
std
jmp
inc
out
fwait
sbb
adc
xor
rcr
pop
cdq
pop
ficom
pop
pushf
cdq
or
fmul
gs
pop
in
xchg
add
mov
mov
jle
scas
mov
jne
adc
into
enter
lods
cs
sbb
mov
hlt
mov
xor
pop
gs
aam
mov
dec
jmp
aam
addr16
xor
push
nop
mov
test
and
imul
cmp
out
fisttp
scas
xlat
sar
and
stos
loope
icebp
jle
movs
jno
movs
inc
mov
sbb
aad
pop
pop
sbb
cmp
add
gs
in
push
jl
push
(bad)
push
mov
mov
inc
dec
cmp
dec
aaa
int
lods
push
aas
rol
mov
push
idiv
lods
test
test
xor
arpl
out
add
add
cli
jns
or
movs
xchg
mov
xchg
pop
mov
mov
mov
fisttp
jns
int3
out
ja
mov
repz
cmps
adc
out
in
cmp
jo
in
pop
jnp
push
xchg
cli
cmps
pop
inc
popa
adc
cmp
mov
mov
cmp
je
test
inc
push
(bad)
push
mov
mov
sahf
stc
xor
lods
in
push
push
hlt
pop
js
sub
enter
or
push
ins
adc
push
in
mov
repz
fs
sub
pop
ds
cld
inc
inc
push
cli
bound
mov
add
movs
sub
and
out
and
xchg
(bad)
cmp
adc
mov
addr16
lea
jne
xor
loope
cmp
test
stc
std
sbb
xchg
pop
jp
ja
push
or
mov
test
ficom
mov
pushf
adc
mov
out
add
test
jbe
(bad)
cdq
or
fbstp
mov
pop
popf
cmp
ret
lahf
cs
aam
retf
mov
sub
gs
jecxz
dec
fs
outs
lea
mov
pop
loope
inc
lahf
fisubr
outs
sub
mov
inc
push
movs
in
cs
xchg
icebp
and
in
mov
retf
xchg
adc
mov
adc
adc
icebp
pop
pop
add
mov
movs
xchg
jl
stos
mov
mov
aaa
inc
xchg
xchg
in
pusha
call
int
(bad)
fadd
imul
inc
dec
push
adc
mov
bound
add
out
mov
movs
adc
dec
push
adc
test
in
pop
movs
xlat
repz
cli
lea
mov
std
fwait
jmp
jo
pop
neg
cmps
jns
pop
(bad)
pop
div
in
mov
in
test
in
mul
xchg
jae
inc
repz
mov
pop
out
lods
iret
cmp
push
or
leave
mov
mov
arpl
or
sub
dec
ja
rcr
bound
(bad)
mov
pushf
cmps
int
xor
lea
xor
adc
sti
lods
ins
mov
dec
inc
and
pop
ds
je
mov
shl
and
shr
push
into
out
dec
push
mov
aas
sbb
sub
cmp
lock
fcom
test
fisttp
push
sbb
in
pushf
cmp
xchg
pop
jmp
and
lds
or
cmps
inc
push
in
(bad)
cmp
sbb
rcr
loop
retf
(bad)
in
popa
outs
dec
out
punpckhwd
in
jg
xchg
ret
xor
pop
outs
mov
adc
cmovs
cmps
xor
mov
das
repnz
je
cmp
test
xchg
imul
mov
rcl
daa
lock
ret
mov
inc
xor
(bad)
mov
inc
jb
inc
repnz
xor
(bad)
push
cmps
call
add
pop
popa
pop
ss
scas
das
mov
push
ja
and
push
hlt
jnp
jnp
(bad)
shl
push
pop
std
jo
ins
mov
sub
stos
rcr
jbe
xchg
inc
fdiv
xchg
stos
xlat
or
or
leave
in
jmp
data16
stos
mov
in
outs
pop
mov
push
stos
cmps
add
sub
out
cmp
ret
retf
ror
xchg
mov
inc
push
jmp
outs
add
popf
movs
mul
inc
out
mov
(bad)
mov
ins
mov
mov
fld
xor
mov
imul
cmp
jge
jbe
jl
xor
jp
out
std
mov
cdq
or
int
push
out
adc
nop
xchg
lods
mov
xor
nop
cmp
push
ds
aaa
dec
adc
add
xor
ins
in
add
push
hlt
(bad)
jl
cs
shl
sbb
adc
fidivr
pop
repnz
cwde
test
inc
adc
pop
sbb
sbb
jp
push
aam
xor
push
mov
cmp
sub
in
das
(bad)
cmc
pusha
clc
mov
pop
inc
cmc
rol
add
clc
movs
(bad)
(bad)
fist
push
mov
es
imul
les
sbb
or
shl
cmp
int
scas
cmp
jbe
add
cvtps2pi
dec
xchg
mov
lea
xchg
dec
inc
movs
mov
mov
fisttp
jno
or
and
or
xchg
xchg
jg
mov
out
pop
sbb
mov
push
stos
(bad)
ror
arpl
das
(bad)
xchg
icebp
pop
repz
in
in
adc
rcr
xchg
xlat
addr16
mov
stos
jno
call
sbb
ret
push
pushf
push
loope
mov
into
int3
inc
pop
test
pusha
or
mov
out
push
dec
push
sahf
cdq
pop
sub
mov
arpl
mov
dec
lods
int3
cmps
sbb
cli
loop
pop
(bad)
sahf
sar
xor
cmps
je
mov
mul
and
fwait
mov
mov
push
call
aaa
push
push
cmp
out
mov
xor
inc
sahf
les
ja
xchg
xor
xchg
xchg
int
out
pop
sub
(bad)
ficom
div
push
fwait
cmp
mov
bound
cvtps2pi
push
xchg
pop
add
xchg
xor
adc
js
aam
xchg
outs
xchg
(bad)
dec
mov
jo
mov
mov
mov
call
(bad)
xor
ficom
cwde
and
sub
pop
mov
mov
aaa
nop
and
pop
cmp
mov
push
or
pop
push
xor
fidivr
lea
xchg
fwait
sahf
std
mov
scas
sbb
mov
or
fldenv
pop
enter
and
iret
cmp
inc
sahf
dec
jb
enter
out
fnstsw
aad
mov
pop
xor
or
(bad)
or
push
repz
into
adc
(bad)
cwde
inc
(bad)
icebp
out
push
push
mov
sbb
sbb
mov
sub
nop
es
test
test
mov
adc
in
add
out
or
adc
popa
in
xchg
push
sub
inc
fs
nop
add
inc
jae
xchg
or
jle
xchg
adc
xor
dec
shr
xchg
sub
pop
mov
sub
pop
add
cld
clc
test
mov
jb
and
dec
xor
sub
adc
cmp
or
adc
pop
xchg
fwait
sub
xlat
call
xchg
mov
lea
movs
mov
paddusb
pop
sub
lds
mov
lock
mov
(bad)
dec
jl
jns
in
call
xlat
or
xchg
mov
into
add
jle
scas
inc
ret
xchg
lea
cdq
outs
(bad)
ror
and
into
push
lea
mov
out
std
jl
in
add
cmp
je
mov
adc
mov
(bad)
jmp
cdq
into
aas
outs
xlat
scas
nop
and
xor
outs
fmul
sub
out
sub
pop
jno
cli
stos
mov
call
nop
mov
push
ss
retf
movs
inc
jmp
pop
mov
jl
add
cmp
sbb
imul
push
add
nop
repnz
jno
imul
data16
pop
jb
dec
xor
mov
jmp
test
in
test
lock
mov
xchg
or
cld
sbb
nop
scas
cmc
xchg
mov
mov
cmps
sub
xchg
dec
ins
sbb
inc
cmps
test
int
bound
leave
inc
sar
ret
mov
xchg
call
mov
pop
outs
stos
sbb
ja
adc
clc
mov
int
aaa
nop
mov
out
test
rcl
jnp
mov
iret
jle
fldcw
arpl
shl
stc
mov
fimul
xor
xor
ins
inc
dec
add
or
aas
jnp
or
push
mov
ja
sub
push
sbb
jnp
xor
hlt
dec
loopne
test
cs
cmp
cmp
push
retf
test
sub
scas
jmp
adc
xchg
and
dec
stc
xor
ss
cli
retf
(bad)
or
inc
cmp
sbb
push
mov
adc
pushf
rcl
push
popf
out
(bad)
scas
mov
retf
xchg
adc
jp
retf
pop
mov
arpl
ds
push
xchg
dec
push
jg
mov
inc
sti
sti
push
test
add
mov
inc
pop
in
dec
jae
rol
cld
repnz
call
xor
mov
xchg
mov
cdq
retf
(bad)
fild
cmp
nop
imul
inc
push
pop
cmp
ss
(bad)
(bad)
push
test
sbb
test
jne
or
or
jmp
pushf
or
daa
jge
pusha
push
sar
iret
jmp
popa
sar
xor
add
inc
adc
mov
(bad)
lods
test
out
call
int
fdiv
shl
ins
stos
jmp
sbb
jno
sbb
fwait
sar
xchg
retf
mov
push
jnp
mov
popa
std
xchg
lahf
pusha
fwait
cmp
out
push
call
(bad)
clc
rcl
add
aam
lahf
xchg
push
movs
retf
sub
dec
test
mov
adc
xor
loope
push
repnz
push
xor
cdq
pop
(bad)
or
movs
je
or
push
fwait
rcr
in
jno
sti
iret
mov
stos
mov
add
retf
ss
pop
mov
xor
inc
push
(bad)
mov
int
sbb
rcr
adc
and
pop
fstp
aad
stc
lea
iret
cmps
fidivr
ins
jno
sbb
lds
pop
hlt
cld
add
lahf
sbb
out
xchg
aas
xchg
ficomp
enter
mov
add
aas
adc
aaa
movs
icebp
ret
push
push
cwde
cmps
dec
fnstenv
bound
aaa
addr16
adc
mov
pop
sub
ins
dec
xchg
push
jno
inc
xor
and
xchg
mov
and
jmp
jo
sbb
pop
adc
sbb
pop
push
daa
in
add
mov
cmps
fisub
int3
add
pop
cmp
daa
mov
fdiv
inc
fsubr
inc
inc
cmps
pop
pop
jns
loope
scas
mov
cmp
dec
jmp
or
xor
mov
dec
xor
pop
out
inc
scas
cmc
data16
test
sub
push
popf
ret
nop
xor
pushf
jle
leave
cmp
pop
sub
cmps
sub
test
fidivr
(bad)
jmp
stc
or
out
xchg
outs
xor
adc
out
push
push
cmps
pop
pop
in
inc
push
je
fimul
call
je
fs
clc
int
inc
das
adc
dec
jbe
jle
icebp
sub
ja
inc
mov
cmp
in
jno
pop
adc
jp
sbb
mov
sbb
jo
mov
iret
call
mov
lock
fimul
out
push
push
sti
inc
jbe
sbb
xor
aaa
leave
jl
mov
or
rcl
mov
mov
jmp
imul
(bad)
and
mov
fsubr
daa
stos
mov
lds
mov
inc
aad
xor
cld
jp
test
xor
push
das
pop
iret
loope
fnsave
popf
ret
cli
test
xor
data16
or
mov
xor
add
pop
push
xor
imul
out
movs
retf
jg
pop
call
jmp
test
pop
push
jl
pop
cmps
pop
or
and
outs
adc
cmp
mov
in
ror
in
inc
jnp
push
fild
pop
cmp
and
xor
imul
out
std
jecxz
xlat
retf
xchg
movs
mov
daa
scas
cmps
mov
call
mov
cmp
dec
mov
pop
aaa
or
sbb
mov
int
sbb
in
add
push
add
inc
outs
and
dec
sbb
pop
cmp
xchg
xor
jecxz
nop
fs
lahf
mov
inc
les
jno
cmps
mov
xchg
nop
mov
sub
mov
add
inc
ins
in
pop
jns
in
or
adc
mul
add
loopne
jecxz
jg
cmps
xor
dec
adc
data16
je
push
ins
inc
jge
out
pop
mov
push
mov
ret
bt
xchg
and
jne
push
mov
fwait
je
repz
mov
sbb
popf
mov
adc
and
(bad)
lea
(bad)
pop
ret
xor
add
or
cmc
loopne
outs
ja
call
push
ins
icebp
test
into
xchg
and
inc
dec
dec
xchg
push
rol
lock
stc
cmc
stos
mov
xor
xor
(bad)
fisub
and
mov
leave
mov
cwde
dec
sbb
add
inc
std
mov
inc
stos
dec
in
xchg
adc
pushf
xlat
ret
(bad)
das
push
cmp
scas
fsub
or
aas
sbb
xor
aad
mov
cmp
shr
sub
pusha
icebp
add
dec
push
lods
cmps
xchg
lahf
mov
push
stos
out
mov
sub
lods
dec
sub
mov
jmp
lahf
push
popa
enter
mov
adc
mov
mov
sub
mov
inc
cs
xor
(bad)
xor
repnz
(bad)
xchg
xchg
adc
add
pop
inc
mov
sbb
and
(bad)
xchg
adc
push
out
dec
(bad)
cmp
test
inc
jno
pop
adc
and
xlat
(bad)
or
push
fisubr
and
imul
jno
fwait
pushf
inc
lea
test
or
(bad)
mov
adc
in
sub
dec
aam
jl
cmp
sub
arpl
jmp
and
icebp
dec
pop
or
cld
xchg
movs
or
mov
scas
rcr
or
jno
jmp
sub
imul
std
push
push
cmp
xchg
jmp
jmp
cmps
inc
imul
mov
cld
inc
mov
fbstp
bound
clc
dec
fwait
sub
cld
sub
xchg
cwde
shl
jge
imul
mov
mov
jo
daa
mov
mov
(bad)
ret
xchg
push
shl
inc
icebp
cli
or
xchg
sub
and
jns
popa
push
mov
add
daa
pop
sbb
outs
push
aad
push
sbb
mov
imul
rol
ficomp
and
fild
cmp
jo
cwde
in
mov
jp
push
pop
std
jle
inc
or
sbb
xor
or
mov
push
jge
fiadd
ja
inc
fs
fisubr
xor
out
dec
push
sbb
jmp
and
push
sbb
pop
sbb
mov
dec
adc
jmp
xor
div
push
out
adc
jecxz
push
jmp
xchg
jecxz
push
push
(bad)
adc
or
cwde
mov
lock
jno
fnsave
mov
inc
mov
out
jl
les
aas
cwde
jns
ins
or
add
fwait
xchg
pavgw
cmp
jp
ds
rcl
fsubr
jp
inc
push
dec
or
xchg
sbb
(bad)
fisttp
adc
fistp
dec
inc
fs
cmp
bound
adc
inc
in
mov
cmps
movs
sbb
test
push
sti
adc
push
push
xlat
lods
pop
ja
retf
shl
dec
leave
stos
push
ret
mov
jle
jo
cmp
(bad)
inc
cmps
call
cmp
mov
loop
fwait
ret
jnp
ins
cwde
pop
inc
sahf
adc
loopne
adc
jp
shr
sar
ds
nop
sbb
popa
int3
into
xor
(bad)
push
(bad)
jmp
add
mov
lahf
sub
jmp
add
jns
xchg
jl
in
pop
mov
or
pop
xlat
addr16
push
ins
push
imul
cdq
mul
(bad)
in
xor
repz
or
retf
retf
inc
test
push
stos
test
gs
inc
shl
lea
pop
xchg
jg
shl
stos
sbb
mul
add
pop
shl
push
or
fs
mov
and
adc
push
dec
dec
jmp
data16
xor
cwde
imul
dec
sbb
imul
std
jno
sbb
xchg
jmp
jl
push
mov
push
out
loope
lods
jmp
sbb
pop
enter
ret
daa
push
pop
push
mov
lds
fstp
mov
outs
loopne
(bad)
dec
(bad)
sbb
aam
xor
div
and
call
test
loope
xor
out
lahf
mov
(bad)
cmp
addr16
mov
dec
xchg
ins
mov
cdq
pusha
fldenv
sub
cmps
inc
pinsrw
popf
std
dec
icebp
ss
popf
jle
cmp
pop
ror
mov
pop
fucom
fwait
jo
scas
pop
sbb
aas
repz
ret
stos
push
mov
or
movs
fmul
(bad)
and
aam
test
xchg
es
daa
pop
sub
inc
dec
push
pop
dec
pop
mov
xchg
push
enter
jns
imul
sub
imul
fs
xor
ins
les
adc
ins
and
in
iret
add
repnz
or
scas
push
int
sti
loop
mov
jno
icebp
xor
lahf
call
fcomp
out
pop
test
add
or
stos
xor
dec
rcr
jo
retf
cld
jb
jnp
enter
int
loope
xchg
cs
pop
es
push
test
test
inc
adc
lahf
mov
scas
(bad)
mov
jo
ffree
leave
sub
cwde
fld
ficom
jae
cmc
aas
add
outs
cmp
xor
sbb
xchg
rcr
(bad)
xor
test
lds
shr
mov
jg
sbb
inc
out
cmps
loop
pop
or
stos
sbb
repnz
xchg
rcl
int3
xor
pop
pop
cmp
mov
mov
ins
xchg
retf
jecxz
sub
inc
push
lahf
jno
xchg
bsf
ret
loopne
and
loope
or
xchg
jno
dec
push
push
pop
inc
jne
and
jle
push
cmp
or
push
pop
es
lahf
stc
std
stc
dec
fdecstp
iret
add
loope
adc
fcomi
mov
shl
push
sbb
das
nop
adc
cmp
retf
sub
fisub
mov
fs
pop
outs
imul
aas
mov
add
out
jbe
cmps
imul
jp
cdq
loop
xlat
mov
imul
jno
(bad)
mov
jg
jb
aam
(bad)
push
hlt
daa
inc
lds
retf
sub
sub
das
rcl
jnp
scas
or
push
gs
adc
out
adc
ins
xchg
xchg
or
hlt
push
lahf
jnp
aad
aas
mov
popa
and
outs
adc
xchg
and
pop
(bad)
loop
jo
mov
scas
loop
mov
push
pop
sub
pushf
lods
mov
or
add
dec
xchg
sbb
mov
and
cmp
xlat
popf
bound
or
push
sub
push
mov
sub
int
pop
inc
movs
(bad)
pop
retf
mov
sub
xchg
pop
enter
ficomp
xchg
inc
or
push
arpl
jmp
fnstenv
xor
jle
or
sub
in
sub
int3
bound
lahf
xchg
inc
jmp
cwde
outs
and
mov
out
in
retf
push
test
stc
ret
js
add
sbb
(bad)
mov
aad
imul
pop
and
dec
ja
cmps
into
ja
mov
test
dec
mov
cmp
mov
mov
pop
mov
xchg
retf
gs
mov
add
inc
inc
rcr
mov
pop
fsub
ins
ficom
inc
jp
js
fbstp
cmps
adc
jne
ins
mov
xor
enter
xor
(bad)
or
add
mov
or
scas
and
out
xchg
out
xor
mov
retf
and
mov
adc
ins
in
in
icebp
fld
push
and
loop
cmp
add
pop
or
mov
ficomp
sbb
lods
sub
mov
cmp
sar
xor
inc
scas
mov
cmp
pop
cmp
push
repz
sahf
jnp
pop
and
and
jbe
stos
test
mov
and
mov
fwait
lea
rcr
fld
movs
mov
pop
dec
push
dec
aad
retf
ja
into
fimul
dec
add
jnp
test
xchg
loope
mov
jno
cmp
mov
jge
xchg
fstp
add
cs
mov
sbb
shr
iret
mov
pop
ds
pushf
imul
cli
pop
xlat
inc
lea
repnz
movs
mov
es
aaa
add
add
jmp
loopne
sbb
out
test
movs
int3
mov
add
out
mov
mov
ret
pusha
sahf
cmps
outs
cmp
popf
icebp
dec
test
xchg
fst
mov
add
sub
mov
adc
add
mov
dec
pop
loop
and
sub
xor
in
and
ja
sbb
cmp
pushf
lods
mov
ret
int
sahf
call
adc
scas
inc
pop
ret
mov
push
push
push
or
pusha
pushf
les
outs
push
mov
sub
sti
mov
cmp
add
push
xlat
stos
inc
mov
addr16
jecxz
ins
ss
push
xchg
mov
push
xchg
or
js
ins
scas
push
jp
add
mov
sbb
xchg
jb
lods
jo
movs
aas
mov
push
xor
jmp
shr
adc
xor
push
mov
popf
mov
iret
sbb
cmps
jmp
movs
jmp
jbe
adc
lods
mov
out
add
mov
dec
inc
mov
jnp
pop
or
enter
dec
(bad)
xor
mov
xchg
push
adc
and
adc
and
dec
pop
in
mov
inc
adc
cwde
xchg
outs
sub
pushf
retf
(bad)
(bad)
push
daa
retf
jge
pop
(bad)
add
sbb
inc
mov
inc
jmp
and
adc
add
xchg
fistp
iret
sub
adc
sbb
and
popf
mov
aas
loop
aas
int
xor
fst
and
popa
jns
inc
ins
sbb
fnstcw
sbb
mov
ja
dec
repz
jmp
or
pop
xor
int3
stos
imul
in
xlat
int3
mov
fild
mov
movs
test
in
inc
mov
xor
dec
dec
ja
pop
add
jnp
int3
test
into
scas
loope
cmp
repz
dec
mov
mov
shr
cmps
pop
fdivr
inc
rcl
jno
sub
arpl
xchg
fld
fnstenv
test
test
inc
push
sub
faddp
cdq
daa
out
cmps
aas
(bad)
or
leave
ror
xchg
cli
addr16
retf
mov
fdiv
cmps
inc
dec
mov
xor
push
frstor
inc
loop
fistp
mov
add
bound
dec
imul
sub
jmp
mov
mov
ficomp
dec
inc
xor
cmp
sub
movs
adc
push
mov
out
pop
pop
aad
jo
mov
aam
cmp
popa
lds
jnp
pushf
sbb
sub
das
scas
das
xchg
cmp
dec
bound
jo
shl
and
and
dec
outs
or
inc
xchg
fidivr
test
and
aad
ja
call
ss
scas
adc
or
mov
cmp
(bad)
adc
lock
shr
mov
imul
(bad)
mov
fstp
(bad)
loopne
cmp
out
nop
pop
jp
daa
push
sbb
(bad)
mov
outs
push
push
mov
and
cmp
movs
sbb
cmc
scas
lahf
pop
loope
adc
dec
pushf
cmps
lods
retf
xchg
xor
aas
jmp
inc
std
aam
call
(bad)
adc
loopne
cmp
push
mul
mov
(bad)
jns
outs
(bad)
mov
pop
inc
mov
(bad)
jl
mov
arpl
cs
push
pushf
test
stos
test
pop
into
mov
xor
jmp
inc
neg
aad
retf
mov
movs
jne
cmp
add
shl
imul
lds
cmps
mov
and
test
add
or
mov
sbb
adc
or
or
inc
lahf
nop
jb
or
cld
popa
inc
xor
cwde
sub
fsubr
xchg
xor
push
shr
mov
imul
or
sub
or
rol
gs
mov
fcmovne
outs
pop
idiv
add
loopne
pop
stc
pop
call
push
(bad)
xlat
daa
sub
repnz
lea
inc
cmp
call
popa
jle
stc
(bad)
fsub
fild
add
sbb
retf
mov
pop
mov
xor
fwait
and
sbb
(bad)
mov
xchg
xor
mov
dec
hlt
test
mov
push
lods
xor
adc
sub
in
ja
retf
mov
movs
int
sub
mov
stos
call
test
inc
push
mov
mov
adc
sub
or
mov
inc
xor
stos
pop
aaa
dec
das
cmp
cmp
fbstp
je
sbb
push
fisttp
cmp
mov
mov
popf
inc
in
cmp
cmps
sbb
mov
push
in
or
pop
add
lea
aas
mov
cdq
fyl2x
aam
push
(bad)
lea
fisttp
iret
jp
and
sbb
aad
pop
jp
sub
xchg
mov
dec
stos
sub
sbb
sbb
xchg
ins
sahf
jmp
push
push
mov
xchg
inc
jns
adc
ffree
sbb
sub
pusha
xchg
mov
push
xchg
lock
adc
or
dec
stos
push
popf
lahf
dec
pusha
mov
fsubr
dec
mov
pop
mov
mov
mov
mov
mov
inc
repnz
clc
test
fwait
xchg
or
popa
mov
out
inc
dec
fild
retf
dec
cmp
loop
std
dec
lods
movs
and
test
xor
mov
daa
loop
div
loope
bswap
dec
retf
dec
call
das
and
cmp
and
or
cmps
lahf
xchg
pushf
fadd
dec
xchg
xor
(bad)
jmp
mov
cmp
push
push
std
mov
and
push
mov
push
mov
and
test
jae
or
mov
sbb
in
and
mov
retf
inc
ins
test
leave
add
aas
cs
mov
fisub
test
test
mov
sahf
sbb
arpl
sub
inc
fmulp
lods
loopne
lods
lods
jmp
daa
(bad)
rol
xchg
fild
sub
mov
loop
mov
cmc
les
ret
test
dec
dec
mov
movs
mov
mov
out
jecxz
pop
test
adc
and
pop
test
mov
stc
sahf
ds
jmpw
stos
adc
pop
nop
xchg
sahf
cdq
mov
push
push
shr
adc
jecxz
xchg
adc
inc
repz
outs
das
cmp
leave
fnstenv
in
psubb
std
xor
or
pshufw
outs
add
daa
pop
add
hlt
add
jge
rcr
push
sar
dec
popa
mov
push
jno
test
pop
pushf
ror
push
xor
mov
push
retf
jno
inc
ds
scas
in
add
mov
out
xchg
enter
dec
xchg
and
sub
ror
push
iret
fisubr
(bad)
scas
mov
les
ficom
repnz
loop
lods
sti
pop
push
add
out
xor
pop
inc
aad
es
pushf
cmps
inc
aas
addr16
loope
dec
std
add
pop
cmp
jge
dec
jo
push
push
mov
(bad)
(bad)
(bad)
das
and
lds
push
scas
dec
mov
gs
push
add
call
cdq
mov
popf
push
mov
retf
mov
adc
sti
or
xchg
imul
into
jbe
mov
(bad)
xchg
dec
add
push
cwde
push
call
xlat
mov
push
push
lods
mov
and
shl
test
int
idiv
or
jae
out
cmp
sbb
in
sub
jbe
jne
jns
call
jmp
push
add
push
sbb
mov
xor
bound
pop
js
dec
repz
mov
dec
repz
js
or
mov
mov
fwait
pop
inc
cdq
pop
sbb
or
mov
sub
and
cwde
xchg
dec
jle
enter
and
dec
aam
or
push
ret
in
cli
leave
in
xchg
and
test
xchg
inc
inc
mov
ret
adc
out
outs
sub
test
lock
xor
pop
pop
xor
dec
sahf
sub
pop
fwait
es
adc
jnp
(bad)
aas
pusha
cs
imul
cwde
mov
xchg
push
pop
mov
pop
push
fdivr
mov
dec
jg
loopne
push
add
in
shl
aam
ins
not
xchg
lea
imul
lds
sbb
mov
dec
sti
fst
rol
mov
outs
mov
fwait
mov
lods
fimul
addr16
sub
int3
push
cmp
and
in
shl
xor
pop
outs
cs
int3
and
mov
pop
sbb
add
sub
jns
jnp
fild
repz
aam
jne
xor
call
je
mov
pusha
out
mov
nop
loop
or
(bad)
js
fdiv
sar
ror
xor
xchg
jbe
push
rcr
dec
je
stos
(bad)
push
pop
jns
ins
jmp
int3
or
gs
pusha
loop
or
jl
mov
pop
div
shl
lods
clc
sbb
cmc
mov
out
ins
movs
jg
arpl
add
jp
mov
adc
cmc
cmp
add
jo
mov
xor
imul
rcr
sbb
test
mov
mov
icebp
jge
cmp
popa
pop
cwde
inc
jbe
adc
fdiv
fcmovbe
retf
push
stc
cli
aad
ret
adc
icebp
hlt
push
pop
rcr
adc
test
xor
push
mov
inc
in
pop
xchg
mov
not
int
lea
out
inc
ficomp
xor
mov
ror
sub
jecxz
test
into
xchg
arpl
test
mov
add
addr16
das
loopne
shr
push
std
pop
pop
hlt
repnz
sub
lock
ins
ja
sub
cmps
sar
add
(bad)
(bad)
mov
outs
arpl
ss
mov
scas
dec
pop
cmp
or
sub
in
movs
je
dec
into
out
dec
cmp
sub
mov
pop
mov
mov
xchg
push
inc
cmp
loope
pop
and
adc
stos
fadd
sub
push
(bad)
ret
je
sub
inc
push
xchg
lods
enter
mov
scas
sahf
lods
cmps
xor
mov
or
sbb
push
retf
pop
push
lods
iret
out
pop
sbb
aam
mov
cmp
sbb
sub
in
jmp
call
inc
stos
test
ret
pusha
cwde
adc
xor
push
(bad)
inc
in
call
lock
neg
ret
mov
jg
bound
ins
mov
outs
jnp
jmp
(bad)
mov
sbb
push
test
(bad)
xchg
xor
xchg
ins
out
xlat
fs
pop
rol
mov
out
(bad)
fdiv
(bad)
mov
mov
test
pop
add
scas
xor
popf
xchg
in
cmp
(bad)
sub
xor
add
jbe
addr16
out
fsub
mov
mov
stos
xchg
call
xor
mov
sub
xor
sti
xlat
jp
dec
pop
repnz
or
mov
arpl
imul
imul
and
jno
lods
cmp
add
cmp
ins
ret
std
cmp
repnz
mov
lea
sahf
xchg
dec
bound
rcr
out
aam
cs
and
call
mov
or
dec
cmps
popa
cmc
sbb
lock
fsubp
js
(bad)
cmp
xor
adc
jno
mov
inc
nop
pushf
xor
pop
jmp
ret
adc
aaa
scas
sub
push
cmp
pop
jo
push
test
mov
imul
mov
lahf
movs
cmps
out
icebp
mov
jl
loop
xchg
jbe
pop
(bad)
int
dec
ins
mov
(bad)
xchg
push
movs
mov
rol
repz
int
lahf
push
scas
ins
popf
xor
out
and
mov
xor
js
ins
fs
dec
sbb
fcom
icebp
push
pop
dec
push
push
sub
out
popf
jbe
pop
daa
addr16
scas
push
ret
mov
(bad)
cs
test
pop
sub
cmp
popf
adc
push
test
cmps
mov
retf
mov
xchg
in
popf
mov
jae
push
xchg
pop
imul
shl
int
mov
mov
call
xchg
push
inc
push
sub
into
inc
jno
push
scas
jmp
bound
sub
mov
test
call
mov
xlat
mov
or
pop
out
(bad)
push
add
loope
cmp
lods
scas
sub
cmp
xor
mov
and
mov
test
test
and
enter
cmp
(bad)
mov
daa
div
(bad)
sbb
ror
in
mov
inc
inc
leave
adc
mov
pop
(bad)
retf
or
cmps
lea
data16
rcl
push
out
jecxz
int
pop
pusha
xchg
imul
mov
movs
inc
pop
dec
sbb
xchg
sti
mov
movs
sbb
xor
call
data16
cs
ret
push
inc
xchg
(bad)
test
xlat
add
ss
adc
leave
aad
mov
cld
(bad)
or
fdivr
sbb
inc
mov
or
and
icebp
outs
xchg
mov
and
lods
(bad)
pop
mov
enter
sub
rcr
mov
mov
imul
push
bound
xchg
push
lods
jp
adc
jnp
adc
jbe
cwde
xchg
jb
inc
int3
push
mov
mov
movs
or
mov
jno
push
push
jne
inc
xchg
cmc
xchg
bound
xor
jge
fild
aaa
inc
popf
int3
add
inc
js
or
cmps
pop
loop
fdiv
cli
xchg
inc
pusha
jae
(bad)
adc
adc
loop
and
sub
mov
jp
ret
xlat
nop
call
outs
stc
xor
in
pop
pop
ror
fstp
xor
fdiv
sbb
int3
test
repz
dec
in
loope
pop
js
and
mov
in
mov
inc
je
dec
test
xor
mov
mov
gs
iret
sbb
ss
sar
and
(bad)
leave
dec
fcomp
pop
dec
adc
pop
mov
jno
(bad)
sub
out
jmp
mov
mov
inc
sbb
retf
pop
out
mov
xchg
repz
retf
add
adc
int3
push
sbb
push
fwait
stos
mov
dec
cmp
push
and
scas
jmp
xor
dec
fistp
push
das
bound
es
jb
and
sub
push
mov
aas
jl
push
lahf
loopne
xor
stos
add
hlt
sbb
js
xor
shl
sbb
push
popf
add
mov
outs
dec
or
in
jmp
test
mov
test
or
dec
inc
mov
popa
add
jecxz
lods
scas
test
sahf
mov
icebp
ss
xchg
es
ror
inc
add
rcl
adc
and
and
add
cli
add
inc
gs
xor
push
xchg
mov
aam
or
imul
xor
pop
fs
xchg
out
shr
rcr
loop
pop
std
sbb
push
add
(bad)
mov
lock
inc
pop
jno
mov
inc
sbb
mov
jle
mov
loop
call
push
mov
dec
test
mov
jnp
pusha
ins
xchg
pop
js
mov
not
mov
aad
mov
imul
mov
push
int3
add
adc
in
in
jecxz
(bad)
retf
retf
stos
addr16
les
ja
out
dec
cld
ds
fiadd
sbb
dec
das
xor
lea
sbb
mov
rcr
xchg
mov
cmp
icebp
cmc
ds
adc
cmps
jb
cmp
mov
mov
push
jmp
je
lods
add
pop
mov
push
les
in
ins
in
ret
(bad)
sbb
aad
leave
cmp
cmp
cmps
es
cmp
jnp
push
aam
sbb
pop
fisub
pop
pop
inc
into
repnz
pusha
arpl
or
sti
enter
fwait
jae
cmp
(bad)
xchg
mov
inc
mov
jno
test
push
sub
sub
stc
sub
rcl
aaa
sub
xchg
pop
pop
add
cmp
jle
sar
xor
in
pushf
cdq
lods
jg
adc
int
cwde
cmps
mov
add
addr16
(bad)
jae
jl
or
lods
movs
dec
mov
pop
inc
push
jno
out
sbb
pop
and
jmp
pop
outs
mov
cmp
and
sub
fdiv
xchg
enter
sbb
in
fcmovnu
jb
not
aam
xor
inc
outs
sbb
push
mov
out
test
jl
dec
mov
pop
or
push
xor
cwde
xor
push
sbb
mov
push
xlat
fldcw
mov
scas
mov
lods
mov
push
ret
ret
pop
idiv
dec
dec
leave
ret
(bad)
mov
jg
and
sbb
daa
fs
fwait
aas
fstp
imul
test
sub
jnp
sbb
cmc
mov
mov
pop
out
adc
cmp
mov
ins
sahf
in
add
inc
inc
outs
mov
pop
pop
xor
cmps
cmp
ins
mov
call
in
adc
mov
add
sub
int
adc
test
repnz
push
ja
push
idiv
shl
cmp
mov
ret
and
retf
push
inc
inc
mov
call
mov
jle
jns
aam
sti
stos
and
adc
cmps
jb
loope
mov
pop
inc
mov
dec
cs
outs
retf
ror
mov
sub
std
inc
push
push
jge
js
xchg
repz
dec
adc
cld
std
dec
jnp
cli
fsub
sahf
in
stos
xchg
stos
sub
in
jg
fs
mov
(bad)
in
ja
xor
sub
enter
push
xchg
imul
or
ret
inc
ret
add
fcmovu
pop
das
sbb
sub
xchg
ret
jbe
clc
lds
dec
mov
scas
jge
mov
push
xor
dec
cmp
fdivr
ja
and
lods
aas
mov
mov
movs
test
pop
jmp
std
div
inc
cdq
aad
in
inc
(bad)
loop
cmc
arpl
cwde
mov
outs
ds
adc
and
push
jmp
push
pop
pop
pop
inc
inc
daa
aad
pop
test
mov
in
jge
test
dec
test
add
adc
sub
add
pop
outs
push
xchg
inc
sbb
call
or
jae
mov
mov
out
cmp
test
movs
stos
xchg
sti
pop
cli
push
cmp
mov
aas
daa
ret
lods
cld
xchg
pop
and
add
fsubr
icebp
dec
ins
sar
cmp
push
sbb
push
add
out
call
inc
retf
jae
sub
inc
pop
and
retf
jle
aad
in
ror
or
pusha
enter
cwde
in
enter
sbb
mov
fist
push
push
mov
xchg
test
ret
dec
mov
outs
mov
dec
aaa
add
dec
in
adc
ficomp
int3
pop
and
inc
nop
mov
and
shr
inc
mov
lea
movs
and
xor
loope
mov
(bad)
addr16
call
cdq
mov
movs
and
imul
retf
mov
jbe
(bad)
ror
push
jge
pop
int
jae
mov
pop
jbe
loopne
mov
push
push
mov
jae
nop
push
(bad)
icebp
xchg
dec
shl
dec
push
mov
sub
gs
cmp
xor
mov
(bad)
adc
add
push
or
dec
xchg
daa
cdq
ja
cmp
call
add
rcl
mov
rcr
test
dec
jno
inc
xlat
lods
test
(bad)
aad
xchg
xor
dec
test
sub
out
hlt
in
push
leave
pop
dec
sbb
jbe
mov
mov
dec
jmp
mov
inc
leave
mul
and
js
data16
inc
aad
(bad)
mov
inc
fistp
xchg
cli
or
pop
xchg
mov
pusha
loope
dec
int3
add
push
sub
or
loopne
in
inc
add
push
test
(bad)
jmp
icebp
popa
push
cmp
outs
push
pushf
add
hlt
cs
test
mov
fld
rol
pushf
push
sahf
mov
lock
cmp
retf
jb
or
movs
rep
push
into
push
pusha
gs
fisub
vcvtss2sd
jge
push
jo
hlt
xchg
dec
and
add
ss
shl
das
jnp
adc
xchg
(bad)
lds
push
inc
mov
pop
lods
sahf
inc
and
movs
sub
cmp
xor
leave
pop
loope
sbb
xchg
gs
ins
fsubr
movs
hlt
loop
out
xchg
cmp
add
(bad)
xlat
mov
lahf
push
je
xchg
imul
mov
mov
cmp
sub
stc
paddb
xchg
out
aad
sub
ret
jge
pop
push
sbb
ror
les
mov
mov
fwait
jge
ins
js
stos
mov
out
fnstenv
mov
lahf
sub
(bad)
and
test
(bad)
ins
shl
mov
or
scas
cmps
(bad)
loope
pusha
pop
cld
push
sub
popf
xchg
std
xchg
(bad)
cli
xchg
mov
inc
push
sbb
jns
retf
popf
push
test
jbe
add
sar
bound
inc
mov
and
js
jae
fnstenv
mov
lds
mov
rcr
imul
fnstsw
pop
jmp
inc
retf
mov
mov
pop
xchg
xor
and
fiadd
(bad)
arpl
sub
clc
pop
mov
xchg
popf
pusha
sbb
cvtdq2ps
xlat
pop
push
ficom
rcr
xor
out
inc
inc
jle
pusha
cs
jle
pop
(bad)
(bad)
ds
and
cmps
addr16
cs
ins
call
pop
(bad)
dec
int
push
and
in
add
in
fcom
pushf
(bad)
iret
es
sbb
scas
pop
enter
adc
outs
icebp
or
je
cmp
repz
repz
and
sub
pop
mov
bound
push
cmps
clc
stc
lahf
pop
jl
xor
xor
and
cld
imul
das
mov
cmp
sbb
push
imul
gs
jle
push
imul
imul
xchg
push
mov
test
pusha
scas
mov
xchg
aad
lods
xchg
xor
sub
xlat
jle
test
out
gs
inc
dec
inc
push
call
push
push
int3
fwait
mov
mov
in
pop
in
mov
daa
xchg
mov
sub
add
sbb
xchg
stc
call
pop
out
leave
mov
popa
cld
out
cwde
dec
mov
(bad)
(bad)
lahf
cmc
mov
test
stc
cmp
xor
(bad)
pop
push
sar
cmp
adc
sub
out
mov
sbb
dec
cld
jmp
(bad)
int
jp
out
dec
push
loopne
push
in
es
fiadd
mov
sub
in
dec
(bad)
aas
fsub
xor
into
pop
jo
enter
add
mov
and
pusha
cmp
movsx
call
jg
sar
jmp
das
jmp
mov
fild
nop
and
add
xchg
mov
xor
mov
inc
mov
add
fnstcw
loop
loope
out
mov
arpl
jae
ins
call
mov
mov
mov
mov
mov
fs
add
add
dec
xchg
cs
(bad)
push
outs
xchg
or
adc
adc
fmulp
or
cmp
mov
aas
sbb
or
les
enter
xlat
add
idiv
mov
scas
mul
cmps
dec
and
jnp
stc
fcom
lods
outs
push
sub
cmps
inc
std
in
and
(bad)
mov
or
pop
mov
inc
jmp
cmp
retf
sbb
jmp
push
jnp
loopne
push
mov
dec
js
enter
loopne
scas
pop
jnp
(bad)
xor
(bad)
pop
enter
cmp
adc
fild
cmp
outs
cmp
cli
push
es
inc
retf
icebp
or
leave
inc
jne
xchg
aam
(bad)
jmp
ret
ss
pushf
mov
inc
jns
sbb
and
lock
loope
fs
test
pushf
mov
pop
jnp
sub
mov
xchg
and
ror
inc
jmp
jmp
in
fcmovb
mov
(bad)
xchg
movs
and
add
inc
jnp
and
arpl
push
das
cmp
mov
adc
das
push
sub
dec
jge
mov
loop
sub
push
rcr
sahf
pop
and
or
pusha
dec
fcmovbe
adc
repz
adc
rcr
and
js
outs
sub
jmp
js
push
enter
xchg
dec
adc
xor
lock
or
mov
add
jl
sbb
shr
inc
xor
sub
movs
jbe
imul
mov
sub
adc
jae
ror
iret
pushf
cmp
addr16
xor
pop
ss
jae
cli
mov
mov
and
sahf
or
les
movs
xor
rcl
sbb
jmp
mov
or
mov
mov
into
cwde
cmp
mov
add
stos
fisttp
movs
dec
xchg
dec
or
cld
pop
(bad)
fidivr
adc
sti
xor
sbb
mov
cmp
cmp
hlt
or
scas
jno
stos
or
or
ret
rol
mov
jmp
(bad)
in
xchg
add
or
push
arpl
ja
mov
ror
inc
call
rcl
mov
or
jo
adc
outs
lods
push
mul
add
test
dec
xchg
pop
nop
sub
repnz
icebp
sbb
leave
sub
mov
das
jae
mov
jl
dec
not
cmp
mov
add
mov
xor
into
stos
sub
je
mov
dec
(bad)
push
or
loopne
sub
bound
cli
ds
sub
xor
cmp
out
push
xor
push
iret
movs
lea
out
mov
pop
cs
fsub
cmc
pop
dec
ret
hlt
psraw
lods
pop
lock
xacquire
xor
lock
mov
test
fs
test
lods
imul
cmps
fild
cmp
dec
jno
fdivr
xchg
mov
shl
repz
ss
jno
sbb
jmp
in
leave
jne
cld
cs
inc
(bad)
xacquire
cld
or
outs
arpl
fisub
fnstcw
xor
cmp
dec
inc
cmp
lds
(bad)
popa
dec
leave
in
mov
rcl
jae
es
cmp
cmp
sub
push
mov
xchg
shl
sub
mov
cld
nop
es
jne
mov
push
inc
ins
pop
pushf
sub
xchg
cmp
retf
dec
mov
push
retf
jp
les
fbld
imul
fsubr
push
neg
xor
pop
mov
cmps
leave
leave
dec
dec
call
(bad)
sti
dec
psrlq
pop
jae
pop
enter
call
and
inc
int3
xor
jg
sub
xchg
push
cmp
pop
clc
icebp
sbb
(bad)
xchg
sbb
jp
inc
jbe
xor
movs
inc
pop
cld
imul
ret
movs
dec
mov
sbb
cmp
jae
outs
sub
int3
gs
inc
loopne
in
adc
daa
jmp
cmp
(bad)
mov
push
es
fisubr
add
fcmovne
aam
std
lock
mov
ss
arpl
das
in
jge
fwait
int
mov
jg
fstp
cmp
popf
xchg
jnp
icebp
imul
es
(bad)
xor
mov
inc
inc
jmp
aaa
in
xchg
cld
dec
add
test
test
gs
or
and
mov
das
addr16
push
aad
int3
push
imul
cdq
ins
mov
cwde
jbe
jp
imul
dec
cli
mov
ror
cmps
push
psubq
sti
inc
rol
test
call
rcl
mov
movs
aas
push
jae
add
and
push
es
jne
jae
les
push
pop
add
pop
xor
jmp
enter
rcpps
jmp
fild
push
inc
or
mov
and
ret
cmp
inc
xor
mov
stos
imul
mov
lods
mov
mov
push
gs
fidivr
push
add
enter
mul
mov
pop
sbb
mov
jne
sbb
iret
mov
jne
mov
and
sbb
ds
mov
mov
ja
shl
call
sbb
jle
and
sbb
jmp
pushf
jne
retf
adc
push
test
jmp
jmp
out
mov
cld
mov
fdivr
xchg
cmp
movs
test
mov
js
(bad)
pop
and
sahf
aam
cmps
aas
push
and
jb
popa
in
push
fwait
sub
pusha
push
pop
lea
ins
xor
idiv
xor
cmps
xor
and
mov
mov
fstp
mov
fcmovnb
add
jmp
inc
test
in
ret
push
xor
clc
sub
xchg
(bad)
outs
xchg
je
inc
or
jbe
sbb
test
out
dec
sub
in
adc
aad
test
xor
(bad)
pop
in
adc
mov
xor
cmp
xor
retf
sbb
push
add
(bad)
cmp
out
and
(bad)
sbb
enter
retf
out
jg
mov
test
pop
sub
push
ins
and
mov
and
imul
add
sbb
ret
adc
push
xchg
loop
push
or
jp
mov
jae
retf
stos
sbb
xor
dec
retf
test
or
adc
loope
cmp
or
add
inc
push
xchg
jmp
add
and
or
fistp
in
imul
push
call
(bad)
cs
mov
jns
(bad)
dec
jae
push
(bad)
mov
call
cmp
jecxz
call
ds
les
pop
push
imul
cmp
jle
pop
xchg
sti
leave
mov
push
sbb
scas
pop
adc
sbb
test
jae
aas
pop
push
fisub
mov
xlat
retf
mov
sahf
es
pusha
mov
scas
ss
pop
into
aad
push
pop
push
jb
lea
loopne
je
shr
push
(bad)
mov
pop
mov
jmp
ror
les
and
cwde
add
test
pop
iret
test
movs
inc
add
rol
daa
sub
jmp
inc
jbe
jb
in
mov
loopne
stc
scas
adc
mov
(bad)
out
int
imul
inc
out
ja
in
mov
cli
dec
xchg
mov
clc
into
and
ins
jae
mov
add
sar
test
lea
test
sub
test
mov
jae
lods
movs
push
sbb
sbb
sbb
xchg
cmp
ds
pop
test
xor
stos
pop
and
aam
xchg
cmc
fwait
loopne
adc
xchg
inc
in
adc
push
int
pop
mov
push
and
(bad)
call
je
je
out
lods
xlat
pop
add
enter
cmp
pop
jmp
int3
xchg
mov
adc
mov
aam
push
sub
ficom
sub
mov
xchg
dec
add
push
inc
dec
add
pop
(bad)
jno
jmp
pop
push
(bad)
jnp
mov
adc
sbb
dec
loop
fidiv
xchg
add
xchg
bound
daa
jnp
xchg
out
dec
ins
out
sub
mov
jmp
scas
sub
inc
add
mov
inc
adc
inc
mov
sbb
mov
cmps
xor
mov
lods
imul
je
test
sub
(bad)
push
jmp
(bad)
mov
retf
pop
es
test
mov
repz
pop
and
and
push
push
mov
cmp
or
adc
fdivr
adc
int
mov
in
ror
bnd
inc
add
aam
lods
mov
fcom
push
test
cwde
ss
xor
ss
add
(bad)
adc
into
adc
hlt
mov
pop
scas
movaps
fstp
out
cwde
mov
test
mov
arpl
stos
jge
loope
xor
repz
dec
mov
dec
and
imul
pop
pusha
pop
inc
jbe
mov
jge
jns
or
in
mov
inc
cmps
ins
loope
pop
(bad)
jae
in
add
and
mov
scas
cmp
loop
aaa
test
cld
sub
js
out
xchg
loope
scas
or
data16
jle
push
or
ins
jbe
jnp
retf
fcom
loop
shl
in
xor
lods
pusha
inc
sbb
fiadd
or
sub
mov
cmp
dec
cmp
sub
inc
daa
loopne
in
fisubr
fdiv
push
push
sbb
loop
push
call
(bad)
fwait
sbb
bound
iret
fwait
and
ficomp
mov
pop
mov
test
xor
and
dec
ds
inc
sub
mov
or
fst
shl
(bad)
mov
leave
mov
cmp
mov
dec
mov
ror
mov
sub
or
ret
movs
xchg
add
movs
dec
js
mov
aaa
dec
mov
cmc
fwait
fs
cmp
sti
sub
std
loopne
ret
or
idiv
or
popf
mov
ins
jecxz
cmp
cmovo
or
mov
out
clc
mov
test
sbb
scas
ret
shl
jmp
jo
cdq
fsubr
dec
arpl
jbe
jno
rol
dec
lahf
mov
stc
sbb
je
js
jge
xchg
sub
or
push
fstp
jp
cld
lods
pop
sub
scas
bound
adc
add
lods
or
js
push
jae
push
popf
rol
pop
pop
icebp
sub
cmp
jl
inc
sbb
sti
enter
stc
scas
mov
cmp
lock
push
mov
dec
sbb
dec
mov
rol
dec
dec
ja
rol
sahf
cmp
inc
sub
mov
lds
mov
push
inc
xchg
ret
retf
mov
int3
scas
and
sbb
movs
mov
mov
fstp
inc
mov
cmp
outs
jmp
push
mov
mov
arpl
retf
lahf
fcmovbe
or
and
test
arpl
mov
sbb
iret
aas
jbe
xor
aaa
add
lds
pop
sub
push
leave
test
or
push
xor
(bad)
jnp
int3
pop
mov
or
and
jno
stc
mov
or
sub
xor
xchg
cmp
mov
shl
mov
inc
dec
out
mov
adc
mov
out
fbstp
ja
pop
loope
je
push
(bad)
rol
std
psubusb
push
mul
push
in
stos
jmp
mov
in
pop
inc
mov
cdq
xor
or
pop
(bad)
or
add
jp
daa
scas
adc
xchg
xor
mov
fisttp
pop
sub
or
mov
cmp
out
adc
sbb
pop
arpl
ja
push
xor
mov
bound
mov
pop
(bad)
and
xor
jb
js
and
xor
cmp
adc
and
adc
xor
xor
jbe
test
push
gs
push
sbb
jae
push
test
pop
in
inc
jne
xor
enter
cmp
hlt
outs
and
lock
(bad)
mov
and
cld
int
out
dec
ss
cs
movs
and
dec
cmp
pop
fild
mov
rcl
jp
sbb
sub
ja
sub
add
jmp
or
and
mov
imul
jns
mov
xchg
sar
int
bound
push
or
ins
sbb
push
out
loope
push
shl
add
loope
jmp
sti
stos
jmp
push
lock
jge
(bad)
adc
mov
iret
pop
js
xor
inc
jecxz
sub
inc
sbb
ret
movs
or
sbb
cmp
add
adc
es
sbb
retf
fidivr
inc
repnz
in
jecxz
cmp
les
cmp
lahf
lock
retf
and
cs
sbb
mov
push
lds
jne
repnz
stos
lock
into
in
pop
push
and
jp
shl
rcr
test
call
inc
xor
ret
dec
cli
xchg
or
xor
jge
in
pop
or
in
mov
lods
jmp
(bad)
lock
and
jg
mov
imul
mov
jg
push
int3
sbb
jbe
(bad)
inc
push
(bad)
mov
mov
movs
outs
stc
push
ins
push
sbb
xchg
int3
inc
mov
(bad)
add
sub
jae
retf
cli
mov
rcr
sub
lea
jb
xchg
mov
sub
or
push
inc
enter
xchg
xchg
cli
inc
ret
(bad)
pop
fistp
sbb
adc
xor
mov
sub
and
jnp
jp
push
dec
dec
add
xchg
mov
shl
mov
in
push
fld
mov
jmp
imul
cwde
fdiv
mov
jg
pop
mov
fld
cmps
(bad)
test
arpl
inc
mov
sbb
mov
das
adc
sbb
ds
cld
scas
xor
cmc
jmp
cmp
lahf
cwde
lahf
jge
les
mov
sub
add
sbb
xchg
inc
ss
test
in
(bad)
dec
cmp
bound
sbb
sbb
aas
sahf
(bad)
pop
sub
(bad)
cmp
arpl
mov
int3
mov
int3
adc
fisub
mov
repz
out
sub
jg
(bad)
pop
xchg
popf
loope
lahf
adc
fnstcw
jb
xchg
pop
das
inc
loope
or
xchg
(bad)
mov
jae
aad
dec
sub
dec
sahf
and
cmp
aas
imul
dec
cmps
in
lods
inc
in
and
mov
in
mov
sbb
jbe
add
lods
jle
iret
push
iret
mov
mov
pop
addr16
xchg
mov
(bad)
jbe
out
push
ins
cmp
aam
repnz
loopne
mov
inc
jbe
std
lahf
je
sahf
sub
push
fbstp
lods
xchg
rcl
pop
pop
call
mov
mov
dec
adc
cmp
add
sbb
or
sbb
jne
pop
xchg
retf
das
cmp
jmp
add
scas
not
stos
sbb
sahf
ffree
sbb
leave
and
daa
jge
pop
dec
mov
push
rcr
dec
ret
cmc
cmps
pop
cmp
pusha
pop
or
mov
imul
int3
in
adc
lods
jne
push
cmp
fs
sar
sar
(bad)
mov
ror
mov
cmp
cdq
fnsave
cmps
sub
push
jle
mov
cwde
test
mov
jne
dec
dec
int3
and
push
push
mov
aad
jmp
ds
(bad)
es
dec
and
push
imul
xlat
add
in
cli
test
adc
mov
jne
sub
or
fnstsw
mov
cdq
push
mov
pusha
add
dec
stos
(bad)
int3
rcl
test
cmp
jle
adc
xor
mov
(bad)
cdq
pop
push
dec
or
lock
leave
push
ret
pushf
inc
fs
fcom
and
mov
adc
ins
xor
ss
icebp
sub
jmp
inc
push
dec
dec
lods
inc
cmps
(bad)
fsubp
jbe
retf
push
loopne
or
sbb
jp
cmp
mov
xchg
push
repz
mov
pop
or
mov
push
inc
sbb
sbb
mov
and
pop
inc
adc
xor
mov
and
mov
popa
xchg
push
test
xchg
push
mov
push
out
and
inc
gs
iret
aam
aas
adc
jno
cs
mov
adc
pop
jns
xlat
daa
test
mov
adc
sbb
adc
xor
push
pop
movs
fidiv
out
(bad)
imul
pop
out
push
cmovae
rcl
leave
pushf
cmp
(bad)
push
(bad)
push
and
sbb
jno
test
xchg
mov
xchg
inc
xlat
or
xchg
neg
xor
push
data16
dec
ds
int
cmp
(bad)
retf
out
cmp
stos
test
adc
cmps
sbb
(bad)
push
sbb
add
imul
sub
lods
sbb
cmps
pushf
and
adc
and
fsub
(bad)
cmc
dec
leave
pop
cmp
xchg
call
mov
addr16
xor
or
jae
adc
mov
mov
jmp
imul
repz
push
loop
lahf
mov
jne
test
push
adc
test
jmp
stc
ss
in
addr16
je
in
sub
push
mov
lahf
sbb
add
xor
les
pop
data16
mov
sbb
psrlq
mov
xchg
and
mov
mov
jmp
mov
inc
xchg
leave
iret
add
mov
or
fsubr
cmps
push
inc
mov
stos
or
(bad)
lds
push
(bad)
cmp
pop
or
scas
(bad)
push
popf
cmps
retf
ret
inc
outs
mov
mov
sti
aad
jle
adc
inc
pop
arpl
mov
nop
mov
dec
push
gs
pop
out
pop
test
(bad)
aas
adc
fimul
mov
mov
pop
push
and
push
add
mov
rol
push
enter
inc
ins
pop
neg
xchg
push
cdq
jo
dec
sti
cdq
and
lock
dec
clc
maxps
pop
pop
mov
std
in
adc
in
pop
xchg
xchg
push
call
or
js
mov
jecxz
cs
into
dec
fs
pop
in
fcmovnbe
div
inc
jl
inc
inc
adc
mov
pushf
xor
mov
sub
dec
ficom
into
jle
inc
sub
fcmovnu
pushf
popa
push
dec
sub
sub
pop
bound
jl
inc
push
call
push
xor
and
rcl
pop
pop
jnp
(bad)
sub
mov
ficom
lahf
ss
sub
sbb
jo
jo
mov
xor
push
in
(bad)
test
inc
mov
cwde
inc
mov
gs
jl
call
aam
dec
push
rep
sti
add
pop
inc
xor
xchg
mov
repnz
repnz
bound
aaa
push
push
cld
push
fild
mov
dec
dec
shl
jns
stc
sti
lds
(bad)
mov
mov
or
inc
inc
or
jmp
leave
scas
mov
fiadd
cmp
ret
test
pop
mov
mov
or
movs
adc
jns
and
clc
ds
retf
lock
dec
jge
sbb
or
dec
xchg
inc
mov
pop
mov
lods
in
cmp
xchg
sub
stc
pop
and
xchg
xchg
sbb
ja
pop
(bad)
or
add
js
js
data16
jne
sub
dec
sbb
(bad)
and
sbb
cmc
jp
enter
movs
shr
push
cdq
call
xchg
xchg
push
ja
pop
cmp
jb
bound
out
lahf
movs
cmc
int
adc
pop
push
push
(bad)
(bad)
push
jp
pop
lods
jnp
shl
test
push
mov
bndldx
hlt
ja
cli
adc
xchg
loopne
cmp
rcr
inc
je
aas
mov
aam
scas
pop
mov
pop
and
push
inc
mov
jno
and
stc
xor
cmp
fisubr
leave
dec
dec
rcl
or
xor
loopne
mov
xchg
sbb
dec
sahf
cwde
adc
jecxz
nop
mov
xchg
jae
or
rol
ret
adc
mov
pop
mov
sub
mov
mov
mov
mov
dec
test
mov
mov
call
cmp
jl
pop
div
jae
pop
ror
and
data16
add
cmp
sbb
pop
or
ret
mov
dec
adc
or
cmp
ss
lods
sbb
jl
inc
or
jno
mov
stos
(bad)
scas
int
lods
call
xor
dec
pusha
lods
loope
xor
sub
rol
or
fbld
leave
inc
dec
and
push
jae
ret
jmp
lds
pop
test
aad
mov
repnz
or
cmp
sub
sub
dec
mov
inc
icebp
adc
xor
rol
mov
mov
das
mov
jns
sub
shl
cmp
push
inc
stos
mov
sbb
push
stos
sbb
nop
mov
xor
fisub
stos
mov
or
dec
xor
pusha
xor
popa
mov
adc
inc
mov
jmp
in
sti
mov
dec
sub
loope
jmp
call
sbb
inc
and
and
and
lods
mov
xor
mov
adc
popa
in
xchg
add
loope
popa
lods
aas
(bad)
or
inc
rcl
call
xor
sbb
nop
stc
inc
outs
loopne
or
or
inc
adc
outs
and
call
inc
lahf
rol
popa
sub
ret
mov
lea
dec
or
(bad)
out
mov
stos
jbe
add
xchg
adc
or
ins
push
jno
mov
add
das
xchg
xor
dec
add
cwde
mov
movs
xchg
fs
es
retf
retf
mov
xchg
repnz
xor
je
sar
add
xchg
pop
xor
dec
jne
push
and
in
stos
cmps
sub
xchg
adc
pop
ja
sub
popf
mov
push
clc
loop
int3
mov
pop
xchg
mov
fild
adc
jg
out
aas
sbb
adc
jmp
js
or
rcl
enter
dec
nop
jecxz
fcom
push
cmc
test
jmp
dec
hlt
jl
add
(bad)
out
push
cmovne
mov
sub
daa
dec
inc
lods
push
jle
xor
test
fcom
sbb
mov
and
sbb
into
in
call
adc
push
hlt
xchg
iret
arpl
lea
mov
les
f2xm1
jg
pop
(bad)
or
dec
xor
mov
mov
std
jae
and
inc
mov
inc
out
xchg
inc
lods
into
(bad)
and
xchg
in
push
lock
pop
lock
repnz
push
imul
xor
out
mov
(bad)
outs
lahf
mov
xor
repz
out
dec
sbb
(bad)
popf
(bad)
cli
xchg
int
sub
call
mov
or
test
loop
jl
dec
inc
ret
xor
(bad)
xor
leave
aaa
lea
mov
push
sbb
sub
and
ficom
cld
out
or
sub
mov
push
cld
fadd
cmc
or
pusha
xchg
jge
inc
xchg
pop
int3
aad
les
mov
fs
fcmovnbe
inc
push
xlat
mov
je
sbb
and
xor
ins
pop
stos
data16
cwde
popa
inc
outs
push
push
xchg
cdq
retf
adc
jb
imul
pop
repnz
into
ja
dec
mov
aad
movs
lods
push
lds
inc
mov
pop
mov
int
xchg
pop
in
xchg
push
inc
push
or
inc
outs
cmp
jbe
cmps
inc
test
pop
xor
js
iret
bnd
pop
in
mov
cdq
or
je
push
imul
jle
cmps
punpckhbw
out
or
mov
pop
mov
dec
pop
push
xor
frstor
add
cmp
fld
sbb
lahf
lahf
mov
nop
push
data16
dec
xchg
cmp
jl
(bad)
fdiv
mov
cmp
mov
jg
jb
adc
pop
addr16
cli
pushf
inc
dec
pop
stos
mov
push
in
mov
dec
pusha
xchg
mov
in
dec
push
inc
fldcw
les
aam
xchg
lea
mov
test
xchg
xor
cmp
mov
and
iret
jmp
sub
mov
and
jnp
out
pop
aad
out
rcl
gs
add
in
cmp
cdq
mov
jo
call
mov
mov
stos
das
mov
movs
push
xor
cmps
xchg
call
sub
xchg
mov
pop
and
fadd
jae
pop
and
es
xchg
add
pop
xlat
out
sti
xchg
add
call
sub
rol
pop
scas
ins
push
iret
pop
out
pop
popf
pop
push
jecxz
fadd
push
sbb
inc
push
inc
addr16
add
sbb
loope
mov
sub
(bad)
js
sbb
ficom
inc
push
ins
test
push
ret
push
xchg
aam
aas
dec
mov
leave
iret
ins
cmc
xor
das
mov
aaa
xchg
sbb
pop
dec
pushf
jmp
addr16
icebp
sbb
nop
fs
mov
mov
add
lahf
(bad)
mov
xor
sub
imul
cmps
xor
add
sbb
mov
mov
xrelease
or
dec
sbb
arpl
sti
xor
fimul
mov
jbe
mov
mov
cmc
xlat
inc
arpl
push
or
cmc
scas
inc
mov
lods
xchg
xchg
jp
in
loope
mov
clc
(bad)
mov
int3
mov
in
or
loope
or
push
push
scas
dec
arpl
leave
and
push
or
aas
nop
mov
mov
dec
std
sbb
jns
inc
xchg
mov
sbb
getsec
inc
(bad)
push
add
loopne
idiv
test
call
call
adc
and
call
pop
outs
or
jns
push
mov
cmps
movs
sti
push
xchg
mov
inc
jns
and
enter
mov
lds
std
mov
xor
cli
aaa
pusha
sbb
hlt
push
(bad)
js
test
call
fistp
push
sub
int3
mov
lock
xchg
inc
adc
fwait
test
(bad)
and
cmp
dec
outs
mov
or
adc
aam
call
fcom
add
adc
cmc
add
ins
inc
add
and
pop
mov
(bad)
push
movs
imul
adc
mov
out
pop
into
mov
mov
mov
push
sub
pop
lods
cli
pushf
mov
in
les
popf
call
mov
sar
icebp
inc
adc
in
test
pop
jae
inc
or
pop
inc
cmp
aad
loope
mov
jns
sub
pop
enter
inc
gs
pushw
out
xor
enter
sti
in
bound
xchg
lock
out
pop
test
mul
pop
loopne
add
xchg
bound
push
iret
pop
pop
rol
ss
scas
pop
inc
pop
ja
cmp
gs
aam
add
sbb
xlat
lds
fiadd
enter
lea
mov
mov
in
arpl
jb
push
and
push
sti
or
and
add
in
cmp
jmp
mov
idiv
stos
shl
jmp
sbb
xor
push
push
popa
(bad)
push
es
loopne
ret
test
(bad)
mov
loope
or
mov
inc
ja
sbb
jmp
pop
(bad)
int3
adc
adc
(bad)
adc
fmul
test
fdivr
adc
int
lds
mov
idiv
stos
pop
out
dec
cli
sbb
addr16
pusha
call
jecxz
xor
enter
sub
jnp
xor
ficom
je
addr16
icebp
or
push
sahf
icebp
imul
das
mov
mov
inc
not
and
outs
ret
and
dec
adc
sbb
xchg
jno
and
or
xchg
cmp
fcom
pushf
test
cmp
pop
bound
lds
pusha
xlat
arpl
add
ins
and
sub
cwde
push
mov
mov
outs
daa
mov
imul
lds
push
or
bound
ds
imul
sub
neg
dec
sbb
fwait
mov
jl
fld
fcomp
or
test
sbb
jmp
in
arpl
dec
jmp
mov
jle
dec
aaa
in
(bad)
rol
dec
dec
mov
repnz
mov
shl
adc
xor
out
popf
dec
inc
cld
(bad)
outs
bound
movs
mov
mov
mov
out
mov
inc
jae
add
mov
add
cmps
sar
daa
dec
nop
ja
and
and
inc
jno
cmp
xlat
shl
jmp
adc
sbb
mov
sbb
pop
std
cmps
mov
leave
cwde
inc
dec
out
and
cmps
jbe
xchg
add
rcr
daa
in
mov
dec
pop
pop
dec
mov
dec
mov
addr16
mov
dec
adc
das
fwait
dec
ret
xor
addr16
inc
mov
push
fldenv
mov
inc
fsubr
(bad)
fidiv
add
sub
retf
xor
sub
(bad)
cmps
xor
inc
sub
pop
lock
push
sub
(bad)
cmc
pop
adc
jnp
jnp
push
repnz
sub
icebp
push
jmp
jnp
xchg
and
fild
push
stos
dec
leave
inc
dec
mov
rcl
fmul
push
scas
imul
in
sbb
cli
lahf
sub
jg
out
adc
jmp
enter
mov
addr16
in
pop
pop
aad
in
sbb
bnd
in
(bad)
loopne
dec
pop
loope
mov
jo
les
(bad)
push
xlat
fadd
mov
imul
stc
mov
mov
jns
fisttp
mov
fcomp
mov
test
sub
not
popa
lock
scas
xor
sub
cmp
nop
int3
xor
sub
cmp
retf
(bad)
jecxz
inc
rcr
push
push
(bad)
adc
les
ret
mov
sbb
pop
cdq
mov
in
and
fstp
add
inc
cwde
gs
out
dec
movs
pop
xchg
int3
scas
mov
or
and
mov
jg
mul
sbb
jbe
lea
dec
pushf
sbb
mov
jo
in
xor
jp
adc
fs
sbb
popa
cwde
aad
mov
ds
ja
arpl
inc
jne
(bad)
jns
data16
add
add
(bad)
and
mov
or
(bad)
call
pop
mov
jg
sub
push
mov
in
daa
dec
push
mov
and
pusha
outs
scas
push
pop
sar
loopne
adc
jne
je
leave
sbb
xchg
push
shl
mov
sub
inc
sti
test
into
retf
cmp
out
ror
out
mov
mov
retf
cdq
test
mov
add
mov
loopne
shl
sbb
mov
mov
or
shr
jge
ss
repz
xor
out
push
push
push
ror
xchg
loope
jbe
lahf
sti
dec
ins
mov
rcl
xor
(bad)
in
out
or
inc
or
test
xchg
repz
xor
inc
pop
fstp
cmps
mov
lock
dec
mov
cwde
mov
fld
jnp
nop
cmp
pop
ds
fst
nop
outs
fisub
mov
xchg
icebp
xor
outs
in
sbb
test
loop
fidiv
mov
je
mov
jmp
xchg
fcmovnb
sub
jecxz
sbb
or
xchg
daa
cwde
adc
fistp
iret
or
in
or
mov
inc
je
push
xchg
jge
iret
int3
sahf
fsubr
movs
call
dec
shr
adc
cli
ror
pop
loop
cmp
leave
je
sub
xchg
jmp
mov
arpl
sbb
sub
repnz
fcomp
and
xchg
mov
mov
dec
inc
xchg
and
sbb
xchg
jbe
xchg
cmp
lock
cmp
das
mov
pop
inc
jmp
dec
scas
add
retf
push
jmp
jl
push
test
in
sti
add
pusha
dec
cmp
dec
int
data16
cli
pop
sti
dec
int
test
ror
adc
out
xchg
pop
and
aad
cld
cmp
and
scas
mov
adc
popf
retf
xchg
adc
add
sbb
xor
mov
rcl
(bad)
push
jbe
scas
jg
int
cdq
aas
sub
mov
mov
mov
xchg
shl
ror
dec
cmp
das
sbb
and
jmp
or
imul
adc
jl
aam
mov
mov
sbb
cmp
push
imul
pop
mov
lods
jmp
outs
jno
and
outs
xchg
addr16
push
dec
imul
fst
(bad)
adc
mov
(bad)
das
pusha
cmp
mov
sbb
push
pop
and
xchg
(bad)
cmp
popa
movs
imul
iret
call
dec
je
xor
aaa
pop
mov
sbb
pop
or
inc
cli
mov
fsubr
fnstcw
push
(bad)
xlat
add
adc
mov
adc
inc
test
inc
mov
mov
sbb
jge
adc
or
pop
js
arpl
ret
or
mov
pushf
mov
xchg
popa
sub
inc
sar
adc
mov
in
(bad)
mov
movs
cmp
stos
xchg
jae
stos
(bad)
mov
nop
icebp
scas
mov
out
test
sbb
ss
cmp
add
xor
pop
mov
sbb
jl
fld
mov
add
imul
mov
out
in
sahf
adc
retf
mov
int
test
add
(bad)
sbb
fcom
dec
lods
cmp
sub
jle
push
call
faddp
jp
add
mov
(bad)
jge
sub
in
fcomp
mov
gs
mov
jb
iret
jmp
cmp
sar
xchg
mov
(bad)
(bad)
fcom
sbb
test
movs
shr
push
mov
push
sbb
lods
test
test
or
loop
mov
out
jl
mov
mov
push
push
pcmpgtb
daa
lds
cmp
movs
fcom
dec
pop
jp
test
lahf
jecxz
mov
jne
loope
push
xor
in
rcr
data16
shl
and
rol
push
push
xchg
nop
neg
fidivr
arpl
hlt
fstp
ins
push
in
fsub
aas
repnz
cdq
xchg
push
fld
mov
adc
pushf
jns
lahf
jne
jg
pushf
sti
dec
cmp
out
xchg
jns
inc
or
mov
push
dec
pusha
cmp
scas
dec
push
mov
stc
fild
sbb
call
xor
sub
jae
dec
xor
(bad)
mov
icebp
mov
pop
xchg
ret
push
popf
das
dec
add
sahf
or
adc
xor
mov
push
cld
dec
and
dec
cli
xchg
ds
xor
sub
repnz
pop
jb
mov
(bad)
js
push
pop
je
outs
xor
outs
pop
call
lock
int
or
adc
hlt
cmp
sub
and
mov
and
into
xor
dec
or
jecxz
jb
jmp
inc
inc
clc
test
scas
jl
or
in
jno
xor
stos
ficom
cmps
push
dec
push
jp
dec
push
test
out
jmp
dec
retf
mov
sub
push
jne
inc
add
jecxz
inc
movs
jbe
jp
dec
cli
out
pop
push
cmp
aas
xor
pop
inc
push
(bad)
imul
ror
push
mov
adc
push
lea
fnstsw
loope
dec
sub
loop
test
push
(bad)
or
inc
cmp
lock
inc
test
dec
imul
cs
iret
es
or
xlat
pop
test
inc
inc
push
adc
sar
mov
sahf
mov
sbb
mov
fucom
fcomp
mov
adc
test
cli
mov
mov
pop
xor
adc
sbb
loope
adc
dec
mov
(bad)
call
jl
dec
movs
ins
lahf
cli
mov
jp
adc
adc
cmps
imul
sbb
arpl
cmp
mov
and
mov
call
icebp
out
dec
fist
fsubr
jmp
adc
xchg
dec
outs
xchg
(bad)
std
mov
scas
fwait
cvtdq2ps
sub
fucomi
retf
(bad)
mov
adc
nop
ins
hlt
dec
add
or
cmps
jmp
mov
in
mov
int3
xor
jnp
sbb
mov
repz
sahf
jae
xor
jno
pop
push
sub
mov
dec
aas
in
outs
repnz
sbb
enter
xor
mov
pop
and
pop
adc
fs
add
sar
pop
data16
pop
popa
mov
popf
xor
jmp
call
or
sbb
inc
clc
out
in
dec
mov
lods
mov
rol
mov
mov
inc
add
int
xlat
call
ror
cmps
pop
(bad)
mov
mov
(bad)
test
cld
out
mov
push
push
mov
(bad)
cmp
aam
pop
test
in
int
pop
inc
fld
mov
iret
or
imul
fs
add
mul
pop
dec
shr
or
(bad)
call
ins
icebp
cmp
dec
je
dec
dec
out
rol
mov
scas
gs
mov
inc
and
ins
int
add
cmc
mov
or
mov
loop
(bad)
enter
xchg
dec
push
test
scas
push
(bad)
int
sub
retf
ret
mov
fsubr
test
cmp
xchg
mov
call
jl
fiadd
int3
jecxz
int3
daa
push
leave
sti
stc
and
enter
ja
mov
dec
outs
imul
imul
bnd
out
jp
push
imul
(bad)
mov
lea
push
rcl
push
lahf
cmc
pusha
lds
dec
std
sbb
jl
xchg
xchg
xchg
das
leave
mov
jl
push
push
dec
cmp
in
push
xchg
rcl
lock
popa
xor
dec
punpckhbw
pushf
je
jl
cmp
lods
inc
mov
or
xchg
cmp
and
sahf
add
xchg
mov
xchg
(bad)
icebp
test
sbb
movs
iret
jp
ja
jmp
sub
arpl
xchg
xchg
xchg
push
into
or
movs
out
fmulp
outs
add
or
mov
cmp
push
sbb
pop
jo
test
sbb
out
sbb
xor
add
dec
(bad)
jp
jae
shl
arpl
sbb
daa
jae
xchg
imul
cmps
inc
test
mov
or
cli
or
sbb
push
sub
add
imul
loopne
or
arpl
cmp
aaa
adc
jmp
jp
pop
test
cld
jle
scas
adc
test
int
out
test
xor
enter
(bad)
mov
fsubr
xor
sbb
pusha
add
jecxz
xor
push
jb
push
out
cmp
inc
icebp
test
mov
(bad)
mov
(bad)
(bad)
scas
stos
sub
push
test
hlt
inc
pushf
xchg
outs
aaa
pop
xchg
dec
loopne
dec
mov
out
inc
das
jae
adc
pop
dec
push
out
push
cmovge
les
sbb
jbe
add
movs
fistp
cmp
lods
sub
mov
vpsubw
push
lods
dec
adc
xchg
js
and
ror
mov
fadd
jp
add
pusha
inc
sub
mov
mov
adc
(bad)
jecxz
(bad)
jae
aas
pusha
movs
xchg
push
(bad)
jns
int
xchg
out
sub
pop
ss
jno
push
sahf
sbb
cmp
sub
sub
pop
adc
in
(bad)
sub
pop
jl
mov
and
pop
loopne
push
setae
aas
sti
and
cmc
jae
jmp
xor
cmps
inc
je
lods
jo
or
call
mov
jne
retf
inc
das
ret
rol
cmp
xchg
repz
loope
sar
cmps
add
pop
push
lds
sub
sti
in
and
push
xchg
ss
xor
or
or
or
jo
mov
inc
add
fst
xchg
mov
sub
ficom
je
(bad)
data16
inc
(bad)
or
call
mov
repnz
sbb
ret
cmps
imul
xor
xchg
ss
mov
mov
dec
test
mov
cmp
cs
iret
push
and
jmp
out
jecxz
xor
xor
rol
mov
mov
pop
dec
mov
imul
dec
push
cmp
mov
jnp
sbb
dec
retf
xor
xchg
inc
or
test
cmp
jae
lock
dec
cmps
(bad)
fwait
push
icebp
mov
cmp
ds
xor
mov
push
mov
jmp
xor
pop
add
ins
adc
inc
int3
fld
ret
mov
pop
rcl
ds
add
cmp
ja
stos
fild
bound
ret
(bad)
sbb
cwde
enter
add
cwde
mov
mov
rcl
push
add
adc
scas
movs
test
jo
arpl
mov
jecxz
pop
ret
out
sar
fstp
pop
ret
or
dec
shl
mov
pop
js
hlt
adc
jmp
and
movs
push
inc
mov
sub
sub
lahf
leave
mov
mov
leave
xor
inc
jle
(bad)
pop
and
pop
jl
mov
pop
inc
fisttp
sub
adc
xor
add
jae
push
push
jae
repz
cmp
sbb
mov
test
jns
pop
out
xor
fmul
sahf
(bad)
outs
and
jp
and
xchg
js
sbb
(bad)
in
add
(bad)
push
sub
xor
shl
mov
xor
adc
movs
push
scas
gs
scas
movs
mov
jp
push
mov
shl
xchg
mov
repnz
and
mov
call
push
scas
shr
jp
xchg
cmps
mov
inc
inc
xchg
lods
nop
repnz
shl
sar
ss
mov
or
sbb
mov
adc
xor
(bad)
dec
pop
push
adc
push
inc
nop
or
mov
test
cmps
adc
dec
idiv
cmp
pop
mov
dec
outs
mov
call
mov
mov
and
and
inc
aad
cli
and
addr16
in
out
call
dec
mov
jge
or
pop
dec
(bad)
ror
or
cld
pop
sbb
xlat
data16
mov
xchg
add
cs
xchg
jne
sti
push
(bad)
and
repnz
pop
idiv
lods
jne
int
or
mov
inc
test
ins
sbb
movs
out
leave
sub
mov
out
arpl
fisttp
fld
inc
add
je
adc
sub
out
mov
lds
jl
daa
pop
mov
cmp
push
cmp
call
mov
and
xlat
lds
adc
ficom
cwde
pop
sahf
push
loopne
inc
push
retf
in
push
enter
adc
cmovle
adc
dec
(bad)
mul
add
adc
adc
jmp
push
cdq
fisttp
(bad)
fdivr
loope
sub
gs
adc
pop
sbb
sbb
mov
popf
es
daa
xor
(bad)
or
in
pop
test
push
xchg
jmp
xor
xor
cmps
push
shl
arpl
repnz
mov
in
icebp
ins
xor
xchg
inc
sub
mov
adc
outs
dec
rcr
sub
call
mov
ficomp
(bad)
inc
mov
xor
aad
repz
sbb
jp
dec
and
gs
jp
hlt
pop
inc
(bad)
idiv
cmp
dec
inc
aaa
jmp
retf
pop
bound
bswap
xor
mov
ins
test
lock
mov
mov
dec
retf
test
sbb
adc
jo
aas
int
fdivr
imul
fst
sub
les
sbb
cld
pop
mov
data16
loop
mov
xchg
enter
ds
dec
sub
repnz
(bad)
popa
xor
jae
scas
sub
xor
imul
call
jbe
jno
lock
adc
xor
pop
push
movs
or
push
scas
aam
ins
std
xchg
xchg
les
mov
inc
cwde
xlat
stc
call
or
retf
cmp
xor
or
std
jbe
call
jmp
rol
cmps
stos
xor
jp
add
sub
pop
or
adc
aam
mov
xchg
jp
out
dec
enter
(bad)
adc
arpl
mov
mov
push
ret
dec
push
lds
mov
pop
or
cmp
and
add
push
adc
push
mov
add
or
push
jbe
xor
push
add
inc
outs
iret
sti
ror
ss
repz
xor
movs
or
lahf
lds
fisubr
idiv
mov
imul
mov
dec
or
fs
xor
test
xchg
xlat
sar
out
lahf
jg
mov
shr
pop
sbb
outs
add
test
mov
sub
cmps
jecxz
mov
fimul
adc
pop
adc
sbb
dec
stos
lods
imul
push
push
gs
jbe
pop
push
xchg
fucomi
and
and
sub
sbb
retf
lock
or
(bad)
xchg
retf
push
adc
cmc
or
scas
or
dec
mov
inc
adc
cmp
icebp
lock
push
retf
sahf
cmp
mov
adc
in
sub
pop
and
test
adc
adc
push
fwait
pop
jno
shr
out
xor
cmp
pushf
imul
outs
aam
fldcw
push
inc
sbb
and
repz
inc
pushf
aam
lahf
into
les
mov
hlt
icebp
sbb
cmp
xchg
loope
cmp
fcomip
xchg
jb
xchg
dec
mov
push
xlat
aam
cmp
stos
or
pop
mov
dec
nop
in
lods
dec
or
(bad)
or
mov
push
pop
pop
arpl
or
pop
xchg
shl
inc
outs
xchg
cmp
fst
out
mov
(bad)
lahf
scas
popa
jns
push
add
hlt
inc
out
sub
pop
mov
xchg
mov
shl
inc
push
pop
test
jl
mov
loope
add
sub
imul
rcl
mov
push
loope
mov
int3
mov
ret
push
test
stos
loopne
push
mov
cmp
movs
in
(bad)
movs
jbe
aaa
pushf
nop
jbe
pop
nop
cli
jge
add
dec
inc
mov
ficomp
lds
adc
repnz
adc
jne
sub
sub
(bad)
push
(bad)
sub
scas
mov
iret
fidivr
add
mov
sbb
(bad)
inc
stos
mov
stc
and
sbb
mov
dec
sbb
or
test
std
enter
lods
pop
test
push
fcmovu
sti
jmp
push
stos
ins
jne
push
js
call
and
ret
mov
mov
adc
lds
enter
push
inc
push
lahf
pop
inc
fsub
jne
fsubr
xor
shl
xor
xchg
rcl
and
repnz
je
(bad)
scas
jp
cdq
dec
cmp
or
pop
adc
xchg
jae
xor
test
aas
imul
imul
jge
mov
icebp
pop
cmp
push
cmp
xchg
pop
fisttp
cmc
sub
stos
cld
mov
lea
mov
and
push
add
jecxz
cmc
outs
inc
xor
mov
into
pusha
cmps
test
and
adc
pop
popf
dec
sub
cmp
aaa
lahf
xchg
repnz
cli
cmps
movs
(bad)
femms
mov
cmp
or
fadd
imul
inc
jne
xchg
dec
repz
jp
movs
mov
jg
mov
or
shl
jmp
loopne
mov
addps
sti
mov
inc
lods
add
aad
and
and
mov
int
push
retf
xchg
xor
mov
xsaveopt
mov
sbb
jl
pop
pop
mov
cld
inc
scas
sub
mov
out
push
pop
nop
(bad)
cmp
sub
loopne
loopne
mov
cmc
xlat
and
xor
outs
imul
fs
jle
lods
int
pop
nop
cmp
inc
mov
cdq
and
inc
data16
adc
stos
sti
cld
aad
push
aaa
sub
push
scas
dec
jne
adc
push
or
or
cmp
mov
outs
cdq
cs
jae
sub
push
xchg
add
dec
mov
dec
xlat
sub
push
retf
dec
outs
fs
or
lea
and
or
inc
add
cmp
cmp
and
imul
sub
cs
mov
scas
inc
daa
sbb
les
cmc
push
inc
clc
dec
xor
mov
jo
sub
inc
lahf
in
sub
pop
inc
das
inc
rcr
adc
adc
mov
and
lods
(bad)
and
pop
pop
pop
dec
mov
out
std
jns
cmp
aam
mov
sbb
gs
adc
in
cld
in
xchg
push
and
jmp
daa
clc
in
in
aam
adc
adc
xor
retf
add
pop
ret
cmp
or
les
repz
stc
stos
mov
jp
pop
jmp
ja
mov
jne
jbe
fiadd
add
das
daa
call
xor
dec
cmc
call
sbb
fldenv
int
adc
loope
retf
(bad)
mov
dec
xor
inc
data16
push
mov
adc
fdivr
jbe
int
fs
lahf
push
test
mov
ret
std
sub
std
jmp
inc
xchg
mov
repz
(bad)
dec
test
dec
call
aas
and
mov
iret
jnp
push
cmps
dec
daa
popf
xor
jno
push
rcl
xor
add
repz
inc
sub
pusha
das
jp
mov
iret
sbb
cmc
mov
or
pop
and
inc
and
arpl
pop
sbb
jne
adc
gs
std
add
cmc
xchg
rcr
sub
rdmsr
aad
jmp
pusha
sub
push
dec
dec
xchg
imul
fiadd
push
pusha
(bad)
mov
js
or
cmps
cs
add
sub
ror
adc
add
mov
mov
mov
push
fcom
push
cdq
xchg
rcr
mov
bsf
je
inc
pop
jmp
sub
mov
sbb
adc
push
loop
mov
iret
add
fsub
pop
xor
and
or
not
(bad)
sbb
cwde
inc
xchg
and
dec
fisttp
push
pushf
push
enter
xor
jmp
push
xor
arpl
xchg
clc
inc
mov
mov
mov
pop
add
lahf
push
inc
lock
dec
dec
add
xor
test
push
test
fisub
shl
inc
call
test
aam
mov
mov
or
sar
pop
movs
cs
or
xchg
mov
push
stc
int
inc
pushf
xor
aad
cmp
push
sbb
cwde
sbb
cmp
pop
dec
xor
mov
pop
xor
aaa
les
pop
sbb
adc
pop
xchg
mov
shl
bnd
pop
and
bound
jecxz
popa
ins
lahf
xchg
dec
int3
sub
sub
push
lods
fld
pop
and
fld
mov
jecxz
jae
cmps
pusha
jns
mov
add
and
add
loop
jle
mov
ins
dec
rol
xchg
loop
js
jp
inc
fmul
push
je
(bad)
sub
cmp
jne
ja
push
call
les
pop
ror
nop
imul
inc
das
js
xchg
outs
mov
xchg
sub
add
fisub
pop
and
jo
and
idiv
sbb
push
mov
adc
cmp
dec
sbb
call
push
cmps
aam
adc
sub
clc
and
mov
es
jae
js
jmp
cmp
jb
jae
inc
inc
jns
enter
add
cli
push
xchg
nop
cwde
aas
adc
hlt
out
enter
(bad)
fld
ja
adc
jno
lds
mov
inc
pop
fs
jmp
in
cmps
and
mov
les
(bad)
jbe
mul
(bad)
xchg
ins
xor
xor
push
imul
mov
dec
in
shl
inc
and
push
adc
mov
jge
jbe
cmp
cmps
xlat
in
cwde
popf
mov
iret
or
push
inc
inc
push
ror
lods
mov
lea
mov
push
push
movs
xchg
mov
xor
ffree
inc
inc
add
das
inc
and
jl
mov
sub
movs
std
out
loope
popf
cwde
inc
mov
and
sub
xchg
std
inc
das
aam
shl
xor
dec
into
rol
fwait
pop
inc
mov
enter
lods
jg
push
mov
and
dec
shr
adc
lea
pop
sbb
cmps
call
xchg
mov
outs
addr16
or
xchg
aaa
icebp
mov
and
(bad)
dec
adc
cli
lahf
shl
push
(bad)
call
loopne
jae
or
ret
lahf
pop
jne
(bad)
xchg
repnz
cmp
ss
ror
into
inc
inc
out
es
xchg
cvtpi2ps
xchg
add
push
cs
sbb
xlat
jp
push
clc
sbb
ss
test
cdq
mov
push
fcomi
adc
xchg
xchg
stos
ins
enter
ja
leave
pop
mov
cmp
add
les
bound
ss
out
jnp
mul
shl
add
mov
sbb
pop
push
ret
cli
inc
xchg
stos
pop
pusha
popf
xor
push
jnp
or
inc
cmp
imul
push
jge
mov
dec
cli
mov
mov
in
fcomp
mov
fimul
movs
sahf
cdq
adc
push
sti
out
jle
jae
inc
mov
xor
mov
jnp
(bad)
push
inc
cmp
cmp
and
icebp
sbb
jo
mov
jmp
sub
rcr
cld
and
mov
sub
(bad)
jecxz
mov
pop
(bad)
add
out
sti
push
jge
(bad)
mov
and
and
stc
sub
test
xchg
retf
inc
mov
xchg
xchg
in
ins
mov
cmp
call
cli
push
ds
mov
pop
(bad)
rol
pop
mov
add
icebp
and
pop
imul
fwait
xchg
jmp
jg
ins
push
push
pop
ror
pusha
cwde
outs
sbb
dec
sub
fwait
es
test
in
lds
int3
push
pusha
in
xchg
and
mov
xchg
pop
mov
pop
hlt
push
xor
iret
retf
movs
(bad)
xchg
xor
jnp
mov
imul
shl
inc
idiv
retf
inc
mov
inc
icebp
sti
or
addr16
mov
imul
in
aas
mov
sbb
pop
xlat
mov
sub
sub
repnz
aad
(bad)
jle
push
lods
mov
leave
dec
repz
fucomi
call
push
mov
test
and
out
inc
sub
pop
int
cmps
dec
pop
push
sbb
jmp
loope
mov
dec
lock
loope
sahf
pop
stos
lahf
icebp
adc
cmps
dec
jo
cs
outs
call
and
int
dec
mov
imul
xor
inc
rcr
cmp
shl
loopne
pop
shl
sbb
push
jg
xchg
inc
into
push
inc
mov
mov
repnz
ret
jmp
fcmove
sti
cmp
jmp
outs
pop
dec
adc
fist
test
ins
dec
out
adc
retf
adc
test
imul
push
add
jne
retf
xchg
sbb
ret
leave
mov
into
lahf
push
jmp
test
mov
sub
cmp
xchg
out
sbb
sbb
add
xchg
or
xchg
add
sbb
jge
test
js
test
push
or
pop
out
hlt
out
dec
jge
call
popf
popa
rol
add
add
or
ss
adc
sbb
lea
pop
retf
out
sub
xrelease
call
mov
inc
xor
cmps
ss
fidiv
shl
sar
sub
or
outs
cmp
into
or
push
not
loop
xchg
aaa
adc
push
iret
push
neg
or
in
mov
jecxz
mov
dec
stos
jae
xchg
xor
pop
int3
and
arpl
scas
mov
inc
mov
push
test
fs
mov
lahf
out
imul
sbb
popf
dec
push
and
push
fdivr
je
xor
or
xchg
and
mov
ret
cs
mov
test
aas
or
leave
sahf
aam
das
mov
lock
mov
jg
sub
nop
push
sub
sti
sub
mov
mov
inc
dec
addr16
sbb
push
nop
jno
fcom
sbb
sti
add
hlt
ror
hlt
hlt
xor
popa
xchg
hlt
push
push
cld
inc
mov
push
rcr
xchg
les
sub
mov
lahf
out
xor
das
push
(bad)
mov
add
leave
in
(bad)
cld
jbe
addr16
add
xchg
jnp
pop
jae
call
sub
inc
ret
ds
or
mov
push
mov
push
mov
sub
adc
sbb
shr
add
pop
bound
(bad)
test
push
jne
int3
ja
movs
addr16
cli
dec
mov
rcl
inc
jmp
add
adc
pop
lock
aad
arpl
xchg
aaa
cmp
nop
(bad)
pop
xchg
cmp
cmp
xchg
test
and
scas
lea
aam
jl
push
cmp
mov
adc
(bad)
in
in
imul
test
loop
lea
sbb
xchg
lds
ss
call
sbb
fs
enter
xor
cmc
add
xchg
ficomp
pusha
inc
mov
sub
inc
lock
xchg
dec
icebp
loope
bound
push
inc
cmp
inc
stos
enter
popa
popf
call
test
ins
xchg
(bad)
cli
clc
gs
adc
cs
fmul
and
sbb
xchg
stc
ss
xchg
bound
retf
dec
mov
add
mov
loopne
mov
clc
push
outs
dec
ror
xchg
xor
xchg
(bad)
cs
je
sbb
dec
popf
or
push
imul
sub
lock
mov
imul
mov
pop
popf
adc
ja
fsub
and
mul
fistp
inc
and
ja
shr
test
loopne
gs
xor
and
ret
sbb
popf
not
cmp
out
dec
rol
inc
out
adc
xor
jmp
sbb
mul
and
xor
mov
outs
pop
out
bound
out
jae
xchg
stos
push
xchg
pop
push
out
rcl
jns
sbb
push
test
or
inc
xor
mov
ds
adc
hlt
mov
stc
bnd
push
lahf
les
sub
xlat
ss
scas
ja
inc
mov
sub
pop
(bad)
fsub
in
xchg
adc
jmp
mov
sub
pop
jb
xchg
sbb
adc
jnp
mov
cwde
jno
ins
(bad)
mov
xchg
in
dec
push
aad
call
xchg
inc
call
(bad)
and
jae
stos
xchg
mov
dec
hlt
cmp
mov
mov
stos
cmp
aaa
lds
mov
add
sbb
pop
outs
repnz
sbb
jb
mov
and
xor
cdq
daa
inc
repz
imul
or
adc
adc
push
pop
shl
arpl
in
aaa
pop
into
mov
retf
imul
sti
or
mov
dec
mov
cmp
ins
icebp
icebp
scas
pop
cmp
mov
outs
or
or
mov
pushf
out
js
jno
pusha
mov
adc
stos
cmps
std
xor
push
cmps
mov
sbb
mov
repz
fistp
aam
push
adc
add
fnstenv
(bad)
into
ins
mov
sub
jle
out
stos
popf
dec
in
xor
shr
frstor
lock
xchg
push
jge
mov
sub
jmp
movs
cmp
rcl
jo
mov
push
pop
lahf
retf
fs
ret
jecxz
inc
sub
lds
mov
repz
fs
sar
mov
imul
mov
add
scas
sbb
aaa
adc
and
and
or
xchg
int3
add
fld
in
dec
rcr
fstp
(bad)
inc
pop
(bad)
retf
adc
repz
sub
pop
add
into
inc
xchg
fild
sub
sbb
or
or
ret
jb
retf
sub
mov
mov
sbb
xor
or
jl
jp
mov
out
(bad)
or
jmp
popf
sbb
outs
push
mov
test
int
pop
popa
rcr
adc
xor
inc
mov
stc
sahf
mov
cwde
fcom
jp
stos
int
neg
add
stos
sub
shr
out
xlat
add
pop
aam
(bad)
jg
(bad)
idiv
imul
adc
mov
loopne
aas
inc
push
and
pop
add
push
cld
or
pop
dec
mov
adc
and
test
push
pop
xchg
lahf
jno
ror
cmc
iret
retf
mov
daa
push
push
in
or
pop
push
jmp
sub
call
out
shl
scas
push
and
xor
jecxz
inc
push
sub
lahf
push
jg
mov
dec
adc
je
and
test
xor
mov
xchg
out
push
xchg
out
jne
out
int3
imul
or
jnp
sbb
push
jg
dec
jge
pop
test
adc
add
add
shl
mov
mov
jmp
or
scas
cmp
xchg
jle
pop
pop
cmp
test
mov
adc
nop
adc
mov
ret
sub
scas
inc
sub
lods
and
jbe
jmp
sbb
or
pop
or
xchg
lock
fisub
inc
(bad)
dec
std
mov
xchg
mov
mov
in
jmp
ret
dec
into
mov
and
aad
and
xchg
mov
cdq
mov
or
in
sub
stc
movs
outs
sbb
inc
dec
loopne
push
and
xchg
leave
fdivr
lods
stos
add
enter
dec
std
ja
das
push
or
repnz
std
xchg
shl
adc
dec
stos
adc
(bad)
adc
je
pop
ja
test
xchg
loop
cmp
ffreep
xchg
enter
and
jge
test
scas
or
mov
cmp
push
outs
ds
addr16
popa
and
es
xchg
(bad)
scas
jmp
mov
pusha
jp
pop
(bad)
cmp
xlat
pop
neg
shr
ret
sub
mov
jl
xchg
mov
cmp
sbb
je
cmps
js
in
in
rol
shr
je
bound
pushf
xchg
jg
pop
inc
pop
mov
rol
xor
sub
ja
hlt
leave
lods
pusha
adc
int3
lods
jno
jl
inc
lock
cmp
sti
cdq
scas
mov
jp
sub
push
jle
sub
out
aas
jns
out
das
pop
mov
cmps
push
xchg
movs
(bad)
xor
loop
loope
cmp
pop
out
sbb
aas
jmp
pop
mov
clc
dec
dec
add
jmp
pop
cmp
cdq
data16
mov
jno
xchg
sbb
ror
or
inc
mov
cwde
pop
je
iret
pop
inc
pop
mov
xchg
sbb
inc
inc
sub
lea
inc
loope
xchg
cmp
or
jecxz
int
out
out
xchg
xchg
inc
jmp
push
lods
sub
mov
push
aas
mov
int
fs
pop
push
out
stc
ror
call
inc
cmps
xor
ror
(bad)
xor
imul
outs
mov
push
cmp
cmp
and
mov
repz
mov
shl
pop
xchg
xlat
jne
test
loop
add
out
inc
pop
cmp
(bad)
das
adc
add
mov
sub
ficom
and
fadd
ins
xor
adc
outs
push
and
mov
test
add
aaa
mov
sbb
mov
xchg
rcr
push
and
cld
sbb
jl
aas
and
je
pop
(bad)
sar
and
push
cdq
fld
jl
and
mov
stos
daa
inc
jne
in
mov
shl
push
int
call
mov
xchg
and
sub
in
xchg
pusha
pop
sbb
mov
add
out
dec
loop
es
xchg
xor
out
popa
in
dec
xchg
outs
pushf
push
imul
mov
ror
or
fnstsw
mov
adc
xor
jle
js
fdivr
in
push
mov
aad
jae
inc
sub
jo
retf
xchg
js
mov
pop
jae
aad
jb
stos
or
pop
xchg
call
sub
sbb
fimul
mov
adc
jg
ret
nop
jnp
adc
lds
adc
int
pop
call
xor
pop
xor
jbe
into
push
aam
icebp
loopne
sbb
repnz
fmul
xlat
xchg
out
retf
movs
lea
adc
push
mov
inc
sbb
rol
ins
adc
jns
jmp
pop
cmp
cdq
mov
jl
jbe
inc
(bad)
mov
mov
in
dec
icebp
push
(bad)
cmps
dec
les
stos
sub
lahf
push
sub
dec
cmp
cmc
rcr
pop
pop
int3
inc
cmp
inc
popa
in
je
call
int
outs
jns
lock
sub
scas
scas
je
or
push
cmp
and
jl
mov
mov
push
ja
adc
jae
cdq
adc
adc
and
fidiv
mov
test
or
test
retf
and
scas
pop
push
mov
add
xchg
xor
jb
into
or
dec
sub
sbb
and
adc
cmp
je
js
dec
xchg
mov
int3
outs
mov
setg
fiadd
loope
add
pop
loope
aas
push
ret
jnp
add
leave
adc
in
lea
fmul
mov
out
mov
push
push
xchg
repz
outs
pop
add
push
or
mov
sub
mov
pop
xor
jecxz
xchg
adc
pop
ins
push
xchg
fisttp
ficom
jb
pop
mov
pop
fdiv
inc
int
mov
sbb
jmp
or
in
shl
mov
scas
inc
ret
lods
jmp
dec
jo
xor
inc
sbb
or
add
ins
bound
xchg
(bad)
rol
and
inc
add
xchg
pop
jmp
add
or
pop
adc
cmp
pop
or
add
outs
mov
or
xchg
das
mov
and
and
xor
or
inc
out
pusha
neg
lahf
pop
jmp
aas
maxps
sti
pop
adc
add
mov
ja
test
jnp
loope
xlat
mov
lods
div
cmc
cmp
mov
push
pushf
ret
data16
ror
test
jno
dec
jmp
adc
and
dec
jmp
in
mov
jl
pop
mov
mov
repz
sbb
mov
(bad)
push
pop
cmp
xor
mov
movs
xchg
in
mov
jg
adc
test
fisub
scas
loope
jge
shl
in
sar
sub
and
mov
dec
dec
out
call
dec
jg
fbstp
test
pop
inc
xchg
(bad)
and
and
and
cmp
inc
jl
jo
enter
outs
push
mov
fwait
ins
jge
push
fsub
mov
jp
sbb
xor
inc
loopne
in
adc
outs
pop
or
div
inc
cmp
shl
dec
loopne
aam
fnsave
(bad)
es
and
xchg
cmps
dec
or
jo
cmc
(bad)
aad
sbb
push
out
loop
xchg
or
dec
fnstsw
pop
mov
or
or
jnp
or
enter
stos
push
mov
sbb
mov
ds
adc
xchg
mov
es
call
movs
mov
js
in
ror
in
test
and
add
push
test
xchg
out
sub
xchg
fisubr
addr16
jle
add
retf
add
mov
push
adc
mov
(bad)
cmp
iret
loop
mov
mov
rcr
mov
xchg
ror
and
fisubr
push
fcmovne
into
or
(bad)
js
mov
jecxz
(bad)
add
dec
push
push
out
mov
cdq
test
xor
dec
cdq
out
push
and
in
push
add
mov
jle
retf
scas
mov
addr16
fdiv
mov
fs
push
mov
mov
sub
test
in
xor
out
pop
imul
cmps
mov
fmul
int3
pushf
jp
jnp
mov
rol
or
outs
cmps
sbb
add
(bad)
jecxz
jne
test
(bad)
cdq
outs
or
call
jns
add
test
add
out
rcr
pop
xor
loopne
aas
pop
loop
push
pop
dec
and
mov
es
mov
aaa
cli
push
arpl
xor
sti
out
inc
cmp
ins
cmp
scas
sub
sub
fwait
xchg
sbb
jg
fcmove
stos
or
sbb
test
leave
(bad)
or
jle
(bad)
mov
in
addr16
aam
adc
ja
sub
lock
or
jae
jae
jge
int3
fidiv
fidivr
lahf
pop
pop
adc
mov
mov
pop
sahf
add
push
xor
(bad)
sbb
push
pop
dec
cmp
call
inc
in
shl
add
in
add
xchg
sti
ror
ret
out
mov
mov
mov
dec
sub
jge
jl
rol
push
dec
mov
pop
imul
xor
out
inc
icebp
sbb
dec
mov
or
out
scas
je
cli
jecxz
cmp
push
mov
or
fistp
pop
push
sti
jno
jmp
cmp
in
xor
inc
arpl
fldenv
loope
stos
or
cmp
clc
cmp
jnp
hlt
jnp
push
xchg
rol
dec
gs
jg
mov
push
mov
dec
sbb
stos
xor
int3
xchg
nop
cmp
je
cmps
cli
data16
xchg
rcl
mov
or
dec
scas
in
ret
and
pop
div
shl
aaa
or
add
les
and
ss
test
push
or
loopne
and
cmc
stc
cli
scas
push
mov
inc
dec
sbb
rcl
out
les
into
xchg
loopne
test
in
(bad)
xchg
xor
jle
popf
jne
sub
pop
out
fiadd
xor
ror
jmp
(bad)
js
(bad)
cmp
xchg
or
test
cs
jp
inc
pop
jno
sbb
xchg
movsx
cli
inc
or
mov
jo
xchg
add
scas
out
cmp
cmps
push
sub
add
jl
push
ins
pusha
sub
clc
add
iret
scas
and
(bad)
popf
mov
test
fcom
into
std
dec
stos
fmul
lods
push
leave
jp
test
fcmove
ins
fsub
aam
call
les
adc
and
jecxz
cmp
add
inc
xchg
push
lea
jl
cs
cmps
jg
push
sbb
aam
rcl
pop
cmp
dec
lds
loope
jnp
loopne
adc
sti
xor
inc
out
cmp
mov
sbb
add
pusha
shl
fcomp
inc
cwde
stos
dec
xchg
push
inc
xchg
mov
fist
mov
cmp
jp
jl
fs
mov
adc
and
stc
push
jmp
aad
pop
xchg
scas
add
add
mov
add
mov
je
mov
mov
cmp
pop
aaa
fistp
jge
inc
stc
fsubr
ja
aaa
mov
jg
cwde
popf
push
jns
add
cmp
jp
and
pop
cmps
jb
push
mov
(bad)
jge
shl
inc
fbld
adc
(bad)
into
retf
data16
pop
inc
push
cmp
mov
mov
inc
repnz
sbb
dec
cli
mov
push
loop
mov
or
ja
idiv
sub
xlat
pop
mov
imul
call
jno
mov
fstp
ds
push
pop
and
and
push
xor
out
dec
(bad)
imul
mov
add
mov
or
hlt
or
pop
nop
ds
add
mov
push
inc
loop
pop
sub
rcr
or
and
mov
pop
or
mov
push
iret
iret
fstp
data16
retf
sbb
xor
add
out
and
fadd
cmp
imul
sub
and
leave
push
fldcw
xlat
cld
push
push
cmp
sbb
pop
add
shl
cmp
dec
aas
rcl
es
stos
push
jbe
nop
mov
and
mov
pop
imul
mov
rcl
or
in
cli
(bad)
jns
mov
xlat
jae
mov
stos
clc
or
push
test
push
cwde
xchg
cs
pop
inc
push
adc
scas
jo
mov
sbb
out
xchg
lea
push
xchg
dec
mov
cmc
mov
call
retf
xchg
ret
or
push
loopne
inc
pop
push
cld
popf
pop
sahf
pop
int3
ficom
adc
push
cld
(bad)
cmp
icebp
xchg
fiadd
ret
cld
mov
xchg
dec
mov
ss
push
daa
adc
push
cmps
add
retf
sub
aad
sub
js
jle
int3
adc
or
inc
sub
sbb
xchg
mov
outs
es
push
or
jno
repnz
cmp
icebp
push
fild
out
leave
pop
sti
pop
stc
fs
cdq
inc
outs
repnz
xor
or
test
pop
xor
imul
push
(bad)
and
nop
mov
push
and
std
lahf
jmp
jmp
inc
push
movs
mov
xchg
fild
jns
repnz
imul
push
jmp
pushf
mov
push
lods
daa
xchg
mov
das
aam
mov
mov
addr16
jmp
inc
jns
ror
pop
and
lock
jge
push
sbb
js
es
xchg
into
mov
xchg
fs
cmp
std
sbb
mov
lods
movs
ret
movs
pushf
fst
out
jl
cmp
jns
iret
enter
dec
dec
and
imul
jns
nop
popa
in
fist
lods
jae
(bad)
jmp
mov
xchg
ror
inc
xor
or
neg
movs
out
fild
call
ss
fcom
pop
xor
pop
and
popa
movs
div
cmp
bound
sub
or
enter
mov
mov
outs
sbb
dec
ds
imul
cmp
push
mov
xor
leave
addr16
and
loop
lock
mov
jmp
or
jg
mov
sub
addr16
push
loopne
test
mov
dec
shr
test
push
(bad)
mov
dec
xlat
push
dec
or
jmp
cli
fst
jmp
sar
xor
xor
pop
inc
mov
push
jbe
cwde
jle
xchg
xchg
ret
out
sar
mov
mov
push
add
push
mul
fs
gs
and
pushf
loop
xor
fld
mov
enter
test
add
jmp
cmp
pop
mov
repz
mov
sti
and
retf
jmp
ret
add
les
jno
xchg
or
dec
or
cld
add
jge
inc
jae
imul
sbb
jg
lahf
fnstenv
ret
daa
bound
dec
mov
push
or
push
jl
mov
iret
arpl
(bad)
lds
push
adc
sub
and
retf
push
outs
pop
(bad)
sub
add
cmc
push
jl
adc
mov
pop
cwde
ja
ret
loope
pushf
inc
sub
call
xchg
pop
ficomp
jns
push
mov
(bad)
movs
pop
fimul
cmp
pushf
test
fild
je
mov
pop
add
pop
xchg
je
lea
fldl2e
outs
mov
call
jbe
lock
movs
inc
in
scas
sub
outs
mov
xor
adc
sub
lods
pop
xrelease
xor
xchg
mov
and
std
fisttp
dec
sub
movlps
sbb
mov
push
jmp
cmp
cmp
mov
outs
adc
jae
int3
mov
add
xchg
dec
and
test
xchg
inc
fsub
repnz
jmp
cmp
push
iret
mov
jle
push
fist
inc
dec
jmp
popa
dec
std
push
cmp
mov
and
ds
mov
pop
mov
lea
pop
lahf
or
push
stc
mov
mov
xor
test
inc
call
cmp
and
in
mov
adc
mov
xchg
mov
cmp
lods
inc
fdiv
mov
pop
xchg
test
std
sbb
cmp
aam
push
retf
in
add
and
xchg
adc
push
data16
dec
in
inc
sub
jbe
ss
das
adc
sub
or
add
outs
or
mov
rol
push
(bad)
jecxz
comiss
add
mov
fwait
stc
and
repz
loopne
jmp
(bad)
push
lea
outs
mov
jb
sahf
mov
call
mov
loop
movs
or
and
jne
mov
cmc
pop
jmp
sbb
or
nop
rol
rcr
push
scas
sahf
int3
stos
es
mul
sub
in
aad
xor
sub
or
jno
loop
cbw
int
or
shl
outs
retf
into
sub
aad
sbb
cmp
cmp
inc
adc
popf
inc
mov
adc
fst
cmp
pop
outs
jge
sbb
fnsave
mov
imul
pop
call
cmp
xchg
xchg
mov
rol
test
test
mov
sti
push
in
(bad)
popf
xor
pop
sbb
dec
psubb
stos
retf
cld
adc
dec
call
add
es
adc
cmp
jp
and
ss
shr
pop
movs
fsub
mov
adc
cmp
mov
das
hlt
xchg
dec
mov
and
cmp
inc
jecxz
mov
enter
ficom
push
inc
stc
out
jmp
mov
xchg
or
scas
or
repnz
(bad)
(bad)
test
push
add
mov
(bad)
jmp
mov
sar
ficom
fdivp
inc
shl
push
jne
shl
cmp
xor
outs
mov
xchg
cld
fld
sub
imul
push
jecxz
(bad)
(bad)
scas
mov
push
push
shl
add
loopne
push
jg
sbb
sbb
adc
lds
xchg
in
lods
repz
jmp
dec
ret
bound
test
mov
pop
ins
test
lods
mov
clc
in
ja
inc
add
ins
retf
cmp
sar
out
mov
aad
mov
push
push
inc
dec
push
lods
icebp
cmp
pop
out
sub
test
cmp
je
fistp
arpl
popf
lahf
loope
add
inc
loope
fwait
repz
ficomp
cdq
ficom
fsub
mov
push
xchg
mov
push
pop
or
or
push
inc
call
cmps
push
nop
xchg
pushf
dec
aaa
in
clc
sahf
xor
xchg
fistp
fs
sti
jp
mov
cdq
sti
and
dec
cmp
adc
jmp
dec
cmp
cmp
pushf
pop
push
inc
mov
rol
dec
and
repnz
inc
test
(bad)
(bad)
or
cmp
repz
ss
loopne
bound
ja
dec
pop
sahf
push
mov
pop
push
in
push
xchg
mov
ret
mov
pop
movs
enter
cmc
xor
adc
(bad)
mov
xchg
sub
movs
jle
ret
pop
dec
std
clc
loopne
gs
pop
jae
rcl
jb
add
jp
pop
adc
mov
xor
and
and
out
sbb
movs
or
scas
ins
mov
add
mov
inc
inc
adc
popf
xchg
fs
xchg
pusha
fisub
adc
mov
inc
mov
jno
out
add
mov
and
and
iret
ret
sahf
sub
test
nop
jge
test
xlat
pop
mov
jecxz
pop
mov
fstp
das
and
mov
cmp
xchg
sbb
push
dec
js
add
aam
adc
pop
(bad)
mov
dec
or
bound
pop
int3
cdq
mov
test
int
arpl
rcr
xchg
js
xchg
jmp
add
jmp
in
and
cwde
std
adc
aad
push
pop
pop
jne
test
iret
add
cwde
inc
jns
cli
ds
dec
in
push
add
icebp
fdivr
fs
pop
adc
outs
popa
sub
dec
or
lock
xchg
add
jle
les
push
add
lea
push
or
jg
mov
add
das
jg
cmp
fistp
(bad)
push
mov
add
push
int
cmp
jp
call
cmp
enter
rcl
daa
pop
shl
(bad)
xor
pop
aaa
push
lea
bound
stc
cld
enter
mov
rcl
sbb
push
ss
std
rep
push
test
stos
ins
cmps
in
or
sti
mov
fidiv
cmp
dec
mov
pop
stc
sbb
inc
mov
cmps
js
lock
iret
call
jmp
jmp
mov
push
cwde
and
addr16
add
test
xchg
sbb
rcr
outs
or
aam
scas
add
aaa
sbb
cmp
jp
inc
dec
hlt
(bad)
mov
pop
retf
out
or
inc
sar
call
ret
scas
mov
(bad)
mov
(bad)
stc
cld
bound
loope
sbb
fwait
sub
pop
cdq
pop
jbe
xor
pop
cdq
inc
add
or
mov
fs
inc
jne
retf
mov
dec
mov
cmps
daa
retf
mov
shl
mov
and
or
nop
mov
sbb
stos
and
addr16
mov
xchg
dec
xchg
push
shl
mov
adc
mov
add
dec
dec
sahf
cmps
xchg
add
sub
dec
int3
(bad)
std
adc
test
add
xor
aad
sar
rcl
sub
mov
xor
cmp
inc
test
call
fwait
adc
rcl
dec
mov
test
mov
push
stc
pop
pop
or
loope
xchg
ror
xchg
das
xchg
dec
mov
call
jbe
add
adc
dec
es
out
add
inc
stc
js
xchg
pop
enter
sub
push
stos
pop
xor
mov
pop
inc
(bad)
out
das
push
int3
jne
sbb
les
lahf
mov
imul
fstp
fild
and
and
mov
pop
sub
hlt
mov
movs
rcl
js
lock
nop
shr
shl
imul
mov
mov
stc
out
or
sub
mov
lahf
sti
push
call
or
call
sub
xchg
or
mov
sbb
imul
push
call
jne
out
loopne
test
jge
jg
xchg
and
mov
jge
(bad)
sbb
out
inc
cmp
pop
daa
sub
and
ret
jae
in
or
repnz
pop
sbb
fisub
aas
loop
fnsave
lea
pop
or
push
into
push
bound
bnd
pop
jo
test
or
movs
xor
cmp
hlt
jmp
mov
cmp
loopne
(bad)
xchg
sar
div
add
movs
div
dec
jecxz
xor
cmps
gs
aas
add
jbe
mov
call
dec
shr
cwde
mov
scas
rol
sbb
mov
mov
pop
dec
cmc
or
mov
pop
lods
jnp
imul
push
inc
es
mov
repnz
cmc
cmps
sti
xchg
pop
inc
cmp
jmp
xchg
retf
and
fimul
dec
sub
(bad)
mov
dec
jle
xor
(bad)
pushf
xchg
mov
arpl
movs
sbb
push
cmp
inc
pop
retf
sbb
stos
jbe
(bad)
jle
stos
xlat
jns
xor
xor
jmp
pushf
mov
xchg
loop
(bad)
frstor
dec
xchg
cli
adc
sub
or
pop
mov
add
je
cmp
loopne
scas
and
ret
sbb
stos
sbb
sbb
jbe
mov
xor
retf
pop
jns
test
loopne
hlt
pop
mov
je
xor
or
es
xchg
outs
in
sbb
mov
sti
add
les
inc
jmp
xor
mov
add
push
in
fwait
imul
mov
xor
jg
out
stc
je
mov
lods
or
pop
cmps
retf
pop
js
and
cs
cmp
push
jg
pop
inc
pop
pop
adc
(bad)
in
test
hlt
ret
xor
das
fstp
fwait
scas
fisub
inc
inc
cs
push
ficom
(bad)
dec
add
push
gs
pushf
or
leave
jb
clc
stc
mov
popa
sbb
lods
int
sbb
test
mov
js
xchg
jb
or
repz
(bad)
hlt
sub
inc
sbb
dec
mov
xchg
popa
adc
hlt
inc
cld
iret
stos
and
cdq
std
xor
mov
pop
stos
dec
mov
push
inc
in
imul
sbb
repnz
mov
fcmovnbe
fcmovnu
push
mov
cmp
adc
xor
add
or
aaa
and
sbb
and
ffree
ret
dec
or
lahf
scas
jg
xchg
sbb
mov
jns
cmp
xchg
cmp
call
ss
cmps
push
call
xchg
dec
out
add
xor
xor
out
movs
int
mov
push
lds
hlt
(bad)
dec
fxch
jge
push
cmp
(bad)
out
cdq
xlat
dec
cld
(bad)
adc
outs
or
inc
in
mov
pop
retf
cmp
and
repz
sub
mov
cmps
pop
fcom
outs
rcl
inc
jle
ret
xchg
into
sbb
inc
ds
dec
adc
shl
ret
jo
sbb
mov
xchg
dec
imul
ficomp
ret
add
cdq
pop
(bad)
loop
adc
push
xor
stos
ins
add
in
aam
ja
push
ret
scas
pusha
mov
jg
mov
sub
push
mov
fild
push
scas
push
jmp
push
(bad)
cmp
movs
cmps
fisttp
daa
mov
mov
ret
imul
out
or
int
retf
cmp
dec
or
jge
into
or
jge
inc
in
out
pop
pop
sub
mov
sbb
ror
mov
mov
mov
xchg
inc
(bad)
push
test
xchg
nop
leave
mov
mov
lds
jg
imul
mov
aaa
daa
int
ss
xlat
ret
and
mov
push
mov
ret
and
out
jecxz
and
mov
call
lahf
mov
dec
(bad)
imul
xor
inc
push
pushf
rcl
(bad)
cmp
test
mov
dec
or
pop
inc
dec
mov
adc
jne
inc
pop
push
bound
inc
and
jl
and
add
mov
xchg
dec
mov
out
sub
addr16
cmp
mov
js
cmp
(bad)
push
xor
adc
outs
fst
iret
rol
and
cmp
jp
mov
xor
push
or
inc
fadd
xchg
out
pop
push
sbb
pop
pop
pop
ins
pop
nop
in
cmp
mov
push
cmp
and
push
test
mov
fisttp
rol
add
(bad)
xlat
add
inc
fs
sub
aam
clc
xor
pop
jle
xor
dec
dec
ret
cwde
(bad)
or
inc
test
inc
jb
stc
inc
jge
cmp
or
hlt
or
dec
fs
ret
mov
mov
push
cdq
add
(bad)
out
inc
into
fs
outs
add
outs
jnp
dec
nop
push
loope
aas
xor
push
aam
xchg
enter
out
mov
push
jb
inc
out
pushf
mov
fdivr
es
xchg
loope
pop
out
ror
jne
test
lods
dec
xchg
mov
out
jbe
(bad)
in
inc
out
mov
cmp
dec
ret
out
aaa
ss
dec
ret
test
jae
mov
mov
dec
mov
pop
dec
popf
mov
inc
stos
push
push
test
push
pop
and
out
cmp
loop
enter
inc
mov
mov
push
inc
lods
mov
pop
jo
and
ss
in
mov
or
add
cdq
loope
xor
or
xlat
jmp
xchg
adc
lock
push
inc
cdq
jnp
daa
lock
xor
aaa
push
xchg
mov
out
scas
int
out
call
retf
data16
push
ror
pop
inc
mov
inc
inc
rcr
test
ins
push
cmp
push
rcl
mov
xor
out
push
and
pop
mov
imul
push
movs
jbe
jmp
das
fld
sahf
dec
lods
int
aad
jns
imul
out
sbb
not
jp
and
pop
dec
mov
xor
lahf
push
cs
in
retf
sbb
scas
cmp
cmp
sbb
loopne
inc
or
mov
fwait
out
push
out
cmps
lahf
jecxz
or
dec
mul
rcr
adc
jne
hlt
mov
or
lahf
mov
or
cmp
imul
sbb
scas
xchg
or
inc
push
or
je
pop
add
std
xchg
sbb
dec
cdq
stc
add
and
and
pop
int
pop
out
push
ret
cmp
push
js
sbb
jne
mov
fisubr
pop
arpl
retf
dec
lahf
mov
pop
sub
movs
pop
mov
(bad)
fdiv
pop
(bad)
jns
xor
inc
les
sbb
sbb
fwait
and
imul
outs
add
inc
mov
(bad)
jnp
lods
jl
push
shl
mov
inc
xchg
inc
pop
push
or
inc
inc
push
stos
ja
xor
pop
push
aam
loopne
cmp
mov
retf
mov
xor
jae
sbb
mov
mov
xor
loop
dec
sti
mov
or
xchg
int3
sub
xlat
leave
dec
(bad)
scas
mov
ins
test
push
inc
or
out
or
and
dec
(bad)
adc
inc
outs
in
push
inc
rol
pop
retf
inc
and
cmc
xor
cmps
fcom
(bad)
loopne
add
ficom
call
dec
sti
sub
fcomip
pop
inc
ja
dec
push
ret
dec
xchg
retf
out
push
scas
push
mov
imul
into
call
addr16
jmp
cmp
aaa
pop
in
jbe
outs
stc
enter
xchg
jmp
jl
sub
(bad)
adc
fdiv
inc
xor
xchg
jp
(bad)
into
rcr
gs
jmp
rcl
fmul
into
enter
fwait
(bad)
sub
retf
mov
sbb
dec
or
pop
lods
mov
mov
shl
xchg
repnz
inc
fidiv
popf
in
push
cwde
mov
inc
sahf
in
sub
das
movs
sti
xchg
sbb
jl
add
mov
(bad)
ss
std
stc
iret
ret
dec
mov
addr16
xchg
xlat
pop
aas
xor
ins
sahf
cmps
inc
adc
hlt
mov
scas
fwait
xor
aas
sbb
mov
adc
fcom
sub
inc
mov
sub
fninit
jge
(bad)
xor
sti
out
lds
test
out
fdiv
sub
xor
mov
adc
jecxz
or
jp
hlt
lahf
(bad)
es
jnp
enter
sub
jp
nop
sub
mov
or
mov
mov
or
add
ret
ss
mov
fldenv
jno
pop
std
xor
sbb
sub
int3
shl
xor
sbb
cli
jae
sub
push
or
push
mov
js
mov
or
and
push
add
pusha
repnz
ror
out
int3
xchg
popf
add
retf
jg
mul
hlt
mov
mov
bound
push
cwde
outs
sbb
cld
add
ret
push
retf
adc
mov
int
int3
scas
mov
xor
jns
mov
leave
or
mov
xchg
mov
repz
das
jge
push
push
pop
push
icebp
push
shl
nop
dec
dec
les
cmps
(bad)
cmp
jmp
jae
adc
cmps
jae
into
sahf
xor
outs
sti
in
lds
scas
xchg
or
mov
or
sub
mov
out
mov
outs
lock
xor
sbb
mov
cmovl
cdq
pop
shl
jp
jbe
out
pop
test
xchg
ins
dec
sbb
jb
mov
fimul
cmp
(bad)
hlt
ret
mov
pop
je
push
mov
or
push
rcr
cmp
outs
adc
daa
push
jne
pop
xor
jb
in
mov
sbb
and
ror
and
adc
xor
fcmovu
xchg
xchg
lock
jmp
xchg
lea
retf
add
(bad)
pop
mov
jp
shr
js
imul
mov
dec
xchg
jae
inc
jmp
iret
fsubr
xchg
sbb
push
inc
mov
ret
pop
retf
(bad)
leave
sahf
aam
adc
mov
je
inc
retf
pop
inc
cmp
and
jl
iret
sbb
les
pop
pop
ins
(bad)
das
in
xchg
(bad)
cs
jns
pusha
pop
rcl
stos
clc
mov
xchg
popa
mov
xor
xor
xor
dec
dec
mov
pop
pop
(bad)
int3
xchg
jp
xlat
les
and
inc
fistp
cmp
sub
jge
mov
mov
scas
xor
repz
adc
imul
xor
popf
in
push
lea
addr16
dec
xchg
jo
mov
fimul
xor
xchg
adc
mov
inc
retf
mov
ror
sbb
fldenv
fild
cmp
pusha
mov
adc
scas
xchg
jmp
scas
rcl
out
xlat
xchg
pop
jl
aam
xor
mov
rcl
test
pop
neg
mov
and
shl
mov
sub
jmp
jno
mov
pop
lods
out
lahf
sbb
xchg
std
pop
test
cmp
stos
jns
and
shr
xchg
cmp
mov
aas
xchg
jo
dec
jo
(bad)
mov
ss
(bad)
shr
mov
aad
cdq
cmp
push
mov
out
enter
ret
aad
mov
push
jmp
add
adc
clc
inc
sub
cmp
aad
or
in
loope
neg
adc
xor
sbb
(bad)
ja
sub
xchg
mov
fcom
dec
loop
xchg
ror
xor
ret
mov
movs
cwde
std
and
push
xchg
adc
mov
sti
pop
mov
mov
stc
out
and
aas
sub
inc
sahf
cwde
add
or
jae
mov
and
xor
pop
iret
xchg
pop
push
in
push
(bad)
(bad)
arpl
push
ss
pop
xchg
sbb
xor
addr16
or
pop
pop
sbb
jmp
xor
clc
out
aam
xor
cmp
add
addr16
jecxz
inc
jle
pop
and
fnstcw
push
or
push
push
lods
sbb
call
addr16
lock
or
les
mov
in
xchg
retf
sbb
and
popa
adc
and
mov
aas
xor
jge
scas
mov
push
loop
push
imul
ret
mov
xor
inc
jo
push
and
les
xchg
pushf
stc
lods
jno
addr16
jmp
mov
adc
cmp
xor
dec
(bad)
adc
dec
pushf
dec
test
stc
sub
lods
dec
inc
xchg
push
sub
push
jge
jp
enter
pop
inc
pop
mov
jge
scas
and
xor
neg
loopne
(bad)
jae
push
mov
jbe
je
push
adc
xlat
push
into
(bad)
stos
xchg
inc
int
mov
xor
ror
inc
into
js
popa
sub
stos
sar
sub
popa
(bad)
rol
enter
cdq
push
adc
or
mov
lods
pop
add
jge
mov
arpl
and
into
push
and
push
mov
aad
retf
lahf
sub
(bad)
cs
clc
dec
jnp
jbe
xchg
push
les
enter
sbb
bound
aam
jl
add
daa
jg
dec
add
inc
mov
sbb
aam
scas
mov
sub
cli
sbb
xchg
push
int3
and
movs
and
scas
and
and
fcmovne
in
je
push
aam
adc
xchg
or
xchg
sti
adc
fidiv
jbe
scas
ins
push
test
bound
enter
stos
dec
pop
adc
adc
test
call
aam
mov
test
mov
ja
cmp
repz
dec
imul
rcl
ins
xchg
mov
ret
pop
sub
mov
pop
push
sbb
or
push
shl
gs
sub
jns
mov
mov
xor
(bad)
ror
jmp
hlt
sbb
adc
imul
pusha
repnz
and
xor
(bad)
mov
leave
inc
mov
push
(bad)
(bad)
test
xchg
xchg
xor
and
mov
push
iret
out
cdq
mov
mov
stos
sti
sub
sahf
rol
push
add
mov
dec
fnstcw
lahf
xchg
shl
das
sbb
loope
punpcklwd
push
sub
ds
imul
cmp
push
jb
retf
shl
or
mov
xchg
or
mov
or
xlat
lods
sub
and
push
repz
inc
xchg
rdtsc
shr
cmp
cmp
push
(bad)
and
popa
call
sbb
test
adc
push
rcl
sub
mov
mov
es
xchg
mov
dec
mov
push
inc
mov
mov
call
imul
out
sbb
adc
pop
add
shl
xchg
shr
test
xchg
cmp
push
(bad)
cmp
pop
jmp
mov
jge
pop
outs
jns
movs
imul
and
inc
or
sbb
aam
push
test
jmp
cmps
aam
push
out
cmps
jl
dec
gs
xor
cmp
and
xor
push
lods
in
pop
shr
dec
popf
mov
ret
push
lahf
imul
sub
jb
fstp
aad
xchg
mov
out
dec
unpckhps
int
add
sbb
imul
ss
push
popa
sti
fstp
mov
mov
mov
aaa
int
pop
mov
jmp
push
int3
mov
loopne
cld
in
cmp
out
fs
leave
imul
int
(bad)
lods
sahf
adc
xchg
fsub
out
ss
out
add
outs
mov
sbb
dec
pop
and
xchg
xchg
adc
pop
sahf
or
adc
jmp
sub
in
pop
pop
in
push
pusha
call
ins
cli
inc
add
fsubr
mov
mov
sbb
shl
xchg
daa
add
inc
inc
mov
pop
aaa
mov
(bad)
fsubr
mov
iret
xchg
inc
movs
dec
or
movs
or
mov
xor
aam
lods
movs
push
rcl
add
jae
dec
sar
xor
in
ret
(bad)
jae
push
cmp
shr
out
ds
iret
nop
pop
pushf
cdq
in
sbb
mov
jmp
xor
cli
outs
push
dec
test
movs
call
sub
add
cmp
push
rcl
xor
mov
adc
inc
fs
in
mov
pop
(bad)
fxch
dec
adc
jge
ret
les
jl
(bad)
mov
add
in
test
add
mov
loope
fst
push
loope
jmp
ret
sub
mov
enter
add
add
cmc
xchg
xchg
mov
add
xor
ins
and
inc
repz
out
fwait
aam
sub
(bad)
fwait
lock
dec
out
xchg
dec
int
add
or
xchg
inc
cwde
es
fimul
scas
add
add
scas
lods
pushf
xor
sub
fs
pop
ror
pushf
or
pop
push
jl
ret
mov
sub
cmp
xor
inc
imul
pop
jmp
adc
xchg
sahf
sub
inc
sar
sub
fbld
cmc
pop
hlt
test
cwde
xchg
fiadd
or
outs
dec
inc
ins
dec
shr
add
out
xchg
cmp
sub
pop
and
jmp
sar
mov
and
cmp
js
(bad)
out
cmp
sbb
jb
pop
lods
jb
repnz
lea
sbb
in
dec
hlt
dec
fwait
push
push
adc
(bad)
mov
mov
cmp
(bad)
sbb
add
jb
ds
push
scas
pop
inc
fimul
mov
call
mov
or
pop
setbe
dec
(bad)
ins
add
sub
xor
gs
push
add
dec
mov
pop
inc
pop
idiv
arpl
xor
dec
mov
(bad)
scas
or
xor
aam
(bad)
fcomp
jmp
dec
add
lods
add
mov
pushf
sbb
jo
(bad)
push
cmp
int3
ds
pop
add
sbb
pop
mov
add
ins
and
addr16
sar
adc
dec
rcl
cwde
addr16
push
dec
sbb
mov
cmp
pop
out
add
push
(bad)
movs
lods
fild
fsubr
imul
xchg
(bad)
fild
gs
outs
push
sbb
jmpw
nop
adc
xor
jo
pop
mov
add
aam
mov
mov
rol
rcl
jle
dec
push
xor
ins
stos
frstor
xor
popf
pop
sub
sub
push
rol
dec
mov
lds
leave
push
xchg
xchg
jo
fs
fiadd
test
mov
mov
mov
sbb
mov
inc
inc
(bad)
jecxz
mov
jmp
jns
add
into
lods
sub
cdq
and
int3
inc
shl
fwait
sub
rcl
dec
inc
ret
ror
sub
or
or
arpl
xor
xchg
cmps
out
push
shl
or
popa
fiadd
imul
popa
and
popa
lea
dec
sub
repz
sbb
pop
jmp
shl
ret
mov
mov
jnp
data16
mov
sub
cdq
imul
mov
cmp
cmp
fiadd
cmps
sub
arpl
pop
push
inc
and
or
xor
jmp
call
aas
(bad)
repz
lea
in
popa
pusha
mov
pop
(bad)
xchg
cmp
lahf
ins
cdq
sbb
pop
in
and
dec
inc
je
test
inc
push
(bad)
into
sub
rcl
ja
into
mov
cmp
aam
rol
mov
lods
movs
loop
inc
hlt
ds
jno
jne
jae
jge
lds
pop
xor
daa
xchg
mov
bound
mov
in
fnsave
sub
or
sbb
adc
fild
mov
mov
dec
je
xchg
push
daa
cmp
jns
outs
push
test
lods
push
pop
fadd
adc
fidivr
into
or
mov
dec
gs
cmp
sbb
mov
mov
sbb
xchg
pop
and
and
sub
xchg
leave
cmp
dec
inc
push
adc
mov
jnp
mov
xchg
out
test
fadd
sbb
inc
into
retf
je
pushf
test
xchg
(bad)
and
cmp
(bad)
imul
bound
shr
mov
lahf
scas
mov
sub
lds
sub
std
movs
jp
aad
int3
jg
add
push
xor
xchg
out
retf
xor
daa
jb
fimul
into
add
mov
or
test
aad
cwde
jne
gs
rcr
scas
cwde
cmps
xor
or
xlat
pushf
loope
inc
mov
or
pop
push
mov
les
pop
sbb
das
fisub
fs
cli
bound
mov
xor
jge
data16
sub
cmp
adc
rol
ret
mov
rcr
fsubr
lock
jmp
lods
mov
sbb
mov
xor
xchg
loop
ret
pop
adc
repz
(bad)
sub
and
js
movs
xchg
lahf
and
lea
imul
jecxz
pushf
scas
test
(bad)
fnstcw
(bad)
and
(bad)
push
push
enter
js
int3
cmp
stos
mov
add
inc
and
cmps
push
int3
jne
xchg
in
add
loope
inc
and
pop
ins
sub
mov
sbb
fisttp
(bad)
call
les
test
nop
jne
scas
adc
sub
jae
int3
mov
ja
push
sbb
ss
pop
sub
pop
and
cs
addr16
jmp
push
push
cmp
outs
stos
jbe
mov
cdq
add
sub
test
mov
mov
dec
jp
enter
in
pop
add
call
mov
sbb
imul
adc
(bad)
cmc
mul
sub
ret
icebp
fwait
push
mov
sub
into
push
shr
sub
loope
inc
dec
repz
mov
fcomp
sbb
shr
(bad)
imul
sar
cmp
daa
xlat
aad
inc
es
xchg
xor
test
lods
sbb
sub
in
xchg
pop
sbb
or
xchg
lods
test
shl
in
add
es
shl
fs
push
pop
dec
arpl
adc
sbb
xchg
dec
jno
fisttp
dec
add
lahf
cmp
fmul
cmps
setae
(bad)
fist
jge
mov
sub
ja
enter
xor
fwait
pop
cdq
lods
inc
(bad)
aad
push
stos
mov
aad
add
cmc
out
mov
loop
xchg
into
addr16
push
xor
in
inc
std
add
inc
popa
popf
or
dec
cli
(bad)
or
jge
in
loop
jge
fidivr
xor
dec
repz
nop
loope
retf
and
adc
in
dec
xor
inc
dec
sahf
pushf
inc
aam
dec
jns
cmp
pop
mov
mov
sub
nop
ins
or
push
adc
stos
pushf
pop
jo
cmc
or
lahf
mov
push
xchg
sub
sbb
cli
iret
cmp
or
mov
inc
cmp
iret
dec
(bad)
loope
mov
inc
in
mov
cwde
fdiv
jbe
and
arpl
add
cmp
mov
sbb
scas
iret
jo
aaa
lock
mov
sbb
out
rcl
fbstp
shl
scas
cs
ret
jecxz
clc
mov
jb
stos
sbb
sbb
jmp
mov
retf
icebp
sbb
mov
push
mov
jbe
into
sbb
xor
sbb
xlat
jmp
jmp
xchg
pop
dec
sbb
jp
leave
loop
pop
mov
jp
lods
fcomp
add
dec
adc
ins
rcr
stos
lods
outs
shr
push
and
(bad)
out
adc
jo
jg
or
(bad)
les
sub
mov
mov
pusha
mov
pop
sahf
mov
mov
aas
and
jns
mov
add
xor
jo
test
dec
inc
cmp
icebp
iret
pop
jg
jnp
push
mov
fdiv
sub
dec
jmp
hlt
push
mov
jns
sub
repz
mov
rcl
js
mov
mov
sahf
sub
adc
mov
stos
jbe
bound
and
ss
pop
ja
mov
inc
shl
ds
mov
dec
push
push
clc
or
dec
ds
mov
mov
mov
or
dec
mov
arpl
cli
mov
fs
or
je
rol
mov
cmp
cmps
jmp
pop
lods
and
sub
inc
push
xor
dec
or
sahf
mov
sub
pop
mov
pushf
jle
sbb
adc
fidivr
jl
scas
mov
out
imul
in
xor
mov
push
mov
adc
(bad)
cmp
fistp
pop
in
stc
xchg
and
jg
movs
fild
lahf
add
jp
sbb
loop
mov
(bad)
pushf
xchg
jns
es
mov
pop
aas
and
out
ss
sub
jle
push
jne
cmp
xchg
adc
lahf
in
push
jmp
loopne
and
pop
fild
jmp
jp
outs
sbb
xor
push
sub
pop
repz
mov
(bad)
sbb
dec
cmp
sbb
out
in
lods
stos
inc
sub
jl
loop
push
cmc
fst
in
sbb
cmps
arpl
cmps
inc
clc
pop
in
jge
mov
xor
adc
enter
xchg
xchg
ss
test
rcl
rol
mov
icebp
cmps
xchg
and
mov
test
gs
shl
loope
in
jnp
sahf
loop
fwait
sbb
push
int3
and
sub
mov
fisub
and
mov
jb
cmc
daa
leave
adc
jp
xchg
mov
push
imul
movs
xor
jmp
jbe
push
ror
sub
out
inc
sub
xor
cmp
xchg
pop
mov
sti
dec
jp
or
mov
jmp
int3
cmps
fneni(8087
mov
bound
data16
shl
jbe
push
adc
sbb
mov
xchg
nop
and
push
aas
mov
out
loop
sbb
stos
mov
pop
mov
stos
mov
sub
inc
aaa
xor
fwait
xchg
and
inc
iret
inc
aaa
test
sbb
pop
lods
push
retf
outs
add
mov
dec
sub
stc
jecxz
es
jmp
into
in
retf
sbb
xor
mov
shl
ss
pop
jle
lds
sbb
sbb
xchg
pop
jmp
nop
(bad)
mov
jno
test
ja
mov
jge
cli
mov
sub
or
mov
enter
and
xor
jle
stos
fisub
mov
jle
and
or
pop
call
pop
repz
in
add
dec
sbb
and
cdq
cmp
and
lea
shl
cmp
in
jbe
sahf
dec
test
out
outs
dec
rcl
sbb
and
hlt
and
call
cmp
pusha
clc
xchg
xchg
xor
sub
xchg
or
loop
jns
test
cwde
add
pusha
or
jge
and
xchg
fistp
or
call
and
cmps
(bad)
pop
sahf
aam
xor
sbb
lock
pop
call
xor
sbb
push
in
fdiv
out
lds
ins
stos
pop
neg
inc
push
lods
add
lock
es
jmp
clc
fs
adc
mov
mov
adc
loopne
mov
aas
pop
xchg
xor
fidiv
js
cli
mov
scas
sub
mov
fadd
ror
cli
jno
and
mov
push
mov
popa
pushf
jecxz
retf
(bad)
xlat
mov
mov
sbb
rep
push
jge
sbb
out
shl
cmp
inc
xchg
or
sub
in
jmp
xor
repnz
pop
push
movs
cmp
jo
sbb
dec
pop
cmp
or
(bad)
(bad)
(bad)
push
and
and
pop
fstp
adc
adc
push
push
or
push
or
xchg
push
push
xor
fdivr
aad
jb
inc
test
jno
out
mov
or
std
inc
lock
adc
rcr
fist
imul
xor
aad
cs
(bad)
xchg
pop
push
xchg
nop
pop
aam
les
adc
mov
je
xchg
push
imul
sbb
adc
ins
push
sub
sbb
jge
ds
stos
ins
sub
ficomp
jae
pop
es
cdq
stos
movs
jmp
loop
sub
jp
mov
mov
test
out
jb
push
add
xlat
xchg
inc
add
pop
or
aam
je
sub
push
test
xchg
int3
pop
fst
or
or
xchg
xor
je
xor
pop
in
ss
daa
mov
mov
sbb
stos
fs
enter
mov
stos
fnstenv
out
cmc
mov
(bad)
dec
add
popa
xchg
xchg
adc
mov
cmps
rcr
gs
mov
imul
(bad)
cdq
int3
stos
lock
je
push
(bad)
mov
or
shl
sub
cmp
scas
inc
out
jo
xchg
out
mov
mov
ja
add
fist
cmp
sub
daa
mov
sbb
xor
lahf
dec
hlt
call
fs
(bad)
cmp
lods
hlt
jle
ss
sbb
xlat
shr
(bad)
inc
fidivr
cmp
aas
into
adc
mov
jmp
sub
jge
fsubrp
mov
pop
mov
(bad)
fcmovne
sub
loope
mov
enter
adc
mov
jae
pop
sub
push
xchg
fcmovne
and
aam
out
xchg
adc
fisubr
retf
xchg
pop
dec
push
jp
js
mov
fwait
jo
in
adc
div
xchg
mov
mov
repz
or
xor
jbe
lea
std
cmp
scas
out
mov
dec
cmp
push
inc
popa
dec
add
sbb
cmp
fsub
ds
int3
scas
in
pop
dec
jmp
aas
addr16
push
das
jns
stos
mov
inc
jno
not
hlt
div
(bad)
adc
cs
popf
mov
adc
and
and
push
stos
mov
jo
rol
stc
ror
hlt
jb
or
(bad)
mov
test
inc
xchg
imul
lea
cs
jnp
and
repnz
cmp
add
cmps
xchg
ret
repz
cmp
add
cmp
out
sbb
add
jns
cmps
add
(bad)
leave
sahf
mov
outs
and
cmp
rep
dec
dec
and
push
nop
jmp
add
ror
xchg
mul
jp
pop
cmp
mov
fwait
jge
mov
call
mov
xchg
adc
mov
hlt
das
push
inc
push
retf
push
pop
push
push
or
cdq
popf
out
push
icebp
or
call
retf
outs
push
lock
pop
mov
and
fadd
dec
pop
cli
aam
xor
or
or
ds
xchg
xchg
sti
inc
loop
fadd
pop
mov
mov
adc
rcl
sar
cmp
(bad)
shr
mov
cmp
cmp
sub
aad
jg
jl
retf
push
jmp
(bad)
mov
jnp
call
das
or
fs
jno
in
out
jl
pop
loope
mov
fstp
jge
push
xor
sbb
movs
cmova
popa
ins
adc
call
cmp
xor
mov
push
xor
push
mov
mov
movs
out
cmps
hlt
nop
or
mov
xchg
or
shr
pop
out
pop
jno
daa
push
sbb
push
mov
push
push
or
xchg
div
out
clc
out
pushf
(bad)
(bad)
test
loopne
mov
jno
pop
lods
mov
inc
fistp
push
stc
sbb
xor
mov
aaa
mov
jnp
mov
int
out
rcl
and
dec
(bad)
sahf
mov
xor
push
or
adc
dec
cs
jl
test
cwde
cmp
jo
ins
fld
sbb
test
in
ins
xor
jle
mov
cmp
cmps
sub
lea
mov
sti
or
ja
xchg
cmp
add
sahf
into
or
pop
cmps
xchg
inc
mov
or
cdq
pop
mov
lds
fucomp
mov
sbb
loope
test
pop
loope
inc
nop
sub
icebp
pop
in
or
lods
outs
scas
push
pop
cs
test
sbb
nop
bound
out
div
mov
into
inc
mov
push
test
ja
jns
pusha
jge
popa
scas
mov
movd
xor
xor
mov
sbb
jb
add
pop
cmp
push
push
and
lods
xchg
sbb
adc
(bad)
clc
pushf
cmp
sbb
shl
shr
or
arpl
mov
fs
imul
das
dec
jp
fisubr
adc
ds
inc
es
mov
push
aaa
mov
pop
mov
pop
aam
or
sbb
daa
enter
or
mov
dec
popf
es
xchg
pop
outs
cmp
mov
mov
pop
pop
xor
frstor
xlat
sub
jno
dec
add
sbb
pop
cmp
push
out
adc
xchg
test
daa
pop
jno
sbb
fistp
mov
les
inc
and
add
sbb
ror
retf
push
fwait
shr
adc
lds
push
rcl
sub
mov
cs
js
ins
ja
pushf
mov
inc
mov
dec
mov
cwde
xor
xchg
loopne
lea
je
sbb
out
or
cs
mov
fsubr
js
and
daa
shr
sub
mov
dec
push
icebp
clc
xchg
(bad)
mov
and
pop
bound
cmp
bound
sub
iret
inc
jle
lock
inc
jae
push
retf
dec
imul
add
jnp
jae
ror
lods
inc
xor
fdiv
stos
jno
fprem1
dec
lods
ret
retf
repz
jmp
sub
fdivr
lea
imul
das
inc
aam
sti
sbb
jle
inc
pop
fnstenv
push
call
scas
aad
ret
out
inc
leave
es
jae
push
cmp
jae
inc
loope
ds
dec
sbb
in
imul
jecxz
movs
sti
lahf
nop
test
rcl
and
pop
fmul
add
push
call
(bad)
jmp
movs
push
ins
call
add
fs
ret
mov
repnz
sahf
xchg
or
cmp
cmp
mov
push
sbb
sub
dec
jns
es
pop
out
mov
stc
scas
push
repnz
cmp
sar
or
pop
ja
mov
xor
inc
loop
xchg
push
and
mov
and
mov
cs
shl
pop
pop
jo
je
arpl
int
xor
sar
shr
(bad)
out
dec
push
sahf
mov
cs
jecxz
mov
ret
push
outs
inc
icebp
frstor
inc
mov
aad
fdivr
push
inc
mov
(bad)
loope
iret
adc
dec
jbe
pusha
retf
xor
retf
cs
shr
es
lock
movs
rol
scas
stc
adc
loop
jno
into
mov
scas
and
test
out
leave
jmp
mov
fisttp
add
enter
fst
xchg
or
and
out
jo
mov
stc
in
mov
and
or
lods
adc
mov
dec
inc
cmps
sahf
pushf
mov
push
adc
out
push
daa
mov
bound
daa
and
in
or
jbe
movs
pop
pop
lds
add
imul
sar
push
ret
and
mov
adc
repnz
mov
add
dec
fs
jp
dec
lock
and
bound
xchg
or
xor
and
mov
cdq
out
add
mov
xor
and
mov
ins
sbb
add
in
pop
adc
mov
mov
out
dec
(bad)
leave
popf
aam
cmc
scas
call
(bad)
jg
pop
out
int
lods
mov
push
pushf
in
jbe
stos
mov
aam
fidiv
(bad)
(bad)
fld
mov
out
ja
scas
(bad)
in
stos
xchg
int
xchg
add
stc
test
push
xchg
mov
mov
mov
sar
push
enter
jns
popa
jbe
fist
out
daa
(bad)
in
fcom
xor
into
std
xchg
mov
repnz
mov
push
or
out
lock
add
cli
lds
mov
cs
mov
das
callw
(bad)
jmp
adc
out
cdq
jmp
inc
push
inc
push
data16
clc
movs
(bad)
std
cmps
loopne
aaa
adc
es
xor
xor
je
inc
xchg
xor
mov
(bad)
push
jmp
and
bound
jnp
fs
cmps
jmp
push
leave
(bad)
pusha
adc
imul
xor
fbstp
aas
es
jmp
push
add
adc
ins
aaa
addr16
scas
and
push
gs
dec
dec
test
push
inc
aaa
pop
jmp
(bad)
ds
icebp
ins
jmp
mov
add
sti
sub
arpl
mov
cld
leave
popw
js
arpl
sub
fidiv
push
or
mov
addr16
fcomp
push
or
call
aad
and
xor
mov
mov
push
movs
clc
pop
stos
pop
idiv
xchg
inc
test
sbb
jnp
pop
dec
data16
sbb
pop
and
test
xchg
mov
cli
sub
jbe
jmp
or
fmul
push
adc
fwait
je
pop
mov
xchg
xchg
sub
mov
mov
js
cmps
push
(bad)
jnp
and
in
or
cwde
dec
mov
xor
std
cmp
or
mov
xchg
and
dec
arpl
pop
(bad)
loopne
xchg
or
mov
jnp
sub
es
lock
into
psllq
push
xchg
popa
or
js
jge
in
mov
ja
push
mov
fbld
pop
mov
push
push
dec
sbb
push
int
lahf
out
pusha
shl
jl
push
(bad)
xchg
int3
sbb
push
jb
mov
add
and
sbb
jge
hlt
sub
jmp
repnz
or
fwait
mov
sahf
cmp
add
sbb
out
(bad)
inc
mov
(bad)
movzx
scas
lahf
sahf
mov
pop
pop
stos
or
dec
mov
cmp
pop
jmp
vmwrite
daa
rcr
addr16
sbb
lea
mov
jbe
sbb
ss
jmp
or
cmp
sbb
(bad)
jl
mov
adc
outs
xchg
arpl
push
mov
or
inc
sbb
or
pop
or
inc
test
mov
std
jnp
sbb
icebp
mov
scas
(bad)
pop
mov
aam
mov
outs
in
test
sahf
push
xchg
xchg
mov
enter
xchg
jmp
and
cmp
cmp
(bad)
mov
ins
movs
push
xchg
cs
dec
mov
mov
mov
enter
aam
stos
mov
push
enter
jns
mov
dec
add
mov
fwait
xor
retf
mov
scas
sbb
or
scas
(bad)
sub
iret
out
lock
lods
mov
xchg
test
xor
jge
cmps
out
push
fbld
vmulsd
imul
adc
fadd
inc
hlt
into
push
pushf
(bad)
in
jmp
fidiv
shl
or
sbb
scas
in
add
ss
mov
or
pop
sbb
fisubr
(bad)
fnstsw
xlat
push
jmp
test
imul
jmp
out
std
push
mov
add
int3
repz
fs
sub
pop
xchg
in
push
mov
and
gs
jmp
or
xor
sahf
or
jbe
or
cld
adc
imul
jmp
pop
cs
icebp
sbb
jnp
fsubr
and
mov
cmp
or
pop
push
mov
iret
pop
xchg
add
aad
retf
fcmovne
popfw
aas
into
inc
push
cmp
dec
int3
push
push
mov
sub
pop
mov
cmp
out
mov
js
repnz
dec
mov
xchg
aam
dec
in
mov
cmp
addr16
inc
mov
ror
sbb
stos
jp
and
(bad)
enter
or
xchg
dec
ficomp
mov
push
push
pop
or
rol
mov
leave
aad
frstor
nop
xchg
mov
stos
hlt
fwait
cmp
addr16
lods
ds
fs
icebp
(bad)
push
mov
or
push
arpl
adc
xchg
dec
or
fild
or
int3
sahf
pushf
xchg
scas
std
xchg
scas
ss
sub
push
push
es
xor
add
nop
push
scas
jb
push
sub
cmps
push
cmc
lahf
jbe
les
xor
push
loop
jae
ret
ror
retf
sub
dec
push
inc
xor
inc
push
adc
add
or
push
mov
mov
add
xor
mov
adc
jge
cmc
out
(bad)
imul
ret
je
test
push
dec
leave
push
bound
and
sbb
es
or
adc
test
rcr
xor
mov
test
push
pusha
xor
jne
imul
pop
aad
dec
mov
nop
jmp
sub
shl
or
jl
mov
push
adc
jge
into
sti
mov
cmp
fs
jge
xchg
leave
or
xor
or
int
idiv
inc
jno
dec
add
jae
sub
imul
push
pop
and
mov
sbb
int
popa
movs
aas
popa
cmp
add
xor
dec
adc
stc
and
bswap
popf
or
xor
cmp
xchg
mov
pop
cmp
mov
sbb
lods
sbb
push
bound
inc
lock
xchg
push
push
dec
fnsave
cmps
push
arpl
mov
mov
dec
out
pop
hlt
pop
hlt
iret
pop
mov
cli
fnstcw
call
(bad)
jmp
aam
sbb
cwde
fsub
repz
scas
(bad)
call
mov
test
mov
test
mov
and
imul
sar
push
into
fild
xchg
mov
sbb
rol
fdivr
sbb
mov
jnp
add
push
leave
push
sub
xor
lea
out
adc
mov
and
pop
into
jmp
stc
scas
in
mov
sub
push
movs
imul
mov
retf
cli
into
sbb
mov
je
rol
fdivr
xor
xor
fs
xor
jge
xor
cwde
fild
shr
sub
out
aam
xchg
movs
das
mov
outs
jo
push
cmps
jl
enter
xchg
push
mov
gs
sub
push
xchg
nop
mov
loopne
cmp
pusha
mov
adc
aad
jno
push
stos
and
ja
adc
std
mov
jecxz
dec
ja
jg
stc
or
xchg
mov
push
inc
ret
push
retf
mov
sar
add
add
rcr
inc
inc
push
pop
lock
mov
add
jg
add
push
push
jns
in
pop
div
pop
pop
pop
in
cmp
push
jle
lock
dec
push
jle
nop
push
stc
xor
push
and
inc
sub
lock
sub
pop
sbb
inc
jne
loopne
mov
xchg
dec
push
push
mov
js
sub
push
sbb
icebp
pop
mov
call
adc
push
sub
xchg
or
es
in
inc
dec
dec
xor
mov
mov
mov
add
inc
je
daa
add
mov
jae
dec
jl
inc
push
fwait
or
cld
push
xor
stos
cmp
popa
test
pop
pop
adc
mov
cmc
and
inc
inc
cli
push
jbe
cmps
daa
add
or
or
lods
sub
pop
adc
or
stos
cmp
cmp
or
push
sub
inc
mul
out
inc
xchg
inc
lock
and
jb
imul
and
sbb
aaa
sub
push
inc
xlat
sbb
das
ins
test
or
cmps
pop
push
push
pop
cs
pop
mov
movs
dec
sbb
jno
lods
cmp
jbe
cmps
inc
inc
dec
pop
and
mov
dec
add
cmps
add
jmp
jp
push
sub
mov
inc
dec
xchg
pop
push
or
or
jno
sub
sub
dec
popa
sbb
call
inc
adc
pop
cmp
xchg
inc
es
or
sbb
xor
dec
sbb
xor
cs
cmp
sub
push
push
add
lods
pusha
mov
sub
add
hlt
jns
xor
jge
jnp
xchg
cmp
adc
neg
inc
lock
cmp
mov
imul
out
cmp
(bad)
fistp
rdpmc
cmc
jnp
xor
push
sbb
xor
call
sbb
aas
sbb
je
inc
out
push
jle
clc
and
add
es
push
pop
fistp
adc
push
sub
lods
add
out
dec
ja
jle
test
dec
or
dec
ins
push
retf
add
jle
xor
mov
jb
xchg
dec
scas
push
dec
push
jo
sbb
dec
dec
sbb
xor
pop
add
in
or
repnz
ins
retf
or
jb
xchg
dec
aam
stc
bound
xchg
and
or
popa
test
pop
dec
adc
xor
inc
or
sub
cmp
int3
das
push
push
dec
ins
and
add
and
push
pop
mov
sub
es
or
jle
inc
xchg
scas
fcom
les
div
lahf
stos
mov
pushf
jae
sub
mov
lock
sbb
pop
mov
xchg
sbb
out
jae
in
movs
dec
repnz
out
ficomp
pusha
retf
gs
ret
sbb
xchg
cs
call
cdq
rcl
retf
add
cmp
mov
test
hlt
test
or
push
inc
or
daa
stos
add
es
pop
pop
out
and
and
outs
cmp
or
pop
pop
and
and
or
cs
fsub
push
xchg
pop
ds
adc
and
xor
adc
adc
xor
outs
mov
push
ja
add
js
das
push
sbb
push
push
cmp
push
push
fbstp
pop
ret
mov
sub
xor
lds
push
pop
mov
aas
jle
pop
xlat
test
dec
test
lods
mul
ret
cli
sti
and
pop
cwde
fdiv
sbb
adc
adc
and
loop
(bad)
cmp
and
repz
clc
and
pushf
js
dec
mov
adc
inc
and
es
mov
add
push
mov
dec
mov
sub
mov
sub
fsubr
mov
sbb
jecxz
mov
movnti
sub
mov
loopne
mov
pop
sbb
clc
dec
mov
xchg
scas
fnstcw
nop
movs
mov
pop
or
bound
repz
jp
dec
(bad)
shl
int
es
or
scas
cmp
aam
sahf
sub
in
mov
sbb
add
cmp
fxrstor
das
repnz
cmp
ficom
stos
in
jmp
inc
push
stos
add
push
mov
cmps
sbb
add
or
or
ret
out
(bad)
or
sti
daa
pop
in
repnz
push
(bad)
outs
dec
ret
(bad)
leave
inc
jmp
xacquire
dec
js
fimul
xor
push
iret
test
dec
into
mov
push
loop
sub
cmps
and
xchg
xor
arpl
mov
sar
lahf
pop
and
out
mov
dec
mov
in
call
rcr
ins
pop
leave
(bad)
and
xchg
and
js
inc
mov
inc
rcr
js
stos
daa
out
cmps
leave
and
loop
mov
inc
shl
rcl
aam
inc
jbe
movs
call
mov
test
cli
mov
xlat
aad
jno
dec
test
int3
(bad)
(bad)
popa
cmps
add
cmp
push
popf
or
push
xchg
ret
pop
pop
(bad)
sar
aaa
or
idiv
and
mov
test
das
mov
jno
push
ss
inc
jg
xchg
push
dec
or
dec
jae
imul
mov
sub
mov
movs
mov
leave
sbb
cwde
jmp
rcl
sbb
adc
xchg
xor
or
hlt
in
ret
add
test
and
aaa
lock
clc
inc
sub
pop
int
test
mov
pop
mov
movs
sub
add
push
xchg
fwait
pop
or
add
jmp
adc
fdiv
jg
aad
jno
mov
ds
clc
js
mov
fdiv
outs
fnstsw
add
shl
out
movs
pushf
inc
dec
add
std
hlt
jo
mov
fcomp
dec
fadd
std
mov
pushf
fimul
add
pusha
idiv
enter
int
data16
add
push
jmp
ins
xor
push
add
jo
cld
int
es
pusha
mov
add
cld
out
xor
mov
stc
dec
jbe
sbb
xor
ret
pop
(bad)
fisubr
jns
repnz
pop
arpl
(bad)
call
addr16
rcl
repnz
outs
xor
push
cmp
dec
out
pop
nop
jp
jo
and
movs
xor
shl
pop
or
xchg
jp
test
inc
sbb
or
neg
cs
bound
repnz
and
loope
mov
bound
add
and
test
pop
call
add
test
sbb
(bad)
mov
xchg
leave
inc
cmps
or
and
mov
push
movs
xlat
lea
jmp
and
cmp
lds
std
leave
mov
adc
pop
cdq
xor
movs
pop
test
mov
mov
adc
aad
mov
enter
jns
mov
dec
add
dec
jo
pop
mov
ds
sbb
or
jge
stos
fcom
or
or
pushf
stos
mov
(bad)
aas
fyl2x
pop
cmc
cwde
cmp
xor
mov
jecxz
pop
jno
je
cmp
xchg
dec
outs
xor
rol
daa
mov
adc
fs
mov
push
cmps
add
sub
jno
stc
mov
dec
loope
int3
push
mov
out
mov
xor
sub
add
mov
cli
push
and
fwait
ror
les
sub
mov
jecxz
pop
data16
pop
call
xor
xchg
add
lahf
mov
enter
fstp
hlt
xchg
mov
es
dec
inc
mov
xchg
jl
mov
sti
mov
jge
std
xor
xor
or
inc
test
sahf
inc
sbb
cdq
dec
mov
out
sub
sbb
push
movs
mov
mov
adc
xchg
data16
mov
cdq
out
cdq
or
(bad)
fistp
pusha
mov
jae
jno
inc
neg
mov
test
lea
jae
(bad)
cmp
inc
jl
jp
(bad)
fadd
sbb
jg
add
sti
fadd
jnp
cld
add
jno
fcmovne
repnz
inc
loopne
xlat
pop
call
fild
cmps
sbb
mov
jecxz
outs
daa
out
or
std
dec
mov
call
push
push
cmp
add
pop
pop
jae
leave
xor
xlat
bnd
imul
dec
mov
aad
xchg
fild
dec
(bad)
int3
loop
pusha
adc
cmp
ret
icebp
cmp
push
(bad)
adc
fnsave
add
dec
ret
lods
adc
imul
icebp
pop
les
or
test
mov
mov
in
xor
add
ror
inc
nop
mov
icebp
call
cld
(bad)
sub
int
(bad)
fadd
pop
xchg
xor
adc
out
mov
cmps
sub
loopne
popa
call
adc
lods
xor
mov
pop
scas
out
jecxz
fs
scas
xchg
push
xor
jbe
jno
sbb
or
mov
sbb
popf
inc
add
test
out
lahf
add
int
into
adc
dec
or
pusha
outs
scas
sbb
stos
(bad)
pop
sub
stc
imul
fidivr
push
shr
(bad)
push
adc
cmp
jne
movs
aad
xchg
push
repz
cs
inc
mov
ds
pop
pop
mov
ins
pop
jne
out
inc
xchg
lods
adc
js
mov
push
arpl
outs
jecxz
or
cdq
test
xchg
inc
cmp
pop
adc
mov
bound
dec
iret
add
scas
lods
or
das
mov
jmp
cmp
xchg
and
repz
mov
les
hlt
xor
in
fld
call
aad
scas
jnp
jns
push
aad
pop
lahf
add
pushf
in
jno
xchg
mov
int
inc
jne
lods
jae
in
jb
sub
xchg
jae
inc
scas
popf
movs
xor
xchg
mov
mov
dec
add
dec
jo
pop
jbe
mov
xor
pop
cmp
mov
rol
popa
cmps
push
mov
xchg
fsub
mov
and
push
add
stc
push
xor
add
sub
mov
adc
dec
push
pop
fdivr
push
dec
sub
and
mov
mov
pop
cmp
and
and
push
jge
jno
push
cli
cmps
daa
jb
jmp
cld
sub
or
push
mov
pop
inc
adc
mov
mov
call
je
stos
fistp
dec
jae
xchg
fsub
div
pop
mov
(bad)
fiadd
mov
in
out
or
pop
xor
mov
nop
(bad)
fstp
cmc
ds
adc
fidiv
jge
popa
inc
add
std
inc
jns
xor
adc
mov
dec
inc
dec
jmp
or
pop
movs
sbb
mov
add
aam
enter
and
sub
adc
dec
mov
mov
in
sbb
pop
fs
shl
imul
and
fcom
jecxz
daa
loope
adc
gs
sbb
mov
les
xor
(bad)
test
movs
jge
inc
push
idiv
mov
adc
jp
push
aad
dec
mov
mov
(bad)
int3
mov
pop
cmp
jno
jmp
or
outs
push
test
adc
xchg
sub
pop
lods
adc
loop
std
inc
add
leave
rcl
loope
sub
push
cmp
push
adc
call
add
jl
fistp
push
ror
xor
stos
push
xchg
cmp
and
mov
mov
imul
pop
sub
adc
in
imul
jbe
fldcw
popa
or
add
mov
mov
and
jnp
fs
inc
xchg
jnp
pushf
push
inc
test
cmp
js
scas
mov
mov
ret
pop
out
mov
icebp
imul
adc
lds
sbb
and
mov
mov
call
aam
or
jmp
int3
dec
cmp
push
(bad)
fdiv
(bad)
in
sub
cmp
push
push
inc
sbb
push
adc
shr
loopne
mov
xchg
test
call
mov
xchg
rcl
jecxz
fisub
sbb
push
mov
neg
out
arpl
cmp
loope
ins
jo
idiv
scas
cmp
jmp
pop
cdq
movs
(bad)
into
jbe
pop
lds
pushf
cld
(bad)
test
mov
retf
jnp
xor
arpl
sti
mov
sahf
or
in
or
pop
retf
retf
pusha
fdivr
adc
outs
add
popf
out
dec
fisub
in
sub
pop
adc
jg
adc
aam
jns
jns
mov
daa
pop
xor
dec
in
(bad)
or
jmp
mov
into
and
iret
xchg
mov
ins
cmp
dec
inc
sub
adc
ss
movs
jnp
outs
jl
pop
punpcklwd
cmps
ds
jg
dec
xchg
data16
xchg
inc
hlt
aas
vmaxss
jnp
mov
adc
aaa
xchg
jmp
cmp
mov
jnp
inc
xchg
xor
jp
and
dec
adc
sbb
add
in
lahf
and
dec
cs
or
popf
aas
inc
adc
ins
cmp
(bad)
adc
and
js
imul
dec
(bad)
mov
pmuludq
out
push
aaa
sbb
push
mov
jmp
test
popa
scas
or
ret
ror
adc
or
popa
mov
and
inc
aas
dec
fbld
jb
xchg
inc
xor
pop
sar
pop
in
arpl
popa
mov
pop
dec
cmp
and
mov
out
mov
cmps
(bad)
cld
add
add
dec
mov
lahf
mov
pop
nop
mov
mov
idiv
mov
adc
jp
icebp
mov
adc
dec
std
cld
xor
cmp
dec
daa
jp
cmp
xchg
sub
mov
dec
es
pop
adc
push
movs
hlt
ds
mov
nop
sub
scas
dec
out
bound
or
fidiv
imul
clc
push
sahf
cwde
push
stos
adc
dec
cmp
inc
inc
xchg
imul
mov
fwait
and
je
pop
pushf
or
dec
mov
cmp
es
retf
aam
pop
sbb
adc
push
jns
cli
out
pop
sub
aas
popf
(bad)
sbb
(bad)
(bad)
cli
aam
mov
popa
lods
xchg
jbe
cmp
jecxz
dec
push
bound
or
idiv
mov
sub
xor
adc
mov
jmp
sbb
ffree
and
xor
dec
ret
jge
sbb
adc
xchg
adc
aad
pop
popa
cmp
xor
aas
sbb
xor
xor
aaa
gs
mov
pop
stc
ror
(bad)
sahf
xchg
fild
push
add
js
mov
or
fdivr
popa
sbb
loope
sbb
fdiv
gs
std
mov
cmp
scas
add
add
fadd
pop
call
lods
add
adc
in
dec
cs
sbb
out
jbe
push
loop
es
imul
mov
push
scas
add
stc
add
push
lahf
sbb
pop
jb
push
pop
pusha
adc
les
dec
mov
xor
hlt
mov
mov
xchg
or
push
nop
mov
in
pop
pop
fwait
xor
rol
xchg
xchg
jae
mov
std
or
xor
(bad)
gs
das
call
push
push
adc
bound
sbb
or
(bad)
adc
aaa
fmulp
or
add
int
add
ins
lods
adc
sti
sar
jge
imul
mov
les
pop
mov
inc
lods
adc
xchg
dec
cmps
jge
hlt
aaa
test
icebp
inc
and
cli
std
ins
push
sub
add
sbb
dec
jae
cmp
sub
cwde
xor
mov
call
push
repnz
jl
jae
jg
les
cmp
mov
fbstp
repz
and
std
je
mov
fdivr
jp
pop
jmp
fwait
inc
mov
mov
or
xor
jb
push
xor
mov
test
push
es
sub
xor
jnp
js
adc
movs
mov
jmp
cli
pop
out
test
cmp
out
fadd
push
aam
pushf
div
ds
jmp
fidivr
or
rol
das
imul
inc
push
dec
mov
je
std
lds
(bad)
xor
sub
(bad)
loope
add
inc
movs
scas
inc
imul
add
and
push
mov
rcr
mov
push
(bad)
mov
sbb
cmp
or
jmp
cmp
pop
mov
rcl
sbb
xchg
mov
xchg
dec
push
fsub
adc
inc
js
pop
ds
push
dec
test
push
lahf
sub
add
fist
ss
push
sbb
xchg
fimul
sub
mov
dec
inc
paddb
mov
xor
or
inc
push
das
push
jge
cmp
enter
push
mov
mov
icebp
and
sbb
jnp
push
jmp
push
lods
rol
pop
(bad)
fnstcw
jg
retf
stos
imul
inc
cwde
out
xchg
xor
call
cmc
inc
jmp
mov
push
pop
ds
ja
dec
xor
sahf
inc
inc
inc
out
jae
pop
stos
pusha
pop
jne
popf
mov
jl
add
mov
and
fmulp
lahf
mov
cmp
lahf
add
or
clc
mov
shr
clc
xor
mov
mov
jb
mov
mov
test
mov
inc
sub
add
aaa
jno
mov
cmp
not
jmp
mov
mov
pop
jl
test
(bad)
mov
jmp
test
sbb
imul
adc
popf
mov
in
push
popf
sbb
bound
push
lahf
shr
push
adc
mov
adc
mov
ja
add
and
nop
(bad)
pop
(bad)
mov
(bad)
xor
push
mov
or
mov
mov
or
in
add
pop
sbb
and
sbb
cmp
inc
jo
xchg
mov
jge
inc
xor
imul
int3
sbb
inc
push
mov
fs
sub
push
in
arpl
push
mov
scas
xchg
mov
sub
push
inc
xor
loop
jnp
jbe
pop
adc
or
cld
pop
sub
sbb
mov
pop
xchg
xchg
adc
int
jmp
cwde
inc
les
fwait
call
div
lds
push
mov
sub
inc
cmps
push
mov
xchg
jge
jns
inc
je
ja
pop
and
pushf
lea
sub
mov
sahf
mov
and
sbb
outs
div
xchg
or
push
bnd
cwde
cmps
(bad)
mov
mov
ss
daa
cs
add
xor
fisttp
or
or
cmps
std
lahf
xchg
adc
(bad)
inc
scas
out
cmp
loopne
push
xlat
jbe
or
jp
test
inc
test
adc
inc
sahf
sub
cmp
lds
mov
xchg
mov
ins
mov
sub
in
sub
sti
xchg
sahf
std
push
(bad)
adc
ds
idiv
daa
xchg
xor
(bad)
cdq
fisttp
addr16
sub
imul
xor
and
sbb
inc
xchg
mov
call
push
jne
jp
outs
jecxz
add
scas
pop
retf
mul
movs
out
js
cmp
xor
cmc
aam
das
mov
lock
mov
clc
das
popa
gs
or
cli
or
mov
and
dec
xor
outs
adc
mov
xchg
mov
out
js
rcl
data16
imul
movs
movs
xchg
in
push
sub
gs
imul
test
into
pushf
fwait
popa
xor
push
leave
or
or
pop
scas
(bad)
bnd
cs
adc
pushf
lahf
das
shr
pop
mov
pusha
xor
mov
ret
psubd
ret
repnz
lods
dec
loop
popa
push
ja
xlat
sub
sub
sbb
icebp
xor
movs
inc
movs
test
jns
xor
xchg
movs
xchg
inc
lock
add
inc
push
push
aaa
ins
pop
sub
mov
rol
gs
xchg
dec
je
inc
jle
mov
jne
dec
push
pop
dec
cmp
cdq
outs
inc
inc
jle
stos
shr
pop
push
sbb
cmp
cmps
lahf
adc
lods
sbb
pop
mov
push
pop
xor
jbe
cdq
sbb
shl
pop
and
(bad)
cmps
xchg
inc
or
cli
jno
mov
out
dec
mov
je
push
adc
jle
fld
shl
xchg
pusha
and
cmp
aaa
ss
adc
dec
mov
inc
adc
xchg
jge
ror
popa
add
jmp
and
movs
push
add
xor
push
outs
inc
cmc
stos
rcr
cmp
retf
scas
xchg
jo
lods
mov
inc
loope
mov
pop
sti
dec
inc
push
fistp
out
xchg
add
adc
xlat
xor
cli
pop
mov
and
fiadd
push
lods
lock
mov
push
outs
add
push
jmp
xchg
cdq
icebp
add
add
(bad)
out
outs
ja
in
mov
fcom
in
stos
iret
das
xor
mov
adc
sub
mov
pop
jg
pop
push
sbb
jmp
jl
ss
in
cmp
lds
inc
mov
add
out
aad
sub
cmps
sbb
test
lods
pop
jp
cmc
pop
or
inc
aas
inc
inc
mov
into
aas
xchg
fsubr
xchg
push
dec
xchg
sbb
icebp
mov
je
sub
ja
mov
jp
loopne
cmp
add
mov
xchg
inc
inc
xchg
aam
mov
inc
cdq
inc
lea
cli
js
xlat
xchg
test
jmp
pop
imul
daa
sbb
jns
sub
lds
stc
dec
xchg
add
aam
jge
cmp
lds
iret
and
cli
jg
sub
mov
mov
xor
jl
xchg
imul
gs
outs
sub
mov
or
adc
jg
into
hlt
inc
loope
jge
fsubr
mov
xor
adc
lods
sbb
test
add
loopne
jb
dec
and
mov
adc
fcomp
inc
inc
outs
xchg
fnstenv
push
cmp
add
stos
adc
retf
nop
sub
cmp
push
cli
xor
cmp
cmp
nop
pop
jecxz
mov
xor
mov
test
rol
daa
xchg
aaa
sahf
or
xor
push
popf
mov
(bad)
jae
leave
fadd
ret
or
or
sbb
xor
add
push
jp
out
xchg
sbb
inc
mov
test
pop
xor
push
pop
jmp
jle
mov
add
push
inc
pop
adc
push
fwait
jle
dec
movups
loopne
outs
xor
dec
rol
push
and
rol
mov
out
repz
cmp
rol
lock
pop
ss
jp
clc
add
in
stc
jle
outs
pusha
sbb
rcl
push
add
mov
cmp
xchg
(bad)
xor
cld
push
xlat
pushf
(bad)
fbld
push
pop
out
mov
retf
enter
jle
inc
xlat
inc
mov
jne
les
sub
sub
pop
leave
out
enter
add
push
cmp
retf
rcl
push
into
push
out
dec
lds
mov
(bad)
cmp
popa
out
repnz
(bad)
mov
pop
test
lea
idiv
and
fsubr
aas
sbb
push
mov
loopne
pop
and
hlt
dec
sti
mov
sub
pusha
mov
lock
mov
repz
jl
add
lock
test
sbb
and
sbb
mov
jmp
dec
retf
or
push
inc
xchg
repnz
outs
dec
popf
rcr
mov
daa
repz
cwde
xor
int
pop
xor
xor
xchg
jge
retf
cmp
and
daa
inc
adc
push
ss
(bad)
push
sub
mov
dec
push
out
cs
into
dec
les
inc
dec
sub
aaa
sub
imul
stos
bound
into
fbld
inc
mov
retf
cmps
ds
adc
push
sub
cld
ss
cmps
or
lahf
icebp
fldenv
loopne
in
mov
jno
loope
sub
push
push
mov
pop
xchg
or
inc
jp
ror
dec
(bad)
aas
loopne
mov
adc
inc
fs
push
cmps
dec
bound
inc
(bad)
mov
(bad)
leave
or
xor
ret
mov
ficom
mov
int
pop
xchg
jb
sbb
(bad)
fdiv
xchg
repnz
outs
mov
lock
loop
xor
fadd
mov
dec
mov
mov
aam
push
retf
cld
enter
imul
(bad)
push
jle
push
imul
mov
pop
inc
sar
fnstcw
xchg
lahf
add
mov
nop
or
out
js
lea
cmc
and
jns
cli
nop
scas
loop
or
add
pushf
mov
aam
push
xchg
mov
pop
inc
sbb
push
jle
mov
ret
daa
jecxz
ror
(bad)
or
or
jno
sbb
test
adc
inc
xor
jmp
push
daa
or
jne
es
scas
xchg
or
ss
jbe
mov
sbb
cli
jbe
cs
inc
sahf
dec
cmp
sub
or
mov
lods
push
xchg
cdq
jae
leave
test
int
imul
outs
shl
push
cld
test
cmps
jno
adc
repnz
xor
das
push
jle
inc
xor
test
jge
xchg
jl
das
push
repnz
sbb
pop
icebp
leave
in
jmp
cmp
lahf
and
adc
out
pop
test
test
and
dec
das
pop
int
jmp
or
mov
adc
je
mov
mov
sub
mov
js
imul
and
cs
outs
arpl
push
push
or
inc
fwait
ds
push
int3
inc
sub
adc
in
fmul
jnp
ror
jne
(bad)
in
mov
inc
cdq
test
inc
xor
movs
cdq
ret
inc
or
nop
jmp
lds
or
mov
cmp
lods
gs
dec
and
mov
inc
pop
lods
inc
in
in
data16
sub
mov
out
jp
mov
shl
popa
jmp
leave
inc
or
push
stos
xor
sub
loope
jp
mov
jmp
mov
fs
addr16
stos
lds
pop
mov
push
adc
cld
pop
mov
xchg
aas
xor
dec
mov
push
lahf
loop
inc
lock
xor
xchg
sbb
loopne
jp
mov
cmp
iret
push
daa
fxch
mov
fsubr
mov
dec
loope
mov
lds
mov
sub
out
cwde
dec
in
cmp
and
jb
pop
pop
and
sar
jae
jle
jecxz
sub
xor
gs
ds
adc
adc
(bad)
or
xlat
push
and
mov
dec
sub
repnz
in
sbb
add
cld
dec
jle
ficom
jge
xor
pop
fild
aaa
movs
movs
mov
in
jle
sub
scas
mov
pusha
xor
xchg
mov
push
adc
ja
iret
mov
mov
dec
in
jecxz
stos
ds
jns
dec
inc
repz
mov
(bad)
sbb
retf
or
lock
or
out
mov
cli
std
data16
xchg
jl
mov
nop
adc
mov
or
inc
sub
(bad)
fsub
loope
mov
or
cmp
add
xor
sbb
mov
and
push
mul
gs
inc
sbb
xchg
push
cmp
jns
mov
sub
ins
dec
pop
ds
jg
inc
sub
repz
int
pop
shr
out
adc
mov
add
and
xchg
xor
lods
fdivr
adc
ins
xor
sub
es
mov
fsub
push
cld
cmps
lahf
inc
push
test
push
aaa
inc
fidiv
stc
xchg
mov
scas
in
and
xchg
pop
and
bsr
mov
mov
mov
dec
sub
test
jo
and
dec
or
inc
mov
and
in
cmp
enter
push
mov
push
outs
cmp
add
xchg
int3
call
mov
jae
mov
outs
add
and
cdq
retf
clc
fmul
out
jne
jp
push
int3
ins
push
mov
mov
mov
jne
cmp
(bad)
dec
mov
push
movs
into
add
popf
sar
xchg
daa
test
xchg
in
iret
dec
cmc
out
mov
out
dec
pop
rcl
pop
sbb
stos
aam
jle
(bad)
sti
sbb
cmp
dec
or
lahf
lods
das
sub
add
adc
mov
and
out
inc
or
popf
add
or
nop
jle
sbb
je
pusha
push
(bad)
outs
push
mov
aad
retf
adc
imul
call
inc
test
cwde
sti
inc
adc
loope
jg
mov
dec
mov
push
cwde
test
popf
call
cs
and
cmp
(bad)
mov
std
sbb
sub
push
inc
dec
adc
outs
sahf
iret
cmps
mov
lods
push
jg
fild
jmp
inc
pop
mov
jo
push
popf
mov
pop
enter
lods
into
push
jo
cwde
and
push
gs
les
mov
adc
xchg
stos
push
fcomp
push
mov
repz
ins
inc
push
ret
sbb
mov
test
cmp
mov
or
retf
fisttp
lock
inc
imul
push
cmp
or
fdiv
add
das
ss
mov
cmc
xor
cmp
jge
mov
lock
mov
das
mov
fldenv
xchg
mov
outs
or
adc
mov
or
cmps
imul
outs
xchg
mov
push
cwde
sub
aaa
dec
sub
push
sub
pushf
mov
rcr
pop
in
in
int
mov
repnz
jl
sbb
stos
lock
aaa
popa
and
mov
clc
push
add
ds
mov
jp
or
or
popf
lods
mov
movs
cli
repz
jb
mov
and
pusha
xchg
nop
inc
je
stos
ins
ds
into
shl
aam
cmps
jmp
movs
push
xchg
sbb
shr
pop
mov
sbb
iret
push
cmp
sahf
jmp
xchg
adc
cmp
addr16
inc
inc
or
(bad)
or
mov
cs
pop
pop
imul
push
cmp
ror
rol
test
out
mov
out
xchg
fdivr
add
out
dec
sahf
mov
jbe
jb
das
cmp
hlt
leave
lahf
pop
push
sub
cmps
aas
dec
leave
fwait
clc
ins
xor
ins
lods
sti
(bad)
adc
and
or
movs
sbb
out
enter
add
xchg
in
scas
(bad)
fs
xchg
adc
sbb
bound
adc
mov
loope
inc
scas
dec
or
leave
mov
ret
mov
and
js
dec
add
ja
call
push
gs
mov
inc
rcl
(bad)
in
xor
ret
add
add
push
pand
jo
es
test
movs
push
pop
jmp
lahf
sbb
mov
test
lea
nop
jecxz
xor
lds
leave
mov
das
mov
ror
xlat
outs
inc
xlat
pop
jmp
jns
pop
mov
mov
fs
call
pusha
stos
sub
or
and
nop
dec
or
cmp
mov
pop
ficom
sbb
in
pop
loop
addr16
dec
dec
sbb
dec
fiadd
adc
test
lds
loop
add
aas
cmp
push
pop
dec
xchg
adc
dec
mov
sub
popf
push
xor
cmp
xchg
mov
mov
ror
jge
adc
sbb
scas
push
sar
je
push
jp
fs
jl
fcmovnu
(bad)
xchg
(bad)
fsub
fbld
enter
jb
push
pop
mov
fs
pop
jno
or
dec
jae
dec
push
je
test
inc
inc
dec
in
jle
xchg
dec
xchg
inc
xchg
xchg
adc
jnp
sub
loope
and
jle
sti
pop
push
and
ret
jle
sbb
aas
out
fbstp
call
sub
mov
push
int3
jmp
dec
push
out
and
cmp
xchg
ror
mov
xchg
fisubr
repz
stos
push
ds
imul
ret
or
xor
sub
pop
or
pop
xor
push
cmps
cmp
ins
rol
pop
test
add
dec
enter
jmp
ffree
dec
cld
mov
js
and
inc
lods
jl
mov
hlt
cld
(bad)
xchg
outs
mov
gs
jmp
dec
cwde
pop
xchg
dec
jns
ins
jl
mov
sub
add
jge
jae
(bad)
xchg
cmp
stos
cmp
leave
outs
mov
stc
adc
ins
push
pop
daa
xchg
jp
sub
test
test
stos
lock
sbb
aas
ins
mov
sbb
pop
fdivr
cmp
inc
cmp
dec
gs
(bad)
sahf
daa
inc
pop
inc
(bad)
aam
pushf
movs
sub
or
xchg
xchg
push
ret
jo
xor
and
std
pop
fld
xor
pop
adc
mov
cwde
or
aaa
jnp
call
retf
cwde
push
test
xchg
mov
sbb
scas
and
in
cdq
jns
mov
bound
lods
add
retf
xor
adc
add
test
leave
loope
clc
jns
add
xor
mov
scas
cmp
push
inc
lea
and
ins
jge
mov
fs
dec
or
cmp
and
rcr
sbb
dec
cdq
retf
mov
into
mov
or
(bad)
out
fsubr
push
adc
test
lds
sbb
add
loope
dec
mov
xor
(bad)
pop
loop
mov
xchg
jne
jbe
out
xor
ds
cmps
sbb
ret
(bad)
jns
jae
push
mov
aas
xor
inc
push
sub
test
pop
out
int
out
test
imul
hlt
mov
js
mov
inc
shl
scas
sbb
fsubrp
dec
or
jmp
mov
inc
pop
(bad)
idiv
adc
hlt
cmp
scas
inc
iret
mov
lods
inc
dec
xor
out
aaa
outs
push
adc
popf
push
mov
popw
sub
(bad)
imul
addr16
arpl
pop
jmp
(bad)
jns
mov
in
test
or
scas
(bad)
jns
fs
iret
repnz
cmp
or
mov
test
sbb
sar
fwait
mov
lock
outs
popf
xor
gs
faddp
adc
cmp
nop
out
xor
sub
fdiv
lea
pop
(bad)
movs
clc
aad
out
sub
jno
fild
and
mov
mov
sub
fild
mov
rol
js
xor
mov
ficom
sbb
outs
push
xchg
cmp
les
xor
or
add
sti
outs
or
push
add
mov
pop
adc
mov
ins
(bad)
stos
fsubr
pop
sbb
mov
pop
(bad)
adc
dec
mov
shl
jmp
cmps
in
addr16
xchg
or
outs
repz
mov
fiadd
popa
sub
mov
inc
je
and
lods
jg
xor
ins
rcr
dec
(bad)
xlat
dec
in
mov
fistp
adc
icebp
dec
loop
inc
rdmsr
cmp
std
cdq
imul
stos
movs
out
mov
rol
mov
pop
mov
pop
cli
(bad)
cmps
loopne
frstor
sub
and
ffreep
call
aad
mov
lea
scas
adc
add
sbb
mov
ret
mov
push
shr
inc
inc
ins
movs
pop
lods
inc
repz
mov
jo
pop
call
(bad)
retf
(bad)
jp
adc
jae
not
pop
sbb
xor
jb
std
inc
nop
add
(bad)
sbb
ins
sbb
das
push
push
fsubr
xchg
in
cmp
scas
jg
in
xchg
and
pop
mov
call
neg
lods
aad
jle
outs
push
popf
xchg
jp
sub
ins
inc
bound
push
scas
or
clc
ds
mov
out
les
fcmovnbe
jge
add
and
es
out
hlt
jnp
retf
pop
jecxz
inc
jle
push
ja
cs
dec
add
adc
repnz
lods
js
aad
sub
jne
mov
pop
mov
and
pusha
xlat
ins
test
push
xor
or
sub
cmp
test
mul
jl
sbb
pop
or
cmps
scas
movs
xor
test
inc
pop
nop
sbb
ror
fldlg2
pop
push
out
test
test
xor
inc
lock
dec
nop
xchg
jecxz
push
adc
or
pop
mov
fdiv
inc
arpl
repnz
out
mov
push
xor
mov
push
mov
ins
jmp
pop
cmp
or
movs
or
sbb
mov
popa
inc
xchg
mov
ins
rol
scas
movs
push
or
sbb
push
int3
fst
aad
mov
nop
sub
and
call
cmps
xchg
inc
mov
mov
bound
xor
(bad)
push
pop
jle
xor
dec
mov
push
pop
gs
mov
mov
mov
jle
scas
outs
xchg
mov
push
call
icebp
jnp
jbe
push
mov
xchg
adc
adc
push
mov
cmp
adc
inc
adc
push
dec
or
cmp
std
mov
sub
dec
data16
mov
out
jge
rol
std
loopne
ins
dec
cs
ret
fisubr
pop
std
das
cmp
popf
jp
in
jne
stos
xor
retf
push
imul
sbb
test
mov
jno
ins
gs
sbb
mov
inc
dec
rcl
(bad)
fnstsw
dec
outs
aam
(bad)
or
inc
add
stos
inc
fwait
outs
mov
xchg
sub
in
or
push
or
xor
fld
push
(bad)
ja
dec
in
pushf
push
xor
inc
add
and
sbb
xor
into
mov
(bad)
call
rcr
pushf
xchg
mov
cs
mov
ins
sahf
cmc
sbb
push
and
rol
ins
outs
nop
lock
xchg
outs
inc
mov
mov
ror
mov
in
enter
push
jmp
cmps
adc
aad
test
xchg
add
jns
cmp
cwde
sub
mov
in
addr16
inc
outs
adc
aam
div
sbb
adc
outs
dec
and
xchg
pop
or
std
adc
loopne
cmps
imul
mov
inc
les
push
cld
pop
icebp
push
sar
adc
ss
mov
dec
xchg
mul
or
sub
les
xchg
dec
in
mov
push
ss
pop
pop
pop
out
add
inc
cs
xchg
shl
mov
fst
aam
outs
outs
mov
push
out
jno
arpl
shr
add
in
fidiv
cli
jns
sub
pop
push
mov
das
dec
cmp
lods
mov
test
lock
(bad)
and
pusha
js
mov
mov
lods
ins
ins
adc
xlat
cmp
dec
std
repnz
cs
or
dec
pop
pop
mov
mov
dec
mov
loop
pop
mov
jmp
psubq
or
and
cmps
repnz
aad
fdiv
cmp
(bad)
mov
mov
bound
stos
dec
cmp
inc
neg
mov
push
or
call
es
neg
mov
mov
inc
sub
and
mov
das
xchg
inc
jo
into
adc
add
ret
in
into
cdq
gs
mov
pop
or
test
imul
leave
push
(bad)
cmp
push
fsubr
and
test
adc
fdiv
enter
int3
dec
add
xchg
ja
sti
(bad)
sbb
jb
(bad)
or
cmps
aas
mov
pop
imul
cld
sbb
ja
push
and
hlt
data16
push
inc
and
push
movs
outs
sbb
dec
shl
jmp
imul
popa
pop
mov
push
lahf
xchg
xor
data16
popa
sti
sub
jbe
sti
clc
and
or
ret
iret
imul
outs
sar
addr16
pop
fidiv
xchg
xor
inc
enter
mov
popf
data16
mov
scas
add
jo
pop
cmp
outs
adc
lea
inc
add
push
fisttp
xchg
fstp
inc
mov
and
add
cdq
pop
arpl
pop
ins
(bad)
xlat
enter
pop
jae
mov
lahf
inc
rcl
push
popf
(bad)
and
xchg
(bad)
sbb
push
or
jmp
(bad)
sbb
test
out
inc
pop
loope
xchg
inc
pop
test
pop
push
imul
sti
sbb
push
jae
arpl
pop
or
pop
nop
inc
jmp
adc
arpl
sub
cmp
aas
dec
xchg
or
inc
and
aas
arpl
fcmovnbe
fwait
movs
(bad)
cmp
pushf
ss
and
je
inc
adc
fadd
sbb
std
or
cmc
mov
ud1
xor
jge
cmovs
rcr
adc
adc
add
pushf
or
int
fs
mov
push
inc
push
je
sub
ror
movs
dec
push
ror
push
lea
movs
cmp
js
sub
xchg
mov
mov
sbb
mov
xchg
lds
xor
popf
enter
jmp
loop
push
retf
push
push
sbb
pop
mov
ss
sub
jne
xchg
(bad)
xchg
mov
stos
jmp
xor
int3
mov
imul
std
bound
test
xchg
js
pop
ins
jno
aad
xor
cwde
xor
adc
pop
lods
inc
add
sub
xchg
mov
mov
stos
push
(bad)
dec
scas
ja
out
jmp
dec
mov
or
mov
jg
aaa
inc
adc
mov
mov
push
stos
add
lea
xor
sbb
sar
pop
push
cs
sub
dec
fstp
jns
and
inc
fcmovnb
in
jmp
push
(bad)
and
pop
push
cmp
retf
fst
or
cmp
ret
inc
not
pusha
int3
inc
adc
gs
fisttp
inc
nop
jle
mov
dec
cmp
sar
push
enter
and
add
mov
pop
sub
fs
push
cld
pop
push
lods
sub
loope
out
rcl
sub
mov
jbe
cdq
loopne
xchg
jmp
xor
sbb
xor
mov
xor
inc
aaa
cmp
jmp
jg
push
push
jae
out
or
cmp
inc
fdiv
mov
test
push
pop
out
shr
rol
lds
out
pop
test
xchg
sub
popf
xor
into
repnz
pop
popf
into
(bad)
adc
add
mov
sar
ret
jae
js
scas
test
adc
or
adc
jmp
xor
je
adc
ins
mov
iret
cmc
fcom
loop
test
in
fdivr
(bad)
loope
sbb
dec
ret
sahf
dec
add
lods
push
push
pop
xchg
xchg
lock
push
lea
loop
retf
bound
pop
jae
and
cdq
data16
mov
pushf
add
dec
js
xor
add
test
pop
test
jp
pop
jns
jmp
jge
jo
clc
mov
sahf
in
out
shr
imul
imul
xchg
mov
ds
in
call
xor
sbb
into
ror
push
mov
and
mov
sar
sbb
js
xor
scas
into
mov
or
(bad)
ja
mov
es
data16
bound
(bad)
jmp
push
inc
push
ds
push
pop
idiv
test
loop
dec
movs
jns
add
dec
mov
sti
push
sbb
das
int3
jle
fimul
in
cli
fiadd
xchg
jp
and
(bad)
jle
fcom
cmp
js
cmp
sbb
xor
repnz
or
cmp
ins
rcr
pop
xchg
daa
dec
sub
sub
adc
out
into
cmc
cmp
xchg
fcomp
dec
(bad)
add
and
adc
or
(bad)
jo
iret
ins
outs
enter
or
cmps
stc
iret
pop
call
cdq
push
mov
dec
adc
(bad)
push
push
lahf
and
inc
dec
idiv
std
add
movntq
out
xchg
push
mov
mov
sbb
jb
pop
push
sub
retf
jns
mov
or
fnstenv
fadd
sbb
ss
pop
dec
jg
sub
xchg
mov
repz
movs
ja
jmp
retf
call
outs
in
sub
push
pop
repnz
pop
fstp
les
(bad)
mov
xchg
adc
xchg
outs
repz
pop
add
out
ror
xchg
push
dec
mov
daa
sbb
rol
adc
fiadd
les
out
mov
js
dec
cwde
sub
and
int3
and
dec
ins
xor
dec
rcr
pusha
or
or
mov
shl
fcmovnu
push
inc
pushw
jno
ds
mov
xor
mov
call
cmp
jb
push
xlat
cmp
cmp
aaa
push
inc
push
jl
xor
adc
xor
inc
and
mov
out
and
popf
lods
add
dec
jecxz
loop
mov
fistp
test
stc
mov
fidiv
inc
adc
xchg
outs
xchg
out
stc
rol
cmp
cmps
cwde
scas
vmovshdup
nop
inc
xor
dec
xchg
stos
xlat
mov
xor
pop
xor
pop
call
and
push
out
add
leave
retf
jmp
(bad)
scas
and
pop
mov
retf
div
mov
out
das
pop
sub
dec
adc
pop
mov
loopne
movs
inc
icebp
in
cmp
cmc
gs
call
push
sub
je
sbb
add
jl
jmp
xchg
call
mov
out
retf
mov
icebp
mov
adc
mov
popf
dec
clc
rcr
movs
xchg
cmp
pop
xchg
mov
dec
xchg
mov
sbb
cwde
mov
js
mov
cmp
fstp
mov
stc
ds
xchg
fwait
push
xor
call
sub
aaa
add
sub
fbld
cmps
sar
jle
scas
lods
mov
or
push
test
jnp
sahf
shl
push
pop
pop
lods
dec
scas
jmp
sti
adc
sub
inc
jle
mov
push
jb
mov
and
or
dec
das
mov
push
sbb
add
(bad)
or
pushf
dec
mov
mov
ins
mov
(bad)
div
mov
mov
dec
push
or
aad
int3
mov
rol
fisubr
pop
jge
pop
dec
xor
mov
popf
adc
push
imul
sub
js
out
repnz
add
fs
aam
fs
bnd
test
mov
mov
mov
in
outs
pop
pop
fstp
or
das
xor
mov
jp
mov
outs
or
stos
cmc
or
imul
mov
shl
ins
push
jge
mov
sbb
xor
mov
data16
repz
loope
inc
ds
cmps
ffreep
ins
lods
fs
mov
dec
jmp
mov
in
xor
dec
xchg
pop
inc
out
jmp
jl
in
lea
adc
test
inc
rcl
cs
push
cmp
mov
add
icebp
jge
and
loope
sbb
out
or
xchg
fisttp
les
std
test
dec
add
retf
jmp
jae
daa
imul
in
inc
push
test
addr16
inc
adc
stos
(bad)
jne
and
scas
xor
test
test
outs
pop
lods
add
mov
daa
mov
std
mov
pushf
rcr
out
rol
pop
cmc
mov
xchg
fwait
add
test
call
push
pop
outs
add
inc
popf
xchg
push
inc
push
in
jge
sbb
loop
mov
lods
das
jmp
xchg
xor
mov
mov
mov
(bad)
cmp
push
cmp
repz
mov
xor
popa
fmul
inc
nop
dec
les
mov
xchg
hlt
dec
stos
xor
popa
in
fs
test
iret
repnz
arpl
jle
xor
mov
fistp
dec
dec
scas
int
mov
sub
adc
and
jno
cs
in
cmp
idiv
push
test
add
and
jb
cwde
sub
push
jb
imul
call
cmps
cli
push
out
mov
sbb
cmp
outs
sbb
jge
add
gs
lock
daa
xchg
test
mov
adc
sub
scas
loope
into
test
adc
pusha
shl
jmp
jg
mov
mov
(bad)
sti
retf
push
cli
mov
fnstsw
jae
loop
pop
sbb
push
inc
mov
outs
add
arpl
xor
lods
mov
pop
and
fstp
adc
popf
jbe
add
enter
(bad)
cmps
loop
sbb
inc
ins
(bad)
mov
adc
xlat
jbe
and
pop
je
xor
jns
or
dec
sbb
jae
(bad)
jge
jle
or
fs
cs
sbb
ja
test
mov
mov
push
xor
xchg
dec
jg
(bad)
mov
or
push
(bad)
xor
test
add
dec
and
imul
ror
sub
jnp
push
in
adc
inc
(bad)
aad
pop
stos
cmp
xor
sbb
enter
sub
dec
and
das
aam
jnp
stos
hlt
pop
imul
lahf
test
fwait
jne
push
mov
and
xchg
jmp
scas
cmp
inc
retf
dec
repz
jg
mov
(bad)
jmp
xlat
imul
ds
push
push
stos
fs
out
push
xchg
(bad)
fdiv
fild
jbe
xor
add
pop
xor
(bad)
ja
jae
mov
nop
mov
push
cmp
adc
rol
scas
retf
loop
ins
mov
retf
inc
jae
inc
pop
lds
xchg
shl
push
mov
inc
jl
adc
sbb
adc
sub
addr16
mov
jg
cmps
xor
sub
sti
jmp
mov
add
iret
sar
fmul
dec
mov
and
fidivr
fbstp
xchg
xlat
push
cmp
(bad)
stc
arpl
sbb
movs
lods
mov
lods
mov
movs
xlat
jmp
mov
test
dec
(bad)
fsub
add
adc
jle
mov
ja
fimul
dec
cmp
xor
adc
aad
gs
test
leave
or
mov
fdiv
xlat
shl
dec
push
mov
mov
call
xchg
and
test
and
sbb
lahf
clc
sti
push
iret
jge
jbe
push
cmp
adc
pop
movs
fimul
arpl
mov
rol
dec
stos
mov
xlat
jmp
push
(bad)
stc
mov
cwde
je
push
mov
add
out
mov
call
jo
sub
xor
jo
mov
xlat
xor
jp
popf
xchg
xchg
xchg
mov
add
mov
jnp
or
sti
pop
ins
mov
movs
cwde
mov
and
fidiv
lds
es
cmps
jmp
in
lahf
pop
outs
(bad)
fild
mov
pop
cld
cmp
adc
jae
xchg
stc
pop
xor
outs
fwait
pop
fld
add
outs
std
fwait
popf
loop
loopne
pop
mov
push
shl
push
(bad)
out
jmp
cmps
scas
pop
inc
scas
inc
cmp
or
ficom
cwde
jae
out
jmp
out
js
xchg
xchg
mov
adc
inc
sti
pop
je
ret
shl
pop
iret
push
inc
scas
ds
int3
mov
push
icebp
addr16
jg
mov
sub
sbb
push
pop
mov
or
jge
repnz
and
dec
push
inc
jle
and
mov
ret
outs
int3
inc
and
fmul
pop
out
jns
sbb
dec
cli
adc
cmp
xor
push
adc
movs
push
inc
cmovge
push
loop
add
out
or
ins
ret
mov
test
shr
out
adc
ffreep
adc
pushf
or
(bad)
mov
xchg
jl
push
push
mov
mov
cwde
ffreep
mov
mov
or
sbb
jl
and
pop
mov
jmp
or
mov
scas
aaa
sub
into
int
pop
cmp
into
pop
ja
mov
adc
xor
lods
pop
and
mov
mov
jbe
ins
lods
iret
psubw
(bad)
push
add
sti
std
inc
sbb
xor
test
sub
and
dec
jnp
mov
jg
inc
jl
sub
das
addr16
lods
jp
stos
mov
jle
and
ss
call
sahf
pop
inc
mov
sub
lea
dec
mov
pop
(bad)
int3
xchg
jmp
mov
xor
(bad)
repz
popa
imul
lods
out
jo
fiadd
add
shl
shr
call
push
dec
inc
in
inc
fs
adc
adc
mov
retf
push
fisubr
shl
les
into
aas
jae
pop
xlat
popf
mov
push
ins
sar
imul
xor
cmp
xchg
jge
in
ret
cmp
aas
lods
shl
sbb
cdq
sbb
cmps
fisubr
repnz
or
in
lock
shr
dec
inc
in
out
inc
add
push
outs
adc
int3
stos
(bad)
xchg
nop
jge
and
aas
in
add
mov
lods
xchg
clc
inc
push
lds
mov
sbb
mov
fidiv
dec
nop
clc
cmp
jnp
iret
mov
mov
mov
mov
dec
mov
pop
cmc
mov
or
call
cmp
xchg
xchg
rcr
sub
mov
pop
adc
test
(bad)
daa
dec
(bad)
addr16
dec
cmp
mov
mov
into
js
aaa
jmp
xchg
lea
test
mov
mov
xchg
xor
and
js
dec
stos
xor
das
add
dec
ja
in
push
push
or
ds
jmp
adc
cld
xchg
shr
ins
mov
jb
loop
dec
cmps
js
nop
sbb
std
and
dec
sub
or
push
mov
mov
fisub
(bad)
in
cmp
lods
scas
xor
lea
shr
in
push
mov
lods
sbb
sbb
mov
mov
nop
loop
sub
xor
cli
test
dec
cli
ss
push
xor
xchg
add
mov
in
mov
or
push
and
leave
out
sbb
jecxz
mov
lods
and
(bad)
daa
mov
sar
xchg
mov
movs
push
scas
jmp
arpl
repz
sbb
dec
cli
scas
pop
ins
(bad)
adc
xchg
lea
ret
cmp
enter
js
fisubr
les
push
dec
cdq
xchg
push
mov
lahf
fistp
and
pusha
mov
mov
addr16
out
jl
jp
cmp
in
stos
adc
test
movs
mov
mov
jg
push
push
(bad)
fidivr
mov
frstor
mov
ins
leave
mov
push
ja
pop
mov
aaa
dec
call
aas
in
mov
push
xchg
mov
push
sar
stc
out
inc
push
sar
fmul
dec
or
push
loope
xor
jle
shl
mov
retf
fcomp
inc
xchg
add
push
rol
jb
mov
xchg
outs
imul
mov
inc
jo
add
daa
push
std
xor
jge
retf
in
test
mov
mov
aas
adc
ret
stc
and
(bad)
cmp
dec
jp
popf
cmp
push
dec
repz
(bad)
not
or
mov
xor
retf
push
movs
int3
loope
jo
pop
mov
es
push
fsubr
push
inc
mov
pop
shr
hlt
pop
test
sbb
icebp
push
dec
in
adc
cmp
in
xchg
in
ret
lds
sub
jns
in
push
jb
push
adc
dec
ret
repnz
mov
sbb
movs
xchg
cmp
mov
cmp
dec
sub
or
fdiv
call
cld
es
in
xchg
dec
ds
dec
(bad)
sub
(bad)
into
repz
xor
movs
lods
(bad)
sbb
pop
mov
xor
js
leave
int
mov
dec
adc
sbb
inc
imul
rol
xor
push
sub
jmp
cmps
ins
cmp
inc
and
mov
inc
retf
and
aas
das
xchg
adc
inc
out
ss
aad
lods
(bad)
push
cmp
or
icebp
add
jnp
push
push
aad
in
sub
pop
and
pusha
add
xchg
les
push
enter
push
outs
or
jno
ret
mov
pop
adc
addr16
mov
cmc
xor
jp
(bad)
repz
push
xor
repnz
sbb
lea
xor
rcr
retf
adc
in
outs
leave
aad
add
xor
jg
add
jge
loopne
inc
jo
imul
xchg
test
add
or
mov
and
jb
aaa
jg
sbb
cmp
imul
jg
test
js
mov
mov
jmp
xor
std
or
cld
mov
ins
push
popa
stc
mov
sub
dec
cmp
fdivr
mov
pop
pop
mul
sub
push
and
fdivr
xlat
and
mov
outs
cmp
push
mov
data16
hlt
cmp
jbe
and
mov
ja
adc
pushf
sti
adc
pop
fs
push
dec
cmp
jecxz
ja
jp
push
jne
inc
inc
mov
ss
cs
dec
stos
push
sbb
lods
inc
pop
xchg
xlat
lock
and
cmp
or
iret
ss
test
xor
fst
enter
pop
cmc
mov
call
dec
pusha
xchg
(bad)
pop
enter
adc
pop
and
mov
arpl
adc
inc
sbb
pop
js
adc
xchg
sub
inc
jl
sbb
jle
cmp
popa
jb
push
xor
jns
adc
jl
pop
cmp
pop
cmp
adc
mov
repnz
aam
jae
call
mov
dec
cld
or
mov
jnp
mov
xchg
lahf
xchg
inc
cmps
push
stos
enter
dec
cmc
xor
das
cmps
cld
outs
dec
pop
xchg
(bad)
pusha
adc
std
fsub
fs
inc
adc
dec
lods
push
ins
pusha
mov
inc
add
cmps
cmp
iret
and
fldlg2
dec
mov
sbb
xchg
imul
jnp
sub
inc
push
pop
fdivrp
mov
imul
push
nop
sub
fcomp
push
mov
fiadd
or
out
push
push
mov
imul
and
scas
icebp
fiadd
fcom
fldcw
jg
adc
in
icebp
xor
sar
xor
fstp
clc
icebp
xchg
inc
arpl
mov
dec
jmp
mov
cmps
popa
and
push
xchg
ins
push
push
dec
add
frstor
pop
stos
in
lods
jmp
inc
add
mov
rol
adc
popf
repnz
cmps
inc
cmp
adc
and
sub
mov
in
and
test
and
mov
xor
adc
aad
mov
push
mov
add
mov
cmp
loopne
pop
cmp
dec
xchg
or
sbb
push
jnp
cwde
fimul
xor
adc
das
call
daa
mov
shr
dec
add
repz
pop
ficomp
sbb
pop
xchg
adc
clc
lea
loope
das
in
xchg
test
adc
jge
push
adc
outs
movs
adc
mov
mov
pop
fimul
inc
sahf
add
and
leave
mov
sahf
push
jne
mov
les
fst
dec
lea
aaa
sbb
pop
movs
aam
and
retf
jmp
in
xor
ficomp
mov
fisttp
jl
or
(bad)
cld
push
out
pop
sbb
push
or
mov
jno
push
inc
adc
enter
jmp
adc
(bad)
push
loop
je
es
out
pop
clc
adc
add
sub
pop
ins
and
mov
xchg
imul
inc
xor
jnp
lahf
or
ror
inc
fwait
xor
inc
in
mov
pop
pusha
dec
cli
std
gs
les
xor
mov
fldcw
pop
push
mov
xor
pop
xor
rol
popa
xchg
add
mov
mov
xchg
add
pop
imul
retf
push
mov
sub
adc
mov
fidiv
mov
icebp
adc
mov
sbb
jae
out
fidivr
ror
fild
cli
sbb
mov
adc
pop
lahf
mov
jl
jo
push
jecxz
hlt
jb
popa
add
push
popa
or
fdivp
(bad)
scas
mov
(bad)
jmp
xchg
lds
in
in
mov
mov
int
xor
push
test
cmp
sub
or
mov
ror
(bad)
data16
cs
xor
jnp
push
ja
ret
ss
fbstp
sbb
mov
push
aam
dec
sbb
xchg
push
cmp
jno
xchg
and
pop
aaa
dec
mov
jne
test
xchg
outs
je
jno
call
inc
inc
or
outs
sub
pop
jns
lods
jg
mov
cmp
test
xor
mov
cmc
jmp
bound
repz
fstp
cmp
shr
push
(bad)
pusha
pop
lock
mov
adc
jo
int
adc
cmp
js
jnp
inc
xor
sub
mov
lahf
mov
cdq
das
gs
aas
(bad)
xchg
out
mov
aaa
sub
(bad)
shr
add
jle
xchg
sti
aaa
popf
cmp
mov
pop
or
xor
xor
push
push
nop
cmp
je
clc
aaa
jnp
xchg
xor
mov
adc
add
rol
jl
add
mov
and
push
mov
scas
(bad)
(bad)
dec
mov
pop
xor
movs
jnp
inc
test
xchg
cmps
push
sbb
sbb
xchg
test
stos
push
shl
mov
pop
fidiv
stos
mov
out
jmp
mov
lods
mov
(bad)
xchg
std
mov
xlat
cdq
and
mov
pop
inc
imul
(bad)
hlt
psubusw
nop
adc
retf
in
scas
je
in
repz
int
xor
jle
imul
sub
jb
add
(bad)
out
mov
popf
rol
push
aaa
movs
add
out
push
stos
ret
jmp
inc
rol
mov
mov
lods
mov
lods
or
add
mov
add
xor
pusha
add
pushf
pop
out
mov
mov
mov
test
lds
pop
xchg
in
lods
rcr
xor
addr16
loop
and
push
or
pop
cmp
mov
ja
jne
jo
retf
ins
cs
je
popa
iret
jnp
aaa
mov
repnz
mov
lds
or
loope
and
add
out
cmp
cmp
adc
enter
mov
mov
cmp
push
dec
push
hlt
jno
test
aam
outs
ror
mov
call
jmp
pop
in
cwde
mov
adc
dec
aam
aam
sub
inc
xchg
mov
and
fs
mov
push
repnz
int
mov
or
pop
outs
or
adc
mov
into
int
leave
mov
jl
addr16
dec
xor
adc
leave
push
dec
not
xchg
stos
outs
pop
pusha
neg
fmul
adc
pop
xor
mov
ror
cmp
(bad)
std
test
loopne
cmp
xchg
dec
mov
add
mov
xlat
mov
jb
ja
pop
add
pop
loop
pop
mov
inc
jnp
ret
mov
push
xchg
inc
movs
mov
or
pop
or
push
pop
or
jnp
push
shl
hlt
fimul
call
xlat
(bad)
cli
mov
add
ins
daa
call
mov
(bad)
jmp
stc
out
mov
pop
pop
ror
dec
ins
fsub
jle
aas
test
fs
pusha
test
bound
loope
push
add
jne
pusha
pop
jle
dec
retf
mov
push
sub
pusha
cmp
data16
mov
jmp
inc
push
ds
(bad)
add
hlt
cwde
cmp
imul
push
aam
dec
dec
ret
jle
shr
xchg
jne
add
shl
push
jg
cmp
inc
push
mov
and
(bad)
mov
jmp
in
adc
push
inc
shl
adc
lds
pop
popf
jge
aam
adc
adc
test
aad
mov
cmp
jo
gs
add
aas
dec
mov
stos
push
stos
in
inc
into
in
stos
sub
out
ja
sub
pushaw
mov
dec
call
and
jbe
pusha
mov
inc
fsub
jmp
out
jmp
gs
(bad)
mov
adc
(bad)
jns
jne
stc
mov
int3
std
cmp
sahf
out
push
in
and
ja
stc
add
push
inc
call
add
clc
pop
dec
mov
adc
ins
call
xchg
xor
out
shr
outs
mov
adc
dec
pop
in
out
jle
in
retf
sub
lods
mov
push
loope
fcmovnu
xchg
cmp
retf
cmp
mov
jne
mov
push
aam
add
repz
retfw
xchg
cmc
and
mov
add
rcr
int3
jns
jp
inc
cwde
jg
stos
or
inc
popa
outs
adc
pusha
popa
adc
xor
(bad)
adc
(bad)
fcmovb
push
mov
mov
dec
sub
xor
mov
pushf
push
enter
jmp
adc
xor
mov
sbb
and
xchg
daa
jae
dec
lea
pop
jnp
call
cdq
mov
mov
xchg
ss
xor
mov
cmp
add
movs
inc
pop
es
mov
and
(bad)
fdivr
cmps
ja
push
or
gs
jl
jg
scas
add
data16
popf
loopne
mov
aad
jge
out
nop
jle
popf
pop
mov
loopne
daa
cmp
aam
imul
cmp
inc
sub
xor
stc
not
(bad)
and
sbb
adc
cmp
jne
mov
addr16
jne
xor
test
call
cld
jo
push
dec
add
xchg
stos
sub
arpl
inc
mov
sub
inc
push
ins
jmp
test
cld
out
fst
jmp
jp
jmp
fcmovbe
pop
cmps
adc
sar
cmp
and
enter
push
mov
ret
push
js
lahf
xchg
popf
xchg
mov
into
adc
in
xchg
mov
mov
add
sbb
popf
xor
mov
pop
sub
sbb
arpl
jl
mov
mov
jmp
(bad)
cmp
into
rcl
mov
adc
xchg
push
jmp
sub
add
das
aad
mov
popa
mov
xchg
xchg
add
push
sar
dec
dec
adc
daa
or
jmp
inc
cli
mov
data16
jnp
shr
jmp
mov
add
cli
movs
das
popa
and
retf
xchg
mov
shr
sbb
int
mov
xlat
adc
adc
lea
jae
ret
jbe
scas
cmp
cdq
mov
stos
out
and
stos
and
das
in
fucom
jo
xor
rcl
jno
push
jbe
mov
xchg
mov
xor
inc
jns
add
and
add
call
shr
or
or
loopne
or
cmp
mov
sbb
or
sbb
(bad)
nop
ss
xchg
push
enter
mov
je
dec
add
mov
aad
fist
mov
gs
out
mov
sub
mov
ins
enter
jp
sbb
cwde
inc
xchg
into
and
mov
scas
pop
adc
or
cmp
into
ficom
cmp
xchg
xchg
mov
push
xor
and
fimul
(bad)
mov
add
repz
mov
mov
iret
pop
pop
ins
ins
jg
push
xchg
dec
stos
jb
jmp
test
pushf
rep
ins
retf
pop
les
push
out
mov
into
nop
fdivr
sbb
popf
sar
or
in
js
or
stos
rcr
or
or
xor
or
mov
add
push
push
int
inc
dec
add
fsub
sti
neg
mov
(bad)
or
ss
mov
push
retf
leave
mov
push
pop
ret
jo
cmps
xchg
fcmove
cli
call
test
je
retf
fsubr
sub
cmp
mov
call
sub
int
or
pop
call
add
push
add
mov
jb
stos
or
add
rol
repnz
push
push
movs
push
adc
inc
add
retf
cmps
pop
pop
adc
call
stos
(bad)
stc
xchg
jge
call
xor
jecxz
or
dec
mov
(bad)
jecxz
push
in
ret
pop
hlt
or
loopne
jbe
and
inc
in
jne
push
imul
mov
inc
out
pop
icebp
mov
push
sub
and
fcom
sub
jne
(bad)
cmps
add
sub
retf
aaa
fdivr
jmp
adc
leave
fld
(bad)
lds
push
mov
scas
(bad)
lock
retf
retf
sub
sbb
fsub
xchg
mov
add
inc
cmp
jnp
int
imul
sub
adc
lods
inc
scas
call
push
sub
lahf
aas
xchg
add
nop
dec
mov
mov
(bad)
sar
sub
mov
jne
adc
sub
repz
call
pop
(bad)
fisub
pop
test
mov
push
je
fmul
adc
jg
bound
add
enter
xor
jl
jno
adc
and
adc
retf
arpl
mov
jo
cmps
cmp
repz
(bad)
out
sbb
pop
cmc
jns
pushf
in
aas
and
pop
inc
push
mov
aas
imul
pop
jae
fsub
aaa
pop
mov
and
out
leave
add
loope
int3
dec
adc
xor
sub
popa
pop
push
aaa
add
in
sbb
mov
pop
sub
loopne
call
lahf
setns
sbb
inc
fs
iret
cmp
sbb
jae
out
mov
stos
mov
repz
icebp
repz
and
add
push
adc
les
jno
lea
int3
out
jb
xchg
push
lsl
outs
pop
fs
pusha
(bad)
or
in
mov
es
push
cmp
adc
sbb
jnp
add
sbb
sti
pop
icebp
pop
dec
adc
call
popa
ret
sub
push
adc
jno
jo
pop
pop
call
or
test
aam
jnp
xor
stc
outs
cwde
std
and
jbe
outs
shl
adc
in
shl
or
mov
adc
push
std
iret
push
test
rcr
mov
mov
or
and
inc
push
jmp
movs
retf
dec
xchg
(bad)
jb
dec
add
jmp
fidiv
into
das
jo
mov
stos
lock
or
pop
fsubr
test
sbb
mov
inc
inc
ficomp
and
hlt
loopne
shl
adc
cmp
jle
(bad)
ror
and
movs
mov
xor
jecxz
mov
scas
imul
call
lods
xchg
leave
mov
loopne
pop
push
xor
mov
ja
dec
jg
mov
loop
ss
push
mov
iret
ins
aam
or
in
mov
mov
sub
fistp
loope
hlt
xchg
movs
push
fwait
jo
ss
ja
xchg
imul
lea
pop
shl
out
push
push
jecxz
shr
cmp
jo
push
repz
call
xchg
std
inc
cmps
sbb
aad
sub
clc
add
or
mov
xchg
sub
inc
jmp
mov
popa
sub
adc
mov
fcomp
xchg
ret
jo
stos
mov
pusha
pop
xor
push
dec
loopne
push
les
adc
ss
ss
inc
pop
inc
or
hlt
je
shl
test
dec
pop
test
xlat
xchg
cmc
add
ds
dec
into
ror
fisttp
sti
lds
stos
mov
jg
mov
mov
ins
pushf
daa
cmp
test
out
gs
jno
jl
std
in
add
sub
push
ret
shr
cli
inc
cmps
ja
cmp
fsub
inc
mov
pop
add
dec
pop
mov
sbb
stos
fidivr
outs
jnp
mov
cli
push
mov
jo
add
aam
scas
iret
retf
sbb
add
push
pop
ins
aaa
jo
mov
or
lods
sbb
xchg
test
xchg
enter
xor
cli
aaa
jns
lods
fild
jbe
mov
jb
mov
stc
jae
inc
inc
jns
mov
popf
shr
mov
cmps
push
ds
icebp
leave
or
leave
arpl
mov
stos
enter
and
test
std
hlt
movs
push
mov
bndldx
sbb
mov
adc
fisttp
mov
cmp
push
cmp
sbb
cmp
imul
jae
inc
xor
inc
cmp
mov
loopne
pop
ss
dec
das
push
mov
imul
xchg
lahf
dec
lea
sbb
cmp
arpl
inc
mov
shl
mov
sub
sbb
mov
xlat
ror
in
jg
loope
cmp
outs
in
or
pop
dec
(bad)
fstp
mov
push
sbb
les
popf
mov
mov
test
pop
mov
mov
pop
mov
mov
ror
mov
stos
fisttp
ds
cmps
mov
sti
adc
pop
pop
adc
loop
cmp
jno
jmp
adc
xchg
pop
dec
inc
jbe
jmp
lea
mov
loopne
sub
jmp
xor
add
mov
movs
cdq
outs
cmp
ss
shr
jae
mov
mov
jg
mov
sub
add
or
cmp
dec
(bad)
fs
les
sbb
test
or
add
mov
in
js
dec
and
shl
jbe
add
push
scas
dec
inc
adc
div
jb
jl
and
inc
jno
out
sub
jmp
repnz
pop
adc
(bad)
fsubr
mov
push
mov
imul
adc
pop
mov
xchg
dec
adc
dec
inc
jb
add
jp
(bad)
mov
shl
(bad)
push
push
call
mov
fwait
push
std
stos
jecxz
mov
and
mov
cmp
mov
mov
imul
inc
nop
imul
mov
jo
dec
push
inc
jns
clc
add
xlat
sbb
mov
and
dec
outs
out
mov
cmp
or
pop
pop
sub
js
inc
sbb
imul
add
shr
cmp
(bad)
aad
jno
sub
mov
jp
mov
xchg
je
test
mov
cli
enter
pop
adc
mov
pushf
sbb
cmp
neg
push
hlt
inc
jb
sub
mov
jg
dec
retf
push
in
mov
mov
out
xchg
lods
xor
outs
push
sbb
pop
es
dec
jp
repz
retf
jo
mov
dec
pop
loop
and
jp
iret
(bad)
mov
jne
out
pop
xchg
mov
sub
inc
pop
pop
dec
cmp
cld
push
sub
and
pop
(bad)
add
(bad)
(bad)
pop
mov
sub
xchg
ins
std
(bad)
aad
jb
je
pop
mov
icebp
(bad)
cmp
sub
out
mov
out
mov
xor
call
jb
and
mov
or
scas
test
and
outs
mov
jmp
sar
mov
inc
jp
rcl
adc
and
(bad)
jmp
lock
sbb
sbb
call
repz
inc
out
arpl
pop
mov
pusha
arpl
mov
sbb
loopne
movs
add
shr
xor
push
sbb
and
(bad)
test
call
mov
adc
jne
test
jb
sub
push
sbb
inc
sbb
js
dec
cld
pop
and
in
retf
jmp
out
sub
mov
sub
jmp
call
jge
enter
jno
lea
mov
and
ret
js
or
push
jae
mov
in
mov
push
fisttp
loopne
adc
add
dec
cdq
lea
xor
mov
mov
push
jae
jmp
and
jo
dec
mov
lods
lods
xchg
dec
pop
or
bound
jge
mov
xchg
xchg
xchg
mov
fist
mov
call
pop
(bad)
lock
retf
call
push
mov
jp
test
jle
add
sub
fsubr
cli
loope
ds
loope
out
mov
xor
xchg
cld
out
cmp
loope
fisub
jg
inc
push
int3
out
aas
push
cdq
dec
or
sbb
gs
out
pop
outs
jge
push
push
dec
cwde
mov
xor
ret
aam
test
pusha
sbb
jmp
stos
sbb
sbb
pop
fwait
xor
test
addr16
outs
mov
jmp
in
inc
pusha
or
clc
mov
mov
js
pop
mov
jmp
push
adc
mov
fistp
jp
fisub
and
popa
out
sbb
addr16
push
xchg
(bad)
jecxz
movs
movs
cs
push
or
cmp
stos
retf
test
push
xchg
push
loop
cmp
and
(bad)
mov
mov
sar
push
and
jns
xor
jmp
add
add
mov
mov
cmp
bound
adc
push
or
repz
xor
(bad)
pop
adc
fstp
cmc
clc
jns
xchg
mov
push
(bad)
jb
ss
jae
iret
aad
inc
jnp
dec
sbb
pop
jmp
in
aad
in
xor
mov
gs
push
sar
push
dec
xchg
or
fucom
sti
out
fcom
mov
bound
addr16
fimul
cmps
push
and
adc
cs
test
push
push
xchg
outs
and
dec
aas
mov
hlt
cmps
mov
ins
sbb
scas
loop
mov
mov
mov
mov
mov
or
in
lahf
shl
pop
pusha
push
lods
shr
and
push
pop
xchg
mov
cmp
in
les
in
add
retf
xor
pop
sbb
ja
loopne
sbb
fnsave
add
dec
ds
or
jmp
push
or
mov
push
jbe
clc
aad
in
cmp
xchg
test
shl
out
out
(bad)
mov
push
out
aas
adc
out
repz
pop
in
fwait
dec
sbb
icebp
adc
jmp
icebp
cmp
in
xchg
arpl
mov
or
mov
jle
push
imul
adc
pop
pop
jb
mov
jmp
aad
ficomp
loopne
cld
cmp
sbb
daa
jb
shl
rol
inc
fwait
inc
mov
nop
jle
mov
fsubr
mov
in
cmp
aas
mov
cmp
adc
jae
mov
mov
(bad)
sti
dec
movs
repnz
mov
loope
xor
mov
dec
inc
ret
sbb
aam
stc
adc
loope
ds
push
rcl
in
mov
xchg
addr16
xchg
and
add
jb
jnp
fs
lds
pop
mov
and
inc
or
xchg
xchg
cdq
sub
mov
stos
in
adc
(bad)
fld
push
jmp
sub
sub
mov
(bad)
repnz
dec
stc
in
inc
pop
pop
outs
or
call
or
cmp
test
jge
push
mov
inc
and
mov
jg
cmp
mov
into
rol
mov
test
mov
jl
scas
call
jge
sahf
cdq
lods
mov
into
mov
sbb
sbb
mov
inc
jae
and
or
mov
pop
stc
mov
xor
push
mov
loope
jo
and
pop
push
idiv
pop
js
mov
addr16
cld
les
add
and
in
and
xor
xchg
and
jg
icebp
push
dec
addr16
cwde
fstp
jge
jl
sub
(bad)
ins
shl
dec
lock
pop
hlt
cld
icebp
push
in
test
xor
mov
mov
(bad)
loopne
shr
leave
in
mov
in
std
fsubr
fucomi
mov
push
aad
sub
mov
sub
jg
jle
jno
push
in
pop
lods
adc
jnp
xor
cdq
xor
cdq
(bad)
fsub
and
push
in
outs
pop
push
mov
xor
call
leave
cmp
mov
xor
movs
out
xlat
cdq
dec
or
mov
xor
dec
popf
add
mov
and
popa
cmp
add
imul
jnp
sub
mov
scas
add
repnz
scas
mov
mov
das
xchg
(bad)
cwd
mov
sbb
rcr
adc
pop
ins
mov
inc
out
cmp
aaa
setne
push
or
into
mov
add
mov
dec
cdq
cmp
mov
jo
nop
mov
hlt
dec
inc
clc
pushf
aad
mov
mov
cmps
mov
pop
fisttp
lods
inc
and
pop
imul
mov
mov
fldcw
pop
or
aad
(bad)
pop
cmp
mov
push
inc
xchg
push
cmp
xor
out
ins
stos
push
outs
(bad)
dec
out
jbe
es
cld
lds
cld
dec
inc
pop
sahf
pop
cmp
add
or
cmp
pop
mov
pop
dec
adc
test
xchg
cmp
mov
fst
jmp
jbe
cmp
cld
mov
adc
es
mov
push
jmp
and
int3
fst
mov
sub
out
in
imul
out
mov
outs
add
mov
add
jg
int
lea
out
sub
inc
rcl
sbb
shr
fist
pop
fmul
retf
pop
dec
add
pop
xor
and
jle
mov
ins
xchg
or
mov
sbb
inc
call
ds
adc
sub
cdq
jmp
fcom
inc
call
loope
mov
cs
xor
add
dec
mov
cmps
jo
inc
fist
outs
aaa
mov
and
xor
pop
int
add
push
add
add
or
add
leave
daa
(bad)
movs
cld
push
test
mov
ret
jg
sar
sub
les
or
push
adc
push
push
sbb
(bad)
les
ret
(bad)
repnz
neg
test
xor
fimul
call
push
push
js
int3
xor
push
test
jecxz
jae
or
or
inc
sbb
mov
cmps
loop
pop
sbb
idiv
mov
pop
std
iret
mov
scas
ja
cld
cmp
sub
sub
bound
(bad)
pop
or
mov
mov
outs
mov
jle
and
rcl
mov
mov
ret
scas
retf
not
(bad)
fist
jb
xchg
out
xor
outs
cld
mov
ret
mov
cmp
shl
xor
sti
push
push
inc
xchg
cmc
fimul
jbe
mov
and
arpl
cmc
cmps
mov
dec
clc
lea
or
mov
enter
fs
test
sub
mov
loopne
aam
cwde
push
push
push
push
repnz
in
sub
and
jo
cmovge
(bad)
leave
test
mov
pop
rcr
sbb
aad
in
jmp
pushf
ror
jp
hlt
push
inc
jbe
js
rcl
fist
sbb
adc
xor
add
mov
push
sbb
aaa
loop
rcr
ja
js
mov
adc
fs
sub
and
cmp
(bad)
scas
xor
icebp
push
dec
repz
test
mov
xchg
and
fwait
in
sub
ins
pop
cmc
lods
and
popf
fsubr
lahf
aam
in
(bad)
dec
hlt
es
bound
sahf
xchg
sub
loopne
adc
pushf
int3
jne
xor
xor
and
fcomp
xor
cdq
enter
mov
cmp
loop
push
ds
aam
nop
add
sbb
xor
mov
(bad)
push
cmp
pop
loope
xchg
gs
js
push
in
stos
sub
sub
retf
push
fldenv
xor
bound
les
mov
xchg
mov
or
loope
mov
sbb
xor
clc
xchg
jnp
cmovno
test
add
ss
push
inc
das
or
dec
mov
mov
ret
mov
stos
aad
jmp
push
fst
cli
push
push
cmp
sbb
jl
retf
pop
nop
ja
rcl
rcr
push
xchg
mov
cld
arpl
xor
jb
shl
neg
jp
inc
add
push
ret
ret
mov
push
xchg
lea
sbb
call
jecxz
jmp
inc
inc
enter
dec
fs
push
sti
push
sub
inc
mov
cld
iret
inc
push
(bad)
fnsave
sbb
div
push
lahf
ss
mov
jns
ffreep
add
jg
push
es
inc
hlt
gs
jecxz
outs
xor
outs
fidivr
pushf
in
jnp
pop
inc
test
ss
cdq
push
push
std
or
cmps
sub
dec
push
std
push
xchg
mov
jo
sbb
and
test
xchg
iret
mov
loop
xor
clc
mov
and
ror
adc
inc
fs
or
jae
shl
jl
dec
jae
xlat
mov
in
aas
std
and
pop
aaa
sub
pop
jbe
xor
mov
jbe
xchg
call
in
and
ins
and
ret
jns
hlt
mul
mov
gs
add
ret
add
add
pop
or
sbb
(bad)
cdq
lods
repz
aam
mov
in
aas
neg
test
add
fisttp
add
mov
test
push
add
adc
aam
dec
or
cmps
jmp
das
dec
clc
adc
and
inc
jo
add
sbb
scas
xor
int
mov
retf
imul
add
das
js
nop
dec
mov
out
fcomp
lods
xchg
inc
sbb
mov
lds
lds
aas
call
aam
sar
fucomip
xlat
mov
dec
fstp
push
adc
push
js
cs
stos
push
sub
xchg
sbb
nop
and
enter
mov
icebp
add
pop
push
jle
aad
jge
cmp
adc
icebp
scas
dec
mov
jecxz
cmps
mov
push
scas
mov
ds
stc
sar
out
movs
xchg
and
(bad)
in
scas
stos
or
daa
pop
mov
dec
cmovne
mov
dec
jge
mov
sub
fs
(bad)
mov
and
xchg
add
jmp
jmp
adc
push
leave
sub
dec
push
inc
repz
pop
push
pop
cmp
outs
retf
pop
adc
imul
mov
push
push
(bad)
into
cli
inc
sub
pushf
fadd
ja
mov
xadd
aaa
push
arpl
jmp
sbb
cmps
loop
repnz
push
sahf
out
ja
ins
dec
cmp
cmp
xchg
sub
out
in
popa
push
lods
out
rol
add
imul
dec
outs
push
mov
paddw
adc
stos
test
push
adc
or
inc
ror
xor
cmc
mov
mov
test
cs
jne
test
mov
add
dec
dec
add
jno
mov
inc
sub
and
mov
hlt
adc
in
push
test
jecxz
pushf
jo
mov
inc
mov
inc
push
outs
add
sub
dec
sbb
test
add
addr16
sbb
retf
call
xchg
iret
xor
lods
mov
mov
mov
dec
xor
pop
fnsave
pusha
hlt
in
jg
xor
mov
stc
aaa
mov
or
jmp
xchg
sub
push
out
jmp
xor
test
jle
cmp
jmp
inc
fldcw
iret
push
not
fwait
sbb
dec
cmps
xchg
cmp
fidivr
sbb
arpl
in
jnp
pusha
(bad)
push
retf
push
fadd
ins
jbe
add
xor
repz
iret
test
mov
mov
sub
(bad)
std
hlt
(bad)
rol
sub
mov
mov
pushf
sub
jl
push
das
push
sbb
or
and
(bad)
pop
sar
dec
jecxz
jl
jecxz
lock
jns
inc
mov
push
nop
cmp
inc
lahf
es
cli
stos
mov
fcomp
mov
mov
icebp
or
adc
sbb
cmps
in
imul
in
push
mov
arpl
outs
adc
lea
ret
cmp
cli
dec
and
push
mov
lods
dec
xchg
push
push
cmp
lahf
lock
inc
adc
in
inc
mov
hlt
xchg
inc
xchg
in
pop
inc
mov
popf
jmp
push
fwait
out
pop
cmps
out
aaa
xchg
je
iret
std
jb
sti
outs
shl
and
and
sti
mov
xchg
pop
pop
cmp
bound
ds
sbb
shl
add
out
lea
iret
mov
bound
jo
inc
xchg
ror
add
mov
int3
out
pop
adc
lock
imul
in
mov
je
in
mov
sub
inc
jge
xor
and
and
pop
jb
mov
pop
xor
js
(bad)
pop
ror
add
in
cld
sbb
add
addr16
pop
pop
sbb
scas
cmc
stos
pop
inc
out
cdq
mov
push
dec
and
shl
xchg
cmps
jmp
push
mov
nop
xor
mov
mov
ss
in
fld
out
out
aad
xor
and
shl
push
adc
cmps
fisttp
pop
push
daa
arpl
stos
imul
fbstp
adc
popf
mov
daa
aam
(bad)
int
pop
sbb
push
mov
leave
gs
xchg
fsub
jns
cmp
neg
mov
dec
xchg
fmul
push
mov
out
jmp
mov
retf
cwde
pop
sbb
and
lock
(bad)
daa
lea
adc
adc
in
push
jmp
xor
xchg
sub
je
test
dec
pop
pop
mov
cmp
cmp
add
xchg
call
mov
mov
lods
aas
push
out
cmp
cmp
push
std
or
sub
inc
or
dec
inc
les
pop
xchg
jno
arpl
cdq
mov
jp
inc
sub
push
mov
sbb
stos
(bad)
repz
xor
cmp
addr16
dec
jns
mov
(bad)
cmp
out
jns
cmps
xor
popf
shl
into
(bad)
mov
pop
ja
xchg
cld
push
loop
sbb
sahf
mov
sub
mov
push
cmp
dec
or
ret
pop
mov
adc
in
and
push
mov
cmp
sar
test
add
aaa
mov
dec
mov
xchg
popa
add
cmp
xchg
xor
or
and
xor
sub
jns
std
or
xor
rcl
add
aam
(bad)
fstp
add
ins
mov
cmp
mov
in
mov
addr16
cdq
add
inc
or
mov
stc
mov
ret
cmp
out
pop
fist
dec
cmp
mov
and
aad
add
sbb
cs
(bad)
(bad)
sahf
and
inc
mov
enter
clc
repnz
dec
sub
rcl
mov
popf
outs
adc
sti
bound
pusha
dec
movs
pop
dec
scas
jg
mov
sbb
xchg
lods
enter
xchg
add
sub
inc
sti
shr
pop
pop
into
or
push
cmc
mov
pop
sbb
add
add
push
mov
stc
and
add
push
push
rcl
dec
xchg
cwde
cmova
and
mov
jae
xor
xchg
fnsave
fwait
cmp
ins
jnp
or
sub
cdq
leave
add
sahf
adc
imul
ss
fsub
(bad)
das
jg
sbb
or
push
xchg
mov
pop
aad
(bad)
fwait
xor
test
in
xchg
test
test
xchg
pusha
add
call
mov
dec
mov
xchg
or
lods
and
cli
outs
sahf
pop
pop
mov
add
push
add
xchg
add
xor
je
scas
xor
loop
lahf
ja
xor
adc
xchg
stos
mov
xor
xor
and
stc
cmp
xor
inc
mov
loop
xor
mov
loope
push
fdiv
xchg
out
push
adc
cmp
leave
out
xor
inc
push
int3
dec
daa
mov
cli
cmc
and
int
fcmovnbe
jne
(bad)
lods
test
loop
retf
stos
mov
xchg
pop
sbb
(bad)
cli
add
ret
cmc
sahf
test
mov
inc
dec
pusha
into
jbe
out
mov
sbb
mul
push
jo
add
fld
add
dec
pop
push
jge
sti
sub
icebp
call
sbb
cmp
xor
xchg
cmp
into
cmc
adc
fiadd
add
and
ret
adc
cwde
sbb
fs
push
cmp
xchg
aad
inc
sbb
inc
or
sbb
sbb
test
push
mov
and
stos
push
and
pop
mov
cmp
cmp
push
mov
and
and
xchg
mov
pop
daa
add
(bad)
jo
fld
repz
test
aaa
stos
out
shr
ja
jne
xor
cmps
push
outs
gs
and
jb
cmps
rcr
arpl
add
pop
sbb
push
(bad)
mov
inc
call
pop
dec
adc
inc
cmp
stos
fdivr
inc
xchg
aam
adc
add
fist
add
retf
sub
js
mov
cmp
mov
sub
cmps
adc
dec
sub
mov
or
and
repz
ja
int3
jne
mov
mov
scas
xor
or
push
adc
ret
mov
dec
jnp
sub
mov
mov
xchg
retf
mov
mov
mov
mov
adc
mov
mov
loope
pushf
jbe
hlt
sbb
sbb
adc
xchg
movs
inc
(bad)
xchg
inc
cmp
sub
iret
lds
sub
lods
(bad)
fldenv
xlat
icebp
and
jp
in
sub
fild
jno
jae
test
gs
lods
xchg
mov
push
dec
div
mov
mov
cmp
ficom
xor
jmp
cmp
cmps
xor
cmp
inc
gs
jmp
adc
ficom
hlt
and
mov
xor
jmp
jae
lods
jmp
out
jb
dec
repnz
push
sbb
enter
in
scas
mov
xor
dec
out
xchg
xchg
push
or
xlat
inc
sar
mov
std
and
(bad)
or
pop
fcmovnu
xchg
sbb
pop
neg
repz
dec
iret
mov
sub
cmp
in
dec
sbb
push
or
push
and
dec
and
int3
cld
inc
movs
jp
jge
adc
sub
std
lds
test
bound
or
push
je
jbe
jno
cli
neg
retf
and
mov
ins
or
xor
jge
int3
repnz
mov
mov
pop
int3
into
xor
or
mov
cmp
ja
test
mov
dec
(bad)
iret
xor
push
and
adc
jl
xchg
call
out
dec
jo
jmp
gs
mov
cmc
push
in
cmp
fcmovb
jae
push
es
add
mov
mov
ins
inc
stos
cmc
lds
popa
mov
sub
dec
pop
jl
jmp
popf
xor
mov
in
push
mov
aas
or
jg
mov
pop
ins
lods
sbb
mov
sub
inc
mov
jns
loope
xor
jg
push
or
add
jo
inc
div
mov
jg
xchg
adc
data16
cmp
inc
inc
xchg
jns
xor
gs
(bad)
and
(bad)
xor
or
aad
jnp
lds
cdq
dec
sub
xchg
push
mov
xor
mov
jmp
(bad)
cwde
adc
fdivr
add
jmp
retf
mov
sub
fcmovb
int
stos
mov
popa
sub
lods
push
jp
sbb
and
movs
mov
movs
push
cdq
popa
push
leave
xorps
mov
or
pop
xor
mov
out
jae
mov
adc
cmc
xchg
scas
inc
jnp
fisubr
inc
or
jno
mov
inc
or
test
or
push
outs
or
dec
inc
xchg
or
fwait
mov
cmps
jg
aas
popa
add
jnp
shl
cld
xor
mov
push
and
fcomp
pushf
loop
loope
pop
mov
loopne
jno
jl
lds
cmp
ret
mov
or
jae
cld
fwait
adc
jmp
push
in
sar
test
jns
jb
mov
sub
push
arpl
stc
hlt
jo
sub
scas
movs
add
std
dec
cmp
retw
aam
shr
mov
or
stos
pop
cld
xchg
fcomp
inc
push
sub
sub
add
inc
xchg
jne
mov
fldenv
xor
pushf
pusha
cwde
push
sbb
inc
std
and
es
cwd
mov
and
(bad)
scas
mov
ja
push
movs
popf
sbb
retf
(bad)
fistp
shl
mov
dec
mov
or
hlt
push
and
test
sub
ret
(bad)
loope
imul
xor
xchg
pushf
popf
or
retf
pusha
loopne
(bad)
pop
ror
mov
icebp
and
scas
loope
cmps
add
jp
(bad)
scas
xor
dec
in
or
xor
cmc
cmp
xchg
(bad)
push
mov
imul
loop
push
xor
addr16
push
cmps
out
xchg
adc
outs
xchg
push
cdq
sbb
mov
ja
mov
inc
inc
out
lods
inc
and
add
dec
pop
rcl
dec
xor
dec
sti
cmp
adc
fild
popf
aas
cmc
movs
dec
sub
dec
xor
add
inc
xchg
inc
or
aas
add
out
pop
mov
push
mov
pushf
addr16
lods
retf
loope
sub
sbb
stc
fwait
repnz
sub
loopne
shr
adc
or
mov
dec
dec
xchg
xchg
gs
loop
sub
push
mov
stos
call
pop
and
je
hlt
xchg
repz
mov
mov
and
sbb
sbb
out
mov
mov
mov
dec
push
xor
lods
mov
pop
add
xchg
sbb
popf
or
imul
out
ss
mov
(bad)
imul
arpl
out
or
jo
test
mov
dec
xchg
sub
retf
dec
aam
inc
cmp
mov
inc
xor
jne
mov
adc
fdiv
jecxz
cwde
mov
ins
(bad)
or
retf
fsubr
out
mov
jae
and
mov
lds
aam
rol
ret
sbb
dec
push
adc
out
jge
push
ret
mov
dec
xchg
cmp
and
cmc
cmp
ret
xchg
int
or
xor
sbb
or
inc
shr
lahf
outs
mov
sub
mov
pop
add
and
mov
adc
push
out
fs
shl
ds
push
xchg
in
stos
push
popf
and
jns
mov
inc
dec
push
jb
psrad
adc
(bad)
mov
fdiv
in
mov
mov
sub
cmp
inc
test
push
div
pop
jp
xchg
add
jb
lds
jmp
shl
xchg
dec
pop
repnz
test
lea
or
call
mov
push
mov
js
add
imul
dec
(bad)
cld
push
shr
fcomp
shr
stos
rol
shr
mov
mov
ffree
mov
sub
adc
mov
pusha
mov
das
dec
mov
scas
jmp
xlat
sti
in
out
add
and
(bad)
push
mov
mov
cld
jbe
aaa
mov
xor
dec
lea
(bad)
fist
xor
fldenv
inc
es
dec
call
bound
jbe
stos
addr16
(bad)
ret
add
jb
jl
daa
push
and
retf
fidivr
out
sbb
sbb
or
shl
(bad)
in
dec
out
aam
cmp
int
sbb
ins
xor
adc
sbb
and
(bad)
sub
rcl
popa
clc
sbb
lods
ins
ds
outs
dec
aad
or
sub
push
mov
in
xchg
inc
mov
cmp
inc
shl
std
enter
ret
push
inc
ret
add
fistp
xchg
movs
pop
mov
push
sti
scas
mov
cmp
and
int
sbb
ss
int3
pusha
bound
mov
xchg
jbe
(bad)
outs
in
sub
fnstenv
int3
mov
add
es
lea
xchg
fdivr
sub
nop
popf
loope
push
pop
adc
xor
(bad)
out
int3
xchg
adc
push
mov
ds
hlt
xchg
jnp
or
repz
in
mov
mov
loop
mov
lahf
ins
outs
ficomp
inc
adc
je
inc
ret
(bad)
mov
not
pop
lock
sub
adc
or
add
cli
ret
pop
inc
mov
int
mov
repz
sbb
jnp
dec
inc
fucomip
add
(bad)
lds
jecxz
xor
fmul
sbb
fs
push
add
loopne
push
cmps
add
es
pop
mul
xchg
or
or
out
mov
or
sub
imul
sbb
sub
movs
aad
mov
out
xchg
add
mov
(bad)
sar
fwait
sti
cli
sub
test
popf
sahf
xor
das
rcr
arpl
push
mov
dec
movs
pop
cli
aaa
hlt
push
popa
sbb
aas
ja
pop
fucomip
mov
push
mov
pop
or
int3
mov
out
push
enter
rcl
pushf
(bad)
stc
and
push
rcr
inc
pop
ja
(bad)
(bad)
xlat
sbb
call
mov
cs
and
mov
sub
cdq
ins
imul
mov
adc
xor
fcmove
dec
cmp
in
out
mov
out
dec
data16
fcmovnb
sbb
add
cmps
fdivr
mov
or
mov
and
add
(bad)
adc
adc
std
push
jb
jmp
cmp
pop
sub
dec
shl
imul
jno
mov
and
shl
stc
mov
repz
(bad)
adc
loope
cmps
or
cmp
xchg
or
outs
loopne
hlt
ins
arpl
xchg
dec
mov
mov
jo
imul
icebp
popa
or
test
cdq
add
mov
dec
mov
pop
mov
dec
pop
mov
stos
and
mov
and
xor
inc
inc
fisubr
iret
jle
ss
mov
in
mov
push
scas
or
aaa
into
aam
loopne
xchg
in
aas
stc
dec
sub
bound
ds
call
sbb
mov
out
add
in
push
lods
jmp
cdq
mov
pop
aas
pop
cwde
adc
jo
fld1
in
jno
repz
movs
and
mov
fisubr
inc
or
pushf
aam
xor
mov
mov
pop
push
fldcw
add
pop
mov
pop
mov
dec
fistp
cmp
jge
inc
xor
push
outs
mov
popa
lods
mov
out
mov
addr16
jno
int3
push
fiadd
fadd
stc
inc
imul
test
inc
add
pop
xchg
das
stc
rcl
xor
scas
adc
xchg
shr
hlt
ret
nop
loopne
leave
and
cld
mov
push
dec
in
mov
xor
aam
and
add
push
fdivr
mov
rol
std
hlt
retf
clc
add
test
xor
push
adc
sar
outs
and
xchg
or
pop
stos
mov
jl
rcr
xchg
jp
jecxz
lahf
sbb
rol
and
cmps
ja
xchg
inc
movs
call
pop
sti
or
sti
mov
mov
test
jmp
(bad)
in
push
(bad)
pop
or
stc
mov
test
adc
fiadd
xchg
nop
and
es
or
sti
mov
sub
lods
or
xchg
inc
ret
xchg
je
movs
or
jl
pop
lock
xchg
les
popa
bound
xchg
jp
enter
cmc
les
je
dec
cmp
pop
mov
sub
pop
mov
test
sub
out
xor
es
out
ficomp
inc
cli
outs
cmps
(bad)
pop
xor
add
retf
cwde
call
jg
fisubr
out
aaa
adc
jle
and
mov
ins
jmp
movs
enter
lahf
ret
aam
mov
int
std
sbb
clc
int
mov
out
xlat
mov
mov
jp
sub
jle
enter
lods
fwait
int
ins
ins
cmps
pop
pop
addr16
ins
jle
and
cmp
push
mov
movs
sub
sub
sbb
dec
popf
push
inc
push
adc
sti
je
mov
inc
out
jmp
add
push
dec
data16
dec
cmp
inc
push
sar
aaa
jmp
outs
or
sbb
xchg
add
push
add
mov
pop
inc
add
das
xor
and
fisubr
inc
add
js
xor
fisttp
mov
mov
outs
adc
popf
dec
push
push
inc
xor
rcr
loop
cmp
jns
js
test
shl
rol
push
test
xor
fisttp
jo
fist
adc
stos
aam
mov
and
mov
out
jecxz
pop
or
and
mov
test
movs
pop
cmps
pop
loope
sti
outs
jecxz
movs
add
pop
sar
xor
cmc
inc
mov
in
sub
ret
xor
and
add
js
shl
mov
add
xchg
inc
jne
sbb
xchg
add
arpl
push
icebp
inc
pop
push
or
ror
repz
into
lods
ss
push
and
cmps
call
(bad)
dec
lahf
mov
mov
mov
xchg
push
jecxz
or
mov
jge
sti
cmps
jbe
arpl
xchg
gs
iret
cmp
and
test
push
jb
push
arpl
cli
adc
imul
push
bound
into
loop
fs
sar
mov
dec
data16
popa
paddb
fistp
mov
jge
icebp
mov
std
fwait
pop
popa
repnz
or
stc
adc
ret
inc
mov
add
retf
loopne
sbb
inc
retf
scas
test
jmp
and
xchg
cmps
mov
fisubr
nop
mov
sbb
lods
cdq
out
pop
sub
cmp
(bad)
xor
or
add
mov
lock
jns
mov
aam
mov
mov
jg
data16
out
fdivr
rol
ins
mov
(bad)
cwde
inc
leave
popf
fistp
out
xchg
add
rcr
sub
(bad)
aad
jl
xchg
clc
lds
rcr
es
push
test
and
das
ret
jle
leave
mov
cmp
(bad)
adc
xor
popf
xor
test
add
mov
inc
imul
retf
pop
push
cdq
mov
ds
dec
push
(bad)
pop
sar
and
je
push
jp
sub
and
lods
aad
out
fdiv
loopne
pop
int3
dec
push
in
scas
ret
mov
ficomp
cmp
outs
jbe
mov
call
mov
(bad)
in
punpckldq
jo
adc
fbld
in
mov
sub
jp
repz
fwait
inc
pop
push
cmp
adc
scas
es
inc
imul
push
sbb
xor
xchg
and
dec
lds
daa
outs
inc
repnz
xchg
fistp
test
ret
aaa
dec
jne
leave
inc
cwde
jmp
sbb
pop
sar
mov
inc
ret
not
or
jecxz
mov
pop
int
mov
adc
sti
(bad)
stc
mov
scas
push
push
cmp
inc
aam
in
or
out
jge
add
cwde
sahf
dec
pop
push
enter
pushf
xor
sti
dec
das
loopne
adc
xor
not
push
dec
popa
hlt
or
scas
dec
ja
fwait
sub
mov
leave
jl
or
mov
outs
icebp
adc
inc
xchg
ret
mov
cmps
sbb
xor
loopne
xchg
cmp
popf
data16
imul
jns
dec
mov
push
pop
mov
and
sbb
or
add
cmp
(bad)
xor
stc
add
push
sbb
js
ja
mov
jg
icebp
fwait
or
pop
cmp
fwait
inc
pop
and
scas
jne
adc
(bad)
sbb
sbb
jp
repz
dec
adc
test
xor
pop
loopne
and
and
adc
mov
fcom
xchg
data16
inc
add
mov
ficomp
xchg
mov
popa
mov
loop
mov
adc
xchg
shl
jg
int
call
or
pop
sub
ret
mov
xchg
jbe
lods
inc
int
xchg
hlt
shl
sub
pushf
iret
retf
imul
pop
cmp
movs
push
mov
xchg
call
sub
cmc
lods
ss
mov
loopne
cmp
push
xchg
sets
push
(bad)
retf
mov
in
push
and
movs
test
pop
xor
out
mov
mov
lds
test
ds
out
int3
leave
and
jnp
mov
ja
stos
push
mov
cmp
dec
cmps
push
mov
mov
mov
ror
cmp
mov
repz
mov
ret
mov
jne
in
test
sbb
(bad)
mov
int3
je
inc
(bad)
into
xlat
popa
(bad)
sub
(bad)
int
inc
cmp
rcr
pop
jb
lods
sbb
ins
je
(bad)
nop
or
ror
test
mov
xor
imul
fsubr
pause
push
popa
ins
push
(bad)
repz
imul
xor
out
xchg
movs
cmp
out
mul
add
sbb
in
iret
adc
jbe
retf
call
rdmsr
mov
fcmovnb
cmp
xor
(bad)
test
add
int
scas
call
ss
(bad)
(bad)
sub
mov
adc
xor
fdivr
dec
les
adc
adc
std
into
loopne
xchg
rcl
in
lea
xor
into
dec
ins
leave
jbe
test
xor
sar
lds
out
mov
xchg
div
xchg
sub
in
add
test
imul
mov
shl
jae
and
das
cmps
(bad)
popf
inc
out
sub
adc
cli
add
cwde
push
test
das
ror
mov
cmp
push
sbb
add
div
adc
(bad)
sub
rcl
jno
mov
cmc
les
mov
outs
push
add
mov
rol
leave
or
rcl
push
mov
pushf
ret
add
add
inc
dec
arpl
stos
in
iret
push
ror
ds
jne
dec
nop
movs
test
fs
out
iret
(bad)
xchg
(bad)
cmp
xor
loope
icebp
push
js
push
out
sar
outs
or
sub
mov
xor
repz
inc
inc
mov
mov
mov
jno
or
push
push
pop
cmp
inc
mov
cmps
dec
cmc
xchg
push
dec
mov
outs
das
in
xchg
loopne
sub
dec
(bad)
(bad)
mov
retf
cmp
mov
inc
pusha
scas
test
lea
xor
dec
fistp
sbb
scas
cld
sahf
mov
lods
adc
in
and
mov
cli
mov
enter
pushf
and
retf
(bad)
mov
mov
cdq
fs
xor
pop
mov
movs
or
mov
popf
add
(bad)
pop
pop
iret
repz
jge
add
cli
mov
cwde
push
or
fistp
fld
test
arpl
stos
xchg
adc
fdiv
xchg
push
jbe
jp
and
addr16
das
push
pop
fstp
and
je
in
sbb
sbb
and
fidivr
pop
mov
mov
(bad)
adc
jno
adc
mov
pop
arpl
out
jl
jle
xor
mov
sbb
sbb
sub
stc
mov
fnsave
fidivr
or
loope
ins
sbb
js
stos
push
add
inc
loope
inc
jns
fmul
test
xchg
xchg
sbb
mov
xchg
sub
jbe
div
cld
lods
push
cmp
push
cwde
loope
movs
stos
cmps
jg
iret
mov
and
push
cmps
not
pop
cmp
inc
sub
in
fdivr
cmp
sbb
xchg
lods
jp
scas
jp
fidiv
jmp
xor
add
jp
cmp
mov
mov
icebp
sti
xor
and
push
xchg
adc
add
jge
stos
lahf
mov
mov
inc
xor
fidiv
rol
sbb
sti
dec
sub
repnz
stos
cmps
jecxz
ja
jo
jo
clc
adc
push
sbb
fcom
cdq
push
xlat
fcomp
stos
fs
cmp
neg
inc
sar
and
pop
jge
dec
adc
daa
sbb
call
in
inc
mov
loop
sub
ret
inc
cld
push
jmp
pop
pop
and
call
in
jno
or
xchg
loopne
inc
lods
rcr
lahf
int3
mov
fwait
add
std
push
into
adc
and
xlat
loopne
jno
cmc
sahf
mov
cmp
pop
bound
in
push
mov
mov
jbe
stos
fld
pushf
sbb
(bad)
aaa
leave
xchg
jl
inc
inc
xchg
mov
jb
rcl
aad
repz
xor
stos
adc
(bad)
gs
loopne
mov
inc
sahf
ret
xchg
cli
pop
pop
dec
cli
add
sbb
xor
pop
bound
or
cdq
icebp
arpl
mov
imul
rol
push
xor
cdq
out
nop
cli
dec
(bad)
dec
mov
jecxz
cmps
aas
pop
adc
inc
push
inc
fistp
jmp
inc
scas
mov
mov
imul
out
mov
mov
bound
adc
aaa
cmp
push
cmc
retf
mov
sbb
movs
mov
rcl
xchg
push
jnp
inc
pop
mov
loope
or
frstor
jg
or
movzx
imul
mov
dec
xor
sbb
leave
or
vpmacsdqh
mov
pop
ss
pushf
mov
inc
or
xchg
enter
cmp
jg
mov
mov
les
inc
push
rol
inc
scas
cmp
pop
outs
repz
jmp
adc
dec
jecxz
and
jmp
cbw
and
stos
add
ror
push
fld
add
dec
cwde
xchg
mov
add
nop
and
and
sub
jmp
lahf
cmp
outs
mov
or
jne
cmp
and
repnz
xor
cld
mov
pop
stos
fnstenv
stos
ja
dec
test
push
add
fild
imul
dec
jecxz
(bad)
pop
mov
inc
cmps
mov
loope
test
fdiv
inc
mov
aaa
mov
add
xchg
sub
sti
sar
dec
pop
xchg
and
cmps
iret
bnd
mov
xchg
xor
in
pop
xchg
pop
add
add
ja
mov
add
push
pusha
enter
in
test
sbb
cli
movs
mov
into
enter
test
out
pop
pop
stc
stc
xchg
aad
mov
inc
prefetch
inc
inc
sub
ins
sub
gs
imul
and
mov
pop
sbb
shl
jnp
scas
adc
pushf
mov
push
pop
mov
dec
add
and
mov
lods
outs
pushf
jge
mov
icebp
or
loope
pushf
sub
call
push
aaa
cmp
pop
ret
lock
iret
xor
add
ret
adc
xor
xchg
xchg
dec
mov
retf
pop
or
or
fldcw
mov
loopne
stc
adc
jo
outs
dec
pop
cmp
mov
dec
cmps
ja
mov
xchg
stos
push
shl
sub
sbb
adc
sbb
push
dec
lea
adc
out
cmp
test
add
jo
in
enter
and
daa
and
pop
pop
mov
inc
sti
xor
(bad)
test
test
mov
daa
in
icebp
in
jg
fcomp
mov
int
shr
jecxz
push
je
adc
outs
xor
sbb
dec
addr16
inc
push
fbld
xor
mov
neg
xor
(bad)
popa
mov
lods
and
int3
sti
fmul
rcr
stc
aam
pop
retf
cmp
mov
outs
ror
adc
push
test
mov
jecxz
fs
add
daa
jae
cld
cdq
mov
mov
not
add
gs
pop
repnz
mov
inc
std
cld
fidiv
dec
mov
push
fistp
js
pop
pop
mov
or
fisub
aad
cmp
add
pop
out
cld
push
ja
adc
xchg
cmp
out
ins
retf
inc
hlt
cmp
cmp
push
outs
pushf
ror
pop
jge
gs
cmp
mov
cmp
xchg
retf
inc
mov
aaa
mov
fmul
pop
push
mov
or
adc
test
nop
shl
aam
cmps
inc
in
dec
or
sbb
(bad)
js
aas
push
ffree
stos
push
not
scas
add
movs
sbb
push
fdiv
push
stos
jmp
and
(bad)
call
inc
sti
dec
test
adc
add
imul
sbb
xchg
cmc
jge
sub
jle
lahf
jns
pop
inc
xchg
and
scas
pop
(bad)
imul
add
std
es
(bad)
rcl
scas
push
imul
sbb
push
es
adc
xchg
pop
sbb
mov
dec
add
sar
adc
lods
jne
push
test
push
pop
rcr
push
aaa
imul
das
movs
push
stos
inc
cmps
and
and
aaa
fiadd
in
je
add
ja
cli
cs
scas
addr16
cmp
cwde
xor
jp
and
jle
cmp
pop
data16
push
xchg
loop
or
or
mov
push
push
inc
fsub
mov
outs
jmp
pop
enter
rcr
push
xchg
ds
pop
(bad)
frstor
out
iret
xor
sti
inc
lock
out
mov
inc
repnz
fisttp
out
sbb
or
jp
pop
cmps
iret
sbb
mov
lock
mov
mov
imul
retf
int3
inc
pop
jo
mov
sar
enter
and
sub
jo
imul
icebp
add
stos
and
or
cmp
jge
into
xor
push
cs
sbb
sub
push
call
enter
hlt
loope
int
mov
mov
add
add
jne
hlt
jmp
lahf
jnp
call
outs
xor
es
dec
dec
dec
and
cmc
(bad)
fimul
ret
cmp
dec
inc
fwait
sub
add
mov
jno
mov
xchg
shr
pop
cmp
ret
movs
push
scas
imul
call
out
cmp
cld
scas
pushf
sub
jne
lahf
popf
xchg
jns
jle
popf
inc
push
xchg
dec
(bad)
sbb
xor
into
lods
and
and
lea
jle
loopne
mov
out
fs
stos
mov
and
aas
cmp
lds
stos
mov
xchg
push
out
add
sbb
jg
inc
(bad)
jns
or
adc
js
hlt
xor
ds
test
mov
ins
sub
outs
imul
nop
xchg
sub
fimul
lock
adc
mov
retf
stos
sbb
cdq
movs
push
mov
sub
clc
stc
cld
(bad)
inc
jbe
xchg
in
jns
ja
repz
lods
pop
pop
and
jne
sbb
mov
push
and
cmps
and
pop
xchg
sbb
dec
pushf
mov
je
sahf
mov
jmp
jnp
and
pop
cwde
mov
sub
out
pop
in
in
jbe
cmovns
fnstenv
gs
(bad)
lea
fsubrp
push
sti
xchg
xchg
les
out
jne
pop
dec
mov
ficom
or
lods
adc
and
sub
int
mov
lahf
mov
lock
int
in
repz
es
stos
outs
and
mov
xor
pop
in
out
dec
ret
mov
std
sub
push
push
inc
jp
icebp
pop
jmp
inc
sub
cmp
fdiv
push
aaa
dec
push
mov
pop
mov
jecxz
bound
in
mov
shr
sti
or
cmc
ret
xchg
xor
shr
mov
inc
gs
pop
sahf
jo
add
icebp
(bad)
stc
lahf
xchg
push
bound
leave
cmp
pop
add
ins
out
call
pushf
std
jmp
pop
inc
xchg
mov
push
adc
clc
or
add
(bad)
xchg
cmp
cwde
hlt
jo
xor
aad
clc
fnstsw
or
int
xchg
push
rcl
icebp
or
xchg
pop
and
or
add
and
loop
in
mov
and
pop
(bad)
shr
cmp
pop
es
push
jmp
jne
pop
int
xchg
sahf
stc
ss
and
retf
add
imul
pop
xchg
jle
or
movs
xchg
xchg
dec
and
xchg
nop
or
jg
repz
sub
push
mov
icebp
and
ss
stos
jae
jge
xor
(bad)
xchg
jle
inc
cmp
xchg
xor
jae
out
mov
push
imul
sub
ret
pop
jmp
and
mov
mov
inc
pop
adc
xchg
mov
xchg
bound
mov
sbb
cmp
fisubr
mov
and
mov
outs
jecxz
add
in
punpcklwd
out
cwde
pop
(bad)
cdq
lods
xor
xchg
xor
pop
cmp
pop
(bad)
pop
inc
mov
dec
mov
adc
(bad)
cdq
xor
js
xchg
outs
out
sti
inc
stos
jl
ds
test
push
push
fwait
mov
sub
clc
das
jmp
xchg
scas
sub
out
dec
stc
lods
out
jnp
outs
push
mov
xor
(bad)
cmp
jle
cdq
jae
xchg
sbb
in
mov
and
jne
(bad)
jnp
mov
xor
out
inc
cli
add
pusha
inc
in
push
cmps
ins
(bad)
xchg
daa
mov
pop
cmp
movs
mov
(bad)
mov
jmp
jne
stc
mov
xor
xor
andnps
xchg
cdq
jmp
es
xor
cwde
faddp
out
test
retf
jne
sbb
push
imul
out
xchg
addr16
xchg
sub
stos
popa
mov
jbe
out
js
test
xor
(bad)
fnsave
mov
in
repnz
dec
ds
scas
dec
xchg
(bad)
push
ret
sub
and
push
les
sub
pushf
test
out
sub
je
xchg
out
push
aam
push
sub
arpl
inc
mov
stos
test
inc
jg
xchg
pop
out
idiv
ret
and
stos
sub
or
into
cmp
stos
mov
xor
adc
mov
mov
push
pop
popf
loope
std
fcomp
pop
mov
ds
ss
cmc
leave
jl
rol
push
popa
inc
fsub
xor
shl
dec
sub
mov
pop
js
add
mov
mov
hlt
das
sub
lods
or
jnp
xor
cld
not
xor
sub
shr
dec
imul
mov
adc
cmp
xor
mov
in
pop
add
rcl
not
xchg
gs
inc
jne
lods
mov
out
out
mov
inc
nop
sar
leave
add
mov
or
pop
dec
mov
mov
and
loope
lahf
test
ficomp
test
cmc
in
adc
cmps
out
sbb
xchg
inc
shr
xor
pushf
movs
in
(bad)
or
inc
in
add
das
push
(bad)
outs
jecxz
adc
pop
and
mov
repz
scas
xchg
fwait
cwde
ins
jns
pop
jecxz
jl
lds
or
inc
mov
cmp
mov
jmp
(bad)
scas
adc
sub
mov
jmp
leave
dec
jge
push
pop
sbb
gs
xchg
out
sub
inc
cmp
mov
call
les
add
dec
ja
mov
sub
ss
pop
cmps
and
mov
mov
xor
imul
mov
cs
pop
lods
int3
test
movs
clc
mov
rcr
cmp
jge
test
dec
retf
js
lea
enter
adc
cdq
xor
cmps
addr16
cdq
ja
stos
aaa
or
shl
jbe
aaa
sbb
inc
push
pop
ret
push
std
inc
and
pop
mov
cmp
ins
(bad)
(bad)
in
and
add
ja
xor
idiv
push
sti
or
sti
mov
sub
lods
pop
jb
out
mov
rcl
(bad)
mov
mov
sub
pop
and
push
lods
mov
add
lahf
xor
adc
cmp
scas
push
fnsave
cmp
pusha
(bad)
ins
or
out
pop
xchg
mov
lods
adc
pop
sub
int3
(bad)
adc
mov
mov
mov
std
pop
jle
jecxz
aam
mov
dec
pop
repnz
cmp
xor
xchg
jns
mov
es
inc
int3
fs
in
inc
jg
sahf
test
dec
xor
fsub
xor
adc
pop
sbb
add
mov
mov
test
lods
cmp
sub
cli
cmp
push
add
cmp
dec
adc
iret
jle
or
imul
mov
sbb
(bad)
repnz
movs
push
or
and
cmp
cmp
or
dec
mov
pop
mov
adc
push
es
cli
in
or
inc
push
aad
aaa
xor
imul
and
aas
movs
dec
(bad)
pusha
pop
add
test
ret
mov
test
sub
push
(bad)
loope
or
and
lods
sar
push
loop
gs
cmp
sbb
adc
push
mov
xor
gs
mov
(bad)
clc
movs
retf
jns
cmp
or
test
ror
stc
xor
movs
arpl
jae
fst
push
out
adc
cmp
jae
mov
ret
or
cmp
mov
fldln2
nop
sbb
clc
mov
mov
sub
into
xchg
inc
popa
je
dec
inc
lea
xchg
mov
pop
inc
std
pop
das
iret
pop
ret
pop
pop
(bad)
fisubr
sti
cmp
movs
mov
pop
cmp
jl
loope
iret
cmps
loop
retf
adc
dec
inc
pop
jecxz
fist
out
push
call
test
gs
push
mov
mov
nop
(bad)
imul
ins
cli
lea
mov
adc
aam
and
pushf
and
xchg
mov
or
sub
daa
call
push
out
out
xchg
mov
mov
fdiv
into
dec
je
mov
cmp
popf
arpl
fbstp
add
jge
xchg
push
mov
xchg
out
out
jb
cmps
fchs
xchg
dec
mov
jbe
fwait
adc
push
push
call
test
idiv
xchg
retf
mov
cmps
fisttp
sub
sbb
jb
lahf
rcl
lahf
sbb
inc
push
inc
and
xchg
scas
push
inc
mov
xchg
dec
xor
(bad)
sub
xchg
mov
test
pop
xchg
les
retfw
xchg
lea
dec
stc
sub
imul
adc
cmp
mov
jg
lea
nop
jg
dec
and
cmp
rcr
mov
fs
in
inc
cwde
(bad)
pop
sub
ja
aad
arpl
push
push
inc
sbb
imul
test
xor
sbb
pop
push
iret
sub
pop
sbb
xchg
fdivr
cmp
xchg
dec
sub
(bad)
(bad)
out
adc
sbb
ss
fdivr
clc
dec
inc
outs
adc
inc
adc
adc
xchg
inc
sbb
push
lahf
fldenv
dec
div
test
ins
dec
push
retf
pop
dec
push
cli
lds
popf
inc
or
jle
aas
sub
mov
adc
retf
cmp
(bad)
lods
cs
jns
in
and
pop
je
sbb
call
add
shl
leave
dec
cdq
aas
mov
add
inc
(bad)
fimul
xchg
push
pop
sbb
sbb
imul
mov
xchg
retf
lock
inc
inc
jmp
inc
push
pop
jecxz
gs
jbe
push
(bad)
xchg
add
dec
lahf
inc
xchg
push
push
hlt
ficomp
cmc
adc
sbb
pop
mov
jne
cmp
std
fsub
repnz
scas
addr16
lods
and
ss
xchg
mov
mov
iret
jnp
les
inc
movs
int
push
adc
and
pop
xchg
dec
ss
lods
bswap
sar
neg
aad
jae
sbb
movs
(bad)
(bad)
ins
fucom
std
lock
ds
out
pop
inc
sub
xchg
lock
mov
xor
adc
cmps
dec
faddp
inc
jecxz
lahf
push
cs
arpl
scas
iret
add
daa
cli
mov
dec
adc
cmps
push
dec
das
out
mov
push
sbb
cmp
out
shl
icebp
mov
and
in
jb
lds
cmps
cmp
lods
pushf
xchg
stc
hlt
inc
test
in
add
sbb
les
xchg
or
repz
mov
cmp
push
inc
jle
mov
data16
mov
push
push
mov
cmp
add
push
inc
fcom
jmp
ss
lods
xor
aam
push
mov
add
mov
dec
test
jle
xor
inc
repnz
adc
xchg
test
adc
mov
mov
xor
jmp
adc
sti
sub
mov
pop
icebp
nop
sbb
ins
pop
imul
adc
aaa
inc
dec
hlt
mov
popa
lahf
mov
inc
imul
lods
cli
sbb
sub
rcr
sbb
pop
loopne
jl
cdq
and
add
dec
push
popa
pop
cmps
retf
pop
mov
xor
out
pop
(bad)
xchg
push
ret
retf
scas
add
daa
and
fs
es
nop
fcomip
dec
jmp
stos
in
loope
push
(bad)
out
cmp
pop
jmp
dec
in
ins
inc
push
push
into
adc
lock
adc
jle
jae
jns
sbb
mov
aaa
sub
add
pop
mov
cmp
jle
sbb
adc
shr
dec
outs
mov
sbb
pop
retf
mov
test
adc
fnstsw
jo
(bad)
movs
xchg
adc
(bad)
lods
push
jne
xlat
sar
and
aas
pushf
push
in
mov
jl
dec
adc
or
popf
mov
xlat
test
dec
jmp
jne
rcr
in
jno
movs
loopne
add
pop
adc
enter
add
pop
push
mov
ja
stos
push
jl
arpl
jecxz
push
das
sbb
sbb
ror
cli
inc
and
outs
cdq
stc
repz
jae
cwde
aaa
clc
add
scas
pusha
lahf
xor
or
push
jb
add
movs
mov
push
cmp
inc
xlat
pop
mov
(bad)
or
xchg
push
ret
inc
mov
push
loop
sub
mov
scas
push
or
in
xchg
outs
je
cmp
inc
add
imul
adc
lock
mov
repnz
or
or
sbb
out
or
loope
icebp
or
outs
fwait
ror
lods
retf
cmp
mov
pop
in
lea
jae
push
inc
movs
xchg
sti
dec
adc
push
cs
cmps
pop
(bad)
dec
inc
and
stos
(bad)
push
xchg
push
ss
cdq
sahf
frstor
cmp
call
mov
dec
in
dec
sub
dec
iret
sbb
les
mov
into
jp
mov
jl
cmps
and
or
dec
cmp
arpl
aad
ins
fldcw
cli
sbb
movs
ins
lock
jae
or
sub
push
xchg
jl
jl
add
adc
pushf
aaa
pop
(bad)
cmps
sub
push
fstp
aas
ret
add
out
adc
mov
data16
push
jbe
(bad)
inc
adc
cmp
xor
fsub
popa
or
scas
and
mov
pop
enter
mov
jb
lahf
cmp
out
fst
test
cmp
mov
xchg
in
scas
jno
sti
out
xor
mov
mov
mov
push
sbb
test
push
jg
not
xor
cmp
push
mov
add
test
xor
inc
out
dec
sbb
je
mov
mov
lods
test
lock
or
xchg
push
push
xor
mov
push
push
(bad)
and
js
lds
out
lds
mov
inc
pop
mov
arpl
push
fisttp
jb
and
sub
add
test
popa
cmp
or
dec
dec
mov
add
sub
add
mov
jne
xor
pmulhw
lea
or
call
imul
sti
mov
ret
fisttp
aad
mov
fldcw
data16
and
jbe
jo
lock
pop
aas
dec
arpl
out
je
ss
sub
push
mov
scas
movs
sbb
test
sub
inc
int
mov
gs
mov
mov
fisub
add
into
retf
dec
jge
and
aas
retf
aad
mov
shl
xchg
cmovl
xor
lea
out
mov
leave
xchg
jge
sbb
fcmovbe
mov
and
or
push
ja
cwde
pop
test
push
pop
int3
or
cmps
xchg
dec
fcomp
jb
daa
jmp
call
jge
adc
fs
fistp
stc
mov
and
or
jo
ret
sbb
sbb
pop
sub
pop
stos
add
sbb
jl
pop
push
rcl
dec
add
dec
ror
pop
addr16
add
push
mov
sub
adc
stos
aad
popf
mov
inc
enter
lock
and
and
mov
ins
dec
inc
mov
cmc
cmps
retf
pop
scas
mov
cmp
stos
pushf
in
call
jp
scas
push
pop
inc
cmps
in
push
loop
adc
push
neg
cdq
mov
rol
jo
fstp
cmp
cmps
pop
fidivr
cmc
retf
push
(bad)
push
cmp
dec
add
pop
lds
adc
fnstsw
dec
xlat
out
fwait
xor
xor
fcmovnu
dec
xchg
ror
mov
enter
xor
sbb
push
jno
mov
nop
jecxz
aaa
sub
ins
mov
fwait
pop
sahf
in
aam
aas
push
and
out
and
adc
int
jl
fst
pop
xchg
xor
cmp
inc
dec
push
pop
or
inc
mov
ret
repnz
mov
jg
sub
rol
lahf
mov
inc
jg
in
gs
aas
or
(bad)
sub
hlt
sub
mov
add
in
cmp
mov
popf
xchg
daa
pop
dec
test
retf
sub
mov
retf
(bad)
mov
jp
imul
mov
aaa
mov
lods
rol
in
mov
ja
(bad)
repnz
int3
mov
mov
cmp
sbb
aam
data16
adc
ins
mov
xchg
or
ss
cli
push
retf
mov
repnz
mov
mov
inc
push
jmp
outs
(bad)
adc
inc
xlat
and
imul
pop
cmp
cmp
rdtsc
push
xchg
sbb
xor
int
dec
aas
scas
dec
cmp
mov
sbb
xchg
xchg
mov
adc
mov
and
mov
cmps
and
ins
mov
data16
cmps
in
mov
popa
aas
push
jae
prefetcht2
test
outs
adc
imul
ror
sti
out
xchg
jno
ja
push
shl
repz
popf
fist
test
xchg
dec
adc
inc
and
xor
jb
xor
jecxz
cli
mov
pop
(bad)
mov
xor
push
mov
add
ins
mov
call
adc
mov
loopne
sub
xchg
jp
mov
and
sbb
cmps
and
xor
pop
adc
out
pop
pusha
dec
mov
cmp
pop
adc
mov
repnz
jmp
repz
push
pusha
xchg
and
push
mov
xlat
sub
or
ins
inc
aaa
or
pop
loop
int
push
lods
ins
mov
push
sub
pop
pop
xor
ja
gs
inc
fcomp
js
push
into
push
pop
jmp
icebp
fs
addr16
xor
push
jb
test
mov
out
mov
jns
sar
mov
pop
das
stos
stos
jg
inc
mov
cmc
xor
adc
in
sub
adc
bound
mov
mov
outs
addr16
and
pop
inc
mov
jl
jne
xchg
ss
enter
cs
push
mov
idiv
push
xchg
xlat
cwde
and
scas
shl
in
add
pop
mov
mov
movs
push
and
adc
sub
mov
loope
mov
xchg
pop
cmc
iret
xchg
ret
leave
cmp
inc
mov
push
jnp
pop
pop
xchg
dec
push
movs
int
xchg
shl
rol
mov
nop
adc
xchg
in
ins
cmp
inc
xchg
push
sbb
lods
adc
inc
mov
loope
jnp
mov
jmp
jmp
fstp
adc
js
sar
sbb
pop
loope
retf
icebp
jo
(bad)
inc
std
cmp
call
mov
sbb
dec
mov
rol
xor
test
lods
out
or
iret
xlat
inc
jmp
sbb
mov
sub
shr
ret
xor
lods
xor
fbstp
mov
add
repnz
ss
stos
or
daa
call
sbb
push
cmp
loope
addr16
jl
mov
dec
mov
push
jno
dec
(bad)
mov
jo
or
jp
sub
test
movs
add
fwait
stc
and
mov
cmp
mov
mov
adc
test
inc
pop
pop
pop
mov
dec
int3
cmc
cmp
push
fmul
aad
inc
mov
call
or
outs
(bad)
jge
lock
fldenv
pop
rol
mov
pop
fbld
into
aad
jno
(bad)
sub
mov
in
mov
repnz
cld
inc
repnz
adc
das
cld
stos
push
pop
pop
das
pusha
lods
or
inc
push
push
sub
xor
mov
into
imul
leave
cmps
mov
aaa
mov
retf
iret
add
dec
pop
out
adc
fldcw
out
bound
ret
imul
xor
cs
inc
jbe
imul
ret
jo
mov
mov
jnp
jp
ret
retf
mov
cmps
jmp
pop
xchg
push
jmp
cld
frstor
adc
jns
icebp
jae
mov
sbb
or
mov
jmp
(bad)
cmp
pop
dec
pop
data16
jp
pop
inc
jmp
push
or
adc
mov
ret
pop
xor
add
rcr
aam
fcmovnb
push
shl
nop
push
popf
jp
cs
sub
dec
mov
cmc
mov
int3
mov
out
movs
mov
movs
pop
pusha
aas
or
jb
loop
movs
adc
lea
out
dec
test
ret
cmps
pop
data16
and
pop
mov
(bad)
and
stos
or
cmp
pop
imul
sbb
in
(bad)
fldpi
icebp
ror
adc
int
jne
retf
and
std
sbb
sahf
gs
jmp
or
jns
lock
cs
nop
pop
add
xchg
outs
cmps
popa
jno
and
inc
xor
ins
cmp
fnstenv
ds
cli
xor
sbb
mov
leave
int3
push
sub
adc
mov
jmp
mov
mov
sbb
ja
repz
aam
xchg
retf
shl
shl
fadd
xor
cdq
nop
fidiv
add
jno
and
(bad)
push
mov
xor
push
pusha
loopne
pop
jge
mov
mov
fstp
(bad)
stc
pop
jno
sbb
adc
sub
push
jbe
jne
fld
pop
mov
mov
hlt
lahf
cmp
loopne
inc
inc
pushf
add
sar
xchg
aas
stc
dec
pushf
clc
sbb
sbb
fwait
sub
stos
sbb
add
cmp
js
add
push
xor
stos
popa
dec
mov
ins
retf
and
cmp
and
enter
adc
xor
xor
push
out
mov
xlat
imul
pop
push
iret
mov
out
nop
mov
mov
and
add
inc
or
cdq
push
fwait
cmps
and
xor
push
ins
lods
mov
lock
pop
push
and
cmp
shr
cmp
fwait
inc
xor
push
mov
js
in
sbb
ja
hlt
xlat
inc
inc
push
call
and
sar
or
and
cld
fdiv
and
add
push
mov
mov
pop
lods
cmp
test
jge
jmp
push
mov
xchg
push
sub
cmp
idiv
imul
push
mov
gs
ins
mov
dec
daa
ss
mov
sub
xor
xor
xor
or
cmc
and
cmps
retf
mov
shl
push
dec
fiadd
stc
mov
jp
inc
sbb
cmp
fild
in
dec
xchg
stos
dec
pop
outs
(bad)
jbe
pop
stc
mov
(bad)
xor
lock
mov
xor
pop
aas
inc
sahf
scas
leave
cmovo
test
push
shl
mov
mov
or
les
mov
test
sub
push
jnp
sbb
fadd
sub
mov
add
xlat
sbb
outs
add
retf
pshufw
sub
cmps
xlat
pop
pop
in
xor
lds
sbb
or
movs
cmp
hlt
test
adc
(bad)
adc
gs
fdiv
imul
popa
out
je
xor
cmp
cmp
sar
sub
push
adc
jae
add
sub
scas
jecxz
out
add
xchg
cmp
pop
push
lods
ret
dec
gs
jnp
adc
dec
adc
push
lock
sbb
fdiv
(bad)
aad
or
stos
aas
out
and
mov
jbe
idiv
sbb
fild
mov
or
push
and
(bad)
call
xor
rol
mov
add
sbb
sbb
dec
gs
or
or
jecxz
xchg
adc
mov
stos
push
adc
pop
dec
popa
ret
call
mov
inc
inc
jno
out
call
mov
add
mov
jno
call
xor
push
pop
inc
push
iret
(bad)
xor
pop
cmp
in
lock
ror
movs
loop
add
sbb
mov
fld
jecxz
mov
push
cmps
jmp
push
and
cs
push
cmp
test
or
jmp
mov
mov
shr
mov
sbb
adc
and
adc
dec
adc
out
test
jmp
xor
mov
call
ret
mov
push
push
outs
mov
outs
ins
add
ins
test
cld
outs
and
in
push
sub
lds
lds
bound
shl
ror
sbb
movs
add
enter
cmps
pop
arpl
cs
mov
in
ins
lea
dec
outs
cld
inc
jo
xlat
xor
xor
xchg
cs
in
mov
(bad)
aam
loopne
jge
pop
bound
pop
or
arpl
aaa
mov
push
(bad)
pop
repnz
xchg
stos
lea
shl
sub
addr16
jnp
icebp
vsqrtpd
dec
popf
clc
rcr
push
in
mov
adc
scas
push
xor
xchg
cmovne
aas
hlt
call
leave
fisubr
push
mov
push
jmp
jge
sbb
cwde
dec
jne
inc
cdq
add
retf
std
ror
ja
pusha
hlt
out
aam
(bad)
mov
cmp
ins
push
inc
and
bound
or
inc
pop
or
repz
jae
daa
cdq
xor
adc
(bad)
push
cmp
xchg
dec
hlt
fbld
test
adc
and
jbe
dec
mov
push
pop
push
mov
in
push
outs
push
ins
sbb
mov
mov
push
fild
inc
rol
(bad)
movups
gs
idiv
dec
movs
ret
adc
dec
push
pop
mov
(bad)
sbb
call
mov
rcr
imul
adc
aas
aam
in
mov
out
mov
pusha
mov
aaa
movs
pop
mov
mov
scas
xchg
mov
mov
jns
stos
or
div
adc
push
push
pushf
xor
push
mov
test
cmp
pusha
add
mov
inc
outs
jp
mov
mov
inc
xor
pop
and
mov
pop
movs
aad
lea
shl
mov
enter
addr16
mov
inc
pop
cmps
fucom
pop
jg
in
cmc
test
jne
pop
add
mov
xor
test
jo
iret
cmp
push
sbb
iret
inc
push
repnz
adc
add
xchg
mov
inc
scas
scas
xchg
adc
push
pop
pop
ror
stc
adc
push
outs
adc
pop
dec
out
add
add
sbb
(bad)
movs
push
jge
outs
jge
jmp
popa
retf
mov
fisttp
or
and
test
jl
es
and
cdq
ja
jae
add
mov
sbb
aas
mov
scas
hlt
xor
sbb
in
or
mov
lods
popf
mov
xor
and
cli
inc
xchg
xor
xor
and
sti
jl
mov
out
jl
mul
jge
mov
xor
test
out
lock
es
fwait
outs
sbb
aas
cmc
lods
in
rcr
sbb
loop
imul
pop
sbb
add
fistp
outs
dec
pop
mov
nop
inc
xor
repnz
sub
shl
gs
repz
fimul
inc
ret
pop
add
or
xchg
pop
call
aaa
mov
loope
ins
test
int
pop
inc
mov
scas
or
jge
cmp
cld
inc
and
and
loop
arpl
dec
sbb
sahf
inc
xchg
cmps
dec
adc
es
xchg
pop
das
mov
(bad)
cli
shl
cmps
mov
jno
in
test
xor
dec
xchg
add
xchg
adc
adc
dec
lds
mov
dec
mov
add
jnp
mov
or
retf
lea
pop
imul
sbb
pop
ja
mov
ret
sub
sub
push
pusha
ja
pop
lods
sbb
add
mov
int3
nop
call
mov
lds
fisubr
loopne
jno
mov
or
push
call
pop
xchg
mov
cli
mov
movs
fadd
out
idiv
ret
inc
cdq
stos
dec
ret
inc
jmp
sbb
or
add
jbe
movs
cdq
shl
ja
xlat
mov
xchg
int3
or
jge
mov
inc
inc
mov
xchg
cld
jnp
or
adc
mov
mov
movs
cmp
xchg
ds
adc
mov
ins
adc
mov
lock
jbe
push
inc
mov
int
xchg
repnz
xchg
jl
dec
jbe
bound
xor
div
jle
mov
icebp
sub
or
mov
pop
mov
push
mov
rcl
fnsave
movs
call
test
jb
mov
and
push
stc
scas
dec
popa
or
xor
mov
jmp
ss
call
fnstenv
inc
dec
rcl
std
xor
into
neg
dec
cdq
push
rcl
dec
xchg
mov
mov
inc
lods
popa
push
pop
jmp
push
mov
cld
adc
or
dec
mov
cmp
pop
cmp
fs
dec
inc
mov
pavgb
or
test
sub
mov
dec
test
lods
mov
push
dec
repz
and
lds
(bad)
inc
add
pop
inc
jnp
out
inc
adc
sbb
cwde
xor
xor
int
in
sbb
out
out
aam
pop
pop
cmc
cmc
jmp
lods
adc
push
fimul
(bad)
icebp
jns
lock
push
fld
in
sbb
jmp
and
in
pop
ret
out
and
sbb
mov
clc
pop
jbe
jbe
shl
dec
sub
mov
fisttp
cmp
addr16
mov
comiss
pop
imul
dec
xchg
jmp
arpl
cmp
mov
shr
jne
jb
xchg
sub
shl
sub
repz
in
fistp
cwde
(bad)
jle
int3
or
call
cli
aad
cli
aam
aam
test
aad
cmp
xchg
call
(bad)
cmps
aad
mov
js
nop
movs
jbe
inc
icebp
pop
stos
push
jbe
in
rol
inc
push
or
adc
shl
cmc
lods
aaa
add
rcl
sbb
je
xchg
push
jg
in
cmp
retf
int
js
pop
add
push
mov
jne
test
mov
and
std
jecxz
imul
outs
jg
mov
fstp
jo
or
cld
js
popf
add
inc
mov
pop
push
jns
sub
push
lods
jns
mov
addr16
mov
pop
add
je
pop
jo
test
jmp
leave
jo
xor
outs
and
into
push
adc
outs
aam
jge
mov
or
outs
add
cmp
mov
lds
daa
add
test
jmp
das
mov
test
lods
arpl
int
adc
fwait
gs
pop
sahf
and
cmp
add
sar
pop
cmc
cmp
in
es
retf
icebp
ja
(bad)
repnz
jne
jb
mov
(bad)
rcl
or
packsswb
mov
aad
stos
inc
(bad)
fist
in
(bad)
stc
js
pusha
ffreep
jo
rcl
push
rcl
ss
mov
enter
push
mov
push
les
out
pop
sub
dec
jbe
push
shr
sub
mov
xchg
dec
xor
mov
jle
int3
fisub
or
pop
retf
dec
mov
pushf
cs
push
sub
add
push
nop
test
adc
push
stos
movs
dec
cmp
jmp
repz
pusha
dec
jge
cs
xor
mov
xor
fld
sbb
loop
jl
ret
retf
sbb
fwait
cs
and
sub
jge
push
mov
mov
popa
mov
xor
cmp
or
lds
sbb
mov
xor
mov
xor
cmp
mov
pop
test
js
xor
adc
call
jg
add
sub
jnp
ss
dec
dec
hlt
bound
outs
fdiv
rcl
inc
mov
pop
add
enter
data16
inc
sbb
sahf
fwait
pop
inc
sub
and
repz
mov
and
jge
push
adc
arpl
xchg
psllq
mov
(bad)
jno
push
or
popf
mov
out
dec
mov
xlat
lock
push
sahf
add
jmp
push
dec
jle
cmp
jnp
popa
mov
mov
add
test
mov
add
sti
cdq
adc
mov
popa
mov
(bad)
sbb
mov
xchg
in
xor
dec
je
in
mov
mov
pop
lea
ss
add
xor
clc
dec
sar
enter
cs
(bad)
cld
jae
fdiv
in
mov
jp
(bad)
stc
inc
fldenv
inc
jecxz
test
je
cld
loopne
pushf
mov
lock
dec
xor
retf
ins
dec
ja
hlt
and
or
je
push
loope
cwde
xor
fild
jne
mov
push
pop
push
xor
or
test
loop
push
and
arpl
pop
mov
xchg
push
pop
je
fcom
popf
into
push
add
les
pop
neg
sub
push
data16
loopne
cli
push
fcmovbe
add
fnstcw
lea
and
mov
mov
cdq
cmc
(bad)
pop
xchg
pop
lds
xchg
dec
stc
pop
xor
fld
dec
sbb
push
popa
retf
test
jge
dec
sti
jmp
jae
dec
adc
sub
aam
retf
jmp
mov
sbb
imul
call
mov
mov
mov
xchg
inc
fadd
loop
mov
mov
rcl
sbb
inc
and
jbe
and
cmc
cmc
push
adc
mov
mov
(bad)
out
ror
lea
dec
dec
test
and
and
jl
add
into
addr16
sbb
jo
popf
in
in
inc
add
push
inc
add
(bad)
dec
in
add
fisttp
xor
sub
aaa
aad
retf
cmps
ds
pop
fwait
add
jecxz
sti
jbe
fld
int
inc
icebp
aas
sbb
mov
sub
inc
add
and
enter
or
sub
in
scas
int3
cmp
sub
adc
push
pop
push
jns
jecxz
mov
in
clc
add
in
test
test
jno
lock
lock
dec
dec
addr16
jle
mov
push
cmp
inc
pop
pop
pop
inc
aas
icebp
add
lock
mov
jbe
mov
mov
push
sub
(bad)
dec
repnz
mov
paddusb
push
lar
pusha
jp
xor
out
lds
or
out
jmp
ficomp
jecxz
cld
or
or
ss
mov
or
(bad)
enter
cmp
ficomp
out
loope
push
inc
mov
mov
push
fidiv
(bad)
and
bound
fdivr
int
dec
cdq
rcr
inc
sub
push
jae
jmp
dec
fnstenv
fild
in
or
test
inc
xchg
mov
push
xchg
sbb
sub
pop
add
xchg
retf
movs
jp
js
and
jno
dec
(bad)
dec
jecxz
leave
mov
ja
xlat
push
jae
fcmovnb
inc
fidivr
stc
push
retf
inc
sbb
push
jno
add
adc
fcom
push
push
imul
and
pop
push
jg
icebp
fisubr
sub
add
xor
adc
cwde
imul
pop
in
aas
mov
jmp
mov
aad
jmp
fwait
push
fldcw
dec
xor
sbb
push
mov
push
dec
lea
repz
sub
test
gs
hlt
stos
mov
imul
cld
mov
stos
mov
aad
test
cli
pusha
das
gs
xchg
rcr
mov
out
(bad)
shl
fst
mov
inc
leave
enter
push
and
cmps
jp
sbb
inc
les
jo
adc
lods
push
inc
mov
fldcw
mov
fst
std
lock
push
inc
sbb
es
and
adc
cmp
xor
mov
inc
mov
add
leave
xchg
dec
mov
(bad)
or
mov
sub
xchg
test
imul
cmps
loope
enter
push
mov
and
jnp
fldz
jle
arpl
bound
pop
sbb
add
les
adc
push
retf
sub
sbb
ret
dec
ins
jmp
bound
rcr
test
test
xlat
bound
add
sbb
addr16
inc
fstp
mov
and
adc
cmp
jmp
outs
shl
adc
mov
sysret
repz
sahf
repnz
mov
push
(bad)
and
add
or
es
and
jnp
pushf
dec
int
and
pop
inc
inc
hlt
out
movs
outs
bound
fwait
push
in
add
test
xor
pop
mov
inc
out
scas
or
xchg
jg
ins
jle
xchg
add
xor
push
jp
test
mov
dec
loopne
cli
leave
cmp
sahf
jbe
xor
in
or
data16
mov
mov
jl
pop
or
jmp
xchg
sbb
(bad)
ins
out
test
cdq
das
jecxz
pop
pop
mov
repz
mov
jmp
nop
enter
sti
sbb
(bad)
jnp
sub
int3
or
mov
inc
fwait
pop
loop
outs
sbb
sub
jnp
std
or
push
mov
(bad)
mov
imul
movs
in
fadd
pop
je
hlt
mov
scas
pop
add
xchg
movs
mov
inc
test
inc
or
and
jl
mov
push
mov
mov
push
mov
cmp
dec
jp
or
cld
mov
mov
jnp
sub
mov
sbb
mov
in
aad
test
or
inc
(bad)
sub
outs
aam
xchg
movs
mov
ins
loop
inc
shl
aaa
mov
cmps
mov
xchg
jae
xchg
scas
lds
adc
outs
adc
cmp
xor
scas
mov
xchg
div
sub
mov
call
stos
cdq
push
mov
in
pusha
or
aaa
mov
(bad)
popa
lock
dec
das
out
sbb
leave
aam
cmp
xlat
int
mov
mov
rcl
in
or
xchg
adc
xchg
jnp
and
or
jmp
inc
ins
push
outs
add
repnz
cs
scas
call
mov
inc
adc
stos
mov
jp
mov
mov
mov
lea
mov
in
into
mov
movs
push
mov
cmp
retf
dec
and
mov
jne
dec
out
(bad)
mul
inc
lds
add
(bad)
and
push
popa
dec
dec
retf
mov
xor
jae
rcl
mov
push
fcomp
mov
dec
mov
js
repz
cmps
xchg
inc
adc
loopne
inc
cmps
gs
jg
movs
pushf
(bad)
(bad)
sbb
outs
sbb
xchg
mov
leave
push
fwait
movs
jo
pop
ds
mov
mov
pop
cld
xor
into
dec
mov
sbb
(bad)
or
cmc
enter
jno
mov
sub
jecxz
and
inc
scas
dec
pop
fistp
leave
sbb
xor
mov
sbb
dec
imul
mov
out
stos
mov
in
jg
xchg
jo
sbb
daa
jge
scas
fidivr
inc
push
dec
or
fadd
push
add
inc
lds
push
int3
out
and
frstor
sar
icebp
pop
xchg
mov
rcl
pushf
dec
out
push
push
sbb
test
rcl
cmp
fwait
mov
jb
xor
push
rol
push
inc
mov
lods
add
fadd
xchg
adc
mov
jmp
jmp
push
lahf
add
clc
sbb
dec
les
dec
pop
test
xchg
xchg
fmul
cmp
js
ror
fisttp
dec
adc
fnstenv
ins
(bad)
cmps
scas
jmp
fs
sbb
in
sete
adc
jno
(bad)
jno
cli
je
push
add
fwait
icebp
cmps
scas
int3
mov
lods
stc
mov
imul
clc
stc
fsubr
in
(bad)
out
pushf
cmps
pushf
pushf
fstp
pop
push
mov
xor
cmps
test
fadd
fmul
cmp
xchg
and
xchg
mov
sbb
shl
mov
or
sub
arpl
mov
adc
add
scas
dec
push
jne
sbb
fisub
push
imul
aas
sub
add
std
imul
mov
dec
jo
pop
fs
jecxz
pop
dec
call
inc
mov
push
cmps
sar
mov
pop
push
mov
cld
push
stos
xor
nop
mov
push
jge
clc
popa
lods
mov
clc
jbe
push
ins
push
sbb
inc
xchg
scas
scas
imul
in
inc
adc
(bad)
fs
scas
leave
inc
push
in
out
xchg
scas
retf
in
jb
and
stc
(bad)
fstp
inc
jl
mov
mov
repnz
rcl
lea
mov
xor
adc
(bad)
aam
scas
mov
fcmovnu
test
mov
leave
mov
gs
dec
xchg
mov
pushf
fcomp
in
mov
sbb
inc
jle
rcr
mov
cli
bound
dec
jns
fsubr
inc
gs
test
and
dec
mov
xchg
push
shl
xchg
xor
push
ins
and
pop
add
das
stc
inc
xchg
lds
inc
cdq
dec
aaa
inc
mov
push
pop
xchg
stos
mov
push
add
retf
jecxz
mov
popa
iret
pop
in
scas
aas
mov
scas
fmul
pop
jbe
dec
sbb
test
ja
lods
fistp
pop
cwde
icebp
stos
bound
aam
fcmovb
adc
icebp
adc
pop
xchg
add
movs
inc
fst
outs
inc
push
pop
fadd
add
cmc
push
rcl
mov
popf
fnstsw
outs
out
sbb
sub
xchg
xchg
adc
or
push
mov
inc
jbe
xlat
sbb
leave
push
mov
fisttp
test
fdivr
cmp
add
stos
outs
or
jns
clc
cmps
(bad)
push
add
test
push
xor
xchg
xchg
cmc
test
xor
cmps
and
pop
or
and
std
or
sub
inc
and
xchg
mov
pop
jb
mov
adc
add
push
inc
fwait
push
sbb
pop
cmp
adc
(bad)
not
in
aad
dec
pop
mov
syscall
mov
aam
loope
lods
jmp
xchg
scas
mov
mov
inc
cmp
les
std
ds
jecxz
jae
dec
cmps
div
ror
push
and
mov
mov
mov
sbb
inc
xchg
adc
pop
fidivr
das
aam
sub
sub
adc
imul
arpl
pop
pop
mov
shl
sub
and
pushf
pusha
and
test
and
mov
sbb
mov
stos
out
bound
cmp
int3
data16
ror
xchg
movs
and
ret
and
cwde
dec
mov
test
leave
call
push
jp
or
mov
into
sub
and
jle
rol
imul
push
data16
lods
pop
outs
xor
mov
retf
iret
mov
sbb
neg
inc
and
pop
xchg
std
dec
loopne
cmps
enter
inc
add
(bad)
mov
push
jns
retf
fistp
iret
cmp
sbb
xor
ja
xchg
sbb
add
jae
or
lahf
add
scas
jge
inc
or
daa
dec
cmc
pop
aaa
pushf
xchg
xor
test
ss
mov
rcl
(bad)
mov
scas
fiadd
mov
pop
(bad)
sub
aam
aas
shl
cmp
push
pop
sub
rcl
mov
daa
pop
rol
xchg
push
and
out
push
inc
test
push
adc
fnstsw
push
cli
jae
dec
pop
lahf
inc
popa
(bad)
sub
(bad)
add
je
stos
mov
jns
cmc
cmps
sub
cmc
push
cdq
inc
in
jg
dec
adc
adc
and
loope
cmps
pop
bound
inc
mov
dec
les
out
outs
(bad)
in
rcl
xchg
call
jmp
movs
or
xchg
jmp
dec
loopne
xchg
lds
(bad)
fstp
out
gs
pop
fld
nop
test
jbe
xchg
mov
push
daa
gs
stos
pop
test
push
cmc
jne
and
dec
mov
cmps
cmp
mov
push
jp
sub
sub
mov
stc
into
adc
inc
mov
sub
push
into
pop
or
out
das
cli
iret
in
jecxz
outs
dec
xor
pop
cli
push
ds
stos
popa
test
leave
and
push
pop
ret
aad
das
jne
test
push
or
leave
popa
jmp
repz
shl
jmp
push
test
icebp
sub
jns
inc
push
mov
push
data16
cwde
jo
mov
sub
call
sbb
fwait
sbb
movs
fld
add
jo
inc
shl
mov
mov
cmp
(bad)
js
cs
out
xchg
leave
imul
mul
in
or
inc
imul
sar
pushf
nop
daa
mov
mov
and
adc
push
js
ret
jne
out
xor
cmps
pusha
into
dec
fimul
xor
div
inc
mov
jb
and
in
sub
stc
adc
xor
and
pop
loopne
jnp
(bad)
xor
jo
jo
sub
xor
or
sub
scas
daa
push
inc
bswap
dec
jle
jae
int
xchg
scas
mov
pop
sbb
jns
mov
adc
icebp
sub
in
bound
ret
pop
mov
and
cmp
dec
data16
mov
fwait
push
scas
mov
popa
fsub
cdq
mov
and
mov
imul
lea
int
inc
mov
mov
fsub
jno
xchg
data16
test
push
dec
xchg
std
sub
test
adc
mov
mov
push
jp
repz
(bad)
es
das
scas
js
xchg
icebp
add
adc
hlt
fldenv
pop
mov
imul
sar
addr16
not
mov
adc
loop
mov
mov
pop
hlt
mov
out
sbb
call
retf
mov
or
ds
loop
jns
and
outs
inc
add
retf
jne
or
xor
retf
adc
hlt
int
adc
push
add
repnz
shr
jno
clc
push
xor
ret
pop
aas
mov
xor
xor
pop
adc
sub
(bad)
mov
out
push
mov
aas
icebp
push
mov
arpl
jecxz
pop
int
pop
inc
sbb
jbe
xchg
mov
mov
neg
xor
and
into
lea
sub
dec
out
sbb
aas
call
ret
pop
jl
pushf
push
push
dec
or
das
in
push
repz
xchg
sahf
jbe
mov
(bad)
loope
add
dec
add
aas
jno
sbb
or
pop
sti
or
or
repz
xor
dec
jne
jo
pop
mul
adc
int3
cmp
lods
daa
mov
push
inc
rol
mov
mov
call
in
retf
jl
scas
aas
dec
mov
xchg
or
imul
push
jae
mov
xor
xchg
cmp
test
test
xor
ds
icebp
popf
test
push
sbb
xor
(bad)
mov
mov
dec
dec
retf
add
int
fsubr
jge
ror
add
mov
enter
mov
dec
adc
cmp
pop
fst
sbb
test
mov
inc
fisttp
or
test
stc
jne
ins
pop
mov
mov
and
(bad)
cmp
ins
pop
push
sbb
mov
lds
and
jno
cmc
test
inc
(bad)
jp
jmp
push
jo
jns
clc
fnstsw
xor
pop
lods
add
call
and
adc
out
mov
je
jmp
jle
mov
or
ror
xor
fdiv
bound
push
imul
cli
fs
cs
mov
rol
loopne
ins
test
movs
hlt
ins
sub
je
pop
adc
xchg
and
mov
inc
pushf
sbb
pop
movs
push
jge
hlt
fwait
or
jne
xor
mov
or
rcl
pop
ins
int
xchg
retf
shl
xchg
dec
std
into
sub
xor
dec
xor
sub
jge
sbb
out
push
mov
add
jno
jb
fisubr
push
movs
shl
xor
fiadd
aas
out
nop
or
pusha
adc
js
dec
dec
cmp
push
hlt
add
test
ss
mov
dec
aaa
pop
xchg
push
icebp
cwde
ins
pop
out
pop
lods
enter
adc
sbb
jge
mov
push
dec
mov
inc
push
jo
dec
jmp
push
hlt
inc
push
pop
(bad)
jl
inc
imul
jmp
xor
lea
dec
(bad)
je
in
add
scas
aas
ds
ins
pop
push
cli
in
sbb
popf
push
(bad)
sbb
and
ss
imul
je
adc
(bad)
stos
(bad)
je
es
and
fld
or
into
adc
int3
aam
mov
mov
pop
mov
add
(bad)
jnp
mov
jg
imul
and
sub
inc
jns
(bad)
lock
loopne
pop
cmp
fwait
shr
sub
mov
pop
mov
aas
push
jp
cmp
lock
js
icebp
sahf
push
fild
cmp
popa
idiv
cmp
jb
fisubr
shr
sub
pop
mov
aam
jo
bound
sbb
xchg
xchg
add
(bad)
pushf
mov
pushf
in
or
out
pop
cmp
adc
retf
popa
jb
test
push
sub
in
mov
and
sar
cmp
cs
push
sub
jb
add
in
inc
retf
mov
in
ret
inc
ja
push
out
add
push
xchg
test
adc
push
loopne
bnd
cld
jecxz
int3
aad
mov
sbb
cmp
push
sub
je
add
repz
call
xlat
jmp
repnz
lods
dec
outs
or
mov
imul
jmp
inc
cmp
push
cwde
mov
jns
dec
je
aad
sahf
or
jne
add
sub
jnp
in
(bad)
lods
and
popa
jle
sbb
std
fnstcw
(bad)
popa
rcr
jmp
pop
retf
(bad)
push
jnp
aad
call
pop
sti
xchg
test
(bad)
std
shl
or
pop
push
mov
jne
mov
jnp
cmps
(bad)
jecxz
ss
popf
sti
icebp
pop
mov
loope
loope
dec
out
mov
scas
popf
lea
mov
mov
movs
jnp
fidivr
pop
xor
xor
push
cmp
or
mov
xchg
daa
dec
outs
popa
addr16
movs
cmp
ds
dec
fs
sub
and
sub
jne
int
mov
(bad)
fild
xchg
gs
jecxz
inc
retf
pop
out
fisubr
cmp
jp
mov
xor
dec
mov
pop
and
mov
xchg
loopne
sbb
cmp
sub
in
push
pop
sbb
push
or
out
push
call
sub
je
ds
fild
xor
popfw
out
sub
xchg
push
push
mov
imul
cmp
rol
shr
xchg
inc
xor
adc
sbb
push
das
mov
pop
adc
mov
jmp
into
sbb
sbb
mov
pushf
int3
arpl
mov
sub
pop
xor
int
jae
pop
pop
fstp
mov
add
mov
adc
rcr
repz
dec
mov
jbe
cmp
mov
or
pop
jns
push
or
lds
bnd
dec
pushf
icebp
xchg
xor
or
cmp
inc
popa
out
popf
sbb
and
pop
cmps
arpl
xor
test
cwde
pop
sbb
add
ins
jne
test
rcl
xchg
adc
xlat
xor
jb
ss
jmp
out
test
xchg
pop
jno
lods
sbb
repnz
hlt
sbb
ror
fmul
popf
push
dec
jae
ret
test
ret
pop
xor
daa
stc
stos
pop
pop
mov
sub
test
jmp
les
jnp
rol
ja
pop
test
adc
pop
stc
xor
jmp
arpl
jecxz
mov
stc
mov
call
mov
sbb
gs
ins
and
pop
add
jle
cdq
ds
ins
les
mov
pop
sub
test
jecxz
pop
jae
sub
test
xchg
mov
cmp
pushf
js
sub
test
movs
mov
cmp
rol
fbld
cdq
xor
sub
ins
das
pop
cmp
xchg
jae
loopne
into
in
cdq
push
mov
cdq
pop
pop
jle
inc
mov
jae
mov
shr
std
test
aas
(bad)
loop
inc
into
push
cmp
jmp
lds
inc
mov
pop
or
ret
dec
xor
push
mov
inc
std
add
mov
pop
into
xor
aam
sub
test
pop
pop
fadd
cmps
ret
repz
jmp
repz
ror
cld
shl
mov
push
xor
jb
ds
mov
leave
pop
dec
cmp
lea
xchg
loop
cdq
pop
arpl
lods
icebp
inc
mov
outs
pop
sahf
test
ret
push
out
cmp
xor
mov
(bad)
sti
cmc
sub
push
ja
mov
dec
xor
xchg
es
sbb
jge
push
add
jge
and
jno
ja
inc
outs
xchg
fdiv
push
mov
mov
xchg
pop
ss
int
loopne
ret
adc
cmp
test
dec
mov
(bad)
pop
adc
dec
out
pop
push
xor
data16
jl
push
stos
repz
mov
pop
pusha
aad
mov
mov
push
rol
repz
xchg
scas
aam
loop
xchg
test
adc
icebp
and
add
push
call
cmp
int
in
mov
loop
out
add
add
mov
cmp
sub
mov
stos
hlt
adc
ins
outs
add
loop
xor
jecxz
hlt
shr
stc
mov
sub
test
imul
retf
add
jnp
(bad)
cld
pop
ds
leave
pop
add
leave
cmp
push
shl
xor
xchg
pop
mov
or
fld
push
mov
lea
les
(bad)
xchg
cmp
(bad)
cld
jae
push
ret
aad
push
cmp
imul
push
addr16
cmp
cmps
and
add
pop
mov
mov
es
cmp
inc
ins
xor
xchg
fsubr
jo
inc
pop
movs
xor
sbb
daa
sub
xor
dec
add
push
mov
ja
sti
push
xor
ins
and
call
ficom
jbe
xor
push
aaa
inc
mov
xchg
jnp
mov
mov
xchg
mov
push
sbb
push
aad
xchg
mov
into
cmovo
js
fwait
out
out
inc
push
add
push
fstp
fs
inc
and
mov
lea
imul
cmp
inc
sbb
ror
es
inc
jecxz
cld
dec
xchg
mov
mov
lock
mov
sbb
mov
lahf
rcl
mov
mov
or
out
addr16
add
mov
mov
or
aam
push
fstp
out
stc
dec
je
cwde
push
mov
adc
daa
rol
mov
or
jns
pop
mov
jmp
scas
mov
rol
jecxz
cmp
pop
rcr
mov
lods
pop
jecxz
push
sub
push
arpl
dec
ret
std
dec
cmp
lods
ret
(bad)
iret
jbe
xor
out
push
mov
xchg
jns
cmps
sbb
stc
movs
cli
push
sub
fistp
push
ds
cli
lock
callw
retf
ret
mov
rol
ja
xchg
nop
pop
jne
int3
push
cmps
mov
pop
inc
fdiv
pop
stc
cmps
jecxz
aas
inc
or
dec
inc
out
jp
xlat
jb
fnsave
add
or
lods
aas
pusha
jo
push
pop
leave
bound
scas
xlat
popf
xchg
and
dec
aaa
adc
sub
and
mov
pop
dec
or
or
cmp
pop
sub
or
gs
dec
mov
mov
shl
test
clc
movs
sahf
and
gs
jbe
inc
arpl
xor
enter
xchg
loope
push
je
sbb
clc
inc
pop
ds
movs
mov
outs
mov
js
xor
lahf
and
out
rol
xor
test
int
push
loope
fs
stos
xchg
stc
xor
xchg
(bad)
popa
or
jnp
sub
fldl2t
jp
xor
cvtps2pi
cmc
xlat
ficom
cwde
jmp
in
cmp
pop
push
call
shr
imul
sub
mov
loopne
push
dec
pushf
mov
xlat
call
jno
dec
and
das
lds
xor
sbb
(bad)
pop
mov
mov
mov
xor
mov
jge
cmp
jmp
mov
arpl
mov
cdq
adc
sbb
stos
popa
repnz
mov
dec
lock
xor
popa
jae
nop
in
pushf
push
pop
jno
loopne
pusha
push
jle
mov
xchg
mov
push
rcr
ja
vaddpd
push
sbb
sub
adc
or
xor
retf
jg
inc
sbb
or
sub
pop
cmc
ins
pop
or
scas
cmp
nop
mov
test
sbb
es
cmp
cmp
xor
je
xchg
test
pop
fistp
xor
and
mov
mov
pop
jne
sbb
cmc
xor
xor
outs
in
stos
das
shl
add
test
shr
ins
fild
add
pop
push
addr16
lahf
outs
and
pop
into
pop
pop
rcr
adc
jno
pop
sub
mov
mov
ds
inc
mov
push
sbb
dec
test
cmp
fnstsw
sbb
jg
retf
icebp
ret
xchg
xchg
fisubr
or
loop
push
(bad)
xlat
jne
in
andnps
(bad)
shl
mov
push
jge
cmc
push
imul
adc
dec
mov
fistp
mov
sub
in
mov
mov
mov
cmp
and
imul
and
cmp
pop
ja
cwde
mov
push
rcr
sti
add
popf
pop
add
aam
xchg
cdq
fadd
jge
pop
jecxz
into
imul
pushf
push
jge
call
xchg
add
enter
std
int
cmc
adc
sar
ret
repz
call
add
xor
(bad)
mov
retf
(bad)
nop
cmp
jge
sbb
fldenv
aam
clc
dec
mov
mov
jle
jo
dec
or
sub
dec
fisttp
cmp
(bad)
fst
push
jg
daa
xchg
push
push
xchg
out
push
inc
xchg
sub
xchg
imul
xchg
loopne
cmp
aam
inc
cmps
dec
add
jo
cld
inc
cmp
pop
add
push
in
les
fwait
sbb
push
mov
mov
imul
sub
repz
sub
call
pop
mov
and
retf
(bad)
je
es
in
mov
outs
adc
jne
pop
cmp
aam
xchg
push
test
pop
cmps
and
out
mul
xor
out
pop
pop
and
inc
xor
mov
xchg
adc
mov
jg
(bad)
mov
les
movs
aas
sbb
jbe
iret
dec
mov
outs
push
sub
sahf
mov
rol
iret
jle
out
(bad)
pop
(bad)
fs
mov
repnz
jb
fcmovnbe
mov
sub
sbb
or
retf
stos
pushf
cwde
retf
jae
ret
arpl
imul
hlt
clc
sbb
sbb
in
adc
dec
iret
xchg
cmp
fs
or
cmp
sub
dec
adc
call
aam
inc
xchg
lods
pop
sbb
inc
test
pop
imul
jo
cmp
pop
adc
inc
(bad)
sbb
mov
pushf
adc
test
xchg
sub
inc
push
punpcklbw
or
pop
xchg
xchg
vcvtph2ps
jno
jne
mov
mov
jp
cmp
sbb
les
sti
push
cmp
dec
add
popa
repnz
es
scas
xchg
test
inc
adc
xchg
jbe
mov
out
xor
jle
nop
out
rol
ja
in
sti
mov
pusha
push
aad
add
or
cdq
ja
sbb
jg
or
mov
cmps
pop
pop
int3
cs
cs
sub
push
lds
inc
jb
xor
lds
or
push
ret
adc
mov
sahf
mov
fsubr
shl
test
icebp
and
movs
aaa
aas
and
enter
cmc
nop
mov
das
mov
aaa
mov
scas
adc
std
ret
xchg
fld
test
movs
xor
pop
rcr
push
cmp
mov
(bad)
sahf
sub
xchg
pop
dec
dec
inc
in
and
cmp
pop
mov
jl
add
fbld
les
sub
retf
test
jb
cmc
aam
xchg
sti
cmp
mov
and
mov
imul
or
bound
inc
jns
mov
rcl
jg
push
in
jns
nop
jmp
mov
lea
mov
test
lds
cmp
dec
adc
arpl
pop
inc
mov
jnp
pop
loope
pop
or
aaa
(bad)
test
jno
repnz
add
test
call
xchg
xor
cmp
jge
pushf
in
outs
sub
outs
fwait
mov
aad
push
sbb
sar
sbb
push
adc
aaa
stc
push
jbe
in
push
loopne
mov
repnz
mov
(bad)
daa
shr
adc
das
dec
push
aam
sub
mov
jb
imul
mov
jle
cmp
adc
in
xor
fldenv
pusha
test
lahf
push
inc
jns
sbb
sbb
xor
dec
jmp
std
addr16
dec
dec
mov
lea
sbb
mov
sbb
ret
outs
mov
dec
sub
out
data16
inc
popf
xchg
adc
arpl
cmp
test
xchg
fucomp
cmovns
test
cmp
call
push
enter
xchg
repz
pop
ins
rcr
jnp
outs
pop
push
test
mov
pop
mov
or
mov
ds
xchg
ja
icebp
loop
jne
xchg
mov
push
lock
jp
pusha
iret
or
mov
in
cli
cmc
mov
and
sbb
ins
and
lods
out
inc
add
inc
in
inc
adc
add
dec
mov
push
sub
in
sar
pop
or
push
inc
jo
dec
cmp
dec
and
inc
pop
and
out
mov
addr16
cmps
inc
jmp
loopne
dec
xchg
inc
and
cmp
ss
cmp
and
aaa
arpl
aam
pop
sbb
inc
xor
mov
mov
test
jle
xor
pop
sbb
add
ficom
ret
lock
cmps
aam
pop
pusha
cmp
repz
or
aam
inc
sub
test
ins
daa
aaa
mov
adc
push
xchg
sub
dec
cmp
fwait
push
pop
cwde
cmp
mov
xor
fimul
mov
sbb
jae
xchg
xor
lahf
jle
inc
pop
cld
pop
mov
cmps
inc
pop
or
mov
out
push
cmps
gs
aam
imul
aam
out
adc
ret
adc
adc
out
xchg
mov
enter
loop
cs
iret
stos
push
ret
inc
inc
pusha
jo
int
loope
and
push
jno
xchg
dec
sbb
dec
mov
and
push
inc
ds
xor
sbb
mov
ffreep
push
mov
mov
sub
or
mov
jge
pop
cmps
sbb
or
lea
xchg
in
pop
xchg
test
or
test
cld
mov
movs
fadd
inc
cmp
or
mov
mov
es
push
sbb
repz
dec
pop
ret
test
mov
push
jne
lock
or
pop
lods
xchg
outs
mov
xlat
add
pop
fst
jmp
ror
fwait
jb
mov
out
xchg
inc
inc
mov
stos
jnp
and
in
jbe
adc
push
outs
leave
out
stc
fadd
cli
std
xchg
pop
cmp
inc
add
jp
data16
dec
push
push
clc
jecxz
call
aad
push
mov
sub
jmp
jnp
adc
adc
es
or
or
pop
push
dec
arpl
popf
pusha
(bad)
imul
xchg
xchg
add
add
out
inc
in
cmps
in
shr
popa
lods
movs
(bad)
pop
adc
mov
loope
mov
xor
xchg
popf
(bad)
(bad)
sbb
dec
push
sbb
ret
add
mov
pcmpgtd
mov
mov
gs
mov
fstp
shr
stos
outs
sbb
cdq
inc
push
dec
push
mov
int
mov
inc
mov
jbe
xor
neg
test
lods
inc
out
push
les
cmp
jp
push
mov
adc
fld
pop
add
mov
std
mov
daa
xor
xor
and
(bad)
bound
(bad)
lods
xchg
pop
cmc
cmc
dec
sahf
outs
rol
or
retf
mov
and
cmc
clc
push
cmps
les
jns
mov
repnz
jb
sbb
cwde
push
ins
aam
movs
(bad)
xor
xchg
and
in
imul
movs
or
cmc
scas
push
dec
sbb
out
and
jl
sub
add
add
sbb
les
mov
or
mov
push
add
imul
mov
mov
mov
gs
mov
jg
push
cmc
and
cli
shl
mov
dec
add
push
in
pop
data16
into
mov
movs
mov
mov
and
ficomp
mov
dec
fstp
shl
pop
xor
or
es
mov
adc
mov
push
adc
xlat
xchg
xchg
mov
ds
mov
adc
jg
mov
into
and
in
fs
lock
in
sbb
mov
loope
les
loop
fs
popf
out
scas
adc
lock
(bad)
adc
add
and
push
jge
loope
stos
add
out
mov
sahf
cmps
sbb
adc
ins
rol
ins
mov
shl
dec
dec
mov
adc
test
cli
les
push
push
loop
push
add
daa
cdq
adc
and
mov
mov
pop
nop
mov
fiadd
and
(bad)
or
das
fmul
sub
sbb
xchg
pop
adc
mov
cs
cmp
retf
sahf
popa
adc
push
shl
push
(bad)
jne
enter
aas
jns
xchg
jmp
out
es
cmc
fiadd
les
loope
sub
into
xor
loopne
dec
sub
xchg
xor
jnp
aad
(bad)
lahf
aam
xchg
and
cwde
jmp
idiv
(bad)
cmp
arpl
aam
push
xor
jb
movs
loopne
in
cmp
loopne
jbe
movs
or
dec
jmp
gs
and
jp
mov
cmps
mov
pusha
xor
adc
mov
cmp
dec
sar
ja
ficom
fisubr
sbb
push
cs
jg
cmp
mov
outs
shl
push
mov
mov
mov
xchg
dec
pop
xchg
cmp
adc
cmp
dec
sti
out
jl
push
pop
and
cmps
jmp
mov
push
call
xchg
icebp
sbb
mov
je
and
adc
nop
inc
outs
fcomp
cmp
cmps
imul
jge
(bad)
sar
xchg
cmp
cmps
daa
aam
call
loope
jp
adc
or
ss
outs
jb
add
ret
mov
mov
adc
cmps
sbb
xor
mov
push
test
jg
add
pop
mov
jmp
(bad)
sub
fnstcw
xlat
call
inc
arpl
ficom
outs
out
cmc
aas
mov
or
fsubr
pop
data16
xor
ret
mov
imul
ret
icebp
ins
inc
cdq
mov
(bad)
fsubr
xchg
or
mov
and
add
adc
pusha
and
push
call
emms
push
jns
int
dec
pop
inc
xchg
(bad)
cmp
jl
push
sti
les
cld
mov
sub
scas
sar
mov
lahf
test
pushf
ja
loop
outs
jns
stos
cmp
inc
or
(bad)
aad
cmps
test
mov
(bad)
cwde
out
pop
fimul
outs
push
pusha
or
xlat
retf
mov
retf
mov
dec
cld
aaa
dec
xor
lds
and
ins
jbe
cmp
mov
xor
xor
cli
retf
lods
ins
fwait
jp
sbb
jge
lock
retf
adc
xchg
sbb
in
push
mov
maxps
sub
pop
dec
dec
sub
test
push
or
inc
ja
out
pop
push
and
in
outs
lods
int
call
and
inc
push
(bad)
pop
imul
fistp
xor
iret
jg
mov
or
dec
cmp
add
add
inc
rcl
xor
or
mov
retf
cli
xlat
mov
das
movs
fnstcw
and
sbb
mov
fs
cmp
or
pop
cmp
inc
sub
stc
lock
jo
and
popf
test
repz
inc
pop
mov
icebp
mov
out
adc
fst
xchg
push
fimul
inc
mov
xchg
test
dec
adc
add
mov
mul
mov
repz
cmp
cmps
sbb
xchg
or
sbb
das
xor
aaa
ss
fild
or
sub
xchg
push
lods
xchg
cli
xchg
adc
xchg
or
in
push
clc
inc
push
fstp
jg
fcmove
jecxz
xchg
imul
inc
mov
daa
(bad)
cli
jp
int
sub
(bad)
mov
mov
ins
dec
call
or
subps
xchg
and
in
cmp
adc
pop
dec
adc
fistp
call
mov
mov
and
mov
xor
dec
cmps
push
mov
inc
push
push
push
adc
and
jo
(bad)
fisubr
hlt
jg
sub
jmp
js
inc
or
js
(bad)
mov
push
mov
cld
xchg
push
outs
data16
cs
mov
shl
push
xor
jbe
mov
and
das
sub
repnz
jno
add
cmp
jle
add
fcom
test
lock
(bad)
mov
jbe
pop
jmp
pop
outs
pop
jp
xchg
pop
clc
dec
sub
xor
jg
ret
xor
or
dec
jae
mov
xor
xchg
retf
inc
push
movd
pop
pop
jg
xchg
mov
xor
sub
add
mov
and
cwde
xchg
fbstp
push
mov
or
aas
es
push
popf
icebp
stos
aam
hlt
xchg
aam
out
nop
mov
mov
in
sbb
repnz
sbb
lods
sub
ins
les
pop
stc
ficomp
inc
xchg
addr16
mov
(bad)
repnz
xor
shl
mov
cwde
fbstp
iret
test
js
mov
test
cld
xor
xchg
cdq
inc
lock
int3
inc
jl
push
fimul
and
rcl
sbb
push
or
push
stos
dec
cmp
into
in
cs
test
fisubr
mov
jge
sar
cmp
out
mov
xor
fbld
aad
das
mov
mov
push
mov
sbb
js
lods
movs
mov
pop
dec
or
add
mov
je
jle
in
push
in
inc
jb
(bad)
adc
mov
movs
imul
or
or
pop
jb
movs
mov
test
xchg
imul
ror
in
add
push
les
sbb
and
movs
sbb
in
clc
jo
(bad)
fidivr
aad
call
jbe
call
sub
or
stc
cdq
or
xchg
sub
cmp
jns
sahf
sbb
mov
mov
popa
adc
cld
loopne
fild
ja
inc
retf
mov
sbb
push
push
jmp
ins
cld
mov
inc
adc
pop
cmp
sti
(bad)
fist
jg
fsub
xlat
xchg
pushf
ins
into
push
jecxz
inc
adc
sbb
and
jmp
or
cmp
pop
in
in
push
imul
lods
push
jmp
sub
add
jnp
push
addr16
xlat
and
std
js
or
cmp
fsub
es
inc
test
and
pop
mov
arpl
ror
cdq
fdiv
ins
jmp
or
jnp
pop
sub
cmp
mov
in
out
xor
pop
cdq
lods
push
(bad)
mov
fadd
popf
or
rcr
into
xchg
mov
inc
sub
push
mov
push
push
or
fadd
sub
shl
mov
es
inc
jmp
int3
jb
and
test
pusha
add
add
icebp
clc
clc
push
lods
repz
rcr
sub
in
jns
idiv
pop
call
cmp
loop
fidiv
outs
xchg
in
test
inc
adc
xchg
push
jl
adc
mov
inc
jmp
mov
dec
or
sub
xchg
js
daa
icebp
retf
push
pop
popa
xchg
daa
pop
pusha
scas
cmp
push
leave
jge
and
mov
sbb
dec
jns
in
sbb
mov
add
(bad)
loope
pop
loopne
rcl
lods
mov
sub
mov
cmps
jl
and
pop
adc
stos
ja
cmp
mov
or
xor
push
sbb
mov
(bad)
shr
inc
ds
fdivr
rol
sbb
and
repnz
fimul
shr
gs
push
fadd
in
and
push
pop
(bad)
fcom
fstp
fisttp
xchg
fisubr
dec
jle
mov
add
sbb
(bad)
fsub
mov
in
(bad)
adc
inc
sbb
adc
addr16
aaa
dec
cmp
scas
ds
test
arpl
cmp
mov
aaa
mov
xchg
xchg
shr
in
xchg
clc
pop
or
push
loope
jmp
int
and
jmp
imul
ds
push
and
cs
mov
lahf
es
and
pop
adc
inc
pop
out
in
cwde
jns
and
iret
jo
and
out
adc
xchg
stc
push
ins
pop
pop
iret
mov
movs
scas
add
sub
test
push
adc
or
stc
add
mov
cmp
shl
cld
jns
xor
jae
xchg
imul
adc
(bad)
jg
in
lock
pop
mov
cs
add
jbe
mov
sbb
fmul
inc
arpl
aas
xor
push
or
cmps
xor
jmp
cmc
pop
cmp
add
dec
lods
add
in
shl
test
jp
js
dec
repz
and
mov
ret
cdq
hlt
mov
fdivr
arpl
jecxz
add
popf
retf
xchg
in
mov
sti
sar
inc
mov
cmps
retf
aam
pop
outs
pop
popa
push
fs
popa
repz
dec
call
mov
sub
test
xchg
pop
dec
mov
mov
jle
and
cmp
xchg
movs
(bad)
push
loopne
bound
daa
mov
retf
mov
rcr
rcl
sbb
mov
test
(bad)
and
and
push
sub
push
in
adc
ret
adc
pusha
adc
or
sbb
pop
jb
inc
pop
lahf
loopne
(bad)
jne
mov
mov
adc
(bad)
push
cmc
dec
sti
xchg
adc
mov
test
int3
ds
mov
mov
imul
mov
mov
fbld
pop
and
jl
mov
mov
add
test
aas
fbld
ret
(bad)
add
movs
out
outs
ja
call
mov
lds
inc
loope
inc
das
mov
sub
js
aad
frstor
ret
cmc
jp
sub
xchg
lods
xor
fsubr
sub
in
xchg
pop
mov
ds
add
jmp
adc
scas
cmovns
jp
outs
rcl
stos
push
in
inc
xchg
pop
in
pop
das
push
mov
mov
sti
xchg
dec
aad
rol
sbb
ror
loop
or
xor
push
cli
call
mov
mov
and
dec
xchg
movs
clc
push
loop
sub
mov
xchg
pop
adc
imul
jge
adc
lock
inc
xchg
xchg
call
(bad)
fcomp
mov
dec
xchg
cmp
mov
out
out
mov
adc
mov
mov
add
(bad)
or
dec
xor
mov
inc
xlat
mov
adc
adc
mov
popa
sub
xor
push
out
xchg
sbb
push
dec
fs
add
pusha
push
inc
pop
fcom
inc
and
dec
mov
mov
sbb
jmp
mov
sbb
ins
fsub
dec
scas
loopne
imul
push
loope
fild
xor
fldenv
pop
dec
pop
pop
and
(bad)
mov
fdivr
or
add
retf
js
mov
jae
mov
sbb
rol
xchg
shl
or
out
gs
push
and
sub
in
cmp
xchg
sub
test
test
mov
push
pop
jnp
xchg
sub
movs
icebp
xor
call
dec
fs
inc
or
lahf
and
in
aam
mov
add
ins
in
pop
and
mov
pop
add
fadd
inc
sbb
popf
adc
adc
int3
stos
mov
test
jle
sahf
push
les
or
and
pushf
out
test
xchg
fsubr
sar
test
xchg
inc
sub
aaa
push
adc
sub
xchg
sub
add
shl
xor
aaa
dec
aas
xor
jecxz
stos
or
daa
or
stc
in
in
lock
mov
or
mov
mov
or
add
shr
movs
sbb
sub
adc
pop
cmp
shl
std
icebp
iret
inc
pop
pop
pop
arpl
inc
jmp
xor
xchg
xlat
aam
bnd
and
mov
clc
mov
pop
and
sbb
sahf
es
pop
retf
scas
cmps
loopne
retf
out
and
sub
bound
cmp
mov
inc
ss
fidivr
dec
and
stos
xor
fimul
jmp
arpl
dec
inc
push
mov
push
jno
xchg
sub
mov
mov
shl
dec
(bad)
neg
jp
loop
cmps
mov
in
leave
shl
mov
jae
pop
dec
inc
dec
fcomp
int
sub
and
xor
std
jge
lods
mov
je
adc
cmc
cmp
clc
inc
cmps
adc
popf
add
das
xchg
loope
repz
scas
jo
mov
movs
imul
add
aad
xchg
add
dec
ss
xor
int3
jo
push
mov
shl
lods
sbb
jp
into
ret
shr
shl
sysenter
or
xor
xchg
mov
and
inc
cmp
cmps
or
hlt
and
push
into
xchg
adc
aad
xchg
xchg
loop
xor
ret
bswap
adc
fstp
pop
out
cmp
ds
xchg
ret
js
mov
arpl
les
imul
fldenv
retf
je
call
mov
ret
or
addr16
pop
mov
sub
push
(bad)
loope
push
pop
mov
not
pop
rcr
leave
jae
mov
push
push
push
in
jmp
xor
test
movs
mov
retf
mov
pop
mov
mov
sub
add
(bad)
js
mov
push
ss
pop
jne
pop
jns
leave
fiadd
in
ret
sbb
jo
sub
lock
or
inc
outs
loope
sub
and
mov
jbe
or
jb
sbb
cmps
pop
leave
fnstcw
push
fld
push
ficom
gs
cmp
ficomp
inc
jp
pusha
sbb
inc
movs
popa
mov
and
add
push
scas
pop
mov
jg
or
fyl2xp1
int3
addr16
int
mov
mov
cli
cli
in
pop
xor
cmp
and
sbb
dec
bound
mul
pop
repz
pop
lods
ss
ret
pop
inc
mov
pop
popf
jle
pop
and
mov
lahf
inc
inc
loope
pusha
mov
outs
(bad)
out
pop
imul
mov
in
(bad)
jno
in
loope
das
fidivr
cmp
sar
enter
add
inc
into
shl
jbe
and
jp
mov
sub
mov
je
mov
shl
(bad)
cmp
or
movs
imul
or
add
sub
cdq
jbe
xchg
idiv
stos
mov
fisttp
xor
sub
sbb
xchg
sub
mov
loopne
adc
adc
jl
pop
and
xchg
stc
jns
inc
mov
dec
(bad)
and
not
shl
(bad)
aas
xor
ss
mov
mov
or
retf
retf
rcl
mov
or
jb
in
pop
mov
repnz
stos
out
mov
mov
imul
fild
jl
jne
je
jmp
sub
add
pop
sbb
dec
xor
cmps
ss
gs
pusha
xor
and
cmp
stos
pop
shr
push
jmp
inc
imul
pop
xchg
(bad)
cmp
sub
adc
icebp
mov
mov
push
pop
xor
lods
xchg
cli
(bad)
aam
push
inc
aaa
sbb
xor
jno
jp
adc
mov
mov
mov
dec
mov
mov
addr16
add
sub
in
int3
xchg
xor
movs
sahf
cmps
cld
push
ja
ds
fidivr
dec
aad
xchg
les
sub
pop
daa
push
jl
(bad)
bnd
call
or
push
jg
scas
mov
xor
mov
inc
jl
xor
pop
sub
fwait
rcl
or
adc
loope
ja
push
cmp
pushw
pop
pop
sahf
and
ret
scas
and
mov
xchg
mov
and
cmps
gs
mov
push
xchg
add
add
int3
addr16
push
inc
xchg
stc
mov
jnp
das
dec
(bad)
sbb
jnp
jmp
and
mov
(bad)
xrelease
sbb
add
je
and
ret
mov
mov
or
retf
jne
cmp
sub
push
mov
or
dec
pop
mov
mov
mov
mov
xor
inc
jbe
in
jle
fnstenv
cmc
fnstenv
(bad)
or
lea
mov
adc
cmp
xchg
jo
lods
mov
movs
jmp
cmp
mov
test
int
push
jle
repnz
ins
stos
and
int
in
push
cmps
ret
fbld
dec
push
std
sub
add
das
pop
push
gs
push
(bad)
mov
dec
and
jb
add
cmp
jmp
test
test
xor
in
movs
xor
sub
ja
push
and
aam
jnp
call
leave
adc
xchg
sub
push
mov
jle
aas
mov
xchg
jo
icebp
inc
ds
mov
not
data16
imul
jg
add
pusha
push
cmp
test
push
mov
jle
sub
jmp
push
loopne
dec
addr16
add
dec
push
mov
loopne
je
fimul
int3
push
jbe
ficom
jmp
or
fldenv
stos
fistp
cdq
mov
mov
les
add
xchg
cmp
sbb
jle
inc
mov
mov
aad
cmp
rcr
lods
retf
jp
pop
pop
sbb
cld
mov
inc
add
mov
xchg
retf
std
xchg
mov
cmps
xchg
xor
clc
or
push
xor
sub
and
mov
cmp
cld
mov
and
add
inc
mov
jmp
fbstp
xor
jecxz
mov
stos
mov
jmp
push
push
retf
outs
push
shl
cmovo
and
xchg
jae
aaa
cmp
fwait
inc
fld
inc
(bad)
std
sub
out
das
fidiv
xchg
mov
clc
xchg
not
sbb
movs
ins
push
pop
into
js
ret
into
rcl
nop
cmp
push
loope
and
shl
push
dec
retf
jo
mov
mov
test
fcom
rcr
rcr
call
xor
(bad)
adc
sti
cmp
mov
add
js
scas
sar
aad
ins
or
mov
mov
mov
jmp
sbb
fiadd
mov
outs
(bad)
daa
fst
fisttp
stc
xor
retf
call
mov
movs
cld
xchg
test
ins
retf
push
pop
shr
stos
lds
dec
scas
sbb
cld
jmp
pop
xchg
xor
int3
ins
xor
jmp
pop
cmp
aaa
scas
cs
clc
add
shr
cmp
or
movs
add
xor
sbb
mov
dec
or
pop
mov
mov
add
xlat
fistp
pop
js
mul
jae
jle
dec
jle
jns
pop
push
in
add
scas
pop
mov
jecxz
imul
sub
xchg
mov
arpl
ret
jo
lea
cdq
repnz
pop
ret
mov
jle
mov
push
aad
inc
and
add
test
mov
data16
cmp
sahf
leave
out
imul
mov
adc
mov
cmp
and
jne
fyl2x
int3
sbb
xor
mov
xor
mov
xchg
dec
xor
retf
mov
loopne
or
sub
mov
sub
sti
ja
int
xchg
add
adc
cdq
fucomp
popf
or
xchg
je
movs
xchg
(bad)
fistp
gs
mov
jb
inc
mov
outs
fwait
inc
jae
mov
dec
adc
mov
lds
mov
out
inc
inc
mov
adc
in
test
cmp
daa
mul
ss
xchg
rol
clc
test
and
inc
dec
leave
enter
cmp
das
xchg
fsub
leave
mov
push
cld
loopne
adc
into
aam
ins
data16
stc
xor
xchg
stos
shl
aas
outs
push
adc
pop
cmc
fld
mov
adc
outs
repz
xlat
sub
cmps
xchg
xor
mov
push
push
leave
cmc
bound
cmp
aas
ins
sti
add
inc
mov
inc
jo
repnz
sbb
(bad)
mov
cli
pop
jge
sub
push
ret
jle
jp
mul
add
adc
mov
sar
rcr
and
inc
push
jecxz
sbb
mov
pop
nop
les
arpl
out
stc
add
aas
fstp
pop
mov
jg
(bad)
push
adc
loopne
mov
push
pop
cld
pushf
mov
aam
shr
into
out
repz
leave
iret
repz
ror
int
fisttp
and
rol
int
adc
adc
jle
imul
jg
repz
xor
rcr
je
sub
add
mov
repz
inc
or
out
ins
movs
retf
mov
shrd
adc
pop
loope
icebp
std
sub
pop
in
jg
es
inc
out
les
loopne
pop
addr16
mov
jmp
sbb
repnz
or
sbb
bound
inc
xor
push
lods
mov
add
retf
push
call
mov
mov
(bad)
call
test
or
adc
jne
retf
stos
in
js
rcl
mov
daa
loope
in
and
and
xor
mov
pop
jl
mov
jmp
imul
les
mov
cwde
enter
and
and
cmp
sub
pop
(bad)
sbb
ficom
mov
out
sub
or
mov
je
sub
pop
into
ficom
mov
test
mov
shl
xchg
sub
pop
out
sub
pusha
mov
xchg
in
es
ror
cli
sub
mov
in
dec
xor
or
arpl
add
repz
xchg
mov
ins
sub
push
jnp
adc
pop
xlat
(bad)
mov
lock
outs
scas
pop
push
adc
push
movsx
test
push
xor
imul
mov
pop
stc
sub
test
into
movs
add
inc
inc
inc
sbb
inc
pop
push
test
push
aas
(bad)
aad
sbb
retf
movs
jmp
jne
shl
aas
popa
inc
cli
ret
je
and
dec
(bad)
jnp
adc
sar
mov
fild
pop
mov
lods
lahf
gs
sub
cmp
(bad)
jle
cmp
sub
push
arpl
call
or
mov
adc
mov
mov
hlt
mov
jg
mov
sbb
es
loopne
dec
and
dec
pop
jmp
loop
data16
sbb
cmc
pop
cmc
sub
test
outs
xchg
dec
mov
cli
ds
pushf
jb
loope
iret
sub
imul
jecxz
std
ins
ss
jbe
popf
test
outs
ds
retf
popa
cs
xor
inc
adc
cmp
mov
pop
cmc
ins
mov
ja
cmp
xor
and
(bad)
mov
arpl
sbb
test
fisttp
and
or
fdiv
and
sbb
arpl
ja
cmp
jns
movs
xor
mov
push
inc
push
dec
push
push
sbb
std
inc
jge
jbe
sbb
sbb
mov
jmp
mov
cmc
dec
arpl
or
xchg
mov
inc
jge
mov
pop
jno
sahf
inc
or
inc
cpuid
add
cli
inc
clc
test
aad
sub
lock
out
(bad)
push
(bad)
lahf
ins
fistp
jle
call
fs
dec
push
sbb
call
mov
jmp
cs
ror
and
pop
gs
cmp
dec
pop
test
push
adc
imul
into
add
dec
addr16
dec
dec
xor
xor
sbb
inc
add
and
sti
call
sbb
loopne
sub
scas
pop
adc
and
in
mov
xchg
jmp
das
jecxz
xchg
out
cmp
mov
fdiv
shl
loopne
hlt
xchg
call
mov
xlat
stos
cmp
jmp
pop
lahf
ror
push
xor
cmp
jnp
das
retf
out
cmps
jge
imul
xor
pop
movs
iret
pushf
repz
jmp
mov
scas
lahf
adc
xor
mov
fwait
mov
cmp
pushf
adc
sbb
and
ins
cmps
dec
sbb
xor
push
popa
inc
dec
lods
adc
cmp
ss
mov
stc
pushf
retf
movs
xor
pop
mov
(bad)
pop
fdiv
xlat
in
aad
xlat
lds
shr
pop
cmps
sub
mov
push
or
repz
es
adc
hlt
fsubr
xchg
inc
sub
stos
sub
mov
cmp
std
pop
jmp
cmp
adc
mov
xchg
mov
dec
fcom
xchg
and
mov
xchg
call
rcl
pop
cld
xchg
fs
loopne
mov
and
ss
pop
ror
xlat
mov
push
ins
sbb
jns
cmps
push
and
push
add
cmp
lea
push
lds
push
mov
push
dec
pop
shl
(bad)
rol
adc
xor
jge
add
mov
ret
cld
push
mov
mov
rcl
icebp
fst
outs
pop
inc
out
sbb
movs
neg
add
pop
dec
and
add
mov
sub
popa
cmp
cmp
pop
(bad)
dec
xchg
mov
iret
ins
xchg
push
pusha
pop
push
mov
stc
pop
cld
or
outs
(bad)
sub
test
jp
jmp
inc
repz
inc
xchg
cs
fdivr
and
scas
jg
jmp
add
jp
xchg
pusha
xor
mov
rcr
pop
mov
mov
cmp
xor
add
push
call
mul
imul
push
mov
sub
aas
mov
sbb
repz
ins
inc
mov
lahf
adc
sub
xchg
(bad)
mov
fsub
cld
shl
fs
push
push
sbb
cmc
iret
or
sub
cmp
and
dec
xor
ffree
and
std
and
jno
sbb
fsub
(bad)
mov
push
je
inc
mov
icebp
inc
inc
ss
daa
iret
mov
iret
and
mov
(bad)
adc
jns
jle
popa
fisubr
ret
fsub
sti
jns
popf
and
loopne
dec
inc
mov
sbb
push
mov
rcr
ficomp
ss
call
sub
cs
rcl
in
mov
cmovnp
scas
adc
jmp
cmc
(bad)
aam
push
mov
icebp
ret
lods
adc
(bad)
neg
idiv
aaa
jae
fsubr
fcomp
loopne
xor
rol
fstp
lds
(bad)
adc
and
in
fist
aas
mov
mov
popf
ss
cmp
arpl
test
ret
repz
outs
lods
mov
or
aad
xchg
push
test
sbb
out
xor
add
cmps
jle
jne
mov
sub
int3
xchg
mov
inc
xchg
pop
push
lds
(bad)
lock
cmps
test
stos
daa
add
xchg
inc
cs
push
ficom
das
mov
test
dec
xchg
je
xor
pop
call
data16
add
popa
pop
add
retf
inc
pop
mov
test
ins
imul
mov
push
ss
push
(bad)
push
cmp
mov
pop
fwait
ja
pop
out
push
xchg
lods
retf
and
xor
sub
sub
loop
pushf
sbb
xor
jne
sar
push
loopne
out
dec
stc
clc
or
dec
test
mov
sbb
jmp
cli
xor
add
pop
xor
out
mov
pop
lods
cwde
fimul
test
adc
shl
daa
arpl
(bad)
das
mov
sub
jmp
xor
mov
push
mov
js
fst
das
sbb
jge
lods
mov
mov
adc
cwde
xchg
outs
(bad)
mov
jnp
into
ficom
push
ins
fstp
fs
xchg
dec
out
adc
imul
mov
mov
(bad)
dec
int
pop
in
sbb
(bad)
in
(bad)
jl
lea
mov
mov
sahf
mov
dec
pop
push
jne
scas
addr16
sub
out
pop
pop
xlat
add
mov
push
mov
iret
mov
outs
inc
ret
or
jnp
pop
aad
in
popa
jp
shl
test
add
mov
loopne
pop
push
jge
xor
mov
popf
push
push
cmp
scas
mov
fadd
adc
push
cmp
xor
shl
dec
call
pop
(bad)
jbe
jmp
inc
loop
clc
add
mov
dec
lods
cmp
add
cmp
ret
das
add
cmp
mov
xchg
xchg
cli
js
leave
loopne
stos
jns
sub
ror
fild
mov
lds
push
(bad)
out
movs
and
mov
test
scas
sahf
shl
mov
test
xchg
aad
mov
pop
lock
push
lods
xchg
mov
imul
xchg
xor
sbb
neg
xor
imul
ds
xchg
pop
adc
xchg
repz
bswap
stos
dec
(bad)
xchg
cmp
in
or
xor
jo
xor
and
push
pusha
shr
rcr
mov
xchg
or
push
push
pop
xor
add
fisubr
or
sbb
in
aaa
jmp
dec
cmc
sbb
mov
pusha
sub
retf
mul
mov
mov
mov
(bad)
fnstenv
pop
cvtps2pi
jp
jle
pop
je
inc
shl
rcr
cmp
cmp
xchg
shr
add
in
xor
xchg
cmc
xlat
or
fsub
xor
(bad)
cmp
or
icebp
lods
cli
mov
xlat
mov
lods
(bad)
repnz
movs
shl
fld
retf
mov
jae
sahf
mov
aas
lock
aas
sbb
out
aad
fsubr
xchg
daa
sub
add
clc
(bad)
in
push
mov
adc
xchg
fwait
scas
(bad)
or
in
(bad)
xlat
in
and
dec
retf
cmc
shl
dec
shr
out
lock
sbb
sahf
sti
outs
dec
pop
int
mov
pushf
xchg
imul
in
inc
pop
in
lahf
or
add
fisttp
mov
and
pop
repz
in
psadbw
mov
fcmovnbe
mov
cmps
bound
fmul
das
add
nop
ficomp
ds
pop
pop
mov
push
out
fdivrp
in
fbstp
sub
inc
(bad)
mov
call
loope
push
into
lahf
xchg
mov
jg
outs
std
mov
(bad)
push
fsubr
jbe
add
add
mov
test
and
imul
dec
and
ror
test
in
loopne
icebp
std
test
pushf
pop
addr16
jnp
sahf
adc
mov
test
mov
out
rol
addr16
sbb
fwait
cmp
jmp
jns
sub
mov
pop
std
mov
add
call
dec
push
inc
(bad)
or
dec
out
loop
inc
cdq
dec
mov
int
jmpw
(bad)
mov
inc
add
and
and
je
aam
adc
mov
push
cmps
inc
xchg
out
sbb
idiv
mov
dec
iret
cmps
push
cwde
mov
sbb
sbb
out
iret
or
lahf
movs
xlat
and
js
dec
out
sub
arpl
hlt
int3
mov
movs
ret
and
or
cmps
sub
pop
jmp
stos
dec
int
cmp
jle
adc
pop
and
sub
mov
adc
push
mov
xchg
je
mov
lock
push
fiadd
mov
je
adc
xchg
mov
sbb
mov
daa
lahf
int
out
int3
add
push
dec
daa
push
in
ds
movs
pusha
std
in
jb
add
enter
xchg
and
rol
pop
jge
mov
dec
jmp
mov
fst
pop
jns
fwait
cld
dec
and
ss
inc
push
push
out
dec
sbb
(bad)
(bad)
cmps
dec
pop
cs
(bad)
inc
lea
push
sbb
mov
jb
adc
push
outs
cmp
stos
bound
fst
cmp
and
adc
mov
dec
inc
repz
and
mov
lods
in
add
push
xor
inc
or
popf
fisubr
cmp
cmps
mov
lods
cmps
ins
sbb
retf
pop
cmp
(bad)
sbb
aaa
push
addr16
sbb
xlat
call
jo
xchg
adc
xchg
imul
repz
(bad)
div
xchg
movs
lea
fiadd
leave
ficomp
mov
adc
lods
jno
sub
test
cli
movs
dec
fwait
icebp
inc
pop
sbb
fnstsw
sbb
xor
addr16
test
or
in
dec
sbb
dec
cmp
mov
inc
xchg
dec
fs
and
test
popa
cwde
call
push
mov
and
mov
movs
xchg
and
sub
fucomp
xchg
dec
test
xchg
mov
not
in
sar
or
aad
jl
jbe
lock
mov
add
push
add
test
lahf
daa
fs
jmp
cmps
jmp
imul
out
pop
cmp
mov
arpl
jb
dec
pop
jne
xor
mov
or
or
add
iret
mov
push
push
pop
adc
mov
mov
aaa
pop
movs
dec
fldenv
fidiv
std
les
test
cdq
mov
das
push
popa
pop
int
enter
add
std
(bad)
int
dec
sub
pop
arpl
mov
aad
pop
inc
mov
xchg
int
inc
shr
ret
jnp
scas
jns
loop
ja
cmp
push
dec
mov
push
mov
lds
sub
sub
mov
hlt
sbb
mov
jle
push
sar
sbb
call
inc
pusha
sub
icebp
jbe
jle
data16
jl
xchg
lods
hlt
mov
fistp
in
or
mov
cmps
mov
jge
add
call
and
in
daa
mov
xchg
fnsave
mov
xlat
ja
dec
push
icebp
xchg
add
ret
or
data16
push
popa
push
lods
mov
sub
shl
push
rcr
cmp
lds
mov
clc
fcmovnu
sahf
hlt
dec
add
mov
(bad)
pop
sub
add
pop
and
int
jns
dec
add
nop
jbe
cli
loopne
fistp
mov
mov
or
fldcw
cmp
pop
das
xor
xor
pop
sub
mov
imul
adc
loop
mov
pop
push
sub
clc
xchg
mov
stc
push
cli
call
pushf
popf
lods
pop
jecxz
xchg
xlat
outs
or
rcr
add
dec
mov
pop
pop
xchg
scas
mov
cmp
stos
mov
sahf
dec
jecxz
jp
es
mov
das
in
out
mov
fsubrp
rcr
jp
pop
adc
pop
loop
mov
jge
mov
pop
cdq
push
or
in
or
popf
js
sbb
dec
(bad)
nop
push
cmp
dec
(bad)
xor
add
les
lahf
sub
sbb
shr
jae
fist
add
pop
out
cmps
mov
sti
in
add
cdq
test
mov
jle
outs
adc
mov
xchg
cmps
inc
sub
xor
int3
fcomp
sahf
shl
mov
mov
mov
shr
sub
mov
xor
pop
stos
pop
stc
gs
lods
xchg
outs
and
jl
dec
mov
adc
repnz
arpl
rcl
hlt
mov
add
dec
ss
jnp
test
in
imul
mov
jne
neg
addr16
inc
enter
out
xchg
bound
and
pop
enter
out
sub
cmp
sbb
out
aas
mov
cmc
sub
bound
push
mov
in
mov
jp
jnp
call
clc
inc
push
cmps
xor
jl
mov
cdq
neg
xchg
test
cmp
xchg
int
pop
sar
lahf
adc
sub
popf
sbb
cmp
inc
aam
pop
xchg
xchg
xchg
lea
push
xor
imul
push
pop
loopne
out
fstp
dec
call
shl
inc
adc
mov
bound
dec
add
aaa
shl
mov
mov
xchg
cmp
fcomp
ins
mov
xchg
mov
test
in
and
sub
xlat
lock
cs
loop
or
cmc
xor
stos
jo
inc
cs
and
adc
lahf
xor
dec
into
sub
test
push
scas
jle
ins
ins
xor
mov
sbb
js
sbb
mov
lock
xchg
repz
fild
cmp
jns
lds
(bad)
ins
(bad)
fisttp
xchg
jb
sbb
pusha
xlat
ror
push
or
jl
add
dec
sbb
mov
call
adc
push
add
and
sbb
into
and
movs
enter
cmp
xor
(bad)
jae
jbe
cmp
das
ds
xor
sbb
xor
loopne
stos
sbb
sbb
jns
(bad)
div
pop
pop
mov
iret
push
sub
dec
out
fwait
xor
ret
xchg
fnsave
test
push
adc
aad
ja
pop
mov
jmp
xchg
pop
fiadd
dec
pop
loopne
shl
xlat
adc
cli
mov
sub
mov
adc
sbb
aaa
cmp
xchg
dec
cmp
xlat
imul
xor
xor
repz
(bad)
xchg
fwait
dec
nop
loope
dec
xor
test
sbb
xor
rcr
or
cmp
lahf
pop
ins
jbe
inc
jb
addr16
xor
scas
popf
dec
jmp
out
sbb
jmp
inc
sub
lahf
xchg
cli
mov
or
repnz
in
scas
and
push
xchg
inc
es
out
clc
ins
push
daa
cwde
cmp
xchg
and
inc
aad
mov
rcpps
out
in
out
data16
mov
push
ret
mul
sbb
outs
cs
add
or
jb
in
call
or
jb
or
jecxz
add
popf
add
sbb
push
push
jne
xor
mov
std
pop
fild
xor
sbb
xchg
fs
sub
(bad)
jle
or
sub
sar
push
(bad)
test
dec
outs
sbb
cmps
mov
dec
pop
fisttp
or
inc
fmul
jmp
enter
push
retf
mov
fwait
adc
push
out
mov
xor
inc
sub
cmps
jmp
mov
cmp
js
push
add
mov
sub
mov
aaa
mov
xchg
inc
test
repz
cmps
jg
mov
out
js
cli
push
pop
fisub
sub
push
fcom
movs
aas
ss
shl
imul
or
out
loop
test
xor
jns
push
mov
int3
or
jg
push
test
sbb
cdq
xor
push
ins
cdq
dec
sub
push
scas
cmp
cmp
int
pop
ds
push
or
mov
xchg
aaa
fldenv
rcl
pop
ja
fwait
movs
leave
repz
retf
ja
loope
cmps
lods
(bad)
ja
loope
mov
int
out
pop
xchg
mov
xor
mov
inc
adc
sbb
dec
lea
cmp
push
jbe
ja
or
and
call
aaa
mov
cmc
adc
cmps
and
or
pop
add
pop
out
mov
mov
sbb
hlt
xchg
jae
dec
xchg
pop
ja
aas
jmp
mov
or
cmp
stc
push
stos
mov
loop
stos
pop
mov
xchg
fidiv
pop
fdivrp
into
add
mov
jp
cmp
dec
push
sbb
cmc
pop
xor
push
jo
sub
(bad)
(bad)
pop
je
int
cmps
xor
out
cwde
int
pop
sub
aam
call
retf
movs
fdivr
and
push
mov
pop
inc
shl
pop
clc
sub
out
cmp
(bad)
stos
fst
mov
ffree
adc
leave
fs
hlt
push
mov
pusha
test
push
loopne
pop
clc
fisubr
jnp
scas
(bad)
iret
jl
(bad)
dec
shl
dec
ss
ror
and
push
push
outs
int3
add
jg
cld
out
test
int
lock
inc
rcr
push
mov
mov
jbe
bound
mov
sbb
pop
aas
ror
inc
ins
das
or
not
push
leave
push
jle
aad
inc
in
mov
call
xor
gs
lods
repnz
cli
iret
retf
ja
push
add
aaa
int
ins
mov
dec
fisttp
stc
rcr
stc
fld
inc
aaa
dec
je
call
int
jl
xchg
and
and
pop
jno
cwde
dec
jp
cdq
popa
shl
push
inc
aas
ins
sub
and
pop
pop
sbb
or
pop
fs
mov
retf
mov
nop
mov
scas
push
cmc
pop
pop
sub
add
mov
adc
jle
add
cdq
aam
out
adc
fld
pop
fwait
stos
sbb
and
cmp
xchg
inc
ret
mov
loope
cdq
xor
jns
jo
call
fsubp
or
mov
mov
xchg
mov
adc
loope
fld
xor
js
stos
mov
stc
adc
add
lea
inc
mov
movs
int3
adc
add
sub
jecxz
das
fidiv
pop
ret
xor
(bad)
jnp
adc
fistp
in
pop
lea
pop
inc
adc
xor
lahf
pop
xchg
mov
mov
sub
pushf
lahf
add
pop
hlt
push
and
add
xor
hlt
xor
xlat
push
jle
jno
xlat
icebp
push
push
fdivp
fnstenv
in
aaa
shr
xor
daa
and
int
lahf
cmc
or
xor
outs
sub
in
push
cmp
je
dec
clc
xor
imul
push
ror
stos
gs
jp
pop
jne
int3
mov
pop
jae
push
push
xchg
xor
jns
cmp
xchg
nop
inc
push
mov
out
xchg
pop
cmp
sbb
and
lea
out
and
outs
loope
pop
fstp
out
mov
inc
(bad)
sbb
(bad)
cld
imul
in
inc
sbb
cmp
mov
int3
in
jge
or
add
adc
xlat
lods
mov
push
pushf
outs
scas
pop
(bad)
adc
lahf
sar
(bad)
cmps
repz
and
in
sub
mov
(bad)
rcr
add
adc
sub
retf
movs
mov
push
pop
into
ret
bound
js
push
ror
fisub
mov
stc
js
pop
jge
stc
cmp
bound
dec
pop
jns
popf
aas
icebp
scas
shl
dec
retf
xchg
out
sahf
fst
sbb
(bad)
add
xchg
pop
in
sbb
inc
int3
or
mul
nop
repz
shl
push
inc
jo
(bad)
xacquire
sub
pusha
jl
mov
mov
pushf
fnstsw
movs
push
movs
push
mov
cmc
jb
mov
jne
xchg
xor
push
xchg
aaa
dec
out
mov
cmp
das
push
icebp
inc
sar
into
adc
pop
push
push
sti
stc
fimul
inc
lds
aaa
cmp
out
mov
or
fmul
push
test
ret
ins
adc
sub
out
bts
(bad)
icebp
xchg
jns
add
cmps
scas
mov
add
int
mov
inc
fdiv
mul
sbb
pop
xor
xlat
jno
xchg
movs
and
push
mov
xor
cs
pop
pushf
idiv
mov
fsub
(bad)
stos
mov
gs
sar
adc
loopne
cmp
loope
mov
hlt
outs
call
lahf
ja
daa
mov
aam
je
mov
aaa
cmp
fdivr
pop
jmp
dec
sbb
push
leave
pop
push
dec
in
jo
and
sbb
test
push
pushfw
mov
jb
mov
dec
jnp
pop
movs
jb
xchg
mov
add
sbb
sbb
jne
mov
ror
xchg
mov
imul
jmp
sbb
mov
xor
push
cmc
js
mov
ins
and
jne
test
push
mov
mov
mov
out
cmp
ss
scas
clc
pop
out
cdq
nop
push
dec
lea
mov
jb
xor
rcl
mov
jne
mov
adc
jge
rol
xor
mov
xchg
mov
inc
mov
mov
pop
test
cmps
lock
xchg
mov
mov
add
mov
sbb
popf
loopne
and
pop
add
outs
xor
jbe
add
scas
xchg
icebp
arpl
xor
inc
clc
rol
push
jb
rcl
cmc
out
jnp
and
inc
or
mov
sbb
mov
push
add
jne
sub
mov
add
cmp
sub
cli
outs
cmp
mov
and
in
jno
bnd
cmps
fwait
and
scas
sbb
dec
xor
test
loope
ror
fsubr
test
mov
jmp
dec
xchg
shr
ss
lahf
pop
mov
loopne
pop
adc
call
mov
pop
ss
bound
mov
fdivr
loopne
(bad)
lock
inc
test
and
xchg
fadd
dec
mov
ds
pusha
lahf
xor
ror
outs
inc
mov
add
sub
cdq
push
fidiv
int3
jae
inc
adc
pusha
or
fist
xchg
mov
test
lahf
jb
(bad)
cld
xor
cli
mov
scas
rol
fst
sbb
and
retf
inc
into
jns
loopne
mov
adc
cmps
mov
push
(bad)
loop
push
mov
xor
rcr
es
inc
sti
sbb
xchg
sub
stos
jle
mov
and
cmp
pop
or
jo
add
jb
in
lock
dec
loopne
pop
retf
pop
into
call
retf
xlat
cli
mov
test
jbe
mov
addr16
out
add
adc
xor
adc
fwait
or
push
push
xchg
shr
(bad)
push
and
jecxz
or
cmp
mov
inc
pop
addr16
(bad)
cmp
add
add
scas
loope
mov
jns
sub
sub
int
out
adc
movs
and
jp
dec
cmp
mov
adc
xor
dec
outs
jmp
fisttp
fld
clc
cli
dec
loopne
retf
dec
call
mov
and
cmp
test
xchg
lods
mov
mov
out
dec
shr
mov
mov
mov
mov
xchg
cmps
jl
shl
jmp
into
mov
inc
fwait
push
popa
and
fsubr
retf
pop
push
ds
xor
mov
adc
mov
or
sbb
(bad)
or
rol
fs
rcr
pop
gs
sub
out
and
xor
inc
mov
push
mov
pop
outs
sbb
mov
outs
jle
lds
pop
xlat
jecxz
jecxz
imul
pusha
ret
inc
dec
xchg
popf
mov
fadd
das
out
aaa
imul
lds
push
jle
in
add
add
loopne
test
scas
rcr
(bad)
fld
sbb
inc
test
dec
(bad)
pop
sub
xchg
(bad)
fisubr
jecxz
adc
dec
loopne
inc
xchg
jge
mov
bswap
jp
fmul
out
loop
mov
gs
jmp
dec
stc
inc
stos
inc
jnp
test
pop
sbb
sbb
push
mov
test
push
jl
imul
(bad)
not
shl
out
ins
cmp
mov
pop
push
sub
sub
cld
aam
cli
mov
cmps
add
js
lods
ds
sbb
stos
in
sub
sub
stos
push
cwde
push
add
test
(bad)
lahf
out
mov
retf
xchg
ret
stc
jmp
xchg
shl
loop
cmps
mov
cmp
mov
daa
(bad)
loope
(bad)
in
pop
jae
fdivp
sbb
and
cmps
mov
lods
(bad)
in
dec
jns
lock
ss
mov
int
rcl
aas
sub
push
jg
push
xchg
mov
fld
pop
xchg
outs
mov
xchg
shl
leave
jns
inc
dec
mov
jb
inc
mov
jb
jecxz
push
jp
imul
sub
gs
test
dec
jb
imul
loop
xchg
rcl
mov
mov
ret
cmps
push
cmp
data16
add
mov
sahf
mov
test
cwde
add
pusha
xchg
xchg
cmp
jbe
jo
mov
aam
call
inc
add
stos
sub
or
clc
or
sbb
dec
mov
aam
or
in
cwde
mov
imul
mov
aam
inc
dec
out
retf
push
and
sbb
pop
jp
(bad)
cmp
mov
int3
mov
out
pop
nop
mov
inc
sub
(bad)
jl
sti
scas
mov
pusha
sbb
push
xor
add
mov
(bad)
pop
mov
cmp
fbld
xor
dec
clc
mov
inc
and
mov
or
cwde
pushf
push
push
les
jp
lahf
bound
mov
xlat
loopne
js
das
cld
xchg
push
cmp
mov
xchg
test
xchg
out
push
mov
and
repnz
pusha
mov
mov
test
bound
xor
xchg
shl
stos
aad
movs
(bad)
pop
mov
mov
das
inc
cmp
sbb
stos
lds
cs
jecxz
pop
movs
mov
xlat
sub
gs
xchg
sbb
pop
push
xchg
scas
pop
inc
(bad)
(bad)
(bad)
imul
push
out
inc
xchg
es
rol
jmp
test
push
pop
lock
and
out
dec
pop
mov
neg
pop
arpl
mul
push
inc
sbb
jne
jecxz
sbb
jno
cmp
cmp
mov
mov
or
cwde
mov
add
pop
shr
jl
fcmovu
fistp
jmp
mov
inc
lea
sbb
out
pop
dec
mov
dec
hlt
xchg
cmp
int3
add
mov
shl
test
pushf
pop
sbb
mov
stos
test
mov
xor
jbe
xchg
adc
aam
sbb
sar
and
(bad)
and
pop
pop
mov
fistp
hlt
push
push
lock
sub
retf
cmpps
shl
and
jne
cmp
pushf
pop
jmp
in
xor
dec
pop
xchg
js
jge
and
or
pop
call
jl
adc
dec
shr
push
fcom
inc
rol
dec
push
dec
shl
mov
jge
test
into
push
jecxz
movs
push
lods
inc
inc
jns
pop
loop
mov
mov
lds
hlt
ret
adc
stos
rol
test
jl
out
xchg
xchg
cwde
pop
ficomp
dec
jns
push
aas
iret
retf
xchg
cmps
lock
push
(bad)
iret
pop
les
loopne
dec
aad
push
cmc
pop
sti
(bad)
repnz
int3
or
or
ror
jecxz
iret
mov
xlat
out
mov
sbb
imul
push
movs
ret
addr16
(bad)
in
jl
lock
inc
fwait
ss
mov
dec
sbb
adc
in
popa
adc
or
adc
scas
and
sub
jp
(bad)
jb
or
ret
adc
inc
out
scas
fwait
mov
test
fnsave
mov
leave
xchg
repnz
shr
jle
or
mov
dec
lea
mov
imul
test
sahf
clc
aad
(bad)
adc
movs
cs
cmps
mov
imul
add
hlt
xchg
cmp
int3
idiv
inc
cmp
cs
int3
cmp
pop
cmp
out
push
xor
mov
call
jp
arpl
rcl
add
push
jo
jge
or
ds
(bad)
bsf
scas
jne
loope
or
jmp
scas
dec
add
adc
test
pop
sub
dec
sahf
xor
add
jecxz
mov
push
xchg
out
inc
rcl
jl
sub
sub
mov
ret
movs
sub
and
lds
add
lahf
je
scas
inc
mov
cs
adc
jmp
in
dec
hlt
push
retf
mov
(bad)
loope
imul
nop
mov
xor
addr16
dec
clc
dec
pop
test
mov
mov
inc
mov
cmc
sbb
cmp
daa
mov
mov
cmc
retf
sahf
push
test
dec
shl
sar
xor
in
outs
pop
fnstsw
push
push
mov
(bad)
ror
ins
fldcw
xor
pop
stos
mov
popa
cmp
je
pop
xchg
mov
adc
sbb
in
movs
pop
cmp
sbb
mov
jb
and
jbe
lock
and
fcom
scas
pop
fcmovnb
das
lds
loopne
xchg
inc
pop
bound
jns
(bad)
or
mov
pushf
and
jp
xor
inc
inc
popa
jg
sbb
dec
ja
add
in
sar
ss
add
in
sbb
shl
ins
nop
adc
xchg
dec
jecxz
jo
xlat
mov
ss
test
rcr
cmps
shl
sub
push
cmps
and
push
sbb
xchg
pushf
mov
inc
movs
pop
inc
ret
lahf
add
push
fbstp
or
addr16
add
sti
pop
jl
mov
lods
or
repnz
xchg
mov
sub
push
push
mov
inc
sub
mov
icebp
in
fld
mov
ins
adc
inc
jp
or
cs
add
mov
pop
outs
mov
push
gs
je
enter
cmps
add
sahf
and
jmp
and
icebp
mov
mov
jle
std
cmp
in
mov
jns
sub
push
outs
jp
adc
mov
test
gs
cmp
pushf
mov
sub
aaa
xor
stos
push
inc
add
or
mov
jl
mov
arpl
or
sub
mov
repz
cwde
dec
push
pop
and
fimul
cmp
outs
xchg
inc
mov
sar
pushf
clc
retf
test
bound
out
xor
xchg
loop
sub
bound
mov
sbb
jae
loopne
adc
popf
retf
jno
data16
mov
dec
pop
mov
push
jmp
jmp
jmp
lahf
or
mov
dec
mov
imul
adc
(bad)
cwde
pop
fdivr
bound
adc
test
mov
pop
and
mov
sbb
or
push
mov
sub
add
shl
ror
mov
je
xchg
lds
repz
nop
into
es
int
sti
push
scas
adc
or
xor
push
mov
das
xor
pusha
push
es
mov
jmp
jge
fwait
cmps
cmps
pop
je
std
dec
cmps
mov
test
add
dec
cmp
clc
iret
pop
adc
imul
movs
repnz
cmp
inc
scas
aad
add
xchg
enter
add
mov
add
pusha
pop
sti
jnp
push
test
xor
(bad)
hlt
cli
ss
sbb
addr16
dec
cmp
inc
push
push
and
lahf
(bad)
pop
xchg
mov
add
and
enter
outs
xor
sub
lahf
cmp
adc
push
das
rol
mov
pop
sbb
nop
and
das
and
lods
test
xor
rcl
mov
into
or
jmp
popf
dec
jecxz
add
dec
mov
js
sbb
popa
add
dec
je
xor
sbb
pop
cmp
cmps
aam
ror
sbb
mov
out
out
loopne
or
cmps
pop
sti
lods
pop
mov
push
ins
test
sbb
cwde
push
stc
adc
sub
cmc
test
je
adc
data16
ds
pop
jmp
dec
adc
gs
push
xor
stc
add
(bad)
sub
sete
mov
in
pop
mov
or
jmp
mov
and
outs
sbb
das
sub
push
jp
ret
sub
popf
adc
mov
xor
jecxz
dec
stos
adc
outs
fnsave
jo
xchg
mov
outs
stos
xchg
inc
xor
mov
cs
mov
and
sti
std
mov
mov
(bad)
imul
push
in
dec
adc
inc
cmps
inc
jmp
clc
mov
imul
ret
push
push
(bad)
add
fwait
push
sub
push
jmp
xchg
push
movs
sbb
jle
and
jb
cld
mov
nop
mov
test
sar
or
and
push
inc
in
test
retf
ret
lds
and
rol
or
(bad)
outs
lds
mov
repz
out
mov
jb
les
pusha
pop
popf
nop
test
or
mov
add
enter
xchg
cmps
jno
dec
dec
or
shr
and
ret
cmp
xor
das
sar
or
aam
sti
(bad)
mov
or
jp
cmp
inc
jecxz
arpl
adc
xchg
call
pop
aas
in
cld
retf
movs
jle
push
and
cmp
cmp
pop
loop
pop
and
stos
push
cmp
pop
cmp
xchg
cmp
add
xor
dec
lods
adc
sahf
inc
inc
lea
cmp
cmp
(bad)
nop
jmp
popf
jne
sub
jno
or
fld
in
pop
fcom
fild
test
stos
xor
xor
stos
fsubr
imul
fnstcw
mov
rcr
cli
pop
mov
cmps
xor
das
and
mov
jo
cmps
push
and
rcr
mov
fucomi
cli
cmps
in
mov
cmp
cmc
sbb
ja
inc
std
std
push
not
xor
inc
movs
inc
pop
daa
sub
sub
or
lsl
imul
jmp
ins
push
push
dec
or
leave
fucom
sbb
pop
imul
and
push
sbb
mov
dec
gs
add
loopne
test
(bad)
mov
pop
neg
pop
mov
ror
inc
int3
jge
xchg
lock
jo
or
inc
xor
xor
pop
dec
sub
lods
scas
pop
retf
cli
paddd
ret
mov
sub
mov
mov
mov
or
int3
pop
lock
jmp
jbe
dec
shr
push
movs
cli
mov
inc
out
(bad)
rcl
pop
sub
push
retf
aad
iret
scas
dec
ds
int
adc
ss
je
xor
jecxz
(bad)
js
(bad)
arpl
mul
pop
mov
ins
mov
fs
push
add
jp
inc
gs
cwde
loope
mov
sahf
out
ja
inc
adc
nop
lds
(bad)
pop
icebp
cmp
adc
mov
out
sbb
adc
in
inc
jo
mov
stos
adc
adc
test
test
jmp
and
add
sbb
ins
aaa
sbb
lea
adc
mov
jp
adc
inc
add
xchg
aam
push
rol
pop
jge
xchg
xchg
pop
dec
lds
cmp
sub
fisubr
frstor
mov
fstp
arpl
pop
mov
fcomp
jbe
fdivp
shl
out
ins
push
xchg
add
sub
adc
(bad)
addr16
lods
jno
hlt
jg
out
sub
mov
ins
pop
sbb
add
cmp
or
dec
sahf
(bad)
or
cmps
sbb
pop
push
jl
push
icebp
aad
arpl
inc
inc
hlt
jmp
lock
shl
push
les
or
xchg
aaa
nop
out
mov
and
cmp
jg
ret
xchg
pusha
hlt
int3
test
jecxz
inc
mov
mov
int3
jp
mov
adc
jmp
gs
or
push
push
in
ins
out
stc
xor
dec
pusha
sahf
mov
and
pop
test
jle
mov
xchg
mov
popf
cmp
mov
out
clc
cmp
mov
xor
in
add
call
pop
mov
mov
sbb
jo
pusha
pop
push
adc
push
inc
xor
fisub
call
push
mov
mov
adc
out
or
stos
push
call
add
or
pop
xlat
ja
mov
loopne
pop
sub
mov
sub
sar
pop
in
(bad)
jmp
icebp
adc
pop
or
jl
repz
rcl
push
xchg
dec
dec
push
pop
mov
cdq
ficomp
das
and
ins
dec
xor
cmp
mov
imul
fcomp
add
call
sub
(bad)
fisub
cwde
pop
js
shl
aas
ja
mov
cmc
aad
cmc
xor
dec
lods
xor
dec
mov
les
and
(bad)
in
or
repz
mov
sar
ret
daa
push
mov
xor
les
mov
pop
mov
es
jae
(bad)
push
stc
mov
test
sbb
xchg
xchg
jo
xor
or
xchg
pop
popf
pop
cmps
shr
sti
retf
xor
mov
jecxz
mov
das
sbb
out
jno
xor
jecxz
fsub
pusha
xor
pop
mov
push
ror
add
add
jle
mov
adc
mov
mov
inc
xor
pusha
scas
mov
fimul
daa
dec
mov
aam
in
sbb
outs
dec
or
sbb
ja
push
jge
repz
push
fild
fldcw
cmc
in
fdivp
repz
jl
fs
fisub
inc
outs
adc
sub
lahf
into
popf
jbe
xor
jno
and
sbb
push
je
inc
jb
xor
jo
mov
add
mov
and
pop
sub
and
fcomi
pop
lock
inc
aaa
(bad)
stc
mov
sbb
imul
adc
pop
lods
mov
mov
mov
out
xchg
jge
mov
ins
inc
sbb
mov
cdq
test
xor
leave
adc
notrack
retf
test
push
pop
or
adc
mov
not
sar
movs
cli
jle
push
sar
push
clc
push
and
inc
fwait
push
sbb
aam
mov
sub
in
adc
gs
xlat
push
test
repnz
mov
pop
in
into
jmp
xor
(bad)
pop
push
mov
ds
data16
and
rcr
push
cmp
lds
xchg
adc
xchg
shr
ins
sar
sub
inc
jbe
lahf
retf
jg
push
xlat
(bad)
sub
aas
xor
repnz
(bad)
ins
repnz
imul
retf
cmps
mov
dec
mov
pop
mov
scas
loope
fidiv
cwde
nop
out
rcl
dec
jp
scas
retf
xchg
jl
not
fxch
shl
call
enter
pop
das
cdq
sbb
(bad)
nop
or
repnz
sub
shl
push
jecxz
mov
mov
lds
xchg
je
int3
aad
fs
cmc
adc
scas
xor
lahf
cmp
fs
test
or
nop
sbb
psllw
lods
pop
xchg
cmp
jo
call
dec
sbb
pop
jno
mov
pop
cmp
or
adc
iret
gs
jl
out
movs
adc
mov
stc
in
cmp
push
(bad)
mov
dec
les
sub
sub
jmp
cs
(bad)
xchg
mov
xor
fadd
or
cmps
mov
sbb
push
pop
mov
xchg
jle
cli
fistp
out
shl
xchg
aas
jae
adc
xor
lahf
xchg
addr16
push
jae
fst
push
xchg
loop
cli
test
pop
mov
pop
xor
ror
sub
sahf
cmp
js
ret
jb
pop
pop
mov
out
push
in
fst
fldl2t
pop
lods
pop
shl
idiv
outs
gs
mov
mov
in
mov
mov
jecxz
hlt
int
push
sbb
jmp
push
and
out
mov
scas
lds
in
jbe
shl
or
dec
xchg
jg
adc
sub
hlt
xchg
rol
movs
les
add
in
mov
push
test
mov
cwde
call
lods
ja
jno
loopne
inc
retf
addr16
(bad)
pop
and
xlat
cmp
adc
fdivr
inc
ret
fdivp
test
pop
loop
aam
(bad)
repz
cs
pop
cs
rcl
or
add
xor
pop
inc
stc
int3
movs
retf
mov
and
jnp
inc
out
mov
cld
dec
jbe
dec
pop
fnstsw
pop
mov
xlat
sub
in
ret
jne
pop
das
cmc
dec
inc
(bad)
add
pop
add
push
cmp
ins
(bad)
clc
(bad)
shr
sbb
cs
jno
call
xchg
test
and
cld
dec
mov
mov
pop
adc
mov
adc
stos
dec
mov
push
in
cmp
and
cwde
(bad)
fld
pusha
inc
jg
rol
mov
addr16
dec
imul
(bad)
push
inc
push
pop
or
and
stos
int
add
jbe
push
out
lock
push
jge
mov
ins
mov
cmps
mov
push
(bad)
cmc
sbb
xlat
rep
jl
(bad)
hlt
add
sbb
dec
mov
fwait
inc
cmp
mov
stos
outs
rcl
fsub
push
out
push
xor
xor
(bad)
mov
rol
stos
mov
sbb
cmp
test
mov
push
push
jle
inc
outs
mov
inc
push
push
daa
data16
adc
data16
xor
ds
aad
jp
lock
lds
xchg
(bad)
rcl
add
les
loope
rol
inc
aaa
pusha
rcl
ret
fmul
inc
sub
test
repz
leave
paddsb
das
xchg
nop
and
and
jae
movs
int3
jo
or
inc
adc
ins
aam
lods
fisub
mov
shl
adc
sub
mov
in
rol
mov
cmp
pop
mov
stc
arpl
out
out
fmulp
pop
cmp
xchg
pop
sbb
xor
jle
mov
jge
inc
dec
or
sub
ss
cmc
and
(bad)
cmc
cmps
push
push
fwait
xor
test
mov
mul
shl
not
out
cli
sub
stos
fmul
sbb
jle
jmp
cmps
jl
lea
dec
adc
sbb
andnps
pop
mov
in
cmp
(bad)
lea
mov
or
xchg
inc
jns
cmp
or
nop
xor
pop
retf
xchg
das
mov
cmp
enter
rol
push
cmp
cli
jbe
mov
stos
pop
push
xchg
inc
je
sub
push
jge
xchg
fcmovb
repz
imul
xchg
or
pop
inc
adc
hlt
xchg
xchg
and
scas
out
das
or
mov
adc
fcmovnb
inc
jge
fild
jmp
in
mov
pop
xchg
sbb
mov
pop
mov
aaa
ror
in
pop
dec
cmps
rcr
inc
(bad)
enter
pusha
(bad)
scas
add
ret
mov
sbb
and
xchg
push
xor
ret
xor
mov
inc
fisubr
push
jne
enter
test
mov
arpl
aad
inc
adc
xchg
sbb
push
cmp
(bad)
out
xchg
je
pop
rcl
cmp
ins
cwde
mov
push
push
out
retf
xor
dec
cld
cmp
cmp
enter
out
push
fdiv
scas
dec
dec
mov
mov
dec
xor
int
jne
adc
fmulp
mov
xor
mov
lods
mov
mov
xchg
and
mov
xchg
push
clc
(bad)
icebp
rcr
mov
xor
fwait
mov
jae
push
or
dec
jl
push
adc
and
call
mov
gs
mov
ds
cs
jp
iret
mov
dec
mov
push
jg
leave
xor
cmp
aad
loope
cmp
(bad)
aad
je
stc
jmp
push
adc
add
outs
or
and
out
inc
jne
adc
clc
pop
mov
sbb
mul
popf
push
hlt
adc
loope
das
mov
adc
mov
inc
mov
stc
add
in
pop
xchg
test
jmp
or
test
in
xor
outs
mov
enter
jmp
pop
pop
in
mov
js
out
cmps
mov
xchg
addr16
jae
ins
rcl
cmp
pop
add
adc
and
push
mov
gs
pop
mov
in
cmp
adc
pop
shl
nop
ror
jnp
or
sbb
enter
sbb
push
inc
lahf
push
xchg
loopne
and
xchg
ror
xchg
xlat
data16
cmp
mov
daa
jecxz
ds
jl
mov
add
cwde
xchg
mov
enter
or
push
mov
mov
sub
push
mov
mov
xor
and
loopne
pop
mov
sub
xchg
jo
fwait
outs
test
cld
fsubr
leave
xlat
and
pop
or
sub
jl
xchg
fcom
in
cli
test
jno
inc
add
or
ret
cdq
fnstsw
sub
fnstenv
cs
lahf
push
push
arpl
lds
leave
mov
adc
loopne
and
cmp
sbb
pop
jg
dec
loope
xchg
pushf
adc
loope
xchg
(bad)
or
inc
test
jge
xor
jo
test
arpl
mov
jle
add
popa
fsub
scas
test
mul
ret
adc
fnstenv
pop
stos
jmp
add
repz
shl
(bad)
ins
cs
nop
xchg
repnz
(bad)
pusha
jmp
mov
mov
cld
das
xchg
xor
call
mov
dec
xlat
hlt
imul
add
add
add
jmp
out
das
mov
mov
xchg
popf
mov
cmps
js
inc
sti
test
xchg
call
movs
retf
mov
mov
mov
pop
out
mov
retf
fsub
repz
sbb
retf
repz
dec
test
into
dec
cwde
dec
cmps
or
loope
xchg
dec
scas
sub
push
cdq
imul
mov
push
or
ds
(bad)
repz
adc
pop
dec
mov
cmp
(bad)
pop
mov
cmp
push
xor
ret
in
into
aam
test
js
push
xchg
push
pop
fimul
je
scas
and
movs
adc
fwait
lock
push
imul
jecxz
cmp
shr
pop
lods
push
call
les
ror
push
dec
(bad)
jb
inc
clc
sub
(bad)
fbld
push
(bad)
push
pusha
outs
or
mov
sub
jg
setb
sbb
aas
cmp
and
mov
outs
jle
pusha
scas
jmp
pcmpgtw
jg
popa
add
stos
jl
cmp
fist
(bad)
jb
das
(bad)
popa
xchg
dec
pop
mov
or
mov
in
ja
adc
mov
adc
cmps
int
(bad)
xchg
jo
adc
mov
xor
mov
mov
out
mov
xchg
and
jmp
mov
ret
cmp
push
sub
das
add
inc
cmps
jb
fisttp
sti
or
sub
ficom
ret
mov
js
(bad)
cmp
test
idiv
dec
jae
mov
jbe
mov
cwde
cwde
mov
cmp
(bad)
(bad)
out
xlat
ins
cwde
lods
adc
sub
jecxz
fadd
nop
pop
mov
movs
mov
push
repz
and
or
sbb
fiadd
xchg
sub
inc
cs
inc
mov
mov
inc
out
mov
xor
fidiv
(bad)
enter
div
pop
mov
adc
add
xor
mov
jae
inc
aam
inc
aad
xor
fdivr
push
arpl
out
cdq
(bad)
lea
mov
enter
out
pop
mov
lods
hlt
les
inc
sbb
jo
mov
popa
push
ds
xchg
sbb
stc
mov
fild
jne
jge
nop
push
iret
dec
aam
les
jb
leave
cmp
(bad)
clc
(bad)
mov
xchg
mov
sub
mov
push
jno
jmp
and
jae
out
fdivr
fwait
or
mov
push
or
gs
sbb
bound
neg
mov
iret
in
mov
mov
mov
in
(bad)
in
movs
inc
mov
sub
les
push
mov
mov
cmps
call
bound
pop
mov
jae
and
int3
sbb
add
scas
mov
dec
mov
les
adc
mov
sub
mov
adc
fidivr
or
add
and
int3
push
mov
enter
popa
jns
in
cmp
inc
jecxz
outs
mov
jns
pop
aaa
das
aam
and
push
call
mov
mov
xchg
repz
sar
mov
pop
out
ins
std
sub
idiv
pop
clc
add
mov
adc
mov
bound
cmps
jbe
push
std
add
call
jg
pop
sub
iret
arpl
popa
ja
fs
mov
inc
out
test
pop
imul
in
inc
cmps
cmp
ret
xor
imul
mov
sub
inc
or
test
repz
jl
(bad)
mov
das
(bad)
or
(bad)
mov
cdq
jnp
scas
std
imul
ins
mov
fcom
bnd
hlt
aas
cdq
push
les
pop
aaa
mov
test
inc
push
mov
ret
hlt
adc
test
xchg
cmp
sub
cmc
mov
pop
pushf
(bad)
cwde
(bad)
cld
xchg
or
lods
aad
imul
ins
not
add
rcl
lods
xchg
gs
cmp
inc
mov
push
retf
sub
js
mov
push
ss
mov
cwde
and
or
add
push
shl
mov
aad
jo
add
jne
adc
push
or
repz
out
fwait
lds
jle
add
int3
add
mov
shr
ret
xor
hlt
mov
fdiv
iret
mov
ret
jnp
cmc
inc
loopne
popa
in
pop
int3
aam
sbb
je
fs
push
mov
imul
xchg
pop
div
ficomp
loopne
out
xchg
inc
shl
jns
xor
jae
out
loopne
jl
repz
scas
stos
mov
(bad)
pusha
neg
mov
stos
pop
pop
test
je
fadd
sub
mov
(bad)
sub
mov
pushf
test
int
xchg
imul
cdq
xchg
sub
push
push
int3
movs
stos
xchg
mov
sar
mov
and
mov
add
icebp
adc
mov
ret
sbb
cld
jl
xor
fld
sub
mov
ret
bound
sub
adc
loope
xor
(bad)
mov
push
cmps
add
pop
inc
push
scas
das
cwde
dec
xchg
inc
adc
enter
inc
mov
dec
fucomp
and
(bad)
jnp
and
in
pop
jg
neg
pop
(bad)
pop
ins
call
jns
shr
repz
adc
add
in
jl
lahf
or
fs
enter
mov
push
pop
daa
std
(bad)
adc
push
jge
add
xor
scas
xchg
xchg
push
pop
cmp
push
not
loopne
test
inc
jmp
pop
lock
lods
and
cmp
in
add
push
test
je
aas
or
repnz
sub
aaa
xchg
add
movs
jg
cmp
fdivrp
xor
(bad)
ins
push
jecxz
add
daa
sub
push
xlat
xor
cmp
das
movs
into
xchg
lods
nop
sbb
aad
int3
sub
mov
cmp
dec
inc
sub
pop
jbe
mov
mov
lea
mov
dec
aam
icebp
cmovo
mov
sub
jnp
shl
in
push
and
jae
cli
or
lock
rcl
je
xor
adc
add
cmc
mov
pop
call
push
pop
xchg
pop
data16
aaa
call
mov
push
pop
stos
mov
fs
(bad)
mov
xlat
(bad)
mov
add
adc
dec
cs
jge
and
add
std
lods
adc
jg
loopne
xor
pop
mov
movs
(bad)
aam
mov
(bad)
mov
pop
push
mov
inc
push
cwde
hlt
dec
sub
push
adc
sti
jecxz
in
add
sbb
adc
push
xchg
scas
sub
sub
pop
shr
push
test
call
mov
push
inc
mov
add
push
and
mov
add
sbb
enter
pop
push
pop
aam
mov
outs
and
(bad)
xchg
xchg
aas
xor
test
inc
xor
push
or
mov
cmp
jmp
aad
(bad)
sti
mov
aad
dec
ret
push
in
jae
mov
mov
mov
push
adc
jae
mov
adc
loop
mov
cmps
adc
es
out
fsub
repz
push
out
dec
jle
fs
clc
push
rol
xchg
sti
sahf
jmp
mov
rcl
(bad)
out
and
imul
lods
enter
inc
in
mov
cmp
xor
mov
jecxz
(bad)
mov
cli
loope
dec
hlt
sub
pop
shl
and
cli
inc
dec
mov
dec
das
inc
or
arpl
test
mov
loop
js
(bad)
and
dec
mov
add
call
inc
out
ins
mov
int
mov
into
xchg
mov
add
(bad)
jo
add
or
and
cmp
jp
mov
add
cmp
scas
stos
rcr
mov
div
push
dec
mov
push
clc
ja
data16
add
cmp
lahf
jg
jl
adc
das
mov
ja
adc
test
pop
ss
sub
xchg
or
xchg
fidivr
nop
rcr
push
das
test
dec
xchg
sahf
pop
mov
je
xchg
jg
pop
mov
push
inc
or
jnp
cs
bound
mov
push
pop
jae
faddp
dec
xor
adc
(bad)
and
add
sbb
arpl
mov
xor
add
test
test
test
mov
xor
cmc
adc
lods
rcl
ds
cdq
stc
sti
mov
adc
cmc
or
std
mov
cdq
sub
inc
cdq
pop
mov
and
push
mov
fisub
fcomp
mov
fs
adc
repnz
jae
pusha
fcomp
into
pop
cs
stos
shr
push
repnz
aaa
fdivr
lds
dec
push
lahf
scas
(bad)
in
jl
jle
lahf
or
mov
adc
adc
jne
pop
mov
out
lods
sub
inc
inc
outs
stc
push
sahf
push
mov
or
dec
jo
push
sbb
mov
and
mov
out
pusha
push
push
mov
fbld
outs
sbb
jg
ret
push
in
out
enter
jnp
mov
fistp
jb
ja
push
and
loope
pop
pop
test
movs
cld
and
adc
inc
adc
pop
or
cmc
sar
xor
sbb
xchg
fcmovb
cmp
outs
cmps
push
imul
jo
mov
std
add
jb
sar
leave
dec
mov
rcl
loopne
je
cmp
in
(bad)
dec
xchg
stos
xor
xchg
xlat
lock
test
mov
cmps
jmp
mov
mov
xchg
out
or
inc
in
xor
pop
mov
jmp
dec
sahf
jo
(bad)
out
push
and
xchg
imul
add
fucom
in
jns
bound
(bad)
fisttp
das
or
xchg
(bad)
mov
cli
movs
test
mov
imul
mov
fist
and
push
add
or
xor
fcomp
rol
mov
mov
xchg
aas
jmp
and
fcomp
add
push
inc
sbb
push
sbb
stos
and
mov
stos
std
adc
lods
xchg
jne
pusha
aaa
and
div
and
pop
lea
addr16
mov
pop
cld
xor
in
xor
div
(bad)
(bad)
ror
jmp
retf
les
dec
sub
inc
loopne
js
mov
int3
arpl
xchg
cmp
dec
mov
or
push
imul
es
out
ficomp
test
jge
adc
or
icebp
jbe
dec
and
pop
pop
and
and
jne
xor
gs
stos
mov
xor
sub
xor
cdq
dec
fdiv
inc
mov
sub
push
jb
outs
movs
lods
or
or
dec
(bad)
xlat
call
inc
repz
into
outs
ds
clc
fcomp
cmps
and
movs
fst
add
das
push
sub
jb
push
mov
fld
mov
push
cmps
in
xchg
shl
fwait
mov
jecxz
mov
rcr
mov
and
aaa
push
push
hlt
adc
mov
dec
hlt
sti
jns
mov
mov
adc
movs
popf
jb
cmp
pop
test
stos
mov
jge
mov
or
jp
or
inc
add
cwde
push
(bad)
add
dec
mov
(bad)
mov
inc
add
pop
cmps
cmc
lods
mov
leave
or
push
sbb
mov
lahf
retf
inc
adc
add
or
sbb
fistp
mov
push
pushf
test
xchg
bound
sti
sbb
je
push
cmp
cmps
in
dec
mov
sbb
rcr
pop
jnp
dec
inc
arpl
repnz
ror
add
inc
cmp
jns
cwde
hlt
ret
imul
and
pop
xchg
or
dec
or
test
lahf
fcom
imul
lods
sbb
push
inc
push
pop
out
xor
mov
fadd
sub
scas
into
inc
mov
or
fstp
add
js
xor
cmp
movs
and
push
and
neg
leave
adc
mov
pop
icebp
sti
fmul
push
xor
jno
fstp
mov
test
adc
sub
(bad)
jbe
ret
outs
jl
(bad)
cmp
add
and
push
push
scas
xor
dec
mov
mov
cli
adc
test
jb
sub
jno
leave
push
outs
popf
inc
or
pop
add
push
outs
pusha
mov
push
add
data16
repnz
lods
mov
out
out
ins
inc
or
and
cld
sbb
popf
and
test
push
push
enter
retf
fadd
aaa
stos
ja
cmps
loopne
aam
ret
mov
leave
aad
xchg
jp
das
repnz
mov
call
aaa
int3
xchg
dec
dec
dec
stos
sub
sbb
div
mov
mov
pop
bound
lds
mov
adc
xchg
rcr
mov
xchg
pop
mov
dec
pop
das
xchg
sahf
xchg
dec
shl
cli
jo
mov
push
fst
sti
or
imul
mov
mov
inc
sub
or
jecxz
sbb
sbb
jae
inc
jl
jnp
rcl
push
ss
loope
pop
pop
popf
pop
cmp
jbe
mov
pushf
inc
divps
mov
inc
pop
and
aas
inc
push
dec
inc
add
and
aaa
int
jle
and
add
out
in
pop
add
nop
sub
and
aaa
shr
mov
imul
push
js
loopne
fadd
jl
dec
jp
sbb
or
ja
retf
fimul
xchg
sbb
inc
cs
push
push
pop
lock
fcmovb
cmp
mov
cmp
iret
sbb
scas
js
mov
mov
dec
fbstp
sahf
sub
call
and
add
and
add
lods
dec
sub
cmp
jge
pop
pop
into
shr
in
mov
sahf
mov
test
ja
jge
ss
dec
and
add
adc
mul
and
hlt
push
jae
retf
xor
stos
mov
push
and
scas
mov
call
sbb
out
push
arpl
mov
sti
xor
imul
lahf
retf
test
pushf
je
inc
in
(bad)
jl
add
mov
lods
sbb
jecxz
and
push
loopne
mov
js
xor
mov
dec
bound
cld
pop
adc
pop
ficom
test
xchg
add
neg
push
enter
movsx
mov
in
cli
sbb
clc
xor
dec
ds
xlat
mov
push
dec
rol
xchg
movs
and
pop
cmps
popa
icebp
bound
mov
movs
dec
enter
push
cmp
fwait
xor
shl
mov
push
push
dec
sub
les
adc
outs
xchg
pop
faddp
out
es
(bad)
hlt
xchg
xlat
retf
inc
stos
pop
mov
in
repz
aam
cmps
out
sbb
aaa
ret
aam
sub
fwait
push
ja
jnp
mov
jo
pop
gs
sti
iret
pop
mov
jge
jmp
dec
pop
in
jbe
xlat
jl
add
outs
mul
ror
sbb
push
mov
cs
mov
xchg
fild
sar
xor
mov
jge
popa
inc
push
or
inc
retf
mov
or
dec
push
stos
inc
or
or
sub
in
xchg
shl
in
push
bound
push
call
gs
int
test
in
into
xchg
mov
repz
xchg
fidivr
jge
jmp
add
xor
inc
lods
xor
(bad)
or
dec
cmc
test
scas
sbb
pop
shl
add
imul
or
test
jge
dec
xlat
cwde
xor
cmp
and
adc
cwde
popa
dec
int3
ds
scas
cmp
mov
repnz
arpl
fisttp
cmp
sub
retf
iret
out
push
jae
repnz
mov
pop
in
xor
mov
inc
inc
add
enter
arpl
bound
clc
dec
sbb
sbb
mov
pop
lods
test
dec
js
inc
sbb
(bad)
call
jne
pop
gs
test
xchg
(bad)
fcomip
push
scas
sub
cmp
xchg
xchg
add
push
adc
inc
(bad)
data16
or
jmp
xchg
(bad)
(bad)
js
loopne
mov
mov
jne
movs
call
mov
lds
stos
cdq
les
enter
sub
adc
inc
test
nop
pop
add
sbb
lds
inc
and
ss
data16
push
pushf
xor
ficomp
and
sub
stc
adc
and
lds
hlt
mov
push
or
xchg
mov
pop
shl
add
jne
int3
push
xchg
and
xchg
ror
sahf
or
loope
mov
cs
dec
cmps
xor
inc
and
sbb
fidiv
fnsave
popf
xchg
mov
adc
inc
inc
mov
cmps
lods
bound
sub
pop
dec
and
jg
mov
push
adc
or
inc
lock
in
outs
mov
inc
sbb
mov
and
test
loopne
inc
mov
mov
sub
sti
and
push
hlt
aad
cld
lahf
bound
cmp
sbb
mov
mov
pop
rcr
pop
lahf
imul
sub
pop
add
pop
or
lea
inc
add
fwait
and
stc
scas
or
sub
enter
add
lea
int3
jmp
jmp
and
adc
pop
add
aad
imul
clc
push
adc
jno
ffreep
push
rep
xchg
mov
adc
sbb
aas
jae
call
sub
and
mov
mov
xor
enter
inc
sahf
int3
enter
pop
push
ins
rcl
push
ja
sbb
(bad)
aaa
sbb
loop
and
cmps
movs
fdiv
pushf
jnp
in
jo
mov
ja
pop
test
sahf
cmp
mov
xor
scas
adc
int
out
or
pop
sub
lahf
or
inc
dec
and
out
test
shl
movs
(bad)
idiv
stos
dec
pop
sar
int
rcl
icebp
imul
enter
mov
mov
outs
inc
pusha
mov
mov
hlt
push
rcl
imul
ret
mov
outs
outs
cmps
add
mov
push
mov
sar
adc
push
inc
xchg
xchg
sub
fprem1
mov
push
inc
inc
shr
inc
aad
movs
mov
adc
lods
loopne
push
ins
ret
jmp
add
adc
adc
jmp
cdq
pop
in
cld
pusha
loop
add
aas
pop
sbb
xchg
dec
xchg
push
shl
add
das
js
inc
mov
cmp
inc
adc
xlat
lods
lds
pop
xchg
sbb
mov
loopne
das
or
fild
inc
and
outs
idiv
or
ret
arpl
ja
fsin
and
pop
pop
in
stos
fxch
stos
or
sub
sti
sbb
add
or
movs
jns
add
jp
mov
cmps
imul
test
test
gs
sbb
(bad)
push
mov
out
jmp
add
js
push
stos
mov
nop
(bad)
pop
mov
mov
pop
or
mov
js
imul
mov
adc
cld
int3
jle
jae
mov
ret
daa
jae
pop
mov
aam
jmp
or
or
or
gs
xlat
std
fdiv
adc
mov
xchg
dec
scas
add
pop
dec
data16
mov
xor
pop
mov
xchg
inc
scas
loopne
dec
lods
or
dec
rol
mov
push
push
inc
mov
(bad)
cli
in
sub
lods
push
push
fcomp
jmp
in
popa
ds
adc
scas
xchg
mov
arpl
jae
shl
dec
cs
add
mov
es
retf
div
pop
pop
or
jno
int3
cli
xchg
std
push
icebp
aas
xchg
push
mov
(bad)
mov
add
add
xor
cmp
scas
sbb
(bad)
in
adc
adc
sbb
pop
out
cmc
das
mov
les
pop
mov
and
mov
imul
jmp
dec
movs
inc
dec
jb
(bad)
(bad)
out
mov
les
popw
inc
dec
push
retf
mov
nop
js
and
push
mov
dec
cmps
call
hlt
and
pop
mov
and
xor
mov
test
les
add
clc
imul
cli
ret
and
push
aad
imul
scas
cmp
and
(bad)
adc
xchg
out
lahf
hlt
shl
sar
xchg
imul
xchg
sub
xor
inc
pop
xor
loope
and
add
fdiv
mov
xor
push
xchg
cdq
fwait
sbb
ja
shl
adc
cli
scas
pushf
xchg
push
dec
and
sub
sub
nop
movs
test
sar
popa
lahf
xor
sbb
scas
fldenv
mov
or
sbb
cmps
dec
lahf
jno
push
sbb
push
mov
push
repz
jp
sbb
dec
push
stos
jno
int
inc
imul
add
jno
jo
ss
sub
sahf
bound
scas
mov
pop
les
loope
cmp
xor
leave
in
mov
sbb
mov
sub
xchg
aas
adc
int
shl
add
sti
or
cmp
fs
es
pushf
(bad)
pop
pop
mov
pop
js
ja
adc
adc
cs
dec
sbb
int
mov
pop
sub
in
sub
mov
fstp
mov
cmps
and
rcr
jno
pop
cmps
stos
jle
in
xchg
jae
out
xchg
push
in
mov
inc
mov
push
push
stc
mov
lea
scas
in
push
push
jns
sbb
mov
add
mov
fdivr
lahf
cmp
push
push
inc
sbb
or
dec
rol
dec
rcl
jns
bnd
add
adc
mov
add
xor
fwait
jp
aaa
sahf
retf
push
push
ror
in
pop
cmp
in
sahf
je
imul
movs
dec
inc
call
jne
sub
inc
mov
std
pop
push
push
pop
sbb
dec
sbb
cmp
and
or
or
cdq
lea
sub
xor
dec
adc
mov
test
or
les
pusha
mov
mov
jmp
mov
pop
dec
test
lahf
inc
cmp
fimul
xorps
jb
pop
push
lods
pop
adc
inc
dec
jo
mov
aaa
into
ins
xchg
or
outs
dec
stos
pop
or
pop
les
mov
pop
sub
mov
cmp
fwait
scas
jmp
dec
and
fnstsw
push
and
lds
repnz
popf
xchg
sbb
pusha
jmp
and
movs
push
xlat
aad
shl
cmps
ins
and
call
arpl
cmps
imul
jle
xchg
mov
mov
xchg
xchg
adc
mov
popa
(bad)
pop
dec
mov
fcomp
inc
ss
add
pop
pusha
sub
sar
int
pop
xor
retf
(bad)
arpl
mov
icebp
mov
into
movs
pop
aaa
mov
sub
pop
ins
sbb
leave
pop
mov
imul
xchg
xchg
popf
push
mov
mov
cmps
add
and
sahf
sbb
lahf
enter
nop
pop
sbb
fcomip
mov
mov
popf
pop
sub
out
xchg
pop
mov
cmp
pop
cmp
jne
movs
stos
scas
sbb
out
lea
push
sti
dec
mov
and
push
sar
jo
maxps
ror
call
inc
int
rcl
inc
cmp
inc
std
sbb
call
xchg
fcomp
xchg
jo
sahf
popa
cwde
pop
jle
jmp
ds
daa
clc
and
not
pop
xchg
hlt
in
adc
jge
and
call
inc
sbb
stos
inc
dec
(bad)
sbb
pop
sub
std
call
fwait
mov
div
add
shl
add
cmp
mov
(bad)
(bad)
dec
cmp
(bad)
dec
mov
mov
stos
sub
sub
fdivrp
ins
cmp
lods
popa
push
in
ret
mov
sar
clc
(bad)
(bad)
ror
cmp
push
pop
sbb
jns
mov
scas
nop
daa
out
add
mov
ret
or
ds
xlat
dec
rcl
inc
dec
popa
inc
jmp
xchg
pop
mov
mov
push
js
lods
mov
(bad)
fist
arpl
push
(bad)
xor
es
add
jb
mov
nop
retf
nop
sti
mov
xor
xor
jg
int
popf
push
out
sub
daa
cwde
push
outs
push
rol
cs
(bad)
pop
gs
ficom
outs
sub
and
shl
push
sub
mov
jle
int3
les
cmp
xor
pop
rcl
cmc
and
pop
cmp
pop
mov
pop
ror
imul
jg
mov
xchg
sar
sbb
or
sbb
jns
ins
int
cdq
cli
aas
mov
push
shl
ss
mov
and
out
sbb
xchg
xor
push
(bad)
bound
add
jno
fsub
aas
add
test
mov
arpl
xchg
rcl
dec
cmps
pop
test
dec
shl
xor
ret
pop
sub
add
popa
xor
pop
fisub
retf
in
(bad)
daa
dec
adc
push
cmp
out
les
leave
cld
ja
ins
outs
loope
imul
xchg
jns
ja
arpl
int3
(bad)
in
mov
movs
pop
ret
xchg
lahf
aas
xlat
out
xchg
add
jl
out
add
push
ss
sub
cld
jmp
cld
loop
add
gs
icebp
or
bound
aad
mul
popa
push
stos
(bad)
and
inc
jno
addr16
jl
neg
jle
cdq
adc
test
jmp
adc
sbb
pusha
(bad)
outs
aad
mov
out
jno
xchg
sub
je
imul
imul
int3
xchg
arpl
popa
inc
fwait
mov
xor
sahf
pop
pop
pop
out
dec
popa
cmp
hlt
or
dec
ret
sub
imul
enter
sub
in
adc
(bad)
popa
and
in
loop
pop
es
pop
les
xlat
inc
or
push
sti
lods
mov
sbb
lds
sub
mov
inc
ss
ret
aam
iret
jno
and
sar
push
jp
call
sub
aaa
mov
xor
sub
dec
jns
xchg
push
jge
lods
das
in
xchg
scas
in
test
cmp
hlt
jmp
(bad)
jg
aaa
movs
or
fwait
int
cmp
test
loopne
cs
sbb
pop
mov
loopne
movs
sub
stos
je
shl
pusha
adc
jmp
pop
out
mov
xchg
les
nop
cmp
pop
add
cmps
mov
repz
lock
fadd
add
fld
adc
inc
popf
in
ins
fs
push
mov
jae
(bad)
fadd
mov
(bad)
inc
inc
cld
mov
push
bound
mov
xor
add
popf
gs
mov
and
loop
sar
add
out
js
or
mov
aam
xchg
outs
adc
dec
int
loope
mov
cli
adc
movs
jp
adc
retf
loope
xchg
adc
push
fist
std
sbb
fwait
xor
pop
bound
and
push
cs
shr
pop
cmps
fisub
xchg
nop
pop
in
loope
ficomp
std
xchg
sub
das
call
stos
sub
mov
jecxz
sub
mov
inc
xor
stc
gs
clc
pop
repnz
xor
xor
xchg
(bad)
push
bound
inc
pushf
jl
jmp
sbb
push
fsubr
inc
out
retf
lea
test
add
outs
pop
jp
jg
jbe
cmp
and
test
or
adc
ret
xchg
jge
sbb
push
in
sub
jmp
push
xchg
idiv
(bad)
push
stc
mul
dec
js
adc
sbb
lods
mov
add
pop
enter
pop
xchg
adc
call
ins
pop
xchg
pop
fimul
(bad)
push
fucompp
frstor
movs
stos
popa
dec
mov
mov
scas
or
jb
or
sub
adc
push
push
scas
cmp
and
inc
(bad)
jnp
lods
mov
mov
inc
mov
out
mov
jmp
test
or
cmp
push
inc
iret
sbb
pop
jae
sub
sbb
jle
sub
push
jmp
das
xchg
(bad)
pop
int
xchg
sub
adc
retf
ins
inc
popa
push
push
push
mov
imul
mov
inc
push
pop
pop
xor
push
int
sub
scas
xor
call
push
cli
inc
add
ficom
xchg
dec
xchg
repnz
sbb
in
retf
mov
iret
dec
(bad)
jge
or
(bad)
inc
and
les
push
push
sub
xchg
cmp
out
in
mov
cmp
push
mov
call
mov
mov
rcl
fisub
mov
std
mov
inc
jo
iret
in
sbb
inc
jecxz
(bad)
cmp
jge
mov
xchg
pop
lds
scas
xchg
outs
push
pop
add
test
push
sub
xchg
inc
or
leave
mov
or
pop
stos
lea
mov
call
shr
push
aad
mov
std
loopne
cmp
in
bound
pop
adc
js
and
in
inc
or
mov
ror
imul
cld
cmp
cdq
and
es
adc
sub
cmc
mov
adc
imul
daa
data16
out
out
mov
add
sub
lock
xchg
punpcklwd
inc
pop
out
pop
cmc
add
jl
ret
int3
loop
test
mov
repnz
xchg
stos
cld
xchg
fwait
gs
inc
or
lds
fcomp
pushf
jl
pop
shl
jbe
jg
xor
add
dec
cdq
pop
sbb
pop
sbb
cmp
xor
push
repz
mov
push
les
mov
popa
mov
or
pop
fistp
mov
test
in
jae
push
cmp
add
mov
in
pushf
mov
mov
pop
lods
fcmovnu
lods
ins
cmc
add
cmp
aas
(bad)
lods
jns
rcr
sar
or
js
push
movs
ins
mov
cmp
adc
imul
test
push
int3
add
sub
or
movs
push
mov
repnz
sub
dec
mov
es
enter
pop
inc
imul
push
jne
fmul
iret
pop
rol
int3
adc
push
adc
sub
jge
ror
and
pushf
sub
mov
hlt
mov
mov
test
out
mov
ret
mov
(bad)
nop
scas
sbb
jnp
push
outs
aas
lea
repz
xor
sbb
inc
jg
pop
and
xor
push
aas
push
jp
popa
mov
jp
je
sbb
jmp
sbb
lock
cmp
adc
jmp
adc
jb
or
in
mov
xchg
jne
aad
(bad)
repz
or
in
outs
mov
xor
int
fbstp
stos
(bad)
(bad)
mov
jmp
add
mov
aam
mov
inc
das
ja
(bad)
loop
imul
jae
rol
mov
icebp
push
add
ins
lods
jl
jecxz
retf
push
in
mov
add
shl
mov
retf
neg
sub
push
ret
stc
nop
push
retf
cdq
sbb
sub
cmp
jmp
inc
mov
je
sbb
outs
xchg
imul
ds
cmp
aas
cli
lea
mov
das
jbe
adc
xor
test
mov
int
adc
or
pop
mov
xor
sub
cmps
cdq
aaa
es
push
cmps
enter
rcr
mov
in
aas
push
sti
loop
aas
clc
add
and
dec
mov
push
mov
clc
es
sub
sbb
fsubr
mov
out
jnp
popa
or
mov
xchg
jg
outs
clc
data16
xor
cmps
retf
daa
sahf
mov
xor
into
pop
retf
mov
stos
cmp
rcr
cmp
and
lock
adc
jge
aam
cmp
cmp
push
stos
movs
cmp
cdq
or
push
xchg
mov
push
dec
sbb
shl
fwait
shl
sub
xchg
sbb
push
scas
pop
stos
sub
test
std
mov
aad
adc
adc
test
popf
sbb
jo
pop
mov
lock
in
iret
add
dec
addr16
push
ficom
or
and
jb
ret
(bad)
dec
dec
sbb
pushf
mov
pop
stos
or
and
cld
out
mov
cmp
out
fucomip
mov
mov
ins
adc
iret
mov
and
in
or
idiv
pop
adc
div
dec
add
xchg
cmp
mov
in
sub
js
mov
push
out
cmps
dec
adc
dec
je
xor
mov
outs
mov
xor
xchg
mov
jb
push
push
adc
mov
sub
and
and
mov
inc
and
push
mov
mov
pusha
inc
mov
dec
cmps
retf
dec
mov
aad
mov
xor
stos
lods
dec
adc
fmul
add
mov
mov
fsub
push
or
jecxz
add
and
cmp
or
fsub
ret
add
sub
jno
jne
aad
xchg
loope
mov
call
pushaw
hlt
mov
in
xchg
mov
mov
call
cmp
sub
cwde
repnz
fistp
arpl
sahf
ins
mov
mov
movs
sub
outs
mov
call
fistp
lea
push
mov
mov
jo
rol
xlat
shr
pop
popf
in
test
add
in
jl
shr
xor
add
or
test
push
sar
loope
jmp
xchg
mov
leave
adc
shr
ja
rol
push
std
stos
ret
dec
cdq
int3
cmc
aam
popa
std
jmp
js
inc
xlat
or
add
ins
jne
xchg
push
mov
add
mov
pop
sub
sbb
inc
push
iret
hlt
dec
xchg
add
cmp
mov
mov
test
cmp
shl
mov
push
int
fs
push
mov
(bad)
daa
(bad)
int3
jmp
cmp
mov
jmp
add
dec
fimul
dec
push
jge
jecxz
push
data16
sbb
retf
mov
xlat
nop
shr
cmps
mov
push
fldcw
or
mov
int3
sbb
retf
inc
inc
movs
ror
sbb
pop
(bad)
test
dec
nop
mov
jmp
adc
std
pop
call
jmp
fs
movs
cmp
test
in
or
xchg
test
cdq
jnp
test
rol
jle
gs
xchg
xlat
mov
outs
mov
mov
cli
mov
xor
mov
pop
test
loopne
int
and
mov
mov
xchg
test
jns
cmp
cmp
or
jb
mov
mov
jl
in
cld
mov
les
ja
dec
jbe
test
pushf
add
lds
mov
push
pop
lds
cmp
xchg
mov
mov
call
dec
pop
pop
push
popf
mov
rcr
aam
cmp
movs
add
aad
push
test
adc
mov
add
lock
ror
das
xor
jecxz
aaa
inc
mov
popf
mov
xlat
adc
xchg
mov
sbb
shr
das
es
push
mov
sbb
test
push
lods
xchg
retf
in
fwait
mov
and
jo
cmp
and
icebp
mov
add
test
shl
sbb
popf
shl
retf
vmovsldup
movs
sub
add
loop
hlt
or
ds
mov
ins
cmp
or
and
add
fdivr
int3
cmps
push
nop
imul
sbb
jnp
sub
jne
add
cmp
mov
or
jnp
int3
shr
outs
sbb
push
(bad)
sbb
fwait
mov
jo
icebp
xor
out
gs
fcom
out
sub
sub
xchg
lds
aaa
jbe
cld
xor
mov
xor
(bad)
out
aam
add
and
cmps
inc
sub
enter
retf
nop
(bad)
iret
jnp
jbe
push
fisttp
pop
adc
mov
push
adc
pop
sahf
mov
sub
sbb
out
xor
int3
in
ror
dec
loope
inc
jg
xor
dec
lea
push
mov
pop
pop
push
jp
push
dec
out
push
retf
add
xor
stos
inc
cmps
das
outs
sbb
jbe
or
mov
lahf
mov
xor
sub
add
mov
mov
xchg
test
xor
sub
pop
xchg
adc
xchg
daa
mov
mov
and
mov
retf
pop
sbb
jge
test
es
test
test
(bad)
cmps
sub
shr
bndldx
ins
out
rol
out
sbb
mov
push
lods
popa
push
jns
int
xor
ficomp
or
das
xchg
retf
cmp
stos
add
dec
push
js
aam
gs
(bad)
dec
xchg
call
jae
fst
std
fadd
cmp
scas
and
(bad)
and
lods
xchg
mov
idiv
sbb
loopne
in
sti
enter
fild
pushw
or
add
push
sub
dec
scas
loop
ins
pop
ins
add
pop
sub
stos
pslld
mov
sbb
stos
pop
jp
pop
scas
dec
pop
xor
pop
sbb
sub
movs
mov
leave
jmp
push
(bad)
push
jl
pop
mov
jg
inc
push
dec
ret
scas
stc
in
iret
pushf
xchg
ror
cwde
es
mov
lods
sbb
push
or
(bad)
leave
test
ror
add
ret
or
xor
jbe
jp
out
js
jnp
rcr
and
mov
in
and
mov
cmp
mov
pop
sbb
aad
out
cmp
dec
xchg
adc
test
push
ja
nop
leave
retf
mov
sub
xor
jmp
adc
xchg
jecxz
cmp
adc
scas
mov
imul
loop
(bad)
dec
mov
push
add
mov
and
pusha
dec
lds
mov
loop
call
repz
bound
mov
xchg
push
data16
and
sub
js
and
and
mov
inc
or
jl
push
cdq
xchg
xor
or
sub
mov
mov
inc
push
sbb
pop
jbe
movs
int3
jb
ins
or
or
cmp
pop
push
sbb
mov
pop
or
jg
inc
fist
push
mov
aas
mov
mov
in
lahf
adc
sbb
lods
push
stos
nop
push
imul
pop
sahf
popf
mov
inc
inc
mov
mov
arpl
stos
adc
iret
jmp
mov
xchg
js
inc
ja
and
sbb
jl
cmp
cli
clc
popa
outs
outs
int3
cli
cmps
cli
out
leave
shr
pop
(bad)
inc
lahf
xor
jno
rcr
push
int
push
sub
div
int3
lea
rcl
push
std
mov
sub
lods
sub
xor
mov
dec
ror
inc
fld
adc
dec
mov
inc
add
data16
jp
fiadd
jno
mov
out
mov
adc
inc
frstor
nop
push
inc
movs
mov
or
adc
mov
cmp
scas
pop
mov
and
jle
or
jb
(bad)
jo
jns
ins
test
out
adc
cwde
movs
push
adc
xchg
pop
mov
adc
stc
xor
dec
mov
mov
sbb
lods
push
lahf
shl
push
int
dec
js
xor
xchg
lock
fdivr
add
jno
inc
lods
xchg
jecxz
and
or
in
inc
sbb
aad
in
scas
and
test
cwde
not
pop
cs
ins
nop
ror
mov
mov
shr
push
mov
push
mov
inc
jbe
hlt
and
and
inc
ret
sbb
imul
pop
mov
ins
mov
cmp
repz
mov
jmp
inc
adc
push
out
aas
lock
int
sub
adc
mov
ins
rol
sbb
xor
rcr
mov
xlat
rcr
dec
mov
rol
(bad)
cmp
jnp
xchg
mov
pop
loope
pop
cdq
pop
movs
and
or
pop
xor
ds
enter
rcr
icebp
xor
inc
sbb
and
cmp
lds
push
and
xor
rcr
cmc
test
clc
sti
retf
out
adc
popf
shl
push
sbb
lahf
cli
fcomp
test
int3
shl
popa
mov
shl
push
inc
pop
sbb
mov
or
sbb
adc
push
fwait
adc
jno
lea
clc
fcom
cwde
cmp
adc
pop
cwde
and
shl
(bad)
test
inc
pusha
mov
xchg
gs
pop
leave
neg
mov
sbb
int3
outs
sbb
lds
out
test
pop
retf
push
inc
lds
lds
inc
jns
sub
inc
push
enter
adc
and
inc
mov
dec
ret
dec
mov
lods
cs
nop
nop
cdq
sub
cld
les
scas
push
pop
push
xor
loop
jae
jmp
add
daa
mov
jb
ret
test
pop
inc
pop
retf
stos
(bad)
adc
ins
dec
sbb
fild
pop
inc
in
mov
sub
loopne
(bad)
xor
pushf
cwde
mov
out
add
fild
and
imul
ficom
rol
or
pop
jne
mov
clc
add
repnz
imul
sub
cdq
push
fisub
mov
mov
(bad)
mov
test
pop
mov
or
mov
cmp
push
and
clc
jp
inc
add
dec
test
adc
out
add
inc
pop
and
fwait
add
aas
mov
xchg
ins
in
les
xchg
xchg
jbe
sbb
loop
mov
mov
push
jae
stc
xchg
mov
(bad)
fist
xchg
jmp
pop
cmp
movs
xchg
jb
call
sbb
dec
lahf
(bad)
mov
ins
stos
enter
pop
sbb
je
dec
je
aam
or
popa
in
and
cmp
jecxz
aam
mov
imul
imul
push
ins
in
inc
test
out
lock
push
sub
in
ret
ins
ja
jmp
add
xchg
seto
mov
iret
and
scas
in
(bad)
xor
enter
repnz
mov
cmps
aam
or
std
mov
repz
adc
fmul
push
in
out
cmps
mov
inc
inc
jmp
sbb
(bad)
rcr
in
cmp
out
clc
cmp
retf
mov
bound
popf
jl
and
lods
ins
gs
xor
jecxz
lahf
test
or
xor
outs
or
out
mov
sbb
xchg
(bad)
mov
adc
addr16
mov
mov
mov
ret
adc
or
add
mov
inc
outs
faddp
movs
jae
movs
fs
mov
adc
adc
mov
leave
pop
pop
inc
sbb
lock
adc
test
std
jmp
mov
dec
ja
enter
fistp
shr
pop
cmp
lods
popf
nop
pusha
aaa
push
lock
jmp
mov
ds
cld
push
add
mov
sbb
xchg
in
push
movs
popa
fdivrp
sbb
pop
adc
out
fdiv
retf
stc
cli
js
out
in
jae
xor
daa
pop
jne
and
out
cli
and
push
jg
fwait
leave
mov
leave
sti
push
jle
in
adc
push
(bad)
jno
xor
leave
(bad)
mov
sar
fld
jp
loop
ja
sub
mov
not
cmp
outs
in
mov
mov
xor
pop
add
data16
sbb
lods
jmp
dec
stos
repnz
(bad)
rcl
xor
xchg
in
inc
xor
dec
int3
data16
fldenv
xor
arpl
jae
add
pop
lock
mov
xchg
pop
es
and
jns
fs
xchg
ffree
xchg
pop
mov
mov
xchg
or
cmp
test
inc
cmp
fmul
into
shr
leave
ja
js
pop
pop
pop
iret
jne
add
xchg
adc
mov
adc
movs
push
sub
xchg
(bad)
push
xchg
adc
int3
sbb
bound
push
mov
scas
push
cdq
xor
pop
adc
fcomp
add
fsubr
mov
rcr
mov
xor
mov
and
imul
push
les
mov
mov
jne
mul
jnp
mov
cmp
js
and
cmp
movs
sbb
or
scas
fwait
mov
jb
fisubr
sub
jge
loopne
cli
mov
gs
push
ins
dec
pop
imul
inc
cmps
mov
retf
inc
pop
shr
jae
adc
and
gs
jns
stos
test
adc
xchg
popf
mov
enter
into
lea
push
jae
arpl
sub
jmp
pop
cmp
mov
jl
daa
mov
sub
mov
(bad)
loope
dec
mov
mov
popa
xor
mov
mov
rcr
cmp
dec
imul
mov
cmp
jne
add
(bad)
adc
dec
movs
push
in
mov
inc
mov
jnp
inc
shl
aam
mov
stc
shr
int3
lea
stos
imul
push
iret
sub
add
xor
jo
push
(bad)
push
aaa
rcl
iret
mov
push
cmp
mov
mov
inc
les
pop
adc
mov
dec
adc
or
add
ins
jb
xchg
mov
jge
pmaddwd
js
ss
mov
inc
nop
into
adc
daa
mov
push
out
mov
or
shr
push
in
jno
and
push
push
mov
sub
jo
pushf
(bad)
pop
mov
sub
jne
vmaxss
inc
outs
imul
push
fstp
push
push
or
dec
movs
jb
inc
or
inc
add
jo
test
push
or
mov
push
jno
test
mov
loopne
(bad)
sbb
sbb
loope
mov
and
pop
sub
cld
leave
ss
pop
push
pop
push
das
sub
cld
aad
push
out
movs
inc
sub
aaa
popa
inc
arpl
jne
or
outs
jecxz
out
cmc
sbb
sub
addr16
sbb
jae
inc
jne
inc
cmp
or
ficom
mov
addr16
mov
jg
adc
xchg
xor
cmp
or
xchg
sbb
test
add
push
or
ins
cmp
fsubr
sti
xchg
int
add
jge
into
pop
scas
inc
pop
and
sbb
popaw
add
sbb
or
mov
jnp
fiadd
jns
pop
mov
aas
mov
and
add
aas
sub
std
outs
out
je
imul
sbb
enter
retf
mov
jmp
in
push
mov
ins
dec
ins
scas
xor
cmp
idiv
inc
es
jne
aad
jecxz
outs
xchg
rcr
test
punpckhwd
adc
stc
xchg
pop
jle
mov
or
iret
and
jmp
mov
pop
fcmove
movs
jbe
jmp
fwait
adc
stos
jge
or
dec
loope
fs
es
outs
pop
mov
call
mov
jmp
cdq
pop
repz
test
mov
mov
cmc
neg
add
xor
nop
retf
or
jbe
and
out
rcr
aas
jae
adc
rcl
js
icebp
pushf
scas
jbe
cmc
sti
stos
iret
fist
xor
iret
icebp
dec
arpl
dec
jno
lods
loop
inc
ss
bound
pop
xor
aam
xor
dec
dec
push
ret
ret
and
ss
out
or
ins
pusha
repnz
push
xor
repz
aaa
xchg
stos
scas
mov
and
jae
int
push
pushf
sub
in
dec
xor
xchg
addr16
dec
aaa
inc
push
and
lds
adc
adc
repnz
sar
jmp
xor
cli
cmp
push
aam
in
jl
adc
jnp
xor
aaa
popf
ins
pusha
xor
push
jo
pop
mov
imul
aad
into
push
test
xor
icebp
leave
or
pop
pop
mov
pop
sti
add
fs
xor
shl
add
jmp
imul
ficomp
jg
jg
fst
xchg
lea
push
xchg
movs
movs
ja
mov
dec
sub
inc
aas
in
or
or
sub
mov
ds
push
xchg
loope
mov
clc
adc
add
stc
popa
inc
out
dec
sub
push
pop
mov
push
jbe
push
test
jge
lods
ret
push
fstp
jno
into
daa
cli
xor
lock
pop
pushf
add
adc
or
xchg
enter
es
push
xchg
pop
rol
push
jge
adc
mov
cmp
push
cmp
js
jmp
push
into
imul
retf
out
xchg
daa
aaa
xor
(bad)
and
(bad)
jl
push
add
push
cmp
mov
mov
lods
add
mov
mov
frstor
in
and
clc
int3
shl
pandn
adc
dec
mov
sbb
ja
adc
nop
stos
call
nop
mov
idiv
stos
ds
and
out
std
clc
dec
(bad)
jecxz
xlat
push
mov
es
addr16
test
les
in
fidivr
adc
add
mov
sub
data16
cdq
rcl
cli
fidivr
ss
mov
aam
pop
repz
mov
xchg
pop
inc
leave
leave
push
cmp
call
jecxz
fisubr
imul
sbb
sub
inc
icebp
clc
push
retf
xchg
retf
or
add
sbb
inc
hlt
mov
(bad)
cmp
cs
mov
mov
jl
mov
cdq
nop
stos
je
imul
inc
ds
das
sti
pop
jge
jecxz
scas
sahf
dec
call
inc
pop
shl
push
sub
(bad)
jne
adc
cmp
xchg
add
test
cdq
jg
cmp
popa
xchg
sub
pusha
leave
or
lds
call
xor
xchg
ins
or
mov
sar
movs
jb
(bad)
pop
je
mov
push
hlt
pop
mov
mov
rcl
dec
lahf
or
idiv
in
in
cdq
jno
pusha
jns
push
pop
punpckhdq
xor
jecxz
mov
iret
inc
jb
push
xlat
es
xor
mov
cmp
icebp
fisttp
loopne
fwait
pop
xchg
mov
popf
jg
call
add
cmp
cmp
pop
sub
jge
enter
sbb
mov
icebp
ins
and
inc
and
and
mov
xchg
push
daa
aam
imul
ficom
es
lahf
ds
or
push
cwde
jge
fadd
into
pop
call
jecxz
lea
jbe
stos
hlt
arpl
ds
xchg
xlat
mov
xchg
or
(bad)
sti
ins
cmp
addr16
xor
arpl
(bad)
mov
mov
ja
sub
sbb
add
jbe
xchg
dec
stos
test
ffree
mov
cld
dec
out
mov
ss
ins
adc
mov
sti
daa
mov
sub
pusha
call
jo
pop
add
and
icebp
arpl
mov
(bad)
fist
mov
pop
in
imul
popf
jno
loop
mov
cmps
je
pop
or
adc
or
pop
mov
cmp
pop
out
movs
cmp
test
fsub
pop
and
fidivr
jmp
rcr
pop
xchg
push
sbb
movs
or
retf
xor
jae
push
and
dec
lea
retf
mov
xor
mov
rol
xor
xchg
loope
mov
fs
push
div
ins
out
fnstenv
icebp
xchg
stos
inc
xor
lea
ret
push
xchg
in
out
movs
push
aam
inc
jno
cmp
hlt
cmps
sbb
push
mov
cmps
jl
out
adc
dec
jno
cmp
xchg
ins
push
sbb
jnp
inc
test
push
imul
pop
mov
cdq
sub
idiv
imul
push
mov
push
out
add
xchg
jne
cmp
ror
out
ds
mov
mov
push
sub
shr
icebp
xlat
jmp
mov
mov
xor
sub
arpl
dec
xchg
out
cmps
inc
cld
add
add
xlat
inc
sahf
ss
inc
and
ror
bound
mov
mov
cmc
data16
nop
jo
inc
ins
addr16
fstp
pop
int
mov
adc
sub
in
cmovne
mov
pop
inc
add
fmul
or
dec
push
jne
sar
push
sbb
push
dec
shl
test
sar
aaa
repz
aam
jge
(bad)
fsub
je
retf
cmp
cli
mov
push
pop
mov
or
mov
out
jmp
scas
adc
sti
scas
mov
shl
lahf
aam
ja
fnstsw
xchg
sub
in
sub
lock
ins
push
je
test
addr16
jmp
mov
repz
jl
mov
(bad)
inc
pop
ror
pop
lahf
dec
lea
loope
clc
dec
int3
shr
mov
enter
sti
cmp
clc
pop
mov
popa
je
push
add
dec
fdiv
bound
rol
nop
and
push
sbb
fcmovnb
js
push
shl
fbld
pop
adc
mov
xor
aam
sar
jmp
sbb
mov
lods
je
add
(bad)
fmul
fmul
dec
mov
dec
js
dec
pop
xor
push
adc
(bad)
push
lahf
add
and
cmc
pop
sbb
dec
inc
sub
std
(bad)
cmp
repz
jae
mov
adc
fdiv
cmc
ror
mov
imul
dec
cmp
cmp
mov
fs
js
cmp
mov
adc
adc
jns
imul
inc
mov
ror
out
aad
aam
xor
cld
push
xchg
(bad)
push
retf
jne
dec
jmp
xchg
jb
cli
idiv
std
(bad)
(bad)
push
push
mov
sbb
fimul
ds
pop
out
fbstp
mov
xchg
adc
cld
shl
mov
mov
dec
mov
jno
ja
es
mov
ins
xchg
sbb
bound
mov
dec
pop
(bad)
mov
mov
aam
add
(bad)
xchg
xchg
in
mov
inc
jb
shl
mov
enter
fmul
imul
ss
pushf
jl
lds
ret
cli
mov
inc
jnp
xchg
jae
add
mov
popa
pop
mov
push
inc
xor
pop
mov
leave
jmp
push
dec
ret
pop
sbb
sahf
push
mov
std
call
push
push
cmp
sub
js
xchg
adc
add
dec
jne
mov
pop
dec
mov
mov
or
sub
add
shl
push
sbb
(bad)
aad
jno
mov
jnp
lods
call
dec
push
mov
xchg
push
enter
hlt
push
cmc
cmc
test
cld
and
stos
dec
sbb
cmp
sub
cmp
adc
mov
add
scas
fst
ins
cs
rol
dec
retf
shr
cmp
fisub
push
fsubr
in
xlat
mov
inc
cmc
xor
jbe
test
jge
sbb
es
push
mov
add
aaa
mov
hlt
dec
sbb
arpl
jmp
pop
ret
scas
lock
jmp
lds
lea
mov
pop
mov
outs
test
outs
xlat
cmp
out
enter
sub
pop
bnd
mov
imul
adc
ins
cmp
fist
or
mov
pop
pop
stc
jg
dec
test
sti
aam
inc
test
lock
cmp
push
lds
cmp
cmc
es
loopne
jg
outs
in
xor
sub
xchg
mov
mov
push
pop
sub
(bad)
or
and
jb
push
sub
xchg
sahf
add
rcr
out
adc
ja
inc
mov
pop
fadd
xchg
cli
iret
hlt
add
(bad)
mul
shl
pop
add
dec
adc
push
or
icebp
scas
push
int3
test
inc
ins
ds
stos
popf
or
in
lods
in
dec
mov
sub
dec
(bad)
sub
in
ret
lahf
loopne
sbb
aam
push
jmp
ja
jo
je
push
and
dec
xor
movs
push
test
hlt
pop
imul
push
and
mov
mov
cmp
lahf
mov
out
dec
shr
fbstp
jns
mov
rcr
mov
dec
jge
and
icebp
imul
mov
gs
sbb
(bad)
test
popa
and
mov
sub
xchg
call
test
mov
cmp
sub
xor
fldcw
push
sbb
jmp
pop
sbb
int
fcom
lahf
mov
or
jne
mov
add
fild
add
xor
mov
bound
pop
out
xor
jmp
scas
in
adc
cli
pop
fsub
(bad)
aaa
dec
cli
aad
mov
int
jp
enter
or
imul
int
cwde
ja
shr
inc
(bad)
adc
xchg
cmp
sub
lock
ror
addr16
and
or
mov
into
movs
test
mov
fisub
mov
mov
xchg
fsub
dec
jne
jg
nop
mov
add
mov
sub
cmp
std
push
aas
dec
xchg
cli
leave
jb
dec
ins
int
das
mov
mov
push
cmp
aam
xor
sub
jmp
sbb
and
fmul
je
jns
mov
pop
mov
mov
sar
je
and
adc
pop
int3
pop
outs
xchg
lock
call
xor
mov
and
and
dec
xchg
inc
sbb
cmps
pop
lock
enter
arpl
pop
je
jne
and
xor
jno
test
dec
sbb
not
cmp
xchg
lods
mov
out
(bad)
pop
dec
ror
mov
inc
push
add
ss
ret
cli
jecxz
ret
lods
add
out
std
outs
mov
fsub
xchg
cmp
sub
(bad)
dec
adc
in
jae
mov
sub
leave
stos
int3
push
aaa
mov
mov
js
dec
ret
into
xchg
lea
retf
hlt
add
pop
mov
mov
cld
pop
push
mov
xchg
push
dec
pop
jl
dec
fwait
jnp
and
int3
xchg
fstp
push
sub
jl
es
xchg
and
xor
fsubr
jecxz
ins
aam
aas
inc
cmp
cmp
jp
xchg
mov
xor
out
es
jno
cmp
jnp
mov
dec
inc
bnd
icebp
ror
ds
repnz
xchg
jp
ret
xor
psubsb
std
dec
pop
dec
push
ss
mov
dec
or
std
mov
les
sbb
cmp
rol
lock
jbe
adc
repz
xor
mov
cmp
mov
test
mov
cmp
jmp
ja
in
xchg
sbb
fstp
popa
pop
mov
sbb
out
dec
out
in
inc
(bad)
sub
cwde
pop
out
call
mov
mov
cld
bound
jp
mul
cwde
outs
jbe
das
cmp
mul
jge
imul
and
iret
js
pop
pop
lahf
jmp
add
push
push
loope
inc
fcmovnb
sub
or
fld
mov
mov
out
movs
dec
mov
jae
adc
push
jmp
push
ja
arpl
mov
adc
inc
mov
enter
add
mov
stos
cmp
dec
nop
hlt
popf
rcl
cmp
outs
jbe
or
xchg
adc
jp
jns
xchg
sbb
push
and
sub
ins
sbb
sub
ja
and
lods
jmp
iret
mov
xchg
xor
xchg
bound
aad
jae
adc
repnz
cmps
push
or
(bad)
mov
jo
and
loop
lea
out
or
xchg
lds
inc
and
or
inc
jecxz
ja
xchg
adc
out
xor
shr
lock
jp
in
mov
lahf
or
dec
outs
(bad)
push
mov
(bad)
pop
mov
adc
dec
or
js
push
inc
addr16
jmp
cwde
push
ret
lahf
lahf
std
aas
cmc
jle
adc
mov
dec
(bad)
(bad)
cmp
sti
push
add
fstp
movs
mov
push
xor
mov
fistp
dec
pop
dec
xchg
(bad)
and
adc
fcmovne
dec
scas
in
add
xor
push
mov
mov
jo
mov
mov
retf
adc
add
xchg
and
and
pop
jecxz
stos
ins
dec
push
dec
pop
ja
dec
add
sar
mov
ins
sti
popf
out
shl
mov
jne
imul
sar
out
jg
sbb
rcr
es
retf
lar
sbb
pop
add
neg
mov
popf
xor
call
(bad)
clc
icebp
push
retf
jae
daa
push
sub
ds
(bad)
loop
ds
ficomp
push
gs
jmp
or
out
push
push
sub
and
mov
loop
fcomp
mov
sahf
ins
aas
cwde
mov
sub
pop
cmp
shl
sbb
sub
cmc
sub
imul
inc
adc
out
arpl
es
jae
cmp
push
nop
leave
(bad)
sbb
or
dec
mov
mov
mov
mov
out
fisttp
inc
sub
dec
or
clc
adc
ret
adc
(bad)
mov
nop
ja
jns
fwait
(bad)
mov
cmp
shr
cdq
jp
xor
pushf
xchg
into
jecxz
stc
pop
jl
push
sub
adc
cmovge
cmp
jmp
test
rcr
jnp
ins
aaa
ret
add
xchg
cmps
xchg
ins
inc
adc
inc
imul
mov
shl
ficom
aaa
sti
mov
cmps
mov
fnstcw
mov
push
out
fstp
sub
cld
mov
sub
xor
int3
jnp
push
shl
repnz
sbb
rcl
in
test
fstp
jmp
sub
call
xchg
int3
cmp
xchg
gs
aas
xchg
inc
pop
aad
mov
aas
out
inc
dec
mov
movs
inc
mov
xchg
fcmove
std
popf
cmp
mov
adc
push
(bad)
push
sbb
push
in
aaa
jbe
inc
xor
lods
inc
les
mov
rcl
mov
int
xor
add
imul
gs
(bad)
jne
idiv
push
sub
pop
ja
enter
leave
inc
in
out
div
shl
or
cmp
and
cmp
icebp
fwait
repnz
or
outs
dec
pushf
ss
xchg
pusha
mov
or
pushf
test
ss
mov
cmp
add
lods
or
test
mov
mov
mov
cmc
jnp
fs
dec
or
cwde
xor
rcl
test
les
push
mov
fiadd
push
sub
movs
push
and
jmp
pop
arpl
push
or
outs
dec
sahf
ret
das
pop
call
and
inc
jo
ret
movs
dec
and
(bad)
fdivrp
xchg
mov
pusha
(bad)
sub
add
and
add
int3
popa
movs
cmp
push
addr16
mov
mov
into
mov
sar
or
push
sub
push
mov
popa
out
movs
push
mov
in
daa
jnp
test
fwait
or
popf
xor
adc
jl
mov
pop
leave
into
arpl
lods
cld
shr
aaa
mov
add
mov
xchg
push
retf
adc
and
jl
or
sub
fdivr
mov
add
jbe
pop
mov
xor
sbb
nop
inc
add
mov
lock
and
cli
mov
push
jmp
mov
pop
jmp
pop
or
dec
xchg
mov
cmps
in
mov
pop
push
movs
fsub
call
or
jmp
push
movs
scas
mov
or
jge
dec
inc
mov
inc
xor
add
mov
outs
sub
add
sar
jecxz
mov
lods
xor
movs
es
ss
mov
lds
and
ins
xor
and
ss
in
add
leave
movs
adc
popa
xor
mov
pop
mul
push
enter
jmp
fbstp
fld
pushf
movs
push
inc
cmp
arpl
mov
in
push
out
outs
in
dec
leave
and
and
mov
add
sub
js
arpl
push
mov
push
test
jno
push
mov
je
push
movs
outs
loop
loope
imul
sub
lock
cmp
ins
and
outs
jb
test
call
mov
cmp
inc
inc
cwde
add
imul
add
aam
in
stos
dec
stc
inc
iret
mov
mov
ja
(bad)
ja
add
mov
ror
xchg
pop
jp
mov
inc
xchg
xchg
mov
fnstenv
inc
outs
dec
cmp
dec
fs
leave
aam
lds
dec
js
mov
cmc
int
sbb
push
int3
push
jmp
or
sub
loop
mov
imul
dec
int
jae
mov
xchg
add
retf
mov
sub
pop
movs
aam
popa
(bad)
cmps
cs
(bad)
iret
(bad)
into
sti
mov
icebp
sahf
add
psllw
xor
test
loopne
mov
and
dec
(bad)
cwde
test
repnz
into
jb
mov
xchg
(bad)
clc
ja
inc
stos
lods
loop
js
xchg
pop
and
repz
ror
jbe
mov
dec
dec
fbld
push
cmc
sub
bound
bound
test
(bad)
nop
cwde
mov
dec
cmc
xchg
dec
and
jno
out
sub
push
js
movs
mov
sahf
xchg
pop
inc
jmp
dec
leave
jns
and
retf
mov
cmp
xor
push
mov
outs
iret
dec
(bad)
or
retf
or
xchg
pop
adc
fs
icebp
sti
fiadd
lock
call
or
and
int3
cmp
push
mov
shr
xor
dec
push
repz
cmp
cdq
pop
xchg
push
dec
in
sbb
cld
icebp
mov
rol
out
ja
adc
jo
pop
test
bound
dec
cmps
lock
ja
xchg
imul
mov
jge
ds
dec
es
adc
loop
outs
pop
fcmove
mov
ret
js
xor
lods
cmp
or
push
es
sbb
idiv
popa
iret
das
or
fmulp
pop
jmp
das
call
sbb
cwde
out
fnstenv
dec
push
out
loop
push
test
pop
ins
cmp
fnsave
or
out
push
sub
addr16
push
jmp
lods
test
stc
cmps
add
fs
aas
(bad)
cli
inc
mov
and
inc
add
mov
xor
nop
jb
lds
jp
jmp
scas
xchg
out
cdq
outs
push
cmp
daa
sbb
fdivr
sbb
into
push
and
or
rcr
stos
jns
xor
ins
daa
fwait
vunpckhpd
popf
mov
(bad)
mov
icebp
or
popa
sahf
sbb
sahf
pushf
mov
popf
not
mov
jmp
iret
not
jg
mov
pop
sub
inc
fistp
sbb
movs
hlt
pop
jp
pop
(bad)
push
rcr
imul
or
and
int3
and
push
aas
cwde
stc
fs
mov
imul
or
mov
out
lods
test
mov
cli
jecxz
cmp
cli
jnp
in
xchg
test
in
jge
sub
das
pop
add
inc
adc
pop
ja
ins
aas
cmp
add
fwait
cli
dec
adc
jns
jns
faddp
js
int
jle
call
cmp
jbe
dec
aaa
aaa
cmp
popf
jle
movs
sub
out
into
aas
ja
mov
mov
popa
sub
sar
fimul
scas
sub
dec
repnz
mov
jns
mov
daa
daa
xchg
xor
pop
sbb
pop
push
pop
leave
sbb
lea
jle
sbb
(bad)
sbb
pop
pop
xchg
jg
inc
add
jecxz
dec
cdq
imul
mov
and
fisttp
in
mov
outs
xor
jmp
mov
sahf
pop
sbb
mov
outs
sbb
and
xor
cwde
shr
mov
fdivr
push
push
daa
test
sub
sbb
cdq
std
sbb
loopne
idiv
mov
mov
pop
les
mov
ss
push
push
sar
jo
dec
pusha
sbb
inc
lds
imul
adc
out
mov
mov
sti
loope
mov
pop
or
add
xchg
or
mov
cmp
loope
adc
loope
daa
pop
ss
(bad)
ds
or
jmp
mov
push
push
mov
and
and
mov
mov
xlat
test
push
mov
or
or
hlt
mov
rcl
pop
dec
xor
jmp
sbb
test
test
jecxz
inc
fxtract
mov
fild
fdivr
int
cmp
lahf
or
test
(bad)
imul
xor
test
inc
adc
test
pusha
or
jb
pushf
jo
push
scas
stos
jne
jbe
(bad)
aad
and
mov
mov
sub
jb
nop
and
sub
sbb
scas
int3
test
xchg
mov
dec
je
cmp
xchg
jecxz
sub
dec
scas
ror
cmps
push
into
adc
and
inc
das
push
add
addr16
sbb
push
test
cmp
leave
dec
jge
xchg
stos
loope
hlt
and
adc
pop
adc
arpl
nop
xchg
add
repz
xor
scas
cmp
mov
cmp
daa
inc
fmul
fisub
mov
repnz
into
sub
and
mov
mov
je
or
push
add
test
retf
push
jmp
in
pop
or
arpl
mov
inc
xchg
jl
mov
(bad)
lahf
push
jp
aas
sub
in
hlt
inc
xor
lea
aas
std
dec
sti
add
and
push
into
arpl
stos
mov
fwait
ins
(bad)
(bad)
call
mov
je
or
test
sbb
jp
cdq
inc
fistp
fistp
cli
fwait
push
sub
outs
(bad)
xchg
xchg
jge
jno
fstp
in
jge
out
aad
push
scas
iret
jmp
cmps
bound
(bad)
(bad)
pop
jl
xor
in
out
pop
dec
xchg
pop
and
daa
adc
iret
adc
mov
cmp
cmp
out
inc
ret
je
adc
ds
aad
fistp
add
and
or
loop
mov
shl
cmps
jge
retf
imul
not
ss
repz
jns
repz
jno
in
(bad)
loop
add
movs
or
push
dec
in
mov
ds
js
mov
push
js
div
mov
dec
(bad)
cmp
or
jmp
lds
ret
(bad)
sub
mov
imul
add
mov
mov
movs
lods
jne
push
pop
aam
les
outs
cwde
test
stc
out
cmp
cli
inc
int3
xchg
jae
dec
leave
pop
dec
test
jo
bnd
mov
aaa
xchg
adc
pop
cmp
dec
sbb
sbb
inc
push
fnstcw
or
adc
imul
sub
sahf
pop
into
push
movs
mov
pop
cmps
fist
retf
(bad)
in
mov
aam
dec
inc
sbb
movs
lds
sub
or
xchg
xchg
loop
mov
repnz
xchg
retf
sar
xchg
sbb
aad
jge
xor
test
mov
mov
xchg
ret
mov
and
or
repz
mov
mov
les
fnsave
jo
lahf
dec
and
repnz
retf
inc
inc
adc
inc
push
sahf
mov
and
addr16
aad
cmps
imul
cmp
sub
xchg
jecxz
dec
pop
aas
inc
mov
shl
inc
xor
(bad)
fisttp
jg
xor
or
scas
les
mov
push
dec
push
mov
jg
in
inc
pop
or
out
xchg
fdivr
ins
dec
ficom
je
ret
ror
test
es
scas
inc
jl
cld
push
lea
xchg
dec
outs
push
pop
sbb
rcl
add
fidivr
push
xor
mov
cwde
xor
xchg
sub
xchg
enter
or
push
push
sahf
adc
xchg
sub
movs
inc
imul
sub
lock
loop
inc
mov
dec
ret
sti
arpl
push
and
out
adc
out
cwde
jl
jmp
cmp
mov
pop
adc
fistp
or
xor
out
mov
mov
lods
retw
jle
add
pop
jo
data16
ss
test
jge
cs
sub
or
bound
mov
adc
loope
mov
in
rcr
cmc
push
js
adc
mov
mov
ins
mov
mov
pop
adc
push
(bad)
out
pusha
int
add
xchg
leave
and
nop
mov
sub
dec
rcr
out
push
xor
add
repz
retf
lods
ins
jge
xlat
dec
pusha
std
inc
out
cmp
and
ja
cs
mov
pop
sbb
sbb
iretw
lods
or
inc
mov
dec
scas
out
add
adc
imul
xchg
cmp
daa
or
in
mov
mov
xor
pop
push
ss
mov
add
dec
stos
xor
mov
rol
mov
inc
mov
dec
or
stos
jle
idiv
and
dec
mov
rcr
(bad)
jg
loopne
cmc
sahf
test
bound
lea
adc
aad
cli
inc
shl
add
pop
pusha
hlt
sahf
mov
outs
clc
rcr
adc
ret
sbb
stos
arpl
mov
or
mov
push
mov
inc
test
jne
push
pop
xlat
cli
mov
xor
push
test
std
lock
sub
imul
fsub
jne
jg
jmp
test
test
ja
(bad)
lea
in
inc
mov
or
jo
mov
push
xor
scas
xchg
loope
mov
pop
ins
or
push
adc
retf
rcl
add
(bad)
inc
jl
cmp
nop
jae
sbb
mov
jmp
out
pop
imul
pop
lods
inc
dec
pop
scas
dec
pop
(bad)
jl
pop
aam
scas
test
rol
sbb
sbb
add
sbb
xor
push
cdq
adc
xchg
cmps
in
in
dec
outs
mov
stos
lods
pop
(bad)
iret
mov
(bad)
fidivr
(bad)
cmps
aad
mov
int3
loop
or
fimul
or
aam
jo
aam
std
add
jg
push
jecxz
push
jnp
jecxz
in
xchg
mov
cmp
aad
sbb
or
cwd
cmps
in
jne
cs
lods
pusha
fnstsw
test
aas
jge
ja
and
icebp
xchg
loope
and
fadd
int3
mov
push
bound
adc
sub
scas
or
inc
popf
ins
jnp
mul
dec
retf
shl
inc
js
sti
push
fisub
pop
ret
daa
pop
sbb
jle
mov
or
out
ret
and
aaa
cmp
lds
cmp
mov
rol
add
stos
retf
xor
mov
idiv
pop
shl
add
call
mov
xor
popa
or
xchg
push
retf
sub
(bad)
mov
pop
push
jmp
outs
in
pop
mov
cmp
cmp
sbb
xchg
jbe
jno
sub
push
ss
cmps
out
xor
fisub
pushf
movs
sbb
push
in
in
push
sbb
xor
mov
add
push
fcmovb
mov
cmp
gs
or
jge
in
lock
ror
xchg
shl
jno
arpl
mov
push
leave
mov
or
mov
dec
stc
in
cmp
rcr
mov
inc
cmp
ins
not
outs
jbe
movs
pop
cmps
in
sub
dec
test
dec
outs
xchg
sbb
pop
xchg
mov
scas
gs
loope
jmp
(bad)
arpl
cmps
add
pop
cs
ja
mov
(bad)
daa
or
fisub
es
ror
mov
sti
jg
push
out
jno
and
push
or
push
out
ins
hlt
fwait
dec
fadd
cmps
xchg
addr16
nop
xor
pop
int3
xlat
jle
inc
enter
mov
fisub
sub
cmp
adc
aas
xchg
jne
push
pop
sbb
ja
into
pop
fidivr
retf
jo
dec
mov
call
(bad)
lds
xlat
scas
jmp
inc
std
lods
pop
call
push
cmp
lods
sub
jo
ret
jnp
scas
push
inc
mov
mov
fwait
mov
add
jl
mov
push
cmp
dec
imul
into
bound
icebp
iret
push
pop
inc
pop
out
or
pop
pop
(bad)
shl
and
sti
xor
out
mov
scas
mov
add
repnz
push
aas
push
div
push
inc
movs
loop
push
or
xchg
dec
(bad)
push
ins
xchg
inc
scas
inc
not
push
mov
mov
push
repnz
sub
adc
dec
adc
fwait
add
inc
sub
(bad)
adc
cmp
ret
jmp
cmps
iret
cmp
(bad)
add
mov
ror
arpl
mov
xchg
inc
stos
xor
pop
add
ficom
inc
pop
adc
inc
scas
in
enter
fnstcw
mov
call
pop
je
rol
idiv
jno
ret
(bad)
lods
scas
and
bound
push
xor
enter
out
push
push
setno
cs
leave
xor
mov
push
lock
or
mov
jmp
sar
call
out
retf
jecxz
or
bound
int
or
mov
ret
out
push
dec
iret
ficomp
cs
call
fisubr
jae
mov
sub
xor
inc
ror
movs
pop
ret
jle
push
pop
xchg
pop
sti
dec
aas
jne
dec
stos
pusha
sub
and
pop
addr16
mov
rol
xchg
push
and
iret
mov
cwde
ret
(bad)
add
inc
add
mov
mov
jmp
test
out
mov
xchg
test
adc
xchg
sub
or
mov
and
fidiv
ja
cmps
jbe
aas
ins
mov
call
or
popa
jmp
test
enter
pop
aad
or
(bad)
xor
mov
or
rcr
stc
ss
mov
cmp
mov
(bad)
iret
int3
enter
push
mov
jb
and
sub
jge
mov
out
sahf
nop
ja
stc
ins
repnz
or
mov
les
adc
jo
add
ret
push
and
xchg
leave
ins
cmps
(bad)
jecxz
mov
cmp
xor
jg
hlt
mov
clc
add
push
out
cmc
das
retf
cmps
in
std
mov
sub
enter
enter
jae
pop
pop
es
in
push
repz
mov
pop
ficom
push
cmp
fisub
jle
mov
fild
shl
daa
retf
jl
mov
call
inc
out
bound
and
dec
fs
scas
(bad)
cmp
pop
(bad)
fwait
popf
test
dec
push
sub
stos
pop
hlt
xchg
aam
push
push
sar
sbb
cmp
pushf
and
imul
inc
xlat
push
sbb
and
pop
pop
addr16
push
sbb
mov
clc
ja
movs
nop
in
inc
sbb
jo
xchg
cs
mov
push
je
cld
inc
push
dec
jne
jnp
in
outs
sub
int3
mov
loope
cmps
ins
inc
inc
pop
adc
loop
and
inc
add
xchg
sahf
inc
xlat
mov
shl
test
fs
out
pusha
clc
sbb
sbb
shl
imul
test
xchg
push
shl
enter
add
pop
je
mov
mov
jo
test
movs
daa
enterw
lock
aam
fdiv
in
(bad)
sahf
call
repz
iret
cmp
and
mov
push
mov
in
jno
mov
ss
neg
add
outs
push
sub
repnz
inc
add
aas
fiadd
xchg
sbb
inc
sti
ins
or
mov
sub
loop
dec
loopne
stos
jl
mov
adc
add
dec
cmp
jge
cmp
dec
jnp
or
(bad)
retf
jnp
clc
inc
loopne
add
push
cs
or
addr16
mov
sub
cmp
stos
iret
sbb
jo
fimul
xchg
(bad)
mov
pop
lock
xor
frstor
dec
arpl
icebp
add
sub
fimul
sbb
mov
imul
test
push
cs
movs
mov
sar
inc
pop
jnp
into
sub
adc
arpl
mov
adc
sbb
fld
mov
call
inc
add
(bad)
outs
pop
lods
rol
pop
sub
popf
mov
cmp
pop
(bad)
cmps
lods
and
rep
dec
mov
sbb
fwait
mov
add
loop
test
loop
dec
out
jge
mov
shl
jo
mov
aaa
add
cwde
leave
pop
xchg
cmps
popa
(bad)
jb
sbb
out
jno
retf
sub
test
repnz
xchg
(bad)
(bad)
test
shl
fild
adc
mov
xchg
or
aad
or
adc
lods
jo
xor
jo
mov
or
jno
pop
push
aas
jp
cmp
or
inc
dec
jb
mov
pop
test
cmp
lahf
test
jge
inc
dec
xor
pop
inc
push
lods
std
push
(bad)
mov
push
in
imul
sbb
inc
and
mov
and
mov
shr
leave
int
retf
xor
call
sub
nop
mov
cmps
ffreep
push
pop
jl
(bad)
ror
or
jbe
or
mov
mov
rep
bound
xchg
push
mov
sbb
sub
mov
aas
fsubr
std
pop
mov
dec
push
leave
ss
pop
mov
sub
mov
jno
mov
es
mov
add
jbe
adc
addr16
push
loopne
ja
sbb
loope
aas
xchg
lods
add
mov
push
loopne
fwait
pop
inc
sub
pushf
sub
pop
mov
and
jl
cli
cmp
mov
lods
or
mov
int3
bnd
push
pop
daa
and
jbe
dec
scas
adc
xchg
xor
adc
aad
iret
stc
dec
or
add
stos
jmp
out
inc
mov
and
jge
or
lds
lods
es
fldenv
xor
or
mov
mov
add
sub
arpl
jl
outs
call
les
and
ffree
jbe
mov
aam
inc
pop
sbb
scas
in
ss
dec
adc
call
rcr
xor
daa
call
mov
addr16
leave
xor
sbb
mov
sbb
push
(bad)
ins
mov
push
stos
loop
gs
add
push
jno
cmp
jle
sar
sbb
add
sub
inc
xchg
dec
xchg
jmp
cs
or
popf
add
cdq
gs
loop
sbb
mov
push
out
stos
pop
jmp
pop
inc
pop
lods
sub
nop
sbb
repnz
popf
cmp
leave
jl
je
stos
lods
add
lods
sub
mov
gs
test
mov
adc
and
hlt
dec
cmp
cmp
sbb
rcl
das
mov
mov
test
xchg
jg
(bad)
addr16
sub
xlat
ss
pop
and
test
or
sub
sbb
mov
data16
or
leave
adc
scas
inc
ret
adc
dec
sti
in
fistp
cli
xchg
into
jge
mov
clc
enter
in
mov
mov
stos
inc
pop
or
and
shl
fild
jmp
push
sahf
push
icebp
mov
jp
or
mov
in
retf
call
rol
sub
add
pop
shr
add
test
inc
xchg
cli
fst
mov
retf
cdq
dec
(bad)
jecxz
sub
pop
push
sub
call
and
mov
dec
in
push
adc
push
enter
sbb
vmwrite
mov
in
ss
add
enter
adc
jno
(bad)
ins
mov
mov
stos
cwde
xor
cmp
or
jg
sbb
pop
ret
fsubr
movs
retf
sub
das
cmps
pop
mov
and
jmp
dec
and
cmp
ret
inc
sbb
mov
das
pop
jb
aaa
pushf
mov
jnp
sbb
ficomp
pushf
shr
xchg
icebp
bound
fwait
pop
pop
in
scas
pop
fdivr
iret
out
hlt
jbe
push
sub
cdq
shl
cmp
in
mov
dec
outs
adc
cwde
shl
(bad)
push
addr16
inc
data16
shl
aaa
cli
sbb
aad
ret
jne
fwait
scas
stos
mov
mov
add
scas
aas
outs
xchg
gs
dec
sbb
jmp
mov
int
imul
xchg
jge
pop
xchg
das
fsub
inc
not
mov
jo
gs
fsub
(bad)
dec
add
lds
inc
call
ds
jecxz
sbb
push
repz
pop
daa
mov
pop
ret
mov
stos
xchg
fsubr
stos
push
shl
cmp
in
jl
retf
ficomp
movs
in
cmp
mov
cmp
sahf
retf
dec
mov
jb
jne
mov
adc
imul
pop
pop
jo
not
or
pop
call
sahf
mov
test
mov
xchg
ins
xor
fwait
jae
pop
push
inc
inc
sub
fstp
push
rcr
push
xchg
push
rcl
pop
fwait
inc
in
xchg
popf
jle
ds
cli
jmp
lahf
sbb
cmps
jno
or
mov
sar
xor
cmp
jo
mov
mov
pop
xor
mov
retf
inc
sub
inc
in
fnstcw
call
push
fcmovnb
add
imul
sub
mov
cmp
mov
mov
or
(bad)
jp
mov
dec
push
sbb
mov
adc
fcomp
mov
mov
jns
cmc
xor
jecxz
sbb
mov
(bad)
repz
test
(bad)
jnp
sub
mov
sbb
aas
xchg
not
mov
call
les
mov
nop
fwait
pusha
inc
add
loop
cld
in
retf
sti
dec
pop
lahf
aaa
data16
stos
or
adc
mov
(bad)
xchg
pandn
(bad)
jmp
push
mul
retf
jmp
cmp
cmp
test
xchg
outs
call
inc
test
jb
sbb
mov
in
pop
ja
mov
sahf
inc
(bad)
mov
jne
jmp
popa
dec
or
push
mov
fild
ret
xor
adc
cmp
inc
loope
out
xchg
aam
lods
push
mov
push
dec
sub
iret
pop
sbb
mov
push
lock
dec
mov
inc
cmp
in
test
sub
in
addr16
cli
aas
mov
fsub
imul
sub
mov
inc
retf
cmps
pusha
es
cmp
xchg
cdq
int3
push
bound
clc
push
push
push
popa
cmc
iret
rep
scas
pusha
aaa
push
xor
inc
scas
out
icebp
xchg
adc
repz
into
ja
pop
pop
mov
adc
pop
out
mov
out
cs
push
xor
push
pop
out
inc
popf
fistp
mov
repnz
and
pop
cs
fmul
sub
add
out
pop
sub
jecxz
cld
xchg
fisttp
fwait
xor
popf
retf
inc
push
inc
dec
aad
mov
push
out
cwde
jp
loopne
or
push
test
cli
xor
imul
pop
inc
pop
test
stos
and
fldcw
push
adc
or
pop
xor
and
ins
stos
ss
(bad)
sahf
aaa
sahf
inc
jge
jge
arpl
dec
outs
and
cmp
js
mov
(bad)
ficom
xor
repnz
jno
sub
ficomp
loop
mov
outs
inc
aad
mov
popa
xchg
sbb
dec
std
jae
push
mov
retf
test
jbe
xor
mov
inc
mov
add
inc
loopne
xor
call
call
rol
mov
aaa
mov
call
inc
xlat
ss
xchg
movs
sahf
int3
aam
std
jb
test
and
inc
int3
jnp
push
hlt
rol
sbb
adc
mov
jae
sbb
push
sbb
sbb
sbb
push
fs
xor
scas
test
jp
dec
neg
out
aaa
push
jae
cmp
mov
cdq
adc
ret
and
jo
daa
ins
add
loop
mov
cli
out
cmc
scas
in
fwait
adc
fnop
xchg
data16
repnz
iret
inc
fimul
mov
imul
shl
xchg
pushf
(bad)
dec
inc
rcl
inc
cmps
sub
mov
pop
jecxz
xchg
dec
movlhps
mov
push
out
push
dec
scas
push
mov
aaa
retf
jg
shl
bound
je
pop
sub
lea
shl
in
xchg
(bad)
adc
mov
mov
push
inc
outs
sbb
push
push
xor
addr16
cmp
lods
clc
hlt
arpl
xor
jge
cmp
test
add
(bad)
iret
cmp
clc
sbb
add
sti
packsswb
mov
pusha
mov
jns
stos
std
mov
pusha
push
jmp
cmp
mov
sub
mov
(bad)
mov
sahf
aam
mov
in
(bad)
ds
gs
mov
or
mov
push
stos
mov
sbb
xchg
mov
test
xchg
in
inc
pop
sbb
mov
into
(bad)
cmp
popf
mov
movs
(bad)
pop
call
push
or
scas
fs
icebp
mov
add
inc
xchg
add
daa
cmc
or
push
xchg
popf
dec
sub
push
add
or
jne
rcr
mov
jg
test
mov
movs
nop
xor
pusha
mov
test
push
ds
pop
popf
or
cmp
out
mov
and
int3
cli
mov
scas
pop
inc
dec
and
inc
xchg
pop
imul
dec
mov
scas
loop
dec
cmp
push
(bad)
fld
icebp
(bad)
jo
cmps
imul
retf
aam
fist
std
xor
in
pop
xor
mov
in
xor
sub
jae
cld
cld
jbe
jmp
mov
mov
push
or
int
lock
out
mov
mov
lock
lds
imul
cmp
mov
dec
cmp
test
aaa
or
sbb
xlat
cld
fld
mov
lods
scas
ins
imul
repnz
(bad)
jbe
fld
adc
cmp
dec
pop
mov
fmul
movs
mov
jmp
cmp
mov
xchg
data16
rol
mov
and
push
cmp
in
sub
sbb
add
hlt
sub
add
inc
sub
inc
ss
inc
(bad)
std
and
aam
cmp
loopne
mov
xchg
popa
sbb
dec
sub
(bad)
(bad)
and
(bad)
jl
ins
repnz
jbe
push
jns
sahf
or
test
hlt
mov
in
sbb
mov
out
fcmovnb
stos
cmp
sub
or
(bad)
jl
sti
addr16
dec
sbb
shl
sub
in
pop
mov
pop
sub
(bad)
dec
cld
push
mov
add
sub
add
shl
ret
stos
bound
lock
add
aam
ret
mov
sub
cmp
jp
xchg
fiadd
mov
mov
push
int
jecxz
fistp
cmp
jmp
out
push
ret
inc
sbb
test
fst
pop
iret
adc
fidivr
addr16
add
cmc
mov
in
outs
out
sub
jge
pop
cmp
pop
mov
mov
push
inc
ja
test
or
mov
mov
xor
cli
bound
jne
mov
repnz
pop
adc
mov
push
sub
sbb
jp
aas
jge
gs
sahf
mov
lahf
into
pop
jmp
fmul
(bad)
push
xchg
imul
mov
std
out
out
pop
dec
ins
pop
enter
or
adc
pop
push
out
je
jmp
(bad)
xchg
sbb
add
dec
shl
hlt
cmps
pcmpgtw
mov
sti
cmp
push
or
add
sub
pop
jp
stc
out
xrelease
pop
ins
jne
inc
outs
test
jl
xor
dec
leave
jl
outs
sub
arpl
jge
inc
pop
fwait
jbe
outs
pop
out
or
and
imul
xchg
dec
xor
lock
aad
pop
into
push
or
popf
cld
js
shr
cmp
fisub
bound
fcom
add
push
cmp
cmp
dec
pushf
arpl
add
fistp
out
inc
aas
xor
mov
lock
movs
mov
in
sahf
lods
fadd
test
std
or
or
inc
not
(bad)
sbb
or
retf
dec
repz
push
mov
pushf
and
pusha
in
pop
in
adc
lods
mov
jle
push
push
or
scas
out
mov
pushf
dec
mov
sbb
hlt
cmp
leave
jbe
sbb
mov
in
jo
jmp
cmp
mov
sub
cs
test
mov
sub
mov
jle
shl
mov
dec
adc
push
dec
shr
cld
dec
call
sub
mov
fwait
sbb
and
aaa
mov
xchg
xlat
sub
add
xchg
mov
js
mov
inc
aad
sti
xor
jl
ss
aas
fs
adc
adc
xchg
or
dec
pop
lds
aaa
sub
fsub
mov
xlat
mov
sahf
fidivr
push
mov
arpl
sbb
sbb
cs
xchg
ds
and
cmp
push
(bad)
leave
fdiv
sub
out
aas
cmp
sbb
scas
fsubr
out
popa
mov
add
popf
pop
mov
pop
jg
loop
inc
bound
mov
inc
inc
lods
jge
xor
mov
inc
dec
clc
inc
dec
mov
add
repnz
(bad)
fsub
std
mov
mov
pop
mov
(bad)
push
add
sub
xchg
jge
add
push
fdivr
enter
in
jmp
jno
pop
outs
xchg
cdq
push
add
leave
mov
push
dec
outs
(bad)
pop
stos
add
call
fcmovnu
xor
sub
mov
xchg
nop
jae
es
mov
in
mov
cmp
fild
xor
xor
pusha
mov
fiadd
xor
inc
loope
mov
add
repnz
adc
xor
sbb
mov
inc
dec
and
mov
mov
jb
sbb
dec
dec
clc
and
or
dec
or
xor
mov
push
or
push
add
adc
cld
dec
test
(bad)
call
clc
push
test
push
prefetch
or
ins
sbb
xor
push
dec
and
sbb
sub
data16
sbb
dec
les
ss
add
fidiv
jge
movs
(bad)
or
or
nop
inc
dec
(bad)
inc
and
inc
lock
sub
push
add
mov
fidivr
xor
mov
or
or
push
push
ret
shl
dec
inc
mov
pop
jno
in
push
xchg
sbb
mov
mov
pop
pushf
leave
push
out
jp
icebp
add
push
aam
sbb
jb
popf
xchg
mov
(bad)
(bad)
cmp
pushf
cwde
sbb
out
(bad)
jmp
pop
aas
fbld
add
in
jle
mov
pop
add
mov
pop
out
retf
das
dec
dec
test
xor
test
sbb
leave
mov
(bad)
shl
mov
push
pop
movs
adc
adc
push
cwde
add
jmp
push
cs
sbb
push
xor
sahf
aam
inc
xor
scas
xchg
addr16
sub
in
sbb
pop
popf
mov
mov
jns
arpl
xor
or
dec
aad
jb
mov
inc
dec
shl
ror
jb
xor
or
fld
not
pop
shl
cmps
xor
nop
dec
pop
and
dec
pop
pop
add
retf
jno
ja
xchg
add
add
sbb
push
push
lods
dec
fcom
pop
mov
shl
cmps
and
clc
ja
add
pop
aad
out
jle
xchg
sahf
adc
xor
xchg
bound
mov
loop
cmps
xchg
out
or
mov
aad
cmp
adc
dec
pop
ror
and
inc
xor
repz
lock
in
add
outs
mov
(bad)
into
cmps
in
cmp
cmp
jbe
lds
inc
cwde
cdq
and
jnp
adc
gs
xor
dec
sub
and
rcr
mov
scas
sbb
jns
cs
and
pusha
add
inc
push
add
rcr
mov
and
movs
adc
test
retf
lods
jmp
rol
je
addr16
fiadd
push
mov
adc
ss
or
mov
jns
adc
cmp
lea
retf
pop
or
shl
fidiv
adc
xor
mov
retf
scas
jbe
jp
add
arpl
imul
addr16
xchg
push
jl
adc
push
jo
jmp
push
mov
push
cld
adc
mov
call
fdivr
xor
sub
neg
inc
cmps
and
cs
adc
xchg
stos
in
daa
or
mov
sub
ret
mov
dec
pop
pusha
inc
xchg
pop
retf
test
and
shl
sahf
mov
imul
stc
bound
outs
dec
je
inc
dec
repz
cli
icebp
(bad)
call
xor
nop
fidiv
sub
dec
test
mov
call
mov
test
gs
repnz
js
das
push
leave
mov
lea
and
outs
cmovns
add
scas
pop
adc
pop
jge
xchg
into
and
out
stos
rcl
xor
jmp
jno
test
cwde
das
cmp
aad
adc
add
fsubrp
push
xor
std
mov
xchg
pushf
neg
test
sbb
fistp
push
gs
jg
es
pop
adc
std
mov
in
inc
ret
icebp
popa
inc
pushf
icebp
(bad)
mov
mov
push
pop
add
movs
out
xchg
dec
xchg
std
mov
xlat
adc
icebp
push
sub
cmp
or
jl
mov
mov
mov
cmps
add
(bad)
fnsave
cmp
lahf
stc
push
hlt
add
sbb
push
fwait
mov
mov
jmp
ss
lds
ja
jge
dec
and
xor
push
push
and
add
push
jae
cmp
push
sbb
jne
in
or
das
stc
sbb
mov
pop
dec
dec
xchg
xchg
jl
sub
xchg
jb
repz
mov
adc
adc
aam
push
das
pop
xchg
lea
inc
ret
mov
inc
xor
or
mov
stos
cmps
in
pop
mov
daa
rcl
pusha
mov
dec
fnsave
lock
xchg
or
push
ficom
ret
enter
lock
je
push
hlt
mov
add
dec
inc
xchg
xchg
in
mov
ins
loopne
stos
cmp
push
mov
ja
sub
xor
cmp
fsubr
dec
data16
repnz
dec
add
jg
out
fcom
mov
cmp
out
cmc
scas
in
dec
es
repnz
mov
stc
into
in
aaa
mov
dec
pop
and
in
sub
dec
jl
mov
enter
scas
add
dec
pop
call
cli
jmp
outs
xor
push
pop
rcl
in
push
pop
daa
mov
adc
adc
ins
not
pop
push
xor
jns
push
in
jno
lock
xor
and
fs
mov
ret
aam
aad
adc
add
call
mov
push
(bad)
fidiv
dec
add
pop
imul
mov
cwde
jle
mov
adc
outs
(bad)
out
mov
les
fadd
or
dec
loopne
cmps
ds
icebp
or
push
mov
xchg
push
(bad)
push
cmps
sub
popf
jle
stos
fxch
mov
test
or
int
rep
jl
retf
aam
icebp
mov
mov
mov
adc
mov
cwde
imul
fsubr
mov
jnp
out
mov
adc
jge
es
ss
jb
pop
mov
jle
icebp
dec
sbb
add
fnstenv
js
mov
adc
inc
std
nop
jecxz
test
pop
jecxz
loopne
mov
into
fcmovnu
sbb
inc
push
(bad)
movs
test
or
mov
test
sub
je
shl
add
dec
inc
out
pop
addr16
dec
and
loopne
ds
pop
fadd
xchg
sbb
mov
pop
mov
inc
neg
fdiv
int3
neg
xchg
sbb
or
nop
fadd
push
cli
mov
pop
ficomp
cmps
leave
dec
mov
xchg
lods
mov
mov
mov
jo
std
movs
xchg
and
clc
inc
fwait
dec
sbb
stos
loopne
sbb
jle
fbstp
scas
jmp
cmp
fsubr
call
out
pusha
in
push
ja
mov
jmp
scas
mov
bound
es
out
ins
inc
fild
stos
mov
xchg
mov
ins
shr
in
jns
lods
sub
ss
sbb
notrack
and
retf
push
cmc
jge
jp
xchg
inc
xor
or
pushf
js
mov
lock
lea
xor
jmp
inc
scas
inc
int3
rol
xor
jns
dec
not
sub
ins
shl
scas
adc
or
and
mov
jg
out
jg
(bad)
sub
or
test
mov
popa
mov
push
cmp
std
jg
cmp
cmp
jmp
data16
cs
jp
dec
mov
sahf
ret
pop
jg
jbe
mov
jnp
sub
add
fwait
push
pop
shl
sub
pop
sub
ins
inc
sub
jle
loopne
jnp
pop
int
(bad)
repnz
pusha
stos
mov
out
icebp
pushf
mov
jnp
fisttp
xchg
xchg
jbe
xchg
mov
xor
mov
nop
and
jl
fbstp
sti
hlt
loopne
jnp
stc
shl
inc
ffreep
push
iret
lods
jle
push
loope
jp
xchg
xchg
sub
mov
sub
retf
mov
enter
xor
bound
sub
sbb
mov
in
js
repz
inc
xor
loopne
cmp
pop
mov
test
stc
adc
das
mov
mov
fadd
or
sar
mov
cwde
pop
and
xchg
mov
jae
cmp
and
cmp
clc
inc
(bad)
xchg
fist
ret
mov
sbb
ficom
sub
leave
shl
sub
dec
or
icebp
cmps
dec
cs
xchg
sub
xchg
stos
or
outs
sub
mov
nop
adc
shr
lods
push
xor
loope
xor
xor
jae
adc
pop
aaa
aaa
shr
jl
add
in
in
lds
ins
pusha
cmp
clc
inc
xor
ret
inc
xor
sahf
inc
jno
push
sbb
or
popa
jno
dec
inc
cmp
inc
mov
pop
repnz
xor
out
int3
out
push
(bad)
xor
pop
sub
mov
ficomp
shl
sub
sar
mov
sub
inc
pop
mov
inc
pop
push
gs
jae
inc
lahf
push
mov
js
(bad)
in
jmp
mov
pop
(bad)
adc
fsubr
(bad)
sbb
cdq
sbb
sub
popa
popf
adc
inc
ds
jno
pop
mov
add
xor
lea
(bad)
xor
jno
xchg
outs
(bad)
sub
pop
aas
and
jne
add
(bad)
xor
push
push
jae
jg
or
xor
mov
inc
inc
push
out
jl
add
mov
mov
sbb
sahf
or
rcl
fst
xor
add
bound
nop
push
inc
jg
loop
dec
sub
fisttp
pop
sbb
(bad)
call
cmp
pop
xchg
test
ins
sahf
sar
nop
stos
jns
sbb
pop
mov
sub
cld
inc
mov
cmp
mov
pop
ins
popf
cmp
cld
(bad)
jo
stos
and
cld
xor
pop
xchg
clc
add
jmp
jae
and
xchg
retf
out
pop
sbb
dec
add
repz
sub
iret
out
lds
in
jae
popa
xor
sbb
stos
inc
push
fild
jns
lds
pop
mov
int3
ret
in
and
inc
inc
std
jb
jp
pop
inc
adc
dec
fsub
fsubr
sbb
and
jne
aas
pop
dec
inc
push
stos
adc
mov
std
fucomp
test
cmp
dec
inc
or
out
nop
or
sbb
xchg
(bad)
int
xor
cmp
fimul
xchg
psrlq
icebp
int3
jb
pop
pusha
fwait
mov
hlt
je
xchg
xlat
lock
cmp
mov
int
sub
mov
and
pop
or
xor
pop
cmp
sbb
test
movs
cmp
mov
sbb
add
clc
sub
retf
lods
mov
bound
out
inc
rol
sub
jbe
dec
inc
xchg
jp
cli
sub
repz
mov
adc
dec
test
ret
pop
cmp
or
pop
hlt
dec
jp
sar
dec
mov
lahf
add
fdivr
sub
fidiv
mov
xchg
mov
xchg
nop
xor
pop
mov
aam
adc
inc
dec
fsqrt
stc
jb
retf
push
mov
and
pop
push
pushf
jg
cmp
sbb
retf
lock
cdq
test
test
mov
mov
mov
inc
xchg
mov
dec
pushf
mov
lock
dec
ins
adc
mov
fwait
aaa
mov
mov
jae
mov
pop
mov
je
xor
shr
aam
retf
(bad)
test
mov
cmp
fwait
add
ror
cmc
pop
inc
hlt
add
stc
les
movs
stc
push
fist
mov
call
retf
pop
sti
imul
arpl
sbb
xchg
fcom
cmp
call
jnp
je
scas
jmp
mov
fidiv
imul
pop
(bad)
jae
add
(bad)
lds
mov
jmp
pop
(bad)
daa
and
inc
sbb
xchg
aaa
mov
jbe
lods
and
rcr
add
jg
ins
sub
jns
fsubr
sti
mov
push
jl
scas
ficomp
mov
mov
idiv
loope
sub
outs
jno
push
push
sbb
cmp
pop
out
aas
stc
retf
lahf
cs
cwde
dec
fidiv
push
mov
sbb
loop
stos
mov
mov
std
adc
popf
xor
loope
mov
repnz
or
inc
xchg
call
ror
mov
sbb
push
sbb
add
sub
in
inc
mov
mov
sti
mov
and
xchg
dec
daa
cmc
mov
inc
mov
adc
test
xchg
jge
inc
dec
mov
mov
jecxz
xchg
movs
jno
retf
(bad)
sahf
sti
aad
push
(bad)
xor
leave
into
imul
test
or
mov
inc
and
sub
pushf
movs
test
push
fmulp
xchg
ins
sub
add
push
rcl
adc
or
cld
ficomp
xor
adc
retf
push
xchg
leave
sahf
ficomp
cmp
mov
and
pop
pop
scas
mov
xor
lods
jb
sub
cli
xchg
aad
and
in
scas
cmps
adc
mov
inc
aaa
mov
jbe
sub
cmp
mov
out
sub
aaa
sbb
pop
mov
sub
jbe
imul
jmp
imul
ins
push
push
jae
or
adc
inc
inc
divps
jb
jo
and
mov
mov
dec
push
cmp
sahf
jl
into
imul
add
push
sahf
pusha
call
loopne
add
pop
push
or
xor
int3
jg
add
fyl2xp1
add
cmps
xor
mov
mov
xor
bnd
pop
inc
or
dec
pop
clc
or
fstp
xchg
inc
call
or
push
jl
movs
push
movs
dec
mov
xchg
xlat
fcom
fisttp
out
mov
jle
or
sbb
out
inc
push
sbb
test
fist
pushf
xor
and
ror
dec
push
jl
scas
fmul
cs
xchg
popa
and
adc
shl
sbb
in
sub
and
mov
fisubr
aas
out
repz
sub
ja
lods
stos
das
jb
push
call
sbb
cmp
fadd
ins
lock
mov
daa
inc
mov
mov
inc
xor
cld
fucomip
cmp
or
mov
dec
jae
je
jecxz
fsub
or
movs
add
sahf
aam
jno
sub
rol
lods
xor
call
and
lahf
fcmovne
add
lea
imul
xor
loop
dec
jo
adc
or
lea
sbb
adc
adc
cmp
inc
mov
adc
xlat
sbb
mov
cmps
push
ret
std
inc
imul
call
add
cmp
int3
mov
pop
xlat
sbb
sbb
adc
push
je
push
imul
pusha
js
mov
dec
pop
sbb
mov
shl
enter
jbe
jmp
adc
mov
cmp
imul
or
mov
out
stc
sbb
(bad)
std
call
in
pop
leave
fcmovb
ret
jmp
test
xchg
pop
xor
je
mov
outs
fcmovnbe
xchg
shl
sub
mov
cmps
dec
imul
xor
ret
add
mov
mov
stc
inc
jp
xor
das
sub
arpl
test
cld
div
test
xlat
int3
pop
adc
adc
(bad)
das
xor
or
pusha
ficomp
inc
mov
pop
mov
push
mov
xor
xchg
rcr
or
adc
es
cmp
ror
mov
fimul
sbb
movs
jmp
inc
test
ror
adc
push
sbb
mov
mov
call
fbstp
push
add
cmp
inc
arpl
inc
imul
jne
fwait
xchg
dec
cwde
jnp
mov
mov
aad
(bad)
lahf
push
(bad)
and
popf
and
pop
test
xor
loop
adc
fcomp
outs
clc
mov
push
xchg
rol
fidivr
scas
and
push
push
loope
mov
jmp
xchg
add
pop
cwde
jnp
popf
push
dec
cld
push
adc
mov
sub
fwait
popa
mov
les
and
lea
fcmove
xchg
in
jnp
lahf
mov
cli
call
xor
das
inc
inc
pop
mov
mov
mov
jmp
sub
lahf
ins
outs
mov
aad
je
fnclex
test
inc
test
lar
je
outs
push
pop
stos
dec
pop
in
int3
push
cmp
jbe
xor
lods
xlat
repz
cmp
mov
add
mov
outs
xor
mov
(bad)
jbe
sbb
mov
in
and
mov
aam
lock
test
pop
je
aas
sub
(bad)
cmc
out
and
call
cmp
xchg
rol
fcom
jne
mov
add
fcmovnbe
xchg
(bad)
stos
(bad)
in
adc
in
mov
repz
mov
cmp
sub
mov
fist
add
mov
cmp
push
mov
scas
adc
pop
pop
pop
out
sub
idiv
mov
bound
and
mov
xor
imul
or
cmp
mov
pop
stc
mov
stc
in
jnp
fdiv
add
or
fst
ror
mov
pusha
scas
cmp
gs
push
(bad)
mov
sbb
ds
cdq
push
int
cmp
jmp
mov
retf
sbb
stos
fwait
and
ja
cmp
add
jge
or
mov
imul
in
push
stos
je
test
mov
inc
dec
or
fisub
mov
popf
xor
cmp
pop
stos
stc
out
jnp
imul
cmp
push
jb
mov
jmp
call
repz
idiv
in
xlat
sar
mov
cmp
sbb
clc
jg
popf
leave
jmp
out
xchg
data16
lods
in
rcl
enter
clc
fidiv
repz
stos
jle
and
das
std
jb
or
jnp
xchg
mov
fwait
rcl
mov
scas
clc
gs
sub
das
inc
rol
mov
and
lods
movs
pop
imul
(bad)
rcl
lods
les
inc
xchg
mov
in
fmul
aas
inc
push
fldenv
mov
dec
jmp
sub
adc
(bad)
sub
sbb
push
ret
arpl
sub
popa
aas
xchg
jbe
(bad)
xchg
imul
sahf
repnz
hlt
mov
je
cmc
or
push
cmp
and
and
mul
pop
push
mov
std
repnz
mov
mov
xchg
mov
cmp
add
cmp
lods
jno
fisttp
rcl
cmp
je
jno
mov
popf
aad
adc
inc
jg
xor
ret
in
outs
test
and
(bad)
cmp
jnp
test
cmps
inc
pop
jg
je
add
out
push
imul
inc
or
sahf
xor
mov
and
cmp
ffreep
loopne
xchg
retf
push
fs
mov
mov
inc
aad
test
outs
xchg
repnz
dec
enter
push
in
fnstcw
sbb
in
lds
call
pop
ret
lahf
jge
inc
pop
add
mov
xchg
jecxz
mov
(bad)
es
xor
mov
push
inc
fist
arpl
xor
push
add
push
xchg
mov
ins
adc
jns
and
(bad)
xchg
inc
fs
xchg
pop
scas
fisubr
cdq
jge
cli
xor
and
(bad)
xchg
pop
inc
mov
and
dec
imul
in
maxps
(bad)
dec
add
call
arpl
add
push
sbb
in
loopne
ins
cdq
imul
adc
sahf
inc
lea
pusha
jbe
movs
jns
jae
loopne
pusha
jae
rcr
add
call
movs
push
les
jne
movs
dec
repnz
out
and
rol
cwde
dec
and
push
push
pop
jge
xchg
pushf
sub
sub
cmc
movs
je
xchg
aad
mov
add
jle
inc
mov
xchg
or
jge
(bad)
push
add
dec
iret
repnz
and
sub
and
imul
pop
pop
test
push
sahf
in
xor
xor
xlat
loopne
sbb
jp
sbb
jo
test
pop
ins
cmp
inc
push
mov
stos
adc
(bad)
leave
and
daa
push
cmps
clc
mov
repz
jbe
push
std
ds
jg
adc
dec
adc
push
nop
ja
pop
lock
(bad)
lods
xchg
popa
mov
mov
aam
js
sbb
je
jo
js
ins
int
cmps
fsubrp
cdq
xlat
add
test
in
lahf
sbb
or
xor
cmp
pop
adc
push
jmp
shl
movs
test
ss
cmc
mov
inc
retf
and
in
jnp
icebp
(bad)
dec
sub
or
(bad)
int
fs
int3
std
xchg
fstp
scas
movs
xlat
dec
test
lea
sub
push
out
pushf
iret
retf
or
mov
xchg
in
hlt
xor
inc
movs
mov
sub
sbb
mov
jecxz
sbb
loopne
xchg
cmps
nop
mov
pop
dec
clc
aam
jbe
(bad)
bound
outs
fmul
jle
rcr
mov
jmp
dec
jmp
leave
outs
xacquire
cmp
int
stos
add
xlat
les
push
aam
out
fnstcw
push
clc
add
(bad)
retf
es
pop
push
lds
(bad)
repz
mov
and
iret
push
cmp
inc
sub
nop
loopne
jnp
repnz
or
add
mov
sbb
dec
test
(bad)
cmp
dec
jp
neg
idiv
je
jae
call
out
lahf
mov
add
add
fdiv
pop
iret
cli
and
test
lds
je
lods
popa
sub
push
addr16
sahf
xchg
pop
fidivr
shr
push
outs
addr16
mov
and
jmp
pop
fiadd
jbe
jae
repz
jmp
rol
adc
imul
inc
jne
cwde
gs
sbb
stc
aaa
dec
mov
pop
dec
je
lahf
cli
jnp
pushf
mov
enter
push
mov
in
mov
test
fwait
es
jmp
sub
xchg
ds
imul
add
xor
mov
pop
sbb
mov
push
jno
int3
jg
cmp
imul
jge
jecxz
adc
(bad)
repnz
or
adc
sahf
ins
and
and
mov
retf
jp
xchg
and
xor
outs
cld
shl
pop
div
mov
sbb
mov
mov
out
inc
add
rcr
jmp
gs
or
or
or
mov
fsubr
movs
jp
jmp
push
and
add
or
dec
lahf
jmp
cs
and
movs
jnp
adc
add
mov
dec
(bad)
arpl
pop
and
fnstcw
dec
cli
pop
xchg
xor
or
cmp
mov
xchg
xchg
mov
les
or
push
mov
in
rol
cs
movs
push
fwait
mov
ins
dec
or
idiv
and
pop
cmps
mov
pop
xor
pushf
mov
push
das
retf
and
push
or
or
outs
pop
dec
ja
out
fistp
or
adc
pop
icebp
movs
loope
pop
mul
and
iret
hlt
cmp
enter
jmp
fmul
int
imul
and
ret
loope
addr16
mov
nop
mov
ins
lock
repnz
xor
daa
shl
cs
mov
adc
fidiv
mov
push
hlt
cmps
loopne
mov
push
sub
retf
inc
popf
sub
test
cmp
xor
adc
fsubr
test
in
call
and
mov
push
mov
cld
hlt
adc
push
call
adc
test
jns
cmp
cld
jnp
mov
sub
hlt
adc
movs
xchg
stos
shl
in
dec
push
jb
scas
sub
fisubr
cwde
mov
adc
dec
test
into
mov
(bad)
test
mov
add
mov
cmp
mov
clc
(bad)
sub
dec
dec
or
jp
mov
fst
loope
adc
mov
mov
imul
ret
or
mov
add
shr
adc
sbb
or
add
stos
sar
pusha
in
xchg
sahf
retf
adc
sbb
lds
push
ins
out
repz
dec
retf
fnstsw
fidivr
stc
dec
xlat
xor
cmc
fwait
in
inc
add
fwait
xor
push
imul
pop
(bad)
rcr
stc
xor
and
popa
sub
pop
lods
mov
hlt
xchg
fisubr
mov
add
sub
push
jb
nop
sbb
jns
push
jecxz
jbe
adc
adc
imul
test
xlat
ficomp
mov
nop
int3
enter
cwde
jb
int
jnp
movs
pop
dec
add
jl
jmp
lock
(bad)
fst
retf
cbw
pop
mov
jmp
xchg
arpl
rcl
(bad)
into
mov
fcom
es
div
test
dec
pop
aad
(bad)
test
scas
push
scas
fucomip
xor
loope
push
sahf
pushf
inc
xchg
movs
cdq
aaa
and
cdq
retf
and
fstp
mov
aas
js
out
add
test
push
mov
lahf
lock
pushf
(bad)
adc
fisttp
jmp
and
lods
hlt
lods
sub
fldl2t
out
mov
cmp
out
xchg
fmul
lds
dec
jne
(bad)
add
pop
int
lods
stos
stos
dec
outs
pushf
lds
sahf
sbb
xchg
xlat
fsubr
dec
(bad)
and
jl
imul
jp
bound
fld
lods
inc
xlat
hlt
cwde
push
ficom
jae
scas
idiv
xor
imul
jp
imul
push
pop
mov
pop
jne
xchg
inc
test
pop
jb
fisubr
sbb
iret
push
mov
out
je
ds
shr
add
inc
add
ror
dec
fbld
sub
jo
idiv
sbb
int3
imul
arpl
pop
push
cwde
dec
stc
pop
imul
lods
imul
jmp
and
cmp
push
mov
add
call
pop
jno
add
push
fmul
cmp
xchg
sbb
inc
outs
adc
test
loop
mov
call
lds
cmp
(bad)
push
fld
retf
push
enter
mov
mov
or
pop
int
mov
pop
ret
or
call
xor
test
iret
inc
(bad)
pop
aam
pop
mov
movs
sub
cmp
pxor
aad
mov
dec
xchg
sbb
or
mov
push
or
in
sbb
xchg
clc
idiv
and
pushf
pop
xor
stc
cmps
adc
adc
cmps
cmp
pushf
xlat
bound
sub
retf
loope
adc
call
push
aas
in
call
dec
pop
add
and
daa
(bad)
push
ja
push
stc
push
daa
test
jmp
pop
xor
dec
mov
mov
imul
mov
dec
in
loopne
outs
jno
sub
out
adc
xchg
jb
sbb
nop
shr
push
cmps
push
mov
fidivr
pusha
iret
int3
add
lea
inc
jecxz
dec
daa
jae
(bad)
mov
cmc
loopne
fcos
add
lahf
leave
sub
jg
sub
push
je
adc
mov
nop
retf
jo
das
jb
push
fmul
daa
ja
mov
les
in
cmp
iret
in
retw
inc
pop
xor
xlat
push
jge
push
jmp
push
das
mov
and
cs
mov
xor
ror
mov
jle
lea
ins
iret
push
jl
inc
fucomp
gs
mov
jp
sub
xchg
or
mov
pop
cs
sub
bound
dec
push
enter
jnp
lea
dec
push
sub
adc
fwait
outs
stc
xchg
(bad)
daa
test
ror
es
ror
dec
iret
adc
xor
and
pop
leave
jbe
std
icebp
aas
retf
retf
jnp
ins
(bad)
in
leave
pop
mov
outs
daa
sub
and
lods
loop
mov
and
jns
xchg
adc
xchg
loope
in
xchg
ins
mov
push
fsub
aad
daa
lock
ret
icebp
(bad)
lahf
icebp
clc
ja
push
(bad)
fadd
mov
fmul
cmps
imul
in
cli
sti
dec
push
inc
push
xchg
clc
dec
and
dec
xor
dec
cmps
mov
outs
push
mov
fiadd
push
dec
push
(bad)
and
push
loopne
pop
mov
sbb
jmp
mov
test
jg
jle
inc
scas
inc
jno
dec
or
push
xchg
fadd
or
rcpps
cmc
push
mov
xor
sub
cmc
fnstenv
jne
jb
rol
mov
lds
dec
mov
maxps
call
dec
stc
leave
xchg
inc
push
mov
or
pop
fisttp
pop
adc
sub
push
xor
loope
jo
orps
mov
push
retf
aam
int3
in
repz
cmc
jo
gs
push
gs
xor
cmp
test
mov
scas
add
les
mov
retf
(bad)
cmp
xchg
addr16
adc
mov
mov
scas
mov
jl
sbb
pop
arpl
(bad)
xchg
neg
jge
leave
mov
test
or
cmp
pop
lahf
ss
es
jmp
(bad)
psubsb
js
mov
(bad)
sar
(bad)
push
call
fsubr
mov
pop
imul
ins
mov
sub
out
lock
shl
dec
idiv
not
(bad)
lock
aad
popf
mov
outs
rol
test
adc
cmp
pop
push
jmp
fs
xor
jns
fcom
ins
and
test
popf
jnp
inc
imul
rcr
adc
imul
push
cmp
push
inc
loope
cmp
xchg
mul
lods
out
(bad)
pop
inc
fdecstp
retf
push
ret
mov
add
fild
fadd
mov
dec
pop
(bad)
call
ins
adc
shl
mov
jns
cmps
dec
sbb
stos
pop
enter
push
leave
xor
sub
call
jl
inc
(bad)
sti
test
out
jge
cli
xchg
aaa
cmp
or
cdq
loop
push
jp
mov
sbb
cs
mov
jnp
(bad)
inc
jecxz
xor
jp
addr16
out
mov
inc
push
push
aaa
pop
sti
hlt
mov
iret
xor
loop
data16
int
and
outs
je
movs
stos
xlat
cmp
jb
mov
cli
sbb
int3
ins
fdivr
jmp
push
push
and
cmp
cmp
or
mul
push
dec
loope
push
push
xor
cmps
in
mov
mov
(bad)
(bad)
(bad)
in
imul
out
in
loop
mov
xor
mov
scas
inc
mov
mov
out
(bad)
icebp
les
test
in
(bad)
aad
mov
adc
(bad)
fild
movs
cmps
or
xchg
mov
dec
push
imul
stos
movs
ret
dec
fisttp
add
imul
lods
sub
gs
add
push
inc
inc
cmps
mov
cwde
gs
dec
outs
retf
adc
dec
adc
push
jo
cmp
mov
jmp
jb
int
loopne
add
fwait
fwait
scas
mov
cmp
in
in
pop
enter
std
jg
adc
loopne
pop
shl
xor
ror
mov
lock
out
inc
pop
pop
lds
push
outs
mov
loopne
push
sbb
in
imul
les
mov
ficomp
cld
ds
adc
ret
aad
cmp
iret
(bad)
outs
cmps
psubd
out
and
leave
mov
lahf
mov
aas
add
mov
pop
push
loopne
xor
movs
push
sub
lahf
fisub
jbe
push
push
mov
xor
cmp
sbb
and
xor
adc
mov
inc
mov
mov
mov
sti
jp
add
push
(bad)
scas
sub
sbb
inc
pusha
or
cmp
add
mov
call
jb
ss
fcomp
push
enter
cmp
loop
jp
inc
ror
cdq
mov
ficomp
scas
in
mov
mov
aad
popa
xlat
ret
arpl
mov
xchg
inc
sbb
or
cmp
adc
aaa
or
push
out
sbb
fisttp
xor
rcl
dec
in
sbb
mov
and
dec
sub
lock
ret
push
add
jle
cld
ins
hlt
lods
sar
stos
test
repz
leave
fdiv
push
mov
fsubr
cmp
or
mov
lahf
(bad)
cmps
(bad)
rol
or
in
jo
add
sub
inc
mov
xor
xlat
inc
fisttp
into
(bad)
repz
mov
in
or
std
xchg
sahf
and
iret
call
mov
pop
mov
push
inc
cdq
xor
sti
adc
stc
(bad)
iret
jle
xor
or
mul
neg
jmp
push
mov
ret
pop
retf
ds
and
mov
bound
xchg
and
fistp
fisub
cmps
retf
push
lock
inc
pop
sbb
mov
mov
push
inc
imul
fsubr
sti
xchg
lock
and
aad
adc
sahf
add
jecxz
inc
imul
cmc
push
test
in
sub
cdq
xor
je
sub
sbb
jmp
mov
ror
fild
xchg
pushf
inc
arpl
xlat
or
push
add
push
jecxz
jns
push
sbb
xchg
std
ret
mov
sub
mov
rol
dec
pop
or
pop
or
add
and
xor
pop
mov
mov
pop
and
stos
sbb
xor
sub
and
jmp
xchg
mov
idiv
pop
add
(bad)
stos
inc
dec
call
push
and
adc
stc
bound
in
lods
inc
sahf
mov
aaa
jnp
ds
mov
push
jg
mov
jbe
fdivr
fisubr
ret
mov
std
mov
sahf
stc
imul
gs
xchg
rcl
fdivr
cmp
(bad)
ins
dec
das
jmp
or
(bad)
pop
inc
shl
call
data16
dec
pop
mov
xor
daa
shl
xchg
cmp
push
hlt
cmp
lods
in
xchg
mov
adc
div
cmp
pop
mov
pop
mov
ds
push
sub
sub
sub
test
bound
mov
(bad)
cmps
inc
rol
mov
jl
push
xchg
xchg
out
push
xor
fidiv
sbb
ins
dec
cld
push
or
mov
mov
(bad)
sbb
lss
and
xchg
pop
test
mov
pop
mov
aad
cmps
(bad)
mov
xor
loope
jg
push
jns
sbb
rcl
and
cmps
inc
xchg
push
push
(bad)
and
mov
mov
arpl
imul
inc
xchg
mov
shl
scas
test
xor
or
sbb
test
shl
int3
add
mov
jl
je
lds
cmps
mov
fimul
push
inc
xor
or
xchg
pop
push
pop
dec
xor
mov
idiv
inc
je
aaa
cmps
cmp
sub
(bad)
loop
mov
add
fnsave
sub
sub
lahf
jae
mov
dec
jl
pop
xchg
sbb
add
or
inc
sar
or
add
ds
aam
xchg
fscale
inc
mov
loope
addr16
int3
adc
outs
sub
push
loop
ja
xchg
mov
in
imul
gs
cmp
mov
push
fbstp
inc
sub
out
jno
xchg
sbb
and
xor
dec
push
adc
push
bsr
pop
cmp
(bad)
cmps
cmp
jbe
lods
push
stos
add
and
sbb
fs
push
out
rcr
out
add
out
je
fild
adc
gs
mov
pop
in
cs
push
into
mov
add
push
jle
stos
xor
push
(bad)
gs
cmc
pop
push
xor
ja
inc
sbb
pop
sbb
push
add
loop
add
and
adc
push
mov
std
out
jae
sbb
cli
inc
adc
sub
(bad)
push
sar
lahf
cwde
add
inc
hlt
push
xor
inc
adc
push
add
pop
call
inc
repnz
push
cmc
mov
inc
shr
into
push
pop
or
in
enter
mov
(bad)
test
cs
xlat
pop
iret
imul
outs
outs
daa
xor
nop
fxrstor
pop
mov
ficomp
pop
(bad)
clc
add
cmp
movs
dec
mov
lea
ss
popa
retf
adc
ror
jo
mov
icebp
(bad)
repz
(bad)
scas
fcmovbe
call
ins
inc
out
fnstcw
in
jmp
imul
mov
inc
add
sbb
push
fwait
push
add
dec
in
stos
push
in
mov
mov
dec
cld
mov
in
arpl
xor
jg
inc
into
push
xchg
rol
sub
stc
lock
xchg
or
movs
pop
add
mov
fdiv
movs
stc
fxch
pop
(bad)
cmp
mov
sbb
xchg
mov
xchg
jmp
mov
mov
dec
cmp
push
imul
out
jnp
rcl
retf
mov
add
inc
lock
aad
mov
inc
push
pushf
imul
neg
in
dec
dec
ja
mov
je
and
adc
sbb
fisttp
das
mov
add
mov
jl
in
jne
out
movs
lds
xchg
movs
dec
call
push
fs
push
dec
rcr
pop
pop
mov
lahf
mov
sub
jbe
adc
add
jecxz
jno
pushf
jmp
not
aas
push
adc
div
mov
sti
jge
call
xchg
(bad)
add
push
test
push
jae
push
and
sub
cs
shl
js
xchg
pop
fldenv
jb
dec
(bad)
jo
test
jnp
pop
(bad)
into
dec
dec
cmp
jo
retf
ins
xlat
adc
imul
xchg
cwde
das
enter
scas
mov
mov
in
or
ficomp
das
ret
mov
outs
out
xor
add
jge
push
xchg
mov
sub
ss
(bad)
sub
push
arpl
call
loopne
(bad)
fisub
pop
(bad)
cmp
pop
sub
dec
push
in
jns
jmp
mov
fdivr
dec
push
cmp
fsubr
mov
adc
add
inc
(bad)
jbe
sbb
xchg
js
fisttp
sub
sub
push
out
mov
inc
pushf
jg
cmps
or
(bad)
dec
gs
daa
ret
mov
imul
wrmsr
mov
mov
(bad)
mov
daa
dec
test
jae
bound
xor
sbb
scas
retf
mov
dec
mov
xchg
adc
(bad)
fsub
xchg
push
xor
sbb
std
(bad)
adc
mov
int
jle
jns
lods
lods
mov
add
sbb
jne
push
hlt
xor
mov
outs
pop
fbld
pop
loopne
call
aam
outs
ins
xchg
cmp
bound
and
rol
iretw
cmc
retf
mov
mov
mov
xchg
xchg
cmc
mov
jns
(bad)
stos
enter
mov
push
imul
loopne
pop
add
pop
jmp
or
fs
pusha
popf
mov
fldenv
jl
out
pop
mov
xor
out
cmc
pop
es
jmp
mov
fcom
jo
dec
sbb
retf
fmul
movs
mov
test
mov
inc
jmp
cmp
retf
bnd
push
mov
data16
cmps
lahf
jmp
add
jle
repz
xchg
fcmovnbe
dec
pop
or
iret
fdiv
dec
dec
das
outs
out
stos
cs
mov
mov
cwde
xchg
icebp
xchg
fwait
outs
jecxz
sub
sub
mov
or
jo
pop
add
inc
mov
popa
int3
ror
mov
push
push
sbb
int
dec
sub
jecxz
inc
je
sub
mov
int
dec
mov
sysret
cmp
dec
clc
push
push
adc
inc
or
(bad)
cmc
ret
(bad)
xchg
cmp
pop
push
sbb
xchg
popf
retf
cmp
out
mov
jae
fucomi
fisttp
leave
imul
mov
or
loop
and
movs
pop
addr16
out
pop
ds
scas
retf
mov
fnstcw
sbb
push
dec
out
mov
adc
outs
mov
lods
repnz
iret
sub
ins
test
fisttp
push
(bad)
loope
push
retf
mov
out
mul
xchg
into
repnz
fistp
jno
sub
xor
jp
add
or
mov
cmp
out
bound
cdq
clc
cmps
and
icebp
push
(bad)
jg
bound
sub
aam
dec
mov
inc
imul
ret
cmc
imul
retf
daa
pop
aad
mov
lods
xchg
add
es
sub
aas
mov
movq
in
adc
mov
sbb
jb
movs
inc
sar
mov
mov
sub
or
mov
in
hlt
xor
mov
mov
es
out
data16
sub
or
cmp
movs
mov
inc
dec
lods
mov
fnsave
movs
pop
mov
mov
push
mov
push
jbe
jg
and
mov
(bad)
nop
cmps
xchg
lds
jecxz
xchg
push
sahf
(bad)
daa
cmp
mov
cmc
shr
cmp
mov
out
clc
outs
dec
jmp
loop
dec
arpl
pusha
in
xchg
mov
adc
retf
js
int3
dec
aaa
fcmovne
xchg
repz
iret
mov
stc
mov
shl
in
mov
push
jae
adc
sub
adc
in
icebp
adc
sub
dec
sbb
cmp
add
inc
(bad)
out
push
jmp
push
jne
jae
retf
jle
mov
stos
dec
mov
jmp
cmp
push
add
retf
inc
sbb
cmc
(bad)
sbb
sub
addr16
pop
adc
mov
ins
imul
dec
pusha
and
mov
mov
add
pop
retf
ins
aam
mov
es
das
out
nop
jns
repnz
cmp
icebp
push
mov
add
adc
xor
(bad)
mov
mov
jnp
sbb
(bad)
test
rol
xchg
mov
sahf
jg
pmullw
pop
and
icebp
inc
cmp
push
add
push
shl
stos
ds
repz
jmp
push
and
add
ins
mov
xchg
xchg
(bad)
ins
cmp
sti
push
sub
mov
in
repz
js
fcom
outs
mov
and
mov
pop
xchg
xor
fstp
mov
pop
push
fcmovu
fwait
or
test
pop
xor
fst
or
mov
test
jae
mov
das
sub
test
imul
cmp
mov
jae
out
xor
cmps
enter
in
cmc
xor
mov
sti
cmp
push
lods
ins
enter
jns
or
cmps
pop
mov
xchg
add
sub
sahf
jp
test
call
mov
pop
push
dec
lea
mov
sbb
push
std
stos
xchg
cld
hlt
cmps
(bad)
(bad)
fld
outs
out
adc
jne
imul
jne
jge
mov
pop
test
mov
mov
pop
push
xchg
and
mov
and
lds
jbe
sbb
jno
cmp
push
add
xor
loope
xlat
jb
movs
adc
es
push
push
pop
mov
jne
inc
push
cmc
push
fild
xchg
paddsw
and
pop
push
dec
lods
addr16
stos
add
inc
mov
jo
xor
xor
repnz
mov
call
push
call
jno
inc
ror
jl
mov
shr
aad
push
mov
daa
je
aad
cli
sbb
add
push
cmp
cld
add
ss
mov
inc
jnp
pusha
imul
dec
or
imul
pop
sub
sub
fs
repz
arpl
lods
pop
mov
xchg
push
mov
jecxz
sub
clc
(bad)
mov
inc
xchg
jp
mov
and
pop
adc
sub
outs
enter
addr16
pusha
mov
cmp
pop
aaa
push
dec
mov
push
ja
adc
push
mov
push
xchg
push
dec
aad
and
or
out
hlt
outs
scas
bnd
xor
dec
fimul
dec
icebp
inc
jg
nop
adc
test
mov
inc
ja
push
dec
mov
add
cmp
push
pushf
bound
add
das
inc
ins
cmp
xchg
cdq
cmps
sar
and
xchg
std
jae
cs
jae
sub
daa
repnz
jp
stos
lahf
fisttp
sub
mov
push
gs
ss
jo
mov
scas
psrad
jg
in
mov
xchg
xor
add
or
jns
mov
xchg
mov
std
cdq
add
add
jo
int3
loope
add
inc
ds
xchg
std
sub
jae
or
arpl
loope
outs
jmp
jbe
shl
xchg
push
sbb
mov
sar
es
out
jmp
xchg
mov
stc
or
push
pop
mov
jecxz
sar
pop
and
and
jg
test
or
fs
xor
rcr
cmps
mov
push
jecxz
dec
mov
aam
retf
or
(bad)
(bad)
fadd
cmp
inc
ds
in
hlt
imul
(bad)
bound
mov
sbb
sub
sbb
out
pop
mov
inc
int
outs
mov
cmp
mov
jp
inc
(bad)
in
push
and
push
pop
bound
retf
fimul
mov
(bad)
inc
outs
fnstcw
mov
cli
imul
push
mov
test
ss
repz
lock
add
in
add
test
loop
xor
les
push
into
into
jle
sbb
cvtps2pi
movs
cdq
repz
mov
adc
or
jp
scas
fld
cwde
call
neg
cmps
pop
and
mul
sub
fsubp
iretw
sbb
daa
xchg
lea
push
test
sbb
mov
or
xor
inc
iret
add
in
pop
xor
pop
outs
enter
jle
fwait
shl
aas
repnz
icebp
cmc
and
loopne
addr16
mov
ja
pop
push
fwait
dec
pop
test
dec
fwait
mov
push
inc
pop
test
jbe
push
inc
test
add
cdq
(bad)
daa
cmps
pop
leave
(bad)
pusha
xchg
mov
bound
pusha
movs
sub
cwde
hlt
pop
pop
sub
in
dec
push
cmps
xchg
lods
leave
icebp
and
dec
pop
fsubr
mov
test
mov
fisubr
sbb
hlt
ror
fcmovnb
retf
or
jecxz
lahf
sub
jnp
movs
dec
xor
(bad)
out
in
outs
pop
clc
int3
jno
or
test
dec
sysexit
test
js
es
retf
mov
ret
cmp
(bad)
arpl
cmps
aaa
cld
jmp
sub
xor
addr16
in
clc
pop
sub
mov
and
sub
mov
or
push
mov
mov
mov
xchg
fwait
imul
push
shl
sbb
test
lahf
retf
inc
clc
sbb
mov
bound
inc
mov
aas
daa
xor
scas
dec
mov
and
push
jle
bound
pop
jae
or
xor
sbb
mov
shl
scas
pusha
popa
cmc
add
mov
pop
dec
adc
sub
sbb
inc
pusha
or
gs
push
mov
dec
push
into
imul
or
jae
(bad)
mov
cmc
(bad)
xor
jmp
mul
and
mov
fs
in
lds
xor
inc
fimul
pop
mov
out
adc
lock
push
leave
pop
xor
movs
std
cmc
jecxz
sahf
movd
dec
mov
push
xchg
imul
sub
adc
and
mov
dec
sbb
frstor
cmp
je
inc
bound
xor
lods
push
xchg
pop
popf
pop
adc
pop
push
jmp
inc
xor
stos
dec
mov
iret
or
stos
sbb
ror
mov
std
sub
movs
add
clc
xor
fistp
mov
jb
inc
loope
mov
xor
inc
es
sbb
add
add
jmp
push
shl
xor
das
loopne
xor
mov
mov
call
or
mov
(bad)
xor
test
jns
not
fs
mov
dec
and
enter
add
movsx
jp
push
xchg
jbe
in
repnz
adc
cdq
adc
sbb
das
lods
call
iret
mov
data16
inc
inc
fidivr
retf
pop
sbb
mov
xchg
in
imul
jg
sub
pop
lea
cdq
jmp
mov
or
fs
pusha
push
scas
out
outs
jbe
mov
in
jno
and
aaa
adc
dec
into
add
and
jmp
test
push
(bad)
or
repnz
inc
jge
lahf
clc
out
and
pop
mov
cmc
mov
mov
adc
rcl
or
push
adc
push
retf
pop
shr
sbb
repz
pushf
adc
ins
xchg
cmps
ss
mov
inc
pop
(bad)
or
mov
adc
addr16
int3
and
out
mov
fwait
jb
push
les
mov
outs
cs
(bad)
dec
imul
and
mov
jo
mov
mov
loop
neg
inc
mov
and
retf
jg
or
mov
aaa
push
jp
call
dec
xor
jmp
pop
pop
daa
dec
jne
lock
mov
nop
cmp
mov
adc
loop
out
mov
jns
inc
call
bound
pop
jmp
leave
iret
pop
out
hlt
inc
movs
lahf
lods
les
push
adc
mov
bswap
out
jae
add
and
(bad)
neg
jbe
lea
and
paddd
dec
in
arpl
test
cmps
data16
je
dec
fwait
pushf
movs
mov
inc
or
test
push
movs
enter
jl
push
mov
mov
cmp
pop
frstor
dec
adc
int3
je
jnp
(bad)
scas
and
cmp
push
jmp
inc
mov
push
in
je
lahf
dec
inc
data16
jecxz
inc
aad
pop
jae
cmps
in
test
stos
push
es
add
pop
mov
push
loope
pop
pushf
push
pop
nop
jns
xchg
fimul
xor
repnz
cwde
call
adc
push
stos
repz
mov
cmp
(bad)
mov
cmp
adc
pushf
or
cmp
dec
cli
stos
arpl
xchg
cmp
(bad)
retf
adc
in
int3
and
pop
pushf
cdq
neg
jl
mov
lock
in
xor
mov
scas
mov
add
and
aam
in
and
(bad)
sub
push
sub
fisub
mov
call
es
mov
jmp
pop
xor
dec
stos
fdivr
movs
cmp
push
dec
mov
les
fld
call
xchg
stos
and
jns
mov
scas
push
std
(bad)
ror
jnp
mov
push
xchg
cmp
stos
sbb
mov
aaa
daa
inc
(bad)
sub
in
retf
adc
inc
(bad)
enter
jne
les
sub
mov
dec
push
xor
test
(bad)
xor
dec
outs
jmp
leave
ror
cmp
loop
dec
add
pop
pop
adc
repnz
outs
loope
ficom
jae
lahf
dec
jl
lahf
cmp
shl
lods
pop
xor
mul
adc
data16
loopne
rcr
es
mov
adc
or
jbe
aad
dec
push
cmp
cmps
sub
inc
mov
push
inc
jno
inc
sub
mov
retf
jno
call
xchg
xchg
aaa
mov
sahf
adc
aam
push
int3
sti
mov
test
push
and
lds
aaa
mov
adc
(bad)
jmp
sbb
or
adc
pushf
mov
add
inc
scas
test
popf
mov
or
cmp
inc
or
pop
lods
push
iret
adc
int3
xchg
jge
sbb
xchg
into
test
or
mov
imul
lock
xchg
push
mov
out
loope
push
push
rcl
cmp
pop
adc
adc
dec
es
mov
fs
into
mov
mov
movs
rcr
in
inc
xor
mov
into
repnz
sub
icebp
xor
cli
lea
sbb
pop
out
mov
sub
push
fbld
pop
dec
mov
jg
call
push
xchg
sub
fwait
in
pop
pop
xchg
aas
stos
mov
cld
lds
push
push
bound
into
pop
push
inc
out
and
adc
std
dec
fidivr
repnz
cmp
mov
jb
(bad)
xchg
pop
das
mov
add
outs
mov
jmp
inc
ss
and
retf
mov
in
or
xor
js
ins
xor
dec
xor
dec
das
out
test
cld
cli
retf
add
jno
or
inc
jl
cmp
xchg
jle
pop
icebp
test
jbe
in
leave
ds
xor
adc
push
outs
shl
ficomp
xlat
in
cmp
cmp
sub
pop
popa
adc
retf
mov
xchg
movs
xchg
xor
sub
cwde
inc
jmp
mov
xor
ins
daa
pushf
cli
push
dec
cwde
or
adc
push
push
inc
mov
bound
pop
bound
xchg
sub
call
sub
adc
mov
push
pop
shl
jmp
pop
and
inc
pop
arpl
dec
sbb
mov
mov
ror
jne
(bad)
std
cwde
je
enter
or
and
mov
pushf
sbb
setl
loop
xchg
adc
dec
sahf
in
(bad)
cmp
lock
adc
push
jns
rol
mov
not
pop
sahf
test
and
jle
adc
out
cmps
jb
lods
popf
mul
add
sbb
mov
aaa
dec
mov
sbb
jo
ds
test
adc
cmp
dec
lahf
mov
jmp
sub
dec
xchg
jno
jge
pushf
(bad)
cmp
ds
repnz
adc
out
fst
push
(bad)
nop
call
inc
sbb
jbe
or
call
shl
movs
cs
inc
xchg
mov
stc
mov
push
int3
int3
inc
mov
stos
test
sub
pop
dec
fild
or
adc
loop
ja
push
dec
sbb
jno
dec
les
scas
xlat
cmp
test
xor
mov
cmc
shr
xor
add
aas
cs
ss
cmp
in
les
js
daa
mov
lock
arpl
jl
aaa
push
dec
cld
push
stos
pusha
push
out
popf
gs
jne
adc
jge
cmc
mov
mov
test
out
mov
jmp
xchg
test
fcomip
shl
retf
clc
and
jge
add
fwait
hlt
cmps
fdivr
stc
popf
cmps
repz
xor
sar
in
popa
int
nop
icebp
dec
and
hlt
add
stos
cmp
adc
popf
pop
xchg
jle
push
adc
hlt
jne
mov
push
outs
cmp
loopne
xchg
dec
sbb
cmp
call
mov
shl
les
sub
sbb
mov
int
mov
test
jo
cmp
xlat
mov
mov
jmp
test
pop
and
pop
out
mov
fcmovne
jns
cld
popf
in
cs
push
dec
cmp
cmp
fild
jge
mov
push
mul
pop
cmc
jecxz
jns
imul
sbb
bound
add
mov
stos
and
(bad)
in
jp
cmp
aas
push
jo
mov
or
retf
mov
jp
mov
in
movs
pop
test
sub
leave
out
mov
lock
push
adc
scas
test
mov
add
sar
in
daa
xchg
icebp
mov
pop
dec
or
out
lahf
push
popf
movsx
mov
cwde
jns
mov
bound
icebp
mov
mov
mov
jnp
pop
daa
push
sbb
cs
dec
scas
je
iret
test
dec
dec
fist
shr
rol
and
test
dec
enter
outs
sbb
ins
adc
test
loopne
xchg
adc
jae
mov
sbb
arpl
inc
and
mov
ds
sub
dec
(bad)
adc
adc
stos
int
mov
(bad)
mov
sub
add
(bad)
lods
daa
xchg
int3
inc
repnz
mov
retf
push
int
retf
pop
adc
sbb
out
gs
and
loope
dec
jne
push
pop
fdivr
test
jmp
and
push
test
es
dec
and
xchg
adc
add
pop
xor
repnz
clc
jmp
movs
in
cmp
xchg
xor
jbe
cmp
cmp
cmp
imul
xor
xor
test
fmul
add
xor
mov
icebp
mov
sar
std
dec
pop
push
sub
sbb
test
push
in
push
in
fsub
addr16
jns
ds
push
jmp
mov
call
in
shl
or
(bad)
(bad)
prefetch
pop
(bad)
popf
stos
pop
fnstcw
xor
in
lods
xchg
push
mov
jnp
sub
mov
and
out
or
test
jmp
(bad)
xchg
cmp
pushf
xor
stos
cmp
dec
fcmove
(bad)
xor
dec
test
das
add
mov
movs
jmp
out
stc
iret
mov
mov
pop
mov
push
mov
ins
sub
push
sub
lods
outs
add
sbb
leave
adc
inc
xchg
cmp
scas
mov
pushf
xor
xchg
scas
inc
inc
jbe
fwait
push
and
adc
sbb
fwait
int3
pop
mov
push
sar
shl
loop
dec
and
cmp
rcl
or
and
lods
lahf
in
loop
imul
pushf
dec
ret
sub
mov
adc
fisub
mov
add
xlat
push
lods
pop
dec
inc
fucomi
in
ins
mov
shl
jae
adc
sbb
int
hlt
stos
xchg
jp
bound
mov
fisubr
mov
das
addr16
push
mov
arpl
outs
int3
jne
and
div
inc
rol
push
clc
xchg
jnp
or
xor
or
call
jp
dec
inc
sub
jo
dec
ss
aas
and
push
mov
add
xchg
mov
es
aam
mov
clc
loope
pusha
or
in
mov
sahf
stos
mov
xor
jno
sub
(bad)
cmc
popa
xlat
jae
push
sub
test
in
shl
and
jb
lock
jge
pop
les
inc
into
psubsw
jg
arpl
jnp
xchg
dec
in
and
outs
inc
add
add
cmp
int
cmp
cld
fldcw
in
dec
lock
push
mov
repnz
mov
sbb
jg
or
neg
int
mov
shl
scas
push
movs
ds
xor
add
and
cmps
mov
pushf
fidiv
xchg
xlat
pop
sub
mov
cmp
or
pop
xchg
mov
jg
mov
and
std
dec
xor
arpl
ret
arpl
ss
mov
inc
xor
dec
in
xor
jp
(bad)
sar
rcl
dec
mov
cmc
loope
loopne
fwait
mov
sbb
push
inc
jmp
adc
adc
push
mov
inc
mov
cmovp
dec
in
cmp
jmp
cli
aaa
sbb
xchg
fmulp
cmps
cmp
ins
jae
push
loopne
pop
int3
inc
push
gs
or
and
shl
and
xor
rcr
(bad)
and
dec
sub
in
and
mov
ficom
xor
aad
cmc
loopne
in
xchg
fdivr
in
and
inc
sbb
mov
sub
dec
mov
mov
mov
jg
mov
arpl
inc
sbb
mov
idiv
xor
jle
pusha
pminsw
push
retf
xor
or
jns
neg
sbb
pop
hlt
retf
lods
or
sub
xor
jmp
loopne
hlt
dec
xlat
cmps
sbb
fidivr
dec
aas
cmp
or
test
fld
and
lds
jg
jp
pop
adc
imul
shl
push
jae
dec
lahf
mov
cmp
dec
sar
(bad)
xchg
mov
xchg
ins
xchg
sub
enter
mov
push
stos
xchg
pop
adc
lock
shr
enter
sub
jae
dec
mov
cmp
mov
xor
retf
mov
add
fsub
aad
mov
push
js
mov
mov
lahf
cmp
cmp
ret
stc
call
les
int
dec
xlat
mov
loopne
cwde
pop
xchg
push
jp
and
(bad)
out
mov
cld
push
adc
cmp
inc
dec
pop
cmp
or
push
push
loop
out
pusha
sahf
jmp
pop
aad
scas
cmp
mov
pop
aam
js
mov
enter
mov
adc
pusha
jns
cmc
mov
xchg
push
mov
test
nop
out
mov
jg
inc
cmp
pop
jne
clc
jnp
mov
xor
xor
and
leave
push
mov
cmps
fnstcw
in
cdq
ficomp
daa
lahf
rol
into
ins
push
mov
push
test
mov
jns
xor
sub
inc
adc
imul
test
loop
jbe
or
in
or
out
lds
push
std
push
sbb
out
adc
jge
jg
inc
ins
push
push
pushf
outs
mov
retf
cmps
sbb
daa
xor
cmp
sbb
sti
aaa
inc
lods
rcl
cmp
adc
or
ficomp
jmp
les
jns
iret
xlat
lock
stc
ds
xor
int
mov
cmps
add
xchg
or
mov
aaa
mov
rol
sbb
mov
mov
shl
(bad)
cli
push
push
(bad)
in
or
ret
mov
xlat
enter
retf
push
sbb
jnp
mov
dec
and
pop
cmp
adc
dec
movs
cmps
mov
popf
add
js
mov
popf
xchg
sub
jns
cmp
xchg
std
fisttp
repz
push
mov
cwde
gs
adc
lods
imul
and
inc
push
jnp
ficomp
imul
mov
addr16
jmp
mov
aas
dec
jmp
or
retf
push
cmps
fnsave
add
repz
jne
lods
mov
jl
push
jnp
repnz
or
cmp
jle
dec
xor
ret
mov
push
jmp
sbb
pop
es
das
es
add
xor
jnp
xchg
push
popf
jbe
xlat
inc
aaa
sbb
jmp
sbb
imul
xor
movs
pop
add
push
ror
add
sub
int3
movs
shl
pop
and
add
enter
iret
fsub
cld
cdq
iret
pop
and
frstor
out
add
in
retf
sar
js
mov
xor
adc
or
mov
aas
aad
inc
xchg
xor
mov
add
xchg
in
push
jge
pop
jp
outs
pop
xchg
lock
or
push
or
mov
inc
in
cmp
frstor
mov
in
lods
rcr
hlt
or
lahf
sar
(bad)
jmp
aad
nop
ins
in
sub
enter
daa
dec
rcl
shr
cmp
cmp
sbb
sbb
outs
gs
rol
sbb
pop
push
outs
das
and
hlt
adc
shl
adc
out
hlt
mov
mov
lea
mov
pusha
dec
imul
cmc
aam
or
ss
rcl
mov
(bad)
aad
jecxz
adc
stos
xchg
cli
and
xor
jmp
pop
mov
ret
jle
int
mov
mov
mov
mov
pushf
adc
scas
add
jecxz
adc
daa
push
dec
lea
call
mov
pop
pop
pusha
mov
adc
out
xchg
test
mov
gs
data16
enter
mov
and
rcr
adc
cmps
add
add
stos
fwait
jmp
hlt
jns
push
lahf
fsubp
mov
sub
xor
adc
mov
lock
iret
pop
xchg
iret
and
add
ins
fldcw
stos
cli
sbb
push
dec
into
fidiv
sti
pop
xor
jp
cmps
jne
loopne
outs
adc
fnsave
inc
pop
call
xlat
jg
mov
les
sub
movs
mov
cs
pop
js
shl
jnp
es
mov
jp
dec
outs
mov
and
pop
cmc
sub
cmp
mov
inc
(bad)
fwait
dec
jnp
enterw
popf
lods
sbb
xor
mov
loopne
test
rol
or
pusha
sbb
xchg
sbb
in
jg
movs
js
or
leave
mov
(bad)
jmp
cwde
add
shr
int
in
jae
movs
lock
adc
sbb
inc
xchg
adc
add
push
xor
in
bound
xchg
cmc
scas
cmp
popa
lods
add
(bad)
mov
pop
sub
scas
push
jno
sub
repz
jle
frstor
mov
inc
rcr
dec
jnp
add
and
dec
test
xlat
mov
push
dec
xchg
inc
loopne
enter
push
cmp
adc
in
daa
jl
dec
popf
sub
in
movs
icebp
(bad)
cmp
and
jmp
cmp
cmps
data16
cmp
adc
test
xlat
pusha
dec
mov
sahf
je
in
mov
call
dec
add
xchg
and
add
int3
pushf
scas
hlt
call
movs
jo
push
pop
mov
nop
dec
push
movs
enter
popf
dec
(bad)
lods
bound
xor
push
sub
(bad)
jmp
mov
sub
push
and
iret
sbb
mov
shl
sar
fwait
sub
push
and
scas
add
(bad)
daa
dec
add
inc
pop
mov
and
or
mov
add
xor
clc
iret
push
gs
inc
cs
shl
jl
int3
mov
pop
(bad)
fbstp
and
int
imul
inc
outs
sti
test
addr16
lds
or
adc
cmc
dec
mov
jmp
sbb
jl
data16
not
(bad)
stc
and
pop
dec
hlt
pop
fld
das
sti
aaa
adc
pop
adc
in
cmps
xchg
sub
dec
daa
or
xor
mov
aaa
fbld
ja
(bad)
push
sahf
jecxz
mov
sbb
fdivr
add
ret
and
icebp
xor
jmp
add
xchg
pop
test
sbb
mov
fcom
(bad)
mov
xchg
pop
xchg
cmps
in
nop
cli
and
fs
and
into
add
xor
jmp
cwde
inc
inc
scas
sbb
dec
lods
cli
push
fcom
imul
xchg
mov
jl
adc
dec
cwde
dec
jge
(bad)
ja
in
out
jbe
mov
dec
dec
enter
mov
xchg
outs
xchg
test
ror
xor
test
jb
sbb
cdq
cmps
inc
xchg
stos
mov
mov
shr
stos
call
push
lods
lahf
xchg
push
jmp
aas
inc
lock
xchg
out
mov
test
daa
inc
ja
(bad)
mov
fmul
std
xor
pop
dec
sub
cwde
cmp
retf
adc
fdiv
fs
and
adc
psrlq
cmc
mov
in
aas
out
mov
mov
cs
or
lea
adc
xchg
fwait
mov
stos
stos
cs
pushw
mov
add
jae
xchg
cmp
popa
dec
test
or
lahf
push
and
gs
test
mov
adc
mov
xor
cmps
(bad)
add
jecxz
push
mov
cli
bound
push
mov
cmp
lods
adc
pop
push
mov
cmp
jbe
jno
pop
mul
test
es
pop
inc
sbb
sbb
pop
mov
retf
int3
enter
(bad)
mov
and
mov
popf
in
mov
xchg
adc
scas
test
test
stc
adc
test
out
js
xchg
fsubr
fcom
aam
jno
and
push
lods
lods
fnsave
dec
pop
daa
inc
dec
add
jg
fisub
jae
lods
(bad)
repz
mov
rol
test
pop
frstor
dec
cmp
ds
je
add
repz
dec
movs
xlat
sbb
push
or
sbb
fucom
dec
jle
and
pop
inc
loop
ss
inc
pop
stos
rcr
jge
(bad)
mov
push
jb
cld
lds
sub
dec
adc
(bad)
jo
and
pop
mov
xlat
add
pop
jnp
mov
jg
jmp
test
repnz
dec
jge
inc
or
pusha
jae
push
stc
cmp
sub
loope
push
leave
out
lahf
pop
xchg
pop
psraw
inc
xor
div
sahf
jbe
aam
push
ret
inc
sar
xor
mov
ss
cmp
in
repz
call
stc
loopne
pop
xchg
lea
les
aas
jns
dec
pop
mov
fisub
jle
jg
jl
gs
(bad)
dec
pop
stos
mov
cmp
outs
xor
sar
lods
inc
and
sbb
xlat
lds
add
jae
xchg
jno
es
sbb
adc
(bad)
cli
push
xor
mov
out
cwde
lods
push
sbb
mov
push
mov
fisttp
jmp
outs
dec
push
cwde
outs
push
loop
(bad)
inc
jns
mov
in
dec
add
sbb
popf
cs
or
lea
jb
fsub
mov
push
in
adc
lods
call
dec
les
sti
pop
add
push
jae
call
mov
or
xor
(bad)
mov
nop
push
mov
shl
clc
xchg
repnz
lock
addr16
(bad)
jg
btc
jp
fsubr
adc
dec
xchg
jb
sbb
loop
mov
dec
aas
push
std
and
or
scas
add
pop
pop
mov
sahf
repz
push
sbb
shl
cmp
loope
add
jo
dec
pop
mov
aam
mov
icebp
fisttp
mov
xchg
cld
fstp
sbb
push
sbb
mov
sbb
jae
(bad)
pop
lods
sbb
xchg
mov
ins
in
in
sub
xor
mov
fdiv
aas
sub
push
and
xor
push
and
popf
push
(bad)
mov
mov
(bad)
xchg
mov
xlat
and
xchg
sub
out
lds
add
fld
and
lea
inc
adc
sub
pop
dec
aad
fsubr
int
loope
sub
dec
pusha
or
mov
dec
jge
cmps
fld
std
push
dec
scas
addr16
fsubp
dec
mov
bound
xchg
lahf
adc
or
mov
lahf
jbe
dec
xchg
dec
and
jne
sub
add
or
jnp
test
xor
loop
and
stos
sbb
cmc
mov
dec
mov
pushf
jb
add
or
cmc
shl
inc
mov
sahf
test
(bad)
enter
mov
mov
dec
nop
imul
adc
addr16
lods
add
pop
add
xor
dec
adc
fild
hlt
mov
jmp
cmps
out
push
push
ss
and
test
(bad)
mov
jnp
das
movs
mov
test
mov
push
cmp
add
stc
fbstp
add
mov
inc
cmps
inc
mul
pop
xor
in
sbb
fist
mov
sbb
xchg
dec
data16
js
les
push
jbe
mov
inc
div
shr
in
push
pop
mov
cmps
es
rol
mov
ret
fld
and
loopne
sahf
iret
shl
jmp
es
xor
xlat
dec
retf
xor
fstp
or
movs
sahf
loop
jae
sub
popf
mov
fcomp
sbb
cmp
inc
repnz
repnz
push
movs
jae
sti
mov
inc
and
xchg
cmp
into
push
data16
adc
out
retf
sbb
dec
test
sti
pop
xchg
ins
(bad)
iret
iret
or
out
lds
enter
or
dec
in
addr16
adc
add
jae
pop
add
lods
fwait
cmps
push
sbb
cmp
push
btr
leave
cwde
mov
xor
iret
movd
jg
enter
test
sub
jmp
out
mov
hlt
jge
mov
jmp
jge
leave
stc
push
xchg
cmc
mov
sti
jb
shl
aaa
js
jge
push
inc
mov
lods
fsubr
repz
or
mov
jecxz
hlt
jbe
lahf
add
retf
dec
test
dec
xor
push
or
jbe
push
sub
icebp
sti
or
pop
pop
lock
xchg
sbb
fistp
(bad)
out
fisub
sub
and
pop
inc
aam
mov
pop
test
nop
sbb
in
fsub
rcr
daa
mov
ficom
lock
push
mov
js
push
mov
mov
les
push
xor
stos
push
out
push
mov
add
rcr
pushf
jmp
popf
daa
fdivr
test
sub
lea
xchg
xchg
fcom
cs
push
or
pop
fnsetpm(287
push
mov
xor
xlat
cmc
rcr
mov
xor
sub
push
cmp
adc
out
add
ficomp
ins
test
mov
dec
mov
adc
add
xchg
retf
xor
sub
cld
fcomp
mov
hlt
(bad)
rol
popa
sub
sti
add
test
cmp
mov
ss
dec
jo
mov
mov
inc
adc
add
xchg
imul
dec
xchg
call
or
stos
movs
arpl
mov
imul
cmc
in
cmp
push
into
or
nop
push
popf
jmp
sbb
or
int
adc
jbe
jmp
and
mov
adc
sbb
pop
sub
jge
popf
loop
mov
stos
jmp
pop
je
dec
gs
repnz
out
push
lods
jmp
push
idiv
dec
sub
lea
or
jmp
hlt
ss
lods
popf
and
adc
das
int3
push
xor
push
iret
lahf
aam
xchg
cmp
mov
loope
sbb
mov
lods
or
test
bound
mov
or
scas
xchg
xchg
push
or
jl
adc
clc
mov
pop
inc
rol
mov
add
scas
mov
and
mov
mov
sbb
pop
cmp
daa
add
and
(bad)
outs
outs
or
jg
xchg
ja
in
sbb
js
cmp
mov
sub
fwait
sub
pop
mov
jae
fwait
dec
pop
in
nop
dec
sub
sahf
dec
adc
sbb
xor
retf
mov
cmp
jo
call
add
fidiv
add
dec
test
mov
cmp
in
imul
push
xchg
test
outs
sbb
jne
not
shl
push
push
pop
sbb
push
rcr
fs
out
in
call
outs
add
jg
fsubr
imul
sub
mov
inc
jo
jae
das
and
cmp
(bad)
pop
mov
dec
cdq
(bad)
jno
xor
or
arpl
and
stc
add
mov
mov
pushw
aad
jmp
xor
mov
(bad)
or
aam
add
(bad)
push
mov
mov
xor
adc
inc
mov
mov
sub
mov
xor
mov
std
and
lods
nop
push
push
int3
test
scas
xchg
push
fimul
push
cmc
push
mov
cli
mov
(bad)
adc
(bad)
or
pop
lods
ret
mov
cmc
(bad)
daa
sbb
repz
adc
fadd
mov
data16
lods
pop
sar
cmp
adc
ror
(bad)
idiv
sbb
lods
pop
lods
sub
pop
nop
push
pop
push
jnp
push
sub
xchg
fbstp
into
pop
mov
dec
or
jp
cmp
push
jge
and
aas
adc
xchg
aad
pop
xor
push
les
sahf
xor
je
xchg
and
mov
and
iret
stos
out
jns
push
sub
adc
cmp
cdq
imul
mov
test
out
pop
mov
sbb
fs
and
fs
out
pop
shl
push
xchg
cmp
daa
add
inc
cmp
dec
xchg
mov
inc
push
pop
mov
pop
mov
out
push
inc
jl
push
push
inc
stc
sbb
xchg
pop
push
adc
xor
dec
sub
dec
imul
test
sbb
imul
add
outs
or
push
adc
stos
cmp
sbb
dec
pop
in
aad
jnp
das
push
ror
adc
in
mov
paddb
mov
add
int3
test
jp
daa
jmp
in
ins
cmp
mov
jg
stc
test
push
cld
jg
movs
mov
cmps
cmp
mov
cs
aad
cli
fdivr
pop
sub
out
ds
add
cmp
int3
hlt
arpl
mov
jmp
xchg
pop
mov
cld
jno
data16
(bad)
pop
inc
dec
pop
inc
rcl
pusha
stc
dec
push
sti
out
rep
xor
stos
lods
jne
mov
mov
popa
mov
mov
xchg
pop
call
cld
jecxz
loope
mov
inc
and
or
adc
and
jbe
mov
or
adc
mov
test
scas
add
or
add
jae
sbb
lods
call
inc
cmp
jg
iret
adc
cs
in
ret
add
add
sar
ins
loope
push
mov
lods
stos
and
(bad)
retf
xlat
ja
mov
and
ss
cs
les
out
jnp
addr16
push
mov
mov
das
and
icebp
into
dec
xchg
rcr
xchg
call
fld
jge
mov
dec
shl
adc
inc
(bad)
shr
pushf
cli
test
inc
daa
mov
push
stos
in
push
xor
xchg
iret
movs
jecxz
mov
shr
js
cmps
push
and
and
test
inc
lock
cmps
jmp
mov
addr16
or
inc
jbe
ficomp
pop
data16
jbe
stc
xchg
out
mov
push
repz
cmp
jle
pop
adc
ror
pop
daa
test
mov
add
cmps
inc
mov
dec
ds
jae
mov
fidiv
and
or
mov
xchg
sub
push
or
jno
into
sahf
adc
inc
mov
add
cmp
cmp
test
mov
xor
icebp
inc
xchg
(bad)
ins
cmps
arpl
xor
nop
add
sbb
push
in
push
mov
sub
push
pop
outs
adc
ins
adc
mov
stos
jp
stc
rcl
icebp
mov
sbb
(bad)
mov
jo
mov
mov
sbb
int
lock
add
sub
or
cmp
retf
push
sahf
cdq
sbb
mov
cmp
aaa
mov
push
mov
inc
ins
dec
repnz
lods
push
loopne
mov
loope
push
loop
xor
and
cmp
add
jle
or
cmp
jmp
sbb
into
pop
cmovb
push
or
cmp
dec
stos
movs
xor
push
cmp
pushf
mov
ret
iret
sbb
push
cmp
cmps
sbb
adc
fist
push
xor
loopne
std
out
pop
mov
fisttp
sub
add
add
out
fld
outs
je
jno
or
mov
pop
outs
imul
add
or
fs
(bad)
pop
in
mov
xchg
adc
imul
repnz
je
push
xor
inc
gs
or
sbb
sahf
or
mov
pop
push
(bad)
mov
jp
xchg
dec
jl
jecxz
cmp
mov
dec
ss
add
bswap
cmp
rcr
or
out
mov
cmp
adc
enter
loop
repz
mov
jnp
inc
stos
loop
or
adc
fmul
imul
outs
nop
push
mov
mov
lds
adc
adc
std
mov
jmp
inc
pop
sub
mov
fisubr
mov
mov
retf
or
mov
lds
push
test
jnp
add
mov
inc
xchg
(bad)
xchg
and
scas
mov
sar
jnp
cmp
adc
pop
repnz
add
hlt
mov
jb
jae
aam
daa
xchg
repnz
push
jno
(bad)
aam
push
(bad)
fild
jb
mov
xchg
push
mov
or
stos
or
mov
pusha
ja
stos
pop
push
scas
int
psubusw
(bad)
outs
add
xor
(bad)
movs
stos
inc
push
lds
aad
add
inc
hlt
test
ins
je
pop
adc
sub
adc
and
lahf
xor
mul
pop
ds
and
cmp
jno
fwait
xchg
push
mov
rep
inc
dec
sub
inc
adc
gs
mov
lods
push
subps
mov
add
adc
arpl
cdq
cs
sub
cli
clc
outs
xchg
or
push
xor
pusha
neg
stos
or
aam
add
sbb
mov
inc
(bad)
mov
test
mov
cmp
mov
outs
retf
fwait
dec
or
enter
jns
std
icebp
xchg
into
xor
in
push
inc
or
imul
repnz
inc
(bad)
cmp
cmp
sub
xchg
and
sub
pop
test
jmp
pop
xlat
mov
push
xor
and
imul
push
pop
cmp
jg
push
pop
sub
sub
sbb
xchg
cmp
push
or
inc
loope
cmps
sar
add
dec
inc
push
jns
mov
or
sbb
inc
stos
push
imul
or
or
test
dec
aam
cmc
push
push
in
jp
fcomp
jno
pop
jecxz
pop
fnstsw
(bad)
mov
jge
addr16
sbb
les
dec
stos
mov
nop
push
sub
sbb
push
stos
les
mov
jno
cmp
mov
aad
pop
mov
pushf
lahf
lods
retf
aas
inc
dec
pop
das
add
arpl
dec
cmp
add
add
push
sub
scas
push
ins
shr
test
(bad)
arpl
or
mov
mov
clc
adc
test
mov
sub
dec
add
inc
dec
jp
add
movs
and
fstp
sbb
mov
jne
pop
or
jle
les
mov
and
and
in
lods
mov
xchg
xchg
mov
jae
neg
shr
sbb
pop
mov
xor
ror
sbb
retf
gs
cdq
loopne
xor
(bad)
fiadd
mov
pop
cs
adc
pop
xchg
dec
mov
lods
jns
fld
movs
in
ja
pop
and
cmp
stos
call
push
cli
cmp
repz
lahf
cmp
jnp
shr
inc
dec
push
mov
push
mov
push
ficom
je
pop
adc
movs
pop
dec
ds
sub
clc
bt
push
sar
ja
lods
cli
imul
jb
dec
push
ror
popa
out
aad
int3
clc
pop
mov
lds
xchg
pushf
ja
fild
(bad)
jbe
and
dec
call
sub
dec
mov
add
and
jmp
sbb
in
sub
mov
xor
xchg
and
(bad)
sbb
jl
inc
adc
pop
fdivr
dec
push
imul
stc
cmp
data16
les
add
stos
sti
or
add
outs
movs
enter
test
push
orps
push
xchg
(bad)
call
aas
cli
popa
dec
jmp
retf
ja
movs
mov
or
add
add
imul
dec
arpl
jbe
inc
mov
lds
in
fild
jg
jle
rcr
mov
(bad)
ins
xchg
mov
and
mov
scas
clc
(bad)
xchg
xor
sub
and
pop
pop
fimul
cld
jl
cmps
hlt
sub
push
lock
fiadd
fnsave
imul
outs
jmp
sbb
les
inc
pushw
shr
mov
cmps
leave
mov
pop
out
pop
fmul
add
stos
addr16
cmp
add
jo
popa
inc
js
and
cld
pop
rcr
push
pop
xchg
mov
mov
movs
or
mov
xor
fild
pop
cmp
inc
mov
xchg
nop
cld
ficom
mov
in
cmc
xchg
int3
inc
cmps
lahf
dec
pop
cwde
sbb
jo
lods
not
fisub
jg
scas
call
mov
jno
test
xchg
adc
out
mov
into
fdivr
sbb
aad
adc
mov
fcomp
sbb
in
test
popf
cwde
stos
cmp
adc
mul
into
lds
sahf
sub
call
idiv
(bad)
mov
sbb
(bad)
outs
loop
(bad)
std
add
fs
leave
inc
inc
jae
div
std
and
jg
in
or
inc
xor
int3
push
fwait
test
test
add
push
rcr
je
push
cmp
mov
scas
aad
jno
push
xor
popa
or
out
sbb
push
inc
addr16
push
or
pop
jmp
push
cmps
pop
pop
std
out
push
cmp
and
pop
jno
mov
inc
pop
daa
es
pop
fst
cli
lock
xor
(bad)
popf
jl
outs
mov
mov
sbb
sti
out
sbb
lods
ret
xchg
fdiv
int3
call
jnp
sub
adc
cmp
mov
in
sub
adc
imul
or
aam
xchg
adc
mov
or
in
lods
in
dec
ficom
(bad)
jne
out
jno
hlt
jge
mov
loope
sub
xchg
jle
mov
and
lahf
jmp
push
out
inc
shl
(bad)
(bad)
sbb
adc
and
dec
jb
cmp
iret
mov
ret
mov
imul
dec
sbb
pop
in
cmp
xchg
mov
in
inc
dec
sbb
sub
mov
cld
imul
mov
enter
imul
icebp
jg
in
xor
ret
in
sti
faddp
into
ins
not
mov
jno
fistp
mov
mov
push
pop
stos
(bad)
std
test
mov
dec
rcl
mov
xor
mov
jmp
sti
mov
ds
xor
add
shl
pop
enter
(bad)
lahf
out
out
sub
inc
add
pop
in
out
les
jg
fist
push
xchg
xchg
sbb
fwait
movs
xchg
ds
cmps
enter
mov
xor
xor
loopne
and
gs
inc
ret
or
mov
add
inc
icebp
push
jmp
aam
stc
inc
pop
loope
mov
rcl
test
(bad)
jl
jl
loope
lods
sub
enter
and
mov
jns
xchg
retf
adc
cmps
fnstsw
jae
aaa
into
ss
and
(bad)
out
leave
push
aas
or
(bad)
sub
test
mov
pop
(bad)
scas
sti
sbb
xchg
leave
mov
not
jns
lea
push
xchg
outs
xchg
sbb
cld
sbb
sbb
retf
and
sbb
or
sbb
adc
dec
adc
data16
(bad)
sub
popa
jae
bsf
push
jmp
lock
neg
push
pop
mov
adc
jle
nop
inc
arpl
cmp
ins
add
inc
xor
or
ins
dec
popf
xor
sub
lea
in
outs
or
mov
jp
ins
cmp
imul
paddq
pop
sub
cmp
cmp
or
and
mov
xlat
leave
int3
add
mov
or
cmp
jl
or
retf
lods
(bad)
jns
in
popw
push
(bad)
pop
sub
loopne
fcmove
lock
shl
inc
and
mov
add
aad
push
daa
je
fs
icebp
dec
arpl
mov
in
test
cmp
daa
fadd
pop
sbb
sbb
or
nop
add
mov
pop
dec
jo
add
adc
jae
cmp
xchg
inc
xchg
adc
outs
add
out
xchg
iret
inc
test
scas
(bad)
cmp
rcr
jle
iret
in
hlt
lahf
jg
mov
cmp
mov
inc
inc
leave
stc
push
iret
xor
fs
arpl
lock
mov
mov
cdq
sub
in
jge
xchg
(bad)
inc
inc
mov
(bad)
stos
nop
mov
gs
inc
jge
sub
adc
fsub
std
int3
aam
push
mov
ja
mov
mov
js
dec
xchg
sahf
mov
push
mov
call
call
xor
push
les
cmp
jge
xchg
daa
clc
call
retf
and
mov
xor
push
lock
pop
int3
xchg
test
je
or
fldenv
and
cmp
not
shr
mov
jnp
lock
scas
cmps
test
pop
dec
pop
pushf
imul
pop
leave
mov
in
xor
add
jns
jge
stos
nop
outs
push
stc
mov
popa
xor
nop
pushf
lock
sar
fsub
jl
cmp
xchg
push
push
jnp
or
sbb
mov
xchg
call
nop
push
popa
sub
fadd
xchg
stos
inc
lea
in
or
push
dec
dec
sub
sbb
cmp
cmp
(bad)
shl
enter
clc
jmp
xchg
inc
(bad)
push
das
adc
push
or
retf
pop
xlat
jle
mov
or
or
jecxz
bound
jns
loope
sbb
fld
mov
in
repnz
clc
fs
mov
out
pop
(bad)
mov
dec
ss
repz
dec
mov
pop
imul
sub
mov
dec
dec
sti
mov
repnz
push
or
cmp
push
mov
jno
js
nop
das
ins
xlat
ja
pop
and
sti
ja
sub
shl
and
fmul
sbb
aaa
or
(bad)
out
push
in
inc
jge
bound
addr16
in
and
into
in
inc
je
popf
pop
pop
jp
pop
mov
add
adc
bound
dec
shl
sub
mov
fwait
pop
test
iret
aad
inc
call
cmp
test
pop
xor
(bad)
jns
fnstsw
xchg
push
jnp
jne
loopne
or
push
in
jmp
inc
inc
xchg
addr16
fisub
and
push
int3
retf
pushf
push
arpl
dec
push
adc
je
fmul
les
call
inc
cmp
and
adc
inc
(bad)
out
arpl
aaa
xchg
out
inc
and
jae
mov
inc
loopne
mov
mov
test
outs
pop
and
shr
shl
inc
adc
or
mov
or
cmp
aad
jnp
mov
pop
arpl
push
pop
jne
(bad)
jmp
ret
call
dec
out
xor
pop
xchg
les
push
shr
dec
add
mov
std
or
iret
inc
push
or
xchg
mov
clc
call
dec
cwde
scas
inc
jbe
sub
mov
cmps
daa
adc
ret
cmp
mov
mov
mov
inc
fwait
cwde
in
mov
out
sub
mov
mov
in
ret
fcomp
pop
sub
xor
scas
cmp
dec
int3
lods
push
and
jnp
ss
xchg
mov
lock
cmps
fnsave
aam
lods
es
mov
test
inc
call
fadd
out
mov
out
out
adc
or
dec
prefetch
cmc
repnz
out
inc
mov
rcl
sti
retf
loop
jnp
xor
adc
dec
or
aad
sbb
sbb
xchg
popa
movs
into
mov
sti
shl
shl
lock
cmps
xchg
xor
xchg
cwde
sub
(bad)
data16
scas
inc
cmc
xor
push
cld
popf
xor
(bad)
push
fst
or
push
xor
cmp
ror
pop
mov
mov
mov
mov
stos
add
inc
xor
lods
retf
rcr
in
ror
xchg
pop
(bad)
jne
push
aam
or
ss
cmp
inc
test
les
(bad)
iret
loopne
and
hlt
les
aad
clc
or
bsf
add
lods
sbb
inc
es
inc
pop
sahf
sub
and
rcr
das
sub
inc
mov
xchg
dec
repnz
lds
push
inc
cmc
loope
jmp
(bad)
adc
add
into
data16
cmp
add
mov
sbb
add
mov
(bad)
cli
pusha
mov
adc
test
adc
retf
or
add
push
xchg
xchg
fs
ret
inc
mov
jne
out
jae
cmp
in
dec
sub
cmc
pop
imul
pop
jmp
pop
arpl
mov
mov
jb
movs
out
mov
xchg
out
cli
jmp
pusha
mov
push
mov
jo
pop
push
pop
pushf
nop
jb
arpl
je
pop
and
mov
xor
inc
jge
das
or
pop
push
mov
push
mov
and
rcl
jg
test
push
div
cs
repz
xchg
push
shr
sbb
cld
sub
popa
hlt
dec
ins
dec
xchg
push
push
mov
sbb
popa
jne
cwde
adc
out
outs
mul
es
shl
test
(bad)
loopne
inc
daa
mov
jne
xor
rcl
jp
shl
jo
xchg
aad
push
leave
cdq
lahf
int3
mov
gs
jnp
jmp
hlt
and
mov
cmp
mov
or
sub
mov
mov
inc
adc
mov
jl
movntps
movs
enter
mov
sbb
out
cli
mov
scas
cli
movs
adc
xchg
shr
dec
jae
mov
icebp
popf
push
sub
retf
inc
std
jl
and
dec
pop
pop
dec
les
pop
inc
call
jg
add
xor
clc
xchg
popf
ins
pop
ss
outs
jae
aas
ret
adc
add
mov
js
cmc
into
add
cmps
jae
push
push
jno
xchg
das
jmp
jns
push
into
xor
and
scas
mov
xor
jg
jecxz
fst
jl
pop
into
cli
add
leave
jae
inc
cmps
(bad)
adc
inc
sahf
fimul
push
cmps
pushf
call
dec
(bad)
fsubr
stos
push
jmp
call
mov
loope
push
popa
pop
adc
jno
mov
and
dec
dec
mov
nop
aaa
mov
lock
push
int3
fwait
xchg
stc
jl
inc
pop
imul
rcr
push
ficomp
repz
sbb
pop
jbe
cmp
outs
jle
leave
shr
xchg
ins
stos
push
movs
call
(bad)
mov
pop
bswap
mov
mov
cmp
and
adc
jne
js
jmp
jl
shl
cdq
inc
aad
fdiv
add
ret
retf
dec
pop
xlat
cmp
inc
(bad)
push
xlat
(bad)
aaa
cmps
hlt
sbb
pop
imul
shr
jg
push
adc
add
mov
jmp
xor
adc
jno
cmp
ja
out
(bad)
leave
aam
shr
mov
mov
jnp
mov
lea
gs
icebp
popa
lahf
jle
cmp
xlat
push
cmp
cdq
inc
adc
xor
mov
aas
sub
ss
adc
sbb
(bad)
iret
add
leave
push
in
sbb
adc
lds
fist
scas
mov
outs
add
mov
push
stos
mov
push
in
retf
sub
mov
pop
icebp
mov
jg
inc
jl
mov
fbstp
lods
push
xor
sub
push
int3
adc
push
cmp
(bad)
pushf
or
mov
sbb
pushf
out
into
in
fbstp
xchg
mov
xchg
dec
pop
ins
mov
xchg
xor
and
test
push
mov
fiadd
jo
xor
in
data16
imul
mov
inc
(bad)
sahf
pop
mov
or
fnsave
sub
xlat
sbb
cwde
pop
mov
mov
cmps
mov
ins
sub
sub
xchg
test
pop
call
mov
movs
cs
test
das
push
inc
js
jmp
push
push
retf
add
arpl
ja
enter
sub
in
aas
lahf
sar
push
fistp
mov
or
sbb
stos
push
not
pushf
mov
iret
mov
pop
lods
inc
int3
pop
push
sbb
aas
loopne
(bad)
stc
or
xor
adc
fnsave
mov
xchg
jb
push
sbb
dec
mov
add
xlat
inc
int
hlt
in
ins
dec
inc
scas
xchg
inc
fwait
pushf
loope
bswap
jl
add
test
inc
scas
cmp
and
and
ss
lock
in
outs
push
or
dec
jmp
dec
mov
jge
pop
xchg
sbb
fidivr
movs
pop
inc
call
gs
xlat
jns
aaa
fidivr
cmp
lock
adc
xor
(bad)
jo
mov
fwait
mov
ret
dec
lock
out
add
fdiv
mov
outs
cmp
rcr
dec
jp
movs
test
neg
push
cmp
jb
xor
sbb
sub
retf
adc
rcl
sbb
mov
mov
xor
dec
out
(bad)
pop
xchg
jo
xchg
or
js
aam
ss
(bad)
psllq
rol
imul
cmps
or
and
add
dec
adc
les
sub
jge
adc
jg
cld
sbb
movs
dec
xor
out
enter
push
pop
inc
imul
aad
outs
dec
(bad)
jmp
xchg
sub
out
aad
xchg
mov
pop
sbb
push
sbb
dec
mov
pushf
and
jge
es
test
adc
xchg
push
int3
cld
inc
je
sbb
jns
ror
xchg
sbb
imul
or
nop
aas
fnop
sbb
shl
out
cmp
into
leave
xchg
cs
sbb
xor
xor
mov
outs
jle
adc
mov
std
arpl
div
push
jns
setbe
aad
adc
mov
rcl
jo
sbb
xchg
popf
jbe
repz
jo
add
in
or
sub
cmps
shl
sbb
mov
sub
pop
xor
call
cmps
pop
sub
xchg
out
inc
ss
inc
sti
adc
imul
retf
push
push
bound
(bad)
data16
call
hlt
sbb
xchg
xor
leave
jle
out
mov
aas
mov
pop
out
ret
push
jnp
ja
pushf
mov
shl
sbb
movs
push
imul
dec
dec
lods
dec
xchg
pop
jne
inc
push
aad
xor
xchg
mov
shr
lds
and
stos
xchg
sub
je
fwait
cmps
add
cmp
mov
push
fwait
(bad)
out
or
dec
out
arpl
sub
jns
push
into
push
adc
add
retf
jo
mov
shl
jbe
mov
push
test
stos
pop
sbb
mov
adc
add
add
xor
jle
sub
dec
sbb
cmps
hlt
mov
jg
adc
xchg
sub
(bad)
gs
dec
push
add
push
or
enter
rol
mov
inc
jecxz
xor
sub
jg
sub
adc
rcr
cdq
mov
std
sub
enter
or
shl
add
mov
scas
fs
sti
scas
push
loope
push
or
or
icebp
inc
mov
fld
sbb
dec
pop
icebp
lods
(bad)
xor
shr
test
mov
adc
mov
fcmovbe
sbb
and
xor
adc
into
pavgusb
aas
jmp
mov
fcomp
mov
popa
pop
iret
ret
xchg
adc
fsubr
add
jmp
push
clc
and
dec
jmp
push
out
ins
and
or
in
dec
mov
jge
and
inc
xchg
imul
adc
inc
cli
ss
mov
outs
mov
and
ins
mov
inc
int3
dec
inc
mov
(bad)
sbb
mov
jae
es
mov
pop
(bad)
cld
xchg
or
adc
scas
push
mov
enter
icebp
popf
mov
inc
fdiv
mov
jle
jmp
loopne
in
ins
adc
popf
fcomp
add
xchg
pushf
cmps
xchg
loope
add
adc
into
mov
std
pop
adc
jae
icebp
inc
movs
push
lock
pop
push
push
in
ror
ror
sti
push
sub
jle
por
dec
pop
mov
push
mov
ds
pop
test
mov
fadd
inc
sub
inc
aaa
xlat
xchg
int3
lea
mov
xchg
xor
and
jle
inc
sbb
push
leave
popw
idiv
mov
sbb
cmp
cmps
stos
iret
or
jecxz
(bad)
loopne
mov
mov
jle
cs
add
dec
cmp
xor
jo
inc
stc
jo
stos
cwde
lea
xchg
mov
mov
movs
lods
cli
enter
pop
ror
xchg
mov
jl
pop
sbb
rcr
scas
xchg
dec
and
sub
sar
scas
xor
ins
sbb
test
xchg
lea
adc
or
call
es
scas
jge
movs
push
mov
jbe
mov
xor
jo
push
sbb
retf
movs
out
pop
mov
xchg
add
add
arpl
xor
mov
xchg
fdivp
mov
sti
sub
mov
imul
fsubr
inc
and
loop
dec
leave
jbe
in
ret
(bad)
adc
dec
loopne
sti
repz
add
cmp
or
repnz
ja
ins
outs
and
add
sub
out
lahf
lahf
sub
sar
mov
movs
movs
into
jns
xor
jmp
dec
sbb
inc
dec
das
enter
and
mov
inc
fwait
cld
cmp
mov
or
mov
cmps
stc
pand
xlat
cld
pop
nop
out
imul
adc
mov
mov
and
mov
leave
sub
xchg
cdq
clc
inc
push
std
mov
push
mov
sbb
repnz
fldcw
inc
jns
mov
push
hlt
inc
sti
cmp
xchg
loopne
mov
clc
sub
test
inc
pminub
and
push
or
cld
mov
neg
stos
push
dec
mov
inc
pop
sbb
icebp
sub
sbb
or
jle
push
push
xor
inc
mov
(bad)
dec
fmul
stos
and
cmp
(bad)
loopne
mov
xchg
dec
ret
das
mov
dec
mov
add
jae
enter
fisubr
jge
scas
or
std
mov
mov
fisttp
adc
je
mov
into
stos
test
mov
cmp
nop
sbb
adc
xor
mov
sbb
and
pop
mov
cdq
out
and
test
mov
(bad)
and
imul
mov
stos
call
push
stos
into
cmp
lea
lods
jns
or
add
jne
ins
ret
adc
xor
fdiv
test
fimul
or
mov
aad
mov
imul
add
int3
fistp
scas
push
fstp
out
jo
xor
pop
sub
cmc
inc
aas
es
add
iret
mov
push
iret
lahf
push
lods
xchg
xor
ja
pop
xchg
loopne
mov
fimul
js
and
jmp
push
retf
ja
sub
jbe
inc
jo
(bad)
and
push
sbb
out
add
mov
enter
sbb
sub
fisttp
push
and
pop
dec
adc
pop
pop
ja
into
mov
loop
in
mov
dec
fstp
out
imul
fs
in
out
push
aam
or
movs
movs
xor
(bad)
or
cmp
xor
pop
or
push
push
xchg
loopne
aas
xchg
jl
pop
push
stc
scas
scas
sub
aaa
xor
imul
jb
(bad)
ret
mov
dec
rcl
inc
rcl
icebp
inc
(bad)
test
xchg
cmp
mul
lahf
imul
mov
in
aas
enter
movs
xchg
test
xor
dec
push
lea
jb
mov
push
rcl
test
iret
mov
add
ror
pop
dec
lods
fbstp
out
or
mov
mov
xor
fs
sub
xchg
pop
pop
fcmovnbe
adc
dec
sub
mov
out
xchg
sub
or
push
push
cmps
dec
fsubrp
pusha
fild
jmp
xchg
fisttp
sub
mov
cmp
push
aas
mov
(bad)
fdivr
add
lods
adc
push
push
push
mov
inc
out
ss
inc
push
pop
push
into
and
cmp
bound
jl
ins
sub
push
repz
int
jp
or
dec
lods
inc
and
mov
(bad)
cmp
push
ret
and
int3
neg
pusha
out
jle
dec
daa
xor
dec
arpl
lahf
adc
in
mov
xchg
sub
in
pop
mov
bound
lods
inc
jno
(bad)
ins
xor
add
push
ror
sbb
push
cmps
or
adc
stc
sub
add
pusha
push
frstor
sti
(bad)
aad
pop
fwait
sbb
cli
ror
enter
retf
arpl
repnz
pop
xchg
scas
add
stos
cmc
push
int
mov
pop
push
and
aas
cmp
ja
repnz
int
rcr
imul
ins
ja
push
ja
retf
pop
std
fisttp
sbb
jg
imul
push
iret
jbe
(bad)
jmp
call
adc
mov
xchg
xor
mov
mov
xchg
ins
into
test
push
sahf
mov
in
push
push
dec
mov
je
inc
xchg
xchg
sbb
mov
data16
or
jb
jmp
jp
call
(bad)
loopne
imul
aas
and
jnp
xchg
scas
add
mov
ret
adc
call
imul
fisubr
aaa
fcom
xchg
dec
xchg
dec
or
loope
js
loopne
push
pop
mov
maskmovq
test
xchg
push
fld
dec
mov
inc
mov
aam
and
imul
sbb
jle
push
test
into
jp
sbb
imul
and
cmp
loope
out
enter
(bad)
aaa
add
leave
retf
mov
js
and
mov
outs
repnz
inc
ret
ror
jno
xlat
dec
push
hlt
in
or
loop
arpl
pusha
adc
pop
inc
pop
mov
imul
out
xor
jae
mov
enter
sbb
lods
loopne
cmp
test
jne
cdq
shr
xchg
aam
jg
or
adc
scas
pop
xor
xchg
popf
xchg
cmp
pop
sbb
add
je
imul
xchg
sub
ss
aad
ss
out
pop
dec
xchg
aas
add
push
cmps
dec
xor
shl
xlat
pop
or
sub
mov
jmp
dec
push
sti
mov
call
dec
add
jb
mov
rcl
mov
push
dec
ins
and
fsub
loopne
call
xchg
mov
fisub
xor
cmc
ror
das
int
fdiv
push
dec
and
xchg
jo
sahf
and
add
addr16
aas
sub
sbb
rcr
dec
cmps
pop
push
dec
jl
dec
mov
sbb
jmp
pop
mov
movs
movs
xchg
arpl
mov
in
mov
push
or
test
jecxz
retf
cmp
call
adc
and
into
lock
jge
xchg
mov
cmc
jnp
pop
push
fdivr
fadd
mov
rcl
adc
pop
jge
adc
jmp
cmp
push
test
adc
call
rol
jle
(bad)
push
push
sar
mov
mov
in
mov
jl
cdq
call
mov
ret
sbb
add
xor
inc
loop
test
pop
mov
lock
xchg
mov
sub
and
xchg
hlt
push
jns
push
stc
stc
test
rcl
iret
mov
mov
and
xchg
imul
jle
je
cli
cmps
cmps
or
daa
push
xchg
cmps
lock
cmp
ss
(bad)
stos
test
in
inc
inc
jl
jge
lds
ja
xor
nop
hlt
call
and
stos
cmp
icebp
xchg
add
pushf
sub
stos
or
mov
pop
cmps
imul
jge
div
and
in
(bad)
retf
and
jg
cmps
or
sti
sti
les
shl
mov
push
cmp
stos
imul
arpl
push
sbb
(bad)
fsubr
mov
push
clc
aam
xchg
mov
sbb
in
adc
cdq
mov
(bad)
dec
adc
je
xchg
cdq
cmp
fnsave
or
rol
ret
in
call
jge
xchg
xchg
cli
sbb
aas
mov
jmp
jp
jno
push
xchg
sub
pop
hlt
sbb
mov
lods
jecxz
ds
dec
aas
retf
les
in
pop
jecxz
sub
dec
out
retf
pop
(bad)
pop
or
mov
outs
push
lock
clc
or
xchg
imul
not
push
aaa
or
mov
pusha
mov
scas
rcl
pop
fsub
mov
(bad)
mov
lods
jl
idiv
fisubr
sti
fdivr
pop
mov
cmp
pop
(bad)
xlat
xchg
and
dec
jno
test
out
jb
lods
fld
jl
retf
popa
inc
pop
setae
sbb
cmp
or
adc
enter
mov
mov
int3
inc
in
ret
ds
repnz
sub
repnz
pop
lahf
fwait
jnp
mov
xchg
into
fnsave
aad
loopne
cmp
ins
aaa
pop
mov
push
jmp
jp
(bad)
aad
inc
mov
ficom
cmps
in
arpl
mov
out
test
cmp
or
or
bound
cld
sbb
(bad)
mov
fadd
and
push
stos
or
aaa
test
sub
pop
test
in
push
sbb
and
pop
cli
jle
sub
ds
call
xor
nop
fild
pop
mul
das
push
je
or
sbb
push
add
xchg
call
sbb
ror
pop
xor
mov
adc
mov
inc
jmp
mul
in
jo
sar
je
in
push
push
dec
push
and
fsubrp
stos
inc
int3
int
fwait
jl
int3
je
sbb
ficomp
lds
xor
les
xchg
jmp
shr
mov
jge
jo
loope
pop
or
sar
push
xchg
scas
dec
dec
std
mov
repnz
sub
ret
inc
sbb
and
or
and
xor
xchg
and
inc
sbb
cwde
pusha
lds
add
mov
pushf
adc
inc
add
mov
add
std
inc
test
cld
bound
adc
mov
movs
pop
mov
sub
push
arpl
jge
sub
jbe
(bad)
cli
add
mov
icebp
aaa
push
add
lea
xor
js
inc
push
fsub
xchg
or
push
lea
ds
dec
retf
cdq
fisubr
arpl
jg
adc
inc
iret
(bad)
xor
cdq
les
jmp
lods
imul
out
inc
fmul
jno
xlat
adc
xchg
test
ss
scas
adc
or
or
clc
push
(bad)
add
enter
arpl
out
jmp
jl
pop
adc
and
jmp
pushf
inc
dec
mov
push
sbb
cli
and
cmps
mov
push
nop
sbb
frstor
in
repnz
cmp
dec
cmp
sbb
rcr
push
ret
pcmpgtw
push
jecxz
enter
mov
mov
icebp
or
jmp
iret
inc
push
mov
stc
sti
fsub
stos
daa
ror
daa
pushf
jecxz
aad
xchg
scas
jne
popa
push
outs
dec
jno
test
inc
les
data16
or
cmp
lea
mov
jmp
clc
and
push
mov
push
lock
push
dec
xchg
mov
mov
push
outs
sub
ret
or
and
jl
mov
(bad)
aas
das
jle
enter
xchg
fbld
push
shl
and
cmp
jp
sbb
(bad)
jp
ret
cmp
je
pop
ins
popf
(bad)
xlat
cmp
sub
inc
pop
sbb
or
mov
(bad)
frstor
popa
xchg
and
push
lock
mov
sub
retf
jo
jnp
clc
inc
pop
in
movs
push
adc
jmp
fwait
jle
shl
scas
nop
push
mov
or
aad
scas
and
and
dec
push
sbb
or
mov
int3
popa
addr16
jle
pop
xor
inc
jmp
test
dec
sar
xor
fstp
xor
mov
shl
int3
and
or
mov
dec
mov
ins
int3
xor
stc
cmc
movs
inc
mov
loop
pop
mov
xor
cli
movs
inc
sahf
ds
add
inc
xchg
mov
push
int
gs
daa
scas
add
loope
xchg
mov
cld
into
inc
xchg
adc
leave
imul
and
dec
or
inc
fild
pop
je
and
popf
out
pushf
jns
je
jo
out
je
sub
mov
rol
xor
(bad)
stos
stc
add
and
lock
js
adc
and
pop
repz
hlt
(bad)
jmp
(bad)
jo
inc
pusha
xor
retf
xlat
or
pop
dec
push
aaa
std
cmp
jmp
add
xor
push
push
ds
mov
add
dec
or
ins
mov
inc
add
call
pop
sahf
scas
out
out
mov
dec
arpl
aam
jnp
jmp
pop
clc
test
int
mov
pop
and
fistp
hlt
loopne
int3
hlt
mov
icebp
add
mov
pop
out
jne
mov
shr
js
cmp
pop
mov
dec
test
cmp
inc
lea
shr
sbb
fcmovnb
jns
adc
aam
lock
push
push
push
es
popf
stos
xchg
dec
aad
fstp
jmp
xchg
aas
aam
cdq
loopne
xchg
neg
retf
icebp
imul
imul
or
lahf
sub
ins
stc
pop
movs
add
fdivr
push
or
pop
pushf
cmp
add
imul
fstp
mov
test
xlat
sub
adc
inc
mov
aas
scas
clc
in
retf
ret
dec
dec
cdq
push
hlt
dec
dec
lea
sar
mov
or
xlat
movs
movs
in
call
sbb
mov
daa
lods
aad
add
fst
sbb
call
scas
push
cmp
inc
sub
push
cs
xchg
clc
popf
ret
push
stc
mov
adc
jo
(bad)
out
data16
mov
or
test
or
sbb
xor
and
sbb
cs
retf
push
ror
hlt
pusha
sub
push
sub
mov
xchg
xchg
retf
fld
imul
xor
int
dec
sbb
xor
cmps
cmp
ror
cmp
or
enter
mov
ret
sbb
mov
sub
rol
les
or
inc
jl
xchg
aad
(bad)
data16
cli
fisub
jne
pop
add
sbb
fcom
bound
test
(bad)
jmp
xor
dec
push
popf
out
cdq
sbb
addr16
inc
mov
pop
or
ficomp
mov
sti
mov
arpl
adc
inc
cmp
iret
and
jmp
xchg
dec
cmp
retf
aam
sbb
push
sub
lds
sahf
lahf
dec
mov
cdq
push
aad
call
adc
jecxz
idiv
add
stos
mov
jb
dec
stos
and
pop
add
jg
gs
mov
sbb
mov
rol
leave
pusha
inc
push
fld
inc
daa
adc
mov
out
fistp
mov
adc
xchg
and
mov
mov
push
jne
lahf
sbb
jle
cmps
push
test
mov
aad
in
cwde
inc
repz
sbb
loopne
sub
(bad)
(bad)
cmp
int3
dec
inc
sti
in
repnz
add
fcmovne
pop
fild
pop
dec
sbb
lods
jmp
scas
add
ret
push
je
neg
jg
push
mov
dec
push
iret
aam
js
js
mov
out
mov
aaa
dec
sbb
cld
mov
lods
jno
mov
movs
icebp
ret
push
fidiv
xor
jbe
jns
das
fld
stc
mul
rcl
add
mov
jmp
ss
popf
jle
or
xchg
jge
je
mov
(bad)
mov
mov
test
dec
dec
pusha
sub
cmp
dec
data16
pop
fldln2
stc
xchg
div
jo
xchg
cmp
test
mov
and
jg
ss
pushf
pop
retf
es
fdiv
fabs
jne
enter
add
inc
retf
lock
push
mov
dec
and
cmps
retf
(bad)
mov
mov
jp
stos
cmp
pop
int3
adc
imul
sbb
mul
xor
mov
or
and
ins
cmp
pop
movs
lock
xchg
cwde
mov
ins
icebp
gs
(bad)
iret
mul
mov
cmp
cs
ror
jecxz
loope
adc
mov
pop
iret
xchg
repnz
and
cmp
xchg
test
nop
and
sbb
popf
or
dec
add
icebp
mov
sbb
pop
loopne
je
xor
inc
int
out
sbb
out
rcr
sbb
repz
test
ja
es
jle
std
ret
inc
les
mov
xchg
(bad)
cmp
enter
bound
dec
cld
jg
aad
add
jno
mov
rol
push
rcl
or
loope
xchg
div
mov
outs
or
pushf
xor
jmp
rol
icebp
mov
push
cmp
jne
hlt
pushf
jmp
mov
(bad)
sbb
scas
loopne
popa
mov
mul
dec
dec
out
sbb
in
jno
shr
sub
and
bound
lock
mov
sub
sbb
inc
bound
sbb
sbb
xor
leave
mov
nop
pop
dec
push
jg
test
pop
mov
sub
shl
dec
jg
xchg
xchg
test
adc
push
xor
sti
xor
mov
sbb
fstp
add
sbb
pop
xchg
int3
retf
repz
jae
mov
mov
push
jbe
cmp
stos
push
call
hlt
clc
pop
push
jo
push
pop
jo
pop
daa
loop
or
vmovd
dec
aad
bound
sbb
add
mov
stc
ret
push
xchg
lods
mov
mov
inc
ror
gs
loopne
lock
aad
sub
xor
sub
adc
mov
in
sbb
in
lahf
jge
(bad)
cmp
aam
retf
push
add
push
sub
fnstsw
mov
ins
lds
scas
repnz
fucomp
popa
aam
pop
aam
mov
dec
dec
fdivr
outs
imul
xlat
xchg
xchg
loope
inc
inc
enter
ja
adc
mov
in
mov
movs
out
movs
mov
outs
and
movs
enter
jo
jae
sub
jo
addr16
daa
into
(bad)
xchg
cdq
(bad)
xor
and
push
les
sbb
cmp
push
repz
mov
pushf
out
adc
out
cmp
fadd
out
jmp
repz
neg
dec
stos
push
into
inc
pop
fxch
pop
(bad)
jae
repz
pop
jne
mov
cdq
mov
mov
scas
stos
js
addr16
xor
repnz
cmp
std
cmp
sbb
(bad)
mov
xchg
sub
sub
popa
mov
ins
cmp
mov
pop
xchg
ins
call
ins
ins
adc
cmps
sbb
xor
ins
jns
je
sti
aas
pusha
xchg
idiv
stos
sti
push
mov
stos
outs
aaa
test
int
sahf
jmp
aas
aaa
sbb
inc
push
cwde
xchg
ret
xchg
imul
mov
sub
pop
inc
stos
arpl
inc
xchg
adc
movs
lods
sbb
mov
or
mov
aam
xchg
in
push
jp
cmc
repnz
icebp
xor
in
jae
mov
fwait
lods
cwde
je
pop
jnp
out
loope
lea
and
pop
inc
jae
frstor
add
cmc
fldenv
js
push
pop
(bad)
aam
jns
arpl
je
xor
dec
cli
dec
jmp
xchg
push
sbb
or
popf
sbb
xor
ss
dec
rcr
sub
push
rcr
test
mov
test
add
mov
adc
sar
inc
sbb
cmp
out
lds
mov
daa
out
push
inc
or
sbb
ret
fist
jne
(bad)
dec
push
retf
in
push
mov
data16
loopne
pop
in
jns
and
stc
lea
jae
xchg
cmp
mov
aaa
push
push
inc
sbb
xor
js
adc
and
popa
(bad)
(bad)
ficom
fbld
rol
xor
xor
test
inc
cmps
mov
iret
bt
ins
and
inc
rol
push
mov
add
(bad)
in
cmps
adc
sbb
neg
mov
pop
push
inc
mov
stc
(bad)
xchg
adc
data16
ds
fnsave
ret
add
fadd
and
std
mov
fcom
xchg
xor
aaa
xor
jno
pusha
mov
push
push
dec
out
mov
jbe
mov
cmp
xchg
popa
pop
test
test
dec
out
call
test
scas
cmp
arpl
xchg
push
daa
lds
je
(bad)
mov
dec
inc
or
mov
pop
retf
jnp
movs
dec
xor
mov
push
or
adc
push
retf
jbe
mov
and
sar
xchg
dec
(bad)
pushf
push
push
rol
ss
(bad)
sahf
lock
sub
shr
push
mov
retf
xchg
inc
cmps
les
in
jno
daa
stos
mov
or
aad
mov
retf
mov
inc
and
dec
retf
jae
mov
(bad)
mov
sbb
add
push
call
xor
sub
or
push
fwait
mov
(bad)
mov
shr
scas
mov
test
cmp
fmul
cwde
jbe
push
inc
scas
out
mov
mov
cmp
sti
push
test
lods
xchg
xor
push
out
sbb
jmp
xor
loopne
cli
dec
xor
adc
xchg
rcl
sahf
jl
push
mov
mov
or
gs
mov
mov
push
leave
adc
jns
xchg
cld
ret
add
fwait
inc
or
repnz
jl
shr
shl
jmp
xchg
push
je
aam
je
nop
movs
inc
jns
lock
or
fbstp
pop
pop
in
mov
mov
jnp
je
jns
fcom
test
sbb
and
dec
cmp
jg
mov
fcomp
xchg
call
push
inc
out
dec
pusha
fcomp
fs
fst
xor
lds
aad
sbb
popa
push
gs
add
push
mov
or
or
rol
and
jmp
dec
(bad)
fst
adc
loop
or
dec
loopne
rol
popf
dec
jp
or
sub
pop
sub
lock
mov
int
test
(bad)
aaa
fiadd
(bad)
aad
mov
outs
mov
js
lock
xchg
out
cmp
sti
(bad)
jmp
dec
(bad)
in
xor
dec
xchg
test
mov
jne
jbe
fwait
retf
pop
mov
jnp
mov
jmp
les
rcl
pop
call
in
add
mov
and
sahf
out
cmps
push
stos
jb
in
(bad)
push
in
sbb
mov
push
stos
pop
mov
add
outs
push
and
fst
mov
sub
mov
stos
mov
ins
push
push
aas
in
leave
ds
cmps
sub
or
mov
out
xor
pop
push
or
jmp
fisub
xor
xor
mov
dec
outs
xor
mov
cmps
das
mov
aas
jle
repnz
repnz
repnz
jecxz
adc
jno
imul
retf
test
aam
and
dec
popf
add
ror
push
pop
aam
mov
sbb
xchg
hlt
pop
push
dec
test
mov
inc
jno
xlat
and
adc
scas
inc
ins
mov
mov
mov
shl
sbb
cmp
inc
cmps
not
mov
add
popa
xor
and
add
into
dec
sub
repz
imul
mov
ror
loop
mov
mov
mov
fidiv
sub
retf
test
bound
enter
test
(bad)
das
or
(bad)
lds
dec
xor
xchg
pusha
sbb
mov
loop
or
fwait
jecxz
push
shl
ins
mov
add
push
dec
sub
imul
jl
pop
cmps
push
gs
xchg
push
repnz
sub
dec
dec
inc
sub
mov
aad
cmp
je
movs
ret
into
xor
ret
cmp
inc
sbb
mov
xchg
pop
mov
push
xchg
mov
inc
and
push
cmp
and
add
pop
fucomi
or
enter
cmp
sbb
mov
pop
test
jmp
push
test
mov
sbb
retf
mov
sub
add
push
and
cmp
arpl
jl
adc
mov
fldcw
ss
or
or
mov
and
add
push
or
cdq
ins
adc
dec
adc
idiv
or
push
shl
test
mov
cmp
lods
out
fild
add
in
pop
clc
ins
out
adc
es
or
jg
jmp
and
dec
jp
jno
aaa
xor
test
pusha
dec
daa
cmp
shl
dec
call
cdq
xchg
pop
dec
iret
jl
in
ret
pushf
mov
aaa
jns
lds
adc
or
rcr
or
jle
jne
jns
cwde
les
pop
test
push
mov
movs
xlat
sub
icebp
sysenter
in
arpl
fld
ficomp
in
pop
jge
push
fs
test
stos
jmp
xchg
fcmovne
adc
pop
lea
cmps
pop
xor
xchg
jo
jnp
lods
push
(bad)
xchg
jne
cmps
pop
pop
push
ds
xchg
es
sahf
inc
stos
jle
push
enter
in
mov
and
sbb
sbb
add
popf
(bad)
jmp
int
adc
pop
shr
cwde
push
jbe
ins
cmc
cwde
inc
pop
jmp
xchg
push
test
bound
add
push
or
mov
cli
push
sbb
std
test
push
call
sar
pop
cmp
jle
xor
adc
adc
and
cmp
fwait
sbb
dec
ins
xchg
sbb
xchg
lds
mul
mov
inc
test
xor
fcom
add
stc
gs
push
adc
rcl
inc
repnz
pop
push
mov
or
aam
out
or
cmp
clc
test
shr
shl
xchg
add
aaa
xchg
cmps
mov
adc
sbb
repz
(bad)
xor
(bad)
ins
out
(bad)
in
dec
test
pop
add
cmp
in
xchg
outs
mov
cmp
xor
pop
stc
data16
cmc
cmp
aad
and
cdq
sbb
cmp
xor
or
cli
add
pop
std
sub
jmp
stc
adc
test
and
test
minps
xchg
fwait
jno
mov
cmp
jns
inc
bound
fsubr
push
dec
mov
inc
push
popf
mov
sub
mov
mov
loopne
rcl
sahf
data16
dec
and
or
xor
loopne
sbb
mov
leave
or
mov
test
push
test
fs
mov
push
mov
cmps
ins
jbe
inc
mov
fwait
sbb
or
push
ja
jno
mov
xor
mov
jno
in
xchg
add
out
xor
daa
dec
cmp
into
test
js
sti
ret
pop
push
mov
ds
jnp
push
scas
and
adc
mov
jae
mov
mov
xchg
dec
stos
push
dec
test
mov
iret
ins
lahf
adc
xor
xor
add
and
adc
popf
pop
jb
mov
ss
mov
cwde
cld
loop
mov
xor
jge
in
xchg
push
inc
dec
imul
fsubr
xor
rcr
das
cli
mov
mov
adc
mov
stc
inc
ss
pop
(bad)
aaa
mov
test
push
je
xchg
jecxz
arpl
lods
push
std
ins
test
js
idiv
outs
std
ss
sbb
sbb
push
lahf
mov
jns
mov
cli
pop
call
repz
fs
dec
bound
fstp
stc
add
and
bound
inc
or
call
pop
shl
xchg
sti
es
pop
cwde
arpl
sub
xchg
xlat
lods
push
pop
leave
ja
inc
or
lods
jmp
bound
jae
push
mov
in
pop
cmp
adc
or
sbb
movs
inc
cwde
mov
adc
and
mov
fidiv
add
inc
cmps
dec
xchg
ins
out
mov
pop
enter
mov
cmp
jb
fstp
adc
add
cmp
mov
xchg
mov
mov
inc
mov
and
push
ins
dec
scas
pop
dec
or
sbb
sahf
xchg
iret
(bad)
call
cmp
inc
cmp
mov
push
jmp
icebp
scas
retf
xchg
nop
mov
adc
push
das
and
inc
cdq
push
cli
xor
xchg
fadd
mov
cld
test
jge
or
cld
mov
jb
mov
push
shl
pop
pop
inc
test
cmp
push
out
ror
repz
and
sbb
in
enter
(bad)
clc
xchg
or
xor
jl
xchg
jle
mov
cmc
je
outs
dec
adc
sub
pushf
out
sub
push
xchg
sub
inc
inc
sbb
stos
into
or
rol
add
push
cmp
movs
mov
mov
clc
mov
ins
fist
int3
mov
(bad)
mov
pop
lahf
pop
out
outs
xchg
sub
loop
nop
mov
rcl
cmp
shl
movs
jmp
push
in
fnstsw
mov
daa
loope
retf
jae
add
adc
xchg
in
fwait
out
jecxz
call
and
test
mov
ja
cmps
pop
mov
inc
jo
mov
push
xor
dec
sti
jmp
dec
dec
push
fst
repnz
and
icebp
xor
pusha
jnp
inc
in
inc
push
push
es
cmp
ret
pop
add
cwde
pop
mov
test
jl
(bad)
mov
lods
mov
movs
push
sbb
jo
fimul
rcr
jecxz
adc
jp
sbb
and
fstp
cli
lock
pop
aaa
fild
mov
mov
and
and
mov
ins
ds
loopne
jbe
mov
sahf
int
scas
mov
mov
cmps
push
test
je
dec
(bad)
xchg
push
scas
mov
sar
push
call
lods
mov
push
icebp
xchg
out
test
adc
sub
pop
rcl
imul
push
or
cmp
dec
lods
ret
icebp
sub
inc
add
sbb
jne
fwait
jl
das
ret
push
jnp
clc
ret
ss
movs
mov
lahf
sbb
stos
xor
mov
and
push
or
out
and
jae
js
cs
fisubr
fisub
mov
adc
lea
test
mov
mov
(bad)
adc
mov
xor
xor
add
ss
jecxz
test
cmps
in
or
scas
into
inc
ja
les
xor
scas
mov
daa
aam
mov
dec
cmp
aad
(bad)
fdiv
push
add
test
pop
ds
cmp
pop
out
inc
loope
retf
hlt
clc
ja
out
es
xor
jmp
and
out
fiadd
(bad)
sub
inc
mov
lods
mov
dec
dec
jle
cmovbe
xchg
push
mov
loop
sbb
dec
mov
pop
loope
dec
ret
aas
retf
cmp
mov
xor
xor
mov
(bad)
mov
mov
mov
mov
mov
sbb
mov
xchg
es
dec
js
imul
ja
leave
das
(bad)
stc
jge
add
pop
mov
push
es
inc
in
js
call
sub
adc
aad
repz
mov
fs
lods
nop
xor
xchg
and
lods
cmp
add
jecxz
pusha
dec
push
jno
imul
sbb
pushf
xor
pop
push
dec
stos
sub
inc
and
sub
and
and
leave
sub
mov
aaa
mov
mov
xor
cmp
mov
add
jbe
fwait
imul
data16
cmp
push
pop
jb
sbb
jno
scas
rol
sub
push
xchg
and
cld
mov
mov
mov
cmc
mov
jns
pop
jnp
jl
pop
fisub
addr16
movs
out
jnp
push
inc
inc
xor
sub
(bad)
adc
and
mov
repz
arpl
jle
lds
pop
cmp
push
adc
inc
loop
std
inc
enter
aaa
sbb
repnz
add
repz
push
stos
xchg
pop
add
imul
pop
fstp
ret
push
cmps
xchg
test
sbb
int3
sbb
cmc
mov
xor
out
call
adc
int
pop
in
das
ror
sub
adc
push
loope
mov
jmp
and
add
xchg
mov
fwait
add
loopne
fdivr
cmp
fcomp
test
mov
mov
mov
fadd
cmp
cmc
iret
nop
jno
cmps
pop
xor
xor
fadd
mov
nop
xchg
push
inc
popf
leave
sub
cmps
push
cli
mov
pop
test
in
adc
xlat
adc
aad
fstp
hlt
iret
pop
add
cmp
push
xchg
mov
xlat
dec
aam
cmp
and
adc
cli
hlt
cmps
jmp
push
outs
mov
or
int
js
in
jmp
mov
popa
(bad)
adc
repnz
mov
fimul
and
int3
jle
jmp
(bad)
mov
lock
fnstenv
xchg
inc
mov
lea
mov
call
inc
addr16
dec
xor
mov
pop
cmp
icebp
cmps
out
dec
xchg
mov
sub
xlat
sub
das
aam
call
fwait
pop
jge
jnp
pop
sar
add
(bad)
pop
adc
adc
(bad)
jae
retf
cmp
or
into
mov
test
sti
dec
mov
push
fnsave
cmp
lods
fwait
nop
movs
xchg
pusha
pop
hlt
add
sahf
imul
mov
cmp
cmc
inc
jne
in
mov
aam
icebp
lods
bnd
movs
mov
push
ja
dec
pop
mov
xor
data16
es
xor
push
add
adc
sbb
jmp
add
jno
aas
mov
sub
fcom
nop
push
mov
in
mov
or
pushf
sub
jnp
pushf
popa
movs
test
mov
fist
pop
mov
jns
test
enter
mov
stc
loopne
shr
(bad)
mov
clc
xor
ror
pop
jnp
push
dec
inc
sbb
popa
jge
mov
jne
nop
push
sbb
popf
ss
pop
popa
sti
or
dec
and
adc
mov
retf
sub
inc
mov
inc
ds
xor
fwait
sti
mov
pop
push
fucomip
xor
xor
outs
and
and
xor
int3
into
out
and
push
mov
cmc
jae
inc
mov
mov
mov
ret
movs
sub
out
fbld
clc
jmp
mov
xor
daa
push
push
sbb
cwde
retf
mov
fcom
fwait
sub
push
dec
add
mov
jge
sub
add
fcomp
mov
(bad)
sti
sub
add
xor
aaa
popa
(bad)
dec
addr16
in
popa
xchg
add
imul
add
les
or
push
mov
cmc
dec
fstp
and
mov
jle
dec
pop
adc
lock
jmp
icebp
xor
cmp
imul
adc
stos
add
xchg
and
(bad)
pop
inc
call
jmp
fs
test
xor
jne
fsubp
xor
or
mov
push
fisttp
and
adc
add
add
mov
test
xor
rol
push
in
pusha
mov
add
adc
pusha
in
add
popa
imul
loope
(bad)
icebp
rcl
div
and
js
frstor
outs
xchg
or
sbb
rcr
and
push
mov
inc
xor
outs
pop
cmps
add
push
shl
(bad)
clc
das
push
shl
lock
and
aaa
fdivr
pop
xor
pop
loop
pushf
fsubr
jno
dec
xor
sbb
sbb
sbb
shl
je
lods
jmp
fnstcw
icebp
test
clc
stos
sub
(bad)
inc
ds
fsub
sti
or
push
jns
fdiv
pusha
les
mov
xchg
jmp
stc
retf
jmp
outs
mov
int3
lods
push
inc
sub
sar
fstp
adc
adc
out
ret
fsubr
xchg
(bad)
sbb
add
dec
xchg
inc
and
dec
inc
ins
dec
pusha
xchg
sti
or
fcomp
(bad)
xchg
dec
cmp
adc
fstp
pop
les
popf
adc
div
fsub
or
lods
fisub
xor
aad
fwait
push
push
pop
xchg
pop
dec
(bad)
jmp
ins
cmps
jle
(bad)
shl
(bad)
or
ret
cdq
mov
adc
push
lds
int
xchg
pop
in
or
xchg
mov
call
mov
bound
push
or
test
or
dec
in
dec
and
pop
mov
(bad)
and
cmp
mov
or
or
and
mov
inc
add
ss
(bad)
clc
sbb
inc
pop
faddp
and
mov
retf
pop
arpl
or
ins
shr
cmp
inc
(bad)
popf
sbb
jnp
jb
pop
xchg
iret
sub
repz
retf
aaa
daa
rol
lahf
mov
loop
jle
pop
test
mov
mov
outs
cmp
or
imul
xchg
sbb
cwde
dec
ret
and
and
fs
xor
daa
ret
push
sbb
adc
add
push
xchg
test
retf
sbb
sub
jmp
cmps
push
jle
ret
sti
add
xor
loope
pusha
jge
stos
jecxz
dec
scas
int
pop
jmp
pop
pusha
mov
into
xchg
aad
mov
xchg
idiv
ins
xor
ds
cld
xor
xchg
aas
sub
sti
out
fcomp
inc
mov
dec
(bad)
div
push
xor
add
daa
sub
pop
loope
daa
cmp
bswap
cmps
call
popa
dec
outs
mov
and
jecxz
xor
lahf
std
retf
rcl
mov
xchg
(bad)
test
push
stos
mov
xor
dec
mov
jns
xchg
addr16
sub
xor
mov
retf
sub
leave
mov
mov
mov
cmp
sahf
pusha
cld
jae
aaa
xchg
push
cmps
ins
dec
in
push
in
cmp
das
or
xchg
xor
out
rol
cmc
call
addr16
add
push
fiadd
std
dec
std
xchg
int
push
mov
loope
pop
loopne
jp
add
mov
and
mov
or
add
and
and
mov
ret
test
push
jle
mov
clc
paddq
sahf
adc
jmp
pop
inc
mov
jg
lea
xlat
rcl
loope
cmp
adc
or
stos
and
add
sbb
out
popa
(bad)
jecxz
ds
sbb
mov
lock
sar
ret
mov
popa
jecxz
aam
pop
xlat
dec
(bad)
push
dec
stos
mov
adc
int
cmc
(bad)
pop
inc
jle
add
mov
inc
jge
stc
xor
jp
ret
pop
mov
xchg
loopne
jno
lahf
add
jo
cmp
lds
pop
loope
cli
shr
jecxz
jo
push
add
es
jb
and
call
mov
js
or
jge
mov
fcmovnb
mov
adc
fnstcw
data16
repnz
pop
and
add
jge
mov
or
imul
cs
sbb
cmps
std
aas
rcr
inc
cmp
jl
fisub
push
mov
rcr
mov
xor
sbb
sub
(bad)
movs
add
push
push
push
pop
cs
dec
sub
leave
xlat
jnp
xchg
dec
scas
sar
js
ins
push
add
hlt
jmp
sub
sahf
inc
add
and
inc
mov
fstp
or
stos
xchg
inc
clc
sbb
cmp
sbb
and
call
aaa
outs
es
mov
dec
fsubr
add
cli
pusha
nop
sub
sub
shl
lds
lods
push
out
fstp
xchg
jg
fistp
and
int3
or
sbb
xchg
mov
sbb
ror
js
and
cmp
es
sahf
aas
int
push
sub
jmp
fdivr
(bad)
jno
cmp
retf
inc
pop
mov
cmp
xchg
scas
daa
xchg
jne
mov
mov
push
jl
lods
enter
cmp
mov
ret
test
(bad)
mov
iret
mov
inc
xchg
push
repnz
and
push
cs
and
sti
cmp
push
pop
sub
stos
(bad)
in
out
in
ret
sub
sbb
fnstsw
(bad)
outs
(bad)
inc
mov
sub
jecxz
dec
push
shl
inc
pop
dec
mov
mov
mov
rcl
pusha
push
clc
test
gs
or
and
(bad)
jae
mov
inc
int
out
sub
sub
mov
xor
jecxz
add
cmp
retf
adc
sub
std
dec
iret
mov
into
or
dec
jmp
xlat
in
dec
loop
mov
mov
test
add
inc
ss
sbb
mov
shl
dec
aam
icebp
inc
jne
or
pop
outs
std
push
push
mov
test
lods
sub
in
adc
inc
or
or
or
jl
xchg
adc
pop
sub
and
push
jnp
fisttp
popa
xor
loopne
mov
adc
cmps
imul
(bad)
fwait
aaa
mov
aas
pop
ror
cdq
pop
aam
jbe
jbe
sbb
jle
mov
pop
add
or
inc
ss
or
dec
pop
call
pop
jg
dec
leave
fist
sbb
xlat
ret
jae
pop
and
ds
bound
xchg
lea
fiadd
push
adc
sbb
push
cli
in
mov
jno
pop
(bad)
cwde
scas
and
ror
add
adc
or
movs
aad
sbb
mov
cmps
inc
sbb
(bad)
push
pop
mov
sahf
push
dec
mov
pop
mov
jp
add
sar
inc
das
xor
test
imul
mov
adc
add
outs
lock
pop
sub
push
ins
test
jne
xchg
adc
jmp
js
cmps
leave
outs
inc
push
cmp
mov
dec
mov
or
add
bound
mov
idiv
add
mov
cmp
xor
out
xchg
sar
xchg
or
in
ret
mov
dec
scas
pushf
add
aad
push
nop
xor
add
popf
das
test
mov
aas
jo
jae
stc
mov
(bad)
fbld
or
xchg
push
jp
and
mov
add
xchg
mov
mov
div
or
xor
inc
ss
in
div
mov
mov
call
(bad)
push
mov
(bad)
not
push
xchg
sahf
adc
call
mov
jmp
outs
mov
inc
xor
ins
and
add
mov
inc
cdq
mov
stos
inc
jecxz
pop
and
sub
ss
pop
fadd
ret
push
leave
aad
push
mov
pop
rcl
push
sub
fnstsw
outs
loop
std
mov
pop
inc
inc
adc
jmp
push
repz
into
jns
or
in
clc
sbb
ins
fs
in
int
or
xchg
mov
loop
add
shl
jb
xor
rcr
push
xor
mov
in
popf
sbb
neg
pop
dec
(bad)
data16
adc
jg
mov
out
sbb
jbe
shr
inc
cld
pop
lea
int3
adc
ret
jns
cs
pop
loop
adc
in
inc
rol
shld
movs
pushf
icebp
mov
push
xor
les
mov
adc
dec
sbb
repz
jmp
jl
mov
cmp
cmps
pop
cld
inc
lods
and
push
mov
add
xchg
repz
jmp
aas
mul
push
jp
pop
pop
jmp
loopne
add
fisubr
sbb
popa
aad
sub
mov
retf
aaa
pushf
push
add
cmps
jae
adc
and
xchg
aad
adc
call
jp
push
xchg
push
sbb
xor
sub
mov
push
scas
sti
retf
xor
aad
ret
in
sbb
int3
dec
jae
dec
test
xlat
xchg
dec
mov
lock
test
pop
jbe
add
int
in
js
(bad)
and
or
lea
push
cmp
or
fadd
out
fdiv
pop
and
std
jbe
ja
out
mov
outs
fcom
loop
adc
int
xor
pop
ss
mov
das
mov
add
jge
xchg
(bad)
mov
mov
daa
cmp
mov
daa
dec
rol
dec
xor
pop
aas
jge
cmc
aam
pop
stc
mov
les
add
gs
mov
cmps
cld
inc
and
out
xchg
call
loop
aam
fcmovnbe
pusha
lods
ja
lock
aas
pop
(bad)
mov
add
out
jae
adc
jmp
popf
in
imul
cdq
dec
mov
mov
dec
push
push
std
std
dec
scas
cli
dec
jmp
xchg
cdq
cmp
mov
xor
aam
aam
sub
loop
lods
jecxz
jge
out
(bad)
ficomp
scas
sub
jns
ja
mov
(bad)
jo
mov
add
int
movs
into
adc
fadd
hlt
jg
neg
retf
fcom
mov
cmp
mov
jecxz
inc
jno
sbb
idiv
sub
mov
pop
adc
push
(bad)
mov
scas
xchg
jns
icebp
xor
mov
stc
add
test
mov
push
and
daa
retf
in
push
cld
push
stos
mov
nop
(bad)
xor
cmp
hlt
fstp
ss
(bad)
cmp
dec
loope
inc
pmuludq
or
add
mov
push
mov
daa
mov
cld
je
scas
call
fsub
retf
inc
dec
push
std
fcomp
ret
add
fs
mov
mov
hlt
pop
imul
jns
jecxz
nop
mov
mov
ss
pop
cwde
mov
aaa
popa
dec
fucomi
or
and
and
dec
inc
mov
lock
fiadd
pop
pusha
in
pop
(bad)
push
xor
sbb
lods
push
retf
or
cs
(bad)
jb
pop
mov
add
clc
shl
mov
shl
lahf
xor
jge
pop
mov
pop
xor
movs
ror
sub
mov
jb
scas
or
dec
mov
push
mov
xor
or
mov
sub
pusha
jbe
sub
movs
jecxz
sub
or
cmp
pop
jb
imul
sub
xchg
jnp
mov
xchg
jmp
add
mov
lock
call
mov
sbb
push
call
nop
mov
gs
add
clc
das
popf
pop
dec
jp
cld
mov
add
ins
in
sub
call
addr16
fisttp
bound
sti
into
fld
mov
scas
inc
sbb
jmp
fldenv
sub
jae
ret
inc
fst
lods
aam
xlat
inc
or
in
lea
and
out
imul
pop
add
lods
push
mov
lahf
mov
in
jp
es
xchg
hlt
inc
dec
arpl
les
or
push
xor
movs
push
push
repz
inc
imul
call
aad
mov
sbb
je
fidivr
and
xor
inc
(bad)
xlat
add
pop
or
mov
adc
sub
test
sti
pop
jb
adc
pop
mov
cmp
push
out
dec
sub
mul
and
out
mov
mov
mov
push
test
nop
adc
mov
xchg
or
inc
mov
out
ret
in
icebp
neg
sub
daa
ss
jb
mov
mov
inc
fiadd
and
dec
mov
dec
jmp
pop
xchg
div
in
pusha
ins
jge
pushf
sbb
jbe
mov
push
das
jmp
scas
ja
fsub
mov
sub
gs
pop
cld
int
xor
lods
mov
pop
jecxz
sub
into
and
icebp
sti
and
or
lods
jecxz
popa
jb
push
movs
ror
js
jge
fldcw
adc
jo
pushf
sbb
sub
in
fldcw
mov
sbb
push
and
outs
pop
jno
fwait
shl
popa
jle
pop
call
rcl
inc
mov
mov
js
mov
adc
add
cmps
xchg
ins
mov
jge
ja
cmp
dec
mov
inc
mov
cmps
jns
xchg
pop
idiv
retf
sar
dec
sbb
and
jnp
cmp
fst
add
gs
lods
inc
xchg
xchg
mov
pop
xor
xchg
inc
add
or
std
or
js
mov
gs
shr
mov
pop
jae
outs
lahf
sbb
jg
xchg
aam
jns
gs
mov
addr16
and
retf
add
inc
dec
fisttp
lods
jl
adc
rcr
cli
push
mov
sub
fmul
out
push
and
mov
test
fisttp
sahf
inc
icebp
pop
adc
test
ins
int
cmps
add
push
inc
xchg
jle
push
cmp
fcomi
(bad)
cdq
adc
fmul
test
js
xor
dec
repz
mov
adc
sahf
ins
pop
test
push
in
fiadd
sbb
arpl
xor
jns
out
dec
or
aas
sbb
shl
out
jmp
neg
popf
rol
xchg
cmp
aas
jle
mov
cmp
push
cld
addr16
cdq
dec
jp
popf
ins
pop
push
mov
push
(bad)
push
cmc
xor
inc
cmp
cmc
ficomp
daa
(bad)
hlt
dec
inc
xchg
jb
(bad)
mov
pop
and
add
mov
out
ja
cmp
fs
xor
rcl
push
shr
jge
cmp
rcl
xchg
or
clc
mov
sub
fistp
jmp
xchg
xor
retf
cld
cmp
test
inc
dec
mov
push
fldcw
pop
push
(bad)
shl
out
outs
shl
inc
out
add
xor
pop
adc
sahf
dec
dec
sahf
in
scas
adc
xchg
jne
lahf
cmp
cmp
mov
loope
jmp
es
inc
les
sub
jnp
pop
stos
inc
pop
xor
fimul
jge
lock
pop
jns
add
cmps
adc
mov
mov
jne
enter
push
inc
inc
jnp
clc
ins
(bad)
sbb
fisttp
mov
call
adc
adc
add
out
push
lock
sbb
mov
adc
aad
mov
cmp
outs
cdq
call
xlat
lods
jecxz
dec
pop
test
sbb
mov
sbb
xchg
aaa
movs
enter
xor
inc
adc
mov
mov
mov
(bad)
mov
or
pop
sbb
mov
test
and
shr
mov
aad
arpl
fstp
mov
xlat
les
mov
rcl
vgatherqps
sbb
retf
xchg
or
pop
xor
jno
mov
xlat
inc
dec
jle
xchg
out
stc
scas
out
push
out
cs
fdiv
xchg
jne
adc
cmps
imul
fcomp
test
sub
neg
sbb
ins
mov
push
icebp
cmp
imul
js
aaa
adc
cmps
jmp
jmp
cmp
add
push
lods
in
jo
sub
fwait
sbb
movs
leave
cmc
mov
dec
jle
mov
pop
xchg
lods
push
int3
push
add
gs
pop
aaa
xchg
dec
xor
or
aad
inc
and
add
ffree
inc
js
sub
pop
fild
mov
push
push
push
lods
and
clc
jmp
fs
adc
cmc
(bad)
and
adc
sub
jmp
cmp
aaa
in
pop
movs
fimul
movs
sub
jae
adc
ins
mov
test
xchg
sbb
adc
imul
sbb
stc
jo
inc
add
mov
scas
mov
mov
and
shl
retf
popa
mov
shl
into
or
loop
(bad)
jae
mov
or
dec
out
stos
mov
jnp
mov
aas
inc
push
sahf
outs
fs
inc
lahf
push
cmps
in
push
and
cli
clc
adc
addr16
(bad)
outs
sbb
adc
add
movs
daa
ret
loopne
cmp
mov
cmp
jmp
inc
xor
dec
ja
pop
in
(bad)
xchg
mov
fmul
fisttp
xor
mov
out
sahf
leave
lds
scas
call
test
pop
sbb
repz
pushf
js
jge
push
jne
inc
loop
(bad)
and
and
fwait
sub
push
ja
jle
call
mov
cli
test
mov
adc
and
out
jp
inc
pop
jo
push
call
jmp
xor
(bad)
(bad)
xchg
sbb
ret
sub
shr
fs
bound
and
clc
push
jg
cld
das
shl
test
imul
mov
enter
add
dec
xchg
add
or
ins
loopne
sbb
hlt
sbb
xor
xchg
pushf
sub
xlat
xor
jnp
dec
push
jb
push
pop
mov
and
mov
scas
mov
jecxz
push
jp
fldenv
xchg
adc
movs
shl
ss
xchg
fsub
gs
sbb
jecxz
cdq
packssdw
dec
and
push
sub
(bad)
aam
inc
add
bound
jmp
and
scas
fwait
rcr
sbb
sub
sbb
mov
or
popa
inc
das
int
(bad)
mov
popa
aas
iret
fwait
sti
not
jmp
adc
ret
sbb
jo
inc
adc
jnp
sub
xchg
cmp
adc
mul
int3
add
inc
sbb
les
inc
mov
cmp
sub
ficomp
mov
mov
adc
cmp
and
scas
cld
cdq
mov
aad
pop
(bad)
and
dec
sub
cld
inc
lods
pop
jnp
and
add
mov
movs
out
enter
ins
ins
rep
in
cmps
mov
movs
pop
and
jge
movs
and
cmp
xor
mov
data16
inc
imul
fimul
adc
stos
push
xor
pop
movs
iret
sahf
sbb
ret
adc
stos
push
jo
xlat
and
push
ins
sbb
sub
fild
shr
daa
mov
cdq
xor
cmp
pop
adc
mov
push
adc
xor
xor
push
lock
cmp
retf
add
movs
mov
adc
mov
ja
addr16
(bad)
aad
shl
cs
nop
retf
adc
pusha
scas
or
call
add
xor
in
or
shr
movs
pop
inc
movs
test
mov
xchg
(bad)
repz
mov
or
pop
imul
cmp
jb
mov
in
pop
mov
mov
retf
inc
pop
ja
fst
jmp
mov
dec
int3
xchg
int
mov
mov
jnp
and
stc
mov
shl
sbb
or
jmp
ins
loop
movs
gs
inc
jae
or
std
sahf
lock
in
(bad)
push
ret
xchg
ins
dec
lahf
push
imul
icebp
mov
cmp
(bad)
mov
push
or
jb
xor
call
cmps
js
int
xor
mov
(bad)
jmp
push
or
mov
movs
push
jmp
ds
cdq
mov
jns
and
mov
cmps
pop
cmp
retf
inc
pop
gs
leave
shl
jae
sbb
mov
and
push
add
movs
mov
mov
jne
lods
xchg
adc
mov
dec
(bad)
mov
xchg
and
sahf
pop
mov
std
jmp
fucom
ret
rol
mov
xchg
sbb
test
btc
nop
pop
mov
int3
stos
xor
mov
bswap
inc
(bad)
inc
inc
cs
jae
pop
push
sub
inc
aad
dec
cmp
mov
push
scas
cmc
mov
test
jno
loope
ss
fidivr
(bad)
sahf
ins
movs
adc
test
(bad)
inc
ror
sbb
mov
repnz
sub
or
pop
loopne
adc
cld
xchg
imul
mov
or
dec
mov
setno
mov
adc
xor
mov
addr16
imul
cli
cmp
cmp
cmc
sub
pop
push
cmp
push
xchg
scas
sbb
in
int
sbb
leave
and
(bad)
aam
out
lds
loop
adc
stos
icebp
xor
pop
sub
out
call
dec
inc
daa
dec
mov
jae
sub
mov
xor
rep
(bad)
movs
fistp
pop
mov
xor
out
jle
shr
or
cmp
into
cmp
jb
adc
std
(bad)
jmp
push
fimul
(bad)
adc
cmp
dec
pop
jl
cwde
arpl
sub
cmps
or
cmp
inc
cwde
push
in
sahf
idiv
rol
outs
jns
stos
pushf
out
lods
xchg
pop
add
lods
jb
test
or
push
inc
into
cmp
mov
push
dec
scas
mov
movs
add
mov
repz
inc
in
mov
sub
jmp
lods
inc
pop
test
jbe
jne
fbld
xchg
jbe
xchg
test
pop
fild
sub
iret
(bad)
int3
shl
fwait
push
jmp
in
movs
push
and
jne
push
std
imul
push
and
test
sbb
jmp
out
jp
push
inc
test
mov
mov
cmp
(bad)
and
lahf
and
pop
push
sar
adc
jnp
jns
cmp
cmp
popa
jmp
push
in
dec
lahf
add
mov
ss
sti
fadd
adc
data16
xchg
fild
test
mov
jns
call
mov
xor
outs
arpl
shr
loop
push
jle
sub
pushf
mov
sti
fdivrp
add
push
sbb
jnp
ror
pop
xchg
xlat
fwait
cmc
enter
pop
mov
dec
mov
stos
ret
mov
or
out
je
cs
mov
shl
fld
fist
jne
movs
jae
pop
fimul
add
and
popa
mov
test
icebp
call
pop
fiadd
or
sub
xchg
or
std
shr
mov
arpl
xchg
mov
xor
es
pop
xchg
out
pop
call
sub
mov
ret
jle
add
mov
out
aad
leave
lods
jmp
loope
sub
dec
xchg
retf
sbb
lods
test
adc
sub
sub
into
out
test
adc
mov
ins
mov
ret
mov
sbb
cmps
popf
xor
(bad)
mov
adc
dec
dec
(bad)
sbb
ret
cmps
xchg
adc
inc
cs
add
dec
popa
cmp
ins
mov
adc
adc
cli
cmp
cmc
scas
mov
push
nop
sub
or
push
cdq
mov
xor
adc
xor
sub
mov
xor
pop
cmps
imul
int3
add
fs
rcl
aas
pop
or
in
mov
and
mov
adc
pushf
outs
ret
and
pop
and
retf
pop
jp
push
mov
enter
adc
(bad)
adc
inc
jp
imul
(bad)
daa
dec
and
je
add
test
xchg
int
dec
cmp
imul
sbb
adc
dec
mov
mov
mov
sbb
fst
or
jge
aam
dec
mov
mov
adc
scas
xor
jmp
jl
jno
or
ins
in
push
cs
test
and
jns
sub
push
pop
sar
mov
aas
cmp
cmp
je
xor
js
popa
aam
mov
inc
xchg
fistp
dec
mov
shr
mov
pop
sub
test
cmps
xor
jns
ret
and
sbb
aad
sahf
cmp
mov
loopne
aam
shl
in
mov
fild
cmp
cli
mov
sub
and
mov
test
in
sub
push
(bad)
mov
test
cmps
mov
les
adc
dec
lock
test
jp
(bad)
in
movs
je
stos
sub
push
outs
data16
stc
cld
in
cs
addr16
std
inc
ror
push
mov
(bad)
cmp
imul
pop
mov
push
mov
stc
int
into
jmp
add
lods
mov
(bad)
dec
loop
xchg
dec
jmp
lods
jmp
push
fwait
dec
push
loopne
dec
push
fcmovnb
pop
int3
call
rol
sub
test
(bad)
mov
sbb
ds
sub
jmp
sub
jmp
retf
pushf
ret
mov
div
repnz
les
push
in
dec
sub
dec
sub
scas
sbb
retf
inc
cmp
xchg
fs
lock
pusha
add
dec
(bad)
(bad)
or
fwait
cmp
out
sti
xor
add
jmp
and
lahf
cmp
out
sub
retf
or
daa
push
aad
cmovnp
sbb
idiv
xor
push
repz
xchg
sub
and
mul
pop
sbb
int3
ret
xchg
cmp
mov
test
es
les
xchg
pusha
test
fs
scas
mov
test
dec
es
retf
mov
or
nop
jle
sub
inc
leave
xchg
lods
mov
jns
cmp
test
(bad)
jne
pop
mov
push
mov
pop
(bad)
bound
mov
mov
mov
add
idiv
ja
movs
lock
push
xor
movs
and
arpl
mov
mov
inc
rol
adc
mov
je
popf
mov
xchg
sbb
mov
sbb
cli
xchg
mov
nop
pop
test
inc
leave
aam
mov
adc
and
or
sub
pop
retf
jecxz
xchg
enter
jne
hlt
scas
jae
mov
push
mov
enter
adc
pop
mov
sub
jmp
or
mov
sub
pushf
or
inc
or
pop
in
cmp
ins
fdivr
or
cmp
and
xor
mov
mov
(bad)
add
fcomi
sub
js
pop
pop
sbb
sub
(bad)
lahf
mov
and
pop
mov
mov
neg
int
sbb
sbb
loope
(bad)
cmps
loop
xchg
cld
adc
aaa
pop
jg
lods
dec
mov
dec
xchg
add
cmp
sar
pop
fadd
add
cmps
push
add
(bad)
jmp
jno
ret
and
push
neg
pop
sub
cli
test
mov
xor
nop
popa
pushf
add
retf
pop
cmc
cmp
add
shl
dec
popa
inc
in
sbb
in
jmp
mov
mov
jl
mov
cmp
mov
(bad)
fbstp
mov
add
or
inc
dec
inc
mov
retf
rcr
xor
jle
mov
daa
push
pop
sub
xchg
inc
xor
hlt
xchg
pusha
sbb
ds
cmps
sbb
scas
and
aaa
lahf
xor
and
cwde
shl
pop
or
loop
push
adc
push
shl
xor
in
retf
xchg
jnp
cmp
mov
sti
cwde
pusha
mov
fmul
aad
inc
cmp
or
rcr
sbb
cdq
xor
sahf
inc
ins
jg
or
les
inc
push
mov
imul
icebp
ror
push
mov
jae
jno
push
sbb
enter
add
cmp
cmp
cwde
jecxz
dec
arpl
retw
cld
bound
cmp
cmp
outs
nop
jo
xor
add
xor
mov
push
lds
rol
pop
ins
add
enter
dec
jecxz
sbb
mov
repnz
push
ss
call
inc
pop
call
(bad)
xchg
out
mov
jbe
push
jge
test
std
shr
aad
dec
and
jecxz
cmp
and
pusha
cld
cmp
sbb
mov
jns
or
inc
repz
and
ret
or
mov
adc
clc
cmc
dec
sbb
mov
shl
cmc
inc
push
cmp
(bad)
rcl
inc
xor
movs
movs
sbb
pop
inc
cmc
mov
or
cmp
add
cmp
mov
dec
jmp
pop
in
outs
xor
jp
mov
ret
sbb
and
jae
in
dec
jle
or
and
movs
ret
pop
push
cdq
pop
test
sub
jo
int3
push
cmc
cmps
ss
cs
add
jmp
push
pushf
cmp
jp
inc
scas
xchg
shl
(bad)
sti
pop
fld
jle
into
and
or
imul
push
bound
inc
and
ror
dec
cmp
leave
fldenv
(bad)
lods
or
jne
aaa
cmp
push
push
test
pop
dec
movs
inc
mov
push
loope
mov
cdq
cmps
data16
aas
pop
mov
push
(bad)
cmc
ffree
dec
int
inc
leave
test
push
dec
mov
cwde
inc
pop
xchg
stc
sub
iret
jl
inc
cmp
fldlg2
aaa
cmp
mov
(bad)
or
xchg
cmp
sub
fisubr
xchg
mov
xor
ficom
lds
shr
cmp
cmps
sbb
imul
and
into
outs
jns
and
rcl
inc
into
stc
fmul
mov
push
call
inc
push
outs
mov
out
mov
inc
test
adc
mov
test
sub
rol
jo
nop
dec
pop
prefetcht2
ror
mov
jne
jo
fstp
call
and
dec
push
cmp
rol
xchg
loopne
xchg
mov
push
fs
push
push
sub
call
bound
fnstsw
retf
cmp
fiadd
aas
outs
and
push
sub
dec
fwait
mov
out
scas
(bad)
mov
cli
in
loopne
jl
enter
jno
mov
xchg
xor
fs
cmp
pop
fld
mov
lahf
mov
sbb
cmps
jl
cmp
jbe
jb
imul
lds
sub
sub
icebp
xor
sub
jns
push
xchg
stos
and
mov
dec
jnp
adc
sub
add
cmps
xchg
popf
pop
out
push
in
sbb
mov
out
mov
retf
scas
adc
mov
mov
push
or
std
xchg
dec
jge
mov
icebp
ins
pop
xchg
inc
and
sahf
sub
les
cld
aam
cmc
nop
lea
cmc
push
shr
and
test
icebp
push
mov
call
in
aas
shl
mov
mov
jo
(bad)
fcomp
and
sahf
xor
cwde
add
mov
adc
inc
jmp
shl
outs
aaa
repz
movs
sbb
fsub
(bad)
fist
out
and
cmp
and
into
fwait
ss
fidiv
and
cld
sub
cmp
std
push
or
in
add
int
out
push
(bad)
rcr
cmp
(bad)
repnz
mov
sti
xor
icebp
sub
xlat
adc
push
fld
mov
iret
push
test
cmp
inc
mov
mov
xor
or
mov
xchg
into
jmp
jle
js
inc
jg
fiadd
dec
jmp
mov
xchg
pusha
cmovne
test
cld
fidiv
add
lds
or
outs
xchg
out
dec
int3
repz
and
and
popa
stos
das
pop
mov
adc
or
xchg
call
adc
and
in
popf
in
jae
dec
popw
inc
xchg
retf
dec
fild
test
int3
lods
xchg
neg
(bad)
mov
jg
push
(bad)
xor
scas
inc
xchg
pop
and
mov
push
push
jno
retf
popf
add
sbb
adc
mov
xchg
mov
xor
cmps
inc
mov
sub
scas
xor
ins
movs
iret
pop
pop
xor
pop
das
mov
inc
mov
cmp
pop
jno
in
dec
add
or
movs
mov
dec
add
in
test
(bad)
mov
or
adc
sahf
or
push
sbb
cmc
cmp
fwait
int
inc
test
inc
sub
clc
sub
and
cmp
ret
in
xchg
sub
jecxz
inc
outs
je
or
push
int3
sub
xchg
bound
mov
mov
(bad)
jmp
sar
ret
dec
jl
fisub
push
jnp
ss
mov
adc
jmp
mov
xchg
cmps
out
mov
xor
leave
add
push
cmps
pop
mov
xor
xchg
outs
out
dec
add
inc
dec
ficom
(bad)
pop
rcr
sbb
push
imul
cmp
push
cdq
dec
(bad)
mov
scas
push
or
jo
cdq
mov
push
and
rcl
inc
push
adc
mov
ins
arpl
jmp
pop
mov
pop
fcom
div
push
add
mov
rol
inc
imul
sbb
add
cmp
jbe
inc
stos
test
cmp
mov
mov
dec
add
outs
test
inc
lods
popa
mov
pushf
pop
cmp
retf
xchg
sub
inc
adc
(bad)
cmps
cmp
pop
add
cmc
xor
call
mov
lods
aad
mov
cmp
lea
or
push
les
inc
mov
inc
mov
jns
(bad)
std
or
repnz
push
add
sbb
sti
mov
test
test
dec
fld
out
aam
aad
std
scas
fcmovne
xchg
repz
pop
sub
jns
sub
dec
pop
lock
and
inc
cs
add
xchg
sub
mov
mov
inc
in
mov
ror
pop
or
es
daa
mov
js
sar
dec
shl
out
mov
mov
hlt
push
jne
das
dec
pop
inc
mov
out
cmps
scas
adc
or
lods
adc
cmp
adc
lock
add
xchg
and
mov
mov
sbb
add
jnp
pop
sbb
jecxz
imul
aad
repz
adc
mov
popf
jge
data16
ins
aad
xor
or
outs
sub
inc
jae
dec
xchg
push
loope
popa
frstor
sub
test
(bad)
test
ret
cli
cmp
jge
push
add
adc
dec
sbb
sub
or
push
pop
push
ret
bnd
sbb
nop
clc
lods
cmc
enter
(bad)
sub
xchg
lock
push
jl
out
and
mov
fsubr
(bad)
xchg
out
pop
cmp
sub
cli
jmp
pop
into
rol
lods
adc
movs
xor
sbb
dec
mov
pop
fld
fdivr
add
mov
inc
pop
or
or
jl
jmp
mov
aaa
add
dec
(bad)
xchg
fstp
xor
or
lods
movs
lahf
fld
adc
cwde
mov
pop
fdivrp
fs
cmp
ret
cwde
mov
std
push
fdivrp
and
jo
or
sahf
shl
jmp
mov
xor
(bad)
in
or
hlt
mov
or
push
or
sub
or
ret
mov
fs
dec
shl
fistp
xor
inc
push
cmp
jmp
push
fisub
sbb
les
adc
sar
pop
pop
xor
pop
or
int3
test
leave
scas
mov
mov
(bad)
out
retf
push
add
jp
scas
lahf
fstp
sahf
bound
call
and
lea
xchg
xchg
shr
jb
sub
das
xchg
scas
sub
xor
jae
or
aam
movs
mov
mov
stos
cmp
out
sbb
or
and
push
call
test
cmp
pop
and
dec
mov
std
call
push
add
sbb
ret
ret
out
test
add
mov
pop
fdivrp
sbb
mov
mov
mov
jg
add
fst
cmp
inc
adc
(bad)
pop
add
out
mov
in
sahf
or
mov
mov
xchg
out
or
adc
or
ficomp
mov
xor
mov
xlat
daa
pop
ror
or
xchg
sub
inc
pusha
in
mov
fs
loope
ins
inc
or
cmps
cmc
sub
jle
hlt
test
push
inc
lods
push
int3
sub
in
repz
jae
mov
push
iret
pop
fdiv
cwde
sub
xchg
test
cld
aam
mov
fld
mov
cmp
ins
ret
and
pop
(bad)
ja
xor
or
adc
mov
sbb
push
popf
in
add
packuswb
ja
push
cmp
mov
sbb
and
xchg
pushf
xor
retf
add
fwait
lock
xchg
jb
pop
(bad)
lods
adc
ins
and
stos
pop
test
mov
test
jg
add
add
into
movs
fisttp
repz
or
movs
ds
int3
out
(bad)
out
nop
push
enter
push
dec
in
dec
xor
sbb
mov
sub
add
inc
cmp
scas
js
inc
fdiv
inc
imul
(bad)
ins
inc
jl
add
sub
scas
adc
push
icebp
adc
(bad)
test
pop
or
push
mov
arpl
inc
sub
shr
sbb
iret
loopne
xor
push
pop
stc
cmp
fyl2x
xchg
shl
int3
mov
sub
dec
out
push
retf
stc
into
ror
js
mov
xor
lock
data16
movs
stos
inc
fcomp
push
pop
adc
jge
cmc
fs
rcr
and
retf
push
popa
out
cld
jmp
push
aas
or
jnp
cmp
test
mov
pop
jecxz
enter
loop
cld
out
mov
nop
fstp
in
or
xchg
outs
xor
pop
pop
mov
add
adc
and
sbb
lods
int
lds
pop
int
and
test
pop
je
push
push
cmps
das
int3
mov
lock
cld
lea
xor
cmp
xor
popf
inc
lock
sbb
mov
xchg
pop
xor
jmp
cmp
jmp
xchg
arpl
aaa
hlt
sbb
ins
mov
mov
arpl
test
cs
sar
xchg
pop
xchg
pop
pop
sti
jns
and
pop
jmp
fdiv
rcl
inc
sar
add
xlat
xchg
loopne
xlat
data16
push
fpatan
mov
loopne
xor
adc
cs
mov
stc
sbb
jl
jb
arpl
ins
jnp
aam
inc
pop
ins
adc
das
das
mov
mul
sub
mov
cmp
dec
leave
adc
inc
pop
call
je
int
xor
jo
sub
mov
stos
popa
cmps
inc
sbb
fisubr
xchg
je
mov
gs
mov
scas
fmul
jle
cwde
pusha
xchg
cli
pop
lock
(bad)
mov
call
push
cmc
pop
enter
nop
push
iret
retf
mov
(bad)
dec
ret
popf
sbb
push
sar
cmps
xchg
je
push
loopne
lahf
int
sar
mov
dec
mov
xlat
fwait
cmps
inc
cmp
xchg
shr
cmp
fld
add
cdq
mov
jae
sub
lods
and
xor
loope
loopne
mov
fist
iret
push
mov
xlat
stc
add
cld
or
or
add
pop
mov
lods
pop
cmp
lods
shl
mov
imul
repnz
push
ins
imul
mov
gs
dec
imul
push
shl
loope
es
(bad)
pop
shl
xchg
aam
xchg
repnz
les
test
call
loope
adc
mov
sub
sbb
andnps
pop
inc
adc
cmp
retf
les
jmp
add
out
pop
scas
push
mov
imul
mul
mov
out
pop
inc
mov
mov
pop
call
loope
push
pusha
xchg
dec
mov
jmp
adc
ds
iret
mov
mov
fs
cmp
pop
inc
inc
fwait
cs
outs
lock
sub
mov
sbb
test
out
fidivr
adc
xchg
inc
fwait
dec
or
xchg
cmp
xor
adc
cmp
and
sub
shr
jae
cmps
mov
jno
shl
xchg
adc
rcr
or
arpl
test
arpl
mov
sub
imul
cdq
jnp
or
jg
(bad)
popa
add
sbb
pop
ins
push
sbb
dec
and
or
sbb
daa
add
ds
out
sub
loopne
xchg
adc
pop
push
push
or
xor
and
mov
dec
scas
icebp
sub
popf
jnp
push
sub
mov
dec
and
mov
dec
or
adc
sbb
mov
aaa
(bad)
pop
retf
cwde
test
xor
ja
pop
cmp
jmp
mov
mov
mov
lock
mov
test
or
sti
and
sbb
in
pop
dec
or
jle
in
sub
cdq
push
call
in
lahf
aaa
mov
mov
inc
sbb
pop
ficomp
sbb
outs
cmp
xor
lods
imul
aas
jmp
push
lock
xor
xchg
adc
pusha
ret
fisub
push
lods
and
adc
adc
mov
push
retf
lahf
lahf
or
test
mov
dec
jae
push
dec
or
add
mov
xchg
ins
aaa
ret
call
fs
dec
mov
xchg
inc
in
ret
dec
fnstcw
pop
popf
js
push
dec
jmp
jno
add
mov
sar
xor
femms
rdtsc
cs
xchg
lahf
cmp
sbb
sbb
cmps
mov
(bad)
int
jge
sub
add
push
or
test
sub
push
jg
push
mov
mov
push
adc
mov
out
call
call
xchg
xor
dec
arpl
mov
jmp
aaa
mov
mov
hlt
xchg
clc
loope
lods
and
ret
js
repz
add
imul
cmp
push
inc
pop
add
(bad)
ja
push
push
mov
or
xlat
push
mov
lods
into
mov
jmp
push
loope
fsub
fs
dec
mov
call
add
pop
pop
mov
mov
lods
ror
sahf
adc
mov
xor
mov
mov
outs
loopne
std
and
or
aaa
dec
dec
mov
mov
cmp
test
fadd
das
outs
sbb
dec
dec
inc
add
stc
out
xor
je
and
bound
or
addr16
in
jns
jecxz
sti
pop
cmps
inc
jae
outs
jl
mov
push
jle
repnz
sub
mov
inc
dec
cmps
push
addr16
xchg
rcr
jb
sti
ret
adc
ficomp
scas
pop
mov
cmp
cmp
push
lods
xchg
imul
mov
pushf
popf
lods
jg
ins
and
out
jge
dec
lods
stc
jo
stos
out
cs
in
mov
outs
outs
icebp
mov
push
or
mov
(bad)
dec
inc
pusha
cmps
jecxz
mov
lahf
inc
retf
cmps
cmp
or
scas
dec
lea
mov
mov
pop
int
out
(bad)
jno
xor
sbb
adc
adc
jbe
in
in
mov
in
cmp
in
shr
loopne
add
adc
xor
test
sbb
(bad)
cmp
xchg
inc
into
ret
push
(bad)
cwde
xbegin
fadd
nop
jb
cmp
stc
and
loop
and
fnsave
xchg
add
mov
fdivr
sbb
test
shl
stos
(bad)
aam
xor
imul
stos
mov
bound
(bad)
jg
mov
out
addr16
int3
pop
cli
ins
dec
push
mov
(bad)
push
xor
out
jecxz
lods
fcom
ss
sti
inc
mov
inc
xor
loope
mov
int
xchg
inc
enter
add
xchg
dec
mov
into
fdivr
mov
push
cmp
dec
mov
jbe
inc
ds
sbb
and
call
int3
dec
xchg
pop
sbb
or
push
jmp
dec
cdq
push
push
cmc
mov
or
or
xchg
ss
cmps
dec
adc
xchg
jno
mov
scas
jge
cmp
mov
ret
lea
mov
popf
mov
xlat
retf
test
outs
cmps
mov
jmp
lods
fcmovbe
jmp
push
xchg
adc
sub
(bad)
(bad)
pop
adc
(bad)
push
sub
loop
push
pop
xor
aaa
fs
outs
xor
test
stos
mov
push
push
out
dec
jmp
inc
push
aad
jge
stos
cli
das
in
xchg
mov
push
rcl
xchg
cwde
icebp
cmc
(bad)
sbb
retf
(bad)
push
pop
push
pop
js
cmp
cmp
mov
outs
pop
xchg
adc
mov
in
sub
dec
repnz
add
sbb
xor
stos
rol
sbb
movs
fldcw
pop
push
mov
xchg
leave
dec
jg
push
jbe
imul
xor
pop
adc
popa
ja
xor
sbb
(bad)
push
xor
cmp
add
jge
jl
enter
cmc
out
imul
xor
js
jmp
cmps
push
sti
sub
push
pop
mov
push
xor
adc
xchg
inc
jp
dec
aad
xchg
or
call
or
imul
xor
mov
data16
ror
cmps
dec
push
add
sbb
pushf
sub
sar
sub
inc
jecxz
aam
(bad)
and
dec
fwait
adc
dec
pop
bound
inc
push
cmps
in
inc
jmp
inc
mov
add
sub
loope
cdq
jmp
jp
arpl
js
sub
inc
leave
xchg
shl
mov
hlt
out
jecxz
(bad)
aaa
jno
sahf
dec
add
fidivr
push
hlt
mov
dec
lock
add
ret
movs
and
dec
dec
add
xor
push
sub
mov
sbb
mov
mov
and
mov
dec
sahf
mov
cmc
inc
gs
sbb
cmps
test
arpl
sub
cmp
es
leave
jb
mov
mov
test
(bad)
(bad)
push
jmp
fsubr
fimul
mov
in
pop
fs
das
inc
add
int
fbld
jbe
cmp
out
(bad)
lea
cld
adc
jecxz
jb
mov
call
mov
and
fld
pop
and
jl
das
inc
pop
ja
xchg
cmp
shr
fistp
and
jmp
add
mov
sbb
xor
dec
mov
mov
inc
iret
fbld
inc
adc
jnp
fbld
jl
idiv
in
dec
mov
jmp
jnp
movs
fdivr
ret
cmps
inc
sbb
sar
dec
stos
adc
mov
daa
push
sbb
ficomp
push
pushf
pop
mov
movs
jg
aam
stos
cmp
(bad)
aam
cmp
call
pushf
cdq
jb
clc
and
sahf
jmp
imul
cwde
mov
fistp
mov
jp
arpl
sub
mov
jae
fidiv
mov
mov
xchg
pop
inc
mov
inc
fadd
jmp
pop
mov
in
xor
fcomp
dec
jmp
dec
mov
call
jnp
and
jge
inc
scas
test
lods
ror
dec
imul
out
xchg
call
jl
adc
ret
mov
dec
mov
dec
ins
fild
pop
jecxz
outs
pop
dec
out
jno
ins
lock
and
xchg
in
sti
out
movs
mov
rcl
jae
mov
arpl
add
dec
lock
sahf
outs
or
(bad)
(bad)
jns
cmc
xchg
xlat
or
xchg
fucom
out
(bad)
(bad)
xchg
iret
jmp
out
jmp
test
aad
shr
xor
dec
wrmsr
adc
mov
das
lea
sbb
pop
adc
pop
mov
stc
mov
sbb
and
add
fmul
or
outs
scas
data16
addr16
leave
jo
cs
inc
sbb
loope
jmp
push
dec
dec
pop
shl
int
sbb
rol
or
cmp
dec
mov
mov
xlat
ds
(bad)
ror
lods
retf
ror
inc
mov
xchg
loop
lock
repnz
pop
jbe
jmp
or
mov
pop
pusha
(bad)
mov
pop
lock
addr16
lea
fwait
inc
jmp
dec
push
xor
pushf
mov
mov
push
cs
lock
into
adc
out
jp
sti
xor
(bad)
xor
add
mov
sub
push
or
out
in
fdivr
loopne
jl
or
pop
xor
loope
test
jmp
xor
xchg
mov
cli
fidivr
xchg
(bad)
mov
add
push
sbb
test
stos
inc
xor
push
dec
(bad)
mov
scas
adc
dec
cmp
push
leave
xchg
and
fiadd
or
fucomi
inc
test
push
and
inc
cwde
jp
outs
retf
ins
or
and
inc
and
jle
add
sub
test
cmp
or
and
pushf
pop
dec
cmc
icebp
shr
shl
mov
fdiv
inc
jg
sbb
inc
in
mov
cmp
retf
adc
fwait
shl
sub
jae
dec
pop
call
shrd
adc
cwde
cmp
push
sahf
icebp
cmp
inc
xchg
cmp
push
mov
(bad)
in
fwait
or
mov
or
in
ja
and
adc
fcom
mov
mov
enter
outs
mov
jmp
xlat
mov
mov
(bad)
rcr
aaa
(bad)
repnz
ins
and
or
outs
data16
adc
mov
add
add
push
cmp
enter
mov
or
inc
out
mov
movs
shl
int3
or
dec
add
sahf
xor
aaa
pop
inc
sbb
xchg
jnp
das
xchg
dec
sbb
sub
adc
and
or
mov
adc
pop
lahf
adc
ja
dec
xor
retf
adc
je
inc
arpl
fwait
movs
inc
int
xchg
std
retf
dec
in
xor
push
xchg
ds
bound
pop
(bad)
mov
or
lods
jns
mov
out
and
scas
sub
fadd
mov
dec
mov
push
mov
pop
or
bswap
out
arpl
sbb
jae
ja
sar
and
fmulp
hlt
ds
jmp
jns
stc
cwde
sub
adc
clc
mov
cmp
in
in
push
mov
pop
jb
xchg
cmps
dec
or
dec
out
mov
sub
in
out
scas
ficom
or
and
movs
dec
push
push
sub
push
jp
jns
rcl
dec
out
repnz
fnstsw
mov
inc
ds
mov
enter
or
arpl
movs
or
mov
jae
sub
inc
mov
movs
mov
pop
into
mov
mov
push
fdiv
das
fcomi
adc
xchg
(bad)
fsubr
(bad)
mul
test
sbb
or
jno
push
push
push
dec
mov
retf
into
ds
dec
or
jnp
iret
mov
and
cs
xor
stos
gs
jmp
inc
enter
xor
imul
dec
mov
inc
out
mov
test
xlat
push
or
dec
jns
mov
sbb
nop
mov
lahf
jns
nop
retf
je
xchg
jg
xchg
int
stos
add
push
or
std
adc
cdq
call
push
retf
int3
add
movs
mov
jo
fs
enter
arpl
mov
pusha
iret
lods
xchg
adc
fwait
mov
lea
ins
ins
cli
or
leave
cli
outs
std
cwde
inc
fucomi
popf
mov
lock
cs
inc
adc
mov
cmp
sbb
xor
sbb
test
in
inc
mov
inc
inc
mov
jecxz
push
mov
pop
lods
ret
movs
std
pop
push
xchg
xchg
xor
jae
out
(bad)
push
cli
out
xor
sti
shl
lods
repnz
in
dec
dec
mov
adc
mov
xchg
mov
mov
fisub
cwde
or
jne
pop
cmp
mov
repz
(bad)
stc
fnstenv
repz
jmp
call
pop
pop
mov
xor
repz
popa
mov
push
add
pop
dec
mov
sbb
jo
(bad)
push
push
xchg
jne
xor
mov
(bad)
daa
fst
cmp
cs
and
inc
outs
mov
adc
cmp
cwde
inc
xchg
sub
into
frstor
mov
das
ins
repnz
ins
mov
movs
pop
cmp
adc
dec
into
mov
push
push
scas
aam
pop
cli
cmp
ja
mov
xor
xor
jo
and
sbb
push
xor
sbb
dec
xchg
fdivr
pop
das
push
xor
mov
(bad)
add
imul
jp
sbb
xchg
xchg
cdq
movs
test
inc
mov
mov
sti
push
xlat
stos
(bad)
inc
cmp
mov
mov
add
push
ret
les
aaa
jb
in
jae
push
fwait
sub
mov
push
dec
stos
add
sub
push
rcr
xchg
call
test
push
xor
mov
dec
sar
popa
push
xchg
gs
xor
int3
aad
push
mov
or
shl
inc
inc
jne
add
aas
fnsave
pushf
and
pop
cmc
xchg
in
test
mov
jl
sti
pop
fwait
cmp
repnz
cwde
lds
(bad)
cmc
inc
das
cmp
out
push
mov
shr
add
fs
mov
mov
lds
fld
sti
and
pop
adc
sub
std
xor
repnz
es
out
and
jecxz
sub
dec
(bad)
cli
(bad)
jbe
test
jg
xor
lds
xchg
cmp
sub
inc
iret
or
push
mov
sbb
fild
mov
cld
add
out
jp
dec
xlat
pop
lahf
mov
ret
add
adc
arpl
bound
inc
inc
clc
push
cmp
pop
cmc
nop
fs
inc
mov
(bad)
bnd
xor
dec
adc
nop
fisttp
rol
jbe
pop
or
shl
mov
adc
outs
mov
int
inc
scas
inc
dec
mov
mov
(bad)
stos
pop
jae
jp
repz
mov
test
js
sbb
dec
lods
mov
test
xchg
xor
les
pusha
rol
mov
repz
sub
dec
pop
sahf
repnz
loope
sbb
inc
loope
and
addr16
sub
shr
cld
pop
rcr
test
mov
fwait
sub
out
fwait
xor
stc
out
mov
push
int
in
fidiv
mov
lock
imul
add
test
xchg
xchg
enter
mov
fwait
pop
inc
mov
in
push
add
ret
pop
int
pop
dec
mov
xchg
or
stc
jmp
lahf
stos
cmp
scas
add
outs
cmp
mov
inc
add
hlt
adc
and
jno
fs
pop
xchg
dec
ins
std
repz
hlt
mov
mov
lods
dec
sbb
sbb
gs
and
aas
xor
or
jmp
pop
xchg
sub
ret
retf
in
cs
mov
or
in
(bad)
jg
(bad)
and
pop
aas
add
jne
aad
or
scas
xchg
aam
inc
cmps
sub
xlat
sub
test
mov
daa
pusha
push
sbb
dec
adc
shl
gs
es
sbb
mov
xchg
bound
cli
in
cmp
push
add
arpl
pop
mov
sub
(bad)
nop
push
int
mov
mov
and
push
out
mov
jns
fs
ret
xor
sbb
push
add
inc
jge
xor
cmp
add
bound
fbstp
jno
ins
movs
retf
mov
sub
adc
pusha
inc
jl
mov
xchg
adc
cmps
adc
lea
nop
retf
adc
call
add
int
jne
and
ds
stos
cmp
inc
mov
push
pushf
or
pop
mov
xchg
test
test
push
jmp
rcl
sbb
imul
add
lea
dec
mov
lahf
push
outs
(bad)
jne
sub
retf
out
inc
mov
popa
(bad)
adc
cwde
cmp
js
shr
mov
je
cwde
addr16
push
je
stos
lods
xchg
(bad)
cmps
xor
xor
jecxz
imul
pop
pop
enter
imul
mov
lods
pop
mov
adc
retf
sti
retf
sub
stos
jae
push
ins
stc
test
sub
dec
add
inc
jo
adc
jae
push
dec
mov
dec
call
movs
mov
push
pop
lock
int3
xor
mov
pushf
test
movs
mov
sbb
push
sub
test
cli
adc
out
mov
cdq
xor
dec
pop
jle
repz
mov
pop
cmp
inc
xor
sub
imul
out
hlt
and
jae
stos
adc
into
cmp
dec
(bad)
or
xlat
xor
mov
mov
push
cmps
es
lock
ins
jl
aad
call
pushf
sub
pop
je
cs
or
mov
xor
sbb
ss
xor
stc
std
popa
xchg
push
mov
loop
fisub
inc
in
and
loopne
add
and
mov
add
addr16
sub
xchg
adc
mov
pop
lods
dec
push
je
mov
stos
je
pop
test
scas
pop
fldenv
mov
jmp
out
call
ins
adc
out
div
dec
daa
push
je
fisubr
lock
outs
ja
sub
or
daa
mov
jnp
cwde
push
cmp
int3
sbb
mov
mov
or
sub
push
daa
dec
mov
adc
test
pop
test
(bad)
cwde
add
mul
push
push
push
jle
dec
int3
das
scas
mov
jmp
mov
inc
xor
and
iret
sub
sbb
stc
enter
pop
sbb
xchg
mov
into
and
clc
(bad)
xor
icebp
sub
mov
lahf
xchg
mov
add
movs
pop
in
int
int3
sti
mov
jp
movs
sar
jle
push
xor
push
lea
aam
(bad)
xor
out
inc
es
repnz
push
xor
push
fwait
popf
sbb
test
pop
mov
xor
mov
xchg
in
sub
inc
fmul
push
jbe
add
pop
int3
test
out
mov
sbb
stos
sub
mov
call
mov
dec
les
dec
adc
imul
out
sbb
adc
pop
push
pop
leave
push
outs
int
int
jecxz
clc
xchg
fsubr
imul
xchg
fmul
adc
push
je
sbb
adc
cmp
lods
pop
movs
repz
pop
iret
jns
imul
dec
cmp
mov
push
mov
or
push
adc
add
push
lea
lea
leave
xchg
push
push
jne
mov
xor
adc
ss
div
in
lahf
jle
movs
mov
xor
fcom
mov
or
call
pop
or
jg
out
ins
jae
loope
in
pop
or
repz
mov
add
cmp
cs
lea
nop
aaa
pushf
dec
mov
jno
jp
cwde
bound
add
add
inc
xor
dec
js
es
xor
sar
mov
push
and
fadd
fs
je
lea
movs
push
in
pushf
xchg
pop
xchg
sbb
hlt
in
add
nop
mov
push
add
sub
push
push
jb
jmp
xchg
(bad)
cmps
mov
xchg
cs
sahf
arpl
pop
loop
out
cld
(bad)
test
and
pop
jo
mov
or
bound
and
loop
aas
nop
gs
or
lea
cmps
inc
pop
xor
mov
or
pop
adc
stos
push
fbld
mov
jbe
aad
or
cdq
adc
add
push
cmps
lods
or
and
or
cwde
jle
repz
or
or
dec
ja
fstp
jae
fistp
or
mov
mov
jno
lea
pop
push
inc
adc
lods
mov
pop
push
xchg
and
jmp
je
sbb
int3
sbb
cmp
repz
jb
push
lock
jecxz
pop
add
ja
fsubr
push
mov
adc
call
xchg
xchg
sbb
(bad)
xor
stos
jnp
popw
mov
shl
sbb
ins
stos
movs
inc
jne
cdq
ins
xor
cmp
iret
lea
dec
cld
mov
jge
retf
cmc
add
xchg
aam
fcmovnu
push
mov
mov
inc
push
jl
mov
test
pop
retf
adc
jmp
addr16
test
cvttps2pi
sahf
xor
mov
push
jo
cmps
jb
jmp
cld
imul
cmps
pop
jmp
xchg
mov
sbb
imul
neg
sbb
jge
inc
fimul
or
(bad)
dec
cli
or
push
data16
mov
cs
mov
push
shr
jl
jbe
lds
mov
cs
inc
fistp
sbb
ss
xor
pop
jmp
add
and
and
pop
cdq
and
jae
stos
icebp
pop
sub
scas
mov
push
data16
movs
call
adc
call
mov
inc
and
sub
rcr
and
stc
loope
ins
lock
mov
rcr
aad
test
neg
xlat
mov
xor
sub
mov
pushf
and
mov
out
daa
pop
std
sub
adc
aas
push
nop
test
call
leave
in
adc
outs
call
cld
sahf
mov
pop
fsub
cmps
adc
cmp
jo
dec
mov
stc
and
pop
shl
movs
sub
pop
test
out
adc
xlat
out
sti
jle
cmc
mov
je
mov
(bad)
mov
lock
jmp
add
fisttp
iret
icebp
lahf
(bad)
lods
mov
push
sub
std
inc
cmp
sub
loope
pusha
mov
test
lock
call
in
sub
in
sbb
dec
sti
jne
pop
and
test
in
xchg
pop
xor
iret
leave
aam
jmp
outs
sub
repnz
(bad)
jmp
loopne
(bad)
iret
mov
fisttp
mov
into
add
cld
xlat
mov
sub
xchg
aas
mov
add
dec
dec
cld
xchg
fcmovu
sbb
push
enter
adc
mov
push
mov
adc
pop
jge
add
popf
sbb
push
jp
(bad)
sbb
imul
mov
inc
(bad)
popa
cmp
inc
(bad)
sbb
nop
fwait
cmp
rol
inc
inc
pop
add
pop
mov
inc
inc
push
sbb
mov
mov
out
mov
push
xchg
mov
cli
icebp
mov
push
fdivr
ret
int
sub
test
mov
xor
les
cdq
repz
popf
in
cmc
loope
dec
in
das
mov
add
out
dec
sub
dec
icebp
pop
outs
add
pushf
ds
pop
xor
jb
dec
and
call
loope
xor
stc
rol
push
lds
out
sahf
lahf
sub
sub
addr16
inc
addr16
inc
mov
and
ret
xchg
dec
nop
push
and
aaa
fistp
push
push
mov
adc
pop
xchg
cmps
push
dec
inc
pop
or
arpl
dec
sahf
jl
cli
jge
ret
sti
jbe
mov
sar
mov
jle
dec
pop
movs
cli
aas
pop
fdivp
sub
and
adc
out
push
unpcklps
les
jp
adc
movs
(bad)
inc
push
inc
and
adc
jecxz
mov
shl
sub
xor
xchg
enter
inc
or
mov
push
repnz
stos
call
fmul
cmc
dec
dec
scas
popf
les
cmp
mov
pop
dec
mov
fdivrp
outs
addr16
cwde
mov
and
cmp
rcl
sbb
mov
movs
rol
aaa
sar
call
cmc
jmp
cmps
and
jle
jb
arpl
out
jecxz
push
popf
xchg
pop
leave
jmp
push
and
push
mov
das
in
mov
(bad)
push
dec
loope
mov
(bad)
cwde
cmp
cwde
jle
jnp
std
dec
shr
jo
add
mov
shr
cmps
fsubr
test
add
or
ja
pop
cmp
add
xchg
loop
or
fs
scas
repnz
or
mov
jnp
mov
jb
sub
popa
jecxz
push
pushf
jmp
jecxz
daa
(bad)
push
cmp
outs
test
cld
sub
add
push
jp
add
ins
push
cwde
mov
popf
mov
bound
(bad)
fisttp
jmp
call
gs
cld
test
add
cdq
pop
inc
mov
outs
xchg
jecxz
(bad)
arpl
into
dec
mov
sub
movs
aam
enter
(bad)
outs
cmp
enter
imul
aaa
mov
jae
sbb
jae
out
jb
pop
ret
xor
jge
fs
xor
push
enter
push
fcomp
and
pop
mov
mov
imul
icebp
mov
mov
sar
lods
ins
out
pop
scas
popf
xchg
push
sub
loop
xchg
call
xor
sub
in
push
push
rol
inc
call
mov
cmp
and
(bad)
mov
mov
retf
daa
mov
sbb
outs
fisubr
or
adc
cmps
and
rcl
push
xchg
ja
fadd
inc
mov
cvtpi2ps
xchg
jecxz
push
jle
out
pop
lds
dec
call
shl
cmp
mov
mov
or
fdivr
xor
or
mov
mov
xchg
fsubr
stos
ins
mov
outs
fs
les
fidivr
mov
fnstsw
mov
add
mov
retf
mov
frstor
fs
(bad)
jnp
adc
or
xor
popf
push
dec
in
idiv
or
xor
ret
aam
xor
pop
shl
dec
xchg
jp
addr16
cmps
out
fs
adc
ret
call
les
into
leave
jmp
fwait
out
sub
in
and
pop
repz
unpcklps
leave
test
jno
clc
dec
add
fdivr
sbb
sbb
mov
stc
push
(bad)
in
popa
(bad)
dec
push
xor
push
hlt
movs
dec
dec
adc
aad
ins
repnz
or
fisub
or
dec
lods
inc
pop
xchg
lds
fistp
(bad)
pop
xor
xchg
in
stc
mov
daa
test
xchg
dec
jmp
fidiv
and
cwde
(bad)
xor
sub
mov
(bad)
dec
js
jle
ja
xor
out
xchg
xchg
mov
pop
pop
add
jnp
inc
popa
out
push
mov
push
cmp
sbb
enter
into
mov
add
cmps
in
popf
outs
jno
loopne
or
dec
mov
mov
pop
sbb
aad
xchg
add
push
mov
pop
das
sub
mov
fstp
mov
movs
leave
popa
gs
sar
xchg
or
adc
icebp
add
ss
(bad)
aaa
dec
sbb
pop
dec
mov
push
cmp
into
cmp
xchg
push
push
or
std
or
add
jmp
mov
int
jnp
call
and
push
cdq
jno
mov
mov
cmp
jno
aad
xchg
loope
scas
adc
clc
stos
je
sbb
loopne
aam
sub
shr
fs
pop
(bad)
div
std
cs
push
mov
inc
retf
or
sub
pushf
sbb
mov
leave
leave
sbb
xlat
test
scas
iret
pop
loopne
(bad)
xchg
fiadd
jmp
inc
pop
pop
mov
and
add
jp
cli
mov
cmc
mov
clc
dec
stos
xchg
mov
xchg
push
jns
sbb
pop
mov
xchg
dec
sub
adc
mov
mov
ret
push
cmp
and
outs
pop
jo
cmc
rcl
pop
sbb
mul
mov
js
repnz
imul
and
rcl
pop
movs
pop
mov
stos
sbb
cmp
pop
(bad)
lds
or
pop
stc
xchg
loope
inc
ja
(bad)
pop
add
lahf
jecxz
fisub
test
lahf
(bad)
sti
add
popf
add
xlat
lods
(bad)
jp
arpl
or
jle
dec
(bad)
mov
or
cmp
shl
pop
pop
(bad)
xor
fdivr
dec
mov
sub
pusha
loopne
or
jne
scas
test
fmul
dec
aam
stos
or
(bad)
call
push
mov
cmp
(bad)
inc
cs
jle
pop
in
xchg
add
sbb
xor
shl
inc
mov
mov
ins
xchg
cmp
das
movs
js
mov
adc
test
(bad)
stos
sahf
xor
adc
ret
push
or
xchg
sub
jnp
push
mov
cmp
popa
pusha
out
addr16
mov
daa
jb
dec
or
adc
jno
pop
cmps
jmp
dec
ds
xor
addr16
mov
pop
ins
jbe
shl
mov
xor
xchg
call
add
je
cmovae
or
cli
fcomip
call
pop
push
inc
(bad)
loopne
or
int
jge
arpl
adc
sbb
mov
cli
cmp
(bad)
jge
mov
xor
stc
fldln2
xor
mov
test
out
or
and
lods
cmp
mov
or
jo
arpl
pop
bound
mov
jbe
jmp
std
xchg
retf
pop
aad
call
in
loope
dec
fadd
retf
mov
cmp
mov
jl
jecxz
mov
add
push
push
shl
cmp
mov
movs
ds
cwde
push
pop
xor
int3
in
addr16
in
xor
ins
rcr
mov
pop
ins
stc
push
xchg
or
movs
outs
test
je
(bad)
fcomp
mov
loopne
adc
test
push
(bad)
push
xchg
std
mov
mov
cmp
ins
cdq
enter
or
fidiv
jl
rol
mov
les
dec
rol
pop
scas
add
ja
push
mov
jp
fmul
out
sub
cmp
pop
xor
jl
or
gs
cld
xchg
or
push
imul
aaa
and
sbb
and
dec
fisttp
xchg
ror
popa
xlat
xor
shl
jno
adc
adc
into
mov
jmp
sub
mov
sbb
(bad)
clc
cmps
pop
imul
loop
in
inc
push
mov
sahf
stc
daa
shl
mov
test
dec
das
add
push
test
rcr
lods
mov
jo
dec
test
pop
jmp
dec
scas
add
dec
ret
pop
or
mov
mov
jae
pop
sub
ds
jb
push
push
aas
ror
ret
sub
dec
(bad)
or
adc
mov
data16
or
popa
hlt
sbb
in
push
jb
in
retf
inc
fistp
or
sub
fbstp
cmc
sar
fimul
(bad)
call
dec
jb
mov
ret
es
jne
mov
das
mov
repz
into
sub
xor
xor
enter
xchg
sub
aas
adc
mov
popa
std
push
lds
xchg
pop
loope
add
icebp
mov
cs
jb
(bad)
cmp
inc
sbb
je
mov
pop
adc
jl
cmp
dec
dec
iret
imul
jmp
or
sub
inc
cmp
mov
push
in
mov
inc
mov
sar
sbb
in
fwait
stos
mov
or
les
adc
outs
ins
mov
jmp
je
(bad)
push
jge
int3
movs
xchg
xchg
shl
stc
push
xchg
(bad)
in
or
sub
pop
call
push
mov
pusha
xor
push
dec
call
pop
fneni(8087
iret
cmp
xor
retf
jg
cmp
push
xchg
fiadd
pop
mov
pushf
mov
js
cmp
sub
sub
add
(bad)
xchg
mov
push
mov
lock
les
mov
sbb
test
pop
test
aas
add
adc
cmps
xchg
mov
ds
mov
xchg
cmp
es
fwait
push
(bad)
ret
icebp
mov
outs
movs
dec
fisttp
pushf
xchg
shl
add
outs
xchg
xlat
sub
fwait
mov
xchg
push
push
imul
add
daa
test
mov
mov
jb
jl
gs
pop
push
aaa
mov
imul
neg
jl
jmp
xor
adc
fcom
fdiv
pushf
call
or
mov
cmps
sub
xchg
sub
fisttp
leave
xchg
nop
and
push
daa
ja
xor
mov
inc
or
outs
inc
mov
test
push
add
(bad)
adc
cmp
push
cmc
sbb
lock
inc
int
fcmove
retf
shl
jmp
jge
add
pop
xchg
sub
enter
xchg
fwait
mov
push
sti
xor
cmp
sub
pop
pop
cmps
int3
add
xchg
mov
mov
push
add
xchg
call
dec
push
and
and
inc
popa
test
push
lock
or
aaa
push
pop
imul
psadbw
add
xchg
and
cmp
push
fwait
dec
rol
xor
add
jmp
or
or
das
hlt
test
stos
cdq
or
(bad)
push
xchg
imul
xchg
xchg
mov
cmps
xor
fwait
(bad)
dec
aam
mov
mov
mov
cmp
ror
(bad)
jns
xchg
ficomp
cmp
(bad)
int3
hlt
xor
mov
mov
cmp
ins
sub
test
lahf
sub
xchg
sbb
ror
add
pop
les
adc
adc
(bad)
mov
retf
test
and
push
jb
inc
stos
jge
gs
jmp
inc
mov
jne
jns
sar
mov
(bad)
xor
lods
dec
push
jnp
cmps
push
stos
sar
mov
adc
adc
cmps
fcom
cwde
aam
mov
jp
add
sub
pop
and
stc
adc
test
imul
gs
lock
mov
pop
out
xchg
sub
into
push
repnz
push
(bad)
ret
loope
(bad)
add
mov
mov
ret
ficomp
inc
call
jo
xchg
cmps
xor
fsubr
xchg
push
push
adc
cmps
imul
adc
rol
leave
aas
aad
jns
outs
push
or
cli
cmc
scas
add
mov
sti
pop
sub
clc
int
jae
jg
dec
inc
add
sbb
in
daa
xor
cmps
or
pop
pop
iret
adc
nop
jp
call
sub
adc
push
mov
add
test
cdq
aad
mov
cmp
int3
push
in
dec
das
adc
shr
loop
jne
sbb
pop
stos
in
fs
in
add
pop
xor
in
aam
inc
cld
ret
dec
jle
inc
(bad)
call
cld
ret
fwait
and
jns
js
and
test
enter
cs
xor
mov
call
in
xor
lods
sbb
lods
add
or
out
push
mov
test
jp
sbb
adc
push
adc
test
jb
pop
xchg
std
jp
fsub
fadd
xchg
(bad)
stc
int3
pop
test
sub
cmp
clc
or
pop
cwde
gs
in
popw
add
or
add
fdiv
(bad)
cmp
leave
lock
sub
cmp
cmp
mov
nop
inc
xchg
clc
cmps
add
mov
add
lods
mov
sub
cmp
xchg
mov
fs
sbb
sub
pop
cmc
xchg
in
mov
pop
mov
push
aad
xor
in
test
clc
push
loopne
(bad)
add
enter
cs
push
aas
test
out
test
pop
xor
push
and
xor
inc
or
cmps
ret
jmp
test
clc
jae
iret
lods
movs
out
test
xchg
fdivr
nop
xchg
leave
and
xor
add
inc
fdiv
push
call
test
retf
add
pop
jns
cld
test
jmp
push
in
xor
es
jge
pop
sub
std
xchg
ret
adc
sahf
fisttp
aam
or
je
cmp
lock
and
jecxz
push
test
out
in
cwde
push
cmp
sub
cmc
test
xor
ret
fld
test
or
add
in
adc
dec
fcmovnb
cli
les
mov
and
bound
sbb
stos
call
and
inc
push
retf
dec
loope
in
mov
out
and
mov
xchg
push
into
dec
arpl
mov
pop
push
int3
cwde
movs
imul
jno
cwde
test
or
les
mov
jae
inc
out
xchg
aam
into
in
neg
movs
or
xchg
nop
mov
adc
cli
dec
cs
es
fisub
out
icebp
push
dec
xchg
test
sbb
cli
pop
ficomp
xchg
sub
xor
arpl
dec
out
inc
ja
retf
inc
or
arpl
xchg
mov
jae
push
bswap
lock
loop
pop
retf
jmp
fmul
out
in
and
daa
shr
mov
enter
(bad)
test
test
ret
mov
(bad)
xchg
inc
or
push
leave
arpl
sub
mov
mov
das
or
mov
fld
push
mov
mov
xchg
sbb
jmp
sar
loop
cmp
pushf
inc
out
cmp
cmp
xchg
shr
hlt
test
mov
jp
fcomp
jmp
mov
in
int3
loopne
or
pop
mov
stos
ror
aad
popa
sub
dec
aam
jp
js
aaa
das
jbe
ins
sbb
pop
popa
data16
cmp
(bad)
jecxz
pop
out
xchg
sar
sbb
fs
or
dec
sub
sbb
stc
dec
jmp
xchg
adc
add
and
push
pop
fs
call
push
mov
jge
sti
mov
cmc
test
pop
mov
(bad)
inc
xor
adc
(bad)
cmp
scas
lods
fstp
xor
and
push
nop
das
cmp
lock
add
aam
push
cmps
cs
jnp
(bad)
push
add
aaa
sti
push
mov
push
mov
in
into
jno
jle
rcr
cmp
fcomi
add
(bad)
ret
jmp
in
jns
aam
xor
cmp
dec
mov
pop
xor
cmc
jl
and
test
sub
lea
push
xchg
dec
xor
push
(bad)
aas
shl
xor
push
mov
(bad)
jno
jbe
sbb
cmp
jle
push
jne
xchg
cdq
add
dec
mov
push
daa
sbb
pop
sbb
push
fsub
jno
jl
das
cwde
pop
cmp
pop
sub
or
jecxz
jmp
shl
in
xor
mov
(bad)
or
sbb
cmp
add
jl
push
push
sti
and
jg
dec
mov
push
add
test
mov
cli
jge
or
pop
iret
(bad)
movs
clc
scas
xchg
repnz
dec
dec
xlat
enter
mov
mov
pop
retf
test
(bad)
and
mov
pop
loop
jmp
xor
enter
mov
in
jl
into
mov
popa
retf
les
cmp
movs
jge
retf
gs
jb
cmps
xchg
jg
xor
in
sar
addr16
(bad)
loop
cwde
movs
scas
rcr
icebp
(bad)
sbb
cli
enter
pushf
mov
sti
ss
dec
dec
inc
dec
lock
push
icebp
hlt
and
mov
das
aad
stc
sbb
xor
nop
xlat
dec
mov
sti
mov
ins
mov
test
jp
add
add
adc
into
lods
xor
push
sbb
sti
leave
add
push
popa
or
rol
hlt
movs
xchg
data16
test
xchg
daa
or
imul
sub
mov
sub
scas
sbb
pusha
cld
out
imul
push
mov
mov
popf
jne
mov
rol
lds
and
add
dec
das
aas
stos
fisubr
clc
(bad)
in
gs
mov
mov
push
(bad)
shl
add
pop
pop
out
push
inc
jo
dec
push
push
mov
(bad)
es
pop
in
sbb
xor
out
div
push
mov
imul
loopne
dec
or
fdivp
jne
or
xor
mov
or
stc
adc
ror
mov
ins
dec
test
aaa
sbb
jo
daa
xchg
push
outs
iret
dec
test
jo
inc
push
aas
movs
mov
int
adc
adc
daa
(bad)
daa
test
jno
jmp
cmps
nop
push
jo
cmp
dec
popa
push
mov
and
fisttp
and
inc
retf
push
gs
pop
add
ds
(bad)
cmp
jo
popf
mov
cld
lahf
xchg
outs
adc
outs
xchg
outs
push
leave
or
xor
lods
adc
mov
clc
cmps
mov
lahf
stc
mov
push
or
xchg
pushf
test
adc
pop
xor
jnp
jmp
add
out
pop
ds
or
adc
jno
imul
mov
imul
call
ficom
je
rol
pop
jnp
(bad)
mov
dec
into
int
scas
adc
cmp
add
das
nop
mov
std
icebp
shl
dec
xchg
fldcw
sbb
jbe
and
xor
mov
dec
mov
pop
jo
and
cmc
dec
add
mov
ins
push
cmp
mov
jle
ss
adc
aaa
jb
mov
jns
popa
ja
cmp
lahf
mov
dec
test
push
nop
stos
jmp
fcmovnb
out
lock
sahf
(bad)
retf
gs
scas
mov
cwde
gs
jne
sbb
call
inc
je
dec
dec
pop
shl
scas
and
or
mov
sbb
inc
push
dec
loope
add
and
lea
mov
mov
xchg
push
retf
ret
sahf
xor
(bad)
enter
ss
data16
mov
jle
dec
mov
ins
push
push
pushf
and
mov
xchg
xor
inc
pop
jb
sub
sub
js
push
sbb
xchg
lds
clc
add
fist
ss
leave
mov
test
push
imul
stos
test
int
fidivr
retf
call
mov
leave
inc
mov
xor
mov
popa
sbb
fisub
inc
mov
mov
outs
add
or
cmp
or
leave
push
mov
adc
sbb
sub
mov
retf
mov
and
stos
jmp
ror
repz
ret
in
dec
add
imul
out
sbb
fidivr
add
imul
js
test
test
mov
jmp
or
in
lea
pop
sti
int
jmp
mov
hlt
jne
pop
sub
mov
arpl
enter
lea
scas
in
cmp
into
xor
cli
call
xor
fcom
push
iret
movs
in
sub
adc
mov
mov
ja
inc
clc
and
(bad)
in
aam
stc
inc
mov
xor
rcl
ds
mov
cmps
into
inc
mov
mov
aaa
push
xor
loope
dec
mov
ret
add
mov
lods
jns
cmp
hlt
jno
add
sbb
repz
jmp
or
jmp
jg
loope
mov
vcvtdq2ps
xor
loopne
jno
(bad)
sbb
fs
mov
push
push
stos
pop
xor
loopne
fistp
imul
imul
jmp
repz
inc
adc
jg
jbe
aam
adc
mov
add
movs
nop
repz
mov
adc
sub
add
dec
arpl
cmps
lds
idiv
mov
sub
aas
push
and
rol
jo
xchg
sbb
cmps
and
fidiv
xchg
cmp
xchg
sbb
in
stc
popa
pop
cmp
pop
fwait
pop
and
push
adc
jno
ret
dec
xchg
cmp
ds
sub
repnz
lock
sti
call
add
loopne
in
scas
(bad)
fcomip
and
mov
out
repz
sbb
pushf
pop
pop
sahf
xchg
jle
or
es
ret
add
add
(bad)
cmc
dec
jmp
sbb
in
mov
jp
or
mov
pop
ss
int
dec
int
test
movs
sub
jmp
xchg
xor
add
or
mov
jo
aad
mov
mov
jp
outs
arpl
lock
inc
idiv
sub
fisttp
mov
xchg
or
lea
dec
dec
fild
jae
imul
in
mov
add
clc
xchg
out
xchg
xor
jnp
lock
sbb
icebp
cmp
jo
pop
mov
fstp
test
push
push
les
sti
(bad)
dec
mov
add
push
into
in
sub
push
push
rcr
push
pop
xchg
fstp
lahf
aad
imul
pmullw
and
fcom
mov
retf
push
(bad)
dec
mov
and
loop
jp
jg
sbb
jae
scas
enter
(bad)
jl
repnz
(bad)
jmp
pop
pop
xor
add
mov
js
(bad)
shr
cmp
jmp
dec
fucomp
adc
test
jb
fdivr
mov
data16
mov
jecxz
inc
aad
xchg
fistp
jle
sti
xor
mov
add
add
mov
ror
test
arpl
inc
popf
ds
mov
shl
jno
xor
xchg
inc
imul
int
rcr
and
sti
fwait
inc
push
(bad)
cmp
push
retf
fdivr
xchg
or
inc
gs
jmp
cmp
(bad)
aam
inc
aas
and
ss
jl
cmp
jg
nop
pusha
add
mov
dec
ins
pop
fwait
std
icebp
sub
inc
sbb
mov
or
je
outs
xor
pop
daa
pop
cmp
out
clc
add
xor
sub
jg
jg
repz
pop
ficomp
jecxz
jns
sbb
sahf
(bad)
rcr
enter
fisttp
jb
jg
xchg
imul
sahf
xchg
mov
rcr
xchg
in
xor
scas
pop
add
jl
aam
imul
xor
mov
mov
lods
inc
in
rcr
adc
pop
ror
int
mov
stc
(bad)
aam
lock
push
mov
stos
ins
aam
movs
stos
push
cmp
cmp
sub
hlt
adc
test
lea
mov
cmp
(bad)
and
test
mov
mov
mov
int3
lds
jecxz
in
jae
adc
scas
out
push
retf
sbb
outs
stc
and
sub
das
test
out
je
fnstenv
out
call
out
sub
inc
lods
mov
test
sub
inc
add
push
inc
daa
xchg
ficomp
cmp
or
(bad)
in
mov
in
xor
and
test
rcr
mov
or
xor
cmp
push
sbb
or
xor
imul
push
cmp
aad
loope
es
jmp
and
scas
mov
mov
ds
loop
push
imul
mov
or
(bad)
es
imul
xchg
ffree
into
fucomp
iret
shl
or
loope
cmp
add
cs
add
retf
add
pop
dec
ins
push
push
(bad)
adc
sub
and
stos
or
sub
or
stc
int
jbe
jmp
aaa
and
push
imul
cwde
data16
sahf
dec
push
or
lea
adc
hlt
das
add
add
pminub
icebp
sub
cmp
cmps
xchg
xchg
push
and
addr16
jne
test
push
shl
mov
sub
or
data16
pop
les
enter
pop
loope
aam
adc
pop
xchg
sub
popa
xor
sub
inc
xor
xchg
fisubr
xchg
loope
push
movs
add
retf
dec
ins
ins
ins
test
scas
ds
call
mov
inc
push
out
xchg
add
cmp
xor
xchg
retf
arpl
push
ret
fcmovu
dec
xor
add
push
or
mov
mov
(bad)
sub
or
inc
jg
scas
sub
mov
xlat
push
xchg
(bad)
add
clc
test
pop
sbb
mov
fisttp
mov
fcomp
mov
clc
rcl
sub
xchg
sbb
sbb
cmp
mov
mov
fnstcw
jne
leave
mov
dec
int
or
mov
jns
jne
or
fiadd
or
(bad)
push
sbb
ss
aam
mov
aaa
loope
or
ud1
pushf
out
cmps
xchg
test
das
in
add
mov
fwait
push
push
dec
jo
cld
test
mov
scas
and
inc
push
and
mov
shl
ror
in
movs
mov
leave
imul
mov
ret
shl
es
jo
call
into
add
push
mov
xor
inc
test
cmp
test
cmps
cwde
call
or
scas
cmp
iret
jge
sbb
popf
xchg
mov
mov
inc
dec
xlat
xchg
fwait
loop
mov
add
mov
adc
(bad)
jmp
push
push
arpl
add
mov
rcr
jecxz
adc
mov
mov
sub
in
sahf
enter
hlt
dec
push
std
ja
out
adc
dec
inc
sbb
mov
(bad)
or
mov
add
les
in
lods
or
les
gs
test
and
push
and
jns
repz
outs
jg
jae
xor
xchg
and
and
jmp
mov
hlt
push
imul
lock
dec
cmp
ret
cmp
push
or
(bad)
test
test
jae
mov
push
sbb
sub
push
sbb
inc
sub
sti
test
or
push
pusha
lods
jae
into
adc
stos
aas
inc
cld
aas
xor
repz
stc
int
adc
idiv
lahf
sbb
adc
and
and
lea
xchg
pop
movs
bound
mov
push
js
dec
sbb
(bad)
shr
or
inc
mov
hlt
and
jmp
in
leave
repz
fsubr
dec
or
ins
loopne
or
push
aas
in
jl
repz
stos
(bad)
in
lods
xchg
jmp
ins
fst
(bad)
fisubr
daa
jmp
ret
push
ins
mov
nop
test
outs
in
ss
shl
repnz
stc
and
rol
push
rcr
aam
imul
adc
mov
xlat
fiadd
lods
loopne
mov
add
imul
push
imul
pop
jecxz
push
jle
fs
dec
imul
pop
stc
movs
xchg
daa
dec
push
mov
lods
inc
fs
fidiv
sub
fwait
shr
ss
loop
xchg
inc
and
xor
imul
mov
adc
push
test
in
cmps
jae
mov
imul
mov
mov
lds
in
mov
mov
inc
xchg
xlat
nop
inc
lahf
sbb
adc
add
out
inc
in
outs
mul
shr
int3
mov
mov
and
xchg
mov
pusha
xor
jle
cwde
imul
mov
in
inc
mov
mov
shr
sub
aam
out
loopne
leave
mov
in
push
dec
lock
add
aaa
dec
lahf
dec
mov
adc
sub
or
add
or
add
ret
dec
add
xor
mov
pop
scas
shl
add
pop
xor
push
pop
cmc
int3
stos
jmp
or
pop
fild
xchg
clc
cwde
test
aas
js
cmp
dec
adc
or
push
ins
or
loopne
test
inc
and
inc
dec
iret
cmp
fucomi
fsub
jl
lahf
enter
jb
inc
dec
or
out
jbe
scas
add
adc
cld
in
movs
lods
fxtract
ds
cs
(bad)
das
int
mov
add
or
lods
xchg
xchg
test
popf
pop
sahf
mov
dec
ret
or
loope
bound
cli
cmps
push
int3
std
stc
sbb
add
clts
pop
jecxz
jnp
call
sbb
inc
aad
out
xor
inc
mov
(bad)
rol
and
push
retf
xchg
mov
jmp
xor
push
cmps
pop
adc
mov
dec
pusha
pop
leave
xchg
mov
lahf
mov
mov
loope
xchg
sahf
xlat
mov
fnsave
pop
sub
mov
adc
rol
or
nop
jge
mov
test
popa
repz
inc
fstp
repz
lock
aam
and
adc
hlt
data16
push
push
adc
pop
imul
pop
and
jbe
mov
sbb
pop
sub
out
out
outs
and
std
ficom
cmp
cwde
sar
movs
jecxz
adc
int3
rcr
or
icebp
addr16
dec
and
dec
bnd
cmp
pop
jecxz
ins
mov
cmps
int3
sbb
stos
inc
iret
je
pop
in
fadd
mov
mov
cmps
sub
jle
not
(bad)
mov
cmp
cmc
aad
jno
ds
push
mov
xchg
or
jns
xchg
adc
mov
cmp
sub
ret
jbe
(bad)
pop
ret
mov
xchg
sbb
add
and
dec
jno
rcl
xor
bndldx
cmp
ret
mov
inc
lea
pop
mov
inc
xor
dec
ret
cmp
push
push
cmp
ss
sbb
adc
xchg
jle
outs
enter
cmp
pop
(bad)
pusha
cmps
add
fcomp
jnp
push
cmp
ret
mov
jge
and
ret
out
dec
xor
jae
cdq
sbb
(bad)
loope
data16
aas
or
sub
lods
ret
dec
nop
xchg
mov
and
add
mov
jg
jmp
adc
xor
faddp
(bad)
icebp
or
pop
ficomp
add
push
sub
adc
mov
inc
lock
sbb
jecxz
das
cmp
add
mov
int3
out
test
cld
add
adc
mov
inc
xor
test
inc
pusha
mov
inc
repz
xchg
sub
sbb
or
jmp
gs
or
xlat
test
clc
sbb
sub
inc
sub
aad
popa
mov
xrelease
hlt
dec
cld
adc
mov
push
aam
or
mov
jne
idiv
push
adc
mov
or
stc
fldenv
or
jno
jo
fcomi
sub
cmp
dec
add
inc
pusha
jg
jge
ror
(bad)
push
or
scas
sahf
push
dec
or
mov
dec
cmp
loope
inc
add
cli
inc
xor
xor
push
cwde
hlt
push
jecxz
adc
xchg
pop
jnp
lods
addr16
cmp
inc
mov
mov
xor
jmp
mov
repz
xor
cwde
push
cs
adc
or
pop
mov
mov
add
pop
sbb
out
lds
adc
call
fnstcw
mov
adc
(bad)
retf
fld
addr16
pusha
out
push
scas
push
xchg
sbb
mov
loop
jp
xor
push
push
and
adc
add
dec
ins
xchg
movs
das
cmp
(bad)
repz
xor
push
inc
cli
loope
cdq
mov
xlat
arpl
and
retf
test
xchg
leave
div
js
xchg
(bad)
sub
scas
and
rol
jge
mov
loopne
xchg
or
push
sub
leave
mov
cli
fld
adc
ret
push
in
retf
sub
pop
fs
cmp
ret
(bad)
movs
push
bound
lahf
or
mov
(bad)
rcl
in
stc
aas
call
adc
mov
in
or
(bad)
ins
jmp
shr
push
inc
shl
cmp
lods
inc
or
add
dec
mov
add
fild
xor
gs
aad
repz
dec
mov
cmps
inc
out
ins
or
mov
hlt
adc
xchg
iret
in
int
dec
std
outs
rcr
xchg
xchg
or
inc
sar
mov
test
mov
jg
push
add
test
fstp
std
push
adc
xchg
ret
jae
inc
sti
push
mov
push
popa
jecxz
cld
fild
les
xor
enter
addr16
cmovae
movs
out
pop
jmp
or
push
shr
adc
clc
mov
hlt
in
call
and
dec
inc
out
dec
and
pop
dec
mov
loop
xor
(bad)
cld
enter
pusha
outs
mov
movs
jns
test
lods
sub
enter
mov
imul
mov
pop
mov
imul
push
call
sti
inc
out
sub
loopne
dec
rep
jecxz
mov
mov
mov
sbb
out
lds
inc
in
cmp
mov
leave
sub
add
mov
(bad)
and
xchg
jne
nop
xchg
pusha
sbb
retf
test
fnstenv
fimul
add
add
int3
sbb
test
or
pop
push
pop
dec
adc
xor
pusha
pushf
pushf
add
or
mov
sbb
xchg
xor
(bad)
sbb
je
cmp
lea
add
popf
xlat
xor
clc
xor
mov
lock
arpl
in
xchg
or
dec
xor
jg
xchg
push
dec
stos
fisttp
mov
jb
or
int3
rcr
xor
and
push
jo
jbe
pop
in
repz
jmp
or
adc
mov
xchg
push
lods
not
sbb
aam
dec
mov
mul
lahf
xor
sub
sub
in
mov
rcl
je
data16
adc
xchg
and
cmp
dec
adc
(bad)
jbe
cs
arpl
jnp
inc
aad
inc
xchg
pop
ret
push
and
outs
xor
xchg
jo
and
add
jg
jb
inc
mov
stos
imul
mov
pop
adc
loopne
pop
cmc
mov
xor
jp
mov
add
loop
std
jmp
pop
adc
stos
xchg
add
adc
addr16
pop
ja
adc
xlat
mov
popf
outs
xchg
adc
adc
mov
or
mov
jge
sub
mov
lods
fild
push
push
pop
addr16
ins
leave
mov
fwait
sbb
fnstcw
retf
int
repnz
cmps
fisttp
(bad)
out
jge
nop
mov
rol
sub
adc
mov
test
push
mov
ins
loop
mov
jno
dec
cs
dec
popa
lea
sub
dec
fs
mov
xlat
push
call
cli
adc
jno
scas
jmp
inc
shl
addr16
mov
outs
adc
jbe
xchg
popa
cmp
(bad)
mov
movs
sti
ss
add
jno
mov
dec
rol
xchg
mov
or
dec
push
add
aaa
or
jge
(bad)
repz
jmp
dec
add
clc
outs
aam
or
sub
(bad)
jg
push
push
mov
adc
mov
aad
mov
stos
inc
jge
mov
push
int3
hlt
ret
pop
das
lahf
and
and
push
pop
pop
mov
lds
push
and
pop
xchg
out
sbb
mov
scas
jmp
test
in
sub
jle
push
bound
pop
sbb
pop
fist
sub
mov
pop
pop
and
cmp
mov
fcmovne
pop
mov
(bad)
sbb
mov
loop
sub
mov
movs
mov
shr
mov
mov
sub
sub
pop
or
(bad)
mov
test
jbe
ret
cmps
inc
ins
arpl
xchg
add
loopne
jo
addr16
sub
adc
cmp
pop
repnz
sub
dec
or
sahf
cld
pop
xchg
pop
cwde
or
ficomp
xor
arpl
lds
ja
mov
lods
push
cmc
daa
or
add
jg
or
pop
jno
pop
sub
mov
pop
cmp
pop
adc
cs
xor
outs
jo
xor
cmc
inc
popa
xchg
xor
cmp
jle
jl
xchg
gs
sahf
loope
and
mov
jp
(bad)
lods
push
out
dec
fist
push
dec
jnp
cmp
dec
jns
push
jmp
dec
mov
mov
jb
mov
gs
cmp
loopne
jne
push
movs
(bad)
mov
(bad)
cmp
or
mov
mov
mov
pop
test
adc
cmp
mov
out
pop
aam
mov
mov
push
out
in
sbb
and
jle
and
test
dec
popf
mov
xchg
cwde
call
jle
(bad)
loop
out
rdmsr
stos
outs
repnz
js
add
sbb
in
push
pop
mov
adc
and
xchg
xor
and
fadd
adc
fisttp
xor
lahf
and
sbb
pop
jne
xchg
enter
sub
xchg
cmp
jg
cmps
xor
adc
mov
shl
dec
arpl
mov
mov
test
sti
add
rol
cmps
xor
sbb
add
idiv
fidiv
pop
add
inc
inc
std
shr
dec
add
ins
mov
iret
sbb
mov
test
sbb
test
leave
hlt
push
cmp
adc
test
mov
cmp
mov
mov
jmp
fsubr
(bad)
cmp
imul
imul
xor
repz
les
or
cmps
ins
pop
out
aas
sub
sar
rol
ret
add
iret
adc
pushf
mov
mov
ins
aaa
retf
iret
adc
scas
sahf
mov
xor
test
mov
loopne
fstp
jge
dec
xchg
test
ins
fdiv
or
daa
jge
xor
mov
pop
mov
cld
repnz
fidivr
imul
mov
jno
xor
sar
std
cwde
loopne
loope
mov
pop
or
outs
or
cmc
jmp
test
mul
(bad)
mov
pop
sub
(bad)
jo
adc
cmc
mul
and
xor
shr
jns
dec
sbb
jmp
call
cmp
xor
cmp
popf
data16
mov
jns
mov
(bad)
stos
pop
lahf
in
vcmpsd
data16
pop
(bad)
nop
mov
push
jo
push
or
movs
ror
fstp
shr
push
fidiv
aad
pop
nop
pop
pop
mov
mov
ficom
fimul
sbb
or
xor
imul
jmp
mov
sub
push
jmp
inc
das
into
jecxz
test
sub
dec
fstp
pop
sub
ins
fmul
jnp
pop
outs
cmp
mov
out
or
mov
and
xlat
xchg
sbb
jg
pop
movs
jns
xor
std
jle
(bad)
jmp
push
not
jp
leave
in
lods
std
lods
sbb
pop
out
retf
cwde
das
sub
mov
dec
mov
loop
stc
js
lahf
je
sbb
inc
jns
jmp
fcom
stos
aas
mov
dec
adc
inc
scas
cmp
pop
sahf
in
int3
bnd
adc
inc
mov
repz
repz
pop
mov
sub
sub
std
pop
sub
add
out
xor
ds
movs
std
ss
push
dec
gs
ror
arpl
repz
outs
xor
and
adc
fdivp
call
xchg
out
dec
cld
fldcw
pop
retf
lea
mul
adc
pusha
ficomp
push
adc
push
mov
mov
sti
rcl
xchg
ret
pop
cmc
mov
push
leave
pop
cli
lods
sar
mov
mov
fucomi
add
jp
lods
out
ins
add
les
and
cld
sbb
jge
cmp
int
in
cld
neg
jno
mov
daa
pop
push
lock
or
daa
mov
inc
ins
aaa
and
clc
inc
and
and
nop
pop
mov
mov
or
xor
js
dec
mov
mov
cmp
cmps
lods
imul
(bad)
jne
test
or
movs
sahf
sub
inc
fistp
dec
in
mov
xchg
in
movs
into
jl
xchg
shld
test
movs
sbb
and
cdq
fnstenv
or
xchg
lods
je
aam
repnz
sub
inc
mov
es
into
sahf
ficom
out
mov
(bad)
adc
pop
fcomp
(bad)
sub
sbb
xor
ss
fisttp
out
fcom
jbe
into
dec
lea
push
retf
pop
popa
or
les
ins
mov
test
popa
repnz
retf
pushf
loope
adc
or
mov
ins
dec
and
es
loope
pop
mov
sbb
stos
ss
mov
mov
aaa
in
push
inc
(bad)
das
movs
or
jl
(bad)
(bad)
xchg
sub
popa
or
adc
mov
(bad)
es
inc
ins
dec
outs
xor
out
outs
ds
dec
rol
or
xchg
cdq
loop
stc
xchg
inc
int
xchg
rcl
mov
mov
ds
sbb
inc
int
shl
sub
adc
scas
mov
es
push
add
push
int
repz
jns
ins
das
jbe
test
div
jb
adc
push
jno
shl
push
movs
repz
mov
jmp
rol
inc
inc
xchg
jg
test
outs
adc
xchg
test
sbb
loopne
ja
ret
pushw
retf
adc
(bad)
push
(bad)
mov
shl
mov
scas
or
aam
ds
cmp
test
test
ret
sti
or
mov
ins
(bad)
push
cmps
out
sub
adc
pop
adc
stos
rcl
push
cmps
xchg
icebp
cld
lahf
stos
add
mov
pop
cdq
stc
stos
sub
jle
sbb
shl
dec
(bad)
fist
loope
shl
leave
push
repz
jno
test
ss
dec
mov
mov
sub
mov
mov
dec
mov
stos
cmps
aam
mov
in
fbld
fild
bound
lea
test
jo
pusha
mov
inc
stc
test
lds
sbb
(bad)
pop
dec
out
pop
test
shr
movs
sub
jmp
ja
cmp
popa
test
bound
je
ins
mov
xlat
dec
sbb
inc
stc
gs
cli
adc
and
inc
fidivr
sbb
push
inc
popa
lock
mov
add
dec
mov
test
mov
and
cld
mov
cwde
jmp
retf
(bad)
jnp
jbe
pop
xor
jge
sbb
in
dec
stos
lods
xor
or
sub
into
mov
scas
mov
out
cmp
(bad)
cmovns
ret
call
mov
cwde
add
and
out
fwait
push
pop
adc
push
fmul
stos
adc
sbb
sbb
fdivr
sbb
jno
mov
ds
addr16
pop
or
inc
jne
jo
mov
pop
sub
daa
bound
dec
std
jb
out
add
add
cmc
jl
test
call
sbb
cmp
call
pop
pop
mov
inc
leave
sub
out
cmc
lods
jno
test
push
pop
add
mov
es
(bad)
lock
inc
cmp
sub
xchg
xor
pop
ds
sbb
or
sbb
mov
xor
inc
or
sub
repz
sub
mov
push
and
push
lahf
aad
ffree
mov
xchg
jne
cmp
mov
fdivr
xchg
jmp
sar
retf
xor
shr
std
xchg
sbb
xchg
or
push
and
cwde
sbb
ins
rol
cmp
sbb
mov
pop
and
push
inc
sbb
adc
lds
aam
and
(bad)
push
xchg
mov
out
push
dec
rol
rol
out
fstp
sub
push
mov
mov
pushf
jbe
push
jg
cmps
mov
push
cmps
sbb
xchg
dec
jno
aas
xchg
xlat
(bad)
gs
push
icebp
sub
stos
pop
pop
call
sub
mov
sub
adc
inc
hlt
retf
jns
pusha
test
cli
xchg
in
mov
clc
pusha
jmp
dec
mov
daa
sub
push
gs
dec
push
fs
cmp
ss
iret
sbb
mov
push
mov
out
push
push
call
repz
jb
aaa
inc
out
jno
cmp
popa
xchg
mov
dec
pop
xchg
add
cmp
scas
test
retf
and
push
jns
pop
adc
and
fidiv
(bad)
jnp
addr16
push
inc
stos
fld
pop
mov
sub
sbb
loop
adc
sub
lods
es
aam
push
into
(bad)
fmulp
ret
das
dec
in
mov
sbb
rcr
jge
inc
es
mov
lds
cwde
xchg
std
test
inc
or
ins
aaa
and
test
cwde
sub
pop
or
daa
jmp
add
xchg
xor
jle
(bad)
xchg
(bad)
ss
mov
add
push
inc
or
ds
inc
call
cmc
test
mov
jo
or
add
loop
clc
mov
xchg
or
push
int
or
(bad)
(bad)
es
aaa
out
(bad)
fist
sub
(bad)
fnstcw
cmps
jl
adc
fbstp
pop
out
pushf
clc
or
fimul
and
bound
loopne
vaddsubpd
call
sub
icebp
jl
mov
sbb
cmp
push
mov
sub
in
mov
call
adc
or
js
pop
jae
push
mov
xchg
or
dec
in
add
push
loop
nop
add
stos
jns
push
push
xor
xchg
or
outs
xor
bound
fs
or
jne
cli
sahf
out
sub
jns
hlt
add
outs
pusha
mov
out
pushf
dec
xchg
imul
dec
lock
xchg
or
jle
and
sub
mov
repz
(bad)
ficom
ror
scas
ss
gs
xchg
test
push
mov
adc
call
cmp
pop
bound
inc
rol
jmp
out
jns
sub
jae
fucomip
ds
pop
dec
cmp
push
pop
sahf
mov
sub
bound
std
in
clc
popf
add
fld
add
leave
fucomp
jge
mov
sub
adc
dec
xchg
repz
mov
out
call
popa
cdq
sti
mov
ror
shr
rcr
retf
das
out
adc
push
adc
out
cmps
jne
mov
dec
mov
test
stos
scas
sbb
dec
aam
sbb
mov
push
cmps
mov
test
test
xchg
mov
jecxz
in
das
mov
(bad)
pop
ja
aad
sti
das
xor
cmp
idiv
adc
xchg
jae
mov
pop
loope
sbb
jnp
jmp
into
and
fld
enter
aam
sti
sbb
rcr
sahf
or
mov
adc
sbb
aad
cmp
mov
aas
popa
fimul
test
lahf
xor
adc
int3
dec
jmp
retf
push
sbb
xchg
push
test
add
jno
jo
cmp
push
xor
or
sub
imul
xchg
xor
mov
mov
fldcw
push
dec
and
sbb
les
cli
out
mov
aaa
mov
pop
(bad)
sbb
push
add
in
push
mov
xchg
dec
sahf
das
(bad)
inc
inc
(bad)
jmp
loope
dec
pop
je
jg
inc
cwde
pop
clc
add
cmp
sbb
dec
fs
aam
ins
mov
lock
jmp
cmp
sub
adc
call
je
xor
retf
leave
and
jecxz
sti
fs
scas
sahf
xchg
ret
jg
stos
xor
cmps
pop
jo
pop
or
pop
xor
ret
inc
add
aam
or
dec
ret
sbb
int
xchg
sub
adc
ja
lea
popa
outs
call
adc
movs
cmp
loopne
mov
out
or
pop
inc
icebp
mov
and
add
call
fmul
loopne
pop
mov
pop
mov
mov
mov
xlat
aaa
out
xor
into
mov
dec
stc
pushf
stc
nop
outs
or
sbb
push
mov
adc
cmp
push
cs
test
push
jo
push
loope
and
sbb
and
adc
jb
add
adc
dec
stc
outs
xor
pop
jb
stos
inc
adc
push
and
sti
jbe
pushf
xor
cs
lock
xchg
add
mov
rol
xchg
sub
or
and
mov
add
jge
adc
jle
cdq
xchg
pushf
push
retf
addr16
movs
inc
gs
in
pop
mov
xor
shl
(bad)
sbb
out
mov
dec
ds
push
int
dec
icebp
push
fwait
or
inc
iret
aad
fistp
cmp
ss
shl
and
jle
cmp
jle
cmp
cmps
mov
adc
cmp
jle
mov
mov
loope
push
iret
js
cdq
ins
lock
add
and
xchg
gs
out
xchg
sub
pop
mov
push
jmp
mov
inc
in
dec
int
(bad)
call
mov
xor
sahf
div
call
ins
sub
fwait
sbb
mov
cmp
sub
pop
das
loopne
jp
(bad)
fsubr
dec
stc
xchg
mov
sub
pop
test
hlt
mov
stos
mov
mov
js
sub
xchg
dec
outs
nop
pop
and
sbb
shl
pushf
xor
dec
out
nop
stos
inc
arpl
retf
pop
push
dec
cwde
sbb
xor
dec
repz
push
popa
add
out
adc
cmp
retf
ds
push
xchg
sub
lods
sbb
fwait
sbb
sti
loop
fimul
mov
into
xchg
add
jecxz
pop
sub
sbb
or
mov
add
ret
mul
repnz
or
stc
(bad)
cli
push
(bad)
mov
clc
and
inc
push
push
fwait
(bad)
sbb
jecxz
iret
inc
sbb
cmp
scas
retf
push
sub
pop
sbb
retf
ret
ds
adc
call
sbb
pop
daa
xlat
sbb
mov
ja
call
sub
push
mul
inc
(bad)
dec
dec
mov
push
ror
ret
mul
retf
pop
add
fisubr
sbb
arpl
das
inc
dec
sbb
inc
movs
cmp
aad
mov
jmp
jl
or
clc
fdiv
imul
push
pop
lahf
sbb
pushf
movs
pop
pop
dec
xchg
xchg
mov
aaa
jne
inc
in
addr16
and
jno
mov
mov
cmps
mov
jae
and
cdq
scas
sub
loop
rcl
rcl
cld
popf
pop
sar
xchg
mov
sahf
test
aas
sub
push
lar
or
stos
out
xchg
hlt
popf
or
cld
pop
push
jle
and
call
stc
jne
push
add
xchg
or
dec
cld
ror
repnz
xchg
mov
xor
adc
repz
shr
push
add
pop
pop
and
xor
call
dec
popa
cli
xor
rep
mov
or
in
movs
pushf
stos
cmc
mov
adc
mov
shr
or
loope
add
ds
bnd
or
repz
sub
inc
jle
mov
mov
pop
adc
icebp
xchg
cmp
mov
jno
clc
test
pusha
jns
ins
mov
add
je
je
push
add
push
and
xchg
call
shl
adc
cmps
adc
xchg
jmp
(bad)
les
push
int3
scas
lods
sbb
mov
in
push
mov
xchg
mov
pop
loop
loop
call
mul
lds
dec
scas
enter
out
leave
popa
call
mov
ja
sbb
leave
xor
sub
fadd
dec
push
sub
jmp
jno
mov
and
cdq
repz
jbe
fimul
outs
xchg
xchg
jmp
and
jno
mov
jp
mov
(bad)
out
sub
hlt
inc
mov
in
aas
ret
(bad)
rcl
mov
mov
(bad)
gs
pop
pop
sahf
cmps
sbb
ins
xchg
mov
push
xchg
or
loope
or
xchg
xor
mov
add
cmc
(bad)
cmp
or
sub
and
fdiv
leave
cmps
xchg
mov
fisub
dec
push
xchg
push
aas
test
dec
ss
and
jl
loopne
inc
jp
xlat
jmp
or
cmp
aaa
dec
scas
ins
mov
loopne
mov
xlat
jp
push
mov
cld
retf
repnz
pop
leave
aam
inc
lds
or
rcr
xchg
sub
sub
cmp
xchg
jl
jns
es
inc
lock
repz
sub
xlat
dec
cmps
mov
test
addr16
sub
int3
aam
popf
mov
data16
sbb
push
jb
mov
mov
fadd
cdq
jg
pusha
imul
mov
fnstenv
fld
outs
pusha
clc
sbb
sti
mov
or
neg
inc
ret
jp
dec
dec
loope
pop
sub
aas
test
out
movs
mov
push
test
push
ja
adc
push
call
daa
sbb
clc
stos
inc
jnp
lock
mov
mov
leave
jnp
jo
xor
retf
xlat
sub
mov
es
sbb
jg
test
xchg
inc
xor
das
test
lahf
cmp
xor
mov
xor
fnstsw
aad
jge
pop
mov
pop
stos
mov
mov
push
or
sbb
cmp
cmp
ins
es
sub
lds
int3
mov
mov
out
inc
dec
aas
sbb
ror
fimul
sub
scas
lock
fdiv
iret
jmp
dec
stos
enter
jnp
adc
mov
test
popf
retf
dec
xchg
mov
std
retf
add
cmp
call
jbe
popf
test
jb
xor
lea
test
fdiv
and
xchg
xchg
push
push
pop
adc
add
adc
dec
fist
rcl
adc
out
imul
inc
js
fs
pop
xchg
jmp
push
mov
adc
add
jge
pop
bound
xchg
shl
leave
sbb
xchg
push
fwait
dec
fmul
shr
xor
je
mov
imul
push
cs
pop
in
retf
mov
lods
add
sar
push
outs
sbb
push
loope
jg
or
fwait
test
pop
xchg
enter
pop
xchg
fs
sti
(bad)
xor
mov
fs
scas
aaa
push
lea
imul
pop
aas
pop
push
das
arpl
pop
mov
out
mov
bnd
cli
xor
mov
test
shr
mov
pop
sub
sbb
nop
pop
and
icebp
sub
sbb
dec
inc
dec
xor
jbe
cmp
ins
fdivr
mov
xor
repz
repnz
mov
in
and
cmp
dec
imul
bound
push
add
rcl
call
mov
mov
xchg
and
xor
ins
sub
sub
(bad)
sahf
sub
xor
adc
xor
cs
push
push
into
lods
in
or
cmc
icebp
into
jecxz
cmc
xchg
sub
cmp
mov
cmps
int
push
mov
cmps
xchg
add
(bad)
sbb
and
std
jb
loopne
cmps
push
cvtdq2ps
jl
loopne
bnd
adc
gs
mov
push
mov
popa
xchg
add
cwde
fsub
fadd
aad
in
fidivr
sub
les
xchg
add
pop
sahf
xchg
aam
add
mov
adc
int3
in
sar
mov
jne
xor
lds
dec
ret
daa
pop
jbe
xchg
jmp
add
cmovge
daa
daa
add
push
sbb
inc
imul
inc
pop
mov
imul
(bad)
xchg
cmc
xor
(bad)
lds
daa
xchg
mov
retf
shr
xchg
pushf
xchg
adc
loopne
xor
imul
mov
and
aam
aas
or
shl
mov
xchg
jne
ins
sbb
ja
cmp
pop
jg
repz
jl
sbb
seta
jp
push
jne
mov
dec
int
mov
xchg
popf
ds
movs
cmovl
fidivr
jle
test
cmps
or
push
fadd
outs
(bad)
lea
rol
mov
jno
sar
scas
mov
xor
les
dec
cmps
cmp
mov
and
pop
push
jecxz
dec
movs
fisubr
adc
jp
pushf
inc
and
adc
cmp
xor
inc
and
sbb
mov
sbb
jnp
pop
mov
mov
adc
and
cmps
dec
ret
in
xor
xor
scas
iret
stos
adc
mov
sar
adc
rcl
leave
jmpw
imul
xchg
push
test
scas
(bad)
out
cmp
xor
pop
ror
neg
xchg
scas
fucomip
push
(bad)
pusha
enter
push
mov
test
mov
xor
inc
sub
rcl
inc
std
out
mov
imul
es
push
mov
cmp
xchg
cs
jmp
sbb
push
sahf
xchg
mov
iret
push
jmp
out
fs
add
rcl
adc
push
jge
pop
push
in
frstor
dec
sbb
xchg
popa
add
nop
sbb
xor
push
xor
test
cmp
cmps
loop
int3
lea
lods
cmp
dec
pop
dec
jmp
jg
push
out
push
enter
push
cdq
je
fwait
mov
pushf
popf
mov
rcl
xchg
sar
sub
and
fist
sbb
and
fucomp
add
fild
add
jnp
fidivr
mov
fist
mov
cmp
xchg
lods
or
in
ds
lods
es
mov
mov
lods
dec
into
test
jge
mov
fidiv
add
pop
ds
adc
loopne
fimul
imul
pop
imul
jecxz
push
jno
pop
lods
cs
jmp
mov
(bad)
push
and
ret
frstor
imul
and
rol
mov
std
inc
and
stos
push
clc
idiv
add
(bad)
push
inc
ret
out
test
dec
aam
mov
aaa
mov
mov
sbb
mov
nop
or
retf
inc
mov
cmp
(bad)
mov
lds
pushf
sbb
pop
test
call
mov
retf
(bad)
sbb
aaa
mov
mov
cmp
js
adc
mov
pop
mov
or
int
mov
hlt
xchg
xchg
mul
pushf
mov
in
mov
int3
mov
lds
xchg
mov
xchg
push
fadd
call
dec
repnz
add
(bad)
pop
dec
mov
jp
icebp
xchg
mov
addr16
push
dec
(bad)
xchg
jmp
into
xchg
sbb
ja
and
cmp
jecxz
xchg
lods
or
or
push
mov
push
sub
inc
push
mov
inc
sub
loopne
dec
push
mov
pop
add
daa
inc
xor
jbe
mov
sbb
xchg
inc
sbb
aad
imul
sahf
loop
adc
push
or
aad
test
pop
jl
mov
outs
retf
pop
jge
sbb
dec
adc
enter
sub
fistp
add
stc
aam
sbb
loope
cdq
mov
push
dec
(bad)
call
mov
retf
push
dec
cmp
xchg
test
or
clc
pop
mov
imul
ror
jge
mov
push
push
xchg
sbb
jecxz
push
push
ins
ret
and
jmp
pop
std
cmp
mov
daa
(bad)
adc
sbb
push
jecxz
imul
(bad)
jb
xchg
rcr
pop
dec
xor
cmps
outs
not
xchg
sub
mov
in
xchg
clc
mov
jb
test
cmp
and
jp
add
xchg
inc
xchg
and
aas
push
xchg
daa
cmp
out
push
push
push
test
loop
sbb
pop
sbb
adc
bnd
jmp
cmp
mov
aas
les
jmp
neg
xchg
das
xor
or
hlt
dec
xchg
mov
add
in
mov
dec
fwait
mov
ret
fwait
sbb
stos
ret
ins
pop
sub
jg
leave
add
(bad)
or
push
add
cmp
ins
sbb
test
clc
mov
xchg
fdivr
cmp
shr
sbb
pop
cmp
repz
inc
cmp
cmc
aad
dec
scas
mov
pcmpgtb
cmp
inc
mov
xchg
cdq
xor
(bad)
div
aad
mov
mov
int
cmc
ins
rcr
out
xor
test
shr
pop
add
push
cdq
push
retf
(bad)
xor
xchg
iret
daa
test
fs
mov
adc
xlat
inc
xchg
xchg
scas
adc
mov
hlt
out
(bad)
paddb
rol
mov
std
dec
sbb
add
scas
xchg
loop
jle
rcr
jp
neg
sbb
dec
dec
inc
mov
xchg
xchg
adc
ja
call
push
loopne
shl
or
pop
daa
add
xchg
adc
dec
sbb
sbb
stc
inc
test
mul
or
loope
ins
call
mov
cld
retf
and
aas
cmp
mov
les
push
mov
lahf
pop
fwait
cmc
out
push
mov
imul
shl
cwde
sbb
inc
mov
and
push
mov
mov
retf
inc
popf
or
cdq
mov
aam
and
mov
push
scas
mov
inc
mov
retf
mov
adc
(bad)
mov
stos
and
jbe
cwde
lea
or
repz
and
mov
cmc
cmp
fstp
pop
or
xchg
loope
xchg
cmp
cpuid
inc
fs
xchg
push
pop
out
stos
jmp
adc
in
inc
popf
(bad)
mov
push
lea
and
xor
add
jae
or
jg
(bad)
call
cwde
cmps
pop
jno
dec
retf
dec
retf
inc
dec
xor
or
(bad)
in
sbb
jns
jge
mov
pop
jl
jno
pop
(bad)
(bad)
adc
push
jmp
xor
enter
jb
outs
in
mov
(bad)
xchg
jns
cmps
outs
in
mov
(bad)
loope
pop
push
push
loope
pop
outs
enter
daa
dec
cmps
mov
ror
outs
repz
lock
or
retf
push
mov
(bad)
popa
out
pop
(bad)
cmp
pop
fild
jne
dec
add
nop
mov
mov
and
jmp
xor
cmp
out
sbb
(bad)
out
mov
in
sbb
dec
repz
call
movs
repnz
inc
mov
mov
push
lds
test
cli
xchg
add
cmp
pop
mov
mov
cmp
or
aad
lahf
xchg
aas
rcl
arpl
inc
leave
dec
mov
push
arpl
sbb
xor
fidivr
sub
lds
cdq
push
test
shl
pusha
sub
sub
pop
cmp
frstor
sqrtps
sub
test
out
ja
push
pop
push
dec
and
les
fnstenv
inc
arpl
ins
cmp
inc
jmp
repnz
ret
lods
call
push
inc
dec
cmp
clc
aad
sbb
push
fild
lea
fmulp
pop
(bad)
in
ins
mov
ret
mov
dec
and
xrelease
in
mov
dec
rol
jne
sub
mov
mov
inc
ss
ja
mov
out
loopne
sub
or
xchg
sbb
inc
add
sbb
adc
mov
dec
(bad)
in
js
cmp
cli
lahf
pop
pushf
dec
and
retf
and
popf
inc
or
or
xchg
pop
nop
hlt
cld
pop
ret
daa
sub
aas
jae
and
retf
pop
and
add
movs
or
lea
mov
mov
adc
ja
nop
sar
dec
fiadd
sub
xchg
cmps
call
in
xchg
xor
rcr
cwde
nop
jp
jecxz
mov
ret
jb
stos
inc
sub
out
mov
mov
or
and
dec
cmp
push
pop
cwde
int
jne
popa
loop
jge
test
fsub
adc
enter
push
dec
adc
scas
aaa
inc
mov
pop
ret
inc
arpl
inc
sub
xchg
and
fwait
mov
pusha
sub
(bad)
sub
mov
fs
mov
jmp
fsin
add
es
jno
xor
xor
repnz
test
fadd
push
adc
gs
mov
popa
push
dec
xchg
push
dec
jmp
ror
int3
or
(bad)
out
popa
add
push
lds
mov
arpl
out
test
push
stc
pop
outs
cmp
or
aas
jbe
sbb
add
das
cmp
rcr
mov
push
mov
fcom
add
mov
mov
cmc
and
xchg
pop
nop
mov
pop
stos
jle
retf
mov
popa
add
test
mov
xchg
nop
inc
retf
jo
out
es
neg
cli
and
lods
sub
fld
mov
stos
daa
outs
icebp
xor
std
or
cmp
repnz
shl
xchg
adc
or
ins
cmp
dec
ret
push
lock
push
sbb
add
in
jge
mov
(bad)
std
and
dec
(bad)
out
sub
sub
and
(bad)
loopne
xchg
xor
push
sub
into
hlt
sbb
jle
mov
or
enter
sbb
xor
cmp
aam
fwait
push
mov
xlat
xor
fs
cmp
lahf
mov
add
inc
ret
push
xor
mov
mov
bound
pop
mov
rol
outs
loopne
lahf
sahf
ja
push
xor
sbb
dec
jmp
imul
mov
imul
inc
rol
mov
arpl
cvtps2pd
inc
arpl
xchg
xlat
cmp
mov
xor
jl
movs
jle
into
xor
add
pop
xlat
sti
sub
sahf
fst
dec
out
pop
iret
adc
sbb
inc
pop
inc
mov
scas
inc
or
xchg
icebp
ins
adc
push
popa
les
in
or
push
fstp
outs
pop
popa
fnstsw
sar
add
lods
sub
test
mov
clc
sub
daa
pushf
into
or
dec
pop
enter
mov
repz
jmp
add
sbb
test
add
into
ins
xlat
xchg
(bad)
lea
xchg
xchg
(bad)
cdq
out
movs
push
gs
adc
mov
repz
dec
(bad)
mov
neg
popf
test
cmps
xchg
imul
bound
in
and
push
add
pop
ins
jae
int
push
aam
mov
jb
sbb
clc
or
inc
cmp
add
inc
mov
outs
dec
fwait
mov
dec
loopne
gs
adc
outs
repz
dec
mov
jnp
out
bound
lods
popa
mov
jle
jmp
xchg
retf
adc
in
cmps
lock
xor
mov
es
xchg
out
stc
push
in
pop
movs
enter
push
pop
aaa
(bad)
movs
test
dec
mov
test
pushf
popa
dec
push
xchg
out
push
mov
adc
mov
dec
sbb
push
sahf
cmp
es
add
jle
jp
jae
ss
push
jmp
jo
in
das
retf
mov
pop
rcr
fwait
imul
jle
push
sbb
mov
jnp
movs
js
fstp
add
mov
mov
out
shl
(bad)
jl
jns
add
imul
jne
jbe
xchg
icebp
dec
mov
retf
call
mov
cmp
pop
adc
or
xlat
xlat
mov
push
cmp
cmps
cmps
and
out
shl
jns
jg
mov
sub
lods
xor
aam
or
test
pushf
xchg
push
or
cdq
movs
fwait
inc
xor
pop
xchg
mov
stc
in
(bad)
xchg
shl
(bad)
cdq
pop
fwait
mov
aad
dec
push
shl
inc
mov
ret
rcr
fcomp
add
in
arpl
outs
cmp
adc
push
cmp
xchg
mov
mov
xchg
jne
adc
cmc
test
movd
push
bound
hlt
ret
xchg
or
mov
lock
ss
adc
mov
stos
shl
(bad)
jle
mov
cmp
jno
sar
sub
les
pop
lock
dec
dec
sti
xchg
sbb
fistp
int3
bound
mov
clc
ins
enter
xor
aaa
loopne
jns
(bad)
adc
inc
xor
dec
fwait
ins
ret
retf
mov
stos
movs
add
das
(bad)
pmaddwd
or
mov
jmp
div
fdiv
xchg
dec
jmp
mov
and
ja
mov
ds
rcr
push
inc
adc
sbb
aaa
adc
push
pushw
(bad)
mov
clc
and
repz
test
adc
scas
mov
sbb
push
dec
enter
shr
push
fnstsw
rcr
xchg
(bad)
je
jmp
dec
imul
and
xor
mov
mov
adc
fs
push
gs
stc
test
mov
inc
out
rcr
pop
popa
(bad)
call
mov
fsubr
data16
lock
mov
mov
xchg
dec
daa
and
addr16
clc
cmps
jmp
aaa
inc
dec
inc
jnp
sti
outs
cmp
ins
cdq
mov
test
sub
cmovo
outs
in
mov
cmp
shl
nop
cmc
mov
adc
and
test
dec
push
add
mov
inc
jns
in
adc
mov
add
mov
ss
ret
sbb
jmp
and
pop
arpl
inc
cli
sldt
pop
jnp
or
sbb
call
sar
mov
cmc
or
fdivr
cmp
inc
xor
cmps
dec
jmp
int
aam
dec
ret
sbb
mov
ret
jp
iret
in
int
xor
lahf
cmp
dec
imul
inc
out
push
xchg
cld
push
shl
fwait
gs
adc
cwde
int
sbb
imul
xor
nop
mov
sbb
inc
lea
adc
jg
mul
dec
inc
sub
and
bound
dec
sub
mov
mov
adc
xlat
mov
out
mov
and
mov
mov
in
pop
stos
dec
dec
cmp
push
je
add
aad
dec
pusha
in
mov
cdq
and
bound
or
jno
test
imul
xchg
xchg
mov
inc
into
out
sbb
sub
outs
jb
pop
stc
jmp
or
add
mov
mov
scas
push
outs
dec
bound
fcom
jecxz
add
push
(bad)
mov
retf
out
(bad)
iret
jb
fdivp
or
and
icebp
mov
push
inc
cs
pop
adc
mov
mov
jp
mov
jbe
stos
sub
sbb
jecxz
xchg
xor
(bad)
mov
jle
das
test
shl
rol
xchg
popa
add
mov
adc
dec
int
stos
lds
and
stos
sti
das
push
scas
cwde
stos
(bad)
leave
push
icebp
lods
xchg
iret
cmp
add
lods
repnz
or
not
xor
cmp
sahf
jne
loopne
movs
stos
lahf
retf
add
int
ret
xchg
push
je
gs
pop
pushf
mov
jmp
(bad)
push
mov
mov
mov
rcl
mov
mov
or
inc
fmul
mov
push
sahf
and
movs
adc
imul
push
cmp
and
sbb
adc
mov
sbb
push
sub
pop
outs
sbb
iret
adc
in
pop
(bad)
xor
inc
dec
aas
pop
pop
sub
fcmovu
enter
stos
and
jmp
aad
fldcw
add
mov
jmp
frstpm(287
clc
enter
test
adc
fimul
mov
call
add
outs
nop
and
dec
test
in
inc
sbb
mov
jbe
or
or
mov
inc
adc
push
and
cmp
xchg
pop
sbb
pop
aad
add
rol
xor
icebp
shl
clc
mov
cmp
outs
dec
jb
push
test
jg
jecxz
dec
pop
jle
mov
enter
jb
cmp
clc
inc
jns
mov
jg
and
inc
inc
aaa
mov
mov
jge
cmp
mov
mov
es
in
mov
pop
jns
sbb
xchg
lods
mov
push
push
test
repnz
push
(bad)
lahf
or
push
xlat
test
(bad)
stos
jnp
(bad)
and
aad
outs
retf
fiadd
push
push
jne
ins
fiadd
stc
test
je
enter
dec
in
xchg
sahf
push
gs
adc
or
out
add
scas
imul
(bad)
fdivrp
sbb
inc
inc
jb
dec
cmc
push
(bad)
shl
inc
jb
test
mov
(bad)
fisub
jmp
movs
ins
jecxz
mov
repz
cmp
or
push
inc
scas
inc
mov
jg
sbb
ja
adc
ins
jne
and
test
jnp
rol
mov
stos
jp
dec
push
adc
call
pop
push
xor
push
or
pusha
jae
xor
add
lock
push
xchg
inc
repnz
into
ss
es
adc
shl
push
xchg
adc
js
stos
fdiv
and
lahf
out
xchg
xor
xor
push
sub
imul
fnstenv
daa
stc
lods
add
jge
test
test
sbb
leave
ja
push
paddsb
dec
cmp
std
test
dec
outs
outs
mov
fbstp
out
add
js
inc
out
test
jecxz
inc
lods
psubsb
repnz
dec
in
inc
pushf
jg
clc
mov
fs
sahf
stos
out
ins
shl
leave
iret
cld
xor
into
cmp
mov
mov
mov
repz
cmp
xchg
xchg
rcl
jno
jmp
test
mov
jnp
add
sar
dec
cmp
aas
mov
xchg
inc
push
test
stos
arpl
and
jo
mov
inc
add
add
lods
push
pop
out
inc
aad
(bad)
imul
in
cld
ins
sti
mov
ror
fdiv
push
div
mov
mov
mov
adc
cmp
ja
shl
das
mov
adc
or
xor
add
xchg
jmp
lock
ret
out
cdq
js
mov
push
pop
cdq
dec
lods
xchg
push
ins
dec
xchg
jl
arpl
push
fimul
mov
clc
rcr
or
lea
add
adc
out
cmp
mov
push
ja
mov
mov
addr16
loope
xchg
inc
call
mul
test
dec
mov
fisubr
pusha
and
les
fwait
jle
push
xchg
dec
adc
arpl
popa
sbb
cs
jge
xchg
push
adc
xor
out
cdq
mov
mov
pushf
cmp
addr16
lahf
mov
int3
and
fwait
inc
add
push
sub
mov
or
xor
sbb
add
mov
rol
test
push
lahf
jmp
jnp
retf
ds
cld
imul
xchg
xor
pop
or
test
adc
test
pop
ins
iret
xlat
pop
popa
test
xor
sbb
xchg
dec
pop
sbb
lea
or
ss
or
sub
mov
sub
outs
and
fcom
movs
and
jnp
pop
int
shr
push
icebp
ja
fsubr
pop
xchg
pop
ins
ret
xor
out
inc
or
movs
add
adc
div
dec
fsubr
adc
dec
int
push
xor
or
aam
rol
es
mov
push
adc
pop
pop
jg
jo
(bad)
or
mov
ror
xor
inc
(bad)
ficomp
repnz
hlt
and
jbe
dec
adc
inc
sub
jbe
or
lods
pop
or
dec
xor
cld
hlt
int3
pop
inc
ror
aad
push
stc
pop
(bad)
scas
retf
test
stc
cld
retf
push
push
fild
xor
mov
mov
sub
sbb
inc
mov
loope
call
cmp
sub
test
mov
or
mov
sbb
cdq
vcvttss2si
in
mov
fistp
mov
pop
jl
push
dec
jno
jmp
js
mov
cmp
sbb
adc
shl
ror
hlt
and
fisttp
jge
pop
call
sub
cmp
adc
scas
pushf
or
fadd
push
fs
stos
sub
add
nop
(bad)
daa
sbb
stos
and
imul
ins
mov
pop
jg
mov
mov
js
adc
call
gs
xlat
pop
test
dec
and
lods
call
cmp
fadd
and
adc
lds
push
mov
aaa
push
jge
xlat
outs
ins
jge
xchg
pop
shr
pop
and
popa
(bad)
out
mov
(bad)
(bad)
fmul
mov
push
sbb
in
cmp
scas
pop
das
mov
dec
cmp
mov
sub
or
mov
push
(bad)
das
out
jnp
push
les
xlat
pusha
cmp
out
cmp
loopne
adc
scas
push
cwde
cmp
pop
test
mov
scas
xor
in
dec
mov
sub
pushf
dec
scas
push
shr
popa
cmp
lods
int
outs
jmp
repnz
and
dec
xor
frstor
fwait
ins
cmps
loop
aaa
loope
mov
and
jl
data16
js
xchg
sub
mov
dec
xor
je
icebp
xchg
repz
push
pop
or
test
sbb
mov
push
inc
push
cmp
cld
cmps
popw
pop
jl
out
jmp
aam
xor
rcl
and
cli
test
push
mov
push
mov
test
add
adc
cmc
arpl
add
mov
stc
(bad)
mov
rcr
aam
(bad)
add
mov
mov
retf
in
jae
icebp
pinsrw
xchg
fdivr
xor
dec
push
in
mov
and
aam
mov
call
sub
pop
shl
(bad)
daa
addr16
adc
cld
(bad)
and
jns
ret
pop
adc
xchg
or
cmp
push
sbb
test
xchg
cs
push
and
pop
mov
es
jmp
mov
fisubr
mov
jl
xchg
test
iret
scas
dec
in
and
push
jmp
mov
jecxz
cmp
push
sbb
leave
or
ret
push
push
call
int
sti
aas
push
mov
in
cmps
push
sbb
xor
cdq
call
push
and
add
sbb
loop
xchg
out
test
cmp
sub
jmp
retf
outs
jns
push
in
xor
xchg
lea
lods
xchg
in
jne
fwait
addr16
jae
mov
in
movs
stos
add
jmp
into
les
jnp
popa
(bad)
fistp
pop
out
int3
mov
xchg
jae
and
pop
mov
push
and
mov
xor
jmp
mov
(bad)
inc
add
call
clc
dec
sti
pusha
rol
fbstp
pop
dec
jg
adc
xchg
dec
hlt
xor
mov
cmp
cwde
das
push
sub
xchg
addr16
ret
push
lds
sub
ja
movs
add
xlat
add
imul
push
into
nop
add
push
cmp
dec
shl
sub
pop
jae
xchg
or
add
push
ficomp
sbb
jp
es
rol
xchg
pop
bswap
jo
mov
ins
fisubr
inc
push
push
icebp
jae
nop
push
add
mov
mov
cmp
adc
sub
cld
sub
fstp
icebp
xchg
dec
sbb
bound
shr
setl
cld
mov
fucomp
push
fnstsw
call
sub
aaa
mov
xchg
je
cwde
sub
aam
iret
add
and
lods
sbb
gs
mov
lock
mov
jb
xchg
jo
mov
sub
jo
movs
popa
(bad)
push
or
mov
stc
mov
sub
adc
mov
inc
inc
adc
gs
cmps
adc
adc
and
(bad)
test
inc
pop
and
stc
sbb
xchg
jg
cmp
and
aas
xor
movs
add
daa
jnp
xor
mov
loope
sbb
inc
les
cld
jp
inc
jno
pop
fwait
call
fdivr
xor
inc
inc
ficomp
aaa
movs
outs
cmc
outs
shl
ja
xlat
cdq
loope
xchg
cmp
lahf
in
test
retf
(bad)
jae
push
push
sahf
pop
call
jae
dec
icebp
cwde
xchg
loopne
stos
js
std
push
clc
ja
lock
dec
push
xchg
or
cdq
push
jbe
in
(bad)
jmp
test
adc
pop
inc
and
test
lock
enter
add
jo
(bad)
adc
mov
jge
ret
push
scas
repz
mov
ror
add
push
test
jae
mov
dec
fild
adc
sbb
push
xchg
sbb
(bad)
int
aas
mov
xor
mov
retf
out
movs
(bad)
cli
xchg
xchg
mov
push
cmps
fwait
sbb
jbe
into
adc
test
into
add
frstor
dec
mov
leave
sbb
loopne
xor
out
adc
mov
dec
shl
add
adc
sub
test
push
jmp
shl
cli
jp
lahf
rol
dec
jecxz
(bad)
fs
mov
pop
or
int3
jbe
push
mov
fcomp
int3
push
sub
mov
xchg
push
int
outs
and
fcmovb
stos
pop
aaa
cwde
es
push
mov
add
dec
push
and
or
rcl
adc
jne
mov
sbb
call
call
ret
add
or
js
iret
pushf
(bad)
jmp
loop
xchg
pushf
inc
or
popa
xchg
clc
sbb
or
mov
cmp
mov
js
pop
pop
ret
retf
cmps
imul
(bad)
mov
xchg
shr
shl
(bad)
enter
and
ins
stos
push
cdq
sahf
cli
mov
xchg
and
ror
pop
fadd
xor
pusha
(bad)
cld
daa
adc
call
inc
data16
xor
stos
cli
int3
xlat
out
out
movs
mov
mov
pusha
int3
mov
sbb
pop
fiadd
sub
shr
pop
push
inc
push
mov
xlat
jmp
iret
and
or
loop
gs
(bad)
cmp
mov
(bad)
sbb
add
aad
cmp
and
inc
add
mov
aas
pop
mov
mul
jnp
mov
xlat
mov
add
pop
jl
ins
xor
cmps
aas
mov
cwde
mov
cmp
add
enter
mov
fiadd
fidiv
mov
shr
ror
mov
fwait
push
sub
jl
cwde
cmps
cmp
fs
lock
jno
lds
push
aam
(bad)
(bad)
cmp
repnz
mov
mov
fnstcw
push
imul
jns
imul
sub
ror
in
mov
leave
and
sti
and
aad
or
push
fdiv
imul
(bad)
out
pop
sbb
cmp
and
cmp
repnz
cmp
lea
in
in
mov
in
push
pop
out
push
stos
loope
xor
cld
loopne
scas
and
or
cmps
sbb
push
(bad)
mov
xor
mov
neg
mov
cmp
mov
in
and
dec
rcl
and
mov
out
dec
adc
fs
sti
and
stos
mov
adc
jmp
mov
mov
shr
mov
sbb
outs
ret
aam
repz
aam
cmps
lods
js
lods
pop
repnz
xchg
jg
push
movs
mov
imul
add
in
jmp
retf
push
push
repnz
loope
icebp
sub
jp
mov
xchg
xor
pop
xchg
popa
daa
push
dec
push
daa
mov
loop
and
adc
scas
mov
xlat
xor
inc
sbb
mov
add
and
into
xor
push
loop
push
shr
sbb
mov
ins
out
jno
inc
inc
iret
lds
cdq
jg
retf
push
xchg
jecxz
rol
mov
dec
dec
and
es
xchg
sahf
imul
dec
sbb
das
out
jle
inc
and
fistp
lds
fidivr
pop
inc
adc
out
jle
mov
mov
fist
add
out
in
push
add
dec
xchg
pop
ss
rol
out
sub
das
cmp
mov
sahf
push
rcl
xor
bound
stc
dec
scas
push
lock
scas
in
push
jne
jge
arpl
dec
add
lods
mov
xor
mov
movs
sbb
inc
add
add
mov
sbb
mov
and
push
or
popa
add
loope
neg
icebp
and
cmp
enter
adc
movs
adc
movs
das
xchg
inc
js
xchg
aam
xlat
retf
dec
ficom
retf
out
adc
fisttp
add
inc
popf
lods
lds
or
xor
int3
push
hlt
jmp
cmovnp
push
aam
jnp
pop
and
and
cdq
adc
movs
(bad)
xor
out
test
lds
jmp
or
jns
popa
xor
dec
cmps
push
pusha
cmp
mov
cmp
inc
mov
loopne
xchg
jmp
aad
cmp
push
ins
fldcw
sbb
cmp
movs
adc
aas
ror
sub
mov
js
mov
sub
scas
les
or
adc
xor
lods
dec
adc
ror
inc
jle
mov
mov
mov
inc
pop
mov
pop
jle
rol
ja
inc
dec
outs
js
rcl
pop
cmp
shl
call
sbb
mov
dec
div
fnsave
jae
out
stos
into
(bad)
cmps
or
mov
mov
rcl
in
dec
pop
movs
cmp
push
sub
ja
xchg
lahf
sbb
and
add
jnp
imul
push
sbb
pop
mov
fisubr
les
mov
push
ins
add
xchg
std
out
cmc
sbb
jae
hlt
hlt
inc
call
and
xor
sub
inc
cmc
(bad)
inc
arpl
scas
data16
out
or
inc
mov
shl
sahf
xor
daa
adc
push
xchg
mov
sbb
jb
jo
sub
fbstp
repz
cmp
or
retf
mov
sub
lock
iret
push
cmp
or
sbb
or
sti
fisttp
xor
bound
sub
lods
call
xor
or
dec
enter
std
loope
cli
movhps
add
cli
das
jecxz
jns
mov
cmp
jecxz
push
outs
mov
or
push
jl
outs
jmp
jno
mov
or
not
aad
cmp
or
fwait
cmps
sub
movs
retf
add
(bad)
dec
xor
arpl
or
out
inc
aaa
call
std
or
add
sub
dec
clc
iret
pop
dec
and
sbb
(bad)
dec
cmps
xchg
push
loop
movs
adc
(bad)
cli
mov
and
dec
xor
shr
fsubr
cmp
fcmovb
mov
arpl
push
pop
xor
push
ds
loope
ficom
inc
push
sub
push
stc
pop
pop
jmp
gs
mov
xchg
sbb
jg
sar
push
mov
mov
mov
dec
push
or
cs
mov
dec
mov
sub
mov
add
ins
push
pop
pop
popa
jne
sar
inc
push
adc
mov
sbb
es
cli
sbb
jo
pop
dec
pushf
movs
mov
sub
fisttp
das
mov
psllw
ins
cmc
aas
std
std
mov
cld
mov
and
add
sar
push
lahf
mov
adc
lods
adc
and
jl
pop
les
mov
stos
into
ss
in
sub
sub
pop
add
cmc
lds
jl
inc
mov
(bad)
jb
stc
mov
(bad)
mov
sbb
push
outs
and
cmp
int
jle
test
jb
mov
or
sub
sub
ror
push
xchg
es
cwde
sbb
lea
ss
xor
les
mov
dec
fdiv
adc
inc
data16
mov
dec
lea
cmp
in
sub
mov
fucomi
inc
cmp
fbld
hlt
mov
outs
out
out
push
adc
pusha
push
mov
ds
outs
test
shl
pop
pop
jns
dec
mov
dec
xor
mov
aam
push
or
std
mov
inc
add
(bad)
daa
cld
xor
inc
xchg
test
bound
add
ins
push
inc
mov
sub
ins
icebp
xor
pop
push
ja
mov
or
ds
sub
cld
push
into
loop
mov
sbb
xor
out
push
(bad)
xor
xor
std
push
dec
jl
pop
jno
fist
dec
mov
add
dec
and
hlt
push
dec
push
xchg
push
arpl
sub
jge
test
fsubr
rcr
fild
jns
or
hlt
jo
inc
mov
daa
add
cmp
aad
jle
cdq
shl
ret
stc
cwde
xchg
daa
jg
xor
adc
imul
push
mov
iret
sub
movs
es
movs
out
clc
pop
inc
lahf
push
fsubr
push
jmp
dec
xor
add
mov
mov
icebp
push
outs
sbb
jno
cld
fcmovb
sub
and
or
rol
cmp
call
pushf
inc
xchg
dec
fcomp
inc
mov
jo
mov
mov
sbb
rcr
pop
adc
ret
aam
mov
push
sub
push
retf
sbb
fwait
jae
ror
ss
lock
or
aad
fidiv
shl
mov
ins
call
shl
fdiv
fs
pop
and
mov
mov
pusha
mov
xchg
std
jo
fcmovb
inc
and
repnz
dec
adc
(bad)
icebp
mov
lahf
push
icebp
cmp
jmp
add
push
fcmovb
int3
push
cmp
xchg
out
popf
jnp
jmp
test
and
jmp
test
inc
out
push
pop
jp
popf
inc
adc
jmp
test
sbb
enter
push
loope
stc
adc
or
cmps
and
cmp
push
loopne
leave
rcl
mov
bound
je
imul
jns
push
push
jmp
push
cs
mov
pusha
pop
ret
call
sbb
gs
sbb
jmp
inc
push
push
push
in
mov
mov
inc
mov
sbb
jbe
xor
lods
retf
adc
mov
shl
aad
cdq
cmps
dec
movs
stc
out
cwde
dec
xor
jmp
mov
jne
iret
xlat
mov
and
push
mov
mov
out
jp
mov
pop
and
cmc
fs
dec
loopne
ror
test
dec
mov
out
in
call
mov
sti
ins
in
sub
push
in
es
mov
or
cmp
inc
inc
arpl
pushf
lock
ja
(bad)
jbe
xor
push
lods
mov
pop
cmp
(bad)
pop
push
int
mov
stc
jge
add
push
pop
dec
ret
mov
sub
(bad)
call
pop
dec
adc
inc
je
inc
nop
pop
dec
lock
ss
xchg
enter
lea
out
or
mov
cmp
inc
div
jp
daa
add
mov
add
jbe
imul
xchg
(bad)
and
push
add
add
out
loopne
and
sbb
mov
in
pushf
pop
je
mov
jle
ja
imul
cwde
shl
int
in
pop
mov
rcr
lods
call
push
mov
movs
ja
(bad)
stos
movs
arpl
scas
loop
lods
pop
les
sbb
or
lahf
call
xchg
jg
lds
push
sbb
arpl
sub
mov
add
bound
dec
dec
ret
inc
aaa
scas
inc
(bad)
pop
xchg
fwait
cmc
out
repz
xchg
out
or
mov
es
sub
add
in
pop
mov
mov
loop
xlat
test
mov
clc
movs
mov
pop
mov
cmp
sub
xchg
movs
(bad)
scas
imul
adc
jb
push
popf
mov
dec
mov
lahf
xor
xor
pop
xor
aam
xchg
sahf
pop
sar
js
dec
in
mov
inc
ds
inc
ds
xchg
mov
jl
ss
push
xor
push
enter
jne
sub
int
jl
cmc
and
aam
in
mov
popf
xor
xchg
or
dec
aam
push
xchg
sub
fist
ds
mov
scas
mov
adc
mov
cmp
mov
jbe
loopne
iret
ror
lea
jg
jg
pop
iret
into
jmp
push
lds
xchg
push
lock
movs
fimul
xor
xlat
std
dec
out
(bad)
mov
mov
(bad)
xlat
sbb
movs
inc
sbb
ror
cmps
add
jg
pop
ins
sub
dec
je
ret
call
jae
and
call
push
pop
out
es
aad
mov
icebp
jp
sub
lods
mov
pop
ins
inc
ins
lods
jle
cmp
clc
mov
xchg
scas
add
shl
aas
push
sub
fidivr
cmp
mov
mov
call
and
and
dec
mov
lods
jmp
call
fdivr
adc
imul
lahf
xchg
les
mov
and
or
into
sub
mov
dec
mov
dec
outs
les
pusha
adc
mov
xor
mov
adc
or
int
in
ret
push
dec
push
call
ins
jne
outs
jbe
pop
lds
lods
ins
inc
pop
mov
call
xchg
xchg
mov
dec
clc
add
push
jns
xchg
scas
mov
push
out
daa
pop
jb
push
mov
xchg
cmps
inc
sbb
push
mov
das
arpl
(bad)
lods
mov
jae
dec
jl
mov
inc
in
lock
cmp
addr16
das
adc
xlat
fistp
add
test
sub
int3
mov
pop
clc
pop
or
mov
xchg
and
push
sub
push
call
adc
push
aas
ins
sahf
retf
lds
test
jnp
scas
inc
sar
int3
cmp
fs
adc
adc
(bad)
lods
cli
ja
test
js
pop
xchg
fwait
out
inc
ficom
(bad)
or
jb
adc
(bad)
lods
mov
push
mov
jno
push
xchg
mov
sti
adc
mov
push
imul
out
daa
sbb
sbb
add
fldcw
dec
mov
fnstcw
xchg
dec
jae
test
xor
cmp
addr16
sbb
scas
mov
adc
lds
call
mov
push
pushf
ins
push
aas
inc
shl
das
pop
fisubr
xor
es
pop
call
into
xchg
clc
pop
sub
push
pusha
jmp
call
test
mov
add
add
xchg
xchg
sub
in
daa
sbb
sbb
hlt
repz
dec
bound
add
add
adc
into
adc
stos
ins
mov
mul
jmp
jbe
out
sbb
ss
aad
jnp
pop
arpl
push
lahf
shl
mov
xchg
in
jne
push
cmp
lds
dec
add
int
cmp
retf
pop
outs
outs
push
xchg
xchg
pop
push
or
add
or
sbb
(bad)
push
jns
cld
jmp
xor
dec
jno
out
jbe
mov
fsub
and
inc
sbb
xchg
scas
ins
sub
mov
inc
jne
sbb
movs
stos
imul
imul
das
sbb
enter
mov
jecxz
sbb
stos
nop
push
jb
jecxz
das
in
jp
mov
pop
xlat
pop
jno
xchg
test
jge
retf
add
ss
cmp
mov
sub
xor
add
clc
mov
daa
stos
bound
outs
out
js
bound
push
mov
or
mul
into
ror
inc
mov
xchg
pop
cwde
cmps
pop
push
push
aam
int3
pop
or
inc
sub
fwait
push
pop
or
xchg
call
rcr
inc
dec
add
sbb
lea
(bad)
retf
push
add
call
adc
sbb
xor
xor
push
jge
(bad)
jmp
scas
xchg
push
fist
push
pushf
pop
pop
cmps
xchg
mov
push
outs
inc
or
and
and
test
jp
imul
or
sahf
xchg
xchg
mov
int
inc
mov
repnz
jmp
aad
jae
sub
mov
pop
outs
sub
test
jle
pop
retf
out
ja
and
dec
mov
add
jno
pop
mov
scas
lds
imul
jmp
jg
sbb
pop
xor
cmp
mov
and
ret
add
mov
ror
mov
dec
cmp
jmp
cmp
lods
mov
sub
cmp
and
push
stc
cmps
movs
ins
scas
test
xchg
mov
cmp
aas
add
and
sub
dec
movs
idiv
pop
pop
dec
inc
adc
xchg
stos
push
hlt
ss
sti
enter
adc
jb
sub
scas
ins
pop
xchg
enter
cmp
hlt
jmp
iret
push
inc
dec
fisttp
mov
mov
ret
sti
jae
xchg
(bad)
in
loop
aam
in
(bad)
adc
sbb
inc
mov
aaa
sbb
mov
nop
sahf
movs
addr16
out
inc
add
mov
ins
aaa
sbb
mov
nop
sahf
movs
addr16
out
inc
add
mov
ins
aaa
sbb
mov
nop
sahf
movs
addr16
out
inc
add
mov
ins
aaa
sbb
mov
nop
sahf
movs
addr16
out
inc
and
stc
mov
imul
rcl
cwde
push
lea
inc
in
fwait
in
aaa
sbb
mov
add
cmp
adc
xchg
adc
or
jmp
repz
retf
push
mov
mov
push
sahf
jne
jnp
xor
nop
sahf
aas
aas
push
test
or
pop
arpl
ja
loope
nop
movs
jp
test
dec
(bad)
or
sbb
cmps
int
mov
sub
test
(bad)
jnp
inc
repnz
mov
jno
push
add
fild
jmp
mov
mov
jl
addr16
movs
or
add
add
and
je
out
mov
nop
in
ss
mov
cmp
ror
jmp
inc
imul
mov
cmp
xor
test
fiadd
sbb
or
xchg
jns
fucomi
test
xor
xor
add
mov
js
repz
inc
mov
add
push
sbb
adc
int
pop
and
cmp
jl
test
dec
inc
imul
loopne
in
xchg
daa
or
out
pop
jecxz
sub
shl
sar
mov
mov
push
dec
inc
push
pop
cmp
sbb
aaa
mov
xchg
sahf
movs
addr16
jmp
mov
xlat
fwait
jns
dec
inc
call
test
add
xor
(bad)
(bad)
and
jge
xchg
ja
iret
into
je
jae
pop
mov
sbb
mov
fnstsw
push
and
out
pop
icebp
in
pop
imul
es
mov
push
xor
mov
js
ins
xchg
pop
imul
fisubr
sbb
pushf
and
sbb
movs
sahf
cwde
stos
gs
xchg
jno
cmps
jp
jge
mov
mov
xchg
sahf
movs
outs
jbe
out
inc
or
mov
gs
sbb
aam
fwait
cmps
push
inc
push
das
sbb
popa
cmps
or
dec
inc
mov
aam
outs
and
push
mov
inc
ja
mov
add
xchg
into
ss
mov
pusha
movs
jo
(bad)
fadd
ss
out
xlat
cmp
xchg
aaa
mov
cld
push
out
or
pop
movs
fstp
repnz
mov
lock
aas
data16
sub
mov
cdq
push
jbe
rcr
dec
(bad)
scas
sar
xchg
shl
jmp
mov
int
adc
push
push
movs
inc
(bad)
mov
inc
nop
mov
pop
cmp
das
loope
xchg
mov
pushf
pusha
adc
lods
inc
pop
(bad)
lock
arpl
inc
(bad)
push
or
sbb
in
cmp
lahf
pop
and
jp
jmp
add
and
call
mov
mov
jb
jg
lods
jle
dec
ror
pop
pop
jecxz
or
add
mov
sbb
push
cdq
dec
fdivrp
xchg
and
pop
dec
push
sbb
nop
rcr
imul
out
fst
loop
jp
pop
cld
mov
mov
imul
and
outs
in
mov
es
mov
mov
or
dec
mov
push
(bad)
cmc
fnstsw
in
mov
jge
cmp
in
adc
mov
pop
pusha
push
bound
inc
dec
push
cdq
adc
fstp
xlat
push
pusha
ins
jp
js
ins
inc
pop
adc
mov
mov
cmp
loope
mov
mov
mov
and
stos
inc
adc
ins
sub
test
ret
adc
in
or
rol
jmp
mov
ja
jo
(bad)
out
(bad)
xor
ins
aaa
cmp
aas
sub
mov
nop
mov
addr16
jmp
mov
mov
sub
mov
cmp
shl
imul
mov
loope
imul
or
xlat
push
movs
mov
pop
inc
jg
mov
cwde
mov
cmps
jae
jmp
in
pop
add
fwait
mov
xor
data16
cld
mov
ins
and
pop
jge
mov
rol
mov
fcomp
outs
mov
lods
mov
adc
jno
lds
cmp
jmp
addr16
div
aaa
out
mov
mov
movs
inc
add
mov
ins
aaa
adc
adc
push
xor
bswap
fwait
mov
add
xor
ins
outs
fcom
repnz
out
xor
xor
out
jp
inc
mov
jmp
fild
call
and
and
sub
inc
pushf
iret
mov
fs
outs
jmp
pusha
inc
int
in
iret
imul
pop
cmp
fist
out
cmps
xor
cwde
test
retf
sahf
dec
push
jmp
cmp
lds
dec
retf
aam
jbe
(bad)
push
push
push
ds
imul
addr16
adc
loope
sahf
movs
addr16
out
inc
add
mov
ins
aaa
sbb
icebp
xor
mov
and
into
dec
test
pop
mov
xor
ret
pusha
jg
dec
xchg
pushf
aad
movs
xchg
jno
dec
sahf
cli
jl
adc
enter
adc
sbb
lock
repnz
jmp
dec
out
retf
mov
jge
sbb
adc
loopne
mov
adc
les
rol
and
cmp
call
dec
xchg
sub
sti
in
or
ds
loope
in
test
fucom
fcmovnb
or
cmps
mov
out
cmps
pop
mov
das
hlt
(bad)
(bad)
adc
call
xchg
shl
scas
mov
xlat
fisttp
repnz
call
pop
sar
push
enter
jns
mov
dec
add
dec
jo
pop
mov
pop
mov
sar
push
jmp
jp
retf
jae
inc
mul
add
pop
mov
pushf
sub
out
xor
cwde
mov
cmp
cmps
and
dec
push
sbb
shr
call
jns
lds
add
sub
sbb
prefetchw
mov
std
xor
inc
dec
mov
pop
cli
mov
mov
jmp
cmp
into
mov
sar
jge
jl
pop
xchg
pop
stc
mov
arpl
dec
pop
xlat
inc
adc
add
push
adc
fist
xor
mov
adc
adc
nop
push
and
mov
push
dec
sub
(bad)
pop
or
and
xchg
popa
xchg
jg
es
outs
push
out
adc
dec
imul
and
jae
push
sbb
leave
sbb
outs
dec
ss
mov
div
call
sbb
cli
mov
xor
cmp
bnd
mov
mov
cdq
outs
gs
fild
(bad)
pop
fsub
push
jecxz
mov
add
inc
lock
cmps
jae
jp
popa
xchg
xor
clc
lods
sub
(bad)
rcr
(bad)
cmp
mov
mov
out
xor
in
sbb
outs
jmp
cmp
repnz
push
xchg
mov
sbb
fbstp
stos
in
and
sti
and
xor
data16
jno
inc
ret
fnsave
stos
inc
push
add
add
mov
lods
test
test
mul
inc
inc
push
stc
retf
pop
xchg
jge
jbe
mov
or
jbe
shr
xor
sub
jne
and
mul
out
ret
xor
cmp
jl
aas
mov
outs
aas
mov
mov
seta
and
cdq
and
stos
lods
inc
cmp
out
jns
inc
aaa
das
ret
js
imul
xchg
jnp
gs
pop
add
jmp
mov
in
leave
lea
ret
add
enter
aad
add
mov
push
mov
pop
scas
nop
inc
neg
popw
and
cld
(bad)
fadd
call
nop
cmps
cmp
loop
cs
dec
aaa
pop
adc
cmp
jae
cmp
fnstcw
inc
popa
into
repz
jp
sub
jnp
cwde
inc
xor
pop
stos
mov
repz
inc
jne
ja
mov
pop
je
in
iret
lahf
rcl
cmp
aas
push
dec
add
pop
les
mov
(bad)
pop
adc
dec
out
xchg
daa
mov
jg
(bad)
cmc
rcr
add
or
idiv
mov
dec
out
fiadd
(bad)
cwde
out
jg
mov
(bad)
add
mov
ret
inc
dec
(bad)
add
inc
cmps
out
fild
or
out
sbb
add
and
jmp
xchg
mov
xchg
jo
push
scas
jmp
add
xchg
ds
mov
(bad)
push
aas
aas
inc
sbb
std
repz
cmp
pusha
xchg
xchg
test
int
fidiv
and
xchg
(bad)
ja
xor
fdiv
aas
cmps
mov
xchg
jne
mov
int3
jle
std
xchg
aad
das
inc
inc
add
pushf
push
sbb
xchg
nop
shr
xor
cdq
fiadd
inc
xlat
xchg
fild
pop
and
mov
push
in
rcr
in
aaa
inc
sub
ret
push
jmp
mov
loope
jl
add
cmp
ss
in
jmp
retf
rol
pop
aad
mov
pop
jle
mov
jbe
ins
pop
pop
dec
inc
loopne
jbe
mov
es
xchg
adc
jbe
jmp
test
out
mov
jp
out
call
rol
ret
dec
icebp
loope
and
sub
mov
push
call
inc
jmp
(bad)
mov
mul
jmp
fwait
push
sub
iret
jne
pop
jge
retf
aam
pop
out
fwait
sahf
cmp
sahf
mov
cmps
cmp
adc
out
mov
imul
test
pop
pop
aaa
mov
jp
cdq
cli
inc
clc
ret
inc
ja
jmp
stc
sbb
lods
fcomp
imul
mov
adc
dec
inc
aad
popf
ins
mov
aas
out
mov
dec
cdq
or
pop
inc
or
in
inc
test
fucomi
sbb
ret
jmp
xchg
outs
arpl
fisubr
stos
push
dec
scas
cmp
xor
sbb
mov
imul
retf
int
ror
jmp
scas
add
mov
leave
sub
cmps
mov
push
push
xor
mov
mov
stos
mov
mov
inc
fwait
cdq
sbb
loope
sub
sub
push
jo
push
outs
clc
pmovmskb
in
and
outs
loop
aaa
inc
lods
jl
je
ins
std
cli
in
into
cld
cmp
pop
outs
mov
cmp
mov
out
add
adc
cmps
xor
lods
test
cwde
xchg
(bad)
test
retf
inc
jo
dec
inc
retf
ins
mov
inc
xchg
scas
adc
aam
xchg
loope
packsswb
push
jecxz
xor
jae
pop
pand
arpl
mov
fcomp
std
std
mov
xor
cmps
stos
retf
not
sub
add
ret
push
cmp
retf
pop
(bad)
dec
shr
test
mov
ds
cmp
rcl
inc
nop
(bad)
dec
inc
mov
xor
cmps
push
rcr
mov
in
in
iret
ins
pop
pop
pop
call
fadd
js
add
mov
inc
ret
sbb
add
outs
rcl
jnp
push
fucomp
nop
fwait
mov
or
sub
ja
adc
sub
jo
and
nop
pop
cs
retf
dec
push
mov
mov
cmp
pop
pop
xor
xchg
or
ds
pop
sti
inc
leave
(bad)
out
jle
add
pop
and
jg
xchg
sub
inc
push
xchg
cli
fs
lock
jbe
not
ss
sbb
je
or
adc
fxch
adc
add
push
dec
and
loop
shl
sti
popf
popf
retf
jmp
sbb
in
pop
das
(bad)
hlt
cmp
int3
loopne
jmp
lods
add
ror
hlt
sbb
inc
jle
in
inc
inc
pop
icebp
dec
pop
and
test
idiv
ror
icebp
(bad)
lds
add
mov
imul
repnz
add
jge
lock
pop
inc
mov
aaa
cld
das
add
cli
xchg
ret
cli
mov
fwait
sbb
mov
gs
and
jl
pop
push
test
dec
pop
mov
call
fist
pop
test
and
jp
jge
xchg
int3
xor
fcmove
mov
jno
ja
push
dec
or
mov
repz
xchg
lds
shl
(bad)
push
es
push
push
int3
js
jle
push
add
out
je
xchg
or
les
xor
stos
and
push
daa
retf
cmp
push
shl
inc
frstor
adc
aaa
mov
push
call
dec
daa
or
jp
xchg
retf
(bad)
adc
jg
adc
mov
scas
push
or
sar
lock
and
fisttp
mov
ss
sti
and
pop
and
(bad)
dec
adc
ins
lods
jbe
call
mov
mov
icebp
nop
jbe
pop
loop
nop
fldenv
popf
fbstp
das
and
xchg
mov
xor
pusha
movs
rcr
jl
mov
pop
loopne
(bad)
jns
or
ror
jb
loopne
daa
dec
xor
mov
sub
jbe
ds
fistp
push
dec
test
dec
mov
hlt
stos
mov
call
(bad)
mov
dec
test
js
mov
sub
adc
inc
(bad)
jge
iret
mov
and
shl
pusha
scas
and
imul
push
push
push
jmp
mov
inc
arpl
jge
add
sub
leave
adc
dec
(bad)
mov
rcr
popa
mov
adc
mov
sub
nop
sub
cmp
push
xor
and
cld
xchg
dec
dec
addr16
cmp
fs
(bad)
iret
dec
imul
ins
and
test
aas
mov
push
sbb
lods
push
loopne
inc
xchg
jbe
jl
jnp
and
dec
je
js
mov
mov
pop
mov
(bad)
inc
fadd
loopne
xchg
int3
mov
test
fs
mov
push
mov
sub
mov
xor
add
icebp
das
cmp
xchg
cs
xlat
fldenv
int3
push
jbe
inc
dec
push
rcr
or
(bad)
stc
icebp
dec
mov
ss
nop
aaa
xor
jnp
out
aad
mov
jbe
rep
lds
ret
scas
retf
(bad)
xor
jnp
push
mov
aas
and
jecxz
lock
sub
mov
dec
hlt
repnz
push
and
lea
or
jo
mov
sti
lds
hlt
xchg
xchg
sub
movs
adc
aas
iret
aas
jmp
mov
aaa
lods
mov
xor
push
les
pop
pop
mov
movs
inc
test
xor
enter
aaa
adc
dec
jbe
and
push
adc
lds
nop
les
popa
cmp
mov
rcl
add
fcmovne
lahf
push
add
mov
sub
xchg
push
ret
xor
rcl
or
or
mov
fisub
scas
std
clc
jno
sbb
inc
cmps
mov
jmp
les
xchg
and
enter
repz
(bad)
fidivr
mov
stos
xchg
pop
mov
neg
sti
xor
add
sbb
push
cmc
mov
stc
sbb
add
fsubr
pop
(bad)
cmp
cwde
push
bound
inc
and
rcl
out
imul
iret
sub
adc
call
ds
ss
fld
jbe
not
push
mov
push
mov
xchg
mov
ss
(bad)
out
data16
pop
jne
(bad)
xor
push
jecxz
in
in
mov
mov
out
es
lods
retf
xchg
jl
rcl
jb
retf
aaa
(bad)
int3
fcmovbe
aas
inc
fwait
xor
push
repnz
in
fwait
push
out
fst
outs
clc
scas
mov
aam
fistp
mov
adc
rol
shr
jmp
push
jg
cmc
fsub
in
pop
cdq
retf
xlat
les
add
sbb
sbb
addr16
gs
and
shr
push
mov
les
or
and
daa
dec
pop
add
and
xchg
xchg
pop
in
xchg
rcr
(bad)
into
in
fs
jl
fst
out
adc
bound
call
adc
xchg
aam
mov
and
jb
mov
fcos
sbb
inc
pop
xor
inc
and
fdiv
pop
out
pop
fisubr
js
and
sub
push
call
(bad)
xchg
call
push
bnd
shr
sub
xchg
cli
push
gs
push
out
leave
mov
jmp
pop
das
jbe
cmps
and
movs
xor
addr16
pop
xchg
lods
inc
push
popa
lahf
lahf
int3
xor
aad
(bad)
jmp
mov
and
add
xor
mov
dec
jae
mov
out
nop
(bad)
stos
dec
daa
sahf
add
ins
scas
stc
fistp
pop
push
pusha
mov
pop
stc
inc
sub
jle
jmp
mov
sbb
cmp
pop
inc
fst
into
mov
add
jge
mov
sbb
mov
movs
ds
or
sbb
xor
dec
xlat
outs
cmp
mov
cmc
lods
shr
sbb
outs
fisttp
adc
mov
or
xchg
cwde
add
and
stc
imul
adc
lock
jo
inc
sub
push
lods
mov
into
fs
push
push
or
stos
out
sub
les
xchg
sub
pop
jns
nop
mov
movs
xchg
lea
push
in
test
cmc
and
push
jbe
sub
xchg
in
fld
inc
hlt
jge
icebp
cmp
inc
in
arpl
or
or
or
stos
pop
push
xor
sbb
xor
sub
xchg
lahf
ror
retf
inc
movs
xchg
sbb
bound
fisubr
inc
lahf
sbb
jg
add
mov
out
test
inc
or
je
ds
jge
and
xchg
pop
retf
adc
jmp
mov
dec
nop
fst
dec
pop
frndint
mov
add
and
mov
cmps
xchg
shr
lods
enter
movs
jmp
sbb
(bad)
aas
xor
mov
rcl
xor
lds
push
and
adc
outs
lahf
fs
scas
jne
cmc
push
sar
stos
sbb
or
cli
call
addr16
std
push
xor
outs
jns
add
mov
pop
aad
push
mov
ret
push
xor
jae
push
cwde
pop
dec
call
fistp
out
enter
cmp
mov
pop
test
pop
push
and
cmc
xor
loop
jne
pop
aam
push
mov
or
daa
(bad)
sahf
data16
pop
or
stc
sub
push
inc
dec
iret
jae
retf
bound
popf
push
ins
jg
out
hlt
lods
fisubr
mov
and
sar
fxch
test
dec
xchg
fmul
inc
imul
mov
jne
pop
add
in
aam
repz
popa
mov
push
dec
inc
cdq
test
je
inc
or
loopne
sbb
mov
adc
add
adc
sub
push
inc
js
xor
sbb
and
sub
inc
inc
call
gs
stc
and
clc
scas
rcr
and
hlt
bound
rol
(bad)
cs
jmp
xchg
je
(bad)
gs
pop
leave
hlt
mov
xor
jnp
mov
sbb
mov
add
hlt
cmp
icebp
outs
arpl
mov
push
add
ffree
nop
gs
cmc
pop
jle
add
mov
mov
fidiv
xor
js
jmp
stc
jno
xchg
cld
(bad)
int
retf
jge
in
or
inc
mov
mov
push
jmp
fstp
jge
sub
pop
or
jne
clc
adc
pop
in
cmp
(bad)
mov
sub
adc
fst
nop
ret
push
sbb
jno
mov
push
fs
mov
jl
xor
jne
and
test
movs
repnz
mov
pop
ret
lds
fisubr
idiv
sub
arpl
cld
add
lahf
xor
jge
mov
int
dec
out
or
lahf
push
and
not
push
pop
movs
pop
and
aad
fisubr
mov
mov
retf
mov
ffree
ud2
or
pop
jge
test
xchg
xchg
mov
adc
lea
call
fdiv
rol
xor
mov
adc
outs
lahf
sub
pop
mov
adc
ss
mov
sbb
mov
(bad)
outs
mov
mov
icebp
add
inc
ficomp
and
xchg
and
jmp
aaa
pop
xlat
test
rol
jmp
or
ret
cmps
add
nop
mov
fst
cmp
frstor
mov
sub
arpl
pop
ror
cmp
adc
inc
aad
sahf
jb
jnp
xchg
pop
ret
popf
fisttp
inc
fmul
popf
in
scas
aad
sub
cmps
mov
pop
(bad)
inc
mov
sbb
daa
sbb
inc
fcmovnb
and
sub
repz
nop
mov
enter
mov
js
mov
aas
scas
pop
fcom
inc
inc
jmp
iret
xchg
pop
push
jne
xor
mul
pop
cwde
mov
xchg
bound
popf
mov
cmp
(bad)
inc
data16
sub
pop
movs
cmp
repnz
fisubr
sbb
mov
cdq
sub
movs
data16
sub
sahf
pop
mov
xor
push
xor
stos
jae
and
pop
stc
inc
pop
(bad)
xlat
pop
jnp
add
int3
cmc
and
xchg
int3
mov
sbb
add
xlat
ss
xchg
scas
popf
mov
pop
jge
xchg
and
mov
jg
mov
jle
add
push
(bad)
in
inc
inc
repnz
movs
loop
jmp
push
sbb
and
lahf
out
scas
rcr
pushf
jmp
adc
out
aad
lahf
lock
sub
lods
js
in
je
shr
mov
jp
jg
push
fs
(bad)
aaa
or
cmps
mov
push
fidiv
gs
push
clc
loop
lods
adc
popa
push
push
fcmovnb
call
inc
jp
les
jle
pop
mov
test
scas
pushf
sub
cmp
aas
pop
rol
mov
test
bound
mov
call
loopne
adc
sbb
push
aam
sbb
cld
inc
mov
or
and
mov
in
pop
sbb
stos
stos
loope
retf
push
hlt
sbb
test
popf
aad
pusha
adc
fs
out
sbb
jp
xchg
inc
loope
rcl
shr
daa
jbe
and
addr16
imul
lods
mov
sub
dec
push
imul
jb
(bad)
jnp
int3
cs
out
xchg
pop
mov
adc
push
stc
xor
aaa
xor
fmul
xor
popa
sub
(bad)
dec
inc
mov
mov
dec
mov
fs
outs
daa
movs
daa
mov
fld
mov
xchg
or
sub
pop
pusha
sbb
adc
or
bound
fmul
xor
xchg
sqrtps
jo
shl
adc
sbb
jmp
push
dec
inc
mov
les
inc
mov
mov
jno
je
(bad)
mov
fdivrp
pop
mov
sbb
test
mov
imul
push
addr16
(bad)
leave
mov
dec
jge
or
add
adc
xor
mov
mov
jne
lods
mov
addr16
cli
inc
adc
mov
cld
mov
jmp
xor
out
mov
fistp
fsub
sbb
cwde
mov
lea
or
jecxz
jecxz
ja
jno
push
iret
xchg
jmp
fwait
pop
movs
xor
adc
gs
adc
shr
or
call
mov
xchg
jae
in
jae
pop
in
movs
mov
fwait
cmp
popa
aam
add
mov
loopne
movs
push
dec
pop
outs
int
mov
scas
and
push
leave
jmp
out
call
mov
cmp
or
jle
xor
je
std
sahf
mov
mov
and
cli
out
mov
dec
xchg
or
pushf
aaa
ficomp
add
addr16
nop
sub
lsl
dec
in
dec
add
mov
sbb
imul
sahf
mov
jnp
mul
imul
fsubrp
or
call
jmp
jg
addr16
out
jmp
sub
aas
mov
jns
inc
sub
sub
jb
add
or
push
adc
into
outs
adc
jnp
mov
call
enter
mov
lahf
call
daa
std
xchg
cmp
mov
cdq
fbld
xchg
pop
hlt
add
fstp
ss
mov
enter
mov
jp
dec
cmp
loop
sub
outs
cmp
outs
jb
std
cdq
lock
je
xor
jns
inc
mov
xor
inc
in
fs
pop
sbb
mov
push
push
jl
mov
das
loopne
retf
cmp
ss
inc
xchg
stc
scas
shr
hlt
adc
and
or
sbb
dec
jb
push
sbb
out
out
sub
sbb
cmp
pop
jp
stos
mov
movs
out
out
sbb
inc
jp
sbb
or
adc
cmps
stos
sub
sti
sar
sub
in
(bad)
and
sahf
mov
out
daa
mov
sub
arpl
std
es
xlat
inc
test
push
stos
jge
mov
nop
pop
adc
and
mov
jmp
jmp
shl
int3
mov
jb
inc
jne
scas
ins
clc
sbb
sahf
add
fnstenv
push
mov
pop
arpl
neg
jcxz
mov
or
jecxz
hlt
(bad)
push
mov
xchg
jmp
jecxz
nop
aam
pop
repnz
leave
popf
lods
ret
popa
dec
idiv
fadd
mov
lock
cmp
pusha
inc
xchg
xor
jg
push
ret
cmps
repz
mov
int
xchg
sub
sbb
push
pop
test
push
cdq
mov
movs
pop
pop
out
dec
pop
mov
mov
mov
xchg
inc
hlt
(bad)
dec
cmp
cmp
shl
jmp
(bad)
push
out
add
stos
inc
and
or
xor
retw
in
cmps
cs
push
and
add
jle
fs
add
push
sbb
jmp
test
mov
xor
popf
stc
arpl
push
push
fdivr
mov
mov
cmps
ficomp
push
pop
(bad)
fmulp
mov
adc
mov
retf
adc
add
pop
cmp
int3
(bad)
fidiv
aad
mov
mov
test
and
aam
dec
jl
test
dec
or
mov
dec
test
sbb
xor
(bad)
sub
cmps
sbb
adc
inc
retf
or
jbe
scas
aad
aam
add
cld
mov
xchg
mov
sar
push
out
imul
sub
in
or
sub
mov
mov
mov
popf
ret
(bad)
loopne
pushf
fs
mov
loop
mov
shl
imul
outs
mov
mov
or
shr
ins
dec
pop
retf
pop
mov
add
cmp
push
aas
(bad)
mov
repz
outs
mov
fcom
mov
mov
mov
or
fsub
clc
stos
cmps
rol
dec
sub
and
neg
xchg
push
mov
and
lea
mov
jnp
or
xchg
inc
outs
sahf
xor
ret
jne
and
sub
int3
inc
cli
clc
inc
and
movs
icebp
xchg
out
ret
loope
imul
pop
mov
loop
xchg
adc
add
out
and
adc
ret
stos
jmp
fdivr
push
cwde
stc
jnp
push
or
dec
fwait
lock
lock
aas
adc
dec
cmp
dec
out
out
(bad)
adc
mov
popf
mov
jnp
dec
stos
push
inc
pop
push
cmps
jb
cmp
imul
mov
add
cmp
lock
sub
das
(bad)
adc
mov
pop
into
and
jns
hlt
sbb
popa
sub
enter
or
int3
gs
pop
adc
mov
jge
cmp
scas
mov
loopne
xchg
es
xor
into
pop
jmp
scas
jmp
inc
test
adc
push
xor
mov
pop
or
pop
adc
das
xchg
dec
mov
out
test
sub
jmp
addr16
fld
ja
sub
nop
xor
sbb
sub
xchg
cmp
cwde
fisub
add
or
mov
or
inc
or
daa
icebp
and
inc
shr
push
cmps
enter
mov
sub
sti
mov
in
test
inc
adc
push
add
sub
sub
mov
sub
and
push
mov
imul
inc
jno
ins
jmp
push
hlt
inc
pop
push
pop
dec
fprem
inc
push
push
add
(bad)
ss
mov
mov
int3
dec
mov
cmp
lods
push
inc
gs
mov
sbb
adc
mov
cwde
and
(bad)
fcomp
cmps
dec
lock
cmps
xlat
bound
xor
cmp
pusha
cmps
sub
out
rcr
inc
mov
mov
fwait
sbb
add
ds
ret
cmps
addr16
stc
movs
jmp
xchg
gs
call
call
xchg
rol
popf
ins
test
stos
adc
and
cmp
cwde
push
pop
mov
xchg
aad
mov
xor
movs
aad
dec
add
out
inc
(bad)
xchg
add
inc
outs
not
or
lahf
dec
dec
inc
jg
adc
jne
push
mov
sub
sbb
pop
adc
sbb
xchg
fwait
push
enter
push
jge
mov
dec
dec
into
ins
sbb
sub
push
int
jecxz
mov
mov
cli
aaa
cmps
stc
pop
outs
(bad)
outs
pop
jb
test
jne
jle
sbb
scas
cmp
inc
pop
sar
mov
sbb
push
(bad)
xor
out
xchg
pop
pop
jmp
sahf
dec
adc
mov
push
ss
xor
loope
popf
cli
xchg
push
outs
xchg
retf
nop
aas
fxch
inc
mov
adc
shr
mov
push
mov
fucomip
(bad)
retf
iret
push
pop
sbb
jnp
outs
jmp
ins
stc
adc
jno
xchg
(bad)
pop
ja
mov
fmul
fiadd
jg
ja
jae
mov
push
mov
adc
xchg
xchg
mov
jno
ficomp
and
push
lds
int
jnp
mov
retf
mov
pop
rcr
fmul
retf
lea
fs
xor
fidiv
imul
add
mov
sub
hlt
enter
aas
and
mov
cmp
aam
mov
into
sbb
ins
sti
mov
leave
aaa
and
sub
(bad)
jns
mov
in
jg
jp
mov
imul
sbb
sbb
out
loopne
dec
sub
or
sbb
lods
xchg
fucomip
or
sbb
rcl
mov
mov
add
cmps
mov
push
push
pop
and
int3
mov
mov
add
dec
push
aaa
sub
retf
ins
cmps
or
inc
out
inc
stos
add
cs
sbb
dec
les
imul
retf
or
or
fist
stc
adc
dec
cdq
lahf
dec
std
cmc
push
xor
fld
scas
push
pop
jae
or
fimul
int3
lea
or
add
fcom
and
scas
xor
pop
or
pop
arpl
fistp
mov
shl
mov
test
mov
mov
(bad)
jmp
push
out
loopne
xchg
push
mov
push
in
in
jbe
jge
fld
push
inc
es
xchg
(bad)
hlt
xchg
das
pop
lock
push
ror
push
das
into
cmp
mov
jmp
adc
mov
cmps
(bad)
adc
push
stos
data16
xor
pop
cmps
dec
movs
jns
addr16
dec
mov
mov
sbb
xor
(bad)
mov
adc
shl
sahf
pop
xchg
xchg
cmp
ins
les
pop
mov
jle
adc
loope
mov
jecxz
mov
test
dec
pop
aas
sub
int3
push
pushf
adc
fstp
adc
mov
dec
aas
and
clc
shr
adc
mov
idiv
push
inc
gs
fucomi
mov
sub
pop
pusha
push
fsub
mov
gs
js
or
add
scas
lds
and
sbb
mov
retf
retf
dec
mov
inc
xchg
into
frstor
jo
lahf
ret
mov
xchg
add
xor
cmc
xchg
bnd
xor
js
je
add
js
dec
sub
ja
gs
cwde
mov
cmp
cld
jne
int3
outs
nop
frstor
mov
shl
ret
pushf
dec
fistp
daa
mov
(bad)
jmp
cmp
ret
les
mov
jne
mov
jbe
cli
mov
popa
cmp
inc
sahf
fiadd
int
sub
and
jno
mov
sbb
jno
push
clc
push
inc
or
fdivr
or
ins
sub
jns
out
jmp
data16
sub
out
bnd
daa
shl
sbb
lock
xlat
jl
push
xor
ret
mov
dec
test
lea
add
inc
out
mov
(bad)
(bad)
test
add
repnz
(bad)
cmp
inc
cmp
sub
push
rcr
test
mov
fist
dec
mov
jle
dec
pushw
mov
pop
xor
enter
fwait
imul
mov
sbb
xor
retf
bound
pop
pop
jg
and
fcmovne
js
xchg
jae
iret
dec
push
and
mov
push
pushf
sub
xor
mov
scas
imul
cmp
dec
out
mov
pop
push
push
xor
sti
pop
sub
into
and
dec
add
daa
gs
lods
scas
add
push
shr
rol
(bad)
mov
cmp
sbb
cmp
ds
rcr
adc
xor
or
sub
add
mov
or
push
inc
jle
ds
pusha
jge
pop
or
mov
test
arpl
pop
addr16
pop
inc
test
push
out
sub
mov
je
mov
or
ficom
das
pop
out
cmp
leave
push
jns
jnp
jbe
mov
jnp
mov
dec
movs
movs
mov
adc
int3
cmp
and
ficomp
pop
jmp
ins
test
xor
(bad)
pop
mov
cdq
stc
(bad)
push
ret
push
jecxz
sbb
xor
xor
out
aam
or
push
call
push
mov
loop
data16
lds
aaa
call
dec
sub
clc
in
sub
iret
inc
mov
les
inc
cmp
sahf
es
test
shl
loope
mov
xchg
inc
sbb
jmp
lods
adc
dec
out
push
jae
push
sub
mov
iret
jl
ret
daa
in
aas
lock
int3
std
or
ins
div
and
xor
(bad)
jbe
cmp
add
and
inc
std
lods
jnp
ret
mov
into
arpl
imul
adc
je
les
lods
mov
pop
push
shl
lods
and
mov
test
gs
mov
add
nop
cs
adc
or
adc
jo
cld
sahf
(bad)
mov
mov
retf
and
mov
push
rcl
mov
out
add
pop
pop
es
ja
cmp
pop
pop
rcr
sar
ins
popa
call
inc
add
sbb
add
repz
ins
sbb
das
mov
mov
sbb
(bad)
jl
mov
stc
mov
or
leave
fwait
leave
mov
leave
pop
arpl
ret
cmp
ret
pop
mov
in
ret
pop
shr
js
icebp
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
imul
and
cmp
sete
and
mov
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
sub
mov
add
mov
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
lea
mov
sub
mov
mov
call
add
mov
mov
mov
mov
mov
cmp
cmovne
mov
jmp
lea
sub
mov
call
add
lea
mov
mov
mov
add
sub
sub
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
lea
mov
mov
mov
mov
sub
mov
mov
call
add
lea
mov
mov
sub
mov
call
add
lea
mov
mov
mov
sub
sub
add
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
mov
jmp
lea
mov
mov
mov
mov
sub
mov
mov
call
add
lea
mov
mov
sub
mov
call
add
lea
mov
mov
mov
sub
add
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
jmp
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
lea
mov
mov
movzx
mov
mov
add
add
sub
mov
movzx
mov
mov
mov
add
add
mov
add
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
call
mov
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
lea
add
movzx
mov
mov
add
add
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
lea
add
movzx
mov
mov
add
add
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
cmp
sete
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
add
add
sub
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
mov
jmp
mov
jmp
mov
jmp
mov
jmp
mov
jmp
mov
jmp
data16
push
mov
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
add
pop
pop
ret
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
call
mov
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
lea
add
movzx
mov
mov
add
add
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
lea
add
movzx
mov
mov
add
add
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
jmp
int3
int3
int3
int3
int3
int3
int3
push
mov
push
push
push
sub
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
lea
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
cmp
sete
and
movzx
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
mov
cmovne
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
call
mov
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
sub
mov
call
add
mov
mov
mov
mov
sub
sub
mov
mov
mov
mov
sub
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
sub
mov
call
add
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
sub
mov
mov
call
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
jmp
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
call
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
sub
mov
mov
call
mov
mov
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
mov
mov
add
add
sub
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
add
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
mov
mov
call
mov
jmp
mov
mov
call
mov
mov
add
add
sub
mov
mov
jmp
mov
mov
mov
mov
call
sub
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
call
mov
jmp
mov
mov
sub
mov
call
add
mov
jmp
lea
pop
pop
pop
pop
ret
mov
call
mov
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
sub
mov
mov
call
add
mov
mov
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
sub
mov
mov
mov
call
add
mov
mov
mov
jmp
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
sub
mov
mov
mov
call
lea
mov
mov
mov
mov
call
mov
mov
mov
mov
call
sub
mov
mov
sub
mov
je
jmp
jmp
add
pop
ret
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
movzx
mov
mov
sub
mov
movzx
mov
mov
mov
add
add
mov
add
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
movzx
mov
mov
mov
sub
sub
mov
movzx
mov
mov
mov
add
add
mov
add
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
call
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
sub
mov
mov
mov
call
add
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
sub
mov
call
add
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
sub
mov
mov
mov
mov
mov
call
add
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
sub
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
sub
mov
mov
mov
call
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
add
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
jmp
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
add
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
add
mov
mov
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
add
mov
mov
mov
call
mov
mov
mov
jmp
mov
mov
jmp
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
jmp
mov
mov
mov
mov
sub
mov
mov
call
add
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
jmp
mov
mov
mov
mov
sub
mov
mov
call
add
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
sub
mov
call
add
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
mov
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
lea
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
add
pop
pop
pop
pop
ret
lea
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
call
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
add
mov
mov
mov
call
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
cmp
cmove
mov
jmp
mov
jmp
mov
mov
mov
mov
call
mov
mov
mov
cmp
cmove
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
call
mov
mov
mov
mov
cmp
setl
and
mov
mov
mov
sub
mov
add
mov
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
call
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
mov
mov
call
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
jmp
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
sub
add
add
mov
add
add
sub
add
sub
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
mov
mov
lea
mov
mov
mov
call
sub
mov
mov
cmp
cmovne
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
sub
add
mov
mov
add
sub
sub
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
lea
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
mov
add
sub
sub
mov
mov
sub
add
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
lea
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
jmp
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
push
push
push
and
sub
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
and
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
jmp
mov
sub
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
mov
cmp
cmovae
mov
jmp
mov
mov
mov
call
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
cmp
cmovne
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
sub
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
mov
imul
and
cmp
sete
mov
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
cmp
cmovne
mov
jmp
mov
movzx
mov
mov
mov
mov
sub
mov
movzx
mov
mov
mov
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
mov
movzx
mov
mov
mov
mov
sub
sub
mov
movzx
mov
mov
mov
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
mov
mov
sub
mov
mov
call
add
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
sub
mov
mov
call
add
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
mov
mov
add
mov
imul
and
cmp
sete
mov
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
jmp
mov
jmp
mov
mov
sub
mov
mov
mov
call
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
sub
mov
mov
call
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
sub
mov
call
add
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
call
mov
and
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
jmp
mov
mov
sub
mov
mov
mov
call
mov
mov
mov
mov
jmp
mov
mov
mov
sub
mov
mov
call
add
mov
mov
jmp
mov
mov
jmp
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
jmp
mov
mov
jmp
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
setne
mov
xor
and
mov
xor
and
xor
and
and
or
or
xor
test
cmovne
mov
jmp
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
lea
lea
mov
mov
mov
add
add
movzx
add
sub
sub
add
mov
mov
add
movzx
add
sub
sub
mov
mov
movzx
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
sub
sub
mov
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
call
call
call
call
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
jmp
mov
mov
mov
call
sub
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
call
mov
mov
mov
mov
cmp
setl
and
mov
mov
mov
sub
mov
add
mov
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
call
mov
mov
jmp
mov
add
mov
mov
mov
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
call
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
jmp
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
cmp
cmovne
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
sub
mov
mov
mov
call
add
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
add
add
mov
sub
mov
sub
add
mov
sub
add
mov
mov
sub
sub
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
sub
mov
mov
call
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
sub
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
jmp
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
call
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
add
add
mov
sub
mov
sub
add
sub
add
mov
mov
sub
add
add
mov
sub
mov
mov
mov
mov
call
add
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
sub
mov
mov
mov
call
mov
mov
jmp
push
mov
push
push
push
sub
mov
mov
lea
lea
lea
mov
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
call
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
lea
mov
mov
mov
call
mov
mov
call
lea
mov
mov
mov
movzx
mov
mov
sub
sub
mov
movzx
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
call
mov
mov
cmp
cmovne
mov
jmp
mov
mov
jmp
lea
mov
call
mov
mov
cmp
cmovne
mov
jmp
mov
lea
lea
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
sub
sub
add
shl
mov
add
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
call
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
lea
mov
call
mov
lea
lea
mov
mov
mov
mov
mov
call
lea
mov
call
mov
mov
mov
mov
call
sub
mov
mov
jmp
lea
mov
lea
mov
mov
mov
mov
mov
mov
call
mov
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
lea
mov
lea
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
mov
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
jmp
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
jmp
mov
mov
mov
call
sub
mov
add
pop
pop
pop
pop
ret
mov
call
mov
mov
jmp
lea
mov
lea
mov
mov
mov
mov
mov
mov
call
mov
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
imul
and
cmp
sete
and
mov
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
sub
mov
mov
call
add
mov
mov
mov
call
mov
call
mov
imul
sub
mov
call
add
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
mov
sub
mov
mov
call
add
mov
mov
sub
mov
call
add
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
shl
add
sub
mov
mov
mov
mov
mov
call
add
lea
mov
mov
mov
mov
sub
add
mov
mov
sub
sub
add
mov
mov
mov
mov
shl
add
mov
mov
shl
add
sub
mov
mov
mov
mov
mov
mov
call
add
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
cmp
cmove
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
sub
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
sub
mov
mov
call
add
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
shl
add
sub
mov
mov
mov
mov
call
add
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
mov
call
mov
xor
and
sub
mov
mov
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
inc
mov
mov
mov
mov
mov
mov
lea
mov
call
and
sub
mov
mov
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
neg
mov
sub
mov
mov
mov
mov
mov
mov
mov
lea
mov
call
and
sub
mov
mov
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
inc
mov
mov
mov
mov
mov
mov
lea
mov
call
mov
xor
and
sub
mov
mov
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
mov
mov
movzx
mov
mov
mov
mov
mov
movzx
mov
mov
mov
mov
mov
mov
mov
lea
mov
inc
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
mov
xor
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
call
mov
mov
xor
mov
mov
mov
div
mov
mov
mov
mov
mov
movzx
mov
mov
mov
mov
movzx
mov
mov
mov
mov
sub
sub
mov
mov
movzx
mov
mov
mov
mov
mov
mov
mov
mov
shl
add
add
mov
mov
add
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
lea
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
shl
add
sub
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
add
lea
mov
mov
mov
mov
sub
add
mov
mov
mov
shl
add
sub
mov
mov
mov
mov
mov
mov
call
add
mov
movzx
mov
mov
mov
mov
sub
mov
movzx
mov
mov
mov
mov
mov
mov
add
add
mov
add
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
movzx
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
movzx
mov
mov
mov
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
lea
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
mov
add
add
sub
mov
mov
mov
sub
mov
mov
mov
mov
call
add
sub
mov
mov
mov
call
add
mov
mov
mov
call
mov
call
mov
imul
sub
mov
call
add
mov
jmp
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
sub
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
sub
mov
mov
call
add
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
shl
add
sub
mov
mov
mov
mov
call
add
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
mov
call
sub
mov
mov
mov
and
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
inc
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
xor
and
mov
mov
lea
sub
mov
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
neg
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
and
mov
mov
lea
sub
mov
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
neg
mov
mov
sub
mov
mov
mov
mov
mov
mov
lea
mov
call
mov
xor
and
sub
mov
mov
mov
mov
mov
call
add
mov
sub
mov
mov
mov
call
add
mov
mov
mov
movzx
mov
mov
mov
mov
mov
movzx
mov
mov
mov
mov
mov
mov
mov
lea
mov
inc
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
mov
xor
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
call
mov
xor
div
mov
mov
mov
mov
mov
movzx
mov
mov
mov
mov
movzx
mov
mov
mov
mov
add
add
sub
mov
mov
movzx
mov
mov
mov
mov
mov
mov
mov
mov
shl
add
add
mov
mov
add
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
lea
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
shl
add
sub
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
add
lea
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
shl
add
sub
mov
mov
mov
mov
mov
mov
call
add
mov
movzx
mov
mov
mov
mov
sub
mov
movzx
mov
mov
mov
mov
mov
mov
add
add
mov
add
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
movzx
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
movzx
mov
mov
mov
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
sub
mov
mov
mov
call
mov
jmp
xchg
push
mov
push
push
push
and
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
lea
mov
call
sub
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
mov
jmp
mov
jmp
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
shl
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
call
shl
mov
mov
jmp
mov
mov
mov
mov
mov
add
add
sub
mov
sub
sub
mov
add
add
sub
mov
sub
mov
sub
add
sub
mov
mov
mov
call
mov
lea
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
add
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
add
sub
add
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
mov
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
sub
add
sub
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
sub
mov
add
mov
sub
mov
sub
sub
add
mov
mov
mov
mov
call
mov
mov
jmp
data16
push
mov
push
push
push
mov
call
lea
mov
lea
lea
lea
lea
mov
lea
mov
mov
mov
mov
mov
lea
mov
lea
mov
lea
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
lea
mov
mov
mov
call
lea
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
jmp
mov
mov
lea
mov
mov
mov
mov
mov
call
mov
lea
mov
lea
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
call
mov
lea
lea
add
mov
mov
mov
mov
mov
call
lea
mov
mov
movzx
mov
mov
sub
sub
mov
movzx
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
lea
lea
lea
lea
mov
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
lea
mov
mov
movzx
mov
mov
sub
sub
mov
movzx
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
lea
lea
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
mov
mov
lea
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
call
sub
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
lea
mov
mov
mov
mov
mov
call
mov
lea
mov
lea
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
call
mov
lea
lea
add
mov
mov
mov
mov
mov
call
mov
mov
mov
lea
lea
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
mov
jmp
lea
mov
mov
mov
call
sub
lea
mov
mov
movzx
mov
mov
sub
sub
mov
movzx
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
lea
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
lea
mov
mov
mov
call
sub
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
add
pop
pop
pop
pop
ret
mov
jmp
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
jmp
lea
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
mov
call
sub
mov
jmp
mov
jmp
push
inc
pop
xor
xor
and
call
mov
fcom
(bad)
and
rcl
test
mov
arpl
xor
clc
fdivr
mov
rcr
adc
pop
xor
test
push
pop
out
in
dec
xor
rcr
loop
stos
in
pop
sbb
(bad)
out
in
mov
adc
inc
mov
int3
pop
js
out
sbb
idiv
(bad)
sub
sahf
adc
fs
fstp
pop
add
mov
adc
push
or
dec
push
in
or
sahf
arpl
aad
cld
fwait
ret
rol
mov
cmp
lods
in
add
fadd
out
pop
pop
dec
inc
mov
mov
sub
sub
push
xchg
out
sbb
cwde
and
fdiv
sbb
mov
hlt
stos
and
ficom
jg
cmp
scas
mov
out
addr16
rcl
out
fwait
test
(bad)
(bad)
or
mov
or
cmp
fild
and
cmps
xchg
fsub
stos
xchg
out
out
pop
fistp
in
cs
jo
out
mov
idiv
add
dec
jp
xlat
scas
mov
js
inc
cdq
push
or
jb
ret
call
mov
je
fldcw
sahf
cli
push
js
aad
leave
or
xchg
daa
sub
mov
xor
jmp
pusha
clc
mov
adc
daa
hlt
ret
ja
xor
cmp
dec
das
je
mov
dec
cmp
div
cmp
ins
fisub
int3
ds
(bad)
in
sub
mov
pop
inc
mov
cmp
jo
imul
mov
cmc
inc
das
or
sub
mov
jg
adc
retf
call
or
inc
mov
dec
xor
lahf
(bad)
xor
out
mov
or
sub
ds
aam
or
adc
xchg
xor
push
mov
mov
mov
repz
jne
mov
xchg
test
mov
hlt
out
aad
cmp
dec
cmp
out
inc
data16
mov
in
sub
xchg
arpl
cmc
jg
or
push
addr16
(bad)
pop
mov
sub
lea
jmp
das
or
push
test
sbb
ins
adc
jnp
aas
pop
in
pop
mov
fst
mov
rol
cwde
xor
pop
xchg
out
adc
pop
xchg
imul
std
and
push
cmp
ficom
dec
in
jae
ja
pop
rcl
mov
cmp
pop
inc
ins
(bad)
data16
mov
pop
mov
hlt
dec
push
call
das
stos
loope
push
mov
lods
ins
xor
cmp
sbb
inc
(bad)
into
and
out
xor
ins
lods
cmc
cmp
mov
arpl
sub
movs
(bad)
stos
inc
inc
fsubrp
sub
sub
add
sub
outs
div
out
sbb
pop
push
mov
pop
xor
xchg
sti
mov
inc
jg
test
int
loope
sub
in
pop
mov
shr
jns
aas
hlt
mov
adc
or
jbe
dec
xchg
push
push
popf
and
and
xlat
xchg
into
or
jne
push
dec
jns
fidiv
ja
iret
cmps
push
dec
fcmovnu
push
sub
adc
jg
js
xor
push
adc
inc
or
add
(bad)
adc
cli
int3
fs
bound
int
dec
movhps
aas
cmp
sub
pop
dec
fidivr
(bad)
test
xchg
mov
mov
mov
xor
sbb
in
rol
ds
outs
adc
(bad)
xor
fcomp
or
push
sbb
push
lock
aam
adc
pop
and
fs
retf
xchg
dec
or
jge
clc
gs
cli
sub
pop
movs
clc
imul
inc
pop
lock
mov
(bad)
cmps
(bad)
fmul
retf
call
shr
mov
lahf
cmp
push
adc
cmp
pop
and
int3
hlt
push
sbb
(bad)
xor
jne
shl
push
in
test
mov
aas
bound
push
mov
call
and
in
hlt
bound
jno
xchg
movs
lds
fadd
push
sub
ss
xchg
jge
adc
mov
adc
fsub
call
and
call
(bad)
mov
mov
xchg
cmp
fiadd
scas
mov
sbb
jnp
jmp
or
adc
jae
sbb
sub
push
or
add
cld
ins
dec
dec
bnd
mov
xchg
dec
inc
dec
shl
jmp
call
(bad)
mov
xor
push
xchg
dec
(bad)
rcl
aas
test
call
iret
int3
push
jmp
sub
mov
dec
call
adc
cmp
nop
mov
push
sub
(bad)
cli
dec
call
icebp
aaa
shl
leave
pushf
pushf
sbb
popa
fwait
test
es
push
test
enter
pop
pop
scas
sub
dec
push
retf
addr16
mov
rcl
mov
nop
xor
pop
es
pop
jl
arpl
outs
in
(bad)
mov
add
jecxz
add
xchg
and
fcomip
icebp
jae
xchg
and
jns
loope
jge
jae
in
cmp
or
call
pop
jnp
pop
ret
lea
ds
(bad)
xor
arpl
sahf
cwde
imul
push
sub
xchg
sub
jmp
push
in
lds
mov
mov
cmc
xor
ss
pushf
pop
out
imul
dec
and
mov
or
mov
mov
jnp
sub
cdq
jmp
int
arpl
mov
mov
shl
dec
(bad)
pop
push
or
in
xchg
cmp
push
hlt
cmp
pop
sbb
imul
mov
xor
or
lahf
pushf
pop
(bad)
neg
or
inc
dec
pop
cs
(bad)
call
repz
push
sbb
ins
jbe
ret
jmp
add
fldpi
pop
and
out
dec
or
cwde
int
xor
pop
es
sub
adc
call
add
xor
repz
aaa
jecxz
imul
(bad)
lds
sbb
sub
test
add
or
(bad)
repnz
xor
or
fnstcw
and
outs
xor
dec
xchg
int3
stos
cmp
cmp
inc
lock
aam
test
push
mov
sub
cdq
or
sbb
inc
mov
loope
adc
push
mov
mov
xchg
dec
fdivr
add
and
sbb
or
jne
pop
mov
sbb
sahf
std
std
xor
(bad)
loopne
add
outs
js
imul
mov
popf
adc
push
shl
push
jmp
sub
je
or
sti
sbb
sbb
pop
sti
adc
push
mov
dec
and
das
adc
jg
dec
xor
repz
rol
cmps
mov
shl
dec
test
mov
fmul
xor
inc
jbe
sbb
xchg
fwait
rcr
jmp
sahf
dec
jno
inc
(bad)
inc
nop
jb
ret
shr
jbe
int
jo
out
inc
mov
outs
push
push
fnsave
lea
cdq
cmp
mov
and
xchg
ds
(bad)
mov
mov
or
pop
(bad)
stc
sbb
in
cmp
dec
fdiv
lea
add
daa
fsub
mov
leave
jae
in
fistp
pop
adc
add
punpckhdq
xor
add
or
xlat
into
xchg
mov
gs
gs
das
cld
ins
shr
mov
lahf
dec
lds
sets
shr
push
enter
mov
mov
sub
std
xchg
add
into
xchg
pop
rcl
push
mov
mov
mov
cdq
mov
xlat
fwait
push
aam
or
sub
cmps
mov
pop
stos
test
movs
cli
scas
jp
ins
in
in
sbb
push
fcom
push
out
mov
int
bnd
inc
jns
inc
retf
fmul
adc
loope
loop
repnz
and
stos
jmp
mov
clc
neg
data16
xor
mov
pop
and
pop
xchg
inc
repnz
jmp
call
imul
out
inc
xor
jg
nop
mov
push
push
sub
sar
and
mov
mov
fldenv
imul
or
mov
(bad)
jg
in
sbb
fistp
ror
lock
movs
loop
outs
shr
adc
retf
pusha
or
pop
mov
pop
mov
pop
pop
inc
push
daa
lock
and
dec
mov
xchg
rcl
inc
lods
fwait
mul
pop
test
or
push
(bad)
add
aam
or
mov
and
mov
inc
dec
dec
enter
adc
inc
cmps
add
push
pusha
inc
ins
cmp
mov
xor
outs
xor
pop
imul
cmp
jmp
cmp
in
sbb
fiadd
pop
cmc
mov
call
call
pop
sar
sbb
repz
add
iret
xor
mov
jmp
rcl
mov
in
jne
pusha
mov
les
push
sbb
dec
jmp
scas
repz
ror
gs
mov
(bad)
iret
add
fwait
inc
ins
mov
cmp
xlat
mov
push
ret
and
and
pop
mov
stos
pop
xchg
fs
add
sub
sti
push
pushf
pop
cmp
adc
aas
fisttp
add
hlt
cld
or
scas
inc
mov
cmp
fcmovbe
imul
push
ins
inc
push
and
cmp
cmp
jmp
add
test
mov
and
push
das
sbb
stos
push
fld
jns
das
mov
dec
clc
jbe
sbb
fiadd
jbe
fwait
xor
and
push
fidivr
bound
int3
dec
shr
fbld
pop
retf
(bad)
js
ret
popf
sbb
jl
icebp
jbe
(bad)
retf
retf
popf
mov
sub
dec
test
or
clc
(bad)
cmp
shl
xchg
mov
push
fcmovnu
mov
mov
icebp
inc
(bad)
fwait
jle
aad
hlt
mov
jmp
mov
xor
int3
movs
push
out
and
dec
retf
sbb
xlat
mov
cmps
pushf
fst
xor
cmp
add
or
sub
mov
pop
(bad)
dec
pop
js
ja
dec
or
inc
dec
pop
sub
push
scas
pop
neg
xor
add
sub
jae
ss
outs
dec
xchg
call
adc
pop
call
ffree
push
test
pop
pop
test
sti
pop
cld
leave
in
(bad)
(bad)
cmp
mov
fsubr
or
arpl
(bad)
cmp
sub
xor
add
push
(bad)
into
adc
xor
stos
and
mov
inc
xchg
ds
scas
or
mov
std
xchg
mov
nop
bnd
xchg
and
pushf
dec
sub
pop
ret
sbb
out
daa
xor
push
pop
inc
adc
cmps
sbb
jae
xor
mov
dec
in
int
push
in
test
stos
shl
pop
or
jno
mov
cmps
arpl
gs
in
pop
and
movs
fnstcw
dec
pop
jl
inc
retf
lahf
sub
shr
mov
inc
mov
cdq
and
jb
jge
in
inc
inc
jnp
add
pop
into
and
fs
jo
mov
in
push
not
xchg
sbb
xchg
inc
push
daa
loopne
imul
push
pop
enter
xchg
imul
or
jge
scas
pop
bound
cmp
inc
mov
pop
adc
xlat
mov
iret
aad
add
cmp
mov
pusha
xchg
retf
cmp
cmp
xchg
xchg
xchg
js
jge
outs
shl
stos
aaa
cmp
fidiv
rol
adc
mov
aaa
stc
xchg
dec
ins
mul
sahf
cmovo
xchg
mov
mov
jno
xchg
xor
or
jmp
dec
jl
adc
pusha
push
(bad)
in
xchg
popa
inc
xor
pusha
pop
pusha
mov
mov
call
and
es
mov
mov
pop
cmps
call
in
mov
imul
and
addr16
and
and
dec
pop
out
push
addr16
inc
fs
mov
retf
test
pushf
mov
aam
inc
fsubp
out
jmp
js
jb
test
enter
test
mov
out
rcl
test
push
mov
pop
mov
(bad)
and
pusha
hlt
hlt
in
pop
(bad)
mov
adc
sub
std
clc
adc
fcomp
add
mov
push
jmp
adc
repnz
fwait
adc
xchg
pop
cmp
in
or
ret
ins
adc
repz
cld
push
inc
cwde
nop
aaa
mov
clc
mov
add
imul
xchg
out
pop
popa
inc
mov
xor
jne
xchg
cmc
mov
pop
sub
push
aaa
mov
xlat
pop
pop
or
or
or
sbb
loopne
stc
dec
leave
push
stos
fimul
out
pusha
icebp
dec
xchg
int3
and
mov
sbb
xor
adc
xchg
cdq
xchg
loopne
ins
or
xchg
and
inc
mov
or
sbb
out
inc
or
repnz
cmp
jns
and
inc
fwait
mov
mov
nop
push
jmp
sub
js
nop
or
push
adc
fwait
outs
movs
lods
dec
push
pop
shl
aaa
add
js
pop
cmps
mov
mov
pushf
mov
dec
fcom
push
dec
jae
pop
inc
sar
mov
mov
movs
lods
out
and
ins
retf
imul
cmp
push
fidiv
or
mov
in
icebp
loopne
add
xchg
jmp
cmc
cmp
push
inc
in
movs
jmp
xchg
scas
xor
push
jnp
dec
jmp
and
test
div
or
mov
mov
movs
inc
or
or
clc
imul
push
pop
and
aad
dec
sub
stos
imul
sahf
sahf
adc
jnp
xor
sub
int3
xchg
pop
push
(bad)
movs
jno
scas
cs
inc
push
push
lock
add
cmp
pop
ins
adc
xchg
int3
in
sbb
mov
shl
cmps
mov
push
xchg
push
cmp
or
std
lds
mov
inc
scas
jo
scas
and
gs
iret
sbb
ja
stos
xor
or
or
lock
sub
out
stos
inc
cmps
pop
inc
inc
test
mov
dec
cmc
jle
mov
lods
pop
(bad)
xor
xlat
sar
pop
xor
lods
mov
idiv
inc
xlat
jnp
pop
fcomp
out
aaa
ja
push
xchg
sub
xchg
fbstp
jp
int3
pop
shl
rcr
outs
and
adc
imul
aam
(bad)
int
in
clc
outs
(bad)
cdq
das
xor
ins
adc
sub
fcomp
cmp
rcl
test
aad
retf
(bad)
xchg
(bad)
das
cmp
jle
adc
pop
ja
scas
mov
jne
xor
mov
dec
int
and
sub
dec
pop
clc
mov
addr16
sti
xchg
mov
adc
push
sub
sbb
ja
in
sub
pusha
cwde
add
inc
ins
mov
xor
add
sub
jle
xor
mov
gs
call
or
aas
out
add
dec
iret
(bad)
push
pop
mul
iret
mov
fst
jne
sbb
bound
jle
dec
pop
mov
push
or
stos
inc
mov
and
sub
mov
fcmovbe
or
clc
stos
adc
fist
(bad)
mov
hlt
std
add
out
popa
fnstsw
leave
mov
pushf
adc
pmulhw
sbb
inc
sbb
rol
scas
pop
bound
test
cmp
call
push
pop
add
jo
pop
fiadd
cld
dec
mov
cmc
fwait
cmp
adc
(bad)
push
int
xchg
int3
fcomp
jge
sub
sti
jne
sbb
jmp
mov
fwait
(bad)
mov
xor
mov
std
test
ror
pop
push
cwde
mov
or
pop
xchg
push
dec
dec
in
dec
clc
xchg
sub
cmp
out
call
lods
cmps
rol
push
xchg
inc
add
outs
jle
(bad)
cmp
push
sub
dec
jge
arpl
push
xchg
mov
retf
jb
out
mov
pop
sbb
adc
and
cmp
cmp
in
out
lahf
lods
mov
cmc
enter
pop
jns
cmps
add
dec
stos
or
addr16
pop
loope
cld
xor
test
out
mov
mul
mov
imul
ret
sbb
xchg
sbb
enter
and
push
add
dec
mov
and
dec
dec
lds
push
out
xor
mov
dec
xchg
int
mov
out
mov
pop
imul
mov
lea
repz
outs
cmp
cmps
push
jp
out
xchg
add
cwde
or
cmps
mov
cmp
lods
push
mov
ror
div
pushf
mov
xor
ret
push
scas
jbe
or
mov
sbb
test
hlt
shr
push
mov
cmovp
adc
repnz
mov
pop
sub
dec
stos
repz
adc
call
adc
(bad)
xchg
jp
adc
(bad)
pop
test
ds
out
xchg
jno
pop
imul
or
push
cmp
pop
jmp
out
sub
cmps
aad
call
test
outs
jge
push
pusha
cmp
pop
addr16
sbb
fmul
mov
adc
jnp
jle
std
or
lock
pop
std
dec
and
iret
(bad)
adc
jge
and
mov
lods
in
int3
push
dec
mov
sbb
scas
scas
test
pop
sbb
pop
xor
arpl
push
(bad)
test
jbe
data16
std
in
retw
test
fadd
mov
(bad)
retf
movs
lock
xchg
(bad)
cmp
popf
pop
je
pop
mov
mov
fnsave
fiadd
dec
mov
mov
lea
(bad)
mov
mov
sbb
mov
pop
(bad)
add
out
(bad)
mov
aaa
mov
nop
scas
aad
std
pushf
test
and
daa
rcr
xchg
push
cmp
cmc
gs
pop
add
loope
xchg
mov
xor
test
push
jmp
addr16
pop
in
xchg
neg
adc
mov
dec
adc
xor
clc
out
stos
(bad)
sbb
jae
(bad)
pop
nop
mov
imul
jle
mov
mov
sub
sbb
xor
xchg
aad
ret
mov
in
in
imul
push
cmp
rcr
ret
test
jmp
sub
xor
add
and
paddq
sub
and
iret
ins
adc
retf
js
repz
repz
jb
arpl
enter
ss
std
jle
loopne
mov
dec
jns
jmp
cmp
cmp
and
je
stc
fisubr
ret
call
pop
pop
add
cmp
sar
adc
(bad)
fstp
nop
cmp
push
xchg
push
out
gs
cmc
clc
ins
dec
in
pusha
push
inc
push
scas
inc
jbe
mov
sar
jae
cmp
aam
inc
mov
fadd
outs
cmps
mov
and
cmp
sbb
push
cmp
jge
xchg
jmp
sub
mov
ss
jmp
mov
imul
fwait
xchg
mov
jmp
pop
mov
cmp
fucom
or
aas
pop
cdq
dec
popa
test
pusha
outs
loop
sbb
sbb
(bad)
pop
jo
sub
retf
in
daa
mov
inc
push
lock
cmc
punpckhwd
mov
inc
add
dec
les
adc
or
std
aaa
ror
xchg
push
rol
pop
call
jb
push
mov
test
cmp
scas
mov
ins
ja
xchg
xchg
adc
jne
sbb
out
jo
pusha
rcr
ret
mov
outs
jbe
jb
xchg
lds
dec
push
xchg
adc
test
fld
push
push
enter
pop
inc
inc
xchg
aam
push
cdq
psllq
outs
mov
adc
sub
inc
fsubrp
ret
push
mov
loopne
leave
(bad)
retf
adc
stos
jmp
jge
fbstp
xchg
push
sub
mov
and
jmp
ficomp
jbe
je
lods
das
inc
shl
sbb
mov
inc
fstcw
test
fs
daa
inc
addr16
ds
dec
test
xchg
jp
lds
dec
scas
(bad)
pop
test
and
sbb
mov
push
jmp
cmps
cmp
jnp
pop
js
and
pop
dec
lods
lods
sub
scas
int
dec
ins
xlat
cmp
into
adc
sahf
lods
mov
mov
or
xchg
jns
repnz
fsubr
sub
inc
scas
es
xchg
jb
inc
scas
clc
iret
(bad)
xchg
loop
sub
test
add
cmp
mov
outs
iret
sbb
pop
daa
retf
dec
sub
fwait
sub
scas
and
xchg
push
and
or
pusha
cmps
mov
pop
sahf
or
push
fimul
mov
xchg
mov
mov
xor
in
xchg
pop
rcr
out
dec
add
lods
mov
lea
push
movs
add
sub
mov
mov
fcom
pop
push
push
mov
mov
cmp
cdq
add
pushf
cmp
add
popf
pusha
loopne
test
mov
test
movs
test
push
push
pusha
mov
mov
test
dec
xor
mov
retf
push
loope
inc
xchg
xor
in
cmc
movs
imul
xor
add
cdq
pop
fs
popa
mov
aad
ins
stc
dec
mov
jge
mov
jne
mov
call
aam
out
pop
scas
retf
jmp
mov
idiv
xchg
repnz
adc
aam
gs
data16
and
sahf
movs
rol
or
mov
mov
push
push
add
das
jmp
fldenv
lods
cli
cmp
mov
into
enter
mov
inc
js
xor
in
xchg
pop
lea
movs
jmp
push
or
addr16
cmp
ins
xchg
cmp
inc
push
mov
into
push
mov
xor
jle
outs
repnz
push
and
or
ret
outs
jns
jp
add
dec
xor
push
fmul
add
fcmovb
cld
and
out
mov
sbb
shl
ss
inc
out
add
rol
cmp
mov
popa
lods
call
push
add
push
pavgw
jae
mov
int
int
sbb
adc
sub
xchg
push
nop
mov
push
and
into
fcmovbe
call
pop
les
(bad)
stc
jmp
lahf
push
(bad)
push
jp
repz
and
sahf
pop
pop
pop
add
jns
push
pop
pop
mov
sub
mov
add
sbb
dec
mov
dec
mov
mov
dec
lds
leave
or
pushf
sbb
inc
leave
iret
push
mov
or
shr
push
xor
jmp
jns
and
repnz
cmp
mov
outs
call
cdq
add
fdivr
xchg
(bad)
mov
mov
jb
xchg
enter
push
retf
imul
enter
pop
jb
jle
imul
lock
cmps
mov
les
mov
outs
ins
mov
in
cmps
add
jbe
or
rcr
ss
jmp
rcr
repnz
cmc
(bad)
mov
sub
pop
cld
pop
das
enter
jl
movs
fisttp
fwait
dec
xchg
push
jge
mov
int
adc
popa
xlat
adc
mov
out
cmp
pop
pushf
in
inc
sahf
push
dec
std
push
and
mov
aaa
inc
pop
adc
(bad)
cmp
add
mov
or
xchg
iret
pushf
icebp
shr
outs
movs
push
inc
cld
xor
mov
or
xchg
pushf
nop
mov
lods
ins
add
mov
ud2
rcl
push
sbb
cmp
ja
and
retf
mov
bound
add
mov
sbb
dec
mov
cdq
mov
cmp
dec
mov
arpl
not
scas
out
inc
or
adc
dec
rcl
jbe
xor
(bad)
lahf
outs
rcl
fs
and
test
adc
daa
loope
sbb
jb
xor
movs
ins
por
adc
mov
push
add
stc
lods
cdq
push
mov
scas
iret
sbb
jno
jae
or
push
sbb
pop
sub
mov
(bad)
cmp
dec
sbb
adc
mov
daa
cmp
push
test
xchg
mov
ss
mov
cli
adc
add
dec
lods
sahf
movs
push
pop
test
(bad)
loopne
adc
jnp
stos
leave
mov
std
fadd
punpckhbw
xor
sub
out
sar
pop
scas
popa
cmc
hlt
push
push
add
aam
call
loop
mov
loope
inc
imul
mov
mov
fcomp
sbb
jmp
pop
sbb
mov
mov
mov
cmp
nop
adc
jle
ret
ins
mov
stc
(bad)
adc
mov
sahf
sbb
cmp
in
jo
pop
jge
jns
or
mov
xchg
fdivr
(bad)
mov
in
enter
bound
pop
push
xor
jecxz
int
scas
xchg
inc
ja
pop
test
cmp
pop
loop
fdiv
mov
xor
jge
daa
pop
aam
sbb
adc
mov
out
sbb
jle
inc
int3
pop
mov
add
leave
cdq
lea
shl
xchg
movs
xchg
xchg
imul
pop
inc
lahf
push
fnstenv
mov
cs
sub
push
shl
cmp
cmp
pop
mov
and
pop
lds
test
fwait
push
mov
imul
aad
xchg
jno
or
es
dec
mov
xchg
cmps
xor
repnz
push
adc
mov
push
push
movs
mov
ins
mov
dec
outs
outs
sbb
dec
or
xlat
cdq
pusha
ret
adc
inc
pop
leave
jmp
xor
xor
adc
sub
jecxz
mul
loop
pop
mov
pushf
adc
out
cmp
and
sub
ret
and
mov
cmp
shl
addr16
imul
xor
jmp
enter
fidiv
and
call
lods
retf
mov
add
pop
mov
mov
in
iret
inc
adc
test
retf
mov
sti
add
push
inc
push
push
(bad)
stos
and
adc
inc
mov
push
inc
jp
rcl
out
jb
icebp
sub
push
ss
out
adc
mov
mov
scas
add
daa
inc
push
xchg
fadd
push
outs
fmul
add
sbb
popf
inc
xchg
ret
ja
xchg
loope
ret
push
nop
stc
imul
sar
push
pop
pop
jmp
aaa
add
js
push
xchg
adc
fbstp
xor
lgs
xchg
adc
xchg
outs
pop
mov
call
das
or
mov
pop
xor
icebp
sub
mov
inc
fld
push
xchg
mov
pop
fiadd
cmc
xor
mov
push
stos
mov
rol
aad
dec
into
lds
sub
sti
mov
adc
cmp
outs
push
rcpps
mov
iret
enter
and
xor
lock
iret
call
cmps
loope
dec
push
arpl
xor
lock
enter
lahf
scas
cmps
repnz
nop
inc
push
popf
retf
ficom
aad
mov
push
in
push
hlt
rcr
ss
inc
stos
add
data16
hlt
adc
inc
arpl
dec
lods
jg
add
or
pushf
pop
jp
scas
xchg
sbb
jl
test
sbb
xchg
test
push
shl
adc
mov
out
xor
ins
jg
bound
push
ja
sub
loopne
rcr
dec
mov
ja
jmp
dec
adc
in
inc
and
addr16
ins
sti
shl
jl
das
xchg
sbb
nop
in
scas
push
push
mov
xor
js
xor
shr
sbb
ret
xor
sbb
dec
jnp
outs
repz
movs
ins
jbe
mov
adc
dec
mov
push
iret
xchg
jno
out
div
jmp
inc
push
add
ins
and
sbb
popa
sub
test
xor
gs
jno
movs
xlat
in
cmp
mov
mov
out
and
mov
test
sub
and
call
sti
ss
push
into
cld
mov
repnz
pop
lods
sbb
xchg
iret
sbb
xor
add
mov
fnstenv
loop
mov
imul
cmp
cmp
ret
jmp
mov
dec
lods
cmps
retf
fmul
adc
mov
inc
push
sahf
mov
xorps
or
in
jns
cmp
fs
adc
jle
mov
ror
not
dec
test
xchg
cmp
push
or
jbe
sbb
adc
sbb
ss
movs
cmp
jns
xchg
cmp
mov
mov
push
lods
jae
xor
movs
mov
lds
push
xchg
xor
scas
jp
scas
jg
stos
(bad)
popa
fdivp
es
inc
movs
retf
jo
hlt
cmps
jno
mov
in
adc
mov
pop
mov
push
into
mov
lds
and
ins
inc
movs
xlat
test
xor
jno
fs
pop
pop
push
fs
push
adc
add
sbb
sbb
out
jno
inc
push
mov
xchg
addr16
movs
pop
neg
arpl
mov
add
mov
lahf
call
inc
popf
(bad)
fwait
or
mov
pop
jl
pop
int
and
(bad)
cmps
popf
mov
dec
and
inc
fdivr
mov
mov
adc
aas
and
xchg
xchg
in
cmp
int
in
cmp
addr16
and
outs
retf
fstp
inc
push
xchg
mov
and
(bad)
and
or
movs
movs
lds
sar
dec
push
jb
xor
test
xchg
test
add
add
dec
sub
repnz
jmp
sub
jmp
inc
inc
test
bound
(bad)
and
retf
adc
mov
pop
adc
rcr
jne
pop
sub
jnp
mov
(bad)
push
fist
and
sar
jno
jns
iret
test
daa
rcr
mov
xor
inc
(bad)
fstp
mov
fstp
fwait
ins
mov
push
cmp
jns
aam
and
push
bound
xchg
in
sub
push
or
and
daa
fsubrp
aad
jae
pop
das
(bad)
stc
jne
ror
test
push
push
lock
inc
imul
mov
cmp
mov
jg
jle
les
mov
cmp
not
out
mov
out
dec
iret
arpl
or
push
jecxz
sub
dec
push
mov
arpl
pop
enter
pop
stos
jbe
pop
dec
adc
retf
xor
pusha
js
and
movsx
popf
sub
mov
mov
fisub
fld
fidiv
xchg
inc
call
cmp
xlat
push
into
rol
imul
mov
bound
and
dec
mov
dec
sub
pop
in
dec
data16
or
movs
pop
nop
pop
js
lds
cwde
add
stc
jmp
inc
pop
in
jg
xor
sbb
sbb
ja
fcmovbe
sahf
lea
aad
adc
mov
aaa
popf
sub
loop
sbb
mov
sar
xor
xchg
cmp
cmp
cmc
add
mov
sub
sbb
lahf
xor
mov
loop
and
pop
ja
in
out
and
adc
ret
mov
cs
ffreep
xchg
fmul
les
scas
jo
aaa
xchg
jmp
ins
jle
test
inc
sub
fcmovb
stc
mov
stos
imul
jg
popa
ins
cmp
dec
mov
inc
jnp
mov
add
stos
jne
mov
pop
pop
mov
mov
mov
lods
inc
repnz
cdq
xchg
cs
sbb
cmp
aaa
daa
aas
daa
leave
cwde
dec
push
lahf
enter
adc
lods
sbb
add
jae
jp
mov
mov
mov
inc
in
sbb
les
add
pop
js
cmps
mov
sbb
fs
out
sar
mov
jp
inc
aas
sahf
fisttp
stos
mov
stc
cmp
popf
rcr
push
jno
pop
rol
adc
mov
(bad)
sbb
ret
outs
push
push
fstp
(bad)
not
bound
stos
add
lods
scas
sbb
jmp
dec
cmp
xor
mov
and
mov
add
aaa
sub
xlat
lea
neg
pop
ficom
xor
inc
out
call
cmp
fs
mov
inc
mov
adc
sbb
or
out
xchg
mov
mov
std
jae
(bad)
aas
sbb
ins
push
fist
mov
dec
div
adc
add
mov
lahf
push
xchg
adc
xchg
jae
jne
mov
mov
mov
or
imul
mov
in
jno
or
sbb
sub
into
pop
inc
(bad)
dec
test
dec
leave
inc
xchg
lods
mov
das
repnz
retf
jae
dec
in
jno
stos
xchg
push
push
and
adc
aam
std
lea
xchg
mov
test
mov
div
sbb
popa
outs
cmc
inc
push
fisttp
and
(bad)
xchg
dec
and
sti
gs
ins
aam
pusha
fdivp
pop
out
xchg
icebp
push
add
push
jmp
std
das
cmp
or
clc
mul
mov
jl
je
aas
jle
les
out
sub
hlt
es
sub
out
cli
cmp
clc
push
enter
pinsrw
xchg
xchg
jns
cmps
call
shr
mov
sub
mov
push
or
shl
xchg
mov
and
test
mov
adc
sbb
dec
fiadd
cmps
or
in
jnp
or
(bad)
pop
je
mov
sub
in
repz
les
and
dec
cmp
push
inc
(bad)
fisttp
pop
mov
jno
mov
pop
mov
add
sbb
jecxz
sub
sti
xlat
(bad)
jmp
jne
enter
pushf
or
xor
inc
inc
daa
inc
sbb
add
pushf
enter
dec
sub
icebp
inc
pop
dec
enter
sar
and
popa
pop
scas
aaa
inc
add
aad
xchg
jl
push
retf
scas
cli
mov
and
ins
jb
(bad)
jmp
outs
movs
loopne
jo
jecxz
int
sbb
mov
aad
fs
lahf
fwait
or
dec
push
ret
add
js
sti
jne
jle
bsr
xor
inc
fnstcw
out
adc
and
xchg
sbb
loop
sbb
dec
push
jp
fxch
dec
mov
mov
push
jno
retf
pop
pop
cmp
pop
pop
cwde
adc
mov
into
mov
ret
test
lock
lods
aad
pop
jne
stos
add
mov
jbe
cmc
sbb
pop
into
push
cmp
sbb
cli
add
xor
pop
clc
iret
in
cmp
fist
xchg
push
stos
and
pushf
clc
mov
gs
or
sbb
sbb
aas
imul
hlt
inc
jl
sub
daa
pop
dec
jns
sub
in
adc
add
mov
cdq
cmp
rcl
mov
push
test
mov
std
xchg
cmp
adc
outs
mov
fdivr
mov
jg
cmps
cmc
pop
jge
imul
fs
push
repnz
cmp
mov
or
movs
jecxz
mov
mov
pop
out
mov
retf
add
enter
jl
out
(bad)
sti
ins
int3
ret
out
add
in
jb
icebp
loop
push
adc
imul
fs
in
stos
dec
push
rol
adc
int
in
mov
mov
pop
(bad)
jmp
mov
pop
in
shl
enter
and
ja
pop
adc
or
(bad)
(bad)
push
ret
mov
movs
add
not
jno
jmp
xor
fadd
test
movs
jbe
retf
adc
ins
sub
in
cmc
das
ins
sub
cmp
icebp
cmp
cmp
lods
popf
sbb
(bad)
std
mov
sub
stos
stos
ja
mov
xor
mov
mov
or
out
sbb
sbb
and
sahf
jae
xor
push
stc
jecxz
(bad)
pop
dec
imul
cmps
(bad)
dec
loopne
scas
fbstp
adc
xlat
loop
dec
ins
jecxz
adc
je
mov
pop
sub
xor
cmc
jle
mov
sub
xchg
js
fsub
call
mov
cmps
inc
fdivr
cs
cmp
push
bound
dec
fcomp
daa
push
or
xor
or
push
ins
and
mov
push
inc
jno
inc
data16
inc
xor
imul
push
dec
xor
push
push
cmp
mov
xor
add
push
push
jge
jge
addr16
xor
xor
add
inc
bound
in
jg
push
(bad)
mov
ss
nop
(bad)
aas
imul
fwait
addr16
dec
fsubp
jecxz
add
rcl
icebp
adc
mov
pop
lods
out
add
loope
pop
mov
iret
jno
je
mov
sbb
pop
xlat
mov
pop
inc
jg
popf
adc
sbb
(bad)
cmp
in
mov
loop
or
and
pop
cmp
out
test
pushf
adc
mov
add
fwait
bound
movs
repz
inc
adc
jbe
int
clc
pop
lds
fdivr
jae
cs
iret
push
ins
hlt
call
add
add
push
xor
arpl
cmps
std
mov
jae
xchg
repz
ins
dec
(bad)
add
xlat
je
popa
ds
fs
cmp
cwde
addr16
cmps
xor
aad
fldenv
inc
repnz
push
mov
ins
sbb
jp
sar
pop
mov
lods
inc
ins
ds
es
test
dec
outs
daa
pop
cmp
inc
pop
icebp
loop
adc
dec
mov
int
adc
jl
mov
inc
mov
dec
lahf
repz
push
add
mov
(bad)
ins
std
out
aad
ins
rcr
dec
inc
add
int
or
ins
fiadd
ror
push
xchg
mov
or
inc
pop
loope
popf
retf
mov
ret
add
mov
adc
push
call
in
nop
je
dec
test
cmp
xchg
dec
or
stos
sbb
je
out
mov
inc
outs
stc
cmp
cmp
out
push
push
div
push
sub
mov
hlt
mov
icebp
in
(bad)
imul
scas
or
popa
sub
stos
std
xor
jae
outs
push
push
sti
call
mov
aas
aas
xchg
sbb
adc
mov
or
test
fldenv
test
test
lds
cmp
data16
fadd
or
(bad)
jbe
xor
cdq
adc
and
cwde
adc
add
lds
(bad)
mov
icebp
sbb
jecxz
(bad)
(bad)
cmps
xchg
cmp
dec
ins
call
dec
push
clc
inc
mov
(bad)
add
inc
mov
test
jo
aam
test
pushf
ror
popa
inc
js
(bad)
cmp
call
sahf
mov
pop
neg
stos
add
xchg
dec
movs
fld
(bad)
push
add
jnp
ret
aaa
aaa
fdiv
sub
push
lock
iret
pop
test
push
pop
retf
pop
adc
cmp
fiadd
popa
cmps
ins
outs
les
movs
shr
mov
js
jnp
scas
(bad)
inc
mov
cmp
lods
and
pop
inc
scas
mov
ret
inc
xchg
icebp
outs
es
mov
stos
jl
call
pop
sbb
pop
sahf
jo
adc
jo
sbb
sub
scas
xor
mov
xor
(bad)
adc
fcmovu
mov
sar
mov
shr
aas
cmp
or
mov
out
stos
dec
dec
mov
popf
stos
in
sbb
out
cmp
es
loopne
mov
(bad)
cld
dec
mov
dec
dec
push
lahf
addr16
mov
mov
mov
cmc
push
push
fs
dec
repnz
mov
imul
fs
test
shl
mov
pop
int
mov
int3
and
ficom
fisubr
inc
pop
pop
adc
imul
sub
push
into
or
pop
jne
mov
int3
test
push
out
pop
cdq
pop
sbb
fild
add
xor
retf
ror
or
loop
cdq
add
test
aas
imul
in
mov
pop
imul
mov
push
inc
aaa
pop
cwde
pop
(bad)
sbb
jne
push
cmp
aas
xchg
jmp
sub
inc
mov
data16
jnp
inc
xor
sahf
jp
pop
mov
pop
add
xor
jae
jo
(bad)
xchg
add
es
fs
mov
cld
mov
push
fld
adc
cmps
test
fwait
mov
pop
aad
inc
je
in
pop
mov
(bad)
pop
call
cld
dec
mov
cmp
test
mov
std
stc
div
jb
test
rcl
sbb
xchg
and
imul
jmp
daa
(bad)
lahf
mov
add
or
mov
jb
aam
mov
in
cmps
jae
add
(bad)
mov
dec
push
(bad)
int
add
ins
int3
jle
sbb
cmp
stos
cvtps2pd
mov
pop
push
sbb
je
js
inc
cmp
retf
cmps
shr
fucompp
mov
inc
pusha
into
jmp
push
jl
in
lock
xor
or
mov
push
int3
scas
lea
or
clc
push
ror
ret
add
mov
mov
rcr
cmp
and
adc
mov
xchg
cmp
fisttp
aad
sar
ret
mov
and
dec
std
xchg
mov
sub
(bad)
push
lods
nop
xor
bound
(bad)
fldenv
cld
dec
test
pop
repz
inc
outs
fbstp
inc
xor
loope
sbb
mov
jne
sbb
mov
mov
pop
dec
push
mov
test
cmc
inc
xchg
lea
addr16
push
add
inc
rcl
loopne
in
inc
(bad)
jg
cmps
pop
inc
dec
fidivr
sbb
pop
mov
test
cmp
cmp
mov
(bad)
out
xchg
xchg
adc
es
sar
jns
dec
add
test
ins
mov
push
push
call
sbb
mov
rol
sahf
sub
and
inc
jbe
inc
jbe
icebp
and
jp
nop
ss
pop
jp
leave
or
xchg
bound
aaa
test
or
add
out
cmp
add
hlt
sahf
xor
xor
mov
int3
mov
xchg
xor
fwait
je
sbb
mov
scas
test
inc
pushf
jnp
cmps
add
push
xchg
jecxz
in
and
rol
push
ins
nop
fst
in
daa
popa
jae
or
add
add
mov
mov
(bad)
and
mov
pusha
sbb
mov
xor
jno
mov
push
dec
mov
sub
es
fcomp
or
inc
aas
repz
mov
and
in
ror
aad
(bad)
or
out
xchg
fbld
jg
imul
rcr
pop
fsub
sub
jbe
aam
dec
xchg
or
dec
pop
pusha
jno
and
retf
out
hlt
jae
dec
xchg
xchg
sahf
cli
push
mov
rcr
arpl
pop
cs
lods
dec
dec
neg
cmp
shr
jmp
dec
(bad)
out
mov
cmp
cmp
push
adc
pushf
mov
mov
xor
pop
inc
sbb
push
mov
mov
lahf
movs
jns
cmp
cdq
and
and
aam
mov
movs
(bad)
cmps
hlt
rcr
ja
xor
and
stos
sbb
add
leave
xchg
ins
cmp
rol
mov
sbb
movs
bound
fbld
mov
and
ins
sub
out
mov
cmp
ret
test
pop
fucomp
pop
aas
movs
call
in
mov
add
mov
inc
outs
shr
nop
icebp
fstp
adc
sbb
in
jb
push
sub
imul
je
xchg
dec
and
ss
and
inc
xchg
push
imul
shl
rol
mov
scas
test
jo
pusha
mov
xchg
call
jge
loopne
out
xchg
inc
clc
fcomp
stos
xor
hlt
jnp
push
inc
sahf
jl
and
xor
imul
adc
ins
test
out
xchg
sub
jge
xchg
aad
sub
clc
mov
daa
sub
jo
jae
mov
mov
pop
mov
loope
and
in
shl
push
mov
add
sbb
jmp
fisttp
dec
lods
(bad)
adc
mov
jmp
popa
pop
ficom
xchg
outs
ss
imul
outs
fs
ja
fucom
(bad)
jmp
sbb
imul
popf
lahf
cld
jnp
jbe
push
pop
cmc
adc
xchg
sub
jo
stos
sbb
(bad)
(bad)
(bad)
fisttp
cmps
add
idiv
mov
sub
sbb
pop
xlat
sub
data16
shr
jmp
jmp
repnz
in
mov
leave
or
push
out
nop
inc
lds
lods
dec
push
pop
push
push
add
sbb
cmp
stos
adc
fwait
ja
int3
cmps
leave
sub
pop
jl
shl
movs
push
sub
aaa
add
mov
imul
daa
int
sub
adc
sub
sbb
jne
dec
mov
sar
push
jmp
add
xchg
pusha
or
inc
pop
ins
jmp
nop
sahf
add
loopne
outs
(bad)
cmp
loopne
jge
jae
sub
xor
jo
lds
popf
sub
out
shl
and
cli
lea
adc
sbb
mov
gs
mov
repz
into
and
loopne
loope
test
in
push
pop
test
jb
js
xchg
not
fwait
shr
push
gs
aaa
movs
dec
(bad)
fbld
fisub
jne
inc
fild
test
pop
cmps
mov
and
mov
out
test
hlt
sub
pop
fs
clc
stos
inc
and
pop
dec
iret
inc
popa
mov
daa
jle
rcl
xor
loop
and
or
pop
pop
rcr
pushf
in
inc
retf
in
jecxz
retf
add
leave
sti
movs
iret
movs
sub
and
xor
punpcklbw
aaa
mov
(bad)
cmc
outs
test
ret
jge
add
xlat
call
aaa
ds
pop
ss
dec
cli
ss
cmps
jae
ror
add
mov
dec
mov
cmp
mov
add
cmp
lods
sbb
push
xor
int
and
and
jae
push
ja
dec
cmps
out
hlt
cmp
inc
ss
mov
imul
xor
adc
cmp
gs
push
cwde
cmps
daa
cmp
aas
loopne
adc
mov
sahf
aas
or
push
retf
and
sbb
inc
retf
push
stos
jmp
jg
ins
shl
pop
pop
jb
dec
shl
fbstp
dec
lock
push
outs
or
aas
out
aas
jnp
and
jge
lds
call
mov
jmp
sbb
lock
aam
mov
inc
cmp
into
mov
push
mov
(bad)
xor
or
adc
ds
cmps
jge
jmp
int
xchg
(bad)
sti
les
push
sbb
pop
stos
(bad)
stos
xchg
adc
or
add
sar
cmps
jl
push
nop
xlat
ins
cmp
inc
xchg
sub
scas
iret
mov
pop
pop
push
gs
mov
fiadd
shl
and
ja
icebp
popa
xchg
test
lea
push
cmps
jb
or
and
aad
fwait
data16
mov
ins
xchg
cmp
pusha
ja
mul
daa
cmp
loop
sub
mov
and
push
push
cmp
or
xchg
stc
fisub
push
pop
mov
inc
mov
pop
xor
stc
test
cmp
sbb
pop
gs
jl
and
mov
dec
sbb
dec
retf
test
or
cli
outs
push
pushf
setae
(bad)
pusha
jmp
(bad)
sub
or
ins
add
ss
xor
and
push
mov
mov
imul
mov
outs
js
mov
mov
mov
sbb
mov
addr16
outs
int
dec
loopne
fsubr
inc
sbb
mov
inc
movs
xor
mov
sbb
jns
inc
rol
cmp
mov
add
cli
xlat
dec
sbb
cmp
in
ja
jns
dec
mov
adc
pushf
daa
dec
sbb
in
aaa
inc
cmp
enter
mov
push
mov
ja
jno
icebp
addr16
push
(bad)
mov
pop
leave
jge
les
lods
cmps
jmp
jle
inc
jge
bound
scas
aas
inc
pop
inc
pop
adc
and
imul
and
addr16
movs
popa
inc
jp
shl
mov
(bad)
and
mov
push
pop
add
(bad)
fdivr
(bad)
cwde
jl
test
popf
cmp
mov
loope
idiv
fistp
xchg
cdq
pop
xchg
jl
je
jbe
mov
fdiv
sub
in
mov
jo
xlat
add
mov
inc
jae
loopne
aas
jmp
cdq
cwde
lea
gs
sub
sbb
cld
cmp
mov
dec
(bad)
ficom
cmc
pop
dec
stos
test
call
jp
inc
mov
inc
dec
add
mov
cmp
lahf
int3
push
addr16
push
pop
fmulp
xchg
xchg
lahf
sar
scas
inc
in
xchg
test
inc
dec
aam
rcr
pop
not
sahf
dec
das
mov
mov
stos
xchg
loopne
pop
dec
icebp
lock
mov
ror
mov
add
test
fwait
call
pop
push
xchg
pop
fld
cmp
mov
jl
xlat
sbb
scas
sub
mov
es
add
movs
int
jns
out
loope
push
test
shr
mov
inc
ins
add
pop
or
sbb
mov
call
add
xchg
scas
mov
cld
cmp
cmc
xchg
dec
int3
ror
popa
inc
jmp
jl
jo
stos
(bad)
cmp
pushf
cmp
dec
add
mov
xchg
clc
inc
(bad)
mov
and
movs
pusha
xor
push
(bad)
adc
clc
stos
pushf
jb
shl
mov
add
fist
fadd
xchg
jae
mov
shl
aaa
scas
nop
int
clc
cmps
call
int
retf
adc
mov
xlat
retf
dec
push
and
inc
pop
loope
jne
pop
xor
fwait
push
in
jns
test
mov
imul
adc
rcr
imul
mov
xchg
sahf
and
fbstp
imul
js
add
xchg
jbe
xchg
add
sbb
jno
adc
pop
xchg
lods
pop
sbb
nop
or
aam
mov
shr
inc
stos
pop
or
sar
cmps
ja
mov
adc
xor
dec
xor
cdq
(bad)
cwde
adc
sti
cmps
dec
pop
or
ins
fdiv
add
fwait
sbb
arpl
(bad)
(bad)
jne
push
pop
sub
stos
jns
sub
inc
or
repz
jl
mov
mov
adc
repz
(bad)
xchg
push
or
retf
mov
mov
std
cs
mov
stc
push
test
sti
xor
cmp
adc
add
inc
popf
retf
push
jne
test
popf
ds
adc
fisttp
adc
pusha
or
cmc
adc
cmps
call
xchg
ret
and
popf
out
stos
sub
das
push
int3
jnp
shr
xlat
sti
or
adc
or
cwde
test
add
sahf
push
ins
cmp
lahf
fld
xor
rol
push
in
sub
sahf
pop
ror
xor
inc
and
rcl
dec
dec
sbb
enter
dec
push
xor
sbb
mov
ins
dec
mov
dec
mov
dec
xchg
jae
sub
push
ins
pop
das
das
sti
call
enter
cmp
loop
fist
iret
or
ins
(bad)
mov
or
arpl
jge
dec
sub
fstp
rcr
js
xchg
repz
adc
scas
sbb
sahf
cmps
ret
xchg
fdivr
sub
adc
das
adc
jg
(bad)
cmps
out
mov
push
jo
inc
fisttp
mov
into
mov
cli
or
jmp
rcr
cmpps
movs
cld
dec
repz
jne
mov
adc
aam
mov
bound
sbb
xor
dec
mov
cmp
je
popf
sti
xchg
or
mov
(bad)
les
gs
xchg
daa
or
mov
imul
or
pop
repnz
pop
sbb
xchg
mov
xor
or
mov
aad
ficom
cmp
pop
(bad)
in
loopne
in
xor
xchg
movs
and
adc
push
cmps
xor
push
push
pop
adc
xchg
jecxz
int3
mov
retf
and
inc
pop
sbb
enter
mov
sbb
sbb
vpcmpgtw
cld
cld
repz
movs
or
cli
xchg
mov
mov
xchg
cwde
sahf
adc
and
or
dec
sbb
pop
addr16
stos
push
mov
xor
pop
mov
fwait
mov
add
cmc
leave
inc
push
pusha
xlat
sbb
outs
adc
jae
inc
add
push
int
mov
mov
ds
mov
shl
nop
test
sub
in
sub
pop
push
(bad)
rol
loope
and
mov
jae
jge
pop
mov
and
les
add
or
pop
mov
out
(bad)
mov
clc
pushf
fldenv
jge
test
pop
jmp
jnp
mov
or
aad
inc
sbb
xchg
mov
xor
dec
imul
std
icebp
jne
lds
jbe
ret
mov
dec
pop
imul
ins
jmp
lods
dec
and
mov
pop
xor
int
and
xor
lahf
push
sahf
mov
add
xlat
mov
rcl
mov
(bad)
(bad)
mov
arpl
(bad)
bound
(bad)
jmp
inc
dec
aaa
adc
pop
xor
pop
adc
mov
sahf
mov
mov
or
hlt
mov
jmp
(bad)
jb
ret
mov
or
jecxz
xchg
fild
das
ficomp
mov
les
mov
push
sahf
mov
mov
and
leave
pop
mov
push
leave
cli
pushf
or
xchg
retf
dec
mov
mov
push
shl
popa
mov
inc
lds
fistp
sbb
adc
xor
ret
test
mov
ret
jne
and
pop
inc
mov
and
stos
sub
pop
mov
imul
cmp
in
cdq
cmps
mov
cdq
mov
pop
mov
jmp
mov
arpl
or
pusha
outs
fisubr
mov
in
adc
movs
pop
fld
xchg
(bad)
cli
imul
jae
pop
fs
fstp
add
push
xor
mov
shl
jo
mov
in
popa
mov
fxch
dec
or
dec
fwait
add
pop
mov
mov
or
add
mov
mov
sti
inc
adc
imul
loop
movs
mov
add
mov
push
scas
cmp
ret
sbb
xor
test
sub
dec
lock
mov
mov
cdq
leave
movs
cs
fisub
cmp
xchg
in
pop
call
outs
outs
adc
jne
fist
or
mov
dec
mov
out
mov
fisttp
mov
fsubr
ins
add
sub
sar
inc
shr
movs
dec
fimul
adc
jne
xchg
in
scas
mov
pop
lods
bound
shl
icebp
or
adc
aad
ret
sbb
(bad)
lock
dec
mov
xchg
lahf
fdivr
jp
jnp
mov
(bad)
sub
pop
nop
push
add
xchg
dec
sub
les
jecxz
dec
ror
imul
lods
jl
loope
aas
je
mov
test
aaa
or
mov
mov
xor
xlat
push
or
fistp
nop
in
out
scas
lods
xor
mov
xor
jne
xor
mov
xchg
xor
mov
fild
(bad)
imul
push
test
movs
imul
into
inc
dec
lahf
scas
push
cmp
or
(bad)
cld
(bad)
out
pop
or
jmp
xor
add
(bad)
in
pop
sub
fs
sub
mov
or
int
or
mov
in
data16
pop
jle
xlat
nop
(bad)
out
or
inc
sbb
or
add
ja
sar
mov
out
mov
add
jecxz
push
dec
ds
pushf
push
cmp
xor
jge
cmps
enter
xchg
inc
imul
in
dec
mov
popa
and
jmp
xchg
pop
lds
leave
push
mov
retf
push
popf
mul
inc
stos
sbb
adc
popa
mov
cmp
lods
xchg
mov
mov
sti
retf
xor
pop
xchg
push
sub
rcr
retf
push
pop
jge
cmp
pop
shr
rcl
push
sbb
and
enter
jmp
sub
or
and
pop
xor
or
or
xchg
and
shl
mov
or
out
push
adc
push
jns
out
dec
add
jae
cdq
mov
cli
not
clc
arpl
xchg
(bad)
push
sbb
jecxz
inc
test
xchg
cdq
mov
popf
stos
mov
or
inc
ret
cmp
jmp
inc
xchg
add
fld
neg
xor
cmp
xchg
(bad)
in
adc
cmp
push
das
adc
ss
sub
std
js
xchg
lods
test
lds
inc
mov
xchg
retf
add
push
push
outs
daa
push
add
push
xor
jmp
or
test
adc
sbb
cmp
cwde
push
push
cmp
inc
retf
loope
dec
imul
cmp
jae
mov
push
mov
fld
lds
out
xor
pusha
ins
bound
les
in
xor
rcl
jp
mov
mov
jo
mov
push
(bad)
sar
mov
add
add
add
jae
dec
popf
(bad)
ja
sbb
(bad)
cdq
cwde
test
test
xor
push
ret
rcl
fimul
push
jae
add
mov
cmp
dec
imul
push
inc
xor
in
add
fisub
call
cmp
adc
push
jp
add
xor
jg
in
shr
push
fild
cmp
out
push
xor
(bad)
add
mov
sbb
int
fld
mov
inc
dec
enter
mov
cmps
sub
fs
jbe
cld
pop
mov
mov
push
mov
popf
pop
sbb
or
stos
movs
mov
pop
and
mov
pop
aad
nop
and
in
cmp
je
or
loope
cmp
dec
dec
scas
mov
ret
bound
(bad)
push
inc
mov
cwde
loope
jnp
pop
cmp
stos
js
adc
lock
aad
mov
lahf
je
push
lea
cs
dec
sbb
das
test
mov
adc
inc
lods
and
cmp
mov
mov
xor
adc
mov
jne
or
jne
add
sbb
sbb
test
jne
fstp
push
lods
mov
and
mov
dec
outs
and
inc
xor
mov
movs
mov
mov
and
adc
shl
pop
push
movs
test
mov
add
mov
ret
lahf
test
jo
jle
push
jo
dec
pusha
mov
das
aas
in
jno
pop
inc
pop
and
push
mov
out
mov
js
inc
cmps
fadd
mov
push
fstp
int
out
icebp
xchg
dec
jne
jne
jae
inc
push
pop
aam
xor
mov
cmc
pcmpeqd
test
jno
push
or
rsm
je
mov
mov
mov
add
repz
nop
fcomi
add
int3
jne
push
rcl
ret
enter
sar
pop
push
or
cmc
mov
jle
adc
bound
hlt
add
pop
sbb
stos
sub
mov
popf
aam
add
pop
xchg
sbb
jno
(bad)
pop
(bad)
push
xchg
xchg
inc
aas
mov
cli
push
addr16
stc
or
loope
fwait
aad
mov
adc
enter
lock
aaa
jb
ins
push
cmp
ja
ss
enter
jp
outs
dec
xchg
int
sti
ret
push
lea
sbb
mov
pushf
fxch
ja
addr16
pop
mov
sahf
nop
jecxz
arpl
shl
sar
push
jno
jmp
sbb
mov
xor
pop
scas
cwde
pop
or
imul
xchg
mov
lods
mov
rcl
sbb
enter
add
dec
pushf
xchg
fst
cld
xor
test
and
jbe
lahf
(bad)
sub
lods
jno
mov
in
lds
inc
xor
clc
je
rcr
xchg
(bad)
mov
pop
pop
sahf
mov
adc
push
cld
and
pusha
xchg
add
fstp
add
scas
test
lahf
(bad)
jbe
div
dec
mov
lock
xor
out
fiadd
or
cmps
add
mov
xor
mov
out
das
sar
cmp
mov
mov
je
lock
repz
sti
add
in
xchg
mov
(bad)
lahf
std
xlat
test
fcomp
cmp
pop
nop
push
pusha
fist
test
je
lock
les
push
jae
or
(bad)
in
mov
sub
ret
push
bound
xchg
sbb
xlat
mov
(bad)
into
fstp
and
mov
test
mov
ret
xor
mov
inc
xchg
out
push
ret
in
sbb
xchg
cmp
push
mov
loop
mov
inc
mov
add
js
lods
jmp
popa
sbb
cmc
mov
lods
shr
hlt
add
imul
mov
popf
sbb
lfs
(bad)
xchg
ins
sub
scas
std
fsubr
nop
movs
push
movs
pop
jmp
jb
adc
sahf
jecxz
cs
add
mul
les
ret
outs
ins
inc
retf
xor
inc
sub
clc
dec
xchg
and
push
leave
pop
dec
in
imul
dec
xor
add
ds
out
sub
sub
push
(bad)
pop
mov
xor
push
std
xor
mov
or
sti
mov
or
cmp
or
stos
lock
pop
dec
out
(bad)
lea
xchg
cmp
repz
cld
fnstenv
dec
inc
xchg
jp
xchg
sub
idiv
lock
adc
xchg
xor
and
sbb
sbb
das
sub
js
(bad)
ins
jmp
icebp
push
add
mov
ins
stos
pop
mov
pushf
mov
(bad)
clc
je
or
shl
shl
xchg
popf
cmp
and
sti
or
mov
loop
ins
xor
jns
xchg
or
xchg
jmp
push
jge
jbe
out
jp
xor
cmps
cmp
call
mov
repz
push
xor
or
ss
fadd
pop
ja
dec
push
jns
and
retf
adc
outs
cld
or
push
es
fsub
add
inc
repz
fwait
and
jp
fist
inc
mov
shl
jbe
(bad)
fmul
(bad)
push
cmp
sbb
fs
mov
enter
and
retf
icebp
jmp
ret
sbb
ret
stos
adc
ins
test
sahf
fyl2xp1
mov
ss
out
gs
in
mov
mov
je
mov
and
les
pop
dec
out
inc
imul
inc
mov
pop
cmp
adc
jp
adc
ss
or
fisttp
or
cmp
jge
lods
or
inc
mov
in
jnp
clc
hlt
dec
aas
mov
fsubr
sub
lds
iret
stos
ins
push
int3
sub
or
jne
dec
(bad)
mov
sbb
test
mov
pop
add
add
mov
nop
mov
xor
push
xor
scas
add
arpl
jnp
int3
xchg
jmp
jge
sub
or
adc
shr
push
sub
mov
pop
mov
loopne
jne
dec
sbb
mov
jbe
jne
jg
cmps
dec
and
fst
sbb
push
sub
mov
mov
stc
aaa
or
cmp
outs
repz
jno
cdq
jle
dec
pushf
mov
push
pusha
or
je
cmp
dec
or
and
aaa
xchg
mov
adc
and
div
iret
xchg
hlt
mov
jno
pop
ins
in
(bad)
adc
ja
out
in
aad
cmc
clc
daa
jle
or
sub
jl
pop
repnz
cmp
test
push
xchg
gs
loopne
sahf
xchg
fdiv
and
sbb
loopne
inc
mov
xor
xor
cmp
xor
outs
out
mov
mov
mov
outs
mov
pop
inc
sbb
jns
add
(bad)
outs
es
xchg
or
jp
inc
leave
sbb
cli
sbb
retf
mov
inc
mov
add
xor
call
add
inc
jo
push
cmp
call
push
cmp
pop
xor
in
and
jno
xchg
(bad)
loopne
jnp
out
mov
leave
inc
pop
xchg
nop
stos
mov
xor
dec
pop
les
push
dec
mov
pop
nop
movs
and
lahf
cmc
mov
sar
std
sub
out
imul
popa
mov
mov
xchg
arpl
jmp
xor
mov
test
gs
cwde
xor
adc
outs
pushf
arpl
dec
jno
(bad)
ins
popa
fs
popf
xor
mov
fst
aam
cmp
pop
add
lea
cwde
jmp
xor
push
or
sub
pushf
fbld
popf
test
push
sahf
inc
out
push
es
int
mov
push
ja
mov
mov
xor
mov
dec
fwait
mov
out
retf
sbb
sbb
outs
lods
repnz
inc
xor
cmp
xchg
ss
and
leave
sbb
and
sub
adc
or
jns
mov
cmps
scas
mov
sub
xchg
jno
or
mov
int
aad
cmp
add
xchg
inc
cmp
mov
lods
adc
aad
xchg
aas
and
jmp
xor
add
sbb
xor
xor
in
fistp
pop
bound
mov
addr16
mov
push
hlt
icebp
fsub
mov
cmc
imul
cmp
fidivr
mov
mov
and
data16
ja
fnstenv
add
fnstcw
dec
xor
or
in
xlat
cdq
mov
loopne
std
dec
or
int3
mov
(bad)
pop
popa
xchg
inc
in
nop
loopne
mov
xchg
dec
xchg
dec
fdiv
out
sbb
pop
push
movs
cmp
or
int3
inc
stc
ins
cmp
mov
scas
cmp
pop
mov
ret
movs
pop
xor
cs
jb
test
data16
xor
nop
or
inc
in
lods
or
inc
mov
movs
clc
aad
sub
test
les
cdq
cmp
mov
xor
es
or
(bad)
aas
sub
or
cli
dec
mov
mov
ret
pop
stos
ror
jmp
push
(bad)
pop
jb
pusha
adc
or
test
xchg
inc
and
repnz
xor
enter
and
mov
outs
inc
xchg
sahf
pop
push
adc
retf
jl
repnz
adc
inc
stc
nop
or
xchg
sub
test
cdq
lods
into
shr
test
push
ds
in
mov
nop
bound
out
mov
inc
mov
fstp
nop
loopne
ss
stos
and
xor
push
imul
popf
cmps
jl
retf
jmp
dec
imul
jp
(bad)
jns
shl
lods
xchg
or
inc
fst
mov
mov
cmp
inc
add
call
scas
je
shl
cld
mov
dec
stos
push
test
mov
pop
jae
test
xchg
(bad)
fild
fistp
dec
sbb
fiadd
fdivr
mov
test
push
fimul
test
fstp
cli
push
add
xor
dec
add
daa
add
dec
mov
ret
inc
push
pop
xor
xchg
sahf
xor
inc
lods
test
add
or
push
jmp
pop
sbb
mov
mov
inc
push
movs
xor
mov
es
mov
mov
(bad)
cmp
nop
add
dec
push
pop
sub
je
pusha
call
sbb
push
and
push
lahf
pop
xchg
test
fwait
es
mov
mov
popa
dec
je
into
lahf
add
(bad)
dec
cwde
in
adc
ja
push
sar
mov
add
xchg
lock
cmp
inc
mov
fsub
xchg
stos
aaa
dec
cmp
loope
in
inc
sbb
cmp
mov
xor
ret
cmp
mov
mov
and
repnz
and
xchg
mov
jmp
or
pop
ret
mov
add
xchg
dec
sub
jle
jecxz
mov
fucompp
sub
jp
cmp
fs
rol
sub
call
(bad)
lods
push
jo
fdiv
dec
pop
xchg
sar
xor
popa
mov
mov
les
sbb
je
cmp
fst
mov
xor
add
mov
neg
push
jge
xchg
fild
dec
xor
or
addr16
mov
rol
jp
imul
cmp
mov
jbe
out
mov
cmp
fistp
outs
or
add
(bad)
ds
jbe
dec
aas
stos
jg
push
jg
fdivr
ret
mov
push
mov
imul
inc
push
clc
mov
push
cld
cmp
xchg
(bad)
or
test
jg
xchg
(bad)
inc
xor
clc
jae
xor
lods
pop
pop
mov
add
xchg
jae
std
aaa
or
and
push
jmp
xlat
es
and
lods
add
fimul
inc
(bad)
pushf
add
loop
jmp
and
scas
mov
push
push
cmp
push
cdq
shr
shl
loopne
ret
movs
cmps
mov
jbe
loope
mov
add
pop
sar
ins
adc
mov
aad
xchg
sub
sbb
call
xchg
cmp
loopne
fs
in
retf
stos
movs
repz
jbe
scas
add
aaa
repnz
mov
leave
xchg
cmp
mov
jno
lahf
mov
jp
push
imul
add
rcl
inc
mov
imul
mul
fs
fucomp
or
add
(bad)
lods
xor
or
pop
xchg
(bad)
movs
shr
add
mov
cmp
les
pop
aam
enter
nop
retf
mov
cmp
(bad)
add
or
lahf
mov
push
add
movs
cld
test
cmp
add
int
xor
add
sbb
push
sub
stc
adc
dec
(bad)
(bad)
rcl
rcr
(bad)
or
dec
mov
cmp
fs
test
(bad)
jmp
lock
call
loopne
in
movs
call
sub
movs
rcl
or
inc
jecxz
in
repz
ins
pop
repnz
pop
pop
xor
pop
sti
popf
xor
ins
jnp
adc
cs
jge
pop
repnz
or
dec
and
pop
adc
sbb
aad
pop
aad
out
pop
sub
xor
mov
mov
ret
jae
outs
mov
cmp
xchg
jl
pop
test
call
mov
ja
dec
icebp
add
xchg
sbb
(bad)
xor
lods
dec
arpl
cmp
xchg
jge
jae
test
push
jb
jbe
popf
and
mov
push
xchg
ss
retf
dec
es
mov
push
cld
inc
xor
aas
adc
pop
cmp
cs
cmc
popa
mov
jle
mov
scas
out
popf
dec
rol
or
xor
mov
jp
jl
fisttp
(bad)
mov
(bad)
or
inc
fcomp
jmp
mov
daa
daa
pop
lods
inc
push
mov
pushf
scas
or
inc
loopne
or
dec
ds
and
xor
jo
pop
out
rcl
sbb
cmc
ret
fadd
lock
std
jp
popf
sub
mov
imul
mov
mov
and
push
arpl
pop
jp
hlt
ins
dec
test
pusha
jo
loope
enter
fbstp
fnstsw
(bad)
out
test
movs
inc
jno
scas
nop
inc
hlt
mov
out
jecxz
and
push
sbb
sbb
jl
xor
std
(bad)
mov
pop
in
jecxz
xchg
sub
sub
fcom
sbb
sar
mov
add
fld
adc
int
push
adc
sti
sbb
sbb
and
jle
pusha
lahf
das
push
retf
or
(bad)
fisubr
push
leave
stc
jno
or
cmps
mov
mov
mov
fdivr
into
xchg
mov
in
pop
leave
mov
sub
test
push
xchg
mov
mov
jp
xchg
call
int
(bad)
hlt
scas
fld
in
pop
std
jmp
sub
scas
jl
pop
pop
dec
lods
push
daa
mov
imul
push
push
dec
push
lds
pop
sbb
add
inc
ins
inc
les
(bad)
pop
les
or
fnsave
jge
pop
sar
loop
push
ins
adc
or
inc
add
adc
and
je
mov
or
lahf
inc
inc
inc
in
mov
dec
clc
cmc
(bad)
cld
xor
cmp
loope
or
pop
leave
fcmovb
xor
pop
shr
clc
mov
mov
mov
ja
std
cmps
cmps
sub
xor
pop
pop
imul
(bad)
and
int3
data16
out
and
jg
push
add
in
sahf
loope
inc
aad
shl
jmp
loop
jecxz
push
movs
jge
into
lods
ficom
adc
fs
pop
dec
fdiv
jo
push
inc
and
aam
pop
in
or
hlt
icebp
jb
adc
lods
mov
jns
stos
pushw
push
leave
enter
dec
push
cmc
add
mov
(bad)
xchg
loop
jae
mov
pop
push
fimul
daa
push
jb
mov
aaa
xlat
or
ds
aad
push
cwde
xor
xor
into
cmp
jp
pusha
xor
adc
inc
lods
cmps
mov
and
jmp
or
leave
pop
xchg
stos
call
xor
push
out
pop
(bad)
shl
jno
imul
xchg
pushf
cmps
inc
cmp
cmps
xor
mov
dec
ins
xor
nop
mov
into
add
(bad)
pop
mov
out
fs
inc
sub
out
inc
fmul
int3
mov
pushf
cli
dec
aas
iret
pop
sbb
push
xchg
mov
gs
addr16
adc
cmp
push
sub
pop
lods
inc
rcr
jno
jmp
cmps
mov
cwde
inc
xchg
test
mov
adc
jl
push
out
leave
mov
add
and
int
dec
fwait
push
mul
push
addr16
mov
or
stos
sub
or
iret
iret
mov
jl
sub
add
xor
lods
sub
stos
stos
shr
lahf
repz
fsub
test
(bad)
das
dec
shl
jns
pop
jle
lea
pop
lea
stc
test
div
xor
and
hlt
(bad)
scas
cmp
cmps
fcmovne
mov
sub
inc
mov
loope
mov
inc
dec
lahf
gs
je
push
cdq
(bad)
test
add
mov
push
push
iret
inc
or
lods
mov
push
out
mov
ja
mov
pop
and
push
fsub
test
stos
out
adc
dec
in
and
inc
scas
outs
xchg
(bad)
(bad)
fwait
lods
add
inc
mov
fisub
mov
pop
lds
jne
fild
mov
adc
into
loope
es
(bad)
pusha
retf
and
ja
int
jne
sbb
dec
call
dec
xor
(bad)
add
jnp
rep
push
cmps
das
or
push
or
xchg
cdq
shl
mov
push
jmp
pop
lock
test
fwait
imul
nop
push
jmp
cmp
lods
push
icebp
mov
addr16
fwait
sbb
repnz
jmp
adc
fsub
jle
mov
sbb
or
(bad)
and
sbb
xor
movs
scas
sti
jl
test
inc
push
dec
jns
jmp
fdivp
arpl
mov
rol
ins
xchg
cmp
imul
imul
mov
or
ret
test
fadd
sub
pop
fwait
shl
xor
cmp
or
ja
fdivrp
cmps
pop
shl
sub
ss
imul
sub
xchg
outs
cwde
stos
hlt
and
adc
inc
popf
sub
shl
jle
ja
xchg
cld
(bad)
in
repz
cmp
add
inc
inc
js
pop
or
std
cld
sbb
push
lea
sar
stc
xchg
cmp
push
mov
(bad)
test
aas
inc
mov
cs
sbb
xlat
mov
(bad)
push
pop
mov
sbb
lods
test
dec
out
add
mov
lahf
and
and
adc
shl
mul
xor
dec
pusha
pop
in
mul
lods
xor
push
mov
pop
mov
sub
inc
or
rcl
(bad)
fmul
jmp
and
sbb
inc
xchg
lods
mov
out
and
push
cmp
add
mov
dec
call
push
or
push
sti
xor
push
and
imul
outs
into
dec
call
ret
pop
jae
pop
cmp
adc
cli
dec
mov
jbe
push
adc
cdq
outs
mov
adc
neg
cmp
rol
popf
pop
std
adc
loope
popa
lods
xchg
cld
inc
mov
mov
popa
in
cdq
(bad)
xor
sbb
movs
into
xchg
pop
xchg
hlt
sar
dec
dec
fld
push
inc
jo
jae
bnd
imul
adc
adc
ds
call
mov
adc
(bad)
ret
pop
ret
push
imul
mov
ins
dec
(bad)
cld
xor
daa
cld
jb
es
adc
ds
les
push
mov
xor
sbb
jbe
add
jmp
inc
lods
(bad)
xchg
and
retf
or
sbb
in
and
mov
shl
inc
mov
cmp
and
je
in
and
or
mov
inc
test
jae
or
sbb
js
pop
xchg
loopne
aam
push
mov
mov
retf
push
pop
outs
sub
pop
es
jecxz
stos
xchg
pop
mov
ret
mov
cld
inc
push
xchg
in
stos
lods
adc
xor
sbb
adc
add
xchg
hlt
fadd
sbb
les
bound
aad
out
dec
imul
and
inc
mov
push
gs
cmps
or
int
add
not
and
dec
or
dec
inc
sub
inc
push
jmp
cmp
adc
dec
sbb
xchg
pop
and
add
stc
cmp
pop
scas
jmp
(bad)
adc
test
movzx
stos
loopne
in
dec
nop
lahf
je
lods
and
push
lahf
gs
sub
xchg
in
ror
cwde
scas
xchg
sar
mov
mov
xchg
scas
mov
repnz
stc
dec
nop
in
cmc
mov
mov
jno
mov
das
sbb
mov
ret
jg
mov
fnstcw
mov
sbb
icebp
(bad)
in
out
imul
(bad)
mov
xchg
sbb
sub
mov
push
imul
in
nop
test
not
not
iret
jge
repz
cmps
xchg
test
ja
cli
sbb
out
je
mov
iret
ror
inc
jne
pop
stc
rcr
xchg
ds
sti
fimul
movs
sub
or
neg
jge
retf
pop
push
dec
mov
in
rcr
aam
and
icebp
sahf
pop
pop
in
pusha
adc
leave
mov
jae
mov
mov
xchg
mov
aaa
push
repz
pop
inc
ss
aaa
cs
cmc
mov
adc
sti
ins
test
inc
rol
or
popf
dec
cmp
sub
push
sub
dec
(bad)
ss
retf
push
add
and
popf
daa
mov
(bad)
out
cs
mov
je
push
into
sbb
inc
push
mov
sbb
retf
mov
jp
and
dec
ret
mov
sti
jo
push
dec
mov
dec
mov
push
push
movs
mov
jecxz
xchg
in
fadd
or
loop
or
push
mov
rcl
fstp
sub
adc
popa
aam
shl
dec
loopne
add
(bad)
push
cmps
and
lea
loope
add
in
jge
enter
inc
xchg
jnp
dec
ins
fdiv
(bad)
sti
inc
sub
ret
pop
inc
popa
out
or
in
lods
mov
pushf
fldl2t
and
nop
cld
pop
pop
pop
push
sahf
jecxz
add
arpl
aas
push
cmp
or
jns
loopne
xchg
ficom
imul
retf
mov
shl
call
je
inc
push
test
js
push
push
cmp
int3
popf
fidiv
(bad)
xor
cmp
mov
add
cs
xor
xchg
adc
ror
inc
les
imul
xchg
xchg
ins
je
inc
xor
xchg
iret
inc
int3
add
(bad)
cli
xor
imul
mov
xchg
test
les
jne
mov
retf
loopne
jo
adc
jae
mov
dec
push
inc
mov
mov
jg
popf
xchg
add
inc
sbb
push
les
in
stos
lock
mov
outs
and
mov
aad
fist
js
or
mov
popa
popf
jp
adc
popa
add
push
mov
popa
adc
int
jmp
das
pop
mov
jmp
mov
xchg
push
jo
add
addr16
sbb
cmp
dec
pop
fwait
mov
popa
rol
movs
xor
jo
mov
popa
outs
dec
rol
cdq
sub
fistp
ficomp
push
mov
xchg
scas
push
sub
mov
aas
and
push
mov
dec
fstp
popf
aaa
xchg
adc
xor
xchg
fxch
iret
mov
out
test
scas
call
mov
leave
jmp
mov
test
cmovns
jno
mov
mov
jl
dec
unpcklps
aad
out
pop
data16
mov
ins
sahf
fstp
aam
hlt
or
push
push
js
fwait
sbb
repz
sbb
scas
out
xchg
mov
fisubr
call
xor
ja
gs
fcomp
into
and
retf
das
xchg
in
or
pop
sahf
addr16
cli
clc
movs
push
add
jp
push
sbb
jl
stos
sub
sub
mov
ror
outs
sbb
in
sub
mov
inc
inc
fadd
push
paddd
push
adc
(bad)
(bad)
test
sbb
aad
mov
or
(bad)
ins
shl
mov
int3
in
in
mov
fisttp
(bad)
add
mov
mov
cmps
in
pop
xchg
gs
sbb
xchg
(bad)
xchg
(bad)
jo
test
stc
das
adc
adc
fcom
inc
push
mov
das
mov
retf
stos
jb
or
dec
xchg
inc
jge
xor
fdiv
bound
imul
pop
mov
lods
jo
mul
(bad)
jae
push
imul
xor
jo
in
mov
sbb
fcmovnbe
idiv
lds
sub
pop
inc
ss
jle
add
fstp
(bad)
cld
loope
pop
add
test
jecxz
or
mov
cmp
pushf
call
mov
rcl
out
movs
enter
mov
js
add
in
lock
test
popf
inc
(bad)
into
inc
adc
adc
aam
(bad)
(bad)
sbb
xor
out
push
popf
xchg
out
ss
cmp
lock
mov
mov
cmps
inc
fcomp
jmp
sub
fwait
cwde
and
or
lahf
mov
pop
daa
sahf
(bad)
lods
aas
pop
push
ss
pop
fwait
sub
adc
xor
das
in
mov
addr16
loope
lods
mov
add
jno
and
inc
sub
lock
outs
lods
fisubr
clc
std
js
fsub
push
ss
pop
or
mov
jecxz
fs
jo
test
sub
jecxz
(bad)
mov
xor
shl
mov
test
pop
fwait
mul
or
xor
imul
test
sbb
test
lahf
xchg
shr
pushf
sub
xor
outs
mov
jecxz
pop
test
mov
and
leave
push
pop
test
pop
sub
(bad)
jmp
repz
(bad)
mov
mov
outs
cdq
retf
mov
lea
xor
jae
(bad)
or
inc
sub
dec
ror
sbb
and
icebp
pusha
sbb
call
sbb
jmp
pop
mov
mov
mov
xchg
sbb
sbb
sbb
push
clc
mov
dec
cli
retf
ja
(bad)
aas
jne
cmp
ja
inc
pop
xchg
or
dec
and
add
or
sbb
jno
fwait
mov
(bad)
lods
aad
out
pop
sahf
mov
add
sahf
ret
movs
cmp
dec
jl
lock
rcr
xor
add
enter
mov
nop
inc
dec
hlt
xchg
outs
mov
lds
fdivr
inc
xor
jl
aas
dec
cmp
xchg
xchg
rol
dec
jnp
cmc
adc
xchg
(bad)
sub
lock
fmul
inc
push
(bad)
mov
add
push
out
imul
pop
int3
aam
push
dec
xor
add
stos
fdivr
push
jnp
sub
mov
adc
paddsb
rep
mov
jg
dec
push
sub
loopne
addr16
stos
ja
xchg
loopne
sbb
in
xchg
outs
add
xor
sti
or
or
int3
pop
sar
sub
adc
call
mov
push
push
inc
fistp
fmul
mov
adc
pop
push
(bad)
jne
or
pop
xor
pop
icebp
add
std
and
mov
xor
nop
inc
(bad)
repz
sbb
aaa
dec
mov
mov
and
(bad)
push
dec
jg
xor
(bad)
out
(bad)
(bad)
stc
pop
repnz
out
inc
ror
mov
inc
adc
dec
iret
add
xchg
inc
jb
hlt
jmp
cmp
(bad)
jmp
adc
cmp
jo
sahf
and
push
mov
rcl
jns
xor
mov
cmp
mov
(bad)
mov
adc
jb
cmps
adc
add
fild
jns
jo
repz
ja
jne
mov
test
sbb
sub
cmpps
sbb
mov
cmp
jp
aam
inc
rcl
(bad)
dec
sahf
repnz
add
mov
callw
sbb
nop
push
and
fs
mov
nop
pop
xor
jbe
lods
out
xlat
jne
movs
add
fld
ret
mov
mov
or
ds
jb
imul
scas
fcmovne
cwde
int3
out
cmp
hlt
int
stos
movs
out
mov
sub
loope
add
push
sbb
in
loope
test
pop
adc
and
out
(bad)
xchg
iret
jge
(bad)
mov
jge
call
xchg
push
xchg
icebp
push
ret
adc
arpl
imul
cmp
aaa
xor
xchg
int
add
mov
xchg
test
push
int3
call
adc
inc
sar
cmp
add
pop
cmps
sub
mov
fdiv
(bad)
fsub
sub
sysexit
imul
js
sti
leave
repnz
push
push
jge
pop
mov
jge
outs
(bad)
sbb
jge
imul
dec
mov
nop
pop
scas
jg
add
or
out
cmps
fdivrp
sbb
jmp
fist
mov
jbe
xor
popa
fiadd
ja
or
mov
mov
adc
mov
dec
dec
jnp
lahf
mov
push
push
inc
mov
movs
lock
adc
jg
jb
xchg
push
(bad)
out
sub
aam
mov
and
cmp
sbb
pop
fsubr
jb
gs
xor
stos
adc
cmps
sub
lods
jo
mov
inc
stc
outs
mov
shl
ins
(bad)
iret
xchg
jle
sbb
retf
add
inc
add
push
mov
test
jnp
add
add
aas
mov
(bad)
xchg
out
test
cmps
cmp
mov
or
mov
xchg
dec
stos
(bad)
and
cmp
xor
and
dec
cwde
inc
cmp
into
retf
push
test
add
pushf
xor
cmps
imul
mov
std
sbb
xor
ret
xchg
sbb
inc
pop
adc
pop
pop
ror
and
push
push
and
int3
or
sub
adc
cmps
adc
inc
retf
jae
imul
retf
pop
retf
in
jle
xchg
pop
aaa
adc
sti
pushf
sbb
scas
push
mov
inc
mov
mov
cmp
neg
jmp
xchg
in
sbb
frstor
lea
inc
jmp
aas
das
push
add
test
pop
cmc
pushf
repz
sub
xlat
mov
push
pop
xchg
mov
clc
dec
repnz
or
dec
mov
xlat
fwait
movs
jl
inc
lock
sbb
pop
push
shl
mov
pop
inc
mov
mov
(bad)
movs
push
adc
jp
cwde
aaa
sbb
dec
arpl
pop
mov
or
jl
xchg
ret
idiv
fisttp
fpatan
out
xlat
add
jl
pop
inc
add
and
inc
jecxz
push
inc
mov
or
dec
aam
or
jo
aaa
jnp
lock
into
sub
int
mov
dec
mov
fcomp
xchg
icebp
push
cli
or
pop
ds
mov
jge
inc
xlat
adc
popf
mov
pop
mov
outs
mov
cwde
or
loopne
aam
call
jmp
sub
add
gs
sbb
mov
fwait
xor
js
out
(bad)
sar
add
sub
loop
ret
dec
das
das
adc
lock
xchg
mov
xor
es
out
and
ins
jmp
or
test
out
xor
jge
sbb
dec
and
dec
sub
mov
xchg
dec
ss
dec
sub
ror
ins
fcom
out
jl
icebp
jge
and
lock
call
jns
jge
outs
xor
jo
jg
test
push
shl
pop
cli
popa
out
pusha
lock
dec
fadd
pop
push
push
jmp
(bad)
pop
pop
in
or
sub
pop
and
and
add
mov
jbe
dec
or
call
xchg
pop
rol
mov
ds
dec
xor
icebp
xor
mov
jno
mov
icebp
jne
jge
shl
xlat
popf
mov
ja
movs
jp
xchg
jno
retf
popa
pusha
sbb
popf
fsubr
sub
jmp
inc
jle
pop
xor
fcom
enter
sub
daa
ret
dec
retf
xchg
sbb
mov
imul
jmp
and
mov
retf
psrlw
inc
hlt
dec
or
cmp
js
sar
push
shl
xchg
(bad)
mov
sub
jne
sar
loopne
cmps
es
adc
mov
cmp
loopne
dec
sub
inc
or
jno
icebp
mov
out
data16
jge
mov
mov
in
adc
jp
pop
outs
movs
sub
sub
cdq
imul
push
jae
sbb
dec
shr
ins
gs
inc
jnp
ja
mov
ret
push
movs
(bad)
jecxz
retf
je
sbb
sub
rcr
aaa
cmps
jmp
bound
sub
gs
pop
xor
xchg
adc
pop
pop
fwait
pop
retf
sbb
cmp
sbb
sbb
or
mov
and
cli
movs
mov
adc
test
in
push
mov
stc
lods
push
mov
push
jmp
mov
or
mov
push
loope
mov
mov
enter
inc
push
outs
sahf
inc
sub
shl
cmp
mov
sub
inc
adc
dec
add
popa
fstp
push
adc
jne
xor
xor
push
push
out
mov
and
add
sub
daa
fucomi
pop
hlt
out
jbe
add
sub
cmc
int
push
push
sbb
ret
mov
push
sbb
je
and
cmp
sub
sar
mov
lock
adc
lock
(bad)
movs
mov
or
leave
push
xor
jp
scas
xchg
sub
inc
je
(bad)
stos
inc
call
(bad)
and
sti
jo
or
lahf
mov
das
mov
push
mov
pop
fsub
mov
inc
(bad)
jno
sub
mov
cdq
jge
pop
mov
or
dec
push
pop
lods
out
mov
mov
adc
adc
test
cmp
inc
cwde
aad
add
call
xchg
add
test
clc
je
sub
lock
iret
mov
cwde
adc
mov
int3
ret
rcl
push
out
dec
scas
clc
(bad)
sub
mov
repz
inc
and
cmp
std
ds
sahf
jo
(bad)
sub
movs
xor
push
(bad)
push
mov
jl
fimul
cmp
mov
xor
pop
loopne
xchg
push
out
cmp
mov
and
fist
xor
mov
xchg
sbb
pop
xchg
repz
dec
push
mov
dec
xor
hlt
sar
mov
(bad)
pop
icebp
(bad)
push
es
std
sar
les
ds
adc
mov
jg
fwait
jne
push
pop
or
es
dec
dec
sbb
pop
push
je
cmps
dec
(bad)
cmp
inc
inc
lds
push
xlat
aad
rcr
xor
imul
mov
rcl
lea
sub
dec
and
sbb
mov
dec
jle
fwait
pop
mov
adc
test
stos
fld
mov
or
(bad)
les
cmp
call
movs
dec
mov
jnp
mov
ret
aas
int3
mov
pop
fiadd
jns
sbb
sbb
cld
sti
mov
pop
xchg
std
mov
and
mov
cmp
jnp
push
(bad)
out
popf
xchg
fidiv
add
cld
xor
in
xchg
push
inc
ds
rcl
daa
inc
xchg
arpl
lock
inc
mul
stos
mov
stos
adc
inc
add
fstp
lea
(bad)
arpl
stos
retf
dec
cs
lods
mov
movs
sub
add
(bad)
retf
jmp
or
mov
cmps
sbb
stos
scas
test
dec
xor
mov
nop
inc
mov
rol
outs
js
inc
pop
push
cmp
lock
jne
into
lods
ror
cmp
jge
jg
xor
mov
jo
jb
pop
push
imul
(bad)
sbb
(bad)
aaa
mov
xchg
sbb
xor
sub
imul
ss
or
add
jns
pop
call
cmp
ror
mov
jne
(bad)
cmp
sub
mov
scas
leavew
shl
aad
in
cmps
out
mov
test
sbb
and
add
adc
push
in
adc
cld
imul
push
aam
jge
lods
xor
fsub
int3
inc
and
test
jbe
aam
inc
enter
dec
in
fs
nop
int
stos
ror
test
pop
ffree
jge
adc
ret
scas
frndint
(bad)
imul
or
sub
pop
dec
sbb
fdiv
jb
test
mov
retf
mov
loop
out
add
cmps
push
sub
mov
adc
jmp
outs
pop
mov
jbe
ss
jbe
test
xor
jg
xchg
mov
sub
jl
test
cli
mov
jbe
ret
mov
and
fist
lds
inc
dec
popf
fs
or
or
out
push
(bad)
mov
jno
push
test
mov
outs
call
icebp
cmps
xchg
mov
cmp
mov
push
push
stc
fadd
ret
jl
sub
and
call
add
push
xchg
test
ret
call
cmc
mov
push
xor
sub
or
les
pop
into
jmp
outs
sub
inc
fwait
push
push
movs
adc
adc
push
(bad)
pop
mov
xchg
pop
xor
stc
ja
(bad)
repz
cmps
fldenv
cmp
ss
mov
xchg
xor
adc
sbb
outs
mov
jmp
push
dec
ror
cmp
stc
mov
mov
aas
fst
adc
xchg
retf
loop
mov
cmp
int3
rcr
int3
(bad)
(bad)
mov
jns
std
scas
add
jmp
adc
or
test
clc
push
cmp
pop
jmp
lods
icebp
mov
mov
daa
adc
shl
mov
cmp
adc
div
cmp
pop
adc
push
pop
dec
mov
dec
mov
cmc
sar
ror
retf
xchg
or
xchg
or
mov
sub
test
inc
loope
ret
ja
jl
daa
inc
xor
sub
(bad)
push
push
mov
fadd
lock
xor
sbb
and
mov
cmps
rcr
inc
jmp
sbb
aad
je
mov
add
call
jecxz
mov
cmp
hlt
inc
addr16
jl
xchg
in
add
jecxz
cmp
es
xchg
mov
imul
fwait
scas
rol
cmc
call
(bad)
ds
sbb
sar
fldcw
scas
mov
sbb
sahf
shr
popa
or
add
fwait
div
xchg
aas
add
gs
scas
pop
call
fsubr
xor
jae
adc
adc
addr16
repnz
in
mov
or
test
mov
test
dec
inc
int
loopne
fiadd
(bad)
div
push
pop
repz
and
mov
movs
imul
adc
mov
jmp
mov
inc
cdq
push
gs
or
adc
and
inc
push
addr16
cwde
mov
push
xchg
add
sub
xchg
ins
sar
test
mov
js
cwde
fist
(bad)
jo
inc
div
das
add
aas
push
mov
mov
and
jmp
arpl
cmp
add
sahf
(bad)
stc
xchg
adc
movs
stos
add
sbb
mov
mov
and
cli
mov
sti
(bad)
cmp
fwait
sbb
push
movs
fcom
dec
inc
jne
into
cld
aad
xor
mov
pop
cmp
push
push
inc
cmp
dec
out
mov
pop
dec
ja
dec
sbb
loopne
add
in
pop
jp
xlat
scas
jns
jae
xchg
iret
mov
(bad)
push
test
sub
call
xor
sub
imul
stos
or
in
out
add
fld
pop
not
test
sub
or
(bad)
aam
daa
imul
popa
fwait
add
pushf
in
jecxz
dec
arpl
xor
popa
and
les
sub
or
aam
push
(bad)
ret
dec
or
clc
loope
cmp
call
ret
xor
or
jecxz
xchg
jg
test
jnp
or
repnz
cs
sub
(bad)
out
shr
inc
pop
mov
scas
pop
sub
xor
jle
repnz
cmp
aaa
pushf
xor
aas
push
in
ror
push
inc
nop
adc
ficomp
ins
aas
sbb
cmc
dec
rcr
mov
mov
mov
add
jne
jnp
xrelease
stc
enter
jmp
push
ins
sbb
dec
push
mov
xchg
jl
ror
cli
inc
inc
sbb
add
pop
dec
hlt
imul
repz
mov
pop
lods
xchg
jl
pop
xor
clc
in
xchg
int3
imul
xor
int3
aam
add
xchg
add
xchg
out
dec
fucomip
mov
sub
dec
das
cmp
mov
push
fwait
mov
enter
ficom
xchg
dec
mov
jg
lock
cld
mov
icebp
mov
rcl
(bad)
push
xchg
dec
fcomi
je
inc
call
rcr
mov
adc
xchg
push
lds
lock
push
inc
or
nop
xchg
jb
lea
nop
pop
iret
mov
sub
jns
(bad)
jl
inc
jno
sahf
adc
xor
pusha
aam
mov
jmp
(bad)
fld
sahf
cli
rcl
add
jnp
sar
aas
out
jmp
mov
or
ror
jmp
jbe
pop
and
(bad)
add
cwde
xchg
cmc
cmc
aas
call
mov
in
nop
pop
or
int
xchg
push
jo
and
mov
cmc
out
sub
push
jns
cmp
adc
test
jo
jb
outs
mov
scas
sahf
push
inc
std
(bad)
sub
lahf
adc
mov
jmp
or
and
in
pop
and
iret
xchg
or
inc
icebp
push
rcr
int
jg
mov
outs
push
mov
xor
push
jae
pop
and
mov
xor
outs
das
mov
jge
add
inc
int3
fwait
movs
mov
push
movs
add
cmps
jmp
test
jnp
dec
push
mov
and
sub
xor
mov
cli
and
fsubr
lods
scas
mov
jmp
jle
sub
cmp
sbb
mov
mul
sub
lods
in
dec
sbb
mov
jns
ret
adc
dec
in
sti
scas
aad
out
rcr
inc
test
cmp
std
ficomp
cmps
cmp
adc
setae
sub
add
xchg
lds
(bad)
in
inc
fld
xor
xchg
pop
mov
rol
jae
arpl
ds
rcr
int
push
sbb
cdq
fucomi
rep
jns
inc
loopne
xor
mov
mov
add
(bad)
outs
es
in
outs
xchg
lahf
call
and
loop
mov
add
inc
pop
pop
data16
mov
and
les
aas
inc
stc
fsub
and
mov
test
addr16
mov
adc
aam
push
push
pop
xor
nop
push
push
cmps
sbb
xchg
push
test
jle
mov
div
dec
xchg
scas
xor
jbe
sub
out
xor
adc
scas
sbb
jmp
bound
jnp
(bad)
sub
push
or
inc
sub
xchg
addr16
xchg
int
inc
add
enter
test
sbb
enter
das
or
adc
pop
fwait
popf
sahf
mov
adc
cmp
iret
stos
mov
xchg
jo
add
inc
ror
icebp
jno
adc
nop
in
and
push
xor
mul
mov
pop
das
push
cmps
(bad)
sub
mov
mov
inc
xorps
mov
and
movs
js
add
(bad)
ror
in
fidivr
add
and
(bad)
jmp
cmp
or
sbb
add
loope
push
push
lods
sahf
dec
fld
ret
clc
push
scas
adc
push
out
out
inc
ins
sbb
push
jmp
cdq
fbld
mov
pop
push
out
std
and
pop
cmp
data16
sbb
outs
push
ja
in
out
inc
das
cmp
xchg
jns
retf
test
cmps
and
dec
sbb
xor
xor
mov
fmul
out
icebp
dec
xor
and
cs
push
popw
sbb
(bad)
cld
sbb
cmps
add
mov
pop
test
mov
adc
hlt
dec
push
push
pop
pop
sahf
and
jns
shl
clc
enter
loop
jns
iret
sub
loop
push
mov
in
cmp
pop
lea
loop
dec
xor
iret
inc
add
dec
cmp
mov
cwde
cmp
sbb
daa
xchg
adc
adc
xor
cmp
(bad)
sub
mov
add
ins
push
cdq
lds
xchg
xchg
ja
mov
xor
outs
in
int3
and
jno
mov
cmp
ficomp
and
int3
and
cmp
imul
imul
(bad)
scas
mov
sub
xchg
ds
into
movs
cmc
sbb
xchg
sub
(bad)
cli
js
cmps
inc
dec
xchg
xor
bound
aas
xchg
mul
pusha
(bad)
fidiv
sbb
mov
xchg
xor
sti
adc
ins
or
xchg
mov
daa
ret
mov
mov
in
mov
pop
inc
cmc
cmp
jecxz
push
add
jnp
fist
or
xor
repnz
psadbw
pop
out
cmp
dec
add
pop
lods
pop
gs
push
call
fisttp
scas
test
in
cmc
retf
in
mov
fwait
mov
sbb
xor
push
gs
sahf
addr16
sbb
push
mov
inc
mov
sbb
cmp
in
sub
rcl
in
sbb
jae
loop
das
pop
imul
sti
pop
inc
jmp
test
ret
das
pop
jmp
call
loop
(bad)
push
jl
lods
pop
add
mov
into
jb
leave
xor
je
ins
in
dec
in
nop
cdq
mov
cmps
loopne
(bad)
and
jl
sar
add
out
xchg
jo
lahf
jb
cmp
lock
ror
dec
mov
scas
cmps
push
add
das
rcl
push
adc
outs
dec
xchg
and
inc
and
fnstcw
cmc
jbe
xor
lods
icebp
dec
dec
aaa
ja
jb
mov
xor
fcom
xor
ds
gs
xlat
inc
adc
add
and
imul
xor
inc
sbb
sbb
push
rol
repz
sbb
jle
add
add
fwait
sbb
imul
sub
adc
aas
and
mov
jb
idiv
cwde
push
scas
sti
ja
mov
jae
outs
ret
mov
dec
pop
adc
xchg
repnz
repz
adc
xor
sub
xor
pop
or
popf
test
pop
lock
icebp
(bad)
push
xor
push
fnstsw
sbb
and
add
int
pop
jge
jl
dec
out
push
dec
mov
or
call
inc
cmps
in
sub
xor
(bad)
jecxz
pushf
mov
mov
push
test
pop
sbb
sub
fs
xchg
jecxz
out
inc
or
and
xlat
movs
cwde
xchg
sbb
or
sahf
pop
mov
pop
xlat
inc
test
rol
ret
fucomp
lea
loopne
xor
xor
repz
popf
(bad)
mov
jmp
shl
cdq
outs
or
(bad)
jmp
push
lods
daa
xchg
add
sbb
aaa
pop
outs
fucom
dec
pop
mov
scas
inc
call
dec
adc
cli
dec
mov
jmp
dec
aaa
(bad)
sub
shl
jae
mov
pop
push
js
test
and
sahf
scas
sub
xchg
push
(bad)
in
ret
mov
or
jl
jns
cli
out
push
mov
inc
xchg
xor
cmp
mov
(bad)
setae
inc
std
in
xchg
inc
fcomp
dec
in
jno
test
jmp
das
fisttp
(bad)
mov
add
pop
jg
fucomip
mov
popa
(bad)
ret
repz
or
jmp
shl
fstp
mov
movs
cs
lahf
sar
cmp
shr
xor
mov
inc
jle
jmp
pcmpeqw
jb
pop
out
and
mov
sbb
jmp
repnz
out
aam
popf
test
sbb
aas
call
sbb
enter
call
outs
mov
and
lahf
mov
or
inc
mov
mov
(bad)
jmp
mov
cmp
jmp
cs
test
and
test
out
adc
inc
(bad)
jnp
daa
push
iret
push
fs
cmp
push
mov
(bad)
fsub
imul
in
inc
and
lods
sub
mov
sub
pushf
rcr
pop
sbb
aaa
repnz
cmp
or
inc
sar
aad
jecxz
imul
jbe
xchg
int
test
stos
ret
pop
xchg
or
xchg
das
xor
sti
clc
pop
(bad)
scas
dec
dec
pop
mov
test
aas
push
es
mov
mov
mov
loop
mov
sub
icebp
fldcw
add
out
dec
jmp
jmp
push
data16
pop
xor
aad
outs
cmp
ins
xor
pop
cmp
mov
jnp
sti
mov
out
imul
mov
imul
xchg
xor
mov
pop
retf
idiv
cmp
mov
pop
retf
lods
dec
jge
pop
xor
xchg
iret
xor
leave
mov
cmp
xor
adc
sbb
loopne
adc
in
xor
jbe
mov
push
mov
push
(bad)
mov
or
mov
mov
xchg
pop
jge
pushf
mov
cmp
gs
jnp
dec
out
sbb
nop
(bad)
in
loope
fisubr
pusha
retf
idiv
adc
icebp
mov
in
xlat
cmc
jae
add
xchg
pusha
ret
retf
mov
mov
or
ror
test
sbb
push
sbb
inc
je
mov
in
push
mov
mov
cmps
add
pop
call
es
out
xor
daa
gs
repnz
mov
push
mov
daa
jne
pandn
bound
mov
les
add
or
inc
sub
jns
cmp
push
inc
sub
and
add
dec
mov
and
out
mov
aad
pushf
ds
push
adc
cmp
inc
and
push
dec
sar
add
add
call
or
addr16
aas
popf
jbe
mov
(bad)
retf
ror
mov
adc
add
pop
xchg
xor
inc
cdq
sbb
adc
lods
inc
push
ins
push
gs
push
test
fsub
sbb
repz
cmp
adc
jle
rol
xor
xor
shr
mov
enter
push
bound
sti
ins
pop
into
arpl
cmp
and
mov
dec
fmul
in
data16
inc
push
daa
push
push
and
rol
clc
rol
adc
outs
imul
xor
cs
pop
pop
pop
pop
xor
ss
mov
je
jmp
jno
mov
or
lahf
mov
ss
cmc
add
mov
mov
mov
mov
rol
in
mov
jae
jge
movs
sti
inc
in
xor
cmps
cmc
mov
mov
test
loop
jp
xor
loop
popf
jge
stc
and
cld
xchg
or
dec
cs
stos
mov
xchg
call
cmps
repnz
ror
mov
aam
dec
push
fs
mov
mov
outs
sub
mov
clc
pop
adc
ror
pop
mov
sbb
clc
pop
mul
xor
xor
pop
push
add
popa
inc
mov
fisub
push
jnp
fdivr
bound
(bad)
push
mov
and
data16
ins
das
out
jns
mov
mov
sbb
push
pop
iret
push
(bad)
push
cwde
dec
in
cmc
repz
jae
add
ficom
rcr
jg
mov
jnp
mov
out
jle
inc
add
sbb
pop
movmskps
or
xchg
mov
aas
cmp
and
mov
xor
or
push
(bad)
in
js
pop
push
push
pop
inc
mov
ror
xchg
(bad)
ds
sub
jl
ret
cmp
and
ins
sbb
add
mov
mov
rcl
sar
jb
ret
dec
ss
adc
adc
dec
jp
test
movs
mov
push
les
lods
in
ja
lea
(bad)
hlt
or
daa
popa
test
lahf
dec
jmp
ret
aad
ror
(bad)
jbe
push
ds
pop
outs
sub
dec
sub
int
mov
fnsave
jno
xchg
lods
add
mov
sbb
push
(bad)
mov
lods
mov
inc
add
mov
(bad)
fdiv
mov
gs
ret
add
cs
cmp
icebp
das
pop
(bad)
sub
sbb
sbb
repnz
pop
add
jns
lds
in
jns
test
mov
cmps
inc
enter
out
push
in
lods
mov
sbb
aas
xor
mov
push
lods
loop
pop
lock
mov
aaa
(bad)
mov
or
leave
(bad)
inc
out
cmp
xchg
scas
(bad)
hlt
shl
aaa
jl
mov
dec
push
(bad)
mov
push
dec
aam
sub
retf
adc
sbb
xchg
pop
jnp
ja
imul
out
sbb
stos
add
lahf
je
(bad)
cs
not
dec
mov
push
xchg
xchg
psubusw
cmps
pop
jo
dec
dec
imul
dec
shr
icebp
adc
lahf
rcr
jge
jg
ds
mov
(bad)
loop
repnz
push
sub
push
enter
sub
sbb
mov
pushf
sbb
inc
cmp
pop
mov
call
fisub
fld
jne
add
mov
pop
push
scas
loopne
mov
repz
push
imul
mov
cs
cld
lahf
(bad)
(bad)
push
ret
pop
in
xchg
gs
mov
inc
sbb
dec
cld
pop
cmps
es
dec
push
(bad)
adc
pusha
ficom
add
push
inc
and
xchg
inc
shl
stc
imul
sub
sahf
enter
ins
cmp
sbb
lods
mov
mov
xor
xchg
mov
adc
jns
outs
mov
(bad)
fcmove
call
inc
mov
ret
rcl
dec
xor
xor
adc
mov
add
cld
mulps
add
jae
push
ds
jae
xchg
xor
pop
out
push
cmp
outs
dec
cmp
call
clc
push
loop
outs
out
pop
inc
fs
sbb
in
pop
ins
cmp
test
mov
addr16
cwde
and
jne
rcr
dec
loop
push
mov
cmp
scas
aas
lahf
cwde
or
mov
aas
mov
mov
bound
out
or
les
dec
aad
or
imul
cmp
xchg
jl
sub
jno
cmp
mov
pop
into
mov
mov
mov
aam
movq
and
xor
jnp
mov
scas
inc
lds
ret
ins
or
xchg
stc
cmp
lahf
cmp
add
add
pushf
pop
xor
add
(bad)
dec
mov
dec
cmovne
sub
(bad)
movs
inc
jge
cli
cdq
cmp
stos
or
movs
and
lock
dec
lahf
call
mov
cmps
cmp
dec
sbb
stos
mov
cmp
sbb
nop
xor
adc
shl
popa
cmp
mov
sbb
xchg
clc
fst
or
sbb
inc
pop
imul
mov
jecxz
cmps
cdq
ins
jb
(bad)
jl
scas
jecxz
in
aas
dec
sbb
stos
mov
mov
inc
xchg
adc
into
shl
and
clc
jne
stos
push
sar
loopne
lock
call
call
mov
xchg
ins
dec
cmp
in
jge
push
(bad)
jae
lar
xchg
les
adc
inc
inc
inc
cmc
loope
je
mov
xor
inc
aaa
sub
mov
mov
jg
scas
loopne
les
mov
je
test
mov
or
cmp
push
jne
in
dec
push
push
xchg
inc
loop
les
fstp
sti
jmp
loopne
adc
mov
mov
neg
cmp
leave
ins
push
dec
ficom
ret
pop
add
inc
dec
sub
mov
mov
add
mov
dec
dec
addr16
dec
xchg
shr
sbb
hlt
dec
mov
jmp
cmp
in
sbb
xchg
and
dec
sub
call
clc
div
cwde
sti
in
(bad)
int
xchg
inc
pop
cmp
adc
ins
dec
jbe
cwde
mov
or
bound
dec
mov
out
repz
cmp
mov
mov
sbb
cmps
cmp
sub
nop
je
xor
call
sahf
xlat
mov
cmp
sub
div
movs
out
je
cmp
pcmpgtd
mov
inc
outs
clc
push
pop
movs
xchg
and
ins
int
jo
jecxz
in
push
inc
rcl
mov
add
xchg
xor
loop
ja
pop
jns
mov
inc
mov
sbb
xor
adc
push
imul
(bad)
outs
jmp
mov
data16
arpl
adc
imul
jge
test
dec
sub
xchg
mov
int3
in
dec
and
or
dec
push
ds
(bad)
movs
push
jb
sti
js
xor
dec
repz
add
lock
lea
mov
pop
nop
jns
test
pusha
mov
sbb
pop
cwde
add
enter
push
jmp
jns
bound
lock
xor
dec
jae
jmp
ret
xchg
out
fimul
or
mov
or
jnp
pop
in
ja
jo
or
mov
faddp
sub
enter
adc
sbb
lock
enter
das
stc
xchg
xor
xor
(bad)
outs
loop
ds
in
lods
sbb
xor
sub
push
iret
dec
xor
out
mov
pushf
ss
push
ins
(bad)
inc
popf
movs
or
outs
inc
arpl
mov
sbb
pop
call
mov
cs
fdivrp
mov
ror
xchg
fistp
mov
push
mov
(bad)
jae
or
lods
and
jae
xchg
jnp
push
mov
in
ins
mov
gs
ds
sbb
(bad)
push
lods
pop
xchg
cdq
dec
jae
popa
loopne
pop
push
pushf
ret
shl
xor
mov
aam
jg
sub
pop
add
std
cmp
jno
shl
aam
inc
in
mov
cmps
rcl
and
adc
xchg
lahf
push
mov
int
sbb
inc
leave
add
dec
repz
loope
and
mov
loope
and
jg
stos
outs
retf
sti
rcr
lock
sbb
ss
and
jb
mov
fmul
sub
and
xor
sbb
jbe
push
cmp
clc
cmps
push
mov
mov
xor
dec
test
into
sbb
in
cmps
mov
push
pop
shl
std
loope
dec
fcmovu
sub
data16
xchg
stc
xor
les
shl
adc
out
xchg
mov
pusha
out
mov
pop
rcr
lds
(bad)
(bad)
mov
pop
out
xchg
or
pop
inc
daa
pop
jecxz
xor
sar
pop
mov
adc
mov
and
push
dec
mov
jg
pop
dec
fild
aaa
mov
ficom
jns
aad
in
cmp
cmp
loop
ds
push
and
jecxz
xchg
xchg
mov
into
xchg
movs
xlat
arpl
data16
pop
push
sbb
jb
inc
out
sub
cmp
inc
sbb
push
dec
mov
repz
jno
pop
sub
mov
mov
dec
push
sbb
jecxz
adc
dec
popa
sub
jnp
lds
or
daa
cmp
je
jbe
jp
pop
sbb
cmc
sub
fldenv
xchg
repz
cli
add
mov
xor
jno
es
cmp
sub
jb
or
push
fcomp
or
mov
mov
popa
push
sub
sub
daa
(bad)
and
jle
pop
and
fbstp
and
cdq
(bad)
jmp
shl
data16
or
mov
pop
jmp
pop
mov
ret
add
cwde
inc
cmp
nop
pop
sub
loop
mov
ins
lock
leave
bound
mov
push
jae
(bad)
outs
(bad)
dec
mov
dec
push
mov
push
and
daa
aaa
sti
retf
sub
clc
mov
mov
ins
enter
mov
xor
add
jg
(bad)
rol
fisttp
repnz
in
xchg
pusha
pop
push
jmp
mov
lahf
xchg
sahf
pop
cli
ret
(bad)
ror
mov
push
fcom
stc
fimul
xchg
in
inc
add
std
clc
sbb
jo
adc
ds
stos
mov
leave
mov
sub
retf
int
push
dec
jge
mov
mov
mov
gs
jecxz
ds
ss
xor
popf
mov
fst
jl
cmc
push
xchg
ucomiss
dec
push
cli
not
iret
inc
bound
push
xchg
pop
dec
bound
ret
push
sahf
jp
std
mov
push
cld
push
jge
adc
out
shr
sbb
movs
and
push
pop
leave
xchg
mov
outs
push
in
loop
sub
mov
xchg
push
add
mov
cmp
(bad)
cmp
mov
fist
(bad)
push
xchg
dec
sti
frstor
mov
mov
in
out
vcvtps2dq
pop
int3
in
pop
xchg
cld
mov
rol
loop
pop
mov
sub
mov
dec
or
mov
push
mov
cmpps
mov
dec
cli
bound
xchg
jns
jb
nop
in
jns
fsubr
test
(bad)
fptan
xlat
stos
jmp
arpl
lods
(bad)
ins
adc
push
sbb
xor
std
lahf
ins
mov
or
xor
call
sub
pop
mov
out
ss
xchg
popf
push
fwait
lahf
or
out
mov
call
mov
or
cmc
(bad)
daa
int3
jl
pop
push
sub
jne
ror
retf
fwait
xor
push
cmp
stos
out
pop
xchg
jecxz
push
or
pop
pop
sahf
movs
retf
mov
loop
lahf
or
call
fbstp
mov
addr16
cmc
cli
pop
or
jl
aad
outs
(bad)
ja
inc
std
xor
in
cs
ins
pop
pop
pop
sub
pop
sahf
mov
dec
or
repnz
imul
ror
and
es
dec
retf
lods
inc
cmps
sbb
and
mov
cmp
sbb
inc
lea
jnp
mov
pop
push
leave
pop
pop
(bad)
xlat
push
push
jle
and
icebp
jmp
mov
jge
sub
dec
sti
and
pop
mov
adc
jns
lahf
pop
cwde
(bad)
hlt
inc
inc
mov
mov
inc
mov
pop
dec
xchg
std
sub
cmp
cmp
jge
mov
push
(bad)
aad
inc
dec
mov
cmp
mov
iret
test
adc
mov
or
popf
fnstenv
mov
sbb
xchg
push
sbb
cld
push
jmp
inc
sbb
dec
cs
inc
add
jbe
retf
xlat
enter
dec
retf
cmps
stos
mov
xor
pop
cs
rcr
ret
jmp
ds
cmp
or
xchg
cmps
or
xchg
jge
leave
addr16
aad
(bad)
cmps
movs
addr16
loopne
movs
fs
int
pop
jmp
(bad)
fsubr
call
paddsw
mov
pop
leave
dec
jae
add
mov
mov
(bad)
pop
jne
data16
cmp
or
mov
inc
jmp
retf
cli
nop
inc
sub
in
add
call
repnz
cs
stc
inc
adc
or
call
sub
scas
repz
jecxz
jb
jbe
sub
std
push
popa
inc
cmp
xchg
adc
xor
shl
pop
add
cmp
inc
xor
in
xchg
sti
loop
into
int
stos
push
aaa
push
adc
daa
pop
push
div
inc
nop
jmp
movs
xchg
mov
ds
enter
les
shl
pop
mov
mov
not
movs
pushf
jae
sbb
push
rcl
test
pop
push
jne
add
adc
std
out
rcr
cmp
jecxz
sti
adc
cli
std
or
and
inc
push
sbb
adc
or
pop
pop
pop
mov
stos
xchg
movs
jle
retf
pop
test
rol
dec
xchg
je
adc
xlat
fbstp
test
adc
pop
xor
mov
cld
lock
jo
sub
jne
stos
shl
das
call
dec
out
inc
shl
sub
imul
cmp
fldpi
sbb
out
mov
mov
xlat
push
dec
pusha
push
int
add
mov
aam
inc
pop
xchg
loop
adc
xchg
cmp
add
bound
inc
xchg
xor
fld
dec
jbe
mov
call
sub
loop
shr
mov
xchg
push
jbe
pop
mov
jmp
fstp
fs
push
lods
int3
mov
(bad)
retf
add
test
cmps
inc
push
push
hlt
int3
pop
outs
jmp
lods
ss
(bad)
aam
daa
xchg
adc
ss
loopne
mov
or
mov
xchg
adc
mov
mov
mov
mov
mov
and
and
loope
lods
mov
jns
lods
dec
cmp
sbb
lods
les
pusha
daa
dec
adc
ins
push
jl
sub
adc
test
out
popa
icebp
int
pop
in
fisubr
mov
mov
add
lods
outs
and
cld
(bad)
and
fld
mov
ror
sar
xor
or
jno
jmp
and
inc
(bad)
bnd
add
(bad)
add
sbb
mov
jl
add
and
inc
into
fcom
mov
in
loope
mov
mov
xor
test
lds
scas
adc
lea
stos
ja
lods
shl
cmps
imul
or
adc
jo
dec
sub
xchg
(bad)
xor
(bad)
mov
fwait
sub
push
std
jmp
jle
pop
cs
bnd
mov
mov
fstp
shl
jl
add
mov
cmp
sti
xlat
add
nop
add
cld
push
inc
sar
in
jae
in
pop
arpl
ins
mov
cmc
bound
cmp
in
xchg
daa
and
xchg
pop
(bad)
inc
sbb
dec
mov
jmp
orps
mov
outs
mov
push
push
movs
ret
pop
jns
neg
jp
mov
jno
stos
xchg
lahf
inc
cmp
cld
cli
gs
mov
shr
pop
int3
xchg
add
mov
imul
adc
jno
bound
xchg
inc
(bad)
jmp
or
sbb
inc
btc
adc
add
or
out
mov
(bad)
sub
mov
push
clc
adc
das
xor
dec
jmp
mov
push
lds
pop
mul
jno
retf
mov
push
aaa
scas
mov
into
push
and
pop
add
jb
cmp
add
call
xchg
pop
push
icebp
push
fidivr
sbb
cmp
mov
pop
pop
fwait
add
retf
add
mov
push
movs
jp
outs
ja
pusha
mov
and
pop
adc
mov
pop
adc
shl
inc
or
dec
aas
and
hlt
loop
scas
rol
test
stc
test
div
sbb
aaa
shl
shl
cli
call
and
inc
cmp
push
and
or
scas
sub
test
das
or
and
inc
add
jo
sub
out
fcomi
loope
jo
mov
xor
stos
repnz
cwde
cmp
(bad)
and
loop
or
dec
fdiv
aam
or
mov
mov
and
(bad)
dec
test
imul
(bad)
imul
sahf
and
int
jns
adc
daa
sub
hlt
jae
not
loope
loope
mov
outs
loope
nop
arpl
fs
jle
xor
mov
out
sbb
jle
(bad)
loopne
bound
sbb
scas
inc
(bad)
jnp
or
movs
and
ins
xchg
in
loopne
in
shl
or
ins
div
mov
push
push
(bad)
rol
cmp
push
sbb
orps
jmp
dec
jnp
xchg
les
in
xchg
stos
mov
add
fdivr
loop
lock
or
ss
out
xor
clc
mov
mov
sar
sbb
push
pop
lods
out
in
dec
add
movs
or
jns
push
add
push
ins
cmp
pop
shr
xor
xor
cmp
xor
mov
inc
imul
push
pop
call
mov
inc
out
xor
sbb
mov
je
pop
jg
or
add
xchg
cmp
ret
inc
icebp
mov
pop
xor
add
push
jb
jbe
xor
shl
ds
movs
push
mov
clc
into
pop
out
psubb
xlat
mov
mov
call
mov
scas
push
shl
mov
pop
fstp
fmul
mov
jl
fmul
int3
xor
mov
movs
jge
popa
mov
push
add
(bad)
lahf
mov
shr
movs
lods
mov
out
jg
nop
xor
push
jno
jae
push
les
adc
pop
imul
je
mov
ret
retf
and
sub
psrlq
loopne
dec
gs
(bad)
out
ret
fiadd
mov
and
push
retf
mov
aad
daa
pop
retf
retf
cmp
lods
and
cmp
test
test
sbb
mov
sbb
repz
add
pushf
jb
out
scas
repnz
pop
lock
movs
les
mov
add
ss
sbb
pop
cmps
jbe
mov
jl
mov
cmc
test
cld
mov
shl
mov
(bad)
out
push
dec
aam
push
jge
in
jmp
(bad)
or
xor
pop
retf
pop
mov
lds
mov
imul
adc
inc
sbb
stos
les
xor
xchg
inc
gs
xor
add
push
pop
(bad)
push
adc
out
rcl
fwait
jns
jmp
mov
hlt
inc
mov
xchg
mov
adc
xor
or
lock
cmp
js
mov
and
nop
sbb
ret
daa
aad
ds
(bad)
out
mov
stc
sub
ret
add
inc
ins
add
out
pusha
inc
sbb
xchg
popa
icebp
popa
add
xor
retw
and
fisubr
addr16
loopne
mov
sbb
scas
mov
or
clc
movs
sub
aad
fisubr
pop
es
pop
sub
mov
xor
int
and
pop
fsub
cld
push
mov
scas
jmp
or
int3
jae
test
ds
pop
daa
jbe
xor
scas
or
push
inc
(bad)
dec
bnd
jle
mov
push
(bad)
std
ins
pushf
xchg
jae
inc
pop
shr
push
jmp
call
adc
mov
dec
jne
jb
mov
or
imul
clc
nop
cmp
inc
cld
pop
mov
je
popf
mov
test
aas
inc
mov
ret
in
cdq
jns
sbb
or
retf
jns
sbb
cmc
mov
mul
xor
pop
(bad)
mov
in
sar
imul
or
pop
jle
shl
jmp
lods
retf
out
sub
call
sar
daa
push
dec
push
inc
aas
pusha
push
xchg
jne
lods
pop
push
jmp
cmps
(bad)
mov
(bad)
push
add
popf
shl
xor
fmulp
inc
jecxz
out
xchg
in
popa
mov
repnz
and
lods
sub
push
push
inc
cmc
imul
xchg
rol
and
aas
sar
bound
xor
inc
fimul
mov
xor
mov
pop
nop
pop
xchg
popa
mov
fwait
lock
xor
int
dec
jle
fidiv
cwde
mov
cdq
mov
lahf
pop
adc
rol
jbe
add
push
xchg
mov
sbb
sub
shrd
inc
aad
pop
lods
sub
pop
mov
mov
sub
je
dec
dec
adc
and
adc
sbb
shr
mov
popf
in
add
and
aad
inc
and
sub
cwde
mov
je
lea
cmp
fiadd
xchg
outs
fwait
data16
es
cmps
mov
movsx
jns
mov
not
ret
jno
pop
out
jl
inc
sub
xor
xor
jmp
clc
adc
xchg
pop
xor
movs
fld
mov
jge
pop
daa
add
mov
outs
adc
scas
mov
fldl2e
out
and
ret
(bad)
jecxz
sbb
ins
inc
xlat
sti
int
jae
push
shl
mov
add
add
inc
retf
xchg
out
mov
pop
jns
lds
sub
jne
fisubr
add
aad
lods
shl
ret
push
mov
sbb
mov
sbb
test
clc
ret
fidivr
dec
(bad)
daa
and
cli
fwait
dec
(bad)
iret
jb
repz
sbb
mov
out
(bad)
test
pop
fwait
movs
mov
mov
int3
shl
mov
mov
mov
jp
(bad)
out
lahf
sbb
shl
inc
sbb
gs
push
push
push
out
test
in
aaa
dec
cmp
fnstenv
jmp
mov
jp
xchg
aas
mov
cmp
or
(bad)
fcmovu
sub
xchg
movs
xchg
jmp
lods
jmp
mov
sbb
add
mov
jb
stos
lods
lods
bound
rcl
in
dec
pop
ins
dec
fwait
bound
cmps
nop
sub
push
pop
gs
jbe
and
cwde
cmp
call
push
jle
mov
or
or
outs
nop
inc
push
mov
xchg
pop
mov
pop
dec
jl
inc
pop
loope
xchg
fisttp
call
mov
cs
add
mov
fwait
scas
daa
xchg
hlt
into
ins
cmc
cmp
test
xchg
and
adc
push
loope
into
popa
popa
shl
popa
and
mov
ret
xchg
es
inc
push
ret
inc
stos
lock
loope
stc
dec
bnd
or
mov
push
jge
test
add
mov
jo
clc
dec
retf
aam
or
push
push
dec
sahf
in
cmp
push
jo
mov
sbb
sbb
and
(bad)
sar
(bad)
inc
scas
ja
jp
cmps
cld
psrlq
aam
cmp
pop
mov
jl
rol
stos
cli
rcr
mov
int3
push
dec
int3
dec
cld
inc
or
gs
dec
daa
or
mov
pop
jne
adc
pop
push
ins
enter
inc
mov
or
call
inc
out
retf
mov
and
push
mov
sar
or
aas
jo
dec
aad
movs
cmp
ficom
push
sbb
imul
push
inc
or
and
test
dec
adc
ds
dec
ins
xchg
repz
jns
sub
xchg
frstor
fisubr
and
je
hlt
xor
and
inc
repz
jbe
adc
push
aad
std
in
sub
mov
je
out
js
fisub
xchg
xor
aad
pushf
cmp
cmp
call
inc
fcom
and
mov
or
cli
dec
mov
cmc
pop
test
in
shr
dec
mov
or
jp
cmp
dec
pop
add
mov
sbb
mov
sub
fld
gs
cmp
mov
retf
es
jle
inc
data16
add
ins
in
es
repz
push
std
xchg
or
clc
mov
lods
fwait
and
je
iret
push
inc
and
imul
pop
outs
ss
hlt
ror
mov
call
daa
pop
(bad)
call
mov
mov
mov
pop
xchg
popf
(bad)
rol
call
dec
lea
sub
adc
sti
std
jb
push
test
or
sub
mov
add
sub
int3
jmp
xchg
pop
and
push
icebp
add
fwait
stos
pop
jne
popa
pop
repz
retf
add
jbe
icebp
imul
jl
push
push
or
(bad)
pop
pop
sub
in
lock
in
xchg
jecxz
ins
cmp
dec
rcl
fs
fsub
sbb
mov
cmps
sub
xchg
jno
outs
xlat
repnz
pop
or
cmp
cmp
movs
adc
(bad)
push
dec
pusha
shl
out
inc
inc
test
push
cmp
mov
(bad)
lahf
xchg
lods
(bad)
ror
ins
fxch
xchg
jge
push
stos
sbb
add
xor
add
ins
mov
xchg
aam
pop
popf
mov
or
pop
fisttp
mov
fst
addr16
gs
es
test
loop
add
jbe
cs
fadd
icebp
cmp
sub
jbe
mov
jp
js
lock
xor
loope
cwde
pop
fiadd
cmp
fdivp
call
adc
std
loopne
mov
cmp
shl
je
loope
mov
das
int
call
mov
scas
lds
xor
retf
sahf
pop
inc
inc
mov
mul
loop
call
bound
sbb
sti
(bad)
jg
mov
in
cmps
dec
xor
das
inc
mov
push
outs
in
push
aas
push
popf
inc
xchg
push
mov
in
gs
gs
enter
xchg
inc
int
mov
fstp
push
mov
popf
pop
pop
enter
cmp
dec
div
lods
clc
(bad)
je
push
cmp
xchg
mov
adc
int3
ds
or
xor
imul
xor
jbe
stos
push
int
in
pop
or
data16
int
jns
in
sbb
jge
and
in
cld
jmp
xchg
loop
or
fisttp
repnz
stos
adc
mov
push
pop
out
scas
mov
loope
jnp
mov
(bad)
repnz
cmp
ins
and
in
sbb
push
jmp
aam
out
ds
add
not
outs
and
and
xor
cmp
ds
or
cli
fsub
(bad)
(bad)
shl
mov
pop
dec
and
push
les
jl
loop
and
aas
push
inc
cmp
call
fisub
or
and
mov
stos
sti
loop
jecxz
mov
mov
mov
adc
(bad)
push
jb
std
mov
push
dec
fstp
xchg
xchg
xchg
outs
jmp
xchg
xchg
mov
jl
lea
mov
test
aaa
inc
(bad)
in
ret
mov
ret
jne
xchg
pop
mov
ficom
jnp
out
les
push
jmp
add
mov
mov
(bad)
sti
push
xchg
pop
outs
aad
or
scas
ret
xchg
retf
ins
es
inc
pop
das
inc
fiadd
jmp
push
(bad)
push
jno
xchg
mov
out
and
into
iret
cmp
gs
leave
xchg
scas
retf
cld
rcl
pop
prefetch
xor
add
mov
pusha
pusha
ins
adc
dec
xchg
cmp
xor
sbb
add
test
and
(bad)
dec
dec
push
pop
jae
mov
and
xor
mov
and
mov
adc
je
ficom
jo
mov
mov
cld
sub
repnz
mov
lahf
dec
out
loopne
pop
xor
inc
xor
aad
das
jg
jg
cmp
sub
std
outs
iret
pop
sbb
push
and
or
ss
xor
mov
out
dec
fild
xchg
and
jp
jne
fistp
mov
push
inc
imul
les
repz
mov
stos
xchg
call
scas
adc
mov
mov
and
(bad)
lods
out
jge
push
jno
dec
mov
out
push
xchg
arpl
sbb
xlat
or
adc
adc
cmc
sub
jecxz
push
outs
nop
icebp
cli
shl
push
mov
(bad)
mov
movs
fs
jg
mov
and
(bad)
out
js
adc
fwait
leave
repnz
adc
push
inc
mov
or
fwait
out
push
pop
or
mov
add
push
cld
adc
and
enter
mov
arpl
mov
jp
pop
and
add
jmp
mov
pop
lea
imul
inc
jb
pop
ja
(bad)
stc
fst
out
and
out
pop
int
inc
(bad)
jmp
mov
mul
jmp
bound
sbb
mov
inc
sub
ret
stos
loop
hlt
les
add
pop
cmovp
(bad)
push
pusha
lahf
add
popf
cdq
inc
sub
mov
scas
ror
cmp
cmc
and
cmp
xchg
ds
jg
xor
stos
retf
push
pop
add
das
data16
call
(bad)
or
xor
cli
jp
add
jne
sub
aaa
xchg
dec
pop
scas
pop
sub
sub
push
ror
push
inc
inc
(bad)
ror
lods
fisttp
add
inc
adc
push
dec
and
add
xchg
in
repnz
ss
and
cdq
movs
iret
jge
xor
cmc
pusha
shl
ins
cmp
out
jg
mov
inc
jbe
xor
mov
xor
out
cmp
push
mov
cmp
fadd
popf
mov
mov
aas
pop
ret
bound
push
lahf
ret
mov
pop
cmps
mov
and
int
adc
fwait
jae
xlat
pop
or
push
retf
mov
daa
dec
add
fbstp
jmp
(bad)
dec
adc
(bad)
ins
imul
xor
fild
aas
pop
retf
loop
loop
push
ret
xor
mov
sub
(bad)
jmp
int3
dec
jmp
scas
xchg
aad
push
push
out
inc
shr
pop
inc
bound
mov
iret
rcl
jno
repz
je
cs
fcmovu
loopne
out
nop
add
rcr
mov
mov
mov
adc
pop
and
adc
jno
call
jno
add
pop
jbe
in
or
xchg
mov
mov
in
outs
adc
popf
mov
push
les
pop
xor
sub
and
inc
mov
adc
add
faddp
jge
dec
and
out
pushf
repz
sub
(bad)
cmc
bound
cld
out
dec
sbb
xchg
jg
pop
pop
imul
inc
pushf
test
dec
push
ret
cs
push
mov
xor
pop
dec
mov
in
sbb
mov
aad
sti
sub
imul
stos
mov
fadd
jge
xor
xor
loopne
lods
sub
add
or
retf
mov
push
mov
cli
cmp
jne
mov
sbb
sbb
inc
and
pop
es
and
(bad)
xor
mov
pop
repz
(bad)
scas
push
xchg
cmps
jge
mov
shl
repz
jmp
cld
fild
es
gs
mov
sti
cmp
fwait
pop
loopne
adc
int3
mov
mov
mov
or
popf
sub
jae
(bad)
mov
cmc
jno
mov
lods
rol
and
jp
mov
ins
cld
pop
pop
adc
aad
imul
mov
sbb
push
xor
or
inc
add
jmp
ret
mov
pop
sub
xchg
cdq
jmp
jp
rcr
adc
pop
inc
in
jbe
push
mov
dec
add
mov
dec
jb
test
mov
movs
add
retf
lods
xor
jle
lock
mov
stc
mov
mov
fbstp
pop
out
loop
jecxz
loope
dec
fst
std
sbb
shr
cmp
call
aaa
inc
fistp
jbe
movs
push
push
pop
out
ret
mov
xor
adc
xchg
push
arpl
push
leave
pushf
adc
adc
inc
mov
mov
lahf
inc
cld
shl
(bad)
cmp
fcom
jo
and
add
mov
push
repnz
or
popf
into
mov
(bad)
nop
aaa
push
std
test
call
pop
pop
xlat
xor
(bad)
cmps
ja
inc
ins
mov
add
adc
mov
adc
mov
int3
fst
push
cmps
movs
imul
cmp
hlt
pop
(bad)
ins
pop
stc
xlat
int3
int
popa
cmc
(bad)
retf
(bad)
jns
dec
and
(bad)
jl
inc
clc
rcl
add
xchg
test
xchg
pop
jmp
shl
lahf
adc
jmp
lods
shl
mov
jg
dec
stos
add
es
test
in
mov
mov
int
mov
ins
mov
cld
ret
xchg
std
test
sub
int
pop
xor
xor
inc
pop
scas
cmp
mov
fidiv
jle
test
movs
adc
jne
sti
xor
(bad)
pop
mov
pop
int
push
inc
pop
in
bound
(bad)
ja
lock
int
lock
sub
mov
xor
loope
mov
repnz
dec
pop
cmp
rcr
inc
cmc
popa
enter
pop
jae
out
rol
mov
dec
stos
dec
pop
jne
mov
mov
or
push
out
sbb
popf
mov
jge
aad
sbb
mov
mov
cmp
push
rcl
jne
jo
addps
mov
jmp
daa
xchg
and
push
mov
inc
push
shl
ds
stos
dec
es
sbb
adc
dec
test
imul
pusha
mov
push
cmp
dec
jmp
fwait
movs
mov
les
popf
dec
jge
push
mov
stos
(bad)
push
adc
arpl
les
hlt
inc
or
sar
stos
add
popa
loopne
int3
and
mov
xchg
scas
pop
in
dec
int
push
or
dec
mov
out
push
(bad)
lods
frstor
push
lods
(bad)
in
jno
xchg
xor
fdivr
icebp
mov
inc
fild
jmp
mov
jl
cs
enter
cld
and
cmp
or
push
dec
das
add
cmp
std
aad
mov
sub
xchg
les
xchg
inc
retf
fcom
cmp
jb
dec
pop
addr16
sbb
stos
test
in
jne
fld
mov
and
add
mov
inc
sub
ins
(bad)
inc
(bad)
mul
mov
mov
jge
pushf
jo
cmp
push
mov
jne
loopne
mov
pushw
repz
inc
test
push
and
inc
ds
lds
mov
sbb
fadd
clc
in
xor
push
sbb
outs
cwde
and
scas
fisubr
test
cmc
pop
adc
sbb
test
jge
jmp
out
and
in
dec
xor
cmp
or
xor
scas
mov
std
jmp
jmp
movs
add
shr
(bad)
in
xchg
loopne
enter
fisttp
shl
imul
int
fisubr
push
jle
call
ins
ror
push
inc
loop
loop
mov
ins
mov
cdq
add
mov
mov
pushw
or
sbb
cdq
loope
mov
mov
mov
loopne
fcom
dec
jle
std
mov
ins
js
mov
push
les
hlt
mov
and
push
mov
in
(bad)
call
out
pop
mov
jle
(bad)
cmp
dec
or
in
bound
jno
adc
jae
mov
outs
iret
ficomp
pop
and
imul
ret
(bad)
retf
mov
xchg
dec
fs
mov
adc
cmps
dec
inc
jns
enter
sub
leave
mov
push
adc
jbe
inc
repz
mov
cli
xchg
stc
imul
xlat
aaa
inc
mov
mov
mov
xor
stos
std
or
sbb
ret
scas
lods
loopne
retf
out
repnz
mov
push
repnz
push
inc
fldpi
lock
fidivr
xchg
push
push
xor
daa
xchg
sub
loope
not
hlt
dec
sub
push
stc
out
imul
push
daa
inc
dec
js
xchg
stos
enter
ds
leave
arpl
jae
repz
adc
popf
xor
sbb
retf
dec
clc
inc
jp
sbb
push
dec
test
mov
and
mov
dec
icebp
imul
stos
cld
jg
cmp
add
jbe
add
(bad)
jae
sbb
xchg
mul
push
fld
imul
xchg
sti
test
jnp
scas
add
das
ja
fdivr
ins
std
mov
test
sub
sub
push
aaa
add
and
(bad)
xchg
mov
push
jne
nop
xor
rol
enter
cmp
and
fstp
scas
sbb
dec
and
pop
sbb
adc
xchg
neg
mov
mov
pop
fisttp
inc
jg
inc
cmc
cmps
dec
add
push
call
dec
out
add
fstp
popf
jns
sub
ins
cmps
push
cmps
jnp
mov
ins
in
cmp
imul
jb
jp
add
xchg
lahf
push
lods
adc
fidivr
loopne
pop
pop
jle
iret
arpl
push
mov
mov
cs
push
pop
sbb
stos
mov
aaa
sub
cwde
adc
pop
and
jo
mov
sub
enter
cs
(bad)
cmp
push
push
pop
in
shr
add
test
add
jle
sub
movs
sbb
fist
xlat
shl
push
adc
jmp
je
jne
lock
push
mov
(bad)
push
cwde
mov
retf
and
add
adc
push
cli
lea
or
div
popa
add
fistp
jns
jnp
mov
jns
test
aaa
lods
call
mov
mov
dec
mov
lock
xlat
ret
cmps
mov
xchg
cld
and
inc
fistp
lahf
adc
test
pop
lahf
ins
in
les
imul
jle
sub
pop
sub
aad
pop
fs
lahf
leave
push
cmp
mov
popa
fadd
data16
adc
mov
sub
rcl
jae
(bad)
xor
fdivr
pop
add
in
add
data16
adc
mov
mov
push
and
arpl
(bad)
sub
fwait
addr16
je
out
pop
leave
ins
retf
lock
jecxz
cmp
fmul
adc
neg
dec
xor
in
sar
mov
in
xor
jno
xlat
jb
dec
jno
dec
jae
mov
(bad)
jg
xor
xor
lahf
sbb
outs
movs
cwde
sub
xor
inc
mov
cmp
pop
sub
mov
aaa
or
inc
scas
adc
push
adc
loop
xlat
dec
setno
loop
enter
(bad)
pop
jnp
imul
mov
enter
stc
add
fsub
outs
rcl
add
pop
cmp
xor
pop
push
lea
cmps
or
dec
inc
mov
mov
test
add
es
bound
ds
js
xchg
jmp
out
jns
lea
gs
adc
inc
jp
mov
ror
fs
xlat
mov
call
ret
jns
in
(bad)
std
jns
cmp
jle
mov
push
out
and
rcl
ror
dec
sbb
xor
mov
shl
je
jmp
adc
adc
or
jo
cli
xchg
cmc
push
aas
sbb
repnz
cmc
dec
ret
add
cmp
push
into
mov
xchg
cld
mov
loop
sub
es
inc
(bad)
in
or
iret
or
ja
rcr
retf
add
ror
loop
iret
adc
fsub
mov
push
push
mov
daa
inc
mov
or
mov
repz
add
rcr
clc
mov
mov
cs
xor
jle
cmc
mov
clc
dec
xchg
push
inc
adc
jle
cld
pop
aam
lds
or
pushf
push
dec
and
pop
cs
ja
jns
jnp
sahf
adc
mov
call
test
push
jp
out
mov
inc
pop
cmp
and
dec
shr
loop
in
add
xchg
jg
mov
pop
cmc
add
jae
mov
popa
jp
mul
xchg
or
loope
mov
std
jbe
jno
inc
inc
jb
cli
sub
jg
pop
jno
sbb
add
fdiv
mov
imul
push
xlat
mov
push
dec
aas
xor
es
mov
push
retf
dec
mov
inc
pop
lahf
cmp
in
jno
int
mov
or
mov
push
xor
rcl
inc
xchg
es
mov
inc
push
sub
or
(bad)
mov
retf
and
push
pop
or
aaa
pop
mov
mov
mov
inc
jbe
mov
cmp
sahf
cmp
inc
mov
mov
xchg
mov
outs
(bad)
sub
cld
cmp
pop
pusha
in
fdiv
sar
movs
leave
shl
xchg
jecxz
pop
sub
jo
sub
or
fcomi
jb
dec
sar
dec
ja
mov
pushf
xchg
sbb
and
mov
test
jge
sbb
gs
jno
test
movs
bound
sub
cmps
in
mov
in
jge
call
push
or
js
mul
out
fld
frstor
dec
add
stc
or
push
adc
and
aas
cs
cmp
mov
push
es
or
push
xchg
add
loope
adc
push
mov
lock
fnstsw
std
sub
mov
in
shr
push
pop
push
mov
push
adc
in
call
xchg
jmp
xchg
xor
pop
cmp
sub
lods
imul
mov
dec
movs
(bad)
adc
mov
imul
arpl
fld
xor
movs
dec
cmps
mov
xchg
cli
add
rol
push
push
or
es
sbb
or
inc
mov
pop
lahf
lea
repz
std
es
in
enter
lds
jb
inc
dec
fdiv
iret
ret
cmp
sbb
jns
stc
shl
and
jnp
sub
test
xchg
mov
int3
dec
outs
in
out
aam
cmp
sbb
(bad)
fmul
repz
das
in
push
and
hlt
fist
sub
rcr
mov
shr
push
les
in
push
adc
jmp
jae
cdq
jbe
and
sub
xchg
and
add
cmp
dec
xlat
add
xchg
(bad)
cmp
retf
hlt
adc
jl
fucomip
jp
push
inc
in
cmp
pop
pop
sub
mov
jle
pop
push
cli
dec
or
xchg
in
pushf
es
jno
xchg
hlt
movs
pop
jecxz
xchg
jmp
xor
lods
in
cs
jb
jbe
fnsave
sub
dec
xchg
in
pushf
jmp
jp
cmc
or
mov
jnp
jb
stc
call
pop
xchg
sub
xor
outs
fsubr
push
test
jno
push
ss
mov
jg
nop
cs
xor
mov
cmp
add
mov
jnp
mov
add
iret
stc
inc
fldenv
into
mov
inc
loop
pop
shl
loop
sbb
mov
mov
bound
pop
jb
fisubr
mov
mov
ins
jge
js
cdq
in
add
retf
icebp
xlat
movs
fwait
push
stc
and
js
mov
ss
pop
mov
pop
push
add
jl
ja
add
and
nop
pop
mov
mov
jb
aam
gs
inc
lods
gs
mov
(bad)
fistp
lods
xor
popa
aam
pop
cmp
arpl
stos
inc
shr
stos
and
cld
mov
(bad)
xor
stos
push
aaa
jo
jge
in
xchg
pop
inc
jb
and
inc
jns
add
stc
mov
enter
cmp
cwde
adc
jg
retf
inc
arpl
bound
std
and
out
or
out
dec
or
push
jae
mov
inc
sbb
movs
test
adc
cmps
lods
call
adc
imul
mov
loopne
cmc
sbb
aad
out
or
mov
add
and
mov
nop
push
sub
aad
nop
pop
arpl
jnp
scas
cmp
push
data16
mov
sub
(bad)
sub
or
nop
sub
(bad)
mov
or
mov
sub
out
inc
cmc
aas
cdq
aad
push
sbb
imul
and
ins
mov
pop
pop
xor
sbb
jmp
not
mov
iret
pop
fs
push
mov
jl
jo
mov
idiv
mov
movs
push
retf
fild
sbb
mov
fs
inc
stos
xchg
or
jb
sub
push
cmp
jl
mov
lea
stos
out
mov
fcomp
mov
popa
add
jo
xlat
test
test
push
mov
or
cmc
sub
inc
sbb
cmp
mov
jns
js
adc
(bad)
or
mov
dec
in
mov
inc
and
xor
dec
adc
push
mov
inc
lahf
sbb
mov
scas
jmp
inc
push
rcl
dec
fstp
dec
xor
cli
push
sbb
mov
mov
lock
outs
cmp
inc
push
dec
cmp
push
inc
outs
daa
fwait
xor
jb
sub
mov
ret
mov
repnz
sbb
or
scas
jg
loopne
xchg
mov
add
arpl
jle
mov
arpl
and
mov
ins
adc
mov
dec
imul
add
jbe
rcl
sub
fst
shr
movs
(bad)
sahf
adc
ud2
push
sar
adc
bound
sub
or
repnz
pop
inc
mov
mov
jo
js
out
adc
mov
adc
add
cmp
xlat
fdiv
add
cmp
dec
ins
shr
or
jbe
cs
ror
mov
sar
out
xor
fsubr
xchg
mov
xor
adc
int
and
and
lock
mov
cmp
sub
pushf
dec
stos
repz
retf
mov
pop
enter
iret
daa
dec
loope
addr16
out
sub
jae
jae
imul
es
or
sbb
push
pop
out
shl
lahf
into
push
into
adc
pmaddwd
and
adc
je
pushf
adc
and
add
cmp
mov
int3
aaa
neg
pop
mov
add
shl
pop
test
mov
outs
jg
(bad)
adc
fwait
xlat
mov
jg
pushf
mov
popa
cld
xchg
nop
xor
xor
push
paddsb
les
add
inc
and
loop
mov
lods
je
fcom
sbb
(bad)
pop
xor
xor
ss
mov
inc
std
xor
js
jnp
adc
icebp
mov
out
mov
cmp
jl
jle
test
dec
pusha
jp
or
int
cmp
inc
int3
mov
rcl
fnsave
pop
lods
push
mov
call
inc
mov
xchg
bound
retf
iret
sbb
in
sub
adc
xchg
(bad)
mov
dec
jo
dec
cmp
call
mov
outs
dec
adc
jb
dec
loop
bound
scas
mov
scas
sub
lods
inc
(bad)
out
add
pop
lods
cmp
lds
rol
ins
pop
rol
(bad)
dec
sbb
add
movs
dec
adc
dec
mov
jmp
pop
inc
inc
ret
sti
scas
push
stos
scas
nop
push
sbb
cwde
sub
sti
push
or
push
xchg
sti
bound
or
jo
xor
cmp
mov
sub
loope
pop
addr16
lods
test
cdq
xchg
mov
leave
jl
jge
pop
pop
sbb
add
sub
pop
pcmpeqd
push
adc
int3
jecxz
sub
(bad)
stos
int
cwde
pop
js
data16
loop
mov
and
mov
push
sbb
daa
pusha
outs
mov
clc
call
and
pushf
popa
inc
jmp
retf
cmp
movs
das
push
cmp
leave
pop
add
pop
jno
mov
pop
mov
ret
jp
jmp
dec
(bad)
xor
xor
push
and
xchg
xchg
sbb
div
outs
inc
loope
test
cwde
mov
inc
bound
icebp
push
in
jmp
pop
test
and
push
aad
imul
aaa
inc
test
bound
lahf
fld
xchg
cmps
pop
cdq
sar
xchg
jmp
pushf
fidivr
mov
sub
call
add
das
sbb
or
and
gs
mov
and
out
mov
loopne
mul
push
mov
add
rcl
pop
cli
retf
jae
pop
mov
mov
add
mov
ret
rol
imul
test
inc
pop
add
cmp
push
sub
xchg
sub
pop
dec
or
sub
xor
push
mov
pop
xor
mov
jmp
mov
enter
jg
arpl
or
(bad)
mov
fs
xchg
(bad)
xchg
xor
and
(bad)
sar
imul
inc
lahf
xor
sbb
loopne
jp
repnz
dec
clc
inc
iret
add
xchg
imul
push
push
cmp
mov
cli
lea
stos
das
shr
ins
cmp
test
cmp
bound
stos
arpl
outs
adc
dec
lahf
jmp
int
mov
cmps
movs
xchg
jo
dec
sub
jge
xchg
push
imul
test
in
jl
outs
mov
idiv
xor
cli
add
sub
mov
adc
aaa
aad
fild
dec
pop
scas
mov
push
ins
ja
adc
scas
fcmovu
sub
pop
out
shl
ror
and
aas
hlt
into
mov
inc
outs
mov
push
jle
sbb
in
dec
in
dec
sbb
dec
das
(bad)
xchg
fisttp
mov
cmp
dec
mov
clc
popa
sub
out
and
daa
or
and
mov
rcr
test
mov
lock
inc
shl
aad
xor
mov
xchg
in
adc
arpl
push
sbb
(bad)
dec
out
push
inc
fld
xchg
mov
(bad)
test
sub
sbb
imul
mov
in
xchg
sbb
sbb
test
mov
add
xor
add
push
movs
fldenv
lea
and
data16
jno
adc
or
jecxz
or
jecxz
out
pop
pop
adc
mov
into
push
in
sub
rcl
movs
sahf
je
in
outs
or
sar
sbb
or
sub
stc
cmp
cmc
bound
aas
cs
pop
stos
leave
sbb
imul
(bad)
test
jo
leave
and
xchg
out
mov
popf
pop
aas
adc
adc
sub
and
mov
cmp
cmp
das
add
mov
outs
cwde
movs
or
stc
lea
push
add
push
pop
fidiv
or
pop
out
add
push
push
push
je
mov
dec
mov
sbb
mov
jecxz
jmp
scas
jl
sbb
je
adc
xor
popa
dec
sbb
xchg
or
cli
mov
jbe
adc
jmp
xlat
idiv
call
mov
fisttp
or
pop
ffree
push
fnstsw
hlt
add
push
ret
outs
aad
lea
ud0
dec
dec
icebp
add
xor
sti
or
out
out
xor
scas
xlat
inc
add
lahf
pop
aas
inc
mov
push
hlt
test
clc
scas
test
outs
push
pop
add
in
shl
or
mov
mov
xor
add
jnp
xlat
add
xchg
movs
imul
cmps
xchg
xchg
jg
loop
in
xchg
fisubr
loopne
dec
jle
dec
in
cli
hlt
and
push
mov
pop
imul
jns
mov
xor
xchg
std
pop
inc
jb
nop
int3
or
cmp
int3
and
sbb
sti
fwait
les
lea
push
pushf
fwait
and
fadd
jge
sub
stos
add
arpl
outs
leave
fld
call
retf
ret
and
inc
outs
or
and
or
inc
shl
cmps
ss
add
adc
aad
or
test
and
scas
mov
pop
jnp
ret
pop
pushf
pop
cli
mov
cmc
mov
sbb
into
test
call
push
fldln2
aaa
pop
or
es
or
pop
sar
cmp
inc
mov
xchg
push
out
jp
dec
outs
jns
cmp
jne
into
rep
ins
js
icebp
movs
adc
or
inc
xchg
out
fidivr
fisub
(bad)
fsubr
(bad)
pop
ret
leave
add
lahf
xor
retf
loope
(bad)
jmp
and
jno
sti
in
repz
ds
fsub
test
jp
sub
int3
pop
ja
dec
xchg
adc
data16
xchg
dec
call
xchg
pop
xor
cmp
sbb
mov
xchg
ror
jge
cmp
jg
mul
pop
or
fldz
sub
sbb
cwde
iret
test
call
push
loopne
fidiv
mov
xor
cmp
xor
dec
cmps
rdmsr
jns
in
arpl
dec
mov
mov
sub
aaa
clc
inc
sbb
lods
dec
(bad)
sbb
rcr
mov
outs
pop
jbe
lea
(bad)
aaa
xchg
cmps
mov
daa
lea
fld
ret
xchg
and
push
nop
inc
leave
cmp
fadd
sub
fs
sahf
jmp
sub
lds
cmp
dec
into
sub
lods
adc
popf
in
pusha
jns
or
pop
mov
popa
xchg
lahf
and
aam
inc
pop
or
jg
iret
cmp
pop
dec
inc
rcr
sbb
mov
xor
pop
aam
shl
lock
retf
mov
mov
push
popa
mov
push
iret
in
into
outs
push
clc
vmovlpd
lea
scas
add
push
int
fprem
test
pop
mov
xchg
les
es
retf
dec
and
int
(bad)
xor
push
mov
xchg
or
xchg
mov
push
adc
cmp
xchg
je
adc
push
test
push
adc
dec
nop
test
pop
pop
inc
out
xor
in
pop
jnp
rep
in
cmp
jns
js
pop
scas
mov
sbb
repnz
push
cdq
mov
add
imul
or
lods
out
add
daa
lock
rol
sub
sub
push
cmp
mov
(bad)
push
adc
outs
inc
sbb
dec
(bad)
aam
sti
lahf
icebp
imul
xchg
or
popa
xchg
in
jmp
hlt
outs
sub
xor
call
inc
leave
std
lods
lods
test
scas
movs
and
fld
(bad)
leave
pop
repnz
jp
cmps
lods
and
stos
dec
cs
or
and
add
cs
mov
cmp
outs
shl
data16
retf
sub
xchg
cmps
inc
stc
movs
pop
cmc
scas
mov
push
sub
fiadd
ja
or
dec
add
std
(bad)
int
push
cmps
sub
popa
cmc
(bad)
(bad)
clc
jbe
in
in
ins
pop
dec
mov
mov
std
movs
add
cld
int
sar
sub
push
jo
sub
pusha
add
repnz
xor
add
mov
push
add
shl
inc
arpl
fsub
call
pop
jg
push
xor
sub
xor
push
pop
daa
inc
dec
in
jl
jne
mov
(bad)
jmp
(bad)
not
mov
inc
inc
sbb
push
out
sahf
and
sbb
push
call
popa
sahf
sub
int3
lahf
mov
xchg
inc
sbb
sbb
cld
mov
pop
lods
dec
arpl
addr16
daa
jmp
psubsw
repnz
pop
out
xor
jmp
and
push
dec
retf
pop
mov
ja
push
mov
adc
dec
out
int3
or
xchg
jae
stos
add
out
dec
jns
cwde
ret
pop
cmp
sub
cs
lods
dec
mov
test
cmps
(bad)
cmp
out
xchg
cmp
fdivr
out
stos
add
mov
iret
fst
nop
and
jo
fnsave
lods
fcomp
jmp
aad
in
mov
(bad)
xor
jnp
in
mov
or
test
daa
sbb
mov
stos
(bad)
xor
mov
in
lock
aam
adc
cmps
int3
aas
dec
iret
ret
pop
loopne
(bad)
shr
out
jecxz
jns
push
stos
rol
mov
ja
push
fwait
pop
dec
jne
xchg
pop
ret
sbb
sar
leave
lock
lds
sti
aas
std
jo
add
repnz
push
pushf
movs
xchg
data16
fbstp
or
adc
jae
add
adc
(bad)
repz
or
shr
ss
xchg
fs
rol
or
mov
cmp
push
xor
adc
scas
sbb
xor
lods
cmp
fild
scas
idiv
call
shr
(bad)
pop
shr
(bad)
enterw
dec
test
fwait
push
sbb
pop
fwait
adc
dec
bound
jp
or
xchg
mov
int3
inc
into
loop
pop
sbb
test
cwde
loope
pop
cwde
cmp
or
jecxz
std
mov
hlt
lock
icebp
bound
stos
dec
jp
leave
sbb
out
or
sbb
neg
repnz
add
adc
clc
xchg
int
pop
push
xor
adc
add
sbb
ins
dec
pop
sbb
mov
in
push
test
jmp
mov
imul
pop
in
fidiv
xor
add
shl
push
fidivr
lds
in
rcr
xlat
cli
mov
cwde
int
add
fwait
push
leave
lahf
pop
pop
movs
add
jecxz
push
fist
adc
inc
idiv
jmp
mov
cmp
ret
into
cmp
add
outs
into
sbb
mov
stos
push
shl
push
mov
xchg
clc
popa
movs
mov
or
aaa
add
ins
dec
cmp
nop
fild
pop
das
sbb
inc
retf
sub
cli
cmc
ds
push
test
sahf
ret
jno
jmp
adc
xor
xor
(bad)
enter
pushf
imul
imul
rcl
pop
xor
and
pop
adc
in
add
outs
jbe
int3
std
mov
mov
mov
out
lahf
cwde
mov
pop
inc
ss
or
push
lea
aas
push
xchg
push
cs
sbb
mov
(bad)
sti
push
out
jp
inc
sbb
(bad)
and
sar
push
test
popf
in
retf
push
loope
dec
ficom
and
mov
imul
pop
icebp
mov
bound
or
das
mov
arpl
adc
xor
dec
cmp
shr
aam
loop
retf
lods
mov
xchg
shl
dec
xlat
xor
cwde
sub
adc
add
pusha
cdq
sbb
inc
pop
sub
test
jmp
shr
add
loop
imul
xchg
std
xor
mov
xor
in
or
jbe
pushf
xchg
add
out
mov
ror
fistp
pop
jnp
fdivr
mov
fcmove
fbstp
mov
ficom
hlt
mov
mov
inc
loope
xor
(bad)
shr
fst
sbb
clc
xchg
dec
rol
data16
inc
scas
fnsave
and
pop
loop
jl
mov
or
pop
sahf
test
pushf
dec
mov
mov
mov
ins
or
sahf
dec
add
ss
lods
out
aas
add
cmp
iret
sahf
xchg
shl
or
pop
das
fdivrp
jb
push
push
ja
(bad)
stos
xchg
or
into
push
sub
jmp
push
pop
dec
or
xchg
or
add
sbb
inc
icebp
enter
movs
or
fbstp
aam
(bad)
cli
loop
in
les
mov
or
pop
shr
lds
add
and
lods
sti
sahf
ja
push
mov
mov
xor
add
sbb
mov
jno
stc
mov
jnp
aaa
jae
and
mov
xor
or
xlat
js
dec
das
pslld
inc
dec
daa
xchg
pop
pop
sbb
add
neg
and
push
in
fs
inc
jno
push
cmp
mov
push
ror
cwde
inc
ds
ret
xchg
stc
int
xor
hlt
mov
add
mov
addr16
or
ror
(bad)
(bad)
dec
jae
ins
jmp
jp
jmp
mov
jmp
leave
sub
inc
popa
dec
push
push
push
test
loop
rol
fist
pop
repnz
hlt
test
jge
pop
mov
xchg
push
cmc
or
ret
jb
enter
push
fbstp
inc
imul
cmp
cmps
call
fsub
test
test
adc
ins
js
push
xor
or
movd
sbb
retf
cmc
xchg
push
inc
dec
or
dec
cs
add
(bad)
popf
mov
lds
inc
in
movs
xor
adc
dec
cmps
sub
adc
push
in
mov
cmp
ja
lods
mov
cwde
movs
out
popf
movs
mov
retf
mov
add
dec
call
lods
popa
or
pop
push
call
inc
es
mov
ins
sti
aam
sbb
arpl
movs
inc
fnstcw
hlt
jle
ror
out
push
ret
addr16
dec
loopne
gs
dec
lahf
cli
xchg
aam
mov
pop
and
jb
or
push
xor
pop
xchg
fcom
into
outs
or
mov
mov
ja
cli
cmp
mov
outs
jecxz
fild
mov
nop
rol
movs
jo
ins
jmp
outs
jb
out
bound
ror
ror
popa
xor
aaa
call
lahf
push
push
imul
pusha
push
rcr
sub
in
aam
test
dec
jns
stos
xor
and
push
das
xchg
mov
sub
add
jp
stos
mov
and
pop
and
push
(bad)
cmp
xchg
stc
lods
xchg
je
add
adc
loopne
dec
fs
cmp
sbb
xchg
or
retf
fisubr
sbb
mov
xor
iret
test
add
push
xlat
mov
add
inc
movs
repnz
mov
hlt
pop
cmp
in
rol
ins
mov
cmp
xchg
push
gs
loopne
xor
hlt
not
rol
cli
das
(bad)
inc
sub
mov
ds
cmps
add
push
iret
out
test
mov
nop
pop
jg
outs
mov
pop
and
pop
mov
std
movs
jmp
inc
(bad)
ficom
add
hlt
in
jp
xchg
lods
dec
cmp
in
add
inc
or
push
test
pusha
iret
arpl
stos
and
loop
out
icebp
bound
mov
cdq
lods
cmp
(bad)
repnz
aad
std
and
daa
xor
sar
xor
jmp
xor
dec
pop
icebp
outs
pushf
ins
and
dec
xchg
push
shr
into
cdq
cmps
mov
cli
pop
dec
xor
mov
lahf
ins
mov
test
stos
jns
or
jb
pop
ror
dec
dec
sbb
mov
imul
and
and
mov
ficom
out
mov
nop
test
pop
fwait
cmp
lods
enter
xchg
or
sub
in
add
fwait
ds
cmp
lahf
cmp
popa
leave
add
push
adc
outs
xor
push
outs
fbstp
cli
pop
cdq
nop
push
icebp
xchg
and
scas
xchg
push
stc
scas
pop
aad
mov
push
pop
jb
push
(bad)
out
outs
xchg
push
mov
movs
pop
add
loop
xchg
out
pop
hlt
leave
jl
mov
test
ret
pop
cmc
(bad)
dec
pop
div
dec
das
outs
sbb
fmul
or
mov
and
and
sbb
mov
mov
stos
les
and
fild
jb
mov
push
das
in
test
scas
inc
xchg
fs
aaa
mov
mov
and
addr16
stc
js
xchg
pusha
fsub
jbe
mov
push
rol
jbe
xor
pop
push
xchg
push
sub
mov
mov
inc
lea
fdivr
and
and
or
jmp
pop
idiv
stos
push
ins
fs
add
mov
pop
test
mov
fwait
ret
jg
in
daa
xchg
(bad)
jge
jo
out
loope
fisub
jp
mov
jmp
push
push
mov
not
test
fild
mov
jmp
mov
out
mov
fadd
retf
xor
ins
or
inc
sub
mov
inc
loope
call
pop
in
jge
test
imul
cmp
add
das
enter
mov
mov
pop
cmp
(bad)
cld
scas
stc
inc
aaa
cmp
fist
aaa
fsubp
push
mov
aam
cmp
(bad)
fbstp
(bad)
mov
inc
div
push
mov
xor
mov
in
jo
adc
das
cmp
outs
arpl
lock
adc
leave
sub
mov
mov
pop
jp
in
mov
push
pop
pop
and
xchg
push
idiv
add
add
cli
mov
jg
pop
xlat
out
repnz
leave
cmp
jmp
mov
dec
push
movs
outs
nop
jmp
sti
rcr
out
sbb
sbb
mov
int3
push
add
rol
clc
push
data16
imul
mov
inc
(bad)
ja
xchg
test
pop
mov
rcl
mov
and
movs
xchg
vandps
jns
(bad)
xchg
mov
in
js
cmp
sub
movs
ins
adc
sbb
int
test
stc
pop
sbb
stos
mov
movs
dec
sbb
scas
sub
pop
int3
and
mov
or
(bad)
in
xchg
fld
mov
jns
out
and
mov
add
or
jbe
movs
into
cmp
adc
pop
and
jbe
lods
outs
test
pop
jle
out
cwde
cmc
in
xchg
or
pop
pusha
retf
aad
(bad)
dec
or
adc
jecxz
fistp
dec
jmp
lods
pop
and
pop
pop
cdq
mov
add
shr
aaa
test
adc
out
loope
push
xor
push
scas
movs
mov
fst
cwde
(bad)
dec
sbb
mov
pop
(bad)
ins
pop
jo
xchg
sti
shr
or
lock
push
mov
clc
cmps
fstp
mov
pop
rcl
and
jo
aam
neg
dec
cmc
pop
shr
popf
iret
shr
inc
mov
jb
in
mov
lock
lods
dec
push
popa
xor
jae
jbe
rcr
mov
test
cmp
mov
out
out
mov
ret
mov
lock
pop
gs
ja
fild
push
clc
pop
rcl
das
sbb
and
push
test
outs
rol
sub
mov
and
inc
inc
mov
in
push
cli
lods
cli
out
out
add
adc
jmp
sbb
jmp
aad
mov
add
int
dec
aad
mov
addr16
and
mov
mov
pushf
mov
push
ja
xor
jae
pop
es
push
mov
out
je
mov
popf
inc
and
stos
(bad)
inc
dec
mov
retf
jae
jge
movs
cmps
mov
sub
rcr
cmp
shl
xchg
mov
inc
ret
or
movs
mov
out
mov
mov
inc
or
xchg
sbb
adc
rcl
cmp
gs
repnz
xor
dec
test
xchg
test
out
in
dec
or
jl
cmp
lods
cmc
fldcw
jb
push
outs
pop
dec
out
cli
ror
add
dec
ret
int3
mov
fnsave
mov
or
or
loopne
nop
mov
cmp
mov
mov
loop
mov
mov
inc
sti
inc
xchg
push
fadd
xor
daa
std
ss
rol
sbb
in
pusha
sbb
(bad)
(bad)
xchg
enter
in
outs
popf
xchg
rol
sbb
mov
loope
cmps
push
sub
xor
aas
(bad)
fldcw
hlt
and
jb
sahf
aaa
inc
dec
fs
aad
enter
mov
jo
mov
dec
jae
fwait
mov
inc
mov
xor
inc
daa
mov
int
jecxz
push
adc
adc
mov
icebp
xchg
rcl
icebp
out
repnz
inc
pop
sti
sbb
cdq
xor
out
ror
and
fcmovu
push
fnstsw
cli
mov
(bad)
imul
js
arpl
out
sar
fmul
push
mov
mov
in
aad
inc
es
imul
repnz
mov
push
inc
pop
sub
ins
pop
sub
jns
mov
adc
sahf
mov
adc
cmp
pop
shr
add
iret
stc
and
sub
inc
test
add
ds
idiv
lahf
in
leave
add
mov
cmp
sub
div
or
not
cmps
gs
or
xchg
stos
and
shl
mov
mov
inc
xor
push
enter
loopne
pop
ss
jae
and
mov
retf
cmp
add
out
add
daa
aam
test
inc
inc
xchg
sub
test
cmps
push
es
bound
mov
sbb
xor
cmp
outs
mov
sbb
inc
loop
pushf
mov
lods
pop
xor
dec
or
test
jecxz
dec
lock
xor
pop
test
or
mov
(bad)
fiadd
sti
cmp
mov
xchg
mov
std
sbb
pop
or
pop
les
int3
mov
(bad)
rcr
push
cmp
pop
dec
cmp
leave
push
push
add
popa
inc
sub
sbb
and
dec
dec
xor
cmp
or
daa
mov
fs
xchg
xor
mov
and
les
sub
fldenv
mov
mov
cwde
mov
adc
xor
push
test
loopne
lds
gs
cmp
pop
daa
fiadd
fxch
cmc
fidiv
jo
push
div
enter
xor
pop
mov
stos
lock
arpl
and
jae
addr16
aam
aaa
out
int3
or
aas
shr
stc
and
jo
pop
and
inc
cdq
addr16
dec
std
test
cs
jno
ret
fucom
popf
sbb
cmps
out
mov
out
dec
push
sbb
dec
pop
inc
add
xor
mov
ins
inc
xchg
not
cmp
mov
inc
in
push
or
popf
sub
and
rcr
(bad)
cli
xor
pop
mov
jnp
fisub
les
mov
mov
and
dec
std
mov
out
out
sar
int3
mov
jo
xchg
inc
pop
adc
sub
ds
pop
call
aas
add
mov
call
adc
inc
jp
(bad)
out
cmp
pop
ins
loopne
outs
xor
(bad)
data16
test
ja
(bad)
xchg
or
fld
inc
push
frstor
scas
jmp
cdq
rol
cdq
sbb
leave
ins
jnp
mov
pop
bound
or
ss
ss
movs
mov
add
ret
pop
ds
je
ret
cld
and
or
(bad)
out
imul
adc
mov
or
scas
into
push
push
fcom
cwde
(bad)
(bad)
pop
add
mov
jmp
pop
xchg
aad
jg
mul
dec
dec
pop
add
pushf
shl
mov
jmp
(bad)
xor
inc
lds
jo
cwde
xchg
add
scas
loopne
aas
adc
outs
and
daa
pop
mov
rol
mov
mov
cmp
fwait
test
fidiv
jmp
loope
int3
or
icebp
iret
hlt
cmp
or
jne
inc
jo
pushf
(bad)
ret
inc
jo
das
mov
scas
pop
(bad)
push
pop
sbb
dec
mov
mov
push
bound
fidiv
mov
inc
jecxz
add
neg
not
rol
shl
and
ins
lds
rcl
mov
or
daa
aam
ror
mov
jns
jmp
fstp
or
aaa
bnd
mov
(bad)
lods
xchg
pusha
and
dec
mov
push
xor
call
aad
mov
movs
jnp
lods
mov
push
dec
scas
push
loopne
arpl
cmps
pop
aad
and
push
mov
sub
jae
iret
ficomp
or
mov
jg
mov
dec
jo
cmp
cli
xchg
rol
lods
jle
or
popf
inc
dec
rcl
in
scas
and
cmp
push
in
cs
cwde
imul
scas
jb
jge
shl
(bad)
xor
gs
jae
lock
fld
mov
add
xlat
jecxz
dec
out
mov
inc
cmps
ja
shr
xor
add
jmp
cmc
push
daa
fmul
xchg
cmps
jp
jle
push
cmp
retf
pop
aas
shl
cmp
xchg
out
xor
jnp
cmps
pop
add
add
jno
or
pop
xor
xor
mov
adc
popa
push
scas
jle
xor
ret
into
xor
cdq
mov
push
pop
cwde
mov
cwde
adc
sbb
mov
or
mov
push
popa
movs
mov
enter
fwait
xlat
loopne
jecxz
in
test
add
add
cmp
stos
arpl
jl
clc
adc
and
cdq
ret
pop
adc
cmp
sbb
mov
xchg
icebp
inc
lea
movs
mov
test
jecxz
inc
loopne
sti
sbb
scas
outs
lahf
inc
cmp
sbb
push
adc
adc
movs
ds
sbb
cmp
pop
dec
icebp
aad
idiv
ret
pop
imul
loopne
ret
test
xlat
or
pop
inc
mov
xchg
mov
pop
(bad)
and
or
rol
sbb
lods
call
out
aam
adc
inc
cmps
xor
inc
scas
add
ins
mov
int
inc
imul
jge
xor
push
push
xor
popa
iret
popa
and
xlat
jno
mov
pop
mov
adc
dec
clc
mov
cmp
repz
pop
add
xchg
cmps
or
(bad)
mov
mov
loopne
rol
nop
mov
pop
push
(bad)
pop
aam
add
imul
xchg
cmc
fild
int
mov
cmp
lods
push
enter
push
mov
jg
les
jl
ror
(bad)
sub
fcomi
inc
(bad)
pop
sub
cmps
in
pusha
mov
xor
das
arpl
icebp
fisttp
push
std
aam
dec
xchg
mov
rcr
or
test
sbb
gs
fcomp
mov
inc
mov
clc
xchg
push
sub
dec
cmps
sbb
pop
aad
mov
mov
inc
div
push
inc
push
xchg
fstp
and
pusha
mov
mov
cmp
pop
sub
in
retf
movs
fst
addr16
xchg
ret
mov
push
sar
std
not
jge
dec
sub
push
pop
mov
in
fs
mov
mov
test
lahf
sbb
fistp
jmp
ds
inc
test
rcl
pop
push
lods
cmp
aas
pushf
cld
add
pop
rcl
scas
cmps
jnp
add
jno
je
paddusb
stos
not
imul
or
out
mov
mov
movs
xchg
push
call
les
xor
aam
mov
lds
les
push
mov
jb
jl
jno
icebp
push
icebp
and
or
cmp
nop
scas
dec
fwait
sbb
cwde
or
retf
push
ret
adc
mov
xor
int
jmp
push
pop
sub
movs
popa
icebp
adc
push
xor
xchg
xor
adc
aad
xor
xchg
sbb
sbb
pop
sbb
pop
hlt
xchg
imul
adc
pop
rcl
stos
ficomp
xor
stos
sub
cmp
je
mov
or
jns
jnp
mov
sbb
ss
mov
or
popa
pusha
int3
fild
add
dec
ss
clc
sub
push
jne
ds
jmp
push
mov
nop
mov
add
addr16
ret
pusha
adc
pop
int3
add
jbe
xor
loop
push
sbb
xchg
dec
out
not
call
xchg
mov
(bad)
add
push
test
mov
jg
or
jmp
jbe
pop
mov
cs
or
(bad)
mov
mov
push
lods
cs
xor
int3
imul
aad
and
or
sbb
ffree
push
cmp
loope
xor
dec
idiv
(bad)
xor
cmp
dec
inc
push
xor
outs
xchg
cmp
idiv
sahf
stos
or
pop
pushf
aad
and
pusha
ja
mov
in
and
adc
in
scas
pop
ret
int3
out
ja
fidiv
or
lock
repz
inc
popa
push
inc
repz
js
shl
jae
pop
mov
js
out
push
push
js
lods
lods
push
fs
push
inc
jl
xor
add
dec
sub
mov
xchg
mov
leave
inc
outs
hlt
cmps
les
jl
aaa
jl
inc
mov
xor
sub
jnp
mov
add
imul
ja
jecxz
rcr
(bad)
or
out
(bad)
adc
xor
or
repz
adc
retf
mov
ins
aas
das
pusha
pop
sub
out
xor
iret
iret
loop
or
cmps
jmp
retf
inc
jb
dec
aaa
jo
rcl
movs
(bad)
cld
test
add
(bad)
jg
outs
sar
pop
push
xchg
inc
(bad)
cmp
push
push
or
mov
xor
mov
ffree
pop
push
arpl
add
or
not
mov
scas
in
in
mov
call
in
mov
imul
jnp
add
jecxz
stos
ins
ins
sub
xchg
xor
pop
and
jecxz
pop
or
retf
imul
sbb
jnp
mov
inc
jmp
sbb
dec
into
cmp
and
xlat
push
push
fiadd
mov
imul
cmp
dec
push
xor
aaa
jp
pusha
push
inc
movs
xchg
push
iret
sbb
(bad)
loop
lahf
or
jns
xchg
scas
stc
in
nop
shl
aaa
mov
ss
jo
vmread
mov
jb
lahf
add
leave
sub
mov
dec
leave
sub
loop
retf
sahf
inc
jecxz
shl
pop
scas
les
popa
xchg
and
sub
add
dec
sub
out
lock
mov
pop
dec
aad
cmp
imul
jb
test
les
enter
add
sub
cmp
stos
or
adc
pusha
sbb
and
add
xchg
daa
sub
fwait
mov
hlt
pop
sbb
xor
lea
scas
mov
add
mov
dec
daa
and
jno
cld
test
mov
out
idiv
mov
rcr
cmp
cmp
inc
ficomp
push
jae
and
push
ja
(bad)
retf
(bad)
scas
xlat
jo
cli
add
push
retf
es
imul
add
(bad)
std
inc
lods
test
push
js
jb
adc
fldenv
lods
jb
adc
int3
adc
sbb
push
sbb
arpl
dec
fucom
(bad)
or
add
push
nop
xor
ror
push
movs
daa
dec
pop
cld
and
push
mov
pop
fnstenv
cmps
inc
into
cmps
xchg
xchg
xor
ret
mov
ret
dec
cmps
call
hlt
dec
pushf
push
inc
(bad)
xchg
sbb
popf
or
push
xchg
sub
cli
arpl
leave
lods
fist
inc
xchg
(bad)
dec
push
cmps
(bad)
mov
(bad)
data16
and
(bad)
movs
push
repz
repnz
adc
jmp
fsubrp
push
sbb
mov
mov
(bad)
mov
inc
jmp
xlat
(bad)
push
test
add
lea
retf
repz
repnz
stos
sbb
test
mov
cmp
out
or
xor
adc
adc
mov
jnp
mov
xor
scas
loope
test
mov
jns
jg
(bad)
pop
(bad)
iret
pop
(bad)
cmp
and
mov
dec
xor
imul
jnp
ss
mov
popf
nop
mov
jecxz
sbb
jle
das
xchg
bound
pop
gs
inc
mov
pop
fst
pop
lds
outs
outs
pop
popa
lea
xchg
gs
add
retf
adc
xchg
and
jle
call
pop
das
jp
xor
push
fldenv
jle
sub
pmulhuw
and
ret
sub
mov
add
jl
ja
cmp
jb
inc
dec
bound
(bad)
std
in
or
push
cmp
mov
pop
xchg
sub
scas
(bad)
dec
test
xor
retf
or
cmp
aaa
mov
in
sbb
mov
jg
mov
sbb
bound
sbb
xor
or
pop
daa
mov
enter
dec
test
faddp
into
pop
add
in
fisub
cmp
(bad)
xchg
neg
sbb
int3
imul
xchg
pop
sti
inc
and
xor
mov
cmp
out
div
push
add
jmp
dec
cmc
les
xchg
shl
das
(bad)
das
mov
loop
sub
jl
push
cmps
xor
cmc
or
out
outs
das
in
adc
aas
dec
jns
mov
jb
cmp
mov
fbld
cmp
iret
dec
mov
xor
add
adc
in
or
addr16
pop
ja
dec
fs
inc
repnz
mov
and
mov
sub
mov
mov
jmp
int3
retf
mov
adc
push
stos
or
and
xchg
pop
arpl
push
xor
fmul
dec
fsubr
sbb
cmp
aaa
adc
pop
(bad)
jl
push
cmps
dec
int
stc
rcl
mov
fiadd
jecxz
push
or
out
(bad)
cmp
movs
std
cmp
sub
or
fist
sub
clc
adc
inc
adc
sbb
jge
push
cmps
push
lods
test
or
arpl
push
adc
rol
push
rol
inc
mov
xchg
pop
rol
call
out
cmp
in
int
mov
inc
aas
jmp
ds
push
fcmovne
mov
jae
cmp
fnsave
fistp
jne
push
jns
rcl
add
cmp
adc
leave
mov
jecxz
int
jmp
xor
mov
jg
add
push
scas
(bad)
pop
fsubrp
jnp
movs
leave
icebp
or
rcl
imul
pushf
into
imul
pushf
pop
fnstenv
aad
sub
and
dec
jg
pop
in
pop
push
mov
sti
std
ins
dec
push
or
das
and
test
mov
push
mov
mov
movs
mov
pop
fadd
addr16
mul
ss
or
cli
ret
inc
into
lds
push
xlat
mov
(bad)
inc
jle
push
and
adc
jmp
adc
dec
sbb
xchg
loope
in
hlt
mov
pop
jb
mov
xchg
nop
mov
rcr
(bad)
stc
sbb
fild
mov
pop
or
enter
xchg
jo
xchg
dec
add
sbb
cs
call
cdq
popa
dec
dec
inc
xchg
or
vucomisd
rcr
xchg
or
pop
imul
daa
(bad)
pushf
das
test
mov
jmp
test
shr
mov
data16
xor
dec
loope
push
(bad)
jge
mov
add
pop
push
les
call
push
mov
and
push
je
inc
adc
daa
repnz
add
imul
jecxz
pop
fdivr
test
jmp
or
imul
call
sub
in
and
lahf
loope
xchg
inc
push
test
add
sbb
cmc
dec
lea
sar
pop
inc
push
rcl
mov
shl
sbb
icebp
push
das
bound
aas
jg
xor
fs
mov
mov
aas
lahf
xchg
xor
retf
push
jg
xor
(bad)
adc
les
in
xchg
retf
pop
movs
xor
push
mov
mov
fidivr
jmp
adc
mov
pusha
mov
rcl
and
test
(bad)
xor
dec
mov
sub
xchg
ins
xchg
xor
xchg
dec
movs
push
sbb
retf
push
adc
push
sub
push
jge
mov
cmc
sub
inc
xor
xor
pop
inc
xor
xor
adc
mov
dec
mov
pop
sub
add
fucomi
mov
mov
(bad)
std
and
push
fimul
mov
adc
dec
xchg
arpl
aaa
fmul
xlat
xor
mov
fst
xor
push
sbb
or
pop
jl
in
pop
sbb
mov
dec
xchg
fs
jg
inc
add
xchg
mov
inc
(bad)
fsubr
enter
int
xor
jne
mov
cmps
xchg
pop
test
leave
scas
push
cmps
pop
test
push
fld
add
sub
movs
inc
ins
xor
lods
push
dec
or
pop
call
mov
cmp
add
add
mov
lahf
xchg
pop
pop
sub
or
sub
test
pop
xchg
inc
dec
add
pop
bound
in
popf
call
and
inc
adc
adc
push
adc
sbb
sbb
and
mov
lods
fst
outs
out
pop
lods
mov
aas
add
hlt
jnp
popf
(bad)
xor
loope
add
fs
call
cmc
(bad)
retf
mov
movs
je
es
in
and
dec
adc
test
mov
mov
pop
imul
jmp
mov
out
lds
pop
ret
push
clc
mov
mov
movs
cmp
(bad)
cmp
add
arpl
(bad)
mov
fisub
push
adc
in
repz
sahf
pop
je
pusha
jmp
xlat
gs
mov
sbb
add
neg
or
out
in
and
jns
fs
test
mov
mov
cld
dec
or
nop
lahf
xchg
add
lods
js
pushf
pusha
jo
jno
mov
push
gs
jnp
sahf
int
cld
xchg
stc
sbb
pop
xchg
outs
mov
dec
pop
repnz
or
mov
add
ret
fdivr
retf
mov
loope
pop
xor
and
jb
sahf
mov
stc
cmp
rcl
mov
cmc
popf
ins
adc
shr
or
push
jg
inc
dec
mov
test
sbb
dec
jmp
mov
repz
(bad)
loopne
ds
push
enter
stos
aad
loop
clc
push
clc
mov
dec
ror
ss
mov
pop
jmp
mov
addr16
push
xchg
jg
pusha
mov
cmp
int3
cmp
nop
data16
push
cmp
cmp
jns
mov
sbb
mov
aaa
add
inc
(bad)
jns
rol
(bad)
adc
sub
test
push
jle
icebp
and
mov
int
jecxz
xor
fimul
rol
cmovl
nop
add
ret
in
push
pop
fbstp
pop
neg
jmp
mov
dec
std
scas
sub
pop
jb
jg
inc
cdq
test
pop
cmp
ss
imul
mov
sub
jl
sub
push
leave
inc
pop
add
xor
(bad)
add
das
adc
iret
ss
nop
pop
in
mov
out
inc
test
cwde
les
leave
cmp
mov
sub
ud1
push
push
int
test
xlat
arpl
stos
sbb
dec
push
ror
sbb
es
push
add
adc
mov
and
daa
in
push
rcr
call
xchg
stos
push
sbb
sahf
adc
cmp
leave
ins
xchg
xchg
ret
fist
mov
out
cdq
adc
push
push
out
int3
cmp
in
popfw
or
lods
adc
(bad)
(bad)
push
shr
repz
push
sub
pop
loope
int3
lods
clc
jl
repz
push
xchg
sti
(bad)
jns
popa
xor
and
ja
push
or
lahf
cmps
mov
arpl
inc
or
cdq
sub
or
aaa
jb
hlt
or
fcom
or
repz
and
xchg
pop
repnz
lea
dec
xchg
cli
adc
ret
pop
out
cmps
sbb
pop
scas
dec
ret
clc
push
clc
add
and
and
and
movs
cmp
stc
sub
imul
add
leave
das
add
xor
hlt
cmp
pop
jne
push
mov
std
movs
bound
mov
outs
xchg
mov
push
scas
sub
cmc
hlt
sbb
movs
in
add
js
dec
in
rcl
adc
sub
imul
xor
pop
dec
repz
cmp
push
inc
xchg
jecxz
dec
push
cmp
adc
and
adc
fbld
out
lahf
or
or
ror
pushf
sbb
popf
mov
test
pop
xor
(bad)
outs
xchg
pop
jg
loope
adc
inc
push
or
dec
mov
and
push
and
jne
ins
adc
dec
cmc
sub
scas
(bad)
(bad)
jmp
out
out
cmp
stos
adc
retf
arpl
in
scas
(bad)
loopne
cwde
rol
jmp
lahf
shl
ret
and
mov
xor
ins
or
test
dec
inc
bound
shl
sbb
and
mov
cdq
iret
mov
jmp
fnstenv
cld
and
xchg
xor
xchg
lods
push
mov
cmps
or
jecxz
das
pop
or
and
or
push
and
cwde
mov
mov
mov
xchg
push
inc
movs
retf
leave
stos
(bad)
sub
jge
sub
stc
jns
in
and
stc
mov
sar
loop
inc
cmps
pop
out
cmp
mov
xchg
iret
jecxz
call
fistp
dec
jo
sbb
mov
sub
pop
int
not
call
push
mov
and
ret
sbb
bound
mul
adc
mov
dec
popa
fisub
adc
gs
adc
xchg
adc
pop
ins
fcomp
(bad)
stc
sub
cld
jns
ficom
inc
hlt
ret
sub
hlt
movs
jns
cld
dec
dec
(bad)
or
inc
cmp
stos
cmp
adc
xchg
ins
aad
inc
imul
sub
cwde
add
inc
mov
mov
fnstcw
fisubr
sahf
inc
xor
clc
loop
push
cmp
rol
lds
fiadd
ret
sbb
call
(bad)
fsub
fwait
outs
arpl
xchg
add
(bad)
xor
lahf
or
dec
push
sub
into
ret
xchg
adc
jecxz
add
inc
daa
shr
es
cmp
int3
add
out
sti
(bad)
sub
sub
mov
adc
ins
js
mov
xchg
mov
xchg
test
xchg
cmps
aas
jo
ficomp
add
hlt
mov
jg
pop
sub
inc
daa
push
loopne
adc
add
push
icebp
dec
xlat
dec
in
loope
stos
jne
push
dec
mov
adc
pop
sahf
mov
aas
ss
dec
jns
cmp
adc
cmp
iret
mov
in
mov
xchg
xchg
xchg
or
mov
add
mov
test
movs
mov
imul
aaa
pop
inc
xchg
adc
pop
ss
push
das
pusha
call
xchg
mov
jg
and
fisub
pushf
or
pop
push
movs
mov
mov
mov
movs
fdivr
and
cli
pop
sub
and
test
jp
adc
or
xchg
arpl
imul
pop
mov
retf
jge
in
jmp
adc
and
jecxz
movs
lock
aad
shr
or
iret
or
pop
in
cmp
pop
jo
imul
push
shr
mov
dec
push
push
ja
nop
neg
mov
loop
pop
jae
cmp
je
push
add
test
mov
(bad)
mov
adc
xchg
cdq
add
loope
call
jb
mov
jb
jno
jnp
ss
pop
sub
movs
(bad)
mov
cmc
imul
aad
std
loopne
or
test
cmc
fidivr
pop
mov
add
sti
mov
jnp
loopne
cmp
xchg
jmp
or
mov
mov
xchg
xor
enter
jnp
mov
mov
jg
scas
cld
cmp
push
cmp
xchg
sub
pop
xchg
dec
das
dec
xor
mov
xchg
int3
xor
adc
xor
jae
xchg
and
in
push
iret
in
fild
icebp
lea
inc
dec
sbb
pop
rcr
push
ja
push
adc
leave
add
jae
adc
mov
sub
xor
call
inc
sub
push
aam
test
into
cmp
mov
xacquire
lahf
adc
popf
dec
repz
add
xchg
sub
cld
jae
cmp
or
add
adc
mov
cmps
sbb
movntps
pmaxub
cmps
xlat
fsub
fucomi
xchg
lahf
mov
scas
bound
out
dec
push
test
cmps
setbe
sub
jns
stos
cli
(bad)
js
jl
scas
xchg
mov
sub
imul
(bad)
jb
ins
dec
loope
cs
daa
or
ret
and
xor
test
loop
jns
mov
ja
jno
and
cwde
push
sub
js
inc
scas
mov
pop
(bad)
adc
stc
sar
add
add
sbb
out
sahf
cmp
inc
test
push
add
sub
cld
xor
xchg
pushf
test
xchg
push
xchg
fucomip
repz
ds
sbb
xchg
and
out
xchg
ret
call
push
mov
es
mov
lock
cmps
cwde
dec
inc
ins
mov
cli
das
aaa
push
mov
sub
stc
add
dec
cld
outs
xchg
sub
cmc
pop
mov
push
mov
test
addr16
dec
jb
xor
ins
mov
out
cmp
push
adc
inc
ss
mov
ss
mov
ins
lods
push
loope
(bad)
adc
adc
xor
dec
out
xor
push
rcr
leave
mov
in
inc
enter
push
scas
jecxz
daa
and
mov
inc
or
add
(bad)
jne
je
sub
ss
fimul
cmps
cmp
cmc
fwait
add
pop
arpl
inc
outs
(bad)
nop
xchg
in
sahf
sbb
movs
xchg
cmps
inc
push
lods
jmp
sbb
xlat
ss
pop
push
jno
mov
jl
sahf
jmp
call
stc
xchg
xor
aaa
xchg
imul
inc
sbb
sbb
pushf
dec
test
pop
into
cmp
add
enter
iret
push
stos
inc
rol
mov
ja
dec
retf
mov
pushf
jbe
leave
mov
leave
repnz
xchg
shl
leave
sar
aas
out
pop
fisub
pop
cmp
adc
movs
dec
sub
imul
rcr
neg
das
popf
cmp
movs
cmp
or
and
xor
pop
fwait
xlat
mov
and
sbb
shl
push
fwait
(bad)
test
xchg
or
mul
addr16
push
sti
clc
push
adc
fcomp
xor
mov
and
cmps
mov
outs
xchg
dec
add
mov
jmp
(bad)
gs
mov
shr
sbb
jo
aas
movs
stos
inc
xchg
xchg
sub
mov
fwait
cli
xchg
shl
sbb
int
lea
add
mov
jl
sbb
fucom
repnz
push
retf
hlt
adc
mov
mov
out
add
or
sub
call
push
inc
sub
mov
int3
xor
cmps
xor
and
retf
into
sti
test
and
ror
sub
(bad)
or
inc
dec
cmp
cmc
loopne
xchg
aas
mov
push
mov
adc
adc
xchg
mov
ins
popa
in
jae
dec
push
fwait
pop
shr
adc
bound
or
repnz
cmp
sar
mov
inc
popa
inc
imul
cmps
push
dec
jmp
movs
ror
jecxz
ret
sbb
jne
mov
inc
mov
pop
loop
mov
addr16
icebp
cmc
fs
imul
xchg
mov
adc
pop
ds
add
mov
cmp
idiv
aad
add
imul
dec
push
mov
mov
movs
ds
push
dec
(bad)
or
(bad)
xchg
sub
mov
cdq
or
stos
lods
sub
ss
daa
in
push
fiadd
mov
sahf
adc
xor
pop
leave
sub
xor
add
cdq
cld
outs
pop
cmp
les
mov
push
jb
(bad)
jno
mov
int3
repnz
mov
loop
pop
cdq
xchg
push
jo
cli
and
xchg
fidivr
dec
inc
enter
push
inc
sbb
jmp
or
mov
jb
dec
or
fs
adc
jb
pop
lods
cdq
ds
fs
shl
retf
rcl
lock
pop
pusha
in
and
lods
push
std
push
jle
pop
repz
and
imul
sub
outs
stc
scas
mov
adc
push
mov
cdq
fld
jnp
mov
jnp
cmp
adc
mov
jge
mov
xchg
fistp
jl
outs
or
retf
mov
cwde
mov
jb
ror
repnz
cmps
pop
xlat
retf
add
xchg
pop
and
cdq
lock
retf
sub
ud1
popf
jne
jl
in
es
in
adc
retf
and
xlat
inc
leave
push
daa
enter
push
shr
mov
sbb
xchg
fld
call
jbe
pop
in
iret
mov
jp
les
loope
cmp
sar
rcl
push
inc
inc
xor
jae
jnp
and
xchg
das
fs
adc
retf
jb
push
pop
dec
cmps
add
push
push
or
ins
or
lahf
cmp
(bad)
leave
(bad)
je
sbb
sub
push
ins
cmp
push
cmps
mov
xor
stc
or
adc
pop
ja
out
or
sbb
mov
xchg
sub
push
cli
mov
or
xor
sbb
mov
out
push
dec
cld
cs
push
outs
loop
call
push
pop
pop
jge
hlt
push
mov
cld
xchg
cmps
cmp
loop
xor
call
jle
mov
aam
(bad)
adc
aas
sbb
cwde
addr16
into
scas
mov
mov
or
sub
adc
cmc
push
mov
adc
and
sbb
pop
test
nop
add
sub
push
stc
add
dec
jle
out
pop
loope
add
cmps
mov
inc
jmp
xchg
rol
dec
push
cmp
jle
and
movs
add
retf
repnz
dec
fadd
pop
leave
out
mov
sub
inc
or
inc
in
cli
(bad)
ret
sbb
outs
adc
dec
in
fidivr
ror
das
add
icebp
cdq
int
cmp
pushf
mov
push
jne
xchg
jle
jmp
or
inc
hlt
leave
push
in
adc
(bad)
(bad)
fcmove
dec
out
or
(bad)
inc
jmp
mov
popa
sbb
lods
aas
sub
out
fld
mov
mov
shl
dec
mov
lock
sub
es
(bad)
gs
ja
pusha
data16
out
hlt
xor
sbb
movs
aas
mov
call
pop
jg
adc
inc
ret
xor
ja
les
jle
cmp
cmp
xchg
arpl
mov
aas
in
fcmovnb
and
inc
ins
xchg
mov
out
dec
push
(bad)
and
push
ret
mov
loope
xor
test
mov
fwait
stos
sbb
add
mov
push
das
jp
ss
bound
(bad)
fisubr
mov
dec
jle
dec
inc
lock
mov
ret
xor
cdq
daa
scas
mov
pushw
out
(bad)
in
test
mov
loopne
out
imul
retf
imul
sti
pop
mov
jne
dec
xchg
and
mov
arpl
push
(bad)
xor
iret
push
push
lods
bound
and
sbb
aas
mov
imul
ins
iret
pop
cmp
inc
stos
push
cli
imul
scas
pop
or
mov
das
leave
idiv
aas
jmp
movs
xchg
rol
sbb
jne
movs
lods
clc
xchg
test
mov
mov
xor
and
add
adc
push
xchg
pop
xchg
outs
adc
fisubr
imul
xchg
push
sub
je
retf
aam
in
add
fs
das
dec
or
sub
sbb
mov
cmp
sub
jl
pop
xchg
fisubr
cdq
dec
xchg
mov
sbb
jno
pop
mov
jns
xor
jecxz
jge
jle
bound
test
dec
js
xor
mov
jp
mov
cwde
pop
jg
nop
dec
dec
dec
push
test
fs
int
and
jmp
repnz
cmp
push
inc
jb
test
and
pop
adc
movs
cmp
fwait
or
or
jne
sti
popf
repnz
dec
addr16
xor
gs
push
pusha
sub
push
shr
mov
jne
inc
push
mov
call
add
js
jmp
in
cmp
cmp
mov
or
or
fisttp
dec
jp
rol
icebp
sub
jmp
pop
adc
dec
(bad)
jl
lahf
out
push
out
jo
and
push
popa
pop
(bad)
jbe
mov
cmp
inc
adc
mov
mov
add
cmp
js
push
or
xchg
(bad)
into
int3
ins
test
jmp
je
nop
pop
popf
fld
mov
shr
ss
scas
jae
in
or
push
adc
dec
xchg
adc
push
addr16
xor
ja
xor
sub
int
jecxz
mov
bound
push
sbb
jbe
dec
aas
add
je
adc
iret
or
add
push
jp
ins
cmc
test
sbb
outs
push
(bad)
adc
(bad)
xlat
jno
jp
out
lods
sti
pop
scas
fdiv
cmp
fs
mov
add
(bad)
das
pop
add
repnz
pusha
es
push
jl
add
push
sahf
cmps
sbb
ins
stc
xlat
fsub
(bad)
gs
stos
push
xor
loope
scas
mov
mov
pop
mov
jmp
jae
dec
retf
add
cdq
ja
out
mov
or
dec
fld
and
out
or
xor
scas
mov
mov
mov
xchg
jmp
sub
pop
cmps
cmp
in
sar
cmps
(bad)
push
lds
jle
sub
sbb
addr16
inc
ret
cmp
or
jae
test
push
rcl
add
rol
add
test
into
arpl
fcom
adc
retf
and
adc
adc
sti
or
jmp
je
sahf
sub
inc
and
fisttp
inc
mov
or
xchg
outs
test
ror
lods
dec
and
mov
sub
fdiv
xor
and
xor
leave
std
mov
add
test
loop
fidivr
jmp
rcl
pop
mov
push
pop
icebp
sar
pop
sbb
shr
sub
push
out
xor
movs
mov
sbb
sub
jb
dec
jae
xchg
lods
(bad)
(bad)
mov
ds
test
pusha
or
inc
addr16
push
fsub
ja
inc
loopne
mov
(bad)
div
cmc
out
lods
cwde
mov
xlat
cmps
aaa
cdq
(bad)
in
loopne
sub
cli
ror
xor
mov
add
push
and
cvtpi2ps
cmps
out
pop
mov
pop
icebp
mov
hlt
(bad)
clc
in
sbb
jnp
sar
lods
mov
add
nop
jae
rol
sbb
inc
cmp
push
sub
test
sbb
or
stos
pop
mov
cmp
mov
repz
xchg
das
jne
cmps
pop
mov
dec
pop
push
loop
push
xchg
jmp
or
pop
mov
pop
out
push
es
into
pusha
not
stos
dec
mov
xchg
(bad)
fs
fidiv
std
cdq
repnz
nop
push
mov
jecxz
mov
pushf
popa
int
dec
enter
and
xchg
aaa
cmp
cmp
pop
adc
mov
cwde
sar
movs
retf
in
sahf
mov
mov
add
and
adc
(bad)
mov
cdq
cmp
add
arpl
mov
mov
cli
dec
xor
popf
xor
push
mov
hlt
xchg
test
retf
test
loopne
pusha
daa
pushf
loopne
nop
rol
movs
push
ja
inc
sbb
sbb
inc
push
mov
sbb
dec
aas
pop
inc
bound
and
fldenv
xor
test
dec
sbb
aas
nop
dec
adc
pop
je
lea
out
add
mov
add
jg
aas
or
mov
sub
adc
mov
es
and
mov
cmp
(bad)
dec
mov
shl
pop
retf
test
(bad)
jno
xor
dec
loope
sub
cmc
sti
in
jg
mov
jle
in
pop
jg
jbe
jne
popa
loopne
dec
mov
popf
xchg
pop
jecxz
or
aas
outs
cmp
push
stos
movs
pop
cmp
adc
sbb
je
pusha
sbb
xor
xchg
cwde
dec
pop
scas
movs
scas
out
ficom
push
enter
sub
(bad)
out
frstor
mov
sub
(bad)
repz
add
arpl
sbb
mov
unpcklps
test
pusha
in
popf
dec
mov
jne
or
dec
xor
jl
sub
xlat
mov
push
shl
cs
in
cmp
or
mov
xor
and
shr
pusha
mov
(bad)
pop
jg
aam
test
bound
xlat
or
popa
inc
inc
call
inc
in
sub
push
cs
jge
(bad)
cwde
push
dec
cmp
scas
idiv
or
fstp
mov
or
and
fmul
mov
(bad)
or
arpl
mov
dec
mov
adc
ss
add
(bad)
rcl
maskmovq
neg
jl
adc
inc
data16
shl
pop
cmps
mov
add
jo
mov
cmp
jecxz
xor
pop
jo
jno
sti
cmp
cmp
out
aaa
push
fisubr
test
gs
xchg
pop
and
lea
movs
adc
pop
hlt
call
jecxz
(bad)
sub
push
push
sub
movs
pushf
adc
add
pusha
repnz
rol
mov
xor
or
fadd
loop
xor
sbb
mov
retf
ret
or
or
pop
loopne
xchg
test
scas
out
xor
sbb
xor
jmp
xchg
cmp
xor
ss
dec
dec
aaa
dec
outs
jecxz
dec
lahf
dec
jb
nop
xor
mov
mov
out
xor
mov
xchg
pop
fild
jnp
jg
add
adc
cmp
rcr
adc
xor
sbb
adc
sub
jnp
movs
jg
mov
loopne
and
push
mul
jge
leave
ret
mov
movs
cwde
call
ja
inc
aad
and
ret
hlt
mov
lahf
loop
xor
add
ss
loope
mov
mov
jecxz
shl
pushf
inc
dec
mov
cmp
jp
ret
mov
xchg
and
out
inc
fidiv
or
add
sbb
je
adc
or
(bad)
iret
cmps
jbe
push
popa
pop
mov
sub
js
mov
xlat
adc
dec
xor
push
iret
(bad)
or
jmp
ret
sub
push
sbb
mov
cmp
push
pop
sub
aad
xchg
test
pop
xor
dec
sbb
mov
sbb
cwde
jmp
mov
push
add
sub
dec
aam
jae
cmp
fs
int
mov
push
add
pop
les
js
loopne
in
jbe
and
mov
mov
fnstcw
push
mov
das
cmp
dec
pop
out
mov
(bad)
call
jmp
sub
or
lock
jg
js
mov
dec
mov
pop
mov
xchg
and
mov
mov
daa
test
adc
cmp
jge
pop
inc
push
sbb
rcl
mov
lahf
idiv
stos
push
test
bound
inc
clc
call
add
jno
mov
std
push
(bad)
mov
mov
stos
stos
out
je
pop
pop
dec
rcr
sbb
imul
mov
xchg
dec
xchg
and
fidiv
push
pop
outs
and
push
rcr
pop
aaa
xchg
and
test
in
aam
in
push
inc
test
mov
outs
mov
adc
xchg
in
or
adc
adc
lods
in
xor
push
or
mov
fistp
xor
fcmovbe
aam
(bad)
enter
and
inc
out
adc
in
lahf
test
cli
lods
pushf
outs
xchg
mov
jnp
adc
pusha
sbb
pop
xchg
ins
in
sbb
xchg
das
jbe
cmp
fist
in
inc
xchg
iret
mov
movs
jle
std
repnz
pop
lods
imul
call
mov
and
jl
test
add
adc
rcl
(bad)
fld
ror
mov
push
mov
xchg
shl
push
movs
sub
out
xchg
pop
pop
cmp
and
das
int
(bad)
(bad)
in
inc
adc
retf
push
cmp
xchg
dec
lds
mov
adc
je
add
cmc
dec
ret
lods
aas
iret
jne
repz
and
das
pop
xchg
push
das
dec
popf
adc
pop
jnp
pop
hlt
(bad)
xor
fnsave
sti
jl
mov
add
pop
(bad)
mov
mov
jne
and
sub
adc
mov
dec
gs
retf
bound
popa
mov
sub
out
les
inc
add
or
in
mov
test
lea
adc
mov
fs
pop
inc
xor
aad
adc
inc
pusha
sbb
jecxz
and
repnz
in
inc
dec
xor
es
sub
sbb
jecxz
add
retf
or
jb
inc
movs
fisttp
into
mov
mov
shr
and
push
add
cld
mov
add
in
call
or
fisub
std
add
cmp
xchg
dec
xchg
push
xchg
mov
lea
je
imul
dec
data16
mov
(bad)
adc
jmp
jg
in
not
xchg
jg
sbb
pop
inc
push
pmaxub
push
push
in
addr16
push
lods
loope
outs
iret
or
out
idiv
push
dec
popf
inc
fwait
dec
shl
hlt
ss
cld
call
and
or
or
lds
or
sbb
sahf
jb
loop
call
add
xor
mov
bound
int3
shr
dec
shr
push
inc
cmp
push
rcr
in
adc
cmps
sub
bound
mov
xor
jecxz
sub
or
cmp
sbb
lahf
cmps
enter
cmps
test
pop
mov
ficom
push
mov
fisttp
jns
daa
lahf
scas
in
aad
outs
(bad)
dec
cmp
and
es
cmp
lea
loopne
fcmovu
stos
adc
or
and
push
test
adc
shl
je
loop
sbb
aad
lods
leave
lods
cmp
hlt
mov
xor
sub
add
enter
hlt
push
dec
mov
hlt
xchg
data16
pop
push
retf
mov
inc
cdq
out
cmp
adc
mov
push
mov
mov
(bad)
add
mov
xor
pop
fiadd
inc
cmps
cmps
push
dec
ds
or
jno
in
push
scas
cmc
mov
mov
out
pop
out
nop
cmp
dec
jns
shl
mov
sub
cmp
sar
clc
push
sub
mov
add
pop
loope
mov
ja
ins
lea
and
(bad)
push
pop
mov
jle
mov
mov
int
enter
sbb
in
xchg
out
cmp
inc
fild
jbe
jge
xor
arpl
adc
xchg
outs
repnz
or
popf
jno
imul
mov
pop
jg
shl
(bad)
jge
mov
retf
data16
je
adc
add
mov
mov
cmp
lea
pusha
es
bound
jg
dec
xchg
jo
aas
push
retf
test
popa
and
ficom
out
mov
add
aam
sub
jns
mov
cmps
sbb
sub
sub
or
popa
loop
sbb
push
hlt
jo
dec
es
and
cmps
xchg
sahf
in
or
mov
or
mov
sti
adc
add
test
push
adc
pop
loope
cmps
clc
icebp
mov
or
test
sub
pop
inc
or
mov
icebp
jmp
xchg
aas
mul
aas
jecxz
stos
or
cmp
mov
test
sbb
fs
xor
pop
pushf
out
cmp
jle
nop
push
in
fsub
fadd
push
std
jae
mov
push
sahf
cmp
vunpcklps
cmp
pop
rcl
mov
xchg
loope
mov
inc
lahf
sbb
sbb
(bad)
lods
lahf
mov
ret
add
je
push
add
hlt
mov
jnp
and
fiadd
sar
outs
or
cmp
js
push
fild
outs
sub
or
jp
pop
cmc
mov
xor
les
or
pop
sti
je
gs
dec
fst
xchg
jno
adc
rcl
xchg
add
adc
cmp
imul
stc
push
dec
jl
jno
mov
gs
mov
test
xchg
push
std
shr
fdivr
jb
mov
pop
and
mov
mov
pop
xchg
adc
into
ror
pusha
adc
jbe
push
inc
xchg
inc
xor
dec
mov
jbe
or
push
mov
mov
jo
jecxz
inc
xor
out
cld
pop
addr16
outs
nop
push
das
iret
gs
stc
push
push
ss
mov
add
lock
stos
and
cmp
fist
aaa
dec
push
(bad)
cmp
lds
xor
repz
pop
(bad)
fs
sbb
mov
(bad)
dec
inc
pop
cmp
aam
inc
cli
inc
or
or
jnp
loop
cmc
inc
jnp
sub
or
scas
xchg
jge
(bad)
aam
mov
jg
test
sahf
iret
push
stc
fidivr
jnp
pop
add
dec
add
cld
inc
cmp
f2xm1
mov
jp
inc
mov
pop
test
or
les
es
sahf
mov
dec
xchg
push
sbb
xchg
add
pop
adc
sub
mov
cmp
jbe
cmp
cmp
leave
add
jp
(bad)
adc
inc
jae
ret
shl
cdq
add
mov
cmp
and
sbb
sub
mov
mov
and
cmp
test
lahf
das
sbb
movs
adc
not
loop
cmp
dec
push
test
mov
daa
das
ror
daa
inc
dec
jp
call
frstor
repz
xchg
lds
ja
xchg
inc
and
pop
xor
push
pop
enter
lods
cmc
and
pop
lods
sub
lds
inc
bswap
push
mov
es
pop
ins
shl
mov
leave
hlt
push
mov
push
std
movs
sahf
out
push
sbb
adc
js
loope
outs
das
pop
sbb
cmp
adc
jle
push
call
cli
xor
or
clc
fldcw
add
outs
fdiv
loope
or
adc
(bad)
fisub
cmps
fidiv
jmp
repnz
loope
sbb
sub
retf
dec
ins
mov
shr
inc
pop
pop
jl
retf
sti
ins
sub
out
push
xor
xor
fdivrp
movs
ror
xlat
and
push
or
cld
daa
jmp
xchg
jo
pop
enter
adc
inc
sbb
mov
adc
pop
rol
out
sti
or
cmp
sub
(bad)
mov
addr16
jle
stos
and
dec
add
sti
xchg
jmp
xchg
and
dec
xlat
enter
push
xchg
wbinvd
jb
fld
adc
pop
sub
mov
scas
dec
pushf
cdq
xchg
push
icebp
jle
rcr
inc
and
loope
sbb
les
sub
repnz
imul
or
gs
pushf
hlt
push
push
adc
adc
mov
push
mov
test
mov
stos
mov
ins
mov
push
jp
pop
inc
mov
enter
test
cmp
inc
adc
test
inc
cmps
dec
shl
sub
pop
call
pop
mov
or
data16
mov
fst
stc
xor
aam
pop
mov
(bad)
jbe
xor
jb
sbb
out
nop
mov
popa
je
mov
mov
retf
xchg
shr
popa
dec
(bad)
cmp
shl
retf
les
adc
mov
push
les
xor
into
xchg
mov
pushf
inc
sub
and
inc
jns
xchg
aas
test
(bad)
loop
xor
mov
cli
out
xchg
push
(bad)
xchg
data16
sub
mov
add
ins
nop
push
push
or
popf
int
mov
mov
mov
pop
jmp
repnz
neg
cwde
sub
fs
cmps
pop
inc
inc
fsub
ss
fwait
pusha
out
add
inc
mov
pop
jbe
mov
(bad)
and
test
mov
movs
(bad)
loopne
pusha
mov
stos
call
xlat
ds
fstp
popf
cmp
fadd
test
pop
xor
sbb
stos
inc
jecxz
xchg
push
fprem
pop
fs
add
jno
fwait
test
rcr
mov
jno
dec
inc
mov
xchg
iret
mov
mov
xchg
mov
push
arpl
je
arpl
outs
clc
test
sub
mov
mov
int
cld
shl
dec
movs
jmp
sbb
scas
jp
push
not
jae
out
lahf
cmc
and
push
fdivr
sbb
add
cmp
int
daa
ins
mov
dec
xor
jo
push
ins
jo
add
dec
mov
fdivr
dec
mov
jecxz
sbb
xor
push
stos
ins
jno
sub
sbb
fwait
dec
stos
retf
outs
cwde
xchg
call
or
fisubr
mov
imul
fcomip
add
push
or
or
or
mov
dec
nop
push
aam
xchg
mov
jmp
mov
jns
lods
iret
jmp
out
sti
nop
dec
in
mov
pop
dec
mov
fnstcw
jmp
fnsave
test
mov
mov
ror
mov
or
cmp
popa
dec
rcr
in
mov
lock
push
add
dec
dec
push
pusha
pop
sar
cmp
xchg
xchg
imul
pop
or
xchg
xchg
jo
mov
outs
loope
jmp
pop
sub
sti
pop
xor
inc
movs
sub
mov
nop
add
mov
pop
cmpxchg
lds
xabort
push
adc
push
mov
jmp
jae
cld
cmp
sub
out
fbld
retf
stos
icebp
lds
scas
outs
cs
xchg
out
jge
aas
out
fst
push
push
mov
clc
and
push
mov
dec
ror
loope
xchg
arpl
push
ins
dec
les
adc
call
xchg
push
sub
test
inc
rol
jg
ja
jb
mov
dec
int
push
shr
shr
outs
or
ins
xlat
enter
sbb
adc
int3
adc
xchg
push
xor
out
(bad)
adc
fcmovu
sub
push
mov
push
sbb
shl
jp
(bad)
pop
outs
add
jmp
pop
inc
push
inc
rcl
dec
aam
jns
xor
sub
dec
xchg
and
pushf
ds
mov
push
shl
(bad)
push
test
dec
test
dec
(bad)
repnz
js
pop
xchg
adc
sbb
aam
mov
jl
mov
in
aam
inc
in
loopne
xor
push
and
in
xchg
sbb
xchg
into
fcomp
xor
enter
loop
nop
jge
sbb
inc
mov
mov
dec
stc
mov
add
sub
xor
sbb
mov
or
jb
nop
sub
mov
sub
aas
into
inc
(bad)
cdq
xor
mov
sub
idiv
aam
mov
repz
jmp
mov
retf
das
mov
jmp
xchg
(bad)
sub
mov
movs
inc
sahf
ins
cmps
scas
mov
pop
(bad)
fdiv
xchg
mov
fwait
jge
into
nop
mov
push
xchg
cmps
ror
mov
add
ss
pop
inc
or
aad
sub
add
cmps
and
push
mov
pop
mov
mov
push
je
inc
fcmovu
clc
and
es
mov
mov
add
mov
ja
adc
mov
push
jbe
les
out
int
mov
xor
ins
cmp
aam
aad
mov
movs
ins
mov
pop
inc
mov
xchg
xlat
mov
adc
cmp
push
sub
ds
mov
pusha
mov
add
out
popf
dec
mov
stos
ja
sbb
je
pop
outs
mov
test
ins
mov
or
mov
int
rcl
hlt
sar
rol
jecxz
push
(bad)
adc
not
cld
mov
outs
lds
fs
jo
repnz
loop
nop
(bad)
adc
call
popf
xor
mov
and
mov
push
xchg
push
cmp
mov
jecxz
mov
mov
idiv
test
scas
std
lds
imul
in
das
fwait
(bad)
jmp
shl
scas
add
push
mov
and
inc
pop
xchg
hlt
xor
and
or
fistp
loop
dec
and
retf
call
loope
or
pusha
imul
and
mov
clc
lods
lods
mov
jmp
sbb
and
sub
jl
or
iret
ror
mov
cs
leave
sar
pushf
rcr
xor
rol
xor
xchg
add
sbb
mov
sbb
sub
push
jle
xchg
adc
call
out
mov
add
sub
int
sar
inc
imul
xchg
mov
das
push
pop
das
dec
and
ja
loope
jp
loopne
mov
fistp
sbb
push
jmp
idiv
cmps
cs
clc
jg
and
shl
mov
adc
push
push
sub
xlat
push
inc
xchg
or
sar
rcl
std
mov
ffree
xchg
pop
aam
inc
mov
xchg
mov
pop
fs
inc
jb
adc
push
jbe
idiv
xchg
mov
std
mov
hlt
and
cdq
aad
xchg
movs
repz
sub
sub
cs
daa
cmps
mov
test
(bad)
or
repnz
push
aaa
fsubp
in
and
inc
adc
adc
and
(bad)
sub
mov
aas
and
(bad)
jmp
dec
and
add
std
mov
into
mov
retf
cld
cmps
cmp
xchg
and
inc
mov
xor
and
repnz
inc
cmp
cmc
jge
mov
pushf
lods
or
jbe
xor
out
xor
scas
sub
sti
and
push
imul
pop
stos
and
mov
dec
leave
push
mov
push
inc
mov
mov
fcom
or
and
test
pusha
inc
sub
jbe
repnz
mov
add
cmp
mov
sbb
inc
std
loopne
sub
call
outs
(bad)
in
addr16
dec
dec
sar
jne
in
adc
or
shl
mov
sbb
pop
xor
jg
pop
or
sub
push
mov
add
imul
rcr
das
xchg
fucomp
sub
clc
out
shl
mov
pop
std
sbb
call
loope
pop
cwde
movs
sbb
std
jg
and
out
stc
nop
adc
in
mov
aas
out
mov
or
daa
in
mov
scas
in
sbb
dec
pop
ss
cld
dec
stos
sbb
and
push
mov
and
sbb
and
mov
xchg
cmc
dec
repz
mov
xchg
or
cmp
popa
mov
cmp
inc
shl
xchg
lock
jbe
ret
(bad)
out
std
cmps
mov
sbb
add
cs
cmp
push
mov
sbb
dec
aas
ins
or
(bad)
sbb
out
add
or
push
ds
inc
in
fidivr
inc
sti
xlat
and
outs
fiadd
mov
xchg
or
outs
stos
inc
data16
adc
and
loopne
dec
adc
fwait
push
xchg
sbb
mov
jae
xor
cs
aas
mov
inc
adc
outs
out
pop
cmps
pop
mov
adc
pop
mov
inc
scas
mov
push
faddp
inc
imul
inc
sub
dec
mul
pop
shl
push
ss
mov
call
xchg
aaa
movs
sub
jle
retf
mov
mov
js
nop
lea
jno
repnz
mov
dec
push
lock
imul
retf
popa
jp
xchg
leave
or
not
call
je
jmp
cmp
adc
movs
rcr
pop
shr
jmp
or
es
xchg
(bad)
pop
neg
repnz
pop
(bad)
inc
pop
mov
ins
in
mov
and
mov
aaa
mov
jp
cmps
test
bound
jno
pop
out
sahf
test
pop
jp
or
xor
pop
push
mov
jmp
(bad)
xchg
pop
scas
push
mov
scas
jl
xor
frstor
push
cmp
loop
and
fcom
inc
ds
jp
fstp
xchg
repnz
mov
mov
jl
cmps
mov
jo
fisttp
mov
cdq
out
jo
and
fld
out
xlat
xor
jns
add
mov
adc
xor
mov
xchg
add
jnp
test
jns
inc
aam
xor
inc
xacquire
jno
sbb
lahf
test
imul
add
xor
cmps
js
sub
pop
xor
stos
and
mov
je
xchg
xor
call
fstp
sbb
and
retf
mov
(bad)
fnstenv
(bad)
dec
scas
xchg
pop
push
xor
sti
(bad)
ror
cli
inc
int
sar
mov
shr
ror
es
test
sub
jo
leave
cmp
add
jno
adc
out
pop
aaa
ficom
mov
cmp
push
adc
scas
in
enter
push
dec
pusha
pop
pusha
push
out
lods
inc
das
ins
pop
pop
push
aam
push
adc
iret
and
push
movs
leavew
jae
mov
iret
into
xor
mov
mov
nop
fisubr
pusha
xor
mov
mov
rcr
sbb
ja
lods
sbb
inc
jnp
sub
add
pop
les
dec
sub
in
cmc
ror
je
and
cmp
cmp
xor
ret
bound
in
loopne
xor
dec
or
inc
or
in
mov
dec
call
cli
out
rol
addr16
and
mov
lea
or
out
push
dec
sbb
mov
dec
fwait
les
xchg
inc
outs
lods
cmp
jmp
jl
sub
test
ins
sub
jmp
push
cmp
mov
in
push
fsub
xchg
dec
call
xor
jge
in
cld
cmps
pop
stc
(bad)
mov
add
mov
test
sub
in
jae
out
in
jmp
ret
mov
neg
push
sbb
xchg
stos
add
iret
dec
cmps
pop
and
add
das
icebp
add
and
push
adc
jmp
repz
sub
fwait
jb
and
mov
ins
add
repnz
ror
cmp
push
sbb
stc
push
dec
cld
loopne
js
add
jge
xchg
sub
outs
push
adc
adc
add
loopne
mov
mov
gs
adc
adc
push
ja
and
repnz
or
sbb
out
push
inc
dec
lock
mov
sub
leave
icebp
fnstenv
ins
mov
frstor
mov
aam
out
lods
stos
repz
pop
push
and
adc
xchg
dec
imul
cmp
or
out
xor
(bad)
mov
sbb
mov
loop
mov
test
mov
cmp
aad
push
lds
shl
xchg
clc
rcr
mov
mov
fwait
sub
sub
lock
or
out
jae
jmp
jl
not
fwait
sar
sub
push
mov
iret
nop
pop
into
add
and
test
jmp
pop
movs
or
sub
rol
xor
pop
sbb
sub
imul
push
lods
cmp
jo
imul
dec
mov
pop
in
inc
xchg
mov
dec
xor
(bad)
adc
and
sbb
sbb
mov
movs
pcmpgtw
mov
fld
jb
ins
lds
xchg
addr16
out
repnz
lea
add
push
mov
and
and
fld
in
div
ret
cmp
call
sub
mov
inc
outs
out
fidiv
ins
test
sahf
pop
addr16
mov
xchg
aad
das
imul
mov
test
jecxz
jp
loope
dec
sti
jmp
(bad)
out
cdq
xchg
mov
aad
pop
ins
and
xchg
inc
pop
adc
mov
sbb
je
and
xchg
mov
test
lods
jmp
mov
(bad)
pop
sti
jnp
jg
pushf
adc
jb
push
inc
in
repz
cmps
jmp
and
add
xchg
(bad)
jmp
jecxz
movs
jb
push
in
sahf
lahf
sbb
jb
push
pop
cmp
jmp
add
dec
xchg
test
inc
push
popa
dec
int3
repnz
inc
rcr
int
dec
stc
jne
sub
cmp
pop
ret
add
sahf
push
ret
xor
or
movs
mov
jnp
sti
jle
movs
int3
push
push
iret
adc
xor
or
and
sahf
pop
jbe
push
pop
add
mov
or
js
rsqrtps
jmp
retf
jmp
mov
inc
(bad)
fs
ret
call
mov
pop
test
xchg
jbe
test
test
pop
loopne
mov
mov
aaa
imul
out
xchg
xor
lods
aas
sub
pop
nop
lods
in
xchg
outs
stc
scas
call
dec
icebp
fstp
leave
dec
ror
shl
mov
cmp
(bad)
retf
mov
fs
int
cmp
stc
cmps
mov
sbb
out
outs
das
adc
data16
out
xchg
dec
popf
test
icebp
addr16
sub
dec
and
xchg
aad
shr
pop
adc
xchg
scas
das
dec
mov
scas
add
or
jge
sub
out
sbb
jle
mov
dec
(bad)
stc
jno
pop
fbld
sub
cmps
fs
adc
mov
push
jp
sbb
nop
mov
pop
jmp
add
std
pop
pop
fdivr
adc
out
mov
les
mov
cdq
ja
data16
cli
(bad)
xor
pop
cmc
jmp
lds
sbb
sub
push
mov
call
ret
ficom
sub
cwde
and
loopne
call
jle
push
scas
dec
mov
or
(bad)
out
clc
push
jg
test
dec
dec
cmp
add
es
stos
sub
ins
rol
rol
stc
retf
sub
popf
dec
jecxz
xor
sbb
shl
fs
pop
ja
hlt
stos
ins
xchg
inc
jae
cmp
popa
adc
xchg
(bad)
jne
pop
aad
test
xchg
cmp
(bad)
cmp
and
dec
cmc
lods
(bad)
cli
push
shr
xor
inc
mov
jnp
jle
xor
adc
call
adc
outs
mov
bound
pop
and
addr16
arpl
cld
cs
lods
shr
mov
test
std
test
enter
sub
shl
xchg
rol
pop
shl
xor
les
call
inc
xlat
mov
cmps
jl
cli
ds
in
aam
jg
push
loope
dec
in
fs
or
in
jnp
and
jb
das
repz
loopne
cmp
or
pop
dec
int3
push
jnp
out
ret
mov
call
pop
shr
das
push
stos
(bad)
xor
sahf
loop
bound
push
cmp
test
ins
(bad)
fldenv
aas
dec
ins
jns
adc
sar
cmp
pop
jmp
xor
jle
dec
ror
sahf
pop
xchg
jmp
call
lahf
mov
out
push
(bad)
nop
shl
popf
xchg
cmc
sub
pop
cmp
and
popa
pop
cs
es
rcr
movs
out
cli
clc
in
aad
cs
push
and
ss
cdq
jnp
pop
hlt
lods
stos
clts
loope
jmp
cmps
inc
imul
jl
or
les
ins
mov
xor
sbb
adc
add
stos
mov
push
push
adc
jp
iret
mov
or
cmp
cld
dec
jecxz
fs
icebp
ins
or
and
adc
scas
movs
cwde
xor
dec
pop
push
mov
and
ins
inc
test
cmc
shl
xchg
rcl
jle
sbb
(bad)
test
imul
in
rcl
icebp
arpl
jge
adc
dec
shl
push
push
adc
add
mov
push
cmp
sbb
sbb
cli
das
push
inc
nop
pop
adc
mov
jno
arpl
xchg
(bad)
pop
xor
sub
in
lds
into
rcr
fwait
mov
pop
in
out
jne
push
adc
xchg
fld
(bad)
daa
sbb
cmps
outs
sbb
movs
call
push
push
faddp
xlat
lock
xchg
inc
xor
repz
jmp
xlat
pop
sub
lahf
scas
push
aas
dec
dec
pusha
inc
adc
(bad)
mov
cmp
xor
dec
xchg
xchg
stos
std
das
call
push
push
nop
mov
and
jb
mov
or
enter
inc
int3
xchg
jmp
cmps
sahf
add
adc
ja
adc
xchg
(bad)
das
int3
and
iret
sbb
inc
fdiv
or
xor
sbb
mov
ror
test
fwait
mov
fcmovnbe
mov
test
repz
pop
ficom
mov
push
shl
loopne
bound
bswap
inc
data16
cmp
std
adc
mov
cwde
cmp
dec
cli
jmp
mov
mov
and
or
jno
cli
mov
add
leave
stc
into
ret
mov
xchg
xchg
outs
fiadd
cmp
popa
test
jp
repnz
icebp
adc
aad
pushf
sbb
out
mov
mov
xor
xor
into
dec
ja
xchg
xchg
mov
mov
icebp
pop
dec
popa
cmps
xor
mov
mov
sub
inc
jae
out
cdq
out
(bad)
xor
je
loopne
xor
out
aas
mov
imul
aam
sbb
outs
cs
in
int
in
dec
leave
(bad)
sub
xor
xlat
sbb
inc
fldenv
adc
sub
outs
mov
sub
add
mov
cmps
mov
push
mov
push
xchg
mov
or
cld
pop
jae
mov
xor
(bad)
ds
inc
out
popa
inc
mov
movs
ret
jecxz
int
inc
xor
outs
inc
push
xchg
jbe
sub
fs
(bad)
push
(bad)
pop
jb
xchg
inc
fadd
cmp
jae
sub
cmp
mov
xchg
mov
pop
data16
and
in
jne
mov
sar
push
inc
into
lods
test
jp
jns
jmp
lds
ins
xor
or
addps
jg
add
push
lods
mov
push
(bad)
cld
int3
and
or
jae
and
test
push
inc
pop
xchg
leave
stos
out
push
pushf
and
inc
push
sub
or
cmp
hlt
lods
fstp
push
popa
adc
xchg
leave
and
loopne
lahf
sub
fbld
in
inc
sub
mov
add
int
mov
test
inc
xchg
out
mul
sbb
jo
pop
push
(bad)
sbb
sub
(bad)
in
lods
inc
aaa
pop
pop
pop
mov
mov
inc
push
pop
adc
ror
pop
sub
mov
add
js
sbb
xchg
adc
jne
dec
(bad)
xchg
jne
movs
cs
in
pop
fwait
cs
xor
imul
stos
xor
jle
mov
daa
js
icebp
(bad)
and
fwait
inc
jae
pop
xor
mov
fucom
retf
cli
mov
or
ja
adc
jecxz
loop
in
pop
ja
jg
pushf
fdiv
dec
jmp
popf
dec
pop
push
test
dec
lahf
push
xor
add
adc
(bad)
mov
repnz
cmp
enter
loop
jbe
jns
out
push
inc
ins
push
out
into
aad
push
pop
fidivr
rcr
push
xchg
cmps
fs
jg
(bad)
aaa
in
mov
cld
jmp
scas
push
sub
mov
push
call
push
mov
stos
aas
and
into
mov
mov
out
test
xchg
mov
in
inc
cmps
xchg
call
sbb
sti
pop
call
jo
pop
loop
adc
sbb
and
out
add
inc
sbb
out
mov
dec
cwde
inc
mov
cmp
sti
aam
jnp
std
je
adc
ret
add
xchg
dec
add
pextrw
imul
imul
mov
xchg
inc
imul
mov
in
mov
(bad)
(bad)
xchg
add
aaa
out
mov
popa
movs
and
lods
mov
cmc
shl
fsubr
push
pop
std
aaa
js
dec
push
mov
jge
mov
scas
aaa
mov
popa
sahf
mov
xchg
(bad)
cmp
dec
xchg
dec
or
cmps
outs
mov
scas
pop
jnp
sub
pop
inc
sub
inc
test
mov
add
sti
mov
int
cwde
outs
jecxz
dec
jmp
add
mov
popa
scas
mov
cdq
mov
fbstp
das
aam
sub
lock
jp
lahf
imul
jne
jg
(bad)
pop
les
mov
dec
mov
cwde
add
adc
imul
lods
inc
arpl
mov
out
in
jb
scas
aad
es
and
leave
push
pop
inc
test
sbb
icebp
(bad)
cld
mov
push
sub
push
in
adc
jae
jmp
xchg
cld
rcr
pop
shr
repnz
sub
fild
sbb
pop
and
imul
ret
jae
pusha
add
idiv
fsub
sub
stc
ja
xor
xchg
out
mov
or
stos
cs
push
aam
in
mov
out
pop
mov
pop
xor
(bad)
xchg
test
movs
outs
ret
lea
xchg
lahf
or
or
xor
sub
mov
jne
fs
(bad)
jmp
adc
xchg
mov
rol
push
pop
or
mov
test
cmp
sub
(bad)
ficomp
mov
outs
aas
and
mov
pop
aas
pop
or
cmps
and
aas
push
test
(bad)
push
jmp
add
call
test
ret
fbld
aad
pop
clc
push
hlt
cmpxchg
cmc
cmp
imul
popf
shr
neg
sub
jb
mov
dec
(bad)
push
cmp
fwait
jno
cmp
sub
movs
fbstp
xchg
outs
cmc
dec
mul
call
mov
mov
in
fmul
std
gs
add
sti
mov
sub
and
push
mov
js
mov
shl
rcr
mov
jmp
stos
jge
test
mul
cmp
dec
mov
daa
xchg
push
mov
pop
pop
lock
and
ret
jle
idiv
push
adc
push
sub
add
repz
xchg
fprem1
dec
xchg
lods
push
mov
cmp
mov
std
shl
call
imul
push
lock
push
xor
jb
jecxz
or
add
fwait
js
jl
xchg
adc
mov
pop
mov
gs
xchg
push
xchg
fisttp
xchg
pop
ret
hlt
aaa
dec
loop
xor
call
mov
mov
mov
jecxz
jae
xor
mov
int
xchg
addr16
xchg
mov
mov
dec
mov
(bad)
std
pop
out
or
pop
jmp
dec
mov
and
jle
cmps
jp
pop
and
repz
aad
pop
mov
std
push
cmp
jle
xor
cmps
jae
inc
mov
jg
cld
jl
in
cmp
ret
and
xchg
inc
leave
test
stos
in
pop
inc
jb
or
pop
movs
movs
jmp
jne
and
int3
push
mov
inc
les
add
inc
cwde
daa
xor
pushf
iret
cmp
add
(bad)
pop
jae
sti
fstp
out
stos
push
push
lock
cmp
lahf
shr
mov
jne
sbb
lods
pop
dec
and
loop
mov
mov
idiv
retf
aas
loop
push
fsub
and
neg
mov
mov
retf
lock
push
sbb
push
jmp
jge
test
ror
inc
cld
mov
ss
cmps
jl
(bad)
jge
jle
mov
loopne
ret
jmp
push
jmp
cmps
cld
(bad)
pop
enter
sbb
pop
adc
ficomp
pusha
neg
jmp
jmp
mov
dec
xchg
add
dec
int3
pushf
jle
and
pshufw
adc
cld
mov
sbb
fs
dec
jne
pop
jne
sub
mov
lods
adc
xchg
and
xor
inc
xchg
fnstcw
adc
fisub
cdq
mov
dec
fs
gs
cmp
clc
jg
sbb
scas
jmp
setae
lods
movs
jnp
adc
lods
jo
jmp
dec
cmps
cmp
inc
mov
add
ficomp
mov
nop
mov
pop
out
movs
and
cmps
(bad)
int
or
test
mov
sub
in
dec
mov
push
mov
mov
aas
push
pusha
xchg
fstenv
sub
outs
pop
mov
and
loopne
cli
sub
(bad)
fwait
in
mov
(bad)
jge
retf
push
push
les
shl
scas
cmp
sub
movs
call
jmp
fwait
or
adc
icebp
stos
in
movs
cmp
and
movs
aad
xchg
ss
and
push
gs
cs
xchg
pop
jmp
cs
into
inc
fmul
inc
dec
mov
stos
popf
jg
aaa
adc
daa
sbb
mov
mov
or
push
xchg
fstp
jl
jmp
cmc
pop
mov
or
push
stos
cmps
hlt
stos
pop
push
nop
dec
out
ins
mov
das
inc
mov
retf
lahf
daa
stos
jmp
push
inc
xor
fisubr
add
push
int
clc
int
mov
outs
retf
sar
pop
lods
outs
nop
cvtdq2ps
pop
sbb
push
fdivr
xchg
cmp
pop
lods
push
dec
mov
cmc
cli
test
call
or
lock
xor
retf
int
std
cmps
mov
and
lods
aaa
jecxz
xchg
mov
xlat
loop
pop
setbe
dec
je
jbe
bound
xchg
lea
xor
aad
dec
dec
xchg
sub
push
rol
retf
mov
mov
jb
mov
in
outs
mov
ins
jg
pop
aas
(bad)
fcomp
retf
push
std
xchg
dec
mov
sets
pshufw
(bad)
fidivr
lods
xor
mov
ret
jecxz
movs
push
pop
cmp
mov
pushf
lds
test
inc
and
inc
and
xchg
xor
out
icebp
xchg
push
pop
(bad)
xchg
xchg
stc
gs
ins
adc
dec
sbb
mov
xor
sbb
pop
hlt
cmp
sub
push
mov
scas
imul
mov
push
mov
cmp
pop
fisttp
loope
cs
repz
pushf
sub
iret
shr
pusha
mov
es
fnstsw
xchg
inc
xor
sbb
add
aaa
or
xchg
stos
xor
and
(bad)
or
fist
ja
add
pop
add
add
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
push
push
push
sub
lea
add
mov
lea
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
lea
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
cmp
setl
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
add
pop
pop
pop
pop
ret
lea
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
jmp
mov
mov
jmp
mov
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
cmp
setb
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
lea
imul
add
mov
cmp
sete
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
lea
imul
add
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
mov
jmp
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
jmp
mov
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
shl
add
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
add
add
sub
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
shl
add
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
shl
add
mov
mov
jmp
mov
add
add
sub
mov
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
cmp
cmove
mov
jmp
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
mov
cmp
cmove
mov
jmp
lea
add
mov
lea
mov
sub
mov
mov
mov
mov
call
add
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
lea
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
cmp
setl
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
lea
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
jmp
mov
mov
jmp
mov
mov
jmp
mov
mov
cmp
cmovl
mov
jmp
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setb
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
lea
imul
add
mov
cmp
sete
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
lea
imul
add
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
sub
sub
mov
mov
jmp
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
jmp
mov
mov
add
mov
call
mov
mov
mov
mov
mov
add
mov
mov
mov
shl
mov
add
shl
add
mov
mov
mov
shl
mov
mov
shl
sub
sub
mov
add
shl
add
mov
cmp
cmove
mov
jmp
mov
lea
sub
mov
mov
mov
call
add
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
sub
mov
add
mov
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
mov
mov
mov
mov
mov
jmp
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
add
add
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
shl
add
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
add
add
sub
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
mov
mov
mov
mov
mov
mov
sub
sub
mov
sub
mov
sub
add
mov
sub
mov
add
sub
sub
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
add
add
sub
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
shl
add
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
sub
add
add
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
add
sub
mov
mov
mov
mov
mov
mov
mov
sub
add
add
mov
mov
sub
add
add
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
shl
add
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
add
add
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
shl
add
mov
mov
jmp
mov
add
add
sub
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
movzx
mov
mov
mov
sub
add
add
mov
mov
movzx
mov
xor
and
xor
mov
mov
and
mov
mov
xor
and
mov
mov
and
mov
or
mov
or
xor
mov
mov
mov
mov
mov
mov
movzx
cmp
sete
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
add
add
mov
mov
sub
sub
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
add
add
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
jmp
mov
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
jmp
mov
mov
add
add
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
shl
add
mov
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
sub
add
add
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
mov
add
add
sub
mov
mov
mov
mov
add
add
sub
add
add
sub
add
sub
sub
mov
mov
mov
mov
sub
add
add
mov
mov
add
add
sub
mov
mov
jmp
mov
mov
mov
mov
sub
mov
sub
add
mov
sub
mov
mov
mov
mov
mov
mov
mov
add
add
sub
mov
mov
sub
sub
mov
mov
jmp
mov
mov
movzx
mov
mov
sub
add
add
mov
mov
movzx
mov
xor
mov
and
xor
and
or
mov
mov
mov
mov
mov
mov
jmp
mov
jmp
mov
mov
sub
sub
mov
mov
sub
add
add
mov
mov
jmp
mov
mov
sub
add
add
mov
mov
jmp
mov
mov
mov
jmp
push
mov
push
push
push
sub
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
add
pop
pop
pop
pop
ret
mov
jmp
int3
int3
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
movzx
cmp
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
movzx
cmp
setne
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
add
mov
mov
mov
jmp
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
sub
mov
call
add
mov
mov
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
movzx
mov
mov
add
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
movzx
mov
mov
add
mov
mov
mov
jmp
mov
mov
add
add
sub
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
movzx
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
movzx
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
add
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
movzx
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
add
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
movzx
cmp
setbe
and
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
add
mov
mov
mov
add
mov
mov
movzx
mov
movzx
mov
add
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
mov
jmp
mov
jmp
mov
jmp
mov
mov
add
mov
mov
jmp
mov
jmp
mov
jmp
mov
mov
add
mov
mov
mov
add
mov
mov
movzx
mov
movzx
mov
add
mov
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
lea
mov
mov
mov
mov
mov
mov
mov
movzx
mov
mov
sub
mov
movzx
mov
mov
mov
add
add
mov
add
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
add
mov
mov
call
sub
mov
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
sub
mov
add
mov
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
add
mov
mov
call
sub
mov
mov
sub
add
add
mov
mov
mov
mov
jmp
mov
mov
add
mov
mov
mov
add
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
xor
mov
xor
xor
or
or
xor
and
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
add
mov
mov
add
mov
mov
mov
mov
mov
call
sub
mov
mov
add
mov
call
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
lea
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
xor
mov
xor
and
mov
movzx
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
lea
mov
mov
mov
mov
mov
call
mov
add
mov
mov
add
mov
mov
mov
jmp
mov
mov
sub
sub
mov
mov
jmp
add
pop
pop
pop
pop
ret
mov
jmp
mov
mov
mov
add
mov
mov
call
sub
mov
mov
jmp
mov
jmp
mov
mov
add
mov
mov
add
mov
mov
mov
mov
mov
call
sub
mov
mov
add
mov
call
mov
mov
jmp
mov
mov
mov
xor
mov
xor
and
mov
movzx
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
add
sub
sub
shr
mov
mov
add
mov
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
shr
movzx
mov
mov
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
lea
mov
mov
mov
add
mov
mov
xor
mov
xor
mov
mov
xor
mov
mov
or
mov
or
xor
and
movzx
mov
mov
sub
sub
mov
mov
mov
add
mov
mov
xor
mov
xor
mov
xor
or
or
xor
and
movzx
add
mov
mov
mov
mov
call
mov
mov
jmp
mov
mov
lea
mov
mov
mov
mov
mov
add
mov
mov
xor
mov
mov
xor
mov
mov
xor
mov
mov
mov
mov
or
mov
or
xor
and
movzx
movzx
mov
shr
xor
mov
xor
xor
or
or
xor
and
mov
movzx
sub
sub
mov
mov
mov
add
mov
mov
mov
xor
mov
xor
and
movzx
add
mov
mov
mov
call
mov
mov
jmp
mov
mov
lea
mov
mov
mov
add
mov
mov
mov
xor
mov
mov
mov
mov
xor
and
movzx
movzx
mov
xor
mov
xor
mov
xor
or
or
xor
and
movzx
sub
add
add
mov
mov
mov
add
mov
mov
mov
xor
mov
xor
and
movzx
add
mov
mov
mov
mov
call
mov
mov
jmp
mov
jmp
mov
jmp
mov
add
mov
mov
sub
add
add
mov
mov
jmp
mov
mov
mov
add
add
sub
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
add
pop
pop
pop
pop
ret
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
mov
xor
mov
xor
and
cmp
cmovne
mov
jmp
mov
mov
mov
mov
and
xor
or
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
shr
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
jmp
mov
mov
add
mov
mov
add
mov
mov
mov
jmp
mov
mov
add
add
sub
mov
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
cmp
setb
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
add
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
add
mov
mov
add
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
sub
add
add
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
add
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
movzx
xor
mov
mov
xor
xor
or
or
xor
and
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
add
mov
mov
sub
mov
mov
call
add
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
movzx
xor
mov
xor
xor
or
or
xor
and
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
add
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
jmp
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
mov
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
add
sub
mov
mov
mov
call
add
mov
mov
add
mov
mov
add
mov
mov
mov
mov
jmp
mov
mov
mov
add
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
mov
jmp
mov
mov
mov
mov
add
mov
mov
sub
mov
mov
call
add
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
jmp
mov
mov
mov
jmp
int3
push
mov
push
push
push
and
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
mov
imul
and
cmp
sete
and
mov
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
and
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
mov
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
add
add
mov
mov
mov
shl
sub
add
add
shl
sub
mov
call
add
mov
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
shl
sub
mov
call
add
mov
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
mov
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
cmp
seta
and
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
add
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
sub
add
add
mov
mov
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
cmovne
mov
jmp
mov
cmp
sete
and
movzx
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
cmp
cmova
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
mov
sub
add
add
mov
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
mov
mov
mov
cmp
cmova
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
sub
mov
call
add
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
sub
mov
call
add
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
and
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
sub
mov
mov
mov
mov
mov
mov
mov
call
add
mov
mov
jmp
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
jmp
mov
cmp
sete
and
movzx
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
jmp
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
mov
mov
jne
jmp
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
setl
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
mov
mov
jne
jmp
mov
test
jne
jmp
mov
mov
jmp
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
movzx
cmp
setge
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
jmp
mov
mov
mov
mov
movzx
cmp
jl
jmp
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
movzx
sub
sub
add
mov
mov
jmp
mov
mov
mov
mov
movzx
cmp
jl
jmp
mov
mov
mov
mov
mov
sub
mov
sub
add
mov
sub
mov
mov
movzx
sub
add
mov
mov
mov
jmp
mov
movzx
mov
mov
mov
mov
mov
mov
mov
mov
cmp
jge
mov
mov
mov
mov
mov
sub
sub
mov
mov
movzx
mov
shl
mov
mov
mov
shl
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
add
add
sub
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
cmp
jne
mov
mov
mov
mov
mov
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
sub
add
add
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
add
mov
imul
and
cmp
sete
mov
cmp
setl
mov
and
xor
or
test
mov
mov
mov
mov
jne
jmp
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
shl
sub
sub
add
mov
mov
mov
mov
mov
mov
shl
add
sub
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
sete
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
mov
cmp
setl
mov
and
xor
or
test
mov
mov
mov
mov
jne
jmp
mov
test
jne
jmp
mov
mov
jmp
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
cmp
sete
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
jne
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
cmp
mov
jbe
mov
cmp
setl
mov
mov
test
jne
jmp
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
sub
mov
sub
add
mov
sub
mov
mov
mov
mov
mov
mov
mov
sub
sub
mov
mov
mov
sub
add
add
mov
jmp
mov
cmp
jge
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
cmovne
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
mov
sub
mov
mov
shl
mov
sub
sub
mov
mov
mov
mov
mov
mov
mov
cmp
jae
mov
mov
mov
mov
mov
mov
mov
sub
add
add
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
jge
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
and
xor
or
mov
mov
mov
sub
add
add
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
cmp
mov
je
mov
mov
mov
cmp
setb
mov
mov
test
jne
jmp
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
cmp
jb
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
sub
sub
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
sub
mov
mov
mov
mov
mov
mov
sub
add
add
mov
mov
cmp
jne
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
jmp
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
cmp
sete
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
sub
sub
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
sub
sub
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
jmp
mov
mov
mov
mov
add
add
sub
sub
mov
mov
mov
mov
mov
add
sub
sub
cmp
jge
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
add
sub
sub
mov
cmp
setl
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
jmp
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
cmp
jge
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
mov
jmp
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
add
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
cmp
seta
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
mov
test
mov
jne
jmp
mov
cmp
setl
mov
mov
test
jne
jmp
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
mov
mov
mov
add
add
sub
mov
mov
mov
add
add
sub
mov
jmp
mov
cmp
jge
mov
cmp
jne
jmp
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
cmp
jb
jmp
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
sub
add
add
mov
mov
xor
mov
xor
and
mov
mov
mov
mov
mov
mov
shl
shl
add
mov
mov
shl
add
mov
mov
mov
cmp
setb
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
mov
mov
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
jae
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
movzx
sub
sub
add
sar
mov
movzx
mov
sub
sub
mov
mov
mov
add
mov
mov
mov
mov
add
add
sub
mov
mov
xor
mov
xor
and
mov
mov
mov
mov
shl
mov
movzx
mov
mov
sub
sub
add
mov
mov
mov
sar
sub
sub
imul
shl
add
mov
mov
mov
cmp
setge
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
cmp
jb
mov
mov
mov
mov
sub
add
add
mov
mov
mov
mov
mov
movzx
mov
mov
mov
mov
mov
shl
mov
mov
xor
mov
xor
xor
or
or
xor
and
mov
mov
mov
mov
add
mov
shl
add
mov
mov
shl
add
mov
mov
mov
cmp
jae
mov
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
mov
mov
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
jae
mov
mov
mov
mov
mov
mov
mov
movzx
add
sub
sub
sar
mov
movzx
add
add
sub
mov
mov
mov
mov
shl
mov
mov
cmp
je
jmp
jmp
mov
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
movzx
sar
mov
movzx
add
sub
sub
mov
mov
mov
mov
mov
sub
sub
sub
add
add
mov
mov
cmp
jne
jmp
jmp
jmp
mov
cmp
jl
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
cmp
jge
mov
mov
mov
mov
shl
add
mov
mov
mov
cmp
jae
mov
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
mov
mov
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
jae
mov
mov
mov
mov
mov
mov
mov
mov
movzx
sub
sub
add
sar
mov
movzx
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
shl
mov
jmp
mov
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
movzx
sar
mov
movzx
mov
sub
add
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
add
add
sub
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
add
add
mov
mov
mov
mov
mov
mov
mov
cmp
jae
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
mov
mov
mov
mov
mov
add
add
sub
mov
mov
cmp
jne
mov
mov
mov
cmp
jge
mov
mov
jmp
mov
cmp
jge
mov
mov
mov
sub
add
mov
jmp
mov
mov
mov
sub
add
mov
jmp
jmp
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
movzx
sar
mov
movzx
add
sub
sub
mov
mov
mov
mov
add
mov
mov
shl
add
mov
mov
mov
cmp
setb
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
and
mov
mov
or
mov
or
xor
or
xor
or
and
or
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
jae
mov
mov
mov
mov
mov
mov
mov
mov
movzx
mov
sub
add
sar
mov
movzx
mov
sub
mov
sub
add
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
cmovl
mov
mov
mov
add
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
movzx
sar
mov
movzx
sub
add
mov
mov
mov
mov
add
mov
mov
shl
add
mov
mov
mov
cmp
jae
mov
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
mov
mov
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
jae
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
movzx
add
sub
sub
sar
mov
movzx
add
add
sub
mov
mov
mov
mov
add
mov
mov
shl
shl
add
mov
mov
shl
add
mov
mov
cmp
setb
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
mov
mov
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
jae
mov
mov
mov
mov
mov
mov
mov
movzx
add
sub
sub
sar
mov
movzx
add
add
sub
mov
mov
mov
cmp
jne
mov
mov
jmp
mov
mov
mov
cmp
jae
mov
mov
sub
add
add
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
cmp
cmovl
mov
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
cmp
setae
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
sub
add
add
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
cmp
sete
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
mov
mov
sub
mov
sub
mov
mov
mov
mov
jmp
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
movzx
sar
mov
movzx
sub
sub
add
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
jmp
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
movzx
sar
mov
movzx
sub
sub
add
mov
mov
mov
mov
add
mov
mov
shl
add
mov
mov
mov
cmp
jae
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
and
xor
or
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
jae
mov
mov
mov
mov
mov
mov
mov
movzx
sub
sub
add
sar
mov
movzx
sub
add
add
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
movzx
sar
mov
movzx
sub
add
mov
mov
mov
mov
add
mov
mov
shl
add
mov
mov
mov
cmp
setb
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
and
xor
or
mov
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
jae
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
mov
movzx
add
sub
sub
sar
mov
movzx
add
add
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
movzx
sar
mov
movzx
add
sub
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
mov
cmp
cmovl
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
cmp
jae
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
and
xor
or
mov
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
jae
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
mov
movzx
mov
sub
add
sar
mov
movzx
mov
sub
mov
sub
add
mov
sub
mov
mov
mov
mov
add
mov
mov
shl
shl
add
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
movzx
sar
mov
movzx
add
sub
sub
mov
mov
mov
mov
add
mov
mov
mov
cmp
setb
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
and
xor
or
mov
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
jae
mov
mov
mov
mov
mov
mov
mov
mov
movzx
sub
sub
add
sar
mov
movzx
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
add
mov
mov
shl
shl
add
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
movzx
sar
mov
movzx
sub
add
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
shl
add
mov
mov
mov
cmp
jae
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
and
xor
or
mov
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
jae
mov
mov
mov
mov
mov
mov
mov
movzx
sub
sub
add
sar
mov
movzx
sub
add
add
mov
mov
mov
mov
shl
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
movzx
sar
mov
movzx
add
sub
sub
mov
mov
mov
mov
mov
sub
add
add
mov
sub
mov
sub
add
sub
mov
jmp
mov
mov
add
add
sub
mov
cmp
jne
mov
mov
mov
shl
mov
mov
add
sub
sub
mov
mov
mov
mov
add
add
sub
mov
mov
cmp
jge
mov
mov
add
add
sub
mov
mov
mov
add
mov
cmp
mov
jge
mov
mov
mov
jmp
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
jmp
mov
shl
shl
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
shl
add
mov
mov
mov
cmp
setb
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
mov
mov
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
jae
mov
mov
mov
mov
mov
mov
mov
movzx
add
sub
sub
sar
mov
movzx
sub
add
add
mov
mov
mov
mov
shl
mov
jmp
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
movzx
sar
mov
movzx
sub
add
mov
mov
mov
mov
mov
sub
add
add
sub
add
add
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
sub
add
add
mov
cmp
jne
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
sub
sub
add
mov
cmp
setge
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
sar
add
sub
sub
mov
mov
mov
xor
mov
xor
mov
xor
or
or
xor
and
mov
xor
mov
xor
xor
mov
and
mov
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
mov
mov
mov
cmp
setl
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
shl
mov
mov
mov
add
mov
shl
add
mov
mov
sub
add
shl
add
add
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
add
sub
sub
mov
mov
cmp
jae
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
and
xor
or
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
shr
mov
mov
mov
shl
mov
mov
mov
cmp
setae
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
and
xor
or
mov
jmp
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
cmp
jne
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
add
mov
mov
mov
mov
shl
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
shl
add
mov
mov
mov
cmp
setb
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
and
xor
or
mov
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
jae
mov
mov
mov
mov
mov
mov
mov
movzx
sub
sub
add
sar
mov
movzx
sub
add
add
mov
mov
mov
mov
shl
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
movzx
sar
mov
movzx
mov
sub
add
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
mov
sub
sub
sub
mov
mov
mov
mov
mov
mov
mov
and
xor
or
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
shl
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
cmp
setne
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
mov
mov
mov
sub
add
add
mov
cmp
jne
mov
mov
jmp
jmp
mov
mov
sub
add
add
mov
mov
mov
mov
cmp
jbe
mov
mov
jmp
mov
mov
mov
mov
add
sub
sub
mov
cmp
jbe
mov
mov
mov
mov
add
add
sub
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
cmp
setae
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
add
add
mov
mov
cmp
sete
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
mov
mov
sub
add
add
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
mov
mov
cmp
mov
je
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
cmp
setb
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
mov
jmp
mov
test
jne
jmp
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
cmp
jae
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
and
xor
or
mov
mov
mov
mov
mov
mov
add
sub
add
mov
mov
add
sub
sub
mov
cmp
jge
mov
mov
jmp
mov
mov
mov
mov
mov
cmp
jge
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
shl
mov
sub
add
mov
mov
mov
mov
mov
shl
sub
sub
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
jmp
jmp
mov
mov
mov
mov
mov
mov
mov
mov
cmp
cmovne
mov
mov
jmp
jmp
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
jmp
jmp
mov
mov
sub
sub
mov
mov
mov
mov
mov
jmp
mov
mov
sub
sub
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
add
sub
sub
mov
jmp
mov
mov
jmp
mov
mov
add
mov
mov
jmp
jmp
jmp
mov
mov
mov
mov
mov
sub
sub
mov
mov
xor
mov
xor
and
mov
mov
mov
mov
mov
mov
shl
shl
add
mov
shl
add
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
movzx
add
sub
sub
sar
mov
mov
movzx
sub
add
add
mov
mov
mov
mov
add
mov
mov
mov
mov
add
add
sub
mov
mov
xor
xor
xor
or
or
xor
and
mov
mov
mov
mov
shl
mov
movzx
mov
mov
sub
sub
add
mov
mov
mov
sar
sub
sub
imul
shl
add
mov
mov
jmp
jmp
jmp
jmp
mov
mov
add
add
sub
mov
jmp
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
movzx
sar
mov
movzx
sub
sub
add
mov
mov
mov
mov
add
mov
mov
shl
add
mov
jmp
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
and
xor
or
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
movzx
add
sub
sub
sar
mov
movzx
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
add
mov
mov
shl
shl
add
mov
mov
shl
add
mov
mov
jmp
mov
mov
mov
cmp
cmovl
mov
mov
mov
mov
mov
add
sub
sub
mov
mov
jmp
mov
mov
mov
mov
sub
add
add
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
movzx
sar
mov
movzx
sub
add
mov
mov
jmp
mov
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
mov
mov
jmp
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
movzx
sar
mov
movzx
add
sub
sub
mov
mov
mov
mov
add
mov
mov
shl
add
mov
jmp
mov
mov
mov
mov
mov
mov
mov
movzx
mov
sub
add
sar
mov
movzx
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
movzx
sar
mov
movzx
sub
sub
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
movzx
mov
sub
add
sar
mov
movzx
sub
sub
mov
mov
mov
mov
add
mov
mov
shl
shl
add
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
movzx
sar
mov
movzx
add
sub
sub
mov
mov
mov
mov
add
mov
jmp
jmp
mov
mov
mov
mov
shl
add
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
movzx
sar
mov
movzx
mov
sub
add
mov
mov
mov
mov
mov
sub
add
add
mov
sub
mov
sub
add
sub
mov
jmp
jmp
mov
mov
sub
sub
add
mov
jmp
mov
mov
mov
sar
sub
sub
add
mov
mov
mov
mov
xor
mov
xor
and
mov
xor
mov
xor
xor
mov
and
mov
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
mov
mov
jmp
mov
mov
mov
mov
mov
shl
mov
mov
mov
add
mov
shl
add
mov
mov
sub
sub
add
shl
add
add
mov
mov
jmp
mov
mov
shr
mov
mov
mov
shl
mov
jmp
mov
mov
add
mov
mov
mov
mov
shl
mov
mov
mov
jmp
mov
mov
mov
mov
shl
add
mov
mov
jmp
mov
mov
shl
mov
jmp
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
jmp
jmp
jmp
mov
mov
mov
mov
sub
sub
add
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
jmp
jmp
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
push
lea
sub
sbb
not
and
mov
and
cmp
jb
mov
pop
xchg
mov
mov
ret
sub
test
jmp
push
mov
cmp
je
push
push
push
call
test
jne
push
call
mov
call
push
call
pop
mov
pop
pop
ret
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
push
mov
mov
mov
mov
mov
add
cmp
jbe
cmp
jb
bt
jae
rep
jmp
cmp
jb
mov
xor
test
jne
bt
jb
bt
jae
test
jne
test
jne
bt
jae
mov
sub
lea
mov
lea
bt
jae
movq
sub
lea
movq
lea
test
je
bt
jae
movdqa
lea
movdqa
sub
movdqa
movdqa
lea
cmp
movdqa
palignr
movdqa
movdqa
palignr
movdqa
movdqa
palignr
movdqa
lea
jge
lea
jmp
movdqa
lea
lea
movdqa
sub
movdqa
movdqa
lea
cmp
movdqa
palignr
movdqa
movdqa
palignr
movdqa
movdqa
palignr
movdqa
lea
jge
lea
jmp
movdqa
lea
mov
movdqa
sub
movdqa
movdqa
lea
cmp
movdqa
palignr
movdqa
movdqa
palignr
movdqa
movdqa
palignr
movdqa
lea
jge
lea
cmp
jl
movdqu
sub
lea
movdqa
lea
jmp
bt
jae
mov
sub
lea
mov
lea
bt
jae
movq
sub
lea
movq
lea
mov
jmp
test
jne
shr
and
cmp
jb
rep
jmp
nop
mov
mov
sub
jb
and
add
jmp
jmp
nop
jmp
nop
fdivr
dec
add
sti
dec
add
dec
add
ror
inc
add
add
jmp
add
add
cmp
jb
rep
jmp
lea
and
mov
mov
mov
shr
mov
add
add
cmp
jb
rep
jmp
nop
and
mov
mov
add
shr
add
cmp
jb
rep
jmp
lea
scas
sti
dec
add
dec
add
dec
add
add
add
add
inc
(bad)
in
inc
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
lea
add
add
jmp
mov
enter
sar
dec
add
sti
dec
add
sti
dec
add
pop
ret
nop
mov
mov
mov
pop
pop
ret
nop
mov
mov
mov
mov
mov
pop
pop
ret
lea
mov
mov
mov
mov
mov
mov
mov
pop
pop
ret
nop
lea
lea
test
jne
shr
and
cmp
jb
std
rep
cld
jmp
mov
neg
jmp
lea
mov
mov
cmp
jb
and
sub
jmp
jmp
nop
push
cld
dec
add
add
ror
add
jmp
cmp
jb
std
rep
cld
jmp
lea
mov
and
mov
mov
shr
mov
sub
sub
cmp
jb
std
rep
cld
jmp
nop
mov
and
mov
mov
mov
mov
shr
mov
sub
sub
cmp
jb
std
rep
cld
jmp
lea
or
dec
add
std
dec
add
std
dec
add
std
dec
add
std
dec
add
std
dec
add
std
dec
add
dec
add
inc
(bad)
sbb
inc
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
lea
add
add
jmp
mov
fs
dec
add
add
add
inc
and
pop
pop
ret
nop
mov
mov
mov
pop
pop
ret
lea
mov
mov
mov
mov
mov
pop
pop
ret
nop
mov
mov
mov
mov
mov
mov
mov
pop
pop
ret
lea
push
mov
and
test
jne
mov
and
shr
je
lea
nop
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
lea
lea
dec
jne
test
je
mov
shr
test
je
lea
movdqa
movdqa
lea
lea
dec
jne
and
je
mov
shr
je
mov
mov
lea
lea
dec
jne
mov
and
je
mov
mov
inc
inc
dec
jne
lea
pop
pop
pop
ret
lea
jmp
int3
int3
int3
mov
sub
sub
push
mov
mov
and
je
mov
mov
inc
inc
dec
jne
shr
je
mov
mov
lea
lea
dec
jne
pop
jmp
push
mov
push
and
push
lea
push
push
push
call
mov
add
test
jne
cmp
je
call
test
je
call
mov
mov
mov
pop
leave
ret
call
jmp
push
push
call
call
movzx
push
call
pop
mov
cmp
je
xor
jmp
mov
cmp
jne
mov
cmp
jne
xor
cmp
jbe
cmp
setne
mov
call
test
jne
push
call
pop
call
test
jne
push
call
pop
call
and
call
test
jns
push
call
pop
call
mov
call
mov
call
test
jns
push
call
pop
call
test
jns
push
call
pop
push
call
pop
test
je
push
call
pop
call
push
push
push
push
call
mov
mov
test
jne
push
call
call
jmp
mov
mov
mov
mov
push
push
call
pop
pop
ret
mov
mov
mov
cmp
jne
push
call
call
mov
mov
call
ret
push
mov
cmp
jne
call
push
call
push
call
pop
pop
pop
ret
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
mov
mov
test
je
movzx
bt
jae
mov
push
mov
rep
jmp
mov
cmp
jl
bt
jb
push
mov
cmp
jb
neg
and
je
sub
mov
add
sub
jne
mov
shl
add
mov
shl
add
mov
and
shr
je
rep
test
je
mov
add
sub
jne
mov
pop
ret
mov
ret
call
mov
imul
add
mov
shr
and
mov
ret
push
mov
push
mov
cmp
ja
push
push
mov
test
jne
call
push
call
push
call
mov
pop
pop
test
je
mov
jmp
xor
inc
push
push
push
call
mov
test
jne
push
pop
cmp
je
push
call
pop
test
jne
jmp
call
mov
call
mov
mov
pop
pop
jmp
push
call
pop
call
mov
xor
pop
pop
ret
call
test
jne
mov
ret
add
ret
push
mov
push
call
mov
push
mov
call
pop
mov
call
mov
pop
pop
ret
call
test
jne
mov
ret
add
ret
push
mov
mov
xor
cmp
je
inc
cmp
jb
lea
cmp
ja
push
pop
pop
ret
lea
push
pop
cmp
sbb
and
add
pop
ret
mov
pop
ret
call
xor
test
setne
mov
mov
ret
push
mov
and
sub
push
xor
inc
or
push
call
test
je
xor
mov
mov
cpuid
push
mov
push
lea
or
mov
mov
mov
mov
test
mov
je
or
mov
mov
test
je
or
mov
mov
push
xor
pop
cpuid
lea
mov
mov
mov
mov
test
mov
je
or
mov
xor
xor
cpuid
lea
mov
mov
mov
mov
cmp
jne
cmp
jne
cmp
jne
xor
inc
xor
cpuid
mov
mov
mov
mov
mov
and
cmp
je
cmp
je
cmp
je
cmp
je
cmp
je
cmp
jne
or
mov
pop
pop
xor
pop
leave
ret
push
mov
push
mov
test
je
push
xor
pop
div
cmp
jae
call
mov
xor
jmp
imul
test
jne
inc
xor
cmp
ja
push
push
push
call
mov
test
jne
cmp
je
push
call
pop
test
jne
mov
test
je
jmp
mov
test
je
mov
mov
pop
pop
ret
push
mov
mov
mov
cmp
jne
cmp
jne
mov
cmp
je
cmp
je
cmp
je
cmp
je
xor
pop
ret
call
int3
push
call
pop
xor
ret
push
mov
push
call
mov
test
je
mov
push
mov
mov
cmp
je
add
lea
cmp
jb
lea
cmp
jae
cmp
je
xor
test
je
mov
test
je
cmp
jne
and
xor
inc
jmp
cmp
jne
or
jmp
mov
push
mov
mov
cmp
jne
push
pop
mov
add
and
cmp
jl
cmp
mov
jne
mov
jmp
cmp
jne
mov
jmp
cmp
jne
mov
jmp
cmp
jne
mov
jmp
cmp
jne
mov
jmp
cmp
jne
mov
jmp
cmp
jne
mov
jmp
cmp
jne
mov
jmp
cmp
jne
mov
push
push
call
pop
mov
jmp
push
and
call
pop
mov
or
pop
jmp
xor
pop
pop
pop
ret
push
push
call
mov
test
je
cmp
je
push
call
pop
cmp
je
push
call
pop
cmp
je
push
call
pop
cmp
je
push
call
pop
cmp
je
push
call
pop
cmp
je
push
call
pop
cmp
je
push
call
pop
cmp
je
push
call
pop
push
call
pop
and
mov
test
je
push
call
test
jne
cmp
je
push
call
pop
mov
call
push
call
pop
mov
mov
test
je
push
call
pop
cmp
je
cmp
je
cmp
jne
push
call
pop
mov
call
push
call
pop
call
ret
mov
push
call
pop
ret
mov
push
call
pop
ret
push
call
mov
test
jne
push
call
pop
mov
pop
ret
push
push
call
push
mov
call
mov
pop
test
jne
push
push
call
mov
pop
pop
test
je
push
push
call
pop
pop
test
je
push
push
call
pop
pop
call
or
mov
jmp
push
call
pop
xor
push
call
pop
mov
pop
ret
push
push
call
mov
mov
and
xor
inc
mov
mov
push
pop
mov
mov
mov
and
push
call
pop
and
push
call
mov
call
push
call
pop
mov
mov
mov
test
jne
mov
mov
push
call
pop
mov
call
call
ret
xor
inc
mov
push
call
pop
ret
push
call
pop
ret
call
call
test
jne
call
xor
ret
push
call
pop
mov
cmp
je
push
push
push
call
mov
pop
pop
test
je
push
push
call
pop
pop
test
je
push
push
call
pop
pop
call
or
mov
xor
inc
pop
ret
call
xor
pop
ret
mov
cmp
je
push
call
or
pop
jmp
push
mov
push
lea
push
push
push
call
test
je
push
push
call
test
je
push
call
leave
ret
push
mov
push
call
pop
push
call
int3
push
mov
call
push
call
pop
push
call
int3
push
push
push
call
add
ret
push
push
push
call
add
ret
push
mov
cmp
je
push
call
pop
test
je
push
call
pop
call
push
push
call
pop
pop
test
jne
push
push
push
call
pop
mov
mov
jmp
mov
test
je
call
add
cmp
jb
cmp
pop
pop
je
push
call
pop
test
je
push
push
push
call
xor
pop
ret
push
mov
push
push
push
call
add
pop
ret
push
push
call
mov
push
call
push
call
push
call
push
call
push
call
push
call
add
pop
jmp
push
mov
push
mov
jmp
mov
test
je
call
add
cmp
jb
pop
pop
ret
push
mov
push
mov
xor
jmp
test
jne
mov
test
je
call
add
cmp
jb
pop
pop
ret
push
call
pop
ret
push
call
pop
ret
push
push
call
push
call
pop
and
cmp
je
mov
mov
mov
cmp
jne
push
mov
call
mov
mov
test
je
push
call
mov
mov
mov
mov
sub
mov
cmp
jb
push
call
cmp
je
cmp
jb
push
call
mov
push
call
mov
call
push
mov
call
mov
push
call
mov
cmp
jne
cmp
je
mov
mov
mov
mov
mov
jmp
push
push
call
pop
pop
push
push
call
pop
pop
mov
call
cmp
jne
mov
push
call
pop
push
call
cmp
je
push
call
pop
ret
call
ret
push
mov
push
push
push
call
add
pop
ret
push
call
pop
cmp
je
push
call
pop
test
jne
cmp
jne
push
call
push
call
pop
pop
ret
push
mov
mov
xor
cmp
je
inc
cmp
jb
xor
pop
ret
mov
pop
ret
push
mov
sub
mov
xor
mov
push
mov
push
push
call
mov
pop
test
je
push
push
call
pop
cmp
je
push
call
pop
test
jne
cmp
je
cmp
je
push
push
push
call
add
xor
test
jne
push
push
push
mov
call
mov
test
jne
push
push
push
call
add
test
jne
push
call
inc
pop
cmp
jbe
push
call
lea
mov
sub
push
sar
push
sub
push
push
call
add
test
jne
push
push
mov
push
call
add
test
jne
push
push
push
call
add
test
jne
push
push
push
call
add
jmp
push
call
mov
test
je
cmp
je
xor
mov
mov
mov
cmp
je
inc
cmp
jb
push
lea
push
lea
push
mov
call
pop
push
lea
push
push
call
pop
mov
pop
xor
pop
call
leave
ret
push
push
push
push
push
call
int3
push
push
call
push
call
pop
xor
mov
push
push
pop
push
call
pop
pop
mov
mov
test
jne
push
lea
push
push
call
add
or
jmp
mov
mov
add
cmp
jae
mov
or
mov
and
mov
and
mov
mov
mov
mov
add
mov
mov
jmp
lea
push
call
cmp
je
mov
test
je
mov
mov
add
mov
add
mov
mov
cmp
jl
mov
mov
xor
inc
mov
cmp
jge
push
push
call
pop
pop
mov
mov
test
jne
mov
mov
mov
mov
mov
mov
cmp
jge
mov
cmp
je
cmp
je
mov
test
je
test
jne
push
call
mov
test
je
mov
sar
mov
and
shl
add
mov
mov
mov
mov
mov
mov
push
lea
push
call
inc
mov
mov
inc
mov
mov
inc
mov
add
mov
jmp
mov
add
mov
add
cmp
jae
mov
or
mov
and
mov
mov
mov
add
mov
jmp
inc
mov
mov
jmp
mov
cmp
jge
mov
shl
add
mov
cmp
je
cmp
je
movsx
or
mov
jmp
mov
test
jne
push
pop
jmp
lea
neg
sbb
add
push
call
mov
cmp
je
test
je
push
call
test
je
mov
and
cmp
jne
movsx
or
jmp
cmp
jne
movsx
or
mov
push
lea
push
call
inc
jmp
movsx
or
mov
mov
mov
test
je
mov
mov
inc
jmp
mov
call
xor
call
ret
push
call
pop
ret
push
mov
push
push
cmp
jne
call
push
push
push
push
mov
xor
push
push
mov
call
mov
mov
test
je
cmp
jne
mov
lea
push
lea
push
push
push
push
call
mov
add
cmp
jae
mov
cmp
jae
lea
cmp
jb
push
call
mov
pop
test
je
lea
push
lea
push
lea
push
push
push
call
mov
add
dec
mov
mov
xor
jmp
or
pop
pop
pop
leave
ret
push
mov
mov
push
mov
push
and
mov
mov
mov
push
mov
test
je
mov
add
mov
xor
mov
cmp
jne
xor
test
sete
inc
mov
mov
mov
jmp
inc
test
je
mov
mov
inc
mov
mov
movzx
push
inc
call
pop
test
je
inc
test
je
mov
mov
inc
inc
mov
test
je
mov
test
jne
cmp
je
cmp
jne
test
je
mov
jmp
dec
and
cmp
je
mov
cmp
je
cmp
jne
inc
jmp
cmp
je
mov
test
je
mov
add
mov
mov
inc
xor
inc
xor
jmp
inc
inc
cmp
je
cmp
jne
test
jne
cmp
je
lea
cmp
jne
mov
jmp
xor
xor
cmp
sete
mov
shr
jmp
dec
test
je
mov
inc
inc
test
jne
mov
test
je
cmp
jne
cmp
je
cmp
je
test
je
movsx
push
call
pop
test
je
test
je
mov
mov
inc
inc
inc
mov
mov
inc
jmp
test
je
inc
inc
inc
inc
jmp
test
je
mov
inc
inc
jmp
mov
pop
pop
pop
test
je
and
mov
inc
pop
ret
cmp
jne
call
push
mov
push
xor
test
jne
or
jmp
cmp
je
inc
push
call
inc
pop
add
mov
test
jne
lea
push
push
call
mov
pop
pop
mov
test
je
mov
push
cmp
je
push
call
cmp
pop
lea
je
push
push
call
pop
pop
mov
test
je
push
push
push
call
add
test
jne
add
add
cmp
jne
mov
push
call
and
and
mov
xor
pop
pop
pop
pop
ret
push
call
and
or
jmp
xor
push
push
push
push
push
call
int3
push
mov
mov
mov
pop
ret
push
mov
mov
test
js
cmp
jle
cmp
jne
mov
jmp
mov
mov
mov
pop
ret
call
mov
call
or
pop
ret
push
mov
sub
mov
and
and
push
push
mov
mov
cmp
je
test
je
not
mov
jmp
lea
push
call
mov
xor
mov
call
xor
call
xor
lea
push
call
mov
xor
lea
xor
xor
cmp
jne
mov
jmp
test
jne
mov
or
shl
or
mov
not
mov
pop
pop
leave
ret
push
push
mov
mov
jmp
mov
test
je
call
add
cmp
jb
pop
pop
ret
push
push
mov
mov
jmp
mov
test
je
call
add
cmp
jb
pop
pop
ret
push
mov
push
push
call
mov
xor
test
je
push
mov
cmp
je
add
cmp
jne
add
cmp
jne
push
push
push
push
sub
push
sar
inc
push
push
push
push
call
mov
test
je
push
call
mov
pop
test
je
xor
push
push
push
push
push
push
push
push
call
test
jne
push
call
pop
xor
push
call
mov
jmp
push
call
xor
pop
pop
pop
leave
ret
push
mov
mov
xor
je
push
call
pop
ret
pop
jmp
push
mov
mov
xor
push
je
call
pop
ret
call
pop
ret
push
mov
mov
xor
push
je
call
pop
ret
call
pop
ret
push
mov
mov
xor
push
push
je
call
pop
ret
call
pop
ret
push
mov
sub
lea
push
call
test
je
movzx
leave
ret
push
pop
leave
ret
push
mov
push
push
mov
test
jns
mov
xor
xor
mov
je
push
lea
push
call
cmp
jne
inc
mov
xor
test
setg
pop
leave
ret
push
push
push
call
mov
mov
push
push
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
mov
push
push
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
pop
mov
pop
ret
push
mov
push
call
pop
ret
push
mov
push
call
push
call
pop
ret
push
mov
push
call
push
call
pop
ret
push
push
xor
cmp
jne
call
mov
test
jne
mov
mov
cmp
ja
test
je
test
je
cmp
jne
xor
test
sete
mov
movzx
push
call
pop
test
je
inc
inc
jmp
cmp
ja
inc
mov
test
jne
pop
mov
pop
ret
int3
push
push
mov
mov
lea
sub
push
push
push
mov
xor
xor
push
mov
push
mov
mov
mov
lea
mov
ret
mov
mov
pop
pop
pop
pop
pop
mov
pop
push
ret
int3
int3
int3
int3
int3
int3
int3
push
mov
sub
push
mov
push
push
mov
xor
mov
mov
mov
lea
cmp
je
mov
add
xor
call
mov
mov
add
xor
call
mov
test
jne
mov
mov
mov
lea
mov
mov
mov
cmp
je
lea
lea
mov
mov
lea
mov
test
je
mov
call
mov
mov
test
js
jle
mov
cmp
jne
cmp
je
push
call
add
test
je
push
push
call
add
mov
mov
call
mov
mov
cmp
je
push
push
mov
call
mov
mov
mov
cmp
je
jmp
mov
mov
mov
cmp
jne
test
je
jmp
mov
jmp
cmp
je
push
push
mov
mov
call
mov
cmp
je
mov
add
xor
call
mov
mov
add
xor
call
mov
pop
pop
pop
mov
pop
ret
mov
add
xor
call
mov
mov
add
xor
call
mov
mov
mov
call
int3
test
jne
pxor
jmp
movd
punpcklbw
punpcklwd
pshufd
push
push
mov
and
test
jne
mov
and
shr
je
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
lea
dec
jne
test
je
mov
shr
je
jmp
lea
movdqa
lea
dec
jne
and
je
mov
shr
je
movd
lea
dec
jne
and
je
mov
inc
dec
jne
pop
pop
ret
neg
add
sub
push
mov
and
je
mov
inc
dec
jne
shr
je
movd
lea
dec
jne
pop
jmp
push
mov
push
call
test
je
push
call
pop
test
je
xor
inc
pop
ret
xor
pop
ret
push
mov
mov
mov
pop
ret
push
mov
sub
mov
xor
mov
cmp
push
je
push
call
pop
and
push
lea
push
push
call
lea
mov
lea
add
mov
mov
mov
mov
mov
mov
mov
data16
data16
data16
data16
data16
data16
pushf
pop
mov
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
lea
push
call
pop
test
jne
test
jne
cmp
je
push
call
pop
mov
xor
pop
call
leave
ret
push
mov
mov
mov
pop
ret
push
mov
push
call
test
je
pop
jmp
push
push
push
push
push
call
int3
xor
push
push
push
push
push
call
add
ret
push
call
test
je
push
pop
int
push
push
mov
push
push
call
push
call
add
pop
ret
push
push
call
call
mov
test
je
and
call
jmp
xor
inc
ret
mov
mov
call
int3
push
call
mov
ret
push
mov
push
mov
cmp
jne
push
call
pop
test
jne
push
call
pop
push
call
pop
pop
ret
push
push
mov
mov
push
mov
test
je
cmp
je
push
call
push
call
and
pop
add
cmp
jl
pop
cmp
je
cmp
jne
push
call
add
cmp
jl
pop
pop
ret
push
push
call
cmp
jne
call
push
call
push
call
pop
pop
mov
cmp
jne
push
call
pop
mov
test
jne
call
mov
xor
jmp
push
call
pop
and
cmp
jne
push
push
call
mov
jmp
push
call
pop
mov
call
xor
inc
call
ret
push
call
pop
ret
push
push
mov
mov
cmp
jne
mov
push
push
add
call
add
cmp
jl
xor
pop
inc
pop
ret
push
mov
mov
push
call
pop
ret
push
mov
push
push
xor
push
push
push
call
mov
add
test
jne
cmp
jbe
push
call
lea
mov
cmp
jbe
or
cmp
jne
mov
pop
pop
pop
ret
push
mov
push
push
push
mov
xor
push
call
mov
pop
test
jne
test
je
push
call
mov
lea
mov
cmp
jbe
or
cmp
jne
pop
pop
mov
pop
pop
ret
push
mov
push
push
xor
push
push
call
mov
pop
pop
test
jne
cmp
je
cmp
jbe
push
call
lea
mov
cmp
jbe
or
cmp
jne
mov
pop
pop
pop
ret
push
mov
push
push
mov
push
mov
push
call
cmp
je
push
call
mov
test
je
push
call
cmp
je
push
call
mov
test
je
push
call
push
pop
lea
mov
cmp
je
cmp
je
push
call
mov
cmp
je
cmp
je
push
call
mov
add
dec
mov
jne
mov
add
push
call
pop
pop
pop
pop
ret
push
mov
push
push
mov
xor
mov
push
test
je
cmp
je
mov
test
je
cmp
jne
mov
test
je
cmp
jne
push
call
push
call
pop
pop
mov
test
je
cmp
jne
push
call
push
call
pop
pop
push
call
push
call
pop
pop
mov
test
je
cmp
jne
mov
sub
push
call
mov
mov
sub
push
call
mov
sub
push
call
push
call
add
mov
cmp
je
cmp
jne
push
call
push
call
pop
pop
push
pop
lea
lea
mov
cmp
je
mov
test
je
cmp
jne
push
call
push
call
pop
pop
mov
cmp
je
mov
test
je
cmp
jne
push
call
pop
mov
add
add
dec
mov
jne
push
call
pop
pop
pop
pop
pop
ret
push
mov
push
mov
test
je
push
push
mov
push
call
cmp
je
push
call
mov
test
je
push
call
cmp
je
push
call
mov
test
je
push
call
push
pop
lea
mov
cmp
je
cmp
je
push
call
mov
cmp
je
cmp
je
push
call
mov
add
dec
mov
jne
mov
add
push
call
pop
pop
mov
pop
pop
ret
push
push
call
call
mov
mov
test
je
cmp
je
call
mov
test
jne
push
call
pop
mov
call
ret
push
call
pop
and
push
lea
push
call
pop
pop
mov
mov
mov
call
jmp
mov
push
call
pop
ret
push
mov
push
mov
test
je
mov
test
je
push
mov
cmp
je
push
mov
call
pop
test
je
push
call
cmp
pop
jne
cmp
je
push
call
pop
mov
pop
jmp
xor
pop
pop
ret
cmp
jne
push
call
pop
mov
xor
ret
push
mov
push
mov
mov
mov
test
jne
call
mov
mov
mov
mov
mov
mov
mov
cmp
je
mov
test
jne
call
mov
mov
cmp
je
mov
mov
test
jne
call
mov
mov
mov
test
jne
or
mov
mov
jmp
mov
mov
mov
mov
mov
pop
pop
ret
push
mov
mov
sub
je
sub
je
sub
je
dec
je
xor
pop
ret
mov
pop
ret
mov
pop
ret
mov
pop
ret
mov
pop
ret
push
mov
sub
lea
push
call
mov
and
cmp
jne
mov
call
jmp
cmp
jne
mov
call
jmp
cmp
jne
mov
mov
mov
cmp
je
mov
and
leave
ret
push
mov
push
mov
push
push
push
xor
lea
push
push
call
xor
movzx
mov
mov
mov
mov
shl
or
lea
stos
stos
stos
mov
add
sub
mov
mov
mov
inc
dec
jne
lea
mov
mov
mov
inc
dec
jne
pop
pop
pop
pop
ret
push
mov
sub
mov
xor
mov
push
push
mov
push
lea
push
push
call
xor
mov
test
je
mov
mov
inc
cmp
jb
mov
mov
lea
jmp
movzx
movzx
jmp
cmp
jae
mov
inc
cmp
jbe
add
mov
test
jne
push
push
lea
push
push
lea
push
push
push
call
push
push
lea
push
push
push
lea
push
push
push
push
call
add
lea
push
push
push
push
push
lea
push
push
push
push
call
add
mov
movzx
test
je
or
mov
jmp
test
je
or
mov
mov
jmp
mov
inc
cmp
jb
jmp
push
lea
pop
sub
mov
mov
add
add
mov
add
cmp
ja
or
lea
jmp
cmp
ja
or
lea
mov
jmp
mov
mov
inc
lea
cmp
jb
mov
pop
pop
xor
pop
call
leave
ret
push
push
call
call
mov
mov
test
je
cmp
je
mov
test
jne
push
call
pop
mov
call
ret
push
call
pop
and
mov
mov
cmp
je
test
je
push
call
test
jne
cmp
je
push
call
pop
mov
mov
mov
mov
push
call
mov
call
jmp
mov
push
call
pop
ret
push
push
call
or
call
mov
mov
call
mov
push
call
pop
mov
cmp
je
push
call
pop
mov
test
je
mov
mov
mov
mov
rep
xor
mov
push
push
call
pop
pop
mov
mov
test
jne
mov
push
call
test
mov
jne
mov
cmp
je
push
call
pop
mov
mov
push
call
mov
test
jne
test
jne
push
call
pop
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
jge
mov
mov
inc
jmp
mov
mov
cmp
jge
mov
mov
inc
jmp
mov
cmp
jge
mov
mov
inc
jmp
push
call
test
jne
mov
cmp
je
push
call
pop
mov
push
call
mov
call
jmp
mov
push
call
pop
ret
jmp
cmp
jne
cmp
je
push
call
pop
call
mov
jmp
xor
mov
call
ret
push
mov
sub
mov
xor
mov
push
push
push
mov
call
mov
pop
mov
test
jne
push
call
pop
xor
jmp
push
xor
mov
mov
mov
cmp
je
inc
add
mov
cmp
jb
cmp
je
cmp
je
movzx
push
call
test
je
lea
push
push
call
test
je
push
lea
push
push
call
mov
xor
inc
add
mov
cmp
jbe
cmp
lea
je
mov
test
je
movzx
movzx
jmp
or
inc
cmp
jbe
add
cmp
jne
lea
mov
or
inc
dec
jne
push
call
add
mov
mov
jmp
mov
xor
movzx
mov
shl
or
lea
stos
stos
stos
jmp
cmp
je
push
call
jmp
or
jmp
push
lea
push
push
call
mov
add
imul
lea
mov
cmp
mov
je
mov
test
je
movzx
movzx
jmp
cmp
jae
mov
or
movzx
inc
cmp
jbe
add
cmp
jne
mov
inc
add
mov
cmp
jb
mov
push
mov
mov
call
add
mov
push
lea
lea
pop
mov
mov
lea
lea
dec
jne
push
call
pop
xor
pop
mov
pop
xor
pop
call
leave
ret
int3
int3
int3
int3
int3
int3
push
mov
mov
push
mov
add
push
movzx
movzx
add
xor
add
push
test
je
mov
mov
cmp
jb
mov
add
cmp
jb
inc
add
cmp
jb
xor
pop
pop
pop
pop
ret
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
push
push
push
mov
push
sub
push
push
push
mov
xor
xor
push
lea
mov
mov
mov
push
call
add
test
je
mov
sub
push
push
call
add
test
je
mov
shr
not
and
mov
mov
mov
pop
pop
pop
pop
mov
pop
ret
mov
mov
xor
cmp
sete
mov
ret
mov
mov
xor
mov
mov
pop
pop
pop
pop
mov
pop
ret
int3
int3
int3
int3
int3
int3
push
mov
mov
mov
cmp
je
xor
pop
ret
mov
add
xor
cmp
jne
mov
cmp
sete
pop
ret
push
push
push
call
pop
pop
mov
push
call
mov
mov
test
jne
push
pop
pop
ret
and
xor
pop
ret
push
push
call
call
and
push
call
pop
mov
mov
mov
call
mov
call
ret
mov
call
ret
push
mov
push
push
push
mov
push
push
call
push
mov
call
mov
mov
cmp
jb
mov
sub
lea
cmp
jb
push
call
mov
lea
pop
cmp
jae
mov
cmp
jae
mov
mov
add
cmp
jb
push
push
call
pop
pop
test
jne
lea
cmp
jb
push
push
call
pop
pop
test
je
sar
push
lea
call
mov
push
call
lea
push
mov
call
mov
mov
jmp
xor
pop
pop
pop
leave
ret
push
mov
push
call
neg
sbb
neg
pop
dec
pop
ret
push
xor
push
call
mov
add
cmp
jb
pop
ret
push
mov
mov
mov
pop
ret
push
mov
mov
mov
pop
ret
push
call
ret
push
mov
mov
mov
mov
mov
mov
pop
ret
push
push
call
xor
mov
xor
mov
mov
cmp
jg
je
mov
push
pop
sub
je
sub
je
sub
je
sub
jne
call
mov
mov
test
jne
or
jmp
mov
mov
jmp
push
push
call
pop
pop
add
mov
mov
jmp
mov
sub
je
sub
je
dec
je
call
mov
call
jmp
mov
mov
jmp
mov
mov
jmp
mov
mov
xor
inc
mov
push
call
mov
cmp
je
test
jne
push
call
test
je
push
call
pop
and
cmp
je
cmp
je
cmp
jne
mov
mov
and
cmp
jne
mov
mov
mov
cmp
jne
mov
mov
mov
mov
add
cmp
jge
mov
imul
mov
and
inc
mov
mov
jmp
push
call
mov
mov
mov
call
cmp
jne
push
push
call
pop
jmp
mov
mov
mov
test
je
push
call
pop
ret
push
call
pop
cmp
je
cmp
je
cmp
jne
mov
mov
cmp
jne
mov
mov
xor
call
ret
push
mov
mov
mov
push
mov
cmp
je
mov
imul
add
add
cmp
jb
imul
add
cmp
jae
cmp
jne
mov
jmp
xor
pop
pop
ret
int3
int3
mov
test
je
mov
add
test
je
test
jne
add
lea
lea
mov
mov
add
xor
xor
add
test
je
mov
test
je
test
je
test
je
test
je
jmp
lea
mov
sub
ret
lea
mov
sub
ret
lea
mov
sub
ret
lea
mov
sub
ret
push
mov
push
push
mov
test
je
mov
test
je
mov
test
jne
xor
mov
call
push
pop
mov
call
mov
pop
pop
pop
ret
mov
cmp
je
add
dec
jne
test
je
sub
movzx
mov
lea
test
je
dec
jne
xor
test
jne
mov
call
push
jmp
push
mov
push
mov
test
je
mov
test
je
mov
test
jne
xor
mov
call
push
pop
mov
call
mov
pop
pop
ret
push
mov
sub
movzx
mov
lea
test
je
dec
jne
xor
pop
test
jne
mov
call
push
jmp
push
mov
mov
mov
add
test
jne
sub
sar
dec
pop
ret
push
mov
mov
mov
push
test
jne
test
jne
cmp
jne
xor
jmp
test
je
mov
test
je
test
jne
xor
mov
jmp
mov
test
jne
xor
mov
call
push
pop
mov
call
mov
pop
pop
ret
push
push
mov
mov
cmp
jne
sub
movzx
mov
lea
test
je
dec
jne
jmp
sub
movzx
mov
lea
test
je
dec
je
dec
jne
test
jne
xor
mov
test
pop
pop
jne
cmp
jne
mov
xor
push
mov
pop
jmp
xor
mov
call
push
jmp
push
mov
sub
mov
xor
mov
mov
push
mov
push
push
mov
mov
xor
push
mov
call
mov
mov
call
mov
cmp
jne
push
push
push
call
mov
test
jne
call
cmp
jne
push
call
mov
test
je
push
push
call
test
je
push
call
push
push
mov
call
push
call
push
push
mov
call
push
call
push
push
mov
call
push
call
mov
test
je
push
push
call
push
call
mov
mov
call
test
je
mov
test
je
push
call
cmp
je
push
pop
jmp
cmp
je
push
call
push
jmp
mov
mov
cmp
je
cmp
je
push
call
push
mov
call
mov
mov
test
je
test
je
call
test
je
lea
push
push
lea
push
push
push
call
test
je
test
jne
mov
or
jmp
mov
cmp
je
push
call
test
je
call
mov
test
je
mov
cmp
je
push
call
test
je
push
call
mov
mov
push
call
test
je
push
push
push
push
call
jmp
xor
mov
pop
pop
xor
pop
call
leave
ret
cmp
jne
repz
jmp
int3
int3
int3
int3
int3
push
push
push
mov
mov
mov
push
push
push
push
push
push
push
mov
xor
mov
mov
mov
mov
mov
xor
mov
cmp
je
mov
cmp
je
cmp
jbe
lea
lea
mov
mov
cmp
jne
push
mov
call
mov
mov
call
jmp
pop
add
pop
pop
pop
ret
mov
test
mov
je
mov
mov
xor
call
push
mov
push
push
push
call
add
pop
mov
mov
mov
mov
ret
push
mov
mov
push
push
push
call
add
pop
ret
push
push
push
push
mov
xor
xor
xor
xor
xor
call
pop
pop
pop
pop
ret
mov
mov
mov
push
call
xor
xor
xor
xor
xor
jmp
push
mov
push
push
push
push
push
push
push
call
pop
pop
pop
pop
ret
push
mov
push
push
push
call
add
pop
ret
mov
push
push
pop
test
jne
mov
jmp
cmp
jge
mov
mov
push
push
call
pop
pop
mov
test
jne
push
push
mov
call
pop
pop
mov
test
jne
push
pop
pop
ret
xor
mov
mov
add
lea
cmp
jge
mov
jmp
xor
pop
ret
call
cmp
je
call
push
call
and
pop
ret
push
mov
push
mov
mov
cmp
jb
cmp
ja
mov
sub
sar
add
push
call
or
pop
jmp
lea
push
call
pop
pop
ret
push
mov
mov
cmp
jge
add
push
call
mov
pop
or
pop
ret
mov
add
push
call
pop
ret
push
mov
mov
mov
cmp
jb
cmp
ja
and
sub
sar
add
push
call
pop
pop
ret
add
push
call
pop
ret
push
mov
mov
mov
cmp
jge
and
lea
push
call
pop
pop
ret
add
push
call
pop
ret
push
mov
sub
push
push
lea
call
movzx
mov
mov
test
jne
xor
cmp
je
mov
mov
movzx
and
jmp
mov
test
je
xor
inc
cmp
pop
je
mov
and
mov
leave
ret
push
mov
push
push
push
push
call
add
pop
ret
push
mov
push
mov
test
je
mov
test
je
mov
test
jne
mov
call
push
pop
mov
call
mov
pop
pop
ret
push
mov
sub
mov
mov
inc
test
je
dec
jne
pop
test
jne
mov
call
push
jmp
xor
jmp
and
ret
call
test
je
push
call
pop
test
je
push
call
test
je
push
pop
int
push
push
push
call
add
push
call
int3
push
mov
cmp
jne
push
call
pop
pop
ret
push
mov
test
jne
push
call
pop
xor
jmp
push
jmp
test
jne
inc
push
push
push
push
call
mov
test
jne
cmp
je
push
call
pop
test
je
cmp
jbe
push
call
pop
call
mov
xor
pop
pop
pop
ret
call
mov
call
push
call
pop
mov
jmp
call
mov
call
push
call
pop
mov
mov
jmp
push
mov
push
mov
test
je
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
pop
pop
ret
push
mov
push
mov
test
je
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
pop
pop
ret
push
mov
push
mov
test
je
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
add
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
add
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
add
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
add
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
add
push
call
push
call
push
call
push
call
push
call
push
call
push
call
add
pop
pop
ret
push
mov
push
push
mov
xor
mov
push
push
mov
push
test
jle
mov
mov
dec
cmp
je
inc
test
jne
or
mov
sub
dec
cmp
lea
jl
mov
mov
xor
test
jne
mov
mov
mov
mov
mov
xor
cmp
push
setne
push
push
push
lea
push
push
call
mov
mov
test
jne
xor
jmp
jle
push
xor
pop
div
cmp
jb
lea
cmp
ja
mov
call
mov
test
je
mov
jmp
push
call
mov
pop
test
je
mov
add
mov
jmp
xor
test
je
push
push
push
push
push
push
call
test
je
mov
push
push
push
push
push
push
call
mov
add
test
je
mov
test
je
mov
test
je
cmp
jg
push
push
push
push
push
push
call
add
jmp
test
jle
push
xor
pop
div
cmp
jb
lea
cmp
ja
call
mov
test
je
mov
jmp
push
call
mov
pop
test
je
mov
add
jmp
xor
test
je
push
push
push
push
push
push
call
add
test
je
xor
push
push
cmp
jne
push
push
jmp
push
push
push
push
push
push
call
mov
push
call
pop
push
call
pop
mov
lea
pop
pop
pop
mov
xor
call
leave
ret
push
mov
sub
push
lea
call
push
lea
push
push
push
push
push
push
push
push
call
add
cmp
je
mov
and
leave
ret
push
mov
mov
test
je
sub
cmp
jne
push
call
pop
pop
ret
push
mov
push
mov
xor
mov
mov
push
push
push
xor
test
jne
mov
mov
mov
mov
mov
xor
cmp
push
push
push
setne
push
lea
push
push
call
mov
test
jne
xor
jmp
jle
cmp
ja
lea
cmp
ja
call
mov
test
je
mov
jmp
push
call
mov
pop
test
je
mov
add
jmp
mov
test
je
lea
push
push
push
call
add
push
push
push
push
push
push
call
test
je
push
push
push
push
call
mov
push
call
pop
mov
lea
pop
pop
pop
mov
xor
call
leave
ret
push
mov
sub
push
lea
call
push
lea
push
push
push
push
push
push
call
add
cmp
je
mov
and
leave
ret
push
mov
cmp
jne
call
mov
call
or
pop
ret
push
push
push
call
pop
ret
push
call
pop
ret
push
mov
push
push
push
xor
mov
lea
cdq
sub
mov
sar
push
push
push
call
add
test
je
jns
lea
jmp
lea
cmp
jle
or
jmp
mov
pop
pop
pop
pop
ret
push
mov
cmp
je
push
call
pop
test
js
cmp
jae
mov
pop
ret
xor
pop
ret
push
mov
mov
xor
je
xor
push
push
push
push
push
push
push
push
push
call
pop
ret
push
push
push
push
push
push
call
pop
push
call
pop
ret
push
mov
push
mov
xor
test
je
mov
push
push
mov
push
pop
push
pop
sub
mov
jmp
push
pop
movzx
cmp
jb
cmp
ja
add
movzx
jmp
mov
movzx
cmp
jb
cmp
ja
add
movzx
add
dec
je
test
je
cmp
je
movzx
movzx
pop
sub
pop
pop
pop
ret
push
mov
mov
test
jne
call
mov
call
or
pop
ret
mov
pop
ret
push
mov
mov
cmp
jne
call
mov
jmp
test
js
cmp
jae
mov
sar
and
mov
shl
movsx
and
pop
ret
call
mov
call
xor
pop
ret
push
mov
push
mov
test
jne
push
call
pop
jmp
push
call
pop
test
je
or
jmp
test
je
push
call
push
call
pop
neg
pop
sbb
jmp
xor
pop
pop
ret
push
mov
push
push
mov
xor
mov
and
cmp
jne
test
je
push
mov
sub
test
jle
push
push
push
call
pop
push
call
add
cmp
jne
mov
test
jns
and
mov
jmp
or
or
pop
mov
and
mov
pop
mov
pop
pop
ret
push
call
pop
ret
push
push
call
xor
mov
and
push
call
pop
and
xor
mov
mov
cmp
jge
mov
mov
test
je
test
je
push
push
call
pop
pop
mov
mov
mov
test
je
cmp
jne
push
call
pop
cmp
je
inc
mov
jmp
test
jne
test
je
push
call
pop
cmp
jne
or
and
call
inc
jmp
mov
mov
mov
mov
push
push
call
pop
pop
ret
mov
call
cmp
mov
je
mov
call
ret
mov
mov
push
call
pop
ret
push
mov
call
push
mov
call
push
call
cmp
pop
pop
jne
push
call
pop
push
call
pop
pop
ret
push
mov
sub
push
call
test
je
push
pop
int
mov
mov
mov
mov
mov
mov
data16
data16
data16
data16
data16
data16
pushf
pop
mov
mov
mov
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
push
pop
imul
mov
push
pop
imul
mov
mov
push
pop
shl
mov
mov
push
call
leave
ret
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
push
push
push
push
push
push
push
push
call
pop
pop
pop
pop
mov
pop
ret
mov
test
mov
je
mov
mov
xor
call
push
mov
mov
push
mov
push
call
add
pop
mov
mov
mov
mov
ret
push
push
push
mov
push
push
push
push
push
mov
xor
push
lea
mov
mov
mov
mov
cmp
je
cmp
je
cmp
jbe
lea
mov
mov
mov
cmp
jne
push
mov
call
mov
call
jmp
mov
mov
add
pop
pop
pop
ret
xor
mov
cmp
jne
mov
mov
cmp
jne
mov
ret
push
push
mov
jmp
push
push
mov
mov
mov
mov
mov
push
push
push
pop
pop
pop
pop
pop
ret
call
ret
push
push
call
xor
mov
push
call
pop
and
push
pop
mov
cmp
jge
mov
mov
test
je
test
je
push
call
pop
cmp
je
inc
mov
cmp
jl
mov
mov
add
push
call
mov
push
call
pop
mov
and
inc
jmp
mov
call
mov
call
ret
mov
push
call
pop
ret
push
push
call
mov
cmp
je
push
call
pop
and
push
push
call
pop
pop
mov
mov
call
call
ret
push
call
pop
ret
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
lea
sub
and
add
sbb
or
pop
jmp
push
lea
sub
and
add
sbb
or
pop
jmp
push
push
call
mov
cmp
jne
call
mov
jmp
test
js
cmp
jae
mov
sar
mov
mov
and
shl
mov
movsx
and
je
push
call
pop
xor
mov
mov
mov
test
je
push
call
pop
push
call
test
jne
call
mov
mov
test
je
call
mov
call
mov
or
mov
mov
call
mov
jmp
mov
mov
push
call
pop
ret
call
mov
call
or
call
ret
push
push
call
mov
cmp
jne
call
and
call
mov
jmp
test
js
cmp
jae
mov
sar
mov
and
shl
mov
movsx
and
je
push
call
pop
and
mov
test
je
push
push
push
call
add
mov
jmp
call
mov
call
and
or
mov
mov
call
mov
jmp
mov
mov
push
call
pop
ret
call
and
call
mov
call
or
call
ret
push
mov
mov
call
mov
xor
mov
mov
mov
xor
push
mov
mov
mov
mov
mov
cmp
jne
xor
jmp
test
jne
call
and
call
mov
call
or
jmp
push
push
mov
sar
mov
and
shl
mov
mov
mov
mov
add
sar
cmp
je
cmp
jne
mov
not
test
jne
call
and
call
mov
call
jmp
mov
test
je
push
push
push
push
call
add
push
call
pop
test
je
mov
mov
test
je
call
mov
xor
cmp
lea
push
mov
sete
mov
push
mov
call
test
je
cmp
je
test
je
call
mov
and
mov
mov
mov
cmp
jbe
xor
mov
mov
test
jne
mov
xor
cmp
sete
mov
mov
mov
cmp
je
mov
mov
push
lea
mov
and
push
jmp
movsx
push
call
pop
test
je
mov
mov
sub
add
cmp
jbe
push
push
lea
push
call
add
cmp
je
mov
inc
inc
jmp
push
push
lea
push
call
add
cmp
je
mov
xor
push
push
inc
inc
push
mov
lea
push
push
lea
push
push
push
call
mov
test
je
push
lea
push
push
lea
push
mov
mov
push
call
test
je
mov
mov
add
cmp
jl
cmp
je
push
lea
push
push
lea
push
mov
mov
mov
push
call
test
je
cmp
jl
inc
inc
jmp
cmp
je
cmp
jne
movzx
xor
cmp
mov
mov
sete
add
add
mov
mov
mov
cmp
je
cmp
jne
push
call
pop
cmp
jne
add
cmp
je
push
pop
push
mov
call
pop
cmp
jne
inc
inc
mov
mov
cmp
jb
jmp
mov
mov
mov
inc
mov
mov
mov
mov
jmp
mov
jmp
mov
mov
test
je
mov
xor
mov
test
jne
mov
mov
cmp
jbe
xor
sub
mov
lea
mov
cmp
jae
mov
inc
inc
mov
cmp
mov
mov
jne
inc
mov
inc
inc
mov
mov
mov
inc
inc
mov
cmp
jb
mov
lea
sub
push
lea
push
push
lea
push
mov
mov
push
call
test
je
add
mov
cmp
jl
mov
sub
cmp
mov
jb
jmp
mov
cmp
jne
mov
cmp
jbe
mov
and
mov
mov
sub
mov
lea
cmp
jae
movzx
add
add
mov
cmp
jne
push
pop
mov
mov
add
add
add
mov
add
add
cmp
jb
mov
lea
sub
push
lea
push
push
lea
push
mov
mov
mov
push
call
mov
mov
test
je
add
mov
mov
cmp
jl
mov
mov
sub
cmp
jb
jmp
mov
mov
test
je
mov
and
mov
sub
mov
lea
cmp
jae
movzx
add
add
mov
cmp
jne
push
pop
mov
mov
add
add
mov
add
add
cmp
jb
xor
push
push
push
lea
push
lea
sub
cdq
sub
sar
push
mov
push
push
push
call
mov
mov
mov
test
je
xor
mov
push
sub
lea
push
push
lea
add
mov
push
mov
mov
push
call
test
je
mov
add
mov
mov
cmp
jg
jmp
call
mov
mov
mov
mov
cmp
jg
mov
mov
mov
sub
mov
cmp
jb
jmp
push
lea
push
push
push
push
call
test
je
mov
xor
jmp
call
mov
mov
test
jne
test
je
push
pop
cmp
jne
call
mov
call
mov
jmp
push
call
pop
jmp
mov
mov
mov
test
je
cmp
jne
xor
jmp
call
mov
call
and
or
jmp
sub
mov
pop
pop
mov
xor
pop
call
leave
ret
push
mov
push
mov
push
or
test
jne
call
mov
call
or
jmp
test
je
push
call
push
mov
call
push
call
push
call
add
test
jns
or
jmp
cmp
je
push
call
and
pop
and
mov
pop
pop
pop
ret
push
push
call
or
mov
xor
mov
test
setne
test
jne
call
mov
call
mov
call
ret
test
je
and
jmp
push
call
pop
and
push
call
pop
mov
mov
mov
call
jmp
mov
mov
push
call
pop
ret
push
push
call
mov
mov
sar
mov
and
shl
add
cmp
jne
push
call
pop
and
cmp
jne
push
lea
push
call
inc
mov
call
mov
sar
and
shl
mov
add
add
push
call
xor
inc
call
ret
mov
push
call
pop
ret
push
mov
mov
push
push
test
js
cmp
jae
mov
sar
mov
mov
and
shl
test
je
cmp
je
cmp
jne
xor
sub
je
dec
je
dec
jne
push
push
jmp
push
push
jmp
push
push
call
mov
or
xor
jmp
call
mov
call
and
or
pop
pop
pop
ret
push
mov
mov
cmp
jne
call
and
call
mov
jmp
test
js
cmp
jae
mov
sar
and
mov
shl
test
je
mov
pop
ret
call
and
call
mov
call
or
pop
ret
push
mov
mov
mov
and
sar
shl
mov
add
add
push
call
pop
ret
push
mov
sub
push
lea
call
mov
movzx
mov
movzx
and
cmp
je
mov
and
leave
ret
push
mov
push
push
call
pop
pop
pop
ret
push
mov
push
push
push
mov
push
push
call
or
pop
cmp
jne
call
mov
mov
mov
jmp
push
lea
push
push
push
push
call
test
jne
call
push
call
pop
jmp
mov
sar
and
mov
shl
and
mov
mov
pop
pop
leave
ret
push
mov
sub
push
push
mov
test
je
mov
test
je
cmp
jne
mov
test
je
xor
mov
xor
pop
pop
leave
ret
push
push
lea
call
mov
cmp
jne
mov
test
je
movzx
mov
xor
inc
jmp
lea
push
movzx
push
call
pop
pop
test
je
mov
cmp
jle
cmp
jl
xor
cmp
setne
push
push
push
push
push
push
call
mov
test
jne
cmp
jb
cmp
je
mov
jmp
xor
cmp
setne
xor
inc
push
push
mov
push
push
push
push
call
test
jne
call
or
mov
cmp
je
mov
and
mov
pop
jmp
push
mov
push
push
push
push
call
add
pop
ret
push
mov
push
mov
cmp
jne
call
mov
cmp
jne
mov
leave
ret
push
lea
push
push
lea
push
push
call
test
je
mov
leave
ret
push
push
call
mov
cmp
jne
call
and
call
mov
jmp
test
js
cmp
jae
mov
sar
mov
and
shl
mov
movsx
and
je
push
call
pop
and
mov
test
je
push
call
pop
mov
jmp
call
mov
or
mov
mov
call
mov
jmp
mov
mov
push
call
pop
ret
call
and
call
mov
call
or
call
ret
push
mov
push
push
mov
push
call
pop
cmp
je
mov
cmp
jne
test
jne
cmp
jne
test
je
push
call
push
mov
call
pop
pop
cmp
je
push
call
pop
push
call
test
jne
call
mov
jmp
xor
push
call
pop
mov
sar
and
mov
shl
mov
test
je
push
call
pop
or
jmp
xor
pop
pop
pop
ret
push
mov
push
mov
test
je
test
je
push
call
and
xor
pop
mov
mov
mov
pop
pop
ret
mov
cmp
je
cmp
je
push
call
ret
xor
push
push
push
push
push
push
push
call
mov
ret
int3
int3
push
mov
or
jne
mov
mov
xor
div
mov
mov
div
mov
mov
mul
mov
mov
mul
add
jmp
mov
mov
mov
mov
shr
rcr
shr
rcr
or
jne
div
mov
mul
mov
mov
mul
add
jb
cmp
ja
jb
cmp
jbe
dec
sub
sbb
xor
sub
sbb
neg
neg
sbb
mov
mov
mov
mov
mov
pop
ret
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
mov
mov
or
mov
jne
mov
mul
ret
push
mul
mov
mov
mul
add
mov
mul
add
pop
ret
jmp
jmp
