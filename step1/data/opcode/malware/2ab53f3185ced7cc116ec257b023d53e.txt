out
add
add
add
add
sub
xchg
imul
xchg
imul
in
sub
bound
repz
dec
push
(bad)
lods
mov
xor
loope
xchg
icebp
xor
js
mov
std
pusha
mov
push
clc
dec
call
imul
push
mov
add
aad
adc
(bad)
jns
mov
std
cmps
mov
sar
pop
sar
add
cdq
lock
inc
add
sbb
outs
pop
jmp
int
rcl
fwait
jae
ret
jge
lea
mov
sbb
push
pop
dec
mov
(bad)
jne
jb
mov
mov
pop
dec
(bad)
aas
loopne
out
sub
bound
mov
ret
adc
dec
pusha
mov
test
int3
xor
xor
leave
in
dec
pop
xor
loop
xchg
and
mov
fcomp
or
sbb
test
rol
push
mov
dec
adc
test
sub
div
ds
sbb
jecxz
jg
and
mov
aas
xor
mov
fwait
push
retf
push
jno
add
cmp
xor
xchg
xor
jmp
dec
aam
jae
leave
mov
mov
repz
clc
clc
jno
jbe
ds
and
call
push
mov
(bad)
std
add
sub
cmp
xchg
adc
push
outs
dec
pop
stc
into
fisub
dec
push
cmp
call
xchg
enter
add
ror
popa
cmp
mov
adc
mov
aad
(bad)
test
push
ins
sahf
xor
jns
pop
inc
jnp
stc
pop
(bad)
add
mov
fstp
shr
mov
and
mov
xchg
pusha
pop
xor
out
dec
mov
adc
bound
inc
nop
leave
push
jo
sub
xor
sub
lea
push
test
and
cmp
inc
aam
sbb
mov
adc
push
icebp
xor
aam
push
or
and
adc
cmps
cmp
cmp
loopne
or
cli
loop
push
or
pop
cwde
in
push
movs
cmc
retf
lods
mov
mov
jp
push
cdq
sbb
in
jle
inc
enter
mov
mov
inc
jnp
into
jmp
sub
pop
sub
test
dec
ret
mov
and
sub
sbb
retf
icebp
adc
xor
test
test
retf
inc
xlat
push
retf
test
mov
xchg
xchg
jl
repz
dec
mov
mov
clc
and
xchg
movs
lea
push
push
xchg
dec
shr
jmp
movs
xchg
mov
sbb
(bad)
xchg
push
xchg
sbb
mov
inc
aam
popf
push
wrmsr
scas
adc
or
cmp
ret
xchg
hlt
ror
pop
push
mov
push
shl
fwait
gs
cmp
jne
lahf
fwait
xchg
inc
mov
mov
retf
es
mov
dec
in
cmps
jo
cmp
mov
pop
aad
jns
neg
sub
ins
imul
hlt
imul
scas
mov
inc
rcr
rcr
ds
retf
lahf
add
in
pusha
repz
(bad)
into
xchg
xor
pushf
adc
cmp
xchg
out
pop
scas
mov
ins
add
dec
add
test
fs
xchg
jle
outs
out
and
rol
fisttp
repnz
and
cmp
mov
or
leave
ss
push
loope
icebp
jge
adc
clc
pop
mov
and
les
inc
ficom
sub
mov
mov
inc
movs
xlat
ror
lea
pop
dec
fistp
cmps
out
sahf
pushf
out
xor
mov
or
ins
sar
nop
pop
push
ror
sbb
push
addr16
adc
ror
xlat
jp
int3
fnstcw
(bad)
sar
inc
fcmovu
mov
cmp
daa
(bad)
int
fidivr
pop
inc
mov
inc
sbb
dec
aas
lea
jmp
jb
pop
(bad)
dec
sub
(bad)
lods
cmp
pop
cwde
mov
or
mov
rcl
mov
mov
and
pop
push
jmp
loop
mov
or
out
pop
pop
cmp
cld
add
push
imul
adc
jl
pushf
imul
ret
inc
sbb
fld
push
mov
jb
xchg
and
mov
cmps
cmp
xor
xchg
loope
xchg
retf
retf
loopne
mov
int
mov
int
ins
cmp
fcom
cmp
xchg
dec
movs
test
aaa
cmps
ds
imul
jle
push
outs
jmp
ins
mov
push
ja
xchg
outs
into
ret
fwait
push
dec
adc
popa
sbb
jmp
and
or
dec
inc
mov
aas
mov
adc
cdq
neg
aam
or
pop
inc
outs
int
jae
cmp
xor
dec
push
mov
push
rcr
fmul
sbb
stos
mov
sbb
sub
popf
add
push
and
iret
scas
or
retf
jge
in
in
mov
pusha
inc
push
je
ret
sub
cmp
push
in
push
push
fidivr
and
popa
mov
lods
arpl
xchg
xlat
sub
aam
fsub
jecxz
aam
in
push
popa
out
and
cmp
xchg
iret
jno
push
out
push
add
nop
ret
jb
ins
scas
pop
aaa
loope
cmp
add
or
shr
shl
xchg
sbb
push
aaa
fld
adc
sub
and
(bad)
cdq
lea
push
push
push
inc
xchg
xchg
ror
xchg
or
fcmove
mov
jae
inc
dec
test
es
int3
pop
fisttp
pusha
in
jge
jmp
sub
test
push
out
pop
popa
leave
daa
add
movs
jmp
retf
scas
not
ret
and
arpl
out
dec
(bad)
outs
cld
ds
push
sbb
iret
dec
dec
stos
out
daa
sbb
inc
inc
repz
mov
xlat
xor
adc
pop
pop
jmp
aad
xchg
mov
das
and
daa
movs
mov
mov
push
xor
add
jbe
shl
and
rol
sub
cli
push
jmp
jo
popf
test
xor
js
or
sbb
sti
jns
mov
jmp
pop
xchg
into
das
cmp
jo
dec
mov
stos
push
mov
call
mov
call
cwde
fs
or
pop
add
and
loope
xchg
shl
nop
mov
shr
ss
sbb
ja
stos
xchg
jno
loopne
add
daa
add
test
ins
cmp
aam
in
cmp
test
push
cmp
ins
pop
pop
imul
cmps
stc
inc
mov
xor
jo
mov
mov
(bad)
lahf
ins
mov
jnp
xchg
faddp
dec
add
fild
jns
inc
lods
dec
mov
xchg
push
mov
jb
add
inc
push
ins
popa
sub
sub
cdq
cmp
push
jmp
or
fst
xor
adc
int
imul
inc
out
loope
dec
punpckhbw
outs
push
jbe
mov
mov
dec
dec
pop
shr
in
push
popa
sub
adc
popf
mov
xchg
test
ins
push
and
xchg
inc
test
lods
cmps
cmps
and
cwde
scas
lds
repnz
pushf
sbb
aad
jne
jnp
cld
jmp
(bad)
fs
inc
out
dec
xchg
pop
xor
adc
mov
les
cwde
dec
mov
clc
push
cmp
pop
(bad)
pop
icebp
mov
loopne
push
adc
(bad)
dec
ja
fild
les
test
movs
out
xchg
lahf
push
ss
xor
and
js
int3
pop
jg
rcr
and
repz
push
pop
ret
xchg
sub
sub
cmc
and
add
xchg
jae
push
inc
daa
jno
into
dec
ja
sbb
sbb
inc
xor
dec
mov
cmc
cmp
out
out
inc
call
sub
cdq
(bad)
push
xchg
out
mov
pop
xchg
call
xchg
or
cmps
xor
cmp
sub
inc
jl
or
jp
and
jne
sahf
cmc
inc
xor
pop
push
aam
pop
mov
les
pop
call
push
or
cdq
aas
movs
outs
rol
xchg
or
out
shr
fild
add
push
stos
jl
ins
outs
scas
fld
enter
in
jb
je
(bad)
pop
xlat
dec
push
fcmovnu
popa
sub
lahf
shr
push
aaa
jl
sahf
int3
mov
sbb
xchg
pop
or
sub
dec
xor
sbb
dec
repnz
scas
cmc
nop
retf
int
xchg
jo
mov
xlat
push
leave
(bad)
mov
jb
aad
test
ins
and
fnstenv
dec
test
xor
ins
add
mov
cdq
mov
test
push
loope
retf
mov
ret
cld
sbb
mov
mov
fimul
xlat
jle
test
adc
into
adc
jp
enter
fistp
mov
mov
mov
ss
xchg
xor
(bad)
fistp
push
lods
mov
lds
sti
pop
add
movaps
xchg
fidiv
aas
xchg
cld
mov
or
call
cmp
ret
adc
cmps
retf
xchg
pushf
sub
sub
jbe
cli
inc
out
(bad)
push
sub
into
cli
cmp
ja
dec
mov
adc
push
inc
arpl
int
jmp
das
dec
dec
sbb
bound
xchg
and
or
call
test
mov
inc
jmp
sbb
in
pop
mov
sub
shl
mov
jne
add
sbb
mov
cmps
pop
add
xor
push
and
add
test
out
mov
adc
mov
repz
ss
jmp
mul
cmp
push
rcr
and
ins
cmp
jp
or
int3
or
fs
cmovle
repnz
xor
mov
in
sbb
mov
mov
xor
fwait
jecxz
push
repnz
cs
dec
fist
sbb
retf
test
adc
in
jno
ffree
stos
stos
outs
jmp
fistp
pop
repnz
push
pop
lock
std
out
rcr
mov
dec
out
int3
test
(bad)
ss
leave
dec
xchg
je
repnz
mov
push
loopne
mov
jns
ret
cmp
push
(bad)
jecxz
aam
into
cmps
sbb
sub
repz
retf
std
in
ins
inc
out
repz
xor
jl
int
mov
pop
mov
jmp
adc
sar
sub
pop
jno
mov
or
dec
fs
jnp
sar
cmps
(bad)
sbb
add
cmp
nop
mov
ror
adc
shl
cmp
push
jnp
jbe
mov
jle
repz
or
retf
xor
aad
test
sbb
daa
sub
inc
mov
cmp
xchg
movs
out
mov
sub
test
xlat
or
(bad)
stc
rol
mov
std
fsin
clc
push
pushf
xchg
mov
pop
pop
jne
jg
push
mov
leave
stc
addr16
dec
dec
into
xor
cmc
es
xor
in
pop
jbe
xchg
test
arpl
and
and
(bad)
pushf
jp
xor
jmp
dec
ds
(bad)
out
push
or
push
add
(bad)
xlat
push
retf
push
add
mov
cmp
pop
adc
ror
bound
jmp
pop
cmps
retf
xchg
push
pop
inc
sbb
ins
xchg
out
in
push
jle
adc
dec
mov
pop
sar
je
xchg
push
pop
in
js
pop
sysret
scas
mov
imul
(bad)
or
ficomp
pop
cmp
pop
mov
paddq
mov
(bad)
lods
xor
inc
mov
pop
(bad)
mov
mov
daa
xor
mov
in
lock
hlt
repnz
stc
xchg
push
test
jbe
sub
mov
aaa
and
dec
xor
fisttp
inc
outs
sub
cld
dec
mov
adc
jg
sar
mov
out
push
iret
push
retf
dec
mov
xchg
push
push
push
arpl
retf
mov
rol
xlat
scas
in
rcl
sahf
iret
fwait
loopne
and
sbb
fwait
clc
jmp
out
or
test
pop
ror
dec
ja
(bad)
int3
in
mov
loope
mov
(bad)
rcl
jecxz
mov
into
mov
jle
mov
in
mov
push
sbb
inc
adc
call
pop
sti
ror
mov
fst
test
adc
mov
or
pop
pop
fnsave
lahf
jne
jo
jnp
cwde
outs
fs
cmp
dec
shl
push
dec
cmp
mov
jns
pop
xlat
les
cmp
jns
ret
pop
in
pop
lds
cli
xor
dec
into
xchg
imul
sti
ins
out
test
leave
mov
jbe
push
add
sahf
sbb
or
fs
out
push
out
dec
push
iret
fst
xchg
mov
or
or
push
out
fs
out
dec
sub
arpl
iret
pop
cmps
(bad)
sbb
imul
lds
emms
sti
stos
mov
xchg
cs
xchg
xor
loope
sbb
pop
aad
or
jb
xchg
and
test
cmp
in
pop
mov
es
test
fild
pop
js
inc
mov
in
movs
loop
int3
adc
dec
cmps
aam
adc
push
dec
mov
mov
mov
push
or
mov
cli
mov
aad
add
dec
fbstp
in
jb
cmp
fwait
jle
adc
ficomp
fimul
pop
cmp
sub
mov
pop
add
icebp
test
shl
movq
push
push
mov
loope
cmps
scas
inc
int
or
dec
cmp
dec
pop
xchg
sahf
mov
aaa
add
imul
sbb
xor
fsubr
mov
lods
bound
std
pop
dec
mov
xor
es
cmp
dec
push
cmps
lock
push
xchg
fisub
cmp
add
add
pop
mov
dec
cwde
and
repz
and
mov
and
std
xor
aam
repz
scas
adc
pusha
dec
inc
sub
in
setle
daa
fcmovnbe
push
add
or
mov
dec
jge
arpl
pop
sti
push
scas
les
jno
adc
jmp
mov
adc
sar
cmc
cdq
jo
lock
mov
lods
jne
hlt
inc
mov
sub
pop
mov
inc
arpl
fidivr
std
enter
sbb
sti
adc
fist
arpl
stos
sub
and
inc
mov
jne
jmp
cmp
sbb
mov
aaa
or
fsub
ins
call
icebp
pop
sub
or
and
cmp
mov
inc
lods
or
cmp
stc
bound
mov
inc
les
cmp
sub
jmp
pushf
cmp
daa
xor
mov
cdq
inc
add
cld
mov
mov
je
push
outs
and
inc
in
cmp
ds
push
and
jl
loopne
call
dec
nop
cmp
xor
imul
call
inc
ss
xchg
outs
retf
and
mov
or
sub
pop
mov
daa
jmp
cmc
mov
mov
or
mov
pmullw
cdq
xor
scas
icebp
dec
push
cld
ja
loop
sub
mov
add
scas
fwait
pop
inc
inc
or
jmp
mov
into
push
add
mov
pop
das
lock
mov
ret
bound
dec
(bad)
or
ret
dec
movs
jg
sub
cmc
xchg
cmp
push
sbb
add
push
bts
dec
jmp
mov
inc
outs
push
fadd
xor
and
and
adc
daa
mov
sti
popf
ror
adc
dec
or
xchg
retf
pop
icebp
dec
adc
mov
jmp
jbe
sti
gs
sub
cmps
mov
ret
cmp
scas
mov
sbb
xor
cld
repnz
test
enter
inc
jl
adc
push
jge
mov
mov
push
in
movs
cmc
jnp
sbb
int
pusha
dec
outs
loopne
hlt
sbb
das
shl
mov
push
stc
(bad)
mov
xor
mov
sub
pop
sbb
mov
push
enter
shl
sub
push
neg
jo
out
ror
or
fadd
mov
les
xchg
xlat
mov
push
rol
ins
(bad)
jbe
(bad)
test
lahf
add
dec
cmp
push
and
test
or
stos
out
mov
jmp
pop
leave
addr16
les
lods
in
add
sbb
mov
call
out
pop
mov
sub
outs
out
dec
out
clc
sbb
ja
push
jb
mov
adc
or
sbb
sahf
pop
clc
mov
stc
pop
or
sbb
in
jmp
fnsave
dec
aam
or
sbb
dec
pop
sub
xchg
ja
and
or
adc
jae
cmp
rol
popa
inc
inc
lods
pop
sub
(bad)
jmp
xchg
int3
sub
into
fcom
cmp
add
sub
retf
cmp
push
pop
aad
div
cmp
add
js
sub
ja
lods
inc
push
jns
mov
jnp
lods
sub
popf
shl
fstp
inc
jns
js
mov
in
out
push
ret
sub
ins
xlat
ds
stc
sbb
or
jmp
mov
dec
sar
or
sub
and
and
loope
lds
inc
aas
stos
or
or
(bad)
daa
leave
loope
fdivp
cmp
cli
jae
outs
dec
ins
mov
cwde
adc
clc
into
(bad)
mov
daa
retf
test
rcl
mov
inc
sti
(bad)
push
jl
push
aaa
cmp
pushf
sub
(bad)
retf
daa
xor
xchg
cmp
xlat
test
or
and
fld
mov
shl
in
jmp
cmc
xor
lea
mov
pop
int
sbb
pop
add
ins
aad
and
cmp
lds
jl
jp
popf
idiv
mov
xchg
out
stc
mov
(bad)
jmp
jecxz
mov
sbb
test
(bad)
cmp
jns
pop
pop
inc
test
sub
addr16
xchg
mov
imul
pusha
lea
cmp
inc
hlt
into
xor
lahf
hlt
dec
out
and
ins
push
out
btc
or
out
shl
pop
and
xor
ret
mov
stc
dec
popf
pusha
cmps
fisttp
out
and
dec
jmp
mov
mov
xor
call
add
out
out
popa
xor
test
shl
sbb
lods
mov
loop
lock
movs
out
into
or
es
rep
sbb
mov
jmp
test
inc
daa
sbb
push
inc
lock
hlt
xchg
push
mov
or
test
xlat
mov
in
xchg
cld
nop
out
pushf
pop
dec
test
adc
mov
cmp
dec
sbb
inc
sub
lahf
das
dec
lods
adc
xchg
loope
sub
sti
inc
rcl
mov
retf
test
push
mov
inc
lods
dec
outs
add
mov
fimul
pop
loop
gs
xchg
sub
cmps
adc
xor
pop
pop
retf
dec
ficom
mov
mov
scas
dec
inc
add
pop
mov
test
js
push
(bad)
mov
test
lock
call
mov
pop
ror
faddp
shl
out
aas
daa
push
inc
mov
dec
and
xchg
lock
jle
cs
add
adc
mov
ret
fstp
out
adc
cmc
or
inc
sub
shl
jmp
xor
arpl
push
adc
cmps
dec
pusha
pop
push
int3
xchg
pop
loop
out
sbb
daa
pop
cmps
or
fistp
das
in
jge
xlat
std
mov
test
jp
les
in
adc
mov
call
cmp
in
inc
in
fmul
adc
ss
(bad)
dec
sbb
jmp
jmp
aas
mov
add
shl
xor
push
into
jmp
fbstp
add
inc
test
in
movs
outs
lods
loope
sub
shl
jmp
lods
pop
pusha
mov
jmp
popa
or
xor
mov
out
mov
or
aam
call
outs
leave
sub
mov
or
lods
jmp
add
mov
clc
xor
cdq
lea
aam
(bad)
les
out
mov
rcr
xor
cmovnp
add
xor
stos
dec
sbb
ss
add
aam
nop
fs
xlat
inc
sbb
arpl
pop
lock
mov
fsub
int3
xchg
aas
scas
int
mov
aas
jmp
imul
mov
pop
lods
aaa
movs
mov
push
sbb
dec
jb
jnp
pop
stos
jl
push
xchg
sub
lods
mov
jle
js
sub
lods
mov
mov
mov
ror
nop
lea
mov
push
xor
jbe
adc
(bad)
or
(bad)
push
outs
xor
pop
inc
and
sub
iret
arpl
ja
stc
out
idiv
int
test
sub
dec
jae
push
jns
dec
sbb
and
ins
out
pop
mov
(bad)
loop
cmp
fnstenv
mov
or
pushf
(bad)
loope
mov
and
vphaddbw
pop
jmp
fisub
sbb
(bad)
test
sbb
call
stos
(bad)
mov
pop
jmp
ja
push
lock
xchg
lahf
adc
sub
pop
(bad)
scas
loope
push
cld
add
fistp
cmp
imul
sbb
push
sbb
cmp
fs
(bad)
pop
add
add
test
ret
out
and
fist
fld
test
fwait
mov
xchg
mov
cs
out
enter
pop
xor
dec
push
push
into
and
fwait
push
cmp
adc
add
xchg
pop
mov
xchg
add
ret
sti
out
in
movs
mov
jns
lock
mov
hlt
pusha
sti
sar
xchg
ficom
push
push
je
rol
test
xchg
js
pop
xor
pop
lock
add
lods
push
jb
in
test
in
mov
inc
and
add
inc
mov
lea
sahf
xor
js
inc
out
mov
add
test
mov
xor
stos
push
xor
dec
arpl
fimul
and
jge
mov
repnz
aad
cmps
test
mov
mov
outs
data16
xchg
push
xlat
mov
cmp
mov
ror
icebp
sub
pusha
adc
sbb
ins
(bad)
ds
mov
aad
movs
inc
leave
pop
sbb
or
test
add
xchg
jmp
mov
mov
dec
fs
dec
and
add
sbb
push
in
jge
add
(bad)
out
mov
in
mov
lahf
pop
pop
mov
jl
push
dec
mov
jmp
fild
jmp
pop
(bad)
add
cdq
and
jp
mov
push
adc
popa
pop
stos
ins
(bad)
retf
in
sub
loopne
ins
into
rcr
inc
cmps
imul
cmc
inc
inc
mov
bound
test
adc
cmp
jp
(bad)
xchg
and
sub
lahf
sbb
leave
jmp
cmp
out
dec
cli
(bad)
scas
mov
cmps
(bad)
nop
sub
pop
out
push
scas
adc
push
add
fnstcw
cmp
mov
and
jl
mov
js
shl
fild
xchg
sbb
lods
dec
jg
add
xor
add
mov
push
es
sub
sbb
add
invd
int
add
mov
jne
cmp
jbe
and
pop
jge
push
xlat
shl
xor
(bad)
fnstsw
hlt
cmps
movaps
jne
jg
inc
inc
fidivr
sub
adc
add
in
push
mov
cmp
push
outs
lods
or
mov
pop
test
mov
int3
fwait
jge
outs
cmp
mov
add
or
mov
mov
xchg
ret
jae
and
nop
test
jns
inc
ins
adc
nop
push
mov
add
mov
sub
and
or
rcl
je
adc
aas
loope
inc
add
pop
(bad)
sub
mov
add
fdiv
mov
mov
inc
(bad)
mov
ds
pop
outs
mov
sbb
inc
aaa
adc
stc
or
xchg
jl
adc
dec
(bad)
adc
lock
pop
mov
sub
test
in
push
jmp
add
inc
and
or
dec
or
iret
addr16
or
adc
push
add
mov
hlt
xor
mov
add
sub
mov
mov
in
push
loop
add
adc
in
push
in
leave
adc
mov
mov
ror
js
pushf
test
pop
int3
or
repnz
(bad)
(bad)
sub
test
or
jmp
cli
push
adc
pop
movs
xchg
mov
and
stc
sbb
pop
aam
mov
mov
loope
outs
mov
jnp
cmp
loopne
scas
mov
dec
pop
arpl
xor
sub
mov
dec
into
inc
je
cmp
movs
addr16
int3
aas
lock
mov
enter
jecxz
fyl2x
inc
repnz
lea
out
dec
xchg
sar
ja
sbb
imul
jns
pop
jae
repz
jecxz
jmp
adc
stos
lock
cmp
(bad)
push
rcl
push
xchg
mov
jb
xchg
call
push
xchg
pop
sub
mov
push
jle
(bad)
mov
mov
stos
push
cwde
push
jp
dec
aas
adc
jo
pop
fdivp
jp
lds
mov
test
retf
add
pop
scas
push
rcr
movs
sub
lods
ins
ins
loopne
int3
jle
and
adc
inc
mov
lea
data16
push
xchg
push
xchg
xchg
xchg
dec
(bad)
sub
std
shl
mov
mov
xchg
sbb
sub
inc
mov
mov
mov
jne
lea
xor
and
add
cmp
cwde
test
pop
fsubr
cs
cmp
dec
cld
lds
mov
clc
sbb
xchg
cwde
fstp
pushf
cmp
std
sub
pusha
je
jbe
jmp
dec
or
mov
and
movntps
or
sti
ficomp
add
gs
push
mov
and
xchg
pop
loopne
cmp
cmc
sar
xchg
adc
mov
push
imul
pushf
inc
xor
xchg
push
xchg
pop
add
or
(bad)
jne
mov
push
cwde
lahf
shr
lods
daa
mov
dec
xchg
call
ror
lahf
into
fcmovu
stos
pop
add
xchg
mov
test
leave
adc
cmp
cmp
mov
inc
mov
mov
cmovl
dec
lahf
vmovntps
dec
aaa
or
xchg
out
and
jecxz
and
lods
cld
call
xor
fwait
int3
adc
stc
lds
mov
jmp
push
aaa
leave
lock
mov
xchg
inc
loopne
into
or
ss
pop
leave
xchg
pushf
cmp
jae
pop
(bad)
fdiv
aam
xor
lods
pop
fwait
stos
int
pop
js
sti
xchg
fistp
ffreep
inc
add
rcr
addr16
fbstp
pop
pop
xchg
fcmovb
mov
mov
stos
test
dec
imul
aad
sub
add
daa
sub
adc
repnz
pop
or
mov
push
push
xchg
ins
enter
jge
dec
sbb
mov
les
mov
mov
scas
push
(bad)
into
aaa
nop
dec
sub
lahf
inc
hlt
aas
test
jb
shl
fisubr
mov
add
jmp
mov
iret
dec
je
jnp
jbe
mov
neg
stos
rcl
inc
invd
mul
dec
scas
pop
aad
mov
lods
das
int3
sbb
push
retf
jns
inc
pop
out
mov
and
jae
mov
xlat
mov
mov
(bad)
dec
and
add
add
jp
int3
mov
xor
loope
mov
sbb
adc
movs
and
test
adc
test
test
outs
call
nop
fcomp
pop
mov
or
cmp
adc
sbb
mov
mov
mov
jmp
sub
ret
ror
retf
xchg
xchg
push
jno
movlps
out
gs
movs
aas
mov
jno
pop
stc
rol
xchg
push
fldcw
xchg
and
test
dec
repz
(bad)
stc
fwait
lods
xchg
jle
ss
pop
mov
mov
pushf
ss
and
xor
fistp
dec
jle
sub
and
add
sbb
jns
xor
into
popf
adc
sub
adc
add
mov
mov
es
fsub
xchg
dec
lods
pop
ds
repnz
jl
cmc
mov
push
jae
pop
loopne
jns
xchg
cmp
ss
fstp
lods
cmp
aaa
mov
jmp
dec
int
push
fdiv
cmps
int3
push
movs
out
movs
int
or
add
sbb
dec
std
stc
xchg
es
leave
push
cmps
iret
add
xchg
jns
sub
test
adc
mov
into
retf
stos
add
lods
sbb
mov
jb
or
cmp
jl
pop
retf
xchg
pop
icebp
adc
mov
aam
dec
adc
jecxz
loopne
pop
inc
jecxz
out
enter
loopne
nop
hlt
pushf
adc
imul
push
repnz
xchg
add
lods
adc
adc
dec
gs
sti
data16
add
mov
add
test
xor
and
mov
or
imul
retf
xchg
push
sbb
in
mov
push
xchg
sbb
jno
inc
pusha
sbb
movsx
push
xor
shr
sahf
arpl
fstp
daa
push
jbe
jbe
cmp
leave
stos
pop
dec
mov
xchg
push
jnp
push
push
hlt
dec
sbb
push
pop
sbb
jecxz
adc
jecxz
scas
mov
mov
mov
dec
sbb
(bad)
mov
je
aas
in
test
and
rol
div
adc
xchg
jge
jo
jb
cmp
sub
out
daa
pop
dec
cmp
repnz
ja
(bad)
mov
test
in
mov
stos
mov
mov
ret
aam
xor
mov
adc
sbb
loop
xchg
rcr
jns
stc
fs
sbb
(bad)
mov
in
outs
adc
mov
fmul
push
inc
sahf
mov
cmp
call
mov
movs
repnz
xchg
xchg
jmp
mov
push
xchg
sar
enter
and
imul
fs
call
(bad)
mov
mov
popf
xor
mov
mov
enter
pop
xchg
int
cmp
leave
add
push
(bad)
aam
jle
sahf
out
push
cmp
dec
inc
mov
and
frstor
ins
xchg
or
pusha
data16
mov
pop
mov
(bad)
pop
imul
inc
mov
mov
mov
inc
gs
sub
cmp
dec
pop
sub
adc
sbb
adc
xor
or
adc
lods
pop
jbe
cdq
imul
cmps
out
loop
test
adc
jl
xor
and
push
jg
les
or
or
xor
xchg
(bad)
ja
imul
pop
mov
or
and
rep
pop
stos
jno
mov
hlt
sbb
aad
(bad)
pop
fs
sub
mov
call
cmp
jg
out
xchg
sub
inc
sahf
mov
jae
mov
in
ja
mov
xor
adc
dec
xchg
fld
sbb
leave
repz
jno
(bad)
jb
les
rcl
sbb
sbb
adc
push
jnp
ja
mov
sbb
repnz
and
mov
test
daa
and
push
or
xchg
sbb
ins
cld
out
fdiv
(bad)
cs
push
fs
dec
cmp
and
inc
jmp
push
fisttp
sti
imul
loope
inc
adc
jo
shl
ror
adc
retf
ins
jb
ds
icebp
sub
clc
in
and
mov
inc
push
mov
fisubr
fisubr
nop
sbb
es
hlt
iret
retf
fld
push
xor
jne
adc
sub
test
aam
retf
add
xor
cli
jecxz
test
test
pop
ret
mov
inc
pushf
dec
cmp
jne
jmp
ret
out
in
sahf
dec
mov
ret
and
dec
xor
test
pop
xchg
int
mov
mov
mov
fsub
les
test
in
push
test
pop
jnp
pusha
outs
stos
daa
add
jns
pop
jecxz
xchg
icebp
pop
shr
pop
ins
dec
cmps
jmp
leave
push
lods
adc
pop
fadd
nop
fnsave
dec
stos
imul
jmp
jo
popf
pop
sub
loopne
lds
imul
dec
xlat
cdq
fnstcw
jl
adc
mov
aaa
adc
pop
dec
xchg
pusha
pop
int3
outs
imul
in
add
pop
cmc
inc
mov
and
outs
push
or
jmp
bound
add
icebp
mov
mov
clc
push
aaa
inc
lods
jb
and
inc
sub
mov
inc
push
or
mov
out
int3
inc
xor
int
mov
fnstenv
push
and
xor
sub
push
lds
pop
(bad)
jnp
inc
fwait
pop
jbe
les
mov
shl
dec
cmp
cmp
mov
bound
xchg
aas
in
push
push
xor
sbb
add
in
mov
mov
shr
sbb
jl
jne
(bad)
bswap
pop
ror
xor
cmc
(bad)
ja
sbb
mov
das
jae
xor
loopne
popa
sub
(bad)
cmp
sbb
cmps
sbb
sbb
das
je
mov
popa
sbb
xchg
mov
pop
xor
sub
cmp
shl
inc
bound
cmp
pushf
mov
shl
fwait
dec
dec
dec
mov
dec
aaa
pop
mov
jne
cld
mov
pop
ret
ds
aas
inc
and
push
ror
inc
cld
in
ffree
test
scas
adc
js
add
push
push
in
call
fsub
mov
pop
jns
scas
fsin
push
mov
cld
cli
outs
cdq
mov
(bad)
xor
push
jb
sub
push
and
ss
adc
or
ret
stos
sub
adc
mov
movs
jle
jp
lds
repz
mov
mov
add
dec
lahf
push
cmps
(bad)
xor
call
jo
mov
ficomp
mov
jne
sbb
xchg
in
pop
add
push
adc
pop
push
sbb
enter
pop
sbb
add
push
aaa
mov
mov
dec
cwde
das
test
mov
je
sub
push
mov
scas
je
cs
dec
or
enter
leave
sti
sbb
(bad)
loopne
cmc
test
mov
push
sub
push
pushf
mov
inc
ret
inc
scas
xchg
jo
pop
cdq
jns
xor
stos
jns
pop
adc
(bad)
jp
adc
sahf
xor
xchg
and
mov
pslld
jmp
imul
and
repz
xor
mov
int
mov
pop
jne
outs
mov
or
sahf
push
rcr
clc
lahf
cmp
inc
push
mov
test
cmps
daa
cmps
or
adc
call
and
pop
rcr
les
inc
into
icebp
movs
mov
ds
jl
add
and
fwait
int
aam
cmps
mov
adc
inc
out
jecxz
lods
mov
xchg
inc
cmp
sbb
cdq
add
adc
outs
push
mov
push
xor
movs
imul
sub
pop
mov
push
or
inc
pop
(bad)
mov
neg
addr16
dec
xchg
adc
inc
ss
ret
mov
es
sub
jge
imul
push
jg
push
mov
push
mov
aam
add
outs
pusha
push
retf
ret
jp
xor
jl
les
mov
or
or
daa
or
mov
movs
xchg
lahf
push
xor
scas
imul
and
push
call
fld
ret
mov
rcr
loopne
test
inc
mov
push
mov
es
lds
dec
mov
mov
paddusb
sbb
xor
jecxz
test
add
dec
shr
fwait
nop
sbb
mov
repz
repz
test
dec
xchg
loope
dec
movs
stos
push
add
jmp
iret
push
pop
push
and
jecxz
inc
sbb
add
iret
push
or
and
and
(bad)
aas
cmp
sub
mov
arpl
xchg
mov
cli
lahf
mov
jbe
lods
in
sub
push
jo
(bad)
hlt
xchg
pop
das
cs
test
mov
mov
in
pop
cmps
dec
adc
pop
int
pop
jne
daa
inc
cmp
push
gs
mov
imul
movd
iret
movs
repnz
adc
dec
stos
aam
adc
mov
cs
pop
dec
mov
sahf
jmp
lods
mov
jmp
cmc
inc
xlat
shr
ffreep
lahf
sub
push
rcl
lahf
mov
jl
inc
ror
xchg
jp
ins
cdq
aad
loopne
mov
cli
test
retf
iret
or
dec
dec
mov
inc
xor
or
into
dec
xor
loope
pop
or
pop
pop
stos
out
mov
and
adc
xor
cmp
xchg
push
imul
outs
fwait
out
xchg
mov
add
fcomp
xchg
pop
aad
cmp
int
enter
inc
inc
ins
push
es
iret
cmps
cmp
push
jnp
lock
jmp
loopne
xor
sbb
push
fcomp
imul
(bad)
stc
(bad)
pop
les
mov
jmp
push
dec
test
cwde
js
jle
nop
sbb
(bad)
mov
add
jp
pop
popa
test
cmc
jb
dec
add
dec
xchg
retf
xlat
mov
push
mov
sbb
(bad)
mov
rcl
jb
sbb
lahf
mov
add
mov
mov
and
inc
in
ins
mov
sbb
adc
jecxz
std
adc
jmp
mov
dec
movs
xor
add
fsubr
(bad)
mov
mov
loope
and
adc
push
and
retf
push
(bad)
jmp
sbb
adc
xchg
dec
inc
or
mov
mov
call
or
xor
mov
mov
imul
pop
sub
retf
cs
dec
and
pop
loop
cli
in
cmp
ins
inc
add
push
mov
xor
mov
push
inc
inc
outs
ins
jo
arpl
dec
cmps
xor
and
popf
xchg
xchg
push
les
(bad)
es
stc
dec
xor
push
fwait
(bad)
lods
movs
sbb
ds
add
or
pop
shl
mov
jle
icebp
scas
adc
stos
idiv
push
pop
dec
inc
sbb
loope
xchg
xchg
dec
mov
loopne
mov
dec
repnz
pop
or
pop
push
xchg
lds
aas
cmps
test
test
sub
mov
mov
inc
in
jae
leave
gs
mov
cmp
stos
mov
xor
call
mov
inc
inc
inc
fbld
push
dec
int3
je
jecxz
fsub
dec
movs
iret
lods
and
mov
imul
sbb
cmp
fmul
aaa
mov
jo
pop
mov
mov
mov
fld
pop
lea
test
xchg
aaa
outs
jno
jbe
lods
fistp
or
push
loope
and
push
in
aad
jl
(bad)
call
test
bound
rcr
sbb
mov
pop
fdiv
pop
cmp
imul
icebp
xor
cwde
push
pusha
leave
mov
cmp
stos
fdivr
inc
and
std
std
mov
mov
cmp
mov
adc
sub
add
sbb
sub
outs
nop
adc
mov
test
fisub
std
push
retf
push
cdq
xor
and
ret
cmps
retf
xchg
dec
mov
xchg
mov
scas
and
pop
sub
sbb
lds
mov
mov
dec
inc
adc
sti
mov
repz
add
mov
cmps
outs
cmp
mov
sbb
call
cmp
in
push
push
push
ins
xchg
adc
dec
push
sahf
cdq
nop
cmp
push
clc
inc
push
inc
fcomp
sbb
inc
movs
or
add
jae
push
mov
xchg
mov
es
dec
addr16
and
std
xor
xor
dec
call
or
lods
pop
or
jno
jb
cmp
mov
scas
xor
loopne
(bad)
(bad)
scas
out
xor
xor
mov
retf
add
mov
idiv
xchg
and
sbb
sbb
sar
clc
sub
jns
cld
or
stos
mov
iret
cmps
lds
jmp
loopne
in
sbb
popf
xchg
sub
ins
sub
jmp
ins
push
push
push
int3
and
std
rol
inc
sub
sahf
retf
xlat
mov
pop
sub
aas
dec
xlat
inc
mov
xchg
mov
pop
enter
shr
pusha
xchg
aaa
jl
mov
add
mov
not
push
je
sahf
jno
sbb
mov
mov
mov
mov
jle
jmp
cmc
push
sub
js
repz
(bad)
or
lahf
sub
mov
adc
dec
jmp
out
cli
lods
stos
push
sbb
es
mov
dec
pop
pushf
pop
pop
outs
shl
xor
push
shld
mov
xchg
push
add
pop
mov
lock
out
jle
icebp
adc
fwait
fs
xchg
sub
or
int
not
int3
sbb
icebp
mov
cwde
clc
addr16
jl
push
dec
mov
mov
pusha
xlat
and
cmc
lea
mov
stos
test
mov
sub
mov
(bad)
lds
test
fdiv
cmps
xor
add
cmc
loopne
imul
shl
sbb
sub
mov
inc
adc
jp
mov
add
add
mov
in
pop
xchg
(bad)
cs
xchg
mov
cmp
jg
push
lea
xchg
ins
and
pop
pop
jecxz
mov
jnp
lods
fdivr
sbb
jge
in
mov
pop
pop
out
xor
rcr
sub
out
(bad)
xlat
sub
fstp
inc
sbb
adc
jmp
mov
add
into
sbb
push
loopne
jmp
aam
out
retf
xchg
add
push
out
les
mov
cmps
ins
jle
xchg
mov
dec
dec
jb
lea
(bad)
mov
dec
push
out
mov
pop
dec
and
pop
ret
(bad)
scas
popa
shr
and
daa
mov
cmp
pop
mov
and
adc
adc
add
mov
lock
es
push
cmp
jmp
mov
fbstp
adc
push
mov
daa
loop
push
ret
pop
imul
and
mov
xor
jp
or
pop
mov
test
push
jnp
push
sbb
in
sbb
in
gs
data16
nop
pop
push
jbe
mov
xor
cmp
pop
cli
sub
sbb
inc
out
fcmovu
iret
fcomp
call
xchg
out
dec
xor
jno
sub
int
out
popf
sub
lods
pop
stc
xchg
retf
dec
xchg
mov
call
xchg
mov
jne
inc
jbe
jns
mov
mov
or
push
dec
mov
mov
clc
(bad)
pop
mov
push
mov
push
jns
add
fadd
jmp
inc
xchg
push
xchg
out
(bad)
lods
test
xchg
xchg
jle
clc
(bad)
xor
sar
popa
nop
loop
stos
fndisi(8087
inc
pop
or
mov
aaa
frstor
push
mov
mov
stc
jmp
loope
in
sbb
push
cmp
or
xor
mov
jns
dec
cmp
sahf
mov
pop
retf
lods
and
mov
push
cmp
repz
cmp
sub
jno
sar
or
xlat
data16
bound
cmc
or
dec
mov
fldcw
adc
pusha
sar
or
dec
popf
ds
outs
dec
je
jnp
enter
lahf
mov
jo
in
xor
push
mov
sub
push
stc
jle
inc
pop
popf
xor
retf
dec
dec
lds
outs
and
and
cmp
into
cmp
jle
xor
pop
mov
push
add
or
add
mov
cmp
(bad)
ins
inc
dec
icebp
out
call
aam
cmp
sbb
arpl
inc
sbb
cmp
push
retf
retf
repnz
ret
dec
mov
aaa
inc
mov
dec
push
adc
cmp
jmp
sub
repnz
into
jmp
push
in
mov
cs
mov
mov
test
jo
mov
cdq
mov
lea
cmp
clc
push
cmp
sbb
mov
aam
push
sub
xor
fsub
add
and
mov
ins
cs
push
cmp
push
or
in
ins
jg
stos
cmps
xchg
(bad)
push
loopne
sub
fistp
mov
dec
in
add
pop
add
pop
cmp
jne
xor
or
push
add
inc
retf
daa
add
jb
imul
or
sub
push
or
cmps
jg
inc
and
dec
(bad)
loopne
fist
lods
imul
test
sbb
mov
jp
stos
pop
ss
mov
stos
and
int
sahf
ds
pop
adc
rcr
scas
int
jb
clc
jmp
jle
stos
in
sub
add
aad
stc
movs
in
push
and
das
ins
jmp
fs
and
lahf
dec
repz
movs
mov
jmp
adc
mov
pop
popa
mov
push
cdq
loope
push
dec
test
mov
mov
std
sbb
xchg
push
aas
sub
inc
pop
stc
out
enter
or
mov
test
pop
shr
ret
jbe
and
mov
movs
inc
xchg
in
sbb
xor
repz
jl
rol
test
mov
and
retf
popa
inc
xor
iret
add
scas
and
sti
jbe
aas
push
cmp
ret
sub
movs
aad
dec
inc
jmp
cmc
test
or
and
jmp
jp
inc
test
xchg
dec
inc
push
dec
pop
lea
jmp
mov
movs
sbb
not
repnz
jae
pop
and
pop
or
es
mov
fs
lods
icebp
test
cmp
(bad)
test
in
call
mov
jns
jmp
push
mov
stos
dec
(bad)
jmp
xchg
pop
or
addr16
or
stc
test
(bad)
cmp
inc
std
jne
lods
sub
or
test
mov
and
sbb
push
scas
ret
es
push
xor
test
in
push
pusha
scas
sbb
icebp
push
mov
xor
cmp
mov
pop
stos
or
test
inc
mov
les
and
xor
pop
or
daa
adc
loop
sar
neg
enter
mov
sbb
push
or
pop
daa
loopne
cmp
cs
xchg
repz
sbb
loope
inc
jae
sub
xchg
cmp
add
stos
and
out
call
test
(bad)
cmps
imul
xchg
pop
mov
loopne
lods
xchg
les
sar
cmc
adc
xlat
adc
gs
or
fstp
mov
mov
xor
mov
jmp
push
fcmovnu
dec
mov
adc
mov
sub
imul
xchg
hlt
(bad)
jns
iret
xchg
push
jns
bound
in
fstp
(bad)
jo
jmp
sub
ins
or
xchg
aam
mov
ds
or
scas
inc
adc
imul
ja
jo
lods
cmps
and
call
jbe
into
in
mov
fiadd
ins
mov
pop
dec
jecxz
inc
sbb
sbb
(bad)
sbb
shl
pop
mov
retw
jo
je
loop
pop
push
ja
mov
mov
ss
mov
xchg
cmc
adc
scas
or
and
and
adc
and
pop
push
mov
jmp
loope
lds
inc
push
cli
fwait
or
std
test
mov
mov
dec
or
xchg
out
push
xor
mov
dec
mov
cmp
inc
dec
mov
test
xor
outs
cmp
stos
pop
cmps
call
fstp
int3
and
lds
in
xor
pop
outs
icebp
push
dec
sbb
pop
inc
out
clc
cmp
sbb
xchg
cli
movs
mov
jg
sti
pushf
aas
ins
enter
cmp
rol
add
lock
push
fild
dec
add
jo
rol
push
or
sub
std
and
mov
xor
or
push
push
or
and
pop
xchg
pop
sbb
scas
ss
or
xor
and
retf
pop
inc
fcomp
shr
div
mov
xchg
add
mov
retf
test
imul
jo
daa
stos
cmp
mov
jg
lods
int3
call
sub
push
jmp
cmp
sbb
out
mov
ss
and
fisubr
stos
and
fbld
popa
(bad)
pop
aaa
sti
push
gs
nop
mov
adc
pop
jmp
pop
div
xor
clc
xor
sub
in
push
outs
jg
mov
and
aad
and
inc
inc
or
adc
cmp
out
dec
ret
rol
xchg
std
ins
data16
inc
pop
mov
outs
sahf
jno
dec
shl
mov
ins
shr
arpl
jnp
nop
je
lods
icebp
imul
mov
dec
sbb
push
cmc
loope
mov
loope
aam
js
pop
pop
xor
in
add
popf
inc
out
sub
das
xor
add
out
repnz
cmp
dec
shr
xchg
jle
dec
int3
cmp
pusha
adc
call
dec
mov
rcr
push
jnp
sub
in
test
add
and
push
and
sar
int3
mov
jmp
adc
inc
aas
jmp
nop
jo
mov
ds
and
aaa
jg
imul
dec
ja
les
icebp
xor
adc
sub
fcomp
mov
in
push
pop
mov
call
cmps
arpl
outs
xchg
dec
mov
(bad)
push
cmp
jp
mov
cmp
aam
ficom
or
add
out
inc
mov
xchg
sub
int
es
arpl
push
jge
arpl
adc
scas
inc
stos
je
das
or
cmps
mov
pop
jne
leave
mov
and
and
mov
and
xor
std
push
(bad)
(bad)
cli
push
das
out
pop
jmp
out
sub
mov
inc
or
out
mov
sbb
adc
and
sub
mov
out
and
shl
es
fcmove
stos
lahf
stos
lock
and
nop
cmp
mov
sbb
mov
xor
sub
adc
mov
dec
aad
outs
mov
or
mov
jne
sti
(bad)
mov
scas
add
jb
sbb
imul
pop
mov
les
xchg
pop
xor
(bad)
or
lods
outs
call
ficom
mov
sbb
xor
fstp
lea
fst
or
xor
jg
jae
in
fwait
mov
out
lea
out
std
xor
ret
mov
adc
sub
ds
inc
cmp
int
out
cmc
les
lea
xchg
push
mov
adc
adc
or
rcr
or
add
mov
fisttp
add
(bad)
in
pop
fdivr
aas
imul
sbb
mov
movs
stos
aad
ins
movs
adc
xchg
imul
icebp
(bad)
enter
scas
(bad)
mov
out
mov
out
cmps
popa
fdiv
dec
popf
arpl
or
mov
cli
mov
fidivr
clc
push
scas
outs
xchg
pop
iret
in
adc
cmc
aas
cmp
pop
xor
shr
push
outs
bound
in
push
leave
mov
retf
ins
jae
or
mov
icebp
xor
or
shr
mov
jnp
lods
xchg
cmp
xchg
(bad)
call
jl
and
das
sub
sub
dec
popf
stos
pop
dec
jno
ins
in
jo
push
bound
fldenv
pcmpeqd
push
outs
aam
xchg
dec
cmp
xchg
push
stos
js
popf
cdq
xchg
mov
bound
xchg
jae
cmp
mov
push
pop
xchg
pop
into
shr
js
sbb
sar
shr
sbb
popf
lock
dec
xlat
test
add
and
dec
mov
ret
lea
and
outs
repz
fidiv
pop
rol
or
jmp
cmp
popa
sbb
jmp
push
adc
jno
scas
jb
fst
xchg
mov
cmp
sar
inc
jbe
jae
fwait
scas
push
sbb
adc
push
jnp
push
pop
push
add
imul
or
mov
add
ret
js
add
rcr
ins
arpl
or
test
mov
sbb
cmc
pop
sahf
rcr
push
imul
push
cdq
cmp
popa
(bad)
imul
fisttp
fsub
shl
call
xlat
dec
or
sub
inc
or
out
jmp
xor
in
push
imul
xchg
loop
push
in
cmps
xor
enter
sbb
enter
test
not
push
mov
scas
or
adc
cli
pop
test
in
sub
into
xor
(bad)
sar
(bad)
dec
retf
and
inc
mov
scas
add
sbb
stos
in
xor
or
push
pop
push
iret
push
jb
lea
mov
retf
cli
test
cmp
aam
(bad)
iret
call
mov
jns
jg
mov
addr16
mov
sbb
(bad)
scas
inc
call
mov
mov
mov
push
push
mov
fs
js
pop
(bad)
and
and
iret
adc
sub
mov
jecxz
mul
daa
mov
shl
dec
sbb
sbb
and
enter
push
fcom
cmp
jo
mov
cdq
and
lds
fnstenv
outs
(bad)
xchg
aas
inc
(bad)
call
mov
sbb
or
(bad)
in
ds
and
cmps
adc
dec
je
jmp
fisub
mov
pop
fmul
(bad)
mov
shr
into
mov
cld
out
movs
retf
sub
out
daa
test
pop
int
ins
mov
mov
ins
push
lods
push
xor
nop
jbe
loop
leave
cs
movs
das
aas
push
cmove
lock
and
mov
neg
dec
xchg
ins
cmp
inc
ja
pop
adc
fsubr
cli
call
cmp
gs
dec
outs
cmps
sahf
and
cmps
std
into
out
outs
outs
cmp
mov
shl
pop
pop
and
retf
stc
sbb
outs
ror
pop
sbb
imul
and
retf
xor
mov
add
daa
dec
and
int
and
xlat
out
mov
sbb
test
pop
sbb
dec
cli
inc
mov
jmp
imul
pop
out
adc
mov
add
mov
scas
ror
xor
add
jmp
jecxz
or
data16
pop
(bad)
sbb
and
push
dec
fdiv
and
push
mov
adc
ja
jno
test
out
out
lods
test
fdivp
pop
cs
lods
xchg
push
or
cmp
jae
mov
imul
adc
xor
test
out
retf
inc
xchg
mov
(bad)
pop
fnclex
mov
push
out
add
adc
stos
pop
(bad)
jae
mov
jl
test
ficomp
push
shl
sbb
je
add
push
and
mov
push
sbb
push
inc
xor
and
dec
dec
jo
add
push
or
ins
sbb
xchg
adc
pop
(bad)
aad
js
xchg
add
sbb
das
xor
xor
paddb
adc
out
cmps
dec
lods
idiv
jg
mov
push
(bad)
mov
push
ret
jb
push
repnz
ja
cmp
fwait
in
sahf
mov
sbb
aad
jbe
popa
sub
sbb
xlat
jmp
popf
pop
dec
push
inc
(bad)
mov
xchg
inc
fwait
dec
fwait
lods
xchg
pop
inc
sub
cmp
jg
and
(bad)
sbb
sar
test
fimul
outs
inc
fidiv
add
add
sbb
repz
cmps
nop
(bad)
clc
lods
std
jge
pop
and
xor
and
les
loope
pop
mov
and
fld
leave
lock
mov
das
dec
push
jb
ror
(bad)
clc
mov
push
push
(bad)
js
pop
les
and
dec
jp
add
mov
fsubr
retf
pushf
push
sub
lock
jnp
hlt
(bad)
jmp
adc
rcr
pop
jmp
jae
xchg
mov
les
or
jno
call
inc
inc
jb
mov
or
push
dec
mov
add
mov
xchg
xor
int
push
inc
jns
sub
scas
pop
inc
sbb
scas
scas
in
cmp
mov
or
mov
xlat
shr
sbb
push
dec
sbb
mov
into
jle
lods
pop
sub
xchg
xchg
leave
cmpxchg
add
mov
lahf
and
push
cmp
mov
sub
shl
jo
sbb
push
fadd
mov
fdivr
sbb
sbb
or
shl
xchg
or
pop
cmp
add
and
cmc
iret
neg
dec
clc
xchg
and
popa
sub
(bad)
jp
mov
push
fisub
adc
repnz
xor
sbb
xchg
push
xchg
loop
cdq
lea
fidivr
cmp
mov
or
pop
pop
cli
lds
jmp
rcl
sub
lahf
sahf
xchg
fwait
in
mov
ficom
inc
mov
xor
imul
mov
pop
xchg
dec
call
sti
stc
xlat
ror
scas
jns
inc
add
arpl
dec
sub
xchg
iret
push
mov
enter
fs
addr16
dec
movs
inc
inc
jne
mov
push
cmp
leave
xchg
(bad)
(bad)
jns
sub
pop
sub
dec
int3
es
mov
xor
je
add
rcr
test
dec
rcl
out
dec
aas
mov
add
mov
cmps
adc
dec
xor
fisttp
scas
scas
adc
mov
(bad)
ja
push
movs
xor
fs
dec
ror
(bad)
lock
(bad)
mov
push
test
sub
ins
lods
fsub
popa
les
or
jo
fcom
dec
pop
push
nop
jmp
pop
cmp
dec
mov
sub
inc
(bad)
dec
sub
shl
sub
and
sbb
push
lods
push
inc
adc
(bad)
pop
sbb
(bad)
call
xchg
or
dec
add
push
fwait
enter
inc
and
imul
xor
mov
push
fwait
adc
xor
out
mov
jg
adc
cwde
jmp
rcl
mov
mov
js
cli
sub
cmps
xchg
dec
jmp
and
out
cmp
mov
mov
xor
test
cmp
sahf
add
inc
in
lahf
fisubr
xor
lods
mov
push
int
rcl
(bad)
shl
pop
ss
add
retf
cld
cli
stc
mov
jle
pop
jp
sti
loope
leave
jecxz
daa
adc
dec
sub
mov
sar
cmp
clc
fwait
xor
stos
pminsw
push
or
into
mov
test
cmp
pop
sub
jmp
addr16
sbb
shl
sbb
in
cmp
sub
fdivp
scas
mov
test
cmp
mov
sti
stc
push
retf
and
pop
sub
xor
icebp
cmp
add
xor
sub
retf
loopne
(bad)
jecxz
sub
repnz
sub
xchg
push
cmp
clc
lock
inc
call
mov
pop
cmp
inc
icebp
xor
daa
cmps
enter
shr
sub
cli
ds
call
(bad)
xadd
and
addr16
dec
inc
in
push
mov
mov
(bad)
clc
push
add
call
xchg
arpl
xchg
push
aad
or
call
cld
push
cli
push
jmp
xchg
cmp
stos
in
pusha
daa
jecxz
push
or
stc
xchg
xchg
jmp
add
dec
aam
dec
sub
ins
push
or
imul
mov
sahf
jo
scas
push
gs
pop
loope
mov
iret
xchg
inc
pop
mov
test
outs
scas
lss
(bad)
f2xm1
sbb
push
ret
and
mov
(bad)
shr
dec
lods
inc
add
fsubr
adc
stc
pop
and
js
adc
ins
jmp
inc
push
lahf
rol
add
shl
sbb
movs
mov
xchg
sbb
(bad)
(bad)
jbe
test
jo
int3
push
mov
mov
dec
cmps
mov
stos
cmp
xchg
cld
mov
cmp
cmps
dec
cmps
imul
aas
(bad)
cld
out
popw
loop
sti
sub
test
add
xor
js
mov
cdq
fucomp
push
outs
call
lds
sahf
pop
movs
cwde
and
loopne
test
test
scas
dec
ds
(bad)
test
pushf
ret
jns
mov
clc
xchg
(bad)
shr
aam
gs
sbb
dec
fs
ja
fbstp
stos
(bad)
inc
or
push
dec
lds
push
mov
(bad)
cmp
shr
repnz
das
or
pop
mov
aaa
mov
cmp
outs
clc
adc
int
mov
sub
loop
pop
outs
out
add
adc
inc
jae
out
push
pusha
(bad)
jmp
hlt
stos
ja
pop
in
cli
or
das
(bad)
xor
cmp
add
hlt
cmp
fimul
stos
pop
pushf
sub
jae
ja
mov
cmps
sbb
mov
outs
sub
cli
int3
lock
and
sub
sbb
ins
hlt
clc
cwde
xor
jae
imul
mov
mov
dec
xor
xor
jl
push
lock
adc
js
cmp
in
std
mov
add
ss
or
pop
imul
sub
es
(bad)
fstp
jnp
repnz
fld
pusha
push
icebp
add
pop
mov
addr16
xchg
cmc
aam
sbb
enter
sbb
or
icebp
xchg
inc
imul
sbb
adc
cmp
cmp
cmp
mov
ja
xchg
jnp
scas
sub
cmp
aas
or
cdq
xchg
push
fwait
clc
fwait
mov
ret
or
inc
cmp
sbb
inc
test
aad
or
out
push
and
and
loop
inc
repnz
sbb
retf
mov
push
(bad)
adc
and
dec
lea
xor
sub
scas
mov
cmp
and
xor
retf
jno
movs
icebp
mov
inc
stos
in
dec
shl
outs
lahf
and
repz
adc
loope
sub
inc
into
dec
cld
jb
lods
sbb
ins
push
fadd
push
and
sbb
xor
inc
fwait
sbb
push
(bad)
cs
lods
(bad)
aas
add
push
xchg
sbb
out
pop
aaa
fwait
sub
(bad)
into
fdiv
mov
popa
dec
add
push
in
out
inc
retf
jge
xchg
xchg
cld
es
jo
in
mov
stos
jmp
add
loopne
xchg
push
(bad)
sar
add
outs
pop
mov
push
rcr
mov
or
mov
(bad)
mov
pop
fnstenv
adc
shl
jl
ins
and
inc
dec
inc
repnz
test
int
push
push
xchg
loopne
jno
add
xchg
sbb
call
inc
(bad)
mov
inc
hlt
and
add
cs
sahf
xchg
add
jmp
sti
inc
or
ret
std
jae
outs
jle
aas
sub
call
mov
rol
jle
adc
or
xchg
adc
mov
test
add
cmp
sub
jge
ret
xor
loopne
imul
xchg
pop
das
test
xor
rcl
or
adc
xor
pop
mov
jo
das
add
adc
push
popf
scas
lahf
sub
sub
(bad)
jb
xchg
mov
xor
cmp
js
mov
ds
in
int
or
retf
jg
ja
adc
inc
fxch
lahf
leave
mov
or
ins
jno
pop
mov
mov
dec
jl
mov
ds
aam
imul
bound
push
or
sub
lea
jle
shl
popa
lahf
test
sbb
inc
shr
xor
inc
inc
mov
data16
cmp
nop
std
repnz
in
stc
ss
outs
mov
test
mov
pop
mov
out
xchg
and
(bad)
adc
fs
sbb
aaa
loop
xchg
pop
push
fmulp
pop
and
mov
dec
dec
dec
ins
dec
adc
jo
jno
es
mov
pop
inc
mov
or
cmp
(bad)
mov
in
and
xchg
or
cmp
pop
mov
repnz
mov
dec
mov
jecxz
rcl
les
aas
adc
ins
jo
movs
add
mov
dec
adc
and
push
icebp
or
mul
out
call
push
pop
rol
js
ss
loope
cld
aam
rol
xchg
push
xchg
add
sub
mov
push
mov
scas
push
mov
xchg
addr16
mov
fidiv
stos
sbb
bound
movs
sbb
pop
jns
fsubr
pop
popa
sbb
pop
sub
out
push
add
cmp
inc
fsubr
add
cli
dec
mov
push
sbb
mov
test
lock
ins
pop
pop
xchg
int
sbb
adc
adc
push
jb
cmp
jno
mov
xor
adc
dec
xor
mov
xchg
pushf
adc
clc
sahf
xlat
test
cmp
stos
cmc
loope
fistp
sti
inc
xchg
and
xor
mov
mov
jmp
inc
and
add
jae
test
adc
and
sbb
or
loopne
mov
dec
adc
mov
jne
in
fs
popa
jmp
ror
lock
mov
int3
sub
ficom
dec
jmp
fcomp
out
dec
mov
dec
outs
cmp
jmp
sbb
mov
xchg
stc
outs
xchg
shl
xor
dec
js
mov
(bad)
adc
fcom
addr16
pop
sbb
clc
fisttp
cmc
ins
and
fs
inc
and
adc
rol
push
popf
pop
and
cld
test
sub
mov
arpl
sbb
call
jmp
add
xchg
lods
enter
scas
adc
loop
cdq
sar
sub
addr16
stos
mov
int
(bad)
or
test
loopne
into
jle
loope
outs
fmul
(bad)
cli
push
add
sbb
ret
out
mov
push
in
rcl
mov
popf
int
imul
jae
das
jle
(bad)
mov
mov
mov
fldcw
sti
ja
fsubr
sub
inc
xor
mov
emms
(bad)
out
cmps
mov
(bad)
clc
das
mov
pop
xchg
adc
adc
xlat
inc
mov
xchg
pusha
out
stos
push
call
enter
cmp
mov
or
push
std
inc
dec
add
dec
jno
loop
cld
xchg
stos
mov
inc
jbe
cmp
pop
and
outs
pop
pop
jp
sar
mov
cmp
aam
xor
leave
pop
xchg
mov
dec
sub
test
xor
bound
psubq
add
data16
cwde
fs
fstp
loop
pop
ret
outs
scas
pop
out
or
mov
xchg
lea
adc
inc
scas
push
scas
imul
xchg
outs
mov
mov
cmp
xchg
xor
xor
stc
aad
(bad)
mov
fdivr
add
xchg
and
movs
(bad)
(bad)
dec
leave
mov
sahf
out
mov
ror
cli
pop
xchg
lds
push
inc
mov
or
or
scas
enter
cs
dec
fst
sbb
fsub
(bad)
or
xor
shl
sub
shl
pop
call
je
fsubr
mov
js
ret
adc
repz
jp
inc
add
stos
cmp
or
xor
sbb
jp
popf
jl
xor
retf
or
aam
js
data16
cmps
or
lods
xor
stos
bnd
mov
mov
in
das
adc
adc
inc
cmp
aas
ins
sub
sub
mov
aad
es
sub
jmp
add
xor
pop
add
push
ins
push
or
dec
rol
add
inc
jle
call
sar
xor
pop
aas
cmp
out
sbb
or
jne
inc
into
aas
push
and
cmp
jns
mov
mov
mov
xchg
jne
adc
sub
fwait
push
adc
pushf
cmp
in
or
retf
lea
mov
(bad)
popa
jl
dec
repnz
add
sti
jns
push
icebp
ds
fst
daa
call
ret
cs
jl
or
jg
mov
jecxz
mov
adc
int3
adc
sbb
xor
hlt
cdq
push
xor
or
add
les
pop
(bad)
lods
retf
xor
retf
lahf
fs
pop
and
repnz
rcl
test
std
xor
mov
(bad)
push
stc
or
pop
mov
jne
and
out
mov
lahf
mov
es
test
xchg
sub
pop
loopne
dec
add
cmps
or
sub
frstor
stos
adc
add
ss
cmps
or
retf
mov
pop
jbe
jmp
sbb
mov
inc
into
add
lods
jbe
fistp
pop
dec
push
mov
jbe
daa
mov
mov
loope
out
adc
ins
jb
adc
(bad)
movs
retf
lock
les
push
push
sub
ret
(bad)
daa
mov
lds
and
jns
cmp
xchg
lahf
jg
lea
jae
add
mov
arpl
inc
out
popa
cmps
fisttp
lahf
cdq
pop
imul
mov
lea
and
sub
aaa
mov
stos
mov
mov
retf
adc
jle
push
sahf
mov
dec
push
cmp
sbb
inc
or
pop
mov
call
repnz
cmc
cs
jnp
test
ret
mov
jb
in
rcr
popf
int
scas
ja
dec
dec
mov
mov
out
xchg
xor
jmp
jo
shr
mov
fimul
fistp
push
rol
popf
xor
cdq
xchg
xor
mov
cmc
push
fwait
push
mov
jmp
popa
test
in
and
cmp
sti
xlat
outs
cwde
xor
shl
push
xchg
stos
or
cmps
and
or
in
cmps
mov
xor
mov
fstp
cmp
cmp
out
jbe
mov
cmp
ja
ret
(bad)
shl
mov
inc
cwde
(bad)
rcr
mov
xor
cmp
jno
cmc
out
mov
arpl
bound
inc
mov
(bad)
xor
stos
add
mov
je
add
hlt
push
mov
sub
cdq
fidiv
stc
xor
das
jns
popa
jmp
dec
inc
push
push
cs
fwait
push
in
aaa
cmovo
rcl
push
sbb
jmp
js
mov
and
push
or
fld
pop
mov
jne
sub
sbb
arpl
jge
xchg
mov
out
je
out
ret
inc
clc
enter
addr16
test
pop
sub
mov
jecxz
sbb
int3
out
inc
imul
(bad)
test
inc
xor
call
call
pop
dec
xor
outs
ja
sbb
int3
jmp
popf
pop
jae
mov
jno
out
pop
(bad)
jbe
push
or
adc
mov
repnz
pop
pop
mov
jl
das
mov
sbb
in
int3
das
dec
cmps
dec
sahf
adc
icebp
pop
retf
ins
push
aam
ficom
inc
and
fidivr
stos
pop
test
mov
and
mov
cmp
jmp
and
push
mov
add
and
adc
std
shl
pusha
mov
test
push
popf
out
adc
pop
dec
rol
test
push
push
popa
aam
mov
inc
ins
test
inc
mov
out
frstor
add
test
cdq
cmp
add
push
lods
ja
mov
mov
mov
or
ins
mov
add
xor
xchg
sti
cmp
out
or
outs
imul
sbb
push
inc
cmps
dec
or
imul
cmp
dec
cmp
adc
ds
pop
cmp
xchg
jnp
xor
dec
fwait
stc
adc
jmp
dec
pop
mov
cmp
add
(bad)
shl
ficomp
cmp
mov
stc
mov
jmp
push
pop
cdq
cmp
scas
push
retf
mov
inc
outs
js
inc
arpl
sti
fdivr
sub
pop
and
je
inc
sbb
fs
sbb
out
es
lea
and
daa
iret
xor
mov
push
out
inc
push
pop
jb
push
cmp
adc
pop
ret
inc
add
adc
push
aam
dec
shr
sub
inc
(bad)
movs
jle
push
and
out
cmc
dec
rol
inc
out
cmp
add
or
inc
in
pop
jecxz
scas
imul
jle
xor
int
xchg
xor
dec
call
sbb
clc
and
ins
adc
push
xor
pop
jo
push
retf
cmp
xchg
push
fsubr
or
imul
test
push
jno
push
jg
xchg
das
les
out
sar
sti
sti
xchg
dec
pop
inc
jo
dec
js
cmps
lea
mov
scas
pop
lods
adc
dec
sbb
popf
(bad)
fcmovu
(bad)
fs
jno
lds
movs
(bad)
fs
jecxz
ret
out
xor
jmp
rcl
mov
imul
imul
shr
lock
jge
inc
cmp
repnz
dec
sub
in
movs
imul
mov
fdiv
mov
test
push
rcl
sbb
sbb
call
jmp
repnz
lock
sbb
and
mul
fadd
add
dec
cmp
add
fmul
dec
cli
int
shl
and
enter
call
sub
jl
jge
cdq
push
mov
mov
int3
aad
mov
fcomip
add
add
in
(bad)
sbb
push
ror
scas
mov
iret
inc
sbb
rcr
fwait
test
sbb
jl
cmp
adc
stos
xchg
(bad)
jecxz
(bad)
jg
mov
imul
sub
jmp
fs
sub
arpl
xlat
inc
or
fdivr
(bad)
cmp
xchg
dec
or
int3
test
aas
push
sub
fcmovnb
xchg
ds
rol
ins
adc
mov
test
das
cs
jb
or
push
mov
loopne
dec
dec
inc
dec
pop
out
(bad)
pop
cmps
cmc
pop
cmp
push
(bad)
mov
add
push
scas
test
jnp
pop
xchg
mov
push
adc
fild
inc
cwde
and
sub
out
xchg
iret
aas
push
sahf
mov
inc
loope
sbb
jmp
pop
cmp
adc
call
mov
xchg
sub
repnz
pop
sbb
inc
push
pop
adc
leave
pop
jg
out
rol
cmp
scas
sub
retf
xor
test
data16
jne
mov
pop
ret
jno
pop
rol
mov
jge
dec
call
cmp
test
cmps
sub
mov
pop
pop
inc
xor
mov
mov
pop
hlt
aaa
and
std
jle
popa
cmp
sub
or
loop
mov
xor
in
fst
jle
xchg
(bad)
xor
fist
mov
idiv
push
push
dec
dec
sub
or
dec
jp
dec
out
jnp
popa
push
hlt
test
pusha
(bad)
neg
mov
mov
clc
scas
or
jmp
out
arpl
jbe
xchg
cmps
jle
mov
test
adc
dec
dec
jb
aam
xor
test
mov
fwait
mov
xchg
or
cwde
lock
and
cmps
sub
outs
dec
jmp
in
inc
inc
retf
and
pop
clc
pop
(bad)
scas
mov
mov
xchg
lods
(bad)
mov
sbb
dec
jge
cmp
add
or
paddq
dec
stos
inc
mov
push
aam
int3
in
js
xor
(bad)
push
shr
jl
or
pop
outs
les
pop
push
std
addr16
scas
and
ins
mov
fistp
movs
addr16
sub
out
push
(bad)
repnz
mov
dec
sbb
add
sbb
test
inc
sbb
jecxz
jl
aam
int3
dec
outs
fadd
retf
out
mov
mov
mov
xor
add
xchg
test
push
xchg
addr16
sbb
daa
mov
mov
das
cmps
cmps
inc
push
pop
sbb
jmp
fist
add
mov
mov
lahf
push
sub
adc
fild
adc
cdq
mov
shl
test
iret
int3
jo
fwait
lock
sub
jg
mov
mov
push
dec
rcr
mov
sub
(bad)
rcl
mov
fild
test
sbb
cwde
add
fidiv
mov
add
push
pop
or
not
cwde
test
test
in
fimul
inc
aam
inc
gs
out
retw
dec
call
add
sbb
xchg
push
or
mov
fiadd
mov
imul
xchg
inc
jl
jg
sahf
pop
fwait
mov
jae
push
call
mov
sub
push
pusha
push
lock
jle
in
out
jecxz
inc
xor
(bad)
shr
xchg
jg
pop
xchg
adc
lock
push
sub
gs
cmp
cs
xor
ds
add
out
(bad)
xchg
scas
repz
cmp
cmp
fst
xchg
and
pop
push
add
mov
jmp
xor
pop
jbe
push
mov
call
push
mov
add
aam
add
adc
mov
mov
pop
sub
xor
cmps
pop
cmp
sbb
and
sub
push
mov
jo
and
outs
fist
js
xchg
mov
xchg
dec
pop
call
int
mov
xchg
fiadd
cmc
imul
(bad)
sbb
jno
push
add
mov
pop
loop
mov
mov
push
xchg
imul
fs
add
or
mov
test
leave
dec
and
add
mov
xchg
rol
cmps
add
adc
test
cmps
push
inc
sbb
fnstcw
jmp
rcr
xor
jmp
cwde
(bad)
arpl
mov
jecxz
xchg
fwait
add
sbb
dec
out
or
and
daa
enter
or
cld
(bad)
cwde
out
sub
pop
into
ja
and
push
dec
out
push
xchg
imul
mov
xchg
aam
pop
mov
arpl
sahf
add
xchg
push
mov
and
fidiv
(bad)
mov
dec
ror
xor
aam
cmp
cmc
sbb
jg
lods
add
hlt
test
icebp
jae
fcom
xlat
jle
xchg
cdq
pop
or
shr
iret
iret
jp
push
jo
inc
inc
sub
scas
test
xchg
repz
gs
cmc
or
sbb
adc
cmp
jne
and
mov
sub
push
mov
daa
xlat
int3
xchg
iret
adc
popa
mov
fidiv
push
test
stc
inc
iret
inc
in
sbb
std
in
not
xlat
mov
push
