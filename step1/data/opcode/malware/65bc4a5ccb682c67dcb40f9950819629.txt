add
add
add
add
inc
add
dec
inc
add
add
add
pop
inc
outs
jb
ins
ins
dec
popa
imul
jb
gs
ins
add
add
add
and
dec
add
add
add
add
add
add
add
push
inc
add
jo
add
inc
push
dec
inc
add
add
add
add
or
add
jbe
xor
xor
add
add
add
je
add
pusha
add
add
jle
add
add
add
add
add
push
je
imul
add
add
add
add
push
push
add
add
add
add
inc
push
dec
inc
add
add
add
add
add
add
add
add
cli
add
add
add
add
add
add
add
add
add
add
add
add
or
add
add
add
add
add
add
add
or
add
add
add
add
add
jnp
add
add
gs
xor
xor
xor
xor
sub
sub
sub
xor
xor
xor
xor
jge
add
outs
outs
data16
gs
js
jae
jb
outs
addr16
add
add
mov
in
lahf
xchg
out
xchg
call
mov
xchg
test
mov
pushf
call
mov
mov
out
or
mov
jmp
mov
popf
mov
cmps
mov
lea
adc
add
gs
cmps
int3
sub
test
or
adc
enter
leave
xor
inc
loop
add
jecxz
outs
pop
mov
mov
or
fst
scas
mov
add
add
add
mov
add
psrad
dec
mov
add
add
aas
mov
add
xchg
outs
xchg
pop
retf
xchg
push
or
inc
scas
sbb
mov
push
jecxz
in
push
cmp
iret
push
inc
pop
pop
lahf
sub
(bad)
int
call
mov
jb
jnp
push
js
scas
mov
daa
and
xchg
jp
cmc
pop
pop
pop
cmp
shr
dec
push
dec
outs
push
pop
je
mov
jns
(bad)
push
test
ss
jno
xchg
push
mov
rcr
js
scas
(bad)
cmp
test
test
aas
pop
in
dec
jle
out
sbb
sbb
mov
dec
mov
pop
add
xchg
cwde
mov
add
sbb
and
sbb
add
pop
pop
mov
inc
nop
(bad)
push
sbb
cmp
iret
dec
mov
lds
and
adc
inc
mov
pop
daa
dec
xor
and
jl
rcr
cmc
sub
pop
gs
xchg
xor
adc
jmp
inc
push
xor
add
mov
xlat
in
inc
lahf
int
neg
rcr
xor
and
les
cli
inc
clc
rcr
or
pop
ds
inc
cld
pop
adc
and
(bad)
pop
ins
test
jle
xor
popa
imul
mov
jo
sub
aam
mov
leave
jo
shl
outs
xchg
cmp
add
jb
enter
push
loope
or
pop
cmps
jnp
adc
sbb
test
push
push
mov
test
jmp
popa
sbb
cmc
mov
xchg
test
mov
push
cs
iret
mov
sbb
mov
lods
test
cmp
jae
jle
scas
call
es
dec
xlat
pop
xchg
(bad)
pop
imul
retf
cmps
jmp
mov
sub
jo
jp
test
mov
inc
call
push
retf
loop
(bad)
xchg
push
fstp
out
cld
or
test
pop
fisubr
mov
and
sbb
movs
or
loopne
pop
sbb
jno
mov
inc
push
mov
push
das
fwait
push
fbld
iret
xor
mov
cmc
inc
shl
push
lahf
xor
pop
shl
mov
shl
and
call
test
cmp
pop
fmul
jmp
push
es
sub
(bad)
jns
mov
mov
ret
loop
cs
das
push
jmp
jne
rcr
mov
das
ret
xchg
xchg
enter
adc
xlat
sub
mov
psubw
cmps
in
and
push
or
popf
push
jmp
inc
ret
lods
cwde
adc
add
ss
inc
pop
je
out
cmps
mov
in
sub
mov
pop
fwait
mov
adc
jbe
mov
mov
sub
call
in
push
and
pop
push
mov
xchg
pusha
fisub
xchg
pop
cdq
packsswb
jmp
xchg
sub
adc
aad
adc
pop
xor
push
cmp
int
mov
es
and
or
cs
dec
sub
push
leave
ret
or
cli
ret
popf
sbb
fisttp
icebp
push
idiv
mov
pushf
neg
jp
(bad)
mov
jne
pop
in
and
shr
push
cdq
nop
push
xor
pop
in
xchg
xor
push
mov
jne
aad
sbb
gs
mov
leave
ss
dec
and
inc
aad
jae
pop
not
sub
pusha
mov
cmps
add
(bad)
(bad)
and
ror
test
fisub
ror
cli
adc
jle
xor
jnp
cmp
pop
(bad)
ficomp
sub
int
ja
pop
fist
jge
repz
mov
inc
das
(bad)
jae
push
in
xor
dec
add
mov
and
adc
mov
jne
int
inc
in
jp
aam
dec
jl
jb
int
leave
test
inc
cld
pop
aas
sub
(bad)
ja
rcl
jmp
push
aad
add
mov
daa
in
inc
add
test
call
cmps
popf
push
mov
sbb
clc
(bad)
neg
test
stos
shr
imul
stos
dec
ins
imul
aaa
and
mov
lods
push
aaa
push
cmc
pushf
fs
fcomp
stos
mov
lds
cmp
(bad)
fs
mov
push
inc
mov
pop
aad
push
test
aad
cmp
jp
inc
idiv
cli
mov
cmps
sub
jg
jle
sbb
adc
test
jl
popa
sbb
into
imul
lods
(bad)
xlat
or
or
sbb
xchg
adc
push
out
dec
repnz
cs
mov
nop
pop
jg
and
fcom
inc
add
aad
repnz
mov
or
xchg
es
scas
dec
dec
arpl
pop
repz
jmp
scas
sbb
push
movs
nop
or
enter
adc
call
add
mov
(bad)
sar
jo
stc
xchg
push
push
sbb
pavgw
cmp
cmc
push
sbb
jge
or
mov
sahf
add
and
dec
and
idiv
adc
cld
jnp
jecxz
mov
add
mov
clc
sub
xchg
jae
xchg
and
aaa
fwait
inc
repnz
mov
rcr
mov
shl
rcr
enter
mov
xor
jmp
in
mov
loopne
lds
jns
and
add
aad
shr
dec
sub
pop
nop
cs
xor
dec
mov
inc
inc
push
in
ds
xchg
jmp
das
xor
sub
mov
test
add
ds
imul
lea
mov
add
aas
mov
add
pusha
leave
jmp
mov
inc
mov
sbb
mov
adc
xor
adc
pop
inc
sahf
lods
push
and
inc
ds
daa
sub
xchg
and
pop
das
mov
cli
inc
aam
mov
imul
stos
call
(bad)
mov
scas
movs
or
stc
movs
loopne
jnp
mov
sub
push
repz
push
data16
mov
sti
jmp
jmp
loop
pusha
std
bound
push
dec
out
mov
fwait
push
inc
pusha
loop
nop
push
inc
inc
xor
xchg
rcl
pop
pop
outs
pop
jl
add
add
stos
fld
cmp
fdivrp
xchg
jg
pushf
jmp
xchg
(bad)
shr
adc
loopne
imul
rol
repz
imul
pusha
jecxz
movs
inc
xchg
bswap
pop
stc
sub
ss
daa
test
pop
jp
adc
cmp
sub
mov
mov
dec
push
fcom
(bad)
sti
cli
in
mov
shr
nop
aaa
mov
inc
mov
aad
mov
push
jnp
scas
mov
jecxz
(bad)
cmp
jl
jb
ds
mov
mov
fwait
mov
jne
jle
sub
sahf
mov
xor
jb
popa
add
std
pop
pop
fld
dec
fsub
jbe
jns
pop
nop
std
lds
sbb
cmp
test
jp
pop
sbb
(bad)
xchg
jmp
jge
loop
mov
or
xchg
or
and
inc
or
in
movs
adc
mov
mov
mov
fwait
push
sub
test
and
pop
loope
mov
test
icebp
pop
sbb
test
fsub
inc
lods
inc
(bad)
xchg
inc
jp
xchg
push
enter
pop
iret
fdivr
unpckhps
loopne
inc
in
mov
push
inc
sub
dec
mov
pop
inc
adc
dec
xchg
mov
fs
test
sbb
ret
sub
pop
inc
xor
outs
or
aam
inc
bound
fs
jnp
fwait
ret
retf
addr16
pop
sub
push
in
cmp
sbb
scas
adc
add
xchg
pop
sbb
inc
ins
add
sar
cmp
push
add
sub
xchg
ror
push
cmc
or
mov
xchg
stc
jge
or
lahf
inc
pop
mov
mov
movs
pop
jle
dec
enter
xor
ja
mov
dec
repz
cmp
popa
dec
adc
push
cmpxchg
and
cs
jns
enter
pop
(bad)
call
mov
popa
adc
out
push
jle
stos
xlat
(bad)
cwde
shl
arpl
mov
lods
adc
push
ins
movs
int3
mov
fwait
add
test
xor
cmp
inc
dec
lds
sar
dec
xchg
cmp
mov
cs
or
(bad)
dec
push
out
stc
sbb
div
xor
xchg
jno
cwde
mov
mov
xchg
push
push
push
xchg
xchg
imul
test
adc
cmp
pop
or
or
push
loope
jnp
fnsetpm(287
iret
ds
jb
repnz
gs
mov
push
or
(bad)
sar
lahf
mov
sbb
and
sbb
rol
mov
mov
sub
push
lea
mov
call
sbb
xor
ja
enter
pop
dec
dec
dec
fild
mov
aas
jp
inc
(bad)
into
ss
sbb
push
sbb
inc
jle
push
add
xlat
std
es
mov
mov
jmp
add
dec
mov
sub
std
fidiv
call
mov
mov
jnp
arpl
(bad)
sahf
js
sub
sbb
data16
imul
jge
adc
inc
lahf
mov
cmps
data16
outs
stos
fidivr
pusha
sar
push
pop
xchg
outs
jg
daa
jb
jle
out
pop
inc
cli
arpl
in
cmp
push
mov
push
cmps
pop
and
jecxz
or
push
jp
mov
stc
mov
xlat
mov
push
in
jno
xor
in
jmp
rcl
mov
stos
add
or
push
xchg
sub
(bad)
mov
inc
(bad)
out
inc
cdq
fs
std
ins
xchg
dec
fmul
pop
xor
fidivr
lahf
dec
(bad)
lock
shl
xlat
pop
mov
stc
adc
lods
xchg
(bad)
aas
fcmovbe
jmp
in
pop
cmps
sub
idiv
jmp
je
jb
enter
punpckhdq
sahf
stos
fcomp
arpl
push
xchg
xchg
ins
jnp
fsub
pop
xchg
sub
pop
jmp
and
jne
jmp
inc
sub
sub
jmp
adc
or
jmp
mov
rcr
lahf
(bad)
shl
dec
cmp
sbb
icebp
aaa
and
(bad)
dec
and
or
imul
out
mov
mov
fisttp
sbb
fdiv
xor
mov
mov
and
rol
leave
xor
ret
aaa
jns
cmp
into
push
push
push
pop
pop
in
sbb
xchg
pop
js
mov
or
fs
and
sti
mov
mov
rol
js
push
mov
push
daa
rcr
and
es
in
scas
iret
or
retf
cmp
nop
mov
jne
dec
jg
or
dec
mov
fcom
scas
adc
inc
mov
rcl
popa
fwait
data16
pop
call
mov
add
movhps
mov
pop
mov
adc
leave
push
add
fdivr
pop
popa
cmp
jle
shl
add
xchg
jne
jb
push
jbe
fdecstp
jbe
(bad)
es
jge
add
and
in
stos
imul
fcmovnb
pop
iret
clc
fdivrp
rcl
cmps
mov
xchg
push
js
sub
stos
arpl
xchg
cs
add
nop
adc
cmp
icebp
test
xchg
cld
retf
or
(bad)
adc
push
sbb
cmp
jl
lea
retf
sar
shl
mov
xor
mov
xor
dec
in
movs
or
add
sub
arpl
xor
movs
(bad)
loopne
stos
sbb
ja
push
jne
xor
outs
nop
pop
mov
add
mov
sub
cmp
jecxz
rol
mov
rcr
jmp
fs
call
lock
mov
fwait
dec
call
lock
cli
xchg
mov
mov
and
cmps
outs
mov
call
les
mov
sbb
push
mov
mov
xchg
fstp
jl
fmul
fld
and
lea
nop
inc
adc
stc
and
lods
aas
sbb
mov
fisttp
or
retf
outs
dec
and
mov
dec
cmp
adc
ret
and
clc
ins
aam
xchg
dec
mov
inc
test
cmps
push
(bad)
fdiv
jae
nop
push
xchg
push
cmp
hlt
and
add
pop
or
or
cmp
sbb
gs
mov
pusha
stc
jae
in
inc
sub
adc
arpl
in
je
test
outs
cmps
add
lods
fldcw
jmp
nop
and
les
fsub
fldcw
sub
sub
inc
push
sub
xor
ds
shl
sbb
mov
add
inc
icebp
push
aam
and
sbb
mov
cmp
push
imul
dec
popf
push
stos
les
lea
sub
mov
pop
das
aaa
dec
mov
arpl
sti
add
xor
stos
pop
fwait
ss
xchg
out
outs
aad
nop
loope
pusha
pop
and
or
repnz
and
in
fdiv
xchg
mov
test
xor
pop
add
mov
lds
mov
sub
and
mov
lods
mov
(bad)
push
sbb
fdiv
mov
adc
fwait
jb
jmp
scas
ja
inc
jl
fs
loop
or
sti
vpmadcswd
js
sub
mov
les
call
jmp
xor
test
mov
mov
jl
mov
cmps
cmp
jmp
lea
and
test
mov
mov
sub
out
adc
cmp
dec
lods
jge
mov
cmps
or
enter
add
(bad)
test
add
push
test
in
sbb
pop
ss
adc
xchg
(bad)
iret
fdivp
loope
lahf
int
xor
pusha
pop
icebp
cs
mov
dec
jmp
cmc
test
neg
xor
xor
iret
cld
jl
adc
data16
cs
jp
adc
ins
jo
mov
and
hlt
dec
cmp
je
xchg
mov
pop
stos
inc
or
test
inc
mov
stos
aaa
out
popa
add
dec
mov
movs
in
pop
adc
xchg
mov
leave
push
out
mov
dec
xchg
xchg
pop
mov
or
clc
pop
repnz
stos
das
movs
test
mov
cmp
movs
inc
call
fiadd
and
cmp
cmp
dec
les
das
shl
inc
pop
adc
ins
sub
xchg
add
dec
jno
(bad)
xchg
fwait
or
fild
dec
sub
imul
fwait
nop
les
dec
in
mov
repnz
add
push
push
sub
xchg
ffreep
pop
pop
mov
(bad)
cmp
test
mov
cmps
push
jmp
cwde
or
rol
stos
lahf
loop
les
leave
cmp
aam
mov
add
out
add
pop
adc
js
mov
push
mov
shl
add
push
adc
inc
push
(bad)
push
or
ror
mov
popa
lds
cmp
dec
mov
cmps
xor
push
inc
cmp
inc
jns
mov
push
sub
xchg
mov
cmps
call
xchg
movs
pop
cli
dec
jp
add
inc
xor
jnp
jb
cs
bound
dec
jae
lods
cwde
pusha
stos
mov
cmp
in
js
cmps
fcmovnb
bound
nop
loopne
mov
bound
push
mov
jl
jle
jb
lods
retf
add
test
pop
or
psrad
cmp
aaa
cmp
lds
cmps
in
sahf
push
add
inc
push
enter
ja
push
ror
bound
mov
sahf
sbb
or
push
cmp
mov
test
fst
or
outs
pop
sbb
xor
or
aam
movs
jbe
pop
push
mov
mov
call
mov
jecxz
aam
fld
daa
rdmsr
bound
adc
sub
pop
icebp
xchg
mov
daa
lds
push
cmp
loop
push
(bad)
clc
rcr
mov
and
mov
push
hlt
add
inc
daa
in
mov
cmp
dec
mov
imul
neg
xor
xor
aad
inc
sub
pop
pop
cdq
fs
out
jns
xchg
xor
imul
inc
stos
clc
aas
jmp
inc
ins
fisttp
push
xchg
push
add
push
jmp
out
je
cs
mov
and
pop
pop
inc
push
adc
push
sub
cs
mov
jp
je
inc
pusha
push
fcmovb
push
push
pop
jnp
add
mov
push
fwait
lods
and
xchg
mov
mov
fdiv
sub
mul
leave
jo
xchg
add
mov
adc
jmp
push
scas
push
and
add
in
out
ja
sub
pop
leave
in
das
test
(bad)
fadd
ins
push
pop
mov
xor
pop
push
aaa
retf
jp
mov
xchg
cwde
pop
dec
jge
add
(bad)
jns
mov
mov
mov
ins
and
xchg
cmp
cwde
inc
dec
mov
imul
jb
pop
out
fcom
das
mov
clc
inc
adc
popa
lods
test
or
arpl
sub
dec
les
mov
mov
and
mov
xor
add
test
and
cmps
jno
dec
call
fs
pand
xchg
in
xor
scas
shl
gs
(bad)
push
in
imul
fs
loopne
fldenv
ja
xor
test
test
test
push
je
xor
xor
pop
div
mov
push
cwde
cmc
gs
cld
repnz
bswap
add
mov
scas
mov
sbb
das
in
cmps
dec
push
pop
sub
imul
jne
mul
loope
xor
mov
or
inc
xchg
mov
push
inc
in
cld
or
push
imul
hlt
push
aaa
retf
rcl
out
xchg
rcr
mov
imul
dec
xor
jp
sbb
in
in
dec
sbb
lock
inc
stos
loope
mov
stos
push
adc
adc
mov
add
out
sub
pop
push
push
stos
lods
mov
ret
sub
lahf
xor
cmp
daa
ins
xor
xchg
(bad)
sbb
pop
iretw
loopne
lea
sub
sbb
or
gs
sbb
repnz
int3
in
jp
xor
mov
jnp
mov
or
(bad)
clc
shr
test
add
les
pop
ror
mov
sbb
xor
fcom
add
inc
retf
dec
jb
add
sub
loop
je
imul
cmp
paddusw
cwde
pop
cs
add
div
retf
mov
mov
mov
pop
xchg
cmp
(bad)
jne
jp
cdq
daa
cmp
pop
or
imul
rcr
scas
daa
cmp
mov
test
pop
test
(bad)
sbb
loop
outs
loope
cs
popa
jo
retf
aam
loop
push
mov
(bad)
adc
xor
sbb
les
xor
repnz
push
adc
ret
sub
xchg
js
or
and
je
push
test
call
xor
jno
inc
xchg
retf
mov
loopne
xchg
pop
(bad)
dec
jmp
test
ds
dec
cmp
daa
lock
add
adc
and
retf
sbb
xchg
jg
fcomp
add
push
mov
push
sbb
movs
js
adc
jmp
fnstcw
fbstp
xchg
stos
(bad)
repnz
in
(bad)
cli
push
call
dec
xchg
stc
inc
fist
call
xor
aas
xchg
leave
mov
adc
xchg
or
adc
adc
(bad)
or
xchg
leave
pop
stc
or
stc
mov
(bad)
test
mov
xlat
pop
xor
inc
ret
in
mov
aaa
mov
les
fist
dec
stos
in
adc
in
sar
pop
movs
(bad)
inc
jle
gs
hlt
cmps
rdpmc
lods
xor
jb
test
and
enter
daa
mov
popf
in
add
gs
in
and
int3
cs
repnz
mov
ret
bound
add
cmp
cmp
(bad)
lods
ins
jbe
add
mov
es
dec
fxtract
mov
test
ins
(bad)
sar
out
add
sub
or
(bad)
pop
out
mov
in
xor
(bad)
in
cmps
lods
test
adc
push
inc
mov
pushf
pop
or
(bad)
push
ret
xor
out
jecxz
push
mov
ficomp
pop
imul
sub
or
mov
or
ins
xor
test
hlt
outs
adc
sub
adc
mov
not
je
pop
ror
gs
mov
sub
xlat
das
mov
push
and
inc
push
outs
xchg
or
xchg
imul
cwde
push
jmp
(bad)
in
pop
add
mov
mov
lods
mov
imul
pop
and
imul
inc
imul
sbb
add
(bad)
aad
fist
push
or
movs
rol
and
test
jge
cmp
lods
pop
out
sub
fst
(bad)
leave
mov
icebp
pop
push
enter
pop
aaa
xor
or
mov
shl
adc
and
push
mov
loope
jb
mov
xchg
inc
loope
xchg
fxch
mov
loop
movs
ficom
add
mov
pop
sbb
xor
jbe
(bad)
imul
sbb
push
in
ins
(bad)
call
das
out
xor
not
jns
aam
sub
retf
inc
push
adc
cdq
out
cmps
cmp
inc
xor
and
inc
retf
xor
mov
push
sar
cld
aas
loope
mov
xchg
icebp
sub
add
fs
stos
sub
mov
add
aaa
push
dec
adc
mov
test
pop
dec
outs
dec
rcl
(bad)
sbb
push
test
sbb
fbstp
lock
xchg
jno
xor
test
std
mov
jne
out
cli
out
aaa
cld
inc
mov
mov
adc
jmp
inc
call
test
clc
or
sub
loopne
les
lods
dec
cmp
imul
and
fs
mov
mov
pop
pop
jnp
adc
arpl
test
rol
sbb
xor
jg
cld
arpl
mov
or
out
or
lds
rcl
and
push
iret
sub
test
or
outs
test
addr16
add
cwde
out
jno
adc
ret
inc
lds
mov
cmp
push
sub
mov
arpl
cmp
sub
push
pop
loop
loop
jno
cmp
sub
mov
xor
dec
in
fnstcw
adc
or
pop
repnz
mov
push
mov
lds
xchg
mov
ficom
test
xchg
jge
sahf
loop
mov
adc
mov
xchg
ins
outs
(bad)
pop
jb
add
or
push
sub
scas
xchg
jb
ds
dec
xlat
ins
pop
dec
inc
retf
mov
dec
ret
pop
cmps
les
ds
ficom
in
mov
mov
jnp
inc
das
test
movs
xchg
mov
out
mov
inc
push
pop
cwde
dec
mov
cwde
push
(bad)
push
shl
in
xor
js
mov
test
xchg
xor
out
sub
inc
push
pop
push
lods
leave
in
je
sub
shl
shl
imul
call
cmp
mov
out
cmc
fs
cli
and
push
mov
push
inc
cvtps2pd
mov
bound
mov
push
test
outs
ret
and
mov
xchg
xchg
imul
cmp
mov
cmps
stc
push
pushf
mov
ror
fwait
rcr
push
imul
inc
pushf
jl
cmp
inc
dec
lahf
call
shr
pop
aam
pop
mov
nop
push
sub
fdivr
push
nop
xchg
cwde
or
fmul
xchg
les
add
dec
js
sub
and
rcr
and
adc
shl
pop
inc
nop
imul
aam
jo
jle
test
stos
cmp
adc
inc
push
sti
popa
outs
outs
adc
lea
xchg
xor
push
inc
dec
push
pop
(bad)
sbb
ret
sti
out
fild
ficom
fldcw
outs
dec
adc
sbb
mov
and
(bad)
in
retf
nop
sub
add
xchg
and
test
push
aaa
inc
xchg
mov
or
out
inc
sub
pop
pop
popf
shr
out
inc
adc
call
jae
dec
add
cmp
jno
inc
xor
icebp
dec
dec
mov
test
(bad)
jo
jnp
and
xchg
pop
pop
pop
mov
std
int3
aaa
repz
std
es
movs
jecxz
inc
dec
jecxz
jmp
out
mov
push
push
or
pushf
je
cmp
jbe
mov
jge
mov
fild
out
jl
xchg
movs
lods
test
or
xor
loopne
loope
retf
cmps
add
sahf
(bad)
or
(bad)
in
pop
fild
sbb
mov
inc
fild
bound
inc
fisubr
or
push
push
in
push
int3
bound
cdq
rcl
mov
or
jnp
aaa
xor
icebp
arpl
xchg
ins
leave
out
in
ja
dec
test
(bad)
dec
cmp
jl
retf
fbstp
mov
out
repz
sar
jecxz
add
in
ja
pop
fisubr
sbb
jbe
and
ficomp
push
mov
or
and
push
adc
push
in
mov
movs
dec
dec
cmp
iret
mov
or
cdq
jmp
mov
loope
cmps
ror
sahf
repz
pushf
sbb
or
cmp
sbb
sbb
aas
pop
pop
dec
shl
out
(bad)
les
sbb
add
pop
test
fs
pushf
rcl
mov
push
cmp
bound
inc
sub
popa
inc
cmp
icebp
jmp
cmp
jl
aam
(bad)
fcomp
cmp
in
xchg
sub
(bad)
adc
cmp
cmp
add
rol
cmp
push
and
rol
jmp
adc
sahf
stos
xchg
movs
or
sbb
cmc
retf
or
xchg
mov
or
popf
(bad)
pop
leave
xchg
xchg
xor
adc
imul
loopne
not
jbe
push
cmp
rcl
push
add
and
div
out
retf
out
xchg
mov
lods
arpl
movs
dec
sub
ror
(bad)
imul
inc
push
adc
push
ret
sti
inc
cdq
cmp
repnz
jb
and
fist
fiadd
mov
jb
arpl
pop
imul
loopne
adc
cmp
sbb
adc
xchg
xor
adc
jb
mov
cs
add
add
jl
sbb
imul
jmp
neg
test
sbb
xor
cs
outs
pop
xor
jge
pop
retf
bound
cmp
mov
into
sub
aas
ins
sub
daa
fisttp
out
dec
repz
stc
cmp
pop
jo
ret
dec
fist
sbb
mov
add
mov
into
mov
jbe
cmps
pop
pop
fistp
cli
gs
enter
adc
push
xchg
ret
aam
mov
pusha
and
sbb
sub
movs
sub
mov
pop
std
std
mov
je
inc
ds
nop
repnz
call
mov
adc
mov
fistp
inc
icebp
inc
out
jbe
not
scas
push
mov
js
call
in
mov
add
data16
fadd
scas
jmp
inc
pop
and
mov
fwait
push
add
add
xor
sub
sbb
loopne
mov
sbb
xchg
and
dec
adc
adc
nop
mov
mov
mov
and
ins
push
inc
add
cmp
xor
jns
(bad)
mov
fwait
scas
out
daa
shl
add
cmps
cmps
xor
enter
lahf
mov
or
push
pop
mov
xor
inc
shr
cli
sbb
mov
push
add
jl
imul
cli
and
cmp
cmp
xor
call
js
aad
rcr
push
stc
out
xor
sub
pop
test
test
in
mov
jl
sbb
or
mov
or
in
xor
adc
(bad)
xor
fld
mov
dec
lahf
mov
jge
xor
or
movs
cmp
push
retf
sbb
lds
fnstenv
(bad)
sub
icebp
bts
(bad)
xor
mov
sbb
sub
loop
xor
xchg
push
pop
xor
pop
jecxz
ret
ja
xor
mov
std
jmp
inc
sub
xchg
ret
pusha
loop
lock
push
xchg
push
mov
push
inc
(bad)
call
dec
jb
in
jno
xchg
ja
js
xor
jae
xlat
push
or
repnz
es
aas
call
push
pop
or
lock
push
outs
add
xchg
(bad)
pushf
pushf
cmp
das
mov
jecxz
ror
jg
mul
xchg
jnp
or
mov
xchg
mov
aas
cmp
into
iret
dec
cs
int3
nop
shl
pop
and
test
inc
test
and
in
ss
mov
mov
or
test
xchg
push
stos
and
out
xchg
adc
adc
push
hlt
xor
mov
cmp
iret
call
fsub
push
inc
scas
enter
scas
mov
bound
sub
xor
pmaddwd
out
dec
ret
inc
or
xchg
cmp
pop
call
hlt
cwde
into
push
mov
jmp
iret
movs
or
adc
inc
mov
fld
mov
dec
add
setnp
mov
aad
(bad)
cld
xor
pusha
ss
test
cmp
comiss
sbb
pop
push
adc
and
cs
add
add
jo
popa
push
cmps
mov
ret
hlt
pop
add
push
lea
popf
int3
sub
adc
(bad)
(bad)
xor
adc
int
push
bound
fsub
loop
jg
adc
xchg
cmp
lods
dec
adc
pushf
mov
pop
std
out
enter
pop
xor
stos
enter
mov
add
mov
bound
dec
pop
pop
inc
mov
push
add
and
jmp
(bad)
sub
(bad)
adc
inc
push
jmp
movs
call
retf
mov
mov
mov
xor
add
ds
stc
adc
icebp
and
cmp
outs
dec
sub
jp
xor
int3
cmps
fiadd
push
dec
test
outs
addr16
leave
jp
mov
ja
push
or
retf
test
mov
add
mov
cmp
imul
icebp
push
loop
aas
sar
mov
mov
push
push
pop
xchg
pop
ror
dec
sub
cli
pop
sbb
push
leave
movs
(bad)
sub
cmp
inc
mov
or
add
adc
mov
mov
jmp
push
jle
mov
pop
daa
cmp
sub
arpl
sbb
(bad)
cwde
movs
outs
xchg
hlt
aaa
imul
icebp
movs
imul
(bad)
inc
jae
rol
cld
popa
xchg
inc
jg
sbb
jae
les
sub
(bad)
cli
xor
aaa
in
xchg
or
mov
push
jmp
mov
cdq
push
push
rcr
cs
cmp
jecxz
shl
dec
fisttp
push
call
add
jae
sub
inc
sar
push
add
jg
bound
push
ror
shl
cmp
cwde
or
adc
mov
mov
aad
das
cdq
enter
mov
mov
sbb
adc
es
push
cld
lods
dec
adc
mov
dec
or
add
inc
jns
sub
sub
and
sbb
xchg
fcmove
in
inc
inc
dec
xchg
cmps
cwde
sbb
sbb
movs
popf
sub
mov
xchg
popf
cmps
inc
std
pop
(bad)
xchg
clc
lahf
and
ret
fistp
dec
or
xor
xchg
gs
mov
or
adc
xchg
inc
dec
test
push
dec
mov
mov
xlat
jne
xchg
sbb
jne
jp
add
xor
out
loopne
int3
hlt
inc
aam
jp
mov
push
jl
pop
or
into
adc
jle
mov
xlat
pop
out
enter
sub
loope
ret
mov
push
(bad)
hlt
cmp
adc
scas
push
sti
mov
sub
mov
push
sub
dec
retf
lock
xlat
dec
cmp
mov
int3
in
sbb
mov
call
or
hlt
push
ret
mov
push
mov
in
push
cmps
mov
popa
mov
mov
push
mov
fld
inc
sbb
in
dec
(bad)
dec
xor
mov
inc
retf
retf
mov
cwde
mov
dec
and
imul
ds
iret
call
jge
shl
pop
cmp
jo
pop
cmp
cmp
mov
repz
inc
pop
aam
sub
inc
xor
outs
mov
sub
rcr
push
call
sbb
sbb
dec
or
and
lds
jno
in
xor
aas
pop
imul
sub
nop
push
cmp
(bad)
jmp
int
mov
xchg
fwait
jl
jg
push
aas
(bad)
push
mov
shr
ins
and
icebp
push
loope
cmp
cmc
popa
rol
ret
cli
stos
dec
shl
(bad)
pushf
inc
lods
push
sub
sub
lds
pop
xchg
jmp
(bad)
mov
mov
inc
dec
mov
jmp
push
pop
in
fwait
(bad)
mov
cmp
retf
cmp
jno
cdq
dec
push
push
push
cwde
and
push
xor
xchg
mov
imul
or
int3
in
jge
cli
and
xchg
or
cmp
(bad)
out
out
mov
xor
mov
add
mov
inc
sbb
daa
aas
aaa
repz
jns
dec
pop
adc
xchg
sbb
je
int3
push
or
clc
stos
mov
and
mov
jne
leave
fcmovnu
mov
lods
stc
mov
gs
adc
mov
mov
push
sbb
and
in
mov
sub
or
adc
or
das
cmp
inc
adc
loope
pop
bound
cmp
lea
sub
push
popf
lea
push
not
and
loopne
shl
push
jg
popf
sbb
mov
jae
sub
jne
(bad)
add
push
xchg
xchg
call
out
outs
loope
dec
xchg
test
es
dec
and
repnz
aam
movs
add
and
scas
pop
popa
pop
stc
jecxz
jae
mov
mov
fstp
cs
fistp
enter
and
in
xor
fmul
add
in
xlat
mov
add
shl
push
cmp
popa
add
dec
sub
and
or
adc
ds
out
scas
jbe
xchg
inc
jns
popf
(bad)
icebp
dec
push
jne
jmp
or
jmp
and
cld
fbstp
aam
add
add
cmp
pushf
movs
hlt
ins
je
repz
dec
xchg
sar
cmps
ror
outs
sub
ret
or
add
mov
cmc
movs
inc
xchg
test
in
test
sub
jg
aad
das
shl
add
ss
pop
daa
add
out
jo
xchg
jnp
mov
sbb
(bad)
arpl
idiv
aad
push
sbb
sub
in
sbb
cmps
aaa
mov
jbe
daa
jnp
pop
mov
cdq
sub
and
xchg
lahf
cmp
cmp
jb
cmp
inc
xlat
cmp
xchg
call
mov
icebp
and
sub
add
mov
cmp
push
outs
call
hlt
shr
int
push
cmps
add
mov
xchg
ss
call
or
sar
mov
lock
jmp
popf
push
lea
dec
bnd
add
imul
repnz
out
push
lea
jne
enter
cwde
cmp
es
pop
push
pop
sbb
int3
mov
xor
int3
mov
mov
mov
pop
pop
call
pop
cmps
jno
lods
in
daa
dec
pop
fiadd
inc
cmc
ins
test
lods
sbb
test
repnz
clc
dec
popa
das
push
push
fdiv
rol
mul
jae
cmp
into
jp
lods
push
pusha
dec
pop
cmp
push
jecxz
mov
cmp
out
cmp
cmp
mov
leave
push
mov
mov
movs
mov
xor
movs
les
add
xchg
mov
inc
adc
mov
scas
push
sub
sbb
dec
cmp
or
jbe
mov
adc
ins
popa
xor
mov
leave
mov
mov
mov
xchg
icebp
mov
mov
push
std
cmps
sub
and
retf
call
mov
jmp
add
sbb
fstp
retf
pop
pop
and
jb
cmp
fst
xlat
fld
aad
out
cmp
mov
mov
pop
sub
mov
or
sbb
push
push
(bad)
loopne
adc
push
ret
push
enter
dec
xor
cmps
ret
lods
mov
mov
sbb
aam
jl
test
dec
mov
pop
stc
xchg
jmp
lds
js
or
cmp
enter
mov
das
adc
iret
shr
in
pop
push
jmp
or
stos
repnz
popf
and
test
scas
je
sbb
mov
call
sbb
jg
cld
jmp
mov
and
inc
add
popa
mov
pop
pusha
pop
dec
int
(bad)
jnp
mov
and
adc
lock
sub
test
mov
or
push
cmp
hlt
adc
enter
sub
test
push
xchg
sub
mov
out
out
test
stos
dec
out
xor
cmp
pop
jo
mov
(bad)
fiadd
mov
aad
test
and
jb
sti
cmp
jb
das
movs
mov
js
add
imul
jle
leave
sbb
push
inc
mov
xor
mov
sahf
sub
ds
js
pop
test
push
push
(bad)
fidivr
add
cld
loop
bound
pushf
jecxz
xor
aam
adc
xchg
in
xchg
icebp
jg
mov
clc
retf
pop
adc
ds
mov
out
call
adc
sbb
jcxz
cli
in
sbb
or
cwde
fxch
out
pop
or
mov
mov
add
cmp
sbb
adc
xlat
(bad)
jmp
sub
iret
out
mov
stos
cs
ins
rol
ss
in
fwait
scas
test
ins
mov
sbb
jnp
mov
dec
fst
lods
repnz
je
push
push
daa
lea
add
fwait
ins
sbb
dec
add
adc
in
jo
or
sub
pushf
jmp
ja
test
bound
dec
adc
popf
popa
ins
adc
stos
xchg
loop
sbb
shl
adc
xchg
mov
push
jns
(bad)
mov
retf
adc
outs
and
push
push
rcl
jmp
jl
into
adc
cmp
shr
aad
test
cli
aaa
cli
ret
sub
mul
es
mov
fisubr
ror
pop
repz
pop
pusha
mov
cwde
sbb
jb
push
mov
std
(bad)
sub
call
jp
mov
xchg
stos
jno
js
or
bound
jmp
cwde
movq
cmps
add
xor
neg
aas
xchg
icebp
inc
test
xchg
inc
jmp
sub
xor
mov
xchg
jecxz
(bad)
and
mov
xlat
sbb
jmp
mov
repz
cli
mov
div
jnp
cld
pusha
lods
stc
inc
mov
sbb
and
xor
in
jecxz
(bad)
out
or
add
enter
xchg
dec
pop
es
dec
in
(bad)
cmps
push
sbb
pop
ins
jge
adc
loop
call
pop
sbb
das
daa
lods
loop
adc
or
xchg
mov
xor
jmp
inc
ret
sbb
push
rcr
les
(bad)
test
or
adc
lds
pushf
jmp
jae
scas
sub
sbb
fst
test
pop
sub
mov
mov
xchg
sub
addr16
mov
pop
cmp
fbld
es
pop
pop
mov
dec
xchg
mov
aam
rol
jb
xchg
dec
dec
test
or
push
sbb
sub
xor
jge
inc
mov
sbb
lds
push
jno
mov
loop
add
imul
mov
mov
inc
xor
ins
pop
mov
(bad)
ror
jbe
outs
ret
jne
dec
mov
imul
cmps
(bad)
jmp
sub
push
(bad)
jmp
(bad)
and
loope
sahf
cld
repnz
pop
aaa
dec
push
adc
call
and
mov
cmps
or
retf
pop
push
mov
push
mov
ds
add
rcl
(bad)
fnstcw
retf
inc
xor
imul
push
xchg
stos
dec
stc
mov
jns
cli
mov
sub
shl
mov
mov
js
fild
sub
ret
fiadd
push
add
and
adc
xor
push
hlt
movs
push
jmp
pop
sti
movs
cmp
jns
mov
pop
ficom
ss
mov
sub
xchg
lods
outs
push
cmp
pusha
aad
imul
cmp
gs
mov
aam
dec
movs
push
dec
xor
movs
mov
sbb
or
repz
adc
sub
lods
mov
jge
das
fidivr
push
add
es
push
pop
inc
jle
lods
mov
ins
cmp
or
jns
inc
sub
mov
test
ja
(bad)
cmc
mov
pop
adc
add
add
cmps
push
push
cmp
add
mov
clc
mov
call
add
sub
mov
ja
maxps
mov
or
pop
mov
mov
stos
cld
mov
fnstenv
mov
pop
sub
aas
out
cli
push
cwde
pop
cwde
jmp
jge
push
push
xor
pop
ss
pop
lock
push
adc
aad
push
es
ret
cdq
mov
sub
mov
cdq
sub
xor
push
pop
in
xor
dec
test
mov
jnp
ret
xor
iret
and
outs
jl
push
fadd
arpl
dec
add
sahf
cmp
pusha
and
or
pop
std
xchg
popa
loope
xchg
cmp
xlat
add
out
cdq
(bad)
mov
xchg
hlt
push
mov
pop
xor
inc
add
dec
pop
pusha
pusha
push
(bad)
call
ins
ret
mov
adc
dec
nop
enter
ret
xor
mov
(bad)
mov
and
dec
jno
mov
push
dec
cmps
jmp
inc
xchg
mov
aad
xchg
cmp
sbb
jmp
pop
cli
xchg
test
push
add
(bad)
dec
and
mov
ds
ja
pop
and
pop
add
ret
(bad)
clc
push
pop
and
imul
int
movs
pop
push
gs
sbb
cli
pop
imul
jo
cmc
inc
ss
aam
dec
(bad)
xor
inc
inc
mov
es
fucom
mov
and
cli
test
xchg
xor
fnstenv
stos
or
push
aam
jl
lea
jae
lahf
mov
mov
mov
cmp
jg
(bad)
(bad)
mov
dec
test
lea
imul
std
cmps
push
lods
das
or
test
lahf
daa
dec
mov
lea
mov
call
stos
or
in
dec
icebp
sahf
mov
scas
jecxz
bound
cmp
dec
push
sar
adc
test
pop
sub
scas
sahf
jge
jmp
popa
pop
imul
adc
xor
out
(bad)
outs
dec
sub
cmp
adc
in
clc
fcomp
fdivrp
jle
iret
adc
xor
or
loope
mov
adc
cs
pop
in
sbb
push
sub
jnp
cmp
dec
push
enter
xor
add
(bad)
sar
inc
mov
test
rcr
dec
mov
xor
mov
mov
mov
pop
sub
sub
pop
push
and
push
mov
push
neg
mov
xor
cs
push
push
push
add
mov
and
push
rcl
push
add
outs
mov
mov
cmp
mov
push
push
mov
dec
test
(bad)
push
in
sub
add
push
int
(bad)
xor
mov
mov
loope
pop
add
inc
mov
and
lock
or
aaa
push
daa
jle
fisttp
dec
mov
jp
push
adc
dec
hlt
ss
sbb
ds
cs
js
xchg
xchg
inc
es
and
jne
shl
mov
repnz
mov
add
cmp
inc
int
iret
in
pop
mov
call
mov
mov
cmps
sbb
hlt
ja
xchg
gs
test
add
sbb
fnstcw
xor
mov
sar
call
cmp
and
fs
ficom
outs
dec
(bad)
jb
mov
enter
repz
in
lock
add
pop
or
lahf
cwde
mov
xor
hlt
aas
outs
out
pop
or
cmp
jmp
xor
jo
sub
sbb
(bad)
sti
jecxz
xor
or
and
mov
and
mov
imul
gs
ret
aad
fprem1
sub
test
xchg
cmp
and
add
push
mov
aad
ret
repnz
push
daa
and
test
lea
jecxz
outs
sub
push
ins
cmp
mul
cmp
xchg
ror
ss
ret
jnp
and
mov
adc
pop
cli
mov
fld
loopne
enter
out
dec
retf
and
repnz
int3
mov
aas
cmp
or
ret
int3
push
mov
sub
xor
ror
rcr
mov
inc
clc
pop
in
enter
inc
mov
out
rcr
mov
jmp
jmp
aam
retf
enter
mov
add
mul
and
mov
fs
je
cmp
cmps
addr16
into
push
pop
add
scas
in
jle
les
inc
pop
ins
rcl
xchg
xchg
push
cmp
sub
cmc
std
xor
xchg
dec
cli
sbb
fwait
jae
out
ja
bnd
sbb
das
pop
dec
pushf
loope
std
mov
and
(bad)
bound
jg
mov
jp
scas
enter
movs
movs
aad
ret
das
and
bound
(bad)
stc
push
repnz
mov
dec
lods
dec
fisttp
add
std
add
pop
aad
cs
lock
fistp
lock
mov
adc
push
call
inc
push
pusha
into
iret
mov
mov
pop
sbb
cmp
xchg
test
add
cmp
jecxz
les
daa
and
push
jecxz
mov
xor
xor
inc
aaa
xchg
mov
out
imul
add
jnp
xchg
fxch
mov
and
push
mov
xor
cs
xchg
bound
std
adc
inc
dec
cmps
inc
mov
xchg
imul
sub
aas
pop
adc
stc
push
lds
mov
ds
fstp
loopne
nop
xchg
push
dec
sti
and
enter
ja
movs
sub
cmps
aas
ss
mov
push
xlat
aam
xchg
cmps
je
lahf
(bad)
in
cmp
call
add
aad
fisubr
sbb
lock
clc
out
(bad)
cmp
sub
(bad)
test
dec
cmp
mov
stos
mov
(bad)
std
cmp
outs
fisubr
and
std
and
test
xchg
fild
scas
rcl
mov
adc
scas
mov
stc
cmp
(bad)
jmp
inc
lea
mov
xchg
push
inc
fsubr
cs
mov
setno
in
mov
sbb
pop
lock
sbb
dec
and
out
xor
cmp
jl
mov
or
pop
jge
enter
sub
jmp
xor
js
sbb
add
repnz
std
pop
sbb
sub
dec
jp
lea
inc
(bad)
ins
gs
in
lods
fsubrp
jb
or
jno
sub
and
xchg
mov
out
lods
lds
and
test
cmps
add
test
ret
loope
add
sub
jp
imul
shr
rol
into
fwait
ja
(bad)
(bad)
idiv
mov
leave
data16
add
sub
sub
sahf
out
xchg
mov
fld
push
mov
leave
sub
lods
cmp
xchg
movs
xchg
fadd
push
aas
xor
leave
pushf
stc
aas
sbb
xchg
dec
ja
mov
pop
lock
push
mov
push
hlt
pusha
push
dec
fimul
xor
data16
(bad)
in
cmps
js
sbb
sub
rcr
or
lahf
movs
cmp
out
jbe
xchg
dec
dec
inc
jno
cdq
cmp
jno
into
sub
fcmovbe
ins
popa
(bad)
and
mov
jl
pop
call
cli
inc
mov
movs
pop
mov
imul
sbb
cmovge
and
leave
sahf
fwait
sti
(bad)
loope
es
pop
add
rcl
mov
lods
sub
add
jl
inc
push
dec
dec
cmp
push
pop
repz
inc
jle
call
mov
or
inc
sbb
inc
or
movs
cmc
(bad)
out
fld
rol
mov
cmc
fwait
loopne
inc
shl
inc
addr16
mov
pop
add
cmp
xchg
cmp
sub
std
loop
xor
icebp
arpl
dec
pop
push
bound
loop
les
gs
rcl
push
jmp
ins
fsubrp
fidiv
and
sbb
xchg
lds
sbb
aaa
(bad)
and
mov
cli
push
sbb
jle
fistp
imul
add
and
xchg
add
jns
mov
ja
fcomp
push
in
mov
adc
retf
fadd
fwait
imul
xchg
ds
mov
popa
xor
cli
jge
loopne
push
rcl
push
sub
push
mov
jns
pop
in
popf
aaa
nop
(bad)
pop
and
sbb
mov
(bad)
data16
call
mov
push
fs
fcomi
cmc
jae
inc
in
and
rcr
dec
iret
cmc
add
cmc
and
mov
sti
mov
mov
cmp
popa
jnp
icebp
jmp
pop
ret
and
jl
push
mov
(bad)
out
loopne
inc
scas
mov
xchg
cmp
out
xchg
push
ins
fidivr
outs
ret
push
jns
iret
jb
and
(bad)
fwait
mov
(bad)
sti
lea
or
imul
cld
rcr
mov
je
inc
fld
inc
xor
(bad)
rol
out
ds
cmp
cmc
imul
int3
rol
jl
int
rcr
cmp
scas
add
xchg
dec
movs
add
mov
xchg
adc
push
repnz
call
fsub
js
loopne
dec
sbb
ds
aas
shl
(bad)
adc
pop
in
ins
ret
sub
sub
pop
cmp
xchg
and
push
cmp
retf
pop
inc
test
lds
dec
jge
xor
mov
dec
retf
or
aad
imul
loop
inc
movs
jns
inc
add
adc
jbe
and
(bad)
cmps
xchg
les
xchg
in
(bad)
jmp
mov
imul
ret
xor
push
sahf
adc
sbb
sar
nop
cmp
ja
cwde
add
shr
adc
cmps
dec
push
(bad)
mov
pushf
inc
js
sbb
inc
xor
pop
cmovb
jmp
loopne
(bad)
inc
cmp
sub
inc
lahf
lock
les
xlat
mov
cmp
fs
and
inc
and
pop
xchg
sar
mov
or
(bad)
mov
test
xchg
movs
xchg
shl
cmp
test
ret
ficomp
clc
or
cmp
jb
mov
dec
mov
mov
cmp
jno
rcr
adc
adc
inc
jle
rol
sbb
div
push
sbb
mov
into
addr16
je
fmul
push
shl
(bad)
das
push
call
inc
ja
cmp
sbb
push
es
imul
cmc
addr16
xchg
lods
dec
adc
pusha
jge
je
inc
sub
push
mov
dec
add
xor
cmp
sahf
das
cdq
pop
hlt
push
adc
dec
out
inc
cld
arpl
sbb
pop
mov
ins
sbb
test
in
or
cmp
adc
mov
pop
push
ficomp
cmp
dec
mov
pop
and
push
sub
dec
or
sbb
clc
add
mov
mov
call
movs
mov
(bad)
sub
je
retfw
jp
popa
push
int3
add
imul
adc
outs
cmp
(bad)
je
cmp
repz
sbb
sbb
pop
out
sub
pop
mov
jmp
pop
test
sbb
test
cdq
fmul
mov
adc
movs
cmp
ret
ja
rcr
mov
cwde
adc
inc
push
cdq
cmps
cmp
dec
ins
mov
mov
test
pop
test
or
inc
adc
pop
mov
in
in
add
mov
push
int3
retf
outs
inc
push
and
sbb
push
in
fmul
in
add
xchg
mov
fst
enter
ret
enter
repnz
loope
test
shl
dec
dec
(bad)
xchg
jb
(bad)
fcmovnu
jae
pop
xchg
mov
js
push
inc
push
adc
and
dec
in
inc
cs
mov
retw
xchg
cli
fdivr
xchg
push
adc
cmp
jmp
lods
(bad)
(bad)
fild
inc
test
fcom
mov
into
xchg
fs
mov
int3
mov
rcr
pop
cmps
and
push
pop
mov
or
lods
loop
xchg
test
cmps
addr16
sub
push
ins
sub
fwait
sbb
mov
jb
push
or
leave
mov
call
push
scas
pop
mov
mov
sub
leave
xor
popa
divps
xor
cld
ror
dec
popa
inc
shr
push
sbb
emms
add
mov
(bad)
mov
mov
jle
inc
mov
popf
out
xchg
inc
mov
cs
std
push
xchg
retf
ins
enter
rcr
js
loopne
js
jb
sub
adc
outs
in
jne
movs
inc
push
in
lahf
sti
lods
out
out
xor
outs
(bad)
les
ins
frstpm(287
and
pop
in
pop
iret
lods
jge
push
inc
enter
aaa
inc
repz
mov
leave
(bad)
xchg
push
clc
inc
xchg
daa
xchg
call
add
test
cwde
xchg
je
pop
mul
xchg
dec
sub
leave
loope
jecxz
ins
inc
xchg
mov
inc
stos
int
ins
pop
dec
xchg
pushf
sbb
mov
jns
cld
push
dec
push
imul
sub
jp
fwait
ins
retf
add
or
ds
ds
inc
mov
sub
jge
or
sub
ror
mov
mov
(bad)
cmp
jge
sbb
sar
mov
add
xchg
push
push
cmp
ss
sub
mov
jmp
mov
jne
jne
scas
mov
mov
imul
(bad)
sub
jp
lock
inc
fisub
dec
mov
add
cld
pushf
shl
mov
leave
mov
mov
test
xchg
(bad)
pop
lods
push
test
das
mov
sbb
dec
inc
enter
or
cmp
lods
adc
in
out
loope
pop
dec
xchg
jo
sti
imul
repnz
hlt
sub
inc
mov
adc
xlat
cdq
jnp
jnp
call
and
jmp
out
lahf
adc
mov
frstpm(287
or
cmps
fisttp
iret
jb
push
dec
sub
mov
test
into
inc
cmp
cwde
mov
sbb
jns
pop
movs
stc
dec
mov
sub
popa
pop
adc
sar
jmp
add
lock
mov
pop
pushf
pop
mov
pop
inc
scas
push
popa
xchg
not
push
lods
(bad)
mov
fld
fwait
xchg
fsub
inc
retf
ins
mov
lahf
mov
scas
inc
pusha
pushf
sbb
lds
or
sub
mov
push
and
das
scas
and
lods
sahf
int3
xor
shl
retf
adc
jne
cli
adc
lock
jmp
(bad)
retf
retf
sub
pop
cmc
cmp
adc
pop
pop
out
test
sbb
dec
jns
gs
add
pop
push
stos
(bad)
and
sub
mov
scas
out
mov
sbb
adc
outs
or
mov
cmps
adc
jne
scas
dec
dec
jg
adc
mov
cmp
pop
popf
int
dec
push
movs
xor
mov
hlt
sub
inc
(bad)
push
dec
cld
inc
mov
pop
sahf
cmp
out
(bad)
jle
arpl
inc
pop
outs
push
pop
xchg
popf
add
dec
ret
je
ins
push
scas
fisttp
movs
cmp
push
sbb
mov
jmp
out
es
xchg
test
(bad)
das
in
pop
mov
pop
adc
into
test
popa
mov
mov
inc
adc
jg
and
xor
fs
jnp
clc
es
mov
mov
outs
daa
push
mov
jne
test
inc
push
mov
mov
test
repz
jp
test
add
stc
pusha
imul
add
or
pop
jns
mov
inc
or
jmp
and
(bad)
mov
xor
jo
mov
cmc
jo
adc
sbb
xor
mov
dec
aad
and
sub
adc
xor
and
add
cmps
push
lock
push
xor
xchg
xchg
sbb
cli
enter
aaa
fs
cmp
xchg
arpl
inc
in
lods
lahf
xchg
dec
shr
add
add
mov
dec
leave
add
nop
jp
and
pop
icebp
fcomip
mov
call
test
xchg
popa
popf
mov
(bad)
jns
mov
in
lods
mov
cwde
frstor
(bad)
push
jmp
jns
dec
mov
push
lods
cwde
adc
in
and
inc
mov
ds
adc
mov
aas
push
retf
jg
cmps
or
mov
push
cmp
and
popf
je
sub
pop
cmp
push
cdq
lea
mov
mov
lock
dec
pop
gs
jle
pop
lahf
xchg
cmp
adc
in
cmc
dec
in
adc
xor
imul
xchg
dec
xor
sahf
inc
adc
add
les
cs
dec
and
outs
ss
fistp
leave
push
(bad)
bound
adc
push
cdq
xor
cmc
xchg
push
mov
push
sbb
cmp
dec
and
sti
add
imul
sbb
adc
inc
push
fld
je
retf
adc
movs
jb
fldcw
jmp
jp
and
cld
scas
hlt
pop
jl
jno
mov
or
and
cmp
ins
cdq
pop
sub
and
popa
aas
mov
push
mov
lahf
in
sbb
pop
cmps
jl
(bad)
cmp
adc
inc
jl
mov
sbb
jbe
xor
push
and
pop
fcomi
dec
xchg
push
mov
push
in
test
sub
ja
dec
dec
xor
jmp
loopne
pop
into
jbe
sbb
test
mov
dec
imul
jo
pop
push
int
and
dec
ret
lahf
mov
call
xchg
inc
xchg
and
pop
es
push
retf
jp
dec
lock
or
call
jmp
inc
jnp
cmp
mov
and
adc
or
dec
repz
test
xor
cmp
dec
add
inc
mov
out
mov
inc
adc
pop
inc
inc
test
xchg
sbb
mov
or
mov
fadd
add
xchg
je
xchg
in
lods
mov
mov
pushf
adc
add
jbe
scas
inc
test
scas
mov
bound
arpl
cdq
xchg
push
cld
in
push
sub
sub
(bad)
jmp
inc
loop
jne
cwde
push
cmp
jns
xchg
mov
jno
test
rdtsc
mov
in
sbb
jmp
add
aad
rcl
sbb
repz
cs
jg
cmps
movs
in
sbb
les
pop
test
jae
lds
push
sar
jno
push
add
xchg
in
stos
call
xchg
(bad)
xchg
fdivr
cwde
clc
xchg
shl
rol
and
dec
in
div
cmps
xchg
fidivr
lock
rcr
xor
fs
int
fs
cmp
ja
adc
xor
imul
aad
(bad)
loopne
call
xchg
jg
mov
push
mov
inc
jmp
cwde
adc
div
sar
push
arpl
or
jb
std
cmp
dec
fsubrp
iret
mov
jl
adc
pop
scas
add
lea
lahf
mov
mov
nop
pop
das
mov
dec
cmp
repz
push
les
inc
xchg
adc
lods
aam
daa
fdivr
sub
mov
dec
sub
jae
push
mov
mov
(bad)
leave
loopne
cmp
dec
mov
mov
jo
mov
jmp
mov
sbb
into
and
xor
mov
sbb
and
scas
test
dec
pop
jnp
dec
xchg
mov
ins
fstp
mov
push
int3
adc
fld
fwait
push
lods
pop
xchg
or
or
shr
sti
sbb
jp
repnz
mov
repnz
iret
cmp
mov
xor
push
pusha
jl
lods
(bad)
push
pusha
pop
add
adc
cdq
sub
xor
arpl
inc
in
test
fs
lods
mov
xchg
pop
fdivr
stc
test
pop
nop
lds
cmp
mov
pop
cmp
pop
ja
mov
mov
rol
jg
or
xlat
and
outs
lock
call
cmp
(bad)
mov
ror
repnz
jge
fwait
mov
adc
loop
enter
aas
jl
adc
jnp
iret
cmps
cmp
movs
sbb
jp
int3
sbb
adc
repz
sbb
mov
fbstp
adc
mov
or
(bad)
xor
mov
cmp
mov
mov
xor
test
and
sbb
or
jo
and
mov
repnz
xor
cmps
ror
xor
sbb
mov
ins
xchg
rcr
cs
sahf
xor
imul
mov
cli
loope
icebp
int
xlat
test
jle
movs
std
in
mov
pop
inc
ins
or
(bad)
cmc
cmps
lea
mov
and
iret
cmp
aam
inc
aaa
and
iret
dec
(bad)
into
mov
and
cmp
and
jecxz
outs
lock
inc
jl
sub
pop
call
dec
add
sub
jbe
nop
sub
(bad)
sbb
mov
cmp
ret
pop
pop
shl
mov
loope
cdq
ret
adc
inc
pop
jmp
jmp
push
popa
aad
cmc
movs
mov
es
sub
stos
pop
cmp
and
jp
xor
test
aam
popa
sub
shl
stos
xchg
pop
add
xchg
aas
retf
mov
sti
loop
movs
out
ins
push
stos
in
jge
mov
jno
into
adc
lea
xchg
in
mov
jge
int3
movs
(bad)
bound
loopne
inc
aam
fisub
cmp
cmp
or
lods
test
add
mov
icebp
add
sbb
pop
je
test
idiv
shl
imul
ss
xor
out
push
es
and
data16
hlt
mov
pop
add
xchg
ss
les
pop
mov
mov
retf
scas
in
jae
mov
sub
push
sar
movs
sub
cmps
inc
stc
push
imul
xor
(bad)
pop
nop
adc
jmp
leave
dec
jl
xchg
lds
cli
sbb
shl
leave
arpl
loopne
mov
pop
push
ror
adc
cdq
mov
xchg
stos
jo
mov
xchg
pop
(bad)
lds
sub
and
jle
loop
mov
mov
or
clc
not
xchg
outs
push
mov
xor
pop
scas
xor
xchg
jle
xor
cli
call
or
ror
inc
loope
add
add
or
jg
jae
daa
pop
mov
sbb
xchg
fistp
cmp
and
popf
loopne
sbb
sub
les
jnp
add
pusha
jg
add
stc
cmp
or
icebp
xlat
and
std
sbb
sub
jmp
mov
mov
stos
outs
call
mov
push
fwait
stc
dec
inc
(bad)
lahf
inc
adc
push
scas
adc
or
inc
repnz
sbb
push
loopne
cmp
jecxz
stos
enter
les
fdiv
iret
movs
and
cli
cli
imul
xor
dec
stos
cmp
mov
std
std
(bad)
daa
icebp
push
enter
rol
sbb
sub
cmp
inc
aad
cs
mov
imul
mov
movs
shl
sbb
xor
in
test
shr
fdiv
mov
cmp
fidiv
pop
rol
dec
mov
bound
mov
xchg
jecxz
iret
adc
pushf
imul
mov
div
push
ret
jne
in
xchg
stos
ret
inc
scas
mov
inc
add
loopne
mov
adc
sbb
push
into
loope
test
inc
fnsave
loope
int3
test
xor
dec
iret
sub
leave
and
inc
ja
sub
lock
stos
mov
ds
fistp
push
add
adc
ror
xchg
xchg
inc
sysexit
mov
xor
mov
or
pop
sahf
xlat
mov
mov
cmp
es
js
mov
ja
cmp
icebp
imul
xchg
mov
dec
sbb
dec
cmp
xlat
or
dec
xchg
mov
test
mov
sub
test
dec
test
icebp
leave
mov
loop
cwde
sbb
dec
inc
mov
xor
imul
in
aaa
imul
adc
das
outs
pop
fild
in
mov
xchg
cmc
test
cmps
xchg
sar
inc
jl
bound
dec
ins
fistp
push
out
cmp
add
mov
aaa
call
(bad)
not
outs
adc
sbb
or
lock
out
retf
jge
pop
sbb
cmp
cmps
fnsave
(bad)
stos
or
push
jmp
jecxz
fcomp
xchg
pop
xchg
xchg
loope
jecxz
push
inc
pop
arpl
mov
repnz
ja
jle
inc
mov
in
cmps
push
ds
les
pop
jg
hlt
lods
(bad)
push
stos
aad
mov
fcom
into
sbb
mov
jecxz
cmp
in
add
and
jbe
dec
sub
sub
cdq
push
aaa
inc
mov
sub
mov
or
cmp
xlat
add
sti
push
imul
lea
popa
xor
xchg
clc
sub
shl
jae
pop
sub
popf
nop
xchg
push
inc
dec
movs
adc
adc
jl
pop
adc
movs
rcr
dec
cs
loopne
jae
(bad)
and
mov
mov
mov
cmp
or
inc
push
repz
xchg
push
dec
movs
xor
mov
fdiv
aam
mov
push
(bad)
or
mov
xchg
pop
jmp
mov
cwde
mov
push
mov
add
inc
fistp
sbb
mov
cmp
aas
sar
enter
xchg
sahf
mov
jae
lds
stos
in
mov
inc
jle
mov
sbb
out
pop
mov
out
mov
ret
and
in
outs
cmps
in
test
jnp
(bad)
enter
push
inc
shl
int
in
aam
dec
cmp
xor
add
(bad)
push
retf
jae
push
call
jp
aaa
push
and
dec
lods
mov
push
test
jecxz
in
dec
mov
lds
inc
stc
pop
xor
out
addr16
sub
fidivr
sbb
repnz
and
dec
mov
adc
call
mov
es
lock
mov
fiadd
inc
mov
mov
xlat
cdq
out
lds
xor
jge
cmps
inc
jno
mov
sub
inc
enter
fldenv
cmp
test
dec
mov
outs
(bad)
(bad)
inc
push
aam
fimul
pusha
push
push
push
xor
push
push
jge
pusha
outs
adc
xchg
xor
push
xor
loope
dec
xchg
jns
add
mov
inc
gs
lock
mov
outs
div
loopne
shr
cdq
push
sub
xchg
sar
dec
sbb
les
and
or
mov
mov
scas
add
xchg
add
ja
jnp
inc
dec
or
fild
int
stos
pop
mov
push
pop
inc
stos
arpl
inc
mov
cli
rcl
push
rcl
pusha
dec
xchg
ret
add
add
nop
retf
retf
push
push
or
pop
cmp
dec
aas
aas
retf
sbb
in
fild
jle
pusha
xchg
jp
mov
imul
push
loope
lods
into
popf
cdq
adc
shr
das
or
dec
inc
imul
arpl
int3
mov
or
int3
pop
jnp
jecxz
push
jl
cmp
and
pusha
pop
pushf
ins
(bad)
fcomp
dec
xor
push
jns
pop
daa
push
or
daa
jecxz
imul
ins
dec
cmp
in
addr16
xor
movs
cld
cdq
dec
pop
gs
inc
add
inc
sbb
or
loope
hlt
or
and
loopne
pop
nop
(bad)
fs
add
mov
out
xchg
pusha
mov
bound
out
popf
out
(bad)
sub
les
imul
lahf
sbb
addr16
mov
(bad)
aad
cmps
stos
sub
ins
mov
push
lahf
push
sbb
mov
repz
sub
sbb
mov
in
xchg
xor
js
(bad)
in
out
inc
sbb
shr
test
loopne
push
retf
push
mov
cmp
inc
inc
pslld
test
mov
not
xor
lahf
pop
and
ret
(bad)
xchg
and
and
xlat
adc
xlat
sbb
xchg
popf
pushf
mov
fwait
rcr
iret
xor
out
scas
loop
ja
and
loop
xor
push
jae
(bad)
pop
cmps
addr16
repnz
cli
or
(bad)
popf
adc
lahf
xchg
mov
mov
sub
scas
popa
lock
fld
cmps
cmp
test
repnz
and
out
sti
(bad)
pop
lahf
jp
inc
sub
sbb
sahf
repz
fsubrp
and
(bad)
fdiv
inc
and
mov
lods
or
je
sahf
xor
cmps
jecxz
jo
jp
mov
imul
stos
dec
jb
retf
ins
shl
sbb
je
(bad)
jns
push
ja
in
sbb
call
xlat
les
xor
fisubr
in
arpl
jae
(bad)
pop
fcmovnu
movs
jb
pop
daa
rol
dec
pop
or
push
iret
sub
sbb
mov
xor
xor
pop
inc
push
cwde
dec
inc
mov
inc
int3
sti
je
sbb
sub
nop
xor
lods
cld
cmp
push
xor
mov
cmp
mov
dec
xor
push
ret
stos
data16
test
pop
pop
xchg
pop
shl
cli
mov
dec
dec
xchg
push
xor
lods
leave
xor
sti
dec
clc
or
psrad
ins
test
sbb
jge
jmp
movs
add
push
jmp
sub
call
cmp
sbb
mov
daa
pop
shr
movs
push
dec
sbb
jmp
mov
and
int
add
das
mov
jge
imul
fdivrp
rcr
enter
mov
ret
push
mov
mov
fnstcw
push
cwde
call
jbe
add
or
stc
daa
sar
cmp
mov
or
dec
adc
(bad)
aad
test
or
data16
xchg
in
inc
shr
mov
mov
aam
ror
mov
fs
mov
mov
mov
mov
pop
retf
call
sbb
in
jecxz
mov
dec
mov
cli
stc
push
into
xchg
pushf
fwait
sbb
inc
aaa
mov
jg
cmp
enter
dec
add
xor
jne
sbb
scas
repnz
xchg
retf
mov
or
ret
jb
jb
cmp
les
mov
ins
or
and
shr
aad
jae
fwait
jmp
aad
mov
mov
xlat
push
cld
and
adc
aas
mov
cmc
or
call
pop
mov
lock
addr16
(bad)
ins
mov
mov
sub
xor
push
lea
inc
aam
add
jmp
xor
out
and
adc
test
sbb
rcl
mov
mov
cmp
fldcw
loope
sub
mov
push
dec
test
inc
popa
cmp
aam
mov
fnop
add
test
fucomip
movs
(bad)
jae
loop
out
or
mov
inc
hlt
push
xor
xlat
inc
mov
les
sbb
enter
repnz
cs
cmc
div
jnp
call
mov
jno
dec
pop
and
jb
xchg
hlt
and
call
or
ss
iret
pop
add
retf
xor
mov
xchg
jg
add
js
mul
fs
rcl
mov
cmp
stos
int3
in
mov
xchg
cwde
adc
jmp
movs
mov
rcr
xchg
loop
xchg
popf
test
jle
lahf
dec
pop
test
xchg
ins
sahf
and
mov
jae
jp
sub
jle
ins
sub
xor
dec
outs
xchg
pop
or
scas
adc
xchg
and
out
popf
loopne
hlt
test
std
dec
add
loop
inc
push
iret
lods
pop
sbb
loop
xchg
out
mov
push
ja
scas
dec
sub
ror
mov
hlt
xchg
dec
dec
or
add
xchg
fs
mov
dec
in
or
cmp
lods
repz
xchg
push
ins
push
dec
retf
dec
dec
mov
add
xor
retf
fwait
push
sbb
mul
push
and
dec
imul
loop
sbb
mov
int
ja
retf
movs
(bad)
xor
lock
and
popf
hlt
neg
repz
jmp
fisub
aaa
repz
loope
fadd
sbb
ja
inc
adc
stos
mov
push
ret
daa
mov
cmc
outs
fisttp
or
mov
push
inc
pop
repnz
sti
pop
(bad)
fisub
sahf
mov
mov
daa
repnz
jae
jae
stos
stos
mov
xchg
cld
push
mov
sub
add
jg
cld
mov
in
and
dec
leave
mov
or
test
test
pop
mov
add
fstp
mov
or
mov
sbb
dec
stos
push
sbb
popa
cmp
ins
std
pop
out
jg
add
xor
mov
cmp
js
pop
or
pop
ret
int3
push
test
mov
outs
adc
pop
adc
cmp
pop
jmp
and
imul
xor
(bad)
lock
jp
hlt
push
push
and
imul
xor
int
inc
aaa
xchg
xor
jb
out
dec
test
jnp
ret
mov
push
and
jnp
push
cwde
imul
pushf
and
mov
xchg
cmp
retf
sbb
inc
add
(bad)
in
mov
or
and
add
dec
jmp
ret
loope
and
rol
shr
jg
popf
dec
leave
and
out
jb
stos
fstp
out
mov
mov
leave
fdiv
nop
dec
ret
cmp
mov
call
das
inc
mov
jge
(bad)
fist
xchg
add
cwde
mov
es
fsub
clc
rol
sahf
aam
daa
icebp
movs
cmps
int
test
cmp
pop
lock
test
cs
adc
push
mov
cmp
es
inc
sbb
jno
out
stos
mov
mov
jl
aam
cmp
mov
cmc
shl
xor
pop
outs
and
outs
gs
fdivr
mov
daa
out
repz
outs
fsubr
fnstcw
cdq
jecxz
xor
adc
and
mov
call
mov
xlat
and
pop
rcl
cmps
sub
inc
mov
mov
or
add
movs
adc
xor
inc
repnz
mov
rol
out
mov
mov
jg
push
push
jmp
mov
(bad)
cmp
into
mov
jle
inc
popa
(bad)
cmps
dec
adc
jp
les
stos
sub
xchg
pop
push
sahf
pop
fwait
popf
dec
aad
out
leave
pop
push
sahf
loope
in
push
data16
std
mov
inc
rep
pop
inc
add
popf
mov
es
or
or
(bad)
std
dec
pushf
aad
fcmovne
(bad)
jo
cmp
sub
push
cmp
inc
xchg
jmp
jle
or
sti
addr16
fcmovne
int3
inc
and
pop
inc
(bad)
mov
ficomp
mov
out
sub
fcom
out
push
je
sub
and
outs
sbb
mov
cmovbe
sub
and
xchg
clc
scas
cmps
or
add
fwait
add
mov
rcl
push
push
rcr
xor
adc
mov
enter
outs
ds
test
jg
cmps
outs
xor
cmp
sub
inc
daa
cmp
dec
(bad)
adc
or
mov
jbe
test
cld
int
int
dec
jae
sbb
data16
(bad)
lods
mov
clc
push
jae
(bad)
cli
inc
dec
jle
and
nop
iret
stos
inc
push
ror
or
mov
xchg
pop
mov
mov
retf
xor
jp
xchg
ja
mov
xlat
push
mov
inc
out
xchg
dec
add
hlt
fwait
ins
lahf
jb
pop
and
rcl
jns
lea
scas
fild
gs
and
call
add
fnstcw
jns
popf
jb
pop
fisub
(bad)
imul
sub
test
or
cmp
add
clc
fcomp
adc
jo
in
out
les
and
stos
cmp
dec
xchg
enter
in
scas
jb
mov
adc
jns
aas
enterw
mov
jae
sbb
add
shr
mov
cwde
and
dec
dec
not
cmc
dec
outs
call
popa
cmps
(bad)
dec
or
(bad)
mov
retf
test
and
enter
jbe
push
sub
add
loopne
jecxz
pushf
xlat
shl
add
add
lods
push
retf
jg
pop
sub
in
clc
int3
cld
mov
mov
retf
mov
fdiv
repnz
sub
scas
popa
inc
iret
in
jmp
mov
and
ss
inc
mov
mov
or
and
stos
leave
sub
jns
mov
pushw
shl
adc
pop
out
lea
jo
mov
or
mov
bound
fst
daa
sub
xor
imul
ret
repnz
test
inc
pop
aam
fisubr
imul
call
enter
mov
repz
jl
mov
mov
aas
mov
push
out
jmp
loop
xor
(bad)
scas
jae
bswap
outs
test
xchg
cwde
or
sbb
pop
jno
push
push
push
pop
into
test
into
mov
and
mov
aam
por
pushf
loop
dec
loop
adc
and
push
scas
add
xchg
int3
dec
das
push
jmp
shl
shl
imul
inc
sub
leave
jbe
gs
in
mov
sub
shl
imul
not
retf
adc
scas
sub
lock
cli
loopne
popf
dec
push
shr
sbb
jmp
cmc
int
out
adc
sub
int
sbb
fisttp
stos
jne
mov
daa
sbb
(bad)
jmp
and
adc
inc
mov
add
fstp
(bad)
sahf
or
mov
xchg
dec
cs
inc
mov
pop
dec
mov
into
imul
jg
pop
retf
ficomp
fnstenv
lds
mov
and
ins
and
fwait
jg
fbstp
and
aad
push
das
push
test
xchg
jae
in
sbb
test
aad
ja
sub
sbb
xor
mov
sbb
xor
cmp
stc
icebp
dec
fwait
xchg
dec
pushf
dec
test
ret
inc
mov
popa
into
mov
and
adc
mov
dec
adc
mov
sub
test
xchg
xchg
push
inc
jb
sar
add
ja
outs
pop
xchg
or
gs
test
jb
mov
xlat
(bad)
jmp
add
sub
pop
xor
and
loop
pusha
add
push
arpl
xor
push
sub
add
inc
retf
repnz
(bad)
stc
mov
xchg
push
popf
outs
int
outs
xchg
and
mov
int3
push
lods
jno
ds
jle
in
mov
pop
mov
mul
stos
int3
dec
dec
xor
les
cmp
(bad)
aas
mov
adc
loopne
xchg
in
(bad)
pop
xchg
shl
jmp
mov
sahf
or
jbe
xor
xchg
cdq
scas
into
dec
pop
xor
stos
icebp
jge
data16
push
ja
imul
pusha
les
fnstcw
std
movs
jbe
inc
lock
mov
(bad)
inc
ins
sub
and
test
(bad)
dec
adc
pop
bound
pushf
xchg
and
(bad)
mov
xchg
adc
mov
pusha
pop
mov
dec
out
add
fsubr
mov
or
jle
adc
add
cmp
add
cmp
movs
div
dec
iret
cs
xchg
fisttp
mov
(bad)
and
adc
lods
call
mov
or
push
or
xlat
in
or
jne
xchg
leave
xlat
mov
retf
mov
aam
fnstsw
(bad)
adc
add
(bad)
inc
jae
xor
cmp
mov
push
and
ds
scas
dec
lock
scas
nop
lds
dec
lods
ret
stos
aaa
cmp
aaa
or
pusha
inc
idiv
inc
pop
pushf
into
es
sbb
les
sbb
pop
add
imul
add
outs
leave
retf
add
aas
stc
test
mov
mov
pop
mov
cs
pushf
add
aaa
test
rol
add
sub
and
outs
dec
mov
xchg
sub
aaa
imul
and
mov
mov
dec
ror
xor
inc
pop
adc
xor
iret
sbb
mov
int
fistp
push
cmp
add
dec
mov
push
jg
or
fbstp
or
repz
inc
lea
int3
inc
sbb
test
in
iret
sbb
jns
out
lds
push
comisd
mov
test
ins
cmps
daa
sbb
cmp
js
fidivr
std
shl
rol
push
ins
int3
xchg
mov
jl
xchg
add
add
xor
(bad)
std
inc
jb
mov
mov
or
out
jmp
mov
cmp
or
dec
jp
mov
push
mov
or
and
push
mov
jge
jno
pop
xor
scas
mov
test
aaa
cs
push
add
gs
fcom
mov
in
in
in
inc
xor
je
add
daa
jecxz
pop
into
aaa
sbb
(bad)
test
xor
loopne
and
sbb
xor
jle
xchg
ins
push
adc
in
or
imul
mov
nop
icebp
stc
scas
or
adc
push
jne
cs
leave
mov
loopne
sub
mov
cmps
loope
arpl
lds
cs
xor
inc
xchg
icebp
adc
aad
cmp
push
lahf
sbb
inc
cmp
mov
pop
pop
or
call
xlat
cs
jge
dec
dec
jns
gs
in
inc
xchg
xchg
das
mov
out
mov
inc
(bad)
and
jge
push
in
enter
jmp
adc
push
push
js
aad
inc
jb
ffreep
(bad)
ja
shl
mov
(bad)
test
(bad)
jecxz
xchg
popa
into
ret
add
out
mov
int
call
cwde
sub
nop
fcomp
sbb
pop
xor
push
popf
clc
outs
ret
es
mov
mov
and
mov
jmp
pop
fwait
add
jo
lahf
ins
pushf
lods
movs
sbb
call
push
js
push
dec
jl
inc
imul
mov
test
repz
mov
adc
xor
dec
call
fisub
xor
mov
mov
sti
dec
mov
out
daa
pop
inc
jb
pop
sbb
fnsave
sub
jl
dec
dec
and
push
add
les
push
cmps
jg
shr
sub
pusha
adc
sub
repnz
sbb
and
popf
xchg
add
rcr
popf
fwait
loope
mov
shl
jbe
mov
fwait
in
pop
mov
(bad)
iret
mov
jnp
jl
pop
stc
std
cmp
loop
add
mov
mov
stos
int3
enter
push
mov
adc
(bad)
sbb
mov
xchg
das
cmp
dec
and
clc
scas
or
lahf
mov
dec
lea
loope
fstp
jb
into
push
(bad)
or
cmps
sub
push
dec
inc
mov
pop
jmp
xchg
out
jmp
mov
mov
jo
pop
cmp
test
cmps
inc
cmp
add
dec
and
data16
into
neg
add
fdivr
mov
jnp
mov
jb
lock
ret
pop
loopne
sbb
fs
(bad)
inc
and
repnz
push
scas
fbstp
xor
or
sub
sbb
pop
std
inc
out
sub
stos
dec
cmp
mov
dec
mov
or
xchg
dec
jbe
mov
push
repz
inc
adc
mov
mov
ficom
outs
or
arpl
dec
cli
dec
push
mov
adc
sbb
enter
pop
inc
mov
imul
jmp
inc
cmp
add
cmp
jo
mov
push
push
(bad)
cmp
daa
(bad)
jnp
sbb
cmp
xlat
sub
mov
(bad)
cwde
cs
sbb
jo
or
push
mov
or
dec
sbb
cmp
jne
inc
lea
out
jmp
movs
mov
sub
sbb
mov
call
mov
cmp
ret
in
jp
sbb
js
push
adc
fs
push
or
jle
in
test
repnz
in
ret
pop
jecxz
in
ins
call
mov
sbb
cmps
sbb
mov
fwait
out
cmps
scas
xchg
aaa
and
jmp
mov
stc
jo
lahf
cld
push
add
out
inc
hlt
or
mov
mov
jbe
cdq
inc
pop
jmp
and
test
cmps
mov
jecxz
(bad)
jae
dec
adc
hlt
nop
bound
push
test
xlat
pop
je
push
jbe
(bad)
cs
scas
ja
dec
out
aad
hlt
ins
(bad)
jge
or
or
cmp
scas
out
stos
leave
retf
imul
repnz
dec
push
or
or
movs
and
inc
clc
iret
stc
fs
push
hlt
mov
and
and
and
push
dec
dec
or
xor
scas
xor
(bad)
push
clc
mov
std
fxch
xchg
jle
neg
xchg
lock
pop
push
mov
cmp
cmp
shl
xor
in
call
jge
or
sahf
xor
fadd
dec
jg
aas
xchg
mov
shr
mov
clc
cld
adc
jno
jb
icebp
or
arpl
sub
and
fist
pop
jle
mov
pop
mov
dec
cmps
lock
jg
frstor
std
and
ss
outs
adc
sti
stc
imul
sar
mov
gs
and
js
ficomp
jno
push
stos
add
jecxz
xchg
rep
pop
cmp
inc
lods
frstor
adc
xor
xlat
ficomp
imul
dec
mov
(bad)
js
xchg
mul
stc
lods
mov
xchg
aam
sar
cmps
and
push
int
and
fmul
xlat
repnz
mov
cdq
sub
retf
dec
or
dec
out
mov
les
pop
mov
cmc
data16
aam
ret
lea
movs
sub
and
mov
mov
adc
mov
mov
pop
cmc
icebp
push
cs
cdq
xchg
cmp
sti
mov
push
dec
aaa
cmp
dec
xchg
ins
mov
aaa
mov
iret
mov
repnz
sub
sbb
sbb
retf
addr16
xchg
dec
popa
das
cld
rol
gs
clc
dec
es
retf
fnstsw
pop
dec
in
mov
lock
pop
sbb
iret
pushf
sub
mov
fcom
cmc
sbb
mov
popa
push
xlat
sub
lock
adc
hlt
or
rcr
mov
push
in
jns
cld
adc
call
test
xor
sbb
sbb
mov
xchg
ss
jnp
mov
or
and
(bad)
out
rcl
fdiv
inc
sbb
or
mov
mov
push
ja
clc
mov
sub
jmp
xor
stos
push
retf
fild
push
hlt
mov
mov
sub
adc
(bad)
mov
ror
setnp
or
xchg
in
mov
stc
jo
hlt
adc
fdivr
outs
jmp
pop
(bad)
(bad)
jno
or
out
adc
push
(bad)
cmc
lds
lods
jecxz
jge
mov
or
rcr
call
push
add
cmp
loop
addr16
ret
inc
rcl
mov
mov
dec
rcr
mov
mov
xchg
out
push
(bad)
xlat
push
sbb
mov
mov
mov
loop
sahf
mov
mov
aas
jnp
inc
jmp
cld
xor
push
or
xor
int
rcl
push
(bad)
mov
addr16
es
jmp
int
out
aas
or
jg
lds
sbb
mov
jmp
inc
ror
es
xchg
retf
push
mov
sub
xchg
out
mov
shr
push
fimul
data16
imul
jbe
arpl
push
sub
(bad)
inc
out
pop
dec
(bad)
xchg
mov
out
adc
out
cmps
cmp
out
jne
dec
test
pop
inc
adc
arpl
cli
inc
movs
cmp
xchg
(bad)
mov
test
or
movs
aad
imul
jle
adc
nop
call
mov
lods
pop
or
jle
jne
pop
mov
pop
inc
scas
xor
scas
into
and
stos
rcr
lods
pop
pop
sub
mov
call
call
lods
push
pop
or
outs
das
mov
call
adc
pop
loopne
cmp
sar
inc
dec
sbb
fistp
pop
mov
jg
mov
test
mov
adc
push
pop
lea
adc
jg
xchg
xor
cmps
sub
sbb
push
push
xor
scas
out
mov
loope
adc
lock
mov
cmp
retf
jnp
mov
xor
add
sar
lods
sub
std
or
dec
pop
ror
adc
inc
push
hlt
cwde
jmp
mov
ror
pop
pop
jge
push
cs
pop
sbb
stos
pusha
push
fnsetpm(287
mov
cmp
and
mov
movs
outs
and
add
inc
sahf
xorps
movs
push
push
push
test
add
daa
les
sar
inc
push
daa
dec
xor
retf
push
add
jae
(bad)
mov
rcr
pop
mov
dec
cld
mov
aas
fldcw
push
adc
ret
pop
ret
shl
int
cmp
dec
es
mov
dec
lea
sub
sub
cmp
into
test
(bad)
jge
and
loope
or
ret
stos
push
adc
mov
retf
ja
test
and
es
sbb
and
push
pop
outs
inc
xchg
and
xchg
mov
xor
out
jg
imul
ror
inc
pushf
mov
dec
xchg
mov
aam
iret
xor
ins
sub
(bad)
daa
and
daa
idiv
xor
or
jne
fistp
jne
adc
neg
mov
adc
push
adc
pop
out
push
xor
gs
sbb
inc
(bad)
mov
aaa
or
adc
scas
inc
push
mov
es
call
mov
sbb
jmp
push
xchg
lea
push
jp
sub
(bad)
xchg
call
xor
xchg
nop
sbb
fadd
iret
push
add
dec
bound
xchg
add
call
pop
xchg
arpl
stc
push
adc
enter
add
or
in
pop
mov
(bad)
shl
lods
mov
mov
das
popa
mov
sahf
jb
pop
push
scas
scas
mov
arpl
outs
out
out
int
adc
and
movs
shr
jnp
ror
push
fwait
imul
mov
jb
inc
or
stos
test
mov
adc
mov
xchg
mov
sbb
push
cmp
fwait
xchg
repz
add
xchg
xor
(bad)
push
in
mov
xor
sahf
jnp
outs
loopne
icebp
adc
fimul
cli
pop
ds
mov
stc
mov
lahf
push
and
inc
mov
call
addr16
aas
inc
pusha
mov
js
shl
xchg
and
inc
jg
daa
popf
push
stos
push
mov
aam
mov
or
out
pop
inc
repnz
cmps
fbld
std
imul
sbb
bound
dec
mov
jb
rol
add
mov
adc
cmps
nop
push
out
sbb
mov
out
inc
in
push
mov
cmps
scas
and
push
mov
test
push
int3
pop
lods
inc
ins
test
push
add
movs
dec
and
add
das
out
xchg
les
pushf
ret
xor
and
or
movs
dec
inc
out
inc
pop
(bad)
not
sub
in
je
cmp
out
mov
sub
fild
mov
xchg
shl
test
adc
jne
cmp
aam
add
mov
mov
mov
jmp
repz
rol
ja
jecxz
mov
fs
popa
lods
lea
in
ins
(bad)
sub
adc
sub
or
test
inc
or
mov
mov
das
inc
inc
pop
push
out
xor
fld
fisub
and
jg
pop
in
pop
in
(bad)
mov
lods
pop
sti
pusha
mov
jecxz
fstp
popa
pop
xor
xlat
cli
mov
int3
nop
gs
clc
retf
jns
(bad)
rcl
pushf
mov
xor
clc
and
ret
aaa
les
es
push
push
icebp
addr16
rcl
push
jge
add
jl
push
(bad)
setbe
add
add
mov
adc
dec
inc
arpl
repz
mov
mov
dec
mov
mov
jo
in
and
cmps
lahf
or
adc
loop
pop
and
ins
push
movs
fild
shr
mov
sub
xor
(bad)
push
ret
cmp
out
xchg
cli
dec
xchg
sub
mov
loop
mov
mov
loopne
int
jmp
aas
psrlq
adc
loop
xor
dec
adc
sbb
mov
pop
push
mov
mov
cld
cmps
jnp
push
es
lahf
inc
inc
pop
pop
repnz
pop
dec
pop
or
in
cdq
int3
repz
icebp
mov
mov
fstp
push
outs
popa
and
mov
add
add
pop
adc
jno
mov
or
sub
cmp
dec
sar
xchg
addr16
jns
and
sbb
cmp
rcl
scas
outs
xor
inc
push
hlt
gs
pop
pop
sub
inc
rcl
jecxz
arpl
and
out
bound
sbb
lds
mov
push
add
pop
add
xchg
loope
cmp
ja
dec
ret
push
jno
mov
cmc
stos
and
test
ficom
cmp
mov
hlt
(bad)
icebp
fdivr
push
addr16
jbe
std
jle
repz
xchg
cmps
and
fucomi
jns
jns
jp
xor
add
into
fld
sub
add
out
loop
aaa
cmp
xlat
ror
(bad)
fst
pop
push
cmp
out
movs
cdq
push
hlt
stc
into
push
pushf
shr
pop
or
cmp
es
in
xchg
pop
dec
jbe
push
jmp
in
mov
pop
pusha
pop
mov
inc
stos
inc
pushf
pop
mov
cmp
arpl
out
fwait
inc
inc
popa
xchg
test
jb
das
clc
push
mov
retf
inc
inc
sbb
out
cmp
adc
jno
dec
xchg
push
call
jb
arpl
(bad)
pop
sbb
cmp
fsub
and
stos
inc
into
mov
loopne
mov
and
(bad)
push
out
mov
push
adc
dec
mov
push
inc
aad
call
test
sub
dec
push
test
repnz
pmuludq
out
test
(bad)
jo
inc
xchg
mov
les
pushf
sahf
mov
inc
repz
aaa
in
mov
clc
inc
push
lds
jecxz
mov
(bad)
sar
or
pop
jmp
fidiv
push
or
lods
jle
inc
fild
retf
adc
int
sbb
pop
mov
mov
sub
add
sub
xchg
pop
rcl
xchg
shl
aam
mov
repnz
dec
mov
outs
lods
aas
jae
mov
cwde
xor
cmp
or
sub
inc
cmp
pop
xchg
jbe
in
out
leave
push
jg
ret
xor
xor
mov
dec
enter
int3
inc
sbb
fwait
ds
jg
jle
call
pusha
outs
bound
xor
sub
mov
adc
mov
mov
cmps
sahf
and
mov
lods
(bad)
es
mov
ins
mov
xor
data16
adc
cmp
pop
sub
adc
jge
xchg
or
xor
je
jb
mov
inc
ins
jmp
sbb
dec
xchg
das
repz
pushf
dec
mov
inc
test
jge
dec
pop
pop
cmp
adc
retf
or
push
jmp
ja
dec
dec
xchg
fld
xchg
cs
cmp
cmps
sub
inc
fs
hlt
mov
jo
imul
ds
test
clc
sti
int
fwait
ss
mov
sbb
mov
int
jno
add
pop
mov
xor
es
pop
dec
mov
rep
mov
cmp
out
adc
(bad)
in
in
jg
inc
dec
cs
push
push
fdivr
js
loope
scas
and
xchg
mov
mov
and
loopne
(bad)
in
pop
add
out
loopne
xlat
mov
shl
nop
or
pop
mov
call
pause
sub
mov
arpl
fstp
into
xor
(bad)
push
rcr
pop
pusha
out
lea
xor
cmps
sar
fcmovne
add
or
or
xchg
je
iret
xchg
xor
cmp
ja
loope
in
cmp
push
xchg
push
mov
sbb
popf
and
dec
pop
cmp
xchg
jb
xor
pop
loopne
leave
adc
loop
les
les
test
xchg
mov
ret
outs
fcomp
and
jo
xor
stc
dec
movs
mov
mov
jae
stos
addr16
dec
xchg
(bad)
mov
shr
jo
jmp
lock
add
xchg
and
in
fistp
mov
test
sbb
and
mov
pop
xor
xor
out
push
adc
ins
sbb
out
xchg
out
nop
jl
jns
sahf
jecxz
and
jecxz
jl
arpl
and
mov
xchg
mov
mov
ja
mov
jnp
xor
mov
fstp
out
xchg
mov
add
nop
mov
sbb
fucomi
jne
adc
iret
jbe
sti
dec
xlat
xor
leave
lahf
or
ret
add
out
add
xchg
cli
mov
dec
lods
call
in
ins
jne
call
gs
rol
pop
rcr
mov
inc
mov
jo
sbb
arpl
dec
inc
popf
jo
jmp
imul
cmc
cmp
pop
sbb
jns
push
shl
in
xor
call
cmp
sub
add
popw
xchg
jns
add
inc
sub
nop
pop
jle
pop
call
and
add
xchg
lds
add
arpl
loopne
lods
in
adc
and
scas
das
dec
inc
adc
or
outs
pushf
ins
cmp
xor
ja
push
fsub
loop
cmp
rcr
pop
or
xchg
les
jle
jmp
outs
add
inc
push
out
fldenv
xchg
test
fs
mov
dec
rcr
mov
stos
jl
add
inc
test
bound
jp
sbb
inc
gs
xlat
test
idiv
or
fidivr
fadd
popf
push
dec
pop
mov
inc
clc
out
lds
pop
lahf
push
stos
jp
sbb
jbe
pop
push
mov
loope
mov
add
popa
xchg
jae
inc
sub
jnp
idiv
xor
jmp
movups
pop
leave
dec
fldcw
sub
retf
cld
out
mov
add
dec
dec
sahf
imul
mov
cld
ss
out
test
sub
or
pop
(bad)
pop
or
js
sbb
jg
fwait
xchg
test
outs
repz
adc
call
mov
cmp
outs
pop
sahf
pop
repnz
jo
push
sbb
dec
pop
pop
popa
cld
rsqrtps
adc
enter
mov
mov
add
das
xchg
push
jp
add
or
mov
iret
jns
stos
sub
pop
pushf
jmp
mov
add
sub
mov
sahf
popf
js
sub
mov
jmp
popf
xchg
cdq
lock
push
(bad)
pop
inc
jno
mov
mov
and
mov
mov
mov
inc
aam
imul
mov
out
sbb
xor
sti
cli
or
(bad)
push
fs
cmc
jge
inc
pushf
sub
fnstcw
arpl
fcomip
bound
jnp
jle
xor
sbb
loop
mov
xchg
add
add
stos
add
mov
adc
mov
(bad)
add
nop
mov
stos
jge
cmp
or
sbb
sbb
sbb
ret
out
ins
pop
pop
fld
jnp
pop
fidiv
jmp
mov
sti
sahf
std
ins
jo
stc
std
cmp
cwde
ins
out
dec
scas
mov
cmp
(bad)
out
sub
(bad)
mov
mov
mov
(bad)
dec
(bad)
pop
jbe
out
sar
add
fwait
ds
dec
jmp
popa
cwde
xchg
lods
sub
in
in
(bad)
mov
icebp
jecxz
push
and
std
retf
fsubr
jae
(bad)
add
xchg
push
xor
imul
sub
jmp
inc
lods
arpl
cmp
cld
bound
aas
mov
fidiv
inc
div
and
sbb
push
mov
and
mov
add
or
ficom
jge
inc
xchg
arpl
add
sbb
mov
out
mov
stos
out
mov
or
into
jle
inc
add
push
cmp
push
and
ret
jnp
loope
int
pop
or
xchg
mov
mov
out
xor
mov
hlt
sub
add
sbb
and
out
scas
stos
es
push
jle
mov
adc
inc
pop
mov
call
jle
sub
jo
dec
in
inc
push
lods
imul
dec
lahf
scas
sbb
xor
add
xchg
lods
sub
int
jmp
mov
pusha
jo
daa
and
int
sub
(bad)
adc
inc
not
adc
dec
icebp
add
ins
icebp
shr
int
int
(bad)
jmp
push
fdivr
cdq
lods
mov
stos
adc
adc
cli
pop
ins
xchg
fisttp
inc
pop
jle
je
adc
or
cwde
push
lahf
dec
loopne
gs
cwde
xchg
adc
pop
add
and
mov
emms
sbb
xor
test
(bad)
stc
js
cmp
nop
arpl
pushf
rcl
or
mov
lds
ja
pop
mov
dec
adc
clc
fcmovbe
into
std
adc
or
and
imul
mov
sub
in
mov
lock
cmp
sbb
jnp
pop
pop
jmp
outs
inc
hlt
test
inc
cmp
sbb
cmp
jbe
mov
xchg
stc
call
test
mov
out
idiv
and
inc
je
adc
aad
jle
xor
dec
push
sub
sub
arpl
mov
push
mov
cs
sub
out
ins
mov
not
sar
fs
or
pop
jae
pop
test
jo
add
nop
shl
arpl
cmc
in
cmc
and
imul
dec
xchg
and
push
ja
adc
xchg
and
push
xor
jl
push
scas
mov
mov
aad
inc
pop
data16
sbb
sub
mov
rol
(bad)
aas
push
fisttp
lods
jo
(bad)
jmp
outs
mov
icebp
fisttp
adc
scas
(bad)
movs
push
pushf
mov
mov
mov
pop
mov
shl
ret
fild
fld
and
push
add
mov
outs
jg
push
out
cmp
cmp
xchg
mov
sbb
mov
mov
inc
jnp
ret
daa
sbb
xor
cmp
scas
push
ret
mov
xchg
daa
or
push
aaa
cdq
pop
jecxz
inc
sbb
cmp
repnz
jns
inc
int
push
push
xor
cmps
fst
push
loop
xor
pop
xor
ss
add
scas
inc
mov
outs
xor
cmp
xchg
xor
mov
cmps
js
push
(bad)
pop
(bad)
sbb
mov
hlt
fsub
jae
xor
movs
and
outs
repz
fistp
push
or
jnp
stc
test
cmp
and
inc
je
aas
das
mov
mov
jnp
retf
loopne
jnp
push
xor
out
mov
movs
pop
dec
fwait
repz
jmp
or
mov
xchg
jp
sub
aaa
xchg
adc
jno
es
movs
ins
mov
jo
sbb
test
mov
push
pop
scas
imul
pop
jp
and
loop
mov
dec
inc
popa
frstor
mov
adc
bnd
add
adc
mov
bound
mov
sub
push
aas
push
pop
mov
je
inc
adc
aas
mov
xchg
fs
or
stos
add
lea
push
popa
and
es
repz
or
adc
sbb
adc
push
mov
lods
cs
mul
mov
mov
add
dec
(bad)
cmp
lods
js
sub
jbe
es
push
call
sub
lahf
inc
ds
push
dec
xor
mov
add
inc
sub
xor
mov
int3
sbb
ja
mov
shr
xchg
jge
mov
jno
mov
lods
sbb
iret
dec
(bad)
xchg
lds
mov
gs
lock
push
mov
jb
xchg
aam
out
push
jno
jns
repnz
fld
pop
sub
sbb
in
in
loop
jge
loope
adc
xchg
dec
cdq
test
into
xlat
out
stos
add
push
xchg
pop
(bad)
jge
lds
mov
and
(bad)
mov
cmp
pop
dec
int3
mov
mov
mov
push
push
scas
and
push
lds
stc
add
(bad)
push
jle
movs
mov
mov
mov
scas
rol
fwait
clc
ins
mov
dec
pop
ret
xor
rol
clc
push
in
imul
and
jmp
add
dec
ds
add
pushf
and
cmp
sbb
push
mov
inc
adc
mov
fs
push
(bad)
(bad)
push
push
mov
push
fcom
adc
cs
data16
shl
jne
inc
sbb
enter
gs
sbb
lds
(bad)
jo
(bad)
bound
adc
mov
addr16
mov
popf
std
push
es
dec
scas
pop
sub
xor
xor
sub
out
stc
loop
cmps
dec
adc
jg
jecxz
sbb
mov
leave
push
mov
clc
(bad)
dec
inc
stos
fbstp
mov
mov
idiv
xchg
push
loope
(bad)
ins
push
xor
movs
retf
sbb
imul
or
adc
add
sub
sub
pop
div
fld
retf
push
mov
ja
icebp
ret
add
mov
(bad)
lods
imul
jnp
xor
xchg
das
ret
aas
cmps
jnp
jecxz
sbb
cmps
call
xchg
ret
pop
sbb
xor
adc
sub
fisttp
mov
xor
loop
mov
movs
jo
jns
add
inc
cwde
ret
leave
pcmpeqb
js
jg
push
cmc
pop
clc
jno
movs
in
imul
add
fcomp
shr
retf
ja
sub
imul
push
xchg
pop
sbb
mov
call
pop
ret
mov
ret
out
test
xchg
or
cmp
mov
cmps
sbb
mov
das
sbb
xor
xchg
shr
cmp
not
ss
rol
pop
call
inc
loopne
mov
pop
pop
arpl
shr
or
sub
cmc
les
adc
idiv
jecxz
cmps
inc
out
xchg
inc
cmps
out
lds
aam
in
jmp
cwde
stos
cwde
sub
jbe
sahf
sub
xlat
cs
cmp
cmp
dec
sbb
ds
bound
pop
push
xchg
dec
fiadd
sar
(bad)
cmp
sti
lods
sahf
push
retf
push
jne
adc
cmp
pop
fidivr
dec
test
add
pop
dec
mov
mov
out
sbb
xchg
not
sbb
mov
push
lods
popf
or
inc
xchg
dec
addr16
add
dec
pop
ds
jno
call
ss
xor
pop
sbb
push
jp
mov
or
adc
ja
test
ja
mov
mov
adc
stc
and
call
je
scas
mov
lods
push
rol
mov
pop
loop
mov
shr
fld
ret
cmp
rcl
push
xlat
adc
leave
xor
mov
gs
sub
call
vphaddwq
test
fnstenv
fadd
or
push
mov
jl
pop
ror
dec
dec
jmp
mov
rcl
mov
jb
cmp
outs
push
outs
xchg
lea
xchg
(bad)
fisub
repnz
mov
mov
std
test
iret
sbb
add
dec
push
push
mov
cmp
add
sbb
jo
jae
sti
push
jmp
cmp
ficom
inc
jb
outs
mov
call
lods
(bad)
push
lds
mov
inc
adc
inc
test
push
mov
fs
xchg
add
mov
outs
stos
xchg
fwait
jo
ins
ds
mov
outs
sub
(bad)
xchg
xor
jnp
jno
inc
out
xor
adc
or
mov
push
cdq
jmp
mov
mov
mov
fst
dec
int
jno
lods
(bad)
pop
add
ins
mov
mov
inc
push
out
loopne
cmp
fmul
ror
daa
dec
js
nop
sbb
pop
push
jge
(bad)
es
fiadd
inc
les
and
inc
ror
dec
jmp
dec
or
mov
repnz
inc
ja
ja
cwde
iret
lock
sti
sub
daa
pusha
inc
leave
or
lods
inc
cmp
adc
adc
fsubrp
int
pusha
loope
push
xor
pop
push
shr
test
outs
mov
icebp
aad
dec
jo
popa
push
es
iret
jns
xchg
loop
xchg
jecxz
sub
pushf
cmp
int3
xchg
push
pop
mov
mov
out
inc
sar
mov
dec
jo
dec
pop
xor
pushf
xor
cmps
cmp
sub
xchg
retf
push
mov
xchg
frstor
aam
stc
jp
dec
adc
jle
sbb
xchg
xchg
jge
popf
cmp
rcl
outs
xchg
add
retf
cld
ins
inc
mov
or
movs
pop
daa
neg
or
add
repnz
sahf
cmps
fisttp
stc
jp
xor
cmc
sbb
stos
push
faddp
and
jmp
or
aad
out
sar
xchg
mov
icebp
cwde
push
dec
gs
mov
pushf
mov
jo
push
nop
lahf
sub
dec
push
rcl
shl
std
lahf
pusha
ins
sbb
rcr
push
pop
movs
inc
cmp
cmp
repnz
pop
mov
(bad)
jmp
xor
mov
push
sbb
mov
aas
xor
sub
cmp
sbb
and
xchg
in
in
push
jmp
push
mov
push
div
(bad)
mov
out
daa
pop
xchg
mov
sub
shl
pop
push
sbb
fwait
mov
mov
inc
scas
pop
jge
mov
cmp
or
xor
or
pop
push
mov
cmp
jb
dec
loopne
or
not
ins
cmc
lahf
loope
scas
ret
pusha
call
jbe
icebp
mov
jge
or
xor
adc
jb
mov
inc
es
movs
mov
jb
nop
adc
pop
pop
mov
pop
dec
pop
xchg
dec
loopne
popa
pop
int3
sbb
scas
pushf
cmp
jbe
or
inc
mov
shl
test
push
pop
mov
mov
fst
xor
out
add
dec
cs
inc
cli
cwde
inc
nop
mov
xor
scas
inc
mov
aaa
out
leave
xchg
inc
cli
bound
and
and
and
or
jnp
ins
pop
gs
push
in
xchg
(bad)
adc
fmul
xchg
rcl
sub
ins
hlt
jne
inc
sti
and
and
inc
jg
or
cld
adc
mov
in
ins
pushf
jmp
or
loope
ret
inc
or
jo
in
in
and
test
sub
in
adc
dec
fsubr
scas
mov
jl
pushw
repz
std
mov
lds
imul
pop
mov
cmp
or
test
test
mov
sub
push
std
dec
add
pop
rcl
jae
hlt
add
xchg
das
repz
daa
jns
outs
cmc
popa
inc
xchg
cmps
and
dec
jle
data16
cdq
sbb
dec
js
pop
mov
or
inc
pop
aas
jmp
push
sti
fdiv
sahf
hlt
jmp
popa
xchg
mov
inc
not
daa
pop
daa
aaa
(bad)
cdq
sbb
dec
cli
sti
fdivrp
fisttp
retf
std
enter
mov
jnp
and
aaa
jmp
movs
(bad)
pop
aaa
cwde
ds
stos
jno
xchg
and
das
xchg
push
sbb
mov
jns
popf
pop
pop
jecxz
cld
stos
xchg
(bad)
retf
sub
hlt
and
inc
cs
cs
jg
out
or
stos
adc
sti
imul
ficom
xor
cmp
out
or
das
imul
imul
cmp
adc
les
cld
fnstenv
call
jnp
stos
mov
sbb
ret
dec
in
inc
sub
sbb
enter
push
jp
test
inc
das
inc
fldcw
adc
ret
(bad)
rol
or
mov
lea
fld
movs
jae
adc
cdq
mov
jnp
out
jmp
push
mov
mov
adc
dec
lods
mov
nop
push
pop
aad
and
sub
cmp
xor
sub
xor
xor
test
idiv
adc
sbb
push
pop
pop
data16
xchg
ds
test
cmps
lock
jge
iret
inc
mov
mov
and
pop
aaa
cmps
scas
bnd
(bad)
idiv
jp
add
push
mov
lods
out
sbb
mov
fs
fisubr
sbb
ins
inc
push
into
push
mov
cmp
dec
(bad)
fs
pop
adc
(bad)
push
icebp
adc
pop
fidivr
add
jno
or
mov
hlt
test
xor
mov
in
loop
or
icebp
xlat
cmp
dec
sub
cs
push
fisubr
jge
jmp
xor
in
xchg
cmp
rcl
stos
xchg
xor
es
xor
jmp
jns
shl
adc
out
sub
cli
pop
imul
add
adc
jecxz
adc
mov
add
cmp
sub
(bad)
dec
(bad)
fidivr
mov
sbb
push
pop
iret
xor
shl
test
into
into
sub
sbb
aad
gs
popa
test
xchg
pushf
leave
inc
jl
mov
ins
rol
mov
std
or
pop
and
aas
xchg
das
adc
ret
test
jnp
mov
xor
or
push
jg
adc
sub
mov
movs
idiv
pop
xchg
(bad)
call
arpl
adc
sar
xchg
push
fidiv
jge
mov
and
and
fnsave
or
fild
call
cmp
call
iret
sahf
xor
or
nop
mov
out
fidiv
lds
push
sub
push
xor
ins
gs
jo
loope
mov
xchg
dec
push
add
xor
mov
aad
jecxz
aad
pop
dec
push
jns
sub
mov
jb
aas
jecxz
loop
bnd
xor
enter
push
out
pushf
mov
rcr
shl
fadd
fdivr
retf
test
push
js
repz
imul
xchg
cmps
mov
leave
push
push
mov
test
cs
mov
or
std
adc
inc
outs
mov
or
dec
cmp
aad
out
test
popf
add
push
ret
push
in
sahf
lods
inc
fcomi
ss
add
test
fcom
stos
mov
jmp
das
inc
test
jb
or
je
inc
push
rcr
adc
xchg
fbstp
scas
dec
scas
icebp
or
loope
push
push
sub
and
addr16
aas
aas
out
ret
push
and
mov
fcomp
jge
stos
lea
(bad)
or
dec
mov
cmps
inc
adc
cmps
and
loop
retf
and
ss
xor
sub
pop
cmps
test
in
jnp
mov
fmul
mov
push
int3
loop
xchg
push
popa
adc
loopne
xchg
bound
mov
sar
hlt
imul
mov
mov
fdivr
ja
pop
pop
hlt
test
repnz
pop
cmps
(bad)
jne
jns
xor
cdq
mov
cld
sti
push
pushf
xchg
imul
inc
xchg
icebp
mov
pop
push
push
push
dec
push
pop
imul
lods
and
jmp
inc
or
push
sti
jne
mov
mov
or
jb
stos
xchg
add
outs
in
mov
ja
pop
jno
test
fcmovb
ds
jb
jnp
pop
push
cmps
pop
sti
mov
retf
sahf
pop
das
jecxz
dec
pop
and
jae
jmp
dec
sub
mov
test
adc
xchg
adc
outs
mov
iret
fidivr
dec
add
je
out
out
or
fmul
jbe
out
mov
pop
dec
jg
xchg
push
mov
pop
xchg
out
xlat
cmp
or
jmp
pop
sub
pop
(bad)
es
jmp
mov
ss
add
adc
in
pop
pop
xchg
adc
daa
cmps
and
jmp
mov
and
fcmovnbe
pushf
mov
adc
or
adc
mov
jae
inc
xor
or
push
dec
push
(bad)
jp
mov
inc
or
pusha
mov
outs
pop
es
push
adc
arpl
cmp
lock
cmp
sahf
pop
jno
adc
test
fmul
push
shl
mov
or
into
movs
mov
cld
pop
mov
es
push
sub
inc
test
lods
mov
xchg
not
fcomp
pop
inc
lea
dec
gs
gs
cdq
cld
xchg
push
cmp
rcr
sbb
sbb
bnd
or
mov
jp
int3
rol
mov
repz
or
inc
dec
scas
jae
call
rcl
js
xchg
dec
mov
and
or
enter
data16
xchg
loopne
nop
mov
pop
movs
jl
xchg
inc
aaa
and
xchg
mov
ror
mov
(bad)
mov
jb
jmp
or
dec
cli
retf
pushf
mov
popf
sub
mov
mov
adc
fistp
adc
xor
mov
adc
mov
sub
and
scas
mov
jl
lea
stos
mov
gs
xchg
(bad)
mov
imul
dec
push
arpl
in
pop
repnz
jge
xchg
push
xor
inc
cmc
sub
pop
clc
lds
jle
cmps
jmp
jecxz
hlt
or
jb
push
repz
out
mov
xor
repnz
push
push
aad
cdq
dec
ss
push
jl
jne
test
ficomp
outs
adc
mov
retf
inc
inc
stc
xchg
inc
in
push
mov
jb
fs
push
xor
and
cmp
sub
ins
(bad)
sbb
ins
dec
dec
sbb
aad
ret
xchg
xchg
jb
jae
ja
xlat
xchg
push
jmp
mov
repnz
sub
mov
mov
and
outs
call
inc
shl
enter
and
pop
xchg
mov
mov
fild
push
xchg
mov
ss
pop
jmp
cwde
inc
ds
scas
push
push
mov
jne
xchg
das
cmp
inc
punpckldq
or
and
sub
push
xchg
push
sub
test
jne
popa
inc
sub
jge
sub
lahf
jmp
adc
cmp
pop
sub
arpl
and
rol
mov
div
mov
ret
cmps
sub
cmp
dec
imul
sub
ja
pop
xlat
xchg
sar
test
fsub
mov
cmps
shl
sub
and
into
sahf
aad
(bad)
frstor
push
fdivr
lea
ja
mov
dec
jae
xchg
pop
pushf
cdq
push
pop
push
sbb
sub
cmp
add
outs
mov
repz
inc
cmp
xor
add
int
cwde
push
push
gs
call
mov
inc
in
enter
push
ins
outs
or
fwait
pusha
pushf
or
lods
stc
inc
inc
fdiv
lods
add
fcomp
jg
mov
xor
pop
pusha
xor
push
into
test
cmp
inc
arpl
cmps
ds
pop
xor
addr16
(bad)
shl
mov
sub
retf
jge
add
aam
stc
out
xchg
cwde
es
ror
cmps
call
test
xchg
and
fs
push
out
push
sbb
or
and
test
fdiv
push
add
outs
jg
popf
(bad)
jmp
call
add
das
loope
sub
xchg
sbb
cld
jmp
rcr
jno
les
jmp
pop
sub
and
pop
in
xchg
ja
sub
cli
mov
and
dec
and
movs
dec
int
or
into
jp
adc
jg
sub
in
jecxz
test
sbb
or
adc
(bad)
sbb
push
call
jb
dec
pop
stos
inc
mov
dec
ins
or
xchg
add
sbb
cmp
sahf
sub
sub
loopne
dec
pop
sub
in
dec
push
(bad)
daa
arpl
int
jmp
mov
inc
xor
icebp
aam
sub
mul
add
cld
les
jg
mov
jmp
(bad)
mov
hlt
push
mov
inc
xchg
addr16
fwait
xchg
or
lods
pop
xchg
nop
and
jnp
and
push
inc
and
cmp
mov
cdq
dec
and
add
nop
push
sub
hlt
(bad)
dec
cmp
test
rcr
add
inc
mov
ja
je
jae
shl
jnp
push
push
mov
mov
dec
(bad)
enter
inc
in
or
and
cdq
addr16
out
outs
mov
inc
cmp
pop
and
out
and
jnp
or
push
jbe
(bad)
cmp
jnp
dec
in
add
cmp
push
cmp
bound
cmp
cmp
shr
cmps
xchg
and
push
push
sbb
ror
xor
(bad)
popa
dec
pop
dec
cmp
inc
inc
not
push
stos
push
or
(bad)
mov
and
or
push
mov
cmps
inc
sub
push
jecxz
inc
adc
sbb
dec
adc
mov
mov
loopne
fisub
jmp
jge
cmp
push
jp
xchg
mov
mov
xchg
(bad)
rol
movs
sub
ins
xchg
enter
mov
xchg
mov
xor
mov
gs
cld
and
idiv
push
imul
lods
push
push
aaa
sub
and
and
ds
push
cmp
mov
in
gs
call
push
aas
lock
xor
sahf
int3
dec
add
fwait
clc
ja
push
shl
(bad)
aas
call
pop
sub
xor
inc
cmp
outs
retf
mov
mov
sbb
ret
imul
movs
std
adc
loop
mov
test
stc
and
mov
movs
fcomip
call
mov
jb
mov
dec
cmp
ret
jl
aam
mov
cmp
or
xchg
popa
jg
fwait
out
mov
mov
add
int
outs
aaa
dec
rep
sbb
sahf
dec
cmp
jbe
ret
dec
dec
dec
sub
aas
or
(bad)
jle
mov
mov
mov
fbstp
movs
stos
fadd
mov
rcl
pop
pop
mov
retf
not
(bad)
sub
popa
dec
sbb
mov
push
inc
(bad)
mov
push
jg
fild
and
cmp
xchg
lea
loope
pop
cmp
and
or
sub
mov
jmp
movs
adc
mov
and
adc
fld
push
ror
iret
xor
xchg
into
and
pop
xor
sub
jbe
xchg
inc
shr
dec
push
dec
js
adc
mov
int
jns
(bad)
ror
das
add
and
push
add
outs
rol
pusha
in
xchg
aaa
mov
inc
test
out
bound
cmps
cld
inc
pop
mov
push
mov
pop
cld
jae
pushf
xchg
std
ds
push
xor
or
dec
div
jb
pop
in
fwait
mov
xlat
pop
mov
mov
jecxz
pop
sub
pop
(bad)
cmp
mov
sti
(bad)
popf
rcr
(bad)
and
lods
xor
xor
es
fidivr
scas
ja
jmp
mov
mov
dec
and
aad
rcl
lock
out
imul
(bad)
pop
int3
pop
jle
stos
(bad)
cmp
enter
test
mov
or
xchg
pop
leave
in
scas
push
mov
add
rcl
sub
mov
push
call
lds
xchg
mov
fbld
ins
jo
mov
push
aad
shl
test
outs
jno
dec
pop
lahf
pusha
or
xor
mov
lods
cmps
jne
xchg
pop
or
repz
or
adc
arpl
xor
imul
in
push
in
or
jmp
test
std
dec
fdiv
shr
std
push
mov
xor
shr
sar
ror
xor
call
mov
push
inc
mov
sub
into
xchg
sub
jo
mov
inc
adc
inc
ret
repnz
and
fsubr
js
ror
pushf
push
faddp
mov
test
repnz
movs
cli
pop
retf
cld
das
push
fild
jg
ins
test
jmp
xchg
mov
and
pop
xchg
clc
test
jbe
and
hlt
push
jecxz
aad
sub
xor
push
repz
ror
mov
test
movs
sbb
xchg
add
sbb
mov
scas
xchg
adc
sahf
in
cmc
xchg
jbe
shl
push
inc
sar
not
cmp
cmp
(bad)
lock
stos
inc
aaa
push
cmps
shr
push
xor
imul
or
xchg
jge
movs
sar
mov
or
movs
sub
jmp
and
ret
add
cmp
fst
fimul
xlat
pop
mov
arpl
push
cmp
jmp
outs
adc
jecxz
movs
repnz
add
push
jg
jbe
popa
pop
adc
test
push
dec
(bad)
in
lahf
adc
popa
xor
xor
popa
popf
add
mov
xchg
imul
jo
mov
jnp
jp
fstp
clc
sub
mov
mov
ret
sub
mov
fld
xchg
ins
xchg
inc
mov
dec
pop
push
cld
inc
icebp
pop
cmp
cmp
mov
cmp
sub
mov
adc
push
div
pusha
mov
pop
xor
xor
ss
lock
push
push
out
outs
ins
fmul
popf
pop
cs
ja
mov
and
push
fwait
cmp
push
xchg
pop
ins
push
xor
(bad)
idiv
(bad)
xchg
dec
push
imul
xchg
pop
ret
(bad)
cmp
leave
in
mov
stos
xlat
cmp
rcl
xchg
sub
lahf
outs
aam
xchg
or
out
mov
dec
inc
movs
cmps
mov
lods
mov
xrelease
loop
out
jl
jecxz
jae
retf
sbb
frstor
and
mov
outs
loop
(bad)
gs
cmp
fld
pop
xchg
cmp
pop
adc
ins
add
adc
xor
sbb
imul
mov
sar
in
or
mov
xchg
outs
or
(bad)
fild
mov
fiadd
sub
ins
aam
mov
(bad)
pop
fcomp
add
add
xchg
jp
push
(bad)
pop
cmps
inc
fiadd
cdq
mov
movs
idiv
popf
cmp
sub
jl
movs
pinsrw
(bad)
xor
adc
and
out
adc
or
(bad)
mov
inc
xlat
push
daa
jnp
fcomp
dec
cdq
ret
jne
and
add
fcomp
outs
mov
ret
cdq
sub
push
fcomp
and
data16
stos
add
mov
jo
dec
add
retf
(bad)
cwde
daa
push
retf
or
(bad)
and
aad
inc
sbb
xor
retf
jbe
scas
push
lods
mov
push
push
cmp
call
inc
es
sar
add
mov
sbb
cmp
pusha
and
mov
mov
push
lahf
icebp
lods
mov
push
pop
mov
int3
inc
inc
inc
sbb
je
jl
fmul
shl
test
pushf
in
data16
mov
not
mov
cmp
sub
mov
xor
repz
sub
push
ins
add
mov
sar
shl
out
and
dec
jg
out
push
jb
xchg
shr
es
stos
push
sbb
mov
lea
inc
repz
out
(bad)
xchg
xor
(bad)
dec
xor
xchg
pusha
dec
enter
jne
fsub
push
jp
adc
ret
in
push
lods
pop
jg
pop
sahf
sbb
add
push
jge
out
ret
xchg
pop
out
or
(bad)
jp
popa
stc
xchg
jbe
inc
dec
pop
sub
mov
adc
jle
loope
jp
shl
dec
inc
sbb
out
jecxz
shr
jns
pop
sub
and
loop
call
sub
clc
adc
adc
jno
es
xchg
popa
adc
jo
adc
add
rol
jno
pop
xchg
mov
fld
add
xchg
mov
adc
dec
cli
nop
xor
pop
mov
jp
sbb
add
or
mov
mov
inc
cmps
mov
pop
adc
xchg
int
dec
(bad)
xor
pop
dec
sbb
shl
aaa
add
or
rcl
loopne
cmc
pop
sub
test
or
cwde
push
xchg
mov
(bad)
(bad)
stos
dec
or
retf
sbb
fbld
jbe
push
lods
and
out
test
adc
xchg
push
aam
pop
inc
xchg
stos
loopne
cmp
jmp
test
sbb
mov
std
push
pop
cld
mov
movs
imul
stos
aam
sbb
mov
push
dec
(bad)
sub
leave
mov
loop
neg
mov
adc
fwait
and
or
pop
fs
mov
je
jno
hlt
leave
movs
daa
sbb
jnp
ins
dec
lahf
or
xlat
cmps
addr16
cdq
push
fidiv
leave
adc
pop
adc
into
cmp
add
sbb
push
mov
sub
pop
fcomp
adc
lds
dec
retf
stos
jns
push
add
pop
adc
mov
and
and
inc
cmp
aaa
mov
call
sbb
adc
sbb
lahf
pop
imul
movs
pop
fcom
stos
xor
js
jo
aas
push
addr16
mov
and
jg
pop
xchg
adc
push
adc
add
hlt
inc
jp
cwde
fadd
shl
add
jmp
pop
dec
jns
xchg
push
in
hlt
xchg
pusha
out
mov
sbb
or
xlat
jecxz
xor
frstor
inc
inc
or
mov
add
jae
pop
outs
pop
or
push
push
in
scas
and
imul
sub
jg
cmp
ret
fmul
ds
push
test
mov
and
scas
jmp
outs
inc
mov
mov
mov
dec
movs
ss
lds
sete
fwait
loop
lea
add
fisubr
dec
fdiv
adc
mov
fwait
adc
loope
sbb
rol
data16
lock
addr16
icebp
cmps
xor
mov
loopne
pop
add
gs
shufps
and
sub
das
(bad)
cmps
std
jbe
jle
sbb
push
push
sti
hlt
xchg
inc
(bad)
pop
xchg
mov
inc
sub
fstp
inc
and
les
xchg
movs
les
(bad)
cmp
fisttp
mov
out
mov
movd
and
retf
jnp
daa
push
cmp
ja
ret
test
mov
add
test
jae
int
out
shl
mov
xor
cmc
jb
daa
imul
pop
movs
rcr
jbe
out
inc
jnp
mov
fidivr
adc
outs
xor
dec
iret
das
xor
mov
in
imul
leave
imul
movs
ja
dec
rol
sub
sub
clc
mov
xor
xchg
pop
xor
cmps
push
jnp
retf
daa
sub
in
push
das
push
add
dec
repz
xchg
je
rol
ret
and
mov
xor
push
fisubr
and
imul
push
push
dec
in
mov
push
fs
retf
xor
iret
neg
pop
mov
icebp
movs
enter
jae
ja
das
and
lock
scas
arpl
imul
nop
dec
jbe
iret
scas
movs
jbe
mov
xchg
ins
inc
(bad)
rol
call
mov
fprem1
mov
cmp
and
mov
xchg
mov
jns
and
mov
iret
mov
dec
fidivr
and
push
cwde
cmp
jle
(bad)
addr16
or
adc
sub
call
out
aaa
or
shr
fisub
sbb
pop
jecxz
sub
cld
push
push
jo
(bad)
in
(bad)
ret
adc
push
xor
aaa
retf
jno
push
outs
push
sub
les
dec
loope
das
mov
xor
push
jo
daa
mov
(bad)
and
jl
fldenv
pop
fcmove
arpl
jno
test
pusha
mov
popa
rcr
out
or
mov
push
mov
pop
call
push
push
in
inc
cli
xor
mov
xchg
jb
mov
push
jl
fwait
hlt
jae
mov
repz
push
xor
sub
fisttp
aad
js
push
fs
push
inc
(bad)
aam
and
pop
inc
shl
adc
dec
les
loopne
sub
push
jno
ins
aad
push
mov
inc
push
(bad)
gs
in
add
add
dec
pop
hlt
and
call
out
push
test
pop
lods
xchg
dec
or
pop
mov
xchg
cmps
jg
out
sub
call
push
fiadd
adc
mov
mov
rcr
shr
pop
adc
fcmovbe
sub
imul
xor
rol
arpl
in
push
ss
and
jnp
scas
pop
mov
mov
cmp
fidivr
pop
inc
mov
out
(bad)
push
xor
loope
icebp
jns
dec
mov
and
and
(bad)
lods
jecxz
pushf
cld
or
(bad)
xor
dec
rcl
gs
pop
or
xor
movs
sub
mov
mov
xchg
lods
cli
ret
or
dec
icebp
jbe
daa
arpl
jp
xchg
fcom
dec
jecxz
stc
ret
pop
mov
in
sbb
jns
mov
mov
das
push
lods
cs
inc
pop
xor
cmp
add
arpl
retf
outs
pushf
cmps
daa
inc
fld
jecxz
test
or
push
mov
mov
scas
and
pop
pop
(bad)
fwait
or
sub
je
cwde
idiv
push
lldt
and
inc
mov
fwait
int
fadd
cmp
lods
enter
ret
or
repnz
fld
pop
(bad)
and
pop
push
inc
mov
ret
push
mov
retf
and
lahf
sbb
cmp
pop
mov
and
pop
inc
jb
push
xlat
clc
jno
test
xor
jg
retf
or
out
push
pop
mov
add
sti
jge
jae
mov
mov
dec
popa
(bad)
inc
into
push
fst
cs
xlat
xchg
jae
pop
outs
rcr
loopne
lock
cli
pop
sbb
xchg
cmps
adc
scas
pop
aaa
push
loope
dec
mov
xor
sub
mov
rol
sub
sbb
adc
mov
ins
out
mov
mov
sbb
sbb
and
daa
rol
adc
clc
idiv
sbb
aaa
and
repz
shl
inc
add
test
(bad)
inc
cs
(bad)
mov
dec
xor
adc
pop
pop
scas
jmp
cwde
cmps
imul
out
jb
clc
dec
pop
out
(bad)
jmp
mov
es
sbb
xlat
xchg
and
jbe
test
stos
jb
xlat
mov
dec
popf
cwde
rsm
dec
pop
mov
mov
mov
pop
push
xor
add
cwde
xlat
mov
cmp
ret
mov
mov
inc
popf
sahf
mov
sub
sahf
(bad)
cmp
loopne
jge
cmp
out
inc
lahf
xchg
out
and
xchg
ins
mov
jae
jge
cwde
in
clc
ins
and
cmps
xlat
popa
adc
mov
sub
(bad)
mov
movs
inc
div
and
rep
inc
mov
push
stc
std
enter
aas
nop
sar
pop
mov
xchg
mov
mov
push
(bad)
pop
(bad)
fild
adc
xchg
push
pop
and
stos
and
scas
or
out
xchg
imul
movs
push
jnp
mov
fwait
les
dec
fadd
xlat
daa
fnsave
and
adc
mov
(bad)
rcr
jo
imul
xchg
inc
(bad)
imul
jp
test
pop
inc
test
xchg
push
test
in
cld
hlt
bound
mov
xchg
mov
test
loop
out
call
fld
lea
sub
pop
aam
sbb
or
push
test
xchg
sbb
enter
pop
shr
and
add
push
pop
repnz
rcr
push
cmp
jl
cdq
repnz
jnp
js
jo
jg
inc
adc
(bad)
pop
js
jmp
pop
scas
mov
shr
lods
dec
scas
inc
and
push
pop
gs
scas
push
sub
jbe
mov
and
out
push
stc
(bad)
push
mov
add
cdq
and
jle
ins
inc
or
fisttp
pop
pop
pusha
add
fisub
loop
or
repnz
or
outs
cmp
loope
fistp
and
in
cmp
xchg
adc
jp
sub
or
mov
sbb
mov
and
cmp
dec
dec
mov
das
ins
or
test
and
push
jb
jle
test
mov
movs
mov
jae
inc
cmp
lea
or
dec
push
movs
sub
inc
mov
(bad)
fnstenv
mov
push
sub
xchg
sar
pop
mov
jle
sub
in
or
aam
out
xor
xchg
ins
(bad)
rcl
xchg
lods
inc
and
fsub
xor
jb
jg
xchg
movs
adc
adc
xor
push
and
jecxz
mov
stos
daa
jbe
cwde
lahf
mov
sub
dec
or
out
sub
movs
jo
ret
cli
jmp
jge
or
lea
mov
in
arpl
test
mov
mov
jmp
cmc
outs
aaa
mov
inc
loop
adc
mov
cdq
inc
aad
(bad)
loope
xor
in
repnz
cmp
xchg
sbb
push
adc
mov
sbb
cs
cdq
(bad)
movs
lahf
jecxz
sbb
setge
enter
dec
test
and
push
movs
add
test
fwait
pushf
fwait
jg
(bad)
fisttp
jne
lea
or
fs
std
in
gs
push
leave
pushf
push
pop
jmp
mov
xor
sti
jg
aas
cmp
fldcw
mov
mov
(bad)
loope
stos
scas
and
icebp
(bad)
adc
inc
mov
rcl
(bad)
dec
loope
push
icebp
push
(bad)
repz
scas
ror
add
pop
(bad)
dec
inc
xchg
std
xor
fisttp
div
push
jo
aad
sub
push
add
int3
mov
push
out
test
mov
dec
(bad)
test
loop
xchg
outs
sbb
inc
out
pop
test
jmp
les
sub
adc
xchg
ds
adc
xchg
sbb
iret
xchg
(bad)
mov
adc
fwait
mov
nop
push
mov
push
cmp
aad
mov
jg
push
repnz
dec
pop
fistp
pusha
nop
fcom
adc
cmp
jmp
inc
loope
ds
mov
int
push
in
(bad)
pop
pop
loop
xor
ret
clc
sbb
cmp
arpl
xor
push
push
enter
xor
fsub
mov
cdq
pop
neg
mov
dec
mov
mov
inc
xor
test
aaa
xor
and
sub
xchg
ins
call
movs
fs
jle
aaa
add
mov
add
add
sub
push
sbb
test
gs
sahf
std
sub
test
int
mov
adc
cs
shl
(bad)
sti
ja
ror
call
mov
dec
xchg
and
cmp
jo
int
gs
jmp
repz
sbb
out
mov
data16
push
clc
mov
inc
xchg
xor
arpl
into
pushf
inc
pusha
ret
cmp
fidivr
daa
inc
sar
xchg
daa
daa
sbb
push
ss
mov
pusha
mov
pop
outs
fdivp
adc
jne
xchg
push
lods
bound
mov
xor
mov
leave
or
jae
or
cmp
rcr
out
aad
inc
je
(bad)
jmp
lahf
add
sbb
cmc
jmp
bound
dec
xchg
js
and
pop
pop
out
sub
call
test
outs
js
stos
popf
scas
jbe
in
mov
mov
jl
add
es
loopne
inc
mov
jb
xor
out
fld
mov
sbb
add
ds
data16
pop
fdiv
pop
es
sub
xchg
sti
imul
sbb
pop
(bad)
fsubr
sti
dec
pop
out
retf
call
(bad)
xor
dec
jecxz
fsub
fsub
repnz
or
push
(bad)
icebp
pusha
mov
push
jmp
lea
dec
rcr
sub
mov
push
dec
xor
aad
pushf
pop
neg
adc
mov
retf
mov
stc
mov
fsubr
push
or
mov
mov
aam
cwde
adc
xor
sub
sti
call
lock
pop
add
dec
add
fwait
mov
dec
pop
ror
mov
or
jae
leave
pop
mov
in
pop
in
jns
or
cmp
mov
sub
rcr
mov
xchg
mov
js
ds
addr16
inc
fwait
sbb
pop
pop
bound
mov
jnp
mov
dec
aad
cli
mov
sahf
mov
adc
inc
inc
fdiv
cwde
cmp
loop
add
push
and
movs
popf
add
in
rol
call
outs
cwde
iret
mov
cmp
xor
imul
jnp
fist
js
push
leave
(bad)
in
lods
mov
call
mov
jecxz
pushf
loop
pop
inc
sub
ffreep
sub
loopne
mov
ficomp
add
push
int
lods
mov
cmp
rcl
std
je
movs
les
push
pop
outs
cmp
add
jns
cmp
mov
jl
ret
or
mov
ret
ds
dec
pop
outs
dec
add
cmp
xor
pop
xchg
scas
sbb
out
push
mov
int3
jns
adc
dec
ficomp
lds
call
(bad)
xlat
pop
sbb
hlt
(bad)
retf
mov
cmp
ret
push
shl
jmp
sbb
xchg
pop
popa
inc
sbb
sbb
fild
inc
shr
push
(bad)
dec
lahf
cmps
and
test
sar
mov
outs
fidiv
addr16
dec
mov
pop
aaa
push
or
out
and
aam
sbb
jo
sti
outs
cmp
adc
loopne
add
scas
and
sub
mov
sub
add
out
(bad)
cdq
(bad)
out
fnstenv
add
or
pusha
jl
pop
mov
popf
enter
ins
mov
adc
xor
in
int
jb
xchg
and
mov
popf
xchg
jns
mov
into
mov
cmps
aaa
inc
out
and
iret
push
test
cdq
test
mov
arpl
pop
(bad)
pusha
jp
sub
push
aaa
jp
call
adc
iret
and
cmps
ror
sub
cmp
push
cmp
adc
adc
inc
pmaxsw
mov
mov
outs
(bad)
mov
mov
fdiv
mov
jbe
lock
call
nop
stos
adc
dec
dec
xchg
adc
ret
cmp
fisub
cmp
jge
push
int
pand
in
in
dec
pop
pushf
arpl
sub
rol
mov
jle
jno
retf
mov
and
dec
push
cli
mulps
push
jo
pop
in
sub
and
rcl
push
push
pop
lods
dec
inc
sub
fld
push
in
arpl
in
dec
add
shl
jo
std
sub
sub
std
dec
jle
nop
or
dec
mov
xchg
aad
out
shl
inc
in
or
inc
mov
movs
dec
stc
sbb
sbb
lock
cmp
push
ret
dec
lods
push
loope
lds
(bad)
test
mov
repnz
jl
inc
mov
(bad)
test
(bad)
inc
(bad)
jbe
test
fadd
mov
inc
and
xchg
loopne
mov
in
int
jne
aam
mov
cld
call
add
ds
retf
adc
cli
and
ret
cmps
fbld
mov
jb
call
out
in
mov
push
sar
mov
popf
mov
or
clc
mov
jmp
xchg
ror
ins
mov
call
mov
outs
mov
shl
push
fwait
jb
and
repz
movs
mov
cmc
imul
aad
mov
mul
(bad)
in
dec
std
pusha
jecxz
xor
popa
repz
cmp
pop
sub
clc
mov
pop
fwait
cmc
movs
les
add
(bad)
fld
jle
loope
rcl
repz
aad
or
xor
or
mov
xchg
adc
popf
xlat
inc
loopne
loop
sbb
movs
jb
js
or
push
js
adc
stos
add
(bad)
scas
call
nop
mov
fs
sub
push
or
pop
push
in
rcr
(bad)
push
(bad)
stos
and
pop
(bad)
ins
xlat
jnp
mov
arpl
cmp
sub
sbb
(bad)
enter
mov
dec
pusha
mov
xchg
mov
pop
mov
lods
fnstsw
pop
cmp
add
outs
mov
jno
sar
sbb
push
jne
cdq
mov
lods
out
xchg
retf
dec
add
cmp
into
fdiv
mov
pop
jl
adc
mov
dec
mov
xor
retf
inc
lods
inc
ret
pushfw
mov
pop
ret
add
test
add
adc
xchg
mov
sbb
jns
fld
push
push
dec
sub
in
in
popf
int3
fild
mov
lods
neg
adc
mov
pop
inc
mov
stos
test
loopne
dec
sbb
cmps
cdq
movs
add
mov
jae
cmp
fbstp
out
popf
xchg
xchg
call
fsubr
pop
rcr
xor
aaa
loop
sbb
xchg
imul
fidiv
test
pop
add
into
sbb
mov
jae
xor
xor
push
dec
in
es
mov
dec
arpl
xchg
ret
std
adc
jmp
sub
mov
rol
adc
scas
pop
retf
ror
pop
pop
pop
cli
mov
dec
mov
xchg
retf
jmp
aad
inc
popf
(bad)
cmps
mov
adc
cmp
jecxz
dec
pop
test
retf
inc
xor
call
cs
data16
les
inc
jecxz
sub
lea
stos
xchg
outs
loope
push
sbb
adc
xor
sub
outs
lds
ins
ret
inc
(bad)
ins
fiadd
inc
dec
jo
icebp
adc
xchg
mov
dec
mov
stos
sbb
test
and
inc
dec
xor
fisttp
adc
adc
jo
pushf
leave
dec
test
pop
mov
push
movs
pop
sub
outs
call
rcr
jb
push
rol
out
sbb
addr16
arpl
(bad)
dec
pop
xchg
or
mov
push
in
sar
and
xchg
cmp
es
xor
sbb
fs
stc
jae
shr
lods
inc
psllq
fisttp
out
mov
dec
pop
inc
movs
pop
sbb
push
sar
loopne
in
shr
xor
mov
inc
ret
movs
clc
hlt
push
sub
mov
test
(bad)
pop
sub
cmp
ret
jp
loop
xlat
mov
add
dec
jmp
mov
cmc
dec
sub
xor
adc
js
mov
std
push
popf
xchg
repz
cli
out
jnp
push
push
inc
ss
fcomp
iret
repz
sub
xor
call
push
pop
add
sub
mov
enter
jo
test
mov
(bad)
and
es
adc
push
inc
sub
xlat
shl
imul
imul
hlt
push
cmp
and
xchg
add
fs
idiv
mov
inc
data16
sti
sbb
adc
sub
(bad)
outs
scas
gs
lds
or
cmp
pop
in
rol
in
mov
fwait
jle
xor
clc
(bad)
aaa
jo
call
lahf
outs
iret
push
aam
das
dec
mov
adc
(bad)
push
aaa
xchg
inc
call
js
stc
repz
jb
xchg
arpl
xor
inc
adc
cmp
in
jns
xor
lods
and
push
cmp
adc
fild
in
cmp
(bad)
call
test
mov
push
and
adc
pop
dec
fild
mov
imul
inc
cmc
ins
xor
adc
inc
inc
or
or
aad
dec
fiadd
sub
sbb
cmp
inc
or
sbb
inc
jg
sbb
mov
ret
jo
fisub
fptan
mov
bound
add
cmp
dec
rcr
jns
adc
in
or
fisubr
jmp
cmp
jle
mov
cmp
and
mov
ins
popf
(bad)
xor
or
sbb
ds
xlat
jg
inc
and
aad
mov
(bad)
push
and
fdiv
arpl
ss
(bad)
sub
sub
push
or
mov
rcr
ja
sbb
enter
loop
jns
sti
outs
jnp
push
adc
and
and
jl
jge
ss
test
add
mov
jecxz
fidivr
sub
sub
jns
add
jnp
es
mov
ins
cli
dec
fldcw
jmp
ins
jnp
cs
cs
fs
clc
idiv
jbe
cmp
clc
enter
outs
xor
fdivr
pop
mov
mov
push
adc
jne
mov
mov
aaa
data16
jae
push
sti
pusha
ds
not
pop
adc
add
mov
mov
inc
and
mov
cmp
aas
test
dec
dec
xchg
ss
ins
sbb
hlt
lods
cs
ror
xchg
adc
jp
xchg
add
ror
push
(bad)
arpl
mov
pop
int3
mov
cdq
repnz
mov
fcom
pop
mov
mov
push
cwde
cwde
push
cdq
inc
int
pop
fs
inc
and
leave
xor
scas
xor
sub
repnz
pop
push
add
cmp
retf
sbb
in
(bad)
xor
jmp
mov
(bad)
shr
test
stos
fisttp
daa
(bad)
sub
push
push
mov
(bad)
jmp
xchg
icebp
pop
ss
test
(bad)
ja
ret
xchg
out
xor
mov
call
ficomp
sti
sub
add
lahf
mov
(bad)
iret
sbb
xchg
push
add
pop
retf
adc
or
arpl
fist
sahf
push
push
or
hlt
enter
or
retf
loopne
dec
jl
jnp
jle
adc
push
jbe
jno
mov
adc
lea
cmc
mov
jnp
(bad)
out
stos
lods
pop
mov
ret
rol
ins
or
xchg
mov
cmp
xor
enter
push
bound
sub
ins
bound
push
scas
fs
sub
iret
pop
add
xor
loope
xlat
pop
push
das
sbb
cmp
retf
or
push
and
pusha
sub
push
gs
dec
pushf
test
addr16
int
mov
pop
mov
lahf
outs
into
push
daa
popf
sti
loopne
mov
mov
pop
out
push
pop
cmps
jp
cmp
sub
les
push
fsub
sub
into
xor
jle
cmp
fsincos
sbb
mul
mov
push
push
pop
ror
lods
xchg
mov
fucomp
cmps
stos
push
mov
enter
pusha
fimul
mov
inc
xor
inc
cs
test
sahf
and
cmp
out
dec
adc
es
fdiv
test
sub
pop
mov
jl
stc
test
or
xor
jne
push
dec
fdiv
or
mov
leave
jmp
and
add
mov
ror
jae
jecxz
mov
stc
std
call
jp
dec
mov
es
popa
in
and
push
mov
pop
sbb
ins
mov
add
mov
xor
cmp
and
dec
push
mov
mov
mov
add
add
aaa
jns
sbb
mov
and
out
iret
pop
mov
out
jmp
movs
lock
retf
out
jmp
lds
out
loopne
push
cwde
jno
fs
cmp
fistp
and
cmp
sbb
jnp
clc
add
xor
test
idiv
daa
lods
and
add
or
(bad)
outs
bound
lock
es
cmp
pop
data16
in
mov
out
out
jnp
xor
icebp
sti
(bad)
int
jne
add
dec
jecxz
add
xlat
rol
cmc
sub
mov
stc
idiv
mov
aas
leave
imul
test
xor
in
aad
pop
xchg
cmp
fwait
jle
jmp
jae
jmp
(bad)
sahf
xchg
sub
push
mov
cwde
mov
sub
loop
mov
js
mov
mov
and
test
ffreep
dec
das
and
adc
fimul
daa
cdq
adc
pop
setle
sub
adc
cmp
movs
sub
rcr
or
loopne
lods
jmp
inc
js
aaa
arpl
jmp
movs
push
cwde
hlt
xchg
mov
pop
pop
mov
outs
mov
xor
(bad)
xchg
ret
sub
inc
jb
test
add
aam
dec
scas
cmp
sub
dec
pop
push
jno
jbe
neg
call
mov
lock
movs
xor
push
lods
xchg
and
cmps
dec
cmc
lahf
and
jmp
dec
pushf
std
inc
aam
jl
fcmovne
js
push
stos
pop
(bad)
mov
push
(bad)
jns
aam
and
cmp
scas
cmps
push
(bad)
cmp
imul
arpl
fnstcw
add
dec
or
cmp
cwde
mov
xchg
sahf
jmp
sti
test
sbb
mov
adc
and
xchg
jae
dec
and
pop
sub
pop
xchg
jnp
fcmovnbe
mov
xor
push
call
jns
ror
retf
fisubr
and
hlt
sahf
xchg
pop
popa
stos
inc
adc
popf
jmp
ffreep
retf
jge
adc
dec
sbb
jo
jmp
sar
std
fild
mov
sub
adc
cmps
sbb
xchg
lds
sub
imul
mov
mov
daa
and
stc
popa
pop
sti
(bad)
jmp
ja
push
pop
pushf
pop
cdq
scas
xor
jp
popf
push
jmp
test
dec
(bad)
pop
repnz
push
xchg
push
fnstcw
add
sbb
mov
xchg
cmp
and
mov
sub
cmp
pop
dec
push
sub
and
retf
push
add
into
mov
and
shr
das
mov
push
sub
fisub
rcl
ins
test
sub
call
lods
push
and
repnz
div
std
leave
push
jno
in
push
mov
clc
jb
scas
sub
sbb
popf
jne
mov
sub
and
scas
(bad)
jns
mov
xor
fidivr
cwde
xor
xchg
pop
jp
pop
sbb
sbb
iret
bound
add
jl
and
jle
call
xchg
inc
add
xor
add
xor
jns
lahf
pushf
sbb
inc
imul
test
es
mov
in
jle
test
setp
pop
clc
mov
or
jbe
(bad)
pop
xor
(bad)
jecxz
sub
in
out
ret
jno
adc
mov
add
jbe
sbb
pop
cmps
adc
popf
adc
xchg
jmp
mov
mov
xor
scas
inc
int
dec
stos
mov
in
and
jbe
jnp
push
jnp
into
or
ss
inc
sbb
inc
aaa
test
into
adc
dec
pop
shl
pop
sub
jl
add
xor
adc
sbb
sub
push
or
call
mov
mov
pop
cmp
push
xor
xor
nop
daa
adc
inc
ins
mov
arpl
add
push
jo
jnp
mov
bound
add
inc
xchg
sub
scas
ins
sar
mov
adc
xchg
jge
frstor
pop
xchg
mov
xor
and
mov
clc
jp
xor
int
loopne
xor
stc
pop
ins
cmp
inc
sub
or
int3
stc
cmp
cmps
adc
iret
dec
mov
dec
cmps
push
jge
push
dec
and
push
ret
stos
dec
cdq
lods
lahf
fdiv
pop
sbb
movs
sub
mov
inc
pusha
push
mov
test
and
pop
icebp
imul
repz
out
add
sub
push
es
(bad)
sub
mov
in
and
cdq
inc
shr
mov
and
je
xchg
test
mov
mov
xor
cmp
hlt
fwait
int
mov
stos
leave
inc
jmp
mov
lea
hlt
cmp
adc
in
fs
xchg
mov
lea
cdq
dec
inc
push
xlat
cmp
cmp
or
pop
out
sub
out
aad
outs
pop
test
test
fwait
pop
push
lahf
cmp
adc
push
xlat
inc
inc
xor
adc
loop
addr16
jmp
nop
adc
push
aas
dec
cmp
ret
add
xor
dec
sub
sub
inc
leave
inc
pop
xchg
es
pop
mov
sub
mov
or
lods
int3
in
test
(bad)
ror
add
xchg
ret
lahf
or
nop
call
repz
aad
or
mov
add
jp
cmp
fistp
stos
sub
cmp
dec
nop
loope
add
fcmove
cmc
pop
call
xor
add
add
or
mov
mov
xchg
test
loop
adc
sti
xacquire
dec
cmp
popf
stos
jae
sbb
aad
pop
outs
pop
pusha
and
sub
scas
pop
push
js
adc
cmp
pop
pop
jae
cmp
or
push
std
mov
mul
scas
inc
jne
test
js
leave
test
or
in
or
je
cmps
sub
and
scas
cmps
sub
lea
sub
out
rcl
repnz
sbb
aam
addr16
mov
push
cmps
or
fbld
int
je
xchg
push
mov
retf
xor
mov
repz
iret
push
and
stos
inc
xchg
xchg
enter
addr16
cli
cli
mov
ret
mov
pop
and
push
out
push
jmp
out
movs
lea
mov
mov
retf
les
fidiv
pop
in
mov
pop
ins
loop
adc
push
in
or
xchg
or
pop
bound
mov
pop
sub
mov
addr16
xor
xchg
jl
cmp
inc
mov
ja
movs
cmp
nop
or
mov
outs
movs
mov
xor
and
cli
in
les
lock
jne
mov
pop
jnp
inc
add
push
pop
and
not
cmp
dec
ds
jne
outs
pop
sar
faddp
cmp
cmp
mov
gs
and
xor
jmp
retf
xchg
sbb
jne
adc
cmps
in
and
sub
lahf
cmp
add
adc
not
pop
int
pop
push
inc
enter
push
pop
aad
cmp
mov
arpl
cmp
(bad)
(bad)
(bad)
cmp
leave
inc
fwait
xlat
cmp
push
sub
sbb
les
scas
or
mov
mov
ja
pop
push
push
test
xchg
test
mov
stos
rcl
out
leave
inc
repnz
call
and
retf
sub
mov
jp
iret
and
repz
inc
mov
into
nop
mov
adc
hlt
mov
popf
clc
fwait
sbb
ins
repz
fadd
xchg
and
sub
ins
mov
add
out
or
xor
ins
jg
loop
int3
jo
and
sub
call
push
pop
xor
and
jo
mov
or
cdq
pop
les
lock
sbb
mov
(bad)
loope
fs
add
outs
lds
clc
pop
jae
in
aas
fmul
pop
cld
std
add
jne
icebp
fcmovb
inc
cmc
(bad)
push
repnz
inc
sub
out
enter
out
inc
mov
push
(bad)
js
jb
imul
adc
gs
outs
cs
fwait
jns
add
add
push
rcl
dec
pop
mov
mov
cwde
jno
inc
ja
les
stos
ins
in
arpl
sbb
out
cmps
movs
push
cmp
dec
cmps
das
jg
push
mov
xchg
add
ret
adc
jecxz
in
sbb
mov
mov
xor
mov
adc
push
fnstenv
retf
call
mov
addr16
lea
mov
cmps
inc
or
sub
call
fnsetpm(287
daa
hlt
sbb
repnz
ds
fwait
clc
sbb
stc
enter
addr16
movs
sbb
inc
outs
ret
stc
sbb
movs
cmp
adc
aad
xchg
jo
test
aam
push
rol
(bad)
(bad)
out
ret
jmp
in
icebp
(bad)
sahf
cmp
pushf
js
mov
dec
xor
retf
fisttp
mov
mov
imul
inc
(bad)
outs
or
repnz
mov
aaa
mov
jge
jae
mov
jb
daa
sbb
jge
xor
ja
cmps
mov
ffree
dec
clc
mov
push
or
(bad)
fidivr
(bad)
in
push
or
adc
dec
xor
or
(bad)
(bad)
pushf
sahf
inc
arpl
cmc
out
into
(bad)
out
inc
pop
cwde
inc
aaa
pushf
sub
in
dec
jmp
xchg
stc
addr16
in
mov
jg
sub
pop
pop
call
ins
add
dec
xchg
scas
in
pushf
or
and
sahf
sub
sub
pop
sub
pop
loope
sbb
xor
mov
shl
fucomp
xchg
lods
push
fidivr
cwde
dec
inc
neg
jo
pop
xor
popa
inc
push
inc
mov
repnz
push
jle
mov
(bad)
pusha
xchg
sbb
rol
int
ret
out
jmp
add
sbb
push
or
sar
add
jg
push
outs
mov
dec
adc
mov
inc
lahf
dec
inc
push
jno
xlat
add
jbe
xchg
arpl
push
out
or
iret
adc
sub
not
xchg
fistp
sahf
das
adc
dec
das
sahf
fcmovbe
sbb
fsubr
retf
mov
aaa
sub
push
sbb
fldln2
test
ficomp
add
aad
xchg
neg
aam
and
mov
or
xor
mov
xor
es
cs
loopne
cmps
mov
arpl
adc
xchg
add
or
mov
mov
push
push
cmp
xor
jns
not
out
repz
enter
adc
lea
push
pop
or
sub
std
sbb
mov
dec
ss
ret
dec
sti
adc
arpl
je
mov
pop
xchg
out
pop
mov
push
push
push
push
jns
shl
add
(bad)
jp
pop
sti
clc
cmc
and
rcr
xchg
pop
add
and
jnp
scas
mov
push
sbb
gs
fsubr
cmp
cmps
mov
pop
xchg
mov
das
ins
shl
(bad)
leave
dec
fyl2xp1
cmc
add
scas
fs
inc
pop
mov
aaa
test
mov
cmp
loope
xor
sti
les
mov
movs
leave
push
js
mov
loop
jecxz
test
mov
test
push
jecxz
loop
in
or
mov
iret
xor
repnz
sbb
sub
push
or
(bad)
int
outs
(bad)
pop
lahf
jmp
js
mov
jmp
movs
pop
addr16
mov
adc
out
push
and
movs
xchg
dec
outs
sub
lds
push
cmp
pop
fninit
dec
frstor
aam
xor
cmp
cmp
sub
sbb
and
push
out
popa
and
out
and
mov
(bad)
mov
mov
shl
mov
push
adc
or
pop
movs
mov
push
gs
out
cmps
or
dec
jbe
ret
inc
clc
sub
mov
dec
pushf
xchg
xchg
xchg
(bad)
and
push
sbb
jbe
sub
cmps
add
popa
mov
mov
test
clc
jb
add
dec
push
mov
adc
or
sbb
test
in
or
jecxz
xchg
sub
repnz
sub
pop
into
xchg
mov
or
pushf
mov
xor
mov
mov
fnsave
mov
cmp
inc
outs
fcomp
int3
not
outs
jecxz
(bad)
out
daa
addr16
aam
jne
and
iret
sbb
sub
xor
ds
sar
sub
adc
imul
adc
push
or
mov
in
pop
ss
outs
mov
cs
mov
cli
mov
dec
or
loop
jns
dec
mov
xor
and
add
mov
jo
sbb
sub
push
(bad)
rcr
inc
jl
cdq
in
ins
mov
push
cli
rcl
lahf
sbb
dec
repnz
mov
dec
mul
jbe
xor
and
inc
and
pop
inc
int3
ja
and
jge
sbb
mov
mov
das
mov
mov
rol
nop
imul
iret
fimul
mov
or
leave
and
mov
cs
jae
cdq
pop
call
mov
mov
add
fmul
jp
dec
mov
xor
fs
loop
or
sahf
jg
xor
dec
mov
(bad)
cwde
scas
inc
pop
call
and
call
cmps
push
(bad)
cmp
loope
cmps
movs
repz
std
jnp
test
xchg
mov
in
sub
cmp
add
jle
es
call
jno
adc
pop
sbb
xchg
mov
sub
aam
outs
mov
mov
jno
jle
mov
cmp
into
mov
enter
or
sbb
and
xchg
cwde
daa
pop
ss
scas
les
in
and
imul
out
xchg
imul
sbb
pop
pop
je
jns
sbb
and
xchg
jne
inc
mov
pop
cmc
inc
hlt
xchg
mov
xor
jnp
rcl
dec
lock
xchg
dec
cmps
dec
xchg
or
jno
bound
inc
jge
mov
add
ud0
icebp
mov
(bad)
gs
sub
fisttp
pop
in
ds
adc
pop
imul
sbb
mov
jp
push
and
scas
ret
dec
mov
mov
sbb
lods
bound
inc
adc
xchg
jno
mov
or
sub
aad
sti
push
inc
push
jnp
std
out
retf
jg
and
je
imul
das
in
ins
sbb
push
lea
(bad)
jp
push
xor
in
pop
scas
retf
or
add
test
cmp
les
icebp
mov
dec
int3
outs
push
lods
push
inc
pop
movs
je
sub
jno
int
movs
add
(bad)
and
inc
shr
daa
(bad)
mov
or
lods
cmps
jecxz
aad
lea
into
or
xchg
psubb
shl
sub
push
cmp
rol
mov
not
icebp
ss
sub
loopne
jne
mov
mov
cmp
ficomp
mov
mov
test
cdq
xor
rcl
jnp
fwait
and
movs
retf
mov
adc
xlat
ins
out
mov
js
leave
call
jmp
imul
mov
test
iret
iret
push
mov
cmp
in
sub
lods
adc
leave
mov
stos
xchg
adc
cmp
cwde
push
cs
stc
cld
push
out
jo
xchg
sbb
stos
sub
or
loopne
mov
out
dec
jns
push
or
shr
dec
stos
int3
pusha
mov
fcmovbe
test
sar
pop
adc
mov
loope
cmps
(bad)
push
call
mov
js
sbb
shl
dec
mov
and
ret
xchg
out
test
shl
push
cs
les
lods
sub
mov
test
xchg
(bad)
pusha
stos
mov
mov
test
xor
sub
dec
cwde
aad
ret
xor
sbb
dec
je
cmp
jo
imul
(bad)
sub
jae
sub
pop
test
mov
aad
test
sub
mov
ss
fcomp
scas
jle
inc
sbb
dec
push
fcomp
add
sbb
shl
shr
inc
inc
cmps
in
mov
jle
and
jbe
mov
out
aaa
push
inc
icebp
jmp
or
mov
movs
cmc
enter
adc
ds
aas
mov
mov
mov
pop
sbb
retf
mov
enter
mov
lock
inc
mov
das
sti
gs
push
cmp
and
jne
leave
int3
adc
xchg
iret
push
sub
test
ret
adc
retf
stc
cmps
or
xchg
jne
pop
inc
xor
aam
stc
jae
cmp
(bad)
lods
sub
jmp
cld
xchg
cdq
mov
mov
or
mov
or
sbb
add
push
mov
cmps
push
sbb
push
mov
mov
sub
dec
(bad)
xor
aam
in
push
xchg
push
or
outs
mov
or
jnp
cmps
aas
out
inc
mov
add
push
pop
enter
nop
call
xchg
pop
add
daa
or
pop
inc
out
mov
outs
xor
leave
ja
int
stos
adc
pop
ins
mov
sbb
mov
push
jae
mov
rol
outs
in
sub
pop
(bad)
in
cdq
jmp
fs
sti
cmps
out
jg
ret
xor
sar
repnz
dec
jp
outs
pop
lahf
(bad)
repnz
test
inc
inc
add
ins
mov
retf
pop
daa
lods
dec
add
sti
inc
adc
es
or
cwde
push
adc
inc
sbb
into
ds
inc
dec
cmp
fsubp
pushf
mov
(bad)
push
jae
adc
cmp
ins
movs
sti
test
mov
pusha
arpl
adc
pop
xchg
(bad)
aas
xlat
mov
in
lds
aam
call
sub
or
push
daa
loope
stos
add
cmp
movs
or
sub
aam
xchg
add
comiss
rcr
xchg
int3
out
xor
fcom
mov
sub
and
cmc
call
jge
pop
aad
pop
jl
adc
and
int
cmc
xchg
ficom
fdivr
sub
mov
cmc
out
lds
push
test
sbb
mov
push
bound
test
in
cmp
mov
cwde
jg
mov
push
dec
lock
sbb
jmp
pop
ror
loop
mov
int
pop
dec
dec
mov
mov
inc
mov
push
fild
cs
scas
adc
jae
cmp
mov
fs
(bad)
not
pop
loop
es
mov
add
xchg
les
sti
inc
mov
inc
jno
test
ds
test
cmp
lea
gs
fstp
call
or
fxch
popa
into
xchg
dec
add
(bad)
std
outs
popa
(bad)
je
movs
pshufw
int3
jo
add
inc
xor
clc
inc
in
jne
pusha
pop
cmps
out
dec
pop
inc
add
add
xchg
outs
inc
rcr
out
cld
jnp
stos
clc
mov
dec
clc
dec
int3
add
xor
not
ins
movs
inc
push
sbb
je
add
dec
add
popf
stc
xchg
daa
mov
xlat
mov
pop
sbb
sbb
push
sbb
fadd
pop
xor
cld
push
jecxz
sti
js
in
je
push
jns
xlat
xor
push
aas
mov
outs
out
or
rcr
or
pop
stos
and
pop
dec
add
sti
(bad)
cmps
ins
test
movs
push
cmp
jecxz
shl
sub
dec
psrlw
xor
test
scas
push
add
dec
mov
sub
and
in
xlat
(bad)
hlt
jle
dec
xchg
xchg
retf
push
sub
push
mov
enter
int3
and
jg
dec
xchg
add
in
or
fsub
sti
jmp
mov
pop
retf
or
enter
mov
adc
push
cmp
sub
and
mov
addr16
sti
dec
nop
(bad)
stc
cmps
(bad)
or
add
pop
aas
dec
jp
sbb
pop
scas
mov
iret
cld
ret
xor
test
cmp
call
xchg
push
sub
in
mov
or
mov
jl
in
(bad)
aad
outs
push
mov
les
fcom
xchg
retf
test
sbb
cmp
in
jns
test
jb
push
cmp
mov
mov
call
pop
jnp
adc
ror
adc
cwde
xchg
adc
inc
int3
sub
dec
pop
ins
dec
ins
mov
pop
mov
call
cmps
mov
xor
sub
lods
mov
loop
fist
and
push
mov
push
add
(bad)
cmp
ds
shl
das
or
call
cmps
stos
cmc
push
xor
test
scas
lds
out
loope
iret
push
push
std
retf
daa
mov
ret
push
cmc
push
bnd
(bad)
mov
shl
outs
sar
mov
adc
pop
mov
and
jne
mov
in
pop
push
inc
push
ins
ins
xchg
(bad)
out
xor
popf
cmp
mov
xor
cmps
mov
xor
xchg
lods
lahf
(bad)
jmp
dec
outs
adc
mov
inc
popa
and
stc
(bad)
mov
movs
push
dec
ret
retf
mov
push
sub
xchg
jp
xchg
adc
jo
outs
push
xchg
leave
xchg
std
out
cmp
mov
add
and
popa
inc
mov
ins
jno
cmps
out
xor
push
popa
ret
popa
fwait
inc
pop
lds
or
movs
cdq
mov
ret
mov
lock
lea
push
xchg
lods
inc
int
clc
jnp
or
and
(bad)
xchg
xor
inc
sub
or
dec
cli
cmps
outs
mov
ror
and
pop
mov
adc
add
retf
push
sbb
sahf
push
es
cli
or
xor
push
add
sar
js
mov
xor
in
out
cmp
sar
ds
(bad)
mov
push
or
es
(bad)
pop
rep
js
mov
js
loopne
data16
frstor
or
fdivr
retf
pop
or
pusha
cmp
mov
mov
mov
inc
push
in
push
iret
jmp
pop
test
movs
dec
xchg
jns
adc
jl
aad
sbb
cmp
test
cmp
sbb
add
jecxz
or
sbb
and
mov
cmps
mov
and
cmp
(bad)
xchg
xchg
jno
adc
lock
pop
in
push
(bad)
std
lods
push
test
xor
sub
scas
pop
mov
(bad)
test
test
daa
(bad)
xchg
mov
scas
fimul
cmps
les
(bad)
xor
movs
dec
jb
int
pop
pusha
repnz
sub
daa
mov
sar
cmp
push
xor
jg
pop
scas
push
fiadd
mov
loope
sbb
cwde
and
pop
cwde
loopne
xchg
(bad)
je
push
inc
inc
lea
out
add
daa
or
jecxz
mov
push
mov
add
and
test
rcr
xchg
mov
scas
push
sub
sub
xor
(bad)
(bad)
jmp
jb
sub
inc
push
arpl
dec
ficomp
xor
test
int3
xor
les
stos
leave
in
add
jnp
jnp
xchg
or
pop
std
movs
push
jbe
out
ss
pusha
outs
stc
mov
pop
scas
mov
pop
imul
pop
xor
cmp
and
outs
dec
xor
js
aaa
jl
ret
pop
jl
mov
inc
mov
cmp
aas
pop
(bad)
and
movs
sbb
xchg
outs
or
(bad)
std
inc
(bad)
sbb
dec
inc
jp
mov
push
int3
cmp
push
mov
jl
movs
cli
jmp
lahf
push
and
cmp
xlat
pop
adc
aaa
and
add
pusha
or
add
repnz
sar
cmp
sub
aas
ficom
lock
popa
stc
pop
push
cwde
mov
push
lea
lock
mov
push
pop
jb
adc
sbb
movs
push
sub
mov
das
mov
aas
cmp
mov
ror
pop
xor
inc
shr
jns
adc
(bad)
sbb
xchg
sahf
and
shl
movs
(bad)
leave
js
dec
bound
adc
pop
es
sub
inc
mov
mul
jbe
push
mov
ja
cmp
jg
outs
sbb
push
leave
add
sbb
pop
jbe
or
sbb
fist
js
jge
mov
inc
outs
mov
mov
(bad)
(bad)
scas
sub
(bad)
mov
shl
jmp
mov
mov
xor
loop
iret
arpl
mov
xchg
aad
dec
test
pop
inc
inc
call
and
inc
cs
fadd
ret
mov
push
dec
pop
out
pop
sbb
mov
gs
push
fnstenv
call
and
push
cmp
mov
imul
adc
push
and
loope
ror
loope
outs
inc
adc
add
sbb
inc
inc
scas
dec
aaa
adc
shl
xor
inc
mov
xchg
ds
sub
ret
and
clc
push
stc
mov
pop
imul
dec
xchg
pop
xchg
and
adc
jmp
and
and
mov
inc
lds
call
repnz
lods
pslld
lock
sub
pop
lds
in
data16
cmc
xchg
cld
pop
mov
pop
repnz
push
outs
sbb
(bad)
lods
adc
pushf
iret
push
jnp
xlat
nop
daa
addr16
es
push
add
je
scas
xor
and
mov
dec
leave
mov
jg
(bad)
popa
nop
or
cwde
shl
fsubr
push
adc
lods
je
lds
enter
mov
(bad)
leave
pop
mov
jae
pop
test
adc
mov
xor
sub
pop
fucomip
fnsave
mov
in
cmp
push
pop
push
sub
rol
xlat
push
jl
pusha
sbb
or
mov
jmp
pop
mov
mov
scas
mov
stc
daa
and
gs
pop
sub
mul
pushf
movs
stc
inc
clc
mov
and
ja
(bad)
mov
sar
sub
jae
push
ins
out
jl
pop
inc
dec
and
int3
gs
pop
repz
add
into
add
ret
cmp
cdq
ins
(bad)
out
sbb
mov
sbb
jmp
pop
inc
cmp
cmps
cmp
nop
pop
test
xlat
es
retf
cld
jp
xor
xor
ds
pop
out
mov
ror
test
xchg
adc
dec
loop
call
dec
cmp
push
movs
sbb
push
mov
mov
add
mov
in
lea
outs
arpl
jno
sbb
ins
pop
cmps
cmp
dec
jo
dec
outs
push
jg
sti
loope
cmc
pop
(bad)
scas
dec
out
je
mov
sbb
scas
seto
mov
pop
fnstenv
jle
cmp
push
cmps
je
push
add
adc
mov
cmp
mov
mov
mov
mov
push
mov
cmp
jmp
cmp
inc
mov
in
out
or
or
and
jle
mov
stos
scas
or
int3
retf
mov
scas
push
and
cmps
xor
nop
loopne
fstp
(bad)
inc
dec
sub
mov
(bad)
movs
pusha
es
gs
mov
jg
inc
mov
cmp
xor
xchg
xor
inc
aam
repz
fcomp
imul
jnp
xlat
inc
inc
pop
ds
test
jge
dec
cli
fwait
test
and
test
mov
mov
xor
xlat
test
pop
sbb
inc
jp
mov
pusha
pop
sub
dec
call
int
and
cs
inc
out
jb
test
mov
nop
mov
inc
pop
pop
xor
and
cdq
loop
ins
jg
test
ficom
cmp
lock
jae
mov
cwde
dec
fnstsw
inc
int3
test
ror
pop
xchg
pop
and
fidivr
cmps
and
repnz
pop
std
push
dec
sbb
inc
push
ins
mov
push
pushf
movs
mov
ficomp
cmp
jno
jae
and
retf
pop
inc
lock
mov
add
pop
or
in
leave
dec
sahf
push
mov
dec
mov
mov
(bad)
mov
fld
rol
push
lock
xchg
imul
stos
aas
loop
xlat
mov
(bad)
aam
sahf
pop
sub
leave
pushf
scas
hlt
hlt
xor
sbb
inc
push
cmp
mov
ja
leave
movs
and
jmp
jmp
popf
pop
out
into
jae
pop
push
and
pop
sbb
push
repz
pop
mov
push
div
arpl
sahf
mov
push
push
cmps
pop
nop
jae
retf
sbb
std
pop
test
dec
cmps
and
mov
jmp
sub
not
mov
jns
movs
sub
bound
xchg
push
addr16
addr16
push
in
gs
mov
jmp
out
mov
add
in
jno
xchg
mov
fmul
scas
popf
xchg
jae
(bad)
jmp
mov
or
out
and
arpl
and
mov
and
cdq
popa
std
dec
repnz
ss
dec
adc
pop
aam
sub
inc
pop
imul
xchg
lock
dec
and
mov
jb
icebp
movs
mov
or
cmp
mov
xchg
xor
out
frstor
mov
xchg
(bad)
sar
mov
pop
shl
xor
cmps
mov
mov
xor
inc
adc
test
enter
in
pop
imul
stos
or
repnz
add
or
(bad)
jecxz
(bad)
aad
std
sub
add
aaa
inc
ins
or
mov
add
pop
xchg
jbe
mov
bound
inc
imul
stos
lods
push
adc
test
ins
mov
popa
fild
sub
addr16
shr
les
xchg
div
movs
neg
lds
repnz
inc
sbb
movs
(bad)
dec
out
or
in
push
sbb
fidivr
shl
lods
sub
inc
imul
xor
sbb
adc
pusha
fsub
aam
dec
loope
sub
test
hlt
xor
popa
aas
push
dec
pop
icebp
dec
aam
lds
push
(bad)
sub
jg
xor
jb
scas
stc
sti
sahf
push
ds
pop
dec
je
in
add
push
(bad)
retf
or
mov
in
aam
jle
nop
mov
add
pop
add
and
jbe
and
add
mov
inc
in
or
inc
sub
in
pop
pop
call
cld
aaa
js
fs
scas
mov
cmp
inc
cmc
xor
xchg
lahf
sbb
ins
into
cmp
mov
or
or
je
je
adc
pushf
mov
test
mov
lahf
in
jl
xor
xor
xchg
(bad)
sbb
dec
movs
mov
ins
push
inc
xor
repz
loopne
sar
xchg
or
or
dec
icebp
xor
add
pop
lock
xor
jo
jnp
mov
bound
pop
push
mov
imul
mov
adc
leave
push
adc
inc
enter
push
pop
test
push
and
popf
jmp
cmp
leave
fisubr
dec
or
cmp
and
jae
into
pop
pop
int
and
pusha
or
jns
cmc
sub
retf
mov
in
add
mov
push
cmp
repnz
bound
mov
in
fist
rcr
int3
ins
scas
pop
fdivrp
adc
gs
imul
xchg
jge
leave
repnz
push
cmps
aad
sbb
dec
cmp
repz
add
dec
mov
out
add
movs
mov
xor
and
adc
stc
inc
or
daa
shl
movs
push
lock
and
mov
pop
jmp
adc
mov
sub
aas
ret
push
mov
(bad)
sahf
xchg
push
cmps
ins
mov
cmp
xchg
enter
stos
movs
xchg
xchg
bound
ins
lods
jbe
cmp
ja
dec
mov
hlt
push
fcmovnb
cmp
ins
lea
loope
sahf
imul
or
setne
mov
jns
fidiv
sbb
data16
add
pop
ficom
inc
scas
call
rcl
add
adc
dec
xor
lock
and
jg
pop
cdq
xor
cli
arpl
std
push
dec
in
loope
(bad)
xchg
call
add
cmp
mov
outs
jns
push
lahf
test
xor
ja
mov
repnz
retf
shl
movs
mov
xchg
sbb
jl
push
mov
xchg
(bad)
push
mov
mov
mov
cmps
mov
outs
dec
pop
pop
mov
cdq
popf
adc
lods
test
add
mov
mov
xor
mov
jle
popa
mov
sahf
pop
dec
push
inc
test
pop
arpl
test
mov
mov
cmps
push
fmul
lods
jecxz
shr
mov
dec
inc
jne
adc
push
stos
dec
mov
in
fs
push
add
add
add
lahf
jge
adc
add
ja
and
push
jl
cmc
inc
or
les
inc
ins
xor
les
or
push
js
sub
(bad)
(bad)
jno
xor
pop
and
retf
dec
pop
xchg
add
push
jge
cmp
data16
jmp
mov
fwait
in
lock
fsub
fstp
xchg
sbb
jmp
bound
and
lea
inc
fcomp
inc
jo
aaa
pop
cmps
fwait
push
jnp
out
(bad)
push
dec
fistp
adc
mov
sbb
(bad)
jl
std
in
outs
xor
jmp
xchg
or
imul
pop
jl
pop
inc
inc
mov
fistp
sub
and
ins
mov
xor
sub
aaa
pop
mov
out
pusha
dec
fnstcw
sub
std
stos
ins
mov
jl
inc
cmc
xchg
retf
xlat
mul
push
push
cdq
mov
aaa
mov
mov
aam
in
pop
sahf
leave
dec
cld
aam
mov
mov
pop
sar
fdivr
gs
icebp
jbe
pop
loop
and
sahf
pusha
mov
adc
xchg
cmp
repnz
repnz
dec
or
add
or
repnz
retf
mov
dec
fwait
or
inc
leave
ret
pop
and
rcr
sbb
stc
shr
and
push
mov
lods
dec
(bad)
in
push
xchg
push
add
div
mov
add
js
and
test
xor
mov
sub
jb
xchg
fs
div
in
pop
popf
test
inc
rcr
lods
daa
rcr
call
cmp
push
add
(bad)
pusha
xchg
cmp
(bad)
out
stos
aaa
out
lods
sbb
pop
ret
es
jno
xchg
rol
loop
mov
push
jne
iret
(bad)
jg
ins
int
cld
mov
add
call
add
cmp
jp
mov
loope
push
loop
fcomp
das
inc
and
aas
inc
dec
scas
mov
repz
pusha
jno
stos
mov
cmp
std
icebp
ins
and
xchg
push
out
push
test
mov
and
mov
inc
dec
lds
xchg
lods
jp
xchg
aad
inc
mov
xor
(bad)
arpl
out
add
test
add
mov
xor
push
push
mov
pusha
fwait
xchg
leave
test
daa
test
push
dec
sbb
xor
xchg
and
mov
les
dec
or
scas
add
xchg
call
fisub
xchg
mov
shr
jae
xor
jmp
mov
mov
pop
popf
mov
hlt
jl
movs
fistp
mov
ss
xor
push
pushf
lds
iret
repz
mov
pushf
cmp
adc
jecxz
pushf
push
xor
scas
jge
or
mov
inc
fwait
ins
cmps
adc
jg
add
cmp
pop
xor
add
and
jbe
mov
repz
dec
mov
jb
add
cli
cwde
in
aas
(bad)
out
rol
pop
scas
jl
dec
sti
xor
ins
adc
push
repnz
dec
rcr
ret
gs
xor
mov
sbb
stc
scas
mov
xlat
inc
jp
sti
loop
jg
or
mov
nop
fnstsw
adc
pop
xor
add
jge
jmp
sahf
test
gs
scas
mov
sub
jp
jg
inc
jnp
mov
push
retf
jp
fwait
ds
leave
aas
idiv
outs
(bad)
add
cmp
mov
jl
retf
js
retf
xor
dec
jbe
inc
repz
xchg
push
add
adc
repnz
pushf
inc
mov
test
pop
sbb
xor
jae
sbb
pop
nop
imul
push
mov
cmc
das
dec
or
sbb
ss
inc
data16
lea
(bad)
add
xchg
clc
cmp
push
mov
push
dec
jne
ror
jmp
mov
xor
jb
push
or
xchg
fist
aad
ret
xchg
inc
loop
or
jecxz
std
test
imul
jb
xchg
and
dec
sbb
pusha
lock
sub
sub
ret
xchg
cmps
cdq
xor
push
inc
scas
cmps
xchg
inc
int3
and
pusha
add
out
add
sub
scas
xor
xor
inc
add
pop
sub
or
inc
jno
or
mov
jo
inc
lods
addr16
xor
(bad)
jp
dec
inc
and
jecxz
sbb
xchg
les
jae
push
retf
and
inc
(bad)
ins
icebp
fs
(bad)
push
dec
adc
outs
jb
sub
fdivr
jmp
pop
push
cmp
pusha
loop
push
sbb
pop
jl
add
idiv
out
aas
hlt
lahf
adc
xchg
out
fwait
xor
push
adc
mov
mov
mov
dec
xor
adc
push
pop
xor
int3
mov
xchg
inc
pop
adc
es
push
pop
adc
inc
sbb
rcl
sbb
(bad)
jae
cmps
pop
jbe
adc
sub
adc
mov
test
push
push
push
sbb
push
dec
xor
jb
fsubr
repnz
cld
xchg
movs
call
pop
nop
mov
xchg
test
cmps
sbb
dec
cwde
enter
dec
cmp
test
push
ins
push
inc
mov
cli
mov
push
imul
xchg
inc
ins
das
mov
lahf
daa
cmps
je
add
push
dec
jne
stos
inc
fsub
xor
rcr
call
cli
test
add
xor
outs
push
sbb
inc
push
add
(bad)
data16
in
in
ss
lahf
jbe
stos
fcomp
push
inc
xor
loop
out
out
arpl
xchg
xchg
imul
dec
(bad)
(bad)
repnz
jecxz
sub
das
aad
inc
adc
mov
mov
jb
cmp
cs
ret
adc
dec
jge
mov
mov
fcom
jle
and
repnz
xor
push
adc
lahf
adc
sub
hlt
dec
out
mov
out
loop
in
mov
pop
jge
sub
outs
inc
xor
enter
jbe
loopne
jp
loope
pop
(bad)
cdq
aam
push
loopne
packsswb
adc
pop
mov
mov
mov
(bad)
fwait
xchg
inc
mov
jl
and
ficom
dec
(bad)
mov
dec
ins
sub
ss
push
(bad)
mov
int
and
fistp
retf
sub
sub
mov
inc
lods
rol
(bad)
push
loope
jmp
mov
mov
pop
or
movs
call
pop
popf
sbb
fcmovbe
cmp
add
cmps
rol
push
(bad)
outs
fistp
mov
hlt
aam
xchg
les
(bad)
add
call
stos
leave
and
popf
fs
add
push
push
jo
rcr
lds
ins
and
mov
pop
sub
mov
pop
or
mov
leave
sub
popf
push
or
push
xor
fs
pop
xchg
jge
fidiv
pop
lahf
sub
add
aam
xchg
xchg
(bad)
(bad)
pop
int
xor
jmp
jle
test
loopne
subps
je
dec
gs
(bad)
sub
movs
add
shl
lods
cmps
mov
enter
jmp
(bad)
test
std
ja
inc
and
sub
div
gs
shl
xchg
jae
dec
arpl
cld
aas
and
push
sub
pop
out
cmp
sub
jae
(bad)
ficomp
and
jne
xor
shr
inc
and
std
or
fisttp
mov
mov
dec
adc
lods
das
sbb
dec
loope
out
jns
inc
mov
mov
add
dec
cmp
sahf
xor
mov
add
add
dec
inc
xchg
sar
retf
dec
movs
jb
dec
addr16
sti
inc
es
sbb
xor
ret
jnp
cld
push
mov
sbb
and
mov
jbe
in
cmp
and
stc
sub
jmp
sub
ins
mov
ret
mov
pop
jo
inc
cmp
cwde
aam
vpmullw
rcl
xchg
jb
das
syscall
sub
pop
rol
and
loop
and
jbe
cs
cmc
pmaddwd
js
xor
xchg
jns
retf
xchg
mov
enter
cmps
loope
(bad)
loop
lds
adc
dec
int
or
repz
repz
imul
pop
sbb
dec
aam
stos
adc
mov
xlat
mov
mov
mov
aad
inc
pop
mov
retf
mov
das
out
retfw
(bad)
jns
fbld
mov
fwait
push
shr
(bad)
cld
mov
imul
das
push
mov
ins
aam
ss
or
jmp
ret
icebp
sbb
adc
les
xor
sbb
jmp
(bad)
xor
dec
ror
or
leave
mov
or
test
loope
hlt
jg
fsub
fwait
xchg
inc
xchg
cmp
dec
(bad)
mov
adc
mov
add
xchg
std
sahf
and
mov
cmps
pop
xor
inc
push
(bad)
cmps
mov
jge
outs
ja
dec
mov
mov
push
(bad)
icebp
xchg
and
shr
jmp
movs
jno
in
movs
outs
jp
shl
jbe
and
mov
and
cmp
inc
pop
imul
sub
and
lea
lods
xchg
dec
fild
xor
ins
mov
sar
sub
scas
lahf
xchg
ds
loope
sub
(bad)
pop
inc
xchg
jo
repnz
xchg
fcom
bound
mov
sbb
and
in
pop
inc
and
sub
xor
inc
cli
and
aas
outs
and
push
stc
pop
test
pop
jo
dec
push
jg
arpl
jmp
popa
clc
cmp
jge
shl
std
(bad)
fnstenv
retf
call
add
dec
sub
setbe
fs
pushf
(bad)
movs
or
shl
dec
adc
inc
sbb
cmp
mov
xor
add
jmp
cmps
cmp
and
xchg
inc
sbb
hlt
pusha
cmps
pusha
cmc
dec
(bad)
pop
or
jmp
add
popa
and
mov
and
leave
or
fnstsw
dec
sbb
dec
xchg
out
xor
div
test
leave
jle
cmc
(bad)
pop
push
mov
adc
pop
xchg
mov
in
stos
adc
add
fcomp
adc
fsub
add
cmc
dec
(bad)
cwde
sub
test
mov
and
mov
(bad)
fs
adc
sbb
repnz
pop
aad
mov
lods
cmps
in
retf
lock
xor
fwait
(bad)
clc
or
push
mov
and
xchg
dec
adc
pop
mov
mov
inc
sub
push
mov
jb
xor
out
push
jl
dec
cmc
push
push
clc
mov
push
mov
cld
adc
repnz
xor
loop
adc
add
popa
jne
push
mov
cli
in
xor
loopne
(bad)
sbb
xor
stc
popa
repz
inc
in
popa
aam
test
cmp
sub
test
test
test
inc
and
xchg
jl
and
add
xchg
shl
xchg
std
inc
dec
sahf
and
test
jnp
iret
adc
adc
mov
xor
cld
imul
(bad)
mov
cmp
clc
retf
and
and
gs
test
xor
int
clc
adc
hlt
mov
jmp
sahf
adc
imul
cwde
mov
xor
test
add
cdq
push
call
push
adc
add
push
in
sbb
adc
ins
inc
repnz
popa
je
pop
inc
mov
pusha
push
xor
rcr
adc
add
into
ds
jbe
ins
aas
pop
lods
lds
in
adc
cmp
sahf
cmc
dec
xchg
les
in
das
jno
fmul
push
out
sub
repz
(bad)
scas
pop
xchg
shl
mov
arpl
inc
jl
push
adc
dec
div
adc
dec
cs
mov
mov
jmp
inc
push
pop
jne
sub
bt
lods
pop
fwait
rcr
or
lds
lods
and
(bad)
xor
fiadd
iret
out
xor
xchg
dec
fldenv
mov
(bad)
popf
fldcw
mov
repnz
imul
pop
mov
into
adc
jns
push
fdivr
call
bound
xor
les
push
cmp
dec
addr16
mov
sub
sahf
xor
mov
outs
xor
sub
call
(bad)
rcl
pop
xchg
and
loopne
dec
xor
push
cdq
out
popf
pop
mov
add
aas
push
out
out
push
and
inc
add
jne
(bad)
sbb
add
data16
mov
pop
fld
sub
cmp
(bad)
lock
mov
xchg
xchg
pop
mov
cdq
(bad)
(bad)
hlt
nop
or
dec
xchg
and
dec
push
adc
(bad)
repz
movs
popa
sbb
fidivr
mov
lds
sbb
dec
lods
dec
addr16
std
in
fstp
lods
and
adc
(bad)
in
sbb
outs
jmp
jo
pop
cmp
jl
imul
mov
in
jo
repz
cli
mov
stc
push
mov
fcomp
mov
push
mov
dec
or
push
cmp
push
mov
push
sbb
clc
cmp
test
xor
or
xchg
test
pop
nop
inc
bound
pop
mov
pop
mov
(bad)
dec
mov
adc
inc
ja
retf
(bad)
cmp
out
jns
xchg
cmp
push
sbb
or
adc
std
fisub
xor
push
neg
fistp
loopne
hlt
sub
dec
jns
sti
jp
and
mov
adc
xor
dec
xor
add
sbb
aaa
pop
inc
cmp
push
push
sub
sar
cwde
mov
and
jo
xor
mov
inc
mov
mov
adc
cmc
dec
mov
push
lahf
mov
or
ret
push
adc
shr
push
out
jmp
jl
xor
call
xor
jge
push
icebp
(bad)
and
in
add
mov
and
push
ja
jae
rcl
sub
lods
mov
adc
xchg
aas
imul
jge
jecxz
add
jp
sbb
push
hlt
xchg
inc
lock
in
xchg
loope
sbb
fwait
lea
daa
and
xlat
imul
retf
pop
lods
inc
out
arpl
neg
retf
aas
dec
mov
lahf
push
sahf
xchg
scas
dec
icebp
fwait
sub
inc
inc
nop
je
and
fnstenv
repz
imul
movs
xchg
and
pop
and
pusha
mov
inc
ins
jbe
push
cmps
stos
in
xor
mov
mov
jmp
xor
sub
add
(bad)
fadd
test
inc
pop
xchg
cmp
inc
add
test
aaa
and
movs
mov
aaa
mov
mov
out
dec
jnp
test
cdq
(bad)
(bad)
stc
imul
lods
cmc
mov
dec
jmp
retf
push
push
push
pop
loop
and
retf
xchg
stc
dec
cs
sahf
mov
sub
retf
sub
mov
sbb
add
push
sbb
cmps
push
sub
sub
outs
int3
gs
retf
int
inc
jae
add
inc
pop
mov
stos
jg
jae
pop
mov
add
scas
pusha
les
mov
dec
sub
ret
sbb
cmp
sub
jl
xchg
outs
fild
dec
sbb
imul
dec
pop
sbb
stos
add
fimul
xchg
aam
fimul
jnp
fmul
dec
pop
cmp
popf
out
shr
into
dec
push
xchg
xchg
cmps
adc
dec
jnp
movs
cmps
gs
push
in
add
push
and
scas
push
arpl
xchg
jo
xchg
out
dec
mov
sub
or
test
mov
mov
es
and
out
and
fstp
daa
mov
pop
out
sub
jge
sbb
ss
fistp
ret
mov
data16
and
out
cmp
cld
ja
cmp
aad
popa
xor
in
faddp
out
mov
push
jmp
xor
or
sbb
jmp
xor
dec
sbb
xlat
push
lds
and
pop
jl
call
dec
cmp
inc
push
push
push
nop
mov
rep
lahf
in
pop
lock
leave
mov
mov
mov
loop
(bad)
cld
outs
fisttp
add
dec
jns
test
sbb
jmp
mov
mov
pushf
xchg
out
sbb
ds
call
out
rcl
add
mov
mov
push
sahf
cmps
push
xor
xor
in
popf
pop
mov
cli
xchg
mov
ret
shr
push
cmp
gs
gs
mov
repz
adc
or
arpl
dec
nop
dec
push
xchg
add
push
(bad)
leave
lds
pop
or
or
jecxz
aad
dec
bound
in
dec
cld
cmc
jae
mov
(bad)
sub
test
and
shr
jbe
dec
(bad)
out
aad
imul
jmp
sbb
es
cmp
mov
mov
mov
sbb
mov
mov
test
bound
mov
bound
std
cmc
mov
xor
pop
test
adc
add
xchg
arpl
in
push
jmp
add
pushf
dec
fiadd
(bad)
ins
ret
std
sbb
in
lds
xchg
mov
les
dec
sub
jmp
mov
in
sbb
cs
test
mov
cmps
popa
fwait
stc
jge
neg
pop
mov
setne
mov
retf
std
hlt
add
mov
inc
aas
aam
inc
push
ret
cmp
xchg
xchg
cmc
jmp
fidivr
addr16
(bad)
xchg
fidiv
add
sbb
jne
das
adc
aas
iret
inc
xor
inc
sbb
out
sbb
dec
xlat
retf
adc
mov
pop
in
inc
jne
ins
jge
pop
push
mov
push
mov
jns
dec
pop
cwde
and
sbb
inc
cmp
popf
jecxz
push
sahf
sahf
inc
xchg
mov
xchg
movs
sbb
xchg
mov
jnp
or
or
jg
aad
jnp
in
jmp
pop
add
jo
cmp
and
sbb
mov
div
pop
cmp
sbb
xchg
dec
(bad)
dec
js
cld
je
es
bswap
lods
pusha
pop
and
pop
in
dec
mov
scas
mov
cmp
xchg
dec
ds
js
lock
mov
dec
mov
cmps
call
xchg
pop
les
test
or
sbb
or
adc
push
and
xchg
xor
cmp
or
and
jle
adc
arpl
push
sub
jle
lods
(bad)
shl
cwde
cmp
(bad)
jl
outs
scas
mov
sbb
cmp
cmp
or
out
push
aas
pop
mov
push
mov
push
push
enter
(bad)
fdivr
cmp
and
xor
in
mov
mov
(bad)
or
sub
mov
jmp
fadd
cmc
sub
movs
xchg
out
mov
cld
push
xchg
pop
cmp
sub
add
stos
lahf
sbb
stc
out
mov
ret
jns
push
mov
add
inc
aaa
dec
dec
int
pop
sbb
gs
shr
ja
out
xor
(bad)
arpl
cli
cwde
es
or
rol
or
mov
jp
stos
pop
(bad)
shr
dec
arpl
cld
test
xchg
cli
mov
mov
and
rcr
lods
sub
in
cmps
fcomi
adc
scas
cld
mov
mov
hlt
std
(bad)
in
xchg
jg
cwd
xchg
xchg
ja
fisub
cmp
ds
mov
mov
or
enter
aam
shr
mov
rcr
sub
mov
jmp
test
lds
repnz
in
pop
mov
xor
ds
and
add
cld
xor
push
push
cmp
and
and
mov
push
call
mov
fiadd
out
mul
adc
dec
push
ss
aam
cmc
mov
in
movs
mov
push
shl
daa
pop
call
or
fst
xchg
cli
not
fwait
mov
or
clc
pop
(bad)
add
call
test
push
repnz
std
repz
mov
mov
push
fsub
dec
lea
je
push
test
(bad)
push
adc
pop
inc
ins
lea
sub
and
data16
push
arpl
jo
fisubr
xchg
mov
gs
das
out
(bad)
pushf
push
push
fidivr
cld
test
jae
icebp
mov
mov
dec
add
push
inc
cmps
std
(bad)
neg
or
xchg
cmc
std
sub
movs
fist
pop
rcl
popf
fwait
xchg
ret
imul
jb
xchg
jns
add
pop
popf
sub
call
aas
mov
xlat
loop
jmp
cmps
xchg
push
int
test
dec
push
push
stos
mov
in
push
pop
int3
jle
into
in
out
pmaddwd
cmps
lds
jmp
std
fdiv
dec
mov
rol
push
push
ds
arpl
cmps
push
inc
add
out
or
lea
cmp
movs
lds
add
out
or
xchg
inc
frstor
stc
out
add
addr16
pop
push
retf
jb
inc
loope
pop
cmps
adc
dec
cmp
nop
in
ins
jns
add
dec
loop
add
xchg
jp
inc
imul
mov
or
xchg
sbb
in
jo
int
mov
sbb
adc
jp
popa
push
xchg
xor
popf
repz
jmp
out
dec
out
in
loop
psubsw
jb
inc
pop
ins
push
jnp
mov
in
jg
adc
push
xchg
cmps
sub
dec
sub
pop
iret
out
sbb
xchg
xchg
call
mov
push
sub
pop
cmp
shr
dec
pop
repnz
test
lods
pop
and
mov
jae
cmps
or
add
mov
xor
dec
into
pop
fisub
popf
and
adc
xchg
fdiv
add
sub
out
xor
test
push
aas
pop
test
cmp
dec
ss
repz
add
push
and
or
and
loop
cwde
xchg
inc
lea
cmp
nop
out
(bad)
mov
pop
push
movs
pop
inc
pop
pop
mov
xlat
rcl
(bad)
push
mov
icebp
nop
inc
jge
mov
in
xor
push
pop
in
bound
(bad)
fwait
ins
ss
push
(bad)
cli
movs
jg
test
cmp
std
sbb
shl
(bad)
iret
jecxz
pusha
dec
jo
pop
or
hlt
(bad)
call
arpl
leave
push
ficom
(bad)
mov
test
add
mov
pop
mov
jecxz
rcr
out
jmp
mov
arpl
adc
(bad)
out
imul
out
xchg
loope
stos
xchg
xchg
dec
inc
in
stos
cmp
nop
enter
sub
leave
arpl
aaa
adc
(bad)
and
pop
sub
cmp
sub
(bad)
js
xor
xchg
nop
sbb
bound
cwde
sti
mov
bound
rcl
inc
sbb
adc
pushf
int
gs
xor
mov
mov
cmp
imul
jns
and
lds
dec
mov
mov
xchg
pop
push
sbb
test
push
adc
sub
jmp
jne
push
jmp
jmp
ret
fucomp
jo
je
ins
rol
mov
xchg
and
push
clc
iret
iret
jnp
shl
jns
and
js
test
fnstcw
fadd
int
mov
pushf
xchg
aaa
or
addr16
sub
jae
imul
push
or
push
arpl
popa
fsubrp
mov
sbb
add
imul
push
and
fnsave
and
dec
dec
out
scas
jb
int3
leave
sbb
push
cmp
mov
enter
xchg
in
hlt
sub
fstp
adc
mov
jmp
outs
and
psubusb
push
jno
add
retf
xor
call
out
pop
cwde
mov
mov
pop
scas
ret
and
mov
pop
mov
xchg
das
lods
icebp
aad
cdq
mov
rol
cmp
mov
int
xrelease
or
sub
cmp
imul
add
call
inc
iret
adc
push
add
mov
popa
nop
add
in
add
mov
sbb
jno
sub
pop
cmp
idiv
pop
mov
mov
repnz
or
test
(bad)
add
sar
mov
fild
adc
gs
loope
ficomp
mov
mov
dec
sbb
push
xchg
cld
push
test
test
outs
mov
jp
push
pop
popf
shl
inc
dec
jb
mov
dec
push
in
daa
test
stos
nop
pop
movs
js
iret
adc
dec
jle
jle
adc
push
(bad)
push
sbb
js
jae
xchg
xor
jns
and
loope
xchg
ficomp
add
ret
(bad)
pop
aas
jl
call
nop
jo
push
ror
sub
les
mov
popa
adc
mov
mov
adc
mov
aaa
test
jno
mov
in
repnz
pushf
adc
retf
stos
cmp
cs
xchg
loope
imul
dec
sbb
push
and
mov
mov
fist
mov
cmp
add
sub
call
mov
xchg
mov
xchg
jb
idiv
repz
fdivr
(bad)
sub
aaa
icebp
cs
cld
xor
retf
lea
fnstsw
test
gs
jo
cli
jmp
mov
sbb
jmp
fbstp
cmp
leave
div
jg
fisttp
shl
push
clc
mov
jnp
push
shr
clc
push
push
loopne
and
mov
fs
sbb
lock
xlat
cli
push
or
retf
sub
push
xchg
or
test
push
jl
adc
jmp
add
lea
rol
ins
mov
mov
adc
loope
loopne
test
cli
ins
dec
jb
add
xlat
sub
jo
mov
mov
idiv
inc
imul
scas
std
test
sbb
mov
fist
arpl
fs
repnz
pop
popf
test
cmp
jmp
(bad)
aad
data16
es
and
jo
or
jp
das
push
inc
pushf
push
mov
add
aas
(bad)
std
not
mov
or
dec
jg
pop
jge
inc
xchg
in
ficom
mov
mov
mov
mov
out
stos
and
stc
test
cmp
add
dec
lea
push
mov
push
shr
test
inc
cmp
fst
mov
add
xchg
jge
sub
call
push
xchg
jno
add
in
dec
dec
add
add
fld
lods
int3
xlat
lock
icebp
lods
mov
loope
sahf
sub
inc
stc
test
mov
out
cld
push
and
cli
test
cmc
mov
adc
das
dec
repnz
add
jecxz
mov
nop
pop
mov
push
mov
dec
and
dec
xchg
inc
push
stc
mov
or
aad
fwait
dec
mov
sub
les
pop
jg
sbb
mov
dec
mov
inc
jle
xor
aaa
mov
cld
jbe
sbb
repnz
(bad)
cmc
xor
cdq
push
sub
test
push
jmp
push
xchg
lds
sbb
xor
lock
lock
jl
popa
push
repz
jbe
lods
rol
mov
push
cmc
mov
push
aas
xchg
(bad)
push
mov
adc
mov
jmp
inc
inc
into
jp
in
mov
and
aaa
or
loop
test
into
(bad)
retf
stos
xlat
addr16
pop
iret
xchg
popa
std
test
mov
movs
fcom
repz
sbb
das
cs
mov
cmp
cmp
outs
jno
cmp
and
fsubr
fadd
add
in
push
test
xor
sbb
jmp
xor
add
xor
in
adc
push
ins
mov
or
and
or
sar
in
mov
adc
pop
fmul
arpl
fs
or
out
std
stos
sbb
mov
call
loop
jmp
pop
sbb
cs
call
es
shl
mov
lahf
sbb
fisttp
or
push
popf
jnp
adc
fwait
xchg
adc
mov
bound
cmp
cmc
mov
push
mov
shl
sbb
xor
pop
inc
mov
icebp
(bad)
mov
or
and
out
(bad)
cs
sub
repz
lods
sub
ja
xchg
ins
movs
pop
es
ins
inc
xchg
mov
imul
loop
xlat
loopne
fsub
fcom
stc
shr
sar
jg
fadd
je
lods
ret
enter
das
dec
call
je
in
mov
es
or
mov
cs
push
xchg
xchg
gs
ret
repz
mov
int3
lahf
ins
pop
les
nop
ficom
mov
and
mov
dec
arpl
cdq
in
je
int3
clc
inc
fbld
mov
ins
rol
jmp
sbb
out
add
ja
fs
loop
sub
dec
cmp
xor
in
push
lea
in
xor
test
pop
stc
or
push
xor
add
out
sbb
dec
push
xor
cmp
dec
loope
inc
and
add
sbb
daa
(bad)
das
bound
loope
ror
sub
adc
cmp
pop
and
call
mov
fs
or
leave
inc
and
adc
cmps
inc
push
or
daa
std
inc
cmc
mov
ret
addr16
xchg
xor
mov
test
retf
outs
jg
shl
das
fimul
(bad)
sbb
call
pop
inc
mov
repz
mov
(bad)
arpl
std
pop
lock
fistp
inc
dec
adc
sub
pop
ss
xchg
imul
xchg
xchg
xor
paddw
sbb
std
cmc
in
push
xchg
cwde
dec
inc
ins
cmc
pushf
out
xchg
retf
inc
xchg
cmc
idiv
je
cli
imul
mov
adc
xlat
aas
sub
out
icebp
dec
fwait
out
push
mov
jo
dec
shr
jecxz
cwde
xchg
(bad)
in
mov
lahf
(bad)
test
hlt
mov
cmp
repnz
adc
mov
cmp
mov
sbb
mov
adc
and
xlat
loope
mov
inc
sbb
jnp
retf
xor
das
push
inc
in
mov
mov
mov
jg
push
pushf
xchg
mov
lock
lods
adc
adc
or
mov
push
leave
xchg
movs
nop
mov
outs
inc
stos
dec
mov
outs
inc
call
adc
loope
add
or
mov
push
ss
arpl
push
and
adc
push
repz
ins
rcl
test
xchg
add
inc
pop
add
pop
rcl
add
push
repnz
repnz
push
jns
xor
int
jae
dec
push
(bad)
retf
in
inc
jae
add
ss
mov
daa
outs
nop
sub
jle
pop
mov
inc
ret
cmp
xchg
and
mov
inc
(bad)
xor
das
into
cmp
nop
inc
sbb
and
out
cmp
jmp
inc
neg
leave
jecxz
xor
mov
ja
lods
xchg
ja
xchg
in
dec
mov
je
sub
dec
out
cmp
cmc
int
inc
push
iret
mov
ror
jmp
popf
mov
mov
packssdw
xchg
and
imul
adc
mov
test
sub
and
cmp
add
sar
or
leave
movs
in
pushf
mov
push
sbb
dec
test
sub
not
push
stos
fstp
jae
nop
inc
push
and
clc
aaa
mov
pop
mov
ret
or
not
cmc
je
pause
add
xor
lods
jle
inc
sar
mov
stos
(bad)
push
(bad)
push
shr
ins
mov
jnp
fild
outs
mov
pop
sbb
mov
stos
mov
outs
fld
cdq
pop
nop
daa
retf
mov
mov
test
add
das
fidivr
pop
xor
movs
jp
out
imul
push
stc
mov
cmp
xor
pop
mov
loopne
cld
xor
xor
das
punpckhdq
push
and
dec
scas
out
jae
retf
add
adc
test
adc
dec
out
ret
cmp
dec
les
lahf
xchg
sub
imul
out
add
mov
movs
mov
movs
pop
mov
scas
xchg
pop
mov
jecxz
inc
mov
rcl
mov
fwait
jae
push
xlat
cmp
adc
fucom
xchg
or
sub
sub
ficom
stos
jg
xor
mov
and
mov
mov
mov
fdivr
dec
in
jecxz
inc
pusha
sub
jmp
cs
mov
mov
aaa
ss
test
fstp
pop
jge
ror
push
xor
pop
arpl
sbb
lock
shl
pop
iret
push
(bad)
mov
add
adc
call
shl
je
adc
fisubr
(bad)
sub
fs
cmp
pop
and
iret
mov
push
loopne
mov
adc
outs
adc
scas
dec
mov
push
(bad)
scas
jnp
cmp
stos
xchg
xor
jae
push
movs
cwde
push
mov
hlt
inc
addr16
pop
pop
pusha
enter
idiv
inc
pusha
pop
loop
pop
cs
int3
daa
add
movsx
and
imul
call
ret
in
cld
cmp
dec
scas
dec
cmps
inc
movs
sub
mov
lea
adc
inc
fcomp
add
cmp
ja
mov
jle
ja
mov
(bad)
sub
adc
sbb
loope
pop
addr16
aaa
push
xchg
mov
inc
ret
out
stos
sub
mov
or
mov
cmp
sbb
stos
mulx
dec
jg
or
mov
cmp
ins
int
cmp
push
out
jb
pop
xor
jbe
data16
mov
mov
popa
push
loop
and
inc
int3
mov
popf
add
mov
cmps
movs
cmp
pop
out
ins
dec
push
sahf
push
ror
cs
lea
icebp
into
mov
mov
cs
(bad)
(bad)
push
iret
sbb
mov
sub
pop
popf
mov
gs
dec
adc
jnp
test
sub
dec
retf
repnz
push
pop
sub
xor
mov
cmps
adc
and
adc
loop
inc
mov
lahf
pusha
pop
retf
cmp
movs
out
cmc
mov
fwait
in
int3
jbe
test
stos
ds
ror
lock
rcl
xchg
sbb
aas
mov
mov
hlt
aam
(bad)
jge
pusha
lahf
cmp
add
retf
jle
mov
call
cmps
outs
mov
loop
jo
pusha
ficomp
pop
aas
test
adc
out
pop
fwait
jmp
push
test
mov
aam
jp
xor
mov
xor
mov
or
pusha
inc
jge
and
sbb
push
mov
sar
dec
jne
pop
std
ss
addr16
mov
sub
int
(bad)
into
fucomi
xor
push
out
push
clc
and
jbe
sti
mov
(bad)
push
fwait
scas
call
and
test
and
add
ja
dec
lock
cmps
jb
out
or
aas
xor
cmp
adc
push
mov
mov
test
add
popf
push
xchg
cmp
pop
scas
push
sbb
adc
inc
fwait
adc
retf
xchg
mov
pop
adc
ja
jmp
lea
mov
mov
cmpxchg
mov
out
sub
aam
movs
jbe
push
sbb
lods
mov
push
xor
cmp
jg
dec
mov
cmc
in
dec
movs
dec
inc
shr
dec
shl
leave
xchg
imul
ja
sub
or
xchg
stos
push
not
movs
pop
in
sbb
pop
adc
pop
mov
test
push
clc
xchg
jge
or
mov
pop
xor
dec
jmp
test
adc
and
idiv
ja
jns
stos
and
mov
jmp
mov
sahf
lock
movs
popf
popf
sbb
xor
pop
arpl
fwait
icebp
sbb
or
sub
add
ins
popf
(bad)
xlat
adc
in
dec
fadd
cwde
cmc
mov
xchg
dec
cmps
cld
(bad)
mov
gs
pop
inc
mov
jmp
xlat
sbb
or
or
movs
push
mov
add
adc
and
stos
sbb
mov
jb
les
es
xchg
repnz
sbb
cmp
jle
int
jnp
cmc
push
(bad)
arpl
rol
repz
out
clc
inc
aas
mov
jae
je
jge
dec
cs
stos
push
push
adc
repnz
inc
mov
and
ret
idiv
or
iret
mov
in
mov
and
jmp
adc
pop
pop
or
test
push
add
xor
inc
es
pop
retf
push
jno
xchg
int3
lds
pop
add
inc
or
or
cmps
sbb
(bad)
adc
sub
scas
jno
add
mov
inc
add
out
xor
fwait
dec
cwde
jmp
mov
xor
dec
daa
out
jle
cmp
mov
aaa
xor
es
fdivr
push
adc
xor
add
loop
adc
push
mov
call
(bad)
(bad)
test
jp
addr16
xchg
(bad)
ds
push
test
jecxz
cmp
ja
les
in
sub
sbb
dec
push
jns
xchg
sbb
cmp
cmp
add
or
mov
icebp
jl
std
je
xchg
mov
xor
cwde
ret
cmp
jecxz
add
cwde
xor
cli
mov
shr
test
test
into
cmc
cld
movs
aaa
mov
pop
mul
mov
xor
sbb
stos
aas
daa
fst
push
and
les
stos
shl
fs
int3
mov
lods
or
mov
or
dec
cld
rcl
loopne
push
or
jne
mov
out
and
(bad)
push
pushf
adc
call
inc
or
and
pop
aam
scas
repnz
xchg
daa
dec
dec
mov
outs
sbb
cmps
aam
xchg
inc
ror
push
mov
cmc
mov
fsubr
push
ja
jle
les
jle
fbld
push
jne
(bad)
pop
add
sbb
xchg
xchg
and
retf
faddp
lock
adc
push
cmp
loopne
sbb
cmp
jp
stos
sar
fwait
cmp
xchg
and
adc
pop
lea
mov
and
xchg
repz
push
push
sub
xchg
cwde
mov
add
xor
loopne
add
repz
aas
retf
mov
adc
sbb
sub
jo
jnp
lock
pop
jle
sbb
xchg
sbb
fwait
ins
repnz
data16
retf
loopne
xchg
mov
jle
sbb
iret
rcl
mov
xor
mov
les
(bad)
fisub
(bad)
test
cmp
repz
pop
imul
dec
mov
out
leave
cmp
(bad)
lock
mov
lea
lock
(bad)
(bad)
aaa
adc
dec
ret
adc
or
inc
xor
cld
cs
fimul
cmp
sub
push
ss
in
jo
cmp
jle
bound
out
ja
xchg
test
aaa
adc
call
setno
or
cmp
and
sub
pop
shl
sub
loopne
mov
xchg
pop
cmp
(bad)
cmps
xchg
movs
aad
fiadd
retf
das
jo
jns
aad
jle
dec
inc
dec
les
loope
aam
lahf
addr16
leave
repz
ficom
gs
(bad)
pop
int
jmp
out
stc
fsub
cmps
popf
pop
xchg
mov
jo
ss
loope
push
cmp
jge
fsubr
mov
mov
or
or
adc
imul
call
(bad)
xchg
lock
and
push
(bad)
test
pop
das
and
stc
sbb
mov
and
mov
and
and
push
fld
push
fs
aad
xchg
fidivr
sub
call
cmps
sub
test
add
stos
mov
jp
loope
(bad)
data16
push
mov
jle
out
ins
shl
cmp
jmp
add
cmp
loopne
mov
sbb
xchg
jo
mov
add
jp
mov
xor
icebp
adc
sbb
(bad)
in
lahf
push
inc
ror
aaa
dec
sub
mov
dec
popf
mov
jbe
push
mov
inc
adc
mov
xchg
sar
(bad)
sub
arpl
xor
popf
rol
cs
mov
je
cmp
jmp
int3
lea
icebp
in
shr
pop
(bad)
cmp
cmp
adc
in
lods
imul
cmps
mov
pusha
gs
mov
fwait
xor
shl
clc
mov
sub
push
imul
aas
dec
push
cli
sbb
aam
dec
ds
jge
push
or
dec
aas
sbb
js
rcl
std
js
cmc
jmp
cmp
xor
pand
sub
popf
gs
and
arpl
in
xor
movs
hlt
mov
repz
lods
push
ss
mov
cmps
jg
or
and
xchg
mov
fcmovnb
jmp
adc
pop
mov
ds
sbb
hlt
aam
lods
push
xor
mov
push
jae
add
outs
xchg
jnp
cmp
push
inc
lds
outs
movs
inc
adc
xchg
jae
dec
(bad)
fisubr
mov
mov
adc
clc
add
adc
lahf
xchg
sahf
fldenv
repz
push
lds
sbb
pop
in
add
add
inc
(bad)
and
pop
mov
jmp
lods
or
(bad)
jecxz
aaa
cmps
jle
sub
cli
test
into
mov
mov
ror
enter
(bad)
mov
push
xchg
mov
sub
repz
ss
sub
hlt
aam
shl
sahf
mov
test
sbb
sti
std
ret
mov
add
and
cmp
dec
jmp
lahf
or
addr16
ins
inc
fs
inc
call
shr
mov
movs
ret
sbb
inc
mov
pop
xor
aam
add
cmp
mov
data16
mov
xor
xchg
sti
jb
pop
lock
test
stc
sbb
cmp
enter
scas
pop
push
add
call
push
ins
sub
inc
(bad)
jbe
cli
sub
out
xor
cmp
enter
dec
sbb
or
push
imul
ja
and
data16
jno
popf
hlt
push
and
call
or
(bad)
cwde
mov
in
mov
and
mov
sub
cli
data16
pop
pop
bound
stos
fld
cwde
mov
out
lods
jnp
movsx
mov
and
sub
mov
shr
out
outs
loop
add
in
push
push
xor
loope
cmps
loop
fdivr
cs
dec
inc
xor
out
in
sahf
pop
cld
int3
jmp
mov
and
loope
adc
mov
inc
jecxz
repnz
add
push
(bad)
repz
cmp
pop
adc
cmc
adc
and
and
sahf
mov
add
add
shl
cli
jns
mov
or
xor
pop
ucomiss
ja
sti
por
adc
std
test
mov
jmp
dec
fld
pop
es
adc
cmp
jecxz
(bad)
or
inc
pushf
leave
cli
in
in
ins
pop
leave
or
pop
ret
or
xchg
call
(bad)
or
adc
xchg
xchg
rcr
stos
jno
sub
jne
xchg
pop
scas
retf
call
stos
addr16
call
adc
leave
sbb
clc
xor
pop
mov
mov
rol
fmulp
cmp
or
mov
sub
add
or
dec
clc
cli
or
fstp
jge
mov
jecxz
cld
loop
loop
out
daa
es
jnp
cdq
lds
mov
sub
fwait
in
fisubr
jnp
pop
retf
xor
fnstcw
mov
int3
add
or
adc
adc
imul
push
jge
add
jbe
test
in
sub
jecxz
cmp
lahf
cmp
(bad)
pop
pop
test
retf
ins
pop
jne
sti
(bad)
loope
jne
clc
push
movs
add
xor
jne
mov
movs
jg
jmp
mov
ja
xor
aaa
inc
shr
stos
or
test
js
nop
push
bound
(bad)
out
mov
fisubr
mov
add
imul
mov
(bad)
xchg
or
inc
ins
cmps
pop
jno
ret
nop
xchg
sbb
push
ret
(bad)
cmps
dec
test
sbb
push
out
inc
stc
mov
jle
add
dec
push
xor
xor
loope
cmp
(bad)
jmp
pop
std
pusha
(bad)
xor
rcr
test
ins
adc
lods
aad
xchg
xor
test
rcl
lods
mov
(bad)
lahf
prefetchw
or
jb
loopne
pop
jle
mov
xlat
add
fimul
push
push
mov
mov
jge
ror
push
out
mov
retf
or
shl
mov
pop
dec
pop
xchg
adc
stos
scas
cmp
xor
sbb
pop
sbb
or
lahf
call
and
pop
sbb
push
cmps
ja
ja
and
push
arpl
and
jns
pushf
shr
mov
sbb
and
dec
inc
mov
imul
xchg
mov
or
es
jmp
ret
daa
mov
mov
iret
cmp
push
push
mov
sbb
enter
sub
sti
pop
(bad)
popa
(bad)
shr
jge
cmp
cmp
in
in
push
out
sub
hlt
call
repnz
xlat
push
clc
in
dec
add
pop
dec
sub
test
scas
xchg
xor
jo
lahf
xchg
dec
(bad)
jecxz
mov
jecxz
mov
aas
stos
dec
jle
mov
xor
fxch
(bad)
fmul
call
aaa
mov
hlt
outs
shl
push
xchg
pop
jne
sub
lea
dec
pop
retf
lods
das
fadd
add
clc
clc
repnz
or
cld
mov
dec
dec
pop
sbb
lock
adc
or
sbb
inc
jb
ss
(bad)
loopne
leave
push
xlat
xchg
mov
dec
aad
xchg
clc
pop
hlt
xchg
pop
mov
xchg
xor
retf
arpl
ins
stc
arpl
loope
js
push
jb
out
jo
push
inc
add
mov
out
adc
repnz
pop
mov
out
sbb
and
clc
mov
out
inc
and
js
aas
daa
pop
mov
pop
mov
push
mov
cmp
inc
test
in
fdivr
aam
enter
sub
mov
loopne
pusha
sbb
dec
es
push
or
or
jmp
and
pop
loop
inc
pop
mov
call
cmc
sbb
add
sti
data16
outs
adc
push
mov
pop
cld
in
nop
adc
mov
push
repnz
dec
pop
ins
movs
std
add
pop
popf
repz
enter
dec
add
test
inc
xor
in
es
ficomp
lahf
add
pop
retf
cmp
push
ja
mov
cmp
sbb
jmp
xor
jmp
mov
jo
pop
dec
and
jnp
leave
inc
js
les
(bad)
push
adc
pop
dec
add
dec
jp
scas
cdq
sbb
arpl
test
rcl
pop
lock
push
xchg
xchg
xchg
cmp
mov
fstp
jmp
outs
scas
push
add
(bad)
fisubr
mov
inc
mov
push
(bad)
enter
xchg
cmp
sbb
dec
shr
fimul
xchg
out
adc
cld
xchg
inc
cld
adc
stc
neg
into
imul
push
scas
pop
xor
add
scas
shl
enter
js
imul
add
adc
jmp
mov
sar
pavgw
test
mov
ficomp
dec
iret
outs
jecxz
adc
jmp
int
xor
sti
sub
xor
xchg
(bad)
enter
fwait
sbb
jne
movs
xor
addr16
divps
sub
push
(bad)
ror
rcr
sahf
es
and
cld
push
sahf
fiadd
mov
rcl
adc
mov
pop
and
cmps
adc
xchg
daa
cmc
ret
jl
xchg
test
cmc
sub
je
jnp
mov
ss
rcr
push
or
mov
cmc
arpl
in
out
sub
mov
mov
fwait
xchg
mov
jae
mov
js
mov
out
or
rcr
cmps
mov
test
outs
push
jl
sti
mov
(bad)
and
jmp
nop
or
les
adc
arpl
(bad)
or
ins
push
test
sub
lds
sbb
xor
in
jae
push
ins
jmp
push
xor
cmp
mov
cmp
cmc
add
outs
(bad)
sbb
sub
mov
test
arpl
imul
movs
inc
cwde
jecxz
jo
out
xor
fnstenv
push
jmp
jle
popaw
jo
(bad)
nop
push
gs
fwait
call
jae
adc
inc
and
xor
mov
fbstp
movs
mov
fs
lods
sbb
enter
jmp
fdiv
cwde
jae
sbb
xchg
sbb
jno
imul
pop
cmp
gs
nop
aad
add
sbb
int
and
jns
fmul
inc
lods
inc
cmp
mov
jbe
pop
push
inc
fmul
lahf
cld
clc
jo
and
mov
ins
shr
add
adc
xchg
xor
call
jge
dec
push
pop
ffreep
pop
inc
test
rol
fdecstp
jo
loop
in
inc
int
ret
sbb
shl
xchg
test
add
or
pop
xchg
and
pop
ja
aaa
pop
xchg
hlt
popa
aad
or
mov
xchg
test
div
adc
int
mov
sub
jae
fwait
sub
scas
mov
leave
sti
sbb
push
popf
inc
push
push
jo
clc
cmp
cmps
jle
je
das
jne
dec
add
jge
pop
or
xchg
loope
push
xchg
(bad)
xor
aam
pop
jno
jl
in
outs
lods
push
aas
push
cmps
iret
push
mov
adc
mov
jl
inc
lock
sbb
mov
inc
xlat
imul
jae
movs
mov
mov
inc
and
rcr
cmp
das
inc
daa
fild
retf
add
mov
cmps
push
cmps
out
cmp
pop
leave
push
enter
inc
int3
ret
jns
fstp
jmp
mov
pop
mov
(bad)
jl
mov
mov
push
(bad)
jmp
xor
sahf
aad
push
pop
cs
cmp
enter
and
rol
push
mov
jecxz
clc
addr16
fwait
pop
cmovno
adc
mov
or
sahf
ds
cld
into
mov
pop
hlt
je
imul
cli
mov
sti
dec
cmp
and
rcl
pop
lock
int3
sti
ss
add
int3
cmp
push
call
pop
aad
adc
(bad)
mov
sub
cwde
popf
sbb
es
pop
mov
adc
faddp
in
jb
cmp
and
cld
push
cli
lock
sbb
loop
clc
push
scas
jle
sbb
jecxz
and
cwde
jge
out
rol
adc
add
jmp
sbb
mov
bound
mov
adc
imul
mov
test
gs
mov
ficomp
xchg
push
dec
sub
call
push
cld
das
jns
lds
mov
xchg
in
lods
push
call
cwde
push
jbe
lahf
inc
aaa
pop
out
call
mov
out
jg
das
inc
mov
enter
pusha
jecxz
imul
es
inc
and
sbb
addr16
push
icebp
jl
sub
adc
fwait
mov
xor
pop
repnz
xor
mov
(bad)
pop
in
inc
call
adc
mov
jp
(bad)
nop
mov
js
scas
push
mov
pop
jmp
mov
pop
(bad)
sub
mov
push
loop
push
pop
cmp
pop
adc
pop
push
fdivrp
push
enter
sbb
pop
inc
sbb
not
rcl
push
cmp
sub
mov
xor
or
cmp
pushf
cmc
lds
lahf
and
dec
add
cmp
pop
and
imul
pop
int
mov
leave
xor
pop
sub
std
scas
mov
repz
jmp
push
and
cmp
call
out
mov
jg
mov
xor
mov
scas
shr
popa
ja
mov
sub
jmp
popa
mov
imul
ins
loopne
clc
ja
sahf
xchg
sub
in
retf
pop
adc
test
jp
mov
(bad)
out
cmps
cmp
test
fstp
lock
push
(bad)
js
out
mov
cwde
out
imul
cmc
jle
cmp
or
push
and
cmp
in
out
cld
shl
mul
inc
mov
les
cdq
dec
push
cmp
mov
hlt
push
popf
mov
cmp
cmp
add
rdpmc
shl
jmp
push
sub
clc
scas
or
int
pushf
iret
jmp
ret
jecxz
leave
test
lahf
fild
inc
cmp
xor
popa
xchg
cmp
movs
sbb
cdq
aaa
sahf
add
pop
and
aaa
and
mov
jmp
jns
dec
add
fwait
jno
jnp
enter
push
leave
or
test
cld
or
xchg
lock
add
adc
stc
fs
xchg
ja
xor
sti
or
jae
mov
in
ds
mov
dec
fs
fstp
daa
aad
sbb
pop
pusha
jo
not
movs
fst
repnz
cmp
mov
push
jae
pop
scas
fcom
cmp
cli
pop
cmp
sar
push
mov
hlt
dec
lods
outs
hlt
push
out
test
test
stos
inc
icebp
mov
jecxz
out
call
arpl
inc
mov
(bad)
rcr
(bad)
pop
dec
jae
(bad)
sar
out
and
stos
sub
pop
mov
loope
add
(bad)
cmovb
outs
call
pop
push
add
aam
inc
pop
sub
pop
in
xor
test
inc
ds
inc
ins
adc
lock
daa
je
repz
mov
sti
dec
cmp
mov
or
cmp
repnz
fdecstp
mov
es
lahf
pop
pushf
dec
inc
push
addr16
ins
(bad)
and
push
jl
inc
sbb
outs
(bad)
cmp
adc
jp
pop
retf
adc
(bad)
test
xchg
sub
xchg
dec
jb
dec
mov
mov
mov
outs
bound
cld
pop
mov
aas
adc
xchg
mov
repnz
rol
and
lods
lods
mov
cdq
cmp
jo
cmp
mov
fst
inc
call
pusha
sub
movs
sti
repnz
jo
dec
retw
adc
mul
outs
inc
lds
inc
imul
(bad)
call
push
inc
sbb
mov
leave
fisub
push
scas
repnz
stos
xor
out
stc
lods
bnd
push
cmp
sar
jns
jae
xor
mov
sub
or
lea
mov
or
dec
popa
mov
out
fldcw
ja
dec
dec
outs
push
(bad)
jp
jno
xor
scas
pop
clc
inc
dec
enter
xor
loopne
popa
cmps
test
jne
sbb
xlat
push
mov
out
jge
test
out
adc
clc
xchg
daa
imul
or
test
sbb
retfw
sbb
pop
int
xor
aas
cmp
retf
popf
sub
add
mov
add
dec
mov
jns
arpl
jecxz
mov
add
cmps
dec
out
scas
lods
cmp
nop
nop
inc
(bad)
fsubr
shr
inc
adc
jl
stos
xor
or
jne
cmps
cdq
js
jge
pop
jg
and
sbb
push
pop
xchg
cmp
xchg
xchg
fcom
sub
cmp
ja
aaa
and
xlat
ret
mov
push
cli
loop
das
dec
mov
adc
cli
mov
jmp
jp
in
repnz
aas
cmp
movs
popa
cwde
icebp
rcl
jge
lods
mov
cli
push
push
inc
inc
adc
iret
sbb
xor
pop
in
add
je
stos
in
iret
inc
aad
scas
adc
mov
pop
xchg
jl
xor
stos
and
in
cmp
scas
in
pushf
mov
sbb
jl
mov
cdq
pop
pop
mov
icebp
stos
in
les
push
xchg
clc
fucomip
jb
ja
aam
addr16
cwde
cld
mov
cmps
sub
popf
fmul
pop
jle
cmps
mov
push
cld
and
xchg
js
sahf
fcom
daa
lea
mov
jnp
cmp
xchg
outs
es
outs
mov
sub
std
add
sbb
push
addr16
in
jmp
lods
mul
mov
retf
xchg
out
fwait
(bad)
cld
call
or
int
popf
dec
mov
test
adc
ror
stos
f2xm1
repz
push
lods
xchg
aaa
loop
(bad)
xchg
retf
or
in
xchg
xor
cmp
das
adc
in
ret
out
dec
pop
in
push
(bad)
neg
mov
mov
sbb
cdq
cmps
add
data16
shr
add
sbb
dec
(bad)
sub
stc
mov
int
xor
ds
retf
push
out
sub
fs
addr16
cwde
test
daa
pop
fwait
add
in
retw
in
lods
aas
xor
int3
(bad)
sti
add
rol
(bad)
sbb
push
pop
fcmovnu
in
fstp
and
adc
jno
pop
movs
dec
call
les
out
fmul
and
mov
aam
call
aad
cs
xor
xchg
lods
sub
call
mov
cld
add
mov
leave
mov
ror
or
xor
mov
mov
es
adc
push
js
mov
scas
jge
daa
fwait
ret
and
fstp
dec
xor
cmp
pushf
out
lds
jmp
fisubr
lods
pop
pop
sar
xchg
push
xchg
seto
js
sti
stc
pop
dec
(bad)
test
xchg
xor
or
adc
pop
jl
aad
aam
cmp
popf
push
syscall
pavgb
or
daa
fsubr
xchg
rcl
lea
sbb
mov
rol
xor
aad
mov
test
inc
sub
in
movs
inc
jae
push
nop
xchg
push
or
test
sbb
sub
inc
fisub
shl
xchg
mul
inc
adc
nop
shl
add
jb
in
sahf
int
pushf
ror
popf
jmp
ret
add
sbb
aad
cmp
and
adc
mov
(bad)
ror
dec
aaa
mov
sbb
int3
bound
cmp
jg
dec
cmps
aaa
sub
sahf
inc
pop
xor
push
and
or
or
in
cli
(bad)
fsubr
mul
cdq
or
rcl
mov
jae
int3
dec
dec
adc
sti
pop
sbb
mov
mov
adc
ja
xor
call
lods
mov
sub
jns
dec
mov
ins
call
mov
push
jae
mov
lea
push
xchg
in
fisub
and
fcomp
push
(bad)
jle
inc
nop
jae
inc
stos
add
add
sub
(bad)
inc
in
pop
jg
mov
popa
xchg
ins
adc
call
std
pop
jmp
aas
and
nop
repnz
sbb
xor
aaa
lahf
es
pop
jmp
mov
mov
imul
jbe
xlat
adc
pop
adc
push
imul
sbb
retf
aas
jo
leave
add
dec
inc
jo
push
popf
out
clc
mov
jno
mov
inc
mov
or
push
aam
iret
inc
and
shr
mov
ja
(bad)
cmp
cdq
hlt
cld
jl
aam
xchg
or
jae
shl
add
(bad)
icebp
rcl
mov
div
out
pop
or
or
stos
sub
mov
inc
xor
js
lds
loop
jae
pop
dec
loop
inc
loop
mov
aam
test
mov
cwde
sbb
std
or
xchg
or
ins
gs
(bad)
push
aaa
mov
dec
push
mov
mov
inc
xor
cwde
push
inc
ins
sub
aaa
jg
outs
cmp
rcr
out
and
sbb
inc
pop
cmp
leave
mov
xchg
xchg
icebp
daa
call
xor
sbb
(bad)
add
cs
jnp
outs
aaa
cmp
test
fst
push
hlt
mov
out
cdq
adc
adc
js
inc
push
mov
ja
mov
xlat
xchg
ja
push
mov
cmps
push
xor
popf
mov
jae
jns
push
rcr
rol
jnp
sbb
sbb
int
add
movs
mov
mov
retf
xor
ret
mov
cmps
mov
pop
dec
movs
jg
in
pop
inc
bound
clc
sti
add
std
bound
cwde
adc
mov
fst
sub
jae
imul
jmp
xchg
and
call
pop
cmp
push
test
enter
ss
cwde
push
mov
popf
pop
rol
int
and
icebp
into
xchg
sar
add
push
sbb
pusha
dec
mov
xchg
jl
push
xor
je
cs
cmp
pop
out
add
push
mov
jl
shl
mov
loope
test
push
mov
jmp
mov
mov
loope
lahf
mov
scas
outs
sbb
cmp
push
push
jnp
sbb
jno
jmp
mov
jecxz
xchg
(bad)
(bad)
frstor
int
adc
or
gs
push
lahf
aas
retf
dec
test
test
aam
inc
push
jo
mov
in
push
popf
add
and
sbb
cwde
inc
popa
xchg
into
pop
jno
adc
or
dec
test
idiv
cs
(bad)
jp
es
dec
fcmovnb
adc
inc
stos
push
out
xor
bound
xchg
rcl
fistp
clc
out
aad
jmp
jae
pop
xchg
(bad)
(bad)
aaa
cwde
and
pop
inc
jmp
inc
daa
imul
cmps
sub
push
mov
or
call
in
into
cld
aas
stos
test
sbb
shl
fcom
adc
xor
adc
lods
les
and
loopne
add
inc
cmps
xchg
xchg
sti
mov
imul
or
fimul
inc
out
xchg
int3
push
push
mov
lock
mov
sbb
sub
out
jg
push
cmps
or
fstp
mov
xor
lods
das
stos
mov
mov
or
push
imul
stos
dec
xor
mov
sbb
mov
adc
dec
mov
imul
jnp
add
aas
xor
xchg
push
jp
(bad)
nop
xchg
cli
mov
aad
push
and
outs
loopne
mov
pusha
push
sbb
(bad)
retf
jne
das
push
cli
mov
xchg
push
push
pop
sar
sub
or
xchg
retf
sub
mov
sahf
mov
adc
lea
mov
sar
mov
fwait
cmp
xor
jnp
jl
push
out
or
mov
fwait
xchg
and
dec
js
ss
push
jae
mov
test
dec
dec
adc
(bad)
cdq
xor
pop
cmp
jg
out
enter
pop
retf
push
lea
daa
(bad)
jmp
xchg
sbb
loop
dec
cmp
shr
cmps
mov
clc
fldcw
ins
loope
arpl
call
ins
and
mov
and
test
adc
xor
lea
push
sub
outs
outs
data16
add
mov
pop
(bad)
cwde
cmps
ins
push
rcr
scas
dec
push
aas
lods
aaa
add
leave
xchg
ins
adc
into
sbb
xor
sar
sbb
arpl
add
ret
xlat
int
rol
lds
daa
pop
(bad)
imul
stc
int
js
jg
or
outs
test
stos
pop
iret
mov
dec
dec
fs
aam
add
ror
and
imul
stos
int3
hlt
scas
jns
les
jb
test
ret
sbb
aam
inc
ja
out
xchg
jb
sar
dec
adc
imul
mov
test
adc
push
jbe
sub
out
jae
ret
int
xchg
or
xchg
mul
mov
dec
pop
outs
xchg
(bad)
xor
jae
and
mov
mov
mov
inc
imul
ins
sbb
iret
fucomi
sahf
ins
push
test
call
cmp
es
xchg
test
dec
aad
xor
push
jno
jmp
popf
or
imul
add
(bad)
mov
mov
loope
or
and
sub
mov
(bad)
idiv
push
cmp
ja
xchg
(bad)
cmp
or
fsub
gs
sbb
cs
das
push
aaa
dec
sbb
inc
ins
in
or
sub
push
push
jl
shl
xchg
retf
or
shr
add
jnp
dec
jne
ins
mov
fwait
mov
sub
xchg
add
xor
adc
xchg
jno
add
dec
push
or
fs
daa
xchg
retf
popa
mov
pop
jno
xchg
jns
xchg
mov
xor
jae
xchg
push
lahf
in
cmps
sti
aam
fcomp
jnp
sub
or
lahf
out
rol
dec
jle
fucomp
aaa
jecxz
rcr
ins
out
cmp
movs
mov
xchg
int
lea
addr16
push
fwait
cmp
ss
stos
sbb
jbe
loopne
mov
sub
imul
cmp
mov
pop
jmp
sub
into
cld
popf
fldenv
pop
xor
ret
int
icebp
mov
jbe
dec
mov
loopne
inc
gs
int3
lea
ror
cmp
mov
mov
ret
out
stc
fist
repnz
sbb
call
xor
gs
imul
or
int
sub
mov
push
xor
(bad)
fstp
ja
icebp
arpl
int
add
(bad)
dec
cmp
mov
lods
jmp
inc
xchg
mov
sbb
stos
dec
pusha
cmp
sub
mov
dec
adc
out
rol
dec
inc
ins
repnz
pop
in
sub
enter
xchg
shl
retf
aam
xor
push
and
lahf
sub
es
add
cmp
cmp
push
sub
call
dec
pop
sti
sub
pop
push
pop
mov
lods
add
mov
cmp
pop
in
inc
stos
shr
cld
mov
and
call
enter
or
jns
pop
or
fidivr
in
sub
jg
scas
cmp
mov
stos
sub
add
(bad)
jno
and
adc
xor
or
cli
stos
ficom
and
ja
jmp
scas
int3
in
seto
and
lock
dec
push
fldenv
adc
ins
ficom
loope
loope
imul
(bad)
test
out
stos
xchg
shl
push
push
jb
lahf
je
call
jecxz
sub
mov
mov
call
fsub
mov
sub
jne
lea
jmp
push
jge
jg
mov
push
or
dec
push
je
adc
mov
stos
and
repnz
adc
dec
outs
or
mov
ss
push
jne
movs
or
inc
push
clc
push
sub
sub
and
rcl
push
and
xchg
add
xor
xchg
or
push
std
and
test
sub
in
je
sbb
or
xor
push
rcl
ja
adc
out
sub
bound
add
cli
cmps
jne
lods
mov
(bad)
cmp
dec
js
push
lods
sub
inc
aad
or
das
cld
imul
push
aaa
frstor
mov
fld
fldcw
xchg
cmp
icebp
pop
bound
dec
sub
icebp
(bad)
jno
retf
inc
push
inc
mov
dec
push
push
jno
mov
cmc
into
cs
mov
add
mov
pop
pop
test
mov
fwait
xor
popf
cmp
pop
(bad)
sbb
and
cmc
mov
ja
ins
mov
call
leave
fisttp
fdiv
pop
mov
push
pop
sub
mov
out
add
call
(bad)
repz
scas
loopne
mov
popa
push
mov
test
retf
jg
or
fisubr
mov
mov
jno
jb
mov
push
xchg
jae
push
ret
nop
sbb
cld
sub
and
cli
mov
addr16
pop
jg
mov
sub
in
fdivr
dec
test
out
dec
mov
or
push
xor
out
std
ds
mov
cld
xor
vpshlw
dec
jo
(bad)
outs
in
dec
mov
mov
mov
dec
xor
rol
cwde
xor
repz
push
xor
outs
jmp
add
push
cdq
cli
xlat
outs
aaa
jmp
adc
and
sbb
test
daa
mov
add
adc
ror
dec
pop
inc
dec
popf
gs
jmp
stos
jmp
icebp
repnz
inc
sub
xlat
add
sub
sbb
push
dec
in
lods
fadd
add
les
rcr
fdivr
(bad)
(bad)
imul
es
repz
imul
mov
clc
retf
(bad)
xchg
dec
inc
mov
xchg
std
inc
and
data16
sbb
cmp
out
stc
int3
loopne
pop
shl
(bad)
inc
sbb
adc
dec
sub
bound
(bad)
adc
clc
cld
stc
mov
jb
nop
ins
adc
and
lock
adc
sub
pop
xchg
loopne
int
retf
push
mov
fadd
add
or
inc
or
push
aad
data16
mov
push
stos
and
adc
stos
shl
mov
add
fwait
push
aaa
fcmovb
ret
faddp
mov
into
mov
push
mov
mov
mov
iret
ret
call
push
jl
adc
jo
dec
or
fsub
xlat
test
test
xor
loopne
aam
mov
or
and
ret
jbe
mov
or
ins
not
and
fidivr
mov
sub
mov
cmp
lods
pop
movs
jae
pop
dec
es
(bad)
jmp
dec
or
push
sar
sbb
mov
fsubr
loope
lock
repnz
out
jmp
in
push
xacquire
or
sub
fcmovu
clc
mov
sbb
cmps
(bad)
and
or
fsub
(bad)
adc
adc
aaa
xchg
aam
jnp
mov
mov
dec
sub
js
rcl
arpl
xor
sar
xchg
cmc
(bad)
test
in
pop
pop
cmps
adc
or
mov
push
add
clc
pop
pusha
sub
or
xchg
mov
jno
jp
jge
daa
and
aas
add
pusha
sbb
(bad)
push
xor
leave
nop
add
sbb
fistp
(bad)
sub
not
cmp
gs
pop
inc
scas
add
pop
sbb
mov
and
add
mov
in
add
sub
sbb
test
cmp
test
outs
(bad)
rol
sbb
xchg
clc
jmp
cmp
mov
nop
mov
dec
xchg
inc
mul
inc
sub
push
mov
push
sub
sbb
push
or
mov
mov
mov
jl
pop
xchg
pop
call
sbb
enter
jmp
test
mov
pop
std
push
xor
and
ins
and
nop
lods
xor
sahf
repz
js
je
scas
sahf
repz
call
mov
sti
retf
mov
inc
mov
dec
sti
xor
sti
dec
push
jno
jge
js
haddps
icebp
pop
dec
push
idiv
fcmovb
imul
pop
out
mov
mov
inc
mov
dec
xchg
dec
push
sub
mov
sub
pop
mov
mov
dec
pop
adc
aam
adc
inc
mov
fcos
adc
inc
jb
and
ror
ror
xor
cmp
ficom
sahf
dec
mov
clc
cld
stos
adc
push
mov
xor
lahf
mov
sbb
retf
jo
aad
and
test
ret
cli
repnz
or
push
mov
dec
pop
dec
(bad)
mov
pop
hlt
lock
aad
sbb
ret
sbb
(bad)
leave
stc
mov
adc
push
pusha
sbb
add
adc
xchg
addr16
push
add
ins
mov
aam
lahf
or
add
and
sub
xor
adc
(bad)
popa
std
push
mov
cmp
test
mov
in
int
nop
ins
push
or
adc
adc
retf
or
pop
out
and
sbb
imul
retf
dec
or
push
fdivr
out
mov
xchg
mov
test
jae
and
(bad)
add
nop
xchg
xlat
add
loope
mov
repnz
ja
jmp
sub
or
gs
xchg
mov
xchg
jbe
jno
dec
cld
sub
aas
add
or
addr16
mov
dec
pop
ins
push
inc
test
jne
mov
sbb
mov
xchg
dec
mov
push
lods
adc
cmc
adc
in
(bad)
adc
push
mov
(bad)
fld
mov
push
mov
sti
fsubp
mov
adc
ror
daa
dec
fmul
mov
ds
cmc
std
push
adc
or
cdq
sub
loope
pop
(bad)
adc
inc
dec
xchg
jae
ja
arpl
pop
dec
push
test
sub
and
cmove
mov
adc
ins
xor
xor
mov
mov
push
pop
mov
fcomp
xlat
xchg
sub
shl
xchg
add
push
lea
cmp
or
sub
repnz
and
(bad)
and
push
cld
shl
mov
mov
inc
leave
push
out
cmp
lea
div
mov
dec
sub
inc
jl
loope
pop
test
inc
ins
sbb
mov
mov
mov
jbe
dec
cwde
dec
add
sub
jmp
jecxz
and
dec
sti
movs
in
pop
sar
jecxz
les
pushf
nop
mov
xchg
jmp
fild
outs
(bad)
pop
jne
and
mov
dec
leave
retf
loop
push
push
das
pop
or
movs
push
cmp
loope
dec
push
iret
(bad)
mov
in
pop
xor
hlt
push
xor
(bad)
push
fist
sti
cmp
jmp
sub
test
add
ret
call
cs
and
sub
inc
outs
mov
out
xor
movs
ret
cdq
add
aad
mov
ja
push
xor
pop
cwde
stc
jae
movs
(bad)
std
add
cmp
mov
pop
leave
(bad)
ret
and
rol
dec
and
lods
lods
sub
dec
ins
jo
jle
pop
dec
mov
adc
adc
lods
ret
test
mov
mov
cld
dec
push
inc
pop
jbe
cmc
addr16
ss
sbb
jmp
cmp
xor
inc
mov
fiadd
repz
adc
and
and
dec
push
out
adc
in
(bad)
cmps
add
shr
retf
add
cs
sbb
sub
adc
sbb
jb
mov
fst
pop
int
imul
mov
(bad)
mov
dec
lods
add
xor
fdiv
sar
aam
retf
mov
rcl
dec
dec
out
dec
imul
pop
push
cmp
or
ds
add
les
mov
inc
mov
aas
test
adc
shl
mov
pop
inc
mov
in
mov
or
jmp
(bad)
repz
jg
fs
or
dec
and
jb
and
psllw
sar
push
stc
gs
jo
cmps
mov
test
daa
jnp
or
shl
xchg
sub
inc
pop
idiv
fld
mov
adc
leave
loopne
jb
daa
cld
jg
test
pop
sub
hlt
jp
outs
inc
or
add
fmul
xor
xor
xor
and
rcl
jle
xchg
xor
jle
push
xlat
pushf
push
jae
mov
fcomi
jns
cmp
not
cdq
cld
push
sbb
shr
sub
(bad)
jecxz
sub
dec
mov
cmp
sbb
ins
sbb
and
ficomp
outs
fcmovnbe
test
shl
dec
jb
sbb
jnp
fldcw
lock
cmps
test
jecxz
int3
dec
popa
push
add
lods
test
cmc
adc
(bad)
lock
sub
aam
add
or
int
dec
addr16
pop
and
movs
cmc
jg
fidiv
movs
and
scas
and
jmp
or
push
lar
push
ret
sub
sub
mov
mov
sub
scas
mov
and
dec
sbb
jg
and
pop
pop
int3
push
fnsave
xchg
ret
adc
cld
(bad)
xchg
xor
adc
mov
retf
add
fwait
fs
pop
loopne
lds
dec
add
mov
sub
je
loope
mov
and
(bad)
fld
popf
inc
sub
jmp
or
sbb
cmp
push
pushf
and
dec
rcr
pushf
mov
jmp
aaa
sub
pop
xlat
xchg
cld
cwde
pop
fldcw
mov
std
cdq
mov
lods
call
mov
adc
data16
sti
push
popa
xor
xor
and
xchg
es
xor
movs
pop
sbb
push
hlt
cmp
loop
rcr
xor
inc
icebp
pop
inc
retf
xor
inc
into
inc
sub
push
jnp
push
ins
ja
int3
fcos
add
inc
pop
loope
ret
mov
daa
data16
neg
sbb
movs
mov
icebp
das
or
mov
push
loop
cmps
push
push
xchg
cmc
loopne
adc
pop
cmp
and
ja
scas
dec
or
jne
int
push
(bad)
sbb
std
aad
add
loop
push
xchg
stos
pop
cmp
xor
gs
mov
adc
push
pop
xor
sub
inc
fisub
out
sbb
add
lea
ffreep
aaa
inc
and
retf
xor
jbe
sub
in
sbb
mov
test
call
sahf
cmp
add
pop
add
fcom
sub
push
aad
push
sbb
dec
pusha
sbb
frstor
mov
jae
sbb
cli
fidivr
ret
loope
adc
mov
dec
mov
or
js
sbb
and
loop
xchg
aas
stos
xchg
inc
in
xchg
mov
mov
jne
ss
xor
inc
inc
outs
hlt
mov
push
dec
mov
daa
adc
aaa
pop
dec
jo
adc
out
cmp
jnp
mov
dec
daa
inc
fadd
mov
push
jnp
dec
popa
rol
sbb
(bad)
into
mov
and
hlt
and
icebp
push
xchg
jge
shr
sbb
fst
mov
sar
adc
jmp
jbe
pushf
xor
add
inc
pop
mov
mov
movs
bound
jno
dec
in
cmp
es
xlat
loope
pop
out
mov
pop
pushf
cdq
pop
stos
in
dec
xchg
ffree
push
add
and
cmc
arpl
in
mul
mov
pop
sbb
push
lods
lods
fwait
xchg
rcr
jp
retf
mov
call
inc
sbb
lds
aam
sub
mov
(bad)
mov
dec
xchg
mov
xor
mov
or
inc
nop
sbb
push
fs
sub
jl
fisttp
movs
and
fprem
jmp
daa
inc
push
outs
adc
mov
cli
xor
jo
or
inc
or
mov
test
inc
and
push
sbb
lods
or
lahf
js
(bad)
xchg
sbb
icebp
cs
popf
int
inc
int
xchg
mov
xchg
jno
mov
pop
sbb
dec
call
jbe
out
jno
mov
pop
sar
fs
and
mov
fst
out
ret
mov
pusha
cdq
adc
mov
pop
movs
addr16
dec
pop
mov
push
ror
or
outs
iret
or
fdivr
push
mov
sbb
xor
daa
cmp
fst
lods
cmps
test
test
in
rcl
add
mov
(bad)
or
cdq
jb
mov
mov
sub
ins
ins
cmp
lock
pop
dec
sub
pop
ror
sbb
inc
xchg
out
lods
mov
fcmovb
mov
xor
or
stos
sbb
ficomp
inc
jle
std
push
adc
sub
push
add
xchg
retf
imul
jl
pop
cmp
ins
mov
pop
cmp
jne
das
xchg
stos
lds
lea
hlt
aaa
test
sbb
in
push
and
pop
cmp
ficomp
mov
fcomp
mov
xchg
push
inc
sub
div
or
inc
sbb
fwait
sahf
push
nop
add
test
or
hlt
jno
xchg
jo
call
and
addr16
adc
movs
call
in
pop
(bad)
jnp
pop
shl
inc
jno
or
mov
push
dec
mov
or
iret
dec
jne
aas
cli
test
jmp
repz
leave
adc
scas
scas
adc
mov
ins
mov
shl
fsubr
icebp
add
std
mov
dec
js
shl
mov
jno
sub
push
fld
mov
push
(bad)
in
in
inc
int3
out
nop
add
sub
and
into
dec
and
sub
mov
js
inc
mov
mov
int3
aam
mov
test
mov
arpl
xlat
leave
xchg
(bad)
adc
(bad)
xchg
lods
mov
mov
inc
jns
fdiv
cld
xlat
clc
pusha
xchg
add
jmp
fsubr
pop
fwait
adc
clc
pop
out
data16
mov
push
rcl
and
add
inc
xchg
xchg
imul
outs
pop
mov
aad
or
adc
ror
retf
mov
xor
shr
push
mov
sub
loop
test
outs
imul
ds
push
sbb
outs
jnp
xchg
sahf
cld
jne
sti
xor
jmp
call
sub
in
fild
mov
pop
add
es
xchg
xchg
aaa
mov
mov
fistp
repnz
or
popa
add
inc
popa
mov
sub
pop
in
inc
hlt
pop
aas
rol
jne
sub
test
(bad)
stos
mov
fmul
xchg
scas
popf
jg
jae
(bad)
retf
lahf
loope
idiv
imul
in
nop
test
inc
mov
aam
push
lock
dec
jnp
push
push
shl
out
ret
push
dec
pop
in
call
pop
cwde
mov
push
xor
sbb
add
jle
push
(bad)
cmp
inc
(bad)
call
outs
inc
sbb
fmul
cwde
ror
(bad)
retf
lods
shl
mov
mov
retf
push
cld
rcl
jo
sbb
sahf
fistp
fs
xchg
aas
adc
pop
adc
inc
lds
ret
xchg
cmp
mov
push
outs
add
xchg
aad
and
push
shr
mov
jnp
cmp
(bad)
jl
and
xor
cmp
jp
xor
inc
vcvtsi2sd
scas
fisttp
in
imul
add
sub
fdecstp
not
lock
stos
xor
cld
hlt
pmaddwd
jg
adc
cdq
inc
push
adc
sti
cdq
push
popa
(bad)
(bad)
cs
xchg
pop
sub
xchg
cmps
dec
ins
out
pop
fs
mov
cli
jmp
mov
jg
rcr
jg
dec
call
push
hlt
xor
jbe
rcl
dec
jl
add
push
cld
adc
rcr
sub
dec
into
mov
add
and
add
add
call
sbb
movs
ret
push
int3
dec
lds
pop
and
call
dec
and
sbb
test
mov
mov
sub
push
dec
push
pushf
push
(bad)
sbb
mov
push
inc
rcl
push
or
out
adc
dec
popa
jge
mov
imul
push
mov
retf
mov
inc
int3
cmp
mov
inc
xor
adc
popa
dec
mov
bswap
lfs
or
xchg
sahf
mov
jae
fdivr
fdivr
outs
fs
(bad)
stc
jb
dec
dec
dec
aas
loop
adc
sub
(bad)
dec
xchg
call
fnop
out
out
xchg
dec
fnstcw
and
sar
mov
or
movs
rol
add
jo
pop
stos
and
jbe
loop
iret
out
stc
fst
jge
xchg
dec
call
test
mov
jb
leave
push
mov
sub
push
adc
ss
nop
lods
adc
jno
ins
sub
dec
imul
stos
sub
inc
(bad)
jmp
mov
mov
aad
js
jno
jae
sbb
test
push
inc
push
sub
add
or
cs
mov
pop
jo
mov
sub
daa
mov
jo
and
xchg
fnstsw
push
cmp
push
cwde
sbb
dec
fmul
imul
(bad)
push
xchg
and
das
mov
ss
icebp
(bad)
cmovbe
mov
loop
cmp
into
mov
mov
jo
xor
sbb
xchg
jp
cmp
jns
jmp
mov
data16
lods
shl
xchg
sub
mov
mov
cmp
shl
out
jl
aam
adc
sub
cmp
push
xor
jmp
(bad)
jnp
xor
fcmovne
fist
xlat
out
push
or
xor
push
pop
add
inc
mov
loopne
or
dec
jecxz
push
dec
push
test
xor
sub
in
mov
sub
(bad)
addr16
lods
fnsave
sub
gs
xchg
and
test
inc
mov
daa
fbstp
arpl
dec
push
sti
mov
xchg
sub
xchg
push
jp
arpl
inc
pmaxsw
loopne
dec
push
adc
pop
scas
inc
ins
jge
or
clc
(bad)
lods
out
xor
or
push
cmc
mov
scas
outs
loope
and
xchg
scas
ror
data16
sbb
mov
xchg
add
outs
pop
xor
mov
icebp
sub
das
xor
loop
adc
or
mov
lea
fidiv
(bad)
fcmove
push
sbb
(bad)
pusha
xchg
cwde
mov
inc
xor
ror
cmps
cmp
xchg
push
cmc
or
iret
adc
or
pop
rol
sub
push
mov
nop
add
pop
ds
fsub
push
jle
push
das
(bad)
out
loopne
and
das
fimul
rcl
cmp
jp
sbb
mov
cmp
into
sbb
cld
ficomp
in
enter
shl
jg
dec
inc
push
jne
push
push
add
xchg
push
popf
fmul
cmp
lods
cdq
std
xchg
mov
out
push
mov
outs
arpl
jmp
push
sti
(bad)
icebp
push
xor
cmps
push
fild
in
ins
jecxz
test
cmp
pop
movs
push
add
aad
jmp
push
icebp
xor
out
je
jns
mov
cs
mov
outs
shl
gs
dec
dec
test
sbb
and
pop
adc
mov
cli
add
jle
call
stos
out
mov
data16
cmp
out
inc
and
loop
xchg
rcl
add
jns
mov
mov
xchg
adc
test
inc
jmp
inc
sub
ffree
lds
xor
xchg
pop
dec
outs
les
xchg
mov
mov
xchg
push
lahf
ret
adc
fdivp
call
bswap
fwait
dec
sbb
das
fcmovb
mov
fdivr
sti
mov
cmp
dec
xor
pop
jno
sbb
ja
sbb
fisubr
inc
cmp
add
and
test
push
sbb
and
or
mov
popa
leave
xor
pusha
xchg
jb
xchg
dec
or
dec
bound
lahf
sbb
sbb
out
inc
js
xor
xor
das
neg
fsub
fs
retf
std
(bad)
fistp
ret
rcl
and
sub
sbb
call
dec
xchg
inc
sub
cld
mov
inc
shl
xor
xor
shl
cmp
in
jbe
and
or
ror
dec
or
clc
popa
dec
sti
test
nop
push
mov
cmp
adc
pop
adc
add
jmp
and
in
push
aam
inc
pop
nop
adc
or
jmp
adc
imul
mov
iret
stos
xor
jmp
mov
icebp
xor
and
sub
les
in
pop
mov
je
cmp
gs
xor
push
mov
mov
xchg
and
aas
push
xor
xchg
xchg
mov
sbb
nop
push
and
ret
bound
(bad)
bound
ins
loopne
bound
std
jns
cmp
xchg
cmc
inc
mov
loopne
mov
sti
xlat
cmp
icebp
and
movs
lods
out
aad
inc
inc
xchg
mov
xchg
fwait
sbb
neg
xchg
test
and
movs
and
fwait
mov
outs
movs
dec
push
inc
or
bound
pop
out
mov
shr
push
push
xor
xchg
repnz
push
mov
dec
pop
pop
xor
inc
lahf
add
mov
clc
inc
cmps
in
pop
xchg
sub
pusha
out
int
out
adc
sbb
inc
and
lahf
push
dec
icebp
sbb
lods
addr16
addr16
in
in
call
xchg
cdq
popf
cmp
ss
mov
adc
cmp
or
sbb
call
popf
adc
loop
push
xchg
jns
and
rol
test
push
mov
addr16
in
shr
mov
ror
mov
imul
daa
sub
mov
cmp
xchg
add
cli
or
bnd
inc
test
arpl
clc
mov
push
popf
mov
mov
pop
sub
sbb
lods
out
hlt
or
fdivrp
(bad)
mov
mov
jmp
jle
add
push
adc
pop
mov
into
jne
cld
loopne
in
dec
jmp
and
sbb
pop
lahf
and
sbb
jg
xor
push
add
lds
jg
push
sti
mov
scas
call
fadd
xchg
retf
pandn
push
(bad)
aam
dec
int3
aad
(bad)
adc
in
xchg
pusha
and
dec
in
and
jmp
adc
fmul
dec
dec
pop
cmps
sti
ret
mov
fs
adc
xchg
(bad)
dec
retf
xor
arpl
repz
scas
dec
out
clc
mov
push
addr16
mov
stos
stc
sub
lods
or
sbb
mov
and
adc
mov
dec
into
and
jle
xor
rol
hlt
nop
test
push
addr16
ja
into
xlat
div
cmc
sti
pop
mov
cli
adc
iret
and
ja
sbb
xchg
xlat
fdivrp
lock
adc
inc
test
dec
rcr
adc
mov
cwde
add
sub
fwait
js
cmc
xor
jmp
shl
pop
shl
sub
cwde
fisub
dec
dec
xchg
movs
repz
sbb
dec
stc
xchg
pmaddwd
mov
pop
retf
jp
mov
test
leave
int3
sbb
jle
iret
in
sbb
pusha
popa
cmp
push
(bad)
adc
mov
fdivp
pop
pop
nop
in
je
(bad)
es
adc
add
movs
mov
push
mov
(bad)
leave
aas
lods
ja
ja
jnp
and
cwde
hlt
xchg
mov
idiv
xchg
cmc
jne
(bad)
hlt
cdq
pop
lods
jne
push
mov
and
movs
or
or
aam
test
pop
adc
jne
dec
mov
(bad)
aaa
xchg
sti
push
(bad)
scas
cmp
sub
int
hlt
mov
inc
cmps
sub
mov
shl
mov
ret
stos
mov
fld
xor
cmp
outs
mov
sbb
fstp
push
or
rcl
inc
cmps
ret
push
outs
out
ja
lods
rol
xchg
out
xchg
or
cdq
mov
scas
icebp
xchg
jmp
add
mov
loopne
popf
push
mov
add
sub
fwait
sub
fistp
mov
popf
iret
or
sub
mov
arpl
(bad)
loopne
cmp
gs
pop
dec
push
sbb
cmp
adc
pop
mov
cmp
call
mov
jmp
in
xchg
and
xor
jno
mov
cmp
not
mov
aas
mov
lock
xchg
(bad)
jg
pop
xor
pushf
sub
and
jl
arpl
lock
jns
shl
aam
dec
pop
pop
jnp
inc
fisubr
inc
ins
mov
xor
pop
pusha
bound
mov
inc
cmp
jne
xchg
push
cmps
jmp
sbb
pop
in
jne
imul
dec
retf
inc
dec
mov
fwait
adc
sub
sti
jg
mov
lods
cmps
xchg
smsw
mov
or
jns
sbb
jne
xchg
sbb
adc
cmps
stos
stos
into
rcl
sbb
push
adc
xor
(bad)
(bad)
outs
lock
push
test
pop
or
sbb
and
sbb
pop
xchg
sub
adc
daa
mov
aaa
std
loopne
adc
push
dec
out
cmp
mov
loope
repz
cld
pop
and
stos
jmp
retf
xor
or
mov
rcr
or
sub
xchg
sbb
(bad)
adc
test
push
fsubrp
mov
movs
push
mov
cmp
lea
push
mov
stos
add
popf
shr
cmp
or
(bad)
xor
data16
fnstsw
jbe
xor
gs
fwait
in
pop
jecxz
pop
test
fisub
bound
push
mov
add
int
and
jo
lods
aaa
push
outs
addr16
ins
jo
cwde
cmp
(bad)
jno
xchg
call
ins
pop
xchg
fild
jae
loopne
xor
stos
jmp
inc
stos
lods
fsub
in
mov
sbb
xor
test
cld
mov
add
scas
xor
in
cmp
push
jge
cvttps2pi
rol
mul
add
mov
or
add
mov
sbb
imul
out
lock
xchg
(bad)
test
jnp
adc
jle
sbb
sbb
hlt
xchg
loop
rol
adc
in
(bad)
hlt
jbe
retf
shr
inc
cmp
in
xchg
retf
pop
(bad)
dec
ret
mov
pusha
fidiv
mov
push
and
inc
in
cmp
fs
in
cmp
repz
jp
out
jecxz
cmp
push
xchg
pop
inc
push
test
xchg
mov
cld
adc
sbb
dec
dec
mov
sub
fadd
mov
mov
stos
sub
bound
cmp
jmp
push
in
(bad)
xor
nop
popf
outs
call
xor
nop
sti
xchg
icebp
cmovns
dec
movs
sbb
test
bound
lahf
push
pop
jnp
pop
jno
aas
aad
jne
stos
inc
hlt
ror
push
sbb
lds
mov
cmp
int
push
mov
retf
cmp
clc
pop
enter
addr16
push
cli
hlt
call
nop
xlat
mov
fist
into
sbb
dec
ds
or
inc
mov
in
es
cwde
mov
inc
arpl
dec
ret
inc
popf
dec
mov
jp
test
ja
enter
cmp
and
add
cmp
mov
loop
lds
scas
jmp
mov
test
into
call
xor
adc
cli
mov
(bad)
std
sub
mov
ins
loopne
stos
mov
or
mov
out
sbb
ins
repnz
adc
movs
mov
xor
mov
xchg
repnz
cmp
cmps
mov
in
push
or
popf
test
nop
ror
pop
inc
sbb
push
test
fstp
xchg
push
push
(bad)
cld
add
lds
popf
loope
inc
xchg
cmp
int
push
aad
ins
adc
rcl
xchg
lea
call
(bad)
xchg
xor
inc
pop
outs
clc
cmp
jmp
xchg
das
(bad)
mov
xchg
ins
sbb
outs
and
stos
icebp
mov
push
push
cmp
mov
out
jecxz
fild
mov
sbb
int
dec
sahf
mov
enter
sbb
jmp
mov
push
cmc
sahf
enter
outs
pop
mov
or
icebp
cmp
inc
mov
cwde
lods
jl
adc
jg
popa
pop
add
je
push
push
call
cmp
push
or
adc
mov
in
xchg
ins
cwde
dec
or
shl
stos
xchg
jp
sub
int
mov
adc
push
pop
call
jg
dec
mov
popf
sbb
or
add
cmps
bound
int3
push
ins
popa
icebp
pop
and
(bad)
stos
adc
lea
fstp
nop
pop
hlt
mov
retf
stos
sub
mov
mov
mov
push
inc
cdq
jge
sub
mov
(bad)
mov
bound
movhps
add
jae
aaa
ins
gs
xchg
(bad)
or
outs
dec
jmp
or
jne
sbb
cs
mov
xchg
test
ss
pop
arpl
les
cmp
inc
and
enter
mov
pop
pop
(bad)
out
cmp
cmp
xor
cmp
xchg
sub
pusha
adc
sbb
mov
into
xchg
test
iret
test
and
arpl
call
inc
jle
add
and
xchg
dec
or
rol
lahf
in
xchg
and
push
mov
and
loope
push
and
jl
adc
push
dec
in
cmp
xchg
std
popa
xor
(bad)
pop
pushf
sbb
(bad)
pop
js
mov
fsubr
cmp
mov
push
mov
inc
mov
xchg
call
inc
aad
cmp
push
push
shl
adc
int
shr
pop
rcl
or
or
push
cmp
cmps
xchg
movs
lods
mov
gs
(bad)
popa
mov
pop
xor
and
pop
cmps
and
popa
jae
mov
or
sub
jbe
cld
lock
cs
inc
adc
shr
pop
loope
sbb
cmp
ror
xchg
xlat
ror
cmp
cmp
dec
sub
mov
movs
scas
(bad)
imul
mov
std
xor
mov
in
ret
mov
mov
cs
pop
push
mov
mov
int
sbb
(bad)
push
imul
enter
(bad)
test
sub
fwait
mov
neg
mov
lock
fiadd
(bad)
jle
add
lods
sub
cmp
cs
hlt
jle
cmc
call
dec
mov
pusha
push
cmp
sbb
(bad)
xchg
mov
inc
jnp
xor
add
push
(bad)
idiv
cmc
mov
fmul
cs
fs
movs
sbb
cmps
dec
dec
sub
pop
mov
or
daa
cmp
jl
adc
mov
lock
aam
(bad)
mov
pop
stc
sbb
and
outs
add
mov
push
jnp
mov
push
cmc
mov
out
aaa
out
add
loope
sub
dec
jno
dec
sub
repz
das
mov
cli
cli
pop
nop
ds
scas
and
lea
fxch
aaa
leave
or
imul
add
add
mov
pop
jne
lea
push
jge
in
jne
or
fild
inc
(bad)
shl
or
call
out
aaa
fnstcw
xor
fiadd
(bad)
pop
dec
sbb
jns
mov
mov
stos
repnz
pop
sbb
imul
adc
leave
add
out
cmps
pop
cmp
sub
jmp
xchg
sbb
leave
xlat
cmc
dec
popa
jge
sub
xlat
leave
xchg
icebp
iret
scas
jae
dec
sbb
push
jp
pop
push
xchg
(bad)
mov
mov
sub
mov
fdiv
inc
xor
lods
adc
ins
cmp
push
in
sti
call
and
sahf
(bad)
stos
jnp
sbb
jb
cmp
lock
mov
mov
push
shl
jge
sub
sbb
ja
ror
push
xor
xor
sbb
das
push
je
push
je
xchg
mov
shl
dec
not
xlat
mov
div
imul
sbb
out
std
inc
sub
ds
and
jne
fsubr
push
dec
stos
pop
dec
sub
ins
in
add
sti
jne
pop
in
inc
add
mov
pop
pop
push
cld
enter
push
sbb
add
mov
hlt
sbb
shl
or
stc
fdivr
jle
js
xlat
pop
xchg
push
movs
out
inc
test
dec
adc
in
add
loop
xchg
shl
loopne
adc
lock
inc
xchg
and
in
pop
dec
cwde
repz
jns
dec
xchg
and
or
ret
mov
jmp
dec
out
jl
push
jne
mov
popa
jge
retf
ror
test
sbb
mov
out
xchg
jg
add
adc
ins
out
cmp
mov
ret
mov
mov
pop
inc
mov
imul
imul
scas
inc
pop
pop
jmp
jmp
retf
add
fadd
mov
xlat
mov
dec
js
mov
dec
ins
imul
dec
sbb
aam
dec
cld
mov
fsubp
(bad)
fidivr
jne
adc
sahf
push
pop
sbb
(bad)
jp
sbb
iret
test
sbb
adc
sub
sti
or
xchg
(bad)
pop
in
mov
fild
and
(bad)
rol
jmp
push
inc
fdivr
sti
(bad)
pusha
sub
or
mov
popa
xor
or
sub
inc
or
cmp
retf
popf
data16
(bad)
popf
sti
cs
ja
xchg
add
jmp
pop
jecxz
mov
dec
jmp
cmp
movq
jo
mov
inc
stos
ret
jge
or
fwait
clc
mov
das
dec
push
rol
(bad)
mov
add
daa
outs
rcl
push
xchg
dec
aad
daa
pushf
(bad)
cmp
mov
pop
cmp
push
inc
xchg
jmp
in
in
retf
xchg
jbe
fst
sub
adc
and
jecxz
in
add
gs
mov
xchg
mov
jnp
in
int
dec
int3
popa
adc
push
push
pop
push
pop
movs
cwde
ins
ror
jns
pop
mov
pop
fdivp
in
push
xor
shr
test
je
push
jmp
bnd
jp
(bad)
add
icebp
xchg
cmp
jnp
sar
and
retf
jge
push
cs
test
addr16
xchg
xor
lds
dec
cli
mov
jnp
shl
call
std
(bad)
cld
or
gs
mov
mov
aam
push
retf
out
retf
ror
scas
sbb
mov
and
sub
enter
ret
cmp
mov
call
jp
ins
les
mov
adc
xchg
lds
loopne
in
out
dec
cmps
inc
and
rcl
sub
sar
ret
scas
push
or
gs
or
jl
jp
xor
mov
inc
push
adc
inc
push
outs
pop
lock
mov
imul
xchg
call
cmc
pop
sub
aam
fdivr
fwait
test
xchg
jo
(bad)
sub
mov
out
dec
retf
rcr
add
les
mov
inc
cmp
in
inc
xchg
xor
xchg
mov
push
or
cmp
(bad)
cwde
push
pop
lods
and
movs
dec
mov
loope
gs
pop
retf
mov
in
push
stos
add
aas
lods
jl
push
ins
adc
imul
outs
xchg
test
ret
add
mov
adc
add
mov
pop
es
sub
call
xadd
xchg
rcr
mov
(bad)
cdq
jo
rol
stc
test
clc
dec
or
fs
pop
push
lods
iret
xor
cmp
pop
xchg
ins
add
movs
ret
fld
mov
pop
je
sub
jmp
jbe
addr16
xchg
push
mov
lahf
sbb
fcmovnu
ret
jo
lock
or
aad
jp
aad
popa
pushf
and
mov
test
pop
ficomp
test
pusha
sbb
pop
dec
repz
xor
popa
xchg
imul
mov
dec
mov
sbb
or
mov
pusha
mov
dec
or
ret
push
sbb
ficom
inc
pop
mov
rol
xchg
xchg
fmulp
fldenv
add
out
sub
jbe
call
in
cwde
jbe
xchg
sub
jle
lods
pop
jns
sub
mov
int
fcmovnbe
retf
aad
cdq
push
je
push
bound
out
daa
and
cld
icebp
inc
inc
outs
div
sub
test
cmp
xor
aad
arpl
jmp
hlt
jmp
push
adc
mov
cwde
aad
lock
int3
stos
dec
mov
les
cmp
cmp
jo
ds
jmp
xor
movs
xchg
call
(bad)
sub
xchg
jnp
mov
(bad)
cmps
sbb
pop
mov
push
dec
mov
(bad)
aaa
aas
pop
xchg
cmps
pop
dec
loop
inc
mov
stos
js
rcr
xchg
into
scas
out
sahf
or
imul
fwait
push
les
ds
jbe
dec
or
call
int3
shl
dec
inc
pop
or
popa
shr
popf
retf
(bad)
cld
repnz
ja
pushf
sub
xchg
push
imul
fild
into
mov
add
xchg
fist
cmp
(bad)
sahf
jecxz
mov
xor
fst
inc
and
push
cmp
dec
adc
xor
nop
jmp
mov
gs
dec
sbb
repnz
push
into
out
mov
adc
mov
dec
(bad)
cmp
jl
sbb
aas
push
push
nop
out
aaa
xor
outs
mov
loop
jo
jmp
fcomp
(bad)
fld
cmp
mov
sbb
clc
pushf
mov
and
mov
sub
mov
cdq
fadd
inc
jmp
ficom
call
pusha
rcl
lock
sar
das
mov
xchg
push
jmp
inc
xchg
inc
lods
pop
pop
bt
sbb
imul
call
xchg
add
call
or
(bad)
ins
jnp
ja
and
mov
push
or
(bad)
hlt
imul
shr
jp
inc
gs
les
or
jmp
sbb
xor
push
ins
cld
test
mov
adc
cmps
pop
xchg
nop
not
sbb
lods
test
aas
cld
jl
outs
adc
pmaxsw
add
pop
add
call
mov
xchg
xor
hlt
xor
pop
push
add
cmp
not
or
retf
jg
xchg
adc
inc
push
jmp
and
int
nop
cli
sbb
pop
mov
loopne
sub
add
scas
iret
jno
pop
add
pop
stc
xchg
pushf
dec
and
lds
rol
sub
pop
inc
sahf
dec
xchg
mov
mov
aaa
out
jge
sahf
inc
dec
sbb
int
add
inc
push
cs
loop
(bad)
(bad)
jl
aaa
ins
mov
into
stos
mov
popa
es
js
xchg
ds
push
addr16
mov
fidivr
adc
adc
test
jp
xchg
jp
mov
loop
cmp
popa
das
push
fstp
(bad)
sub
xor
ret
sub
cwde
jns
dec
mov
rol
xor
dec
sub
mov
daa
fcmovnbe
rol
fucomp
push
mov
pop
inc
popa
repnz
xchg
jns
pop
pop
and
sti
(bad)
mov
mov
mov
ret
mov
mov
les
sbb
adc
jecxz
data16
int3
dec
dec
gs
pop
cmp
stos
push
bndstx
sub
xor
mov
pop
inc
shl
je
loope
jge
rcl
iret
bound
(bad)
gs
aam
push
xchg
pop
sub
cli
xchg
sub
and
push
ds
or
and
adc
push
ds
clc
push
arpl
mov
dec
aam
(bad)
push
add
adc
xor
mov
pop
les
push
or
dec
jmp
mov
cmp
jl
aas
fidiv
leave
dec
push
push
outs
xchg
dec
lahf
jbe
sub
xchg
xor
cdq
gs
cmp
adc
enter
mov
scas
jb
(bad)
inc
call
jecxz
add
mov
mov
retf
sub
dec
sub
inc
popa
xchg
int
xor
add
mov
pop
(bad)
fadd
lds
lock
outs
imul
cmp
scas
and
data16
dec
sbb
jmp
call
mov
inc
jb
aas
cdq
(bad)
retfw
fcom
dec
xchg
aaa
in
mov
mov
sti
ret
out
pop
mov
fisttp
mul
test
pop
inc
mov
jmp
pop
out
ins
push
ficom
addr16
movs
mov
mov
push
out
push
pop
scas
jno
inc
aaa
push
ins
mov
pop
int3
call
(bad)
loop
push
pop
pushf
sbb
aam
mov
mov
test
stos
mov
sbb
or
sbb
lods
xor
enter
cld
ins
mov
in
in
adc
cmc
sbb
cmp
ins
jmp
(bad)
popa
call
jle
mov
rol
in
jo
mov
and
xchg
adc
popa
mov
pop
jae
xchg
ins
pop
mov
fistp
xchg
mov
inc
xchg
in
add
je
pop
push
repnz
push
add
cmps
and
iret
adc
pop
mov
mov
sbb
or
pop
adc
lds
and
cmp
inc
fs
icebp
addr16
out
xchg
sub
cwde
les
jecxz
jae
xchg
jno
aaa
jle
adc
clc
loopne
cmp
out
cs
mov
jmp
shl
mov
jp
cmp
dec
pushf
xchg
lods
sbb
xchg
pop
add
ror
jne
ret
pop
inc
fadd
jbe
(bad)
mov
icebp
mov
add
mov
xchg
and
sub
mov
inc
mov
(bad)
out
adc
xchg
pop
ins
mov
ins
ins
xchg
push
lahf
push
jbe
pop
icebp
xchg
call
arpl
jae
std
pop
ss
stos
jnp
inc
or
jge
push
jo
mov
mov
adc
fs
popf
jne
mov
nop
jmp
mov
stos
sbb
fdivr
loope
ret
add
(bad)
int3
call
push
movs
cdq
dec
movs
mov
jnp
cmp
mov
jl
or
imul
sbb
pop
repz
add
sbb
je
icebp
lea
inc
mov
call
jle
int
rcr
sub
dec
add
loopne
jp
push
adc
mov
add
cmc
daa
and
lods
sar
push
adc
je
xchg
ds
ins
cmp
cmp
sbb
jo
in
push
mov
lods
aad
shl
repz
dec
xor
xchg
sbb
jno
xchg
retf
jb
jmp
sbb
(bad)
jecxz
(bad)
std
ins
iret
out
pop
adc
mov
xor
mov
cmps
add
cmps
test
ja
dec
push
xchg
mov
outs
mov
movs
jge
pop
adc
cmps
sub
adc
adc
mov
fstp
pop
movs
xor
push
jno
js
(bad)
imul
invd
xor
fwait
or
dec
stos
push
rcl
imul
(bad)
mov
add
shl
aam
push
clc
imul
call
movs
in
nop
dec
add
adc
push
das
enter
xchg
xor
add
inc
dec
push
mov
pop
mov
push
lock
cwde
mov
xchg
scas
(bad)
das
or
and
pop
imul
imul
shl
xchg
dec
pop
xor
jg
into
imul
(bad)
cwde
cmp
or
mov
retf
cmps
mov
jmp
jb
iret
jmp
push
rol
sbb
adc
mov
xor
ja
mov
and
arpl
cwde
dec
pop
adc
ret
cmc
jbe
lock
cmc
add
mov
(bad)
sbb
(bad)
enter
dec
dec
daa
cmp
test
pop
xor
pop
test
sbb
mov
lea
mov
adc
ins
loopne
(bad)
das
sahf
jge
test
add
out
cmp
mov
xrstors
mov
pushf
(bad)
pop
sbb
icebp
xchg
sbb
fiadd
dec
add
xchg
sub
(bad)
adc
stc
xor
sub
cmp
dec
les
and
jnp
and
pop
pusha
ficom
xor
push
cmc
rcr
adc
cli
inc
sub
mov
test
cmp
mov
and
and
gs
(bad)
add
loopne
sbb
add
aaa
enter
push
mov
test
jge
adc
fst
mov
maxps
leave
out
or
js
xor
shr
xchg
not
in
aas
sbb
or
je
mov
push
sub
pop
xchg
cs
sar
xchg
sbb
gs
dec
(bad)
icebp
and
jecxz
pop
out
hlt
call
jns
test
cld
adc
into
and
jbe
sbb
movs
inc
out
stc
mov
sbb
push
jmp
pushf
jle
pop
mov
add
dec
mov
pop
push
and
movs
ficom
push
push
imul
dec
ficomp
lock
or
jne
cmps
call
ficom
adc
cmp
mov
push
cli
sub
push
clc
hlt
in
jmp
das
adc
dec
inc
cmp
cmp
cmp
ficom
cmp
cmp
out
push
mov
inc
iret
je
mov
push
adc
jl
mov
sti
out
push
or
(bad)
aad
add
pop
mov
inc
mov
xor
ins
bound
outs
add
aam
pop
mov
shl
es
jae
inc
stos
fsub
ins
adc
and
mov
sub
(bad)
aam
cwde
and
(bad)
push
ret
sbb
mov
or
stos
adc
sbb
fisub
pop
dec
jnp
mov
jge
adc
xchg
jno
mov
mov
pop
pop
vpshad
adc
jmp
inc
or
ficomp
and
mov
enter
aaa
inc
fsubr
inc
and
gs
les
xchg
pop
push
mov
cmp
inc
(bad)
jne
repz
(bad)
enter
leave
pop
not
les
jp
and
mov
xor
mov
aam
add
pop
retf
in
sbb
test
(bad)
jbe
out
enter
sti
hlt
push
jb
scas
frstor
sbb
jle
dec
into
sbb
inc
jmp
in
pop
mov
repnz
lods
repz
add
sbb
inc
pusha
add
jb
data16
call
iret
mov
inc
cmp
and
pop
adc
xor
jecxz
xor
inc
ja
and
nop
xchg
adc
pop
mov
addr16
pop
and
dec
es
pop
xor
jecxz
mov
pop
pop
and
mov
xor
lods
into
repnz
ds
inc
mov
call
mov
mov
dec
das
lock
add
jb
jno
dec
add
ss
jecxz
and
inc
dec
or
xchg
shl
or
dec
mov
sahf
aaa
mov
fadd
imul
clc
cmps
movs
icebp
hlt
sbb
inc
enter
mov
int3
add
mov
fistp
mov
in
inc
mov
lods
push
xchg
push
cld
ins
sub
push
enter
mov
xchg
mov
ds
js
push
add
pop
pop
idiv
mov
dec
push
jne
sbb
aam
fcmovne
pop
ja
push
push
and
pusha
push
pop
adc
stos
lahf
enter
xor
sub
hlt
inc
pop
test
loop
into
call
pop
add
sbb
or
out
test
or
addr16
call
leave
dec
mov
es
sbb
cmp
pop
stos
push
cmp
ins
cld
call
test
xlat
xchg
pop
mov
fwait
dec
sbb
dec
xchg
pop
adc
jle
pop
xchg
fwait
hlt
popa
sub
pop
xlat
scas
ror
and
jmp
int
in
jo
test
mov
mov
fldenv
lea
push
pop
or
retf
js
mov
jne
or
xor
or
sub
or
and
push
push
mov
idiv
dec
aaa
iret
add
(bad)
pop
scas
jno
sub
fidivr
sbb
pop
cwde
(bad)
gs
(bad)
sahf
sub
pop
pop
add
jb
call
or
fimul
int
shl
nop
xchg
stos
pop
inc
pop
mov
test
cmps
jnp
mov
sti
ret
ins
jno
outs
loope
mov
(bad)
cli
std
xchg
inc
xchg
fisub
sub
jmp
popa
lods
adc
jg
add
push
cmp
sbb
sahf
fs
stos
lds
dec
push
and
scas
(bad)
shl
adc
dec
retf
adc
fcom
data16
out
cmps
out
cmp
in
pop
mov
mov
pop
or
movs
add
jp
stos
repnz
xchg
cmps
mov
retf
aas
push
mov
or
mov
hlt
pop
sbb
imul
sbb
inc
jmp
mov
clc
mov
jmp
mov
mov
xlat
mov
dec
jae
setno
cmp
push
xchg
inc
mov
sti
pop
(bad)
out
xchg
mov
clc
(bad)
call
pop
push
aam
(bad)
and
(bad)
push
ja
jg
sub
jns
aas
cmp
mov
and
movs
jle
or
push
mov
cmps
scas
cs
aas
fld
enter
xchg
(bad)
repnz
hlt
inc
jo
call
ds
fst
dec
push
mov
cmp
fwait
mov
sub
inc
out
jo
xor
dec
inc
push
add
test
jmp
inc
stos
fwait
jbe
aaa
mov
fpatan
add
sbb
xchg
jmp
and
and
add
jg
mov
ficom
mov
and
pop
fild
scas
pop
dec
push
loop
or
pop
xor
xchg
test
cdq
ror
jne
aas
lods
lods
adc
push
sub
mov
ins
data16
and
popf
hlt
mov
sub
aam
lahf
scas
sub
inc
add
and
ja
add
mov
lods
inc
int3
cwde
push
adc
cwde
pop
jbe
sub
add
adc
xor
nop
add
ds
retf
(bad)
sti
and
sub
cdq
xor
scas
out
add
mov
pop
int3
cmp
out
loopne
push
popa
pop
sbb
or
or
xor
pop
sub
in
mov
or
movs
rol
add
sahf
push
scas
outs
and
ss
xor
and
adc
dec
and
das
push
imul
push
sahf
jae
sahf
arpl
call
int
xor
(bad)
retf
stos
fisubr
nop
cmp
retf
icebp
int3
inc
stos
mov
pop
pop
jmp
test
cld
dec
jecxz
mov
out
sub
mov
push
shl
pusha
aad
add
inc
pop
stc
sbb
mov
inc
dec
mov
dec
mov
test
ror
fwait
aaa
pop
sub
repz
clc
pop
push
xchg
sbb
fnsave
xor
(bad)
popa
int
addr16
xchg
cmps
leave
pmulhuw
adc
jl
ins
jmp
(bad)
sbb
arpl
repnz
dec
jmp
mov
push
mov
mov
mov
imul
pop
sub
mul
push
xchg
rcr
fs
or
push
icebp
fidiv
pop
not
mov
int
ja
xchg
(bad)
sbb
pop
mov
dec
mov
mov
(bad)
bound
mov
sbb
pop
add
xchg
jmp
or
or
jmp
not
adc
mov
imul
cmps
jmp
jg
cld
push
jns
jo
xor
xor
in
test
adc
xchg
adc
sub
or
in
scas
enter
push
fnsave
lods
aaa
adc
lahf
pop
shl
in
xchg
jne
ret
jmp
call
dec
jmp
push
sbb
(bad)
xor
(bad)
hlt
fcomi
pop
inc
jne
dec
cs
rol
add
repz
pop
movs
div
xchg
sub
sbb
aam
call
push
dec
xchg
push
stos
push
cmps
cmp
aad
add
daa
jno
mov
mov
xchg
push
sbb
jnp
xor
push
adc
test
rcr
inc
add
inc
aam
hlt
adc
pop
and
xor
sar
out
pop
xchg
sbb
ret
sbb
or
push
(bad)
mov
hlt
mov
int
data16
and
push
lods
sub
inc
and
stos
dec
pop
arpl
ins
mov
pop
cdq
xchg
jg
sar
dec
jb
pop
repnz
jns
adc
mov
jo
lock
iret
(bad)
out
dec
out
pusha
mov
std
popf
mov
push
inc
scas
mov
jns
in
jmp
pop
mov
inc
push
jmp
dec
mov
adc
pop
mov
fmulp
xor
adc
mov
test
(bad)
adc
sbb
ins
xchg
fucompp
not
cdq
(bad)
dec
outs
push
mul
inc
mov
hlt
jbe
mov
dec
lea
push
and
xor
lods
cmp
cmp
inc
arpl
psrlq
lods
loop
ins
cmps
add
repnz
lock
push
fadd
ret
add
sub
(bad)
inc
xchg
inc
xor
xchg
xchg
mov
je
pusha
mov
inc
je
mov
or
cmp
popf
xlat
mov
cmp
and
in
lea
mov
fdivr
inc
push
inc
mov
mov
mov
shl
scas
outs
imul
adc
ror
xchg
in
ficomp
hlt
mov
pop
or
imul
adc
mov
pusha
fidivr
lock
add
fist
shl
daa
loope
cdq
(bad)
sbb
sbb
cmovg
xor
mov
fimul
je
pusha
out
rol
inc
xchg
ds
stos
sbb
scas
xor
push
in
adc
mov
scas
scas
or
cwde
mov
dec
sbb
jnp
int3
mov
adc
dec
push
xchg
addr16
or
outs
(bad)
repnz
mov
sub
fs
push
loope
nop
sbb
data16
cmp
outs
call
std
not
dec
dec
mov
cmp
icebp
add
mov
push
jb
in
adc
(bad)
icebp
mov
inc
in
cmps
mov
adc
cmp
sub
imul
lods
or
std
mov
sbb
aas
mov
pop
add
fwait
mov
push
mov
stos
(bad)
pop
mov
aas
dec
adc
addr16
lds
xor
mov
inc
movs
add
lock
mov
pop
in
outs
cwde
loope
sub
stc
pop
xlat
and
dec
inc
or
in
pop
jmp
sbb
cvtps2pd
push
xchg
pop
xchg
(bad)
jmp
scas
jmp
inc
clc
mov
adc
cmp
xchg
pop
addr16
nop
in
add
ret
ja
dec
inc
(bad)
aas
mov
sub
inc
out
dec
mov
or
jmp
out
daa
test
outs
ins
push
inc
pop
adc
les
ficomp
adc
(bad)
div
mov
call
pop
add
sbb
mov
mov
xor
xlat
and
xchg
nop
pop
cmp
imul
jmp
mov
int
es
dec
dec
das
mov
movzx
dec
and
add
pop
popa
xor
out
icebp
sbb
dec
add
sub
mov
cmp
add
es
xor
rcr
push
sahf
xchg
sahf
xchg
fisttp
lea
xor
(bad)
les
fiadd
dec
pop
pop
ss
xchg
pop
mov
sahf
jmp
mov
cmp
fistp
inc
sub
out
out
test
arpl
mov
pop
mov
mov
adc
in
lods
jb
pop
test
add
sub
or
sub
jmp
or
push
outs
xor
js
ss
sti
hlt
int
pusha
mov
mov
rcr
adc
popa
movs
push
jg
jne
mov
sar
test
jmp
std
enter
jo
jo
cmp
lods
mov
repz
test
repz
sub
push
push
repnz
xchg
push
add
repz
dec
push
sub
pop
pop
add
and
mov
sbb
push
cmp
adc
xchg
shld
xchg
scas
jno
loop
adc
cmp
icebp
mov
retw
(bad)
aam
ret
lahf
or
(bad)
jnp
arpl
lods
shl
jl
inc
sub
mov
add
mov
je
push
push
xchg
cmp
pop
(bad)
dec
xchg
mov
push
ins
xchg
jne
and
jae
lahf
imul
(bad)
in
sbb
add
xcrypt-ecb
cmps
dec
jns
xor
fstp
mov
out
jl
sbb
jle
pop
call
sbb
pop
or
popf
fdivp
or
retf
jae
pop
push
shl
push
or
iret
(bad)
leave
dec
push
imul
pop
cmc
mov
pop
add
push
mov
jmp
push
loope
dec
test
pop
neg
cmovg
xor
push
out
mov
cmp
aaa
das
jne
inc
mov
mov
int
cld
jmp
xor
test
cmp
jmp
in
cmp
pushf
dec
fdivr
loope
pop
cmp
ret
xchg
push
inc
sbb
jnp
jge
icebp
inc
mov
lahf
add
shr
pusha
jp
mov
aam
movs
pop
shl
ss
into
inc
rol
xchg
cld
adc
fwait
dec
or
fiadd
iret
aam
mov
mov
nop
xchg
xor
sub
mov
aad
ins
add
das
leave
xor
jne
pop
pop
bound
cdq
lods
pop
(bad)
jns
pop
inc
inc
sub
loope
(bad)
cli
ffree
js
or
retf
cmp
push
(bad)
sub
sbb
push
rol
sub
enter
pop
and
js
add
cmp
cwde
push
cmp
outs
fisttp
mov
(bad)
repz
outs
das
(bad)
or
lds
sub
cmp
pop
xchg
fcomp
jl
aas
adc
retf
or
or
idiv
(bad)
mov
mov
inc
(bad)
call
add
int
and
test
jle
stc
xor
ds
or
mov
es
loopne
test
pop
push
push
mov
mov
sbb
xchg
cmps
fldenv
xchg
clc
pop
popa
mov
loope
stos
jp
inc
sbb
(bad)
cmp
popf
mov
add
fiadd
ins
fstp
mov
fisttp
push
clc
jo
in
inc
xchg
fdivrp
(bad)
cwde
adc
mov
movs
prefetch
or
mov
retf
mov
adc
bound
pop
push
test
jecxz
xor
and
rcr
(bad)
(bad)
jle
sbb
out
ret
ret
aad
pop
jmp
add
mov
mov
(bad)
cmp
inc
(bad)
jmp
push
xor
and
(bad)
fdivr
in
jne
mov
jmp
mov
les
fs
or
pavgb
ror
add
pushf
fs
cmp
jb
pop
mov
cdq
cmps
imul
pop
push
xor
push
dec
mov
call
cmc
pushf
sti
jns
aam
add
fist
dec
push
pop
xchg
jb
mov
cmps
or
aam
sahf
pop
mov
gs
pop
xchg
pop
jns
imul
data16
mov
pop
into
data16
mov
jmp
in
fcmove
clc
daa
std
sbb
shl
xchg
mov
fst
pop
xor
(bad)
out
or
(bad)
xor
rcr
dec
xchg
sbb
push
imul
leave
push
xor
ret
(bad)
into
cmps
ds
adc
aad
and
mov
ins
scas
aad
adc
mov
and
jle
pop
push
pusha
pop
or
repz
mov
jmp
add
jne
lods
sbb
dec
stos
add
ret
int3
in
daa
icebp
mov
dec
pop
adc
jecxz
sbb
mov
jmp
popf
mov
dec
sub
push
mov
or
xor
or
ins
ins
push
movs
sub
mov
xor
adc
daa
ss
fdiv
cmc
sbb
cmps
cmp
lods
dec
inc
inc
push
xor
retf
movs
leave
jae
inc
aad
mov
cmp
fbstp
dec
je
aad
scas
pop
and
jmp
cli
mov
test
xchg
fld
xchg
ins
sbb
mov
ret
push
add
jp
jmp
pop
jle
repnz
adc
mov
mov
repz
das
in
sti
mov
add
imul
fwait
idiv
push
or
add
retf
movs
push
sbb
add
push
std
out
stc
inc
adc
fisubr
push
mov
cld
daa
gs
push
leave
cmp
adc
pop
stos
and
pop
icebp
ins
daa
jo
xchg
jne
or
mov
inc
push
push
cmp
cmp
xchg
popa
pop
jmp
out
repnz
retf
fsub
and
xor
mov
movs
adc
(bad)
retf
dec
mov
mov
iret
adc
or
push
pop
loope
inc
in
and
mov
adc
in
inc
not
pop
mov
xlat
in
shl
adc
and
xor
test
sub
(bad)
sub
in
and
jp
dec
adc
arpl
fwait
inc
(bad)
sub
xchg
or
or
fcom
pop
adc
sub
int3
inc
sbb
into
leave
cmp
jle
ss
push
pop
dec
jne
sub
loopne
ins
jbe
and
cmp
sub
pop
outs
push
push
xchg
ja
sub
ins
adc
data16
pop
pop
push
out
pop
push
lock
scas
cmp
leave
cdq
mov
sbb
addr16
mov
lods
sub
lods
retf
jo
sysexit
mov
sbb
not
jnp
jmp
jl
adc
cmp
pop
fadd
inc
inc
jae
mov
mov
push
cmp
je
mov
jne
rol
mov
adc
stos
sub
sbb
fstp
ds
adc
sbb
cmp
pop
out
cmp
push
das
mov
popf
inc
inc
ret
fcmovne
pop
inc
sub
mov
sar
ret
mov
popa
jne
out
out
push
mov
add
test
add
sbb
ins
push
lods
jno
ss
or
jp
sahf
push
add
inc
rcl
mov
sbb
cld
nop
call
dec
jge
ror
loop
stc
loopne
out
mov
bound
fisttp
xchg
or
rcr
and
dec
or
loopne
shr
jb
sub
cmp
lods
pop
aas
out
ret
mov
xchg
jb
loopne
fcomp
sub
nop
fld
mov
inc
mov
xchg
into
aad
push
jmp
xor
div
xor
scas
dec
out
adc
xchg
cmp
shr
mov
cmp
xor
sbb
daa
scas
xchg
jecxz
push
fwait
or
push
mov
push
add
push
push
pop
inc
pop
jns
and
out
loop
lock
xchg
sti
test
and
dec
fstp
cmp
pusha
xchg
mov
mov
sub
push
fimul
dec
cmp
lods
mov
adc
cwde
jl
pop
fiadd
cld
mov
push
pop
clc
sub
sbb
inc
cdq
pop
mov
nop
jmp
and
test
mov
mov
and
sub
push
cmp
adc
cmp
mov
ins
adc
xchg
xchg
mov
xchg
jl
in
out
arpl
cs
ss
xor
mov
push
and
mov
loop
pop
cmp
lds
or
push
test
and
or
lds
neg
lds
(bad)
sbb
mov
mov
retf
retf
push
leave
idiv
sbb
xor
test
fsub
out
mov
shl
scas
int3
adc
push
xchg
xchg
xor
shr
inc
xchg
add
loop
das
ss
or
hlt
fst
mov
fild
mov
loopne
fidiv
nop
das
sbb
xor
adc
gs
(bad)
into
mov
xchg
push
jmp
mov
sbb
mov
xchg
addr16
sub
adc
mov
rcl
cmp
push
inc
xchg
push
rol
xor
cmp
jmp
push
cmc
in
xlat
add
lea
inc
enter
add
scas
or
xlat
cmp
dec
mov
jb
jb
stos
arpl
lahf
pop
(bad)
je
je
fadd
sub
xchg
pop
adc
mov
enter
push
or
jp
es
icebp
adc
adc
fwait
jge
test
and
nop
repz
jae
cmp
int
add
in
pop
cmp
jg
div
nop
inc
adc
and
and
gs
cmps
(bad)
test
jae
inc
sqrtps
and
add
lods
pushf
mov
xchg
sbb
inc
cmps
cmp
and
test
(bad)
or
repnz
and
jo
jne
bound
cmp
rcl
push
ret
cwde
inc
iret
pop
mov
loopne
shr
mov
xor
pop
fmul
ficom
loope
ror
add
and
sbb
lods
jnp
jle
jae
lea
inc
pop
jb
retf
ss
jmp
cmps
mov
jmp
sub
lods
cmp
adc
rcr
sub
jle
es
loopne
inc
dec
ret
push
jle
xor
fwait
cmp
in
retf
pop
aaa
cmp
(bad)
push
mov
pop
add
jmp
sbb
fs
add
mov
mov
inc
fisubr
jb
or
ins
enter
cmps
(bad)
in
xlat
out
cmc
jns
in
fcomp
inc
js
ins
xor
mov
jmp
pop
call
call
bound
repnz
xchg
xchg
ins
sub
jae
inc
sahf
mov
adc
stos
adc
pop
adc
jle
out
imul
add
mov
dec
push
xchg
stos
add
add
adc
jbe
adc
fucom
and
dec
inc
neg
adc
xchg
push
pop
cmps
mov
jle
(bad)
sbb
or
xor
xlat
inc
jge
in
rcl
ret
jmp
sub
pop
imul
mov
mov
jge
dec
add
in
ret
push
jp
mov
jne
sub
iret
cs
inc
adc
stos
mov
mov
shl
call
and
iret
and
pop
call
lock
call
call
adc
mov
ins
retf
aaa
dec
test
mov
repnz
jmp
shl
push
cmp
and
pop
xchg
mov
cdq
add
pop
mov
mov
jmp
repz
add
outs
inc
das
fwait
jno
mov
adc
mov
test
mov
les
cmp
fdivr
push
mov
fdivr
movs
push
jecxz
hlt
ss
pop
test
push
xlat
push
(bad)
jmp
adc
jmp
inc
or
xchg
jecxz
dec
das
or
mov
dec
cwde
in
leave
add
clc
xchg
or
sub
cmps
and
mov
xchg
cs
(bad)
mov
pop
test
pushf
cmp
dec
ss
push
out
call
or
stc
js
sub
arpl
pop
jg
imul
inc
push
inc
pop
pop
mov
xor
mov
xrelease
adc
into
mov
test
inc
jl
mov
mov
cmps
mov
fmul
xabort
pop
sahf
inc
and
ret
test
inc
test
cmp
imul
ror
mov
stos
test
ins
pop
mov
cmp
rcl
pop
arpl
mov
push
(bad)
fld
dec
pushf
clc
pop
xor
mov
inc
aaa
aaa
shr
(bad)
or
xchg
inc
push
pop
cmps
loop
or
mov
jl
mov
mov
mov
push
jle
xor
je
push
cmp
stc
inc
xchg
out
or
pushf
adc
scas
loopne
je
pop
or
inc
cmp
ret
mov
(bad)
mov
add
pop
aaa
and
popa
jmp
cmp
pusha
retf
ins
dec
cdq
pop
ret
push
xchg
int3
cmps
inc
xchg
jbe
mov
inc
inc
xor
sbb
or
div
mov
sbb
daa
inc
lock
cld
outs
mov
pop
and
and
push
shl
test
imul
rcl
sub
adc
dec
stc
fbld
inc
jl
sub
pop
jmp
out
mov
dec
pop
dec
in
mov
fst
cs
xlat
mov
shl
in
push
dec
add
mov
push
(bad)
push
xchg
push
add
ret
ret
and
loope
rol
jle
xchg
and
cmc
ins
sub
fwait
jns
xor
xchg
and
outs
xlat
imul
test
rcr
nop
idiv
aaa
add
int
mov
sbb
xchg
(bad)
jmp
lock
pop
jge
cs
mov
mov
test
loope
(bad)
cmps
push
pushf
icebp
pop
jmp
(bad)
cmp
adc
mov
mov
or
in
mov
xchg
add
mov
mov
add
mov
jmp
xchg
inc
mov
fwait
pop
addr16
xchg
movs
mov
push
call
ss
jl
lea
loope
and
push
loopne
xor
add
inc
add
mov
jo
mov
inc
into
dec
mov
and
cmp
sbb
lahf
(bad)
xchg
ret
cmp
push
outs
cdq
xchg
adc
inc
loopne
je
cmc
sub
jae
in
fcom
mov
das
cmp
inc
ror
loope
push
pop
mov
jl
imul
aam
scas
push
cmp
xor
sub
in
push
adc
jb
xchg
cmps
scas
mov
mov
popf
leave
outs
gs
sbb
xor
xor
sub
fild
ret
ret
lahf
xor
imul
aad
jmp
push
inc
mov
out
sbb
jbe
adc
mov
xchg
aaa
sbb
pusha
hlt
push
mov
mov
rcr
jmp
rcl
and
hlt
out
cli
inc
or
out
mov
inc
(bad)
jle
mov
jl
test
push
push
inc
jl
mov
push
(bad)
scas
shl
mov
cmp
je
cwde
lods
lea
mov
sahf
gs
dec
icebp
mov
pushf
dec
fs
mov
cld
jo
pop
ja
out
push
sub
test
push
mov
or
jg
ret
int3
cs
mov
and
cmp
in
lds
iret
or
mov
mov
ds
cmp
je
scas
les
jmp
aad
mov
fisub
aaa
add
mov
xchg
jne
es
xchg
(bad)
or
or
(bad)
xchg
fist
out
xor
and
sbb
xor
lods
mov
mov
cmc
mov
imul
outs
jge
(bad)
imul
inc
adc
pusha
fild
xor
cmp
sub
xor
or
jb
adc
cmp
mov
jg
pop
cdq
cmp
rol
scas
in
cwde
enter
pusha
lahf
sbb
sub
iret
and
pop
cmps
loop
lahf
jecxz
(bad)
jmp
jmp
mov
sub
or
sub
xor
push
or
pop
movs
sbb
jae
(bad)
mov
xchg
mov
jecxz
bnd
mov
sub
sub
popf
sub
pop
jmp
(bad)
in
and
push
and
adc
mov
inc
(bad)
and
push
fnstenv
sahf
lahf
cmp
shr
xor
inc
push
jge
je
dec
repnz
fdivr
nop
xchg
ss
mov
and
inc
sub
pop
cmp
jo
dec
mov
inc
lods
mov
fisttp
fneni(8087
adc
mov
retf
push
fst
xor
xchg
cmp
mov
inc
mov
sbb
inc
jnp
ret
dec
mov
sbb
and
jl
fwait
je
aas
pop
loopne
(bad)
je
aam
push
fldpi
add
xchg
and
iret
mov
mov
in
mov
dec
cmp
sbb
aam
out
push
jne
jnp
cmp
mov
cmp
xchg
(bad)
mov
sbb
fwait
sbb
sbb
ins
jp
jns
out
pop
fstp
cmp
or
idiv
xchg
adc
jns
imul
or
xlat
and
mov
pop
iret
push
push
push
shl
pop
push
push
test
addr16
fucomp
jmp
xor
pop
scas
push
call
dec
xchg
cmp
ds
sub
mov
xchg
call
pop
add
test
xchg
les
mov
xchg
(bad)
push
movs
mov
and
repnz
add
test
mov
lahf
into
data16
ins
mov
push
and
jge
into
dec
test
mov
cmp
mov
sub
hlt
mov
sbb
mov
in
push
inc
dec
loopne
popf
loope
in
into
xor
or
xchg
mov
dec
cli
mov
xchg
or
(bad)
out
adc
fisubr
jnp
enter
(bad)
or
imul
lods
or
xor
push
mov
xchg
call
imul
mov
hlt
inc
cmc
inc
stos
xor
mov
ss
out
jne
sub
xchg
fbstp
icebp
ret
rcl
mov
adc
ret
in
xlat
sbb
ds
mov
out
push
xchg
(bad)
retf
push
dec
iret
lahf
inc
cmp
dec
imul
inc
call
loopne
lods
mov
jmp
dec
cdq
stc
adc
sub
xor
mov
mov
add
pop
cmovns
ror
in
dec
cmp
rcr
inc
lahf
or
mov
mov
mov
ins
test
fs
add
mov
add
cdq
dec
retf
imul
dec
push
sti
ins
jmp
test
xlat
pop
aas
loop
gs
sub
retf
cmp
enter
test
scas
xor
out
push
adc
cmp
or
movs
xlat
into
xor
xchg
les
xchg
outs
and
push
inc
popa
mov
jecxz
cli
add
pop
xchg
ds
rcl
cmp
add
loopne
or
cmp
retf
sbb
mov
lds
lock
xor
pop
mov
ins
push
iret
push
in
mov
enter
push
push
add
bound
add
add
adc
ds
sub
out
repz
jl
push
retf
dec
push
aam
les
mov
test
out
(bad)
cli
pop
movs
fadd
rcl
jmp
cdq
push
fdivr
stos
loope
mov
aad
loop
sbb
xchg
cmp
jae
aam
scas
push
mov
xchg
js
mov
cmc
mov
les
popa
push
scas
std
loope
xchg
adc
out
data16
push
stos
scas
xchg
cmp
fwait
mov
mov
jmp
ss
data16
xor
sub
(bad)
stos
mov
stc
pop
push
fs
push
mov
out
(bad)
adc
add
cmp
outs
rcr
cmp
jmp
lea
sub
sub
mov
or
jns
lods
stos
mov
pop
adc
data16
mov
sbb
ins
jle
sbb
movs
jmp
mov
jecxz
retf
nop
pop
lods
out
mov
jno
mov
mov
mov
es
sub
push
int
push
nop
(bad)
popa
test
mov
mov
inc
mov
and
mov
out
inc
pop
dec
aas
push
xor
push
xchg
push
adc
mov
sub
jns
fsubr
stc
xlat
loop
add
rcr
mov
and
dec
dec
sbb
sbb
and
sbb
ss
mov
adc
push
mov
lea
add
mov
ret
inc
mov
sbb
call
test
das
cmp
icebp
fstp
fdiv
or
or
add
jns
push
test
or
sbb
push
mov
dec
adc
adc
add
mov
cmp
mov
pop
cdq
sbb
pop
sbb
adc
stos
add
mov
inc
cmp
ins
in
lods
mov
mov
inc
xchg
lods
xchg
sub
jmp
mov
lods
pop
or
icebp
lahf
addr16
pop
data16
push
pushf
fisttp
pop
les
mov
retf
jmp
pop
test
rcr
push
xchg
nop
inc
es
pop
repnz
leave
cmp
cmp
xchg
jbe
push
sub
inc
cmps
gs
cwde
or
movs
sahf
push
into
rol
inc
pminub
int3
xchg
push
sti
div
pop
add
mov
popf
push
mov
sbb
ret
arpl
pop
popa
inc
sub
dec
movs
sub
pushf
pop
movs
sbb
pop
adc
sbb
xor
int
mov
jp
push
push
adc
arpl
fimul
imul
inc
shr
inc
push
mov
xchg
sub
mov
and
aad
jbe
inc
call
cmc
cs
push
das
mov
jl
int3
lds
fld
mov
xchg
dec
fcmovnu
add
xchg
std
jae
call
mov
push
in
mov
scas
addr16
and
icebp
das
lahf
ds
cdq
mov
xchg
xor
sbb
(bad)
jns
popf
xlat
xor
xchg
jge
pushf
seta
jnp
pop
inc
ror
out
push
fstp
call
ds
sub
xchg
sbb
jge
jg
inc
and
mov
ret
mov
mov
pop
or
jg
gs
sbb
pop
out
inc
xor
int
mov
mov
sbb
or
lods
push
ds
fnstcw
sbb
popa
pop
cmp
in
jle
mov
xlat
ret
xor
push
(bad)
jno
repz
jg
xchg
je
push
cmp
and
sub
test
xlat
mov
retf
add
jo
stos
mov
push
cwde
cmps
sub
je
inc
xor
or
out
inc
popf
xchg
and
xchg
outs
js
popf
enter
adc
in
mov
mov
push
icebp
dec
jb
jnp
jbe
fadd
stos
and
push
(bad)
idiv
daa
iret
sti
dec
dec
mov
scas
popf
call
lock
cmp
and
jle
cmp
mov
js
stc
sbb
js
xlat
data16
adc
xor
out
jmp
jmp
add
or
xlat
pop
or
dec
mul
ret
sar
cmps
sbb
sbb
push
out
stc
adc
sbb
xor
and
lds
setg
fwait
addr16
pop
mov
push
out
xchg
bound
cmp
ss
(bad)
mov
cmp
push
mov
cli
gs
push
mov
aam
scas
cmps
cmp
sbb
add
push
out
pusha
pop
xchg
ret
dec
mov
ins
cmp
xchg
cmps
push
pop
ror
push
in
add
test
clc
(bad)
jle
jns
add
(bad)
sahf
dec
icebp
scas
sti
mov
xlat
cmps
retf
sbb
push
fiadd
xchg
xlat
mov
ja
inc
mov
xchg
push
cmps
pusha
fmul
ja
(bad)
inc
inc
pop
lea
(bad)
in
or
add
dec
lock
pop
push
pop
push
adc
std
(bad)
lods
push
ss
or
sbb
jne
retf
gs
fdivr
inc
pop
sti
mov
xor
imul
inc
xor
mov
inc
dec
retf
sub
xchg
mov
fistp
xor
fldlg2
sbb
xchg
inc
mov
ins
movs
hlt
jnp
xor
jg
test
fwait
pop
xchg
pop
(bad)
adc
imul
rol
xlat
adc
addr16
scas
pop
imul
push
(bad)
mov
jb
mov
stos
mov
mov
iret
repz
push
push
push
int3
stos
cdq
xchg
adc
ja
sub
jge
push
jge
push
push
std
push
arpl
cmps
add
inc
or
mov
xor
dec
mov
fisttp
stos
movups
frstor
pop
pop
fwait
loope
pop
jmp
xchg
mov
clc
lahf
cld
cmc
int3
xor
cmc
test
adc
jno
mov
movs
out
dec
icebp
movs
push
mov
push
test
retf
daa
sub
xor
lds
or
sti
aaa
cdq
mov
push
loop
mov
sbb
aas
cmps
lock
test
push
call
outs
cmp
or
fisub
mov
jge
icebp
fcom
mov
mov
in
rcl
stos
add
fcomp
cmp
and
adc
repnz
and
pop
popa
sub
mov
mov
dec
add
mov
movs
dec
loopne
xchg
jle
aaa
pop
mov
pushf
sub
add
pusha
xchg
mov
retf
inc
gs
jns
aam
sbb
jle
inc
xchg
mov
dec
fwait
and
in
push
arpl
mov
outs
shr
inc
add
jmp
xor
push
loope
lods
lods
pop
shr
cmp
mov
jg
dec
hlt
fstp
(bad)
aas
mov
jl
push
sbb
idiv
sbb
push
sti
cmp
in
xchg
cmp
xor
lods
(bad)
mov
push
add
lock
xchg
test
mov
sub
mov
pop
out
bound
int
enter
call
xchg
in
lods
shl
and
xor
je
(bad)
lods
bound
mov
mov
jg
sbb
ja
pop
pop
cld
and
(bad)
jne
inc
pop
ficomp
mov
jbe
xchg
dec
ret
ins
stos
(bad)
inc
jp
and
js
jp
test
pop
lods
pop
mov
inc
cld
mov
rcr
icebp
mov
jno
in
test
jae
push
mov
xor
xor
out
adc
push
push
pop
jns
icebp
mov
fnstenv
mov
mov
movs
sbb
fisub
hlt
pop
mov
jl
lods
rcl
neg
out
mov
push
sub
sub
and
leave
pop
stos
inc
mov
adc
cld
pusha
movs
dec
sbb
gs
sar
sti
dec
dec
cmp
mov
dec
mov
xchg
shl
lahf
push
fsub
lds
adc
scas
dec
cmp
gs
test
push
stos
test
or
push
cli
shl
add
stos
add
in
(bad)
(bad)
fld
lods
ins
sub
sub
je
hlt
add
adc
and
adc
std
fldenv
cmp
fistp
mov
inc
out
mov
call
pop
das
adc
es
dec
jg
and
jae
icebp
fcom
sar
test
jle
push
xor
and
ror
jmp
xor
cdq
ret
push
cmp
mov
imul
jne
pop
sub
adc
sub
mov
mov
push
outs
cmp
cmp
pop
js
cmps
mov
popf
xchg
mov
lds
ss
call
sahf
stc
les
xchg
xlat
dec
sbb
jo
retf
retf
xor
out
outs
imul
ret
xor
dec
pop
mov
faddp
add
sar
mov
cmp
jae
and
mov
mov
mov
arpl
adc
jle
je
mov
lods
test
push
ret
arpl
sub
jae
mov
or
ins
mov
adc
mov
imul
jge
out
cmp
ja
call
cmp
leave
sbb
out
aam
push
repz
neg
cmp
xor
sub
or
jl
out
aad
jne
arpl
and
stos
mov
cmp
jae
mov
gs
lock
aaa
mov
xchg
les
adc
jb
mov
mov
rcl
mov
mov
xchg
pop
inc
sub
outs
push
adc
mov
mov
jecxz
into
cmp
pop
lock
xchg
jae
push
adc
loope
lds
mov
mov
push
jne
push
aas
lock
scas
pop
push
inc
stos
mov
mov
test
test
stos
clc
cmp
into
sub
fst
and
call
sbb
lds
jmp
xor
push
sbb
(bad)
leave
dec
iret
(bad)
adc
imul
jmp
sub
sub
jp
retf
fcomp
mov
fist
jmp
cmp
(bad)
mov
xchg
xchg
popf
add
addr16
cmp
sti
mov
dec
aam
push
imul
jno
jne
or
shr
jnp
jle
or
mov
xor
test
sbb
or
dec
jge
bound
call
popf
iret
xor
xchg
test
add
outs
dec
inc
and
and
jg
(bad)
fcmovnb
cmp
cld
mov
xor
add
fs
fucom
imul
xor
js
jnp
or
inc
int3
not
ds
call
and
leave
loopne
and
out
mov
scas
mov
xchg
xor
loope
cwde
pop
arpl
les
cs
(bad)
sub
pushf
mov
retf
shl
out
cmc
pop
or
ds
sub
dec
adc
xor
dec
mov
jmp
or
in
jnp
gs
data16
xchg
mov
sbb
in
sub
rcl
ja
xor
add
mov
cs
mov
jne
push
pop
iret
inc
mov
or
push
test
mov
stos
pop
pop
mov
and
retf
mov
fs
dec
jne
(bad)
nop
mov
mov
adc
mov
iret
xor
add
inc
push
fld
sbb
jno
out
inc
call
jge
add
gs
sbb
in
adc
dec
stos
clc
adc
hlt
adc
fnstenv
push
rcr
adc
cdq
imul
inc
icebp
pop
add
ins
jg
movs
xchg
imul
push
lods
xchg
cmp
leave
xchg
loop
rcr
xchg
out
mov
fdivr
test
xor
add
cmp
dec
xor
repnz
ja
xchg
xor
outs
xor
fisub
jns
sub
add
mov
sbb
pop
mov
lods
stos
call
gs
adc
pop
aad
or
repz
movs
cli
adc
jecxz
lods
sub
rol
mov
pop
sar
addr16
in
adc
and
xchg
push
cmp
sub
xor
mov
js
push
pop
out
jae
dec
or
loop
xor
pop
ins
movs
stos
in
int3
fadd
sti
ret
dec
or
hlt
in
shr
ret
dec
add
pop
aas
fwait
push
add
mov
mov
cmps
jp
and
dec
jmp
cmp
jae
mov
push
fstp
adc
adc
inc
or
push
inc
push
xor
rcl
jp
sub
mov
or
fist
rol
mov
(bad)
jp
jno
iret
fsubr
adc
outs
jecxz
jne
shl
call
mov
pop
jle
inc
mov
cld
sub
popa
fistp
xor
pop
movzx
sub
xor
and
dec
xchg
push
pop
ds
or
sub
mov
repnz
mov
xchg
inc
fisttp
push
jo
dec
push
aaa
cmps
outs
std
ret
test
jo
(bad)
or
adc
or
aad
lahf
inc
dec
bswap
lea
add
mov
and
cmp
inc
lods
imul
dec
sbb
daa
dec
into
ja
push
int3
push
xlat
arpl
and
xor
mov
mov
das
dec
cmp
and
lods
std
leave
stc
retf
push
cld
in
lahf
mov
les
adc
jbe
or
dec
ja
add
mov
add
hlt
mov
in
addr16
imul
por
mov
xchg
xor
mov
ins
bound
cld
jbe
retf
cmc
lds
sbb
(bad)
add
sbb
fcom
das
test
ins
mov
and
es
cmp
pop
xchg
pop
shl
js
xchg
jl
ins
cmp
popf
inc
jmp
(bad)
imul
dec
or
ffreep
dec
imul
pop
push
popa
fcmovne
in
mov
adc
lea
cmp
cmc
add
sbb
push
dec
fcmovnbe
call
mov
popf
mov
je
adc
in
sti
dec
xor
dec
mov
stos
test
ins
out
adc
cmps
jle
and
mov
fbld
cmp
xlat
test
push
push
push
enter
mov
xor
std
sbb
retf
adc
pop
stos
mov
xchg
xlat
(bad)
dec
sbb
pushf
mov
test
lea
jae
mov
test
push
or
mov
fdivr
daa
aam
xor
mov
cli
jge
sbb
test
jp
rol
cmp
push
pcmpgtd
lods
push
loope
mov
leave
jne
xor
push
lea
push
sub
ss
daa
shl
pop
dec
push
inc
jl
out
mov
retf
jmp
out
retf
clc
dec
cmp
ins
fisub
sbb
jge
xchg
dec
mov
out
mov
dec
and
sbb
std
in
cmpxchg
fwait
adc
outs
jmp
outs
shr
mov
aam
out
loopne
inc
popa
xchg
adc
adc
and
pop
(bad)
adc
push
add
sbb
outs
ds
scas
cmp
add
mov
xor
aam
and
jmp
dec
mov
or
mov
pop
jb
test
adc
mov
jo
push
es
enter
xchg
inc
stos
hlt
mov
add
aaa
lahf
jmp
(bad)
mov
add
or
mov
ja
pcmpeqb
mov
ja
cld
dec
lea
ins
xlat
add
inc
mov
pop
std
(bad)
fs
fnstenv
out
dec
aad
jl
mov
ret
mov
mov
lea
inc
pop
loope
dec
movs
call
pop
pop
sbb
push
fadd
sahf
pextrw
ins
scas
sti
lahf
nop
(bad)
jecxz
lods
div
mov
pop
add
xor
aam
and
cmp
fs
retf
mov
mov
adc
or
outs
adc
dec
sub
sbb
xor
jae
or
dec
sub
add
bnd
and
test
femms
or
cmps
pop
cs
pop
into
cwde
into
cmc
push
aas
pusha
sub
retf
mov
inc
in
mov
div
(bad)
inc
adc
stos
inc
jns
xchg
movs
sub
pcmpgtb
cli
jo
cmps
push
cwde
jo
pusha
push
std
jg
ret
fwait
call
xchg
mov
sub
inc
pop
and
jmp
bound
inc
(bad)
je
inc
or
pop
mov
cmp
sbb
nop
inc
xchg
inc
shl
push
test
les
xchg
out
and
popa
daa
mov
clc
sub
xor
jmp
cmp
inc
jno
and
out
inc
mov
pop
mov
call
cmp
sbb
(bad)
movs
mov
adc
xchg
push
daa
imul
dec
and
shr
sub
cli
mov
xchg
repnz
mov
outs
sahf
movs
jmp
push
inc
jecxz
pop
popa
sub
push
pop
fdivr
dec
sti
jno
in
push
mov
mov
sub
icebp
or
xchg
(bad)
addr16
mov
fcmovnb
mov
aad
sub
stos
bound
iret
and
push
popf
(bad)
sbb
dec
(bad)
cli
mov
cmp
xchg
or
xchg
dec
xor
cmp
sub
aad
scas
and
add
xchg
addr16
cmc
pop
cmp
sub
pop
mov
call
lods
jmp
jnp
inc
pop
inc
xchg
push
pop
mov
xchg
js
in
or
xchg
pop
pop
jne
les
push
push
dec
pop
cld
and
fidivr
stos
xlat
cmp
jne
hlt
in
shl
lock
or
scas
mov
ins
cmp
xchg
fisttp
mov
cmp
push
mov
je
xor
das
xor
add
mov
push
scas
cmc
and
leave
repnz
mov
push
out
dec
and
outs
add
mov
pop
and
push
es
sbb
fbld
cwde
mov
pop
xchg
sub
jg
inc
in
pop
retf
loopne
loope
sbb
popf
lea
dec
dec
jns
push
dec
mov
lds
adc
jmp
mov
mov
sbb
mov
push
loope
gs
mov
fldenv
ror
push
xchg
xchg
mov
das
(bad)
mov
dec
xchg
sub
mov
leave
test
addr16
ret
xchg
mov
ss
jo
mul
faddp
cmp
and
dec
ret
(bad)
pop
sti
in
cli
cmp
test
cmp
jle
pop
inc
and
push
xchg
dec
add
(bad)
fistp
inc
dec
out
cmp
xchg
loopne
or
setle
push
(bad)
icebp
test
ja
adc
xor
push
pop
xchg
loopne
dec
jmp
sub
scas
loopne
dec
mov
aas
pushf
pop
cmps
into
(bad)
lods
aam
push
scas
std
sub
xor
ds
ficomp
outs
adc
idiv
icebp
scas
(bad)
or
gs
inc
xchg
iret
jg
fs
call
lea
push
adc
cmp
pop
push
sbb
cs
mov
cmp
jp
jmp
jmp
cmp
push
mov
mov
ret
jmp
sar
cmps
bound
out
pop
int
jl
pop
mov
mov
xchg
sahf
sbb
adc
cmp
push
sub
and
popf
int
rcl
xor
dec
lds
in
ins
xor
popa
mov
add
sbb
bound
adc
adc
add
popf
pop
inc
pop
mov
movs
push
nop
add
dec
dec
inc
inc
push
xchg
dec
push
push
fst
xor
pop
outs
add
dec
(bad)
mov
jno
rol
cmps
adc
mov
mov
mov
icebp
repz
sub
aaa
repz
lods
cmc
jns
fs
mov
in
inc
cmp
fidiv
and
push
fimul
dec
mov
test
mov
repz
inc
push
mov
sub
(bad)
sbb
pusha
sub
cld
fild
es
mov
pop
lea
pop
xchg
ret
mov
mov
dec
in
sub
inc
div
out
shl
cli
in
int
sahf
aaa
scas
adc
or
mov
inc
and
push
cmp
outs
dec
je
gs
adc
imul
in
or
cld
push
retf
push
loope
call
xor
aaa
add
inc
mov
adc
mov
shr
loop
mov
in
push
repz
fnstcw
push
adc
dec
push
jmp
jmp
jle
inc
pop
outs
push
push
sub
out
dec
gs
enter
loopne
and
ss
mov
mov
jl
out
imul
out
xor
jns
das
mov
sub
cmp
mov
mov
inc
adc
nop
leave
pop
jecxz
popf
jbe
push
fbld
imul
daa
pop
scas
je
adc
sar
aad
xor
jge
push
or
cmp
in
nop
mov
or
test
fstp
xchg
or
nop
test
fst
adc
jns
loope
jle
out
mov
cmp
mov
xchg
xor
js
xchg
jecxz
or
out
adc
clc
sbb
mov
mov
adc
mov
and
ss
mov
add
push
imul
xor
daa
pusha
inc
cmp
aas
jg
inc
test
in
dec
jb
pop
xchg
jg
or
push
sub
push
push
mov
mov
rcr
stos
jp
lea
lahf
cmp
sbb
push
mov
mov
data16
jbe
clc
sub
inc
push
popf
or
jge
xchg
rcl
xchg
mov
sbb
(bad)
adc
repz
inc
jmp
adc
cmp
mov
xchg
ret
mov
outs
or
jmp
cmps
mov
cmp
mov
push
xor
imul
add
repz
xor
dec
sub
cmps
push
(bad)
cmps
pop
dec
fsubr
xchg
(bad)
cmp
adc
xor
xchg
pop
mov
push
xchg
inc
cmp
push
mov
sbb
test
add
xor
pop
sahf
mov
xor
sub
pop
lods
xchg
mov
inc
pop
xor
mov
stos
jno
or
or
repz
mov
inc
xchg
mov
sub
pop
mov
loope
leave
pop
jmp
push
dec
lock
jge
sbb
sar
pop
inc
fld
sub
rcl
dec
lock
jge
jmp
push
mov
add
fadd
jle
sbb
adc
push
les
sbb
sbb
or
daa
xor
xchg
pop
jecxz
in
jno
jmp
sbb
sub
popa
rol
xchg
lods
xlat
into
pop
mov
mov
loop
cmp
(bad)
mov
lahf
xchg
cwde
icebp
lea
outs
mov
and
jb
sbb
sbb
lock
add
mov
push
mov
cwde
dec
mov
dec
sbb
dec
xchg
outs
dec
cwde
xor
out
ds
mov
cmp
loop
push
mov
dec
dec
mov
inc
dec
outs
movs
je
lahf
xchg
mov
enter
loopne
mov
out
and
sar
mov
cmp
gs
mov
xlat
lds
pop
mov
fcmovnb
js
xchg
xor
or
sub
push
mov
push
rol
jno
pextrw
imul
std
aaa
xchg
ficomp
fisttp
adc
and
pop
xor
and
cmp
mov
pop
out
std
fimul
xchg
aaa
scas
(bad)
stc
and
sahf
cld
aas
push
inc
out
ret
ja
xor
retf
ss
aas
jb
imul
rcr
or
mov
add
cmp
fiadd
hlt
push
loopne
cs
and
loopne
inc
outs
push
mov
push
in
xchg
sbb
jnp
fimul
pushf
dec
js
rcl
fs
repz
lds
jmp
fisttp
inc
lods
adc
in
sub
mov
add
test
lock
jne
test
mov
(bad)
adc
cs
jg
sti
imul
adc
ret
dec
adc
or
push
test
jge
mov
mov
stos
cmp
cmp
adc
push
retf
arpl
or
outs
or
stc
leave
pop
pop
adc
jnp
inc
jbe
(bad)
icebp
shr
aaa
cdq
ret
les
fs
(bad)
cmp
imul
aad
scas
mov
xor
in
and
pop
jg
in
push
push
pop
push
mov
stc
inc
ds
dec
repz
int
xchg
sub
out
adc
jg
adc
push
mov
mov
and
pop
adc
cmp
gs
out
push
jns
imul
cmp
mov
sahf
les
mov
int
test
cli
mov
adc
add
jns
mov
or
popa
dec
xchg
add
add
jecxz
ret
inc
jp
fdivr
mov
fdivr
pop
rol
inc
cli
inc
mov
xchg
jno
