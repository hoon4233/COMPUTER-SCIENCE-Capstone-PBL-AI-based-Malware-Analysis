mov
sub
ret
int
adc
or
pop
dec
xor
pop
xor
or
neg
pop
inc
mov
out
jg
pushf
dec
pop
push
jae
pop
xor
or
test
adc
or
js
mov
mul
mov
xor
clc
adc
xchg
inc
xor
inc
sbb
stc
fucomip
pusha
aas
add
in
xchg
xor
or
mov
add
push
retf
inc
mov
fldenv
pop
mov
and
or
inc
test
std
xchg
sahf
fcom
retf
jmp
add
pop
inc
arpl
or
dec
pop
xchg
add
push
xor
adc
loopne
mov
pop
xor
pop
xchg
mov
pushf
jno
adc
mov
jmp
inc
dec
test
mov
cmp
mov
mov
arpl
pop
call
or
mov
mov
dec
dec
pop
mov
dec
dec
pop
(bad)
fistp
and
xlat
jbe
and
dec
dec
pop
(bad)
sub
pop
mov
mov
push
pop
cwde
xor
push
pushf
imul
add
imul
retf
bswap
adc
fs
jmp
cmp
add
mov
xor
mov
add
mov
jae
call
popa
add
pop
jae
jmp
dec
add
xor
or
sbb
mov
jge
shl
cmp
enter
or
xor
pop
xor
add
cmc
cmp
pop
mov
add
hlt
stc
imul
stos
mov
retf
clc
and
mov
loopne
or
pop
fdiv
mov
adc
push
dec
outs
add
xor
pop
inc
mov
cld
fsubr
bound
ins
push
scas
xor
pop
ins
mov
mov
pop
popa
add
adc
jbe
pusha
lea
or
add
or
add
xor
push
or
sar
adc
int3
adc
bound
pop
movs
enter
sub
jbe
pusha
aaa
hlt
into
or
test
mov
mul
adc
retf
mov
xor
fsub
int3
syscall
inc
sbb
mov
fdivp
call
or
xor
xor
(bad)
fild
inc
popf
jmp
retf
mov
ror
mov
hlt
pop
mov
out
cmp
mov
jae
sub
pop
pop
pop
cmp
or
cmp
sbb
or
leave
hlt
sahf
lds
shr
or
push
xor
icebp
cs
jge
retf
leave
cld
pushf
jno
xor
stc
or
sub
push
or
mov
xadd
je
xor
xor
icebp
cs
mov
push
cmp
leave
xchg
cld
jae
xchg
or
dec
out
inc
or
cld
xor
or
xlat
rcl
add
or
fdiv
pop
xor
pop
inc
mov
pushf
iret
xchg
enter
add
and
jae
aad
dec
add
jbe
adc
leave
xchg
cld
jae
xchg
or
into
popa
cmp
jae
pop
ffreep
and
sbb
push
sbb
mov
jae
push
or
or
call
int3
jae
call
retf
mov
jae
call
retf
xchg
enter
mov
or
pop
mov
jae
sbb
retf
addr16
push
dec
outs
inc
retf
inc
mov
ficomp
imul
gs
cdq
or
add
sar
mov
jne
fld
in
xor
or
add
add
retf
dec
pop
mov
jns
or
push
jo
push
int3
add
add
xor
aam
add
pop
inc
arpl
push
sbb
leave
hlt
pop
push
sar
scas
stos
or
ret
jmp
adc
fs
xor
sub
fistp
pushf
pop
sahf
cmc
jnp
(bad)
into
mov
out
sub
adc
and
ficomp
dec
add
into
or
mov
loopne
jo
push
rol
fdivp
fld
inc
arpl
jge
mov
jo
jo
in
mov
int
pop
xor
or
sahf
ret
addr16
jno
pop
test
sbb
xor
xor
dec
cs
call
pop
ret
jmp
adc
xlat
rcl
add
pop
inc
mov
jmp
adc
mov
adc
stc
add
xchg
jle
pop
bound
retf
jae
push
enter
ja
pusha
mov
into
or
movs
cmc
call
enter
fadd
call
fild
adc
xlat
rcl
add
or
mov
clc
push
mov
pop
retf
stc
add
mov
or
mov
mov
sub
pop
pop
mov
fdiv
push
int3
add
or
imul
inc
mov
repz
jb
jnp
outs
xor
mov
hlt
dec
dec
pop
xor
add
fs
adc
test
jae
adc
add
iret
pushf
xor
pushf
sub
pop
pop
(bad)
mov
dec
imul
xor
pop
pushf
inc
test
sahf
int3
(bad)
lock
(bad)
pop
mov
dec
mov
mov
fcom
out
in
in
mov
in
mov
sahf
test
rcr
test
adc
fisub
(bad)
into
or
out
call
or
mov
push
pop
mov
add
jge
mov
fsub
(bad)
into
or
jae
add
or
mov
mov
loopne
add
cmp
cmp
add
jge
add
xor
jno
mov
lock
(bad)
loopne
jae
dec
add
inc
retf
inc
mov
lea
jmp
daa
or
ficomp
(bad)
call
xor
test
cs
pop
xchg
dec
lea
pop
mov
dec
dec
pop
mov
dec
mov
hlt
dec
dec
pop
xor
adc
fs
cmp
bound
pop
xor
sar
in
add
or
mov
jae
call
cdq
mov
jge
in
in
mov
call
retf
jae
sar
mov
call
mov
enter
or
lea
pop
mov
dec
test
fadd
adc
call
enter
xor
mov
xor
or
imul
out
xor
sti
mov
xor
pop
mov
in
movs
rcr
aam
or
add
add
mov
sbb
xor
sti
mov
icebp
add
jae
aaa
mov
jnp
sahf
mov
imul
retf
add
or
in
xlat
jbe
pusha
adc
into
or
jae
sub
or
mov
stc
cmp
mov
imul
retf
add
imul
retf
fsubr
inc
mov
mov
pop
mov
stc
add
jae
call
xor
mov
xlat
jbe
or
sub
pop
pushf
add
pop
pop
retf
leave
lock
jno
xor
or
adc
xor
or
in
imul
mov
inc
retf
inc
mov
ficomp
push
xchg
mov
pop
dec
xor
sub
int3
add
or
out
jge
in
pop
xor
mul
xchg
mov
pop
mov
mov
or
mov
xadd
je
xor
xor
icebp
sahf
mul
or
retf
stc
add
fsubr
jl
mov
jge
add
fs
jg
jle
pop
bound
xor
pop
dec
rcl
neg
xor
xor
jecxz
xor
pop
inc
arpl
data16
leave
mov
inc
dec
(bad)
jmp
cli
push
xor
xor
shl
mov
jae
(bad)
cli
jo
call
mov
movhps
retf
jge
fs
mov
cwde
mov
sahf
mov
imul
retf
fadd
call
retf
jae
sar
or
or
mov
jp
pop
xor
jmp
mov
imul
retf
add
imul
retf
fsubr
inc
mov
add
jge
mov
or
aam
or
call
nop
jle
pop
mov
jae
pushf
or
sbb
xor
or
mov
or
in
jnp
sahf
mov
imul
retf
add
retf
call
test
inc
mov
add
pop
xchg
xchg
mov
pop
pop
cmp
push
xor
mov
call
imul
mov
add
int3
jae
call
retf
mov
fbstp
lea
xchg
dec
enter
sub
(bad)
jo
xlat
cmp
push
adc
outs
xchg
mov
imul
retf
mov
xchg
add
cmc
call
mov
push
pop
xor
or
jle
pop
mov
jae
push
je
call
repz
mov
dec
pop
mov
retf
mov
call
out
mov
pop
cmp
lea
add
inc
pop
cmp
push
xor
jg
xor
mov
cmp
imul
repnz
pop
push
dec
lea
xor
sti
sbb
or
cmp
mov
into
or
cmp
push
xor
and
jae
sar
mov
call
mov
jae
jg
add
fsub
cmc
call
fucomip
or
cmp
lea
mov
imul
retf
add
cld
dec
dec
pop
mov
not
mov
pop
inc
jne
mov
xor
add
div
or
mov
retf
or
adc
dec
dec
pop
xor
lea
jae
call
pusha
(bad)
xchg
into
or
aaa
jno
call
div
jge
xor
(bad)
jmp
or
ret
push
mov
sahf
in
mov
(bad)
iret
retf
jb
inc
mov
jae
pushf
or
pop
dec
mov
or
(bad)
call
lea
mov
jae
pushf
or
pop
aaa
mov
or
xchg
pop
imul
retf
mov
loopne
add
neg
retf
jb
pop
mov
mov
retf
sbb
or
or
or
pop
repz
pop
xor
test
add
inc
mov
jae
pushf
add
pop
or
mov
call
jbe
adc
pop
xor
and
adc
mov
pop
xor
(bad)
(bad)
retf
jb
inc
mov
jae
pushf
or
lahf
(bad)
xor
or
xor
add
neg
xor
(bad)
in
mov
call
adc
pop
xor
arpl
sbb
xor
dec
xor
push
mov
jae
aam
stos
test
fs
(bad)
retf
retf
jb
inc
mov
add
and
mov
mov
xchg
xchg
daa
dec
xor
test
fs
(bad)
dec
jb
inc
mov
add
pop
xchg
addr16
push
push
mov
jae
aam
sub
call
xor
jne
test
fs
mov
cmp
lods
sti
retf
jb
pop
fnstsw
pop
xor
or
xchg
and
push
mov
jae
aam
cmp
call
leave
jae
call
jbe
test
fs
mov
and
retf
jno
or
pop
mov
jae
xchg
mov
or
or
pop
mov
mov
in
add
xchg
fcomp
pop
xor
lods
pushf
mov
retf
fild
sahf
jno
or
dec
jae
call
enter
jns
or
mov
xchg
call
in
movs
rcr
retf
jb
inc
pop
dec
cli
push
xor
lea
mov
mov
pop
xor
dec
jmp
dec
pop
xchg
cmp
and
mov
jae
call
retf
jb
inc
mov
add
pop
xchg
jecxz
or
mov
test
retf
dec
mov
mov
mov
dec
mov
dec
outs
shl
mov
sahf
in
mov
lea
mov
imul
retf
add
inc
mov
jae
sti
and
out
scas
xor
mov
mov
sbb
xor
sti
mov
xor
or
arpl
or
xchg
clc
imul
retf
mov
aam
or
jae
jg
jle
pop
mov
jae
pushf
or
sbb
xor
or
mov
or
mov
imul
retf
mov
xchg
fmul
call
xor
mov
pushf
mov
imul
retf
fadd
sahf
jno
or
js
imul
mov
mov
xchg
mov
inc
retf
jb
pop
cmp
mov
stos
ins
jae
call
xor
or
retf
fdiv
mov
fcom
int3
pop
mov
(bad)
imul
retf
or
or
retf
mov
or
call
xor
mul
mov
jae
jg
jle
pop
mov
jae
jmp
sub
pop
mov
sbb
xor
test
retf
jb
xchg
cld
jae
xchg
or
(bad)
out
retf
jb
call
retf
add
inc
mov
jae
xchg
xor
jmp
xchg
mov
xchg
lock
mov
jl
retf
arpl
or
fadd
call
retf
pop
lea
mov
imul
retf
or
mov
imul
retf
fadd
xchg
(bad)
sub
lea
mov
jae
sti
retf
jb
pushf
mov
imul
retf
mov
sti
retf
jb
sbb
(bad)
out
jb
pop
inc
mov
xchg
leave
jae
call
in
add
imul
retf
fadd
xchg
mov
retf
mov
or
call
add
pop
pop
mov
outs
add
mov
xor
add
mov
imul
retf
fadd
pushf
mov
imul
retf
fadd
pushf
mov
imul
retf
fadd
xchg
test
test
mov
jg
retf
jae
dec
outs
inc
retf
inc
mov
push
enter
xchg
pop
je
ins
mov
mov
pop
fs
or
mov
adc
xor
fisttp
movs
push
or
jno
or
xor
mov
xchg
adc
xor
push
adc
xchg
mov
xchg
lock
int
jae
pushf
dec
push
adc
icebp
in
xchg
or
push
xor
jge
fistp
imul
retf
shl
or
xor
adc
xor
dec
retf
and
adc
icebp
aam
int3
jnp
sahf
jno
sub
jne
fist
iret
push
enter
retf
rcl
movs
pop
dec
out
das
or
xor
cdq
fdivp
mov
inc
mov
(bad)
sahf
int3
jnp
sahf
jno
adc
in
dec
pop
fmul
xor
jge
pop
sub
push
xor
mov
shl
int3
xlat
jbe
bound
pop
mov
adc
or
out
(bad)
jns
or
mov
imul
(bad)
test
fdivp
fld
pop
or
adc
repz
xlat
hlt
into
or
inc
mov
xlat
fbstp
or
jno
jl
add
cmp
sub
dec
mov
xor
int
call
nop
mov
xchg
lock
mov
push
dec
neg
xor
arpl
push
sbb
xor
adc
push
mov
jae
xor
or
stc
add
test
dec
fxtract
mov
pop
xor
out
sahf
jno
adc
add
jbe
std
mov
test
push
mov
or
jmp
loope
repnz
cmp
xor
repz
in
add
dec
add
mov
adc
mov
shl
mov
outs
inc
retf
inc
mov
lea
jmp
ficomp
and
jnp
mov
loope
xor
not
mov
jg
push
int
or
mov
enter
not
mov
addr16
xor
mov
xor
mov
enter
add
push
xor
or
xor
sti
mov
push
push
mov
jae
aam
leave
add
retf
shrd
retf
jb
pop
mov
pop
pop
xor
jmp
mov
hlt
jmp
ds
pop
fdiv
test
xor
(bad)
iret
retf
jb
push
hlt
or
jge
pop
retf
cmp
call
stos
mov
sahf
mov
imul
retf
test
bound
mov
jmp
push
cmp
mov
fimul
pop
xor
(bad)
(bad)
retf
jb
sahf
mov
hlt
jmp
xor
or
mov
add
pushf
xlat
jbe
add
inc
xchg
mul
fcomp
xor
rcl
in
add
sbb
iret
add
leave
cld
pushf
xor
dec
jmp
push
or
mov
pop
or
retf
add
inc
pop
mov
retf
stc
cld
call
retf
add
jl
retf
cmp
call
stos
mov
pushf
mov
imul
retf
gs
xor
mov
fst
pushf
xlat
jbe
or
mov
jae
pop
mov
add
retf
cld
out
or
mov
jae
call
bound
retf
cmp
call
nop
jb
call
mov
imul
retf
(bad)
ror
jb
jae
mov
xlat
inc
xlat
adc
mov
ds
add
adc
or
call
cld
jae
call
retf
push
int3
pop
dec
jecxz
mov
movs
inc
mov
xchg
hlt
test
call
shl
retf
jb
sahf
jno
loope
xor
pop
xor
dec
jecxz
mov
ds
xchg
hlt
mov
pop
mov
jae
xchg
test
imul
fs
call
bound
retf
stc
cld
call
retf
add
or
mov
jae
call
in
add
imul
retf
fadd
call
adc
popf
mov
jb
sahf
jno
not
mov
mov
retf
pusha
xor
lea
xor
dec
jmp
push
push
mov
jae
aam
leave
hlt
xchg
hlt
test
call
test
imul
retf
sbb
call
int3
or
or
mov
mov
rol
sahf
jno
or
fs
call
enter
mov
jo
call
retf
jge
add
inc
mov
jae
jge
jae
jecxz
sbb
int3
shrd
retf
jb
pop
mov
or
jae
aam
or
pop
mov
(bad)
rcr
mov
jo
call
retf
call
bound
retf
cmp
cmp
call
retf
or
idiv
aaa
mov
pusha
xor
lea
xor
dec
jmp
push
or
mov
pop
or
retf
jae
scas
retf
jb
call
retf
add
imul
retf
xor
pop
xor
push
mov
jae
aam
leave
cld
pushf
xor
dec
jmp
dec
push
jbe
mov
sahf
mov
hlt
jmp
mov
hlt
jmp
call
out
call
mov
imul
mov
js
pop
mov
(bad)
rcr
mov
jo
call
inc
jo
call
retf
jb
inc
mov
jae
jge
jae
jecxz
sbb
push
int3
pop
dec
jecxz
mov
out
mov
xchg
hlt
enter
or
jae
pop
mov
jae
call
test
fs
(bad)
call
test
fs
call
dec
jo
call
xor
enter
or
xor
bound
mov
jae
push
adc
pop
mov
es
xor
jmp
mov
hlt
jmp
xor
or
pop
mov
call
xor
pusha
pop
xor
add
inc
fcomp
pop
xor
lea
jb
xchg
hlt
mov
xchg
not
inc
pop
xor
or
mov
pop
mov
jae
jge
jae
jmp
cld
bnd
enter
hlt
mov
jge
in
pop
xor
test
fs
call
into
jae
jge
in
pop
xor
test
fs
call
retf
fs
in
retf
jae
rcl
sti
retf
jb
(bad)
fst
or
cmp
xor
call
xor
adc
pop
outs
stc
push
xor
lea
fdivr
int3
sbb
jae
pop
xor
mov
mov
jge
in
out
mov
call
retf
jae
sar
mov
call
adc
in
retf
push
and
or
cmp
add
aaa
mov
xchg
xor
or
pop
mov
retf
mov
call
mul
retf
cmp
call
int
idiv
in
out
mov
call
retf
jae
rcl
imul
xor
pop
xchg
ror
(bad)
call
loopne
fnsave
xchg
lock
sub
or
jge
pop
mov
jae
inc
imul
mov
add
mov
mov
sahf
in
(bad)
rcr
retf
jb
shl
lea
pop
xor
lods
push
enter
fbstp
imul
mov
or
pop
inc
movs
adc
sbb
retf
xchg
mul
imul
retf
mov
hlt
jmp
hlt
add
imul
mov
hlt
jmp
retf
jb
pop
in
xor
inc
cmp
aam
fimul
pop
mov
jae
call
pusha
ret
or
inc
test
aad
mov
xchg
lock
adc
lea
enter
cmc
xadd
je
xor
xor
icebp
pushf
xor
jne
fld
pop
xor
(bad)
ret
retf
jb
xchg
fbstp
pop
xor
or
jge
pop
mov
jae
(bad)
mov
dec
add
retf
jae
pop
inc
xchg
bound
pop
push
stc
push
xor
lea
fdivr
loopne
retf
bswap
sbb
or
pop
mov
dec
jmp
jae
cld
adc
lea
jb
xchg
mov
or
pop
lea
jb
shl
jae
call
retf
pop
mov
retf
jb
pop
in
xor
inc
inc
test
add
inc
pop
inc
stc
push
xor
jge
fdiv
xor
int3
pop
mov
cld
sub
cmp
lea
jb
sahf
cmc
xadd
je
xor
xor
icebp
pushf
or
je
xor
push
cmp
mov
jae
call
xor
or
(bad)
js
imul
mov
dec
adc
leave
xchg
cld
jae
xchg
or
dec
jmp
cmp
call
mov
jnp
sahf
mov
hlt
jmp
enter
test
test
add
or
xor
pop
pushf
inc
test
sahf
int3
(bad)
lock
repz
xor
or
xor
mov
out
dec
add
or
jmp
jae
dec
pop
or
mov
out
xor
pop
mov
xor
call
enter
fs
out
mov
call
xor
not
mov
cmp
cmp
cmp
test
fs
mov
sub
cmp
dec
adc
or
pop
mov
jae
call
pusha
aad
into
or
retf
fsub
lods
scas
mov
xchg
lock
imul
mov
not
mov
pop
inc
jne
shl
cmp
jmp
or
fild
aad
cdq
hlt
xlat
jbe
sbb
xor
pop
mov
jae
lahf
xor
pop
mov
mov
mov
imul
mov
sbb
jae
adc
dec
dec
pop
retf
mov
xlat
jbe
cmp
je
add
int3
mov
or
dec
push
retf
fld
inc
(bad)
fild
pop
cmps
ror
pop
retf
mov
mov
loopne
add
pusha
pop
cmp
or
pop
mov
or
aaa
mov
(bad)
jmp
or
mov
lods
or
pop
cs
push
xor
loopne
mov
jo
xor
dec
dec
pop
xor
sub
pop
mov
push
pop
xor
out
sahf
jno
adc
pop
int3
or
mov
pop
pop
mov
retf
fxtract
inc
fcom
pop
xor
idiv
cmp
adc
add
sub
mov
jmp
into
or
jae
pop
mov
or
and
or
mov
leave
clc
sahf
repnz
push
dec
outs
inc
retf
inc
mov
fistp
mov
leave
sbb
fucomip
push
xor
jmp
jno
adc
jbe
bound
pop
mov
pop
mov
pop
mov
pop
hlt
jae
pop
fmul
out
push
cmp
mov
stc
clc
call
leave
lock
popa
pushf
test
xor
bound
fcomp
pop
xor
into
xchg
push
jo
sahf
in
mov
or
inc
je
call
mov
sbb
push
xor
retf
imul
or
cmp
leave
add
cmc
xadd
je
xor
xor
icebp
sahf
imul
add
into
or
jno
adc
retf
shl
or
xor
iret
push
aam
or
xor
pop
pushf
jno
mov
xor
call
xchg
mov
mov
pop
mov
fdiv
bound
fs
icebp
retf
jae
shl
rcl
in
add
into
adc
and
shl
mov
push
in
add
retf
call
int3
(bad)
dec
jmp
leave
call
xor
or
test
dec
out
aaa
leave
hlt
push
(bad)
fsub
leave
lods
mov
xchg
lock
jno
or
pop
dec
out
aaa
leave
hlt
shl
mov
iret
sbb
leave
lock
jo
adc
xchg
push
enter
es
dec
sbb
cmp
mov
cwde
sbb
dec
pushf
jp
mov
dec
not
cmp
cmp
loop
retf
jae
adc
mov
(bad)
enter
xor
jl
and
fdivr
pop
xor
inc
mov
xlat
rcl
add
mov
ds
aas
xchg
repz
pop
xor
or
sahf
int3
mov
dec
jmp
in
pop
cmp
call
mov
mov
pop
retf
stc
sbb
xor
pushf
mul
fs
xor
mul
fs
xor
dec
inc
mov
loopne
add
push
fdivp
fld
inc
mov
add
add
dec
jecxz
dec
not
mov
je
out
mov
fsub
xor
or
jae
sbb
stc
add
sub
stc
sbb
inc
xchg
test
fsub
retf
stc
sbb
inc
jo
sbb
icebp
or
ret
imul
inc
jo
cmc
mov
je
sbb
out
sahf
jno
adc
mov
lea
pop
ficomp
pop
rcl
cmp
out
sahf
jno
adc
xor
into
sahf
int3
movs
lock
repz
call
popf
pop
xor
or
jge
pop
mov
or
call
or
pop
xor
mov
int3
(bad)
lock
repz
fs
xor
push
ja
xor
pop
xchg
mov
or
mov
ins
xor
bound
or
pop
xor
into
scas
aad
or
ret
imul
cmp
dec
out
(bad)
add
jl
bound
jne
inc
stc
dec
shl
or
cmp
or
push
into
xchg
jno
or
inc
addr16
icebp
(bad)
or
pop
lea
push
xor
or
mov
pop
bound
xor
pusha
push
xor
or
in
adc
popa
sbb
pop
retf
mov
shl
or
xor
add
push
aam
not
xor
jl
mov
push
xor
sbb
pop
dec
call
leave
call
pop
cmp
ret
mov
retf
or
or
xor
pushf
xlat
mov
or
pop
ror
pop
mov
(bad)
push
mov
pcmpeqw
xor
dec
jge
(bad)
and
add
iret
sahf
inc
pop
bound
bound
xor
adc
fild
sbb
mov
fist
mov
(bad)
jecxz
fist
jg
xor
sub
jno
or
cmp
or
jl
pop
xor
into
xchg
jno
or
inc
addr16
ror
pop
pop
add
fstp
or
mov
clc
push
cmp
cs
xor
mov
stc
pop
xchg
sub
retf
test
add
cmp
push
push
xor
sub
pop
mov
pop
xor
lea
bound
xor
test
fcomp
inc
pop
or
mov
stc
fdivr
pop
pop
or
mov
rcl
inc
cwde
mov
pop
xchg
mov
call
cld
call
jne
bound
retf
stc
fcomp
fadd
repz
ins
and
fisub
push
lock
xor
pop
call
pusha
add
or
add
mov
or
mov
lock
jae
rcr
loopne
mov
dec
bound
fs
call
cmps
mov
call
mov
out
jg
mov
pop
bound
xor
add
inc
popf
bound
pop
lea
xor
or
inc
xor
ins
cmps
mov
sahf
int3
mov
or
in
pop
xor
pop
call
or
pop
mov
mov
stc
sbb
add
xor
out
xor
mov
sub
or
imul
fdivp
pushf
or
add
or
or
xor
enter
dec
out
mov
(bad)
jg
jge
pop
pop
lea
pop
mov
(bad)
in
retf
jae
loopne
mov
pop
pop
enter
in
out
mov
(bad)
jg
mov
xchg
fcomp
call
hlt
into
or
jge
pop
pop
js
push
xor
adc
jbe
pusha
push
xor
mov
mov
call
xor
pusha
push
(bad)
jg
jl
pop
pop
xchg
stc
push
xor
or
xor
loopne
iret
jae
xchg
lock
push
aam
add
loope
cmps
in
push
rol
loopne
retf
jae
sahf
int3
mov
fidivr
je
bound
xor
pop
xor
cmp
jmp
inc
retf
inc
mov
fistp
mov
leave
sbb
out
ins
dec
mov
dec
not
xor
pop
pop
mov
push
into
fsub
popa
cmps
mov
xchg
lock
retf
mov
jbe
into
push
ret
shl
lock
cmp
dec
sbb
jnp
push
int3
mov
pop
repnz
icebp
push
cmp
jge
mov
or
xor
leave
jmp
imul
call
jno
mov
or
or
jbe
bound
pop
xchg
push
cmp
js
fsub
xor
dec
jae
or
hlt
rcl
std
dec
pop
sahf
shl
adc
mov
mov
(bad)
fild
pop
(bad)
movs
or
pop
or
or
xor
or
movs
push
or
ins
shrd
retf
pop
mov
je
xor
mov
je
sbb
jae
jmp
jae
sahf
mov
or
retf
jae
stos
enter
je
sbb
jae
jmp
jae
sahf
sbb
call
xor
pop
mov
dec
mov
xor
mov
enter
inc
lahf
add
or
jmp
jae
stos
mov
(bad)
jecxz
jae
push
inc
lahf
add
or
jmp
jae
mov
retf
shrd
leave
jae
pop
mov
or
jmp
jae
aam
xor
jmp
popf
out
leave
jae
call
retf
add
imul
mov
lock
popf
out
leave
jae
call
retf
add
imul
retf
mov
jbe
or
mov
loopne
retf
jae
shl
call
sti
jge
mov
call
test
add
inc
mov
jae
jge
fs
xor
test
fs
cmc
mov
or
je
call
stc
push
or
cmp
mov
pop
pop
mov
retf
mov
call
pop
inc
pop
or
mov
jae
out
retf
stc
sbb
dec
adc
or
or
hlt
gs
xor
not
xor
pop
mov
clc
jmp
jae
bound
(bad)
mov
mov
sahf
in
mov
enter
or
mov
jae
xchg
xor
jmp
xor
pop
pop
mov
mov
hlt
jmp
fld
or
mov
mul
fneni(8087
jno
mov
scas
fsub
adc
fnsave
(bad)
jmp
jae
inc
arpl
xor
add
cmp
mov
or
imul
data16
sbb
hlt
or
in
call
fnsave
call
mov
jl
call
inc
nop
pop
push
scas
dec
pop
xor
jmp
mov
hlt
jmp
hlt
fcom
xor
mov
xor
adc
xor
loopne
mov
fimul
pop
xor
enter
or
retf
mov
jbe
adc
or
pop
mov
dec
bound
retf
cmp
jmp
jae
xchg
fnsave
call
mov
jae
pop
arpl
xor
mov
(bad)
mov
pop
add
or
jmp
jae
inc
(bad)
adc
adc
adc
into
or
ret
outs
adc
ins
add
dec
cld
or
or
retf
fcomp
sub
jl
arpl
xor
or
add
gs
retf
jae
xlat
fild
adc
outs
inc
retf
inc
mov
ficomp
inc
test
xchg
fucomi
jo
xor
or
xchg
dec
int3
or
push
or
sbb
sbb
out
jg
jl
pop
retf
cli
or
gs
bound
pop
test
(bad)
into
or
inc
mov
sub
jmp
les
jl
xor
adc
mov
lock
jae
adc
into
or
jno
or
pop
xor
dec
sbb
or
jno
or
ret
imul
xor
pop
call
or
mov
add
jb
adc
dec
pusha
mov
out
call
loopne
mov
jmp
enter
retf
inc
mov
sbb
je
out
mov
dec
dec
pop
cmp
dec
sbb
pop
fadd
int3
pop
add
mov
jbe
sub
imul
inc
mov
fild
inc
push
xchg
pop
retf
mov
jbe
mov
(bad)
jge
mov
fsub
in
mov
sahf
jno
not
xor
pop
cmp
mov
jbe
sub
pop
lea
dec
jae
call
repz
pop
xor
enter
adc
dec
sbb
retf
add
mov
vmovd
push
out
mov
push
cmp
inc
push
cmp
rcl
test
fnstsw
cmp
(bad)
(bad)
pushf
add
mov
xchg
or
xor
or
sbb
fidivr
sbb
cmp
(bad)
shl
out
xlat
imul
fdivp
fld
inc
mov
call
(bad)
push
xor
not
xor
pop
bound
retf
jae
jge
out
jge
fs
nop
xor
adc
xor
or
sub
inc
fsub
jno
adc
push
dec
add
or
xor
iret
add
and
clc
adc
jae
xchg
xor
or
in
or
cmp
mov
jbe
sub
enter
xor
jae
xchg
lock
rol
jae
adc
into
or
xor
or
cli
cmc
call
add
inc
retf
inc
mov
lea
pop
ficomp
inc
test
xchg
ret
outs
xor
xor
(bad)
in
jae
pop
mov
or
jmp
retf
mov
jbe
mov
xor
iret
imul
imul
retf
int3
jnp
mov
jae
xchg
enter
mov
adc
call
shl
xor
jmp
mov
imul
retf
fsub
pop
mov
call
push
or
pop
retf
mov
jbe
mov
and
or
mov
jae
call
mov
or
hlt
clc
adc
out
call
mul
sub
fnstsw
not
xor
pop
mov
dec
iret
push
or
or
xor
dec
sub
cmp
cld
cmp
sbb
push
mov
jae
shr
push
fdivp
fld
pop
xor
fist
arpl
push
pop
repz
lock
jg
xchg
jno
int
xor
mov
jge
retf
mov
jbe
pop
jmp
jb
call
inc
pop
dec
out
mov
f2xm1
inc
fdiv
imul
retf
bswap
pop
mov
dec
dec
push
xor
fnstsw
mov
mov
add
or
dec
retf
mov
aam
dec
imul
test
call
mov
out
retf
fdiv
xor
xor
cmp
je
inc
push
xor
test
add
scas
xor
adc
dec
dec
pop
mov
pop
xor
ins
out
mov
je
push
imul
addr16
aad
fisttp
fdivr
retf
into
mov
ds
xor
loopne
retf
xchg
lock
adc
dec
int
arpl
btr
inc
sahf
bound
addr16
jmp
jae
sar
or
retf
mov
jbe
adc
retf
add
dec
sub
dec
xor
adc
cmp
loopne
enter
lock
xlat
frstor
or
xor
dec
out
mov
f2xm1
sbb
mov
push
or
or
lods
jmp
pop
push
mov
dec
adc
test
mov
jno
mov
mov
cld
cmp
or
jno
or
xor
jecxz
addr16
retf
jae
pushf
dec
jo
aad
fcom
push
retf
leave
hlt
pushf
jno
xor
lock
shl
dec
pop
mov
lock
or
cmc
call
addr16
pop
push
imul
mov
add
retf
mov
jbe
mov
jl
mov
xor
je
or
mov
mov
dec
std
dec
pop
sahf
rcr
pop
inc
mov
into
mov
mov
sbb
xor
not
xor
pop
mov
or
jae
inc
or
mov
dec
mov
mov
cli
or
imul
add
inc
test
popa
cmp
inc
xchg
xor
mov
mov
cli
add
jne
or
mov
dec
mov
xor
add
or
xor
das
xchg
xor
not
xor
pop
mov
or
add
out
pop
xor
out
sahf
jno
adc
popa
add
pop
inc
mov
cwde
or
dec
pop
call
jbe
call
cmc
into
or
repnz
mov
mov
leave
push
or
mov
or
pop
xor
dec
outs
mov
mov
ror
mov
jbe
bound
mov
mov
inc
retf
sti
add
movs
push
or
cmp
cmp
fs
outs
pop
rcr
dec
jns
call
hlt
int3
loope
xor
or
repnz
call
mov
or
hlt
clc
cmp
xor
clc
les
je
retf
sti
jo
push
jae
xchg
lock
mov
inc
mov
loopne
add
cmp
je
ja
fisub
bound
xor
or
sbb
sti
jo
outs
fneni(8087
pop
shl
lock
iret
push
enter
xor
dec
jmp
add
or
fs
pop
fsub
xor
dec
sbb
add
into
call
xor
mov
pop
fs
xchg
xor
adc
retf
cmp
dec
arpl
retf
jae
shl
clc
loopne
add
push
dec
outs
inc
retf
inc
mov
fistp
mov
inc
add
iret
scas
in
xchg
or
ret
imul
inc
test
cmp
call
je
or
xchg
repz
pop
xor
loopne
into
jae
xchg
lock
xchg
dec
int3
or
pop
jo
or
jno
or
aas
(bad)
iret
into
jae
dec
mov
call
mov
jae
cli
pop
mov
pop
inc
clc
push
xor
jle
fdivr
pop
xor
loopne
iret
jae
dec
mov
stc
xor
push
xor
lock
int3
add
icebp
call
inc
stos
mul
jae
xchg
xor
or
sub
int3
sbb
cli
or
int
or
mov
dec
pop
xor
out
sahf
jno
adc
sbb
loopne
leave
jae
dec
cmp
cli
or
inc
sbb
js
call
inc
mov
shl
lock
repz
xor
jae
dec
add
dec
mov
dec
outs
inc
retf
fld
inc
(bad)
(bad)
sahf
int3
movs
lock
repz
adc
into
or
mov
pop
lea
fmul
scas
jbe
outs
shl
or
mov
dec
bound
fadd
pop
xor
dec
out
cmp
inc
fmul
mov
xor
retf
(bad)
jge
add
fs
adc
or
pop
mov
and
xor
pop
fmul
mov
xor
enter
or
adc
mov
mov
or
xor
or
sahf
int3
jnp
sahf
jno
adc
jbe
or
repz
sub
mov
mov
mov
xchg
or
or
jmp
retf
push
xor
je
mov
cld
mov
cmp
sub
pop
(bad)
pop
xor
lock
int3
add
sbb
xor
test
fadd
mov
nop
mov
pop
mov
int3
or
mov
loopne
dec
mov
sahf
repnz
or
mov
jbe
pop
mov
nop
mov
pop
mov
int3
or
or
jle
sub
pop
xor
or
add
cmp
dec
jmp
xor
test
xor
pop
mov
int3
or
jb
push
xor
or
fs
aam
je
out
mov
or
imul
retf
rcl
std
dec
or
popa
add
pop
inc
mov
leave
add
mov
addr16
xor
out
sahf
jno
adc
jbe
mov
or
or
push
pop
dec
pop
push
das
movs
xlat
jbe
into
adc
or
sub
pop
pop
mov
push
xor
outs
xchg
xor
mov
cmp
adc
into
or
xor
dec
jmp
out
jge
in
push
je
bound
pop
mov
xor
add
iret
inc
fsub
or
sahf
int3
movs
lock
repz
(bad)
in
or
pop
ins
or
pop
cmc
into
or
inc
not
xor
pop
mov
leave
cld
sahf
repz
imul
aam
add
pop
inc
mov
mov
or
mov
dec
dec
pop
mov
cli
dec
pop
xor
stc
je
mov
xchg
adc
xchg
mov
pop
xor
sub
pop
xrelease
jne
or
xor
mov
pop
mov
loopne
add
iret
adc
or
xor
popf
xor
or
xor
sbb
mov
pop
xor
pop
cwde
dec
mov
pop
retf
test
aaa
cmc
into
or
xor
loope
mov
call
xor
enter
pop
xor
mov
xor
adc
int
(bad)
jl
or
mov
pushf
cwde
jne
dec
loope
mov
xchg
or
or
ret
xchg
jne
or
sub
or
nop
adc
fisttp
dec
pop
mov
inc
gs
loope
mov
call
xor
push
adc
mov
mov
xor
or
mov
xchg
sub
mov
mov
sub
xchg
jne
stos
sti
dec
int
inc
jae
call
jne
or
xor
or
mov
dec
mov
mov
gs
retf
jae
adc
clc
mov
gs
add
sbb
xchg
and
push
xor
out
jmp
mov
clc
mov
les
sbb
sbb
xor
or
xor
mov
retf
jae
adc
clc
mov
gs
xor
sbb
mov
pushf
cwde
jne
or
xor
xor
or
xor
stc
and
mov
mov
nop
adc
mov
stos
inc
xor
mov
mov
add
xor
test
push
xor
xchg
push
xor
fnstcw
mov
idiv
or
cmp
or
xor
jo
jne
mov
lea
(bad)
loopne
or
xchg
push
mov
lea
(bad)
lock
pop
xchg
hlt
adc
or
inc
mov
nop
adc
ss
pop
xor
mov
mov
mov
movs
mov
pop
add
mov
xchg
cmp
xchg
lods
mov
(bad)
or
mov
cs
mov
xor
enter
lock
mov
xor
mov
pop
xor
je
or
pop
xor
dec
call
jbe
mov
mov
addr16
push
xor
cmp
pop
xor
mov
aas
retf
mov
bound
(bad)
mov
add
je
add
push
xor
mov
or
or
retf
mov
mov
or
retf
xchg
dec
test
xor
sar
add
int3
mov
mov
lahf
jno
pop
mov
xor
call
sbb
mov
pop
cmp
adc
ret
int3
jge
retf
mov
push
mov
pop
cmp
dec
loopne
or
pop
xor
add
xor
mov
pop
ss
sbb
bound
jne
xor
inc
xchg
xor
xor
jecxz
mov
(bad)
adc
mov
mov
add
leave
sahf
(bad)
retf
xchg
clc
adc
mov
pop
mov
setg
mov
mov
mov
call
inc
mov
pop
xor
or
mov
bsr
and
xor
or
jne
not
fdiv
dec
pop
xchg
ins
jne
xor
or
gs
add
dec
jecxz
dec
mov
fdiv
dec
pop
xor
adc
fdiv
dec
pop
mov
pushf
mov
xor
or
mov
adc
or
mov
retf
mov
sbb
int
es
int3
jecxz
mov
dec
push
dec
std
dec
pop
sahf
rcr
pop
inc
mov
cs
dec
or
or
xor
enter
xchg
shl
loopne
dec
mov
sahf
repnz
shl
pop
dec
or
xchg
xor
and
dec
pop
bound
xor
stos
xchg
dec
dec
pop
bound
xor
stos
xchg
mov
dec
dec
pop
bound
xor
stos
mov
int
sahf
int3
jnp
sahf
jno
adc
xor
loopne
dec
mov
mov
sub
pop
imul
aam
add
or
xor
pop
inc
pop
loopne
add
not
mov
cwde
iret
push
xor
dec
mov
xchg
into
or
jno
adc
xor
or
mov
pusha
or
les
jecxz
mov
pop
mov
imul
jno
adc
mov
hlt
pop
retf
mov
in
or
mov
fcom
repz
rcl
xor
or
jno
or
xor
mov
push
iret
or
mov
mov
xor
or
jno
or
xor
or
mov
cmp
pop
xor
mov
mov
push
mov
xor
pop
xor
sti
mov
leave
loopne
pop
mov
adc
dec
repz
xchg
mov
cli
or
ret
outs
adc
adc
xor
dec
mov
out
jge
out
jge
jae
repz
jbe
xor
dec
mov
jae
mov
leave
mov
lea
or
xor
enter
or
inc
sub
pop
pop
mov
pop
mov
(bad)
shl
xor
mov
inc
int
pop
retf
stc
in
jmp
test
retf
mov
(bad)
mul
add
fs
xchg
mov
push
js
xor
jmp
jno
adc
neg
xor
jno
mov
push
lods
mov
fwait
ss
xor
dec
sbb
pushf
sbb
mov
adc
out
call
pop
call
mov
jae
bound
sbb
pushf
jno
jecxz
mov
push
ins
repz
jo
aam
add
add
int3
add
enter
jge
pop
jae
add
cmp
dec
neg
xor
(bad)
fild
sbb
mov
cmp
or
or
pop
xor
cmp
or
push
or
pop
xor
and
or
adc
xor
adc
or
adc
jae
pop
xor
sbb
or
adc
jae
pop
xor
mov
jno
test
mov
das
repnz
not
cmp
dec
call
mov
cmp
or
mov
pop
mov
cwde
push
test
sahf
into
psrad
or
jbe
std
aaa
cmp
pop
add
pop
mov
xor
or
cmp
mov
into
or
int3
jno
xor
mov
add
into
or
fs
outs
xor
adc
fstp
call
loop
sbb
pavgb
mov
pushf
test
mov
out
mov
or
popa
js
add
lea
pop
xor
sub
or
jl
cwde
mov
xor
rcl
jl
mov
not
fnstsw
or
xchg
or
lock
mov
push
adc
sub
or
lock
fmul
jge
mov
cmp
es
pop
xor
jl
mov
or
adc
stc
push
sahf
in
(bad)
dec
pop
mov
data16
hlt
mov
pop
xor
xor
ss
ins
sahf
int3
les
dec
mov
or
adc
stc
pop
sahf
int3
pavgb
mov
adc
mov
or
or
pop
inc
mov
bound
xadd
mov
lahf
or
adc
fs
jno
adc
dec
adc
(bad)
lock
fmul
sbb
xor
mov
push
inc
fiadd
adc
pavgb
inc
mov
out
mov
or
pop
add
pop
mov
inc
xor
xor
jge
fsubr
jg
xor
pop
pop
mov
jbe
std
xor
or
jae
not
xor
call
std
dec
pop
sahf
ror
in
ficomp
xor
enter
jge
fist
mov
or
push
mov
popa
lds
or
adc
loopne
xor
xor
inc
push
loope
xor
or
dec
dec
pop
cmp
pop
pop
cmc
outs
or
mov
int3
mov
fs
loope
jae
call
xor
mov
pop
xor
jl
or
pop
xor
sub
add
add
add
adc
leave
hlt
mov
cli
dec
pop
or
addr16
popf
xor
dec
or
je
in
push
and
mov
pop
adc
pop
pop
jecxz
pushf
or
xor
dec
pop
mov
or
call
sbb
push
or
mov
or
jno
into
adc
test
lea
call
xor
shr
je
inc
sub
or
jno
into
adc
add
or
fiadd
mov
ss
add
inc
dec
pop
fdivr
hlt
call
imul
fdivp
fld
pop
xor
xor
mov
arpl
retf
jae
xchg
xlat
push
imul
xor
mov
pop
xor
mov
(bad)
hlt
jmp
not
repnz
clc
retf
jae
call
xor
mov
jmp
not
inc
popf
pop
mov
retf
or
adc
inc
dec
pop
xor
outs
xlat
call
cmp
(bad)
in
jae
xchg
or
or
addr16
sbb
jae
sbb
call
pop
jmp
sbb
adc
cmp
pop
inc
push
call
pop
(bad)
(bad)
mov
call
mov
or
stc
stc
or
mov
jae
adc
jl
push
xor
(bad)
in
jae
push
cmp
(bad)
in
jae
jl
xchg
mov
xor
rcl
pop
xchg
jns
imul
repnz
clc
retf
jae
sbb
jae
cmc
ss
add
icebp
dec
pop
xor
mov
sbb
clc
retf
jae
cmc
ss
sbb
aam
dec
pop
mov
jae
adc
xor
enter
sbb
fs
retf
jae
xchg
in
push
imul
retf
mov
loopne
imul
mov
dec
jmp
mov
int3
or
retf
mov
or
xor
pop
call
dec
mov
xor
cmp
push
mov
or
xor
xor
inc
pop
test
fs
bound
not
mov
sub
clc
retf
jae
(bad)
mov
jae
pop
xor
mov
call
retf
fs
in
retf
jae
sar
add
jl
mov
mov
retf
jae
pushf
test
addr16
es
add
leave
cmc
ss
pop
jmp
mov
xor
retf
stc
add
jae
adc
jp
mov
not
mov
mov
mov
sahf
mov
(bad)
call
test
popa
xor
fcomp
mov
xor
or
mov
jae
call
mov
out
retf
or
xor
enter
mov
call
int3
or
xor
mov
call
and
add
retf
jae
pushf
mov
dec
jmp
dec
jmp
pushf
cmp
xlat
call
(bad)
(bad)
(bad)
mov
(bad)
aad
or
(bad)
ret
mov
xchg
shl
mov
cld
clc
retf
jae
adc
jp
retf
mov
xlat
push
imul
xor
push
jg
inc
dec
pop
fcomp
pop
xor
lea
test
pop
mov
jae
aad
(bad)
adc
call
jmp
call
aaa
mov
call
retf
jae
and
adc
retf
jae
xchg
loopne
imul
mov
jae
or
jae
call
retf
fs
xchg
loopne
imul
or
jae
push
mov
jae
xchg
adc
xor
jae
stos
xlat
push
imul
xor
retf
jg
mov
aaa
pop
mov
call
mov
jae
std
cmp
pusha
sbb
xlat
call
xor
enter
mov
call
mov
cmps
test
jmp
neg
jne
pop
mov
retf
dec
jmp
int
sahf
mov
in
pop
xor
pop
inc
or
xlat
cmp
push
push
mov
xchg
push
lea
pop
mov
jae
mov
xor
jl
mov
add
cmp
xor
xor
loope
xor
js
call
xor
neg
mov
xlat
call
jmp
enter
pushf
sub
pop
mov
or
add
mov
xor
push
sahf
les
loopne
mov
or
add
mov
xor
add
mov
or
ret
retf
mov
mov
dec
jmp
jae
xchg
mov
(bad)
call
xor
jge
mov
mov
xchg
fdiv
push
add
adc
fild
imul
xor
fwait
add
mov
repz
mul
or
mov
jae
push
cmp
popf
mov
jae
(bad)
(bad)
mov
call
mov
xor
pop
inc
movs
mov
or
jge
mov
xor
pop
inc
cwde
mov
or
jge
mov
xor
pop
inc
(bad)
dec
cld
cld
cmp
cmp
icebp
add
inc
nop
pop
mov
retf
fdiv
mov
retf
cmp
enter
pusha
int
not
push
imul
xor
dec
xchg
xchg
js
call
shl
cmc
outs
or
cmc
ins
or
jo
xchg
and
retf
add
cld
clc
retf
jae
stos
shl
xor
or
inc
pop
not
mov
mov
(bad)
in
jae
push
cmp
(bad)
in
jae
jl
xchg
mov
xor
rcl
pop
xchg
sbb
call
neg
xor
jno
outs
sahf
jno
mov
cmp
fistp
xor
or
sbb
cwde
mul
xor
jp
mov
push
cmp
enter
or
pop
retf
mov
jno
arpl
and
xor
and
dec
pop
xor
leave
add
mov
xor
sub
int3
add
pop
sahf
rcr
pop
inc
mov
leave
add
mov
out
sahf
jno
adc
jbe
pop
mov
and
adc
cli
dec
pop
fdivr
gs
xor
dec
jmp
mov
jno
arpl
and
xor
and
dec
pop
xor
sbb
or
jl
cwde
iret
adc
cwde
jle
xor
or
xor
pop
sbb
cwde
mov
xor
sub
imul
mov
fild
push
cmp
pop
adc
stos
sub
int3
add
enter
xor
pop
inc
mov
cld
inc
add
iret
jno
leave
add
pusha
lea
dec
or
pop
mov
dec
pusha
(bad)
xor
popa
jne
loopne
inc
mov
xchg
lock
pop
mov
popa
int3
or
out
dec
xchg
mov
xor
test
mov
lock
out
inc
dec
pop
ins
or
xlat
xchg
into
or
inc
outs
not
mov
cmp
dec
std
dec
pop
sahf
ror
in
(bad)
(bad)
xchg
bnd
sub
xor
or
es
mov
xor
mov
xor
or
rol
or
pop
inc
xchg
push
xor
jl
retf
mov
ret
push
push
int3
add
or
ret
imul
and
dec
pop
fcom
sbb
xor
push
mov
mov
jne
loopne
pop
mov
scas
and
push
fmul
sub
and
dec
pop
xor
clc
les
or
ret
imul
and
dec
pop
xor
mov
push
or
in
or
pop
mov
inc
int
call
or
mov
add
ret
pop
xor
cmp
call
test
or
xor
or
add
js
mov
and
dec
pop
fsubr
or
dec
push
retf
inc
mov
fistp
mov
ins
retf
lock
int3
add
jle
xor
or
jge
out
jge
fistp
stos
adc
into
or
repz
or
call
or
mov
bound
ror
mov
pop
pop
pushf
test
fdiv
and
inc
dec
pop
fadd
pop
xor
mul
xor
pop
(bad)
arpl
xor
dec
repz
mov
mov
mov
scas
(bad)
or
ret
imul
push
jb
call
xor
or
push
repz
loopne
xor
or
xor
or
call
pop
call
xor
xchg
jge
mov
arpl
jmp
adc
enter
or
pop
inc
xchg
push
xor
jl
mov
ins
inc
xor
outs
call
jno
mov
push
lock
xor
enter
mov
call
imul
sub
call
cmp
mov
int
scas
out
or
ret
imul
mov
pop
arpl
and
adc
xor
or
call
mov
add
int
inc
pop
push
push
push
xor
or
cmp
pop
jmp
mov
out
dec
mov
dec
push
rcl
add
pop
inc
arpl
jge
mov
js
or
or
xor
enter
push
call
scas
fsub
dec
inc
mov
xchg
lock
rol
into
push
pushf
mov
adc
rcl
or
test
fsubp
sbb
int3
movs
lock
repz
jg
jle
pop
mov
call
int3
sbb
mov
bound
xor
call
xor
xchg
or
out
jg
jl
pop
mov
mov
call
or
ja
popa
cmp
shr
ror
pop
xor
lock
add
dec
jno
leave
not
xor
sbb
call
add
add
adc
dec
jmp
mov
push
imul
iret
mov
xor
mov
aad
imul
mov
add
imul
add
leave
not
xor
sbb
call
add
add
adc
dec
jmp
mov
push
imul
lock
add
stos
in
mov
test
dec
add
imul
add
or
adc
stc
or
retf
shl
xor
enter
or
jge
pop
bound
retf
jae
sar
add
nop
sbb
jae
pop
inc
mov
xchg
cld
jae
pushf
xor
or
xor
mov
adc
mov
call
cmp
dec
(bad)
mov
fs
jns
mov
jno
sub
mov
sbb
arpl
out
call
loopne
pop
mov
xchg
lock
jno
into
adc
mov
ror
mov
sub
or
mov
je
sar
jb
call
int3
movs
lock
repz
xor
or
mov
outs
inc
retf
inc
mov
mov
call
in
pop
ficomp
sub
hlt
mov
jae
aam
mov
add
dec
(bad)
in
jno
pop
xor
shl
xlat
add
neg
iret
ja
call
add
xor
sti
mov
dec
(bad)
loope
jb
pop
xor
(bad)
ror
jo
inc
xor
or
test
not
mov
pushf
not
mov
imul
retf
lea
pop
xor
sub
mov
hlt
mov
jae
aam
or
call
dec
jmp
add
jg
xor
not
mov
mov
imul
pusha
call
mov
imul
retf
fadd
call
or
mov
jae
aad
mov
sahf
mov
repz
retf
(bad)
out
retf
jb
pop
inc
xchg
adc
mov
ror
jae
dec
pop
mov
test
sahf
in
movs
rcr
retf
jb
call
xor
adc
leave
das
pop
xor
push
sub
or
inc
mov
bound
pop
dec
pop
cmp
dec
sbb
out
retf
jae
jge
fs
jg
mov
adc
leave
add
xlat
imul
retf
pshufw
clc
push
call
shr
or
push
xor
icebp
sahf
mov
imul
retf
xor
sub
mov
jae
xchg
movs
ja
call
int3
jae
call
into
jae
call
loopne
pop
mov
xchg
lock
repnz
pop
fst
or
xor
mov
xor
mov
mov
xadd
je
xor
xor
icebp
sahf
mov
imul
retf
add
retf
call
retf
add
inc
mov
jae
dec
or
mov
add
mov
imul
retf
dec
mov
retf
jae
call
retf
cld
sub
retf
je
jmp
shl
mov
jo
jno
leave
neg
or
sbb
jae
(bad)
dec
pop
mov
test
or
cmp
(bad)
in
jno
cmp
je
jmp
mov
imul
retf
gs
adc
mov
adc
mov
pop
xor
jne
mov
add
neg
test
imul
retf
pop
dec
pop
cmp
dec
sbb
loopne
jae
jge
fs
jno
mov
aam
mov
call
xor
sub
dec
pop
cmp
(bad)
loope
jb
push
hlt
add
repz
not
xor
push
sbb
mov
call
xor
not
cmp
retf
jb
imul
sti
mov
repz
not
xor
push
sbb
mov
call
xor
jmp
retf
push
retf
add
imul
or
dec
dec
jmp
cmp
dec
jmp
retf
jb
sahf
cmc
(bad)
fstp
int
adc
jmp
retf
out
retf
jb
imul
mov
call
retf
xchg
int3
jae
call
mov
jae
aam
dec
(bad)
loope
jb
pop
xor
(bad)
out
retf
jb
shl
jae
jge
in
out
mov
call
retf
jae
sar
mov
call
mov
in
enter
xor
pop
xor
not
mov
or
call
or
call
cwde
jl
pop
mov
jae
call
cmp
call
retf
jae
pop
cmp
test
xor
pop
mov
retf
fsub
(bad)
into
or
retf
fsub
test
lock
pop
jmp
push
add
pop
mov
mov
add
pushf
sbb
jae
call
retf
jno
jno
leave
neg
or
sbb
jae
or
imul
or
cmp
adc
je
jmp
ret
call
retf
xor
das
xor
push
mov
jae
aam
or
call
or
call
jbe
into
xchg
(bad)
jae
call
mov
or
inc
xchg
mov
retf
test
imul
jb
push
mov
jae
xchg
fwait
ja
call
retf
jb
inc
pop
and
push
xor
(bad)
call
fdivr
retf
bswap
sbb
jb
out
adc
or
neg
retf
call
(bad)
mov
pop
cmp
(bad)
in
jb
push
fs
out
mov
call
retf
jae
sar
add
cld
call
cli
(bad)
cmp
sub
jae
pop
inc
add
jecxz
jb
sbb
jae
xchg
xor
jmp
jno
test
retf
xadd
je
xor
xor
icebp
sahf
repz
push
arpl
mov
retf
jae
call
(bad)
jae
call
retf
jo
inc
fsub
xor
int3
sbb
dec
pop
mov
retf
cmp
cmp
inc
jmp
and
outs
sahf
mov
imul
retf
cmp
wbinvd
lock
cmp
(bad)
jecxz
jb
shl
jae
xchg
mov
imul
retf
lea
loopne
add
neg
retf
jae
stos
fwait
ja
call
into
jae
jge
in
out
mov
call
retf
jae
sar
add
cld
call
mov
or
cmp
(bad)
jecxz
jb
sub
jae
pop
inc
add
mov
imul
retf
dec
mov
retf
jae
call
retf
jb
xchg
cld
jae
xchg
or
(bad)
out
retf
jb
call
xor
(bad)
out
retf
jb
push
add
inc
mov
jae
push
lea
(bad)
into
or
retf
fsub
sub
xchg
adc
mov
sahf
mov
repz
retf
add
imul
retf
jae
pop
inc
mov
mov
out
lods
or
fistp
add
add
adc
jae
call
cmp
dec
jmp
retf
cs
sar
in
out
mov
call
retf
jae
sar
add
neg
test
jl
pop
lea
(bad)
into
or
or
call
pop
call
dec
add
repz
adc
retf
jb
sahf
in
jnp
sahf
mov
repz
retf
add
mov
add
imul
mov
sbb
lahf
mov
jae
call
jno
add
mov
imul
or
jl
pop
mov
jae
push
imul
mov
add
repz
xor
push
mov
jae
aam
cmp
or
pop
xor
imul
idiv
in
in
mov
mov
xor
jmp
xchg
xchg
lock
mov
jae
in
mov
pop
fild
pop
mov
retf
add
pushf
sbb
jae
call
retf
jb
jno
leave
neg
or
pushf
mov
into
xor
dec
pop
test
mov
not
mov
pop
inc
jne
xchg
int3
jae
call
jbe
bound
mov
jae
call
loopne
push
mov
xchg
lock
mov
bnd
into
jae
aam
or
call
xor
mov
call
retf
jae
sar
mov
call
pop
lea
(bad)
into
or
retf
fsub
push
test
xchg
lock
xor
retf
mov
pop
psubb
add
inc
fsubr
int3
sbb
jae
pop
xor
add
mov
imul
retf
lea
pop
xor
mov
call
test
add
inc
retf
stc
add
sub
imul
mov
sbb
mov
imul
retf
(bad)
call
retf
xchg
mov
retf
jae
add
pop
xor
(bad)
call
retf
stc
add
int3
mov
pop
mov
add
(bad)
(bad)
xor
mov
retf
jo
jmp
xor
jae
jmp
cmp
ficom
xor
mov
cmp
dec
pop
cmp
dec
sbb
out
jae
jge
fs
ja
mov
aam
mov
fdiv
call
xor
or
add
inc
mov
jae
jmp
imul
mov
add
mov
imul
retf
add
lea
test
not
lea
(bad)
int
mov
adc
je
jmp
push
stc
xor
add
inc
retf
cmp
call
push
mov
xchg
lock
mov
not
mov
pop
inc
jne
shl
je
jmp
in
add
repz
xadd
je
xor
xor
icebp
call
mov
push
repnz
call
jbe
test
arpl
xor
mov
and
or
jge
out
jge
cmp
mov
adc
dec
outs
shl
mov
sbb
jae
dec
dec
outs
sahf
mov
jmp
pop
(bad)
dec
jo
sahf
mov
imul
retf
out
call
adc
js
fdivr
push
pop
xor
(bad)
out
retf
jb
xchg
mov
retf
mov
sbb
pop
xor
(bad)
call
retf
stc
add
push
mov
pop
mov
add
fistp
or
pushf
jno
pop
mov
cmp
dec
or
xor
fisttp
mov
xchg
mov
bnd
into
jae
aam
xor
call
ins
jae
xor
or
test
not
lea
(bad)
int
or
xor
in
iret
jae
pushf
dec
test
pusha
xor
xor
adc
into
jae
bound
ja
xor
xor
bound
out
(bad)
cmp
dec
or
call
inc
pop
mov
bound
in
je
bound
pop
mov
add
or
test
pop
xor
mov
retf
jo
pop
cmp
pop
loop
jae
adc
push
and
mov
ja
call
mov
or
inc
jne
pop
add
inc
mov
fs
dec
xor
adc
into
jae
sbb
dec
xor
sbb
out
dec
or
mov
or
xchg
or
or
jae
out
retf
jb
call
adc
js
fdivr
push
pop
xor
lea
xor
enter
lock
retf
jae
mov
mov
sub
stos
or
cmp
cmps
jecxz
jae
jae
mov
jecxz
imul
fdivp
fld
adc
adc
mov
arpl
cs
aad
aam
ret
retf
mov
add
sub
call
xchg
js
jmp
mov
call
push
mov
jno
or
call
repz
hlt
push
xor
or
dec
jmp
inc
mov
mov
mov
imul
retf
mov
adc
mov
mov
pop
mov
retf
mov
call
adc
js
fcomp
push
pop
xor
dec
jmp
jl
pop
xor
into
pushf
mov
imul
retf
test
arpl
mov
out
retf
jo
gs
pcmpeqw
retf
stc
adc
jno
pop
mov
push
imul
ins
pop
dec
pop
mov
sbb
pop
mov
mov
xor
enter
jne
xor
add
stc
and
sbb
popa
imul
ins
pop
dec
pop
mov
sbb
pop
mov
imul
or
ret
outs
adc
enter
mov
dec
xor
jl
mov
inc
xor
jl
mov
dec
xor
pop
xchg
je
imul
mov
int3
add
fsubr
call
les
call
jno
add
fcomp
call
xor
or
sub
or
mov
out
aas
xor
pop
mov
retf
test
sbb
mov
mov
retf
call
retf
ja
push
psllw
imul
shl
xlat
add
neg
cmp
mov
leave
jae
call
retf
jno
push
cmp
(bad)
jmp
jno
cs
es
adc
or
call
xor
gs
retf
add
add
jae
call
dec
ins
pop
mov
retf
(bad)
dec
jmp
leave
hlt
jno
or
call
mov
lea
xor
adc
mov
retf
call
hlt
into
or
mov
pop
lea
(bad)
into
or
retf
fsub
popf
lahf
jae
xchg
lock
xor
adc
pop
sub
push
xor
(bad)
jmp
fsub
mov
scas
hlt
les
pop
ret
outs
adc
pop
(bad)
clc
push
xor
(bad)
jmp
fmul
mov
bsr
in
enter
retf
jae
pop
inc
fdiv
bound
mov
call
mov
imul
retf
add
mov
retf
call
retf
jo
push
cmp
(bad)
jmp
jno
adc
jo
ror
pop
mov
retf
(bad)
dec
jmp
add
idiv
pushf
jno
call
xor
or
retf
stc
hlt
call
test
fs
xor
mul
add
inc
fmul
push
pop
xor
or
jge
in
out
mov
call
retf
jae
shr
imul
xor
jge
mov
or
call
pop
mov
(bad)
enter
retf
jno
inc
mov
test
jae
call
and
xor
xor
bound
out
push
ror
pop
ins
addr16
jno
pop
mov
xchg
call
cmp
lea
(bad)
into
or
retf
fsub
xor
add
xor
mov
retf
jae
pop
inc
cdq
loope
xor
or
retf
daa
dec
mov
dec
mov
dec
jo
cld
mov
or
sub
or
or
retf
enter
mov
cmc
call
in
mov
mov
leave
jae
call
xor
adc
(bad)
into
or
retf
fsub
mov
repz
or
in
out
mov
call
retf
jae
shr
add
not
xor
adc
pop
pop
jmp
jbe
(bad)
mov
or
mov
imul
retf
adc
imul
retf
pop
pop
jmp
sbb
call
mov
or
retf
jae
xor
or
and
(bad)
test
pop
dec
jmp
or
call
retf
stc
hlt
call
adc
cmp
popf
fisttp
pop
mov
jae
out
retf
stc
push
call
fimul
pop
or
add
fs
xor
push
cld
std
pop
dec
jmp
or
call
ins
mov
pushf
popa
test
xor
or
test
imul
mov
pop
xor
jmp
mov
imul
retf
add
rcl
add
and
dec
pop
push
add
ins
(bad)
push
mov
call
xor
mov
sbb
bound
in
clc
jbe
pop
dec
or
mov
add
repz
cmp
push
clc
jbe
pop
call
or
mov
add
je
xor
xor
icebp
jge
fcomp
imul
cmps
dec
mov
dec
push
push
aam
add
or
xor
pop
inc
mov
jae
or
or
xor
or
xor
adc
sahf
les
sahf
mov
cmc
call
fst
or
mov
jne
fld
in
xor
or
add
sub
retf
jae
out
jl
shl
leave
not
fbld
or
xor
lods
out
push
gs
repnz
jne
inc
mov
push
add
sub
jb
call
mov
cli
ret
shl
mov
ins
push
jp
push
inc
or
xor
call
retf
jae
and
mov
jb
call
jbe
pusha
retf
or
retf
fsub
dec
push
out
jge
out
jge
in
pop
xor
test
fs
dec
xor
adc
cmc
push
dec
pop
fs
mov
rcr
test
fs
or
pusha
es
or
cmp
dec
xor
mul
fmul
pop
xor
or
inc
pop
dec
out
xor
(bad)
call
fsubr
pop
xor
into
retf
or
retf
fsub
fcmove
or
retf
fsub
xor
mov
jo
or
retf
mov
fcmove
or
bound
mov
jae
jg
mov
xchg
fsubr
clc
les
out
xor
ins
stc
jbe
pusha
adc
cmp
or
mov
pop
dec
push
rcl
add
pop
inc
arpl
jge
mov
iret
sub
mov
call
xor
lock
int3
add
or
jno
pop
jge
in
pop
cmp
pop
retf
stc
add
inc
test
push
outs
mov
sahf
int3
(bad)
lock
repz
dec
xchg
or
dec
out
retf
stc
lock
pop
lea
retf
stc
sbb
inc
jo
pop
outs
mov
sahf
int3
jnp
sahf
jno
adc
iret
call
outs
mov
dec
push
rcl
add
pop
inc
mov
jmp
jnp
xor
out
sahf
jno
adc
xor
out
sahf
jno
adc
xor
bound
fdivr
pop
pop
xor
stc
xchg
cld
jae
xchg
or
iret
cld
cmp
sub
psrlw
or
fisttp
ja
imul
fdivp
fld
inc
mov
out
js
or
repz
jg
mov
pop
pop
mov
pop
mov
xor
enter
loopne
arpl
call
fbstp
rcr
bound
pop
mov
popa
fisttp
pop
pop
mov
bound
jge
bound
xor
pop
dec
(bad)
pop
add
add
dec
out
mov
dec
pop
sahf
ror
in
ficomp
jo
inc
pop
mov
dec
bound
pop
or
pop
xor
or
out
jg
mov
xchg
retf
stc
add
cmc
fimul
pop
mov
stc
adc
dec
or
xor
dec
sbb
dec
pop
ret
imul
hlt
addr16
jge
(bad)
inc
popa
mov
sahf
test
dec
push
or
mov
jnp
sahf
jno
adc
cmp
sahf
jno
jecxz
mov
jl
(bad)
(bad)
fcomip
(bad)
enter
bound
pop
xor
loopne
popa
mov
pushf
jno
jecxz
mov
dec
push
dec
outs
inc
retf
inc
mov
ficomp
cs
lahf
aaa
mov
dec
mov
mov
loopne
add
bound
pop
or
pop
xor
or
xor
or
mov
xlat
retf
stc
add
xor
or
mov
stc
or
hlt
addr16
jge
out
jge
(bad)
cmp
int3
mov
dec
sbb
int3
mov
xor
dec
bound
mov
jae
sbb
pop
mov
mov
mov
(bad)
into
or
clc
pop
pop
xor
loopne
pusha
mov
xchg
fstp
or
xor
push
dec
outs
inc
retf
inc
mov
fistp
(bad)
fst
push
mov
jno
leave
jmp
(bad)
push
ins
repz
jne
mov
mov
in
or
or
xor
iret
push
(bad)
xchg
or
mov
sahf
in
(bad)
rcr
retf
cmp
sub
not
fmul
adc
mov
not
inc
pop
adc
mov
jmp
pop
loope
pop
cmp
dec
jmp
lds
enter
loopne
dec
jb
bound
pcmpgtw
ss
retf
xchg
pop
jb
xchg
dec
jb
(bad)
in
dec
sbb
cmp
pushf
popa
test
mov
hlt
loope
pop
xor
mov
aad
leave
in
scas
mov
outs
adc
fs
add
loopne
add
in
pushf
jno
pop
mov
cmp
mov
sbb
dec
or
pop
dec
sbb
cmp
mov
fiadd
ds
dec
repz
leave
fcomp
fild
adc
xlat
rcl
add
pop
inc
arpl
push
pop
repz
lock
and
xor
into
push
retf
lea
sub
into
or
(bad)
sub
test
call
pop
pop
xor
sti
mov
icebp
(bad)
call
movhps
sti
mov
loope
inc
push
mov
xchg
por
ja
dec
call
mov
dec
push
add
lock
or
and
or
sbb
sub
xor
xchg
jno
or
ror
or
repnz
(bad)
pop
frstor
or
xor
or
sbb
sub
mov
or
xor
dec
call
xor
push
add
lock
mov
pop
dec
rol
mov
xor
or
leave
not
cmp
dec
push
mov
pslld
inc
xchg
xchg
int3
int3
jne
mov
not
mov
lock
or
loope
(bad)
enter
call
bound
or
call
xor
mov
bound
or
call
or
pop
xor
add
ja
xor
or
call
sub
(bad)
push
mov
(bad)
sbb
push
inc
call
ror
popa
jns
push
and
adc
mov
lea
repz
jne
xor
ins
out
mov
je
mov
xor
jge
mov
not
cmp
dec
call
imul
cwde
xchg
dec
pop
movs
aaa
fcom
je
cwde
scas
xor
enter
cwde
arpl
sbb
xchg
cwde
push
movs
sbb
xchg
cwde
push
movs
sbb
xchg
cwde
cs
sbb
xchg
cwde
scas
xor
dec
pop
movs
aaa
sbb
jbe
cwde
scas
cmp
enter
cwde
arpl
sbb
xchg
cwde
xchg
hlt
mov
xchg
cwde
xchg
cwde
jo
add
push
xchg
or
xor
push
xchg
jp
xor
and
xchg
sbb
pop
xor
xchg
sbb
add
sbb
xchg
sbb
fsub
cwde
xchg
cwde
xchg
sbb
fbld
cwde
xchg
hlt
call
in
dec
pop
xor
dec
pop
and
pop
cmp
cwde
xchg
dec
pop
movs
out
xchg
cwde
xchg
cwde
arpl
cwde
xchg
cwde
sahf
in
sbb
xchg
cwde
es
cwde
xchg
cwde
sahf
cld
sbb
xchg
cwde
xchg
cwde
xchg
popa
arpl
cwde
push
int3
sbb
xchg
cwde
scas
xor
dec
pop
movs
(bad)
pop
movs
sbb
arpl
cwde
xchg
cwde
sahf
in
sbb
xchg
cwde
es
cwde
xchg
cwde
sahf
cld
sbb
xchg
cwde
xchg
cwde
xchg
clc
movs
mov
cwde
push
int3
sbb
xchg
cwde
jbe
sbb
xchg
not
neg
xor
(bad)
fild
push
cmp
retf
adc
xchg
aam
outs
adc
jmp
(bad)
mov
pop
mov
fsub
cmp
jae
dec
mov
add
dec
sti
mov
mov
repnz
not
fbld
or
dec
mov
test
mov
pop
cmp
pop
call
lods
jnp
sahf
cmc
pop
dec
jmp
add
jmp
xor
xor
inc
popf
adc
clc
push
cmp
sbb
add
inc
pushf
jno
pop
mov
xor
or
pop
dec
pop
xor
pushf
pop
mov
mov
push
adc
xor
or
(bad)
or
cmp
dec
call
xor
jp
mov
fs
inc
xor
bound
mov
leave
add
(bad)
fsub
mov
lock
iret
ret
outs
adc
mov
jno
pop
mov
repnz
push
rcl
add
pop
inc
arpl
sahf
jo
mov
rcr
adc
xor
add
sahf
cmc
jnp
push
dec
sbb
jne
inc
add
(bad)
bound
mov
xchg
or
out
push
xor
jge
add
mov
xchg
fisub
push
pop
xor
dec
mul
pop
(bad)
lock
mov
or
adc
dec
arpl
lock
sbb
pop
push
pop
pop
cwde
xor
sahf
jecxz
sub
mov
icebp
mov
fild
mov
ss
sub
pop
mov
push
pop
arpl
xor
bound
pop
mov
icebp
jbe
or
fsub
int
mov
xchg
lock
test
sahf
jno
jecxz
mov
adc
or
and
push
xor
sbb
push
pop
aaa
mov
enter
mov
leave
lock
and
add
push
pop
add
loop
pop
mov
lock
(bad)
or
cs
jp
fadd
pop
xor
dec
iret
fmul
pop
xor
jne
cmp
neg
cmc
outs
sbb
jecxz
xor
call
or
mov
fisttp
pop
mov
jae
aad
cmp
(bad)
(bad)
pushf
add
mov
mov
rcr
pusha
outs
ror
or
ror
or
test
xor
int3
sbb
add
mov
mov
push
or
pop
sbb
es
dec
jecxz
sub
or
mov
leave
cld
gs
sub
adc
(bad)
dec
out
cdq
xchg
icebp
jbe
cmp
mov
leave
fcomp
xor
or
lods
push
pop
or
add
out
push
xor
mov
pushf
and
test
jbe
sbb
push
pop
mov
test
adc
(bad)
xor
sbb
pop
sbb
nop
push
pop
mov
mov
clc
xor
adc
or
inc
mov
push
pop
fs
jmp
jae
sar
into
jge
out
jge
out
jge
in
pop
xor
mul
fs
pop
xor
adc
mov
jge
add
fs
mul
jge
fadd
pop
xor
jge
fdiv
pop
xor
out
xor
xor
mov
push
fdivp
fld
int3
les
repz
pop
xor
xor
pop
inc
enter
je
sar
ds
pop
pop
int3
xor
xor
dec
inc
or
xchg
test
ds
add
pop
jge
in
movs
jbe
pusha
in
int3
or
out
dec
or
fs
fdivp
fld
xchg
inc
jo
sahf
int3
movs
lock
repz
pop
mov
or
cmp
xchg
pop
xor
mul
in
dec
pop
fmul
pop
xor
iret
push
retf
cld
pop
or
or
or
jle
lods
or
xor
sbb
xchg
or
mov
aaa
xor
test
adc
xor
mov
aaa
xor
test
pop
xor
jmp
xor
add
xor
pop
retf
clc
sbb
(bad)
inc
pop
xor
not
cmp
dec
add
and
dec
pop
fsub
pop
xor
iret
repnz
mov
xchg
adc
fdivp
fld
jbe
xchg
sahf
cld
mov
xor
pop
inc
mov
jno
leave
not
xor
sub
or
jle
lods
or
xor
sbb
xchg
or
mov
jno
leave
neg
or
xchg
int3
mov
push
mov
xadd
std
dec
pop
sahf
rcr
pop
inc
(bad)
fild
dec
js
and
int3
add
pop
push
dec
add
jmp
and
xor
sbb
add
or
shl
mov
leave
test
inc
pop
xor
mov
imul
(bad)
sub
or
or
pop
mov
cmovnp
pop
jg
bound
arpl
xor
mov
cmp
jno
leave
not
xor
push
sbb
mov
cmp
sbb
not
fneni(8087
mov
mov
sbb
lock
les
mov
sub
mov
dec
jmp
xor
push
dec
std
dec
pop
sahf
rcr
mov
aas
mov
jne
xor
xor
pop
inc
scas
adc
cmp
fxch
or
pop
lods
or
xor
or
inc
test
xchg
jns
or
enter
(bad)
mov
mov
shr
retf
inc
mov
fistp
mov
mov
push
mov
shl
sbb
xor
mov
add
xchg
fsub
xor
int3
xor
xor
or
add
pop
xor
bound
pop
lea
fdiv
pop
xor
fsub
ror
rol
outs
shl
or
mov
fsub
xchg
jb
or
(bad)
out
call
mov
push
xor
mov
push
or
pop
mov
dec
pop
fdiv
dec
pop
xor
sbb
add
fs
xor
mov
sub
lock
add
pop
call
mov
push
xor
adc
xor
mov
retf
or
jno
call
retf
clc
push
jle
lods
or
xor
sbb
sahf
add
adc
pop
mov
adc
or
aaa
mov
scas
jbe
pop
jg
add
pop
pop
mov
fdivr
loopne
jl
or
bound
pop
dec
sub
xor
add
xor
pop
mov
fs
pop
xor
mov
cmp
push
inc
fmul
jge
add
fs
pop
xor
mov
cmp
dec
idiv
jae
dec
push
rcl
add
or
xor
pop
inc
mov
jg
sub
mov
pushf
jno
mov
xor
test
fs
mov
cmp
lock
add
or
sub
mov
retf
jb
call
or
shl
jae
xchg
jno
or
retf
fsub
jge
mov
sbb
lock
jge
in
stc
jbe
test
fs
or
add
idiv
in
stc
jbe
test
fs
rcl
mov
xchg
ret
fcomp
xor
mov
call
retf
pop
cmp
(bad)
in
retf
shl
jae
sahf
int3
mov
(bad)
call
retf
stc
add
popa
(bad)
or
mov
jae
mov
retf
add
fsub
std
jle
or
retf
sahf
int3
(bad)
lock
repz
sbb
jae
push
and
pop
push
(bad)
or
mov
and
retf
sbb
jae
mov
retf
cmp
ret
cmp
neg
xor
xor
pop
inc
arpl
cdq
aas
jbe
mov
sbb
fs
xor
out
sahf
mov
imul
retf
add
mov
sbb
xor
add
inc
mov
fs
retf
jae
sar
xor
push
xor
push
mov
jae
sar
jae
call
les
pop
repnz
pop
fbstp
hlt
jmp
jno
mov
sub
loopne
iret
jae
call
enter
fs
stc
jbe
test
fs
pop
xor
mov
sub
iret
call
loopne
jno
or
xlat
lea
sahf
(bad)
pop
jecxz
xlat
fild
call
xor
bound
pop
or
pop
xor
or
out
jg
mov
xchg
mov
jae
jmp
retf
mov
je
shl
in
stc
jbe
loopne
jae
or
fsub
fcmove
or
or
pop
xor
lock
int3
add
lock
add
loopne
jno
or
mov
xchg
jmp
jae
inc
fdivr
inc
pop
xor
int3
sbb
dec
test
fs
mov
add
inc
mov
fs
push
xor
pop
(bad)
jns
or
imul
fdivp
fld
adc
mov
jbe
lock
add
iret
pushf
jno
mov
sbb
cmp
add
inc
mov
lods
in
retf
jae
sar
or
or
retf
fsub
lds
or
mov
repz
or
jo
call
cmp
enter
js
retf
jae
bound
add
inc
pop
leave
out
xor
(bad)
jmp
jae
inc
fdiv
pop
xor
int3
or
mov
mov
jae
call
or
cmp
or
jmp
adc
pop
mov
jae
(bad)
std
les
pop
mov
add
int3
(bad)
lock
repz
inc
(bad)
dec
pop
xor
or
cmp
jmp
mul
fmul
dec
pop
xor
adc
punpckldq
fdivr
inc
pop
mov
push
xor
jge
retf
mov
or
xor
push
fdivp
fld
push
xor
pop
inc
mov
dec
and
add
(bad)
jecxz
jae
sahf
repz
call
adc
enter
test
retf
jae
out
add
stc
add
mov
imul
retf
fsub
fcmove
or
retf
fsub
xor
xchg
lock
test
fs
push
xor
adc
xor
lahf
adc
bound
mov
inc
fdivr
pop
xor
mov
retf
pop
inc
mov
imul
fs
push
xor
add
inc
aam
or
pop
leave
or
pop
mov
bound
mov
imul
sub
(bad)
test
fs
mov
xlat
inc
test
or
or
mov
bound
mov
fs
push
xor
sub
fild
or
and
or
pop
mov
and
dec
pop
mov
add
mov
pop
imul
aam
add
or
xor
pop
inc
mov
push
push
cmp
clc
les
into
jge
add
inc
mov
nop
pop
push
jl
icebp
mov
jae
ror
stc
add
mov
imul
retf
fsub
fcmove
or
retf
fsub
adc
or
jb
call
xor
adc
xor
lahf
sub
add
inc
fcom
xor
or
mov
pop
pop
mov
pop
(bad)
pusha
pop
xor
dec
call
loopne
ja
or
retf
stc
cmp
bound
fmul
dec
pop
xor
or
pushf
out
xor
pop
pop
retf
mov
or
(bad)
mov
pop
mov
pop
xor
out
sahf
mov
imul
retf
add
dec
pop
fcomp
or
(bad)
out
xor
pop
pop
retf
mov
or
or
pop
pop
mov
cmc
jbe
or
xor
or
addr16
dec
pop
retf
cld
or
in
or
mov
mov
loopne
add
neg
xor
imul
inc
mov
add
int3
fcomp
retf
stc
hlt
call
xor
adc
mov
pop
xor
out
dec
mov
jg
popa
dec
pop
fcom
pop
xor
or
jp
push
xor
jne
retf
mov
or
dec
pop
xor
jge
fsubr
dec
pop
xor
dec
push
rcl
add
or
xor
pop
inc
mov
fmul
outs
mov
dec
cmp
mov
or
cmp
bound
mov
jae
pushf
jno
dec
inc
fdivr
call
mov
jae
xor
test
fs
push
xor
into
xchg
xor
call
pop
lea
call
hlt
nop
pop
dec
je
lock
jae
ror
stc
add
mov
imul
retf
fsub
fcmove
or
retf
fsub
sub
or
or
pop
xor
or
out
jg
mov
xchg
mov
jae
(bad)
fxch
or
mov
jae
cmp
push
xor
scas
push
xor
bound
fs
stc
jbe
mul
sub
pop
xor
outs
or
push
mov
jae
rcr
sub
pop
xor
or
jbe
loopne
jbe
or
fsub
fcmove
or
pop
fs
xor
sub
pop
mov
push
or
mov
leave
hlt
inc
pop
mov
(bad)
int3
mov
mov
xchg
fdiv
call
enter
pop
mov
(bad)
enter
xor
xor
sub
fisttp
xor
xor
pusha
loope
into
or
cmp
mov
ret
pop
retf
mov
or
mov
imul
retf
add
dec
pop
xor
jge
fadd
push
dec
std
dec
pop
sahf
shl
adc
or
cmp
jmp
or
ret
outs
adc
out
or
mov
jae
and
or
xor
lods
xchg
fistp
loopne
jbe
loopne
jne
or
fsub
fxch
or
or
call
adc
enter
sub
retf
jae
sar
or
or
add
inc
pop
outs
in
xor
lea
jb
inc
fsubr
dec
pop
xor
int3
sbb
xchg
mul
add
inc
pop
leave
out
xor
lea
jb
inc
fmul
dec
pop
xor
int3
pop
mov
mov
push
mov
pop
pop
in
xor
orps
bound
fs
cli
jbe
sub
jg
fdiv
pop
xor
psrlw
mov
call
leave
jb
inc
(bad)
ss
xor
lea
dec
or
mov
or
xor
lock
xor
test
add
inc
fcom
sub
mov
imul
retf
fadd
mov
retf
fadd
mov
retf
fadd
mov
retf
fadd
mov
retf
dec
out
adc
retf
inc
retf
cmp
jmp
hlt
jb
call
out
test
mov
out
addr16
jb
and
sbb
push
xor
mov
retf
inc
fsubr
pop
xor
int3
xor
dec
test
fs
push
xor
bound
add
inc
mov
mov
or
mov
imul
retf
fdiv
mov
fcomp
sbb
or
or
retf
fadd
call
xor
test
cmp
cmp
cmp
cmp
cmc
imul
mov
pop
call
retf
pop
mov
retf
xchg
rcr
sbb
jno
call
retf
xchg
repz
dec
pop
mov
jae
(bad)
in
int
pop
mov
sub
neg
pop
xor
lea
fsubr
aaa
pop
xor
or
xor
pushf
dec
test
pusha
xor
xor
loope
retf
jae
call
retf
fs
iret
sbb
leave
add
inc
mov
lods
push
mov
jg
popa
dec
pop
fsubr
inc
pop
jp
push
xor
jne
retf
mov
or
xlat
rcl
add
or
xor
pop
inc
mov
xor
push
xchg
or
ret
imul
mov
mov
loopne
add
neg
mov
imul
retf
fadd
inc
fdiv
cli
call
mov
sbb
or
push
sbb
or
mov
or
xor
(bad)
in
retf
inc
fcomp
ss
xor
lock
mov
xlat
fst
out
xor
or
sub
adc
(bad)
pop
mov
add
daa
bound
add
iret
sbb
mov
jmp
xor
clc
xchg
hlt
nop
pop
call
loopne
lds
xchg
lock
xor
or
xor
neg
cmp
cmp
daa
bound
or
push
xor
data16
in
int3
pop
jg
jge
pop
mov
jae
call
or
mov
add
out
cdq
or
ret
imul
mov
test
jg
jge
pop
mov
jae
inc
int3
or
mov
add
repz
inc
pop
xor
sub
bnd
mov
or
jmp
and
dec
sbb
repz
inc
fdiv
xor
xor
lock
mov
fadd
call
retf
jae
sar
add
iret
es
int3
jecxz
add
inc
retf
inc
mov
fistp
mov
iret
cwde
push
mov
dec
bound
pop
lea
(bad)
xor
xor
dec
adc
mov
pop
mov
jno
mov
xchg
lock
jl
pop
mov
dec
pop
mov
in
mov
pop
mov
jle
out
dec
add
fcomp
pop
xor
dec
jecxz
pushf
test
fdiv
popa
xor
xor
mov
retf
clc
ss
dec
or
cmp
pop
bound
retf
jae
sar
jne
xor
pushf
pop
call
imul
mov
add
xor
jne
ss
das
call
hlt
jnp
call
sub
mov
mov
xor
pusha
pop
fcmove
or
add
xor
mul
sub
xor
sub
fadd
rcl
add
or
inc
mov
(bad)
in
jl
dec
add
mov
ror
out
sahf
mov
bnd
dec
popa
dec
pop
fadd
xor
xor
or
mul
push
xor
cmp
jno
or
pop
mov
xor
call
fcom
sahf
int3
movs
lock
repz
arpl
psadbw
inc
mov
cmps
jl
call
xor
imul
xor
(bad)
jmp
jae
sahf
idiv
repz
rol
neg
mov
hlt
call
enter
fs
xor
bound
pop
hlt
in
xor
lea
enter
fdiv
int3
wbinvd
jae
pop
xor
push
jge
in
cli
jbe
test
fs
sahf
retf
jae
sar
dec
mov
xor
imul
xor
out
dec
mov
jge
in
cli
jbe
test
fs
retf
jae
sar
mov
call
pop
lea
fxch
or
retf
fsub
leave
mov
or
xor
xchg
enter
or
pop
push
or
mov
inc
jo
pop
xchg
mov
pop
dec
lods
xor
sbb
add
(bad)
dec
aaa
cmp
sub
xor
loope
xor
push
cmp
daa
adc
ja
or
dec
pop
jno
mov
push
mov
pop
or
inc
dec
jno
mov
mov
(bad)
data16
pop
or
inc
inc
pusha
clc
push
push
pusha
fiadd
xchg
xchg
lea
pop
dec
pushf
xor
sbb
gs
xor
xor
sbb
gs
xor
xor
sbb
repz
leavew
pop
inc
cmp
add
mov
call
addr16
inc
cmp
jnp
xor
loope
aaa
mov
jge
in
cli
jbe
test
fs
retf
jae
sar
mov
call
pop
mov
fxch
or
retf
fsubp
lds
xor
jnp
(bad)
jmp
jae
inc
mov
jae
inc
call
fistp
(bad)
jmp
jae
inc
mov
fsub
xchg
or
jle
into
or
and
pop
jg
popa
dec
pop
retf
mov
or
dec
(bad)
pushf
out
xor
jmp
xor
bound
fs
stc
jbe
mul
jl
pop
xor
lock
int3
add
or
mov
add
cmp
pop
adc
mov
call
mov
jge
mov
jae
inc
or
in
retf
jae
loopne
jmp
pop
repz
in
retf
jae
pop
xor
jecxz
mov
jae
aad
dec
or
mov
jae
xor
hlt
call
into
jae
pushf
mov
bnd
into
jae
gs
mov
enter
inc
and
mov
(bad)
ja
call
and
lea
enter
hlt
mov
xor
loopne
iret
jae
xchg
lock
fnstsw
or
xor
jae
xor
sbb
call
fs
inc
fdivr
repz
mov
mov
xor
loope
mov
xchg
dec
or
and
lea
enter
hlt
mov
ss
xchg
jae
xchg
lock
fucom
or
xor
lea
enter
hlt
mov
fcomp
call
cmp
push
mov
sub
pusha
dec
fxch
or
retf
fsub
xor
lock
mov
jae
call
mov
mov
fdivp
and
sub
pop
xor
sbb
fcmove
or
mov
mov
punpckldq
retf
mov
or
(bad)
lea
pop
mov
or
retf
jae
arpl
add
xchg
hlt
mov
fadd
cli
call
mov
pop
xor
out
sahf
mov
bnd
test
xor
xor
bound
fs
stc
jbe
mul
mov
lods
push
xor
mov
xor
push
call
enter
loopne
(bad)
xchg
lock
pop
(bad)
or
xor
xor
jbe
loopne
add
sub
into
or
pop
fs
xor
loope
xor
movs
lock
repz
cli
jbe
loopne
add
pop
fxch
or
pop
fs
and
mov
pop
fnstsw
dec
cli
jbe
loopne
add
push
fxch
or
pop
fs
and
mov
pop
fstp
sbb
jbe
loopne
add
pop
fcmove
or
pop
mov
mov
loopne
add
neg
xor
or
pop
test
(bad)
jmp
jae
inc
fdivr
xor
xor
int3
sbb
out
sahf
mov
bnd
mov
bnd
add
or
imul
data16
call
push
or
xor
daa
cli
jbe
loopne
add
cmp
into
or
pop
add
mov
pop
fcomip
test
mov
or
addr16
cmp
call
mov
cld
push
mov
enter
inc
xchg
pusha
ss
or
stc
mov
pop
jg
popa
dec
pop
retf
mov
or
sub
mov
movs
add
add
pop
mov
loopne
out
or
fist
or
movs
mov
pop
jg
popa
dec
pop
retf
mov
or
repz
retf
jae
dec
outs
inc
retf
inc
mov
ficomp
mov
or
sub
out
sahf
jno
adc
xor
or
pop
mov
sub
int3
add
or
hlt
adc
(bad)
rol
mov
sahf
neg
loopne
add
sahf
int3
(bad)
lock
repz
std
dec
pop
sahf
ror
or
mov
sub
adc
xor
jge
mov
dec
outs
shl
mov
sahf
int3
jnp
sahf
mov
cmc
call
repz
xor
(bad)
sti
jbe
loopne
add
call
jbe
pop
dec
mov
mov
inc
jmp
in
xor
mov
call
mov
(bad)
jmp
fmul
or
or
and
mov
call
add
mov
xchg
ret
or
or
jae
sahf
mov
imul
retf
dec
(bad)
iret
retf
aas
xor
pusha
dec
pop
retf
stc
add
pop
mov
cmp
mov
test
arpl
jae
inc
retf
cmp
jmp
clc
jb
call
(bad)
test
fs
(bad)
retf
call
retf
test
arpl
add
iret
es
jmp
mov
jae
call
retf
cmp
fisub
fmul
or
fdivr
pop
xor
int3
bsr
mov
cmp
jmp
pop
mov
sahf
int3
mov
mov
inc
mov
(bad)
ror
test
add
or
fsubr
pop
xor
pop
inc
mov
movs
sub
out
dec
cmp
mov
(bad)
js
mov
and
xor
mov
popf
(bad)
pop
mov
or
mov
or
xor
dec
jmp
jae
adc
mov
pop
xor
enter
jne
aaa
lea
pop
inc
sahf
mul
fsub
pop
xor
rcl
xor
and
pop
mov
pop
pop
mov
retf
sti
add
push
mov
pop
xchg
stos
mov
pop
mov
hlt
pop
inc
stos
bound
mov
mov
pop
mov
pusha
and
dec
and
mov
shl
or
int3
ja
or
xor
or
mov
jae
push
out
clc
add
repz
fild
(bad)
out
dec
jae
call
retf
sbb
mov
xchg
shl
call
enter
add
inc
fadd
xor
or
inc
jo
xchg
enter
fs
call
jl
out
dec
cmp
fistp
pop
call
xor
jecxz
mov
jmp
xor
loope
retf
dec
push
rcl
mov
ror
in
ficomp
inc
test
and
add
fs
and
mov
iret
inc
mov
xlat
je
xor
iret
add
iret
shl
xchg
or
inc
sbb
mov
add
out
fcomp
mov
push
dec
in
mov
mov
pop
ret
imul
jno
push
dec
outs
inc
retf
inc
mov
mov
pop
ficomp
inc
test
sahf
int3
movs
lock
repz
or
pop
or
xor
add
inc
xchg
mul
fsub
es
xor
loopne
xor
pop
xor
push
adc
call
(bad)
in
xchg
pop
pop
mov
fld
mov
inc
fcom
xor
lock
int3
add
or
xor
test
fs
push
or
in
retf
jae
out
retf
clc
or
hlt
stc
xor
add
xor
bound
mov
jae
jge
in
sti
jbe
mul
fs
and
add
out
iret
jae
sahf
repz
ins
xor
mov
jo
call
xor
imul
xor
lock
add
neg
jbe
test
fs
xor
mov
cmp
enter
or
mov
fdivr
pop
xor
retf
inc
fsubr
call
xor
fs
es
bound
fs
and
jl
pop
xor
cmp
xor
sub
pop
mov
fmul
or
retf
fsub
inc
retf
xchg
lock
cmp
jmp
jo
call
xor
mov
xor
or
mov
sar
jae
jg
pusha
dec
pop
mov
jae
xlat
xor
loopne
pop
mov
xchg
lock
xor
and
pusha
dec
pop
fsub
cmp
xor
or
clc
in
xor
notrack
or
mov
leave
dec
xor
loope
xor
or
xor
mov
(bad)
sti
jbe
call
cmp
sbb
sahf
mov
addr16
and
in
xor
popf
jecxz
jae
call
retf
jae
jmp
jae
jg
pusha
dec
pop
mov
jae
call
or
mov
sbb
retf
fsub
loope
mov
jge
fadd
call
fldenv
sub
mov
jae
jmp
mov
test
data16
call
fsub
cmp
xor
(bad)
out
or
call
test
sti
or
pop
inc
mov
jmp
lock
mov
rcl
mov
pop
pushf
mov
mov
sar
xor
inc
xor
push
mov
out
jge
out
inc
or
mov
mov
sar
cmp
fs
xor
adc
push
dec
dec
sti
mov
mov
fs
xlat
inc
call
mov
leave
aam
repz
or
pop
mov
lds
or
mov
pushf
or
xor
lock
add
test
fadd
call
or
mov
mov
loopne
jo
push
in
sysenter
adc
dec
pop
xor
add
jno
mov
xchg
mov
hlt
sbb
jge
or
(bad)
sub
loopne
iret
scas
and
sahf
jno
and
xor
lock
add
test
fsub
mov
ins
jmp
leave
les
jne
pop
jg
push
dec
pop
pop
mov
fmul
daa
pop
xor
loopne
sbb
sahf
jno
adc
retf
rcl
std
dec
or
popa
add
mov
ss
xchg
fcmovnb
daa
pop
xor
dec
jmp
out
call
mov
out
push
or
fs
cmp
mov
pop
mov
loopne
add
push
fdivp
fld
inc
(bad)
fild
add
iret
or
mov
dec
mov
push
(bad)
pop
repz
mov
shl
or
xor
mov
mov
mov
leave
mov
xlat
cmp
loopne
sbb
sahf
repz
call
enter
dec
mov
xor
bound
mov
leave
lods
inc
mov
fsub
push
sbb
call
or
mov
add
repz
pop
xor
dec
stos
jo
or
mov
je
push
nop
add
push
mov
pop
dec
mov
jno
or
xor
outs
shl
or
mov
leave
mov
pop
mov
pop
lods
bound
pop
mov
mov
clc
popf
jne
or
add
cld
xor
adc
inc
pop
mov
icebp
sbb
pushf
jno
adc
mov
call
sbb
cmp
mov
xchg
fstp
jg
xor
jge
fsubr
mov
xchg
and
xor
jbe
xor
or
hlt
add
inc
pop
xor
enter
push
fdivp
fld
pushf
inc
test
sahf
int3
movs
lock
repz
pop
fsubr
pop
xor
jle
fcom
pop
xor
jle
fcomp
pop
xor
iret
mov
mov
jge
jae
adc
mov
jle
fdiv
and
xor
sbb
xor
loopne
sbb
out
ret
imul
push
retf
inc
mov
mov
or
dec
mul
fs
cmp
bound
fs
add
stc
sbb
inc
xor
cmp
cmp
xor
mov
sub
push
aam
add
jae
dec
add
iret
jge
out
call
mul
jae
pop
fmul
int3
packssdw
retf
inc
mov
(bad)
sahf
int3
movs
lock
repz
or
jno
pop
jge
in
pop
mov
pop
mov
retf
stc
add
inc
test
inc
sbb
es
addr16
bound
jae
or
mul
jae
jmp
in
pop
xor
enter
jge
fdiv
cld
and
imul
lock
jae
jmp
lods
es
xor
enter
retf
inc
mov
ficomp
inc
cwde
adc
adc
fimul
pop
mov
dec
into
adc
dec
out
dec
test
fsub
xor
or
jae
sbb
stc
add
aad
or
cmp
dec
jecxz
mov
out
jge
jae
pop
retf
stc
hlt
jmp
mov
jl
retf
stc
hlt
call
dec
jecxz
retf
stc
hlt
call
je
lock
cmp
neg
xor
mov
and
or
xor
jl
fdivr
pop
xor
loopne
sbb
out
sbb
fs
push
xor
dec
out
inc
mov
inc
xchg
repz
dec
pop
xor
or
mov
pop
pop
mov
pop
mov
fmul
or
inc
mov
out
push
xor
icebp
es
(bad)
push
hlt
stc
or
hlt
addr16
push
xor
imul
mov
pop
xor
push
mov
pop
dec
jmp
rol
aam
das
push
mov
jo
or
and
pop
pop
neg
xor
imul
sahf
repnz
jne
(bad)
mov
jno
and
mov
add
or
inc
pushf
loopne
sbb
stc
scas
scas
or
mov
pop
pop
pop
repnz
pop
mov
ss
xor
sub
push
retf
mov
jl
add
inc
lods
mov
jl
inc
xchg
or
dec
pop
repnz
xchg
ret
pop
xor
dec
sbb
sahf
in
(bad)
dec
sbb
cmp
mov
div
mov
call
aaa
leave
add
retf
stc
sbb
std
stos
or
mov
add
clc
sahf
repnz
push
aam
add
pop
inc
arpl
push
pop
repz
clc
leave
aas
mov
scas
and
clc
sahf
jno
adc
mov
sahf
jno
adc
dec
(bad)
mov
adc
icebp
lock
ror
iret
pop
arpl
dec
push
or
mov
addr16
sbb
std
add
inc
xchg
mov
inc
add
and
mov
out
inc
imul
push
retf
cld
jl
mov
sub
add
or
lods
jnp
sahf
loop
into
jbe
add
or
mov
in
jp
jmp
add
pop
pushf
dec
js
jg
pusha
dec
pop
arpl
xor
mov
and
not
cmp
inc
and
dec
std
dec
pop
sahf
shl
pop
ss
movs
adc
and
aam
sahf
les
lods
jecxz
jb
pop
mov
in
leave
jae
sahf
les
sahf
mov
imul
retf
add
imul
retf
fdiv
bound
fs
retf
jae
sar
mov
fist
mov
call
fsubr
and
xor
enter
or
retf
stc
sbb
imul
mov
xor
or
xchg
jo
jmp
retf
jno
pushf
mov
jmp
mul
leave
jae
stos
push
mov
xor
bound
pushf
and
xor
(bad)
out
retf
jb
scas
mov
push
xchg
loopne
cmc
call
cmp
or
xor
loopne
adc
pop
xor
dec
pop
mov
jae
(bad)
mov
not
mov
pop
inc
jne
rcr
add
jbe
jmp
hlt
imul
mov
add
pusha
dec
pop
retf
stc
add
jns
or
mov
add
inc
pushf
mul
in
cld
jbe
pusha
(bad)
into
or
xor
xor
mov
and
cwde
cld
jbe
mul
pop
(bad)
out
retf
jb
inc
pop
pop
jecxz
xor
loopne
push
mov
xchg
lock
mov
mov
xchg
cmp
(bad)
call
xor
loope
xor
or
xor
lea
xor
not
mov
shr
jae
cld
inc
pop
(bad)
fcmovne
jno
adc
inc
imul
retf
mov
jmp
jb
fs
or
or
(bad)
mov
retf
jno
sbb
xor
xchg
loopne
bswap
jbe
add
or
mov
in
jp
jmp
jae
call
push
fild
call
jbe
test
arpl
xor
mov
and
(bad)
jno
xchg
mov
retf
or
pop
xor
mov
jae
call
retf
jae
ud1
or
retf
jae
pushf
mov
imul
retf
fsub
(bad)
or
cwde
and
xor
int3
jl
jnp
sahf
mov
imul
retf
add
imul
retf
or
pop
xor
(bad)
jecxz
jb
pushf
mov
imul
retf
mov
fcmovne
jno
sbb
add
idiv
jge
adc
mov
imul
retf
or
or
aaa
lea
pop
mov
or
retf
jae
sbb
or
or
mov
cs
imul
retf
or
mov
imul
retf
add
neg
clc
jb
dec
lea
inc
or
adc
inc
cwde
pusha
dec
(bad)
or
retf
fsub
jno
mov
xchg
lock
mov
jae
(bad)
int3
mov
xor
dec
outs
sahf
mov
jmp
test
jno
call
pop
jmp
scas
or
mov
aam
xor
test
fs
jmp
jae
shl
add
idiv
daa
add
inc
fdivr
call
les
call
retf
bound
mov
pushf
mov
imul
retf
fsub
(bad)
or
push
and
xor
int3
bsr
mov
jae
call
xor
(bad)
jecxz
jb
call
mul
xlat
in
retf
jae
sar
add
neg
hlt
or
out
dec
pop
retf
cmp
call
sbb
or
jl
rcr
bound
pop
mov
pop
mov
xor
dec
call
adc
jmp
idiv
shr
stos
shl
arpl
mul
retf
cmp
call
adc
sahf
bnd
repz
jno
inc
scas
or
retf
cmp
call
adc
sahf
repnz
mov
mov
imul
retf
addr16
xchg
ret
pop
xor
push
dec
std
dec
pop
sahf
ror
or
push
or
and
iret
shl
or
jae
lock
add
neg
retf
fsub
fmulp
or
retf
fsub
rcl
mov
jge
in
std
jbe
test
fs
pop
xor
loopne
int3
jae
xchg
lock
mov
mov
leave
not
mov
(bad)
mov
std
jbe
pusha
pop
fmulp
or
mov
xchg
fcom
call
jbe
pusha
retf
or
gs
pop
pop
(bad)
fs
loopne
jae
rcl
or
dec
pop
sahf
ror
or
mov
add
push
sahf
int3
movs
lock
repz
mov
dec
adc
xor
cmp
enter
adc
xor
adc
xor
out
sahf
mov
cmc
call
out
pop
dec
pop
mov
(bad)
adc
test
sahf
mov
add
lea
jae
sahf
repz
popa
adc
call
leave
jae
call
or
mov
clc
cmc
call
xor
pop
adc
lods
jno
call
xor
adc
retf
jae
and
mov
sahf
mov
cmc
call
leave
jae
call
test
pop
mov
cld
cmc
call
xor
test
jae
call
or
sbb
sar
nop
or
pop
pusha
out
push
xor
stos
xor
mov
je
out
mov
mov
call
xor
loopne
push
mov
inc
fdiv
or
xor
test
fs
(bad)
jbe
pusha
lods
(bad)
or
mov
xchg
fcomp
int3
xor
fs
xor
(bad)
or
xor
lock
add
imul
pop
mov
pop
xor
(bad)
jmp
jae
inc
mov
jae
(bad)
std
lods
or
retf
cmp
movs
jno
call
retf
jae
mov
retf
cmp
mov
bound
lea
fdivr
icebp
call
mov
jae
xlat
inc
lahf
pop
call
je
out
mov
mov
pop
xor
scas
(bad)
jbe
test
fs
xor
sub
mov
jae
call
loopne
adc
call
retf
jae
loopne
cdq
or
pop
enter
or
(bad)
cmp
adc
repz
xor
lea
xor
or
mov
imul
retf
lea
pop
xor
iret
xchg
fdiv
call
outs
popf
or
mov
mov
retf
jae
arpl
jmp
xor
je
sar
jae
(bad)
cmp
imul
ins
add
inc
mov
jae
jge
out
jge
out
jge
out
call
bound
fsubr
enter
or
xor
mov
dec
or
mov
out
sahf
mov
cmc
call
sbb
int3
cld
jbe
pusha
xchg
(bad)
or
retf
fsub
xchg
adc
xchg
pop
jno
call
repz
pop
xor
(bad)
jmp
jae
inc
pop
lock
xor
dec
xor
cmp
or
xor
jg
xor
mov
xor
jae
sub
inc
push
out
clc
imul
aam
pop
xor
jmp
and
call
pop
mov
pop
xor
aaa
ss
pusha
adc
jo
call
loope
or
pop
lea
(bad)
or
retf
fsub
sbb
lock
pop
shrd
mov
dec
jecxz
mov
xchg
jmp
lock
repz
call
pop
in
pop
mov
jae
inc
or
bound
xor
sub
pop
mov
mov
fadd
pop
xor
mov
jmp
or
mov
jae
adc
dec
push
dec
outs
inc
retf
fld
inc
(bad)
fild
add
ret
imul
int3
add
loopne
adc
or
retf
sbb
push
retf
fxtract
call
adc
or
ret
loopne
add
pop
push
lods
or
mov
js
mov
popa
jo
(bad)
cmp
pop
loope
pop
pop
mov
and
pop
jge
fs
adc
sub
dec
(bad)
mov
mov
test
fadd
mov
mov
xchg
lock
cmp
clc
xchg
hlt
mov
inc
xchg
or
mov
dec
mul
cmp
xor
pop
jmp
or
retf
stc
sbb
or
call
hlt
call
adc
mov
xor
or
cmp
pop
loope
enter
fs
or
test
fsub
(bad)
in
mov
mov
pop
mov
or
repnz
iret
jge
(bad)
aad
mov
call
adc
sbb
mov
sahf
int3
(bad)
lock
repz
dec
out
imul
fdivp
fld
pop
xor
mov
inc
arpl
push
pop
mov
test
lock
int3
add
iret
shl
int3
pop
pop
xor
lock
add
neg
aam
test
jae
jg
gs
pop
fdiv
xor
into
push
hlt
or
movs
lock
repz
mov
fsub
sub
xor
int3
pop
cmp
cmp
test
imul
mov
xlat
je
outs
xchg
repz
dec
lea
sub
pop
xor
lea
mov
jae
inc
fsubr
adc
xor
enter
mul
fcom
pop
cmp
cmp
test
fs
or
sub
add
addr16
addr16
xchg
fcmovnbe
add
xor
push
dec
std
dec
pop
sahf
shl
aaa
xor
loopne
das
mov
inc
(bad)
fild
inc
icebp
jmp
out
xor
je
shl
or
xor
loopne
sub
pop
ret
imul
mov
inc
not
mov
pop
inc
jne
aad
test
(bad)
clc
loope
call
adc
pop
bound
xor
mov
cmp
jge
retf
stc
sbb
addr16
pop
pop
push
loopne
xor
lea
aam
test
bswap
add
dec
bound
pop
mov
pop
mov
pop
mov
pop
je
loopne
sub
sub
or
retf
fsub
cmp
mov
jge
add
inc
add
inc
add
xor
pop
dec
nop
or
mov
fld
mov
cld
es
(bad)
jecxz
jae
pushf
mov
xlat
call
push
rcl
add
or
xor
pop
inc
mov
(bad)
mov
xchg
adc
call
add
jp
dec
cmp
iret
in
push
mov
inc
fdiv
pop
mov
sbb
sbb
jo
pop
xor
loopne
adc
or
ret
call
xor
out
sahf
mov
repz
fsubr
pop
fsub
lea
int3
(bad)
lock
repz
jge
add
inc
fcomp
pop
pop
xor
or
xor
test
fs
(bad)
jbe
pusha
lods
(bad)
or
mov
xchg
fsubr
clc
call
cmp
mov
pop
pop
mov
pop
xor
(bad)
jmp
jae
inc
mov
jae
inc
or
mov
dec
mul
add
jae
inc
fsubr
int3
sbb
mov
pop
pop
sub
push
xor
(bad)
jmp
jae
inc
fdivr
pop
pop
xor
out
push
mov
call
test
fs
or
loopne
les
sahf
mov
cmc
call
pop
mov
jge
out
call
loopne
sub
out
sbb
or
pop
xor
iret
xchg
shl
call
mov
nop
jmp
iret
xchg
fdiv
call
or
add
neg
retf
inc
fsubr
call
nop
jno
call
retf
inc
pop
mov
pop
lods
bound
pop
mov
mov
jae
jge
test
or
mov
(bad)
adc
xor
lock
add
cmc
call
jbe
pusha
xchg
(bad)
or
retf
fsub
jge
mov
xchg
lock
into
xchg
mov
imul
xor
es
ret
and
pop
xor
(bad)
jmp
jae
inc
pop
lock
xor
and
xor
adc
pop
or
xor
push
or
mov
call
iret
jae
sub
inc
push
ret
sbb
jl
pop
fdiv
push
xor
test
fs
fldcw
mov
xchg
repz
gs
xor
or
gs
pop
mov
jae
dec
in
call
retf
jae
pop
cmp
les
xor
test
fs
or
test
xlat
cmp
mov
pop
retf
cmp
mov
fs
xor
test
fs
or
idiv
dec
dec
imul
mov
je
ror
cmp
das
mov
jg
fs
pop
fcom
pusha
(bad)
or
cmp
pop
xor
int3
add
pop
loopne
xor
test
mov
xor
or
addr16
or
idiv
test
call
sub
lea
fdivr
pushf
jmp
not
je
shl
mov
out
xor
or
xor
test
fs
or
sbb
mov
mov
fsubr
es
add
cmc
call
xor
adc
rcl
test
sti
and
pop
inc
mov
or
dec
push
mov
fnstsw
pop
mov
sahf
jno
mul
fs
or
rol
adc
fcom
into
inc
bound
xor
pop
call
stc
add
pusha
mov
inc
fsubr
lock
int3
add
push
pop
xor
dec
jmp
out
inc
pop
mov
or
add
pop
jae
dec
aas
sub
xor
out
sahf
jno
adc
bound
xor
pop
dec
fwait
or
mov
xor
and
push
mov
rcl
std
dec
pop
sahf
rcr
pop
inc
(bad)
(bad)
xchg
ret
repnz
xor
dec
sbb
(bad)
adc
xor
pushf
jge
retf
stc
add
std
xchg
or
mov
leave
hlt
sahf
repz
xor
fwait
or
pop
mov
add
fcom
xor
or
xor
jp
pop
dec
loopne
xor
jnp
xor
pusha
mov
fmul
pop
xor
dec
out
mov
dec
loopne
and
inc
int3
in
mov
pusha
cmps
stos
into
or
xchg
stc
imul
mov
add
sub
add
stc
sbb
inc
xor
cmp
push
or
mov
jp
xor
out
sahf
jno
adc
neg
inc
(bad)
fild
jbe
mov
or
mov
or
sysenter
mov
inc
enter
outs
jb
call
hlt
clc
sbb
mov
mov
jge
fs
xor
mov
jl
or
imul
fdivp
mov
inc
mov
(bad)
xchg
ret
mov
dec
pop
xchg
push
ficomp
xor
jecxz
mov
in
adc
xor
pop
pop
xor
push
mov
add
fs
push
xor
bound
pop
mov
mov
adc
xor
enter
jecxz
mov
fwait
pusha
xor
push
fdivp
pushf
or
imul
pop
ficomp
fs
mov
test
push
xor
mov
(bad)
out
or
mov
pop
xor
out
sahf
mov
cld
call
xor
enter
fnstenv
mov
mov
jge
or
fadd
push
pop
xor
loopne
mov
jmp
xor
pop
xor
(bad)
sti
ret
jae
jg
(bad)
xor
pop
xor
int3
pop
mov
in
retf
jae
bound
mov
or
fsubr
mov
jnp
call
xor
mov
outs
mov
loopne
add
neg
ret
jae
xchg
cld
jae
xchg
or
iret
xchg
fisttp
(bad)
call
pop
mov
fmul
or
add
mov
jae
jg
adc
fmul
(bad)
call
mov
or
in
mov
loopne
and
pop
pop
ins
mov
push
test
fs
xor
and
pop
mov
call
retf
jae
shr
neg
hlt
or
or
or
lock
xor
jmp
jae
sbb
or
jmp
jae
xor
or
push
pop
push
stc
push
xor
(bad)
jmp
jae
inc
fmul
ins
call
mov
push
cld
call
add
jecxz
jae
call
mov
or
xor
mov
call
enter
mov
mov
sub
dec
mov
(bad)
pop
sbb
push
xor
mov
enter
fsub
pop
mov
or
mov
or
xor
not
cmp
lea
mov
hlt
jmp
jae
call
loopne
daa
mov
xchg
repnz
dec
pop
xor
lea
or
jmp
or
(bad)
mov
push
or
mov
call
jp
or
repnz
jmp
jae
xchg
fiadd
pop
xor
(bad)
out
int3
jae
inc
pop
sbb
push
xor
(bad)
jmp
jae
inc
fsubr
adc
xor
int3
sbb
jae
arpl
mov
inc
mov
jbe
(bad)
int
and
mov
retf
xor
cmp
jbe
xor
mov
or
clc
popf
jne
or
in
adc
test
fs
mov
loopne
add
neg
int3
jae
inc
pop
push
loopne
xor
(bad)
jmp
jae
inc
fcomp
xor
mov
jbe
test
fs
xor
mov
and
jg
mov
pop
mov
jae
jmp
lahf
or
mov
dec
test
fs
push
test
fs
mov
fmul
or
retf
fsub
mov
mov
xchg
lock
test
fs
xor
mov
dec
mov
loopne
add
neg
enter
hlt
mov
mov
lock
fmul
or
retf
fsub
sub
lock
bound
mov
jae
call
dec
or
mov
pop
(bad)
push
xor
(bad)
jmp
jae
inc
fsubr
int3
sbb
lea
pop
mov
jae
xlat
xor
loopne
and
out
retf
jae
out
cmp
or
test
xor
mov
int3
je
call
xor
dec
push
test
fs
shl
or
aas
dec
pop
mov
jae
(bad)
jge
or
mov
jae
call
cwde
or
mov
jae
xor
jae
stos
xor
call
mov
jae
xchg
xor
call
retf
add
stos
lods
js
call
xor
retf
inc
pop
mov
push
xor
(bad)
jmp
jae
inc
fdiv
int3
pop
mov
dec
test
fs
add
mov
call
retf
jae
inc
xor
xor
add
shl
bound
cmp
enter
fs
jecxz
jae
jmp
or
out
retf
jae
inc
or
mov
jae
pushf
mov
call
xor
mov
call
bound
retf
cmp
out
retf
jae
cmp
xor
or
ins
lahf
or
fs
push
xor
and
mov
jae
inc
retf
cmp
out
retf
jae
lods
shl
xchg
lock
sub
call
retf
jae
adc
repnz
daa
pop
xor
push
dec
std
dec
or
popa
add
dec
mov
loopne
ror
pop
mov
pushf
xlat
jbe
add
adc
enter
or
xchg
(bad)
and
xor
dec
jmp
out
jge
in
mov
pop
mov
shl
or
push
rcl
mov
ror
or
xor
dec
dec
jmp
sub
mov
loopne
add
neg
repz
push
xor
test
fs
repz
int
(bad)
mov
je
out
mov
or
pop
xor
or
out
jge
add
inc
fadd
sbb
xor
into
call
or
enter
add
add
fs
sbb
mov
and
ror
jae
sahf
repz
add
fs
mov
jno
or
mov
xchg
sbb
xor
(bad)
cmp
mov
lock
jae
rcr
test
fadd
lahf
(bad)
jae
xchg
lock
jbe
jne
mov
daa
pop
xor
out
sahf
mov
imul
retf
add
or
fmul
or
jge
pop
pop
lea
pop
mov
dec
repz
jae
out
sbb
pop
test
xor
sub
jbe
pusha
or
xor
stos
in
call
imul
aad
mov
ror
or
mov
jg
bound
repz
sahf
mov
imul
retf
add
or
pop
int3
loopne
and
or
xor
pop
pop
ins
mov
push
test
fs
add
mov
pop
cmp
sub
call
xor
loopne
pop
jae
sahf
jno
mov
sub
or
cmp
dec
jmp
in
pop
mov
mov
imul
retf
fsub
pop
dec
jae
xchg
lock
sub
push
dec
pop
xor
movs
jo
retf
add
dec
jmp
in
pop
mov
mov
imul
retf
fsub
ret
dec
jae
xchg
lock
sub
bound
xor
mov
mov
pop
sub
call
xor
or
jno
pop
jg
fs
pop
pop
and
pop
xor
loopne
shl
xchg
lock
add
inc
mov
out
ret
imul
mov
stc
hlt
jg
fs
pop
pop
sbb
push
xor
mov
jb
call
retf
jae
shr
sub
pop
xchg
push
xor
add
adc
cmp
imul
mov
sbb
mov
imul
retf
add
enter
fnstenv
mov
mov
dec
jmp
pop
imul
fdivp
fld
pop
xor
or
xor
pop
inc
mov
xchg
ins
or
or
test
xor
mov
pop
xchg
or
repz
stc
retf
jae
pop
xor
and
pop
mov
pop
inc
int
call
or
mov
add
hlt
or
out
pop
xor
or
mov
call
xor
bound
mov
jae
inc
sahf
or
repnz
sahf
les
(bad)
sti
ret
inc
fcomp
add
push
les
out
retf
fsub
cmc
cmp
call
cmp
call
int3
jp
call
ret
call
sar
arpl
lea
fidiv
sahf
div
lahf
mov
sbb
leave
in
xor
or
xor
push
xor
cwde
call
enter
pop
mov
xor
pusha
rcr
into
or
add
arpl
mov
fidiv
inc
(bad)
sbb
xor
clc
loopne
add
neg
jbe
pusha
inc
fcmove
or
retf
fsub
sub
mov
imul
retf
fsub
fnstsw
mov
jge
add
arpl
retf
jae
stc
lds
loopne
retf
jae
call
loopne
xor
xor
or
fs
pop
pop
mov
push
xor
(bad)
jmp
jae
inc
mov
jae
call
imul
mov
pusha
sahf
mov
(bad)
call
cmp
or
retf
fsub
popf
cmp
call
retf
mov
loope
in
pop
add
cvtps2pi
mov
dec
cmp
imul
aam
add
or
xor
mov
dec
xor
sahf
int3
jnp
sahf
mov
cmc
call
scas
fs
pop
pop
ins
mov
push
test
fs
pop
xor
test
fs
movs
jbe
loopne
(bad)
jae
xchg
lock
sub
imul
xor
xor
cmp
or
xor
dec
jmp
out
jge
in
mov
pop
mov
sar
or
push
rcl
mov
rcr
pop
test
xchg
jnp
mov
dec
mov
mov
pop
sub
call
xor
das
movs
je
pusha
xchg
jnp
or
cmps
or
retf
mov
loopne
cmp
pop
xor
dec
mov
inc
xchg
or
mov
clc
mov
cmp
jge
out
jg
and
pop
mov
(bad)
add
jno
mov
sahf
int3
(bad)
lock
repz
cmp
mov
and
cmp
fmul
xor
rcl
add
or
xor
pop
inc
(bad)
shr
dec
add
retf
xchg
fild
or
pop
in
pushf
xlat
jbe
not
mov
mov
pop
xor
(bad)
jecxz
jae
inc
pop
mov
in
mov
sahf
in
(bad)
rcr
mov
imul
retf
fadd
call
xor
adc
or
adc
mov
retf
stc
lock
mov
mov
fdivp
(bad)
int3
add
xor
or
pop
mov
call
mov
imul
retf
fdiv
(bad)
int3
fs
xor
mov
push
clc
adc
inc
je
cmp
mov
mov
in
loopne
pop
mov
jae
push
enter
inc
je
and
mov
jge
out
sahf
mul
jge
fsubr
add
xor
jge
pop
int3
loopne
aas
mov
sahf
repz
not
xor
or
retf
fadd
adc
(bad)
int3
fs
sbb
mov
loope
xchg
pop
test
inc
or
mov
adc
retf
enter
or
mov
adc
enter
or
sahf
int
shr
or
push
xor
icebp
sahf
test
push
data16
inc
int
jmp
or
sahf
in
jnp
sahf
mov
imul
retf
pop
lea
jae
sahf
test
dec
xchg
or
je
xor
jae
xchg
or
retf
lea
pop
or
push
xor
fwait
sbb
mov
cmp
pop
xchg
cld
jae
xchg
or
je
xor
mov
call
xor
xor
icebp
sahf
test
push
data16
xchg
or
imul
shr
or
push
xor
icebp
call
or
mov
and
push
xor
pop
xchg
cld
jae
xchg
or
je
xor
mov
push
or
mov
and
push
xor
pop
xchg
cld
jae
xchg
or
je
xor
jae
xchg
or
retf
lea
pop
sbb
push
xor
jecxz
xor
mov
cmp
lea
jae
pushf
mov
imul
retf
add
shr
or
push
xor
icebp
call
shr
or
push
xor
icebp
sahf
test
push
data16
or
call
dec
add
cmp
shr
or
push
xor
icebp
call
shr
or
push
xor
icebp
sahf
test
push
data16
xchg
into
or
dec
or
mov
add
mul
pop
xor
pop
xchg
cld
jae
xchg
or
je
xor
mov
xchg
lock
sahf
in
movs
rcr
cld
jae
xchg
or
je
xor
mov
xchg
lock
call
xor
xor
icebp
call
sub
xor
loopne
aas
mov
xchg
lock
call
retf
fs
pop
xor
mov
xor
or
retf
stc
lock
mov
pop
mov
pushf
xlat
jbe
add
adc
enter
or
dec
push
rcl
add
or
xor
pop
inc
mov
dec
or
clc
les
or
fsub
pop
xor
into
jb
mov
dec
adc
push
xor
or
mov
pop
fmul
add
xor
(bad)
(bad)
leave
jae
push
hlt
clc
cmp
cmc
mov
pop
mov
or
retf
jae
rcr
cwde
movhps
mov
inc
or
pop
(bad)
loopne
xor
sahf
mov
hlt
call
xor
mov
adc
and
fdiv
movhps
loopne
aas
mov
jg
lea
pop
mov
jae
call
xor
sbb
xor
bound
pop
ins
mov
ret
leave
jae
inc
fsubr
pop
call
cmp
lea
pop
mov
pushf
xlat
jbe
add
ret
test
adc
xor
add
sahf
les
sahf
mov
repz
int
or
mov
jne
add
repnz
jne
inc
sub
retf
jae
out
push
xchg
sub
call
or
call
cmc
xchg
pop
cmp
mov
enter
out
push
mov
jbe
(bad)
int
and
mov
add
sub
jo
call
retf
jae
popf
mov
hlt
call
repnz
lea
enter
fmul
pop
xor
retf
lea
repnz
shl
mov
adc
retf
jae
jg
ds
pop
pop
jnp
push
xor
lea
jae
inc
fsubr
add
xor
or
retf
fadd
call
xor
test
fs
retf
jae
out
push
xchg
sub
imul
mov
jo
call
retf
jae
shr
or
retf
fsub
lea
mov
sahf
les
sahf
mov
repz
xor
mov
xchg
or
imul
cmp
push
xor
out
xor
mov
int
or
mov
mov
push
mov
jp
int3
or
sbb
mov
xor
or
jmp
leave
clc
xchg
push
pusha
or
js
pop
xor
and
repz
rcl
mov
xchg
push
ins
or
mov
pop
xor
dec
iret
fs
adc
mov
mov
(bad)
mov
retf
mov
bound
pop
mov
pop
lea
xor
mov
mov
xchg
pop
mov
fdiv
call
hlt
ror
or
adc
xor
stos
out
into
or
dec
dec
pop
pop
mov
fadd
push
pop
xor
clc
loopne
add
neg
enter
pop
mov
pop
xor
sbb
ror
or
clc
dec
pop
fdivr
or
xor
clc
les
dec
pop
pop
or
push
xor
xchg
adc
mov
ror
or
aas
dec
pop
fcomp
pop
xor
push
lock
pusha
xchg
(bad)
jl
out
dec
pusha
pop
ror
or
cmp
fsub
or
xor
sbb
jbe
pusha
(bad)
xchg
into
or
imul
pushf
pop
xor
and
pop
ins
adc
mov
out
int
mov
add
fmul
arpl
xor
adc
hlt
into
or
xor
pop
pop
xor
adc
hlt
into
or
lea
pop
mov
jae
jg
push
pop
pop
jbe
push
xor
or
xor
loopne
in
jae
xchg
lock
add
inc
shl
or
jmp
cmp
imul
mov
pushf
pop
xor
test
fs
call
or
add
fcomp
call
or
push
pop
pop
mov
pop
mov
adc
rcr
sbb
retf
fsub
mov
mov
pop
cmp
or
inc
fcomp
call
cwde
dec
dec
pop
fs
loop
pop
fcom
jnp
retf
in
push
pusha
test
or
jmp
xchg
mov
pop
mov
dec
test
fs
adc
bound
pop
mov
pop
mov
sub
inc
cmp
pop
pushf
das
pop
xor
or
xor
mul
les
dec
pop
fcomp
or
sbb
mov
jg
ds
pop
pop
dec
das
push
xor
and
and
cmp
fdivr
or
push
les
or
out
jmp
jle
call
jbe
loopne
xor
repnz
popw
xor
cmp
call
imul
mov
sub
xlat
rcl
jae
mov
iret
or
xor
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
xor
xor
or
xor
mov
pusha
or
pop
mov
clc
and
jae
aaa
aaa
inc
jbe
or
mov
cmp
je
(bad)
(bad)
or
xor
push
hlt
clc
or
in
mov
sub
(bad)
fs
retf
jae
fdivp
aad
sti
xor
or
sbb
xor
mov
pop
xor
jecxz
lock
retf
ins
or
xor
pop
xor
imul
mov
cli
mov
retf
pop
dec
xor
sub
sti
mov
or
pushf
jo
or
cmp
or
xor
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
xchg
sub
.byte
movs
mov
pop
.byte
