push
mov
sub
push
mov
mov
mov
xor
or
cmp
je
push
mov
mov
cmp
je
cmp
jne
push
push
push
push
call
cmp
jne
mov
dec
mov
mov
dec
mov
jmp
mov
mov
or
mov
push
mov
xor
mov
add
mov
mov
mov
mov
sub
mov
mov
push
push
call
push
push
call
mov
mov
cmp
movzx
mov
adc
mov
push
pop
sub
mov
mov
xor
add
or
mov
add
mov
movzx
add
mov
mov
mov
mov
add
mov
xor
add
xor
xor
push
pop
mov
or
div
push
pop
push
test
lea
mov
mov
mov
sbb
mov
mov
add
xor
div
mov
mov
cmp
ja
cmp
mov
adc
mov
and
add
mov
mov
sub
xor
pop
div
mov
cmp
movzx
sbb
mov
imul
sbb
add
xor
sub
xor
div
mov
mov
jmp
mov
and
sub
sbb
xor
adc
mov
inc
xor
push
pop
and
xor
xor
inc
mov
cmp
jne
push
push
push
push
push
call
cmp
jne
mov
inc
mov
cmp
jb
div
mov
mov
and
push
pop
push
mov
mov
add
inc
xor
div
movzx
sub
mov
mov
add
mov
mov
mov
cmp
jae
xor
pop
div
mov
mov
add
xor
div
or
cmp
mov
jne
cmp
jne
cmp
je
mov
mov
cmp
jne
xor
mov
mov
mov
cmp
jne
mov
cmp
je
cmp
jne
push
push
push
push
push
call
xor
or
dec
mov
jmp
mov
xor
add
mov
or
mov
mov
mov
add
xor
add
mov
jmp
loopne
pushf
loope
nop
nop
loopne
das
das
das
jo
cs
cs
das
das
(bad)
jmp
xor
loopne
das
das
push
jb
iret
cs
das
mov
sahf
loop
cmp
mov
or
(bad)
adc
iret
lods
scas
mov
xor
push
xchg
rol
xor
call
idiv
out
ds
mov
in
adc
ins
leave
pop
push
pop
push
mov
xchg
mov
lds
ss
jb
sub
inc
(bad)
pop
push
push
stos
pop
in
and
and
lock
mov
inc
inc
(bad)
fs
pop
rol
pop
add
mov
lods
sub
adc
int
test
imul
mov
pop
call
jns
add
inc
pop
pop
pop
movs
shr
cld
add
fs
fstp
stos
call
mov
pushf
movs
add
or
or
push
pop
outs
add
dec
lea
cmp
popa
and
in
int
out
push
xor
(bad)
or
adc
cwde
push
cmp
push
fs
rol
fstp
sub
test
test
(bad)
clc
jne
mov
mov
cmp
jb
mov
mov
adc
mov
or
xor
or
mov
and
mov
mov
add
movzx
sub
mov
xor
mov
mov
mov
mov
cmp
je
mov
xor
lea
test
je
mov
xor
add
xor
div
test
jne
mov
cmp
je
mov
adc
mov
jmp
xor
or
movzx
sub
mov
mov
mov
adc
mov
xor
mov
sub
mov
mov
and
mov
mov
mov
xor
mov
add
xor
or
mov
sub
mov
movzx
mov
xor
xor
movzx
and
mov
mov
mov
xor
lea
xor
cmp
jne
mov
mov
cmp
ja
sbb
and
xor
add
xor
mov
mov
xor
add
push
push
push
call
test
je
test
je
and
mov
inc
mov
cmp
jne
call
cmp
jb
mov
xor
cmp
mov
movzx
adc
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
lea
mov
lea
mov
mov
mov
mov
lea
mov
mov
mov
mov
mov
cmp
jne
mov
xor
add
jmp
movzx
sub
mov
test
je
mov
mov
cmp
jg
add
add
sub
mov
xor
lea
mov
cmp
xor
or
mov
sbb
xor
mov
sub
add
cmp
jbe
mov
cmp
jne
mov
xor
add
jmp
and
jmp
xor
xor
inc
mov
cmp
jae
cmp
jne
push
push
push
call
cmp
jne
mov
inc
mov
jmp
mov
add
test
je
ror
jmp
mov
xor
xor
cmp
jb
mov
add
mov
movzx
rcr
mov
mov
xor
sub
xor
xor
rcr
mov
mov
mov
sub
xor
lea
mov
cmp
mov
sar
mov
xor
mov
sub
add
cmp
jbe
mov
test
mov
xor
xor
sbb
xor
add
mov
mov
mov
xor
xor
lea
xor
mov
cmp
jne
jmp
push
cmp
movzx
mov
sbb
mov
add
pop
xor
div
push
movzx
mov
xor
mov
pop
mov
mov
xor
add
xor
div
mov
cmp
movzx
xor
xor
adc
mov
mov
add
mov
mov
cmp
jle
push
xor
pop
div
push
pop
mov
movzx
and
mov
mov
mov
add
xor
div
mov
sub
mov
or
mov
mov
movzx
xor
mov
mov
mov
xor
xor
lea
xor
mov
cmp
jne
and
mov
inc
mov
cmp
jne
push
push
push
call
cmp
jne
xor
xor
inc
mov
cmp
jb
mov
mov
xor
xor
lea
xor
mov
cmp
jne
mov
mov
xor
xor
lea
xor
mov
cmp
jne
mov
pop
pop
pop
leave
ret
xchg
jecxz
nop
pushf
nop
xchg
loope
das
das
das
cmp
jle
repnz
push
mov
mov
das
das
das
das
push
adc
adc
das
das
pop
pop
mov
aad
cs
add
hlt
(bad)
jle
xchg
sahf
cld
push
(bad)
pop
aaa
xchg
or
cs
std
pushf
mov
stc
jae
nop
inc
call
fidiv
shr
add
je
in
push
pop
call
fs
sbb
adc
int3
inc
pop
xchg
loope
cli
push
out
xchg
inc
cmp
cmp
arpl
(bad)
jl
scas
pop
rol
in
fldcw
(bad)
dec
sub
push
mov
sbb
scas
cmp
mov
mov
cdq
mov
push
int
jbe
adc
sbb
and
or
inc
or
or
imul
pusha
push
nop
or
rol
jno
aad
sar
mov
dec
mov
mov
out
div
or
mov
int3
jge
push
push
inc
enter
add
dec
pop
aad
sbb
lock
add
leave
aas
xchg
scas
and
and
xor
sbb
jmp
cwde
add
in
js
fstp
addr16
mov
aad
repnz
xchg
and
rcr
jo
ret
cld
mov
data16
cmp
arpl
jnp
ja
adc
out
dec
in
and
or
(bad)
push
xor
jmp
mov
inc
bound
cli
mov
jns
pusha
aaa
adc
ror
mov
xchg
push
addr16
enter
or
cmp
pop
xchg
fdiv
fiadd
inc
add
and
retf
mov
push
and
sar
nop
mov
leave
push
clc
clc
aad
cmps
push
pusha
cmp
idiv
dec
les
arpl
call
mov
das
das
das
nop
lock
inc
push
mov
mov
loop
adc
das
das
rcr
das
das
adc
das
das
das
das
sub
jmp
sti
dec
mov
xor
xchg
aaa
out
mov
sbb
jno
mov
sbb
pop
jmp
or
xlat
mov
inc
cmps
fiadd
bound
mov
movs
sbb
mov
fisttp
dec
mov
loop
imul
and
and
daa
outs
jae
xchg
shr
cmp
ret
xor
inc
cmp
js
out
scas
push
xchg
cs
ins
adc
in
int3
jg
and
sub
ret
mov
push
pop
cmp
adc
add
sub
push
mov
sub
sahf
aas
jmp
dec
(bad)
loopne
ffree
mov
push
call
adc
mov
je
sbb
jns
mov
lea
xchg
jno
pop
cs
dec
dec
jle
gs
pop
pop
mov
or
int
adc
cmp
mov
clc
imul
mov
loope
jmp
fbstp
cmp
sbb
mov
(bad)
mov
ins
push
mov
push
cdq
addr16
loopne
push
inc
sbb
cmps
add
sbb
xor
shr
jmp
add
movs
(bad)
sbb
mov
pushf
in
pop
jp
sub
hlt
dec
or
(bad)
xchg
rcl
jmp
mov
in
out
push
sbb
jns
xchg
(bad)
retf
push
inc
mov
mov
dec
add
mov
inc
push
hlt
sub
out
sbb
loop
jmp
js
jg
fidivr
adc
sahf
imul
lahf
(bad)
or
bound
ficomp
mov
mov
jmp
out
mov
das
das
pop
pushf
inc
in
das
das
das
das
jg
cmp
outs
inc
sub
das
mov
cs
das
ret
(bad)
ret
jge
sub
mov
xor
cmp
mov
inc
and
sbb
in
xchg
and
std
cwde
add
and
mov
cmc
or
sbb
pusha
int
not
scas
and
pop
mov
in
dec
sub
fwait
add
fmul
xchg
gs
and
dec
clc
lods
sbb
adc
cdq
jg
and
xchg
cs
sbb
add
jp
leave
mov
jb
sti
inc
inc
push
gs
jne
popa
jp
or
mov
pop
sub
shl
out
call
add
fdiv
shl
add
les
jb
pop
mov
cmovo
jae
fmul
lea
mov
xor
xchg
sbb
jge
lock
dec
jecxz
jne
movs
in
adc
movs
faddp
xchg
mov
pusha
and
in
cmc
mov
or
mov
sub
jl
dec
adc
ret
jecxz
and
mov
arpl
rcr
test
sbb
mov
mov
and
sub
les
(bad)
mov
inc
mov
sub
mov
pop
cli
pop
xor
dec
(bad)
arpl
(bad)
adc
jbe
cli
mov
outs
movs
inc
jp
aas
mov
imul
dec
adc
add
sahf
in
jmp
loop
dec
pushf
(bad)
jmp
rcl
rcr
xchg
dec
jae
mov
imul
inc
aad
popa
(bad)
ret
mov
add
sub
mov
xchg
mov
xchg
std
sbb
fwait
xchg
call
mov
out
out
es
das
das
stos
and
das
das
das
push
push
adc
das
das
inc
dec
jbe
jmp
inc
out
xchg
push
aam
cmp
movs
mov
xor
mov
adc
fst
jp
icebp
add
push
retf
repnz
mov
iret
cmps
test
mov
adc
je
out
dec
arpl
aas
add
je
mov
arpl
inc
hlt
sbb
dec
loop
cwde
sbb
xchg
cdq
adc
mov
mov
in
int3
ror
xor
imul
jmp
scas
or
or
mov
(bad)
mov
movs
pop
push
lock
pop
mov
mov
xor
add
or
(bad)
or
jae
jge
fbstp
jl
and
cli
pusha
in
mov
and
je
in
out
out
retf
fwait
imul
sbb
push
mov
repnz
ret
iret
add
fs
iret
scas
jns
iret
addr16
sbb
int
(bad)
(bad)
ds
mov
ret
mov
dec
sub
mov
sub
nop
dec
xchg
or
jnp
push
cmps
cmp
sti
push
xchg
scas
lahf
int
or
and
ret
push
mov
jge
(bad)
pop
sub
mov
jae
pop
ins
xchg
js
ret
stc
dec
cli
xchg
jg
repz
cdq
cmp
int
sar
jno
jb
not
jno
xchg
inc
mov
cmp
cmp
leave
call
jecxz
jnp
outs
sbb
daa
dec
jno
sti
inc
rcr
xchg
mov
mov
adc
movs
outs
mov
stc
sahf
fwait
(bad)
push
jge
push
std
lea
iret
lods
call
add
adc
jnp
jnp
out
out
out
mov
das
das
das
mov
adc
fisttp
scas
push
push
mov
das
repnz
adc
das
das
das
das
das
das
or
(bad)
mov
xchg
inc
inc
nop
cmp
lods
dec
mov
xchg
or
scas
sti
cmp
and
sti
push
(bad)
fbld
lock
push
lds
or
bound
adc
xchg
int
int
ins
push
pop
inc
push
mov
mov
dec
mov
sbb
jnp
push
jmp
pop
and
(bad)
jge
mov
pop
inc
mov
sbb
imul
mov
or
mov
dec
bound
pop
loope
ret
pushf
in
or
in
xor
ror
call
add
push
or
pop
into
pop
in
ins
mov
add
and
and
sbb
or
jo
rol
sub
mov
inc
les
ja
sub
mov
inc
sbb
adc
aas
call
add
lods
out
and
push
jne
sub
inc
sub
std
rcl
fwait
inc
jne
jns
push
push
fcomp
scas
pop
rcr
and
xchg
cli
nop
sbb
test
idiv
shl
jae
adc
scas
imul
jo
movs
out
xchg
sbb
call
and
call
gs
mov
shr
push
sub
sbb
mov
lods
sub
and
add
lfs
cmps
sbb
cdq
into
mov
sti
dec
mov
ins
loope
sbb
iret
pop
shl
sbb
aad
mov
mov
mov
cli
rcr
adc
mov
retf
movs
icebp
aas
dec
xchg
dec
repnz
mov
into
cld
(bad)
mov
bound
jmp
cmp
sub
ror
pop
cdq
cwde
loope
loopne
cwde
cwde
das
das
das
das
stos
cmps
pushf
and
retf
pop
movs
mov
ss
es
das
inc
dec
jbe
adc
das
das
stos
sahf
xchg
loop
clc
pop
jmp
div
cmp
retf
sahf
lea
mov
cmp
aas
or
out
push
inc
(bad)
push
rcl
daa
out
and
(bad)
lods
mov
ret
or
out
cmp
ret
lahf
cli
imul
je
daa
jb
push
popa
leave
cmps
out
shl
pop
jmp
ss
shr
cmp
push
inc
adc
xor
xchg
in
retf
sub
mov
dec
mov
mov
sub
(bad)
adc
mov
jp
sbb
mov
dec
out
add
push
jae
leave
or
test
and
fld
mov
xchg
nop
test
mov
ja
mov
outs
or
cmc
mov
adc
imul
jb
pop
xor
pusha
in
out
mov
xchg
and
pop
shl
and
inc
out
mov
fldl2t
retf
push
inc
mov
dec
jecxz
cmp
fldenv
outs
mov
jae
es
pop
sub
xchg
js
mov
rcl
jne
hlt
xor
mov
mov
adc
stos
jle
int
loopne
dec
adc
adc
ss
jns
jmp
push
sbb
cdq
test
mov
sub
mov
add
test
and
fdivr
push
or
cmps
popf
cmps
mov
push
inc
pusha
(bad)
in
fiadd
repz
and
inc
mov
mov
(bad)
pop
add
xor
or
test
inc
(bad)
outs
add
aam
add
and
enter
pushf
loope
cwde
mov
push
mov
adc
das
mov
cli
(bad)
into
(bad)
aaa
and
das
das
or
das
das
sub
sbb
aad
jnp
xor
push
test
mov
movs
in
jne
inc
cmp
or
fmul
and
jnp
cmp
movs
mov
and
pusha
retf
enter
push
push
add
jge
mov
into
push
pop
lds
and
xor
std
pop
cmp
inc
jl
and
xchg
xchg
iret
adc
inc
outs
sub
mov
not
dec
daa
pop
adc
ret
(bad)
out
adc
cdq
or
fild
pop
lock
dec
adc
bound
push
inc
jmp
dec
imul
mov
xor
mov
gs
add
repz
scas
sbb
cli
push
mov
sub
mov
push
mov
and
jmp
xor
add
inc
mov
cmp
jae
cmp
jne
push
call
jmp
mov
mov
xor
xor
cmp
jbe
mov
xor
mov
sub
mov
movzx
push
call
mov
push
cbw
push
mov
call
inc
cmp
jb
mov
mov
mov
mov
mov
cmp
jne
cmp
jne
xor
xor
xor
add
xor
mov
mov
mov
mov
cmp
jne
lea
mov
mov
xor
add
and
jmp
movzx
movzx
add
mov
mov
mov
sbb
mov
mov
push
mov
xor
cmp
mov
adc
mov
push
pop
div
cmp
jno
movzx
xor
jmp
movzx
add
mov
mov
adc
mov
xor
mov
xor
lea
mov
mov
cmp
jne
mov
or
sub
push
call
jmp
add
and
mov
inc
mov
cmp
jne
push
call
cmp
jb
movzx
not
mov
mov
xor
lea
xor
cmp
jne
pop
pop
leave
ret
out
cdq
in
cdq
in
call
lds
das
das
push
ds
sahf
jbe
inc
scas
adc
das
mov
cs
das
fmulp
das
das
call
ins
sbb
push
mov
mov
std
pop
test
inc
add
stos
imul
div
pop
or
test
adc
adc
or
out
cmp
ss
mov
xor
ret
push
push
aaa
mov
cmp
push
mov
jecxz
call
mov
clc
cmps
fdivr
cmp
scas
fsubp
outs
or
adc
pop
sbb
int
in
mov
int3
or
in
sti
movs
cmps
sub
pop
lock
and
inc
xor
sub
rol
jbe
pop
icebp
fcom
stc
test
mov
xchg
xchg
jo
ja
fcom
add
or
(bad)
mov
push
mov
cld
mov
jnp
stos
push
xor
jns
add
sub
sub
out
sti
pop
push
dec
int3
mov
add
(bad)
sahf
repz
test
push
(bad)
(bad)
inc
xor
scas
and
mov
mov
mov
mov
jp
inc
push
imul
jbe
mov
push
mov
out
loopne
jbe
and
ins
push
cmps
cmp
sbb
cmp
push
in
repz
mov
inc
pop
imul
sub
jb
out
into
imul
mov
push
sub
(bad)
leave
pushw
pop
pop
cmps
adc
xchg
inc
sub
adc
test
pop
cmp
adc
jb
cdq
xchg
push
into
std
cmp
cmps
lods
out
aad
add
add
(bad)
sahf
inc
arpl
les
inc
push
mul
sub
out
call
das
das
das
das
sbb
into
neg
push
vcomiss
das
das
inc
fisubr
das
sub
push
push
adc
das
das
push
pop
mov
fadd
xor
inc
xchg
out
popa
add
jecxz
pop
push
sbb
loop
and
push
cmp
iret
mov
jle
lea
movs
jg
jl
iret
push
add
cmp
imul
pop
repnz
xchg
cmp
mov
jo
jae
pop
mov
stos
pop
loope
add
mov
pop
mov
bound
dec
leave
out
jl
ds
or
mov
ffree
fwait
pusha
in
test
mov
daa
mov
pop
fwait
dec
mov
in
push
adc
test
lods
mov
mov
inc
mov
idiv
sbb
(bad)
xchg
add
ins
fdiv
int3
cdq
lods
pop
xor
and
or
mul
jae
and
push
outs
sub
enter
aam
mov
jae
shl
out
push
(bad)
jb
mov
inc
lea
sbb
cwde
fcmovu
jbe
jb
into
dec
sbb
lds
movs
cwde
or
ror
jg
ret
out
and
fwait
mov
pop
leave
dec
mov
mov
pop
inc
scas
push
mov
sbb
pop
mov
add
(bad)
inc
inc
lea
fs
adc
loopne
push
data16
inc
sub
jne
pop
pop
xor
dec
and
jnp
push
dec
push
mov
in
rcl
aaa
and
push
push
adc
cmp
push
sub
mov
mov
and
mov
add
mov
lea
(bad)
shr
hlt
sahf
sub
push
adc
(bad)
and
and
lods
xor
jnp
and
aam
das
xchg
(bad)
fild
jecxz
(bad)
cmp
jecxz
xchg
xchg
call
das
das
fmul
test
inc
push
push
push
cwde
xor
out
xchg
xchg
stos
fsubr
das
retf
das
adc
das
das
das
das
xor
adc
sub
shl
sub
cmps
repz
xor
arpl
jae
ds
push
jo
adc
out
pop
out
add
sahf
adc
js
mov
retf
pop
or
push
jne
jne
inc
fwait
movhps
rcr
out
jb
xchg
mov
dec
retf
xchg
sahf
test
fwait
adc
mov
dec
pop
movs
or
retf
sbb
and
inc
inc
cmps
out
test
jp
xor
pop
lods
xor
xchg
jne
(bad)
icebp
enter
sub
jns
sub
fsubr
ret
xchg
jmp
repnz
movs
stc
mov
(bad)
inc
jne
std
mov
xor
test
adc
xchg
add
dec
lds
and
(bad)
test
cmp
in
adc
inc
dec
repnz
aam
mov
dec
or
movs
imul
out
push
adc
add
mov
out
sbb
adc
cli
aaa
dec
adc
sub
push
cmp
imul
pop
pusha
jmp
and
xchg
mov
push
and
sbb
or
cmp
addr16
icebp
mov
and
clc
push
scas
hlt
inc
sbb
ss
push
fsubr
sbb
dec
inc
clc
test
cmps
mov
mov
mov
pop
std
jl
adc
leave
data16
aaa
fmul
sbb
sbb
sbb
and
ss
adc
and
add
stos
mov
retf
pop
into
js
pop
cld
mov
repz
inc
rcr
or
xchg
fs
jns
mov
inc
xchg
xchg
dec
test
popa
xchg
(bad)
mov
mov
das
das
adc
jmp
das
das
das
das
into
mov
push
push
sahf
fisubr
das
push
push
mov
das
inc
cli
rcr
mov
lods
cdq
jmp
psubq
pop
fcomp
ret
jmp
inc
xchg
pop
loope
inc
ss
sub
xchg
push
xlat
cld
dec
add
dec
int3
(bad)
and
push
(bad)
jmp
repnz
sub
and
inc
xlat
xchg
inc
mov
sbb
(bad)
int3
inc
dec
add
repz
jae
je
inc
sbb
call
lods
inc
mov
ds
enter
jnp
add
fstp
jl
or
jns
or
xchg
ins
jb
jg
mov
pop
daa
fisub
xchg
ds
ficomp
cwde
clc
push
cmps
shr
inc
xchg
sbb
xchg
mov
or
out
fwait
jmp
cmps
fstp
in
adc
fsub
daa
rol
test
fcos
xchg
out
lahf
cmp
movsx
icebp
or
repz
jbe
add
push
leave
loopne
push
pop
stos
or
dec
(bad)
cmp
xchg
scas
adc
dec
push
fcmovu
jo
pusha
jnp
mov
test
pop
shl
sub
sahf
ja
mov
push
or
jmp
call
and
rol
dec
pop
pop
or
(bad)
xchg
xchg
lods
mov
mov
cmp
push
lea
mov
lods
mov
adc
fwait
shl
mov
fwait
and
mov
xlat
dec
xchg
aam
into
xchg
loopne
jg
sti
mov
pop
nop
cld
mov
jo
jmp
mov
pop
and
shr
cwde
mov
das
push
loope
push
loop
mov
das
das
ret
das
das
das
xor
adc
das
das
dec
jb
mov
jmp
lods
add
push
sub
popf
test
fld
inc
pop
dec
inc
in
inc
and
stos
fld
inc
xor
retf
inc
inc
pop
dec
loope
mov
mov
aam
fld
xor
jne
inc
xchg
mov
adc
inc
or
sbb
in
cwde
into
cmc
(bad)
retf
pop
ret
repnz
cmp
jl
inc
sub
iret
outs
loope
mov
aam
aam
fwait
cmp
loopne
mov
js
fst
sub
fwait
mov
lahf
push
xor
inc
inc
xor
lock
mov
and
pop
or
cmp
fst
and
sub
fisubr
adc
xchg
aam
jb
jbe
fnstenv
repz
jmp
pusha
enter
push
pop
cmp
shl
fild
pop
push
push
addr16
push
dec
loop
or
fwait
pusha
inc
xchg
xor
mov
mov
cmp
pop
mov
and
pop
jb
movs
popf
pmulhw
mov
push
seta
xor
fs
inc
push
xchg
or
xor
fist
mov
arpl
mul
add
jecxz
cwde
jge
pusha
stc
add
cmp
clc
ss
mov
imul
inc
fninit
aaa
bnd
jb
add
test
in
add
fnstsw
sbb
push
adc
xor
push
jmp
add
aaa
sbb
test
aam
rol
sub
dec
js
pop
inc
retf
jo
call
push
jp
out
lds
push
pop
mov
sub
push
xchg
fwait
out
xchg
mov
mov
or
dec
push
stos
jl
scas
mov
shr
das
into
div
(bad)
adc
das
das
das
das
das
das
ds
jmp
in
dec
das
jb
iret
push
(bad)
mov
cwde
sahf
dec
cwde
dec
in
in
aam
nop
adc
popf
mov
or
js
clc
out
xchg
sahf
neg
test
lea
cmp
test
sbb
add
test
ds
inc
sub
(bad)
mov
retf
cmps
dec
dec
and
inc
pop
add
jle
sbb
es
lea
mov
mov
(bad)
test
scas
fwait
inc
xlat
mov
je
jl
cmp
retf
(bad)
outs
ins
movs
adc
test
stos
add
mov
jmp
fistp
xchg
clc
dec
mov
dec
pop
mov
xlat
loopne
cmps
push
das
cdq
jp
cmps
inc
fcomi
shl
std
add
mov
stc
ror
dec
cwde
fxtract
and
add
lea
js
js
popf
mov
popf
das
jne
call
add
je
xchg
sbb
stos
jnp
fbld
add
inc
clc
and
mov
cdq
jp
ins
xor
mov
add
lods
mov
pop
int
jecxz
shl
mov
ret
cmp
leave
mov
xchg
aaa
cmps
aam
pop
push
(bad)
jbe
mov
outs
pop
inc
enter
int3
test
lahf
mov
je
stc
pop
pop
cmp
int3
jbe
jle
mov
xor
adc
stos
fcomip
add
push
fisttp
and
(bad)
inc
mov
nop
add
cmp
sbb
pusha
enter
sti
psrad
mov
and
gs
les
xor
shr
das
jbe
jp
ret
das
mov
add
xor
out
cwde
mov
add
nop
or
mov
dec
fadd
in
fadd
add
push
push
push
mov
mov
xor
add
cmp
ja
mov
and
mov
inc
mov
cmp
jne
push
push
push
push
push
push
call
cmp
jb
mov
mov
xor
mov
mov
add
mov
add
mov
mov
mov
xor
mov
sub
add
mov
and
mov
xor
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
xor
mov
lea
stos
stos
stos
stos
cmp
jne
mov
mov
add
mov
mov
mov
mov
xor
lea
mov
cmp
jne
xor
or
adc
mov
jmp
mov
mov
sub
mov
ror
mov
mov
mov
mov
call
mov
mov
cmp
jge
movzx
movzx
or
mov
mov
mov
mov
mov
mov
xor
xor
lea
xor
mov
cmp
jne
lea
mov
mov
mov
sub
mov
xor
mov
div
mov
cmp
ja
and
mov
inc
mov
cmp
jne
push
push
push
call
cmp
jb
mov
xor
add
xor
mov
xor
mov
div
lea
xor
push
push
call
push
push
call
lea
mov
mov
mov
sub
mov
xor
mov
div
mov
cmp
jbe
mov
xor
or
cmp
jae
mov
xor
mov
div
lea
mov
imul
mov
mov
xor
add
movzx
push
push
push
call
test
je
mov
mov
cmp
jne
and
jmp
mov
inc
mov
cmp
jae
cmp
jne
push
call
jmp
push
mov
call
mov
mov
mov
mov
xor
div
lea
or
cmp
jne
mov
pop
pop
pop
leave
ret
out
xchg
fwait
mov
das
das
jmp
push
cmp
test
repnz
into
(bad)
cmp
das
das
das
adc
das
das
push
push
sbb
(bad)
and
daa
jae
cmps
pop
push
jnp
movs
in
cli
cmp
xor
es
and
mov
add
loop
cmc
mov
js
loop
fprem
dec
and
iret
push
mul
out
jp
push
es
aam
inc
xor
xchg
cmc
and
mov
out
add
enter
add
in
imul
sub
leave
jg
pop
xchg
mov
xchg
xor
movs
imul
mov
mov
mov
lods
xchg
fmul
sbb
call
call
push
cmp
or
pusha
inc
ins
rol
jg
loop
test
sbb
test
icebp
mov
popa
push
inc
dec
jmp
sbb
ror
sub
sbb
dec
cmps
mov
ret
call
inc
jne
or
ins
loope
sbb
mov
sub
jmp
jnp
mov
xchg
cmp
test
or
dec
xor
or
js
xchg
loop
into
mov
sbb
or
pop
test
mov
ficom
and
xchg
push
cmp
stos
movs
daa
dec
adc
inc
pop
scas
jg
fisttp
cwde
ret
es
xor
xor
mov
jl
ret
popa
ss
dec
enter
mov
dec
fcomp
push
or
inc
sbb
xchg
hlt
mov
push
mov
fstp
mov
sub
js
into
(bad)
xlat
jmp
inc
stos
repz
hlt
dec
aam
aaa
add
mov
scas
and
je
jmp
in
mov
repz
push
popa
das
das
xor
xor
jl
jbe
cmps
popa
xlat
das
das
mov
out
adc
das
das
(bad)
shr
das
xchg
test
push
inc
adc
scas
or
(bad)
mov
or
mov
daa
je
pop
movs
bound
add
and
dec
gs
pusha
or
fwait
repnz
sub
call
mov
rcl
popa
mov
mov
pop
xchg
mov
adc
dec
rol
add
cli
rcl
imul
enter
dec
xor
mov
mov
retf
sbb
adc
add
ss
adc
cdq
mov
push
out
xchg
dec
add
inc
fild
mov
xchg
scas
add
dec
adc
push
lahf
gs
jmp
mov
jl
ficom
and
fist
xchg
sbb
sub
repnz
pusha
xor
xchg
add
pop
xchg
inc
fisubr
or
mov
loope
inc
int3
xor
les
mov
push
adc
mov
mov
or
pop
imul
fiadd
cwde
inc
retf
wrpkru
(bad)
and
xchg
cli
loope
fld
fcmovnu
mov
mov
aad
in
cmp
cwde
jae
jecxz
(bad)
cmps
push
push
inc
sub
gs
jge
jg
test
cmp
enter
mov
shl
movs
outs
and
in
jb
neg
push
mov
jg
call
mov
test
mov
sti
inc
mov
imul
sub
xchg
push
pusha
push
pop
xchg
ins
aam
pusha
inc
movs
out
jmp
mov
mov
jae
jmp
cs
mov
loope
mov
das
mov
xchg
add
jmp
das
das
das
das
push
aad
das
push
bound
or
cs
das
dec
push
xchg
sub
lahf
sti
add
or
mov
fstp
inc
ror
or
hlt
nop
outs
lods
adc
or
cmp
stos
(bad)
xlat
mov
cmp
dec
out
pop
daa
inc
mov
dec
lods
pop
dec
(bad)
push
dec
mov
mov
mov
adc
xchg
mov
add
xor
mov
shr
cld
retf
call
sahf
xchg
in
mov
push
sbb
sahf
sub
daa
mov
call
movs
lods
test
and
out
xlat
(bad)
mov
cmpps
pushf
(bad)
call
cs
or
dec
in
ins
(bad)
push
pop
cmp
mov
sub
js
xchg
daa
shr
jbe
ds
ins
je
bound
sbb
sbb
mov
mov
fcmovne
cmp
sub
daa
ins
sub
adc
push
jmp
arpl
and
mov
out
and
ficom
in
push
in
cmp
mov
fs
xor
and
jnp
mov
inc
scas
mov
loop
repz
xchg
leave
jb
retf
sbb
adc
out
leave
jbe
inc
hlt
pop
cmp
sub
xchg
push
dec
cdq
mov
(bad)
push
dec
gs
inc
or
sub
fld
pushf
ss
xchg
mov
leave
(bad)
cmp
cmp
aam
ret
sub
xor
movhps
mov
and
aas
mov
pushf
in
xor
or
out
aad
jle
std
mov
arpl
sub
and
stos
pushf
or
aad
xor
adc
xchg
out
cwde
mov
das
das
clc
adc
inc
inc
push
push
aas
jecxz
jg
mov
das
cs
adc
das
das
das
das
ss
popf
ds
mov
outs
mov
out
ins
or
rcr
add
or
mov
push
cmp
cs
andps
fist
bound
iret
sub
push
sar
jno
adc
lock
loopne
into
sbb
and
adc
test
mov
cmp
das
cmps
out
ins
push
or
out
xor
push
sbb
xchg
retf
aas
add
xlat
loop
scas
and
inc
inc
sub
cmp
jb
mov
test
xor
scas
mov
sub
xchg
out
dec
add
dec
inc
sbb
ds
pop
mov
pop
int
repz
(bad)
sub
jecxz
cmp
add
pop
push
jge
fdiv
jo
push
and
or
mov
jl
sub
shl
ficomp
cmp
fcomp
gs
jne
ror
ins
xchg
ins
mov
sbb
int
push
mov
in
hlt
imul
xchg
pop
or
or
mov
repnz
pop
sub
call
outs
push
fnsave
imul
jae
ss
jl
pavgb
cwde
cmp
frstor
add
aaa
xchg
inc
outs
jp
outs
dec
aad
stos
ret
in
or
mov
xor
xchg
jecxz
stos
pop
fcom
retf
ret
sub
mov
idiv
in
mov
cli
sbb
movd
psubsw
shr
sbb
out
sbb
dec
xchg
mov
push
cmp
(bad)
int3
(bad)
fadd
pop
xchg
(bad)
fs
rcl
call
mov
das
das
cmps
fdivr
pop
das
das
das
das
mov
mov
ds
data16
leave
das
das
cmps
cmps
mov
ret
(bad)
jmp
xchg
loop
mov
pop
(bad)
push
or
push
(bad)
in
cld
pop
add
jnp
imul
jl
test
mov
sbb
cmps
cli
imul
shl
push
or
out
mov
sub
dec
enter
push
jbe
adc
in
sbb
xor
mul
ds
mov
dec
bound
inc
mov
sub
xchg
xchg
sub
call
ret
cmp
stc
loop
jecxz
jmp
mov
push
sbb
add
pop
daa
sbb
cmp
div
js
mov
rcl
pop
mov
xor
cli
loope
int
or
stos
adc
arpl
inc
sub
mov
jle
dec
shr
or
sub
push
enter
fbld
push
xor
dec
sub
or
jl
pop
fidiv
fild
push
add
out
jno
xchg
mov
pop
or
push
call
ins
popa
cli
lods
adc
pop
mov
sti
(bad)
mov
lods
lea
push
push
add
sbb
add
fiadd
movs
pop
pop
dec
rcr
adc
xor
xor
push
pushf
and
and
mov
call
pop
xchg
adc
int
cs
lods
adc
stos
into
or
pop
mov
cmp
cwde
jnp
or
(bad)
push
dec
jg
cmc
loopne
xchg
xchg
adc
movs
xchg
fwait
mov
test
jns
jg
retf
inc
pop
ret
leave
enter
lods
fs
cdq
lahf
out
mov
das
das
mov
sahf
sahf
sar
das
das
ror
das
das
das
das
push
cmp
cs
das
jb
jbe
fld
pop
(bad)
stos
test
retf
aam
lock
sbb
ja
jne
adc
data16
scas
fldenv
push
test
jl
test
mov
xchg
fstp
jns
ret
fdiv
jns
cmp
adc
dec
mov
mov
cmp
cmp
inc
imul
iret
pushf
jge
mov
stos
dec
or
stc
stos
dec
dec
mov
jg
jmp
cdq
cmp
lock
or
loope
hlt
dec
xchg
sub
cmp
imul
fwait
cmp
adc
rcr
pop
ret
adc
in
sub
cdq
adc
dec
pop
push
clc
xchg
icebp
shl
sbb
dec
out
movs
pushf
cmp
repnz
sub
xchg
adc
mov
ins
aam
cmp
sbb
ss
popa
retf
add
fs
rcr
inc
or
dec
cld
mov
lods
retf
dec
add
or
jbe
test
in
add
test
scas
(bad)
inc
addr16
or
std
test
lock
(bad)
pop
mov
dec
sbb
adc
fstp
xchg
out
aam
dec
adc
ins
aaa
cmp
adc
pop
fisubr
adc
es
inc
inc
and
jo
mov
pop
cmp
mov
or
adc
cwde
cmp
sbb
sti
adc
clc
and
out
pop
arpl
sahf
cmp
jg
push
daa
in
out
js
aad
fstp
mov
(bad)
sar
dec
test
mov
jle
sub
push
push
xcrypt-ofb
cmps
out
call
mov
adc
ret
fcmovne
sub
mov
inc
cwde
xchg
out
xchg
mov
das
leave
cmp
push
sbb
and
push
push
mov
das
repnz
cli
fimul
das
das
das
shl
cwde
test
das
xor
push
sbb
fmul
dec
adc
sub
popf
or
sbb
imul
repz
into
scas
pop
sbb
and
xor
push
pop
sub
jp
jo
add
push
xchg
fdiv
out
inc
clc
pusha
cmp
