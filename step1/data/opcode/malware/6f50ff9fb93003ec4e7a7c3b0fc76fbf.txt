mov
jb
retf
and
mov
add
xchg
jno
inc
push
jbe
push
push
outs
push
push
mov
add
mov
ret
and
cs
cli
pop
jle
inc
xor
js
xor
add
mul
(bad)
jbe
cmps
(bad)
je
std
jns
inc
pop
mov
push
mov
int
dec
push
jbe
dec
ds
sti
mov
jle
ror
sub
fldcw
xchg
std
inc
or
fadd
mul
fs
outs
xor
ins
mov
or
add
and
pop
mov
sub
loope
xchg
(bad)
push
fs
(bad)
outs
jb
inc
cmp
or
into
lds
jle
or
test
lea
and
cmp
ja
push
inc
into
cmc
hlt
or
or
xchg
add
rcl
adc
or
mov
cmp
(bad)
addr16
or
xchg
dec
aaa
inc
xor
lds
xchg
inc
aaa
inc
xor
rcl
push
add
repz
pop
dec
aaa
inc
xor
aaa
inc
xor
mov
pop
ins
and
mov
and
jl
cmc
cld
or
xchg
lods
sti
int
add
ss
adc
sub
js
div
or
mov
icebp
(bad)
(bad)
or
mov
sbb
sti
int
inc
out
inc
sub
outs
and
push
(bad)
jns
int
inc
or
inc
add
into
lds
jle
add
jne
xchg
xchg
inc
pop
in
add
jnp
mov
jle
add
jle
or
pop
sti
add
std
inc
or
mov
xchg
xchg
mov
bound
xchg
js
xchg
mov
aaa
inc
xor
add
mov
ins
and
add
push
into
lds
or
add
xchg
sub
and
xor
xchg
sub
loope
sub
ins
test
mov
jle
add
xchg
xchg
push
sub
popa
fisubr
pop
cmp
sbb
or
jle
fstp
pop
add
ss
outs
xor
scas
mov
jle
and
into
lds
cmp
add
xor
inc
xor
xchg
xor
add
sub
lea
xlat
in
js
xchg
mov
xchg
jle
(bad)
xlat
(bad)
lahf
dec
xor
stos
inc
jle
push
sub
mov
retf
lea
test
xor
outs
xor
xchg
(bad)
out
and
ds
and
xchg
mov
xchg
aad
add
add
mov
fst
in
add
sti
jae
int3
adc
add
sti
jg
int3
adc
add
jmp
or
push
fidivr
add
dec
jno
xor
pop
cmps
jo
or
int
outs
and
jle
xchg
jb
sti
int
xchg
dec
inc
inc
fldenv
ret
imul
outs
mov
or
mov
xor
pop
imul
cmp
add
mov
add
repz
repz
adc
ins
or
jle
add
jle
jno
xor
add
test
xor
jo
dec
inc
out
or
repnz
or
add
or
ret
dec
jle
(bad)
hlt
xor
add
ja
jo
dec
inc
out
and
cli
cld
xor
cmp
push
ret
jns
xchg
mov
inc
push
mov
sub
mov
mov
add
mov
ja
push
ret
mov
xchg
xchg
inc
jb
jno
xchg
sar
jle
ret
repz
mov
lahf
sti
inc
push
jno
adc
sti
inc
outs
js
into
xchg
(bad)
jge
jle
ret
jnp
sub
xchg
mov
add
mov
(bad)
out
cmp
jg
aad
ret
mov
ror
popa
sub
pop
inc
inc
retf
call
mov
mov
or
inc
xor
loop
xor
loop
xor
ret
mov
jg
aaa
or
inc
xor
out
jbe
ret
xchg
cmp
add
jno
adc
push
jno
cmp
js
mov
xchg
xchg
inc
(bad)
cmc
ret
cmp
aaa
cmc
ret
inc
aas
cmp
jle
repz
xchg
inc
ret
cld
jne
jbe
cli
add
jno
inc
inc
jbe
add
(bad)
repz
dec
sti
jb
mov
cmp
dec
cmp
xor
fstp
mov
xchg
add
jle
aas
inc
jle
push
sub
ds
ficom
xor
sti
mov
jmp
sti
int3
cmp
mov
std
dec
sti
jb
mov
cmp
mov
xchg
int
ins
dec
mov
xchg
mov
inc
seto
jg
sti
int
mov
or
sti
jg
int3
or
sti
(bad)
sti
int3
or
sti
mov
or
xor
xchg
int
or
ins
and
int
sub
loope
xchg
xchg
push
sub
ds
sti
or
mov
clc
mov
xor
dec
jle
(bad)
dec
jbe
xlat
jg
xchg
push
mov
test
into
mov
std
inc
gs
mov
pop
xchg
(bad)
test
lea
push
inc
into
and
pop
sti
mov
xlat
push
sub
ds
jnp
mov
dec
inc
lea
mov
fstp
retf
inc
jle
(bad)
dec
jbe
xlat
jg
xchg
push
mov
test
into
mov
std
inc
gs
mov
mov
xor
jg
ja
js
inc
retf
mov
xchg
and
bound
sub
pop
or
es
jb
mov
dec
inc
lea
js
inc
retf
mov
cmp
(bad)
enter
jg
mov
inc
jnp
les
mov
mov
jnp
jne
xchg
sti
mov
xlat
push
sub
cmp
push
xor
xchg
ret
int
repz
jle
jno
push
fxam
jo
shr
je
js
mov
jb
push
pop
and
xor
outs
aaa
iret
cmp
popa
sub
iret
cmp
mov
cmp
cmc
and
pop
sti
mov
xlat
push
sub
ror
data16
mov
xchg
aad
ret
mov
stos
jo
jle
ret
in
add
sbb
add
jle
out
jle
mov
lds
inc
ret
xchg
sti
mov
aam
gs
repnz
or
jo
push
loop
inc
xor
setae
and
xor
or
int
(bad)
(bad)
je
js
ss
lahf
sti
popa
jbe
add
dec
or
int
(bad)
(bad)
retf
lea
push
ret
fisub
fstp
mov
imul
sub
pop
cmp
int
(bad)
retf
(bad)
cmc
std
mov
add
jle
cmps
inc
jle
mov
xlat
ins
and
test
jg
(bad)
cmc
dec
inc
or
mov
or
push
pop
into
inc
xor
outs
xor
ret
xchg
shl
push
mov
loop
lea
mov
inc
dec
push
hlt
mov
adc
inc
xor
cmp
imul
mov
iret
dec
xor
les
movs
mov
cmp
(bad)
out
cmp
test
int
mov
ins
and
int
sub
loope
push
xchg
xor
push
lds
jbe
push
push
fcomp
cmps
push
(bad)
mov
sti
mov
jle
sti
xor
add
jle
movs
dec
retf
or
mov
mov
xchg
cmc
ret
push
xor
inc
jle
xchg
loop
inc
xor
sbb
loop
inc
xor
or
int
pop
xor
mov
add
cmp
int
js
int
mov
lods
or
add
jg
not
cmp
mov
outs
das
leave
cmp
int
xchg
std
mov
add
and
icebp
cmp
test
push
add
repz
cmc
ret
adc
push
cs
add
cli
mov
xor
jns
jle
sbb
sbb
mov
sti
mov
jle
sti
xor
sub
sti
pop
sti
int3
or
mov
jle
inc
mov
xchg
jb
std
mov
add
add
inc
xor
ret
mov
in
add
xor
xor
push
fadd
cmps
push
(bad)
push
mov
or
retf
in
xchg
add
inc
xor
ret
repz
xchg
xchg
(bad)
aad
add
je
mov
jp
(bad)
or
cmp
jmp
cli
int
inc
xchg
xchg
push
sbb
sar
(bad)
ja
xlat
(bad)
cmp
jle
add
cmp
repnz
(bad)
icebp
repz
int
js
xchg
loop
inc
xor
or
int
adc
jle
inc
into
ja
jno
mov
xchg
int
xchg
out
cmp
mov
xchg
inc
sbb
cmp
sbb
add
jg
ja
mov
sub
pop
loop
inc
xor
inc
cmp
repz
add
int
js
icebp
and
pop
sti
mov
imul
sar
mov
jbe
xor
repnz
and
add
cmp
or
ja
jno
mov
xchg
lea
cld
lds
inc
out
dec
div
jmp
(bad)
ja
or
xor
mov
popa
into
jle
inc
cmp
ret
pop
xor
out
xchg
nop
cmp
in
sub
(bad)
(bad)
retf
lea
push
ret
hlt
jnp
cmps
jo
xchg
pop
mov
cmp
jnp
mov
jnp
inc
sub
push
xchg
cmp
cmps
push
retf
fnstenv
push
ret
mov
jnp
add
push
inc
retf
out
cs
jo
inc
je
xor
or
jnp
inc
mov
ss
loop
xor
jg
retf
inc
mov
dec
xchg
mov
js
int
loop
xor
cli
clc
xor
mov
inc
jbe
xor
ds
loopne
xchg
add
ret
mov
jle
add
jp
add
jle
add
jle
ins
xor
mov
call
cld
pop
jl
add
jle
in
add
xchg
cmp
sti
jb
mov
(bad)
lock
mov
(bad)
push
int
(bad)
sti
inc
xchg
pop
jle
outs
xor
ret
adc
ins
ret
add
or
pop
adc
jecxz
cmp
ja
push
ret
int
jg
enter
ins
and
int
sub
loope
(bad)
xchg
xor
aam
gs
sub
aas
mov
jle
repz
add
icebp
inc
jle
ret
js
int
out
loopne
cmp
in
push
adc
sti
int3
or
sti
bound
fimul
cmp
(bad)
jmp
in
sbb
xchg
adc
add
test
(bad)
jmp
enter
mov
outs
out
leave
cmp
scas
ffree
add
or
outs
jp
add
popf
push
add
cmp
jo
xlat
(bad)
dec
mov
or
lea
test
cs
sar
(bad)
mov
js
int
or
int
mov
lea
mov
cmp
jle
(bad)
call
sti
int3
adc
add
cmc
mov
inc
into
ja
or
push
xlat
movs
jae
js
repnz
int
inc
or
mov
js
int
add
int
js
data16
add
cmps
scas
fdivr
cmp
jo
xlat
(bad)
js
cmp
bnd
mov
mov
cmp
int3
add
stc
int
js
cmp
jle
add
xor
add
int
js
fcmovu
jno
int
inc
or
fdivr
int
inc
or
sti
and
int3
cmp
add
jno
adc
jns
bound
xlat
movs
jae
outs
call
xchg
mov
js
int
add
faddp
add
std
and
inc
jmp
jo
xchg
mov
xchg
inc
jle
outs
xor
push
in
jle
push
xchg
aas
xchg
sbb
mov
int
xchg
pop
in
add
xor
cmp
int
js
fidiv
sti
int
inc
or
cmp
mov
js
int
xchg
adc
ins
repz
lds
cs
inc
xor
add
ds
js
xor
and
out
mov
pop
outs
iret
mov
xchg
mov
js
xor
outs
xor
sub
jo
out
push
xchg
aas
xchg
xchg
mov
mov
mov
int
xchg
pop
in
add
xor
cmp
int
js
(bad)
jb
int
inc
or
cmp
mov
js
int
xchg
adc
ins
xchg
sahf
lds
cs
inc
xor
add
ds
js
xor
and
out
mov
pop
outs
inc
mov
xchg
mov
js
xor
(bad)
jmp
cli
int
inc
outs
xor
adc
jo
out
push
xchg
aas
xchg
and
js
mov
mov
int
xchg
je
sbb
jg
xchg
cmp
ins
(bad)
faddp
add
(bad)
jae
int
inc
or
cmp
mov
js
int
xchg
adc
ins
dec
sahf
lds
cs
inc
xor
add
ds
js
xor
inc
pop
jg
mov
pop
outs
stos
mov
sti
int
xchg
adc
ins
inc
sahf
lds
ret
jp
int3
adc
sti
mov
mov
int
xchg
je
sbb
(bad)
retf
rdmsr
jle
mov
xor
xchg
ret
xor
jle
or
xchg
das
dec
sbb
je
cmp
add
xor
jecxz
jo
push
fadd
cmps
push
(bad)
hlt
sti
jp
int3
add
add
jle
sub
cmc
add
int
js
mov
test
add
sti
aas
sti
int3
adc
cli
int
or
int
cmps
lea
push
fdiv
cmps
push
(bad)
mov
jnp
cmp
jle
mov
xor
je
jp
xchg
int
add
mov
or
icebp
push
stc
add
sbb
stos
cmp
xchg
cmp
mov
adc
cli
int
or
jmp
sti
bound
fadd
popf
push
xor
cmp
jo
or
mov
cmc
mov
add
jle
inc
into
ja
or
repz
int
js
mov
adc
aam
jle
lea
push
fdiv
cmps
push
(bad)
mov
jnp
cmp
jle
sbb
cmc
add
int
js
mov
test
cmp
lea
xor
sub
adc
cli
int
or
int
mov
and
jle
repz
add
std
cli
clc
xor
les
jle
mov
cs
fiadd
mov
inc
into
neg
jmp
or
jmp
jle
xchg
jle
mov
cmp
xor
add
int
js
fimul
add
std
inc
or
add
out
pop
jle
test
mov
add
xor
mov
cs
popa
sar
mov
outs
cmp
xchg
sbb
add
cmc
add
int
js
mov
js
int
add
mov
add
ss
add
fisttp
mov
cmp
aad
add
je
mov
adc
sub
jno
imul
xchg
int
push
(bad)
int3
xor
sti
int3
adc
add
sti
sbb
int3
adc
cmp
jle
add
cmp
bnd
sub
jle
test
xor
add
repz
sti
and
int3
adc
push
bnd
sti
xor
xchg
jle
in
jle
outs
xor
fimul
icebp
sbb
inc
cmp
call
sti
int3
or
sti
(bad)
xor
js
fisubr
jecxz
jp
add
lea
mov
std
imul
add
jle
not
cmp
inc
js
inc
test
add
mov
and
int
inc
xchg
xchg
mov
xchg
std
and
mov
adc
add
sti
pop
sti
int3
adc
cmp
jle
add
cmp
bnd
adc
jle
xchg
jle
cmp
xchg
sti
out
int3
adc
lock
js
mov
js
int
or
int
cmps
lea
push
fcomp
cmps
push
(bad)
mov
jnp
cmp
jle
xchg
jbe
cmp
ret
out
sti
int3
add
pop
int
js
int
out
sti
int3
sub
div
ret
jne
cmp
js
icebp
fmul
pop
int
js
cmp
jle
add
jle
add
jp
mov
cmp
int3
adc
add
sti
jp
int3
adc
add
mov
js
int
dec
sti
jb
mov
lea
jmp
jle
sti
xchg
js
int
add
cmp
sti
jg
int3
or
cli
int
outs
fwait
pop
jle
xchg
jb
add
adc
add
sti
jp
int3
adc
add
mov
ret
std
cmp
inc
jle
xor
jbe
fadd
popf
push
sub
js
call
sti
int3
cmp
cli
int
or
xchg
cmp
fs
sub
jbe
sbb
sti
arpl
int3
cmp
clc
int
add
ret
sti
xor
add
cmp
jle
and
jle
repz
add
cmc
add
int
js
mov
std
cmp
int
js
inc
jb
and
cmc
mov
fs
mov
xor
mov
int
or
int
(bad)
(bad)
mov
js
int
or
int
(bad)
(bad)
mov
js
int
or
int
(bad)
(bad)
jmp
in
cmp
dec
js
cmp
fcomp
mov
push
mov
cli
xor
push
sbb
movs
xor
add
sbb
and
jle
add
xchg
xchg
push
sub
popa
fidivr
sbb
stos
jle
xchg
ja
xchg
jle
inc
(bad)
mov
add
push
fild
xor
cvtps2pd
xchg
jp
jbe
cmp
xor
fcmovu
dec
inc
inc
into
cmp
ja
xchg
jle
inc
sar
ret
push
jg
mov
dec
jns
inc
mov
jnp
int
js
ins
and
jecxz
xor
add
mov
add
sub
loope
sub
push
push
pop
ror
ja
push
ret
pop
(bad)
xor
adc
outs
xor
out
jb
in
add
jle
imul
(bad)
cmc
sub
push
jle
pop
sti
mov
imul
sub
cmp
sti
cmp
mov
ret
repz
jle
fnsave
jle
(bad)
ret
(bad)
hlt
std
mov
add
pop
mov
xchg
jbe
inc
xor
add
jecxz
add
jle
add
jnp
popf
jae
add
push
int3
jae
xchg
cmp
aas
xchg
xor
cmp
jle
add
icebp
hlt
push
xor
and
dec
inc
fistp
test
add
and
jmp
dec
mov
add
add
xor
pop
or
loope
add
mov
push
xor
add
mov
mov
xor
fwait
jae
ins
add
jnp
fwait
jae
push
hlt
lds
inc
in
aaa
jl
add
jnp
fwait
jae
outs
(bad)
xor
sti
aaa
or
inc
xor
xchg
jns
(bad)
fist
add
push
xor
data16
outs
daa
inc
stos
aas
xchg
fisttp
sti
int
sbb
mov
fstp
add
push
and
test
data16
jp
or
cmp
xor
add
mov
xchg
xor
mov
ds
inc
xor
(bad)
movs
jae
outs
out
cmp
xor
add
mov
xchg
hlt
dec
add
jae
test
jle
mov
cmp
xor
add
xchg
xor
mov
jnp
popf
jae
test
jle
(bad)
int3
cmp
xor
xchg
hlt
dec
inc
fstp
add
fild
jae
xchg
or
mov
in
add
mov
ja
push
ret
lahf
fwait
jae
(bad)
in
sar
add
xchg
sbb
std
inc
push
xor
fwait
jae
outs
retf
xchg
xor
xchg
jb
outs
mov
fsubp
mov
mov
stos
xor
sti
aaa
or
inc
xor
cmp
xchg
div
ret
xchg
inc
sbb
jge
mov
jle
xor
xor
or
loope
add
inc
cmp
xchg
nop
cs
inc
xor
add
lds
mov
mov
and
add
add
cmp
jle
add
inc
js
mov
xor
dec
inc
(bad)
add
lds
push
es
aaa
inc
sbb
xchg
movs
sti
aaa
inc
sbb
div
ret
test
data16
ds
or
mov
xchg
xor
xchg
aaa
data16
mov
mov
fdiv
movs
jo
push
hlt
sbb
xor
and
jle
add
cmp
jnp
movs
jo
add
xor
enter
mov
add
dec
test
jno
add
add
jno
inc
leave
inc
pop
add
jle
setae
push
inc
xor
or
xchg
xor
mov
jl
inc
sub
jns
js
dec
mov
(bad)
xchg
jb
test
jno
cli
(bad)
or
inc
xor
push
hlt
xor
(bad)
mov
fsub
jae
mov
xor
add
test
xor
cli
push
or
inc
xor
hlt
sbb
mov
test
jb
or
cmp
aas
xchg
aaa
jb
inc
xor
(bad)
xchg
jb
mov
add
movs
push
jmp
mov
test
jb
or
lods
xchg
cmp
sti
aaa
jb
inc
xor
mov
add
out
mov
retf
mov
jp
inc
xor
inc
ins
and
bound
sub
mov
mov
popa
lea
push
ret
repz
jle
or
inc
and
pop
mov
push
(bad)
fadd
fstp
movs
jo
out
sub
cmp
push
fimul
fadd
fst
inc
cmp
repz
ret
mov
xchg
sub
add
fnsave
jae
out
dec
mov
push
fidivr
fadd
fnsave
pop
mov
push
fimul
add
fstp
movs
jo
fcomp
mov
imul
mov
mov
mov
lds
cli
cmp
lods
bound
xchg
ja
lahf
add
jle
fdiv
cmps
push
(bad)
mov
imul
das
lea
inc
inc
(bad)
xchg
jmp
jle
xchg
xchg
aaa
or
inc
xor
loop
xor
pop
xor
push
stos
xchg
ja
xchg
jle
inc
out
jg
add
(bad)
loope
xor
out
cmp
(bad)
icebp
repz
xchg
inc
retf
cmc
cmp
push
xor
mov
lds
inc
ret
ja
xchg
jle
popa
mov
jns
repz
jnp
add
lea
mov
xlat
ins
xor
add
cmp
int
jae
jae
push
fadd
cmps
push
(bad)
mov
jle
inc
xchg
cs
add
jle
add
js
(bad)
xchg
sbb
jle
inc
xchg
cs
xchg
repz
adc
in
nop
pop
xchg
jle
add
or
outs
xor
outs
ss
sti
inc
call
stc
xchg
test
jle
sti
aaa
or
inc
xor
ret
xor
push
int
jae
jae
or
(bad)
xchg
add
sti
mov
imul
cmp
xor
or
(bad)
test
lea
push
inc
into
cmc
ret
cmp
jg
push
dec
retf
lock
lea
push
inc
ficom
outs
xor
mov
xlat
mov
xlat
sti
inc
xchg
add
cmp
pop
cmp
lods
aas
xchg
mov
jnp
jb
xchg
icebp
sub
loope
sub
add
cwde
(bad)
retf
(bad)
cmc
add
sti
int
xchg
fwait
jae
aas
jecxz
jle
repz
ret
mov
push
loope
xchg
mov
sub
cmp
fimul
int
repz
jle
sti
cmp
add
add
xor
scas
or
xchg
or
pop
jno
xchg
or
xchg
jno
push
xor
(bad)
ja
or
jnp
adc
xchg
cmp
cmp
cmp
enter
ret
cmp
mov
xchg
test
or
add
std
ins
push
cmp
mov
add
xor
adc
inc
jno
idiv
fidivr
mov
js
in
xor
jno
jno
inc
int
inc
or
cmp
push
fisub
fild
jno
push
int
push
adc
cmp
push
bound
push
inc
retf
sti
mov
ins
add
scas
test
std
outs
add
outs
or
jnp
cld
mov
or
jg
add
xchg
cmps
or
pop
cmp
lods
cmp
jle
or
dec
js
int
xor
xchg
idiv
mov
add
mov
test
idiv
fidivr
cmp
repnz
jno
add
out
jo
inc
cmp
jle
btc
mov
(bad)
jmp
add
jns
add
jg
add
(bad)
mov
(bad)
retf
cmp
repnz
mov
(bad)
mov
(bad)
retf
pop
mov
add
mov
or
jp
cmp
jle
add
jns
in
xor
jno
std
dec
sti
mov
ins
add
scas
xchg
mov
or
repz
pop
aaa
jg
xchg
jp
push
retf
add
jle
add
inc
mov
cld
jp
mov
(bad)
retf
push
mov
add
push
js
jno
idiv
fidivr
mov
js
cmp
mov
jo
inc
js
xor
sbb
xlat
fld
cmc
rcl
sub
test
add
jle
or
and
pop
sti
mov
imul
sub
sti
aaa
or
inc
xor
repnz
bound
cmp
repnz
xor
jb
(bad)
js
xor
ja
cmp
ds
outs
pop
xor
ret
outs
in
xor
xchg
je
add
lds
pushf
test
jb
mov
mov
xchg
add
int
fdivrp
aaa
or
inc
xor
add
jle
and
xchg
xchg
or
out
cmp
pop
pop
ja
or
add
cmp
ss
mov
xchg
mov
add
ret
sbb
cmc
xchg
xor
fidiv
scas
push
inc
(bad)
repz
sbb
cmc
shl
mov
out
mov
std
dec
sti
mov
scas
push
(bad)
xor
lea
inc
add
xchg
or
jg
push
retf
sti
aaa
or
inc
xor
dec
sti
sbb
xchg
mov
or
test
mov
outs
inc
out
xor
sti
int
inc
or
fmul
icebp
sub
loope
and
pop
xor
push
gs
pop
std
int
inc
adc
xchg
aas
pop
xor
add
jle
ja
mov
js
hlt
sti
je
int
xchg
xor
mov
xor
xchg
or
pop
cmp
push
cmp
jg
push
mov
fs
add
sti
mov
and
push
inc
jl
pop
cmp
cmp
int
dec
or
cmp
push
fcmovbe
fiadd
cmc
adc
jmp
popf
jae
mov
int
dec
sbb
cmp
push
repz
test
int
mov
(bad)
out
add
fild
cmc
adc
imul
rcl
add
mov
pop
mov
mov
js
int
add
fld
adc
fld
add
daa
pop
push
inc
xor
sub
adc
fld
or
daa
cs
inc
xor
adc
in
cmp
xor
cmp
in
cmp
xor
cmp
cmp
int
xor
xchg
int
push
vpunpckhbw
and
pop
add
jle
add
sti
jae
int
mov
fstp
add
jle
push
fcmovbe
fild
test
xor
xor
jne
inc
add
jle
aas
scas
mov
int
push
mov
outs
pop
push
xchg
aaa
or
inc
xor
and
fld
xchg
push
js
xor
mov
xchg
js
int
pop
fcmovne
sub
div
inc
into
ja
jo
std
and
jecxz
fcmove
sub
xchg
test
sar
into
cmc
mov
mov
cmp
ret
jg
int
repnz
ss
jbe
(bad)
js
xor
jbe
neg
xor
add
sti
pop
fcmove
sub
jle
push
mov
jno
xchg
mov
int
fiadd
int
xchg
in
cmp
or
imul
or
mov
jle
mov
mov
rol
xchg
mov
cmps
lea
int
gs
mov
xchg
int
and
fld
jae
int
inc
out
neg
fstp
xor
clc
mov
imul
or
repz
test
repz
test
jg
xchg
mov
test
mov
push
lock
xchg
add
sti
int
repnz
pop
and
inc
xor
push
adc
inc
xchg
not
cwde
in
cmp
mov
or
mov
add
mov
pop
sti
int
add
jmp
mov
pop
sti
int
add
mov
pop
sti
int
add
in
cmp
in
cmp
int
outs
addr16
(bad)
mov
pop
sti
int
add
jno
add
in
cmp
int
add
in
cmp
int
repnz
pop
jle
add
adc
(bad)
cmps
retf
int
ins
or
adc
jb
ins
aas
jle
add
jmp
fcmovne
sub
jle
mov
lea
int
gs
mov
sub
cmps
xchg
test
je
int
inc
out
cmc
xchg
adc
out
mov
sub
push
fiadd
add
test
or
xor
test
xchg
mov
xchg
cmc
add
fld
mov
jo
(bad)
cli
or
jno
cmp
jle
in
sub
add
sti
jae
int
or
aaa
jg
add
std
ins
sti
mov
sti
arpl
int
inc
adc
cmp
int
push
hlt
jp
mov
hlt
mov
test
mov
xor
mov
hlt
mov
add
add
aaa
(bad)
mov
out
inc
xchg
test
and
int
inc
out
div
adc
sti
and
int
xchg
test
in
xor
jno
cmc
xor
jle
add
xchg
js
jbe
or
xchg
add
(bad)
mov
push
sub
and
mov
sti
inc
xchg
pop
test
xor
xchg
xchg
mov
test
int
inc
add
(bad)
mov
add
or
add
jle
jno
(bad)
mov
add
or
add
jle
jno
(bad)
mov
add
or
mov
pop
sti
int
inc
jnp
(bad)
cli
or
or
jmp
adc
sti
int
xor
in
cmp
mov
mov
jle
inc
mov
jae
int
xchg
int
gs
mov
mov
jnp
mov
outs
fcmovne
or
lock
push
add
or
sti
aaa
or
inc
xor
pop
add
jno
add
mov
pop
mov
mov
jl
int
fstp
mov
imul
sub
(bad)
outs
jbe
inc
retf
in
(bad)
jmp
cmp
mov
or
inc
xor
xchg
add
jle
mov
ja
push
inc
cli
mov
enter
lea
or
repz
(bad)
cmp
mov
rcr
jns
repz
(bad)
cmp
mov
rcr
imul
(bad)
mov
test
xchg
xor
cli
xor
xor
inc
ret
adc
or
out
cmp
ret
(bad)
cli
cli
and
ret
xchg
xchg
jle
add
jge
mov
cmp
mov
cmp
jb
xchg
cmp
xchg
sbb
mov
jg
les
jle
xchg
repnz
enter
mov
jge
inc
je
(bad)
aaa
or
add
enter
cmp
add
xor
jp
inc
int
or
retf
sub
cmp
mov
pop
add
jle
add
enter
jle
add
je
inc
xor
add
cmp
mov
jp
cmp
add
mov
cmp
mov
js
fnstenv
into
jg
jns
jns
loopne
adc
ja
xchg
test
xchg
jle
jno
inc
sti
xor
inc
int
fstp
mov
rcl
or
dec
mov
ret
pop
xor
sti
xor
push
pop
jle
add
xchg
jb
mov
(bad)
cmc
xchg
mov
mov
ins
add
js
dec
xchg
push
fadd
cmps
push
(bad)
ins
and
pop
icebp
sub
loope
jp
add
xchg
cmps
push
xor
push
(bad)
(bad)
jmp
repz
add
in
cmp
cmc
repz
or
sti
xchg
int
xlat
in
and
xchg
sti
xchg
int
xlat
in
cmp
mov
jg
cmc
dec
jno
ins
mov
push
mov
data16
jle
add
jle
jno
adc
in
lods
sub
inc
push
mov
sub
fstp
and
jle
outs
xor
pop
add
jle
pop
pop
jle
pop
pop
jle
add
xor
add
test
mov
mov
js
inc
ds
cmps
add
xchg
mov
dec
inc
out
pusha
adc
push
fidivr
add
test
xchg
inc
push
xor
inc
into
jmp
xor
outs
xor
cli
or
or
inc
(bad)
xchg
or
popa
xor
push
xor
in
fsubr
xchg
cmp
xor
jg
retf
pop
ins
and
bound
sub
mov
mov
mov
xchg
adc
outs
xor
ins
xor
(bad)
int
(bad)
in
dec
das
xchg
mov
xchg
cmp
dec
inc
out
arpl
push
(bad)
(bad)
add
cmc
ret
mov
pop
cmp
jle
std
mov
sub
popa
xor
push
xor
add
cmp
pop
jl
hlt
sar
push
fcmovb
(bad)
add
push
sbb
push
fisubr
xlat
add
mov
imul
sar
mov
add
mov
ja
push
ret
pop
jle
test
jle
outs
ss
outs
xor
xchg
mov
addr16
xor
ret
jo
mov
std
jns
inc
jp
(bad)
fst
push
pop
jle
add
xchg
arpl
in
add
cmp
int
xchg
sti
inc
jb
in
or
xchg
xchg
in
in
xchg
mov
inc
push
mov
sub
cmp
or
mov
xchg
xor
jg
inc
or
mov
sub
(bad)
in
jle
jg
jle
test
sub
jle
aas
sar
in
pop
sub
xchg
xor
test
push
pop
dec
addr16
xor
add
cmp
outs
xor
push
inc
xchg
mov
mov
push
pop
push
addr16
xor
add
cmp
ret
mov
jnp
ins
and
bound
sub
(bad)
outs
jbe
jno
mov
inc
jnp
cmp
adc
sahf
lds
mov
add
daa
mov
fldcw
mov
inc
xlat
ins
pop
sahf
lds
lahf
aad
xor
inc
or
inc
jo
fist
mov
retf
pusha
jle
pop
mov
jg
lea
fcomp
mov
push
mov
sub
enter
pop
add
cmc
cmp
xor
loop
xor
loop
xor
loop
xor
cli
idiv
jle
pop
xor
not
jle
out
cmp
icebp
(bad)
cli
adc
or
sbb
cmc
ret
leave
mov
sbb
jle
out
cmp
icebp
jno
inc
int
xor
pop
sub
ret
add
inc
jp
imul
dec
xchg
adc
mov
js
inc
mov
inc
ds
inc
xor
ret
pop
push
out
aam
xchg
enter
std
inc
sbb
cmp
dec
add
xor
jmp
or
jmp
(bad)
mov
jle
push
cmp
push
sbb
xchg
rol
ja
push
fdiv
cmps
push
(bad)
mov
push
ret
leave
retf
lahf
push
inc
out
ret
cmp
(bad)
addr16
mov
js
aam
leave
shl
cmp
call
cmp
ror
scas
xchg
cmc
ret
js
fdiv
cmps
push
(bad)
ins
and
int
push
pop
xchg
mov
outs
mov
jle
mov
mov
out
pop
jo
out
pop
xchg
mov
out
pop
inc
mov
ds
xchg
mov
out
pop
xchg
mov
out
pop
cmp
mov
out
pop
mov
mov
jle
mov
mov
out
pop
jo
out
pop
xchg
mov
out
pop
xchg
jp
xchg
mov
out
pop
jno
out
pop
xchg
mov
out
pop
arpl
not
xchg
mov
xchg
xchg
jle
xchg
mov
add
inc
xor
stos
and
xchg
out
or
ss
pop
xchg
mov
out
mov
mov
mov
mov
xchg
dec
xchg
pop
xchg
mov
out
pop
xchg
mov
xchg
out
pop
xchg
push
out
pop
xchg
mov
outs
jp
xor
add
lock
into
lds
lahf
lds
push
pop
xchg
mov
outs
mov
out
pop
pop
mov
std
jg
mov
out
pop
xchg
mov
jle
(bad)
jmp
pop
xchg
mov
out
pop
xor
mov
out
pop
(bad)
cli
out
pop
xchg
mov
out
pop
xchg
mov
es
xchg
mov
popa
nop
pop
mov
out
pop
add
mov
out
pop
mov
mov
out
pop
jo
out
pop
xchg
mov
jle
(bad)
jmp
pop
xchg
mov
out
pop
xor
mov
out
pop
(bad)
cli
out
pop
xchg
mov
out
pop
xchg
mov
es
xchg
mov
jo
inc
mov
out
pop
add
mov
out
pop
mov
sbb
and
push
loope
xchg
lahf
push
sub
cmp
ret
test
jmp
ja
push
(bad)
xor
(bad)
cmc
cmp
xor
push
fdiv
mov
in
lods
mov
imul
mov
pop
jns
jle
add
cmp
fst
jge
xchg
dec
jle
mov
cmp
xchg
(bad)
repz
ret
mov
lock
dec
mov
clc
mov
or
es
clc
jae
neg
ret
mov
jno
dec
enter
and
add
gs
jle
adc
cmps
xchg
jb
xor
mov
adc
cmp
dec
jle
outs
cmp
pop
add
jle
inc
shr
stos
jl
xchg
test
jl
mov
repz
enter
scas
xlat
in
mov
js
inc
shr
fdiv
mov
in
dec
xor
xchg
js
jno
dec
mov
inc
ret
inc
ds
sti
int
fcomp
mov
push
mov
sub
xchg
xlat
sub
inc
mov
jle
in
pop
xor
pop
repnz
push
(bad)
xchg
repz
into
mov
not
jmp
inc
inc
mov
xor
jl
add
cmp
int
(bad)
in
mov
(bad)
(bad)
hlt
ja
or
jno
jns
mov
mov
das
es
das
mov
jge
cli
in
gs
jns
mov
mov
(bad)
lds
ror
retf
adc
outs
xor
ja
aaa
mov
ret
xchg
aas
dec
xor
shr
dec
mov
into
xchg
nop
test
push
hlt
add
div
ja
or
loop
lds
outs
add
into
jp
int3
(bad)
cmp
pop
aaa
mov
inc
xor
clc
inc
cmps
ror
xchg
adc
lea
push
(bad)
mov
cmc
xchg
fmul
std
ret
fist
jo
test
jmp
jbe
xchg
jmp
xor
inc
out
xchg
jecxz
xor
jns
jno
sti
mov
mov
push
cmp
ret
lds
xchg
cdq
xor
jle
inc
jg
xchg
jg
xchg
int
inc
or
ja
lea
mov
(bad)
ins
mov
lds
mov
bound
add
fisttp
jo
push
inc
(bad)
xchg
nop
test
call
ja
or
loop
lds
outs
add
(bad)
jp
int3
(bad)
cmp
pop
aaa
mov
inc
xor
lock
cmps
ror
mov
mov
(bad)
cmp
xor
fist
jo
test
jmp
jbe
div
btc
xor
push
(bad)
addr16
loop
lds
jb
(bad)
lds
ror
push
xchg
(bad)
ret
lds
jae
mov
or
inc
and
xchg
xchg
std
jmp
cs
hlt
xor
mov
lahf
cmp
mov
xchg
adc
outs
xor
xchg
ds
cmp
push
inc
(bad)
push
jle
outs
xor
ret
xor
loopne
add
add
xor
add
sub
jp
xchg
mov
add
mov
stos
push
(bad)
ins
and
int
sub
loope
xchg
lahf
push
xor
push
rcr
or
xchg
aam
add
iret
cmp
xchg
scas
xor
mov
sbb
ret
in
mov
retf
das
push
(bad)
inc
(bad)
xor
mov
aam
test
mov
add
(bad)
int3
add
jno
jns
les
outs
(bad)
(bad)
xrelease
enter
sub
daa
push
(bad)
mov
out
cmps
inc
js
int
pop
inc
int
or
jb
mov
js
fisubr
int3
add
test
hlt
sti
cmp
xor
sub
xchg
sti
js
int
xlat
ins
mov
mov
xor
add
iret
cmp
xor
outs
xor
ins
xor
inc
mov
adc
add
sti
jae
int
js
cmp
bswap
jo
xlat
in
xor
xchg
jle
add
push
xchg
jle
cld
(bad)
cmp
sti
xchg
mov
xor
hlt
xor
jae
int
outs
(bad)
je
xchg
aaa
or
inc
xor
xchg
int
outs
mov
mov
jp
int
out
fsubr
cmp
mov
cs
add
jle
in
popa
jle
add
dec
add
mov
mov
jp
int
inc
sti
aaa
or
inc
xor
inc
(bad)
out
leave
in
cmp
mov
cs
add
jle
in
adc
add
push
jmp
jo
out
jns
cmp
ins
xor
test
jo
add
std
inc
push
mov
fdivr
jle
pop
imul
rcl
or
sub
mov
lds
xchg
mov
std
loop
xor
ret
repz
adc
ins
or
jle
add
jle
jno
xor
add
div
cli
add
jno
test
push
pop
jg
add
or
sub
xchg
xor
iret
add
and
pop
sti
mov
cmp
(bad)
add
xor
add
adc
push
int
xchg
sti
inc
outs
js
ds
add
std
inc
sbb
and
fwait
(bad)
push
lea
jg
aad
ret
mov
or
cs
and
(bad)
in
xor
xchg
mov
ror
(bad)
(bad)
shr
js
jg
retf
mov
xlat
mov
xlat
outs
xor
add
jle
add
or
pop
jp
xchg
repnz
mov
inc
data16
es
jno
xor
add
ja
jo
xor
add
dec
inc
out
and
jg
retf
sti
inc
sub
jle
xor
icebp
sub
loope
xchg
xchg
push
gs
repnz
cmp
and
jle
add
idiv
retf
mov
xlat
ins
sub
add
jle
jno
xor
add
ja
jo
dec
inc
out
or
ret
sub
add
jle
jno
xor
add
ja
jo
xor
add
dec
inc
out
sub
rol
xor
xchg
mov
cdq
push
inc
ret
pop
ins
mov
push
mov
sub
mov
cmc
cmp
add
std
mov
add
pop
outs
add
xchg
rol
ret
xchg
clc
out
xchg
add
xchg
xchg
jle
add
jle
gs
cmp
in
push
adc
push
inc
jle
or
repnz
xchg
sti
pop
adc
xchg
iret
inc
xor
inc
into
xchg
add
icebp
(bad)
aam
stos
ins
push
int3
sbb
mov
(bad)
push
push
cmp
aam
gs
repnz
and
inc
mov
test
mov
inc
mov
cld
sbb
pop
push
int
xchg
in
push
mov
pop
(bad)
outs
inc
add
jle
cld
mov
test
pop
inc
clc
out
xchg
or
jmp
inc
xchg
idiv
mov
or
and
jnp
pop
jle
(bad)
jmp
fsub
and
jle
ret
mov
jnp
push
jle
or
ret
push
int
xchg
in
dec
cmp
add
cmp
lock
inc
lea
push
fdiv
xchg
mov
inc
push
mov
sub
pop
ja
arpl
js
jno
pop
mov
xor
xchg
jecxz
add
cmp
in
inc
(bad)
les
test
adc
mov
or
test
xchg
(bad)
sldt
cmp
pop
mov
ret
ja
xchg
mov
push
inc
push
cld
mov
xor
jo
mov
sub
cld
mov
xor
enter
jo
repz
test
mov
out
mov
and
inc
xor
outs
jg
jle
xchg
push
sti
ja
mov
retf
(bad)
ja
fcomp
mov
push
mov
jl
in
dec
aas
xchg
sub
mov
repz
add
jle
mov
xor
add
int
js
int
mov
test
mov
ja
ret
or
repnz
scas
rdmsr
jle
mov
xor
mov
xlat
lds
dec
inc
in
and
add
or
add
sti
pop
sti
iret
cmp
repz
xchg
int
add
int
js
(bad)
cmps
js
int
cmp
int
js
mov
or
add
sub
inc
fisubr
lds
test
test
cmc
repnz
xor
add
xchg
aas
inc
xor
hlt
sbb
(bad)
lea
test
push
jg
jno
test
int
js
enter
inc
out
push
in
cmp
sti
inc
jbe
mov
xchg
in
cmp
sti
xchg
fild
jle
sar
mov
push
xor
popf
lds
xchg
ins
ret
add
retf
jnp
int3
sub
div
hlt
add
ret
(bad)
lea
jle
repz
std
jge
dec
pop
outs
push
xchg
stos
mov
mov
adc
add
xchg
jg
xor
shl
pop
inc
xor
push
xor
popf
lds
xchg
ins
ret
add
retf
jnp
int3
sub
div
xor
cmp
sti
xchg
arpl
jle
sar
daa
inc
xor
push
xor
popf
lds
xchg
ins
ret
add
retf
jnp
int3
sub
div
jg
jle
mov
stos
mov
enter
ficom
ret
add
(bad)
in
xor
repz
sub
mov
gs
mov
in
push
cmp
sti
inc
pop
out
push
in
cmp
(bad)
mov
js
int
out
and
fidiv
ret
add
std
inc
adc
jle
daa
jbe
xchg
stos
mov
enter
pop
mov
xor
js
jo
xchg
mov
lds
sub
div
out
jno
xchg
stos
mov
enter
pop
mov
xor
js
cmp
xchg
mov
lds
sub
div
mov
jle
mov
stos
mov
enter
fcmovu
les
(bad)
in
xor
repz
sub
mov
gs
mov
in
lods
cmp
xchg
mov
lds
jp
mov
jle
mov
stos
mov
pop
sbb
repz
int
js
ficom
les
repz
int
js
int
xchg
(bad)
mov
js
int
out
aam
cmp
push
fisubr
les
std
inc
and
dec
les
(bad)
lea
jle
repz
std
jge
dec
pop
outs
sbb
xchg
stos
mov
mov
adc
add
xchg
fwait
inc
xor
shl
ja
aam
add
int
js
hlt
xchg
ja
xor
push
xor
popf
lds
xchg
ins
ret
add
retf
jnp
int3
sub
div
iret
jo
xchg
stos
mov
enter
pop
mov
inc
xor
js
fdivr
add
mov
xchg
je
add
out
std
mov
cmp
ja
jo
js
into
cmp
xor
inc
or
mov
xchg
in
cmp
sti
inc
push
or
push
sbb
in
dec
cmp
add
mov
xchg
je
add
out
std
mov
cmp
dec
fidiv
js
into
cmp
xor
inc
or
inc
lds
(bad)
lea
jle
repz
std
jge
dec
ins
out
hlt
sar
sti
xchg
fild
jle
sar
xchg
inc
xor
push
xor
popf
lds
movs
in
xor
add
sbb
jo
pusha
cmc
cmp
int
js
pop
inc
pop
inc
xor
outs
sti
jae
xchg
adc
xor
inc
sti
iret
add
add
add
(bad)
int
js
fld
or
test
sti
iret
cmp
test
sti
iret
or
add
out
std
mov
out
mov
jle
mov
lds
mov
in
inc
gs
cmp
xor
cmp
cmp
xor
inc
adc
mov
mov
js
int
inc
sti
mov
js
int
cmp
int
js
xor
or
xor
sti
inc
data16
(bad)
cmc
add
int
js
pop
sbb
xor
outs
sbb
xchg
jb
xchg
stos
mov
enter
pop
and
xor
js
sub
xchg
mov
xchg
je
add
out
std
mov
cmp
dec
fidiv
js
into
cmp
xor
inc
or
mov
stos
jb
xchg
stos
mov
enter
pop
mov
xor
js
cld
xchg
mov
js
int
xchg
add
(bad)
mov
js
int
add
int
js
mov
jns
int
add
int
js
ret
lea
test
mov
xchg
int
into
add
xor
sti
xor
cmp
jle
(bad)
ret
(bad)
hlt
cmc
ret
jle
add
inc
add
int
js
mov
xchg
cmc
add
int
js
mov
js
int
repnz
pop
inc
xor
add
int
js
fisub
add
std
inc
or
add
xor
std
mov
mov
ja
ret
mov
mov
int
add
mov
aas
xor
add
xchg
ss
int
add
test
sti
xchg
repnz
retf
ja
iret
or
bound
jecxz
jo
xlat
in
xchg
inc
xchg
mov
xchg
je
add
out
std
mov
cmp
fcmovu
jo
js
into
cmp
xor
inc
or
mov
pop
or
jle
add
mov
enter
pop
mov
inc
xor
js
dec
inc
xchg
mov
xchg
je
add
out
std
mov
cmp
ja
jo
js
into
cmp
xor
inc
or
retf
ja
iret
sub
hlt
aas
xchg
add
add
mov
cs
retf
sti
popa
xchg
scas
repz
add
test
or
int3
cmp
int
jnp
int3
sub
div
(bad)
or
xchg
stos
mov
enter
pop
and
xor
js
rol
add
mov
xchg
je
add
out
std
mov
cmp
dec
fidiv
js
into
cmp
xor
inc
or
mov
mov
or
add
(bad)
lea
jle
repz
std
jge
dec
ins
out
hlt
sar
sti
xchg
or
xor
sar
mov
jo
js
into
cmp
xor
inc
or
dec
mov
add
jle
repz
std
jge
dec
pop
outs
daa
or
xchg
stos
mov
mov
adc
add
xchg
cmps
cmp
jle
shl
xchg
xor
push
xor
popf
lds
xchg
ins
outs
mov
jnp
int3
sub
div
repnz
fisubr
lea
jle
repz
std
jge
dec
ins
out
iret
in
cmp
sti
xchg
jae
xor
sar
aaa
cmp
jle
push
xor
popf
lds
xchg
ins
ret
add
retf
jnp
int3
sub
div
(bad)
movd
add
mov
enter
fiadd
mov
add
jle
repz
sub
mov
gs
mov
in
inc
inc
xchg
mov
lds
sub
div
hlt
sbb
mov
add
jle
repz
std
jge
dec
ins
out
hlt
sar
sti
xchg
fstp
xor
sar
fidiv
js
into
cmp
xor
inc
or
jnp
add
(bad)
lea
jle
repz
std
jge
dec
ins
out
hlt
sar
sti
xchg
mov
sar
popf
fidiv
js
into
cmp
xor
inc
or
mov
ret
push
jle
mov
stos
mov
enter
pop
mov
xor
js
aam
xchg
mov
js
int
or
into
cmp
jo
xlat
in
xchg
inc
xchg
mov
xchg
je
add
out
std
mov
cmp
ja
jo
js
into
cmp
xor
inc
or
jle
inc
xor
js
mov
mov
xchg
je
add
out
std
mov
cmp
ja
jo
js
into
cmp
xor
inc
or
or
add
mov
mov
js
int
inc
in
sub
add
xchg
test
out
std
mov
pop
xchg
cmp
xchg
pop
inc
xor
outs
or
jle
xchg
outs
outs
jmp
jle
mov
stos
mov
enter
pop
mov
xor
js
cmp
xchg
mov
lds
sub
div
mov
jle
mov
stos
mov
enter
pop
mov
xor
js
in
xchg
mov
ret
xchg
or
xor
push
xor
popf
lds
movs
in
dec
inc
xchg
sbb
jo
pusha
cmc
cmp
int
js
pop
inc
pop
inc
xor
outs
jae
jle
xchg
outs
out
aam
cmp
sti
xchg
(bad)
xor
sar
xchg
adc
outs
xor
ins
xor
inc
int
(bad)
in
xor
add
sti
outs
sti
iret
add
add
retf
jnp
int3
sub
xor
cmp
int
js
bound
js
xchg
out
xor
mov
cmp
xor
js
nop
dec
xchg
mov
in
movs
dec
xchg
sti
imul
sbb
push
mov
jg
add
ror
aas
jne
cld
lds
js
mov
jle
aas
cmp
push
or
jo
or
bound
push
cld
add
out
sub
xchg
int
out
add
lds
fwait
test
xchg
inc
shr
pop
inc
pop
inc
xor
int
jo
out
add
loope
js
pop
test
inc
xor
pop
fdiv
out
out
out
cmp
ins
xor
test
div
int
inc
and
xchg
fisttp
fmul
icebp
sub
loope
xchg
adc
xor
push
shr
push
push
cld
add
sbb
int
xchg
xor
les
out
jp
int
ret
jp
add
mov
jp
int
jg
retf
xor
mov
sub
add
jbe
push
xor
lea
sub
add
add
int
xor
dec
xchg
sub
sti
int
ror
aaa
repz
xor
xchg
stos
cmp
xchg
in
xor
add
sti
(bad)
stc
int
js
xchg
cmp
(bad)
mov
xor
add
cmp
int
xor
jle
push
cmp
or
js
data16
(bad)
mov
repz
xor
rol
xor
xchg
mov
mov
xor
add
cmp
in
mov
add
sti
adc
int
push
repz
add
outs
in
add
sti
and
int
xlat
in
xor
add
sub
cmp
jle
ins
ss
add
sti
xor
int
xlat
ins
popf
mov
pop
inc
xor
test
(bad)
outs
adc
cmp
inc
jae
in
xchg
dec
xchg
mov
xchg
cmp
jp
add
repz
int3
cmp
int
xlat
in
push
dec
xchg
cmp
int
or
int
js
mov
retf
pop
stc
int
js
xchg
cmp
repz
fidiv
jne
int
inc
and
sti
sbb
int
mov
inc
jae
in
or
xchg
mov
xchg
lds
sti
jnp
int
xlat
in
cwde
inc
xchg
xchg
add
cmp
xor
push
xor
sti
aas
cli
int
xlat
in
and
xchg
mov
jg
cmc
mov
js
xor
ret
mov
jns
int
xchg
sbb
fiadd
add
mov
js
xor
fwait
(bad)
cmc
sti
outs
cli
int
xchg
mov
or
bound
fimul
int
or
bound
outs
xor
outs
xor
outs
xor
add
int3
cmp
push
jle
or
xor
sti
xchg
jp
int
aas
aaa
xor
cld
sbb
adc
int
out
push
in
cmp
ins
dec
mov
jnp
int
xlat
in
cwde
dec
xchg
mov
jp
int
ins
sub
jle
or
push
repnz
outs
daa
pop
jle
(bad)
icebp
ja
jno
push
outs
pop
xor
outs
push
jle
test
jg
add
cmc
int3
cmp
inc
xchg
retf
xor
jle
mov
xor
lea
xchg
inc
mov
xor
add
cmp
sub
xchg
push
in
fdiv
or
bound
add
ds
js
xor
and
add
add
mov
ins
or
add
mov
cmp
xor
adc
xor
jecxz
sti
idiv
int
push
ret
fs
div
xor
add
retf
and
int
outs
mov
fidivr
int
and
xor
sub
jle
repz
add
cmp
sti
mov
bound
gs
ficom
(bad)
clc
mov
idiv
retf
sti
inc
jbe
retf
add
(bad)
lock
push
int3
idiv
retf
sti
inc
jb
mov
lock
push
into
xor
add
test
fcmovu
mov
xor
inc
bound
cmp
test
jnp
loop
xor
jg
or
outs
scas
push
pop
jle
mov
hlt
jmp
jl
xchg
xor
les
adc
mov
xlat
(bad)
ret
in
mov
add
mov
push
hlt
mov
adc
add
xor
cli
mov
outs
and
jle
(bad)
retf
(bad)
cmc
xor
cli
mov
leave
sar
mov
xchg
(bad)
xor
test
jns
jbe
or
sub
loop
xor
repz
adc
outs
out
add
mov
xlat
outs
xor
out
out
xchg
adc
in
enter
mov
pop
xchg
adc
add
cmp
fs
mov
xor
in
push
cmp
ins
and
bound
push
push
mov
cmp
cld
mov
jle
repz
add
mov
js
sub
ret
int
or
bound
loope
jo
outs
(bad)
sbb
ja
or
push
and
xchg
retf
inc
in
sub
div
les
js
cli
sahf
js
int
mov
sbb
xchg
xchg
mov
or
out
push
add
sub
ret
int
or
bound
outs
imul
mov
retf
(bad)
cmc
sub
js
fimul
add
std
inc
or
mov
dec
in
cmp
xor
les
lea
xor
fstp
mov
xchg
and
jle
xchg
sbb
sub
cmp
sub
(bad)
daa
push
ret
xchg
mov
ins
ss
add
daa
mov
xor
pop
xchg
add
jno
test
enter
mov
out
push
in
cmp
push
fidivr
mov
xor
inc
or
mov
outs
xor
hlt
sbb
pop
inc
xor
add
cmp
xor
inc
or
lahf
mov
xor
lea
jle
repz
std
jge
dec
push
hlt
sar
mov
outs
sti
add
xchg
jbe
mov
cmp
add
mov
enter
fcmovbe
mov
xor
in
xor
repz
sub
mov
gs
(bad)
jo
or
gs
daa
aaa
xor
shl
pop
aaa
xor
push
xor
popf
lds
xchg
ins
ret
add
sti
xchg
int
xlat
in
lods
dec
xchg
mov
ja
hlt
push
mov
jo
or
bound
add
cmp
ds
xor
popf
lds
xchg
ins
ret
add
sti
xchg
int
xlat
in
ins
dec
xchg
mov
xchg
je
add
out
std
mov
cmp
(bad)
aaa
xor
xor
popf
lds
addr16
int
out
pop
out
cmp
mov
sub
add
xchg
outs
js
and
xchg
(bad)
or
bound
cmps
(bad)
or
bound
add
div
aam
add
in
cmp
xor
push
xor
popf
lds
xchg
ins
ret
add
sti
xchg
int
xlat
in
cld
dec
xchg
mov
lds
sti
xchg
int
xlat
in
mov
mov
(bad)
in
inc
dec
xchg
je
add
out
std
mov
cmp
ja
jo
or
bound
add
cmp
test
jo
or
bound
add
cmp
ja
aam
add
in
cmp
xor
push
xor
popf
lds
scas
in
sub
xchg
sbb
jo
pusha
repz
cmp
xor
cmp
cmp
xor
inc
adc
push
pop
inc
xor
add
cmp
xor
inc
or
lahf
mov
xor
lea
jle
repz
std
jge
dec
push
hlt
sar
mov
outs
sti
add
xchg
jbe
dec
out
cmp
mov
outs
out
add
xchg
jbe
hlt
add
mov
xor
lea
jle
repz
std
jge
dec
push
hlt
sar
mov
outs
mov
div
push
in
cmp
mov
outs
scas
add
xchg
jbe
arpl
jle
mov
stos
mov
enter
pop
mov
xor
add
cmp
xor
inc
or
mov
xor
jno
repz
cmp
xor
add
cmp
xor
inc
adc
arpl
add
jle
repz
std
jge
dec
push
hlt
sar
mov
outs
aas
add
xchg
jbe
add
cmp
mov
outs
and
jle
xchg
jbe
out
jle
mov
stos
mov
enter
pop
mov
xor
add
cmp
xor
inc
or
inc
call
lea
test
mov
jo
mov
pop
xchg
cmp
xor
cmp
cmp
xor
inc
adc
add
add
jle
repz
std
jge
dec
push
hlt
sar
mov
outs
lahf
add
xchg
jbe
(bad)
cmp
mov
outs
add
xchg
cmp
add
inc
mov
xor
lea
jle
repz
std
jge
dec
push
hlt
sar
mov
outs
pop
add
xchg
jbe
adc
jle
mov
stos
mov
enter
fidivr
add
(bad)
in
xor
repz
sub
mov
gs
(bad)
jo
or
gs
jnp
xor
shl
push
fnstenv
or
bound
add
cmp
outs
xor
ins
xor
inc
popa
xchg
movaps
jle
or
mov
or
bound
in
add
ret
jg
int
rcl
xchg
int
sar
xchg
arpl
xor
mov
mov
lods
add
dec
inc
inc
fnstcw
hlt
sbb
fmul
icebp
sub
loope
xchg
add
xor
push
shr
adc
push
xor
cmp
dec
jno
cmc
or
add
cmc
fimul
xchg
daa
sub
jle
push
cmp
rol
xor
adc
retf
lea
test
bound
outs
cmp
cmp
xor
xchg
jo
outs
jae
jle
lea
adc
outs
xor
add
fidivr
add
cmp
push
sub
jo
out
mov
cmp
ins
xor
test
sahf
(bad)
sti
int
inc
and
mov
xchg
jp
add
repz
int3
cmp
int
xlat
in
or
mov
mov
js
popa
repz
ficom
sti
int
inc
or
mov
xchg
ficomp
xor
add
int3
cmp
xor
add
mov
adc
add
mov
int
add
jg
(bad)
cmc
adc
outs
xor
add
imul
mov
nop
add
mov
xchg
add
sti
xor
fwait
(bad)
cmc
sti
outs
cli
int
xchg
mov
or
bound
fimul
int
or
bound
outs
xor
outs
xor
outs
xor
add
int3
cmp
sbb
or
xor
sti
xchg
jp
int
inc
sub
xor
daa
stc
int
out
push
in
cmp
ins
dec
mov
jnp
int
xlat
in
adc
mov
xchg
ret
jl
int
ins
sub
jle
or
push
repnz
outs
das
sbb
(bad)
hlt
ja
jno
push
outs
pop
xor
ja
jle
test
jg
or
cmc
int3
cmp
xchg
jle
add
xchg
xlat
xor
cld
sbb
xchg
repz
xchg
dec
xor
add
xor
add
sub
int
inc
or
cmp
xor
mov
cs
or
or
xor
outs
xor
js
mov
jl
int
outs
dec
sbb
test
add
add
repz
int
adc
int
outs
dec
in
js
hlt
xor
in
js
xchg
jne
inc
xor
xlat
ins
cmp
jg
xor
shl
inc
jno
push
mov
jo
outs
sti
sbb
(bad)
scas
loop
sti
int
ins
ds
test
cmp
dec
pop
sti
int
inc
or
popa
or
scas
cmp
xchg
mov
xor
in
sub
mov
xor
outs
add
jle
ret
mov
jp
int
xchg
repz
fidiv
jg
retf
outs
xor
js
or
xchg
sub
mov
jp
int
add
sti
mov
bound
gs
fimul
inc
fs
push
fisubr
scas
add
test
in
js
xchg
sub
data16
push
pop
outs
jg
jle
(bad)
hlt
sub
xchg
mov
pusha
lea
push
ret
popa
xchg
cmps
sub
repz
xor
add
daa
mov
clc
bound
push
pop
rcr
inc
xor
outs
xor
push
ret
shr
mov
add
xchg
mov
repz
sub
adc
adc
clc
ins
and
int
sub
loope
jle
add
xchg
adc
xor
push
lea
ret
jb
inc
add
xor
add
test
cmc
ja
jno
dec
inc
out
jno
js
xor
xor
sub
sbb
outs
xor
xchg
int
xlat
in
je
js
mov
mov
int
xchg
jp
hlt
fldcw
sub
xchg
jl
in
pushf
push
xchg
mov
dec
(bad)
mul
fidiv
mov
mov
sub
xor
ret
ja
xchg
sbb
mov
adc
xor
lds
cmp
fisubr
jo
imul
ja
xlat
outs
xor
les
mov
lds
push
scas
add
jno
inc
int3
std
inc
pop
bound
js
jo
or
outs
fwait
sbb
xchg
data16
cs
add
cmp
mov
lods
aas
xchg
enter
push
add
cli
mov
mov
and
mul
fidiv
push
mov
mov
or
jle
loop
cmp
hlt
adc
outs
xor
outs
xor
outs
xor
outs
xor
ins
mov
jle
add
js
adc
inc
scas
add
test
lds
inc
outs
xor
in
xor
dec
add
sbb
outs
xor
in
xor
dec
outs
cdq
jae
outs
jnp
jle
outs
xor
in
xor
dec
pop
movs
jo
outs
imul
xchg
sub
xor
dec
stos
fwait
jae
outs
pop
sbb
outs
xor
in
xor
dec
fwait
xchg
jb
outs
dec
sbb
test
loopne
add
adc
push
pop
dec
js
sbb
mov
scas
add
adc
push
pop
dec
js
adc
mov
scas
add
adc
push
pop
dec
js
mov
scas
add
adc
push
pop
dec
js
inc
ffreep
add
ja
add
div
ret
outs
xor
in
xor
dec
mov
jae
outs
not
sub
xor
dec
ja
jae
outs
out
jle
outs
xor
in
xor
dec
adc
adc
sub
xor
dec
pop
cmps
jo
outs
(bad)
adc
push
xchg
test
lea
jo
cmp
outs
into
xor
add
pop
adc
xchg
xor
clc
int
outs
cdq
jae
outs
aas
adc
xor
add
inc
sbb
push
xchg
xor
clc
int
pop
movs
jo
outs
adc
cmp
add
adc
sti
pop
push
sbb
xchg
jg
xor
and
stc
mov
loope
add
xchg
mov
sti
pop
bound
inc
xor
and
mov
stc
mov
jmp
add
mov
add
adc
sti
pop
push
sbb
xchg
aaa
and
jle
jl
cmp
ins
and
mov
loope
add
(bad)
sti
pop
pop
sbb
xchg
or
xor
sub
stc
mov
loope
add
jmp
xor
into
xor
add
bound
inc
xor
xchg
xor
clc
int
add
adc
xchg
sub
loope
xchg
xchg
push
shl
arpl
jmp
pop
xchg
mov
xor
sti
int
inc
ins
fisub
add
int
add
and
(bad)
fwait
jae
in
add
xchg
jmp
xor
repz
xchg
cmp
fs
jmp
xor
add
dec
mov
jae
in
add
cmc
ret
cmp
mov
mov
outs
xor
ins
xor
push
pop
mov
data16
out
add
jle
in
or
xchg
cmp
inc
xor
sti
pop
dec
sbb
adc
push
pop
inc
or
retf
hlt
mov
jecxz
pop
push
adc
xchg
jle
fsubrp
cmp
outs
xor
and
lods
aas
xchg
cmc
adc
sti
pop
dec
sbb
adc
sti
pop
cmp
inc
xor
pop
add
retf
hlt
mov
jecxz
pop
das
in
adc
xchg
jle
fsubrp
cmp
outs
xor
and
xchg
cmp
outs
xor
outs
aaa
adc
outs
xor
outs
xor
cmp
xor
add
jle
or
push
add
xchg
pop
dec
js
ss
add
sbb
sti
pop
dec
sbb
adc
sti
pop
cmp
inc
xor
ins
add
xchg
sbb
sub
jle
add
push
jmp
jo
out
fsubrp
cmp
outs
xor
and
xchg
cmp
test
dec
repnz
adc
sti
pop
dec
sbb
adc
sti
pop
cmp
inc
xor
ins
adc
pop
push
in
sub
jle
add
push
lahf
fbstp
out
fsubrp
cmp
outs
xor
and
xchg
cmp
outs
xor
xchg
xor
add
xor
outs
sbb
xchg
cs
retf
xchg
lds
jle
out
jle
cmps
ds
add
jle
xor
loope
add
jle
xor
mov
out
jl
jle
ins
mov
add
push
out
add
jle
ins
mov
movs
pop
inc
xor
in
cwde
pop
xchg
push
inc
xor
sti
pop
dec
sbb
adc
sti
pop
push
daa
inc
xor
outs
push
push
sub
adc
xchg
jle
sub
xchg
repz
jle
in
scas
aas
xchg
xor
std
fidiv
in
add
cmp
outs
aaa
push
jle
ins
inc
movs
lds
jle
inc
xor
sti
pop
xchg
sbb
xchg
fwait
and
jle
add
dec
mov
jae
in
add
dec
out
jo
out
sub
jle
outs
add
sub
jle
jge
test
pop
(bad)
out
sub
xchg
mov
xor
test
and
add
adc
sti
pop
dec
sbb
adc
sti
pop
push
daa
inc
xor
stos
add
pop
aam
add
push
sub
jle
pop
xor
xlat
ins
out
mov
pop
inc
xor
in
clc
pop
xchg
push
sbb
xchg
lods
dec
sub
fwait
jae
in
add
dec
ret
movs
jae
in
adc
inc
out
loop
jle
ins
pop
jg
add
jle
add
push
in
fidiv
out
fsubrp
cmp
outs
xor
and
xchg
cmp
(bad)
retf
lea
push
ret
pop
jle
xor
loope
add
jle
xor
mov
out
test
jle
ins
int
xchg
push
add
push
xchg
cs
push
call
movs
lds
jle
inc
adc
cmps
inc
ffreep
add
jle
xor
loope
add
jle
xor
mov
in
arpl
xchg
push
inc
add
jle
add
jle
ins
jo
lds
movs
pop
inc
xor
in
cmp
xchg
dec
push
inc
xor
sti
pop
dec
sbb
adc
sti
pop
cmp
inc
xor
ins
iret
jle
add
dec
xchg
adc
ins
xor
push
pop
ins
pop
inc
xor
pop
fbstp
in
add
stos
movs
add
fnsave
jae
in
add
dec
mov
jae
in
add
dec
ret
movs
jae
in
adc
sub
dec
xor
ins
xchg
jle
add
jle
add
push
sbb
jmp
xchg
sbb
xor
nop
xchg
cmp
outs
xor
xchg
xor
add
xor
outs
es
xchg
cs
fsubr
cmp
ins
xor
add
xchg
out
xor
adc
mov
lods
aas
xchg
xor
add
jle
(bad)
xor
outs
es
xchg
cs
xchg
nop
cmp
ins
xor
add
xchg
mov
sbb
push
jg
cmc
adc
sti
pop
dec
sbb
adc
sti
pop
push
daa
inc
xor
outs
sbb
pop
add
jle
adc
xchg
jle
add
xor
ficomp
scas
fwait
jae
in
add
dec
mov
jae
in
add
dec
out
jo
in
sbb
sbb
icebp
xor
outs
es
xchg
cs
fsubr
cmp
ins
xor
add
xchg
sub
lods
aas
xchg
xor
inc
xchg
aas
xchg
push
sbb
xor
lods
xor
outs
sub
xchg
cs
out
cmp
ins
enter
pop
jle
ja
jle
cmps
stos
ffree
add
and
jg
retf
in
mov
js
ins
and
mul
fisub
push
lea
jecxz
idiv
retf
ins
(bad)
movs
lds
mov
mov
cmp
push
fisub
sti
int
inc
adc
jbe
inc
xor
jg
retf
outs
xor
xchg
xor
xchg
cmp
fs
xchg
jle
add
dec
mov
jae
in
add
cmc
ret
cmp
mov
mov
outs
xor
ins
xor
push
pop
mov
data16
out
add
jle
in
loopne
xchg
cmp
inc
xor
sti
pop
dec
sbb
adc
push
pop
inc
or
retf
hlt
mov
jecxz
pop
push
adc
xchg
jle
fsubrp
cmp
outs
xor
and
lods
aas
xchg
xor
sti
pop
dec
sbb
adc
sti
pop
cmp
inc
xor
stos
add
retf
hlt
mov
jecxz
pop
das
in
adc
xchg
jle
fsubrp
cmp
outs
xor
and
xchg
cmp
outs
xor
outs
aaa
adc
outs
xor
outs
xor
cmp
xor
add
jle
or
push
lahf
adc
(bad)
hlt
adc
push
pop
dec
js
ss
add
xchg
sti
pop
dec
sbb
adc
sti
pop
push
daa
inc
xor
outs
push
adc
outs
es
test
cs
fsubr
cmp
ins
mov
lds
jle
jmp
jle
cmps
(bad)
mov
sahf
adc
jle
jle
cmp
outs
xor
les
pushf
popa
xchg
or
xor
ins
jno
xchg
jle
xchg
sub
out
and
adc
in
add
xor
xchg
dec
popa
xchg
push
add
jle
dec
xor
sti
pop
xchg
sbb
xchg
jecxz
xor
add
dec
mov
jae
in
add
dec
out
jo
out
sub
jle
outs
add
outs
dec
push
test
cs
fsubr
cmp
ins
mov
lds
jle
push
sub
ffreep
add
xchg
add
dec
mov
jae
in
add
dec
out
jo
out
sub
jle
outs
push
adc
ins
pushf
jle
add
jge
test
pop
(bad)
out
sub
xchg
lahf
sbb
jle
sub
mov
pop
jle
xor
loope
add
jle
xor
mov
out
test
jle
outs
pop
push
xchg
add
xor
ins
popa
movs
lds
movs
pop
inc
xor
in
call
or
inc
xor
sti
pop
dec
sbb
adc
sti
pop
cmp
inc
xor
outs
push
push
add
jle
(bad)
xor
ins
xor
push
pop
cmp
inc
xor
pop
fbstp
in
add
fistp
popf
jae
aas
in
add
repz
ret
mov
mov
jae
in
add
dec
ret
movs
jae
in
adc
add
xor
pusha
pop
jle
add
push
xchg
fidiv
out
fsubrp
cmp
outs
xor
and
scas
aas
xchg
xor
inc
xchg
aas
xchg
adc
ins
mov
add
fiadd
add
cs
add
cmp
ins
call
jle
daa
sub
xchg
pop
jle
xor
loope
add
jle
xor
mov
out
loopne
jle
ins
aam
xchg
pusha
out
add
jle
ins
dec
cmps
lds
movs
pop
inc
xor
in
fsub
add
add
inc
xor
sti
pop
dec
sbb
adc
sti
pop
cmp
inc
xor
ins
iret
jle
add
add
push
pop
sub
xor
pop
fbstp
in
add
iret
call
jle
add
dec
mov
jae
in
add
dec
out
jo
in
sbb
cld
xchg
adc
outs
es
xchg
cs
xchg
nop
cmp
ins
xor
add
xchg
call
xor
sbb
std
inc
adc
sti
pop
dec
sbb
adc
sti
pop
push
daa
inc
xor
outs
sbb
outs
es
xchg
cs
fsubr
cmp
ins
xor
add
xchg
mov
sub
aas
xchg
xor
fs
cmp
outs
sub
outs
ins
adc
ins
xor
push
pop
mov
xchg
jo
out
add
jle
in
xor
xchg
pop
sbb
adc
sti
pop
dec
sbb
adc
sti
pop
cmp
inc
xor
ins
test
xchg
adc
ins
xor
push
pop
popf
pop
inc
xor
jge
jo
in
add
mov
add
fstp
cmps
jo
outs
mov
cmp
lds
inc
in
jmp
and
mul
fisub
push
shl
lds
inc
outs
xor
pop
add
jle
pop
pop
jle
pop
pop
jle
add
xor
add
test
mov
jle
in
test
xchg
mov
xchg
sbb
cmc
cmp
xor
(bad)
retf
lea
push
ret
mov
cmp
mov
or
add
jg
add
xchg
into
cmps
int
add
sub
clc
inc
cmp
add
or
pusha
cmps
lds
sub
xor
(bad)
in
out
cwde
js
mov
lahf
lea
mov
inc
pop
in
add
or
cs
and
mov
add
dec
fdivr
mov
lahf
(bad)
retf
(bad)
cmc
and
pop
sti
mov
imul
xchg
shl
sub
push
hlt
xor
xor
xor
cmps
cmp
mov
js
int
outs
pop
sub
in
enter
mov
add
out
std
mov
(bad)
cli
sti
xor
xchg
ins
(bad)
into
lds
sti
xchg
int
xlat
in
add
xchg
mov
jns
jl
adc
xor
add
addr16
add
(bad)
cli
sti
xor
xchg
ins
(bad)
into
lds
sti
xchg
int
xlat
in
xor
add
add
inc
outs
out
adc
jle
sti
int
outs
out
and
jg
(bad)
hlt
(bad)
cli
sti
aaa
or
add
sti
xchg
int
xlat
in
cld
imul
dec
cmp
mov
js
int
outs
mov
jle
test
xor
jecxz
jo
or
bound
pop
jns
jbe
adc
xor
add
not
sub
dec
or
xor
xchg
jmp
xor
jns
je
adc
xor
add
sub
sti
cmp
xchg
ins
xor
lds
sti
xchg
int
xlat
in
or
xchg
add
inc
outs
out
and
mov
js
int
outs
and
or
xor
xchg
xchg
adc
jle
hlt
lds
js
mov
jo
adc
xor
add
xchg
xchg
add
adc
outs
xor
vpshufd
jmp
xchg
int
out
add
aas
xchg
ficomp
pop
inc
xor
cmp
lods
aas
xchg
outs
cmp
mov
ja
xor
rcr
ja
aam
add
int3
cmp
int
fstp
mov
bound
sub
cmp
pusha
add
xchg
ret
mov
xchg
and
or
div
les
in
add
xchg
rcr
jle
pop
imul
push
loope
xchg
mov
push
rol
inc
adc
cmp
cmp
mov
jo
int
outs
das
and
xchg
hlt
xchg
jno
add
out
std
mov
add
sti
xor
xchg
ins
sahf
int3
lds
sti
push
int
xlat
in
int3
imul
int
test
push
inc
mov
jle
sbb
xchg
arpl
xor
mov
xor
xchg
ins
aad
lds
sti
push
int
xlat
in
clc
imul
xor
jo
int
inc
test
jp
adc
xor
add
lds
xchg
add
(bad)
cmp
retf
add
out
sbb
mov
jo
int
outs
and
xchg
js
adc
xor
add
lds
xchg
add
(bad)
cmp
retf
add
out
dec
cmp
sti
int
outs
push
daa
jle
(bad)
ret
(bad)
hlt
(bad)
cmp
retf
or
outs
out
push
mov
jo
int
outs
aaa
daa
jle
test
ja
adc
xor
add
lds
xchg
add
(bad)
cmp
retf
push
inc
outs
out
scas
cmp
sti
int
outs
sti
es
test
jne
adc
xor
add
lds
xchg
add
div
aam
add
lds
cmp
retf
or
out
in
cmp
sti
int
outs
mov
(bad)
lea
int
repnz
xor
add
lds
xchg
add
(bad)
cmp
retf
or
out
and
cmp
mov
outs
(bad)
es
ins
inc
faddp
add
sti
push
int
xlat
in
es
js
mov
sti
pop
repz
push
ret
daa
inc
xor
or
fiadd
push
sbb
ret
je
int
mov
aas
std
cmp
lds
mov
jmp
jo
mov
or
ret
in
add
push
daa
inc
xor
add
cmp
add
retf
or
xor
in
xor
add
ret
jnp
int
xchg
mov
test
(bad)
cmp
into
cmp
xor
mov
or
sub
jle
ret
jnp
int
aas
dec
push
jle
repz
add
lds
add
retf
push
pop
dec
pop
inc
xor
add
into
cmp
xor
inc
or
add
(bad)
movs
gs
mov
test
into
mov
cmp
cmp
jle
cmp
mov
mov
mov
push
pop
inc
xor
add
int3
cmp
xor
ja
ret
ins
mov
popa
pop
inc
xor
add
retf
push
fiadd
inc
sbb
xor
add
jle
mov
outs
daa
es
mov
lds
js
mov
xchg
bound
xchg
fnsave
or
bound
out
pop
jmp
xchg
int
outs
retf
and
push
or
xchg
xchg
adc
jle
or
mov
jnp
int
xlat
ins
enter
mov
adc
add
mov
add
retf
push
fcmovu
xchg
add
adc
ins
(bad)
cmps
lds
sti
jnp
int
xlat
in
dec
jecxz
sti
mov
mov
xor
mov
std
inc
add
pop
adc
jle
lea
div
aam
add
lds
cmp
retf
push
cmp
jle
mov
xchg
pop
out
es
xor
(bad)
fdiv
or
bound
add
and
or
into
cmp
xchg
mov
xor
or
xchg
mov
xor
and
pop
or
out
js
mov
cmp
cmp
out
js
hlt
cli
cmp
cmp
out
js
mov
push
repz
test
div
aam
add
lds
xor
retf
mov
cs
shr
cmp
mov
outs
jnp
jle
xchg
outs
or
bound
push
cmp
ret
jnp
int
shr
sub
mov
or
outs
jb
addr16
xor
add
mov
into
xchg
bound
js
inc
outs
xchg
sti
jnp
int
xlat
in
inc
ins
xchg
ret
jnp
int
ror
int
sti
add
sub
and
mov
cs
add
retf
jae
int
out
out
xchg
adc
in
push
xchg
push
adc
into
cmp
sub
js
fiadd
inc
or
sti
(bad)
stc
int
js
fiadd
xchg
add
jmp
jge
xchg
pushf
add
dec
xchg
add
daa
outs
test
ins
and
ror
xor
mov
sub
add
pop
(bad)
icebp
push
adc
jg
sbb
xchg
cmps
push
xor
adc
xchg
xlat
adc
fidiv
add
daa
push
out
lods
inc
xchg
cmp
add
jnp
cdq
jae
adc
jle
fadd
popf
push
add
aas
xchg
push
outs
xchg
add
daa
and
in
add
xchg
xchg
cmps
adc
jle
out
icebp
pop
xchg
jp
add
repz
int
(bad)
in
cld
outs
xchg
jg
xchg
xchg
cmp
mov
outs
pop
cmp
int
xchg
mov
xchg
std
xor
xchg
pop
repz
jle
add
lds
mov
outs
cmps
es
mov
arpl
inc
repz
cwde
sub
mov
idiv
cmps
(bad)
int
add
(bad)
ja
jle
or
cmp
push
mov
test
into
mov
std
inc
gs
(bad)
int
add
mov
cmp
add
sti
sub
int
xchg
adc
xchg
mov
mov
mov
push
int
inc
sbb
cmp
xor
dec
fdiv
or
bound
push
div
add
jle
sub
cmp
xor
add
fidivr
inc
sti
int
add
fidiv
inc
sbb
jle
sub
jle
add
xor
je
adc
xchg
lds
out
es
xor
inc
fdiv
out
inc
lods
aas
xchg
nop
ins
xchg
ret
in
int
or
ss
add
pop
xchg
(bad)
loope
pop
retf
xor
pop
movs
jo
out
ret
xchg
lds
or
jmp
sti
int
mov
in
xchg
rcr
ins
cdq
cmps
lds
out
es
xor
inc
fdiv
out
and
ds
jo
xchg
ret
gs
mov
lds
pop
xchg
(bad)
loope
pop
fcomp
xor
pop
movs
jo
out
ret
xchg
mov
xchg
add
std
inc
inc
mov
or
add
ja
add
lea
(bad)
jmp
outs
xor
outs
xor
ins
xor
inc
pop
jle
inc
xor
push
inc
xchg
push
fcmovbe
mov
mov
xchg
cmp
push
mov
adc
add
repz
int
add
int
pop
cmp
jle
std
pop
jle
jno
sub
mov
sub
xchg
in
add
cmp
push
pop
jl
hlt
sar
sti
inc
retf
cmp
pusha
rol
ret
jno
add
cmp
push
mov
adc
add
repz
int
add
int
pop
cmp
jle
std
pop
jle
jno
sub
mov
sub
xchg
in
add
cmp
push
pop
jl
hlt
sar
sti
inc
retf
cmp
retf
cmp
xchg
popf
push
add
or
fbstp
push
inc
rcr
mov
jae
push
inc
(bad)
repz
xchg
dec
jle
outs
xor
push
inc
out
test
jle
add
(bad)
mov
test
add
out
jle
add
adc
in
mov
cmp
ja
test
jle
fcomp
cmps
push
(bad)
cmc
cmp
xor
ret
ja
xchg
jle
inc
mov
outs
xchg
cmp
xor
outs
xor
outs
xor
ins
xor
add
lahf
pop
inc
xor
data16
in
add
jnp
add
fld
nop
cmp
xor
in
jo
xchg
jle
cmps
add
xchg
xor
test
out
xchg
jmp
add
add
xor
outs
and
jle
lea
jmp
jle
in
lock
add
jg
sti
cmps
shr
int
add
xor
(bad)
jmp
mov
mov
adc
add
pop
pop
inc
xor
xlat
mov
jle
add
mov
mov
add
jle
add
lds
jle
add
jmp
jmp
sti
int
in
add
jle
call
xor
in
cmp
xchg
xchg
invd
xor
sbb
push
cwde
ja
jle
add
jle
jmp
jle
push
ficom
mov
adc
ins
(bad)
jg
add
jg
xor
loope
add
daa
mov
xchg
lahf
mov
xlat
in
mov
add
mov
or
outs
mov
jle
outs
xor
outs
xor
ret
xchg
ror
xor
les
fcomp
mov
adc
sub
loope
xchg
mov
push
rcr
push
jge
add
cmp
and
add
xor
popa
xor
in
clc
jbe
add
outs
xchg
jno
jbe
jle
cmp
jg
add
gs
or
inc
mov
or
fninit
pop
std
mov
add
cli
push
add
jle
icebp
jmp
push
xor
xchg
mov
sbb
xchg
call
xchg
movs
loopne
add
iret
cmp
int
js
fiadd
mov
ja
or
repz
iret
cmp
jae
outs
repz
or
mov
jp
int
add
iret
cmp
loop
js
sbb
dec
stc
int
mov
adc
sti
pop
stc
int
add
ss
adc
iret
cmp
int
push
jo
adc
(bad)
mov
jp
int
add
iret
cmp
int
lods
sub
adc
outs
xor
xchg
cwde
jae
add
mov
cmp
lds
jno
les
retf
xchg
push
xor
push
or
xchg
sbb
inc
xor
cmp
lds
or
sti
int
pop
cmp
lds
jno
mov
push
xor
xchg
clc
loop
sbb
add
xchg
add
aas
xchg
push
jns
add
jle
add
jle
in
imul
inc
xor
or
jbe
jno
xchg
xchg
or
jle
push
pop
jle
repz
add
iret
cmp
xor
inc
test
test
push
lods
add
inc
adc
xor
xchg
inc
xor
xchg
inc
xor
aas
xchg
inc
adc
inc
cmp
xchg
inc
and
or
aas
xchg
inc
adc
aas
xchg
mov
add
outs
outs
out
jle
(bad)
mov
jns
int
cmp
xchg
inc
and
xor
aas
xchg
push
aaa
adc
jle
jno
xchg
aas
or
jle
sti
int
xchg
inc
outs
outs
fwait
ds
mov
lds
js
mov
cmp
std
and
iret
cmp
int
xlat
in
mov
sti
outs
stc
int
push
ret
mov
xchg
and
sub
int
xchg
sti
xchg
int
xlat
sti
pop
xchg
sbb
xchg
imul
jle
mov
xor
cmps
outs
xor
ins
popa
cmps
lds
jle
push
cmp
sti
pop
xchg
sbb
xchg
or
jle
repnz
jle
(bad)
retf
(bad)
cmc
hlt
add
mov
jp
int
add
iret
cmp
jo
xchg
mov
xchg
push
js
xor
xor
xor
add
repz
int
add
int
pop
cmp
jle
std
mov
xor
xchg
lds
jecxz
sti
int
aam
int3
in
js
mov
mov
int
xchg
pop
in
add
jle
aaa
jmp
push
xor
xor
or
add
jle
or
xchg
aad
add
iret
cmp
int
js
mov
adc
add
sti
jb
int
xlat
in
mov
xchg
mov
xchg
sti
xchg
int
xlat
sti
pop
bound
inc
xor
pop
mov
xor
cmps
outs
xor
ins
cmp
lds
jle
push
cmp
sti
pop
bound
inc
xor
outs
bnd
mov
std
dec
sti
jb
mov
xchg
outs
repz
jle
add
cdq
push
inc
xor
in
adc
int
fwait
xchg
jb
outs
retf
cmp
in
repz
add
sti
xchg
int
xchg
(bad)
xor
mov
cmp
or
cmps
outs
xor
ins
aad
lds
jle
out
jle
sti
pop
bound
inc
xor
outs
xchg
jle
test
jg
xor
outs
cmc
mov
mov
cmp
iret
cmp
xor
add
iret
cmp
xor
inc
adc
add
push
int
pop
movs
jo
outs
sti
cmp
test
jle
and
jle
add
mov
xchg
pop
ja
add
dec
pop
movs
jo
outs
adc
jle
in
cmp
add
xchg
(bad)
ins
xor
xor
repz
iret
cmp
xor
add
iret
cmp
xor
inc
adc
add
push
int
stos
fwait
jae
outs
xchg
cmp
test
jle
and
jle
add
(bad)
push
inc
xor
in
xor
add
dec
stos
fwait
jae
outs
stos
cmp
in
xchg
jge
add
xchg
xor
repz
iret
cmp
xor
add
iret
cmp
xor
inc
adc
add
push
int
scas
fwait
jae
outs
sub
jle
test
jle
and
jle
add
adc
xchg
test
xchg
jle
inc
cmp
in
or
add
repz
int
add
int
pop
cmp
jle
std
mov
test
adc
outs
xor
stos
shl
in
add
sbb
sub
aas
xchg
and
add
jp
add
mov
js
fld
mov
cmp
xor
sti
add
inc
stc
and
jle
add
push
push
inc
xor
in
adc
xchg
jle
xlat
xor
jl
add
sti
js
int
xchg
int
test
idiv
retf
mov
or
bound
stos
fdiv
or
bound
add
and
js
xor
xor
xor
add
ret
xchg
int
xchg
adc
outs
xor
xchg
shl
in
add
rol
and
aas
xchg
push
xor
cli
int3
cmp
mov
jns
int
add
xor
sti
add
inc
stc
and
jle
add
nop
push
inc
xor
in
pop
jns
add
dec
cmps
fwait
jae
outs
pop
xor
jl
add
sti
jns
int
xchg
int
dec
sti
jb
mov
or
mov
cld
add
xchg
int
xlat
mov
cs
sub
cmp
mov
outs
or
jle
xchg
outs
aas
mov
aad
add
iret
cmp
int
inc
outs
xor
outs
ss
outs
xor
xchg
ds
inc
lods
aas
xchg
movs
jnp
add
sti
jae
int
in
push
pop
jle
add
retf
jae
int
outs
cmps
aaa
jle
test
push
xor
jle
inc
mov
jle
int3
int
pop
cmp
jle
std
mov
jmp
stc
int
aad
pop
dec
push
inc
xor
js
call
jle
add
adc
ins
ret
add
retf
jae
int
outs
mov
mov
std
dec
sti
jb
mov
outs
xor
adc
iret
cmp
iret
cmp
int
outs
xchg
aaa
jle
outs
xor
add
iret
cmp
sar
sti
xchg
inc
xor
mov
cmp
outs
add
mov
xchg
aas
xchg
mov
add
jle
add
jp
add
jle
add
jle
ins
adc
mov
test
(bad)
retf
lea
cmc
add
iret
cmp
xor
sti
xchg
xor
xor
or
mov
inc
mov
xchg
xchg
(bad)
pop
jle
xchg
ret
sti
pusha
sub
xchg
xchg
jae
xor
add
sti
ja
int
xlat
outs
xor
imul
jle
mov
cmp
cmps
add
xor
int3
cmp
cmc
jnp
mov
jle
add
jle
cld
sbb
in
add
xor
push
(bad)
fdiv
out
push
xchg
ins
xor
test
clc
or
int
inc
sbb
jnp
xor
loope
add
stos
add
das
sbb
jle
jecxz
sti
addr16
int
push
ret
fldcw
jno
xor
sti
inc
jbe
out
jle
pop
ins
and
ror
popa
sub
pop
cmp
shl
(bad)
retf
(bad)
cmc
cmc
ret
jle
add
jno
aad
jle
xchg
mov
mov
xchg
inc
mov
xchg
cmp
jno
xor
add
xchg
mov
inc
mov
scas
aas
xchg
xor
add
dec
pop
movs
jo
repnz
dec
stos
fwait
jae
outs
imul
xchg
pop
push
sbb
or
xor
push
cld
lds
inc
aas
pop
bound
inc
xor
mov
pop
push
sbb
xchg
mov
sbb
mov
js
adc
mov
add
mov
lods
aas
xchg
(bad)
mov
add
jne
xor
jecxz
add
outs
add
mov
lods
aas
xchg
(bad)
mov
add
mov
lds
mov
retf
lea
push
ret
add
mov
or
adc
mov
jle
add
jle
xor
loope
add
js
sbb
loope
add
xchg
dec
sbb
jle
xor
jmp
add
js
sbb
out
mov
jle
add
jle
xor
loope
add
js
sbb
out
add
dec
add
mov
jle
fild
js
es
push
popa
xchg
repz
jle
add
jle
pop
imul
lds
out
xchg
jle
and
(bad)
lds
out
xchg
jle
and
(bad)
lds
out
xchg
jle
and
(bad)
lds
out
xchg
jle
and
(bad)
lds
out
xchg
jle
and
(bad)
lds
out
xchg
jle
and
(bad)
lds
out
xchg
jle
and
(bad)
lds
out
xchg
jle
(bad)
xlat
das
shr
mov
add
mov
movs
outs
adc
jg
bound
add
cmp
ret
mov
shr
cmp
cmp
or
cmp
jo
std
jg
inc
lea
jno
add
mov
cmps
jo
adc
in
hlt
jle
add
jg
outs
xor
outs
aas
fld
fiadd
xor
adc
jle
add
inc
xchg
jle
out
sbb
data16
jle
push
push
jbe
les
stc
jge
pushf
mov
jnp
or
push
jbe
(bad)
dec
pop
xor
call
mov
add
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
(bad)
lds
out
xchg
jle
and
(bad)
lds
out
xchg
jle
and
(bad)
lds
out
xchg
jle
and
(bad)
lds
out
xchg
jle
and
(bad)
lds
out
xchg
jle
and
(bad)
lds
out
xchg
jle
and
(bad)
lds
out
xchg
jle
and
(bad)
lds
out
xchg
jle
and
(bad)
lds
out
xchg
jle
and
(bad)
lds
out
xchg
jle
and
(bad)
lds
out
xchg
jle
and
(bad)
lds
out
xchg
jle
and
(bad)
lds
out
xchg
jle
and
(bad)
lds
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
lds
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
jle
and
mov
add
out
xchg
.byte
