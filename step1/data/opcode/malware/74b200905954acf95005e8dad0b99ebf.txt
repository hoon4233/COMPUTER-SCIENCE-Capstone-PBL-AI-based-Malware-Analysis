adc
lods
clc
imul
jae
jbe
jl
xor
jnp
and
arpl
in
mov
and
and
test
ss
pop
fiadd
jae
jbe
cli
add
jae
std
test
add
push
loopne
fisttp
enter
popa
inc
push
std
loopne
scas
cmp
jnp
ds
pop
(bad)
push
mov
pop
mov
and
jp
sub
shl
sbb
jbe
push
sub
jbe
sub
sub
adc
lods
xchg
outs
lahf
sub
std
mov
scas
xor
shr
imul
sbb
and
jae
jns
iret
and
mov
xor
out
xor
xor
or
cmc
adc
jbe
jg
cmc
nop
cld
and
push
jae
popa
sbb
jbe
jae
inc
pop
xor
je
inc
xchg
xor
clc
addr16
dec
xchg
xor
and
and
dec
pop
xor
xor
add
in
cli
sbb
xor
and
js
sub
pop
or
jle
fwait
jns
call
and
mov
mov
cmc
sub
jp
clc
and
xor
mov
jnp
jp
clc
adc
add
inc
in
popf
es
cld
sbb
and
adc
loope
xchg
jae
ret
addr16
jae
jbe
js
cmc
nop
jae
cmc
sub
mov
push
dec
jbe
jbe
(bad)
scas
jae
jbe
jae
jle
sbb
in
lock
in
push
jno
jb
jbe
cwde
add
adc
push
pop
mov
xor
jbe
mov
mov
arpl
or
jae
mov
retf
and
in
jae
sub
mov
dec
rol
jbe
push
and
in
jae
jbe
fwait
test
xor
cs
jb
jbe
cwde
repnz
and
xchg
xchg
push
jbe
gs
pop
lods
push
in
jae
jbe
lahf
xor
adc
cld
dec
enter
enter
rcl
call
sbb
push
pop
xor
jbe
ss
jbe
mov
pop
pop
xor
xor
mov
push
pop
xor
xor
fwait
push
add
jae
mov
inc
in
jmp
or
aad
jae
jbe
jae
dec
retf
cmp
fstp
and
into
(bad)
and
test
jmp
xchg
mov
cli
loop
in
sbb
sbb
sbb
push
jl
and
jbe
mov
dec
into
jae
or
(bad)
(bad)
sub
fimul
pop
sbb
popa
not
lds
mov
in
and
popa
neg
lds
mov
add
push
jbe
repnz
jae
and
in
inc
rcr
jae
repnz
int
in
jae
cmc
sub
mov
jae
add
inc
in
pop
outs
cmps
mov
retf
retf
cs
jae
xchg
gs
adc
lds
mov
fnsave
out
gs
je
mov
jp
test
(bad)
pusha
mov
and
jbe
jae
jbe
jae
add
mov
add
pop
jbe
cli
jecxz
sub
add
jp
add
inc
in
ror
mov
push
xor
mov
jae
jmp
mov
add
pop
jbe
jp
add
inc
in
cli
lock
mov
push
and
out
jae
jbe
jp
mov
sub
sub
xchg
cmps
call
mov
push
inc
inc
jbe
test
jmp
fldenv
test
je
sbb
add
fwait
jno
in
jae
mov
test
fnsave
cmp
add
sbb
add
fwait
paddsb
mov
push
fstp
in
push
jb
mov
js
mov
popf
in
fld
gs
sub
lock
mov
std
cdq
jg
xor
pusha
mov
adc
gs
in
lock
sub
inc
mov
cwde
dec
inc
aaa
clc
pusha
mov
and
gs
in
inc
ficomp
in
mov
jb
jl
(bad)
dec
cmc
add
xor
ins
dec
and
cdq
mov
sbb
pusha
data16
rol
jmp
dec
popf
dec
mov
and
xor
pusha
mov
mov
shl
add
mov
addr16
mov
fmul
(bad)
mov
mov
jbe
sub
sub
or
xor
dec
cwde
jae
and
loopne
js
sub
(bad)
mov
mov
mov
or
gs
mov
mov
jae
(bad)
addr16
ss
mov
fmul
add
and
cmp
test
fs
addr16
loop
jb
mov
xor
test
adc
mov
mov
sbb
fisttp
sbb
fisttp
adc
bnd
jae
repz
jae
mov
lods
xchg
outs
lahf
xor
loopne
pusha
mov
pop
jns
mov
inc
mov
(bad)
test
push
int
xchg
jae
std
xchg
jnp
movs
mov
mov
pushf
sub
ins
or
mov
out
adc
aad
pop
mov
call
(bad)
lods
xor
cli
pusha
xchg
push
sar
test
sub
sub
or
jne
mov
mov
mov
pop
fnstcw
addr16
cs
out
mov
push
int
fwait
jae
std
xchg
jnp
movs
mov
mov
pushf
sub
ins
or
mov
out
adc
aad
pop
mov
in
test
gs
test
(bad)
addr16
ss
sub
cli
shl
and
scas
sub
mov
mov
shl
cs
out
mov
(bad)
addr16
test
push
ss
call
pop
xlat
std
mov
bound
cwde
jbe
mov
cwde
sub
aad
pop
xchg
ins
push
fldenv
sub
jnp
and
and
mov
int3
icebp
inc
jge
lods
mov
mov
scas
jae
add
sbb
scas
jae
sahf
stos
mov
mov
fscale
mov
and
les
and
fisub
fnstenv
mov
mov
cmc
sub
jg
mov
xchg
gs
sub
sub
or
jne
mov
int3
lods
push
xchg
or
mov
add
fwait
or
in
jae
mov
jae
jbe
mov
jbe
and
cdq
jnp
jbe
jae
xchg
lahf
jae
into
test
xchg
lods
xor
loop
call
sub
sub
or
jbe
mov
add
fdiv
and
xor
jae
jge
out
xchg
and
std
stos
ja
add
clc
cmp
jo
inc
scas
outs
adc
sub
jmp
stos
push
jbe
sub
sub
or
leave
push
and
call
pop
(bad)
sub
add
adc
int
pushf
jae
sti
test
xchg
addr16
cli
push
jbe
cli
out
adc
(bad)
sub
jg
jl
mov
ss
jg
push
jae
test
les
sbb
sbb
(bad)
pusha
xchg
lods
mov
mov
lods
jecxz
in
test
inc
lods
xchg
and
test
les
clc
and
clc
and
jae
mov
pushf
ins
cmp
in
sub
sub
pusha
xchg
in
push
jae
mov
popf
jecxz
fnsave
cli
loop
add
fimul
mov
jle
das
lods
xchg
push
pop
and
push
in
jae
and
pop
lods
scas
lds
pop
ret
fimul
outs
push
pop
ret
and
jbe
sub
mov
pusha
jp
or
div
jae
cmc
shr
xchg
jae
outs
dec
out
xchg
and
test
lock
dec
xor
jbe
(bad)
mov
adc
sub
xchg
test
and
mov
and
pop
pop
mov
cmc
sub
mov
jae
add
lock
dec
xor
jbe
repnz
and
and
jbe
(bad)
pusha
cmp
es
fisub
lock
pusha
mov
shl
not
ja
jae
or
jae
repz
jbe
push
fnsave
dec
pop
ret
fimul
gs
rcl
adc
ret
scas
xor
dec
and
pop
xor
or
and
xor
cli
pusha
mov
and
in
jae
jbe
mov
in
sub
mov
xor
pusha
sahf
dec
setno
(bad)
pusha
xchg
xor
jbe
jae
shl
sub
std
ror
push
(bad)
jmp
fimul
xchg
(bad)
and
aad
jae
mov
xor
std
aam
xor
jae
jbe
fnstcw
push
adc
xor
std
jmp
(bad)
mov
es
out
xchg
and
jbe
jae
xor
jp
add
mov
or
and
std
test
mov
mov
pop
and
aad
jae
add
sar
std
fmul
std
test
jl
pop
adc
xor
jae
ss
and
mov
das
sub
sub
or
leave
mov
leave
and
sub
or
jae
and
or
push
fnstenv
ss
jns
jecxz
jbe
jp
add
mov
mov
jae
jbe
sub
cli
loop
xchg
cli
aad
xor
cmps
mov
push
js
test
jb
inc
cwde
jnp
inc
cwde
ja
adc
jae
xor
(bad)
popa
jne
and
dec
xor
jbe
mov
call
ret
mov
scas
jae
sahf
add
outs
push
fnstenv
push
fnstenv
and
and
aad
(bad)
addr16
cmp
outs
push
fnstenv
test
mov
xchg
lods
xor
loop
lock
add
dec
(bad)
add
cwde
aaa
std
test
dec
sbb
call
lock
mov
cli
fld
cli
loop
addr16
jns
inc
fimul
in
lock
mov
pop
sub
jne
and
jbe
or
xchg
jbe
ja
jbe
jae
jbe
jae
push
in
in
fs
push
dec
jbe
cli
pusha
mov
jae
sahf
ficomp
jmp
repz
push
fdivr
sbb
and
push
sub
or
(bad)
pusha
cmp
jbe
push
fstp
gs
xchg
gs
test
push
fstp
mov
jle
das
lods
xchg
push
(bad)
sbb
jae
and
ins
popf
lds
cli
mov
jmp
repnz
out
and
mov
jae
xchg
or
and
jbe
not
mov
mov
mov
jl
sub
mov
push
std
jmp
sbb
jbe
push
dec
jbe
cli
mov
push
std
jmp
mov
sti
imul
(bad)
sub
dec
jo
addr16
pop
out
into
mov
and
repz
mov
mov
test
or
fisttp
scas
jae
std
aam
jb
gs
push
xchg
xor
(bad)
jmp
fimul
imul
and
mov
and
jbe
jae
jmp
not
jle
jae
mov
and
jbe
mul
mov
mov
jo
addr16
clc
sbb
xor
jp
jns
jno
jbe
sbb
lods
jae
ret
sub
fisttp
adc
loope
gs
call
fimul
adc
addr16
stos
or
gs
repz
mov
mov
jne
aam
jb
gs
jl
into
jmp
and
mov
mov
jbe
repz
mov
(bad)
fidiv
idiv
ja
sub
mov
es
ror
gs
call
fimul
(bad)
jae
jns
test
adc
jns
dec
daa
jbe
jl
repz
mov
mov
fisttp
lods
jae
lea
jg
shr
mov
mov
jae
shl
lock
(bad)
fidiv
dec
dec
ret
and
jbe
repnz
leave
jae
sbb
sbb
xchg
scas
jae
es
xor
mov
sub
mov
ja
mov
cwde
mov
(bad)
fisub
add
ror
ror
mov
fcmovnu
mov
jb
jbe
sbb
sub
and
adc
cmps
mov
dec
fimul
xchg
iret
or
and
mov
and
mov
sub
mov
jae
add
mov
ficom
(bad)
fidiv
jae
sbb
sbb
es
xor
mov
sub
mov
ja
retf
in
(bad)
cwde
mov
(bad)
fisub
add
ror
ror
mov
fcmovnu
mov
jb
jbe
sbb
dec
xchg
addr16
and
adc
cmps
mov
dec
fimul
xchg
iret
or
and
mov
and
xor
mov
cmc
sub
mov
jae
add
mov
ficom
(bad)
fidiv
jae
push
(bad)
jmp
fimul
in
sbb
es
xor
mov
sub
mov
repz
mov
mov
jae
jbe
jb
cmc
or
and
jbe
adc
adc
loope
ror
mov
fcmovnu
mov
jb
jbe
sbb
xchg
xchg
addr16
and
adc
cmps
mov
dec
fimul
xchg
iret
or
and
mov
and
fstp
mov
cmc
sub
mov
jae
add
sbb
pushf
xchg
addr16
into
fmul
jle
fimul
adc
repz
mov
mov
jae
jbe
sub
jae
retf
inc
mov
mov
push
xor
in
jae
repz
mov
mov
mov
push
pop
xor
xor
rol
scas
jae
scas
(bad)
fmul
div
jbe
and
jae
repz
fisttp
adc
fisub
mov
pusha
mov
mov
repz
jbe
neg
std
imul
add
scas
in
stos
lods
mov
push
fnstenv
mul
jb
jae
sar
mov
mov
repnz
fsub
fimul
push
mov
mov
jl
ret
in
jae
imul
pop
pop
jbe
adc
fisttp
dec
mov
mov
jae
jbe
imul
sti
imul
scas
repz
fisttp
mov
nop
lods
repz
mov
repz
xchg
scas
jae
repz
fisttp
clc
dec
and
xor
jp
jns
dec
and
(bad)
mov
es
mov
mov
aam
mov
in
jae
jmp
stos
lods
mov
push
fnstenv
mul
repz
fisttp
adc
fisub
aam
pusha
mov
mov
repz
jbe
or
in
jae
pop
popa
test
adc
mov
and
jmp
jae
or
(bad)
(bad)
das
lock
mov
jl
mov
jae
sti
imul
fisttp
mov
cli
std
inc
xor
out
xchg
(bad)
and
jbe
repnz
pop
mov
cmc
dec
sbb
adc
ret
adc
fisttp
in
(bad)
mov
es
dec
jbe
lock
outs
(bad)
leave
mov
mov
jbe
jae
popf
xchg
neg
mov
nop
call
fimul
or
and
mov
and
dec
xor
sub
scas
lds
mov
je
clc
mov
jmp
fimul
adc
lods
mov
mov
iret
call
(bad)
test
fs
mov
xor
jbe
jae
shl
int
adc
pop
gs
jl
sbb
jae
cmc
dec
xlat
fimul
adc
mov
mov
ins
xchg
addr16
idiv
std
aam
xor
jae
jbe
fnstcw
jl
pop
out
jae
neg
cmp
mov
test
jne
aam
jb
gs
jl
mov
jae
cmc
dec
fcmovnu
mov
jae
xchg
in
jae
sbb
fstp
jae
push
std
jmp
adc
fisttp
inc
mov
mov
pop
mov
mov
mov
(bad)
add
xchg
push
ja
jbe
add
adc
leave
gs
pushf
jb
jae
test
cwde
rcl
(bad)
fisub
addr16
fisub
cwde
cli
pusha
mov
jbe
test
jmp
fimul
xchg
(bad)
and
jbe
lock
(bad)
fidiv
mul
push
pushf
xchg
addr16
mul
std
aam
xor
jae
jbe
fnstcw
jl
pusha
in
jae
cmc
push
neg
mov
jae
repnz
and
mov
mov
in
mov
std
imul
scas
dec
adc
scas
lds
fnstenv
idiv
jbe
jae
cmc
push
adc
mov
jnp
repz
jbe
into
dec
mov
mov
jbe
(bad)
mov
es
dec
mov
mov
or
mov
cmc
sub
mov
cli
cwde
adc
das
jbe
repz
sub
mov
jbe
imul
repz
fisttp
xchg
ret
inc
mov
mov
fmul
mov
addr16
neg
mov
mov
retf
jbe
mov
sti
popa
mov
mov
lock
mov
fdivr
imul
and
mov
(bad)
mov
es
mov
mov
mov
and
jmp
sub
jb
neg
mov
mov
mov
addr16
neg
mov
mov
sbb
neg
or
in
lock
repnz
scas
rep
mov
mov
lods
scas
sbb
fisttp
inc
mov
mov
test
inc
mov
mov
icebp
sub
dec
mov
mov
scas
repz
fisttp
mov
mov
mov
ror
mov
mov
icebp
retf
mov
mov
mov
push
and
adc
push
in
jae
or
(bad)
(bad)
das
clc
mov
es
fisub
in
cwde
cmps
adc
scas
repz
fisttp
mov
mov
mov
pop
sub
imul
sub
mov
and
std
imul
sub
jmp
clc
mov
es
fisub
in
add
mov
out
gs
dec
mov
mov
xlat
in
jae
jbe
pop
lods
push
in
jae
jbe
lahf
xor
add
pusha
xchg
xlat
inc
mov
fldenv
(bad)
and
xor
mov
jge
in
jae
jge
jae
cmc
sub
add
mov
cmc
shl
xchg
xor
jae
test
inc
loop
adc
mov
xchg
and
in
jae
xor
scas
adc
pusha
stos
not
fnsave
push
stc
call
inc
(bad)
cdq
scas
into
les
(bad)
mov
mov
test
jae
jbe
mov
lods
xchg
mov
push
jo
adc
ret
(bad)
lods
mov
repz
xor
sbb
push
lods
jae
jbe
jae
sbb
and
xchg
(bad)
jae
sub
lock
bound
int
dec
push
adc
adc
ret
lods
scas
outs
push
and
lods
jae
call
aad
sub
add
xor
jmp
leave
jnp
ss
jae
jae
out
fs
jae
jbe
jbe
out
lods
jae
jbe
jae
mov
lods
jmp
jne
and
or
jae
dec
adc
jbe
cld
push
je
jae
push
imul
sub
xor
jbe
mov
add
and
push
jecxz
in
outs
xchg
and
gs
dec
mov
je
jae
jnp
in
fs
test
jecxz
or
shl
jmp
add
fs
jbe
jmp
adc
jmp
sbb
jecxz
jmp
jbe
jmp
in
jae
mov
pop
xchg
xor
test
outs
jae
and
mov
pop
es
repnz
loope
mov
ss
and
jbe
inc
fimul
jae
and
mov
jo
jbe
repnz
cld
jae
mul
imul
adc
aaa
in
jnp
jno
mov
xchg
out
jae
imul
adc
in
repz
xor
aaa
in
shl
lods
jae
xchg
adc
aaa
in
jb
jno
mov
ret
out
jae
call
aad
sub
sub
xor
jmp
jae
jbe
jae
rcl
fiadd
in
jno
jno
mov
(bad)
out
jae
test
repz
xor
out
lods
jae
jbe
jae
std
adc
xor
mov
dec
jae
and
jmp
repz
xor
jbe
ror
jmp
jae
jae
in
fs
ins
dec
jbe
test
jmp
jle
jmp
or
lahf
mov
je
jbe
jmp
in
jae
xlat
test
fs
jbe
out
jae
enter
xlat
add
fs
jbe
jmp
in
jae
mov
pop
xchg
xor
lock
xor
jbe
cli
aad
sbb
jecxz
jmp
jo
cld
in
jae
inc
sub
jmp
in
jae
jnp
in
fs
repnz
loop
and
jbe
and
jae
shl
in
pop
and
cs
mov
repz
addr16
repz
dec
and
jbe
dec
ficom
mov
xor
repz
xor
jae
(bad)
addr16
pop
test
jmp
cwde
pop
mov
dec
mov
inc
sbb
jecxz
loope
mov
jnp
mov
daa
in
jae
neg
fld
in
mov
add
and
aaa
in
xor
repnz
jbe
mov
push
xlat
scas
jae
xchg
sub
xor
jbe
fidivr
jbe
xlat
scas
jae
xchg
jmp
pusha
mov
lds
shl
mov
not
mov
jle
xor
jbe
jl
xor
dec
movs
jbe
jae
jge
aaa
mov
jle
xor
aaa
in
jno
arpl
jbe
and
cmp
sub
popf
scas
repz
mov
push
add
loope
mov
xchg
sub
rol
jmp
jae
shr
mov
jno
ss
xchg
mov
add
repz
(bad)
in
push
and
jmp
ja
xchg
sub
jae
popf
hlt
cli
in
aaa
addr16
lods
jae
jbe
ja
dec
jne
and
ss
shr
jae
jecxz
jbe
test
cwde
mov
and
out
jae
popf
hlt
cli
in
aaa
addr16
lods
jae
jbe
ja
fimul
and
ss
rcr
jae
jecxz
jbe
test
jae
(bad)
addr16
mov
mov
in
inc
in
mov
in
mov
cli
shl
and
fisub
mov
ret
jmp
jbe
ret
dec
jg
xor
jbe
mov
gs
xor
jbe
sar
scas
jae
pop
push
xor
jbe
shl
xor
or
pusha
mov
dec
dec
push
xor
jbe
rcl
jmp
jae
cmp
add
jp
in
rcl
sub
and
jbe
sar
scas
jae
sub
lock
push
mov
inc
and
gs
and
gs
jae
(bad)
addr16
neg
fidivr
and
jbe
jae
scas
in
stos
lods
mov
push
leave
jbe
ss
jmp
xor
icebp
shl
cmc
mov
and
xor
lock
cmps
in
cli
std
inc
xor
out
mov
and
in
jae
xor
jb
jbe
retf
inc
push
in
jae
xchg
gs
add
and
jae
(bad)
addr16
ss
je
jae
into
xchg
and
xor
out
test
jae
adc
or
push
cmps
push
jbe
jbe
add
in
jae
jbe
shl
shr
lods
jae
scas
(bad)
mov
xor
dec
jbe
jae
jb
jne
add
fwait
mov
xor
add
pusha
(bad)
mov
adc
ret
dec
jbe
push
test
sbb
mov
jae
into
daa
xor
xor
mov
jae
mov
pop
xchg
xor
(bad)
pusha
sahf
mov
shl
shr
lods
jae
xor
cwde
and
pop
xlat
add
sub
sub
or
leave
push
sub
fst
xor
lods
xor
cli
pusha
xchg
sbb
sar
scas
lods
xor
clc
pusha
jp
ss
mov
lock
sub
idiv
mov
sbb
sbb
sbb
test
fwait
jne
cdq
mov
popa
shl
xchg
inc
jae
and
jno
push
fldenv
jae
mov
mov
imul
adc
(bad)
sub
mov
xor
jae
xchg
xchg
jae
or
mov
mov
outs
lahf
sub
in
js
adc
ret
adc
jecxz
and
mov
jns
aaa
adc
mov
jns
aaa
adc
and
jns
aaa
adc
mov
jns
aaa
adc
mov
jl
jae
std
test
jbe
(bad)
sti
xor
fidiv
lds
jecxz
and
iret
addr16
lds
dec
aad
sub
jnp
and
jns
xor
jl
(bad)
in
jae
call
lock
je
lds
pusha
aad
push
or
out
jl
(bad)
cli
dec
out
cmp
cmc
add
sub
call
jae
add
sbb
jns
ja
pop
push
xor
jbe
jl
and
sbb
bound
xor
fwait
jns
in
jae
xor
in
mov
xor
ja
lock
jb
mov
int
gs
test
jbe
mov
and
mov
jb
jbe
cwde
add
sbb
jmp
jae
jns
fidiv
inc
fimul
pop
xor
add
dec
and
cmp
shl
add
movs
dec
jmp
sahf
call
dec
dec
add
dec
fwait
jbe
jae
jge
mov
jo
push
xor
xor
pusha
popaw
daa
sbb
cmc
sub
lods
jb
jb
jbe
repz
push
inc
call
movs
dec
jmp
sahf
out
repz
push
je
adc
int
ins
dec
and
lods
mov
and
ja
dec
add
and
lahf
in
jae
add
lock
mov
xor
ja
lock
jb
mov
and
test
(bad)
popa
jne
jb
cmc
add
scas
and
xor
jae
jbe
dec
sbb
and
in
push
ins
call
int
ins
dec
and
dec
lods
mov
es
jne
add
cli
(bad)
add
sub
call
jge
mov
jae
add
dec
fidiv
jae
outs
add
jg
in
clc
jo
popa
daa
ss
mov
arpl
jae
jbe
repnz
jae
jns
(bad)
fmul
and
lock
jp
and
xchg
xor
clc
push
jle
outs
adc
pop
je
dec
shl
jg
repnz
sbb
jae
add
loopne
int
in
jae
mov
stos
int3
lahf
in
jae
cmc
sub
jae
(bad)
addr16
lds
sub
add
jae
lods
mov
mov
mov
pop
xchg
xor
jl
jb
dec
int
in
jae
push
rcr
add
popf
loop
std
jne
(bad)
scas
(bad)
jmp
xor
ss
call
fld
cwde
add
call
(bad)
popa
imul
mov
mov
in
mov
popa
push
arpl
imul
gs
mov
add
lock
mov
and
lds
and
outs
fwait
and
test
call
adc
xor
xor
lock
mov
mov
cmps
outs
fwait
and
test
cli
and
jae
jbe
and
in
out
mov
arpl
(bad)
mov
jle
das
lods
xchg
push
das
add
fwait
jmp
and
mov
repz
in
fwait
popf
das
in
jae
jbe
jae
add
xor
cdq
adc
xor
je
retf
shrd
in
push
xor
pop
not
cdq
adc
xor
jb
ins
ins
into
(bad)
test
(bad)
jl
repz
pushf
fimul
push
xor
sub
lds
(bad)
jns
sti
mov
sbb
jns
jg
dec
push
xor
jbe
clc
mov
xor
out
lods
jae
sar
mov
sbb
push
push
xor
(bad)
jns
sti
mov
mov
arpl
jge
in
clc
mov
xor
out
jae
repz
pushf
fimul
pop
pushf
fimul
shl
int
jae
jns
fimul
add
test
mov
mov
jno
dec
stc
push
mov
in
jae
bnd
and
test
mov
mov
jno
(bad)
stc
and
xor
xor
repz
xchg
xor
ja
jae
dec
adc
stos
cli
mov
mov
add
and
mov
cli
div
cli
cli
std
jae
jae
jbe
not
cdq
adc
jbe
jae
and
in
cli
jecxz
sbb
nop
out
cli
xchg
retf
adc
fimul
cld
jae
dec
jno
retf
add
sti
mov
and
sub
xchg
xor
lock
jmp
mov
jae
ret
add
test
push
mov
cmc
sub
xor
jp
add
mov
jbe
out
movs
test
mov
xor
mov
push
jno
and
clc
adc
outs
xchg
and
into
fstp
stos
repnz
jae
add
repnz
jecxz
std
jae
arpl
test
mov
cmp
and
(bad)
in
and
adc
jl
imul
mov
pop
adc
cdq
adc
mov
jbe
ret
fcmovb
xor
fimul
in
call
jns
retf
mov
je
xor
xor
mov
lock
out
cdq
adc
mov
jno
xchg
out
jo
mov
xor
pusha
data16
adc
mov
mov
je
xchg
daa
jne
(bad)
and
ins
jns
mov
retf
repnz
add
fidiv
jae
add
mov
add
and
mov
jae
sub
in
fwait
lea
in
jae
repz
lods
fimul
jmp
cli
mov
xor
je
idiv
repz
lods
fimul
adc
jmp
sti
mov
clc
mov
std
jns
sti
mov
jo
jmp
sti
mov
cli
mov
std
imul
ficomp
(bad)
mov
es
stc
test
mov
cmps
cli
mov
dec
mov
add
mov
jmp
cli
mov
jb
stos
xor
mov
jae
mov
jae
jo
sbb
mov
mov
jp
clc
mov
xor
push
loope
and
adc
mov
adc
ret
sub
jns
retf
mov
je
(bad)
stc
test
cmp
inc
jns
and
cdq
adc
arpl
loop
jbe
out
cdq
adc
and
dec
jae
in
cli
mov
jg
jl
push
in
jae
not
dec
and
in
clc
mov
jns
jae
lahf
in
jae
add
repz
jle
jl
dec
in
jae
lahf
div
jbe
not
cdq
adc
jbe
lock
mov
daa
jb
test
adc
mov
lock
addr16
adc
jbe
pop
lods
xchg
daa
not
jae
push
out
repz
xchg
and
aam
push
jl
and
cwde
jp
popf
and
jns
out
test
mov
xchg
out
cli
xchg
arpl
fimul
adc
lahf
in
jae
add
clc
and
jae
jbe
(bad)
test
and
imul
sub
imul
xor
cld
xor
retf
or
fisttp
fimul
dec
lods
fimul
push
sub
dec
in
jae
jbe
push
or
jbe
jae
add
repz
jae
jbe
push
xor
ror
jbe
jae
add
repz
jae
jbe
pop
xor
mov
sti
mov
jp
or
pop
jle
pop
cmp
not
cdq
adc
mov
mov
sahf
call
not
cli
mov
jae
xor
(bad)
rcr
jns
retf
mov
je
stos
in
out
mov
je
ds
push
mov
add
mov
jae
jbe
add
mov
pop
xchg
xor
call
pop
pushf
fimul
pop
pushf
fimul
shl
int
jae
jns
pop
fimul
and
lock
dec
mov
jnp
xor
dec
mov
pop
and
ja
push
ret
pop
cwde
xor
retf
in
jae
shl
(bad)
test
test
gs
test
(bad)
adc
push
xor
jbe
xlat
test
cmp
xor
jbe
xlat
movs
sbb
pop
jbe
repz
adc
mov
in
mov
and
xor
out
jl
and
dec
popa
arpl
push
and
test
repz
mov
repz
mov
add
mov
mov
jbe
jo
sar
sub
pusha
jae
jbe
ss
lods
jae
imul
xor
sub
and
shr
and
jb
fidiv
lds
gs
xchg
jmp
fbstp
jns
mov
push
sub
adc
pop
jb
fidiv
lds
sbb
and
cdq
jg
xchg
jmp
fnsave
ja
xor
jo
xor
out
cs
jo
jecxz
data16
mov
jbe
dec
movs
jbe
jae
jb
fidiv
lds
dec
sbb
jbe
jns
xor
ins
fidiv
fdiv
push
fdivr
icebp
jae
adc
pusha
data16
sar
push
jo
fidiv
jns
xor
jb
or
je
xchg
ins
push
fstp
test
jo
cmc
in
jae
add
repz
mov
jl
xor
sub
sub
or
jae
addr16
sub
cmp
popa
gs
jae
mov
jae
and
jae
call
repz
push
fdivr
sub
jns
jmp
popa
inc
in
jae
jo
lock
sahf
lods
scas
(bad)
jle
das
lods
xchg
push
ja
jbe
fwait
add
and
dec
imul
cli
mov
jmp
pop
(bad)
sub
push
jp
mov
popa
mul
sahf
cli
and
and
sahf
jecxz
and
call
(bad)
sub
sub
xchg
jb
jp
mov
pushf
mov
jbe
jae
add
sbb
jbe
cs
gs
cmps
call
jnp
sti
repnz
in
jae
sbb
sbb
jne
jae
jne
jae
jbe
mov
add
ja
in
cli
jecxz
adc
jbe
jne
xor
lock
xchg
gs
sub
popf
mov
jbe
jbe
cli
out
sub
jne
lods
fwait
loope
in
jae
xor
repnz
jae
sbb
lock
jp
pop
sub
xor
cwde
and
test
mov
mov
fwait
in
daa
in
jae
sahf
push
and
popf
jmp
sub
cli
shl
and
subps
and
gs
jbe
repz
sbb
sbb
mov
push
sub
jbe
mov
mov
jge
jbe
(bad)
fiadd
call
sbb
sbb
sbb
jbe
clc
pusha
jp
mov
mov
in
jae
(bad)
gs
jbe
fldenv
mov
mov
jae
jbe
fldenv
xchg
xchg
and
jbe
repnz
add
jne
in
retf
and
in
jae
sub
xchg
cmps
call
and
test
jmp
jae
imul
jae
sbb
sbb
jbe
mov
add
fwait
lds
in
jae
mov
mov
xchg
gs
sub
fisttp
pop
pop
dec
je
jae
jbe
fwait
shl
jae
jbe
fldenv
adc
xor
sahf
shl
and
mov
jae
cmp
sub
xchg
je
mov
mov
mov
push
fyl2xp1
retf
inc
aaa
cli
cli
popf
jmp
xchg
jb
jb
xor
push
sub
sbb
fiadd
loopne
fs
scas
jae
or
cdq
(bad)
jae
dec
or
and
jbe
mov
inc
aaa
cwde
ss
ja
test
xor
fwait
jno
in
jae
mov
xor
sub
bswap
inc
adc
and
dec
ret
or
pmullw
test
xor
fwait
or
in
pusha
mov
and
gs
mov
in
mov
cli
shl
and
scas
add
mov
mov
fs
ins
fnstenv
xlat
xchg
addr16
xchg
in
sub
pop
pusha
sub
call
xchg
addr16
xchg
ja
in
lock
stos
dec
rol
jae
mov
addr16
cs
(bad)
mov
mov
cmps
call
push
(bad)
std
ja
cli
out
sub
(bad)
ja
lock
call
inc
xchg
in
(bad)
pop
test
mov
jne
jae
test
mov
xchg
gs
jmp
repz
in
push
and
sub
(bad)
outs
in
clc
pusha
jle
les
fs
in
jae
xchg
gs
jmp
jl
xor
jl
xor
and
ins
push
fidiv
cmps
sbb
jno
popf
dec
inc
and
ja
push
fidiv
mov
xchg
ss
sti
pusha
mov
push
movs
popf
or
jbe
lds
jecxz
popa
jae
lock
in
ss
xchg
lea
add
lock
sahf
out
repz
mov
repz
mov
push
repnz
(bad)
jmp
sub
jae
and
jl
lds
and
xchg
jecxz
out
test
stos
lods
mov
ds
and
pusha
call
lods
xor
jb
xchg
sub
xor
std
mov
jne
cmps
jecxz
jo
jecxz
out
test
jl
ss
jo
jecxz
ja
lds
pusha
xchg
pop
jne
scas
in
stos
lods
mov
sub
mov
jl
mov
in
arpl
jl
mov
iret
xchg
ins
xor
jl
in
jl
mov
ret
out
inc
sub
ss
mov
jl
mov
jl
mov
jl
mov
jl
mov
jl
mov
xor
mov
jl
jmp
jl
mov
in
ret
addr16
enter
jae
iret
stos
jge
xor
mul
out
jecxz
add
jecxz
out
inc
sub
cmc
sub
mov
jl
std
out
jecxz
add
jecxz
out
adc
adc
mov
out
jecxz
out
fwait
and
out
jecxz
out
or
ss
jecxz
push
shl
and
out
jecxz
ds
and
gs
mov
outs
mov
out
jecxz
mov
nop
lahf
mov
jl
cmps
mov
jecxz
out
dec
and
mov
(bad)
jecxz
out
jecxz
lahf
pop
(bad)
fmul
push
ins
xor
in
ret
addr16
xchg
addr16
jge
xor
adc
into
in
arpl
jl
and
jl
mov
jl
mov
jl
fnsave
jecxz
add
enter
jae
push
pop
in
jl
mov
ds
out
and
jmp
mov
jl
shl
jl
mov
jl
mov
jl
mov
jl
mov
xchg
ins
xor
jl
adc
ja
jecxz
out
xchg
xlat
out
jecxz
into
in
ret
addr16
lock
jecxz
add
enter
jae
push
pop
in
jl
mov
ds
out
and
jmp
mov
jl
shl
jl
mov
jl
mov
jl
mov
jl
mov
stos
jge
xor
inc
adc
ja
jecxz
out
xchg
xlat
out
jecxz
pop
jl
mov
jl
int3
dec
std
mov
mov
lods
xchg
outs
lahf
cmp
sub
clc
pusha
jp
cli
pusha
jp
fstp
test
mov
and
inc
rcl
sub
aad
in
call
in
xor
test
mov
mov
jo
fbstp
pop
int
mov
lahf
popf
mov
jae
jbe
lds
mov
jne
fdivr
sub
test
jmp
sti
jo
push
stos
bound
test
gs
test
dec
push
add
dec
pop
add
cli
std
ja
xor
sar
xchg
cmp
pop
out
(bad)
cld
jl
jb
dec
(bad)
jbe
jae
gs
and
lods
jl
data16
push
ins
ss
xchg
jae
sbb
sbb
xor
and
fldenv
fisub
gs
and
mov
lds
in
mov
and
xor
and
xchg
cmp
add
sub
add
inc
sbb
xor
xchg
xor
cmp
jecxz
cmp
sub
xchg
cmps
call
xor
(bad)
jae
sahf
cmp
jne
and
sub
ins
or
mov
jo
outs
dec
loope
scas
jae
add
inc
in
test
and
adc
sub
mov
sub
jns
pop
daa
jbe
jl
or
mov
je
addr16
push
xor
retf
scas
jae
mov
mov
mov
je
inc
sbb
push
xor
mov
xor
jbe
sbb
sbb
cli
aad
jmp
jo
sahf
mov
jae
mov
shr
retf
scas
jae
xor
cwde
xor
das
sbb
in
cli
aad
test
into
addr16
arpl
mov
jmp
dec
pusha
mov
xor
imul
in
test
jmp
and
adc
xor
cld
lock
mov
shl
retf
scas
jae
jae
into
addr16
fld
fwait
dec
cmp
jae
xor
fwait
inc
cmp
jae
or
jl
mov
sub
ds
in
lods
dec
cmp
addr16
cwde
cmp
jae
xor
test
jae
std
xchg
stos
sub
adc
out
pop
mov
bnd
scas
cwde
xor
sbb
push
into
addr16
and
sub
addr16
fwait
lds
in
jae
mov
shr
retf
scas
jae
xor
cwde
xor
pop
xchg
pop
jbe
cli
aad
test
into
addr16
arpl
mov
jmp
dec
pusha
sbb
and
and
xor
cld
lock
xchg
shl
retf
scas
jae
jae
into
addr16
ss
xor
shl
mov
xor
jl
and
mov
(bad)
jae
jnp
into
addr16
jg
call
jo
mov
xor
cmps
push
clc
xor
or
addr16
jle
retf
scas
jae
jp
repnz
jecxz
and
add
lock
sahf
hlt
jl
xor
lods
xchg
jbe
retf
scas
jae
sahf
inc
(bad)
fimul
in
sbb
sbb
sbb
add
fwait
sub
xor
repnz
push
sti
jae
sbb
(bad)
pusha
sahf
mov
mov
add
ins
jbe
mov
add
ins
jbe
and
and
jp
jae
jbe
test
jmp
sub
lods
xchg
ins
lahf
cmp
and
add
or
mov
jmp
repnz
pop
xor
sti
icebp
mov
xor
cli
aad
sbb
jecxz
push
cmp
adc
and
jmp
fsubr
mov
loop
sub
lods
mov
mov
mov
xor
jb
pop
add
outs
jbe
jl
or
leave
idiv
mov
jmp
je
(bad)
repz
out
(bad)
cmp
lods
mov
mov
(bad)
js
fimul
adc
xor
dec
sub
jno
mov
jbe
outs
jbe
cli
out
cs
js
mul
mov
mov
mov
jne
mov
inc
movs
xor
and
mov
mov
jl
addr16
xchg
xor
(bad)
mov
es
outs
jbe
sbb
sbb
sbb
ss
neg
mov
mov
ds
jbe
not
mov
mov
add
retf
lods
mov
jmp
repz
fimul
in
jae
mov
and
mov
fwait
adc
xchg
sub
mov
mov
jae
mov
pop
xchg
xor
and
xor
and
mov
and
leave
cmps
jae
sti
imul
and
mov
and
in
jae
sahf
mov
repnz
jbe
test
jmp
fmul
jmp
sbb
test
xor
and
mov
and
in
jae
sahf
iret
jae
jbe
sbb
scas
jae
or
xor
test
and
jp
in
jae
sub
xchg
cmps
call
xor
fmul
mov
mov
fidiv
(bad)
addr16
mov
xchg
gs
sub
inc
mov
(bad)
pusha
mov
and
jbe
jae
jbe
jae
add
mov
add
ins
jbe
cli
aam
and
gs
jb
add
push
frstor
xchg
jbe
push
xor
pop
movs
jae
test
mov
add
ins
jbe
sub
sub
or
jmp
add
jbe
mov
add
bound
sbb
adc
xor
loopne
push
jle
inc
and
outs
mov
out
gs
je
push
xchg
sbb
cli
fld
gs
jb
ja
xor
and
add
mov
adc
sub
jbe
mov
sub
and
push
retf
jb
cmps
cli
fld
cli
loop
test
(bad)
jne
in
sbb
jbe
jae
jbe
jae
jbe
push
sub
movs
jae
jg
pop
and
cwde
adc
clc
mov
xchg
add
mov
add
ins
jbe
jp
add
mov
add
ins
jbe
inc
in
std
cli
fstp
cli
loop
cdq
(bad)
int
movs
jae
inc
sub
jp
das
lods
xchg
outs
lahf
xor
bound
cmp
leave
push
cmp
push
ins
test
in
jae
jo
cli
fld
cli
loop
test
jae
jbe
jae
add
mov
add
bound
jp
add
inc
in
sar
pusha
outs
mov
jae
add
mov
add
bound
jp
add
mov
add
bound
inc
in
test
in
jl
xor
cwde
sub
add
sbb
sub
xchg
je
mov
push
cmp
jbe
lock
cwde
push
int
test
and
jbe
cli
pusha
mov
adc
gs
mov
xor
pop
fnsave
and
jbe
jae
jbe
jae
pop
xor
and
jbe
(bad)
lock
repnz
jae
jg
push
and
cwde
xor
in
fwait
ins
xor
jae
xor
cwde
and
sbb
mov
jne
lods
mov
addr16
add
inc
test
in
jo
or
jbe
mov
sub
fs
scas
xor
cli
out
cs
jo
lods
into
inc
ins
dec
sbb
pop
lods
mov
stos
jne
sbb
std
adc
xor
jbe
mov
call
std
std
mov
jae
mov
daa
popf
test
pusha
mov
fs
dec
in
push
loopne
aaa
pop
add
ror
add
cli
fnstsw
ins
dec
and
scas
xor
mov
jbe
ss
leave
jae
push
into
inc
and
fwait
xor
ins
ss
mov
jg
pop
cmp
sbb
std
adc
xor
jbe
ss
cs
out
mov
mov
je
mov
sub
xchg
cmps
call
sub
push
addr16
add
push
jbe
and
and
test
xchg
cmps
mov
and
ss
data16
cli
pusha
sbb
into
pusha
jecxz
and
adc
das
jns
ja
cmc
sbb
lods
jb
xor
shl
add
test
cmp
rcl
lods
mov
and
(bad)
movs
cmps
mov
and
and
call
es
mov
mov
and
shl
test
cli
xor
and
or
sub
mov
lea
xor
mov
test
mov
popf
ds
jno
sahf
xchg
xor
enter
dec
sub
xchg
mov
jae
rol
mov
mov
(bad)
mov
adc
sub
outs
mov
jmp
cli
aad
sbb
jecxz
aaa
push
and
call
adc
fisttp
add
addr16
inc
in
(bad)
js
jbe
push
xor
gs
mov
mov
or
mov
std
push
stos
fimul
adc
icebp
mov
mov
jbe
and
ss
addr16
cli
mov
imul
clc
push
jbe
mov
test
jbe
fwait
popf
aaa
in
jae
xchg
sub
mov
in
and
gs
jb
add
clc
mov
adc
int
and
and
xor
stc
test
jnp
cmp
xor
mov
fwait
jge
in
jae
mov
fwait
sbb
jl
jae
out
sbb
ss
sbb
addr16
(bad)
(bad)
test
jnp
xchg
sub
retf
in
jae
adc
jae
iret
(bad)
jae
jbe
test
and
into
(bad)
shr
xor
jae
mov
fwait
std
xor
jae
jl
jae
out
sbb
ss
sbb
addr16
(bad)
(bad)
test
and
inc
xor
and
mov
fwait
shl
jae
mov
fwait
test
in
jae
jl
jae
out
sbb
ss
sbb
addr16
(bad)
(bad)
test
and
or
out
and
cmc
push
jbe
push
add
popa
jbe
retf
in
jae
adc
sbb
test
mov
and
mov
xor
mov
and
xor
and
jbe
lock
ins
popf
loopne
in
jae
push
test
and
jbe
test
cmc
push
jbe
test
nop
mov
(bad)
ficomp
outs
mov
push
out
addr16
(bad)
(bad)
test
and
popf
scas
jae
iret
out
and
cmc
push
jbe
test
nop
mov
(bad)
ficomp
outs
mov
push
out
lods
addr16
(bad)
(bad)
scas
jae
cmc
sub
lds
jae
jbe
test
cmc
push
jbe
push
add
data16
retf
in
jae
adc
sbb
test
jb
and
into
cdq
push
and
repz
sbb
jo
jbe
test
and
mov
xor
(bad)
cwde
test
mov
and
data16
(bad)
mov
adc
xor
mov
and
xor
and
jbe
lock
add
data16
retf
in
jae
adc
jae
iret
(bad)
jae
jbe
test
and
into
(bad)
shr
xor
cld
cli
aad
or
mov
jmp
fwait
aad
in
jae
jl
jae
out
sbb
ss
sbb
addr16
(bad)
(bad)
scas
jae
cmc
sub
mov
out
and
cmc
push
jbe
test
nop
mov
(bad)
ficomp
outs
mov
sahf
dec
xor
jbe
jmp
call
aad
scas
jae
ret
adc
jbe
lock
adc
mov
loope
xor
repz
test
jae
sahf
xchg
xor
sahf
mov
and
jbe
jmp
call
out
test
jae
ret
adc
jbe
lock
add
addr16
retf
in
jae
adc
xor
mov
fwait
jge
in
jae
mov
fwait
xor
jae
jl
jae
out
sbb
push
sahf
out
xor
jbe
jmp
adc
cli
xor
and
mov
arpl
repnz
(bad)
loope
adc
jbe
mul
test
lock
or
repz
mov
mov
repz
fisttp
sub
mov
mov
rcl
lods
mov
and
(bad)
outs
mov
and
mov
mov
xchg
in
out
cli
mov
adc
loop
mov
mov
and
cwde
jbe
mov
and
fs
lock
push
pop
jo
in
test
jmp
fimul
imul
(bad)
in
jae
jns
add
mov
mov
mov
jae
mov
fisub
test
sti
xor
and
imul
jae
iret
out
and
cmc
push
jbe
test
sti
xor
mov
sahf
repnz
sahf
xor
jbe
jmp
call
out
test
jae
ret
adc
jbe
lock
adc
mov
fldcw
and
cmc
push
jbe
test
nop
mov
(bad)
ficomp
outs
mov
imul
fimul
in
mov
std
imul
fidivr
in
fisttp
adc
ret
jmp
fimul
xchg
jb
jbe
ss
imul
movs
retf
in
jae
mov
jl
dec
in
jae
call
aad
sub
pusha
push
jae
jbe
dec
mov
jns
xor
mov
jmp
fimul
test
sti
xor
(bad)
mov
es
gs
lock
popa
(bad)
ror
adc
movs
dec
in
jae
(bad)
gs
call
fimul
sbb
jecxz
imul
shr
mov
(bad)
mov
mov
test
sbb
mov
mov
xchg
mov
mov
fimul
adc
aad
adc
mov
jne
dec
dec
and
sahf
push
and
jbe
jmp
call
js
scas
jae
ret
adc
jbe
lock
and
mov
sub
out
and
cmc
push
jbe
test
nop
mov
(bad)
ficomp
outs
mov
sahf
fimul
push
jns
jbe
jmp
call
aad
scas
jae
ret
adc
jbe
lock
adc
aad
adc
imul
xor
jbe
mov
sti
imul
ret
adc
fisttp
adc
mov
(bad)
fidivr
jl
in
mov
push
(bad)
lods
addr16
(bad)
(bad)
shl
cmc
sub
mov
jae
iret
out
and
cmc
push
jbe
test
sti
xor
mov
sahf
push
dec
and
sahf
jb
and
jbe
jmp
call
out
test
jae
ret
adc
jbe
lock
gs
gs
mov
mov
in
retf
in
jae
adc
xor
mov
fwait
test
mov
sbb
test
jae
ret
adc
jbe
lock
add
sbb
retf
in
jae
adc
jae
iret
(bad)
jae
jbe
test
and
into
(bad)
shr
dec
in
jae
mov
fwait
and
jl
jae
out
sbb
ss
mov
addr16
(bad)
(bad)
shl
cmc
sub
xor
and
jbe
retf
in
jae
adc
xor
mov
fwait
ror
jae
mov
fwait
xchg
dec
in
jae
jl
jae
out
sbb
ss
sbb
addr16
(bad)
(bad)
shl
cmc
sub
std
shl
iret
out
and
cmc
push
jbe
push
add
sbb
retf
in
jae
adc
sbb
test
call
push
lds
(bad)
shl
cmc
sub
xchg
sub
retf
in
jae
adc
xor
mov
fwait
jns
in
jae
mov
sbb
test
jae
ret
adc
jbe
lock
add
sbb
retf
in
jae
adc
xor
mov
fwait
add
jae
mov
sbb
test
jae
ret
adc
jbe
lock
ins
test
pusha
in
jae
mov
jae
iret
out
and
cmc
push
jbe
test
nop
mov
(bad)
ficomp
outs
mov
sti
imul
fisttp
scas
jae
sahf
dec
dec
and
sahf
push
and
jbe
jmp
call
aad
scas
jae
ret
adc
jbe
lock
test
xor
mov
sahf
jle
and
sahf
mov
jns
jbe
jmp
call
aad
scas
jae
ret
adc
jbe
lock
push
add
jbe
test
jmp
fimul
test
push
fwait
es
jmp
cld
push
and
mov
(bad)
fisub
test
int
shl
cmc
sub
cdq
xlat
jae
iret
out
and
cmc
push
jbe
test
nop
mov
(bad)
ficomp
outs
mov
push
xor
(bad)
xlat
jae
cmc
sub
rcl
and
jbe
test
cmc
push
jbe
test
nop
mov
(bad)
ficomp
outs
mov
neg
add
in
fwait
test
jl
jae
out
sbb
push
sahf
xchg
dec
and
jbe
jmp
adc
cli
xor
and
add
jae
cmc
sub
cmps
xor
and
mov
fwait
lods
dec
in
jae
mov
sbb
sbb
sbb
adc
sub
jbe
test
adc
jbe
(bad)
(bad)
aam
and
adc
fisub
mov
(bad)
fimul
adc
fcmovb
add
fmul
in
mov
sahf
dec
inc
and
xchg
jbe
jp
and
mov
mov
mov
out
gs
movs
call
ins
jne
js
mov
xchg
lods
repz
fimul
adc
dec
jecxz
pusha
mov
test
adc
xchg
dec
in
jae
mov
mov
xor
and
mov
and
in
jae
sahf
sbb
cmp
test
mov
jae
int
jbe
dec
clc
xor
sbb
scas
jae
ja
jae
sahf
aas
sbb
test
jmp
xor
and
test
mov
lock
ins
pushf
jns
in
jae
mov
ins
lahf
mov
in
jae
and
add
outs
(bad)
mov
std
test
jl
mov
xchg
and
imul
pusha
jle
ja
ja
jae
jmp
fmul
adc
loop
aaa
clc
pusha
jle
mov
mov
and
and
and
jbe
(bad)
jns
fmul
(bad)
jmp
fmul
adc
jbe
es
mov
(bad)
jno
jmp
xor
mov
gs
sahf
out
inc
and
mov
mov
ret
dec
mov
mov
adc
cli
mov
mov
fmul
in
jae
and
clc
test
adc
std
popa
pop
fmul
in
(bad)
jno
in
xor
ins
test
in
jae
jbe
xor
jbe
div
add
arpl
popa
test
out
dec
and
jbe
and
dec
aad
and
jbe
not
push
inc
scas
addr16
(bad)
stc
xor
sbb
jbe
repz
sbb
(bad)
sub
mov
jle
sahf
dec
inc
and
sub
jae
sahf
jecxz
fimul
in
(bad)
mov
es
not
sahf
mov
jbe
(bad)
mov
adc
mov
(bad)
test
ret
fs
mov
(bad)
mov
ret
dec
mov
mov
mov
es
xlat
mov
lock
idiv
mov
jle
sahf
rol
jbe
mov
sub
and
jbe
neg
mov
mov
inc
dec
and
mov
test
pop
mov
mov
fisub
add
sbb
cdq
adc
mov
neg
sahf
cli
dec
and
call
(bad)
sub
xor
jae
mov
xchg
fisttp
in
adc
fimul
push
pop
cmp
sub
int
adc
aaa
in
jae
repz
(bad)
fimul
adc
mov
and
mov
add
sbb
(bad)
mov
xchg
sbb
jl
scas
in
jae
mov
fmul
in
jae
mov
mov
adc
push
xchg
scas
addr16
neg
mov
mov
inc
inc
and
mov
add
mov
jae
pop
ins
test
sub
jae
repz
push
stos
scas
jae
push
fnstenv
jmp
jp
add
sbb
jne
jae
sbb
imul
scas
repz
mov
mov
jbe
mov
test
jbe
fwait
imul
mov
mov
pop
das
push
in
and
in
sbb
ja
jae
repz
int
fdiv
sbb
sbb
scas
jae
repz
popa
retf
adc
mov
jae
push
outs
(bad)
mov
popf
lock
mov
jbe
mov
adc
jae
jnp
(bad)
mov
imul
jmp
jbe
(bad)
mov
es
adc
retf
mov
in
jae
xchg
not
adc
inc
in
jae
jbe
mov
fbstp
mov
fmul
in
jae
repz
fimul
out
and
sbb
mov
jmp
sub
sub
mov
arpl
mov
cmc
sub
cli
fld
cli
loop
cdq
jnp
mov
cs
fld
cli
loop
cdq
jg
int
jae
jmp
adc
push
data16
push
jbe
cli
out
gs
in
cli
out
gs
fstp
fnstenv
jl
and
jb
jns
es
test
or
int
jae
jmp
repnz
jae
inc
sub
pop
push
jl
mov
ss
jmp
call
jne
push
inc
and
mov
mov
es
adc
in
mov
jecxz
pusha
mov
and
and
push
fnsave
call
(bad)
sub
mov
and
les
popa
aaa
xor
inc
in
jae
jns
ss
test
and
fnstenv
jl
and
(bad)
popa
out
and
popf
fdiv
sti
test
and
and
sahf
push
inc
and
cdq
adc
jbe
mov
dec
inc
and
es
jae
sahf
mov
and
sub
cli
ror
ins
and
jbe
and
addr16
adc
or
gs
cld
in
and
into
or
(bad)
sub
ss
sti
imul
test
sub
fimul
scas
jae
mov
jae
jmp
jp
jns
jecxz
jbe
repnz
cli
jae
and
adc
cmc
sub
mov
ins
fcmovb
and
fimul
ret
jbe
mov
xchg
not
mov
mov
popf
mov
mov
ss
sti
imul
test
sub
fimul
ret
jae
jg
pop
adc
adc
(bad)
sub
fcmovb
sub
adc
lock
in
push
outs
adc
in
xchg
adc
pop
in
jae
mov
cwde
das
test
cwde
pop
sub
sub
or
xor
jae
in
jae
and
in
mov
sbb
movs
mov
inc
and
xchg
jbe
call
sub
cmc
and
gs
jb
add
cli
push
and
push
push
mov
cmc
sub
and
xor
jbe
lock
ins
test
xchg
sub
(bad)
mov
es
adc
lock
add
push
jbe
retf
in
jae
adc
xor
mov
and
mov
jae
cmc
sub
int
jae
iret
out
and
cmc
push
jbe
pop
add
push
jbe
retf
in
jae
adc
sbb
scas
jae
retf
in
xchg
fimul
in
jae
mov
fwait
movs
inc
in
jae
jl
jae
out
sbb
xor
sbb
addr16
mul
sahf
jb
and
call
aad
sub
adc
in
xchg
fimul
in
jae
mov
fwait
gs
in
jae
jl
jae
out
sbb
xor
sbb
addr16
mul
sahf
mov
and
sahf
test
push
jns
jbe
jmp
lds
pushf
adc
sbb
lds
xor
and
mov
and
mov
jae
cmc
sub
add
sbb
test
in
xchg
fimul
scas
jae
repz
xchg
fimul
in
jae
mov
cli
aad
or
mov
jmp
fwait
xchg
inc
in
jae
jl
jae
out
sbb
xor
sbb
addr16
mul
sahf
and
jbe
mov
push
out
addr16
mul
sahf
push
inc
and
sahf
call
jbe
jmp
clc
sbb
xchg
scas
jae
repz
xchg
fimul
in
jae
mov
sbb
test
in
xchg
fimul
in
jae
mov
cli
aad
or
mov
jmp
fwait
adc
jl
jae
out
sbb
or
repnz
and
jbe
jmp
or
fisub
test
stc
xor
(bad)
cwde
jbe
mov
and
pop
jbe
lock
test
xor
(bad)
mov
es
pop
jbe
lock
add
adc
in
retf
in
jae
adc
xor
mov
and
mov
jae
cmc
sub
cmp
imul
popf
fnsave
cmc
sub
xchg
sub
retf
in
jae
adc
xor
mov
and
leave
fnsave
cmc
sub
ins
xor
and
mov
and
fstp
jae
cmc
sub
adc
jae
iret
out
and
cmc
push
jbe
bound
mov
es
adc
in
lock
ins
test
add
(bad)
mov
test
xor
(bad)
mov
es
adc
in
lock
add
adc
in
retf
in
jae
adc
xor
mov
and
dec
fnsave
cmc
sub
jbe
xor
mov
and
push
fnsave
cmc
sub
xchg
fdiv
iret
out
and
cmc
push
jbe
bound
mov
es
adc
in
lock
push
dec
dec
jbe
test
jmp
cli
mov
cli
jecxz
inc
inc
and
jbe
jmp
cld
push
and
jbe
mov
and
cwde
jbe
mov
and
adc
data16
adc
jbe
jae
adc
xor
mov
and
in
fdiv
cmc
sub
test
xor
mov
and
icebp
fdiv
cmc
sub
cwde
pop
xor
jbe
retf
in
jae
adc
xor
mov
and
sub
sub
popa
fdiv
iret
out
and
cmc
push
jbe
pop
add
adc
jbe
jae
adc
sbb
scas
jae
retf
in
xchg
fimul
in
jae
mov
sbb
stos
scas
jae
repz
xchg
fimul
in
jae
mov
sbb
sbb
sbb
ss
jae
repz
popa
in
jae
repz
xchg
fimul
in
jae
jbe
into
(bad)
popa
into
and
mov
cli
mov
fwait
rcr
fcmovb
adc
jbe
inc
in
pop
jne
xchg
sub
lods
xchg
ins
lahf
mov
and
sbb
push
mov
shl
fimul
sub
push
jbe
clc
js
mov
jae
and
(bad)
jno
in
cli
mov
adc
jmp
fimul
cmps
pop
and
pop
in
jae
dec
sbb
jbe
sbb
add
jae
jmp
fmul
in
(bad)
mov
es
or
sbb
ja
jae
repz
mov
mov
dec
ret
and
test
mov
lock
in
sub
inc
jno
jbe
ja
jbe
(bad)
mov
es
not
sahf
(bad)
pop
and
mov
fcmovb
dec
mov
mov
mov
es
fisttp
in
sub
popf
jno
jbe
sar
xor
(bad)
mov
es
or
(bad)
mov
es
neg
mov
mov
jp
and
mov
cli
mov
call
(bad)
sub
popa
sbb
(bad)
mov
es
or
lock
ins
mov
ja
jae
repz
(bad)
fimul
sub
ror
jae
retf
je
fimul
sub
int
adc
sbb
jae
repz
(bad)
fimul
adc
mov
and
mov
add
sbb
(bad)
mov
xchg
mov
jae
jg
jl
hlt
in
jae
mov
fmul
in
jae
mov
mov
adc
push
xchg
scas
addr16
neg
mov
mov
pop
pop
and
mov
or
mov
jae
pop
ins
mov
dec
in
jae
repz
push
stos
scas
jae
pop
(bad)
jae
jmp
jp
add
sbb
jne
jae
add
imul
repz
mov
mov
jbe
mov
in
and
jbe
fwait
jne
in
jae
mov
mov
in
(bad)
mov
es
jae
ja
sbb
xor
(bad)
mov
es
xchg
mov
lock
ror
mov
jae
sti
imul
jbe
pop
test
mov
sub
fsubr
jae
sbb
mov
sti
imul
int
lds
neg
or
jbe
(bad)
mov
es
mov
adc
jmp
mov
sahf
cmps
pop
and
xor
fwait
cmp
jne
out
addr16
fstp
jae
mov
jp
add
sbb
stos
scas
jae
mov
jae
std
jno
fmul
mov
and
ret
js
fimul
adc
loope
pop
ins
scas
repz
fimul
mov
mov
sahf
imul
sub
add
int
lds
mov
out
fmul
in
(bad)
mov
es
or
in
cli
fnsave
cli
loop
in
mov
sahf
rcr
jbe
mov
les
std
imul
and
sbb
jbe
sub
sub
mov
arpl
mov
test
(bad)
repnz
mov
es
in
cli
pusha
mov
push
sub
addr16
mov
xor
or
sub
jae
retf
jbe
mov
jbe
test
jmp
fwait
add
add
(bad)
jno
in
and
jno
jae
and
in
(bad)
pusha
mov
jnp
in
sbb
pop
in
jae
mov
mov
push
pop
and
xchg
gs
sub
pusha
mov
and
jbe
clc
pusha
mov
lods
xchg
push
jae
jbe
fwait
mov
in
jae
and
popa
add
repnz
(bad)
sbb
mov
add
or
call
(bad)
sub
add
inc
in
scas
sbb
jns
jae
repz
sbb
mov
jae
sbb
mov
popa
mul
adc
mov
sub
mov
xchg
popa
movs
xor
jno
sahf
inc
pop
and
fnstenv
cli
shl
jg
leave
scas
xor
push
in
jae
mov
lea
pop
adc
shr
addr16
shl
add
pcmpeqd
repnz
jae
sti
test
sbb
in
jae
inc
ins
shl
add
or
in
jl
xor
lock
mov
jae
xor
and
jmp
sub
xor
and
test
and
in
mov
pop
jae
and
jbe
mov
jecxz
pusha
mov
sub
jns
in
mov
cli
shl
jg
and
push
outs
test
int3
jle
jae
nop
gs
sub
and
sbb
sbb
sbb
sbb
push
jl
and
jbe
jne
data16
or
in
cli
loop
cmp
sbb
jecxz
in
and
inc
adc
xlat
scas
jae
stc
les
sbb
and
inc
adc
jmp
jae
or
jae
sbb
and
inc
adc
xlat
scas
jae
sbb
jae
sbb
and
inc
adc
jmp
les
sbb
and
inc
adc
jecxz
jae
cmp
jae
test
sbb
xchg
inc
(bad)
in
fs
dec
or
and
in
fs
pop
or
and
shl
add
or
and
shl
add
or
inc
sbb
jecxz
in
and
inc
adc
out
lods
jae
test
jae
sbb
and
inc
adc
jmp
jae
xchg
retf
jae
sbb
and
inc
adc
aad
jae
movs
retf
jae
sbb
and
inc
adc
aad
jae
mov
jae
into
pop
pop
and
xor
cli
jecxz
mov
out
push
mov
jmp
repnz
jae
sbb
mov
sahf
jno
and
jbe
push
mov
in
sbb
mov
inc
int
lods
jae
dec
retf
jae
sbb
mov
test
sahf
into
push
and
aaa
in
sbb
mov
inc
movs
xlat
scas
jae
popa
retf
jae
neg
xor
mov
pop
mov
push
in
jae
push
jae
and
jbe
(bad)
fiadd
in
fs
sahf
add
sbb
mov
outs
mov
in
fwait
icebp
push
in
jae
jbe
xor
jbe
(bad)
fiadd
out
jbe
mov
(bad)
in
fwait
xchg
push
in
jae
push
dec
xor
jbe
(bad)
fiadd
in
fs
(bad)
add
sbb
mov
push
mov
push
in
jae
pop
jne
and
jbe
(bad)
fiadd
in
fs
repnz
cli
fld
cli
loop
adc
sahf
mov
jbe
outs
mov
icebp
lods
jae
mov
inc
mov
and
jae
sub
lods
xchg
outs
lahf
xor
mov
outs
movs
cdq
xor
jbe
xchg
xor
mov
add
(bad)
add
cmps
mov
mov
jmp
mov
jae
sub
fwait
dec
push
in
jae
jbe
inc
adc
lods
jae
jbe
clc
pusha
mov
shl
fstp
xor
sbb
test
les
out
jae
sahf
rcl
jbe
aaa
test
in
sbb
aaa
in
sbb
xor
pusha
xchg
inc
xchg
bound
loope
scas
jae
lods
aaa
xor
push
in
jae
jb
xor
jmp
sbb
aaa
in
sbb
aaa
in
sbb
xor
pusha
xchg
inc
xchg
dec
bound
stc
test
aaa
xor
push
in
jae
push
dec
xor
sbb
sbb
sbb
sbb
je
jae
jbe
jae
jle
addr16
retf
jmp
sbb
xchg
inc
call
push
add
sbb
aaa
in
sbb
aaa
in
sbb
jbe
pop
dec
pop
test
jbe
sbb
scas
jae
lods
aaa
xor
push
in
jae
or
and
jbe
sbb
aaa
in
sbb
aaa
in
sbb
jbe
or
test
jbe
sbb
lods
aaa
xor
push
in
jae
(bad)
dec
xor
inc
jae
and
xor
sbb
sbb
ja
jae
(bad)
in
jae
sbb
sbb
mov
ss
jbe
jae
xchg
enter
loopne
fs
jae
inc
fsubr
fs
jae
inc
test
fs
arpl
in
jae
push
push
jae
jbe
pop
dec
jbe
jae
push
bound
(bad)
xor
sbb
jbe
addr16
mov
inc
mov
mov
adc
sbb
sbb
bound
stc
test
xor
push
in
jae
sahf
jno
and
jbe
sbb
scas
jae
jbe
xor
in
and
inc
enter
cdq
test
dec
xor
fstp
cmp
jae
jbe
inc
adc
lods
jae
jbe
inc
inc
(bad)
scas
jae
pop
in
jae
sbb
sbb
or
jo
idiv
dec
repz
push
in
jae
test
imul
das
bound
sbb
aaa
in
sbb
xor
sbb
ja
jae
dec
test
and
jbe
jae
jne
repz
xor
xor
sbb
jbe
pop
mov
mov
mov
adc
jmp
adc
(bad)
lods
jae
data16
nop
in
jae
push
test
jbe
jae
jbe
sbb
scas
jae
lods
aaa
xor
push
in
jae
out
xor
jmp
jae
inc
fsubr
fs
jae
inc
test
fs
arpl
in
jae
push
adc
jbe
addr16
in
sbb
and
ss
jbe
jae
xor
jae
aad
shl
xchg
inc
fsubr
fs
jae
inc
test
fs
arpl
test
jbe
sbb
jbe
jae
jbe
jae
push
scas
test
(bad)
xor
sbb
jbe
inc
mov
mov
inc
mov
mov
aaa
test
in
sbb
jbe
inc
and
in
sbb
in
jae
test
xor
sbb
lods
scas
jae
jbe
cmps
pop
jbe
rcl
jmp
jae
jbe
inc
adc
lods
jae
jbe
inc
popa
(bad)
lods
jae
data16
and
jbe
jae
jbe
sbb
lods
scas
jae
lods
aaa
xor
push
in
jae
loop
xor
inc
jae
and
push
dec
xor
ja
jae
out
jae
sbb
sbb
stos
xor
and
jbe
jae
jbe
fwait
inc
push
in
jae
repnz
xor
inc
jae
and
push
dec
xor
jbe
jae
mov
jae
sbb
sbb
out
xor
jbe
jae
jbe
fwait
add
xchg
xor
jmp
sbb
aaa
in
sbb
xor
sbb
jbe
jae
bound
stc
test
xor
jbe
xchg
add
in
ror
jbe
inc
adc
lods
jae
jbe
inc
inc
(bad)
scas
jae
outs
xchg
dec
sub
and
jbe
and
xor
and
jbe
jae
jbe
fwait
mov
jae
push
jae
and
inc
jae
and
xor
sbb
sbb
fucomip
jae
sbb
sbb
xchg
xor
stos
addr16
jae
add
je
addr16
sub
mov
cli
fstp
cli
loop
imul
mov
cli
shl
imul
inc
dec
xchg
lock
fld
cli
loop
sbb
sub
mov
dec
call
ror
dec
jnp
aaa
in
cli
fstp
cli
loop
in
mov
jle
xor
jbe
ss
mov
jae
jbe
inc
adc
lods
jae
jbe
clc
pusha
mov
shl
fstp
xor
sbb
test
les
out
jae
sahf
ds
and
aaa
in
sbb
aaa
in
sbb
xor
pusha
xchg
inc
xchg
bound
in
scas
scas
jae
lods
aaa
xor
push
in
jae
jb
xor
jbe
sbb
aaa
in
sbb
aaa
in
sbb
ja
jae
xor
pusha
xchg
inc
xchg
dec
bound
stc
test
aaa
xor
push
in
jae
push
dec
xor
sbb
sbb
sbb
sbb
je
jae
jbe
jae
jle
addr16
int3
jae
jmp
sbb
xchg
inc
call
mov
jbe
sbb
aaa
in
sbb
xor
sbb
mov
xor
sbb
jbe
and
xor
and
jbe
jae
cdq
repz
aad
out
fs
pushf
cmp
in
jae
or
xor
ja
jae
sahf
inc
ins
and
xor
sbb
jbe
inc
int
lods
jae
loope
jae
not
jecxz
xor
inc
push
pusha
xchg
ja
cmp
adc
xchg
ins
and
jbe
jae
cmp
jae
mov
fwait
mov
imul
inc
adc
lods
jae
jbe
inc
inc
(bad)
scas
jae
pop
in
jae
sbb
sbb
sbb
sbb
jbe
and
xor
and
jbe
jae
and
jae
aad
shl
mov
gs
jbe
inc
adc
lods
jae
jbe
inc
inc
(bad)
scas
jae
pop
in
jae
sbb
sbb
push
inc
jae
jbe
jo
idiv
dec
repz
imul
xor
mov
in
fs
jae
inc
test
fs
arpl
in
jae
sbb
sbb
ja
jae
jbe
jae
push
mov
test
and
jbe
pop
test
sbb
aaa
in
sbb
aaa
in
sbb
jbe
jae
mov
jae
push
in
jae
test
push
sbb
lods
scas
jae
jbe
sar
jbe
rcl
lahf
fidiv
or
mov
jbe
inc
adc
lods
jae
jbe
inc
popa
(bad)
lods
jae
data16
test
jae
adc
lods
scas
jae
lods
aaa
xor
push
jno
and
inc
jae
and
xor
sbb
sbb
push
jae
jbe
shl
jbe
and
xor
jbe
jae
push
bnd
aad
shl
xchg
inc
fsubr
fs
jae
inc
test
fs
arpl
in
jae
push
or
jbe
ins
dec
jbe
jae
push
xchg
stos
addr16
test
and
jbe
je
mov
inc
mov
mov
aaa
test
in
sbb
jbe
mov
push
in
jae
test
xor
sbb
lods
scas
jae
jbe
ret
in
rol
jbe
inc
adc
lods
jae
jbe
inc
inc
(bad)
scas
jae
outs
test
and
sbb
sbb
out
xor
jbe
jae
jbe
fwait
pop
imul
xchg
xor
jbe
sbb
aaa
in
sbb
xor
sbb
sbb
sbb
stos
xor
and
jbe
jae
jbe
fwait
sbb
jae
pop
jae
and
inc
jae
and
push
dec
xor
sbb
sbb
push
in
jae
test
and
scas
jae
jbe
jae
sahf
jmp
aaa
in
sbb
aaa
in
sbb
aaa
in
sbb
push
ja
and
jbe
sbb
push
in
jae
test
fild
add
cmp
sar
ret
pop
mov
into
xor
xchg
lods
xor
loop
aaa
xchg
mov
cli
shl
imul
int3
pop
inc
push
jg
mov
xchg
lods
xor
cli
loop
in
sbb
jne
jae
jne
jae
jbe
mov
add
aas
jbe
cli
jecxz
adc
jbe
jae
sahf
jbe
and
sahf
pop
push
jbe
push
fnstenv
shl
jae
call
ret
fwait
lods
mov
ss
popa
shl
popa
fldenv
adc
xor
jbe
jb
jbe
fwait
ins
aad
mov
mov
push
fstp
mov
daa
cld
xor
mov
adc
sub
mov
cmp
mov
push
dec
jb
ja
xor
fiadd
cld
sbb
ret
dec
ja
jae
sahf
xchg
rcr
mov
cmp
jmp
sub
sub
or
leave
jle
jae
and
repnz
lods
xchg
sub
jae
aam
xor
mov
and
sub
jae
sahf
push
outs
and
jbe
jmp
adc
pop
mov
push
xor
push
ret
addr16
mul
sahf
fisubr
jbe
or
mov
or
jno
test
in
(bad)
mov
es
cmp
mov
push
xor
sbb
addr16
mul
sahf
out
imul
cdq
bound
pop
xor
mov
and
popf
sti
jae
call
aad
sub
pop
mov
push
xor
fadd
addr16
mul
sahf
and
ins
push
fidiv
bound
pop
xor
mov
and
sar
and
add
sbb
scas
jae
repz
mov
mov
movs
or
jnp
addr16
xchg
xor
(bad)
mov
es
xor
cli
aad
sbb
jecxz
xchg
mov
std
sbb
repz
mov
mov
movs
or
jns
test
in
(bad)
mov
es
xor
repz
mov
push
xor
in
shl
mul
sahf
shl
ins
push
fidivr
bound
pop
xor
mov
and
push
sti
jae
not
sbb
scas
jae
repz
mov
mov
lods
xchg
xchg
lods
repz
movs
or
jge
test
in
(bad)
mov
es
xor
sbb
scas
scas
jae
cmp
imul
jbe
xor
mov
fwait
(bad)
scas
jae
ss
and
mov
aad
in
jae
mov
cli
aad
or
mov
jmp
call
and
cli
shl
int3
ret
and
test
push
and
ja
and
jg
mov
cmc
sub
mov
jnp
jbe
fwait
jno
in
jae
sub
lods
xchg
ins
lahf
sbb
and
dec
movs
sbb
push
dec
in
jae
add
xor
mov
and
pop
cli
jae
sahf
sub
jbe
jl
jbe
jmp
adc
mov
push
xor
inc
shl
test
adc
jbe
into
(bad)
mov
mov
add
sbb
les
test
mov
movs
retf
pop
mov
mov
push
xor
or
addr16
test
adc
jbe
xlat
xor
in
test
jmp
ror
push
sbb
adc
test
xor
(bad)
mov
es
xor
repz
test
fidiv
bound
pop
xor
mov
and
icebp
stc
jae
not
fisttp
test
xor
(bad)
mov
es
xor
repz
test
fidiv
bound
pop
xor
mov
and
and
sbb
aad
sub
cwde
test
fidivr
bound
pop
xor
mov
and
inc
stc
jae
not
fisttp
test
xchg
xor
(bad)
mov
es
xor
repz
test
fidivr
dec
fcomp
and
mov
and
mov
jae
not
fisttp
test
mov
es
xor
cli
aad
or
mov
jmp
repz
test
fidivr
bound
pop
xor
mov
and
leave
clc
jae
not
fisttp
test
xor
(bad)
mov
es
xor
repz
test
fidivr
bound
pop
xor
mov
and
std
clc
jae
push
pushf
shl
popa
test
adc
mov
rcl
adc
xor
sbb
pop
mov
cmc
sub
repz
fimul
adc
sahf
sbb
jne
jae
cwde
ins
js
jbe
adc
gs
adc
sub
add
mov
mov
call
mov
lahf
in
jo
jbe
into
(bad)
push
repz
mov
mov
dec
jecxz
push
ja
jae
retf
adc
mov
mov
mov
mov
jae
cmp
jae
or
mov
jmp
(bad)
mov
test
xor
(bad)
mov
es
cmp
jp
into
fisttp
lds
lahf
mov
push
rcr
ins
or
mov
push
retf
adc
fimul
in
jae
dec
mov
fs
push
adc
jl
addr16
pop
cld
xor
(bad)
mov
es
cmp
pop
sbb
jecxz
jl
addr16
ins
cld
xor
(bad)
mov
es
xor
lock
pop
aas
dec
jbe
jae
sti
imul
and
jbe
xchg
lods
repz
fimul
adc
xor
repz
cdq
popa
in
jae
jne
xor
mov
and
mov
sub
repz
xor
jae
repz
and
popa
neg
mov
mov
push
stos
addr16
neg
mov
mov
xchg
fs
sbb
(bad)
mov
es
xor
sbb
sbb
(bad)
xchg
out
fimul
sub
mov
sti
imul
stc
pusha
in
jae
jmp
fisttp
or
mov
jmp
lock
mov
fidivr
adc
jae
ret
adc
fimul
in
sbb
scas
scas
jae
repz
and
mov
sbb
repz
adc
test
adc
adc
jae
repz
repz
mov
mov
pop
cdq
arpl
mov
mul
mov
mov
jbe
jl
sti
cmp
adc
cli
aad
or
mov
jmp
mov
sti
imul
and
mov
and
or
jae
cmc
sub
repz
loope
in
jae
repz
fimul
adc
jbe
into
in
adc
arpl
lods
fwait
lds
lods
repz
mov
jae
repz
nop
adc
sahf
call
mov
mov
call
mov
mov
push
xchg
mov
(bad)
pop
jno
and
and
imul
ror
sahf
xor
sahf
mov
and
addr16
jae
repz
fcmovb
add
call
jp
mov
mov
imul
mov
mov
ret
add
aaa
jbe
repnz
pop
mov
add
jbe
inc
xor
sub
fist
mov
sub
jae
dec
retf
inc
gs
jae
int
jae
and
fmul
std
jmp
sbb
jbe
jb
imul
jae
repz
popf
fimul
mov
jae
ja
jp
jbe
sub
addr16
jbe
jbe
jmp
jae
jbe
jae
scas
sbb
fimul
jno
and
jbe
mov
xlat
scas
jae
push
std
jae
sahf
fisub
jbe
fwait
add
popf
das
push
and
jbe
(bad)
mov
adc
sub
jbe
jb
out
xor
mov
and
jge
mov
cmc
sub
mov
jae
jns
ins
and
in
lock
pop
xor
ret
fidiv
(bad)
addr16
mov
ins
in
jae
aad
jae
int3
aas
ds
mov
add
mov
pop
es
cmc
das
gs
mov
cli
(bad)
jns
enter
mov
ja
inc
int
clc
jae
jns
into
xchg
fwait
adc
daa
gs
pushf
sub
ins
or
mov
jecxz
sub
lds
mov
ja
not
jle
mov
mov
pop
and
fwait
adc
jbe
mov
mov
push
sub
adc
repz
sahf
fimul
add
xor
sbb
scas
scas
jae
repz
fimul
in
jae
test
jae
repz
fimul
add
jbe
(bad)
mov
es
loopne
adc
mov
es
loop
adc
loope
xchg
repz
fimul
in
jae
ja
inc
sub
repnz
or
stos
addr16
jecxz
xor
sbb
scas
scas
jae
ss
and
jbe
into
inc
cwde
adc
jbe
push
and
rol
mov
scas
jae
mov
xor
jbe
push
ss
cli
std
pop
xor
out
push
pop
retf
mov
(bad)
adc
cmp
and
jbe
adc
addr16
jecxz
xor
sbb
scas
scas
jae
push
jl
and
jbe
into
(bad)
fwait
adc
jbe
push
and
rol
mov
scas
jae
mov
xor
jbe
data16
lock
popa
into
fwait
fwait
adc
jbe
jp
jbe
add
das
sbb
sbb
sbb
test
aaa
in
fwait
mov
xor
daa
sbb
sbb
jbe
mov
into
adc
popa
ss
es
not
sahf
mov
(bad)
nop
cdq
adc
dec
in
jae
pop
and
retf
and
add
stc
jns
jae
jbe
ss
xchg
xchg
and
mov
jae
test
mov
into
adc
popa
ss
es
not
sahf
sahf
bound
cdq
adc
dec
in
jae
pop
and
retf
and
add
mov
jbe
ss
xchg
xchg
and
sbb
jae
mov
jae
into
cmp
and
repz
sahf
fimul
adc
lods
scas
jae
xor
adc
lods
jae
xor
(bad)
and
test
jae
sbb
fwait
cdq
jns
jae
xor
sbb
or
jae
jbe
retf
in
cli
pusha
cmps
ins
cwde
icebp
ja
jae
xor
jae
jbe
sbb
jbe
ss
mov
iret
es
jae
scas
lds
loope
in
jae
mov
mov
test
push
and
in
jae
sbb
mov
inc
jae
and
sbb
sbb
push
in
jae
jbe
xchg
(bad)
xor
sbb
lods
scas
jae
jbe
jbe
jbe
shl
loop
xor
sahf
scas
jge
jbe
jae
aam
mov
cmc
sub
add
in
jae
neg
xor
jbe
or
int
loope
and
mov
repnz
sar
jae
sahf
cs
jbe
jb
mov
enter
mov
jb
jae
push
std
jmp
(bad)
mov
es
test
add
jbe
or
xor
sbb
scas
jae
ja
jae
sahf
arpl
fimul
sub
and
leave
pop
xchg
xor
jae
jae
(bad)
addr16
jae
jbe
out
mov
cli
std
pop
xor
out
imul
dec
jbe
jae
call
and
jbe
fwait
lods
jp
jae
repz
popf
fimul
in
sbb
add
xchg
cdq
loope
and
jbe
sbb
jbe
jb
inc
in
in
fs
sub
jbe
cwde
cmp
sahf
push
jge
jbe
mov
dec
in
jae
xor
and
shl
and
sbb
(bad)
pusha
xchg
mov
jae
mov
cmps
jp
mov
out
in
lods
xchg
ins
lahf
sbb
and
adc
addr16
adc
sub
jl
and
mov
jl
adc
jae
lahf
es
jbe
bound
in
jl
add
jae
dec
push
jbe
push
and
jbe
dec
sbb
repnz
jb
jbe
out
sub
push
pop
xor
jbe
jae
xor
and
xor
fwait
sbb
add
and
gs
call
fmul
adc
sahf
adc
mov
and
ret
add
fimul
in
jp
jns
mul
mov
adc
(bad)
lods
jae
and
pop
dec
std
imul
(bad)
add
scas
jecxz
mov
mov
out
mov
mov
cdq
ins
scas
repz
stc
mov
mov
mov
jns
fmul
fstp
and
imul
fisub
addr16
adc
mov
adc
dec
xor
jbe
test
jns
jae
dec
mov
addr16
jl
mov
jae
xlat
mov
addr16
sbb
inc
xlat
jae
cmc
leave
pop
xchg
xor
jae
dec
pushf
(bad)
addr16
push
and
add
into
mov
sub
jbe
jl
cli
jmp
and
xor
fwait
pop
nop
adc
jbe
mov
gs
jbe
xor
repz
xchg
jno
jae
lahf
mov
and
aaa
in
dec
pusha
jle
jnp
add
fwait
xor
jae
ins
shl
or
mov
jmp
call
clc
cli
mov
neg
sbb
jbe
dec
and
dec
xor
add
and
inc
jne
and
xchg
and
loop
xor
or
and
(bad)
dec
xor
jp
xor
bound
and
jbe
sbb
xchg
loopne
and
mov
dec
and
dec
xor
(bad)
dec
xor
inc
jne
and
data16
jae
add
fwait
popf
jp
jae
mov
mov
jmp
rcr
sbb
mov
cmps
shl
mov
mov
lock
idiv
mov
mov
bound
jbe
test
adc
jbe
sub
fstp
cli
loop
adc
jbe
mul
adc
aaa
in
fwait
leave
jl
jae
retf
in
mov
mov
push
add
push
mov
jae
and
jae
mov
fwait
mov
jge
jae
sub
and
jmp
stc
mov
(bad)
imul
fidiv
dec
push
ret
and
imul
fidiv
jae
repz
mov
mov
and
jbe
(bad)
and
adc
dec
in
jae
(bad)
outs
mov
add
sbb
mov
addr16
out
and
adc
mov
sub
mov
jbe
jae
inc
xor
and
jl
jae
inc
push
push
das
jbe
call
shl
or
mov
jmp
(bad)
mov
es
not
mov
mov
shr
mov
mov
outs
jg
jbe
mov
push
adc
jbe
mul
adc
ss
fwait
leave
jg
jae
retf
in
mov
mov
push
add
push
loop
addr16
jae
and
jae
mov
outs
mov
in
fwait
and
int3
sub
and
mov
lock
mov
fdiv
adc
push
push
xchg
jbe
xchg
repnz
sbb
jbe
inc
cmp
lods
jae
mov
sub
mul
popf
sar
in
mov
mov
and
mov
dec
fmul
and
or
and
jbe
jae
xchg
in
and
ss
fwait
mov
in
jae
hlt
call
jae
mov
jb
repz
mov
mov
arpl
mov
gs
repz
mov
mov
fisub
test
xor
(bad)
mov
es
cs
lock
test
ja
mov
adc
xlat
scas
jae
mov
jae
not
fimul
xchg
jbe
mov
xor
sbb
jbe
inc
movs
xlat
scas
jae
popa
in
and
jbe
pushf
sub
repz
mov
mov
fisub
test
xor
(bad)
mov
es
cs
lock
test
ja
mov
adc
jmp
in
and
mov
jae
push
xchg
jbe
fcomi
xor
sbb
jbe
inc
or
lods
jae
ftst
jae
lahf
dec
jo
jbe
mov
gs
repz
mov
mov
fisub
test
repnz
(bad)
mov
es
das
jbe
lock
test
ja
mov
adc
jmp
in
and
mov
jae
push
xchg
jbe
sbb
xor
sbb
jbe
inc
or
xor
jae
lahf
aad
and
mov
mov
dec
in
jae
(bad)
outs
mov
add
sbb
mov
add
sub
pop
jae
and
jbe
ja
jbe
mov
mov
mov
jbe
dec
sub
imul
mov
inc
pop
jb
dec
pop
push
xchg
jbe
pop
repnz
sbb
jbe
inc
or
movs
jmp
and
jbe
neg
mov
mov
imul
pop
adc
loop
imul
repz
or
sbb
std
jg
jae
mov
sbb
jbe
jae
repz
mov
mov
and
jbe
into
and
adc
sbb
sbb
scas
jae
jbe
fisub
jbe
mov
push
jae
and
jbe
aas
daa
jbe
mov
mov
mov
jbe
dec
sub
imul
fimul
ror
push
xchg
jbe
popf
repz
sbb
jbe
inc
add
ins
jmp
and
jbe
neg
mov
mov
popa
jb
mov
lock
mov
fdivr
out
mov
mov
sahf
fld
popa
mul
adc
mov
and
xor
and
mov
and
jns
jae
cmc
sub
enter
or
mov
std
imul
and
sbb
sbb
ss
and
jbe
not
mov
mov
xchg
jbe
(bad)
ror
jmp
add
xor
adc
mov
in
jae
(bad)
gs
jbe
out
mov
mov
test
ss
mov
sahf
ss
jbe
jae
repz
fimul
sbb
addr16
(bad)
ror
jmp
xchg
mov
lock
mov
fcomp
(bad)
mov
adc
adc
fisub
adc
sbb
(bad)
mov
xchg
xchg
and
mov
fwait
pop
jae
jae
ret
sbb
and
mov
xor
sahf
push
jne
jbe
jae
jbe
ja
jbe
jae
jbe
jae
push
int3
jecxz
jbe
retf
in
cli
mov
call
ret
xchg
fmul
adc
sbb
sbb
mov
fwait
xchg
jb
jae
jnp
shl
outs
mov
and
cdq
mov
sbb
fimul
dec
xor
mov
fwait
shl
jae
jbe
not
mov
mov
in
sbb
mov
sbb
and
mov
sahf
sahf
jo
jbe
jbe
ret
and
in
jae
mov
mov
test
xchg
xor
sbb
jae
es
xor
test
outs
xchg
inc
in
fs
cmps
and
retf
lea
jae
xchg
gs
adc
add
mov
adc
sub
jmp
sub
mov
jae
dec
lock
mov
std
cdq
jnp
pop
out
inc
call
(bad)
sub
pusha
jp
jae
jbe
jl
cmps
in
jae
cmc
xchg
arpl
imul
add
mov
sahf
jno
and
jbe
mov
xchg
gs
sub
sahf
jno
and
test
sahf
outs
ja
jbe
inc
movs
xlat
scas
jae
jge
inc
or
lods
jae
sbb
jae
dec
fstp
aaa
in
push
cs
outs
mov
in
fwait
jns
in
jae
mov
xchg
lods
xor
cli
loop
fldcw
ss
push
cs
pop
mov
jb
jae
inc
(bad)
in
fs
js
inc
int3
in
fs
pop
and
dec
adc
xor
push
pop
xor
inc
add
fs
bound
jbe
dec
adc
xor
push
pop
xor
inc
push
xchg
jbe
cwde
sub
adc
ret
sub
out
fs
jne
imul
gs
inc
movs
xlat
scas
jae
jo
outs
sbb
lods
jae
inc
shr
jbe
jne
imul
fs
pushf
call
inc
lock
jbe
jne
imul
gs
inc
or
jo
outs
pop
xlat
scas
jae
inc
int3
in
fs
jne
imul
gs
inc
mov
jo
outs
cmp
lods
jae
lods
cwde
popa
fiadd
clc
mov
adc
sub
mov
jae
jo
mov
ins
in
jae
sub
jae
push
in
addr16
jecxz
jbe
jae
push
loopne
addr16
jecxz
jbe
jae
push
cld
and
jecxz
jbe
jae
push
clc
and
jecxz
jbe
jae
push
int3
and
jecxz
jbe
jae
push
rol
jbe
jae
push
fadd
and
push
fadd
and
dec
and
push
jae
jbe
mov
dec
into
push
push
sbb
cli
fnsave
mov
jae
mov
cli
pusha
mov
mov
pop
gs
popf
in
xor
dec
int3
pop
fistp
jmp
in
jmp
or
stos
jl
jno
mov
jae
mov
sahf
sub
jbe
jb
sbb
and
dec
add
test
pop
and
jb
dec
and
popf
lds
les
jae
and
jnp
mov
mov
mov
hlt
fild
mov
std
nop
push
and
addr16
add
jnp
jbe
jae
push
lods
and
jecxz
jbe
jae
push
test
addr16
jecxz
jbe
jae
push
movs
and
jecxz
jbe
jae
push
mov
jecxz
jbe
jae
push
mov
jecxz
jbe
jae
push
mov
jecxz
jbe
jae
push
mov
addr16
jecxz
jbe
jae
push
mov
addr16
jecxz
jbe
jae
push
mov
and
push
mov
and
push
test
and
push
add
jbe
jae
push
pushf
and
jecxz
jbe
jae
push
cwde
and
jecxz
jbe
jae
push
xchg
and
jecxz
jbe
jae
push
nop
and
jecxz
jbe
jae
push
ins
and
jecxz
jbe
jae
push
push
jecxz
jbe
jae
push
and
jecxz
jbe
jae
push
pusha
and
jecxz
jbe
jae
push
jl
addr16
jecxz
jbe
jae
push
js
addr16
jecxz
jbe
jae
push
je
addr16
jecxz
jbe
jae
push
jo
addr16
jecxz
jbe
jae
push
dec
and
jecxz
jbe
jae
push
dec
and
jecxz
jbe
jae
push
inc
and
jecxz
jbe
jae
push
inc
and
jecxz
jbe
jae
push
pop
and
jecxz
jbe
jae
push
pop
and
jecxz
jbe
jae
push
push
and
jecxz
jbe
jae
push
push
and
jecxz
jbe
jae
push
sub
addr16
jecxz
jbe
jae
push
sub
and
push
and
addr16
jecxz
jbe
jae
push
and
and
push
cmp
addr16
jecxz
jbe
jae
push
cmp
and
push
xor
addr16
jecxz
jbe
jae
push
xor
and
push
or
addr16
jecxz
jbe
jae
push
or
and
push
add
addr16
jecxz
jbe
jae
push
add
and
push
adc
addr16
jecxz
jbe
jae
push
adc
and
push
in
xchg
jl
and
push
call
jecxz
jbe
jae
push
in
addr16
jecxz
jbe
jae
push
loopne
addr16
jecxz
jbe
jae
push
cld
xchg
jl
and
push
clc
xchg
jl
and
push
hlt
xchg
jl
and
push
lock
jl
and
push
int3
xchg
jl
and
push
enter
jl
and
push
les
and
push
rol
jbe
jae
push
fadd
and
push
fadd
and
push
aam
addr16
jecxz
jbe
jae
push
rol
and
push
lods
xchg
jl
and
push
test
addr16
jecxz
jbe
jae
push
movs
xchg
jl
and
push
mov
jecxz
jbe
jae
push
mov
jecxz
jbe
jae
push
mov
jecxz
jbe
jae
push
mov
addr16
jecxz
jbe
jae
push
mov
addr16
jecxz
jbe
jae
push
mov
and
push
mov
and
push
pushf
xchg
jl
and
push
cwde
xchg
jl
and
push
xchg
xchg
jl
and
push
nop
xchg
jl
and
push
ins
xchg
jl
and
push
pusha
xchg
jl
and
push
jl
addr16
jecxz
jbe
jae
push
js
addr16
jecxz
jbe
jae
push
je
addr16
jecxz
jbe
jae
push
jo
addr16
jecxz
jbe
jae
push
dec
xchg
jl
and
push
dec
xchg
jl
and
push
inc
xchg
jl
and
push
inc
xchg
jl
and
push
push
xchg
jl
and
push
push
xchg
jl
and
push
sub
addr16
jecxz
jbe
jae
push
sub
and
push
and
addr16
jecxz
jbe
jae
push
and
and
push
cmp
addr16
jecxz
jbe
jae
push
cmp
and
push
xor
addr16
jecxz
jbe
jae
push
xor
and
push
or
addr16
jecxz
jbe
jae
push
or
and
push
add
addr16
jecxz
jbe
jae
push
add
and
push
sbb
addr16
jecxz
jbe
jae
push
sbb
and
push
adc
addr16
jecxz
jbe
jae
push
adc
.byte
jbe
.byte
