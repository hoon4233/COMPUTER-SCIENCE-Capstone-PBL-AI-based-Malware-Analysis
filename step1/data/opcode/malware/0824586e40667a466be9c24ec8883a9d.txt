(bad)
(bad)
(bad)
inc
push
sbb
push
mov
sub
mov
mov
mov
cmp
jmp
push
cli
cmp
lea
mov
add
or
leave
cmp
jne
(bad)
mov
mov
push
fcom
or
cmp
push
mov
cmp
je
mov
fcom
mov
and
and
mov
shl
(bad)
(bad)
(bad)
fild
jns
cmp
xor
mov
rcl
mov
push
jne
xor
mov
data16
ins
or
(bad)
(bad)
(bad)
sar
cmp
out
jge
mov
cwde
mov
cmp
lock
mov
mov
iret
mov
arpl
mul
scas
popa
je
push
jg
stc
lods
jne
push
sub
mov
cmp
je
pop
push
jne
or
aaa
(bad)
fwait
pop
adc
popa
push
lea
or
cmp
je
loopne
sbb
scas
inc
jge
pop
mov
mov
sbb
clc
repnz
idiv
mov
mov
mov
add
inc
mov
test
jne
lods
lea
mov
jbe
and
push
jp
aam
lods
push
shl
jne
mov
mov
loope
and
or
inc
sub
add
add
inc
xor
add
test
xchg
xor
imul
test
cmp
or
fbld
cld
stos
mov
xchg
loopne
or
jne
lea
cmp
sub
or
mov
dec
psraw
in
test
xchg
pop
retf
sahf
mov
mov
(bad)
jg
je
sti
cdq
mov
js
mov
outs
cli
mov
xchg
push
fstp
jne
mov
jg
sbb
jmp
mov
jle
push
pop
je
call
or
mov
inc
and
push
ds
cli
ret
aas
ins
xlat
mov
adc
mov
ret
call
jp
(bad)
aad
cli
adc
mov
cmp
in
push
imul
nop
cmc
adc
inc
mov
(bad)
aam
jne
es
loope
cmps
fldcw
sub
mov
mov
icebp
mov
and
dec
sbb
mov
jns
test
movs
mov
icebp
mov
stc
pop
add
hlt
pop
sbb
mov
add
ins
in
push
loopne
sub
mov
push
pop
pop
sbb
cmp
mov
lock
push
xchg
adc
inc
pop
mov
je
xor
adc
loope
les
xor
adc
ds
clc
xchg
jge
sbb
cld
icebp
or
jle
jmp
pop
jne
out
mov
jmp
dec
inc
fcomp
jmp
popf
rcl
into
repnz
(bad)
call
sbb
add
pop
mov
mov
sbb
fild
adc
jl
aas
pop
loopne
in
ret
outs
pusha
pop
add
lahf
and
or
es
shr
adc
xchg
je
mov
adc
xor
outs
ss
dec
lock
xchg
add
shl
adc
test
test
cmp
jns
or
idiv
cs
push
je
push
mov
pop
in
sub
ret
movs
hlt
adc
unpckhps
std
push
mov
imul
jbe
cmp
les
push
mov
div
mov
xor
pop
push
shl
rol
sbb
jo
jbe
jne
rcr
aas
(bad)
icebp
sar
jns
(bad)
pop
cld
sbb
les
lea
mov
jp
call
mov
mov
cmp
cmp
adc
push
dec
mov
lea
les
cmp
lods
mov
xlat
mov
movs
push
dec
mov
(bad)
test
inc
push
(bad)
cli
adc
mov
sar
xor
pop
lock
and
out
mov
test
loopne
pop
loopne
sbb
mov
je
jnp
push
loopne
not
(bad)
adc
mov
jle
mov
loope
test
outs
sti
popf
pop
or
or
lods
xchg
cmp
lea
cmp
call
jle
push
jne
test
bound
adc
lods
(bad)
outs
pop
mov
push
jns
jne
or
pop
jmp
push
pusha
or
je
clc
mov
jmp
ret
mov
in
popa
push
mov
int
and
shl
cli
es
inc
test
sub
mov
ret
lea
test
scas
mov
cld
mov
jae
sbb
mov
mov
or
call
test
loopne
es
mov
js
xor
test
mov
test
cld
pop
mov
in
clc
mov
mov
cmp
mov
jb
mov
int
lds
sbb
sub
sub
mov
(bad)
jp
rcl
mov
or
dec
pushf
cdq
mov
mov
hlt
add
rcr
imul
scas
loop
adc
or
mov
push
jae
jne
int3
lock
adc
push
into
js
jns
js
shr
or
je
fs
dec
push
sub
sbb
sar
jns
jbe
je
xor
xor
enter
(bad)
push
mov
lea
and
jne
push
push
jnp
test
or
sar
int3
(bad)
fdiv
push
fwait
pop
test
jne
pop
xor
add
lea
repnz
(bad)
leave
ds
ss
test
popf
and
jmp
cmp
xchg
cmp
loopne
ror
sub
fldz
dec
lea
push
sbb
adc
clc
jne
jp
mov
popf
scas
ret
popf
pop
inc
aam
js
adc
cdq
imul
shl
fs
shr
jmp
and
jne
inc
cmp
mov
outs
pusha
(bad)
stc
retf
fidiv
nop
push
arpl
push
mov
div
push
and
adc
mov
fcom
mov
mov
fldcw
mov
xor
jle
xchg
lahf
push
sbb
data16
aad
mov
push
stos
xor
push
or
push
xor
test
scas
cmp
inc
and
dec
call
sub
mov
mov
pop
das
sbb
add
daa
jle
jmp
inc
imul
or
cld
adc
test
push
ins
(bad)
std
in
je
mov
pop
nop
mov
jne
add
and
mov
fwait
je
(bad)
cmps
mov
inc
cmp
call
mov
rcl
mov
add
and
cs
cli
inc
mov
sbb
enter
jbe
or
push
sub
lods
mov
icebp
movs
adc
push
jbe
xor
and
clc
mov
mov
sbb
push
movs
loope
sar
js
and
shl
mov
xor
push
pop
mul
fisub
fdivr
cmp
js
add
push
stc
xor
mov
(bad)
push
clc
(bad)
mov
mov
mov
mov
sbb
ret
add
lahf
xor
mov
je
dec
pushf
mul
fsin
add
iret
sbb
test
je
mov
fild
es
inc
gs
clc
not
out
or
je
or
adc
fucomp
and
jne
mov
push
push
int3
pop
adc
push
loop
imul
ins
jnp
adc
out
popa
jne
out
or
mov
push
pushf
push
cmc
or
cwde
push
lahf
retf
mov
ss
xor
mov
push
fild
mov
mov
arpl
repnz
fiadd
xor
lock
adc
lods
sbb
push
push
xor
jl
mov
pop
cmp
jbe
(bad)
mov
lock
js
push
imul
sbb
dec
adc
pushf
mov
and
jno
retf
xchg
call
mov
mov
aad
icebp
(bad)
add
popf
sub
sbb
ror
jp
sar
xchg
pop
xchg
std
stos
xor
jb
and
mov
jle
aad
mov
ss
inc
int
and
pop
loop
jne
adc
sbb
cmp
scas
push
dec
adc
add
movs
adc
test
pop
sar
jg
ins
aam
mov
xor
ins
sub
je
sub
inc
das
movs
bound
pop
pop
inc
dec
dec
lods
pop
cmp
scas
dec
xchg
inc
je
pop
lea
add
icebp
(bad)
xor
pushf
sti
std
shr
push
push
sbb
mov
mov
jmp
je
outs
adc
and
or
(bad)
fidiv
cmp
sub
sub
xchg
psubb
push
mov
stos
mov
push
lahf
sbb
push
ret
sbb
jo
movs
(bad)
in
fdivr
and
loope
cmp
test
adc
mov
adc
dec
sub
ds
mov
add
pusha
push
retf
push
stos
mov
js
dec
sti
cld
pop
mov
scas
inc
pminub
dec
fstp
gs
pop
mov
pop
ins
and
jl
mov
xor
add
pop
mov
mov
test
mov
mov
mov
jl
mov
inc
outs
sbb
xchg
aam
scas
mov
sub
fmul
xor
add
int3
push
dec
push
xchg
ror
adc
movs
push
ret
scas
mov
and
test
cs
and
test
ss
in
aaa
ins
jle
test
mov
jl
mov
fimul
in
cmp
and
or
shr
dec
pushf
mov
mov
test
(bad)
sbb
jmp
ss
inc
pop
ss
test
adc
aad
ins
add
popa
push
test
mov
int3
adc
inc
ins
ret
push
mov
imul
loop
popf
icebp
je
sahf
sbb
mov
or
cmp
ror
mov
sub
mov
mov
mov
scas
cdq
adc
inc
in
enter
pop
aas
jb
or
sti
sti
add
mov
or
adc
je
xor
lea
push
lds
sar
push
movs
mov
dec
popa
pop
clc
mov
loope
iret
popa
push
dec
(bad)
ror
(bad)
stos
mov
or
ret
pop
adc
aaa
fdiv
inc
inc
aad
jle
add
cmp
mov
movs
push
xor
adc
(bad)
dec
add
inc
movs
pop
add
sub
adc
je
test
jno
(bad)
fld
lds
push
fsub
jne
and
push
aam
mov
lods
push
and
clc
xor
cmp
add
cld
mov
js
cmps
push
cwde
mov
loopne
cli
test
jge
adc
xor
daa
adc
pop
adc
sbb
test
sub
movs
mov
mov
cmp
cli
xchg
jne
rol
xchg
stos
test
mov
mov
inc
sti
call
xchg
add
push
mov
pop
fcomip
mov
mov
enter
mov
sub
or
out
jne
shl
push
cmp
or
sbb
jae
push
add
cmps
mov
es
not
movs
lahf
push
jo
add
stc
pop
ins
rcl
adc
cld
inc
xchg
sahf
dec
test
sbb
daa
jle
push
or
push
add
fisub
jge
shl
in
adc
outs
pop
push
inc
cli
sbb
xor
jge
lea
add
and
adc
adc
cmp
popf
ret
shl
cmps
sub
mov
and
fimul
dec
nop
jg
push
or
sub
jae
mov
jbe
jae
aaa
loop
mov
dec
xor
jb
js
mov
sbb
push
inc
xor
push
enter
or
aas
mov
out
inc
das
adc
pop
jge
and
sbb
push
jne
(bad)
and
cwde
(bad)
xchg
or
fidivr
xor
dec
sbb
fistp
jo
test
xchg
jne
movs
mov
jmp
ss
cmps
fnsave
adc
pop
cld
shr
out
fsub
sub
add
pusha
push
ror
jne
xchg
ds
clts
sbb
std
sbb
shr
outs
sti
xor
in
(bad)
push
imul
push
out
jo
adc
push
les
fidivr
scas
mov
inc
jbe
mov
scas
imul
scas
scas
sbb
jae
sub
jo
adc
movs
and
mov
xlat
mov
lods
push
jb
fiadd
(bad)
fisttp
jle
leave
xor
cdq
push
lods
mov
mov
fld
neg
mov
jbe
test
cmps
ret
mov
adc
cmps
jo
xor
mov
cmp
push
mov
outs
push
mov
dec
adc
and
sbb
mov
ss
leave
movs
ret
sub
cld
add
or
or
(bad)
or
ins
sub
icebp
mov
lock
sar
jg
fidiv
jo
inc
mov
mov
lea
js
adc
lock
jb
lods
mov
push
ror
int3
and
push
mov
pop
daa
add
sbb
mov
dec
ror
pop
dec
xor
push
test
dec
mov
jl
ss
or
inc
and
or
push
hlt
(bad)
cmc
mov
jmp
out
popa
sub
jne
jmp
sti
fmul
shr
(bad)
mul
clc
xor
push
push
jle
jl
push
jmp
aas
sbb
add
ss
jmp
add
jne
xchg
loopne
adc
mov
inc
dec
call
cmp
or
xor
mov
retf
xor
fld
(bad)
sar
cwde
repz
enter
or
sub
loopne
mov
cmp
les
sbb
cs
mov
push
call
push
out
pop
pop
sbb
test
out
fdivrp
push
ins
pushf
je
mov
fs
dec
cmp
mov
push
mov
mov
push
fidiv
sbb
lahf
outs
adc
pop
push
and
cwde
sub
in
(bad)
pop
out
dec
aas
dec
mov
sbb
(bad)
retf
cld
fsubr
loop
push
in
rcr
adc
call
mov
push
dec
call
cdq
push
jl
je
cmp
adc
mov
in
jmp
or
inc
add
outs
jo
js
or
or
mov
rcr
jne
ds
cmp
lea
mov
cld
jo
cmp
es
or
dec
loopne
mov
stos
test
loopne
jbe
sahf
dec
std
test
xor
push
mov
je
mov
cmp
mov
lock
js
mov
movs
inc
xchg
add
mov
dec
mov
dec
push
sbb
sub
fcom
add
mov
pop
je
adc
(bad)
test
jge
repnz
cld
inc
inc
cmp
push
dec
add
and
je
aam
gs
jne
loop
(bad)
fnsave
pop
mov
bound
outs
cmp
test
cmp
and
push
push
pusha
xor
(bad)
je
cli
or
xor
adc
adc
push
int3
(bad)
call
adc
xor
pop
jge
inc
add
rcr
clc
mov
push
(bad)
jmp
ins
mov
jb
xor
cmp
jecxz
in
jl
mov
xchg
push
les
mov
sbb
dec
or
mov
jl
push
dec
icebp
clc
dec
pop
pop
out
or
sahf
(bad)
aaa
cwde
dec
mov
in
retf
pusha
aad
fsub
cli
pop
ret
xchg
ja
mov
(bad)
pop
adc
not
xchg
in
push
fsubr
or
add
call
add
adc
sub
jmp
or
in
pop
hlt
fadd
add
add
adc
les
add
add
add
mov
and
inc
or
jge
int
mov
or
add
add
add
sti
jmp
inc
add
sbb
jno
and
(bad)
fistp
push
js
inc
or
adc
add
adc
add
fwait
mov
add
mov
pop
sbb
sub
ficomp
adc
and
nop
or
int
mov
add
xor
jbe
(bad)
fsubrp
in
mov
push
add
and
cmp
sub
add
sbb
push
or
movs
adc
mov
sar
adc
inc
or
push
add
adc
sbb
es
dec
adc
div
sti
add
or
sbb
fbld
cwde
jo
push
jo
mov
in
add
add
outs
aas
clc
rol
add
pop
push
pusha
pop
sbb
push
add
pop
imul
add
add
enter
out
fisubr
fsubr
rcr
mov
cld
add
add
add
inc
adc
in
pop
xor
add
test
pop
cmp
rol
outs
fcomp
inc
push
sbb
sub
mov
pop
add
add
push
jp
pop
push
xchg
fcmovu
add
test
fadd
js
mov
out
cmp
cwde
and
push
(bad)
in
cmp
push
add
add
xchg
xchg
adc
push
dec
add
pop
mov
dec
mov
add
retf
rol
sar
push
or
cwde
push
clc
add
enter
fsubr
int
inc
and
add
rol
pop
push
es
cmp
aas
mov
mov
bound
xchg
div
fst
xor
cwde
add
add
ret
not
call
dec
xor
lock
loopne
add
push
sub
or
clc
add
(bad)
mov
mov
push
enter
push
outs
xchg
loop
add
dec
out
pop
adc
push
add
and
or
lock
pop
push
mov
into
push
fucomip
pop
jnp
mov
jp
add
add
cmp
sahf
dec
ins
jno
enter
ss
push
mov
clc
add
xchg
dec
data16
dec
adc
mov
mov
or
pop
add
push
fadd
ss
inc
adc
ror
jle
add
fldcw
mov
fisttp
inc
mov
push
xor
mov
sub
or
mov
xor
sub
(bad)
push
into
push
mov
pusha
jle
dec
shr
inc
add
add
jg
je
pop
fbstp
or
mov
je
ret
fld
add
add
push
jle
call
xor
mov
jnp
inc
shr
scas
push
scas
xor
pop
into
push
mov
cmp
inc
push
mov
sbb
cwde
pusha
ret
or
xor
mov
push
adc
mov
mov
fdiv
sbb
mov
into
add
sbb
jle
pop
imul
jb
xchg
outs
xchg
enter
and
cmp
push
cmps
shl
xor
pop
mov
cwde
rol
lahf
xor
pop
xor
retf
push
shl
popa
mov
mov
inc
push
ja
mov
xchg
push
jne
add
add
pop
push
push
push
add
pop
out
dec
jo
in
and
mov
add
jbe
ret
fadd
sub
sahf
retf
mov
dec
lock
lock
(bad)
outs
cwde
aas
sbb
mov
inc
mov
retf
cmp
scas
push
pop
hlt
xchg
std
xor
xor
scas
push
pop
or
push
popa
das
dec
cwde
sbb
cs
jp
sbb
sahf
push
js
inc
jle
cmps
repnz
push
loopne
push
mov
ret
sti
loop
xor
mov
das
repnz
jle
pop
pop
pop
xor
cli
mov
sub
cmps
sahf
xchg
cmp
mov
jp
pop
jmp
add
call
cmps
add
push
fimul
or
add
test
push
es
out
imul
sahf
jp
sahf
mov
jmp
mov
and
jmp
dec
ret
cmp
das
push
jbe
add
test
jb
pop
mov
(bad)
mov
jle
push
dec
rcl
retf
out
int3
aad
ret
fcomip
call
into
(bad)
iret
into
jb
cwde
shl
mov
mov
add
mov
mov
jno
mov
retf
mov
scas
sbb
push
push
mov
cwde
mov
push
xchg
es
sub
mov
add
or
xor
push
inc
push
fimul
mov
test
cs
push
shl
sbb
sar
divps
shl
jle
xor
dec
mov
dec
shr
sar
pop
fwait
ret
push
cmovo
int3
je
movq
pusha
push
pop
stos
mov
adc
aas
xchg
retf
clc
cli
cmp
sub
iret
pop
xor
pop
jmp
inc
mov
out
sahf
enter
inc
xor
enter
fs
fild
inc
or
jp
jg
xor
mov
cwde
scas
mov
outs
outs
add
xchg
loop
pusha
pop
ror
rcl
add
fadd
xchg
pushf
(bad)
(bad)
data16
push
loope
pop
pusha
pop
sbb
mov
pop
cwde
push
adc
push
and
loop
rol
xor
adc
cmp
mov
bound
jb
or
ret
dec
lock
or
(bad)
iret
ret
mov
push
cwde
pop
and
push
or
jbe
add
fadd
mov
ss
pop
div
xor
test
sar
jo
inc
push
scas
pop
xor
pop
shl
mov
ret
inc
ret
add
add
stos
pop
cmp
or
sbb
rcr
mov
(bad)
out
pop
loopne
and
sbb
push
mov
fidiv
test
aas
dec
sub
pop
bound
adc
sbb
sahf
push
sbb
repnz
push
cwde
rol
dec
fistp
mov
pop
mov
into
inc
inc
push
sub
cmps
out
mov
add
inc
jp
fiadd
push
loopne
cs
or
jl
push
pop
add
cs
xchg
loopne
push
dec
das
clc
mov
pop
push
mov
mov
push
jb
je
dec
push
inc
fiadd
dec
fiadd
add
xor
dec
pop
into
push
add
xlat
sar
pop
push
sbb
clc
add
test
mov
retf
or
jle
cmp
rcr
sbb
push
ret
push
pop
test
add
push
cmp
loop
push
and
stos
xchg
xor
add
mov
pop
push
push
or
or
fsubr
pop
xor
push
lock
test
push
sub
(bad)
sub
ret
or
and
fiadd
push
into
pop
pop
pop
dec
mov
enter
mov
mov
sbb
push
pop
add
es
mov
pop
adc
and
call
xor
mov
add
rol
add
adc
add
(bad)
repnz
sbb
stos
jo
pusha
gs
loopne
ds
pop
call
sub
push
mov
ss
pop
jno
div
call
add
pop
dec
mov
cmp
pop
push
adc
ja
scas
and
sub
mov
sbb
inc
lock
mov
fisubr
push
add
pusha
(bad)
fiadd
pusha
xor
push
test
sbb
and
adc
mov
adc
or
outs
inc
stos
stos
(bad)
mov
rcr
jo
add
cli
sub
xlat
loop
mov
mov
adc
jne
fisubr
push
inc
or
jmp
xor
int3
popa
outs
dec
or
push
pop
cwde
leave
push
add
add
scas
sahf
jbe
cmp
mov
js
rol
fdivr
push
out
ins
dec
sub
not
js
bound
es
shl
add
add
inc
inc
push
xor
nop
ficomp
pop
(bad)
ss
(bad)
enter
xchg
cmp
cmp
jmp
add
push
and
push
pop
int3
sbb
or
sbb
cli
sbb
adc
mov
adc
xchg
jle
mov
jnp
loop
push
xchg
cdq
add
(bad)
fmul
cmp
call
sub
jle
dec
add
xchg
jle
les
adc
enter
or
mov
nop
xor
int3
xchg
xchg
push
push
out
cs
loopne
and
scas
sahf
pop
or
shr
test
and
and
outs
inc
rcr
jbe
push
scas
or
push
cmp
cmp
adc
faddp
or
cwde
push
mov
pop
scas
neg
add
adc
mov
cmp
loopne
pop
fiadd
cmp
loop
stos
repnz
mov
mov
or
push
data16
shl
push
adc
bound
add
push
or
push
inc
dec
pop
mov
xor
lds
fisubr
add
pop
ficomp
loopne
or
es
or
outs
sub
add
pusha
rol
js
add
retf
jo
push
(bad)
and
shl
daa
push
push
inc
xchg
scas
or
add
mov
pusha
and
ror
pop
idiv
add
jle
xchg
(bad)
aam
xchg
cmp
mov
mov
in
bound
and
(bad)
call
loop
ret
jbe
dec
bound
xor
or
outs
ficom
or
or
in
push
add
mov
and
push
jecxz
loope
(bad)
out
xchg
nop
mov
sub
jbe
mov
lds
dec
data16
adc
repnz
mov
pop
add
xor
push
add
pop
test
fdivp
xchg
dec
test
add
adc
ret
jp
repnz
sub
cmp
ret
jmp
jno
sbb
mov
mov
jle
push
push
js
inc
cwde
idiv
clc
outs
mov
jb
cs
add
les
outs
or
push
add
push
push
add
jae
push
cmp
mov
mov
xor
adc
cwde
dec
or
cs
call
jo
add
jle
test
ret
push
shl
fidiv
test
js
ss
adc
xor
pop
ficomp
scas
mov
ret
js
test
retw
cs
cs
lods
inc
and
dec
inc
sahf
loop
mov
data16
mov
sub
mov
adc
dec
out
pop
mov
loop
push
aad
or
pusha
xchg
scas
cmps
pop
push
push
add
pusha
xchg
sbb
and
xchg
call
push
(bad)
mov
cmps
add
retf
add
fiadd
es
cwde
jmp
xor
and
ds
scas
or
push
outs
not
stos
or
inc
test
jmp
push
jo
rol
add
cs
dec
in
js
mov
xchg
sbb
sub
cmp
push
push
jmp
adc
xchg
push
mov
jbe
call
retf
push
inc
mov
mov
shr
sub
fidivr
and
add
mov
sub
outs
xchg
dec
es
adc
es
cmp
add
call
fsubrp
xchg
push
dec
pop
jb
jbe
loop
sahf
cmp
mov
add
inc
fisubr
inc
adc
add
je
pusha
into
dec
sub
jp
add
mov
fisub
add
adc
cli
push
add
popa
stos
test
push
ret
(bad)
push
sbb
sbb
mov
push
push
jb
xor
lock
test
add
and
ss
int
xchg
adc
data16
push
out
cmps
xor
ss
call
pop
or
pop
push
fadd
push
inc
and
mov
adc
mov
sub
or
stos
(bad)
push
test
xchg
push
xor
push
sar
dec
push
pop
loopne
jnp
sub
mov
inc
or
inc
mov
dec
mov
add
mov
sbb
jnp
cli
mov
xor
mov
mov
jp
mov
pop
sub
xor
pusha
dec
loop
loopne
push
out
test
mov
sar
out
jle
jo
or
dec
shl
pop
adc
and
or
cmp
dec
repnz
xor
push
scas
push
inc
scas
mov
mov
jb
aam
out
and
push
into
rcl
js
lock
add
nop
mov
loop
add
scas
ss
mov
out
pop
mov
xor
push
(bad)
or
pop
xlat
jo
(bad)
dec
push
ins
rol
push
mov
push
jp
push
jb
add
jo
dec
xor
adc
jle
pusha
pop
mov
ret
dec
xor
int3
call
mov
ror
dec
ror
push
jmp
push
xchg
or
outs
dec
repnz
pusha
pop
clc
(bad)
fidiv
out
sbb
push
dec
add
mov
shl
push
bnd
mov
push
push
ds
add
test
repnz
and
stos
enter
add
push
(bad)
or
data16
inc
push
sbb
mov
sahf
shl
push
xor
retf
or
fisubr
or
shl
out
mov
bnd
retf
xlat
dec
movs
xor
pop
or
idiv
jo
xchg
add
rcl
push
out
gs
adc
into
xor
dec
ds
jo
or
and
cmp
mov
mov
push
xchg
pop
int3
jbe
into
loop
out
push
or
cmp
adc
dec
fcomp
push
sub
shl
xor
(bad)
xor
je
sbb
sub
mov
push
cwde
cmp
ret
rol
dec
or
mov
cmp
mov
xchg
add
loopne
jb
mov
into
inc
cmp
mov
pop
push
pop
push
adc
cmps
push
(bad)
sub
outs
call
inc
jmp
mov
sahf
mov
add
mov
mov
push
sahf
pop
xor
xchg
xor
shr
push
mov
and
mov
(bad)
(bad)
mov
push
jle
fs
scas
cmps
or
and
ret
xor
push
mov
jo
into
push
sbb
adc
add
dec
inc
loopne
leave
xor
push
sbb
jle
fsubr
sub
call
aam
test
cmps
or
mov
push
jle
mov
jle
repnz
shr
cmp
outs
dec
dec
xor
call
push
outs
lea
pop
push
stos
xlat
add
(bad)
test
xchg
push
retw
push
retf
xchg
jmp
mov
test
push
push
sub
mov
inc
pop
cmps
enter
or
outs
cli
enter
push
sbb
cmp
inc
mov
mov
sbb
add
clc
mov
enter
dec
push
and
push
cwde
mov
mov
cs
or
mov
adc
pop
pop
and
mov
ret
inc
ror
sub
adc
xor
add
and
pop
inc
jo
sub
or
je
fsubr
(bad)
loopne
sbb
push
push
jb
fnstenv
jecxz
xor
enter
loope
lock
cwde
pop
add
xchg
mov
popa
loope
push
adc
xchg
imul
push
jo
outs
and
push
push
push
dec
inc
(bad)
outs
scas
sar
mov
xchg
push
ret
and
mov
pusha
inc
cwd
adc
mov
ror
mov
jbe
out
(bad)
xor
mov
cs
rol
push
pusha
ds
adc
mov
ret
mov
and
mov
push
sbb
rcr
push
mov
mov
(bad)
and
cwde
xchg
or
cmps
pop
sub
cmps
bound
jp
inc
scas
adc
es
dec
sub
bound
xchg
push
call
and
outs
and
xor
loop
lea
pop
loopne
inc
adc
fs
cmp
pop
dec
push
cmp
test
into
mov
lock
inc
sahf
sub
test
inc
or
out
scas
enter
push
inc
mov
(bad)
loope
scas
xor
push
pop
inc
and
and
dec
mov
jl
rcl
add
xchg
cmps
push
inc
sub
mov
add
inc
sub
dec
loopne
xor
sbb
mov
ret
outs
adc
(bad)
dec
mov
ret
jo
pop
repnz
sbb
or
xchg
outs
mov
movs
add
mov
adc
fidivr
push
cs
adc
push
xchg
ss
add
jle
lods
push
adc
push
in
leave
dec
pop
(bad)
sub
sbb
push
mov
dec
pusha
mov
jb
mov
push
loop
push
jbe
mov
shl
jb
dec
add
fs
cmp
(bad)
sub
mov
sbb
cmp
push
ret
or
xchg
imul
into
rol
xchg
call
mov
into
(bad)
mov
cmp
push
fimul
adc
jbe
pop
in
or
pop
clc
pop
or
push
cs
loopne
mov
into
ds
call
jmp
fiadd
adc
enter
addr16
mov
pop
cmps
or
push
xor
ficom
aaa
xchg
jb
jno
sahf
(bad)
(bad)
and
mov
lods
add
es
inc
mov
xor
dec
clc
jb
cmp
dec
xor
(bad)
(bad)
fidivr
push
lods
xchg
xchg
outs
and
or
loopne
cs
pop
inc
sub
adc
stos
dec
jo
and
shl
and
cmp
inc
ror
xor
add
outs
ds
cmps
push
cmp
loop
sbb
pop
bound
adc
aam
jp
mov
pop
dec
add
bound
popf
pop
adc
pop
xchg
jmp
sahf
dec
mov
popa
xor
push
clc
sub
xchg
jbe
add
cli
(bad)
sahf
pop
push
jbe
jbe
xor
mov
sub
into
cmp
imul
dec
sub
scas
mov
stos
xchg
jb
adc
outs
sahf
pusha
xchg
pop
sub
mov
call
das
sub
push
pop
(bad)
adc
imul
cmps
shr
js
popf
adc
push
data16
pop
push
inc
sbb
ds
adc
adc
sbb
push
cs
cli
(bad)
cs
jae
add
sbb
cmp
pusha
and
movs
push
fimul
sar
pop
jp
adc
test
push
xchg
adc
mov
and
fisub
pop
scas
mov
pop
xor
push
dec
mov
sbb
js
mov
xchg
pusha
(bad)
and
add
and
dec
mul
pop
inc
push
pop
dec
or
scas
mov
fimul
mov
(bad)
jmp
scas
xchg
adc
xchg
and
dec
and
ss
push
mov
cs
and
mov
mov
out
lods
jo
loope
cmp
jbe
loop
shr
add
mov
sub
dec
add
dec
and
dec
xchg
add
fidiv
xchg
and
cwde
add
jecxz
push
mov
pop
add
add
inc
montmul
cmps
add
push
ret
fsubrp
or
nop
out
add
xor
into
or
cmp
test
(bad)
jmp
or
gs
shl
and
dec
out
call
jbe
sub
push
ficom
add
cmp
xor
jle
or
xchg
push
xchg
inc
sub
call
or
pushf
call
sar
data16
add
adc
ds
or
ret
mov
push
cmps
sbb
sahf
rol
push
mov
call
(bad)
out
into
push
dec
jbe
add
loop
sbb
daa
xchg
pop
mov
mov
push
xchg
enter
call
cmp
sub
leave
xor
fisubr
sahf
or
push
mov
inc
xchg
push
dec
cwde
push
sub
loop
pusha
rol
mov
int3
sbb
add
mov
pop
xor
xchg
push
inc
ret
(bad)
fisub
xor
ds
xor
mov
or
int3
add
xor
jp
or
daa
inc
jp
mov
inc
loopne
imul
dec
fcmove
test
jne
xor
jmp
or
push
adc
retfw
sub
mov
rol
jbe
jmp
inc
(bad)
push
cmp
(bad)
jmp
or
mov
loopne
sub
adc
addr16
pushf
mov
mov
xchg
pushf
outs
ds
push
out
es
mov
or
xchg
xor
cmps
push
adc
cmp
push
ss
xor
xchg
jmp
mov
retf
and
xchg
(bad)
xchg
add
lea
out
cmp
shl
loopne
outs
jb
sub
in
jp
jp
adc
mov
push
sub
out
jle
es
push
enter
retf
pop
pop
bound
jb
pusha
pop
push
stos
mov
add
cmp
aad
cmp
jle
jo
mov
sub
or
sbb
pusha
add
cmps
fisub
jmp
adc
pop
jmp
xchg
fidivr
jbe
ret
es
pop
(bad)
jp
outs
mov
cmp
rcr
sub
sahf
sbb
pop
xchg
push
fld
pushf
jbe
mov
out
inc
ror
outs
add
push
bound
mov
scas
sub
add
add
call
mov
xor
rol
inc
test
sahf
dec
add
js
(bad)
aas
inc
add
repnz
adc
dec
clc
(bad)
inc
pop
dec
scas
sbb
scas
add
pusha
data16
adc
jp
inc
push
add
es
adc
inc
ss
enter
mov
jbe
mov
push
cmp
sub
jb
loop
and
enter
mov
fcom
sub
ss
xor
ficom
stos
idiv
add
add
ficomp
movs
into
push
pop
retf
sub
adc
mov
sub
dec
mov
aam
mov
sub
in
rol
test
dec
sahf
or
lock
mov
mov
dec
data16
js
jmp
push
add
(bad)
add
push
pushf
xor
sbb
cmps
mov
retf
shl
mov
mov
jo
sub
cli
adc
sbb
jae
push
stos
adc
ret
cs
add
daa
mov
call
jp
call
sbb
push
inc
add
out
mov
adc
scas
dec
shr
cmp
cli
cmp
bound
inc
push
sub
sbb
(bad)
dec
test
xor
push
pop
adc
jbe
inc
jae
add
es
enter
loopne
outs
outs
pop
loope
adc
cmps
sar
xchg
sbb
mov
cs
and
adc
push
sub
or
ret
sbb
(bad)
mov
dec
call
adc
fld
clc
jle
sub
mov
cmps
mov
push
inc
repnz
and
sbb
xchg
popa
idiv
and
jl
ret
xor
jo
adc
loop
add
or
push
and
xchg
dec
pop
push
jp
(bad)
or
into
adc
add
push
mov
dec
cmp
sbb
push
es
fisubr
cli
add
add
out
cwde
or
(bad)
test
xchg
sub
cmps
loopne
out
xchg
pop
sbb
or
test
ret
xor
inc
ins
ret
pop
sub
fisttp
out
out
dec
sar
pushfw
sbb
scas
push
mov
and
adc
data16
outs
mov
or
dec
dec
push
cmp
sbb
sbb
pop
add
add
dec
(bad)
neg
or
xchg
fidivr
call
mov
or
out
(bad)
lock
mov
mov
jbe
pop
neg
inc
test
inc
xchg
push
and
pusha
test
mov
cmp
add
sub
idiv
(bad)
mov
xchg
fdivr
int3
adc
fdivp
inc
ds
push
add
sar
int3
sbb
mul
nop
jecxz
pop
xchg
add
loop
imul
adc
xchg
lea
stos
scas
ret
add
sbb
mov
cwde
bnd
and
pop
add
add
xor
test
stos
add
sahf
sbb
mov
mov
mov
xchg
xchg
loop
sbb
jg
push
ror
or
rol
icebp
inc
call
or
dec
es
ror
dec
xchg
inc
and
sub
sub
push
mov
xchg
push
ret
mov
(bad)
push
jp
outs
sbb
ret
data16
and
lock
sub
(bad)
rol
enter
mov
popf
and
aad
push
pop
(bad)
inc
rol
xor
cmp
add
add
jae
fidiv
or
mov
bound
xchg
dec
(bad)
cmp
cs
xchg
lods
xchg
cmps
cli
div
cmps
out
rol
imul
dec
push
add
and
cmp
adc
dec
retf
loope
adc
outs
ret
add
and
xor
repnz
lods
add
retf
xchg
pop
or
pop
push
pop
push
and
mov
and
mov
inc
xchg
fsubp
push
xchg
ds
pop
pop
sahf
mov
in
ror
mov
cmp
push
fisub
rcl
bound
push
adc
es
rol
mov
push
sbb
jo
jbe
add
sbb
xor
push
(bad)
inc
jp
xor
repnz
add
dec
cmp
inc
mov
xchg
dec
call
mov
shl
cs
jo
push
clc
adc
xchg
not
sbb
add
adc
ds
loopne
pop
pop
xlat
test
dec
stos
bound
fistp
inc
xchg
retf
jle
dec
mov
mov
mov
mov
ds
sub
pusha
dec
(bad)
(bad)
mov
popa
cmps
mov
and
dec
and
or
and
data16
mov
xor
gs
jbe
mov
popf
adc
ds
loop
sub
out
loopne
mov
add
in
jmp
ror
inc
cmp
ret
ret
xchg
out
xor
cs
cmp
and
adc
and
retf
int3
and
loope
add
ret
hlt
add
inc
repz
or
push
call
dec
outs
mov
xor
mov
add
es
in
lea
shl
mov
cli
inc
push
cmp
push
pop
cli
sbb
retf
sub
add
cmps
inc
push
push
ret
popa
or
jp
ds
dec
mov
pusha
mov
jmp
add
jl
jle
inc
mov
adc
sub
sbb
inc
enter
inc
sbb
(bad)
cli
ror
fidivr
or
add
push
test
cmp
sti
inc
mov
push
jbe
add
inc
ror
js
(bad)
cdq
adc
out
ds
jmp
xchg
movs
push
into
ss
pop
push
cwde
push
mov
mov
add
(bad)
and
pushf
ds
and
xchg
imul
xor
daa
ret
cli
inc
dec
cwde
sub
mov
outs
jp
jo
loope
sub
adc
sbb
les
push
ret
inc
adc
add
adc
in
sub
js
adc
mov
jno
or
mov
push
(bad)
scas
xor
sbb
push
inc
mov
dec
mov
push
sub
add
mov
outs
test
loope
cmp
stos
pusha
push
mov
mov
cs
(bad)
pop
mov
stos
xchg
add
sbb
js
retf
bnd
test
pminub
(bad)
or
nop
dec
(bad)
jmp
or
out
mov
dec
(bad)
adc
dec
into
scas
inc
sub
dec
push
in
or
ficomp
sbb
push
repnz
xchg
xor
fcomp
popa
push
push
fiadd
fsubrp
and
jecxz
xchg
adc
sbb
jle
push
mov
xor
arpl
and
and
cmp
push
outs
xchg
pushf
pop
mov
xor
outs
call
mov
rcl
shl
into
pop
pop
add
popf
out
push
scas
fld1
inc
dec
repnz
outs
fisub
push
add
sbb
push
xchg
mov
and
add
pop
and
mov
rol
and
mov
loopne
adc
cli
push
inc
jp
aam
xor
adc
into
xor
push
xchg
outs
jp
pop
js
mov
scas
shr
out
mov
push
jle
call
xchg
mov
call
(bad)
rcr
rol
cmps
mov
xor
pop
push
mov
mov
popf
repnz
sbb
mov
sbb
and
ror
add
inc
pop
aam
mov
sub
add
popf
inc
(bad)
mov
xlat
push
pop
sbb
jno
jne
jp
mov
mov
xchg
stos
fisubr
popa
add
jle
outs
and
dec
and
ret
mov
add
add
xor
adc
test
jg
or
movs
data16
sub
ret
sbb
push
push
shr
sub
add
jbe
(bad)
mov
ror
adc
pop
mov
adc
jle
push
push
das
mov
sbb
jbe
jnp
pop
or
inc
add
and
pop
out
and
inc
(bad)
cs
dec
xchg
inc
push
cli
stos
add
nop
sbb
ss
jp
sbb
jbe
es
mov
pop
mov
cmp
dec
jno
out
xchg
mov
push
fidivr
cmp
jo
push
add
lods
icebp
pusha
cli
or
xchg
cmp
jle
push
inc
pushf
sub
retf
add
mov
sub
loop
data16
rol
jmp
ds
cs
test
sub
popa
sub
add
mov
xchg
ficomp
push
push
sbb
add
inc
icebp
nop
adc
sbb
mov
sbb
add
retf
into
cli
or
adc
push
rol
loopne
call
popa
cmps
mov
out
or
pop
or
cs
mov
lods
xchg
fimul
or
pusha
sbb
repnz
sub
bound
dec
movs
xchg
out
inc
add
push
sub
or
or
cmp
enter
or
shr
inc
ret
cwde
sub
cs
mov
(bad)
(bad)
adc
hlt
sbb
push
xchg
xchg
pop
dec
call
inc
sub
ret
loop
dec
pop
push
sbb
push
cs
pop
mov
out
xchg
and
add
ret
rol
outs
or
sub
shr
xor
in
fidivr
scas
push
sahf
in
sbb
cmp
mov
test
push
ret
jp
sbb
test
cmc
xchg
or
mov
mov
mov
loopne
adc
mov
adc
xor
rcr
dec
rcr
pop
mov
dec
cli
inc
or
cwde
repnz
inc
or
sbb
(bad)
scas
pop
adc
xchg
push
scas
sbb
xchg
inc
imul
in
mov
outs
cmp
and
data16
jmp
pop
sbb
or
sbb
mov
push
sub
mov
clc
cli
es
or
cmp
shl
js
sub
(bad)
enter
push
push
mov
jb
mov
push
ficomp
(bad)
dec
mov
adc
inc
xchg
(bad)
pop
adc
push
rcr
or
push
push
push
es
and
push
dec
jecxz
add
dec
inc
outs
cmp
mov
jp
jae
and
outs
scas
dec
inc
ror
xchg
and
imul
ret
data16
and
aad
xchg
push
jb
add
js
sahf
adc
pop
cs
test
cli
add
cli
sub
push
xor
push
push
push
xchg
push
push
fiadd
sbb
ret
mov
xchg
es
adc
push
jbe
mov
add
shl
bound
add
aam
inc
push
push
loope
xchg
retf
push
mov
adc
mov
stos
cmps
xor
push
push
pop
and
fsubp
stos
loope
test
mov
mov
scas
pop
mov
jecxz
sbb
xor
ret
xor
adc
mov
push
rol
add
jb
outs
test
pop
push
fcom
retf
sahf
sahf
call
ss
stos
xor
sub
push
cmp
mov
mov
mov
out
idiv
jne
push
jb
add
mov
dec
add
push
add
bound
add
or
xor
mov
call
mov
sbb
xchg
jmp
sub
and
hlt
in
(bad)
cmps
xchg
rol
add
scas
xchg
sbb
ret
xor
mov
inc
add
and
test
or
arpl
popa
(bad)
push
jle
push
xchg
or
dec
bound
pop
inc
or
xchg
inc
ror
xor
cmp
adc
outs
(bad)
dec
jle
sub
push
adc
test
xor
ret
(bad)
ds
xor
xor
bound
aas
outs
inc
js
dec
scas
xor
xor
add
add
into
jmp
ret
bound
inc
or
mov
popf
fisub
jb
imul
adc
adc
es
es
inc
push
mov
push
adc
es
push
jmp
mov
and
inc
sub
cmp
xchg
pop
fidiv
cwde
or
push
xchg
sbb
mov
movs
xchg
je
dec
fs
retf
dec
or
cmp
or
ds
xchg
push
jbe
iret
sub
rol
(bad)
fidiv
out
jb
inc
mov
out
cwde
dec
sbb
fdivp
jmp
jbe
adc
into
push
jp
adc
aam
js
loopne
add
dec
and
jb
mov
cmp
out
push
ret
cmp
sub
mov
dec
add
outs
test
jp
xchg
push
pusha
push
pop
or
sub
pushf
xchg
cmp
xor
(bad)
push
fs
gs
ficom
rcr
div
sbb
pop
stos
mov
xor
or
scas
ss
sub
out
clc
xor
pop
xor
dec
enter
imul
and
mov
pop
repnz
movs
or
out
push
call
data16
ret
and
jmp
add
and
cmp
sub
out
call
ss
or
sbb
sub
pop
dec
retf
push
xchg
mov
adc
or
cmp
bound
push
mov
cmps
sbb
scas
cs
cmps
ret
outs
lods
shl
ret
or
(bad)
test
into
and
xchg
and
dec
inc
xchg
ror
push
pop
pusha
push
mov
fsubp
push
mov
xchg
out
xor
xchg
pusha
mov
and
mov
add
mov
mov
jb
or
dec
push
mov
es
shl
and
xchg
outs
pop
mov
sbb
cmps
sahf
pop
in
call
inc
push
add
add
pop
outs
(bad)
js
jo
adc
push
es
mov
sub
pop
and
add
xchg
push
not
add
sbb
outs
or
mov
int
lock
sub
test
xchg
mov
jle
mov
jp
xchg
pusha
adc
add
push
dec
xor
add
into
pop
daa
inc
push
and
nop
push
cmp
enter
cs
add
cs
sbb
sbb
test
mov
or
and
fiadd
push
jmp
loopne
(bad)
loop
lea
scas
mov
sar
add
cmp
mov
daa
mov
mov
shl
pop
test
js
pusha
dec
data16
enter
push
push
retf
(bad)
dec
idiv
adc
jo
cs
or
mov
loope
inc
sub
mov
pop
or
jo
cmp
add
add
cdq
mov
or
add
push
inc
sub
dec
xchg
sbb
mov
outs
out
dec
retf
gs
ficomp
push
mov
outs
sub
sbb
sti
mov
ficomp
js
mov
add
mov
mov
push
stos
shr
clc
xchg
fdiv
shr
pop
stos
rcl
xor
xchg
loopne
rdtsc
push
pop
call
fiadd
sbb
repnz
pop
mov
inc
cmps
into
sbb
xchg
push
or
aam
dec
push
inc
xchg
sar
push
ss
stos
mov
adc
into
adc
and
outs
cwde
movs
ss
repnz
sbb
sub
es
xchg
mov
push
push
ret
daa
shl
pop
push
sbb
inc
addr16
push
push
jbe
push
xchg
pop
inc
adc
mov
stos
enter
push
xor
sahf
(bad)
sub
add
xchg
adc
dec
push
call
mov
int3
rcr
push
loop
jae
push
ret
pop
pop
rcr
dec
and
push
add
ret
xor
pop
cdq
adc
outs
xchg
(bad)
data16
push
cmp
inc
adc
cmps
adc
retw
push
fidivr
bound
loopne
rol
add
jbe
call
inc
sub
or
les
mov
sbb
push
data16
rcr
nop
popf
or
ds
scas
push
or
add
sub
sub
cs
pusha
out
ret
add
shl
mov
push
mov
or
dec
push
mov
and
mov
add
adc
daa
test
jb
or
or
push
and
xchg
mov
inc
stos
scas
ds
xor
cmp
pop
inc
adc
fmul
dec
add
out
ss
sbb
jne
mov
enter
mov
push
adc
add
pop
push
cwde
add
push
data16
dec
rol
adc
int
add
fisub
sbb
sbb
mov
or
mov
pop
xor
sbb
test
dec
jo
ds
(bad)
(bad)
push
aad
into
sub
cmp
lods
adc
xor
rcr
dec
data16
or
push
popa
push
sbb
push
pop
cs
jb
loopne
push
ficom
int
sbb
jb
adc
aad
sbb
jmp
ss
ins
ins
into
sahf
xlat
nop
mov
inc
cmp
xor
dec
sub
bound
ror
mov
sub
jno
bound
cmp
xchg
(bad)
mov
mov
and
mov
sar
inc
sub
xchg
retf
cmp
es
push
imul
or
sahf
mov
add
dec
daa
cwde
loopne
rcr
shl
(bad)
mov
dec
mov
xchg
movs
push
mov
sbb
pop
fisubr
sbb
paddd
mov
loope
bound
cmps
sub
lds
cmp
popw
data16
cmp
xor
pop
(bad)
(bad)
mov
mov
xchg
xor
add
or
ja
dec
mov
sahf
ret
sbb
sbb
add
es
cmp
adc
add
or
sub
ret
scas
loop
mov
js
pop
xor
cmp
out
pop
or
mov
rcr
xor
(bad)
into
mov
shr
mov
xchg
mov
retf
sub
xor
jae
inc
cs
mov
sahf
adc
sub
sub
call
imul
(bad)
add
pop
mov
cli
outs
xchg
push
cmp
xor
xchg
or
or
idiv
and
push
and
add
push
aad
dec
or
jno
dec
sbb
mov
jb
adc
call
sbb
sub
(bad)
retf
or
leave
sub
xchg
inc
pusha
add
repnz
adc
scas
inc
dec
scas
test
xor
fwait
cmp
xchg
pop
push
sbb
inc
dec
daa
and
jmp
mul
loop
adc
sub
rol
xchg
mov
and
pop
mov
cli
mov
rcr
scas
sub
clc
not
xchg
push
dec
(bad)
sbb
add
loopne
mov
push
mov
into
outs
cmps
bound
cmp
cs
or
jno
shl
cs
call
push
loopne
pop
and
inc
pushf
jno
cwde
mov
xchg
push
add
add
loop
sbb
or
jo
inc
(bad)
cli
ret
and
inc
pop
(bad)
retf
loopne
push
ds
xchg
sbb
cmovg
push
ins
and
(bad)
pop
push
dec
xor
mov
xor
jo
jb
bound
push
shr
sbb
sbb
mov
push
sub
add
mov
sahf
push
add
mov
push
es
push
arpl
add
mov
and
pop
lods
pusha
pop
add
loopne
dec
into
push
push
shl
adc
es
pop
pusha
adc
cmp
and
push
add
mul
push
push
inc
add
(bad)
push
jp
rcr
add
jle
sbb
xlat
(bad)
loopne
mov
mov
xor
cli
xchg
shl
pusha
sbb
test
fild
pop
push
xchg
scas
push
enter
pop
jg
or
xchg
add
inc
sbb
mov
jbe
mov
popa
(bad)
mov
cwde
jmp
add
and
pop
sbb
push
sbb
pop
scas
cli
add
add
outs
dec
add
lock
pop
jo
mov
push
mov
(bad)
jmp
mov
test
cmp
test
mov
(bad)
outs
dec
js
mov
cmps
adc
icebp
mov
ds
xchg
jp
sbb
push
out
mov
jecxz
pop
(bad)
cs
fistp
out
cdq
ret
pop
push
push
pusha
js
mov
xchg
rol
push
outs
int3
inc
call
mov
ret
call
cs
js
imul
jmp
jo
pop
fisub
dec
mul
shl
xchg
or
imul
pushf
mov
xchg
push
iret
adc
es
lods
or
cmp
sbb
mov
sbb
push
mov
(bad)
shr
push
or
ror
pop
nop
and
pop
mov
daa
push
into
jno
sbb
mov
xchg
inc
(bad)
cs
and
pop
sbb
ds
imul
pop
push
pop
mov
aas
mov
xor
and
loop
or
xor
xor
sub
pop
jle
sub
popf
pop
push
ss
sub
jno
sub
xchg
mov
add
xlat
call
cli
out
adc
bound
xchg
jp
(bad)
cli
xor
inc
inc
dec
ret
mov
adc
adc
pop
push
ds
popa
mov
test
and
stos
xchg
dec
jp
mov
inc
call
outs
push
not
js
loopne
sub
call
ds
xor
popa
jb
pop
(bad)
lock
pop
js
movs
dec
imul
mov
aaa
je
repnz
test
inc
inc
fld
call
and
stos
dec
jle
push
outs
dec
jo
bound
addr16
test
or
cs
test
push
or
sar
add
mov
loope
mov
mov
ret
fstp
into
push
cmp
cmp
fisubr
jp
sub
pop
mov
add
pusha
mov
into
cmp
ret
push
inc
lods
into
mov
push
test
jmp
cs
loope
xor
into
pop
pop
or
pop
outs
mov
push
dec
loop
push
sbb
(bad)
and
xor
xchg
jo
ds
push
ret
adc
popf
inc
sub
sahf
inc
add
mov
fisubr
mov
movs
vpsrad
adc
loop
lds
fiadd
xor
into
inc
ret
dec
or
sub
shl
dec
adc
sub
(bad)
cmps
clc
stos
adc
dec
cdq
push
fidiv
mov
push
dec
mov
xchg
dec
adc
add
(bad)
stos
fiadd
fcomp
fcom
push
push
into
jb
sbb
mov
mov
into
mov
mov
arpl
ds
lods
xchg
adc
mov
out
cmp
push
fcom
sub
jb
test
push
add
mov
loop
jbe
push
sbb
movs
xor
data16
nop
data16
sub
mov
or
push
pop
dec
ds
retf
ret
loopne
ret
xor
push
push
mov
mov
and
ffreep
add
loopne
mov
popa
(bad)
or
sub
div
mov
inc
or
sahf
sahf
add
xchg
mov
(bad)
sahf
dec
push
shl
sub
jmp
push
xor
and
cs
and
push
adc
es
mov
ficom
and
push
add
cmp
and
mov
(bad)
outs
test
inc
(bad)
cmp
sub
jo
adc
add
cmps
ret
ds
bound
push
leave
or
xor
cmp
dec
cmp
jle
xchg
fldl2t
inc
fidivr
mov
(bad)
mov
push
cwde
icebp
xor
neg
ins
adc
scas
nop
adc
or
repnz
cmc
movs
sub
push
retf
inc
push
cdq
popa
(bad)
cs
inc
out
les
add
inc
xchg
mov
inc
sahf
inc
rcr
mov
and
test
mov
sub
and
loope
call
mov
pop
or
ror
cmp
pop
dec
cmps
ja
add
push
shr
mov
pop
jae
or
inc
cs
sub
ret
cmp
sub
lock
outs
fmul
and
inc
mov
(bad)
test
push
dec
mov
ds
add
dec
or
dec
or
je
jb
jae
es
dec
popf
sbb
push
nop
jle
add
jecxz
dec
xchg
add
mov
adc
retf
sbb
(bad)
shl
xor
mov
mov
pusha
jle
ret
jle
rcr
sub
push
inc
mov
test
shl
jbe
inc
dec
adc
or
ret
add
and
mov
xchg
int3
out
or
dec
repnz
enter
out
mov
fwait
pop
xchg
add
outs
pushw
sub
nop
stos
repnz
pop
(bad)
test
int3
repnz
ficom
lock
rol
cmp
or
or
or
imul
cmps
ret
ins
inc
push
mov
push
ror
daa
loope
ret
add
(bad)
inc
cmp
push
pop
stos
nop
pop
daa
push
(bad)
rol
call
ss
inc
push
dec
push
mov
pop
inc
shr
jp
push
or
mov
mov
aad
pop
loop
or
cmp
pop
mov
jo
pop
dec
xchg
das
out
add
mov
loop
push
call
(bad)
cmp
and
xor
mov
jbe
outs
pop
(bad)
and
push
sbb
ret
popa
stos
or
sar
or
xor
fisub
aam
jb
push
pop
icebp
(bad)
mov
add
ficomp
test
xor
jg
jp
sbb
add
ss
aam
pop
mov
inc
push
sub
dec
cwde
inc
inc
sbb
push
or
pop
mul
data16
pop
repnz
nop
sbb
fs
data16
mov
bound
loop
or
cmp
inc
xchg
sbb
jo
cmp
mov
dec
fadd
sbb
add
and
data16
sub
js
retw
lea
push
clc
repnz
pusha
sahf
ss
or
cmp
scas
jp
mov
stos
lock
(bad)
(bad)
into
add
popa
xchg
push
repnz
inc
cdq
adc
push
lea
fstp
mov
jo
mov
(bad)
fisub
inc
add
jae
and
ror
push
mov
push
not
mov
out
add
and
xchg
xor
cmp
ss
mov
loopne
(bad)
or
xchg
add
daa
xchg
repz
loop
xchg
mov
mov
test
les
ret
sub
dec
loop
ja
adc
adc
call
pop
adc
sub
clc
xchg
push
enter
cwde
dec
xor
ds
jmp
loopne
sub
push
call
(bad)
push
sub
sahf
retf
into
add
and
dec
dec
data16
and
mov
loop
fidiv
xchg
into
(bad)
mov
add
icebp
xor
jo
dec
mov
int3
retf
inc
or
(bad)
neg
dec
popf
cmp
(bad)
scas
mov
jns
rol
repnz
cmp
pop
inc
add
fisub
cmp
dec
push
mov
inc
mov
mov
or
pushf
add
cli
scas
xor
jmp
sbb
mov
or
push
jmp
pop
or
jle
dec
pusha
add
imul
and
adc
xor
popa
ret
sbb
hlt
cmp
xchg
jo
xchg
leave
(bad)
(bad)
push
clc
push
adc
test
or
ds
mov
xor
mov
or
mov
(bad)
inc
cwde
push
sub
or
mov
and
ins
sub
and
add
mov
imul
mov
lea
shr
sub
pop
dec
cs
scas
jmp
sbb
pop
ds
push
outs
call
mov
push
scas
add
outs
stos
into
dec
stos
test
call
retf
es
(bad)
dec
pop
inc
add
sbb
jo
inc
les
xchg
ss
adc
into
mov
fcmovu
out
jb
xchg
adc
ficom
push
test
pop
sub
xchg
inc
pop
jle
jle
cmps
je
push
push
cli
cmp
push
jp
test
dec
out
cmps
outs
cmp
xchg
retf
cmp
jp
jmp
inc
push
adc
es
sbb
(bad)
dec
jbe
mov
outs
and
shl
or
jmp
mov
xor
push
mov
xchg
js
mov
sbb
xchg
jle
mov
jmp
ret
mov
ret
xor
sub
or
push
retf
fstp
dec
ret
icebp
add
pop
ret
fs
ds
mov
push
cmp
xchg
push
or
mov
mov
pop
cmps
lea
daa
fs
mov
and
xchg
xor
jmp
pop
ss
mov
push
ds
test
push
add
push
and
mov
in
out
cmp
cmps
and
dec
cmp
dec
pop
repnz
push
pop
dec
movs
add
imul
xchg
push
scas
sahf
mov
sub
jb
lods
cmps
mov
popf
dec
xchg
ror
cs
(bad)
pop
push
inc
call
iret
(bad)
div
rcl
ss
dec
pushf
adc
push
outs
dec
adc
add
cli
or
aam
dec
mov
add
pop
and
mov
call
mov
scas
cmp
jbe
mov
test
adc
add
cmp
loope
jmp
sar
stos
xor
push
or
inc
push
jp
mov
inc
add
xchg
pop
(bad)
and
(bad)
mov
scas
add
out
(bad)
sbb
mov
push
xchg
popa
inc
push
or
push
loope
sahf
and
push
inc
mov
mov
and
loop
push
push
mov
jno
scas
ss
adc
sub
adc
xor
into
push
(bad)
lods
ds
mov
and
mov
scas
xor
add
add
retf
stos
out
adc
xchg
push
inc
pop
push
jecxz
sahf
out
xor
loopne
data16
js
daa
ror
push
das
retf
or
cmp
fsubr
sbb
mov
sbb
xchg
jp
adc
je
fsub
sbb
or
ficom
push
aad
pop
dec
push
(bad)
sahf
add
call
push
inc
mov
sub
into
push
pop
fsubrp
push
stos
dec
pushf
sbb
mov
add
and
pop
or
cwde
fimul
in
(bad)
call
mov
mov
outs
push
add
stos
cmps
loopne
daa
add
xchg
cs
pop
xchg
jle
push
inc
dec
pop
xor
gs
jp
xor
sbb
loopne
or
es
xchg
imul
jbe
xor
push
pop
sub
or
dec
xlat
mov
mov
xlat
or
scas
enter
js
push
and
ret
or
cs
sbb
retfw
inc
mov
push
mov
pop
pusha
call
xchg
arpl
and
dec
sbb
dec
dec
cmp
fidivr
jmp
mov
xchg
pop
sub
ss
mov
xchg
push
pop
adc
sub
dec
adc
cmp
push
outs
aam
push
mov
xor
push
bound
adc
sbb
sahf
sbb
xchg
mov
or
add
adc
sbb
(bad)
sbb
add
(bad)
scas
xchg
test
stos
sahf
fiadd
bound
push
fimul
sbb
cs
or
ror
mov
or
retf
js
sub
push
popf
jno
ret
cmp
add
add
cmp
inc
call
daa
ret
sbb
or
or
inc
xor
lods
sahf
dec
push
pop
inc
inc
ins
or
(bad)
nop
pop
lock
rcr
retf
xchg
pop
mov
push
pop
pusha
add
push
mov
xchg
test
xchg
(bad)
jp
dec
arpl
pop
jp
enter
fcom
scas
xchg
imul
movs
mov
push
mov
aam
push
jbe
push
adc
xor
sbb
add
xchg
(bad)
scas
jb
or
cmp
repnz
pop
pop
xor
scas
pop
xor
pop
dec
sbb
xor
push
dec
push
sub
dec
fsub
inc
(bad)
jbe
sbb
(bad)
jmp
inc
movs
mov
and
xor
outs
es
cmps
push
clc
out
loop
add
and
dec
sbb
adc
movs
pop
jbe
cmp
rcr
add
cli
adc
repnz
pusha
repnz
mov
out
inc
push
jne
mov
es
push
loopne
inc
pusha
mov
push
xchg
not
outs
xchg
addr16
mov
mul
inc
sub
dec
mov
pop
push
outs
out
aam
jo
dec
inc
dec
or
cmps
mov
or
mov
dec
(bad)
leave
dec
retf
rol
ds
sbb
add
adc
xchg
nop
pusha
and
push
pusha
cmps
mov
xchg
or
or
je
or
add
adc
mov
into
cmp
cmps
cmp
out
cli
shl
nop
cli
mov
and
out
daa
lahf
jbe
fs
push
pop
push
ds
imul
mov
ret
adc
rcl
adc
dec
lods
push
(bad)
jb
js
mov
enter
mov
mov
daa
add
pop
ret
js
pusha
call
jbe
dec
add
xor
loop
xor
outs
(bad)
xchg
sbb
inc
test
sbb
inc
push
rcr
loop
add
xor
jne
mov
inc
cmps
mov
mov
jbe
adc
fld1
dec
push
dec
push
ficomp
adc
push
xor
or
fiadd
jmp
push
stos
push
inc
push
scas
pop
jl
mov
pop
xor
jecxz
mov
and
cmp
push
pusha
and
jle
add
test
pop
outs
push
cmps
dec
push
ret
push
sub
mov
pop
punpckldq
add
daa
add
pop
pmullw
loop
dec
jle
push
and
add
jp
ret
retf
mov
dec
pusha
shr
out
inc
arpl
and
jo
lock
fimul
cmp
cmp
jmp
dec
retf
das
imul
outs
pop
mov
lods
(bad)
retf
inc
mov
das
stos
pop
pop
add
push
mov
jmp
movs
xchg
out
test
mov
pusha
and
mov
out
dec
xchg
add
xchg
push
push
xor
bound
movs
sbb
sub
dec
adc
sub
mov
mov
push
or
mov
mov
in
xor
dec
jmp
mov
and
push
or
out
out
push
add
mov
inc
xor
add
(bad)
dec
push
repnz
mov
mov
in
int3
and
inc
js
jmp
jo
call
out
imul
sbb
jmp
xchg
xor
push
sub
cmps
fiadd
fiadd
inc
bound
xor
cmp
ret
mov
sbb
out
xchg
in
xor
fisubr
xchg
add
stos
dec
scas
jo
not
loopne
enter
pop
add
jb
xor
inc
jbe
cmp
call
inc
fdivr
add
push
push
repnz
push
nop
jb
inc
jne
and
push
fiadd
cmp
arpl
xor
adc
retf
sub
push
sub
cmp
retf
inc
or
sbb
repnz
js
iret
adc
push
dec
shl
imul
mov
inc
loop
test
xor
(bad)
retf
cmp
data16
sub
dec
or
(bad)
pop
pop
ds
test
retf
jecxz
cmp
ds
push
in
sbb
ret
scas
(bad)
rcr
sbb
cmp
and
cwde
sbb
aas
scas
outs
pop
xor
sbb
bnd
repnz
sub
lods
pop
add
jo
daa
dec
test
push
rcl
dec
xor
les
cmp
pop
cwd
or
add
ficom
xchg
inc
mov
inc
dec
pop
mov
(bad)
mov
add
bound
(bad)
and
push
movs
ret
pop
push
push
ret
xchg
xchg
mov
mov
mov
loop
call
dec
inc
dec
pop
mov
(bad)
test
cmp
retf
and
add
jae
into
lahf
mov
daa
loopne
push
dec
sbb
mov
sbb
sub
dec
mov
out
fcmovnb
sub
xchg
push
cmp
sub
scas
sub
mov
xchg
pop
sbb
ss
mov
mov
outs
cmp
fs
aad
sbb
mov
test
outs
packssdw
dec
or
fimul
sti
cmp
jp
xor
ror
pop
loopne
sbb
xor
xchg
in
pop
ret
cmps
jo
or
push
mov
pop
clc
ret
rcl
push
add
shl
pop
jbe
pop
or
xchg
jb
mov
adc
into
dec
retf
stos
and
dec
xor
inc
pop
idiv
data16
sub
into
dec
add
pusha
and
inc
pop
or
ret
mov
xchg
(bad)
or
fidiv
(bad)
adc
sbb
cmp
shr
mov
jo
mov
(bad)
or
sub
(bad)
jmp
push
out
bound
fidivr
mov
nop
test
loopne
sbb
pop
inc
jo
mov
ror
dec
addr16
xor
ss
sub
mov
adc
push
xor
sbb
stos
and
dec
sbb
mov
aam
scas
dec
push
mov
into
call
mov
inc
add
fisubr
repnz
or
ret
adc
icebp
sbb
xacquire
sbb
movlps
jle
out
adc
sbb
mov
ficom
sbb
xchg
or
and
dec
dec
dec
scas
pop
shr
dec
(bad)
push
push
jp
icebp
push
mov
push
xchg
inc
mov
pop
sbb
mov
into
xchg
sbb
xchg
adc
ret
mov
inc
mov
inc
pop
sahf
test
cmp
data16
and
adc
sbb
xor
push
xchg
lods
or
jno
ror
push
push
repnz
dec
inc
(bad)
adc
dec
fs
pop
push
pop
pop
and
(bad)
jp
pop
sbb
xor
jb
xchg
push
sub
inc
push
xchg
cmps
jle
ret
or
mov
outs
cmovle
cmp
mov
adc
and
xor
data16
push
call
shr
inc
and
pop
fidiv
push
xchg
pop
repnz
or
pop
sub
adc
out
add
cmp
xor
outs
cwde
jmp
add
xchg
rol
dec
sbb
jmp
dec
jle
jb
sub
pop
ds
loopne
mov
cmp
cmps
outs
adc
add
stos
mov
inc
repnz
sbb
push
add
inc
push
add
mov
push
jb
mov
fcom
ret
jp
bound
jne
push
mov
add
inc
mov
add
mov
add
ret
retf
push
mov
push
repnz
popa
mov
test
and
call
adc
pop
push
mov
or
inc
cmp
pop
push
pop
sub
pop
xchg
ret
dec
neg
mov
ins
add
inc
cwde
lods
jbe
push
mov
inc
fst
jmp
mov
neg
sbb
add
inc
mov
into
mov
ins
rcl
adc
into
adc
outs
sub
mov
and
mov
inc
inc
mov
inc
adc
jle
dec
pop
push
mov
punpcklwd
inc
movs
mov
or
mov
pop
push
and
pop
mov
push
and
inc
add
ds
inc
push
or
and
inc
xchg
cmc
xchg
(bad)
push
or
imul
dec
or
add
and
mov
data16
xor
(bad)
jmp
stos
jbe
dec
push
lea
mov
and
push
mov
pop
fsub
add
or
jecxz
or
mov
pop
mov
or
mov
jo
and
mov
xchg
adc
mov
mov
mov
mov
ret
sub
pop
xchg
jne
bound
(bad)
push
push
idiv
xchg
les
push
enter
push
(bad)
loop
inc
sbb
ret
loop
jo
in
scas
scas
out
jp
test
jp
into
mov
jle
add
dec
mov
push
out
push
lds
into
bound
ret
lods
cs
js
cmps
fistp
(bad)
sub
inc
arpl
imul
test
jb
or
retf
(bad)
xor
popf
push
mov
jle
jnp
int3
xchg
push
into
(bad)
sahf
mov
cmps
data16
repnz
(bad)
jle
pop
adc
sub
xchg
(bad)
pop
add
pusha
xchg
fimul
and
test
jp
or
mov
add
pop
sub
push
jne
mov
dec
mov
xchg
fldcw
ss
push
pop
test
stos
(bad)
mov
mov
add
pushf
(bad)
mov
sbb
xor
push
pop
enter
xchg
out
add
sbb
push
mov
cmp
in
jnp
dec
push
int3
xor
or
data16
add
xor
add
dec
inc
(bad)
push
ss
mov
gs
mul
pop
stos
rol
into
fimul
lock
xchg
xchg
ins
loopne
jmp
jo
pop
push
push
lahf
data16
and
push
lock
test
dec
test
xchg
cmp
or
cmp
add
sbb
scas
or
add
mov
fnstcw
mov
faddp
fbstp
inc
inc
inc
pushf
inc
(bad)
or
ds
idiv
xor
sub
stos
mov
cmps
push
adc
push
xor
xchg
dec
scas
mov
adc
ror
mov
push
push
inc
dec
push
sbb
jmp
(bad)
xlat
xchg
xchg
mov
inc
ss
ss
mov
(bad)
push
jp
add
push
cdq
mov
xchg
popa
test
or
push
(bad)
fcmovb
data16
adc
ss
retf
or
add
(bad)
sbb
lods
mov
sbb
loopne
add
idiv
push
cs
mov
sbb
sub
scas
and
ret
dec
sbb
inc
stos
jmp
in
cmc
add
pop
inc
ds
push
arpl
sahf
cmps
add
jp
bound
jbe
xor
aaa
jo
xchg
or
retf
int3
dec
mov
mov
scas
loop
(bad)
ret
sbb
loop
retf
cdq
lea
(bad)
out
cmp
xchg
data16
das
call
dec
push
pop
shr
mov
adc
mov
(bad)
(bad)
mov
into
adc
push
xchg
xchg
cli
sahf
dec
cmp
stos
ds
(bad)
int3
inc
or
cs
inc
inc
jge
push
xchg
(bad)
cwde
cmp
js
adc
daa
lock
ror
sbb
enter
jb
cmps
ds
xchg
pop
push
add
(bad)
fidivr
mov
inc
data16
out
mov
and
cmps
xchg
push
dec
cli
js
push
test
fisubr
xor
fiadd
dec
arpl
jne
mov
lea
jnp
inc
out
outs
into
shl
push
mov
adc
and
inc
es
repnz
fisubr
idiv
and
mov
push
(bad)
adc
(bad)
jmp
cmp
out
mov
ret
stos
xchg
lahf
out
test
test
out
mov
sbb
scas
push
rcr
and
mov
es
add
or
dec
fisubr
shr
cmps
jo
dec
(bad)
data16
xchg
sub
inc
pushf
cmp
push
mov
adc
mov
xor
mov
iret
jmp
(bad)
out
inc
cmc
mov
xor
sub
inc
sbb
mov
or
xor
test
pop
add
fcmove
push
lea
jo
pop
jb
shl
mov
jle
outs
add
xchg
sub
and
jb
push
sahf
and
lods
loopne
add
fsubp
mov
arpl
dec
ret
mov
mov
retf
sbb
or
and
push
push
dec
out
xchg
mov
test
inc
ret
bound
dec
fiadd
(bad)
mov
or
add
es
mov
bound
(bad)
cmps
dec
das
pusha
and
xchg
cmp
movs
adc
stos
mov
sbb
xor
push
test
bound
inc
cs
pushf
jno
(bad)
mov
sbb
nop
loop
outs
adc
jmp
scas
push
fdivr
pop
push
mov
test
or
add
add
ds
sbb
ss
repnz
lea
call
cli
push
cmps
rcl
call
pop
mov
loope
xchg
mov
mov
bound
leave
add
call
clc
push
push
je
add
sub
dec
pusha
add
cmp
sub
push
jb
fidiv
push
xor
cdq
jno
inc
push
sbb
sub
ins
sub
push
xchg
add
dec
and
jmp
sub
sbb
push
push
xor
loop
xor
pusha
ja
(bad)
out
(bad)
out
sbb
sub
outs
mov
mov
pusha
xchg
inc
xor
and
test
int3
sbb
adc
sahf
inc
xor
mov
sbb
movs
xor
nop
jp
add
retf
adc
push
into
sbb
enter
push
(bad)
jmp
(bad)
adc
inc
pop
fiadd
(bad)
mov
inc
push
stos
xchg
les
rcl
xchg
in
xchg
pop
mov
mov
xchg
(bad)
shl
and
xchg
and
fcmovb
mov
add
test
add
mov
sbb
enter
sar
inc
sub
test
mov
cmp
(bad)
push
sahf
sbb
adc
dec
outs
(bad)
ret
inc
mov
push
movs
xchg
stos
push
out
add
enter
ror
ds
and
jmp
test
cmps
pusha
sti
cmp
dec
sub
out
loop
rol
loop
mov
in
mov
cwde
call
jbe
and
sbb
mov
sub
mov
es
add
cs
shl
sbb
outs
inc
jb
add
jb
and
fcom
retf
jo
dec
adc
jbe
(bad)
shr
mov
ror
mov
push
pusha
pop
add
push
xchg
es
inc
stos
or
ror
push
dec
sub
sbb
pop
or
and
xchg
arpl
xchg
xor
(bad)
push
jmp
clc
mov
repnz
add
lods
jmp
jle
dec
loop
add
mov
cmps
push
and
in
jmp
outs
shr
bound
xchg
pop
shr
outs
inc
fsubr
jb
adc
out
mov
jb
js
or
fisubr
movs
adc
add
dec
push
out
pop
scas
mov
xor
sbb
loopne
sbb
mov
cdq
pop
(bad)
ds
add
in
sub
inc
jl
jne
xchg
xchg
sbb
add
adc
sbb
call
push
addr16
add
cmp
shl
sbb
add
cmps
cli
push
cmp
adc
cmp
mov
dec
jb
push
pop
dec
add
jmp
push
jb
call
adc
lods
in
pop
outs
inc
fisubr
fs
or
or
shl
push
sub
xchg
mov
push
or
sub
dec
cmp
and
(bad)
pop
jne
dec
and
cmp
push
inc
mov
outs
push
dec
sub
inc
mov
add
not
pop
es
push
pusha
hlt
xor
das
jb
sub
cmps
dec
loopne
fimul
rcl
xchg
inc
or
push
lock
push
popa
les
xor
dec
invd
ins
pop
sub
scas
mov
scas
mov
dec
sub
inc
pop
or
push
push
xchg
mov
xchg
mov
add
pop
jb
iret
xor
dec
pop
push
dec
adc
loopne
stos
icebp
xor
(bad)
mov
adc
and
(bad)
ss
and
push
push
shr
sbb
mov
aad
scas
mov
cmc
mov
adc
sub
jne
sbb
or
jbe
out
js
ficomp
pop
fadd
push
xchg
popa
ret
(bad)
xchg
dec
jo
and
adc
adc
cmp
test
(bad)
push
das
mov
dec
out
(bad)
out
cwde
dec
das
sbb
lock
push
or
mov
bound
mov
mov
dec
mov
nop
dec
mov
push
(bad)
mov
not
es
mov
lock
pusha
stos
scas
inc
mov
stos
dec
into
sahf
nop
xor
arpl
(bad)
mov
xchg
dec
and
jp
adc
and
adc
inc
cli
into
loop
setne
adc
retf
loope
adc
push
call
cmps
mov
out
mov
inc
scas
mov
outs
repnz
sbb
push
mov
cmp
into
mov
push
sbb
pop
push
das
loop
repnz
ficomp
xchg
ror
inc
es
lods
push
test
sahf
jbe
or
shl
add
pop
jp
aas
test
call
mov
rcl
retf
test
xchg
jo
arpl
mov
xchg
push
test
scas
mov
cmp
mov
inc
add
pusha
ss
xchg
mov
cs
push
xor
stos
push
out
and
cmp
xchg
jp
or
or
pop
inc
sar
fs
add
ret
cmps
push
jmp
mov
xchg
into
inc
js
mov
fiadd
repnz
pusha
add
cmps
sub
iret
ret
adc
add
xor
jb
mov
ror
rcl
push
or
or
mov
(bad)
cs
les
jle
fcom
push
dec
inc
jecxz
inc
xchg
jp
push
arpl
or
add
xchg
cmp
and
mov
xor
cs
xchg
jmp
xor
and
test
(bad)
jmp
inc
jmp
cmp
xchg
mov
mov
mov
lods
mov
jbe
mov
adc
inc
mov
es
scas
xlat
shl
scas
mov
push
cs
add
inc
pop
ficomp
addr16
repnz
mov
pop
pop
outs
es
push
cmps
xchg
sub
pop
mov
popf
enter
movs
pop
fadd
pop
jp
push
adc
cmp
pop
adc
jmp
sbb
lods
sub
(bad)
sub
push
push
rcl
jbe
out
adc
and
push
cli
es
pop
(bad)
push
cmp
sub
sbb
jl
mov
cmps
sbb
push
data16
ss
mov
or
push
mov
inc
rcr
(bad)
pop
pop
data16
into
mov
and
mov
mov
loop
adc
dec
(bad)
mov
sbb
into
icebp
mov
pushf
retf
pop
jle
inc
lods
into
dec
scas
into
dec
mov
add
sub
enter
pop
xchg
adc
ret
retf
(bad)
sar
pop
push
inc
ror
add
inc
mov
sbb
jmp
js
push
xor
dec
sbb
mov
retf
pop
sbb
ret
add
leave
adc
jb
push
push
mov
cdq
pusha
mov
sub
mov
retf
xor
xchg
bound
bound
jo
cmp
data16
fadd
push
cmps
and
push
xor
into
fmul
outs
cli
ss
(bad)
jmp
loopne
ds
enter
into
test
(bad)
dec
mov
xor
dec
ins
popf
xchg
cli
push
add
aad
add
ret
inc
push
enter
dec
outs
jmp
(bad)
xor
sbb
js
pop
enter
int3
inc
cmp
mov
cmp
loop
fiadd
adc
jae
scas
pop
jp
test
xor
repnz
and
or
add
jle
cli
dec
inc
xor
gs
imul
inc
popa
or
stos
daa
add
lods
add
xor
and
pop
xor
outs
ret
lock
(bad)
ror
cmp
rol
cmps
push
loop
pushf
adc
add
bound
add
or
out
push
fs
adc
ins
and
mov
xchg
adc
mov
jmp
out
xor
add
adc
scas
(bad)
push
jp
dec
out
out
mov
fisub
push
push
sbb
jle
ret
or
ss
inc
mov
xchg
dec
dec
or
shl
mov
xor
xchg
xor
jle
mov
data16
inc
mov
push
sahf
stos
push
daa
xor
adc
pop
push
pop
jbe
adc
and
bt
inc
retf
mov
or
out
scas
or
test
retf
add
loopne
push
xchg
fstp
inc
shl
adc
or
sbb
cmp
push
pop
push
shl
inc
pop
push
les
jbe
mov
add
(bad)
xlat
pop
push
pusha
mov
pop
xor
pop
data16
inc
inc
xchg
mov
mov
xchg
push
fisub
jp
push
add
fisubr
mov
ficomp
call
mov
push
(bad)
push
loop
add
adc
fsubp
clc
sbb
pop
dec
xchg
mov
jae
ins
xor
pushf
adc
cmp
pop
xchg
jo
pushaw
cwde
leave
add
mov
jne
fldcw
cmp
or
cs
pusha
add
out
xor
push
xchg
shl
es
xchg
and
fist
push
lods
add
sbb
sub
test
into
jb
push
es
ds
push
rcr
outs
repnz
ret
loope
dec
loopne
dec
mov
dec
mov
jno
xor
dec
les
popa
addr16
xchg
loope
push
push
data16
adc
xchg
out
int3
or
push
cli
xor
push
add
popa
(bad)
inc
pop
outs
data16
jnp
mov
add
sub
js
dec
xor
or
repnz
add
(bad)
(bad)
and
mov
dec
jb
add
popa
jle
mov
test
icebp
call
enter
sub
pusha
mov
ja
(bad)
jmp
cmp
imul
mov
inc
add
stos
add
jno
or
pop
jbe
dec
loopne
rol
lds
push
or
int3
jo
xchg
test
cmp
xor
pop
sbb
inc
inc
or
lods
inc
adc
mov
bound
dec
fidiv
push
mov
rcl
mov
xchg
out
or
push
mov
lods
sub
add
sbb
(bad)
sahf
pushf
rol
xchg
push
or
pop
arpl
add
(bad)
adc
fs
cmovo
repnz
ja
xchg
xchg
loop
mov
adc
jmp
add
mov
pop
es
lock
jp
mov
jle
ds
and
call
add
adc
dec
xchg
push
xchg
sbb
mov
mov
xchg
sub
dec
pop
out
fstp
xor
mov
rcl
add
stos
call
add
mov
lods
rol
daa
cmp
xchg
(bad)
xchg
out
push
jne
movs
lods
push
push
bound
xchg
int3
lods
sub
ss
and
rol
mov
cmp
popa
cmps
mov
stos
into
mov
or
fiadd
daa
xor
push
xchg
or
push
jle
lahf
les
out
or
cmp
repnz
dec
arpl
(bad)
mov
daa
jp
repnz
add
dec
xor
lods
test
push
sbb
shl
mov
add
dec
jbe
nop
inc
push
sub
scas
loope
test
push
retf
nop
push
inc
loop
bound
fist
cmp
imul
shr
xchg
lahf
xchg
xchg
out
mov
mov
fimul
xchg
sub
clc
(bad)
jle
lock
jecxz
ds
push
or
fcomp
in
adc
fiadd
inc
ret
ss
mov
adc
fsubr
cs
ss
cmps
or
push
(bad)
retf
ds
jb
ror
or
mov
ret
loop
push
fadd
push
rcl
jmp
cs
adc
mov
fdiv
fcomp
push
push
push
inc
mov
ret
js
stos
(bad)
mov
jbe
push
adc
bound
inc
sar
outs
ss
cmp
and
fdiv
jle
mov
(bad)
inc
repnz
bound
push
sub
cmps
adc
inc
or
out
out
mov
inc
cmp
(bad)
sbb
daa
jmp
jb
or
push
pop
xchg
les
cmp
out
jmp
es
js
sbb
outs
out
outs
inc
aaa
dec
out
cli
push
pop
out
adc
mov
push
mov
bound
out
mov
dec
and
sbb
add
xor
out
mov
and
pusha
push
lds
cmp
rcr
sub
repnz
pop
div
or
mov
or
ret
jne
mov
lahf
cs
addr16
cs
lea
sahf
push
or
mov
or
fdiv
dec
push
mov
arpl
popa
add
sub
push
cmovp
add
gs
dec
inc
push
outs
out
sub
mov
pop
dec
cs
inc
(bad)
inc
aaa
js
(bad)
sub
das
js
test
cmp
sub
jno
push
and
add
aas
cmp
pusha
jne
mov
test
push
out
xchg
sub
test
dec
sbb
movs
adc
adc
cdq
out
pop
loop
es
data16
cmp
xor
push
mov
pop
or
add
lods
lods
xchg
sbb
sahf
add
rol
jbe
push
cwde
movs
sbb
or
mov
xchg
in
rcl
imul
push
outs
dec
call
dec
add
pop
push
(bad)
sbb
inc
xchg
pop
pop
dec
scas
jp
cmp
add
popf
and
call
imul
test
bnd
sbb
shr
outs
cmps
ror
jp
sahf
(bad)
sahf
mov
push
and
pop
stos
cmp
loop
add
out
sub
(bad)
and
ficomp
scas
push
sbb
adc
(bad)
test
cli
inc
push
gs
push
jp
retf
fdiv
xor
rcr
inc
or
and
ficomp
fstp
out
dec
in
sbb
dec
fidiv
mov
xor
xchg
and
pop
mov
inc
ds
popw
cs
mov
mov
pop
push
bound
jle
ret
idiv
mov
outs
stos
jp
sbb
or
xor
js
sbb
(bad)
inc
jle
mov
and
mov
inc
out
mov
loop
xchg
bound
nop
or
push
outs
jo
ret
mov
and
add
sub
jae
jo
ret
retf
dec
or
add
mov
or
or
sub
ficom
xchg
js
or
xor
xchg
add
scas
mov
add
fidivr
pop
jnp
push
dec
out
push
psrad
aam
push
dec
pop
loop
xchg
push
jp
test
push
pop
(bad)
sbb
ja
pushf
add
loop
push
cmc
imul
outs
mov
xchg
xchg
(bad)
outs
into
jle
or
retf
jp
mov
dec
or
stos
jp
inc
and
cmp
adc
cmc
(bad)
cmp
xchg
jo
lods
cli
push
xchg
add
cli
int
xchg
ret
arpl
repnz
(bad)
into
dec
sub
(bad)
push
data16
adc
sahf
sbb
jle
ret
es
xchg
rol
sbb
mov
push
xchg
push
das
xchg
dec
outs
dec
loopne
sub
ret
dec
xor
retf
inc
ret
xor
pop
add
(bad)
jbe
xchg
dec
(bad)
mov
xchg
push
daa
pop
sahf
data16
or
mov
idiv
mov
inc
lahf
mov
xor
xchg
xchg
bnd
stos
dec
dec
add
mov
and
push
push
ss
stos
push
dec
dec
cmp
outs
outs
push
add
jmp
inc
retf
(bad)
adc
bound
ror
out
outs
sbb
xlat
mov
ror
jle
enter
mov
dec
mov
jo
pushf
mov
push
call
popa
data16
leave
loop
mov
add
xchg
add
mov
mov
dec
jle
imul
pop
inc
jne
and
mov
add
or
mov
add
cmp
test
test
sbb
into
retf
push
add
repnz
xchg
sbb
inc
xchg
push
aad
mov
pushf
push
lea
fimul
fstp
into
mov
jo
jle
bound
es
(bad)
add
rol
(bad)
xchg
pop
scas
xor
xchg
cmp
out
retf
cmp
or
daa
xchg
scas
ds
into
xchg
adc
xchg
sbb
mov
(bad)
pop
or
dec
(bad)
sub
push
pusha
cmps
or
(bad)
push
pop
jbe
add
sbb
push
inc
repnz
bound
mov
or
(bad)
cmps
pushf
cmp
push
sbb
mov
xchg
stos
cli
dec
mov
jp
push
(bad)
fcomp
gs
inc
push
mov
jle
and
les
rdtsc
dec
call
mov
add
stos
test
xchg
and
dec
add
push
push
(bad)
mov
and
arpl
popa
ds
out
cwde
mov
(bad)
sub
add
out
mov
sbb
mov
daa
inc
push
mov
cmp
mov
pop
pop
out
sub
lods
jo
sub
mov
scas
sbb
cmps
sbb
push
push
push
jae
jle
ret
add
add
test
add
and
adc
test
inc
jp
sbb
cwde
daa
add
movzx
add
mov
cli
mov
loopne
into
mov
push
or
ret
and
(bad)
sbb
jge
retf
shr
dec
shl
scas
bound
mov
sub
xor
inc
cdq
xor
cmps
and
pop
push
mov
xchg
bound
add
retf
push
ficomp
inc
jb
push
push
xchg
inc
ds
inc
or
pop
push
arpl
jbe
or
sub
jle
sbb
add
sub
mov
loop
adc
adc
pushf
cmps
(bad)
pop
dec
imul
sub
shr
nop
or
ss
rol
sub
es
mov
sar
mov
xchg
ds
mov
imul
add
mov
mov
xchg
(bad)
out
aas
add
lods
dec
popa
fldenv
(bad)
out
push
call
outs
inc
stos
inc
dec
call
daa
scas
repnz
mov
inc
ficomp
xchg
stos
jecxz
in
mov
push
scas
fadd
shl
mov
mov
mov
push
ror
out
sbb
cmps
add
mov
xor
add
(bad)
sub
scas
xchg
repnz
shl
and
add
mov
sbb
dec
dec
sbb
pop
xchg
icebp
xchg
sahf
mov
adc
movs
sub
jg
mov
mov
xchg
fld
push
rol
jne
sbb
or
push
pop
or
test
imul
into
add
push
push
cmps
and
arpl
inc
dec
out
push
ret
push
dec
outs
repnz
mov
cli
mov
enter
rol
push
jle
lahf
xchg
pop
or
mov
and
retf
aam
mov
adc
inc
loope
scas
pusha
(bad)
cmp
xor
out
add
xchg
inc
das
loopne
push
dec
test
push
xchg
xor
int3
add
out
data16
jl
cmovo
dec
xlat
inc
or
dec
inc
and
or
retf
into
xchg
faddp
mov
push
jmp
xor
and
imul
popa
scas
ds
lea
mov
ret
mov
cmp
mov
inc
mov
add
ds
sbb
dec
cmp
or
mov
pusha
xor
sbb
out
adc
jbe
bound
mov
xor
xchg
lock
mov
into
or
push
js
dec
sub
cmp
xlat
loopne
mov
rcr
adc
rcl
ss
add
(bad)
scas
repz
push
or
idiv
out
add
and
(bad)
repnz
sbb
xchg
outs
into
inc
sbb
jo
aad
mul
jb
mov
retf
sub
mov
adc
mov
adc
sub
sbb
sub
jnp
dec
dec
sbb
ficom
(bad)
(bad)
push
bound
shr
mov
aaa
sbb
push
loope
xor
and
mov
outs
retf
shl
xchg
ror
sbb
icebp
(bad)
dec
mov
mov
push
dec
pop
inc
mov
retf
xchg
aam
scas
mov
xor
mov
shl
pop
les
shr
inc
js
add
xor
xor
sub
ins
mov
xchg
sub
ss
test
push
adc
stos
xchg
xor
outs
or
mov
fisub
out
shr
inc
push
mov
jno
aaa
ds
adc
inc
cmps
and
retf
add
push
push
mov
into
(bad)
pop
mov
jp
mov
div
ss
or
dec
and
fdiv
push
and
test
dec
add
pusha
pop
push
(bad)
mov
out
or
out
lds
add
or
loop
sub
push
adc
sbb
dec
ds
loopne
inc
add
cmp
inc
js
mov
mov
jo
xor
adc
adc
or
jnp
xchg
loopne
loop
cli
dec
rol
mov
cmp
push
sub
mov
push
pop
mov
scas
inc
push
xor
push
fiadd
scas
fist
ret
mov
mov
or
mov
cs
cli
add
nop
stos
arpl
cmps
or
pop
mov
mov
mov
ficomp
cdq
repnz
mov
pushf
sbb
cmps
xor
or
stos
push
bound
xchg
or
inc
shr
outs
inc
mov
(bad)
call
jo
dec
push
add
out
xchg
mov
add
(bad)
xchg
xor
mov
and
mov
movs
(bad)
cmp
push
and
pushf
sahf
pop
bound
cmps
fisubr
mov
pushf
sbb
push
push
pop
cmp
mov
cli
mov
sub
jle
dec
cwde
pop
cli
sar
cwde
popf
sub
or
sub
push
xor
mov
inc
sbb
sbb
ss
ret
ins
mov
xchg
(bad)
inc
cmps
inc
cwde
rol
cmp
test
pushf
(bad)
push
mov
and
push
into
sbb
add
add
xor
push
mov
pop
push
mov
outs
test
mov
sub
jp
sbb
popa
mov
xchg
mov
xor
sub
inc
repnz
jmp
inc
shl
sahf
and
dec
and
and
sahf
fimul
test
push
aam
mov
pop
pop
add
inc
jmp
xor
and
xor
rcl
rol
neg
ret
mov
cs
add
cli
fisubr
loope
push
mov
daa
sub
(bad)
xor
xchg
adc
(bad)
adc
xor
inc
lock
and
adc
shl
stos
xchg
sahf
mov
pusha
jnp
sub
push
pop
call
push
adc
mov
mov
push
dec
mov
(bad)
mov
bound
cmps
dec
adc
test
add
addr16
cmp
add
sahf
test
mov
fiadd
call
pop
inc
xchg
xchg
enter
pop
and
sbb
mul
aam
dec
lea
inc
add
data16
jmp
mov
and
inc
stos
add
add
add
mov
mov
inc
out
jmp
mov
push
ins
or
(bad)
cs
daa
arpl
push
mov
xchg
xor
jb
xor
xchg
shr
test
push
rol
neg
scas
xor
aaa
nop
jle
adc
xchg
xchg
mov
ficom
inc
jp
push
pushf
bound
jne
adc
ds
sub
and
push
mov
out
or
mov
scas
and
mov
push
xor
cmp
fcom
mov
(bad)
outs
ret
push
adc
xchg
push
ret
sbb
add
mul
outs
inc
popa
mov
leave
xchg
xor
pop
push
xor
jp
out
push
mov
outs
inc
add
or
sbb
mov
dec
bswap
neg
or
loopne
popa
loope
and
imul
ss
inc
add
repnz
das
mov
out
or
pop
and
jg
adc
push
jb
push
inc
lea
js
cdq
aam
add
pop
(bad)
adc
sub
jp
pop
test
inc
call
test
inc
data16
add
push
cs
and
and
sub
cli
inc
mov
mov
add
call
(bad)
(bad)
mov
xchg
cmp
(bad)
xor
(bad)
out
fimul
sub
aam
add
mov
xchg
cmp
cmps
(bad)
ret
pop
cdq
jle
jle
(bad)
call
push
jbe
dec
push
scas
dec
es
mov
daa
pop
pop
inc
stos
ror
mov
mov
jb
ret
dec
cli
dec
dec
push
mov
sbb
or
jnp
mov
dec
and
jle
pop
pop
push
shr
into
mov
dec
push
mov
adc
mov
js
ss
push
mov
add
(bad)
out
push
cwde
cmp
pop
ds
cmp
popa
xchg
stos
es
or
push
push
scas
jle
add
and
push
sub
(bad)
(bad)
cdq
or
das
mov
cmp
retf
into
enter
or
sub
ds
sub
xor
mov
cmp
push
push
sub
push
xchg
cmp
pop
push
sub
adc
cmp
pop
xchg
adc
xchg
xchg
(bad)
xchg
(bad)
mov
ror
ds
sub
xchg
mov
push
mov
cmp
xor
outs
call
fcomp
add
mov
mov
add
ret
push
rcr
pusha
rcr
sub
inc
push
add
ret
or
sahf
or
imul
inc
xchg
mov
xchg
pusha
jle
and
mov
repnz
and
xchg
fs
add
inc
sbb
xor
dec
retf
sub
retf
and
(bad)
mov
cmp
dec
test
push
add
push
ror
aad
mov
cli
mov
pusha
pop
pop
or
push
inc
xor
jp
add
(bad)
inc
cs
dec
add
dec
fild
ret
xchg
mov
stos
ds
xor
jbe
sub
das
loop
push
(bad)
mov
rol
dec
lods
push
mov
inc
add
xchg
adc
ficomp
pop
sub
rcl
xchg
jbe
xor
lock
jmp
leave
ret
push
mov
push
mov
xchg
lea
data16
inc
inc
lods
mov
dec
outs
xchg
push
stos
imul
sbb
xor
lea
rol
xor
cli
push
push
sub
add
lea
clc
inc
inc
inc
jmp
fimul
xchg
popa
inc
call
outs
out
inc
inc
pop
mov
or
js
xchg
push
adc
xchg
jo
mov
pusha
adc
arpl
sbb
pop
and
(bad)
data16
leave
or
jno
mov
or
sub
sbb
pusha
or
jmp
popa
and
cmp
pop
out
imul
push
sub
fcomp
push
dec
scas
cmp
imul
push
retf
push
push
add
mov
xchg
fisub
rcr
ret
loope
sbb
push
jb
and
jmp
bound
outs
ret
inc
arpl
push
or
inc
or
inc
out
sub
mov
cmp
or
xlat
fdiv
mov
movups
les
adc
mov
jp
mov
pop
je
ss
add
and
mov
ins
hlt
(bad)
fimul
fsubr
or
mov
xchg
ret
test
jg
push
data16
xchg
hlt
xchg
sub
cli
push
push
test
xchg
cmp
test
test
movs
push
cmps
add
jp
dec
fisub
rcr
rcl
mov
pop
sbb
mov
add
mov
inc
shr
cli
nop
adc
push
sbb
adc
mov
aam
push
fisub
push
add
ds
mov
or
inc
jp
add
inc
xchg
enter
push
test
imul
inc
and
dec
mov
lods
or
loop
scas
ss
mov
push
inc
(bad)
cmp
sub
ja
dec
shr
out
mov
call
mov
out
jp
and
dec
bound
test
add
test
pop
cmp
dec
sahf
add
jb
and
sahf
add
sar
dec
bound
(bad)
sub
sub
inc
pop
mov
fcomp
pop
js
cmp
add
scas
mov
xor
sub
inc
xor
push
(bad)
retf
pop
mov
inc
pop
and
sbb
inc
sbb
add
sar
sub
in
lods
or
test
cmc
adc
xor
test
mov
or
mov
(bad)
xor
adc
inc
cs
clc
and
mov
dec
xlat
push
clc
mov
sbb
xor
pop
call
sbb
daa
popa
pusha
push
cmp
scas
or
test
jp
mov
jmp
pop
call
push
pusha
sbb
sbb
adc
cmp
dec
fsubr
je
or
and
xor
cs
add
xor
cmp
retf
(bad)
inc
mov
mov
inc
js
xor
sub
adc
je
push
mov
pusha
add
mov
ret
jp
or
dec
mov
fisub
and
or
out
lods
and
sub
cmp
js
push
pusha
and
sahf
xchg
sbb
stos
jp
mov
xchg
int3
mov
test
fcmovb
push
lods
das
pop
sahf
add
inc
(bad)
or
cmp
adc
loop
push
mov
xchg
scas
cmps
cmp
xchg
or
jp
inc
mov
scas
repnz
and
inc
xchg
push
push
pop
rol
ret
or
pushf
into
cmps
dec
bound
mov
into
outs
dec
or
inc
add
lea
cmp
push
inc
mov
lock
inc
loopne
push
pop
cmp
out
jo
and
sub
jmp
push
sub
ds
inc
cdq
jo
jbe
sbb
shr
dec
jmp
xor
cmps
into
mov
mov
adc
push
ret
pop
mov
jp
cmp
push
imul
xchg
pop
icebp
jle
inc
push
add
add
inc
js
mov
pushf
push
push
outs
xor
inc
fs
lea
retf
lahf
dec
sbb
push
cmps
push
add
add
scas
and
ffreep
xchg
sbb
jle
push
(bad)
das
or
sub
mov
and
dec
push
pop
pop
daa
sbb
imul
(bad)
pop
xor
jmp
mov
repnz
mov
pop
push
push
cli
push
rcr
inc
scas
sahf
adc
or
call
ret
(bad)
xchg
or
ins
cwde
in
mov
ret
retf
fsubp
adc
shl
fimul
cmp
ficom
adc
ds
daa
call
inc
jno
cmp
add
cli
dec
sub
push
shr
xchg
push
xchg
mov
fcom
mov
out
inc
loopne
fimul
xchg
cmp
cmp
add
das
sub
shl
cwde
cmp
inc
and
cli
jg
jmp
inc
adc
add
das
dec
adc
inc
pop
jae
dec
xor
adc
add
add
daa
add
xchg
pop
add
xor
mov
sbb
push
push
mov
add
scas
xlat
movs
or
cmp
or
or
lods
mov
and
bound
add
cmps
or
cli
ret
mov
mov
sahf
sbb
es
lock
mov
add
popf
test
fsub
cmps
in
xchg
jp
push
push
push
fiadd
push
shr
cs
(bad)
adc
xor
retf
cmp
jb
pop
(bad)
retf
loopne
push
add
adc
inc
and
pop
ss
or
popa
sbb
scas
sub
push
cmps
daa
test
sbb
or
jb
cmp
mov
imul
popa
movs
(bad)
fisubr
sbb
sub
and
jbe
or
pop
sar
inc
rcl
repnz
sub
and
or
sbb
sbb
cmp
sbb
push
pop
xor
adc
push
dec
call
and
stos
aam
add
addr16
outs
ds
cmp
push
push
cmps
jb
push
out
mov
(bad)
mov
mov
inc
adc
cmp
adc
pop
sub
push
aas
push
push
dec
arpl
mov
bound
add
div
pop
mov
add
pop
jbe
or
out
mov
outs
push
pop
inc
pop
cmps
inc
cmps
mov
xor
push
mov
sbb
jo
or
mov
ret
call
add
push
add
mov
mov
pusha
dec
inc
mov
pushf
movs
cmps
mov
xor
movs
scas
add
xchg
pop
sbb
jbe
xchg
(bad)
call
inc
xchg
adc
sbb
adc
fisubr
mov
ds
or
sub
scas
mov
(bad)
pop
ss
and
inc
lods
sbb
jmp
or
push
(bad)
or
jo
pop
and
add
(bad)
lock
inc
adc
ret
add
nop
cmp
xchg
and
cmp
push
sub
or
cmps
out
pusha
dec
cmp
scas
push
movs
test
and
cld
cmp
popa
dec
sbb
push
add
mov
adc
ds
and
add
jmp
xchg
or
pop
(bad)
pop
mov
mov
aaa
lock
pop
ficomp
bound
mov
inc
add
or
inc
dec
sub
push
add
loop
cs
xchg
push
push
dec
mov
mov
push
push
adc
enter
pusha
sub
les
ret
(bad)
rcr
ficomp
mov
adc
add
sahf
outs
cmp
or
sahf
add
cmps
adc
dec
les
push
sbb
and
sbb
ror
outs
push
mov
into
mov
and
cwde
fmulp
js
adc
push
clc
cmps
sbb
rcl
enter
pusha
xor
clc
rol
ret
shl
push
dec
or
bound
add
ror
shl
adc
and
push
(bad)
retf
push
les
push
cmps
pusha
ss
inc
sbb
add
sbb
pop
dec
xchg
sbb
inc
jle
jo
jo
ss
inc
rcr
mov
call
stos
sahf
das
adc
(bad)
ror
dec
imul
xor
call
out
outs
xor
dec
cmp
push
mov
cwde
push
mov
inc
or
out
mov
icebp
dec
clc
mov
xor
xchg
add
inc
cmp
fild
mul
imul
push
pushf
test
dec
ins
inc
test
mov
add
sub
push
xchg
sbb
mov
add
adc
sbb
mov
push
xchg
enter
aas
add
xchg
sbb
jmp
cmp
cmps
add
push
mov
xor
enter
xor
enter
mov
enter
shr
jbe
push
mov
out
xchg
and
(bad)
cmp
add
(bad)
xor
jle
ret
test
rol
or
int3
cwde
push
(bad)
jg
and
fiadd
(bad)
outs
push
ret
pusha
fldcw
pop
test
inc
adc
add
jmp
mov
sub
outs
jo
les
dec
inc
sbb
shl
sub
mov
cmp
popf
sbb
push
mov
lock
push
mul
adc
stos
sub
inc
es
dec
add
jbe
loop
sbb
imul
loop
cmp
inc
cmp
cmps
aaa
mov
adc
fstp
retf
test
xchg
(bad)
push
js
scas
mov
xchg
sahf
or
imul
mov
add
push
sbb
add
jb
retf
add
imul
push
mov
xor
mov
mov
push
mov
or
rcl
xchg
add
xor
rol
lock
sub
mov
or
call
call
sbb
push
lods
jp
lahf
and
or
inc
cmp
es
pushf
movs
mov
mov
movs
(bad)
dec
sahf
add
cmp
xchg
jmp
mov
mov
push
or
into
inc
mov
sar
add
dec
add
lea
and
mov
mov
jle
shr
repnz
pop
adc
imul
sahf
push
push
fcom
inc
retf
mov
pushf
or
xchg
cli
dec
cwde
loope
inc
pop
push
sbb
xor
test
sbb
mov
xor
xchg
retf
add
cmp
daa
or
mov
dec
pop
stos
add
or
pop
mov
in
cmp
push
sub
cmp
inc
mov
fwait
cli
push
add
fadd
scas
retf
push
arpl
adc
dec
lods
loop
cmps
jp
and
scas
idiv
daa
or
push
push
movs
rol
bnd
pushf
and
fiadd
test
neg
mov
jmp
js
imul
add
jmp
aam
rcr
scas
scas
not
jbe
xchg
and
into
pusha
mov
fdivp
or
imul
sub
jmp
pop
inc
or
retf
jb
cmp
dec
call
nop
jp
fisubr
mov
jmp
mov
and
outs
jnp
dec
pushf
sub
add
pop
ret
jle
mov
mov
out
stos
mov
inc
(bad)
js
push
add
mov
stos
pop
mov
mov
call
test
add
les
or
sbb
jnp
and
shl
mov
out
xchg
into
lock
inc
mov
cs
call
jle
sub
add
dec
test
test
pusha
test
(bad)
mov
or
ret
cmps
arpl
xchg
(bad)
out
popa
shr
mov
jb
jp
xchg
xor
push
or
push
dec
add
repnz
or
xchg
js
cmp
and
sbb
push
jnp
ret
rcr
out
iret
push
(bad)
mov
or
loope
and
push
adc
push
retf
xchg
sar
cmps
mov
nop
sahf
pop
pop
ret
mov
mov
call
test
add
scas
mov
shr
mov
push
sbb
and
mov
inc
mov
add
dec
sub
repnz
inc
adc
mov
push
or
call
sub
ds
inc
pusha
ins
scas
scas
mov
inc
and
sahf
jp
fs
scas
mov
fisub
xor
stos
cmp
scas
push
push
test
jb
pop
(bad)
xor
push
jle
jnp
dec
jo
and
inc
sahf
clc
adc
add
rcr
cli
ret
and
sub
xor
sti
popf
or
test
add
add
add
adc
sbb
scas
into
cmps
push
and
ret
jle
bound
inc
and
cmp
and
jo
pop
and
mov
fist
pop
sub
push
cmps
pop
dec
rcl
imul
int3
push
xor
jp
popf
or
push
fidivr
and
ds
js
sub
sbb
xchg
inc
or
popa
or
into
or
ins
pusha
inc
outs
sahf
jmp
ror
pop
push
mov
or
and
shl
(bad)
jno
jnp
jle
inc
enter
mov
xor
addr16
inc
push
adc
fwait
ret
mov
add
mov
rol
dec
cmp
ficom
inc
dec
mov
popf
push
jne
es
sub
daa
dec
mov
push
mov
inc
outs
add
ret
sbb
xlat
add
and
jmp
pusha
add
jle
mov
sbb
cmps
jb
xchg
sub
ds
xor
mov
jmp
neg
outs
add
dec
xchg
inc
into
dec
mov
or
(bad)
stos
or
lock
or
push
sub
push
fsub
jecxz
jp
call
into
repnz
sbb
ds
test
mov
cwde
pop
inc
inc
dec
push
add
add
retf
and
ror
sbb
ret
retf
shr
add
es
call
jp
imul
push
mov
jbe
xchg
add
loop
cmp
data16
outs
mov
xor
or
and
repnz
icebp
jb
or
sub
cwde
xchg
xchg
and
ins
jle
push
bound
or
adc
cmp
movs
mov
mov
sbb
xor
call
repnz
inc
rcl
stos
and
jg
data16
mov
adc
or
xor
in
xchg
es
cdq
loopne
pusha
dec
adc
stos
test
inc
sub
outs
sbb
add
pop
rcr
(bad)
jmp
loop
mov
dec
sbb
or
out
adc
mov
sbb
out
cmp
jecxz
cmp
dec
mov
add
pusha
hlt
mov
(bad)
jle
or
mov
mov
xor
sbb
lock
push
outs
jle
add
xor
ret
pop
retf
mov
xchg
repnz
outs
test
dec
inc
inc
scas
sub
scas
mov
cs
sbb
es
add
mov
push
xchg
pop
into
pop
call
jbe
lock
add
(bad)
push
jo
mov
xchg
(bad)
cs
xchg
xor
jle
test
jp
pop
or
call
scas
popf
or
loope
ss
inc
lods
or
or
loop
out
out
cmp
loopne
js
push
mov
sbb
jge
push
push
pusha
pusha
outs
sbb
mov
adc
cmps
pop
dec
test
xor
pop
imul
in
or
out
pop
cdq
sub
adc
xchg
scas
int3
(bad)
push
inc
mov
fsub
jmp
dec
push
cmp
(bad)
xchg
dec
push
fcmovnbe
mov
fs
cmp
test
fisub
or
add
mov
push
sbb
or
sahf
stos
adc
call
mov
mov
pusha
sub
test
cmp
add
push
jle
js
out
push
shl
add
lods
not
add
jo
add
pop
sub
rcr
adc
call
sbb
xchg
xchg
inc
push
loope
sbb
or
les
sub
jle
jno
ret
mov
scas
cmp
and
pop
add
xchg
pop
sbb
xchg
push
call
outs
(bad)
fimul
sub
dec
cli
xchg
or
jno
push
sub
aam
push
ret
pop
sub
(bad)
xor
shr
and
mov
push
add
ret
sub
int3
sbb
jbe
inc
jbe
dec
(bad)
(bad)
cwde
dec
fisub
es
inc
push
pop
xor
push
and
repnz
push
xchg
pop
jp
dec
les
loop
or
add
xchg
rol
xchg
dec
sub
lea
fsubr
aad
movs
shufps
push
imul
popf
popa
xchg
inc
xchg
adc
sbb
xor
(bad)
ficom
mov
adc
cmps
outs
add
sub
xchg
jle
and
out
cdq
or
adc
mov
into
xchg
inc
pop
sbb
loope
test
mov
sahf
dec
mov
retf
push
rcl
and
add
adc
out
jnp
xchg
mov
aam
mov
pop
jmp
cli
add
call
push
sahf
mov
loope
outs
xchg
mov
pusha
popa
lahf
push
into
pusha
push
inc
adc
pop
add
ficomp
js
fimul
fnsave
jne
xchg
mov
xor
mov
jbe
fs
mov
inc
adc
cmp
pop
fimul
add
inc
(bad)
js
popa
arpl
jb
dec
loop
mov
cs
dec
pop
add
les
stos
pop
pop
and
cmps
(bad)
xchg
sub
add
add
js
(bad)
adc
ret
adc
xchg
jmp
stos
out
jne
mov
fidivr
(bad)
scas
sahf
inc
loop
inc
fiadd
dec
rol
xchg
add
and
sbb
addr16
jmp
ret
pop
das
or
mov
adc
scas
cwde
mov
push
scas
cli
daa
(bad)
pop
push
mov
rcr
push
jmp
add
dec
inc
call
ficomp
push
jae
xchg
cwde
outs
add
jecxz
jp
push
jp
sbb
push
jbe
and
pusha
mov
mov
add
mov
fimul
out
sub
mov
fsubrp
iret
cmp
mov
lock
xor
or
mov
and
jae
and
jbe
jbe
mov
hlt
sub
pop
push
push
push
jb
xor
dec
cs
dec
cmp
sub
into
lahf
rol
mov
xchg
mov
mov
push
xchg
xchg
xchg
cs
out
loop
or
(bad)
sbb
mov
add
add
adc
aaa
repnz
(bad)
loop
xor
imul
xchg
or
push
into
(bad)
sbb
jno
push
bound
inc
loope
rcr
and
pushf
inc
cwde
add
pop
sbb
cs
dec
xor
add
add
es
or
sahf
mov
and
jmp
out
dec
pop
xor
cmp
mov
ds
(bad)
scas
mov
test
idiv
pop
inc
xor
leave
add
push
add
rcr
and
xor
xchg
push
and
and
pop
jnp
push
adc
loop
add
aas
add
or
push
fadd
mov
aaa
(bad)
xor
adc
data16
add
push
inc
jo
pop
mov
pushf
add
retf
cmp
rol
dec
and
push
sub
imul
ret
push
push
repnz
ds
add
xchg
lds
pop
out
jmp
test
data16
es
add
adc
xchg
pop
pop
inc
in
mov
mov
xchg
push
popf
push
(bad)
fsubrp
(bad)
xor
mov
pop
or
rcr
(bad)
into
(bad)
dec
adc
and
or
add
rcl
inc
add
push
push
jmp
add
inc
pushf
fs
or
sbb
dec
js
outs
xor
add
popa
lock
ror
or
push
outs
pop
repz
fsubr
or
sbb
mov
xor
mov
pushf
adc
xor
rcl
aaa
mov
cmp
pushf
pop
in
inc
ficom
out
adc
inc
push
enter
xor
add
ss
test
or
mul
(bad)
xchg
xchg
nop
mov
inc
or
or
scas
(bad)
pop
cs
adc
mov
push
xor
push
pop
sbb
push
and
scas
adc
jmp
cmp
cmps
sub
cmp
ss
sbb
shr
xchg
push
add
add
push
jle
adc
jmp
add
das
push
jbe
movups
out
js
push
nop
ds
push
dec
cmp
imul
or
pop
jp
add
mov
das
outs
(bad)
xchg
js
or
and
sub
adc
daa
add
dec
cmp
xor
push
(bad)
or
cmp
dec
es
inc
and
sahf
pop
jbe
loope
cmp
jle
in
inc
xchg
dec
push
movs
pop
lea
push
adc
dec
es
fiadd
dec
call
(bad)
js
dec
sub
mov
jo
push
lock
pop
in
sub
push
sbb
dec
add
jmp
out
into
loop
jo
jo
xchg
pop
add
cmp
push
sbb
or
mov
ds
pop
sub
sbb
js
in
add
cmps
sbb
inc
test
pop
jl
cli
adc
xchg
or
outs
test
mov
repnz
into
mov
or
outs
cs
sub
outs
dec
(bad)
push
and
out
shl
cmp
push
outs
push
push
add
sbb
push
mov
test
outs
es
js
stos
(bad)
loopne
adc
add
outs
inc
xchg
adc
dec
lods
sbb
pushw
adc
xabort
retf
call
pusha
mov
mov
sbb
ret
add
outs
sbb
xchg
jle
les
data16
jp
mov
push
mov
lea
popa
push
push
scas
xor
sahf
cmps
ss
or
es
adc
pop
add
sbb
or
mov
xchg
sbb
cmp
cmps
cs
sbb
or
push
sub
sub
fiadd
sub
mov
dec
imul
bound
dec
push
mov
add
loop
aad
sbb
ret
add
push
call
add
enter
lock
push
test
xor
stos
add
push
bound
dec
mov
(bad)
xor
(bad)
and
pusha
push
repnz
push
pop
xchg
mov
call
pcmpeqd
lea
loope
ss
imul
add
xchg
mov
les
jle
add
lods
mov
stos
test
add
cli
add
inc
and
(bad)
cmp
test
cli
call
daa
push
dec
cmp
push
jb
int3
push
dec
sbb
es
int3
push
ret
xchg
faddp
scas
dec
fldenv
or
cs
xchg
les
jle
xor
adc
mov
jbe
sub
dec
adc
adc
ret
aad
(bad)
jbe
cmp
leave
xchg
cs
pop
xor
or
mov
sub
prefetcht0
adc
push
mov
bound
pop
pop
xor
mov
bound
aam
ror
add
test
sbb
add
xchg
jb
cmp
or
mov
mov
xchg
push
xchg
rol
fs
add
mov
add
xchg
add
push
and
ds
or
pop
mov
push
ret
fsubrp
adc
jb
xchg
ret
sbb
sub
dec
jle
lock
popa
inc
repnz
adc
mov
cmp
popa
xor
pop
pop
fimul
xor
xchg
gs
inc
addr16
push
repnz
test
rcr
outs
inc
xor
push
ror
mov
sub
and
cs
shr
scas
sahf
inc
call
sti
pop
add
(bad)
scas
int3
test
add
or
or
and
imul
push
push
jo
nop
push
scas
(bad)
inc
or
pop
cs
cmp
jo
jmp
and
jle
imul
inc
push
nop
jbe
sub
or
aas
pop
adc
xor
mov
pop
adc
pop
shl
xor
fadd
dec
es
jo
or
stos
dec
ds
xlat
adc
clc
xchg
jmp
rol
(bad)
jmp
dec
jb
aad
sbb
ret
loopne
loope
pop
out
(bad)
fdivr
mov
jbe
popa
add
bound
mov
adc
arpl
sbb
sti
push
push
inc
cmp
dec
push
push
jnp
addr16
push
jle
leave
and
push
(bad)
or
push
lds
fidiv
xchg
xchg
das
outs
out
popa
add
pusha
lods
lods
test
mov
call
stos
sbb
cwde
bound
mov
mov
add
pop
inc
jbe
shl
fs
sbb
xor
dec
(bad)
xor
push
add
cmc
cmp
test
loopne
jmp
push
and
scas
inc
push
sar
push
ss
xchg
cwde
idiv
jnp
sahf
popa
jne
cmp
jp
push
or
(bad)
(bad)
out
xchg
cli
add
push
data16
pop
pushf
ret
mov
imul
dec
pop
scas
add
add
fcom
sub
fadd
mov
or
bound
sub
(bad)
dec
xchg
data16
and
je
into
mov
push
cli
mov
cmp
adc
mov
mov
xchg
loop
loopne
mov
or
loope
push
mov
jbe
enter
xchg
into
adc
dec
sbb
(bad)
mov
mov
jo
loopne
outs
mov
xchg
ret
add
xchg
sahf
bound
xchg
fldcw
or
sbb
mov
ss
into
shr
push
sti
js
icebp
sub
das
push
xor
test
sbb
mov
imul
push
mov
mov
ficomp
cwde
add
in
nop
pop
rcr
lea
(bad)
push
(bad)
scas
aam
lea
push
cmp
es
inc
sbb
add
and
outs
ror
enterw
sub
rcr
retf
mov
add
push
dec
or
sbb
or
jb
sub
iret
rol
inc
out
and
call
sub
loop
push
cwde
xchg
mov
inc
jle
push
es
add
mov
xchg
and
dec
jb
inc
mov
cmps
xchg
inc
pop
adc
add
push
adc
rcl
popa
in
into
shr
fadd
outs
outs
data16
lock
mov
out
dec
or
adc
add
cmp
(bad)
mov
xchg
icebp
push
nop
ds
xchg
jmp
jo
cmp
loopne
or
shl
shr
test
repnz
xchg
mov
sbb
loopne
dec
pop
idiv
loope
fdiv
jp
xchg
jno
ret
mov
(bad)
jb
adc
dec
xchg
xchg
(bad)
pusha
popa
pop
push
(bad)
sahf
mov
xor
and
cmp
xchg
dec
(bad)
mov
jb
add
sbb
dec
scas
lods
test
call
movs
jbe
push
es
dec
inc
add
test
push
cli
retf
adc
outs
lods
push
es
push
loopne
xchg
adc
ss
mov
cmp
retf
add
leave
add
push
push
push
push
daa
mov
pop
add
xchg
dec
jecxz
cmp
jmp
jbe
sbb
inc
sbb
push
adc
in
arpl
push
xchg
jle
inc
mov
ret
sub
call
mov
sub
sbb
stos
out
cs
or
push
dec
adc
add
cmp
push
cli
data16
adc
and
test
sub
add
jbe
daa
ror
dec
xchg
fiadd
test
cmps
cli
test
pop
and
(bad)
add
leave
(bad)
mov
adc
(bad)
rcr
or
pusha
and
repz
inc
leave
pop
outs
loop
mov
jnp
push
cmps
mov
sbb
dec
mov
cmp
mov
leave
xor
mov
pop
inc
inc
(bad)
enter
jecxz
cmp
add
sbb
xchg
fiadd
and
push
jb
xor
mov
add
mov
dec
mov
cmp
fidivr
xor
xchg
mov
fcomp
sbb
(bad)
pop
ret
pop
xor
sub
add
cli
add
jp
bound
jp
mov
sbb
pop
dec
mov
inc
stos
jae
add
jbe
sbb
xlat
pop
add
aam
jle
xchg
xor
lock
and
jle
add
jecxz
push
and
dec
pop
mov
xchg
pop
add
dec
xchg
scas
push
push
mov
and
scas
cmp
mov
push
sbb
and
pop
dec
stos
data16
es
pop
js
lea
cs
push
sbb
dec
outs
cs
ficom
test
aam
stos
mov
inc
and
push
push
loopne
(bad)
jae
popa
sbb
push
ficomp
adc
xchg
es
scas
hlt
push
add
shl
(bad)
es
cmp
dec
sbb
les
jp
(bad)
das
shr
call
cmp
loope
add
add
jno
add
arpl
push
xchg
xchg
mov
jo
retf
cwde
adc
pop
or
xchg
test
ror
add
jmp
mov
jge
push
mov
add
neg
push
inc
out
add
cmp
repnz
sub
mov
outs
pop
xchg
xchg
xchg
xor
xor
xor
cmps
out
inc
cmp
pushf
out
add
lea
jle
shl
adc
push
popa
sbb
out
and
adc
mov
mov
and
mov
xchg
mov
pusha
ins
sub
(bad)
ss
cdq
sbb
loop
push
adc
rcr
aas
loop
and
xchg
loop
pop
mov
gs
pop
add
sar
ss
call
jo
sub
mov
pusha
add
add
pushf
jo
(bad)
xor
add
jne
(bad)
dec
and
push
push
scas
or
dec
dec
push
or
js
out
outs
(bad)
and
push
cmp
and
sbb
pop
test
movs
add
sar
sahf
cwde
or
(bad)
arpl
and
repnz
mov
push
inc
jo
enter
data16
inc
pop
inc
xor
test
add
dec
adc
dec
(bad)
mov
jle
outs
jbe
pop
adc
loop
pusha
sub
scas
not
sub
mov
mov
retf
add
xor
and
add
jbe
xchg
test
add
xor
mov
cs
clc
repnz
dec
pop
inc
and
sbb
or
les
sbb
xor
stos
retf
add
bound
lods
push
add
jne
test
bound
or
mov
aam
pop
and
xchg
add
jb
into
(bad)
fiadd
push
ror
mov
and
or
out
xor
movs
cmp
out
outs
scas
xchg
cmp
push
pop
push
das
jmp
xor
out
add
pop
daa
test
outs
scas
sbb
mov
add
inc
inc
mov
sahf
rcr
call
lock
and
pop
sahf
dec
adc
mov
ror
repnz
mov
popf
and
jbe
cmp
lds
stos
es
loop
and
mov
sub
popf
push
and
sar
push
push
adc
inc
loop
inc
xchg
pop
xchg
adc
es
es
pusha
popa
jl
mov
dec
push
xor
ret
sbb
inc
rcl
inc
mov
out
xor
adc
test
mov
adc
pop
mov
fisttp
out
test
pusha
(bad)
retf
jp
and
xchg
sbb
sbb
sub
(bad)
or
xlat
jmp
verr
shl
rcl
dec
push
div
dec
enter
sbb
test
sbb
and
sub
stos
cli
adc
xor
sub
push
xor
push
mov
call
xchg
dec
add
mov
les
and
mov
sbb
or
jp
mov
lock
stos
nop
or
jecxz
dec
push
add
mov
into
adc
mov
cmps
sbb
sahf
pop
push
aam
push
call
mov
call
push
mov
ret
dec
arpl
fiadd
add
or
shl
sbb
popf
cli
add
inc
out
mov
inc
lods
mov
lds
xchg
fiadd
not
movs
test
js
mov
lea
cs
stos
adc
(bad)
cmps
mov
push
add
test
xor
ret
test
dec
push
push
fcomp
ret
xchg
push
out
cs
(bad)
nop
cmp
inc
and
xchg
adc
xchg
xor
pushf
lahf
jbe
scas
push
aam
pop
inc
mov
dec
mov
add
dec
jo
cs
or
dec
pusha
sub
das
jmp
out
push
add
xor
cmp
sahf
outs
sbb
pop
mov
movs
mov
sbb
lods
arpl
aad
shl
cli
out
add
call
xor
cwde
(bad)
xchg
repnz
cli
sahf
mov
jecxz
adc
movs
in
push
jbe
cli
and
lods
and
enter
inc
pop
or
clc
scas
sahf
push
sbb
push
enter
pop
dec
and
dec
sbb
dec
pop
leave
retf
xor
or
sub
cmps
dec
push
hlt
mov
in
fimul
out
mov
push
enter
xor
cmps
jno
jle
adc
ret
jbe
add
push
popa
adc
cs
mov
je
call
mov
bt
push
pop
jmp
dec
or
leave
mov
mov
push
fdivrp
test
add
ret
dec
adc
cmp
add
into
ret
xor
(bad)
cmp
xchg
adc
neg
cmp
mov
repnz
jb
mov
scas
mov
mov
mov
mov
into
push
xor
mov
clc
stos
pop
call
adc
(bad)
sub
add
mov
dec
inc
dec
mov
push
or
data16
xor
sahf
push
add
rcl
sbb
mov
mov
cmp
xor
push
fisubr
push
es
loop
or
outs
cli
xor
xor
mov
sub
ja
mov
xchg
push
shl
mov
and
xchg
cmp
mov
mov
or
mov
cmp
cmp
fiadd
loop
inc
out
push
sbb
ds
or
xchg
ret
pop
push
cmps
xchg
and
adc
jb
push
sub
imul
mov
xchg
pop
push
and
(bad)
js
push
xchg
sub
sub
(bad)
jbe
fs
and
jnp
add
cmp
xor
dec
or
mov
push
fdivp
ret
add
repnz
aam
ret
inc
or
out
push
movs
xchg
dec
or
jb
mov
dec
dec
mov
mov
or
sbb
mov
push
shr
outs
div
loope
xor
or
adc
ficomp
jmp
and
add
cmp
add
imul
mov
(bad)
stos
test
imul
sub
lds
or
ficom
jle
inc
mov
sbb
inc
pop
pop
xchg
pop
xchg
mov
xor
add
add
data16
lods
dec
cmp
ret
and
lahf
mov
xor
xor
jp
inc
or
dec
inc
mov
or
mov
inc
inc
add
push
xchg
add
lock
ret
retf
in
repnz
push
add
push
dec
scas
add
jo
push
sysret
pop
test
add
(bad)
pop
es
imul
fs
test
outs
xchg
jnp
loopne
sub
in
jbe
or
jmp
ds
and
dec
mov
xchg
inc
call
and
fmulp
add
cli
cmps
xor
sar
sub
mov
dec
shr
dec
hlt
aam
sahf
mov
data16
pushf
(bad)
dec
cs
cmp
popa
push
sub
(bad)
cmp
and
xor
push
lods
push
aam
xor
dec
jp
jne
xor
ds
dec
lods
sub
adc
call
jp
repnz
or
adc
add
pop
add
xchg
and
out
mov
mov
mov
fisub
dec
add
retf
pusha
xchg
ret
jmp
jmp
inc
retf
push
cmp
outs
out
ret
lods
or
sbb
ret
add
dec
popa
sub
push
jmp
fidivr
cmps
(bad)
push
scas
pusha
mov
mov
mov
lock
xchg
repnz
pop
sbb
loopne
bound
dec
adc
add
and
push
pusha
or
popa
ss
pop
jo
pusha
mov
rol
dec
add
dec
inc
mov
inc
add
outs
push
(bad)
rcr
(bad)
sub
or
popa
push
xchg
adc
out
or
lock
into
mov
adc
xchg
out
out
adc
loopne
ret
jno
push
cmp
cmp
jb
and
jle
pusha
or
xor
or
dec
fisubr
inc
jbe
cli
or
pop
add
mov
mov
loop
push
sub
xor
and
xchg
xor
mov
in
(bad)
mov
adc
add
sbb
fcmove
ret
mov
mov
into
cdq
mov
loop
cdq
push
add
pop
cmps
ins
and
mov
mov
popa
xor
fisub
test
dec
(bad)
push
ret
test
adc
scas
bound
push
or
mov
pop
ror
lea
retf
push
push
adc
mov
rcr
mov
mov
jo
pusha
mul
cmps
xchg
mov
out
es
push
pop
jo
imul
cmp
push
test
xor
adc
mov
mov
inc
sbb
jle
invd
cwd
(bad)
div
push
or
loop
adc
out
movs
ror
push
push
mov
push
cs
jne
mov
fs
adc
stos
mov
iret
sbb
and
sub
pop
fs
cmp
adc
xchg
mov
js
push
push
loopne
pop
(bad)
fiadd
add
fidiv
or
dec
das
(bad)
data16
xchg
or
mov
loopne
ds
or
shl
repnz
or
gs
cmp
push
push
dec
scas
data16
popf
and
or
mov
loope
xchg
fisub
fsub
gs
out
ret
(bad)
add
and
mov
inc
repnz
sbb
outs
cmp
or
ins
loop
or
loop
dec
sub
xchg
cwde
inc
mov
xchg
adc
xchg
ds
mov
add
push
sub
es
mov
cmp
ds
pavgb
push
loop
push
adc
inc
mov
add
xor
scas
adc
fbld
dec
or
xor
add
(bad)
sahf
push
dec
add
aad
add
and
jo
sahf
mov
add
lods
add
fild
sahf
adc
or
xchg
or
inc
push
sahf
xchg
rcr
sub
cmp
inc
and
cmp
jle
push
sbb
sbb
dec
mov
inc
cs
push
push
js
inc
mov
bound
pushf
mov
sub
adc
imul
and
daa
sahf
les
pop
outs
(bad)
mov
xor
mov
xchg
(bad)
or
add
add
loop
(bad)
sbb
hlt
jb
mov
add
xor
sub
and
and
rcl
mov
xchg
jp
adc
mov
ins
add
mov
repnz
push
outs
leave
inc
xlat
push
sbb
cmp
jbe
jb
xchg
pop
or
ss
sbb
push
movs
mov
inc
leave
push
das
pop
adc
pop
movs
daa
inc
sbb
inc
inc
(bad)
sahf
push
dec
or
js
cmc
xor
js
cs
sbb
push
scas
xchg
mov
and
mov
ret
outs
test
rol
call
push
jle
lds
push
jle
pop
inc
adc
push
nop
ficom
pop
movs
push
(bad)
scas
daa
pop
daa
lods
lea
outs
push
cwde
lock
sti
dec
jo
mov
mov
daa
cmp
pop
(bad)
mov
cmp
iret
shr
(bad)
bound
sub
ins
sub
inc
pop
pop
out
ret
xchg
int3
push
test
cmp
fstp
sbb
inc
pop
retf
adc
js
adc
sub
add
(bad)
xchg
xor
xchg
pop
enter
adc
les
imul
sbb
pop
inc
ja
xchg
mov
jmp
xchg
xor
jb
dec
out
lock
call
stos
out
sub
jo
push
pop
inc
cdq
xor
mov
cmp
pop
pop
add
lods
fs
stos
inc
cmp
cmp
scas
fidivr
js
cs
push
cmp
cwde
push
mov
and
mov
fimul
ficom
outs
push
inc
cwde
mov
scas
add
or
xchg
js
sbb
mov
jle
cwde
pop
mov
push
(bad)
mov
jle
xchg
add
or
and
and
inc
jbe
and
pop
dec
pop
xchg
cmp
dec
sbb
aam
sahf
loop
sub
xchg
push
cwde
jo
loop
fsub
leavew
dec
sub
sahf
jbe
ret
push
les
jp
pop
ret
jo
or
stos
xchg
lea
push
mov
data16
lock
aad
popa
add
(bad)
adc
cmp
call
cwde
aas
and
adc
mov
push
call
add
add
into
mov
jo
add
push
xchg
jo
fs
and
mov
loop
or
push
mov
mov
(bad)
pop
pop
inc
sbb
mov
cmp
in
xor
aam
sbb
clc
add
or
inc
mov
rol
inc
push
jmp
sbb
push
popa
and
sahf
fidiv
or
cwde
xor
add
adc
or
adc
mov
es
into
mov
sbb
mov
bound
inc
mov
mov
or
pop
push
xchg
dec
outs
mov
es
or
inc
xor
out
sbb
mov
icebp
(bad)
add
dec
pop
mov
push
jo
push
mov
xor
inc
xchg
out
cmp
pop
das
adc
dec
nop
fcmove
retf
and
mov
data16
test
out
mov
repnz
cmps
and
jo
mov
sbb
ds
mov
mov
and
(bad)
mov
xchg
inc
bound
and
fiadd
ins
or
push
jmp
and
mov
push
push
dec
sub
xchg
cmp
nop
fisub
stos
dec
cmps
add
xor
push
sahf
cwde
mov
popf
inc
sbb
sbb
jp
add
repnz
sub
xchg
xchg
scas
sub
add
or
popa
pop
scas
or
adc
shl
mov
pop
(bad)
lar
sahf
adc
ffreep
jle
and
jge
ret
loopne
loop
loopne
fsubp
inc
ret
dec
pusha
dec
pop
out
jb
outs
fild
inc
cmp
jle
dec
push
push
or
sti
and
fidivr
push
mov
sbb
loopne
shl
test
and
sub
inc
push
bound
pop
xchg
pop
cmp
mov
or
cmps
xchg
out
jmp
add
ss
cmp
out
jbe
test
xor
cmp
adc
sahf
xchg
push
ror
mov
cli
neg
push
pusha
inc
cmp
(bad)
into
or
jle
sbb
mov
or
pushf
dec
out
rol
mov
sub
pushf
ins
into
retf
pop
mov
icebp
mov
mov
lods
sub
dec
ret
adc
rcr
xor
and
ds
pop
pop
add
add
rcr
cli
call
push
inc
ret
in
or
loop
and
outs
sub
test
sbb
pop
sbb
jp
js
xor
jle
js
pop
retf
and
test
cmp
nop
adc
sbb
cli
xchg
bound
lea
ds
mov
jle
enter
js
adc
or
icebp
or
push
mov
sub
lods
push
sahf
mov
pusha
js
jo
(bad)
jmp
pop
imul
jp
push
mov
jp
mov
ds
cmp
retf
cmp
add
push
push
mov
mov
mov
dec
sahf
jp
or
retf
sbb
out
outs
cli
test
sub
mov
dec
mov
mov
inc
jmp
or
add
or
or
inc
pushf
mov
arpl
mul
aam
sbb
mov
mov
bound
dec
es
ficomp
sub
cmps
push
jp
fisub
or
add
jmp
sbb
(bad)
scas
dec
(bad)
xor
xchg
xchg
loop
xchg
lock
outs
mov
cmp
push
neg
cmps
(bad)
sbb
ins
pusha
add
mov
inc
jno
loope
ss
imul
nop
bound
les
call
(bad)
jb
pop
enter
cmps
dec
(bad)
(bad)
rcl
mov
sahf
mov
push
mov
pop
adc
sub
sub
cdq
arpl
add
ds
fmul
mov
pop
enter
sub
cmp
pop
das
jmp
pop
add
add
cdq
repnz
sbb
leave
pusha
callw
push
xor
jmp
and
xor
sub
je
pop
cs
xor
add
lock
add
arpl
xor
pop
jbe
adc
neg
js
adc
mov
adc
mov
imul
add
sub
jecxz
pop
mov
(bad)
sbb
mov
inc
pop
cli
rcr
mov
shl
xchg
dec
ret
sub
jle
inc
mov
mov
or
invd
push
ret
retf
mov
push
cmps
mov
jb
cmc
gs
pop
enter
adc
mov
pop
mov
cmp
repnz
pop
xchg
mov
mov
jecxz
push
call
and
or
shl
pop
mov
jb
pop
and
out
and
mov
sub
mov
or
test
mov
sahf
or
or
push
data16
xchg
out
add
icebp
add
inc
sbb
loope
push
ret
xchg
xor
pop
mov
sub
mov
pop
and
pop
jbe
and
add
arpl
loopne
mov
xor
pop
xchg
push
in
or
cmp
xor
fs
mov
push
sbb
cmp
(bad)
dec
aam
clc
jp
into
cs
sub
ds
loope
lea
push
xor
(bad)
mov
sbb
jb
adc
loopne
jo
xchg
jmp
int3
sbb
(bad)
lock
into
cmps
popa
pusha
daa
and
aad
xchg
xchg
out
xchg
add
push
lods
ins
repnz
and
pop
mov
and
lods
xlat
mov
jbe
mov
ret
sub
data16
rcr
mov
xchg
imul
ds
cmp
cli
ret
movs
mov
leave
mov
push
mov
add
dec
test
sub
jle
add
sub
pop
mov
and
aas
dec
and
(bad)
sbb
inc
pmaxub
xor
mov
mov
push
jecxz
add
sub
mov
jne
and
mov
fisubr
hlt
sbb
adc
cmp
sbb
data16
icebp
sbb
and
sti
adc
and
mov
pop
repnz
cmp
jbe
sub
mov
call
or
ror
inc
add
mov
outs
ss
adc
or
fimul
push
push
aam
not
ins
pushf
sub
fimul
sub
rol
outs
sbb
push
daa
or
ds
inc
mov
xchg
inc
push
sbb
jo
cmps
loop
gs
sbb
add
inc
inc
mov
call
mov
pop
into
mov
ds
call
xchg
add
mov
push
jbe
sub
call
adc
cmps
mov
sub
daa
out
mov
mov
dec
pop
push
xor
sbb
into
dec
sub
pop
cmp
out
cmps
inc
cli
xchg
lods
or
cs
into
lock
(bad)
push
xchg
pop
loopne
ret
mul
inc
add
sbb
ret
fiadd
ror
sahf
adc
add
fadd
cmp
pusha
inc
(bad)
mov
cmp
icebp
inc
cmp
fimul
or
(bad)
repnz
pop
push
add
sahf
into
js
call
mov
pop
cs
je
add
add
test
cs
and
inc
cs
ror
and
out
xor
movs
into
outs
lahf
mov
(bad)
adc
call
or
(bad)
or
pop
and
daa
jle
ror
ja
add
pop
inc
cmps
ret
sbb
push
call
ret
add
(bad)
call
adc
ds
jnp
daa
ret
xor
bound
(bad)
sahf
jb
dec
adc
cli
bound
sub
mov
dec
repnz
jno
jns
mov
test
cmp
jnp
dec
add
xchg
out
adc
add
sbb
mov
ret
jmp
add
mov
popf
movs
shl
jbe
dec
lods
xchg
loop
xchg
add
movs
mov
jecxz
jo
pop
fcmovb
mov
out
and
jmp
cmps
pop
ss
pusha
mov
jle
and
or
jbe
xchg
fld
mov
dec
mov
fild
ret
lock
mov
data16
sub
jp
loopne
mov
adc
mov
xchg
jle
cdq
jo
mov
ror
sbb
mov
or
fnstenv
dec
mov
sub
or
cmp
inc
mov
cmp
jb
test
ds
xlat
xchg
test
ret
movs
rol
dec
xchg
inc
mov
jle
sub
xchg
xchg
pop
add
js
outs
mov
sbb
sub
xchg
fimul
and
fiadd
stos
pop
add
stos
add
rcr
ds
rsm
or
push
or
ret
or
out
bound
sub
push
retf
pop
rcl
jbe
(bad)
pop
fdivr
xor
xchg
dec
or
xor
mov
rol
jmp
xor
jbe
(bad)
test
mov
add
fisubr
inc
mov
and
push
inc
test
push
cmp
add
lods
xchg
add
popa
add
mov
aaa
mov
add
mov
sbb
test
xor
inc
ffreep
xchg
add
(bad)
push
jg
xchg
and
(bad)
bound
fiadd
push
mov
inc
pop
bound
cmp
dec
(bad)
xlat
add
cmps
and
mov
xor
push
xor
(bad)
jmp
bound
xchg
add
inc
or
xor
or
stos
bound
pop
test
jle
dec
repnz
xchg
push
or
cmps
cmc
push
lock
cmps
push
mov
push
dec
push
mov
add
add
or
add
jmp
mov
outs
adc
push
sub
jmp
fcom
add
ret
rol
and
xor
adc
add
pop
pop
cmps
pop
or
ficomp
out
jb
nop
lods
inc
outs
add
mov
push
inc
loope
jb
add
ins
add
sbb
mov
push
loop
and
ret
mov
ficomp
sub
(bad)
ret
js
sahf
sub
jno
in
lahf
imul
test
pop
sbb
mov
mov
adc
(bad)
(bad)
retf
es
inc
loope
xor
popa
push
or
fsub
sbb
imul
(bad)
out
cmp
or
fimul
xor
imul
mov
xchg
repnz
fisub
dec
mov
dec
dec
or
dec
push
ja
push
or
push
mov
jp
arpl
mov
or
mov
movs
mov
cmps
dec
scas
cmp
jp
fs
call
or
pop
pop
xlat
aam
sahf
cmp
push
addr16
lock
lea
push
leave
xor
out
mov
sahf
xor
pop
cmp
imul
mov
cs
jmp
and
add
bound
adc
into
pop
adc
xchg
scas
shl
and
mov
mov
sbb
stos
or
loope
arpl
mov
fcom
mov
xor
mov
adc
add
inc
jp
jo
(bad)
xor
dec
jno
xchg
xchg
xchg
push
push
nop
inc
bound
cli
inc
inc
arpl
xchg
cmps
push
(bad)
call
pop
mov
scas
outs
rcr
ret
jle
sbb
lahf
push
inc
pushf
fcom
and
bound
dec
mov
pop
(bad)
loopne
inc
sbb
push
ja
loope
cs
out
dec
cmps
cmps
nop
out
clc
jmp
push
out
leave
adc
sbb
inc
push
ds
outs
jmp
and
rol
and
and
pop
xor
data16
adc
lahf
int3
add
repz
movs
scas
sub
mov
push
ret
pop
sbb
xor
loope
(bad)
mov
rcr
xor
push
(bad)
(bad)
sahf
jp
inc
dec
pushf
add
loope
cli
adc
ret
div
fisub
(bad)
popf
or
call
jle
pop
mov
mov
ins
inc
loope
cwde
out
jbe
daa
retf
dec
(bad)
mov
add
add
dec
sub
mov
movs
add
jp
adc
fbstp
imul
cmp
aam
xlat
cmp
adc
stos
ss
adc
ror
mul
mov
dec
lods
or
or
adc
xchg
sub
das
loop
push
or
mov
add
test
mov
lock
push
shl
fsubp
xchg
add
jmp
mov
ror
dec
ficomp
xchg
stos
(bad)
dec
(bad)
xor
mov
cmps
es
or
ds
gs
mov
test
enter
hlt
les
xchg
popa
mov
shl
outs
ss
push
pusha
inc
pop
repnz
jo
sub
mov
adc
jecxz
cmps
repnz
dec
mov
(bad)
call
fwait
test
cs
adc
xor
popa
ret
cmp
pop
es
mov
xchg
jmp
mov
push
out
jmp
add
add
and
scas
push
inc
test
or
js
dec
mov
or
or
or
ret
inc
xchg
mov
push
data16
cmp
sahf
imul
mov
data16
data16
(bad)
push
add
inc
sbb
sbb
loope
dec
or
repnz
xchg
pushf
cmp
pop
addr16
test
cli
mov
push
push
ss
xchg
dec
jecxz
test
test
ret
sahf
into
ss
pop
and
lods
(bad)
data16
in
fiadd
(bad)
retf
imul
adc
add
test
retf
jp
pop
xor
xchg
dec
sahf
iret
jmp
out
into
inc
add
xor
jp
mov
jb
arpl
jbe
ror
adc
push
cli
nop
fadd
jl
xchg
(bad)
ss
inc
or
sub
mov
push
jp
add
cs
xor
mov
xchg
mov
and
loopne
mov
mov
pop
push
add
or
mov
pop
cmp
dec
jbe
add
add
cs
inc
outs
adc
stos
pop
pop
mov
add
enter
or
or
xchg
dec
cmp
inc
push
add
pop
mov
imul
ror
sbb
xchg
ds
sbb
mov
and
xor
jmp
xchg
add
popa
dec
dec
es
adc
jmp
shl
(bad)
es
aam
pop
cli
popa
mov
add
outs
push
inc
imul
sub
push
rcr
inc
pusha
lock
outs
out
jp
xchg
int3
push
aas
cmps
sahf
add
mov
inc
scas
push
(bad)
push
inc
and
sub
ret
mov
jle
cmp
pusha
add
popa
lock
retf
push
cmp
mov
inc
nop
jle
cwde
push
cmp
aam
jp
mov
(bad)
xchg
test
or
adc
mov
mov
dec
ja
xor
pop
jmp
nop
and
dec
sbb
or
lock
jp
dec
rol
jno
push
push
and
mov
push
and
push
outs
push
sbb
outs
mov
push
add
jp
dec
and
cmc
xchg
xchg
pop
mov
in
lods
sub
cmp
loope
cwde
ret
mov
daa
push
ss
test
push
and
into
push
sbb
test
mov
inc
sbb
ds
sub
fs
mov
pop
lods
sub
push
mov
sbb
cli
and
or
jo
dec
dec
add
push
test
mov
out
jle
neg
mov
call
into
pop
add
call
ja
dec
inc
push
or
adc
ds
cmp
daa
sub
xchg
push
adc
and
repnz
test
push
and
xchg
jp
dec
xchg
inc
sub
sbb
(bad)
mov
scas
xor
ds
lahf
cs
add
inc
dec
inc
es
mov
adc
adc
lea
mov
inc
mov
cmps
js
inc
sbb
fcmovu
mov
mov
push
mov
pop
jp
mov
push
inc
dec
dec
mov
loopne
push
push
xchg
add
push
xchg
add
inc
scas
push
into
fmul
ror
xor
and
xchg
jmp
inc
or
or
xor
(bad)
loopne
ret
mov
mov
dec
loop
mov
xor
mov
cmp
jo
stos
cli
adc
sbb
cmp
mov
imul
out
and
pushf
loope
fstp
mov
push
ss
or
mov
scas
inc
pop
add
jmp
mov
add
or
pusha
(bad)
push
rcr
push
test
and
sub
xor
push
jmp
fisubr
add
jle
mov
popa
je
sar
fwait
les
cmp
mov
adc
out
sahf
ret
xor
aas
sbb
leave
nop
xor
pop
inc
mov
cmp
mov
xor
push
cs
or
mov
push
add
push
xor
inc
jno
push
or
scas
mov
shl
rol
jp
pusha
ss
cmp
adc
jp
les
js
mov
and
or
xchg
shl
leave
jmp
ret
or
add
mov
cli
push
pop
mov
movs
add
pop
jle
sbb
xor
add
xchg
and
push
xchg
xchg
dec
fcom
mov
ror
mov
lods
push
cs
pop
imul
jle
fiadd
xchg
inc
(bad)
mov
push
sub
xchg
outs
inc
imul
add
sub
adc
into
into
push
pop
jno
or
push
outs
mov
jbe
sahf
sbb
add
push
pop
xor
cli
mov
mov
movs
add
or
and
jmp
(bad)
pusha
and
bound
sub
retf
xchg
es
or
sbb
pushf
lea
mov
mov
push
mov
into
xor
pusha
mov
rcr
push
sub
es
add
aam
mov
add
into
cli
adc
and
push
out
sub
pop
rcl
arpl
pop
jbe
sahf
or
xor
mov
xchg
repnz
dec
and
mov
(bad)
out
mov
mov
(bad)
scas
mov
sub
adc
mov
ds
rol
mov
scas
repnz
retf
ficomp
add
mov
jmp
mov
push
movs
push
xchg
cmp
dec
adc
dec
scas
sub
push
nop
cmp
not
cmp
retf
mov
jne
fadd
push
das
xchg
clc
aam
sbb
mov
mov
sbb
push
or
cli
inc
shl
inc
sub
fs
sbb
jle
mov
push
push
sub
sbb
push
or
ss
retf
ret
jb
or
into
sbb
or
cmps
jle
daa
mov
push
and
lea
dec
push
mov
cs
adc
and
imul
xchg
pop
or
and
(bad)
adc
mov
jbe
sbb
and
mov
add
add
outs
and
adc
or
js
test
scas
inc
cmp
xchg
ret
pushw
call
outs
pop
pop
pop
les
jmp
xor
add
outs
and
push
add
mov
jmp
cli
mov
lock
sbb
and
stos
xchg
xor
mov
and
sbb
xchg
fcomp
mov
xor
inc
sbb
repnz
xor
data16
add
or
push
jle
adc
jecxz
mov
mov
inc
je
scas
jp
xchg
add
movs
adc
ss
sbb
int3
mov
add
dec
ficom
inc
fidivr
mov
cmp
je
mov
aad
cs
ret
rcr
lea
inc
mov
mov
xor
inc
jp
xor
and
cmp
push
xor
mov
mov
pop
pop
pop
add
rcl
adc
lock
push
pop
dec
sbb
(bad)
sbb
ficomp
loope
outs
das
ds
sbb
cli
ror
jb
(bad)
out
push
xchg
add
push
es
add
add
mov
sbb
cs
or
push
cmps
jmp
mov
push
push
neg
pusha
add
add
and
mov
dec
mov
fnstenv
(bad)
faddp
push
and
inc
cs
enter
push
mov
popa
test
retf
hlt
mov
sub
cs
jo
sbb
xchg
ss
lea
add
mov
sub
sti
pop
mov
ds
js
xchg
lahf
jmp
jle
inc
mov
shl
mov
push
sbb
lea
and
add
ss
popf
sbb
cmp
pop
mov
pusha
mov
rcr
(bad)
inc
dec
inc
outs
push
cmp
ret
fisub
call
(bad)
and
bound
xchg
inc
movs
out
aam
add
push
inc
jmp
repnz
sub
lock
sbb
pop
cmps
inc
jbe
dec
out
mov
and
adc
sub
rol
fidivr
inc
dec
add
xchg
outs
(bad)
push
pop
sbb
pop
add
or
sub
sub
or
push
and
ror
je
mov
add
movs
jle
imul
or
pop
jp
jo
add
push
sub
ret
movs
adc
push
call
push
scas
xchg
xchg
pop
(bad)
jg
mov
imul
loop
shl
bound
mov
js
push
pop
sbb
or
scas
mov
test
pop
shr
push
mov
mov
mov
ret
or
popf
push
out
jmp
inc
push
sti
jp
jp
cmps
mov
adc
js
pop
sub
pop
pop
inc
call
out
cmp
and
adc
arpl
ret
inc
(bad)
sar
sbb
xchg
dec
cmp
sub
xchg
(bad)
and
int3
je
xchg
fisub
fidiv
xor
pop
jecxz
sar
cmp
inc
outs
xchg
or
into
mov
mov
jle
jo
adc
push
pop
xchg
retf
(bad)
sub
sbb
dec
rcr
or
add
push
dec
(bad)
fnstcw
mov
mov
jno
hlt
sbb
jle
pop
push
xchg
jmp
js
mov
push
mov
xor
cli
inc
and
xchg
jne
pop
jle
sbb
pop
inc
lods
lods
or
fs
scas
and
push
ficomp
push
cmp
jnp
xchg
xchg
nop
jbe
push
xchg
inc
(bad)
cli
mov
js
sbb
push
loop
test
jp
xlat
scas
lock
xchg
push
pop
push
adc
inc
jbe
cs
and
loope
call
arpl
fucomip
jle
adc
ds
jbe
dec
jb
movs
shr
cmp
mov
repnz
pop
mov
jp
dec
out
mov
out
bound
lock
cmps
or
xor
inc
and
pop
enter
xchg
or
ss
add
retf
dec
ss
sahf
fiadd
in
sub
pusha
retf
pushf
cmp
xor
lods
xor
and
xchg
cli
test
and
jo
or
into
jb
jmp
and
ror
ret
or
adc
or
xor
xchg
xor
lahf
and
into
pop
pop
es
cs
dec
mov
push
jae
push
add
sbb
xchg
dec
sub
push
pop
mov
sahf
into
and
call
repnz
cmps
pushw
ret
mov
dec
shl
sub
sbb
add
sbb
mov
movs
add
mov
retf
sbb
out
outs
dec
and
(bad)
jmp
sub
pushf
fimul
jmp
xchg
sbb
ret
loopne
adc
(bad)
and
push
not
dec
neg
ficomp
or
or
or
rol
xchg
xor
call
mov
xchg
jo
sahf
dec
test
into
or
rcl
dec
mov
dec
pop
xchg
cli
or
cmp
loopne
ret
je
movs
mov
mov
sbb
sub
adc
xchg
adc
push
push
js
les
out
enter
sbb
icebp
(bad)
adc
into
jle
xchg
xor
mov
hlt
test
shr
push
enter
sub
mov
out
sbb
pop
inc
add
retf
pop
jo
add
into
xor
es
into
cdq
jno
xor
mov
add
xchg
sbb
and
scas
and
pop
sub
fidivr
add
retf
push
push
jmp
or
mov
outs
fcomp
adc
cdq
adc
push
dec
dec
jmp
loopne
inc
or
enter
dec
pusha
mov
fmulp
dec
pushf
xor
jmp
into
inc
jp
loopne
mov
lock
add
pop
call
push
inc
leave
into
xchg
push
punpckldq
add
retf
dec
idiv
scas
popf
or
inc
sub
repnz
or
mov
adc
and
add
(bad)
cs
(bad)
dec
xchg
adc
mov
nop
sbb
data16
jle
add
adc
cmps
retf
add
ret
mov
mov
test
sbb
fucomi
jle
xchg
add
mov
fiadd
jp
mov
es
(bad)
enter
xchg
fcom
ds
pop
nop
pop
sahf
test
call
push
rcl
dec
mov
retf
ror
(bad)
popa
cmp
jle
dec
loopne
inc
fisubr
push
push
addr16
das
jle
test
xchg
loopne
test
dec
mov
add
and
out
or
push
pop
sbb
call
ret
je
das
mov
mov
pop
popaw
sub
mov
push
pusha
xchg
into
push
mov
pop
or
pop
nop
inc
adc
(bad)
pop
lods
sub
mov
popf
or
outs
dec
inc
and
mov
jecxz
and
jle
cmp
(bad)
ficomp
daa
rcr
push
or
sub
lea
adc
test
fimul
loope
xchg
ret
nop
adc
out
ja
ja
xor
repnz
cmp
jo
repnz
pop
push
jp
test
sbb
popf
adc
ss
add
sub
jp
mov
push
or
add
mov
sub
add
dec
into
dec
adc
push
add
add
xchg
outs
push
iret
js
jbe
fiadd
push
fisubr
mov
push
arpl
fiadd
adc
test
add
ret
popa
add
sub
inc
mov
adc
jle
mov
es
loopne
adc
cs
inc
shl
retf
jb
cmp
loopne
shl
cmp
nop
add
jnp
jp
jp
adc
fsubp
adc
inc
or
push
add
mov
outs
jmp
out
or
add
jmp
push
mov
push
cli
aas
mov
xchg
test
fidivr
xor
dec
sub
iret
xor
inc
ret
outs
(bad)
out
bound
mov
inc
inc
out
mov
and
test
adc
mov
jmp
push
scas
cli
xchg
pop
outs
jmp
xor
add
dec
and
push
dec
bound
jbe
push
push
repz
inc
loop
xchg
shr
mov
loop
popf
xchg
adc
pop
sbb
mov
je
push
shl
(bad)
push
jo
and
ds
fadd
ror
fidivr
xor
jne
(bad)
jbe
add
jecxz
ss
xchg
popa
and
add
and
shl
mov
mov
daa
(bad)
cs
sbb
dec
cmp
ret
sbb
add
ret
jle
out
add
or
push
cmps
or
push
sbb
sub
pop
stos
shl
jmp
scas
and
and
dec
mov
sbb
add
sub
and
leave
or
outs
xor
ret
xchg
addr16
loope
jb
cli
xor
aam
add
ret
ror
stos
jb
scas
adc
ret
arpl
cli
cmp
xchg
fucomip
dec
popa
in
(bad)
and
pusha
dec
(bad)
mov
add
dec
push
(bad)
adc
xchg
cmp
sub
jo
add
pop
push
add
sub
xor
into
inc
stos
sub
push
pop
daa
pushf
add
rcr
or
bound
dec
and
mov
xchg
mov
inc
dec
and
call
ss
sbb
and
cmp
push
mov
jmp
inc
out
fs
ret
js
scas
xchg
dec
xor
sub
pop
fidivr
xor
inc
ds
ss
add
ds
hlt
sbb
xor
test
out
(bad)
xchg
push
fcmovb
outs
push
mov
sub
and
fidiv
pop
aam
add
push
fs
push
mov
gs
jnp
mov
mov
lahf
adc
inc
cmp
pop
es
sbb
or
cmp
add
xchg
pop
and
fs
pop
push
mov
ficomp
or
pop
adc
dec
(bad)
inc
add
dec
outs
pop
dec
mov
pop
out
sub
xchg
scas
into
jmp
mov
into
and
or
adc
mov
sbb
adc
cmp
repnz
rcl
cs
xchg
ret
mov
into
fstp
jb
cmp
and
or
sbb
push
push
aaa
mov
call
push
(bad)
cli
xchg
mov
lock
cmp
cmps
cdq
gs
cmp
scas
push
adc
dec
and
cmp
push
cmps
push
push
or
(bad)
(bad)
push
into
mov
out
outs
retf
mov
sar
xchg
ret
push
pop
add
xchg
das
or
les
sahf
out
jmp
out
inc
mov
jbe
lock
inc
sbb
xchg
mov
nop
dec
into
repnz
lods
rcl
jecxz
inc
outs
push
cvttps2pi
dec
je
push
xchg
ss
inc
cmp
mov
xor
sbb
adc
pop
(bad)
dec
mov
inc
test
popa
sub
ret
fcomp
add
(bad)
ss
(bad)
shr
pushfw
mov
stos
shl
xor
add
fdiv
scas
or
pop
or
add
jmp
add
inc
mov
retf
adc
dec
inc
retf
push
popa
outs
pop
call
mov
mov
inc
ds
or
sub
jmp
pop
(bad)
arpl
or
repnz
xchg
adc
mov
sbb
mov
sahf
mov
js
add
(bad)
and
pop
inc
add
test
cmp
mov
nop
adc
push
cdq
xor
inc
jb
into
inc
xor
xor
mov
cmp
jle
rcl
add
daa
scas
dec
dec
pop
push
mov
out
push
and
or
retf
js
xor
mov
inc
sub
ja
xor
(bad)
dec
push
cmps
or
shl
adc
sbb
sub
xchg
jmp
repnz
cmp
jo
dec
jb
adc
jno
loop
mov
and
movs
(bad)
push
inc
loope
(bad)
fs
adc
pop
pop
(bad)
test
fdivr
sbb
push
test
out
mov
or
outs
jb
xor
mul
ret
sbb
sbb
mov
aaa
fiadd
shr
stos
fidiv
jg
(bad)
dec
repnz
push
ret
(bad)
enter
xor
pop
pop
push
mov
pop
push
push
sahf
xchg
rol
dec
rol
mov
and
xchg
mov
mov
outs
dec
or
js
or
adc
mul
jmp
xchg
or
jle
mov
xor
push
add
mov
daa
xor
push
shl
call
inc
inc
pushf
or
or
fnstsw
sub
jle
aad
sbb
fimul
in
test
sub
mov
mov
push
fwait
gs
hlt
test
cmps
mov
add
dec
or
outs
push
or
adc
adc
pop
or
fistp
pop
cs
test
dec
stos
cmp
fimul
arpl
call
mov
es
dec
jge
das
es
or
jno
fsubp
mov
cmp
xchg
mov
repnz
lock
ins
pusha
jp
addr16
sub
(bad)
shl
push
retf
icebp
(bad)
sbb
inc
mov
ret
add
xor
inc
adc
enter
xchg
inc
fsubrp
and
inc
xor
(bad)
cmp
push
jo
cli
cmps
mov
fadd
jbe
push
ret
xchg
leave
push
dec
aam
push
xchg
push
push
xchg
cmp
call
sbb
push
into
xchg
sbb
jbe
mov
sbb
or
push
dec
lods
mov
scas
pop
rol
pop
jl
shr
push
inc
in
adc
add
call
sub
mov
and
or
mov
add
scas
data16
push
jle
mov
xor
pusha
inc
lea
xlat
ror
push
mov
push
push
xor
imul
dec
ds
(bad)
add
jmp
sbb
jb
rol
loope
jmp
push
inc
les
test
xchg
mov
ficom
out
add
call
xor
push
mov
mov
xchg
pushf
push
mov
push
rcl
push
out
sbb
inc
outs
inc
mov
push
inc
sub
cmp
dec
call
(bad)
xchg
es
cmp
mov
mov
mov
call
(bad)
out
mov
push
add
mov
sahf
out
test
mov
and
inc
push
jbe
jbe
icebp
mov
mov
jb
add
pop
cs
inc
call
inc
xchg
push
sbb
jle
xor
cmp
add
sbb
loop
add
adc
adc
mov
icebp
push
ss
and
pop
lods
test
sub
fs
add
test
sbb
into
push
xchg
mov
into
jb
push
test
loope
jecxz
call
mov
(bad)
and
pop
outs
jb
dec
adc
je
aas
mov
inc
xor
mov
xchg
mov
xchg
jo
jp
hlt
test
icebp
and
loopne
shl
cmps
pusha
pushf
cmc
xor
ficom
bswap
push
sub
shl
add
sbb
cs
inc
sbb
xchg
into
shl
or
mov
mov
inc
xor
jo
jmp
ret
mov
cmp
scas
mov
nop
adc
(bad)
mov
mov
mov
bound
movs
les
rcl
cli
push
mov
mul
jecxz
xchg
bound
adc
out
cli
cwde
xchg
fisub
mov
add
mov
add
inc
dec
sbb
sub
call
(bad)
dec
sbb
xor
xchg
(bad)
xchg
push
and
mov
and
ret
shl
loop
jmp
xor
jp
or
mov
lock
loopne
sbb
xchg
cmp
sbb
xor
mov
add
add
jle
push
sahf
cmp
xchg
push
out
inc
jecxz
(bad)
sbb
repnz
or
retf
push
mov
lods
xchg
jp
pop
add
push
jo
mov
mov
or
ret
or
jmp
add
sub
daa
jno
dec
dec
out
fisubr
push
or
popa
popa
(bad)
(bad)
and
and
add
pop
mov
pop
push
push
sub
xor
cli
inc
pop
dec
add
xor
mov
jp
loope
leave
xor
push
jge
pusha
mov
jg
jbe
add
and
das
pop
data16
sbb
cmp
push
mov
sbb
(bad)
adc
shl
push
mov
fistp
xchg
loopne
jo
inc
(bad)
out
add
test
sbb
push
inc
lea
adc
and
jle
mov
push
or
es
xchg
cmp
sub
retfw
and
into
sidtd
js
fimul
mov
xchg
push
pop
jecxz
je
cmp
(bad)
call
pop
sahf
mov
sbb
rol
ss
into
cli
xchg
pop
or
fimul
jp
adc
xor
gs
add
push
cmp
mov
sbb
sub
ret
xor
retf
rol
es
(bad)
or
repz
cmp
aas
out
lock
xchg
dec
xchg
dec
or
(bad)
xor
adc
pop
call
imul
mov
lock
mov
mov
cmp
es
out
mov
icebp
mov
xchg
cmp
xchg
cmp
xchg
dec
cmps
jmp
push
cli
dec
movs
add
aaa
jle
add
loope
push
and
push
psubsw
iret
adc
mov
sar
hlt
mov
mov
les
xchg
mov
mov
and
cmp
and
pusha
mov
inc
and
mov
fs
lock
das
shl
or
sbb
dec
sbb
pop
add
add
add
pop
adc
inc
out
cmps
push
dec
pop
dec
dec
push
pop
mov
inc
pop
pop
jle
push
sbb
cwde
ror
push
sub
adc
sub
ficom
sbb
imul
xchg
dec
xchg
push
scas
jb
imul
inc
repnz
cmps
dec
push
push
fiadd
push
ret
cmp
(bad)
call
daa
inc
xor
and
mov
retf
cmp
shl
rcl
ds
fisubr
jo
pop
and
pusha
out
jbe
adc
adc
ds
aam
les
sahf
cs
inc
lock
pop
test
or
add
lds
jp
call
jbe
fsub
and
out
inc
push
lock
push
pushf
(bad)
cli
into
enter
lods
repnz
jle
jno
je
fidivr
iret
and
dec
jb
nop
jp
push
nop
sbb
fld
jmp
adc
push
ret
xchg
push
mov
dec
leave
dec
pop
jecxz
cmp
xchg
xchg
and
arpl
cmp
push
sub
push
stos
dec
dec
lea
mov
jb
das
mov
sar
inc
punpckhdq
add
fs
mul
call
xchg
inc
iret
outs
js
cmps
add
ins
fadd
mov
ins
sub
or
push
push
mov
fs
shl
ret
pop
mov
jp
push
jb
add
in
ror
pop
mov
je
push
ret
pop
sbb
mov
enter
adc
aas
add
ss
jb
adc
mov
sub
or
cli
add
sub
pop
cmp
repnz
movs
mov
mov
pusha
mov
adc
inc
out
sub
add
sub
pusha
jecxz
xor
ret
cs
lock
cli
into
scas
ret
dec
and
ss
js
jbe
push
mov
jbe
outs
add
das
rol
pop
das
jl
push
ds
repnz
stos
fisubr
cmp
mov
sbb
test
xchg
(bad)
cmp
push
cmc
mov
sub
xchg
call
push
pop
fimul
bound
jo
loopne
and
inc
inc
outs
jb
add
sar
into
cs
jp
pop
sbb
push
out
outs
ss
enter
mov
or
scas
pop
cmp
jmp
xor
and
bound
retf
ficomp
and
dec
mov
add
out
push
into
push
mov
nop
loop
(bad)
aad
jp
dec
xchg
pusha
push
sbb
cmp
adc
push
popa
ret
sub
ror
jle
popf
movs
ret
and
and
or
xchg
bound
push
mov
jp
push
mov
ret
mov
dec
jecxz
sbb
jbe
and
lock
(bad)
pop
call
stos
fs
inc
jmp
or
pop
mov
mov
inc
add
jo
or
mov
push
mov
popf
sahf
adc
jo
shl
imul
shl
cs
shr
mov
push
jo
stos
in
ds
jecxz
hlt
add
add
rcl
sbb
mov
or
ds
mov
cmp
cmp
inc
ds
xchg
ror
sub
gs
cmp
cmp
push
ds
jmp
sbb
or
push
inc
js
pop
add
ds
push
sbb
cmps
ficomp
sub
divps
retf
les
retf
cmps
push
in
inc
data16
adc
pop
dec
mov
inc
mov
mov
loopne
inc
pop
push
(bad)
into
dec
cmp
sbb
add
repz
mov
and
jmp
mov
es
mov
add
das
mov
shr
push
loop
das
add
dec
sub
loopne
or
push
mov
sahf
mov
outs
js
lods
mov
imul
sbb
cmps
cwde
push
xor
mov
adc
push
out
push
not
mov
popf
dec
ss
daa
or
jg
loope
dec
sbb
cli
sbb
mov
push
cmp
inc
dec
inc
add
enter
bound
lods
lea
pop
add
pop
push
add
push
xchg
ret
mov
loopne
xor
test
(bad)
gs
pop
into
push
cmp
xchg
add
sar
dec
sahf
outs
and
bnd
mov
icebp
mov
ret
pop
or
dec
lea
rcl
cs
xchg
dec
xchg
(bad)
or
sti
nop
push
cs
mov
add
inc
adc
push
mov
dec
jnp
and
hlt
into
add
(bad)
daa
mov
add
adc
jo
out
push
mov
inc
mov
xchg
faddp
sub
mov
sub
es
dec
and
into
or
or
mov
xchg
sub
pop
call
fimul
and
popf
mov
xchg
xchg
adc
pop
ficomp
cmp
jbe
push
adc
cmp
(bad)
retf
adc
sbb
add
nop
into
into
push
mov
dec
addr16
sub
mov
pop
push
lods
add
dec
aam
inc
cmp
cli
bound
push
sub
mov
dec
push
mov
ret
pop
inc
inc
dec
xchg
cmp
and
adc
scas
and
movs
xchg
xchg
and
cmps
sbb
jle
jbe
xchg
or
mov
mov
push
outs
not
jo
cmc
mov
xlat
mov
xchg
cmp
mov
shl
xor
cwde
cwde
js
adc
call
inc
push
xor
pop
push
jmp
add
fdivp
ret
add
loopne
pop
cli
mov
dec
and
mov
ror
lods
push
outs
ds
mov
xor
push
or
mov
push
pop
mov
pop
mov
sub
cmps
mov
fimul
push
and
enter
push
and
mov
pop
mov
sub
jmp
sbb
pushw
adc
pusha
xor
mov
sbb
jbe
retf
gs
jle
or
lods
gs
dec
loopne
(bad)
mov
imul
rol
cli
cwde
ret
adc
push
jp
xor
xor
sub
nop
pop
xor
and
xchg
(bad)
inc
loopne
es
cs
(bad)
nop
inc
pop
sbb
mov
(bad)
sbb
popf
push
cli
add
es
push
mov
mov
mov
into
mov
push
add
bound
pop
and
pusha
loope
jmp
mov
popa
inc
cmp
out
push
push
lea
or
call
pusha
imul
(bad)
repnz
mov
and
lock
ret
ficom
pop
jnp
lahf
(bad)
xchg
out
clc
add
arpl
loop
xchg
inc
test
push
mov
test
or
ins
inc
mov
hlt
lock
adc
jbe
add
test
mov
jmp
mov
jp
shl
hlt
mov
cmp
mov
add
enter
dec
ins
pop
scas
cmp
dec
pop
mov
ror
cmps
mov
loop
inc
pop
ficom
(bad)
jo
mov
rcl
mov
mov
jl
out
call
inc
fisubr
cmp
shl
mov
xchg
pop
mov
or
sbb
mov
outs
(bad)
loop
fadd
es
push
daa
jmp
sub
pop
sub
cmp
or
pushf
sub
jmp
imul
mov
push
or
jmp
mov
icebp
movs
mov
pusha
stos
xchg
js
pop
sbb
push
fldcw
pop
(bad)
outs
push
mov
das
cmp
ret
cmp
add
inc
sbb
add
jecxz
pusha
popa
mov
sub
inc
pop
mov
adc
ret
mov
ds
adc
sbb
loop
add
jle
mov
add
and
inc
add
and
push
cmp
daa
mov
mov
sbb
stos
mov
pushf
adc
int3
inc
das
es
mov
pusha
push
nop
test
mov
xlat
inc
push
sub
adc
push
adc
bound
test
xchg
xchg
jbe
pop
mov
xchg
pop
mov
jmp
push
lea
es
enter
xchg
add
inc
xor
add
mov
mov
call
push
enter
repnz
clc
mov
push
jle
loope
pop
arpl
(bad)
mov
sahf
movs
xchg
inc
lock
bnd
pop
lea
(bad)
outs
aaa
and
adc
inc
jae
enter
sbb
sbb
push
retf
or
cli
hlt
mov
sub
add
adc
retf
push
fiadd
outs
add
out
add
adc
mov
in
mov
adc
or
sahf
mov
sub
mov
jmp
addr16
sbb
push
xchg
jno
push
daa
jb
sbb
pop
jb
js
and
cli
pop
arpl
dec
adc
push
(bad)
xchg
cmp
popa
repz
dec
or
into
sbb
push
lea
jo
imul
or
add
inc
jmp
mov
adc
xor
fst
call
cmp
ss
jbe
dec
mov
in
es
push
ss
retf
dec
jp
add
das
push
push
jo
add
mov
push
push
es
cs
lock
lahf
fiadd
xchg
push
push
sbb
xchg
xor
mov
int
pop
cmp
pusha
dec
adc
dec
aas
xchg
xor
sub
mov
jb
mov
cwde
push
jmp
out
push
loope
jmp
cmp
pop
xchg
fidiv
aam
xchg
xchg
jne
mov
fsubr
clc
stos
sbb
mov
push
jp
xchg
pop
data16
push
ds
pushf
push
ret
ficom
sub
push
mov
outs
dec
dec
sbb
or
imul
xor
xchg
jg
inc
or
cli
mov
sbb
pushw
mov
cmp
rcr
rcr
xor
loopne
dec
push
test
mov
sbb
into
xor
xchg
jb
neg
pop
push
scas
cwde
cmc
ins
call
inc
adc
and
pop
loop
mov
push
loop
add
call
js
push
das
push
(bad)
pusha
out
icebp
sbb
div
dec
sub
cmc
outs
dec
mov
mov
dec
jne
jp
sbb
inc
aam
sub
neg
sbb
sar
mov
xor
scas
adc
push
sahf
outs
fs
ret
jmp
mov
cdq
inc
dec
xchg
pop
data16
push
cwde
mov
movs
ret
or
and
and
and
add
packssdw
or
outs
push
inc
and
test
mov
push
sub
sub
shl
into
jp
push
xor
inc
adc
push
sbb
or
or
push
inc
xor
stos
jecxz
mov
jp
cmp
repnz
xchg
adc
xor
mov
xlat
adc
mov
xchg
ror
or
xchg
add
pop
shr
dec
jbe
ret
sub
jne
jo
(bad)
push
out
les
and
leave
pushf
jbe
mov
(bad)
adc
and
and
push
dec
pop
mov
or
adc
inc
or
fstp
shl
lahf
retf
pusha
adc
or
or
shl
push
and
arpl
mov
xchg
xor
shl
mov
xor
add
cmp
ds
mov
jo
test
dec
fisub
cli
add
push
(bad)
mov
xor
ret
rol
je
xchg
repnz
sub
xchg
test
inc
push
dec
or
push
xor
jbe
or
mov
push
ret
mov
bound
test
call
or
xor
out
sahf
mov
or
and
cmp
mov
repz
out
call
push
cs
jne
add
pusha
mov
(bad)
sbb
mov
mov
mov
mov
jne
out
stos
xchg
xchg
test
push
add
sahf
ror
xchg
les
xor
push
push
xor
mov
inc
add
test
repz
or
js
das
mov
or
aas
repnz
sub
ret
dec
pop
xor
inc
out
(bad)
call
stos
sahf
mov
bound
mov
dec
idiv
xor
jo
int3
imul
movs
ret
xchg
add
mov
lods
aaa
outs
bound
adc
out
adc
ret
jmp
(bad)
dec
push
loopne
rcl
pop
mov
add
rol
fimul
jmp
pop
pop
push
dec
sbb
cli
jbe
rcl
es
xchg
adc
xchg
push
dec
sbb
cmp
push
xor
pop
fcmovu
push
xchg
dec
xor
xor
rol
ss
outs
retf
mov
push
(bad)
sbb
adc
push
data16
repnz
dec
mov
cwde
mov
faddp
adc
cmp
xchg
aam
(bad)
or
dec
popa
cmp
push
cmp
into
fiadd
jp
jmp
fnstsw
or
sbb
add
movs
in
inc
jmp
jb
sbb
outs
lahf
jo
adc
and
or
aas
call
ret
sub
mov
test
add
mov
lods
mov
inc
add
jmp
sahf
jbe
sbb
xor
retf
(bad)
rcr
cmp
and
xor
jb
or
cdq
adc
fidiv
push
arpl
or
popa
add
scas
rcl
inc
(bad)
sub
call
mov
mov
rol
daa
jbe
add
xor
ret
bound
and
mov
cli
into
cmps
mov
stos
pop
cmp
rol
pop
or
xor
or
bound
add
cdq
jne
mov
imul
jmp
push
(bad)
loopne
ficomp
sbb
inc
ret
xor
cmp
dec
jo
and
retf
ds
pop
cmc
cmp
cmps
scas
inc
and
sbb
movs
popa
xchg
cs
mov
wrmsr
mov
adc
adc
push
adc
push
(bad)
push
sar
cmps
xor
sub
adc
cmps
es
out
or
add
dec
add
push
outs
jle
cmp
daa
sbb
scas
push
ss
or
push
js
pop
xchg
fisttp
dec
jp
ror
push
jle
or
(bad)
ja
mov
inc
sbb
pop
ret
xor
movlps
jp
ret
les
pop
or
xchg
push
pusha
or
inc
mov
mov
(bad)
outs
xchg
ret
xchg
movs
xchg
jmp
push
retf
pop
or
inc
and
scas
xor
sahf
or
(bad)
push
sub
loop
dec
bound
inc
dec
ret
arpl
pop
ss
adc
repnz
add
inc
xchg
and
pusha
stos
xchg
jne
mov
into
mov
xchg
inc
imul
xor
mov
rcl
mov
outs
cmp
mov
sbb
rol
and
mov
(bad)
xchg
add
fadd
mov
add
xor
pop
dec
jp
sub
mov
inc
sub
into
(bad)
and
mov
cmovs
dec
es
push
and
add
add
push
jmp
or
xchg
sbb
mov
push
mov
sub
jle
mov
popa
sahf
push
loop
adc
sar
loopne
and
(bad)
das
loop
push
xchg
or
or
out
adc
outs
jb
dec
or
jle
pop
cmp
arpl
dec
(bad)
mov
(bad)
(bad)
mov
mov
add
jle
cmp
add
sbb
mov
jecxz
rol
mov
aaa
dec
sahf
pop
inc
xor
fbld
in
mov
cmp
sub
add
sub
rcr
push
push
push
and
adc
jmp
cli
xor
arpl
inc
adc
aam
ret
push
mov
push
(bad)
inc
pop
mov
add
mov
mov
add
je
dec
cmp
ds
or
(bad)
jo
mov
ror
sub
loopne
imul
pusha
jb
inc
push
ins
lods
push
or
clc
dec
pop
sahf
adc
loop
inc
jp
push
(bad)
(bad)
push
sbb
adc
jbe
cmp
sbb
xor
repnz
mov
sahf
and
scas
fld
mov
mov
ror
jb
pop
xor
sbb
sbb
pop
clc
or
dec
mov
xchg
and
push
stos
xor
fiadd
xchg
sbb
xor
loop
cmps
and
ret
leave
push
jecxz
mov
or
shl
aam
sahf
mov
out
push
dec
xor
pop
sub
inc
sub
push
cmp
and
mov
nop
dec
push
add
ss
push
push
xor
xchg
repnz
dec
js
shl
lahf
inc
(bad)
icebp
jp
es
into
push
rcl
mov
shl
gs
mov
fimul
or
and
mov
(bad)
or
mov
mov
push
adc
call
push
jo
mov
pop
jg
xlat
pusha
out
punpckhdq
add
or
xchg
test
cdq
or
fiadd
cs
scas
mov
mov
sub
or
cmp
sbb
pop
sub
mov
and
cmp
jle
adc
div
or
sar
cs
bound
pop
test
jo
fsub
adc
adc
jle
sbb
xchg
jne
add
adc
into
loopne
ret
iret
(bad)
rol
dec
retf
mov
sti
cs
(bad)
or
push
push
push
cmp
aam
ret
loopne
rol
xor
cmps
pop
pop
sbb
push
or
nop
scas
call
repnz
push
jle
fwait
adc
ss
and
mov
jb
dec
into
pop
imul
push
xchg
cmp
jbe
ret
outs
inc
cwde
add
rol
push
cli
mov
or
pop
sub
and
mov
outs
adc
mov
xor
movs
adc
stos
(bad)
outs
rcl
push
cmp
cmps
xor
mov
aam
lea
into
jmp
push
jmp
int3
or
inc
add
xor
call
dec
xchg
fmulp
jb
retf
les
jle
cmp
fidivr
dec
add
(bad)
(bad)
ror
pushf
or
pop
cmp
mov
push
pop
adc
adc
(bad)
xor
inc
(bad)
xor
(bad)
aaa
(bad)
jp
cs
retf
(bad)
or
sub
sahf
adc
pusha
sub
xor
pop
cmps
xor
mov
adc
imul
mov
mov
add
or
xchg
push
push
test
movs
movs
xchg
mov
add
xchg
push
adc
fiadd
js
push
or
(bad)
mov
mov
pop
jp
mov
xor
push
fiadd
sub
sbb
repnz
dec
call
mov
ss
(bad)
(bad)
loop
mov
mov
inc
push
es
popa
add
jecxz
jle
data16
sbb
mov
push
aas
sub
jb
inc
enter
inc
inc
(bad)
mov
push
push
push
addr16
inc
mov
sahf
mov
and
(bad)
dec
stos
xor
jmp
das
arpl
or
call
rol
pop
jle
fs
adc
mov
jp
cs
and
outs
pop
adc
push
sbb
repnz
sbb
add
test
call
ret
or
xlat
dec
cmp
jp
jp
jnp
add
pop
mov
sbb
scas
sbb
push
out
or
mov
cmp
mov
add
imul
adc
retf
repnz
pop
push
jmp
and
(bad)
xchg
pop
rcr
or
add
jp
jb
scas
test
adc
daa
mov
inc
push
imul
xor
mov
mov
hlt
dec
gs
jmp
xchg
inc
lods
inc
pop
pop
inc
xchg
xchg
sbb
repnz
in
adc
push
mov
add
popf
sub
push
ss
pop
and
call
outs
dec
add
shr
and
jmp
test
arpl
fisubr
jecxz
dec
and
imul
xchg
repnz
or
call
retf
xor
jmp
or
sti
(bad)
push
lods
mov
sbb
sbb
fimul
bound
inc
aam
xor
push
pop
and
pushw
pop
or
xor
je
shr
cmp
adc
sbb
sbb
mov
fcomp
loop
es
arpl
or
mov
xor
add
dec
jbe
pop
add
in
xchg
imul
hlt
cmps
adc
not
loop
jecxz
mov
cwde
pop
push
cmp
call
sbb
sbb
xchg
dec
mov
out
pop
jb
push
pop
and
ss
bound
jp
add
mov
sub
or
mov
bound
pop
or
or
dec
mov
or
cs
xor
mov
scas
outs
fs
and
mov
or
pusha
push
cmp
sbb
call
push
enter
stos
es
js
sahf
adc
movs
xchg
fiadd
dec
xor
cmp
xchg
scas
es
loop
pop
dec
(bad)
les
test
test
mov
pusha
ret
ss
or
je
(bad)
mov
(bad)
call
retf
pop
fild
inc
pop
xchg
ficomp
jo
scas
mov
test
push
pop
inc
and
ret
lods
je
push
or
add
sbb
mov
adc
add
rol
jg
pop
mov
fs
bound
test
ret
jo
addr16
mov
jno
sbb
test
inc
sahf
inc
(bad)
into
test
jmp
add
outs
and
push
imul
popa
or
lods
mov
ins
loope
into
and
jecxz
jmp
xchg
cmp
cmp
test
stos
test
cwde
mov
sbb
(bad)
sbb
(bad)
fild
cs
jp
cmp
and
fs
cs
add
dec
or
inc
xchg
push
imul
adc
mov
enter
shr
cmp
push
fmul
add
mov
rcl
push
ds
ret
adc
jmp
loop
xchg
push
adc
dec
jmp
fistp
jbe
jb
mov
xchg
mov
or
adc
lods
ror
pop
mov
or
cli
(bad)
or
xchg
mov
daa
addr16
cmps
out
scas
jp
inc
or
inc
push
xor
xor
mov
adc
cmp
ds
mov
or
cmc
movs
and
push
and
pop
jb
xchg
enter
jmp
push
push
popa
sbb
(bad)
shl
adc
inc
push
jmp
dec
cs
fcmovb
(bad)
enter
adc
mov
es
aaa
repnz
in
dec
adc
xchg
jbe
mov
mov
cmp
lds
into
or
call
pusha
or
repnz
fisubr
push
jbe
adc
je
loope
cmp
jbe
in
inc
push
xchg
sahf
mov
jb
push
xchg
add
mov
lea
test
add
ds
dec
add
mov
aaa
(bad)
lahf
loop
or
(bad)
or
popa
out
mov
outs
fisub
mov
xchg
repnz
xor
cmps
cmp
or
neg
or
cmps
push
out
jp
adc
dec
iret
xchg
add
jo
xlat
(bad)
pusha
or
loopne
repnz
retf
push
mov
xor
rcr
mov
mov
cmp
jmp
stos
pop
dec
adc
push
test
mov
ds
and
out
ror
cmp
into
mov
inc
loop
mov
xor
jb
mov
movs
sub
call
xor
ja
movs
in
add
cmc
push
mov
or
adc
ds
retf
sbb
pop
pop
adc
pop
pop
ret
adc
inc
add
cmp
scas
adc
add
xchg
lahf
pusha
daa
or
sahf
retf
scas
sahf
and
push
xchg
scas
cs
imul
dec
sahf
xchg
lods
mov
stos
scas
mov
or
cmps
adc
add
mov
add
push
jle
xchg
mov
js
(bad)
ss
and
inc
inc
pusha
or
cmp
cmp
cmps
ret
dec
and
mov
shr
imul
outs
sub
inc
ds
out
idiv
pop
cmp
xchg
sar
push
stos
inc
pop
sahf
aas
jle
xchg
ret
(bad)
jmp
pop
xor
push
addr16
inc
push
sbb
and
push
push
xor
dec
dec
mov
or
mov
test
or
sahf
pop
mov
add
add
sub
scas
lods
popa
stos
adc
add
cmp
gs
sbb
pop
ret
outs
add
push
push
rol
shr
push
cli
(bad)
mov
sbb
cs
push
push
cwde
xor
push
cli
and
les
mov
shl
add
inc
push
(bad)
mov
mov
(bad)
pop
loope
ret
scas
fcomp
mov
jbe
popf
mov
stos
enter
or
adc
dec
call
xor
add
test
dec
inc
cmp
sub
inc
setbe
mov
jmp
adc
adc
sub
inc
fadd
rcl
mov
jne
add
or
mov
rcr
out
or
adc
push
or
inc
sbb
dec
cmps
shl
jle
mov
adc
push
fidivr
pop
adc
or
or
into
pop
pop
push
add
iret
and
dec
ret
fisubr
add
popa
mov
or
xchg
dec
pop
imul
pop
retf
dec
dec
push
ficom
add
out
sbb
(bad)
aas
retf
add
adc
jmp
les
(bad)
jle
add
aam
xchg
adc
sub
loop
jle
mov
test
dec
dec
cmp
xor
sub
jb
pop
int3
and
inc
push
mov
push
js
or
cs
test
push
bound
dec
cs
sbb
inc
sbb
test
jge
pop
out
pop
pop
scas
add
pop
jmp
fild
bound
gs
push
(bad)
dec
jo
dec
inc
cmp
arpl
sbb
sbb
push
cmps
add
cmp
mov
sar
mov
lea
popf
and
jp
js
pop
test
ds
retf
inc
ins
push
xor
adc
and
ds
aas
rcr
aaa
push
inc
enter
xchg
loop
clc
es
add
push
ret
je
inc
push
sub
push
and
retf
and
mov
cmp
add
mov
and
callw
mov
adc
mov
cmp
inc
sub
rol
xchg
ror
sub
sahf
push
lock
jbe
ror
mov
adc
xor
add
and
sbb
sub
add
jo
data16
sbb
inc
mov
dec
mov
push
inc
sub
sahf
and
mov
mov
inc
test
ret
xor
jp
add
cmps
xor
dec
mov
add
pop
js
pop
xor
test
loope
dec
fiadd
pop
pusha
xor
sub
push
(bad)
data16
dec
push
mov
add
or
pop
das
jle
mov
test
dec
inc
mov
mov
adc
or
jmp
pop
jle
push
push
add
sbb
prefetcht0
pop
das
into
adc
dec
jp
push
data16
mov
adc
mov
bound
fmul
cmp
jp
mov
sbb
push
pop
cmp
adc
mov
xlat
retf
es
or
sbb
mov
sub
jmp
loopne
xchg
cli
adc
rcl
imul
pop
shl
or
cmp
adc
jb
xor
(bad)
jne
inc
mov
ret
add
xchg
shr
push
data16
mov
ds
push
push
add
jb
mov
mul
leave
jo
and
jns
mov
mov
pop
add
sbb
movs
xor
stos
ret
push
das
ret
scas
push
dec
sbb
pop
cs
adc
es
xchg
js
xchg
dec
add
push
rcr
dec
ror
and
or
arpl
sar
and
dec
pushw
imul
mov
and
into
jle
(bad)
pop
shl
and
push
sti
jmp
inc
dec
or
inc
into
ror
push
pop
das
pusha
mov
push
xor
jb
bound
cmps
into
inc
mov
cmp
pop
sub
push
outs
xor
div
inc
rol
xor
aas
jmp
xchg
add
push
(bad)
xchg
or
iret
adc
mov
and
data16
add
cmps
dec
pusha
pop
or
adc
cmp
cli
dec
scas
daa
mov
(bad)
and
adc
jno
(bad)
and
xor
sbb
add
xchg
ror
cdq
jb
fiadd
pop
and
sub
and
ficom
lods
mov
into
nop
mov
ss
sbb
sbb
ja
iret
dec
sbb
js
scas
sbb
mov
shr
sbb
inc
ret
loope
xor
push
popf
sub
loopne
adc
jb
cwde
sbb
neg
fmul
shr
je
in
add
fisubr
inc
push
or
dec
cmps
iret
pop
(bad)
dec
cmps
sbb
dec
push
jmp
mov
add
xchg
inc
mov
test
cmp
sbb
fst
pop
push
bound
or
shr
adc
jecxz
(bad)
sbb
push
sbb
out
rcr
dec
and
jmp
mov
push
dec
mov
loopne
(bad)
out
mov
add
ret
push
loopne
and
mov
sbb
cmps
and
mov
and
and
mov
aaa
cmps
cmp
push
mov
pop
cmp
js
add
pop
outs
and
nop
dec
pop
add
ds
es
cs
sbb
push
js
xchg
into
adc
mov
inc
dec
add
rol
lods
inc
jo
sahf
mov
dec
ret
loop
dec
mov
mov
sbb
rol
cmp
out
sub
dec
mov
or
popf
and
inc
cmp
pop
xchg
cmp
sahf
mov
pop
daa
pop
adc
xchg
(bad)
adc
pop
(bad)
pusha
dec
xor
(bad)
pop
mov
inc
test
jbe
inc
sub
call
push
cwde
mov
enter
push
xchg
sub
cmp
or
mov
popa
imul
pop
mov
cmp
pop
lock
rcl
xor
test
scas
adc
mul
scas
and
mov
mov
lods
aas
cli
(bad)
cmp
mov
sahf
shl
mov
bound
mov
(bad)
sub
or
dec
sahf
push
aad
and
(bad)
(bad)
(bad)
cdq
mov
retf
mov
mov
mov
mov
pop
pop
pop
mov
lods
mov
push
push
ficom
add
dec
xor
pop
or
fcom
jmp
(bad)
sti
sub
cmp
mov
daa
jmp
dec
pop
or
sbb
dec
sbb
or
out
dec
inc
daa
xchg
outs
data16
ret
mov
or
js
scas
pop
pop
pop
cmp
inc
outs
jecxz
push
cmp
mov
mov
push
xor
cs
daa
daa
mov
(bad)
outs
jecxz
or
and
mov
xor
sub
sub
inc
xor
bound
cs
add
imul
jbe
push
out
rcr
mov
mov
xchg
data16
adc
and
pop
mov
pop
xchg
scas
ror
fld
jno
jb
xchg
cmp
stos
push
test
scas
into
(bad)
jne
or
outs
cs
fisub
ror
sub
push
icebp
cmp
jle
out
cs
jo
bound
add
lods
xchg
inc
mov
into
xor
add
and
inc
scas
pop
add
xchg
(bad)
mov
inc
jp
add
adc
sar
lea
mov
pop
ret
out
and
and
aaa
pop
lods
adc
sub
push
adc
xchg
push
push
and
rol
sub
aam
mov
cmps
xor
add
arpl
mov
outs
ss
sub
cmps
fcmovb
sbb
xchg
cmp
adc
and
inc
push
mov
add
jp
test
mov
mov
fisub
or
jb
or
mov
add
mul
loop
add
(bad)
shr
push
call
out
test
mov
push
scas
in
sub
push
push
xlat
or
xchg
arpl
push
xchg
cmp
or
pop
sbb
ret
pop
into
mov
mov
adc
push
and
inc
mov
or
pop
dec
ret
xor
scas
outs
cmp
(bad)
jmp
jb
xor
jno
mov
push
ss
mov
iret
or
adc
cli
dec
pop
push
mov
ds
pop
mov
xchg
out
cmp
jp
fidivr
popa
pusha
int
xchg
or
and
popa
fdivr
movs
xchg
sbb
mov
ret
xchg
xchg
sub
call
movs
ficom
inc
test
rol
sbb
and
imul
adc
ret
(bad)
or
out
ss
add
mov
inc
sbb
outs
sbb
lock
push
pop
jb
xchg
xchg
ret
or
xchg
pop
scas
xlat
ret
jb
jb
and
xor
push
rcr
(bad)
ds
cwde
rol
fidivr
sbb
mov
push
adc
shl
or
sbb
dec
fisub
or
add
pop
mov
fadd
cmp
add
or
push
push
xchg
add
ds
dec
cmp
or
(bad)
pop
add
inc
call
push
dec
xor
dec
jno
mov
cmp
dec
xchg
push
pop
cs
push
sub
push
data16
cmp
scas
(bad)
sbb
bound
nop
or
add
and
ds
pop
sbb
pusha
and
bound
mov
add
pop
add
pop
xor
test
mov
mov
rcl
mov
ret
mov
mov
sbb
dec
punpckhdq
mov
xor
mov
xchg
mov
sbb
cmps
faddp
add
mov
xlat
adc
mov
retf
test
mov
push
cmc
xor
ds
or
push
or
sbb
and
dec
push
clc
test
push
ret
ficomp
call
cdq
xchg
sahf
cmps
sbb
js
(bad)
cmp
sar
js
xchg
ror
imul
outs
shl
das
mov
dec
pop
je
pusha
or
sahf
jbe
cmp
xor
adc
cmp
cmp
sahf
jmp
cmp
pop
push
push
mov
sub
xchg
push
pop
sti
mov
mov
inc
inc
dec
(bad)
scas
mov
pop
mov
jbe
jb
inc
(bad)
div
(bad)
call
scas
pop
imul
cdq
sbb
mov
xchg
test
lods
ret
ret
in
test
sahf
mov
lock
(bad)
mov
xor
pop
add
into
sbb
add
jmp
cs
jp
cmp
add
call
jnp
test
add
adc
inc
push
and
into
fdiv
push
sbb
and
(bad)
dec
pusha
inc
call
outs
push
popa
dec
call
jne
hlt
push
inc
cmp
sbb
arpl
(bad)
mov
jle
sub
sbb
xor
cmp
(bad)
ficomp
scas
jle
push
test
(bad)
jb
rol
push
dec
ficomp
daa
call
retf
cmp
sahf
mov
sbb
(bad)
mov
push
cmp
mov
push
and
mov
or
cmps
(bad)
rol
pop
mov
add
leave
cdq
pop
ret
popa
or
pop
add
xor
dec
stos
cs
lock
push
jp
mov
sahf
jle
int3
adc
fisubr
jmp
bound
inc
mov
mov
or
xchg
popa
div
out
and
add
cmp
pop
cmp
mov
cmps
ss
mov
xor
inc
scas
hlt
rcl
bound
jbe
lods
test
and
ins
mov
adc
outs
add
cmp
in
ror
cs
or
or
mov
(bad)
and
fst
dec
mov
movs
or
scas
sahf
sbb
xchg
dec
movs
xor
mov
inc
sub
sbb
mov
dec
and
cmps
test
xchg
add
dec
mov
mov
dec
je
idiv
jne
es
dec
ja
pop
dec
call
cwde
rcl
jb
dec
jbe
inc
inc
pop
rcr
inc
sahf
dec
sbb
adc
add
push
sahf
push
add
or
lock
data16
(bad)
leave
xchg
jp
sub
jle
rcr
dec
loope
cmps
out
or
mov
mov
jmp
test
adc
test
dec
rcr
xchg
sbb
add
es
outs
dec
xchg
js
adc
mov
sub
jmp
inc
add
mov
and
into
xchg
push
call
ret
ret
lods
xlat
add
cmc
test
mov
hlt
(bad)
push
(bad)
nop
inc
imul
push
dec
cmps
cs
ja
push
jno
sbb
xor
adc
mov
sbb
pop
inc
push
outs
ret
popa
retf
add
inc
arpl
pop
movs
xor
cs
cmp
mov
rol
push
jmp
outs
ds
fldcw
fdivp
push
ret
jne
mov
or
gs
add
dec
jle
inc
test
dec
adc
call
sahf
xchg
push
xchg
clc
out
ins
and
out
stos
popa
push
add
push
or
into
test
sbb
mov
bound
test
in
jmp
xor
movs
ror
fidivr
lock
xor
sub
xor
outs
jle
or
adc
ficomp
pop
sahf
mov
inc
addr16
test
ret
(bad)
jnp
push
cmp
cli
dec
je
leave
push
ffreep
fsub
mov
outs
push
pushf
lea
sub
or
inc
arpl
push
xchg
int3
or
es
outs
mov
pop
add
test
push
call
adc
test
cmp
dec
sbb
cmp
out
inc
mov
dec
cmp
test
xchg
xchg
into
push
scas
pop
or
or
push
sahf
mov
mul
test
pop
jmp
jno
stos
push
cmp
shl
cmps
push
loop
cmps
add
mov
ds
pop
sub
out
mov
js
add
sub
or
leave
arpl
cmp
adc
leave
lods
sub
out
add
cmp
jmp
sub
inc
adc
aam
jne
shl
outs
adc
lock
push
or
sbb
out
push
shl
xchg
push
and
inc
or
and
or
dec
xchg
mov
jno
lea
mov
cmp
movlps
push
scas
xor
sahf
test
and
adc
sub
outs
inc
sahf
cmps
push
sahf
adc
shl
xchg
sub
mov
inc
push
iret
xchg
dec
push
sbb
bound
add
pop
pop
es
or
add
push
push
jle
adc
es
es
outs
into
add
xchg
shl
inc
xchg
daa
sbb
add
fstp
outs
sbb
mov
pushf
es
jo
shl
inc
jle
call
pusha
nop
jmp
(bad)
cs
into
xchg
xor
pop
push
or
xor
into
add
sub
cmp
dec
sub
inc
sbb
push
xchg
or
cmps
pop
cli
sub
and
sub
cs
outs
pop
sahf
jb
(bad)
cdq
xor
mov
inc
pop
sahf
add
mov
outs
jae
adc
cmc
test
scas
mov
sbb
sbb
data16
adc
or
and
jnp
sub
push
cdq
sbb
out
imul
fwait
mov
pusha
and
mov
or
jmp
inc
cmp
sub
sbb
enter
out
retf
xchg
cmc
pop
sbb
sub
jle
ror
ss
add
jmp
sbb
mov
cmp
dec
add
(bad)
mov
(bad)
cs
pop
add
retf
mov
addr16
push
sbb
xchg
sahf
xor
pop
pop
clc
push
add
fs
mov
mov
push
and
adc
(bad)
mov
xor
sbb
xor
and
pop
mov
pop
loop
mov
adc
mov
push
loope
test
outs
repnz
cli
out
sbb
push
jmp
push
mov
into
push
xchg
bound
bound
cs
push
or
(bad)
adc
mov
dec
ror
xor
push
scas
add
dec
(bad)
cs
cdq
or
stos
scas
cmp
or
rol
pop
mov
or
push
ret
(bad)
movs
inc
xor
cmps
sahf
pop
xor
dec
mov
jno
cli
push
xor
sub
push
data16
mov
dec
mov
sub
dec
ret
or
arpl
pop
cmp
icebp
and
add
sbb
dec
rcr
push
inc
pop
scas
dec
xchg
lods
lea
jo
dec
cs
les
xchg
and
sbb
xor
mov
adc
jnp
xchg
sahf
sub
dec
out
dec
mov
inc
dec
xor
push
and
mov
add
and
repnz
dec
xchg
ret
xchg
sbb
add
shl
adc
xor
out
imul
xor
sahf
ds
adc
adc
or
call
ss
jo
adc
loop
mov
adc
inc
inc
push
dec
ret
data16
or
inc
daa
dec
mov
scas
outs
retf
dec
xor
retf
pop
ret
jnp
inc
or
rol
xchg
ficomp
es
push
test
dec
sub
les
fiadd
add
call
xor
xor
pop
outs
jno
sahf
cmps
out
jle
lods
mov
scas
add
test
call
cmp
cs
js
test
mov
mov
adc
cdq
mov
xchg
pop
and
and
fs
(bad)
jmp
inc
sub
test
add
ja
jp
mov
retf
outs
leave
imul
arpl
pop
pop
and
inc
pop
add
push
pop
rol
cmps
or
sbb
xor
xor
push
cmp
or
cmp
out
mov
fimul
shl
je
adc
add
imul
pop
mov
dec
sti
push
jbe
cdq
test
dec
sbb
leave
js
dec
mov
xor
fcmovbe
inc
bound
xor
or
push
or
pop
sbb
sub
adc
add
mov
add
sbb
pop
cmp
arpl
arpl
add
adc
and
scas
rcr
xchg
fs
stos
mov
jo
hlt
es
sbb
add
xlat
add
push
mov
retf
push
push
sbb
and
loop
ret
call
xor
in
jbe
(bad)
xchg
push
inc
mov
fld
add
jmp
jb
sbb
mov
mov
mov
xchg
jg
sub
jmp
xor
bnd
adc
mov
mov
jo
pusha
or
or
rol
into
mov
shl
data16
dec
icebp
mov
dec
push
and
xor
push
mov
and
in
out
or
outs
bound
(bad)
js
xchg
push
xchg
mov
sbb
pop
push
(bad)
cli
and
das
add
push
imul
dec
mov
pop
and
(bad)
test
test
enter
aam
inc
sbb
mov
xchg
out
inc
or
push
aam
test
jb
sbb
scas
jp
mov
fs
pop
push
movs
or
or
js
fsubr
cli
add
jmp
(bad)
retf
and
xchg
(bad)
push
jmp
enter
ret
xchg
ja
outs
dec
add
fs
loopne
(bad)
mov
shl
sbb
scas
xchg
inc
ret
cmps
mov
push
xchg
mov
or
movs
mov
and
dec
adc
stos
mov
sbb
sub
out
add
(bad)
repnz
inc
sub
mov
add
add
adc
movs
xor
test
and
xchg
int3
or
movups
and
or
add
popa
retf
es
movs
pop
mov
nop
fiadd
xchg
shl
fild
inc
(bad)
and
pop
nop
mov
dec
hlt
ss
mov
adc
and
sbb
pop
into
xlat
mov
ds
mov
sub
add
(bad)
retf
out
pop
or
(bad)
mov
sbb
sbb
sbb
xor
jb
(bad)
retf
dec
xchg
sub
out
cmps
mov
xchg
cmc
dec
add
xchg
repnz
dec
lea
psubusw
call
shr
clc
fisubr
sbb
fidivr
lea
adc
ret
outs
sub
mov
jle
xchg
ret
mov
adc
cmp
adc
ret
add
je
jp
sub
or
out
mov
or
sar
(bad)
mov
mov
repnz
push
movs
rol
or
xchg
mov
fld
inc
jb
inc
sahf
(bad)
retf
mov
push
inc
scas
sub
into
fwait
and
add
test
adc
mov
inc
push
mov
inc
not
add
push
push
sub
push
dec
inc
mov
sbb
mov
push
ret
mov
sbb
push
lahf
and
xchg
xor
pop
data16
push
imul
xchg
xchg
cdq
pusha
lock
sub
jno
jle
xor
cmp
dec
jle
add
cli
into
cmps
lds
pop
fisubr
mov
jbe
add
inc
pop
call
imul
jmp
mov
add
add
test
js
mov
movs
pusha
cli
repnz
push
das
or
cmp
arpl
sbb
inc
xchg
adc
cmp
loope
cmp
shl
retf
xchg
or
popf
test
imul
dec
mov
je
or
out
dec
test
add
das
inc
xchg
add
out
pop
jne
xchg
cmps
or
add
adc
adc
popa
xor
inc
pop
cli
mov
add
dec
xchg
inc
mov
shl
les
fisubr
mov
rcr
retf
and
xor
xor
jge
mov
pop
mov
jmp
scas
hlt
pop
fwait
xor
fcmovu
sub
jbe
into
sub
dec
pop
and
xchg
push
outs
arpl
bound
push
fmulp
inc
or
jne
and
and
jp
fstp
sahf
cs
out
push
xor
pop
adc
and
rcl
int3
loop
bound
enter
mov
xchg
sbb
pop
fwait
pop
inc
ret
sbb
(bad)
out
into
(bad)
cwde
aam
sub
push
dec
jl
xchg
add
pop
jp
inc
gs
push
daa
cmp
addr16
inc
stos
adc
idiv
jp
data16
aaa
mov
cmps
test
leave
pop
rcl
jmp
(bad)
sub
add
mov
fcom
inc
push
(bad)
cmps
cmp
loop
dec
inc
adc
mov
call
or
cmp
adc
add
adc
sar
test
jmp
and
mov
movs
aad
popa
push
or
mov
and
inc
pop
and
mov
test
add
lods
sub
in
push
and
adc
push
mov
push
push
fidivr
(bad)
repnz
cmps
jp
rol
jbe
(bad)
loopne
and
cmp
mov
push
mov
mov
and
ret
xchg
mov
rcr
das
lahf
xchg
mov
mov
xchg
jmp
out
cmp
push
mov
mov
dec
fcomi
es
push
adc
dec
sbb
retf
or
xchg
inc
idiv
inc
js
fidivr
mov
and
mov
ret
push
mov
pop
ror
add
retf
sbb
fdivr
(bad)
outs
outs
dec
test
cmc
adc
mov
and
jmp
data16
and
and
dec
mov
mov
into
mov
xchg
sbb
add
outs
stos
scas
jmp
es
jmp
mov
lods
xlat
cmp
xor
cmp
inc
adc
(bad)
js
mov
inc
add
add
cli
pop
jp
pop
aas
jmp
sbb
add
jle
and
push
ins
pop
imul
push
pop
sar
lods
mov
outs
add
add
dec
cmp
scas
add
add
push
push
push
ret
dec
out
into
movs
(bad)
aam
into
add
sahf
mov
pop
and
lods
inc
imul
ds
add
lods
or
dec
push
arpl
call
pop
inc
shl
stos
daa
ret
ja
and
push
push
cs
enter
and
or
ret
mov
inc
ds
imul
aaa
and
mov
out
xor
pop
cmp
into
mov
adc
sahf
xchg
pop
pop
dec
and
or
sbb
mov
or
jno
out
call
mov
add
and
mov
push
scas
imul
outs
cwde
xchg
and
pusha
(bad)
push
dec
and
jle
arpl
sbb
add
mov
sahf
sbb
adc
fcmovb
jp
les
inc
outs
add
pusha
push
mov
xchg
xor
sahf
and
jp
ret
inc
mov
cwde
js
or
fcmovb
mov
jnp
into
or
inc
push
fidiv
xor
inc
lea
sub
and
scas
cs
in
fsub
sahf
jg
js
imul
push
sub
imul
push
cwde
xor
clc
das
ror
into
xchg
jb
dec
jo
fs
(bad)
out
adc
and
movs
jo
push
daa
add
xchg
test
ds
jbe
scas
push
push
cmp
adc
pop
rol
xlat
mov
fcom
sahf
scas
and
mov
popf
sbb
dec
(bad)
pop
sahf
xor
(bad)
push
sbb
jb
jmp
ud2
adc
mov
(bad)
xchg
dec
inc
dec
aas
mov
and
lea
pop
scas
push
enter
sub
cmp
fcomp
and
push
nop
dec
add
mov
jmp
pop
mov
(bad)
adc
adc
pop
test
sbb
lock
inc
sahf
(bad)
dec
movs
(bad)
pop
push
ss
push
bound
add
(bad)
stos
inc
data16
bound
push
add
bound
dec
push
out
push
push
mov
add
jp
sahf
xchg
pop
and
mov
(bad)
inc
addr16
nop
ins
and
add
mov
pop
or
(bad)
mov
rcr
add
sbb
cmp
dec
scas
popa
sub
xchg
mov
and
mov
fidiv
mov
arpl
pop
mov
xchg
add
mov
adc
dec
add
or
(bad)
call
adc
(bad)
add
mov
out
add
pusha
sbb
sbb
gs
pop
mov
push
push
ins
mov
loop
daa
push
sbb
(bad)
call
cmps
xchg
sbb
jg
(bad)
mov
dec
rol
jnp
out
retf
xor
das
pop
sub
push
and
or
les
mov
outs
call
mov
sub
inc
scas
mov
mov
and
sbb
push
add
imul
loop
ds
sahf
adc
push
outs
push
inc
and
cwde
stos
dec
xchg
ror
xor
push
dec
sbb
pop
and
outs
mov
rol
nop
push
add
es
adc
(bad)
jp
mov
(bad)
je
push
sub
sbb
scas
add
mov
mov
jo
cmp
xor
es
jo
adc
add
push
pop
mov
cmps
sbb
push
imul
and
outs
imul
inc
mov
dec
mov
and
jle
scas
jmp
jmp
stos
push
mov
sbb
lods
pop
out
mov
mov
js
pop
and
inc
sub
aam
add
mov
ret
push
fsubr
inc
retf
(bad)
mov
cmp
hlt
fdiv
mov
rol
xor
je
jnp
cvttsd2si
mov
mov
sbb
call
(bad)
pop
fild
or
mov
push
jg
ret
and
sub
add
dec
imul
push
rol
mov
mov
and
adc
fiadd
add
jmp
or
add
fmul
inc
cs
add
mov
add
pop
lods
fs
test
loopne
push
pusha
inc
popf
or
stos
rcr
fs
and
aas
popf
and
mov
in
loop
mov
fs
pop
pop
rol
add
sahf
inc
fstp
mov
mov
push
addr16
sahf
data16
pop
jg
inc
mov
fmul
sahf
dec
rcl
jle
inc
lods
dec
rol
push
jb
outs
jmp
mov
mov
ds
mov
dec
xchg
mov
push
jo
test
data16
dec
cmps
pushf
dec
scas
ret
lea
xor
dec
dec
sub
stos
pop
mov
xchg
pop
xchg
pusha
and
sub
repnz
outs
loope
pusha
je
pop
xchg
outs
pop
movs
shr
mov
jb
rcl
push
mov
clc
add
popa
sub
ja
or
sub
fisub
dec
cmp
(bad)
and
sbb
(bad)
dec
arpl
or
pop
xchg
out
jae
adc
hlt
lock
out
push
in
or
out
retf
sub
loop
adc
xor
sub
mov
xor
cmp
pop
adc
ds
daa
ret
cdq
adc
inc
stos
xor
sub
xor
push
adc
test
stos
jb
aaa
sub
inc
or
out
mov
sbb
jo
ret
jbe
mov
dec
xor
or
fld
mov
pop
or
jno
repnz
cmps
stos
adc
inc
sbb
add
xchg
cmp
sub
lock
inc
push
ds
daa
inc
or
xchg
push
aaa
sub
ds
inc
add
adc
push
push
mov
jnp
sbb
mov
jle
add
inc
and
out
inc
xchg
scas
and
call
push
xor
adc
inc
(bad)
cmp
and
(bad)
mov
xchg
jo
push
and
jg
xchg
loope
hlt
out
jo
ins
xor
pusha
push
pop
adc
push
adc
xor
xchg
push
(bad)
fistp
shl
lods
hlt
ret
into
ds
inc
pop
data16
inc
push
xchg
test
shl
xor
into
mov
inc
or
or
adc
test
pushf
ficom
inc
add
retf
jmp
sbb
cwde
push
push
add
adc
in
jmp
xchg
or
inc
mov
stos
xchg
push
je
dec
push
out
xchg
or
out
mov
xchg
fs
xor
into
inc
dec
daa
aaa
mov
lods
xchg
daa
rol
pusha
fwait
fwait
add
sahf
lods
push
xchg
outs
cmp
xchg
test
jp
dec
or
test
(bad)
stos
jle
movs
test
in
and
and
cmp
test
hlt
jp
pop
mov
fcomp
jp
mov
xchg
ret
mov
push
stos
jb
fwait
into
rcr
inc
inc
popf
dec
xchg
pusha
call
pushf
out
loop
(bad)
or
popa
test
xchg
mov
mov
daa
icebp
xchg
adc
test
out
mov
push
outs
shl
mov
mov
das
mov
push
add
outs
sub
inc
pop
push
dec
dec
mov
not
imul
xor
mov
mov
push
mov
imul
and
dec
lock
and
push
rcr
mov
mov
ror
add
sahf
adc
jo
(bad)
not
popa
inc
popa
or
and
(bad)
aaa
imul
mov
ret
xchg
add
repnz
and
sbb
or
in
ret
mov
pop
mov
ror
add
(bad)
cli
call
xor
push
and
arpl
stos
(bad)
out
add
mov
(bad)
sbb
(bad)
retf
fcom
retf
aam
(bad)
inc
dec
xchg
inc
jbe
mov
cmp
mov
sub
xor
add
pop
(bad)
push
repnz
push
das
sbb
cmp
pop
cmp
xchg
pop
scas
sahf
xor
es
jbe
jne
push
push
sbb
sbb
sar
lea
test
inc
xchg
jb
jo
sub
popf
mov
push
mov
mov
pop
(bad)
adc
xchg
ss
fimul
ror
(bad)
cs
or
pop
sbb
(bad)
inc
mov
cmc
inc
push
dec
inc
xchg
mov
and
mov
cs
mov
dec
xchg
add
add
mov
rcl
xchg
outs
jmp
sbb
xchg
out
(bad)
faddp
or
imul
fld
mov
call
addr16
push
les
pop
inc
loop
mov
push
mov
pop
push
or
mov
dec
xlat
jmp
cmps
js
lock
push
dec
cmp
jbe
mov
sbb
out
push
mov
push
test
push
fbstp
(bad)
inc
outs
fstp
jb
mov
ret
push
push
pop
mov
mov
and
lock
and
mov
mov
jo
imul
outs
repz
fiadd
jmp
xchg
push
cs
jp
xor
dec
mov
test
mov
sbb
inc
into
add
mov
mov
jp
mov
imul
sbb
mov
jbe
ret
or
call
outs
jle
loopne
sahf
(bad)
or
lahf
jno
jo
ss
adc
rol
lods
xchg
inc
push
test
inc
xchg
pusha
push
sub
and
pop
jle
or
inc
inc
push
repnz
ror
dec
scas
sub
dec
(bad)
sar
push
push
jb
leave
sahf
bnd
movs
dec
js
inc
sahf
retf
cmp
(bad)
add
outs
jmp
(bad)
lods
and
xchg
dec
push
pop
push
cmps
in
repnz
retf
add
scas
retf
xchg
mov
or
inc
jge
rcl
pop
lods
or
loop
mov
adc
push
xchg
pop
outs
add
add
ret
ret
ror
dec
mov
push
inc
and
xchg
cmp
mov
pop
js
sbb
xchg
retw
adc
xor
sbb
retf
xor
sbb
addr16
into
cli
out
pop
or
add
(bad)
loop
cmp
xor
shl
rol
adc
xchg
(bad)
xchg
sahf
jecxz
xchg
ret
dec
push
bound
push
push
push
push
mov
inc
push
sub
call
jae
adc
mov
jle
xchg
cmps
bound
retf
or
jle
mov
inc
jmp
cli
mov
pop
pop
mov
bound
es
xchg
js
ds
pop
lock
and
mov
inc
mov
ret
push
adc
jmp
(bad)
jmp
mov
inc
mov
and
cmp
into
dec
jecxz
jmp
out
push
push
scas
pop
je
xchg
sahf
inc
xchg
les
xchg
into
mov
inc
mov
push
add
dec
mov
into
mov
icebp
adc
adc
adc
add
sub
fild
retf
mov
test
pusha
ret
xor
dec
jmp
sbb
inc
or
sbb
mov
xor
(bad)
fwait
jecxz
cdq
mov
sbb
xor
cmp
mov
iret
sub
pushf
pop
test
xchg
push
pop
mov
test
pop
xor
or
(bad)
xchg
or
mov
or
xchg
mov
pushf
add
pop
retf
jb
outs
ror
sbb
adc
ss
xor
cli
leave
sub
ficom
imul
and
jbe
cwde
(bad)
add
sub
repz
loop
bound
push
sahf
xchg
hlt
sub
jbe
sub
mov
add
into
pop
ficomp
push
ret
add
outs
cs
rcr
pop
loop
cmp
cmp
sub
push
push
push
dec
or
adc
push
(bad)
or
jb
aam
jo
jp
outs
mov
sbb
into
xchg
push
jmp
xor
sub
fimul
ja
into
(bad)
pop
xchg
mov
scas
add
push
nop
pop
dec
and
dec
pusha
or
jp
outs
das
push
cmp
jle
fdivr
inc
pop
jmp
or
inc
pop
imul
outs
sbb
aas
loopne
sbb
push
cmps
inc
add
sbb
stos
sbb
push
xchg
xor
cwde
adc
(bad)
jbe
sbb
sahf
cli
jmp
test
cmp
pop
cmp
movs
in
fucomip
mov
or
outs
inc
cmps
dec
push
sbb
push
mov
jle
and
sbb
mov
into
add
scas
pop
mov
dec
pop
mov
push
push
ret
(bad)
ss
xchg
fisub
jo
jle
(bad)
sbb
xchg
add
lea
adc
dec
xor
xchg
test
popf
push
sub
out
adc
loopne
aam
retf
mov
loopne
scas
(bad)
mov
xchg
or
jb
lock
jmp
movs
push
rol
dec
jo
mov
pop
dec
sahf
mov
sub
pushf
inc
cmp
add
sbb
cmps
cli
icebp
add
jo
push
xchg
bound
inc
add
pop
scas
adc
mov
pusha
(bad)
sbb
sub
stos
push
push
inc
pusha
pushw
sub
sbb
mov
fidiv
rcr
dec
data16
sbb
sub
popaw
jmp
and
arpl
push
inc
popa
daa
and
sbb
or
es
xchg
adc
or
cmp
dec
test
inc
mov
(bad)
add
retf
cmp
pop
or
push
mov
sub
push
push
enter
jp
call
out
xchg
add
push
xchg
add
mov
dec
or
add
mov
or
movd
cmp
mov
pop
call
xor
pop
or
repnz
arpl
es
fbld
cwde
loopne
call
retf
mov
cmps
mov
lea
mov
add
das
mov
sbb
push
dec
or
mov
nop
adc
dec
push
sub
sahf
ret
lods
data16
bound
pusha
pusha
loopne
dec
mov
nop
pop
jle
xchg
mov
movs
mov
cmp
sahf
data16
cmp
nop
movs
push
xchg
inc
jle
xor
cmps
mov
or
(bad)
enter
icebp
mov
fldenv
mov
or
or
pop
pop
xchg
clc
(bad)
(bad)
dec
loope
cs
xor
cwde
adc
or
dec
fstp
xor
push
push
dec
mov
add
not
pop
and
les
out
adc
loope
push
call
sar
arpl
add
aad
mov
cmc
dec
ficom
dec
bound
mov
add
sub
xor
or
push
imul
xchg
pop
inc
or
inc
sbb
enter
arpl
mov
add
icebp
push
sahf
push
or
scas
sti
adc
rol
dec
jb
loope
rcr
mov
and
cmp
cmp
and
mov
(bad)
pop
jb
jle
ss
xchg
jle
add
xor
sbb
push
sbb
jl
loop
push
sub
ficom
jne
sbb
inc
test
or
hlt
mov
dec
or
call
sbb
mov
and
mov
jp
mov
rol
add
cmc
or
retf
xchg
inc
lock
loopne
push
pusha
cmp
test
xor
sbb
add
sbb
mov
adc
mov
inc
lock
or
mov
ds
mov
inc
cmp
jbe
or
push
sbb
xchg
dec
pop
or
outs
je
pop
xor
ror
push
mov
xchg
mov
call
add
mov
jle
dec
cmps
popa
xor
pop
mov
popa
sub
out
(bad)
lds
mov
test
xor
jle
rcl
mov
or
dec
mov
push
push
and
pop
(bad)
xchg
xlat
fxch
sbb
scas
dec
call
push
inc
xor
mov
js
push
enclu
rol
pop
cwde
mov
push
sbb
add
fcomp
pop
sub
cmp
loopne
xchg
sbb
push
push
xchg
pop
pop
dec
lea
sub
cmp
lods
hlt
ins
jmp
scas
mov
or
or
dec
popf
add
sbb
push
push
inc
retf
add
or
fidiv
add
dec
inc
jo
or
call
(bad)
out
in
mov
fmulp
into
add
pusha
add
mov
dec
out
sbb
xor
pop
inc
das
jp
push
and
add
mov
or
jne
fst
push
stos
and
jmp
or
add
imul
stos
push
xor
and
xor
into
push
into
aam
repnz
lock
xor
(bad)
jmp
xor
les
add
sbb
adc
into
jp
jne
ret
fild
jo
sbb
dec
fisubr
rol
mov
dec
cmp
or
mov
pminsw
mov
nop
xchg
pop
add
xor
cmps
sbb
ds
outs
fimul
shl
dec
push
or
cwde
ss
retf
jo
inc
call
retf
or
pop
pop
xor
int3
ret
stos
pop
icebp
mov
push
adc
jp
add
add
dec
loope
stos
cmps
push
jbe
or
jp
es
mov
retf
cmp
mov
sub
setae
sub
(bad)
arpl
xor
or
or
sar
adc
fadd
jmp
bnd
and
dec
ficom
aaa
or
and
add
jb
push
in
inc
mov
mov
out
je
xor
outs
inc
mov
inc
push
pop
push
cmps
nop
xchg
mov
mov
ror
xor
mov
pusha
into
sub
je
ret
fwait
cli
ss
cwde
xchg
xor
(bad)
js
bound
jmp
ret
shl
das
mov
jo
xlat
pop
xchg
inc
sbb
add
add
push
call
pop
sbb
add
retf
pusha
or
xchg
cmc
push
outs
push
and
add
cdq
push
push
ss
adc
jp
(bad)
aam
bound
fidivr
push
inc
pop
inc
adc
add
cmp
fidivr
js
jmp
out
fimul
or
imul
dec
inc
push
ret
sar
fidiv
mov
adc
jb
sti
xchg
mov
pusha
out
add
outs
push
mov
fidivr
dec
fiadd
or
test
dec
cmp
add
or
out
test
out
adc
pop
sahf
push
and
rcl
or
push
xchg
push
ret
mov
or
push
jmp
xchg
call
push
call
add
test
xchg
xchg
(bad)
pop
loope
test
in
sub
or
sbb
sub
and
mov
pop
loop
xchg
push
and
out
jmp
add
sbb
xor
inc
sub
add
jnp
es
push
push
ret
test
mov
pop
cmp
xor
and
daa
js
retf
sbb
sahf
jle
pop
rcr
sbb
loopne
dec
mov
adc
xchg
dec
es
add
inc
sbb
test
push
cmps
test
mov
mov
cli
add
imul
js
mov
dec
fs
call
push
jne
jne
xor
and
cli
xchg
mov
rol
leave
nop
fiadd
jmp
jp
push
mov
pop
mov
cmc
jb
push
ja
repnz
dec
ror
ret
aas
add
(bad)
(bad)
xchg
adc
sbb
cmps
add
daa
(bad)
mov
cs
mov
xor
dec
push
pop
or
and
call
dec
mov
popa
cmp
xor
inc
add
push
popa
mov
xchg
mov
add
retf
pop
dec
rol
sbb
mov
xor
jmp
cs
sbb
jmp
loop
ds
in
sbb
pop
xchg
adc
cmp
push
out
mov
xchg
js
sbb
mov
or
shl
push
push
xchg
rcl
ret
jle
or
loopne
cmp
fimul
out
and
fidiv
arpl
fisubr
call
cmps
scas
jmp
push
dec
or
push
add
jbe
and
pop
cmp
push
sbb
mov
test
cwde
mov
into
shr
and
enter
push
dec
test
into
retf
xor
loop
mov
mov
xchg
repnz
mov
dec
xchg
or
adc
out
scas
pusha
cmp
adc
cli
pop
xchg
xchg
jmp
ror
jo
jmp
ss
xor
mov
sub
pop
les
jecxz
or
retf
add
add
add
fimul
pusha
loopne
add
lahf
repnz
or
or
jmp
test
or
xchg
cs
lahf
rcl
sahf
add
add
cmp
retf
sbb
js
daa
or
push
pushf
and
push
xchg
xchg
push
inc
(bad)
mov
pop
rcl
mov
push
loop
xchg
and
sub
xchg
icebp
xchg
jp
jmp
test
pusha
cmp
js
aaa
inc
ja
loope
cmps
scas
bound
loopne
adc
sbb
ficom
pop
mov
add
not
mov
or
push
popaw
hlt
cmps
(bad)
jb
mov
push
(bad)
pusha
outs
mov
push
cmp
xor
xchg
jle
add
ror
test
aas
jle
stos
xchg
jo
mov
add
push
imul
xchg
mov
lods
inc
sub
ror
(bad)
lods
pop
xor
jo
call
ret
dec
push
sbb
ds
mov
and
outs
xor
and
loope
pop
xor
(bad)
mov
or
cmp
data16
ror
or
inc
pop
dec
xor
or
jmp
push
push
mov
cs
je
push
ret
dec
jmp
pop
adc
fcmovb
add
pushf
leave
xchg
das
mov
or
sub
sahf
(bad)
and
addr16
jle
mov
dec
(bad)
jmp
cs
inc
jmp
idiv
adc
add
ret
mov
sahf
imul
fidiv
add
mov
mov
xor
fimul
dec
data16
cli
mov
mov
push
cmp
nop
jle
push
dec
add
rcr
push
cmp
adc
add
jmp
or
xchg
imul
xchg
imul
push
fadd
add
into
add
gs
leave
outs
outs
out
add
jnp
xchg
jp
popf
sbb
inc
call
ja
js
sar
call
jae
or
xor
movs
xchg
sahf
push
(bad)
mov
jg
mov
sbb
das
popf
or
mov
sbb
pusha
sbb
sti
pop
and
xor
push
outs
inc
sahf
les
push
imul
(bad)
int3
(bad)
mov
add
xor
dec
push
xchg
cdq
push
das
(bad)
dec
movs
test
cmp
xor
shl
xchg
add
mov
pop
rcl
mov
adc
xor
mov
jp
push
or
call
es
arpl
ins
xchg
sahf
push
push
pop
movs
int3
(bad)
jp
fcom
push
add
cmp
pop
add
lock
pusha
xor
out
add
mov
add
jmp
jle
or
push
mov
movs
and
add
pop
pop
and
mov
ror
xchg
add
(bad)
ss
not
inc
jbe
push
outs
into
or
inc
sub
dec
add
jmp
stos
rol
push
jp
inc
addr16
notrack
sbb
cmps
xchg
jnp
and
mov
fbld
jae
push
inc
cwde
lea
nop
dec
push
mov
sub
xchg
sbb
inc
adc
mov
arpl
ret
outs
or
add
cmps
push
add
push
test
inc
adc
adc
out
gs
mov
inc
or
movs
xchg
jo
inc
cli
pop
add
inc
out
mov
cmps
rcl
loopne
push
and
add
or
pop
adc
sbb
jb
mov
adc
outs
jg
xor
add
dec
sahf
push
xchg
push
sbb
jp
sbb
out
(bad)
mov
push
xchg
xchg
(bad)
adc
pop
cmp
sub
push
in
add
mov
into
mov
xchg
or
loop
sub
or
mov
xchg
add
sub
jo
mov
mov
adc
dec
lods
ss
je
mov
jle
xchg
test
add
add
inc
mov
pop
call
rcl
mov
jle
dec
cmps
and
rol
pop
stos
popa
popa
mov
lsl
jo
jo
add
push
push
sbb
push
fdivrp
out
test
add
jp
pop
nop
adc
sub
mov
daa
lock
ret
jmp
jbe
fadd
add
jb
cli
cmc
and
ret
retf
mov
pop
ds
ret
nop
into
call
loopne
cmp
cmps
jno
adc
and
adc
fadd
fsub
cmc
push
cs
pusha
rcr
add
xchg
repnz
adc
jne
loop
sbb
daa
clc
xchg
xor
push
xor
aas
rcr
or
bnd
mov
sahf
ret
add
xchg
push
repnz
sbb
xchg
add
sbb
pop
dec
inc
js
jo
sub
add
jb
add
xor
xchg
and
dec
add
(bad)
cmps
pop
cmp
mov
dec
ret
push
loop
lahf
outs
popf
mov
dec
xor
jb
sub
jmp
or
add
sbb
push
push
xchg
sbb
mov
fisubr
push
outs
push
mov
bound
add
js
push
add
(bad)
(bad)
xchg
mov
add
add
xchg
into
and
push
adc
inc
xchg
loop
adc
movs
mov
push
shl
or
pop
mul
ror
sahf
addr16
cmp
dec
add
ss
cmc
aam
into
and
add
in
mov
xor
inc
arpl
adc
and
retf
xchg
out
pop
stos
cli
and
adc
pop
ror
(bad)
inc
(bad)
or
mov
push
mov
pop
js
cwde
mov
bound
sahf
or
sbb
inc
retf
enter
outs
sub
bound
push
sbb
pop
adc
mov
pop
pop
test
test
(bad)
leave
inc
xchg
pop
out
adc
jmp
fidiv
outs
add
fnstsw
push
cwde
dec
ror
push
stos
sahf
jp
dec
pop
and
mov
xchg
repnz
jo
scas
add
js
xchg
sub
and
and
dec
jbe
push
pusha
(bad)
sub
cmp
ds
inc
adc
fisub
das
add
jle
add
jmp
cmps
jle
mov
mov
push
xchg
dec
cli
mov
lock
fcmovu
dec
or
adc
mov
cmp
mov
push
inc
sbb
sub
push
sahf
push
cmp
cmp
sahf
in
mov
sbb
jp
xor
add
jecxz
jle
xchg
shl
movs
rcl
push
mov
jb
inc
pop
push
and
inc
sbb
fidiv
stos
xchg
sahf
(bad)
xor
dec
lods
pop
test
add
call
push
pop
mov
jp
es
jb
aaa
inc
pop
pop
cmp
fidivr
mov
test
jno
sbb
dec
mov
sub
cmp
add
mov
mov
(bad)
mov
dec
sahf
out
mov
pushf
scas
xchg
test
rcl
aas
cmp
xor
sbb
push
dec
lods
rol
push
sbb
test
push
imul
and
pushf
jmp
adc
push
sbb
daa
sbb
xor
pop
movups
or
push
jns
pop
call
xchg
retf
ja
sbb
nop
addr16
mov
jmp
outs
mov
and
call
lods
ds
jecxz
jl
push
jne
neg
push
out
lock
ja
inc
and
push
sub
ss
dec
or
mov
mov
call
sahf
cmp
and
mov
rcr
mov
jne
call
or
add
arpl
and
jle
dec
mov
or
into
ret
ds
scas
test
pop
or
mov
ja
adc
test
mov
(bad)
rol
pop
jp
addr16
mov
js
pop
add
ret
js
out
push
push
imul
retf
cmp
les
out
imul
xor
sar
xlat
add
inc
sub
sub
jecxz
jb
mov
ja
pop
retf
jne
and
aam
or
push
mov
(bad)
sub
lock
push
jg
adc
mov
outs
push
pusha
cmp
jle
xchg
push
rcl
and
cmps
(bad)
leave
push
data16
push
loop
mov
fdivr
cs
inc
dec
arpl
jle
xor
adc
call
jmp
xor
xchg
push
es
sbb
push
jmp
cmp
inc
outs
xor
cwde
sahf
jbe
cmp
retf
retf
push
cmps
fsubp
mov
xchg
and
xchg
lods
test
shl
and
and
pop
mov
xchg
mov
into
lock
cmp
dec
inc
bound
fisub
aas
jbe
fidiv
mov
inc
mov
(bad)
push
and
add
mov
mov
dec
(bad)
cmp
rcl
pop
sub
push
outs
xchg
dec
xchg
cmc
xor
data16
aam
mov
data16
(bad)
fcmove
pop
lods
sbb
ins
retf
mov
xchg
or
sbb
lock
sbb
imul
sub
rcl
dec
sub
inc
jmp
or
imul
(bad)
push
dec
jmp
mov
mov
pusha
movs
mov
add
out
test
and
or
cmp
sub
dec
rol
into
xchg
jp
adc
adc
xchg
xchg
push
add
ss
mov
fisubr
sbb
jp
cmp
test
jo
pusha
jle
mov
xchg
sar
mov
pop
xchg
repz
stos
xchg
or
cmp
mov
add
or
sbb
jecxz
pop
dec
test
ret
aam
and
or
add
push
out
js
lods
imul
rcr
or
sahf
ret
sbb
ds
add
pusha
sub
push
or
lock
adc
adc
into
fidiv
xchg
add
inc
jp
dec
retf
or
mov
mov
jmp
inc
pop
test
pop
pop
push
sub
dec
sbb
adc
movs
push
xchg
(bad)
jmp
jp
in
cdq
js
ds
pusha
sbb
add
or
xchg
or
push
div
ss
sub
push
repnz
pop
xchg
imul
dec
sub
jnp
daa
and
mov
mov
movs
xchg
push
push
sahf
add
retf
mov
add
retf
add
add
mov
adc
adc
xor
add
leave
mov
jb
rcl
dec
pusha
and
test
push
outs
xor
bound
adc
xor
stos
pop
cmp
cwde
cmp
sub
ss
mov
cmps
jo
add
bound
into
imul
push
or
xor
(bad)
shr
inc
rcl
push
out
out
jnp
push
jp
scas
bound
ret
(bad)
enter
push
jno
mov
(bad)
xchg
adc
cmps
sti
outs
pop
xor
sub
fld
retf
mov
dec
add
movs
dec
not
mov
mov
ss
sbb
or
ret
mov
mov
inc
lea
div
test
sub
push
das
xchg
mov
or
pop
mov
mov
lods
bnd
es
ds
sbb
rcr
sub
adc
and
aam
adc
enter
sbb
repnz
fcom
loop
mov
or
imul
push
(bad)
mov
add
pop
push
xchg
cmp
cwde
pop
add
scas
sbb
dec
push
pop
sahf
ret
xor
mov
cli
into
add
sbb
adc
shl
loop
dec
retf
dec
pop
data16
lea
loope
mov
add
adc
xor
adc
out
push
(bad)
imul
ret
ret
les
mov
xchg
mov
sbb
adc
fstp
or
xor
push
sbb
adc
cmp
arpl
adc
mov
dec
cmp
test
iret
rol
inc
jge
imul
aad
js
loop
mov
rol
dec
test
call
out
jp
dec
adc
sub
or
cs
and
mov
leave
mov
push
mov
rcr
adc
xchg
lahf
mov
sub
push
push
sub
push
pop
inc
stos
sbb
pusha
and
xor
inc
mov
jnp
pop
or
xchg
sbb
out
push
js
inc
mov
mov
in
es
mov
pusha
and
sahf
neg
ror
arpl
and
xchg
mov
mov
sbb
adc
out
dec
out
push
mov
sub
push
bound
mov
mov
push
xor
cmps
inc
adc
stos
jecxz
data16
retf
arpl
push
cmp
sbb
sbb
ret
scas
sbb
sub
inc
nop
aam
fwait
nop
xchg
add
cwde
retf
or
add
mov
sub
daa
mov
push
test
mov
(bad)
xchg
iret
mov
ds
scas
adc
xor
cmp
and
ret
adc
jno
add
scas
adc
and
rcr
pop
add
bnd
cli
or
inc
sbb
push
cmp
sahf
outs
or
retf
(bad)
inc
mov
out
jp
rcl
pop
call
push
cli
lods
add
fiadd
dec
sbb
les
test
jg
jb
pushf
mov
loop
frstor
(bad)
mov
dec
cwde
bound
cmps
xor
sub
ss
pop
or
jb
bound
int3
push
mov
pop
test
iret
add
outs
sub
sbb
xor
cwde
xchg
and
xor
inc
(bad)
data16
push
js
pop
call
cli
cli
adc
sahf
mov
jb
clc
fistp
inc
cmp
jb
dec
cmp
inc
cmp
adc
mov
push
(bad)
add
add
pop
or
outs
out
ror
ss
mov
rcr
mov
push
add
loopne
push
sbb
fs
push
into
jle
sbb
cmp
and
or
mov
imul
ret
inc
jmp
lock
retf
data16
sub
dec
inc
push
push
mov
add
inc
sub
imul
sbb
jecxz
cs
bound
pop
jnp
data16
pop
cmps
push
ss
adc
sahf
cli
data16
or
test
xchg
pop
add
pop
out
adc
push
(bad)
and
test
test
(bad)
fcomp
or
inc
mov
or
or
and
inc
sbb
adc
sub
push
push
retf
mov
push
cmps
push
add
outs
into
cmps
leave
push
mov
outs
sub
push
das
dec
jle
rcr
xchg
xchg
(bad)
xchg
push
push
cmps
and
and
sbb
inc
cmp
aam
ds
fistp
sub
call
and
or
test
pop
adc
push
ret
add
data16
and
jecxz
xor
inc
xchg
or
sbb
sub
repnz
sti
sahf
mov
or
dec
mov
cmc
dec
ds
loopne
cwde
adc
fcomi
jo
fst
not
cmps
or
sub
mov
add
sbb
and
add
jg
sahf
cmp
retf
outs
mov
retf
push
push
stos
fxch
mov
sahf
or
dec
and
sar
out
(bad)
fdiv
ficom
mov
loop
outs
xchg
outs
push
xor
stos
add
enter
xor
add
dec
fcom
and
adc
dec
stos
loop
imul
enter
xchg
mov
pop
dec
push
loope
add
mov
sub
or
(bad)
ret
stos
dec
and
jno
retf
daa
sbb
and
cwde
or
push
ret
sbb
ret
movs
mov
mul
push
out
mov
xor
jecxz
imul
loop
pusha
fiadd
loop
add
inc
push
jmp
lock
push
mov
(bad)
stos
sbb
mov
shl
adc
or
pusha
jno
xchg
outs
scas
dec
scas
or
cmp
mov
lods
push
stos
xchg
es
ror
mov
inc
(bad)
outs
or
outs
arpl
cmps
inc
push
jecxz
jl
jecxz
call
push
data16
ret
or
dec
and
retf
jb
jp
cmp
nop
mov
dec
push
rcr
mov
pop
inc
pop
push
add
or
outs
jb
cmp
jae
mov
dec
xor
push
aas
xor
in
or
cmp
xor
push
push
rcl
inc
outs
pop
add
jbe
xor
inc
pop
pusha
and
add
addr16
rol
add
shr
fimul
push
pop
lods
sub
pop
push
xor
sub
push
push
push
xor
sub
cdq
jno
fs
aaa
xchg
enter
push
fwait
jb
pusha
pop
dec
rcl
test
sar
add
mov
dec
lods
ret
loop
xor
inc
push
xor
add
es
scas
sbb
jg
loopne
sub
or
jp
rol
retf
add
mov
imul
ret
adc
adc
aad
ret
pop
push
pop
push
test
add
pop
shl
and
cmp
into
jbe
xchg
sub
mov
xchg
lock
jle
adc
xchg
jg
popf
(bad)
shr
out
pop
pop
imul
xchg
js
lahf
push
adc
cmp
xchg
push
inc
test
jbe
sub
dec
mov
rcl
add
xchg
fild
and
or
js
push
cvtdq2ps
xchg
sbb
shr
sub
sbb
push
ds
mov
mov
imul
data16
xor
ret
add
xchg
mov
addr16
retf
add
ficomp
jp
push
mov
fisubr
push
ins
rcr
cmps
jae
js
push
cmp
lock
xor
sahf
pop
sbb
daa
add
mov
das
add
enter
idiv
push
add
ret
xor
outs
ins
jmp
stos
push
inc
adc
mov
hlt
sbb
lock
sub
dec
sbb
sahf
xchg
call
mov
loopne
push
daa
jp
sar
(bad)
and
dec
fimul
xchg
or
dec
ss
mov
(bad)
out
inc
add
mov
add
rcr
push
jbe
mov
dec
les
inc
push
(bad)
cmp
mov
(bad)
cmp
push
push
and
ss
add
inc
mov
or
push
pushf
sbb
(bad)
(bad)
sbb
ror
enter
dec
ret
xchg
mov
aaa
inc
dec
mov
xor
pop
outs
bound
(bad)
cmps
daa
adc
outs
ss
jge
cmp
jmp
jb
cli
mov
xor
adc
cs
adc
into
(bad)
add
xor
fdiv
dec
lahf
and
xor
jbe
inc
sbb
dec
jecxz
faddp
loop
push
mov
cmp
or
or
and
sub
loop
imul
mov
data16
sbb
pushf
dec
push
mov
mov
test
gs
cmp
push
push
xchg
cdq
and
and
xchg
push
in
pop
dec
cs
push
cmp
out
scas
ds
fimul
inc
pop
cli
mov
push
push
dec
xor
imul
(bad)
jp
lods
fmulp
push
mov
aam
retf
adc
or
jp
push
push
mov
data16
cmp
ficomp
adc
mov
aam
xor
push
jb
inc
xchg
inc
neg
add
pop
mov
jb
mov
sbb
or
add
test
sahf
into
add
push
push
mov
fcmovbe
and
cmps
pop
push
jbe
sub
shr
mov
adc
dec
jmp
shl
test
adc
pop
cmp
mul
xor
outs
test
mov
loope
into
sub
outs
add
and
(bad)
xchg
aam
out
neg
enter
push
sbb
jae
ficomp
aam
test
sbb
xchg
push
and
ja
lock
call
dec
push
mov
pop
inc
lods
cmp
adc
jmp
faddp
sahf
ret
call
cli
push
(bad)
and
mov
jmp
rcl
push
cmps
jg
xor
push
adc
sub
or
inc
sbb
sub
ret
ret
jo
and
out
push
xchg
sbb
mov
cmps
shr
inc
cmp
fidiv
add
or
jg
pushf
dec
cmp
(bad)
sbb
int3
cdq
outs
jmp
xchg
into
push
test
jbe
mov
xor
add
mov
mov
sbb
mov
(bad)
push
jb
cmp
mov
(bad)
mov
ret
add
xchg
sbb
inc
lods
dec
pop
pop
xchg
push
inc
js
outs
into
cmp
pop
outs
outs
and
repnz
fdiv
mov
jb
imul
mov
xchg
adc
sbb
dec
loop
pop
nop
xchg
pusha
stos
ds
in
dec
jb
cli
push
cs
sub
repnz
pop
dec
or
mov
(bad)
hlt
mov
sbb
and
sbb
mov
add
mov
inc
mov
dec
jbe
sbb
mov
mov
sbb
rol
bound
push
xchg
dec
push
loopne
arpl
mov
jmp
(bad)
(bad)
cmp
ins
(bad)
cmp
das
xor
and
retf
dec
mov
adc
cmp
int3
ret
dec
and
cmp
dec
sbb
data16
dec
mov
call
pop
push
retf
mov
pushf
sbb
cli
out
clc
int3
dec
sbb
sbb
xor
inc
sbb
jb
(bad)
fcom
dec
rol
xchg
push
jae
and
jle
jb
jo
pop
push
jae
sbb
movs
aam
xor
push
test
add
xor
es
push
into
jg
mov
repz
pusha
arpl
mov
hlt
dec
xchg
stos
and
ficomp
loop
sub
into
push
xor
and
push
sub
cli
inc
out
xor
sub
push
mov
mov
ret
retf
adc
jnp
sbb
outs
cmp
xchg
sbb
cmps
dec
jne
dec
adc
sub
pusha
mov
mov
pop
repz
mov
adc
xchg
clc
nop
push
mov
jg
inc
adc
cwde
repnz
sbb
ins
fdivr
cmp
add
pushf
jne
aaa
jle
mov
add
pushf
add
xor
push
outs
call
cmp
push
mov
cmps
loop
int3
mov
dec
(bad)
retf
outs
pop
sbb
cmp
lea
pop
push
adc
inc
push
(bad)
xor
or
push
ret
inc
jp
push
(bad)
mov
push
lods
mov
adc
jb
adc
sub
xor
retf
dec
jmp
scas
cmp
arpl
xchg
mov
cmp
repnz
ficomp
mov
inc
fild
cli
loop
(bad)
loopne
sahf
cwde
mov
or
dec
push
xor
mov
add
mov
les
outs
sbb
sub
add
ret
lods
movs
shl
inc
push
sub
adc
add
push
xchg
retf
mov
push
xchg
ret
jo
stos
pop
test
dec
mov
dec
mov
and
jp
cmp
jo
test
ret
pop
mov
mov
nop
dec
xchg
into
or
jmp
cmps
pop
mov
mov
jle
dec
es
push
inc
imul
push
push
ret
call
ror
cmp
mov
dec
sahf
mov
push
push
or
mov
outs
retf
sbb
mov
pop
cmp
mov
jmp
adc
scas
stos
xor
adc
xor
rcr
mov
sbb
pop
jmp
push
imul
pusha
popa
arpl
cli
mov
repnz
pop
inc
daa
adc
or
xor
or
sbb
inc
add
mov
or
sub
sbb
adc
sbb
add
jae
clc
es
or
pop
divps
pop
popa
or
add
into
sbb
(bad)
jne
je
and
mov
dec
cmp
xchg
dec
loopne
loopne
sbb
and
ds
imul
inc
das
push
outs
sahf
out
aaa
(bad)
(bad)
fisub
js
xor
mov
lahf
jb
popf
sahf
and
sahf
test
out
enter
mov
mov
(bad)
fidivr
adc
xchg
mov
xchg
add
adc
dec
aam
cmp
inc
js
into
fistp
pop
and
push
xchg
inc
mov
bound
sub
mov
sbb
push
or
sbb
rcl
inc
imul
add
push
cmp
adc
sahf
sahf
add
cli
cmp
sahf
out
imul
cwde
jo
arpl
jb
(bad)
push
cmp
rcl
into
add
sahf
mov
xor
cmp
aas
and
jae
cmp
sbb
mov
cmps
jmp
sti
adc
les
mov
(bad)
xchg
add
sbb
and
iret
dec
inc
(bad)
ret
inc
addr16
mov
jle
outs
sub
repnz
inc
and
cmps
mov
push
jg
xor
ins
mov
adc
fisub
inc
sbb
scas
cwde
add
mov
shl
(bad)
retfw
xor
push
(bad)
cs
ror
(bad)
cmp
or
xor
or
popa
sbb
adc
mov
xor
nop
sub
or
mov
mov
ret
pop
(bad)
push
xchg
sbb
(bad)
shl
div
push
enter
mov
and
aaa
adc
sahf
ret
lods
mov
out
ret
cmp
inc
fisub
fidivr
add
and
push
sahf
push
pop
rcr
shr
push
add
fcmovu
(bad)
add
inc
pop
and
add
adc
out
sbb
lods
movs
sub
into
outs
dec
mov
cmp
add
mov
jno
popa
jbe
cli
inc
xor
mov
mov
sbb
ds
sar
mov
dec
pop
mov
push
pop
xor
cmp
or
mul
push
xor
pop
retf
pop
inc
fisubr
mov
sbb
cli
out
jne
(bad)
retf
dec
or
adc
xor
sar
or
xchg
into
cmp
jo
icebp
loop
(bad)
xor
(bad)
adc
mov
shl
dec
cs
dec
jmp
repnz
rcl
sub
pop
pop
mov
sub
pop
dec
(bad)
(bad)
ret
cs
outs
retf
shr
mov
xor
out
call
popa
mov
in
jp
ficomp
jmp
ret
mov
inc
cs
cmp
js
push
xor
gs
adc
and
or
ror
mov
push
stos
arpl
(bad)
arpl
push
cwde
add
push
or
leave
jp
add
sub
or
js
fadd
jp
repnz
and
mov
sub
mov
xor
dec
add
(bad)
push
push
push
mov
pusha
outs
es
mov
inc
jmp
inc
sbb
or
fadd
scas
shl
cmps
call
js
add
mov
(bad)
fwait
sbb
sahf
adc
jmp
inc
sbb
ret
mov
adc
test
push
mov
arpl
push
jmp
jle
pop
xchg
lods
ins
jp
imul
ret
es
cdq
in
push
jp
xchg
pop
push
cmps
cmp
mov
shr
and
xchg
retf
ret
pop
sbb
pop
(bad)
mov
adc
lsl
sbb
mov
shl
inc
and
cmps
call
add
loope
daa
outs
ds
xor
shr
out
xor
push
ror
imul
inc
xchg
cmp
cwde
das
jbe
cmp
stos
clc
push
pop
push
arpl
jo
mov
lea
dec
sbb
or
push
ret
cmp
sub
mov
fs
retf
ret
mov
bound
mov
sbb
loop
adc
bound
adc
push
inc
sbb
cli
icebp
cmp
pop
sub
mov
in
jmp
rcr
inc
sub
xchg
sbb
or
jo
inc
out
push
(bad)
or
mov
xchg
jns
dec
lahf
cli
(bad)
ror
xor
adc
cmp
retf
or
js
or
mov
jb
mov
push
jle
fcmovb
jmp
mov
test
add
sub
out
out
jle
push
jp
xor
or
out
mov
adc
jmp
pop
ss
jp
ins
loope
fwait
lahf
sar
or
jmp
mov
push
stos
popa
cmp
xor
push
mov
shr
pusha
or
(bad)
cmp
adc
jmp
inc
cmp
sbb
adc
or
add
fmulp
cmp
test
pop
adc
add
push
adc
mov
sub
mov
mov
add
add
adc
mov
push
js
cmp
fisubr
cmp
push
ins
lods
add
sahf
push
jp
add
xchg
fs
sub
jmp
cli
movs
xor
push
dec
es
stos
loop
cdq
(bad)
cmps
push
dec
or
rol
mov
pop
enter
sahf
inc
jmp
test
mov
mov
retf
dec
xchg
cli
test
cmps
cmps
xchg
inc
add
sbb
stos
into
and
js
and
lock
add
mov
ret
sbb
leave
add
push
mov
xchg
push
dec
addr16
arpl
cmp
pop
adc
and
add
push
retf
rcr
push
cmp
mov
movs
push
test
or
fs
inc
jb
retf
mov
and
push
xchg
inc
dec
xchg
das
jnp
mov
sub
xchg
mov
rcl
or
shr
cmp
adc
stos
stos
out
mov
cmp
mov
(bad)
jp
dec
sbb
in
arpl
fdivp
push
xor
mov
out
(bad)
push
ret
pop
cli
push
pop
mov
dec
loop
or
jecxz
out
jmp
add
dec
jecxz
inc
bound
mov
adc
retf
mov
and
add
rcr
fisub
das
jne
sub
or
xor
ret
xor
out
out
sbb
and
cmp
mov
out
es
retf
pop
fdiv
jb
jbe
xchg
or
push
(bad)
xor
cs
or
sub
dec
add
cli
div
sbb
push
or
rol
(bad)
jb
icebp
and
pusha
bound
push
push
jge
out
retf
mov
mov
add
(bad)
jo
or
sub
inc
movs
nop
or
add
mov
or
mov
push
test
mov
data16
rcl
mov
adc
inc
test
rol
xor
push
add
adc
sahf
jp
loope
or
mov
and
xchg
outs
fiadd
add
data16
nop
inc
dec
add
xor
(bad)
pop
pop
dec
mov
sub
mov
addr16
fs
mov
retf
mov
push
ret
cmp
and
mov
pop
pop
jbe
hlt
xor
fisubr
adc
jae
pop
imul
ret
lods
xor
pop
jmp
xor
sbb
xchg
ficomp
sbb
pop
xor
in
loop
mov
aad
mov
mov
pop
out
cmps
(bad)
adc
out
shr
xor
pop
add
data16
mov
sub
sar
addr16
cmp
xchg
pop
outs
ret
inc
or
enter
popa
sub
stos
js
dec
pop
ds
mov
or
pop
fld
outs
or
inc
mov
or
xchg
sbb
push
(bad)
bound
mov
dec
or
sbb
cs
pop
pop
inc
or
add
mov
mov
loop
dec
adc
fisubr
jb
push
jle
push
pop
and
sar
lods
mov
mov
push
sbb
push
or
sbb
mov
inc
and
or
shl
and
inc
inc
xchg
bound
or
mov
in
mov
and
sahf
popa
addr16
ss
mov
or
pop
scas
shl
loopne
das
loop
add
sbb
cmp
pop
dec
push
push
enter
inc
(bad)
and
push
sub
push
sbb
aaa
dec
iret
mov
sbb
repnz
jb
lock
fistp
ds
xchg
add
mov
add
in
push
rcl
pop
dec
outs
stos
push
sub
jle
dec
pusha
movs
mov
push
cmps
(bad)
mov
pop
jbe
dec
fisubr
or
push
daa
es
inc
sbb
shr
xchg
inc
(bad)
push
repnz
or
push
push
inc
inc
js
ror
ds
enter
mov
cs
lock
ficom
imul
jp
mov
cmps
dec
add
dec
ds
rcl
add
in
(bad)
pop
add
outs
dec
mov
add
jae
dec
pusha
add
cmp
call
(bad)
jmp
leave
ror
mov
pop
push
and
push
les
push
retf
mov
popa
ins
pop
scas
xchg
pusha
(bad)
bound
push
rcr
test
ret
mov
bound
xor
sbb
jp
add
add
pop
mov
push
or
sahf
pop
add
sub
mov
retf
xchg
fiadd
adc
xor
fiadd
inc
repnz
sbb
xor
shr
xchg
sahf
dec
inc
inc
inc
sbb
mov
test
ret
dec
mov
repnz
daa
imul
xchg
push
adc
add
xor
not
push
test
and
mov
test
retf
out
xchg
pop
adc
push
js
pop
inc
mov
fiadd
sbb
xchg
add
(bad)
xor
test
adc
xchg
jp
dec
out
lock
rcr
out
pop
pop
inc
mov
cmp
ja
or
loopne
lods
ins
gs
outs
sub
pop
dec
jo
gs
mov
adc
xchg
mov
shr
icebp
into
adc
pop
fst
add
xor
push
mov
mov
leave
mov
out
aam
test
push
mov
sbb
sbb
jmp
cmp
jb
cli
xchg
xor
ror
outs
push
dec
imul
bnd
icebp
xchg
adc
leave
xchg
ficom
stos
push
jbe
mov
inc
inc
pop
loope
bound
lds
xchg
aaa
(bad)
sahf
inc
(bad)
add
into
test
stos
mov
and
cmp
xchg
dec
ss
into
and
mov
add
xchg
xor
or
cmp
sbb
mov
test
mov
pop
and
push
mov
retf
mov
inc
test
xchg
xor
add
inc
ret
scas
mov
out
dec
cli
cmp
jbe
inc
fild
or
add
out
add
(bad)
xor
sahf
pushf
test
pop
pop
mov
or
ret
popa
push
or
mov
sub
or
nop
mov
pop
pop
push
jo
jmp
test
add
and
jg
adc
sub
dec
cmps
pop
cmp
xchg
adc
fidiv
mov
out
push
xchg
imul
jbe
mov
adc
dec
(bad)
scas
cmp
xchg
inc
xchg
sbb
cs
adc
add
and
xchg
das
cmp
ss
xor
mov
(bad)
push
inc
push
mov
fwait
call
push
or
pop
pop
jmp
jg
inc
mov
fiadd
lock
or
sbb
or
mov
dec
jle
cmp
sub
add
ret
xchg
sbb
neg
or
outs
adc
retf
add
push
or
inc
and
jp
out
mov
sub
jmp
add
in
push
push
dec
jne
je
shl
push
push
loopne
sbb
ds
lods
int3
mov
xchg
test
ss
popa
rol
push
add
jecxz
add
push
not
sbb
cli
push
xchg
push
adc
cmps
(bad)
(bad)
fisttp
xchg
cmc
ret
push
ret
dec
push
pop
cs
xchg
sahf
movs
xchg
call
xchg
push
sbb
outs
popa
dec
add
ficom
adc
pop
jo
or
scas
and
pop
and
enter
xor
xchg
shr
xchg
jne
mov
(bad)
sub
mov
call
es
inc
xor
test
shl
inc
sub
data16
xor
(bad)
neg
sbb
addr16
xor
or
dec
arpl
xchg
aad
cli
add
dec
xchg
jmp
push
add
call
mov
inc
or
xor
imul
loopne
sbb
add
sbb
inc
sub
cli
push
bnd
add
lock
push
ror
jno
xchg
aas
and
sbb
sbb
mov
pop
pop
js
into
ds
jmp
cmp
and
cs
out
push
les
cmps
gs
lods
rcl
and
jmp
ret
dec
pop
mov
inc
test
ss
inc
inc
cdq
adc
cmp
sbb
pushf
mov
(bad)
ds
mov
push
fidivr
and
xchg
aam
pop
into
mov
(bad)
ror
mov
sub
bound
add
jp
pop
add
cmps
push
jg
or
inc
not
clc
jb
push
dec
pusha
fidiv
je
push
xchg
push
sub
mov
out
xchg
adc
push
out
bound
jmp
loop
retf
mov
sbb
push
test
mov
fcomp
mov
mov
push
xchg
imul
into
jb
sbb
mov
mov
push
sub
stos
ret
test
(bad)
mov
push
dec
or
outs
push
or
sahf
(bad)
mov
nop
add
arpl
mov
push
ret
or
mov
mov
sahf
jle
cmp
pusha
sbb
retf
bound
push
bound
loop
rol
pop
rol
ret
ins
sbb
lds
add
pop
push
lods
mov
movs
(bad)
ror
out
push
js
xor
into
or
jle
outs
retf
jmp
pop
jge
sub
shr
and
cli
mov
loop
or
mov
cmp
xchg
push
sbb
xchg
retf
les
icebp
push
loop
ds
xchg
add
xchg
retf
or
ficomp
dec
rcr
repnz
xchg
test
retf
mov
fld
sub
mov
push
sub
cs
jmp
xchg
push
rol
pushf
js
inc
jmp
xchg
xchg
cwde
(bad)
mov
or
mov
pop
mov
dec
adc
or
mov
add
(bad)
sub
dec
jb
retf
xchg
sbb
dec
inc
add
repz
add
push
fbld
ss
aaa
mov
xor
add
mov
fs
popa
rcr
hlt
adc
test
push
ror
cs
xor
push
xchg
push
inc
sbb
dec
push
dec
cdq
and
ds
push
add
cwde
xchg
pop
push
stos
ficomp
pop
sub
mov
push
xchg
rol
hlt
push
inc
or
jno
scas
outs
mov
dec
add
(bad)
jecxz
sbb
push
outs
popa
in
cs
xor
mov
cmp
xchg
inc
sbb
mov
arpl
pop
rcr
pop
jbe
add
adc
push
out
mov
or
mov
pop
test
or
jb
xchg
into
mov
test
jle
lea
test
imul
arpl
mov
jecxz
cli
jecxz
or
push
scas
clc
pop
inc
ror
retf
dec
mov
add
pop
not
cmps
cli
xor
xchg
sbb
ss
mov
jbe
sbb
sbb
test
out
dec
mov
pop
mov
ret
add
cwde
sbb
sbb
mul
loope
loope
test
pop
test
into
xchg
fidiv
or
test
mov
mov
mov
mov
jmp
aad
add
xchg
rcr
push
mov
scas
fidiv
pop
mov
cmps
sahf
or
jecxz
jp
and
gs
retf
loope
loop
push
sbb
loope
xchg
push
cs
in
or
sbb
shl
ret
or
test
pop
call
jp
imul
mov
inc
leave
and
rcl
imul
shl
js
mov
xchg
adc
dec
mov
into
adc
xor
cs
sub
ret
mov
mov
call
xchg
ret
repnz
push
into
sbb
ss
add
mov
xchg
adc
mov
(bad)
xor
xchg
fcom
sahf
and
jnp
xor
push
out
and
cmp
push
push
and
xor
xchg
test
movs
sbb
popw
inc
mov
pop
adc
retf
aam
dec
dec
nop
add
push
push
push
jle
xor
call
pop
add
add
mov
mov
and
xchg
loop
sub
pop
inc
loope
sbb
xchg
es
pushf
sub
mov
add
push
ror
mov
sub
pushf
imul
pop
retf
dec
dec
adc
dec
mov
dec
loop
push
inc
clc
add
cmp
outs
rcr
(bad)
mov
inc
push
bound
test
dec
or
sbb
imul
pop
cli
and
xchg
pop
adc
jo
retf
push
xchg
icebp
add
jle
xor
add
dec
mov
xor
mov
jne
les
xor
fnstenv
sbb
aam
mov
cmp
mov
adc
sub
ret
lods
jb
mov
pop
dec
out
pop
jle
ficomp
add
adc
push
push
retf
add
push
xchg
fadd
adc
inc
and
mov
xchg
scas
cmp
inc
inc
cmps
repnz
mov
dec
add
or
pop
sbb
push
nop
cmp
mov
and
repnz
xchg
mov
xchg
mov
inc
and
cs
loopne
das
aaa
jo
pop
enter
enter
cs
cli
sbb
xchg
loopne
call
push
pop
retf
cdq
rcl
inc
out
cmp
mov
sbb
xchg
addr16
push
pop
xor
repnz
clc
out
push
push
xchg
ret
fimul
xchg
sbb
ficomp
test
sahf
push
int3
fist
outs
ins
(bad)
push
jmp
daa
cwde
pop
or
gs
outs
jmp
cmp
xchg
push
or
bound
cmps
push
rol
inc
xor
pop
xchg
ror
jle
sub
imul
push
ja
enter
neg
mov
bound
pop
dec
cmp
out
xor
or
or
adc
add
cli
mov
jle
add
(bad)
enter
sbb
mov
and
dec
and
dec
shl
es
pop
dec
sbb
ret
(bad)
push
pop
cmps
sub
inc
jb
ret
sbb
add
push
data16
or
jp
and
mov
pop
inc
adc
xor
ds
push
dec
shl
adc
pop
jle
xor
mov
js
fmul
sbb
inc
loop
cmps
dec
das
push
inc
ss
sbb
sbb
push
or
push
dec
jmp
or
call
or
push
pop
or
xchg
xor
and
xor
and
(bad)
cmp
rol
inc
inc
or
jmp
mov
and
inc
rcr
stos
mov
lahf
(bad)
jmp
retf
rcr
sbb
mov
(bad)
ds
mov
xchg
pop
es
add
jle
shr
fdivrp
or
ret
pop
jmp
xchg
adc
push
clc
sub
xor
(bad)
sbb
push
loop
movs
rcr
retw
jnp
mov
add
xor
xor
cmp
(bad)
pop
bound
call
mov
xlat
inc
xor
cdq
sbb
xchg
into
dec
outs
or
in
push
daa
xchg
xchg
call
add
rcr
mov
outs
stos
mov
push
cmc
xchg
mov
out
mov
(bad)
(bad)
mov
sbb
mov
repnz
and
or
fiadd
bound
jmp
mov
inc
nop
mov
(bad)
ds
pop
xchg
aas
outs
jbe
cmp
adc
bound
push
ds
add
jp
dec
xchg
sbb
out
jle
mov
hlt
movs
mov
mov
adc
sbb
inc
mov
fwait
xchg
xor
mov
or
data16
aaa
or
dec
call
sbb
mov
cmp
jecxz
xor
push
push
js
xor
adc
push
es
xchg
pop
cmovo
stos
xor
dec
and
jb
retf
adc
adc
call
or
mov
loope
or
movs
xor
mov
jb
pop
test
mov
into
(bad)
jmp
sbb
daa
pop
and
loop
mov
adc
add
stos
xchg
sbb
(bad)
pop
or
out
(bad)
div
pop
rol
sub
daa
mov
rcl
jmp
das
dec
test
pop
and
jp
sbb
loop
scas
sub
rcr
push
call
and
jae
sub
retf
daa
push
add
add
jge
dec
xchg
cs
push
(bad)
dec
aam
push
pop
xchg
movs
push
mov
pop
sub
retf
sub
jbe
mov
push
enter
add
je
les
scas
imul
xchg
cmp
mov
and
es
pop
cmp
ret
cs
or
ror
das
add
cmps
retf
fld
pop
mov
loop
jp
inc
jae
push
or
mov
cmp
cmps
mov
sbb
bound
add
ror
adc
rcr
sbb
jle
(bad)
and
add
dec
dec
das
loopne
xchg
adc
into
movs
push
sub
not
ss
jmp
mov
push
dec
popa
ins
adc
sub
fcom
ret
jmp
ror
xlat
cmps
outs
and
sahf
pop
loopne
hlt
add
sub
xchg
or
push
js
repnz
not
aam
mov
faddp
test
fimul
sahf
xchg
add
scas
and
sub
xchg
push
xor
stos
cmps
test
inc
jo
call
mov
cmps
repnz
and
push
mov
cmp
retf
add
jg
pop
mov
cmp
mov
repnz
and
ds
jmp
push
inc
and
inc
sbb
scas
xchg
inc
or
into
popa
sbb
jne
call
add
push
sbb
movs
jnp
sbb
inc
jle
pop
adc
sahf
mov
push
fiadd
xor
loop
lods
lods
add
mov
adc
sub
sub
test
mov
xor
outs
mov
ins
and
mov
jbe
pop
inc
dec
inc
push
push
adc
sub
js
and
inc
sbb
mov
neg
dec
sbb
rcr
mov
mov
cmp
pop
(bad)
mov
addr16
clc
(bad)
mov
adc
bound
(bad)
leave
push
cmp
ss
loop
pop
mov
add
dec
mov
mov
sub
retf
dec
cli
xor
dec
pop
adc
pop
enter
mov
sbb
add
inc
scas
enter
nop
or
mov
ret
not
fld
xchg
xchg
jb
test
push
inc
mov
pop
mov
(bad)
jge
jp
rcl
inc
sbb
pop
mov
mov
or
push
xchg
mov
loopne
lea
(bad)
pop
sbb
(bad)
jbe
ret
jo
mov
xchg
add
xor
mov
popa
popf
in
into
jb
not
fcom
mov
mov
or
sahf
mov
ficomp
pop
nop
dec
mov
(bad)
shr
xchg
ret
data16
imul
outs
fcomp
mov
retf
push
mov
pop
jp
pop
ret
xor
sbb
sub
jge
or
cmp
push
mov
sub
loopne
stos
dec
or
or
and
jle
xchg
pop
inc
jmp
cmp
add
imul
bound
mov
fcomp
mov
cli
(bad)
loope
loopne
push
xchg
mov
and
xchg
fisub
xor
mov
fdivr
xor
dec
sbb
cs
jle
or
push
stos
mov
mov
out
sbb
outs
mov
mov
push
and
or
or
fwait
jo
inc
ret
cmp
fiadd
push
test
or
inc
cli
daa
mov
add
daa
pop
cmps
push
push
push
in
imul
xor
and
adc
pop
push
adc
add
fiadd
movs
push
(bad)
fisub
xor
(bad)
iret
or
or
pop
das
add
sbb
sbb
js
push
les
stos
mov
es
outs
adc
pusha
add
xor
mov
jecxz
(bad)
cmps
or
test
mov
mov
sbb
ds
jmp
xchg
mov
mov
out
push
nop
lock
loopne
push
rol
popa
jno
adc
mov
jmp
xchg
add
or
adc
or
cmp
popf
sbb
cs
js
daa
(bad)
pop
add
add
inc
movs
sahf
stos
ret
pop
inc
and
and
call
push
add
inc
push
push
sar
inc
dec
imul
or
fcmovnbe
add
sbb
lahf
dec
inc
pop
adc
bound
or
test
xchg
xchg
daa
xor
aas
or
test
push
add
jp
mov
add
add
stos
push
xor
aas
out
sbb
or
lods
xor
mov
xor
jno
xor
inc
add
js
arpl
push
cmp
rcr
cmp
pop
repnz
enter
loopne
dec
xchg
or
out
retf
adc
adc
mov
jbe
retf
push
enter
pushf
sbb
dec
mov
mov
xchg
inc
sub
pop
pop
mov
cmps
pop
jo
ins
cmps
mov
sar
clc
scas
pop
sbb
pushw
xchg
js
popa
pop
add
xor
dec
cli
mov
mov
es
test
sar
inc
retf
into
movs
test
push
mov
inc
mov
out
inc
cmp
(bad)
out
ds
add
xchg
ror
sub
push
inc
loopne
mov
xor
mov
mov
imul
add
and
shl
push
xchg
out
or
mov
or
(bad)
xchg
(bad)
sub
dec
xchg
pusha
add
inc
das
call
add
jmp
sub
mov
dec
dec
push
dec
or
and
(bad)
sub
adc
jp
jb
(bad)
dec
out
cmc
and
push
or
or
sahf
es
mov
shl
jb
sub
shl
or
ficom
popa
inc
jge
data16
sub
sbb
push
mov
sbb
sbb
les
repnz
retf
ret
xchg
popa
test
nop
mov
mov
push
jp
test
cmp
cmp
cmc
and
outs
outs
add
movs
mov
push
mov
ins
jne
adc
leave
push
(bad)
out
push
jno
rol
imul
jo
pop
outs
mov
sbb
jb
dec
sub
sbb
fiadd
inc
and
sub
into
into
xchg
pop
outs
jmp
push
push
dec
jmp
add
call
dec
rol
and
dec
mov
cmp
add
sbb
mov
fiadd
adc
xor
scas
mov
push
dec
js
or
repnz
(bad)
retw
dec
cmp
xchg
stos
sbb
pop
loopne
or
pop
ins
arpl
add
icebp
inc
sub
(bad)
bound
xor
jb
mov
push
xor
ret
loope
xor
xchg
or
rol
and
pusha
mov
sbb
xchg
out
add
add
mov
imul
and
jmp
pop
(bad)
inc
cmp
jle
(bad)
add
scas
pop
js
cmp
ret
js
es
or
cdq
or
mov
pop
xchg
sbb
push
clc
sbb
pop
add
ins
xor
mov
or
sbb
mov
sbb
(bad)
(bad)
ss
rcr
fnstcw
leave
pop
xchg
sbb
xchg
adc
sbb
stos
sub
stos
stos
xchg
rcr
ret
into
sbb
sub
add
jne
xor
mov
or
or
cmp
addr16
or
scas
xor
jmp
xor
test
and
or
jnp
movs
jp
outs
push
mov
push
fisubr
jle
or
jp
or
mov
mov
shl
pop
or
retf
(bad)
bound
xchg
jle
in
rol
mov
cwde
or
mov
inc
cmp
lea
sbb
inc
sub
and
sahf
mov
(bad)
and
fadd
pop
jmp
and
adc
pop
push
ret
ret
xor
cmc
push
and
dec
add
ret
mov
jb
push
jno
jno
push
pop
inc
ret
cmp
dec
or
cmp
push
or
adc
cs
lods
imul
test
fsubr
push
inc
test
ret
xor
(bad)
xor
inc
cmp
cmp
xchg
cmc
and
mov
rcr
js
ss
sahf
cli
js
ins
pop
jg
fild
push
mov
mov
push
jle
add
js
fwait
sbb
cli
adc
pusha
mov
ret
add
scas
outs
rol
pop
add
add
push
repnz
pop
xor
push
fidivr
hlt
loope
(bad)
xchg
cwde
add
add
call
push
add
dec
(bad)
dec
aaa
stos
(bad)
jb
pop
sub
pop
(bad)
sahf
cwde
mov
addr16
iret
rcl
push
add
and
rol
into
cli
jb
dec
iretw
cmps
fwait
mov
dec
loopne
stos
shl
jb
popa
pushf
into
scas
xchg
mov
mov
dec
aas
das
and
push
inc
push
sub
xor
es
jmp
lock
out
mov
and
repnz
neg
ins
mov
jo
dec
mov
sbb
mov
les
out
sub
push
xor
dec
ret
add
mov
dec
mov
jmp
inc
and
pusha
xor
dec
and
or
sub
jle
mov
pop
(bad)
jmp
sbb
cmp
out
xchg
inc
mov
push
sti
push
ret
sbb
add
sti
cmp
and
sahf
repnz
loope
push
loop
push
dec
icebp
xor
mov
bound
fadd
mov
add
sub
cmp
xor
fbld
xchg
ret
(bad)
mov
fidivr
shl
inc
mov
rcl
xor
and
mov
sub
jp
fimul
call
jp
sub
inc
add
scas
mov
xchg
popa
mov
test
(bad)
rol
ret
jbe
push
xchg
adc
pop
jle
call
add
cmp
dec
fmul
rcl
add
pop
xchg
push
ss
ss
arpl
or
shl
add
add
loopne
add
sub
or
xor
pop
(bad)
cmp
sub
jle
push
xor
mov
or
push
add
mov
jmp
add
sub
(bad)
pop
ret
js
push
cmp
arpl
jge
loop
mov
dec
mov
push
push
push
mov
xchg
dec
dec
mul
cmp
and
push
(bad)
enter
sub
and
into
scas
sub
sub
pop
push
pop
mov
xor
adc
mov
jbe
pop
(bad)
sahf
jmp
jle
jmp
ins
loopne
inc
stos
cwde
push
jnp
addr16
dec
rcr
or
and
les
jle
loop
xchg
jo
jbe
mov
mov
pop
push
add
xor
cli
cmp
or
mov
push
inc
jne
popa
dec
ret
adc
test
leave
adc
or
lods
mov
add
(bad)
loopne
es
push
dec
push
mov
cmp
pusha
jp
sahf
(bad)
aam
pop
pop
xor
retf
xchg
add
inc
mov
jo
mov
scas
inc
es
sbb
rcl
arpl
loopne
ds
xor
xchg
pusha
cmp
fldz
stos
xor
adc
clc
pop
dec
mov
icebp
mov
sbb
adc
ds
mov
dec
add
mov
scas
fbld
cmps
mov
nop
shl
pop
cmp
hlt
ror
or
xor
mov
sub
cwde
jno
dec
push
sar
and
es
adc
xor
mov
mov
nop
push
mov
xor
jb
fdivr
sbb
ret
je
jb
push
and
and
or
inc
jp
cmps
ror
push
call
(bad)
out
dec
xor
repnz
pop
dec
js
das
add
xor
mov
or
ret
sub
or
shl
jmp
call
mov
sub
mov
(bad)
xchg
dec
mov
inc
sub
sahf
cli
xor
pop
push
nop
cmp
fst
out
(bad)
pop
add
ret
sbb
or
sbb
inc
adc
push
dec
out
mov
imul
pusha
pop
mov
cwde
mov
xor
dec
xor
rcr
mov
xchg
sahf
mov
shl
mov
jb
sbb
nop
xchg
in
adc
or
outs
pop
jo
(bad)
pop
into
pop
call
push
neg
cmps
pop
(bad)
fdivrp
or
inc
inc
push
out
ins
popf
or
into
loop
cdq
loope
sbb
sub
ins
inc
jnp
data16
adc
push
xchg
sbb
push
mov
cmp
pop
push
xor
ds
cmp
inc
push
pop
ret
out
jo
cmp
inc
mov
in
add
ret
imul
sahf
mov
sbb
push
lds
test
jmp
repnz
loope
jmp
xchg
pop
sahf
sub
or
pop
jbe
and
push
jp
out
cmps
xor
(bad)
cli
stos
retf
(bad)
mov
rcl
cmp
and
mov
cmp
out
xor
neg
mov
adc
(bad)
mov
push
sub
idiv
mov
mov
dec
adc
mov
call
sub
push
dec
mov
pop
arpl
sub
push
mov
sahf
out
dec
or
add
push
fidiv
push
mov
mov
push
addr16
mov
dec
bound
inc
test
sbb
mov
es
rcl
dec
outs
je
call
das
inc
xor
movs
or
jl
jno
ds
mov
mov
scas
shr
das
cmp
cmp
inc
mov
dec
mov
pop
add
xchg
popf
and
cmps
loop
adc
add
adc
out
sbb
sbb
nop
xchg
sbb
aaa
mov
add
push
imul
mov
cmovo
and
adc
xchg
fmul
inc
repnz
xor
pop
popf
mov
outs
loop
and
rol
mov
push
cmp
test
les
sbb
or
fwait
shr
dec
mov
mov
sbb
xchg
add
clc
ss
mul
fld
rol
sub
jo
inc
(bad)
adc
push
int3
leave
or
or
adc
xor
retf
jbe
mov
loope
push
mov
jl
dec
popa
mov
and
shl
and
mov
retf
outs
jb
push
aam
sar
mov
outs
loopne
or
mov
aad
xor
add
scas
or
mov
or
push
retf
sbb
push
mov
mov
ds
adc
adc
arpl
push
sbb
loope
mov
loopne
adc
cmp
dec
or
mov
xchg
movs
or
push
(bad)
dec
push
and
outs
mov
js
jb
retf
loopne
jg
add
sbb
add
(bad)
inc
jp
adc
mul
(bad)
mov
or
mov
(bad)
and
ss
sub
loop
mov
add
pop
lock
movs
and
mov
fadd
push
push
(bad)
loop
mov
xor
fnstcw
or
pop
sar
add
pop
arpl
lods
test
adc
loop
pop
mov
stos
jle
xor
xor
mov
xchg
ret
hlt
xchg
push
jb
and
add
loope
mov
es
fcmovb
push
mov
and
repnz
inc
dec
(bad)
(bad)
add
xchg
adc
sub
cli
lahf
and
inc
cs
cwde
leave
rol
mov
(bad)
rcl
mov
sub
jbe
movs
add
scas
iret
jbe
aam
mov
mov
inc
lods
aaa
and
(bad)
fs
xor
daa
retf
into
les
jmp
pop
add
(bad)
xchg
adc
js
cli
push
push
cmp
pop
mov
push
mov
adc
les
inc
stos
add
mov
cs
mov
inc
ret
call
imul
or
sub
dec
add
jo
enter
and
mov
add
push
pop
jp
cwde
add
ret
in
pop
outs
add
dec
retf
adc
add
push
jmp
cmp
jp
popa
and
scas
and
or
repnz
mov
mov
sti
sbb
add
test
cli
fild
adc
and
retf
(bad)
push
mov
pop
xchg
enter
adc
dec
ret
rcr
repnz
fcmovu
ret
fcmovu
sti
sbb
cmp
scas
and
and
inc
call
dec
xchg
arpl
mov
outs
and
push
retf
xchg
mov
or
sub
cs
adc
and
rol
call
jle
sub
sbb
loopne
sbb
adc
rcr
xchg
sub
dec
mov
and
push
cmp
cmp
inc
pop
push
scas
repnz
mov
mov
xchg
push
(bad)
les
dec
sub
ror
sbb
hlt
and
jb
adc
push
pop
pop
mov
xchg
jp
repnz
sbb
push
and
mov
leave
sahf
(bad)
(bad)
pop
ds
in
(bad)
loop
dec
mov
test
movs
xor
fs
push
loop
bound
ret
sbb
fidiv
(bad)
jge
sub
into
inc
dec
mov
pop
mov
daa
or
out
hlt
and
mov
clc
and
dec
pusha
push
scas
xlat
mov
(bad)
cmp
inc
ss
xchg
xor
mov
adc
sbb
add
add
add
xor
pushf
movs
adc
fcom
mov
(bad)
pop
sbb
sahf
adc
sbb
retf
ins
lods
push
(bad)
es
sub
pop
push
and
pop
cs
fisubr
push
repnz
inc
sub
pop
inc
cmps
sbb
push
xor
out
movs
daa
add
xchg
push
imul
leave
into
cmp
xor
adc
add
xor
inc
icebp
push
(bad)
rcr
ret
or
pop
add
ficom
dec
sbb
mov
cmps
adc
sub
loopne
push
mov
push
push
into
xchg
add
loopne
ret
stos
cs
xor
push
cs
out
and
scas
sahf
not
movs
xchg
ss
jbe
ins
and
xor
cmp
adc
cmp
jp
pop
call
imul
xor
push
sbb
out
ret
pusha
iret
sahf
sbb
rol
lock
loope
scas
(bad)
stos
jo
push
xchg
jle
inc
pop
push
sub
or
xchg
or
push
shr
sub
jmp
add
push
mov
add
call
loopne
xchg
sbb
mov
test
loopne
mov
add
sub
movs
cmp
pop
mov
push
dec
sbb
dec
mov
push
push
mov
(bad)
aas
xor
mov
sub
push
mov
dec
shr
pop
or
sub
pusha
add
(bad)
push
mov
xor
xchg
stos
jp
mov
pusha
ss
retf
aaa
fisub
rol
dec
retf
scas
xor
pusha
movs
add
fild
ror
loop
cmp
dec
jns
mov
(bad)
adc
mov
cmps
mov
mov
pop
jbe
jbe
aam
cmp
push
mov
push
and
mov
adc
and
fmul
rol
dec
outs
scas
xchg
ss
test
or
mov
push
adc
jmp
mov
xor
xchg
dec
sbb
adc
inc
outs
pop
mov
dec
retf
and
jno
add
sub
push
ds
bound
cwde
test
add
ss
mov
or
(bad)
fwait
and
scas
sahf
jb
inc
jb
xchg
sbb
es
dec
inc
dec
mov
mov
sbb
xor
push
test
loop
ds
fsubrp
(bad)
mov
(bad)
adc
out
out
movs
fs
add
test
jb
and
mov
mov
inc
inc
ror
popf
or
out
cmp
xabort
push
(bad)
fld
retf
lods
dec
cmp
les
xchg
bound
mov
dec
push
mov
jb
push
inc
cmp
cmp
ficom
pop
dec
mov
(bad)
xchg
lock
mov
imul
repnz
cli
push
push
nop
pusha
jle
dec
sbb
gs
js
addr16
inc
mov
or
mov
push
outs
enter
cmc
mov
fcmovbe
mov
test
data16
ret
sub
bound
adc
cs
mov
xor
ror
xor
(bad)
push
jecxz
mov
dec
dec
cmp
fs
xchg
mov
and
or
mov
add
stos
xchg
sub
clc
push
xchg
jo
xchg
push
call
dec
cmp
mov
out
dec
or
imul
push
sub
pop
rol
das
sbb
push
fimul
adc
fiadd
xchg
test
pushf
push
test
xchg
mov
jbe
scas
bound
cmp
sbb
push
sbb
scas
cs
sub
sub
push
addr16
pushf
(bad)
neg
push
ss
(bad)
xchg
pop
faddp
push
and
scas
jle
push
loopne
lods
dec
into
xor
push
dec
inc
xchg
pop
push
sbb
mov
ins
mov
adc
dec
jp
pop
mov
cmp
rcl
inc
ss
mov
ret
(bad)
mov
xchg
jns
dec
jle
popa
bound
mov
(bad)
jg
pop
rcl
pusha
add
out
xchg
loopne
push
xor
(bad)
hlt
cmp
adc
xlat
mov
sub
sbb
push
clc
mov
xor
push
add
cli
retf
(bad)
jmp
jb
mov
les
arpl
mov
loopne
xchg
adc
movs
ret
retf
inc
sbb
dec
lea
stos
nop
xchg
(bad)
push
or
push
jle
cmps
cmps
sub
dec
(bad)
pop
or
mov
push
xchg
sbb
es
lods
in
es
lods
sub
(bad)
sbb
into
sbb
popa
add
loopne
inc
pop
sti
jo
icebp
cmps
push
jae
mov
dec
ficom
aam
xchg
dec
mov
add
add
or
add
jle
cs
mov
pop
xchg
mov
rol
scas
or
femms
jg
add
dec
add
mov
add
inc
sub
test
and
pop
into
fdivrp
out
xchg
(bad)
into
adc
mov
xor
jmp
push
fbld
addr16
cmp
loop
rcl
outs
ror
xor
xor
repnz
das
popa
je
scas
pop
jg
xchg
aad
(bad)
xor
add
mov
add
cmp
mov
mov
push
push
ror
jle
(bad)
mov
out
inc
lea
test
ds
xlat
add
and
adc
cmp
popa
daa
push
push
push
mov
out
jmp
repz
xchg
js
mov
cli
ret
test
loope
jp
xor
pop
mov
xchg
sbb
push
mov
or
add
sahf
sar
repnz
push
(bad)
sub
es
ss
push
dec
pop
dec
dec
push
xor
(bad)
adc
mov
dec
inc
sub
or
fisubr
into
mov
add
data16
(bad)
xchg
mov
dec
or
dec
movs
es
cs
mov
pop
adc
daa
es
mov
xor
test
lods
inc
push
or
xchg
push
scas
xor
sbb
push
(bad)
jp
add
inc
add
xlat
cmp
loop
loopne
jmp
dec
add
inc
outs
sbb
and
push
xor
xchg
xor
or
aas
jo
inc
pop
cvtps2pd
push
add
jg
mov
sbb
adc
or
inc
fadd
sub
jb
xchg
add
xchg
fiadd
das
ror
into
(bad)
xor
pop
dec
xor
mov
test
int
test
mov
into
adc
ror
push
icebp
xor
add
xor
dec
inc
jnp
mov
xchg
div
out
sbb
ds
adc
daa
js
cmp
jne
call
or
dec
sbb
dec
outs
ror
cs
or
ss
mov
pop
mov
xchg
xor
xchg
into
outs
cmp
(bad)
in
xor
sub
test
sar
sbb
jne
sbb
adc
data16
sub
div
inc
sub
or
rcl
push
fisubr
jo
add
ds
push
mov
int3
pusha
mov
dec
jecxz
jp
xchg
retf
xchg
push
stos
xchg
ds
cmp
xchg
fidiv
xchg
(bad)
push
xchg
xor
adc
fwait
push
push
adc
into
and
inc
push
inc
(bad)
jle
xchg
add
add
cmps
adc
sahf
xor
into
js
pop
pop
mov
add
ds
ret
test
ret
sbb
xchg
popa
fs
lock
or
out
mov
mov
add
sbb
xchg
cmp
rol
mov
test
ds
xacquire
fmul
lods
mov
pop
icebp
and
pop
xchg
pop
mov
cmp
loop
jb
movs
cmp
sbb
fisubr
xchg
add
into
mov
loop
es
pop
sub
outs
sub
loop
loop
inc
pop
nop
js
jbe
sub
pop
xor
call
mov
pop
rol
sub
sub
mov
inc
xor
popa
or
push
adc
(bad)
or
jle
jo
cmc
mov
rol
xor
(bad)
stos
shl
je
fidiv
push
mov
xor
inc
mov
xchg
inc
lods
push
sbb
xchg
fidiv
ret
adc
mov
inc
fs
out
cmp
xor
jp
cmp
add
inc
test
fisub
or
shl
adc
xor
test
pop
jle
inc
xchg
or
out
jmp
and
push
pushf
and
or
(bad)
mov
jb
jmp
xchg
mov
or
mov
sub
lods
bound
xchg
cwde
icebp
xchg
jne
inc
into
cli
mov
mov
and
mov
lods
inc
adc
jp
push
xchg
or
cmp
and
add
pushf
add
sbb
outs
aaa
mov
jno
inc
out
mov
inc
mov
mov
xchg
pop
jecxz
lea
pusha
outs
leave
scas
push
outs
mov
arpl
bound
add
sbb
(bad)
add
inc
adc
(bad)
fwait
adc
jmp
(bad)
adc
cmps
mov
in
dec
pop
jg
in
and
dec
ficomp
mov
in
add
fidivr
popf
add
jo
loop
mov
mov
add
add
out
repnz
xchg
ins
and
or
pop
mov
xor
js
sbb
lea
test
scas
scas
inc
outs
cmp
shr
or
js
dec
outs
out
push
cmp
adc
and
push
movzx
js
int3
data16
call
(bad)
shr
cmp
and
xchg
inc
adc
das
dec
add
jbe
dec
push
imul
sar
les
mov
dec
cs
rcr
cs
or
not
pop
or
add
movs
movs
(bad)
sbb
or
inc
pop
push
adc
push
es
sub
jle
add
idiv
mov
push
outs
loopne
and
sub
inc
or
cli
xchg
mov
imul
rcr
movs
mov
mov
push
pushf
mov
xor
xchg
mov
pop
into
mov
mov
into
xchg
or
inc
sub
mov
loop
cmp
inc
psubsw
adc
dec
cmp
push
push
movs
xor
loopne
xchg
cmp
shl
pop
mov
out
es
dec
ret
sar
inc
je
add
sub
(bad)
loop
nop
and
cmp
push
push
jecxz
enter
pushf
adc
push
sub
cmps
sbb
pop
or
pop
push
and
mov
jne
push
ficomp
retfw
and
mov
enter
cmp
push
scas
sbb
sbb
push
push
rcr
repnz
pop
mov
mov
(bad)
mov
cmp
sbb
repnz
mov
adc
pop
cmp
into
icebp
mov
cs
psllq
and
xor
add
fwait
cli
repnz
xchg
mov
pop
inc
cmps
mov
add
adc
jae
mov
mov
rcl
es
push
jmp
data16
xor
jle
push
push
imul
xchg
dec
movs
xchg
pop
dec
mov
cmp
add
inc
jmp
xor
pop
enter
push
leave
pop
lods
dec
sahf
jle
(bad)
xor
sbb
push
dec
icebp
xchg
ret
add
dec
test
sbb
inc
outs
dec
adc
cmp
push
mov
es
(bad)
xchg
retf
or
xor
xchg
push
into
jmp
adc
rcr
sbb
sbb
scas
(bad)
and
sahf
scas
dec
adc
pop
mov
adc
sub
xchg
mov
pushf
cmp
scas
into
jo
pushf
add
mov
mov
add
sahf
push
popa
gs
push
call
es
lods
lds
test
dec
sahf
mov
jle
das
pusha
rol
cmp
xchg
jmp
ret
add
rcl
or
scas
pushf
jp
or
pop
push
popf
jecxz
ret
inc
data16
es
push
or
data16
jmp
nop
loope
jbe
ds
and
jmp
dec
loopne
loop
call
cli
push
mov
push
or
scas
add
mov
fs
je
inc
mov
imul
jp
call
jo
call
repnz
cmps
test
mov
into
fisub
pop
sbb
mov
push
rcr
xchg
pushf
or
sbb
mov
adc
mov
xchg
out
add
test
rol
dec
or
jb
pop
pusha
sub
rol
shl
enter
pushf
shl
push
jmp
movs
mov
xor
add
dec
pusha
mov
scas
inc
imul
xor
mov
test
jle
push
or
jb
dec
sahf
xchg
aad
add
sub
mov
ror
loop
jo
and
add
mov
imul
cmp
out
fcomp
ds
add
and
movs
les
adc
les
jmp
mov
jb
push
push
sub
outs
jecxz
ret
or
loopne
add
sbb
pop
data16
xchg
fidivr
movs
dec
inc
sbb
sub
cmps
in
add
xchg
fcmovb
lods
sub
mov
add
fistp
cmp
push
scas
jnp
and
push
adc
inc
ss
ret
push
je
jno
push
sahf
in
mov
and
mov
pushf
and
sbb
push
(bad)
adc
adc
inc
adc
dec
push
pop
es
lea
test
xchg
xchg
sub
jo
mov
push
xor
cmp
rcr
cmp
loop
jbe
xchg
sahf
push
call
inc
nop
or
pusha
mov
(bad)
mov
cmp
adc
(bad)
(bad)
xor
cmp
push
xchg
ret
pop
popa
or
sbb
loope
retf
add
pop
pop
arpl
mov
push
scas
lahf
imul
lock
jle
mov
mov
mov
sahf
add
sbb
jne
or
push
cmp
sbb
nop
addr16
xchg
xchg
in
adc
mov
ss
inc
movs
xchg
jbe
or
lock
es
fcmove
mov
fisub
mov
push
jmp
sub
adc
js
mov
arpl
outs
add
xor
jne
enter
pop
cmp
push
in
cmp
stos
xchg
push
add
xor
in
shl
add
mov
imul
dec
push
sbb
fisub
mov
call
mov
mov
inc
sub
inc
jg
mov
cmp
pop
ret
add
xchg
push
cmp
outs
push
sahf
mov
dec
retf
mov
or
cdq
loop
mov
cs
adc
imul
mov
add
push
adc
jbe
(bad)
aaa
add
push
(bad)
adc
pop
add
adc
jmp
or
sub
dec
push
add
sbb
lods
dec
faddp
mov
stos
or
jmp
or
(bad)
push
dec
mov
inc
cmp
sbb
mov
add
and
add
push
fimul
push
dec
inc
dec
out
push
bound
xchg
mov
loop
call
inc
add
fstp
das
cli
retf
adc
data16
ja
or
pop
test
push
out
pop
cs
sub
cdq
sbb
and
cmp
sub
xor
jno
loope
cmps
enter
ret
shr
hlt
add
(bad)
cwde
repnz
fisubr
dec
xor
mov
push
jmp
outs
test
push
inc
lea
mov
pop
dec
fcom
inc
add
push
and
adc
and
push
adc
push
sub
dec
sbb
sysret
push
pop
or
rcl
sahf
call
jp
push
or
adc
idiv
xor
push
das
loope
mov
sub
mov
sahf
sbb
pop
add
inc
pop
in
pop
push
pop
pop
mov
push
push
mov
cli
dec
pushf
popf
test
ficom
or
(bad)
mov
test
pop
lods
mov
xor
loop
adc
xchg
call
pusha
jne
and
add
dec
xchg
cs
test
push
jo
or
ret
push
outs
sbb
(bad)
call
jb
dec
xchg
pop
pop
mov
mov
push
in
push
add
pop
pop
sbb
and
div
(bad)
repnz
call
pop
rcr
sub
loopne
add
mov
(bad)
jle
sbb
outs
cwde
mov
cmc
xchg
inc
mov
add
imul
ret
sbb
and
pop
add
push
into
push
add
add
add
xor
inc
repnz
and
mov
les
les
xor
push
adc
das
shl
mov
retf
sbb
cmps
sbb
arpl
inc
xor
push
loope
add
aam
(bad)
sti
adc
pusha
sub
add
xchg
or
jecxz
repnz
out
call
add
adc
mov
mov
loope
popa
sbb
and
xchg
adc
jb
inc
and
neg
(bad)
xchg
sub
dec
popa
add
push
rol
int
mov
dec
cmp
cs
and
sbb
popa
add
sbb
push
mov
mov
sbb
sar
pop
dec
adc
call
ja
add
add
or
(bad)
adc
cmp
jmp
jb
pusha
add
or
sbb
ds
and
push
fild
adc
add
data16
mov
sbb
pslld
loop
mov
mov
loope
out
add
pusha
cmps
jp
push
and
xchg
scas
inc
loopne
cmp
dec
call
out
xchg
xor
push
into
mov
cs
add
jle
ret
jmp
test
push
daa
jae
in
xchg
pop
mov
pop
into
sbb
sbb
cmps
adc
sbb
scas
push
push
mov
mov
inc
xchg
sub
test
add
(bad)
ss
or
xor
test
sub
mov
fisub
jbe
mov
push
ss
mov
inc
retf
loop
push
or
push
adc
inc
inc
iret
inc
sbb
fimul
mov
mov
dec
sbb
sbb
inc
or
sbb
leave
xchg
xchg
adc
xor
jo
add
(bad)
mov
push
cli
(bad)
and
and
add
sub
ret
popa
or
outs
scas
loop
sbb
das
cmps
pusha
mov
adc
adc
scas
add
inc
mov
sahf
jle
js
add
jle
ret
out
push
add
scas
retf
inc
movups
push
jp
sbb
test
mov
push
inc
xchg
cwde
jb
jmp
mov
or
mov
ret
and
ret
cs
sub
and
mov
out
cmp
or
pop
fidiv
sub
add
int3
mov
dec
sbb
imul
sbb
or
lods
ja
sbb
and
push
fstp
ror
cli
jbe
adc
ror
or
mov
xchg
mov
jo
icebp
jb
dec
lods
and
xlat
mov
or
outs
repnz
loopne
or
pop
dec
mov
inc
and
lods
adc
or
mov
push
mov
add
add
mov
dec
and
push
(bad)
arpl
add
push
pusha
or
push
pop
repz
adc
mov
adc
test
xor
ret
pop
adc
scas
and
js
xor
ds
inc
lsl
sahf
dec
xor
call
sub
sbb
add
cmp
jno
popa
pop
and
pop
retf
and
dec
arpl
(bad)
push
es
stos
add
je
imul
or
pop
add
mov
pusha
dec
pop
and
popa
pop
idiv
xor
mov
mov
pop
inc
xchg
loopne
push
pop
ds
sbb
jmp
enter
xchg
sbb
cmps
dec
add
cmp
aam
xchg
jle
push
ss
dec
pusha
mov
mov
and
jbe
ds
jmp
leave
add
sub
retf
cdq
rcl
rcl
lock
xlat
xchg
js
push
xor
sub
mov
call
mov
sbb
or
dec
outs
push
cmps
and
retf
mov
mov
dec
rcl
sbb
inc
cmp
movs
sahf
loop
push
rol
cmps
jle
xchg
push
shr
sub
fidivr
cwde
mov
out
push
and
mov
inc
inc
lea
call
les
sbb
xchg
push
xor
icebp
adc
stos
cs
(bad)
in
ret
jle
xor
mov
dec
inc
or
mov
pop
outs
jmp
dec
scas
sbb
xor
and
sahf
jp
sbb
sub
ficomp
mov
loope
sbb
xor
sbb
xchg
xor
mul
shl
mov
mov
dec
js
mov
scas
jbe
aaa
dec
pop
dec
repnz
inc
js
push
sti
(bad)
mov
cs
cmp
or
imul
xchg
mov
out
aam
dec
mov
fiadd
xchg
or
xor
xchg
ret
mov
pop
outs
dec
push
neg
popa
and
sub
ins
mov
mov
imul
mov
adc
and
sub
jb
dec
sub
jp
mov
dec
dec
jmp
mov
(bad)
bound
rol
sbb
dec
push
dec
cmp
sbb
retf
sar
test
push
sar
mov
jb
jmp
push
jmp
push
xor
data16
arpl
or
pop
out
sub
bound
call
push
xor
ds
add
or
sahf
sbb
test
sub
cli
jnp
cmp
mov
aam
sub
adc
dec
xchg
add
mov
push
movs
and
sub
sbb
dec
inc
dec
mov
or
push
ror
into
adc
sbb
into
push
add
dec
sahf
es
add
push
or
add
es
push
mov
inc
push
adc
retf
sahf
jmp
es
push
push
or
neg
and
adc
mov
rol
and
and
mov
sbb
test
add
pop
sub
sahf
es
test
jb
or
sub
cdq
mov
xchg
mov
jp
xchg
adc
les
cmp
add
xchg
xchg
xchg
repnz
sbb
jne
inc
sahf
and
(bad)
bound
pop
outs
push
shl
loope
mov
mov
or
mov
or
ret
outs
sub
js
mov
adc
inc
xor
jecxz
xchg
xor
out
shr
fiadd
js
sbb
repnz
add
call
dec
adc
cli
push
(bad)
(bad)
leave
outs
cmp
push
push
add
mov
xor
aam
add
mov
fadd
add
rcl
xor
push
push
cs
lea
adc
dec
push
dec
or
daa
out
out
bound
pusha
scas
jle
ds
data16
mov
add
xchg
sub
jmp
(bad)
sbb
loopne
dec
dec
add
add
xchg
mov
xchg
out
dec
add
sbb
cmps
xchg
xchg
pop
push
or
scas
mov
xor
dec
arpl
dec
cli
scas
push
sub
mov
call
xor
push
pop
jo
sbb
div
adc
(bad)
sub
(bad)
es
call
enter
sahf
test
sub
mov
and
jg
sub
sbb
in
inc
loopne
pop
sbb
mov
sbb
or
imul
in
test
inc
pusha
ret
mov
cmp
jp
fidiv
test
jnp
push
call
mov
mov
cmp
ret
jae
ret
cwde
mov
retf
sbb
cmp
add
sub
inc
ret
fiadd
retf
lock
imul
mov
add
xchg
rol
push
sbb
loop
sbb
shr
out
sub
pop
cdq
cs
cs
and
xor
rol
repnz
jmp
sahf
rcl
arpl
adc
dec
cli
mov
mov
add
xor
dec
loope
dec
jb
and
pusha
mov
sub
mov
add
ss
imul
mov
ss
fisub
mov
loop
dec
adc
or
bound
test
or
mov
mov
mov
fld
(bad)
retf
and
push
das
dec
xchg
pop
jb
inc
pop
dec
es
adc
inc
aam
fild
xchg
into
push
adc
pop
ss
pusha
sahf
adc
adc
shl
bswap
call
mov
or
add
sar
rol
mov
push
dec
bound
jmp
loop
xor
in
lahf
jnp
ret
retf
cmps
lock
or
dec
inc
push
cmp
or
xor
movs
cmc
jmp
push
mov
mov
add
jge
pop
pop
xchg
inc
mov
sub
mov
mov
jb
inc
retf
jne
pushf
(bad)
pop
cs
loope
into
and
cmp
rcl
sub
or
mov
dec
sub
cmps
sbb
mov
(bad)
cmp
and
pop
enter
dec
dec
icebp
cmp
sbb
dec
and
mov
enter
cmps
or
sub
jbe
push
mov
ret
mov
dec
nop
loope
ret
xchg
fcomp
push
push
mov
add
add
mov
adc
push
cmps
arpl
sub
les
jp
js
dec
js
js
(bad)
push
movmskps
fiadd
push
dec
push
hlt
dec
jecxz
call
pop
(bad)
dec
mov
or
push
ret
or
push
add
push
add
xchg
xor
pusha
cmp
outs
data16
test
cmp
ss
jmp
sbb
dec
addr16
stos
loopne
nop
add
push
pop
add
pusha
push
push
dec
out
mov
fcomp
push
cs
xchg
adc
xchg
cli
inc
rcr
iret
cs
sub
dec
push
popa
imul
push
mov
or
xor
ret
sbb
loope
push
push
inc
adc
cmp
push
or
mov
and
or
and
(bad)
call
sahf
xchg
sbb
mov
xchg
xor
add
jno
adc
arpl
push
adc
call
ret
call
bound
lahf
(bad)
add
xor
dec
push
es
lock
jp
lea
push
out
lods
jno
xchg
mov
sub
inc
push
mov
add
shl
popf
and
pusha
imul
mov
xor
dec
aam
mov
(bad)
data16
xchg
jle
xchg
nop
inc
inc
mov
cmp
pop
mov
outs
push
jmp
loop
call
cwde
mov
ds
cmp
or
pop
fisttp
dec
dec
scas
jp
jp
daa
jmp
pop
nop
sbb
push
loopne
and
mov
(bad)
adc
mov
lods
add
dec
push
rcr
pop
test
push
dec
lock
jne
mov
retf
mov
xchg
or
mov
fidiv
div
jne
push
push
mov
mov
and
jb
inc
das
dec
inc
rcr
stos
ret
adc
mov
push
add
sbb
repnz
jne
adc
jmp
jecxz
ds
es
sar
sub
xor
add
cmp
pop
adc
push
mov
inc
or
jecxz
test
mov
and
das
daa
push
mov
dec
mov
je
cs
mov
fs
jae
pushf
and
jecxz
mov
add
jp
and
cmp
dec
ret
nop
sbb
scas
inc
or
jmp
jo
mov
push
ret
push
rol
and
xor
retf
or
add
inc
add
mov
mov
pop
mov
dec
mov
sbb
rol
mov
sbb
(bad)
nop
adc
ret
lea
or
repnz
mov
add
fimul
data16
push
daa
sbb
nop
xchg
imul
mov
lock
mov
nop
xchg
bound
mov
jmp
xor
loopne
ret
rcl
mov
add
jno
or
jmp
cs
xchg
es
test
mov
sub
mov
outs
dec
sgdtd
les
mov
push
aaa
push
shr
inc
jp
add
adc
dec
pop
das
xor
inc
ds
sub
enter
sbb
es
or
mov
loopne
push
aas
adc
cdq
out
and
or
gs
retf
push
outs
(bad)
push
or
jmp
ds
inc
rcr
ret
ret
push
cmp
sub
push
js
scas
scas
loop
cmp
jo
loope
mov
sbb
(bad)
jmp
fsub
les
push
es
ds
sub
push
shl
data16
sahf
xchg
push
dec
add
mov
and
ret
scas
dec
adc
imul
loope
loop
ds
and
cmp
dec
adc
mov
adc
ret
inc
sub
test
or
rcr
inc
jl
cmps
add
dec
xlat
rcl
mov
jmp
cli
out
sub
sub
add
ret
sbb
pop
pusha
pusha
bound
xchg
dec
ss
shl
and
sub
jb
loope
xchg
ror
xchg
rcr
xchg
loopne
jmp
(bad)
clc
cs
aam
shr
mov
dec
cmp
(bad)
sbb
out
ret
(bad)
es
inc
or
pop
or
inc
jmp
aam
adc
ja
loop
inc
into
sbb
inc
mov
inc
mov
icebp
mov
push
ror
or
and
inc
cmp
inc
push
(bad)
dec
les
sbb
sub
rcl
into
ficom
bound
ror
push
xchg
leave
stos
push
iret
dec
adc
adc
xor
sar
mov
mov
pop
jp
pop
or
shl
adc
pop
sbb
and
adc
into
call
push
dec
mov
inc
(bad)
dec
lods
ins
push
sub
call
loopne
daa
inc
pushw
inc
inc
test
es
and
and
add
loope
sub
pop
adc
cmps
push
add
dec
lea
and
sbb
xor
outs
add
add
cmp
retf
add
lods
lods
nop
pop
fiadd
ss
cmps
test
pusha
mov
aaa
sbb
mov
pop
push
add
xchg
xor
mov
ds
das
push
mov
sbb
test
inc
mov
ret
pop
cmp
pop
xchg
lock
loope
cmp
inc
inc
mov
cs
xchg
cs
pop
dec
pop
shl
test
xor
jp
and
xor
call
inc
or
sahf
add
and
retf
aaa
inc
repnz
or
fdivr
cmp
loopne
push
xchg
xchg
xchg
nop
ss
sbb
jmp
xor
rol
mul
outs
and
dec
mov
pop
adc
or
cmps
push
add
je
pop
call
add
or
pop
xor
lahf
or
popa
push
inc
dec
(bad)
mov
mov
mov
cmps
push
xchg
sub
push
sub
sahf
pushf
sbb
push
dec
mov
js
xor
mov
xor
pusha
add
daa
mov
add
adc
loopne
rol
adc
and
mov
stos
mov
mov
ret
(bad)
fidivr
rcr
pop
(bad)
xor
push
leave
push
jbe
push
and
fisub
jbe
test
arpl
adc
sbb
and
das
sbb
cmp
mov
sbb
lods
or
ficom
mov
test
mov
dec
sbb
and
fld
adc
push
data16
add
repnz
jg
imul
sbb
pushf
ins
aam
call
mov
sbb
mov
and
mov
or
cmp
ror
outs
dec
mov
test
jp
sub
pop
scas
dec
(bad)
adc
mov
dec
pop
add
ret
inc
sbb
in
fstp
dec
es
ins
dec
shr
add
into
retf
loop
scas
push
(bad)
fcomp
xor
inc
pop
sub
mov
push
push
add
and
and
fiadd
push
rcl
add
adc
pop
xchg
outs
call
fist
call
loope
rol
dec
cs
push
scas
mov
push
add
and
xor
jecxz
loopne
pop
sub
(bad)
scas
scas
leave
sbb
pusha
dec
cmp
add
add
popa
sahf
call
sub
pop
pop
push
enter
jb
adc
mov
mov
(bad)
cmp
stos
arpl
mov
dec
xor
jle
inc
ret
or
into
add
xor
or
test
sub
les
(bad)
sub
lock
nop
xor
xor
(bad)
pop
adc
push
iret
bound
cwde
pop
sub
loope
sub
call
push
cli
fstp
ss
dec
inc
push
inc
into
mov
mov
ret
jae
and
das
into
pop
bound
shr
mov
or
cmc
ins
jmp
retf
retf
sbb
xchg
dec
fcomp
ss
ror
push
push
mov
shl
add
dec
xchg
dec
mov
je
jp
not
ror
pusha
inc
cmp
jbe
pop
sub
enter
cwde
lock
test
iret
nop
rcl
xchg
sbb
mov
dec
adc
(bad)
ss
leave
mov
jb
dec
sub
sbb
outs
cmps
call
mov
loop
test
cmp
jp
jo
test
pop
cmp
pop
adc
mov
(bad)
mov
pop
out
push
inc
or
mov
jecxz
adc
loop
push
les
sbb
pop
loop
xor
mov
js
hlt
add
mov
movs
jo
mov
ret
fst
or
inc
pop
inc
pop
jle
inc
cmp
lea
xor
mov
loopne
cmps
cmp
or
sbb
inc
lods
dec
es
ins
and
neg
or
push
mov
pop
and
inc
scas
xrelease
mov
push
mov
das
cmp
test
jno
loope
sbb
cdq
retf
mov
push
data16
cmp
js
mov
fcom
into
push
outs
pop
ds
pop
fidivr
fwait
xor
cmp
out
mov
xchg
fidiv
xor
cli
es
mov
stos
mov
jmp
into
test
jp
data16
imul
daa
sub
mov
inc
rcr
xor
daa
pop
xchg
xlat
(bad)
ds
and
es
cmp
add
mov
test
cmp
dec
mov
jmp
movs
arpl
into
idiv
pop
cmps
and
mov
cmps
fcmovbe
add
mov
sbb
xor
inc
add
sbb
ret
rol
mov
test
cmp
in
dec
(bad)
ficomp
pop
dec
imul
sub
(bad)
and
aam
or
lock
ss
dec
outs
mov
inc
jmp
ss
fidiv
cmp
sub
add
xor
pop
cmps
lock
inc
jb
aaa
mov
loopne
(bad)
dec
cwde
cmp
nop
or
inc
and
xor
xor
pop
add
adc
inc
adc
xor
bound
xchg
sbb
or
call
xchg
dec
aas
enter
push
out
int3
push
loop
xchg
ret
mov
jb
(bad)
dec
aas
icebp
pop
xchg
sbb
or
aam
mov
scas
cmp
loope
mov
jp
ins
loop
sbb
add
call
add
add
(bad)
(bad)
push
sbb
(bad)
xor
mov
add
and
adc
pop
test
sbb
mov
or
xabort
xor
mov
pop
shl
shr
ror
adc
mov
mov
lods
lds
xchg
outs
retf
and
pusha
sbb
push
pop
sahf
xchg
cmp
cmps
pop
jo
push
retf
test
add
mov
xchg
or
mov
xchg
cs
imul
data16
jmp
out
cs
or
aad
jbe
mov
push
arpl
mov
xchg
add
mov
and
mov
es
adc
fwait
mov
or
ret
add
lea
mov
jb
cmps
sbb
adc
xchg
push
push
es
sub
sub
out
cmp
dec
fs
es
jecxz
ret
mov
test
add
xchg
ss
add
rol
(bad)
call
mov
push
dec
xchg
jmp
jbe
lock
test
cmps
lock
jmp
mov
pop
push
retf
pop
mov
push
push
mov
cmp
xor
add
push
push
mov
add
or
in
or
xor
lock
mov
or
push
push
js
add
bound
(bad)
adc
mov
mov
or
arpl
pop
data16
daa
sbb
mov
cmps
(bad)
lock
and
cmp
js
inc
repnz
shr
push
pop
jmp
jb
outs
lea
dec
inc
push
push
xor
dec
data16
inc
gs
mov
mov
xchg
test
mov
into
aam
div
inc
sbb
sbb
push
or
or
push
sub
mov
idiv
repnz
and
xchg
pop
nop
sbb
adc
pop
xchg
lock
leave
mov
pop
adc
dec
dec
jb
(bad)
xchg
fimul
pop
test
call
push
cmps
and
push
cmp
xchg
jmp
loope
or
push
mov
mov
or
or
daa
retf
lods
push
add
xchg
push
rcr
xchg
mov
jo
data16
and
mov
and
call
sbb
dec
and
jns
pop
(bad)
stos
mov
inc
scas
adc
loop
sbb
or
push
ss
loope
lea
pusha
dec
into
cmps
push
add
xchg
imul
dec
out
cmp
mov
inc
retf
sbb
inc
setbe
push
add
pop
push
fs
cs
inc
mov
stos
idiv
aam
mov
push
sbb
xchg
push
push
mov
pop
(bad)
adc
pop
push
cmps
mov
and
ret
push
div
cmp
popf
into
stos
push
ror
jb
sub
push
jmp
and
retf
repnz
jp
cmp
xchg
and
push
push
es
ins
pop
sbb
mov
test
dec
jmp
push
adc
and
sahf
xchg
nop
pop
and
pop
dec
loopne
mov
xchg
adc
xchg
into
les
js
jp
outs
shl
mov
adc
sub
inc
mov
add
(bad)
mov
scas
stos
push
not
rcr
jle
dec
adc
fstp
ret
scas
outs
(bad)
leave
pop
sbb
jle
pop
bound
stos
out
call
and
or
or
xchg
popa
popa
jo
cmps
jle
dec
movs
pop
jne
mov
dec
pmaxsw
or
rol
test
adc
pop
pushf
jle
into
add
cmps
test
pop
addr16
sbb
inc
lock
push
cmp
push
add
mov
(bad)
or
push
push
add
jmp
sub
sbb
call
jb
dec
mov
fdivr
push
iret
mov
rol
pop
jp
and
xchg
add
pop
dec
sbb
data16
mov
ret
or
add
dec
ror
add
shr
icebp
(bad)
pop
out
push
xor
aam
and
ret
or
sbb
dec
jmp
xchg
xchg
sub
adc
retf
enter
add
jbe
push
mov
rcr
mov
jp
aas
inc
sbb
pop
stos
mov
bound
jb
mov
mov
es
(bad)
retf
es
lock
sbb
and
out
lea
imul
fcmovu
call
ss
push
das
push
xor
pusha
gs
sbb
sar
sbb
mov
retf
pop
push
jecxz
mov
push
ds
outs
leave
add
fmulp
pop
mov
ret
inc
sahf
sbb
add
jnp
xor
dec
fs
out
mov
es
mov
aaa
sbb
dec
es
inc
push
add
or
cs
push
xchg
enter
cmps
call
fisubr
jmp
retf
test
push
scas
dec
lock
repz
call
ficomp
mov
arpl
sbb
xor
pop
fisub
mov
add
and
jp
les
cmps
add
inc
sbb
add
push
enter
push
jne
jmp
mov
out
cmp
mov
movs
outs
xor
xor
dec
retf
pop
pop
ret
pop
cwde
ret
enter
mov
jle
sbb
push
jecxz
sub
pop
repnz
out
ds
dec
pop
mov
push
mov
shr
sbb
pop
cs
(bad)
cmps
mov
cmps
sbb
test
ret
pop
repnz
adc
jle
xchg
lods
inc
cs
fwait
js
bound
adc
adc
cmp
ds
xor
je
dec
(bad)
cmp
cmp
and
loop
sub
fiadd
sbb
rol
mov
jge
adc
mov
push
shr
repnz
push
push
inc
pop
(bad)
dec
scas
jg
sar
xchg
dec
add
retf
dec
(bad)
loop
xchg
jmp
lods
or
arpl
mov
cmp
(bad)
iret
rol
adc
fcmovu
prefetcht1
out
shl
add
fimul
loopne
sbb
push
(bad)
push
and
or
mov
xchg
or
add
add
test
pop
or
cwde
data16
xor
adc
push
xchg
add
xor
int3
xor
into
out
add
mov
ss
call
dec
bound
inc
iret
ds
or
sub
mov
pop
out
mov
popa
dec
outs
push
pop
pop
ret
js
push
and
sub
or
sub
dec
loop
push
ficom
inc
dec
ss
adc
mov
dec
cmps
pop
add
mov
imul
adc
jmp
(bad)
pop
push
dec
sub
cmp
sar
rcr
pop
stos
mov
out
test
cmp
(bad)
loop
xor
fidiv
or
inc
or
int3
and
call
rcr
rol
mul
mov
(bad)
cmps
adc
lods
fidiv
arpl
mov
inc
sbb
ror
sub
and
sub
mov
mov
pop
mov
cmp
dec
call
rol
scas
jbe
xor
adc
jb
mov
lock
push
out
ins
pop
retf
lods
retf
hlt
cmp
and
pop
lods
(bad)
jb
cmp
and
dec
into
div
fisubr
cmp
mov
retf
push
loop
mov
add
sbb
dec
test
pop
push
mov
push
mov
je
push
mov
fs
pop
adc
inc
jmp
ficomp
or
outs
sar
inc
mov
mov
pop
jp
adc
xor
ror
inc
xchg
xchg
xchg
sbb
jp
sahf
sub
or
push
xor
scas
push
adc
push
scas
and
mov
xchg
xchg
push
jb
cmps
and
in
add
adc
sbb
push
jbe
outs
push
(bad)
sbb
mov
rol
or
(bad)
jae
mov
mov
into
xor
fimul
call
ds
daa
mov
ret
fiadd
sub
mov
jo
jmp
push
aam
or
mov
and
into
sbb
mov
stos
into
and
pushf
or
jmp
mov
dec
sub
cmp
aam
cmc
pop
cmp
pop
into
(bad)
jle
jecxz
jmp
ret
bound
pusha
push
jle
push
add
data16
bound
rsqrtps
ss
nop
adc
stos
sahf
jb
or
into
leave
cmp
cmps
outs
jle
xor
push
xor
add
int3
and
jo
adc
jle
xor
mov
cs
pusha
data16
sbb
es
js
in
(bad)
(bad)
ficom
hlt
cmp
xchg
dec
push
dec
retf
sub
inc
cmp
add
call
into
adc
inc
dec
pop
cwde
(bad)
cli
inc
add
sbb
retf
jae
mov
das
add
dec
push
movs
bound
cmp
aam
xchg
into
stos
and
sysret
ja
jle
sbb
mov
mov
jmp
cli
sub
popa
stos
pop
mov
or
cmp
and
mov
ret
sub
jge
or
mov
outs
pushw
xchg
mov
sbb
mov
pop
bound
call
push
rol
push
adc
cmp
shr
out
dec
lods
xchg
aaa
add
jo
loopne
into
scas
push
and
ror
push
adc
sahf
push
push
xor
cmps
pop
jmp
cmp
mov
or
sbb
(bad)
test
inc
inc
pop
mov
jbe
pop
lods
mov
adc
dec
add
out
pop
adc
push
test
les
xor
push
mul
and
xchg
aaa
ret
sub
retf
pop
add
adc
inc
loop
xor
sub
sub
lds
loop
or
mov
or
fimul
lea
inc
add
popa
push
push
loop
xchg
xchg
xchg
call
sub
add
gs
mov
dec
inc
inc
inc
push
loopne
sub
and
and
outs
mov
aaa
divps
(bad)
pop
mov
add
xor
es
les
data16
loope
mov
inc
bound
cmp
adc
push
xor
push
outs
mov
scas
add
test
inc
mov
sub
add
pop
jb
cli
or
push
fwait
cmp
rcpps
bound
or
adc
cmc
push
or
sahf
pop
repnz
xchg
add
dec
rcl
or
inc
inc
sub
and
jb
cmp
or
inc
loop
sbb
mov
sbb
and
push
ds
imul
sbb
push
adc
lock
test
push
sub
push
mov
and
cli
push
push
jecxz
fwait
dec
ficomp
mov
add
xor
dec
dec
inc
push
out
push
lea
mov
mov
sahf
or
cwde
data16
xor
and
xchg
push
inc
ja
icebp
adc
cmps
ret
xchg
or
ss
(bad)
rcl
xchg
dec
adc
jg
mov
fimul
es
into
(bad)
sar
push
cmp
adc
fcom
jb
out
sbb
lahf
xchg
leave
sbb
push
sti
and
test
mov
mov
dec
adc
or
pop
adc
dec
mov
adc
mov
hlt
adc
repz
mov
loopne
outs
mov
mov
cmp
es
(bad)
push
xchg
adc
in
push
cmps
mov
faddp
ret
sbb
shl
out
(bad)
fld
or
push
inc
(bad)
outs
(bad)
pop
loopne
lock
and
inc
adc
test
ficom
jp
fimul
je
fst
push
mov
push
cmp
(bad)
or
cli
pop
xchg
outs
adc
mov
sbb
add
jb
add
adc
dec
mov
mov
scas
cs
sti
retf
sbb
and
cmp
pusha
sbb
out
adc
push
pushw
inc
dec
and
and
xor
sub
push
add
(bad)
mov
call
mov
js
outs
leave
xchg
fisub
arpl
ret
bound
test
dec
inc
or
xor
loop
mov
xor
(bad)
lock
stos
inc
push
and
or
or
mov
jne
bnd
adc
dec
inc
jnp
adc
jb
call
xor
movs
(bad)
loopne
push
into
imul
arpl
adc
jo
ret
mov
aad
jp
and
inc
inc
push
mov
shl
xor
ret
adc
jae
jbe
lods
dec
(bad)
mov
mov
push
ds
adc
xlat
nop
scas
xchg
jmp
retf
retf
aam
jg
mov
push
test
pop
sahf
aaa
pop
das
lsl
mov
jns
js
fbld
pop
retf
cwde
jp
push
call
mov
or
les
out
ss
or
into
imul
mov
dec
sub
pusha
push
pop
cmps
jmp
scas
pop
push
data16
and
fidivr
ret
in
sub
dec
retf
dec
xor
icebp
inc
or
adc
aaa
es
lock
adc
call
jbe
cmp
cmp
xor
inc
stos
mov
and
loop
fs
mov
ficomp
mov
pop
not
mov
ds
add
cmp
sub
popa
dec
loopne
(bad)
dec
add
arpl
ss
jo
pop
dec
iret
push
mov
sbb
retf
mov
mov
inc
call
or
or
sti
add
ds
bound
dec
outs
cmps
mov
faddp
call
cli
push
jne
xchg
xor
sub
mov
sub
add
cmps
add
ret
inc
push
repnz
add
inc
pop
mov
and
jb
jle
add
add
jmp
xchg
shl
cmps
add
mov
(bad)
leave
adc
mov
bound
bound
shl
aas
adc
es
imul
bound
out
jo
push
out
xchg
inc
pusha
or
add
out
inc
rcl
add
sub
sbb
xchg
scas
sub
push
pmaxub
sbb
pushf
out
mov
adc
mul
push
sbb
mov
push
sbb
and
or
xor
pushw
add
jb
xor
dec
jmp
inc
shr
nop
jg
jmp
mov
retf
push
(bad)
rcl
mov
or
(bad)
pop
lods
mov
or
add
xchg
stos
nop
je
xlat
lock
mov
mov
sbb
sahf
inc
ret
pusha
sub
inc
mov
jmp
add
loopne
fcmovb
cwde
in
mov
add
inc
inc
xor
es
xchg
inc
jb
or
jmp
xor
jo
cmp
sbb
out
jge
xor
(bad)
bound
ss
shr
arpl
jnp
rcr
(bad)
test
xchg
int3
out
adc
cmps
xchg
jle
(bad)
add
mov
loope
sar
and
(bad)
out
adc
cmovs
scas
pop
xor
and
mov
push
les
out
lods
test
ss
dec
jp
mov
lods
cmps
stos
(bad)
push
(bad)
jb
mov
add
cmps
or
and
out
dec
pop
sbb
imul
inc
js
sbb
push
(bad)
mov
repnz
cmp
add
dec
mov
and
jp
ret
(bad)
push
out
rcr
retf
cmp
ss
and
jbe
sub
popf
mov
scas
cli
fisub
mov
popa
mov
mov
mov
bndstx
inc
jle
mov
adc
inc
sub
ret
add
mov
jno
inc
data16
ds
mov
push
aas
hlt
adc
out
shl
pop
retf
xchg
sbb
and
les
xchg
mov
imul
push
and
into
xor
mov
or
mov
jmp
les
loop
dec
test
stos
bnd
packsswb
sbb
loopne
(bad)
loope
retf
sahf
scas
fimul
vpaddsb
ficomp
sbb
xor
cmp
mov
loopne
xchg
mov
(bad)
mov
sbb
pop
push
iret
cli
loope
aam
(bad)
and
fcmovbe
(bad)
inc
ficom
push
mov
push
jb
js
pop
bound
cmp
xchg
add
add
adc
jo
push
call
adc
or
inc
jmp
and
dec
dec
mov
jmp
and
sbb
jbe
sub
shl
ss
das
inc
scas
outs
call
loopne
mov
pop
js
dec
popf
and
nop
test
jmp
push
lock
jb
mov
test
dec
ret
outs
sar
inc
mov
xchg
push
or
mov
push
inc
rol
les
rcl
arpl
imul
rcl
xchg
push
push
into
retf
add
inc
mov
mov
cmp
push
pop
sub
cmp
push
xchg
push
adc
mov
add
push
jg
adc
dec
(bad)
adc
pop
ds
popa
pushf
push
push
inc
inc
imul
data16
outs
jle
dec
mov
adc
jo
dec
dec
pmulhw
sub
sub
loop
es
sbb
dec
into
loop
push
xchg
mov
ficomp
and
popa
inc
mov
(bad)
push
out
pop
test
pop
mov
fiadd
mov
mov
sbb
scas
push
add
push
xor
xlat
jb
add
sub
pop
mov
mov
xor
mov
loopne
inc
sbb
xchg
pop
cmps
mov
loopne
push
adc
out
(bad)
es
js
push
or
xor
cmp
into
pop
or
add
or
mov
nop
mov
mov
bound
(bad)
jle
cmps
jno
mov
fiadd
mov
inc
push
sub
adc
push
(bad)
add
out
ret
aam
mov
xchg
cmps
inc
lea
cmps
(bad)
retf
add
pop
dec
inc
push
mov
popa
(bad)
es
ds
repnz
outs
ds
adc
inc
ret
stos
loop
sbb
push
repnz
sbb
xor
dec
cmp
call
rcr
rol
jbe
jecxz
je
xor
stos
or
repnz
dec
sbb
xor
pop
xor
retf
js
xor
cs
or
sub
add
pop
sbb
sub
loop
mov
and
sub
sahf
shr
xchg
lock
xchg
xchg
(bad)
add
enter
ins
dec
cmp
cs
bound
mov
inc
sub
and
pop
mov
add
scas
out
retf
rcl
push
call
fiadd
adc
inc
stos
cmps
inc
inc
push
push
push
out
and
call
cs
sbb
jb
retf
jmp
jp
inc
sbb
push
ficomp
call
ror
imul
sub
cmp
lea
xchg
jp
(bad)
mov
or
add
push
rol
add
stos
mov
retf
xchg
adc
addr16
dec
dec
fmul
repnz
dec
cmp
sbb
and
test
push
dec
pop
inc
pop
sbb
jle
cmps
cmp
xchg
nop
sbb
clc
pop
jp
and
jmp
cmp
mov
cwde
and
mov
xor
fidiv
cs
dec
retf
mov
sbb
adc
push
add
dec
inc
cmp
adc
(bad)
ficomp
cmp
and
lods
push
xchg
mov
push
adc
es
inc
popa
mov
or
lea
inc
and
mov
lock
popa
add
xor
inc
pop
pop
jp
push
outs
popa
fs
mov
pop
or
cmp
xchg
fadd
pop
dec
push
mov
inc
dec
jecxz
(bad)
sbb
leave
mov
les
mov
call
push
xchg
les
bound
ror
dec
out
lods
and
mov
ror
retf
call
push
bound
push
xor
les
nop
cmps
cli
loop
lods
dec
lods
int3
ficom
int3
ret
sub
mov
push
push
xor
lahf
loop
mov
ss
sahf
mov
out
cli
dec
add
push
mov
jg
push
cmp
mov
xchg
ds
mov
push
pop
cs
jnp
push
pushf
outs
and
bound
or
or
shr
mov
fcmovb
movs
aaa
or
or
jb
daa
adc
add
scas
call
inc
push
xlat
sub
sub
add
pop
fimul
sbb
push
xchg
sub
data16
setl
sbb
jbe
pop
pop
shl
push
bnd
pop
or
and
mov
sbb
mov
xchg
mov
les
push
add
jbe
in
ret
enter
lahf
adc
fcmovnbe
cmp
sub
pop
(bad)
ds
(bad)
jle
inc
cmp
inc
mov
adc
mov
movs
pusha
shl
repz
inc
push
add
sbb
loopne
cmps
mov
cs
enter
sub
add
call
loopne
les
xchg
push
cwde
dec
arpl
cs
sub
cwde
not
mov
push
xchg
or
aaa
je
sub
mov
inc
cmp
add
repz
mov
jp
sub
adc
(bad)
jle
push
movups
mov
dec
imul
jno
into
push
mov
add
jno
xchg
clc
mov
movs
adc
ss
jmp
inc
xchg
or
data16
cmps
stos
pusha
jbe
mov
iret
ret
repz
ficomp
dec
add
nop
xor
loop
jo
lock
inc
mov
repnz
aam
pop
ret
dec
jne
or
dec
rol
jmp
das
retf
repnz
lods
push
mov
loope
inc
mov
scas
or
rcl
xor
adc
(bad)
int3
rcr
xor
xchg
xchg
(bad)
sub
adc
leave
xor
xchg
retf
xchg
int3
jp
adc
jnp
or
push
and
(bad)
(bad)
mov
add
dec
add
dec
mov
dec
jp
inc
sbb
xchg
jmp
bound
and
pop
ficom
and
mov
inc
cmps
or
jno
push
mov
loop
ret
mov
imul
inc
adc
jb
inc
add
ret
and
retf
(bad)
xchg
gs
rcr
outs
jecxz
push
mov
jle
push
jo
jo
fisub
cmp
out
xor
ins
push
sahf
loop
mov
sub
clc
repnz
jb
dec
dec
leave
neg
ds
push
push
xchg
(bad)
arpl
gs
into
sub
cmp
nop
sahf
es
(bad)
push
lods
and
cmc
faddp
cmovge
add
popa
jecxz
sahf
xchg
adc
cmp
call
push
push
out
and
bound
inc
xor
add
ret
or
(bad)
(bad)
xchg
lea
sub
gs
sub
pop
sbb
mov
push
imul
je
and
xchg
mov
push
or
mov
lods
out
push
es
das
ret
inc
pushf
mov
sahf
ret
or
push
jle
into
lods
add
jb
mov
or
dec
jmp
jmp
or
mov
sub
sti
push
or
sub
ret
mul
data16
ss
(bad)
fadd
xchg
into
aam
adc
mov
xor
loopne
shl
xor
arpl
xor
into
inc
xchg
add
sub
(bad)
mov
push
(bad)
or
or
shl
jmp
daa
popa
dec
fcomp
mov
push
mov
pop
add
ret
sub
sub
cwde
xchg
cmp
scas
pop
jno
mov
retf
cdq
adc
dec
inc
sbb
jbe
adc
(bad)
imul
add
xchg
sub
and
out
inc
or
mov
ror
add
or
dec
(bad)
adc
sar
push
add
js
sbb
xchg
into
(bad)
mov
ret
into
sub
add
cmps
jp
inc
cmp
cmp
push
movs
movs
or
jo
xchg
pushf
sbb
jo
lock
fiadd
push
adc
outs
xor
mov
xchg
dec
push
push
ja
fistp
outs
aas
push
sbb
icebp
and
add
int3
add
ds
mov
call
ds
icebp
mov
mov
mov
out
and
xor
les
adc
mov
ss
(bad)
jae
inc
push
mov
adc
outs
add
pop
stos
mov
js
into
pop
cmp
sahf
xchg
data16
pop
push
(bad)
(bad)
pusha
sub
and
or
(bad)
cli
add
or
call
mov
bound
int3
xchg
cmp
dec
sub
jg
xor
xor
(bad)
bound
fcmovnbe
pop
rcr
push
xor
jbe
pop
out
out
push
pop
out
and
push
or
fimul
repz
add
jmp
add
mov
enter
mov
push
mov
nop
repnz
pusha
add
mov
jmp
lods
outs
pop
out
mov
dec
sub
adc
retf
jp
retf
outs
sub
loope
fdivrp
jp
inc
punpcklbw
loopne
push
and
movs
or
aaa
in
push
mov
test
inc
mov
push
mov
lea
xchg
dec
jle
test
or
test
and
retf
sahf
push
cmps
pop
into
lock
hlt
outs
xchg
add
test
pop
call
or
push
adc
pop
add
enter
lods
dec
xchg
xchg
pop
jo
pusha
add
push
jbe
shr
push
mov
add
or
or
scas
and
scas
jb
xor
inc
add
adc
bound
or
jb
test
adc
push
adc
ror
mov
mov
ror
inc
push
dec
or
xor
add
cli
add
dec
or
(bad)
jmp
fimul
push
or
sahf
nop
mov
and
xor
dec
sahf
xchg
xor
or
or
(bad)
xchg
mov
je
xchg
xchg
out
test
rcr
rol
push
and
or
push
mov
outs
lods
sub
adc
jg
add
or
enter
inc
enter
pop
xor
xchg
mov
or
shl
jle
sahf
sub
bswap
push
fwait
jp
pop
add
adc
adc
sbb
loop
add
push
fadd
adc
jbe
and
push
xor
mov
pop
sub
addr16
jb
push
and
retf
mov
and
jo
fcomip
add
dec
mov
inc
stos
out
push
loop
ss
push
sbb
mov
inc
ds
sbb
xchg
mul
sbb
xchg
dec
retf
pop
xchg
jle
add
shl
inc
lock
mov
jb
mov
test
xor
add
outs
cli
push
xchg
add
ds
push
daa
sbb
mov
push
ss
xor
cmps
cmp
mov
test
xor
inc
xor
mov
pop
and
(bad)
inc
sub
xor
dec
into
xchg
pop
addr16
mov
in
js
(bad)
mov
jmp
pop
push
xchg
in
stos
xchg
shl
mov
pop
fsubr
or
aas
imul
xchg
push
push
scas
mov
mov
sbb
pop
pop
mov
inc
mov
xchg
sub
fist
ret
inc
fisub
add
sbb
ret
fisubr
cmps
add
mov
sbb
stos
(bad)
imul
inc
mov
loopne
sbb
inc
dec
push
dec
pop
mov
and
mov
mov
mov
ja
push
xchg
sub
cmps
ins
test
out
jmp
(bad)
fwait
ror
sub
xchg
pushf
pop
sbb
add
lea
mov
cs
or
pop
push
jae
and
mov
xchg
loope
cmp
cwde
xor
loopne
add
jb
pop
ret
add
jp
mov
iret
ret
sbb
jle
jp
pop
pop
dec
or
push
xor
and
bound
mov
mov
nop
cmc
adc
fwait
cmp
fisttp
cmp
add
into
leave
adc
add
xor
sub
test
pop
or
mov
lods
or
imul
arpl
mov
das
inc
js
scas
jbe
ins
or
xor
xchg
dec
loope
pop
mov
pop
cmps
adc
mov
ficom
jbe
into
jp
inc
dec
mov
mov
gs
imul
dec
out
or
nop
add
push
ror
dec
imul
icebp
mov
aaa
arpl
add
pop
sbb
stos
xchg
sub
dec
or
or
add
inc
pop
dec
push
dec
cmps
mov
cmp
mov
pop
and
into
xchg
xor
sti
cmp
mov
xchg
fadd
sub
mov
xor
popa
(bad)
inc
push
rcl
retf
mov
push
adc
xor
mov
sbb
ret
ins
and
push
lods
or
jmp
fadd
lods
xlat
push
or
pop
jl
sub
cwde
mov
loope
js
mov
into
cmp
xor
pop
sbb
bound
div
loop
rcl
add
outs
jle
ret
sbb
mul
ss
and
mov
imul
xor
inc
enter
nop
test
push
repnz
repnz
or
xchg
into
or
sub
pop
or
out
and
and
ss
sub
in
pop
pop
push
push
push
stos
inc
xchg
pop
sahf
(bad)
mov
sahf
adc
jp
ror
loopne
add
or
jecxz
(bad)
jp
jle
sub
sbb
loop
sub
xlat
push
imul
add
pop
xchg
sahf
xchg
add
data16
stos
mov
shl
rol
or
(bad)
xchg
inc
pop
and
cwde
lock
and
(bad)
xor
in
in
into
cli
push
sub
mov
or
or
cli
pop
or
fldcw
jmp
cli
mov
push
sub
mov
adc
pop
inc
fmul
es
outs
hlt
nop
test
mov
jmp
and
cmps
imul
loopne
jo
sahf
enter
xor
mov
mov
cmp
push
or
mov
push
mov
pop
push
and
sub
sub
sbb
mov
fcomp
jle
call
mov
xchg
push
inc
sbb
mov
in
or
xor
js
out
xchg
mov
cmps
inc
jbe
add
jp
sub
jp
ret
sub
mov
sub
xchg
and
pop
ret
and
pushw
fisubr
jo
sbb
jmp
jb
fs
sub
rol
mov
jmp
cli
and
sbb
scas
push
mul
sub
jno
icebp
nop
push
xchg
scas
pop
jmp
cwde
test
je
out
sahf
cmp
ss
push
fwait
and
xchg
leave
adc
push
outs
sub
enter
test
sbb
sbb
cmp
xchg
arpl
or
sub
cmps
pop
push
add
xor
sbb
add
and
mov
push
mov
test
jg
outs
dec
or
retf
pushf
lods
data16
or
int3
cdq
movs
movs
mov
push
add
cmp
sbb
cmp
inc
dec
mov
xchg
mov
shr
cs
push
data16
sbb
ss
push
lods
or
xor
(bad)
cmp
fcomip
push
cmp
addr16
repnz
add
push
mov
cli
and
inc
mov
jp
mov
stos
jbe
mov
mov
ss
pusha
jp
add
stos
push
loop
fcom
mov
cmps
xchg
add
or
rcl
mov
push
test
es
jmp
fs
mov
mov
adc
sub
cmp
mov
pop
sub
into
call
fucomip
sbb
cmp
aas
sbb
or
mov
and
sub
(bad)
xchg
scas
push
sub
jmp
test
daa
mov
ret
sbb
push
xchg
sbb
adc
addr16
out
dec
add
cmp
jbe
inc
bound
pusha
sub
jbe
jbe
fadd
movs
loop
mov
(bad)
mov
cli
sub
sub
push
mov
and
rcr
(bad)
xlat
fwait
dec
xchg
sub
push
jle
bound
and
mov
cmp
loopne
adc
cwde
and
dec
pop
push
push
(bad)
fimul
add
add
call
repz
sub
push
add
sbb
and
xchg
sbb
sbb
dec
gs
jnp
dec
mov
and
dec
loope
cs
es
loope
packuswb
dec
cmps
(bad)
push
test
push
(bad)
ins
shr
ror
push
(bad)
xchg
xchg
pop
into
sbb
push
push
mov
es
inc
cmp
imul
lods
add
sbb
daa
adc
add
xchg
je
jo
mov
mov
cmp
mov
cs
mov
adc
pop
stos
mov
add
into
xchg
mov
inc
mov
jp
and
(bad)
(bad)
mov
adc
fisubr
data16
ficom
mov
sub
xor
add
add
and
(bad)
cmp
loop
add
not
call
outs
ds
cmp
outs
add
(bad)
cmps
add
call
push
rol
jno
fs
mov
sub
pop
push
ret
jo
mov
jle
push
adc
jb
cmp
sub
push
cmp
js
fidivr
call
jb
push
fidiv
(bad)
fmul
cmp
jo
cs
mov
fadd
dec
mov
or
retf
sub
dec
popa
jge
dec
push
mov
mov
into
dec
cmp
push
dec
xchg
jp
add
jp
dec
lea
scas
mov
sbb
mov
add
jle
ret
ror
pop
(bad)
pop
inc
or
sbb
fcomp
push
scas
dec
pop
lea
or
out
jp
das
pusha
cmc
and
push
cmps
xchg
nop
add
sbb
xchg
mov
popa
jb
push
imul
scas
es
and
imul
fidivr
sti
nop
rcl
mov
(bad)
ds
sahf
fs
push
loopne
add
dec
xchg
fist
inc
sub
ja
adc
das
mov
and
dec
mov
jbe
cmp
pop
inc
mul
rol
xchg
jb
fcom
add
js
inc
xchg
mov
repnz
daa
or
repnz
adc
js
cs
sahf
jmp
ret
daa
sbb
sahf
movs
push
ror
cmp
popa
sbb
stos
ret
fs
inc
into
xchg
push
das
and
xchg
jbe
inc
add
add
and
cmp
sbb
fnstcw
and
sbb
lea
push
xchg
push
cs
xor
dec
add
pop
or
ror
xor
jbe
inc
sub
inc
push
pop
pop
out
out
ret
add
movs
add
pop
pop
cmps
sub
xchg
add
(bad)
push
add
adc
sahf
scas
mov
push
add
adc
xchg
dec
js
add
xchg
aam
scas
cs
adc
outs
mov
cli
dec
or
popa
cmp
movs
hlt
push
out
fidivr
xor
jo
fisub
repnz
xor
jle
fst
jmp
pusha
mov
(bad)
jmp
ds
or
sbb
nop
push
les
sbb
cmc
jne
push
or
movs
call
call
mov
and
adc
xchg
pop
fistp
xchg
jp
push
cmps
fs
sbb
inc
sub
aam
bound
sub
push
addr16
rcr
ror
ss
and
push
cmp
mov
mov
jne
and
mov
(bad)
and
rol
cmc
(bad)
pop
(bad)
dec
push
rol
push
or
push
call
fsubp
inc
das
lods
test
jp
leave
enter
xchg
sub
jp
loop
xchg
xor
add
push
(bad)
nop
push
pop
mov
dec
jb
dec
es
ss
sbb
jbe
jo
add
ret
sbb
aaa
xchg
xchg
pop
and
pop
pop
inc
mov
sbb
pop
mov
adc
mov
mov
jle
add
rcl
or
loope
fsubr
or
(bad)
out
outs
and
or
push
cmp
mov
dec
fisubr
ret
or
inc
(bad)
shufps
lods
push
xor
das
or
sahf
cmp
pop
leave
mov
stos
push
pop
dec
fadd
xchg
jmp
mov
(bad)
push
dec
jmp
add
and
add
inc
adc
pop
push
(bad)
mov
popa
or
in
mov
(bad)
mov
xor
xor
dec
mov
jg
push
sbb
cmp
or
inc
mov
mov
ret
push
ror
push
push
adc
adc
pop
or
into
push
shl
add
iret
mov
clts
mov
loop
repnz
pop
push
bound
inc
leave
(bad)
pop
xchg
or
into
add
enter
or
dec
bound
scas
inc
or
mov
loopne
ds
jmp
jmp
loope
mov
add
outs
call
push
mov
out
push
push
fdiv
mov
lock
inc
pop
push
bound
(bad)
dec
test
jle
jle
cmp
dec
fcmovbe
add
jmp
xchg
inc
pop
push
push
inc
maskmovq
xchg
into
adc
imul
dec
sub
mov
and
stos
and
mov
push
rcl
out
into
add
add
mov
pop
jbe
imul
cs
add
jmp
pop
(bad)
push
inc
cmps
in
push
cmp
push
fs
push
ficomp
or
mov
imul
sbb
xor
out
cmp
adc
enter
cmp
mov
in
jp
imul
and
and
pusha
add
xchg
adc
mov
(bad)
adc
dec
lods
cs
jmp
push
loopne
aaa
lock
pop
loop
mov
(bad)
mov
add
jo
xchg
outs
dec
xor
(bad)
call
imul
rol
(bad)
inc
inc
mov
sbb
scas
cmps
mov
fimul
test
out
loop
arpl
ss
push
movs
inc
jle
(bad)
dec
rol
ret
or
nop
mov
cwde
ss
fdiv
ds
xor
pop
sbb
add
mov
outs
dec
mov
and
lods
sub
fidivr
popa
inc
jp
bound
dec
or
adc
ret
or
scas
cmp
adc
jmp
adc
add
arpl
and
adc
jbe
cmp
push
sub
mov
clc
fwait
xor
xchg
ret
out
push
adc
shl
outs
pop
pop
pop
scas
xor
mov
push
out
inc
sub
xor
xchg
icebp
fidivr
shl
and
jb
enter
or
rcr
jle
sahf
adc
inc
bound
pop
daa
adc
js
jo
jb
push
jp
add
daa
inc
sub
jmp
sub
xchg
test
mov
cli
sub
sbb
jle
sahf
cmp
cmp
xchg
jnp
push
adc
xor
sub
mov
dec
out
pop
sbb
je
push
bound
clc
pop
mov
xor
ds
or
or
fwait
push
out
xor
dec
push
push
(bad)
rcl
push
out
retf
xchg
retf
shl
sbb
mov
sub
inc
dec
out
jb
adc
mul
pop
adc
push
outs
loop
test
or
adc
data16
or
ret
out
lods
adc
sahf
out
push
test
fs
xchg
push
sub
sub
test
pop
repz
cmp
pop
pop
push
loopne
loopne
push
stos
inc
adc
(bad)
fimul
xchg
movs
and
nop
iret
js
sbb
(bad)
and
arpl
into
xor
movs
(bad)
jb
jp
(bad)
shr
cmp
pop
mov
sbb
lock
adc
(bad)
cwde
push
loope
or
sahf
mov
cmp
jo
push
hlt
mov
aam
dec
xchg
je
mov
xor
push
lods
mov
and
mov
push
push
fimul
nop
lock
and
adc
xor
call
xchg
and
data16
push
inc
pop
stos
push
rcr
inc
cmp
lahf
repnz
add
or
push
dec
lods
add
xchg
pop
cmp
lea
mov
cmp
test
inc
mov
scas
cmp
test
jb
ret
push
add
pop
sub
arpl
inc
or
push
(bad)
pop
into
add
retf
pop
push
xchg
dec
stos
mov
and
addr16
mov
pop
xchg
bound
xchg
adc
(bad)
xchg
cmp
pop
retf
pop
aam
sti
inc
xchg
add
dec
scas
mov
mov
call
cmp
ds
call
fidivr
bound
inc
mov
xchg
jo
mov
retf
mov
mov
push
and
xor
ss
push
pop
jo
dec
mov
mov
sahf
sub
or
sti
jmp
mov
add
sbb
xchg
and
cmps
mov
ret
or
mov
jo
sbb
inc
push
and
(bad)
xchg
mov
gs
mov
mov
ds
sub
pop
adc
ror
dec
dec
sahf
mov
mov
pop
cmovnp
or
push
xchg
inc
test
or
sbb
bound
cmps
pop
push
loope
jl
push
xchg
pop
mov
sub
sahf
outs
jbe
cmp
sub
push
dec
pop
mov
nop
es
rol
sbb
ror
loop
cli
loope
inc
xchg
bound
sar
inc
repnz
push
push
xchg
pop
dec
mov
sub
(bad)
inc
retf
aas
and
xchg
dec
pop
sub
and
mov
loopne
inc
stos
cmp
inc
imul
dec
mov
inc
and
add
xchg
or
es
pop
mov
mov
(bad)
(bad)
mov
mul
mov
(bad)
ds
je
loop
mov
arpl
add
dec
adc
rcl
cmp
dec
ds
or
or
test
mov
mov
jb
pop
mov
es
cmp
add
call
pop
xchg
dec
xchg
or
ds
mov
add
or
jle
push
nop
sbb
sahf
sbb
mov
mov
dec
mov
and
inc
or
push
mov
jp
imul
cmp
mov
add
jg
inc
mov
(bad)
cli
fwait
cmp
mov
cs
retf
and
pop
xchg
adc
out
dec
pop
pop
xchg
pusha
or
jecxz
jb
cmps
rcl
add
ror
mov
xor
xchg
ins
xor
cmp
bound
sub
sbb
popa
or
sbb
jp
or
shl
ds
jo
adc
fldcw
xchg
mov
ret
arpl
(bad)
push
shl
ss
pusha
pop
pop
push
out
fiadd
lea
push
and
push
mov
xor
pop
sbb
add
push
cmps
pop
movs
mov
dec
loope
mov
push
add
mov
and
leave
fiadd
xor
adc
ret
add
push
scas
mov
rol
cmps
fistp
dec
push
mov
push
sub
ror
jmp
jle
pushf
hlt
add
adc
add
jmp
jo
add
cmp
test
sbb
mov
clc
mov
es
pop
sub
retf
xchg
repnz
mov
mov
rcl
mov
sbb
add
(bad)
dec
mov
(bad)
into
xchg
fdivr
push
inc
dec
fisub
fs
cwde
scas
es
mov
sahf
(bad)
sbb
mov
loopne
mov
imul
mov
cmp
cmps
cli
call
xchg
fwait
hlt
xchg
je
mov
mov
(bad)
stos
popf
popa
cmp
push
imul
pushf
ds
cli
out
inc
sbb
sbb
aad
dec
cmps
cmps
add
into
arpl
add
pop
sbb
daa
push
out
mov
fwait
adc
pusha
nop
out
aaa
pop
jbe
push
dec
sahf
imul
adc
cmp
mov
data16
jle
dec
test
jle
sahf
ror
jle
dec
dec
sbb
shl
mov
outs
jmp
sbb
sub
and
(bad)
jo
ret
pop
out
es
cmc
cmps
arpl
cmps
sbb
scas
mov
pop
popf
pop
adc
pop
outs
mov
lock
cli
and
or
dec
in
mov
adc
xchg
mov
sbb
das
adc
push
aaa
ret
add
pop
dec
loop
xchg
push
push
push
sbb
push
loop
outs
push
aam
aam
push
mov
(bad)
mov
mov
ror
jb
rol
mov
or
stos
rcl
pop
and
push
bound
jecxz
ds
sub
add
mov
push
ss
sbb
add
mov
sahf
adc
pop
cmp
xlat
push
or
loop
rcl
xchg
sub
pop
inc
xchg
push
add
mov
rol
js
xor
sub
sbb
cmp
pop
out
ss
adc
add
ds
adc
out
shr
repnz
sbb
mov
cmp
cmp
push
imul
xor
add
and
outs
lods
push
inc
mov
add
mov
pop
mov
adc
adc
cmp
push
shl
sub
mov
push
cmp
sahf
mul
call
enterw
cmp
jo
ss
data16
mov
adc
sub
add
adc
jae
cmp
inc
jmp
push
ins
mov
push
sahf
push
loope
sub
sbb
cmpps
mov
xchg
mov
add
and
call
mov
inc
inc
dec
xor
mov
dec
bound
aaa
xchg
icebp
jp
retf
mov
ins
sub
sbb
mov
push
xchg
add
pop
cmps
idiv
xor
dec
call
pop
push
nop
movs
xchg
or
jle
scas
mov
sbb
into
inc
jo
xchg
fidivr
adc
pop
pop
scas
pusha
into
xchg
mov
dec
lods
sbb
sub
push
scas
push
retw
sbb
xchg
movs
push
xor
rol
push
mov
mov
push
cmp
scas
mov
cmp
add
xchg
pop
outs
sub
add
rol
or
push
xchg
sbb
or
pop
mov
inc
loop
mov
xchg
xchg
adc
fdivrp
or
out
jmp
(bad)
or
sub
out
push
xor
add
sbb
sbb
xchg
cli
jb
retf
xchg
out
add
jo
mov
loop
xor
lock
(bad)
mov
jmp
mov
or
push
adc
movs
call
movs
sub
fisubr
pop
and
xchg
bound
inc
lods
mov
test
push
jbe
and
xlat
lock
jle
mov
nop
outs
ret
jl
ret
or
mov
mov
xchg
xchg
xor
add
in
stos
dec
inc
sbb
fisubr
cdq
add
loopne
mov
stos
dec
jo
test
sbb
cs
add
add
out
pop
sub
pusha
add
push
iret
mov
and
sub
enter
mov
(bad)
or
jp
into
push
nop
xchg
pop
mov
add
push
add
shl
pusha
pop
leave
dec
inc
out
shl
push
shl
pop
ds
(bad)
mov
cmp
or
push
lock
dec
data16
sti
or
xchg
mov
inc
adc
iret
jp
addr16
xchg
xchg
(bad)
dec
push
ds
pop
sub
xchg
xchg
mov
push
and
mov
(bad)
mov
les
test
cmps
icebp
push
dec
push
push
cdq
xchg
cli
outs
imul
mov
scas
push
dec
loope
loope
dec
into
push
and
add
or
movs
rcl
push
rcr
ds
mov
repz
jo
mov
dec
loop
add
push
fbstp
loop
mov
rcr
push
(bad)
mov
mov
sbb
inc
adc
jmp
loope
(bad)
cmps
ret
add
inc
repnz
pop
sub
fidiv
push
scas
dec
mov
arpl
mov
add
dec
dec
inc
bound
push
movs
push
push
inc
and
jno
push
es
add
add
data16
sbb
je
bound
push
mov
xor
(bad)
xchg
cmps
(bad)
adc
loop
out
into
xor
aam
push
jbe
mov
inc
inc
or
data16
xor
pop
mov
xchg
icebp
pop
lock
push
mov
mov
out
sahf
inc
cdq
xor
jbe
dec
cs
xlat
cmp
aam
push
nop
push
push
sub
push
out
loopne
add
mov
lods
add
xor
add
scas
pop
bound
xor
add
jle
loop
add
out
mov
js
js
loop
jmp
test
les
les
mov
mov
fmul
ds
pop
mov
test
lea
rol
out
outs
and
loop
xor
sbb
adc
or
inc
mov
out
mov
mov
jmp
scas
ss
faddp
sbb
push
pop
add
add
or
ficom
sbb
or
outs
adc
sub
and
sbb
iret
sbb
and
ficom
fcomp
lock
dec
call
inc
jmp
and
xchg
xchg
ror
push
inc
sub
inc
(bad)
(bad)
fcmovu
(bad)
ret
jno
push
or
sbb
inc
fnsave
ret
jb
bound
mov
jp
mov
cmp
xor
ret
sbb
mov
outs
fs
mov
cmp
and
inc
jmp
mov
and
into
or
xchg
cmp
push
or
(bad)
or
sub
stos
mov
movs
adc
popf
ins
imul
sbb
loope
retf
popa
sub
mov
ss
sbb
xor
dec
cmp
pop
fist
cmp
cmp
ret
sahf
sbb
jle
(bad)
dec
jp
out
mov
ret
cmp
and
aaa
ficomp
inc
mov
sub
(bad)
push
add
pop
add
jmp
adc
and
push
sub
jmp
jp
test
stos
mov
push
(bad)
mov
push
out
push
and
adc
mov
xchg
xor
scas
cmps
xor
xor
jle
cwde
inc
jo
repnz
and
dec
call
sub
push
(bad)
shl
add
sbb
cmps
(bad)
repnz
push
dec
xor
ror
sbb
jb
jp
jne
fldcw
ror
aaa
add
sahf
mov
add
rcl
sub
mov
data16
(bad)
push
ret
js
xor
pushf
jp
rcr
icebp
ss
shl
clc
mov
ss
cli
ficom
sahf
fisubr
shl
add
sub
ret
and
mov
mov
ret
push
jp
sub
dec
js
mov
sub
sbb
ret
out
outs
bound
or
stos
inc
mov
dec
add
or
cwde
out
xchg
lds
push
ret
sbb
adc
push
jle
aas
out
rol
(bad)
retf
adc
ret
dec
ds
sbb
scas
sbb
inc
shr
or
jno
retf
xor
dec
push
repnz
or
nop
(bad)
nop
rcl
push
dec
sub
pusha
lock
pop
inc
mov
loop
call
mov
jl
js
adc
dec
pop
bound
push
pop
pop
and
nop
outs
mov
push
ret
sbb
sar
movs
xchg
xchg
xchg
or
push
les
pop
mov
scas
loop
mov
into
shl
sbb
pop
repnz
add
cmp
pop
mov
arpl
mov
js
adc
jo
adc
lods
sbb
test
loope
out
inc
daa
idiv
in
imul
out
xchg
loope
popa
outs
dec
(bad)
fucom
cdq
mov
ret
and
xor
add
or
adc
dec
xor
imul
sub
xor
pusha
gs
or
add
scas
cmps
add
addr16
xchg
sbb
rol
pusha
and
pusha
ins
call
pop
push
js
or
shr
jb
xor
mov
bound
dec
add
push
jbe
push
imul
pop
pop
add
dec
and
(bad)
or
cmp
sahf
xchg
mov
leave
les
(bad)
adc
cmp
shl
pop
xor
adc
test
shl
pusha
jb
cmp
mov
scas
or
sbb
pop
(bad)
mov
push
dec
outs
cs
cmp
and
xchg
enter
inc
outs
loope
cmp
push
pop
js
ret
and
or
(bad)
call
sbb
pop
sub
push
mov
add
xchg
xchg
push
xor
(bad)
xchg
ror
fidiv
adc
mov
jb
mov
cmp
xchg
xchg
or
sub
add
push
das
push
inc
adc
test
push
cmp
fist
dec
jbe
and
js
push
(bad)
pop
test
ret
ds
adc
or
push
inc
xchg
or
xchg
xor
test
ret
mov
loopne
js
fcmovbe
and
popa
sub
dec
es
inc
mov
outs
bound
xchg
cmps
out
ds
adc
dec
add
shl
dec
loopne
ret
pop
repz
and
shr
pop
daa
cmp
ror
xor
(bad)
push
mov
sahf
jb
pop
sub
push
out
ds
mov
test
nop
adc
sub
adc
div
cmps
sahf
test
jle
scas
push
add
(bad)
jnp
(bad)
outs
rol
jbe
or
ds
mov
push
xchg
dec
ret
(bad)
xor
xchg
dec
jb
mov
dec
sub
and
pop
addr16
jp
push
mov
ins
or
lea
call
cwde
rol
js
jbe
add
sbb
cmp
retf
call
outs
dec
ret
inc
cmps
test
es
outs
loopne
cdq
sub
cmp
shr
xor
cmp
fimul
cmp
cmp
or
retf
outs
scas
stos
pop
or
mov
mov
cs
shr
xchg
mov
jo
shl
push
cmp
arpl
ret
outs
xchg
cwde
adc
push
dec
fs
(bad)
push
jne
push
inc
sahf
dec
jb
sar
lods
inc
dec
cmp
outs
sbb
dec
rol
push
scas
imul
imul
xchg
pop
sub
xchg
pop
cmp
lock
adc
dec
test
xor
xor
outs
ret
cmps
out
ret
arpl
cmps
mov
pop
mov
push
test
dec
cmp
ret
mov
fcomp
out
mov
and
iret
inc
arpl
cmp
dec
adc
adc
xchg
lods
xor
popa
mov
pop
mov
bound
xor
retf
je
ja
jle
daa
pusha
add
add
xchg
stos
pop
mov
add
xchg
add
adc
mov
pop
jle
enter
clc
test
sub
mov
shr
movs
cmc
ins
scas
add
or
arpl
jmp
test
xchg
push
add
push
(bad)
push
mov
cmc
mov
jbe
jno
push
mov
xor
cmp
cli
repnz
test
dec
pop
cmp
popa
sbb
push
add
mov
fisub
popa
add
loop
pusha
imul
stos
inc
cmps
str
jnp
test
add
ret
mov
dec
lea
sahf
sbb
fdivr
movs
out
jbe
arpl
or
sub
and
jle
lea
and
dec
mov
add
push
xor
mov
cli
inc
jmp
add
xchg
inc
add
inc
pop
jbe
add
mov
add
loopne
sahf
retf
xchg
and
call
or
out
mov
mov
popa
jle
out
add
into
loop
inc
ret
pop
push
lahf
jecxz
xchg
or
and
in
and
jp
loop
sar
mov
inc
xchg
loopne
fld
push
rcl
pop
es
push
sbb
xchg
xor
cmc
adc
jbe
adc
push
inc
or
mov
in
or
aam
test
imul
or
pushf
and
add
jmp
adc
adc
add
sahf
add
inc
pusha
xor
loopne
jbe
inc
cmp
fistp
and
(bad)
and
lods
xor
(bad)
pop
add
sub
sbb
test
dec
into
lahf
data16
add
or
push
lock
cmp
(bad)
(bad)
cmps
outs
repnz
data16
add
jnp
pusha
ret
mov
mov
inc
repnz
pop
jp
push
bound
mov
sbb
jecxz
js
pop
adc
ins
inc
dec
xchg
sbb
mov
jle
popa
mov
push
dec
add
sub
mov
lock
lea
(bad)
pop
jo
fldenv
push
bound
xchg
push
sub
mov
lods
xchg
pop
xchg
ror
push
jnp
in
xor
xor
jo
lock
push
mov
stos
xchg
nop
sbb
xchg
adc
xchg
pop
cmps
push
dec
je
pop
inc
xchg
rcr
xchg
out
xchg
popa
or
push
xor
jbe
pop
sahf
cmp
pop
(bad)
mov
(bad)
jmp
add
sub
push
fisub
xchg
dec
mov
push
xchg
jbe
dec
push
adc
xchg
mov
not
ret
xor
retf
je
loopne
cmp
call
ja
fs
xor
cwde
sbb
sub
popa
rol
sahf
call
es
inc
adc
mov
adc
dec
xor
mov
loop
cmps
and
sub
inc
or
mov
and
sbb
add
jb
push
pushf
mov
or
ret
and
ss
inc
push
lahf
iret
(bad)
sbb
adc
push
xchg
(bad)
(bad)
and
add
or
and
pop
sub
or
dec
imul
adc
or
inc
mov
ss
inc
jp
pop
add
iret
dec
push
das
pop
das
rcr
dec
push
sub
cmps
dec
cmps
mov
(bad)
pushw
and
xor
call
test
xchg
xor
dec
adc
sub
pop
test
dec
add
sahf
mov
jmp
sbb
test
pop
push
call
inc
cmps
hlt
xor
shr
push
outs
sbb
in
push
movs
out
mov
fiadd
mov
xchg
mov
or
push
sub
xor
xchg
mov
sub
fiadd
ret
in
cmp
mov
mov
test
push
push
aaa
es
and
xchg
nop
cmp
sahf
pop
pop
jo
mov
push
out
and
add
inc
outs
call
dec
inc
(bad)
sbb
ret
push
sub
fcom
cli
div
jmp
sub
call
or
int3
dec
mov
das
push
xor
adc
jo
sbb
and
loop
mov
mov
xchg
sub
stos
xor
xchg
bound
xor
mov
scas
add
cmp
jp
fiadd
pop
stos
push
ret
ds
xor
adc
or
out
pop
scas
ja
adc
inc
(bad)
xchg
and
xchg
(bad)
jb
and
and
mov
outs
push
mov
jbe
(bad)
or
xor
mov
leave
pop
bound
cmp
fs
sbb
ds
or
popa
mov
adc
jle
movs
lds
sub
mov
xor
pop
cmp
push
sbb
sub
stos
dec
sbb
pop
push
jnp
jb
xlat
sub
mov
movs
(bad)
lods
push
dec
jmp
inc
push
(bad)
into
scas
xchg
inc
add
iret
sub
push
rol
aaa
sbb
cmp
out
mov
xchg
ss
xchg
movs
xor
mov
mov
lods
add
sbb
(bad)
stos
test
or
adc
or
ret
or
scas
ds
add
inc
or
push
cs
or
push
push
(bad)
ret
pop
bound
mov
mov
cmps
jle
add
and
sbb
fadd
or
test
sahf
lock
ss
test
dec
mov
mov
sub
leave
mov
mov
dec
outs
sahf
rcl
add
xchg
and
test
mov
ds
sbb
pop
mov
aad
cmps
enter
cs
xchg
into
mov
rcl
call
loopne
mov
mov
push
add
add
js
(bad)
push
sbb
dec
sbb
adc
xchg
inc
xchg
xchg
repnz
mov
test
push
sbb
outs
cmps
aaa
push
nop
mov
xchg
pusha
add
lods
outs
(bad)
pushf
or
mov
or
adc
popa
out
dec
mov
outs
repnz
mov
lods
int3
pop
sub
jp
adc
sbb
xchg
add
pop
scas
mov
ret
cs
jecxz
out
xchg
movs
out
cmc
and
jo
sahf
adc
cdq
mov
mov
ret
push
adc
retf
and
sahf
mov
popa
or
and
lods
inc
cmp
cmp
mov
jle
xchg
mov
mov
daa
outs
bound
add
pusha
add
mov
not
(bad)
dec
test
fistp
mov
push
lds
inc
push
adc
and
jb
shl
push
jbe
push
xchg
aaa
push
shl
add
cmp
into
sub
adc
push
(bad)
push
sbb
lods
popa
scas
shr
sbb
leave
sub
cmp
in
sub
sub
inc
add
ds
push
dec
xor
fdiv
add
add
aas
add
add
pop
mov
adc
sub
jmp
sbb
nop
dec
add
jmp
add
dec
rcr
rcr
add
xchg
out
loopne
jmp
or
xchg
pop
push
out
inc
inc
xor
(bad)
fimul
rcl
sbb
jmp
push
jbe
fadd
xchg
xchg
sahf
cmp
push
js
and
mov
into
data16
out
dec
add
cmp
scas
xchg
add
xchg
push
(bad)
loopne
popa
loopne
ret
imul
ret
or
sbb
push
cs
dec
aam
push
jmp
call
test
cli
add
pop
inc
push
mov
ficomp
cmp
mov
jle
jle
push
popa
imul
dec
or
mov
jp
ss
dec
add
out
or
push
and
mov
leave
shl
xchg
inc
mov
sahf
cmp
pop
or
dec
mov
pusha
push
jbe
scas
popa
bound
dec
cs
push
js
sbb
mov
sbb
in
out
push
add
rcl
lds
adc
and
ret
xor
scas
jbe
sbb
jp
xchg
xchg
rcl
mov
xchg
pop
push
cmp
arpl
and
sbb
inc
and
bound
jo
adc
(bad)
pop
push
dec
retf
rcr
retf
cmp
sar
xor
and
or
into
push
ds
call
jle
retf
push
outs
or
and
add
sub
xor
xchg
imul
inc
cmps
repnz
dec
imul
dec
add
inc
push
xchg
pushf
and
sub
xchg
xchg
popf
and
and
mov
(bad)
add
inc
fwait
jmp
jle
add
push
jle
inc
xor
sub
data16
lods
fcomp
push
scas
sbb
adc
(bad)
es
les
test
loope
mov
loopne
push
call
mov
leave
retf
scas
xchg
add
ret
add
rcl
mov
dec
retf
hlt
xor
push
jbe
mov
xor
dec
sbb
mov
test
push
xor
jmp
cmp
cmp
xor
push
or
or
imul
push
adc
inc
enter
and
xchg
retfw
mov
dec
jmp
(bad)
js
mov
popa
mov
hlt
out
repnz
push
js
mov
loop
mov
cs
call
jp
adc
push
sbb
(bad)
cwde
outs
or
daa
scas
dec
jle
in
add
cmps
(bad)
xchg
push
add
mov
mov
stos
add
add
and
gs
data16
cs
cmps
ret
jecxz
imul
push
dec
cmp
and
cmp
outs
sbb
call
push
jp
jmp
jo
sub
push
das
cmp
ret
rcl
pop
and
xchg
push
sahf
dec
push
pop
mov
fsubrp
inc
imul
and
mov
xor
cmps
mov
jbe
mov
or
loop
ficomp
jp
loop
or
out
test
xchg
mov
xchg
adc
mov
jo
aaa
dec
loope
stos
pop
das
js
mov
fiadd
adc
xchg
mov
xor
jno
jnp
(bad)
add
pop
push
rol
fcmovnb
jbe
cmp
loopne
jge
lock
adc
jmp
and
enter
pop
inc
adc
imul
mov
arpl
pop
outs
sbb
inc
add
adc
not
stos
push
xchg
es
push
pop
add
jns
scas
out
cmp
push
mov
add
adc
popf
mov
imul
or
mov
pop
inc
rol
fadd
(bad)
cmp
add
rcl
push
sahf
lock
popa
adc
lahf
into
(bad)
loopne
dec
jo
adc
adc
mov
add
sahf
mov
xor
inc
inc
or
call
xchg
ror
xlat
add
dec
and
shl
in
mov
cli
bound
nop
sbb
xor
scas
push
sub
fcmovb
es
mov
inc
or
mov
jecxz
bound
adc
test
pop
or
stos
add
mov
push
mov
lea
cli
push
out
popa
bound
pop
pop
mov
pop
mov
mov
fisubr
pop
pop
fnstcw
fimul
mov
sub
xor
(bad)
pop
ret
(bad)
imul
ret
sbb
add
push
sbb
ret
pop
and
add
adc
and
xchg
sub
hlt
js
or
sbb
fisttp
and
test
push
push
push
lods
push
clc
adc
ja
xor
dec
sbb
sahf
fidiv
or
sub
sahf
ret
pusha
test
shl
mov
mov
dec
push
nop
push
in
add
cli
add
or
jmp
dec
add
mov
dec
mov
add
sbb
mov
dec
test
pop
loop
mov
mov
mov
adc
push
jne
sbb
arpl
sub
or
mov
or
cwde
dec
clc
fwait
movs
imul
cmp
ds
mov
call
ror
mov
lahf
call
cmps
loop
mov
mov
add
xchg
sbb
test
push
call
repnz
pop
js
es
push
(bad)
xchg
sahf
repnz
mov
out
xchg
adc
dec
dec
push
lahf
mov
loop
ror
bswap
pop
outs
lea
fcomp
jmp
stos
daa
pusha
mov
scas
xchg
jp
outs
ficomp
dec
cmp
and
out
ret
or
xchg
mov
push
xor
push
fidivr
or
inc
or
or
or
out
push
xor
sub
mov
jmp
ret
cwde
or
mov
popa
repnz
sbb
push
push
add
(bad)
loopne
push
mov
sahf
mov
retf
mov
sbb
stos
inc
jmp
dec
mov
inc
ficom
mov
rcr
(bad)
mov
pushf
(bad)
sahf
push
call
into
mov
mov
sub
and
sbb
nop
and
pop
add
aas
movs
inc
inc
inc
shl
inc
xchg
test
(bad)
ja
mov
sbb
popa
or
mov
cs
popa
and
add
dec
outs
dec
mov
sbb
(bad)
(bad)
repnz
retf
pop
xor
sbb
jp
or
ss
jae
in
fisttp
and
rol
popa
inc
popa
dec
repnz
add
inc
jp
bound
add
and
add
rcr
ss
sub
mov
loop
into
test
enter
dec
mov
inc
add
inc
sbb
test
jp
lock
loop
(bad)
mov
scas
push
mov
add
into
push
mov
cmp
dec
mov
push
adc
push
shl
pop
jo
(bad)
xor
and
inc
xor
es
jne
loopne
cs
push
pop
cmp
out
push
push
cmps
push
loop
inc
loope
or
jp
jbe
adc
loope
jbe
dec
js
sub
inc
cmp
mov
jmp
nop
pop
or
sbb
iret
xor
mov
loop
add
aas
add
add
retfw
test
jmp
mov
sahf
enter
loope
retf
fld
dec
add
xchg
mov
pop
push
xor
das
mov
dec
lods
movs
adc
js
into
inc
pop
sbb
cmps
sub
sbb
pop
sbb
jle
xchg
dec
mov
(bad)
loopne
ret
sub
lods
gs
(bad)
dec
lea
jo
pop
jle
or
xchg
push
scas
ret
jp
xor
rcl
adc
inc
movs
inc
add
pop
mov
mov
xchg
xchg
add
ins
leave
popa
xchg
out
and
ds
and
arpl
xor
or
rol
loop
aam
repnz
shl
adc
sub
jmp
adc
push
aam
xor
mov
js
or
out
repnz
retf
xchg
xchg
ret
mov
ror
push
sub
add
mov
retf
mov
xor
sub
ret
retf
mov
ret
jbe
mov
rol
mov
jp
fstp
cwde
dec
mov
nop
mov
mov
push
adc
dec
retf
mov
scas
jp
ret
pop
and
dec
dec
sahf
mov
pop
or
inc
loop
pushf
mov
adc
repnz
adc
into
call
pop
cli
push
mov
adc
push
inc
sahf
push
adc
rcr
call
daa
jmp
add
add
mov
sub
shl
scas
xchg
test
xor
push
push
scas
adc
(bad)
and
xchg
pusha
xor
ins
sub
xor
add
into
push
xchg
cdq
sub
sbb
out
dec
nop
push
add
ficom
(bad)
cmps
add
pop
xor
dec
and
cli
into
push
adc
nop
iret
push
and
mov
ins
add
xchg
jo
xor
push
mov
cmps
int3
add
and
(bad)
adc
enter
jb
sbb
call
lahf
popa
mov
add
mov
into
adc
pop
ror
scas
mov
xchg
sub
xchg
xor
movs
icebp
mov
inc
mov
fwait
daa
jecxz
add
xchg
jle
cmp
mov
neg
or
dec
movs
inc
xchg
stos
ret
mov
or
rcr
push
mov
sbb
cmps
pop
jo
and
cli
stos
push
cs
sbb
dec
push
ret
inc
sbb
push
xor
inc
ret
leave
and
loop
mov
xchg
dec
inc
inc
inc
(bad)
dec
xchg
xor
adc
jbe
rcr
dec
lods
popa
fisubr
xor
push
and
xor
or
dec
mov
and
cli
retfw
pop
pop
pop
pop
dec
enter
and
(bad)
cmp
push
les
push
call
sbb
loop
xor
test
xor
adc
add
scas
rol
xor
add
stos
nop
cs
pop
sbb
shr
adc
shl
ret
sbb
inc
fadd
adc
adc
push
push
bound
jb
test
pop
outs
xchg
sbb
push
push
(bad)
adc
adc
cdq
and
cmp
or
and
dec
ins
shr
cmp
(bad)
test
lea
xor
add
jb
jb
or
push
pop
fld
mov
cmp
ret
cmps
loopne
add
mov
stos
jle
dec
mov
dec
sahf
scas
push
aam
add
adc
adc
add
push
rol
cmp
outs
fwait
les
(bad)
into
xchg
stos
(bad)
rcr
push
loopne
and
rcr
lods
loopne
into
test
iret
sbb
cs
add
jmp
data16
pusha
add
cmp
push
xor
dec
pop
sbb
inc
pop
mov
add
inc
scas
mov
lahf
adc
xchg
outs
jb
fidivr
push
imul
ins
push
(bad)
or
fiadd
rcr
push
loop
jns
jnp
rcl
pop
inc
scas
ss
fucom
ret
cmp
inc
pop
pop
(bad)
call
cmp
call
jle
icebp
js
adc
pushw
rol
jbe
(bad)
or
cmp
retf
fisub
jecxz
dec
xchg
adc
push
push
out
dec
add
(bad)
dec
dec
xor
push
mov
and
aaa
ret
add
out
push
ret
adc
loop
mov
add
out
mov
mov
push
push
mov
ds
and
into
xor
out
push
mov
lock
push
dec
push
ja
dec
mov
or
push
and
xchg
push
ss
retf
adc
add
out
push
mov
sbb
push
scas
and
pop
ret
ins
or
out
inc
mov
dec
pop
das
push
movs
push
cmp
dec
mov
mov
mov
pusha
pop
into
ror
cs
pop
sahf
cmps
loope
xchg
mov
xchg
inc
ret
loop
dec
retf
adc
push
fisub
push
addr16
sbb
push
or
sar
push
ds
cmp
mov
add
or
out
mov
repnz
adc
and
loop
cwde
pop
adc
add
es
push
aaa
add
ins
xchg
mov
sub
dec
fs
jmp
into
mov
and
sub
pop
jb
fneni(8087
lods
mov
sbb
or
les
retf
arpl
iret
mov
xor
cmp
cmp
push
jmp
(bad)
sbb
add
jmp
dec
call
scas
add
sbb
mov
rsm
mov
push
cmc
inc
rcr
pop
scas
cwde
cmp
xchg
pop
and
dec
ret
lods
mov
ss
push
out
sbb
sahf
cwde
add
mov
dec
adc
mov
or
sbb
data16
push
lds
mov
je
rcr
int3
retf
jp
jp
mov
and
pusha
add
(bad)
jb
xchg
add
pop
repnz
dec
(bad)
jmp
adc
inc
inc
popa
sbb
shl
jbe
push
fcomp
(bad)
mov
das
pop
pop
daa
adc
lock
out
call
repnz
outs
sub
inc
mov
imul
clc
ret
dec
push
add
or
sub
movs
mov
jg
movs
and
and
das
adc
dec
dec
pushw
in
sbb
mov
or
jbe
repnz
jl
test
loop
xchg
ss
mov
mov
rcr
inc
jg
xor
adc
rcr
mov
pop
arpl
sbb
cmp
dec
es
sub
mov
retf
sbb
pusha
and
xor
pushf
sub
inc
fidiv
out
mov
retf
mov
sahf
inc
sbb
xchg
nop
dec
pop
es
xchg
mov
shr
xor
push
xchg
jmp
dec
push
sbb
mov
inc
jp
fidiv
pop
jp
push
(bad)
arpl
add
(bad)
mov
pop
mov
and
adc
lods
movs
inc
(bad)
sbb
arpl
and
push
repnz
ret
mov
cs
out
loop
mov
rol
push
dec
fisubr
add
hlt
adc
neg
push
dec
jmp
push
push
mov
sub
sbb
(bad)
retf
xchg
mov
dec
adc
xchg
call
push
pop
add
or
mov
cmp
add
clc
dec
dec
(bad)
pop
mov
adc
pop
pusha
xor
lea
add
dec
fs
es
or
push
aas
ror
les
(bad)
cs
nop
leave
das
and
adc
jbe
out
sar
xchg
mov
outs
dec
mov
add
mov
xchg
in
int3
iret
mov
adc
daa
data16
adc
dec
jmp
out
bound
cmps
pop
dec
xchg
lds
sbb
xor
pop
(bad)
(bad)
leave
xchg
push
ficom
adc
pop
cmp
xchg
push
push
pop
gs
xor
mov
daa
fidivr
das
add
popa
jecxz
mov
cmp
ret
xchg
sbb
adc
adc
add
mov
or
out
adc
sbb
xlat
mov
bound
dec
shl
cmp
pop
repnz
inc
js
push
scas
pop
push
pop
mov
scas
ins
pop
movsx
scas
into
push
aam
ret
mov
scas
pop
sbb
ss
add
call
adc
popf
sbb
xchg
pop
jmp
arpl
es
push
popa
ins
inc
dec
(bad)
and
push
dec
push
sbb
push
into
ret
jp
add
or
push
pavgb
xchg
push
cmps
dec
rcl
rcl
push
pusha
loop
outs
inc
mov
outs
jmp
dec
mov
les
push
mov
les
cs
mov
pop
and
rol
fidiv
es
mov
pop
es
add
and
lods
test
out
(bad)
jmp
dec
sbb
or
or
inc
adc
jp
cmps
shl
popa
push
mov
retf
and
add
dec
ds
pop
dec
test
mov
cmovs
cmp
outs
push
out
fimul
sub
add
jno
sub
setb
sub
dec
retf
ret
add
outs
call
test
or
outs
add
inc
cmp
sub
mov
jge
es
push
adc
inc
jl
jle
aaa
xchg
and
push
sahf
and
push
cmps
into
repnz
lods
or
retf
jb
cmp
sahf
dec
into
xor
push
(bad)
shl
mov
in
(bad)
xchg
xor
push
cmp
push
xchg
jmp
bound
dec
mov
loop
push
pushf
mov
inc
xchg
jle
mov
mov
xor
sub
inc
mov
mov
add
sbb
cmps
(bad)
out
and
sahf
add
es
sbb
cmp
cmp
add
inc
pop
inc
inc
push
dec
mov
imul
outs
mov
retf
add
adc
in
loopne
jp
xchg
sub
xor
mov
add
push
sahf
ret
ins
add
shl
dec
sbb
into
adc
xor
ret
call
dec
sbb
and
retf
fcomp
imul
ins
push
repnz
jb
lahf
ficom
push
push
nop
cdq
and
jbe
sbb
inc
xor
pop
pop
inc
or
sub
in
pop
mov
ins
popa
mov
pushw
xchg
int3
dec
mov
add
mov
test
pop
adc
add
add
cmps
cmp
xchg
or
mov
push
enter
out
jo
sub
pusha
dec
sbb
jle
and
sub
xchg
cs
sub
ss
add
or
or
pop
sbb
(bad)
pop
inc
test
outs
mov
and
je
add
scas
push
pop
dec
retf
sub
adc
test
es
pop
outs
pop
js
ficomp
lahf
mov
inc
mov
cs
sub
pop
out
rol
mov
cmovns
jmp
inc
retf
and
rcr
dec
leave
push
(bad)
jle
es
pop
xchg
push
fcmovb
lea
into
xchg
inc
outs
(bad)
rcr
inc
dec
xor
or
jmp
push
sti
cmps
in
sbb
cli
(bad)
outs
div
loope
xchg
pop
mov
or
ret
les
into
adc
scas
aaa
push
adc
add
xlat
dec
adc
movs
test
mov
inc
xchg
cmp
(bad)
call
xchg
add
(bad)
bound
repnz
popf
sub
mov
push
arpl
mov
mov
adc
ficom
jmp
rcr
add
pop
dec
scas
add
ds
inc
test
fiadd
adc
xor
cmp
lock
imul
push
aam
sar
nop
push
leave
mov
es
add
pop
inc
js
imul
adc
(bad)
jp
xchg
mov
adc
mov
mov
mov
(bad)
call
test
mov
ret
add
mov
imul
jo
xchg
(bad)
jb
mov
xchg
lea
mul
lods
xchg
mov
mov
ret
loope
das
mov
loopne
cmp
sbb
out
stos
sbb
jo
mov
push
sbb
mov
fs
ror
les
fiadd
sahf
das
mov
push
push
cmp
push
inc
add
pop
test
xchg
mov
dec
jmp
push
div
jle
ss
pop
adc
push
arpl
pop
mov
mov
ret
sbb
enter
jp
inc
or
ret
dec
cmps
dec
jp
dec
stos
xchg
lods
daa
(bad)
jb
rcl
push
inc
mov
cmp
inc
inc
and
xchg
fcom
cs
xor
outs
xchg
loope
pop
add
loope
push
mov
mov
and
out
add
xchg
into
aam
ret
mov
push
les
or
cmc
mov
dec
and
add
xchg
jp
scas
stos
mov
add
stos
cli
add
mov
or
dec
bound
push
into
jmp
bound
hlt
xor
mov
and
ret
iret
fmul
push
cmps
or
nop
stos
inc
es
cmps
push
mov
aam
nop
ret
xor
jbe
(bad)
inc
add
mov
jbe
mov
out
rcl
or
and
dec
imul
add
cli
pusha
and
pop
fist
dec
push
fiadd
into
movs
xchg
xor
loope
out
dec
pop
(bad)
pop
xor
sahf
scas
cli
push
pusha
mov
sbb
pushf
push
jmp
fidiv
sub
jo
ss
stos
xor
mov
jl
popa
es
dec
imul
mov
xor
int3
push
js
inc
scas
stos
(bad)
sbb
(bad)
rcr
(bad)
adc
or
nop
push
jb
mov
and
pop
xchg
sbb
jmp
outs
sbb
sbb
push
mov
or
adc
pop
pop
dec
or
jbe
mov
ds
xchg
add
mov
cmp
into
xchg
xchg
or
fisttp
(bad)
sub
mov
adc
add
push
sbb
arpl
jnp
jbe
sahf
shl
sbb
xor
stos
ret
or
loop
jp
shl
mov
call
sbb
sub
enter
ficomp
sub
sbb
fcomp
out
movs
fidiv
sub
mov
sub
(bad)
inc
ss
mov
jle
mov
lock
nop
cmp
mov
and
das
push
mov
adc
mov
mov
push
pop
push
lods
dec
sbb
imul
loop
and
test
mov
sub
cmp
push
lods
sub
mov
out
bound
cwde
test
mov
shl
push
add
daa
mov
cmps
mov
bound
repnz
xor
lahf
xchg
push
inc
mov
scas
mov
test
mov
pop
loopne
pop
retf
ds
adc
imul
je
mov
push
adc
inc
inc
xor
xor
push
in
mov
pusha
fisttp
mov
cmp
add
loopne
outs
jb
jmp
jecxz
stos
xchg
pusha
ret
jb
xchg
call
and
stos
js
mov
xor
inc
into
mov
sar
or
or
or
pop
repnz
push
popf
push
adc
retf
mov
pop
dec
sar
cmp
push
adc
cmp
add
add
icebp
outs
sub
(bad)
cwde
sbb
div
rcr
outs
mov
fild
cmps
mov
sbb
clc
movs
xor
jne
sub
push
mov
add
hlt
mov
xchg
push
mul
ins
popf
ror
pop
dec
outs
cmp
div
(bad)
nop
into
xchg
mov
inc
add
loopne
and
jo
mov
add
into
rol
or
das
or
add
jmp
mov
cmps
inc
ror
adc
inc
inc
bound
call
enter
setg
cwde
rcl
or
inc
or
add
repnz
mov
mov
or
inc
mov
adc
mov
outs
dec
sub
or
(bad)
es
inc
js
sbb
call
add
(bad)
bnd
popa
ins
pop
push
add
dec
xchg
add
push
mov
lods
daa
xchg
ds
sbb
sbb
call
mov
repnz
mov
and
mov
cwde
push
(bad)
inc
sub
out
cmps
push
inc
pusha
add
outs
cwde
rcl
mov
mov
or
cli
push
popa
cmp
cwde
mov
repnz
les
cmp
push
call
push
jo
mov
into
sbb
add
jbe
mov
ror
ds
(bad)
xchg
xor
sub
and
vmovntdqa
ds
sbb
(bad)
xor
mov
xchg
test
mov
cmp
cmp
pop
sbb
rcl
mov
rol
mov
bound
movups
dec
and
sbb
loopne
pop
hlt
sub
loop
adc
mov
mov
sub
outs
jecxz
xor
pop
pop
mov
ds
ds
jo
fs
sub
lock
into
mov
push
fild
inc
loope
add
repnz
retf
add
push
pop
or
js
out
pop
test
mov
out
sub
and
outs
push
rol
cmp
ret
iret
into
and
scas
fist
test
jbe
and
rcl
xchg
ss
adc
adc
push
or
scas
jae
sub
rol
push
mov
les
mov
or
adc
fldcw
arpl
xchg
sub
and
fmul
nop
cs
out
and
mov
test
jmp
outs
repnz
pop
repz
dec
jmp
jmp
sub
pop
push
dec
adc
ret
dec
daa
lea
into
pusha
mov
nop
sbb
pop
pop
cmp
(bad)
into
push
es
not
xchg
xor
(bad)
scas
sbb
mov
sbb
xchg
or
pop
ret
pop
add
popa
add
fisub
mov
or
inc
mov
out
(bad)
mov
repnz
outs
jb
inc
lock
push
ret
test
pop
xchg
mov
mov
pop
mov
popa
adc
hlt
and
cmp
adc
rcr
inc
fsub
push
add
ds
pop
or
fsubr
sbb
mov
add
int3
cmp
jbe
mov
add
retf
test
repz
mov
push
pop
punpcklwd
ds
or
(bad)
dec
xor
jnp
mov
call
xchg
jp
sbb
mov
push
ds
push
pusha
and
sbb
es
aam
nop
push
daa
push
pop
xor
ret
es
push
sbb
sbb
popf
or
dec
sbb
pop
or
shl
or
es
pop
into
xchg
or
stos
(bad)
push
push
add
and
sub
pop
push
fidivr
(bad)
mov
and
lods
mov
push
scas
cmp
add
sub
(bad)
cs
mov
sub
mov
cmp
loope
(bad)
jbe
add
xchg
xchg
mov
call
out
add
or
shr
xchg
add
sub
out
cmps
ds
xchg
cmp
rcr
shl
addr16
pop
or
mov
test
inc
sbb
xor
pushf
cs
mov
add
(bad)
out
dec
btc
or
mov
(bad)
cmps
sbb
pop
add
cmp
jnp
scas
inc
dec
jp
xchg
rol
xchg
ficom
sahf
mov
scas
sahf
mov
add
int3
lahf
retf
mov
mov
push
enter
cmp
sbb
ss
rcr
lock
dec
nop
sub
es
ret
fcom
pop
push
push
out
add
jb
jp
outs
xchg
jbe
xor
pop
push
psrld
push
test
adc
mov
adc
or
pop
jg
push
rcl
aam
into
outs
pop
dec
and
cmps
retf
mov
and
cmp
pop
push
fwait
or
rcl
fcmovb
add
push
jmp
(bad)
xchg
sub
adc
jle
mov
sbb
cs
cmp
dec
pop
jmp
push
xor
adc
xor
push
mov
push
mov
add
out
pop
mov
sub
sbb
jo
bound
mov
adc
bound
into
into
pusha
mov
sbb
mov
xor
push
push
jno
push
dec
mov
(bad)
stos
(bad)
(bad)
pop
mov
add
xchg
mov
ret
xchg
cmp
jp
mov
cmp
sbb
sub
cmp
data16
cmps
mov
xchg
lea
call
mov
rcl
add
mov
cmps
mov
test
daa
in
cmp
inc
sub
test
movs
push
(bad)
sahf
or
mov
sbb
cwde
dec
mov
and
jb
add
xchg
or
fnstcw
pusha
retf
sbb
fs
mov
push
(bad)
cmp
fcmovb
jmp
mov
outs
mov
and
mov
jle
mov
or
and
push
xchg
pop
lods
sub
jmp
test
sbb
jp
pop
mov
test
mov
add
xchg
sahf
add
and
rol
mov
faddp
jle
out
loope
mov
mov
xchg
xor
dec
and
clc
push
test
jo
leave
cmps
mov
out
jle
cmp
push
mov
les
fbld
shl
fcom
pop
mov
inc
and
loop
cmp
inc
popa
imul
sbb
sbb
scas
fwait
add
mov
inc
not
sub
inc
mov
sbb
mov
sbb
inc
mov
and
cmp
dec
fisub
scas
add
cs
mov
test
add
mov
jb
(bad)
(bad)
rol
pop
stos
aaa
sahf
adc
add
add
jp
xor
mov
sbb
fcomp
sbb
or
pop
push
shl
out
cmovae
xchg
and
sbb
fimul
sub
cmp
add
add
adc
xor
cli
repnz
fs
add
mov
xchg
xchg
bound
mov
jmp
mov
rcr
ficom
push
adc
out
bnd
jmp
xor
cmp
or
call
and
xchg
sbb
mov
fbstp
mov
and
pminub
js
mov
fild
bound
stos
mov
movs
push
cmps
push
sub
repz
imul
fiadd
vprotb
cmp
mov
pop
dec
xchg
scas
xchg
es
dec
sub
lock
mov
jp
call
movs
movs
sahf
xchg
mov
cmp
cmp
jbe
inc
mov
mov
push
add
js
mov
mov
push
dec
(bad)
mov
popa
sub
mov
loopne
mov
shl
xchg
push
retf
or
(bad)
mov
jp
sbb
sahf
js
dec
in
mov
fwait
add
rcr
push
pop
jbe
je
adc
loope
(bad)
stos
pop
cli
sbb
xor
loop
lods
xchg
sub
loop
and
leave
dec
(bad)
adc
sub
daa
rol
dec
jo
les
pop
pop
and
test
fldl2e
fs
(bad)
and
test
sbb
fidiv
out
push
popa
add
cmps
inc
js
mov
sahf
mov
fs
sbb
cmp
mov
cwde
sbb
adc
inc
or
rcr
pop
or
lock
mov
cmc
push
cs
push
outs
loope
pop
xchg
cmp
mov
pop
mov
add
mov
dec
jle
sub
pop
out
sahf
inc
xchg
cmp
add
bound
inc
or
mov
es
arpl
leave
and
push
out
xor
add
xchg
add
dec
scas
outs
xor
xor
sbb
(bad)
out
xchg
dec
add
cmps
cs
pop
or
jo
jecxz
(bad)
add
cmp
push
push
push
or
mov
das
pop
ficomp
dec
pop
loop
rol
push
jno
adc
push
sub
jmp
outs
mov
or
inc
lea
jb
pop
pop
js
dec
push
xor
push
xchg
sbb
inc
imul
mov
adc
push
inc
ret
pop
inc
js
add
dec
or
loopne
sar
inc
cli
push
xor
data16
xchg
mov
repnz
mov
dec
mov
and
sbb
push
dec
add
pop
jmp
xchg
js
cmp
jp
shr
add
mov
data16
and
iret
xchg
(bad)
movs
rol
cmps
mov
sbb
repnz
pop
imul
out
cmp
shr
xchg
mov
or
push
jmp
mov
and
mov
mov
xchg
addr16
add
loopne
or
or
or
or
mov
mov
push
xchg
lods
pop
and
jmp
sbb
enter
xor
js
sahf
fimul
sub
ret
or
ret
retf
xchg
jb
mov
dec
pop
ss
pop
mov
and
mov
imul
and
mov
xchg
inc
(bad)
jb
add
xchg
fidivr
(bad)
xchg
sar
sbb
ja
jns
repnz
adc
es
add
shr
les
pop
stos
mov
jbe
sub
sbb
loope
and
pusha
jle
(bad)
xor
out
dec
test
mov
sub
cmps
adc
adc
xor
adc
fiadd
call
sahf
pop
adc
adc
pop
sbb
inc
cmp
cwde
pop
fild
inc
push
or
sti
gs
pop
mov
data16
popw
inc
xor
add
test
lea
push
test
push
(bad)
push
cmp
adc
pop
cmps
push
lods
and
dec
imul
jp
add
es
sbb
or
dec
(bad)
rol
aaa
sub
out
mov
pop
retf
inc
sbb
aas
outs
inc
inc
dec
inc
retf
into
jo
je
jmp
jp
cmp
add
cmp
adc
popf
fimul
sbb
jmp
push
into
scas
repnz
sub
inc
push
push
cwde
mov
ds
sbb
mov
adc
cs
add
mov
dec
jmp
sub
push
ret
inc
or
or
inc
or
mov
retf
out
fcom
js
enter
mov
lds
sbb
and
sbb
(bad)
push
js
xlat
ss
add
(bad)
(bad)
call
pop
sbb
scas
mov
mov
ins
popf
cs
or
(bad)
ds
popa
mov
push
ss
sub
sahf
add
int
or
retf
adc
(bad)
outs
push
lea
push
cwde
cmp
cmps
xchg
repnz
push
xchg
push
xlat
xchg
or
mov
js
and
cmps
stos
mov
xchg
jnp
inc
call
pop
pusha
xor
ret
xchg
fs
aas
(bad)
ins
loop
xchg
adc
sbb
movs
pusha
xchg
cmps
cli
add
test
mov
rcl
mov
jle
rcr
repz
cs
loope
ror
pop
or
scas
xchg
test
add
jb
sub
dec
out
psrlq
fcom
aaa
pop
mov
xor
mov
movs
mov
gs
dec
mov
pop
rol
dec
sub
xchg
mov
pop
xchg
cmp
pop
adc
or
jmp
test
cmovb
rol
outs
mov
sbb
or
add
cmc
mov
add
jle
sub
cmc
mov
es
rcl
ret
sbb
leave
and
(bad)
pop
dec
inc
(bad)
cli
mov
rol
xchg
push
push
push
xchg
mov
fcom
push
fcmovb
bound
pop
or
pop
or
(bad)
pusha
cli
stos
inc
add
add
ins
sbb
cmps
ret
adc
cmp
ror
add
inc
test
mov
adc
fist
out
mov
mov
sbb
dec
pop
jmp
cmps
push
inc
ret
and
cmp
mov
stos
add
adc
push
add
and
mov
push
push
cli
xchg
ror
aaa
sbb
movs
add
pop
es
retf
jmp
push
pop
xchg
xchg
(bad)
loop
pusha
repnz
dec
jo
in
pop
sti
ins
cwde
vmovq
sub
jo
mul
sbb
jmp
dec
adc
push
add
mov
xchg
sahf
mov
xor
rcl
inc
mov
loopne
pop
out
and
out
fcom
jg
xchg
cmp
das
loope
cmp
xchg
push
adc
fadd
clc
add
cmp
or
add
inc
not
adc
and
mov
test
stos
inc
xchg
xchg
adc
mov
sub
aaa
jb
aaa
jno
jmp
push
ds
jp
mov
mov
mov
push
xchg
outs
idiv
jb
mov
mov
cmp
mov
jb
repz
or
jb
add
fcmovb
adc
outs
lods
les
ret
push
cmp
or
test
and
xor
dec
inc
mov
sbb
xchg
jbe
outs
add
es
jb
shl
rcl
dec
adc
neg
push
mov
and
imul
outs
mov
mov
or
jb
adc
sbb
xor
xchg
bound
clc
xchg
call
jecxz
add
mov
push
call
jo
mov
jmp
mov
sbb
inc
and
(bad)
scas
cmp
dec
nop
(bad)
cmp
mov
test
push
or
mov
push
idiv
and
fwait
sahf
sbb
pop
push
inc
addr16
or
fisub
out
xor
jb
push
xchg
pushf
push
or
jmp
xchg
inc
dec
leave
adc
(bad)
push
push
jmp
dec
mov
mov
xor
jb
mov
xor
stos
fs
sbb
inc
cs
xchg
or
ss
jp
jb
cmp
or
ins
gs
(bad)
jbe
push
lea
cmp
and
xchg
xchg
xor
dec
dec
dec
outs
fsubr
or
xor
scas
les
pop
or
cmp
mov
add
(bad)
sahf
fdivr
and
sub
or
push
add
and
mov
mov
cwde
repnz
jp
das
sbb
xchg
loopne
pushf
push
jmp
push
inc
push
adc
push
jmp
inc
call
mov
and
push
rol
push
scas
and
data16
pusha
mov
idiv
pop
sub
jo
pop
add
das
xchg
es
test
outs
xor
cmp
sbb
rcr
pop
pop
mov
data16
lods
dec
xchg
mov
push
sbb
add
cmp
(bad)
mov
popa
fs
loop
wbinvd
mov
cmp
pusha
add
cmps
ins
and
aaa
dec
retf
push
xchg
inc
and
push
sbb
call
jmp
cs
and
sar
push
pop
mov
daa
cs
sbb
arpl
add
adc
push
(bad)
mov
call
(bad)
pop
and
dec
out
adc
and
mov
sbb
aaa
and
xchg
fstp
mov
(bad)
inc
cmps
mov
js
inc
dec
dec
mov
add
call
jmp
and
scas
aaa
add
or
data16
test
aam
out
call
mov
ds
ret
cmp
fdivr
and
mov
out
mov
ror
repz
popf
(bad)
xchg
fisub
cmps
xor
mov
push
sbb
sahf
sar
retf
jo
add
sbb
iret
mov
fadd
dec
sahf
addr16
cmp
cmps
(bad)
and
pop
xchg
loopne
rcr
or
cmp
ss
or
ds
inc
xchg
xor
cmps
ror
add
sub
adc
imul
fimul
add
dec
dec
(bad)
xchg
push
and
cmp
xor
bound
sub
(bad)
and
or
or
test
jp
mov
add
ret
xchg
push
stos
enter
xor
fiadd
jp
addr16
jb
push
inc
lock
ret
fld
mov
ds
rcl
ret
mov
sub
mov
mov
hlt
adc
jbe
inc
int
xor
rcr
daa
inc
cmp
or
xchg
pop
sti
call
in
sub
aas
xchg
ret
nop
sbb
fadd
rcl
fbld
cmp
mov
cli
pop
mov
push
adc
xchg
(bad)
mov
jp
cs
or
push
les
ss
cmp
bnd
push
ficomp
sahf
jp
pop
sbb
pop
retf
adc
sub
lods
push
adc
push
lea
imul
xor
ret
dec
cs
call
fadd
pushf
and
popa
pusha
loopne
inc
push
nop
retf
pop
(bad)
cmp
arpl
pop
mov
xchg
cmp
cli
push
pop
jmp
xor
jecxz
fimul
or
pop
push
and
popa
dec
call
shr
adc
into
cmp
adc
ret
and
mov
mov
lea
shl
add
dec
add
and
mov
scas
shl
in
adc
dec
out
sahf
inc
add
cmp
sub
mov
jmp
dec
adc
push
js
bound
dec
sar
and
mov
sbb
es
or
aaa
or
add
xchg
bound
arpl
push
dec
pop
push
jb
mov
movs
aas
dec
xchg
sub
pushf
ret
add
add
loope
outs
jo
push
xor
inc
or
pusha
mov
aam
js
push
xchg
rol
jo
and
ret
out
or
test
push
and
and
pop
outs
loopne
adc
pop
mov
mul
mov
cdq
cmp
mov
es
repz
jbe
jbe
mov
dec
dec
sub
outs
and
push
push
into
xchg
mov
mov
and
sbb
rol
js
(bad)
or
adc
or
mov
pop
stos
es
rcl
adc
call
mov
add
jo
pop
mov
lss
adc
and
test
jo
loop
test
out
inc
xchg
ins
cli
and
test
test
popa
jne
dec
es
into
out
test
pushf
sub
repnz
sahf
mov
mov
push
adc
mov
push
mov
cli
pop
jl
inc
arpl
dec
or
push
xor
sbb
rcr
push
sub
jnp
jbe
in
leave
or
out
jp
das
pusha
inc
inc
add
inc
call
sbb
and
mov
pop
xchg
jns
sbb
rcl
push
dec
push
or
cli
rcl
inc
dec
xchg
or
and
mov
inc
movs
rcl
xchg
into
adc
pushf
dec
adc
stos
push
loope
lods
scas
(bad)
into
ret
inc
sbb
sbb
bound
pop
inc
sub
mov
xchg
sub
inc
es
xchg
sub
sahf
mov
mov
pop
and
adc
pop
adc
out
mov
inc
bound
or
test
sub
cmp
fwait
xchg
js
sar
xor
mov
mov
fadd
repz
pop
add
(bad)
adc
imul
mov
mov
ds
add
mov
(bad)
(bad)
fidivr
dec
add
sbb
add
sbb
or
loopne
mov
adc
or
jbe
es
mov
push
rol
inc
fsub
jmp
cwde
ret
and
repnz
imul
into
or
and
aaa
ret
add
bound
gs
push
(bad)
data16
mov
movs
adc
push
mov
es
test
dec
dec
xchg
or
sbb
cmp
out
sub
cmp
sub
mov
mov
shl
call
cs
ss
ficom
add
fsubrp
add
cmp
faddp
add
jmp
ret
leave
dec
inc
push
pop
adc
cmps
inc
add
dec
mov
cmp
jb
(bad)
xor
adc
(bad)
mov
ficom
inc
aas
add
inc
jmp
out
push
pop
adc
ret
pop
sub
loopne
cmp
jae
xchg
sbb
imul
dec
add
mov
test
mov
and
mov
jne
xchg
sar
jp
arpl
pop
aaa
push
aas
and
je
cmps
enter
and
mov
mov
jp
push
add
loopne
les
or
gs
mov
mov
rol
mov
cmps
xchg
sbb
inc
shr
rcl
(bad)
rcl
sub
dec
pop
mov
add
into
and
nop
ss
and
out
dec
pop
jb
cmps
ds
fwait
out
aaa
dec
and
dec
(bad)
test
mov
push
xchg
(bad)
cmp
loopne
or
popa
ror
xchg
es
nop
mov
and
xchg
shl
dec
(bad)
retf
nop
pop
(bad)
push
push
and
dec
(bad)
(bad)
sub
push
shl
cmps
or
cmp
fs
and
mov
rcr
pusha
dec
jle
push
inc
and
adc
pusha
and
jno
sar
pushf
inc
sar
add
dec
retf
scas
dec
test
xchg
cmp
ret
push
mov
lods
push
add
sub
cmp
mov
sub
js
push
dec
popf
fiadd
jne
aaa
mov
and
arpl
pop
ror
or
and
(bad)
outs
fidivr
mov
push
pop
adc
jno
cli
call
push
mov
or
(bad)
mov
inc
or
xchg
mov
xor
push
push
jp
mov
loopne
js
jp
test
and
mov
(bad)
or
or
push
call
out
adc
pop
addr16
cmp
jle
jbe
xor
nop
adc
mov
ror
xchg
mov
call
inc
enter
mov
cmp
and
(bad)
mov
sahf
jmp
xor
rcr
inc
add
inc
inc
pop
mov
push
(bad)
pop
sub
add
es
pushf
sahf
ja
xchg
sbb
xchg
(bad)
and
push
adc
scas
mov
xchg
icebp
push
(bad)
mov
and
clc
mov
es
daa
and
loope
add
lods
and
je
xchg
sub
call
lods
dec
pop
jo
lahf
mov
ret
jp
xchg
mov
dec
pop
push
mov
enter
sahf
mov
test
mov
push
movs
daa
xchg
jbe
mov
jnp
outs
and
dec
xchg
mov
lock
repnz
adc
jmp
mov
sub
push
dec
pusha
and
and
and
cmp
and
add
adc
repnz
pushf
push
cli
sub
js
js
das
rcl
nop
add
pop
daa
add
outs
adc
or
lock
cmp
test
mov
or
inc
xor
dec
test
pusha
stos
dec
adc
enter
push
mov
xchg
sbb
bound
push
mov
out
out
inc
mov
dec
xor
loop
mov
mov
sub
sbb
push
mov
mov
aaa
xchg
adc
fidivr
push
push
push
jb
inc
nop
mov
fdivrp
pop
mov
pusha
adc
jbe
xor
or
mov
xor
sbb
mov
add
jmp
add
dec
mov
jecxz
pop
mov
mov
xchg
ret
ret
adc
inc
pop
bound
into
mov
movs
push
adc
loop
xchg
test
dec
fcom
push
mov
or
mov
and
jle
push
sbb
out
aam
ret
pop
push
and
inc
inc
or
or
cmp
push
es
mov
loope
mov
push
and
jne
pusha
inc
and
jbe
nop
jno
enter
xchg
mov
inc
add
mov
(bad)
shl
mov
jae
inc
mov
dec
and
pop
inc
cmps
jp
add
sbb
push
dec
imul
sbb
inc
or
in
push
mov
push
into
scas
(bad)
xchg
mov
mov
sub
cs
cmp
push
test
xchg
cmp
xlat
ret
cmp
arpl
jno
ins
mov
adc
sti
mov
cli
jle
pop
push
xchg
shr
xor
mov
ss
adc
push
test
sub
test
push
scas
pinsrw
push
dec
add
(bad)
xor
dec
fs
sbb
retf
push
add
or
add
xchg
pop
or
into
and
and
sahf
mov
into
div
xchg
mov
fisubr
jnp
or
out
mov
aad
add
push
add
js
pop
(bad)
mov
or
jle
in
xchg
cli
out
push
adc
dec
pop
data16
dec
pushf
adc
addr16
jp
push
and
push
movs
cmc
jp
(bad)
popa
mov
xor
adc
pop
xor
out
mov
xlat
outs
adc
add
inc
into
retf
icebp
cmp
fsubp
retf
outs
add
(bad)
push
xor
mov
and
cmp
out
xchg
sbb
sbb
ja
(bad)
data16
and
lods
(bad)
test
mov
xor
inc
push
mov
xchg
pop
ror
lods
mov
inc
or
push
mov
lock
xchg
fiadd
out
ds
add
invd
daa
outs
aad
pop
cli
xchg
bnd
add
push
mov
push
dec
test
cwde
lock
dec
sub
pop
sar
sbb
out
cmp
es
sub
icebp
dec
adc
inc
fwait
mov
add
mov
sbb
xchg
or
or
cmp
mov
or
mov
push
into
cmp
scas
add
or
repz
mov
call
cmp
clc
pusha
rol
retf
sahf
data16
gs
xchg
dec
out
mov
add
mov
jg
mov
xor
inc
arpl
push
sbb
inc
jecxz
out
push
rcl
test
push
gs
call
or
(bad)
sub
add
into
out
cli
cmp
cmp
jle
lods
ins
or
loopne
popf
inc
xchg
jbe
bound
(bad)
sbb
loop
jecxz
rcl
xchg
outs
sbb
jle
xchg
mov
popa
mov
and
js
loop
ror
mov
mov
jb
call
daa
nop
cmp
mov
pop
mov
push
jp
or
(bad)
popa
push
add
imul
push
repz
inc
sbb
ds
js
fdivr
xchg
fimul
add
data16
sbb
and
rol
das
mov
loopne
(bad)
ret
fild
dec
stos
(bad)
sbb
ins
mov
ror
pop
push
into
rcl
gs
and
mov
in
pop
data16
dec
imul
sbb
test
inc
add
xchg
mov
and
in
add
inc
or
sub
jo
sub
gs
call
cmps
pop
retf
push
dec
fisttp
sbb
adc
test
(bad)
cli
mov
ficomp
cmp
call
pop
lock
rcl
rcr
mov
adc
popa
test
outs
(bad)
xor
dec
jbe
fimul
data16
ror
push
jle
jb
pop
test
mov
adc
inc
lods
dec
add
out
pusha
add
push
jae
jp
and
dec
retf
(bad)
(bad)
fmul
rcl
cs
shr
scas
pmaxsw
into
push
dec
jge
and
mov
dec
dec
leave
adc
in
pop
es
movs
and
ror
adc
add
or
cwde
or
and
dec
mov
sbb
xor
sahf
sbb
adc
hlt
xchg
ret
adc
pop
ja
retf
(bad)
fcmovnb
inc
fimul
mov
inc
sbb
mov
lea
add
mov
add
lods
adc
retf
gs
mov
bound
adc
push
addr16
jbe
or
adc
pop
outs
mov
iret
data16
add
(bad)
xchg
inc
leave
adc
dec
push
push
xor
push
imul
mov
mov
mov
test
or
ss
inc
jo
call
push
rcr
bound
test
or
ficom
scas
ret
outs
cmp
xchg
push
mov
popf
lods
push
sub
sub
mov
retfw
push
adc
(bad)
test
popa
ret
jle
push
retf
shl
gs
call
push
mov
sub
adc
and
dec
add
cmp
mov
sahf
ds
xor
cmp
out
mov
jle
and
push
outs
stos
sbb
push
(bad)
add
or
xchg
or
and
pop
imul
dec
and
pop
push
and
mov
jmp
add
add
inc
shl
aad
ret
mov
jg
dec
sbb
xor
jle
repnz
cmps
scas
movs
xchg
jbe
jmp
(bad)
mov
xchg
(bad)
scas
lock
inc
orps
cmp
pop
push
jmp
jb
scas
pop
inc
bound
and
and
and
or
mov
call
push
sbb
mov
fsub
xchg
sbb
ror
dec
aam
int3
push
fiadd
push
cwde
xchg
push
xchg
mov
sub
sbb
push
stos
pop
mov
fiadd
cmp
push
cmp
pop
cs
cmp
dec
add
or
dec
ret
ficom
test
mov
add
xchg
xchg
mov
js
ficomp
mov
jmp
or
call
jmp
or
shl
and
faddp
ret
and
stos
push
ss
retf
push
lea
push
sahf
(bad)
push
(bad)
xor
inc
les
fwait
push
sub
push
and
out
daa
adc
and
push
jne
jecxz
mov
sub
sbb
mov
add
sbb
mov
xchg
mov
dec
add
(bad)
(bad)
bound
test
nop
push
out
out
rol
pop
push
push
dec
xchg
inc
cwde
cdq
mov
cli
out
push
jbe
jmp
(bad)
(bad)
(bad)
or
sahf
(bad)
scas
mov
dec
sub
push
inc
enter
push
data16
inc
adc
xchg
jo
or
jp
sbb
ret
dec
out
mov
sbb
push
stos
pop
and
fcomp
jmp
dec
rcl
adc
sub
mov
call
pop
call
pop
(bad)
adc
dec
inc
push
lock
mov
push
popf
sbb
jle
xor
inc
into
pop
ficom
mov
adc
arpl
adc
call
push
mov
in
sti
mov
data16
inc
or
mov
add
pop
mov
add
push
and
nop
pop
sub
jae
mov
lahf
mov
xor
jbe
xlat
daa
jo
jmp
add
scas
ficomp
cmp
sub
sbb
push
das
adc
jle
and
sbb
or
sbb
push
mov
push
test
fidivr
das
or
mov
dec
push
mov
or
into
data16
push
cmp
sbb
xchg
mov
pusha
sub
dec
ds
enter
scas
push
add
cwde
js
mov
fiadd
push
add
or
jmp
push
pop
pop
(bad)
mov
mov
push
push
call
fdivrp
xchg
pop
fiadd
jbe
rol
mov
imul
xor
mov
adc
push
shl
adc
enter
jo
push
push
jp
icebp
push
(bad)
adc
ror
mov
jle
add
cmp
adc
fidiv
mov
sbb
jmp
jmp
ss
data16
dec
pop
sbb
mov
inc
push
ja
lea
out
leave
inc
loope
loop
or
fidivr
(bad)
adc
mov
cli
pop
and
or
sub
lock
sub
mov
push
ret
jmp
nop
xchg
fs
fwait
xlat
mov
mov
sub
ror
and
add
xor
jle
or
ret
dec
gs
push
add
adc
mov
je
jle
arpl
and
and
mov
sahf
test
(bad)
test
enter
js
add
push
daa
sbb
sahf
or
fwait
add
fdivr
sahf
dec
outs
fidiv
lods
lea
cmp
test
(bad)
ret
mov
pop
(bad)
nop
aas
push
or
push
mov
push
out
sub
push
mov
mov
mov
(bad)
jp
pop
loope
cmp
and
push
retf
fs
enter
inc
xchg
retf
cmps
test
push
mov
pop
daa
pop
movs
mov
jbe
jo
inc
or
sbb
sysret
loop
jecxz
(bad)
jmp
sbb
js
fimul
xchg
sbb
jbe
rol
(bad)
scas
cmps
pop
shl
fs
mov
fs
jo
push
push
mov
ret
jns
pop
mov
jno
inc
sub
dec
cmp
shl
cli
xor
aaa
pop
push
test
add
loop
bound
and
xchg
inc
(bad)
pop
jecxz
xor
dec
rol
xchg
push
loop
sahf
dec
lods
add
lods
into
pop
inc
das
or
into
pop
inc
clc
sbb
inc
daa
ins
js
sub
mov
outs
inc
call
imul
xor
scas
push
push
mov
icebp
and
aas
add
jle
shr
ffree
mov
lds
mov
dec
and
sbb
inc
add
in
sar
setb
call
adc
inc
js
or
es
call
ss
sbb
dec
jne
mov
push
or
inc
adc
jbe
das
call
das
push
add
rcl
data16
jb
pop
cmp
or
fisub
xor
fiadd
cmp
inc
sub
xlat
jg
push
xchg
mov
(bad)
adc
xchg
mov
sbb
push
push
pusha
fs
dec
dec
mov
das
movs
pop
dec
dec
jle
call
sar
pop
aam
pop
or
or
imul
xor
fidivr
rol
clc
fcmovnbe
xor
dec
jnp
push
xchg
push
mov
pop
mov
call
and
add
mov
or
inc
add
jg
es
mov
scas
outs
add
pop
inc
jb
xchg
cdq
nop
(bad)
cmovp
or
es
sbb
cmp
scas
(bad)
cmps
push
arpl
sub
push
inc
pop
sbb
es
aaa
xor
fisub
scas
popa
pusha
adc
mov
add
sub
loop
dec
inc
mov
mov
push
retf
test
loopne
popa
push
(bad)
add
fiadd
pop
out
inc
(bad)
xor
adc
add
retf
fwait
arpl
outs
shr
cmp
push
les
push
sub
sbb
mov
sbb
(bad)
xchg
mov
or
lahf
xchg
mov
or
into
add
mov
add
xchg
(bad)
(bad)
mov
(bad)
push
sahf
sbb
loopne
xchg
lods
imul
out
xor
mov
mov
cmp
sub
adc
or
sahf
sbb
imul
add
js
push
pop
or
and
retf
sub
and
push
mov
inc
popa
ret
es
and
enter
call
push
imul
retf
or
mov
mov
xchg
daa
and
mov
stos
retf
sub
cmp
lock
pusha
mov
rcr
test
xor
mov
outs
jbe
xchg
popa
xor
adc
adc
push
dec
sbb
imul
push
add
outs
xchg
push
out
mov
xor
xchg
dec
adc
adc
mov
out
inc
(bad)
mov
pop
outs
pop
fst
adc
imul
pop
pop
shl
mov
rcr
dec
mov
jp
(bad)
bnd
jo
(bad)
inc
push
xor
sub
xchg
shl
or
and
lods
or
(bad)
or
or
stos
pushf
xchg
pop
cmp
sbb
lods
pusha
rcr
or
or
or
ds
into
xchg
mov
not
arpl
mov
or
ds
dec
and
mov
pop
sbb
mov
cmp
inc
not
out
push
nop
sbb
dec
out
ret
and
xchg
mov
test
(bad)
xlat
cmp
into
retf
ret
inc
add
(bad)
mov
sti
fisubr
xchg
dec
jg
mov
in
add
push
sbb
fidiv
xor
jbe
cs
sub
daa
dec
hlt
test
cs
inc
dec
xor
mov
cmp
cmp
cmp
mov
sbb
dec
push
xor
add
repnz
out
sbb
sub
or
xchg
fwait
test
mov
mov
sub
sub
and
imul
xchg
inc
and
mov
mov
jno
add
cmps
jbe
adc
pop
loopne
sbb
adc
push
das
jle
or
dec
add
mov
es
sbb
xchg
cs
inc
add
jno
or
shr
xchg
push
push
fist
mov
rcl
push
and
or
shr
sahf
mov
sub
rol
jmp
or
ret
retf
mov
lods
movs
sbb
stos
xchg
dec
mov
pusha
out
movs
xchg
or
jle
or
push
pop
pop
xadd
or
sub
add
xor
test
nop
mov
cmp
sbb
mov
add
and
add
pop
jo
ss
add
jbe
out
dec
js
xchg
push
xor
mov
into
mov
sbb
cmps
and
push
cli
rcr
inc
inc
push
ins
cmc
mov
pop
rcl
and
lods
into
sub
xor
rol
xchg
xchg
sbb
xor
mov
(bad)
mov
div
mov
mov
enter
retf
sbb
in
inc
mov
(bad)
retf
pop
and
xchg
rcl
cli
outs
imul
mov
daa
addr16
fwait
inc
add
rcl
sbb
mov
in
sbb
push
jb
and
or
dec
cs
scas
shl
push
out
loop
cmp
or
cs
cmp
clc
xchg
pop
pusha
dec
add
adc
in
retf
test
loopne
dec
sbb
sub
or
into
jle
pop
pop
add
push
adc
jmp
cs
push
mov
jno
cwde
push
push
add
cmps
stos
pop
push
xor
cs
add
push
dec
loope
into
xchg
ins
inc
add
cmp
out
add
bound
fcmovu
aad
xchg
adc
sbb
jne
hlt
repnz
iret
mov
push
daa
push
push
mov
js
add
push
jb
inc
pop
inc
push
cmp
mov
ret
out
scas
add
sub
add
xor
lock
fiadd
scas
repnz
push
outs
sbb
imul
or
sub
shr
sub
mov
addr16
sub
test
cmp
cmc
push
cmp
rcr
dec
mov
or
cmp
jbe
loop
cmovo
js
sub
lock
sbb
fisub
xor
or
and
pop
out
mov
rol
push
jp
jp
ror
loopne
cmps
aam
push
test
test
mov
add
jmp
loop
fwait
push
mov
mov
jno
(bad)
loop
data16
mov
xchg
push
push
pop
xchg
or
(bad)
or
aas
inc
cmp
mov
inc
sub
js
jb
jg
into
xchg
xor
mov
and
out
mov
leave
sbb
add
add
(bad)
aaa
cmps
ss
add
xchg
push
(bad)
aam
mov
dec
mov
add
push
mov
sub
push
fsubr
arpl
dec
mov
dec
dec
inc
dec
inc
neg
adc
xor
or
add
and
jbe
and
push
pop
call
dec
test
xchg
enter
xor
adc
cmp
or
enter
add
fs
cmp
mov
sbb
adc
inc
mov
adc
xor
mov
shl
out
into
add
add
xchg
stos
add
xchg
out
mov
mov
out
adc
adc
pop
xchg
jae
mov
push
sub
push
push
add
cmp
cli
bound
xchg
sub
mov
(bad)
xchg
pop
rcl
dec
(bad)
fisub
xor
ret
inc
ret
imul
push
push
popa
outs
xchg
add
cmp
int3
popa
sub
ss
or
jmp
(bad)
jp
pushf
sub
arpl
mov
ss
fs
jmp
daa
or
adc
sbb
ss
fidivr
inc
mov
je
jp
mov
push
es
or
ror
jns
jp
inc
loope
push
and
inc
or
add
and
sbb
cmp
cli
repnz
and
addr16
loopne
xchg
stos
add
ins
gs
inc
pop
jmp
sahf
imul
push
mov
push
xchg
inc
retfw
add
mov
mov
mov
ss
callw
ds
xchg
or
mov
rol
jmp
js
mov
or
fs
mov
scas
adc
rcl
mov
aam
scas
mov
or
iret
and
inc
imul
jo
out
loopne
inc
cmc
cmp
push
jecxz
cmp
or
xchg
call
mov
push
mov
ja
adc
push
adc
add
(bad)
xor
mov
iret
inc
dec
lods
push
test
adc
dec
bswap
into
ret
sahf
cli
adc
movs
pop
ss
adc
mov
add
push
inc
repnz
sbb
add
add
sbb
sub
add
mov
sbb
pop
mov
xor
add
fidiv
inc
xchg
jo
add
pop
(bad)
adc
jmp
ret
jbe
adc
arpl
and
xchg
fidivr
jbe
loopne
jmp
mov
push
data16
dec
inc
mov
dec
add
push
call
scas
mov
push
sub
(bad)
repnz
pop
dec
xchg
ret
mov
repnz
push
loopne
fiadd
arpl
xor
popf
pop
add
fidiv
fisub
retf
mov
xchg
push
mov
scas
xchg
sbb
and
rcr
push
loop
adc
and
les
jle
(bad)
xchg
cmp
out
pop
popf
je
add
xchg
inc
mov
pop
data16
mov
pop
retf
add
adc
sbb
inc
dec
push
dec
mov
mov
push
xchg
xor
xchg
add
mov
sub
mov
or
inc
ldmxcsr
pop
xchg
xor
bound
clc
mov
push
xchg
sbb
and
sub
jle
(bad)
pop
cmp
cmps
add
fcmovbe
push
adc
in
sbb
sbb
idiv
mov
fmulp
push
adc
xchg
mov
aam
adc
and
or
mov
sbb
add
adc
ret
dec
xor
pop
(bad)
dec
jp
or
inc
inc
mov
stos
mov
mov
and
sub
(bad)
inc
sbb
scas
cmp
rcr
adc
fadd
ficomp
punpckhwd
and
add
push
push
or
inc
inc
scas
xchg
jmp
push
add
cmp
cmps
mov
and
ret
pop
adc
or
inc
scas
adc
inc
fidiv
adc
pop
adc
outs
pop
dec
les
pop
pusha
push
adc
daa
dec
adc
into
scas
jmp
mov
sahf
pop
mov
add
cmp
and
cmp
bound
(bad)
pop
jle
cmp
adc
mov
pop
shr
out
cmp
mov
push
push
cmp
icebp
push
mul
imul
mov
test
cmps
inc
sbb
(bad)
jle
or
jp
mov
cpuid
or
add
xacquire
call
or
inc
(bad)
jb
sub
dec
shl
cmp
add
ret
dec
push
scas
gs
xchg
xchg
mov
xchg
push
pop
js
enter
inc
add
jle
or
shl
push
imul
or
shl
dec
cmp
das
pop
adc
aam
push
mov
inc
inc
push
mov
mov
push
pop
call
inc
jmp
sahf
loop
mov
add
and
add
cli
mov
pop
mov
mov
mov
mov
jo
mov
adc
and
cmp
mov
mov
xor
add
out
stos
pop
push
xchg
dec
dec
loop
dec
and
mov
mov
pop
popf
dec
cmp
xor
(bad)
aam
push
lahf
push
adc
sbb
imul
cmp
mov
out
push
scas
sbb
loop
pop
sahf
push
pop
inc
inc
inc
es
mov
outs
xchg
fistp
add
inc
fisub
pop
arpl
xchg
mov
add
popa
push
mov
outs
or
fimul
fiadd
inc
sbb
xchg
sbb
daa
mov
retf
pop
pop
scas
gs
xchg
mov
push
mov
retf
and
push
add
push
aam
mov
add
push
pop
out
and
cmp
jp
mov
push
sbb
mul
(bad)
out
add
jp
jecxz
sub
mov
dec
push
arpl
call
aas
js
and
retf
push
(bad)
js
(bad)
push
mov
in
xchg
rcr
jb
or
xchg
push
add
mov
leave
popa
sub
rol
js
sahf
sbb
dec
call
pop
add
ficom
add
xor
adc
jo
or
cmovs
pop
mov
mov
cmc
sub
cmp
sub
mov
(bad)
or
inc
inc
mov
int3
and
aas
push
or
pusha
xor
or
cli
call
push
mov
jno
and
rol
and
and
or
xchg
mov
arpl
pop
into
cs
popa
inc
lods
push
push
mov
adc
ret
mov
ss
sbb
jecxz
xchg
push
push
(bad)
push
jo
push
test
leave
lock
repz
rcl
or
ret
(bad)
or
mov
or
push
cmp
mov
or
xor
xchg
inc
mov
mov
cmps
and
mov
jo
adc
(bad)
(bad)
rcl
jmp
sbb
in
rcr
inc
add
xor
pop
out
loop
add
call
adc
push
mov
dec
xor
push
ds
dec
xor
retf
lock
dec
pop
push
pop
jb
aam
pusha
(bad)
jbe
mov
ret
jb
xchg
fld
es
add
outs
es
add
pop
pop
retf
add
push
adc
inc
cs
jp
fs
push
mov
mov
xor
mov
pop
mov
xchg
xor
adc
xchg
xor
(bad)
outs
popa
mov
inc
mov
cs
mov
rol
inc
dec
pop
mov
add
out
mov
pop
mov
bound
mov
mov
das
sbb
sbb
add
bnd
stos
inc
(bad)
mov
jo
cli
out
add
(bad)
mov
or
push
dec
cs
mov
mov
or
(bad)
sub
or
and
cmp
inc
arpl
sbb
loopne
or
ficom
fisub
js
xchg
jle
add
sahf
xchg
push
mov
jno
in
sahf
stos
scas
mov
pop
mov
sbb
mov
sbb
xchg
mov
icebp
sbb
sub
fiadd
out
(bad)
sbb
out
xor
fadd
jle
xchg
rcl
retf
mov
cmovg
ficomp
inc
sbb
loopne
adc
pop
add
mov
mov
sbb
add
xchg
mov
add
(bad)
dec
(bad)
cmps
repz
inc
cli
out
(bad)
mov
pop
or
daa
das
fwait
adc
mov
dec
data16
fwait
adc
out
cmp
fs
xchg
inc
sub
scas
mov
mov
movs
dec
push
ret
movs
stos
dec
pop
rcr
ds
push
(bad)
(bad)
ret
setb
mov
loop
adc
push
out
xchg
cmps
arpl
or
cmp
pusha
push
outs
xchg
ins
cdq
pop
jae
push
pop
cmp
dec
xchg
retf
add
sub
sar
dec
mov
or
pop
inc
sub
dec
das
test
rol
jp
lods
aaa
je
inc
cmp
push
fidiv
scas
sbb
push
jmp
sub
add
retf
rcr
xchg
cmp
push
jno
jmp
mov
mov
inc
mov
push
mov
push
xchg
push
push
loop
sub
pushf
push
mov
into
call
mov
or
jo
jecxz
es
js
mov
pusha
xor
cmps
xchg
popf
xchg
dec
sti
mov
retf
js
rcr
sahf
inc
scas
dec
or
inc
cmp
shr
add
pop
mov
ret
xchg
(bad)
jle
push
popa
psrld
dec
jbe
sbb
rol
mov
mov
fst
jbe
imul
mov
retf
jb
or
jle
inc
mul
sbb
add
out
es
or
imul
bound
dec
mov
test
adc
jmp
mov
jmp
loop
jle
cdq
lock
mov
add
ins
mov
or
cpuid
add
idiv
js
adc
xchg
addr16
test
push
pusha
and
sbb
jbe
dec
adc
stos
adc
sbb
loopne
xchg
xlat
add
cmovle
xor
das
add
sbb
push
rol
(bad)
xchg
jo
adc
repnz
enter
outs
add
mov
jnp
or
cmp
rcr
test
mov
repnz
xor
xor
xor
aaa
stos
push
ror
jle
xchg
loope
aas
or
sbb
sahf
inc
bound
pop
out
repnz
mov
fmul
cdq
cmp
mov
add
mov
or
sub
fdiv
unpckhps
mov
mov
sahf
mov
out
nop
lods
in
bound
sub
add
xchg
and
js
add
scas
pop
and
or
(bad)
mov
es
and
push
repz
lock
push
stos
inc
pushf
mov
xor
mov
push
inc
(bad)
pop
pop
das
jl
and
dec
mov
and
rcr
mov
pop
lods
or
xor
mov
jne
sbb
(bad)
add
fadd
inc
sbb
das
add
or
(bad)
or
push
sahf
movs
push
push
call
sub
pop
sub
popa
in
mov
add
or
or
retf
(bad)
cmp
and
add
add
push
jnp
xor
or
mov
add
sbb
call
xchg
daa
and
out
loopne
adc
rcr
add
push
xchg
popf
xchg
into
scas
jb
sub
xchg
xor
call
sbb
ss
cmp
pushf
test
retf
and
xor
pop
sysexit
sahf
xlat
xchg
sbb
sbb
mov
js
pop
cs
(bad)
mov
fidivr
popa
(bad)
dec
sbb
and
retf
sbb
jbe
movs
and
sbb
mov
pop
jp
pop
bound
iret
es
xchg
inc
ss
mov
(bad)
call
or
push
xchg
inc
cmp
retf
jp
or
mov
add
mov
dec
adc
push
pop
pop
xchg
mov
xchg
jle
cmp
sbb
mov
je
jle
adc
inc
ds
mov
push
pop
push
xchg
mov
call
cmp
mov
leave
xor
mov
push
rcr
dec
retf
fldl2t
cmps
sahf
ds
jbe
hlt
pop
out
out
mov
adc
inc
ror
cwde
pop
sahf
les
push
and
fisubr
pop
addr16
pop
daa
mov
sbb
xor
cs
add
push
pop
adc
add
jb
sbb
(bad)
sbb
inc
outs
clc
sbb
fild
and
ds
cmp
or
add
mov
ret
sbb
es
(bad)
loopne
adc
push
or
add
jmp
scas
fisub
mov
lock
xor
out
sar
mov
jb
add
pop
and
xchg
dec
scas
add
cmp
shl
jmp
adc
loop
cwde
sbb
mov
inc
and
outs
pop
ins
cmp
and
mov
into
retf
sub
sets
test
xchg
sbb
sahf
xchg
pop
cwde
xchg
(bad)
push
outs
es
js
inc
cmp
sub
bound
mov
mov
add
pop
pop
pop
test
ds
shl
add
mov
or
pop
bound
xor
(bad)
loope
mov
pusha
sbb
bound
pop
xchg
push
push
pop
cmp
cwde
bound
pop
xchg
call
out
cmp
add
retf
xor
inc
bound
dec
neg
push
les
jbe
adc
data16
cdq
sbb
push
shl
inc
popa
push
fimul
xor
mov
retf
cwde
lahf
bound
adc
addr16
inc
mov
push
scas
adc
xchg
add
pop
loop
mov
sub
xor
pop
outs
cmp
mov
fwait
out
ficom
call
into
(bad)
dec
cmp
xchg
or
mov
rol
xchg
loop
or
(bad)
loopne
(bad)
mov
adc
fcom
push
adc
mov
sub
das
mov
es
scas
out
push
push
cmp
mov
sub
(bad)
in
jmp
xchg
mov
lods
dec
inc
sahf
aas
(bad)
das
push
push
aam
xchg
cmp
add
mov
xchg
(bad)
jmp
sub
into
xchg
dec
add
fbld
dec
(bad)
loop
mov
mov
mov
outs
mov
rol
(bad)
mov
outs
and
jle
jbe
add
push
xchg
jno
fcmovu
or
das
dec
loop
repnz
adc
xor
jle
pop
add
xor
add
div
sub
xor
daa
retf
cmp
ss
mov
lods
test
sbb
adc
or
ficom
popf
sub
ret
arpl
and
bound
dec
out
or
repnz
test
pop
fisttp
dec
add
arpl
ficomp
cli
cwde
push
add
lahf
lods
pop
movs
sar
mov
xor
rcl
scas
push
rcl
pop
push
mov
shl
jecxz
je
popa
in
mov
ret
add
ret
js
bound
(bad)
out
sub
ficom
dec
xor
(bad)
mov
adc
es
add
mov
sbb
push
push
mov
test
sbb
mov
cmp
add
push
das
dec
ret
and
bound
test
sahf
xchg
jmp
push
jb
or
lods
add
or
sbb
sbb
inc
or
sbb
mov
xchg
imul
inc
and
push
mov
sub
daa
jecxz
outs
dec
or
sub
sub
or
scas
inc
inc
adc
ss
mov
push
jp
add
dec
clc
loop
and
retf
mov
rol
cmp
pushf
mov
push
(bad)
mov
mov
cmovns
pop
bound
pop
jp
sbb
call
dec
push
dec
lock
retf
sahf
or
push
adc
pop
dec
cmp
add
inc
pop
pop
jb
inc
xchg
enter
mov
mov
fwait
push
jp
push
push
fwait
mov
xlat
sub
mov
push
int3
push
push
repnz
ret
and
les
xchg
mov
push
call
adc
(bad)
mov
call
inc
les
push
mov
icebp
xchg
lock
bound
mov
sub
dec
scas
(bad)
inc
je
jbe
xor
add
sbb
sub
into
dec
jae
outs
(bad)
mov
je
mov
push
(bad)
cs
inc
popa
and
or
shl
xchg
mov
outs
or
xor
cmps
xchg
adc
ins
mov
inc
jb
add
pop
shr
mov
rol
or
pop
push
repnz
dec
mov
out
jmp
pop
ficom
sbb
and
or
aam
mov
fs
daa
xchg
inc
inc
js
add
jb
es
push
or
cmps
arpl
add
pop
out
mov
out
push
ds
jmp
addr16
inc
xor
and
cmp
or
push
jb
ss
or
sub
pop
sahf
mov
dec
fistp
jb
fmul
mov
push
xchg
lock
shl
sahf
and
mov
sbb
test
mov
mov
into
dec
mov
les
inc
mov
test
popa
xchg
mov
dec
loopne
scas
dec
and
push
adc
add
cs
out
adc
xchg
neg
cmp
(bad)
leave
mov
mov
inc
mov
scas
mov
sub
jecxz
push
xchg
cs
mov
imul
add
fiadd
daa
cmp
fwait
arpl
xchg
inc
das
add
shl
fst
push
shl
pop
or
loop
into
retf
or
sub
imul
mov
sub
mov
dec
mov
adc
add
add
or
adc
mov
mov
or
xchg
js
pop
and
fsub
out
(bad)
jb
add
mov
cmp
dec
inc
xlat
rcl
(bad)
push
add
pop
inc
xchg
(bad)
repnz
jp
fisubr
ret
sahf
sbb
daa
push
iret
cwde
add
push
pop
push
sub
retf
movs
add
fmul
inc
(bad)
mov
jbe
jbe
and
repnz
outs
retf
push
push
ret
mov
xor
cmc
dec
xor
xor
scas
es
ins
jmp
sbb
xor
push
movs
es
movs
daa
mov
fs
mov
dec
popa
bound
pusha
adc
push
imul
push
outs
and
scas
mov
or
es
mov
or
push
ficom
cli
adc
imul
js
jnp
or
out
call
ret
sub
cli
sahf
xor
xchg
jo
adc
adc
call
mov
imul
lock
or
and
adc
xor
data16
dec
dec
add
addr16
push
aam
data16
push
add
or
mov
pop
sbb
push
ds
ret
xchg
xor
sbb
mov
stos
adc
repnz
xchg
pop
out
jo
sar
push
and
daa
jecxz
paddd
addr16
jp
rol
(bad)
ficom
adc
call
add
daa
dec
(bad)
call
jmp
mov
or
mov
scas
inc
and
or
add
mov
cs
sub
js
inc
or
mov
jmp
inc
popa
(bad)
jbe
or
add
mov
xchg
fisub
sub
lds
cmp
jmp
mov
out
idiv
rol
imul
lods
or
dec
push
fild
sub
imul
sbb
lods
dec
out
xchg
pop
jo
pop
imul
cmp
jle
push
adc
sub
ds
fstp
pop
push
or
xor
mov
outs
sub
sub
or
jmp
sbb
cmp
xchg
lea
repnz
out
rol
cmps
lods
inc
and
sbb
add
ds
outs
mov
dec
ror
sub
outs
sbb
xor
jb
push
outs
xchg
adc
xchg
(bad)
mov
fisub
test
mov
add
pop
sbb
shr
in
and
xchg
or
cli
push
pop
pusha
add
mov
or
add
mov
or
out
loop
cmps
(bad)
leave
stos
cmp
call
mov
adc
xor
stos
sbb
pushf
adc
shr
push
(bad)
push
ror
add
into
js
xchg
(bad)
xor
cli
mov
mov
js
imul
pop
repz
cli
bound
cmps
in
add
push
idiv
push
fs
aad
mov
push
push
nop
popa
lock
mov
sbb
das
(bad)
call
fstp
pop
mov
push
cmp
rcl
sbb
data16
jo
dec
xlat
loopne
cmp
pushw
push
mov
pop
cmps
es
inc
add
sbb
test
cmp
lods
mov
cmp
(bad)
jmp
sbb
mov
rcl
outs
sbb
cmps
xchg
pop
xchg
int3
push
or
adc
mov
push
adc
pop
push
adc
aam
sub
and
xor
dec
sub
add
cli
cli
data16
inc
clc
(bad)
mov
dec
ret
scas
pop
sbb
pop
sbb
out
add
sub
imul
imul
dec
popa
dec
rcr
add
xchg
rol
bound
dec
jo
sbb
pop
xchg
pop
ror
mov
rol
push
ds
jp
aam
(bad)
xor
ret
mov
fiadd
leave
mov
(bad)
fiadd
push
push
add
test
dec
lahf
dec
arpl
ins
imul
mov
retf
rcr
les
mov
sbb
pop
cs
cmp
out
scas
jb
sub
(bad)
push
(bad)
sbb
push
es
inc
sub
cmps
ret
pushf
sbb
fiadd
push
cmp
pop
outs
push
ret
sub
ss
test
push
into
or
sub
out
pusha
or
out
dec
and
pop
mov
mov
cmp
addr16
outs
idiv
test
add
mov
add
adc
mov
mov
dec
jb
add
adc
xchg
push
data16
inc
cmp
xor
mov
and
and
mov
xor
cwde
mov
mov
pop
xor
call
mov
push
(bad)
push
data16
or
test
leave
or
addr16
sub
pop
fcomp
push
mov
mov
cmp
mov
arpl
add
adc
dec
sub
nop
lods
cmps
mov
bound
data16
pop
sbb
iret
mov
gs
jmp
pop
add
mov
and
add
xchg
out
test
jnp
outs
jbe
retf
dec
fimul
xor
inc
pop
fist
xor
dec
mov
xor
dec
and
adc
(bad)
sahf
mov
rol
fidiv
fstp
test
jo
fidiv
pop
into
push
mov
scas
mov
or
stos
rol
sbb
mov
(bad)
(bad)
inc
loop
ret
push
cs
mov
ret
sbb
imul
sbb
xor
inc
dec
sub
adc
outs
retf
push
loop
out
inc
cmp
pop
xor
cmp
fisttp
popf
sbb
ret
dec
test
out
xor
fimul
fidiv
mov
idiv
dec
pop
es
stos
scas
jp
add
pop
iret
mov
mov
fisub
adc
stos
clc
aas
push
or
add
mov
push
mov
jo
call
pop
(bad)
mov
mov
or
xor
add
dec
mov
lods
push
jbe
jo
call
sbb
repnz
call
xor
and
jbe
jbe
add
cs
imul
jle
sub
retf
mov
sar
ror
shl
jmp
sbb
or
jno
jne
bound
mov
sub
pusha
inc
test
inc
push
pop
xchg
or
(bad)
clc
mov
xchg
pop
mov
mov
xchg
(bad)
dec
or
sub
outs
(bad)
jbe
adc
push
shl
push
push
xchg
popa
push
stos
movs
out
movs
xchg
ror
mov
inc
(bad)
js
dec
cs
(bad)
jp
adc
out
repnz
cmp
push
sbb
div
popa
sub
out
or
push
jbe
push
pop
jns
test
pop
add
cmc
sub
(bad)
cmp
(bad)
ret
xchg
pop
cmp
or
xor
ds
sub
dec
repz
ret
pop
mov
shl
jg
loopne
cmp
or
lods
adc
jg
push
jbe
mov
outs
push
pop
push
pushf
add
icebp
mov
aam
sub
inc
(bad)
inc
cmp
mov
and
fisubr
jo
cwde
cli
outs
stos
xor
leave
inc
or
jp
push
(bad)
pop
dec
adc
cs
adc
mov
sub
(bad)
push
repnz
inc
and
(bad)
sbb
loope
loop
jno
ret
pusha
sub
scas
cs
push
mov
adc
lock
cli
xor
inc
xchg
mov
cmp
push
push
jmp
push
dec
shr
imul
out
dec
dec
gs
jae
push
and
cs
mov
cmp
dec
scas
mov
aad
mov
xchg
mov
test
xor
cmp
and
loop
xor
jle
dec
push
push
sub
add
or
jo
sub
xor
sahf
retf
call
ret
daa
faddp
jp
loopne
data16
mov
shr
fwait
adc
retf
mov
add
inc
lea
xor
(bad)
imul
inc
ret
jmp
push
jb
inc
push
add
mov
mov
daa
arpl
xchg
test
rol
jp
cmp
sbb
pop
aas
adc
das
fnsave
rol
jle
pop
sbb
ret
mov
leave
sub
add
jbe
dec
adc
(bad)
retf
(bad)
dec
mov
mov
rol
xchg
push
mov
into
pop
popf
je
push
repnz
or
push
imul
shufps
push
cmp
sbb
cmp
sbb
cmp
mov
xchg
dec
push
addr16
push
retf
out
das
add
pop
jp
pop
mov
xchg
test
mov
mov
sbb
out
dec
retf
sub
and
into
fidivr
cmp
dec
scas
out
pop
mov
out
push
sbb
mov
dec
leave
adc
call
fwait
test
mov
(bad)
fimul
jnp
es
jbe
scas
pop
push
mov
shl
mov
inc
or
dec
inc
sahf
jmp
or
inc
inc
push
adc
cdq
sub
es
into
out
jle
adc
retf
retf
mov
mov
bnd
xchg
xor
and
mov
cwde
push
sub
outs
push
js
test
mov
iret
sub
xor
jb
xor
mov
push
rcl
loop
loop
(bad)
sbb
loop
dec
cmp
mov
or
mov
xchg
or
push
out
ret
sbb
xor
loopne
daa
bound
mov
test
add
cli
retf
cmp
sub
mov
cmovno
ror
aaa
push
pop
call
retf
dec
daa
sbb
sub
or
mov
jecxz
outs
scas
xor
mov
mov
sub
mov
test
inc
pop
cmp
push
sub
ds
xchg
jmp
mov
fwait
xor
adc
call
dec
inc
add
inc
mov
mov
cmps
or
loop
push
outs
push
cmps
add
pop
cwde
dec
movs
and
repnz
or
mov
mov
add
into
cmp
mov
xchg
fdiv
fsub
push
fiadd
(bad)
xor
cmps
add
push
mov
loopne
add
retf
les
mov
mov
cmp
shl
aad
mov
dec
lock
pop
stos
push
mov
or
mov
(bad)
js
loop
sub
or
jmp
push
aaa
cmp
dec
jmp
lea
cmps
push
cmp
rcl
rol
mov
and
call
retf
dec
pop
sbb
inc
inc
jmp
push
out
jmp
(bad)
and
mov
mov
js
or
mov
rol
call
retf
jbe
cli
retf
adc
shr
xchg
scas
rol
push
and
shl
push
push
push
repnz
pop
lea
test
in
add
sub
xchg
push
scas
cs
xor
retf
xor
sub
sahf
ret
xor
or
xchg
dec
sar
or
xchg
xor
loope
bound
loope
jp
daa
inc
outs
fidivr
ret
adc
int3
pop
dec
jp
mov
sbb
mov
pop
sub
hlt
cmp
push
call
cmps
sbb
into
pop
pop
add
or
sahf
(bad)
stos
push
js
(bad)
pop
es
push
pop
je
stos
or
cmp
adc
push
clc
out
mov
dec
cmp
mov
jb
pop
adc
cmps
and
dec
pusha
pusha
sahf
mov
cmp
mov
xchg
fisubr
mov
les
dec
inc
bound
mov
push
or
sbb
imul
adc
ds
pop
mov
sbb
and
adc
cmp
or
neg
or
pop
sahf
push
xchg
or
or
xor
xchg
adc
bound
add
leave
adc
sbb
lods
daa
mov
adc
dec
inc
test
inc
(bad)
inc
cwde
dec
mov
loopne
add
jnp
fs
loopne
dec
shl
adc
sub
test
inc
jle
mov
inc
jb
inc
cmps
fisubr
loop
adc
xchg
pop
or
sub
mov
push
nop
popa
or
es
cs
xor
add
sbb
xchg
retf
and
dec
jp
or
rcl
mov
stos
xchg
sbb
fsubr
scas
cs
sbb
xchg
fbld
pusha
pop
mov
sub
inc
inc
sahf
outs
test
pop
js
stos
cmps
sbb
pop
rol
shl
lods
inc
jns
aas
fimul
cmp
rol
arpl
cs
sub
mov
cmp
cmps
and
loope
adc
dec
push
xor
loopne
fisubr
sbb
bound
dec
ret
cmp
ror
aas
into
push
sbb
repnz
push
out
mov
inc
xlat
sbb
or
daa
je
adc
push
or
js
dec
mov
xor
mov
sbb
mov
inc
out
cmps
mov
add
push
dec
or
gs
and
loop
imul
fild
push
pop
jle
push
call
xor
mov
push
mov
inc
pop
add
cmp
fdiv
lds
add
shl
fimul
jo
in
jae
loope
sbb
push
adc
js
mov
add
dec
mov
(bad)
pop
adc
cli
xchg
outs
and
js
(bad)
retf
fnstcw
out
xchg
arpl
sbb
in
or
mov
push
lahf
mov
js
and
xchg
mov
push
dec
out
shr
add
push
push
jmp
xchg
pop
pop
dec
outs
mov
mov
add
rcl
add
fidiv
mov
add
jb
stos
popa
add
and
out
adc
cs
mov
xchg
xor
push
lock
popf
movs
xchg
xchg
mov
leave
and
push
adc
add
jo
mov
ret
pusha
add
pop
bound
out
jbe
xchg
fisubr
scas
or
mov
xchg
dec
add
enter
daa
mov
mov
sbb
pop
or
imul
cs
cvtps2pd
arpl
inc
test
mov
fidiv
cmp
or
and
dec
stos
mov
cli
inc
sbb
xchg
ret
add
jp
or
jmp
fdiv
push
es
lds
out
pop
loop
and
inc
rcr
sub
push
adc
aam
adc
es
push
mov
add
xchg
xrelease
and
ss
xchg
jno
ret
add
outs
or
and
ss
and
xchg
xor
dec
enter
mov
ds
(bad)
sub
lea
out
das
rol
rcl
mov
mov
inc
dec
push
cmps
fdivp
dec
dec
adc
cmps
adc
loopne
push
dec
cli
sbb
jb
mov
mov
mov
(bad)
retf
pslld
rol
je
outs
ror
or
add
cmp
js
mov
stos
mov
or
push
push
pop
popf
lea
cmp
push
push
ss
jmp
loopne
into
or
pop
mov
jmp
xor
sahf
push
xchg
cmp
push
stos
(bad)
(bad)
cmp
rol
and
pop
mov
cmp
(bad)
adc
push
scas
adc
les
adc
jecxz
jns
pop
add
xor
ds
push
daa
mov
dec
shl
sar
rcr
cmp
mov
mov
mov
test
cmps
and
loope
jp
sahf
push
mov
cs
push
(bad)
rol
rcl
sbb
push
or
popa
out
out
xchg
shl
mov
push
push
push
xor
cmp
or
punpcklbw
(bad)
ss
inc
push
retf
sbb
cli
push
add
sub
inc
pusha
test
iret
add
jle
mov
or
sub
sbb
sub
xchg
pop
adc
cmp
push
packsswb
es
add
rol
push
xchg
add
rol
pop
jne
aaa
sub
push
adc
pusha
sub
sbb
shl
push
into
dec
pop
rcl
stos
inc
shr
adc
dec
retf
shl
dec
sti
es
sub
lock
leave
les
mov
outs
pop
popa
sub
outs
pop
popf
sbb
outs
mov
sar
mov
sbb
retf
(bad)
push
xor
scas
ret
sbb
xor
adc
sbb
and
xor
stos
(bad)
rol
ss
jmp
test
mov
dec
and
mulps
inc
mov
fidiv
inc
sub
add
dec
(bad)
stos
lods
or
fisubr
pop
loopne
ret
mov
jle
inc
xor
out
outs
adc
pop
push
scas
mov
inc
mov
outs
inc
and
push
aas
inc
mov
mov
ds
movs
xchg
jo
adc
dec
repnz
or
cmc
ss
outs
loopne
sub
inc
shr
sbb
mov
scas
enter
sub
pushf
pop
push
jp
cmp
aad
sbb
repnz
push
dec
scas
(bad)
es
sbb
or
jbe
xlat
or
xor
push
rcl
mov
add
jp
or
loop
js
adc
lahf
and
and
xor
mul
gs
add
pop
jmp
mov
dec
pop
loope
loope
es
(bad)
ror
add
movs
shl
jbe
ins
dec
sub
sahf
rol
jo
lea
pop
dec
rcr
mov
repnz
dec
xor
xchg
push
jp
jbe
jbe
es
pop
pop
or
ficom
es
push
cmp
mov
(bad)
sub
lea
push
mov
ss
ret
xor
rol
mov
repnz
mov
cwde
jo
or
xor
pushf
sub
inc
xchg
xchg
cmps
(bad)
call
push
push
popf
test
mov
sub
(bad)
sbb
push
aam
loop
mov
push
add
push
ins
adc
ss
daa
in
(bad)
dec
(bad)
loop
mov
inc
push
jp
cmc
mov
fimul
or
nop
loopne
mov
add
push
fwait
pop
sbb
adc
adc
pop
outs
push
mov
in
xchg
scas
dec
cli
and
movups
mov
dec
xchg
(bad)
aam
xor
push
mov
pushf
cmp
push
lock
mov
push
and
ret
push
nop
inc
loop
and
or
outs
xchg
cmp
cs
ret
adc
call
imul
(bad)
retf
sbb
xchg
mov
pop
fdivr
popa
sahf
sahf
jb
or
js
mov
mov
and
and
jne
dec
aam
sbb
ficom
or
or
cmc
add
push
gs
pop
push
xor
jmp
out
ficom
daa
push
test
retf
push
xchg
pop
stos
fcmovbe
xor
pop
popf
and
pop
push
rcr
nop
xchg
adc
sub
(bad)
mov
sub
fstp
add
daa
(bad)
push
sbb
(bad)
cmps
pop
cwde
dec
push
push
sbb
popa
xchg
xchg
dec
sbb
mov
mov
adc
sub
rol
mov
(bad)
data16
loope
and
mov
pop
(bad)
push
pop
mov
mov
mov
xor
dec
adc
and
or
es
add
jle
popa
ins
lods
adc
add
fs
scas
outs
or
or
cli
test
cmp
shr
xchg
xchg
xchg
add
or
dec
push
adc
push
arpl
retf
inc
inc
push
mov
sahf
mov
aas
fidiv
or
or
outs
ficom
adc
sub
push
adc
push
add
pop
les
inc
mov
movs
rcl
push
xchg
pop
dec
sbb
inc
loopne
fcmove
hlt
dec
mov
mov
sbb
mov
sahf
add
loopne
sub
mov
cs
ret
bound
test
cli
add
xor
inc
mov
mov
(bad)
push
(bad)
jp
into
add
out
push
stos
outs
mov
imul
(bad)
loope
out
xchg
pop
jb
rcr
push
mov
mov
cs
xor
push
outs
addr16
into
gs
loope
scas
mov
push
popa
xchg
xchg
and
es
js
inc
and
jmp
pop
mov
pusha
mov
add
jbe
xor
(bad)
enter
jne
or
mov
and
enter
adc
lock
mov
inc
inc
push
mov
(bad)
jmp
cmp
rol
out
sbb
loop
mov
xor
mov
cmp
xchg
push
mov
push
dec
or
fwait
dec
dec
sub
inc
dec
mov
ficomp
jmp
(bad)
and
xor
and
push
add
xor
call
cs
arpl
sbb
mov
push
ror
adc
cmp
add
pop
fucompp
gs
xchg
dec
rcr
add
cmp
adc
mov
lods
push
jbe
rol
push
stos
das
ins
dec
loopne
sub
nop
mov
push
inc
call
ss
inc
jns
sbb
jne
push
cli
data16
mov
int3
sbb
cmp
xor
push
pushf
and
data16
and
retf
cmp
pop
mov
ins
fsub
call
enter
ror
xchg
inc
inc
inc
pop
or
repnz
rol
pop
out
push
or
mov
mov
mov
xchg
cs
js
sbb
daa
or
mov
mov
(bad)
pop
rol
add
or
mov
xchg
push
sbb
cmp
dec
das
push
mov
inc
outs
fadd
ror
outs
imul
js
adc
push
inc
and
stos
loop
mov
ss
add
add
dec
repnz
sbb
push
rol
dec
mov
and
mov
scas
aas
mov
xor
arpl
inc
dec
and
sub
adc
scas
xor
lods
adc
sbb
pop
mov
push
repnz
js
pop
fldcw
pop
and
(bad)
scas
out
es
mov
mov
sbb
pop
popf
pusha
sub
loope
(bad)
fdivp
dec
sbb
(bad)
lahf
add
or
into
add
je
mov
mov
sub
pop
push
add
xchg
movs
adc
push
xchg
mov
sbb
xor
and
stos
xor
pop
jne
xchg
ret
xchg
clc
push
aaa
xchg
stos
and
lods
adc
add
dec
xor
or
xchg
jo
loop
and
rcl
stos
and
mov
xchg
inc
bound
bound
loop
cs
lods
or
lods
or
loop
adc
xchg
jg
shl
inc
push
mov
sbb
(bad)
or
mov
out
push
mov
add
dec
or
sub
inc
add
sub
ret
dec
ficomp
jle
xchg
mov
inc
(bad)
es
fimul
adc
sbb
test
xor
aas
push
push
push
fs
jp
inc
fistp
sbb
jb
pop
or
or
popa
or
inc
fimul
xor
lods
movs
add
add
loop
dec
data16
and
adc
in
dec
mov
sahf
sbb
pop
and
mov
inc
push
(bad)
lock
sbb
and
fadd
add
out
or
pop
mov
daa
sbb
xchg
sahf
loop
add
jbe
or
mov
fisubr
or
sbb
add
adc
mul
rcl
popa
fwait
cmpxchg
sub
mov
(bad)
stos
jp
and
add
addr16
or
dec
pop
mov
inc
imul
add
or
fdiv
mov
scas
push
test
dec
inc
xchg
aam
rcr
retf
ret
repnz
sub
add
outs
jmp
loopne
int3
dec
repz
aaa
add
out
mov
sbb
mov
sahf
push
sbb
movs
ret
push
mov
dec
xchg
aam
mov
popa
add
fs
into
jmp
cwde
sbb
xchg
adc
push
adc
neg
and
inc
ret
mov
sbb
call
sbb
(bad)
xor
mov
mov
push
ficom
push
and
or
into
ret
add
mov
xchg
xrstor
fidiv
mov
ds
inc
lods
inc
mov
(bad)
rol
mov
inc
cmps
jb
mov
jle
shl
lock
mov
ins
pushf
or
push
cmp
or
push
jp
mov
adc
idiv
pop
sbb
loop
and
scas
rcr
jle
(bad)
mov
repz
jecxz
loop
add
shl
mov
push
dec
mov
push
pop
outs
or
inc
sub
adc
pop
sub
(bad)
adc
pop
cmp
push
imul
add
ret
xchg
or
call
mov
shr
sbb
stos
retf
dec
adc
fidiv
cli
push
xor
jbe
cmps
push
sbb
imul
shr
push
xor
xor
add
jno
push
sahf
call
jnp
movs
ror
fisub
xchg
cmp
stos
popf
retf
mov
jo
push
pop
ret
inc
jb
addr16
jo
cmp
shrd
sub
or
inc
push
enter
jne
mov
push
pop
test
mov
fdivrp
inc
ror
and
arpl
xor
cmp
call
pop
jo
or
daa
or
imul
out
ret
pusha
jb
sbb
mov
not
test
inc
fnstcw
lock
adc
mov
push
into
fisub
sub
test
js
mov
mov
sahf
or
xchg
xchg
fcmove
and
xchg
xchg
sub
jle
cmp
es
mov
cmp
sub
xchg
sub
push
jmp
(bad)
adc
loop
mov
aam
add
or
cwde
test
fild
jle
call
daa
sar
adc
cmps
fadd
ins
rol
jo
imul
pop
push
add
add
bound
pop
push
add
mov
jb
push
mov
scas
lock
(bad)
cmp
sbb
stos
stos
xchg
dec
enter
jmp
dec
loopne
into
pop
enter
add
jmp
inc
sub
rol
ret
sahf
ret
adc
fidivr
push
mov
out
jle
push
mov
inc
inc
or
sbb
aaa
icebp
add
adc
shl
xchg
xchg
into
push
(bad)
rol
(bad)
jp
add
or
and
push
inc
(bad)
cmp
ret
jmp
push
es
pop
rol
fst
aam
dec
call
or
mul
dec
imul
jmp
add
pop
es
leave
sbb
jbe
addr16
cmp
pop
out
sub
enter
mov
out
ret
jecxz
mov
movs
aad
add
push
scas
ss
test
popa
dec
dec
mov
jb
mov
mov
push
sahf
adc
js
sub
sahf
(bad)
rol
dec
popf
gs
jmp
push
lock
mov
push
sbb
mov
popa
cmp
mov
and
pushf
dec
pop
dec
(bad)
daa
test
adc
dec
in
loope
add
inc
arpl
out
mov
push
daa
loope
xor
or
mov
mov
jb
adc
pushf
out
ins
popa
test
scas
adc
mov
push
adc
fs
out
mov
pop
and
jnp
ret
ret
into
mov
pop
xchg
ret
stos
dec
ret
or
push
xor
jg
push
cmp
repnz
(bad)
push
xor
xchg
push
cmp
jmp
push
(bad)
fs
aaa
lods
add
push
push
(bad)
mov
cmp
push
pop
pop
xor
xlat
scas
jp
pushf
inc
and
js
jb
or
push
cs
xchg
pop
xchg
pop
ds
jo
jmp
push
cmp
or
repnz
fwait
mov
outs
inc
dec
jp
movs
mov
lock
aas
scas
and
xchg
test
inc
and
add
pop
pop
mov
sbb
cwde
(bad)
arpl
xor
popf
fdiv
call
xchg
push
xor
pushf
and
inc
jle
or
ret
fcmove
popa
cmp
pop
jp
(bad)
call
and
add
shl
dec
ret
shl
sbb
sub
addr16
call
xor
data16
jmp
mov
mov
loop
push
test
mov
and
adc
push
mov
mov
add
sbb
loop
into
pop
pop
or
mov
push
push
sahf
cli
repnz
or
out
inc
scas
jp
in
xlat
(bad)
out
mov
(bad)
push
pop
xchg
xchg
dec
dec
cmp
xor
in
(bad)
(bad)
push
fimul
or
dec
mov
ror
inc
pop
enterw
cmp
mov
pushf
cs
pop
xor
push
push
js
int
call
push
out
ja
movs
push
scas
inc
add
mov
mov
mov
push
retf
lock
mov
xor
imul
loop
mov
or
inc
es
push
inc
loopne
call
or
dec
popa
fs
or
xchg
xchg
and
cmp
adc
inc
movs
mov
jl
mov
les
call
sub
or
and
adc
push
into
es
rol
ret
bound
xor
(bad)
cli
mov
push
retf
pop
das
xchg
inc
dec
fidiv
retf
call
repnz
or
pop
add
popf
add
dec
push
add
cmp
xchg
into
mov
and
xchg
ret
sbb
mov
sub
inc
ret
das
jbe
ror
out
push
add
inc
and
lods
pushf
sti
out
inc
sub
jg
jae
and
pusha
and
sbb
aam
add
ficomp
nop
dec
(bad)
aas
dec
mov
mov
sbb
or
ret
pop
inc
cmp
(bad)
lock
pop
(bad)
(bad)
mov
fs
xchg
xchg
xchg
and
ds
dec
scas
test
retf
xchg
dec
cs
adc
cmc
jbe
cmps
dec
pop
sbb
shl
and
ficom
pushf
xchg
mov
pop
iret
popa
cmp
mov
pushf
or
jnp
push
loopne
(bad)
cmps
pusha
rcl
inc
adc
ret
leave
and
xchg
mov
(bad)
clc
pop
fist
cmp
stos
adc
lea
mov
sahf
inc
add
push
stos
adc
shr
push
fidiv
push
out
inc
sub
mov
dec
inc
icebp
sbb
pop
push
xor
jae
mov
fchs
and
push
add
adc
push
push
mov
add
ret
and
retf
cs
pusha
movs
xchg
mov
ficom
pushf
sbb
mov
inc
add
add
addr16
xor
mov
mov
inc
fimul
sub
mov
fs
out
adc
nop
xchg
and
mov
pop
mov
mov
inc
pop
add
stos
mov
xor
out
inc
pop
inc
adc
adc
sahf
outs
push
mov
adc
push
out
outs
mov
test
xchg
xchg
jp
cmp
xchg
out
add
mov
out
outs
lock
fidiv
bound
push
pop
inc
cmp
sub
fwait
inc
or
str
adc
add
dec
sub
ss
shl
jmp
retf
retf
rol
jge
scas
add
pop
add
loop
push
xchg
inc
outs
jmp
and
gs
dec
adc
xor
adc
rcr
outs
data16
jbe
retf
int3
xchg
sub
mov
out
add
dec
pop
arpl
sbb
push
xchg
or
mov
mov
add
jmp
and
push
dec
bound
ret
cmp
or
or
mov
retf
inc
xor
sub
outs
cdq
ss
pop
push
sub
sub
dec
adc
push
mov
push
mov
push
and
pop
push
mov
push
loopne
sar
and
adc
rcr
add
mov
adc
mov
stos
cmp
sbb
jle
sbb
(bad)
jmp
push
and
xor
push
test
es
pop
mov
loop
outs
or
dec
sbb
push
cmps
xchg
mov
data16
xchg
inc
(bad)
mov
and
inc
not
test
or
xlat
dec
loopne
fs
mov
cmps
jp
dec
sbb
sub
sbb
dec
and
data16
and
sbb
mov
mov
mov
cmp
call
into
cmp
and
data16
aam
test
jp
mov
out
pop
dec
inc
xlat
push
pop
add
adc
into
xchg
cdq
js
inc
jbe
gs
adc
repnz
out
les
jp
jb
fiadd
mov
popa
xor
cs
dec
add
push
mov
cmp
lods
pop
test
cmps
xor
out
sbb
mov
into
and
test
sbb
retf
sbb
imul
push
pavgb
push
outs
pop
cli
jmp
or
pusha
or
fs
pop
mov
into
pop
popa
jbe
inc
mov
lea
repnz
add
loopne
test
fs
ror
xchg
jle
and
mov
jmp
(bad)
xchg
push
scas
rcr
rcr
sbb
mov
mov
push
aaa
lods
and
ss
cmps
mov
mov
inc
popa
lea
scas
jbe
pop
ret
das
rol
sbb
inc
sub
push
fidivr
fisub
or
pop
push
or
nop
repz
inc
sbb
shr
stos
cs
and
push
adc
cmp
retf
push
clc
out
sub
sbb
mov
loop
mov
push
outs
es
out
retf
jle
or
push
pop
cmp
and
xchg
xchg
ret
xchg
xor
xchg
pop
inc
inc
lods
and
sbb
pop
mov
inc
ret
inc
cmp
mov
and
pop
inc
and
sub
or
pop
enter
mov
xchg
ret
mov
mov
lock
jecxz
cmp
push
push
inc
dec
jge
mov
jp
cmp
inc
das
jmp
jbe
inc
mov
adc
adc
xchg
and
sbb
scas
mov
adc
push
mov
jne
inc
cmps
mov
or
div
loop
(bad)
imul
fsub
ds
xor
and
sbb
push
fadd
xor
leave
xchg
fcmovbe
mov
mov
lahf
mov
mov
cwde
mov
aaa
xchg
add
jo
mov
or
inc
movs
addr16
jmp
inc
shl
repnz
ss
inc
call
mov
into
add
mov
sbb
ret
adc
into
mov
xchg
cmp
mov
mov
ret
ret
sbb
xchg
daa
mov
dec
shr
imul
or
pop
fbstp
xchg
ds
sbb
enter
icebp
cs
adc
pop
xchg
xchg
inc
mov
and
stos
loop
inc
(bad)
sbb
xchg
adc
xor
mov
(bad)
data16
or
push
into
mov
cs
pop
adc
xor
mov
push
stos
ror
aad
imul
inc
dec
aam
outs
sub
mov
pop
jne
ss
mov
outs
sbb
mov
mov
push
bound
ss
bound
cs
jp
push
cmp
and
adc
repnz
nop
hlt
(bad)
mov
xchg
cmps
test
sbb
xchg
div
xchg
and
push
retf
sbb
dec
jp
shl
(bad)
loopne
fiadd
dec
into
adc
iret
ss
(bad)
(bad)
xchg
mov
mov
bound
push
mov
jp
sbb
sbb
cbw
mov
xchg
add
(bad)
adc
mov
cmc
push
fs
mov
push
pop
adc
(bad)
mov
pop
and
pusha
xor
pusha
test
push
ret
push
xchg
mov
dec
or
lock
cmp
mov
ds
sbb
or
pop
push
es
dec
out
mov
dec
clc
gs
daa
popf
hlt
xor
jb
push
mov
dec
ficomp
mov
mov
es
xchg
and
adc
mov
add
xor
pop
ret
(bad)
mov
iret
(bad)
sub
xchg
in
fsubrp
das
fcom
(bad)
xchg
push
xchg
xor
sub
pop
loop
adc
rol
mov
xchg
or
mov
mov
nop
push
dec
ret
mov
and
shl
jmp
sub
mov
mov
cmp
jmp
adc
stos
inc
aam
xor
adc
inc
loope
push
mov
shl
sti
mov
test
inc
pop
jle
push
(bad)
or
inc
push
add
repz
and
push
mov
add
sbb
sub
scas
mov
cdq
mov
(bad)
sbb
mov
in
inc
xchg
inc
sub
mov
inc
dec
lods
and
outs
mov
adc
es
jbe
push
sbb
pop
jo
or
add
xor
jo
push
rol
stos
shl
push
xor
(bad)
sahf
jecxz
jb
push
jmp
imul
call
(bad)
out
test
inc
mov
lock
push
jp
pop
inc
das
sub
mov
inc
xor
jle
outs
enter
add
outs
mov
xchg
xchg
push
sahf
hlt
adc
xchg
mov
daa
xor
repz
bound
push
mov
cmp
xchg
(bad)
inc
or
(bad)
loopne
inc
cmp
add
or
pop
fcmove
xor
into
cmp
fisub
cdq
lods
(bad)
mov
mov
popa
dec
add
add
push
mov
enter
dec
or
pop
push
test
add
test
arpl
push
sbb
mov
shl
ret
and
pop
mov
nop
out
jo
dec
mov
dec
xor
jnp
or
popa
push
push
(bad)
xor
div
mov
movs
jb
into
or
sub
and
xor
addr16
push
mov
mov
pop
(bad)
inc
sbb
popa
jg
mov
xchg
push
arpl
add
inc
or
pop
adc
push
jp
sbb
js
push
retf
dec
cmc
pop
push
ror
dec
or
retf
add
push
and
mov
rol
xlat
pop
adc
and
push
dec
add
xor
ja
jp
add
and
or
add
ret
push
add
dec
inc
shl
or
pop
or
push
mov
pop
push
rol
stos
xchg
sub
and
push
repz
adc
inc
lock
push
mov
outs
mov
jp
mov
pop
jmp
cmps
pop
pop
dec
sbb
jle
or
cmp
(bad)
push
lock
test
outs
or
dec
xchg
shl
(bad)
sbb
mov
imul
pop
sub
pop
xchg
fsubr
out
sbb
rcl
mov
or
dec
or
mov
das
xadd
es
inc
js
cmps
scas
push
mov
xor
leave
fwait
jnp
ds
sar
jns
cmps
out
pop
jp
ret
and
mov
mov
add
test
out
push
ffreep
add
push
cmp
out
(bad)
loop
and
out
(bad)
imul
mov
out
in
jle
(bad)
cs
push
push
inc
or
inc
pop
dec
or
imul
test
lea
ret
test
or
ret
loope
call
shl
jmp
mov
or
fidiv
mul
das
dec
(bad)
dec
cwde
jno
jne
aaa
jb
pop
dec
loop
mov
inc
lock
imul
loop
inc
sub
push
retf
and
js
jmp
adc
(bad)
mov
add
ins
fs
outs
jle
xor
jb
call
in
dec
arpl
repnz
inc
loop
loope
fimul
jo
pusha
loop
or
lock
das
and
sahf
nop
test
(bad)
jmp
sbb
mov
mov
fbld
add
and
push
call
test
mov
jmp
xchg
jbe
outs
sub
xor
xchg
jbe
add
loope
jp
dec
mov
mov
scas
out
xchg
inc
pusha
add
jg
lds
arpl
mov
jmp
(bad)
cli
add
mov
cs
jp
enter
xor
popa
dec
inc
jo
fiadd
push
mov
loope
cmp
xor
xchg
sti
bound
(bad)
iret
xor
dec
retf
test
cmp
sbb
dec
xor
xchg
into
cs
xchg
mov
inc
sub
mov
cmps
add
adc
xchg
push
inc
es
icebp
adc
stos
cmp
dec
mov
ds
jp
adc
js
(bad)
pop
push
retf
push
pop
pop
repnz
push
push
adc
xor
arpl
into
ss
adc
pop
call
shl
add
les
ret
in
lods
xchg
xor
push
out
js
mov
add
pop
add
pop
and
mov
add
dec
add
sbb
add
neg
or
arpl
retf
xor
mov
adc
mov
push
sbb
add
stos
(bad)
call
es
add
push
call
lahf
test
mov
sbb
dec
push
das
dec
or
outs
ds
jne
push
dec
inc
mov
cmp
xchg
bound
or
sub
or
or
mov
and
push
jno
or
push
es
aaa
inc
sbb
call
loop
dec
or
fimul
dec
test
or
and
push
fcomip
clc
scas
push
push
imul
jo
sub
mov
and
into
fdivp
add
mov
sahf
enter
push
mov
add
jmp
inc
sub
cmp
movs
xchg
lods
shl
call
cmp
outs
es
and
loop
adc
adc
xor
add
add
dec
mov
add
call
ficomp
outs
cwde
stos
loop
call
xlat
sbb
xchg
hlt
xchg
movs
ds
outs
adc
xchg
js
cmps
mov
adc
cmp
(bad)
xor
dec
push
inc
mov
push
retf
pop
sbb
addr16
mov
inc
stos
xor
mov
add
pushf
pop
mov
aam
and
fdivrp
mov
or
and
jmp
adc
ds
push
inc
pop
add
mov
add
or
and
mov
sbb
(bad)
js
cmp
lahf
push
push
inc
jmp
test
adc
sbb
dec
push
jae
dec
cmp
or
or
clc
addr16
sub
inc
push
xor
sbb
push
xchg
mov
adc
sbb
cmps
mov
arpl
pop
xchg
push
pop
add
(bad)
pusha
push
push
jecxz
retf
cmps
das
fldl2e
dec
xor
jp
lods
lea
xlat
cmps
add
pop
out
xchg
xchg
fmulp
push
les
stos
mov
mov
pop
dec
(bad)
mov
sbb
sbb
mov
clc
sub
out
push
or
push
fs
(bad)
mov
xor
push
push
call
sbb
push
pop
add
inc
(bad)
pop
rcl
inc
ret
cmp
cmp
push
or
jecxz
jl
js
mov
mov
ins
and
mov
xor
dec
adc
cdq
(bad)
push
adc
loop
push
stos
xchg
pop
mov
xchg
push
mov
div
or
mov
xchg
xor
dec
xchg
popa
cs
es
jb
or
inc
cmp
xchg
add
fiadd
ror
adc
dec
ds
xchg
ret
enter
cmps
xor
mov
loop
pop
and
add
mov
inc
dec
and
sbb
inc
out
or
or
addr16
cmp
cmp
loopne
mov
xchg
ds
mov
jmp
adc
sub
lea
cmp
dec
jmp
and
inc
lea
loop
add
pushf
and
mov
loope
das
mov
mov
pop
xor
ds
push
loopne
call
and
sbb
sub
dec
cmp
and
adc
pop
adc
fiadd
adc
pop
xchg
ret
jo
inc
into
loop
or
test
add
sub
sub
dec
adc
or
or
xchg
loopne
or
pop
aad
dec
loop
mov
mov
lods
or
dec
or
das
bound
push
cs
sbb
sub
jmp
scas
pop
mov
stos
mov
xor
pusha
sub
imul
adc
js
or
pop
inc
dec
call
sbb
jbe
ret
inc
dec
sub
mov
sar
xor
imul
loope
push
imul
and
ret
cmps
icebp
sbb
push
(bad)
mov
and
outs
sbb
add
mov
pop
inc
es
mov
aaa
inc
mov
dec
ror
and
popa
dec
ja
mov
outs
push
stos
mov
or
outs
and
or
mov
or
adc
sbb
mov
in
shr
push
ss
adc
sar
cmp
adc
adc
jp
jle
jnp
sub
add
imul
pop
add
pusha
(bad)
test
push
pop
dec
cmps
cmp
xor
xchg
mov
sub
push
data16
dec
or
jecxz
gs
loopne
sahf
jmp
mov
mov
lock
ror
jg
es
out
xchg
pop
cmps
out
mov
in
inc
(bad)
addr16
lods
xor
test
retf
or
xchg
jbe
loopne
sub
add
sub
loope
ss
jp
mov
out
mov
push
test
sub
push
in
or
xor
outs
dec
mov
dec
mov
sub
and
pusha
rcr
dec
cmp
jp
and
aam
jbe
xchg
push
popa
and
cmp
push
ds
add
adc
sbb
jae
mov
sub
pop
dec
movs
movs
cmp
sahf
mov
ficom
and
pusha
sbb
mov
inc
jg
or
xchg
mov
idiv
push
loopne
inc
or
cdq
push
cmp
sub
cmc
js
sahf
xchg
sbb
dec
movs
into
xchg
mov
out
es
cmp
scas
mov
ds
pop
jg
add
jecxz
inc
mov
adc
and
push
dec
mov
push
inc
pusha
and
push
sbb
js
jp
mov
push
mov
sahf
xchg
and
rcr
(bad)
and
leave
leave
pop
mov
jmp
dec
pop
icebp
mov
dec
aaa
loop
xor
push
aas
and
xchg
push
sahf
and
jp
mov
gs
xchg
test
add
xchg
or
es
sub
mov
xchg
dec
sahf
xor
push
push
add
inc
push
iret
mov
adc
jmp
inc
and
movs
loopne
fisub
and
lock
pop
dec
and
xor
mov
dec
and
add
adc
ret
stos
or
push
lea
dec
inc
mov
cmp
popf
add
xchg
nop
or
cli
push
sbb
mov
das
mov
mov
cmp
out
(bad)
dec
and
add
push
rcr
pop
(bad)
loop
sub
push
cs
ror
inc
sub
mov
test
jecxz
movd
inc
outs
add
adc
push
or
cmps
dec
add
sbb
jmp
rcl
jne
mov
dec
sub
and
(bad)
mov
je
arpl
push
sbb
xchg
adc
mov
mov
sbb
inc
fadd
out
add
imul
ficomp
popf
loop
mov
scas
imul
addr16
and
pop
add
cmps
cs
or
add
mov
aam
push
add
jp
mov
fiadd
les
pop
jbe
popa
xor
loop
xchg
jb
in
(bad)
push
into
jp
sub
adc
sbb
outs
sub
pop
js
add
xlat
or
mov
cmps
jb
xchg
pop
pop
xchg
jo
push
sub
(bad)
js
jp
mov
cmp
mov
daa
leave
push
dec
pop
xacquire
cmp
add
or
es
fimul
aaa
push
push
(bad)
add
(bad)
pop
rcr
dec
data16
push
mov
pop
jmp
scas
(bad)
ds
outs
or
pop
cmp
add
mov
scas
cs
mov
(bad)
push
out
push
popa
add
xchg
dec
adc
adc
into
popa
bound
sbb
sahf
and
and
stos
mov
mov
push
jecxz
(bad)
sbb
pop
xor
xor
pop
inc
sbb
mov
outs
popa
rol
adc
sub
fild
adc
mov
js
xor
out
fsubrp
push
and
or
scas
mov
and
or
lods
push
(bad)
mov
xchg
retf
push
xor
jle
mov
pop
sub
xchg
push
dec
retf
xchg
(bad)
lds
jb
push
sbb
cmp
loopne
inc
daa
mov
cmp
add
push
xor
push
dec
jmp
sbb
inc
or
xchg
repnz
dec
cdq
rol
cmp
gs
and
mov
sbb
loope
push
mov
and
jg
ret
enter
cmp
outs
inc
or
mov
xchg
adc
jle
loop
jmp
shl
mov
pop
dec
xor
mov
and
shr
pop
ret
sbb
pminsw
out
ss
test
scas
sbb
and
call
cmps
shr
inc
pusha
xchg
ret
dec
retf
or
push
cmp
push
sub
retf
mov
into
into
es
push
push
adc
adc
fbstp
cmp
div
cmp
enter
xchg
js
sbb
outs
repnz
sbb
cmp
cli
mov
inc
sbb
loopne
add
pop
sbb
ds
repnz
adc
push
mov
mov
loope
inc
mov
push
push
inc
pop
jp
retf
es
pop
mov
or
jmp
xchg
mov
fnstenv
das
mov
dec
arpl
jle
push
pushf
add
jo
inc
inc
outs
mov
push
nop
push
(bad)
mov
xchg
pop
add
pop
jle
add
xor
pusha
sub
(bad)
cli
add
jns
addr16
sbb
jmp
dec
xor
dec
ret
xchg
add
fisub
mov
sbb
push
out
data16
fs
adc
pop
mov
ret
dec
cmp
mov
or
dec
jne
ficom
jp
jo
add
adc
fiadd
dec
pop
out
stos
inc
adc
ds
cmp
pusha
adc
out
test
loope
sahf
sahf
adc
mov
jp
stos
mov
add
inc
ret
pop
push
cmp
mov
cmp
inc
push
xchg
ss
pop
sbb
push
jmp
outs
ret
inc
push
out
mov
and
out
add
mov
push
mov
or
into
mov
inc
(bad)
mov
mov
cmp
pusha
add
outs
inc
jb
(bad)
or
mov
xor
xchg
retf
(bad)
xchg
sbb
adc
xor
test
leave
imul
fs
pop
cmp
js
arpl
mov
push
cmps
dec
(bad)
dec
out
mov
(bad)
push
cmps
outs
sbb
das
or
xor
loop
cmp
or
sbb
mov
xchg
and
or
js
test
push
xchg
adc
lea
jp
xor
aam
out
inc
add
or
or
cs
ss
and
sbb
xor
retf
retw
sub
movs
rcl
(bad)
jp
cmp
sbb
push
es
add
ret
nop
jne
jo
dec
(bad)
rcr
xchg
mov
mov
add
lock
(bad)
arpl
iret
nop
pop
mov
add
sbb
push
pop
sbb
outs
mov
aaa
movs
xchg
xchg
push
fimul
push
cmps
add
out
mov
dec
ret
add
fsub
outs
inc
add
or
ret
xchg
and
dec
xor
rcr
and
inc
arpl
dec
sbb
sti
or
lock
loope
mov
pusha
loopne
outs
dec
fisttp
out
ds
cmps
ror
jbe
or
icebp
nop
fisub
xchg
inc
shl
mov
into
mov
jmp
iret
bound
dec
xchg
sbb
inc
imul
or
pusha
jmp
scas
push
movs
or
push
mov
and
test
jle
pop
(bad)
mov
mov
mov
xor
bound
(bad)
fimul
cmp
jae
push
mov
sahf
cs
lock
or
xlat
imul
add
mov
push
or
(bad)
sti
cmps
adc
sbb
call
mov
daa
(bad)
fsubp
and
dec
out
adc
lock
or
inc
fiadd
mov
(bad)
cmp
out
adc
sub
dec
push
jmp
pop
and
sub
push
jnp
(bad)
dec
ds
inc
sub
add
(bad)
add
mov
and
ret
ret
retf
inc
adc
fbld
loope
mov
(bad)
or
jmp
cs
sbb
ret
pop
pusha
jb
xor
outs
cmp
lods
xlat
add
add
mov
sbb
push
(bad)
push
shr
add
push
adc
mov
ret
imul
(bad)
push
fmul
jb
jp
ud2
mov
mov
fidiv
inc
xor
sbb
pop
inc
or
push
sbb
cs
jmp
push
push
mov
xchg
aas
jnp
add
push
sub
inc
inc
lods
xchg
daa
cmps
pop
jle
or
jno
data16
or
loope
push
push
sbb
or
add
inc
jmp
call
mov
shl
test
add
xor
or
mov
retf
or
lods
outs
push
push
xor
pop
cli
push
mov
or
into
jbe
jp
add
dec
jg
or
hlt
sar
inc
adc
popa
xchg
mov
push
rol
dec
or
or
sahf
and
add
into
loop
popa
stos
or
ficomp
xor
or
scas
or
add
dec
repnz
test
xor
mov
jo
retf
ja
sbb
xor
or
(bad)
cmp
add
or
dec
dec
(bad)
push
nop
and
or
push
mov
jmp
mov
outs
(bad)
loop
and
ret
pop
xchg
shl
sub
jne
out
into
popa
xor
(bad)
cmp
mov
repnz
mov
cmp
sub
and
push
and
or
mov
push
arpl
sbb
jp
pop
sbb
outs
xchg
xor
dec
aaa
adc
add
and
push
xchg
scas
xor
sbb
ret
pop
inc
nop
push
sahf
xor
sub
xor
rcr
sub
inc
xchg
into
(bad)
mov
cmps
lock
dec
dec
in
xchg
fisub
test
movs
add
jge
pop
into
fiadd
push
retf
sbb
pop
jb
mov
add
inc
jle
pushf
mov
push
nop
mov
adc
mov
push
push
mov
daa
pop
push
jle
into
rol
test
dec
retf
pusha
loopne
adc
mov
push
and
push
sbb
pop
repnz
inc
sub
push
sub
dec
adc
cwde
jp
aas
jle
add
adc
add
mov
clc
pop
popa
add
sbb
into
xchg
icebp
in
cdq
mov
jle
sub
jne
push
add
xor
cmps
rcr
int3
xor
add
ficomp
push
cmp
int3
mov
test
out
xor
jle
imul
cmp
push
and
and
stos
mov
retf
xchg
mov
cmps
xor
cmp
call
xchg
(bad)
add
xchg
pop
stos
xor
movs
pop
sub
ds
mov
daa
mov
adc
cwde
ror
xchg
call
or
xor
cmp
dec
ficom
cmps
push
push
sbb
retf
sbb
mov
mov
int3
pop
sub
jp
and
ret
scas
sub
sbb
sub
leave
mov
or
retf
adc
hlt
mov
jb
mov
into
sub
mov
inc
adc
cli
es
ret
mov
push
mov
shr
(bad)
aaa
daa
(bad)
stos
fcomp
mov
jbe
ret
sbb
push
xor
add
div
push
bnd
mov
jle
jo
xor
mov
fcomp
rol
rcl
or
stos
mov
enter
pusha
das
loop
cmp
push
push
call
fs
ret
loopne
(bad)
pop
jg
xor
mov
out
jbe
into
test
into
mov
jo
and
mov
add
adc
popf
call
cli
retf
dec
nop
repnz
ficom
outs
jmp
mov
jo
popf
push
mov
push
nop
adc
dec
push
adc
adc
mov
push
cmp
jb
test
call
or
shl
mov
jbe
jno
scas
jle
pop
cmp
push
and
jmp
(bad)
mov
adc
sub
test
push
or
dec
xor
ret
mov
add
mov
ss
and
bound
or
adc
add
xor
mov
sbb
or
sar
test
pusha
cmp
cmps
fidiv
cwde
mov
(bad)
div
test
lea
dec
adc
adc
jmp
mov
mov
add
scas
outs
fsubrp
and
fild
add
push
jo
xchg
enter
push
push
enter
cmps
imul
mov
movmskps
cli
adc
shl
outs
add
and
(bad)
push
add
aaa
cmps
jb
dec
js
loop
sub
add
pop
or
push
jbe
pusha
push
stos
xchg
add
and
inc
cmp
(bad)
data16
addr16
mov
push
sbb
retf
lahf
inc
mov
stos
ret
loopne
inc
rcr
mov
or
and
xchg
ficomp
pop
cs
sar
ret
cmps
and
cdq
cmp
faddp
cmp
jp
push
rsqrtps
sti
retf
push
fxsave
add
push
cmp
xchg
jmp
retf
ss
clc
dec
add
pop
iret
inc
in
push
rcr
ret
sbb
sahf
(bad)
ss
dec
mov
dec
dec
dec
(bad)
and
movs
cmps
jbe
and
sahf
jmp
test
push
or
mov
out
mov
add
mov
mov
into
sbb
jp
shl
(bad)
jmp
ficomp
ror
pop
pop
jg
sub
dec
jb
ret
or
(bad)
push
push
sub
ret
xchg
jb
test
push
inc
jl
or
js
xor
(bad)
xchg
stos
mov
or
(bad)
mov
addr16
dec
popf
xor
mov
mov
fidiv
sbb
cli
mov
sub
add
adc
shr
dec
xchg
mov
pop
jbe
push
into
es
es
cs
je
mov
les
xchg
mov
pop
shr
cli
fnstenv
popa
inc
scas
mov
stos
shl
inc
sub
mov
add
xor
dec
(bad)
ja
or
test
bound
fiadd
push
fiadd
fadd
fild
call
mov
nop
bound
sbb
or
mov
mov
mov
pusha
mov
bound
jmp
neg
cmp
adc
ficom
or
push
test
jo
fwait
ror
sbb
mfence
push
adc
add
jo
xchg
lahf
mov
movs
push
inc
push
movzx
ins
loopne
test
cmp
outs
push
push
out
pop
push
jbe
into
push
push
xchg
sub
sbb
sbb
sbb
cmp
data16
xchg
imul
arpl
dec
jp
adc
jp
into
xor
dec
push
retf
rcr
sub
mov
jo
adc
in
xchg
and
stos
xchg
ins
sub
sub
adc
ds
inc
addps
add
dec
clts
xchg
xor
or
hlt
retf
adc
add
xchg
pop
inc
add
fwait
xor
fiadd
xchg
inc
add
lods
push
les
dec
mov
cmps
enter
pop
pop
xchg
adc
add
xchg
xchg
cmps
test
inc
dec
push
sbb
mov
cmp
lea
outs
test
xor
addr16
add
outs
jb
mov
daa
dec
push
dec
mov
daa
and
xchg
and
pop
test
pop
jmp
pop
(bad)
adc
rol
xchg
xor
test
call
add
imul
punpckhbw
push
sub
sbb
inc
call
arpl
jb
cmp
add
sbb
frstor
jle
jle
lea
or
mov
shl
dec
and
jo
inc
push
stos
xchg
dec
test
pop
add
jp
inc
inc
(bad)
jle
add
pop
or
mov
js
das
and
jmp
dec
sahf
lock
scas
pusha
dec
xor
and
pusha
or
or
push
daa
sub
jo
mov
xor
mov
cli
cmps
mov
push
xor
jmp
dec
arpl
ss
je
(bad)
and
test
repz
test
add
aad
xchg
mov
ficomp
pop
mov
and
pop
(bad)
add
jb
dec
loopne
pop
loop
icebp
cmp
xor
jb
xchg
popa
aam
scas
ret
and
inc
das
and
stos
push
push
mov
adc
ret
adc
inc
test
or
add
add
imul
mov
sbb
and
push
inc
imul
sbb
iret
mov
pop
pop
sbb
jbe
or
out
(bad)
shr
enter
adc
outs
or
stos
xchg
movs
inc
pop
(bad)
and
push
xchg
ins
inc
pusha
pop
pop
mov
in
je
jle
(bad)
adc
add
push
xor
mov
out
bound
loop
xor
push
cmps
pop
mov
sub
arpl
pusha
jp
mov
out
mov
push
add
(bad)
mov
sub
inc
daa
js
push
arpl
dec
or
daa
lods
gs
neg
fcmovnbe
adc
outs
cdq
sub
add
push
lock
pop
pop
ds
imul
add
test
jb
sbb
jbe
dec
inc
es
sub
cmp
inc
(bad)
or
jp
sub
je
sbb
js
xor
sbb
xor
xchg
mov
or
fisubr
push
fidiv
outs
es
add
sahf
mov
adc
call
push
adc
popf
inc
out
pop
(bad)
xor
out
pop
test
(bad)
data16
out
adc
mov
and
sbb
or
xchg
js
mov
pop
pop
cmp
inc
fcom
mov
cs
in
xchg
mov
out
ds
cmps
pop
add
push
pop
test
cmps
jb
xchg
hlt
ss
(bad)
imul
and
xchg
jmp
dec
or
call
loopne
xchg
jo
popa
(bad)
cmps
adc
cs
loop
test
out
inc
out
jp
inc
rol
or
scas
pop
(bad)
aam
test
jb
or
dec
jmp
xor
xor
into
or
push
sub
xchg
into
test
push
xchg
add
add
loop
dec
loop
push
scas
aam
repnz
add
push
pop
fbld
inc
sbb
sbb
(bad)
push
sbb
adc
outs
retf
xor
push
inc
push
xchg
xchg
retf
dec
mov
popf
mov
fisubr
pusha
sub
mov
jmp
scas
scas
enter
cmp
push
bound
xor
mov
pop
adc
xchg
and
sub
ds
sub
ss
test
(bad)
retf
nop
inc
into
sbb
test
cmp
(bad)
mov
sbb
xchg
or
push
sub
inc
add
add
das
push
mov
sbb
(bad)
retf
sbb
fs
mov
jmp
dec
js
push
call
adc
inc
push
mov
mov
xchg
cli
push
push
sbb
mov
pop
jbe
inc
or
xor
mov
mov
inc
mov
mov
out
cwde
adc
jp
mov
cli
rol
add
mov
sub
cdq
xchg
add
push
nop
cmp
push
xchg
test
retf
pop
fidiv
xchg
leave
sbb
scas
out
sub
push
xchg
in
iret
dec
fs
xchg
iret
scas
sub
nop
mov
push
mov
ret
dec
cmp
cmp
mov
pusha
adc
nop
xchg
lods
or
sar
xor
push
aam
ret
xchg
and
mov
or
push
cmp
jp
push
and
sub
fidivr
mov
xlat
(bad)
fwait
add
push
xchg
mov
and
xchg
mov
dec
push
push
sub
mov
and
and
pop
adc
arpl
ret
sbb
outs
xor
test
sub
ret
or
mov
mov
ficom
cmps
cmps
ret
sahf
jo
dec
sbb
sar
stos
jo
mov
cmps
cmps
sbb
bound
push
adc
xchg
xor
add
or
call
mov
sbb
mov
aaa
mov
adc
rol
and
mov
jbe
aaa
xor
xchg
or
dec
mov
push
inc
loope
shr
das
adc
ret
bound
(bad)
xchg
iret
popa
je
or
mov
xor
data16
es
sub
(bad)
xchg
mov
xchg
fiadd
mov
(bad)
and
in
loop
xlat
or
pop
adc
adc
sahf
shl
fcomp
mov
inc
add
ret
jno
push
jmp
adc
mov
or
pop
add
fwait
(bad)
rcl
sbb
or
push
push
xchg
test
rol
cmps
mov
xchg
inc
cmps
add
xchg
push
in
cs
ror
mov
and
sbb
xchg
cmp
clc
adc
loop
mov
xchg
add
cmc
jmp
stos
push
or
and
xchg
sub
ret
out
pop
mov
out
mov
push
pop
out
or
addr16
sub
add
fbld
fist
bound
jo
xor
xor
cmp
loop
cmps
fdivp
xchg
or
dec
ret
rol
push
movs
(bad)
mov
(bad)
push
add
lock
(bad)
ss
pusha
ds
xor
bound
add
add
bnd
and
mov
mov
mov
sbb
jb
mov
mov
leave
mov
xchg
push
mov
out
cwde
sbb
(bad)
lock
mov
addr16
lds
jmp
(bad)
pop
mov
xchg
jno
adc
or
cmp
or
add
movs
ss
add
scas
and
sub
loopne
ret
add
xor
idiv
(bad)
jae
mov
mov
mov
repnz
mov
adc
mov
cmc
xor
push
xchg
ror
call
dec
loop
loop
or
inc
aam
dec
hlt
xchg
and
fidiv
or
fwait
pop
repz
ins
xchg
xchg
add
into
loop
xor
fidivr
add
and
inc
scas
and
sahf
mov
ds
push
pop
xor
mov
and
xor
sub
das
bound
sahf
push
fst
cmp
push
into
adc
jmp
jb
and
rol
dec
outs
cmp
pop
rcl
jmp
retf
into
adc
enter
or
shr
cs
adc
sbb
push
sbb
dec
aam
test
push
rol
dec
xor
or
xlat
das
cwde
out
scas
prefetchwt1
popa
or
movs
add
dec
dec
xchg
sbb
pop
jbe
ins
sub
and
cmp
and
add
jmp
repz
adc
fiadd
ror
es
psrad
fisub
pop
cmps
iret
push
outs
xor
cmp
sti
ss
cmp
sahf
call
dec
imul
xchg
(bad)
push
retf
es
fcom
pop
popf
out
cs
and
pop
(bad)
shr
jmp
push
add
push
test
adc
jbe
push
push
jecxz
loop
push
rcl
and
push
(bad)
(bad)
inc
cmps
(bad)
sub
xchg
adc
dec
push
dec
cli
jg
dec
inc
cmp
rcl
mov
(bad)
repnz
cmp
jmp
ins
and
(bad)
push
je
push
call
cwde
mov
mov
outs
inc
inc
add
add
jbe
loop
cmp
and
fstp
jmp
and
or
push
mov
or
rcl
push
(bad)
mov
push
pop
test
push
mov
fcmovb
push
popa
sub
sub
loop
lds
(bad)
fcmove
add
fldenv
lock
ret
cmps
jb
pop
add
xchg
aaa
xchg
scas
xor
jle
jecxz
sub
mov
sbb
push
call
(bad)
dec
inc
pop
add
imul
ret
fidiv
adc
cmp
(bad)
push
clc
mov
(bad)
(bad)
mov
(bad)
push
and
xchg
xchg
mov
test
jmp
adc
je
xor
inc
inc
mov
sbb
xchg
and
mov
adc
mov
mul
div
jp
jo
pusha
xchg
jb
or
arpl
jo
stos
xchg
jmp
iret
add
adc
(bad)
outs
add
scas
mov
mov
inc
or
stos
lock
adc
inc
retf
jbe
(bad)
dec
retf
pusha
test
xchg
push
jo
ror
mov
push
rol
rcl
sub
loopne
scas
mov
cmp
push
ret
jns
iret
dec
xor
sub
push
ret
xor
dec
adc
push
sub
data16
daa
pop
inc
xchg
punpckhdq
outs
arpl
jecxz
jbe
mov
add
sbb
adc
mov
or
push
or
arpl
fidiv
cmp
or
cmps
add
adc
adc
and
adc
xor
inc
mov
mov
fs
sub
aad
push
dec
mov
cmp
jmp
rcl
scas
xchg
cmp
jbe
push
pop
sub
xor
adc
push
xchg
jb
popa
dec
adc
and
jno
dec
jle
rcr
lock
push
adc
adc
pop
out
(bad)
cwde
add
xchg
push
(bad)
aam
jp
mov
ret
outs
shl
push
and
outs
cmp
test
inc
push
test
add
mov
fidiv
or
or
dec
mov
jmp
bound
inc
cmps
xchg
into
(bad)
sar
push
(bad)
retf
jb
(bad)
dec
inc
push
add
cdq
loop
dec
ficomp
movs
push
test
or
mov
sub
clc
movs
inc
cmps
jb
or
(bad)
es
inc
retf
inc
add
sbb
lea
aam
rcl
mov
cmps
ficom
sbb
xchg
pop
add
pusha
fcmovbe
adc
(bad)
push
into
xchg
push
push
scas
push
pshufw
sbb
into
jae
pop
mov
push
xchg
mov
add
mov
mov
jo
inc
jo
and
cmp
push
xchg
add
push
mov
ret
idiv
popa
test
xchg
inc
out
xor
inc
mov
pop
mov
movups
inc
mov
mov
push
mov
xchg
shl
push
add
mov
(bad)
mov
loop
ror
aam
outs
sbb
sub
push
out
pushf
inc
jecxz
and
iret
inc
dec
mov
imul
inc
sub
mov
(bad)
mov
dec
sti
sbb
popa
arpl
push
pop
xchg
mov
push
ss
and
sbb
loopne
mov
sbb
push
add
retf
jmp
shr
das
push
pop
pop
pusha
inc
inc
jbe
rcl
fstp
les
dec
mov
ret
cmp
add
mov
adc
fdiv
retf
(bad)
ffreep
retf
add
shl
jp
sbb
ds
xchg
or
mov
ins
mov
pop
(bad)
shr
mov
aaa
mov
sub
push
fisubr
loope
cs
push
retf
dec
sbb
cmps
mov
inc
xchg
adc
jp
(bad)
cmp
push
loope
cmp
call
xchg
call
dec
fisub
idiv
adc
add
call
add
test
mov
sub
bound
mov
or
pop
rol
jb
(bad)
(bad)
enter
jns
repz
inc
sub
push
push
adc
ss
and
push
add
add
jo
pop
inc
push
or
xchg
jle
dec
add
and
pop
sahf
cli
dec
or
cmps
into
dec
cli
add
fs
sub
repnz
push
(bad)
inc
jmp
push
pop
data16
lea
out
mov
(bad)
sub
and
and
es
push
cmps
xor
jo
call
hlt
push
cmp
push
cmps
mov
cli
mov
ss
cmp
add
adc
xchg
mov
push
mul
push
jb
data16
cmovo
loop
and
stos
lods
test
ins
dec
xchg
jecxz
scas
adc
push
inc
sub
push
mov
ror
rol
les
call
push
jp
mov
sbb
outs
mov
rcr
out
xchg
and
leave
pop
rcl
fidiv
and
or
fcomip
add
or
out
push
imul
sub
sbb
add
mov
mov
sub
repnz
lahf
sub
add
and
popa
cmp
inc
dec
out
add
cmps
cs
inc
or
jb
pop
je
ret
shl
scas
neg
pop
(bad)
(bad)
adc
ficom
pop
xchg
or
jo
mov
dec
ret
dec
repnz
cdq
rcr
dec
jbe
sbb
push
(bad)
sbb
arpl
adc
arpl
cdq
xchg
sub
inc
xchg
jae
mov
xor
fiadd
fisttp
ret
pop
xchg
out
fs
imul
or
xchg
push
jo
stos
mov
lods
push
xadd
sahf
and
inc
sbb
(bad)
adc
add
mov
js
cmps
loopne
out
sub
cwde
mov
mov
mov
(bad)
repnz
jb
fmul
push
jle
jp
adc
pop
ficom
data16
dec
or
jecxz
fsub
scas
push
pushw
jo
push
ret
sahf
lock
into
xor
mov
and
add
rcl
out
fcom
into
add
push
push
add
adc
fnstsw
xor
retf
and
jb
rol
adc
sahf
ins
stos
dec
outs
pop
and
mov
push
jae
dec
cs
jmp
call
dec
jno
sbb
mov
call
lahf
retf
and
mov
or
ror
ret
ss
add
inc
aaa
es
jmp
xor
fstp
add
push
mov
je
in
out
call
sub
and
or
lea
out
stos
out
inc
add
cmps
mov
xor
call
push
add
sub
xor
pop
sbb
push
inc
jp
mov
cmp
sbb
mov
dec
pop
pop
and
add
mov
jmp
add
add
out
(bad)
or
jo
dec
cli
add
xchg
sbb
ds
or
mov
dec
jle
sbb
inc
test
lods
sahf
mov
xor
inc
xchg
fidivr
sub
sub
scas
and
aam
ds
sbb
adc
sahf
sahf
jmp
(bad)
adc
ins
loopne
inc
scas
adc
xchg
xor
test
mov
push
lods
and
add
test
mov
or
push
sub
add
ds
loop
ins
sub
xchg
fstp
jp
push
out
and
ss
cs
sahf
push
call
(bad)
sbb
cmp
xchg
(bad)
outs
shl
das
ss
loope
das
out
mov
pop
nop
jle
into
xor
add
ja
mov
ret
or
loop
sub
dec
push
cdq
loope
adc
push
sbb
cmp
movs
xchg
popa
push
pop
inc
ins
pusha
bound
mov
or
sbb
mov
ds
xchg
add
enter
adc
and
xor
(bad)
sbb
aaa
mov
mov
test
rol
mov
sub
jecxz
and
dec
(bad)
mov
mov
dec
add
mov
mov
dec
xlat
outs
clc
into
jb
into
test
outs
sbb
not
adc
xchg
jp
and
xor
inc
popf
xor
dec
cmp
cmp
fisttp
dec
(bad)
rcr
sbb
pop
mov
mov
pop
jae
shl
cmp
cmc
or
pop
ins
loop
sbb
fidivr
xor
xchg
out
into
pop
loope
enter
les
inc
push
add
push
pushf
inc
js
jbe
sahf
nop
sahf
push
repnz
clc
fist
popa
data16
mov
pop
into
push
mov
or
test
inc
sbb
repnz
push
mov
push
push
jb
pop
sbb
push
(bad)
push
mov
(bad)
cmp
mov
shl
je
icebp
mov
jp
or
mov
fisubr
lods
xlat
sar
call
sub
mov
mov
loop
and
mov
xchg
lea
add
push
ror
pusha
loopne
ret
(bad)
sub
ds
daa
enter
stos
mov
pop
ds
inc
xchg
rcl
call
add
dec
pop
dec
imul
push
adc
or
mov
push
mov
imul
add
xchg
mov
fs
push
loop
xor
inc
sbb
push
into
xchg
aas
bound
loop
cmp
or
loop
jecxz
push
les
leave
add
push
jb
scas
inc
fmul
and
retf
jne
je
dec
lock
xchg
xor
mov
(bad)
repnz
(bad)
cmp
dec
iret
sbb
dec
push
popa
and
mov
sub
shr
xor
shr
(bad)
shl
add
outs
sbb
sbb
daa
or
rcr
fstp
inc
ficomp
push
mov
inc
push
dec
or
popa
addr16
cmp
sbb
and
sbb
dec
sbb
out
arpl
cli
push
shl
and
aam
xchg
pop
push
jo
dec
inc
(bad)
dec
out
movs
outs
sub
popf
push
mov
call
cmps
mov
outs
and
mov
ret
ds
or
cmps
pop
ds
xchg
jecxz
fcmovnbe
adc
bound
mov
je
add
into
(bad)
sbb
arpl
sbb
cmp
jp
ja
inc
or
imul
pop
add
jae
pop
daa
and
cmps
push
xchg
scas
mov
es
and
adc
sahf
xchg
mov
or
adc
dec
sbb
dec
push
call
aam
jno
mov
fcom
outs
and
and
nop
stos
lahf
mov
xchg
rcl
push
loopne
outs
data16
jle
mov
icebp
fimul
call
inc
mov
xor
mov
(bad)
or
and
retf
cli
data16
xchg
sub
mov
loope
pop
xchg
clc
add
loop
sahf
xchg
or
cs
inc
pop
or
(bad)
dec
push
ret
(bad)
fiadd
dec
inc
popa
mov
mov
retf
loope
add
scas
mov
out
inc
jmp
or
or
sbb
pop
mov
fidiv
jp
test
sbb
add
pushf
sbb
dec
dec
fcmovb
ins
add
add
repnz
fiadd
xchg
push
dec
pop
xor
mov
add
not
xchg
nop
push
dec
mov
(bad)
mov
pop
data16
add
dec
test
(bad)
mov
test
push
adc
ins
scas
fisub
xchg
shl
xchg
xchg
mov
cmp
or
mov
loope
mov
lea
mov
inc
xor
xchg
shl
pusha
pop
cmp
adc
nop
out
push
ret
fcom
hlt
mov
or
push
sbb
popa
push
cmp
dec
jp
dec
sahf
push
pop
or
les
ficomp
add
inc
push
xchg
enter
mov
jo
and
or
pop
add
arpl
lods
inc
mov
data16
cmc
and
outs
out
or
push
add
inc
mov
xor
rcl
add
cmp
add
mov
cmp
adc
cli
mov
popf
dec
push
cmc
push
(bad)
xchg
ss
and
icebp
pop
test
inc
push
mov
sub
loope
pop
call
or
pop
cmp
(bad)
in
push
dec
ficom
test
add
or
inc
cdq
outs
mov
scas
and
pop
xchg
hlt
sub
fisub
movsx
xor
out
and
loop
add
ror
dec
push
push
aam
outs
stos
lods
sub
hlt
(bad)
xchg
fiadd
sbb
jp
fld
sub
lods
pusha
iret
out
ret
or
pop
or
retf
outs
(bad)
aam
or
add
or
push
retf
gs
ss
pusha
xchg
stos
into
faddp
or
data16
data16
mov
add
bound
(bad)
jae
pop
adc
ror
or
cmp
sbb
out
fadd
pop
add
push
and
jmp
mov
les
cmp
(bad)
es
gs
into
xchg
push
adc
imul
add
dec
call
sbb
and
or
ficom
jmp
shl
js
add
bound
cli
sub
das
add
add
sub
lea
fwait
jle
mov
lea
dec
fimul
test
bound
sub
or
mov
push
add
scas
and
mov
xchg
shl
adc
mov
iret
push
jb
ins
ret
xchg
stos
push
xchg
(bad)
loope
shl
dec
mov
shl
test
jmp
cmp
arpl
call
jb
sahf
pop
jmp
push
and
sbb
or
movs
mov
jb
xor
mov
push
inc
or
push
pop
fisubr
ret
sbb
add
cmps
in
and
jmp
mov
ss
push
dec
push
(bad)
jno
out
into
mov
pop
ret
loopne
dec
jecxz
dec
bound
mov
push
add
and
xchg
or
sub
shr
pop
cs
enter
out
retf
add
sub
jg
inc
sahf
xor
es
xor
add
jp
and
(bad)
(bad)
movs
or
pop
(bad)
xchg
pop
or
mov
jb
mov
dec
dec
push
(bad)
and
push
pusha
xor
jb
fcmovu
add
jae
sahf
sbb
adc
movs
xchg
or
xchg
sub
dec
das
pusha
dec
cmps
out
ins
sbb
sbb
xor
sub
add
into
call
sbb
pop
add
lock
mov
movs
ds
jp
push
(bad)
push
adc
xchg
call
cs
xor
(bad)
loop
movs
xor
not
push
xchg
xchg
mov
cmp
xchg
push
cmp
or
(bad)
(bad)
ret
mov
sbb
mov
mov
dec
addr16
sahf
push
and
lods
add
fidivr
dec
push
push
wbinvd
cs
push
or
ret
retf
rcr
push
pop
loop
sub
hlt
mov
out
mov
pusha
dec
sbb
or
add
sbb
push
adc
mov
nop
and
cmp
dec
push
mov
lods
push
sub
call
push
xor
popa
sub
fcomp
sbb
inc
push
js
sti
bound
(bad)
pop
push
cmp
pop
jb
add
pop
mov
repnz
icebp
push
or
mov
cmps
jp
rol
retf
mov
test
xor
rcr
or
or
xchg
mov
out
add
jne
dec
imul
push
xchg
mov
xor
mov
outs
sub
into
sub
xchg
dec
pop
ret
jne
mov
push
push
dec
sbb
mov
xchg
adc
dec
jg
pop
ret
sub
jle
dec
xchg
and
das
inc
cmp
(bad)
jecxz
jne
arpl
lock
sub
xchg
loop
sub
cs
or
ins
adc
retf
out
sahf
inc
pop
mov
(bad)
fiadd
aas
push
pop
inc
mov
scas
push
ja
(bad)
imul
or
sbb
(bad)
daa
jg
add
outs
push
outs
dec
pusha
add
add
pop
or
das
mul
cmps
mov
adc
mov
sbb
inc
adc
scas
fistp
jo
dec
repnz
xor
rcl
push
xor
cmp
or
fiadd
mov
mov
int3
mov
mov
xor
ret
pop
imul
inc
fdivr
fisub
push
mov
sbb
push
sub
and
fidiv
dec
and
pusha
pusha
sub
test
xor
mov
in
fst
xchg
outs
ret
mov
ficomp
pop
popa
test
es
jp
pop
rol
and
enter
mov
rcl
add
pop
arpl
shr
icebp
mov
inc
push
mov
add
xor
mov
add
or
cli
into
sar
or
bound
ss
xchg
xchg
dec
cmp
mov
xchg
jg
adc
adc
dec
jp
loop
or
mov
lock
sbb
mov
xchg
or
ficom
push
push
inc
mov
jb
lea
and
cmp
or
sub
mov
pop
pop
inc
push
sbb
imul
inc
sub
mov
mov
retf
pop
ds
jmp
repnz
dec
push
sbb
push
xchg
mov
push
add
mov
push
xor
xchg
retf
les
adc
pusha
je
pusha
out
out
jp
or
or
sbb
xlat
mov
mov
adc
mov
hlt
nop
push
outs
adc
xchg
or
or
mov
add
scas
loop
cs
and
mov
loope
sbb
cmps
dec
xor
ds
cdq
and
fst
dec
push
add
xchg
add
or
inc
outs
nop
loop
and
imul
adc
push
ror
adc
arpl
lods
imul
mov
(bad)
(bad)
outs
mov
stos
push
xchg
and
jo
test
shr
inc
inc
mov
shl
call
ss
pop
stos
and
and
test
xor
cmps
mov
and
les
push
not
sahf
es
mov
jne
add
pop
add
retf
pop
scas
dec
retf
xor
out
add
cmp
adc
mov
fisttp
mov
add
or
das
push
push
sbb
pop
cmp
scas
test
inc
loop
dec
dec
add
inc
mov
adc
jge
pop
cli
test
inc
or
dec
or
sahf
jbe
mov
jmp
push
push
data16
xchg
xchg
ficomp
jbe
pop
cmp
add
and
mov
and
push
pop
mov
nop
pusha
xlat
push
mov
pop
and
fidiv
nop
lea
mov
outs
add
add
rol
mov
xchg
not
xor
push
inc
fcom
icebp
mov
mov
(bad)
fcmovbe
add
mov
cmp
rol
or
sti
jle
jmp
push
inc
and
ret
out
and
cmps
add
xchg
inc
pop
and
movs
out
mov
ret
test
push
(bad)
div
call
mov
bound
mov
(bad)
sbb
pop
mov
push
xor
loop
inc
sbb
jp
scas
sub
mov
adc
ficom
retf
add
test
shr
pop
scas
cwde
bound
xchg
inc
mov
rol
jmp
out
cmp
outs
and
mov
shr
sbb
mov
dec
fimul
out
bound
or
fwait
push
add
(bad)
rcl
push
cwde
sub
sub
es
js
add
and
xchg
and
ror
xchg
push
cli
add
mov
pusha
cmp
or
and
dec
ds
inc
dec
mov
stos
rol
cmp
ss
jmp
(bad)
aam
jle
js
shl
ins
or
adc
dec
call
dec
and
or
outs
(bad)
pusha
cwde
and
or
fidiv
or
cmp
ja
scas
xor
stos
add
push
add
or
test
ret
mov
pop
adc
icebp
xor
dec
out
mov
inc
ss
push
mov
cmps
and
xor
dec
inc
add
mov
scas
xor
rcr
js
mov
sbb
pop
add
cmps
rol
xor
mov
les
sbb
mov
loop
mov
push
cmp
jbe
pop
pop
sbb
jle
outs
mov
loop
xor
push
mov
add
and
test
xchg
loopne
in
hlt
into
mov
cli
in
adc
push
call
add
pusha
(bad)
cmp
pusha
inc
or
movhps
loop
jbe
(bad)
popa
and
sub
imul
inc
dec
mov
jmp
imul
ret
scas
jp
inc
popfw
or
add
jno
sbb
jle
pop
add
add
push
ds
sbb
scas
ss
daa
and
fimul
xor
sub
and
dec
dec
xchg
and
outs
jbe
sbb
inc
push
and
push
in
retf
movs
xchg
mov
cmp
call
out
push
sbb
loopne
call
inc
das
or
sahf
into
dec
mov
out
(bad)
sub
and
out
pushf
add
dec
push
shr
(bad)
add
and
pop
xchg
into
dec
das
cmp
outs
data16
idiv
pop
clc
sbb
pusha
mov
sbb
jnp
adc
aam
jle
xchg
aam
add
inc
stos
popa
sub
lea
push
or
sub
mov
or
jle
rol
ret
mov
dec
loop
lods
or
add
xchg
adc
imul
mov
mov
push
into
pminsw
add
mov
mov
lock
push
call
push
outs
or
clts
push
mov
pop
clc
pop
add
ss
push
and
ret
call
ds
xor
adc
fimul
sahf
cwde
div
pop
(bad)
pop
add
mov
es
sbb
inc
pop
(bad)
ss
push
pop
push
adc
aam
push
ret
sub
sbb
add
sti
xchg
jb
clc
fiadd
add
mov
jb
xchg
cmp
add
xchg
loopne
cmp
and
imul
xchg
add
pop
loop
mov
sbb
xchg
inc
pop
push
xor
sbb
aas
rcl
push
xchg
repz
js
(bad)
adc
dec
bound
test
xchg
xor
xor
into
cmp
imul
mov
jbe
and
imul
outs
pop
daa
and
fisttp
sbb
div
push
out
add
outs
jb
js
loopne
mov
sub
sbb
inc
mov
rol
ror
cmp
xor
add
push
ss
dec
mov
cmp
xor
lods
push
push
retf
bound
pop
pop
loopne
scas
(bad)
add
dec
or
push
xchg
movs
cmp
xchg
call
repnz
ror
and
scas
pushf
sbb
loope
xchg
or
sub
inc
bound
cs
scas
stos
je
push
into
pop
test
popa
sbb
scas
dec
(bad)
mov
arpl
call
retf
xchg
xchg
das
push
jb
fs
and
mov
fisub
xor
or
movs
push
out
loopne
rcr
ret
pop
adc
(bad)
(bad)
mov
pop
jle
sbb
sbb
mov
fbld
pop
enter
mov
push
(bad)
(bad)
pop
lods
dec
sub
add
fiadd
mov
imul
sbb
xor
add
mov
outs
dec
(bad)
ror
or
das
enter
imul
mov
mov
xchg
(bad)
xor
inc
test
mov
fild
dec
fdivr
jae
pop
jmp
bound
call
movs
add
mov
jne
rcl
cmp
jp
das
jnp
out
and
push
(bad)
retf
adc
sbb
adc
outs
jmp
xor
push
xor
stos
xor
fisttp
jb
scas
and
pop
iret
push
add
sbb
and
sbb
adc
ror
push
xchg
mov
mov
mov
inc
into
retf
inc
nop
daa
and
push
aas
sbb
or
jp
popa
lods
xchg
jmp
jmp
or
out
retf
pop
inc
inc
call
add
or
es
ins
cmp
fwait
(bad)
xlat
retf
(bad)
and
mov
add
sbb
gs
outs
mov
add
pop
outs
sahf
push
or
push
xchg
into
mov
leave
into
sahf
push
mul
sub
mov
das
sub
or
addr16
add
push
scas
xlat
dec
outs
dec
push
push
xchg
sahf
mov
pushf
and
inc
fidivr
inc
jp
div
test
adc
shl
pusha
(bad)
mov
test
xor
pop
fsub
pop
adc
mov
xchg
inc
push
push
ret
xchg
push
xchg
or
imul
outs
dec
test
pop
loop
cmp
ficomp
jne
push
daa
adc
sub
leave
sbb
stos
mov
push
repnz
(bad)
jecxz
data16
(bad)
pop
or
push
sub
test
cmp
test
xor
mov
mov
jg
icebp
rol
mov
xchg
push
or
imul
pop
mov
push
add
cmp
dec
mov
push
rcl
rcl
add
mov
inc
jmp
mov
inc
pusha
ins
pushf
push
cli
fidiv
push
mov
jg
mov
or
repnz
mov
add
test
fs
cmp
sub
sub
xchg
jle
aam
nop
dec
dec
dec
test
push
push
fisubr
inc
xchg
sub
dec
add
or
push
loop
and
bound
call
add
push
push
cmp
outs
mov
call
cmps
xor
adc
jbe
adc
sbb
mov
and
mov
out
sbb
shl
cs
or
adc
ret
ret
sbb
(bad)
xchg
js
mov
or
mov
loop
cmp
call
cmps
rcl
push
and
data16
mov
mov
sar
repnz
jmp
and
or
dec
push
bound
retf
push
aam
inc
stos
or
add
loopne
cs
daa
and
push
mov
adc
dec
jp
mov
js
xor
add
xchg
or
and
and
and
es
pop
mov
or
push
ret
out
lods
mov
push
or
xlat
pusha
push
sub
pop
pop
pop
or
mov
(bad)
hlt
dec
loopne
mov
dec
test
push
jb
lods
sub
(bad)
mov
push
rol
xchg
fidiv
loop
push
mov
push
mov
inc
ret
add
push
sahf
pop
scas
ins
pusha
in
xor
cwde
or
add
adc
dec
inc
call
out
push
into
jbe
outs
sbb
call
inc
pop
es
mov
out
inc
push
jae
ja
inc
pop
sbb
bound
mov
inc
fxrstor
xor
xchg
mov
or
fild
inc
loopne
lea
add
xor
pop
mov
test
sub
mov
test
jbe
ret
rcr
bound
dec
mov
pop
push
push
push
xchg
into
jp
xchg
add
dec
mov
shr
xor
pop
cmp
stos
push
push
fs
jmp
xchg
and
inc
lods
pop
jo
mov
sub
xor
jmp
cmp
mov
mov
push
push
inc
pusha
add
loop
mov
pusha
iret
mov
into
pop
les
and
adc
retf
movs
pop
loopne
xchg
enter
popa
test
mov
sbb
jp
and
push
push
js
push
loop
push
mov
adc
dec
dec
and
add
sbb
inc
sbb
dec
faddp
or
xchg
pop
cmp
dec
xor
or
js
pop
call
mov
(bad)
cli
jb
add
(bad)
mov
(bad)
cmps
pusha
cmp
mov
cwde
bound
or
cmp
mov
cmp
mov
outs
rcl
lods
popa
das
or
pop
xor
mov
sbb
dec
add
pop
stos
push
mov
loop
daa
loope
cmp
ds
nop
test
mov
test
cmps
sub
sub
(bad)
mov
mov
and
cmp
xor
sub
xchg
jle
push
inc
sub
pop
cs
inc
mov
sbb
mov
bnd
loopne
sbb
xchg
bound
xchg
jb
rcl
sbb
push
sbb
scas
xchg
mov
pop
jmp
push
out
(bad)
(bad)
retf
pop
pop
add
pop
and
cmps
xor
shl
mov
(bad)
mov
sbb
xchg
out
inc
sbb
push
sbb
sbb
cmp
out
xchg
xchg
es
and
mov
enter
push
(bad)
add
in
mov
xchg
and
aas
push
neg
test
sub
js
cmp
into
add
jnp
xchg
xchg
mov
mov
dec
mov
sub
retf
and
rcr
(bad)
xchg
inc
imul
je
inc
mov
add
test
mov
xor
or
loope
dec
inc
call
(bad)
push
push
sbb
les
push
jecxz
lods
or
cmps
adc
pop
loopne
or
shr
sub
outs
mov
jne
and
or
dec
push
jle
xchg
or
add
or
fisubr
or
adc
push
sti
cmp
sbb
in
bound
xor
adc
imul
loopne
cs
pushf
add
dec
jmp
mov
sbb
fmul
arpl
push
cmp
stos
pop
push
lock
adc
add
xor
mov
push
mov
and
pusha
inc
jmp
or
fistp
sbb
xchg
scas
enter
imul
and
stos
push
pop
es
xchg
cmp
mov
jnp
dec
xor
jbe
lock
pusha
mov
add
fimul
adc
mov
or
add
ficom
pop
sbb
imul
mov
popa
mov
cwde
or
xor
dec
cli
shl
adc
retf
popa
jmp
dec
mov
data16
cli
pusha
popa
cmp
dec
call
fidivr
imul
out
inc
and
ss
push
xchg
mov
inc
out
xlat
dec
and
cmp
scas
xor
xor
out
cmps
push
rol
sar
rcr
sbb
xchg
dec
mov
push
ret
cli
inc
repnz
xlat
fsub
out
dec
fwait
sbb
pop
add
xlat
pop
mov
dec
cmp
inc
mov
pusha
jecxz
push
dec
sbb
inc
arpl
xor
inc
dec
dec
loop
cli
inc
inc
add
mov
out
fwait
sbb
sbb
fmul
jnp
cmp
cmp
or
and
xchg
ror
jo
call
push
out
sub
loopne
pop
lahf
push
ret
ss
or
xchg
push
push
push
dec
push
adc
cs
popa
sub
add
cmp
outs
arpl
jmp
inc
pushf
or
outs
add
pushf
jno
mov
clc
fimul
scas
push
xor
movs
cmps
outs
popf
ins
sub
jns
pop
inc
stos
retf
mov
push
dec
cli
pop
inc
and
xor
push
inc
les
mov
enter
add
add
adc
sbb
push
xchg
test
je
xchg
fimul
(bad)
rcr
movs
dec
test
cmp
shr
repz
or
retf
mov
mov
nop
daa
xlat
retf
sbb
cmp
sbb
mov
test
dec
jle
push
mov
call
fisub
cmp
push
ss
push
pop
popa
pop
out
loope
xchg
or
add
pop
or
mov
sbb
push
push
(bad)
sub
sub
mov
pusha
shr
(bad)
dec
sub
push
push
jp
jo
push
enter
add
and
cs
cmp
loopne
popf
inc
push
loope
mov
sahf
cs
sbb
xor
jbe
ret
enter
push
ror
scas
test
and
mov
sub
mov
out
ins
pusha
xchg
push
adc
jno
push
dec
addr16
aaa
push
or
call
(bad)
or
inc
test
cmovbe
jb
data16
push
js
dec
push
mov
cmp
xor
xchg
daa
add
dec
pop
mov
add
mov
bound
mov
xor
xchg
push
jmp
dec
or
mov
and
js
repnz
mov
jmp
adc
outs
test
jnp
cmc
sbb
cmps
(bad)
(bad)
pusha
cmps
lock
lsl
scas
mov
mov
push
dec
fdiv
push
ret
sub
cmp
mov
ds
jmp
mov
push
mov
mov
into
shl
and
ficomp
(bad)
fld
pop
ret
sbb
cs
or
add
sbb
(bad)
mov
js
js
ds
daa
add
push
into
inc
popf
and
mov
mov
out
dec
sbb
popf
mov
dec
(bad)
mov
xor
and
add
loop
cmps
mov
push
push
mov
and
sahf
sub
sbb
adc
outs
xchg
sbb
sbb
inc
sar
js
sub
inc
rcl
addr16
cvtdq2ps
mov
pusha
enter
and
mov
ret
mov
ret
jmp
(bad)
bound
and
pop
ins
jns
(bad)
cmps
pusha
fwait
adc
sbb
je
lock
mov
and
icebp
sub
nop
cmp
popa
imul
push
sbb
ret
js
out
retf
rcr
aam
ror
inc
and
(bad)
dec
push
(bad)
mov
mov
add
sbb
nop
push
add
int3
inc
sahf
ret
and
jb
bswap
add
push
sahf
shl
or
and
xor
push
bound
add
sbb
add
dec
jbe
js
ins
fsub
outs
push
add
mov
or
ficom
add
ficom
xchg
sbb
ror
sub
ret
inc
nop
add
ret
or
jnp
(bad)
rcl
and
aaa
clc
cs
enter
aas
cwde
and
repnz
cmp
ficom
ss
dec
pop
scas
mov
xchg
iret
and
rol
imul
bound
mov
data16
sbb
jp
call
arpl
and
jae
add
stos
rol
test
sub
xor
and
aaa
rol
or
push
movs
(bad)
inc
push
dec
mov
inc
add
jae
lock
push
cmp
mov
xchg
push
js
add
push
or
cmp
into
test
add
sbb
sbb
fcom
dec
push
call
out
add
loope
add
(bad)
pop
pop
dec
mov
xor
jns
cmp
out
push
xchg
mov
mov
popa
cmps
jmp
dec
out
sbb
icebp
mov
cli
mov
neg
cmp
add
dec
inc
xor
add
jle
sub
pushf
mul
cmps
sbb
jp
adc
dec
ss
ret
cmp
or
repnz
shl
mov
ficomp
add
mov
inc
add
fild
inc
lods
and
and
and
jo
mov
push
xor
jmp
scas
fisub
push
nop
xor
arpl
jp
mov
xchg
test
sub
or
jmp
jmp
mov
out
sbb
js
mov
add
inc
test
mov
pop
pop
push
scas
push
aaa
ss
cmps
jmp
mov
mov
outs
pop
xor
jo
mov
sahf
push
pushf
or
cmp
popf
push
pop
add
mov
out
or
in
mov
mov
mov
pop
jecxz
xchg
pop
scas
repnz
add
mov
sbb
or
mov
jle
xchg
inc
and
inc
add
mov
push
mov
inc
jmp
xchg
inc
cmp
sbb
sbb
xchg
(bad)
callw
adc
shl
mov
icebp
mov
add
rcl
ficom
sbb
sbb
jb
sbb
mov
not
mov
mov
popa
cli
sub
push
or
pushf
(bad)
call
jle
bnd
cwde
push
or
data16
adc
sub
xor
push
xor
mov
mov
call
sub
mov
popa
inc
cmp
jle
adc
popa
and
mov
xchg
aaa
mov
mov
out
outs
sbb
add
retf
add
push
or
(bad)
rcr
mov
xor
out
adc
mov
(bad)
dec
jo
pop
jle
pop
sub
xchg
inc
jns
ds
es
stos
pop
fidiv
push
and
in
mov
adc
jbe
mov
push
push
inc
sahf
test
(bad)
mov
out
push
and
jmp
jbe
and
mov
sbb
out
sbb
push
xor
push
mov
xor
out
outs
cmps
sbb
cmp
leavew
sub
push
sub
mov
and
or
imul
mov
xchg
out
inc
stos
inc
scas
push
dec
sbb
dec
fldpi
ss
sub
dec
ror
shl
aaa
ficomp
mov
sub
push
in
imul
loope
test
test
aas
cmp
aaa
(bad)
push
mov
repnz
add
sub
aaa
xchg
outs
jp
push
dec
loopne
pop
cli
pop
sub
add
stos
lock
xchg
cmp
and
or
cmp
jle
test
ror
push
sub
add
repz
icebp
xchg
out
mov
pop
ss
repnz
xor
mov
xlat
pop
rcl
push
sbb
cs
imul
pushf
lods
ret
ds
loop
mov
mov
add
push
pop
adc
scas
mov
sahf
cmp
call
mov
push
mov
movs
loopne
cmp
adc
jecxz
jl
das
jmp
xchg
loop
js
mov
xor
ds
js
(bad)
(bad)
data16
ins
fmul
ficom
mov
push
into
mov
int
mov
imul
loop
xor
mov
xchg
mov
dec
out
dec
pop
and
xchg
pop
push
xchg
mov
adc
push
mov
xor
pop
dec
add
xchg
add
cmp
into
ror
dec
add
out
add
test
mov
mov
cli
push
sbb
and
add
call
dec
mov
add
jb
fist
mov
mov
sbb
push
enter
scas
push
cmps
and
dec
jo
and
ret
mov
lahf
dec
mov
pop
ds
cmc
sbb
pop
out
inc
cmp
pop
dec
pop
push
outs
add
cmp
punpcklbw
jle
and
pop
adc
jb
xchg
mov
test
imul
or
pushf
and
sahf
inc
(bad)
sar
inc
mov
mov
lahf
dec
arpl
cmp
(bad)
add
(bad)
jecxz
mov
imul
(bad)
ss
es
fisubr
xchg
sahf
sbb
mov
push
lock
jae
jmp
dec
dec
inc
cli
cmp
add
or
dec
or
js
es
push
push
push
loopne
scas
push
rcr
rol
(bad)
jo
inc
xchg
push
ficomp
scas
push
mov
outs
out
xchg
lock
mov
data16
inc
mov
mov
push
sub
fs
sbb
pop
cmp
sub
push
or
ret
dec
loop
mov
cli
mov
mov
pop
cli
mov
add
pop
ds
adc
div
sbb
into
lahf
xor
mov
enter
ficom
pop
dec
clc
xchg
mov
xor
pop
jle
push
dec
mov
add
rcl
xchg
push
push
cli
(bad)
retf
inc
jb
ret
sbb
or
pop
adc
cmp
add
dec
xor
add
call
call
loop
mov
shl
mov
or
pop
cs
pushf
ins
ins
sub
jle
push
cs
push
ss
popa
div
test
lods
in
mov
inc
pop
loopne
inc
loop
imul
or
dec
push
or
es
(bad)
jmp
(bad)
aaa
mov
push
outs
in
dec
das
inc
(bad)
retf
mov
mov
nop
aad
fistp
xor
push
push
mov
shr
jae
repz
jmp
push
(bad)
pop
js
adc
mov
scas
push
pop
xor
mov
dec
arpl
mov
bswap
outs
rcr
pop
sbb
xchg
pop
add
mov
mov
loopne
cmp
pusha
(bad)
leave
ins
call
mov
mov
dec
mov
mov
xchg
outs
sbb
sbb
aaa
adc
cmp
ds
rcl
mov
cmps
jb
outs
loope
or
push
jo
mov
sub
out
cmp
sub
cwde
sbb
ret
cmp
inc
cmp
mov
call
clc
add
sbb
scas
sbb
jmp
dec
mov
popa
or
mov
add
(bad)
pop
add
xchg
call
fld
(bad)
(bad)
fisubr
add
sub
mov
pusha
xchg
xchg
xor
scas
mov
(bad)
call
adc
sbb
push
(bad)
adc
add
pop
mov
cmp
push
adc
pop
loop
xor
xchg
adc
sbb
cmp
test
adc
cli
xchg
push
and
stos
das
sbb
data16
pop
sbb
cmc
sub
into
mul
shr
inc
xchg
or
mov
mov
push
jns
daa
pop
into
dec
out
fcom
xchg
push
(bad)
out
mov
popa
cwde
push
mov
es
dec
call
into
or
shl
cs
push
das
ja
mov
js
lock
push
inc
ret
dec
outs
mov
adc
mov
sbb
addr16
ins
mov
rcl
jecxz
xor
mov
pslld
adc
or
cmp
dec
xor
xor
pop
add
pop
adc
xchg
retf
rcl
stos
push
(bad)
(bad)
jb
push
xor
xor
sahf
imul
and
daa
and
and
adc
pop
sbb
inc
cmp
ds
dec
cdq
push
mov
popa
push
mov
xor
push
cmps
and
mov
ds
test
scas
adc
sub
mov
xor
dec
into
ffreep
rol
push
push
repnz
prefetcht0
ret
test
mov
into
cdq
cmp
jmp
sub
cdq
mov
les
imul
cmp
scas
push
and
sti
push
jbe
mov
jge
cmp
dec
jns
jae
lock
add
out
push
retf
or
loopne
jb
adc
push
(bad)
pop
jmp
cmp
adc
push
(bad)
xchg
adc
dec
or
inc
adc
jbe
sub
push
cli
mov
ja
cmps
or
adc
xor
daa
add
mov
or
not
retf
push
pop
(bad)
bound
or
cmp
rol
cwde
jbe
jo
mov
jo
mov
repnz
das
sub
or
pop
dec
fisub
adc
mov
xchg
(bad)
sahf
out
mov
popa
add
mov
mov
adc
dec
or
sbb
sbb
rcr
ret
fiadd
(bad)
push
jnp
add
es
(bad)
cmp
adc
adc
(bad)
leave
inc
sub
sbb
cmp
or
scas
add
or
cmp
jbe
jne
mov
cmps
or
xor
(bad)
lods
or
dec
(bad)
sar
cs
xchg
int3
add
call
scas
push
adc
or
cs
(bad)
xchg
icebp
mov
adc
push
js
xchg
mov
das
pop
and
ret
rcr
ret
out
xchg
mov
and
(bad)
lock
rcr
out
inc
sbb
nop
pop
mov
mov
inc
or
push
sbb
xor
pusha
dec
xchg
mov
(bad)
xchg
popf
rcr
cmp
mov
push
push
xchg
xchg
fiadd
push
sbb
mov
cli
jle
rcl
sar
dec
(bad)
push
pop
add
imul
fsubr
popa
or
sbb
lock
adc
cmp
mov
pop
rol
add
sbb
or
sub
mov
shl
jmp
push
xchg
fbstp
loopne
loopne
or
popa
add
fcmovbe
adc
repnz
cmps
and
ror
add
adc
mov
sbb
outs
sbb
pusha
inc
or
push
ficomp
add
mov
scas
and
push
loope
imul
nop
xor
sub
sub
imul
jp
js
mov
jp
pusha
push
mov
fld
push
pop
or
loop
or
dec
adc
test
mov
pop
pop
mov
ins
jecxz
inc
es
es
dec
sub
outs
mov
xor
sbb
iret
push
loope
aam
mov
loopne
dec
inc
sbb
mov
mov
add
rcl
rol
mov
(bad)
push
add
and
push
data16
xlat
es
push
leave
sub
push
pop
retf
test
(bad)
es
add
loope
sbb
add
xchg
(bad)
fadd
jmp
mov
repnz
inc
xchg
lock
test
mov
sbb
retf
dec
cmp
(bad)
xchg
dec
or
lods
push
mov
out
adc
push
lock
into
mov
jne
stos
data16
fiadd
movs
add
push
mov
dec
xlat
push
cmp
and
int3
inc
or
xchg
pop
mov
mov
mov
xchg
sbb
xor
cmp
fimul
cmp
inc
inc
add
call
into
imul
mov
rcl
sahf
out
jb
or
xor
fmul
nop
xor
mov
sbb
clc
dec
sbb
das
out
pop
and
dec
jns
mov
or
add
adc
mov
test
jo
or
ret
(bad)
inc
jb
add
mov
setle
adc
inc
and
xchg
adc
inc
push
push
mov
fst
mov
lahf
inc
jp
adc
loopne
inc
jo
imul
cmp
jmp
cmp
pop
pop
sahf
push
pop
(bad)
adc
push
sub
add
xchg
sbb
pop
cs
lods
inc
js
push
push
xor
jbe
icebp
adc
xchg
outs
dec
xchg
fs
and
scas
sahf
or
xacquire
sbb
outs
sar
ds
loopne
inc
pop
push
and
xor
add
repnz
data16
cmp
rol
sbb
out
movs
xchg
push
adc
cwde
or
pop
outs
push
into
(bad)
retf
jb
cmp
retf
mov
xchg
mov
lahf
xchg
sbb
jbe
add
call
js
mov
movs
jbe
nop
jno
sbb
xor
add
lods
movs
inc
out
pushf
test
rol
inc
mov
inc
sub
lock
aam
ins
jp
mov
xlat
sbb
lock
repnz
mov
ficom
add
add
pop
xor
call
or
sub
push
retf
inc
add
inc
add
iret
sysenter
push
xor
jle
aam
xchg
(bad)
scas
mov
pop
dec
ficomp
or
xor
xchg
push
cs
ficomp
cmovnp
outs
ret
dec
xor
clc
pop
add
xor
aaa
test
cmp
aaa
push
mov
retf
sbb
mov
mov
or
or
(bad)
out
xchg
lea
add
xchg
sub
and
ror
fiadd
outs
mov
ror
pop
pusha
add
jbe
js
icebp
xchg
repnz
push
cmp
mov
pusha
mov
inc
sub
lods
or
push
retf
daa
sbb
outs
fcomp
jbe
inc
xchg
push
int3
fwait
sub
and
dec
xchg
and
stos
or
push
stos
repnz
and
xchg
add
out
ins
sub
add
xor
mov
and
into
out
add
xchg
out
retf
pop
bound
inc
xchg
gs
(bad)
sbb
xor
or
add
pop
add
push
and
mov
mov
arpl
cmp
mov
sbb
push
mov
sbb
mov
ss
jb
call
(bad)
cs
loopne
xchg
imul
sti
jo
or
push
stos
cli
inc
and
call
xor
mov
inc
push
fsub
inc
push
or
pop
inc
movs
mov
rol
jp
cmp
test
mov
and
mov
imul
arpl
cs
sahf
adc
inc
loope
dec
leave
or
push
(bad)
call
add
adc
xchg
mov
inc
add
arpl
ds
int3
add
sahf
push
push
bound
mov
xor
pop
push
mov
jbe
dec
or
loop
ss
rol
rol
aam
jle
push
mov
mov
inc
push
nop
xchg
and
xor
imul
and
sbb
into
rcr
pop
cmp
pop
test
adc
add
push
hlt
dec
fild
dec
loop
pusha
inc
sbb
xchg
ins
es
jp
leave
mov
or
sbb
push
ficomp
cmp
mov
add
ret
nop
xchg
and
xchg
ret
jmp
xchg
xchg
jle
ss
mov
out
dec
and
inc
dec
out
mov
xchg
out
fadd
into
mov
jo
into
sbb
mov
xor
sub
not
or
lods
mov
cdq
jb
and
daa
hlt
add
outs
add
leave
inc
xchg
div
aam
or
stos
test
out
call
pusha
cwde
cmps
mov
rcr
mov
cli
and
ror
cmps
mov
imul
push
sahf
push
add
mov
nop
mov
push
fisubr
stos
fisub
xchg
mov
xor
mov
pop
push
pusha
inc
inc
ins
pop
inc
dec
adc
ret
push
ja
mov
or
sbb
adc
(bad)
es
out
fld
jp
or
stos
adc
ror
or
pusha
and
mov
xor
fsubr
push
or
mov
xchg
ss
mov
mov
pop
and
ja
lds
out
inc
jp
daa
dec
popa
call
inc
aam
add
mov
or
sbb
xchg
and
cmp
adc
pop
(bad)
cmc
add
dec
call
push
inc
sub
add
adc
cmp
ins
enter
or
push
lahf
pop
cwde
jne
(bad)
(bad)
mov
out
and
push
jmp
and
mov
inc
push
popa
push
mov
outs
or
ror
or
sub
jg
lahf
arpl
aaa
jmp
and
mov
aaa
pop
mov
inc
imul
pop
xchg
mov
(bad)
cmps
cmp
ss
sbb
inc
ret
retf
dec
rcr
pop
lahf
sbb
sub
out
push
adc
outs
dec
imul
dec
data16
dec
add
mov
push
mov
sbb
aad
xor
ds
mov
sahf
jb
cmp
retf
sbb
or
imul
cmp
pop
xchg
mov
(bad)
push
fcomp
dec
cmps
push
ja
fidivr
js
mov
(bad)
rcr
sbb
add
ror
test
data16
call
push
add
scas
add
dec
fcomp
push
outs
pop
push
jp
movs
mov
inc
fidivr
mov
div
adc
adc
imul
loop
cli
loop
ret
inc
popf
call
ja
jp
pop
ror
add
ret
xchg
inc
push
lock
adc
jno
jne
pop
retf
and
cmp
(bad)
add
or
imul
addr16
mul
xchg
mov
data16
pop
sbb
retf
enter
sub
inc
or
sub
call
xchg
mov
loopne
enter
mov
pushf
ret
(bad)
cli
xchg
lea
test
ret
fimul
mov
movs
out
sub
dec
ins
jp
add
arpl
ret
pop
and
icebp
add
push
adc
mov
add
outs
and
retf
test
or
sbb
sbb
add
inc
dec
add
cmps
pop
mov
xchg
add
inc
sbb
loopne
add
mov
push
shl
push
sti
icebp
xor
cmp
mov
adc
xor
adc
add
test
retf
dec
xor
sub
test
sub
pop
adc
jp
add
mov
push
pop
xchg
lods
add
inc
adc
lods
xchg
movs
lahf
repnz
cmp
or
jle
(bad)
xchg
sbb
add
lahf
mov
and
jecxz
jo
dec
push
(bad)
cmp
dec
push
jp
mov
push
cmp
div
jne
sbb
mov
test
aaa
mov
bound
mov
mov
ja
js
push
jbe
out
push
ficomp
jmp
pop
add
dec
inc
or
or
jp
je
ret
outs
fidiv
sbb
out
out
rcr
stos
add
adc
outs
ss
or
cmp
retf
js
loop
mov
retf
das
adc
dec
(bad)
sbb
pusha
and
push
push
xchg
push
pusha
push
stos
xor
xor
or
(bad)
lock
sar
pop
sbb
jmp
(bad)
push
ret
movs
(bad)
adc
ds
or
adc
imul
retf
inc
push
clc
addr16
out
mov
je
mov
xchg
push
or
gs
sub
fstp
pusha
sub
(bad)
jmp
mov
mov
(bad)
adc
xor
dec
test
and
out
fcmovb
sbb
dec
dec
or
mov
adc
inc
test
xchg
pop
stos
mov
pop
push
repnz
(bad)
mov
ret
mov
inc
and
dec
jle
mov
inc
jo
sbb
push
jp
jno
test
ins
cs
push
xchg
push
mov
arpl
xchg
sti
ds
das
inc
js
push
sub
test
add
bound
push
push
mov
xchg
pop
push
(bad)
ds
add
and
or
dec
xchg
fdivr
data16
xor
pushf
sahf
les
jmp
mov
cmp
sub
popa
inc
and
jmp
into
ret
pushf
push
scas
inc
mov
call
pop
js
rcl
cwde
mov
sbb
loopne
(bad)
adc
dec
pop
dec
les
outs
cli
push
sub
adc
out
jp
mov
loop
dec
enter
mul
jmp
(bad)
movs
xchg
pop
xchg
loop
sub
mov
push
pusha
arpl
sub
popf
jnp
ror
jb
mov
das
pop
out
and
xor
inc
dec
xor
dec
(bad)
call
cmp
jnp
mov
outs
pop
pop
scas
mov
repnz
rol
adc
pop
pop
mov
and
push
and
adc
sbb
dec
adc
push
ret
test
push
mov
and
jo
gs
mov
pop
push
xchg
xor
mov
dec
add
cmp
mov
loopne
xor
dec
enter
outs
xchg
loopne
add
or
lods
inc
mov
or
outs
jb
lea
or
call
push
sahf
call
jbe
xor
push
push
daa
div
cmp
lods
and
scas
xor
sbb
inc
pop
ret
pop
push
xchg
sbb
push
mov
ret
sbb
pop
ds
retf
in
and
dec
(bad)
outs
jmp
dec
scas
pop
enter
loop
sub
mov
movs
movs
loope
mov
popf
mov
dec
mulps
dec
shr
pusha
daa
mov
push
cs
xchg
adc
cwde
sub
sbb
outs
sbb
neg
push
loopne
cdq
jo
and
mov
add
push
test
mov
push
and
dec
xchg
enter
sub
cwde
mov
popa
pop
(bad)
out
rol
loopne
(bad)
mov
adc
fsub
das
pop
das
mov
or
push
cwde
mov
push
push
es
cmp
retf
ficom
mov
sub
dec
inc
sahf
push
sbb
ss
mov
mov
scas
or
push
shr
and
movs
xchg
or
sbb
test
xchg
pop
xlat
and
scas
and
jo
dec
pop
xchg
or
mov
push
into
in
or
sub
jecxz
adc
inc
ret
adc
jb
mov
add
mov
ja
mov
inc
push
pop
xor
jmp
or
push
xor
(bad)
adc
adc
dec
cmp
xchg
mov
sbb
or
jbe
test
jno
ret
pop
ins
sub
pop
test
jnp
cs
dec
inc
ins
bound
dec
mov
adc
sti
rcl
arpl
mov
repnz
loope
adc
pop
jp
push
xor
dec
daa
dec
(bad)
into
js
add
and
lods
sub
dec
lods
xor
mov
xchg
dec
add
or
and
xchg
data16
loope
loop
call
call
and
xchg
or
push
int3
or
pusha
or
sbb
cs
add
cmp
adc
sbb
pop
or
jle
call
mov
pop
sub
xchg
icebp
outs
mov
xor
pop
jo
mov
cmp
add
xchg
jmp
dec
sbb
adc
jecxz
mov
push
xchg
xor
add
sub
adc
push
(bad)
inc
inc
loopne
sbb
xor
dec
add
jecxz
and
ret
sbb
xchg
cmp
xor
fsubr
es
call
jb
adc
inc
sahf
cli
mov
dec
jmp
lock
(bad)
push
cmp
dec
out
call
into
es
push
in
ds
cmp
outs
sahf
push
add
xchg
ficom
mov
clc
or
mov
cmp
cs
or
mov
xchg
add
mov
and
popf
(bad)
mov
or
xchg
sbb
jb
pusha
(bad)
xor
pushf
and
mov
xchg
(bad)
xchg
aam
(bad)
(bad)
inc
mov
pusha
arpl
push
and
stos
pop
icebp
mov
adc
or
or
pop
push
cwde
push
inc
add
and
add
ss
xchg
push
inc
mov
jo
icebp
jle
into
or
jle
add
sub
sbb
ds
push
mov
jo
add
adc
in
call
inc
data16
rol
shr
fcom
sbb
push
sub
xchg
push
shl
push
sbb
rol
mov
pop
xlat
bound
leave
js
mov
inc
mov
scas
jo
outs
fimul
adc
mov
fwait
add
(bad)
sbb
into
jbe
mov
adc
repnz
imul
rcr
inc
js
movs
adc
mov
loopne
outs
or
bound
add
and
div
scas
popa
dec
sub
and
xchg
repnz
sbb
inc
sbb
add
pop
inc
cwde
xor
mov
ins
add
ret
movs
xchg
mov
adc
jbe
imul
push
imul
sbb
or
bound
ret
fucomp
dec
inc
repnz
dec
pop
xor
test
pop
cmp
cs
stos
ror
outs
xchg
mov
xchg
rcl
and
inc
cmps
sub
rcr
push
js
(bad)
js
punpckhwd
xchg
xor
mov
ret
nop
cmp
pop
push
pop
mov
or
enter
sub
pusha
push
test
adc
(bad)
mov
cmp
jns
xchg
cmps
pop
dec
push
push
data16
xor
mov
push
jp
ret
pop
dec
push
mov
(bad)
push
mov
jmp
mov
pushf
sub
cmp
jp
scas
or
retf
jp
inc
sub
dec
out
jmp
add
add
jb
scas
cmp
sbb
sahf
call
and
jnp
xor
loop
sub
mov
shr
cli
ja
in
jecxz
push
xor
aaa
add
mov
cmp
mov
das
cli
ds
sbb
retf
fidiv
sahf
adc
inc
in
mov
sbb
inc
sbb
fidivr
pop
mov
loop
stos
es
(bad)
ss
retf
sbb
iret
sbb
loop
aam
and
and
(bad)
clc
je
loope
das
cli
or
(bad)
sub
retf
xchg
inc
add
or
call
data16
xor
xor
xchg
xchg
ror
fwait
push
out
(bad)
fst
inc
jge
fwait
sti
out
adc
jb
sahf
sbb
daa
and
and
mov
ror
cmp
jmp
or
aam
dec
or
movs
xchg
and
rcr
pop
adc
call
daa
outs
out
arpl
lea
into
sub
sub
mov
popa
repnz
arpl
push
pop
sub
push
outs
ficomp
sar
(bad)
and
or
inc
pop
(bad)
ror
inc
nop
inc
(bad)
mov
sbb
shr
(bad)
fadd
add
(bad)
adc
or
fidivr
push
outs
aam
sub
fidiv
(bad)
stos
movs
in
(bad)
cmp
jo
stos
cmc
mov
jbe
xor
lods
xchg
sahf
cmps
xor
ror
xchg
cmp
jmp
sbb
mov
sbb
jmp
fadd
or
mov
cs
inc
js
(bad)
into
rol
add
jnp
rol
adc
es
push
mov
and
push
jecxz
adc
xor
sbb
inc
fwait
mov
sub
mov
dec
sbb
push
xor
pop
arpl
movs
cs
cmp
sbb
mov
or
mov
outs
neg
(bad)
xchg
mov
fidiv
adc
fidivr
into
xchg
or
aaa
aaa
inc
mov
mov
dec
inc
inc
cmps
repnz
cmp
rol
sahf
mov
fcmovb
xchg
stos
cmp
js
push
mov
mov
pop
add
inc
rcl
loop
xchg
push
les
adc
add
loopne
xchg
cmp
in
dec
ss
mov
call
and
sub
cmp
cli
adc
faddp
dec
and
sub
dec
dec
and
sub
sbb
cmps
mov
jle
add
ror
mov
cli
outs
rcl
and
movs
mov
mov
jmp
enter
pusha
or
into
rol
dec
push
inc
sar
xchg
mov
lock
test
fiadd
xchg
adc
pop
mov
imul
xchg
lods
dec
fdiv
mul
jb
xor
dec
fst
mov
cmp
jo
sbb
ror
stos
mov
xor
mov
add
fsubrp
fisub
out
inc
push
mov
push
add
aaa
mov
push
outs
and
add
push
xchg
aad
mov
inc
add
into
stos
and
adc
fs
push
push
aam
sbb
inc
jle
push
pop
cmps
cmps
push
outs
bound
mov
inc
add
or
sbb
lods
inc
lss
dec
cwde
fidiv
mov
out
(bad)
xchg
and
mov
lock
pop
repnz
jo
push
pushf
dec
mov
gs
cs
(bad)
sahf
mov
ret
jb
inc
mov
cs
xchg
lea
fcmovnb
repnz
dec
(bad)
(bad)
xor
jle
dec
bound
mov
add
sbb
ror
push
(bad)
in
add
mov
push
xchg
xor
sbb
test
jb
sahf
dec
cmp
je
outs
call
cmp
call
add
ss
das
and
pop
xor
mov
mov
mov
push
push
xchg
add
sub
xor
je
push
cmp
pop
or
loop
js
sar
ficom
push
xchg
stos
pusha
and
(bad)
jo
adc
es
loop
(bad)
xor
bound
xchg
fsub
add
cli
add
dec
daa
(bad)
ds
push
sub
cli
es
jo
loop
pop
xchg
or
je
jle
out
sbb
mov
pop
(bad)
sbb
loop
push
repnz
sbb
jge
push
loop
pop
pop
pop
push
nop
(bad)
js
lods
mov
pop
adc
das
mov
pmaxsw
add
shl
test
jo
lea
xchg
retf
push
push
add
add
or
add
push
arpl
fidiv
icebp
and
mov
jle
jp
retf
call
inc
sbb
push
adc
adc
xchg
(bad)
pop
sbb
sahf
lea
push
aam
push
enter
jp
into
ror
dec
daa
call
into
lea
sub
inc
jmp
out
sub
sbb
dec
stos
arpl
ret
push
cmp
out
ins
add
fisubr
and
retf
scas
cmp
mov
mov
(bad)
cmp
lea
add
repz
rol
xchg
(bad)
mov
mov
or
or
jle
jne
cmp
out
and
bound
add
xor
loop
xchg
inc
(bad)
and
retf
sbb
es
xchg
sbb
push
arpl
push
retf
outs
test
or
pop
jmp
jnp
adc
push
rcr
pop
xor
outs
sub
es
cmp
ret
data16
sub
arpl
cmps
jp
push
add
call
aam
xchg
les
ds
or
add
push
sub
pushf
pusha
shr
dec
stos
jle
ins
dec
or
sti
jne
test
adc
(bad)
sub
cld
adc
add
xchg
and
dec
mov
push
call
outs
mov
push
(bad)
loope
loopne
cs
or
scas
pusha
cmps
retf
in
dec
imul
(bad)
fcmovb
pop
dec
xchg
add
mov
call
pop
xlat
popa
jno
xchg
enter
stos
xor
jo
mov
or
sub
mov
sbb
or
xchg
mov
sub
xor
dec
ss
pushf
jg
and
rcl
xchg
pop
push
jg
into
add
xor
adc
sub
jne
test
push
mov
inc
out
hlt
mov
inc
test
pusha
add
xor
adc
dec
fwait
sahf
pop
pop
mov
add
mov
out
repnz
xor
ss
xchg
dec
inc
invd
fwait
rol
dec
rol
daa
push
pop
xchg
not
sbb
pop
xor
loopne
push
bound
xchg
xor
dec
enter
test
retf
xchg
jnp
dec
cs
sbb
into
scas
mov
ret
cmp
call
push
xchg
push
arpl
dec
jbe
adc
push
dec
or
cli
pop
jbe
fisubr
xchg
nop
cmp
xchg
test
scas
cmp
nop
test
push
xchg
mov
outs
sbb
mov
add
ret
mov
mov
call
dec
pop
sbb
add
rcr
jge
mov
add
push
add
nop
push
dec
ds
and
jbe
jbe
sbb
inc
mov
int3
(bad)
or
xor
pop
outs
jmp
rol
add
push
mov
adc
cs
sbb
out
jb
add
adc
mov
push
jmp
into
push
cs
popa
xchg
mov
push
add
push
inc
dec
adc
sub
pop
inc
jmp
dec
imul
sub
push
push
push
sbb
fimul
int3
(bad)
stos
xor
xor
and
xor
push
not
data16
out
outs
arpl
dec
add
das
sbb
push
lea
add
popa
and
pushf
mov
test
lods
movs
(bad)
shl
push
xor
sbb
jb
inc
out
cwde
sbb
mov
push
sub
inc
or
loop
add
retf
dec
push
ds
sub
and
pop
ret
push
xchg
or
ret
sbb
mov
test
sbb
cmc
inc
ds
movs
xchg
aam
cs
fwait
sar
xor
xor
add
jno
jae
xor
pusha
repnz
jbe
push
push
inc
daa
cmp
xor
add
mov
fidiv
push
rol
idiv
repnz
rol
cwde
cmp
pop
mov
push
mov
lock
and
xchg
sbb
leave
ret
pop
xchg
sbb
enter
mov
inc
and
rcl
adc
xor
lea
loop
mov
pusha
imul
add
push
rol
sbb
mov
out
rcr
rcl
and
stos
ret
fdiv
inc
sar
adc
xchg
add
or
sub
jnp
or
mov
push
(bad)
mov
into
pop
xor
or
add
fimul
dec
inc
addr16
push
xchg
call
jno
push
cli
xchg
xor
shl
jle
or
xchg
inc
jmp
dec
cs
xchg
scas
and
ds
add
bound
pop
sub
or
mov
inc
pop
cmps
mov
inc
add
lahf
mov
pop
inc
sbb
xchg
loop
mov
add
adc
inc
jae
adc
mov
pop
nop
pop
mov
bound
jle
les
push
inc
loop
pop
or
into
(bad)
or
and
xor
ja
les
xchg
mov
pop
rcr
jmp
jp
add
pop
sahf
sub
test
retf
cmp
arpl
adc
sub
scas
js
add
and
sahf
jb
cmp
rol
ss
or
mov
pop
shr
shl
xchg
out
fs
es
call
into
mov
mov
pop
push
es
scas
test
mov
ss
sbb
pushf
mov
push
loop
sbb
(bad)
mov
fidiv
movs
sbb
push
push
sbb
or
movs
ret
dec
mov
xor
cmps
test
push
popa
popa
cmp
jbe
dec
add
sbb
jbe
mov
push
sbb
jb
loop
and
cmps
retf
add
mov
arpl
adc
pusha
outs
jmp
ret
imul
outs
cmp
push
and
sbb
adc
xchg
sub
cwde
cmp
ss
xor
xor
mov
xchg
inc
pop
inc
shr
ss
pushf
movs
push
repz
mov
popf
jne
pop
outs
bound
dec
xchg
scas
or
lods
push
or
addr16
rol
outs
cmp
(bad)
sbb
outs
inc
es
lock
loop
dec
xchg
mov
fiadd
push
push
jae
fld
xchg
jo
mov
cmp
add
cmc
loopne
cmp
ret
jae
mov
mov
xor
cs
add
dec
sahf
mov
sti
xor
sbb
push
pop
push
push
xor
sbb
ds
push
nop
xor
mov
and
jmp
push
or
add
in
(bad)
ret
add
add
dec
push
sbb
and
stos
xor
mov
neg
sub
loop
and
sub
cmps
xchg
push
push
cs
sbb
sub
call
aas
test
(bad)
inc
shl
rcl
pop
cli
fidivr
and
out
retf
adc
jg
dec
push
and
mov
into
push
fsub
pop
nop
les
mov
xchg
pop
gs
push
sbb
and
pop
push
pop
push
das
repnz
sbb
outs
pop
je
pushf
sub
ss
ds
or
mov
add
sub
add
jmp
cli
shl
xor
dec
inc
mov
or
push
nop
dec
add
cmps
into
pusha
rcl
add
test
add
lea
call
push
dec
mov
add
(bad)
sahf
mov
jp
js
fiadd
dec
loop
retf
xor
mov
nop
inc
sub
jae
sub
popa
dec
jp
mov
dec
sbb
(bad)
mov
add
jl
push
or
adc
mov
add
fdivrp
xor
push
pop
jbe
adc
bound
rcr
sbb
loope
or
and
lods
pusha
(bad)
(bad)
adc
dec
mov
add
mov
dec
es
lods
out
and
(bad)
fiadd
test
dec
data16
push
xchg
ins
add
push
mov
push
dec
pop
push
les
add
xor
jo
push
mov
add
(bad)
test
mov
ss
dec
add
sbb
ds
mov
lods
mov
(bad)
cmp
mov
inc
or
add
nop
mov
inc
push
jmp
push
cmovg
mov
sbb
(bad)
mov
cmp
adc
(bad)
rcl
or
push
push
mov
and
mov
das
add
inc
inc
fisubr
adc
bound
sbb
inc
or
out
dec
test
jp
dec
cmp
adc
jp
sbb
push
push
push
and
bound
or
dec
cmp
js
aas
ds
ret
jbe
test
push
sub
dec
and
inc
addr16
das
sbb
lea
cmps
rcl
push
xor
inc
jno
push
sub
or
xchg
jo
(bad)
repnz
mov
gs
gs
mov
inc
loop
cli
out
xor
xchg
mov
(bad)
test
aaa
lods
imul
sbb
xchg
rcr
bound
pop
sbb
push
sbb
ret
xchg
and
pop
int3
mov
es
adc
js
data16
mov
je
add
mov
mov
(bad)
jp
inc
mov
inc
push
cmp
push
push
pop
jp
test
dec
push
shr
fisubr
xchg
pop
xchg
faddp
cmc
mov
jmp
adc
pop
cmp
jo
(bad)
sub
and
popf
fs
cwde
addr16
mov
push
outs
jp
rol
bnd
jne
push
mov
mov
(bad)
xor
sub
call
scas
sbb
pusha
and
arpl
sub
sti
mov
div
loopne
jle
jo
adc
or
mov
nop
jle
outs
and
xchg
push
loopne
mov
dec
mov
lahf
add
inc
jb
jb
add
outs
ret
push
pop
xchg
and
lahf
mov
retf
nop
xor
jecxz
adc
inc
and
dec
dec
or
fwait
pusha
lods
lds
push
call
out
out
pop
xor
mov
jp
mov
jle
ror
sbb
push
aaa
sbb
inc
scas
sbb
add
adc
pop
and
pop
jmp
and
pop
xor
dec
sbb
int3
xor
or
(bad)
ret
rcr
out
inc
jmp
and
jp
icebp
ss
add
sub
pop
xchg
jbe
jb
and
retf
mov
inc
not
inc
mov
xchg
push
jb
jns
inc
or
mov
outs
bound
add
hlt
(bad)
inc
pop
shl
call
pop
xchg
or
cmp
call
inc
pusha
stos
cs
jo
adc
loop
adc
and
push
inc
and
mov
add
dec
mov
add
adc
out
add
rol
aam
mov
pop
sbb
mov
rcr
repnz
ror
ds
xor
dec
es
retf
ret
mov
add
mov
mov
xor
das
sbb
sbb
add
push
push
imul
dec
sub
mov
or
or
lock
add
pop
call
mov
imul
mov
xor
adc
es
sbb
push
imul
sub
inc
rol
xchg
and
jp
ror
sbb
xor
dec
or
sub
or
or
xchg
sbb
and
or
out
mov
popa
dec
mov
lea
sub
ss
shl
(bad)
jle
or
pop
inc
fisub
push
or
jo
push
or
inc
pop
fisub
pop
in
dec
push
mov
push
loopne
xor
xor
test
(bad)
push
ret
shl
sbb
mov
into
outs
jo
push
mov
jg
push
mov
into
jg
push
pop
popf
(bad)
ss
push
sbb
or
cs
cmp
aaa
xchg
cmp
or
mov
xchg
pop
adc
fild
push
shl
out
into
and
xchg
push
mov
into
xchg
sbb
mov
add
je
ds
pusha
inc
push
mov
push
inc
test
xchg
xor
rol
xchg
scas
sub
cmp
imul
jmp
mov
or
dec
jg
push
xchg
dec
add
xchg
call
add
retf
jge
daa
mov
sub
pop
loopne
fild
push
sbb
inc
outs
mov
dec
dec
ficomp
cmps
loope
pop
shr
add
data16
sub
in
mov
sar
cmp
xor
sub
mov
lods
dec
(bad)
into
scas
and
popa
inc
jmp
dec
ds
imul
mov
push
and
adc
pusha
cmps
sahf
das
push
xchg
and
mov
push
sbb
dec
xor
data16
and
adc
mov
sbb
or
push
mov
cli
xor
repnz
(bad)
mov
int3
shl
inc
inc
mov
scas
xchg
test
xor
ret
jp
mov
icebp
fisub
add
add
sub
(bad)
(bad)
scas
push
movs
push
add
jp
and
inc
or
mov
inc
xor
inc
add
mov
xchg
push
inc
mov
rol
xchg
and
adc
leave
mov
loopne
ss
jb
out
or
ss
pusha
pop
shl
push
jle
dec
scas
sub
xor
jmp
retf
pop
outs
loope
jb
js
out
sbb
jae
repz
inc
sahf
lock
pushf
add
and
xor
out
and
cmp
cli
fs
cmp
iret
mov
enter
shl
xchg
les
data16
mov
sahf
ss
cli
fidiv
sbb
push
mov
dec
cwde
out
pop
mov
mov
add
push
mov
mov
das
push
dec
ficomp
adc
xchg
cmc
mov
sub
mov
dec
push
sbb
mov
sbb
xor
pop
ret
mov
xchg
cmp
jb
pop
adc
inc
sub
jp
call
push
jecxz
or
sar
jp
mov
jp
or
popa
jl
out
cwde
sahf
dec
rol
sub
retfw
ret
push
and
mov
out
push
jle
xchg
pusha
inc
sbb
cli
inc
inc
adc
inc
pop
ds
pop
js
fidiv
cmp
pusha
add
xchg
js
cmp
fimul
pop
pop
pop
(bad)
ds
mov
jno
dec
dec
ds
cmp
cmp
cmp
fbld
mov
jnp
bound
xchg
push
cmp
xchg
icebp
into
mov
sbb
cmc
adc
sbb
xchg
sub
fstp
push
(bad)
mov
push
and
and
cwde
push
sbb
fs
lock
arpl
mov
test
or
cmp
xor
(bad)
rol
mov
and
mov
sub
push
lock
xor
call
cmp
dec
scas
mov
mov
and
(bad)
jle
sub
call
or
jp
inc
pusha
or
fisttp
gs
sbb
push
rol
dec
adc
or
xor
push
xor
test
dec
sub
mov
fsubp
add
dec
jle
inc
ins
fadd
xor
fldcw
ins
add
scas
push
push
dec
inc
xor
xchg
inc
add
cmps
out
mov
pop
jp
add
call
mov
jp
dec
push
data16
mov
retf
adc
sahf
stos
repnz
push
icebp
xchg
stos
fiadd
jo
out
loop
mov
movs
mov
sti
mov
data16
dec
outs
add
out
add
or
es
jp
add
out
inc
xor
xor
into
stos
add
xchg
mov
arpl
sbb
ss
pop
adc
sbb
push
mov
push
add
xor
mov
pop
popa
add
popa
pushf
je
sub
imul
repnz
nop
xor
mov
push
pop
add
outs
jle
and
js
cli
je
bound
dec
(bad)
xor
sbb
scas
cmp
into
push
sahf
push
nop
jg
sbb
loop
mov
data16
xchg
push
cmps
mov
add
sbb
fs
cli
cs
ss
xor
xchg
(bad)
mov
(bad)
jecxz
xor
into
add
imul
adc
mov
out
adc
inc
cmp
dec
out
xor
mov
jno
mov
jecxz
xchg
inc
dec
xor
pop
fimul
fiadd
adc
mov
mov
push
cwde
mov
call
push
iret
sbb
cmps
mov
ds
xor
mov
ss
jp
sub
push
ss
push
fld
mov
push
sahf
cs
xor
push
sub
aas
sbb
test
mov
mov
rol
inc
push
mov
xor
popa
mov
leave
jmp
mov
adc
jmp
dec
js
fist
cmp
sbb
or
nop
ret
and
bound
scas
mul
je
loop
into
out
jb
les
daa
(bad)
xor
es
jle
repz
stos
pop
xchg
xchg
dec
pop
ror
inc
ja
je
mov
out
sbb
mov
push
mov
ror
inc
call
adc
es
add
inc
and
mov
jno
retf
dec
inc
pop
aas
mov
pusha
dec
pusha
pusha
ret
imul
into
mov
push
xchg
push
das
adc
arpl
sub
dec
leave
ret
(bad)
lods
jo
and
pop
add
mov
jb
cmp
add
mov
ds
cmp
xchg
loope
inc
cs
pop
push
(bad)
(bad)
leave
clc
xor
cs
mov
ret
sbb
push
cmc
cmp
repnz
cmp
pop
ds
fs
adc
or
mov
cmp
outs
dec
ds
nop
pop
pop
retf
mov
mov
sahf
cmp
inc
jne
movs
cmp
push
jmp
ror
pop
and
dec
inc
pop
dec
pushf
push
xchg
lods
push
inc
or
ror
adc
inc
nop
daa
push
scas
mov
add
fmul
add
xchg
call
(bad)
cli
adc
mov
jo
jg
xchg
jno
out
sbb
add
and
jp
ror
cmps
out
xor
and
sbb
test
dec
fbstp
ret
sar
push
xor
test
ror
mov
mov
(bad)
push
fsubp
rol
dec
bound
outs
jno
sar
fsub
call
fisub
cmp
shr
test
ror
sbb
mov
mov
sar
ror
stos
mov
jmp
pop
jl
sbb
mov
add
stos
fidiv
mov
cmp
xchg
push
mov
mov
xor
push
xor
pushf
mov
push
push
dec
cmp
xchg
cmp
punpcklbw
push
cdq
mov
outs
and
shl
adc
mov
out
push
stos
and
jg
test
or
pop
jnp
mov
dec
mov
arpl
arpl
mov
shr
add
mov
adc
lods
test
and
dec
push
or
jle
push
push
loope
and
sub
mov
cmp
pusha
pop
js
cs
mov
cmp
pop
mov
push
into
rol
jb
xchg
arpl
leave
cmp
inc
fistp
or
imul
mov
call
push
ret
inc
xor
sbb
popa
add
and
sbb
popa
ins
jmp
fbld
jle
mov
cmps
mov
jo
or
out
mov
rcl
out
cmp
and
fwait
das
xor
xchg
pop
push
sbb
(bad)
mov
ret
or
xchg
(bad)
cli
nop/reserved
sar
rcr
xchg
adc
inc
loop
xlat
xchg
test
cmp
scas
outs
into
sahf
or
(bad)
xchg
or
pusha
sar
fimul
sub
add
xor
sub
dec
mov
xlat
rol
stos
mov
xchg
push
cmc
les
xchg
or
sbb
xchg
add
popa
pop
mov
aaa
jb
je
popf
mov
dec
psubq
add
xor
data16
or
dec
adc
push
cmps
xchg
sbb
fmulp
jbe
mov
out
push
dec
xor
sbb
fisub
fcmovb
cmp
inc
xor
jp
mov
sahf
xchg
pop
fist
xchg
dec
inc
adc
pop
and
adc
adc
scas
inc
into
adc
(bad)
sbb
cs
cwde
idiv
push
mov
or
jle
xor
jb
or
mov
push
cs
(bad)
mov
lods
rcl
and
outs
mov
dec
sahf
add
aas
pop
pop
lea
push
sbb
call
adc
lea
jne
mov
call
test
test
xor
popa
out
add
push
ret
mov
adc
and
push
push
lods
mov
test
data16
xchg
sub
cmp
test
shr
jmp
dec
sbb
(bad)
push
push
daa
dec
cs
loop
push
add
sbb
dec
cmp
jecxz
imul
into
push
es
sbb
cli
mov
ja
push
fcmove
sub
fadd
cs
addr16
(bad)
jmp
inc
in
add
xlat
daa
mov
movs
xor
cmp
iret
jo
and
sub
aad
shr
ds
rol
or
xchg
sub
mov
jb
cli
test
mov
aad
push
div
push
mov
push
push
dec
pop
daa
inc
mov
or
(bad)
out
retf
mov
loope
mov
dec
inc
push
inc
push
mov
and
jnp
and
push
xchg
cmp
cdq
mov
mov
push
sub
ss
mov
imul
jle
stos
adc
mov
icebp
mov
sub
ret
jmp
cmp
and
scas
adc
mov
dec
outs
push
je
inc
outs
or
add
ja
add
jbe
mov
jmp
ss
or
outs
fdiv
cs
repz
add
inc
or
mov
bound
into
xor
add
test
mov
dec
lahf
and
dec
mov
out
xor
add
push
mov
sub
pop
loopne
call
pop
div
inc
xor
cli
adc
cmps
data16
pop
das
cmp
or
jne
or
mov
pop
rcr
ret
mov
pusha
sbb
scas
xchg
test
inc
jp
ins
mov
gs
sbb
jmp
and
jmp
loop
dec
jmp
push
xor
add
mov
into
call
pop
pop
push
mov
data16
pusha
inc
mov
out
call
cmp
jo
sahf
ret
xor
mov
mov
dec
dec
out
xchg
sub
add
test
jbe
sub
sub
(bad)
push
jle
inc
imul
sbb
and
sbb
outs
loop
add
call
pusha
rol
ret
adc
enter
sbb
pop
xor
xadd
pop
(bad)
mov
into
jb
push
pop
mov
jecxz
add
das
pop
xor
dec
retf
jle
or
dec
loop
mov
dec
loop
movlps
nop
cmp
sub
cmp
adc
idiv
and
call
jecxz
sbb
sbb
jmp
inc
xor
dec
inc
adc
inc
push
xchg
xchg
data16
pop
sub
xchg
sub
jne
adc
outs
test
or
mov
push
sub
mov
mov
pop
push
xchg
cmp
mul
cmp
enter
inc
pop
inc
pop
imul
ret
js
jle
inc
(bad)
call
sub
dec
js
cs
nop
pushf
dec
pusha
sahf
pop
sbb
mov
dec
add
daa
inc
push
adc
sub
push
push
enter
add
fcmovu
xor
icebp
push
dec
jp
add
call
(bad)
js
cmp
sahf
jmp
ds
icebp
js
js
mov
xchg
mov
xchg
mov
imul
je
test
test
pushf
js
pop
into
cmp
jbe
xchg
push
mov
adc
xor
push
test
mov
xchg
xchg
jno
fs
push
arpl
or
ror
rcr
push
retf
test
pushw
ficom
call
inc
pop
adc
test
mov
and
xchg
btr
inc
push
pusha
jo
inc
fiadd
or
(bad)
adc
push
add
dec
cs
xchg
mov
inc
push
cmp
jb
scas
sub
lods
xor
sub
scas
mov
dec
pushf
inc
pop
rol
xor
fidiv
push
cli
loop
dec
pop
xor
jbe
and
xchg
dec
and
cmp
(bad)
and
popa
add
mov
shl
jp
inc
sbb
pop
add
adc
test
scas
rcl
jmp
js
loop
test
pop
popa
add
mov
sub
scas
adc
sub
inc
push
pop
cdq
add
bound
push
adc
out
dec
dec
mov
or
ror
mov
(bad)
sbb
inc
push
inc
cmp
(bad)
push
xchg
push
xor
xchg
mov
fwait
js
xor
push
cmp
or
sbb
fmul
push
sbb
sbb
xchg
jmp
push
adc
push
shl
retf
push
ja
cmp
ss
dec
mov
mov
ret
or
shl
xor
pop
ins
je
cs
cmp
pop
jnp
test
mov
sub
push
dec
mov
ret
or
rcr
les
imul
push
push
rcr
sub
cmp
add
jo
xor
xor
xchg
push
out
and
sbb
inc
dec
sub
imul
rol
outs
aaa
mov
retf
lea
bound
xchg
and
mov
scas
adc
add
mov
call
adc
jo
aas
(bad)
es
push
push
mov
jmp
into
push
xchg
jmp
punpckhbw
jp
punpckhdq
pop
mov
dec
jo
out
and
mov
in
int3
(bad)
mov
scas
cli
mov
inc
sub
imul
js
push
loopne
not
rcr
rcr
add
mov
inc
dec
ret
sbb
pop
dec
add
fadd
ficomp
jp
adc
test
push
inc
les
pop
push
mov
sahf
dec
sbb
jp
clc
jmp
push
mov
sahf
xchg
mov
and
sub
jg
dec
daa
add
mov
popa
add
dec
stos
ds
cmp
js
in
push
cmp
push
add
ret
ret
scas
test
add
call
xchg
loope
mov
sub
xor
dec
call
inc
jb
and
dec
call
inc
mov
test
ret
leave
das
sahf
push
dec
ficom
loopne
aas
lods
fidivr
pop
push
lock
rol
jecxz
(bad)
out
loop
add
out
out
fmulp
sbb
cmp
jmp
pop
push
xor
mov
mov
xchg
mov
ret
xchg
aaa
push
ss
adc
mov
sbb
fs
mov
cmp
push
mov
sahf
das
jle
xchg
pop
push
mov
adc
les
sbb
mov
and
push
xchg
(bad)
dec
mov
or
pop
inc
or
daa
dec
ss
push
inc
inc
sar
jmp
push
mov
xchg
sub
daa
dec
sahf
and
cmp
sbb
sbb
adc
or
fmul
adc
xchg
les
js
adc
popa
fmulp
(bad)
and
pop
rcr
shl
aas
adc
pop
not
dec
loopne
inc
jns
ret
lahf
add
xchg
and
cmps
sbb
loopne
adc
mov
add
arpl
cwde
das
and
inc
call
inc
scas
cmp
jns
dec
invd
add
bound
xor
in
dec
xchg
rcr
es
xchg
fwait
rcr
out
add
pop
pop
test
inc
and
(bad)
xor
mov
dec
and
dec
mov
and
push
dec
popf
sbb
push
cli
sahf
push
push
pop
mov
bound
scas
add
mov
mov
xchg
ret
sub
mov
nop
sbb
es
inc
adc
or
dec
xor
add
xchg
je
adc
xchg
sbb
xchg
ror
call
add
pop
out
mov
xor
pop
pusha
xchg
not
lea
fist
or
or
mov
cmp
pop
sbb
js
mov
addr16
fild
adc
jmp
and
ret
sub
mov
xchg
bound
and
les
xor
and
inc
inc
push
iret
mov
mov
mov
push
push
rcr
and
or
sub
and
pop
push
cmps
ret
push
sub
bound
sub
xor
dec
hlt
jb
arpl
iret
nop
adc
xchg
xchg
jp
retf
(bad)
rol
cmp
mov
(bad)
jle
mov
mov
and
or
push
push
or
dec
into
fimul
pop
push
rol
and
movs
dec
dec
(bad)
cmps
cmps
push
les
or
(bad)
stos
add
pop
daa
jmp
cwde
test
mov
jno
pop
fiadd
jp
cmc
dec
jecxz
outs
pusha
pop
and
push
lods
jbe
mov
xchg
mov
jb
jnp
pop
push
or
je
mov
push
pusha
call
lods
xchg
push
xchg
sub
push
jb
add
or
mov
dec
outs
inc
sbb
push
mov
xor
sub
and
iret
cmp
xor
xchg
and
mov
jle
adc
sbb
loop
outs
ret
dec
or
xchg
cs
test
das
stos
cmp
into
add
push
add
push
jecxz
mov
loop
ins
gs
push
mov
inc
mov
xchg
sub
ret
add
pushf
es
mov
dec
mov
push
outs
xchg
xor
(bad)
imul
push
and
jle
xor
test
sbb
cs
ret
aam
mov
and
arpl
in
and
out
pop
xor
push
sahf
push
xlat
mov
retf
jnp
sbb
inc
scas
leave
inc
sbb
jle
pop
adc
fmul
jmp
xor
inc
jle
xchg
adc
cmps
(bad)
mov
mov
jo
xor
inc
xor
ja
push
dec
sar
into
gs
out
mov
bound
mov
pop
push
xchg
jle
push
cs
xchg
sbb
pop
dec
bound
arpl
mov
repnz
scas
gs
adc
mov
dec
jb
pop
inc
rcl
adc
rcl
adc
xor
mov
jp
outs
aaa
cmp
arpl
ficomp
pusha
push
add
popa
test
jmp
mov
adc
add
js
xor
xchg
and
enter
pop
push
xor
lods
movntq
cmp
dec
out
or
fnstcw
push
sbb
xchg
dec
lods
into
idiv
pop
or
xchg
retf
ret
(bad)
rcl
sahf
push
jl
(bad)
mov
sub
jnp
div
dec
scas
mov
mov
sub
jne
push
data16
cmp
and
and
jmp
scas
sub
pop
daa
adc
xor
mov
and
retf
fst
ds
add
das
adc
data16
ret
ret
ss
jmp
and
jbe
ins
add
sub
add
mov
jecxz
and
or
jg
pusha
inc
cmp
outs
dec
push
arpl
xchg
jmp
or
add
bound
xor
or
push
push
xor
ss
xor
xor
int3
pop
inc
call
sbb
cwde
jo
lock
push
mov
pushf
adc
ficom
dec
scas
xchg
adc
scas
and
add
scas
(bad)
ret
push
sbb
es
retf
sbb
dec
cli
mov
add
mov
gs
add
mov
push
dec
bound
or
ds
or
mov
into
xchg
bound
js
xor
add
inc
sbb
mov
jb
dec
fisub
out
mov
add
into
xchg
or
data16
repnz
and
jne
mov
and
mov
jns
cmp
add
cmps
push
imul
push
dec
es
xor
test
xchg
(bad)
mov
lea
fiadd
loope
xchg
add
mov
xchg
mov
dec
mov
es
pop
dec
dec
and
pusha
retf
retf
xchg
adc
leave
push
mov
or
sbb
sbb
xchg
xor
gs
add
and
ret
mov
mov
push
push
pop
mov
and
dec
imul
ret
adc
push
mov
(bad)
cli
data16
fs
adc
sbb
inc
xchg
outs
push
mov
mov
mul
jae
daa
jmp
sub
pop
jne
es
daa
mov
push
xchg
(bad)
jmp
or
dec
loop
add
add
retf
push
xor
pop
xchg
mov
scas
jle
aas
jle
sbb
movs
add
add
into
cli
push
sbb
adc
ret
lock
inc
pushw
and
out
xchg
ret
add
inc
jmp
xchg
mov
xchg
popa
stos
xchg
inc
fiadd
hlt
push
add
mov
push
dec
into
fiadd
pop
cmp
adc
ret
inc
add
popf
mov
or
loop
(bad)
movs
mov
mov
pop
lock
sbb
jg
stos
lods
xchg
data16
cdq
test
jbe
popa
jmp
cmp
aaa
bound
push
ss
add
xchg
call
popa
push
sbb
ins
ffreep
mov
(bad)
jb
pop
ret
push
vpmadd52luq
(bad)
shl
movs
jae
retf
stos
(bad)
clc
mov
ins
jmp
clc
nop
or
sub
jae
es
je
shl
aaa
icebp
mov
pop
push
mov
and
(bad)
mov
mov
or
rcl
mov
sbb
out
out
adc
mov
push
xchg
bound
aam
dec
repnz
imul
nop
es
jae
or
enter
test
scas
or
loop
xor
lea
adc
xor
lods
and
xchg
rcl
adc
rol
cmp
xchg
mov
in
ins
cs
add
out
pop
adc
adc
inc
(bad)
and
out
xchg
out
cmps
call
out
js
call
push
and
test
inc
jp
(bad)
and
cmp
daa
dec
push
xor
add
mov
adc
rcl
pop
push
or
or
dec
fldenv
ja
pop
xchg
sbb
js
dec
mov
sahf
add
retf
ret
push
ret
sbb
js
(bad)
sbb
rcr
(bad)
push
ss
cs
rol
sub
inc
test
and
or
cs
or
cmps
in
sub
lea
dec
(bad)
arpl
xchg
les
adc
bound
loop
retf
pop
lods
call
jecxz
out
loop
xor
call
or
cmp
adc
cmps
mov
out
dec
jle
pop
sbb
inc
sbb
sub
out
imul
adc
or
sub
push
cmp
xchg
stos
and
push
pop
push
sub
pop
mov
(bad)
jmp
and
fidiv
mov
scas
adc
neg
out
(bad)
inc
nop
cmc
shl
imul
js
push
out
pop
(bad)
es
ds
push
mov
xchg
mov
sub
cmps
xor
cmp
(bad)
jle
jo
jno
ss
ins
add
mov
movs
sbb
or
pop
fidiv
ret
test
mov
push
ja
push
ds
dec
xor
add
xor
add
es
inc
pop
add
push
jecxz
test
sbb
jbe
sbb
inc
dec
dec
outs
and
push
popf
in
sbb
mov
sbb
push
xor
cmp
cmp
or
add
push
nop
push
(bad)
enter
xchg
mov
loope
out
jb
loopne
sub
mov
out
sahf
ins
xor
cmp
mov
pop
sbb
adc
mov
and
mov
or
cmps
adc
add
jp
xchg
mov
jne
xor
outs
clc
sbb
sbb
cmp
das
mov
pop
add
pop
push
dec
ret
test
push
push
cmp
sbb
mov
aam
nop
inc
cmp
ret
fiadd
loop
add
xchg
pop
xor
loop
pusha
mov
cwde
or
pop
cmp
arpl
jo
mov
push
xchg
jp
das
and
jae
xchg
rol
mov
push
xor
scas
jo
sbb
stos
pop
and
lods
mov
scas
pop
xchg
(bad)
mov
mov
stos
xor
movs
cmc
add
mov
or
or
fcomp
add
sbb
les
add
or
ds
inc
sbb
dec
out
pop
jp
push
xchg
ret
das
shr
sbb
sbb
outs
cwde
or
push
scas
call
outs
fs
rcl
inc
xchg
inc
adc
push
out
pop
add
scas
push
and
and
adc
adc
ss
fsubp
cmp
into
inc
pop
scas
clc
jbe
cmp
scas
ds
movs
xor
and
xor
push
xchg
mov
push
mov
arpl
ficom
cs
or
cmp
sar
xchg
xchg
push
dec
stos
jo
inc
mov
mov
and
mov
test
adc
(bad)
push
test
loopne
jle
push
sbb
shl
push
mov
into
dec
das
and
pop
loop
pop
arpl
nop
inc
mov
sub
dec
jo
int3
sub
mov
and
int3
pop
mov
out
and
dec
loop
xor
sahf
inc
(bad)
xlat
push
inc
and
push
xchg
mov
mov
popf
popa
inc
mov
cmc
xchg
mov
inc
sbb
push
into
adc
nop
ss
add
mov
mov
xchg
dec
add
sbb
fdivp
lock
jle
mov
ss
mov
push
jo
push
inc
fdiv
push
ss
mov
push
icebp
jbe
neg
add
cs
addr16
bound
dec
outs
shr
dec
xchg
sub
pop
fbld
call
cli
cmp
mov
xchg
jmp
and
sbb
inc
test
ret
fwait
xor
push
mov
jmp
outs
fidiv
mov
stos
jbe
test
ss
jbe
sub
aas
ret
inc
push
shl
jmp
imul
mov
sbb
into
ret
push
out
add
mov
(bad)
push
shr
pushf
sbb
sti
(bad)
xchg
mov
and
push
push
lock
jno
push
or
(bad)
cmp
jbe
dec
or
mov
ss
les
or
and
dec
fiadd
xchg
or
(bad)
adc
or
xchg
mov
call
int3
jne
or
sub
add
adc
jmp
or
iret
cdq
xchg
or
inc
out
push
sbb
into
(bad)
imul
or
imul
or
cmps
mov
sbb
adc
test
push
sub
add
and
sar
push
arpl
adc
mov
adc
or
xor
pusha
call
inc
ds
ret
push
shl
aam
jmp
(bad)
xchg
push
retf
not
test
sbb
ret
xor
imul
cli
mov
bound
inc
dec
ja
shr
cdq
loope
(bad)
and
sbb
loope
(bad)
push
xchg
nop
sub
loope
(bad)
outs
push
pop
js
and
nop
mov
adc
add
xchg
push
sbb
cs
jbe
inc
arpl
inc
push
dec
adc
dec
dec
sbb
cmps
sub
jbe
outs
inc
rol
rol
pop
sahf
repnz
push
rol
retf
jo
inc
xchg
fisubr
inc
sbb
pop
mov
jnp
jo
into
ret
add
cmp
aad
pusha
imul
fbld
jno
mov
add
cwde
xor
inc
imul
(bad)
loopne
out
inc
mov
sbb
jae
dec
dec
sub
imul
or
imul
das
push
push
retf
xchg
popa
ds
loop
fild
xor
mov
out
mov
adc
cmps
(bad)
fdiv
push
pop
dec
fcomp
mov
mov
adc
xchg
inc
push
sbb
sub
ss
push
jle
jle
outs
loopne
scas
jbe
jbe
mov
pop
jp
scas
inc
fdiv
mov
mov
sub
mov
pushaw
dec
inc
dec
test
jp
sbb
push
jmp
dec
fs
mov
imul
into
repnz
inc
jmp
push
mov
add
cmps
pop
and
rcr
rol
mov
sbb
rcl
jmp
nop
inc
out
fisttp
dec
push
sub
inc
lea
jae
outs
pop
pop
dec
push
sahf
daa
cmp
xchg
(bad)
retf
cli
cmp
xchg
inc
push
fmul
and
out
aad
add
push
stos
cmps
and
lods
add
jae
(bad)
pop
into
sub
add
shl
fidiv
cs
pushf
sbb
nop
or
out
xor
ss
(bad)
(bad)
xchg
jne
pop
test
imul
mov
stos
lods
dec
jb
lock
adc
bound
mov
fiadd
mov
icebp
add
cmps
nop
xchg
inc
(bad)
and
out
movs
int3
retf
rcl
es
lods
mov
push
daa
inc
mov
sbb
or
retf
arpl
or
adc
loopne
dec
push
mov
add
inc
pop
into
gs
add
jle
loop
push
nop
mov
xchg
jb
push
rcr
sbb
pop
inc
js
in
adc
mov
xchg
mov
jle
adc
jmp
lahf
mov
lock
inc
sub
dec
or
xchg
or
out
adc
das
sar
(bad)
stos
xlat
add
pop
js
shr
push
pop
dec
fbld
fld
test
or
ret
pop
dec
retf
xchg
inc
cs
or
adc
or
adc
ret
test
mov
xchg
rcr
and
xlat
cmp
add
add
inc
sub
jge
daa
jle
and
sbb
push
test
pop
sbb
push
push
shl
xor
cmp
leave
inc
aam
jp
or
push
rcr
xchg
mov
sahf
dec
push
adc
out
mov
adc
inc
cmp
jp
pop
aam
ror
push
pusha
push
out
inc
pushf
push
add
push
xchg
nop
push
sub
loop
dec
dec
sbb
xor
mov
mov
jnp
sub
or
loop
inc
ret
xor
or
pop
or
sub
inc
cmp
dec
fistp
into
sub
sbb
nop
cli
or
or
xor
sahf
mov
test
pop
cli
(bad)
xchg
scas
add
movs
xlat
push
mov
dec
call
adc
add
fadd
pop
xchg
(bad)
ins
mov
enter
repnz
out
sub
jle
ret
or
jbe
inc
xchg
in
xchg
retf
sub
push
es
dec
dec
xchg
xchg
and
adc
pop
ret
push
ret
lahf
mov
inc
loopne
adc
and
add
mov
inc
aas
repnz
adc
pop
retf
adc
mov
jp
mov
sbb
outs
mov
cmps
sbb
lea
mov
mov
aaa
mov
xchg
or
stos
xchg
sub
retf
lahf
pop
(bad)
mov
or
push
mov
mov
add
push
xor
repnz
inc
xor
add
add
movs
mov
dec
sbb
daa
sahf
das
pop
scas
outs
outs
shr
mov
xchg
sti
jp
dec
adc
mov
(bad)
jmp
loop
loope
rol
jno
and
and
push
xchg
add
loope
dec
(bad)
dec
xor
or
dec
scas
pop
pop
pop
nop
lock
jle
dec
mov
jp
or
(bad)
outs
pop
cmps
inc
arpl
push
cs
inc
pop
xchg
push
inc
push
push
imul
clc
movaps
ficomp
js
adc
mov
xor
ret
sahf
dec
xor
pop
add
dec
test
call
xor
rol
add
xor
out
jnp
ss
mov
out
outs
mov
adc
ss
xor
cmps
(bad)
call
sbb
leave
jp
dec
dec
out
mov
cmp
sbb
bound
push
adc
sub
xor
cmp
cmp
mov
out
add
lock
aaa
shl
imul
ret
adc
inc
cdq
mov
ret
cmp
dec
arpl
loope
fwait
mov
sbb
or
(bad)
retf
pop
(bad)
rcr
dec
sar
pushf
into
outs
xchg
and
or
push
inc
dec
rcl
add
dec
pop
sbb
inc
fimul
jae
dec
retf
cmc
mov
adc
aam
inc
dec
stos
call
mov
fild
cmp
cmp
jp
out
jp
inc
jns
cmp
sbb
cmps
cmp
ins
or
or
xchg
inc
and
xchg
je
loop
mov
or
fld
rcr
retf
ins
pop
daa
cmp
mov
test
out
push
fs
xchg
add
inc
cmp
pusha
retf
ss
xor
xchg
push
mov
push
and
inc
ret
pop
out
arpl
add
sbb
dec
call
push
inc
or
retf
and
push
(bad)
cli
push
call
das
ret
or
push
into
ret
lea
ret
xchg
and
inc
sbb
xchg
lods
mov
and
test
adc
dec
and
dec
or
xor
dec
push
test
dec
imul
add
imul
scas
outs
sbb
arpl
mov
rcl
js
xor
retf
mov
into
xlat
inc
or
iret
and
(bad)
fidivr
fdivr
xchg
into
loope
imul
ror
mov
push
add
mov
mov
push
cmp
shr
pop
sbb
adc
jmp
cmps
out
xchg
push
daa
mov
ret
sbb
ret
loopne
mov
out
mov
dec
scas
sbb
jmp
mov
sub
sbb
into
(bad)
mov
xor
sahf
adc
imul
pop
or
int3
add
outs
sub
push
push
inc
arpl
das
mov
jmp
cli
mov
pop
sbb
cwde
(bad)
call
movs
adc
cmp
shl
inc
and
mov
push
ss
pusha
or
sbb
movs
icebp
not
outs
and
or
push
add
and
xchg
or
xor
jo
or
(bad)
stos
adc
(bad)
cmp
into
push
mov
xchg
mov
bound
sbb
out
adc
ret
push
push
fidiv
cmp
and
test
into
lods
add
repnz
popa
add
pop
(bad)
sub
popa
popa
les
ss
push
pusha
es
xchg
xor
xor
mov
add
outs
mov
or
call
lock
lods
dec
pushf
inc
dec
and
add
mov
imul
rol
push
bound
loope
outs
push
xor
mov
je
jecxz
xor
xchg
push
bound
mov
mov
and
pop
xchg
sbb
sbb
out
out
add
add
js
out
xchg
jle
rcr
xor
into
pop
data16
(bad)
(bad)
or
pop
mov
(bad)
jmp
ins
jecxz
adc
cs
jne
loopne
dec
loopne
daa
push
ds
outs
popa
add
dec
call
out
rol
push
jle
or
pop
neg
rcl
jb
sbb
imul
xchg
sahf
push
dec
jp
fdivrp
jle
cmps
add
repnz
jp
and
push
xchg
fs
nop
(bad)
arpl
or
cmps
(bad)
mov
sub
mov
or
push
lods
dec
bound
mov
ss
or
aaa
jno
ja
mov
dec
cmp
test
inc
mov
sar
sub
sbb
jmp
jae
adc
cmc
ins
adc
and
mov
fisubr
nop
xchg
or
call
out
jns
test
mov
imul
jmp
sub
sahf
xchg
into
add
js
outs
mov
test
xchg
aam
jb
jb
xor
test
lock
inc
push
and
ret
retf
xchg
cmp
mov
cmps
icebp
bound
jno
xor
push
mov
sub
push
push
dec
addr16
sbb
sbb
pop
arpl
(bad)
cmp
cli
rcl
stos
retf
leave
(bad)
(bad)
add
inc
(bad)
jnp
mov
cmp
adc
jb
lods
xchg
sub
out
pop
aam
das
mov
stos
mov
jo
dec
cmps
pop
add
push
cmp
adc
jb
sar
call
test
stos
pushf
nop
sbb
sub
mov
add
or
inc
add
cwde
inc
(bad)
stos
sbb
push
mov
(bad)
call
mov
lahf
into
adc
mov
ret
add
jb
jmp
sbb
repz
dec
sub
sub
ds
xor
out
inc
sub
popa
outs
sahf
xchg
loop
dec
pushf
add
fcomp
mov
out
data16
lods
cmps
sbb
(bad)
dec
(bad)
cs
and
inc
dec
push
or
mov
mov
mov
push
fsubp
and
cli
mov
xchg
adc
push
cmp
rol
js
dec
mov
popf
dec
shr
inc
lods
inc
or
sub
xor
pop
mov
sahf
pop
jo
add
and
cmp
sbb
and
icebp
and
ds
xchg
mov
push
cmp
fadd
es
and
jmp
push
or
push
mov
rcl
adc
add
ror
jp
cmps
dec
lea
sub
sub
adc
sub
loope
aaa
xchg
adc
add
sub
and
push
pop
(bad)
cmp
mov
cmc
imul
cmp
dec
xor
test
mov
jmp
sahf
add
retf
das
mov
ret
bswap
mov
out
push
push
xchg
xchg
sbb
push
push
inc
push
xchg
or
cs
fwait
add
xor
push
dec
and
cwde
pop
mov
mov
dec
mov
mov
pop
js
add
push
mov
mov
and
add
mov
retf
mov
cmp
dec
or
jb
xchg
repnz
pop
into
not
ret
aam
push
mov
dec
cwde
cli
and
adc
dec
(bad)
mov
push
xchg
fist
jae
jmp
adc
outs
sub
pop
sbb
xchg
fwait
mov
sar
call
inc
mov
pop
es
retf
push
push
loope
ret
sahf
mov
cli
into
stos
dec
pusha
and
mov
(bad)
push
or
pop
loop
sar
adc
(bad)
rol
inc
add
pop
mov
js
ss
pop
inc
ror
sbb
or
adc
inc
xchg
dec
xchg
or
cs
mov
xchg
and
les
xchg
jmp
jb
out
sbb
inc
mov
(bad)
mov
inc
retf
ret
dec
cs
pop
dec
xor
push
mov
inc
ss
xchg
add
adc
xchg
cmps
loop
dec
or
cmp
sub
dec
das
pop
sub
nop
xor
sbb
mov
or
inc
mov
jmp
mov
jmp
loopne
lea
es
arpl
retf
pop
or
sbb
add
cs
sub
ror
pusha
inc
adc
sbb
push
jno
nop
retf
sbb
mov
jmp
call
jg
cdq
ret
jb
rcr
ret
push
call
rol
sbb
dec
add
cli
loop
cwde
rcl
stos
add
add
ror
call
ret
jne
sbb
push
add
stos
scas
rol
mov
dec
pop
outs
inc
imul
cmp
add
ret
(bad)
aam
nop
add
adc
icebp
pop
mov
sbb
(bad)
daa
dec
js
cs
mov
test
xor
cmp
xchg
sub
or
mov
add
add
xchg
les
iret
call
mov
adc
(bad)
enter
inc
push
cmp
out
cmp
nop
mov
mov
mov
cmp
pop
dec
or
push
das
jg
fild
out
das
ret
or
inc
sbb
adc
sahf
push
push
xchg
or
mov
enter
test
test
neg
sub
into
(bad)
xor
or
push
mov
adc
mul
jle
jo
jno
pop
jp
dec
ret
cmp
jnp
in
inc
sub
cmps
popa
add
sar
retf
mov
dec
aaa
push
sbb
test
pop
and
xor
sbb
inc
bound
pop
adc
jb
or
add
sbb
and
repnz
sbb
jecxz
pop
or
dec
js
jp
jb
inc
je
call
sub
jle
arpl
cmp
mov
(bad)
push
popa
add
pop
xchg
jbe
push
pop
add
sbb
repnz
add
inc
(bad)
into
stos
adc
add
add
dec
push
push
xchg
cmp
add
adc
mov
outs
mov
xchg
push
push
or
fld
or
xor
cmp
(bad)
adc
push
mov
cmp
cmp
mov
pop
rol
push
or
or
sub
xchg
aad
(bad)
sub
push
cmp
sub
inc
dec
add
xchg
rcl
and
lods
pop
or
outs
xchg
rcl
xchg
fmulp
inc
xor
sub
dec
or
icebp
nop
dec
stos
add
cwde
in
xor
inc
xchg
and
xchg
push
nop
sbb
loope
aaa
xchg
(bad)
sahf
mov
ret
cmps
je
loope
xchg
inc
rol
out
pop
js
push
clc
mov
or
xchg
xor
lahf
pop
loope
inc
sub
xchg
ret
scas
fimul
push
fsubp
scas
into
or
dec
cwde
adc
fisubr
lods
mov
cwde
add
cmp
stos
push
sub
jo
push
into
mov
push
add
adc
jmp
sti
cli
sub
cs
(bad)
push
xchg
or
add
add
nop
fs
or
sub
lods
iret
mov
nop
scas
out
retf
push
mov
adc
popa
sub
dec
add
rcl
and
or
imul
push
add
fnstsw
pop
pop
addr16
add
xor
xchg
push
add
cmp
nop
out
popa
pop
jae
sbb
add
cmp
dec
dec
mov
outs
inc
cmp
add
jle
aaa
pushf
jno
or
or
pop
cwde
cli
cli
dec
mov
xor
pop
pop
sbb
or
push
mov
(bad)
and
loop
push
cmps
mov
lds
mov
pop
add
not
dec
loope
bound
and
lock
lods
inc
cmps
or
jp
cmp
pop
jecxz
push
shl
movs
mov
ret
push
mov
daa
out
jp
mov
arpl
mov
xor
jle
jmp
sbb
push
xchg
(bad)
mov
(bad)
out
sti
(bad)
mov
push
xor
dec
scas
out
sbb
(bad)
jmp
loop
pop
pop
and
dec
call
sub
and
imul
sbb
inc
dec
inc
or
aas
add
push
scas
xchg
xor
es
aaa
mov
hlt
rcr
test
adc
int3
add
fcmovbe
lea
add
mov
das
or
push
ret
ds
(bad)
mov
imul
add
jmp
mov
dec
sbb
inc
dec
repnz
xchg
and
pusha
or
mov
jle
and
loop
push
fdivr
sub
mov
cmp
enter
pop
mov
fcomip
add
jmp
jp
pop
les
add
call
adc
and
mov
lea
push
mov
mov
stos
cmp
shl
out
jae
and
jbe
repnz
mov
mov
sub
fs
mov
push
push
mov
ret
stos
mov
cli
mov
(bad)
jp
call
sahf
dec
retf
mov
out
sbb
shl
xchg
mov
shl
pop
fidiv
push
sbb
cmps
sahf
iret
push
pushf
add
loop
lods
(bad)
xor
(bad)
push
cmp
jo
inc
sub
retf
mov
jns
cmp
jmp
aas
push
mov
push
mov
inc
dec
dec
push
jb
or
push
push
adc
mov
(bad)
pop
lea
stos
push
push
lock
mov
or
jle
movs
xor
adc
(bad)
pop
mov
fimul
dec
(bad)
jbe
xor
and
(bad)
fidiv
ror
ds
push
retf
sbb
es
into
cmp
sahf
xchg
or
xor
mov
fiadd
(bad)
adc
adc
sbb
sahf
out
test
mov
mov
push
push
push
imul
fidiv
ficomp
pop
dec
call
xchg
adc
mov
rcr
sti
jo
(bad)
pop
aam
push
sahf
jno
add
mov
add
sbb
push
add
pop
ds
cmp
add
or
pop
aam
xor
cmps
or
mov
sub
dec
icebp
add
loope
sub
imul
add
ins
in
and
inc
shl
(bad)
fistp
sbb
(bad)
ja
(bad)
xchg
aam
into
xor
inc
xchg
xchg
rcr
enter
dec
mov
push
adc
push
jo
aam
mov
fisub
xchg
and
ret
mov
ins
ficom
aad
mov
add
and
adc
add
cdq
sbb
(bad)
out
xchg
sub
out
mov
ret
outs
mov
jns
into
mov
js
into
inc
sub
jp
fisub
mov
scas
sub
sbb
dec
cwde
mov
inc
(bad)
dec
lods
dec
inc
popa
adc
stos
jae
xchg
into
mov
fisub
push
(bad)
test
sahf
cmp
or
sbb
inc
rol
mov
mov
loopne
test
add
inc
repnz
adc
call
into
sbb
jno
pop
pop
loop
mov
bound
daa
(bad)
mov
sub
add
enter
cli
push
sahf
dec
xor
aam
add
mov
sub
push
jle
add
push
push
arpl
mov
sbb
aam
ss
fmul
js
jle
cmp
jb
outs
outs
loop
or
jg
dec
mov
test
movs
dec
adc
mov
jno
imul
sbb
out
iret
xor
shr
add
loopne
lods
push
out
aaa
xchg
ret
fcom
mov
inc
adc
bound
sbb
mov
inc
mov
jp
pop
orps
(bad)
enter
lock
pop
jmp
movs
hlt
and
sahf
imul
mov
dec
and
cmp
push
mov
movs
xor
repz
and
cs
xchg
add
push
cmp
enter
jmp
jb
dec
or
inc
sub
or
jmp
mov
scas
mov
sub
ret
dec
scas
movs
ret
ds
add
fs
sbb
cmp
pop
add
pop
add
sbb
and
mov
and
mov
popa
(bad)
mov
pop
sub
sub
inc
xchg
adc
sub
pop
ficom
push
xor
loop
push
imul
pop
mov
jmp
inc
sbb
sbb
dec
mov
dec
cmp
cmp
fisub
xchg
lods
cli
enter
xchg
shl
dec
jmp
dec
mov
adc
(bad)
mov
inc
lods
or
dec
fistp
or
cdq
jb
bound
push
(bad)
rol
nop
mov
mov
rcr
stos
cwde
jb
or
pushf
ret
ss
jmp
pop
jle
push
sbb
loopne
retf
or
sbb
inc
out
mov
mov
pop
mov
sbb
xor
pop
js
xor
into
pop
pop
pop
sbb
cs
fs
ret
mov
mov
sahf
sub
ret
cmp
lods
and
mov
cmps
mov
inc
cmps
pop
or
vmread
inc
add
sbb
ret
es
or
mov
and
adc
jecxz
inc
addr16
cmp
push
mov
rol
sub
push
xchg
retf
pusha
sub
jo
cmc
cli
dec
cmp
jecxz
mov
inc
cs
or
es
dec
shr
jmp
and
cmp
cmp
push
dec
pop
out
push
test
jbe
fs
adc
inc
inc
mov
cs
(bad)
(bad)
rcl
push
repnz
(bad)
mov
mov
call
xor
sbb
adc
dec
push
sbb
xor
arpl
not
inc
clc
dec
jp
mov
or
sbb
sub
nop
mov
mov
xchg
xor
sbb
sbb
push
into
inc
or
(bad)
cli
push
jle
cmp
jmp
pop
add
out
adc
mov
in
mov
xchg
or
xchg
jp
jnp
adc
xor
xchg
(bad)
(bad)
movs
(bad)
rcl
mov
test
not
dec
pop
jmp
fcomp
add
pop
mov
mov
and
pushf
stos
inc
mov
jmp
rol
xor
rcr
jns
out
into
dec
sub
call
retf
rol
(bad)
(bad)
popa
sar
cli
pop
mov
rcr
ret
cmp
mov
add
(bad)
pop
sar
popa
mov
adc
cmps
fxch
test
mov
pop
lahf
push
cmp
test
dec
sbb
fisubr
sbb
add
jbe
add
mov
push
sub
(bad)
out
ret
(bad)
movs
xchg
inc
mov
sub
es
pop
inc
mov
out
pop
add
into
test
jne
or
sysexit
cmc
out
inc
out
loop
cmps
inc
pop
or
add
call
pop
fcomp
sbb
rcl
pop
sub
popa
ret
fadd
(bad)
cmps
movs
xchg
lods
jb
pushf
sbb
mov
(bad)
fs
test
sbb
add
push
push
pop
(bad)
lods
dec
popf
ins
cmps
or
popf
sub
and
in
lods
xor
push
mov
add
pop
push
adc
mov
add
sar
and
mov
mov
shl
imul
pusha
sar
xor
sbb
add
xor
mov
scas
or
shl
cmp
(bad)
movs
push
dec
mov
ret
test
stos
adc
ss
or
call
call
dec
cmp
mov
gs
push
ds
and
aam
push
xchg
cs
mov
in
retf
popf
test
or
sar
sahf
xchg
xchg
adc
and
aad
pop
push
inc
pop
dec
push
idiv
dec
cwde
icebp
xor
outs
push
ret
arpl
xchg
mov
loop
popf
popa
xchg
mov
mov
xchg
and
push
pop
ret
ror
stos
xchg
sahf
mov
ror
push
xor
mov
cwde
mov
or
sub
inc
mov
outs
xor
xchg
pusha
gs
ja
add
(bad)
jnp
inc
test
imul
cli
mul
or
retf
jnp
mov
xor
iret
out
das
adc
pop
imul
xor
rcr
adc
mov
aam
mov
mov
mov
sub
add
xor
test
xchg
push
cli
adc
or
mov
ret
mov
push
push
xchg
mov
shl
repz
inc
sub
add
xor
into
sbb
cmps
ss
fild
inc
mov
js
ins
mov
add
inc
pop
add
ret
inc
into
jmp
mov
retf
into
jg
shr
bound
pop
add
inc
sub
mov
xchg
and
(bad)
js
and
out
pop
scas
adc
mov
(bad)
bound
loop
jnp
cmp
push
sub
test
xor
push
inc
inc
mov
xchg
pop
add
mov
or
add
cs
mov
push
adc
xchg
mov
push
loop
sbb
cmp
sbb
fiadd
es
pop
(bad)
call
mov
bound
mov
ficomp
or
xchg
add
adc
push
inc
sbb
mov
xchg
inc
outs
cmp
lods
or
sbb
push
lahf
xor
or
ficom
or
xchg
sbb
jmp
adc
(bad)
dec
ds
aam
xchg
(bad)
ss
sub
xacquire
pop
xlat
dec
or
bound
pusha
(bad)
ficom
jle
sbb
sbb
pop
jp
inc
jmp
dec
scas
inc
push
push
sub
jbe
pop
xor
and
sub
xchg
mov
ret
push
js
ret
cmp
xchg
sbb
push
scas
inc
mov
mov
dec
push
stos
xor
into
mov
cmp
jbe
into
rol
mov
cmps
mov
inc
jp
add
retf
adc
mov
sti
push
jae
pusha
jne
je
adc
sbb
jp
scas
mov
adc
dec
xchg
xor
rol
adc
mov
rcl
dec
add
mov
sbb
dec
sbb
into
or
dec
or
cmovae
sub
push
and
pop
push
mov
cmp
sahf
push
adc
xchg
push
mov
xor
bound
add
pushf
test
loop
cmp
xchg
xchg
arpl
add
gs
ret
pop
xor
xchg
mov
xchg
inc
sbb
mov
mov
and
xchg
jmp
xor
popa
inc
imul
and
dec
adc
inc
je
out
push
xchg
fsubp
pop
pop
or
outs
sar
jnp
mov
mov
cmp
mov
ret
lock
repnz
das
dec
lock
ret
push
mov
icebp
cmps
add
fidiv
add
mov
outs
sub
scas
mov
das
arpl
add
enter
xor
es
stos
and
jle
fdivr
push
into
mov
test
enter
add
mov
das
ret
adc
sub
cmp
neg
adc
xor
je
jno
es
push
add
and
retf
stos
nop
loope
dec
lahf
and
push
neg
xchg
mov
sahf
and
inc
lock
and
xchg
push
inc
cmps
cmp
push
pop
es
dec
cmovle
mov
sbb
jecxz
mov
or
jno
add
call
retf
or
dec
repnz
adc
mov
into
push
push
add
jge
inc
cwde
push
(bad)
cmp
or
sub
mov
aas
adc
inc
pop
inc
sub
mov
or
sahf
jp
add
sub
out
jmp
retf
and
dec
popf
gs
push
mov
pop
lods
or
jbe
cmp
les
and
xchg
dec
jle
(bad)
les
sbb
fisub
mov
xchg
scas
call
(bad)
sub
mov
lock
and
ret
or
sub
daa
or
and
and
dec
sub
ret
cs
mov
xchg
push
mov
retf
or
and
dec
jmp
nop
ret
and
add
retf
aaa
mov
or
sbb
ret
inc
ja
mov
fs
mov
fs
pop
push
xchg
xor
outs
pop
xchg
popa
push
dec
mov
test
sbb
(bad)
(bad)
lahf
mov
or
or
lea
nop
out
(bad)
jb
sbb
dec
into
jp
pop
or
jo
xor
ret
test
loop
mov
loope
dec
into
jmp
adc
mov
dec
dec
mov
into
add
sbb
mov
dec
push
jle
loope
mov
dec
dec
mov
icebp
gs
inc
or
repz
out
(bad)
mov
(bad)
aaa
and
imul
dec
mov
mov
iret
pusha
sub
(bad)
mov
push
bound
lods
lds
xchg
inc
and
push
faddp
xor
cmp
out
adc
sub
and
fcomp
adc
test
test
aam
loop
or
sub
call
daa
loop
ret
cmp
jb
inc
and
dec
(bad)
jbe
add
mov
and
mov
mov
push
pop
dec
fisubr
push
fsub
jbe
inc
das
or
cmps
mov
jmp
push
ss
mov
xchg
out
pop
sbb
sub
sub
jo
and
stos
xchg
jb
adc
cdq
pop
es
add
outs
mov
jb
xlat
xor
cmps
cli
lock
or
xchg
jp
jp
xor
adc
cmp
sar
push
mov
mov
sbb
test
or
cli
jle
cmp
loope
mov
sub
sbb
push
dec
call
retf
daa
or
lods
adc
add
pop
adc
inc
mov
add
cmpps
and
loope
imul
mov
xor
jle
popf
loopne
(bad)
ss
pop
push
push
push
dec
loop
mov
jb
outs
adc
mov
inc
mov
je
retf
adc
dec
fidiv
dec
stos
clc
aas
sub
mov
mov
xchg
retf
cwde
cmps
jmp
sub
(bad)
fsubp
sbb
jmp
lods
and
push
xor
push
loop
push
mul
sbb
mov
sbb
and
rol
xchg
pusha
dec
loop
shl
mov
es
push
cmovno
loop
xor
jmp
ret
sub
or
daa
mov
into
loop
cwde
xchg
inc
mov
cmps
mov
mov
and
inc
mov
movs
mov
dec
mov
or
xchg
xchg
pushf
push
add
dec
data16
push
jp
mov
mov
mov
ds
shr
mov
pop
jecxz
adc
jp
out
loop
(bad)
dec
repnz
js
fstp
push
test
cmps
push
push
rcl
lea
jb
add
out
retf
xor
idiv
sahf
xor
test
push
add
mov
adc
les
arpl
cwde
or
mov
push
push
outs
xor
inc
bound
xor
dec
(bad)
pushf
rol
jno
call
sub
sub
fcmove
dec
outs
lea
xchg
loop
dec
xchg
xlat
ficomp
xchg
xor
mov
xchg
in
sub
xchg
jg
pop
sbb
inc
push
pop
dec
dec
mov
xchg
mov
popf
out
sub
test
clc
test
imul
adc
inc
loop
cmp
push
ficom
xchg
ins
into
cs
test
pusha
cmc
div
mov
pop
sub
popa
adc
cmp
stos
push
xchg
nop
repnz
or
loopne
aad
cmp
pop
pop
scas
mov
ret
imul
mov
pop
push
sub
repnz
out
lds
sbb
add
and
outs
sbb
(bad)
jbe
movs
test
mov
js
pop
wbinvd
(bad)
cli
dec
mov
sbb
jmp
adc
popa
sub
enter
and
lods
cmp
jb
dec
smsw
push
mov
loopne
push
repnz
inc
pushf
mov
fiadd
retf
retf
or
mov
or
pop
sbb
adc
pop
loop
dec
sbb
aaa
inc
add
push
jle
push
rol
into
pop
inc
push
(bad)
dec
and
and
adc
mov
xchg
jns
sbb
into
sbb
ret
add
mov
or
jp
(bad)
outs
and
or
popa
cmp
adc
mov
or
shl
icebp
push
jle
data16
add
push
xor
cmps
xlat
rcr
bound
es
mov
xchg
pop
cmp
arpl
inc
push
xchg
add
mov
mov
pop
add
cwde
sbb
out
shl
call
mov
(bad)
cs
xchg
pushf
xor
xchg
push
or
into
ret
or
into
add
xchg
fs
and
popf
lods
xor
push
lea
(bad)
xchg
pop
sar
mov
adc
pushf
out
out
rcl
leave
or
in
mov
or
out
xor
push
jmp
pop
retf
add
mov
cmps
adc
cmps
push
push
xchg
popa
dec
sub
xchg
retf
(bad)
add
add
daa
or
in
pop
in
je
push
repnz
adc
and
cmp
ret
ret
mov
jp
dec
out
sub
mov
out
and
sub
movs
push
sbb
retf
inc
or
pop
nop
das
mov
outs
push
pop
jo
int3
pop
repz
add
push
cdq
push
sub
icebp
sbb
ds
popf
inc
or
jmp
into
(bad)
and
cmp
xor
mov
push
inc
xor
daa
jno
jp
lock
test
mov
out
push
not
sub
mov
add
xchg
ds
xor
cmp
mov
mov
mov
pop
imul
ficomp
cmp
bound
add
daa
push
jo
call
mov
xchg
cmps
aad
nop
mov
add
sahf
arpl
pop
repnz
push
cs
cmps
mov
sbb
xor
addr16
dec
mov
adc
mov
ret
pop
jle
push
and
movs
mov
cmp
enter
mov
mov
or
pop
sbb
push
nop
jns
fwait
shr
xchg
movs
ror
test
jp
push
or
or
or
outs
add
inc
sbb
dec
cmp
push
xchg
cs
sbb
pop
add
inc
push
push
dec
bound
push
jmp
xchg
or
push
push
les
xor
push
add
push
push
cmps
mov
jmp
pusha
(bad)
push
add
adc
xchg
outs
xor
fisubr
adc
mov
xor
push
dec
fcmovbe
inc
bound
or
stos
pop
sahf
sbb
inc
lea
xchg
cmp
test
jecxz
outs
jbe
daa
pop
pop
cs
inc
repnz
cmp
inc
jg
sub
stos
and
and
and
push
jg
les
inc
leave
add
ret
add
inc
xor
mov
xchg
push
pop
arpl
cmp
and
mov
xor
or
push
sbb
or
das
and
rcr
mov
mov
add
test
ficom
enter
jo
lea
bound
add
dec
push
pusha
sbb
outs
leave
pop
cmp
push
add
retf
jo
xor
pop
movs
xor
xchg
(bad)
mov
in
jae
dec
or
nop
jecxz
(bad)
push
push
repnz
popa
gs
fist
adc
scas
cmp
gs
mov
ss
adc
outs
test
fimul
push
test
mov
pushf
mov
retf
sub
mov
outs
and
call
fcomp
and
data16
loop
inc
das
adc
add
and
push
pop
dec
or
shr
inc
push
mov
push
xor
pop
ror
inc
push
outs
inc
js
cmp
push
cmp
cmp
adc
xor
adc
add
pop
xchg
leave
jnp
sbb
or
push
jp
push
mov
nop
out
sub
cdq
jno
outs
inc
add
outs
push
mov
arpl
fild
pusha
rol
nop
xor
add
and
mov
data16
fadd
sahf
iret
push
pop
jecxz
and
mov
daa
test
out
pop
dec
jo
and
dec
cmp
pop
mov
mov
pusha
scas
sbb
xor
inc
into
ret
xor
dec
or
ror
ret
pop
mov
cmp
scas
mov
fcmovb
or
adc
mov
shl
xor
cmp
push
mov
rcl
or
xchg
cmps
das
bound
jmp
inc
repz
mov
outs
fidiv
sahf
inc
jb
pop
xchg
mov
xchg
aam
es
ror
push
add
imul
sbb
jmp
test
jb
add
lahf
push
outs
push
cli
rol
lock
mov
sub
jecxz
push
adc
and
push
sub
mov
outs
rcl
ret
or
out
mov
mov
xor
es
jbe
sar
(bad)
pop
mov
js
adc
test
sub
or
cli
mov
lock
ror
cwde
push
enter
inc
mov
pop
(bad)
push
sbb
imul
daa
movs
into
push
add
scas
adc
mov
gs
mov
inc
jecxz
add
ret
add
xchg
cmps
mov
xor
push
mov
(bad)
ficom
cmp
(bad)
add
and
mov
jno
jle
and
pop
dec
jle
push
pop
outs
bound
add
or
bswap
add
pusha
sbb
add
sbb
popf
cmps
adc
dec
push
xchg
outs
adc
cwde
fidivr
ss
sbb
sbb
movs
jno
pop
nop/reserved
mov
mov
and
ss
in
(bad)
rcr
sbb
or
xchg
daa
pop
pop
ds
xchg
jb
push
adc
bound
lock
test
mov
jo
call
(bad)
dec
rcr
xchg
into
mov
ds
ret
ret
mov
scas
test
xor
push
push
adc
sahf
into
fidivr
push
shl
pushw
or
inc
jmp
scas
test
fcomp
aam
mov
bound
daa
sub
or
add
call
pop
sbb
sbb
cs
mov
mov
xchg
mov
jae
pop
mov
mov
or
ss
hlt
jo
or
inc
pop
movs
sub
ds
or
pop
dec
push
xchg
and
js
push
daa
mov
sub
movs
retf
popf
int3
ins
pop
and
(bad)
jmp
or
or
pop
bound
repnz
ror
test
sar
sbb
bnd
or
and
out
aas
inc
add
sbb
pushf
adc
xchg
ret
cmc
movs
sub
outs
adc
inc
pop
cmps
sar
jnp
rcl
dec
push
mov
or
(bad)
(bad)
push
pop
push
push
push
mov
add
mov
jle
mov
xor
jno
and
neg
cmps
(bad)
jb
and
pop
inc
sbb
and
lods
dec
test
inc
(bad)
inc
rcl
scas
mov
xchg
fisub
xchg
xor
or
mov
stos
and
add
rcr
push
es
inc
ret
jo
and
(bad)
pop
pop
or
movs
xor
dec
add
mov
and
pop
adc
inc
jp
push
xchg
pop
pop
fimul
xchg
gs
xchg
add
inc
out
or
popf
mov
add
loope
adc
stos
cwde
pop
je
sbb
add
sub
or
dec
into
rcl
xor
rcr
and
jmp
pop
aaa
sbb
adc
pop
cmovns
jo
xchg
data16
adc
jg
jle
jge
and
ds
sub
cmp
inc
jmpw
push
dec
das
push
sub
or
xchg
dec
sbb
shr
enter
jg
jmp
cs
xor
cmp
lea
mov
ss
xor
or
add
push
dec
cmp
jecxz
data16
jmp
jb
mov
(bad)
aas
push
push
push
mov
outs
xchg
int3
mov
inc
xchg
mov
jmp
cs
out
(bad)
sbb
sbb
mov
push
es
mov
mov
add
mov
xor
and
mov
mov
adc
add
add
test
pop
call
bound
mov
sahf
dec
sub
dec
pop
xor
inc
bound
or
fsubp
xchg
test
jbe
xchg
pusha
test
mov
push
es
or
jle
xchg
push
(bad)
js
cmps
sbb
cmp
or
je
xor
(bad)
sub
cmp
or
mov
jmp
dec
cmp
inc
cmps
push
push
outs
pop
add
xchg
sar
mov
into
mov
push
sbb
into
cmp
xor
sub
iret
into
test
lods
lods
cmp
and
nop
iret
xchg
hlt
and
inc
mov
shr
es
into
das
pop
adc
mov
lock
rcl
add
out
inc
inc
popa
out
jle
jo
or
rol
popf
sbb
inc
or
pop
sbb
push
stos
and
push
pop
push
sbb
dec
or
mov
cmp
retf
loopne
sub
push
aad
aam
data16
push
lahf
jbe
adc
mov
repz
mov
jp
mov
push
dec
divps
cmp
sbb
and
mov
pop
data16
sbb
mov
and
add
xor
out
xchg
inc
dec
pop
jmp
mov
lock
push
fcom
inc
cmp
loopne
dec
ret
(bad)
add
mov
dec
ror
pusha
mov
sahf
add
sahf
mov
xor
xor
sbb
rcl
mov
cmp
xchg
pushf
fisttp
mov
mov
xchg
and
retf
and
jecxz
psubsw
outs
push
popfw
and
adc
scas
cmps
inc
add
retf
mov
mov
cmp
mov
mov
stos
mov
jle
loopne
arpl
into
mov
popa
pop
xor
ss
dec
sets
or
inc
cli
stos
add
xor
cmp
pop
sbb
ret
sbb
cmps
(bad)
add
daa
sub
inc
(bad)
pop
outs
jp
imul
xchg
stos
xchg
dec
js
(bad)
cmps
in
mov
out
fidiv
pop
iret
sar
push
jle
xchg
enter
ds
pop
push
and
(bad)
call
out
sub
(bad)
xor
xchg
scas
xchg
cmp
shl
xchg
adc
add
xchg
sbb
popa
dec
or
lahf
pop
pop
sub
xor
leave
outs
inc
dec
pop
add
and
xor
es
pop
rcr
or
sub
stos
(bad)
push
cmp
loop
mov
add
mov
dec
inc
pushf
add
pop
in
ds
push
les
add
mov
add
mov
inc
push
xlat
call
cli
add
(bad)
xor
pop
jbe
dec
fld
sub
mov
mov
cmp
and
dec
xor
xor
imul
push
inc
xchg
cmp
rol
push
mov
das
call
mov
add
xchg
xor
xchg
cmp
jmp
add
mov
into
lods
imul
add
dec
stos
jb
and
loopne
add
cs
push
mov
loop
cmp
mov
dec
jbe
cmp
sbb
mov
adc
(bad)
scas
push
xor
jge
das
inc
cmp
cmp
mov
nop
(bad)
mov
rcl
js
out
jb
cmp
sub
jp
mov
rol
scas
pop
xor
dec
jmp
dec
mov
jbe
pop
aam
bound
inc
or
xchg
and
pop
mov
and
push
push
adc
xchg
xchg
inc
bound
sbb
cli
mov
loopne
xchg
and
push
xchg
mov
inc
aas
jle
ret
add
ds
mov
shr
add
(bad)
outs
fadd
inc
cmps
shl
je
dec
js
repnz
add
pop
arpl
push
call
scas
(bad)
mov
inc
mov
add
sbb
mov
cmp
xor
ret
outs
inc
pop
rcr
(bad)
fidiv
pop
mul
rcr
repnz
mov
mov
mov
jnp
icebp
mov
jbe
call
xchg
mov
dec
mov
jb
pop
adc
nop
icebp
stos
nop
cmp
add
add
bound
inc
mov
mov
add
sbb
add
push
int3
shl
adc
xchg
jmp
cmp
ret
ret
jp
xchg
and
pop
or
and
retf
mov
cmp
bound
xchg
pop
inc
push
loop
pushf
sub
xchg
pop
(bad)
sbb
jb
jp
pop
ss
bound
or
add
or
mov
into
(bad)
sbb
xor
add
and
into
lea
push
push
jo
xor
rol
mov
xchg
cwde
push
add
outs
pop
dec
adc
adc
sbb
jecxz
fisubr
and
test
sub
pop
xchg
(bad)
jnp
mov
icebp
into
push
add
xor
xor
(bad)
ficom
inc
adc
rol
popa
(bad)
xsha1
cmps
dec
jmp
inc
jmp
xchg
adc
loopne
aaa
ret
lods
add
mov
pop
adc
call
push
ror
ret
nop
jle
push
(bad)
or
adc
(bad)
(bad)
and
sub
push
cli
and
pop
out
xchg
cmp
movs
sub
in
dec
ins
jp
and
add
xchg
push
pop
es
dec
loop
into
iret
mov
call
in
adc
dec
xchg
xor
sbb
push
cmp
stos
outs
fcom
outs
inc
arpl
cs
retf
fidivr
sbb
cmc
es
jbe
xchg
mov
mul
into
ror
ds
sbb
fiadd
add
jge
mov
or
and
into
mov
mov
ss
mov
sub
push
ss
aas
in
or
jnp
leave
and
dec
(bad)
adc
into
cmps
mov
jae
add
inc
cmp
idiv
jae
add
mov
dec
hlt
rcl
sbb
jecxz
xor
and
sub
pusha
and
add
dec
rol
push
jmp
into
xchg
lods
movs
icebp
dec
rcr
es
shl
push
adc
stos
add
clc
ds
aam
pop
adc
and
mov
ret
clc
mov
les
push
dec
mov
push
out
mov
pcmpeqd
adc
fsub
test
mov
push
sbb
lock
fcomp
cwde
push
jp
cli
fimul
and
(bad)
xor
lock
jbe
test
call
leave
dec
sahf
scas
jb
mov
lds
jae
bound
sbb
or
mov
inc
mov
lock
data16
jo
cs
popa
push
xor
mov
js
inc
ret
aam
xchg
not
dec
(bad)
outs
or
mov
push
nop
mov
mov
jo
repz
clc
sbb
xor
mov
xchg
dec
sub
aas
out
push
(bad)
push
in
mov
call
sahf
xchg
mov
mov
dec
jecxz
adc
push
movs
push
mov
xchg
call
sbb
inc
mov
cmps
cmps
inc
ror
or
stos
sub
sbb
jmp
outs
imul
dec
(bad)
pop
inc
inc
imul
and
sub
inc
enter
test
or
xchg
mov
or
(bad)
xchg
xchg
sub
add
or
push
jb
and
daa
out
or
stos
push
in
inc
push
jcxz
ror
xor
clc
or
xchg
test
mov
(bad)
mov
xchg
and
push
mov
mov
addr16
xchg
xchg
sbb
or
xor
and
xchg
push
pop
mov
xchg
pusha
xchg
fsubrp
xchg
loopne
sub
(bad)
adc
mov
scas
cmp
sub
cs
mov
inc
loope
mov
out
adc
imul
mov
jmp
mov
fcmovne
add
iret
pop
xchg
adc
nop
push
fidivr
or
ret
mov
mov
and
xchg
or
add
push
jb
loop
cmp
push
retf
(bad)
xor
(bad)
fs
dec
inc
mov
pop
sar
xchg
inc
or
dec
or
outs
ss
adc
ins
jne
retf
addr16
outs
xchg
or
dec
ds
stos
pop
xchg
xor
call
jbe
push
(bad)
push
(bad)
js
mov
inc
or
xchg
or
pop
push
or
fdivrp
xchg
out
cmp
(bad)
mov
adc
xchg
push
jp
dec
mov
mov
push
js
fistp
lods
inc
xor
js
mov
les
jb
rcr
dec
(bad)
sub
add
retf
inc
(bad)
push
out
outs
add
pop
daa
xchg
shl
push
(bad)
jb
push
lock
pop
rcl
das
push
or
enter
mov
inc
retf
loop
(bad)
push
cmp
jne
outs
push
pop
dec
add
call
cmp
aaa
ss
mov
stos
mov
dec
ds
or
sub
mov
imul
pop
test
or
xchg
push
dec
add
jb
jp
add
push
or
mov
cmp
ret
retf
pop
inc
xor
cmps
xchg
mov
bound
movs
shl
stos
call
popa
or
ficom
mov
or
(bad)
xor
or
inc
(bad)
and
ror
pop
and
add
mov
add
mov
stos
aaa
ror
into
sub
and
xchg
ror
mov
pop
push
arpl
sbb
xchg
test
div
daa
mov
and
add
fisub
cli
sahf
test
lahf
adc
dec
adc
dec
and
aam
dec
sbb
inc
push
fadd
add
lock
mov
cmp
sub
or
and
cs
push
loopne
or
mov
fwait
inc
(bad)
cmps
pop
sbb
cmp
add
mov
mov
mov
rcr
jb
bound
and
mov
aaa
dec
js
and
jbe
jp
ror
dec
adc
loopne
push
sbb
repnz
neg
cmc
adc
stos
sbb
addr16
add
dec
and
inc
xchg
push
mov
leave
and
sub
adc
sbb
dec
ret
add
cmp
pop
arpl
cwde
test
dec
jb
dec
adc
pusha
adc
sbb
sbb
inc
cmp
enter
out
clc
pushf
add
sar
cs
scas
sbb
sbb
mov
push
loop
mov
pop
ror
call
je
pop
pop
add
pop
cdq
jbe
loop
push
add
add
cli
mov
mov
fst
dec
mov
sahf
push
or
add
inc
lock
movs
push
jo
test
daa
xchg
retf
add
jmp
jo
dec
xchg
pop
daa
fisub
scas
dec
fdivr
ret
repnz
xchg
mov
mov
ss
sbb
push
sub
outs
adc
add
into
adc
test
loop
adc
dec
popa
or
aad
pop
inc
dec
pusha
imul
inc
adc
push
outs
adc
jb
sahf
cmps
addr16
dec
sub
mov
lods
(bad)
dec
out
jp
les
mov
or
add
lock
mov
mov
xchg
jne
sar
and
out
inc
mov
lea
imul
ins
ins
mov
enter
adc
in
enter
out
pop
or
add
dec
call
dec
pop
inc
neg
jmp
add
adc
fidivr
sub
or
pop
sbb
xchg
dec
(bad)
and
mov
loop
inc
dec
mov
mov
pop
ret
outs
xchg
mov
sbb
pop
xchg
popa
xor
cmps
sbb
ror
cmp
push
imul
adc
dec
push
mul
push
fdivr
pop
cmp
ret
ficomp
lods
inc
mov
dec
pusha
inc
xor
pop
adc
sub
dec
pop
dec
lahf
enter
lods
add
aas
xor
movs
push
test
mov
js
mov
outs
mov
js
fcom
cmp
sbb
jecxz
test
and
xor
mov
add
push
into
or
or
call
lahf
sub
pop
add
jae
lods
sub
das
adc
mov
sahf
nop
or
mov
icebp
mov
(bad)
jmp
ds
jmp
add
test
sbb
pop
fs
push
fcomp
les
jp
inc
jo
xchg
ret
movs
mov
(bad)
mov
ret
sub
sub
xchg
xchg
inc
data16
idiv
dec
pop
push
mov
mov
(bad)
cmps
fistp
inc
mov
popf
imul
data16
imul
sahf
xchg
mov
xchg
cli
adc
shl
or
dec
fist
pop
inc
popf
mov
add
push
ret
mov
push
js
rcl
add
sbb
add
(bad)
pop
sbb
or
ds
cmps
cmp
cmc
add
mov
lahf
pop
or
dec
clc
div
lahf
cmp
inc
sbb
sub
xor
ret
dec
sub
bnd
and
and
xor
dec
rcr
pop
adc
jmp
or
adc
xchg
enter
dec
dec
or
fst
and
push
out
add
mov
adc
jp
dec
pop
xchg
rol
mov
cmps
inc
xchg
test
out
mov
test
push
loopne
pop
mov
(bad)
dec
adc
cli
inc
jge
add
scas
mov
outs
xchg
xor
ret
add
cmp
xor
cdq
dec
or
fisub
mov
mov
add
outs
xor
or
push
scas
rcr
mov
xchg
pop
enter
jmp
loop
call
dec
push
and
(bad)
imul
mov
scas
xchg
adc
cmp
pop
das
sbb
xor
add
mov
inc
mov
cmp
mov
inc
test
sahf
mov
das
mov
jb
pushf
loope
ds
iret
enter
or
sahf
add
ins
mov
push
jb
xchg
call
or
and
mov
out
add
jp
bnd
dec
cmp
cmp
clc
iret
add
rcl
sahf
xchg
sti
dec
sbb
das
shr
push
pop
sub
add
sbb
aas
cmp
mov
push
ret
jp
mov
dec
call
mov
xchg
push
mov
add
js
mov
adc
add
cmp
pusha
ret
or
sbb
pop
sbb
push
popa
pusha
inc
sbb
push
movs
and
mov
ds
retf
sub
call
sub
(bad)
xchg
dec
out
xchg
ja
pop
lock
add
mov
push
xchg
and
lods
into
nop
or
dec
adc
and
fcomp
test
sbb
jecxz
xchg
movs
xor
sub
adc
xor
adc
jmp
outs
shl
loopne
into
cmps
push
pop
adc
push
push
outs
aam
mov
inc
pop
cmp
xchg
movs
fadd
aas
sbb
(bad)
arpl
adc
cmc
jp
push
xor
push
xlat
jmp
or
test
mov
rcr
cmps
dec
mov
(bad)
jmp
push
xor
xor
push
ret
pop
adc
add
dec
or
xchg
pop
loop
xor
pop
push
push
sahf
push
mov
enter
dec
pop
or
adc
rol
scas
sbb
(bad)
rol
pop
push
pop
cmp
push
dec
out
push
outs
into
adc
loop
add
push
and
pushw
(bad)
sbb
dec
jbe
out
mov
adc
mov
stos
mov
dec
test
cmp
pop
stos
ss
add
retf
sbb
pop
retf
xor
sub
add
inc
jmp
dec
add
push
fiadd
(bad)
xchg
xor
push
mov
nop
push
pop
or
cmp
ret
(bad)
jmp
leave
mov
add
call
jb
adc
and
pop
ss
adc
data16
cmps
jb
mov
(bad)
mov
add
ret
or
(bad)
ret
xor
data16
stos
aaa
add
idiv
fidiv
or
(bad)
out
push
ds
loopne
loope
mov
mov
push
sub
ins
and
scas
xchg
lods
and
rol
dec
mov
xchg
loop
fwait
cli
sbb
call
daa
out
cmps
cmp
js
xchg
inc
xor
pop
rcl
push
stos
push
xchg
inc
daa
sahf
scas
outs
dec
inc
adc
or
adc
cmps
out
xor
cmc
into
fwait
ds
test
adc
mov
pop
out
loop
jecxz
push
das
cs
call
inc
cmp
cmp
call
sub
in
and
pop
(bad)
ret
adc
dec
pop
loop
add
sub
es
push
add
jmp
xchg
jmp
mov
xchg
push
inc
jb
dec
fbstp
push
(bad)
(bad)
das
or
or
push
adc
cmp
dec
adc
sbb
mov
daa
sub
push
xor
xor
push
test
push
dec
imul
cmps
loopne
imul
adc
rcr
add
xor
and
(bad)
mov
adc
pushf
pusha
lea
pop
movs
push
out
lea
add
cmp
mov
int3
xor
xchg
ret
ss
mov
and
xor
fiadd
lock
sbb
dec
ja
out
in
add
ficomp
or
movs
xchg
sub
pop
pop
pop
data16
(bad)
ficom
ds
jmp
sub
pop
add
or
jecxz
dec
pop
cs
arpl
inc
jecxz
repnz
repnz
adc
outs
xchg
add
pusha
out
adc
cs
mov
and
mov
xor
adc
xor
jmp
dec
mul
mov
and
cmps
push
push
push
addr16
cmp
mov
jp
ret
lods
inc
out
into
push
dec
push
adc
mov
and
call
mov
xor
sub
mov
xor
and
cli
sbb
mov
jp
scas
pop
rcr
cmp
repz
lods
popa
jbe
push
cmp
push
push
fs
ror
sub
ret
mov
(bad)
lock
jmp
add
pop
out
push
test
sbb
(bad)
pusha
inc
mov
adc
push
push
xor
xor
mov
(bad)
xchg
ret
inc
xlat
sbb
dec
or
push
mov
mov
or
cs
js
and
sbb
xchg
mov
xlat
push
push
pop
and
jb
retf
xchg
add
mov
or
test
push
cdq
xchg
xchg
push
or
jmp
cmp
pop
retf
addr16
(bad)
(bad)
clc
jp
das
ret
inc
push
xor
pop
add
or
test
mov
jecxz
sbb
retf
test
sbb
fisub
add
(bad)
repnz
xor
fcmovbe
aam
pop
add
xchg
mov
test
call
fadd
cs
cmp
adc
pop
(bad)
or
push
push
aad
xchg
adc
and
add
cli
xchg
ds
mov
test
into
call
mov
lods
xchg
jp
adc
call
sbb
xchg
mov
adc
mov
outs
(bad)
pop
mov
xchg
xchg
jbe
adc
dec
fsubp
mov
bound
shl
mov
mov
sbb
pop
pop
inc
push
and
arpl
dec
pop
repnz
loopne
add
jb
mov
lea
pop
and
adc
push
out
push
pop
dec
inc
pusha
das
ret
nop
xchg
inc
pop
repnz
inc
gs
ds
add
retf
shl
push
mov
xchg
push
mov
and
mov
pop
xchg
adc
push
push
cmps
out
push
sbb
sbb
add
adc
fmul
mov
das
ds
pop
sbb
and
call
mov
ret
sub
jo
daa
jle
push
adc
inc
repz
sbb
sbb
aad
adc
test
adc
sbb
dec
mov
(bad)
push
loopne
cmp
out
sbb
es
shl
sub
pop
push
mov
jp
mov
xor
pop
pop
xor
(bad)
xor
push
leave
bound
lock
xchg
repnz
rcr
push
sbb
sar
scas
pop
mov
ret
jbe
popf
add
mov
(bad)
arpl
cmp
in
xchg
test
sbb
ret
lahf
sbb
and
jp
pop
cs
ds
pop
das
dec
out
outs
movs
daa
je
cli
mov
pusha
jbe
enter
xchg
or
cli
sbb
jb
sub
mov
gs
add
fdivr
jbe
into
inc
xchg
cmps
xor
out
cmp
movs
sub
(bad)
or
jo
jae
neg
push
sub
jmp
inc
pop
js
and
aad
or
mov
sbb
and
pop
or
ins
retf
inc
sahf
enter
sub
push
inc
and
inc
sub
add
pop
push
out
or
ins
or
into
sbb
out
call
cmp
test
cmp
cmc
adc
or
sub
push
movs
pop
sahf
cmp
rol
fidiv
ds
sbb
inc
add
ret
inc
daa
dec
or
mov
(bad)
jg
mov
sahf
push
adc
mov
sub
mov
adc
test
mov
jp
pop
jmp
fist
sub
or
(bad)
retf
xchg
cmp
rcr
push
inc
push
ss
add
les
xchg
sbb
repnz
dec
loope
call
dec
mov
imul
in
mov
or
add
test
rcl
(bad)
sahf
(bad)
or
call
add
retf
cmp
xchg
pop
arpl
into
out
dec
loop
push
pushw
fsubr
and
or
ret
add
jg
sub
sbb
push
ds
ret
call
mov
inc
jne
xor
test
add
inc
push
jp
leave
jb
inc
lahf
into
inc
add
sbb
jmp
and
fiadd
loop
add
adc
(bad)
jg
add
xor
sbb
imul
inc
adc
aaa
dec
and
add
loop
ret
sar
xor
push
(bad)
inc
inc
aam
sahf
call
cli
dec
popa
mov
sbb
inc
push
(bad)
mov
and
pop
and
js
or
out
jl
mov
(bad)
scas
loopne
adc
outs
rol
push
mov
jb
lea
xchg
out
jo
pushf
nop
inc
push
or
push
push
arpl
ss
scas
push
test
dec
sub
mov
mov
jno
jne
outs
loop
mov
push
or
sbb
adc
add
xor
dec
xchg
test
or
adc
mov
mov
pop
out
and
and
jg
cmp
mov
push
push
pop
repnz
add
repnz
sub
lock
loopne
add
rcl
adc
ja
or
daa
ds
sahf
pop
or
adc
fiadd
popa
test
sbb
iret
mov
popf
sbb
mov
rcl
push
rol
xchg
loope
mov
jmp
test
test
inc
mov
ret
cmps
dec
cmp
fiadd
pop
adc
lods
or
into
shr
add
cli
xchg
movs
xor
out
cs
or
sub
pop
dec
cmc
dec
dec
mov
add
ror
xchg
cmp
pusha
dec
jecxz
ins
mov
adc
add
sahf
loop
sbb
xor
xor
dec
fadd
aaa
inc
cdq
inc
out
call
mov
add
add
and
push
or
fidiv
fs
ss
or
adc
in
ins
ret
outs
push
push
jle
data16
mov
cs
mov
add
pop
sbb
xchg
mov
cmps
ret
cmp
cmps
jmp
ret
outs
ja
iret
dec
ret
push
adc
or
push
sahf
dec
cmp
lock
jbe
mov
cs
xor
lea
sbb
(bad)
mov
scas
mov
and
out
mov
femms
pop
jmp
outs
jmp
or
jmp
push
(bad)
xor
call
or
xor
jns
jp
fild
(bad)
loopne
dec
xchg
ins
ret
sbb
cmp
and
sbb
fmul
mov
sbb
mov
push
or
jecxz
retf
add
xchg
(bad)
scas
sub
and
and
imul
pusha
loop
ss
or
jne
ss
xchg
rol
pop
shl
rol
js
(bad)
cmp
loopne
xchg
pop
add
xor
(bad)
aam
sbb
bound
bound
and
xchg
addr16
mov
dec
lea
pop
sbb
fbstp
jo
and
inc
inc
mov
mov
add
into
sahf
jp
(bad)
shl
mov
inc
(bad)
push
(bad)
or
lock
cmp
mul
inc
not
je
cs
jne
pop
mov
sbb
jbe
sahf
fidiv
push
inc
push
adc
xor
ror
mov
add
aas
cli
xchg
inc
adc
arpl
xor
and
sbb
lods
dec
outs
mov
lods
adc
vorpd
mov
das
(bad)
xor
xchg
cmps
cs
mov
adc
sahf
es
add
add
mov
dec
es
clc
mov
retf
or
test
and
aaa
add
pop
add
outs
or
add
sbb
mov
scas
loop
cmps
push
(bad)
cwde
ret
adc
rcl
loop
mov
adc
pop
xchg
adc
enter
xchg
ret
or
cmp
mov
xchg
mov
(bad)
sub
(bad)
retf
add
pop
inc
push
inc
dec
retf
popa
daa
inc
lods
mov
mov
add
push
mov
hlt
mov
fsub
es
mov
call
pslld
adc
sahf
aam
xchg
pop
cmp
sbb
pop
int3
loope
push
add
dec
in
inc
add
nop
xor
sbb
sbb
fadd
push
add
and
test
cdq
push
data16
adc
retf
mov
mov
push
mov
mov
pop
or
test
dec
fimul
es
(bad)
xor
pop
mov
mov
push
or
adc
or
mov
ror
dec
and
or
test
mov
adc
jo
pop
fidiv
xor
push
out
rol
cwde
outs
sbb
pop
sbb
xchg
push
dec
pop
(bad)
xor
and
add
inc
lahf
sbb
xor
jbe
outs
push
sbb
adc
adc
rcl
jmp
xchg
cli
add
out
jp
push
fs
ds
jp
sbb
dec
test
add
push
dec
(bad)
xor
leave
adc
data16
cmc
xchg
ror
dec
xchg
cmp
sar
cmp
mov
mov
ret
inc
and
and
push
(bad)
or
adc
(bad)
sbb
fimul
xchg
sbb
push
push
jbe
fldcw
sub
ss
out
cmp
sub
not
mov
pop
arpl
test
inc
xor
(bad)
or
or
call
push
sub
(bad)
xlat
dec
cli
push
popa
dec
sub
jp
pop
ss
ret
cmp
adc
ret
jp
jnp
add
into
outs
cmp
dec
jmp
mov
imul
sub
push
xor
test
fcmovnb
das
inc
xchg
call
dec
dec
jnp
push
pop
ret
sub
aaa
mov
mov
xor
add
(bad)
outs
cmp
xchg
pop
or
and
outs
inc
mov
ret
or
bsf
ds
shl
or
add
outs
pushf
mov
inc
sub
jle
gs
inc
(bad)
jecxz
sbb
mov
ret
mov
ret
jmp
rcl
pushf
dec
iret
lods
push
mov
and
rcl
sbb
retf
add
sub
pushf
cmps
jp
xchg
push
xchg
dec
push
bound
xor
lock
mov
or
cmp
and
mov
mov
sub
push
xchg
adc
and
mov
push
xchg
xor
ds
push
jmp
push
push
icebp
push
adc
pop
xchg
mov
inc
push
and
jbe
jo
cmp
jo
push
mov
adc
pop
add
push
xor
mov
inc
add
fild
ret
mov
hlt
aam
cs
xchg
or
cmp
sub
inc
cwde
fiadd
lods
jp
adc
inc
cmp
pop
xchg
and
push
iret
cmp
outs
retf
mov
ret
scas
enter
es
ret
jp
mov
push
out
mov
xor
push
ss
gs
arpl
cmps
xor
mov
xchg
mov
mov
pop
arpl
push
mov
sub
cli
into
sbb
popa
jno
sub
push
fidiv
dec
mov
add
es
adc
call
sahf
adc
fsub
mov
or
inc
mov
jmp
mov
outs
add
inc
bswap
push
cmc
pop
xchg
xchg
ds
pop
loopne
rcr
pop
dec
inc
mov
addr16
add
push
xor
and
sar
mov
and
arpl
je
dec
mov
and
cmps
mov
add
cmp
sahf
fidivr
mov
push
adc
push
pop
push
push
mov
lods
dec
cmp
add
jl
test
(bad)
mov
call
rcr
push
xchg
dec
shr
add
daa
add
outs
sub
jmp
jle
out
pop
inc
xor
scas
mov
(bad)
lea
or
inc
mov
pop
push
add
mov
sar
mov
add
mov
dec
fidiv
dec
ja
ror
cmp
mov
jecxz
sbb
and
mov
adc
sahf
xor
sub
adc
dec
cmp
js
es
pop
add
gs
aad
pusha
sub
dec
sbb
bound
nop
and
push
xor
dec
add
sbb
xor
mov
stos
or
pop
sbb
mov
xchg
add
nop
or
and
scas
push
xchg
mov
sahf
ds
mov
gs
into
push
pusha
test
adc
mov
div
mov
mov
add
push
and
mov
ret
test
call
daa
xchg
jae
mov
add
dec
pusha
and
xchg
jb
add
add
dec
pop
push
or
adc
ror
push
dec
xchg
out
sbb
dec
push
xchg
cmp
jno
sub
add
bound
pop
mov
push
rcl
add
hlt
mov
mov
cmps
inc
ret
and
inc
add
inc
movq
xor
mov
inc
fisubr
mov
(bad)
inc
mov
xchg
(bad)
sahf
pop
or
inc
inc
ss
cmp
das
enter
outs
and
retf
ds
mov
js
inc
sbb
fcom
(bad)
or
and
mov
add
pusha
(bad)
xchg
scas
add
repz
or
bound
and
sbb
jns
xor
call
xchg
and
outs
or
retf
ret
cmp
mov
adc
xchg
(bad)
ds
and
push
outs
test
jno
mov
shl
and
nop
push
cmp
rcr
adc
dec
sahf
push
mov
(bad)
jb
adc
sub
shl
xor
mov
jg
add
or
jg
in
add
out
push
shr
xchg
jbe
call
retf
pop
ret
or
mov
sub
sbb
and
jle
push
gs
mov
mov
inc
pushf
adc
fcmovb
mov
ror
jne
dec
into
loopne
mov
and
cli
cmps
fiadd
push
lahf
ss
(bad)
ret
loop
xchg
push
push
mul
and
jg
daa
or
jbe
div
add
out
pop
popf
test
sbb
dec
inc
push
pop
cmp
scas
imul
mov
sbb
mov
jecxz
and
sbb
movs
and
scas
pop
adc
or
in
mov
data16
mov
xchg
(bad)
pop
or
xchg
pop
pushf
push
xor
push
arpl
arpl
jne
and
dec
das
dec
das
(bad)
and
mov
xor
fimul
mov
push
inc
or
shufps
cmp
mov
mov
sub
pop
and
ror
pop
addr16
dec
dec
cwde
mov
adc
call
shl
sbb
mov
pop
fidivr
sub
add
loopne
nop
push
ds
inc
dec
inc
adc
or
stos
xor
enter
out
jp
shl
push
mov
ficom
jecxz
jb
das
imul
fcomp
xchg
push
stos
cmp
pop
dec
das
or
(bad)
xor
(bad)
inc
or
xor
add
xor
leave
cs
push
xor
fdiv
jmp
ret
dec
ja
pushw
mov
ror
or
jmp
adc
push
jo
dec
lods
and
mov
cmp
leave
(bad)
jmp
inc
add
retf
enter
inc
mov
mov
rcr
stos
lock
arpl
mul
out
inc
imul
sahf
add
push
movsx
outs
inc
pop
imul
inc
or
jns
pop
dec
fidiv
jne
into
ret
inc
ret
into
and
shr
jle
sub
int3
mov
xchg
pusha
inc
das
mov
push
shl
cs
daa
inc
(bad)
rcl
into
adc
cli
xor
push
ss
call
inc
inc
jb
pop
mov
mov
or
push
or
dec
(bad)
das
into
push
int3
ins
jo
out
sahf
call
(bad)
xor
mov
into
retf
stos
push
(bad)
pop
mov
pop
call
mov
inc
mov
mov
push
cmps
or
sbb
dec
and
push
fbstp
ins
popf
push
push
cli
out
daa
mov
dec
pop
push
std
adc
xor
inc
xlat
and
bound
into
dec
rol
mov
jmp
mov
adc
xor
loope
jb
sahf
nop
and
pop
push
cmps
rol
pop
push
cmp
xor
push
or
(bad)
ss
push
mov
pop
out
outs
bound
or
xchg
sahf
mov
push
push
push
(bad)
or
cli
xchg
into
inc
inc
test
jmp
inc
dec
and
daa
sub
jp
push
loope
loop
mov
into
movs
cmp
out
retf
or
pop
pop
xchg
jp
cmp
mov
jmp
loop
nop
aam
mov
inc
enter
pop
jecxz
adc
ret
or
add
cmp
aam
imul
inc
inc
xchg
add
push
shr
mov
mov
(bad)
scas
es
enter
(bad)
push
pop
cmp
(bad)
cmp
retf
mov
scas
push
leave
rcl
mov
and
bound
cli
dec
sbb
popa
sub
jle
jecxz
movs
or
mov
xor
ret
fiadd
ds
mov
cli
xchg
pushf
mov
out
xchg
xor
xchg
xor
push
cmp
push
scas
cmps
mov
ds
jmp
xor
cmps
xchg
dec
out
inc
cmp
xor
and
push
add
ret
pop
inc
iret
jecxz
lods
sub
lock
add
repz
ror
ret
xchg
xchg
ror
inc
xchg
pop
push
(bad)
inc
jb
and
sahf
cmps
sahf
adc
into
mov
inc
ret
je
inc
call
and
mov
loopne
movs
cmps
jo
push
jle
ret
xchg
push
cwde
push
addr16
push
(bad)
push
cmp
scas
pop
xchg
and
test
dec
pop
pop
adc
cmps
int3
les
sub
lods
add
xchg
adc
inc
mov
dec
dec
mov
fidiv
xchg
inc
lods
xor
pop
xor
js
ja
rcl
pop
(bad)
jecxz
cmp
pop
mov
sahf
push
sahf
push
add
jecxz
or
and
cmps
(bad)
nop
xor
push
mov
pop
inc
xchg
mov
jb
push
add
push
out
jp
sahf
jb
dec
out
push
push
sbb
and
popa
adc
mov
clc
xchg
mov
push
sbb
jb
aas
pop
mov
into
scas
pusha
jmp
push
(bad)
loopne
or
xor
popa
outs
rol
mov
mov
push
pop
ds
mov
into
and
sbb
inc
mov
pop
fsub
imul
mov
inc
adc
push
ret
or
inc
sub
ret
or
jno
push
bound
rcl
hlt
and
mov
mov
dec
dec
mov
inc
es
dec
and
addr16
pop
mul
sub
jb
xor
scas
xchg
xchg
mov
icebp
pusha
inc
push
mov
mov
pop
mov
pop
add
xchg
xchg
dec
inc
je
sbb
ja
dec
mov
or
call
inc
rcr
fidiv
add
jnp
push
scas
imul
retf
into
mov
out
jb
xor
or
pop
jbe
pop
adc
xor
jle
push
fiadd
mov
mov
push
nop
fild
imul
movs
(bad)
adc
daa
fadd
pop
mov
pop
pop
das
adc
and
xlat
pop
inc
inc
mov
loopne
and
(bad)
test
and
aaa
add
cdq
aam
pusha
add
lock
push
cmp
jno
push
push
or
pop
lahf
mov
lods
xchg
dec
mov
adc
dec
retf
or
repnz
movs
and
and
loop
mov
dec
shr
test
dec
jp
pusha
inc
pushf
sbb
mov
inc
mov
imul
add
mov
into
cmp
out
inc
xlat
and
cmp
pop
push
or
shl
jle
ret
pop
stos
retf
daa
pop
xlat
outs
mov
dec
test
dec
pop
jg
into
xor
xor
daa
cli
dec
pop
ret
push
xor
mov
and
mov
mov
repz
push
rol
mov
retf
scas
mov
outs
or
inc
dec
jp
loopne
test
jbe
mov
scas
out
or
cmp
into
cmps
dec
ret
jle
adc
inc
pushf
push
mov
cmps
(bad)
xchg
outs
xchg
test
dec
aam
xchg
xchg
xor
push
lods
lock
jg
daa
xchg
cwde
pop
sahf
jle
ficom
sbb
mov
inc
pop
and
and
adc
xchg
mov
(bad)
out
mov
pop
and
outs
adc
xor
xor
js
daa
mov
pop
fist
pop
ret
sbb
cs
add
or
lods
mov
sbb
lea
das
or
or
pop
sbb
push
icebp
js
pop
pop
(bad)
push
jne
xor
mov
adc
aaa
sahf
and
xor
jmp
dec
and
sbb
mov
(bad)
and
sbb
add
sbb
jecxz
and
sub
add
jp
mov
xchg
push
aam
adc
pop
jmp
ss
pusha
mov
mov
mov
(bad)
mov
xchg
stos
(bad)
cmp
sar
ret
xchg
push
sar
cli
call
sub
sbb
mov
pop
fst
sahf
push
les
popa
or
ss
(bad)
xchg
sahf
push
aaa
add
pop
and
lods
mov
movs
ret
inc
or
dec
es
add
mov
ret
gs
xchg
icebp
xor
sahf
fidivr
jmp
jecxz
into
sub
lock
cmp
lds
and
push
sub
push
imul
jbe
and
pop
dec
iret
push
in
inc
sub
aaa
push
mov
add
mov
adc
out
xor
leave
out
mov
(bad)
call
mov
cmp
aad
mov
pop
add
add
aam
sub
inc
push
inc
lea
mov
inc
push
(bad)
or
pusha
cmp
dec
sbb
rcr
iret
icebp
adc
inc
ja
add
mov
pushw
rol
mov
movs
ror
add
and
pop
mov
or
xor
(bad)
stos
cs
or
xor
jbe
or
add
mov
dec
pop
retf
push
and
jp
retf
add
cdq
add
scas
in
rol
sub
lea
out
outs
cmc
dec
or
jecxz
cmps
jo
jmp
call
pusha
mov
adc
jmp
fdivr
sbb
fsubrp
xchg
test
jp
mov
jo
retf
xchg
push
adc
or
adc
jmp
pop
or
inc
mov
loopne
xchg
add
push
xchg
imul
mov
je
aam
(bad)
adc
or
scas
xlat
bound
sub
or
inc
inc
xlat
pop
mov
shr
xor
jae
xchg
inc
add
adc
inc
inc
cmps
popa
mov
rcl
adc
dec
stos
xchg
dec
scas
retf
jne
mov
xor
mov
cmp
imul
out
adc
mov
add
sub
mov
enter
scas
add
add
jle
scas
test
(bad)
js
inc
jmp
mov
jbe
out
sahf
add
test
sbb
test
ret
add
mov
out
mov
pop
inc
stos
add
repnz
mov
mov
pop
push
mov
mov
push
addr16
and
xchg
cmps
and
test
push
out
fidiv
dec
xchg
mov
push
xor
xor
ret
push
movs
add
push
nop
sub
push
add
data16
pop
dec
icebp
xchg
outs
pop
dec
push
rol
xor
dec
cmps
(bad)
das
jmp
lahf
dec
mov
sbb
mov
adc
push
jecxz
into
add
loopne
(bad)
xor
xchg
xor
xor
mov
dec
sub
sahf
and
mov
out
cmp
(bad)
scas
mov
adc
retf
js
ins
pop
sbb
add
rcr
neg
call
mov
adc
adc
or
sbb
fiadd
imul
inc
sahf
mov
push
out
pop
pop
test
and
xchg
and
imul
cmps
push
pop
xchg
jmp
scas
ds
pop
fidivr
and
xchg
sbb
sbb
sbb
push
mov
mov
mov
inc
test
push
cmp
retf
fs
dec
or
stos
mov
mov
movs
sbb
nop
xchg
xchg
fld
push
shr
fidiv
arpl
xchg
out
xchg
loope
inc
dec
ficom
sub
cmp
dec
sub
push
dec
mov
cli
daa
and
loopne
push
sti
pushaw
dec
and
xchg
js
dec
sbb
sbb
xchg
xor
mov
ss
ficom
mov
dec
add
imul
mov
shl
movs
add
ret
nop
loop
call
push
xchg
sahf
rcr
outs
jno
ret
pop
push
cmp
xchg
mov
adc
outs
stos
push
jo
add
xor
addr16
pop
out
cmp
and
sub
out
sbb
jmp
test
aad
(bad)
sbb
test
out
pusha
sub
test
push
xchg
retf
fimul
das
jmp
xchg
gs
out
push
mov
add
jmp
and
loop
and
adc
es
dec
push
sbb
jecxz
mov
fsubrp
scas
jne
call
and
pop
outs
sbb
(bad)
push
cmp
push
sbb
pop
add
or
mov
push
or
adc
xchg
jb
adc
out
xchg
pusha
xor
(bad)
mov
out
and
push
push
and
sub
daa
push
xchg
inc
outs
cmp
into
out
inc
push
or
stos
push
adc
popa
sahf
outs
mov
xchg
mov
out
mov
lock
mov
pop
fcmovb
add
lods
sahf
ficomp
sbb
lods
outs
outs
push
pushf
iret
fidiv
mov
lds
test
pop
nop
mov
loope
(bad)
sbb
cdq
xchg
pop
mov
mov
nop
xchg
mov
and
outs
xchg
xchg
or
jle
imul
mov
sbb
xchg
pop
pop
mov
(bad)
int3
mov
sub
lea
pop
or
push
les
fisubr
stos
and
scas
test
push
xor
sub
or
dec
mov
sbb
(bad)
fisubr
sub
arpl
imul
nop
push
(bad)
dec
ret
add
gs
rol
pusha
fcmovb
ret
sbb
sub
inc
(bad)
ror
jo
cs
or
xor
push
outs
dec
or
pop
cs
lods
and
pop
enter
sub
out
imul
xor
ror
shr
leave
addr16
mov
or
sbb
jmp
or
call
outs
dec
test
(bad)
sbb
xchg
sbb
mov
and
mov
pop
inc
(bad)
shl
or
ss
les
mov
adc
mov
add
fcmovb
cwde
stos
dec
xchg
push
popa
or
sub
je
add
(bad)
out
nop
movs
enter
push
xor
sbb
push
fisttp
adc
sbb
push
addr16
sbb
jp
retf
and
xlat
or
dec
popf
mov
je
jle
dec
loope
add
fmulp
shr
mov
scas
inc
jp
sbb
push
test
inc
push
sahf
sbb
ss
inc
and
xchg
mov
jecxz
fmul
adc
mov
sbb
sti
xor
aaa
ret
loopne
pusha
xchg
or
ret
rcl
push
xor
outs
cmp
faddp
mov
outs
mov
xchg
jne
inc
retf
sbb
sub
and
mov
xor
push
push
push
repz
add
sldt
or
xchg
stos
aam
push
mov
xchg
cmc
ficomp
cmp
cmps
xchg
bnd
outs
mov
xchg
call
xchg
cwde
fisub
into
imul
cwde
fwait
cmp
ins
adc
sahf
xor
jne
push
push
test
mov
out
sbb
sbb
loop
or
ret
sub
(bad)
outs
outs
push
push
xchg
cmps
test
mov
push
adc
xor
add
sbb
mov
rol
cmp
mov
sbb
mov
nop
sbb
div
in
mov
ficomp
add
mov
push
rol
or
adc
div
les
fmulp
adc
inc
adc
retf
mov
inc
mov
into
outs
sbb
mov
fs
aad
jo
mov
mov
lods
in
mov
shl
sub
fnstenv
imul
xor
inc
push
push
push
call
sbb
popf
test
test
push
push
lods
pop
lock
push
jmp
bnd
add
mov
faddp
jecxz
push
inc
mov
jmp
bound
data16
xchg
mov
jmp
(bad)
js
mov
cmp
adc
pop
inc
sub
cmp
pusha
xchg
rcl
out
pop
enter
mov
adc
dec
inc
sub
nop
(bad)
mov
inc
dec
scas
xchg
scas
push
xor
push
fs
into
imul
outs
test
or
add
mov
pop
loope
repnz
push
ret
pusha
sub
mov
(bad)
xchg
add
retf
push
shl
push
mov
ins
popa
stos
es
adc
test
mov
push
mov
jo
or
loop
jp
aam
jg
pop
dec
leave
pop
sub
call
xor
loopne
ret
test
addr16
dec
xchg
push
dec
dec
pop
ror
cmp
dec
aam
adc
xor
ret
push
push
xchg
cdq
jb
and
pop
dec
jo
scas
pop
bound
sbb
xchg
(bad)
and
mov
cmps
in
test
cmp
sbb
out
add
dec
push
mov
das
jg
test
and
sar
ret
jnp
add
mov
adc
rcl
jmp
out
jb
out
xchg
hlt
mov
lea
xor
xchg
repnz
jmp
mov
adc
jp
inc
scas
data16
sbb
inc
rcr
sub
les
imul
mov
lock
or
div
xor
sbb
(bad)
cli
pop
cmp
js
lock
sahf
(bad)
jbe
sbb
cmp
xor
cmps
xor
fidivr
data16
retf
xor
btc
leave
test
add
and
add
mov
cmp
cmp
(bad)
fwait
data16
adc
retf
bound
aad
mov
icebp
xchg
fimul
sahf
sub
and
rcl
js
popa
pop
bound
stos
cmps
movs
xchg
xchg
ror
mov
sbb
imul
inc
mov
push
(bad)
neg
sbb
es
mov
or
push
sahf
bound
mov
test
lahf
push
sahf
mov
xchg
push
fidiv
sbb
arpl
stos
fsubr
cwde
fstp
call
sbb
test
or
or
inc
or
dec
or
ret
fisttp
sti
or
adc
pop
call
scas
mov
scas
add
cmps
jmp
dec
sahf
adc
mov
cmp
scas
ds
imul
rol
xor
aam
into
inc
ret
and
ret
inc
mov
mov
cmp
push
jp
mov
adc
sbb
push
sub
imul
mov
jg
or
mov
test
inc
stos
dec
adc
sahf
(bad)
inc
popf
mov
jg
rcr
xor
pop
nop
fisub
xchg
sub
retf
arpl
add
aad
imul
xchg
mov
inc
movs
jmp
cmp
aam
mov
dec
int3
retf
dec
das
jbe
in
adc
dec
pmaxub
cmp
outs
ror
sbb
test
cmp
sahf
add
xchg
cmps
loope
ret
dec
sbb
adc
jbe
sub
cmps
out
popf
or
mov
sbb
xor
add
or
out
dec
add
ret
movs
sub
ror
jbe
jb
hlt
popa
jns
push
mov
mov
mov
shr
ror
add
add
out
nop
repnz
arpl
or
or
adc
push
loop
jmp
mov
adc
movs
xchg
push
cli
dec
xchg
xchg
fisub
sub
pop
push
daa
and
or
push
ss
xchg
dec
pop
lahf
into
dec
mov
cmp
xchg
add
inc
xchg
sbb
mov
and
push
jnp
mov
push
mov
or
shr
mov
rcl
leave
scas
es
sbb
adc
das
cmp
outs
cmp
nop
add
es
mul
mov
(bad)
and
popa
sbb
ret
push
shl
sbb
jae
outs
add
push
push
or
jns
xchg
push
push
lahf
push
inc
add
sub
(bad)
adc
pop
adc
nop
adc
fdivr
leave
inc
rcl
or
push
cmp
ret
push
and
sub
dec
ss
(bad)
jmp
lods
add
or
retf
jbe
inc
outs
fldenv
xchg
mov
ret
mov
mov
jp
mov
sub
stos
push
retf
sub
xor
stos
test
adc
xor
rcr
pushf
es
inc
sbb
mov
or
ds
jo
xor
cs
push
arpl
cmp
mov
mov
inc
mul
xchg
test
push
mov
or
pop
leave
xor
cmps
and
rcr
ret
jge
push
cmp
cli
pop
push
loope
xchg
dec
mov
popa
ins
mov
sbb
pop
nop
out
jmp
dec
into
jo
fsub
xchg
ret
loopne
dec
packssdw
inc
movs
xor
add
adc
jle
jb
add
push
pop
xchg
and
ret
fcmovnb
ret
dec
repnz
ss
loopne
or
outs
push
ja
out
data16
sbb
sti
fld
cmp
repnz
mov
pop
add
(bad)
mov
ds
je
or
cmps
(bad)
popa
arpl
sahf
and
push
or
ficomp
add
dec
adc
dec
pusha
add
or
mov
pusha
pop
mov
or
add
ss
fdivr
(bad)
push
into
xchg
adc
mov
xor
sbb
loope
mov
xlat
ret
xchg
jns
or
mov
shl
(bad)
sub
sbb
fs
dec
mov
mov
dec
(bad)
(bad)
push
pop
fwait
rcr
test
sti
mov
inc
rol
out
imul
sbb
test
ret
or
xchg
adc
or
jbe
(bad)
arpl
mov
movs
cs
push
sbb
sbb
cmp
push
or
out
xchg
and
into
and
mov
(bad)
adc
dec
jl
xor
dec
mov
cmps
push
add
xchg
aas
(bad)
mov
mov
shl
and
verr
test
mov
push
dec
bound
mov
arpl
cmps
mov
xchg
lods
ins
gs
fiadd
imul
and
ins
loopne
push
pop
mov
lods
xor
xchg
fiadd
jp
cs
mov
shl
add
inc
repz
mov
bound
ret
add
mov
xor
jbe
inc
cmps
pop
jge
scas
sbb
retf
icebp
fimul
int3
sbb
hlt
jb
add
mov
xor
sti
add
lahf
enter
pop
fimul
cmp
xchg
pop
jle
sbb
ja
ret
or
mov
mov
(bad)
aad
rol
or
sub
and
push
add
iret
push
fmul
mov
mov
(bad)
xchg
push
pop
sbb
cmp
test
sbb
neg
mov
sbb
retf
pop
ror
(bad)
out
cdq
adc
rcr
loop
(bad)
aaa
loope
push
push
enter
fimul
xor
pop
adc
pop
dec
cwde
jb
dec
dec
cs
adc
jns
xor
ret
ret
les
add
sbb
ret
and
jmp
loop
push
(bad)
jle
sbb
test
test
ret
and
loop
and
push
sub
and
push
dec
mov
push
pushf
outs
jg
fsubr
fisub
(bad)
push
sbb
into
rcl
bound
test
pop
retf
mov
push
scas
xchg
sbb
push
add
pusha
outs
(bad)
xchg
ss
push
push
and
ret
(bad)
mov
mov
xor
dec
cmp
sahf
shl
xor
xchg
rol
(bad)
push
dec
jmp
inc
sbb
inc
jbe
les
ins
mov
add
cmp
pop
mov
iret
cmps
jns
add
push
add
and
sbb
push
push
repz
push
add
inc
mov
mov
mov
sub
add
xchg
ds
mov
hlt
jp
ds
inc
retf
push
outs
or
(bad)
scas
sbb
jmp
inc
jmp
jle
pop
das
sbb
bound
sub
dec
jmp
push
sbb
mov
pop
adc
mov
das
lods
and
or
or
(bad)
daa
xchg
or
or
cmp
pusha
mov
mov
fidivr
add
and
push
(bad)
push
push
xchg
jb
pusha
pushf
add
pop
or
and
mov
je
lods
ret
cmp
sahf
(bad)
bound
pushf
sahf
add
inc
data16
mov
mov
pop
dec
ds
(bad)
data16
pop
mov
aam
imul
test
add
stos
add
add
icebp
pop
dec
sar
push
xor
lock
xchg
xchg
neg
xchg
add
loop
and
das
sub
xor
daa
adc
loopne
fild
sub
inc
bnd
cmps
mov
add
push
cmps
push
add
(bad)
push
pop
mov
sub
sbb
mov
xchg
in
sub
sbb
neg
xor
jns
cmp
nop
dec
xchg
xchg
push
ret
test
mov
imul
xchg
(bad)
mov
out
mov
xchg
and
push
nop
call
mov
sbb
or
and
push
js
jns
jmp
push
(bad)
call
dec
aam
rcr
arpl
add
push
push
mov
movs
hlt
mov
scas
mov
mov
push
pop
daa
or
xor
add
loop
pusha
fst
test
inc
bound
and
outs
inc
sahf
pop
imul
or
add
cmps
xchg
rcr
add
add
mov
nop
mov
ss
sub
jle
push
cmp
sub
add
popf
push
into
inc
push
cmp
adc
retf
xor
mov
ins
dec
aas
retf
inc
mov
adc
adc
mov
xchg
dec
pop
jp
movups
and
pushf
mov
or
xor
push
mov
xchg
xor
ss
push
(bad)
popa
jbe
pop
(bad)
into
(bad)
lds
mov
jb
or
pop
push
sbb
xchg
cmps
movs
mov
daa
data16
dec
xor
and
dec
sbb
mov
fdivp
data16
dec
mov
je
pop
and
call
lds
or
loop
add
pop
push
repz
mov
loopne
sub
test
leave
adc
div
lahf
sub
jbe
xor
pop
les
ret
mov
outs
dec
ret
sub
(bad)
js
out
in
ret
ret
pushf
add
adc
cs
mov
push
dec
popf
and
cmp
pop
xor
enter
sub
push
add
data16
push
test
into
push
add
mov
add
test
pop
loop
push
jmp
jb
or
(bad)
shl
fistp
xor
mov
lock
(bad)
jo
test
push
push
sub
pop
push
xchg
xor
pop
push
inc
mov
adc
mov
push
and
add
cmps
push
mov
movs
jo
into
rol
cmp
dec
scas
dec
imul
xchg
cmps
(bad)
addr16
es
(bad)
adc
nop
lods
cmp
jbe
add
fdivr
push
retf
pop
adc
fimul
or
xchg
mov
sbb
mov
add
stos
pusha
and
dec
or
xchg
in
dec
and
add
rol
xchg
sbb
call
add
lock
ds
mov
jo
out
adc
xchg
mov
jp
ss
sub
sub
(bad)
retf
sbb
xchg
fsub
loopne
pop
mov
dec
pop
jle
iret
test
and
fdiv
cli
push
xor
sub
xor
leave
iret
ss
fidiv
(bad)
call
pop
pop
dec
(bad)
cwde
push
call
mov
sbb
test
xchg
jmp
adc
ds
jmp
xor
jle
imul
xor
jp
cmps
xchg
(bad)
fidiv
inc
pop
(bad)
cmps
inc
jbe
add
call
push
jb
loop
cmc
xchg
add
rcr
push
sub
enter
mov
not
(bad)
xchg
cmp
into
mov
mov
jle
xor
cmp
jp
fnstcw
test
or
(bad)
div
pop
dec
xchg
xchg
sub
add
push
into
inc
jbe
into
jmp
xchg
sahf
push
cmps
dec
inc
jmp
bound
enter
jo
mov
inc
pop
mov
ss
add
rcl
(bad)
xor
xchg
push
adc
outs
mov
sbb
imul
sti
mov
movs
test
cmp
test
cwde
out
neg
jne
adc
ret
jo
bound
mov
sbb
and
cmp
outs
ss
xor
xchg
or
pop
sbb
xchg
shl
cmp
into
test
push
dec
ret
jae
jl
js
sbb
hlt
mov
add
or
mov
cmps
(bad)
mov
adc
push
test
call
cdq
cmp
pop
das
adc
lock
mov
fdivp
retf
pop
nop
aas
push
(bad)
call
cli
dec
data16
rol
jb
sub
scas
mov
jae
jmp
adc
mov
xor
fisub
adc
sub
mov
dec
test
push
jo
retf
aam
into
mov
mov
popa
test
js
popa
aas
dec
nop
mov
xchg
xchg
mov
push
les
sbb
jno
icebp
adc
sbb
xchg
xor
sbb
sub
dec
jp
adc
fisub
inc
bound
inc
call
add
sar
add
repnz
je
not
fneni(8087
mov
dec
pop
jg
stos
ds
xchg
inc
mov
jle
cmp
pop
and
sahf
xchg
jno
dec
cmp
dec
adc
xor
sbb
pop
loop
leave
inc
pop
add
pop
and
lahf
scas
fs
(bad)
sub
cmc
push
pop
repz
jp
call
push
add
shl
cdq
ret
xor
xor
ret
sahf
or
inc
nop
push
mov
and
mov
outs
push
inc
mov
and
outs
cmc
movs
in
fiadd
or
test
pop
(bad)
adc
sub
fwait
scas
pop
push
xchg
lahf
adc
inc
test
push
sahf
call
bound
lods
scas
scas
mov
es
icebp
xor
cmp
hlt
lock
inc
sub
push
outs
dec
es
mov
inc
sbb
push
push
aad
and
sar
lahf
add
xchg
sti
nop
(bad)
test
sub
idiv
and
and
ins
cs
dec
sub
pop
(bad)
ds
push
cmp
xchg
xchg
mov
outs
mov
rcl
ds
inc
add
sub
mov
loopne
ss
dec
or
bound
cs
adc
enter
sahf
into
or
cs
out
ins
dec
or
xchg
jle
mov
sub
stos
ror
rol
ror
scas
cs
ds
jne
mov
xchg
fcom
(bad)
sti
mov
gs
scas
adc
push
imul
cmps
pop
inc
sbb
jp
scas
sbb
das
adc
xchg
xor
mov
cs
ror
push
push
pusha
or
(bad)
mov
mov
stos
sbb
pop
or
add
retf
stos
push
dec
dec
bound
sbb
inc
xchg
ds
xchg
out
dec
neg
jle
mov
adc
sub
add
push
nop
aam
add
xchg
push
imul
(bad)
xchg
cs
(bad)
xor
out
into
pop
push
push
sub
cdq
(bad)
dec
jbe
popa
dec
enter
repnz
jecxz
ret
or
lods
push
out
ret
or
(bad)
inc
sub
int3
cs
ret
outs
and
cmp
dec
mov
sbb
call
loopne
shl
rcl
not
fidivr
or
inc
lock
imul
lea
rol
out
inc
push
cmps
inc
loop
add
idiv
push
push
cdq
dec
retf
inc
out
iret
cmp
jle
inc
pop
add
mov
inc
es
mov
outs
ret
or
push
out
inc
add
retf
fnop
aam
jbe
(bad)
sahf
lea
ss
or
cmp
add
(bad)
inc
sbb
or
das
inc
inc
popa
add
mov
push
into
xchg
dec
bound
xchg
mov
jmp
cmps
data16
nop
dec
adc
lods
(bad)
jp
adc
idiv
pop
sub
xor
ret
add
mov
mov
mov
daa
adc
inc
popf
add
sub
stos
iret
jle
jp
and
cmp
fidivr
shl
popw
fs
pop
xor
push
or
test
push
inc
sbb
sub
push
ret
cli
fiadd
jo
add
or
aaa
dec
rcr
xchg
dec
pop
xchg
xchg
lock
bound
add
sub
(bad)
or
ror
adc
xchg
ror
data16
sbb
jb
or
sti
sahf
into
xchg
sub
nop
(bad)
mov
sub
ret
cmp
and
into
outs
add
jmp
repnz
stos
out
sbb
dec
adc
mov
inc
mov
(bad)
push
into
lods
add
ss
sbb
pop
sahf
inc
pop
mov
push
pop
mov
ret
cmp
jbe
outs
test
mov
ret
leave
push
jle
mov
sahf
loope
loope
push
jae
arpl
push
adc
jno
cmp
cmp
mov
inc
mov
cmp
rol
inc
div
mov
(bad)
(bad)
scas
outs
and
test
xor
sub
add
pop
mov
nop
xor
add
mov
das
ret
jb
pop
ror
inc
shr
sub
pusha
mov
mov
or
mov
mov
adc
jecxz
dec
(bad)
fisttp
push
in
outs
out
retf
jp
add
cmps
xor
cli
adc
dec
bound
or
inc
add
add
mov
inc
into
js
mov
cmp
jo
ja
repnz
pusha
(bad)
inc
retf
js
movs
aad
es
sbb
sbb
inc
dec
(bad)
jp
pop
sahf
(bad)
cs
test
add
sub
mov
push
bound
push
mov
ds
(bad)
(bad)
xchg
sahf
mov
enter
iret
add
and
jmp
dec
adc
xchg
cmp
jae
adc
rol
nop
adc
out
jmp
mov
cmp
add
push
pop
dec
jo
pop
ret
sbb
jge
stos
ret
fild
or
sub
xchg
sbb
out
movs
ret
mov
jb
dec
dec
jbe
neg
ficomp
fiadd
xchg
push
scas
scas
mov
jbe
inc
xchg
retf
xor
dec
jmp
es
cmp
inc
sbb
mov
pop
cmps
cmps
daa
loopne
mov
pusha
mov
outs
or
sub
retf
mov
sub
mov
push
fidiv
xchg
xor
test
push
sbb
repnz
fcmovnbe
rol
pop
scas
scas
or
pop
push
out
out
inc
pop
sbb
mov
xchg
xchg
add
push
jmp
mov
mov
or
xor
sbb
(bad)
enter
or
neg
retf
out
mov
add
pop
push
pushf
shr
push
iret
add
cmp
jle
dec
cmp
and
mov
dec
mov
retf
mov
jle
xchg
mov
sub
rol
sbb
data16
mov
push
sub
or
or
mov
push
loop
pusha
jbe
les
add
sbb
or
div
mov
xor
pusha
or
jbe
and
sbb
mov
shl
into
pop
jmp
dec
and
mov
adc
jmp
add
jbe
call
in
jmp
loop
xlat
sbb
push
mov
adc
outs
adc
add
mov
and
div
push
loope
cmps
dec
xchg
add
xchg
nop
xchg
add
jnp
push
test
in
fmul
mov
pop
jp
xchg
dec
mov
xchg
sbb
cdq
mov
pop
mov
bound
jbe
dec
push
inc
fmul
sahf
jb
adc
xor
cli
adc
popa
je
push
jbe
mov
sar
inc
mov
add
xor
repz
pop
movnti
out
loope
ret
enter
pop
sbb
xor
inc
cmp
ss
and
sbb
ret
je
xchg
(bad)
sub
js
les
push
sbb
shl
fldcw
shl
cmps
sub
xchg
add
pusha
mov
scas
retf
rcl
fld
adc
cdq
xchg
sub
fisub
je
iret
sub
dec
mov
nop
arpl
jmp
cmp
xor
stos
cli
sub
sahf
adc
(bad)
xchg
out
pop
and
xchg
and
mov
hlt
mov
adc
jp
rcr
bswap
pop
sub
cwde
pusha
sub
mov
xor
cmp
xor
pop
aas
inc
sub
or
push
ss
int3
jb
call
push
add
sbb
fwait
cmp
jae
and
dec
xor
mov
jbe
or
aaa
jb
add
pop
cs
dec
pop
(bad)
xchg
cmp
or
test
xor
add
(bad)
ret
pushw
rcl
cmps
push
div
outs
dec
daa
add
retf
xchg
mov
mov
and
jns
pop
pop
sar
or
cmp
xchg
cmps
scas
jmp
outs
mov
repnz
add
fidiv
sbb
add
xor
dec
or
add
mov
push
add
jns
js
dec
xchg
mov
pusha
sub
sbb
dec
(bad)
cli
ret
and
dec
cli
push
inc
cmp
xchg
or
adc
daa
push
cmp
mov
sub
outs
inc
mov
dec
add
xchg
and
adc
sahf
xchg
inc
(bad)
adc
fisub
or
ficom
xor
pop
sbb
cs
mov
push
scas
adc
inc
sbb
(bad)
push
into
push
popf
add
add
mov
cmc
cmp
loopne
or
mov
pop
adc
push
push
inc
daa
dec
inc
add
out
xor
add
in
(bad)
xor
pop
and
lods
mov
dec
cli
rcl
cmp
inc
cmp
sbb
fiadd
or
cmp
nop
pop
add
loop
mov
ds
xor
ret
loop
ret
adc
outs
jmp
cmps
pop
xor
xchg
neg
xchg
mov
xor
cmp
mov
retf
dec
test
mov
cmp
outs
jg
cmp
mov
or
les
aaa
push
dec
rol
ficomp
ja
adc
dec
mov
fld
inc
mov
mov
(bad)
add
or
sbb
test
iret
retf
daa
imul
add
pop
sub
pop
or
outs
cmps
mov
xchg
test
mov
aas
out
inc
xor
repnz
mov
rol
dec
scas
inc
or
or
scas
add
fisub
hlt
xor
(bad)
outs
fwait
mov
or
add
and
arpl
adc
inc
pusha
or
inc
ret
fcom
loope
or
or
loopne
rol
pusha
jno
ins
adc
push
inc
adc
or
or
pusha
xor
es
sub
adc
(bad)
ficom
and
fs
out
jmp
or
out
add
or
jp
addr16
sahf
mov
and
out
add
aam
les
push
mov
sbb
ds
outs
dec
jl
(bad)
shr
mov
xchg
adc
and
xchg
adc
out
scas
dec
cmp
mov
and
test
or
mov
xchg
push
rol
xchg
inc
push
dec
sbb
aam
xor
dec
and
(bad)
nop
sub
mov
(bad)
mov
cmps
dec
movs
les
scas
jp
and
adc
xchg
aam
retf
jb
outs
xchg
(bad)
outs
fs
mov
push
sub
mov
push
rol
inc
jg
dec
add
(bad)
jmp
push
loope
shl
and
inc
push
and
and
adc
dec
cs
pop
cmp
out
push
cmp
or
ror
sub
imul
sub
fimul
into
fsubr
inc
loop
add
stos
ret
cdq
add
push
inc
push
push
sub
jmp
dec
or
fucomip
cmp
jecxz
test
cmp
mov
and
or
push
nop
pop
xchg
test
adc
les
or
outs
xchg
sbb
and
into
adc
fiadd
imul
xchg
ficom
sbb
sub
repz
scas
inc
sub
dec
cmp
cmps
(bad)
scas
repnz
nop
popa
cmp
scas
inc
es
bts
add
mov
loop
add
(bad)
cs
enter
bound
dec
sbb
xchg
movs
inc
mov
mov
pop
loopne
push
mov
add
ins
popa
cmp
mov
cmps
push
add
or
or
aam
push
dec
repz
push
loop
mov
or
add
mov
cmp
mul
ror
or
cmp
out
jbe
mov
je
xor
jo
icebp
add
inc
cmp
jle
jbe
enter
mov
add
jo
sbb
shl
bound
or
jns
not
push
cmp
sbb
(bad)
adc
ret
adc
add
(bad)
mov
retf
mov
and
and
rcl
mov
dec
out
into
xor
and
jns
arpl
push
jb
lods
and
daa
xor
inc
or
sbb
jmp
or
dec
jp
jno
ins
loop
sub
into
dec
inc
mov
imul
xchg
mov
add
inc
jmp
stos
pop
push
into
stos
test
inc
and
dec
cmovb
pop
jle
cmp
cmps
loopne
pop
xchg
inc
push
pop
movs
add
add
inc
fwait
cmps
pop
daa
leave
xor
dec
xchg
int3
push
dec
mov
mov
movs
rcl
push
push
ret
sub
or
pushfw
add
fwait
cmps
or
push
imul
cmp
and
div
daa
pop
scas
adc
data16
inc
pop
xchg
out
xchg
push
inc
cs
pop
popf
pusha
cwde
cdq
fisubr
ficomp
xchg
jmp
push
sahf
fidivr
dec
outs
or
and
sbb
call
dec
adc
inc
nop
(bad)
sbb
dec
and
mov
xchg
rol
mov
shl
rcr
rol
sub
fst
jle
sahf
dec
sub
xchg
cs
mov
adc
bswap
jo
stos
rcl
jecxz
dec
loope
add
jmp
mov
repnz
xchg
adc
push
cmp
popf
push
xlat
call
push
nop
lods
or
loopne
loope
mov
or
cmp
outs
pop
jmp
dec
xchg
add
(bad)
sbb
push
adc
pop
call
sbb
cmp
mul
and
push
push
and
push
mov
mov
and
push
and
push
pop
or
push
add
or
and
(bad)
sbb
clc
jae
inc
scas
fmulp
push
rol
inc
xor
or
or
or
inc
mov
arpl
sahf
or
outs
push
jns
ret
inc
fcom
jnp
out
mov
pusha
fwait
outs
sub
pop
mov
popa
addr16
movs
adc
xchg
xchg
ds
adc
daa
pushf
mul
es
test
pusha
inc
or
fistp
xlat
mov
sub
jecxz
xor
push
mov
or
cmps
sbb
ret
neg
push
gs
adc
pop
mov
pop
sbb
push
jno
xchg
cli
mov
dec
sbb
sbb
mov
adc
addr16
mov
stos
cmps
rcr
and
inc
cmp
and
popa
or
scas
push
mov
cmps
push
sub
mov
leave
jb
dec
rcr
and
sbb
sub
mov
dec
ret
xchg
add
lods
out
ds
add
mov
test
inc
repnz
shl
sub
(bad)
ret
add
pop
inc
(bad)
aas
add
cmp
xor
movs
je
jb
aaa
dec
mov
jne
mov
call
fidivr
push
sub
inc
cmps
push
add
push
lahf
stos
jmp
xchg
cmc
pop
jbe
test
popa
mov
call
nop
outs
data16
fdiv
je
into
mov
mov
sub
into
push
arpl
dec
push
mov
mov
push
push
out
inc
rol
aaa
mov
rcl
dec
mov
retf
add
xchg
push
xor
ret
sub
fisubr
popa
jp
push
call
xchg
(bad)
arpl
pop
sbb
loop
aam
dec
sahf
dec
repnz
pop
out
sub
inc
ret
adc
arpl
xchg
in
dec
mov
aaa
inc
ret
popa
push
lea
outs
mov
(bad)
mov
sub
clc
adc
mov
jmp
mov
sub
es
cmp
scas
mov
js
inc
jmp
pop
jbe
js
pop
(bad)
cli
sbb
xor
js
ss
cmc
js
lahf
mov
int3
xchg
sbb
add
xor
sahf
ret
cdq
xor
mov
fcom
xchg
movs
xchg
dec
js
or
imul
xor
push
out
je
fdiv
mov
xchg
mov
add
xor
mov
retf
aaa
lock
lods
mov
sbb
push
cs
mov
jb
jmp
xor
(bad)
xchg
xchg
in
(bad)
jmp
pop
xor
mov
sub
mov
add
push
imul
es
add
add
adc
adc
fst
fidiv
sub
pushf
mov
fild
mov
and
into
xchg
or
and
cli
jmp
push
push
test
xor
jbe
enter
jecxz
pop
inc
js
and
and
fiadd
or
bound
(bad)
shl
rcl
dec
mul
jmp
inc
dec
popa
rol
mov
pop
jmp
and
cmp
retf
xchg
or
xor
test
ret
cmc
mov
test
xchg
rcr
rol
xor
jbe
js
cs
fmulp
into
arpl
outs
sbb
adc
imul
stos
adc
xchg
ret
fiadd
lock
outs
sbb
jp
loop
jmp
mov
sbb
lock
push
add
pop
ds
xor
xchg
dec
or
mov
jecxz
loop
sahf
xchg
movs
nop
adc
push
(bad)
das
push
(bad)
cmp
or
ins
or
js
retf
pop
test
ss
cdq
mov
mov
mov
mov
scas
es
jp
push
mov
sahf
xor
push
and
xor
mov
adc
sub
or
scas
jmp
repnz
cmp
inc
jae
(bad)
test
fmul
sub
and
push
movs
xlat
nop
adc
push
dec
jmp
or
dec
mov
xchg
ins
lods
mov
add
cwde
pop
pop
xor
jmp
fidiv
add
adc
mov
fisttp
or
sub
or
mov
ss
retf
push
bound
dec
xor
jmp
loopne
les
push
dec
das
sbb
sub
sub
add
jecxz
aas
rol
push
retf
into
ss
out
cmp
push
add
mov
inc
xchg
les
xchg
cmps
out
and
inc
or
fwait
push
xchg
jle
lahf
test
jnp
cmp
sbb
adc
xchg
ret
fidivr
mov
adc
mov
dec
push
and
mov
scas
sbb
inc
bound
data16
xchg
jno
jb
lahf
pop
mov
adc
inc
pushf
inc
sub
inc
not
lods
xchg
sub
test
jmp
push
mov
fiadd
xor
or
mov
sbb
cmp
xchg
xor
or
ror
mov
ficom
sub
sbb
das
lock
test
adc
cmc
add
ja
or
mov
(bad)
(bad)
add
jmp
mov
add
fcmovu
cmp
jo
inc
outs
sahf
(bad)
mov
imul
sbb
xor
jmp
mov
add
cdq
xchg
fild
fimul
popf
gs
mov
adc
das
add
mov
push
or
mov
sub
mov
mov
imul
shl
inc
jg
out
sbb
lock
push
push
sub
imul
and
adc
jno
and
cmp
rol
aas
adc
jle
xchg
or
sub
ds
enter
jle
cmc
pop
inc
ficom
adc
inc
xor
xor
jo
or
sbb
xchg
bound
dec
push
mov
sbb
and
mov
cmp
mov
inc
fcmovu
mov
xchg
add
add
add
push
adc
(bad)
shr
inc
ret
rol
outs
inc
adc
popa
(bad)
mov
push
or
mov
adc
popa
jno
mov
mov
or
push
xchg
pop
sbb
mov
lods
rcl
int3
rol
push
or
cmc
es
sbb
pop
(bad)
pop
xor
fisubr
movs
jne
xchg
icebp
push
bound
outs
mov
push
xor
sbb
je
es
add
push
dec
leave
into
and
xchg
mov
mov
mov
repnz
xchg
repz
call
and
cwde
add
xchg
test
dec
fmul
outs
push
add
push
sub
stos
mov
dec
sbb
aas
dec
push
test
jecxz
ror
fmulp
adc
mov
pusha
sti
add
mov
jecxz
fwait
add
mov
mov
or
out
lahf
inc
add
retf
pop
push
(bad)
sub
pusha
outs
pop
sahf
movs
gs
pop
adc
bound
ret
popf
and
add
repnz
dec
cmp
and
popa
jo
sub
mov
into
ret
push
sbb
sbb
push
pusha
sub
out
push
bound
inc
pop
movsx
jbe
pusha
inc
stos
div
push
outs
add
(bad)
rol
idiv
cmp
rcr
xchg
mov
mov
xchg
sbb
ror
pop
arpl
arpl
push
dec
adc
fdivr
mov
and
fwait
sti
outs
enter
mov
sahf
bnd
xchg
or
addr16
push
mov
mov
and
sub
mov
lock
push
data16
ret
push
fisubr
scas
pop
or
(bad)
out
je
ret
stos
inc
(bad)
rcl
push
and
adc
sar
push
and
idiv
ror
nop
cli
jecxz
scas
cmps
or
pop
or
dec
xchg
dec
jo
and
hlt
adc
nop
jmp
bound
das
sbb
or
(bad)
repnz
push
call
mov
jne
je
push
xor
sbb
push
mov
(bad)
fild
or
outs
jb
js
mov
fimul
pusha
push
sub
adc
add
push
xchg
js
inc
push
jbe
out
outs
mov
xchg
loopne
cmp
sbb
fild
sti
jmp
cmps
xchg
popa
cmps
mov
pop
ds
jo
dec
aas
outs
add
push
pop
mov
lock
retf
add
xor
scas
or
js
mov
push
movs
push
inc
dec
nop
jb
sub
jnp
xchg
add
sbb
mov
sub
outs
mov
not
push
rol
jb
pop
mov
mov
fist
cmp
cmp
push
pop
sbb
scas
push
enter
popa
and
sub
or
sub
fadd
js
sub
jmp
mov
ss
or
outs
push
mov
shl
sahf
nop
mov
mov
mov
push
and
adc
xchg
adc
inc
cmp
ja
xchg
loope
pop
sub
repz
cmp
repnz
xchg
nop
pop
aas
and
(bad)
outs
sub
call
ficomp
fldcw
sub
xchg
xchg
out
inc
or
outs
out
es
add
jmp
cmp
mov
push
cmp
mov
xor
xor
out
outs
(bad)
pop
or
lea
pop
cdq
dec
cmps
(bad)
cli
xchg
inc
sub
sbb
pop
lahf
mov
mov
ins
pop
ret
adc
sbb
es
xor
fcomp
loop
push
xor
repnz
adc
mov
es
mov
inc
sub
repnz
xchg
fwait
cs
ss
adc
push
cmp
cmp
bound
add
mul
mov
pop
add
inc
add
adc
pop
add
mov
sahf
xchg
adc
add
sbb
pop
jp
push
mov
push
xchg
or
push
mov
rcl
loopne
cmps
add
sub
ret
inc
push
inc
das
xor
call
push
or
call
xchg
mov
jb
inc
loopne
cmp
mov
xor
hlt
xor
mov
add
rcl
jp
lea
push
(bad)
xchg
jo
pop
mov
pop
sbb
or
mov
inc
stos
push
fs
sub
jmp
push
jb
call
shr
cmp
add
jnp
(bad)
xchg
mov
sbb
(bad)
jmp
(bad)
rcl
xchg
xor
outs
and
push
lahf
or
sub
lock
outs
push
ror
push
mov
out
push
push
(bad)
jecxz
sub
xchg
in
pusha
pop
mov
add
sahf
ret
add
mov
call
sub
je
aaa
(bad)
sub
mov
popa
push
or
jmp
fmul
adc
cmp
pop
sub
mov
loope
lea
movs
sbb
cmp
outs
push
inc
sbb
pop
nop
sbb
sbb
test
cmps
bound
mov
lock
xor
jmp
mov
ficomp
pop
(bad)
jle
cmp
sbb
sub
outs
jb
sbb
cli
xor
dec
fiadd
push
call
sbb
push
in
inc
add
(bad)
adc
in
jp
out
enter
sub
and
mov
push
pavgb
push
add
sub
ret
ret
mov
pop
inc
sbb
bound
into
ret
pop
xor
arpl
dec
retf
xor
add
cs
jle
outs
leave
mov
hlt
outs
mov
or
ret
inc
cli
push
xchg
jmp
stos
retf
jbe
loopne
lahf
jp
push
data16
add
push
data16
push
mov
pop
scas
aas
call
add
add
inc
repnz
dec
mov
aas
push
adc
pop
xchg
mov
jbe
leave
call
fdivr
pushf
sub
adc
and
outs
cmp
pop
push
push
cmp
xchg
and
sbb
ds
sahf
arpl
ret
and
fisub
xchg
cmp
je
xor
dec
and
dec
sahf
(bad)
call
or
add
(bad)
outs
xchg
rcl
(bad)
sahf
bound
loop
mov
pop
or
sbb
cmp
mov
cs
scas
rcr
ret
sbb
add
ret
mov
xor
jmp
mov
add
scas
ja
sbb
and
adc
push
sub
leave
mov
js
rol
inc
add
mov
and
and
dec
add
or
ret
shl
inc
push
push
ror
xchg
ss
inc
xchg
sub
fwait
sub
push
push
push
or
inc
jmp
mov
ror
jb
(bad)
loope
mov
(bad)
and
aaa
add
sbb
addr16
lock
repnz
retf
inc
jmp
sahf
jmp
sub
add
pop
sub
(bad)
ds
push
lods
sahf
push
imul
jmp
cmp
mov
sbb
or
jmp
jmp
xor
je
ds
fiadd
dec
dec
ret
adc
sahf
js
jle
imul
xchg
or
add
cmp
in
call
lods
mov
adc
push
push
mov
add
pop
or
lods
(bad)
pop
fisub
out
push
outs
rcr
pop
inc
es
push
ret
mov
or
and
ss
jbe
mov
jno
inc
fidivr
pop
enter
pop
shl
push
mov
mov
cmp
add
nop
mov
dec
mov
out
test
je
pop
mov
test
lock
ret
mov
inc
add
retf
sub
push
inc
mov
sub
xor
push
xchg
sahf
inc
push
mov
xchg
dec
mov
push
pusha
add
scas
and
stos
das
dec
sbb
add
jmp
and
jo
dec
sbb
(bad)
jbe
jno
cmc
xchg
retf
inc
sbb
ds
cmp
sub
xchg
data16
and
mov
inc
lods
push
pop
inc
and
mov
aas
dec
xchg
pop
ret
iret
sub
(bad)
imul
add
xchg
ret
fsubp
jb
sub
inc
inc
lahf
fwait
(bad)
jmp
push
push
cmp
outs
data16
mov
push
repnz
repnz
inc
jle
sub
scas
test
adc
push
cmp
sahf
push
or
adc
stos
jle
dec
jecxz
mov
(bad)
push
mov
mov
shr
xchg
nop
push
push
add
ret
and
in
jmp
retf
addr16
mov
pop
pop
test
or
mov
pop
sahf
pop
add
sahf
mov
shl
ja
popf
push
repnz
jbe
xchg
out
push
cmp
stos
add
fdivr
inc
jmp
push
fist
cmp
or
adc
cmp
cwde
push
daa
fstp
data16
test
test
mov
(bad)
sub
add
or
adc
(bad)
out
arpl
dec
outs
repnz
add
inc
add
movhlps
sbb
aam
cli
push
out
bound
sub
mov
ret
mov
jbe
mov
arpl
pop
es
sub
or
xchg
test
popa
push
mov
xor
jmp
sub
rcl
adc
jo
into
jbe
js
mov
xchg
out
mov
pop
retf
pop
pop
inc
ds
inc
sub
mov
add
scas
mov
mov
loop
mov
pop
iret
lock
add
js
loop
push
sbb
xor
inc
and
das
cwde
add
mov
arpl
mov
add
mov
mov
cmp
ror
xchg
pop
jb
scas
dec
mov
lea
and
sub
jae
sbb
mov
cmp
push
(bad)
sub
push
loope
add
sbb
sub
(bad)
or
pop
add
fisubr
mov
mov
jmp
push
sbb
imul
imul
into
or
and
adc
arpl
mov
lods
pushf
and
mov
jp
mov
push
outs
lods
inc
mov
(bad)
(bad)
xchg
push
dec
mov
mov
add
mov
mov
ret
mov
daa
repnz
test
and
sbb
inc
mov
xor
mov
sbb
add
cmp
sbb
add
pop
leave
arpl
or
outs
add
cmp
or
daa
inc
aaa
add
sbb
xchg
pop
inc
aas
pop
or
inc
inc
and
or
lods
mov
dec
loop
mov
js
cmp
sub
pusha
xor
or
into
adc
rol
sbb
push
mov
xor
xchg
mov
fcmovne
pop
jbe
cmp
bound
cmp
scas
mov
repnz
xchg
push
and
movs
dec
add
dec
add
mov
mov
push
loopne
out
sub
push
aas
aas
mov
mov
dec
out
push
outs
cld
ss
cmps
push
movzx
lock
xchg
adc
cli
repnz
cmp
xchg
sub
pop
arpl
push
ret
xchg
jbe
pop
out
aam
inc
jae
sub
sub
ret
stos
add
mov
pop
leave
jo
jmp
push
inc
ficom
and
test
stos
fisubr
add
adc
xor
inc
scas
iret
push
cmp
enter
jbe
xchg
and
ret
or
push
or
repnz
and
jo
loop
sbb
adc
into
stos
enter
push
jmp
stos
push
fwait
cmp
sub
retf
nop
(bad)
jecxz
outs
imul
sbb
push
xchg
outs
add
cmp
jle
xlat
add
push
push
or
cmp
mov
movs
inc
dec
test
inc
jb
dec
cmp
sub
retf
fwait
sub
mov
add
cdq
outs
xor
cli
push
add
inc
inc
or
mov
pusha
jle
cwde
icebp
fcomp
(bad)
data16
dec
loope
adc
inc
rcl
out
loop
cmp
retf
inc
addr16
pop
bound
pop
ds
pop
(bad)
call
adc
psubd
fcomi
lea
adc
cmps
cmps
test
dec
push
dec
daa
dec
fbstp
and
rcl
adc
pop
pop
outs
loope
(bad)
nop
ds
xchg
and
js
or
movs
sbb
dec
pop
ret
push
shl
dec
jle
inc
(bad)
xchg
movs
cmp
inc
data16
cs
les
daa
in
adc
mov
(bad)
(bad)
out
hlt
and
mov
sub
out
push
popa
jmp
mov
dec
repnz
imul
dec
push
sub
dec
or
pusha
sub
idiv
add
xchg
jo
pushf
and
sahf
rcr
cs
sub
sbb
mov
sbb
and
or
xchg
mov
add
mov
cmps
(bad)
scas
xor
push
pop
sar
sbb
inc
outs
and
lock
push
scas
test
popa
sub
xchg
push
retf
xchg
mov
scas
jle
enter
dec
rcl
push
bound
fbld
pop
mov
or
and
mov
add
mov
imul
push
mov
icebp
or
pop
dec
arpl
inc
or
add
cmp
sbb
cmp
add
or
call
(bad)
call
scas
(bad)
je
or
retf
sub
cmps
out
sbb
popf
fs
push
xchg
xchg
inc
packssdw
dec
cwde
test
bound
sbb
jecxz
out
(bad)
rcr
xor
mov
dec
sbb
ds
add
scas
dec
daa
loopne
xchg
gs
dec
daa
fsubp
mov
and
mov
repnz
dec
pop
sar
sbb
sbb
mov
cli
out
dec
mov
xor
cdq
jmp
mov
sbb
popa
ins
or
mov
xor
pop
dec
retf
dec
fidivr
inc
pop
add
jo
mov
inc
or
push
add
and
jle
movs
mov
ja
inc
cmp
push
imul
xchg
rol
sub
ss
movs
aam
xor
rcl
jo
into
mov
sub
scas
and
or
call
push
dec
push
xchg
add
popa
imul
lock
(bad)
fisubr
inc
jmp
dec
dec
push
adc
cs
shl
push
push
push
stos
mov
push
sub
rcl
cmp
(bad)
mov
inc
dec
push
jle
inc
test
ret
add
js
retf
push
cmps
add
daa
mov
cs
cli
xchg
into
push
push
cli
and
cmp
mov
psubsb
sbb
lea
xor
lods
or
test
rol
inc
lods
inc
push
xchg
sbb
arpl
mov
mov
scas
repnz
push
xchg
mov
adc
push
mov
push
daa
ret
sbb
inc
push
push
out
retf
inc
cmp
adc
ror
neg
cmc
mov
mov
ds
enter
loope
(bad)
repnz
dec
es
icebp
shl
xchg
adc
rcl
xabort
movs
imul
xor
add
xchg
mov
ret
mov
das
ss
jg
inc
sbb
(bad)
xchg
xor
mov
sahf
bound
mov
movs
mov
pop
mov
and
sub
add
pop
sbb
dec
sub
push
mov
sub
les
push
inc
and
sub
pop
enter
into
mov
xchg
add
cwde
loopne
or
dec
repz
cmp
pop
dec
push
nop
inc
mov
sub
push
nop
jp
lock
fsubr
sbb
call
push
jecxz
scas
(bad)
dec
inc
xchg
mov
cmps
xchg
push
mul
fisubr
push
icebp
ss
loop
ror
add
add
push
inc
or
push
add
xchg
es
fsub
mul
mov
mov
and
add
push
pop
das
sub
test
(bad)
mov
dec
mov
cwde
ret
push
adc
fcom
stos
cwde
rcl
(bad)
sub
adc
sbb
push
jmp
mov
and
pop
outs
ret
dec
ror
ret
fiadd
add
or
neg
pop
cs
or
push
sub
mov
retf
push
adc
pop
add
pusha
pop
cmps
pusha
push
int3
or
aas
xor
ficom
mov
push
sub
inc
leave
sub
not
call
dec
stos
pushw
xchg
and
(bad)
ja
bound
bound
inc
push
ret
movs
sahf
jle
xor
xchg
fstp
sahf
mov
pop
xchg
or
loop
leave
sub
loop
sub
ds
sub
push
bound
sbb
mov
dec
out
out
cmp
and
ret
(bad)
hlt
stos
push
(bad)
rol
sahf
test
bound
pop
neg
jbe
add
sub
cwde
es
loopne
xchg
add
sbb
push
cmps
je
ins
dec
retfw
inc
cdq
sub
mov
popa
and
test
mov
and
xor
add
int3
and
(bad)
das
call
mov
pusha
inc
cmps
scas
jp
pop
add
mov
and
rcr
fisubr
and
inc
sbb
jo
jb
ss
out
inc
dec
mov
pop
rcr
jb
xchg
xchg
adc
loop
movs
cmps
mov
outs
cmp
repnz
pop
lods
popa
enter
and
fstp
dec
mov
xor
sub
push
xchg
add
inc
sbb
add
pusha
push
adc
popa
imul
mov
fisub
loop
sub
mov
mov
sub
rol
push
mov
ret
jo
inc
mov
dec
rcr
xchg
or
lock
jno
mov
sahf
call
dec
xlat
adc
push
es
shl
add
sbb
or
inc
into
ret
shl
ror
jb
aam
loopne
data16
sub
push
mov
gs
inc
or
out
adc
push
xchg
pop
push
outs
dec
jp
popa
bound
inc
es
add
inc
pop
repnz
cmps
dec
pop
inc
inc
mov
jmp
outs
call
jb
add
outs
push
add
or
mov
jbe
and
or
cmp
xor
xor
cdq
push
pop
outs
dec
dec
es
ins
ret
jle
inc
adc
push
adc
sahf
movs
jno
xchg
out
out
fimul
or
cmp
fnstcw
fisubr
cdq
cs
jle
mov
push
or
xchg
jb
sahf
sbb
or
sbb
shl
or
jecxz
dec
out
scas
cmp
push
popa
and
xchg
mov
dec
push
fidivr
dec
pop
(bad)
arpl
jp
add
dec
or
or
jecxz
sbb
pop
sbb
or
mov
ror
sahf
fimul
(bad)
xchg
lods
cmp
outs
jbe
sbb
dec
aam
arpl
pop
mov
cli
ds
sub
sbb
xchg
adc
jp
pop
add
jp
inc
and
or
pop
adc
(bad)
pop
xchg
test
or
ret
sbb
pusha
push
ret
inc
cmp
dec
arpl
loop
mov
xchg
xor
not
jno
(bad)
(bad)
pop
xchg
ins
mov
xchg
xchg
push
pop
(bad)
(bad)
pusha
retf
adc
and
or
jmp
push
cmp
jo
push
adc
cmp
or
popa
mov
add
mov
jle
loop
adc
movs
addr16
cmp
sbb
push
add
pop
xor
mov
popa
leave
das
mov
dec
scas
ins
test
and
shl
js
xor
mov
and
inc
ss
ins
jl
out
mov
add
outs
inc
mov
ja
mov
jne
and
xchg
(bad)
push
nop
dec
shl
sbb
push
push
js
jo
scas
push
jns
mov
in
imul
cmps
xor
pop
mov
mov
les
call
outs
(bad)
ss
inc
dec
fdivrp
inc
or
fld
push
xchg
ins
mov
mov
(bad)
fcomp
lods
push
jle
inc
jno
pop
sub
scas
xchg
mov
jno
adc
mov
inc
inc
push
push
or
jb
outs
inc
dec
inc
test
mov
or
out
sub
cmps
lods
lock
mov
mov
or
arpl
adc
test
cmp
out
sbb
xor
es
stos
add
fimul
in
mov
add
cli
inc
cmps
jo
mov
or
inc
div
or
je
mov
ret
loope
xor
inc
cmp
lock
(bad)
sbb
mov
lods
sub
cmp
daa
loop
lock
mov
push
mov
(bad)
jbe
inc
lock
mov
pop
mov
or
lahf
in
push
dec
shl
adc
mov
push
or
cmp
jo
push
mov
int3
and
and
popa
popa
(bad)
pop
inc
mov
outs
inc
sub
cmc
hlt
fs
push
push
xor
add
lahf
mov
out
jle
add
cwde
das
mov
push
inc
cmps
outs
dec
lea
add
pop
push
enter
xchg
mov
pop
and
rol
sbb
fld
sbb
push
mov
pop
out
shl
pop
xor
cmps
loopne
add
jne
push
retfw
mov
cli
scas
pushf
and
adc
bound
mov
or
mov
mov
jle
push
pop
push
cmp
mov
jbe
fimul
js
sbb
mov
dec
push
in
push
push
ss
mov
and
push
mov
add
test
push
cmps
stos
xor
mov
jne
push
push
es
jbe
stos
add
movs
push
ss
ficom
add
test
sub
(bad)
pop
add
adc
cli
ret
sub
sbb
sub
rol
mov
jo
data16
call
pop
xor
jg
sbb
rol
pop
mov
test
add
pop
and
sbb
adc
inc
add
push
popa
scas
arpl
pop
xchg
fisub
mov
in
push
fs
inc
xchg
not
inc
inc
mov
add
adc
xchg
or
adc
fidiv
xchg
movs
arpl
ret
jp
pop
add
dec
mov
or
inc
es
lods
or
pusha
sub
inc
pop
call
push
lahf
xchg
inc
jns
cmp
jb
fs
scas
outs
adc
dec
xchg
or
push
inc
test
stos
mov
pop
jp
into
fiadd
out
fidiv
add
jmp
cmps
add
lock
xor
mov
rcr
pusha
fimul
xchg
loop
shl
pop
cmps
mov
add
inc
cs
or
pop
cmp
inc
cmps
mov
push
scas
push
sbb
add
dec
or
cs
fadd
add
ret
bound
xchg
pop
dec
sub
call
sahf
nop
mov
cmp
jecxz
and
sub
loope
xor
mov
xor
xchg
and
adc
lods
test
push
push
ss
or
adc
cmp
mov
dec
outs
mov
mov
inc
push
adc
loop
scas
(bad)
rol
(bad)
lods
and
dec
mov
and
and
push
pop
inc
jb
push
fisub
cmp
jle
loop
jmp
cmps
jp
(bad)
inc
jnp
adc
ficom
test
inc
push
scas
outs
sbb
and
pop
es
pop
cmp
sub
(bad)
mov
out
(bad)
ret
(bad)
mov
jo
inc
jp
mov
sahf
push
test
(bad)
out
add
stos
out
add
push
cmp
add
popf
inc
mov
mov
pop
jo
ficom
mov
mov
dec
into
and
xchg
xor
jle
bound
sbb
(bad)
and
call
cmp
addr16
inc
dec
loop
xchg
sbb
jg
(bad)
mov
adc
add
loop
popf
jae
scas
push
push
cmp
adc
bound
xchg
js
loopne
inc
jmp
mov
loop
sbb
mov
sub
hlt
xchg
inc
sbb
mov
inc
sbb
push
or
xor
cmp
xchg
mov
jg
movs
push
pop
ret
stos
outs
out
mov
sahf
xchg
outs
call
sbb
fsubr
xor
data16
(bad)
(bad)
lock
push
push
mov
push
xchg
ss
xchg
lods
mov
imul
xchg
push
pop
rcr
add
cli
sbb
jo
xchg
push
movs
cmp
mov
sbb
mov
xor
xchg
loope
dec
mov
shl
xor
and
inc
add
repnz
inc
push
dec
dec
inc
mov
into
and
loopne
xor
xchg
add
(bad)
sbb
cmc
outs
dec
outs
sbb
or
scas
adc
sbb
push
data16
mov
scas
arpl
call
enter
dec
lock
pushf
fwait
retf
retf
inc
(bad)
mov
pop
mov
xor
mov
mov
mov
repz
inc
dec
cmp
mov
sub
push
or
sbb
and
out
iret
shl
mov
mov
jmp
xchg
adc
(bad)
dec
data16
mov
mov
xchg
cs
fs
retf
ss
sahf
daa
mov
in
add
push
bound
pop
or
xchg
data16
pop
cmps
ror
into
adc
cmp
push
popa
push
jecxz
inc
push
inc
dec
sub
sub
push
jbe
retf
pushf
mov
lock
gs
out
stos
movs
aaa
xor
jbe
xor
or
adc
pop
punpckhbw
pop
fbld
sahf
mov
sar
(bad)
jmp
push
mov
pop
into
fidiv
xchg
lock
pop
push
xchg
jo
cmp
cmp
cmp
js
and
loop
rcr
mov
push
xor
mov
jbe
sbb
not
scas
neg
xor
pop
pop
xlat
xchg
imul
inc
lea
sbb
mov
jae
shr
xor
mov
push
outs
je
and
push
retf
add
mov
cmp
adc
rcr
inc
loop
sub
rcr
add
out
pop
repnz
addr16
ret
test
in
mov
ds
push
adc
xchg
cwde
push
push
shr
add
adc
(bad)
imul
das
dec
cmp
mov
and
es
test
dec
mov
fisub
xchg
lock
sbb
mov
inc
cmp
push
jp
sahf
cmps
xor
js
mov
add
into
push
nop
push
(bad)
mov
jne
fidiv
and
stos
call
scas
sahf
xchg
jo
das
or
or
add
pop
add
mov
out
lods
xor
loopne
arpl
xor
inc
sbb
mov
mov
sbb
sahf
add
addr16
bound
jp
mov
leave
push
(bad)
call
inc
out
es
xor
(bad)
push
out
push
xor
or
jb
push
cmp
js
xor
dec
push
ins
test
or
leave
lock
push
mov
inc
push
jp
xchg
dec
mov
dec
push
fidiv
mov
shl
inc
cmp
shr
mov
sub
sbb
movs
movs
rol
push
mov
das
fiadd
inc
mov
sub
stos
pop
add
or
ret
or
sub
or
cmp
jb
inc
inc
(bad)
fiadd
adc
ins
popa
xchg
psrld
rol
pop
dec
js
xchg
into
in
inc
test
daa
lods
mov
outs
or
addr16
jle
xchg
mov
jne
sub
ds
push
adc
inc
lds
sub
mov
jle
add
xor
scas
xchg
movs
mov
iret
add
scas
jae
cmp
jle
sar
mov
push
push
jno
ds
sub
push
add
and
xchg
xchg
jno
je
push
mov
mov
jbe
push
mov
push
push
arpl
movs
ss
jno
push
or
(bad)
js
shr
(bad)
outs
cmp
dec
push
pop
sbb
push
mov
mov
stos
mov
es
jle
add
jle
into
pop
pop
dec
push
out
aas
adc
xor
xor
xchg
pop
mov
(bad)
jno
xor
adc
push
mov
xor
dec
add
inc
cmps
add
cmps
fwait
pop
retf
test
sahf
retf
leave
clc
sbb
cmp
mov
jno
pop
scas
(bad)
mov
call
(bad)
sar
inc
popf
(bad)
loopne
xchg
movs
mov
pop
aam
push
pop
(bad)
into
push
pusha
sub
pop
xor
add
inc
or
shl
push
test
jp
loop
xor
cli
cli
sbb
xor
sbb
jbe
add
or
mov
loope
pop
jno
outs
mul
or
retf
jp
sbb
movs
(bad)
fwait
sbb
dec
call
(bad)
cmp
pop
sahf
sahf
daa
pop
xchg
retf
das
xchg
call
fidivr
ins
inc
sub
mov
sbb
and
jmp
scas
out
or
sbb
cmps
cmps
cmps
mov
push
push
mov
loop
ss
fbld
les
add
push
or
mov
(bad)
nop
in
scas
clc
add
shl
or
iret
mov
ins
mov
lods
mov
mul
push
push
xchg
js
mov
cmp
push
mul
push
lea
fstp
mov
or
leave
xor
inc
and
sbb
jge
cmp
ficom
mov
dec
cli
cdq
xor
rcl
fimul
mov
loopne
and
ss
jp
dec
mov
aas
cmp
sbb
shr
sbb
retf
sbb
dec
add
inc
scas
mov
sbb
lock
adc
repnz
dec
(bad)
retf
jb
stos
f2xm1
pop
ror
das
test
sbb
xchg
sub
or
jo
int3
push
retf
push
push
xor
and
cli
mov
inc
jmp
sar
loopne
mov
dec
mov
test
aam
mov
or
mov
(bad)
cmps
xor
fcom
div
jecxz
xchg
out
push
adc
sub
push
(bad)
bound
xor
ret
loopne
ds
mov
or
push
(bad)
fst
sbb
(bad)
jmp
dec
call
pop
pop
adc
adc
and
cmp
or
xor
and
inc
arpl
pop
inc
cs
xchg
push
pop
mov
push
sbb
shr
sbb
(bad)
pop
pop
add
adc
jb
adc
fsub
into
add
loop
call
scas
push
dec
pop
fdiv
(bad)
add
(bad)
movs
je
inc
cmps
nop
cmps
dec
fld
push
jg
adc
adc
push
or
cli
gs
ret
cmps
sahf
jp
in
movs
xor
jp
add
adc
fiadd
adc
adc
sbb
or
xor
mov
cmp
jbe
(bad)
push
push
mov
(bad)
sbb
shl
or
or
inc
imul
pop
fadd
out
ja
movs
add
push
(bad)
scas
or
jmp
shr
(bad)
js
dec
cmp
jp
loope
ror
repnz
cmp
or
add
add
mov
pop
dec
ja
mov
xor
adc
pop
cli
(bad)
jmp
pop
mov
jno
sub
pop
mov
scas
mov
imul
jnp
xor
sbb
or
pop
xchg
rcr
loop
inc
ss
push
ror
js
pop
sub
jmp
ret
pop
popf
and
mov
mov
adc
mov
and
xor
psadbw
xchg
iret
jb
mov
mov
dec
imul
sbb
frstor
ins
pop
sahf
cs
sar
mov
out
or
jno
in
jecxz
test
sbb
rcr
jle
mov
stos
fimul
jmp
imul
and
outs
sub
cmp
jo
(bad)
push
inc
xor
pop
fsubr
nop
mov
push
xchg
mov
and
adc
mov
lea
mov
movs
xchg
or
out
mov
add
prefetcht1
data16
rcr
call
faddp
mov
adc
inc
xchg
inc
out
retf
sbb
fisub
dec
push
mov
cmc
mov
into
xor
sbb
bound
cwde
cmp
hlt
or
jbe
add
loope
pop
stos
add
das
mov
xchg
ins
retf
add
dec
mov
rcr
js
stos
ins
js
jp
mov
mov
xchg
ret
sbb
pop
sub
sub
inc
inc
icebp
pop
dec
adc
cs
mov
pop
mov
dec
js
pop
jp
push
xor
dec
loop
push
test
aaa
inc
mov
sub
(bad)
ror
xor
mov
mov
mov
cmp
cdq
dec
jb
scas
add
sbb
cli
repz
pop
addr16
dec
sar
aaa
mov
inc
js
or
inc
pop
adc
cmps
or
jmp
and
add
nop
and
cmps
add
or
cmp
sahf
inc
jmp
add
hlt
stos
xor
and
push
xchg
mov
inc
or
add
adc
sahf
adc
xlat
movs
and
fwait
imul
les
nop
adc
and
or
mov
jnp
test
or
or
adc
inc
xor
push
xchg
mov
xor
fbstp
mov
call
add
adc
inc
movs
jae
fist
adc
xor
fisub
mov
jl
inc
add
push
add
pusha
aam
adc
outs
sub
xor
lods
in
ss
mov
add
clc
cwde
push
jg
fild
mov
dec
inc
inc
fneni(8087
(bad)
inc
adc
retf
xor
inc
or
(bad)
push
or
inc
shl
ret
adc
test
sub
shl
inc
sub
ret
cwde
xchg
into
push
sbb
push
or
mov
or
cmp
pop
pop
add
push
push
add
popa
push
dec
sbb
add
mov
(bad)
cmp
inc
lar
xchg
ror
push
sbb
sub
push
jle
xor
dec
lea
ret
sbb
push
or
sbb
and
inc
push
push
call
add
pop
repnz
adc
js
(bad)
sahf
mov
scas
mov
xor
inc
cmp
ret
mov
mov
arpl
loopne
mov
das
xor
push
pop
cdq
je
outs
repnz
sbb
inc
sbb
shl
fs
out
(bad)
das
fwait
lock
push
sbb
jmp
add
or
(bad)
bnd
pop
inc
cmp
or
pop
add
inc
xor
dec
and
jb
loop
sbb
pop
push
mov
push
test
pop
cmps
lods
inc
jmp
ret
cmps
mov
add
cmps
nop
and
loop
pop
adc
cmps
add
dec
pop
add
bound
push
push
inc
lods
loop
jbe
movs
xor
mov
cs
shr
inc
xor
adc
(bad)
dec
sbb
shl
and
sub
push
(bad)
push
(bad)
enter
jb
or
popa
jl
sbb
fiadd
popa
inc
ror
or
cmp
dec
dec
inc
xlat
add
cmps
(bad)
cs
inc
mov
xor
mov
jg
sbb
jmp
clc
cmp
add
inc
loop
call
or
sbb
dec
jb
pop
sahf
mov
loop
jbe
movs
hlt
nop
jp
mov
lea
add
jb
and
loopne
sbb
jp
sbb
dec
jmp
movs
xchg
ret
push
cmps
mov
pop
mov
aaa
ret
popa
loop
xchg
or
cmps
ror
ret
bound
test
adc
sbb
xor
and
jbe
adc
sahf
dec
data16
jo
adc
ret
div
sub
dec
rol
xchg
add
es
into
cwde
pop
repnz
xchg
mov
ss
adc
and
dec
ins
pusha
or
faddp
into
mov
lock
lock
ret
rol
fstp
call
or
movs
into
sar
and
sub
retf
inc
adc
pop
push
push
xchg
mov
dec
or
mov
(bad)
sbb
add
loop
daa
inc
or
mov
sbb
dec
imul
(bad)
rcr
mov
(bad)
add
cmp
imul
mov
es
pop
add
push
xor
mov
mov
bound
loop
ret
pop
cmps
xchg
outs
es
jne
mov
ret
lea
bound
jle
daa
or
add
clc
retf
fldenv
and
lods
aaa
mov
jmp
daa
cmp
xor
inc
aas
mov
xor
dec
rcr
or
mov
inc
mov
push
inc
inc
sbb
adc
mov
or
or
mov
mov
(bad)
mov
out
push
ret
inc
ret
sbb
push
jnp
or
ss
push
xchg
call
or
test
sbb
retf
es
sbb
repnz
dec
adc
retf
movs
dec
retf
jecxz
pusha
outs
pop
pop
or
cmps
mov
cwde
(bad)
retf
ds
sahf
aam
xchg
pop
fisub
pop
mov
pusha
dec
jae
jmp
push
out
add
popa
cmp
scas
ds
and
or
jae
lea
inc
push
retf
jp
mov
inc
or
idiv
sub
mov
(bad)
fdiv
ss
stos
jge
rcr
es
add
push
(bad)
dec
je
push
(bad)
cmps
pushw
and
cs
les
inc
adc
retf
jmp
imul
cmp
mov
xor
adc
mov
add
jne
retf
call
repnz
sbb
push
into
ret
add
add
dec
jle
or
push
dec
cmps
xor
and
mov
call
ss
ror
and
jbe
jnp
sahf
sbb
xchg
mov
adc
rcr
jbe
xchg
inc
inc
cmp
or
mov
jmp
jb
or
shl
pusha
pop
xchg
jp
inc
loopne
outs
mov
cs
inc
mov
pusha
cmc
xor
inc
js
or
ror
cmps
retf
movs
(bad)
fisubr
mov
jp
fcomi
xor
mov
ins
mov
sahf
mov
xchg
push
pop
xor
loope
adc
mov
ret
push
ror
cmps
add
ins
mov
add
adc
mov
call
cmp
das
pop
(bad)
sbb
mov
inc
or
jb
fnstenv
mov
push
retf
add
mov
and
or
push
stos
test
pop
lock
repnz
fcmovnb
ret
push
xor
push
aam
adc
or
aad
push
xchg
inc
popa
sub
xchg
jp
pavgb
push
dec
(bad)
imul
pusha
popa
inc
xchg
or
daa
outs
outs
add
data16
cmp
sub
push
scas
mov
retf
push
mov
xchg
pusha
cmp
jns
lahf
ror
mov
mov
sub
ja
xchg
jb
adc
test
jmp
ret
mov
mov
adc
out
pop
adc
xchg
dec
push
sub
inc
push
cmps
pusha
jecxz
add
add
jo
movs
mov
push
xor
mov
add
bound
call
xchg
sbb
mov
cmp
push
jne
mov
dec
jo
sub
dec
(bad)
adc
pop
(bad)
mov
das
or
push
pop
retf
push
pop
push
sar
jb
movs
dec
mov
or
and
jecxz
outs
and
sahf
mov
in
jbe
mov
mov
fdiv
xchg
pop
aaa
loope
pop
rdmsr
xlat
imul
xchg
out
in
or
popf
inc
fisubr
xchg
sbb
mov
push
loop
sub
cmps
mov
xchg
ret
dec
pop
data16
lods
neg
add
add
jmp
add
push
scas
cmp
adc
cmp
add
and
xchg
imul
add
sub
(bad)
sbb
mov
add
loop
(bad)
repnz
(bad)
mov
and
mov
fild
add
pop
adc
das
and
jecxz
es
mov
test
data16
xchg
push
cs
inc
inc
add
movs
push
mov
cmps
xchg
(bad)
xor
jp
mov
adc
and
add
push
adc
add
es
dec
rcl
mov
or
xor
not
(bad)
dec
rcl
cmp
into
loope
fwait
(bad)
pop
es
pusha
or
loop
out
scas
mov
sub
pop
out
adc
aam
inc
scas
xchg
rol
out
sub
xor
or
mov
push
xchg
lock
push
mov
mov
xor
iret
sahf
lods
push
add
or
mov
xchg
add
popa
inc
add
sbb
mov
push
les
mov
jp
or
dec
push
sbb
sub
data16
mov
rcr
inc
imul
mov
int3
push
xor
and
out
dec
sbb
xchg
xor
sub
sub
aas
loopne
mov
or
push
push
or
cmp
inc
or
adc
add
sbb
add
sbb
cs
xchg
popa
or
pop
mov
push
xor
push
adc
sbb
sbb
pop
inc
dec
clc
cs
cli
call
cmps
push
ficomp
les
sbb
cdq
aam
cmp
js
ror
pop
and
lock
ret
mov
mov
mov
nop
push
(bad)
sbb
jmp
nop
rol
or
jb
mov
inc
test
and
movs
mov
push
mov
sub
jmp
and
push
fcmove
pop
out
sub
mov
data16
test
dec
mov
add
jbe
imul
into
(bad)
(bad)
add
or
push
mov
or
retf
leave
push
or
jae
pop
xchg
ret
and
mov
bnd
add
jmp
fdivr
popf
push
add
or
sub
xor
outs
inc
pushf
xchg
ret
xchg
jb
movs
xchg
mov
dec
pop
leave
mov
repnz
mov
mov
jmp
repnz
les
pop
rol
push
sub
jb
or
cmp
cmp
in
inc
and
and
dec
jmp
rol
pop
pop
iret
sahf
push
xchg
jmp
pop
push
mov
xchg
lock
(bad)
imul
adc
mov
mov
scas
repnz
xor
cmp
and
xchg
mov
xchg
es
cmp
das
sbb
jb
push
rol
sbb
inc
adc
loopne
push
ret
fiadd
fidiv
mov
loopne
lea
jns
pop
push
(bad)
inc
ret
add
in
push
adc
adc
add
inc
dec
pop
xor
int3
push
loope
loop
pop
mov
push
add
rcr
or
push
sbb
mov
and
jne
outs
(bad)
push
popa
dec
jecxz
sub
add
sbb
add
ret
sbb
ret
test
sub
mov
push
mov
jb
and
sbb
sub
and
push
push
imul
sbb
cmps
mov
inc
fisubr
jp
sub
mov
sar
div
and
add
mov
mov
mov
sub
xchg
xchg
mov
jmp
or
loopne
jo
stos
xchg
jno
pusha
dec
(bad)
popa
imul
mov
add
loop
mov
and
loopne
out
push
lock
add
fmul
cmps
jb
add
imul
adc
xor
dec
inc
pop
(bad)
leave
add
push
dec
pop
sub
les
pop
fidivr
ds
es
test
cdq
enter
pop
bound
les
outs
xor
mul
mov
add
jmp
mov
jo
inc
(bad)
dec
rol
aaa
xor
out
xchg
and
call
xchg
aaa
arpl
(bad)
mov
mov
mov
mov
inc
mov
add
xchg
sbb
bound
retf
xor
fidivr
inc
push
mul
icebp
jp
add
pop
push
data16
sub
adc
jb
cmp
(bad)
xchg
push
mov
and
shr
xchg
stos
(bad)
movs
xchg
les
mov
lea
daa
in
(bad)
pop
push
jb
shl
es
sbb
jg
(bad)
push
xchg
pushf
add
leave
sbb
js
pop
aam
das
pop
mov
sbb
(bad)
and
outs
lods
in
rcr
inc
push
dec
enter
mov
cmovnp
mov
sbb
sbb
cmps
retf
cmp
pusha
add
dec
mov
into
rcl
dec
push
lea
idiv
cs
arpl
loop
mov
sub
sbb
xchg
push
mov
fs
pop
inc
movs
adc
stos
into
mov
or
or
xchg
popaw
pop
dec
and
in
inc
mov
xor
add
sub
and
in
xchg
xchg
mov
and
rol
jp
out
adc
rcl
addr16
ss
out
retf
jecxz
push
xchg
mov
inc
pop
xchg
ret
mov
xchg
ret
xchg
add
and
mov
xchg
add
xchg
rol
jmp
xlat
pop
fld
shl
dec
out
push
push
inc
loop
dec
cmp
movs
add
stos
push
xchg
and
add
xlat
xor
sbb
xor
push
add
push
enter
mov
dec
fimul
dec
lods
push
dec
icebp
movs
out
adc
mov
push
add
jecxz
push
push
ret
xchg
mov
bound
neg
and
mov
outs
scas
icebp
xchg
dec
inc
mov
dec
retf
fdivp
outs
loopne
movs
lods
sbb
or
mov
(bad)
inc
mov
xor
sub
int3
mov
dec
push
cs
add
lea
pop
sbb
push
mov
(bad)
ds
rcr
push
dec
cmp
dec
jb
push
lock
mov
(bad)
push
out
add
mov
xchg
rcr
pop
cmps
sub
mov
push
sbb
push
add
scas
shl
pusha
imul
pop
push
sbb
ja
inc
bsr
push
call
cmp
cmps
and
adc
and
or
push
test
xchg
and
pop
cmp
(bad)
mov
mov
or
jb
xor
xor
mov
(bad)
mul
repnz
dec
add
imul
dec
add
inc
push
pop
cwde
lahf
jp
inc
pop
mov
cmp
fidiv
jecxz
mov
or
cmp
fisub
inc
mov
mov
pop
stos
addr16
sbb
dec
(bad)
push
dec
sub
xor
bound
and
adc
sub
fidivr
out
(bad)
cmp
dec
pop
cmp
fstp
inc
cmp
jl
add
cmp
out
add
pop
mov
(bad)
out
sub
es
jmp
pop
xchg
mov
(bad)
bound
mov
push
test
fidiv
cmp
bound
cmp
ret
cdq
(bad)
cli
bound
rcl
xor
xor
jb
daa
push
(bad)
sbb
mov
dec
push
ficom
sbb
jo
out
push
pop
ficom
test
cmps
ret
jno
bound
fild
inc
dec
sbb
mov
xchg
mov
inc
mov
scas
retf
sub
mul
addr16
sub
or
sbb
inc
ret
dec
dec
das
pop
xchg
loop
lea
push
add
mov
sahf
and
ror
les
div
mov
adc
xchg
mov
mov
call
mov
sbb
adc
jle
lea
dec
inc
(bad)
loop
outs
dec
inc
(bad)
push
push
mov
es
inc
pop
sbb
or
fimul
sub
dec
or
scas
sub
cs
push
ss
jmp
das
mov
shl
ret
mov
adc
push
mov
in
push
and
jmp
and
nop
dec
add
cmp
ja
mov
fidivr
xor
push
pop
sub
or
psrad
push
push
and
mov
call
add
addr16
mov
mov
sbb
pop
lahf
scas
xor
push
dec
sahf
pop
inc
mov
sbb
jp
and
es
sub
mov
mov
ja
inc
aas
and
sbb
jne
or
or
mov
sub
repnz
daa
push
loop
jo
neg
ret
adc
push
add
retf
sar
add
pop
shl
push
loop
add
xchg
pop
cmps
adc
cmps
ror
jo
cli
lods
sub
mov
shl
fimul
or
(bad)
and
fisubr
and
nop
pop
jb
fucomip
or
sbb
push
scas
add
mov
out
mov
(bad)
and
and
(bad)
xchg
sbb
and
retf
mov
retf
pop
cli
retf
and
inc
cmp
dec
ja
cmps
push
and
jbe
xchg
push
pop
loopne
imul
lea
lock
aaa
inc
stos
add
xchg
(bad)
mul
jb
test
mov
mov
mov
sbb
pop
push
les
push
sbb
cmp
mov
inc
mov
mov
loopne
cs
sahf
mov
repnz
add
pop
popf
test
or
xchg
pop
xchg
xchg
sub
dec
xchg
xchg
xchg
push
dec
cmp
ror
or
mov
adc
stos
mov
arpl
leave
add
popa
ret
or
rol
cmp
(bad)
xor
and
outs
sub
stos
dec
xor
add
add
push
sbb
jne
(bad)
xor
sub
retf
cmps
ficom
dec
call
nop
neg
out
inc
add
xor
and
xor
adc
cs
or
popa
cmp
push
and
push
outs
inc
push
rol
sub
retf
loop
push
clc
sub
lahf
pop
addr16
js
adc
out
fcom
xchg
dec
loop
adc
pushf
or
mov
test
mov
mov
dec
inc
sub
mov
xchg
(bad)
sbb
cmp
ss
pop
dec
cmc
test
pop
cs
popf
sub
loop
xor
pusha
scas
inc
sbb
jb
daa
icebp
int3
pop
(bad)
(bad)
inc
and
adc
and
fbld
outs
ret
dec
jae
pop
js
rcr
mov
fisub
add
xor
imul
outs
xchg
mov
xor
add
fisub
fstp
push
and
push
inc
sahf
pop
mov
xor
movs
(bad)
loop
mov
push
jbe
gs
adc
inc
(bad)
rcr
jmp
bound
or
loopne
mov
fld
cmps
ret
lods
or
adc
lea
retf
(bad)
out
inc
dec
or
imul
sbb
mov
push
mov
sub
inc
pop
sub
stos
lea
ret
pop
cwde
outs
aas
push
outs
dec
sbb
mov
retf
fidiv
adc
push
test
pop
pop
pop
cdq
sbb
test
bound
jb
and
dec
js
push
inc
sbb
jnp
mov
neg
push
(bad)
bound
es
(bad)
adc
jb
dec
ror
sbb
or
into
push
int3
add
ret
push
neg
xchg
adc
mov
sbb
cdq
les
dec
sub
push
xor
stos
xchg
bnd
gs
inc
pop
retf
add
xor
cmps
xchg
or
(bad)
push
mov
rol
cmp
add
ins
(bad)
out
cmp
or
ret
push
cmovnp
out
mov
push
xor
mov
jle
es
ss
call
push
add
jmp
cs
mov
or
mov
xchg
mov
sahf
mov
pop
mov
xchg
or
jle
inc
or
fdivr
mov
jp
dec
sbb
arpl
sbb
mov
xchg
and
mov
mov
dec
sub
fstp
repnz
adc
outs
dec
cmps
(bad)
mov
popa
sbb
outs
sahf
test
xor
and
sbb
cs
adc
or
mov
inc
sub
xchg
pop
push
pop
or
mov
(bad)
cdq
add
bound
sbb
stos
rcl
add
fistp
sbb
fcom
repnz
lock
inc
daa
jmp
cmp
(bad)
xor
cmp
pop
xchg
imul
pop
retf
into
mov
add
mov
(bad)
xor
(bad)
retf
je
inc
add
js
mov
mov
mov
ss
jbe
cwde
js
jb
pop
push
jnp
test
and
sahf
push
push
add
push
(bad)
arpl
scas
jp
ret
push
retf
ret
dec
sbb
xchg
pop
pushf
add
or
outs
or
mov
retf
push
cmps
and
in
mov
sahf
fs
lea
xor
aam
add
push
mov
mov
jp
shl
add
add
imul
test
xchg
je
ret
adc
mov
or
cmps
dec
xlat
fld
daa
test
pop
adc
loopne
out
adc
add
fcomp
(bad)
call
popa
xchg
hlt
and
add
test
stos
mov
enter
sub
rcl
dec
les
data16
imul
jmp
dec
(bad)
pop
outs
or
retf
sbb
sbb
es
cli
imul
dec
cli
call
fisubr
or
push
stos
and
xchg
jmp
repnz
push
push
shr
retf
jo
jmp
dec
or
sbb
or
pop
and
inc
pop
les
mov
fisubr
cmp
retf
dec
mov
test
sahf
xchg
adc
mov
jbe
das
arpl
arpl
rcr
mov
rcl
sahf
aaa
dec
sbb
inc
(bad)
(bad)
cmps
mov
adc
add
ret
push
xchg
mov
ficom
jno
xor
das
cdq
inc
sbb
dec
jns
pop
dec
test
sbb
xchg
nop
mov
cmp
adc
jmp
jmp
push
mov
fcmovb
sar
sub
cmc
mov
dec
pop
xchg
(bad)
loopne
pop
pop
pop
cmps
add
in
cli
xchg
adc
cmp
rol
push
push
mov
fistp
push
and
inc
push
xchg
inc
and
pop
imul
inc
push
add
es
js
retf
mov
sub
lods
es
and
cmp
outs
mul
popf
pop
or
pop
adc
sub
adc
sub
cwde
add
mov
pop
push
push
sbb
fiadd
cmp
jbe
add
pop
add
repnz
mov
inc
jecxz
and
pop
fwait
outs
jecxz
inc
jle
mov
loope
add
xchg
fcomp
or
sub
or
sbb
cwde
mov
dec
sub
sub
fiadd
push
mov
add
mov
add
popa
jmp
jae
cmp
mov
fidiv
mov
push
popa
push
(bad)
push
retf
pusha
loope
out
push
mov
sahf
ret
popa
xor
push
pop
sahf
mov
(bad)
push
ficomp
call
and
les
es
movs
xor
inc
shr
shl
pop
cli
(bad)
mov
mov
push
(bad)
loopne
sub
cmps
hlt
ficomp
retf
out
pusha
mov
ficomp
xchg
pop
add
mov
adc
pusha
sub
push
xor
rcr
stos
mov
cmp
enter
neg
jb
inc
outs
mov
pop
jb
into
inc
clc
add
pop
mov
dec
sahf
push
js
add
pop
dec
call
pop
iret
push
jle
and
mov
stos
mov
js
scas
aaa
pusha
cmps
test
jbe
mov
dec
aam
mul
jb
xchg
xchg
daa
pop
cmps
xchg
cmp
shl
jo
pop
stos
push
outs
cmc
jp
jb
cmp
ss
add
xchg
xchg
push
pop
lock
popf
add
cmc
adc
adc
dec
mov
inc
pusha
dec
jne
jmp
ret
push
ins
fistp
dec
shl
jp
rol
cmc
xchg
jbe
push
into
test
or
and
xchg
push
lods
or
and
cmps
xchg
sub
rcr
pop
xchg
mov
loop
rol
jo
cmps
(bad)
call
daa
pop
pop
pop
xchg
ret
pushf
and
mov
and
(bad)
xchg
dec
add
addr16
jecxz
xor
dec
mov
scas
ror
push
push
sub
fwait
fs
push
popa
scas
daa
and
xor
push
rcl
repnz
xor
ds
lock
data16
xor
test
es
lock
scas
or
xor
xchg
mov
inc
fisub
repnz
adc
push
retf
leave
js
into
jp
ffreep
dec
jmp
sbb
cmp
pop
inc
imul
enter
les
cmps
scas
repnz
xchg
push
add
sahf
ror
sub
pop
xchg
push
push
xchg
ror
je
push
xor
or
cmps
nop
push
cmp
mov
jg
rol
xchg
test
jnp
xchg
and
jmp
jmp
xor
xchg
mov
xchg
mov
push
daa
and
jle
pop
popf
dec
pop
mov
retf
cwde
rol
xchg
es
sar
adc
pop
sub
out
retf
lea
cdq
xchg
cmps
mov
call
loope
jp
fmul
dec
bound
adc
sub
data16
dec
fldenv
test
add
in
push
mov
sbb
pop
sub
pusha
test
out
push
mov
jb
pusha
or
pop
push
popf
sub
dec
jl
mov
or
sub
push
(bad)
sub
or
add
mov
ror
push
mov
loop
add
pop
lahf
addr16
mov
aad
cmp
mov
xchg
mov
push
or
les
loop
xchg
shl
add
dec
push
or
movs
add
dec
mov
ss
shl
je
sbb
push
mov
and
pop
enter
jp
xchg
adc
push
pop
xor
bound
inc
sahf
daa
mov
xchg
xchg
sbb
dec
test
fadd
and
dec
push
jno
cmp
xchg
sbb
cmps
sahf
(bad)
add
and
mov
jb
aaa
cmp
rcl
nop
pop
jecxz
ret
and
or
push
into
mov
pushf
jmp
ror
mov
sub
jnp
stos
push
repnz
inc
sbb
ficom
pop
js
movs
bound
mov
jb
xchg
je
and
push
mov
ds
arpl
mov
or
cmps
mov
mov
loope
add
retf
cmp
(bad)
es
stos
dec
lea
into
test
and
je
jo
mov
xchg
xchg
and
ja
and
mov
inc
inc
dec
pop
cmps
int3
test
cli
pushf
jp
mov
mov
loopne
mov
dec
ret
imul
or
add
(bad)
repnz
mov
lahf
dec
lods
lds
mov
add
ja
sub
jp
or
fwait
and
add
mov
or
bound
sahf
popf
pop
inc
js
xor
mov
inc
popa
and
push
stos
outs
add
cmc
mov
cmps
sbb
dec
ret
push
pop
mov
and
add
add
cwde
jp
loop
add
into
mov
int3
push
xor
nop
sbb
inc
push
xchg
and
into
js
or
not
inc
(bad)
jbe
jo
pop
outs
lahf
dec
hlt
rol
test
mov
dec
inc
jo
mov
and
fst
cmp
push
or
push
dec
push
loop
inc
pop
outs
neg
dec
adc
add
or
sub
ja
fdivr
and
xchg
(bad)
dec
pop
mov
mov
rcr
idiv
pop
add
jg
outs
add
sbb
mov
(bad)
jbe
inc
jmp
and
mov
cmps
shl
or
dec
sahf
cmp
dec
int
out
inc
push
rol
scas
pop
mov
out
imul
ss
sbb
adc
icebp
adc
push
xchg
ds
mov
dec
and
mov
mov
add
popa
movs
xchg
xor
adc
adc
shl
loope
xchg
push
sahf
or
(bad)
inc
(bad)
out
nop
cmp
not
and
loop
cmp
movs
or
mov
push
pop
lea
mov
pusha
fwait
add
xchg
(bad)
mov
mov
lock
push
ficomp
pop
adc
adc
mov
popa
add
jmp
pop
xchg
xchg
push
push
xchg
push
arpl
ja
or
xchg
push
ins
cmps
(bad)
(bad)
cmc
cmp
add
inc
sbb
loopne
mov
mov
(bad)
fmul
ds
add
mov
mov
push
mov
or
(bad)
mov
jo
push
sbb
pop
dec
pop
pop
inc
or
test
add
es
lods
ins
cdq
and
inc
push
outs
rcr
sub
and
pusha
retf
pop
outs
bound
push
dec
bound
jecxz
rol
(bad)
aaa
jecxz
push
sub
inc
or
jle
pop
mov
mov
out
jmp
mov
push
retf
push
mov
xor
pusha
adc
adc
stos
jb
mov
test
retf
call
sub
dec
xor
cs
pushf
jp
mov
add
outs
call
loopne
mov
jp
fild
push
push
adc
add
adc
clc
jle
wrmsr
arpl
mov
fidiv
pusha
sbb
pop
bound
pop
push
inc
push
rol
repnz
pop
into
mov
add
mov
xchg
out
mov
imul
imul
dec
add
adc
gs
xor
mov
pusha
sbb
push
mov
push
not
loope
or
or
dec
sbb
add
sahf
push
mov
mov
xchg
mov
inc
add
ret
xor
dec
nop
sbb
cmps
dec
mov
ficom
mov
rol
outs
dec
retf
add
cmp
adc
nop
ret
cli
add
xchg
mov
(bad)
nop
test
or
dec
jp
mov
add
mov
pop
test
sar
push
inc
enter
jb
ret
push
jp
rcl
sahf
pop
pop
mov
push
push
add
jb
add
push
inc
xchg
adc
inc
push
sbb
or
fcmovbe
lods
popa
cmp
scas
dec
or
(bad)
pop
sbb
jg
push
pop
sub
dec
and
xor
js
mov
(bad)
pop
mov
or
pop
outs
and
mov
test
and
pop
or
into
rol
mov
lods
adc
push
mov
shr
loopne
jbe
sub
mov
adc
fcom
xchg
sbb
adc
or
pop
add
out
jne
or
pop
lock
mov
push
mov
test
sub
xor
cdq
sahf
and
es
push
jp
pop
sub
stos
adc
fmul
mov
or
call
(bad)
retf
push
jo
retf
fadd
jmp
pusha
neg
jo
jb
sbb
and
les
xchg
add
fidivr
cwde
dec
jmp
fidivr
mov
clc
jmp
addr16
xchg
rcl
(bad)
mov
or
lods
int3
mov
xchg
ds
sbb
jbe
push
daa
dec
(bad)
loopne
sub
int3
fisttp
dec
scas
xor
pop
movd
sbb
push
and
scas
push
rcl
mov
pop
mov
xchg
cmp
cmp
test
xchg
pusha
push
out
(bad)
cmp
xchg
mov
inc
loope
xchg
sbb
neg
arpl
mov
sbb
sbb
retf
shl
cli
adc
push
scas
inc
xchg
inc
rcr
push
or
(bad)
jecxz
ss
inc
cmp
or
loopne
(bad)
pop
jecxz
adc
push
(bad)
js
ret
scas
mov
add
js
into
mov
imul
pop
sub
rcr
mov
mov
add
pop
inc
loopne
xchg
push
jmp
retf
xor
outs
jp
call
sahf
inc
jne
nop
push
jp
or
shl
inc
and
idiv
bound
add
cmp
mov
jp
retf
daa
push
push
push
push
pop
loop
enter
lods
or
dec
repnz
call
xchg
lea
xor
push
push
inc
cdq
mov
call
loop
mov
outs
jbe
shl
push
jae
or
xor
jmp
imul
ret
push
and
adc
xchg
je
(bad)
mov
or
adc
jmp
(bad)
jmp
jmp
jbe
sbb
sbb
sbb
mov
sbb
popa
or
mov
add
add
dec
push
fidivr
add
je
push
xor
adc
lods
lds
imul
push
xchg
icebp
ins
js
push
shl
arpl
stos
sub
movs
ins
cs
jae
loope
and
sahf
inc
dec
loop
add
popa
ficom
mov
cmp
cmps
dec
cmp
pop
imul
push
xchg
mov
jmp
mov
hlt
(bad)
mov
fcom
pop
xor
sbb
mov
(bad)
rcr
push
mov
mov
mov
add
test
and
inc
out
pop
push
out
inc
inc
pop
push
jp
not
test
lods
das
inc
mov
mov
call
out
and
xor
mov
inc
add
add
pop
mov
and
inc
mov
add
outs
neg
pop
cmp
adc
xor
ret
add
xchg
push
popa
dec
adc
xchg
xchg
pusha
outs
cli
(bad)
and
pop
(bad)
idiv
xlat
inc
into
inc
dec
fiadd
xor
inc
(bad)
fs
pop
mov
scas
popa
and
(bad)
icebp
rol
adc
mov
push
or
pop
(bad)
(bad)
mov
call
ret
adc
dec
(bad)
add
or
call
sub
or
sahf
movs
mov
push
push
add
push
xor
das
jecxz
xor
pusha
mov
pop
push
xor
adc
cmp
jle
fiadd
sub
sbb
fs
push
and
or
inc
xlat
push
sahf
inc
adc
inc
or
cmps
mov
cmp
push
call
sub
mov
push
mov
(bad)
xchg
les
js
ss
(bad)
rol
mov
add
mov
mov
cli
out
jbe
add
js
sub
sbb
scas
xchg
ret
adc
mov
fimul
or
mov
loope
dec
push
stos
sbb
pop
or
xchg
xchg
mov
and
ss
jmp
pop
rol
das
dec
fidiv
mov
or
or
mov
jo
dec
sahf
cmp
add
inc
mov
cmp
pop
repnz
sbb
data16
ror
and
iret
data16
dec
fsub
or
adc
outs
sahf
(bad)
push
stos
push
or
sbb
sub
dec
or
pop
pop
xchg
adc
call
push
inc
xlat
xor
sahf
push
add
mov
les
mov
or
jle
xor
xchg
adc
push
jp
addr16
cmp
dec
bound
sahf
and
mov
xor
dec
adc
call
lahf
cwde
cs
add
cmp
cmp
data16
lods
dec
ds
ret
xor
stos
inc
xchg
dec
mov
gs
mov
js
mov
ret
pusha
sub
xchg
mov
xchg
bound
or
stos
scas
xchg
into
adc
mov
jp
dec
adc
addr16
pop
jbe
lods
add
outs
(bad)
(bad)
imul
mul
or
mov
mov
or
addr16
movs
dec
or
jmp
cmps
jbe
test
push
lods
or
xchg
mov
or
mov
mov
imul
lods
popa
jmp
or
imul
ins
or
push
dec
sbb
pop
sub
into
jae
sub
cli
scas
mov
lea
out
xchg
sbb
rol
lea
jl
cli
jmp
rcl
mov
test
adc
sbb
jle
xchg
fs
add
jne
dec
retf
push
pop
mov
xor
jmp
sti
jo
aas
or
jp
call
jmp
repnz
sbb
push
ret
pop
and
mov
repnz
scas
xor
mov
test
mov
add
mov
ret
dec
fsubr
inc
cmp
cmp
mul
mov
dec
mov
bswap
mov
inc
add
mov
(bad)
ss
push
adc
ret
jp
es
xchg
call
nop
cmp
mov
rol
push
and
pusha
push
push
outs
adc
cmp
pop
pop
out
sbb
jmp
loope
es
lahf
fcmovb
jo
and
or
xor
and
pop
push
push
mov
push
or
(bad)
enter
sub
rcl
cmp
rcl
movs
inc
out
pop
sbb
lods
test
repnz
loope
cmp
add
xchg
test
(bad)
aam
mov
test
imul
push
pop
test
mov
cmp
aam
cmp
sub
add
push
or
cmp
xchg
xchg
jecxz
leave
inc
adc
adc
add
gs
or
push
mov
sbb
or
out
(bad)
pusha
or
pop
sbb
sbb
jmp
aam
and
addr16
inc
enter
sbb
cmp
pop
into
pushw
add
bound
(bad)
hlt
cmps
dec
inc
out
mov
jmp
mov
cmps
into
loop
scas
adc
adc
inc
enter
pusha
ins
sbb
cmp
popa
sub
or
(bad)
imul
inc
scas
lds
or
xchg
xchg
sbb
and
scas
clc
mov
inc
fimul
scas
adc
sbb
outs
sbb
cmps
push
stos
push
lods
mov
ja
bound
mov
nop
mov
or
jmp
lods
push
imul
and
sub
add
adc
adc
pop
mov
mov
inc
out
daa
push
or
and
inc
push
je
rol
dec
adc
push
and
adc
or
cmps
xchg
pop
mov
loop
pop
mov
ret
outs
push
or
xchg
stos
jp
jecxz
(bad)
and
push
add
mov
pusha
and
outs
mov
rol
jae
retf
mov
cmps
mov
inc
sbb
mov
rol
test
ret
call
das
arpl
or
dec
ss
ror
cmps
lock
xor
fs
dec
jb
enter
mov
mov
mov
jb
mul
pusha
xor
dec
bound
bound
mov
cmp
jg
push
add
sub
sar
lock
sbb
lods
xor
mov
mov
xor
loope
dec
sahf
out
jno
mov
push
mov
mov
add
in
adc
retf
test
pop
cmps
or
pushf
xor
xor
push
mov
mov
mov
ret
xchg
mov
sbb
imul
ja
inc
cmc
xor
retf
mov
inc
aas
js
arpl
dec
xor
add
mov
js
leave
test
mov
jmp
jp
mov
fisub
sbb
mov
xor
jb
jbe
out
enter
jmp
inc
adc
xchg
add
xor
mov
int3
jnp
into
push
inc
js
ret
lods
adc
data16
jo
jle
jmp
lock
mov
adc
outs
add
outs
jmp
outs
sar
pop
push
pushf
popa
scas
ret
or
sub
popf
test
xchg
loop
mov
and
arpl
xchg
lock
sub
stos
add
mov
movs
push
loop
inc
cmp
sbb
inc
mov
lock
mov
sbb
sbb
mov
into
ja
test
add
push
mov
dec
mov
push
lock
xor
js
mov
push
jb
add
shr
cmps
jp
into
fadd
or
push
jbe
sbb
retf
pop
not
add
xor
xchg
lods
and
cmp
cmp
mov
push
and
xchg
(bad)
sbb
push
dec
jp
popa
sbb
cli
xor
xor
jecxz
adc
ret
xlat
ret
mov
mov
sbb
dec
nop
inc
mov
inc
push
loopne
cmp
xlat
pop
jo
dec
cmp
adc
mov
adc
bound
mul
mov
add
inc
jp
out
xor
(bad)
pop
add
and
pop
pop
retf
mov
mov
push
outs
leave
pop
dec
xchg
sbb
xor
shl
sub
repnz
idiv
push
arpl
pop
mov
(bad)
data16
pop
push
mov
mov
lock
cmp
test
js
shl
add
clc
test
adc
es
mov
(bad)
(bad)
and
(bad)
into
retf
xor
xlat
push
dec
ret
icebp
sub
pop
ret
leave
xchg
bound
adc
add
and
inc
xor
mov
dec
fwait
sbb
adc
sub
movs
xor
imul
or
sbb
push
ins
mov
stos
mov
inc
push
jmp
cmps
cs
mov
pop
pusha
and
or
xor
inc
or
push
jo
daa
imul
push
mov
popa
and
inc
adc
fsub
push
add
add
dec
jb
in
popa
sub
mov
pop
mov
inc
adc
jle
movs
and
add
neg
sub
es
sbb
mov
mov
sbb
mov
cli
repz
rcl
cli
jo
jmp
adc
and
pop
inc
lea
pop
dec
test
sub
fimul
xchg
xchg
push
sar
scas
nop
adc
pop
dec
out
dec
mov
push
int3
lods
mov
pop
push
mov
mov
xor
data16
out
lock
imul
cmps
cmp
xor
push
popa
or
dec
xor
or
mov
sbb
cmps
jmp
(bad)
test
jno
je
shl
add
mov
test
push
outs
pushf
or
cs
dec
push
and
cmovb
ret
cld
pop
sub
xchg
mov
lock
sbb
sub
jmp
bound
scas
mov
and
or
fnstenv
xchg
inc
jle
add
nop
jp
inc
(bad)
xor
test
cmc
add
mov
cwde
pop
sbb
cmp
jb
inc
jb
push
rcl
push
xchg
rcl
xchg
cmp
outs
(bad)
add
cmp
push
cmp
mul
loopne
sahf
call
dec
push
inc
sbb
data16
sbb
test
cli
xor
sbb
mov
xor
retf
shl
sahf
loop
popa
add
dec
jb
sahf
and
sub
cs
loop
adc
ror
scas
scas
cli
add
jb
call
fidivr
or
outs
pop
repnz
mov
mov
mov
jo
jecxz
adc
cmp
ret
das
arpl
inc
retf
inc
bound
xchg
or
data16
sar
and
dec
and
and
dec
inc
adc
add
rcl
lea
bound
adc
hlt
xor
pop
push
xor
leave
jo
adc
retf
mov
mov
ds
leave
pop
dec
out
push
(bad)
cdq
xchg
shl
icebp
mov
push
pop
jecxz
add
ret
test
pop
sub
mov
aam
(bad)
jp
cmps
sub
add
or
inc
pop
imul
imul
and
lock
cmp
cli
ret
inc
pop
and
mov
jbe
add
psrld
jmp
mov
mov
jp
cmp
ss
psubq
sbb
mov
jp
or
fist
mov
add
nop
(bad)
pop
mov
push
adc
xchg
aad
xchg
add
xchg
test
repnz
cmc
adc
xchg
pop
sahf
inc
mov
scas
push
loope
and
shl
dec
sbb
mov
xchg
push
daa
and
pop
or
xlat
adc
add
push
data16
in
pop
test
scas
cmps
sbb
add
inc
fsub
mov
ror
(bad)
mov
xchg
push
or
loop
ficom
call
sbb
jo
(bad)
scas
lock
in
and
push
add
inc
or
leave
rcl
xor
fcmovnb
jmp
xchg
xchg
push
outs
cmps
out
sub
(bad)
push
dec
mov
jbe
jmp
push
mov
xchg
(bad)
fiadd
jb
stos
cmps
cmps
shr
scas
inc
sahf
jmp
ret
mov
xchg
mov
ficomp
xchg
cmp
loop
xchg
rcl
inc
mov
or
stos
call
(bad)
cmp
inc
(bad)
push
add
push
pop
retf
adc
push
cdq
or
push
sub
out
xor
jo
jmp
jbe
daa
sbb
pop
lock
and
cmp
out
pop
and
sub
add
pop
sub
xchg
fcom
pop
lods
dec
outs
(bad)
push
test
push
cmp
sahf
jbe
pushf
ins
pop
scas
adc
push
add
dec
mov
cmp
ret
enter
push
repnz
lods
loop
mov
cmps
repnz
scas
daa
sub
add
call
sbb
test
ffreep
xchg
xor
add
(bad)
push
test
push
mov
add
jmp
jp
mul
inc
sar
mov
xchg
lods
adc
add
neg
aaa
jb
cmp
sbb
jnp
cmp
ret
inc
fs
adc
pusha
push
outs
mov
gs
add
sub
inc
pop
pusha
sbb
sar
mov
add
(bad)
push
rol
ins
and
push
out
push
dec
sub
stos
add
push
mov
sbb
pusha
or
test
adc
or
xor
sbb
aad
pop
not
stos
scas
sbb
daa
cmc
lock
sbb
dec
pop
ficom
sub
pop
leave
ins
dec
ret
or
shr
dec
leave
push
(bad)
scas
mov
pop
add
cmps
dec
ret
mov
ret
fisub
sub
cmp
inc
mov
out
ja
push
enter
or
nop
test
xchg
int3
push
and
add
and
jnp
cmp
sub
leave
retf
retf
dec
sbb
jb
pop
mov
dec
inc
jle
pop
popf
mov
push
ret
enter
call
jmp
(bad)
rol
and
add
retf
push
into
mov
popa
or
xor
add
xchg
xlat
xor
and
pop
das
sub
cmps
sahf
inc
sbb
das
or
add
mov
add
xor
repnz
sbb
lods
xor
push
or
cli
and
sub
test
xor
retf
pop
js
and
pop
or
dec
shl
pop
test
ins
cmp
outs
add
loope
cmps
dec
ret
ret
into
retf
mov
xlat
or
pop
scas
out
ss
push
inc
(bad)
ror
inc
push
sbb
push
icebp
xor
es
mov
pop
push
dec
jne
adc
fisub
scas
jmp
adc
imul
jne
cmp
outs
dec
push
add
inc
pop
xor
adc
mov
daa
int3
xor
adc
lods
stos
(bad)
pop
gs
fild
or
fs
daa
sub
inc
pop
inc
daa
cs
ret
dec
pop
sub
xlat
push
or
cmps
int3
pop
cmp
ficom
repnz
adc
mov
call
push
adc
retf
jp
mov
cli
mov
xchg
sahf
adc
adc
gs
inc
or
ja
xchg
and
int3
or
repnz
test
xchg
pop
dec
fs
ss
or
and
gs
mov
pop
add
xor
pop
inc
aam
pop
nop
es
movs
add
xchg
dec
stos
fsqrt
(bad)
push
pusha
jg
idiv
xchg
data16
jle
add
xchg
or
inc
sbb
popa
or
sahf
mov
les
sahf
mov
inc
adc
out
fs
or
lock
add
push
cmps
and
inc
fimul
mov
cmp
dec
xor
loopne
test
imul
xlat
or
sbb
sbb
out
ret
push
sub
div
retf
cmps
out
nop
pop
jb
and
xor
pop
adc
and
test
pop
pop
cmps
data16
test
stos
call
cmp
mov
(bad)
loope
mov
ins
mov
mov
jle
outs
adc
pusha
add
iret
rol
sbb
xchg
out
xchg
pop
fldl2t
dec
push
mov
or
pop
cmp
mov
or
out
sub
mov
add
test
push
addr16
mov
mov
fs
das
mov
out
add
cmp
jmp
pop
inc
pusha
rol
adc
and
ss
mov
pop
cmp
add
(bad)
fwait
push
mov
fidiv
jne
xor
pop
mov
pop
cs
and
repz
adc
inc
cmps
mov
sbb
or
or
xor
sahf
inc
sbb
call
mov
inc
loope
or
dec
daa
add
mov
push
shr
ins
loop
dec
ret
rcr
outs
adc
add
xor
cmp
inc
sbb
or
sbb
mov
mov
pop
call
xor
retf
add
rol
cmp
cmp
sub
test
dec
orps
arpl
shr
outs
jle
inc
pusha
and
xchg
cmp
push
es
lods
xchg
inc
outs
add
rcl
icebp
ficom
pop
sbb
cmp
js
pop
dec
jbe
dec
add
sub
mov
shl
inc
rcl
inc
ds
and
(bad)
ret
imul
out
inc
lods
add
(bad)
or
push
loop
sbb
imul
cs
mov
xchg
xor
xchg
lods
or
pop
add
xchg
pop
add
sub
xor
and
nop
stos
sub
add
and
pop
std
xchg
add
retf
pop
retf
inc
pop
or
or
daa
sbb
xor
(bad)
retf
dec
or
ss
sbb
add
sbb
(bad)
iret
aam
push
sahf
xchg
push
icebp
push
xchg
call
fild
(bad)
mov
push
and
loop
out
pop
mov
cmps
and
inc
push
jmp
push
add
adc
sub
sub
(bad)
outs
shl
mov
and
adc
pop
mov
xchg
scas
fidivr
stos
pop
mov
or
pop
push
jp
xor
ja
js
add
cmp
push
hlt
out
(bad)
sbb
rol
sub
stos
pop
add
xor
mov
cmp
cs
loop
(bad)
das
fisub
je
dec
jbe
loopne
mov
ret
mov
dec
xchg
jg
fidiv
fcmove
into
(bad)
push
pop
jnp
pop
xchg
dec
call
(bad)
sub
mov
daa
sbb
adc
ret
or
aam
jmp
push
jae
enter
dec
dec
popf
sub
sahf
or
xor
xor
mov
sub
ret
ret
sbb
outs
xor
add
push
ror
les
adc
xor
cmps
into
xchg
mov
adc
adc
inc
fadd
mov
inc
cmp
pop
xchg
mov
lods
(bad)
test
rol
ret
mov
outs
(bad)
and
adc
adc
add
neg
pop
add
out
cmp
jb
mov
jle
cmp
dec
addr16
adc
xor
inc
loopne
sti
cmp
xchg
sbb
into
and
outs
fsub
sub
cmp
dec
popf
sub
call
pop
js
adc
pop
jns
mov
add
retf
push
stos
push
mov
mov
mov
sbb
dec
cmps
ja
xor
push
(bad)
jmp
sahf
mov
jbe
rcr
dec
xor
idiv
xchg
xchg
inc
sbb
imul
mov
cmp
push
dec
and
inc
into
fcmove
loop
cmp
mov
retf
adc
cmp
imul
gs
jb
add
or
loopne
enter
ds
cmp
push
out
mov
loopne
or
out
pusha
icebp
ss
cmps
and
es
loope
pop
ret
rcl
xchg
cmp
inc
add
and
pop
(bad)
mov
push
cs
mov
out
inc
and
mov
xor
push
rcl
mov
inc
sahf
sub
add
adc
sbb
(bad)
xchg
mov
nop
adc
and
ret
pop
mov
or
bound
or
jns
shl
mov
pushw
(bad)
jecxz
dec
dec
adc
es
(bad)
mov
sub
repnz
test
call
pop
dec
ret
or
push
mov
pusha
cs
push
dec
loop
sbb
mov
sar
jle
test
or
es
xor
rol
mov
xchg
mov
ja
fcmovnbe
cmp
xchg
sbb
mov
adc
js
(bad)
(bad)
daa
movs
arpl
inc
xchg
rcr
push
jl
(bad)
or
xchg
and
xor
ret
adc
cs
or
leave
out
or
popa
mov
mov
call
mov
push
(bad)
sbb
or
jl
dec
test
clc
push
inc
adc
(bad)
xchg
fimul
and
inc
nop
imul
dec
dec
or
push
outs
dec
add
add
mov
(bad)
lods
gs
(bad)
scas
imul
pop
push
js
mov
push
jp
ret
push
sahf
xlat
mov
iret
rol
cmp
aaa
push
aam
and
lods
sahf
out
or
mov
jbe
dec
addr16
ret
push
jle
inc
adc
or
rcr
popa
mov
push
mov
ret
xchg
pushf
cli
push
sahf
dec
or
sbb
mov
dec
leave
adc
mov
lods
xchg
mov
xor
pop
call
cmc
imul
jbe
cmps
pop
mov
ror
jp
xlat
jp
ret
retf
retf
rcl
jle
push
inc
sbb
cmps
dec
pop
jne
into
adc
mov
icebp
out
mov
mov
ret
xor
add
pusha
loop
sbb
call
into
xchg
(bad)
out
add
jo
mov
call
mov
fisub
in
mov
mov
stos
outs
xchg
add
clc
push
push
(bad)
add
sbb
mov
pusha
push
or
mov
mov
inc
mov
lock
add
sbb
mov
mov
(bad)
pop
mov
inc
xor
fidiv
cmp
jecxz
sbb
stos
xchg
pop
sbb
cmp
cmc
adc
add
xchg
cmps
fbld
push
and
jo
hlt
xchg
mov
push
cmp
jb
rol
cmp
mov
ds
push
daa
scas
mov
loope
fisub
bound
xor
retf
mov
or
fcmovb
push
or
inc
es
mov
adc
ficomp
pop
stos
jle
xchg
sub
pop
add
xor
sbb
(bad)
scas
push
mov
sbb
mov
jg
mov
ins
pop
sub
das
jecxz
or
cs
adc
sbb
pop
cmp
xlat
pop
cmp
cli
add
sbb
test
push
rcr
or
jno
(bad)
push
mov
call
jle
sbb
loope
outs
xchg
or
add
and
fdiv
add
inc
xchg
push
pop
push
(bad)
xor
not
pop
push
and
das
push
sbb
js
adc
pop
jae
movs
pop
inc
shr
adc
sbb
(bad)
pop
pop
sahf
ins
inc
popf
fiadd
push
js
sbb
xor
retf
call
xchg
pusha
dec
inc
cmp
xchg
push
sub
cmp
and
inc
xchg
inc
imul
jmp
push
retf
push
das
popa
dec
cmp
jmp
ret
fiadd
and
push
es
scas
xchg
dec
pop
retf
xchg
ror
es
ss
sub
movs
mov
scas
dec
add
cmps
mov
popf
dec
jp
push
mov
pop
scas
inc
jecxz
fisub
add
jo
fs
push
addr16
inc
sub
lods
and
imul
pop
jp
and
xchg
dec
sub
xor
sar
xor
pushfw
and
jbe
lods
or
je
jg
push
add
mul
hlt
loopne
inc
xchg
sbb
sub
adc
push
bound
nop
and
repnz
cdq
repnz
into
xchg
mov
sub
dec
mov
(bad)
adc
popa
pop
sbb
dec
pop
out
mov
add
and
ds
push
lahf
mov
aas
xchg
nop
push
call
mov
dec
push
cs
sbb
ds
xor
push
adc
nop
cmp
dec
mov
pop
sbb
ds
or
sub
lods
mov
sub
push
gs
fiadd
push
retf
add
add
mov
push
js
sbb
outs
inc
ret
adc
fs
ds
cmp
test
xchg
mov
cmp
or
add
(bad)
xchg
inc
cmps
mov
sbb
push
(bad)
cmp
repz
cmp
pop
xor
das
xlat
add
mov
ds
xchg
aam
mov
jecxz
cs
setge
ss
jb
sub
mov
fisubr
xor
jp
xchg
add
cmp
xchg
mov
in
arpl
repnz
dec
lea
loopne
es
pop
xor
fidiv
daa
sbb
test
loopne
fcmovbe
rol
ret
ja
cmc
and
sub
mov
and
inc
js
ret
ret
outs
mov
jbe
add
add
xchg
cmp
repnz
or
ds
xor
and
add
jbe
cs
ret
xchg
adc
rol
(bad)
mov
sar
dec
(bad)
imul
add
push
inc
popf
lods
inc
ss
add
add
or
into
jbe
imul
mov
xor
sub
adc
pop
push
xor
xchg
ret
data16
adc
push
jb
cmps
enter
(bad)
fmul
mov
cmp
loop
movs
dec
push
xchg
pop
outs
cmp
push
adc
outs
rcl
rol
scas
loop
xor
(bad)
inc
inc
or
add
ret
jp
add
add
rol
and
dec
shl
dec
mov
lods
xor
retf
pop
mov
pop
(bad)
(bad)
push
inc
loop
scas
ds
ret
enter
mov
dec
cmp
cmps
out
arpl
mov
jmp
mov
das
stos
out
ins
and
xchg
xor
push
inc
or
add
clc
add
cmp
pusha
jp
pop
add
sub
xchg
pop
push
pop
cmps
mov
dec
(bad)
xor
sbb
push
call
push
pop
inc
jb
add
pop
jmp
or
mov
dec
outs
test
mov
adc
add
mov
(bad)
mov
or
mov
test
loop
(bad)
sbb
push
pop
pop
lods
and
ret
ss
adc
and
retf
ins
das
add
xor
and
pop
jbe
lahf
pop
sar
(bad)
into
rcr
dec
inc
push
xor
adc
outs
test
xchg
ret
shl
dec
push
jecxz
aad
inc
or
scas
push
in
dec
test
push
xchg
xchg
mov
daa
xor
movs
pop
dec
xor
enter
aaa
repnz
stos
rcr
sub
add
js
test
sahf
add
je
jne
retf
and
pop
xchg
add
push
loopne
inc
ds
shl
out
(bad)
push
add
inc
fdiv
pminub
adc
push
call
retf
or
cmp
adc
leave
aaa
fiadd
or
(bad)
or
dec
sbb
sbb
mov
push
mov
dec
pop
sub
jmp
mov
add
sbb
ret
mov
sub
not
or
(bad)
nop
repnz
and
dec
retf
pop
mov
add
retf
mov
pusha
retf
cdq
adc
cmp
(bad)
xchg
data16
cmp
pusha
or
add
jmp
push
adc
add
add
pop
xchg
out
or
jb
dec
add
and
add
add
or
xor
daa
sbb
adc
in
outs
push
cdq
leave
xor
ficomp
(bad)
imul
xchg
sbb
(bad)
cmp
xor
xor
cli
ret
sub
push
and
je
push
fiadd
add
or
outs
jb
daa
add
or
push
or
loope
xchg
dec
xchg
and
imul
test
push
or
pop
fidivr
dec
or
xor
add
(bad)
and
push
imul
mov
cmps
rcr
outs
cs
mov
pop
sbb
adc
push
add
pop
(bad)
retf
add
mov
shl
push
jp
dec
push
loopne
push
mov
retf
mov
xor
and
stos
and
push
(bad)
sub
into
sub
mov
(bad)
shl
fstp
cmps
add
push
adc
jae
pop
sar
es
xor
jno
dec
repz
xor
xchg
add
rcr
repnz
loope
sbb
adc
mov
pushf
ins
sbb
push
ins
inc
cli
push
push
js
xchg
adc
push
xor
and
aaa
add
push
sbb
out
push
cmp
sbb
mov
add
fisub
pop
lock
in
(bad)
pop
lock
mul
xchg
pusha
sbb
shl
mov
add
fidivr
mov
adc
mov
xchg
mov
sub
push
inc
push
ret
mov
je
or
mov
popf
or
xchg
sbb
mov
xchg
stos
push
or
test
cmp
and
add
sahf
adc
and
mov
cmps
push
xchg
rol
mov
and
push
or
xor
sbb
fisub
xlat
es
ficomp
push
or
jne
push
cmp
jb
xor
cmp
sbb
pusha
add
arpl
stos
push
nop
push
mov
jle
push
mov
or
sbb
xchg
inc
mov
or
sbb
sub
into
inc
mov
mov
stos
sbb
pop
mul
enter
or
fwait
inc
cdq
lock
ret
add
xor
dec
loopne
mov
daa
fisub
stos
add
xor
(bad)
xor
jmp
loop
cmp
mov
mov
out
daa
push
ss
(bad)
mov
dec
add
add
ds
add
fidivr
xchg
jb
into
fidivr
out
xchg
or
(bad)
out
or
jp
sbb
add
les
cli
dec
mov
mov
cmp
push
xchg
add
or
or
ins
sbb
(bad)
add
imul
ret
push
mov
sub
jmp
adc
shl
dec
pop
add
or
cmp
(bad)
movs
movs
fdivp
iret
mov
cmp
inc
loopne
adc
mov
out
sbb
ja
add
push
fst
sub
or
hlt
xchg
cmp
(bad)
or
ds
and
xchg
inc
inc
test
bound
mov
loop
stos
out
fdivp
xor
or
mov
pop
daa
jecxz
psubd
adc
outs
enter
add
xchg
bound
mov
(bad)
sbb
outs
inc
ret
pop
pop
dec
push
xchg
pusha
push
inc
jo
xchg
and
test
inc
sub
and
or
inc
inc
fchs
icebp
pop
ss
call
stos
retf
sbb
sti
and
outs
pop
test
or
adc
push
ret
ds
shl
sub
jp
push
js
push
xchg
ds
pusha
and
push
push
outs
jmp
jl
enter
movs
xchg
pop
outs
pop
add
addr16
jmp
sub
mov
xor
and
add
outs
add
mov
shr
cs
(bad)
fiadd
ret
rol
inc
cmps
add
sbb
mov
jg
into
sbb
xchg
pop
lods
xchg
push
addr16
je
sub
sbb
cmp
fmulp
xchg
ror
movs
sub
lods
dec
(bad)
push
xchg
adc
sbb
sahf
jb
xchg
inc
test
loop
push
(bad)
jmp
sub
loopne
mov
xor
es
scas
jp
inc
popa
mov
sub
(bad)
addr16
mov
in
xchg
mov
push
es
mov
pop
retf
neg
cmps
dec
dec
jbe
rcr
in
jecxz
daa
xor
dec
sahf
out
rol
sub
retf
and
add
jp
or
fidivr
mov
clc
enter
jg
xor
and
inc
lods
add
add
mov
xchg
dec
sahf
mov
inc
xor
icebp
and
xchg
nop
js
push
loop
fdivr
retf
out
xchg
add
fidiv
lods
lds
mov
gs
sbb
adc
inc
push
das
or
sbb
lods
and
aam
cs
test
mov
ret
rcl
xor
mov
int3
rcr
inc
ss
pop
ja
adc
sbb
pop
mov
test
add
xchg
cmp
pop
test
test
push
shl
dec
into
sbb
mov
das
sar
ret
add
mov
lods
jb
popa
and
or
fsubp
bound
bound
test
xor
sbb
enter
cmps
test
and
call
mov
mov
adc
jae
cmovp
inc
cmp
js
out
jb
sub
aam
sahf
mov
nop
mov
cmp
adc
sub
inc
lock
push
sub
ror
outs
arpl
imul
and
push
pusha
dec
inc
and
mov
sub
(bad)
add
mov
jns
cmps
push
cmps
inc
sbb
inc
rol
push
sub
movs
and
jo
sub
and
daa
or
mov
mov
test
lahf
mov
bound
push
clc
xor
cmp
inc
dec
(bad)
sar
loop
push
add
mov
test
mov
jmp
inc
pop
(bad)
fwait
mov
repnz
add
loopne
loope
jbe
xchg
mov
mov
mov
leave
jo
or
in
(bad)
xchg
out
pop
cmps
sub
imul
das
push
(bad)
or
jmp
and
push
mov
add
add
or
sbb
jae
and
or
pop
cmp
xchg
pop
push
inc
jmp
jb
or
sub
pop
out
jle
addr16
daa
bound
xchg
xchg
out
(bad)
and
mov
cmp
mov
retf
ficom
daa
inc
(bad)
out
sar
push
js
imul
jmp
outs
into
adc
iret
dec
rol
sub
mov
and
dec
cmp
in
lea
loopne
dec
sbb
cmps
ja
pop
retf
xchg
pop
jecxz
sbb
dec
dec
push
sub
fst
xchg
dec
xor
mov
dec
inc
(bad)
jp
jbe
sub
inc
pop
ja
pusha
loopne
adc
sub
xor
xchg
mov
call
and
ss
xchg
xlat
retf
mov
ss
and
mov
add
add
xchg
fld
inc
adc
pop
add
pop
ss
and
(bad)
fcmovbe
xchg
ret
cmp
rcr
cmc
adc
dec
stos
ret
push
xchg
xchg
popa
or
push
js
jle
test
xchg
xor
inc
push
inc
dec
push
sbb
pusha
pop
repz
mov
jb
or
pop
cmp
jmp
cmp
mov
xchg
push
mov
imul
mov
arpl
mov
ficom
mov
sbb
bound
es
adc
adc
popa
inc
dec
pop
icebp
mov
scas
push
jmp
jbe
sub
repnz
inc
dec
push
and
or
(bad)
rcl
dec
pop
push
outs
cmp
addr16
xor
add
(bad)
cmp
sbb
push
add
pusha
inc
adc
or
and
xchg
ret
cmps
jno
mov
shl
sbb
jecxz
loop
cmp
cmps
sbb
xchg
retf
ror
mov
and
out
out
pop
xor
pop
sbb
movs
add
sbb
(bad)
callw
cmc
(bad)
push
(bad)
shr
(bad)
push
pop
or
fmul
xchg
call
dec
cmps
aam
mov
inc
or
mov
pop
adc
add
sub
sub
mul
jecxz
xor
call
das
mov
xchg
and
add
or
test
xor
pop
out
(bad)
sub
lahf
fcmovnbe
cmp
dec
arpl
mov
push
loop
rol
push
sbb
or
dec
push
mov
es
mov
jecxz
mov
mov
add
and
into
push
adc
mov
retf
js
dec
xchg
test
xor
or
xor
sub
loopne
push
dec
dec
lock
add
sahf
faddp
jmp
ror
jmp
push
out
inc
xor
push
sub
cmp
push
retf
dec
push
hlt
mov
inc
lahf
and
call
and
ret
or
or
stos
mov
or
ret
push
mov
cmp
add
shl
push
pop
push
sahf
mov
mov
call
xchg
sub
adc
jmp
lods
push
push
repnz
pusha
dec
mov
inc
data16
loopne
mov
cmp
pusha
ins
(bad)
jg
push
pop
dec
sub
mov
sahf
xchg
sar
sahf
(bad)
pusha
or
push
popf
imul
pop
dec
add
movnti
xchg
pop
push
aam
js
div
pop
xlat
add
cmp
push
bound
mov
iret
xor
xor
outs
pushf
rol
push
sub
pop
out
inc
aaa
mov
mov
mov
ret
sub
xor
sbb
mov
adc
out
jbe
popa
cmp
mov
rcr
(bad)
jmp
push
push
scas
fs
call
ins
inc
sub
cmp
pop
xlat
push
jbe
loopne
cmps
repnz
aam
or
dec
push
movs
outs
inc
push
mov
fimul
outs
retf
push
xchg
out
pushf
ins
js
mov
nop
(bad)
out
cwde
and
lods
sahf
cmp
push
mov
jmp
movs
(bad)
fsubp
sar
or
icebp
bound
xchg
mov
js
cmp
arpl
and
inc
pop
push
test
arpl
adc
js
or
into
pop
(bad)
or
xchg
loopne
loop
xchg
fimul
push
repnz
jo
xor
xchg
pop
xor
jns
push
pop
js
imul
xchg
push
xchg
aaa
test
add
sbb
into
sar
and
lods
adc
mov
mov
test
xchg
push
add
or
retf
rcl
xchg
rcl
les
faddp
or
addr16
(bad)
(bad)
add
repnz
rol
push
mov
movs
cmp
mov
xchg
dec
fimul
add
ds
je
sub
dec
pop
push
xor
mov
push
add
bound
out
sub
mov
imul
outs
cmps
or
stos
test
mov
xchg
cmps
test
sbb
mov
mov
push
sub
push
icebp
retf
xchg
mov
xchg
fdiv
and
cmps
xor
mov
mov
rol
dec
daa
dec
fmul
adc
rol
jecxz
adc
jge
mov
jp
pop
imul
out
out
(bad)
and
call
mov
mov
jle
xchg
(bad)
(bad)
jmp
push
retf
add
mov
fsub
movs
push
outs
dec
and
popa
inc
nop
pop
mov
push
sbb
jo
xchg
aaa
adc
rcr
retf
sar
ret
mov
int3
xchg
xchg
pop
mov
sbb
cmp
xchg
jle
jb
mov
or
and
push
jb
test
xor
add
mov
movs
out
sbb
add
xchg
xchg
push
jp
inc
xchg
lock
mov
cmp
ret
dec
inc
push
scas
(bad)
add
scas
addr16
xchg
fimul
pop
outs
add
(bad)
retf
inc
outs
jmp
mov
js
call
or
fld
pop
pop
ret
cmp
sbb
jmp
loop
call
push
xor
jb
imul
mov
ret
push
mov
or
add
adc
dec
mov
cmp
pop
mov
jnp
jmp
pop
inc
push
push
adc
jle
push
jle
adc
arpl
sbb
or
adc
xchg
xor
push
xchg
xor
cli
nop
retf
cmps
(bad)
lahf
add
pop
rol
pcmpgtd
pop
add
push
enter
mov
jmp
jb
inc
pusha
in
push
out
test
js
mov
jle
xchg
adc
cs
xchg
xchg
fsub
push
pop
mov
push
add
cmp
sub
pop
rcl
ret
push
xchg
ret
rol
pop
cmp
xchg
sbb
rol
sahf
inc
mov
jo
pushf
add
mov
cmc
xchg
mov
repnz
pop
mov
jo
xor
adc
dec
or
push
push
inc
fcmovb
inc
das
add
cs
inc
sub
data16
xchg
ds
xchg
add
nop
in
pusha
add
mov
icebp
jle
outs
jecxz
sahf
add
cmp
adc
sbb
or
cmp
dec
pop
inc
mov
jb
xchg
dec
cmp
push
inc
ror
mov
add
push
push
sahf
mov
cmp
aaa
push
call
scas
adc
(bad)
into
pop
sub
pop
inc
outs
xchg
lods
or
mov
mov
retf
dec
inc
xchg
mov
xor
push
call
(bad)
add
cmp
and
xor
(bad)
(bad)
mov
bound
ss
mov
jg
out
jp
xor
push
jle
sbb
lock
add
sbb
sbb
pop
leave
pop
(bad)
push
or
sbb
ret
loopne
xchg
or
gs
inc
inc
scas
cmps
sbb
cmovle
test
les
mov
inc
loope
or
add
popa
ror
mov
and
add
or
push
nop
push
dec
add
ins
aas
(bad)
mov
xchg
rcr
dec
mov
sub
xor
mov
mov
or
sub
add
inc
sub
js
sub
ret
dec
ins
xchg
repnz
and
repz
dec
call
sbb
(bad)
or
jb
pop
cmps
pusha
sub
lahf
adc
adc
jle
adc
xchg
nop
mov
cmps
stos
aas
mov
add
cmp
push
lock
je
xchg
push
sub
mov
cmps
mov
fidiv
mov
loop
stos
cs
movs
inc
mov
mov
jmp
ds
inc
cmp
retf
sub
call
mov
push
pop
nop
add
jg
dec
sbb
pop
repnz
cmps
scas
jnp
jo
or
js
cmp
xor
loop
ja
bound
push
dec
dec
push
pop
ss
push
mov
cmp
cli
cmp
jmp
daa
add
push
je
push
ret
ins
cdq
cmc
(bad)
stos
ror
xor
xchg
push
addr16
push
push
or
inc
ret
ret
inc
or
scas
mov
sbb
cmp
inc
fld
pop
sbb
mov
mov
lock
push
jb
inc
cwde
cmp
ds
xchg
push
jmp
cwde
jns
fwait
out
into
neg
imul
(bad)
dec
push
lods
mov
das
xchg
clc
stos
xchg
xor
inc
jbe
movs
je
push
scas
and
je
xor
shl
pop
and
add
xchg
mov
dec
test
jp
fs
mov
jecxz
add
icebp
push
push
ds
cmovb
or
add
inc
cmp
ds
or
or
adc
dec
fwait
not
xchg
pop
xchg
(bad)
dec
mov
xchg
and
push
jmp
and
and
scas
dec
mov
inc
push
or
sbb
retf
adc
jmp
xor
sub
into
pusha
fs
arpl
push
xor
xchg
jecxz
sub
jp
(bad)
add
pop
ret
mov
inc
push
add
clc
add
push
dec
or
outs
and
fwait
add
ret
cmp
daa
inc
mov
mov
add
cmp
xchg
and
bound
add
add
jb
jne
dec
loopne
loop
push
push
pop
inc
scas
and
into
sub
add
xchg
shl
ror
mov
rdmsr
pop
neg
push
jo
jmp
sbb
out
dec
jmp
popa
les
cs
add
add
arpl
mov
movs
gs
ret
sub
push
cmps
jp
or
mov
and
dec
sub
imul
cmps
rcl
and
(bad)
or
cmp
xor
push
mov
aas
dec
dec
lods
sbb
jle
sbb
mov
push
mov
xor
scas
cs
movs
or
mov
in
mov
call
mov
int3
(bad)
pop
inc
mov
clc
retf
push
pop
ret
rcr
into
sbb
fnstcw
adc
hlt
cmp
sti
dec
jbe
add
push
mov
mov
das
sbb
add
and
jb
out
push
sqrtps
ficom
add
aad
imul
scas
dec
jb
add
xchg
bound
push
sbb
push
or
cli
and
inc
sbb
mov
loop
test
ja
inc
mov
jo
rcl
jle
stos
xchg
and
xor
and
dec
arpl
mov
mov
bound
pusha
fimul
mov
cmps
pop
add
mov
repnz
jp
xchg
jb
movs
clc
ss
cmp
loope
push
dec
jp
push
mov
retf
mul
pop
cs
dec
data16
xor
into
dec
sub
push
push
into
nop
cmc
jmp
pop
into
pop
imul
xlat
push
(bad)
adc
push
add
add
outs
jb
inc
mov
lea
outs
loopne
jne
jo
(bad)
mov
into
pop
or
xchg
stos
xchg
pusha
imul
xchg
je
and
xor
dec
xor
stos
add
cmps
mov
rcr
ret
sbb
shl
div
test
sub
out
cmp
sub
mov
xchg
xchg
fs
and
add
in
mov
and
loope
inc
push
jmp
jmp
(bad)
sahf
push
mov
(bad)
xchg
enter
sahf
pop
jbe
mov
xor
sub
jbe
out
cmp
dec
dec
loopne
out
jle
dec
(bad)
repnz
loopne
es
push
jmp
or
add
(bad)
jmp
cs
rol
ret
and
push
xchg
cmc
dec
add
mov
cmc
jnp
sbb
retf
fidiv
out
add
dec
inc
inc
cmps
jp
or
add
(bad)
loop
repz
push
outs
cdq
inc
push
ds
scas
xchg
pop
(bad)
sahf
loop
pop
sbb
sub
pop
xchg
sbb
(bad)
(bad)
cs
faddp
jmp
div
xchg
pop
sub
xchg
(bad)
ds
and
xor
mov
mov
mov
test
ffreep
sbb
scas
inc
lods
mov
psllq
retf
es
sbb
(bad)
rol
nop
shr
call
jae
mul
add
cmps
sahf
push
cmps
sahf
sbb
push
arpl
jge
pop
sahf
(bad)
pminsw
lock
push
ss
add
jne
dec
(bad)
out
inc
mov
je
mov
sahf
loope
or
or
bound
mov
call
retf
push
push
push
das
into
add
inc
sbb
mov
add
pushf
js
outs
xchg
dec
sbb
push
sti
sbb
mov
add
or
inc
lock
jecxz
mov
mov
cmp
ins
add
or
pop
nop
push
push
out
or
sbb
push
push
mov
sbb
test
mov
xchg
push
pop
adc
pop
mov
xor
push
sbb
pop
jp
add
ret
and
fwait
(bad)
retf
adc
adc
sub
adc
mov
(bad)
xor
ds
or
ds
lock
xchg
push
sti
push
into
movs
xchg
mov
mov
inc
mov
adc
adc
adc
je
mov
push
pop
mov
mov
int3
xchg
add
not
mov
jo
aas
mov
loop
cmp
mov
lea
xchg
fs
sub
xor
retf
jp
pop
push
push
sbb
das
dec
sbb
and
jbe
adc
xchg
lods
sar
sbb
(bad)
xchg
sbb
push
(bad)
(bad)
pop
adc
or
or
(bad)
xchg
xchg
inc
cli
(bad)
xchg
mov
xchg
dec
out
popf
and
cmps
lock
xchg
fs
push
cli
jae
and
jle
add
xor
jg
rol
loope
push
add
pop
xchg
(bad)
pop
mov
xor
or
inc
ret
mov
sbb
add
mov
jmp
idiv
jo
push
ret
ficom
xchg
je
add
push
xor
mov
jmp
mov
enter
and
test
mov
call
outs
jb
test
lods
jmp
fdivr
shl
dec
outs
push
and
cmp
sahf
push
xchg
mov
jb
mov
fcomi
in
or
jo
mov
out
ss
pop
clc
mov
add
mov
sub
push
das
add
rol
(bad)
ret
adc
xor
adc
push
mov
pusha
sub
mov
or
add
data16
(bad)
jne
xor
fidiv
jb
cwde
adc
mov
lea
xor
das
shl
mov
es
idiv
push
jbe
add
sbb
cli
mov
dec
ja
ja
jp
shl
and
push
sub
hlt
cmp
mov
test
rcl
xor
fwait
mov
push
call
popf
and
mov
pop
mov
lahf
pop
mov
add
mov
pop
dec
pop
jp
arpl
(bad)
mov
call
bound
rcr
xor
fs
push
cmps
outs
es
or
add
pop
leave
add
xor
pop
in
pop
vprolvq
sahf
retf
jp
jle
inc
fwait
add
or
push
call
sbb
sbb
inc
push
movs
das
cs
add
mov
fwait
sbb
xor
inc
sbb
xchg
push
addr16
out
sbb
push
push
mov
lea
add
das
inc
pop
sbb
xchg
and
pop
ret
ss
push
mov
mov
sbb
rcl
fimul
xor
xchg
rcl
mov
pusha
xor
ss
xor
sub
sti
mov
cmc
xor
adc
mov
data16
add
mov
or
push
add
push
sahf
mov
adc
cdq
inc
js
or
push
cmp
bound
aaa
data16
call
(bad)
es
lock
into
xchg
add
movs
arpl
mov
fiadd
jp
inc
mov
or
dec
(bad)
div
adc
out
xchg
push
imul
es
adc
cmovbe
xor
loop
mov
sub
dec
sbb
addr16
push
xchg
mov
adc
add
pop
sbb
add
cs
jmp
dec
xchg
gs
pop
push
imul
cmp
sbb
ins
mov
popa
inc
cli
and
jb
gs
(bad)
or
inc
xchg
outs
ins
inc
pop
sbb
xor
or
xchg
in
(bad)
icebp
js
test
lock
sub
retf
mov
es
repnz
arpl
push
cs
jo
xchg
cs
ret
sbb
(bad)
loop
(bad)
dec
loop
nop
push
dec
data16
ror
lahf
(bad)
leave
(bad)
pop
sbb
cwde
jp
(bad)
or
bound
call
push
stos
sub
dec
mul
xor
sbb
mov
into
cmp
scas
ss
invd
sbb
sub
retf
jle
call
sbb
jp
xchg
sbb
and
adc
into
stos
cmp
pop
cli
push
rcl
mov
push
dec
and
dec
dec
scas
mov
xor
cmp
test
daa
push
add
cdq
(bad)
dec
dec
mov
(bad)
leave
out
cmps
bswap
sub
and
sub
(bad)
in
xor
es
retf
dec
mov
data16
xchg
dec
or
pop
cmp
inc
bound
leave
iret
sti
js
dec
cmp
push
mov
push
lods
call
sub
jle
pop
test
inc
cwde
mov
adc
pop
sub
push
or
sbb
rol
jmp
test
or
xor
xchg
sbb
mov
or
test
inc
cdq
xor
xchg
push
dec
sbb
(bad)
xchg
push
not
adc
or
outs
or
push
add
nop
push
or
retf
jp
out
push
mov
adc
fist
mov
push
xchg
jo
ret
xor
pop
(bad)
retf
out
rcl
push
stos
pop
in
jecxz
dec
mov
and
pop
sar
test
sub
popa
add
sbb
jo
push
ret
call
or
push
adc
test
mov
cmp
ss
loope
inc
mov
sbb
xchg
into
push
mov
xchg
sbb
mov
sbb
xchg
mov
mov
fiadd
dec
loope
add
cmp
ins
loope
(bad)
pop
ror
sbb
and
jp
push
sub
pop
push
jmp
loope
add
xchg
cmp
push
jecxz
cs
repnz
loope
pushf
ret
inc
pavgw
jp
dec
cmp
mov
imul
mov
loope
jle
call
jle
retf
and
add
inc
dec
imul
push
ds
sbb
lock
mov
ret
sbb
push
and
aaa
pusha
inc
mov
jle
sub
sub
push
pop
rcr
push
cli
dec
pop
and
mov
sbb
fcomp
push
push
(bad)
leave
xchg
jp
and
adc
fbld
xor
and
lock
sbb
xor
jmp
jae
mov
pusha
cmps
jmp
ret
cmp
lods
dec
or
xchg
mul
push
imul
hlt
jo
push
out
rcl
xchg
pop
adc
out
repnz
sub
loop
push
mul
lods
add
sub
or
adc
add
rol
dec
push
mov
cmp
push
wrmsr
pop
push
push
sub
int3
adc
call
sub
repz
inc
push
arpl
xchg
ds
xchg
add
or
outs
loopne
mov
ins
loope
rol
ds
loop
xchg
xchg
cs
adc
add
sub
push
dec
or
mov
dec
mov
fild
sbb
imul
push
dec
sub
mov
sbb
icebp
push
jp
jnp
mov
dec
jmp
inc
mov
mov
mov
sub
sbb
push
into
rol
add
sahf
mov
call
add
adc
inc
pop
jg
mov
fistp
lods
push
es
or
pop
cmp
sbb
pop
and
sub
inc
xchg
push
jp
push
ud2
mov
xchg
pop
or
lods
loop
inc
add
rcl
mov
mov
mov
push
sahf
mov
retf
add
adc
into
scas
cdq
add
shl
or
(bad)
cmpps
pcmpeqw
xor
(bad)
xor
cli
jmp
xor
fld
mov
sbb
xor
pusha
cmp
jno
dec
loopne
add
retf
or
sbb
pop
jmp
sahf
xchg
sub
mov
push
push
pop
cmp
cwde
xchg
push
jns
js
fidiv
ja
add
push
neg
aaa
and
pop
dec
inc
fld
scas
ret
and
inc
outs
jle
dec
sbb
outs
pusha
cmp
or
pop
xor
or
(bad)
fadd
pop
stos
push
mov
mov
outs
and
lock
test
and
or
cmp
pop
ficomp
idiv
push
outs
sbb
adc
and
sub
bswap
xchg
xlat
rol
loop
xchg
retf
cmp
push
cmp
leave
shl
outs
inc
dec
mov
rol
push
dec
(bad)
mov
pop
or
into
adc
into
adc
sub
push
push
adc
jle
nop
lock
mov
xor
repnz
aaa
push
or
(bad)
into
adc
add
add
ds
fdiv
or
pop
pop
add
xchg
push
push
call
sbb
xor
(bad)
push
les
popf
and
and
repnz
sbb
mov
call
sbb
xor
out
push
xchg
and
loopne
xchg
inc
sbb
add
sar
push
sar
jmp
js
mov
add
sbb
add
nop
push
and
aaa
cmc
or
push
xor
mov
xlat
loopne
jbe
mov
out
push
add
ret
adc
cli
adc
add
xor
jne
push
cli
and
sbb
mov
push
lea
hlt
ret
xchg
and
inc
inc
call
push
arpl
addr16
and
sbb
xor
jle
dec
xor
(bad)
push
cmp
imul
ficom
retf
add
xchg
into
cmp
jb
jbe
add
ror
fwait
add
out
and
pop
add
mov
push
loop
es
mov
cs
adc
adc
bound
loope
sbb
(bad)
or
je
retf
out
or
xor
sub
cmp
stos
ret
cmc
into
pop
outs
ret
jmp
adc
mov
add
bound
jbe
lods
rcl
into
jbe
mov
push
test
jmp
xchg
mov
mov
ud2
adc
pop
dec
push
out
cmp
inc
(bad)
js
and
dec
xchg
ja
or
(bad)
jb
sbb
mov
mov
mov
imul
es
popf
add
test
rol
nop
fwait
mov
or
push
jnp
test
loop
sub
dec
and
xor
mov
mov
adc
ja
and
add
jp
repnz
aaa
push
or
mov
fs
xchg
or
xchg
push
adc
xor
adc
inc
inc
dec
(bad)
cli
jle
xor
dec
mov
xchg
xor
push
sub
imul
push
push
add
mov
imul
stos
jp
cmovb
scas
push
xchg
enter
ja
lods
push
xchg
xor
inc
mov
adc
xor
into
jmp
data16
xchg
test
inc
dec
inc
push
dec
add
or
inc
xor
pop
cmp
pop
adc
dec
and
dec
push
bound
push
or
pop
push
ret
fwait
shl
rol
jbe
fisubr
push
les
inc
(bad)
ficomp
inc
mov
(bad)
mov
and
loop
sbb
push
jmp
mov
xchg
lods
xchg
push
pop
sbb
fisub
jo
mov
loopne
mov
dec
push
xor
sbb
es
sbb
loop
cmps
push
out
sbb
rcl
pop
push
adc
sbb
test
out
and
adc
mov
jns
lock
cmp
mov
jle
adc
aaa
adc
push
loopne
(bad)
cli
sub
fiadd
mov
push
push
xor
or
out
xchg
sub
scas
test
add
mov
adc
push
test
add
xchg
ds
inc
sub
push
inc
or
and
sub
push
dec
or
mov
and
(bad)
cmp
mov
call
pop
mov
nop
and
cmp
pop
mov
inc
enter
xor
icebp
mov
aaa
pop
xor
push
into
pop
inc
lock
dec
pop
mov
dec
mov
into
add
xchg
mov
adc
mov
mov
dec
loop
je
jno
jbe
jp
lea
retf
ret
push
fimul
xchg
mov
inc
stos
cmp
sbb
test
(bad)
aam
push
into
ss
into
test
adc
fmul
push
and
sbb
sbb
pop
shr
test
push
push
push
daa
pop
daa
sbb
dec
push
add
inc
pop
mov
sbb
ret
jle
retf
cmp
add
dec
xchg
outs
sar
push
push
adc
or
and
out
out
fimul
dec
push
or
add
pop
fcom
mov
mov
fcomp
mov
push
jle
jl
xchg
adc
dec
loop
mov
mov
ds
jecxz
test
(bad)
hlt
dec
retf
out
adc
movs
jecxz
xchg
xor
mov
lods
jne
cmps
mov
sbb
mov
mov
ds
sbb
jo
das
inc
pop
retf
xchg
sub
sub
dec
cli
call
ss
add
daa
adc
add
ins
(bad)
jp
or
xchg
js
adc
mov
mov
pop
scas
xchg
or
push
dec
push
bound
pop
push
inc
or
stos
dec
push
jo
mov
into
sub
and
arpl
sbb
jmp
mov
out
push
sbb
adc
cmp
push
out
in
pusha
push
out
jp
(bad)
scas
push
xchg
ret
xchg
mov
add
xor
and
xchg
cmp
add
sar
sahf
sahf
push
cmp
sub
sub
retf
push
fsubp
imul
jmp
xchg
mov
pop
pop
inc
xchg
mov
arpl
add
pop
rcl
mov
sbb
add
push
popa
push
call
sub
mov
js
sub
adc
and
sub
push
mov
pop
add
sub
xor
add
push
xchg
xchg
jae
or
adc
and
add
scas
sbb
mov
adc
(bad)
les
lahf
mov
inc
xchg
and
mov
(bad)
mov
or
push
imul
mov
add
mov
mov
dec
push
arpl
sub
sbb
sbb
in
mov
loopne
cmps
mov
sbb
mov
rcl
push
mov
or
cmc
(bad)
shl
scas
mov
and
and
push
les
addr16
pop
xor
iret
add
sbb
and
add
scas
mov
mov
es
add
jo
jp
movs
addr16
xchg
cmp
fcomp
js
mov
outs
nop
sbb
sahf
stos
or
pop
xchg
adc
adc
(bad)
es
jmp
add
cmp
mov
and
xchg
pop
inc
das
ret
mov
and
inc
imul
jns
sub
dec
jmp
jle
mov
mov
push
xchg
dec
inc
push
mov
rol
leave
fdivr
addr16
pop
movups
jp
xor
or
nop
sbb
mov
dec
jns
les
(bad)
sbb
pusha
loop
pop
rcl
outs
add
cmps
xchg
jne
imul
pop
add
and
test
push
mov
push
add
or
dec
test
rcr
rcr
jp
or
inc
sub
adc
dec
pop
(bad)
jle
retf
xchg
cdq
sahf
jmp
add
(bad)
add
sub
ficomp
push
push
cmp
lods
adc
out
lock
push
rol
mov
cmp
add
add
call
retf
pusha
movs
arpl
ds
xor
shr
ds
and
mov
(bad)
out
or
movs
mov
sub
mov
jl
xchg
xchg
add
inc
xchg
add
cmp
add
or
dec
xlat
push
mov
dec
sub
xor
cli
cmp
adc
sub
adc
and
xchg
mov
sbb
dec
sahf
and
cli
push
push
mov
adc
in
loopne
pop
(bad)
xchg
pusha
adc
arpl
inc
sbb
out
loope
mov
cmp
xchg
data16
mov
push
or
(bad)
mov
sbb
mov
repnz
add
adc
inc
cmp
sub
cmp
sbb
das
jb
ret
pusha
pusha
sbb
push
push
pop
dec
add
loop
bound
xchg
loop
push
jp
fiadd
adc
mov
nop
(bad)
rcl
and
cmp
mov
ror
push
cmp
push
into
add
call
cmp
inc
mov
out
test
jbe
call
push
mov
mov
stos
retf
(bad)
outs
adc
push
add
ror
test
ret
ud2
loop
jo
cs
push
rol
outs
bound
outs
push
arpl
jp
push
adc
cmp
js
aam
mov
push
cmp
call
cs
add
xchg
loopne
or
add
fidivr
sbb
call
daa
stos
cmps
push
push
test
sub
pusha
cwde
scas
mov
pushf
mov
push
jo
pop
and
cmp
loope
xchg
and
xchg
mov
pop
sub
dec
adc
sbb
or
xchg
iret
push
cmp
xchg
dec
jbe
(bad)
mov
retf
sbb
or
inc
arpl
xchg
cmps
(bad)
mov
rcl
out
enter
jbe
dec
cs
into
fidiv
in
dec
sahf
mov
adc
cmp
retf
out
das
adc
xchg
out
xor
sub
outs
and
mov
add
nop
add
aaa
out
retf
adc
sahf
dec
jbe
mov
mov
push
in
dec
loop
sti
sbb
push
ins
dec
shl
jb
cwde
push
xchg
pop
(bad)
xchg
(bad)
scas
in
sub
mov
adc
jmp
mov
(bad)
aam
push
out
mov
mov
pushw
push
data16
and
nop
and
mov
jmp
data16
loopne
or
je
dec
or
(bad)
pop
retf
ds
call
adc
mov
push
or
ret
fcmovnb
jo
cmc
sub
sbb
push
or
mov
lods
int3
sbb
mov
icebp
jp
mov
fs
pusha
add
cmp
and
xchg
stos
dec
add
aad
mov
push
jle
mov
mov
xchg
sub
leave
and
jo
xchg
sbb
mov
ror
ret
xor
add
test
lods
aad
pop
push
mov
inc
rcr
int3
es
and
daa
sbb
sbb
jo
data16
add
into
or
or
js
pop
jne
ret
out
jo
ror
sub
ds
jle
sub
and
call
pop
rcl
pushf
xor
shl
data16
mov
outs
and
pop
add
fisubr
scas
push
jl
inc
dec
es
mov
or
ins
jle
mov
fidiv
jecxz
adc
inc
rol
dec
mov
push
cwde
sar
pop
sbb
ret
dec
cdq
adc
dec
sub
sub
mov
add
inc
add
adc
not
(bad)
sbb
sahf
ds
xor
add
mov
rcr
dec
inc
jb
leave
add
sahf
cmp
dec
stos
push
sahf
(bad)
jmp
push
push
dec
mov
ror
push
xchg
sub
pop
adc
jmp
or
cmp
inc
test
addr16
xor
push
adc
movs
xchg
or
fimul
sahf
and
js
cmp
(bad)
cmps
pop
xor
inc
xor
xor
and
(bad)
sub
push
mov
lock
lea
lods
sub
pop
dec
sbb
xchg
in
mov
js
push
push
add
mov
repnz
fidiv
cmps
sbb
popa
mov
push
cmp
jo
loopne
sub
xchg
cwde
call
cmc
mov
pop
scas
call
cli
mov
mov
cmp
cs
push
out
push
pop
stos
mov
mov
xor
push
dec
scas
xchg
neg
jp
pop
adc
xor
out
fisub
inc
xchg
inc
mov
mov
outs
push
xor
mov
dec
ret
xchg
jp
dec
adc
scas
mov
ss
inc
pop
pop
adc
jle
add
(bad)
dec
cli
push
xchg
inc
dec
jg
add
mov
sahf
mov
mov
adc
adc
(bad)
mov
mov
cli
add
jmp
mov
fcmove
push
clc
add
mov
pusha
dec
mov
mov
pop
popa
dec
pop
pop
push
das
jmp
sbb
or
outs
and
dec
adc
add
(bad)
push
mov
and
ficom
ret
add
dec
cmp
dec
push
push
into
pusha
and
rcl
or
(bad)
mov
xchg
aaa
dec
jp
rcr
jle
xchg
push
int3
cs
adc
inc
pop
into
into
mov
push
ret
add
or
pop
mov
test
lock
jecxz
and
daa
push
push
scas
mov
push
add
and
(bad)
pop
dec
pop
cmps
stos
lods
movs
pusha
movs
retf
loope
cmp
push
ror
and
rcr
loop
xchg
js
jbe
(bad)
push
js
or
cli
sbb
inc
loop
inc
adc
mov
mov
cmp
retf
inc
cmp
ffreep
or
retf
dec
dec
jne
xor
cmp
jp
loope
push
(bad)
jle
and
xchg
aaa
je
(bad)
outs
imul
(bad)
xchg
je
or
pop
dec
pop
xchg
mov
and
push
sbb
jg
push
scas
add
gs
iret
pop
loope
lods
xchg
sbb
sub
dec
js
or
loop
outs
push
js
jb
lods
add
out
mov
xor
add
add
repz
add
pop
sbb
xchg
sbb
das
es
movs
mov
sub
mov
or
cli
cli
adc
jo
shr
xor
cmp
test
mov
and
push
push
stos
test
retf
inc
dec
push
mov
and
stos
rol
adc
adc
ss
xor
cli
mov
test
dec
inc
mov
sub
rol
mov
je
jb
nop
xor
push
retf
mov
xchg
add
(bad)
shl
jmp
mov
iret
or
shl
dec
pop
(bad)
push
rol
(bad)
sbb
sahf
(bad)
mov
and
dec
aas
xchg
call
push
push
xor
cmp
jnp
shl
sub
lods
bound
jns
rol
sar
daa
and
rcl
ds
rcl
and
jb
retf
inc
es
(bad)
adc
pop
or
add
into
or
sbb
xchg
test
loop
and
es
retf
daa
stos
loopne
mov
jp
imul
cmp
add
adc
add
jecxz
cmp
sub
(bad)
cli
cmp
xchg
loop
push
mov
mov
cmp
dec
ror
xchg
push
outs
(bad)
xor
and
mov
pop
aaa
rol
aaa
sub
pop
sahf
adc
mov
jnp
mov
imul
pop
sub
paddd
scas
jne
hlt
cmps
retf
adc
cs
dec
loop
pop
test
ds
and
push
cmp
sbb
sub
jp
popa
and
add
(bad)
push
imul
scas
jp
jnp
into
jp
jmp
into
into
dec
adc
mov
cmp
int3
pop
dec
mov
fiadd
cs
jbe
aam
lods
scas
es
xor
push
sbb
push
cmps
mov
mov
stos
sahf
les
pop
dec
sbb
jp
sbb
add
adc
xchg
push
outs
pop
loop
or
adc
pop
pop
pop
push
dec
bound
dec
ret
add
loop
mov
pop
daa
push
dec
lods
sub
mov
dec
push
retf
mov
xchg
mov
mov
es
cmovo
pop
loope
loop
lea
add
pop
mov
mov
jo
(bad)
ds
inc
or
imul
mov
test
(bad)
pop
(bad)
aam
sub
(bad)
pop
dec
cwde
and
and
push
call
xor
call
push
scas
fisub
or
jb
lods
jae
popa
inc
xor
fcmovb
sbb
xor
inc
movs
or
cmp
add
sbb
pop
cmp
mov
in
sbb
dec
and
sub
imul
outs
xor
or
mov
xor
xchg
and
dec
sahf
shl
mov
aaa
test
jmp
shl
outs
inc
nop
cmp
ret
or
sub
mov
pushf
jp
(bad)
xor
mov
mov
jo
test
popa
test
xchg
cmps
clc
into
adc
or
add
xchg
bound
lea
rol
fnstcw
outs
outs
add
jmp
shl
fsubrp
jmp
out
int3
pop
sar
xchg
ficom
push
push
and
xchg
mov
sub
dec
dec
xchg
lock
xor
scas
ret
xchg
pop
sbb
out
adc
pop
push
retf
retf
sub
xor
ret
jno
add
imul
or
popa
cmovno
inc
retf
add
popa
mov
jp
or
jnp
cmp
call
push
xchg
faddp
and
inc
outs
repz
push
mov
push
push
dec
cmp
sub
dec
mov
neg
or
enter
pop
fbld
add
sbb
outs
popa
ins
pusha
inc
cli
call
ds
add
and
xor
mov
out
push
nop
sbb
dec
mov
push
pop
xor
add
fldenv
mov
ss
or
imul
and
ret
lods
sub
xchg
test
adc
out
pop
(bad)
ins
add
xchg
aam
xchg
add
bound
daa
sbb
jp
or
pop
push
es
xor
dec
cs
cmps
faddp
fwait
push
loop
push
xchg
out
and
jb
cmp
inc
sbb
jp
fld
inc
into
jp
xchg
cmp
ds
cli
add
sahf
popa
cs
mov
push
jb
fs
call
mov
and
mov
push
push
into
fs
or
dec
xor
rcr
sbb
ja
or
outs
jp
adc
push
daa
cmp
and
sbb
aas
mul
mov
fwait
xor
inc
cmp
addr16
data16
loopne
or
fild
inc
mov
mov
and
jl
in
sub
div
add
mov
test
scas
add
cwde
out
and
jg
mov
add
out
jo
xor
dec
sub
jbe
ret
push
dec
lahf
(bad)
rcr
test
lea
mov
add
lea
pop
mov
mov
les
dec
call
sub
jmp
mov
pop
pop
or
clc
movs
or
ds
cdq
je
dec
cmps
push
push
mov
lahf
sbb
cmp
sub
and
ins
adc
call
ja
imul
pop
out
mov
push
adc
arpl
push
cmp
fidivr
call
es
cwde
rcr
in
push
ss
js
leave
(bad)
xchg
pop
pop
or
ret
pop
cmps
push
push
mov
sahf
ds
dec
mov
lea
sahf
(bad)
nop
pop
dec
daa
bound
dec
push
inc
jmp
add
sbb
je
inc
test
xchg
call
sar
cmp
das
push
add
out
cmps
aaa
ret
dec
push
add
test
dec
mov
scas
pop
call
add
ja
jo
pushf
sub
sbb
bound
je
(bad)
mov
add
push
push
push
aaa
push
fiadd
gs
mov
popa
sahf
jbe
mov
call
fiadd
push
pop
cs
aaa
add
fwait
(bad)
into
out
psubsb
into
mov
enter
out
popa
add
inc
pop
and
sub
repnz
rol
sub
or
call
dec
or
pop
lods
mov
into
push
adc
movs
pop
scas
push
pop
and
into
push
jbe
jbe
xor
dec
and
push
scas
mov
xor
out
push
push
xchg
and
out
and
push
pop
inc
inc
scas
(bad)
out
out
mov
jle
inc
lods
jno
add
xchg
push
and
test
popf
pusha
cmp
bound
mov
test
movs
xchg
jmp
mov
or
shr
add
mov
loopne
out
rcl
push
xchg
loopne
jmp
(bad)
icebp
inc
or
cli
inc
dec
cwde
mov
sti
cmp
jne
push
ret
sbb
rcr
les
and
xchg
ror
sbb
rcr
push
rcl
or
repnz
mov
sub
ret
push
jb
and
loop
fcomp
scas
fimul
push
scas
movs
and
pop
imul
daa
pop
pop
adc
sbb
mov
mov
adc
adc
icebp
or
retf
mov
cmp
loopne
outs
out
xchg
int3
leave
xchg
xchg
outs
dec
pusha
add
sub
mov
fdivr
inc
cli
fimul
out
pop
mov
xchg
mov
sti
mov
ror
pop
push
loopne
pushf
ficom
popf
add
popa
pusha
(bad)
sbb
dec
xor
mov
lods
add
(bad)
xor
sub
add
or
cmp
xchg
mov
dec
test
xchg
mov
push
data16
mov
daa
lock
add
fld
ret
mov
imul
out
push
test
pop
icebp
or
ss
push
pusha
mov
pop
dec
ficomp
mov
loopne
ds
popa
nop
inc
and
sub
ss
add
adc
jmp
out
add
scas
cmp
dec
arpl
test
cmps
imul
push
lods
mov
cmps
into
mov
mov
jo
mov
popa
jmp
shr
outs
jecxz
push
(bad)
(bad)
dec
(bad)
cmp
mov
xchg
scas
dec
or
add
pop
fld
xlat
inc
ds
sub
pop
data16
push
add
inc
sbb
jns
push
loop
jne
(bad)
and
test
loop
pop
dec
xchg
mov
xchg
test
sbb
pop
ret
idiv
nop
movs
jne
xlat
repnz
jbe
inc
dec
jp
adc
mov
sahf
das
adc
adc
rcr
inc
mov
or
sbb
pop
jmp
repnz
sub
inc
push
mov
iret
and
push
add
repz
cmps
ds
(bad)
xlat
xor
pop
dec
mov
add
(bad)
sbb
(bad)
xchg
addr16
jle
mov
aad
scas
call
shl
mov
inc
sub
fiadd
mov
dec
sub
ret
jo
xor
es
cmp
repnz
retf
and
call
adc
xor
adc
add
js
add
push
add
jmp
loopne
lea
and
sbb
out
inc
jb
cmp
inc
and
call
inc
scas
cmp
push
sub
into
fidiv
inc
inc
pop
push
imul
jno
pop
outs
sbb
xchg
jp
jbe
ds
mov
ja
inc
test
cmp
jbe
or
rol
outs
fs
sbb
push
pop
or
push
mov
(bad)
or
inc
stos
(bad)
mov
pop
rcr
inc
xchg
or
add
add
cmp
jb
or
adc
enter
adc
inc
imul
rcr
push
sbb
nop
pop
pop
outs
mov
add
add
lods
dec
adc
or
aaa
hlt
mov
dec
cmps
sbb
cmp
cdq
sbb
or
clc
sar
push
inc
mov
(bad)
adc
(bad)
fidivr
out
sub
jns
xor
(bad)
jle
mov
into
cmp
hlt
adc
and
pop
cmp
aad
out
dec
out
cmp
inc
adc
xchg
inc
out
rcl
dec
sub
sahf
pop
or
sub
jno
rcr
outs
or
jmp
jmp
inc
add
xchg
add
ret
outs
ins
mov
sbb
add
cmps
mov
xlat
sahf
daa
xor
mov
nop
rcl
sbb
pop
add
cmps
xchg
ins
add
pop
loop
cmp
or
push
mov
ficomp
(bad)
ror
mov
mov
jecxz
or
adc
dec
out
(bad)
jbe
mov
iret
or
add
retf
gs
ja
adc
xchg
gs
dec
das
adc
and
mov
into
mov
fiadd
jl
xor
push
sahf
mov
mov
cli
popa
inc
loop
jle
xchg
cwde
adc
mov
mov
loop
(bad)
cmps
cmps
retf
mov
lods
retf
aaa
faddp
cs
out
push
pushf
ret
mov
(bad)
dec
lods
aaa
inc
stos
fimul
jae
test
xchg
ret
cmps
lock
inc
and
and
popa
dec
outs
inc
xor
aas
pop
push
and
ret
in
inc
dec
sahf
xor
or
pop
add
add
mov
add
add
adc
stos
retf
jp
sbb
(bad)
fidiv
and
inc
jecxz
mov
xchg
icebp
and
and
pop
test
xchg
add
and
outs
ret
jns
out
(bad)
ja
xchg
adc
ins
iret
push
imul
and
test
sbb
(bad)
sub
inc
cmp
sahf
push
inc
jno
pop
xchg
dec
adc
push
inc
scas
inc
movs
xchg
push
btr
mov
dec
pop
xor
out
mov
sub
jp
loop
js
push
mov
jbe
push
add
or
movs
ror
and
mov
mov
jns
push
es
fwait
rol
ret
out
jecxz
jmp
ficomp
adc
mov
or
jp
pop
inc
xchg
mov
test
xor
loope
jp
scas
add
lods
neg
fsub
and
xchg
adc
xchg
in
rcl
pop
(bad)
cmovb
add
lea
dec
adc
ret
mov
bound
(bad)
jmp
xchg
dec
es
pop
mov
data16
sub
pusha
inc
call
(bad)
mov
pop
sbb
adc
mov
sbb
and
js
or
dec
jne
inc
mov
mov
sub
xchg
je
fs
sahf
es
sub
cmp
loop
test
mov
or
ins
sbb
inc
push
outs
pop
daa
imul
pop
dec
sub
ins
or
xacquire
es
fisubr
addr16
dec
outs
jp
jmp
inc
push
dec
es
inc
lods
xor
outs
sbb
jb
push
mov
pop
adc
fimul
add
sub
sbb
out
inc
rcl
ror
fiadd
pop
sbb
jb
jbe
inc
loopne
push
dec
or
jle
aam
mov
xchg
jo
mov
dec
adc
dec
pusha
das
outs
push
dec
cli
mov
mov
scas
or
enter
sbb
daa
push
fidivr
cmp
xor
mov
adc
push
(bad)
xor
mov
repnz
cwde
mov
shl
aas
push
cs
mov
test
add
mov
loop
rcl
mov
mov
pop
inc
jecxz
pop
inc
push
adc
push
push
sub
lock
adc
mov
pushf
xor
pop
retf
sbb
pop
add
sbb
adc
pop
lea
cmp
push
push
or
stos
loopne
adc
push
sbb
add
sbb
scas
mov
nop
jo
jo
push
dec
push
mov
add
mov
loope
mov
xor
vmread
xor
cwde
and
movs
jo
loop
ins
pusha
je
loop
dec
mov
sub
pushf
dec
xor
jb
sbb
add
pusha
imul
sbb
mov
inc
push
and
or
or
jno
add
dec
pop
outs
mov
sbb
into
push
inc
add
mov
or
call
push
nop
je
and
push
mov
jno
es
fs
adc
push
adc
and
jb
push
imul
xor
lea
call
fdiv
adc
push
sbb
sbb
pop
and
adc
data16
es
ds
xchg
(bad)
sbb
loopne
pop
xor
push
sbb
sbb
(bad)
es
sbb
jbe
or
inc
(bad)
pop
and
ret
xor
mov
dec
add
sbb
push
ret
lock
push
cmps
jp
xchg
sbb
or
mov
pop
lods
dec
pop
stos
cmp
loope
or
mov
repnz
iret
ret
popa
popf
fcmovnbe
cli
dec
add
out
ss
adc
pop
(bad)
jmp
sub
inc
(bad)
dec
dec
sub
mov
add
imul
outs
mov
(bad)
mov
call
xchg
jb
add
push
out
xchg
dec
fdivr
inc
and
scas
(bad)
ins
add
push
add
dec
ret
inc
outs
and
mov
xchg
loop
(bad)
sbb
retf
jp
pop
add
adc
cmps
adc
fadd
ret
push
dec
les
xor
les
sub
cmps
ret
xchg
add
add
imul
add
jbe
sbb
mov
imul
push
dec
les
scas
push
add
sbb
mov
rcr
adc
and
ficom
sbb
pop
add
add
push
dec
sbb
push
inc
mov
push
or
or
retf
hlt
and
(bad)
retf
test
cli
out
sbb
or
push
add
js
jp
jbe
jmp
jo
retf
push
xor
mov
and
aas
or
test
lea
sahf
mov
repnz
dec
push
dec
xor
push
out
xchg
or
inc
xor
cwde
arpl
push
jbe
adc
sub
loopne
punpckhdq
push
inc
(bad)
repz
loop
rol
jp
mov
pop
adc
mov
ret
mov
mov
dec
mov
xchg
push
test
rol
push
xchg
add
pushf
loopne
outs
cs
sub
add
dec
xchg
cmp
je
cmps
push
add
fwait
pop
push
pop
(bad)
rcr
add
adc
and
es
mov
cs
xor
dec
or
loop
sub
push
add
jnp
jmp
dec
dec
test
add
mov
loopne
ins
sbb
call
cs
add
xchg
xchg
inc
or
stos
sbb
(bad)
xchg
imul
jo
add
scas
(bad)
xor
xchg
push
mov
cmp
dec
add
mov
punpcklbw
jnp
mov
out
fcomp
rol
inc
mov
add
and
mov
out
sbb
push
jp
cs
sub
adc
and
dec
xchg
xchg
push
xchg
pusha
data16
jo
inc
sbb
data16
push
ds
adc
and
loop
inc
(bad)
xchg
mov
push
mov
pop
cmp
cmp
inc
jmp
out
ret
mov
push
add
das
cmps
push
dec
push
sub
iret
jg
add
mov
out
or
and
add
add
push
mov
cmp
sbb
xchg
aad
pop
xchg
mov
add
inc
and
adc
jp
imul
pop
into
pop
sub
add
adc
push
mov
add
ret
cmps
add
jno
xchg
cmp
mov
daa
enter
gs
es
mov
xchg
mov
cmps
dec
adc
stos
and
push
js
stos
add
jo
mov
add
rcr
or
fcmovne
js
and
ins
dec
or
xchg
add
fisub
enter
imul
ins
sbb
dec
ja
pop
push
nop
or
or
outs
jp
jo
sub
push
iret
rcl
repnz
pop
or
inc
arpl
and
outs
jmp
cdq
add
popf
xor
inc
jl
nop
scas
dec
push
jb
daa
adc
xchg
loope
aaa
and
movs
hlt
aam
sbb
sub
loope
push
outs
dec
sub
push
pop
stos
mov
mov
xchg
test
ret
les
outs
add
xor
mov
xlat
pop
xor
and
lods
and
mov
mov
add
or
stos
push
call
sub
push
push
sub
sub
ret
mov
or
imul
add
imul
retf
and
test
or
pushf
sub
cmps
or
mov
addr16
scas
fwait
ret
pushf
and
add
add
outs
ret
add
sub
sahf
xor
shl
mov
(bad)
ds
popa
inc
pusha
push
fild
mov
inc
jb
nop
ret
or
push
dec
or
ret
sbb
aam
cmp
out
inc
dec
and
pusha
dec
cmp
xchg
fs
add
jmp
mov
fiadd
es
pop
rol
dec
mov
sbb
xor
push
pop
mov
or
shl
add
sub
ret
jecxz
sbb
bound
popf
pusha
add
test
jb
xor
sub
sub
inc
pop
cdq
xor
push
dec
into
hlt
jne
jmp
cmp
jne
xor
(bad)
push
les
jle
or
inc
loop
add
pop
cmp
mov
cmc
dec
ss
push
add
jle
xor
sbb
pop
loop
jno
cdq
cmp
test
cmp
sbb
sbb
test
outs
repz
or
xchg
push
cmps
fiadd
mov
es
xor
cmps
cli
sbb
xor
or
(bad)
push
dec
cmp
repnz
sbb
and
mov
pop
jp
les
and
rcl
(bad)
cwde
sub
mov
or
xor
pop
outs
inc
dec
push
mov
pop
push
or
jb
xchg
or
fisub
aas
xor
pusha
aam
out
cs
push
xor
and
xchg
mov
dec
push
(bad)
jb
(bad)
xor
push
call
aas
push
retf
out
retf
or
and
mov
test
sub
outs
lods
and
push
cmp
mov
das
inc
ret
in
sahf
and
retf
rol
retf
jno
dec
das
call
and
adc
(bad)
clc
add
pop
push
xor
outs
push
adc
xchg
cli
popa
(bad)
adc
push
xor
jb
xor
rol
mov
pop
jmp
inc
mov
test
test
jbe
test
mov
scas
in
div
cmp
add
adc
arpl
hlt
xor
dec
sub
mov
loopne
mov
adc
xchg
adc
aas
cmps
add
(bad)
outs
loopne
sbb
inc
pop
data16
xchg
push
pop
jp
nop
or
xlat
(bad)
fsubrp
cwde
sbb
inc
add
test
in
pop
xchg
mov
mov
es
fs
leave
add
mov
enter
dec
loop
dec
sbb
or
out
adc
mov
mov
rcl
mov
outs
pop
pop
xor
inc
mov
(bad)
sbb
push
idiv
push
repnz
fisub
nop
mov
or
add
mov
or
add
call
add
call
xor
clc
push
daa
into
sub
jp
aam
xchg
mov
call
fwait
push
jb
add
cmps
mov
scas
inc
jbe
mov
into
xor
sbb
ss
bound
cmps
sbb
neg
add
adc
cli
mov
outs
rol
mov
push
sti
ss
je
pop
push
retf
pop
mov
jg
push
(bad)
call
jmp
jae
(bad)
leave
xchg
nop
rcl
jle
and
es
mov
pop
or
push
sub
movs
shl
add
ins
sub
pop
fidiv
les
movs
xchg
xor
(bad)
or
nop
or
mov
inc
xchg
movs
rcl
cdq
adc
mov
sbb
or
pop
scas
fimul
xchg
adc
data16
or
push
ret
dec
pop
or
gs
xchg
mov
(bad)
jp
adc
mov
pop
cmp
push
fisub
scas
ret
movs
shl
sbb
adc
jmp
cli
sbb
sbb
cmp
push
loope
or
fcmovb
jle
or
dec
test
test
cmp
mov
ret
loop
jp
js
cmp
jbe
cdq
adc
jle
or
sbb
sbb
rcl
inc
push
mov
or
jecxz
ror
data16
dec
sbb
and
arpl
out
add
push
adc
or
and
sahf
xor
and
xchg
sbb
sub
movs
retf
push
test
and
and
sbb
in
ror
mov
ds
mov
mov
rcl
push
out
ds
lods
pop
shl
out
rcl
add
daa
jns
cmp
cmp
sahf
and
retf
es
das
inc
add
xor
xchg
test
xlat
not
ds
cmps
enter
jle
and
js
das
in
and
scas
cli
inc
aam
or
outs
and
xchg
xchg
xchg
outs
inc
daa
call
sbb
lss
call
or
(bad)
push
ror
push
ds
jp
lock
scas
sahf
pop
sbb
or
xor
dec
and
jle
or
add
push
xchg
call
mov
addr16
stos
and
mov
mov
repnz
out
push
jge
pop
jb
xchg
mov
imul
data16
mov
mov
data16
inc
out
xlat
fidivr
push
(bad)
push
and
ret
add
fimul
xor
dec
add
rcr
fisub
sub
inc
ret
push
mov
je
es
jbe
sar
push
not
sub
jmp
enter
arpl
mov
retf
les
xor
mov
ret
dec
out
xchg
mov
ins
or
pop
xchg
shl
sbb
sbb
dec
sahf
mov
push
(bad)
scas
loopne
popa
push
hlt
dec
outs
cli
sbb
pop
push
dec
add
ret
rol
lea
out
cmps
adc
sahf
mov
pop
(bad)
fsubrp
movs
adc
mov
or
pop
inc
iret
push
or
pusha
dec
cwde
shl
xor
rcr
jle
sbb
sbb
out
mov
mov
outs
cmps
push
xchg
adc
cmp
pop
sbb
ret
and
jbe
inc
inc
lods
fidiv
dec
pop
add
jecxz
(bad)
xchg
cmps
or
out
xchg
dec
dec
mov
xlat
inc
(bad)
cli
push
xchg
cmp
(bad)
xor
mov
sub
sar
jle
mov
ss
pop
jecxz
ins
dec
mov
pusha
ror
mov
mov
dec
arpl
loope
pop
jle
xor
dec
pop
out
jmp
adc
js
dec
retf
test
and
fadd
ficomp
jecxz
push
dec
cli
mov
jle
scas
or
and
dec
pop
scas
jnp
dec
mov
mov
fcmovb
cmp
loop
pushf
add
add
jae
and
jmp
je
xchg
cvtps2pd
xchg
(bad)
xchg
push
pop
dec
push
xchg
lods
and
mov
das
rcr
cli
into
es
popa
push
xor
mov
push
aas
ins
dec
nop
mov
fiadd
push
pop
mov
clc
add
fist
add
cmp
mov
(bad)
or
loope
mov
and
sbb
cmp
retf
inc
(bad)
dec
fsubr
inc
mov
sub
mov
cmc
lock
push
and
push
ds
arpl
scas
push
add
add
mov
cmp
pop
mov
adc
jns
mov
xor
inc
pushfw
dec
add
into
mov
sub
aas
or
bound
push
pop
ss
or
add
pop
add
sbb
push
lock
pop
mov
adc
xor
cmps
or
sbb
xchg
test
pop
mov
add
pop
arpl
mov
scas
xchg
into
clc
xchg
mov
push
inc
(bad)
pop
xchg
push
and
ret
in
out
ja
rcr
ror
jecxz
jp
mov
(bad)
sub
dec
push
add
jo
pop
dec
inc
and
(bad)
loopne
add
(bad)
jmp
adc
shl
xlat
lahf
adc
or
add
jmp
push
(bad)
xor
out
add
xor
dec
xor
xlat
sub
and
jp
pop
inc
inc
sbb
fstp
jbe
ret
dec
sbb
xor
pushf
and
or
sbb
sahf
xor
add
test
jo
sub
popa
retf
jbe
push
sbb
lahf
(bad)
ficomp
fisubr
mov
ret
mov
mov
(bad)
out
imul
sahf
push
shl
pop
adc
jp
inc
fadd
add
pushf
rol
es
test
test
call
inc
cmp
inc
sub
xchg
dec
inc
bound
js
ins
pushf
jmp
sbb
push
xor
(bad)
cmp
loopne
jmp
sub
test
mov
ret
cwde
outs
iret
cmp
loope
sbb
mov
js
jp
stos
xor
and
mov
cmp
mov
or
xchg
cmps
push
mov
hlt
sbb
loop
(bad)
(bad)
push
call
dec
cmp
loopne
out
pop
dec
clts
(bad)
pop
dec
retf
jo
aam
mov
xchg
adc
fisubr
dec
xchg
cmp
xchg
pop
sbb
dec
jmp
xor
and
push
xchg
sub
xchg
and
into
out
add
add
and
adc
addr16
xor
ins
pusha
out
xor
xor
repnz
push
test
jo
fiadd
sub
and
mov
(bad)
mov
jecxz
into
sbb
pusha
add
cs
loop
mov
push
dec
ret
mov
lods
xchg
into
dec
popf
into
xor
shl
cmps
jne
loope
mov
pop
adc
sub
xchg
pop
pop
jbe
stos
call
jle
pusha
jo
pusha
add
pop
imul
es
jmp
push
dec
rol
and
mov
and
push
mov
xchg
(bad)
(bad)
add
mov
mov
dec
add
push
sbb
pop
imul
mov
sbb
ss
ins
sub
sub
out
(bad)
mov
sbb
mov
loop
mov
mov
pop
shl
or
cmp
dec
bound
retf
imul
nop
add
ds
scas
(bad)
popa
retf
add
add
dec
data16
es
sbb
cmc
inc
aaa
or
or
ret
retf
or
les
sub
dec
push
ss
cmps
mov
sub
push
push
mov
ds
cdq
xor
adc
sub
je
add
sbb
outs
cmp
mov
hlt
test
sbb
cmps
cs
sbb
mov
ret
movs
push
loop
(bad)
push
push
dec
mov
or
push
pop
or
or
out
xchg
or
mov
push
cmp
fiadd
cmp
jle
push
ror
jmp
cs
inc
retf
sahf
add
adc
cli
mov
xor
(bad)
sahf
xor
xchg
push
xchg
inc
bound
ret
jbe
mov
cmc
retf
retf
sahf
mov
mov
add
retf
mov
sub
(bad)
mov
sbb
push
popa
jmp
sbb
or
pop
pusha
rcl
inc
xor
retf
push
fistp
or
add
inc
add
add
and
mov
ss
pushf
lods
xcrypt-cbc
cmps
shl
jno
add
or
jo
cmp
xchg
pusha
movs
xchg
repnz
ds
popf
and
(bad)
pop
adc
inc
ja
cmp
mov
sahf
ss
daa
inc
mov
inc
fs
add
pop
sbb
imul
cli
inc
(bad)
xchg
sub
push
ficom
pop
xchg
shl
das
rol
add
ins
loop
loop
xor
and
nop
jb
xor
xchg
test
and
sbb
pop
push
or
push
out
add
push
sbb
jo
xchg
or
ret
dec
or
nop
xchg
push
mov
sub
pop
pop
out
mov
pop
cmp
rcr
sbb
xchg
add
shl
pop
aaa
sub
aam
xchg
(bad)
(bad)
jne
push
ins
adc
es
out
ret
les
outs
seto
mov
dec
dec
loopne
inc
dec
(bad)
xchg
pop
outs
ret
and
add
jp
xchg
movs
or
stos
jp
leave
mov
rol
push
retf
add
or
hlt
fs
repnz
sbb
or
or
daa
nop
mov
or
loope
call
xor
(bad)
xor
mov
(bad)
and
nop
xor
es
(bad)
and
out
dec
adc
and
xor
retf
and
lea
pop
mov
mov
inc
pop
pop
ffree
dec
ds
outs
loopne
pop
arpl
mov
outs
and
mov
lea
loop
mov
out
and
(bad)
nop
jb
imul
add
mov
inc
push
jp
sbb
mov
adc
mov
xchg
sbb
inc
adc
loop
adc
(bad)
enter
sub
push
mov
add
mov
add
mov
pusha
mov
sbb
pop
daa
or
push
lods
add
mov
sahf
push
mov
and
cmp
mov
popa
daa
adc
call
outs
or
sub
mov
mov
pop
pop
adc
mov
movs
imul
inc
pop
push
pop
jle
mov
mov
pusha
ret
js
dec
call
push
movs
pusha
inc
push
out
or
cdq
outs
or
mov
sti
sub
fcmovnbe
dec
(bad)
cmps
pop
rol
cmp
inc
cs
cs
mov
jmp
popa
stos
xchg
xor
jp
ror
mov
sub
adc
movs
into
out
cli
cmp
out
cmp
add
dec
dec
test
push
es
ss
daa
(bad)
dec
dec
xor
jne
loope
into
push
sahf
mov
bound
jno
mov
lods
into
jbe
mov
(bad)
jmp
push
push
cmp
pop
jbe
pusha
adc
or
or
push
xor
xchg
dec
add
ret
and
pop
add
sbb
mov
fidivr
repnz
xor
or
adc
mov
push
cmp
jne
and
mov
cmps
mov
cli
pop
push
les
out
js
sub
ss
xchg
dec
pop
scas
push
pop
call
xchg
pop
cs
add
push
sbb
bound
je
retf
mov
ret
mov
mov
stos
mov
pop
jg
cmp
push
mov
sbb
repnz
ret
mov
aaa
es
scas
and
mov
lea
push
pushf
push
outs
cli
push
push
add
xchg
lods
(bad)
mov
xchg
retf
push
mov
pop
pop
imul
xchg
add
lods
sub
xchg
pop
nop
add
push
and
adc
pop
repnz
mov
(bad)
push
add
mov
retf
sbb
loop
inc
inc
pop
or
push
xor
xchg
or
movs
jg
add
add
(bad)
mov
push
adc
(bad)
dec
cmp
add
mov
push
cmp
adc
sbb
inc
xlat
push
rcr
adc
icebp
xchg
popf
lods
adc
jb
add
xchg
call
or
arpl
inc
xor
rcl
outs
add
push
loope
sbb
pop
add
adc
xchg
and
fs
mov
rcl
lods
fiadd
pusha
mov
xchg
div
movs
or
adc
mov
dec
rcl
xchg
xor
sub
adc
sbb
and
cmps
sbb
xor
out
dec
adc
cmps
daa
sub
pop
and
mov
add
jmp
inc
popa
pop
xor
enter
cmps
(bad)
mov
sub
outs
adc
add
push
dec
ret
rol
xchg
pop
push
(bad)
jecxz
bound
add
mov
sbb
inc
shr
push
cli
ficom
scas
or
mov
mov
cmc
adc
inc
(bad)
or
inc
imul
add
add
in
dec
cmp
loopne
loopne
push
cmps
inc
arpl
dec
push
loop
(bad)
mov
mov
jecxz
shr
outs
(bad)
xchg
call
mov
add
(bad)
mov
shr
loopne
pusha
jmp
dec
pushf
push
and
jp
out
push
arpl
bound
mov
jno
ror
popa
and
aaa
push
jb
push
fiadd
fbld
adc
push
mov
mov
idiv
push
push
cmp
dec
pusha
fs
out
lods
push
out
mov
ror
pop
jbe
(bad)
xchg
inc
and
imul
popf
pop
arpl
pop
test
xor
sbb
sub
xchg
cmps
xchg
ficom
cs
xlat
push
or
outs
dec
cmp
mov
xor
dec
out
sub
ds
xchg
push
popa
sahf
js
cmp
sbb
pop
jo
pop
inc
mov
dec
push
sbb
push
ror
fs
pop
pop
push
sbb
mov
loop
dec
mov
and
xchg
xchg
pop
dec
sub
xchg
xor
(bad)
mov
add
loopne
inc
jno
mov
test
add
inc
arpl
retf
faddp
or
cs
inc
mov
ret
repnz
push
retf
push
mov
mov
sbb
ror
pop
loope
sub
jb
dec
cli
sub
sbb
add
xchg
cdq
pop
fadd
fisubr
mov
outs
dec
(bad)
leave
js
adc
ds
dec
cmp
jmp
test
push
cmps
dec
add
call
or
inc
push
fidivr
mov
xchg
push
lods
or
add
add
xchg
outs
sbb
pushf
fidivr
sub
sub
pop
mov
or
sahf
jbe
call
bound
jb
xlat
push
xchg
cmp
pop
inc
out
push
mov
dec
cmp
pop
inc
mov
push
ss
cmp
jb
das
add
enter
and
adc
pop
mov
push
and
in
dec
cmp
(bad)
mov
sub
movs
xchg
mov
ds
mov
xor
sbb
pop
inc
sbb
pushf
mov
mov
jmp
lods
lods
xchg
mov
add
es
and
push
test
mov
mov
xchg
cs
xchg
adc
dec
outs
inc
retf
mov
loop
and
(bad)
push
pop
rcr
(bad)
fidivr
dec
mov
mov
dec
shl
retf
jmp
scas
rcl
pop
lods
inc
ret
xor
inc
loop
sahf
ds
sbb
pop
inc
arpl
pop
ret
mov
xchg
cli
sbb
mov
rcr
and
and
sbb
out
sub
mov
and
sahf
jo
rcl
ror
gs
mov
or
mov
pop
cwde
inc
enter
mov
or
call
xor
push
mov
push
jecxz
repnz
pop
or
push
call
mov
neg
ror
and
jmp
ret
push
push
outs
jmp
mov
push
xchg
bound
test
push
fild
lahf
fisub
push
jbe
ds
xchg
jle
mov
or
adc
pop
lock
shl
pushf
ret
or
aaa
mov
mov
aam
outs
jle
call
dec
sbb
push
add
leave
lea
loope
mov
ror
outs
pop
not
retf
mov
stos
xor
movs
dec
push
sub
or
or
add
mov
adc
pop
dec
jp
or
retf
or
sahf
sub
or
cmps
add
jp
(bad)
movs
jnp
or
mov
push
into
ss
pusha
mov
add
add
pop
fst
add
pop
adc
and
aam
mov
and
popa
loopne
push
rol
cs
pop
pushf
cmp
adc
mov
cli
ret
add
sahf
jmp
mov
push
mov
enter
adc
xor
add
adc
mov
jmp
adc
mov
inc
iret
in
add
mov
fimul
and
push
bound
sub
arpl
(bad)
gs
push
cmps
add
xchg
inc
xor
adc
mov
loop
jmp
push
inc
es
cmps
xchg
mov
jns
arpl
mov
cli
dec
daa
sbb
or
out
add
or
popa
out
(bad)
pop
mov
push
scas
xchg
add
inc
sbb
and
sbb
and
jo
(bad)
(bad)
xor
mov
ss
xchg
sbb
inc
rcl
cmp
jae
cmp
jle
out
ret
xor
cmps
das
push
inc
pop
or
push
xchg
lods
push
mov
inc
retf
dec
rcr
mov
and
shr
imul
outs
ror
xchg
cmps
scas
out
mov
ret
jo
mov
into
sbb
xor
xchg
pop
arpl
xchg
xchg
add
out
(bad)
xacquire
or
or
xchg
addr16
push
dec
push
(bad)
dec
ss
inc
out
mov
jo
xchg
dec
movs
jo
push
mov
gs
push
stos
into
mov
xor
pusha
ds
or
mov
ins
or
data16
and
enter
inc
lods
and
cmps
or
cwde
pop
push
mov
add
rcr
add
mov
repnz
stos
test
inc
lods
inc
jbe
jo
cmp
pop
or
sbb
enter
sbb
cwde
mov
fs
aaa
inc
js
mov
inc
cs
lods
add
outs
bound
xchg
xlat
inc
and
xchg
jp
push
push
add
cmp
cmps
cli
mov
cli
fwait
mov
out
iret
(bad)
(bad)
push
or
sbb
adc
or
adc
push
scas
imul
pop
mov
enter
rcl
hlt
es
xor
rcl
mov
out
lock
pop
sbb
shl
push
fimul
sbb
add
add
adc
scas
or
or
outs
push
sub
test
popf
dec
adc
jb
mov
sbb
or
push
sahf
inc
adc
or
ret
or
mov
ror
add
add
or
repnz
sub
jg
xchg
add
add
pop
fdiv
sub
repnz
add
dec
scas
call
jbe
fidivr
dec
ret
ret
xor
add
sbb
inc
pop
jo
add
mov
mov
jmp
daa
and
(bad)
xchg
xchg
mov
mov
dec
mov
xor
outs
jmp
imul
daa
push
push
dec
rol
xor
lock
cmps
into
sahf
adc
jle
call
mov
test
dec
adc
das
sub
rcl
dec
mov
dec
cs
jb
arpl
pop
out
inc
retf
inc
xchg
mov
cmps
bound
and
mov
jle
call
ja
js
or
xor
cmp
xor
mov
sar
sub
sbb
pop
retf
xor
or
add
loope
cdq
mov
rcr
xchg
fisttp
repnz
inc
ja
cmps
or
push
outs
and
test
dec
adc
dec
rcr
add
mov
inc
pusha
loop
sahf
add
sbb
add
mov
hlt
cmps
inc
pop
out
sbb
dec
ret
(bad)
es
retf
gs
jb
xchg
jb
pop
xchg
cmp
jmp
ror
mov
ja
push
inc
out
sbb
mov
mov
pop
dec
dec
push
xchg
or
cmp
xor
mov
ret
ds
cmps
xor
out
xor
sbb
imul
mov
es
out
into
xchg
mov
xor
sub
sub
xor
pop
(bad)
mov
add
mov
neg
js
into
loop
inc
retf
sar
jb
xor
test
cmc
outs
cmp
and
push
and
and
mov
inc
push
dec
sbb
xor
cmp
add
loop
fmul
cmp
es
into
movs
sbb
push
mov
or
or
add
ret
outs
xor
cmp
enter
out
cs
test
sub
fidivr
outs
call
aaa
mov
xchg
(bad)
mov
cmp
add
add
outs
jp
jno
jmp
hlt
dec
cs
ss
mov
adc
pop
jbe
jbe
pop
retf
shl
mov
pop
adc
pusha
mov
mov
jbe
scas
mov
mov
(bad)
jp
lods
imul
sahf
dec
lods
ret
retf
mov
inc
ds
retf
fdivp
jecxz
arpl
mov
hlt
or
jb
aam
js
mov
xchg
(bad)
dec
and
div
cmps
pop
lods
add
pop
jae
inc
sub
cwde
pop
mov
cmp
xor
and
ror
fldcw
sub
sub
fdiv
sbb
call
popa
jle
pop
rol
cmp
xchg
jb
push
xchg
xchg
fs
scas
pop
pusha
inc
add
push
retf
fwait
mov
sub
inc
fidiv
shl
xor
pushf
or
daa
push
bound
inc
xor
icebp
scas
lock
test
cmp
cli
pop
cwde
dec
pop
test
pop
ss
nop
dec
xchg
jp
add
pop
fimul
jle
push
fidiv
adc
into
fimul
pop
sbb
jmp
sbb
xchg
mov
jno
aaa
push
mov
shl
sahf
jp
(bad)
neg
sub
pop
(bad)
(bad)
call
dec
or
add
add
dec
dec
pop
enter
inc
xchg
mov
sahf
pusha
and
ret
mov
and
imul
(bad)
or
xchg
xor
(bad)
cli
add
ss
pop
mov
out
fild
ss
jp
ret
jne
daa
repnz
mov
mov
loope
sbb
dec
push
add
out
jmp
pop
add
retf
add
xchg
xchg
or
push
sbb
ret
push
stos
mov
xchg
pop
enter
xchg
into
adc
push
mov
inc
inc
mov
sub
push
mov
sbb
mov
pop
retf
imul
popa
add
push
xchg
mov
ss
xor
aam
xor
jecxz
div
push
ds
stos
inc
jo
and
stos
add
jle
or
daa
cli
pop
add
pusha
xchg
jp
xor
mov
mov
(bad)
or
outs
pop
and
sbb
or
shr
cmp
(bad)
xchg
xchg
xchg
out
aas
ss
add
pop
dec
inc
das
inc
add
sbb
fmul
push
ret
loop
loope
push
pop
mov
push
and
arpl
retf
ret
fs
mov
push
xlat
shl
out
sbb
retf
mov
sbb
push
push
cmp
sbb
sbb
inc
jmp
jle
push
add
pushf
sub
pop
pusha
dec
cdq
xchg
data16
sub
add
cmc
xchg
neg
aaa
pop
shl
out
xor
lods
add
rol
pop
push
push
jmp
cmc
mov
les
mov
sbb
adc
xor
xor
mov
test
loopne
xchg
add
fidivr
xchg
loop
mov
popf
lea
outs
pusha
jno
call
add
imul
pop
inc
repnz
ret
sbb
jmp
mov
shl
mov
mov
xor
cmp
jle
ins
cmp
sub
jo
or
xchg
sbb
mov
mov
ret
into
bound
mov
mov
data16
inc
push
mov
lods
mov
scas
jp
sbb
rcl
cmps
pop
enter
push
mov
ja
into
and
fsub
pop
stos
or
inc
adc
xchg
mov
test
test
das
mov
retf
es
mov
push
adc
or
ds
add
out
push
cli
jp
pusha
fs
push
cs
or
retf
push
jnp
cmp
add
into
push
push
(bad)
and
xchg
dec
repz
cmp
sub
jp
stos
xor
into
mov
ror
mov
xor
pop
cmps
leave
xchg
inc
and
rol
add
movs
es
adc
cmp
cmp
cmp
pop
aam
test
loopne
jb
add
and
scas
mov
add
cs
cmc
sbb
push
xchg
popa
or
jp
dec
bound
dec
sbb
jmp
jp
and
scas
mov
xor
xor
ss
push
ror
mov
pop
test
adc
mov
xor
xchg
adc
jae
push
cmp
add
inc
cmps
xor
shl
add
mov
push
push
pop
inc
das
mov
add
or
sbb
bound
pop
pop
(bad)
retf
data16
pop
push
adc
sahf
imul
cmp
push
mov
loop
sbb
and
sub
enter
xor
sbb
mov
jns
aam
ss
mov
and
adc
mov
hlt
inc
push
xchg
dec
pop
mul
ins
js
and
jmp
dec
imul
push
loopne
sub
dec
add
popa
and
call
cmp
adc
ins
jmp
aam
js
retf
sbb
inc
div
cs
mov
and
repnz
ficomp
xchg
sbb
add
cmps
mov
xchg
not
or
xchg
mov
inc
dec
(bad)
test
pushf
or
aas
test
or
mov
pop
sbb
fimul
dec
mov
bound
sub
fbld
lock
out
rcl
sbb
jmp
dec
push
cmp
outs
out
adc
xchg
push
ds
cmp
push
or
or
and
loop
xor
ror
(bad)
ss
xor
lock
push
repnz
and
inc
sbb
dec
cmp
popa
dec
xor
and
add
jo
inc
(bad)
into
data16
xor
sub
push
adc
cmp
push
ins
ror
cmovae
por
sbb
sub
sahf
push
push
add
jae
call
ret
xor
and
(bad)
xlat
test
mov
mov
retf
pop
daa
sbb
test
nop
or
cmovae
out
pop
daa
enter
ds
or
dec
xchg
loop
js
imul
inc
pop
pop
add
jmp
cmps
ret
push
mov
mov
and
pop
cli
add
push
test
sbb
sahf
jbe
(bad)
jo
pushf
or
mul
mov
jo
movs
pop
dec
add
sbb
out
sbb
adc
dec
sub
sub
pop
pop
popa
xchg
cs
mov
add
repnz
push
mov
(bad)
enter
adc
mov
pop
ds
push
add
fisubr
and
repz
ret
jecxz
scas
test
add
stos
xor
cmp
outs
popa
inc
(bad)
dec
dec
loopne
rcr
outs
cmp
pushf
add
es
push
add
sahf
sub
xchg
xor
mov
ret
push
mov
shl
jmp
mov
or
das
fst
jbe
pop
lods
shr
add
xchg
shl
imul
rol
pop
shl
mov
sub
jnp
test
ret
movs
dec
idiv
out
(bad)
xchg
dec
cmp
and
cmps
inc
les
mov
pop
cmovb
sbb
js
out
retf
ficom
pop
jl
dec
out
call
nop
mov
add
push
jo
sub
dec
jmp
rcr
movs
int3
add
adc
test
adc
push
or
lods
add
push
pop
push
daa
xchg
sbb
push
in
outs
sub
dec
sub
(bad)
add
sbb
add
cdq
add
call
mov
adc
aam
push
add
pop
or
mov
aam
xchg
jmp
pop
xchg
ss
dec
adc
ins
sbb
cli
mov
mov
sbb
mov
or
xlat
sbb
mov
dec
push
inc
(bad)
jg
dec
push
mov
aas
push
mov
xor
sub
jp
popa
dec
inc
push
test
mov
pop
(bad)
mov
dec
push
out
pusha
jmp
or
pusha
dec
or
shl
pusha
ret
push
stos
sub
enter
inc
jp
outs
jb
cmps
mov
jecxz
movs
xlat
dec
arpl
fidivr
adc
fs
or
out
sahf
mov
nop
pusha
iret
dec
or
mov
cmp
push
pushw
sub
jo
pushf
dec
call
mov
xor
ror
add
into
or
cs
mov
ds
cli
aam
xchg
out
(bad)
retf
dec
daa
dec
dec
and
sbb
mov
dec
xchg
dec
push
mov
ds
push
inc
mov
mov
addr16
xchg
jo
push
dec
mov
xor
fisubr
sub
or
and
(bad)
mov
loopne
das
in
jmp
push
push
or
push
cdq
js
and
mov
cmp
retf
sbb
retf
mov
mov
jb
mov
push
(bad)
mov
xchg
(bad)
push
clc
xor
mov
fisttp
test
adc
call
lock
rol
push
jp
push
scas
in
(bad)
(bad)
jmp
(bad)
xor
jp
inc
sti
ss
and
adc
cmp
xor
pop
and
xchg
mov
movs
xchg
rcr
push
inc
xor
push
loopne
jmp
xchg
sub
mov
cmp
pop
mov
mov
(bad)
jp
dec
fiadd
xchg
push
loopne
mov
lock
mov
or
shr
sub
or
xor
jp
mov
pop
dec
movs
inc
adc
ret
test
jp
pop
add
into
push
jo
outs
iret
jb
push
cmp
inc
jb
sahf
pop
xor
or
gs
retf
inc
inc
pop
pop
pop
pop
lock
test
out
dec
cmps
adc
out
je
loope
out
jp
ins
lods
push
fiadd
fiadd
xchg
jno
push
pusha
js
xor
xor
ret
(bad)
mov
gs
jle
add
add
pop
and
pop
pop
pusha
sub
mov
push
mov
cs
pop
sub
mov
(bad)
pop
fsubrp
popa
mov
cmp
mov
mov
and
adc
xor
xchg
dec
(bad)
cs
jp
xor
sbb
popa
mov
push
add
add
daa
inc
imul
sbb
xchg
xchg
out
mov
pusha
or
xchg
jge
addr16
pop
jmp
xchg
bound
push
sbb
mov
into
sub
xchg
sti
mov
fld
ss
dec
add
or
and
pusha
sub
cmps
push
out
retf
mov
movs
adc
push
jo
ret
add
inc
cmp
xchg
cli
sub
cli
inc
pop
add
mov
push
ins
bound
push
rol
fadd
call
inc
sub
xchg
dec
jp
lahf
mov
(bad)
ror
add
out
push
data16
adc
xchg
inc
xchg
inc
(bad)
inc
xchg
scas
lea
movs
ss
dec
mov
lock
adc
dec
arpl
sbb
and
out
inc
sbb
sbb
js
xchg
pop
js
mov
popa
addr16
(bad)
mov
push
ss
mov
mov
pop
outs
and
or
es
pop
sub
mov
retf
sysret
pusha
and
add
push
xor
jnp
mov
or
fwait
scas
mov
pop
sbb
jp
enter
es
adc
push
inc
mov
mov
xor
and
rcr
call
inc
add
test
sub
ds
pop
(bad)
mov
(bad)
adc
into
or
jmp
ret
jp
enter
mov
mov
push
dec
push
stos
pop
(bad)
lock
xchg
adc
inc
add
cmp
cs
and
inc
xchg
rcr
or
sub
mov
fidivr
dec
pop
push
addr16
xor
or
retf
mov
sbb
jmp
xchg
loop
(bad)
mov
lods
inc
xchg
sbb
or
dec
retf
sti
xor
das
call
inc
xor
pop
inc
jp
push
ret
push
fdiv
or
pop
fwait
sub
ds
push
adc
mov
pop
lods
mov
rcr
rcr
jo
imul
xor
and
out
adc
push
retf
mov
push
push
ss
mov
movs
xor
repnz
pusha
pop
ficom
inc
cs
mov
sbb
jp
nop
sbb
jb
out
mov
shl
imul
call
add
fistp
add
pop
lods
dec
xlat
nop
push
add
sbb
and
sbb
(bad)
mov
xor
push
push
sbb
call
push
rol
pop
jp
fisubr
push
mov
xchg
test
into
fstp
push
repnz
push
fs
or
(bad)
xor
sbb
inc
sub
cwde
inc
mov
xchg
or
sub
jge
or
test
mov
bound
js
pop
xor
add
sbb
add
outs
push
pushf
mov
out
leave
pop
and
mov
scas
and
cmps
js
xor
retf
sub
mov
fstp
pop
adc
(bad)
push
cmps
into
push
xor
js
outs
mov
rcr
push
es
data16
xchg
mov
outs
cmp
scas
and
xor
(bad)
xchg
sub
gs
dec
add
push
(bad)
fisubr
pop
dec
xor
mov
(bad)
pop
pop
sbb
inc
sahf
or
sbb
repnz
inc
or
inc
jmp
mov
out
cmp
test
or
push
inc
loope
sbb
add
sub
fidiv
cmp
daa
cmp
pusha
push
mov
cmps
push
add
push
lods
or
iret
xor
movs
mov
cmp
(bad)
xchg
sar
or
adc
xor
push
or
shr
stos
ds
(bad)
call
add
cmps
loope
into
add
sbb
cmp
loop
ret
push
xor
(bad)
cmc
out
sahf
cmps
jb
and
cmp
mov
jmp
dec
push
cmp
xchg
rcl
fidivr
adc
mov
dec
dec
jbe
popa
popa
into
pop
dec
test
ror
(bad)
icebp
and
cmp
pop
or
jae
rol
ret
mov
inc
rcr
dec
cmp
mov
and
mul
adc
js
js
pop
adc
xchg
dec
mov
ret
enter
fwait
jbe
dec
or
inc
or
cmp
or
jp
dec
out
out
adc
pop
xchg
add
mov
ror
xor
xchg
sub
mov
mov
in
movs
lahf
repnz
add
sbb
pop
inc
cmp
mov
mov
push
xor
outs
mov
adc
cmp
or
int3
inc
cdq
mov
shr
xor
mov
or
aam
add
fidiv
sbb
call
sub
jo
inc
call
jmp
push
push
and
lahf
dec
sbb
fs
out
push
imul
add
pushf
mov
pop
and
outs
jle
ret
fisub
les
xchg
pop
or
mov
(bad)
movs
sub
sub
lds
adc
sahf
xchg
dec
test
add
lock
xchg
inc
sub
test
ret
cmp
jb
fs
loop
daa
movs
mov
cmp
push
repnz
ret
push
out
push
inc
je
sub
pop
outs
data16
rcr
mov
jp
pop
repnz
pop
mov
inc
sub
xor
push
imul
mov
and
inc
or
ret
call
push
mov
add
pop
nop
xchg
add
lods
sub
pusha
xadd
movd
push
mov
pop
jo
test
scas
and
fwait
sbb
popf
imul
mov
jo
repnz
clc
cmp
push
sub
mov
or
push
ret
int3
add
addr16
cmovnp
xchg
push
pusha
sub
xchg
push
js
push
inc
test
ficomp
lea
sbb
xchg
(bad)
xchg
into
add
mov
cli
outs
ds
xchg
nop
inc
repnz
mov
fimul
push
add
mov
push
and
aas
sub
add
push
addr16
adc
and
data16
pop
mov
inc
jecxz
cmp
xor
jo
mov
lock
sub
xor
push
mov
xor
fcom
push
dec
cwde
sahf
pop
shl
or
mov
mov
into
retf
lods
dec
sar
out
push
adc
and
or
and
push
xchg
es
ficom
sbb
sahf
cs
lods
ins
out
dec
jmp
sub
into
out
loope
ret
pop
bnd
rcl
arpl
mov
rcr
inc
out
and
and
cmps
inc
das
call
mov
or
cmps
sbb
sbb
movs
lods
es
mov
rcl
xchg
xor
and
push
(bad)
scas
sbb
adc
jb
mov
jb
adc
js
ss
push
cmp
mov
into
fcom
xchg
pop
shl
sbb
jnp
sub
and
out
loop
mov
pop
fimul
call
push
dec
or
inc
add
enter
nop
sahf
sbb
or
pop
imul
into
js
push
cli
cs
inc
add
xchg
fisubr
jmp
or
or
add
sub
add
sub
sub
icebp
push
cmps
call
push
xor
cmp
xchg
lods
and
push
and
lar
scas
pusha
imul
inc
jp
sbb
cs
push
mov
xor
and
ret
cs
sub
jmp
pop
ficomp
lar
push
sbb
inc
pop
and
cmp
push
add
lods
je
ret
pop
data16
mov
scas
aam
sub
xor
or
mov
push
and
dec
lods
mov
xchg
popa
wbinvd
jmp
lock
push
mov
pop
cmp
inc
jne
jb
mov
or
ret
and
add
inc
js
outs
and
xchg
sbb
dec
jbe
mov
xor
push
sbb
inc
mov
cmp
sbb
xchg
inc
cmps
into
pop
add
or
mov
mov
push
xchg
sub
pop
loop
test
and
push
mov
imul
pusha
push
inc
xchg
ins
push
xor
or
pop
lahf
add
xchg
retf
fsub
rcl
das
xchg
sbb
push
inc
cmp
sbb
sub
pop
mov
ror
stos
mov
mov
fisttp
adc
push
lahf
cmp
out
or
xor
rol
push
adc
sbb
(bad)
(bad)
pusha
xor
fidivr
push
mov
into
or
scas
or
outs
lods
sub
popa
or
push
shl
and
imul
xor
jle
add
dec
sbb
cmp
dec
add
pop
jbe
pop
adc
hlt
or
ds
in
sbb
sub
mov
add
adc
xchg
mov
adc
mov
or
retf
(bad)
(bad)
jmp
push
and
nop
or
sub
loop
or
jno
adc
sub
xor
cli
ret
cmp
cmp
fiadd
dec
push
mov
xchg
fcmove
pop
sar
cmp
dec
or
dec
scas
dec
cmp
xor
add
cmp
pop
xor
inc
cli
jp
pusha
mov
push
cmp
add
mov
mov
xor
into
or
and
cmp
cdq
mov
sti
add
sub
pop
mov
dec
or
fimul
adc
sub
bound
dec
into
aas
xor
jecxz
or
rol
(bad)
push
xchg
dec
lods
(bad)
jle
jo
rol
mov
mov
outs
out
rcl
adc
adc
and
rcr
stos
sub
pop
pop
or
mov
sbb
iret
(bad)
push
outs
pop
popa
and
mov
mov
inc
retf
sbb
test
mov
sahf
(bad)
inc
rcl
or
push
and
push
pop
rcl
pop
dec
das
push
ss
cmp
js
fimul
mov
idiv
push
aam
inc
jmp
dec
add
inc
add
mov
sub
loop
cmc
sbb
inc
inc
popa
sub
je
je
data16
ss
xor
pop
cmp
push
cs
sbb
mov
jbe
(bad)
pop
cmp
ds
inc
shr
add
add
bound
mov
into
rol
mov
xchg
ret
aaa
ins
ret
(bad)
jle
push
xor
fcmove
ins
ret
mov
bound
and
dec
or
call
lods
mov
into
add
mov
push
retf
retf
sbb
sub
add
nop
add
lea
sub
add
arpl
sub
cmps
sbb
dec
jmp
sbb
rcr
add
loop
sub
push
mov
jmp
gs
ret
cs
mov
arpl
dec
jecxz
push
cmps
xor
(bad)
test
or
cmp
in
pop
out
push
adc
xchg
xor
div
into
fs
add
scas
jmp
mov
repz
dec
cs
rol
(bad)
jecxz
cmp
fwait
loop
pop
mov
pop
pop
cmp
push
jp
inc
sbb
test
bound
sbb
dec
push
xor
adc
aam
xchg
mov
xor
jp
cmp
shr
(bad)
xchg
loope
sbb
cmp
dec
test
push
cmps
mov
adc
outs
inc
outs
push
push
mov
ficomp
mov
fcomp
push
outs
or
inc
inc
outs
jle
pop
test
into
xor
cmp
dec
cdq
cmps
add
adc
mov
test
lea
push
cmp
mov
jb
jle
in
test
(bad)
pop
stos
xchg
and
mov
xchg
cs
and
lea
sbb
ds
add
or
test
out
out
loop
inc
push
xchg
push
cmp
loop
loope
xchg
cmps
or
push
dec
dec
das
pop
test
mov
inc
lahf
sub
test
and
adc
sar
data16
dec
inc
addr16
scas
xchg
sub
cmp
es
retf
jmp
loop
jb
fidiv
add
pop
pop
sub
push
mov
loop
stos
dec
inc
dec
ror
lahf
xchg
popf
inc
popf
or
adc
cmp
pop
ret
das
sub
add
sbb
mov
xchg
mov
inc
loopne
mov
lods
into
and
movs
xor
mov
in
push
and
adc
cmp
fbld
add
sbb
jmp
jo
or
pop
sub
ret
call
inc
xchg
mov
mov
pushf
or
outs
jae
xchg
loop
sub
xchg
dec
ret
aam
sub
or
repnz
add
(bad)
or
sbb
mov
mov
xchg
sbb
push
push
scas
and
push
rol
call
cli
aaa
pop
or
pop
mov
cdq
pusha
or
rcr
ds
cs
arpl
xchg
adc
call
xor
pushf
ins
popfw
jmp
xor
or
addr16
ds
ret
push
or
or
arpl
xor
nop
dec
mov
xchg
mov
cli
xlat
pop
jo
and
inc
dec
daa
loopne
loop
pop
xor
push
push
xchg
retf
pop
(bad)
loope
jbe
sbb
cmps
ror
jbe
push
scas
cmp
mov
push
gs
mov
mov
push
inc
and
push
out
or
or
inc
and
adc
add
cs
inc
sbb
fcmovb
sahf
into
push
push
cmp
jle
adc
add
and
test
xchg
nop
xchg
pop
mov
push
addr16
adc
mov
out
mov
lea
xchg
loopne
mov
push
pop
mov
fsubr
ror
out
xor
xor
sbb
rcr
mov
push
jecxz
ror
jmp
dec
add
(bad)
jns
aam
mov
inc
inc
push
push
jge
or
cmps
rcr
or
xchg
cmp
mov
cdq
ror
and
pop
or
ret
and
inc
shl
out
nop
fstp
ret
ja
mov
adc
inc
cmp
call
pop
icebp
cmp
jbe
les
dec
out
pop
mov
xor
leave
add
cmps
sub
cmp
xchg
mov
cmp
add
sub
adc
es
xor
push
adc
aas
clc
sbb
lock
inc
mov
dec
and
jmp
mov
push
or
jo
or
jmp
cmp
inc
fimul
loope
mov
imul
xor
mov
lods
ins
jmp
test
xchg
add
mov
mov
push
imul
out
inc
jno
jmp
push
scas
add
xchg
rol
push
push
(bad)
mov
dec
ret
rol
xor
fiadd
test
ror
retf
mov
(bad)
sahf
jp
mov
movd
push
push
cmp
(bad)
cmp
rol
xchg
cmp
adc
sbb
shl
dec
bound
fcomp
push
sahf
cmp
add
movs
pushw
(bad)
jle
add
add
pop
dec
mov
or
push
lea
comiss
and
mov
sahf
imul
push
push
adc
inc
repnz
push
stos
arpl
mov
mov
or
cmp
adc
adc
mov
ret
enter
mov
(bad)
dec
push
xchg
loopne
call
and
mov
xor
jo
mov
out
mov
sbb
(bad)
cli
jp
mov
mov
addr16
add
add
adc
(bad)
mov
icebp
popa
inc
mov
dec
sbb
ficom
test
ret
push
cmp
idiv
jb
add
sahf
jp
bound
or
cdq
push
mov
sahf
or
push
mov
mov
fadd
cmp
push
pop
mov
rol
dec
pop
cmps
inc
js
jmp
(bad)
bound
pop
fwait
mov
add
adc
push
fs
jge
mov
sbb
cs
rcl
mov
push
ret
sbb
sub
loop
jo
pushf
dec
loop
sub
mov
lea
into
adc
ds
ret
push
push
sbb
imul
sbb
bound
loop
sub
pop
outs
mov
shr
(bad)
mov
adc
fisub
shl
dec
cdq
pop
add
test
xor
xchg
dec
cs
dec
(bad)
mov
out
push
add
aaa
lock
sbb
loopne
test
fs
out
pusha
xor
jo
cmp
add
loopne
daa
pop
add
lods
add
inc
mov
movs
mov
dec
adc
idiv
push
rol
and
data16
sub
push
scas
sbb
ins
arpl
and
outs
inc
adc
lods
jbe
xchg
or
inc
add
cs
ret
out
xor
cwde
push
retf
adc
shr
cmp
sub
aaa
sbb
(bad)
ss
pop
loopne
inc
cli
(bad)
xchg
xchg
add
sub
mov
(bad)
scas
mov
push
xchg
daa
sub
cli
mov
movs
push
jnp
aam
xchg
inc
test
or
pop
xchg
enter
and
push
push
xor
mov
mov
mov
data16
adc
cmps
lea
dec
inc
push
test
xchg
push
mov
xor
dec
repnz
dec
and
adc
pop
dec
fs
cmc
sbb
xchg
xor
retf
xchg
push
stos
bound
cmp
inc
cmp
mov
jno
sbb
dec
idiv
xor
movs
daa
(bad)
adc
mov
xchg
lods
and
inc
inc
loope
data16
movs
pop
dec
adc
jmp
bnd
adc
mov
or
mov
or
leave
sub
js
mov
pop
mov
dec
(bad)
ret
or
mov
mov
ret
and
add
fwait
mov
mov
out
lahf
pop
test
sub
shl
(bad)
pop
gs
push
mov
outs
lea
bound
or
push
push
jb
mov
sub
inc
cmc
test
sti
add
mov
or
sbb
sbb
pop
(bad)
cmp
test
ret
pop
mov
push
pusha
aaa
daa
add
jmp
ss
mov
mov
pop
pusha
shl
add
adc
into
enter
ret
xchg
retf
jmp
or
fdivr
jle
ret
(bad)
xor
in
pop
xchg
cmps
call
test
mov
dec
push
xchg
cmps
rcl
pop
ficom
pop
adc
(bad)
jo
lods
sub
xchg
add
and
add
sub
add
(bad)
loopne
aas
adc
push
adc
sahf
cmps
adc
xor
push
lock
jle
sahf
push
pushf
inc
outs
imul
imul
out
popa
inc
dec
repnz
or
cmpps
mov
retf
adc
push
addr16
outs
call
ret
or
retf
cmp
jmp
test
mov
xchg
push
xchg
js
xor
inc
mov
jnp
lods
icebp
mov
imul
scas
xor
or
sub
adc
mov
(bad)
imul
ret
and
nop
outs
push
mov
add
scas
ja
arpl
pop
xor
in
inc
add
mov
out
xor
dec
inc
loopne
dec
inc
outs
les
js
push
dec
add
addr16
xlat
pop
pop
push
rcr
imul
dec
pushf
or
cli
ror
inc
sub
xchg
(bad)
pop
mov
mov
pop
pop
shr
cmp
dec
dec
mov
mov
outs
or
jle
mov
es
mov
punpcklbw
cmp
pushf
out
jp
xchg
es
xor
sbb
mov
adc
out
cli
pop
inc
cdq
mov
mov
push
adc
cmp
mov
fsub
gs
loopne
pusha
pop
bound
shl
ret
and
outs
pop
adc
xor
dec
adc
pop
jmp
add
xchg
push
mov
mov
lods
and
ds
xchg
cmp
mov
mov
or
sub
inc
adc
into
mov
xchg
pusha
pop
and
jp
and
cmp
js
mov
push
mov
out
and
push
add
xor
push
data16
dec
sbb
jbe
dec
call
xchg
pop
sub
sub
daa
stos
ret
adc
mov
sub
jnp
xchg
or
adc
sub
xor
call
xor
cli
cmp
adc
push
xchg
popa
mov
(bad)
fcomp
xchg
xor
outs
test
xchg
sar
pusha
cli
mov
jbe
adc
lock
adc
add
shl
ret
js
stos
lock
fnstenv
daa
retf
pushf
xor
mov
or
outs
sub
sbb
loopne
dec
icebp
xchg
cmps
jle
push
sbb
into
adc
add
aaa
xchg
jp
add
outs
cmp
shl
pop
dec
jp
adc
and
aas
sbb
shl
js
cmovo
pushf
retf
mov
add
cmps
adc
(bad)
mov
mov
xchg
xchg
inc
mov
inc
mov
jbe
mov
arpl
mov
pop
xor
push
add
cmps
ficom
adc
sbb
sbb
test
(bad)
mov
repz
dec
sub
and
and
test
pop
loop
push
retf
dec
push
lahf
js
adc
or
mov
faddp
push
and
ds
sub
or
mov
xchg
adc
dec
add
jmp
pop
js
outs
leave
bound
in
or
imul
lods
adc
pop
cli
(bad)
jmp
inc
jp
outs
(bad)
in
cwde
xchg
xor
pop
mov
sub
clc
push
and
jp
push
mov
xchg
push
out
mov
into
jle
dec
jp
or
mov
(bad)
loopne
add
sbb
jb
fs
jb
push
(bad)
xlat
pop
push
lock
push
add
mov
(bad)
and
rcr
xchg
data16
sbb
dec
jecxz
adc
sub
or
pusha
cmp
dec
mov
or
dec
and
cmp
adc
(bad)
push
outs
sahf
sbb
cmp
cs
fcom
xor
pop
and
inc
cmp
and
push
push
xor
dec
pop
inc
in
jne
ret
scas
cli
cwde
cmp
adc
cmps
sahf
mov
adc
sbb
push
repnz
fisub
push
xor
xor
dec
inc
inc
mov
xchg
add
and
pop
add
loop
push
add
outs
push
mov
mov
rol
push
xor
movs
sub
ror
stos
cwde
test
pusha
cmp
sahf
or
pop
into
xchg
pop
fstp
xor
jmp
test
test
sahf
movs
push
into
sbb
mov
jno
xchg
loop
add
push
je
push
nop
adc
or
mov
lds
inc
sbb
xor
cs
call
mov
jb
cmp
dec
cmp
scas
mov
add
es
sub
mov
mov
xchg
xor
fimul
cmovae
mov
push
mov
push
or
mov
popa
cmp
test
test
mov
mov
push
aam
gs
add
inc
jnp
jns
ret
xor
jecxz
loope
daa
mov
dec
or
inc
sbb
jno
add
sahf
pusha
push
inc
dec
pop
or
ficom
out
ins
add
xor
mov
inc
sbb
das
add
adc
cli
lods
int3
push
mov
shr
call
and
jo
(bad)
mov
sahf
cmp
inc
sub
jae
cmps
add
inc
adc
or
retf
jno
icebp
stos
pusha
push
add
jb
lods
and
fist
fcomp
xchg
call
cs
xor
xchg
inc
add
(bad)
jmp
push
mov
sbb
mul
xor
inc
jo
xchg
rol
(bad)
(bad)
rol
inc
(bad)
dec
xchg
add
jbe
jp
stos
mov
sub
mov
adc
inc
ret
lods
mov
inc
call
mov
xchg
mov
add
sar
mov
sub
imul
push
or
dec
add
add
cs
ret
xchg
div
xchg
rcl
inc
dec
push
or
pop
inc
data16
jle
xchg
cmp
loopne
dec
ret
pop
xor
fist
icebp
sahf
stos
inc
dec
sub
call
push
lods
adc
jmp
or
dec
ins
pushf
sub
into
add
push
fild
pop
rcl
inc
or
and
xor
ret
jmp
or
loopne
fidivr
les
push
mov
(bad)
outs
iret
data16
test
ret
push
jmp
out
mov
(bad)
mov
xchg
mov
mov
cmp
bswap
mov
mov
ret
push
(bad)
fwait
push
out
add
and
adc
ret
je
push
inc
iret
das
cmp
push
outs
scas
add
mov
mov
clc
xchg
sub
rol
xchg
jbe
pop
add
nop
outs
es
sub
adc
or
das
mov
dec
shl
mov
xchg
(bad)
push
adc
or
ret
ds
inc
js
scas
mov
inc
sbb
cmc
rcl
adc
mov
enter
ret
push
sbb
sbb
(bad)
push
dec
dec
inc
pop
into
mov
add
dec
add
loop
dec
or
scas
mov
div
cs
call
jecxz
jne
push
or
test
and
adc
push
sub
mov
test
push
adc
inc
fidivr
mov
movs
sub
scas
arpl
lock
test
jle
or
ror
mov
cmp
mov
jle
cmps
adc
adc
ror
mov
jns
add
(bad)
(bad)
cs
adc
rcl
mov
adc
mov
loopne
rcl
ds
pushf
and
dec
jbe
inc
cmp
xor
call
aas
rol
lahf
or
imul
adc
pop
mov
xor
call
cwde
lods
ins
jg
loopne
adc
dec
out
rcl
cmp
or
fbld
push
clc
or
sub
dec
push
mov
(bad)
xchg
adc
xlat
nop
fild
and
in
shl
inc
mov
repnz
call
mov
fidiv
inc
fidiv
movs
in
(bad)
scas
sti
ins
ret
out
pop
scas
xor
sbb
idiv
inc
xchg
cs
add
and
and
fcomip
ret
mov
fist
xor
fist
scas
xchg
push
inc
fimul
inc
dec
shr
mov
(bad)
loop
loopne
add
js
jecxz
inc
dec
push
test
jle
sub
adc
jmp
or
or
xor
mov
je
ficomp
mov
or
xor
test
movs
popa
nop
loopne
ret
or
jne
cmp
sbb
loopne
xchg
and
adc
rcl
dec
push
xor
js
mov
mov
xor
in
loopne
pop
xor
(bad)
xchg
(bad)
cmp
inc
jmp
out
fimul
adc
mov
push
xor
mov
mov
sahf
loope
or
cmp
scas
(bad)
or
inc
es
cli
inc
out
jo
push
dec
xchg
mov
or
sahf
cmc
nop
cmp
xor
mov
push
sbb
pop
push
daa
sahf
ret
ficom
(bad)
cmps
scas
mov
inc
jp
adc
mov
xor
push
inc
pop
fmul
cmps
js
sub
fmulp
xlat
dec
or
pop
imul
mov
mov
ds
js
retf
js
bound
mov
jp
or
ficom
(bad)
jg
dec
(bad)
loopne
adc
jo
movs
movs
jle
inc
add
and
sbb
xchg
pop
adc
xchg
cmp
mov
adc
push
js
xor
pop
div
cwde
in
adc
push
call
xchg
xchg
push
mov
sbb
cmp
les
push
daa
or
adc
shl
ss
call
ret
add
aaa
cmp
loope
and
addps
(bad)
jl
dec
add
sbb
pop
sbb
cmps
mov
pop
dec
ficom
sbb
mov
jmp
sbb
test
test
call
clc
cmp
lea
inc
das
leave
sub
push
push
call
movs
mov
jmp
mov
jmp
loopne
and
push
sbb
or
popa
sub
outs
and
aas
sub
add
mov
mov
outs
or
push
(bad)
pusha
dec
sub
jle
mov
pop
and
inc
rol
(bad)
push
xchg
test
(bad)
push
inc
fld
xor
sub
pop
push
sahf
xchg
xchg
movs
mov
mov
inc
mov
adc
div
out
pushf
je
movs
jle
cs
mov
outs
cs
adc
shr
fbld
jle
bt
xor
ss
mov
retf
test
inc
movs
rol
push
cmp
out
loop
push
idiv
bound
or
pop
(bad)
fist
adc
mov
mov
pop
xor
sbb
outs
into
add
pushf
or
(bad)
dec
test
sub
or
ror
or
pop
add
push
lahf
jae
mov
ret
adc
mov
scas
pop
mov
inc
iret
mov
lahf
and
dec
xchg
into
ds
call
sub
(bad)
xor
add
sbb
pop
jae
pop
fsub
pop
jg
jb
sub
inc
xchg
add
cli
mov
into
xchg
adc
xchg
mov
sub
sub
lea
mov
shl
dec
xchg
push
dec
add
dec
dec
push
and
sahf
sahf
cmp
gs
xchg
push
sub
mov
pop
and
dec
into
ds
dec
jbe
add
fwait
xor
push
cli
es
push
sub
and
rcl
sbb
scas
inc
subps
add
push
pusha
dec
das
(bad)
addr16
ja
sar
cmps
pop
adc
(bad)
dec
test
repnz
fsubr
jmp
ret
sbb
mov
mov
loop
push
out
ror
dec
fmul
mov
imul
retf
sub
jecxz
or
and
ss
or
nop
movs
xchg
cwde
mov
or
shl
dec
loop
fiadd
xchg
pop
add
mov
outs
repnz
dec
sub
inc
sub
into
nop
mov
outs
dec
jg
loope
inc
pop
jecxz
dec
arpl
sub
out
pushf
push
inc
sbb
mov
and
sub
and
cmovs
pop
or
or
dec
add
inc
(bad)
and
push
dec
lahf
cmp
cmp
xchg
mov
adc
shr
or
push
mov
dec
js
cmps
sub
and
mov
aaa
retf
imul
daa
or
mov
(bad)
fld1
sub
retf
ss
(bad)
aam
and
xor
and
stos
movhlps
push
dec
and
mov
push
push
push
ret
bound
fdivr
jnp
pushf
inc
enter
sub
pop
ss
push
and
xchg
and
xlat
add
arpl
jo
or
push
fisub
loopne
adc
xor
nop
add
adc
cs
add
sbb
xchg
rol
lahf
ja
inc
or
scas
cmp
jne
push
jbe
add
adc
mov
mov
sbb
mov
push
rcl
mov
pop
pop
mov
repz
or
retf
adc
out
add
ret
aad
inc
retf
mov
test
cmp
add
mov
movs
dec
dec
into
inc
out
mov
(bad)
mov
adc
jmp
or
adc
dec
loopne
jb
into
xchg
or
add
scas
xchg
mov
xor
jmp
add
addr16
dec
and
push
addr16
and
jmp
sub
mov
jb
cmp
add
push
add
jo
(bad)
(bad)
xchg
cmp
mov
xchg
cs
or
sahf
data16
dec
sub
and
push
xchg
mov
daa
pop
mov
xor
into
inc
sub
pop
sbb
cli
movs
into
sbb
or
aad
iret
or
sbb
pop
xor
test
call
or
test
jmp
loope
dec
cmps
add
(bad)
xlat
jb
mov
mov
pop
loopne
jp
push
test
data16
and
cmps
mov
and
test
ret
cmp
xor
sbb
pushf
or
add
xchg
stos
jbe
adc
movs
adc
ss
cwde
push
cli
xchg
icebp
and
mov
sbb
or
dec
pop
loop
xor
cmp
dec
cmps
jmp
mov
pushf
(bad)
shl
xor
dec
pop
outs
cli
retf
or
test
adc
fdivp
das
mov
lahf
sbb
fdivp
add
call
pusha
sbb
xchg
or
xor
jp
inc
push
into
jecxz
adc
and
out
popf
je
into
mov
scas
xor
gs
das
mov
es
xchg
push
inc
popf
mov
or
cmp
pusha
sub
xchg
mov
dec
sbb
or
mov
jp
sbb
mov
xchg
fiadd
add
sbb
add
pushf
sub
aas
xchg
add
mov
lods
aaa
ds
push
push
lods
mov
les
adc
das
jo
out
stos
(bad)
jbe
fwait
jo
call
pop
(bad)
pop
sbb
fidiv
ret
lods
dec
ret
adc
and
inc
jle
stos
add
leave
or
sbb
mov
or
mov
mov
shr
xchg
adc
cmp
push
add
aas
dec
cmovo
retf
add
mov
mov
retf
pop
dec
bound
aam
jp
xor
xor
and
idiv
loop
leave
test
add
or
scas
pop
cs
xchg
or
test
add
loop
xchg
pop
jle
fwait
lods
push
adc
and
and
push
mov
sbb
out
(bad)
and
lock
fiadd
cmp
dec
cdq
cmps
add
dec
pop
dec
pop
pushf
(bad)
dec
dec
xchg
add
fidiv
and
sub
push
stos
rcl
xchg
ret
mov
xchg
add
cmp
mov
xor
inc
cmp
jle
loope
inc
or
inc
daa
js
push
nop
xchg
ins
dec
adc
xchg
cmps
jp
push
rol
pop
dec
mov
xor
dec
outs
call
push
mov
inc
dec
imul
loopne
xor
push
test
xchg
sub
pop
or
out
add
cmp
add
or
push
mov
dec
pusha
xor
pusha
(bad)
inc
mov
ror
pop
dec
lods
mov
call
xchg
out
sahf
(bad)
push
push
dec
add
ret
cmps
push
or
mov
push
rol
out
outs
xchg
or
mov
dec
sahf
xchg
mov
ret
or
mov
sub
inc
xor
out
push
push
or
or
arpl
les
inc
rcl
ds
ficomp
push
data16
dec
or
mov
je
loope
jmp
push
into
add
mov
jg
adc
or
lea
xor
mov
xor
shl
xor
inc
repnz
rol
mov
imul
adc
aad
push
sub
mov
mov
test
dec
dec
cmp
mov
div
adc
mov
or
out
or
jmp
pop
push
cmp
ret
add
aad
les
push
inc
and
rol
retf
add
sbb
out
shr
pop
push
pusha
jae
inc
or
mov
lock
loope
mov
out
cmps
sub
push
inc
(bad)
stos
rcl
pusha
aam
loop
push
and
mov
push
dec
and
jp
or
push
cmp
popf
loopne
mov
inc
dec
pusha
(bad)
jmp
fs
inc
add
xchg
mov
pop
pop
sbb
ret
add
cmp
pop
add
pop
popf
dec
xor
retfw
add
push
adc
das
pop
pop
js
add
add
lock
pop
lods
sub
dec
dec
(bad)
push
stos
dec
test
movs
xor
jbe
pop
inc
xchg
push
mov
pop
movs
adc
sub
cmps
out
sub
(bad)
sbb
ret
jnp
jle
sbb
xchg
rcr
out
ret
adc
sub
add
add
into
outs
cwde
mov
xchg
add
pop
outs
scas
(bad)
loope
xchg
(bad)
jle
xchg
adc
fst
mov
imul
daa
cmp
nop
pop
retf
or
test
xchg
push
shl
and
inc
jns
ds
mov
mov
out
stos
and
sbb
sahf
inc
dec
pop
or
shr
push
push
call
retf
or
push
arpl
mov
jp
add
dec
fimul
cmp
push
fst
pop
xadd
push
or
xor
fs
cmp
(bad)
and
jecxz
mov
outs
data16
sub
sbb
cmps
sbb
mov
sbb
(bad)
sbb
xlat
inc
sub
push
lock
jbe
push
inc
xchg
push
ss
fiadd
jbe
lods
xchg
pop
adc
ret
xor
and
push
scas
mov
add
rcl
loopne
pop
xchg
shl
or
into
mov
dec
cmps
cmps
bound
leave
and
repnz
test
add
or
movs
aaa
outs
ror
es
sbb
add
(bad)
pop
adc
lods
sub
addr16
shl
not
adc
bound
loop
loopne
xlat
data16
sbb
sub
xor
scas
add
retf
add
or
idiv
xchg
cs
mov
in
(bad)
cs
sub
push
sub
adc
data16
xchg
add
pop
outs
and
or
dec
mov
push
cmp
mov
adc
fs
dec
aaa
and
shl
add
rol
jp
sub
mov
jb
mov
add
out
loope
mov
cmp
shr
imul
xor
mov
cmp
and
pop
cmps
(bad)
lock
sub
imul
out
mov
sub
xlat
test
lock
cli
shl
das
enter
cli
pusha
push
pop
mov
inc
cmp
popf
mov
jle
pop
xchg
icebp
mov
mov
arpl
and
rcr
out
xchg
dec
popf
push
es
push
cmps
scas
jp
ins
ins
shl
dec
push
inc
jle
adc
outs
loop
into
push
inc
adc
dec
stos
push
ret
addr16
dec
sbb
pop
cmp
mov
adc
jnp
or
xchg
pop
cli
out
out
or
dec
inc
xor
out
rcl
sahf
jo
add
rol
xchg
movs
sahf
into
mov
cmp
scas
and
pop
test
test
push
adc
bound
dec
xchg
push
sahf
cwde
sbb
inc
repnz
test
addr16
mov
bound
sub
adc
mov
ret
pop
sub
ret
xor
mov
or
pusha
loope
mov
and
mov
push
mov
dec
add
loopne
and
push
sbb
add
mov
popa
ret
ret
push
push
jbe
push
cli
fcom
xchg
adc
add
dec
sub
repnz
pop
cdq
mov
cs
mov
jecxz
enter
push
add
mov
in
pop
out
sub
sbb
xchg
add
pusha
ret
(bad)
lods
movs
xor
retf
loope
shl
fcomp
push
push
and
rcl
mov
jbe
call
sub
or
jmp
jne
sbb
add
adc
fidiv
mov
mov
cwde
cmp
pop
mov
stos
loop
js
jne
mov
retf
cdq
aam
pop
jbe
dec
fs
dec
mov
add
push
inc
push
mov
push
mov
fiadd
pop
add
add
(bad)
addr16
cdq
xor
loop
inc
loop
repnz
imul
cli
dec
dec
js
jb
data16
xor
sbb
or
or
push
push
mov
sub
jne
push
jmp
jbe
sub
dec
inc
(bad)
ja
xchg
push
cmp
mov
loope
jb
xchg
jp
mov
push
push
aaa
clc
(bad)
sbb
add
add
push
iret
dec
ficomp
mov
pop
shl
cmp
sahf
cmp
xor
dec
ret
fst
(bad)
loop
inc
popa
jbe
pop
test
outs
dec
mov
cmp
mov
ss
addr16
sahf
fwait
or
mov
scas
