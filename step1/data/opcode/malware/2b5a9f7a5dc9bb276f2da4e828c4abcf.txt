lock
lea
push
or
dec
jbe
add
dec
xor
push
shl
into
xchg
cmp
stos
int3
add
shl
imul
xor
test
xor
mov
xor
dec
inc
pusha
mov
int
sub
mov
loope
mov
pusha
mov
dec
jp
mov
in
pop
jb
xchg
movs
mov
ins
mov
icebp
cmp
pop
ins
rcr
xor
xchg
lahf
imul
pop
dec
xlat
out
loope
popa
cmp
mov
fs
dec
repnz
xor
dec
lds
or
shl
test
sub
bound
sub
dec
jno
xchg
mov
repnz
mov
or
mov
adc
xchg
addr16
sar
out
bound
lods
dec
sar
cmp
jo
xchg
jo
pop
xchg
arpl
sbb
xor
push
lods
dec
sar
(bad)
fs
ins
test
push
lods
dec
shr
ds
pushf
ins
out
int
lods
jns
dec
pop
xchg
int
repnz
imul
stos
and
pop
sub
xchg
repnz
add
lds
cmp
dec
sbb
ds
cmp
fstp
addr16
test
add
aaa
jl
xor
or
sub
(bad)
enter
stos
xor
or
stos
cmp
add
xor
ins
out
mov
repnz
cmp
hlt
and
shl
leave
leave
int
sbb
mov
imul
shl
or
dec
fidiv
into
inc
cmovo
xor
js
mov
shl
in
push
lods
dec
rcr
and
or
xor
push
int
shl
pop
dec
xlat
push
repnz
pop
neg
dec
pop
ins
or
shl
pop
dec
push
test
push
dec
imul
or
inc
imul
rcr
jmp
push
lods
dec
rcr
xor
nop
jne
ins
repnz
sbb
add
repnz
adc
add
in
popf
ins
or
or
ret
xor
or
xchg
mov
aas
pop
xchg
mov
movs
cmps
mov
scas
repnz
or
shl
mov
inc
or
add
cmp
fst
test
ins
cmc
dec
add
outs
add
push
xor
inc
outs
repnz
in
inc
cli
xchg
dec
inc
push
ins
or
cmp
(bad)
out
ror
sub
mov
out
cmp
push
test
xor
inc
cli
xchg
dec
inc
push
ins
or
mov
xchg
dec
cmp
out
lds
jb
xor
xor
hlt
clc
ja
jg
mov
or
mov
shl
push
call
sbb
jns
ins
or
mov
out
shl
jmp
mov
inc
into
xchg
repz
stc
icebp
ds
xchg
repnz
sub
ds
xor
xor
hlt
clc
hlt
sbb
mov
or
mov
xchg
and
mov
push
test
ins
or
push
dec
xchg
ds
xchg
test
repz
int3
xchg
test
repz
xchg
test
sbb
ds
add
fldenv
ins
into
xchg
repz
sbb
shr
or
cmp
gs
int
sub
out
loope
inc
pop
nop
adc
xor
(bad)
lea
fs
jg
sbb
sub
xchg
or
retf
jae
or
out
iret
mov
or
inc
shl
push
dec
ja
xchg
xor
sti
scas
pop
dec
xlat
out
loope
popa
cmp
outs
pusha
retf
ins
das
mov
xchg
out
ins
cli
movs
into
in
cmp
xchg
sub
fimul
jnp
and
arpl
int3
fsubr
adc
clc
in
cwde
mov
in
div
mov
mov
cmp
ds
clc
int
xor
dec
leave
hlt
push
dec
shl
push
dec
ja
push
lahf
imul
pop
dec
inc
jl
pushf
es
dec
cmp
mov
icebp
adc
ds
clc
int
xor
cli
sub
out
leave
cmp
xchg
and
mov
js
clc
loop
or
repnz
aam
push
sar
xor
into
in
cmp
xor
sti
scas
pop
dec
xlat
cmp
xchg
imul
imul
xor
pop
sub
xchg
repnz
pusha
dec
xchg
pop
into
inc
iret
xchg
repnz
mov
cmp
push
iret
xchg
repnz
test
mov
sub
dec
cmc
xor
sti
scas
pop
dec
xlat
aas
pop
xchg
mov
imul
xor
cmp
pop
pop
ins
rcr
shl
pop
ds
rcr
stc
popf
ins
or
dec
cmc
stos
or
xor
std
sahf
ins
aaa
push
add
call
mov
rol
mov
and
add
or
add
pop
dec
sub
or
inc
push
add
dec
cmc
out
ds
adc
xchg
cdq
ins
or
add
call
xchg
gs
leave
(bad)
loop
adc
retf
inc
adc
test
add
rcr
fstp
pushf
pop
test
ficomp
into
dec
retf
dec
cmc
pop
int
jmp
sub
enter
xchg
pop
cwde
inc
xor
dec
xor
mov
xor
add
dec
ja
add
inc
push
test
mov
or
xor
or
add
sbb
shl
test
mov
shl
jmp
lods
add
cmp
mov
inc
imul
(bad)
or
test
in
xchg
ficomp
cmp
ins
xor
icebp
cmp
xor
xchg
xlat
(bad)
xlat
pop
jle
xor
sub
xor
dec
int
call
xchg
ins
test
sbb
add
or
add
pop
dec
add
int
jo
or
dec
icebp
add
xor
rcl
js
ficom
or
add
jmp
pop
sub
xchg
repnz
add
int
or
in
lods
dec
shl
pop
shl
test
add
xchg
mov
push
pop
fnstsw
cwde
or
shl
jo
xor
and
ins
or
inc
rcr
shl
or
shr
call
cmc
sub
ret
xor
dec
cmp
pushf
pop
dec
inc
mov
js
ins
or
mov
gs
ds
test
in
sbb
xchg
repnz
icebp
out
jo
xor
pop
test
pop
push
dec
xor
xor
shl
test
in
ss
mov
icebp
loope
sbb
xchg
lods
int
xor
stc
int
cdq
shl
test
out
int
jmp
jns
mov
scas
mov
repnz
dec
shl
push
pusha
repnz
dec
shl
ds
out
xor
mov
repnz
sub
repnz
and
xchg
test
ins
xor
icebp
cmp
shr
dec
pop
mov
arpl
or
es
push
or
stos
xor
or
or
(bad)
or
ret
pop
ins
shl
push
ins
xchg
xchg
dec
inc
push
ins
or
stos
xor
pop
cmp
ds
loope
ins
or
shl
or
stos
xor
xor
pop
sub
test
xor
imul
or
shl
jp
add
pop
mov
repnz
int
gs
or
or
ds
xchg
add
bound
enter
dec
xor
inc
aad
icebp
push
or
rcr
mov
or
mov
xchg
pop
sub
repnz
add
add
shl
xor
repnz
aaa
outs
ins
or
jne
xchg
repnz
icebp
loope
and
xchg
repnz
xchg
lods
int
xor
stc
int
inc
dec
ja
add
inc
int
sbb
pop
mov
xchg
repz
xor
xchg
repz
out
ds
or
test
gs
mov
or
xor
aad
shl
mov
xchg
repnz
icebp
pop
aad
icebp
loope
add
xchg
repnz
xchg
lods
int
xor
stc
int
jne
ja
add
cmp
ins
gs
sub
repnz
int
imul
cmp
retf
shl
ds
xchg
xchg
repz
fsubr
dec
or
aas
int
lods
add
cs
xchg
dec
in
cmp
outs
push
rcl
int
repnz
lea
repz
xor
stos
xor
xor
add
bound
add
mov
xchg
test
xor
imul
repnz
int
or
shl
add
(bad)
repnz
int
pop
dec
mov
repnz
int
gs
sub
or
into
test
cmps
ds
xchg
retf
lds
fcom
push
mov
repnz
int
or
shl
or
test
cmps
ds
xchg
add
movs
int
xor
sub
test
cld
int
or
inc
iret
xchg
repz
stos
iret
xchg
repnz
mul
mov
scas
add
(bad)
repnz
int
mov
xchg
repnz
ds
or
sub
std
xor
mov
xchg
or
mov
(bad)
repnz
int
repnz
cwde
xchg
repz
xchg
repnz
push
imul
into
mov
repnz
mov
mov
push
cmp
xchg
mov
inc
ins
or
aas
int
in
aaa
ins
or
shl
aad
jmp
aas
int
xchg
repz
out
ds
mov
or
xor
(bad)
movs
dec
ins
or
aas
int
xchg
repz
out
ds
test
test
shl
test
int
repnz
out
dec
mov
repnz
int
into
inc
xchg
mov
mov
repz
add
ins
or
shl
retf
xchg
repz
xchg
repz
mov
xchg
pop
dec
mov
repnz
int
xchg
repz
out
ds
sub
jmp
pop
test
mov
xchg
pop
dec
or
or
enter
sti
ss
or
aas
int
xchg
repz
out
movs
mov
dec
cmp
xor
repnz
int
into
inc
dec
nop
or
shl
mov
int
repnz
mov
xchg
pop
dec
or
icebp
enter
jnp
ins
or
rol
test
repz
jmp
pop
dec
mov
repnz
int
xchg
int
xor
sbb
mov
add
jmp
mov
sbb
jmp
pop
dec
mov
repnz
int
xchg
int
sub
nop
add
cmp
ins
test
lds
repz
xchg
repz
repnz
mov
xchg
pop
sub
lds
inc
xchg
xor
int
in
xor
xor
sbb
pop
mov
xchg
repz
xchg
pop
test
mov
xchg
pop
sub
lds
dec
jmp
inc
mov
repz
ficom
test
int3
xchg
add
ds
mov
inc
fidivr
mov
shl
test
xchg
repnz
int
loope
mov
ins
or
sub
xchg
repnz
mov
in
cmp
mov
xchg
test
mov
icebp
sar
mov
repz
aad
jmp
aas
int
gs
mov
repnz
int
xchg
int
xor
xor
ja
add
cmp
ins
test
sbb
ds
xchg
pop
dec
mov
repnz
int
xchg
int
popa
dec
ja
add
cmp
ins
mov
repz
addr16
movs
shl
test
xor
mov
xor
aad
jmp
aas
int
mov
mov
repnz
int
xor
ds
sbb
shl
(bad)
fs
xchg
mov
ss
or
jl
xchg
repz
ds
mov
or
xor
test
int
repnz
add
bound
xor
xchg
repz
out
ds
or
test
gs
mov
or
mov
xchg
repnz
add
bound
or
aas
int
mov
mov
in
cmp
mov
xchg
test
mov
icebp
sar
imul
repnz
int
add
or
ds
xchg
or
shl
mov
fst
int3
xchg
in
les
test
jne
mov
int
repnz
fldcw
shl
mov
int
repnz
inc
ret
xor
int
lods
ds
xchg
add
bound
xor
add
bound
add
and
mov
out
lds
jb
xor
xor
hlt
dec
mov
repnz
int
mov
dec
mov
repnz
cmp
inc
retf
ds
xchg
repnz
fidivr
stos
shl
leave
int
scas
fldenv
inc
xchg
repz
or
shl
mov
mov
xchg
mov
xchg
repnz
mov
repnz
int
mov
xchg
repnz
mov
repz
mov
xchg
repnz
mov
in
(bad)
pusha
add
clc
repnz
int
xchg
int
add
aas
int
mov
mov
repnz
int
(bad)
cmp
(bad)
pushf
repnz
int
js
hlt
jmp
or
dec
icebp
out
sub
xchg
repnz
mov
out
mov
int
repnz
inc
loop
repz
out
ds
push
jp
shl
or
adc
mov
out
sbb
xchg
repnz
mov
out
sbb
mov
in
into
push
sub
mov
repnz
int
xchg
int
add
ds
xor
icebp
cmp
repnz
rcl
shl
pop
movs
mov
ins
mov
mov
mov
xchg
mov
mov
stos
dec
cmp
mov
jmp
test
fidivr
leave
(bad)
cli
ds
jo
mov
sub
dec
dec
mov
repnz
div
sub
ds
repnz
dec
and
ins
or
add
mov
sar
in
ss
dec
sbb
mov
pop
cmc
sub
ds
repnz
ins
aaa
pushf
dec
ja
imul
movs
iret
lds
cmp
lea
xor
cmc
ss
dec
cmp
cmp
add
pusha
gs
mov
leave
or
test
pop
ins
rcr
xor
test
xor
mov
sub
dec
cmc
cmp
xchg
xchg
ins
or
xchg
mov
and
cmc
call
shrd
xor
add
xor
dec
leave
inc
push
or
repz
shl
or
inc
xchg
test
mov
or
pop
fcom
int
xchg
test
int
xchg
and
mov
ins
or
xchg
mov
cmp
outs
pusha
mov
outs
jmp
jns
push
rol
test
clc
int
xor
idiv
inc
pusha
repnz
test
add
(bad)
mov
adc
aam
dec
cmp
pop
cmp
fnstcw
cmp
xchg
leave
mov
jge
push
xor
mov
in
retf
sbb
ins
or
sub
jg
rcr
xchg
pushf
and
mov
sub
push
or
cmp
xor
xchg
xlat
sbb
pusha
or
add
mov
dec
adc
aad
ins
mov
repnz
add
mov
retf
shl
or
aas
int
cmp
cs
rol
test
lds
repz
in
popf
into
xchg
repnz
xchg
test
aas
int
mov
data16
or
xchg
into
xchg
repnz
icebp
add
xor
in
xchg
ins
or
aas
int
int
mov
or
xor
xor
bnd
xchg
repz
mov
int
repnz
xchg
pop
xor
add
xchg
xor
mov
mov
xor
or
xor
int
repnz
ja
repnz
lods
jns
int
aad
int3
xchg
in
lods
ins
or
dec
icebp
pop
int
daa
imul
mov
out
dec
ja
test
xor
xor
push
into
xchg
repnz
mov
repnz
int
rcr
mov
xchg
cwde
push
into
xchg
repnz
ja
add
inc
jo
je
xchg
repz
xchg
shl
mov
imul
shl
repnz
mov
sbb
xchg
repz
out
int
mov
xchg
repz
fimul
xchg
xchg
repz
mov
pop
ins
bnd
xchg
repz
test
test
xchg
mov
(bad)
int
jp
cmp
ds
xchg
xchg
mov
inc
aam
stc
out
int
mov
xchg
repz
lds
int3
xchg
repnz
(bad)
xchg
repz
cwde
xchg
mov
fistp
xor
int
mov
xchg
repz
stc
cmps
mov
dec
cmp
mov
into
cli
jnp
or
sar
pop
shl
int
mov
nop
repz
xchg
pop
stos
xor
mov
pop
ins
repnz
xchg
cwde
push
into
xchg
repnz
ja
test
xor
ds
xchg
or
dec
icebp
loope
popa
int3
xchg
repnz
mov
xchg
pop
stos
xor
repnz
enter
in
cmp
jmp
mov
repz
sbb
enter
dec
mov
repz
int
or
sbb
pop
mov
out
int
mov
xchg
repz
xchg
aas
int3
xchg
repnz
(bad)
xchg
repz
xchg
jno
xor
repnz
sub
dec
xor
dec
cmp
mov
xchg
test
mov
cmp
cmp
mov
or
aas
int
add
bound
or
push
mov
sub
inc
xchg
lods
repnz
int
test
lds
repz
xchg
repz
in
shr
mov
xchg
mov
xchg
add
ds
mov
xchg
repnz
pop
ins
bnd
xchg
repz
test
retf
add
xchg
repnz
(bad)
lods
repnz
int
push
shl
or
repnz
dec
mov
repnz
int
or
sbb
mov
or
in
or
xchg
repnz
int
cwde
or
ja
in
int3
xchg
bnd
jl
rol
test
repz
out
dec
ja
mov
ins
or
adc
in
inc
into
xchg
repnz
xor
mov
mov
xchg
pop
stos
xor
mov
retf
xor
into
in
shr
mov
xchg
mov
xchg
sar
int3
xchg
pop
dec
mov
repnz
int
add
bound
or
push
mov
repz
cwde
xchg
mov
popf
sub
xor
int
mov
nop
repz
ins
add
ds
mov
mov
xchg
pop
ds
repz
int
mov
xchg
repnz
mov
xchg
pop
stos
xor
jno
int3
xchg
test
cs
rcr
inc
stos
xchg
repz
cwde
sbb
or
mov
xchg
repnz
icebp
add
shl
sar
int3
xchg
pop
sub
ins
or
xor
or
aas
int
in
lods
ins
or
aas
int
int
mov
in
into
pop
jnp
or
shl
add
bound
repnz
nop
in
enter
mov
icebp
aas
int
int
mov
push
or
sar
pop
stos
int
js
fisub
idiv
int
or
sar
pop
stos
int
mov
sub
test
xchg
loopne
xor
inc
mov
repz
or
push
outs
or
and
cs
aas
int
in
fcom
xor
int
or
shl
or
rcr
xchg
cmp
and
add
int
or
ret
xor
ficom
or
cmp
ins
lea
cmp
shl
or
rcr
shl
mov
int
std
ds
xchg
bnd
xchg
repz
hlt
ds
or
in
popf
dec
sar
pop
sub
test
cld
int
or
shl
addr16
pop
mov
xor
mov
xchg
repnz
(bad)
in
int
leave
int
xchg
repnz
adc
jo
add
bound
add
call
shr
into
ds
repnz
int
mov
xor
xchg
sub
aas
int
out
mov
xchg
lea
cwde
repnz
int
js
mov
xchg
push
jb
repz
iret
in
mov
xchg
repnz
mov
into
xchg
repnz
icebp
aas
int
mov
(bad)
pushf
repnz
int
fsubr
or
dec
cmp
mov
or
(bad)
xchg
repz
mov
xchg
repnz
pop
mov
js
fisubr
leave
sar
push
icebp
aas
int
int3
inc
cli
xchg
dec
inc
push
ins
or
std
into
xchg
repnz
dec
push
dec
dec
fs
xor
mov
repnz
int
out
or
xor
xor
add
bound
add
xor
pop
ins
gs
cs
aas
int
in
ficom
retf
inc
aaa
(bad)
repz
int
mov
repz
icebp
aas
int
mov
(bad)
xchg
repz
add
sub
aas
int
mov
(bad)
xchg
repz
xchg
mov
(bad)
pushf
repnz
int
fsubr
or
dec
cmp
mov
xchg
pop
dec
mov
repz
int
gs
cs
cmp
jl
add
push
or
dec
mov
icebp
aas
int
int3
inc
cli
xchg
dec
inc
push
ins
or
or
push
dec
dec
test
add
ds
xchg
in
movs
ins
or
xor
inc
cmp
xchg
test
xor
dec
repz
lds
jb
xor
xor
hlt
dec
ja
bnd
xchg
repz
aad
shl
mov
mov
icebp
aas
int
into
dec
mov
repnz
int
push
call
loope
xor
gs
leave
(bad)
std
and
in
ror
retf
clc
int
xor
cli
bound
ins
or
xchg
mov
cmp
inc
into
nop
repnz
fst
or
ret
hlt
call
repnz
pop
test
mov
xchg
pop
sub
lock
add
add
push
cmovl
add
cmp
popf
test
jbe
push
icebp
ds
add
ds
mov
iret
xchg
repnz
pop
scas
cld
xor
mov
iret
xchg
repnz
fcmovbe
xchg
shl
leave
cmc
mov
xchg
mov
int
(bad)
std
xor
mov
or
push
stos
dec
aas
xor
cmp
scas
push
aam
lods
dec
sar
xchg
xchg
lock
or
push
xchg
dec
aas
cmp
fistp
clc
loop
fadd
ja
shl
mov
xor
add
repnz
retf
rol
dec
sub
in
lock
ds
clc
int
xor
push
or
fs
sub
mov
and
sahf
mov
xchg
mov
ins
repnz
mov
jmp
ja
test
pop
ins
add
sub
ins
mov
xor
cld
xor
push
push
xor
mov
movs
loope
ins
gs
cs
shl
dec
cmp
jo
or
xor
mov
push
or
xor
pop
jnp
xor
ins
rcr
xchg
into
cmp
sbb
int
add
aam
sar
dec
cli
seto
xor
loope
pop
ins
mov
xor
xor
mov
retf
shr
or
cmp
cmp
test
xlat
out
xor
mov
arpl
shl
dec
and
cmps
lods
dec
rcr
rcr
rcr
shl
int
inc
fs
movs
ins
or
sbb
mov
add
repnz
test
retf
sar
ins
or
push
movs
ins
or
cmp
jmp
sub
fs
js
fisubr
or
cs
shl
push
shl
xchg
xchg
dec
inc
push
ins
or
cmps
mov
clc
int
xor
aad
shl
dec
adc
stos
dec
sbb
ins
or
shl
or
and
daa
xchg
in
dec
or
xchg
pop
ins
xchg
sbb
sub
mov
ds
sbb
dec
jmp
and
push
xchg
out
int
mov
inc
aad
icebp
xchg
dec
and
nop
xor
rcr
xchg
ds
clc
int
xor
aad
jmp
xchg
int
add
xchg
push
test
ins
std
xchg
fidiv
leave
int
fisttp
xor
icebp
dec
ja
push
test
stos
or
aas
xchg
dec
cmp
mov
outs
dec
cmp
int
icebp
lock
pop
dec
ja
add
mov
xchg
and
in
stc
jne
jo
inc
test
int
stc
into
test
sbb
ja
add
xchg
repnz
cdq
add
sar
int
icebp
dec
ja
or
bound
fwait
shl
in
cmps
ins
or
shl
js
fidivr
cdq
shl
push
call
pop
xchg
lea
pop
fadd
ins
or
xor
cmc
lock
dec
ja
pop
test
pop
ins
repnz
xchg
js
ficom
call
ins
repnz
push
or
xor
icebp
sub
or
sub
or
shl
jmp
movs
into
xchg
mov
cmp
dec
retf
dec
ja
test
int
cdq
add
test
add
xchg
pop
push
or
ds
pusha
repnz
test
xor
es
js
mov
ins
repnz
xchg
js
fisub
shl
xlat
mov
mov
xchg
js
fimul
dec
cmp
pusha
mov
inc
ins
or
sub
icebp
cmp
xor
shl
jmp
ss
dec
sub
cmps
ins
or
call
and
dec
xor
in
cmps
ins
or
xor
add
repnz
mul
ds
or
shl
cmc
ror
retf
mov
xchg
fimul
shl
dec
and
dec
ins
or
shl
xchg
std
or
stos
aaa
cmp
fldenv
aam
jecxz
ins
cli
es
push
add
pop
xchg
fidivr
shl
jo
popa
sbb
dec
popf
jns
ja
dec
push
xor
in
cmps
ins
or
push
xor
dec
push
push
outs
jg
mov
enter
shl
or
ret
xor
push
stc
or
shl
or
xor
shl
xor
cmps
lods
dec
sar
xor
ins
or
sub
sub
cld
int3
ins
or
test
inc
dec
sbb
xor
sbb
ins
or
test
push
pop
shl
add
or
jmp
or
and
in
sbb
ins
test
sub
inc
dec
mov
mov
push
seta
pop
cdq
shl
retf
dec
retf
dec
cmc
in
adc
adc
or
test
ins
out
pop
outs
pop
sub
clc
or
test
ins
xchg
in
loop
inc
ins
or
adc
xchg
stos
xor
in
mov
in
dec
adc
out
adc
gs
mov
pop
popf
xor
mov
test
push
xor
ret
inc
adc
or
mov
jmp
pop
sub
dec
inc
cmp
or
cmp
ins
or
ds
pop
sub
or
xchg
test
xor
idiv
mov
test
ins
mov
sub
ret
cli
es
xchg
test
mov
vaddsd
(bad)
adc
ins
repnz
out
sub
sub
xchg
mov
mov
pusha
out
and
cmp
xchg
sbb
leave
xchg
pop
outs
or
jge
xchg
repnz
pop
clc
cld
xor
or
sar
or
inc
mov
addr16
jp
shl
dec
add
pop
stos
add
sahf
shl
js
fisub
shl
or
shl
pop
sub
lods
jns
pop
ins
rcr
shl
js
ficom
sahf
shl
cmc
lock
stos
xor
or
ret
ins
or
push
xor
test
mov
xchg
cmp
xchg
or
shl
push
lahf
imul
add
cmc
push
or
cs
rcr
xor
pop
xor
shl
lea
les
es
xor
ret
cs
rcr
xor
or
xor
in
leave
xchg
repnz
clc
int
xor
xor
gs
sub
or
cmp
xchg
mov
xlat
das
or
xor
in
xor
gs
cs
inc
(bad)
idiv
int
leave
sub
pop
jle
sub
shl
jmp
xor
ds
cmc
lock
test
pop
or
adc
pop
pushf
mov
push
xor
icebp
cmp
cmp
test
rcr
fst
test
add
add
lds
xchg
mov
sbb
int
stos
out
xor
lods
dec
shl
sti
les
ins
add
pusha
mov
push
sub
shl
retf
test
ins
add
js
daa
xor
add
aas
cmp
xchg
or
ds
xor
xor
lods
dec
rcr
retf
mov
sub
sub
jo
shl
int
ins
aaa
les
addr16
jns
outs
or
fcmovu
add
aas
pop
xchg
mov
jl
call
fnstcw
inc
shl
into
jb
ins
or
push
xor
xchg
nop
repz
mov
dec
or
aas
int
dec
mov
out
cmp
mov
repz
mov
xor
icebp
aas
int
dec
mov
out
cmp
mov
repz
mov
ds
or
jo
test
sbb
cmp
(bad)
cwde
icebp
ds
jle
mov
xchg
repnz
(bad)
nop
repnz
xchg
repnz
(bad)
cwde
icebp
ds
jle
mov
xchg
repnz
(bad)
nop
repnz
xchg
repnz
xchg
xchg
lock
test
lds
repz
xchg
bnd
push
dec
cmps
xchg
lock
mov
iret
xchg
repnz
mov
icebp
cmp
xchg
mov
bnd
push
dec
cmps
xchg
lock
mov
iret
xchg
repnz
xchg
icebp
cmp
xchg
repnz
lods
dec
sar
mov
repnz
repnz
xor
rol
shl
mov
into
xchg
repnz
mov
xchg
pop
dec
mov
lock
add
bound
movaps
or
aas
int
pop
xchg
fimul
int
mov
or
cmp
xchg
repnz
gs
dec
xor
cmp
ins
rcr
shl
mov
into
xchg
repnz
test
dec
xor
ret
ds
repnz
cmp
add
shl
sub
imul
jl
nop
repnz
push
xchg
fcmove
xchg
xor
aad
jmp
shl
xchg
repnz
call
repnz
or
jo
shl
sub
xchg
repnz
gs
dec
xor
int
adc
xor
loope
xor
mov
xchg
test
add
dec
mov
repz
pop
sub
lods
add
ins
or
cmp
xchg
pop
xchg
fisub
shl
int
mov
or
test
mov
xchg
pop
xchg
ficomp
xchg
xor
mov
into
xchg
repnz
retf
frstor
or
xor
ja
or
and
xchg
repnz
icebp
pop
int
out
or
cmp
sub
or
shl
into
xchg
xor
or
shl
repnz
lods
dec
sar
retf
inc
aaa
test
aas
int
test
add
je
nop
repnz
xchg
pop
xchg
fidivr
shl
cmc
ds
jl
sub
scas
out
(bad)
xor
fld
add
bound
in
mov
sbb
ds
push
cmp
xor
mov
xchg
test
test
ins
cmp
jb
xor
fwait
outs
shl
mov
test
dec
xor
inc
jge
sub
mov
sbb
xchg
sub
nop
repnz
and
xchg
test
ins
xor
icebp
cmp
gs
leave
lea
int
in
loop
dec
ins
or
xor
jae
sbb
inc
dec
pusha
or
stos
cmp
mov
test
ins
out
pop
ins
addr16
pop
mov
jnp
ficom
shl
jno
xor
mov
pop
int
inc
xchg
or
repz
rol
test
push
dec
aaa
aaa
in
cli
daa
pop
ins
or
test
stos
dec
cmp
stos
dec
cmp
aam
lds
ins
cli
es
push
or
out
int
(bad)
dec
cmp
or
xor
ds
mov
sub
dec
je
test
loope
aaa
bound
test
xor
loop
jb
or
or
cmp
popa
jns
cmp
xchg
test
int
or
jo
add
pusha
pop
ds
fs
int
repnz
mul
fldenv
les
lods
dec
sar
push
pushf
icebp
cmp
mov
cmp
imul
ins
repnz
lods
dec
shl
test
mov
dec
xchg
ficomp
dec
cmp
jo
add
inc
dec
repnz
lods
dec
sar
shl
ds
mov
adc
repnz
mov
jb
xchg
mov
xchg
into
test
dec
into
test
dec
into
test
fmulp
test
add
sub
jbe
lods
in
leave
cmp
out
sar
mov
retf
ins
or
xor
mov
xchg
inc
arpl
enter
lahf
dec
out
retf
lods
push
lahf
imul
xchg
cmp
int
or
jo
pop
sub
xchg
repnz
stos
xor
movaps
jmp
mov
or
inc
fld
adc
xor
xchg
in
mov
or
pop
mov
or
dec
mov
or
(bad)
or
shl
sbb
shl
pop
ds
or
inc
xor
inc
dec
repnz
lods
dec
sar
icebp
dec
cmc
push
or
fiadd
repz
leave
leave
mov
stos
cmp
jb
adc
aaa
push
retf
ins
or
mov
xchg
repnz
mul
ins
xor
icebp
cmp
xor
gs
leave
lea
test
or
mov
repz
test
lds
repnz
lods
dec
shl
or
shl
mov
int3
xchg
repnz
repnz
icebp
aas
int
xchg
xor
stc
aas
int
or
xor
retf
ds
mov
pop
ins
sar
int
pop
stos
xor
les
lods
dec
shl
add
bound
mov
xor
mov
push
or
xor
xchg
repnz
int
or
adc
or
div
ins
out
int
or
jo
test
add
shl
or
shl
add
lahf
repz
add
arpl
inc
ficom
push
lahf
imul
or
shl
dec
outs
fs
call
xor
in
dec
cmp
jb
shl
repnz
lods
dec
shl
aas
int
test
mov
xchg
test
sbb
in
int3
xchg
repnz
mul
mov
das
or
push
mov
xchg
fcmovb
repz
xchg
jae
ds
mov
sub
dec
lock
iret
dec
addr16
rcr
shl
mov
pop
or
popa
jmp
dec
sub
or
dec
pop
pusha
int3
xor
or
xor
int
or
jo
mov
aas
ins
or
test
in
cmp
dec
aas
int
pop
sub
xchg
repnz
aas
in
int3
xchg
repnz
lock
xor
or
ds
leave
sar
in
jbe
xor
push
inc
mov
or
rcr
pop
sub
repnz
add
shl
repnz
lods
dec
sar
iret
dec
addr16
xchg
ss
or
xchg
fidivr
ds
leave
leave
add
dec
ja
test
add
mov
ret
mov
adc
inc
pop
xchg
adc
xor
xchg
xchg
repnz
dec
popa
sub
leave
cmp
in
xor
dec
imul
mov
xor
or
sub
repnz
cmp
sub
out
xor
xlat
stos
dec
fnstenv
mov
aas
in
iret
xchg
repnz
lock
mov
test
int
mov
popa
sbb
les
lods
dec
shl
mov
push
mov
or
xacquire
into
test
dec
sahf
ins
aaa
les
addr16
nop
cmp
or
ror
or
jo
mov
xor
or
add
jl
xor
xor
rol
mov
test
xor
cmp
int
add
shl
repnz
test
ins
test
sbb
shl
or
inc
xor
adc
imul
cmps
ss
cmp
fldenv
stos
or
aad
dec
cmp
sti
scas
pop
dec
xlat
cmp
xchg
inc
test
xor
cmp
xchg
push
ds
push
std
lock
cmps
cmc
jmp
shl
xadd
test
inc
xor
push
in
inc
xor
jne
test
ins
or
xor
lods
dec
rcr
cmp
call
repnz
test
inc
dec
add
adc
inc
adc
popf
test
int
mov
fld
std
lock
stos
aaa
xchg
jp
fisubr
int
add
or
dec
hlt
arpl
mov
push
push
xchg
fisubr
ds
leave
ror
fwait
jmp
ja
test
add
ins
pop
ins
or
xor
mov
mov
push
push
xchg
fidivr
int
leave
shl
sub
shl
ins
or
dec
retf
shl
pop
ds
fs
mov
or
cmp
sbb
dec
ret
dec
hlt
xchg
or
repz
shl
pop
sub
scas
add
aas
bnd
ins
or
sub
test
lock
ret
dec
ja
test
ins
xor
icebp
cmp
cmp
dec
retf
dec
cmc
aam
fbstp
ins
cli
es
out
leave
test
cmp
xchg
test
mov
push
retf
ins
or
ds
leave
leave
mov
in
jae
aaa
sbb
shl
dec
xor
idiv
int
lea
push
dec
ds
and
ret
ds
push
or
ds
test
mov
or
setae
(bad)
or
dec
cmc
cmp
adc
cmp
ds
or
pusha
(bad)
xchg
repnz
mul
mov
test
inc
xor
jo
or
xor
xor
and
ds
add
inc
jno
mov
xchg
jnp
test
int
mov
fisubr
cmc
call
fimul
ds
cmp
fldcw
push
cdq
inc
or
or
push
mov
lea
cmc
call
aaa
push
sub
pop
ins
rcr
shl
dec
rcl
xor
add
dec
mov
or
jbe
ror
xor
dec
lock
ja
pop
ds
push
cmp
xor
int
or
ins
in
mov
or
pop
aaa
fs
xor
test
lds
retf
sub
cmp
aaa
push
cmc
ss
dec
and
cmp
cmc
lock
cmps
cmc
sub
shl
adc
test
enter
out
xor
ss
add
test
repz
xor
ror
cld
(bad)
(bad)
xor
add
cwde
mov
popa
xor
retf
dec
cmc
stos
dec
sub
ins
or
xchg
cmp
lods
test
lds
dec
fld
ss
rcr
jb
xor
retf
inc
lds
pop
shl
repz
fdiv
les
lods
dec
sar
test
cmc
aaa
push
mov
xor
ss
adc
add
xchg
add
js
icebp
loop
or
lds
ins
fld
or
or
sub
scas
test
add
inc
xor
int
repnz
ins
aaa
les
ss
pop
dec
xlat
out
loope
cmp
test
shl
fwait
shl
push
pop
ins
or
cmp
lods
dec
shl
imul
imul
dec
shl
add
stos
xor
shl
or
shl
int3
xor
loop
adc
ja
pop
stos
xor
or
rcr
rcr
mov
xor
retf
dec
retf
dec
cmc
cmp
in
mov
or
xor
cmc
call
xor
inc
pcmpgtb
xor
jns
int
or
jo
test
lds
retf
imul
dec
xlat
out
loope
popa
cmp
out
je
test
xor
add
test
mov
or
inc
ret
vmwrite
xor
sub
sub
test
inc
pop
mov
xor
dec
out
shl
or
shl
in
dec
ja
test
cmc
imul
shl
test
je
or
sar
or
inc
xor
int
or
ret
xor
mov
int3
xor
add
sub
xadd
xchg
or
cs
loope
stc
int
mov
or
aaa
enter
test
xor
cmps
jecxz
shl
stc
cmp
ins
sti
les
jmp
dec
out
shl
test
(bad)
int
test
xor
or
shl
or
sub
or
add
sti
les
sbb
lock
xor
test
or
dec
jae
sbb
rcl
cmp
int
sti
les
sbb
lock
ret
test
xor
dec
jae
or
and
cdq
dec
jae
add
sub
outs
or
or
jecxz
sar
or
imul
imul
sub
outs
or
or
jecxz
shl
or
xor
mov
cdq
dec
jae
lgs
outs
or
or
jecxz
shl
or
mov
or
inc
ret
pop
sub
xor
repnz
imul
shl
dec
sub
ins
or
xor
or
sub
or
test
in
inc
aas
clc
add
ins
or
shl
xchg
xor
fld
xor
mov
or
xor
leave
shl
lods
mov
aaa
enter
test
les
imul
shl
mov
xchg
repz
shl
popf
shl
cmp
(bad)
add
sub
jecxz
xor
je
or
sar
or
inc
retf
(bad)
int
mov
imul
or
ror
push
xor
jb
sub
dec
shl
dec
sub
xchg
or
cs
dec
jae
or
xchg
repz
rcr
repnz
dec
pop
shl
in
dec
ja
test
mov
cdq
dec
jae
dec
sub
pop
int
outs
ins
or
xchg
xor
cmps
lods
dec
rol
cdq
dec
jae
dec
into
mov
or
xchg
cs
dec
repz
rcl
or
ss
cs
test
arpl
shl
add
ins
or
add
dec
shl
add
fwait
xor
ins
or
inc
jae
or
rcl
dec
shl
lfs
in
jo
xor
pop
inc
dec
call
dec
sub
lea
popa
cdq
dec
jae
lea
ins
lds
in
xchg
sub
jns
jae
mov
xor
adc
les
lea
imul
inc
ret
popf
sbb
xor
sub
dec
sub
test
je
sbb
dec
sub
or
retf
ror
in
jae
lods
and
or
xor
(bad)
dec
cli
fwait
in
dec
ja
test
mov
in
jae
or
xchg
ins
xchg
mov
cs
xor
test
(bad)
ficom
dec
rol
les
pushf
and
xchg
ins
jnp
xor
sbb
movs
test
ins
aaa
les
addr16
nop
cmp
inc
cmc
lds
xor
or
rcr
jno
xor
retf
test
test
ins
scas
jge
cs
shl
mov
jo
pop
sub
or
xor
rol
ins
pop
sub
or
xor
(bad)
pop
jo
pop
sub
or
xor
cmc
ss
dec
cmp
hlt
cs
shl
mov
jo
push
lahf
sti
scas
pop
dec
xlat
in
loope
xor
cmp
dec
jmp
add
imul
dec
ja
pop
ds
shr
sub
ins
or
and
out
push
imul
ins
mov
push
ins
or
push
mov
ins
mov
lods
dec
shl
and
mov
ins
retf
ins
or
sbb
mov
outs
xor
add
stos
dec
sar
int
xor
or
and
stos
dec
jne
ins
or
sar
test
loope
jge
sbb
js
ins
or
test
cmp
shl
or
ds
in
add
ins
cli
and
loope
pop
bound
or
stos
xor
or
ds
mov
push
dec
ins
or
ds
enter
cmp
rcr
jae
xor
or
popa
pop
ins
rcr
(bad)
int
jmp
shl
repnz
test
mov
cmps
lods
dec
sar
mov
ds
in
add
pusha
mov
inc
ins
or
inc
mov
movs
into
xchg
mov
stos
dec
cmp
mov
icebp
(bad)
or
or
test
out
sar
cwde
or
sub
ss
or
cmp
dec
sub
js
pop
ins
add
add
xor
dec
xor
into
in
and
push
mov
sti
scas
pop
dec
xlat
cmp
dec
retf
dec
cmc
xchg
or
cs
ds
popf
dec
jae
mov
pop
es
xchg
mov
aas
pop
xchg
mov
pusha
repnz
xchg
add
push
xor
xor
push
arpl
xor
sbb
test
ins
or
test
ins
or
test
ins
or
shl
dec
sar
js
dec
es
retf
test
ins
add
xchg
add
imul
ja
push
xor
cmp
ins
test
js
mov
into
mov
or
inc
fsubr
ja
jp
add
test
mov
push
into
test
clc
lock
retf
lds
test
into
test
repnz
repnz
xor
in
dec
ins
or
stos
loopne
adc
push
les
jno
or
inc
cli
xchg
xchg
ins
test
sub
inc
fisubr
test
out
sar
xchg
mov
ss
xor
xor
adc
test
pop
int
mov
or
inc
arpl
test
repnz
clc
int
xor
xor
sbb
retf
std
xor
js
mov
in
xor
sbb
retf
ret
or
inc
pop
test
mov
or
test
std
pop
sbb
cld
mov
inc
test
mov
or
push
mov
in
ret
adc
out
int
mov
ins
or
mov
in
mov
xor
push
push
mov
in
inc
fisubr
std
xor
js
mov
arpl
shl
jns
jne
and
xchg
xchg
ins
test
mov
sub
in
cmp
outs
or
retf
lds
imul
or
js
mov
push
mov
in
inc
fisubr
std
xor
js
mov
in
xor
xor
ds
retf
lds
push
jns
setb
cld
int
or
mov
addr16
xchg
and
cmp
jns
shl
dec
inc
int
or
xor
jbe
xchg
repnz
ins
aaa
les
addr16
inc
fisub
xchg
gs
or
cs
fld
xchg
out
mov
xor
inc
gs
inc
int
push
shl
cld
inc
int
push
shl
pop
xchg
outs
or
sbb
test
retf
int
cdq
add
add
jl
and
out
aam
adc
mov
cmp
mov
sub
repnz
into
test
cld
fisubr
inc
dec
xor
xor
adc
push
dec
jmp
dec
es
test
int
mov
ins
xor
into
push
in
adc
push
or
xor
dec
cmp
mov
or
mov
jb
dec
addr16
test
xor
mov
ins
mov
aaa
push
xchg
xchg
test
xor
or
xor
cmp
push
adc
mov
xchg
or
cs
cmp
mov
dec
cmp
imul
ss
or
xor
cmp
mov
ds
jns
or
in
into
xchg
repnz
mul
lahf
imul
or
shl
sub
xchg
repnz
jmp
or
ror
or
pop
mov
sar
int
retf
inc
rol
push
repnz
ds
js
cmp
xchg
repnz
push
imul
mov
in
mov
in
xchg
repnz
ja
lahf
loop
int
xor
ret
shl
cvtpi2ps
push
rol
pop
int
or
movs
dec
shl
mov
ins
xchg
repnz
sub
(bad)
cs
or
add
pop
movs
dec
shl
ret
mov
xchg
repnz
daa
mov
mov
ins
xchg
repnz
sub
loop
int
add
lahf
loop
int
int
mov
or
cmp
xchg
retf
inc
rol
push
rol
inc
push
jns
mov
mov
or
xor
push
rol
dec
es
inc
jae
test
repnz
cdq
add
lea
repnz
push
xor
add
aad
int
repnz
stc
fstp
int
test
xrelease
add
jp
sbb
ins
or
xor
int
sub
xor
popa
test
mov
or
aam
test
xchg
loop
int
mov
xor
or
stc
cs
jnp
mov
xchg
pop
sub
or
add
mov
repnz
gs
or
ds
mov
sub
test
dec
ja
add
inc
push
mov
repnz
nop
inc
in
xchg
repnz
repnz
call
mov
ret
xchg
mov
jmp
or
mov
fst
mov
xor
rol
ds
or
sbb
ins
sbb
inc
in
xchg
repnz
shl
or
shl
mov
ror
xchg
repnz
mov
loope
int
or
inc
mov
xchg
repnz
mov
mov
repnz
or
cs
ds
sub
xor
xor
test
(bad)
cs
int3
and
out
aam
adc
stc
stc
cs
mov
repnz
cwde
xor
shr
sbb
test
add
outs
push
mov
out
sar
xchg
repnz
cmps
cwde
loop
int
out
ret
mov
lods
in
ret
xor
icebp
sar
pop
ret
int
stc
cs
mov
repnz
rol
les
shr
push
int
or
or
in
inc
ins
or
ds
iret
ret
xor
xor
scas
mov
ds
jne
xor
mov
xchg
repnz
mov
sar
int
cwde
pop
in
xchg
repnz
lock
ret
mov
xchg
xchg
repnz
xchg
push
ret
mov
xchg
test
repnz
xchg
test
repnz
jo
inc
mov
mov
sub
jmp
xor
mov
xchg
repnz
xchg
or
out
mov
ds
out
push
int
or
shl
sar
int3
sub
xchg
xacquire
xchg
pop
popa
or
ins
in
xchg
repnz
cs
cs
int3
and
out
sbb
mov
in
aam
in
dec
sar
repnz
outs
xchg
daa
pushf
jo
xor
cwde
xor
xor
pusha
test
xor
xor
inc
push
ins
or
sar
xchg
repnz
ins
or
mov
push
ins
or
shl
mov
imul
int
dec
ret
ss
and
mov
sar
int
mov
repnz
out
and
ret
stc
xor
and
ret
mov
or
inc
fisubr
stc
xor
sbb
out
in
mov
or
inc
fisubr
stc
xor
add
fldenv
dec
sar
repnz
outs
test
enter
in
mov
xchg
repnz
or
lds
ins
or
ds
jmp
out
mov
jmp
or
sbb
cli
(bad)
int
in
lahf
iret
sar
int
add
iret
sar
int
out
ret
mov
xchg
repnz
xor
ins
or
jmp
xor
inc
jb
std
movq
aad
push
xor
xor
inc
data16
std
punpckhwd
ret
(bad)
jmp
add
dec
leave
lea
fimul
xchg
int
rcr
int
bnd
mov
ficomp
hlt
ds
leave
int
shr
push
int
or
xor
mov
xchg
int3
and
in
add
outs
int3
and
outs
inc
cmp
in
xchg
repnz
ss
inc
mov
cs
or
adc
imul
inc
mov
loop
int
add
lahf
loop
int
int
mov
or
cmp
xchg
push
lahf
imul
dec
leave
push
in
leave
lea
loop
inc
ins
or
xor
mov
aad
pop
or
inc
sub
or
into
test
add
in
jl
xor
repnz
fisttp
pop
lods
sbb
imul
mov
arpl
aad
dec
or
inc
sub
cli
es
xor
add
call
test
or
outs
jne
clc
sbb
aad
dec
cmp
lods
dec
sar
sbb
push
imul
mov
ins
or
les
fisttp
pop
lods
sbb
imul
test
pop
int
cmc
push
or
sub
pop
int
mov
or
inc
sub
or
mov
cmp
mov
sub
out
xchg
cli
es
xchg
or
cs
xor
jns
mov
shl
jnp
retf
dec
cmc
or
sub
aaa
lods
lods
xor
test
xor
shl
or
rcr
jle
xor
leave
int
sub
xchg
pop
ins
rcr
xor
test
xor
mov
or
rol
test
test
mov
ins
push
inc
shrd
int
cdq
add
add
lods
lods
xor
les
addr16
inc
fidiv
mov
cdq
jno
retf
mov
ins
or
xor
repnz
js
shl
jmp
jl
xor
js
mov
or
inc
sub
repnz
pushf
cli
daa
mov
aam
shl
cli
es
imul
jns
ins
or
test
xchg
cmp
sbb
push
shl
sbb
xor
mov
imul
dec
ret
dec
hlt
aam
shl
cli
es
imul
into
mov
repnz
ffree
xor
pop
jl
xor
push
add
jl
or
xor
mov
in
cmps
dec
shl
sti
adc
xor
or
ror
adc
in
ins
or
xor
push
or
cmp
cmp
dec
retf
dec
cmc
in
cli
in
inc
ins
or
xor
or
in
or
xor
cmc
lock
cmps
cmc
sub
ret
xor
(bad)
fsubrp
dec
shl
stos
xor
push
in
das
mov
std
shl
sar
xchg
int
or
jo
in
pop
ins
or
ror
or
jo
in
pop
ins
or
add
retf
(bad)
repnz
dec
shl
loop
xor
mov
test
int
in
xor
aaa
lods
lods
xor
retf
jl
shl
loop
add
aaa
clc
int
xor
dec
sub
dec
sub
clc
cs
sar
jmp
cmc
sub
shl
sub
test
rep
bnd
std
aaa
jl
xor
js
mov
or
inc
sub
mov
push
cmp
aas
cmp
xchg
imul
mov
rep
inc
jge
sub
or
es
xchg
stos
bnd
cmc
aaa
jl
xor
fsubrp
xor
mov
or
adc
sbb
inc
sub
int
xor
dec
and
or
stos
bnd
lds
jl
xor
sbb
or
sub
test
int
repnz
(bad)
push
call
loope
popa
cmp
inc
jl
ds
add
cmc
shr
shl
or
cs
int
sub
shl
leave
int
mov
jmp
sub
add
or
xor
xor
hlt
xchg
mov
data16
xor
cmc
call
xor
xor
add
repnz
mul
add
xchg
repnz
pop
jns
xchg
repnz
or
xor
jo
xor
jg
xor
xor
add
repnz
mul
sbb
mov
cmp
add
pushf
xor
retf
dec
ja
test
jno
retf
ins
or
test
loope
fnstenv
js
dec
es
ds
add
xchg
mov
ins
adc
inc
cmc
fcomp
xor
or
repz
dec
shl
int
mov
mov
or
test
ins
or
test
loope
fnstenv
out
int
js
dec
es
ds
add
xchg
mov
ins
adc
dec
retf
dec
cmc
push
or
nop
sahf
dec
shl
int
mov
mov
sub
inc
push
push
mov
or
mov
xchg
or
cs
xor
pop
sub
repnz
add
or
int3
push
repnz
mov
bsf
out
lds
(bad)
or
cli
jne
or
pop
ss
into
test
xchg
cld
int
or
jbe
hlt
add
add
push
mov
sub
push
xor
adc
bound
arpl
xor
leave
int
fisttp
hlt
push
and
mov
lods
dec
shl
xor
mov
stos
add
inc
popa
mov
int
repnz
in
call
aaa
clc
int
xor
dec
int
ins
xchg
ins
xor
icebp
cmp
xor
xchg
xlat
adc
repz
test
idiv
mov
lods
dec
sar
imul
sahf
repnz
ins
or
dec
mov
idiv
int
into
dec
(bad)
fdiv
cmp
loope
enter
js
ins
or
push
mov
repnz
int
or
cmp
xor
aad
jmp
cmp
cmp
inc
ror
stos
mov
int
repnz
or
rol
test
idiv
mov
xchg
repz
cmps
ss
xchg
or
add
addr16
pusha
shl
rcr
shl
mov
int
repnz
mov
test
ins
test
repz
mov
leave
xchg
repnz
(bad)
xchg
repnz
int
js
mov
sub
xchg
fisubr
addr16
shl
aad
jmp
aas
int
add
or
cmp
xchg
xor
push
inc
out
ins
jns
cvtpi2ps
shl
sbb
add
pusha
pop
sub
push
or
ror
cdq
add
xchg
arpl
inc
dec
jl
mov
loope
push
cli
xchg
dec
inc
push
ins
or
cmp
xchg
bnd
push
or
inc
mov
jmp
test
int
cmc
ds
xchg
add
ds
mov
int
repnz
fidivr
leave
int
jmp
retf
inc
aaa
xchg
repnz
int
in
ss
or
ds
xchg
or
shl
xor
nop
repnz
cli
xchg
dec
inc
push
ins
or
cmp
xchg
repnz
jmp
cmp
xchg
repnz
mov
repnz
int
repz
add
int
repnz
mov
repnz
xchg
or
shl
adc
test
repz
lock
cwde
cmp
xchg
repnz
cmps
jns
ds
xchg
test
lahf
repnz
int3
arpl
push
rcl
adc
ins
add
sahf
repnz
inc
mov
int
repnz
xor
xchg
repnz
outs
or
add
in
pop
ins
or
pop
sbb
add
cmp
in
shr
into
inc
int3
mov
(bad)
out
xchg
repnz
ja
add
pusha
pop
sub
push
or
sar
in
int3
xchg
repnz
or
dec
jne
add
call
mov
or
test
ins
or
test
out
(bad)
int
repz
xchg
repnz
int
repz
test
repz
mov
repnz
int
rol
lds
shl
retf
ins
or
test
out
(bad)
(bad)
xchg
lock
xchg
repnz
int
repz
test
repz
test
sti
ds
xchg
xor
dec
mov
push
ja
or
jbe
xchg
add
call
jecxz
mov
stos
xchg
hlt
ds
xchg
repnz
int
repz
test
repz
mov
repnz
int
fmulp
test
sti
ds
xchg
push
inc
retf
ds
xchg
test
lds
hlt
ds
call
mov
repnz
int
mov
int
repz
or
mov
ds
xchg
pop
sub
(bad)
ds
add
int
or
jl
xchg
icebp
xor
or
xor
imul
xor
inc
rcl
xor
add
bound
add
xor
xchg
ins
or
xor
xchg
repnz
pop
retf
std
xor
mov
int
repnz
fcmovbe
mov
int
xchg
repnz
cmps
mov
xchg
imul
out
cmp
fistp
dec
repz
fmul
popa
repnz
xchg
test
cwde
repnz
or
test
arpl
push
les
cmc
ds
xchg
xor
dec
cmps
add
call
int
repnz
mov
xchg
in
into
xchg
bnd
push
or
inc
cmps
xchg
idiv
mov
xchg
repz
repnz
jmp
cmovp
mov
cmp
xchg
repnz
pop
mov
repnz
int
xchg
repz
xchg
add
lahf
repnz
int
gs
ret
dec
mov
repnz
int
in
xchg
test
push
in
aas
mov
out
dec
mov
idiv
int
into
into
test
repz
int
or
shl
add
lahf
repnz
int
pop
test
mov
xchg
pop
sub
test
dec
cmc
or
mov
ret
ret
add
cwde
repnz
int
repnz
mov
xchg
imul
repnz
int
mov
ds
call
repnz
or
int
repnz
cli
xchg
dec
inc
push
ins
or
inc
cmc
ins
pop
into
test
repz
mov
ds
xchg
pop
into
test
(bad)
ds
xchg
cmp
repnz
pop
ins
or
sbb
mov
add
xchg
repnz
test
stc
ds
xchg
add
xchg
and
mov
in
xor
xchg
repnz
test
stc
ds
xchg
ss
retf
ds
arpl
jbe
cwde
repnz
int
mov
int
repz
mov
int
repnz
out
dec
mov
idiv
int
into
sub
xchg
repnz
mov
into
mov
idiv
int
pop
sahf
pushf
dec
sar
pop
sub
test
dec
cmc
or
mov
mov
xor
mov
repnz
int
repnz
cmp
xchg
repnz
mov
repnz
xchg
or
aas
int
lds
jb
xor
xor
hlt
dec
mov
repnz
int
or
cs
aas
int
pop
dec
mov
repnz
int
add
bound
rcr
xor
mov
int
repnz
ficom
ds
leave
fnstcw
xchg
mov
ds
or
dec
leave
xchg
repnz
icebp
arpl
xor
push
xchg
dec
aas
mov
xlat
loope
ins
out
cmp
clc
or
xor
repnz
xchg
imul
xchg
add
xchg
xchg
repz
fnstsw
mov
jmp
pop
sub
fdivp
ds
add
or
jmp
cld
int
or
rcr
xor
mov
(bad)
int
repz
add
cmc
outs
imul
repnz
int
aad
shl
mov
xchg
repnz
icebp
xchg
test
repz
test
stc
ds
xchg
test
xor
repnz
int
cdq
(bad)
int
repz
xchg
dec
aas
cmp
stc
cmc
ds
xchg
dec
clc
loop
(bad)
jo
add
bound
add
mov
cmp
test
idiv
mov
xchg
xor
int
or
test
push
or
push
sahf
dec
sar
or
int
repnz
fisubr
ds
leave
int
stos
mov
xor
test
repz
test
loopne
fisttp
cmp
xchg
repnz
rep
fmul
popa
repnz
xchg
test
xchg
repnz
int
repnz
arpl
cmp
xchg
repnz
jno
mov
xchg
mov
int
(bad)
std
xor
mov
xchg
repnz
bound
ds
mov
int
repnz
ficom
shl
leave
int
mov
and
xchg
xchg
idiv
mov
xchg
icebp
xor
or
nop
sahf
dec
sar
pop
sub
repnz
add
int
or
rcr
xor
mov
int
repnz
fisubr
mov
int
call
repnz
inc
ret
dec
mov
repnz
int
in
adc
ds
or
sub
xor
xchg
mov
mov
xchg
pop
dec
mov
repnz
int
repnz
test
add
int
repnz
retf
les
out
mov
int
repnz
jnp
push
xor
mov
repnz
int
repnz
test
(bad)
xor
ds
(bad)
xchg
jae
or
cmp
pop
clc
or
xor
mov
int
repnz
int
add
shl
add
pusha
pop
sub
push
or
sar
repnz
shl
ds
xchg
or
shl
or
mov
idiv
int
repz
add
int
repnz
jmp
cmp
in
dec
mov
out
lds
jb
xor
xor
hlt
dec
xchg
mov
inc
push
pop
aaa
mov
push
pop
dec
mov
idiv
int
bnd
xchg
icebp
fimul
imul
mov
xchg
mov
int
(bad)
std
xor
mov
ins
mov
int
repnz
jmp
sbb
cli
xchg
dec
inc
push
ins
or
ds
bnd
repnz
int
retf
xchg
mov
xchg
pop
test
mov
xchg
pop
sub
test
ds
clc
int
xor
or
add
or
dec
jne
test
sbb
sbb
nop
bnd
xor
inc
not
mov
xor
push
in
sbb
nop
repnz
mov
repnz
int
repnz
and
mov
int
repnz
mov
push
or
aas
int
mov
int
repnz
push
xor
mov
repnz
int
repnz
test
xor
ds
out
outs
ins
or
xor
dec
leave
cmp
test
int
mov
loope
or
and
xchg
xchg
idiv
mov
xchg
icebp
xor
push
ds
clc
int
xor
aad
jmp
cmp
out
lds
jb
xor
xor
hlt
stos
xor
jl
xchg
idiv
gs
leave
int
or
jne
or
cmp
xchg
mov
idiv
int
adc
ror
sub
xor
add
xor
xchg
cmp
cmp
ror
add
rcr
rcr
ins
shl
in
ins
ins
or
cmp
pusha
cdq
repnz
cdq
add
test
sbb
cmp
xchg
mov
int
(bad)
std
xor
pop
ins
pop
dec
(bad)
fdiv
cmp
cmp
sub
xor
cmp
xchg
mov
idiv
int
mov
(bad)
xchg
repnz
aaa
or
shl
mov
(bad)
xchg
repnz
push
test
xor
xchg
shl
or
aas
int
mov
int
repnz
mov
push
or
cmp
xchg
or
cs
inc
mov
push
shl
ds
ins
add
repnz
or
in
push
ins
or
lahf
imul
or
shl
jp
or
(bad)
xor
cmps
lods
dec
sar
mov
icebp
ds
test
int
repnz
or
shl
retf
xchg
lock
into
ins
or
cmp
ss
xchg
(bad)
push
shl
mov
imul
shl
rcr
shl
mov
int
repnz
mov
push
or
xor
or
xor
repnz
clc
mov
repnz
dec
nop
repnz
out
leave
cmp
test
int
push
dec
ja
mov
fcmovb
push
shl
or
cs
mov
out
leave
mov
or
leave
cmp
test
sub
xchg
push
dec
ja
mov
ficom
push
shl
not
mov
xchg
test
mov
icebp
ds
mov
ja
or
aas
jle
or
aas
je
or
ds
xchg
cmp
and
xchg
repnz
mov
std
ds
xchg
or
leave
mov
xchg
test
repnz
popf
xor
aam
or
cmp
repnz
lock
add
push
repz
xchg
test
test
cmp
sub
mov
jmp
cmp
in
lock
add
push
lock
xchg
test
xchg
repnz
sub
jbe
nop
repnz
push
retf
pop
repnz
arpl
ds
call
repnz
mov
repz
xchg
dec
cli
dec
nop
jno
cmp
xchg
bnd
test
xchg
lock
mov
or
pop
mov
repz
xchg
or
xor
mov
int
repnz
rcr
xor
mov
int
repnz
(bad)
cmps
ds
leave
int
xchg
repnz
or
add
ins
gs
dec
mov
repnz
cmp
test
cmc
aam
mov
ins
cli
and
xchg
test
pop
ins
gs
cs
cmp
cmp
test
je
inc
ficom
repnz
setae
shl
inc
into
test
icebp
ds
xchg
out
cmp
xchg
repnz
enter
mov
repz
xchg
test
xchg
repnz
mov
repnz
outs
dec
cmp
cmp
xchg
bnd
imul
repnz
test
xor
or
sbb
loope
aas
int
repnz
mov
xchg
pop
sub
or
dec
mov
repnz
int
in
ins
ins
or
xor
or
pop
pushf
dec
sar
pop
sub
test
cld
int
or
sbb
pop
mov
sbb
dec
mov
repnz
cmp
test
xchg
cmp
sar
mov
int
sbb
or
shl
pop
stos
push
test
lahf
xor
(bad)
out
leave
cmp
test
stos
xor
rcr
xor
mov
dec
cmps
ds
leave
int
stos
mov
mov
xchg
repnz
(bad)
mov
iret
xchg
repz
pop
jno
push
push
jae
jne
jo
dec
xchg
pop
xchg
repnz
int
cmp
mov
or
icebp
mov
iret
xchg
repz
aad
jmp
ds
xchg
pop
sub
or
ds
xchg
rcr
xor
mov
int
repnz
fcmovb
movs
ds
retf
(bad)
cmp
xor
or
inc
pushf
dec
sar
pop
sub
test
dec
mov
repnz
int
or
cmp
nop
repnz
addr16
and
xor
cmp
nop
repnz
out
cmp
nop
repnz
addr16
es
ficom
mov
xor
mov
int
repnz
clc
int
xor
out
dec
mov
repnz
ja
or
retf
ds
ins
repnz
loope
aas
int
repnz
mov
test
ficom
repnz
test
xchg
xor
adc
push
imul
imul
inc
ret
fisub
pop
leave
mov
clc
int
xor
mov
or
in
sbb
icebp
xor
sti
scas
pop
dec
xlat
aas
pop
xchg
mov
jl
dec
ja
mov
push
mov
jae
xor
or
push
xor
add
test
xor
cmp
cmc
lock
cmps
mov
sbb
test
test
ins
mov
cli
xchg
dec
inc
push
ins
or
xchg
fs
leave
int
in
fs
or
shl
push
call
loope
xor
cmp
inc
fadd
or
cs
dec
das
mov
xor
std
ss
mov
hlt
test
popf
xor
jg
sbb
sub
xchg
or
retf
jae
or
out
retf
xchg
test
repnz
stos
retf
test
ins
out
fcmovu
push
shl
mov
mov
pop
dec
repz
out
enter
sub
xor
ins
dec
cmps
push
repnz
int
lea
push
add
(bad)
int
repnz
push
shl
iret
aaa
lock
js
hlt
jmp
ds
mov
repnz
test
xor
aas
int
pop
test
pop
mov
xor
mov
iret
xchg
repnz
fidiv
push
shl
or
stos
xor
or
cmp
xor
stc
cmp
xchg
repnz
aam
sbb
pop
sub
xor
xor
jmp
pop
test
pop
pop
mov
movs
xor
stc
cmp
xchg
in
gs
or
xor
gs
cs
ds
in
imul
xor
mov
iret
xchg
repnz
pop
test
xor
mov
int3
xchg
repnz
pop
ins
or
shl
repnz
(bad)
jecxz
xor
das
jo
add
bound
loop
ins
or
dec
hlt
aas
gs
fsubr
or
rcr
shl
mov
sti
scas
pop
dec
xlat
out
loope
popa
cmp
inc
js
fcomp
cmp
push
aas
shl
or
cs
dec
cmc
out
push
cmp
dec
cmp
or
ins
rcr
mov
xchg
js
fisubr
push
shl
cmc
ror
retf
out
lds
jb
xor
xor
hlt
dec
ja
repnz
cmp
pop
ins
repnz
xchg
js
fisub
push
shl
cmc
ss
dec
xor
cmc
xchg
js
fidivr
shl
push
call
pop
xchg
cmp
movs
gs
mov
inc
ins
or
cmp
je
or
cmp
ins
or
mov
ins
or
ds
xor
xor
hlt
dec
cmc
xchg
inc
push
push
push
mov
stos
dec
div
ins
out
jge
repnz
lahf
imul
mov
and
(bad)
inc
shl
cmc
lock
stos
xor
lds
rcr
shl
js
ficomp
shl
retf
inc
int3
xchg
js
add
cmp
ins
shl
xchg
xor
mov
sbb
sub
cmp
xchg
xor
jb
add
retf
dec
ja
test
ins
xor
add
call
xchg
ror
jg
test
sbb
inc
xor
xor
or
shl
repnz
test
xchg
xor
mov
repnz
out
jo
xor
or
pusha
mov
xor
div
mov
pop
int
imul
pop
shl
into
inc
bnd
stos
jb
dec
xchg
xor
into
in
ss
dec
xor
mov
add
inc
xchg
push
test
in
xor
sbb
xchg
int
icebp
xchg
fimul
pop
shl
loop
inc
ins
or
shl
dec
cmp
xor
or
cmp
rcl
fsub
xchg
test
mov
pop
shl
jmp
ins
gs
xor
ss
or
shl
repnz
test
xchg
xor
mov
repnz
pop
int
gs
bts
push
or
shl
cmc
lock
dec
ja
test
mov
repnz
ins
adc
pop
sub
ins
add
inc
fs
or
shl
loop
dec
ins
or
shr
or
cmp
cmp
inc
icebp
xchg
shl
retf
ins
or
inc
push
test
dec
dec
sahf
xor
mov
mov
shl
test
icebp
xor
xor
jo
xor
or
xor
dec
leave
cmp
sub
sub
in
shr
into
into
test
repnz
test
or
mov
adc
ja
lea
add
ret
mov
scas
lea
ins
js
mov
sub
dec
ja
out
mov
arpl
xchg
add
imul
test
in
jo
xor
or
test
dec
jmp
aas
xor
jo
xor
fmul
pusha
add
out
leave
cmp
add
or
into
popf
scas
or
(bad)
aam
loope
ins
cli
and
out
sub
arpl
dec
ja
or
(bad)
out
int
fisttp
mov
ds
loop
mov
add
sub
dec
ja
add
xchg
inc
ffree
ja
test
lds
into
dec
ja
out
mov
sub
dec
icebp
xor
sti
scas
pop
dec
xlat
out
loope
popa
cmp
outs
fs
test
sbb
dec
cmp
repnz
jmp
xor
sbb
xor
mov
inc
iret
dec
addr16
cmp
or
rol
cmp
or
rol
mov
in
cmps
inc
jnp
inc
ja
or
ja
test
or
dec
ja
test
xchg
dec
xor
xchg
lds
aam
sbb
inc
ja
or
cmp
dec
ss
jo
and
jmp
mov
ins
retf
test
ins
in
xor
xor
xchg
les
aam
arpl
inc
ja
or
hlt
or
dec
ja
test
push
int
xor
cmp
lods
or
add
add
ins
test
mov
or
push
or
push
mov
arpl
shl
add
imul
ja
push
into
test
or
repnz
or
shl
or
xchg
or
test
xor
cmp
or
xchg
or
xchg
adc
xor
les
mov
jns
repnz
sub
rcr
xchg
cmp
sub
cmova
test
ins
out
mov
clc
shl
mov
dec
ins
or
test
in
cmp
ins
or
test
ins
add
xchg
push
lahf
imul
or
jp
stos
dec
shl
popf
inc
repnz
popf
push
mov
cld
popf
lock
popf
push
mov
cld
popf
and
cld
popf
and
cld
popf
mov
cld
popf
push
mov
ins
popf
jp
lahf
dec
shl
popf
inc
repnz
popf
push
mov
cld
popf
lock
popf
push
mov
cld
popf
clc
jmp
push
mov
cld
popf
push
mov
nop
repnz
popf
push
mov
ins
or
push
mov
sub
push
pop
sub
xor
xchg
mov
and
push
mov
cld
popf
push
add
push
mov
cld
popf
push
or
jno
mov
lods
add
cld
mov
xor
popf
push
inc
movs
popf
push
mov
cld
popf
push
push
test
shl
fld
jb
or
pop
sbb
xor
add
ret
mov
mov
ins
popf
stos
ss
popf
push
mov
cld
popf
inc
retf
push
mov
cld
popf
jp
stos
dec
shl
popf
call
mov
cld
popf
xchg
mov
in
push
mov
cld
popf
push
mov
cld
popf
cdq
mov
ror
rcr
popf
lock
popf
push
mov
cld
popf
and
cld
popf
push
mov
ins
popf
inc
retf
push
mov
cld
popf
jp
lahf
dec
shl
popf
call
mov
cld
popf
xchg
mov
in
push
mov
cld
popf
push
mov
cld
popf
cdq
mov
rol
loopne
inc
popf
lock
popf
push
mov
cld
popf
and
cld
popf
push
mov
cld
popf
cmps
fist
cmp
mov
aas
pop
xchg
mov
sub
jp
outs
outs
retf
and
mov
sub
dec
icebp
pop
sti
cmps
cmc
sub
shl
out
shl
xchg
inc
icebp
ds
test
mov
fwait
out
dec
ja
test
mov
repnz
test
ins
out
ficom
pop
shl
dec
sub
ror
shl
add
xchg
test
sbb
int3
dec
ja
xchg
ss
in
dec
addr16
xchg
sbb
aam
adc
mov
sub
ja
arpl
dec
and
dec
leave
cmp
mov
dec
ja
or
jb
mov
aas
sbb
and
mov
cld
or
aaa
bound
ja
xchg
pop
dec
ja
or
(bad)
dec
aaa
cmp
mov
or
test
cmp
test
ins
std
xchg
fcmovu
pop
shl
leave
in
mov
and
out
retf
(bad)
push
xchg
dec
xor
jp
retf
into
mov
repnz
push
call
loope
popa
cmp
movs
or
mov
stos
in
pusha
ins
or
add
int3
fsubr
add
popa
int3
cmp
xor
loop
les
or
xor
xor
cs
add
xor
shl
jecxz
cmp
or
ds
fs
retf
inc
mul
cmp
sar
cmovp
push
popa
daa
jo
es
add
xor
fimul
loop
or
test
in
xchg
cmp
mov
ds
push
gs
jo
test
xor
daa
jo
pop
sub
cmp
sar
mov
dec
shl
in
fidiv
leave
fst
in
cmp
sub
or
test
out
push
aam
or
cmp
jo
push
les
sub
mov
int
daa
jo
test
outs
dec
cmp
ins
cmp
mov
push
scas
xor
retf
push
aam
or
xor
dec
cmp
in
arpl
ja
in
arpl
dec
mov
jbe
in
into
test
fimul
cld
jmp
xor
test
test
xor
out
mov
jbe
lods
out
sar
mov
dec
sar
sbb
aad
aaa
in
jmp
xor
inc
mul
dec
aam
or
(bad)
mov
sbb
sub
dec
daa
cld
jmp
xor
inc
ja
or
mov
xor
daa
jo
xor
(bad)
push
aam
cmps
mov
mov
in
ret
xchg
scas
mov
add
lds
retf
inc
ja
or
mov
xor
daa
jo
xor
ret
dec
in
outs
xor
cs
adc
out
push
xchg
mov
mov
ins
test
or
mov
xor
mov
in
ret
jmp
xor
xchg
fnstsw
test
int3
scas
mov
mov
or
out
pusha
sub
arpl
sbb
imul
ds
add
dec
hlt
push
or
stos
xor
or
or
and
inc
fdiv
push
shl
or
ds
mov
inc
mov
or
inc
mov
cmp
fdiv
shl
in
jle
or
lahf
imul
pop
mov
retf
ins
or
xor
js
mov
stos
xchg
ins
or
test
xor
mov
or
dec
cmc
loope
cmp
loop
dec
rcr
xor
test
xor
mov
movs
into
xchg
mov
out
jp
sbb
cmc
call
pcmpgtb
inc
scas
ins
or
jae
ins
in
jp
or
shl
gs
lds
xor
test
add
or
xor
xor
xor
adc
test
dec
or
xor
sbb
mov
or
dec
jp
or
test
dec
or
xor
sbb
mov
or
rol
jbe
xchg
add
ins
or
jns
ins
repnz
push
or
into
test
repz
retf
dec
int
add
imul
shl
sub
mov
or
xchg
mov
or
(bad)
in
inc
pcmpgtb
les
or
test
ins
or
test
add
or
xor
xor
xor
or
test
repz
or
test
arpl
repz
mov
test
xchg
les
addr16
nop
bound
pop
xchg
mov
xor
mov
sub
dec
hlt
xchg
js
test
add
xor
inc
cmps
cmc
sub
shl
sbb
test
repz
push
imul
cmp
test
stos
or
outs
or
test
cmp
xor
test
repz
icebp
adc
inc
les
shl
mov
std
xor
add
das
jo
pop
sub
and
sub
test
ins
or
test
in
xor
outs
sbb
pop
imul
int
repz
fcmove
inc
shl
mov
mov
ret
into
test
xrelease
add
xchg
inc
pop
imul
addr16
xchg
lea
retf
ins
or
xor
jns
mov
test
xchg
ins
gs
ins
or
leave
(bad)
inc
shl
leave
int
fwait
xchg
xor
mov
or
cmp
cmp
cmp
inc
fnsave
shl
dec
sub
mov
cmp
xor
loop
dec
sar
or
xchg
cmp
mov
or
rcr
rcr
cmp
loop
dec
shl
sub
xor
test
push
stos
dec
xor
ins
test
cmp
out
dec
shl
iret
cmps
mov
loope
xor
cmp
sub
sub
stos
push
int
ins
addr16
fnsave
ins
in
je
or
dec
ja
pop
sub
test
dec
retf
dec
cmc
loope
sub
bound
or
sar
or
into
mov
or
cmp
xchg
test
mov
repnz
add
or
xor
cmp
mov
stos
add
sub
les
aam
shl
dec
jb
rcr
cmc
js
or
shl
inc
das
jo
add
ins
or
jns
ins
add
and
sub
in
ja
or
dec
ja
pop
sub
test
dec
retf
dec
ja
test
fstp
ds
push
call
loope
xor
cmp
inc
fst
dec
shl
dec
leave
mov
or
int
pop
sub
test
dec
retf
dec
cmc
stos
dec
xor
repnz
mov
aas
int
and
stos
mov
int
repnz
dec
ds
mov
int3
xchg
repnz
fiadd
inc
shl
mov
mov
js
dec
sar
pop
sub
cli
repnz
nop
repz
or
mov
xchg
pop
sub
stos
imul
repz
cli
xchg
es
or
aas
int
retf
inc
aaa
xchg
repz
add
xchg
repz
mov
int
repnz
cmc
lock
dec
mov
repz
repnz
test
xor
int
repnz
xchg
repnz
jbe
or
fiadd
into
dec
scas
xchg
repz
cmc
ror
retf
xchg
repz
mov
ds
test
mov
ins
mov
scas
xchg
repz
mov
ds
xchg
repnz
test
cli
into
test
into
xchg
mov
ins
or
jle
inc
dec
mov
ins
mov
pop
ins
or
cmp
xchg
repnz
cmc
out
int
push
and
nop
repz
xchg
nop
repnz
add
sub
inc
(bad)
xchg
repnz
xchg
repnz
inc
aaa
xchg
repz
out
pop
ins
add
ds
out
leave
mov
adc
int
js
mov
xchg
pop
test
mov
xchg
pop
sub
or
dec
retf
dec
cmc
loope
cmp
fisubr
retf
dec
icebp
out
out
shl
(bad)
adc
mov
icebp
aas
int
pop
sub
sub
inc
xor
xor
or
shl
add
bound
pop
mov
stos
mov
int
daa
test
(bad)
dec
shl
or
xor
push
leave
int
in
jno
or
dec
cmc
xchg
retf
dec
cmc
push
or
shl
repz
or
ds
in
jnp
or
cmp
xchg
test
mov
xchg
pop
sub
sub
dec
(bad)
nop
repz
xchg
das
or
test
ins
push
lahf
imul
or
xor
dec
dec
retf
dec
cmc
ins
cmc
dec
cmc
out
int
push
and
nop
repz
xchg
xchg
repnz
add
ds
shl
mov
fidivr
mov
leave
xchg
repnz
mov
mov
jo
sub
repnz
add
repz
gs
cs
ds
in
jp
or
cs
ja
rcr
inc
into
xchg
repnz
add
add
bound
das
jo
add
bound
add
retf
dec
mov
lock
in
je
or
je
xchg
repnz
leave
int
in
jo
or
das
jo
in
je
or
cli
fsubr
or
neg
dec
dec
shl
loop
or
movs
into
xchg
mov
ins
or
bound
jns
retf
dec
mov
repz
retf
loope
cmp
mov
jo
sub
xchg
cmp
mov
loope
cmp
pop
sub
xor
mov
fimul
shl
leave
fnstsw
xchg
pop
sub
jmp
test
mov
or
int3
ins
js
mov
mov
xchg
in
jbe
or
ds
js
mov
xchg
pop
sub
sub
cdq
pop
jbe
xor
pusha
test
ins
shl
das
jo
xchg
sub
and
mov
jmp
pop
sub
or
in
jbe
xor
xor
xor
bound
das
jo
xchg
sub
or
mov
jl
xor
sbb
add
das
jo
xchg
sub
daa
xchg
xor
sti
scas
pop
dec
xlat
in
loope
xor
cmp
dec
ret
dec
hlt
ins
std
dec
hlt
push
or
mov
repz
xchg
test
xor
mov
mov
loope
xor
pop
sub
xor
mov
fisubr
shl
leave
fnstsw
xchg
pop
sub
or
add
ins
js
mov
mov
cmps
cwde
repz
in
jno
or
shl
addr16
pop
ins
addr16
or
xor
(bad)
dec
shl
dec
cmp
add
test
or
rcr
cs
repz
shl
mov
xor
and
aam
mov
hlt
add
das
jo
in
jbe
or
rcr
or
repz
shl
or
rcr
dec
shl
into
stos
xor
dec
ja
repnz
test
(bad)
xor
mov
push
shl
jmp
mov
repz
retf
enter
inc
int
js
fnstcw
sar
repnz
test
mov
push
or
shl
sti
sub
ins
in
jno
or
aaa
fild
or
neg
loop
shl
in
jo
or
gs
or
shl
push
call
loope
xor
cmp
xchg
lock
cmp
xchg
test
add
inc
or
repz
ins
add
ds
out
int
cmp
xor
xchg
repnz
mul
push
dec
jp
sar
pop
sub
call
repnz
sar
int
pop
dec
jmp
aaa
int
test
lds
repnz
loope
xor
pop
sub
xor
mov
ficom
shl
leave
fstp
gs
xor
xor
or
shl
add
bound
test
out
cmc
ds
inc
gs
cs
rcr
test
int
in
or
or
rol
test
repnz
ins
or
rcr
dec
shl
or
xor
sub
or
cmp
ins
or
xor
test
pop
ins
add
or
sub
xchg
cli
es
xchg
test
mov
icebp
rol
ror
icebp
xchg
int
or
sbb
sar
out
int
or
xchg
push
or
xor
add
xor
bound
sub
ins
repnz
shl
cmc
ss
mov
cmc
cmp
and
or
int
ins
or
add
call
rcr
xor
xor
pop
xchg
mov
movs
jo
inc
fdiv
ins
cli
and
xchg
test
mov
fdivrp
xor
dec
xchg
repz
ins
mov
xor
xchg
in
out
or
or
rcr
dec
shl
or
xor
jo
int
in
(bad)
or
mov
mov
jo
sub
cdq
repnz
add
add
xor
jo
xor
adc
lock
int
gs
cs
aas
int
in
jno
or
(bad)
sbb
dec
mov
lock
int
gs
cs
aas
int
in
jno
or
add
adc
rol
adc
xor
ins
pop
test
mov
push
or
jno
xchg
repnz
pop
dec
mov
lock
int
in
or
or
aas
int
jo
xor
ja
ins
or
inc
lahf
ins
or
aas
int
pop
dec
mov
repz
in
or
or
shl
mov
cmp
xchg
repnz
cmp
xchg
repnz
cmp
xchg
repnz
cmp
xchg
repnz
outs
cmp
repz
int
bnd
xchg
repnz
xchg
mov
and
inc
int
add
in
mov
xchg
repnz
(bad)
sbb
aas
int
mov
pop
cmp
fild
or
aas
int
in
jo
or
sbb
mov
add
xchg
pop
sub
ins
pop
dec
(bad)
fdiv
aas
int
xchg
jbe
shl
mov
int3
xchg
repnz
int
mov
push
(bad)
or
jae
ins
or
shl
mov
xchg
repnz
mov
xchg
pop
sub
or
aas
int
pop
into
test
mov
int
pop
into
test
mov
int
pop
into
test
mov
into
test
mov
es
mov
dec
xchg
repz
mov
dec
(bad)
lods
repz
jmp
arpl
cmp
xchg
data16
xchg
repz
add
sub
ins
cmp
ds
xor
mov
cmp
mov
repz
int
in
or
cmp
jl
xchg
repz
leave
int
or
popa
push
or
ds
mov
sub
mov
sbb
xchg
jge
fcmovbe
aaa
shl
sti
sub
ins
in
or
cmp
aaa
fild
or
neg
jp
shl
push
call
loope
xor
cmp
int
dec
pop
add
aam
fdiv
ins
cli
es
xchg
test
mov
je
xor
repz
retf
loope
cmp
xchg
repnz
mov
cmp
mov
mul
cli
sbb
mov
ins
or
into
mov
or
ret
xor
inc
xor
mov
repz
in
or
or
mov
in
xor
(bad)
xor
std
inc
bnd
sub
or
dec
addr16
out
cmp
adc
dec
retf
dec
cmc
arpl
(bad)
leave
xchg
repnz
or
frstor
mov
int3
xchg
repnz
ficom
leave
int
dec
sub
int
repz
test
repz
lock
cli
sbb
ins
or
and
add
bound
add
xor
mov
xchg
test
fldcw
lea
popa
add
xor
add
bound
add
jg
or
inc
enter
bound
sub
ins
add
bound
add
retf
dec
mov
repz
in
or
retf
jecxz
ins
test
mov
adc
int
pop
sub
popf
repnz
add
inc
cmc
dec
cmc
pop
int
fldcw
add
push
or
cmp
cmp
and
test
pop
push
rcr
popf
or
je
mov
in
or
sar
xor
xor
leave
int
stos
dec
xor
ins
test
sbb
leave
bound
add
xor
cmp
adc
ja
sar
xchg
int
or
mov
xchg
repnz
out
jo
xor
add
inc
jl
sub
xchg
repnz
add
mov
xchg
js
test
int
mov
dec
ins
or
mov
xchg
js
fs
ss
mov
and
xor
xor
or
xor
cmp
xchg
push
or
sub
push
or
es
xor
sti
scas
pop
dec
xlat
in
loope
aaa
ins
or
pushf
cmp
jbe
xlat
pop
mov
mov
xchg
or
mov
ins
or
xor
cmc
add
sub
ins
in
push
ins
or
mov
add
rcr
shl
mov
into
xchg
repnz
int
in
or
hlt
in
call
les
or
xchg
js
popa
test
pop
mov
or
dec
mov
idiv
int
iret
lock
cmp
retf
dec
mov
idiv
int
retf
loope
ror
repnz
mov
xchg
pop
sub
push
or
mov
mov
icebp
ds
in
mov
je
ds
or
test
mov
xchg
pop
sub
test
pop
mov
or
inc
ffree
jno
xor
or
inc
or
int
pop
sub
in
ds
add
int
or
rcr
xor
mov
into
xchg
repnz
fidiv
leave
int
call
repnz
xor
add
shl
push
cld
jno
dec
loope
call
jb
(bad)
pop
test
arpl
into
mov
push
inc
mov
add
push
or
xor
cwde
bound
add
push
xor
mov
xadd
test
xor
jnp
dec
into
mov
xadd
test
xor
jge
pop
mov
adc
cld
pusha
sub
cmp
ins
jb
(bad)
pop
mov
mov
ins
or
ror
dec
xchg
popa
arpl
sub
push
inc
xchg
data16
mov
popa
cmp
inc
cmp
rcr
push
shl
pop
cwde
popa
cmp
inc
inc
outs
or
shl
or
mov
xchg
pop
sub
jmp
ds
add
int
or
(bad)
pop
sbb
xor
cwde
ror
repnz
fidivr
leave
int
xchg
repnz
inc
dec
mov
idiv
int
add
bound
cmp
loop
fs
or
ds
test
mov
add
xor
leave
rcr
loopne
xor
shl
sub
ins
repnz
shl
jb
xor
fsubr
or
rcr
test
int
in
pop
ins
or
dec
cmc
test
xor
ds
add
outs
or
cmp
push
xchg
repnz
inc
cmp
repnz
inc
(bad)
xchg
repnz
mov
xor
ficom
or
inc
ficom
mov
ss
aam
nop
repnz
xchg
repnz
idiv
int
mov
mov
idiv
int
fiadd
push
js
pop
ins
shl
cmp
xchg
mov
mov
icebp
ds
int
bound
or
ds
leave
int
xchg
cmp
mov
ins
or
mov
loope
ror
repnz
repnz
leave
xchg
repnz
mul
push
mov
rcr
xadd
in
jbe
xor
sbb
icebp
ds
int
bound
setb
cld
idiv
int
leave
int
xchg
or
mov
ins
or
ds
int
bound
in
retf
xchg
repnz
mul
inc
test
mov
adc
xor
mov
fimul
shl
leave
int
fwait
add
xor
into
xchg
repnz
shl
cmp
int
in
push
ins
or
rcr
xor
test
xor
bound
das
jo
repnz
cmp
xor
lea
repnz
sub
icebp
ds
int
bound
in
rcl
sbb
ins
or
sub
xchg
repnz
cmc
test
shl
gs
cs
rcr
test
int
in
push
ins
or
shl
or
ror
repnz
repnz
int
leave
leave
mov
sub
xor
or
cmp
xor
or
xor
ds
pop
or
shl
cmc
call
jl
dec
rcr
cmp
xor
or
xor
ds
pop
or
leave
xor
xor
jno
dec
rcr
cmp
xor
or
xor
sub
or
ins
in
xor
and
cmp
xor
or
xor
sub
cwde
jae
xor
idiv
int
retf
ins
or
add
cmp
in
cs
ds
in
or
mul
jl
ins
or
and
cmc
loope
cmp
ficomp
shl
or
cmp
xchg
pop
add
pop
xor
sbb
jle
shl
or
xor
sub
pop
or
(bad)
xor
mov
xchg
mov
ss
sub
xor
mov
add
shl
push
inc
(bad)
int
js
pop
dec
loopne
xor
shl
sub
ins
repnz
adc
and
cmp
xor
or
xor
sub
fwait
aad
xor
pop
push
pushf
div
ins
shl
sub
ins
repnz
aas
shl
cmc
lock
sub
xchg
repnz
xor
icebp
cmp
ror
into
push
ins
or
cmp
cmp
or
hlt
xor
mov
sub
dec
cmc
gs
mov
pop
int
sub
or
fisubr
into
xchg
fidivr
cmp
xor
aad
xor
cmc
ror
retf
aaa
les
addr16
inc
fimul
shl
pop
xchg
lea
adc
in
retf
ins
or
cmp
xchg
test
push
stos
mov
int3
xchg
repnz
cmc
ss
mov
xchg
repnz
cmc
in
retf
ins
or
rcr
cmp
xor
mov
in
or
test
repnz
mov
jl
xor
fisubr
or
ds
call
inc
(bad)
xchg
repnz
lods
loope
xor
repnz
pop
or
aas
int
add
inc
imul
test
shl
cli
inc
push
ins
or
ds
mov
int3
xchg
repnz
mov
repz
or
xor
sub
cmp
cmp
xchg
test
add
adc
mov
repz
bnd
xchg
repnz
sar
xchg
add
inc
jne
xchg
mov
xchg
pop
xchg
or
xchg
repnz
dec
retf
dec
cmc
pop
(bad)
cmps
int
fstp
int
add
bound
repnz
test
fstp
int
pop
xchg
pop
repz
xor
in
add
je
cmp
xchg
test
fscale
bnd
xchg
repnz
shl
cmc
lock
xchg
clc
repz
mov
repz
push
call
add
ins
in
add
cmp
jmp
add
aaa
mov
or
rcr
mov
mov
movs
xchg
xor
xor
aas
xor
ja
pop
ds
push
or
inc
dec
nop
push
shl
jns
int
in
sbb
ins
or
xor
sub
xchg
pop
ins
rcr
mov
test
xor
cmp
ins
mov
ins
add
addr16
sbb
sar
mov
ins
or
stos
xor
dec
cmp
xor
into
adc
bound
mov
out
sar
xchg
out
mov
xchg
jb
int
mov
sub
pop
or
daa
mov
xchg
test
mov
xchg
pop
dec
mov
jb
int
in
push
ins
or
cmp
int
pop
ds
ins
test
xor
aad
push
or
sub
inc
or
das
shl
rcr
repz
push
call
call
xchg
gs
leave
mov
pop
ror
xchg
cmp
mov
pop
or
les
lods
dec
sub
out
fistp
pop
cmc
dec
cmc
stos
or
xor
and
xor
cmp
clc
loop
cwde
add
xchg
test
sub
xchg
push
ins
cli
es
out
cmp
icebp
cmp
xor
gs
leave
lea
js
in
call
lds
xor
in
xor
cmp
lods
sbb
or
shl
in
xor
lds
mov
pop
ins
pop
test
pop
ins
addr16
aas
shl
in
add
retf
dec
cmc
push
or
sar
pop
ds
mov
xor
into
xchg
repnz
repnz
gs
push
xchg
cmp
cmp
rcr
inc
into
xchg
repnz
or
int
add
ror
jmp
in
xchg
ficom
or
xor
or
xor
mov
mov
or
dec
retf
dec
mov
idiv
int
retf
or
jmp
pop
sub
pop
or
enter
test
pop
sub
xor
icebp
aas
in
leave
xchg
repnz
mov
stos
pop
sub
pop
or
xchg
int
in
pop
ins
or
sar
addr16
pop
in
xor
mov
into
xchg
repnz
fidivr
repz
leave
int
lods
add
or
cmp
sbb
into
mov
out
test
leave
xchg
repnz
add
bound
sub
xor
or
xor
leave
int
shl
cmp
xchg
or
sub
add
xor
ds
push
repz
shl
loop
push
or
ds
ret
xchg
push
enter
dec
daa
xor
xor
cwde
xor
ds
xchg
fisubr
or
ds
mov
xchg
imul
nop
repnz
test
ins
mov
into
xchg
repnz
ficomp
or
cmp
add
loopne
xor
mov
stos
add
bound
sar
pop
xchg
mov
xchg
pop
ds
fs
add
lds
or
int
push
lahf
imul
xor
pusha
jno
sub
pop
or
test
in
lock
test
pop
ins
shl
or
jns
cmp
test
in
stos
xor
or
xor
add
xchg
and
mov
fs
sub
scas
imul
imul
or
pop
jl
test
cmp
sub
lods
jns
popa
test
cmp
mov
repnz
les
cld
jmp
test
cmc
sub
shl
ins
or
dec
ja
test
mov
sub
xchg
popa
test
ins
test
mov
icebp
ror
push
inc
push
imul
cmp
inc
mov
shl
jmp
cli
es
aam
shl
cli
movs
into
in
adc
mov
or
dec
ja
test
mov
ins
mov
xor
push
nop
test
jmp
jb
rcr
inc
sbb
(bad)
and
xor
cmc
ss
dec
or
xchg
repnz
ins
aaa
les
ss
pop
dec
xlat
cmp
movups
mov
nop
pop
stos
xor
cdq
xor
test
ins
pop
sub
or
shl
jmp
movs
into
xchg
mov
aas
pop
xchg
mov
js
xchg
mov
pusha
xor
test
sbb
xchg
xor
and
xor
or
rcr
test
cmp
xor
sbb
shl
cmc
call
xor
dec
jno
in
inc
repnz
dec
ja
pop
sub
or
test
cmp
xor
sub
shl
dec
stos
xor
dec
jge
test
icebp
xor
ds
retf
ins
or
shl
xchg
sub
cmp
mov
ja
test
ins
or
sub
cmps
cmp
test
ins
addr16
ins
rcr
cld
ret
shl
add
xor
or
loope
xor
addr16
and
xor
mov
out
push
mov
adc
xor
and
xor
and
xor
loop
inc
ins
or
loope
ins
or
fstp
ins
or
mov
pop
int
cmp
loop
jp
or
lahf
imul
js
(bad)
ret
push
adc
retf
ds
fs
sbb
inc
pusha
in
sbb
inc
jl
adc
cmc
int
shl
or
inc
push
or
jge
ins
or
xchg
fcmovbe
and
xor
leave
int
xchg
cli
es
xor
icebp
cmp
int
test
xor
sub
or
ds
js
mov
xchg
js
int
add
shl
pop
dec
xlat
cmp
dec
retf
dec
cmc
push
or
bound
add
inc
fs
xor
div
icebp
cmp
(bad)
(bad)
je
cmc
call
cmc
mov
shl
dec
cmp
dec
cmp
xor
xadd
rcr
mov
xchg
js
fidivr
and
xor
mov
pop
int
setae
int
sbb
inc
jo
ror
sbb
test
repnz
ds
nop
in
sbb
or
jns
adc
test
in
ds
nop
in
sbb
or
or
cmp
gs
aad
sub
jle
push
std
xchg
mov
cmp
xor
add
dec
retf
dec
ja
test
mov
jne
ret
xor
or
mov
test
in
xor
inc
push
add
or
mov
test
in
xor
inc
pusha
repnz
test
add
jns
mov
test
lds
retf
sub
xchg
mov
cmp
inc
cmc
pop
jb
xor
xor
aam
or
jno
ins
or
shl
dec
cmp
stos
lods
sub
cs
hlt
add
jmp
retf
ins
rcr
rcr
xor
js
xor
aam
or
dec
std
gs
ss
int
das
xchg
cmp
aam
or
sar
or
test
in
dec
ja
push
lahf
sti
scas
mov
push
jge
inc
fcmovnb
or
xor
dec
in
loope
repnz
or
xchg
mov
out
leave
mov
jge
pop
in
call
dec
pusha
out
mov
ss
inc
push
test
sbb
dec
enter
mov
xchg
js
fidivr
and
xor
leave
int
adc
sbb
add
jl
lds
ins
mov
or
or
add
xchg
mov
rol
mov
mov
rol
cmp
xor
cmp
pop
dec
ja
retf
shl
sti
and
ja
dec
sub
in
ret
pop
sub
inc
or
aaa
int
or
fidivr
cmp
mov
test
out
ins
xchg
in
call
repnz
outs
scas
pop
dec
xlat
out
loope
popa
cmp
outs
fs
mov
cli
push
sbb
xor
ret
sub
ficom
daa
shl
dec
cmp
test
mov
pushf
xchg
fs
stos
jb
dec
call
(bad)
pop
sti
sub
mov
mov
lods
jns
cmp
pushf
jl
ss
dec
cli
inc
xchg
jg
mov
std
inc
push
ins
or
shl
inc
into
test
repz
test
dec
retf
shl
xchg
ss
in
inc
hlt
or
pop
shl
mov
fisubr
out
mov
out
retf
out
xor
jo
pop
sub
or
cmps
int
repz
test
repz
ja
jg
mov
aaa
les
addr16
jns
ins
xadd
fisubr
shl
pop
xchg
mov
cdq
jae
std
rol
retf
inc
xchg
cwde
repnz
int
mov
lock
std
ss
mov
int
repnz
hlt
loope
cmp
int
add
loop
repnz
add
mov
pop
int
in
or
ds
xchg
or
movs
sbb
repnz
ret
repnz
test
xor
out
xchg
lock
shl
test
int
repnz
mov
repnz
out
sbb
(bad)
mov
cmp
pop
xchg
lock
ins
or
rcr
ins
or
aas
int
or
mov
xchg
test
int
add
rcr
sub
xor
retf
sbb
or
inc
loop
lock
sub
std
xor
mov
stc
fnstsw
iret
xchg
or
pusha
test
mov
cmp
sub
cmp
add
int
sub
pop
mov
mov
sub
inc
or
test
int
sbb
xchg
repnz
int
gs
fldcw
or
shl
leave
aad
adc
shl
retf
xchg
lock
fisttp
mov
or
ds
mov
lock
repnz
outs
mov
int
repnz
mov
repnz
int
jg
fsub
push
shl
mov
int
bnd
repnz
arpl
js
ins
or
inc
lock
pop
shl
mov
fisubr
out
mov
xchg
test
mov
ins
xchg
mov
xchg
pop
test
mov
xchg
pop
sub
or
ds
repnz
in
mov
int
repnz
xor
mov
repnz
mov
ds
je
inc
xor
(bad)
out
cmp
xchg
repnz
pop
xor
xor
in
sbb
div
aaa
ins
or
add
hlt
in
mov
xor
mov
repnz
int
mov
mov
repnz
arpl
dec
mov
repnz
test
shl
xchg
xchg
repnz
hlt
pop
shl
push
shl
lea
repnz
aaa
xor
hlt
and
shl
dec
fnsave
ins
(bad)
push
mov
mov
or
xor
mov
mov
repnz
out
fnstenv
in
jne
inc
sbb
dec
outs
or
aad
xor
mov
int
repnz
fimul
and
xor
leave
int
cmp
ins
or
ds
repnz
in
sub
xchg
repnz
mov
or
jbe
xchg
cmp
loope
(bad)
bound
pop
out
arpl
ds
xchg
pop
sub
repnz
or
pushf
repnz
int
push
dec
mov
or
ss
xchg
repnz
mov
xchg
bnd
xchg
repz
adc
aas
int
mov
int
repnz
pop
xor
xor
in
sbb
div
xor
ds
xchg
in
pop
ins
or
aas
int
mov
xor
icebp
ds
xchg
pop
sub
xchg
repnz
add
nop
repnz
int
int
mov
repz
fisubr
jo
bnd
xchg
repz
and
leave
mov
stos
rcr
ret
pop
ins
rcr
shl
leave
ficom
shl
mov
xchg
in
ins
sar
int3
xchg
pop
xchg
int
cmc
ds
xchg
bnd
xchg
lock
std
call
xchg
clc
loop
ins
bnd
xchg
repz
sub
xor
std
rol
retf
xchg
fcmovb
sub
xor
mov
xor
sti
pushf
pop
ins
or
add
call
shl
mov
xor
dec
retf
dec
cmc
stos
dec
xor
jmp
in
into
test
repnz
pop
loop
xor
mov
int3
xchg
repnz
fisubr
or
sar
pop
test
fisubr
ds
leave
fnsave
ins
lea
push
or
or
out
xor
shl
in
lds
dec
rcr
xor
jecxz
jo
gs
lea
mov
test
inc
lds
les
addr16
inc
fdivp
xadd
aas
pop
xchg
lea
cmc
call
xchg
lock
test
add
inc
or
push
repnz
in
sar
xchg
ins
or
cmp
xchg
mov
jno
or
mov
cmc
pop
(bad)
dec
ja
test
mov
or
xor
pop
leave
mov
in
popa
iret
xchg
repnz
retf
dec
mov
lock
retf
sbb
shl
mov
xchg
lock
push
xchg
cmp
xor
data16
or
mov
xchg
pop
sub
or
cmp
xchg
bnd
xchg
repnz
shl
mov
xchg
lock
sub
xor
cmp
xor
data16
add
ds
pop
retf
xor
pop
ret
xor
test
repnz
rcr
ins
gs
xchg
dec
or
cmp
xchg
test
add
sar
pop
sub
dec
or
shl
in
adc
or
sar
pop
test
pop
xlat
in
xor
shl
in
lds
add
inc
jg
sub
lods
in
xor
retf
dec
cmc
test
cmp
xchg
lds
ins
or
ds
add
bound
je
xchg
repnz
popf
cmp
xchg
bnd
xchg
repnz
test
xchg
repnz
lods
cmp
xchg
pop
dec
mov
lock
in
retf
xchg
repnz
test
xchg
repnz
jecxz
ins
test
add
les
ins
or
sar
pop
sub
xchg
or
mov
xchg
repnz
mov
(bad)
sub
xor
inc
mov
repnz
repz
ins
test
add
bound
add
fs
or
ds
or
and
xor
cmc
jmp
or
shl
ins
mov
repnz
adc
int
or
mov
stos
add
bound
dec
mov
lock
add
bound
or
stos
xor
or
cmp
pop
ins
in
adc
repnz
ds
lock
je
xor
and
aad
mov
cmc
xchg
mov
test
pop
call
mov
(bad)
sub
xor
leave
shl
jmp
or
popf
or
or
ds
gs
jne
or
add
sub
ins
or
shl
or
mov
lock
or
push
add
mov
adc
lds
xor
mov
iret
xchg
repnz
rol
or
rcr
shl
mov
popa
test
loopne
ins
rcr
xor
mov
fisub
ds
leave
int
xchg
repnz
es
xchg
lock
test
xor
fs
xchg
repnz
cmc
ror
retf
out
test
iret
xchg
repnz
add
bound
sub
or
cmp
fldcw
or
xchg
lock
push
fidiv
ins
xchg
repnz
cmp
xchg
test
ins
xor
lock
mov
mov
jle
ret
mov
sub
dec
cmc
ins
cmc
dec
cmc
xchg
js
ficomp
iret
cmps
mov
pusha
in
adc
lock
fidivr
iret
cmps
mov
fwait
jmp
test
loope
ins
test
push
in
xor
cmp
mov
or
cmp
sub
sub
stos
cmp
mov
adc
cmp
test
in
xor
mov
pushf
dec
xchg
(bad)
das
shl
leave
int
sbb
les
js
xor
sbb
into
test
repz
jbe
or
xor
and
test
loope
(bad)
aaa
arpl
shl
cmp
test
ins
or
aas
mov
fistp
xor
test
outs
pop
sub
sub
xchg
pop
ins
pop
test
pop
ins
addr16
sub
dec
retf
dec
cmc
push
repnz
fisubr
dec
cmp
in
das
ins
or
shl
cmc
ror
retf
xchg
push
lahf
imul
or
shl
dec
outs
fs
sbb
pop
dec
retf
dec
cmc
ins
cmc
dec
cmc
stos
mov
xchg
repnz
aam
ds
retf
shr
ds
add
bound
sub
in
sub
hlt
gs
mov
or
call
int
leave
and
xchg
in
adc
mul
inc
jne
je
mov
ds
add
push
jo
rol
dec
sub
into
push
ins
or
ds
adc
xor
cli
jns
ins
or
ds
add
bound
in
sub
repnz
xchg
int
leave
and
xchg
in
adc
mul
inc
jne
je
mov
ds
add
cmp
xchg
cmp
mov
xchg
sub
in
loop
cmp
ins
aaa
les
addr16
jns
dec
or
shl
pop
xchg
mov
cmp
cmps
mov
stos
cmp
mov
ins
or
shl
cmp
xor
mov
xchg
test
mov
sub
std
xor
mov
popf
or
arpl
add
jo
pop
sub
test
ds
pusha
repnz
add
sub
gs
cs
ds
in
adc
idiv
cmp
xchg
test
pop
ins
rcr
rcr
shl
dec
xchg
ficomp
adc
xor
into
inc
cmc
push
pusha
shl
mov
rcl
adc
xor
or
ds
pop
dec
xchg
int
pop
sub
jb
shl
fnsave
ins
mov
out
or
shl
pop
dec
retf
dec
mov
sar
int
mov
cmc
xor
sti
scas
pop
dec
xlat
in
loope
ss
or
lock
ret
(bad)
shl
test
iret
xchg
repnz
cmp
mov
xchg
imul
das
ins
or
xchg
xor
push
cmps
xchg
repnz
stos
in
sub
fisub
shl
sti
ss
mov
add
aad
mov
xchg
repnz
cmc
add
daa
jo
in
cs
or
ds
cmc
ror
retf
push
or
ds
in
sub
ins
or
cmp
xchg
pop
test
pop
xlat
in
xor
shl
in
ret
inc
test
cmp
ins
lds
ins
or
ds
add
bound
cmp
xchg
test
int
lods
cmp
xchg
pop
dec
mov
lock
in
int3
xchg
repnz
mul
add
ins
data16
or
ds
in
sub
dec
ins
shl
mov
xchg
repnz
mov
xchg
pop
sub
or
ds
mov
xchg
repnz
lds
shl
dec
stos
xor
mov
xchg
repnz
fimul
leave
fnstsw
stos
retf
xchg
bnd
or
aas
int
or
xor
stos
xchg
repnz
sub
int
or
mov
shl
jmp
in
dec
mov
repz
in
ret
cwde
mov
xchg
pop
dec
mov
repz
rcr
loope
ins
rcr
inc
into
xchg
repnz
or
sar
add
ins
or
cmp
xchg
in
sub
retf
dec
cmc
xchg
mov
test
pop
call
mov
fiadd
adc
xor
leave
shl
jmp
or
outs
xor
mov
repz
gs
sbb
sar
sub
ins
or
shl
or
mov
idiv
int
or
mov
or
xor
stc
sub
ss
or
cmp
fisub
retf
ins
or
sub
add
bound
add
xor
(bad)
ins
or
cmp
xchg
pop
xchg
(bad)
idiv
int
leave
leave
cmp
rcr
je
xchg
repnz
xchg
pop
sub
jne
sar
pop
ds
lock
jae
int
test
mov
stos
bnd
xchg
repnz
push
shl
fild
jo
in
sub
pop
mov
in
das
ins
or
add
gs
cs
sar
mov
or
test
xor
lock
mov
add
mov
lock
in
bound
bnd
xchg
repnz
iret
ds
leave
int
xchg
and
mov
jne
sar
retf
xchg
repnz
mov
xchg
pop
sub
jbe
sar
addr16
test
loope
ins
or
dec
cmc
xchg
mov
sub
jmp
push
lahf
imul
sbb
cmp
mov
mov
test
add
test
in
xchg
fisub
pop
shl
dec
xor
or
cmp
dec
data16
sbb
(bad)
ins
or
sub
test
xor
ds
(bad)
xor
in
and
ins
cmc
dec
cmc
aas
in
and
or
stos
xor
not
push
or
sar
mov
xor
push
ins
or
xor
cmp
sub
test
(bad)
xor
into
xchg
jns
pop
or
test
in
sahf
ins
aaa
les
addr16
nop
bound
pop
xchg
lea
cli
mov
ja
mov
xor
es
retf
fdiv
out
cmc
rol
repnz
test
(bad)
ins
test
lds
retf
push
or
rcr
addr16
lods
ds
in
and
ins
or
add
cs
rcr
xor
in
and
xchg
test
sbb
shl
or
int
cmc
test
pop
fcom
mov
xchg
mov
inc
js
mov
xchg
js
int
add
rcr
mov
inc
ins
or
cmp
movs
iret
shl
cmp
mov
or
ins
std
xor
mov
xlat
int3
xor
in
or
sar
push
aas
int
mov
daa
push
or
shl
or
fnstsw
shl
push
lahf
imul
sub
cmp
cli
out
push
ins
or
and
in
or
test
cmp
mov
and
test
in
dec
ja
pop
sub
or
rcr
test
cmp
int
ins
or
sbb
sbb
shl
cmp
xor
xchg
rcr
cdq
pop
test
xor
mov
push
or
mov
xor
aam
mov
xchg
repnz
hlt
out
or
cs
add
repnz
call
and
or
shl
xchg
inc
int
in
xor
cmp
int
in
xor
sub
mul
ficomp
or
repnz
loopne
ins
or
sar
pop
sub
daa
push
shl
jmp
mov
stc
ds
retf
dec
mov
out
lds
jb
xor
xor
hlt
dec
cmc
out
loop
hlt
call
repnz
pop
shl
xor
inc
ret
bound
add
je
cmp
sbb
test
fiadd
sbb
xor
sub
and
test
mov
xchg
pop
sub
pushf
cmp
mov
jmp
pop
sub
repnz
adc
ds
int
mov
or
xor
inc
hlt
inc
push
shl
leave
ret
lea
repnz
jbe
ins
or
ds
add
or
sbb
cs
ds
in
push
xchg
repnz
mul
push
push
in
pop
(bad)
xchg
repnz
fsub
shl
mov
ds
shl
mov
test
xchg
xor
aaa
nop
icebp
ds
or
loope
shl
or
inc
xchg
test
mov
setbe
gs
mov
nop
icebp
ds
in
push
xchg
repnz
idiv
xor
out
xor
int
xchg
xor
mov
stc
ds
mov
into
nop
repnz
mov
xchg
repnz
fidivr
push
shl
retf
and
or
ds
add
bound
mov
shl
cmp
mov
or
xor
mov
into
xchg
repnz
cmp
ins
retf
inc
int
repnz
jecxz
jae
or
ds
gs
fisubr
or
ds
in
sub
mul
jl
xchg
repnz
and
adc
mov
test
lds
hlt
ficomp
cmps
test
imul
xchg
shl
cmp
xchg
add
outs
or
sti
xor
ret
shl
inc
test
mov
xchg
pop
sub
jg
ror
jmp
mov
stc
ds
retf
dec
mov
cmc
ds
gs
fisubr
or
ds
in
and
test
mov
xchg
pop
sub
jnp
shl
or
inc
into
xchg
repnz
xor
pushf
test
mov
xchg
pop
test
mov
xchg
pop
sub
or
xor
mov
(bad)
sbb
xor
leave
aad
jmp
pop
sub
jns
ror
jmp
mov
stc
ds
retf
dec
mov
icebp
ds
int
(bad)
mov
pop
xor
xor
mov
ficom
shl
leave
rcr
add
bound
pop
mov
ins
gs
fisubr
or
ds
in
push
xchg
repnz
mul
add
ins
add
ds
or
xor
repnz
add
mov
or
xor
or
cs
add
repnz
fprem1
cmp
xchg
and
test
mov
xchg
pop
sub
test
inc
les
std
jb
ins
add
bound
inc
into
xchg
repnz
inc
stos
cwde
repnz
inc
stos
cwde
repnz
or
inc
jl
inc
stos
cwde
repnz
call
repnz
repnz
stos
cwde
repnz
xchg
xor
jecxz
mov
dec
mov
repz
gs
fisubr
or
ds
in
and
or
xor
pushf
test
mov
xchg
pop
sub
jg
sar
cmp
ds
cmps
cwde
repnz
push
dec
sub
jmp
mov
xor
sar
pop
xchg
pushf
shl
ins
add
bound
jl
xchg
repnz
xor
dec
imul
add
cmp
xchg
repnz
pop
ins
bnd
xchg
repnz
inc
mov
stos
xor
sub
or
xor
nop
repnz
bnd
xchg
repnz
jmp
scas
add
cmp
xchg
bnd
xchg
repnz
shl
retf
fistp
aaa
les
ss
pop
dec
xlat
cmp
arpl
mov
sub
xor
cmps
lods
dec
sar
sub
cs
xor
loop
sbb
ja
pop
stos
xor
or
rcr
rcr
pop
shl
in
and
sti
scas
sbb
inc
fisubr
or
xor
pop
jle
xor
mov
shl
jmp
in
ror
retf
ins
or
aas
int
pop
ds
mov
xor
cmp
xchg
test
pop
ins
gs
xor
xor
or
dec
mov
repz
in
and
hlt
loope
cmp
or
test
ins
or
dec
ja
pop
sub
cmps
sbb
xor
repz
retf
mov
ja
pop
sub
test
xor
loop
in
and
cld
inc
or
inc
repnz
repnz
sub
xchg
mov
in
ds
leave
int
stos
es
xchg
lods
dec
ror
fwait
sbb
in
jge
xchg
repnz
cmc
xchg
test
pop
inc
in
xor
xor
shl
lea
ja
repnz
stos
adc
test
pop
jbe
xor
or
xor
in
(bad)
xchg
repnz
test
scas
sbb
inc
fidivr
shl
pop
xchg
(bad)
iret
inc
mov
retf
ss
mov
cmc
add
shl
addr16
in
inc
lds
xor
sub
and
test
mov
xchg
pop
sub
imul
xor
or
cs
ds
dec
cmp
xor
ja
pop
test
fs
cmp
xchg
repnz
fisubr
int
leave
in
push
std
dec
jae
or
sbb
in
dec
xchg
repnz
ja
add
nop
pop
test
fs
cmp
xchg
repnz
fidivr
leave
aad
xchg
cmp
mov
arpl
add
add
xor
or
cs
cmp
jo
gs
fisubr
or
inc
fisub
int
leave
aad
lods
js
mov
icebp
sar
std
aas
int
test
pop
ins
repnz
add
sub
gs
mov
out
sar
pop
sub
repnz
adc
mov
cmp
fisubr
or
rcr
shl
mov
aad
mov
cmc
out
or
cs
add
repnz
fwait
jne
xor
imul
or
shl
inc
jmp
xor
push
repnz
add
repnz
sub
xor
or
or
xor
ins
jns
xor
add
mov
or
xor
retf
stos
sbb
xor
dec
sar
pop
sub
push
add
bound
shl
std
call
mov
sti
ds
in
aas
ins
or
dec
hlt
loope
std
fcom
add
xor
mov
fiadd
add
xor
mov
fcom
cmc
aaa
int
pop
into
test
sti
aaa
int
pop
into
test
stc
aaa
int
pop
dec
mov
jecxz
int
iret
jns
in
dec
mov
movs
or
repz
or
retf
adc
cmp
cs
sar
or
imul
test
xor
mov
fcom
lock
int
pop
dec
pop
popf
and
ret
dec
mov
jecxz
int
retf
test
pop
cmp
xor
mov
ficom
shl
mov
fisub
add
icebp
aas
int
pop
sub
xor
ds
cld
clc
xor
fiadd
mov
(bad)
mov
stos
xor
sub
gs
or
ds
add
bound
add
les
add
cmp
(bad)
add
xor
mov
les
repnz
call
jb
add
aam
xor
test
xor
lahf
sti
scas
pop
dec
xlat
in
loope
xor
lea
jns
in
ss
mov
cmc
add
sub
and
test
mov
xchg
pop
sub
or
aas
int
pop
test
(bad)
(bad)
ds
leave
fnstcw
stos
push
or
push
pop
xchg
lea
out
push
in
cli
mov
ja
pop
stos
xor
or
rcr
rcr
add
xor
sahf
sti
scas
sbb
nop
ror
inc
cmp
mov
cdq
add
add
xor
or
cs
rcr
shl
add
jmp
dec
rcr
add
xor
retf
ins
or
rcr
fidiv
add
in
xor
ret
rcr
add
xor
dec
cmp
xor
ins
jb
rcr
cdq
aas
ins
or
shl
cmc
ror
retf
inc
or
je
ins
in
aas
ins
or
dec
xlat
in
loope
xor
cmp
dec
jmp
in
ins
or
xor
fsub
cmps
lods
dec
ror
cdq
add
lds
ins
or
ds
addr16
pop
shl
aad
jmp
movs
int3
xchg
repnz
mov
xchg
pop
sub
addr16
inc
retf
inc
xor
rcr
mov
test
rcr
add
sbb
sub
pusha
or
sbb
jmp
pop
stos
aaa
loope
xor
int
cmc
sub
shl
aas
int
daa
mov
xchg
js
(bad)
pop
shl
aad
jmp
shl
xchg
repnz
xchg
js
ficomp
shl
or
jmp
in
cmp
inc
nop
addr16
in
dec
mov
repz
out
xor
xor
mov
mov
imul
jno
or
fnstcw
lods
jns
mov
fs
arpl
test
push
icebp
inc
fisubr
pop
inc
mov
les
mov
or
xor
hlt
inc
cli
xchg
dec
inc
push
ins
or
inc
lock
pop
xchg
pop
ins
jns
xor
add
shl
mov
mov
repz
into
dec
cmp
in
xor
xor
hlt
dec
dec
imul
out
lds
jb
xor
xor
hlt
dec
lock
iret
shl
inc
mov
popa
or
dec
cmp
in
xor
xor
hlt
dec
dec
imul
jmp
add
xchg
dec
inc
push
ins
or
inc
lock
pop
xchg
pop
pushf
mov
int3
xor
ds
inc
cli
xchg
dec
inc
push
ins
or
(bad)
xor
add
imul
out
lds
jb
xor
xor
hlt
dec
dec
imul
loop
shl
dec
int3
xor
push
in
ins
repnz
ds
xor
xor
hlt
dec
dec
imul
out
lds
jb
xor
xor
hlt
dec
lock
iret
shl
push
mov
pusha
or
dec
jmp
ds
mov
icebp
loope
inc
cli
xchg
dec
inc
push
ins
or
(bad)
xor
add
xchg
dec
inc
push
ins
or
inc
lock
pop
xchg
pop
ins
mov
int
ins
mov
cli
xchg
dec
inc
push
ins
or
(bad)
xor
add
xchg
dec
inc
push
ins
or
inc
lock
pop
xchg
pop
mov
je
xor
ds
into
sub
ins
or
ds
xor
xor
hlt
dec
dec
imul
cs
xor
leave
lds
in
call
cmp
in
xor
xor
hlt
dec
dec
imul
jb
shl
leave
lds
loope
inc
cli
xchg
dec
inc
push
ins
or
(bad)
xor
into
lock
ficom
leave
lds
xchg
mov
sub
fs
repnz
retf
(bad)
xor
cmps
lods
dec
sar
sub
cs
xor
push
call
loope
ss
or
popa
jge
xor
dec
hlt
test
(bad)
xor
xor
or
xor
pop
repnz
shr
or
ds
int
push
test
(bad)
xor
lds
repnz
ins
or
ds
js
xor
ficom
or
xor
std
ss
mov
into
xchg
repnz
hlt
add
shl
and
imul
mov
ins
or
shl
or
xor
out
repnz
or
rcr
and
mov
in
fs
repnz
idiv
cmp
ins
mov
cmps
lods
dec
sar
(bad)
ins
cli
in
lods
dec
sar
scas
push
repnz
xor
std
ss
mov
leave
xchg
repnz
hlt
test
retf
xor
jg
sbb
add
imul
sub
out
retf
xchg
test
repnz
jmp
test
hlt
jmp
or
add
ja
push
icebp
ds
fimul
xchg
cmp
cmps
test
mov
ins
dec
scas
push
and
or
out
dec
xchg
repnz
cmp
retf
pop
mov
icebp
ds
in
cmp
lock
pop
nop
repnz
repnz
stos
add
bound
ss
or
ds
in
cmp
xor
mov
leave
xchg
repnz
mov
xchg
pop
sub
jmp
pop
sub
repnz
jmp
test
mov
xchg
pop
sub
shl
mov
adc
jmp
or
xor
std
ss
mov
leave
xchg
repnz
hlt
push
or
jmp
mov
es
gs
cs
shl
add
mov
mov
adc
sub
dec
aaa
add
sbb
mov
ins
or
(bad)
xor
ret
sub
xor
or
xor
outs
or
and
out
push
std
or
mov
sub
imul
jo
sub
les
ins
repnz
(bad)
adc
ins
rcr
rcr
shl
shl
or
rcr
xor
or
rcl
xchg
add
rcr
lea
or
dec
mov
icebp
ds
retf
dec
mov
icebp
ds
gs
xor
and
rcr
xor
or
jne
ins
or
dec
hlt
add
es
gs
mov
outs
or
xor
std
jb
ins
in
xor
imul
xor
mov
xor
sbb
xor
or
lods
xor
and
lods
xor
push
ret
retf
out
shl
or
mov
sub
or
xor
xchg
dec
jae
in
retf
xchg
repnz
or
dec
xadd
xor
retf
imul
mov
(bad)
int
xor
inc
jmp
daa
jo
gs
cs
inc
fisub
ds
leave
loope
lods
js
pop
add
bound
aaa
cmps
and
aas
int
pop
test
pop
pushf
jmp
xor
sar
ins
or
rcr
xor
mul
jo
gs
xor
das
mov
ds
and
sbb
xchg
repnz
pop
cld
add
ins
add
(bad)
int
xor
into
test
add
pop
sub
in
repnz
jle
xor
inc
xchg
repnz
pop
mov
sub
add
bound
xor
pushf
test
mov
xchg
pop
sub
or
rcr
rcr
cli
ds
jl
jb
rcl
inc
or
je
ins
in
aaa
ins
or
shl
jl
jb
add
push
or
je
ins
in
aaa
ins
or
dec
hlt
push
or
stos
xor
hlt
xchg
ds
retf
dec
pop
ins
or
xor
imul
scas
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xchg
fidivr
shl
retf
dec
js
pop
dec
test
jb
in
aaa
ins
or
test
gs
sbb
retf
ins
dec
inc
or
jo
into
mov
add
mov
adc
(bad)
sub
sub
jg
gs
aaa
out
cmc
loope
lahf
addr16
or
xor
or
pop
ins
pop
sub
repnz
movs
into
cwde
mov
or
shl
or
shl
or
inc
ss
repnz
ins
or
lock
ds
mov
rol
sbb
dec
add
(bad)
fwait
inc
in
dec
in
scas
add
ds
dec
or
xor
pop
inc
or
xor
pop
inc
or
xor
pop
pop
or
xor
pop
pop
or
xor
pop
push
or
xor
pop
push
or
xor
pop
sub
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
or
xor
popf
shl
.byte
