sbb
gs
pop
pop
fsub
mov
jmp
not
into
mov
adc
mov
out
jne
xchg
inc
dec
mov
and
mov
mov
test
add
lods
inc
mov
fdiv
ret
(bad)
imul
jbe
icebp
push
pop
sub
div
jl
sbb
ds
dec
jmp
retf
nop
hlt
dec
and
(bad)
call
rcr
jno
mov
fwait
xchg
cmp
jecxz
mov
mov
(bad)
sub
lods
xchg
xchg
pop
bound
cld
imul
adc
outs
cmp
sub
cdq
dec
popf
bound
or
scas
push
loop
push
cmp
or
dec
(bad)
or
cmp
ins
lea
cld
repz
stc
adc
or
stos
sbb
or
push
stos
ficomp
add
lea
adc
xchg
inc
outs
inc
push
call
and
xchg
adc
(bad)
push
retf
sub
sbb
mov
lods
sub
jmp
(bad)
push
push
mov
jp
mov
inc
mov
in
xor
sbb
test
sar
mov
cmp
mov
dec
jg
repnz
adc
pop
cwde
xchg
push
pop
jbe
rcr
enter
mov
jecxz
mov
bound
xor
jmp
pusha
test
xchg
ret
add
loop
jns
sub
mov
sub
and
cmps
sbb
xchg
test
lods
jo
or
push
clc
scas
stos
scas
sbb
scas
ss
imul
and
(bad)
jmp
aam
add
data16
xor
fcmove
push
dec
xlat
mov
aam
push
dec
inc
outs
mov
jo
or
xchg
pop
arpl
add
adc
push
cmps
and
adc
push
mov
push
jl
bound
shl
sub
movs
mov
or
cmps
add
push
mov
pop
mov
mov
pop
mov
leave
cld
mov
mov
cmp
mov
dec
pop
loopne
jns
add
sbb
mov
inc
int
in
inc
dec
dec
jae
xor
std
idiv
imul
push
cmp
xlat
jmp
loopne
jecxz
jmp
jns
and
cmp
xlat
mov
jl
popa
push
imul
jmp
call
sub
aaa
rcr
mov
and
jne
retf
sub
or
lods
addr16
popa
jl
out
fdivr
lods
test
adc
std
mov
pop
retf
push
std
int
rcr
mov
push
xchg
lods
push
jns
hlt
or
ror
fadd
cmp
imul
je
outs
cdq
call
cmp
scas
xor
push
mov
lds
sub
sub
imul
jnp
jge
add
or
jmp
mov
pop
dec
(bad)
xor
jge
test
aaa
pop
mov
test
push
scas
stc
fwait
ret
push
scas
ds
in
push
popa
sub
jae
add
mov
aam
and
jg
jne
mov
call
cmp
mov
and
push
sbb
adc
pop
jns
xchg
out
xchg
or
push
adc
mov
daa
out
sub
popf
mov
mov
and
adc
jno
xlat
je
sbb
dec
push
sahf
xor
outs
lods
adc
mov
(bad)
(bad)
cli
sbb
mov
adc
stos
pop
loope
movs
shl
sar
xor
dec
xor
and
sub
lahf
push
cmp
xchg
inc
scas
xchg
mov
sti
retf
lods
xlat
fisub
sub
test
imul
jbe
sbb
or
jne
stos
mov
js
cmp
imul
sbb
fucomi
sub
or
inc
scas
mov
iret
sbb
movs
mov
jae
ins
or
inc
jge
fisubr
(bad)
test
sub
aad
loop
jb
jns
test
rcr
inc
daa
stc
enter
je
jae
push
and
xlat
jle
fmul
xor
xor
adc
or
fist
inc
cmp
inc
pop
ja
mov
arpl
popf
int3
adc
and
hlt
clc
sub
sbb
iret
push
push
pusha
aaa
dec
ret
icebp
xor
lods
xor
lock
and
in
xchg
mov
jne
js
lods
imul
xor
(bad)
and
pop
pop
push
repz
int3
faddp
cmp
cli
(bad)
loop
fwait
push
int
xor
inc
pop
cmp
sub
out
mov
inc
xchg
sub
dec
test
bt
out
iret
loope
pusha
push
int3
ins
mov
xor
and
in
jg
jb
inc
mov
pop
jmp
outs
pop
or
mov
es
mov
add
hlt
int3
cs
fisttp
xchg
pop
jne
xchg
fist
ins
retf
movs
mov
xchg
(bad)
test
in
push
pop
mov
hlt
push
adc
sub
pusha
in
lods
or
xor
ss
leave
jmp
jg
dec
mov
shr
push
pop
mov
(bad)
out
or
jmp
outs
retf
push
ds
aas
out
rcr
mov
retf
dec
into
cli
adc
jecxz
pop
mov
sub
std
mov
xlat
aas
test
icebp
repz
jae
sbb
retf
(bad)
or
mov
mov
inc
dec
aas
(bad)
aam
xlat
adc
int
add
pop
xor
jnp
xchg
pop
lods
sub
ds
inc
or
ss
inc
in
mov
jl
add
adc
div
inc
out
xchg
test
mov
sub
leave
clc
jle
pusha
or
push
sbb
mov
xor
push
jbe
mov
cdq
add
mov
nop
fsubp
dec
sbb
(bad)
das
or
push
call
mov
fdivr
mov
shl
add
and
cmp
ds
sub
call
xchg
xchg
dec
je
sbb
adc
fst
fwait
outs
xchg
mov
cli
dec
xchg
mov
add
fdivr
dec
outs
aam
jnp
fist
push
xchg
(bad)
mov
cmp
ds
retf
out
mov
cmp
or
and
cmp
std
lahf
stc
pushf
sbb
pusha
mov
test
jae
and
jecxz
pusha
push
add
mov
fld
jne
cmc
add
xor
outs
setnp
mov
aad
mov
mov
or
jno
je
pop
dec
inc
xor
pop
adc
pushf
in
and
stos
cmps
movs
xchg
retf
push
cmp
xchg
ja
push
inc
dec
(bad)
adc
arpl
cmc
jne
nop
fstp
addr16
(bad)
aaa
sahf
ja
cmp
in
hlt
pusha
out
pop
push
je
cmp
mov
lea
push
mov
xchg
dec
popf
test
xchg
dec
cmp
or
mov
(bad)
cmc
xor
and
sub
ficom
fisubr
mov
sub
jl
mov
cmp
out
xchg
nop
data16
out
inc
rcl
sub
jge
popa
shl
inc
in
mov
mov
iret
jb
cli
ror
or
xchg
pop
inc
test
imul
outs
sub
stos
add
pop
dec
fs
cmp
inc
xor
push
jecxz
dec
adc
pop
imul
gs
clc
sub
and
mov
dec
cmp
jae
or
push
ds
out
pop
(bad)
pop
pop
xor
push
mov
int
inc
arpl
gs
je
sbb
ret
lods
dec
cmp
in
mov
enter
mov
repnz
(bad)
icebp
cmp
unpckhps
out
(bad)
jo
and
popa
out
inc
cmp
leave
movs
fadd
dec
arpl
fcomp
mov
scas
sub
cmps
dec
mov
and
int3
push
fstp
repnz
xor
(bad)
fstp
pop
inc
mov
cld
(bad)
shl
cmp
pop
mov
adc
jl
movs
(bad)
retf
cmp
sub
fwait
sbb
jne
sbb
cwde
outs
stc
test
cmc
pop
retf
xor
fadd
mov
ja
cmp
in
push
push
and
mov
dec
mov
enter
fnstsw
pop
fisub
out
jbe
cs
or
rcl
dec
xor
mov
jae
push
mov
es
mov
cli
cli
sub
inc
sbb
jge
mov
xchg
cmps
pop
hlt
mov
inc
lock
mov
add
jae
jmp
lods
push
mov
mov
sbb
mov
jl
pop
or
iret
or
in
jne
jg
mov
push
pop
jmp
cmp
mov
ret
ror
les
mov
cmp
and
int
sub
mov
push
fcmovne
dec
adc
(bad)
(bad)
xchg
retf
out
mov
fimul
jno
pushf
dec
test
dec
and
dec
or
bound
xor
push
addr16
imul
inc
add
push
lea
jmp
xchg
pop
das
(bad)
in
xchg
jecxz
jge
push
sahf
ret
inc
or
cwde
ds
popa
adc
repz
cdq
dec
and
push
cli
mov
ror
jns
mov
inc
sub
add
xchg
cmp
jbe
push
jo
dec
popf
fiadd
scas
jnp
mov
xor
(bad)
fisttp
iret
pusha
movs
and
pusha
or
pop
fstp
addr16
arpl
dec
mov
mov
xchg
inc
pop
pop
clc
dec
cmp
xor
enter
fstp
mov
sub
dec
mov
push
xchg
xchg
adc
pop
in
int3
movs
mov
jb
mov
add
cld
in
or
adc
push
fiadd
call
into
mov
repz
dec
pop
jb
outs
popa
cmp
push
jnp
fstp
xchg
mov
out
(bad)
mov
dec
aam
sbb
add
sub
xchg
sbb
mov
data16
aaa
adc
pop
call
repz
aam
cmp
fisub
imul
shl
out
or
pop
mov
stc
(bad)
mov
cmp
sub
pop
iret
ss
dec
pop
push
nop
add
loop
mov
sar
shr
stos
ret
mov
xlat
mov
pop
jo
pop
push
or
call
out
xor
push
call
jecxz
sub
aas
push
adc
ds
and
pop
xchg
jmp
call
fiadd
pop
mov
js
(bad)
jmp
adc
xor
xchg
(bad)
lahf
int
and
add
jo
mov
dec
test
addr16
iret
loopne
sahf
dec
xor
mov
inc
cmps
cmp
cmp
and
add
imul
push
rcr
fisub
cmp
cdq
mov
add
pop
jno
xchg
aas
icebp
ror
add
push
ds
mov
or
sub
cmp
jae
scas
jmp
fist
sub
dec
das
test
push
push
nop
aas
dec
test
aad
add
bound
sti
inc
inc
out
ucomiss
sub
add
add
cli
or
pop
enter
sbb
jle
push
xchg
or
dec
ja
mov
push
or
aas
push
les
leave
outs
int
popa
add
out
xchg
mov
mov
pop
jle
jle
jge
mov
mov
popa
int
sbb
adc
mov
inc
xchg
outs
cli
push
es
dec
pop
std
mov
jg
mov
push
pop
push
imul
retf
dec
xor
(bad)
lds
add
or
fs
(bad)
pop
or
mov
mov
daa
fwait
xchg
pop
cwde
stos
lea
loope
std
and
out
dec
cmp
out
movs
lea
aas
retf
jecxz
mov
pop
jg
add
(bad)
cld
movs
mov
std
push
inc
jmp
jo
int3
mov
fucomip
retf
mov
dec
or
mov
test
or
or
dec
push
ins
adc
or
inc
sbb
mov
xor
cmp
out
cmp
and
rcr
clc
test
xor
cmp
cli
int3
sub
dec
imul
sti
lahf
add
xor
jne
clc
pop
push
push
mov
iret
jle
and
sub
pop
pop
mov
xor
or
rol
cmp
imul
jecxz
push
or
mul
stos
jl
push
fwait
fwait
mov
js
pop
cmp
jmp
xchg
push
or
or
popa
cmps
add
pop
jmp
stos
mov
sub
push
out
and
jbe
outs
xchg
dec
je
xlat
sti
sub
int
js
jnp
fwait
mov
mov
sub
arpl
in
fs
cmps
sar
add
or
sahf
add
xchg
xchg
fstp
xchg
push
int3
shl
and
sub
cld
lock
and
imul
add
dec
push
fcmovnbe
jl
hlt
mov
(bad)
push
jb
jns
loopne
movs
retf
cmp
(bad)
mov
sub
fidiv
int
arpl
movs
dec
outs
sbb
mov
into
mov
sahf
jns
test
call
adc
sub
loop
mov
xchg
aam
or
stc
fwait
or
stc
push
jmp
pop
mov
dec
sbb
jecxz
add
sub
nop
je
or
pop
push
push
jmpw
sub
or
push
test
xor
(bad)
jmp
or
add
xor
push
call
or
xchg
mov
loopne
add
sbb
pushf
jns
movs
popf
jnp
inc
pop
mov
add
gs
fwait
fwait
jo
lds
js
adc
mov
xchg
mov
shr
mov
mov
in
lods
dec
mov
xchg
fabs
mov
inc
xchg
stc
pop
test
cld
sub
bound
out
inc
fild
fldenv
or
loopne
(bad)
xchg
lods
sbb
cmp
jle
and
dec
push
fist
push
fcom
or
mov
gs
push
out
mov
sbb
je
push
pop
jmp
in
ror
push
jns
int
les
cmp
adc
bswap
ret
iret
mov
cmps
adc
jle
xchg
shr
mov
stc
cwde
xor
xchg
pushf
mov
push
dec
inc
mov
push
bound
dec
jmp
test
sbb
add
jno
scas
out
mov
jnp
sbb
dec
sub
adc
out
inc
lock
mov
jnp
cmp
shl
sbb
cmps
dec
not
push
mov
mov
jb
iret
aas
rcr
movs
scas
push
mov
mov
je
xchg
xor
and
in
push
adc
(bad)
jno
jb
push
out
(bad)
les
jl
sub
dec
or
xchg
cmp
mov
cmp
pop
jl
and
sbb
mov
out
stc
xlat
xor
cld
adc
jg
cmp
mov
dec
inc
jmp
fcomi
xchg
and
mov
retf
mov
sahf
jge
retf
fimul
(bad)
cmp
rcl
ficomp
fdivr
shr
test
aas
pop
sbb
dec
retf
pop
jmp
adc
fisub
ds
mov
aas
bound
ja
js
dec
fld
jns
dec
pop
into
mov
stc
mov
push
es
pop
(bad)
in
sub
ds
dec
and
and
imul
popf
outs
std
cwde
out
and
and
test
mov
fnstenv
xchg
xor
lock
push
jg
nop
cmp
jge
pop
sub
jae
ins
ja
in
arpl
lahf
jle
bound
cmp
and
out
shl
imul
or
lods
addr16
cmp
lock
jp
shl
sub
cmps
inc
pop
addr16
mov
movs
lock
jle
add
cmp
jle
push
test
icebp
je
jge
sub
xchg
sti
enter
xchg
(bad)
bt
std
add
add
sub
cmps
retf
ins
and
ds
mov
lea
mov
ja
and
or
pop
test
jnp
rol
dec
inc
fsub
xchg
pop
aam
cdq
push
pop
mov
jns
adc
push
add
fnsave
arpl
cmc
lock
mov
and
sub
or
lea
pop
sub
lock
push
ror
sub
sbb
mov
outs
jne
add
nop
xlat
mov
jmp
aad
adc
js
cmc
adc
mov
into
xor
add
aad
mov
rcr
push
(bad)
(bad)
inc
leave
loop
jno
call
test
xchg
fs
ds
(bad)
aas
push
sub
xor
adc
fcom
jmp
aam
loopne
movs
repnz
and
push
pushf
or
movs
mov
pushf
cmp
sub
fnstsw
mov
and
imul
ret
js
mov
jg
inc
out
jmp
mov
pop
idiv
add
cs
jg
neg
in
jl
push
xchg
pop
mov
aad
or
xchg
lea
mov
push
pop
and
ret
retf
push
fistp
ins
push
dec
xchg
std
add
(bad)
icebp
fwait
pop
out
xlat
sub
pop
sbb
add
add
inc
iret
cmps
push
push
movs
jno
sub
pushf
scas
add
outs
adc
movups
adc
dec
(bad)
push
push
inc
aam
add
imul
pop
jnp
jp
cli
push
mov
test
rcl
test
pushf
outs
bound
adc
jge
cmp
mov
or
sub
out
es
in
pop
sub
nop
lods
call
sub
iret
movs
sub
test
jg
das
mov
inc
mov
popf
mov
shl
aad
jl
ret
stc
jecxz
rcr
(bad)
aam
xor
ja
jp
jnp
xor
mov
inc
repz
pop
stc
dec
sub
xor
dec
fsub
xchg
inc
sub
mov
inc
repz
daa
cmp
or
shl
cmp
js
not
out
addr16
into
int
rol
cmp
outs
cmps
add
xchg
jg
cdq
imul
mov
xchg
out
out
aaa
mov
mov
mov
ret
out
lods
sahf
icebp
jmp
js
mov
push
aas
aam
pop
or
clc
push
pop
cmp
std
cmps
aaa
div
xchg
and
mov
mov
push
call
sbb
mov
pusha
cmp
pop
inc
out
fmul
clc
cmc
jecxz
pushf
sbb
xor
add
imul
xor
xor
xchg
cmp
pop
mov
into
sbb
imul
mov
imul
int3
mov
mov
pop
test
and
jno
or
mov
aad
pop
xor
xchg
mov
fidiv
adc
xor
jb
adc
xchg
jo
add
jg
loop
pop
mov
call
bound
fsub
test
aad
push
push
push
inc
xor
popf
pop
push
dec
mov
je
dec
mov
test
inc
pop
jns
xor
dec
rep
mov
inc
ja
inc
jbe
ficomp
hlt
sbb
xchg
jae
dec
mov
in
mov
sbb
mov
mov
add
inc
es
jb
cdq
dec
jbe
mov
lods
lahf
jecxz
adc
or
int3
sub
inc
(bad)
loope
fucomp
test
add
pop
not
pop
loopne
jle
sbb
test
adc
mov
push
jl
jae
and
iret
les
lods
data16
rep
jnp
inc
dec
inc
cld
xor
fist
add
repnz
mov
push
loope
sub
jl
jbe
inc
cmp
test
and
test
es
imul
ins
sub
loop
bound
adc
enter
test
push
aas
cmp
push
test
pop
mov
aaa
retf
sub
jecxz
pop
aam
fnstsw
mov
push
push
neg
mov
mov
xlat
int
test
cld
mov
shl
loopne
mov
hlt
popf
push
mov
xor
lds
xchg
add
not
lods
mov
rol
int
(bad)
(bad)
adc
into
mov
or
mov
cmps
xchg
ja
sar
stos
fistp
mov
inc
pusha
mov
sbb
mov
xchg
ja
in
mov
stos
adc
xor
aaa
and
xchg
mov
nop
out
popf
outs
es
push
xchg
repz
push
xlat
and
mov
jp
mov
cmps
inc
(bad)
pop
std
adc
je
ja
dec
xchg
and
pop
ins
rcl
(bad)
in
pop
js
mov
push
movs
imul
repnz
jo
pop
xor
pop
mov
and
ja
xor
dec
add
sub
push
stos
dec
mov
or
leave
(bad)
and
dec
jp
cmp
shr
dec
movs
stos
dec
or
nop
je
push
inc
adc
jae
add
movs
mov
jo
xor
rol
iret
dec
shl
addr16
sbb
call
ja
fnstsw
push
ficom
xchg
mov
ds
and
js
mov
fbstp
(bad)
in
mov
mov
ss
outs
mov
jns
mov
mov
sbb
mov
mov
mov
cmc
adc
into
add
ret
xchg
mov
outs
int
cmc
pop
cmp
push
mov
movs
sub
dec
int3
mov
push
mov
sbb
nop
sub
and
mov
jecxz
mov
adc
push
sar
addr16
sbb
push
or
mov
rcr
(bad)
movs
daa
and
int3
push
xor
ret
sub
in
pop
mov
xchg
fimul
retf
mov
ror
fs
dec
fild
pop
dec
jbe
sar
xchg
inc
mov
test
xor
ret
adc
dec
or
loopne
cmp
test
dec
fwait
push
push
push
adc
fistp
cdq
cld
imul
fistp
pop
cld
ret
xor
mov
pop
sbb
fidivr
cwde
(bad)
mov
cmp
pop
push
mov
pop
stos
test
cmp
stc
adc
jmp
and
jb
movs
xlat
mov
mov
push
xchg
cwde
ret
dec
sti
push
hlt
lds
nop
retf
sahf
test
(bad)
cmp
imul
movs
bound
(bad)
cs
enter
call
call
dec
cmc
mov
test
or
scas
(bad)
lods
aam
sbb
push
mov
clc
aad
out
jmp
mov
jg
addr16
inc
mov
fnstcw
lea
and
es
out
cmp
out
aaa
ss
mov
cmc
stos
fnsave
fadd
jge
loope
popa
xchg
sub
and
push
mov
adc
jo
fcomp
dec
pop
arpl
out
add
pop
mov
mov
adc
inc
pop
adc
sub
mov
adc
into
repz
int
jg
(bad)
cmp
jg
popf
std
es
shl
retf
mov
cmp
jbe
fimul
cmp
adc
adc
jmp
mov
xchg
push
stc
jg
add
ror
jnp
(bad)
sub
pop
mov
add
pop
fwait
inc
mov
dec
outs
adc
jns
retf
stc
pop
aam
mov
jmp
xchg
call
xchg
mov
pop
dec
push
mov
retf
ds
xchg
inc
jbe
scas
pop
repnz
or
sbb
push
arpl
outs
repz
dec
test
enter
ins
frstor
inc
cmc
dec
(bad)
sti
sbb
mov
jae
xor
xor
ffree
mov
mov
sbb
pop
in
push
mov
and
add
push
xor
outs
fstp
loope
jmp
xchg
popa
pop
mov
popa
adc
loop
call
push
in
imul
ds
test
fadd
xor
push
dec
(bad)
shr
aaa
mov
pusha
or
sub
loope
popf
sub
xor
out
adc
sbb
xlat
fdiv
clc
in
and
and
pop
out
pop
stos
lock
add
js
lods
mov
retf
test
xor
stos
push
xchg
mov
popa
aaa
jbe
hlt
mov
out
dec
cmp
pop
add
std
adc
and
inc
data16
loop
adc
in
mov
cs
jge
pop
shr
xor
je
dec
inc
adc
jns
mov
sub
sub
test
mov
aad
loopne
mov
jmp
enter
push
aad
sbb
pop
movs
or
and
ja
hlt
lahf
(bad)
out
mov
mov
mov
pop
adc
inc
mov
shl
fs
mov
adc
sqrtps
sahf
add
push
es
add
shl
enter
xchg
pop
test
push
xor
xor
xor
outs
dec
jb
sub
pop
rcl
push
ds
sahf
jo
(bad)
and
sbb
or
scas
mov
or
nop
dec
in
ror
cdq
loope
ins
imul
sbb
jnp
xor
daa
loopne
or
std
xor
jbe
cli
adc
sub
cmc
daa
push
xchg
lahf
in
mov
out
or
ja
daa
push
pop
adc
mov
test
xor
and
xlat
sub
pop
mov
mov
inc
gs
popa
jge
xchg
push
cmp
pop
repz
sar
movs
mov
xchg
mov
sbb
mov
addr16
xchg
adc
jle
mov
mov
mov
jp
imul
mov
div
mov
sub
(bad)
(bad)
(bad)
test
inc
push
nop
(bad)
ins
push
adc
push
into
test
out
popa
lock
ret
aaa
mov
jno
add
mov
loop
inc
cli
push
push
adc
inc
jbe
dec
xchg
push
ins
jge
fs
adc
or
add
jge
and
mov
out
fbstp
add
(bad)
mov
xchg
dec
push
fs
les
sbb
(bad)
fldenv
cmp
jecxz
dec
xor
loopne
call
(bad)
scas
das
scas
sbb
cmp
add
(bad)
aas
(bad)
repnz
loop
test
ja
(bad)
imul
xor
and
enter
sbb
dec
jnp
mov
pop
out
in
loop
imul
out
xor
sbb
and
call
lods
mov
mov
(bad)
loopne
xor
cmp
cs
ss
fadd
add
xchg
hlt
sbb
push
jno
xchg
icebp
fadd
push
push
add
cmp
add
push
cld
jnp
call
aaa
rol
add
jmp
scas
cmp
mov
sub
pop
jecxz
jns
xchg
ror
or
imul
or
retf
jbe
push
mov
or
add
lahf
lahf
data16
fs
adc
add
cdq
retf
push
inc
xchg
or
add
jmp
out
rol
stos
inc
pop
push
mov
sub
in
in
inc
add
(bad)
out
loope
out
mov
pop
xchg
xchg
push
jp
(bad)
movs
in
xor
lahf
aas
xchg
dec
pop
sbb
sub
(bad)
clc
iret
mov
cmps
fistp
push
jg
daa
mov
jnp
dec
sahf
adc
dec
in
mov
sub
out
dec
stos
neg
inc
jns
jb
mov
jg
in
scas
mov
sub
push
test
cmp
enter
sub
outs
fbld
xchg
and
pop
or
add
icebp
pop
js
stos
fidivr
and
dec
loop
jge
mov
and
in
mov
fcomi
fwait
xlat
hlt
mov
adc
inc
pop
sbb
(bad)
xor
jbe
out
(bad)
(bad)
cmp
cmps
fs
adc
add
pop
sub
mov
mov
lea
cmps
mov
jmp
cmp
pop
jmp
imul
(bad)
push
retf
stc
xor
out
(bad)
ret
jle
sub
leave
fild
sub
dec
ds
pusha
gs
mov
jp
cmp
inc
adc
imul
leave
out
pop
in
aaa
ja
mov
xlat
mov
jmp
mov
mov
rol
cdq
pop
mov
dec
and
repnz
test
cmp
add
jae
cmp
pusha
ror
ffreep
sbb
pop
push
(bad)
cmc
in
pop
xor
fisttp
(bad)
clc
mov
xchg
jbe
add
int3
mov
stos
lahf
retf
xlat
fisubr
and
push
mov
sub
movs
(bad)
cdq
dec
and
jns
(bad)
icebp
cs
out
push
adc
mov
and
pop
fdivr
and
jmp
xor
pop
imul
cdq
(bad)
pop
add
in
dec
stos
loop
adc
pop
jb
pop
jmp
shl
(bad)
mov
ss
fdivr
sbb
or
sar
adc
xchg
jmp
ret
mov
shl
iret
add
ret
sub
pop
loop
sbb
cmps
movs
mov
and
add
cmp
xchg
push
(bad)
lahf
dec
push
icebp
jmp
push
jle
out
mov
xor
inc
loop
jne
(bad)
ret
cmp
inc
sub
(bad)
lods
test
into
dec
popa
mov
dec
in
data16
jle
sub
fisub
lock
push
sbb
in
jb
adc
lock
loope
call
xchg
jmp
fsub
mov
mov
or
retf
mov
xchg
or
frndint
cwde
fldcw
test
(bad)
mov
into
mov
and
sbb
dec
dec
aas
or
retf
ins
imul
mov
ret
adc
sbb
fnstcw
pop
xor
pop
jle
outs
jmp
ffree
movs
mov
(bad)
jo
adc
fisub
or
sahf
icebp
pop
std
mov
adc
enter
jne
je
xor
mov
pop
pop
mov
scas
mov
xchg
fiadd
test
adc
imul
cmps
push
and
mov
jb
xchg
xchg
mov
mov
jge
jmp
int3
leave
mov
lahf
enter
pop
daa
add
jbe
ret
mov
call
xchg
mov
jo
ins
cmp
push
loope
mov
xchg
pusha
aam
repnz
cli
add
aaa
cld
push
jae
jo
sub
mov
cmp
pop
inc
test
jmp
push
push
xchg
ret
ret
(bad)
retf
call
outs
push
xchg
(bad)
repnz
out
out
inc
imul
loopne
mov
ss
rcl
push
inc
cmp
sbb
and
sbb
lods
sub
dec
add
mov
mov
mov
sbb
fidiv
movs
pop
or
mov
cmp
mov
ja
inc
ins
and
dec
and
sub
out
xor
cmps
add
dec
shl
xor
ins
inc
dec
and
into
sbb
jbe
dec
mov
sbb
jnp
retf
les
cmp
adc
pop
sbb
and
inc
scas
inc
sub
pop
mov
std
in
sbb
stos
test
and
in
add
ins
std
push
(bad)
rol
xchg
push
jle
push
test
add
and
push
pop
mov
pushf
jp
jns
movs
mov
scas
sub
xchg
fisubr
mov
jmp
xor
add
adc
inc
xsha256
cmps
push
loop
mov
push
ret
outs
shl
retf
out
rcr
xlat
test
and
mov
sub
outs
xor
jecxz
popa
in
inc
int
cli
ror
ret
lods
shl
push
popa
dec
inc
mov
adc
add
stos
fucom
cli
pop
lods
sub
cs
xchg
mov
dec
sti
shr
mov
adc
sbb
(bad)
call
ins
push
mov
aam
inc
pop
ds
out
lahf
add
fwait
cmp
xchg
pop
lods
dec
sahf
mov
movs
inc
jmp
or
and
jne
lock
pop
addr16
push
outs
jmp
mov
outs
scas
mov
xchg
cli
push
jge
(bad)
fmul
scas
pop
sbb
jbe
je
stos
jl
adc
xor
test
repz
xchg
daa
jl
mov
leave
add
xchg
inc
frstor
test
div
loopne
jo
add
fisttp
sbb
cwde
test
lea
je
ins
xlat
jmp
stos
mov
mov
test
popf
sbb
shr
mov
push
das
cld
inc
xor
fld
fsub
repz
movs
out
in
or
in
dec
mov
xchg
jmp
imul
mov
imul
test
pop
pop
pop
adc
push
xchg
fld
jmp
mov
xchg
sbb
mov
pop
add
fdivr
sub
sbb
push
test
sub
xor
int
add
mov
mov
push
sbb
adc
je
xchg
add
xchg
mov
push
push
out
les
xor
sub
stos
and
xchg
ret
cwde
xor
(bad)
aam
push
shl
push
sbb
loopne
lea
clc
inc
out
icebp
rcr
cli
mov
outs
xor
es
or
mov
xor
cli
xchg
lahf
xor
inc
mov
jl
dec
fs
jbe
out
mov
lea
fldenv
test
cld
scas
in
push
out
jmp
(bad)
iret
lods
and
or
cwde
push
dec
fs
in
xchg
mov
mov
push
lds
and
jle
mov
sar
shl
mov
ffreep
mov
(bad)
out
push
(bad)
cmp
pop
inc
aaa
test
fmul
rol
aas
xchg
popf
adc
adc
gs
clc
sbb
imul
pop
pop
add
or
push
or
jmp
jbe
lods
lock
dec
outs
das
cmp
dec
scas
cdq
pop
or
xchg
dec
and
icebp
xchg
test
gs
push
xor
(bad)
clc
test
pop
repnz
pop
jmp
mov
mov
or
sti
xchg
add
(bad)
dec
push
into
ins
mov
or
mov
(bad)
rcl
dec
int3
cmp
add
push
in
(bad)
dec
mov
mov
js
mov
stos
(bad)
mov
scas
xor
push
push
push
test
(bad)
aad
push
jl
add
pushf
outs
xor
imul
cmp
outs
retf
mov
push
push
mov
dec
repnz
or
add
and
add
and
out
mov
aaa
jae
cmc
push
scas
and
xchg
fild
pop
in
xchg
dec
ds
fwait
add
xchg
pushf
mov
ds
mov
dec
cld
out
jle
sbb
lahf
mov
sbb
cmc
xchg
call
nop
imul
gs
jb
data16
pop
xchg
out
xor
bound
push
es
frstor
dec
mov
mov
adc
xchg
(bad)
loopne
lahf
pop
shl
fsub
sbb
loopne
ret
rcr
leave
or
repz
ret
bound
xchg
and
ret
dec
imul
call
imul
mov
push
jl
out
shl
jne
js
jae
rol
and
jecxz
xchg
mov
outs
lea
xor
cld
mov
loop
xchg
and
sti
cmovl
rol
xchg
dec
lods
sub
pop
rcl
cwde
ins
out
(bad)
jmp
out
push
adc
das
push
neg
in
je
add
inc
fucomi
sti
adc
add
xchg
ret
xor
test
ret
(bad)
pop
jmp
outs
cmps
xchg
mov
push
sahf
jns
imul
aam
outs
jg
lock
cmps
fimul
lock
movs
int
xor
and
pop
repz
cmp
pop
mov
mov
sar
sbb
mov
(bad)
xor
adc
sub
mov
rol
iret
rol
call
pushf
loop
push
pop
and
mov
punpcklwd
mov
popf
cli
into
push
mov
pop
test
adc
pop
cmp
xor
mov
shl
mov
mov
xor
jge
stos
add
xor
ins
out
push
jl
idiv
or
repnz
lods
jmp
jg
imul
adc
xchg
jg
(bad)
jp
fsubr
lea
push
lea
cmc
cmp
addr16
or
call
mov
aas
jmp
and
in
mov
jecxz
ins
mov
dec
sahf
icebp
call
mov
scas
jg
std
sbb
adc
push
std
cmp
mov
inc
mov
repz
xchg
or
pavgw
push
les
and
dec
inc
jg
clc
jmp
cmp
dec
mov
(bad)
es
xor
(bad)
ffree
sub
xchg
lock
mov
je
inc
out
xor
je
(bad)
daa
or
sub
xchg
mov
ss
mov
rcl
shl
add
mov
scas
xchg
les
mov
dec
outs
xor
jecxz
idiv
test
xchg
mov
pop
pusha
mov
scas
xor
pop
or
sub
jae
fldenv
xchg
pop
adc
(bad)
mov
ss
cli
sbb
mov
mov
int
jbe
inc
idiv
pop
mov
mov
fwait
add
push
pushf
xrelease
mov
mov
dec
inc
xchg
movs
int3
lods
pop
mov
out
fimul
fstp
les
clc
das
pop
mov
inc
jbe
cmp
jns
aam
out
movs
test
push
stos
and
and
shr
xor
addr16
mov
test
jae
mov
sti
and
sbb
xchg
loop
(bad)
call
push
shr
dec
adc
pop
xor
jno
out
aas
(bad)
paddsb
fdiv
shr
jg
push
and
xchg
adc
sub
dec
sti
icebp
arpl
bound
push
mov
out
jecxz
cmp
in
sub
ds
inc
jns
add
(bad)
imul
cmp
(bad)
inc
icebp
jnp
mov
rcr
das
(bad)
out
je
sar
adc
hlt
scas
stos
outs
into
(bad)
rol
xor
lods
sub
sbb
loope
mov
inc
pop
cli
les
fs
or
or
scas
(bad)
or
jns
mov
jnp
enter
cmp
cmps
push
ss
aam
call
mov
add
sub
outs
rcr
call
push
xor
popf
(bad)
mov
cmps
loope
xchg
hlt
in
int3
(bad)
cmp
mov
pop
outs
movs
inc
hlt
xor
pop
mov
cmp
mov
jg
or
(bad)
mov
ret
pop
adc
ss
add
sbb
int
gs
rcl
into
fwait
ja
inc
ficom
pop
outs
fild
js
dec
jne
enter
sbb
adc
in
jecxz
fiadd
sbb
outs
inc
aam
(bad)
xchg
out
dec
sub
fiadd
arpl
(bad)
and
or
fcmovnbe
adc
arpl
xchg
(bad)
in
inc
jo
pop
jno
push
sbb
dec
test
ins
sbb
add
mov
push
fisubr
loopne
aad
fwait
inc
mov
repz
ret
pop
cmp
mov
sahf
mov
sub
clc
push
adc
aas
or
int
mov
clc
ins
sbb
jno
daa
push
pop
mov
cli
mov
jae
dec
fcmovnu
inc
inc
add
lods
push
fild
lds
bound
add
adc
int3
retf
inc
mov
cdq
xchg
jecxz
adc
(bad)
cs
pop
ret
dec
inc
mov
out
xlat
cmp
jbe
(bad)
out
inc
out
scas
inc
stos
cmp
call
sahf
xchg
cmp
and
and
arpl
and
lods
xchg
cld
push
ret
popa
in
les
cwde
lds
popw
mov
jbe
lds
(bad)
jae
movs
push
jns
call
(bad)
jns
enter
xchg
cli
adc
stc
cli
dec
ja
add
jle
repz
or
mov
xchg
xor
add
out
aam
xor
aas
jge
mov
pop
es
addr16
loop
cmp
push
mov
adc
pushf
mov
lods
push
pop
push
mov
dec
xchg
xor
xchg
xor
mov
lock
xchg
pop
cmp
shl
daa
out
int3
dec
not
fidiv
cs
cmp
mov
out
xor
inc
sub
push
adc
fnstenv
das
mov
scas
push
das
jo
aad
mov
pop
loop
mov
int3
das
or
adc
test
js
push
push
das
and
or
jl
dec
fsub
or
jae
push
jb
std
movs
xchg
call
movs
imul
adc
mov
int3
add
ret
and
pop
xchg
icebp
repz
jb
adc
push
jb
add
test
clc
iret
xchg
or
inc
sbb
popa
in
push
xchg
jns
or
jmp
dec
daa
outs
mov
cmp
xchg
mov
or
cmp
in
pushf
xchg
pop
push
sub
into
dec
mov
xchg
retf
pop
in
sahf
jno
dec
sti
scas
icebp
das
jne
mov
or
add
jecxz
push
add
(bad)
pop
fld
ins
cld
neg
cmp
cld
addr16
and
xchg
pop
add
in
imul
xchg
ds
call
lods
outs
lahf
je
and
xchg
jg
mov
in
sti
rol
add
and
mov
loopne
arpl
jp
call
add
mov
pop
js
cwde
pop
test
adc
je
inc
xor
push
icebp
fstp
xchg
pusha
test
ins
mov
pop
hlt
out
ret
or
inc
neg
(bad)
ret
mov
and
imul
mov
xchg
imul
xchg
sub
fs
or
inc
jle
outs
mov
loopne
jle
mov
and
pusha
mov
jnp
pop
pop
mov
stos
out
xlat
ja
mov
movs
lds
sbb
xor
dec
pop
mov
sti
(bad)
xchg
jge
dec
mov
in
cli
(bad)
and
dec
inc
dec
jo
ins
cdq
dec
popf
es
movs
cmp
popa
sub
jg
fsubr
pop
jmp
clc
xchg
enter
and
shl
adc
and
jns
sbb
fcmovnu
push
inc
cmp
nop
jb
pop
mov
sti
mov
test
push
(bad)
sub
popf
sub
sar
test
aad
rol
add
xchg
mov
aad
cmp
jle
push
mov
xor
mov
jne
leave
les
mov
mov
add
push
pop
jge
aad
rcr
fist
in
repz
cmc
ds
rcl
(bad)
jae
sub
(bad)
aam
js
cmp
jmp
cmp
test
sub
movs
xchg
iret
js
cmps
out
pop
xor
xor
or
sbb
adc
in
loope
pop
mov
gs
jmp
push
sub
(bad)
arpl
sahf
inc
lea
cmp
outs
loope
mov
test
rcl
add
xchg
sub
retf
cmp
into
mov
cmc
cmp
cmps
fs
jb
xor
cs
out
dec
or
stc
inc
mov
push
lock
dec
sub
mov
outs
outs
jns
daa
xor
ret
push
mov
leave
sub
or
(bad)
shl
or
ins
add
pop
jae
ret
adc
mov
lahf
and
sti
lods
mov
rol
fadd
call
(bad)
out
lahf
repz
(bad)
add
mov
(bad)
out
addr16
shl
inc
fld
push
sub
pop
mov
loop
or
arpl
push
dec
pushf
push
sub
iret
inc
jnp
fild
js
fucomp
sub
mov
fimul
test
jae
imul
test
call
mov
loope
out
adc
pop
xor
js
inc
jg
jno
mov
dec
sahf
clc
jmp
mov
dec
dec
repz
fstp
or
fdivr
xor
or
dec
(bad)
in
rol
adc
push
ret
adc
dec
or
aaa
push
pusha
ret
sti
jo
sbb
repz
push
jg
adc
dec
xchg
lahf
or
dec
xchg
mov
daa
inc
lahf
sub
adc
jmp
clc
cmp
icebp
nop
aaa
and
movs
(bad)
rcl
jg
sbb
les
push
xchg
out
inc
xchg
mov
stc
std
(bad)
out
and
mov
ret
cmps
push
call
sub
xor
mov
mov
inc
(bad)
xor
dec
and
dec
xor
sbb
adc
mov
test
dec
loope
lods
add
sbb
sbb
mov
jmp
xor
sahf
or
aad
or
retf
daa
in
add
sti
mov
into
dec
xchg
and
jne
stos
addr16
es
ins
sub
jno
nop
pop
jmp
mov
cmp
jnp
mov
in
inc
dec
movs
rol
sub
movs
dec
pop
stos
fisubr
pop
addr16
(bad)
neg
cdq
inc
jle
test
and
call
inc
(bad)
mov
xchg
ss
jle
adc
test
dec
in
aam
repz
add
pop
int3
jmp
push
pop
mov
arpl
fadd
popf
sti
loop
scas
popf
pusha
out
js
(bad)
in
mov
dec
mov
shl
(bad)
xor
xchg
ins
push
shr
(bad)
xchg
xlat
mov
ds
repz
lods
push
mov
mov
dec
int3
mov
loopne
push
cmp
stos
dec
add
jl
sbb
xchg
lea
enter
jg
pop
xor
lods
inc
shr
mov
xor
add
imul
in
xor
mov
mov
jbe
or
cmp
jmp
loop
cmp
pop
adc
nop
cdq
push
movs
and
icebp
and
pop
(bad)
in
cmp
ins
mov
jmp
aas
aas
jne
ja
push
xchg
adc
js
in
mov
mov
dec
jp
mov
cmp
pushf
cmp
ror
out
sub
ret
xchg
jge
daa
add
xor
pop
sbb
aad
push
jo
cmp
jp
adc
and
adc
jmp
sbb
es
jo
imul
mov
into
inc
imul
loopne
enter
cmc
jge
movs
jmp
shl
not
pop
je
pop
mov
js
xor
xlat
lods
mov
jbe
loopne
(bad)
xor
std
mov
(bad)
sahf
das
(bad)
mov
inc
aas
ret
and
inc
sub
mov
hlt
sbb
lods
aam
add
jae
jnp
lds
push
fisttp
or
jmp
fstp
jbe
or
inc
iret
and
mov
dec
loopne
pop
dec
ds
aam
sbb
push
xchg
xchg
popa
ficomp
stc
into
cmp
mov
add
nop
and
popf
idiv
push
push
pusha
inc
dec
not
pop
mov
jge
pusha
test
pop
mul
push
xor
cmp
lahf
pop
pop
outs
add
adc
or
add
mov
sbb
shr
sbb
and
xchg
mov
or
pop
mov
inc
fdivr
lods
fs
adc
repnz
outs
outs
test
push
mov
dec
loop
call
add
iret
push
jns
in
stc
fnstsw
mov
push
lods
adc
sti
pop
add
xlat
scas
pop
cwde
retf
daa
pushf
stos
imul
jbe
cmp
cmp
push
sbb
sbb
cdq
das
pusha
imul
ror
push
mov
adc
aam
sti
mov
(bad)
fdivr
push
stos
and
lahf
xchg
xor
cmp
call
sub
pop
push
jae
sub
inc
and
jno
imul
dec
adc
retf
add
dec
inc
push
and
sub
and
fcom
jnp
ret
inc
jne
jl
push
and
dec
mov
mov
mov
scas
jle
stos
jp
test
in
iret
bound
cli
inc
mov
sbb
bound
push
jno
rcr
ja
sbb
xchg
sub
(bad)
nop
fwait
sub
or
and
mov
inc
mov
fwait
das
mov
ins
jmp
jmp
sbb
repnz
jo
jle
js
in
or
imul
xchg
xor
add
jp
clc
sbb
push
and
retf
jmp
jle
inc
inc
call
xor
das
adc
mov
push
and
dec
mov
or
xchg
daa
test
pop
enter
mov
push
aas
jp
cmp
adc
(bad)
sub
sub
or
xchg
shr
movs
xchg
shl
addr16
xor
js
fild
popf
retf
arpl
cdq
mov
mov
aam
les
ret
xor
sub
cmp
fisttp
daa
dec
scas
mov
dec
mov
in
xchg
lock
xor
fst
pop
nop
mov
jae
out
clc
(bad)
and
cmp
and
in
jno
pop
sub
in
(bad)
nop
xor
stc
jo
inc
xor
in
cmp
jg
xor
adc
pop
jl
loopne
jb
mov
aad
inc
stc
out
dec
cdq
push
dec
mov
mov
nop
je
mov
arpl
(bad)
and
mov
pop
retf
push
and
outs
fisttp
xchg
xchg
push
icebp
imul
dec
sub
dec
fsubr
cmp
popa
gs
sbb
sub
cmp
jae
out
mov
adc
sub
out
mov
rol
nop
aas
sub
fistp
mov
adc
hlt
push
call
and
sub
sbb
push
aaa
fstp
push
inc
dec
and
fwait
pop
popa
adc
sbb
in
out
std
mov
sbb
mov
jp
push
test
stc
xchg
pop
xchg
cmp
mov
mov
mov
rcl
sub
div
ficom
xor
popa
test
mov
and
xor
adc
rep
outs
js
addr16
mov
clc
dec
jmp
jmp
(bad)
jge
aaa
aas
aad
and
push
jg
pop
(bad)
mov
pop
fcomi
push
inc
push
adc
mov
cmp
out
inc
add
ret
inc
sbb
ffreep
inc
jb
outs
nop
ins
stc
push
pop
mov
jmp
push
call
adc
inc
cmps
dec
xchg
pop
inc
pushf
neg
(bad)
xchg
in
xor
test
stc
div
out
iret
fsub
mov
stos
push
test
inc
xor
scas
mov
jnp
adc
jnp
scas
sbb
ror
test
repz
jmp
pmaddwd
fcomp
aam
inc
cs
mov
jb
sbb
xchg
inc
push
push
dec
int3
(bad)
xchg
push
test
mov
leave
aad
jno
mov
inc
out
adc
das
xor
fs
mov
dec
sub
and
in
mov
lahf
fisubr
and
ja
jg
scas
mov
push
push
jecxz
inc
xchg
sub
lods
fisubr
dec
das
sahf
loopne
movs
daa
fst
ds
scas
mov
add
(bad)
mov
movs
add
inc
cld
mov
gs
call
inc
(bad)
(bad)
rcr
inc
(bad)
dec
arpl
mov
and
jbe
mov
aam
jo
rol
fmul
inc
in
pop
sti
aas
(bad)
call
sar
ja
fs
adc
nop
movs
pusha
xor
sar
cs
inc
ror
ret
cli
mov
iret
mov
xor
cmp
push
jae
retf
sbb
rcl
add
in
leave
xchg
into
or
adc
adc
movs
mov
cmp
xchg
xor
(bad)
cmp
or
cmp
xor
and
push
cmp
(bad)
jge
jmp
xor
test
and
xchg
adc
into
popf
ins
mov
mov
cmp
xchg
cmp
bound
gs
jbe
or
mov
jno
jmp
dec
fsubr
xchg
or
stc
xor
clc
add
aam
pop
not
fidivr
jns
push
fstp
jmp
loop
out
pop
imul
neg
jne
fwait
es
test
add
out
or
mov
dec
cli
aas
call
inc
jl
inc
sbb
outs
dec
jo
inc
cli
imul
adc
mov
fs
cmps
mov
stos
dec
(bad)
jb
call
stos
rcl
push
jmp
or
clc
sub
ss
test
xchg
mov
rcr
jp
out
loopne
push
icebp
pop
dec
test
adc
clc
push
xor
adc
sub
mov
fnstenv
outs
cli
jmp
les
push
xor
pop
or
xor
and
ins
add
add
int
sar
scas
pop
mov
loop
inc
sub
(bad)
pop
adc
loop
ja
iret
mov
add
movs
or
aam
pop
je
push
cmp
jmp
xchg
jmp
xor
push
repz
cmc
push
sbb
aad
pop
icebp
dec
mov
lods
xchg
dec
and
mov
sub
adc
aaa
xlat
cwd
mov
add
out
test
mov
push
(bad)
cmp
sbb
rcr
xchg
retf
xchg
out
fdiv
push
fist
lea
in
inc
push
or
popf
jo
dec
pop
adc
cmp
rol
lods
sahf
jge
or
loopne
or
or
dec
icebp
out
repnz
lds
adc
test
je
arpl
mov
jnp
movs
jmp
mov
scas
pop
adc
push
into
enter
scas
xor
(bad)
pop
bound
stc
cmps
int
pop
rcl
or
call
das
sub
mov
lahf
pop
repnz
pop
icebp
mov
sub
lock
lea
gs
jp
fistp
adc
xchg
sbb
jb
mov
jnp
movs
repz
mov
lods
jg
or
dec
shl
cmp
ins
sti
xor
push
cmp
mov
mov
sbb
jmp
sti
inc
mov
mov
xchg
sbb
cmp
pop
push
adc
lods
cmp
inc
jmp
xlat
mov
sub
jbe
cdq
adc
into
sub
popf
and
jp
shl
adc
sbb
or
jmp
stc
ror
mov
gs
(bad)
lods
inc
cmp
or
dec
mov
push
scas
pop
jmp
sbb
cs
test
hlt
je
and
xchg
xor
and
cmp
jbe
xor
sub
dec
ja
cwde
dec
mov
aas
xchg
mov
push
fsub
les
adc
popa
in
add
fidiv
sub
mov
cmc
jne
pop
jae
clc
test
lods
addr16
ja
stos
icebp
ror
in
cwde
scas
jecxz
jg
dec
loopne
scas
mov
ret
sub
fwait
xchg
sbb
inc
cmp
leave
xchg
cmp
std
push
or
pop
(bad)
dec
pusha
mov
(bad)
bound
movs
(bad)
aas
aas
fsubr
test
fsubr
mov
test
ficom
xor
das
cs
sbb
push
inc
or
mov
fistp
shl
popa
out
rcl
repnz
mov
or
ins
dec
(bad)
mov
jecxz
in
xor
xchg
aad
or
cmp
sar
push
out
sub
push
aam
xchg
cs
mov
push
into
pop
out
xchg
sbb
cmp
mov
fld
gs
jmp
daa
ror
push
sub
dec
mov
sbb
xor
in
shr
xchg
jnp
test
fistp
xor
push
int3
(bad)
sub
test
loope
sub
jl
push
mov
push
aaa
add
imul
sbb
push
jae
jmp
call
icebp
mov
scas
retfw
inc
push
pop
repnz
pop
sub
test
out
rcl
sub
cwde
xchg
dec
lea
or
sbb
adc
pusha
cli
je
push
imul
ds
push
inc
arpl
lock
aas
mov
ret
and
jo
(bad)
test
cwde
mov
cmp
test
add
(bad)
mov
mov
test
lock
leave
neg
cmp
xor
repz
and
pop
xor
ins
add
push
pop
test
popa
popf
fpatan
mov
pusha
adc
push
arpl
inc
mov
dec
xor
ret
push
mov
push
movs
or
ins
cmp
push
dec
retfw
fs
stos
push
cmc
mov
xor
xchg
pop
dec
nop
pop
and
cmps
pop
aaa
jo
loop
inc
sbb
jb
ss
adc
cwde
in
dec
cmps
inc
jmp
adc
ins
xor
ret
shr
retf
push
xchg
push
pop
jecxz
mov
stos
mov
popf
(bad)
cld
sub
mov
xor
fisubr
xor
add
inc
mov
mov
or
or
shl
(bad)
aad
fs
sub
mov
jecxz
ret
push
adc
adc
out
stc
out
retf
std
shl
not
fstp
(bad)
(bad)
push
add
dec
mov
test
sub
sub
loope
ret
cwde
pushf
outs
inc
cmp
in
cwde
add
jae
or
(bad)
(bad)
push
or
cdq
cmc
jecxz
inc
sbb
(bad)
outs
outs
repz
xchg
je
xchg
arpl
scas
je
sti
std
cmp
fisttp
adc
xchg
xor
mov
popa
dec
jb
push
jp
frstor
fbstp
aad
cmp
popf
jnp
loopne
pop
mov
add
(bad)
(bad)
das
out
cmp
sbb
fisttp
xchg
iret
push
loop
leave
int
sahf
jbe
pop
cmp
popf
(bad)
sbb
imul
es
mov
in
pop
sub
popa
call
jno
jg
dec
sub
cmc
loope
xchg
pop
aas
mov
stos
pushf
dec
pop
repnz
sar
xor
sbb
sti
ins
sar
enter
push
mov
push
in
les
or
adc
movs
mov
jp
push
fdivr
jo
push
pop
jb
push
add
jge
dec
jp
data16
sub
repz
sub
das
cmc
pop
lea
scas
mul
inc
or
dec
cmp
retf
jns
adc
push
outs
xor
outs
mov
sub
lods
ja
rol
add
xchg
adc
outs
cmp
sbb
fimul
shl
loope
stos
xor
in
push
mov
mov
or
add
jmp
fisub
retf
jns
sbb
imul
cli
jns
test
jbe
hlt
ds
imul
push
cwde
fnstenv
add
xchg
pop
xchg
test
fldcw
push
test
mov
lds
adc
ins
stos
pop
pop
or
jns
add
add
out
dec
and
jnp
fcomp
mov
xchg
xchg
int
(bad)
push
or
je
pusha
pop
sub
xchg
call
into
in
fs
mov
pop
test
test
repz
fisub
sub
out
rcr
mov
adc
pop
cwde
pop
stc
or
push
add
je
(bad)
sahf
mov
ins
mov
push
pop
mov
xchg
cmp
repz
jmp
jl
shl
ds
and
fisubr
ret
inc
mov
mov
push
lods
xor
sahf
repz
push
xlat
(bad)
(bad)
and
fisttp
mov
inc
das
mov
test
call
mov
mov
sti
mov
jle
int3
icebp
mov
in
pop
lods
call
jne
rcl
xchg
(bad)
out
xchg
jb
add
shl
xchg
sahf
sbb
push
adc
adc
test
pop
xor
or
and
retf
sub
ret
and
bound
push
sahf
ret
ins
inc
pusha
xchg
jb
fisttp
pusha
mov
shl
xchg
push
in
and
imul
retf
daa
xor
cdq
add
sahf
enter
sub
cdq
dec
cmc
dec
mov
les
repz
jl
dec
sbb
mov
jb
movs
sub
loopne
and
adc
xchg
jae
ins
mov
add
(bad)
inc
lods
pop
pop
xchg
retf
cmps
out
mov
xor
add
dec
add
inc
mov
test
retf
test
inc
bound
(bad)
in
repz
dec
(bad)
pop
mov
inc
fsub
push
js
sub
or
aaa
sti
int3
dec
mov
in
mov
in
adc
xchg
xchg
mov
xor
(bad)
mov
fnstsw
mov
mov
mov
add
mov
add
cmp
jp
mov
test
xor
lods
aam
xor
sti
dec
push
mov
or
call
jns
in
fs
dec
rcr
in
test
add
xlat
lahf
imul
arpl
sub
or
mov
vsqrtpd
out
sbb
sub
bound
xor
inc
jnp
add
and
ret
test
sub
mov
in
jno
fcom
xchg
cmp
shr
pop
xchg
pusha
ret
in
movs
mov
or
fld
push
cli
aad
inc
lock
jae
dec
call
sbb
into
popa
adc
int
jns
or
xchg
in
(bad)
ficomp
in
(bad)
xchg
cld
jbe
hlt
or
adc
push
xchg
or
dec
shl
shr
sub
test
adc
out
pop
or
inc
mov
add
dec
inc
inc
and
(bad)
push
loopne
adc
xchg
ins
mov
outs
jno
loop
xchg
leave
xor
fld
sar
inc
shl
xor
ins
mov
pop
sub
mov
xor
pop
cmp
cs
push
inc
dec
mov
pop
cwde
pop
dec
je
sub
sahf
cmp
jle
daa
jecxz
jnp
int3
js
xchg
push
movs
ror
or
xchg
cld
pop
adc
ss
mov
pop
call
scas
shl
xor
xchg
arpl
mov
cld
mov
add
aam
in
fcomp
sub
stc
enter
jo
adc
int3
xchg
ror
or
ins
and
xor
nop
mov
into
adc
rol
push
ficomp
xor
xchg
ins
mov
xchg
pop
cmp
cmp
and
lock
adc
lds
jp
pop
and
stos
cmp
stos
ins
cdq
movs
push
lods
inc
mov
or
cmp
ret
push
xchg
pop
scas
add
(bad)
add
ds
push
(bad)
ja
pushf
lea
movs
jb
not
xchg
dec
stc
jb
ds
inc
cmps
pop
push
into
sar
pop
std
or
add
retf
test
hlt
add
mov
mov
add
getsec
into
xor
hlt
(bad)
xor
clc
push
add
xchg
add
es
push
in
cmp
aas
xchg
pushw
mov
data16
sub
cmp
cwde
sbb
and
adc
scas
daa
sbb
js
or
xor
js
sub
pop
inc
icebp
cdq
outs
inc
dec
cmp
dec
mov
fdivr
cmps
push
xchg
push
gs
daa
mov
in
jp
sbb
dec
mov
jbe
push
mov
add
test
mov
push
or
test
sbb
nop
repnz
aad
sbb
sahf
out
xor
cmp
fnstcw
jecxz
js
and
sub
jbe
iret
cwde
enter
sub
xchg
adc
fsubr
cmp
(bad)
in
mov
data16
shl
jp
push
xor
push
fmulp
mov
inc
mov
hlt
and
das
loopne
mov
sub
sahf
mov
lods
xor
sti
in
adc
cmps
and
dec
ss
popf
movs
sbb
(bad)
xor
lea
imul
cmp
stos
jecxz
outs
hlt
mov
out
in
sti
xchg
mov
xor
push
(bad)
xchg
pop
out
daa
fsub
jbe
mov
sbb
push
popf
adc
movs
into
es
push
add
div
pop
sar
cli
test
xor
daa
or
mov
inc
add
in
out
add
inc
in
dec
ins
lds
dec
xchg
mov
es
stos
dec
gs
dec
ins
fistp
sahf
aad
iret
cs
test
vpmuludq
(bad)
daa
mov
dec
xlat
pop
jmp
cmps
sbb
fiadd
push
repnz
lds
ins
mov
mov
mov
stos
jb
jae
mov
pop
ins
int3
test
add
xchg
xor
push
and
(bad)
lods
jge
pop
repz
and
cwde
jge
jbe
sbb
lds
retf
mov
pop
cwde
and
js
and
cmp
fcom
cmc
push
test
mov
mov
add
sub
arpl
cmp
repnz
das
std
jae
lods
pop
shr
cmp
or
xchg
into
and
xor
(bad)
jns
mov
test
xchg
sti
pop
or
mov
in
sbb
inc
loop
test
lock
push
movs
and
sar
cli
and
aam
mov
pop
imul
es
scas
hlt
and
stos
cmps
scas
adc
retf
retf
aas
addr16
scas
jl
ds
dec
mov
pop
pop
loopne
mov
adc
sar
sub
aam
outs
cmp
sbb
out
sub
in
adc
xlat
or
shl
jmp
xor
mov
pushf
pop
xchg
js
cld
jl
sbb
movs
mov
xchg
xchg
popf
pop
mov
pavgw
test
out
call
jo
jne
xchg
push
enter
xchg
nop
bound
or
(bad)
movs
inc
jmp
hlt
popf
int
fcmovu
jne
jae
les
js
xchg
stos
ja
xor
adc
retf
push
cs
aam
ret
lods
scas
or
fisttp
sti
pop
mov
shl
push
xor
sub
mov
pusha
mov
mov
lea
sub
push
jbe
fadd
test
(bad)
popa
outs
aas
add
enter
loopne
div
retf
add
pop
cdq
cmp
aam
mov
jp
cmp
mov
xchg
aam
scas
retf
pop
mov
into
call
push
sbb
inc
mov
xchg
mov
daa
das
retf
inc
jbe
lahf
xor
test
jge
push
jp
or
(bad)
pushf
adc
and
mov
enter
fsubr
loope
lds
test
sbb
(bad)
pop
mov
push
jl
push
ins
pusha
imul
push
inc
mov
xchg
jbe
imul
dec
mov
(bad)
stc
cmp
ds
pop
and
daa
mov
leave
jmp
pmaddwd
pop
xchg
ds
cli
in
popf
adc
push
nop
cmp
sub
sub
fisub
sbb
sbb
xchg
aas
cmp
push
ss
push
pop
add
enter
ret
mov
adc
mov
popa
outs
cmps
mov
aam
jae
jg
adc
outs
xchg
sti
cmp
fiadd
(bad)
cwde
aas
add
jecxz
and
sar
pop
in
jmp
in
ins
mov
add
add
jae
xrelease
inc
xor
sbb
sti
sub
ror
add
mov
or
pop
mov
mov
shr
cmp
jl
cmps
mov
stc
aad
add
jecxz
movs
out
in
sbb
and
mov
lock
and
or
stos
loopne
mov
popf
dec
jle
scas
or
jp
inc
push
jge
jo
pop
pop
ret
xchg
fistp
xchg
push
cld
iret
jmp
jns
push
mov
sub
sbb
test
and
stc
ja
retf
cmp
lods
mul
and
jg
fdivr
cmp
pushf
pop
iret
jp
xor
and
int3
clc
das
ja
cli
repnz
and
cdq
mov
mov
and
and
mov
sub
adc
cli
pop
call
cmp
into
or
sub
pop
dec
mov
ss
(bad)
pop
mov
fild
or
das
cld
in
xor
push
leave
in
xchg
cmp
jne
nop
mov
(bad)
outs
pusha
(bad)
xor
neg
mov
es
scas
add
and
cld
fdiv
sbb
cld
mov
lahf
test
aad
jmp
shl
cmp
dec
mov
jns
xor
rcl
stc
daa
pop
arpl
(bad)
loope
mov
loope
jb
jge
and
icebp
aad
(bad)
scas
in
pop
aas
jmp
sbb
rol
aam
addr16
imul
mov
popa
imul
jne
pop
(bad)
mov
mov
push
popf
fnstsw
cmp
xor
into
add
cmp
outs
push
adc
jno
jmp
stc
add
(bad)
cmps
div
mov
fwait
repnz
into
dec
hlt
movs
rcr
sub
and
(bad)
fcom
out
or
sub
out
aas
inc
mov
fcomp
lahf
inc
pusha
cmp
sub
lods
loopne
loopne
aam
stc
push
stos
rcl
outs
call
loope
mov
jo
out
xchg
adc
pop
lods
out
sub
not
cmp
in
test
ja
sub
jb
sub
outs
dec
ror
cmp
dec
outs
pop
cmc
add
ins
cwde
pop
mov
push
shl
mov
fld
jmp
adc
fwait
adc
mul
fst
xor
push
or
mov
call
sub
lock
or
fstp
pop
pop
jl
(bad)
call
aas
adc
ins
pop
jb
jae
jg
sub
xchg
and
cwde
jmp
mov
pushf
neg
pop
xor
pusha
push
scas
vmovupd
(bad)
sahf
xor
cmp
jns
xor
dec
mov
xchg
pusha
sbb
dec
mov
mov
in
and
pop
lods
scas
xor
(bad)
and
call
outs
xchg
pop
mov
daa
adc
jne
hlt
in
inc
and
sub
adc
mov
std
pushf
fsubr
xchg
call
bnd
scas
dec
or
jge
(bad)
cmp
ror
jne
fiadd
or
cmps
pop
je
xor
cdq
add
adc
add
jl
out
xchg
sub
cmc
int
xchg
inc
std
test
push
sub
stos
pop
lods
(bad)
loopne
rcl
imul
jne
or
add
or
lock
jl
xchg
jl
fs
inc
sub
mov
jne
les
fisttp
pushf
sbb
xchg
mov
mov
adc
inc
pop
rcl
dec
jecxz
sub
hlt
fwait
mov
xchg
mov
(bad)
pop
pop
adc
(bad)
and
and
stc
add
jg
xor
jmp
cs
mov
adc
retf
cmp
(bad)
out
loop
sbb
jb
aaa
and
sti
enter
cmps
gs
shl
mov
and
test
test
mov
xchg
scas
mov
hlt
shr
cmc
cmp
dec
jp
sti
sbb
data16
or
mov
adc
and
xchg
cmp
pop
jecxz
into
(bad)
popf
test
push
push
pop
or
mov
(bad)
sbb
ds
(bad)
aad
and
ror
adc
cmp
and
call
ss
pushf
add
xchg
test
jle
push
xchg
cmp
scas
lds
sbb
test
adc
pop
push
xchg
cmp
lods
and
jecxz
fsub
ins
daa
xchg
and
rol
dec
push
out
mov
into
sahf
and
pop
dec
mov
mov
enter
mov
aaa
aam
xlat
fnstcw
or
mov
xchg
push
or
fdivr
rcl
sub
arpl
out
in
neg
dec
or
js
stos
cmp
pop
mul
out
(bad)
add
popa
mov
mov
cmp
dec
push
xchg
cmps
sub
pop
aam
inc
popf
std
pop
sbb
sti
jg
neg
mov
call
cwde
rol
mov
rcl
hlt
sub
or
mov
add
adc
sbb
add
xor
sub
push
aad
xor
xor
adc
cmp
inc
xchg
jmp
sub
outs
retf
mov
loop
or
inc
push
dec
jp
mov
test
test
mov
stc
or
lahf
mov
inc
jb
arpl
mov
cmp
pop
(bad)
ins
pusha
mov
adc
dec
push
inc
js
cmp
inc
test
sbb
inc
sub
arpl
sub
sub
jne
retf
or
cmp
ret
daa
push
fld
mov
jle
outs
mov
pop
cld
mov
out
inc
and
call
repnz
pop
fdiv
(bad)
dec
jl
stc
sti
xchg
mov
sub
(bad)
repz
nop
hlt
test
retf
fstp
jp
neg
and
div
mov
icebp
xor
xchg
mov
mov
mov
popa
mov
cmp
in
jbe
ds
mov
inc
popa
cmp
adc
mov
dec
cmp
pop
pop
mov
xchg
push
cld
dec
or
ror
or
aam
rcr
xor
mov
shl
in
jg
inc
dec
or
clc
xchg
push
lock
push
add
and
lods
addr16
dec
popa
retf
clc
popf
imul
inc
into
std
imul
sbb
xchg
aaa
sti
leave
test
test
mov
or
inc
mov
das
mov
jnp
xchg
call
shr
ret
inc
pop
iret
inc
cmps
in
sahf
cmp
test
jmp
fist
inc
mov
add
or
pop
mov
and
mov
mov
mov
dec
xor
sub
pop
dec
retf
stc
je
cmp
jg
cmp
jg
cmp
jg
cmp
jg
cmp
.byte
