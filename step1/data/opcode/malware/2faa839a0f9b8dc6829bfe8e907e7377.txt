add
add
add
add
inc
add
dec
inc
add
add
add
pop
inc
outs
jb
ins
ins
dec
popa
imul
jb
gs
ins
add
add
add
and
dec
add
add
add
add
add
add
add
add
add
nop
sgdtd
inc
push
dec
inc
add
add
add
add
or
add
jbe
xor
xor
add
add
add
je
add
pusha
add
add
jle
add
add
add
add
add
push
je
imul
add
add
add
add
push
push
add
add
add
add
inc
push
dec
inc
add
add
add
add
add
add
add
add
cli
add
add
add
add
add
add
add
add
add
add
add
add
or
add
add
add
add
add
add
add
or
add
add
add
add
add
jp
add
add
gs
xor
xor
xor
xor
sub
sub
sub
xor
xor
xor
xor
jge
add
outs
outs
data16
gs
js
jae
jb
outs
addr16
add
add
xchg
mov
lea
lahf
mov
mov
in
cmps
in
sahf
mov
scas
mov
mov
test
jecxz
xchg
out
cmps
cwde
out
xchg
sahf
loop
mov
mov
out
xchg
out
mov
ds
cmp
outs
fs
gs
add
inc
popa
outs
daa
je
push
gs
and
pop
pop
pop
outs
gs
outs
fs
gs
xchg
out
cmps
cwde
out
xchg
sahf
loop
mov
mov
out
xchg
add
mov
add
push
sgdtd
(bad)
fidivr
jle
leave
push
sub
push
add
pop
enter
fild
lods
les
jbe
jp
jb
mov
jne
clc
cmp
mov
pop
xor
repz
loop
mov
sbb
(bad)
xchg
mov
xchg
(bad)
pop
rcl
gs
arpl
mov
and
data16
sar
stos
adc
inc
or
out
jmp
out
jmp
adc
shl
sbb
outs
or
or
in
stos
into
xchg
in
fwait
loopne
and
(bad)
mov
and
sti
inc
or
shr
rcr
cmp
fadd
int3
jecxz
sbb
icebp
outs
in
sahf
test
test
fwait
inc
and
or
popf
in
inc
aas
and
or
push
add
and
arpl
repnz
pop
outs
sti
div
rcl
stc
add
cmp
fs
loope
or
pop
and
jp
(bad)
jmp
jle
push
lahf
add
pop
mov
sub
mov
stos
adc
in
mov
pop
iret
cld
enter
push
test
dec
test
sar
xchg
adc
mov
int
pop
dec
jno
test
mov
dec
add
daa
dec
fadd
pop
add
mov
retf
jbe
sbb
cmp
jp
mov
push
and
push
inc
add
push
push
mov
(bad)
mov
push
and
adc
out
mov
retf
icebp
xchg
mov
pop
sub
cmps
adc
imul
push
cs
jbe
clc
std
outs
mov
xchg
push
call
dec
push
mov
mov
shr
clc
adc
jmp
scas
add
fstp
cmc
jmp
xchg
jmp
aad
test
jb
xor
pop
fist
pop
(bad)
pop
outs
rol
ins
mov
scas
inc
data16
and
sbb
in
adc
and
scas
push
pop
or
cmp
cmp
fstp
out
mov
push
and
jae
xor
jmp
cmp
lea
jb
or
pop
add
js
in
adc
pop
push
mov
out
push
je
cwde
sar
mov
stos
bound
dec
mov
fsubr
xchg
popa
inc
(bad)
cld
dec
aad
fisttp
xchg
xchg
popa
adc
mov
mov
dec
add
xchg
or
daa
lods
sub
push
jmp
and
cmc
leave
sti
sub
(bad)
mov
or
add
jmp
push
cmps
inc
loop
into
and
movs
pop
je
mov
cmp
sbb
lds
in
push
dec
cmp
imul
call
mov
jo
aam
mov
out
mov
or
cdq
xchg
rdtsc
xor
aas
popa
inc
xor
lock
sar
mov
cwde
sub
sbb
aam
pop
inc
stos
es
movs
mov
adc
ret
mov
ret
test
or
pop
sahf
out
jmp
sbb
jge
icebp
dec
dec
jae
mov
fdivr
lods
scas
lahf
push
dec
cmc
enter
cmp
push
sub
scas
adc
fistp
push
iret
push
cli
sub
cmp
xor
adc
add
ins
cmp
and
xchg
sbb
cmps
mov
xchg
fadd
jmp
std
imul
mov
dec
loope
addr16
or
js
mov
mov
int
out
aas
dec
sbb
addr16
add
jnp
int3
xor
xor
sbb
xchg
rcl
es
cmp
inc
dec
out
dec
rcl
push
nop
jmp
(bad)
mov
idiv
pop
xchg
aad
jbe
dec
dec
jnp
add
jl
sub
sub
shl
sahf
dec
mov
cmp
dec
out
cmp
std
xchg
jp
enter
or
mov
pop
or
or
or
ja
lock
jne
arpl
mov
pusha
stc
add
mov
lahf
and
loope
(bad)
sbb
xlat
mov
(bad)
mov
js
jmp
mov
repnz
es
sbb
jp
(bad)
test
sbb
cwde
adc
push
xlat
(bad)
xchg
ins
jp
add
xchg
aaa
test
adc
inc
test
cld
jge
int3
imul
pop
or
push
inc
mov
add
dec
xor
add
xor
retf
out
sub
mov
das
out
push
pop
leave
(bad)
mov
inc
jl
rcl
fs
sar
cmp
mov
mov
fsub
adc
(bad)
pop
jns
dec
or
jp
xor
loope
mov
fistp
add
fisttp
stos
mov
jb
xor
int
dec
arpl
shl
xor
dec
popa
xchg
pushw
fisttp
rol
sti
or
pushf
xchg
icebp
push
int3
mov
inc
push
aam
clc
add
mov
and
cdq
cdq
fldenv
stc
mov
daa
loope
and
mov
mov
jbe
mov
in
mov
sbb
aaa
je
call
cmp
or
mov
mov
adc
inc
(bad)
jb
lock
mov
cmp
mov
push
int
leave
xchg
ret
inc
fnstsw
scas
pushf
sbb
(bad)
cmp
das
rcl
pop
(bad)
fisub
loopne
lock
pop
cmp
aad
retf
push
(bad)
call
jmp
cmps
fwait
enter
enter
pushf
nop
mov
jmp
repnz
sub
arpl
or
test
pusha
out
dec
or
inc
lods
adc
repz
test
and
lds
and
loop
push
pop
pop
jecxz
sub
mov
mov
add
sub
outs
cmp
cmp
lock
jl
lea
loope
push
add
cmc
mov
inc
mov
retf
imul
loop
mov
ret
js
imul
cmp
aad
stc
push
test
jmp
outs
int3
int3
adc
stc
es
xchg
inc
repz
pop
pop
ins
loopne
xchg
out
fwait
push
out
mov
add
and
fs
popf
pop
mov
and
sti
fnstcw
cmp
lock
cld
jl
adc
and
(bad)
cmp
or
sbb
mov
jmp
aas
dec
pop
mov
mov
out
lods
jecxz
popf
scas
dec
dec
in
in
(bad)
scas
jge
inc
js
repz
inc
popa
cmp
ds
mov
sbb
sbb
retf
cmp
and
sub
cmp
(bad)
dec
inc
push
(bad)
or
lahf
pop
xchg
(bad)
lds
add
popf
daa
pop
or
push
or
or
in
fs
aam
pop
mov
pop
xchg
mov
pop
jmp
outs
(bad)
lock
int
jbe
fmul
mov
sbb
mov
xchg
mov
inc
lods
cmps
xchg
jnp
push
loopne
ins
xor
retf
fwait
lock
mov
jno
lds
push
adc
(bad)
jo
outs
das
outs
aam
lods
movs
jecxz
imul
fwait
mov
and
ins
(bad)
inc
add
mov
cdq
or
mov
push
mov
sbb
cs
or
adc
ror
xor
adc
mov
fst
pop
xor
xchg
pop
leave
jmp
mov
push
push
push
in
test
cmps
mov
adc
repz
xchg
mov
jbe
icebp
shr
dec
mov
addr16
loopne
sub
mov
call
mov
sbb
out
lods
jno
retf
das
(bad)
icebp
repnz
dec
fcom
xchg
pop
sbb
imul
cmp
gs
pop
add
add
mov
call
ja
jecxz
push
movs
xlat
dec
repz
sub
loopne
(bad)
adc
not
lea
cmps
pop
xlat
add
adc
inc
inc
das
mov
retf
in
fcmovnu
aaa
push
lock
mov
mov
in
les
mov
cmps
pop
xor
dec
(bad)
jecxz
je
imul
jo
pop
leave
mov
aas
jmp
inc
cmp
nop
xlat
stos
mov
or
ror
pushf
adc
(bad)
fcomp
cwde
xor
sub
jmp
movdqa
jnp
xchg
cmc
mov
xchg
fs
aaa
stos
mov
(bad)
in
xlat
xor
test
xchg
add
pushf
shl
daa
mov
lods
xchg
sub
jnp
sbb
icebp
add
out
sahf
inc
iret
mov
popf
je
cli
pop
push
sbb
jl
add
outs
test
dec
lahf
stos
xchg
mov
cmps
call
adc
push
call
jge
movs
xchg
sti
adc
je
stos
adc
ds
les
cli
or
cmps
inc
xchg
test
mov
shl
mov
pusha
inc
cmp
mov
mov
into
je
push
ins
rol
idiv
cmp
mov
pop
and
fstp
lock
shr
fld
(bad)
xchg
cmp
dec
dec
cmc
mov
retf
push
xchg
loop
push
in
leave
mov
xor
push
push
cmp
jb
pushf
push
xchg
sub
add
imul
mov
cld
push
shl
call
sbb
sub
addr16
sbb
inc
ret
js
imul
push
mov
or
out
push
stc
fstp
xor
fdivr
fstp
pop
pop
call
dec
cdq
sub
aam
(bad)
aaa
cmc
inc
adc
or
pop
imul
sbb
jmp
lds
sbb
mov
call
clc
pop
imul
not
out
(bad)
repnz
adc
cmp
sbb
(bad)
mov
(bad)
loope
push
sub
and
out
sbb
adc
mov
sti
add
inc
loop
cmp
outs
dec
push
adc
sbb
lods
sbb
shl
fs
dec
sub
retf
sahf
imul
(bad)
call
ins
push
add
push
cld
mov
test
inc
aad
stc
ja
pop
or
div
mov
adc
jnp
sub
test
dec
fstp
pop
hlt
movs
jbe
inc
cld
push
push
call
jge
stos
adc
into
xor
pop
mov
ds
xor
sbb
sub
retf
jle
rol
mov
pop
loopne
pop
popf
xlat
mov
out
inc
pop
mov
mov
repnz
inc
jl
sahf
mov
mov
jb
shl
scas
mov
lds
mov
mov
cmp
mov
sub
jge
xchg
jmp
and
mov
fisttp
addr16
cmp
or
push
dec
aam
jp
mov
and
add
std
push
out
inc
ficomp
pop
pop
test
inc
stc
mov
add
test
pop
pop
mov
fisttp
push
xchg
ins
sbb
ret
shl
cmp
dec
and
test
mov
in
loop
add
xor
popf
mov
jb
fwait
pop
xor
dec
(bad)
and
xor
shl
push
sti
sahf
jge
leave
cmp
inc
xchg
pusha
ds
push
leave
sbb
call
pop
mov
cmps
ficom
cmp
ja
popa
xchg
jp
sbb
aam
push
cli
retf
pop
popa
popf
sub
test
and
cs
jmp
and
fs
lahf
jbe
xor
stc
popf
fld
sbb
adc
aad
jmp
jmp
pop
adc
je
mov
pop
(bad)
xlat
jl
cmp
pop
adc
(bad)
outs
loop
not
scas
xchg
iret
or
add
add
scas
int
ror
jns
lods
movs
loope
jge
mov
push
cwde
pop
movs
test
inc
push
lods
inc
test
in
mov
daa
inc
pop
loopne
jecxz
xchg
(bad)
jp
hlt
mov
pop
pop
clc
aam
retf
out
sub
inc
(bad)
imul
shr
add
add
push
or
mov
adc
sbb
and
pop
adc
add
test
cli
inc
mov
cli
jg
test
pop
pop
test
inc
cmp
(bad)
adc
outs
mov
and
shr
mov
sbb
jo
out
aaa
aad
pop
jns
push
(bad)
mov
adc
push
shr
lds
pop
sar
dec
sbb
test
push
and
cmps
jno
cs
daa
jmp
lods
push
popf
(bad)
dec
shl
cmp
or
das
jp
jae
stc
add
aas
push
(bad)
mov
pushf
jns
cmps
test
sub
addr16
push
or
loopne
dec
in
neg
nop
xor
outs
sahf
stos
lahf
mov
cs
in
mov
sbb
or
jle
mov
in
mov
in
mov
mov
sub
jecxz
inc
test
aam
test
jmp
loope
lea
and
push
mov
inc
sbb
mov
cmp
pop
inc
mov
fadd
and
(bad)
out
xor
ins
xlat
push
and
push
and
out
ss
adc
adc
sbb
xor
call
ror
push
cld
and
xor
call
mov
mov
jno
ds
cmp
aas
push
(bad)
mov
xor
pop
mov
cmp
pop
mov
dec
out
sar
fsubrp
add
inc
adc
mov
repz
xor
mov
or
enter
mov
jl
dec
mov
cs
in
mov
sahf
or
xlat
or
sbb
repnz
call
int3
cmps
fs
in
aam
lods
and
data16
mov
leave
sbb
lods
xor
mov
aas
sub
rcr
dec
jp
pop
mov
xchg
dec
outs
pusha
or
add
jg
mov
imul
hlt
mov
nop
mov
js
ret
adc
pop
dec
shl
cdq
mov
enter
sti
stos
or
mov
js
cmovne
stc
loopne
lahf
ins
and
aas
mov
daa
or
ins
push
cmp
outs
jmp
pop
pop
aaa
dec
cdq
cmp
shr
inc
mov
mov
stos
ins
push
xor
rcl
in
cmp
mov
cmp
sti
pop
or
and
mov
sar
call
lods
xchg
ret
mov
push
cmp
and
int
mov
mov
adc
in
sar
add
sar
pop
repz
push
cmp
jmp
add
out
jo
pop
add
das
js
mov
scas
fsub
xchg
cmc
das
bound
jl
sbb
loopne
jle
ret
sbb
(bad)
adc
ficomp
cdq
cmp
jge
ins
dec
mov
leave
jmp
push
adc
lahf
test
not
mov
lds
mov
jns
sub
sbb
mov
push
stos
test
retf
and
jmp
test
xor
mov
push
loope
in
dec
pusha
out
jle
push
mov
int3
and
imul
jno
xchg
jno
jno
cmp
data16
sbb
push
add
in
dec
ret
mov
out
mov
push
xor
xchg
lds
jbe
imul
fst
xchg
pop
mov
fimul
fdiv
(bad)
pusha
cmp
jle
std
(bad)
mov
or
or
in
push
rol
rcl
or
fistp
add
sbb
push
(bad)
cmps
and
jle
mov
cld
popa
ins
or
cmp
cli
movs
lods
cdq
scas
xor
jno
push
jbe
fimul
mov
push
or
or
das
push
xor
dec
xchg
stos
lods
sub
into
pop
stc
outs
push
pop
mov
mov
adc
sbb
jmp
add
push
iret
cmps
cmc
add
mov
cmp
sbb
xchg
mov
sbb
mov
push
call
mov
adc
call
fild
mov
in
int
push
cmp
int3
out
mov
bound
dec
add
stos
or
xchg
cmp
fdivr
xchg
das
and
mov
xchg
fisttp
outs
inc
inc
sahf
loopne
mov
mov
jecxz
inc
push
sbb
data16
cmps
and
aaa
dec
js
add
loop
rep
adc
mov
sub
adc
test
cmp
push
into
es
ja
out
adc
adc
push
inc
jg
jecxz
bound
dec
push
cmp
call
mov
lock
retf
(bad)
push
mov
or
dec
mov
test
ja
push
jmp
push
add
pop
sbb
dec
xchg
out
adc
retf
jno
add
xor
mov
dec
sti
mov
push
adc
xchg
add
and
mov
leave
add
in
loope
lock
cmps
call
js
dec
cmp
pop
fwait
bound
push
je
push
jno
mov
imul
push
movs
lods
push
add
adc
pop
add
fmul
out
mov
mov
jnp
in
inc
mov
add
sbb
mov
jmp
imul
and
test
arpl
adc
inc
or
sahf
or
xchg
(bad)
fisubr
mov
sbb
bound
cs
stos
or
dec
out
jl
fstp
cdq
into
dec
(bad)
mov
sub
call
mov
xchg
jp
mov
xchg
mov
out
aad
xor
leave
fcmovb
loop
ins
adc
push
sub
clc
(bad)
std
and
sbb
and
jno
sub
xlat
fld
push
jns
cmp
pop
test
cmp
test
ins
cmps
sbb
pop
outs
push
jb
retf
jmp
das
fucom
aas
retf
push
pop
push
xor
push
ins
push
sub
iret
(bad)
std
sub
jbe
(bad)
fadd
ins
push
sub
add
mov
mov
test
(bad)
cmp
xchg
jle
sub
mov
add
retf
jge
lds
in
dec
mov
mov
jmp
cwde
sub
jnp
xor
adc
stos
nop
dec
cmc
pop
rcl
xchg
mov
in
scas
(bad)
mov
out
jg
(bad)
int
jecxz
fs
daa
inc
jne
pop
add
and
sbb
std
sti
inc
pop
rcr
add
mov
xchg
loope
inc
mov
inc
(bad)
aas
into
jns
inc
sbb
rcr
adc
sar
lahf
retf
cmp
mov
rep
shr
sti
cmc
cmp
pop
pop
pop
sbb
jmp
outs
(bad)
sub
cmp
pop
sbb
cmp
test
cdq
inc
rcr
pop
sti
rcl
lods
out
out
out
test
mov
cmc
test
sub
push
pusha
jmp
xor
lea
xchg
lds
xchg
inc
in
lods
leave
loopne
std
shl
mov
pop
jns
xchg
aam
cmp
imul
add
cmp
mov
fadd
push
mov
cld
mov
fs
pusha
sub
aas
pop
xor
jecxz
add
rcl
les
sub
mov
adc
xchg
add
outs
pop
xor
pop
and
and
cmp
ins
adc
sbb
dec
fs
cwde
lods
and
in
addr16
leave
cmp
mov
rep
call
shr
pop
mov
sbb
cld
test
mov
sub
popf
xchg
xchg
loopne
add
mov
or
sub
sbb
mov
lods
fwait
jb
pop
(bad)
rol
lea
test
sbb
push
arpl
pop
dec
mov
dec
popf
xor
jne
pop
das
add
cmp
div
repz
mov
xor
sub
test
cmp
pop
and
mov
icebp
and
fs
xor
mov
shl
ins
inc
addr16
fld
inc
and
push
std
adc
xchg
mov
cmp
jg
dec
dec
lods
push
sub
jp
fild
fistp
add
or
mov
in
addr16
in
js
in
push
dec
lds
(bad)
leave
fidiv
fsub
push
cli
xor
fcmovnbe
and
in
popf
sub
adc
lock
xor
movs
imul
sbb
dec
repz
sbb
push
add
(bad)
aad
dec
pop
hlt
xor
jns
sub
neg
xchg
push
cs
ret
bound
out
test
or
adc
adc
jbe
mov
dec
adc
in
and
lahf
movs
inc
jnp
fs
mov
jb
and
pop
sub
push
jmp
pop
jns
jmp
and
jo
adc
push
dec
sbb
lock
xor
adc
jle
push
jns
pop
(bad)
fbld
mov
adc
mov
mov
jp
ror
outs
inc
inc
mov
shr
sbb
inc
inc
add
lods
test
xor
sti
cwde
or
dec
cmp
stos
xchg
(bad)
cmp
jbe
gs
std
dec
inc
mov
push
movs
sbb
xchg
dec
(bad)
jnp
je
div
jne
cmc
or
cdq
imul
xchg
(bad)
std
xor
jno
ins
xor
inc
cmp
and
call
aam
(bad)
xchg
icebp
test
adc
retf
test
inc
and
mov
ffree
idiv
jl
sahf
xor
stos
jg
jle
dec
rcl
sub
mov
nop
loope
and
push
add
sbb
rcl
pusha
mov
loope
adc
outs
and
aad
ins
fwait
mov
(bad)
fneni(8087
or
and
mov
mov
add
mov
rol
enter
jp
sahf
pop
cs
sar
fidiv
jmp
mov
movs
cmp
test
ss
sub
cmp
(bad)
sub
push
or
scas
in
inc
fmul
int3
adc
jecxz
sbb
mov
in
xchg
stos
mov
icebp
popa
mov
(bad)
and
add
jmp
scas
xchg
inc
pushf
out
loopne
sub
pop
inc
(bad)
xchg
adc
and
daa
or
and
inc
popf
or
fisubr
xchg
inc
sub
dec
mov
xchg
mov
xor
es
call
movs
addr16
(bad)
jecxz
cs
pop
addr16
add
aam
jl
jmp
push
sbb
inc
adc
jmp
jbe
scas
add
fs
fs
aam
stc
xchg
inc
cmps
maxps
push
out
jbe
dec
movups
adc
retf
push
add
mov
jmp
push
mov
mov
push
test
pop
mov
not
test
loop
cmp
fisub
dec
pop
jnp
inc
test
jae
dec
jo
test
cs
xchg
mov
leave
sbb
mov
lods
xchg
leave
xchg
cmp
inc
dec
and
aas
pop
fs
addr16
push
inc
jl
arpl
push
mov
inc
out
push
sahf
shl
jno
mov
mov
das
sub
mov
fnsave
pop
sti
ins
ret
es
cmps
dec
jmp
and
(bad)
js
sub
enter
mov
jmp
adc
in
or
xchg
jl
aam
fld
call
mov
sub
pop
mov
fst
std
xchg
inc
inc
lods
mov
push
pop
and
or
popf
jno
pop
add
xor
adc
(bad)
call
xchg
int
xor
test
sbb
outs
fnsave
push
mov
push
xor
xor
sar
sbb
shl
call
int3
xchg
movs
add
add
ins
xchg
mov
(bad)
imul
jg
and
rol
(bad)
dec
dec
(bad)
sub
and
inc
xchg
jnp
jecxz
mov
vmovss
sub
sbb
inc
push
jno
inc
mov
cs
iret
xor
jmp
or
arpl
(bad)
push
and
cmp
scas
jae
cmp
neg
mov
dec
add
test
rcl
clc
mov
xchg
ret
adc
pop
mov
out
xchg
popa
cmps
inc
repnz
call
jne
dec
sub
retf
sub
ja
mov
nop
mov
leave
test
lods
pop
pop
xchg
mov
loop
cmp
xchg
pop
pop
cmp
fwait
inc
inc
fxch
jne
add
mov
lea
push
xchg
jno
popf
push
shl
and
xchg
jl
add
xor
jno
stos
fwait
lods
jge
imul
ds
mov
jmp
movs
push
push
out
dec
stc
mov
add
(bad)
ja
mov
lds
enter
mov
pop
jmp
push
nop
mov
rol
push
in
xor
mov
es
rcl
mov
scas
fwait
cdq
pop
adc
push
xchg
mov
mov
pop
test
sub
mov
(bad)
cmc
pop
jl
push
dec
dec
jne
nop
add
out
xlat
or
inc
inc
ins
xchg
pop
xchg
inc
stc
and
popa
mov
and
push
xor
inc
inc
ficom
xchg
mov
les
lods
sbb
clc
adc
loop
or
inc
pop
add
std
jns
add
xor
sbb
leave
pop
pop
cmps
(bad)
sar
js
inc
test
in
mov
data16
add
xchg
dec
das
fiadd
iret
push
add
retf
inc
jmp
and
stc
cmps
(bad)
mov
jns
ror
jle
(bad)
mov
outs
and
sbb
sub
(bad)
pop
test
std
inc
mov
push
imul
mov
ret
mov
jg
pop
cmp
les
mov
cli
shr
test
push
inc
mov
pop
pusha
loope
jp
jne
cmp
mov
stos
mov
test
xchg
pop
xchg
ret
xchg
pop
imul
in
sub
inc
jecxz
cmp
sbb
aas
ret
jecxz
mov
mov
ins
jae
or
xchg
add
and
fwait
pop
rol
sub
ds
popf
inc
sbb
mov
scas
cmp
cmp
ffree
(bad)
xchg
retf
cmp
ins
adc
mov
call
ins
fstp
or
enter
jno
sub
pop
adc
inc
pop
rcr
pop
inc
jl
stos
pop
pusha
out
cmps
call
hlt
push
das
mov
rol
push
jnp
hlt
cmp
nop
cmp
mov
inc
out
cmp
pop
jle
jl
cmp
fild
in
adc
mov
sub
xchg
lea
sub
push
sti
jnp
movs
clc
xor
dec
jne
aad
out
(bad)
aaa
imul
dec
das
call
inc
pop
pop
ins
inc
xchg
mov
aaa
pop
iret
or
or
repz
mov
ret
add
xchg
(bad)
jecxz
into
mov
stc
lea
loopne
cmc
xchg
pop
fwait
mov
xor
movs
or
push
xchg
int3
and
ret
clc
jge
ret
adc
lar
mov
push
inc
xlat
or
mul
cmp
sbb
sti
arpl
ja
fwait
iret
jp
push
bound
add
sbb
loope
(bad)
icebp
mov
mov
popf
(bad)
dec
inc
jecxz
(bad)
jbe
stos
sbb
mov
push
stc
push
int
mov
(bad)
sub
mov
mov
push
arpl
mov
iret
add
jbe
retf
mov
ja
ins
imul
dec
sbb
shl
outs
shld
loope
add
add
shr
int
retf
pop
clc
jmp
push
gs
sti
cmps
fld
ret
push
ss
xchg
lahf
imul
loop
adc
sub
div
out
ss
icebp
sbb
dec
cmp
or
xchg
adc
pop
cmp
cmp
mov
mov
add
mov
cmp
inc
cmp
inc
xor
dec
sbb
stos
sahf
mov
adc
sbb
ss
sbb
rcr
push
add
jbe
sbb
mov
mov
movs
or
add
test
inc
dec
mov
movs
cmps
les
adc
shr
in
sbb
lahf
sub
or
or
arpl
jmp
cmp
data16
stc
sbb
xchg
mov
test
imul
sub
popa
call
xor
sbb
or
je
stos
ins
cmp
cmp
imul
cld
xor
mov
cmp
sti
stc
jecxz
leave
add
push
outs
test
jg
(bad)
mov
mov
test
sbb
std
xchg
mov
dec
lods
inc
aad
lock
mov
pop
in
aad
or
js
jl
mov
pusha
mov
std
dec
inc
jl
je
jae
rcr
mov
cmp
dec
in
add
adc
fisttp
cmp
and
or
jecxz
push
sbb
(bad)
repz
adc
mov
or
add
lea
in
xchg
mov
inc
push
lock
adc
add
ret
add
pop
push
inc
xor
mov
mov
mov
mov
mov
inc
cdq
sbb
ds
outs
mov
sub
std
sbb
adc
inc
jne
cmp
xchg
add
scas
and
xor
fst
jae
dec
imul
mov
jmp
popa
adc
mov
sub
repnz
push
mov
jg
pop
loopne
rcr
nop
pop
push
ins
dec
mov
mov
and
jecxz
cmp
dec
mov
test
mov
fdivr
scas
or
call
pop
xchg
mov
shl
ins
or
pop
data16
out
xchg
into
arpl
dec
inc
mov
gs
sbb
aas
aam
jnp
cmp
mov
xor
loopne
mov
int
sub
and
rcl
clc
or
in
pop
and
mov
adc
pushf
and
push
shl
aam
in
ret
cmp
rcl
repz
dec
cwde
retf
xchg
mov
test
add
xlat
scas
pop
leave
in
ss
fisubr
or
imul
(bad)
rol
sub
xchg
ret
sar
rcl
(bad)
jmp
ins
pop
mov
jl
lahf
cdq
arpl
push
pop
jne
add
sahf
call
sar
aad
js
fisttp
std
or
pop
ret
xor
ins
add
(bad)
adc
xchg
cmps
movs
mov
sbb
add
int
(bad)
not
xor
das
in
add
jp
inc
pop
xchg
data16
scas
xchg
aam
je
xchg
mov
push
dec
dec
(bad)
cmp
mov
(bad)
shl
pushf
mov
cmp
cmp
test
neg
xchg
int
out
pushf
lods
mov
mov
inc
rol
mov
jge
aaa
dec
sub
and
stos
ret
je
imul
cmp
pusha
push
les
or
lock
mul
add
push
sbb
daa
loope
xchg
stos
call
in
pop
stc
mov
mul
jo
pushf
stc
mov
adc
imul
fwait
sub
ins
shl
push
add
sbb
xlat
and
push
xor
pop
add
ret
jg
std
in
or
inc
aas
fcom
adc
aas
jp
icebp
xor
adc
cmp
fisubr
int3
stos
aam
enter
add
shl
(bad)
stc
mov
xor
mov
mov
repz
push
mov
add
xor
and
add
out
mov
ficomp
lock
jb
add
cmp
push
cmp
fadd
ror
adc
sub
mov
or
jl
retf
jne
loop
push
data16
pop
in
in
(bad)
in
xor
dec
iret
add
call
(bad)
xchg
psadbw
jne
or
aam
retf
mov
(bad)
sub
jecxz
cmc
shr
jle
imul
mov
nop
xchg
pushf
retf
inc
push
stc
mov
inc
test
test
push
aad
stos
xchg
aaa
(bad)
clc
add
sbb
mov
dec
arpl
mov
sbb
movs
leave
ja
nop
call
test
out
xchg
sbb
xchg
in
mov
in
fisubr
cmps
pop
fs
js
mov
xchg
xor
jbe
jmp
mov
rol
or
and
js
cmps
fisub
arpl
xchg
mov
adc
bound
adc
cdq
into
scas
mov
xchg
(bad)
hlt
loop
and
mov
sti
pop
fmul
xor
jp
loope
mov
jge
imul
push
push
movs
xor
cmp
loopne
jl
sub
inc
je
xor
pop
pop
pop
adc
int
adc
stc
inc
pop
call
in
pop
mov
punpckldq
dec
sbb
or
xor
push
out
mov
sbb
inc
cdq
in
aas
xchg
sti
movs
jmp
mov
mov
push
ret
xchg
mov
arpl
xor
push
cmp
adc
add
(bad)
aam
(bad)
nop
fcmove
sub
das
mov
setne
popf
jmp
xchg
jg
push
sbb
inc
adc
test
mov
icebp
jp
cmp
xchg
xchg
lods
or
ins
daa
push
jmp
sub
adc
out
test
dec
je
out
fisttp
mov
jno
xchg
push
ror
dec
xor
rol
fs
dec
inc
xchg
or
jle
sbb
outs
rol
shr
push
pop
push
ds
and
sub
xchg
loopne
mov
(bad)
xlat
cmps
or
mov
sbb
add
mov
push
enter
outs
add
jl
add
push
push
daa
in
pop
test
out
cmp
sub
xchg
shl
int
bnd
pushf
dec
cmc
mov
sbb
dec
push
je
aaa
mov
es
dec
mov
add
adc
dec
fmul
cmp
xor
into
fst
push
or
push
mov
movs
lock
pushf
and
mov
fcmovne
div
mov
push
retf
pusha
cdq
pop
mov
sbb
mov
or
(bad)
sbb
mul
adc
mov
retf
xor
stc
sub
repnz
sbb
aaa
int
push
(bad)
icebp
adc
adc
in
sbb
mov
and
sbb
sbb
icebp
aas
jmp
movs
mov
pop
xlat
scas
imul
xlat
adc
push
push
out
imul
ins
jmp
xor
xchg
retf
pop
call
(bad)
jmp
mov
and
mov
xor
dec
out
sub
jns
jbe
fidiv
(bad)
out
push
adc
or
jecxz
push
mov
aaa
dec
data16
dec
jnp
push
xor
movs
inc
jbe
aaa
dec
in
mov
pop
mov
lods
fwait
ret
aad
push
outs
or
add
mov
div
add
movs
test
and
pop
fimul
jbe
jb
into
js
das
fwait
cwde
retf
adc
sahf
jecxz
jb
add
push
jmp
mov
lock
and
mov
fistp
add
add
(bad)
and
dec
out
leave
mov
jle
ja
xchg
jg
and
repnz
fs
push
out
lds
in
and
(bad)
xor
and
mov
mov
pop
dec
add
fcom
stos
xchg
in
sbb
sbb
lea
call
(bad)
test
add
test
clc
and
sub
push
jp
aaa
jne
or
jmp
push
shl
ins
jecxz
fimul
jne
cmps
es
xor
push
mov
push
in
(bad)
cmp
nop
inc
sbb
and
or
fs
jbe
xlat
sub
adc
xor
lods
arpl
jns
lea
popf
popa
or
in
jecxz
repnz
cmp
adc
jg
fcom
jle
aad
ja
mov
(bad)
ins
cld
and
adc
and
adc
movs
stc
out
and
mov
fstp
mov
out
nop
or
mov
xor
cmp
mov
push
stc
cmp
mov
inc
mov
ja
sbb
push
mov
mov
push
loop
or
(bad)
push
in
test
jb
in
js
mov
jno
jl
mov
mov
fs
addr16
fidivr
xor
jno
sbb
call
sub
mov
cs
sti
(bad)
mov
cwde
cmp
mov
add
ret
cmp
arpl
mov
in
out
push
push
repz
push
sub
int
sub
fwait
scas
or
int3
popf
mov
xlat
add
push
test
das
cmp
adc
push
inc
pshufw
in
in
cwde
int
popa
cs
out
lods
int
pop
js
or
movs
and
int
push
xchg
rcr
loop
and
jnp
inc
dec
adc
xchg
sbb
inc
xchg
inc
jne
fild
inc
addr16
and
ja
jp
in
fisttp
lods
add
out
fstp
mov
ins
cmp
aad
or
and
push
jns
pop
mov
add
fs
mov
add
retf
shl
lahf
cmp
mov
sub
push
icebp
add
bound
adc
or
shl
xchg
sub
sbb
push
jb
imul
loope
xchg
imul
or
(bad)
inc
xlat
pop
adc
ficom
fwait
and
inc
pop
pop
and
ret
xor
xor
daa
mov
pop
cwde
and
fstp
(bad)
add
push
xchg
sub
stc
xor
test
xor
into
jge
inc
out
mov
jge
retf
cli
sbb
adc
add
jnp
call
repnz
sub
mov
cli
jle
retf
fdiv
popf
add
mov
pop
xor
mov
out
clc
add
call
pushf
scas
aaa
mov
repnz
neg
xor
sbb
dec
and
sbb
push
mov
out
push
xlat
add
test
imul
popfw
pop
es
vcomiss
adc
mov
sub
pushf
or
in
add
jne
call
sbb
in
push
sbb
leave
ret
sbb
retf
adc
pop
fild
in
pop
push
or
es
ss
jae
add
pop
mov
popa
test
pop
std
mov
pop
and
outs
xchg
cld
pop
xor
xor
xchg
in
lahf
adc
rcl
push
and
sbb
out
pop
push
ins
mov
mov
(bad)
outs
psubb
xor
add
pop
lea
retf
mov
call
into
cwde
jge
mov
mov
ins
mov
add
sub
fistp
movs
loopne
cmps
ss
inc
push
pop
sbb
xchg
add
or
cmp
and
data16
mov
cmp
adc
lahf
adc
(bad)
xchg
cs
shl
pop
sub
mov
jle
mul
and
stc
scas
cwde
cmc
out
jecxz
push
lock
jne
fidivr
icebp
jle
push
adc
sbb
ja
dec
scas
icebp
mov
cmps
mov
stos
mov
not
test
xchg
and
cli
clc
push
ja
push
inc
in
cmp
cld
sbb
inc
push
dec
cmpps
rcr
daa
jl
pop
ds
mov
push
jecxz
or
cwde
(bad)
mov
xchg
sub
test
jle
(bad)
push
sub
fwait
mov
sbb
fcom
mul
mov
jb
(bad)
test
jge
mov
movs
mov
retf
outs
mov
mov
mov
and
sub
xchg
bound
xchg
jno
xchg
sub
push
dec
and
int3
mov
mov
and
fadd
push
retf
aad
pop
bound
xchg
retf
ss
fbstp
mov
popa
add
ss
push
mov
mov
repz
mov
repnz
rcr
adc
loop
cmp
imul
push
sbb
js
jns
xchg
cmp
push
(bad)
cmp
popf
mov
aaa
push
mov
ror
cmp
(bad)
in
(bad)
xor
mov
and
sbb
mov
mov
les
dec
pop
adc
jmp
fdivr
ret
mov
inc
pop
int
or
into
popa
repnz
and
mov
fbstp
es
cld
jbe
(bad)
das
cs
lods
inc
jecxz
bound
inc
mov
or
sub
mov
jl
jnp
add
add
pop
sub
fs
ret
ins
ret
mov
pop
pusha
fsubr
inc
arpl
jge
mov
mov
sbb
stc
or
sti
adc
aam
mov
repz
xchg
mov
inc
mov
xchg
sub
jae
loop
sbb
add
popf
popf
or
ficom
enter
xor
and
fimul
pop
mov
add
pop
dec
stos
fucom
inc
and
rcl
fadd
inc
add
jmp
test
(bad)
shr
out
loop
or
jno
xor
mov
xlat
lock
gs
call
ss
pop
mov
cld
and
stos
out
cld
test
sub
ffree
mov
in
mov
jbe
adc
ja
and
xor
inc
add
(bad)
xchg
xchg
xor
add
pop
fs
lods
push
mov
mov
das
clc
xchg
xor
stos
xchg
push
lea
xchg
adc
mov
jge
popa
loop
mov
mov
sub
loop
aaa
xchg
push
lods
push
out
pop
shl
scas
out
ret
iret
sar
inc
jne
dec
imul
jnp
adc
xor
xchg
push
(bad)
mov
xor
cld
cmp
movs
dec
adc
jns
cmps
mov
xor
popa
push
add
pop
cmp
lea
std
das
ja
das
add
and
xchg
into
and
mov
out
rcr
or
push
dec
cmc
mov
(bad)
scas
cmp
xor
or
jb
sbb
push
mov
das
inc
jmp
pop
xor
movs
icebp
push
popa
mov
sahf
std
xchg
push
mov
loopne
or
or
pop
mov
push
loop
adc
bnd
adc
and
stos
xchg
arpl
mov
inc
push
xor
inc
arpl
cwde
in
nop
into
add
xchg
pushf
test
aas
pop
jge
in
imul
std
and
mov
in
push
(bad)
cdq
mov
in
mov
dec
dec
xchg
out
add
int3
fmul
inc
pmullw
add
cmp
adc
cmp
call
jmp
jns
js
inc
loopne
xor
into
stos
leave
push
fisub
pushf
das
mov
loop
lods
out
std
popa
mov
mov
add
sub
daa
xchg
jg
xor
add
push
add
dec
jnp
sbb
fild
fistp
mov
sub
out
cld
out
nop
jp
(bad)
in
(bad)
push
dec
adc
into
mov
dec
mov
mov
sbb
cmp
xor
push
call
jmp
aaa
jmp
lahf
into
in
ret
mov
xchg
scas
mov
xlat
aas
movs
lock
mov
lds
enter
je
cmc
ror
das
(bad)
test
push
out
imul
test
scas
(bad)
sub
cmps
rol
xor
out
mov
mov
add
ror
ja
fadd
cmps
fist
stos
pushf
jge
loop
mov
adc
add
mov
add
push
jmp
add
aad
adc
(bad)
jmp
xchg
mov
xor
or
std
xchg
fcmovnbe
scas
out
xchg
fnstsw
int3
push
mov
(bad)
in
leave
repnz
das
mov
lds
mov
add
or
movs
std
mov
daa
push
fdivrp
scas
push
cmp
sub
mov
mov
lods
int3
xchg
inc
popa
pop
or
(bad)
pop
jp
lods
and
jnp
retf
jl
jnp
rcr
fidivr
add
je
jmp
(bad)
mov
and
cmp
mov
movs
je
loopne
mov
xchg
lock
adc
daa
mov
out
enter
dec
pop
or
xor
push
mov
ret
in
loope
jmp
in
mov
in
inc
mov
imul
xchg
pushf
mov
xchg
sub
xor
mov
jo
xor
xchg
add
mov
call
(bad)
jp
jno
(bad)
pop
add
pop
loopne
mov
xchg
cmp
pop
sbb
js
jl
sbb
dec
fs
jb
cli
jbe
pop
pop
mov
push
xchg
or
cmc
retf
mov
cld
scas
fstp
inc
sar
pop
(bad)
sbb
push
mov
and
xchg
adc
shl
bound
mov
push
push
mov
shl
into
retf
sbb
adc
pop
mov
push
(bad)
es
inc
fisttp
es
popa
(bad)
sub
loop
cmp
adc
sub
cmp
xchg
jbe
or
and
in
imul
gs
aad
mov
push
(bad)
push
jae
not
mov
packssdw
inc
cmc
movs
xchg
jno
test
push
xchg
pop
ja
cmps
popf
enter
dec
icebp
jne
xchg
dec
or
cmp
mov
mov
leave
mov
daa
xchg
mov
jae
and
mov
pop
and
dec
or
jmp
mov
lods
sub
cli
inc
cmp
mov
fisttp
retf
es
inc
jne
je
call
or
mov
pop
imul
aas
or
inc
notrack
dec
jae
dec
push
xchg
bnd
call
mov
or
sub
mov
jmp
xchg
movs
ror
fwait
mov
(bad)
in
add
and
add
out
mov
xor
ja
pop
cmp
aad
sbb
mov
out
mov
add
retf
xchg
push
fimul
mov
shl
cmp
loopne
add
adc
fadd
mov
es
pop
inc
xor
retf
adc
adc
cli
or
pop
ret
scas
xchg
adc
rcl
ins
shr
fimul
aad
test
jl
add
dec
aas
xorps
ds
mov
(bad)
xchg
xchg
gs
push
popa
or
mov
xchg
pop
jo
mov
mov
xchg
inc
pop
sbb
inc
pop
outs
cs
leave
dec
pop
mov
mov
mov
dec
push
lds
xchg
mov
and
xlat
mov
(bad)
dec
adc
push
mov
push
sti
and
jb
icebp
mov
hlt
and
or
cwde
mov
xchg
outs
imul
popf
push
inc
mov
pusha
pop
lods
sbb
xchg
and
jmp
inc
pop
lahf
mov
cmp
pop
mov
mov
cwde
dec
sbb
stos
xchg
mov
mov
sahf
je
mov
movs
loope
and
and
stos
mov
daa
cli
mov
adc
iret
pop
sbb
xchg
das
(bad)
je
push
add
test
addr16
jle
inc
adc
mov
inc
dec
and
adc
adc
and
or
jno
cmp
xlat
(bad)
sbb
lock
rol
or
lock
mov
cmps
outs
imul
outs
mov
ficomp
sub
movs
and
test
ficomp
sbb
and
mov
adc
(bad)
hlt
inc
add
cli
pusha
push
inc
and
jae
shl
mov
jg
cwde
enter
sbb
jae
dec
scas
stos
lds
or
cli
xchg
jg
jl
sub
in
ror
push
shl
or
mov
cmp
jmp
inc
loop
bnd
inc
jmp
mul
out
retf
sbb
xchg
or
call
jl
and
push
ds
imul
fdiv
xlat
push
cld
jo
inc
jmp
cwde
pusha
xor
shl
in
pop
mov
out
rol
sti
xchg
jmp
pop
sub
mov
in
mov
sbb
lahf
mov
ss
xchg
mov
stc
xchg
or
movs
pop
cmps
test
cmp
dec
pusha
push
xor
test
dec
jno
fprem
push
adc
push
push
mov
bound
mov
jle
dec
adc
fldl2e
hlt
sub
fbld
mov
or
fcomp
outs
sbb
push
cli
icebp
and
jp
mov
jg
test
push
icebp
loop
rol
add
push
xor
jnp
adc
mov
imul
add
fs
adc
push
je
aaa
arpl
add
leave
jmp
jno
in
repz
pop
inc
pop
adc
cdq
ret
pop
js
mov
std
in
push
and
adc
mov
mov
movs
test
enter
pop
add
aad
movs
mov
add
sub
(bad)
loope
fisubr
(bad)
into
xchg
dec
dec
inc
imul
leave
lahf
out
ins
pop
stc
jle
and
mov
fcos
and
jb
jo
pop
push
sbb
ins
xor
mov
jmp
das
mov
add
or
mov
push
cmp
fstp
test
pop
mov
xchg
xchg
push
movs
hlt
and
je
jl
push
pusha
ja
and
mov
pushf
sbb
push
in
jle
mov
and
cmp
add
je
daa
nop
or
mov
add
lds
jecxz
call
push
push
mov
push
fs
js
dec
retf
bound
sub
xchg
call
dec
xchg
lods
loopne
movs
push
xlat
aaa
ret
movs
hlt
out
cmp
jno
sub
mov
(bad)
mov
jl
mov
dec
pop
ror
sub
push
or
pop
jmp
das
(bad)
je
into
and
loopne
jns
push
lods
stos
mov
loope
mov
clc
test
mov
lock
leave
pop
and
lahf
pop
sub
jge
xchg
jno
out
inc
lods
mov
popf
inc
sbb
dec
adc
or
xchg
xor
xor
test
cld
dec
xchg
xchg
repnz
mov
mov
mov
sbb
loopne
popf
cmp
inc
clc
or
mov
xchg
mov
popa
sbb
pop
mov
rol
cmp
clc
(bad)
call
mov
cmps
jp
jmp
inc
iret
adc
ret
push
mov
cld
(bad)
ror
jecxz
in
sbb
(bad)
jge
xor
cmp
mov
ret
lods
arpl
mov
xor
and
add
inc
pop
jge
xchg
sub
push
mov
mov
sbb
jno
push
xchg
push
dec
mov
loope
push
inc
fwait
mov
jg
dec
pop
mov
dec
jno
inc
jb
jge
cmp
jmp
out
or
add
jge
cmp
mov
inc
add
pusha
in
xor
xchg
push
pop
push
mov
dec
pop
or
jmp
jmp
fst
lock
ja
cmp
jae
repnz
mov
xor
fsubrp
clc
sar
pusha
ret
push
(bad)
sbb
fsubr
mov
cmp
rol
pop
add
mov
inc
cdq
inc
mov
scas
mov
lods
aam
loop
mov
dec
test
je
nop
loope
push
in
sub
ret
mov
mov
dec
cli
add
in
mul
mov
out
push
shr
mov
xor
mov
ret
fld
cwde
sbb
dec
xor
addr16
out
adc
and
aaa
pop
ins
loope
jp
out
sbb
adc
aad
inc
(bad)
mov
arpl
pop
and
cwde
daa
fnstenv
sti
in
add
jecxz
mov
ret
shl
loope
adc
call
xor
call
dec
or
jmp
es
and
dec
inc
add
out
mov
sub
popa
push
cmp
jl
(bad)
scas
mov
xchg
sar
or
jne
add
loop
scas
sbb
pop
mov
push
jne
mov
not
push
rcr
and
aam
ja
mov
stos
pop
gs
xchg
test
cmc
or
push
je
stc
rcl
ds
mov
sti
jne
out
pop
adc
aas
push
adc
mov
push
xor
hlt
cmps
push
sub
test
pusha
mov
sbb
ds
enter
mov
mov
xchg
std
mov
int
jg
inc
int3
sbb
div
leave
or
dec
cmp
icebp
nop
mov
pop
xor
into
xchg
cmp
jns
adc
mov
and
ror
pop
fstp
dec
mov
adc
ret
jno
dec
adc
test
dec
out
stos
(bad)
ja
mov
xchg
cmps
std
xchg
dec
cmp
pop
test
aas
dec
fist
cmp
sub
stos
push
xchg
scas
clc
out
adc
arpl
and
mov
fwait
aam
test
push
push
and
mov
push
ror
les
pop
xchg
loop
or
addr16
jmp
les
pop
ins
jmp
js
icebp
sbb
test
mov
lock
lahf
je
mov
rcl
popa
daa
mov
(bad)
arpl
in
add
sahf
sbb
dec
fstp
cs
mov
or
mov
imul
mov
xor
inc
pusha
mov
pop
adc
dec
aam
fild
inc
jo
repnz
cmp
scas
(bad)
dec
aad
les
push
test
inc
add
iret
std
mov
addr16
mov
cli
mov
aam
sub
mov
push
push
pop
jbe
and
pushf
daa
sub
into
push
and
cld
cld
(bad)
and
addr16
cmps
adc
iret
daa
data16
pop
xor
inc
sub
push
pop
dec
daa
movs
retf
cmp
stos
sub
out
push
pop
(bad)
retf
call
pop
sub
and
inc
xchg
adc
stos
xor
ds
pusha
xor
and
xor
pop
and
inc
bound
push
mov
cdq
sub
push
xor
pushf
mov
push
xchg
sub
xor
(bad)
fld
push
sbb
push
inc
cli
sub
test
retf
xlat
js
call
jno
push
cmp
cwde
cmp
mov
xor
xchg
test
clc
arpl
aas
cmp
sar
cmp
push
test
jmp
pop
xor
and
inc
jb
mov
loope
xchg
jecxz
fwait
cmp
nop
push
sti
movs
fcom
mov
and
add
aad
cmps
mov
ds
out
ds
mov
nop
push
js
ins
dec
ins
ins
test
imul
dec
fisttp
push
push
or
sub
lock
cwde
loop
iret
push
into
cmp
push
hlt
je
push
sub
mov
inc
inc
pop
add
stc
inc
add
adc
jecxz
lahf
retf
shr
arpl
cmps
pushf
dec
sub
aad
pushf
push
retf
retf
scas
add
mov
jne
(bad)
xlat
test
aad
mov
inc
rol
ror
lods
mov
fs
iret
int3
int3
je
mov
imul
push
cmp
add
sbb
cmps
cmp
in
sbb
pop
into
mov
add
mov
dec
adc
mov
scas
pop
ins
dec
adc
add
clc
cmp
call
pop
std
pop
xor
xchg
xor
add
mov
jnp
shl
or
pushf
jbe
mov
xchg
ja
jns
outs
pop
cli
dec
sbb
mov
mov
daa
pushf
fdiv
clc
dec
cmp
jecxz
mov
jnp
jecxz
cmp
fadd
stos
push
not
add
ds
jmp
sar
inc
retf
sub
jmp
fiadd
pop
xchg
add
fst
fld
arpl
ja
imul
lods
mov
or
bound
loope
enter
mov
xchg
push
pop
pop
jle
inc
and
sbb
(bad)
cmp
adc
xchg
jle
mov
mov
dec
pop
retf
xor
loopne
jo
jb
adc
addr16
lds
pop
cmp
add
xlat
hlt
ins
xor
mov
jmp
mov
xor
mov
sub
mov
popa
adc
stc
add
mov
out
ja
or
xor
mov
sub
inc
add
in
(bad)
je
xor
in
fsubr
inc
aam
push
aad
(bad)
sub
je
arpl
add
aam
mov
hlt
xchg
stos
dec
cmp
cld
fs
xchg
gs
pushf
jne
fwait
pushf
jecxz
retf
aaa
cmps
xor
call
das
pop
ss
dec
neg
mov
jnp
push
fld
adc
stos
in
xchg
outs
jae
xchg
inc
sbb
mov
pop
pop
and
mov
cmp
sub
inc
pop
and
adc
pop
ss
sub
mov
ficomp
inc
inc
das
and
jno
fild
sbb
mov
cwde
mov
xor
test
xor
inc
mov
and
dec
out
stos
xor
daa
mov
jne
inc
jnp
(bad)
popf
xor
mov
inc
lock
cmp
cmps
sub
push
sub
cmp
push
cli
sub
cmp
scas
mov
mov
and
xchg
popa
enter
and
xor
jno
rol
push
ds
(bad)
ins
adc
into
push
jnp
pop
call
aas
cmp
sti
mov
iret
mov
mov
and
sub
sub
adc
jge
lea
ds
out
add
xabort
dec
sbb
(bad)
xlat
xchg
xchg
cmp
dec
push
imul
push
mov
bound
(bad)
sar
mov
nop
bound
jge
aam
xor
pop
xor
arpl
dec
call
pop
rcr
add
push
sahf
inc
enter
sub
pop
sbb
ss
dec
adc
dec
pop
arpl
in
push
out
xchg
test
mov
inc
sahf
fmul
adc
(bad)
push
in
into
xchg
in
sub
(bad)
pop
lods
fucomp
das
push
(bad)
fnsave
lods
pushf
push
ror
lock
dec
mov
pop
pop
or
test
enter
or
stc
push
add
xor
mov
jmp
xchg
cmps
and
and
out
or
ins
cmp
push
fist
in
or
movs
pop
and
pushf
xor
movs
das
shl
hlt
cmc
inc
and
repz
pop
mov
daa
jae
scas
(bad)
cli
fstp
daa
xchg
in
xor
imul
jo
sar
add
mov
dec
ja
xor
xchg
and
fidivr
fisubr
cmc
mov
cmp
adc
lock
xchg
sti
lahf
dec
mov
(bad)
mov
mov
jle
mov
fild
icebp
pushf
out
test
xchg
inc
mov
or
out
adc
ret
addr16
jo
repz
mov
xadd
in
std
fisubr
sub
dec
xor
loop
cli
iret
jle
rcr
xchg
pop
pop
pop
and
out
(bad)
sbb
js
out
and
xchg
cmp
xchg
mov
scas
imul
inc
inc
push
dec
pop
inc
imul
or
arpl
out
rcr
cdq
inc
daa
inc
test
retf
imul
shl
call
cs
fcom
jae
inc
sub
leave
ins
pop
xor
and
aas
(bad)
cs
mov
imul
nop
add
ins
std
jmp
das
mov
mov
jl
xor
and
inc
mov
sub
push
int3
scas
xchg
scas
add
adc
cmc
and
ret
jecxz
rol
cmp
test
out
test
cdq
mov
and
ror
or
push
movs
out
inc
bnd
sub
data16
sub
aas
(bad)
mov
sti
cmp
in
xchg
or
xchg
push
pop
fist
jge
xchg
adc
jne
xor
mov
shl
xchg
dec
inc
repnz
ss
xor
or
push
loopne
xor
retf
push
xchg
ins
(bad)
fcomp
shl
jno
ret
fild
mov
adc
and
sbb
mov
push
mov
(bad)
adc
outs
data16
out
and
cmp
ins
ss
add
adc
or
icebp
in
mov
ficom
cli
mov
sahf
in
bound
xchg
jmp
mov
jb
or
gs
rol
or
sar
jmp
xor
lea
adc
mov
out
daa
cmp
push
out
push
sbb
mov
neg
cmp
fisubr
pop
and
or
in
popf
jmp
mov
(bad)
(bad)
xchg
push
cmps
imul
rcr
lahf
xor
dec
in
xor
sar
call
das
pop
bound
pop
outs
aaa
inc
push
aaa
in
rcl
cmp
mov
leave
jno
xchg
dec
ss
aam
js
call
pop
aam
mov
test
jae
push
fcmovne
aas
or
cmc
sbb
xchg
pop
pop
inc
loop
adc
test
xor
inc
push
cmp
or
mov
or
pusha
test
fdivr
cmp
jge
xchg
test
lods
adc
jo
xchg
or
cmps
mov
push
xor
pop
retf
out
cmp
add
adc
add
loopne
sub
mov
out
dec
xchg
fild
mov
xor
shl
mov
cld
cdq
rol
xor
(bad)
int
jmp
cmp
enter
lods
inc
ret
mov
xchg
std
inc
pop
in
rol
sub
inc
ss
mov
inc
(bad)
ror
and
popf
pushf
cli
dec
test
or
clc
outs
loopne
gs
sub
mov
lods
push
push
lock
div
mov
pop
(bad)
hlt
xchg
xlat
mov
push
outs
sti
es
or
or
jo
jne
pusha
jecxz
out
jmp
jne
inc
inc
lahf
xchg
add
adc
xor
sub
imul
dec
call
nop
fcmovb
jp
nop
sub
jecxz
lahf
iret
int3
xor
pop
jb
dec
cmp
sbb
idiv
sbb
cld
fisttp
retf
loope
ds
enter
daa
verw
mov
or
rcl
hlt
add
mov
adc
repnz
push
or
loope
call
inc
pop
dec
outs
cld
mov
scas
mov
outs
mov
jmp
mov
jp
ins
push
cmp
retf
dec
sbb
out
ins
jo
aam
jnp
jmp
(bad)
aaa
pop
sub
ret
fistp
jmp
push
xchg
nop
dec
dec
sub
(bad)
repnz
clc
stos
jne
out
push
pop
push
jns
inc
ret
out
xor
jecxz
sub
outs
ins
pop
and
lahf
mov
aaa
jb
inc
popf
mov
xlat
sub
pop
adc
pop
push
mov
and
pop
std
dec
jecxz
pusha
leave
xchg
je
jg
mov
sbb
push
push
pop
cs
xor
xchg
cmc
sub
fwait
inc
jl
sti
inc
into
push
fcomp
(bad)
jns
out
sub
jl
cmp
mov
lods
jno
mov
and
iret
push
pop
loope
mov
jg
out
shr
mov
mov
inc
sub
or
cdq
ja
into
ss
pop
cli
jnp
mov
pop
dec
je
outs
(bad)
jmp
jns
push
mov
lods
rcl
or
mov
imul
push
inc
cwde
and
dec
xchg
mov
test
xor
xor
in
lea
gs
sbb
pop
mov
or
cmps
xchg
pusha
sar
mov
out
shl
aad
icebp
xor
test
mov
mov
mov
sti
cdq
add
jge
jg
dec
fsub
mov
cmps
adc
xor
jne
mov
xchg
movs
cwde
cs
cmp
dec
sbb
push
mov
inc
inc
test
pop
dec
rcr
xor
sbb
clc
cmp
inc
aad
mov
ror
xchg
not
test
jmp
adc
mov
add
jmp
fwait
pop
nop
add
and
fiadd
inc
fiadd
mul
fiadd
(bad)
jbe
push
lds
leave
gs
mov
fcmovnbe
push
and
push
rol
clc
hlt
lods
mov
out
jmp
call
pop
and
fldenv
mov
dec
imul
scas
dec
sub
mov
imul
xchg
mov
jne
inc
scas
stos
jb
inc
mov
add
sbb
das
push
mov
lods
inc
dec
std
inc
mov
mov
imul
cmp
fistp
dec
add
inc
sub
inc
xchg
sub
scas
pop
mov
std
repz
xor
stos
sar
push
fnsave
in
add
pop
shl
adc
jbe
jns
loopne
xor
jnp
fidiv
xchg
loope
adc
call
cmp
xor
sub
cld
push
xchg
ret
jb
inc
mov
push
int3
pop
pop
add
ja
mov
cmp
aad
xlat
xchg
xor
ror
and
or
inc
mov
in
imul
xor
push
cmp
sbb
fistp
mov
fsub
mov
mov
pop
add
out
and
xchg
call
je
into
cwde
pusha
ficomp
mov
inc
adc
hlt
shl
dec
jb
xor
fild
mov
aam
pop
(bad)
imul
or
jl
aam
imul
cmp
loope
out
mov
sub
xor
push
sahf
jae
xor
mov
(bad)
mov
in
inc
das
cli
daa
mov
push
test
xchg
sar
jnp
jl
aam
sub
push
mov
mov
add
jmp
scas
lds
outs
pop
outs
rol
mov
mov
push
ss
pop
stos
enter
test
mov
jae
cwde
neg
(bad)
vphadddq
add
stc
(bad)
aas
pop
shl
mov
dec
add
adc
test
or
cdq
das
mov
add
ficom
call
neg
mov
test
mov
mov
les
fcomp
xchg
std
cmps
popa
xor
shl
mov
mov
xchg
out
pop
cdq
dec
push
add
adc
(bad)
mov
out
mov
jmp
test
pop
sbb
and
loop
or
shr
jae
scas
cmc
addr16
pop
aad
enter
sbb
jns
pop
repnz
sub
add
loope
int3
cmp
mov
enter
out
cs
bound
add
cmp
pop
xor
in
fs
(bad)
sbb
mov
lock
mov
xor
inc
mov
enter
jns
ins
lock
mov
ja
and
arpl
sub
retf
jl
inc
cmp
push
(bad)
mov
pop
mov
mul
fcom
sti
inc
(bad)
fidivr
lahf
pop
dec
ret
clc
repz
push
fmul
pop
mov
push
mov
addr16
mov
adc
xor
data16
div
xor
jnp
jp
aad
dec
ret
and
cli
xor
dec
dec
pop
xor
(bad)
fwait
lods
inc
sub
pop
xchg
mov
push
push
mov
sub
jmp
push
shl
stos
dec
int
mov
mov
xor
repnz
xor
sahf
and
cmps
push
jg
xor
adc
or
outs
mov
mov
imul
movs
mov
inc
aaa
jbe
add
adc
in
stc
adc
and
xor
pop
loopne
pop
out
mov
mov
ja
icebp
test
push
sti
push
add
repnz
mov
repnz
sbb
or
cmp
dec
xchg
shl
push
int
(bad)
dec
inc
inc
shl
dec
in
push
arpl
jae
(bad)
pusha
dec
test
push
popf
ret
fld
mov
mov
dec
and
push
(bad)
jmp
xor
shr
repnz
add
push
or
or
mov
or
das
push
imul
enter
nop
add
gs
jo
and
in
pop
(bad)
and
(bad)
das
adc
mov
and
push
std
push
cdq
mov
cmp
sub
imul
mov
adc
movs
jg
jmp
inc
sbb
popf
xchg
push
jle
xchg
lahf
loopne
mov
sub
or
jae
jge
sub
pop
scas
mov
mov
dec
mov
repz
mov
into
jne
or
add
ror
sbb
cwde
or
arpl
repz
sub
dec
jmp
adc
jbe
mov
rcr
pushf
dec
pop
jmp
push
test
les
loope
es
call
iret
mov
into
or
in
bound
sbb
and
fsubr
(bad)
(bad)
cmp
push
and
cs
or
repz
cmp
pmaxsw
mov
(bad)
pop
cmp
inc
shl
jb
jbe
fisub
dec
out
fs
test
loopne
dec
outs
sub
jle
pushf
sbb
dec
mov
cmp
clts
and
sahf
fld
mov
cs
movs
mov
cld
adc
mov
or
xlat
mov
jle
imul
mov
push
pop
mov
pushf
les
push
leave
shl
xchg
or
dec
add
stos
xor
xor
push
pushf
dec
call
(bad)
sbb
xchg
mov
inc
scas
jp
xchg
inc
xchg
xchg
lods
(bad)
out
and
or
fucomip
in
sbb
aas
and
ins
shl
jne
cmp
sbb
xlat
xor
js
pusha
push
inc
shl
in
jg
jns
push
push
scas
jl
mov
push
mul
pop
in
sub
je
xchg
adc
mov
pop
add
mov
std
js
imul
mov
mov
adc
(bad)
clc
push
lds
cmp
dec
push
and
push
mov
mov
es
icebp
jmp
out
pop
dec
or
sub
ins
int3
(bad)
cld
dec
loope
out
out
imul
lea
das
inc
inc
mov
rcl
shl
test
xchg
or
mov
fucomi
pop
pop
inc
rol
push
test
inc
mov
popf
pushf
lods
jle
fwait
sbb
fstp
out
adc
jg
mov
in
cli
bound
imul
shl
daa
pop
out
xor
fs
cli
call
mov
addr16
and
dec
in
and
or
jp
loope
push
or
rcr
repnz
jne
or
into
xchg
adc
pop
sti
bnd
cs
inc
loop
xlat
adc
jecxz
test
add
popa
sbb
scas
in
rcr
sbb
mov
daa
fwait
mov
mov
jo
xor
arpl
add
icebp
xor
(bad)
je
or
sahf
dec
mov
hlt
lahf
int
pop
fcomp
mov
fdivr
sbb
imul
jb
pop
mov
call
loope
jns
stos
not
cmp
pop
cld
lods
lods
fsubr
pop
jbe
xor
(bad)
setae
call
xchg
aam
call
movs
pushf
faddp
jb
imul
jo
fidiv
mov
cwde
cli
jne
mov
in
mov
cs
cwde
jb
jp
sub
cmps
or
shl
and
fucom
push
test
lods
pop
or
cli
(bad)
in
imul
fs
cld
js
movs
sbb
xchg
sahf
mov
adc
push
push
jle
jbe
lods
jg
pop
add
and
jne
and
call
xlat
scas
jg
outs
in
sub
scas
and
sbb
fild
aaa
lea
dec
fisttp
fld
test
push
ins
pop
cmp
cmp
jne
mov
mov
xor
sub
mov
in
push
ds
jno
out
or
pop
ret
inc
and
mov
xor
and
adc
ret
mov
xchg
jae
out
jmp
sti
or
inc
fdivr
xchg
jg
or
cmps
sub
lods
jne
or
das
imul
pop
inc
sbb
popa
inc
dec
repnz
jno
adc
push
hlt
add
aas
movs
mov
leave
dec
jno
push
add
movs
adc
lds
mov
cmps
dec
outs
test
mov
hlt
out
dec
xchg
inc
xchg
dec
or
add
mov
test
mov
dec
scas
aaa
push
jae
fimul
fst
xchg
daa
scas
xor
ins
int3
mov
popa
getsec
inc
rol
xchg
(bad)
lock
xlat
adc
retf
push
ss
ins
xchg
mov
lea
cmp
shl
fimul
mov
imul
jp
popf
push
out
sub
mov
idiv
ds
iret
idiv
dec
out
jns
repnz
mov
(bad)
inc
data16
out
adc
scas
mov
mov
xor
sbb
call
rcl
jne
dec
fwait
adc
mov
rol
in
idiv
jne
int
mov
(bad)
outs
dec
(bad)
pushf
bound
stos
stc
fisttp
sbb
fcmovbe
sbb
xor
pop
xor
mov
sbb
xchg
adc
int3
adc
sub
and
outs
jp
es
xlat
aas
push
enter
or
pop
fucomip
mov
push
test
(bad)
xor
fisub
movq
sbb
(bad)
mov
out
out
dec
jge
in
xchg
xchg
je
adc
test
out
or
add
jmp
xadd
add
int3
mov
test
sahf
outs
or
sub
das
ja
(bad)
pop
adc
(bad)
clc
mov
(bad)
popf
mov
mov
add
(bad)
xchg
add
inc
mov
mov
div
hlt
mov
repz
aad
int
jge
mov
pop
sbb
pop
hlt
fisub
std
pop
pop
cmp
ficomp
pop
jp
rcl
dec
icebp
loope
std
adc
adc
inc
add
push
lods
aas
gs
push
mov
cmp
ss
push
cs
ret
mov
dec
cmps
inc
fdiv
cmp
push
push
cwde
test
std
dec
retf
out
pusha
pop
std
in
ss
xchg
jle
adc
div
mov
dec
lds
adc
sbb
or
fdivrp
test
jo
add
xchg
jl
pop
jl
inc
js
push
neg
in
mov
xlat
test
mov
sar
xchg
sub
test
movs
dec
loopne
cwde
add
mov
inc
sahf
fiadd
loop
adc
rcr
cwde
jns
ins
femms
retf
pushf
pop
and
mov
aaa
inc
push
js
fwait
xchg
out
iret
retf
movhps
hlt
imul
sahf
pushf
xor
mov
fistp
sub
mov
outs
push
xchg
mov
mov
scas
mov
jnp
ins
jl
inc
pop
push
dec
push
adc
mov
call
xor
mov
sub
push
cmp
dec
call
popa
test
xchg
xchg
out
in
sub
jl
in
pop
add
addr16
(bad)
or
dec
mov
push
add
sub
jne
mov
ins
mov
cmps
aaa
sub
ja
das
adc
cdq
sub
xchg
xchg
xchg
imul
adc
xlat
push
inc
fisttp
sub
or
(bad)
vmread
cs
fmulp
test
xchg
daa
icebp
fs
mov
(bad)
mov
repz
push
adc
mov
(bad)
xchg
cmp
call
cmp
and
sub
lock
mov
in
sbb
lock
ss
popf
fadd
out
push
mov
repz
add
and
lahf
fldcw
pop
not
add
in
inc
(bad)
leave
mov
push
stos
jne
ror
ss
jae
ficomp
pop
inc
inc
push
mov
lock
sahf
jp
pusha
scas
fs
test
pop
and
sub
pop
div
in
leave
pop
adc
jp
sbb
dec
pop
and
mov
pop
shl
loope
lea
cmp
popa
fist
inc
out
add
push
sbb
into
(bad)
leave
jbe
sub
aaa
in
(bad)
mov
xchg
aas
jo
xor
sbb
cli
xlat
into
mov
aas
mul
jbe
enter
(bad)
(bad)
and
mov
jl
out
and
cwde
daa
inc
call
dec
pop
popf
xlat
mov
sub
push
pusha
icebp
ficom
and
mov
sbb
mov
test
pop
stos
sbb
xlat
stos
popf
xchg
enter
sahf
sub
or
push
pushf
adc
mov
sbb
cwde
cld
sbb
into
clc
pop
pop
dec
das
xchg
lods
xor
sar
cmp
fldcw
shl
adc
push
rcr
dec
int
jnp
outs
push
sub
adc
lods
inc
cmps
ins
cmp
rol
stos
lods
ror
iret
rcl
ret
or
dec
adc
inc
and
in
jecxz
xor
sbb
dec
dec
cdq
mov
and
mov
outs
push
push
dec
jno
popa
push
fucom
fisub
adc
inc
jns
mov
call
dec
scas
jp
or
stc
mov
rcr
scas
ins
int
cmp
out
fldenv
jbe
cmp
cli
bound
push
jae
mov
in
mov
or
mov
jbe
pop
mov
outs
fcmovnb
outs
push
movs
inc
jb
lods
cmp
das
adc
push
ss
neg
mov
add
dec
sub
sub
(bad)
call
or
sbb
xchg
gs
pshufw
ret
mov
xor
and
xor
xor
adc
pop
aaa
push
xor
inc
in
adc
outs
pop
xor
addr16
mov
dec
push
imul
jp
jmp
aam
pop
xor
mov
and
int
and
fcomp
test
into
mov
cs
idiv
repnz
lea
out
pop
cs
cmps
pop
inc
adc
leave
push
in
push
ror
mov
jae
jmp
adc
xor
sbb
jbe
retf
(bad)
push
retf
mov
mov
xchg
mov
addr16
inc
add
push
sub
inc
pop
leave
ins
gs
stos
push
or
lock
into
aad
in
fsub
test
mov
jb
ins
ja
and
push
pop
(bad)
ret
cmps
gs
xor
sub
std
shr
mov
addr16
ror
sub
xlat
dec
push
dec
cmp
add
out
and
lahf
int3
mov
outs
pop
xor
aad
rcl
push
aad
adc
(bad)
jnp
fwait
lods
jg
sbb
jmp
push
fld
loopne
pop
in
and
sbb
or
pop
xchg
lods
xlat
jmp
xchg
scas
and
aaa
push
test
xchg
into
jno
cmp
iret
cmps
xchg
xor
pop
mov
stc
inc
jae
daa
adc
and
outs
(bad)
cmp
lds
sar
cmps
jo
inc
std
mov
inc
fcomp
adc
mov
fnstsw
sub
push
enter
repz
adc
sub
jo
fistp
adc
(bad)
out
movs
fidiv
cmps
call
fist
add
sahf
and
push
enter
mov
test
dec
dec
fidivr
pop
aaa
test
mov
push
or
sub
cmp
pop
data16
fs
pop
rcl
push
xor
sub
ror
adc
add
sbb
out
jecxz
cdq
xchg
push
lods
sbb
stos
cmp
dec
mov
scas
inc
mov
imul
imul
dec
scas
hlt
xor
jecxz
mov
inc
out
je
jg
adc
ins
das
fs
iret
cli
mov
enter
add
movs
dec
mov
out
rol
push
add
and
mov
sti
sub
cmp
mul
(bad)
int
ja
adc
dec
and
ret
in
cmp
cmp
cwde
sub
mov
inc
cmp
sbb
pop
out
in
gs
xchg
std
cmp
mov
lock
jns
out
test
gs
xor
fld
aas
repnz
pop
repz
and
adc
jmp
sbb
mov
cmps
jbe
in
jmp
cmp
(bad)
into
or
lods
sub
xor
cmps
out
mov
mov
gs
push
ret
les
mov
lea
push
pop
rcl
cmp
out
cwde
mov
mov
fstp
icebp
mov
je
and
add
je
mov
mov
cli
mov
sbb
cmp
ins
pop
rcl
sbb
sti
neg
repnz
dec
cmc
xchg
shl
fld
push
or
mov
xor
pop
dec
jno
xchg
ds
xor
in
(bad)
and
sbb
cmp
push
loope
out
jmp
fisubr
in
xchg
sbb
sub
sub
dec
and
cld
fldenv
xor
sub
xor
ja
cmp
pop
adc
idiv
pop
test
jg
mov
xchg
iret
jmp
je
lds
out
sti
ja
test
sub
inc
cmp
push
dec
mov
dec
hlt
add
jbe
pop
arpl
mov
xor
mov
pop
pop
cmp
adc
jle
mov
sub
das
add
mov
out
or
pop
mov
arpl
sub
push
inc
daa
inc
hlt
retf
xor
in
xor
cmp
mov
cmp
mov
and
dec
cmp
and
arpl
mov
cmp
xchg
or
and
ficomp
ret
cmp
sbb
mov
ins
test
xchg
call
xchg
adc
add
imul
push
lods
ror
jbe
push
in
inc
rcr
or
sbb
inc
pop
jno
pop
push
nop
adc
out
mov
push
mov
mov
add
jle
sbb
mov
pop
repz
jp
jo
push
cmp
adc
popf
jb
das
pop
jno
repz
data16
mov
xor
mov
lahf
push
movs
cli
bound
int
ret
or
addr16
inc
shl
cmps
(bad)
popa
pop
jne
mov
mov
(bad)
in
pushf
hlt
jnp
into
dec
lahf
test
cmp
in
add
icebp
push
add
cmp
jns
inc
lods
mov
hlt
sbb
mov
cmps
aaa
jnp
pushf
sahf
fnsave
cmp
cmp
aas
mov
stc
pop
and
rcr
xor
or
jl
jl
loop
pop
sub
add
test
sub
fisub
cmp
push
into
dec
sbb
mov
xchg
and
cwde
jle
or
lds
push
enter
les
inc
enter
pop
add
push
stc
inc
jb
loopne
jns
fcmovnu
stos
xlat
push
int3
(bad)
shl
xchg
cs
aad
sub
sbb
push
nop
rcl
pop
fbstp
out
movs
pop
cmps
jmp
fcmovu
sahf
xchg
add
cld
mov
neg
sbb
bswap
and
add
adc
lods
push
pop
inc
lds
ret
pusha
scas
and
(bad)
fnstenv
mul
mov
sbb
add
jmp
lods
(bad)
cmc
pop
dec
mov
inc
add
lods
dec
fdiv
xor
jg
add
int
lods
mov
dec
mov
les
xchg
mov
mov
rol
push
xor
movs
leave
adc
stos
icebp
sbb
pop
push
popf
scas
or
sbb
sub
inc
mov
jns
loope
sub
lods
std
jns
jmp
xchg
mov
jbe
scas
or
sti
xor
das
lock
mov
(bad)
push
pop
jne
add
inc
xchg
add
inc
push
mov
outs
push
scas
js
daa
or
lock
jmp
enter
cdq
pop
(bad)
sub
in
aam
dec
xchg
cmp
xchg
ins
and
mov
add
movs
ja
ss
sbb
jg
mov
inc
jge
mov
jns
popa
loopne
aam
inc
cmp
sahf
adc
sti
sbb
xor
xor
pop
jmp
xlat
and
out
retf
adc
add
adc
stc
mov
cmp
int
mov
push
pop
mov
ins
add
outs
test
aad
pop
xchg
xlat
inc
push
jae
cmp
shr
pop
jge
cdq
mov
cmp
mov
sbb
xor
mov
pop
fnsave
mov
or
or
mov
add
ret
sub
xchg
mov
out
fstp
sub
push
jecxz
cdq
sti
repz
ret
cdq
jge
shl
daa
inc
(bad)
icebp
push
push
xchg
not
mov
je
dec
cs
lahf
xor
cmps
add
ret
frstor
xchg
cmp
xor
in
or
jb
dec
mul
movs
js
mul
fnstenv
sbb
jle
or
push
cmps
inc
xchg
fild
lahf
shl
and
cwde
xchg
push
pop
pop
pusha
movs
std
stc
lds
clc
xor
mov
add
cmps
cmp
mov
or
ins
push
jnp
cmp
lods
push
lahf
adc
loope
inc
jno
cmp
(bad)
cli
rcl
dec
stc
neg
ds
fcom
sub
mov
in
out
inc
(bad)
cmp
cli
lea
shl
test
pusha
xchg
mov
jnp
inc
(bad)
stos
and
pop
adc
push
dec
mov
xchg
mov
and
or
or
cmp
scas
in
fst
int
rol
mov
sub
jecxz
out
sub
fcom
mov
sar
mov
xchg
mov
sub
lods
push
lock
repnz
lahf
or
xor
or
mov
dec
cmp
ja
sbb
dec
stos
fbld
sub
ja
jge
lods
jbe
aam
repnz
inc
mul
jecxz
inc
ja
rol
xchg
mov
int
into
push
dec
xor
movs
imul
adc
scas
cmps
or
pop
adc
push
outs
adc
sub
and
push
adc
or
popa
cld
push
mov
in
ins
jo
and
dec
dec
(bad)
test
xor
rcl
int
jbe
pop
rcl
add
fisubr
mov
in
jmp
sti
and
xor
pop
retf
mov
sub
fst
mov
push
xchg
jbe
xchg
sub
nop
shl
lahf
and
das
jmp
ror
cmp
jo
icebp
shl
scas
call
stos
cmc
add
xor
cs
pop
mov
fs
mov
out
add
outs
xlat
xchg
jno
inc
sub
gs
pop
ja
mov
retf
xor
into
sbb
sub
sub
ficom
in
sbb
mov
jmp
mov
jo
push
xlat
lods
mov
jmp
lock
push
or
sub
pop
or
fist
jecxz
push
ss
push
mov
pop
and
in
ds
mov
jecxz
inc
aam
jnp
data16
imul
mov
imul
ficomp
push
mov
adc
add
out
xchg
jb
xor
pop
or
inc
fimul
mov
push
sub
cmp
fist
sbb
dec
in
mov
cli
or
or
add
cmps
sub
lods
mov
stc
cwde
mov
leave
out
cmc
mov
(bad)
sbb
cmp
mov
cmps
ror
dec
cli
push
rcr
in
fwait
push
shl
push
ret
mov
loope
cmps
je
jle
or
jne
clc
adc
aam
(bad)
or
ror
mov
mov
inc
fisub
xor
pop
jmp
pop
fild
adc
jne
lea
sub
push
add
pop
sub
movs
(bad)
adc
out
push
add
jp
jbe
xor
call
xchg
imul
dec
cmp
into
(bad)
mov
adc
or
jle
out
popf
xor
xchg
and
jmp
sbb
push
dec
fidiv
cmp
in
push
mov
xchg
mov
push
pop
jl
fidiv
into
cmp
dec
or
data16
mov
sbb
scas
add
or
stos
mov
add
jb
popf
xchg
pusha
aas
push
push
xor
pop
and
jb
(bad)
std
dec
sbb
daa
xchg
arpl
xor
ror
std
in
jne
in
jnp
fst
jns
xchg
inc
idiv
mov
jle
pop
add
pop
or
mov
jle
in
jns
movs
pop
cmp
test
lahf
cdq
inc
xor
loopne
sbb
cmc
jb
inc
xor
add
lahf
scas
lahf
rcl
and
inc
adc
ret
cs
popf
mov
aad
xchg
fs
int
mov
jb
xchg
jo
mov
hlt
pop
mov
idiv
loopne
jo
shr
in
daa
popa
dec
jbe
sbb
adc
mul
not
aaa
test
icebp
jecxz
jmp
ss
cdq
sbb
adc
movs
cmp
jmp
aaa
fnstsw
dec
sahf
or
leave
and
pop
je
(bad)
out
and
iret
mov
cdq
aam
cmp
jmp
fs
cmp
ret
add
fmulp
xchg
clc
or
stos
jno
xchg
add
movs
call
sbb
and
je
movs
push
cmp
xor
out
push
wrmsr
(bad)
aaa
imul
and
xchg
sub
loope
push
push
push
mov
cmp
outs
push
or
mov
cmp
in
mov
inc
fcom
mov
jge
scas
inc
mov
mov
jae
and
and
out
ja
stc
call
push
repnz
outs
jle
adc
cmp
push
sub
rcl
gs
fwait
gs
neg
sti
pop
cmps
jbe
outs
sub
push
fs
xor
ret
cmp
cmc
sbb
ds
imul
outs
shl
daa
(bad)
cmp
ret
adc
cld
mov
daa
inc
pusha
aad
mov
call
sbb
xchg
mov
sub
sbb
cmp
pmuludq
jnp
jae
into
add
sbb
add
inc
push
clc
ins
idiv
mov
jae
xor
push
rep
gs
sub
push
cmp
inc
mov
sub
jb
jb
and
push
push
aas
inc
xor
fucomp
mov
adc
icebp
sbb
mov
es
inc
sbb
clc
xchg
jmp
push
jle
iret
das
not
das
push
rcl
in
xor
ror
repnz
aas
inc
shl
push
cwde
lea
dec
inc
in
push
adc
pop
shr
xchg
sti
imul
test
mov
fnstenv
xlat
xor
scas
jb
call
sbb
ror
push
lea
call
rcl
das
das
jmp
sub
xchg
sub
xor
loopne
int
mov
sbb
pop
xchg
mov
cld
gs
mov
push
add
push
push
inc
dec
mov
or
div
lds
aaa
(bad)
lahf
xor
ins
js
mov
cmps
mov
sub
stos
fdivrp
out
xor
xchg
mov
repz
mov
jb
stc
packssdw
pushf
mul
sub
xchg
shr
std
popa
inc
and
inc
test
push
mov
mov
xchg
cs
adc
jae
dec
mov
jo
mov
call
sbb
js
xchg
cmp
jbe
mov
xor
jb
and
in
xlat
jmp
jnp
(bad)
je
adc
movs
movs
sub
stos
adc
xor
(bad)
mov
mov
cmp
ret
test
cmps
inc
movs
jp
leave
pop
stos
mov
mov
inc
cmp
cmps
inc
imul
mov
push
add
lods
push
add
jbe
je
stc
dec
cli
inc
das
push
ret
mov
sbb
or
xchg
jmp
repnz
jns
lock
push
mov
inc
icebp
leave
sub
jns
dec
add
mov
cmps
hlt
in
cld
ret
mov
jne
stc
push
cdq
pop
adc
mov
sub
or
outs
xor
dec
jmp
jb
xor
in
jle
not
sbb
add
add
js
pop
jge
cmp
sub
xchg
fdiv
pop
lock
pop
mov
push
mov
out
sub
stc
cmp
enter
aad
mov
imul
stc
push
push
cwde
or
sbb
pop
ja
pop
push
scas
mov
test
mov
fwait
retf
and
jmp
lods
jp
dec
stc
movs
pop
adc
repz
jns
add
cmp
inc
stc
push
in
cmp
xchg
retf
test
add
and
fstp
movs
les
pop
and
dec
popa
movs
outs
sbb
pop
enter
and
and
stos
dec
imul
inc
add
xor
adc
mov
inc
mov
sbb
inc
pop
ds
fisttp
fimul
adc
fistp
sub
push
pop
push
push
in
nop
jmp
adc
fdivr
bound
jle
mov
call
jno
inc
vpunpckhwd
jne
and
imul
(bad)
fxch
adc
les
adc
scas
(bad)
adc
int
dec
xchg
test
lahf
xor
(bad)
out
jnp
leave
mov
fdivr
repnz
cmp
aas
repnz
jb
in
xchg
jnp
call
cli
xchg
dec
cmp
clc
lahf
cld
dec
mov
les
aad
shr
outs
ins
adc
mov
jmp
jle
sub
fstp
jns
leave
mov
or
mov
call
add
mov
pop
or
dec
out
(bad)
mov
dec
mov
xor
push
in
jae
inc
aas
dec
scas
test
inc
push
dec
sbb
inc
loope
pusha
mov
in
int
sar
push
icebp
push
pop
gs
clc
push
xor
or
or
loope
mov
inc
jp
or
popf
shl
pop
pop
add
bound
mov
pusha
jg
and
in
jno
add
sub
mov
fstp
adc
mov
cmp
mov
retf
mov
stos
jge
pop
aad
sbb
pusha
out
test
dec
lds
xor
stos
popa
xchg
lds
aad
pop
jo
repnz
jno
or
mov
(bad)
sar
mov
add
cwde
mov
mov
or
xchg
je
mov
jle
pop
jle
jo
lock
scas
mov
lods
(bad)
push
cmc
adc
jmp
hlt
fdiv
test
add
cmps
mov
xchg
fstp
xchg
dec
fs
add
ss
add
loopne
inc
adc
xchg
inc
sahf
and
pop
jb
out
mov
dec
sub
mov
jb
xor
mov
or
xor
rcr
xor
(bad)
adc
fwait
retf
push
cmp
sub
cmps
and
hlt
out
fisubr
pop
sub
aaa
sbb
xchg
add
push
(bad)
jle
and
fwait
iret
xchg
cdq
push
pop
jecxz
lea
dec
inc
jge
mov
push
dec
push
inc
test
retf
jnp
inc
sub
cmp
imul
(bad)
or
dec
jecxz
clc
retf
push
jmp
retf
gs
loopne
dec
out
pusha
fnstsw
jecxz
sar
dec
mov
dec
xor
mov
xchg
dec
iret
jo
mov
xchg
pop
dec
add
(bad)
cld
or
pop
lock
cwde
ins
adc
xor
stos
ds
mov
loope
mov
leave
stos
gs
jne
jae
dec
add
int
and
std
test
test
xor
cs
les
mov
adc
jns
dec
loopne
bound
mov
scas
and
ss
or
mov
stc
mov
mov
pop
jl
xchg
mov
repnz
test
out
es
sahf
xor
in
(bad)
(bad)
aam
sub
and
mov
fadd
jno
repnz
jns
xchg
repz
xchg
add
dec
jecxz
adc
je
or
inc
imul
pushf
sahf
cmp
ficomp
mov
cmps
push
int
ds
jle
jae
add
(bad)
mov
cmps
push
not
rcr
and
jns
mov
lods
jbe
into
jno
xchg
cld
pop
cmps
xor
xchg
sbb
call
sub
or
inc
hlt
je
rol
cmc
ret
jmp
or
add
push
lock
push
mov
stos
xor
jge
ins
clc
retf
nop
addr16
sub
daa
and
or
mov
dec
call
(bad)
lahf
test
adc
das
adc
or
in
push
xchg
fisttp
jbe
repnz
xor
pop
inc
mov
add
sub
mov
sub
sti
dec
pushf
es
and
pop
or
mov
fwait
jae
or
rcr
cli
ins
mov
xor
test
sbb
sbb
push
push
pop
mov
inc
call
in
call
mov
and
mov
xor
mov
dec
sahf
je
sbb
fisubr
sbb
sbb
pushf
mov
xchg
cdq
loopne
repnz
or
dec
push
jge
add
push
sti
lods
push
jmp
inc
call
pop
cwde
push
adc
movs
and
mov
cld
jnp
mov
int3
push
arpl
int
sub
enter
pop
inc
add
loopne
out
enter
hlt
sbb
mov
add
jb
fbstp
(bad)
cld
push
add
push
and
push
xor
in
data16
test
xchg
cld
call
sbb
mov
sbb
mov
lock
out
(bad)
sub
inc
iret
cmp
dec
jle
test
loope
aam
imul
iret
push
xchg
stc
dec
adc
nop
imul
xor
xor
fcom
xchg
mov
repz
cmp
and
mov
sub
cmc
fs
outs
imul
icebp
fisub
adc
ror
push
ss
in
movs
out
aaa
cmp
test
(bad)
aam
jg
ret
sub
or
cmp
xchg
ins
fisub
push
jbe
mov
fs
mov
sub
push
call
xchg
and
imul
shl
loope
dec
or
shl
pop
out
lahf
push
iret
jmp
pop
mov
fcmove
xchg
add
nop
in
cmp
push
(bad)
and
dec
push
and
daa
fiadd
cmps
(bad)
int
ror
jg
sub
stos
xchg
test
mov
stc
call
dec
cli
adc
add
movs
mov
fs
shl
fistp
outs
jno
jmp
pop
cwde
xchg
in
movs
cmp
dec
add
inc
retf
loopne
inc
movs
inc
and
jecxz
and
xor
dec
xor
jo
mov
jl
mov
dec
(bad)
dec
test
mov
aaa
dec
add
fdivr
mov
adc
mov
repz
push
call
inc
fyl2xp1
daa
mov
jne
add
ins
aas
push
outs
jl
fst
dec
arpl
jmp
inc
ret
in
ss
mov
inc
test
cmp
mov
outs
movs
push
sub
sub
sbb
cmp
dec
out
add
hlt
sbb
(bad)
je
cmc
fisttp
fmul
and
dec
pop
test
ror
arpl
pop
stos
in
mov
lea
jle
js
mov
(bad)
popf
loopne
add
cmp
xchg
lahf
gs
push
inc
mov
and
fmul
adc
iret
data16
inc
int3
clc
adc
lahf
fild
mov
cdq
push
or
ins
jno
(bad)
out
pusha
sbb
jmp
gs
pop
dec
xor
mov
ficom
mov
ret
cmps
xchg
jmp
adc
mov
mov
in
cld
fisttp
xchg
test
xor
pop
je
bound
dec
adc
cmp
out
(bad)
or
add
adc
gs
mov
jp
sar
clc
sbb
or
jne
adc
adc
addr16
mov
dec
mov
iret
push
sbb
outs
xchg
dec
in
pop
leave
cmp
pop
xlat
push
jge
or
cmps
rol
mov
add
out
mov
stc
mov
jnp
xchg
pop
sbb
daa
xchg
pop
popa
rcr
sub
sbb
add
mov
mov
adc
jmp
mov
sub
inc
scas
pusha
xchg
jle
cs
into
outs
add
push
leave
out
and
out
and
push
xchg
inc
out
(bad)
jo
out
mov
cli
ds
inc
test
or
lea
mov
lods
in
imul
push
fisttp
jmp
mov
fcmovnu
jg
dec
lock
xlat
popf
js
add
test
in
popf
stos
ins
mov
outs
and
pop
adc
jle
loopne
sahf
adc
pop
xchg
leave
pop
daa
push
fidivr
in
aad
in
(bad)
dec
jp
lds
movs
loop
pop
out
int3
dec
jns
shl
push
mov
xchg
adc
retf
adc
popf
inc
shl
jmp
pop
cmp
int3
push
jle
cmp
dec
inc
lods
sbb
pop
or
fdiv
mov
cwde
push
dec
sar
ret
gs
mov
inc
or
jne
adc
mov
mov
push
clc
dec
add
mov
pop
pop
jmp
cmps
call
movs
mov
xor
pop
adc
mov
jmp
jge
push
mov
enter
jo
jno
xchg
das
xchg
mov
push
dec
fidiv
and
fcomp
dec
mov
lock
cs
adc
addr16
mov
int
in
das
mov
mov
add
adc
adc
test
inc
ret
jg
or
push
repz
cmp
aas
sti
xchg
cmp
repz
ss
in
(bad)
cwde
push
out
mov
jb
mov
jns
jp
sub
xchg
rol
xor
fsub
(bad)
hlt
mov
lds
sbb
add
add
es
aam
cmp
or
and
xor
clc
xchg
and
adc
rcl
xchg
dec
jbe
xchg
daa
adc
inc
lods
dec
aas
aam
pop
push
cmp
mov
and
mov
(bad)
mov
and
mov
inc
jo
dec
push
push
xchg
inc
sub
sub
scas
ja
(bad)
mov
fld
inc
sub
nop
aad
(bad)
imul
retf
jb
dec
fcomip
and
mov
shr
mov
sbb
mov
and
mov
(bad)
nop
cmp
mov
rcl
into
shr
pop
xor
int3
adc
jmp
ja
js
jo
cli
int
fmul
adc
not
mov
push
xlat
xlat
mov
je
mov
jmp
sti
mov
jae
psubd
imul
inc
mov
test
jne
adc
xchg
mov
das
jmp
push
jl
ror
cs
jmp
jne
inc
add
ss
cmp
nop
push
repnz
cdq
mov
jne
sbb
adc
sub
retf
push
icebp
inc
mov
ja
pop
xchg
sbb
rol
(bad)
push
ret
push
test
out
mov
mov
fstp
in
mov
xchg
mov
mul
pop
test
in
mov
test
dec
stc
xor
push
mov
mov
or
push
cld
fmul
(bad)
dec
add
or
ficomp
js
dec
add
mov
ss
fwait
nop
dec
cmps
xor
cmc
jmp
pop
movs
adc
es
cmp
out
push
idiv
push
iret
in
and
mov
xchg
fmul
xchg
push
cmp
and
sar
jne
pop
and
adc
out
lahf
ds
sar
xchg
add
pusha
pop
aad
add
push
pop
dec
aas
sub
pop
adc
in
xchg
lods
ror
jl
push
adc
mov
mov
push
leave
jo
add
cdq
rcr
cmp
xor
out
stos
or
lods
jae
pop
pop
cmp
mov
fiadd
mov
mov
aam
pop
test
dec
pop
add
cs
adc
xor
xchg
es
dec
dec
stos
or
cdq
out
dec
ret
add
add
cwde
cld
mov
xchg
or
xor
das
out
cmc
imul
and
xor
cwde
adc
shl
rcl
xchg
dec
xlat
inc
call
cmp
aam
call
pop
cwde
test
leave
mov
pop
pop
add
cmp
mov
pop
pmulhw
and
stos
test
push
sub
fldenv
rol
mov
fucomi
xchg
fdivr
cld
inc
or
ffree
pop
cmps
jns
pop
cmp
pop
mov
pop
mov
mov
daa
sti
(bad)
mov
dec
js
jbe
jge
push
out
or
sar
add
cli
mov
std
mov
and
icebp
pop
fnsave
loopne
add
jo
mov
sahf
in
mov
bound
push
dec
jno
xor
cmp
hlt
retf
jno
mov
push
adc
mov
jns
retf
mov
mov
unpckhps
push
shl
icebp
gs
loopne
pusha
sub
icebp
(bad)
aad
pop
xchg
add
popa
fcomp
pop
adc
mov
dec
dec
(bad)
xor
cmp
cmp
ins
dec
(bad)
iret
mov
ins
push
fistp
inc
out
loope
dec
xchg
daa
hlt
test
stos
mov
icebp
out
stos
jne
dec
mov
shr
sub
ins
pop
movs
pop
pop
fwait
xchg
and
loop
(bad)
push
test
ja
fistp
jb
sub
cmps
push
push
ror
pusha
ret
and
mov
mov
outs
or
xchg
out
lods
mov
in
(bad)
out
xchg
adc
(bad)
mov
jl
adc
add
shl
es
sbb
adc
or
pop
or
dec
or
cld
xor
ins
inc
add
mov
sub
sub
cdq
push
clc
adc
jg
xor
mov
xchg
rol
mov
pinsrw
sbb
adc
in
mov
sub
call
aas
xchg
stos
cmp
enter
inc
mov
imul
sub
fs
jmp
pop
(bad)
scas
idiv
out
dec
inc
xor
mov
movs
adc
repnz
xor
(bad)
cmp
cdq
pop
bound
scas
push
inc
rcr
add
js
xor
(bad)
fxch
dec
inc
add
shr
xor
nop
add
adc
nop
(bad)
or
and
mov
out
or
pop
cmps
lock
je
pop
scas
neg
xchg
inc
scas
movs
add
mov
cmp
adc
lock
inc
outs
push
int
dec
test
mov
xor
mov
popf
gs
fxch
pop
out
lods
inc
and
aaa
sar
cmp
outs
cmp
adc
jnp
push
inc
repz
mov
inc
mov
xchg
sub
gs
and
jg
(bad)
dec
fdiv
or
addr16
lahf
adc
(bad)
ret
mov
sbb
outs
jmp
ud1
clc
sub
inc
repz
inc
hlt
movs
mov
inc
imul
push
test
or
ins
adc
(bad)
sub
sbb
pop
aam
(bad)
fbld
hlt
jmp
movs
jae
add
pop
(bad)
test
int
push
mov
jbe
mov
add
push
(bad)
stos
dec
cmp
int3
test
sub
push
sub
jb
mov
mov
repnz
mov
or
mov
cld
mov
push
pop
not
push
pop
mov
jae
xor
in
cmps
lahf
mov
cli
adc
shr
or
test
xor
cmc
loope
out
mov
and
push
add
(bad)
sahf
cwde
or
push
sbb
or
and
aad
jmp
into
pop
mov
das
in
in
jo
dec
out
jecxz
mov
out
mov
leave
bound
cmp
add
inc
int
ja
in
retf
adc
leave
inc
push
retf
dec
xchg
dec
cwde
push
data16
xor
xchg
sub
fisttp
jmp
cmp
stos
dec
mov
xchg
sar
shr
cld
xor
popf
xchg
xchg
fdivr
(bad)
mov
das
mov
outs
lock
xor
mov
js
push
retf
push
mov
xchg
imul
xor
aam
aas
and
ficomp
xor
dec
xlat
push
and
imul
jmp
or
jmp
adc
xor
popa
jp
mov
icebp
or
mov
stc
imul
inc
fsubr
push
inc
mov
lods
xchg
and
cmp
(bad)
cmp
add
mov
popa
daa
xor
inc
in
ja
push
xchg
fidiv
xchg
mov
adc
stc
out
sub
xor
out
add
aam
aam
dec
test
cmp
xchg
cmp
cmp
sbb
das
(bad)
addr16
inc
popf
mov
dec
out
and
mov
retf
(bad)
add
pop
add
xchg
pop
cmps
call
jo
sbb
sbb
fimul
outs
rol
fnstsw
pop
lock
push
xor
sbb
mov
cmp
dec
ret
adc
push
ins
cmp
cmps
ja
jmp
cmc
mov
aad
popa
cli
pop
stos
leave
retf
clc
loop
xchg
cwde
scas
mov
add
or
sahf
shl
xchg
xchg
jae
and
sahf
xchg
aam
ds
add
xor
mov
jb
and
retf
dec
int
mov
pusha
mov
aaa
mov
mov
nop
adc
xchg
sti
dec
test
adc
inc
or
add
es
xor
loopne
push
sub
lock
jae
(bad)
(bad)
jae
gs
pushf
popf
mov
ret
cmp
das
pop
test
das
push
aas
xchg
js
and
imul
sbb
push
cmp
mov
imul
mov
dec
cmp
shl
pop
pop
cli
jno
arpl
test
or
sbb
jns
loop
test
and
gs
mov
pop
mov
adc
setp
push
sahf
push
mov
pop
ficom
(bad)
div
daa
inc
test
sbb
inc
shr
shl
in
push
aaa
adc
mov
pop
push
bound
leave
add
nop
fimul
jl
dec
cmp
lea
push
stc
cwde
mov
je
xor
mov
sbb
in
adc
jno
loopne
ret
or
(bad)
and
cmp
lahf
pop
dec
mov
inc
ins
xchg
lahf
or
or
outs
push
les
add
(bad)
mov
cs
and
xchg
mov
mov
cli
sub
mov
jno
mov
xor
call
out
or
mov
jnp
cmp
push
mov
mov
das
bnd
das
popa
fild
fs
sub
add
int
popa
adc
cmps
mov
pop
xchg
cmova
push
cwde
test
inc
xchg
mov
push
xchg
mov
retf
loope
fcom
adc
dec
and
mov
call
jae
in
sbb
push
inc
mov
repnz
popa
xor
movs
ficom
daa
mov
sub
faddp
fs
inc
mov
jbe
pusha
in
pop
arpl
pop
into
pop
xor
sti
push
cmp
outs
and
and
cld
arpl
(bad)
fsub
not
sub
sbb
shl
adc
or
pop
out
loop
mov
sub
div
push
js
mov
sahf
(bad)
jecxz
adc
inc
shl
ret
mov
and
sub
jp
pop
push
out
lods
pop
retf
mov
fmul
(bad)
mov
add
movs
push
repnz
je
adc
repnz
push
call
mov
dec
jp
fild
inc
(bad)
popf
aad
push
dec
xchg
pop
dec
pop
mov
test
repnz
mov
loope
adc
lods
out
jmp
cmps
mov
fdivr
mov
ret
cld
(bad)
mov
push
mov
ret
fwait
sbb
int3
jno
adc
inc
fnstenv
cdq
dec
xlat
xchg
ins
xor
mov
mov
or
inc
pop
(bad)
ja
fndisi(8087
mov
ret
test
cmp
ja
mov
jl
jle
jae
mov
or
test
imul
inc
xchg
test
dec
inc
mov
pop
rol
jecxz
push
jecxz
cmps
push
inc
mov
sub
sbb
bound
adc
loop
mov
bnd
les
mov
xchg
mov
inc
inc
popf
mov
ss
jb
jmp
cmp
mov
adc
(bad)
loop
mov
or
cdq
jb
fst
mov
pandn
mov
xchg
ds
stos
addr16
fcomp
and
mov
jno
leave
inc
mov
fistp
(bad)
jmp
cmp
fist
inc
(bad)
add
pop
dec
int3
aas
pop
fadd
das
out
shl
rol
cmps
gs
aam
hlt
rol
cmps
and
pop
(bad)
xchg
sub
out
xchg
add
jge
sub
mov
mov
mov
(bad)
jmp
pusha
mov
and
loope
cmp
pop
scas
pop
pusha
inc
in
outs
adc
call
or
xor
fbstp
ss
sahf
shl
pop
and
sbb
int3
jae
out
sbb
sbb
dec
mov
pop
and
in
dec
mov
js
js
sub
repnz
scas
sbb
cmp
idiv
add
sbb
pusha
les
xchg
push
sub
sbb
int3
cdq
imul
add
push
mov
cmp
loope
in
jb
xor
test
in
mov
xor
mov
mov
popf
sbb
mov
rep
cli
mov
xchg
test
imul
push
add
inc
jns
pop
sbb
je
iret
cs
xlat
daa
in
xchg
mov
mov
outs
push
push
ds
add
mov
cmp
push
jb
cmps
shr
xchg
icebp
and
cmc
xor
lock
inc
adc
fstp
sbb
call
mov
movs
sbb
(bad)
cmp
daa
and
loopne
icebp
dec
fwait
xchg
gs
sub
scas
loopne
sub
xchg
dec
hlt
push
es
test
sub
mov
add
shl
xchg
cmc
mov
jo
ret
sbb
stos
in
inc
fbstp
out
jae
inc
scas
sbb
ret
hlt
sub
jb
loopne
sbb
in
and
aas
jo
mov
ins
rcr
and
in
pop
sbb
aam
inc
and
inc
sub
bnd
or
out
sbb
dec
mov
xlat
aam
imul
(bad)
rcl
xchg
test
push
ja
fs
jo
jnp
adc
mov
sbb
mov
ss
mov
das
add
mov
pop
test
jnp
jge
and
nop
out
fiadd
inc
add
in
or
jae
dec
mov
cmp
dec
popf
cmp
push
xor
cmps
clc
or
daa
repz
xchg
mov
mov
jle
(bad)
fst
sbb
xor
mov
enter
pop
int3
xor
je
imul
xor
(bad)
push
pop
jae
enter
lods
fs
jge
and
inc
inc
push
cwde
mov
mov
pop
sub
std
sbb
dec
pusha
cwde
test
ret
or
out
lods
stc
stos
cmp
rcr
jmp
ins
dec
pop
pop
mov
(bad)
adc
int
mov
js
sub
mov
mov
mov
jns
jb
imul
fisub
das
jmp
stc
clc
jmp
add
int
jmp
dec
xchg
scas
jle
pop
stos
js
jl
movzx
sub
cmc
cwde
movs
push
xor
push
pusha
push
js
inc
cmp
(bad)
push
bound
aam
shr
out
loope
jmp
push
dec
pop
lods
xor
xchg
(bad)
ja
dec
fild
movs
xchg
cmp
in
popf
sbb
test
adc
into
push
repz
movs
mov
fwait
mov
xor
inc
add
xchg
pusha
and
push
or
dec
ds
cld
push
sub
not
imul
and
out
xor
or
mov
pop
and
xor
(bad)
(bad)
xor
mov
dec
mov
ja
in
aaa
shl
std
sbb
adc
sar
pop
xchg
pusha
(bad)
fisub
push
mov
cmp
dec
mov
retf
adc
dec
push
lods
loope
cmp
inc
adc
cli
rol
fs
pop
stc
fld
mov
je
add
push
sub
fstp
shl
inc
(bad)
fwait
ror
(bad)
or
call
inc
add
stos
test
(bad)
push
jnp
jle
mov
cmp
icebp
cdq
xor
xchg
je
adc
test
stos
add
mov
addr16
repz
aas
mov
ins
mov
fs
mov
jno
mov
push
xor
stc
pushf
push
jae
xchg
lock
adc
imul
pop
jne
pop
aaa
pop
dec
add
aad
xchg
inc
xlat
adc
add
hlt
push
xor
ds
or
inc
or
jb
in
aaa
inc
mov
iret
xor
fcomp
fs
cmps
inc
add
imul
push
arpl
sbb
mov
pop
jae
jecxz
mov
rep
sar
fist
(bad)
adc
ja
cmp
push
jne
add
int
push
test
je
pop
add
cmp
bound
or
pop
adc
inc
add
dec
ffree
in
mov
push
jle
xchg
fsub
iret
pop
add
stos
sbb
sub
mov
int
scas
int
sbb
mov
cld
mov
push
imul
sbb
xor
repnz
push
addr16
cmp
push
rol
push
mov
sub
inc
loope
out
pop
call
cmc
adc
stos
push
(bad)
(bad)
out
or
sbb
xchg
rol
aas
out
mov
or
mov
cmp
sub
add
outs
pusha
xor
scas
aas
mov
mov
arpl
and
lods
adc
add
jmp
dec
(bad)
aad
push
test
dec
lods
mov
aaa
xor
cmp
sahf
and
push
outs
xor
lds
push
or
ja
icebp
or
cld
xchg
out
fld
adc
cmps
ror
scas
lds
out
vpsadbw
pop
mov
test
repz
add
dec
cdq
pusha
mov
hlt
mov
rcr
mov
lock
pop
push
fs
mov
(bad)
enter
in
jle
sub
sbb
push
cmp
es
ja
inc
sbb
popf
jg
test
bnd
mov
outs
and
push
fs
sub
dec
outs
rol
push
in
in
das
cmp
jbe
gs
mov
xlat
jb
pusha
xchg
rol
bswap
cdq
cmp
or
add
loope
rcr
pop
jno
or
mov
add
jb
loope
js
cmp
and
jbe
cmps
adc
outs
cmp
(bad)
stos
and
lods
nop
es
mov
nop
xchg
in
mov
je
mov
xchg
pop
jo
add
mov
dec
(bad)
and
pop
aad
aad
xlat
mov
fimul
das
es
inc
sbb
push
sub
dec
popa
push
mov
outs
aas
cmp
xlat
cwde
adc
mov
adc
xor
test
mov
jns
inc
xchg
rcr
add
mov
aas
mov
rcl
and
sub
test
mov
mov
push
add
aam
dec
mov
xor
in
fidiv
in
iret
je
out
retf
xchg
mov
xor
inc
cdq
stc
xchg
and
mov
stos
scas
ds
scas
movs
adc
pop
adc
stos
mov
mov
jle
rcl
mov
inc
xchg
std
jmp
sub
in
push
push
xor
inc
ja
ja
pop
mov
(bad)
adc
cmp
xchg
or
or
or
pop
ss
push
push
fstp
pop
mov
popf
(bad)
shl
add
jno
ins
es
add
add
arpl
retf
or
cli
retf
fisttp
shr
mov
jmp
dec
or
push
push
mov
retf
std
xor
stc
stc
xchg
retf
jg
or
jg
les
xchg
stos
out
pop
loop
cmp
cmc
dec
dec
jbe
adc
pop
int3
or
jne
out
imul
jae
pop
rcr
hlt
sbb
pop
int
fsubr
(bad)
adc
jne
mov
test
or
dec
jno
push
pop
je
sbb
xor
iret
not
adc
pop
in
cli
mov
jp
popf
sbb
sub
or
push
ins
bound
dec
mov
sub
fdiv
clc
sbb
mov
movs
or
stos
mov
and
fcom
ja
adc
popf
jne
cli
or
or
adc
xor
pop
jg
jg
or
outs
fstp
pop
push
ss
sbb
fcom
xchg
rcr
sbb
xor
into
cmp
scas
mov
int3
je
les
jo
mov
and
push
xor
add
inc
dec
sahf
push
(bad)
in
fimul
jp
dec
xor
ret
cmp
xchg
mov
data16
cwde
xchg
pop
jp
data16
add
and
dec
movs
sbb
sbb
(bad)
sbb
sti
mov
sbb
repz
add
jno
jmp
push
lock
hlt
adc
es
push
sub
cmc
xchg
test
cmps
bound
dec
push
jbe
dec
jle
add
fcom
ins
out
inc
sub
loope
add
mov
xchg
or
inc
int
mov
jno
adc
imul
xlat
popa
(bad)
jecxz
idiv
push
dec
or
cmp
lea
push
lea
fs
shl
xchg
add
inc
jne
push
cmc
inc
retf
(bad)
nop
xchg
fdivr
xlat
loopne
int3
ficom
push
fnstsw
daa
es
out
cmp
sub
lea
test
test
inc
fdiv
movs
push
sbb
mov
jbe
jne
mov
and
push
repnz
outs
arpl
addr16
lods
jl
add
rol
into
adc
jb
call
addr16
jle
add
cmp
clc
pop
fmul
stos
out
(bad)
stos
aad
cli
mov
mov
jmp
fdiv
into
loope
std
aaa
fwait
adc
adc
in
push
mov
ror
rol
nop
mov
sub
ret
mov
rcl
xor
xor
out
clc
jns
shl
imul
out
ins
or
into
sbb
arpl
loope
das
fild
xor
jb
imul
aad
push
mov
not
jle
jl
xor
out
pop
shl
cmc
popf
(bad)
gs
call
outs
mov
(bad)
out
xor
outs
gs
(bad)
ds
cmp
inc
movs
data16
jp
sbb
sbb
(bad)
repz
nop
repnz
pop
mov
imul
and
mov
sub
nop
(bad)
sub
cdq
scas
and
push
loop
loope
fs
mov
inc
sbb
xor
jl
test
push
or
nop
mov
pslld
mov
jne
add
jl
jp
jl
pop
adc
xchg
js
push
loop
(bad)
data16
inc
xor
lock
jae
retf
fdivr
div
stos
add
mov
adc
or
fwait
lahf
arpl
in
xchg
rol
call
mov
in
lock
xchg
(bad)
push
hlt
test
cmc
imul
addr16
test
test
cmp
cmp
and
mov
cmp
dec
movs
mov
cmp
addr16
lods
cmp
imul
ins
cmp
daa
mov
test
dec
fisttp
aas
leave
retf
pop
retf
inc
xchg
cmp
cld
mov
pop
push
repz
pop
dec
and
fucom
cs
sbb
push
cmps
popa
or
jecxz
out
adc
pop
popa
aam
or
xor
add
cmp
test
out
push
xor
push
pushf
and
cmc
gs
pop
movs
fdiv
js
cmp
daa
fiadd
inc
stos
out
outs
mov
out
shr
xchg
dec
ret
fadd
dec
sub
lds
fstp
push
inc
ficomp
inc
jo
cmps
test
adc
lahf
icebp
xchg
add
sbb
imul
cdq
rcl
xchg
mov
iret
and
mov
jbe
xchg
mov
loopne
call
jae
into
add
gs
movs
(bad)
pop
call
leave
jmp
push
add
and
mov
popf
push
mov
sbb
pop
sub
retf
xor
push
cdq
lds
imul
inc
es
call
inc
xchg
sub
popf
aam
sbb
pop
mov
repnz
movs
ds
or
gs
push
ds
add
das
jbe
inc
mov
sub
inc
pop
dec
mov
sbb
retf
inc
jmp
pop
cmp
mov
cmps
jmp
cmp
(bad)
out
inc
aaa
aam
or
outs
inc
pop
and
fcomp
inc
shl
aam
movs
add
jl
dec
in
or
pop
repz
xor
mov
xor
ffree
xor
retf
aaa
dec
cs
scas
out
cli
jp
jo
push
test
push
xchg
pushf
and
pop
pop
sub
sahf
xor
pop
inc
xchg
or
imul
jp
jmp
ja
mov
bound
xchg
mov
mov
dec
fst
jne
mov
cmp
test
in
cs
push
xor
mov
out
mov
mov
sbb
sub
push
aas
(bad)
pop
push
rsm
pop
jbe
frstor
stos
jge
mov
mov
adc
sbb
sti
push
js
movs
mov
mov
mov
stos
aam
xor
fimul
shl
fld
sub
add
jns
not
test
sbb
mov
sub
or
fwait
mov
jo
xor
popa
or
jns
fdivp
pop
enter
icebp
cld
dec
rcl
js
scas
add
push
(bad)
xchg
add
call
in
enter
adc
fisttp
test
push
cmp
mov
push
adc
movs
cmp
imul
loopne
inc
idiv
adc
cmp
mov
ja
aas
cmps
pop
in
stos
shl
imul
arpl
add
repz
jo
sub
sub
(bad)
repz
ins
mul
adc
dec
enter
push
mov
pop
lock
mov
push
ins
(bad)
jb
repz
pusha
lods
mov
mov
fist
push
adc
mov
dec
les
ds
mov
and
fmul
jp
sbb
dec
jmp
xchg
sbb
cmp
int
jmp
push
dec
push
push
push
inc
(bad)
js
ja
xchg
adc
fsub
pop
adc
stos
mov
add
(bad)
push
cld
cmps
mov
sub
(bad)
dec
add
pop
dec
xor
std
repz
fiadd
outs
call
jno
clc
scas
jnp
jl
sbb
repz
adc
dec
gs
sub
out
fucomp
mov
(bad)
pop
pop
std
pop
xlat
inc
or
cld
or
jmp
cmc
fimul
mov
outs
cmp
sub
sbb
ins
and
adc
ror
repz
jo
and
push
dec
cmp
lahf
sbb
inc
sub
adc
shl
pop
and
loopne
loopne
xchg
aam
(bad)
pop
pop
cmp
cwde
mov
outs
inc
mov
fstp
xor
sbb
mov
fdivr
cdq
enter
icebp
aam
rcl
mov
ss
xor
lahf
xchg
jmp
jae
arpl
or
mov
jmp
enter
pop
idiv
adc
or
daa
cmp
(bad)
lds
data16
sub
push
mov
fucomp
shl
aad
ret
or
mov
push
cmp
pushf
popaw
cmc
mov
aas
stos
xlat
test
sub
adc
hlt
and
in
loop
push
sbb
inc
aaa
cmps
int3
out
sahf
je
adc
push
xor
iret
in
xchg
fidiv
icebp
(bad)
mov
adc
or
jp
xchg
push
inc
push
lods
add
std
aaa
jl
cmp
cs
outs
cli
or
cmp
cmp
rcr
sub
jmp
stc
inc
cmp
inc
stos
movs
outs
scas
xchg
xchg
sub
jg
mov
int
data16
ins
aad
dec
cmp
inc
inc
mov
push
pop
test
sub
loop
test
mov
mov
add
xchg
cmps
cmp
pop
out
mov
add
ss
mov
or
xchg
stc
sub
or
dec
mov
in
rep
adc
imul
inc
xchg
mov
jmp
arpl
aad
call
sbb
jp
sbb
xchg
sub
cwde
test
pop
cwde
dec
call
les
enter
stos
loop
es
pop
push
cmp
jl
jecxz
loop
push
add
sub
aas
pushf
add
out
popf
xchg
enter
retf
iret
mov
push
cmp
dec
or
fcomp
push
iret
sbb
dec
jg
data16
rol
loopne
xor
lahf
mov
(bad)
adc
aam
xchg
fdivr
push
sub
mov
mov
lds
ds
mov
pop
mov
push
enter
add
cmps
call
push
mov
mov
dec
jecxz
outs
inc
push
fild
xor
(bad)
call
mov
inc
mov
cmps
jns
mov
aas
add
jns
add
cmp
(bad)
lods
imul
jp
sbb
add
or
in
mov
mov
and
pop
test
inc
jmp
shl
inc
mov
adc
repz
push
xchg
hlt
sub
loope
mov
jno
adc
mov
add
sub
imul
mov
ret
jb
cmp
outs
cmp
mov
and
jmp
adc
xor
cmps
mov
stc
movs
dec
inc
popa
xchg
ss
clc
adc
jmp
inc
loop
mov
jbe
push
lds
xor
(bad)
out
add
icebp
mov
pop
add
push
test
adc
xchg
addr16
int
imul
rcl
fwait
pop
ins
outs
imul
cmp
cmp
cmps
mov
xchg
inc
div
jmp
cmp
mov
call
pushf
push
fistp
rcr
out
bound
arpl
lods
leave
outs
adc
add
jns
pop
fisubr
test
dec
aam
rcr
mov
jg
add
mov
xchg
inc
outs
push
mov
xor
je
or
mov
fld
push
loop
(bad)
xor
adc
outs
cmp
mov
mov
enter
out
dec
sub
jle
sbb
jl
rol
mov
(bad)
lahf
inc
pop
loopne
mov
mov
adc
sub
ror
push
dec
push
scas
mov
mul
test
adc
xor
jp
add
inc
in
mov
pop
rcl
and
jne
into
and
inc
mov
jge
std
mov
push
stc
push
xchg
xor
ins
inc
inc
iret
lock
sbb
xor
and
xor
cmp
cmps
sub
aaa
call
or
ins
pause
in
adc
adc
aas
cmovl
and
mov
cmp
arpl
or
dec
jle
inc
jmp
movs
into
retf
aam
stc
dec
push
popa
jnp
ins
idiv
inc
add
movs
xchg
mov
imul
or
xchg
mov
cmc
jae
xchg
mov
retf
sub
and
add
sbb
push
movs
pop
ja
add
and
hlt
pop
lds
in
adc
lock
(bad)
push
mov
(bad)
outs
cs
sbb
push
inc
pop
cdq
movs
cmp
fisub
nop
mov
scas
xchg
sahf
xchg
pushf
push
sti
inc
sar
les
in
cdq
mov
cmps
push
mov
ret
hlt
scas
inc
dec
jp
not
push
add
or
stos
mov
inc
pop
enter
adc
(bad)
mov
test
jb
sbb
adc
adc
in
jmp
sub
shl
mov
pop
es
loopne
in
xchg
int3
leave
xchg
into
nop
dec
out
push
adc
test
inc
xchg
inc
mov
call
jle
xor
sub
jp
pop
push
loopne
out
or
push
pop
push
inc
sub
mov
push
jmp
and
std
push
das
lods
(bad)
and
dec
cmps
in
xchg
pop
xor
jl
push
pop
cmps
cmp
cmp
int3
jno
sbb
pop
fidiv
scas
inc
mov
jae
inc
or
mov
stos
jl
cmps
mov
inc
dec
out
sub
cli
dec
jmp
sub
jnp
jp
retf
push
adc
int3
(bad)
test
pusha
and
push
xchg
scas
js
cwde
ret
cmp
sub
pop
xchg
addr16
in
inc
in
ror
fcomp
inc
dec
inc
jecxz
xchg
div
repz
push
cmp
ss
addr16
inc
arpl
xor
enter
xchg
call
and
pop
adc
pop
ds
clc
xor
pop
push
leave
xor
dec
mov
xor
mov
jmp
pop
or
jge
imul
fbstp
in
cdq
(bad)
clc
jge
sub
fcmove
loopne
fsub
not
sub
call
sbb
jo
push
scas
xor
jb
rol
mov
das
mov
jecxz
dec
shr
inc
mov
jecxz
sti
sub
arpl
xchg
push
mov
inc
mov
inc
mov
mov
dec
movs
fisubr
fs
push
jg
icebp
bound
dec
push
lds
movs
adc
add
adc
push
sbb
mov
imul
inc
je
pusha
enter
jne
mov
xor
mov
mov
mov
mov
hlt
adc
aaa
lods
mov
xchg
sahf
cs
jmp
adc
cmp
(bad)
mov
mov
loopne
pshufw
inc
test
xor
sti
shr
push
or
push
in
fld
inc
fcmovnb
mov
in
and
jg
jb
enter
mov
stc
xor
call
jne
pop
mov
pop
push
fmul
mov
mov
cld
mov
rdmsr
bound
sub
sbb
dec
push
jae
scas
jno
(bad)
arpl
pop
xchg
adc
push
test
pop
adc
retf
imul
pop
jae
xor
xchg
test
push
cwde
xchg
mov
nop
push
dec
pop
ja
cmp
and
cmp
rol
jne
in
pop
xor
fld
test
or
fist
js
cwde
sub
xchg
push
xor
int
xor
xchg
clc
inc
clc
xchg
mov
mov
gs
iret
sub
sbb
out
in
iret
push
jne
ja
lock
ss
push
xor
mov
and
cmp
sahf
pop
xchg
sub
pop
mov
push
pop
aad
sub
pop
xchg
mov
pop
pop
push
push
pop
dec
ins
add
jmp
or
shr
dec
scas
pop
sbb
mov
pop
cmps
sub
test
fdiv
cdq
lahf
adc
mov
repz
repnz
movs
and
pop
lods
or
and
mov
pop
movs
loopne
pop
or
and
in
add
add
adc
push
push
xor
das
adc
inc
push
mov
hlt
mov
or
rcr
xor
add
bound
cli
xchg
lahf
dec
imul
call
mov
sbb
add
je
and
and
sti
repz
mov
mov
jp
cdq
fwait
ins
inc
mov
enter
xor
retf
pushf
push
into
jmp
popf
loope
cmc
jo
inc
std
cmp
sbb
mov
call
shr
movs
fsubr
inc
mov
xchg
jae
cld
xor
idiv
(bad)
and
xor
adc
pop
mov
out
in
sub
jmp
repz
and
xchg
lods
fadd
xor
mov
in
sub
div
xchg
ret
xor
shl
(bad)
lods
sub
lods
ret
fimul
push
mov
and
stc
into
jmp
arpl
mov
push
pushf
and
mov
dec
shr
lahf
sub
jmp
nop
shl
lods
ins
xchg
push
cwde
pop
jae
sub
mov
test
push
mov
retf
xor
mov
jp
pop
test
cmp
pop
push
nop
and
dec
es
mov
sar
lahf
(bad)
and
out
push
fdivrp
jp
inc
fwait
xchg
pop
push
bound
lods
mov
cdq
xchg
inc
pop
scas
inc
and
fmul
arpl
xchg
not
retf
loopne
mov
sub
fcmovu
dec
ss
jge
mov
push
shl
mov
xor
and
xchg
test
ja
push
add
cmp
ins
std
inc
je
je
std
inc
cs
sti
repz
xchg
mov
loope
enter
sub
mov
rcl
push
cmps
mov
jge
pop
jp
aam
lahf
ror
pop
aad
fld
inc
imul
jb
(bad)
pop
pop
push
pop
sub
inc
shr
dec
pop
jbe
pop
jmp
sub
ins
iret
repz
imul
bound
ja
test
sub
mov
jmp
sub
sbb
sub
push
dec
ret
jp
push
xchg
xor
sbb
mov
loopne
daa
out
mov
call
jmp
fucom
push
je
cmp
arpl
mov
pop
ds
sbb
add
or
jl
repnz
stc
pop
repz
mov
push
jmp
and
jge
sbb
pop
jmp
loopne
xor
sar
mov
push
ds
push
out
repnz
je
mul
inc
leave
inc
dec
mov
mov
cmps
mov
retf
and
jno
ja
gs
shl
inc
aaa
jmp
pushf
je
push
ja
xchg
xchg
jle
cs
ret
sbb
sbb
xor
xor
not
xchg
fld
push
xchg
dec
pushf
mov
cld
mov
ins
aad
add
mov
(bad)
jb
mov
and
or
das
shl
mov
mov
or
mov
outs
push
(bad)
nop
mov
lds
pop
mov
inc
(bad)
fs
or
cwde
jmp
sub
pop
cld
xor
call
push
jb
into
sbb
dec
ins
xchg
mov
add
pop
inc
push
outs
sub
xlat
push
xor
lahf
xchg
mov
retf
pop
jno
cmp
jbe
xchg
add
mov
mov
jg
mov
inc
scas
imul
not
test
in
ror
daa
push
mov
aad
outs
mov
xchg
mul
arpl
(bad)
push
iret
or
scas
retf
mov
push
test
push
sti
sub
sbb
push
addr16
xchg
shl
fs
pop
xchg
lods
pusha
popf
lds
enter
push
sti
je
jnp
add
xchg
mov
mov
mov
icebp
ins
or
push
mov
cli
ret
fs
popa
shr
push
ror
in
inc
pop
lods
push
xor
mov
stos
xor
xor
jnp
mov
mov
mov
movs
ja
outs
xor
bound
sub
and
aaa
sub
pop
lods
or
and
nop
mov
sub
pop
xor
fidiv
stc
stos
jmp
and
adc
and
test
push
inc
dec
in
iret
fiadd
cmp
das
cwde
adc
sahf
jno
(bad)
clc
iret
movs
aaa
adc
and
retf
aaa
icebp
sub
or
push
imul
in
mov
out
add
mov
sti
jle
inc
pop
aam
jmp
pop
pop
scas
adc
cld
cld
mov
inc
es
cmp
mov
dec
jmp
shl
daa
xchg
(bad)
inc
ret
push
les
mov
int
cmp
dec
fnstcw
xchg
jne
cmps
adc
out
inc
xchg
sbb
outs
hlt
fsub
add
in
xor
jo
movs
pusha
push
xor
cmp
loope
mov
sub
ret
and
js
jp
add
nop
outs
mov
mov
sar
lods
push
daa
jbe
dec
bound
dec
or
dec
inc
movs
rcl
(bad)
xlat
les
aam
sub
scas
fucom
xchg
push
cmp
cmp
xor
hlt
jle
mov
mov
adc
popf
lods
xor
shr
ror
ret
in
adc
(bad)
hlt
in
mov
lods
mov
lods
(bad)
inc
mov
sub
pop
and
mov
hlt
loop
cmps
jge
(bad)
sub
adc
pop
mov
dec
jecxz
cwde
imul
push
push
push
nop
mov
mov
sbb
sbb
fmulp
mov
and
and
lods
dec
movs
push
sub
dec
out
jb
dec
xor
ins
mov
pop
cld
mov
mov
inc
mov
ror
icebp
jnp
cmc
sub
outs
data16
icebp
cmps
xchg
rol
push
lea
mov
call
add
retf
es
sub
lahf
fcom
push
sub
add
icebp
add
(bad)
xchg
push
pushaw
adc
sub
lea
aad
mov
(bad)
jnp
(bad)
ins
or
adc
adc
jmp
ds
in
ficomp
inc
jecxz
sub
inc
pushf
mov
mov
retf
jmp
fwait
add
xor
xchg
ins
dec
push
aam
pop
add
aad
push
cmps
xchg
mov
pop
aam
movs
in
mov
addr16
add
popaw
or
sbb
enter
adc
outs
pop
cmp
push
imul
ins
xchg
stc
aad
test
call
sub
cmps
enter
call
ss
pop
cmp
jge
mov
in
out
jmp
(bad)
xchg
iret
inc
lea
cdq
inc
cmc
pop
shl
xchg
jbe
scas
scas
mov
sub
mov
sub
leave
xor
inc
lds
cmp
stos
aad
mov
adc
shr
fidiv
pop
mov
mov
cmp
arpl
mov
rcl
fisttp
repnz
aad
in
push
lea
jne
fs
pop
jecxz
push
retf
add
add
or
and
fistp
inc
mov
dec
push
mov
mov
pop
cmps
xor
and
ins
inc
xchg
out
push
sub
adc
aad
loop
push
sub
(bad)
mov
and
mov
pusha
aad
xor
sbb
add
push
test
fxam
clc
add
or
lods
jno
test
jl
nop
pop
dec
dec
pusha
jle
xchg
out
aas
retf
in
xchg
mov
ja
or
jmp
aad
fs
push
popa
dec
mov
rcl
inc
xchg
fdiv
jae
hlt
inc
fdivr
push
(bad)
out
mov
(bad)
fwait
das
test
xor
dec
lods
inc
mov
and
loope
add
mov
or
dec
xor
add
jmp
mov
and
lahf
and
gs
ret
and
jmp
jecxz
add
push
push
into
out
repz
jbe
mov
jnp
jmp
and
ss
dec
ins
and
lock
ficomp
(bad)
adc
pop
(bad)
arpl
mov
pop
ficomp
cmp
mov
xor
sar
dec
add
mov
stc
pop
out
repz
pop
push
xor
ror
cdq
pushf
push
pop
and
or
not
into
leave
mov
es
mov
inc
mov
rcr
(bad)
(bad)
mov
call
aaa
push
pop
mov
push
and
es
cmp
mov
adc
adc
sub
mov
outs
fistp
out
fnsave
add
rcr
dec
inc
imul
mov
ja
inc
xor
push
int3
in
mov
fs
xchg
ret
jg
fwait
cmp
mov
imul
sar
aaa
cmp
sub
push
mov
jge
jl
daa
arpl
jge
pop
cmp
push
jnp
jo
sbb
aaa
xor
cmp
retf
in
pusha
(bad)
lock
and
aad
mov
adc
scas
(bad)
inc
imul
jnp
cmps
adc
pop
push
inc
(bad)
inc
loopne
ins
push
fadd
xchg
dec
dec
sbb
popf
jno
ret
test
mov
xchg
dec
and
fimul
pop
or
push
xor
jge
cwde
xor
cmp
pop
cmp
pop
add
into
lahf
xchg
xchg
push
sub
lods
jns
mov
mov
or
(bad)
xchg
mov
jle
jnp
shl
jns
sar
call
in
inc
das
inc
push
inc
div
stos
mov
sbb
aad
mov
push
movs
mov
inc
and
mov
and
(bad)
mov
and
pop
lods
call
push
push
test
rcl
hlt
jmp
iret
fs
add
pushf
push
xor
(bad)
xchg
cli
outs
sti
ficom
and
test
xor
aam
in
nop
mov
sub
call
fwait
(bad)
imul
aad
int3
and
inc
fucom
addr16
mov
xchg
pop
lea
in
sub
jge
mov
sub
adc
ds
pop
jl
inc
xor
clc
pop
mov
cmp
in
mov
and
or
cdq
enter
imul
jge
cli
adc
push
pushf
fistp
gs
leave
test
mov
mov
adc
cs
inc
clc
call
pop
cld
cmps
mov
jo
out
xchg
imul
adc
retf
loop
rcl
mov
fsubr
rcr
into
ss
sub
push
daa
or
(bad)
gs
cmp
and
popf
cmp
adc
mov
popf
mov
add
sub
scas
test
dec
sti
mov
lock
(bad)
fidivr
dec
pop
add
imul
in
out
enter
or
fwait
or
enter
xchg
add
fs
(bad)
push
dec
aam
movs
jl
stos
shl
xchg
stos
mov
retf
pop
sbb
or
les
mov
mov
out
lds
shl
jo
in
jmp
and
ins
(bad)
dec
jg
pop
pop
(bad)
popf
push
in
xchg
cmp
in
xchg
(bad)
pushf
test
retf
arpl
or
cmp
sbb
ja
jge
daa
stos
xchg
xor
xchg
inc
jl
inc
pusha
scas
int3
scas
mov
stos
repz
xchg
loope
push
lahf
inc
pop
pop
js
sub
and
in
ins
int3
add
fadd
ja
fs
ret
bnd
out
push
xchg
jb
lahf
adc
retf
push
adc
fst
es
(bad)
(bad)
add
sub
dec
mov
test
mov
push
fcmove
ins
clc
out
mov
inc
cs
icebp
xor
test
push
dec
mov
out
(bad)
into
jecxz
movs
mov
popf
inc
add
mov
jl
xor
sub
mov
or
call
(bad)
js
xor
cmp
ret
mov
retf
adc
jbe
push
cmp
fadd
mov
enter
mov
and
jne
ror
stos
mov
jmp
cmp
fdiv
cmps
mov
inc
sbb
cmps
jbe
mov
pop
dec
call
jnp
(bad)
das
cs
sti
sbb
dec
mov
je
or
pop
out
stc
jb
fdiv
pop
clc
push
mov
and
dec
fiadd
push
js
fst
mov
mov
cli
pop
or
sub
(bad)
adc
aad
or
xor
mov
and
enter
sbb
pop
push
push
adc
pop
add
shl
pop
sbb
mov
and
gs
sub
test
in
mov
cmc
and
sub
in
sbb
popf
inc
stos
ret
mov
lods
rol
in
sbb
test
(bad)
loop
dec
or
iret
mov
rol
call
cli
loope
pushf
lea
sbb
mov
mov
dec
cmp
pop
inc
fcom
pushf
ror
in
lea
ss
mov
mov
sub
add
jo
or
pop
stos
dec
icebp
sbb
and
sbb
es
bound
mov
jne
inc
xchg
shr
pop
sar
mov
push
aad
mov
inc
xor
(bad)
ja
lahf
repnz
xchg
lock
sub
jmp
sbb
aad
jbe
cmp
call
cmp
xor
cmp
mov
xchg
and
mov
or
aad
out
xor
sub
stc
pushf
lds
jno
pop
add
jecxz
pop
out
cmps
pop
mov
ins
push
pop
xor
pop
mov
in
outs
mov
cmp
dec
add
sub
mov
mov
cli
sbb
sbb
fxch
dec
xor
mov
mov
aas
mov
push
jnp
adc
aas
je
cmps
pop
cmp
scas
icebp
ins
in
push
das
sbb
int
fnstcw
jl
data16
lods
mov
dec
inc
in
or
int
popa
inc
dec
cdq
sar
pushf
sbb
(bad)
mov
(bad)
imul
jns
popf
hlt
push
inc
mov
call
je
test
pusha
call
add
push
push
xor
push
je
pop
jl
sub
outs
inc
aam
rol
test
or
lods
cs
jge
loop
xchg
add
xor
or
scas
sbb
stos
les
sub
mov
sbb
fnsave
mov
lea
test
lods
xchg
cmp
xor
inc
inc
fst
jo
xchg
mov
cli
mov
pop
sbb
int
fnsave
pop
push
or
in
mov
ficom
pop
xor
lahf
mov
inc
xor
enter
xchg
jnp
and
stc
push
add
adc
retf
outs
test
pop
cmp
mov
mov
push
mov
sbb
pop
movs
(bad)
mov
or
fcmovbe
pop
cdq
test
pop
dec
test
mov
adc
cwde
aas
lods
lea
inc
jmp
xchg
dec
mov
fwait
lahf
repz
pushf
out
push
sbb
inc
and
daa
and
js
dec
and
mov
and
pop
repnz
sub
std
xchg
mov
mov
mov
adc
test
icebp
add
add
(bad)
and
jp
out
mov
in
or
sub
push
pop
loope
inc
ds
add
in
cmps
fisub
cmp
ret
lds
adc
ins
or
mov
sub
sti
sbb
dec
push
jae
dec
dec
int3
jle
les
mov
add
push
(bad)
(bad)
ror
jmp
add
ja
stos
push
xlat
fucomi
dec
shr
(bad)
scas
push
xlat
hlt
outs
cwde
dec
(bad)
jo
jno
adc
popa
bound
lods
nop
xchg
es
out
add
mov
xchg
push
push
call
test
inc
retf
frstor
mov
scas
xlat
adc
lock
iret
xchg
push
(bad)
or
mov
dec
cmc
or
xchg
pop
inc
(bad)
test
je
inc
call
mov
ins
(bad)
out
cmp
lods
lds
cmp
inc
cmp
jns
bound
xor
mov
pop
mov
cmp
ret
inc
xlat
icebp
pop
shl
leave
out
call
popa
mov
retf
jmp
aas
xor
inc
lahf
imul
jge
sub
xchg
cmp
jae
xor
lahf
(bad)
fiadd
or
pushf
push
daa
cmps
push
pop
sbb
add
jno
cmp
add
or
in
mov
inc
mov
adc
dec
xchg
into
out
daa
rol
(bad)
stos
xchg
inc
push
push
inc
xor
pop
pushf
mov
add
lods
fnstenv
adc
mov
out
aad
ret
pop
gs
mov
clc
sti
leave
outs
inc
cmps
out
inc
cmps
mov
cmp
aaa
jmp
mov
stos
fldenv
cmp
(bad)
lods
or
enter
mov
xlat
movlps
jle
inc
fisub
push
inc
jecxz
ret
jae
jae
push
mov
out
js
xchg
mov
out
fs
ror
fs
push
xchg
cs
in
addr16
xchg
sbb
in
loope
(bad)
or
mov
jae
adc
stos
mov
shr
mov
ret
mov
movs
(bad)
cwde
mov
fistp
pop
dec
or
mov
fst
ja
outs
mov
aam
shl
cli
(bad)
inc
aam
xchg
jmp
mov
xchg
ret
and
sbb
shl
adc
mov
lods
mov
jmp
sbb
je
sub
cmp
dec
popf
cmp
push
push
leave
xor
shr
mov
xor
pop
push
jo
push
mov
mov
mov
mov
jmp
es
pop
adc
sahf
(bad)
std
cdq
ins
sahf
dec
dec
lods
mov
lods
mov
adc
outs
push
or
sbb
bnd
sub
or
adc
sbb
inc
push
adc
cmp
je
aad
mov
ins
(bad)
mov
jle
test
repnz
pop
movs
mov
cmp
xchg
sbb
daa
fs
push
js
jmp
inc
dec
jecxz
xchg
fild
lods
or
call
fmul
cmps
or
sbb
fdiv
int3
sbb
xlat
xchg
and
jp
test
adc
dec
xor
mov
std
test
xchg
or
pusha
xchg
sahf
pop
test
jno
or
push
mul
in
mov
xor
fistp
mov
dec
test
into
addr16
and
pop
dec
or
fisttp
inc
fsub
pop
ret
xor
iret
dec
or
mov
cld
jge
popf
dec
xchg
push
sbb
jg
push
xchg
jnp
sbb
xor
mov
repnz
fbld
(bad)
loop
pop
push
pop
adc
mov
push
(bad)
jne
sar
push
call
int3
xchg
sbb
push
fstp
sub
xchg
loope
mov
(bad)
rcr
bound
push
xchg
in
int3
and
mov
fisubr
inc
sahf
(bad)
cli
fwait
mov
sub
rol
cmps
ins
xchg
fcomp
cs
mov
dec
clc
push
test
mov
gs
stos
in
pop
ja
cmc
cmps
(bad)
cmps
mov
rcr
mov
pop
mov
xchg
aas
sub
imul
add
adc
pop
and
mov
(bad)
icebp
xor
dec
loop
in
adc
lea
inc
scas
movs
retf
pop
retf
mov
pop
or
xchg
and
(bad)
aam
nop
push
mov
xor
sbb
arpl
(bad)
mov
xor
lds
mov
mov
xor
sbb
scas
mov
xchg
into
(bad)
into
ror
push
and
push
or
loope
sbb
in
aad
in
lds
jbe
sahf
jmp
sub
push
ret
mov
(bad)
adc
fiadd
int
xchg
ror
pop
ja
fadd
push
movs
mov
xchg
imul
(bad)
or
imul
push
pop
push
mov
cmp
and
sbb
cmc
mov
dec
in
xor
inc
adc
add
aad
mov
xchg
fsubr
xchg
jecxz
mov
cmp
adc
sbb
adc
fistp
cmc
clc
dec
cmp
jbe
punpckhbw
(bad)
lds
mov
cmp
pop
xchg
push
dec
push
mov
ficom
jo
dec
lods
stos
jmp
call
cmps
mov
ret
pop
push
sahf
les
pop
inc
dec
dec
jle
in
repz
and
dec
stos
pop
sub
rcr
and
xor
jmp
sub
xor
js
mov
pop
mov
or
cli
jge
(bad)
xchg
fcom
mov
in
cmps
cmps
push
(bad)
dec
cmp
mov
push
rcr
repz
mov
add
xchg
dec
imul
or
ret
mov
mov
dec
mov
es
das
icebp
push
cdq
bound
or
and
shl
cwde
pop
mov
push
sub
and
jbe
nop
push
movs
dec
loopne
mov
cli
sbb
cli
not
adc
mov
test
imul
pop
es
pop
mov
loop
mov
iret
shr
stos
lods
xchg
pop
add
push
cmp
jae
pop
jne
dec
shl
in
iret
or
inc
es
dec
not
out
sti
sbb
rol
inc
leave
sahf
mov
in
push
sub
xor
jge
xchg
popa
out
or
dec
sub
(bad)
call
sahf
jmp
dec
adc
stos
xor
xchg
push
push
lds
mov
sti
lock
aas
sbb
and
xchg
push
enter
fldl2e
mov
mov
data16
push
adc
and
dec
xchg
dec
jb
inc
pop
xor
repnz
adc
test
mov
cmp
popa
jbe
pop
sub
jmp
rcr
movs
jnp
(bad)
stos
mov
xchg
repnz
mov
sbb
lods
int
mov
stc
div
xor
mov
cwde
sar
test
clc
adc
adc
dec
cdq
jmp
jno
dec
ret
cmp
repnz
sub
cmp
xchg
jne
jge
mov
loopne
jge
xor
inc
sbb
(bad)
mov
addr16
dec
ins
arpl
div
cmp
xchg
addr16
out
fwait
push
dec
xchg
pop
movs
mov
cmp
mov
inc
iret
xchg
and
mov
add
test
push
bound
pop
or
adc
nop
mov
push
out
xchg
mov
jnp
fst
icebp
out
retf
and
inc
ret
ins
mov
push
push
cwde
adc
xor
push
cld
ret
or
loope
sub
jbe
sbb
mov
dec
adc
sbb
and
mov
or
les
repz
push
mov
xchg
cmp
or
fs
add
cmps
and
xor
push
(bad)
rcl
cli
in
cli
mov
mov
sbb
leave
jae
push
cld
cmps
and
neg
jae
xor
jmp
mov
cmp
sbb
(bad)
bound
or
xchg
(bad)
bound
fst
jo
shr
xchg
dec
sub
out
cmps
push
mov
xor
dec
add
mov
mov
dec
addr16
pop
mov
test
mov
and
and
ins
jl
loopne
jl
pop
gs
push
mov
cmps
add
into
sahf
fnstsw
xor
out
pop
push
fsub
outs
mov
or
pop
sar
popf
lds
push
fstp
mov
mov
lock
test
mov
xor
cmp
xchg
push
pop
pop
pusha
inc
sahf
xor
stc
adc
enter
mov
stos
xor
jbe
mov
stos
nop
cmp
sbb
bound
ja
jge
dec
xlat
adc
mov
mov
daa
lea
sub
pop
or
jns
bound
sahf
out
(bad)
push
mov
(bad)
gs
inc
test
sub
mov
mov
and
fs
inc
arpl
(bad)
jmp
xor
(bad)
ins
in
pop
mov
pop
dec
dec
stc
in
cmp
or
cs
ins
jmp
shl
push
jg
mov
jbe
mov
cmps
sub
jno
fmul
dec
inc
sub
stos
mov
jnp
sub
test
in
dec
push
test
jmp
retf
into
out
int3
mov
shr
sub
es
jg
add
push
mov
shl
mov
cmp
stos
addr16
or
fsub
sub
ja
out
mov
cmps
jmp
aam
std
xor
jbe
shl
push
mov
and
pop
aas
pop
cmps
clc
pop
ins
movs
mov
aaa
repnz
fmul
push
mov
movs
pop
or
test
jb
shr
retf
mov
mov
pop
cdq
mov
and
xchg
pop
pop
and
daa
mov
mov
adc
lods
test
pop
pushf
jne
cmp
mov
and
sar
stc
sar
inc
stc
ja
les
xchg
movs
lea
jmp
jnp
idiv
call
(bad)
sbb
xchg
pop
rol
cmp
push
and
call
inc
xor
push
shl
sbb
les
adc
loope
popa
inc
mov
push
jge
or
fisub
cld
pop
inc
in
mov
int
into
pop
or
test
jns
sti
outs
push
pop
mov
push
cwde
lods
xchg
pusha
dec
inc
or
jecxz
pushf
repnz
fadd
imul
pop
bound
push
in
ficom
jmp
push
jmp
inc
mov
sbb
out
iret
in
aaa
mov
mov
jmp
xchg
cdq
lock
jmp
mov
or
sbb
les
and
mov
jmp
xor
adc
mov
and
inc
and
test
aaa
pop
popf
push
sub
aad
inc
adc
and
pop
test
ror
sahf
xchg
ins
add
mov
movs
sbb
push
sub
push
mov
sub
push
mov
neg
or
mov
fisub
xor
adc
ins
and
add
xlat
and
pusha
test
mov
mov
aaa
jnp
mov
(bad)
nop
inc
xor
push
dec
daa
cmp
aaa
or
ffreep
inc
retf
xor
pushf
imul
aaa
outs
jne
jmp
stos
mov
les
inc
scas
or
pop
leave
jb
xchg
mov
repz
cli
mov
jnp
add
mov
sbb
adc
mov
adc
jmp
mov
aam
add
adc
paddw
or
jmp
mov
(bad)
js
(bad)
jmp
(bad)
ror
icebp
push
jne
(bad)
xor
enter
pop
xchg
jae
std
shl
xor
lods
jb
leave
movs
bound
mov
shr
dec
enter
int3
call
adc
mov
dec
xchg
addr16
hlt
sbb
xor
imul
mov
pop
add
(bad)
adc
repnz
jmp
repz
push
mov
retfw
cdq
outs
pop
fisttp
or
mov
scas
jp
out
fidivr
rol
mov
cli
mov
pusha
stc
jl
push
dec
test
adc
adc
sub
cmps
xchg
aas
test
(bad)
mov
fsub
mov
or
dec
retf
cs
loope
inc
std
mov
out
push
cld
popf
sbb
xchg
push
shl
rcr
xor
dec
mov
mov
pop
repz
inc
paddw
dec
dec
or
jmp
scas
or
jg
pop
sub
clc
add
pop
inc
pushf
push
mov
mov
out
lds
sbb
push
dec
or
sbb
dec
mov
dec
mov
or
adc
dec
fsub
dec
xchg
sahf
mov
sub
xchg
or
xchg
pmaxub
adc
push
mov
adc
sub
inc
jbe
jp
movs
nop
mov
push
or
xor
inc
(bad)
cli
les
inc
mov
jne
enter
jg
or
sbb
mov
(bad)
les
cwde
inc
call
int
push
outs
add
xchg
lds
addr16
jle
jge
outs
adc
in
retf
cmp
addr16
cmp
cmp
out
mov
test
dec
retf
in
inc
xor
xor
ins
xor
inc
add
push
loop
out
arpl
neg
xchg
or
rol
push
jg
cdq
and
cmp
mov
cmp
sar
loope
add
sbb
jb
jmp
(bad)
imul
mov
daa
fdivr
mov
inc
sbb
pop
add
sub
mov
inc
cmp
pop
and
imul
push
test
mov
and
(bad)
ins
pop
cmp
cmp
xchg
test
add
push
xchg
jne
sub
mov
jne
test
push
and
dec
adc
clc
fwait
mulps
push
cmp
xchg
int
sbb
mov
(bad)
lock
sar
sbb
fild
push
push
test
cmp
xor
and
cmps
pop
mov
pop
push
push
enter
popa
sbb
and
mov
enter
arpl
inc
xchg
je
pusha
push
sub
xor
xchg
psrld
aas
inc
or
call
mov
popf
jmp
mov
mov
pop
les
cmp
ret
ds
inc
xchg
ds
les
dec
or
mov
in
mov
(bad)
jl
int3
lds
jo
push
xor
ror
fwait
adc
ins
(bad)
js
xor
cdq
push
test
(bad)
xor
mov
int
push
aam
mov
loopne
mov
aaa
pop
sub
aas
or
jecxz
inc
or
shl
push
xor
lahf
inc
inc
and
mov
jle
add
push
adc
and
aas
xchg
sub
add
test
ja
push
cmp
pop
jmp
xor
xchg
fsubr
xchg
mov
int
retf
push
sbb
and
(bad)
jbe
dec
test
out
add
adc
add
dec
cmps
mov
stc
test
nop
(bad)
fmul
dec
dec
repnz
sub
aad
je
sti
dec
(bad)
addr16
or
jl
or
out
add
sub
(bad)
mov
xor
lds
jno
(bad)
adc
jp
adc
xlat
push
imul
push
xor
jnp
and
inc
xor
sbb
ud1
push
xor
xchg
dec
in
ss
sbb
ss
xlat
adc
cld
jp
or
mov
push
cld
aad
scas
mov
cmps
cmps
dec
mul
int
aam
repnz
xor
loopne
jb
adc
scas
pop
in
repz
pushf
cmp
pop
pop
mov
xchg
xlat
fdivr
mov
jmp
or
cdq
inc
mov
fwait
lea
dec
xchg
aaa
jo
push
mov
inc
pop
dec
fcomp
sbb
inc
inc
xchg
retf
retf
mov
clc
mov
xchg
cmp
add
leave
fdivr
dec
inc
xchg
(bad)
and
test
add
sub
sub
or
mov
jne
in
mov
and
rol
mov
outs
ds
sbb
sub
jge
and
test
cli
dec
ror
call
and
rol
icebp
into
pop
les
fmul
add
mov
idiv
test
mov
imul
(bad)
cmp
(bad)
mov
arpl
rcl
pop
sub
loopne
repz
les
(bad)
mov
in
xlat
shr
sub
inc
jno
fsub
jge
push
lds
mov
mov
dec
int3
and
fdiv
pop
fcomp
fsub
push
adc
push
scas
ret
push
(bad)
mov
mov
jl
or
pushf
push
clc
fwait
mov
adc
pusha
add
push
int
xor
(bad)
jmp
adc
xchg
or
imul
lock
sub
cmc
cmp
out
add
fwait
test
push
das
xor
(bad)
hlt
cdq
pop
test
pop
pusha
(bad)
pop
xor
pop
dec
xchg
xchg
ja
ins
push
je
in
pop
imul
int
sbb
and
push
inc
dec
int
rcr
sbb
jae
aad
ret
nop
popa
jbe
and
lods
add
fdiv
and
cli
mov
sbb
imul
jg
das
out
push
jp
lds
es
xchg
(bad)
loop
pop
cmp
push
xor
in
cmps
test
jmp
je
aam
lock
pop
lds
cmps
adc
mov
xchg
imul
sub
xchg
das
add
daa
mov
mov
mov
jns
and
jae
(bad)
sub
pop
dec
cmp
ret
push
sahf
push
adc
inc
xor
iret
push
fwait
cmp
clc
mov
call
in
dec
sbb
xchg
hlt
dec
test
or
pushf
fiadd
mov
pop
push
mov
inc
dec
ds
movs
sub
jg
test
inc
aas
and
pause
xchg
xchg
mov
xchg
repz
mov
mov
das
mov
push
in
xchg
std
jbe
mov
stc
add
xlat
nop
fimul
mov
jg
mul
hlt
add
lea
and
sub
mov
enter
popa
pop
xchg
push
inc
addr16
jb
add
(bad)
jns
jp
and
fadd
es
pop
inc
mov
fs
pop
sbb
fwait
mov
pusha
mov
add
lock
mov
stos
(bad)
or
cmp
push
and
dec
enter
repnz
inc
pop
pop
xchg
(bad)
xchg
jns
jecxz
jo
mov
into
test
sti
dec
jmp
cmp
mov
push
mov
popf
adc
fcomip
xchg
cmp
add
repnz
loope
ror
std
outs
arpl
aam
mov
pop
repnz
xchg
push
fbld
cmp
ja
lock
or
stos
adc
aaa
mov
ja
xor
cld
jmp
ret
dec
lea
sbb
jae
push
imul
ret
fs
lods
test
cdq
addr16
stos
adc
mov
mov
jno
scas
xor
sub
cmp
ret
inc
inc
cmp
mov
cld
mov
xchg
lods
inc
les
(bad)
test
ins
xor
das
lods
pop
fs
iret
and
ins
out
mov
push
movs
test
fwait
out
mov
sti
aad
sti
xchg
mov
sbb
aas
mov
test
aam
test
push
pop
pop
icebp
jmp
sar
mov
jnp
and
repnz
sbb
imul
cmp
inc
or
dec
(bad)
movs
push
fst
or
in
dec
adc
mov
jno
call
shl
push
sbb
pop
jns
and
not
(bad)
in
mov
out
xor
repnz
or
movs
scas
cmps
clc
cli
xchg
jb
outs
inc
pop
outs
loop
test
call
or
stos
cs
fdivrp
cmp
jmp
aad
jnp
dec
nop
bound
aas
inc
adc
arpl
dec
fsubr
dec
in
in
popa
xchg
fcom
add
mov
pop
loopne
call
add
add
xor
push
mov
ret
jle
into
and
push
push
pop
mov
fild
jp
int3
rcr
jle
das
hlt
out
fstp
jno
pop
push
add
mov
popf
out
or
push
mov
dec
dec
popf
jecxz
and
(bad)
psrad
mov
xchg
cwde
bound
push
dec
mov
scas
jmp
push
mov
mov
pop
jo
sbb
nop
and
mov
cmp
push
jb
sbb
dec
retf
mov
jmp
movs
movs
scas
popf
(bad)
mov
or
pusha
adc
in
mov
inc
(bad)
enter
bound
mov
or
jmp
mov
add
cmp
sahf
ret
xchg
add
fs
pushf
or
ja
rol
retf
cli
(bad)
mov
(bad)
sar
xchg
mov
or
ret
xor
shr
pop
ins
scas
test
fs
mov
xlat
jecxz
cmps
dec
lea
int3
mov
add
or
jnp
adc
and
repz
jb
pop
sahf
mov
dec
or
movs
leave
int3
cmp
sub
push
dec
adc
imul
(bad)
jne
cmp
mov
mov
dec
stc
add
sub
div
mov
stos
adc
ds
out
nop
(bad)
ss
xchg
xor
jge
cmp
add
adc
fmul
dec
cmp
jl
pop
and
scas
and
pusha
dec
add
push
stos
mov
sti
add
out
test
movs
cmc
mov
out
nop
pop
xor
jbe
(bad)
stc
mov
not
in
ret
and
xchg
or
outs
cmps
clc
or
lods
mov
xor
mov
add
outs
adc
push
lahf
fsub
or
shl
(bad)
adc
jg
jp
mov
mov
jbe
int3
xor
push
xchg
lea
outs
dec
imul
mov
movsx
pop
push
add
fidiv
stos
rcl
pop
punpckhwd
call
fld
xchg
rol
(bad)
lods
(bad)
int3
mov
adc
cmp
ja
retf
shr
dec
lock
or
mov
out
jno
retf
push
mov
push
xchg
xor
lahf
daa
jecxz
leave
push
push
xchg
test
repz
push
movs
in
or
or
jge
push
lea
dec
aaa
dec
push
cmc
xor
gs
jle
cld
or
(bad)
lds
mov
(bad)
dec
sar
cdq
add
xchg
xchg
and
movs
mov
sub
inc
pop
iret
test
mov
or
jnp
inc
fsub
hlt
pop
rol
(bad)
mov
inc
adc
shl
cmp
movs
ja
out
xor
inc
nop
sbb
hlt
and
mov
add
push
movs
mov
mov
gs
jp
inc
icebp
loopne
jmp
inc
mov
lock
sub
add
sbb
push
icebp
scas
and
not
xor
cmps
or
push
out
pop
arpl
add
pop
pop
shl
mov
and
cmps
or
movs
push
mov
push
jp
int3
and
pop
(bad)
in
sbb
cli
push
lea
and
cs
cmp
push
sub
mov
sbb
call
fldenv
sub
rcr
mov
std
add
jle
lea
loope
ror
mov
xchg
dec
add
pop
xor
mov
int
cmps
pop
popa
cmp
lea
jb
lods
ds
mov
jge
jbe
movs
sbb
cmp
push
test
cmps
fimul
stos
mov
ins
aad
adc
mov
push
xor
jl
cmp
pushf
cmp
adc
data16
push
into
stc
repz
aam
xor
push
cs
jne
pop
or
stc
icebp
clc
ja
mov
cmc
inc
sbb
int
xor
cmp
loopne
mov
sahf
ja
dec
pop
cmc
pop
in
ss
icebp
add
dec
js
rol
xor
pop
cmc
iret
pop
xchg
outs
inc
jecxz
into
lock
retf
es
jo
sbb
sti
icebp
lods
pop
rcl
lods
mov
call
pop
(bad)
add
push
std
mov
aam
inc
cmp
stos
dec
dec
call
aas
fiadd
fiadd
js
xor
ins
call
cmp
outs
add
dec
sub
ds
jo
cmps
mov
xchg
mov
pop
div
fcmovnb
or
imul
test
out
xor
lahf
jge
pop
ja
pop
jecxz
pop
pop
dec
xchg
lods
sbb
push
enter
mov
mov
xlat
sar
ud1
popf
rcr
cmc
mov
xacquire
inc
jae
mov
ds
outs
js
mov
adc
(bad)
neg
in
sub
aam
mov
jmp
mov
dec
mov
lahf
push
test
and
push
mov
retf
mov
cmps
or
xor
or
cmps
mov
ret
pop
add
hlt
inc
hlt
or
test
push
inc
out
loopne
out
retf
pop
sub
call
inc
(bad)
adc
test
neg
sub
dec
neg
dec
xlat
add
iret
cmp
push
imul
outs
(bad)
adc
cmp
repnz
das
dec
adc
cmp
rep
es
mov
test
mov
xchg
jg
sub
xchg
je
or
int3
pop
jg
pop
jno
std
aaa
out
bnd
ja
nop
xlat
adc
add
dec
mov
rcr
mov
mov
mov
fbld
push
(bad)
sub
(bad)
fistp
pop
mov
in
call
dec
mov
mov
cmps
dec
xor
ret
loop
out
out
lds
ja
int
cld
mov
pushf
out
pop
inc
mov
cmovne
push
xor
or
mov
(bad)
jmp
out
pop
push
js
data16
popa
(bad)
cmp
sub
and
xchg
rcl
cmp
xchg
push
mov
cmp
(bad)
lods
add
inc
repz
int3
iret
movs
mov
jnp
fs
lds
push
xchg
les
(bad)
fstp
mov
xor
sub
cdq
lods
lock
mov
or
ror
js
sub
sub
out
mov
sbb
mov
stc
retf
cmp
les
test
sub
ficom
push
cmp
adc
xor
push
shl
ins
pusha
xchg
pop
mov
xchg
push
xor
in
sar
outs
cmc
aam
cmp
test
cmp
aas
call
mov
es
shl
mov
fwait
or
ret
sub
loope
hlt
cmps
xchg
pop
pop
call
fild
xor
into
xlat
rol
cld
cwde
push
imul
cdq
jmp
sub
aam
sbb
retf
std
mov
(bad)
(bad)
jae
dec
or
scas
icebp
push
push
pop
sahf
and
sub
mov
aam
faddp
je
mov
cmps
fimul
rcr
daa
push
popf
les
xlat
pop
push
push
ins
inc
(bad)
sub
xor
push
dec
push
and
push
xchg
outs
sti
das
cmps
add
aam
cdq
xor
imul
scas
in
ja
mov
fild
jno
xlat
scas
ret
xor
dec
data16
mov
cmp
and
mov
adc
adc
sbb
fistp
ret
xchg
int3
xchg
rcr
jnp
popa
int
pop
arpl
pop
in
dec
xchg
mov
(bad)
xor
shl
xchg
ficom
xor
dec
sub
int
jno
or
cmp
fisttp
int
adc
lds
adc
repnz
es
rcr
xchg
outs
or
push
fwait
sbb
mov
push
dec
scas
in
les
(bad)
mov
fucomi
(bad)
movs
mov
or
inc
xchg
mov
fldcw
xchg
sbb
dec
pop
sti
(bad)
shl
add
neg
fwait
rcr
push
cmc
jbe
sub
mov
xlat
sti
loop
fwait
mov
mov
outs
repnz
in
fs
test
int3
stos
push
cmp
lock
aas
loop
sar
out
mov
movs
sbb
sti
mov
pop
xchg
fadd
inc
stos
mov
adc
sub
imul
sub
fs
ins
cmp
push
pop
mov
retf
adc
or
push
lea
xor
adc
loopne
stos
int
loop
adc
(bad)
stc
pop
movs
push
cli
push
lods
mov
mov
fist
test
sbb
jmp
pop
xor
retf
cmps
leave
xchg
loope
and
popa
jns
(bad)
aad
xchg
xor
push
cmc
imul
or
loop
hlt
jne
cwde
add
jae
aam
adc
xor
pop
ror
pop
xlat
cmp
xor
(bad)
je
stos
sbb
adc
sbb
dec
pop
outs
into
jae
out
imul
fmul
popa
and
out
lea
(bad)
jle
push
test
push
push
dec
inc
scas
cs
mov
rcr
out
mov
shr
jmp
cmp
fwait
rcr
nop
sbb
cwde
lahf
popf
out
pop
xchg
inc
sub
mov
xor
es
inc
aad
inc
push
fidiv
neg
icebp
and
xor
loopne
pop
lods
dec
and
int
sbb
push
jge
aaa
pop
sub
mov
and
pop
sub
add
call
into
sub
adc
fcmovb
call
mov
iret
scas
cdq
mov
(bad)
stos
xchg
adc
je
sub
or
pop
aas
idiv
out
pop
push
mov
adc
aas
in
fcmovb
mov
std
les
aad
mov
dec
inc
jnp
and
cdq
clc
adc
dec
das
adc
sub
adc
test
sbb
push
or
add
hlt
out
loopne
fcom
fimul
movs
int3
fld1
and
cmps
arpl
pop
xor
lds
pop
movs
inc
mov
lods
mov
adc
fistp
fistp
rcr
ret
ja
xchg
and
mov
div
adc
aaa
ja
push
push
inc
sbb
jp
push
mov
and
int3
and
adc
enter
(bad)
stos
clc
and
stos
(bad)
aam
scas
std
pop
mov
adc
mov
jg
add
cs
aas
mov
pusha
loopne
inc
sub
test
xor
jge
jns
dec
push
pop
jg
or
sub
stos
sti
xchg
push
dec
out
dec
inc
or
sti
xchg
cmp
in
xor
jbe
mov
int3
fdivr
jae
in
sub
fisubr
add
push
add
push
test
call
add
sti
(bad)
(bad)
pop
bound
in
scas
dec
mov
call
mov
dec
xchg
push
sub
adc
or
clc
add
jmp
outs
and
add
leave
pop
jg
ud1
xor
mov
repz
add
sub
xchg
and
xlat
or
mov
push
aas
cmp
std
xlat
loope
or
dec
stc
adc
rcl
inc
or
xchg
mov
or
cmps
ja
mov
sti
fcomip
jae
(bad)
iret
jo
sub
adc
ret
rcl
or
loop
mov
mov
xchg
std
push
cwde
and
pop
sti
rol
and
pop
les
xchg
cmp
(bad)
out
mov
xchg
mov
test
lds
js
out
in
arpl
push
add
out
popa
xor
loopne
pop
pop
mov
imul
fcmovb
mov
fnstenv
sbb
mov
or
(bad)
jmp
clc
or
ror
xor
jp
cmp
push
int
(bad)
int3
test
mov
jge
pop
pushf
arpl
mov
lods
cmps
sub
inc
arpl
mov
inc
cmp
pop
clc
std
pop
test
addr16
xor
jmp
retf
mov
je
and
cwde
inc
xor
pushf
retf
pop
and
and
dec
cs
push
adc
sub
popf
mov
mov
adc
push
stc
std
mov
fs
cld
pop
sbb
push
mov
repz
sti
stos
dec
cmp
xchg
imul
mov
es
fcomp
movs
or
loope
mov
pop
mov
outs
xchg
sbb
in
cmps
dec
sub
or
pushf
cmc
icebp
cmp
dec
lahf
(bad)
hlt
mov
sbb
sbb
dec
xor
or
pcmpgtb
mov
xor
mov
cmp
loop
mov
and
(bad)
call
sti
daa
mov
push
test
add
pop
loope
test
popf
jg
push
pop
nop
jge
mov
mov
push
push
xchg
push
pop
xor
test
cmp
scas
enter
dec
push
test
cli
mov
lock
out
xchg
fistp
jle
std
call
mov
scas
leave
mov
adc
jg
push
das
popa
data16
jle
adc
pop
aas
cmp
add
mov
ss
mov
xchg
cli
lods
push
int3
daa
test
stos
stos
repnz
imul
push
popa
dec
and
loop
sahf
mov
mov
xor
lods
sbb
dec
inc
mov
and
daa
mov
xor
and
ins
in
pop
dec
mov
jb
sar
adc
popa
movs
repnz
in
xchg
mov
mov
mov
aam
movs
nop
xchg
int
inc
movs
pop
mov
ds
bound
pop
nop
cmps
mov
and
(bad)
fild
mov
rol
or
mov
jbe
mov
imul
sub
inc
xor
outs
push
jl
add
and
imul
(bad)
adc
mov
les
cmp
dec
push
sub
push
stos
jg
cmps
out
jmp
js
cmp
mov
push
fwait
xchg
xadd
stos
sahf
push
cmp
mov
jge
dec
mov
cmp
and
push
aam
shr
or
fstp
fwait
das
mov
hlt
int3
add
leave
cmovae
lea
loope
and
cli
daa
push
push
ins
outs
cmc
xchg
loop
push
cwde
inc
dec
dec
and
imul
nop
pusha
(bad)
test
sub
stos
push
data16
add
fnclex
mov
into
mov
inc
adc
xchg
sub
jns
dec
push
xlat
(bad)
std
aas
sub
fistp
push
inc
or
out
cwde
fcom
in
repz
adc
lods
scas
mov
mov
pop
mov
cmovl
xchg
cmp
loope
das
test
int
or
imul
inc
retf
(bad)
or
leave
xchg
in
rcl
mov
mov
push
xchg
inc
jno
out
ret
dec
rcr
fisttp
clc
mov
fdivr
ret
sbb
xchg
mov
test
jb
pop
xchg
popf
shl
jge
sbb
xor
jae
pop
sub
pop
sbb
mov
xchg
js
std
jns
fsub
pop
mov
sub
ficomp
in
jmp
dec
jmp
arpl
dec
stos
pop
sbb
shl
pop
je
scas
enter
adc
add
(bad)
data16
mov
iret
fdiv
std
lahf
sbb
mov
xchg
jecxz
xchg
sbb
or
push
cdq
iret
jp
addr16
in
jbe
jp
xor
retf
cmp
sbb
ins
and
pop
movs
lods
xor
or
scas
mov
mov
(bad)
aaa
pushf
inc
add
je
cmp
pop
xchg
jl
cdq
fist
push
or
cdq
jo
jle
cmp
mov
iret
call
push
mov
enter
jge
test
xchg
dec
mov
icebp
ret
int3
dec
xchg
arpl
inc
movs
imul
xchg
cmc
je
mov
lods
ss
stc
add
outs
enter
push
(bad)
lock
cld
dec
leave
mov
icebp
xchg
jno
pop
cmovae
push
jb
in
dec
inc
cmp
cmc
outs
mov
push
xor
call
and
jnp
xchg
mov
mov
fs
jns
out
dec
xor
pop
mov
push
rcl
setl
call
loope
sub
xchg
adc
and
inc
and
xor
push
les
jmp
ja
in
rol
idiv
sti
movs
es
mov
and
and
loop
fild
dec
fnsetpm(287
(bad)
clc
jns
inc
data16
mov
cwde
call
test
repz
in
pop
xchg
fcom
xor
ins
pop
sub
pop
cmp
repz
push
mov
(bad)
sub
cwde
outs
dec
xor
arpl
movs
test
fldcw
call
lahf
dec
mov
jmp
mov
inc
dec
fcmovb
stc
mov
imul
xchg
and
je
scas
dec
dec
adc
push
nop
stc
(bad)
outs
inc
inc
dec
fst
(bad)
test
in
hlt
jge
xchg
movs
imul
jbe
push
sbb
mov
aaa
pop
stos
adc
xchg
adc
adc
pop
or
add
push
cmps
movs
scas
xchg
daa
stos
jno
inc
jmp
jle
push
mov
in
push
dec
adc
or
jmp
ins
sub
dec
(bad)
loope
lahf
cmps
inc
jnp
neg
ja
inc
inc
pushf
push
pop
and
jp
inc
aas
lods
dec
jno
cmc
lea
je
ss
les
jns
leave
cmp
fmul
add
sahf
retf
(bad)
fsub
mov
loop
jmp
int3
pop
xlat
rcl
ret
mov
cmp
jns
in
pop
pushf
jbe
ret
xchg
lock
aad
(bad)
fdivr
cmps
push
xor
aad
test
rcl
mov
rcr
movs
lods
(bad)
int
cmps
repz
cmp
fabs
mov
loopne
fisub
jb
(bad)
mov
mov
loop
add
mov
mov
shl
mov
lds
add
cmc
gs
retf
xlat
aam
lahf
jbe
int3
adc
sbb
scas
inc
xor
icebp
gs
xchg
xchg
mov
xor
dec
test
xor
fistp
mov
icebp
push
mov
sbb
retw
and
xor
inc
or
fdivr
sub
mov
into
sub
pop
clc
(bad)
cmps
vpmuludq
in
aas
retf
repz
jmp
cmp
fwait
addr16
sub
ss
ret
dec
cli
inc
inc
daa
xor
shl
jnp
mov
pop
and
pop
and
cmp
cli
mov
retf
mov
lahf
push
pusha
dec
loopne
fidiv
mov
mov
dec
ja
or
mov
pop
xchg
repz
test
sbb
push
inc
and
mov
push
test
or
fucom
pop
out
ins
stos
cmps
add
and
xor
bnd
dec
or
into
movs
rcl
and
push
sahf
mov
test
mov
mov
pop
lods
mov
out
pop
mov
jnp
xor
dec
ss
xchg
loope
push
inc
bnd
xor
rol
iret
or
shr
dec
jp
int
add
jb
mov
jne
test
xchg
(bad)
iret
imul
and
pop
xchg
or
ret
mov
mov
or
jns
xor
mov
sbb
xchg
fild
test
imul
lea
add
in
outs
push
das
inc
xchg
pop
in
aas
retf
into
xchg
jmp
pop
clc
push
xchg
ficomp
jns
xor
stos
imul
repz
cmp
aad
sahf
out
into
xchg
sub
push
rol
push
mov
daa
test
pop
stos
inc
jno
shl
rcl
ins
mov
rcr
ss
pop
push
out
xchg
loopne
rcl
xchg
mov
stos
jb
scas
cld
mov
push
lahf
cmp
jg
push
in
jae
inc
sar
stos
popf
sahf
pushf
shl
add
in
mov
add
test
ds
mov
push
arpl
test
dec
into
rcl
pushf
(bad)
pop
pop
mov
shl
mov
sbb
push
jae
pop
in
call
idiv
scas
or
data16
adc
js
adc
(bad)
mov
ins
call
inc
(bad)
jmp
mov
xchg
adc
cmps
dec
sbb
retf
ins
(bad)
shl
(bad)
push
push
sbb
lds
(bad)
fcomp
faddp
addr16
xchg
lea
sub
lock
fiadd
(bad)
stc
neg
inc
mov
rcl
xchg
add
xchg
jge
vcomiss
aaa
or
xchg
ja
adc
rcl
or
aad
jne
fisttp
into
or
addr16
jl
mov
push
(bad)
xor
and
outs
jg
int3
clc
pop
call
ins
test
sar
inc
mov
retf
dec
inc
mov
mov
cdq
mov
cmps
add
jle
mov
dec
lea
pop
inc
pop
inc
(bad)
into
retf
jecxz
adc
sub
push
or
and
(bad)
dec
fwait
movs
jnp
nop
sbb
push
aam
in
in
pushf
aas
std
cs
sbb
imul
sub
aas
movs
test
sbb
les
test
xor
test
aam
and
(bad)
loop
in
iret
xchg
sub
cs
mov
cmp
mov
mov
les
inc
mov
xor
jg
and
cs
(bad)
xlat
shl
js
push
xor
pusha
dec
dec
sar
out
jns
outs
push
dec
pop
and
loope
stos
mov
adc
scas
jge
aam
outs
sbb
sbb
cmp
inc
pop
in
inc
scas
and
jmp
push
sahf
in
cmp
adc
ins
popf
mov
push
and
xchg
mov
xchg
jge
pop
retf
push
ficom
pop
movs
bound
xor
mov
call
out
dec
out
mov
aad
and
dec
xchg
jmp
(bad)
scas
cli
rol
xchg
sbb
or
pop
adc
dec
pop
xlat
cmp
mov
(bad)
sub
cmp
loope
sub
fild
mov
sub
inc
pushf
jmp
mov
jg
ficomp
lock
push
pop
hlt
inc
add
shl
in
mov
clc
cmp
pop
sti
daa
clc
rol
mov
cmps
push
push
and
psrad
or
outs
popa
js
xchg
es
sbb
imul
xchg
xchg
dec
test
scas
ins
aad
dec
ins
lds
int
shr
fisubr
imul
pop
out
or
sbb
mov
xchg
pop
dec
outs
push
or
mov
dec
adc
sti
out
mov
mov
jecxz
xchg
aam
mov
pusha
jno
fsub
cmp
cdq
pushf
mov
add
mov
mov
or
movs
and
pop
rcl
and
hlt
sbb
sbb
mov
jne
or
adc
jp
dec
xchg
add
inc
loope
jae
or
aam
mov
jp
fucomp
adc
push
and
mov
(bad)
out
rol
dec
outs
mov
(bad)
add
push
mov
cmp
jne
mov
cdq
jmp
hlt
inc
aaa
adc
repnz
inc
push
xchg
xor
movs
stc
neg
push
or
pop
xor
sbb
jl
mov
push
pop
push
push
add
jne
xchg
pusha
neg
call
or
nop
push
pop
xor
dec
fdivr
(bad)
mov
mov
push
adc
mov
js
xchg
sub
fnstcw
push
xor
fcom
aaa
or
fs
aad
or
mov
xor
inc
loope
inc
enter
lods
push
cmp
jp
(bad)
jmp
xchg
pop
lods
ins
xchg
pop
jl
jle
or
mov
sbb
and
mov
ds
hlt
mov
xor
jle
mov
lods
ja
push
add
popf
ins
add
xchg
sub
push
pop
and
add
and
lahf
lahf
cmps
ror
pop
je
mov
test
pop
lea
or
sbb
dec
push
scas
ret
seta
sub
add
push
(bad)
retf
lahf
mov
js
sbb
dec
mov
ins
xor
add
dec
cwde
mov
xor
jmp
xchg
jge
push
xchg
lahf
js
es
add
cmp
lahf
repz
es
and
pop
adc
in
nop
call
push
(bad)
fnstsw
rol
push
div
iret
mov
mov
jg
cs
addr16
cmp
pop
sub
mov
dec
cld
(bad)
nop
mov
xor
xchg
test
not
loop
cs
and
adc
outs
retf
and
inc
sbb
xor
push
pop
aad
mov
lock
dec
call
inc
jmp
and
jg
push
imul
hlt
dec
lods
and
(bad)
cmps
lock
lea
movs
int3
ins
sar
fild
pop
cmps
pmuludq
jecxz
jno
popa
jnp
int3
dec
dec
ss
fsubr
xchg
sti
jns
fcomp
pop
or
xor
pop
retf
movs
mov
xchg
arpl
and
sub
mov
mov
leave
pop
neg
cmp
adc
mov
aas
pop
(bad)
loopne
sub
mov
bnd
inc
sub
aaa
inc
jmp
adc
daa
dec
repnz
sbb
iret
(bad)
cmp
leave
pop
xchg
icebp
(bad)
mov
cmp
retf
not
call
(bad)
fbld
mov
pop
hlt
mov
sbb
add
cmp
dec
fmul
int3
scas
stos
add
fstp
ds
das
pop
and
xor
xor
push
xor
loope
les
mov
pop
inc
ret
movs
aam
cmp
out
loope
xchg
pop
out
sbb
jg
int3
mov
outs
scas
sbb
inc
in
mov
push
pop
int
add
jecxz
aaa
sbb
repz
out
(bad)
aam
test
xor
shl
and
xchg
mov
cmps
int3
nop
fmul
cld
rcl
arpl
(bad)
xlat
inc
mov
rol
mov
push
leave
mov
and
shl
xchg
rcl
outs
in
fisttp
fst
jl
out
out
push
jmp
inc
ret
(bad)
pushf
outs
add
or
mov
xor
(bad)
retf
shl
ins
and
scas
sbb
jne
popa
out
jne
fwait
sbb
push
jo
mov
mov
mov
and
jge
popf
sub
ret
add
lea
push
cmp
in
inc
daa
cmp
jo
mov
jb
fisub
lods
callw
mov
hlt
jp
xlat
xchg
movs
xchg
test
push
adc
mov
xor
aam
inc
mov
(bad)
imul
ficomp
jnp
xor
shl
xchg
in
enter
div
push
(bad)
cmp
add
retf
lds
inc
push
loopne
pop
lgs
jns
adc
mov
xor
nop
(bad)
pop
jecxz
fs
jle
and
cmovs
mov
int3
nop
jge
ss
aaa
sub
in
mov
shl
mov
movhlps
in
xchg
pop
xchg
pushf
(bad)
nop
bound
fsubr
adc
mov
(bad)
aam
leave
cmp
pop
enter
outs
sbb
pop
mov
ror
push
shr
mov
mov
repz
ret
not
pop
cmc
out
mov
sbb
push
or
js
push
mov
int
cmp
push
inc
push
(bad)
fsub
leave
mov
jo
lahf
cmovp
rol
sbb
sahf
je
xchg
hlt
fdivr
mov
adc
aas
and
call
xor
jecxz
jb
cdq
pop
int3
(bad)
ror
sbb
idiv
bound
popa
inc
fwait
mov
hlt
mov
pop
xchg
sub
int
inc
cdq
ss
sahf
pop
pop
popf
xchg
loop
cmp
repz
jp
repz
scas
jle
addr16
adc
sub
sahf
sbb
sbb
sar
mov
test
xor
add
jle
cmp
mov
mov
mov
or
xor
pop
xchg
ret
fstp
mov
nop
std
sbb
std
inc
mov
sbb
jns
mov
loopne
mov
adc
rcl
fst
jge
retf
jmp
repz
xchg
inc
sub
and
(bad)
jnp
sti
xchg
or
add
sahf
cwde
es
xchg
jle
pop
jns
sbb
inc
or
dec
jl
icebp
js
scas
push
ss
jnp
jge
ror
jnp
jbe
and
jl
xchg
into
out
movs
xor
ins
aam
ret
shl
daa
loop
sub
xor
cld
xor
(bad)
scas
retf
imul
mov
cmp
xlat
inc
mov
and
call
aas
cmps
inc
out
mov
out
inc
movs
lahf
dec
int3
iret
adc
cmp
or
pop
lahf
mov
shl
pop
mov
rol
jge
cld
push
cmps
ret
call
jp
dec
nop
dec
sub
lods
sbb
js
jbe
push
mov
sub
push
cmps
and
aam
dec
and
imul
xchg
sbb
rcl
into
fdivr
adc
xchg
fsub
aaa
or
cmps
test
lea
ja
push
pop
xchg
dec
out
add
lods
xor
or
mov
mov
mov
xchg
lods
push
sar
sbb
adc
cmp
adc
sbb
ret
jne
or
jge
aaa
ret
push
pop
fld
cmp
in
scas
mov
mov
pop
sub
jmp
aas
mov
enter
dec
into
data16
outs
aam
(bad)
in
or
mov
movs
nop
inc
mov
jg
clc
aam
sbb
in
pop
out
xor
js
cmps
fwait
mov
scas
push
cs
retf
cmps
mov
jne
out
xchg
pop
lock
dec
leave
movs
ret
or
push
jnp
inc
push
(bad)
(bad)
xor
cmp
inc
dec
mov
xchg
in
arpl
jno
or
mov
pop
xor
dec
push
dec
mov
enter
add
jnp
pop
pop
in
lods
mov
mov
dec
push
push
je
or
mov
sub
in
mov
mov
xor
or
rol
je
mov
ss
and
mov
xor
(bad)
mov
cs
retf
jae
add
sbb
stos
lods
fnstcw
mov
cmp
lock
mov
nop
sbb
test
imul
fimul
pushf
fisub
fucomip
mov
xchg
test
cld
fcomp
mov
jnp
into
xchg
in
mov
mov
fld
ret
fdivr
push
(bad)
jnp
xchg
dec
mov
mov
jp
int
jl
enter
push
call
push
inc
cmp
xor
pop
xchg
cmp
sbb
pop
adc
test
pop
dec
bound
in
xchg
jnp
fdiv
in
jne
push
sub
xchg
loopne
in
(bad)
pop
and
adc
(bad)
out
repnz
jns
mov
mov
or
call
ss
xor
les
sbb
shl
dec
push
(bad)
sub
pop
xchg
popf
mov
mov
xor
call
add
xchg
inc
pushf
or
inc
pop
mov
sbb
fmul
xchg
das
jno
jno
add
sti
imul
cmp
pop
fstp
inc
je
inc
inc
out
mov
(bad)
imul
mov
ja
data16
inc
clc
sbb
add
push
cmc
jnp
xor
mov
xor
les
adc
test
std
and
inc
shl
sbb
jp
mov
add
or
mov
jmp
cmps
popf
sub
stos
xor
add
popa
xchg
mov
pop
fucomip
xor
and
dec
les
dec
clc
cmp
pop
cld
iret
shl
call
pushf
shl
clc
dec
cmp
ds
fs
inc
mov
ret
adc
cwde
or
jne
pop
inc
dec
ds
shl
daa
sbb
xor
dec
(bad)
aaa
dec
ja
into
scas
cmp
scas
aaa
jp
sub
xchg
jnp
(bad)
dec
pop
sbb
cmps
retf
mov
iret
push
iret
mov
aad
sbb
popf
test
add
(bad)
hlt
repnz
jle
inc
and
push
in
xor
retf
test
sti
cmps
ret
mov
cmp
mov
mov
xlat
dec
test
xchg
xchg
dec
xor
pop
xchg
sbb
add
dec
sar
mov
in
enter
das
(bad)
rcl
iret
sub
jmp
mov
iret
xor
push
aam
imul
gs
pop
sbb
xlat
scas
retf
mov
jecxz
cld
dec
lods
inc
and
aam
jmp
xchg
cmps
cdq
scas
mov
jg
scas
xor
es
sbb
(bad)
jl
cmp
leave
loopne
test
dec
mov
jns
dec
inc
add
jno
push
push
xor
repz
or
arpl
(bad)
and
ds
and
push
adc
imul
call
xchg
ds
sbb
dec
mov
add
add
loope
mov
mul
dec
inc
lods
and
mov
mov
push
daa
jmp
or
cli
sbb
or
pop
rcr
fadd
and
gs
xchg
cdq
arpl
shl
popf
lds
mov
pop
add
mov
rol
xchg
xor
daa
hlt
addr16
or
mov
movs
mov
fsub
retf
in
outs
cmp
jmp
sbb
xchg
or
cmc
cli
fdivr
dec
inc
in
sbb
inc
pop
dec
jecxz
mov
adc
clc
sub
inc
in
push
add
gs
mov
lea
addr16
pop
pop
int
hlt
pop
test
js
shl
enter
sahf
sbb
shl
icebp
mov
inc
sub
mov
popa
sbb
mov
xor
mov
mov
ffreep
fmul
out
xchg
shl
scas
shr
push
push
push
bound
adc
or
(bad)
pop
and
addr16
cld
jmp
das
jns
ror
arpl
sub
call
dec
rcr
sub
ins
jg
call
push
xor
test
(bad)
sbb
scas
js
pop
call
shl
sub
ror
mov
dec
retf
outs
pshufw
or
jmp
inc
jle
in
push
std
xor
or
mov
mov
in
sub
mov
call
mov
inc
in
adc
mov
adc
cmp
aas
mov
jo
and
out
test
or
mov
popa
mov
cmp
mov
mov
mov
cld
and
mov
mov
sti
ins
xor
dec
lds
push
jp
(bad)
xlat
ret
rol
aas
cs
xchg
es
hlt
neg
dec
sub
pop
jne
int
rcr
cmc
add
cmp
mov
inc
and
cli
cli
fistp
out
pop
lea
push
xor
(bad)
mov
stos
sub
pop
or
jne
cld
(bad)
jl
sub
jmp
pop
add
inc
cmps
inc
stc
sbb
adc
or
into
xchg
cmp
push
sbb
xor
xor
cmp
lea
sub
mov
sub
jle
mov
add
pop
jle
pop
in
sub
inc
sub
adc
jecxz
or
lods
inc
arpl
mov
outs
or
cmp
fcomp
jmp
das
cmp
rcr
js
dec
test
sbb
and
cwde
in
jbe
outs
push
push
xor
fs
adc
hlt
xor
faddp
mov
ficomp
aad
stos
sub
out
adc
jecxz
jle
mov
push
stos
jnp
pop
and
lahf
cmc
icebp
(bad)
mov
push
inc
mov
out
pop
pop
adc
sub
cmp
jbe
mov
add
call
cwde
adc
and
mul
xchg
or
out
and
fcomp
cmp
imul
aaa
jne
or
pusha
mov
mov
(bad)
(bad)
sar
adc
fwait
lds
inc
pop
aaa
retf
mov
sti
jl
popf
pop
cmps
sbb
adc
xchg
sub
dec
int3
fs
mov
lea
xchg
pop
sbb
sbb
jns
sti
pop
ss
imul
lds
mov
pushf
inc
test
popf
and
push
lds
repz
mov
inc
stc
jp
fisub
add
dec
out
add
xor
dec
add
ficomp
mov
enter
popa
mov
inc
jb
and
enter
shl
pop
push
icebp
jbe
ins
retf
popa
xor
pop
adc
push
imul
jmp
and
push
scas
or
std
mov
mov
xchg
std
xchg
cld
imul
jl
call
mov
(bad)
fsubr
mov
pop
sub
push
mov
jnp
push
inc
dec
in
adc
or
sub
pop
dec
enter
jns
add
test
repz
into
and
xchg
out
adc
jne
pop
cmps
or
mov
int
into
add
ficomp
jle
mov
movsx
add
mov
or
inc
push
adc
lods
clc
xor
cs
lea
mov
dec
pop
sbb
inc
jmp
lock
adc
ret
mov
ds
xor
mov
dec
sub
or
ret
push
jbe
mov
fwait
test
into
movs
push
aam
push
jb
aad
and
imul
dec
sbb
retf
pop
lods
call
popa
jmp
xor
push
lea
dec
xlat
stos
mov
fcmovne
jns
sbb
setle
scas
and
cmp
jnp
in
mov
std
jbe
jae
ficom
dec
js
dec
pop
ja
test
add
sti
iret
fwait
dec
lds
cmp
adc
dec
xor
out
cmp
pop
ins
mov
je
rcr
mov
or
std
mov
cs
xchg
adc
lock
inc
or
ret
cmp
outs
(bad)
div
dec
loop
aam
pop
sbb
(bad)
sub
or
je
xrelease
mov
lds
imul
das
out
pusha
movs
nop
inc
dec
sar
outs
mov
aas
jmp
cmp
jl
iret
iret
push
fimul
(bad)
cli
sahf
stos
ret
and
aad
or
mov
test
(bad)
or
outs
nop
repz
call
call
or
mov
dec
jno
cmp
lods
xchg
addr16
cmc
sbb
mov
pop
or
out
arpl
lods
and
aaa
lods
xor
xchg
xchg
and
sbb
cmps
hlt
jne
mov
test
jae
nop
mov
icebp
xchg
loopne
dec
test
test
jmp
dec
dec
inc
pop
clc
push
(bad)
aas
cmp
mov
mov
xchg
shr
in
cmp
or
mov
scas
mul
xchg
fild
jle
(bad)
fdivr
or
cmps
sbb
push
scas
pop
stos
adc
stos
inc
rcl
js
sbb
test
hlt
call
and
hlt
xchg
pop
add
sti
neg
out
cli
data16
sti
cmp
sbb
test
(bad)
fdivrp
inc
in
mov
imul
pusha
adc
scas
stos
mov
lods
fisttp
repz
jae
lds
daa
ja
dec
xchg
jmp
cmc
sahf
xchg
div
cmc
jmp
add
and
jae
cmp
shr
dec
fisubr
shl
dec
mov
femms
xor
pop
retf
fmul
or
pop
int3
adc
xlat
sbb
(bad)
in
out
pop
push
ror
in
xor
test
sar
fisttp
push
xlat
icebp
mov
cmp
test
add
pusha
movs
nop
inc
push
rcl
or
sub
imul
int
je
pop
xchg
cld
lahf
les
shl
out
mov
arpl
cs
mov
outs
jmp
xor
push
movs
dec
pushf
test
mov
add
or
jb
xor
inc
and
pop
das
dec
adc
xchg
retf
cmp
(bad)
pop
adc
cmp
stos
adc
mov
cli
mov
add
(bad)
cmc
inc
ret
out
mov
out
call
test
fstp
dec
out
or
mov
jne
pop
int
sar
sbb
jmp
test
sub
cmp
arpl
push
ret
fsubr
ffreep
push
mov
stos
cmps
out
(bad)
pop
mov
js
fs
mul
sbb
jge
(bad)
jmp
sbb
cmp
(bad)
sbb
std
ss
ins
add
or
test
scas
sub
loop
aad
sbb
mov
cdq
add
push
addr16
iret
push
mov
or
xlat
inc
shr
ret
hlt
sub
or
retf
call
adc
loop
push
das
cmp
cmp
mov
pop
mov
cmp
inc
mov
sar
cmp
dec
xor
sbb
scas
pop
arpl
adc
sub
sahf
sar
in
mov
sahf
dec
lods
cmc
xor
dec
mov
pusha
dec
jecxz
sub
or
xchg
retf
lods
out
cmp
mov
pop
ss
pop
dec
xor
into
test
(bad)
and
jno
daa
xor
pop
mov
jle
cmp
pop
inc
fisubr
push
sub
push
mov
dec
xchg
or
and
add
int
add
add
stos
push
ret
jo
in
xor
sub
retf
ror
push
loope
add
inc
push
stos
cmp
pop
imul
je
mov
xchg
jo
sub
adc
pop
mov
movs
and
sbb
loop
mov
xlat
sbb
mov
xor
add
repnz
test
fild
popa
in
sar
dec
hlt
sbb
int
in
xchg
int3
push
enter
stos
pop
jmp
mov
out
mov
mov
fs
inc
inc
pushf
(bad)
pop
dec
bound
mov
mov
cli
xchg
xchg
sti
fwait
pop
adc
lock
movs
jl
cmp
int
sub
test
add
int
mov
adc
out
pop
mov
cmp
retw
js
xchg
add
push
mov
cmp
aaa
add
adc
je
test
push
out
imul
inc
sub
adc
dec
cmp
ss
rcl
cs
mov
mov
mov
cmp
xsaveopt
cmp
xchg
shl
cmps
daa
or
das
adc
cmp
data16
and
push
inc
mov
test
repz
(bad)
cmp
cmovbe
rol
inc
and
test
xor
or
test
pop
sub
int3
mov
lahf
sub
jae
rcr
lods
ret
jbe
aas
cs
sar
push
std
fdivr
repnz
test
in
adc
mov
mov
test
add
aas
inc
retf
adc
mov
fwait
lds
jg
popf
rol
stc
mov
mov
stos
repz
push
popa
arpl
or
aas
cmps
iret
cdq
dec
ret
in
push
repz
stc
or
inc
jae
or
xlat
cdq
push
(bad)
xor
fcmovb
sbb
dec
add
mov
jae
sub
inc
lods
js
mov
dec
ja
in
ret
ds
mov
mov
mov
pusha
sub
add
mov
add
push
(bad)
cmps
pop
mov
jnp
xchg
dec
lods
sbb
je
cmps
mov
cld
mov
call
jo
xor
mov
sbb
mov
and
clc
aaa
mov
mov
pop
pop
xchg
pop
retf
cmp
jmp
sti
sbb
or
ja
pop
je
add
clc
sbb
retf
cmc
out
iret
js
dec
lds
pop
adc
add
sub
adc
clc
mov
cmp
cmp
cs
leave
cmp
push
in
sub
add
push
mov
push
(bad)
retf
retf
dec
pusha
mov
adc
inc
jo
ja
vmovlpd
stos
icebp
adc
jae
lods
mov
pop
(bad)
mov
jae
int
jg
xor
add
arpl
cmps
(bad)
sbb
ret
lea
dec
test
addr16
cmc
iret
sti
add
sbb
std
fadd
dec
fdiv
call
addr16
xor
je
push
addr16
(bad)
xchg
loop
mov
lahf
and
cmp
in
movs
pushf
pop
cmp
mov
jne
pop
gs
nop
or
sbb
push
mov
jmp
repz
ret
outs
xchg
xchg
enter
mov
jnp
adc
xchg
inc
pop
dec
int3
add
ja
sub
dec
mov
inc
cmps
mov
lea
inc
fisub
fadd
pop
mov
addr16
adc
into
pop
pop
jge
loop
cmc
push
pop
cdq
mov
out
mov
(bad)
pop
mov
jb
xchg
xchg
xchg
mov
dec
sbb
mov
loopne
scas
lds
gs
and
mov
adc
ja
add
mov
iret
jnp
out
sar
call
cli
push
out
push
xor
mov
dec
or
pop
repnz
inc
(bad)
mov
mov
test
out
retf
icebp
cdq
arpl
mov
outs
(bad)
mov
xchg
fiadd
dec
ds
mov
pop
cwde
push
jp
in
sar
jae
pop
hlt
sbb
mov
into
arpl
xchg
popa
(bad)
jle
fs
inc
fadd
cmp
or
and
gs
loopne
fmul
inc
test
add
pop
add
retf
(bad)
retf
dec
aaa
in
rcl
neg
mov
xchg
cmps
retf
or
sbb
clc
loope
arpl
aad
iret
ss
repz
aaa
inc
cdq
test
retf
sahf
enter
mov
add
inc
out
pop
inc
inc
test
test
add
mov
leave
add
cmps
clc
mov
sbb
fld
push
push
dec
cmps
sbb
push
fcmovne
call
xor
sub
gs
jmp
inc
mov
ins
inc
rcl
or
es
movs
cli
xor
lods
outs
gs
test
inc
cmp
ret
loopne
pop
or
pop
mov
cmp
push
inc
sbb
cmps
ins
push
in
xlat
inc
adc
test
fmul
mov
adc
mov
xchg
xchg
push
push
mov
and
out
in
pushf
fmul
mov
adc
xchg
rcl
inc
mov
stos
lods
lds
xor
test
jne
cmp
xchg
aam
cdq
clc
cs
inc
xor
aaa
mov
inc
mov
sub
out
pop
mov
inc
sbb
add
jle
ins
pop
sub
mov
aad
fcomp
xchg
mov
mov
xchg
add
in
repnz
xchg
adc
push
rol
scas
xor
fistp
cmp
push
or
bound
adc
sahf
push
xchg
mov
or
rcl
pushf
mov
push
sub
xor
and
fwait
out
fs
adc
xor
mov
dec
mov
mov
aas
fbstp
push
js
loop
mov
pop
loope
rol
xchg
in
mov
add
movs
(bad)
loope
mov
jmp
imul
push
mov
jne
xchg
xchg
dec
inc
bswap
fwait
jns
dec
mov
or
aaa
add
jo
and
cmp
call
jne
jbe
cli
lock
sbb
shr
sahf
xor
pop
pushw
mov
push
dec
mov
push
in
cmp
jnp
mov
psubw
pop
inc
mov
jo
or
jmp
loope
cmp
adc
cmp
add
call
pop
cmp
cmps
xor
das
lods
in
jecxz
lahf
pop
sbb
cmp
fwait
cmc
mov
pop
and
ja
xlat
mov
and
mov
pop
inc
mov
add
jg
jbe
outs
daa
imul
es
xchg
mov
inc
test
div
call
int3
push
mov
sub
ins
mov
mov
pusha
sub
ds
(bad)
cmp
adc
sahf
mov
xchg
mov
mov
scas
pminub
loopne
or
inc
and
mov
fs
jecxz
dec
cmc
and
or
xor
popf
xor
aaa
das
push
out
fld
inc
shl
cmps
xchg
ss
adc
loop
fiadd
jmp
mov
jbe
dec
jae
dec
dec
je
aam
mov
xor
pop
int3
cmp
(bad)
ja
cvtpi2ps
mov
xor
outs
sbb
adc
mov
and
gs
sahf
or
jp
jmp
ja
sub
out
test
inc
cmp
mov
cdq
sub
les
fbld
mov
jne
sbb
and
sub
(bad)
xchg
jns
mov
sbb
push
stc
aam
rcl
ret
push
ror
mov
or
sub
out
push
push
cmps
mov
repnz
rcl
xchg
ja
std
loope
sub
jb
outs
loopne
mov
test
pop
mov
jp
out
xor
jge
mov
jns
enter
pusha
inc
pusha
popf
ss
mov
jge
mov
mov
pushf
mov
fcomp
fwait
inc
pop
push
mov
push
sbb
jb
mov
aam
push
icebp
xchg
sub
loopne
mov
pop
xor
ss
cmp
lea
mov
jmp
in
xchg
xor
aaa
xor
sbb
inc
leave
jge
loop
mov
stos
leave
xchg
dec
and
test
or
(bad)
inc
repz
loopne
and
inc
xor
(bad)
mov
cmp
shr
lahf
pop
(bad)
xlat
mov
xchg
(bad)
jo
ins
push
je
jp
pop
stc
outs
mov
fcomp
push
push
push
jg
mov
repnz
xchg
dec
(bad)
out
cmps
pop
outs
mov
test
sahf
cmp
jmp
out
mov
ja
rol
fbld
or
jbe
push
xor
mov
cmp
add
pop
lahf
or
mov
jo
in
(bad)
nop
mov
mov
outs
call
sub
mov
mov
(bad)
pop
and
fsubr
shl
iret
das
inc
aam
adc
mov
mov
mov
cmp
inc
out
and
mov
in
enter
and
push
pop
test
data16
stos
mov
xchg
jne
in
lods
fidiv
scas
xor
xchg
int3
mov
clc
rcl
mov
sub
sub
fwait
mov
imul
mov
push
(bad)
lahf
pop
mov
dec
sub
jp
jne
mov
pop
icebp
adc
mov
mov
dec
shr
(bad)
cmps
jp
sahf
jle
out
mov
and
cmps
mov
cli
pusha
lods
xor
hlt
or
dec
xchg
movaps
fst
sti
fucomi
push
inc
inc
mov
jge
pop
and
xlat
mov
cmp
xor
(bad)
lock
mov
lods
(bad)
xchg
into
add
lea
fcom
movs
cli
fimul
test
xchg
loop
loop
mov
or
fwait
jae
test
fs
mov
xchg
xor
dec
jl
sub
xor
dec
daa
repz
jb
or
sbb
jmp
jo
cwde
fist
minps
call
and
sbb
mov
sub
jb
movs
mov
cwde
(bad)
sub
fidiv
xchg
stos
shl
clc
xchg
xchg
clc
pop
sbb
xor
sub
movs
push
mov
add
ja
lock
or
cs
dec
(bad)
enter
xlat
sti
es
clc
dec
ins
push
jge
adc
addr16
test
(bad)
push
imul
inc
(bad)
loope
pop
xor
mov
push
adc
(bad)
sar
xor
jns
aad
mov
nop
adc
lea
aas
(bad)
pop
rol
and
cmp
aad
xchg
mov
mov
push
bound
pushf
in
(bad)
adc
jge
xchg
leave
ins
xchg
in
(bad)
hlt
pop
cmps
sub
pop
pop
xor
jmp
sub
pushf
hlt
xchg
cmp
aaa
inc
shl
ret
cmp
push
push
test
add
or
jg
push
loop
push
fnstenv
or
in
push
add
cmc
push
push
outs
out
cmps
add
repz
inc
aas
or
mov
xchg
pop
shl
jae
mov
push
inc
mov
or
xchg
test
outs
pushf
add
mov
mov
sti
test
in
enter
out
sub
adc
ja
xchg
push
xor
xchg
rep
inc
xor
fmul
xchg
or
push
movs
xchg
fistp
jecxz
xor
xchg
in
rcr
repz
cmp
dec
ins
mov
xchg
or
mov
into
ret
xor
scas
or
mov
fistp
rcl
dec
xor
jmp
mov
add
mov
rol
jg
cs
dec
stc
test
add
sbb
lods
js
jecxz
mov
movs
mov
inc
xchg
mov
rol
loopne
jecxz
xor
jl
sbb
sti
js
mov
dec
cmp
add
cmp
scas
pop
pop
add
jp
dec
pop
mov
mov
sar
syscall
pusha
and
xchg
sub
movs
std
mov
mov
sbb
or
mov
cwde
leave
cmp
sbb
or
cmps
repz
mov
mov
les
jecxz
rcr
jnp
stc
xchg
mov
mov
aaa
into
inc
adc
outs
imul
xchg
int3
mov
xor
jge
sbb
pop
shl
imul
pop
out
imul
movs
add
inc
mov
push
fnstcw
outs
call
cmp
mov
add
pop
jns
cmp
ret
cmp
mov
test
mov
(bad)
xchg
dec
xchg
xchg
mov
cmp
fstp
out
into
fs
pushf
popf
enter
sub
adc
inc
pusha
loope
js
and
jb
inc
dec
jo
dec
and
retf
mov
repnz
ret
fsin
pop
inc
out
jmp
dec
mov
sub
cdq
dec
pop
and
push
jge
sbb
push
xor
sub
repz
mov
jmp
nop
or
call
dec
xor
push
dec
(bad)
aas
stc
dec
adc
inc
pop
jnp
xor
jns
add
pop
(bad)
repnz
lods
call
rcr
les
jne
out
cmps
js
popf
inc
xchg
mov
mov
mov
jae
mov
jo
inc
scas
xchg
bound
and
jae
and
sar
cmc
nop
bswap
enter
add
mov
mov
lds
jbe
pop
shr
lods
lods
cs
or
or
push
mov
retf
aas
in
pop
inc
popa
pop
mov
add
lds
cmp
sbb
imul
out
aad
xor
outs
dec
dec
push
inc
pop
imul
jbe
adc
nop
or
sub
jae
jp
in
fldcw
movs
fst
je
loop
rcr
outs
(bad)
std
or
in
cmps
sbb
fidiv
mov
dec
push
pop
sub
in
mov
dec
or
es
fistp
or
pop
sbb
mov
fbstp
ds
repz
push
or
mov
and
push
push
aam
cmp
fcom
dec
lea
push
jno
add
aaa
clc
test
mov
adc
mov
data16
push
mov
adc
and
push
fld
xor
and
ds
mov
popa
jne
lods
or
adc
fnsave
lea
cmp
inc
aas
arpl
and
test
lahf
fidivr
push
pop
add
jge
sbb
and
dec
je
dec
std
mov
xor
sar
test
dec
in
mov
test
inc
jno
adc
mov
xchg
jg
adc
shl
repz
mov
gs
sahf
ss
pop
add
imul
ret
rcr
fdivr
(bad)
lock
jo
retf
xchg
(bad)
push
push
stos
mov
ret
xchg
lock
repnz
dec
test
dec
jecxz
scas
shl
pop
js
mov
movs
ins
jne
pop
push
out
movs
sub
(bad)
push
xchg
call
dec
test
add
int
adc
mov
fistp
mov
jp
push
movs
in
imul
sub
sbb
scas
loop
cmps
adc
out
cmp
adc
data16
pop
mov
sbb
punpcklwd
dec
out
cmp
adc
and
(bad)
sub
fs
jmp
cmps
adc
imul
rcr
push
xor
sbb
je
imul
mov
xor
xchg
retf
dec
jle
cmp
ins
fst
and
ds
cmps
les
shl
and
push
loopne
rol
add
cmc
sbb
jne
cmp
(bad)
in
cmps
pop
(bad)
sub
push
lds
jle
inc
sub
pushw
fnstenv
mov
jno
mov
mov
leave
or
fs
add
aas
cdq
call
adc
jp
mov
dec
movs
loop
iret
sub
xor
imul
push
cld
mov
lds
jp
cmp
pusha
lods
xchg
push
mul
movs
sub
fsub
inc
jno
or
dec
enter
mov
pop
pop
ins
dec
push
imul
cmps
call
pop
mov
retf
inc
adc
imul
adc
ds
add
jg
nop
aam
test
mov
and
inc
push
(bad)
std
idiv
dec
xchg
and
std
ret
jecxz
scas
push
sub
jnp
call
and
add
in
popa
sbb
and
inc
mov
std
xchg
jb
std
mov
dec
lahf
bswap
jb
xchg
sub
lea
mov
mov
int3
or
mov
sbb
inc
jno
ret
data16
aad
scas
mov
jmp
jg
add
xchg
shl
jnp
mov
jbe
in
(bad)
rcr
fsub
mov
sbb
(bad)
and
popa
hlt
sbb
and
pop
sub
jecxz
jne
mov
stc
jp
add
xchg
mov
sub
xchg
clc
mov
and
add
add
loop
leave
jmp
jle
mov
push
lods
jecxz
dec
loope
pop
popa
les
(bad)
popf
ret
jno
lods
and
sub
mov
out
das
adc
and
mov
jb
xor
xchg
inc
out
dec
lahf
fs
push
pushf
enter
inc
(bad)
sub
adc
dec
mov
dec
jp
cmp
sbb
xchg
sub
xor
xchg
gs
inc
retf
xor
cmps
and
cmp
clc
outs
and
mov
retf
call
in
pushf
test
dec
std
sub
retf
movs
mov
gs
adc
xchg
repnz
add
mov
push
jb
iret
xchg
pop
xchg
lods
jle
sbb
sub
xchg
push
idiv
movs
outs
mov
adc
pop
cmp
shr
push
jg
mov
fwait
dec
stos
push
fstp
pop
dec
sbb
in
adc
mov
adc
jg
push
int3
jbe
out
cdq
aad
std
ja
and
add
sbb
es
jns
sub
pop
adc
popa
ja
cdq
jns
sub
pop
imul
lahf
ds
mov
fmul
js
inc
or
adc
inc
sbb
pop
call
or
outs
push
mov
xchg
mov
icebp
aam
(bad)
int3
in
hlt
sar
dec
xchg
push
push
push
fwait
loopne
xchg
and
arpl
add
xchg
push
dec
sub
cmp
cmp
jns
or
fwait
ret
jb
dec
test
neg
dec
(bad)
sbb
es
ret
pushf
xor
sub
sbb
sbb
outs
mov
mov
pop
xchg
add
rcl
fs
xchg
dec
js
mov
mov
cmp
sub
xchg
cdq
dec
cmps
sbb
loopne
cmp
push
mov
pusha
xor
or
outs
mov
mov
psubb
js
cmp
repz
adc
jle
cwde
scas
sbb
dec
fimul
(bad)
dec
mov
inc
mov
js
and
hlt
push
js
dec
jle
lahf
lahf
not
sbb
add
push
push
ror
sub
cli
dec
inc
std
and
add
les
jg
xor
out
cmp
cli
xor
xchg
neg
jg
fwait
jbe
ins
or
xchg
ret
