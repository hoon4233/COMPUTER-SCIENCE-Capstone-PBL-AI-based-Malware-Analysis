add
push
fmul
xor
test
mov
daa
clc
push
jno
jns
jae
mov
jo
int3
sub
mov
and
fcomp
retf
inc
fdivr
jae
repz
jp
clc
cwde
pop
adc
test
add
stc
retf
pop
sysret
clc
pop
inc
imul
mov
cmp
stc
dec
rcr
inc
movs
and
xchg
stos
push
cld
fnstcw
jae
stc
lock
and
mov
repz
mov
xor
dec
push
jae
(bad)
fwait
loop
xor
and
mov
and
jbe
ss
mov
outs
dec
retf
sub
xor
jp
jl
(bad)
xor
fdiv
jno
push
aas
and
cdq
xchg
(bad)
cdq
cmp
push
add
and
xor
push
jbe
lock
pop
bound
push
adc
cdq
xchg
mov
inc
ins
cmp
mov
test
fdiv
jbe
jg
test
fsubr
and
xor
fdiv
or
cmp
jmp
mov
xor
repz
cmp
and
push
jle
sub
sbb
sbb
call
xchg
push
mov
test
arpl
test
lock
jg
icebp
xor
push
cmp
mov
jb
jg
icebp
add
xor
dec
hlt
cwde
lods
das
mov
and
retf
stc
lock
jp
jbe
retf
xlat
jp
jae
jno
and
jb
mov
pop
pop
jae
jg
ret
sahf
jp
jae
jp
jnp
inc
dec
jae
stc
lock
mov
xor
fcom
inc
pop
mov
xor
mov
jae
mov
test
fcom
mov
fadd
xor
sub
and
dec
lock
fmul
xor
fnstsw
jae
xchg
xchg
pop
ins
cmp
xlat
test
sub
jae
xchg
jecxz
jge
xor
fsubr
mov
outs
ins
cmp
inc
push
jae
push
mov
jae
xchg
and
mov
in
dec
clc
sbb
jg
jp
stos
lock
mov
fcom
xor
fcom
sbb
sahf
jp
push
ins
cmp
cld
retf
xor
dec
jae
test
pop
ins
cmp
jmp
test
push
ins
cmp
stc
outs
test
fcom
mov
les
cli
xchg
xchg
add
adc
jp
jae
jp
cli
cmp
and
fnstsw
or
jp
and
or
cli
and
int3
cli
sbb
xor
fcom
aaa
sbb
adc
fdivr
repz
movs
xor
xchg
fadd
jp
mov
or
cwde
mov
int3
test
repz
outs
test
cli
sbb
xor
pop
mov
jnp
jnp
(bad)
pop
add
push
or
rol
mov
pop
jecxz
cmp
pop
dec
int3
shl
fs
sar
pop
mov
xor
test
add
retf
repz
xor
sub
retf
mov
add
and
mov
repz
xor
and
push
and
scas
repz
jb
repz
cdq
and
fs
adc
jae
jp
jae
jp
jae
(bad)
test
jp
cli
sbb
ret
aaa
mov
xor
sub
xor
xchg
jne
test
test
mov
retf
push
int3
test
xor
dec
jae
repz
jp
jp
push
xor
xchg
sub
push
fcmovnb
ss
jp
jg
add
push
aas
sar
dec
hlt
xor
repz
mov
daa
lock
mov
push
js
sbb
test
and
cmp
out
xor
push
mov
add
push
les
sub
fadd
enter
xor
push
mov
xor
fdivr
test
jno
mov
xchg
xor
and
int3
cli
sbb
mov
and
shl
in
mov
inc
(bad)
sahf
jp
push
sub
push
and
fistp
pop
pop
enter
sbb
jbe
into
jbe
in
test
xor
int3
jb
icebp
popa
jnp
les
jno
les
dec
in
inc
jo
aas
enter
cld
mov
int
cdq
xchg
and
sar
push
sub
xor
cdq
sbb
push
mov
(bad)
cli
pop
cmp
retf
xor
jae
or
and
jno
push
mov
mov
fnstsw
mov
aas
int3
add
retf
mov
jp
sub
push
lahf
mov
jnp
fwait
out
push
xor
(bad)
sub
clc
test
mov
retf
sbb
swapgs
pop
xchg
lea
repz
repz
mov
push
xor
icebp
jno
push
mov
mov
fnstsw
mov
mov
xor
cwde
jmp
pop
sub
popa
jnp
outs
push
sti
dec
jg
jae
test
add
fdivrp
pop
xchg
lea
repz
repz
cli
add
les
and
xor
and
popa
cli
cmp
addr16
(bad)
lock
repz
mov
fdivr
movs
jp
clc
mov
sbb
push
mov
xor
push
stos
ins
cli
push
stc
not
push
outs
add
push
aas
cmp
fsub
sub
and
mov
repz
mov
bound
daa
cmp
dec
mov
jp
test
repz
in
mov
push
xor
inc
jae
icebp
dec
jnp
test
mov
mov
mov
mov
lock
sbb
mov
into
jbe
push
aas
cmp
fsub
clc
cdq
xchg
and
popa
cli
cmp
addr16
push
daa
and
and
jae
test
pop
push
xchg
sub
cdq
jb
int
inc
mov
shl
addr16
in
(bad)
xor
imul
push
aam
cdq
xchg
and
sub
and
mov
repz
mov
std
ja
sub
mov
cmp
sahf
jp
push
rcl
push
sahf
jp
fwait
pop
xchg
mov
enter
jae
mov
aad
fsubr
add
test
and
enter
fsub
test
lock
sub
cmp
bound
daa
cmp
pop
pop
movaps
sbb
push
aam
pop
pop
fdivr
mov
jp
jae
test
jae
sub
test
jp
ins
test
xor
and
int3
cli
sbb
sub
and
mov
shl
mov
bound
(bad)
int3
push
ds
fs
jno
fmul
mov
rcr
fld
clc
les
xor
sub
jne
xor
sub
repz
fiadd
addr16
imul
and
popa
cli
cmp
fcom
sub
clc
test
cmp
fdivr
adc
sbb
jae
jp
test
jp
(bad)
cdq
mov
fwait
jbe
xor
inc
jae
repz
sub
repz
sbb
out
jl
mov
hlt
push
mov
ret
cmp
adc
cdq
mov
or
push
mov
cmp
sbb
jno
aad
inc
inc
push
mov
sar
test
clc
int3
test
data16
jae
mov
xor
in
mov
hlt
cli
cdq
call
pushf
xchg
cmp
and
mov
mov
mov
mul
push
lahf
mov
jnp
fwait
cmp
xor
(bad)
sub
enter
pop
push
mov
mov
mov
test
test
mov
movs
into
jbe
(bad)
dec
(bad)
sahf
jp
shl
mov
jp
clc
cdq
jbe
or
xor
add
xlat
cli
pop
mov
div
loope
xchg
xor
jp
imul
xor
sub
cli
add
in
cli
pop
stc
adc
jg
xor
mov
retf
jae
div
and
(bad)
push
or
mov
pop
cmp
(bad)
pop
fwait
retf
lea
sub
sbb
sbb
mov
jp
push
sar
adc
jg
xor
xor
repz
jb
repz
pop
test
jae
div
mov
jno
push
cmp
and
retf
and
repz
pop
pop
shl
pop
jb
jp
push
and
idiv
jnp
jae
pop
int3
jae
inc
dec
(bad)
sahf
jp
mov
jp
pop
pop
mov
retf
jbe
into
jbe
push
aas
ror
xor
or
lock
push
xor
jp
punpckhbw
xor
cdq
cmp
mov
fcomp
xor
push
mov
push
mov
call
cdq
xchg
xchg
punpckhbw
xor
cdq
mov
call
fdivr
jae
fistp
ja
icebp
or
sti
fnstsw
repz
jp
punpcklwd
inc
fnstenv
mov
aad
fdiv
jno
mov
or
enter
fdivr
and
push
jmp
fild
scas
jp
(bad)
pop
cmps
retf
lea
sub
and
retf
in
jp
jae
aas
enter
and
test
jae
icebp
jno
in
call
ss
and
(bad)
xlat
cli
pop
scas
retf
lea
repz
loope
xchg
xor
jp
js
out
xor
sub
mov
inc
jno
sar
sbb
fnstenv
fdiv
in
test
repz
and
sub
stc
fdivr
sub
int3
test
push
push
xor
push
mov
mov
pop
enter
cmp
loopne
xor
xor
fdiv
push
int
jno
fnstsw
jae
mov
mov
bsr
and
inc
adc
cmp
cwde
jns
dec
call
push
xor
mov
jb
aaa
fistp
sbb
jae
sub
fdivr
lock
lea
inc
fdivr
jbe
fdiv
fcom
cmp
push
and
mov
cmp
test
xchg
daa
jl
xor
mov
aas
mov
ss
repz
xchg
sub
push
xor
(bad)
cwde
into
icebp
jno
push
jle
dec
in
xor
pop
xor
mov
dec
int3
cli
sbb
ss
or
jne
dec
and
xor
mov
test
mov
lods
xor
xchg
cmp
push
xor
mov
pop
ja
jp
jae
jp
jae
adc
mov
xor
cdq
sbb
jp
jae
xchg
inc
sbb
jp
ss
cmc
lock
je
loopne
xor
and
idiv
lea
retf
push
aam
inc
mov
pop
jae
adc
cdq
mov
adc
xchg
sahf
jp
push
and
nop
sbb
jp
pushf
les
jae
bswap
fwait
out
xor
and
pop
das
mov
jno
xchg
push
push
fdivr
and
cmp
push
xor
push
mov
repnz
test
mov
adc
xchg
sahf
jp
fdiv
mov
lea
div
and
iret
mov
and
jnp
jp
stos
frstor
fadd
adc
clc
mov
test
mov
iret
clc
mov
test
mov
mov
sar
or
jg
xor
test
mov
cmps
outs
xor
push
call
mov
test
fnstenv
mov
or
mov
mov
push
ja
fistp
jp
(bad)
pop
cmps
retf
lea
sub
cmp
pop
call
and
jae
jp
cli
cdq
xchg
jnp
jp
stos
frstor
hlt
mov
test
fnstenv
mov
or
mov
mov
jl
jge
jae
adc
jp
(bad)
sbb
retf
addr16
mov
stc
lock
mov
retf
lea
icebp
mov
and
jae
xchg
lods
add
jp
mul
retf
fld
clc
in
arpl
push
aas
enter
mov
fstp
adc
and
ss
cli
mov
sar
xchg
je
jp
jb
and
xor
div
and
ret
mov
stc
lock
mov
retf
lea
ret
fdivr
nop
push
call
mov
int
shl
retf
dec
and
add
jp
les
retf
lea
cmp
xchg
lea
sub
cmp
xchg
or
pop
mov
xchg
sub
push
stc
or
push
push
jb
jp
stos
frstor
pop
cmps
cmp
xor
mov
jne
xor
ret
stc
lock
test
jae
push
adc
fst
cli
xchg
sahf
jp
into
and
inc
test
test
mov
jp
jns
inc
jae
jp
jb
mov
rcr
test
lock
mov
jp
pop
sti
adc
jae
(bad)
leave
mov
test
in
mov
mov
cmp
test
test
repz
retf
jp
jae
jnp
fidivr
xor
mov
jne
xor
ret
stc
lock
test
jae
push
adc
fst
lea
and
fild
rol
mov
jp
jns
inc
jae
jp
jb
(bad)
xor
adc
jp
mov
sbb
mov
jp
pop
sti
adc
jae
(bad)
leave
mov
test
jno
retf
mov
cmp
test
test
repz
retf
jp
jae
jnp
out
cmp
mov
jne
xor
ror
retf
jae
push
ds
into
retf
lea
jnp
jae
ret
fdivr
nop
push
call
mov
pop
lock
xor
mov
jne
xor
ror
retf
jae
push
ds
into
retf
lea
jnp
jae
adc
jae
sub
and
retf
mov
jp
aaa
mov
pop
retf
xor
popa
xchg
lea
sub
retf
lock
mov
jp
push
rcl
sbb
leave
mov
test
sub
cmp
test
test
repz
retf
jp
jae
mov
add
xor
push
dec
mov
test
or
test
xor
jnp
daa
jl
xor
mov
mov
repnz
test
mov
xchg
cs
jp
stos
sub
retf
mov
retf
icebp
mov
and
and
repz
aad
cmp
sub
xor
push
dec
pop
mov
mov
cli
cdq
xchg
mov
pop
enter
mov
jp
(bad)
or
in
jb
repz
jns
retf
lea
jp
into
fs
mov
jne
aad
jp
repnz
push
cmp
sbb
idiv
mov
jp
div
mov
jp
jae
jmp
pop
fcmove
lea
sub
mov
mov
or
xor
push
jmp
mov
test
fwait
jbe
push
jmp
in
and
jp
jae
aas
enter
mov
fdivr
(bad)
pop
stos
retf
lea
sub
mov
xor
fdiv
jno
pop
mov
cmp
ja
jp
div
mov
and
and
repz
aad
inc
pop
xor
div
and
call
clc
in
arpl
aas
enter
in
cli
pop
stc
dec
(bad)
fdiv
mov
das
mov
jae
div
and
fmul
test
push
aas
enter
mov
fistp
repnz
aas
cmp
stc
xchg
and
retf
jae
iret
int3
mov
test
cmp
pop
xchg
lea
sub
in
jp
lock
(bad)
xor
daa
jo
jp
jae
sub
fadd
out
fdivr
nop
push
(bad)
mov
mov
iret
fmul
test
mov
mov
mov
mov
enter
dec
test
mov
jp
div
test
mov
lods
mov
test
mov
retf
lock
xchg
gs
jae
mov
lea
stc
fsub
popf
lea
jp
cmp
fwait
and
and
repz
push
mov
mov
and
imul
fistp
(bad)
pop
(bad)
retf
lea
sub
cmp
pop
fmulp
lea
sub
jae
jp
cli
cdq
xchg
jae
mov
xor
push
call
pop
(bad)
retf
lea
sub
cli
cdq
xchg
mov
pop
enter
retf
jb
jp
(bad)
ins
test
mov
xchg
aad
fdivr
jae
das
pop
jae
and
jae
mov
retf
jno
icebp
mov
and
lea
div
and
inc
mov
test
retf
xor
das
fistp
mov
and
cmp
xor
jp
(bad)
push
(bad)
cwde
mov
test
jecxz
arpl
push
aas
enter
in
cli
pop
stc
dec
(bad)
fdiv
sbb
jns
retf
lea
jp
not
mov
mov
mov
xor
fdivr
and
jl
xor
stc
mov
and
jb
jp
idiv
xor
imul
retf
and
retf
and
repz
push
mov
mov
and
idiv
stc
mov
and
jae
jp
into
mov
retf
jne
mov
jp
(bad)
pop
sbb
mov
sub
(bad)
mov
retf
xlat
(bad)
mov
stc
lock
mov
retf
mov
repz
test
repz
and
mov
and
mov
imul
xor
mov
retf
(bad)
ins
test
mov
leave
mov
test
call
and
xor
pop
mov
in
cli
pop
idiv
lock
je
loopne
xor
and
test
mov
retf
mov
div
and
int3
mov
test
lea
sub
mov
jbe
ja
dec
mov
test
call
and
xor
pop
mov
in
cli
pop
stc
mov
and
arpl
jp
test
repz
and
mul
test
and
retf
and
and
lea
inc
mov
and
mov
icebp
mov
and
and
and
and
xchg
jp
mov
retf
lea
icebp
mov
and
lea
jne
test
test
lock
mov
lea
jp
je
dec
mov
test
pop
xchg
retf
lea
sub
lock
stos
retf
lea
jp
jg
jmp
mov
test
test
fs
push
jae
(bad)
xlat
cli
pop
retf
and
div
popa
scas
retf
lea
jp
jg
jmp
mov
test
test
push
(bad)
in
mov
test
test
push
(bad)
call
clc
in
test
pop
mov
mov
mov
fld
test
sub
and
mov
repz
and
mov
sahf
jp
jmp
jge
xor
fsubr
push
cli
stc
jp
jae
stc
fsub
sub
cli
mov
dec
push
xchg
push
test
mov
xchg
fdivr
sub
jp
fwait
mov
mov
xor
sub
sar
cdq
call
xor
ret
stc
or
push
scas
fistp
aas
enter
retf
cwde
stc
mov
xor
push
aas
aam
push
pop
fdiv
push
mov
add
bound
xchg
lahf
mov
xchg
mov
test
xchg
mov
jae
jp
loop
mov
fidivr
mov
mov
mov
cli
xor
adc
fcom
jmp
jp
int3
mov
sub
xor
pop
das
mov
and
in
ja
lock
fdivr
xchg
push
aas
enter
xor
push
stc
adc
cmp
pop
mov
mov
(bad)
in
jae
stc
adc
cmp
pop
pop
cmp
pushf
jp
mov
xchg
test
jae
repz
jb
repz
mov
lods
xor
jle
jae
repz
inc
cmp
push
je
popf
jp
mov
test
jp
mov
jp
jl
or
jae
test
test
pop
ja
in
popf
jp
call
inc
(bad)
sahf
jp
mov
inc
adc
dec
mov
je
cdq
mov
jae
inc
ss
cli
cmp
cmp
sub
pop
push
ss
mov
xor
xor
test
xchg
lahf
inc
cmp
fld
xor
xchg
xor
repz
pop
adc
cmc
call
or
popf
jp
mov
jp
mov
push
xor
mov
imul
arpl
inc
aaa
jae
sti
fld
jp
repz
xor
push
xor
xor
int3
jmp
and
ja
jge
mov
imul
fadd
mov
jp
xchg
push
aas
(bad)
cli
sbb
cmp
xor
mov
imul
jnp
jge
mov
xchg
ss
sti
cmc
scas
mov
bound
xor
xor
pushf
fidiv
xor
mov
imul
jb
jge
mov
(bad)
ss
repz
pop
adc
cmc
repz
xor
jnp
jbe
out
jae
jp
jae
into
retf
mov
imul
jno
jge
mov
jmp
jae
sti
lds
cli
jp
repz
xor
js
jbe
jecxz
jae
jp
jae
repnz
test
pop
push
inc
stos
xor
sti
(bad)
shl
xor
cmp
jb
jp
shl
out
jae
jg
in
popf
jp
mov
pop
ja
in
popf
jp
call
test
jno
jg
in
popf
jp
mov
cwde
jecxz
jae
jg
jecxz
jp
mov
jp
shl
out
jae
jg
in
popf
jp
ret
xor
(bad)
xor
stc
xor
cmp
xor
repz
inc
adc
cmc
lock
xor
jns
(bad)
fdivr
inc
sbb
call
jle
in
jae
sti
lds
sub
mov
xor
jne
jbe
fidiv
aad
dec
daa
pop
cmp
fild
jbe
loope
xor
fadd
jne
adc
jae
inc
retf
push
pop
mov
cmp
cmp
aaa
inc
retf
jbe
into
jbe
aaa
dec
xchg
lahf
inc
cmp
fld
xor
xchg
adc
sti
cmc
dec
repz
repz
xor
cmp
arpl
mov
xor
adc
aad
cdq
xchg
mov
(bad)
sahf
jp
jbe
in
jae
jne
mov
jp
cli
sub
mov
xor
repz
inc
adc
cmc
jl
jg
rcr
jp
sti
cdq
lea
(bad)
xchg
xor
stc
aam
push
aas
ret
aas
ret
dec
sbb
xor
sar
mov
fdivr
push
sub
inc
jne
jg
jecxz
jp
mov
sub
cmc
jl
aas
ret
dec
pop
jp
jae
jno
aaa
inc
cmp
fnstenv
xor
stc
or
inc
cmp
test
jp
aas
pop
pop
ret
cmp
jbe
jmp
mov
cli
cmp
cmp
push
mov
mov
call
jae
int3
xor
cmp
mov
test
(bad)
repz
stc
xor
cmp
pop
pop
cmp
pushf
jp
cwde
(bad)
repz
pushf
jp
jae
jle
dec
inc
cmp
fnstenv
xor
fstp
pushf
jp
jbe
jmp
or
xor
pop
pop
cmp
pushf
jp
cwde
(bad)
repz
pushf
jp
jae
jle
fstp
xor
fnstenv
xor
fisttp
popf
jp
jbe
jmp
test
jbe
push
mov
xor
dec
hlt
xor
jbe
fcomp
repz
push
mov
popa
cli
cmp
bound
daa
cmp
pop
icebp
jp
mov
push
xor
adc
les
adc
leave
sahf
jp
fwait
push
and
xchg
xor
repz
test
repz
push
mov
xor
xor
imul
and
popf
jp
dec
data16
(bad)
shr
jp
cmp
xor
xor
imul
add
popf
jp
sub
xor
imul
ins
rcr
cmp
mov
shl
xor
addr16
int
mov
int3
sub
and
(bad)
sahf
jp
mul
xor
cdq
shl
es
xor
mov
xor
push
mov
mov
xor
ss
jno
sbb
shl
jp
lock
or
(bad)
fadd
xor
mov
push
jae
stc
push
cmps
fdivr
xor
sbb
call
(bad)
(bad)
mov
fdiv
jno
and
(bad)
sahf
jp
ss
js
jae
repz
inc
add
div
jp
push
fs
push
pusha
test
fmul
fs
jp
jae
aas
shl
and
out
popf
jp
stos
in
mov
test
mov
mov
jae
jp
ja
jl
push
cmp
mov
push
js
jno
mov
xor
jae
jg
(bad)
sahf
jp
jae
sete
fcom
xor
fcom
xor
jp
repnz
push
inc
jae
test
xor
push
fadd
xor
cdq
xchg
mov
sub
data16
jne
push
aas
rcr
fdivr
nop
push
aas
lods
cli
pop
and
popa
cli
cmp
fsubr
aas
enter
cs
cdq
xchg
es
jno
push
aas
(bad)
clc
xchg
push
ds
push
xchg
dec
out
mov
xor
fcom
xor
(bad)
cdq
xchg
mov
aas
shl
test
push
aam
and
cmp
cdq
mov
jns
aas
enter
idiv
mov
shl
gs
(bad)
repz
inc
and
repz
push
xor
test
mov
retf
data16
in
jae
daa
mul
push
lahf
mov
shr
bound
(bad)
clc
xor
jae
test
(bad)
or
jne
aaa
jmp
or
jne
aaa
jmp
or
jne
aaa
jmp
or
jne
aaa
jmp
or
jo
jae
icebp
jno
push
ds
jbe
outs
or
enter
and
lds
jg
iret
sahf
jp
(bad)
or
jae
jp
mov
inc
idiv
xor
fdiv
into
lock
(bad)
or
mov
aaa
jl
outs
and
cvtps2pd
and
fdiv
int3
xor
xchg
xor
fmul
push
push
retf
sbb
mov
fsubr
fmul
cmp
push
retf
sbb
outs
mov
xor
sub
es
push
aas
int3
lock
mov
pusha
fnstcw
lock
mov
xor
mov
arpl
aaa
jbe
xor
push
outs
xor
jp
cwde
cld
jne
and
hlt
addr16
inc
xor
test
mov
and
inc
and
xor
cli
or
punpcklbw
and
mov
fidivr
cmp
mov
fdivrp
or
pcmpeqb
and
fdiv
inc
xor
dec
mov
jl
jle
dec
mov
es
bound
jae
jno
mov
xor
loopne
adc
retf
jo
push
daa
in
mov
fdivr
hlt
je
jle
jb
jp
repz
ss
mov
inc
xor
es
repz
ss
(bad)
repz
lock
mov
fidivr
xor
fdiv
ja
inc
fdiv
jp
je
xchg
xor
fmul
sbb
adc
mov
pusha
fnstcw
lock
mov
fdiv
jno
push
aas
and
cwde
jns
jb
stc
fdiv
das
int3
cli
enter
fdivr
dec
loop
inc
and
jl
loopne
xor
lock
mov
fidivr
dec
push
xor
fisttp
pop
cli
and
fdiv
int3
xor
inc
inc
jge
test
fmul
xor
jp
jae
(bad)
fdivr
jp
clc
mov
daa
iret
jg
mov
xor
fsubr
jae
jp
repnz
jae
jne
les
test
sub
and
mov
repz
xor
and
push
jb
outs
in
test
je
inc
or
jae
repnz
(bad)
xchg
aaa
jae
or
xor
xor
xor
in
inc
stos
xor
stc
bnd
jg
(bad)
sahf
jp
lds
icebp
or
jmp
jae
mov
fs
dec
mov
mov
cmp
push
sub
jp
jae
pop
or
cld
stc
push
(bad)
fcom
jno
push
outs
xor
enter
and
xor
pushf
jp
and
fcomp
push
jle
(bad)
cwde
gs
mov
xor
mov
mov
sar
fs
arpl
addr16
pushf
jp
mov
or
sbb
xor
fdiv
jno
sbb
call
int3
cli
int3
test
pop
push
test
jbe
stos
mov
fdiv
jno
sbb
cli
fadd
jae
jp
and
sbb
outs
ins
iret
sahf
jp
pop
and
imul
lahf
mov
stc
jp
fwait
repnz
(bad)
sub
fiadd
xlat
lods
and
xor
loope
xor
pop
or
mov
cdq
jmp
and
imul
xchg
retf
mov
stc
xor
push
(bad)
xlat
lods
and
xor
xchg
retf
mov
adc
xor
test
mov
aas
movs
retf
mov
push
daa
jl
inc
pushf
and
mov
fdivr
jno
and
lds
fisttp
test
sbb
jne
jg
inc
mov
fsubr
fdivr
jp
clc
dec
shr
mov
repz
mov
jne
ror
mov
sbb
fs
xor
sub
xchg
fdivp
mov
mov
outs
fs
xor
dec
fsubrp
mov
repz
jmp
jae
inc
pushf
and
(bad)
pushf
and
or
shl
jne
and
fisttp
mov
mov
mov
and
cmp
sar
scas
ja
jp
lds
fisttp
outs
and
inc
cmp
dec
scas
jmp
and
xor
popa
cdq
jmp
and
test
int
and
mov
add
xor
icebp
mov
cli
btc
gs
jg
jae
jp
imul
xchg
retf
mov
test
push
mov
and
fsubr
fdivr
xor
sbb
ret
pushf
ss
push
test
pop
jp
jae
inc
test
add
add
ins
jae
test
pop
push
xchg
fisttp
jp
sbb
test
and
fcomp
movs
retf
mov
into
mov
stc
lock
aas
enter
push
lock
jmp
movs
retf
mov
cmp
cdq
fidivr
enter
mov
fadd
into
and
retf
mov
jp
jae
or
repnz
cmp
add
xor
fdivr
neg
mov
xor
mov
push
jae
xor
and
enter
retf
mov
test
jae
jnp
clc
pop
imul
mov
push
retf
mov
jp
div
xchg
retf
mov
cld
imul
iret
in
lods
and
xor
pushf
jns
jae
int3
mov
mov
js
addr16
pop
movs
xor
repz
lock
fisttp
xchg
retf
mov
mov
ss
xchg
data16
retf
mov
rcr
in
mov
js
xchg
fidivr
(bad)
fnsave
mov
xor
fisttp
or
xor
cli
mov
test
cmp
(bad)
sub
xchg
lods
and
xor
jp
cli
dec
out
mov
stc
test
js
test
push
call
inc
movs
retf
mov
sub
repz
add
jmp
test
jo
repz
add
jmp
and
mov
add
jmp
and
sub
pop
ret
and
retf
mov
retf
mov
arpl
icebp
mov
add
jmp
and
ja
pop
mov
mov
add
jmp
and
mov
test
jl
sbb
icebp
mov
mov
jbe
clc
dec
ret
and
cmp
jp
out
movs
retf
mov
loope
jbe
into
jbe
ror
mov
mov
js
inc
movs
retf
mov
mul
lods
and
mov
out
xchg
retf
mov
outs
adc
pushf
jp
out
xchg
retf
mov
fsubr
mov
cli
pop
retf
and
jl
sbb
jnp
jne
dec
fnstsw
clc
pop
mov
mov
jne
jae
xchg
xor
fmul
cmp
mov
inc
xor
jb
jp
imul
xchg
retf
mov
xor
jp
lock
idiv
movs
retf
mov
call
lock
jmp
and
(bad)
cmp
jl
in
inc
pop
push
mov
jae
fs
repz
inc
addr16
mov
jae
jo
sbb
repz
inc
jp
xchg
stc
mov
push
xor
jne
out
movs
retf
mov
outs
nop
test
jg
retf
mov
jne
jne
xchg
xor
fmul
and
fmul
jae
jp
fwait
and
jo
fdiv
mov
add
ret
cwde
shl
mov
xor
(bad)
stc
retf
repnz
out
shr
xlat
xchg
lods
and
xchg
lods
and
mov
mov
xor
loopne
xor
push
hlt
cli
or
jp
jae
cvtpi2ps
loopne
aaa
jae
jp
push
enter
fdivr
jae
(bad)
repz
xor
jp
pop
fistp
mov
add
xchg
repz
jne
imul
xchg
retf
mov
retf
mov
jmp
and
mov
sar
mov
test
mov
sub
mov
mov
js
stos
sbb
js
ds
mov
xor
retf
mov
and
mov
sti
mov
fdivr
add
xor
repnz
mov
pushf
and
(bad)
pushf
and
or
shl
jne
pop
daa
test
sub
and
mov
repz
xor
and
sbb
int3
mov
stos
adc
test
jp
and
push
cmp
add
popa
cmp
int
xor
das
fidiv
jae
test
sahf
jp
jl
jp
cmp
mov
sahf
jp
je
jp
cmp
adc
jbe
repnz
sub
and
sub
gs
jns
lds
sahf
inc
jne
aas
retf
ja
jo
sub
push
sub
xchg
fs
sub
fmul
cld
cli
cdq
xor
sub
rcr
jp
stc
fbstp
sub
or
cld
fdivr
repz
test
dec
sbb
xor
mov
repz
repz
mov
int3
ja
stc
mov
int3
xor
jnp
lds
cwde
xor
es
jns
xor
aad
int3
xor
jnp
lds
mov
xor
and
inc
ja
aas
retf
jo
int3
ja
stc
mov
mov
fdivr
ja
aas
retf
ja
aas
int3
cli
push
push
idiv
mov
ret
jae
jp
jns
cmp
and
sub
push
sub
icebp
pop
shl
mov
xchg
and
and
jns
aas
shl
shl
ss
div
repz
mov
int3
aaa
dec
pop
jp
jae
jle
and
lds
mov
es
lahf
and
jb
test
rcr
retf
mov
xor
sub
neg
and
jae
adc
mov
mov
dec
fnstsw
mov
fistp
inc
or
test
jnp
cwde
fidiv
fsqrt
add
xlat
cli
cdq
cmp
pop
das
mov
jae
xchg
dec
and
jp
and
pop
sbb
(bad)
nop
fdivr
retf
cmc
daa
xor
sub
retf
mov
mov
push
aam
mov
cmp
retf
and
bound
div
and
lock
mov
mov
and
mov
repz
mov
hlt
sti
ret
(bad)
xor
fcom
xor
test
mov
fsub
shl
xor
and
test
jae
jp
repz
sbb
adc
fist
xor
fdivr
retf
push
aam
inc
and
jp
mov
test
push
(bad)
jg
push
xor
cdq
jbe
push
fmul
cwde
mov
repz
push
mov
ins
and
jp
mov
mov
fsub
xor
cdq
xchg
cmp
jno
push
mov
cmp
jb
ss
jno
aaa
jl
ss
jno
and
les
and
enter
data16
sub
inc
lea
clc
cdq
xchg
jne
xchg
sti
sbb
jp
sub
push
lahf
mov
shr
bound
sti
pop
jmp
and
repz
adc
mov
pop
jae
jp
jae
test
xor
gs
repz
fist
fs
cmp
(bad)
sar
cdq
cmp
mov
bound
push
aas
cmp
sbb
cli
or
bswap
cli
pop
adc
mov
cmp
fcom
xor
cdq
xchg
adc
xchg
sahf
jp
fwait
and
xor
mov
mov
ss
jno
push
mov
xor
and
mov
repz
mov
int3
push
and
add
mov
xor
fcom
xor
fcom
xor
fdivr
mov
(bad)
fwait
cli
sub
push
mov
xor
xchg
or
and
sar
cdq
cmp
mov
bound
mov
mov
push
int3
test
mov
bound
in
mov
int3
inc
and
repz
mov
es
lahf
and
mov
cmp
aas
enter
xor
pop
repz
(bad)
ja
jnp
xor
pop
cmp
sub
jno
push
mov
enter
cmp
popf
call
fcom
setae
jp
lock
test
imul
sbb
call
fdivr
lock
inc
imul
jno
dec
loop
inc
ja
jle
pop
fwait
inc
dec
jg
mov
jb
repz
(bad)
xchg
sahf
jp
adc
jb
sub
push
lahf
and
icebp
inc
jg
aas
enter
sbb
cmp
cmp
xor
jmp
cwde
iret
jne
ja
sub
cmp
(bad)
sub
pop
mov
inc
call
and
fdivr
clc
cdq
xchg
and
popa
cli
cmp
fcom
sub
enter
popa
push
mov
push
mov
cwde
xor
jae
pop
fdiv
pop
shl
pop
(bad)
(bad)
jmp
ret
aaa
jae
jp
(bad)
push
mov
mov
int3
jnp
jne
mov
mov
xor
bnd
aaa
push
mov
mov
xor
aas
repz
push
mov
cmp
cwde
jg
lock
xor
mov
wrmsr
lock
ss
cmp
pop
mov
cli
dec
mov
ud0
cdq
jbe
les
pop
repnz
mov
jae
jne
and
aaa
(bad)
jno
pop
pop
retf
jle
push
xor
mov
and
push
and
movs
push
mov
mov
jae
das
cmp
imul
mov
pop
jb
jp
les
jnp
xchg
push
aaa
fdivr
adc
jno
ror
jns
sub
jno
push
aas
cmp
xor
mov
les
int
xchg
rcl
div
sahf
mov
push
je
jae
aas
cmp
cmp
mov
les
aas
sar
cdq
sahf
imul
jmp
pushf
jp
enter
jae
ret
cmp
and
movs
jecxz
push
sbb
dec
jmp
dec
cmp
dec
jmp
dec
jmp
dec
inc
in
jecxz
jmp
dec
ret
sahf
jp
enter
jae
ret
fisub
dec
movs
neg
movs
jecxz
push
sub
dec
jmp
dec
stc
hlt
ja
jmp
dec
psubusb
dec
jmp
dec
sbb
retf
mov
jmp
fdivr
jae
jmp
loopne
xor
icebp
in
xor
jmp
push
xor
jecxz
jmp
in
imul
in
movs
jecxz
jmp
pop
mov
mov
fsubr
movs
jecxz
mov
jecxz
jmp
mov
test
pushf
jp
std
pushf
jp
pop
and
in
sahf
jp
pusha
imul
dec
ret
pushf
jp
sbb
jmp
dec
jmp
dec
push
data16
jmp
dec
repz
jecxz
jmp
dec
dec
out
dec
jmp
dec
repz
jecxz
jmp
dec
jmp
jecxz
jmp
dec
les
and
movs
jecxz
jnp
jecxz
jmp
dec
ret
sahf
jp
lock
movs
jecxz
push
data16
jmp
dec
repz
jecxz
jmp
dec
dec
out
dec
jmp
dec
repz
jecxz
jmp
dec
jmp
jecxz
jmp
dec
(bad)
fisub
dec
movs
inc
in
jmp
dec
jmp
dec
sbb
xor
mov
mov
call
daa
cmp
cdq
jbe
cli
cdq
jbe
and
jb
icebp
jno
push
aas
fdivr
cdq
xchg
ret
push
xor
jno
push
aas
enter
jno
push
aas
call
ss
jno
mov
jp
xchg
fdivr
retf
arpl
enter
mov
jb
sub
sbb
test
sub
mov
mov
rdmsr
mov
xor
xchg
mov
fdivr
ss
retf
or
jp
je
jp
jl
das
iret
cli
and
cmp
sub
into
stc
fsub
scas
outs
or
push
stos
fisttp
cmp
xchg
sbb
fsub
fdivr
push
int3
repz
jb
cmp
(bad)
cmp
push
(bad)
sti
int3
icebp
jno
push
mov
enter
movs
jae
jp
ss
xchg
xchg
jp
jl
aas
iret
and
xor
adc
stos
fs
push
xor
jae
jl
ss
fwait
outs
xor
jae
mov
xor
sub
enter
mov
jne
test
ror
jno
xchg
inc
bnd
je
mov
and
popa
cli
cmp
fadd
sub
int
sbb
mov
in
xchg
jp
leave
sar
mov
repz
test
jnp
mov
ja
mov
push
(bad)
cli
or
mov
lock
mov
fdivr
je
mov
xor
cdq
call
and
retf
lock
mov
mov
xor
ror
dec
pushf
sbb
inc
cwde
into
sahf
jp
addr16
mov
fdiv
jecxz
push
pop
fsub
int3
dec
pushf
sbb
inc
pushf
into
sahf
jp
lods
fild
into
sahf
jp
fwait
cs
xor
mov
pop
jae
mov
jbe
fistp
fsub
xor
jns
fdivr
lock
xor
repz
aaa
ins
mov
loope
xor
push
mov
and
int3
stc
jno
fcomp
cld
into
sahf
jp
jbe
(bad)
jbe
in
enter
loopne
sahf
jp
ss
and
mov
call
arpl
int3
ja
scas
mov
fdivr
stos
popa
cmp
cdq
add
sar
fdiv
jno
xor
jns
fdiv
dec
scas
ror
retf
cli
push
jne
mov
or
or
pop
aaa
xor
push
aas
in
fwait
mov
pop
in
jl
test
mov
push
movs
push
inc
call
popf
gs
xor
mov
pop
retf
popa
cmp
add
xor
xor
jns
fdivr
lock
mov
xor
repz
aaa
ins
mov
dec
inc
xor
push
mov
and
int3
stc
jno
fcomp
cld
into
sahf
jp
jbe
(bad)
jbe
in
rol
fneni(8087
into
sahf
jp
ss
and
sub
(bad)
cli
sbb
in
jo
mov
jae
push
ss
xchg
cmps
popa
cmp
fldenv
jno
scas
mov
lock
sahf
jp
lds
outs
mov
clc
shr
cmp
movs
aaa
dec
sbb
jbe
ror
popa
pushf
or
sahf
mov
fdiv
cmp
rol
push
xor
ja
pop
fsubr
mov
xchg
push
aas
loopne
sbb
ss
mov
into
sahf
jp
fwait
push
xchg
mov
cmp
fcom
xor
ficom
xor
fcom
xor
fdivr
retf
push
aam
or
fdivr
cmp
xor
cdq
xchg
mov
sahf
fadd
xchg
jp
cli
sub
sar
cdq
stos
mov
fwait
xchg
xor
(bad)
xchg
int3
cmp
jp
mov
and
popa
cli
cmp
fsubr
jp
and
repz
sub
sar
pop
xchg
leave
mov
repz
xor
shl
fdiv
sub
inc
xor
sub
mov
fadd
aaa
push
arpl
mov
sub
repz
push
mov
into
sti
dec
test
mov
sti
ret
jp
mov
test
cmp
jp
lds
sbb
push
mov
xor
push
stos
ins
cli
push
stc
not
push
out
or
test
jnp
mov
neg
test
mov
xchg
mov
mov
mov
mov
and
xor
test
mov
sub
cmp
sub
iret
mov
test
xor
push
mov
jae
jp
jno
jp
jae
jp
jae
div
and
jl
fdiv
mov
and
(bad)
cli
sbb
(bad)
xor
sub
inc
xchg
jp
sbb
div
and
int3
into
sahf
jp
(bad)
sub
jl
fadd
retf
fwait
sub
jae
jg
(bad)
sahf
jp
sbb
movs
jbe
push
dec
lea
test
xor
pop
mov
mov
mov
mov
mov
fmul
jp
mov
push
xor
adc
lods
sahf
jp
mov
pop
test
mov
sub
jp
fwait
sar
(bad)
adc
sahf
jp
push
add
xor
fidivr
repz
xor
fdivr
lock
and
pop
das
mov
and
arpl
(bad)
repz
inc
and
repz
push
xor
sti
repz
jp
lock
and
fs
adc
jae
jp
jae
jp
jae
(bad)
test
jp
cli
sub
cli
or
bswap
cli
cdq
cmp
and
int3
and
and
and
test
jp
mov
jp
sub
and
mov
repz
dec
add
mov
repz
jp
sbb
sub
push
enter
and
cmp
jp
lock
cs
das
mov
cmp
in
cmp
push
aas
and
and
and
test
xchg
xor
jp
mov
and
shl
mov
popa
repnz
jno
mov
jno
mov
xor
fidivr
jae
jp
jae
jp
push
rol
jl
fdiv
pop
fmul
cwde
jmp
inc
imul
and
(bad)
mov
jp
jp
push
cmp
jp
inc
sbb
and
jae
test
xor
jl
fmul
xor
lahf
mov
enter
test
sbb
ss
(bad)
cmps
sbb
jae
jg
jae
(bad)
sar
cdq
mov
(bad)
cdq
xchg
jp
jae
jp
push
rol
jl
fdiv
pop
fmul
cwde
loopne
jno
mov
jae
jp
push
int3
test
xor
jl
fdiv
pop
rol
jl
fmul
cwde
vpmovzxbw
jp
xchg
push
aas
fdivr
sbb
jae
fdiv
les
mov
and
fnstsw
(bad)
pushf
repz
pop
and
repz
loope
fdivr
push
xor
jo
fsubr
fcom
adc
cdq
add
xor
pushf
xchg
or
fcom
repz
jp
jae
jp
jae
sbb
xor
xchg
xchg
xor
or
xor
sbb
xor
xchg
and
and
int3
cli
sbb
xor
push
cmp
jae
aas
enter
test
push
mov
mov
clc
jle
mov
jae
sub
mov
shl
mov
bound
(bad)
clc
xor
xchg
lock
jno
push
mov
enter
add
loopne
cmp
repnz
pop
add
mov
mov
jp
lock
mov
mov
xor
sti
jno
bound
xor
push
xor
pop
inc
or
mov
mov
loop
inc
push
push
cmp
ds
(bad)
arpl
jp
retf
adc
sub
enter
mov
xor
inc
mov
fwait
ss
push
mov
and
jae
pop
shl
jb
sub
push
int3
xchg
lock
jp
ss
test
popa
(bad)
push
mov
add
ss
pop
jae
and
popa
cli
cmp
fsub
sub
clc
xor
cli
sub
(bad)
cli
sbb
fsub
cwde
jp
cli
cdq
cmp
aam
pop
xor
ja
fdiv
jno
pop
xchg
inc
and
jp
test
ins
cmp
fmul
sub
xor
les
push
jle
xor
cmp
and
cwde
xchg
jne
push
and
dec
out
int3
retf
xor
inc
(bad)
int
or
repnz
jp
jae
xor
(bad)
mov
jns
es
jecxz
sbb
arpl
mov
movs
jbe
mov
mov
enter
and
and
mov
and
popa
cli
cmp
js
fidivr
int3
popf
jp
and
iret
adc
sub
add
stc
xchg
xchg
test
jae
(bad)
mov
test
sub
(bad)
cli
sbb
mov
and
fwait
pop
mov
mov
cmp
pop
jae
push
fisttp
call
int3
mov
test
shr
fcom
xchg
adc
jp
push
enter
fdivr
test
jae
lea
cli
pop
scas
retf
mov
icebp
mov
popa
mov
mov
mov
push
jae
jp
and
cmp
loopne
jp
cli
pop
xchg
lea
ret
fdivr
xchg
push
jmp
mov
test
sbb
jnp
jae
xchg
jne
fdiv
les
repz
cdq
jb
not
test
mov
mov
and
mov
fnstsw
mov
pop
jnp
out
clc
mov
test
mov
aam
popa
lods
sahf
jp
push
aam
lock
mov
adc
sahf
jp
(bad)
and
jno
fdivr
lock
pop
jno
fadd
ds
jp
test
imul
xchg
lea
xchg
mov
mov
xchg
jl
fdivr
jns
jp
jmp
pop
fwait
jmp
jae
jecxz
mov
test
and
inc
jmp
fsubr
xor
sbb
ins
xchg
jp
test
repz
and
xor
fdivr
jns
jp
jmp
daa
sbb
jbe
and
enter
fcom
jp
lock
inc
add
xor
imul
mov
aam
clc
aaa
fdivr
jns
jp
jmp
daa
sbb
jbe
and
enter
fcomp
sbb
sub
mov
mov
fsubr
cwde
jp
retf
xor
inc
(bad)
int
es
push
xor
jo
fadd
push
jae
jp
test
test
mov
jp
fwait
pop
ds
pop
mov
pop
popa
add
xor
pop
xchg
lea
sub
cmp
xor
jo
fdivr
lock
jo
fadd
ds
jp
test
imul
xchg
lea
xchg
pop
aaa
fdivr
mov
adc
lods
sahf
jp
(bad)
and
jo
fdivr
lock
mov
js
jp
retf
xor
inc
(bad)
int
es
pusha
mov
aam
fadd
retf
fwait
idiv
xor
pop
mov
jbe
and
enter
fsub
xor
sbb
mov
(bad)
jp
jae
(bad)
int
es
push
xor
ja
fadd
push
jae
jp
test
test
mov
jp
fwait
bound
xor
pop
mov
sbb
xchg
lods
xor
jp
fistp
jmp
jbe
push
(bad)
jmp
cmp
push
(bad)
jmp
push
mul
test
mov
fs
cmps
cmp
pop
mov
xor
gs
jae
jecxz
mov
xor
call
lea
fdivr
jmp
retf
lea
sub
xor
xor
ja
fdivr
lock
ja
fadd
ds
jp
test
imul
xchg
lea
xchg
jo
fdivr
mov
sti
ret
jp
fwait
cmp
gs
jae
jecxz
mov
xor
iret
adc
lods
sahf
jp
(bad)
and
ja
fdivr
lock
scas
jbe
fadd
ds
jp
test
imul
xchg
lea
xchg
shl
jp
mov
adc
push
enter
and
xor
sub
rcr
fsub
sahf
jp
retf
xor
inc
(bad)
int
es
pusha
mov
jmp
test
fwait
outs
cmp
pop
mov
xor
sub
mov
fsubr
jp
retf
xor
inc
(bad)
int
es
pusha
mov
aam
fadd
retf
fwait
mov
mov
xor
gs
jae
jecxz
mov
xor
call
lea
fdivr
jmp
retf
lea
sub
xor
xor
jbe
fdivr
lock
adc
sar
inc
jb
jp
(bad)
pusha
test
mov
xchg
jb
fdivr
neg
jp
mov
sti
fisubr
xchg
jp
lock
retf
mov
jp
add
and
leave
mov
dec
mov
test
push
(bad)
mov
test
mov
int3
or
or
sub
mov
jae
sar
xor
xchg
sbb
into
retf
mov
repz
sbb
arpl
popa
jp
mov
sub
xor
popa
jp
mov
sub
xor
sbb
xor
mov
mov
test
mov
jae
clc
dec
mov
test
(bad)
sub
sub
pop
jp
mov
sub
mov
fs
xchg
cmp
pop
mov
xor
gs
jae
jecxz
mov
xor
iret
adc
sahf
jp
(bad)
and
jne
fdivr
lock
mov
jo
jp
retf
xor
inc
(bad)
int
es
pusha
mov
jmp
test
fwait
(bad)
cmp
pop
mov
xor
gs
jae
jecxz
mov
xor
iret
adc
xchg
sahf
jp
(bad)
and
je
fdivr
lock
dec
jae
jp
imul
test
mov
int3
mov
test
mov
clc
pushf
lea
test
mov
xor
stc
fnstsw
clc
cdq
mov
test
mov
cli
mov
test
jae
(bad)
jg
fdivr
xor
mov
jbe
mov
jae
dec
mov
test
lock
jae
dec
mov
test
mov
mov
test
mov
test
cmp
pop
mov
retf
mov
stc
cld
mov
int
sbb
mov
cmp
jp
neg
jp
mov
leave
mov
xor
xor
(bad)
fdiv
mov
and
int3
mov
stc
lock
inc
mov
test
(bad)
sub
sub
imul
retf
and
fsubr
sbb
xchg
pushf
jp
test
repz
and
retf
mov
repz
jp
xor
gs
jae
jecxz
mov
xor
iret
adc
sahf
jp
(bad)
and
or
stc
lock
sti
or
ret
ds
jp
test
imul
xchg
lea
xchg
xchg
dec
fdivr
mov
xchg
push
jns
jp
jmp
daa
sbb
jbe
and
enter
fmul
jecxz
xor
sbb
(bad)
sub
leave
mov
(bad)
fdivr
ret
jp
mov
retf
lea
div
and
iret
int3
mov
test
fmul
cmp
pop
or
and
jl
dec
mov
adc
lods
sahf
jp
(bad)
and
or
stc
lock
xchg
or
ret
ds
jp
test
imul
xchg
lea
xchg
cmp
fdivr
mov
xchg
lock
fdivr
jns
jp
jmp
daa
sbb
movs
jbe
and
enter
fcom
sbb
xor
mov
jae
ret
ds
jp
test
imul
xchg
lea
xchg
mov
jp
mov
adc
lods
sahf
jp
(bad)
and
or
stc
lock
sbb
jae
ret
ds
jp
test
pop
fdivr
jp
retf
xor
inc
(bad)
int
push
(bad)
enter
arpl
loop
jbe
mov
mov
int3
xchg
sbb
jp
jns
jp
jmp
daa
sbb
iret
enter
fdivr
loop
xor
sbb
popf
mov
jnp
jae
ret
ds
jp
test
imul
xchg
lea
xchg
adc
fdivr
mov
xchg
call
jns
jp
jmp
daa
sbb
jbe
and
enter
fmul
sbb
(bad)
retf
xor
inc
(bad)
int
es
push
xor
or
ret
push
jae
jp
test
test
mov
jp
fwait
jle
xor
pop
mov
jbe
and
enter
fadd
loope
xor
sbb
sub
mov
mov
fcom
loope
xor
(bad)
jp
jae
(bad)
int
es
pusha
mov
aam
fadd
retf
fwait
pop
inc
xor
pop
mov
jbe
and
enter
fcomp
jp
lock
pop
loope
xor
(bad)
jp
jae
(bad)
int
es
pusha
mov
aam
fadd
retf
fwait
xchg
inc
xor
pop
mov
jbe
and
enter
fadd
xor
sbb
xor
mov
jae
ret
ds
jp
test
imul
xchg
lea
xchg
cmp
jp
mov
div
and
enter
fs
movs
jbe
mov
mov
int3
xchg
cwde
dec
fdivr
jns
jp
jmp
daa
sbb
jbe
and
enter
fdivr
sbb
xor
mov
xor
test
fwait
outs
inc
xor
pop
mov
xor
gs
jae
jecxz
mov
xor
iret
adc
xchg
sahf
jp
(bad)
and
or
stc
lock
xor
jae
ret
fdiv
jp
test
push
jae
sub
retf
adc
scas
sahf
jp
fwait
loop
xor
pop
mov
xor
gs
jae
jecxz
mov
xor
iret
adc
xchg
sahf
jp
(bad)
and
or
stc
lock
movs
jmp
(bad)
and
jae
mov
(bad)
cli
sbb
lea
jp
jmp
daa
sbb
jbe
and
enter
fmul
jb
enter
retf
xor
inc
(bad)
int
es
push
xor
(bad)
fadd
push
jae
jp
test
test
mov
jp
fwait
jp
xor
pop
mov
jbe
and
enter
fadd
out
xor
sbb
jae
jp
jno
jp
jae
jp
jae
test
xor
or
fdiv
mov
and
ss
test
fwait
push
xor
mov
mov
mov
test
mov
iret
fmul
jp
mov
retf
mov
xchg
sbb
fdivr
(bad)
and
add
repz
xchg
cli
sbb
fmul
jmp
xor
pop
xchg
retf
mov
and
popa
cli
cmp
fdiv
jp
and
daa
sbb
mov
int3
inc
and
repz
test
out
repz
movs
jp
jl
aas
retf
and
mov
and
push
jae
adc
pop
cmps
jbe
push
dec
lea
test
jp
repz
les
aas
retf
jb
aas
retf
dec
(bad)
mov
fcom
or
sahf
jp
cmp
cmp
fnstsw
repz
les
jp
test
aaa
cmps
jbe
mov
xor
pop
xchg
inc
and
mov
cld
repz
inc
and
repz
mov
fsubr
fidivr
and
push
or
shr
jae
popf
mov
mov
mov
inc
xchg
mov
icebp
jno
pop
inc
xor
xchg
(bad)
mov
and
mov
jae
repz
and
int3
cli
sbb
clc
cdq
jb
mov
mov
add
icebp
popa
jnp
cs
repz
and
fdiv
mov
and
leave
mov
xchg
js
fdivr
es
mov
dec
js
xor
lods
mov
test
mov
xchg
sbb
fdivr
imul
iret
xchg
mov
test
fs
xor
pop
or
mov
test
fimul
jae
das
cmp
push
push
leave
mov
mul
fyl2x
mov
dec
js
xor
mov
jae
cmp
ss
xor
push
jmp
arpl
xchg
mov
mov
mov
sti
add
sub
sbb
jp
sbb
jnp
jae
inc
sbb
jbe
mov
call
jae
cli
fmul
sbb
mov
ja
fwait
push
dec
xor
in
mov
xor
into
test
mov
mov
and
or
dec
xor
and
mov
(bad)
dec
xchg
mov
iret
mov
(bad)
push
xchg
mov
iret
lods
mov
test
(bad)
jl
retf
mov
test
and
(bad)
mov
stc
lock
push
jmp
mov
ja
fwait
mov
xor
in
mov
xor
jl
jbe
push
dec
lea
test
inc
xor
push
add
push
div
and
or
fcom
mov
mov
xor
aaa
mov
mov
mov
mov
sar
aaa
fdivr
retf
mov
xor
sub
retf
mov
repz
test
mov
jp
jae
mov
retf
jae
stc
mov
and
push
mov
xchg
retf
jnp
repnz
jae
div
and
fisttp
xchg
mov
retf
and
pop
pop
jae
jp
jae
dec
lea
test
xchg
and
jp
mov
(bad)
fidiv
jp
(bad)
je
retf
mov
pop
jae
sti
fucomi
les
mov
leave
mov
adc
lods
sahf
jp
push
add
xor
pop
xchg
mov
sub
mov
jp
lock
div
xchg
sbb
and
int3
cli
sbb
mov
and
call
inc
fdivr
mov
mov
aaa
jae
xchg
mov
div
lock
and
cld
jp
push
pop
sbb
add
xor
add
stc
mov
and
pop
jae
jp
fwait
mov
jae
ins
imul
push
leave
mov
repz
jnp
jae
dec
lea
test
mov
xor
jae
dec
lea
test
(bad)
retf
mov
cmp
test
test
xchg
mov
repz
jb
repz
retf
out
and
imul
fbstp
test
and
leave
mov
sub
sbb
jp
repnz
push
fsubr
hlt
out
jp
sbb
test
fwait
push
dec
xor
and
nop
mov
test
enter
clc
pop
out
mov
xchg
xor
and
int3
cli
sbb
xor
repz
xor
and
arpl
mov
repz
test
repz
push
mov
retf
push
aam
fadd
jp
mov
repz
lea
(bad)
push
dec
xor
push
mov
retf
push
int3
xchg
clc
inc
fdivr
mov
repz
test
jp
mov
repz
xchg
lods
inc
fdivr
les
xchg
test
stos
cmp
mov
fs
xchg
loopne
fdivr
mov
mov
cmp
sbb
jno
push
jl
mov
cmp
les
mov
mov
sbb
push
aam
(bad)
lock
fs
mov
jae
(bad)
imul
(bad)
cwde
jl
xor
retf
push
int3
jne
ss
jo
fnstenv
es
jo
fisubr
fcom
xor
and
int3
cli
sbb
cmp
cdq
test
les
int
test
and
mov
mov
jae
adc
jae
jp
pusha
out
jp
cli
sbb
int3
inc
and
repz
sub
enter
(bad)
cdq
and
add
add
jp
clc
cdq
sub
mov
es
lahf
mov
ret
jp
fwait
inc
dec
xor
(bad)
sub
clc
xor
cli
and
int3
cli
sbb
retf
xor
jp
repnz
dec
jae
div
and
hlt
xchg
and
jbe
xor
sbb
repz
jne
jmp
int3
cli
sbb
retf
(bad)
sbb
add
stc
lock
mov
cld
xchg
and
fs
fdivr
ret
xor
cmp
mov
cmp
retf
cli
sbb
xor
and
mul
retf
mov
mov
pop
mov
bound
aad
inc
dec
pop
lea
add
imul
mov
aam
hlt
push
ret
test
mov
jp
cli
and
sar
pop
ret
and
repz
sbb
fbstp
fiadd
mov
fs
fcom
addr16
bound
adc
cli
ret
fdivr
xchg
push
inc
lods
and
mov
jb
jp
sbb
jp
cli
add
cli
or
bswap
cli
sbb
cmp
push
jnp
and
lock
das
jmp
fsubr
fsub
jp
lock
xor
mov
add
jmp
and
repnz
sub
(bad)
cli
sbb
jp
sahf
jp
neg
call
fdivr
mov
xchg
rol
jp
jns
jp
jmp
and
sub
jbe
push
push
and
xor
pop
mov
dec
jae
xchg
mov
jp
jns
jp
jmp
sbb
jae
sbb
fsub
ret
mov
test
and
and
xor
test
jae
stc
lock
pop
jae
ret
ds
jp
test
outs
pop
cmp
(bad)
pop
jp
mov
sub
call
sbb
inc
add
xor
pop
jp
mov
sub
hlt
out
jp
lock
sub
mov
mov
fadd
xor
(bad)
jp
jae
(bad)
int
es
addr16
aam
fdiv
mov
cmp
retf
and
pop
jae
stc
lock
imul
fadd
ds
jp
test
push
fmul
jp
jae
(bad)
int
push
(bad)
xor
and
jbe
push
(bad)
xor
and
xor
pop
mov
pop
popa
add
xor
pop
jp
mov
sub
cmp
pop
jp
mov
sub
mov
sbb
shr
xor
(bad)
jp
jae
(bad)
int
es
addr16
aam
fdiv
mov
cmp
retf
and
push
jae
stc
lock
jo
xor
div
and
push
jae
stc
lock
mov
fdivr
add
jp
retf
xor
inc
(bad)
int
es
addr16
aam
fdiv
mov
cmp
retf
and
push
jae
stc
lock
jns
xor
div
and
push
jae
stc
lock
inc
push
jae
ret
ds
jp
test
push
fcom
xor
mov
(bad)
int
push
(bad)
xor
and
jbe
push
(bad)
xor
and
xor
pop
mov
jbe
push
push
and
xor
pop
mov
xor
gs
jae
jecxz
mov
xor
enter
sahf
jp
neg
call
fdivr
mov
repz
repz
push
and
xor
pop
mov
xor
gs
jae
jecxz
mov
xor
enter
sahf
jp
neg
call
fdivr
mov
adc
lods
sahf
jp
neg
call
fdivr
mov
xchg
inc
inc
fdivr
jns
jp
jmp
and
sub
jbe
push
push
and
xor
pop
mov
and
test
push
push
and
jbe
push
push
and
xor
pop
mov
xor
gs
jae
jecxz
mov
xor
enter
sahf
jp
neg
call
fdivr
mov
adc
fcomp
add
fdivr
mov
ret
fdivr
xchg
push
(bad)
fsubr
cmps
add
fadd
ds
jp
test
outs
pop
cmp
(bad)
pop
jp
mov
sub
mov
jp
lock
(bad)
in
jp
retf
xor
inc
(bad)
int
or
repz
jp
and
(bad)
xor
and
jbe
push
(bad)
xor
and
xor
pop
mov
xor
gs
jae
jecxz
mov
xor
enter
sahf
jp
neg
call
fdivr
mov
adc
scas
sahf
jp
neg
call
fdivr
mov
sti
ret
jp
fwait
call
jae
jecxz
mov
xor
enter
sahf
jp
neg
call
fdivr
mov
xchg
adc
fdivr
jns
jp
jmp
sbb
jae
sbb
fsub
ret
mov
test
and
and
xor
test
jae
stc
lock
mov
cmp
retf
and
add
fdivr
lock
jp
jae
js
jae
jp
jae
jp
and
sbb
repz
add
dec
jae
div
and
sbb
adc
popa
sub
and
aam
and
retf
mov
sbb
test
fwait
pop
push
xor
in
mov
les
test
cli
sbb
popa
cli
cmp
fdivr
fdivr
and
in
cli
and
int3
cli
sbb
xchg
out
and
mov
inc
pop
xor
push
daa
cmp
xor
sbb
icebp
popa
jnp
cs
out
mov
das
fnstsw
test
repz
daa
test
cli
sbb
fs
out
xor
xor
ror
fdiv
idiv
cli
pop
fcmove
mov
adc
fdiv
mov
and
sbb
adc
jb
jp
imul
retf
mov
pop
mov
jp
repz
ror
mov
xor
mov
xor
(bad)
and
or
push
xor
fs
data16
(bad)
sar
pop
cli
iret
mov
repz
leave
mov
sub
mov
mov
shl
jl
add
jae
adc
and
pop
fdivr
imul
retf
mov
retf
and
sbb
xchg
xchg
inc
xchg
mov
sbb
aaa
mov
mov
mov
mov
shl
pop
and
repz
ret
and
xor
fdivr
retf
jb
jp
lock
loop
mov
jp
outs
mov
test
jb
repz
jb
repz
pop
ret
and
fsub
push
call
(bad)
pop
ret
and
pop
jae
jp
push
mov
pop
jae
jp
mul
test
mov
xor
aad
cmp
dec
jnp
jae
iret
pushf
mov
test
mov
jp
retf
mov
xor
sub
retf
mov
retf
(bad)
jl
retf
mov
dec
scas
sahf
jp
mul
test
mov
mov
int3
mov
retf
jae
push
mov
rol
enter
sbb
pop
pop
jae
repz
comiss
xor
xor
xor
push
jae
cli
mov
daa
test
jb
dec
and
cmp
jb
jp
jae
jp
fwait
xchg
push
xor
mov
xor
jecxz
test
and
jp
mov
cmp
add
xor
pop
jmp
outs
test
lock
mov
jp
jl
mov
jae
div
and
test
jl
into
xor
fcom
xor
imul
mov
daa
test
and
sbb
out
and
mov
mov
test
cli
sbb
ret
retf
xor
imul
jo
fdivr
js
cmp
retf
jae
adc
scas
sahf
jp
fwait
cs
xor
pop
mov
sbb
jae
sbb
and
addr16
pop
jnp
and
iret
mov
or
retf
lock
push
push
jmp
fwait
out
sub
imul
loop
and
int3
test
repz
daa
test
cli
sbb
mov
jp
mov
out
mov
jnp
jae
div
and
sbb
mov
leave
mov
xchg
or
fdivr
mov
cmp
and
xor
pop
out
mov
and
xor
repz
xor
and
arpl
stos
out
int3
test
repz
push
mov
xor
push
aas
ror
xor
mov
sbb
mov
ins
sti
jp
retf
pop
and
mov
and
sbb
jg
xor
xchg
xor
fdivr
fwait
mov
push
aas
enter
bound
mov
jp
jae
jae
jae
repz
and
int3
cli
sbb
retf
and
fdiv
jno
mov
dec
sti
jp
and
fdiv
jno
aaa
jl
mov
cmp
pop
das
mov
jae
xchg
mov
and
mov
pop
mov
mov
xchg
push
dec
pushf
and
retf
push
aam
fcomp
jp
mov
xor
test
cmp
jp
(bad)
pop
jnp
mov
sub
push
push
xor
mov
retf
push
shl
mov
sub
retf
and
test
test
jae
push
xor
sub
repnz
push
fcom
ss
fdiv
repnz
jae
push
pop
das
mov
and
jg
add
sar
sbb
retf
xchg
pop
cli
and
int3
cli
sbb
and
pop
jne
cmp
cdq
mov
push
xor
push
aas
shl
jp
xor
jp
mov
cli
xchg
xor
xchg
and
jp
les
sub
cmp
cdq
mov
push
xor
pop
mov
fs
adc
fdivr
inc
lock
jae
lahf
sbb
fdivr
repz
jp
adc
imul
lock
dec
cld
xor
and
mov
cmp
mov
pop
jae
jg
jb
jp
jae
jp
jecxz
jp
sbb
adc
ficom
and
repnz
xor
push
mov
add
jmp
xchg
mov
test
xor
mov
bound
in
test
fwait
inc
cmp
stos
push
xor
mov
bound
in
test
repz
xor
mov
jnp
sbb
test
pop
inc
cmp
mov
jae
jnp
sbb
test
outs
dec
cmp
call
mov
pop
jb
adc
jmp
xchg
add
fdivr
jb
adc
jmp
xchg
adc
fdivr
jb
adc
jmp
xchg
and
fdivr
jb
adc
jmp
xchg
xor
fdivr
mov
cmp
in
test
inc
inc
cmp
ss
xor
mov
bound
in
test
add
fwait
push
pop
xor
mov
bound
in
test
out
cmp
push
pop
xor
mov
bound
in
test
jmp
cmp
pop
xor
push
xor
pop
das
mov
xchg
test
and
and
sar
cdq
xchg
inc
xor
jne
xor
adc
fst
pushf
jp
lods
pop
cmp
and
xor
out
pop
xor
mov
retf
inc
pop
(bad)
xor
adc
(bad)
in
popf
jp
lods
pop
cmp
and
xor
rcr
jae
add
and
in
popf
jp
pushf
cli
jp
sar
in
jae
movs
mov
fcom
enter
stos
xor
xchg
rcl
jp
(bad)
and
out
jp
mov
fsubr
je
mov
mov
fcom
enter
mov
push
fdivr
(bad)
and
in
popf
jp
aam
jp
shl
mov
fcom
enter
stos
xor
xchg
test
fdivr
(bad)
and
in
popf
jp
lock
jp
shl
jecxz
jae
movs
mov
fcom
enter
stos
xor
xchg
dec
push
fdivr
mov
cmp
pop
(bad)
xor
adc
fldcw
in
popf
jp
lods
pop
cmp
and
xor
xchg
pop
xor
xor
lahf
enter
xor
mov
fdivr
xchg
cmp
test
test
cli
sbb
fsubr
pop
xchg
mov
and
aam
jne
pop
xchg
jo
fdivr
jae
xchg
pop
push
fdivr
ss
bound
push
sbb
and
in
popf
jp
jae
icebp
jno
idiv
shl
aas
int3
pop
cdq
mov
adc
fdivr
and
aad
sahf
jp
jae
jp
fwait
repnz
xor
jg
xchg
xor
adc
jmp
adc
mov
mov
sbb
and
jp
repz
lock
jp
test
fcom
xchg
ja
cmp
fadd
xor
fadd
xor
dec
jnp
jae
aas
int3
pop
cdq
mov
and
cli
sbb
movs
jbe
mov
out
xor
adc
pop
xor
jg
xchg
xor
adc
ficom
xor
fcom
xor
fst
xor
fcom
xor
pusha
js
jae
jp
jae
jb
addr16
adc
repz
xor
inc
fsub
jne
xor
adc
adc
jmp
adc
jmp
adc
jmp
pop
mov
xor
mov
pop
test
jp
test
fcom
xchg
(bad)
cmp
fadd
xor
fadd
xor
int3
adc
jno
jp
or
jp
sbb
mov
out
xor
adc
into
pop
xor
jg
xchg
xor
adc
jmp
adc
jmp
adc
or
fidiv
fcom
sbb
fdivr
and
out
test
jp
jae
mov
cmp
popf
jp
pushf
in
push
xor
mov
retf
inc
call
jp
inc
cwde
fidiv
mov
pop
or
jp
sbb
xor
mov
pop
jae
jp
sbb
jbe
mov
out
xor
adc
inc
pop
xor
jg
stos
xor
adc
jmp
adc
jmp
adc
mov
jp
addr16
xor
mov
call
test
xor
fcom
xchg
fwait
inc
cmp
cmps
mov
pop
xor
jp
and
adc
adc
sahf
jp
jae
cmp
fwait
inc
cmp
into
pop
xor
mov
retf
inc
call
jp
inc
mov
push
xor
sbb
xor
mov
pop
jo
cli
sbb
movs
jbe
mov
out
xor
adc
ficomp
jae
cli
xchg
xor
repz
jb
repz
test
inc
inc
cmp
fadd
xor
lock
jae
inc
pop
(bad)
jp
sbb
xor
mov
xor
mov
call
test
xor
fcom
xchg
pop
inc
cmp
jmp
jp
inc
call
jp
inc
cwde
fidiv
mov
pop
dec
mov
xor
fcom
pop
jb
jp
jae
jp
sbb
mov
xor
pop
pop
xor
jg
xchg
xor
sti
ret
cmp
xor
fadd
xor
fadd
xor
int3
adc
mov
jp
sbb
jnp
jae
jp
jae
adc
sahf
jp
test
fcom
xchg
pop
jge
xor
fadd
xor
fadd
xor
int3
adc
les
jae
mov
xor
fsubr
pop
xor
cmp
push
mov
fdiv
xor
in
jecxz
jae
jp
inc
call
jp
inc
cwde
fidiv
mov
pop
mov
jp
sbb
jnp
jae
push
pop
jae
jp
sbb
mov
out
xor
adc
adc
jae
mov
jb
repz
test
inc
inc
cmp
fadd
xor
int3
adc
xchg
jnp
jae
fidiv
fcom
xor
fsubr
pop
jne
cmp
push
mov
fdivr
(bad)
jp
ror
jbe
mov
retf
inc
call
jp
inc
mov
bound
jp
sbb
xor
mov
pop
jae
cli
sbb
movs
jbe
mov
out
xor
adc
fdivr
and
jp
rcr
jbe
mov
retf
inc
call
jp
inc
mov
bound
jp
sbb
jp
jae
outs
pop
jae
cli
sbb
jae
jnp
xor
adc
fdivr
fs
jp
rol
out
je
push
sbb
and
in
popf
jp
jae
dec
push
rcr
push
pop
scas
fdivr
sbb
adc
pop
sub
cmp
frstor
ss
xchg
in
push
fdivr
pop
inc
cmp
fadd
xor
fadd
xor
les
push
sbb
jp
jae
outs
pop
jae
cli
sbb
movs
jbe
mov
out
xor
adc
fdivr
in
std
jp
sar
in
jae
jp
inc
call
jp
inc
cwde
fidiv
mov
pop
call
jne
xor
mov
pop
jae
cli
sbb
mov
in
xor
adc
mov
loop
xor
xchg
pop
mov
test
cmp
jno
push
mov
retf
sub
mov
es
lahf
mov
int3
sub
int3
xor
push
pop
xchg
inc
imul
pop
xchg
cmp
test
test
cli
sbb
fsubr
leave
(bad)
retf
mov
and
aam
jne
push
sbb
and
in
popf
jp
cmp
xor
cdq
mov
xchg
sub
sti
(bad)
fadd
xor
fsubr
and
xchg
les
mov
pop
jae
jp
repz
call
xchg
pop
cmp
fdivr
jae
ret
adc
(bad)
jo
popf
jp
jae
dec
add
popf
jp
jae
adc
clc
cdq
sbb
sub
fcom
mov
and
enter
pop
sub
cmp
push
mov
fdiv
cld
jp
rcr
in
jae
lea
fdivr
jae
dec
add
popf
jp
jae
dec
jo
popf
jp
pop
fnstsw
clc
cdq
sbb
sub
fcom
mov
gs
adc
scas
add
xor
push
mov
fmul
xor
mov
jp
jno
jp
jae
jg
jb
jp
jae
jp
iret
fidivr
sbb
adc
aam
and
push
mov
add
jmp
xchg
aam
fdivr
jae
dec
add
popf
jp
jae
dec
push
rcr
push
pop
addr16
pop
jo
cli
sbb
movs
jbe
mov
out
xor
adc
or
jae
xchg
test
inc
and
repz
jp
xor
jp
mov
xchg
test
ins
fdivr
push
push
cmp
fcom
ja
fdivr
inc
xor
jne
xor
sub
cli
or
jle
xor
test
jnp
cmp
jmp
xchg
push
addr16
pop
jae
xor
jae
test
fwait
inc
cmp
call
inc
call
jp
inc
mov
push
xor
sbb
adc
fistp
and
mov
sahf
jp
jae
inc
sub
fnstenv
retf
or
mov
retf
inc
call
jp
inc
mov
push
xor
sbb
adc
jo
cli
sbb
movs
jbe
mov
out
xor
adc
es
jg
stos
xor
xchg
pop
xchg
test
and
in
popf
jp
jae
dec
jo
popf
jp
arpl
pop
sbb
jnp
jae
jp
jae
adc
sahf
jp
test
fcom
xchg
pop
jge
xor
and
int3
cli
sbb
xor
jmp
adc
jmp
adc
mov
jp
mov
jp
sbb
jp
and
out
test
jp
jae
pop
sub
fld
popf
jp
jae
dec
add
popf
jp
jae
dec
jo
popf
jp
arpl
xchg
jae
jp
pop
mov
xor
mov
daa
test
pop
cmp
fcom
xchg
add
sbb
test
inc
inc
cmp
fadd
xor
int3
adc
gs
jae
fidiv
fcom
xor
fsubr
pop
jne
cmp
push
mov
fdivr
jp
ror
jbe
mov
retf
inc
call
jp
inc
cwde
fidiv
mov
pop
xchg
fnstsw
sbb
jp
jae
fs
jae
jp
sbb
mov
xor
push
addr16
jg
xchg
xor
adc
jmp
adc
jmp
adc
and
jae
test
fcom
sub
fdivr
and
out
test
jp
jae
jecxz
jae
fst
and
in
popf
jp
jae
dec
push
rcr
clc
xor
fcom
sbb
enter
pop
sub
cmp
frstor
ss
xchg
push
outs
fdivr
outs
dec
cmp
sbb
xor
jmp
adc
jmp
adc
hlt
adc
enter
pop
sub
cmp
frstor
ss
xchg
adc
jp
pop
inc
cmp
fadd
xor
fadd
xor
les
push
sbb
jp
and
xor
jae
jp
fwait
xor
jae
pop
stos
xor
adc
jmp
adc
jmp
adc
sbb
xor
mov
xor
sbb
jp
and
into
stos
sahf
jp
jae
iret
sub
fldcw
das
test
cli
and
int3
cli
sbb
imul
stc
fsub
sub
int3
or
adc
pop
js
jp
jae
cli
xor
fcom
aaa
sbb
adc
sbb
jp
repz
cmp
push
pusha
xor
push
mov
mov
fdivr
sbb
sub
clc
lds
cli
pop
repz
jb
repz
fdivr
push
(bad)
fdivr
xor
push
aas
les
push
aas
shl
aas
enter
and
loope
jbe
mov
xor
pop
xchg
push
shl
test
(bad)
scas
aaa
pop
jae
bswap
sbb
cs
xor
test
and
cmp
ins
pushf
retf
mov
sub
cdq
cmp
mov
mov
push
int3
adc
(bad)
sahf
jp
jb
jp
fwait
dec
fmul
mov
sub
pop
sbb
mov
sub
and
mov
repz
xor
jae
sub
shl
ins
pop
mov
pop
shr
(bad)
pop
jp
mov
sub
and
jp
cli
sub
(bad)
cli
sbb
lea
xor
sub
retf
repz
adc
neg
test
mov
mov
and
bound
mov
and
sub
fdivr
dec
mov
(bad)
sbb
retf
push
push
and
xor
pop
xchg
jg
fdivr
push
and
bound
mov
and
and
cli
dec
mov
(bad)
sbb
retf
jbe
push
push
and
xor
pop
pop
retf
jne
imul
xor
pop
jp
mov
sub
fmul
jp
repz
adc
sahf
jp
neg
test
mov
mov
mul
test
mov
mov
and
bound
mov
and
and
cli
dec
mov
(bad)
sbb
jbe
push
push
and
xor
pop
pop
retf
jns
imul
xor
pop
jp
mov
sub
xor
jp
repz
adc
neg
test
mov
mov
mov
pop
retf
jg
imul
xor
pop
jp
mov
sub
jl
jp
repz
adc
neg
test
mov
mov
and
mov
xchg
fdiv
mov
and
and
adc
fcom
jbe
sahf
jp
cmp
jp
mov
sub
cmp
sbb
retf
mov
mov
sahf
jp
xor
xor
mov
mov
shr
jp
mov
repz
test
cli
sbb
push
adc
repz
mov
xchg
and
mov
cmp
cmps
bound
push
xor
sub
jb
test
lock
mov
jb
jae
xchg
jl
fdivr
sub
fsubr
mov
jnp
jp
and
les
mov
les
fmul
ret
mov
repz
(bad)
fld
ins
xor
xor
cs
ret
cmp
jp
test
test
repz
mov
mov
jnp
bound
mov
sub
and
cli
mov
test
cmp
pop
xchg
ret
mov
sub
mov
sub
(bad)
cli
sbb
mov
test
cmp
pop
xchg
ret
mov
sub
fmul
jp
repz
mov
mov
jle
bound
mov
sub
and
cli
mov
test
cmp
pop
xchg
ret
mov
sub
or
jp
repnz
push
jae
cli
mov
test
cmp
pop
xchg
ret
mov
sub
sub
jp
repz
mov
mov
jge
bound
mov
sub
and
cli
mov
test
cmp
pop
xchg
ret
mov
sub
push
leave
jp
cli
sub
(bad)
cli
sbb
mov
test
cmp
pop
xchg
ret
mov
sub
je
jp
repz
mov
mov
jo
bound
mov
sub
and
cli
mov
test
cmp
pop
xchg
ret
mov
sub
mov
sub
sar
pop
call
popa
mov
mov
jbe
bound
mov
sub
and
cli
mov
test
cmp
pop
xchg
ret
mov
sub
loopne
jp
repz
mov
mov
je
bound
mov
sub
and
adc
jp
div
(bad)
retf
mov
mov
test
retf
mov
pop
add
sbb
jbe
xor
fmul
(bad)
fadd
or
out
push
cmp
popa
xchg
ret
mov
jp
imul
jns
jae
mov
mov
gs
in
mov
xchg
xor
xchg
shl
aam
mov
and
retf
jp
jne
lods
fidivr
call
enter
xor
pop
mov
jae
cli
mov
sar
or
fdivr
into
and
mov
fnstsw
mov
test
mov
jp
mul
retf
mov
mov
mov
mov
rol
mov
ret
xchg
push
(bad)
in
test
test
mov
test
cmc
xchg
or
fdivr
mov
popa
push
and
ret
cdq
sbb
gs
cli
sbb
retf
mov
std
jnp
fdivr
dec
mov
lsl
dec
(bad)
mov
in
xor
div
and
sub
fdivr
fiadd
dec
(bad)
mov
in
xor
div
and
and
stc
lock
pop
jae
jp
(bad)
pop
xchg
mov
sub
push
sub
sar
pop
scas
ret
mov
repz
pop
xchg
mov
sub
cmp
pop
xchg
mov
sub
(bad)
retf
jp
sbb
mov
enter
fs
push
ins
xor
pop
mov
retf
sub
jl
jp
(bad)
pop
xchg
mov
stc
hlt
ja
div
and
mov
and
retf
and
and
stc
lock
or
mov
pop
jb
mov
xor
div
and
test
jg
mov
xor
push
dec
(bad)
and
fsub
dec
mov
test
cmp
mov
sub
mov
sar
add
jp
(bad)
and
retf
mov
shr
and
int3
fdivr
mov
adc
mul
test
mov
mov
mov
mov
mov
pop
mov
mov
(bad)
and
mov
mov
(bad)
xor
aaa
jne
inc
in
test
test
add
sti
repnz
aad
xor
imul
retf
and
mov
and
and
stc
lock
enter
fs
push
imul
and
retf
mov
jp
into
or
retf
mov
xor
adc
push
ror
jp
test
repz
sub
mov
and
retf
and
iret
ror
jp
(bad)
pop
xchg
mov
sub
sbb
jp
(bad)
popa
xchg
mov
sub
retf
mov
xor
xchg
jl
fdivr
mul
retf
mov
int3
mov
adc
jae
jp
cmp
jp
and
and
(bad)
and
sbb
pop
mov
hlt
jl
jge
mov
test
fwait
mov
jae
mov
pop
xor
outs
xor
test
imul
das
mov
jae
xchg
test
jp
and
add
cwde
fidivr
test
fcom
xor
fnstsw
jae
outs
es
repz
xor
and
xor
and
fwait
and
jae
repz
pop
add
idiv
cdq
jb
inc
inc
cmp
fldcw
test
jae
sti
(bad)
mov
out
jae
daa
and
jae
jp
jecxz
cmp
ret
jae
dec
and
push
add
in
cli
pop
adc
jb
jp
imul
retf
mov
and
fcom
xor
jae
inc
fwait
shl
mov
and
and
sub
jp
jbe
into
jbe
aam
adc
push
push
xor
sti
imul
loopne
xor
inc
outs
xor
test
int3
sub
mov
mov
mov
lock
mov
sahf
and
retf
mov
xchg
add
ror
mov
xor
push
arpl
mov
sub
repz
push
mov
(bad)
sti
dec
inc
xchg
sahf
and
retf
mov
lock
xor
hlt
repnz
cmp
fdivr
jae
pop
and
repz
call
mov
aam
mov
dec
mov
mov
pop
mov
pop
(bad)
mov
sub
je
jp
sbb
div
and
test
xchg
push
jae
call
fwait
retf
mov
lods
popa
fdivr
idiv
retf
mov
mov
les
xor
pop
(bad)
mov
sub
mov
jp
cli
add
in
cli
pop
adc
jae
(bad)
in
xor
adc
add
xor
pushf
in
jae
out
jae
repz
inc
add
idiv
popa
sbb
mov
test
retf
xor
das
sbb
sbb
jbe
mov
xchg
xor
adc
stos
sahf
jp
add
fwait
mov
xor
push
(bad)
sbb
and
jbe
gs
fmul
in
xor
adc
add
xor
cld
jmp
fdiv
in
inc
add
idiv
popa
cwde
(bad)
cmp
(bad)
jp
jae
sbb
sbb
jbe
mov
xchg
xor
adc
stos
sahf
jp
jae
cmp
(bad)
imul
popa
(bad)
(bad)
cmp
aad
xor
das
fistp
mov
jp
jae
jle
jae
jp
jae
jp
sbb
in
jae
idiv
jae
repz
mov
pop
jae
jp
fwait
jle
xor
sbb
mov
ret
pop
iret
fisttp
jp
(bad)
push
iret
fisttp
cli
or
bswap
sbb
test
imul
cmp
adc
cdq
ret
ficom
les
push
jp
ss
jae
div
mov
mov
xor
and
(bad)
xor
je
loopne
xor
and
ret
push
mov
or
jp
sbb
div
mov
sbb
jbe
and
sbb
mov
xlat
cli
pop
into
(bad)
test
cli
pop
test
xor
cmp
div
xchg
pop
cmp
cdq
call
jge
stos
xor
repz
push
jg
push
pushf
jp
ss
xor
fdivr
jae
retf
cmp
repz
push
mov
pop
jo
jp
sbb
xchg
pushf
jl
jp
ss
jno
fdivr
jae
jp
hlt
int3
jp
cli
cdq
mov
xor
aas
repz
xor
(bad)
(bad)
aaa
jae
jp
sbb
jae
mov
xor
push
mov
mov
add
jp
sbb
test
inc
inc
cmp
fcom
xor
fcom
xor
fcom
xor
fdivr
jae
fwait
out
xor
adc
test
jp
jae
lahf
cmp
fnstenv
popf
jp
mov
pop
xor
mov
test
fcom
xor
fcom
pop
jae
pusha
xchg
aaa
cmp
inc
xor
fdivr
inc
pop
mov
in
xor
xchg
sar
pop
or
xor
cmp
repz
xor
inc
jae
xchg
test
fdivr
jb
test
mov
(bad)
fimul
repz
pop
add
idiv
pop
ret
and
mov
mov
pop
or
xor
mov
jbe
mov
xor
pop
xchg
mov
mov
jae
push
(bad)
adc
push
jg
(bad)
sahf
jp
jae
jp
push
je
retf
repnz
bound
fdiv
mov
xor
pop
jae
mov
xor
adc
fcom
fs
mov
call
fcom
xor
daa
or
jp
jae
mov
jae
sub
xor
jp
sbb
adc
jb
jp
jb
dec
xor
popf
jp
inc
sar
cwde
(bad)
div
mov
mov
mov
aas
shl
xor
cmp
adc
fcom
xor
cdq
sahf
fs
bnd
jae
mov
outs
mov
push
lahf
mov
loopne
xor
(bad)
sub
int3
push
jle
and
es
jae
(bad)
sar
cdq
xchg
lock
cmp
dec
jnp
jae
je
mov
jne
sbb
jp
call
xor
push
fidivr
dec
iret
jnp
jae
popa
or
jp
jl
add
or
fdivr
neg
jae
adc
or
push
(bad)
loopne
fdivr
xchg
cmp
jmp
xchg
sub
xor
retf
mov
xor
lahf
pop
cmp
imul
mov
int3
repz
and
leave
mov
sub
(bad)
cmp
cmp
jae
jl
push
fdiv
mov
and
jo
popf
jp
mov
sbb
pop
clc
pop
cmps
leave
mov
push
mov
and
mov
mov
out
lock
test
idiv
retf
mov
(bad)
in
mov
test
mov
dec
mov
mov
inc
in
in
adc
mov
push
mov
and
call
test
retf
mov
add
jl
xor
mov
sbb
mov
jne
loope
jp
sar
adc
inc
and
repz
push
xor
jp
dec
lods
into
jbe
fmul
cmp
xchg
aad
and
xor
jnp
test
pop
(bad)
sahf
jp
sub
test
sub
repz
pop
and
repz
in
jae
aas
cmp
pop
dec
xor
adc
or
jae
push
xor
(bad)
popf
jp
ss
cmp
test
jp
cli
and
sar
pop
xchg
leave
mov
repz
and
pop
mov
mov
sti
repz
jp
dec
fldl2e
xchg
xor
push
jo
(bad)
xchg
xor
push
or
dec
lods
xor
push
add
mov
dec
fldz
xchg
xor
push
adc
push
xchg
xor
push
sub
ficom
dec
fnstenv
xor
push
cmp
outs
stos
xor
jne
(bad)
jp
sbb
test
xor
cmp
icebp
mov
and
xchg
xor
push
and
(bad)
xchg
xor
push
cmp
(bad)
xor
(bad)
sbb
jae
(bad)
fwait
push
jbe
jae
test
mov
test
xor
cmp
sti
rep
movs
jp
lock
leave
mov
jp
(bad)
add
mov
and
cmp
repz
and
xor
push
add
fdivr
(bad)
pop
xchg
mov
sub
inc
xor
jne
xor
ds
cli
mov
test
jp
and
xor
fcom
retf
inc
xor
jne
xor
ds
xchg
jmp
test
mov
mov
test
imul
xchg
mov
cli
or
push
jmp
mov
jp
(bad)
pop
xchg
mov
sub
inc
pop
(bad)
xor
ds
idiv
lock
je
loopne
xor
and
addr16
jb
and
xor
imul
and
cmps
mov
stc
lock
test
jae
unpcklps
fcom
xor
out
mov
(bad)
(bad)
jp
mov
(bad)
xchg
xor
xchg
push
fnstcw
retf
cmps
push
jae
popf
mov
mov
mov
mov
retf
and
mov
and
cmp
stc
lock
mov
and
sub
pushf
jp
mov
popa
xchg
mov
jp
push
mov
pop
jae
je
xor
adc
loop
xor
and
out
jp
cwde
aad
xor
cmp
jae
test
mov
fnstsw
mov
and
cld
adc
fcom
shl
jae
jae
test
outs
dec
cmp
push
xor
xor
mov
retf
jae
inc
cmp
pop
xchg
mov
lock
and
ja
inc
dec
push
mov
pop
jae
popf
jecxz
fcom
xor
push
jae
jae
dec
sub
pushf
jp
add
jp
call
enter
xor
mov
inc
and
gs
ret
cmp
jp
(bad)
pop
xchg
mov
sub
mov
mov
mov
mov
int3
adc
jae
jp
mul
test
mov
xor
cmp
jae
(bad)
leave
lea
test
cld
adc
fcom
rep
sahf
jp
jae
sub
repz
xor
and
jae
lea
jae
div
and
lds
icebp
mov
lds
(bad)
jno
jae
mov
xor
push
dec
lea
test
push
stos
xor
xchg
mov
fdivr
into
and
sbb
adc
je
jbe
mov
fcomp
push
stos
xor
xchg
test
fdivr
out
jp
repnz
mov
and
lds
jle
jbe
push
inc
mov
test
jo
jae
mov
xor
push
dec
lea
test
push
stos
xor
xchg
sub
jp
into
and
sbb
adc
mov
jbe
mov
fdiv
aam
xor
jmp
xchg
add
jp
pop
fistp
(bad)
push
xchg
mov
stc
cld
mov
int
and
inc
push
mov
pop
jae
push
jecxz
fcom
xor
mov
jae
dec
sbb
popf
jp
mov
jp
call
iret
lea
test
loope
xor
test
mov
xor
in
push
xor
add
sbb
adc
lock
jbe
mov
fsub
jp
mov
push
stos
xor
xchg
hlt
je
jp
retf
xor
pop
or
mul
test
mov
jns
retf
int
fdivr
mul
test
mov
retf
and
mov
and
cmp
arpl
mov
and
adc
popf
jp
pop
fstp
repz
xchg
mov
jp
push
mov
pop
jae
imul
fcom
xor
inc
jge
jae
dec
adc
popf
jp
xor
jp
call
into
lea
test
loope
xor
test
mov
xor
in
push
xor
add
sbb
adc
xor
sub
jp
mov
pop
stos
xor
xchg
cmp
fdivr
jb
jp
repz
or
and
(bad)
and
xor
jae
cmp
dec
or
and
add
add
jp
(bad)
pop
xchg
mov
sub
mov
mov
mov
mov
int3
ret
fdivr
xchg
push
call
mov
test
mov
pop
jae
jp
ja
jp
jae
jp
jae
adc
jp
lock
cli
pop
mov
mov
adc
sbb
adc
imul
mov
lods
into
jbe
fmul
jae
ror
xor
stc
cld
mov
int
pop
adc
dec
xchg
leave
mov
sub
in
jecxz
jae
iret
les
fnstcw
sbb
div
and
cmp
imul
mov
mov
retf
xor
jae
sbb
out
fmul
push
out
mov
test
imul
pop
jae
(bad)
fmul
ficom
les
sub
retf
mov
xor
test
fwait
and
jae
dec
jo
popf
jp
fcomp
jp
sbb
adc
fcom
xor
fcom
xor
fdivr
pop
push
dec
cmp
jp
xor
push
inc
lea
test
mov
js
jae
jp
(bad)
sub
retf
mov
xor
idiv
jecxz
cmp
adc
je
loopne
xor
and
mul
and
jp
(bad)
sub
retf
mov
xor
adc
pop
xchg
leave
mov
sub
mov
loop
fadd
retf
fwait
push
jle
jae
add
sub
retf
mov
aaa
jae
mov
xor
fdivr
sbb
adc
sbb
add
xor
adc
jp
jb
jp
fwait
jl
retf
mov
sub
fld
xor
adc
jae
add
and
and
test
xor
xor
and
and
mov
shl
xor
and
arpl
int3
jb
repz
cdq
jbe
jae
jp
jl
stos
xor
fdivr
dec
arpl
jne
mov
jp
dec
jmp
(bad)
mov
xchg
test
ja
jp
mov
ds
out
fsubr
popf
jp
js
dec
mov
sahf
jp
hlt
fdivr
dec
jmp
(bad)
mov
push
stos
xor
xchg
inc
ja
jp
inc
lock
jae
jno
inc
shr
jae
sbb
jae
inc
add
cmp
xlat
test
pop
inc
cmp
xchg
jle
jae
add
push
aas
int3
cli
sbb
pop
inc
cmp
xlat
test
push
inc
cmp
out
jle
jae
dec
adc
popf
jp
addr16
inc
inc
(bad)
sahf
jp
push
xlat
test
fwait
inc
cmp
retf
jae
dec
adc
popf
jp
push
pop
inc
inc
(bad)
sahf
jp
push
lds
xor
es
jae
jbe
(bad)
sar
test
repz
push
mov
fsubr
popf
jp
jne
addr16
pushf
jp
inc
pop
(bad)
test
in
jae
sbb
lock
jae
jl
outs
clc
in
jae
dec
sub
pushf
jp
jne
addr16
pushf
jp
inc
hlt
in
jae
jl
outs
movs
(bad)
out
adc
popf
jp
jne
addr16
pushf
jp
inc
pop
(bad)
test
in
jae
mov
and
sub
fwait
stos
jle
jae
jl
mov
cmp
push
push
jae
jp
push
aam
jbe
dec
jmp
ror
xor
fdivr
push
int3
mov
dec
jmp
enter
dec
jmp
cld
mov
dec
jmp
lock
dec
jmp
in
mov
dec
jmp
call
jmp
cmp
arpl
push
mov
pop
sbb
repz
xor
mov
aam
jno
aad
inc
pop
push
mov
mov
cld
push
into
cwde
sar
pop
fyl2xp1
int3
push
test
jne
je
mov
adc
das
adc
sbb
jae
jnp
sbb
sub
xor
adc
jp
jae
push
xor
fdivr
ja
inc
xor
fdivr
cwde
cmc
mov
aad
fdivr
daa
clc
jb
mov
test
mov
std
into
xor
mov
clc
mov
in
mov
push
adc
jb
jae
jp
push
pushf
mov
dec
jmp
cwde
mov
dec
jmp
xchg
mov
dec
jmp
nop
mov
dec
jmp
mov
xor
fdivr
push
mov
xor
fdivr
push
test
xor
fdivr
push
or
jae
jp
push
mov
jmp
mov
jmp
mov
jbe
dec
jmp
mov
jbe
dec
jmp
lods
mov
dec
jmp
test
jbe
dec
jmp
movs
mov
dec
jmp
mov
jmp
pop
mov
dec
jmp
pop
mov
dec
jmp
push
mov
dec
jmp
push
mov
dec
jmp
dec
mov
dec
jmp
dec
mov
dec
jmp
inc
mov
dec
jmp
inc
mov
dec
jmp
jl
jbe
dec
jmp
js
jbe
dec
jmp
je
jbe
dec
jmp
jo
jbe
dec
jmp
ins
mov
dec
jmp
push
jmp
mov
dec
jmp
pusha
mov
dec
jmp
sbb
jbe
dec
jmp
sbb
xor
fdivr
push
adc
jbe
dec
jmp
adc
xor
fdivr
push
or
jbe
dec
jmp
or
xor
fdivr
push
add
jbe
dec
jmp
add
xor
fdivr
push
cmp
jbe
dec
jmp
cmp
xor
fdivr
push
xor
jbe
dec
jmp
xor
xor
fdivr
push
and
jbe
dec
jmp
and
xor
fdivr
push
fmul
xor
fdivr
push
fmul
xor
fdivr
push
aam
jbe
dec
jmp
ror
xor
fdivr
push
int3
mov
dec
jmp
enter
dec
jmp
les
xor
fdivr
push
ror
jae
jp
push
cld
mov
dec
jmp
clc
mov
dec
jmp
hlt
mov
dec
jmp
lock
dec
jmp
in
mov
dec
jmp
call
jmp
in
jbe
dec
jmp
loopne
jbe
dec
jmp
pushf
mov
dec
jmp
cwde
mov
dec
jmp
xchg
mov
dec
jmp
nop
mov
dec
jmp
mov
xor
fdivr
push
mov
xor
fdivr
push
test
xor
fdivr
push
or
jae
jp
push
mov
jmp
mov
jmp
lods
mov
dec
jmp
test
jbe
dec
jmp
movs
mov
dec
jmp
mov
jmp
pop
mov
dec
jmp
push
mov
dec
jmp
dec
mov
dec
jmp
dec
mov
dec
jmp
inc
mov
dec
jmp
inc
mov
dec
jmp
jl
jbe
dec
jmp
js
jbe
dec
jmp
je
jbe
dec
jmp
jo
jbe
dec
jmp
mov
dec
jmp
pusha
mov
dec
jmp
sbb
jbe
dec
jmp
sbb
xor
fdivr
push
adc
jbe
dec
jmp
adc
xor
fdivr
push
or
jbe
dec
jmp
or
xor
fdivr
push
add
jbe
dec
jmp
add
xor
fdivr
push
cmp
jbe
dec
jmp
cmp
xor
fdivr
push
xor
jbe
dec
jmp
xor
xor
fdivr
push
sub
jbe
dec
jmp
sub
xor
fdivr
push
and
jbe
dec
jmp
and
xor
.byte
.byte
