cmp
mov
jp
inc
mov
arpl
cmp
dec
cmp
xor
jl
inc
mov
pop
and
inc
retf
pop
adc
cmp
ds
and
mov
jae
xchg
jle
inc
mov
push
gs
cmc
dec
dec
cmp
sbb
dec
and
(bad)
fs
xor
dec
cmp
sbb
into
int
inc
(bad)
test
cld
nop
(bad)
icebp
adc
jle
ret
dec
pop
jmp
sub
pop
sub
jle
xor
xchg
jns
mov
dec
push
in
and
jmp
cmp
inc
push
out
dec
dec
cmp
pop
loop
into
push
inc
cmp
icebp
lock
add
jno
std
mov
pop
enter
add
not
adc
cmps
add
cmp
pushf
cmp
cli
mov
dec
(bad)
std
imul
jle
cmp
sub
lods
cmp
inc
adc
add
jl
jne
cmp
retf
mov
add
pop
in
scas
push
mov
pop
int3
pop
add
cmp
mov
repz
cmp
enter
add
sub
sbb
ja
xor
leave
jbe
test
xor
inc
adc
jmp
dec
aas
jb
retf
pushf
add
cmc
ins
dec
aas
jb
retf
(bad)
and
call
adc
adc
call
dec
sub
inc
jne
pop
icebp
lock
inc
mov
jge
pop
std
imul
ror
mov
rol
push
inc
mov
jbe
sub
jle
ret
push
add
jle
stos
xchg
std
out
mov
xchg
add
jle
test
cmp
test
xor
pop
inc
out
and
cmp
cmp
lock
xor
(bad)
push
inc
mov
cld
test
mov
sbb
push
es
inc
mov
pop
stos
sbb
adc
fwait
jge
fisub
add
jle
and
mov
xchg
lods
mov
sbb
adc
xor
xor
inc
mov
cmp
mov
pop
sub
pop
cmps
add
jle
add
jle
mov
mov
and
cmp
mov
mov
xor
cmp
test
xor
pop
mov
mov
fiadd
mov
aam
out
repnz
stos
xor
inc
pop
shl
mov
inc
push
or
imul
mov
not
enter
sub
adc
sub
pop
xchg
mov
add
or
xor
enter
mov
dec
and
fdivr
les
jmp
or
dec
int
mov
lds
rcr
inc
mov
inc
pop
jo
adc
sub
fcom
aas
cli
and
pop
pop
push
inc
mov
ror
sub
jo
ds
pop
xor
pop
inc
inc
cdq
sahf
les
jmp
hlt
inc
int
mov
in
and
sub
push
or
(bad)
clc
es
pop
int3
test
sub
jle
inc
fdivr
inc
dec
or
mov
retf
jle
enter
or
adc
xchg
sub
cmps
and
mov
mov
sar
retf
jle
dec
inc
or
jo
xchg
add
iret
xchg
xor
(bad)
adc
dec
xor
es
sub
pop
in
in
arpl
push
scas
jne
jle
mov
not
cmp
jg
mov
pop
sub
or
test
cmp
sbb
bound
or
sub
or
test
cmp
or
mov
push
mov
jp
sbb
push
enter
enter
xchg
and
and
bnd
inc
pop
in
bound
cmp
mov
loopne
retf
sahf
add
adc
xlat
mov
ret
pop
stos
fisttp
retf
sahf
xor
adc
dec
xchg
push
retf
push
mov
or
adc
js
or
add
(bad)
xchg
mov
xchg
jge
jle
mov
dec
cmp
retf
cs
or
retf
cld
jle
inc
dec
inc
mov
jb
cmp
out
test
sub
or
js
or
mov
mov
adc
dec
inc
push
mov
dec
sub
and
repnz
mov
inc
arpl
sub
sbb
out
outs
rol
dec
sub
cmp
sti
jmp
dec
sbb
mov
lock
add
not
ret
push
ror
shl
mov
sub
mov
ins
sahf
mov
mov
jmp
mov
jmp
dec
sbb
mov
dec
sub
mov
dec
sub
mov
cli
adc
sub
inc
dec
or
cmp
inc
push
cmp
sbb
into
jno
xchg
xchg
jle
mov
sbb
or
inc
mov
push
or
sahf
add
mov
fwait
mov
xchg
jmp
aad
jo
lahf
push
test
cs
into
test
add
mov
push
mov
test
jmp
in
and
repnz
sub
sbb
dec
xor
jo
inc
mov
pop
mov
inc
mov
push
or
sahf
add
mov
fwait
mov
xchg
jmp
aad
jo
lahf
push
test
cs
into
test
cwde
test
mov
sbb
dec
jnp
cmc
lock
add
mov
dec
sbb
inc
enter
pop
in
bound
and
xchg
adc
dec
not
jo
test
lock
mov
bound
mov
in
push
mov
scas
arpl
push
stos
mov
sahf
xchg
sub
stos
push
inc
mov
xlat
push
in
and
repnz
sub
pop
(bad)
dec
xchg
cmp
call
inc
dec
or
sub
lahf
push
inc
in
push
mov
dec
cmc
dec
dec
icebp
sub
pop
pop
pop
dec
jmp
cmp
jmp
ja
mov
dec
not
push
in
and
repnz
sub
sbb
cmp
add
hlt
jge
mov
lock
xchg
pop
test
cmp
jg
lods
jle
adc
and
pop
popf
fs
mov
push
dec
mov
loopne
cmp
out
enter
jb
mul
push
in
and
repnz
sub
(bad)
jbe
xor
dec
inc
mov
sub
adc
inc
(bad)
jne
fst
cmp
adc
callw
cmc
push
inc
dec
or
retf
inc
dec
cmp
ja
callw
imul
mov
not
cmp
pop
push
in
and
bnd
inc
pop
in
bound
cmp
repnz
imul
push
xchg
jle
daa
mov
jge
pop
frstor
mov
push
mov
push
pop
mov
ret
enter
inc
dec
not
jo
ja
dec
cs
xlat
xor
sub
push
cmp
sub
mov
out
pop
inc
cmp
sbb
jb
push
test
cmp
jg
push
cmp
retf
and
mov
jle
inc
cmp
pop
inc
cmp
enter
add
xchg
sbb
dec
jg
enter
inc
dec
sub
pop
jmp
fwait
scas
ins
mov
pop
test
loope
inc
cli
aas
or
outs
cmp
xchg
jl
retf
dec
adc
fs
inc
mov
outs
cmc
lock
add
jno
mov
jb
cmp
cmp
shl
inc
mov
sub
adc
inc
(bad)
data16
adc
adc
dec
call
retf
jecxz
pop
ret
mov
mov
jg
dec
jle
int3
aaa
lahf
call
xor
xchg
mov
mov
jge
fimul
xchg
mov
pop
push
in
mov
pop
sbb
xchg
loop
add
jle
rol
inc
mov
in
loope
pop
int3
test
pushf
jns
sub
enter
cmp
jle
lds
add
inc
mov
jle
and
jle
jl
retf
dec
adc
cdq
inc
popf
sahf
les
jmp
inc
into
retf
cmp
jecxz
mov
mov
ret
mov
cmp
test
(bad)
mov
cmp
jno
neg
out
enter
cmp
test
lock
mov
pop
inc
inc
fistp
in
sub
dec
test
cdq
dec
sub
jno
push
mov
inc
sub
fst
fidivr
push
mov
cmc
das
mov
mov
sahf
add
ja
xor
test
int3
aaa
mov
mov
adc
adc
inc
call
inc
cmp
jmp
jb
add
mov
call
dec
mov
retf
mov
xor
xchg
jl
fst
mov
sbb
fst
loop
daa
mov
dec
cmc
push
mov
cmp
dec
xor
mov
adc
inc
or
sbb
mov
hlt
enter
mov
in
and
bnd
inc
pop
in
fimul
mov
add
inc
or
sbb
jle
and
jle
add
(bad)
sub
jno
shl
or
xchg
adc
mov
sahf
mov
xchg
cmps
cmp
out
enter
enter
or
xchg
xor
cmc
push
dec
cmp
adc
mov
dec
mov
inc
xor
jmp
cmp
pop
int3
idiv
adc
out
mov
mov
or
test
not
cmp
push
inc
mov
jns
dec
sbb
and
jle
cmp
jle
push
adc
mov
mov
jae
lock
or
xchg
mov
dec
jle
call
out
enter
dec
imul
adc
dec
cmp
jge
add
jge
add
ret
pop
enter
enter
add
(bad)
sub
jno
jb
sub
ret
pop
xor
fimul
add
jle
cmp
mov
jge
fdivr
inc
fdivr
inc
fidivr
inc
repnz
pop
fcomip
jle
pusha
fnstsw
enter
inc
fdivr
inc
loop
and
mov
pushf
add
not
ret
push
ror
aad
mov
pop
mov
sub
xor
and
mov
pop
int3
test
call
cs
sahf
mov
inc
cmc
push
mov
mov
in
sub
jle
pop
jmp
fwait
scas
jmp
xchg
adc
inc
loope
inc
cli
aad
or
int
inc
mov
hlt
enter
mov
jno
sbb
mov
ficomp
jne
mov
sahf
les
jmp
mov
ret
mov
mov
iret
jo
not
sub
jle
sub
jle
enter
mov
push
aam
pop
mov
mov
dec
sub
pop
xchg
in
mov
xor
loop
jle
xor
mov
loopne
cmp
cmps
mov
aas
sti
idiv
fst
loop
das
mov
dec
ja
xor
test
in
dec
sub
jno
xchg
popf
dec
sub
ficomp
test
cmc
xchg
mov
cmp
push
(bad)
jle
inc
mov
push
mov
test
inc
xor
call
fisttp
retf
inc
cmp
cmp
dec
jb
xchg
inc
mov
ficom
dec
retf
xlat
mov
dec
sub
xchg
imul
retf
call
loope
jle
cdq
fwait
cmps
sahf
cmp
test
loopne
fst
loop
das
mov
dec
ja
dec
aaa
(bad)
adc
sbb
mov
xchg
into
mov
pop
ror
call
lds
jns
inc
fdivr
pop
push
cmp
int3
aaa
sub
dec
cs
inc
sub
xchg
imul
shl
inc
mov
mov
mov
mov
xchg
js
jle
dec
add
adc
dec
add
pop
test
mov
ror
leave
xchg
out
sub
mov
inc
loope
jle
ret
call
jl
retf
mov
xchg
xor
xor
adc
sub
push
inc
fisubr
mov
mov
cmp
test
jle
data16
(bad)
push
cmp
int3
jae
dec
call
mov
mov
sub
mov
pop
sub
jle
adc
aas
pop
test
xor
pop
inc
(bad)
pop
jge
fcmovb
test
dec
sub
pop
mov
mov
pop
sbb
mov
mov
push
sub
sahf
push
inc
fisubr
mov
mov
mov
dec
adc
fdivr
clc
push
cmp
int3
jae
dec
inc
sub
mov
mov
sub
mov
pop
sub
jle
adc
aas
pop
test
xor
pop
inc
(bad)
pop
jge
fcmovb
test
dec
sub
pop
cmp
mov
pop
sbb
mov
mov
iret
mov
not
enter
sub
sahf
push
inc
fisubr
mov
mov
add
inc
call
dec
jne
mov
inc
mov
jge
(bad)
test
repz
mov
sub
mov
mov
sub
mov
pop
sub
jle
adc
aas
pop
test
xor
pop
inc
(bad)
cmp
fcmovb
test
dec
sub
pop
shl
mov
pop
or
mov
addr16
call
xchg
test
mov
jle
dec
jne
mov
inc
mov
xchg
mov
jne
inc
xor
mov
xor
mov
pop
inc
aas
sti
jmp
test
mov
mov
mov
adc
(bad)
retf
cmp
rol
dec
sub
inc
mov
xchg
mov
jp
inc
aas
sti
iret
mov
aaa
mov
pushf
jns
sub
test
call
cmc
xchg
cdq
dec
sub
cmp
push
xchg
not
cmp
xchg
cmp
jle
les
pop
inc
xor
ret
mov
inc
aam
inc
mov
mov
dec
sub
xor
scas
mov
cmp
pop
inc
mov
aam
int3
jle
daa
jne
(bad)
mov
jne
mov
dec
adc
les
sub
(bad)
call
mov
add
mov
dec
sbb
sub
lahf
push
inc
cmp
xchg
mov
pop
inc
cmp
jmp
jb
xchg
jg
jle
int3
aaa
scas
call
les
jmp
mov
mov
push
mov
cmp
sbb
mov
pop
inc
aas
sti
(bad)
mov
aaa
scas
call
jns
sub
enter
cmp
dec
pop
inc
pop
push
call
cmc
xchg
popf
dec
sub
cmp
push
mov
push
mov
mov
hlt
enter
mov
iret
adc
aaa
mov
xchg
movs
dec
sub
cmp
(bad)
mov
mov
jmp
push
iret
enter
mov
mov
pop
rcr
inc
mov
mov
dec
sub
dec
retf
out
mov
adc
pop
int3
aaa
sub
dec
push
jle
ret
xchg
in
sub
inc
mov
jge
pop
xchg
jl
mov
in
idiv
mov
dec
repz
mov
ficomp
test
dec
sub
pop
inc
jnp
mov
rcl
cmps
ds
cmp
call
retf
call
ror
call
mov
cmp
pop
enter
inc
mov
in
aas
retf
lahf
mov
mov
jle
inc
inc
fistp
in
sub
dec
ja
dec
aaa
adc
in
sub
xor
call
push
xchg
mov
cs
mov
mov
sahf
add
ja
dec
aaa
push
adc
por
int3
aaa
fsubrp
mov
push
sub
mov
dec
ja
dec
aaa
adc
jmp
pop
lahf
push
inc
mov
pop
test
jmp
iret
jo
not
daa
jne
addr16
cmp
mov
(bad)
retf
mov
dec
add
dec
std
sti
push
cmp
pop
mov
repz
ret
sahf
cmps
or
inc
mov
mov
pminub
mov
dec
sub
test
xchg
sbb
jno
push
mov
xchg
and
jle
ret
call
les
sub
mov
xor
das
mov
mov
sahf
add
ja
dec
aaa
push
stos
lds
call
inc
mov
call
adc
mov
dec
cmc
xchg
lds
call
push
xchg
not
cmp
xchg
cmp
jle
les
pop
inc
aam
stos
and
call
inc
mov
xchg
cld
fiadd
xchg
xor
cs
mov
dec
std
ror
mov
call
out
jle
ror
call
lds
sti
out
dec
adc
inc
dec
retf
mov
les
jmp
mov
dec
sub
sub
repz
adc
dec
not
rcr
inc
mov
mov
int3
aaa
and
mov
dec
sub
mov
pop
loope
inc
mov
ror
jp
les
jmp
mov
dec
sub
sub
jmp
cmp
jle
ret
call
inc
cmp
xchg
mov
add
mov
dec
sbb
les
sub
mov
mov
sti
mov
dec
add
cmp
mov
add
mov
push
sub
mov
pop
sub
xor
out
dec
adc
mov
or
inc
mov
hlt
enter
mov
aaa
xchg
call
jno
sub
ret
call
dec
cmp
(bad)
mov
add
mov
mov
sub
cmp
pop
mov
sub
cmp
pop
mov
sub
cmp
pop
mov
not
retf
call
jno
sub
test
mov
mov
jno
sahf
movs
fadd
pop
sub
outs
push
inc
(bad)
fist
inc
mov
inc
and
mov
xchg
lods
cmps
sub
inc
sub
sub
rcr
mov
push
mov
xor
xrelease
jl
inc
pop
jne
inc
mov
rol
or
mov
push
cmp
inc
(bad)
mov
jmp
dec
sub
mov
cmp
test
dec
jle
cmp
imul
jo
mul
pop
int3
rol
sub
sbb
cmc
push
mov
fst
inc
mov
xchg
cmp
jno
out
out
mov
not
cmp
pop
sub
pop
push
inc
fdivr
inc
pop
adc
mov
rcl
pop
cdq
je
mov
fiadd
pop
push
pop
cmp
pop
dec
inc
test
cmp
call
inc
cmp
push
inc
mov
out
inc
not
ret
mov
mov
xchg
fs
push
inc
mov
xor
ds
inc
jne
sti
fdiv
jle
inc
mov
rol
push
inc
mov
pop
inc
cmp
push
fdiv
jle
div
ja
dec
add
inc
mov
sbb
sar
pop
xchg
rol
cmp
sar
(bad)
and
or
ror
xchg
mov
dec
jg
jns
aas
pop
test
jl
inc
xor
fdivp
jle
mov
inc
sbb
popf
jl
inc
inc
jnp
fdiv
jle
xor
repz
inc
mov
push
inc
pop
js
inc
mov
push
inc
cmp
jecxz
je
adc
jle
inc
mov
push
inc
pop
test
inc
mov
adc
mov
mov
mov
arpl
mov
pop
rol
mov
sbb
aas
pop
push
adc
mov
mov
pop
shl
jle
jo
sub
add
mov
pop
rol
mov
sbb
aas
pop
inc
pop
jno
mov
sub
jns
sbb
shl
sar
sar
mov
sub
pop
jecxz
ficom
pop
popf
jmp
pop
sub
jns
sbb
out
inc
not
sar
rol
push
inc
mov
pop
inc
pop
leave
jmp
pop
sub
jns
sbb
stc
dec
mov
data16
mov
rol
push
inc
mov
pop
inc
pop
cmc
jmp
xor
mov
mov
mov
out
inc
not
sar
inc
jle
loopne
jecxz
inc
mov
das
fdivp
jle
pop
fnstcw
mov
not
cmp
push
inc
repnz
test
mov
das
aas
pop
ret
push
inc
mov
push
inc
pop
mov
inc
mov
push
fdiv
jle
inc
mov
rcl
mov
sti
fdiv
jle
inc
mov
push
inc
pop
rcl
inc
mov
adc
mov
mov
mov
(bad)
fnsave
push
out
je
adc
aas
pop
inc
pop
hlt
pop
inc
mov
xlat
test
jg
inc
xor
fdivp
jle
shl
mov
fild
cmp
adc
cmp
dec
add
inc
loope
jle
or
add
mov
lock
shl
fadd
jle
jnp
pop
xchg
add
mov
mov
cld
jbe
jnp
cmc
lock
outs
adc
adc
aas
pop
stos
nop
adc
enter
enter
pop
sub
jae
sbb
loope
cli
jle
mov
mov
adc
aas
pop
add
jle
mov
hlt
pop
jecxz
fist
cmp
sbb
mov
mov
mov
xlat
inc
mov
lahf
add
jno
inc
ret
inc
xor
sbb
test
pop
inc
mov
push
repnz
mov
mov
stc
pop
lock
dec
add
in
jl
jle
inc
(bad)
jne
add
mov
xchg
mov
sub
(bad)
imul
xor
in
inc
(bad)
xor
mov
push
ror
adc
(bad)
sbb
aas
pop
sar
push
mov
mov
pop
jecxz
jecxz
inc
mov
aas
pop
ret
lahf
add
(bad)
push
mov
sbb
iret
test
xor
std
adc
ds
inc
cmp
xchg
fs
xchg
bswap
jp
pushf
push
mov
jle
inc
cmps
inc
mov
mov
adc
ds
loopne
out
push
inc
mov
shl
jle
call
xchg
fs
xchg
bswap
jp
pushf
push
mov
jle
inc
cmps
(bad)
mov
mov
adc
ds
loopne
loope
inc
mov
shl
jle
call
sahf
mov
ds
jo
ds
sbb
inc
enter
pop
in
pop
xor
idiv
mov
not
cmp
push
inc
fidiv
add
jle
xchg
ins
lods
add
jle
loop
ficom
ficom
add
jle
loop
loope
inc
or
icebp
enter
xchg
inc
lods
add
jle
loop
jecxz
inc
fidiv
inc
loope
inc
fisub
lods
add
jle
loop
ficom
in
and
and
bnd
inc
pop
in
into
ja
add
or
cmc
lock
lds
cmp
int3
not
inc
mov
mov
push
test
cmp
xchg
and
jle
add
not
jne
jecxz
mov
pop
rcr
inc
mov
jb
mov
jb
mov
adc
xlat
scas
pop
enter
enter
xchg
mov
push
cdq
mov
pop
inc
jne
retf
inc
mov
pop
stc
aam
pop
inc
inc
popf
sahf
add
not
int3
mov
lods
add
jnp
cmc
lock
add
jl
inc
mov
jl
mov
loopne
cmp
or
mov
pop
inc
xor
scas
inc
aas
add
inc
mov
pop
mov
repz
test
mov
call
jecxz
inc
cmp
call
cmp
inc
fdivr
inc
dec
or
test
aas
cmp
int3
test
mov
mov
call
inc
fdivr
xor
adc
sub
and
mov
fadd
mov
loopne
cmp
xchg
jno
bound
mov
adc
not
call
jecxz
inc
cmp
rep
mov
cld
in
jle
push
in
and
bnd
rol
pop
adc
std
cmc
push
mov
neg
push
popf
cmp
jmp
div
add
cmc
pop
push
cmp
out
ret
pop
jo
test
mov
pop
sub
repz
test
fdivr
add
cs
dec
or
mov
mov
push
mov
jns
sub
outs
push
inc
mov
aam
cmp
jbe
lods
imul
push
mov
mov
dec
fadd
push
inc
or
lock
xchg
mov
adc
fwait
xchg
lods
mov
or
retf
call
inc
add
mov
xchg
add
mov
pop
xor
jno
add
mov
pop
xor
jno
add
mov
pop
xor
jno
add
mov
pop
dec
ss
inc
mov
push
push
aas
cmp
cmp
leave
cmps
inc
rol
sbb
std
lock
mul
sti
add
sahf
mov
movs
inc
aad
aaa
not
inc
mov
in
ret
sbb
cmps
push
sahf
mov
add
add
or
dec
std
inc
enter
xchg
pop
inc
mov
dec
dec
add
call
inc
mov
stos
add
jle
dec
add
call
push
cmps
lods
stos
add
and
inc
cmp
out
ret
pushf
adc
repz
push
mov
in
ret
ds
mov
out
ret
sahf
add
cmc
push
push
aas
cmp
mov
xchg
test
cmp
inc
mov
pop
stos
xchg
jno
add
adc
adc
(bad)
jno
add
jg
jbe
sub
add
or
dec
ss
jge
jp
or
xchg
mov
push
enter
inc
xor
inc
(bad)
dec
sahf
mov
add
adc
or
inc
(bad)
jne
mov
mov
xor
test
adc
mov
xlat
inc
cmp
inc
mov
pop
ror
out
or
inc
adc
and
ror
out
ret
xchg
jge
jl
pop
cmp
mov
inc
mov
arpl
xchg
pop
inc
mov
cmp
jp
pushf
adc
repz
push
mov
in
ret
ds
mov
xchg
test
cmp
pop
int3
idiv
inc
dec
std
inc
sub
enter
inc
mov
xchg
jge
jg
adc
xchg
mov
xor
imul
ret
xchg
jge
jg
jg
xchg
mov
and
dec
std
inc
enter
inc
arpl
adc
mov
adc
pop
inc
(bad)
data16
call
out
call
xchg
adc
mov
push
inc
mov
push
ror
inc
mov
xchg
test
push
in
and
bnd
inc
pop
in
adc
(bad)
jbe
pop
add
inc
(bad)
ja
ror
inc
mov
out
dec
xchg
adc
mov
add
ins
pop
jge
inc
mov
pop
inc
mov
ror
jnp
cmc
lock
mul
outs
(bad)
mov
xchg
out
push
inc
and
test
jmp
adc
add
or
pop
inc
(bad)
pop
sub
xchg
std
jb
mov
sbb
push
push
mov
cmps
js
add
fist
shl
jle
add
or
stos
xchg
hlt
adc
jp
int3
mul
retf
push
mov
fwait
scas
sahf
mov
cmp
jecxz
mul
retf
sahf
push
mov
adc
bnd
mov
jp
sahf
mov
movs
ds
cmp
test
je
and
aas
cmp
inc
cmp
out
enter
xor
jp
ds
mov
xchg
test
je
dec
mov
push
inc
mov
inc
pop
mov
pushf
adc
std
lock
xor
jbe
dec
pop
jmp
fwait
scas
sbb
jle
pop
inc
loope
inc
test
je
hlt
sahf
dec
adc
inc
(bad)
jle
inc
xor
enter
rol
inc
xchg
call
xor
xor
hlt
sahf
dec
adc
les
call
and
cmp
inc
(bad)
fs
cld
push
mov
add
add
in
dec
adc
inc
pop
and
mul
(bad)
clc
mov
ins
sub
dec
mov
das
(bad)
call
daa
(bad)
leave
mov
loop
push
inc
mov
sub
dec
mov
das
(bad)
mov
ins
sub
fdiv
jle
movs
jmp
mov
xchg
out
push
inc
xor
in
dec
adc
scas
dec
cmp
lds
mov
xchg
or
sub
mov
daa
(bad)
clc
mov
xor
popa
and
pop
inc
mov
jle
mul
(bad)
clc
mov
cmp
adc
aas
pop
enter
mov
push
cmp
ror
enter
sbb
and
inc
out
mov
ins
sub
add
sub
push
jae
add
push
pop
inc
bnd
les
call
pusha
fidivr
inc
mov
(bad)
in
jmp
inc
jae
adc
scas
dec
adc
mov
mov
gs
lds
adc
dec
inc
mov
adc
pop
xchg
clc
mov
mov
pop
sub
pop
inc
dec
retf
sti
scas
dec
sub
mov
dec
std
ror
cmp
dec
jb
jne
pop
dec
mov
xor
es
mov
cmc
inc
mov
jmp
xchg
xchg
cmps
mov
mov
mov
dec
jle
inc
mov
retf
adc
push
pop
push
mov
sahf
les
mov
xchg
xor
pop
mov
jle
test
call
lods
pop
sub
retf
leave
mov
mov
les
call
mov
(bad)
retf
dec
retf
iret
sahf
dec
cmp
test
jge
inc
mov
sub
push
cmps
pop
xchg
mov
xor
mov
mov
inc
xchg
call
enter
inc
jae
adc
dec
mov
mov
jecxz
dec
adc
sbb
mov
mov
xchg
dec
mov
xchg
mov
sub
mov
mov
mov
add
sub
pop
(bad)
pop
test
cmp
mov
dec
sbb
enter
mov
mov
sahf
les
mov
mov
dec
sbb
mov
xchg
aad
sub
mov
ins
sub
shr
enter
mov
ins
sub
mov
aaa
(bad)
enter
call
mov
mov
xchg
xchg
ins
sub
mov
aaa
mov
xchg
cmc
ins
sub
mov
ins
sub
inc
mov
aaa
sub
sub
retf
enter
std
dec
loopne
sbb
jle
aam
mov
call
inc
mov
sub
int3
outs
mov
ret
sahf
dec
sbb
aam
xchg
call
retf
aaa
shl
jle
aam
xchg
call
inc
mov
(bad)
jl
jle
enter
mov
aaa
push
push
inc
mov
push
mov
xchg
jnp
jle
retf
clc
mov
(bad)
xchg
pop
inc
mov
sbb
iret
jbe
dec
ss
push
inc
mov
or
mov
pushf
les
call
inc
mov
pop
ret
call
mov
mov
dec
adc
mov
push
mov
pop
ror
xchg
test
(bad)
pusha
sahf
mov
xchg
adc
mov
push
cmp
das
inc
(bad)
je
mov
xchg
adc
mov
dec
cld
xchg
fidivr
mov
mov
mov
push
imul
adc
mov
inc
mov
add
mov
push
inc
mov
xchg
test
mov
xchg
movs
ins
sub
stos
mov
sub
retf
movs
test
mov
repz
dec
and
dec
adc
lahf
dec
adc
push
push
movs
call
ror
pop
xor
(bad)
sub
pop
inc
mov
or
mov
inc
mov
pop
xor
(bad)
sub
pop
inc
mov
sbb
inc
mov
pop
xor
mov
sub
ror
push
xor
inc
xchg
call
popf
ins
sub
mov
dec
adc
(bad)
cmp
in
xchg
call
mov
sub
cwde
jae
adc
or
cmc
xchg
push
pop
mov
push
mov
dec
jmp
inc
mov
pop
xor
adc
pushf
sub
xor
in
dec
adc
scas
dec
cmp
lds
mov
xchg
outs
dec
sub
and
bnd
inc
pop
in
dec
dec
jne
out
mov
fild
rol
repz
mov
ficomp
cmp
fbstp
jbe
push
mov
xchg
stos
add
jle
in
add
int3
xchg
stos
add
jle
in
adc
pop
mov
ror
push
mov
cmp
xchg
adc
movs
hlt
adc
add
jmp
xor
(bad)
push
mov
test
push
mov
mov
popf
inc
mov
cmp
cdq
mov
jle
add
clc
push
inc
mov
push
mov
mov
xlat
inc
mov
push
mov
mov
out
add
jp
add
jg
div
jg
xor
adc
dec
jp
dec
xor
add
jp
add
jg
div
jg
add
sahf
adc
dec
jnp
inc
xor
call
enter
enter
div
jg
xor
jp
add
jp
div
jle
dec
inc
cmp
xchg
add
jp
add
jg
cmp
jno
ret
in
call
inc
pop
push
inc
mov
(bad)
js
add
jg
dec
xor
jmp
xor
jmp
rcr
inc
mov
mov
inc
mov
adc
test
fiadd
in
pushf
xor
lds
stos
imul
inc
fiadd
jge
pop
jns
inc
mov
out
jp
push
ror
shr
out
or
xchg
dec
push
inc
pop
js
ret
push
cdq
cmp
aam
cmp
pop
test
in
test
fsub
enter
enter
mov
dec
not
int3
(bad)
jb
mov
mov
call
pop
mov
call
xchg
sbb
jle
test
not
jo
and
jno
sahf
movs
in
sbb
jbe
inc
fdivr
inc
dec
or
sub
jle
sbb
sub
adc
sub
rol
inc
mov
pop
sub
jle
inc
fdivr
inc
fdivr
inc
mov
xchg
mov
loopne
pop
enter
mov
mov
cmp
ret
sahf
mov
inc
not
jo
xchg
inc
sub
jle
enter
push
loop
push
test
cmp
jmp
pop
fist
mov
pop
ret
pop
xor
cmp
jecxz
mov
push
mov
(bad)
mov
add
das
pop
inc
in
std
adc
xchg
adc
dec
push
out
enter
sbb
inc
enter
pop
in
and
push
sahf
mov
fdivr
shl
pop
sub
mov
ins
adc
mov
xchg
mov
jb
inc
sub
sub
shl
pop
retf
sahf
xor
call
inc
mov
inc
mov
jle
pop
inc
fdivr
add
cs
fimul
(bad)
clc
jecxz
pop
rol
inc
mov
call
loop
pop
stc
mov
pop
inc
in
and
sub
pop
in
movs
dec
push
push
(bad)
cmc
jle
mov
not
cmp
pop
inc
mov
adc
mov
pop
sub
or
test
cmp
sahf
add
not
ret
bound
mov
jge
fdivr
test
fdivr
add
cs
dec
in
sub
mov
sahf
mov
in
ror
jle
xor
sub
push
cmp
pop
xchg
cmp
cmp
xchg
sub
icebp
xor
dec
int3
enter
dec
add
sub
cmp
mov
or
sub
sahf
push
inc
pop
add
bound
fiadd
add
jle
test
jno
inc
lods
cs
push
cmp
test
xor
sbb
mov
or
xchg
add
cmp
push
cmp
test
xor
sahf
xor
dec
sbb
inc
enter
pop
in
dec
dec
cmp
sbb
jae
xchg
add
mov
sub
lock
mov
jle
sbb
enter
push
and
loopne
pop
ret
push
js
or
sub
inc
inc
mov
pushf
add
not
inc
jo
inc
mov
jno
sahf
movs
xor
lods
sar
and
push
iret
enter
add
jg
ret
pop
ret
pop
ret
pop
int3
iret
mov
inc
or
inc
mov
mov
das
push
pop
inc
inc
popf
sahf
add
not
ror
push
xor
sbb
add
popw
retf
sbb
bnd
add
xchg
cmp
pop
sbb
inc
inc
popf
sahf
add
not
dec
add
call
mov
mov
xchg
cmp
jl
inc
xor
sti
inc
xor
xchg
sub
jg
cmp
jle
mov
cmp
dec
add
cmp
xor
sbb
test
push
add
(bad)
push
mov
adc
fist
push
ror
pop
xor
test
cdq
cmp
mov
dec
add
mov
sbb
out
sbb
jo
push
movs
cmp
pushf
or
neg
push
xchg
sbb
call
inc
neg
mov
dec
mov
scas
sbb
out
sbb
jo
push
movs
cmp
sbb
ds
retf
sbb
loopne
ds
mov
repz
cld
inc
cmp
dec
pop
jmp
out
xchg
and
pop
push
bnd
cli
ss
inc
and
outs
pop
movs
and
shl
or
shl
out
xchg
out
xchg
and
xchg
and
xchg
and
xchg
and
xchg
and
xchg
and
xchg
and
shl
out
xchg
out
xchg
and
pop
icebp
lock
cli
bound
push
dec
jno
xchg
jb
xchg
and
or
and
xchg
out
xchg
and
xlat
inc
and
xchg
out
xchg
and
sti
shl
out
xchg
and
xchg
and
dec
mov
out
xchg
and
jo
mov
pop
inc
jmp
cmp
pop
sub
mov
pushf
pop
and
xchg
cmp
adc
and
pushf
adc
ins
xchg
and
xchg
xor
xchg
and
imul
mov
xchg
jns
out
xchg
(bad)
mov
shl
out
jbe
and
xchg
aad
movs
push
dec
adc
iret
bnd
pop
movs
and
icebp
lock
mov
jno
aam
and
xchg
and
pop
push
bnd
sub
and
ret
xchg
and
inc
shl
out
xchg
ss
inc
and
into
shl
out
xchg
out
xchg
and
shl
out
xchg
and
xchg
and
(bad)
and
xchg
and
xchg
and
xchg
and
xchg
and
outs
pop
movs
and
shl
jg
shl
out
xchg
and
pop
icebp
lock
ret
xchg
and
inc
shl
out
xchg
bound
into
shl
out
xchg
out
xchg
and
shl
out
xchg
and
xchg
and
(bad)
and
xchg
and
xchg
and
xchg
and
xchg
and
push
dec
jno
xchg
out
xchg
and
shl
out
xchg
and
xchg
and
xchg
pop
inc
push
mov
cmp
inc
push
cmp
pop
retf
jno
div
add
xchg
push
jg
cmc
push
mov
cmp
jmp
inc
sbb
add
jle
test
jle
inc
cmp
mov
jo
inc
mov
(bad)
js
add
jle
imul
inc
mov
push
lods
or
adc
jle
mul
test
mov
not
retf
mov
out
scas
cwde
cmc
jle
mov
sbb
cmp
jge
or
jge
or
enter
add
xor
push
add
or
pop
inc
(bad)
outs
sahf
cdq
mov
push
dec
add
sbb
inc
add
iret
ins
inc
mov
pop
sub
jle
inc
aas
cmp
adc
pop
inc
mov
mov
cdq
mov
inc
int3
test
lss
inc
aas
cmp
adc
cmps
push
mov
xchg
ins
lss
test
or
ja
jle
daa
dec
cmp
dec
add
mov
call
mov
sahf
movs
xor
lods
and
inc
mov
jns
mov
lods
dec
mov
xlat
adc
mov
(bad)
mov
fwait
mov
xchg
jmp
aad
out
xchg
jl
ret
push
inc
mov
adc
xchg
push
inc
mov
call
xchg
lods
mov
mov
jno
push
jle
dec
add
clc
adc
push
(bad)
shr
jl
ret
push
inc
cmp
inc
dec
add
clc
adc
jne
(bad)
stos
add
mov
inc
mov
jge
test
cmp
inc
not
pop
inc
xor
push
inc
cmp
jmp
movs
call
sub
jle
enter
mov
lock
push
xor
jmp
adc
adc
test
push
mov
loope
pop
mov
not
cmp
out
retf
stos
add
xchg
loopne
ret
push
inc
mov
iret
cld
lock
add
or
test
cmp
retf
test
cmp
retf
dec
add
leave
lds
cmp
cld
lock
stos
lods
dec
pop
inc
pop
cmp
push
cdq
pop
inc
pop
inc
mov
push
mov
jno
xchg
jae
pop
dec
imul
popf
(bad)
pop
sub
push
scas
cld
lock
mov
jnp
cld
lock
test
xor
push
inc
cmp
jecxz
movs
(bad)
cld
movs
cmp
inc
jge
mov
imul
lock
push
xor
jecxz
adc
adc
test
push
mov
outs
sahf
mov
cmp
retf
stos
add
mov
loopne
ret
push
inc
mov
iret
cld
lock
add
or
enter
test
cmp
dec
add
clc
nop
push
cmc
add
push
ret
push
inc
cmp
cld
lock
dec
mov
loopne
(bad)
mov
mov
retf
repz
lock
dec
outs
ret
push
inc
cmp
shl
inc
mov
push
mov
adc
fist
call
cmp
push
inc
loop
mov
test
adc
sub
jle
add
pop
test
cmp
repz
inc
mov
pop
int3
not
inc
mov
sti
jle
mov
cli
jle
pop
pop
mov
xlat
add
scas
inc
lea
mov
not
cmp
aam
cmp
pop
inc
loope
inc
jmp
xor
shr
mov
enter
mov
mov
mov
inc
mov
or
inc
dec
out
je
test
xchg
call
adc
mov
adc
cmp
rol
cmp
mov
pop
push
call
stc
jle
dec
add
call
push
jecxz
(bad)
mov
mov
or
test
adc
cmp
mov
cmp
call
xchg
jns
mov
stc
jle
enter
inc
(bad)
jo
les
mov
call
sbb
sub
loop
xchg
lock
mov
cmp
int3
aaa
test
mov
stc
jle
sub
adc
sub
ds
xchg
lds
mov
sahf
les
call
stc
cmp
or
sti
out
dec
add
fiadd
mov
test
cmp
call
mov
mov
adc
fisub
xchg
mov
pop
rcr
repz
mov
fisub
xchg
mov
fidivr
inc
xor
scas
sar
pop
mov
not
enter
xor
jno
push
inc
fidiv
xchg
mov
fidivr
inc
xor
inc
sub
mov
enter
adc
dec
mov
pop
ret
xchg
mov
add
inc
in
and
sub
adc
sub
sub
mov
dec
jnp
cmc
lock
mov
inc
not
ret
pop
int3
test
sub
jle
inc
fdivr
inc
dec
or
mov
sti
jle
enter
mov
mov
out
enter
xor
sub
fdivr
xor
and
mov
clc
jle
jle
mov
cli
jle
push
in
and
repnz
or
(bad)
clc
push
repz
mov
cmc
jle
sub
and
(bad)
jbe
je
jle
ret
dec
sbb
sub
cmps
mov
enter
enter
xchg
jp
inc
aas
cmp
adc
pop
mov
mov
jle
test
div
adc
sub
enter
enter
mov
loop
pop
sub
jge
fdivr
xor
and
mov
xlat
xor
test
add
dec
or
mov
cli
jle
dec
jb
sbb
cli
jle
jo
xchg
push
enter
enter
mov
mov
xlat
add
mov
adc
fwait
xchg
lods
mov
push
add
sbb
or
xchg
mov
cmp
inc
je
pop
enter
enter
mov
mov
jge
dec
or
mov
cmc
jle
dec
jb
adc
xchg
sub
mul
pop
fdivr
inc
dec
or
mov
cmc
jle
dec
jb
sbb
cmc
jle
jo
xchg
or
hlt
cmc
jle
dec
add
(bad)
sti
push
mov
loopne
cmp
out
jne
dec
mov
sahf
movs
jecxz
inc
push
or
call
pop
sar
ret
ret
jle
bound
push
inc
mov
jmp
hlt
jle
enter
mov
adc
push
mov
repnz
push
sub
jle
inc
fdivr
inc
ficomp
enter
dec
pop
mov
mov
addr16
rol
inc
mov
xlat
xor
dec
xlat
stos
movs
and
test
cmp
jmp
mov
loopne
test
pop
push
in
mov
clc
loope
mov
mov
mov
mov
call
cs
and
repnz
sub
(bad)
jbe
sbb
mov
lahf
je
cmp
enter
enter
sahf
pop
dec
xchg
jge
jae
outs
cmp
out
push
call
push
mov
xchg
test
cmc
inc
push
je
adc
xor
jle
ror
int3
xor
mov
or
dec
ss
jge
je
push
cmp
pop
xchg
sti
xor
test
mov
cmps
inc
test
cmp
jno
mov
call
inc
push
call
add
not
push
cmp
es
sub
adc
sub
push
pop
pushf
inc
xor
out
cmp
inc
mov
push
mov
xor
inc
icebp
jle
enter
mov
push
xchg
mov
ja
xor
cmp
and
mov
out
xor
jp
xchg
inc
pop
inc
aam
push
mov
mov
enter
xchg
fadd
sahf
xchg
xor
scas
pop
mov
pop
sti
std
xchg
ror
inc
pushf
(bad)
stos
mov
inc
lods
cmp
pushf
cmp
sub
ins
cmp
push
pop
add
rcl
adc
mov
out
xor
and
sub
inc
mov
imul
in
pop
add
(bad)
cmps
mov
mov
dec
sub
xor
sti
mov
aaa
xchg
mov
mov
adc
je
int3
xor
dec
xlat
test
jne
inc
xor
out
mov
mov
jle
jo
xchg
add
xor
xchg
pop
add
sub
inc
mov
mov
dec
sub
aaa
stos
call
cdq
dec
sub
(bad)
call
aam
sub
inc
mov
pop
push
fdivr
call
jle
enter
mov
(bad)
jle
mov
mov
pop
test
cmp
pushf
add
not
enter
mov
mov
out
enter
retf
call
adc
fidivr
fisubr
enter
bound
icebp
push
inc
mov
ror
xor
add
sub
jmp
test
or
mov
loopne
xor
mov
dec
sub
inc
mov
ror
mov
mov
mov
pop
clc
mov
mov
ret
push
pop
test
mov
je
mov
mov
dec
sub
sahf
lock
test
xor
pop
inc
or
mov
loopne
xor
mov
dec
sub
inc
mov
ror
dec
enter
mov
test
xor
pop
inc
or
mov
loopne
xor
mov
dec
sub
inc
mov
ror
add
sbb
mov
std
in
inc
iret
pop
jmp
idiv
clc
sar
inc
sub
jmp
dec
add
in
jno
mov
xchg
test
ins
enter
xchg
mov
ficomp
add
jle
ret
xchg
scas
ja
pop
inc
pop
pop
push
inc
mov
sbb
mov
std
in
inc
iret
ins
jg
push
cmp
mov
dec
xchg
push
add
mov
jle
hlt
dec
sub
inc
mov
ror
xchg
push
inc
mov
sbb
mov
std
in
inc
iret
ins
jg
push
cmp
mov
dec
xchg
sbb
test
jle
hlt
dec
sub
inc
mov
ror
int
inc
mov
sbb
mov
std
in
inc
iret
pop
jmp
icebp
jle
clc
sar
inc
sub
jmp
dec
add
in
mov
mov
xchg
test
jle
cmps
cmp
fstp
pop
adc
(bad)
inc
jle
mov
sub
mov
push
call
sub
jle
int3
aaa
mov
call
mov
fisubr
call
icebp
jle
ret
push
jle
clc
mov
mov
ret
push
pop
popa
push
inc
mov
je
mov
mov
dec
sub
sahf
lock
test
xor
icebp
enter
mov
inc
cmp
inc
or
mov
loopne
xor
mov
dec
sub
inc
mov
ror
mov
inc
mov
sbb
mov
std
in
inc
iret
ins
jg
ins
cmp
mov
dec
xchg
std
add
xchg
mov
mov
scas
dec
mov
pop
fadd
xchg
mov
inc
sahf
push
inc
dec
retf
jmp
dec
cmp
ret
sahf
mov
mov
add
sti
jmp
dec
add
loop
imul
cmps
xchg
dec
add
jle
fadd
xchg
mov
jns
push
inc
dec
retf
jmp
dec
cmp
ret
(bad)
js
jle
clc
mov
mov
ret
push
fimul
mov
test
xor
pop
inc
or
mov
loopne
xor
add
jle
fadd
inc
retf
call
jg
cmp
push
pop
adc
xor
aaa
inc
mov
jle
in
sub
inc
mov
rol
mov
call
push
sar
pop
mov
cld
ds
sar
jb
jmp
and
adc
mov
xchg
fadd
xchg
adc
sahf
mov
mov
pop
lods
jbe
loopne
jae
adc
daa
ret
dec
test
int3
movd
mov
ins
cmp
int3
movd
mov
repz
ret
scas
imul
not
enter
or
call
inc
mov
xchg
xor
call
mov
aas
sti
pop
inc
dec
add
dec
cs
ins
cmp
adc
push
inc
mov
rcr
adc
mov
mov
iret
ins
jg
ins
cmp
mov
dec
xchg
or
mov
xchg
test
jle
dec
mov
pop
fadd
xchg
mov
jns
push
inc
dec
retf
jmp
dec
cmp
ret
sahf
mov
mov
inc
mov
sbb
mov
std
in
inc
iret
ins
jg
push
cmp
mov
dec
xchg
fld
mov
xchg
test
sub
mov
pop
mov
dec
cmc
xchg
mov
aaa
mov
xchg
fimul
enter
mov
push
not
enter
inc
mov
pushf
add
not
test
jg
inc
xor
pop
inc
dec
adc
inc
mov
out
inc
not
retf
adc
jle
js
xchg
mov
mov
pop
retf
call
lods
dec
sub
(bad)
push
sbb
int3
aaa
mov
mov
bnd
ret
call
mov
add
inc
push
inc
mov
call
enter
inc
mov
call
xchg
call
mov
xchg
inc
pop
inc
aas
sti
jecxz
dec
add
xor
call
mov
sub
(bad)
callw
sub
mov
(bad)
mov
mov
mov
xchg
test
jle
dec
mov
pop
fadd
xchg
mov
out
mov
jmp
dec
cmp
ret
sahf
mov
mov
inc
mov
sbb
mov
std
in
inc
iret
ins
jg
ins
cmp
mov
dec
xchg
ins
jle
jle
test
jle
dec
mov
pop
fadd
xchg
mov
inc
sahf
push
inc
dec
retf
jmp
dec
cmp
ret
call
mov
mov
rol
movs
jle
mov
dec
repz
inc
mov
call
mov
call
enter
mov
aaa
in
jmp
lahf
lock
hlt
dec
sub
inc
mov
ror
mov
sbb
mov
std
in
inc
iret
ins
jg
ins
cmp
mov
dec
xchg
cmc
jg
jle
test
jle
dec
mov
pop
fadd
xchg
mov
jns
push
inc
dec
retf
jmp
dec
cmp
ret
sahf
mov
cwde
sahf
les
jmp
jle
clc
mov
mov
ret
push
fimul
mov
test
xor
push
inc
dec
retf
jmp
dec
cmp
ret
push
pop
clc
mov
mov
ret
push
pop
pop
sub
(bad)
je
mov
mov
dec
sub
sahf
lock
test
xor
pop
inc
or
mov
loopne
xor
lahf
lock
hlt
dec
sub
inc
mov
ror
mov
mov
call
jle
inc
sub
push
fidiv
mov
test
xor
pop
inc
or
mov
loopne
xor
mov
dec
sub
inc
mov
ror
cmc
sub
(bad)
sbb
mov
std
in
inc
iret
pop
(bad)
cmp
jle
inc
sub
jmp
dec
add
in
popa
jl
jle
test
jle
hlt
dec
sub
inc
mov
ror
mov
mov
mov
pop
clc
mov
mov
ret
push
fimul
mov
test
xor
push
inc
dec
retf
jmp
dec
cmp
ret
inc
pop
clc
mov
mov
ret
push
fimul
mov
test
xor
push
inc
dec
retf
jmp
dec
cmp
ret
xchg
mov
push
sub
(bad)
sbb
mov
std
in
inc
iret
ins
jg
push
cmp
mov
dec
xchg
icebp
jge
jle
test
sub
cmp
jmp
dec
add
loop
mov
mov
xchg
test
jle
dec
mov
pop
fadd
xchg
mov
inc
sahf
push
inc
dec
retf
jmp
dec
cmp
ret
jg
ins
cmp
mov
dec
xchg
test
jle
test
jle
dec
mov
pop
fadd
xchg
mov
inc
sahf
push
inc
dec
retf
jmp
dec
cmp
ret
scas
ss
jle
mov
not
enter
jge
jle
test
inc
xchg
data16
inc
retf
call
test
pop
jno
inc
mov
rcl
xchg
sub
mov
sbb
mov
std
in
inc
iret
ins
jg
push
cmp
mov
dec
xchg
sbb
jle
test
jle
hlt
dec
sub
inc
mov
ror
leave
sub
mov
sbb
mov
std
in
inc
iret
ins
jg
push
cmp
mov
dec
xchg
sar
xchg
test
jle
test
or
mov
loopne
xor
jp
jle
and
xchg
jb
jg
ins
cmp
push
pop
or
mov
rcl
scas
retf
and
inc
xor
pop
sub
push
pop
inc
mov
call
jns
jle
les
jmp
jle
hlt
dec
sub
inc
mov
pop
int3
jp
inc
mov
dec
and
inc
dec
retf
(bad)
mov
test
mov
dec
xchg
mov
mov
sahf
mov
mov
jbe
jle
les
jmp
sub
inc
mov
inc
(bad)
sti
jge
dec
cmp
out
mov
je
call
div
add
aas
sti
call
test
cmp
jge
(bad)
retf
repz
mov
fidivr
inc
xor
xchg
test
hlt
push
mov
fdivr
jns
cmp
sub
mov
pop
inc
xor
jg
outs
cmp
sub
push
inc
ficom
adc
mov
dec
inc
sub
scas
out
ss
inc
in
mov
adc
fwait
xchg
lods
es
inc
loope
inc
(bad)
sbb
xor
xchg
mov
cs
mov
push
dec
xor
dec
es
xchg
ror
call
inc
mov
pop
inc
mov
xchg
int
sub
enter
retf
sahf
xchg
mov
and
cmc
inc
dec
aas
sub
loope
sub
inc
mov
xchg
cmp
pop
fsubrp
mov
mov
pushf
adc
cmc
call
je
int3
out
push
add
jmp
mov
mov
sahf
xchg
xchg
adc
(bad)
retf
mov
dec
cmp
enter
mov
dec
sub
inc
cmp
pop
retf
jmp
cmc
call
je
int3
out
push
add
jmp
mov
xlat
dec
pop
inc
fidivr
add
jle
les
sub
xor
jge
fdivr
les
sub
loop
adc
adc
jle
adc
cs
mov
adc
jle
les
sub
loop
mov
cmc
outs
cmp
sub
push
shl
mov
mov
mov
sbb
sbb
mov
pop
int3
aaa
sub
dec
cs
xchg
jne
mov
call
mov
dec
sub
mov
dec
sub
mov
dec
add
dec
dec
inc
sub
les
sub
mov
xchg
sub
sbb
mov
lock
les
call
jns
jle
mov
aas
sti
mov
int3
aaa
sub
dec
cs
mov
test
cmp
xchg
mov
fdivr
les
sub
loop
add
jle
test
not
xchg
(bad)
jmp
inc
mov
xchg
movs
dec
sub
daa
jne
(bad)
mov
xor
xchg
mov
scas
sbb
les
call
xchg
sti
scas
mov
mov
repz
in
sub
mov
mov
pop
sub
adc
int3
aaa
sub
dec
cs
pop
mov
inc
mov
xlat
dec
cmps
pop
inc
mov
mov
test
cmp
call
mov
mov
push
lock
les
call
jbe
jle
test
sub
mov
and
inc
aas
sti
jmp
dec
add
pop
pop
and
not
dec
jb
or
pop
jge
inc
pop
adc
xchg
xor
call
mov
shl
inc
retf
test
xor
xchg
push
pop
mov
jle
js
jle
sub
sti
jmp
dec
add
mov
push
sub
mov
jmp
dec
add
xor
pop
inc
(bad)
pop
xchg
in
sub
mov
or
pop
loop
mov
lods
sbb
inc
pop
jae
in
sub
mov
rcr
cmp
aaa
retf
dec
call
jle
stc
and
cdq
sahf
(bad)
mov
ret
inc
fdivr
hlt
push
sub
pop
mov
mov
test
cmp
mov
es
enter
mov
in
and
inc
enter
push
loope
inc
retf
test
mov
dec
out
enter
dec
pop
mov
inc
mov
aad
cmp
jmp
enter
dec
pop
lds
mov
aad
cmp
jmp
(bad)
outs
(bad)
in
cmp
adc
sub
pop
enter
adc
jno
add
jno
adc
jg
dec
add
jno
adc
repz
push
call
inc
mov
rol
pop
sub
mov
xlat
ret
push
dec
es
adc
mov
push
pop
loop
out
loop
lods
je
jle
test
mov
cmp
(bad)
jb
div
sbb
pop
pop
es
mov
out
push
(bad)
outs
sbb
test
call
dec
pop
inc
loope
mov
inc
mov
mov
dec
add
outs
adc
pop
xchg
daa
inc
mov
push
mov
ficomp
pop
sub
jle
xchg
xchg
jmp
mov
mov
call
dec
pop
inc
in
dec
jo
jle
add
and
jnp
inc
enter
pop
mov
inc
cmp
in
pushf
sbb
shl
scas
sbb
xchg
hlt
pop
inc
mov
lock
mov
aaa
ret
dec
or
repz
std
push
sub
mov
aam
push
inc
pop
mov
ror
jno
shl
cmp
inc
mov
call
mov
mov
ror
mov
fbld
mov
jle
mov
push
sahf
call
xor
ret
dec
or
repz
std
push
sub
mov
pop
adc
inc
mov
xlat
xor
dec
not
adc
shl
xchg
ret
push
add
sahf
call
test
cmp
jle
jle
stos
sbb
push
in
and
repnz
cmps
pop
pop
inc
pop
in
cmp
sub
pop
call
and
sbb
mov
sahf
mov
mov
inc
mov
call
cmp
imul
mov
mov
out
enter
enter
adc
stos
mov
fisubr
enter
inc
jle
ret
xchg
mov
adc
ds
mov
pop
int3
aaa
jle
mov
xchg
ret
jmp
mov
mov
ret
push
fimul
xchg
inc
push
sub
inc
mov
ror
lds
mov
sbb
mov
std
in
inc
iret
push
(bad)
call
sar
inc
sub
pop
mov
jmp
mov
adc
inc
xor
pop
inc
or
mov
loopne
xor
mov
mov
call
jb
jle
test
not
sub
sti
pop
mov
ss
pop
inc
xor
pop
inc
or
mov
loopne
xor
mov
mov
call
jb
jle
test
jle
dec
mov
pop
fadd
xchg
mov
mov
sbb
loopne
loopne
stos
inc
push
sub
add
sub
inc
mov
rcl
or
sub
sti
pop
mov
xchg
mov
pop
mov
outs
dec
pop
inc
xor
icebp
enter
mov
add
or
mov
loopne
xor
mov
mov
call
jae
jle
test
jle
les
xchg
lods
jae
jle
test
jle
dec
mov
pop
fadd
xchg
mov
inc
sahf
push
inc
aas
sti
pop
mov
es
pop
inc
xor
push
inc
aas
sti
pop
mov
xor
xor
icebp
enter
mov
or
je
inc
mov
loopne
xor
jae
jle
and
xchg
movd
mov
outs
cmp
int3
movd
mov
cmp
jbe
jg
ins
cmp
int3
aaa
jle
mov
cmp
jbe
jmp
mov
mov
ret
push
fimul
xchg
inc
push
sub
inc
mov
ror
xor
xchg
inc
push
sub
inc
mov
ror
mov
mov
mov
pop
clc
mov
mov
ret
push
fimul
xchg
inc
push
sub
inc
mov
ror
fs
add
sub
inc
mov
ror
sbb
inc
mov
sbb
mov
std
in
inc
iret
push
mov
cmp
int3
aaa
jle
mov
cmp
jbe
xchg
mov
push
pop
inc
dec
or
int3
aaa
jle
mov
outs
cmp
int3
aaa
jle
mov
cmp
jbe
call
pop
clc
mov
mov
ret
push
fimul
xchg
inc
push
sub
inc
mov
ror
jle
add
sub
inc
mov
ror
popf
daa
inc
mov
sbb
mov
std
in
inc
iret
push
mov
cmp
int3
aaa
jle
mov
cmp
jbe
scas
jle
jle
mov
not
enter
jno
jle
test
inc
xchg
data16
inc
int3
movd
mov
outs
cmp
int3
movd
mov
cmp
jbe
(bad)
cmp
jle
clc
mov
mov
ret
push
fimul
xchg
inc
push
sub
inc
mov
ror
mov
xchg
inc
push
sub
inc
mov
ror
nop
movs
add
jle
clc
mov
mov
ret
push
fimul
xchg
inc
push
sub
inc
mov
ror
imul
inc
mov
mov
iret
push
inc
pop
clc
sar
inc
sub
pop
mov
jmp
mov
dec
push
pop
inc
xor
push
inc
aas
sti
pop
mov
mov
mov
pop
sub
push
pop
inc
mov
inc
test
cmp
jmp
dec
adc
mov
mov
jle
cld
dec
mov
call
and
inc
dec
retf
jmp
dec
cmp
jo
ds
inc
cmp
dec
pop
jmp
fwait
xchg
lods
ss
inc
loope
inc
(bad)
pop
sbb
sub
xchg
cmps
cmp
xchg
mov
xor
mov
call
xor
jle
retf
inc
test
cmp
pop
int3
out
push
enter
mov
push
not
enter
push
jle
test
pop
inc
jecxz
dec
call
nop
xchg
sub
or
mov
xchg
loope
sub
int3
aaa
(bad)
mov
pushf
jle
sub
sti
mov
sub
retf
mov
adc
mov
jbe
push
cmp
jle
int3
aaa
sub
dec
cs
xchg
sub
mov
dec
retf
mov
dec
add
jmp
sub
cmp
cmp
int3
aaa
sub
dec
cs
call
aaa
retf
dec
cs
xchg
sub
sub
mov
dec
not
sub
adc
int3
aaa
(bad)
jmp
push
pushf
jle
ret
xchg
xchg
sti
scas
mov
mov
rol
push
sub
mov
pop
inc
xor
(bad)
mov
scas
sbb
les
call
xchg
adc
inc
aas
sti
scas
mov
test
repz
in
sub
mov
mov
pop
sub
adc
int3
aaa
sub
dec
cs
pop
cmp
inc
mov
mov
test
cmp
call
mov
mov
push
lock
les
call
ins
mov
xchg
test
sub
xchg
inc
pop
inc
aas
sti
jmp
dec
add
pop
push
cmp
mov
ror
or
pop
jge
inc
pop
or
xchg
ds
sub
mov
shl
inc
mov
jg
inc
jle
test
cmp
jg
mov
pop
int3
aaa
out
jmp
dec
cs
test
fdivr
sub
pop
int3
aaa
out
jmp
dec
call
sub
mov
ss
xchg
int
sub
mov
adc
mov
pop
mov
dec
repz
int
sub
inc
mov
loopne
fnstcw
int3
aaa
loop
mov
es
pop
xor
mov
pop
jmp
mov
jg
outs
cmp
test
loop
sbb
lock
test
xor
sub
cmp
fisttp
call
enter
adc
cmp
call
pop
cmp
mov
cs
mov
dec
xchg
or
dec
adc
pop
jns
inc
mov
xchg
fisttp
call
int3
aaa
retf
dec
dec
dec
jg
enter
mov
dec
xchg
sub
jle
hlt
push
sub
pop
popa
aas
inc
mov
xchg
fisttp
call
dec
sar
push
in
and
inc
enter
push
loope
inc
retf
test
xlat
pop
jbe
jne
inc
inc
mov
call
jle
enter
xor
xchg
pop
push
dec
repz
inc
mov
add
rcl
in
xor
jle
xchg
jle
mov
not
cmp
pop
inc
dec
or
int3
out
push
adc
xor
sub
pop
int3
test
pop
sub
push
pop
inc
cmp
test
mov
inc
not
int3
test
jmp
or
mov
adc
fwait
scas
inc
mov
pop
pop
inc
in
test
test
shl
inc
mov
adc
call
push
inc
or
jo
xchg
push
sub
pop
inc
aas
sti
push
mov
add
mov
push
mov
mov
call
lock
adc
cmp
or
mov
jge
in
mov
xchg
dec
pop
jnp
inc
enter
dec
in
push
push
and
add
push
mov
mov
push
adc
inc
call
inc
push
dec
inc
mov
push
mov
adc
sub
jg
inc
dec
dec
xchg
loopne
jle
push
add
jge
sub
push
inc
aas
cmp
adc
cmp
pop
aas
cmp
adc
jle
add
push
mov
mov
in
imul
adc
mov
sti
dec
in
test
stc
pop
jbe
inc
inc
cwde
sahf
add
not
sub
adc
sub
adc
sub
jle
inc
fdivr
inc
fsubr
jl
jle
enter
dec
mov
loopne
cmp
out
enter
push
fmul
je
fist
pop
icebp
aas
inc
mov
push
push
fmul
je
jecxz
inc
pop
add
inc
mov
push
push
fmul
je
fist
pop
adc
inc
mov
push
push
fmul
je
loope
inc
pop
and
inc
mov
push
push
fmul
je
jmp
inc
pop
xor
inc
mov
stc
(bad)
jle
sub
dec
aas
fdivp
jle
js
jle
sub
dec
aaa
fdivp
jle
push
mov
jge
dec
dec
xchg
lock
pop
call
jno
dec
arpl
lock
dec
call
enter
push
fmul
je
out
inc
pop
lea
inc
mov
push
push
fmul
je
jecxz
inc
pop
popf
xor
adc
push
fmul
je
fst
pop
lods
xor
adc
push
fmul
je
fst
pop
mov
mov
cmps
cmp
jecxz
je
dec
mov
test
lods
jecxz
rol
inc
mov
jmp
xchg
push
data16
mov
daa
ds
sub
sub
pop
jecxz
inc
pop
inc
xor
adc
mov
mov
xor
jge
aas
pop
sub
sub
xor
push
inc
pop
imul
add
and
test
adc
add
jle
mov
repz
lods
xchg
jle
sub
and
ds
test
adc
add
jle
mov
bnd
mov
and
aas
pop
test
adc
mov
mov
pop
(bad)
bnd
mov
repz
in
jle
sub
and
aas
pop
test
adc
add
jle
mov
repz
rcl
enter
mov
mov
jne
mov
mov
sub
stc
push
inc
fadd
push
inc
pop
sub
inc
mov
aam
cmp
inc
inc
sbb
bound
cmp
mov
dec
sub
call
call
loop
loope
inc
fdivr
test
xor
call
pop
pop
inc
fdivr
je
loope
inc
fdivr
retf
cmp
inc
cs
add
push
push
mov
adc
sub
cs
ins
cmp
sub
push
inc
fidivr
inc
mov
sub
jle
add
mov
and
aas
pop
sub
cmp
push
mov
fsubr
inc
mov
inc
sub
push
inc
fisub
test
adc
add
not
sub
aas
pop
sub
aas
pop
sub
jg
inc
cmp
out
push
mov
fsubr
dec
mov
inc
sub
push
inc
fisub
test
adc
mov
mov
pop
sub
adc
sub
adc
sub
jl
inc
fdivr
inc
fdiv
push
pop
jns
inc
mov
shr
mov
jge
dec
dec
adc
repz
and
jle
sub
aas
pop
sub
aas
pop
sub
jle
and
mov
inc
sub
movs
push
inc
fisub
test
adc
mov
mov
loopne
(bad)
jle
sub
aas
pop
sub
aas
pop
sub
jle
cmp
push
jg
mov
inc
sub
movs
int3
add
pop
pop
inc
adc
mov
mov
pop
mov
mov
pop
mov
mov
pop
sub
pop
inc
fcmovu
pop
inc
mov
aas
sub
mov
add
jle
inc
pop
popf
xor
fstp
fdivp
jle
inc
dec
dec
and
repz
inc
dec
dec
push
loope
jle
push
fiadd
push
inc
mov
test
imul
push
cdq
fwait
lock
fwait
imul
gs
mov
sub
and
sub
cmp
sub
adc
sub
jle
inc
fsubr
inc
mov
inc
sub
push
inc
(bad)
int
mov
pop
test
adc
ror
xchg
jle
sub
movs
push
inc
fdivr
add
dec
xor
push
bound
fidivr
and
scas
pop
pop
inc
fdivr
je
loope
inc
fdivr
je
ficom
ficom
inc
mov
and
inc
fadd
inc
mov
inc
sub
push
inc
(bad)
int
mov
pop
test
adc
mov
mov
rcr
mov
and
aas
pop
sub
cmp
sub
inc
jg
mov
pop
sub
pop
inc
fidivr
shl
retf
sahf
lock
les
pop
sub
jle
ins
sub
test
mov
xchg
push
inc
fdivr
je
ficom
fsubr
jp
cwde
pop
inc
mov
jg
mov
jg
mov
inc
sub
movs
push
inc
fisub
test
adc
mov
mov
out
mov
not
cmp
and
repz
inc
dec
dec
push
loope
jle
push
(bad)
pop
inc
mov
call
push
mov
pop
sub
sub
int
lock
inc
pop
cmp
mov
arpl
lock
inc
dec
dec
and
repz
inc
dec
dec
push
loope
jle
push
fcomp
jg
mov
pop
sub
pop
inc
fidivr
inc
loop
push
fwait
lock
fwait
imul
bound
aas
pop
sub
aas
pop
sub
aas
pop
sub
jle
jo
jle
sub
push
pop
inc
mov
jg
push
movs
push
inc
fdivr
xchg
nop
jle
loop
jecxz
inc
fdivr
je
loope
inc
fdivr
je
ficom
fsubr
pop
fidiv
inc
mov
mov
mov
jg
mov
inc
sub
int3
add
pop
pop
inc
adc
mov
mov
pop
mov
mov
pop
mov
mov
movaps
out
pop
inc
mov
add
mov
xchg
adc
mov
push
fwait
lock
inc
mov
pop
test
adc
mov
mov
pop
mov
mov
pop
mov
mov
movaps
jle
inc
fidivr
add
mov
xchg
adc
out
mov
mov
push
fwait
lock
inc
mov
pop
test
adc
add
not
sub
aas
pop
sub
cmp
sub
jle
inc
fsubr
inc
mov
inc
sub
push
inc
fidivr
add
jle
movs
xchg
jle
loop
loope
inc
fdivr
je
loope
inc
fdivr
je
ficom
fsub
and
mov
add
mov
xchg
adc
mov
push
fwait
lock
inc
mov
pop
test
adc
add
dec
mov
mov
pop
mov
mov
add
sub
inc
fcmovbe
push
inc
mov
or
mov
xchg
adc
popf
into
add
jle
inc
pop
or
(bad)
loop
jle
sbb
call
enter
mov
jnp
inc
enter
pop
in
test
fcomp
out
enter
call
ds
sbb
pop
inc
sub
dec
sub
push
out
enter
mov
mov
adc
jle
add
cs
test
fdivr
je
loope
inc
fdivr
retf
cmp
inc
cs
add
push
push
mov
adc
sub
cs
ins
cmp
sub
push
inc
fidivr
inc
mov
lds
jle
add
mov
and
aas
pop
sub
cmp
push
mov
fsubr
inc
mov
inc
sub
push
inc
fisub
test
adc
add
jle
sub
aas
pop
sub
aas
pop
sub
cmp
push
mov
fsubr
dec
mov
inc
sub
push
inc
fisub
test
adc
mov
mov
pop
sub
adc
sub
adc
sub
jl
inc
fdivr
inc
fdiv
push
pop
in
inc
mov
shr
mov
jge
dec
dec
adc
repz
mov
mov
and
aas
pop
sub
cmp
sub
adc
sub
jle
adc
mov
xchg
fwait
lock
inc
pop
xchg
or
(bad)
fdiv
jle
scas
stos
push
int
mov
pop
sub
jg
inc
loop
mov
xor
cmp
sub
jle
je
jecxz
inc
pop
jmp
sub
adc
jne
push
jg
mov
pop
mov
mov
ins
pop
mov
cld
push
fdivr
inc
fidiv
push
inc
mov
and
(bad)
popa
pop
inc
fdivr
je
loope
inc
fdivr
je
ficom
ficom
inc
mov
and
sub
mov
xchg
fwait
lock
inc
pop
sub
inc
mov
xchg
loopne
jle
mov
fdivr
je
loope
inc
fdivr
je
ficom
ficom
inc
mov
sub
cmps
push
mov
inc
mov
inc
sub
push
inc
(bad)
int
mov
pop
test
adc
add
cmp
repz
inc
dec
dec
push
loope
jle
push
(bad)
pop
inc
mov
jns
cmps
jg
inc
fidivr
inc
loop
inc
fwait
lock
fwait
imul
pop
mov
mov
adc
sub
aas
pop
sub
aas
pop
sub
jle
inc
fidivr
pop
inc
mov
jg
push
movs
push
inc
fdivr
loopne
jle
loop
out
inc
or
lock
xchg
jle
je
loope
inc
fdivr
je
ficom
fsubr
mov
adc
inc
fcomp
jg
mov
inc
sub
movs
int3
add
pusha
pop
inc
adc
pop
mov
mov
pop
mov
mov
pop
sub
push
scas
inc
mov
jg
mov
pop
sub
js
add
jle
inc
pop
pop
or
fld
inc
dec
dec
and
repz
inc
dec
dec
push
loope
jle
push
ficomp
icebp
inc
mov
jge
fidivr
inc
loop
imul
mov
std
pop
mov
mov
adc
sub
aas
pop
sub
aas
pop
sub
jle
mov
lods
push
pop
inc
mov
jg
imul
push
jle
lock
jle
loop
fst
fdivr
je
loope
inc
fdivr
je
ficom
fsub
ret
mov
pop
sub
jle
adc
out
mov
mov
push
fwait
lock
inc
mov
pop
test
adc
add
jle
sub
aas
pop
sub
cmp
sub
adc
sub
mov
push
fwait
lock
inc
mov
pop
test
adc
add
dec
mov
mov
pop
mov
mov
(bad)
(bad)
adc
sub
cs
ins
cmp
sub
jle
inc
mov
adc
mov
sub
and
sub
aas
pop
sub
jle
add
push
pop
inc
xor
jg
imul
dec
cmps
push
inc
fdivr
mov
fst
pop
retf
in
dec
(bad)
into
adc
cmp
enter
mov
or
push
std
sti
pop
loope
inc
(bad)
nop
dec
scas
dec
cmp
sti
enter
sub
jle
inc
fdivr
inc
fdivr
inc
mov
xchg
mov
test
pop
enter
mov
mov
jge
in
lea
jle
and
mov
and
jle
add
jp
inc
mov
out
mov
not
cmp
call
cs
cmc
lock
inc
mov
xchg
test
xor
fs
fdivr
xor
push
inc
cwde
lock
adc
(bad)
jb
xor
xchg
retf
cmps
dec
adc
fdivr
inc
aas
cmp
adc
pop
sub
jg
inc
xor
xchg
test
not
push
in
and
repnz
inc
mov
inc
inc
mov
mov
mov
pop
inc
fcmovu
cmps
add
sub
inc
mov
in
pop
mov
scas
dec
mov
pop
fadd
sahf
xchg
cmp
call
xor
push
stos
icebp
lock
les
xchg
and
jle
mov
mov
inc
(bad)
outs
jg
add
int3
aaa
jle
mov
stos
jle
ror
adc
mov
jle
les
xchg
adc
cmp
jp
push
fisubr
add
sub
inc
mov
out
inc
not
ror
adc
push
daa
lock
les
xchg
fst
jle
cmp
js
push
fidiv
xchg
inc
dec
sub
inc
mov
push
mov
push
sub
iret
push
inc
aas
sti
pop
mov
adc
inc
xor
call
ret
pop
int3
aaa
jle
mov
movs
jle
enter
enter
mov
adc
push
inc
aas
sti
pop
mov
fisubr
inc
xor
call
sahf
add
int3
aaa
jle
mov
movs
jle
ror
sbb
mov
jle
les
xchg
sub
jle
cmp
jb
push
ficomp
add
sub
inc
mov
push
mov
int3
push
inc
aas
sti
pop
mov
mov
mov
cmps
cmp
jmp
dec
sbb
adc
cmp
int3
aaa
jle
mov
movs
jle
sub
cmps
push
inc
fidiv
xchg
inc
dec
sub
add
cmp
or
push
inc
fidivr
mov
mov
dec
mov
xchg
ja
test
xor
icebp
enter
mov
xchg
sub
in
and
inc
enter
push
cmp
pop
(bad)
push
jp
adc
xchg
mov
in
xchg
pop
mov
call
ja
mov
mov
jle
test
in
and
jp
adc
fwait
xchg
lods
mov
inc
loope
inc
push
bound
xchg
inc
pop
inc
fimul
lods
inc
sub
inc
mov
rcr
jle
dec
mov
pop
fadd
lahf
aam
xchg
mov
dec
adc
repz
les
call
push
mov
xchg
cld
inc
xchg
mov
je
push
inc
aas
sti
cli
mov
add
xor
in
dec
adc
lock
les
call
push
mov
scas
in
jle
mov
not
enter
mov
sub
inc
add
int3
aaa
xchg
loopne
dec
cs
cmps
jle
ror
out
mov
fisub
add
sub
inc
mov
stos
mov
sub
jne
cmp
int3
aaa
xchg
loopne
dec
jmp
jle
ror
out
mov
fidiv
movs
add
sub
inc
mov
out
inc
not
ror
out
mov
ficom
movs
add
sub
inc
mov
stos
mov
sub
retf
pop
int3
aaa
xchg
loopne
dec
call
jle
ror
out
mov
fcmovbe
movs
add
sub
inc
mov
stos
mov
sub
mov
cmp
int3
aaa
xchg
loopne
dec
jmp
mov
enter
mov
jge
bound
xchg
movs
add
sub
inc
mov
stos
mov
sub
inc
push
cmp
int3
aaa
xchg
loopne
dec
cs
cmps
jle
ror
out
mov
ficomp
add
sub
inc
mov
addr16
jle
les
call
lods
dec
sbb
mov
adc
sub
xchg
mov
cmp
push
inc
xchg
mov
setbe
mov
mov
inc
xor
sahf
mov
cwde
sahf
les
call
mov
mov
jg
adc
test
xor
out
mov
aaa
movs
adc
inc
mov
xchg
cld
dec
sub
mov
xchg
mov
sub
dec
inc
sbb
mov
inc
xor
call
dec
aaa
push
push
inc
mov
xchg
mov
or
inc
mov
icebp
enter
mov
aaa
xchg
mov
imul
aaa
sub
dec
cs
stos
jle
ret
xchg
cld
dec
xchg
mov
repnz
inc
or
sahf
add
mov
fwait
mov
xchg
jmp
rol
mov
out
mov
(bad)
jl
inc
xor
fdiv
jle
xor
push
xchg
lock
imul
int3
aaa
sub
dec
call
pop
enter
enter
loopne
jle
pop
imul
aaa
sub
dec
cs
mov
jbe
cld
or
mov
xchg
mov
pop
pop
add
(bad)
movs
sbb
cmp
(bad)
mov
sbb
sub
sti
jmp
dec
add
fidivr
add
sub
inc
mov
rcl
sti
jmp
dec
add
aas
sti
jmp
dec
adc
loop
in
cdq
lock
les
call
push
mov
xchg
test
sub
dec
cs
cmps
jle
sub
jle
les
call
fmul
xchg
test
sbb
xchg
mov
jb
inc
test
jmp
xchg
mov
inc
mov
enter
mov
jbe
sbb
xchg
inc
dec
retf
out
mov
adc
sub
push
inc
aas
sti
jmp
dec
add
xor
push
inc
aas
sti
jmp
dec
add
aas
sti
jmp
dec
add
cmp
ret
mov
cmp
mov
adc
push
cmp
ret
mov
adc
mov
dec
repz
mov
adc
inc
mov
enter
mov
pop
xchg
mov
dec
sub
add
sub
inc
mov
rcl
sti
jmp
dec
add
cmp
fbstp
dec
sub
in
movs
push
mov
pushf
cld
jp
call
push
in
push
test
cmp
jecxz
dec
adc
mov
pop
mov
mov
mov
call
xchg
popa
push
mov
call
cmc
stos
mov
sub
push
pop
sub
xchg
mov
fdivr
hlt
inc
xchg
mov
mov
pop
sub
jle
test
aas
sti
jmp
dec
add
dec
cmp
ret
sahf
cmp
call
mov
mov
push
pop
inc
mov
push
ss
jle
sbb
in
mov
jnp
adc
div
stc
(bad)
ins
pop
inc
pop
lds
inc
mov
inc
push
or
daa
mov
push
aam
es
push
inc
fdivr
inc
mov
pop
test
cmp
mov
dec
sbb
test
fdivr
dec
cmps
jle
sbb
xchg
mov
jle
add
frstor
fdivp
jle
inc
loop
push
inc
es
inc
cmp
mov
sbb
mov
mov
jne
mov
jg
mov
pop
sub
fist
pop
pop
push
inc
mov
and
jle
test
xor
jg
mov
pop
int3
aaa
iret
stc
mov
mov
jle
inc
(bad)
mov
mov
xchg
lock
sub
mov
pop
xchg
pop
mov
pop
ret
mov
fs
retf
dec
jnp
cmc
lock
adc
pop
inc
pop
fld
inc
mov
les
outs
inc
enter
or
mov
bound
sahf
xchg
mov
and
sub
mov
pop
or
mov
mov
mov
xchg
(bad)
mov
fwait
mov
xchg
jmp
rol
je
sahf
mov
jmp
aaa
int
mov
add
popa
xor
jle
les
xchg
call
push
mov
sahf
add
mov
sub
lods
dec
and
rcl
cmp
sub
push
inc
aas
sti
mov
mov
lea
mov
jge
aas
sti
mov
aaa
iret
stc
mov
mov
loope
mov
ja
call
mov
jne
call
inc
aas
sti
mov
mov
pop
inc
fdivr
je
jle
rol
inc
mov
stos
cdq
lock
rcl
cmp
sub
inc
fidivr
mov
mov
mov
mov
call
dec
adc
mov
pop
mov
fstp
push
pop
sub
fist
fidivr
addr16
jle
xor
jle
enter
enter
imul
add
jle
daa
pop
push
mov
rcl
cmp
sub
inc
ficomp
add
jle
cld
push
xchg
call
xchg
lock
bound
fstp
push
pop
sub
fist
fidivr
pop
fcomip
jle
push
mov
ds
dec
rcl
mov
pop
mov
test
sub
adc
sub
ds
sub
pop
test
cmp
mov
sub
jle
xchg
(bad)
call
add
cs
xchg
inc
dec
mov
call
mov
add
inc
push
inc
mov
stos
hlt
pop
sub
test
fdivr
add
cs
fimul
(bad)
cmc
pop
mov
cld
pop
hlt
jle
xchg
(bad)
call
add
cs
xchg
gs
mov
call
mov
add
inc
push
inc
mov
stos
hlt
pop
sub
test
fdivr
add
cs
fimul
(bad)
cmc
pop
adc
inc
mov
(bad)
cmc
pop
jne
inc
mov
ret
xor
sti
cmps
lods
dec
sbb
push
movs
push
inc
cmp
mul
xchg
push
inc
cmp
fcmovne
mov
push
mov
push
sbb
adc
test
cmp
ret
sub
jle
clc
mov
scas
xchg
stos
data16
inc
jne
retf
inc
mov
pop
sub
jle
add
mov
pop
inc
cmp
rol
jle
inc
mov
push
mov
cmp
inc
mov
pop
mov
mov
pop
sub
adc
sub
jle
mov
push
movs
push
inc
fdivr
inc
mov
loope
inc
(bad)
cmps
add
xchg
push
dec
mov
jge
pop
fsub
pop
or
pop
inc
mov
outs
(bad)
iret
add
jle
aas
push
pop
adc
sbb
not
rcr
inc
mov
aad
mov
jge
loop
sub
sub
mov
mov
iret
push
aaa
(bad)
cli
mov
push
nop
call
cmc
lock
cmp
pop
sub
retf
fidivr
inc
xor
xchg
test
std
xor
jne
jnp
lock
inc
mov
call
sbb
iret
enter
jmp
fdivr
inc
ficom
pop
sub
jle
test
aas
sti
mov
sub
or
jge
pop
xchg
sbb
jmp
mov
push
jecxz
mov
jge
dec
dec
pop
fdivp
jle
sbb
push
movs
loop
lods
dec
mov
xchg
or
repz
sbb
adc
sub
call
mov
and
outs
pop
adc
fwait
xchg
lods
mov
loope
inc
(bad)
stos
inc
inc
and
mov
pushf
add
std
out
push
mov
jle
dec
xor
push
inc
mov
fisttp
jle
push
mov
pop
dec
ss
inc
mov
add
mov
arpl
outs
push
inc
mov
fwait
in
mov
jg
inc
mov
jle
fdivr
push
mov
lds
pop
inc
fimul
and
push
cmp
test
cmp
sti
mov
mov
sahf
xchg
xchg
int3
add
sub
mov
aaa
xchg
jmp
sub
mov
mov
jno
les
mov
mov
neg
push
inc
pop
mov
inc
mov
xlat
xor
dec
sub
mov
cmp
(bad)
mov
jp
call
pop
cmp
repz
outs
sub
xor
jmp
sub
sub
sub
mov
push
sub
cdq
sti
iret
mov
mov
pop
mov
mov
mov
mov
jno
inc
xor
cmc
lock
dec
ss
jae
lock
sub
cmp
rol
inc
mov
xor
xor
cmc
lock
xor
cs
mov
xor
cmc
lock
dec
aaa
repnz
and
test
jmp
ins
inc
mov
sahf
mov
adc
add
sti
jo
mov
jge
pop
jns
inc
mov
dec
inc
mov
mov
sub
jbe
dec
dec
or
test
or
mov
lock
mov
xchg
inc
cmp
add
aaa
xchg
mov
cwde
jle
jp
out
mov
mov
push
jp
or
jp
dec
mov
mov
and
mov
jp
jmp
mov
mov
mov
or
fidiv
mov
mov
mov
sbb
push
add
jle
sub
popf
sbb
cmc
xchg
mov
mov
mov
mov
pop
jp
fidiv
mov
mov
mov
sbb
add
inc
dec
or
test
fiadd
bound
loope
inc
mov
cmp
jle
cmps
cmp
iret
mov
xor
retf
mov
pop
sahf
jmp
sub
loop
cdq
dec
mov
sahf
les
call
pop
mov
(bad)
pop
mov
pop
enter
enter
inc
mov
call
and
test
xor
push
mov
xchg
adc
sub
jle
inc
pop
sub
mov
and
mov
pop
inc
pop
mov
inc
mov
out
jo
not
retf
aaa
jg
mov
dec
sub
mov
ret
inc
mov
xchg
(bad)
jle
inc
aas
sti
push
mov
xchg
mov
mov
xchg
dec
mov
call
mov
add
inc
push
inc
mov
dec
mov
mov
call
ror
xchg
test
jle
popa
fdivr
inc
fimul
add
je
inc
dec
dec
xchg
loopne
jle
xor
jle
test
jnp
inc
or
sub
mov
enter
mov
aaa
jg
mov
inc
sub
loop
cmp
inc
sub
loop
xchg
dec
mov
xchg
test
jle
les
and
test
xor
push
mov
xchg
adc
sub
jle
inc
pop
sub
pop
daa
ds
test
pop
mov
inc
mov
call
adc
dec
std
out
push
(bad)
pop
jge
fdivr
cmps
gs
sub
jle
je
jmp
inc
pop
mov
inc
mov
(bad)
inc
mov
rol
mov
call
dec
add
pop
mov
mov
call
cmp
xchg
adc
sub
jle
inc
pop
popf
push
inc
mov
and
ds
test
pop
cld
adc
(bad)
xchg
inc
dec
sub
mov
rol
mov
aas
sti
push
mov
aaa
mov
mov
push
pop
int3
aaa
mov
mov
mov
outs
jg
mov
pop
int3
aaa
jg
mov
xor
push
inc
pop
sbb
inc
dec
sub
inc
fdivr
xchg
pop
sub
jle
je
fist
pop
imul
inc
mov
xchg
scas
mov
sti
push
mov
aaa
mov
mov
push
pop
int3
aaa
mov
mov
mov
outs
jg
mov
pop
int3
aaa
jg
mov
sahf
loope
inc
pop
jmp
stos
inc
dec
sub
inc
fdivr
jmp
mov
adc
je
loope
inc
pop
rcr
inc
mov
mov
mov
sahf
mov
aas
sti
push
mov
aaa
mov
mov
gs
int3
aaa
mov
mov
mov
outs
jg
mov
pop
int3
aaa
jg
mov
call
inc
mov
stos
inc
dec
sub
inc
fdivr
sub
pop
sub
jle
je
loope
inc
pop
cmp
inc
mov
cs
mov
call
mov
add
inc
push
inc
mov
pop
sub
jle
and
jle
mov
mov
add
inc
mov
pop
xchg
sub
jl
enter
sub
mov
into
jp
js
pop
jge
fdivr
ins
gs
sub
jle
je
loope
inc
pop
lods
adc
xchg
rol
jle
les
call
mov
mov
scas
enter
enter
inc
dec
sub
mov
lahf
cmps
push
inc
aas
sti
loop
dec
add
xor
pop
inc
aas
sti
push
mov
xchg
add
jle
cld
mov
call
sub
test
(bad)
in
mov
pop
mov
mov
dec
inc
mov
dec
aaa
sub
dec
jle
jl
enter
sub
mov
into
jp
js
pop
jge
fdivr
scas
fs
sub
jle
je
loope
inc
pop
adc
xchg
sbb
jle
les
mov
dec
sub
ror
mov
mov
cmp
call
repz
mov
sub
add
sub
inc
mov
rcl
ror
mov
enter
mov
dec
sub
sub
adc
sub
mov
mov
add
call
inc
fdivr
hlt
inc
sub
pop
fst
inc
mov
sub
push
cmp
inc
(bad)
cmp
inc
xor
push
inc
mov
call
jno
ds
mov
dec
xchg
int
mov
jge
aas
sti
out
dec
add
lock
hlt
inc
sub
pop
rcl
mov
call
adc
dec
adc
int3
daa
mov
mov
das
mov
mov
inc
sub
pop
in
adc
adc
int3
aaa
mov
mov
fimul
mov
test
dec
retf
jecxz
dec
cmp
mov
mov
test
inc
fdivr
inc
fdivr
inc
fidivr
inc
repnz
aaa
shl
jle
clc
mov
pop
enter
mov
push
not
retf
jmp
adc
sub
sub
inc
aas
jae
jecxz
jle
mov
xchg
jge
jle
mov
aas
jmp
mov
(bad)
mov
mov
mov
test
fdivr
les
call
sub
push
inc
dec
retf
jecxz
dec
cmp
mov
dec
xchg
gs
mov
rol
push
inc
mov
pop
inc
cmp
jge
fdivr
sub
retf
cmps
push
inc
fisubr
mov
inc
mov
inc
ds
inc
dec
dec
pop
fdivp
jle
xchg
mov
pop
stc
sbb
inc
inc
cdq
sahf
les
call
push
dec
or
mov
mov
popf
adc
and
jnp
pop
inc
out
bnd
inc
pop
in
bound
pop
sbb
shl
out
inc
dec
not
retf
sub
jle
dec
aaa
scas
pop
inc
mov
push
mov
jle
jp
cli
mov
mov
sbb
xchg
mov
jle
mov
dec
not
jp
xchg
mov
mov
sbb
xchg
mov
mov
xchg
inc
mov
sub
xor
push
inc
(bad)
jne
je
loope
inc
pop
adc
inc
mov
and
aas
pop
xor
and
test
cmp
jecxz
jne
and
ds
xor
and
test
mov
fdivp
jle
dec
dec
dec
aaa
fdivp
jle
ins
mov
pop
jp
pop
mov
mov
add
(bad)
push
mov
dec
dec
dec
(bad)
fdiv
jle
push
mov
pop
jp
pop
mov
mov
or
(bad)
push
mov
push
dec
dec
xchg
loopne
jle
mov
jle
stos
mov
not
cmp
(bad)
fdiv
jle
inc
cmp
aam
jle
je
fist
(bad)
js
pop
mov
push
inc
mov
fdivp
jle
inc
cmp
fdivp
jle
scas
jg
pop
inc
mov
aam
jle
inc
cmp
shl
jle
je
loope
inc
(bad)
js
pop
retf
inc
mov
fdivp
jle
inc
cmp
fdiv
jle
je
fist
(bad)
js
pop
scas
loope
inc
mov
or
mov
mov
jp
inc
pop
js
xchg
dec
mov
pop
inc
dec
pop
pop
mov
jle
shl
pop
sbb
mov
pop
inc
dec
pop
pop
mov
jle
shl
pop
add
mov
pop
inc
dec
pop
aaa
mov
jle
shl
pop
cmp
mov
pop
inc
dec
pop
daa
mov
jle
shl
pop
and
mov
pop
inc
out
repnz
xchg
test
xchg
inc
xor
enter
test
xor
push
add
xchg
push
push
xor
xor
mov
or
ret
bound
or
push
add
or
sub
jle
inc
in
pop
adc
clc
mov
jmp
sti
inc
mov
outs
pop
inc
aaa
jp
jl
outs
pop
inc
rcl
mov
cmp
xor
mov
call
mov
repz
mov
and
imul
mov
xor
jp
dec
mov
pop
inc
dec
pop
push
mov
jle
shl
pop
push
mov
jle
shl
pop
pop
mov
jle
shl
pop
pop
mov
jle
shl
pop
inc
mov
jle
shl
pop
inc
mov
jle
shl
pop
dec
mov
jle
shl
pop
dec
mov
jle
shl
pop
ja
lock
shl
pop
jae
lock
shl
pop
jg
lock
shl
pop
jnp
lock
shl
pop
addr16
jle
shl
pop
arpl
mov
pop
inc
dec
pop
outs
mov
jle
shl
pop
imul
jle
inc
dec
pop
xchg
mov
jle
shl
pop
xchg
mov
jle
shl
pop
lahf
mov
jle
shl
pop
fwait
mov
jle
shl
pop
xchg
mov
pop
inc
dec
pop
xor
jle
inc
dec
pop
(bad)
mov
jle
shl
pop
mov
mov
pop
inc
dec
pop
mov
lock
shl
pop
mov
lock
shl
pop
mov
shl
pop
mov
shl
pop
cmps
mov
jle
shl
pop
mov
shl
pop
scas
mov
jle
shl
pop
stos
mov
jle
shl
pop
xlat
mov
jle
shl
pop
shl
mov
pop
inc
dec
pop
fbstp
mov
pop
inc
dec
pop
(bad)
mov
pop
inc
dec
pop
(bad)
mov
jle
shl
pop
ret
mov
jle
shl
pop
iret
mov
jle
shl
pop
retf
mov
jle
shl
pop
div
mov
pop
inc
dec
pop
repz
jle
shl
pop
push
mov
pop
inc
dec
pop
sti
mov
jle
shl
pop
out
mov
jle
shl
pop
jmp
lock
shl
pop
pop
mov
jle
shl
pop
adc
mov
pop
inc
dec
pop
pop
mov
jle
shl
pop
sbb
mov
pop
inc
dec
pop
pop
mov
jle
shl
pop
add
mov
pop
inc
dec
pop
(bad)
lock
shl
pop
or
mov
pop
inc
dec
pop
aaa
mov
jle
shl
pop
xor
mov
pop
inc
dec
pop
aas
mov
jle
shl
pop
cmp
mov
pop
inc
dec
pop
daa
mov
jle
shl
pop
and
mov
pop
inc
dec
pop
das
mov
jle
shl
pop
sub
mov
pop
inc
dec
pop
push
mov
jle
shl
pop
push
mov
jle
shl
pop
pop
mov
jle
shl
pop
pop
mov
jle
shl
pop
inc
mov
jle
shl
pop
inc
mov
jle
shl
pop
dec
mov
jle
shl
pop
dec
mov
jle
shl
pop
ja
lock
shl
pop
jae
lock
shl
pop
addr16
jle
shl
pop
arpl
mov
pop
inc
dec
pop
outs
mov
jle
shl
pop
imul
jle
inc
dec
pop
xchg
mov
jle
shl
pop
fwait
mov
jle
shl
pop
xchg
mov
pop
inc
dec
pop
xor
jle
inc
dec
pop
(bad)
mov
jle
shl
pop
mov
mov
pop
inc
dec
pop
mov
lock
shl
pop
mov
lock
shl
pop
mov
shl
pop
mov
shl
pop
scas
mov
jle
shl
pop
stos
mov
jle
shl
pop
xlat
mov
jle
shl
pop
shl
mov
pop
inc
dec
pop
fbstp
mov
pop
inc
dec
pop
(bad)
mov
pop
inc
dec
pop
(bad)
mov
jle
shl
pop
ret
mov
jle
shl
pop
iret
mov
jle
shl
pop
retf
mov
jle
shl
pop
div
mov
pop
inc
dec
pop
repz
jle
shl
pop
push
mov
pop
inc
dec
pop
sti
mov
jle
shl
pop
out
lock
shl
pop
jecxz
lock
shl
pop
out
mov
jle
shl
pop
jmp
lock
.byte
mov
pop
inc
