inc
loopne
call
and
jae
push
push
clc
add
clc
je
add
and
shl
jbe
call
dec
adc
and
adc
inc
cwde
push
and
xor
clc
push
sub
dec
push
add
add
ins
add
clc
push
and
push
neg
inc
shr
rcl
and
jae
and
dec
sub
jo
xchg
jae
inc
es
and
add
and
fs
arpl
js
sub
jecxz
inc
cli
lds
inc
es
js
clc
gs
adc
cmp
rcl
es
lods
jae
and
push
arpl
in
jae
pusha
jmp
add
push
mov
lea
jae
test
add
and
and
stos
pusha
std
clc
and
push
jae
jo
clc
and
call
and
add
dec
sbb
push
jae
adc
(bad)
lods
sbb
dec
adc
push
jae
jp
mov
cs
dec
jg
in
pop
pop
adc
pop
(bad)
out
lock
pushf
sbb
jae
fwait
jecxz
out
mov
push
call
jno
jnp
pop
sbb
sub
call
fisub
mov
push
inc
dec
jnp
jae
test
sub
adc
adc
dec
sbb
mov
push
xor
and
adc
loopne
adc
and
push
or
and
rol
daa
popf
adc
and
out
pop
or
inc
xor
push
jae
pop
outs
jae
cmps
aad
fist
add
pop
and
test
cs
dec
cli
int3
js
lock
and
adc
into
stc
ror
out
xchg
js
adc
and
adc
and
out
sbb
add
and
cli
add
cmps
std
arpl
inc
cli
inc
int
stos
sbb
ja
sub
adc
or
jae
and
adc
add
push
jae
add
or
and
push
jae
adc
inc
add
push
jae
add
cmp
adc
in
and
enter
and
rcl
and
es
and
fwait
cmps
pop
adc
jae
int3
sti
pop
out
mov
and
jnp
dec
and
adc
dec
xor
pusha
and
adc
jecxz
jmp
lock
fs
in
add
pushf
not
xchg
out
mov
sbb
and
out
mov
stc
mov
xlat
mov
jae
jbe
lahf
pop
and
adc
mov
push
jae
mov
out
and
or
jae
cmps
aad
sbb
push
adc
loopne
cli
push
mov
and
movs
xchg
adc
cwde
das
popf
jle
and
loope
(bad)
cwde
mov
jnp
mov
mov
call
xlat
ret
aam
(bad)
inc
fsubr
(bad)
fld
and
jae
and
jnp
fist
mov
stc
out
and
out
and
rcr
fist
mov
jnp
fist
mov
stc
xlat
pop
and
fs
jae
sub
pop
and
rcr
and
retf
and
cwde
mov
ret
shr
sub
lds
lahf
fild
sbb
lods
(bad)
(bad)
fld
cmp
out
push
sub
fs
adc
and
inc
loopne
and
fisub
and
fs
jae
lods
xlat
mov
stc
jae
and
adc
inc
loopne
cli
jne
loop
and
and
inc
cli
lds
inc
clc
push
sub
ss
xor
add
push
mov
ins
adc
and
bound
xchg
push
fsub
call
lods
inc
mov
and
bound
call
sub
push
int
sbb
mov
shl
sub
dec
jecxz
add
sbb
xchg
call
pop
adc
inc
jmp
fsub
and
adc
fsubr
mov
mov
fsubr
xchg
mov
and
in
jl
pop
out
mov
popf
out
mov
and
jmp
cli
jne
dec
sub
test
and
fwait
aaa
push
adc
jae
clc
push
sub
cli
clc
and
cli
jecxz
adc
in
adc
clc
and
cli
jecxz
push
jnp
in
mov
and
addr16
mov
adc
xor
jnp
xor
sti
mov
adc
ficom
pop
xor
and
xor
mov
and
jae
ficom
(bad)
movs
and
mov
into
pop
cli
clc
or
cli
jecxz
dec
sub
out
cli
lds
ja
dec
jg
pusha
in
sbb
sub
clc
fstp
fcom
cwde
push
int
or
and
ret
xor
sti
mov
and
mov
or
cli
lock
mov
out
sti
xor
push
dec
(bad)
pop
xbegin
adc
cwde
fsubr
or
jnp
mov
jno
inc
and
js
mov
fnstcw
ss
push
jae
adc
cwde
push
int
or
and
ret
xor
sti
mov
and
mov
or
cli
lock
mov
out
sti
xor
push
dec
(bad)
pop
(bad)
mov
scas
push
jnp
and
jae
push
in
and
and
fdiv
jae
inc
clc
push
xor
push
pop
push
imul
in
cmp
aad
and
jnp
fwait
adc
sub
push
adc
loopne
cli
bound
into
xadd
adc
loopne
dec
sub
out
cli
lds
jbe
call
push
cwde
mov
fstp
mov
and
xchg
and
fwait
push
fsubr
mov
sub
dec
mov
stc
adc
(bad)
and
jae
outs
(bad)
out
lock
cli
jg
inc
sub
shl
cli
fstp
mov
jae
inc
clc
jge
scas
int3
das
xor
cli
fmul
cli
out
fs
arpl
and
sbb
cmp
jae
jae
push
sub
sbb
int
add
out
adc
and
jae
aad
sub
test
scas
fs
call
dec
lods
jmp
lock
and
mov
imul
sbb
and
add
jae
cwde
mov
fstp
inc
stos
cmp
in
add
and
shl
test
jbe
and
push
sbb
or
mov
and
jmp
lock
and
sbb
int
add
and
jns
shl
fwait
xchg
jae
out
test
push
adc
in
test
mov
sbb
clc
(bad)
push
jae
and
lods
pusha
loope
enter
and
jl
in
ss
adc
sbb
(bad)
push
jae
and
inc
stos
xor
adc
lods
shl
xlat
push
inc
jae
adc
jp
sub
jp
push
adc
loopne
cli
jl
frstor
mov
(bad)
mov
shr
jle
mov
lods
hlt
retf
adc
bound
jbe
and
push
and
or
repnz
(bad)
jae
push
push
lock
and
adc
sub
idiv
and
jae
pusha
sbb
jae
std
adc
mov
push
psrld
and
xchg
push
jae
lods
leave
test
lods
xchg
stos
(bad)
out
cli
jecxz
loop
xor
adc
mov
inc
mov
stc
ret
push
and
or
rcr
mov
dec
mov
ficom
mov
and
(bad)
shl
call
and
aam
call
scas
sub
cmps
ins
xchg
sub
lock
fst
jl
adc
jae
cmps
je
and
mov
and
leave
inc
clc
lods
ror
scas
push
xchg
and
je
add
shl
pusha
jmp
cli
jecxz
cli
adc
add
and
adc
(bad)
cwde
idiv
(bad)
mov
lds
jae
pusha
jmp
repz
adc
gs
(bad)
push
lds
retf
adc
sbb
ja
mov
cwde
fsub
jp
push
jb
mov
int
xor
scas
push
xor
mov
adc
and
leave
test
lods
xchg
cmps
(bad)
out
cli
jecxz
ins
(bad)
and
(bad)
movs
stc
out
(bad)
fbstp
out
xchg
adc
stos
sbb
adc
pusha
in
repnz
(bad)
push
push
xor
adc
adc
sub
idiv
(bad)
mov
cwde
mov
sbb
pop
sub
clc
adc
inc
jnp
pusha
jmp
cli
movs
cmc
out
(bad)
fild
fsubr
xchg
jge
(bad)
lock
and
shl
test
jbe
and
and
in
sbb
inc
(bad)
lods
loop
push
fldcw
test
lods
push
mov
movs
sub
in
and
push
mov
fst
jae
and
inc
jae
shl
cli
rcr
or
pop
lock
sbb
fs
push
sbb
push
adc
clc
gs
inc
sbb
cmp
and
cmp
adc
test
ficomp
mov
sub
mov
ret
aam
(bad)
lock
fst
pop
je
inc
ret
bound
adc
fsubr
inc
sti
into
xor
out
or
sub
pop
and
loop
and
add
gs
sub
sbb
push
and
je
and
xor
sbb
adc
out
mov
cmps
je
and
add
adc
leave
movs
adc
lods
jmp
lahf
test
and
jnp
dec
and
adc
popa
and
adc
sar
dec
and
and
and
shl
call
and
push
fldcw
xor
push
sub
fs
pop
arpl
popf
int
and
stc
clc
gs
mov
and
jnp
dec
cmp
fs
jae
jae
fisub
xlat
popa
jae
jp
sub
out
cli
lds
stc
outs
push
and
stos
xchg
or
jecxz
adc
and
mov
fsubr
(bad)
fbld
adc
test
ficomp
jo
pop
mov
fimul
loopne
xchg
and
and
adc
(bad)
cwde
not
nop
cwde
jp
adc
and
adc
test
fiadd
movs
loope
(bad)
fbstp
mov
in
xchg
dec
mov
push
fdivp
jecxz
fs
lods
leave
test
lods
xchg
ret
(bad)
out
cli
jecxz
xchg
xchg
(bad)
out
and
jne
dec
fbstp
cli
fstp
mov
adc
mov
fiadd
test
push
jae
mov
inc
clc
sbb
add
jae
pusha
in
jp
sub
shl
jae
test
mov
fucomi
and
jne
dec
fbstp
cli
fstp
mov
mov
jns
nop
adc
int
mov
ficom
xor
cwde
jmp
stos
adc
cwde
mov
mov
mov
nop
addr16
rol
and
out
and
jne
dec
fbstp
cli
fstp
mov
mov
ja
popf
fwait
out
(bad)
fbld
adc
cwde
in
mov
ficom
jl
das
sbb
dec
adc
cmps
(bad)
push
jae
mov
inc
fwait
call
cli
out
cwde
into
mov
out
mov
and
out
(bad)
fistp
out
mov
and
adc
xchg
xchg
(bad)
fucomi
xor
xchg
mov
fucomi
and
mov
add
and
cmps
test
adc
nop
adc
cmp
div
xlat
(bad)
cwde
test
dec
push
loope
jae
sub
and
and
and
shr
mov
ficom
jae
add
dec
fsub
xor
test
mov
fucomi
and
cmp
mov
cmps
aad
sbb
push
sbb
and
jae
lods
leave
jb
lods
rcr
and
and
adc
mov
ficom
jae
add
dec
shl
and
out
and
hlt
in
fbld
out
jae
push
sbb
and
jae
dec
adc
clc
xlat
push
jae
jne
xor
int
xchg
ficom
mov
and
jns
shl
(bad)
popf
fsubr
(bad)
fbstp
cld
aad
out
lock
sub
fbld
xchg
(bad)
fucomi
jb
and
fild
nop
adc
mov
ficom
jae
add
dec
shl
and
out
and
push
aad
sbb
push
sbb
and
jae
movs
loop
inc
and
scas
and
adc
mov
ficom
jae
das
(bad)
test
jae
and
fst
adc
jo
push
jae
fsub
mov
cmps
aad
sbb
push
sbb
and
jae
dec
adc
adc
jae
jne
xor
int
xchg
ficom
mov
and
jns
shl
(bad)
popf
fsubr
(bad)
fbstp
enter
lock
sub
fbld
adc
mov
cwde
in
mov
fiadd
mov
loope
dec
(bad)
adc
das
(bad)
test
jae
cmp
repnz
movs
test
(bad)
fild
(bad)
fbld
jecxz
and
ret
popa
and
out
lock
sub
fbld
adc
push
xlat
push
jae
jne
xor
int
xchg
ficom
mov
and
mov
jae
and
adc
cwde
mov
push
ss
pop
in
adc
mov
inc
fwait
pop
fucomip
mov
add
and
daa
nop
addr16
dec
loope
jae
into
fdiv
and
out
mov
int3
cmp
and
cwde
mov
std
adc
clc
(bad)
mov
xchg
scas
(bad)
out
and
lods
push
(bad)
neg
and
jae
mov
inc
clc
movs
std
out
(bad)
fbstp
dec
fbstp
cli
fst
jae
in
imul
and
jae
add
(bad)
adc
clc
or
cli
jecxz
mov
(bad)
out
jae
cwde
test
jl
fwait
adc
popf
cmps
push
and
popf
mov
ficomp
rcr
fucomi
fs
xchg
fcmovnu
fucomi
jb
and
out
(bad)
fbstp
test
xchg
stos
(bad)
out
and
lods
leave
inc
clc
lods
sar
movs
icebp
out
(bad)
fbstp
retf
shl
clc
movs
mov
call
and
sbb
and
out
mov
xchg
cmps
(bad)
out
and
and
in
cli
clc
shl
cli
movs
lods
out
(bad)
fild
jl
and
jae
test
(bad)
out
and
fiadd
sbb
inc
dec
test
sub
jecxz
inc
jae
into
aaa
(bad)
movs
int
(bad)
fbstp
idiv
(bad)
mov
sub
lods
leave
jb
lods
shl
pop
fst
jl
out
adc
movs
cli
push
sub
adc
movs
shr
fbstp
test
out
mov
sub
sub
jl
dec
adc
movs
cli
add
and
out
(bad)
fbld
out
mov
mov
mov
fucomi
and
out
jg
and
std
mov
ficom
call
stc
test
leave
cli
jecxz
movs
lahf
(bad)
out
(bad)
movs
fsubr
(bad)
fbstp
push
shl
(bad)
movs
fsubr
(bad)
fbstp
stos
dec
and
cwde
stos
and
cwde
mov
loop
jecxz
fucomi
jno
scas
xchg
lahf
(bad)
out
cli
movs
mov
xchg
rcr
fucomi
and
ficom
retf
adc
sbb
leave
add
(bad)
pushf
adc
(bad)
stos
cwde
stc
mov
fiadd
pop
fiadd
test
and
cli
jecxz
ins
(bad)
and
xchg
add
test
cwde
stos
and
cwde
mov
mov
inc
sbb
mov
inc
clc
sbb
add
jae
pusha
in
jp
sub
retf
xor
jae
test
xlat
(bad)
out
and
fiadd
sbb
inc
pop
test
sub
test
clc
scas
and
pushf
push
and
leave
cli
jecxz
leave
cli
jecxz
(bad)
neg
out
mov
and
out
mov
ficomp
jo
movs
or
fucomi
lock
xor
adc
(bad)
mov
xchg
pop
out
(bad)
fbld
test
and
lods
fcmovnu
fucomi
and
sbb
and
lods
push
(bad)
stos
test
and
adc
sbb
movs
test
jns
shl
clc
movs
lods
out
(bad)
fbstp
dec
fbstp
sub
and
nop
cwde
cmps
xor
jae
in
div
and
jae
cwde
popf
mov
ficom
jl
sub
jae
test
sbb
fucomi
and
out
(bad)
aam
out
mov
fiadd
sbb
inc
push
test
and
cli
jecxz
ins
(bad)
and
xchg
test
and
jns
(bad)
sbb
adc
cmps
lods
add
fucomi
jae
mov
pushf
test
mov
movs
add
fucomi
fst
out
mov
bound
mov
out
into
dec
(bad)
mov
sub
mov
aad
(bad)
fbld
jae
lods
leave
inc
clc
lods
rcr
and
movs
(bad)
fucomi
(bad)
movs
fsubr
(bad)
fbstp
shl
(bad)
movs
fsubr
(bad)
fbstp
ret
dec
and
pushf
(bad)
fstp
out
mov
sbb
jae
fcomp
mov
nop
jne
fstp
pushf
test
mov
xchg
mov
fucomi
(bad)
movs
and
mov
fiadd
cmovns
jae
loope
cli
clc
or
cli
jecxz
adc
(bad)
fbstp
sub
addr16
movs
fsubr
(bad)
fbstp
daa
dec
and
cwde
stos
adc
cwde
mov
cwde
popf
mov
ficom
pop
and
out
and
ficom
movs
sub
(bad)
fucomi
jl
aaa
out
mov
scas
xchg
fcmovnu
fucomi
and
lods
leave
test
lods
xchg
(bad)
(bad)
out
cli
jecxz
xchg
rcr
fucomi
and
ficom
movs
shr
fistp
lahf
(bad)
out
jl
cli
in
mov
cmps
lods
sbb
out
jae
and
neg
(bad)
mov
movs
ror
and
out
(bad)
fbstp
inc
fbstp
lock
cmc
out
(bad)
fbld
ror
inc
jnp
out
sbb
and
out
mov
push
sbb
(bad)
fbstp
inc
fbstp
clc
movs
std
out
(bad)
fbstp
inc
fbstp
clc
movs
stc
out
(bad)
fbstp
inc
fbstp
cli
clc
or
cli
jecxz
xchg
xchg
(bad)
out
and
int3
lods
test
fimul
jnp
shl
test
lods
aad
and
arpl
jne
and
cwde
push
and
or
jbe
cwde
push
enter
gs
inc
ins
stos
pop
cmc
cli
ficom
cli
push
rcl
fsub
ins
xchg
test
push
cmc
sbb
adc
mov
jae
cmps
aad
enter
fbld
adc
daa
cli
cmp
and
cli
push
sar
out
in
mov
(bad)
cwde
adc
and
icebp
mov
inc
stc
mov
stc
mov
or
test
lods
push
stos
stos
pop
leave
cli
pop
stc
cli
out
mov
and
out
mov
fimul
jnp
call
and
adc
lds
adc
cli
out
xchg
mov
and
jns
add
dec
adc
test
inc
adc
frstor
mov
jo
xchg
mov
scas
dec
jnp
mov
fld
in
jbe
loope
jae
sti
xchg
push
and
push
jae
lods
fld
in
mov
cmp
sub
popa
and
adc
call
loop
lahf
lea
and
mov
jae
lods
loope
stos
and
adc
push
fisub
sbb
and
adc
adc
fidiv
jae
sub
fsub
push
call
imul
mov
pop
lock
cli
gs
jbe
mov
leave
jno
jae
movs
sbb
(bad)
adc
(bad)
and
jl
popa
adc
rcl
mov
push
sub
jb
sbb
pop
mov
popf
out
and
std
cli
loope
push
jno
and
push
jae
sub
jae
ficom
in
adc
and
clc
and
and
adc
les
repz
xor
adc
xor
out
mov
rcl
(bad)
adc
and
mov
add
clc
xchg
add
cmp
clc
jne
(bad)
test
sub
clc
lea
and
arpl
movs
sbb
(bad)
adc
gs
ret
popa
and
out
test
and
je
in
mov
leave
pop
dec
jae
movs
sbb
(bad)
adc
and
fisub
adc
and
cwde
mov
(bad)
out
mov
rcl
(bad)
adc
and
mov
test
jae
movs
sbb
(bad)
adc
in
and
mov
and
out
mov
ficom
in
adc
movs
clc
jmp
and
mov
jns
and
push
jae
and
fsub
test
test
lods
push
xchg
test
mov
pusha
int3
div
and
adc
loopne
adc
mov
leave
icebp
adc
test
popa
and
push
jae
loope
jae
test
fisub
adc
mov
leave
xchg
adc
ficom
in
adc
and
daa
clc
shl
and
add
cmps
adc
(bad)
adc
mov
jae
adc
call
or
popa
and
fsqrt
loope
loope
stos
and
adc
inc
ret
bound
xchg
mov
pop
push
mov
test
and
fidiv
and
xchg
mov
addr16
sub
gs
dec
fbld
imul
and
dec
(bad)
adc
(bad)
fs
call
movs
sbb
(bad)
adc
retf
and
and
out
test
ficom
in
adc
and
imul
and
push
stc
and
cwde
mov
das
xchg
adc
xchg
adc
and
loop
xchg
and
bound
push
sub
in
jae
sub
repz
(bad)
push
push
ficom
and
leave
add
cmps
rcr
xchg
jae
and
mov
jnp
gs
sbb
daa
data16
jge
push
shl
and
and
ins
and
mov
fsubr
and
push
lahf
test
scas
adc
les
adc
lea
shl
shl
sbb
pop
(bad)
adc
daa
cmps
adc
and
mov
and
push
jae
into
or
shl
data16
push
jae
and
mov
jg
gs
sub
sbb
test
in
out
test
cmps
xor
and
retf
cmp
add
and
and
push
jae
and
dec
(bad)
adc
sub
mov
lods
loope
clc
xchg
mov
into
pop
cli
call
jnp
mov
push
pop
or
test
loop
jbe
loope
jae
sub
xor
int
adc
and
(bad)
and
mov
jl
push
jae
fnstsw
mov
adc
enter
and
jns
jmp
jae
xchg
fisub
jns
jmp
jae
xchg
fsub
cwde
mov
fstp
xor
jae
repz
and
push
jae
jnp
es
jbe
and
in
jbe
sub
lods
ror
dec
cdq
mov
mov
data16
push
jae
pusha
stc
imul
adc
retf
in
and
and
push
fld
rcl
and
cwde
stos
and
cwde
mov
inc
in
jae
and
bound
test
test
lods
push
jmp
out
push
hlt
and
adc
popf
shl
and
test
jecxz
push
scas
and
imul
in
adc
and
adc
pusha
movs
jb
and
adc
clc
adc
cli
jecxz
ins
iret
lods
push
ror
and
pushf
ss
and
adc
rol
sar
and
cmp
jo
adc
add
and
pop
mov
stc
scas
inc
and
inc
mov
pushf
ss
jne
jb
(bad)
jb
and
adc
in
adc
and
ror
jnp
dec
and
fist
fwait
fwait
inc
adc
std
cmp
(bad)
int
adc
and
push
jae
pusha
stc
and
push
mov
mov
scas
push
xchg
retf
sub
stos
xlat
(bad)
cwde
lods
lods
shr
jle
mov
lods
hlt
lock
or
pop
xchg
push
scas
push
(bad)
cli
gs
lods
push
scas
test
sub
arpl
rcl
inc
repnz
inc
lahf
test
dec
adc
and
push
fwait
jo
mov
pushf
ss
jnp
fist
mov
scas
push
xchg
sub
test
cwde
ss
lods
push
(bad)
cli
lds
dec
das
push
jmp
or
adc
jnp
fbstp
add
popa
and
adc
js
es
jbe
and
push
sbb
jge
out
jbe
loope
jae
ficomp
lds
sub
and
cmps
aaa
pop
and
mov
and
cmps
aaa
pop
daa
sub
and
cmps
aaa
pop
es
and
cmps
aaa
pop
and
and
adc
scas
push
arpl
xor
sti
xor
xlat
fbld
push
lds
ja
bound
sub
and
cmps
addr16
jl
lods
adc
lods
jmp
retf
lds
sub
mov
xor
dec
loop
jg
fsub
adc
jae
push
dec
jl
pusha
out
sbb
sub
and
out
jle
adc
out
sbb
xor
and
fwait
mov
pusha
jmp
xor
jmp
retf
mov
enter
aam
push
arpl
fst
xchg
and
cmps
fisttp
addr16
movs
in
adc
sub
inc
(bad)
out
mov
movs
sub
cli
fsubr
dec
and
fst
jne
push
push
cli
fsub
pop
ja
adc
jl
and
dec
dec
push
add
and
cwde
mov
and
jo
xor
xchg
cdq
and
shl
add
and
adc
inc
lods
jmp
jno
jns
mov
and
push
jno
jmp
dec
es
fs
and
cmps
ja
sbb
jae
and
adc
push
ds
test
pusha
and
and
mov
and
push
mov
es
fsub
jmp
jae
and
and
and
push
imul
dec
test
movs
sub
cli
fsub
adc
jge
fist
jae
push
push
dec
fbld
stc
lahf
jl
adc
jne
pushf
daa
xor
adc
and
adc
and
adc
(bad)
fstp
out
sub
jle
mov
lods
hlt
lock
sub
ja
adc
in
adc
push
sub
cli
je
sbb
jae
sub
repnz
adc
push
loopne
(bad)
adc
push
add
enter
sbb
stos
leave
int3
adc
cmps
xlat
jns
and
bound
rcl
add
mov
std
inc
fwait
jns
out
mov
adc
in
adc
push
dec
enter
push
add
and
je
and
pop
cli
clc
es
(bad)
sti
xor
out
fadd
fcom
cwde
pop
scas
adc
(bad)
cmp
clc
and
test
and
adc
cmp
clc
jne
cwde
arpl
cmp
mov
ficomp
mov
and
xchg
fwait
and
push
mov
and
call
jmp
or
addr16
call
jno
jbe
cmc
xchg
fwait
and
push
mov
and
cli
and
adc
and
inc
arpl
(bad)
adc
and
out
lock
dec
sub
test
and
adc
jae
fwait
rcr
mov
mov
adc
sbb
push
push
mov
(bad)
into
mov
and
not
retf
and
adc
repnz
(bad)
adc
xor
cmps
not
retf
mov
adc
aas
xchg
into
ret
cli
out
mov
push
add
loop
(bad)
xchg
dec
and
daa
fs
jnp
lds
lods
test
(bad)
(bad)
sbb
sub
and
jnp
adc
mov
iret
mov
lods
adc
jae
xchg
test
jmp
xor
je
xchg
and
mov
inc
fisub
stc
pop
jnp
adc
mov
iret
mov
lods
adc
jae
mov
adc
loop
(bad)
jp
movs
sub
jae
sub
movs
(bad)
dec
(bad)
dec
sbb
and
ja
and
dec
xor
mov
mov
into
mov
ficom
in
adc
popf
(bad)
into
mov
and
adc
adc
mov
lods
xchg
stos
(bad)
(bad)
mov
scas
test
repz
gs
pop
cli
clc
and
jae
and
out
mov
(bad)
push
dec
and
stc
cmp
cli
out
out
loope
adc
xchg
cwde
jmp
repnz
add
push
mov
imul
out
and
xchg
and
adc
in
adc
test
dec
and
adc
nop
std
pushf
(bad)
out
xabort
out
mov
sub
mov
cmps
aad
test
push
jae
test
call
and
rcr
and
clc
adc
xchg
xchg
and
movs
into
fmul
out
mov
push
repnz
int3
repnz
adc
push
push
cli
clc
and
arpl
and
out
mov
imul
mov
and
in
fwait
xor
out
mov
xchg
lahf
iret
(bad)
jae
and
clc
movs
test
out
mov
and
out
mov
mov
out
jbe
loope
jae
nop
leave
lods
(bad)
stc
vmwrite
adc
xchg
test
ret
addr16
lods
test
test
dec
retf
loope
adc
stc
in
jno
les
jo
fstp
enterw
stos
mov
pushf
(bad)
rcl
leave
daa
rcl
and
xchg
jns
ficom
popf
sar
mov
and
cmps
mov
movs
lods
nop
(bad)
(bad)
jae
jle
adc
adc
adc
mov
cwde
mov
xor
and
iret
mov
cmps
ror
and
cwde
idiv
mov
call
out
jo
lods
xchg
out
(bad)
clc
movs
test
mov
scas
test
(bad)
(bad)
jo
lods
xchg
jecxz
(bad)
cli
movs
mov
mov
scas
xchg
cmps
(bad)
(bad)
cli
movs
stc
into
mov
dec
or
mov
jne
(bad)
cld
cli
out
mov
or
scas
xchg
cmps
(bad)
(bad)
dec
movs
cdq
into
mov
push
push
clc
movs
loope
mov
lods
xchg
(bad)
(bad)
(bad)
jb
stc
into
mov
movs
lods
nop
(bad)
(bad)
jae
out
jae
and
sbb
scas
test
(bad)
(bad)
mov
sub
mov
into
mov
in
jg
dec
sbb
and
out
mov
mov
push
jae
xchg
test
ret
(bad)
cld
cli
out
mov
test
lods
(bad)
cwde
jg
adc
cmps
out
retf
loope
adc
xor
xor
pusha
and
out
mov
add
ja
repz
adc
movs
xchg
into
mov
sub
jl
inc
adc
movs
ins
jnp
sub
clc
movs
sar
mov
sub
jae
push
push
repz
sub
adc
int3
or
and
out
mov
and
pushf
aaa
and
cwde
test
out
mov
mov
adc
(bad)
ror
fbld
call
aad
repz
xchg
fwait
and
cwde
and
fs
movs
sub
das
cwde
and
gs
into
fmul
sub
mov
(bad)
adc
xchg
xor
test
cmps
jne
int3
adc
push
pop
clc
and
adc
and
push
inc
and
xchg
xchg
(bad)
(bad)
cwde
mov
scas
xchg
xchg
(bad)
jb
or
stc
aaa
lods
add
cwde
cmc
lods
(bad)
arpl
(bad)
adc
mov
(bad)
rcl
test
out
mov
and
repz
adc
and
sub
jae
push
psllq
adc
and
sub
jae
push
sbb
sbb
adc
and
cli
mov
(bad)
(bad)
jp
pop
mov
pop
sub
cmps
not
retf
jo
movs
scas
(bad)
(bad)
mov
int
mov
ficom
nop
(bad)
(bad)
jae
addr16
(bad)
aam
out
mov
scas
test
ret
stos
loope
adc
fsubr
out
mov
sar
mov
movs
lods
xchg
(bad)
jae
and
adc
in
adc
mov
ficom
jl
mov
jp
movs
sub
jae
sub
jle
fdiv
int3
sbb
ja
dec
jnp
pusha
in
dec
cmp
imul
and
pushf
push
(bad)
test
or
addr16
xor
call
lods
inc
(bad)
lods
pop
leave
(bad)
adc
pushf
push
jae
and
sar
mov
push
jae
and
in
cli
loop
sar
jne
xchg
dec
inc
push
sbb
jb
dec
in
xor
and
adc
xchg
jo
dec
fs
push
movs
push
mov
sbb
fist
repz
fild
add
movs
push
(bad)
mov
adc
pusha
call
jae
scas
adc
call
jl
mov
jl
and
adc
pusha
jmp
in
jae
pop
jge
xchg
data16
and
push
push
and
push
mov
scas
push
(bad)
mov
jo
jl
data16
loop
repz
fist
jbe
sub
mov
adc
jl
data16
sub
icebp
je
fst
and
push
mov
scas
push
(bad)
mov
jo
jl
data16
and
adc
push
adc
repnz
(bad)
adc
and
out
and
adc
and
fldenv
push
fldcw
push
icebp
gs
mov
pusha
jmp
jo
xchg
inc
mov
popa
add
push
and
jns
pusha
jmp
je
rcr
test
jmp
push
(bad)
das
xchg
adc
and
xchg
(bad)
lds
dec
sub
test
jae
clc
push
sub
addr16
clc
shl
cli
fstp
jae
jae
jae
cmovne
lods
loopne
call
and
push
fldcw
dec
jl
push
mov
adc
jae
and
fbld
sahf
cwde
push
dec
jae
shl
cli
fstp
mov
cwde
and
jae
int
and
and
dec
outs
outs
lods
jmp
(bad)
(bad)
(bad)
cli
out
out
push
and
inc
mov
pushf
mul
(bad)
jo
and
and
out
mov
add
and
jmp
inc
(bad)
lods
jmp
sub
in
shl
test
push
(bad)
dec
and
adc
jg
shl
test
jbe
and
push
and
pop
fsubr
jae
and
jnp
dec
and
fs
pop
inc
jae
lods
xlat
lock
fs
and
jae
retf
and
jnp
jbe
or
and
and
cli
rcr
mov
jne
xor
jmp
jae
lods
push
(bad)
mov
pop
sbb
ss
push
or
pushf
fsubr
and
push
in
and
and
xchg
adc
gs
jp
fucom
xchg
test
jp
sub
out
cli
lds
ja
cmps
push
iret
push
nop
mov
add
jae
and
adc
and
adc
and
jae
in
push
sub
nop
and
and
and
fist
inc
loopne
inc
sbb
dec
adc
and
sti
jae
adc
out
jle
and
xchg
mov
and
jnp
lods
jo
and
fs
int
and
and
in
and
jns
shl
and
and
sub
adc
iret
push
adc
popf
adc
and
shl
test
jb
loopne
ss
fcom
cli
out
sub
and
jmp
sbb
and
dec
and
ror
and
out
mov
and
dec
and
clc
and
and
cwde
mov
and
out
push
xor
fs
int
and
and
adc
fnstsw
mov
jp
mov
jno
inc
and
push
sbb
cmp
jae
adc
clc
fstp
fcom
cwde
daa
sub
xor
pop
sbb
push
sub
push
and
adc
sbb
push
jae
inc
inc
jae
cmps
aad
adc
cli
pusha
das
xchg
adc
and
adc
in
push
dec
jge
ins
fwait
stos
pusha
in
cli
loop
sar
jne
and
and
das
pop
addr16
ins
jg
aad
sbb
xlat
push
jae
cmp
cmps
aad
jg
dec
mov
jno
inc
and
stos
push
sbb
adc
gs
cwde
fsubr
xor
int
daa
and
add
sub
dec
adc
xor
int
daa
and
sub
mov
aaa
and
adc
jg
dec
mov
mov
jb
cmp
shl
push
push
adc
(bad)
cwde
ss
lods
rcl
and
je
and
ins
sub
and
loop
push
and
adc
es
(bad)
ss
clc
gs
cdq
ss
cmp
shl
jae
sub
aaa
and
and
lahf
mov
and
stos
adc
cwde
mov
dec
out
jb
pop
out
jae
hlt
call
lods
push
(bad)
retf
or
mov
xchg
push
lea
xchg
push
jbe
cmps
shr
pusha
stc
repz
fist
push
and
jl
and
out
test
movs
jl
and
fcmove
lds
jae
(bad)
cwde
ss
lods
sar
sub
les
scas
inc
jnp
xchg
add
dec
rcr
and
repz
out
les
cmp
int3
sub
cli
gs
adc
les
push
jne
jo
jl
ja
pop
lock
mov
pusha
cmc
retf
lods
sbb
cwde
lock
sar
sub
les
call
or
jb
rcr
clc
adc
cli
jecxz
dec
sub
out
jecxz
mov
jecxz
and
stos
das
mov
adc
cdq
push
jno
arpl
and
mov
and
mov
jecxz
mov
jecxz
mov
jecxz
mov
jecxz
mov
jecxz
mov
jecxz
mov
jecxz
std
and
mov
and
and
adc
cdq
cmp
xchg
mov
mov
jecxz
cmp
jnp
mov
jecxz
in
jecxz
mov
stos
mov
and
mov
jo
mov
and
fstp
rcl
mov
and
and
and
pusha
and
push
jae
scas
or
mov
cmp
mov
inc
jnp
mov
inc
xor
shl
mov
dec
jmp
and
mov
xor
mov
sub
mov
push
call
inc
and
leave
xchg
adc
and
xor
push
jno
arpl
loop
and
jno
mov
and
and
and
mov
xchg
mov
mov
jecxz
ja
jecxz
mov
das
mov
adc
test
mov
mov
mov
jecxz
test
jecxz
in
and
mov
and
mov
dec
jecxz
mov
jecxz
push
jno
arpl
and
mov
repz
mov
mov
mov
jecxz
ja
jecxz
mov
mov
addr16
test
mov
mov
mov
jecxz
test
jecxz
in
and
mov
and
mov
dec
jecxz
mov
jecxz
cmp
and
mov
jecxz
fld
xor
mov
call
inc
cli
lds
inc
clc
sub
sub
cli
clc
and
cli
jecxz
out
clc
or
cli
jecxz
(bad)
ss
adc
mov
and
loope
enter
fistp
test
out
repz
ficom
push
es
lea
into
cmp
test
pop
adc
and
jae
sub
pop
icebp
mov
call
out
fisubr
pop
dec
push
push
add
pop
push
add
gs
cmps
arpl
xchg
pop
lea
out
cdq
arpl
and
dec
ret
jae
xor
sub
xor
xchg
add
out
pop
jmp
jae
dec
sbb
mov
adc
pusha
out
enter
and
cmps
fbstp
sub
and
jo
jb
jne
pop
jo
adc
clc
or
cli
jecxz
pop
(bad)
rol
gs
dec
and
and
leave
test
lods
push
lahf
test
inc
out
ss
cmps
ss
sub
(bad)
dec
sub
test
jbe
and
mov
out
xor
fwait
outs
jne
jae
sub
jo
je
mov
iret
adc
fnstcw
cmp
loop
inc
pushf
test
jecxz
dec
call
push
sbb
loopne
push
jno
and
cwde
mov
pusha
icebp
and
push
sbb
mov
sub
jl
push
adc
sub
jno
xor
in
adc
sbb
movs
outs
lods
ins
fwait
ja
cmps
push
iret
in
jno
adc
in
addr16
jmp
sub
in
adc
enter
and
sbb
lods
leave
jo
in
fdiv
and
push
fwait
jo
pushf
cmp
and
fnstsw
fmul
push
repnz
repz
jae
lods
leave
jo
fstp
jae
xor
mov
in
adc
cmc
fdiv
and
(bad)
push
cld
mov
in
addr16
gs
fs
scas
add
in
adc
lods
loope
shr
sar
call
int
bound
enter
adc
pusha
int
pop
push
jae
pop
int
xchg
ficomp
mov
xor
lds
arpl
jae
cmp
and
jae
scas
ins
stos
das
xchg
out
cli
loop
cmps
mov
imul
sbb
lods
mov
and
aad
bound
adc
loope
shr
call
in
cmp
cmps
test
pusha
in
xor
adc
lock
jae
and
mov
aam
(bad)
sar
call
loope
xor
data16
jae
xor
mov
in
adc
stc
fdiv
and
adc
lods
and
fnstcw
jne
rcl
addr16
sub
lods
sbb
add
and
fnstcw
jne
rcl
addr16
sub
lods
sbb
jb
and
les
inc
cli
clc
es
in
adc
enter
fbld
jnp
dec
daa
jnp
dec
and
push
mov
stc
xchg
push
adc
rcl
dec
and
out
push
shl
(bad)
int
cmp
and
loopne
and
adc
aad
xchg
test
adc
xor
dec
mov
mov
and
mov
in
outs
and
xchg
lahf
fstp
out
cli
out
adc
in
adc
and
loopne
and
fwait
mov
neg
je
mov
iret
ror
or
cwde
mov
out
cwde
mov
ficomp
mov
pusha
out
jb
or
sbb
adc
out
leave
repz
rol
fmul
pop
jmp
mov
lods
test
fucomi
mov
pusha
out
dec
sub
mov
and
mov
and
adc
loop
shl
sub
mul
jecxz
jne
(bad)
inc
test
jecxz
neg
fucomi
mov
add
shl
(bad)
movs
fsubrp
mov
jne
jg
and
adc
and
sbb
dec
adc
gs
neg
fsubr
mov
mov
not
fsubr
mov
push
sbb
lods
stc
push
jae
int
aas
and
adc
and
out
mov
adc
and
adc
int
cmp
and
out
mov
mov
adc
in
adc
dec
clc
loopne
and
out
and
mov
jae
movs
xlat
test
movs
fsubrp
mov
jne
scas
shl
(bad)
movs
(bad)
mov
jne
jae
and
adc
and
bound
adc
in
aam
jae
mov
inc
sbb
and
adc
popf
loop
and
stc
mov
ficomp
and
push
shl
sbb
and
adc
cmps
aad
jg
dec
mov
mov
jb
push
xor
in
pop
test
adc
and
bound
cwde
ss
(bad)
lock
fst
(bad)
fld
fld
and
jae
and
jnp
fist
mov
stc
mov
adc
(bad)
adc
ret
shr
mov
sub
cli
gs
push
fdiv
jb
and
fs
jae
fisub
jmp
jae
movs
out
das
and
fdiv
lahf
push
inc
popa
dec
movs
(bad)
imul
mov
stc
stos
push
jne
push
xor
fs
push
sbb
dec
and
dec
cs
cwde
xchg
ja
add
push
adc
and
lods
pusha
add
mov
out
push
sub
pop
jae
and
pop
repnz
push
jae
jp
mov
lods
hlt
lock
xor
xor
in
pop
jae
shl
cli
rcr
pusha
and
pushf
fdiv
jae
and
jno
dec
adc
and
mov
out
push
sub
add
and
and
cmp
fist
sbb
fisub
push
in
fwait
pop
outs
adc
in
jg
push
in
fwait
xlat
ins
adc
in
fist
fwait
retf
ins
adc
shr
jae
shl
cli
gs
mov
in
sub
out
cli
lds
call
lods
push
imul
jmp
retf
and
ret
shr
fdiv
push
daa
adc
and
fs
push
sbb
sub
gs
in
inc
lods
pusha
or
jbe
adc
and
fs
push
in
fwait
mov
adc
in
jg
push
in
fwait
dec
ins
adc
in
popa
test
loop
push
fmul
dec
cmp
and
dec
sub
lds
scas
and
fcom
cli
out
sub
enter
push
or
iret
gs
pop
jae
lods
push
mov
shl
cli
rcr
xor
sbb
mov
and
and
jae
and
jnp
dec
inc
loopne
and
sbb
and
adc
fldenv
cli
out
sub
push
and
rcr
fsubr
xor
int
xor
and
dec
mov
jno
test
mov
fsubr
inc
aam
jae
jne
repnz
jae
in
shl
test
jbe
and
push
sbb
jge
(bad)
fdivr
push
(bad)
daa
adc
cli
cli
dec
mov
adc
mov
std
inc
cli
shl
and
push
add
mov
or
clc
jne
xlat
ja
and
jbe
and
repz
das
jae
out
test
or
fs
test
and
push
cmp
adc
arpl
adc
inc
in
cli
fstp
xor
push
inc
fwait
pop
arpl
jae
loop
fsubr
(bad)
outs
test
fisub
xor
and
adc
clc
and
cwde
ss
cwde
xor
jmp
push
fsubr
sub
jle
mov
lods
hlt
lock
or
ja
dec
jnp
pusha
loope
or
and
gs
ss
lods
push
fwait
xlat
inc
std
cli
rcr
gs
cwde
mov
ret
sub
xor
fist
and
sbb
and
pop
jl
and
lock
push
das
push
lds
xchg
adc
inc
pushw
mov
ja
fist
jae
ins
push
les
push
lds
cwde
mov
mov
xchg
mov
jae
mov
lahf
pop
lahf
in
out
loope
adc
jne
cwde
movs
mov
pop
in
dec
jg
xor
jb
xchg
adc
in
ja
fistp
les
sub
fcom
clc
gs
ss
lods
push
stos
xlat
inc
int
gs
cwde
shr
dec
mov
cwde
ins
adc
int
xor
and
movs
cmp
pop
nop
mov
pop
adc
and
(bad)
adc
test
out
mov
and
cwde
mov
mov
inc
mov
stc
xchg
iret
(bad)
lock
cwde
mov
(bad)
fs
in
add
and
out
(bad)
fbld
sbb
and
sbb
lods
loope
shr
fbld
cli
movs
std
out
mov
popf
or
and
out
mov
ficomp
mov
leave
mov
fisub
clc
mov
out
mov
test
dec
and
adc
dec
push
fwait
xchg
adc
mov
nop
test
jae
push
sbb
and
adc
xor
and
ror
out
xor
fcomp
out
(bad)
mov
fild
jmp
loope
repnz
pusha
jae
dec
inc
and
push
sub
cld
xor
sub
and
(bad)
(bad)
out
mov
xchg
push
jae
cmps
aad
enter
and
test
cmps
jmp
pop
ss
shl
mov
int
xor
sub
pusha
xor
and
xchg
mov
arpl
jae
inc
adc
mov
lods
(bad)
(bad)
out
and
sbb
xor
jb
das
and
in
nop
popf
iret
adc
adc
and
test
cmps
jmp
pop
ss
shl
mov
int
xor
sub
and
(bad)
(bad)
out
mov
addr16
jae
cmps
aad
enter
and
test
cmps
jmp
pop
ss
shl
mov
int
xor
sub
fwait
repz
adc
das
adc
mov
adc
add
shl
and
adc
xlat
fadd
popf
fldz
(bad)
fbstp
dec
shl
and
fwait
push
jae
cmps
aad
fist
sbb
aam
jae
mov
inc
sbb
aam
jae
int
and
xlat
lods
inc
and
adc
das
adc
mov
adc
xor
and
(bad)
(bad)
out
mov
mov
aad
dec
das
loopne
and
movs
(bad)
(bad)
out
fwait
cmps
pusha
adc
loope
fwait
arpl
jae
das
adc
mov
adc
xor
and
(bad)
(bad)
out
mov
inc
push
jae
cmps
aad
mov
and
adc
int
and
adc
and
adc
xlat
fcom
fwait
shl
jae
inc
adc
mov
lods
(bad)
(bad)
out
and
sbb
xor
jb
and
in
cwde
adc
cwde
mov
out
push
jae
pushf
stc
jo
and
jns
shl
(bad)
popf
sti
out
mov
jb
mov
movs
sti
out
mov
jne
push
xor
out
and
loope
and
fbld
lock
stc
jmp
retf
adc
shr
lock
ins
push
enter
and
test
ja
into
(bad)
out
mov
das
and
fwait
push
popa
adc
loope
repnz
(bad)
and
inc
aaa
and
adc
xlat
fcom
sbb
(bad)
push
jae
nop
in
mov
(bad)
add
lock
stc
pop
fs
adc
shr
lock
ins
pusha
dec
out
loope
and
movs
(bad)
(bad)
out
fwait
imul
mov
popa
adc
das
adc
mov
adc
xor
and
(bad)
(bad)
out
mov
add
and
popa
push
and
adc
(bad)
mov
mov
jmp
jae
loope
fwait
lahf
adc
das
adc
mov
adc
xor
and
(bad)
(bad)
out
mov
sti
push
jae
cmps
aad
test
mov
cwde
mov
stos
push
jae
pushf
sbb
and
jmp
pop
ss
shl
mov
int
xor
and
js
and
adc
xlat
fcom
fwait
ja
adc
inc
adc
mov
lods
(bad)
(bad)
out
and
sbb
xor
jb
daa
arpl
xchg
push
add
adc
sbb
fstp
adc
out
adc
ficom
cli
ror
cli
out
mov
(bad)
out
jae
pop
call
mov
sub
fcomp
out
mov
test
test
lods
xchg
mov
fsubr
cli
out
lods
mov
popf
loope
mov
sub
retf
adc
shr
lock
inc
cli
fcomp
cmp
loope
test
in
jo
mov
mov
ficomp
and
cwde
adc
fiadd
jp
push
jae
cwde
adc
fiadd
(bad)
adc
loope
mov
movs
lods
mov
fsubr
repz
out
mov
fisub
push
cmp
out
mov
xchg
(bad)
(bad)
out
and
loope
and
pop
bound
test
test
lods
xchg
mov
fsubr
cli
out
push
xor
and
adc
xlat
fcom
sbb
push
jae
nop
in
mov
(bad)
pop
bound
stc
push
bound
adc
shr
lock
ins
pusha
dec
out
loope
and
movs
(bad)
(bad)
out
fwait
pop
adc
loope
(bad)
cdq
das
adc
mov
adc
xor
and
(bad)
(bad)
out
mov
aas
push
jae
cmps
aad
mov
ficom
not
(bad)
mov
fisubr
imul
(bad)
mov
cmps
xchg
int3
(bad)
mov
jecxz
hlt
and
cwde
neg
(bad)
mov
jo
jae
movs
lods
jae
(bad)
jae
mov
nop
test
adc
jae
pusha
or
jae
mov
push
lock
adc
mov
cwde
test
in
mov
push
add
jae
mov
inc
fwait
dec
adc
loope
(bad)
lods
shr
mov
cmps
(bad)
push
call
into
jmp
xchg
test
ficomp
mov
and
cmps
imul
(bad)
mov
fsubr
and
dec
sub
xchg
fsubr
and
push
jmp
ja
mov
out
(bad)
aam
out
mov
push
or
scas
xchg
(bad)
(bad)
out
and
loope
and
lahf
pusha
and
cwde
adc
cwde
mov
jecxz
jae
pushf
sbb
and
jmp
pop
ss
shl
mov
int
xor
and
mov
and
adc
xlat
fcom
sbb
aad
jae
nop
in
mov
(bad)
mov
and
stc
punpcklbw
adc
shr
lock
ins
pusha
dec
cmp
movs
(bad)
(bad)
out
fwait
mov
loope
cli
ror
cli
out
movs
sbb
out
fwait
and
adc
mov
pushf
mul
and
movs
mov
fucomi
and
out
out
fbld
jmp
mov
mov
jns
shl
mov
int
xor
and
sbb
and
adc
xlat
fcom
sbb
push
jae
nop
in
mov
(bad)
pop
pusha
and
cwde
and
cwde
mov
sti
cs
pushf
sbb
and
jmp
pop
ss
shl
mov
int
dec
and
test
and
adc
xlat
fcom
sbb
(bad)
push
jae
nop
in
mov
(bad)
stos
pop
and
jns
shl
mov
int
dec
and
jp
and
(bad)
push
cs
pushf
sbb
and
jmp
pop
push
stc
adc
and
adc
shr
and
fiadd
push
aam
jae
int
dec
and
sub
and
adc
xlat
fcom
sbb
push
jae
nop
in
mov
(bad)
das
pop
and
stc
imul
adc
sub
call
pusha
dec
out
loope
and
movs
(bad)
(bad)
out
fwait
pop
sbb
jae
loope
cli
rcl
idiv
movs
loope
mov
lods
xlat
fwait
(bad)
sbb
jae
das
adc
mov
adc
xor
and
(bad)
(bad)
out
mov
and
jae
cmps
aad
enter
and
test
cmps
jmp
pop
push
stc
ret
push
and
adc
shr
and
fiadd
push
aam
jae
int
dec
and
cmp
(bad)
out
mov
fwait
das
jae
cmps
aad
test
jecxz
pop
push
and
adc
shr
lock
ins
pusha
dec
cmp
movs
(bad)
(bad)
out
fwait
mov
adc
loope
sbb
in
mov
(bad)
repz
and
stc
dec
push
and
adc
shr
lock
ins
pusha
dec
cmp
movs
(bad)
(bad)
out
fwait
jnp
adc
loope
sbb
aad
jae
nop
in
mov
(bad)
cmp
and
test
test
lods
xchg
mov
fsubr
cli
out
in
and
adc
xlat
fcom
sbb
(bad)
push
jae
nop
in
mov
(bad)
addr16
and
pushf
idiv
(bad)
mov
xchg
(bad)
(bad)
out
and
loope
and
cmps
sbb
xor
adc
sub
call
pusha
dec
cmp
movs
(bad)
(bad)
out
fwait
repz
jae
loope
cli
shl
cli
out
adc
(bad)
out
mov
lahf
sub
and
sub
and
test
cmps
jmp
pop
ss
shl
mov
int
dec
and
inc
dec
and
adc
xlat
fcomp
push
and
out
(bad)
fbstp
fwait
iret
adc
enter
and
adc
sbb
and
call
pusha
dec
cmp
movs
(bad)
(bad)
out
fwait
pop
sbb
jae
loope
sbb
retf
fist
stc
pop
sbb
sub
adc
sub
call
pusha
dec
cmp
movs
(bad)
(bad)
out
fwait
daa
sbb
jae
loope
repnz
ja
jae
int
dec
and
adc
xlat
fcom
fwait
mov
adc
inc
adc
mov
lods
(bad)
(bad)
out
and
sbb
xor
jb
fistp
jns
iret
adc
out
(bad)
(bad)
test
and
adc
and
sbb
dec
adc
and
sbb
test
ficomp
mov
nop
in
mov
(bad)
retf
sbb
lods
xchg
fucomi
and
fisub
xchg
int
mov
int
dec
and
in
mov
movaps
fisub
repz
sbb
shl
cli
movs
cdq
out
mov
lods
xlat
and
fwait
sub
scas
xchg
lahf
(bad)
out
cwde
sub
loope
(bad)
lods
xchg
retf
(bad)
out
cli
out
dec
sub
out
cli
lds
and
dec
into
lods
jmp
mov
(bad)
cli
out
push
mov
into
sub
fmul
cli
out
cmps
fbstp
clc
iret
addr16
movs
(bad)
mov
jne
mov
and
pushf
bound
out
mov
adc
movs
stc
xor
in
xchg
fbld
fistp
adc
sahf
dec
adc
sbb
push
jae
outs
(bad)
xor
dec
adc
movs
stc
push
rcr
out
sbb
retf
push
jae
(bad)
push
and
popf
bound
xchg
fwait
clc
retf
mov
adc
cli
out
fdiv
int3
mov
inc
and
push
push
add
test
ficomp
mov
ficom
clc
gs
test
movs
mov
mov
scas
push
jnp
sub
and
in
mov
movs
(bad)
in
addr16
xlat
lock
inc
fwait
jg
adc
jo
(bad)
je
adc
test
ficomp
mov
int
dec
and
out
mov
nop
mov
(bad)
stc
inc
sbb
call
jno
jbe
jno
jb
lods
test
fstp
out
and
and
mov
int
dec
and
out
mov
nop
mov
pop
and
call
jno
jbe
test
mov
ficomp
and
cli
mov
in
mov
popf
adc
and
jge
(bad)
cwde
mov
and
xor
int
inc
and
out
mov
loop
arpl
pushf
test
dec
and
adc
enter
and
jb
and
out
mov
mov
(bad)
into
adc
and
dec
in
pusha
jbe
mov
mov
pop
adc
movs
(bad)
mov
fcmovu
out
mov
loop
ja
and
out
mov
jne
not
jo
and
out
mov
nop
or
fist
out
(bad)
mov
nop
mov
(bad)
inc
(bad)
movs
xchg
in
mov
jne
xchg
rcr
out
lock
cwde
idiv
fs
jbe
sub
and
cwde
mov
in
jae
and
push
jae
mov
inc
fwait
sbb
test
loop
not
xchg
(bad)
(bad)
out
and
scas
sub
int
pushf
(bad)
cwde
mul
cmp
dec
and
out
mov
sbb
and
jmp
mov
popf
out
mov
popa
adc
loop
xchg
(bad)
out
jb
and
stc
(bad)
(bad)
adc
fucom
xchg
test
ficomp
mov
ficom
pop
cmp
(bad)
test
out
mov
and
cwde
mov
mov
inc
fwait
imul
xchg
xlat
fstp
out
and
fiadd
and
sbb
dec
adc
and
(bad)
movs
(bad)
mov
jne
jae
sti
and
and
jl
cli
adc
fisub
mov
retf
and
out
mov
loopne
and
popf
bound
out
mov
or
xchg
mov
jecxz
adc
(bad)
jae
or
jae
mov
inc
sbb
push
jae
das
daa
jae
lods
sar
push
or
enter
enter
and
out
jb
mov
sub
test
jle
jae
and
adc
loop
inc
and
out
mov
push
sbb
and
adc
aas
and
and
jb
and
out
mov
stc
jmp
and
jnp
bound
out
mov
push
enter
mov
sbb
mov
and
lea
cmp
mov
fstp
out
jae
loop
outs
and
lea
out
jp
and
out
and
sbb
and
pop
fstp
out
cli
out
stc
daa
adc
adc
and
movs
xlat
fstp
out
fwait
xchg
adc
fst
mov
fsubr
mov
cmps
and
scas
xchg
out
fstp
out
sub
jle
mov
and
std
outs
jae
inc
clc
jge
scas
fiadd
inc
sbb
fcom
idiv
gs
mov
mov
jae
shl
cli
gs
cwde
mov
push
sbb
test
fucomi
push
sub
mov
and
inc
(bad)
xchg
test
fisub
scas
and
adc
enter
and
repnz
adc
cmps
fisubr
cmps
fsub
jl
jo
jb
sub
arpl
jne
jae
mov
jae
lods
xlat
repnz
fs
adc
lock
cmp
jl
in
les
push
imul
xor
add
xchg
mov
fisub
aad
mov
jne
arpl
and
jmp
jg
xchg
push
lea
jne
mov
and
push
les
pushf
aaa
and
les
pushf
aaa
xor
inc
fwait
call
jae
sub
jne
sub
jl
jo
(bad)
fs
and
test
mov
adc
and
sbb
int
inc
and
and
jbe
push
fdiv
fwait
daa
pop
adc
int
inc
and
cwde
mov
pusha
jmp
mov
lods
hlt
retf
push
ja
jae
jbe
and
js
int3
pop
ja
sbb
pop
jnp
and
idiv
movs
popf
icebp
mov
lods
(bad)
jb
lods
(bad)
mov
cdq
icebp
mov
gs
jae
test
iret
rcr
and
fiadd
inc
retf
push
jae
mov
jae
lods
xlat
jp
sub
cli
fmul
cli
out
out
(bad)
in
out
mov
inc
and
and
fs
nop
fst
sub
adc
and
cwde
mov
in
cwde
inc
loop
iret
rcr
xor
and
sbb
and
out
and
fiadd
enter
and
pop
push
jbe
(bad)
in
out
mov
sub
and
fs
nop
fst
sub
mov
mov
fstp
cwde
sub
mov
repnz
lock
jae
jp
sub
out
cli
lds
stc
pop
adc
call
push
cwde
or
cwde
mov
movs
pop
jae
shl
cli
movs
ror
mov
lods
xlat
and
adc
int
inc
and
cwde
mov
cld
xchg
mov
and
jnp
test
int
retf
xchg
mov
dec
inc
and
fwait
daa
adc
jae
loope
cli
rcl
idiv
movs
aad
mov
scas
xchg
cmp
out
cli
out
pop
and
mul
(bad)
jo
lods
inc
and
mov
and
adc
xlat
fcom
sbb
(bad)
push
jae
mov
inc
fwait
fwait
adc
jae
loope
retf
stos
and
jae
ret
cwde
test
out
mov
and
adc
shr
lock
ins
pop
enter
and
test
ja
into
and
out
mov
dec
popf
bound
out
mov
pop
inc
and
cmp
and
adc
xlat
fcom
sbb
(bad)
push
jae
mov
inc
fwait
imul
jae
loope
sbb
aam
jae
mov
inc
fwait
pop
adc
jae
loope
cli
rcl
cli
out
cld
inc
and
adc
xlat
fcom
sbb
(bad)
push
jae
mov
inc
fwait
sub
adc
loope
fwait
out
adc
das
adc
mov
adc
or
movs
inc
and
adc
xlat
fadd
popf
and
jns
into
addr16
popf
and
stc
fist
and
out
push
xor
and
mul
(bad)
jo
xor
and
out
mov
cwde
inc
and
xlat
jb
and
adc
das
adc
mov
adc
xor
or
and
out
mov
nop
inc
and
sbb
and
out
mov
jl
and
xlat
pop
or
adc
das
adc
mov
adc
xor
or
and
out
mov
push
inc
and
adc
and
out
mov
cmp
and
clc
inc
and
adc
xlat
fcom
fwait
not
adc
inc
adc
mov
lods
jae
(bad)
and
jge
xor
test
jae
(bad)
and
jmp
jae
cmps
aad
dec
or
xor
test
jae
(bad)
and
sti
and
cmps
aad
cwde
or
jae
shl
cli
movs
int
mov
lods
xlat
fwait
stos
pop
adc
das
adc
mov
adc
xor
or
and
out
mov
mov
mov
dec
pop
popf
bound
out
mov
test
and
inc
inc
and
adc
xlat
fcom
sbb
(bad)
push
jae
mov
inc
fwait
dec
pop
adc
loope
sbb
aad
jae
mov
inc
fwait
jnp
adc
loope
cli
ror
cli
out
add
and
adc
xlat
fcom
sbb
(bad)
push
jae
mov
inc
fwait
movhps
jae
loope
mov
pushf
mul
(bad)
jo
aas
popf
bound
out
mov
cld
inc
and
fadd
and
adc
xlat
fcom
sbb
(bad)
push
jae
mov
inc
fwait
retf
adc
jae
loope
sbb
aad
jae
mov
inc
fwait
not
jae
loope
cli
rcl
cli
out
pushf
inc
and
adc
xlat
fcom
sbb
(bad)
push
jae
mov
inc
fwait
mov
jae
loope
fwait
inc
adc
jae
int
jae
mov
nop
mov
add
jae
test
jae
(bad)
and
xor
xor
test
jae
(bad)
and
jae
jae
cmps
aad
enter
and
test
cmps
jmp
pop
xor
shl
(bad)
movs
and
stc
daa
adc
cwde
adc
cwde
test
out
mov
addr16
movs
and
stc
inc
adc
stc
adc
adc
sub
call
addr16
cmp
xchg
jae
(bad)
and
sub
jae
cmps
aad
enter
and
test
cmps
jmp
pop
or
retf
adc
adc
shr
and
fiadd
js
push
jae
cwde
adc
(bad)
adc
add
lock
lods
mov
inc
fwait
lahf
adc
sbb
and
sbb
dec
adc
and
jae
gs
fwait
sbb
adc
mov
nop
popf
mov
mov
inc
fwait
lahf
or
jae
and
out
mov
pushf
into
and
out
mov
movs
(bad)
(bad)
(bad)
fwait
mov
adc
nop
in
lods
(bad)
stc
inc
or
adc
loope
adc
ret
cwde
test
out
mov
into
pop
cli
shl
cli
out
dec
sub
out
cli
lds
and
scas
inc
add
dec
retf
or
cwde
mul
xchg
(bad)
mov
lods
jmp
inc
(bad)
scas
dec
jnp
int
pop
and
inc
jno
lods
test
fstp
out
repnz
and
jae
lods
jmp
repz
out
cli
out
hlt
pop
and
adc
pushf
loop
fild
sbb
cmp
rcr
(bad)
sbb
dec
adc
movs
sub
das
(bad)
adc
and
adc
mov
inc
sbb
xchg
push
and
jae
movs
stc
mov
(bad)
lock
sbb
and
adc
movs
(bad)
mov
jne
not
les
and
cwde
mov
nop
mov
(bad)
inc
(bad)
movs
xchg
in
mov
jne
sbb
out
lock
sbb
and
adc
movs
(bad)
mov
jne
aaa
(bad)
adc
movs
xchg
in
mov
jne
neg
fucomi
mov
and
stc
test
(bad)
cli
movs
mov
jmp
sbb
(bad)
movs
popf
out
mov
jne
ret
push
and
cwde
mov
fstp
(bad)
(bad)
push
jae
and
out
mov
and
mov
cmp
(bad)
test
out
mov
and
adc
mov
inc
fwait
and
test
xlat
fstp
out
and
fiadd
and
sbb
dec
adc
and
(bad)
movs
(bad)
mov
jne
jae
mov
sar
adc
fisub
jnp
adc
ror
adc
sbb
mov
loopne
and
popf
bound
out
mov
pop
pop
and
xchg
or
(bad)
jae
or
jae
mov
inc
sbb
push
jae
jecxz
jae
lods
xlat
jp
push
or
enter
enter
and
out
jb
mov
sub
test
mov
jns
shl
adc
fst
mov
and
in
mov
jne
fwait
inc
push
adc
and
sbb
addr16
movs
mov
mov
jne
js
(bad)
lock
sub
fbld
adc
test
(bad)
fcmovnu
out
and
imul
sar
adc
dec
adc
test
(bad)
fcmovnu
out
and
iret
cmp
movs
(bad)
sub
in
mov
jne
(bad)
mov
out
mov
test
repnz
(bad)
jae
fisub
dec
adc
push
and
mov
sbb
retf
push
jae
int
pop
and
rol
or
popf
bound
adc
mov
cmps
cli
dec
jae
shl
jbe
(bad)
mov
out
mov
out
(bad)
mov
cmps
aad
retf
cmp
mov
fisub
(bad)
repz
mov
ins
and
and
out
or
in
mov
and
jae
movs
(bad)
fsub
and
in
mov
jne
sub
and
jmp
mov
int
pop
and
out
mov
mov
jae
scas
xchg
out
fstp
out
cwde
lods
jmp
sub
jle
mov
and
std
jg
jae
clc
jge
scas
jne
(bad)
ds
gs
jbe
xchg
or
out
push
sub
enter
call
ja
xor
das
cmp
lods
xlat
repnz
adc
and
fwait
pop
adc
int
pop
and
inc
jne
ja
out
pop
and
aaa
jae
test
(bad)
jo
adc
and
sbb
int
pop
and
sbb
and
idiv
rcr
fwait
addr16
jae
pusha
in
and
les
inc
fild
adc
frstor
mov
jp
sub
out
cli
lds
stc
push
pop
and
push
ins
sub
nop
mov
push
adc
and
push
sub
cwde
pop
and
fs
in
cmp
loop
mov
and
loope
fbstp
fwait
push
or
jae
and
push
sub
xchg
jb
(bad)
and
enter
cmps
aad
sbb
push
adc
cli
fmul
cli
out
adc
and
mov
mov
ins
sti
popa
lods
jmp
mov
fist
jae
dec
cwde
mov
fstp
lea
pop
popf
bound
stc
daa
or
inc
sbb
dec
push
jb
and
push
jae
xchg
cmp
sub
jo
dec
out
sahf
bound
stc
pop
or
pushf
ss
jne
jae
data16
fisub
(bad)
adc
mov
and
push
les
xchg
mov
out
cli
lds
ja
mov
mov
fstp
jno
and
jnp
dec
and
jns
and
adc
es
add
test
add
jae
and
sbb
fisub
xchg
adc
adc
and
sbb
fisub
lea
das
or
jae
frstor
mov
dec
and
int
pop
and
and
int
pop
and
and
int
pop
and
cwde
mov
and
sbb
fisub
(bad)
adc
dec
and
sbb
fisub
(bad)
adc
dec
and
sbb
fisub
xchg
adc
adc
and
sbb
fisub
xchg
adc
adc
retf
and
and
int
pop
and
and
int
pop
and
cwde
fsubr
inc
fist
test
bound
adc
and
inc
fist
mov
bound
adc
cwde
je
jae
ret
fsubr
es
stos
jnp
xor
sbb
fisub
lea
jecxz
adc
add
(bad)
cli
pusha
and
stc
fisub
stc
retf
pop
and
and
xchg
adc
adc
sbb
cli
pusha
and
xchg
ret
stc
out
and
idiv
fstp
inc
or
push
jae
push
ss
xchg
cmps
test
fisub
(bad)
adc
dec
fldz
inc
cmp
push
jae
imul
and
jns
test
fisub
test
fwait
arpl
adc
fldz
inc
or
ss
xchg
bound
adc
(bad)
and
(bad)
adc
mov
and
xor
popa
and
adc
or
push
jae
lock
xor
dec
in
mov
int
push
and
xchg
ret
stc
scas
push
and
push
jae
lock
xor
dec
in
mov
int
push
and
cwde
mov
in
shl
test
jae
int3
push
adc
sbb
test
adc
stc
add
(bad)
cli
out
std
sahf
bound
out
mov
mov
mov
and
hlt
push
and
adc
pusha
loope
jbe
enter
jnp
fist
and
jae
scas
push
(bad)
or
and
aad
sbb
dec
adc
and
loopne
and
sahf
bound
adc
and
and
mov
dec
adc
dec
sbb
and
jnp
dec
and
fstp
int
adc
and
fs
and
adc
fcom
idiv
gs
cwde
mov
and
push
jae
and
push
jae
mov
jae
scas
push
mov
pusha
loope
enter
jno
add
and
loopne
and
sahf
bound
aaa
jae
xchg
bound
jnp
dec
and
jnp
dec
and
adc
dec
adc
and
sbb
cwde
mov
and
sbb
fisub
(bad)
adc
dec
and
push
jae
and
push
jae
xor
adc
inc
dec
cmp
and
cld
xor
dec
repz
bound
xor
and
nop
pushf
fist
adc
and
push
jae
and
push
jae
xor
adc
pop
dec
cmp
and
cld
xor
dec
repz
bound
xor
and
jnp
fist
and
jae
adc
popa
and
adc
dec
mov
and
adc
dec
(bad)
lahf
bound
adc
and
pop
push
and
adc
and
and
(bad)
adc
and
and
nop
adc
xor
jb
and
adc
or
jae
jne
in
adc
ret
jae
and
adc
xor
push
jae
and
push
jae
and
push
jae
inc
jnp
dec
(bad)
adc
dec
add
and
loopne
and
lahf
bound
xor
fisub
nop
mov
inc
adc
cmps
std
xor
dec
adc
arpl
jae
int
push
and
adc
and
jb
and
push
jae
mov
adc
dec
adc
dec
cmp
inc
dec
(bad)
adc
dec
imul
and
loopne
and
lahf
bound
xor
ret
jnp
fist
and
jae
adc
bound
adc
sbb
mov
frstor
and
xchg
and
loopne
and
lahf
bound
xor
fsub
test
test
lods
push
fwait
test
(bad)
sbb
fisub
(bad)
adc
and
and
nop
adc
xor
sbb
and
adc
dec
adc
jne
add
adc
ret
jae
and
adc
mov
push
jae
retf
and
and
jae
adc
popa
and
adc
dec
out
jae
and
adc
and
std
xor
dec
repz
bound
xor
xchg
bound
and
jae
adc
popa
and
jns
and
adc
and
pop
lahf
bound
adc
and
fs
and
adc
and
and
(bad)
adc
and
and
nop
adc
xor
jae
and
adc
inc
dec
adc
jne
push
ret
jae
and
adc
ror
and
fist
and
jae
adc
popa
and
jns
and
adc
and
pop
lahf
bound
adc
and
in
push
and
adc
and
and
(bad)
adc
and
and
nop
adc
cmp
jb
and
adc
xor
adc
jne
scas
shl
sbb
leave
push
jae
and
rcl
and
adc
and
and
(bad)
adc
and
and
nop
adc
cmp
jae
and
adc
xor
adc
jne
jecxz
adc
sub
push
jae
and
xchg
push
and
adc
fmul
cli
out
adc
dec
adc
dec
or
or
jae
and
adc
jo
int
bound
adc
and
adc
arpl
jae
xchg
fsub
jnp
fist
and
jae
adc
bound
jns
and
adc
jne
scas
shl
sbb
leave
push
jae
and
sbb
and
adc
and
and
(bad)
adc
and
and
nop
adc
aaa
dec
mov
and
adc
ds
adc
jne
cwde
retf
adc
and
push
jae
and
adc
mov
sbb
mov
popf
les
and
cmc
cli
out
jo
(bad)
dec
sub
lds
scas
movs
xor
test
jae
dec
in
bound
jmp
mov
leave
cld
xor
jae
cwde
(bad)
(bad)
lock
mov
(bad)
fs
fmul
cli
out
adc
int
push
and
cwde
ss
lods
(bad)
(bad)
gs
and
and
mov
dec
adc
rol
fnstsw
shl
jae
and
inc
sbb
aam
jae
int3
cld
xor
dec
adc
and
adc
fs
push
jae
and
push
jae
and
push
mov
pusha
loope
enter
xor
add
and
cli
xor
dec
repz
bound
xor
xchg
mov
fstp
inc
adc
push
jae
and
push
jae
or
jae
scas
push
mov
pusha
loope
enter
jno
add
and
loopne
and
sahf
bound
xor
xchg
bound
jnp
dec
and
jnp
dec
and
adc
dec
adc
and
sbb
cwde
mov
and
sbb
fisub
(bad)
adc
dec
and
push
jae
and
push
jae
inc
jnp
dec
xor
dec
es
jo
int
bound
adc
and
push
push
and
adc
fsub
cli
out
xchg
lahf
bound
adc
fisub
lea
fstp
adc
pop
std
xor
dec
adc
arpl
jae
adc
fisub
stc
xchg
aas
and
mov
gs
and
adc
fisub
lea
out
adc
xor
dec
and
adc
int
ins
and
and
jae
adc
bound
adc
adc
sbb
adc
jne
scas
shl
sbb
and
adc
mov
enter
shl
cli
gs
mov
and
push
jae
and
push
jae
or
jae
dec
sub
jae
and
inc
sbb
aam
jae
test
xor
dec
adc
or
xor
int
xchg
fidivr
fist
and
jae
adc
popa
and
adc
dec
jg
xor
adc
and
dec
lahf
bound
adc
and
xor
mov
xchg
addr16
xlat
fild
and
mov
dec
adc
dec
add
inc
dec
xchg
jae
and
adc
and
std
xor
dec
repz
bound
(bad)
and
jnp
fist
and
jae
adc
popa
and
adc
dec
mov
and
adc
dec
or
int
adc
and
mov
or
sbb
dec
adc
dec
adc
dec
add
jbe
test
and
adc
and
std
xor
dec
repz
bound
(bad)
and
jnp
fist
and
jae
adc
popa
and
adc
dec
div
and
adc
dec
xchg
cwde
bound
adc
and
and
and
adc
and
and
(bad)
adc
and
and
nop
adc
xor
jae
and
adc
ds
adc
jne
sub
adc
ret
jae
and
adc
adc
inc
adc
push
jae
and
push
jae
cmp
adc
or
and
mov
lahf
bound
adc
cmp
xor
lods
jmp
sbb
fisub
(bad)
adc
and
and
nop
adc
cmp
sbb
add
and
loopne
and
lahf
bound
adc
or
mov
dec
adc
dec
or
inc
dec
dec
sbb
jns
shl
sbb
leave
push
jae
and
pop
outs
and
adc
and
and
(bad)
adc
and
and
nop
adc
aaa
dec
mov
and
adc
ds
adc
jne
cwde
retf
adc
and
push
jae
and
adc
mov
pop
loop
fild
fwait
xchg
out
mov
fdiv
int3
xor
inc
adc
nop
pushf
xchg
adc
and
adc
and
sbb
dec
adc
movs
out
push
sub
cld
imul
fucomi
jl
mov
jae
dec
adc
and
jae
jae
jae
and
adc
and
adc
pusha
loope
lods
pusha
in
lods
pusha
in
and
push
add
pop
loope
jae
and
jae
int
rcr
ficom
(bad)
push
bound
fist
sbb
push
jae
jns
xor
fisub
push
sbb
mov
fstp
mov
push
jnp
dec
and
xor
mov
and
xchg
fwait
int
out
mov
adc
cli
out
dec
sub
out
cli
lds
and
and
out
je
stc
jb
adc
(bad)
cli
out
xlat
cmp
and
push
jae
mov
inc
fwait
cmp
jae
pushf
push
jae
and
ret
ficom
bound
shl
and
out
and
pop
or
movs
ins
mov
push
add
mov
mov
inc
fwait
inc
cmp
adc
fbld
bound
shl
and
out
and
arpl
jae
movs
ins
mov
add
cmp
mov
inc
fwait
(bad)
adc
pop
out
jbe
xor
dec
loop
adc
movs
and
stc
imul
adc
out
pop
jae
movs
ins
mov
push
add
js
push
jae
mov
inc
(bad)
adc
pop
out
je
xor
stos
loope
adc
movs
and
stc
xchg
aaa
and
sbb
xor
mov
and
out
mov
fsub
xchg
push
fild
bound
shl
and
out
and
xchg
push
jae
movs
push
and
sbb
xor
mov
and
out
mov
mov
xchg
push
fild
bound
shl
and
out
and
cmps
push
jae
movs
ins
mov
add
adc
push
jae
mov
inc
fwait
dec
xor
jae
rcr
jle
and
bound
shl
and
out
and
imul
and
add
inc
in
jae
mov
inc
fwait
pop
xor
jae
and
cli
xor
dec
inc
cwde
bound
out
mov
adc
popa
and
out
sbb
push
jae
hlt
shl
and
fsub
stc
sub
(bad)
sbb
add
jae
pop
or
cmps
aad
test
jecxz
inc
(bad)
out
sub
and
xchg
jno
inc
and
lahf
sbb
adc
and
jmp
repnz
pop
pop
jae
jae
mov
je
adc
jne
inc
and
pushf
dec
in
jge
and
adc
loop
push
and
shl
jo
xchg
mov
and
mov
dec
cwde
adc
cwde
test
out
mov
aad
mov
enter
test
sahf
xlat
(bad)
and
jnp
jae
int
imul
and
cdq
out
fucomp
mov
ficom
push
xor
mov
and
out
mov
and
and
cwde
mov
cwde
loop
(bad)
adc
xor
mov
and
out
mov
add
and
out
mov
push
add
inc
out
jae
mov
inc
fwait
xlat
xor
jae
cwde
loop
(bad)
adc
mov
and
out
mov
int3
data16
adc
(bad)
cli
out
lods
sbb
out
jbe
xor
out
addr16
movs
enter
jne
(bad)
xor
(bad)
jmp
bound
shl
and
out
and
mov
lods
sbb
out
je
xor
mov
movs
enter
jne
repz
or
cli
out
lods
sbb
out
jnp
xor
add
addr16
movs
enter
jne
adc
(bad)
jmp
bound
shl
and
out
and
arpl
and
out
jns
xor
ret
adc
movs
enter
jne
pop
xor
and
cli
out
lods
sbb
out
js
xor
fwait
jecxz
adc
movs
enter
jne
jg
and
jmp
bound
aad
and
out
and
xlat
add
sbb
out
jle
xor
push
in
adc
movs
enter
jne
stos
xor
adc
popf
(bad)
jmp
bound
shl
and
out
and
fwait
add
ret
bound
out
mov
test
popf
jnp
adc
push
mov
mov
and
out
lock
cwde
test
out
mov
fisub
pop
xor
lods
fwait
xlat
(bad)
jae
cs
push
and
jge
and
repnz
outs
jae
lods
loope
shr
sbb
push
jae
inc
ror
mov
sbb
and
adc
popf
fldln2
mov
and
adc
cwde
in
(bad)
(bad)
sub
adc
movs
lods
mov
(bad)
dec
das
mov
xlat
neg
fldz
mov
lods
loope
shr
mov
jne
dec
retf
addr16
movs
fldln2
mov
jne
mov
and
xchg
into
fcomp
out
mov
push
cmp
call
mov
iret
ror
or
cwde
mov
sbb
push
hlt
pop
daa
adc
sbb
popa
and
add
retf
addr16
movs
(bad)
mov
jne
daa
cmp
adc
dec
add
retf
addr16
movs
fldl2t
mov
jne
dec
cmp
cli
xor
adc
(bad)
fcomp
out
and
inc
add
enter
(bad)
movs
fldl2t
mov
jne
imul
adc
movs
(bad)
mov
jne
ja
and
push
jae
mov
inc
fwait
aaa
cmp
add
mov
jne
das
xor
fldln2
mov
cmps
shl
test
(bad)
fcomp
out
and
cli
xor
test
(bad)
fcomp
out
and
out
jae
cmps
aad
dec
and
out
mov
cld
and
cwde
adc
cwde
idiv
shr
mov
fsincos
xor
test
(bad)
(bad)
out
and
hlt
mov
in
div
adc
mov
xchg
mov
jne
imul
adc
test
ficom
jae
fstp
jl
or
jae
fisub
mov
push
jae
enter
test
(bad)
fcomp
out
and
arpl
jae
cmps
aad
dec
das
shl
and
out
and
pop
add
test
(bad)
(bad)
out
and
pop
add
scas
xlat
(bad)
cwde
push
scas
xchg
scas
xlat
(bad)
repz
and
(bad)
(bad)
ds
xor
out
mov
and
(bad)
(bad)
adc
xlat
(bad)
lock
stc
out
fbld
data16
test
fucomp
mov
fiadd
dec
push
jae
mov
inc
fwait
jmp
adc
loope
(bad)
movs
fldl2t
mov
jne
arpl
out
fild
out
and
fild
jae
scas
lods
stos
xlat
(bad)
(bad)
pop
and
and
gs
pop
xor
jmp
(bad)
fcomp
out
and
nop
in
(bad)
stc
mov
ror
cli
out
xchg
(bad)
fcomp
out
and
out
jae
test
(bad)
(bad)
out
and
cwde
in
(bad)
pushf
(bad)
and
fwait
mov
mov
inc
sbb
fisub
dec
push
push
jae
and
add
jne
push
xor
in
mov
jne
mov
int
mov
sub
sar
sub
xchg
leave
jmp
popa
and
cwde
mov
gs
nop
data16
out
mov
dec
mov
test
and
adc
jae
enter
xor
out
add
adc
mov
xor
dec
adc
and
add
lods
xchg
xlat
into
(bad)
jp
push
add
jae
dec
adc
jns
cli
outs
dec
and
mov
(bad)
adc
mov
jae
lods
leave
jb
lods
rcr
jo
push
jae
mov
jae
dec
out
jae
and
adc
enter
and
pop
xor
and
cli
jecxz
adc
not
fisub
aas
add
dec
adc
mov
push
jae
mov
inc
fwait
push
mov
add
ficom
jae
mov
xchg
jbe
loope
jae
hlt
xor
in
adc
popf
push
sub
and
lea
enter
and
inc
cli
loope
sti
mov
and
mov
or
cli
lock
mov
loop
cli
fisubr
out
mov
xchg
cld
mov
and
inc
enter
and
cmps
into
xchg
enter
neg
je
mov
iret
ror
or
cwde
mov
out
cwde
sub
xchg
cld
mov
and
not
sub
mov
fwait
dec
xor
jae
out
mov
push
pop
mov
mov
mov
push
xlat
test
loop
jne
adc
movs
cmp
fbstp
jecxz
adc
hlt
iret
push
jae
mov
inc
fwait
outs
xor
jae
and
out
mov
xchg
ret
out
and
mov
jae
test
ror
(bad)
and
mov
mov
test
aam
(bad)
and
adc
mov
cmps
aad
mov
and
mov
(bad)
inc
fwait
addr16
jae
std
cmp
enter
and
sbb
iret
push
jae
mov
xor
dec
fistp
(bad)
adc
lods
cwde
jae
(bad)
pushf
inc
sub
push
jae
add
jae
(bad)
ja
mov
and
adc
mov
push
jae
jmp
xor
dec
popa
ret
bound
adc
popf
or
and
enter
cmp
inc
mov
xchg
jp
jae
(bad)
cwde
not
jns
retf
sbb
jmp
xor
dec
xor
pusha
and
adc
popf
(bad)
cld
mov
test
test
and
mov
retf
cmp
jae
dec
mov
bound
adc
out
iret
push
jae
and
sub
and
lods
int
(bad)
(bad)
adc
pushf
sbb
and
and
shl
cli
movs
xchg
cld
mov
lods
rcr
and
sbb
adc
and
jae
gs
mov
xchg
sub
jae
pusha
movs
repnz
and
dec
adc
and
and
jecxz
jae
loop
retf
fild
adc
pusha
test
pushf
(bad)
inc
fwait
dec
sub
jae
test
pushf
(bad)
xchg
mov
and
pushf
push
cwde
jae
(bad)
popf
nop
dec
int
jl
and
test
imul
adc
and
jo
and
push
retf
fild
adc
pusha
test
pushf
(bad)
inc
fwait
stos
xor
jae
test
pushf
(bad)
xchg
mov
and
pushf
push
cwde
jae
(bad)
popf
nop
dec
int
jl
and
test
imul
adc
and
stc
push
cs
adc
(bad)
cwde
test
sahf
(bad)
cwde
mov
and
sahf
bound
and
ss
test
lds
in
stos
adc
cwde
mov
and
adc
test
pop
adc
and
adc
gs
(bad)
ss
and
leave
pop
clc
lods
rcr
and
mov
and
push
iret
and
aad
and
inc
jae
loop
mov
lods
pusha
lods
and
sbb
and
mov
dec
adc
and
sbb
dec
adc
and
jae
and
adc
leave
enter
and
adc
and
shl
and
sbb
int
jge
and
mov
ja
mov
adc
movs
arpl
sti
xor
int
jle
and
adc
enter
and
cli
clc
adc
cli
jecxz
les
and
test
int
out
mov
mov
mov
and
jae
movs
loop
ins
and
cld
mov
jne
test
mov
and
adc
jb
push
jae
and
jae
int
loopne
ficom
push
daa
cmps
xor
in
adc
data16
fild
(bad)
movs
(bad)
dec
and
adc
and
fwait
or
adc
int
jg
and
out
mov
adc
and
push
pusha
and
stc
jg
and
sbb
sbb
and
jae
and
inc
and
pop
jae
into
or
rol
sub
jae
out
xor
and
stc
cmps
cs
adc
and
pusha
jge
and
dec
sub
and
xchg
mov
and
sub
shr
adc
pusha
sbb
idiv
sub
sbb
hlt
sub
adc
sub
dec
xor
jae
ds
and
sbb
sbb
jb
and
adc
sbb
and
adc
mov
jns
int
adc
int
nop
(bad)
cwde
test
out
mov
and
adc
enter
fbld
stc
mov
ficomp
mov
mov
inc
mov
int
jle
and
call
fsubr
mov
and
nop
adc
sub
gs
stos
mov
cmp
clc
fsubr
mov
cmc
in
mov
push
test
lock
push
clc
movs
shr
fisttp
xchg
scas
fstp
out
lock
hlt
fsubr
mov
mov
mov
fisubr
mov
stos
mov
cmp
cld
fsubr
mov
xchg
xchg
fstp
out
pop
movs
std
in
mov
jne
jae
and
push
jae
jecxz
jae
lods
jmp
mov
(bad)
cli
out
sub
in
adc
mov
mov
in
adc
dec
loope
jae
retf
and
push
jae
movs
sub
in
adc
and
call
pop
in
adc
sub
inc
dec
loope
jae
add
mov
jl
mov
fstp
jae
lods
jmp
shl
mov
sbb
jl
dec
push
jae
dec
adc
leave
jns
jae
popf
push
sbb
and
std
mov
ficomp
xor
sbb
jnp
mov
out
push
sub
add
and
adc
fcom
idiv
movs
int
mov
lods
(bad)
clc
xor
mov
and
aaa
sbb
gs
gs
sbb
and
popa
and
loope
popa
and
test
bound
ins
ret
outs
sbb
mov
bound
sbb
jg
and
div
and
jae
and
cld
jg
and
out
mov
and
bound
mov
bound
and
jle
xchg
add
fisub
out
jae
dec
out
mov
and
mov
mov
dec
adc
or
(bad)
adc
test
in
mov
and
cwde
mov
mov
inc
fwait
mov
mov
clc
sub
out
pop
jae
dec
out
jae
and
out
mov
and
lea
fild
adc
cwde
adc
dec
adc
and
cdq
bound
sbb
fisub
lea
aaa
adc
fcom
and
stc
movs
and
mov
lods
xchg
xchg
(bad)
mov
shr
mov
and
push
jae
sub
fbld
adc
mov
mov
and
out
mov
sbb
jae
fcom
sbb
dec
xchg
and
out
and
out
mov
cmp
mov
sbb
mov
and
jnp
dec
adc
xor
dec
adc
fist
xchg
ret
stc
sti
sub
adc
rcr
and
idiv
movs
shr
fild
mov
jne
not
fsubr
mov
and
aad
out
mov
test
and
out
jae
and
out
mov
and
test
fild
jae
cwde
adc
dec
adc
and
cdq
bound
sbb
fisub
test
fwait
aaa
das
adc
fcom
jb
(bad)
lock
and
push
fldenv
jnp
dec
and
adc
and
and
and
push
jae
(bad)
sbb
int3
aad
and
out
mov
into
sub
xchg
mov
fwait
mul
sbb
(bad)
sbb
or
and
call
sbb
fisub
test
fwait
sub
leave
mov
xchg
jae
(bad)
jb
mov
sub
mov
fstp
mov
fiadd
movs
shr
mov
jne
inc
retf
(bad)
movs
shr
mov
jne
fld
and
jns
and
out
mov
jne
inc
mov
aaa
sbb
movs
lods
jb
(bad)
jae
add
jns
leave
adc
and
ins
jp
and
push
jae
nop/reserved
int3
sbb
mov
ret
(bad)
fsubr
mov
(bad)
mov
xchg
xchg
(bad)
and
sti
xor
test
xchg
(bad)
and
pop
sbb
cmps
aad
dec
ficom
jae
test
jb
(bad)
and
adc
xlat
sub
out
mov
and
jnp
dec
mov
xor
dec
adc
fist
cmp
iret
sub
adc
fnstsw
mov
(bad)
mov
xchg
xchg
(bad)
and
clc
xor
test
xchg
(bad)
and
neg
jae
cmps
aad
dec
ficom
jae
test
jb
(bad)
and
adc
fsub
stc
dec
sub
out
mov
and
jnp
dec
dec
clc
xor
dec
adc
fist
cmp
popa
and
adc
lods
test
mov
ficom
dec
and
adc
add
sbb
dec
and
enter
and
and
(bad)
adc
leave
and
jae
jecxz
mov
(bad)
jae
sbb
lds
scas
xchg
jbe
(bad)
mov
outs
push
dec
and
clc
xor
dec
adc
fist
cmp
popa
and
adc
mov
ficom
stc
movs
(bad)
mov
sbb
add
lods
(bad)
(bad)
movs
and
mov
jne
not
fsubr
mov
and
aad
out
mov
hlt
jp
and
out
jae
and
out
mov
and
(bad)
adc
mov
ficom
push
add
sbb
dec
add
bound
push
jae
fisub
(bad)
adc
leave
ins
adc
jecxz
(bad)
(bad)
out
jae
sbb
lds
scas
xchg
jbe
(bad)
mov
outs
push
dec
and
stc
xor
dec
adc
fist
xor
popa
and
adc
mov
ficom
(bad)
lods
and
mov
cmps
(bad)
push
call
(bad)
(bad)
sub
push
mov
inc
(bad)
movs
shr
mov
jne
inc
retf
(bad)
movs
shr
mov
jne
outs
sub
jnp
dec
and
jnp
dec
and
push
fsub
stc
retf
and
shr
mov
lods
jmp
xchg
fstp
out
clc
movs
(bad)
fild
sbb
fisub
xchg
and
jae
sbb
bound
sbb
mov
lock
and
push
fldcw
sbb
out
and
and
pusha
and
out
mov
iret
adc
and
(bad)
movs
aad
mov
jne
jno
cmp
movs
xchg
(bad)
fwait
out
and
jae
test
mov
ficom
dec
and
pushf
out
fsubr
mov
pushf
out
aad
out
mov
movs
xchg
(bad)
fwait
and
jae
and
out
mov
adc
cmp
push
jae
nop
in
(bad)
stc
sti
and
ret
and
movs
xchg
(bad)
fwait
cmp
adc
adc
popa
and
adc
and
sbb
adc
and
jae
gs
and
jecxz
adc
mov
nop
pushf
test
jae
daa
jnp
dec
and
out
mov
out
adc
jecxz
addr16
call
and
push
fldcw
sbb
out
and
add
aam
out
mov
das
adc
and
(bad)
movs
aad
mov
jne
jb
aad
xor
fisub
iret
and
jae
fst
mov
fucomi
mov
cmps
adc
loop
add
adc
and
and
dec
adc
mov
and
adc
jb
push
jae
and
jae
int
cli
(bad)
xchg
mov
dec
adc
adc
int
jbe
and
cwde
idiv
fsubr
mov
push
add
push
sub
fs
rcl
and
sub
out
jae
lods
hlt
lock
sub
ja
fs
fldcw
test
lods
push
vpshad
sub
adc
and
adc
frstor
mov
sub
imul
and
xchg
ret
fs
adc
fisub
stc
(bad)
jmp
fwait
lea
sub
and
xchg
adc
adc
adc
js
adc
(bad)
and
mov
mov
int
ja
and
cwde
mov
adc
js
adc
fsub
stc
and
mov
mov
int
ja
and
adc
loop
inc
add
xchg
dec
push
loope
jae
push
sbb
int
ja
and
push
jae
cmp
jae
push
add
int
jo
and
cmp
sbb
stc
fisub
fs
cmp
(bad)
pusha
and
cwde
mov
adc
jne
cmp
inc
or
push
jae
and
jae
fst
mov
adc
and
jae
adc
fsub
fs
cmp
bound
push
jae
and
jae
adc
jne
cmp
test
aaa
out
push
xor
fs
push
sbb
ja
and
cmp
jnp
shl
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
inc
and
fwait
adc
lods
(bad)
repz
pop
fs
dec
pop
cwde
mov
stc
and
sub
rol
or
repz
add
push
jl
and
mov
and
cwde
and
int
sub
pop
and
(bad)
jnp
enter
and
and
and
out
mov
shr
mov
and
adc
and
sub
xor
aad
and
out
xchg
and
sbb
pushf
out
mov
ficom
stos
lods
ins
out
clc
add
in
pop
xor
hlt
imul
sbb
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
and
adc
mov
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
and
adc
jae
.byte
.byte
