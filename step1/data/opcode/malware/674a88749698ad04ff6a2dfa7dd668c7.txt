lock
xor
mov
pusha
push
dec
sbb
jmp
sub
inc
cmp
jmp
xor
test
aad
icebp
dec
or
sti
and
outs
push
in
xchg
mov
push
call
push
stc
add
push
js
and
cli
add
pop
sub
sbb
iret
adc
inc
pop
sub
jle
fwait
xor
ja
imul
pop
(bad)
loope
add
stos
pop
inc
xchg
add
pushf
jae
test
or
push
mov
mov
popa
xchg
adc
daa
mov
push
dec
mov
adc
fbstp
dec
push
jmp
pop
pop
call
push
cmp
mov
mov
adc
xchg
cmps
push
fdiv
push
nop
or
jle
mov
sub
xchg
xlat
xchg
pop
cwde
or
outs
pop
cdq
sub
push
pusha
into
shl
mov
add
aas
idiv
ror
push
xor
push
cld
fstp
pop
shl
inc
retf
and
int
jp
aad
mov
cmp
jge
sbb
cli
mov
ins
push
popa
push
push
shl
addr16
out
mov
inc
dec
fimul
inc
adc
pop
mov
mov
jecxz
out
pop
xchg
jae
sbb
(bad)
fdiv
mov
stc
fcomp
and
jecxz
inc
add
xor
sahf
xchg
(bad)
dec
cdq
and
pop
cmp
addr16
sbb
(bad)
xlat
push
repz
adc
inc
and
push
repz
mov
cwde
retf
mov
mov
aaa
mov
xchg
mov
and
jo
jnp
int3
push
xor
aas
add
jo
sub
push
call
xor
enter
jg
popf
pop
sbb
pop
loope
popf
leave
mov
cmp
test
and
shr
adc
jge
pop
or
pop
xchg
mov
adc
push
mov
mov
xchg
adc
xor
xchg
sbb
inc
jo
cdq
pushf
ds
cmc
sub
adc
(bad)
outs
outs
adc
jbe
add
data16
mov
test
cmp
idiv
xchg
sbb
mov
ins
sub
or
mov
(bad)
push
jns
xor
jns
es
or
lds
mov
jo
shl
inc
mov
inc
cli
popf
neg
pop
adc
xchg
pop
mov
repz
out
fcomp
dec
mov
sub
test
inc
inc
mov
cli
scas
pop
mov
dec
jecxz
std
add
mov
ins
mov
sar
sub
popa
mov
sub
add
cmovs
js
push
call
pop
mov
or
cmp
cmc
cli
rol
in
mov
dec
and
fwait
cwde
and
popf
and
sar
gs
in
cs
mov
mov
fld
jmp
cs
dec
dec
mov
mov
repnz
jmp
inc
sub
fst
push
dec
adc
mov
imul
addr16
ret
push
cld
mov
mov
cs
mov
mov
or
ret
test
stos
lock
add
add
retf
nop
push
rcr
ficom
cmp
jmp
into
lahf
add
and
cmp
test
mov
cmp
fidivr
adc
sbb
jno
inc
retf
jle
push
aad
inc
add
add
and
jg
rcr
call
push
enter
and
mov
fs
aas
ficom
mov
punpckhdq
iret
out
call
imul
stos
retf
repz
jmp
and
mov
std
or
out
sbb
arpl
xchg
push
xchg
nop
adc
inc
dec
xor
leave
test
into
mov
mov
fisubr
jbe
sti
and
and
aaa
mov
cmps
lahf
popa
imul
mov
test
inc
dec
and
mov
in
aaa
add
aam
dec
ins
or
test
mov
int3
test
inc
movs
mov
ss
aam
(bad)
out
or
and
mov
call
cmp
idiv
sar
cmp
ins
xchg
sar
add
or
lods
add
pop
mov
dec
stos
out
outs
aam
ret
(bad)
mov
or
call
in
jne
sbb
stos
loopne
mov
fs
adc
pop
mov
jnp
inc
jne
push
repz
int3
mov
ins
(bad)
push
xor
test
test
movs
push
fmul
(bad)
cmc
leave
cmp
cmps
adc
or
push
out
sub
jle
shr
scas
ja
int
inc
out
pushf
fisub
add
int
gs
cmp
cmp
jle
imul
cmps
cdq
(bad)
imul
pushw
out
add
jp
inc
mov
xor
int3
pop
test
pop
mov
shl
dec
sbb
mov
loop
lahf
inc
dec
adc
sbb
outs
call
pop
pop
lods
jo
sbb
cmc
jns
popa
shl
ins
and
dec
adc
pop
scas
or
repnz
dec
test
mov
pusha
outs
xchg
jl
jne
retf
popf
js
mov
fst
xchg
mov
jnp
inc
movs
outs
(bad)
mov
mov
jecxz
cwde
xlat
inc
jecxz
pop
nop
mov
xchg
xor
enter
mov
pop
lods
jle
sub
gs
push
stos
or
push
cmp
cmp
nop
jnp
xchg
loop
shr
fst
scas
fst
push
(bad)
pop
cdq
push
rol
test
xor
and
retf
xchg
sub
jg
mov
aas
rol
mov
add
adc
lahf
push
add
add
jmp
inc
inc
jmp
mov
sub
push
push
inc
push
inc
inc
push
inc
inc
call
inc
call
inc
inc
inc
mov
mov
mov
xor
push
call
ret
mov
add
mov
add
mov
mov
ret
jmp
pop
pop
push
mov
jmp
nop
ret
and
xor
add
mov
ror
jmp
nop
ret
mov
rol
shl
and
and
jmp
ror
ror
ror
mov
add
mov
ret
add
add
add
push
loop
push
push
push
call
mov
mov
push
push
push
push
push
push
push
call
mov
mov
push
push
call
push
call
mov
mov
push
mov
push
push
call
cmp
jne
jmp
inc
push
mov
mov
pop
loop
jmp
pop
pop
mov
mov
xor
mov
jmp
mov
mov
push
jmp
inc
inc
call
push
call
cmp
je
jmp
add
mov
inc
shl
inc
mov
inc
mov
inc
shl
inc
add
inc
inc
add
inc
add
inc
inc
shr
inc
inc
dec
jne
push
push
push
dec
push
inc
push
call
mov
jmp
int3
jmp
jmp
jmp
jmp
jmp
jmp
jmp
