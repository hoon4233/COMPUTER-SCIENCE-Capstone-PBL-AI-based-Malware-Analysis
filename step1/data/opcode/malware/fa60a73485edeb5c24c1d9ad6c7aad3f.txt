in
and
mov
das
dec
or
adc
pusha
test
enter
cmp
arpl
xor
sbb
sar
sub
ja
pop
inc
inc
dec
in
retf
adc
jns
pop
call
push
daa
or
mov
add
or
stos
punpcklwd
loop
aad
xchg
push
(bad)
lock
inc
(bad)
ror
xor
test
mov
mov
mov
je
sbb
push
cmp
mov
call
mov
jp
into
fld
rcl
push
cmps
test
jmp
aad
dec
jb
inc
sbb
sbb
ja
nop
repz
xchg
mov
cdq
sbb
mov
inc
pushf
cmp
rcl
adc
fcmove
rcl
sub
inc
mov
jg
add
mov
stc
push
test
gs
xchg
in
cdq
or
push
aas
ret
adc
add
arpl
int3
rcr
xchg
or
cmp
inc
cmp
pop
adc
fst
sub
shl
ja
rcl
fild
mov
movs
jg
adc
ja
jecxz
cmp
jmp
les
out
mov
mov
stos
and
cdq
xor
retf
sti
repnz
xor
test
imul
push
cli
fwait
(bad)
pop
cmp
add
popa
call
mov
outs
pop
mov
call
enter
sbb
out
pop
jne
fcom
scas
jg
aad
rcl
xlat
push
add
test
retf
cmp
retf
aas
jae
rol
(bad)
stos
cmp
pop
pushf
(bad)
sar
pop
push
ror
pop
int3
or
mov
mov
add
loop
add
sub
pusha
sbb
repz
sahf
pop
jne
adc
push
int3
push
int
test
std
push
and
mov
mov
test
repz
mov
aaa
ins
call
fstp
dec
dec
inc
out
(bad)
ret
dec
pop
xlat
retf
dec
add
(bad)
pop
arpl
shl
mov
or
cmp
ret
fimul
sbb
mov
pop
fiadd
inc
dec
cdq
add
push
cmp
cwde
(bad)
cmp
add
test
cmp
xor
cmp
jb
xchg
daa
mov
cli
(bad)
icebp
xchg
dec
not
stos
jmp
pushf
jmp
in
loop
js
test
jge
aas
js
push
sti
das
daa
icebp
stos
jo
and
pop
push
cld
add
lahf
xchg
inc
inc
cli
rol
pop
retf
xor
divps
in
push
xchg
and
in
in
mov
cmps
std
mov
xor
jbe
xchg
jmp
dec
xor
fcomp
outs
lods
mov
lea
pop
mov
push
and
ret
sbb
xor
cld
mov
mov
adc
add
jae
or
aam
outs
in
rcr
out
add
fwait
repnz
ja
push
repnz
pusha
test
inc
nop
jge
inc
test
mov
daa
xchg
into
fld
pop
test
or
mov
loope
in
jnp
adc
fmul
fmul
inc
ret
fs
xor
mov
or
ja
cmp
jmp
mov
jns
push
pop
adc
cs
cdq
mov
mov
push
mov
das
in
inc
aad
ss
xor
call
punpckhbw
cmp
sub
push
fwait
aam
adc
mov
sbb
add
dec
mov
lods
push
pop
mov
jg
mov
sub
push
mov
jle
lods
movs
pop
xor
repnz
in
call
hlt
sub
xchg
int3
cs
xor
adc
sbb
je
outs
(bad)
stc
add
sti
and
in
sub
or
out
aas
sub
add
cli
iret
imul
cmps
call
addr16
xor
loope
sti
push
mov
jb
ret
sbb
ins
mov
(bad)
rcr
fcomp
cmp
ds
pusha
out
sub
fcom
mov
or
loop
mov
xchg
fbstp
jmp
movs
sub
imul
aas
lea
xor
loop
mov
pop
into
pop
imul
inc
dec
out
sub
and
loopne
add
ficom
into
aad
ja
aaa
rcr
push
rol
push
call
xchg
or
xor
sti
cmp
push
mov
pop
adc
sbb
and
ins
lds
sbb
aad
inc
jae
cdq
push
push
sbb
sbb
adc
dec
ror
add
xor
mov
int3
jno
dec
push
xor
dec
das
daa
cld
mov
push
retf
test
dec
adc
or
inc
pop
imul
mov
jo
call
aaa
shl
jnp
rcl
sar
lahf
fmul
sbb
mov
sub
adc
inc
movs
pop
pusha
sbb
adc
add
jmp
inc
jne
mov
out
es
in
jp
mov
mov
movs
pop
pusha
sbb
or
out
lea
pop
and
fst
mov
mov
push
push
adc
pop
xchg
mov
out
adc
pushf
adc
and
pop
cmp
shl
and
xchg
and
jp
mov
call
add
sbb
xchg
les
loopne
push
adc
cmp
leave
ds
outs
out
and
and
sbb
pop
stos
add
mov
jno
and
repz
and
retf
inc
nop
inc
mov
shr
mov
sub
outs
cmps
test
iret
mov
pop
lock
movs
(bad)
pusha
fs
sbb
das
mov
push
movs
mov
mov
ror
repnz
mov
loop
mov
loopne
mov
ins
fcomp
mov
mov
cmps
push
push
pop
cmp
or
call
sbb
loopne
pop
arpl
lds
inc
(bad)
call
mov
pop
popa
xlat
push
push
jge
push
jecxz
sbb
mov
sbb
or
xchg
mov
out
mov
inc
inc
aad
sar
pop
jecxz
add
jmp
retf
inc
dec
aam
push
cmps
add
push
sahf
add
call
inc
cli
sub
lods
and
sar
jmp
sub
imul
shr
stc
xor
es
cmp
jmp
leave
mov
pop
test
add
in
scas
movs
add
sbb
jns
pop
xchg
add
mov
gs
gs
or
or
mov
or
inc
cmp
mov
dec
and
jnp
sbb
mov
jno
inc
pusha
(bad)
mov
lds
or
adc
enter
in
mov
mov
ss
aad
mov
adc
sub
mov
pop
lods
mov
pop
mov
mov
push
cmp
push
mov
jb
push
or
add
(bad)
clc
mov
lds
ret
mov
adc
jno
and
ror
and
inc
lea
pushf
movsx
jmp
(bad)
into
ins
mov
test
pop
int
sub
stos
popa
mov
out
mov
ror
or
push
(bad)
lahf
ins
pop
push
jo
xor
push
mov
mov
fwait
popa
pop
repz
xchg
sbb
popf
and
pop
mov
jne
sbb
mov
or
ret
or
adc
ficomp
mov
add
sbb
jbe
imul
out
jge
(bad)
not
fidiv
jbe
dec
jne
dec
adc
dec
add
fdivr
add
(bad)
jg
in
xchg
in
cwde
cs
in
lahf
div
adc
cmps
ins
dec
sbb
ret
ret
fnstenv
or
stc
push
call
or
mov
pop
push
dec
int3
inc
fwait
ror
xchg
dec
dec
mov
push
inc
popf
add
inc
inc
out
sub
lods
mov
faddp
pop
dec
add
adc
jmp
shl
ss
mov
das
out
data16
into
cmp
inc
faddp
mov
or
and
jmp
bound
push
lods
add
mov
or
inc
pop
pop
adc
push
mov
(bad)
and
and
pop
out
ror
dec
push
enter
enter
add
lods
mov
mov
jno
call
mov
push
adc
js
movs
test
jge
cli
push
call
test
shl
and
rcl
repnz
mov
mov
jmp
lea
je
clc
jmp
lea
je
test
clc
clc
stc
cmp
jmp
stos
pusha
xor
test
xlat
lods
sbb
test
push
jmp
test
or
scas
inc
jle
mov
or
ss
push
dec
(bad)
jge
rcl
test
outs
inc
cmp
sbb
jns
ins
jmp
aam
jmp
loopne
inc
mov
mov
jmp
cs
xchg
jnp
sub
push
imul
dec
mov
push
int3
cmp
outs
push
cmp
dec
mov
lds
popa
push
push
inc
ficom
mov
dec
mov
sahf
daa
jnp
jns
loope
(bad)
inc
ficom
test
inc
lock
loope
dec
mov
sbb
rcr
mov
cs
lods
into
arpl
and
push
lods
les
or
stos
mov
xor
mov
ja
(bad)
out
enter
mov
cmps
jnp
push
mov
push
sub
xchg
les
add
cli
xchg
add
xor
movs
lea
sub
jns
aaa
imul
pop
jno
js
mov
push
jnp
cmp
jmp
jno
lods
loope
stos
clc
push
les
xor
call
fwait
je
sub
adc
mov
cwde
scas
mov
jmp
fcomp
pop
cmps
jbe
push
sbb
jmp
sub
aad
outs
cmp
jno
mov
hlt
int
pop
xchg
or
mov
pop
jno
jp
or
xlat
mov
test
vorps
jae
test
ins
or
sbb
sub
loop
arpl
out
das
or
nop
imul
(bad)
xor
lea
jae
jmp
sbb
jecxz
test
mov
sbb
xchg
dec
hlt
sub
add
mov
mov
sub
push
pxor
jb
inc
cld
add
imul
inc
add
sub
fidivr
inc
aam
je
fucom
jb
jns
adc
retf
adc
push
cmc
jmp
outs
jmp
jl
pop
xchg
and
mov
(bad)
adc
je
aas
test
fdiv
es
add
test
jbe
cld
jmp
sub
mov
cmp
sub
dec
arpl
leave
rcr
dec
push
mov
pop
popf
aad
sbb
(bad)
jmp
repz
push
popa
xchg
lods
pop
or
jg
lea
cmps
fmul
inc
xor
icebp
popa
fadd
jbe
push
or
sbb
xor
aas
retf
mov
adc
pop
neg
shl
sub
xor
fs
cmps
(bad)
jg
push
rol
pop
icebp
in
pop
jae
test
and
ror
jge
retf
ret
mov
loop
add
hlt
inc
jge
test
clc
push
or
or
aad
pop
inc
cdq
shr
lds
inc
dec
lds
xor
div
sahf
jp
adc
leave
dec
mov
or
outs
aaa
shl
push
pop
nop
or
jne
test
iret
and
scas
daa
mov
mov
xor
mov
cmp
loope
sbb
dec
push
in
mov
test
sbb
nop
sub
aam
sbb
jae
clc
repz
popf
adc
mov
cdq
ins
(bad)
sub
ds
jb
inc
call
or
test
bound
outs
(bad)
std
adc
out
mov
cmp
andps
xchg
es
adc
mov
test
aam
jle
fsub
sbb
fimul
(bad)
movs
push
push
(bad)
mov
retf
dec
test
xor
add
push
sub
sub
xor
lods
lahf
push
mov
xlat
stos
jne
sub
inc
inc
(bad)
aam
scas
cmp
fs
jb
call
mov
inc
xchg
push
scas
pop
add
repz
sub
jg
arpl
(bad)
fdivr
addr16
sub
mov
sar
into
pop
sub
stos
stos
xchg
movs
out
test
sub
or
xchg
movs
sub
rcr
es
xchg
in
in
in
pusha
jecxz
mov
xchg
adc
push
aaa
ins
mov
inc
jle
push
retf
xor
cmp
idiv
psubsb
jae
(bad)
enter
pop
dec
push
xor
clc
xor
xchg
(bad)
std
dec
out
jae
inc
out
ja
pop
mov
adc
pop
inc
or
inc
nop
nop
jp
aad
cld
imul
test
mov
jne
es
mov
mov
sub
int3
dec
push
ucomiss
dec
fisub
fidivr
xchg
pop
or
pop
pop
fst
pushf
xchg
or
xor
(bad)
and
mov
xchg
or
idiv
cmp
ficom
xchg
mov
or
outs
movs
shl
adc
sbb
daa
sbb
sub
xchg
adc
pop
rcr
push
test
sar
pop
xchg
out
and
xchg
(bad)
in
gs
mov
mov
adc
push
shl
out
mov
(bad)
sub
xor
rcr
push
dec
arpl
adc
pop
jmp
es
cmp
fld
jns
cmp
ret
jns
call
xor
xor
cmp
cmp
push
sub
mov
adc
out
lea
or
cmp
push
icebp
xchg
leave
data16
or
pop
int
sub
sbb
test
push
dec
xchg
push
pop
adc
les
xchg
sbb
dec
mov
xor
adc
or
and
pop
jg
ins
cmps
mov
imul
test
fs
es
sub
pop
stos
and
nop
sti
jle
repz
cmps
and
jecxz
adc
sbb
add
or
das
push
mov
fcmovnb
sub
arpl
sub
lahf
push
or
lods
push
(bad)
in
fs
xlat
stos
dec
shr
xchg
pushf
jb
mov
call
je
inc
add
jmp
test
inc
jns
je
sbb
dec
cmps
call
repz
lock
mov
aad
sub
es
scas
mov
in
arpl
push
into
mov
mov
retf
jbe
jmp
scas
movs
and
jne
push
push
test
push
aad
adc
repnz
bound
sbb
dec
or
aam
mov
mov
test
cli
add
push
aas
div
es
pop
push
mov
pop
into
xor
mov
popf
mov
push
iret
popf
inc
and
fist
ss
add
xor
push
pop
jecxz
mov
or
dec
cs
fcmovbe
xlat
dec
data16
stos
sub
ins
movs
cmp
outs
stc
(bad)
sbb
lahf
inc
je
pop
jo
movs
cmp
adc
rcr
icebp
stos
bound
pop
inc
and
xchg
cmp
adc
adc
idiv
aam
push
fldcw
add
adc
add
sub
add
aaa
sbb
or
sbb
jmp
add
add
add
add
adc
add
sub
add
inc
pop
add
adc
add
sub
add
add
add
(bad)
(bad)
sbb
sub
sbb
or
add
add
add
(bad)
aam
add
adc
add
sub
add
add
add
in
and
add
adc
add
sub
add
add
add
cmp
add
sbb
and
add
add
add
cmp
add
sbb
add
add
btc
btc
mov
pusha
stc
push
cmp
pushf
push
mov
push
lea
jmp
pusha
pusha
call
stc
cmp
jmp
hlt
sub
push
or
popa
cwde
pop
dec
xor
(bad)
call
das
out
(bad)
jl
test
push
bound
iret
stos
aas
and
cmp
xchg
stos
fisttp
pop
ror
mov
push
dec
jl
daa
sbb
adc
in
lods
mov
jg
push
or
and
or
add
inc
addr16
adc
shr
xchg
mov
jb
mov
ja
mov
adc
mov
loope
sbb
rep
xchg
popf
rol
xor
xchg
push
lods
pop
repz
iret
imul
popf
mov
icebp
aad
add
mov
outs
(bad)
mov
shl
ficom
pop
sub
sbb
fmul
inc
cmc
dec
psubb
xchg
mov
mov
mov
mov
or
or
fnsave
pusha
add
outs
iret
std
mov
adc
int
xchg
adc
ret
cmp
mov
dec
(bad)
jle
push
add
pusha
fwait
jb
mov
mov
ror
scas
icebp
push
cmps
sahf
sbb
sub
mov
inc
lahf
clc
add
pop
cmp
out
pop
cmp
sahf
pop
pushf
mov
xchg
add
jp
adc
sbb
cli
mov
in
jle
adc
loopne
push
xor
mov
jle
retf
ret
mov
(bad)
test
push
mov
scas
shl
leave
inc
inc
mov
mov
in
mov
xchg
mov
clc
or
das
test
pop
cmp
jecxz
mov
jne
push
outs
and
cmc
ins
jno
and
jb
scas
xchg
cmp
xchg
fs
ja
and
and
xor
mov
sub
stc
adc
or
movsx
add
and
mov
push
shl
or
mov
call
bsr
sub
neg
neg
mov
sub
bsf
jmp
inc
call
mov
adc
test
mov
push
mov
pop
adc
shl
cmps
pop
inc
ds
lea
pop
out
aas
div
cmp
dec
adc
adc
ss
int3
add
adc
in
shr
mov
jo
ror
cmp
ret
xor
cmp
cdq
push
push
push
enter
and
in
jae
xchg
push
(bad)
neg
repz
mov
inc
cs
into
fs
pop
push
in
cmp
fmul
jb
pop
mov
xchg
enter
cmc
in
jns
sub
data16
data16
jae
and
test
jae
xlat
mov
add
dec
test
lock
pushf
aad
or
into
jne
jne
rol
or
mov
lds
dec
inc
push
cmp
xor
mov
sub
retf
add
push
repz
mov
adc
pop
adc
xchg
icebp
(bad)
sbb
adc
mov
sub
push
hlt
add
cmp
mov
dec
loop
mov
and
cmps
test
out
daa
add
pop
mov
std
sahf
adc
in
and
jmp
repz
fisttp
adc
xlat
push
in
out
in
cwde
xor
cld
push
xchg
in
dec
push
cmp
retf
in
int3
ret
mov
mov
fdiv
or
push
sti
je
ds
fs
jae
setp
mov
add
bsr
push
not
mov
btc
mov
mov
jmp
adc
stos
icebp
dec
test
cld
push
ror
mov
shr
sbb
ror
dec
inc
fs
cmp
mov
pop
sbb
xchg
pop
mov
ja
inc
xor
add
inc
mov
xchg
(bad)
out
jge
jns
sbb
sbb
stos
adc
int3
test
repz
adc
gs
out
add
stc
addr16
cmps
push
inc
lds
scas
movs
pop
inc
jnp
in
xor
xor
xlat
(bad)
cwde
in
mov
addr16
icebp
hlt
into
repnz
(bad)
add
lahf
fmul
cmp
stos
lds
push
xor
inc
sti
xor
dec
inc
or
mov
pop
dec
inc
out
enter
fistp
repnz
push
out
sub
stos
std
(bad)
sbb
(bad)
dec
add
pop
dec
test
popa
test
iret
inc
xchg
dec
imul
addr16
adc
add
call
and
jno
dec
pop
sbb
or
lock
(bad)
mov
cmps
mov
ja
aaa
xchg
pop
jbe
cmc
or
(bad)
call
push
fbld
cmp
mov
cmp
ret
ins
cmp
mov
mov
pop
popa
out
adc
in
mov
dec
lods
sbb
and
xchg
jne
inc
call
ins
push
int
sub
stos
adc
in
repz
enter
mov
rcl
outs
xor
push
into
bound
and
daa
lods
cmc
dec
test
sahf
push
dec
and
ficom
stc
xor
lods
and
cmp
xor
fs
sbb
arpl
pop
fdivr
mov
jne
push
call
and
jae
dec
pop
jg
repz
inc
pop
popf
mov
ror
dec
xor
sbb
add
inc
shr
sbb
test
and
xor
dec
add
inc
cmp
jmp
jl
xor
movs
sbb
loop
pop
xchg
mov
xor
jb
pop
cld
cmps
dec
aas
cmp
adc
jecxz
pop
push
dec
scas
inc
pop
mov
jmp
jp
hlt
ss
cli
xchg
loopne
jo
sub
in
arpl
std
sbb
jl
movs
movs
(bad)
pop
jno
gs
pop
and
call
mov
test
fldcw
mov
out
xchg
ss
(bad)
mov
push
mul
jbe
jne
push
outs
scas
xor
cmp
pop
in
les
or
push
sub
inc
gs
pop
mov
sbb
cmp
sub
cmp
mov
or
mov
stos
(bad)
xor
inc
jmp
lea
pop
(bad)
in
adc
cli
clc
push
sahf
xor
pop
mov
es
ret
outs
pop
fist
lods
jecxz
mov
stos
xor
(bad)
push
outs
add
jb
in
cs
enter
push
push
push
out
jne
adc
push
sahf
jne
dec
add
test
(bad)
jmp
lods
mov
xor
add
inc
inc
jns
jno
dec
int
sub
inc
sub
sbb
imul
cdq
out
repz
cmp
out
imul
rcr
ret
and
dec
sub
push
jnp
fst
lods
in
adc
scas
push
xchg
jmp
lods
test
and
mov
mov
or
dec
test
push
dec
cld
enter
mov
pusha
jmp
cmp
adc
sub
sbb
test
cmp
pop
sbb
push
mul
push
or
or
inc
test
sahf
xchg
xchg
dec
jno
inc
cmp
call
fs
mov
jge
cmp
fiadd
jmp
shr
in
stos
dec
add
rcr
gs
cld
add
xchg
int3
call
dec
pushf
outs
nop
repz
cmp
jl
cmp
imul
ret
push
sbb
mov
cmp
xchg
xchg
dec
pop
cmp
dec
in
arpl
cli
jnp
sbb
xchg
(bad)
sub
mov
jle
push
mov
inc
mov
mov
aad
into
sub
loope
mov
(bad)
(bad)
sbb
in
test
inc
jne
sub
pop
push
sbb
cli
mov
sub
ds
test
add
fmul
push
addr16
js
je
jb
arpl
jae
loopne
gs
inc
test
push
retf
out
movs
pop
cmp
mov
ins
mov
mov
fisttp
fcmovnbe
stos
loop
mov
in
dec
dec
push
sub
or
(bad)
ror
mov
bound
pop
xchg
call
ja
sbb
push
xchg
jp
push
popf
test
jge
jge
(bad)
out
stos
cs
gs
jnp
loop
adc
and
repz
push
call
cmp
lock
bound
xor
pop
mov
xchg
add
jmp
neg
adc
sub
xor
push
movsx
jmp
jl
xor
test
and
ror
loop
or
pop
sti
xor
je
jmp
fwait
adc
fist
cli
loop
inc
push
or
cmp
jbe
mov
mov
enter
cmp
aam
test
mov
or
adc
sbb
out
mov
lods
loopne
xor
rcl
xchg
jbe
inc
mov
xor
pop
add
mov
sti
fist
push
push
adc
sbb
in
sub
nop
xlat
ror
pop
mov
hlt
sbb
xlat
mov
aas
sub
movs
idiv
inc
adc
sbb
pop
in
repnz
adc
cwde
inc
mov
xchg
fimul
imul
sbb
jg
sbb
frstor
pusha
xor
pop
inc
popa
outs
int
adc
in
sbb
idiv
cld
outs
imul
rol
movs
add
nop
inc
lods
repnz
dec
pop
iret
mov
and
dec
je
bound
xor
mov
lock
or
sbb
repz
leave
push
fsubr
imul
inc
dec
das
iret
lahf
test
mov
inc
out
jg
inc
cli
jg
mov
mov
push
out
rcl
sbb
lea
jo
push
iret
lahf
mov
icebp
test
shl
in
sub
test
ror
imul
test
dec
dec
add
pop
imul
imul
mov
clc
push
sbb
aaa
xchg
or
adc
and
not
fst
lods
jne
ja
mov
jl
xchg
mov
gs
xor
fsubr
fist
add
out
add
aam
push
xor
pop
inc
jb
xchg
cdq
cmp
fmul
and
adc
hlt
aam
push
push
int3
add
cmps
(bad)
dec
aad
jg
fist
jmp
(bad)
shr
rcl
or
add
inc
sbb
cmp
mov
sbb
int3
and
push
or
ret
std
retf
pop
inc
push
xor
(bad)
shl
or
test
add
shld
bts
mov
shl
bt
call
pop
mov
adc
push
cmp
push
xchg
jns
stos
inc
inc
mov
outs
push
pop
out
and
sbb
iret
sbb
sti
push
mov
in
fscale
xchg
mov
icebp
sub
iret
jo
mov
(bad)
stos
or
mov
retf
(bad)
jge
inc
xchg
or
cmp
sahf
pop
(bad)
mov
ret
jbe
adc
xor
stos
mov
outs
out
inc
in
loop
mov
popf
iret
rol
out
xchg
inc
jne
(bad)
cmc
sbb
inc
in
push
cdq
xchg
imul
xchg
mov
inc
cmp
std
cmc
mov
mov
ret
sbb
retf
cmp
out
mov
add
mov
lock
sbb
pushf
in
test
call
jno
js
stc
add
pop
cmp
push
xchg
push
mov
test
inc
and
scas
aas
inc
ins
push
lea
out
into
inc
push
outs
xor
cdq
nop
jno
dec
mov
mov
sahf
lea
inc
and
aaa
mov
fwait
pusha
movs
push
push
clc
loope
push
push
aas
data16
adc
dec
cmp
aas
test
into
mov
fcom
dec
lahf
test
(bad)
xor
and
fbstp
std
sbb
in
jbe
cmp
add
fcmovb
test
dec
add
in
daa
sbb
xchg
in
jmp
hlt
int3
xor
jae
jge
cmp
mul
or
push
add
cmp
test
rcl
popf
pop
or
ss
pop
scas
mov
out
push
sar
repz
lods
jns
xchg
or
retf
xchg
add
les
out
fcomp
xchg
cdq
sbb
aam
and
mov
jo
pop
shl
int
inc
aas
dec
shr
fst
in
or
daa
fidiv
cli
jo
add
das
mov
add
xor
outs
mov
inc
sub
int3
inc
dec
and
mov
xor
mov
jne
mov
js
movs
sub
inc
sbb
adc
jle
fnstcw
inc
xchg
retf
repz
or
repnz
mov
mov
and
mov
clc
mov
clc
mov
test
pushf
mov
mov
call
ins
arpl
cmp
push
popa
xchg
sub
jmp
daa
pop
push
xchg
retf
(bad)
mov
iret
push
pop
fild
hlt
lahf
dec
data16
call
fld
rcr
nop
jb
shl
rcr
das
cmp
fcomp
pop
add
mov
aam
cmp
pop
(bad)
clc
lea
int
or
xchg
rep
movs
mov
stos
cmp
mov
add
stos
jecxz
fwait
lds
pop
adc
(bad)
push
xor
pusha
jbe
cld
neg
jl
fsub
sbb
cwde
xchg
push
pop
lock
push
lahf
jbe
push
mov
jo
call
(bad)
fmul
adc
xor
lods
adc
cdq
mov
pop
movs
pushf
push
pop
rcl
add
mov
jnp
xor
sar
xchg
mov
jg
dec
jg
cdq
sbb
push
jbe
outs
lods
movs
and
jno
test
(bad)
inc
js
mov
pusha
xchg
xor
xor
xor
push
xchg
mov
jp
mov
jnp
sbb
mov
cmp
retf
dec
adc
(bad)
ds
les
dec
add
(bad)
sbb
sldt
imul
or
ret
push
jl
or
adc
das
mov
add
retf
adc
inc
cmps
jmp
aad
loope
loope
sbb
mov
arpl
call
std
adc
idiv
nop
stos
sub
dec
jmp
cdq
bound
mov
sbb
mov
je
ret
mov
push
pushf
jle
in
aad
sub
lods
sub
int3
bswap
mov
sbb
jb
pop
inc
jp
bound
inc
sbb
or
dec
dec
add
out
cmc
xchg
les
or
enter
movs
lea
loope
or
ror
push
and
sbb
bnd
fisubr
jg
inc
push
jae
sub
out
and
xchg
mov
into
or
repz
push
sbb
lahf
xchg
jae
ins
scas
stos
add
mov
int3
js
jae
out
call
ins
das
das
in
arpl
mov
cmp
loopne
mov
push
movs
cld
es
push
mov
retf
push
hlt
in
mov
push
adc
sub
cmp
push
aad
jmp
xchg
rol
inc
dec
jle
pop
jne
aaa
lods
sub
lock
stos
arpl
inc
pop
fstp
sar
test
sub
lock
pop
xor
dec
(bad)
cmp
hlt
mov
push
out
loopne
sahf
push
push
hlt
nop
jb
adc
cld
inc
xlat
sbb
lods
shl
dec
loopne
pop
ret
adc
xor
rcr
jmp
iret
xchg
movs
mov
add
hlt
in
mov
fdivr
leave
sar
aad
scas
mov
(bad)
xor
adc
or
and
inc
test
jp
xor
loop
lods
je
xchg
xor
test
cmp
xor
call
push
xlat
mov
ds
or
in
lds
cmps
fistp
and
mov
xchg
movs
test
js
xchg
inc
xchg
mov
dec
repnz
push
dec
(bad)
mov
mov
ror
addr16
fdiv
mov
fld
xchg
xor
pop
and
and
bound
ss
fsub
pop
adc
iret
stc
bound
xchg
dec
fsubr
movs
movs
pop
cmp
xor
sar
dec
out
xor
movs
xchg
push
or
enter
in
jecxz
mov
addr16
cmp
cmps
mov
xor
and
sbb
fmul
mov
push
imul
add
push
cmp
xlat
test
jmp
lahf
les
mov
call
sbb
call
and
out
clc
mov
sub
mov
sbb
retf
rcr
adc
push
sbb
mov
imul
loopne
mov
leave
lods
loop
sbb
mov
pop
popf
popf
aam
(bad)
jp
inc
dec
dec
adc
retf
push
cmp
adc
mov
mov
cmp
jo
or
popa
js
fcom
sahf
cmc
or
iret
mov
aaa
into
std
mov
mov
mov
mov
call
push
bound
pop
xor
icebp
mov
and
call
pusha
jmp
call
test
mov
push
dec
(bad)
scas
cmps
sbb
stc
outs
sar
xor
push
ror
retf
shl
jecxz
cmp
add
jae
sub
inc
cld
out
into
pop
movs
fwait
ret
cmp
in
adc
add
adc
xor
mov
pushf
aaa
aaa
in
mov
mov
loopne
dec
xchg
arpl
cmp
add
and
or
popf
and
mov
loopne
mov
lock
fist
add
sbb
push
(bad)
lahf
addr16
mov
out
scas
xchg
and
nop
and
iret
cs
jle
sbb
stos
loopne
repnz
and
push
sbb
lods
out
ds
add
pop
wbinvd
dec
cmp
daa
std
jae
push
sar
push
in
aas
ja
mov
jmp
cmp
mov
outs
addr16
mov
adc
pop
xchg
jne
popf
push
sub
adc
jge
dec
test
inc
call
cwde
pop
xchg
outs
je
daa
fidiv
ret
jbe
xor
and
movs
jp
push
sbb
jmp
cmp
and
movs
in
into
inc
pop
xchg
or
out
cmp
xor
jge
loopne
inc
sbb
pop
iret
stos
sub
(bad)
fwait
je
cmp
mov
jmp
xchg
sub
test
mov
sub
mov
push
inc
and
add
mov
cmps
and
dec
sub
sbb
cmp
idiv
mov
imul
xor
sahf
scas
mov
cmps
xor
jb
cmp
mov
push
das
(bad)
inc
out
or
div
lds
or
test
push
aaa
mov
xchg
iret
sbb
cmp
jle
inc
pusha
ss
and
cmc
cwde
cmovb
(bad)
pop
cmp
xor
sbb
lods
test
xor
pusha
aaa
xor
data16
push
jl
fimul
and
pop
sub
movs
iret
dec
sbb
imul
test
loop
dec
pusha
dec
adc
ret
sti
mov
and
jmp
mov
fs
shr
mov
dec
mov
rol
xchg
mov
push
das
cli
add
lea
cwde
shl
int
push
scas
imul
mov
(bad)
clc
(bad)
xchg
ins
out
es
lods
dec
hlt
inc
push
push
mov
sahf
in
mov
and
jmp
mov
ja
retf
push
cld
mov
hlt
push
push
jnp
in
sbb
xor
or
test
xor
cld
cdq
iret
movs
pop
cmp
cmps
pop
mov
pop
adc
jg
pop
scas
mov
push
ret
not
setge
xor
mov
and
in
xor
mov
mov
sbb
mov
xor
inc
cli
cwde
mov
jmp
jecxz
daa
mov
(bad)
(bad)
mov
sti
jb
jne
cmp
scas
in
test
sbb
div
(bad)
(bad)
push
int
pop
in
mov
xchg
add
(bad)
push
xor
sbb
cmp
mov
xchg
lods
push
sbb
xor
jno
out
pop
not
test
je
add
stos
rol
repz
cmp
ins
jae
aaa
iret
jecxz
arpl
scas
gs
mov
nop
fst
popa
xchg
fsub
sbb
mov
push
adc
xchg
fnsave
test
in
sbb
cmp
inc
je
ds
mov
mov
jbe
jne
stos
scas
ins
push
mov
jg
or
and
call
shl
mov
mov
inc
cwde
mov
test
inc
(bad)
pop
(bad)
fild
ror
or
fidiv
imul
std
mov
or
jl
loop
jne
dec
retf
ror
cdq
arpl
add
pushf
sahf
aas
test
xor
push
ds
push
js
sbb
or
dec
test
fs
pusha
mov
lea
add
shrd
rcl
shr
rcr
bsf
mov
movsx
ror
add
mov
pusha
lea
pushf
mov
push
mov
call
lahf
push
or
test
pop
(bad)
(bad)
js
adc
lea
cmps
lods
xchg
xor
sbb
sti
sar
mov
mov
xor
cmps
sti
rcl
inc
addr16
ja
xchg
(bad)
jg
lea
or
xchg
jo
adc
or
mov
xlat
mov
pop
inc
fdivr
mov
sub
xlat
mov
or
stos
inc
jbe
es
push
dec
mov
(bad)
and
lods
int
out
add
stc
ret
pop
push
mov
push
mov
mov
pushf
mov
push
lea
jmp
out
pop
mov
push
dec
sub
imul
xchg
sbb
sub
inc
xchg
sub
nop
sti
dec
jbe
inc
push
pop
sub
add
retf
cmp
sub
add
pop
cmc
sub
add
adc
pop
xor
jecxz
push
ror
gs
cs
cs
popa
fsub
sahf
cmps
aas
pop
mov
loope
dec
sbb
push
pusha
fcmovbe
xlat
push
dec
and
test
add
jp
pop
inc
xchg
in
inc
fstp
push
pop
ficom
imul
outs
(bad)
pop
lods
mov
ja
xor
in
dec
loope
adc
inc
adc
nop
or
sbb
js
cmp
jns
test
mov
test
je
clc
pusha
mov
cmc
add
call
stos
pushf
lea
jmp
pusha
adc
mov
lea
jae
pushf
mov
call
mov
inc
xor
nop
aaa
or
cmp
pop
jne
sub
ins
rcl
add
sbb
sub
sub
mov
mov
jl
out
lea
cmc
aad
dec
inc
pop
jg
call
in
xchg
sbb
jle
cmp
popa
pushf
dec
out
mov
add
adc
cmps
fild
jmp
dec
push
mov
jecxz
stos
aam
mov
xor
or
push
pop
rol
push
loopne
xchg
pop
add
scas
jl
cmp
movs
mov
sbb
push
sbb
or
lahf
pushf
xor
shl
xor
imul
les
add
ins
movs
ja
inc
sbb
cdq
mov
jmp
add
inc
gs
outs
fs
gs
popa
outs
fs
gs
add
jecxz
cmp
bt
xchg
shl
stc
mov
sub
cmp
ror
inc
mov
bt
mov
cmp
mov
mov
pushf
cmp
push
bt
sub
call
mov
data16
xor
pop
push
mov
add
cmp
mov
push
ins
adc
cmc
imul
xor
add
(bad)
aam
sub
jno
cmp
test
xlat
dec
mov
adc
out
push
mov
mov
shr
add
aas
xor
add
inc
mov
popa
dec
jo
aaa
jmp
xchg
sub
mov
cmp
ret
jae
popf
push
adc
mov
dec
int3
add
rcr
fcom
sub
(bad)
or
mov
jno
push
pop
and
mov
loop
jl
jp
ror
sbb
out
retf
cmp
(bad)
cs
cmp
int3
and
jg
and
pop
or
arpl
adc
lea
push
call
stos
mov
lea
jmp
dec
rol
neg
xor
cmc
pusha
sar
sbb
add
test
cmp
shl
and
xor
inc
cmp
xor
bt
sub
jmp
mov
pushf
mov
push
ret
(bad)
cmp
aaa
xor
aas
scas
out
fisttp
stc
push
push
jle
iret
and
inc
shl
clc
lea
out
outs
dec
(bad)
sbb
in
rcl
jge
les
ins
les
daa
ror
out
addr16
icebp
pop
nop
cmp
push
fdivr
push
ss
call
pushf
push
test
ds
test
add
enter
or
out
and
enter
mov
lods
pop
inc
xchg
call
aaa
bnd
int3
inc
push
in
inc
push
repnz
mov
push
(bad)
leave
fstp
in
ret
sub
mov
call
lea
je
pushf
pushf
stc
add
pusha
call
cmps
nop
pop
mov
stos
jecxz
mov
sar
lahf
fst
cmp
add
cmp
movs
sub
ficom
push
jp
clc
add
imul
lock
sbb
jb
cmp
neg
(bad)
das
lds
push
(bad)
mov
pop
xor
iret
ins
jmp
inc
mov
inc
mov
dec
sub
dec
pop
dec
fmul
mov
xlat
dec
adc
xchg
mov
push
cdq
add
xchg
pop
gs
mov
and
loop
mov
sbb
sub
fbstp
inc
mov
stos
sbb
xor
jp
and
das
xor
inc
call
push
and
jmp
ins
outs
outs
gs
xchg
xor
lods
das
and
push
mov
das
add
xchg
jns
stos
call
fcom
imul
lahf
push
pop
push
inc
cmp
(bad)
adc
mov
sar
fcom
jne
adc
cld
out
out
out
daa
pop
ret
lods
fmul
jae
retf
lock
xor
imul
add
nop
xchg
mov
into
in
xor
xor
es
cmp
int
stos
shl
test
mov
sbb
int
mov
ins
or
mov
pop
addr16
mov
mov
addr16
mov
dec
inc
inc
and
iret
ret
cmp
add
sbb
cmps
test
ins
in
and
add
dec
push
add
mov
adc
ret
stos
mov
mov
xchg
outs
cmp
xchg
sar
ss
cmp
cmps
cld
mov
call
mov
mov
fdivr
fs
mov
ja
push
xchg
test
(bad)
sub
push
jbe
sub
mov
stos
stos
fs
or
xor
jmp
or
push
cmp
mov
movs
inc
xchg
ins
ret
xor
(bad)
es
inc
fscale
xchg
loop
mov
dec
add
push
clc
push
retf
popa
aas
aas
aaa
adc
jno
push
jmp
mov
dec
fmulp
jle
cmp
movs
outs
(bad)
mov
sub
inc
cmp
jo
ss
add
jbe
pop
adc
and
cld
lds
fxam
ret
ret
jp
cld
(bad)
xor
or
ret
ja
retf
ins
rol
out
add
movzx
jo
xchg
inc
sbb
rcr
cli
xor
aaa
ficom
loopne
mov
and
movs
movs
fistp
inc
int3
test
pop
lds
outs
out
and
sahf
(bad)
ss
cli
add
push
sub
sbb
gs
inc
in
add
push
mov
call
and
out
add
mov
xor
add
aad
aad
stos
and
pusha
popa
repnz
das
dec
in
lds
call
(bad)
xlat
mov
in
bound
adc
movs
std
inc
je
and
in
movs
pushf
jne
inc
push
inc
pop
jmp
jecxz
jb
into
jge
jecxz
scas
int
cdq
mov
sti
and
inc
cli
imul
ficomp
mov
sub
add
adc
push
jbe
inc
stc
or
jmp
lock
add
aam
push
dec
hlt
retf
addr16
sbb
cmp
jb
dec
cmp
out
js
pop
jl
test
sar
sub
scas
mov
int3
popa
mov
mov
jle
punpckhbw
mov
imul
das
or
and
jo
mov
mov
call
jns
jmp
jne
sub
(bad)
and
xchg
cld
push
ret
mov
popf
int
cmp
das
push
scas
jae
pop
xchg
fidivr
pop
outs
cmps
pusha
pop
push
pop
mov
nop
shr
fild
jo
mov
out
and
and
ins
pop
mov
and
lea
ret
jl
sbb
sub
push
mov
retf
inc
mov
in
jecxz
jae
adc
xchg
pop
adc
push
loope
xchg
icebp
test
xor
ins
pusha
xlat
das
jg
jmp
into
inc
ins
mov
jne
push
fiadd
stos
fisubr
jmp
inc
shl
out
enter
dec
dec
xchg
(bad)
mov
daa
pop
sahf
add
or
inc
mov
add
jmp
bound
jae
scas
inc
mov
std
mov
mov
mov
aam
mov
cmp
adc
loopne
dec
loopne
inc
pop
xor
sbb
aam
cmc
jne
dec
add
and
shl
and
xchg
fnop
sub
aam
xchg
ss
or
dec
add
inc
ja
pop
pop
out
pandn
jmp
fisubr
xchg
loope
pop
in
ffree
cmps
and
adc
sub
sbb
inc
and
pop
shl
mov
ret
inc
jl
push
data16
xchg
xor
cld
rcr
ret
ss
sub
inc
pop
sbb
loop
mov
dec
out
xlat
mov
in
sahf
test
sbb
sbb
jl
in
shl
call
add
enter
ins
mov
imul
rcl
ja
ret
cmp
jbe
push
xchg
jmp
enter
or
mov
push
loop
ret
mov
mov
mov
push
dec
sub
outs
cld
mov
sub
cmp
ficom
lods
mov
addr16
in
loop
sti
jp
and
hlt
(bad)
sbb
push
mov
cdq
dec
push
pop
mov
inc
jbe
sub
in
pop
test
xchg
jne
cmc
lea
mov
loop
test
es
sbb
rcr
inc
scas
sub
rol
push
mov
not
mov
mov
jmp
and
aam
dec
cmp
add
outs
push
or
add
push
(bad)
jg
mov
cmp
push
sbb
xchg
(bad)
jl
pop
fdivp
fmul
sub
aam
adc
add
mov
and
fmul
in
cmps
fimul
sub
fisub
inc
fdivp
mov
test
push
pusha
test
push
push
adc
in
shl
jmp
popa
mov
lahf
mov
inc
cwde
adc
xchg
sub
mov
fs
adc
push
(bad)
sbb
push
loopne
inc
adc
adc
mov
or
mov
sub
xor
popf
(bad)
mov
pop
dec
mov
addr16
dec
and
enter
push
xor
retf
xor
push
shl
pop
outs
arpl
aad
adc
sbb
shl
pop
mov
les
leave
mov
mov
xchg
ja
or
lds
push
daa
ins
icebp
push
aad
inc
adc
push
adc
jp
mov
mov
cmp
test
push
int
add
out
inc
sbb
mov
adc
mov
pushw
(bad)
xlat
cs
sbb
lea
mov
cwde
bound
outs
(bad)
sbb
mov
inc
std
(bad)
pusha
xchg
jmp
cmps
pop
xor
scas
in
jge
out
pop
dec
add
jle
xor
xlat
or
jl
cmc
mov
das
test
sub
adc
int3
adc
sar
adc
fs
or
sub
add
or
sbb
sub
push
fisttp
adc
daa
fdivr
push
aam
pop
inc
inc
or
add
fwait
adc
inc
add
cli
int3
leave
or
mov
stos
lods
pop
cmp
loope
sti
adc
and
(bad)
std
ins
imul
or
or
add
dec
push
jae
push
js
and
imul
or
sbb
pop
sar
pop
rol
ficom
push
jl
mov
cs
and
jns
mov
int
xor
lods
push
and
inc
pop
lods
adc
fstp
retf
sbb
pop
icebp
iret
aas
int
jo
sbb
adc
fidiv
or
fld
ins
xor
sbb
fdiv
mov
test
ins
mov
outs
pop
xlat
sbb
sub
adc
mov
jmp
push
add
fcomp
cld
mov
js
sahf
or
loope
xor
or
inc
test
dec
in
lods
lods
lock
hlt
and
aam
or
aam
int3
lahf
push
loop
movs
movs
test
mov
mov
adc
fld
retf
cdq
repnz
dec
xor
mov
pop
adc
dec
lods
aam
ins
cmp
cmp
test
or
sub
scas
cmc
cli
lock
dec
cmp
lods
xor
push
and
mov
test
out
adc
in
loope
dec
push
(bad)
cmp
js
adc
jb
cwde
cwde
in
dec
and
jmp
pop
push
es
sbb
sub
data16
sub
mov
mov
icebp
pop
aam
loop
pusha
daa
lods
xor
mov
xchg
ins
in
js
test
add
pop
xchg
movlps
nop
mov
pop
enter
lods
adc
push
sbb
dec
out
mov
mov
aam
sub
xchg
mov
lock
adc
push
add
jp
iret
cmp
xchg
add
dec
xor
fwait
in
xchg
jmp
or
add
sbb
test
lsl
sbb
pop
push
add
xor
sub
and
add
adc
sub
int3
daa
out
adc
in
xchg
add
or
mov
imul
mov
ficom
xor
dec
sar
movs
dec
adc
xor
sub
aam
jae
imul
ja
push
pushf
inc
pop
sub
mov
enter
pop
dec
add
fcomp
or
pop
movs
(bad)
dec
jp
mov
fadd
out
sbb
mov
add
test
pop
ja
fs
add
inc
xlat
jns
add
fstp
outs
aad
jbe
dec
push
retf
cmps
movs
loope
movs
pop
lock
add
fwait
shr
mov
cmp
dec
ja
cwde
xchg
xor
inc
mov
es
mov
mov
add
inc
sbb
and
fs
dec
loop
test
cmp
jbe
jle
sbb
sub
int3
xor
(bad)
mov
inc
mov
sbb
and
mov
fbstp
mov
xchg
in
mov
lods
xor
or
out
add
jle
stos
shl
pusha
add
mov
push
cmp
jns
js
dec
inc
xor
fcomp
dec
cmp
sahf
push
and
push
aas
rcl
or
xchg
out
adc
or
push
mov
mov
(bad)
fld
xchg
je
add
add
aas
xchg
js
repz
sbb
mov
jae
mov
enter
scas
inc
(bad)
cmp
cwde
in
fsubr
into
fild
mov
int
(bad)
(bad)
fsub
mov
sahf
loop
pop
lods
lods
mov
mov
add
mov
mov
ret
es
ins
add
push
jb
ja
add
out
pusha
push
add
movs
fsub
mov
push
lods
or
xchg
sbb
addr16
or
push
adc
gs
nop
ins
and
icebp
push
enter
mov
sbb
push
ja
dec
lods
loope
adc
data16
or
test
jbe
dec
add
cmc
into
test
pop
mov
das
enter
addr16
inc
ins
in
movs
rcl
fbstp
jmp
sub
in
test
push
push
push
sub
and
mov
jbe
xchg
sahf
hlt
out
mov
jb
cli
push
or
jl
arpl
pushf
sahf
(bad)
dec
or
lea
fwait
adc
in
pop
inc
pop
pop
pushf
test
out
mov
rol
sbb
lock
(bad)
dec
jmp
stos
and
scas
sub
hlt
push
or
nop
pop
icebp
push
pop
mov
xchg
jp
inc
cli
(bad)
mov
inc
or
inc
mov
ds
stos
xchg
popa
cmps
and
xchg
add
(bad)
mov
aaa
jp
pop
dec
or
stc
mov
push
xchg
int
mov
or
mov
sar
iret
or
retf
aam
jns
xchg
lahf
stos
(bad)
ret
push
imul
xor
pop
punpcklbw
(bad)
push
inc
int
sbb
pop
(bad)
jns
xor
stos
cmp
jae
mov
fidiv
cmp
inc
aad
adc
xor
es
mov
daa
xor
lock
jne
into
pop
hlt
inc
stc
sti
mov
movs
aas
mov
movs
mov
loopne
fs
(bad)
cdq
cwde
(bad)
and
and
pop
xchg
inc
inc
hlt
cmp
retf
jmp
imul
cdq
jb
cmp
outs
jne
inc
and
xchg
call
push
sti
xchg
sahf
jno
adc
add
lahf
push
inc
(bad)
xlat
scas
or
add
lock
pusha
pop
mov
sar
fistp
and
fcom
push
in
and
add
jb
sub
retf
or
or
jae
jae
bound
cmp
cmps
lods
(bad)
mov
adc
std
mov
jmp
cmp
mov
cmps
mov
push
cmp
push
mov
enter
and
mov
push
lea
jmp
mov
lea
call
call
addr16
movs
in
and
push
popa
imul
mov
leave
jb
add
mov
mov
push
leave
cld
push
movs
cli
aas
inc
dec
push
rol
or
aas
repnz
push
scas
xchg
in
sub
rcl
push
into
cmp
js
mov
xchg
inc
jp
sbb
je
ror
fadd
popf
(bad)
ja
retf
dec
(bad)
ror
pop
adc
xor
or
inc
dec
mov
enter
add
nop
push
xchg
dec
adc
push
adc
xor
ror
and
enter
enter
pop
push
jmp
pop
loopne
jp
loop
ins
ds
adc
test
cmp
ss
or
imul
sbb
pop
lds
clc
or
pop
dec
fdiv
dec
push
shl
push
adc
adc
aaa
fimul
jmp
fsubr
in
lea
mov
push
fst
xchg
outs
push
das
pop
ins
and
addr16
xlat
cmp
mov
mov
sar
sti
jbe
dec
jle
fldcw
(bad)
push
mov
aaa
and
sub
and
xor
lods
dec
pop
jmp
pop
stos
in
hlt
add
aas
mov
scas
dec
sub
jmp
and
mov
pop
test
fmul
popf
aam
jmp
cld
sub
out
xchg
or
mov
add
and
arpl
fnsave
(bad)
pop
and
fsub
(bad)
popf
ret
cmp
div
ds
mov
push
pop
mov
xor
ficom
addr16
lods
test
mov
out
add
aam
(bad)
dec
cmps
mov
inc
lahf
aas
xchg
inc
pop
call
push
pop
mov
cli
xchg
into
cmp
shl
je
adc
adc
and
daa
xor
out
cmp
ret
stos
lods
in
jl
fimul
sar
dec
inc
ret
adc
test
popa
xchg
test
and
xchg
inc
dec
lds
jle
out
and
rcl
fisubr
imul
(bad)
out
cmc
(bad)
dec
push
mov
dec
push
cmp
inc
iret
and
or
add
xchg
sub
and
scas
nop
dec
imul
cdq
int
push
push
add
out
push
dec
mov
or
les
dec
js
(bad)
xor
ja
sbb
scas
pop
in
inc
mov
or
sub
cmps
ret
push
xor
cdq
imul
jg
inc
pop
out
mov
jmp
xor
shr
outs
ins
arpl
xor
fs
ins
add
add
add
push
dec
dec
inc
push
movs
and
bnd
scas
cmps
popf
lods
ret
lea
or
ins
loop
fld
mov
xchg
aam
dec
ret
retf
dec
rcl
in
popf
sbb
xlat
out
jle
je
sub
jnp
in
ret
and
enter
jo
pushw
fimul
push
gs
cs
fcomp
jno
xchg
sub
or
inc
mov
jne
xchg
shl
push
retf
movs
sbb
in
push
cs
clc
mov
lea
ds
imul
xor
cmp
test
movs
mov
cmps
sahf
mov
jo
mov
and
mov
jp
jmp
push
mov
jnp
push
mov
mov
push
add
sub
and
xor
fwait
popf
test
xchg
jmp
aaa
gs
in
hlt
push
fsub
fist
test
clc
fmul
leave
or
adc
adc
push
or
push
xchg
adc
jns
push
xchg
and
inc
pop
adc
adc
dec
jecxz
jl
lods
mov
ss
les
ins
ret
adc
fcom
test
psubb
repz
push
add
in
jp
pop
or
xor
loop
xchg
imul
pop
jne
or
fst
cmps
lods
inc
inc
sbb
sbb
push
mov
call
mov
mov
xchg
imul
cli
jle
test
loopne
pmulhuw
sbb
sbb
adc
inc
dec
cld
mov
in
and
jle
js
imul
lods
cmps
jg
dec
cmp
pop
sub
push
jp
das
push
in
xchg
sar
pusha
mov
cmc
mov
cmps
(bad)
(bad)
aam
cmp
outs
fstp
dec
es
xor
test
cmp
sbb
dec
mov
retf
mov
mov
or
inc
rol
data16
jmp
and
sub
in
mov
xlat
mov
pop
ins
push
dec
xchg
mov
rol
fcmovnbe
or
mov
jp
cli
rcr
cmps
xchg
sahf
lea
test
test
ja
imul
adc
dec
pop
push
test
push
mov
xchg
push
test
outs
inc
pop
push
cld
xchg
test
cmp
or
rcr
dec
bound
push
and
cmp
sub
pop
in
test
call
stos
cmp
mov
push
shl
test
test
bound
sub
ins
cmc
mov
cdq
push
push
push
add
popf
fnstenv
sub
scas
and
and
pop
or
pushf
or
das
(bad)
daa
pop
in
gs
loope
push
(bad)
vshufps
in
push
repnz
rsm
push
jp
sti
mov
mov
cmp
sbb
pextrw
test
sti
cmp
pushf
pop
daa
shl
jns
sub
jo
add
xor
pop
adc
jmp
sbb
or
out
lods
and
sub
pop
adc
jecxz
mov
add
mov
push
or
or
das
enter
inc
imul
out
stos
xor
mov
mov
mov
inc
call
cmp
adc
xchg
sbb
mov
xchg
jecxz
mov
jecxz
push
adc
adc
loop
(bad)
std
inc
fild
ss
data16
mov
xor
pop
or
arpl
xor
add
mov
dec
call
fisubr
mov
or
in
add
das
mov
add
mov
xchg
lock
dec
xchg
pop
or
sbb
inc
fcomi
cli
mov
xor
pop
sbb
or
xchg
repz
inc
jp
jecxz
mov
and
adc
fs
and
pop
cmp
push
mov
push
and
cli
std
mov
mov
xor
mov
mov
sub
das
push
imul
rcr
std
push
pusha
fimul
xchg
or
sbb
jge
add
sub
lock
xchg
push
pop
(bad)
xchg
stos
sbb
dec
(bad)
pushf
add
call
push
aaa
xchg
stos
std
mov
outs
stos
mov
(bad)
gs
xlat
jbe
test
outs
daa
adc
add
vaddsubpd
cmp
mov
js
mov
loop
dec
cmp
(bad)
mov
cmp
mov
test
add
mov
bt
mov
clc
cmc
pushf
jmp
mov
test
cmps
cmp
dec
scas
out
sbb
stos
inc
jns
outs
push
xchg
loope
xor
sub
mov
(bad)
or
daa
sbb
jg
mov
stc
nop
es
jl
ja
inc
test
ds
aam
(bad)
scas
fist
cmps
lods
jbe
out
sub
loopne
repz
lods
test
or
and
pop
and
adc
mov
add
clts
adc
stos
jne
out
ret
and
int3
push
shl
scas
push
sub
pop
adc
dec
push
push
jp
clc
das
call
hlt
sub
fisttp
cli
xchg
cmps
lahf
fs
ret
test
sbb
add
pushf
jge
pop
test
shl
or
dec
aas
cli
repz
fistp
xor
push
fadd
cmp
jne
movs
lods
cdq
push
or
(bad)
fsubrp
push
or
jmp
and
mov
pop
mov
loopne
mov
pop
fsubr
cmp
int
pop
ret
loop
pop
sbb
cmp
xchg
cs
mov
mov
sub
ficom
jb
es
jo
xor
inc
push
out
adc
sbb
(bad)
jge
mov
out
movs
jno
(bad)
in
mov
aad
push
enter
fistp
push
inc
jp
adc
addr16
std
in
sub
or
mov
pop
pop
div
fsub
fs
jne
push
call
mov
push
cmp
mov
lea
jmp
loope
mov
push
test
sub
(bad)
cli
mov
xor
lock
cmp
call
ds
push
cmp
fild
mov
fiadd
in
mov
push
pop
cmp
icebp
cld
jae
pop
adc
cli
mov
mov
test
imul
pop
xchg
inc
(bad)
test
ds
repz
in
and
push
push
or
arpl
cmp
add
cmp
pop
repz
in
mov
jmp
in
test
xchg
dec
xchg
(bad)
lahf
js
ins
and
retf
into
pop
out
adc
movs
jmp
push
ficom
cli
imul
inc
add
fist
sar
ds
lods
mov
pop
imul
pop
in
jo
cmp
mov
lea
ja
push
mov
pushf
jmp
add
cmp
xchg
pop
adc
adc
xchg
ins
xor
mov
int3
ret
cmp
cmps
jmp
out
test
or
inc
lods
in
imul
cmp
jle
pop
sti
retf
sub
mov
add
std
std
mov
pop
test
xchg
js
out
clc
mov
or
in
movs
pop
repnz
or
add
push
push
in
dec
ds
push
push
in
inc
xchg
push
fnstcw
push
fldenv
add
inc
cmp
and
ret
int
xchg
or
xchg
add
push
mov
push
not
cmc
stos
pop
and
xchg
loope
mov
adc
xchg
sub
test
jns
gs
sub
mov
mov
stc
jo
cs
or
scas
call
sub
shr
sbb
inc
inc
inc
clc
inc
pop
push
dec
lds
ins
xor
adc
jb
dec
adc
mov
clc
cmp
and
out
loope
ins
xchg
cwde
cmp
ret
mov
and
clc
stos
cmp
mov
lds
sbb
fistp
push
int3
sbb
aam
xchg
push
mov
jbe
cwde
jno
push
or
mov
xlat
pop
xchg
fwait
xor
call
pop
push
sub
test
pop
xchg
rol
and
popf
aam
sub
in
out
aam
lahf
ds
fistp
xchg
mov
ds
adc
push
push
mov
cdq
mov
mov
sub
or
fwait
or
cwde
pop
pusha
iret
sub
shr
xor
fldcw
addr16
pop
push
pop
jge
pop
push
or
in
adc
and
adc
dec
ss
sbb
jae
jne
push
stos
inc
enter
add
mov
jno
xchg
mov
inc
mov
mov
cdq
jne
mov
pop
cmp
les
adc
mov
mul
cmc
retf
xor
inc
sti
and
jl
leave
pop
ss
and
loopne
cs
arpl
cmc
stos
js
retf
push
mov
mov
sti
je
jmp
dec
inc
daa
inc
je
cwde
adc
sub
cli
in
scas
es
cli
cmp
jg
clc
cs
xchg
push
sahf
test
lock
mov
shl
dec
mov
pop
cdq
das
cmp
sar
dec
into
test
push
out
mov
jp
pop
adc
push
cmps
dec
push
pop
xchg
pop
push
add
cdq
jb
rol
mov
test
mov
popf
pushf
mov
push
repnz
xchg
test
push
xchg
adc
mov
sbb
cmp
xchg
retf
jmp
lods
or
push
dec
int3
xchg
cmp
and
stos
or
sahf
pop
push
scas
push
dec
and
push
addr16
push
int3
and
sti
push
lahf
sub
sbb
and
inc
das
push
or
dec
inc
aaa
adc
xor
ds
jmp
std
mov
adc
xor
lods
add
mov
cmps
fistp
xor
test
pop
adc
out
or
lods
sub
push
retf
jl
pop
out
cmp
outs
fnsave
adc
test
enter
inc
cmp
mov
sbb
out
push
mov
or
std
div
jno
or
or
and
fwait
sub
cmp
sbb
cli
adc
dec
sahf
int3
dec
inc
inc
or
lods
mov
jmp
iret
pop
sub
loope
push
dec
hlt
aam
mov
jbe
stc
movs
inc
shl
test
jne
and
inc
stc
push
in
rcl
sbb
shr
adc
movs
jge
jbe
stos
loop
xor
inc
in
xor
int3
les
push
loop
cmp
mov
jle
sbb
fdiv
mov
inc
jl
jae
push
jmp
jmp
mov
cmps
popf
stc
ins
(bad)
jnp
ins
add
cmp
jno
xchg
xor
bound
push
xor
pop
xor
add
mov
leave
(bad)
jns
xor
sbb
test
push
adc
icebp
cmp
(bad)
ds
loope
adc
cdq
imul
jmp
(bad)
push
mov
cmp
xchg
xor
hlt
sub
mov
push
stos
icebp
out
or
ds
in
dec
rcr
stos
fldenv
pop
or
and
leave
sbb
pop
out
loope
xchg
push
mov
test
mov
sbb
mov
or
mov
and
sub
xchg
repnz
pusha
cmp
pushf
jmp
mov
stc
and
test
sub
jl
dec
les
int3
sub
jmp
add
mov
iret
and
mov
cld
and
cmp
add
cmp
push
cmp
jne
xchg
icebp
dec
xchg
dec
mov
fs
lods
scas
fnstsw
movs
fwait
sub
cmc
cmc
arpl
push
push
clc
ret
ret
stc
add
cmps
cmps
jmp
mov
sub
lahf
pop
push
pop
add
mov
push
(bad)
sub
mov
(bad)
adc
sti
fcmovnbe
lea
adc
in
cmp
jnp
pop
imul
scas
xchg
arpl
call
mov
cmc
imul
test
and
jo
or
inc
sti
in
adc
int3
mov
inc
mov
sub
push
push
imul
aaa
ds
popa
imul
std
push
jo
loope
std
mov
jmp
popa
mov
ds
movs
cdq
xchg
scas
pop
(bad)
jge
lods
cmp
popa
into
das
(bad)
xchg
cmp
add
(bad)
fst
add
shl
cmps
dec
fdivp
movs
pop
jmp
sbb
out
bound
sub
mul
and
shr
inc
ins
ins
jecxz
fcmovbe
mov
(bad)
stc
cli
sub
lods
or
inc
pop
add
cmc
sbb
fist
inc
aas
or
jns
pop
ficom
jmp
es
jno
je
loopne
pushf
rcl
add
inc
mov
mov
xor
inc
jl
cmp
jae
scas
pop
dec
add
rcl
imul
pop
cmp
jle
cmps
cmps
sahf
dec
jecxz
jge
movs
mov
pop
lods
push
leave
add
int
pop
cmp
or
pop
jg
retf
dec
sahf
mov
or
(bad)
sub
xlat
push
aaa
jo
movs
cmp
mov
add
test
mov
or
cmp
dec
fwait
popf
xchg
adc
ins
scas
cmps
pop
ror
add
jmp
inc
push
jmp
jae
pop
sahf
add
or
pop
enter
sahf
and
sub
pop
shl
pop
in
or
sahf
push
ds
push
cmps
fidiv
push
test
cmp
mov
pusha
push
ret
dec
add
push
sbb
push
hlt
imul
xor
sub
test
cli
mov
jae
adc
(bad)
std
pop
aas
clc
sbb
cmps
ss
dec
and
lock
aam
aas
movs
pop
sar
cmp
into
scas
daa
js
push
int3
sub
xchg
popa
mov
adc
scas
daa
and
xchg
xor
shl
lods
loopne
cli
outs
sbb
push
xlat
rcl
retf
xchg
retf
or
push
add
jmp
jae
and
fild
icebp
cmp
lock
rcr
jo
mov
dec
add
mov
movs
sbb
add
(bad)
xor
lea
jne
call
mov
push
or
hlt
pop
push
pop
push
aad
fcom
dec
mov
xor
inc
ficom
sbb
add
add
movs
jno
fwait
push
xchg
push
dec
retf
push
xor
dec
shl
cld
xor
ror
mov
lahf
adc
bound
popf
popf
aad
retf
mov
jecxz
sub
cmp
pop
cdq
jnp
aad
fidivr
xor
out
iret
inc
retf
jecxz
aad
pop
int
lods
loop
or
nop
xchg
push
lods
sbb
test
jo
add
mov
push
dec
imul
or
outs
mov
test
and
ficom
push
add
pop
adc
loope
aas
fcom
adc
cmp
fldcw
cmp
mov
mov
xor
loope
stos
inc
push
test
pop
lods
mov
rcl
dec
pop
xor
cmp
adc
mov
cmp
aam
or
neg
rol
into
add
xchg
inc
adc
jecxz
pusha
push
rcr
push
js
ins
fcomi
push
xchg
or
ror
imul
sbb
mov
in
add
retf
(bad)
(bad)
adc
mov
(bad)
dec
jne
fisubr
call
outs
inc
andnps
push
js
shl
arpl
jns
xchg
pop
aaa
out
jns
aas
cmp
or
xchg
adc
popf
mov
xor
mov
cmp
sub
or
sahf
adc
out
mul
mov
ins
arpl
add
mov
sbb
je
cmp
push
add
leave
leave
inc
mov
fsub
push
and
jmp
xor
jmp
dec
(bad)
pop
xchg
(bad)
mov
je
push
mov
rcl
or
or
pop
push
into
scas
out
mov
fsub
adc
mov
jns
lea
jne
inc
rcl
bt
shrd
mov
xor
mov
sub
and
add
movsx
mov
pushf
pushf
sub
pusha
cmc
clc
push
pop
cmp
jmp
pextrw
xchg
fmul
test
das
fs
and
mov
xchg
or
and
cld
pop
dec
push
ss
mov
xor
xchg
cmps
popf
inc
jge
dec
lods
mov
mov
jecxz
call
add
stc
shr
fbld
add
daa
fnstenv
call
(bad)
aaa
xchg
push
iret
(bad)
test
outs
inc
or
les
pop
popf
sub
xor
push
ins
xchg
xchg
jg
inc
inc
cmp
push
lods
cmp
in
sbb
mov
fwait
je
add
and
gs
cmp
adc
mov
pop
dec
ret
int3
adc
test
enter
sbb
push
lods
in
adc
xor
xlat
into
cld
adc
push
sub
pushf
les
jge
inc
cld
aad
pop
data16
vmulps
mov
add
jae
jmp
xor
mov
shr
(bad)
loop
push
mov
ins
and
scas
add
push
lods
std
push
fist
fist
push
or
and
sti
xor
pop
sahf
or
pop
shr
add
js
pop
xor
sbb
stos
jg
or
inc
inc
call
ins
inc
or
data16
arpl
cmps
and
cmp
xchg
push
mov
inc
mov
sbb
bt
test
sub
pushf
push
pop
stc
cmp
pushf
jmp
jnp
cmc
cmp
inc
std
mov
or
pop
pop
cmc
or
mul
fst
fisttp
rol
pop
(bad)
pop
je
dec
(bad)
mov
fisub
xchg
test
pop
inc
mov
fsubr
jp
loop
mov
jns
cwde
movs
pop
aam
fstp
inc
lods
mov
pop
loop
inc
mov
aas
shl
jge
jnp
rol
dec
pop
loopne
mov
push
aad
pop
xor
xor
mov
rcr
fcom
dec
gs
mov
(bad)
mov
in
out
adc
popf
sub
dec
(bad)
sbb
ds
sbb
sub
aam
aad
outs
test
(bad)
cld
xchg
xchg
dec
es
jae
test
jnp
into
test
icebp
lea
pop
repnz
shr
jo
jns
iret
cdq
cdq
adc
push
xchg
shr
and
loope
and
frstor
sbb
pushf
test
add
lods
push
mov
out
add
jne
loopne
sbb
cs
push
imul
adc
std
xor
repnz
dec
outs
pop
daa
scas
mov
std
es
jnp
push
cmp
sub
rol
loop
(bad)
movs
cmps
loope
cmp
add
push
xchg
data16
xor
cli
test
mov
xor
ins
gs
push
dec
fwait
jl
bound
and
jns
xchg
(bad)
cmps
ss
and
fadd
adc
push
sub
test
imul
jae
retf
ja
mov
cmp
retf
popa
push
in
jl
das
repz
hlt
cmps
retf
push
imul
inc
adc
xor
dec
in
ds
rol
cmp
mov
push
cwde
scas
cmp
into
fdivr
or
pop
sar
mov
inc
jge
jae
xchg
shl
xor
pusha
mov
and
shr
btr
mov
shld
sbb
mov
pushf
jmp
sub
push
xor
imul
mov
adc
mov
add
cli
or
lds
out
(bad)
mov
mov
lods
inc
fcmovu
xchg
test
pop
icebp
daa
and
jl
add
in
aas
mov
test
je
add
dec
rol
int3
in
jne
mov
jmp
mov
jle
pop
sub
cmp
add
ins
sbb
pop
(bad)
mov
pop
adc
fnstsw
sbb
fisttp
(bad)
fdivr
mov
push
mov
loopne
mov
or
rol
dec
mov
popa
pop
call
adc
lods
movs
inc
frndint
jb
push
test
pop
xchg
aam
cmp
dec
ror
xchg
test
mov
pop
xlat
cmp
mov
bound
jg
mov
fsub
ss
iret
js
daa
sbb
out
lods
sub
push
xchg
popf
mov
push
in
lods
addr16
hlt
shr
mov
mov
xor
inc
dec
pop
add
fsub
and
ficomp
mov
dec
mov
dec
or
jo
push
dec
xor
ins
xor
aas
sbb
les
movs
adc
inc
cwde
in
mov
fisttp
mov
jbe
fdiv
or
jmp
jl
push
out
xchg
bound
sbb
add
xchg
jl
add
cmp
mov
call
mov
and
test
adc
int
scas
daa
jns
push
or
cmp
iret
push
(bad)
lea
or
jg
sbb
and
jecxz
outs
push
push
and
mov
outs
pop
out
clc
int
inc
lds
sub
sets
mov
add
adc
or
sahf
int
lds
out
xchg
push
cmp
xor
(bad)
call
mov
leave
add
inc
mov
jge
jne
or
dec
aaa
or
sti
adc
push
imul
fst
pop
int3
aas
dec
add
dec
jmp
icebp
mov
lea
pusha
mov
lea
jp
pusha
pusha
lods
call
mov
out
xor
jmp
shr
pop
adc
test
pop
outs
popf
xor
call
mov
not
add
(bad)
popf
cmp
repz
xchg
imul
fmul
shl
xor
mov
adc
inc
inc
mov
sub
push
mov
out
jae
imul
icebp
mov
scas
dec
cmp
dec
sub
clc
rcl
dec
push
adc
sbb
cmc
push
retf
addr16
pop
adc
or
xor
gs
cmps
dec
aaa
add
fild
in
scas
es
mov
fadd
push
xor
btc
push
cmp
mov
bswap
xor
movsx
mov
bt
pushf
jmp
aad
arpl
add
jbe
xor
xchg
add
ror
jecxz
lds
xor
xchg
retw
sub
pop
and
int
pop
(bad)
dec
test
lahf
sbb
and
mov
pop
cmc
cmc
ins
test
push
test
outs
add
sbb
xchg
out
js
and
ret
das
in
or
dec
ret
ret
pushf
lods
in
int
inc
or
ror
inc
vpunpckhbw
xor
sub
mov
cmp
sub
mov
loope
pop
jne
and
test
mov
or
jp
jmp
xchg
push
fist
(bad)
dec
scas
daa
pop
mov
xchg
xchg
dec
(bad)
or
lea
pop
dec
lods
mov
jecxz
int
dec
push
lock
test
push
dec
ror
pushf
mov
and
xchg
int3
jecxz
lds
mov
fcmovne
mov
jne
shl
cmp
fldenv
jg
and
call
and
aam
add
jbe
xor
repnz
mov
pop
xchg
test
mov
push
inc
sbb
sahf
fnstsw
enter
gs
jne
xor
cs
ins
add
mov
lods
add
push
scas
gs
push
cmp
push
push
ret
fadd
pop
ficom
pushf
push
test
sub
sysexit
lds
iret
(bad)
adc
push
cmps
push
in
inc
sbb
push
outs
mov
mov
stc
inc
sub
xchg
add
das
shl
mov
rcr
imul
fnsave
sahf
imul
sbb
aad
rol
dec
dec
xchg
cmp
aaa
xor
inc
and
cmp
addr16
repnz
fdivr
lahf
pushf
push
push
hlt
sub
sti
pushf
rcl
dec
cmps
fnstcw
imul
jge
pop
(bad)
scas
dec
imul
cmc
mov
mul
xor
enter
sbb
pop
popf
lea
jmp
clc
cmp
cmp
mov
lea
ja
shl
sub
push
lea
add
sub
bts
test
mov
cmc
mov
pushf
repnz
pushf
call
add
push
jb
outs
jae
popa
je
dec
inc
dec
push
jns
inc
arpl
ins
add
in
add
add
sahf
mov
pop
and
inc
ja
pop
fnstenv
mov
jge
mov
(bad)
fnstenv
push
sub
iret
bound
mov
mov
aas
pop
movs
retf
aam
rcr
cmp
mov
pop
cmc
stos
xor
xchg
cmp
sbb
fcom
xchg
std
xchg
mov
or
xchg
mov
xor
or
leave
rcr
neg
and
out
inc
in
inc
xchg
into
cmp
adc
fs
aaa
mov
cmc
aad
cmps
pop
icebp
and
cli
mov
and
and
ret
push
sub
mov
jle
stc
jge
push
dec
xrelease
ror
test
xor
add
(bad)
xchg
hlt
lods
ror
sbb
jmp
cdq
arpl
adc
xchg
retf
or
or
xor
mov
nop
loop
shr
sbb
ins
cmp
jmp
xchg
dec
and
adc
fidiv
fs
cmps
sub
add
xor
or
in
mov
xchg
dec
inc
dec
sbb
xchg
mov
xchg
sbb
mov
xor
cmp
leave
cmp
test
and
(bad)
gs
and
int3
pop
nop
(bad)
xchg
ficomp
inc
mov
js
das
pusha
pushf
pushf
pushf
lods
call
push
lea
je
cmp
jmp
jge
test
cmp
jno
jae
bt
pusha
call
pop
shl
sub
test
ficom
bound
shl
push
inc
cmp
fs
dec
test
popa
nop
xchg
shr
stc
pop
adc
push
pop
shl
mov
js
mov
es
sahf
hlt
add
shl
xor
nop
inc
jp
jo
mov
and
jns
fcomp
xchg
(bad)
(bad)
dec
(bad)
fcomi
(bad)
push
mov
and
test
xchg
mov
shr
cwde
nop
(bad)
fsub
sbb
push
xor
mov
inc
ds
mov
call
mov
loopne
js
inc
mov
xchg
repnz
inc
bound
xchg
stos
cmp
leave
cmp
ret
or
xchg
or
(bad)
mov
dec
movs
add
fs
mov
and
mov
aaa
fmul
js
mov
mov
sbb
clc
xor
call
jae
dec
loop
mov
sub
aam
inc
lock
and
pop
popa
push
adc
in
mov
sbb
mov
inc
jmp
jno
test
push
push
iret
mov
jle
xchg
lock
xor
cld
xor
mov
xchg
ss
fdecstp
or
inc
out
mov
push
test
xchg
or
add
stos
add
sub
dec
mov
lods
std
adc
sub
push
add
pop
arpl
sub
and
loop
or
adc
xlat
mov
jg
(bad)
int3
gs
lds
ror
push
or
les
pop
shr
adc
(bad)
jmp
pop
push
jbe
inc
fcmovnbe
repnz
lods
cmps
push
sub
mov
pop
inc
cmovae
aam
add
add
push
adc
into
fisttp
mov
das
es
icebp
cmps
iret
jb
inc
mov
(bad)
aam
cs
call
xchg
fsubr
mov
jecxz
clc
loopne
sub
sti
xchg
xchg
adc
adc
lods
int3
mov
pop
int3
pushfw
or
ror
movs
fwait
stos
add
pop
xchg
das
cmps
mov
adc
ins
cmps
inc
mov
and
mov
je
mov
out
push
les
outs
test
and
pop
icebp
test
and
add
(bad)
jbe
push
pop
call
cwde
outs
jbe
or
inc
adc
(bad)
xchg
out
or
das
out
push
cmp
bswap
xor
pop
pop
xchg
fnstenv
fmul
xchg
shr
sti
add
sub
cmp
mov
aas
pop
push
fwait
xor
mov
push
int
add
lds
xchg
call
push
mov
cld
adc
mov
mov
or
fbstp
sub
stos
shr
jb
jae
in
push
jne
stos
call
and
cmc
cld
test
jnp
sbb
jno
xchg
jl
cmp
repz
(bad)
jnp
sbb
sub
jg
sub
test
mov
xchg
xor
mov
pushf
sbb
ds
jae
push
or
mov
cmps
mov
jmp
movs
sti
aam
and
bound
test
jg
cmc
lods
pop
sub
lahf
jge
dec
xchg
xor
pop
pop
jne
push
mov
std
adc
ins
push
add
in
inc
mov
mov
inc
lahf
push
add
sbb
push
mov
push
mov
out
dec
js
adc
sar
ficom
cmp
inc
stc
mov
mov
sub
dec
repnz
mov
scas
mov
dec
pop
es
mov
rol
shr
inc
pop
xor
xor
mov
repnz
and
mov
pop
jo
bound
(bad)
iret
add
sbb
dec
aam
xchg
pop
cmp
icebp
icebp
sub
loop
cmp
sub
add
leave
sti
bnd
imul
add
sti
adc
push
xchg
cli
adc
ret
push
mov
test
dec
test
inc
loopne
mov
imul
movs
mov
jnp
xchg
and
sar
adc
ins
imul
shr
or
fcom
test
pop
xchg
retf
in
dec
mov
add
mov
add
aaa
mov
mov
sub
push
fcmovu
aam
dec
loopne
adc
ror
js
das
mov
call
adc
into
in
lock
add
pop
adc
dec
adc
imul
loope
dec
mov
out
inc
mov
dec
cmp
fucomi
movs
cmps
pop
cmp
mov
sub
hlt
pusha
mov
movzx
jmp
add
sub
adc
jno
dec
lods
and
pusha
or
ror
xchg
dec
add
or
sub
sub
ret
call
jb
mov
ret
int
add
sbb
std
xor
(bad)
mov
push
std
xchg
xchg
inc
mov
cmp
(bad)
mov
ins
mov
dec
in
ins
les
sbb
pop
or
sar
xchg
into
icebp
ror
ins
les
ds
rcl
or
mov
shl
push
mov
jno
std
xchg
int3
xchg
mov
mov
ror
shrd
mov
cmp
xor
rcl
neg
mov
pushf
call
adc
push
push
xlat
popf
push
mov
call
pop
pushf
shl
sub
sub
lds
scas
rcr
(bad)
push
cmp
or
mov
sbb
or
les
in
xchg
pushf
mov
and
adc
dec
fwait
rcr
dec
pop
pop
ficom
adc
das
das
cmps
hlt
(bad)
xor
stos
call
cmc
push
mov
mov
lea
xor
xlat
dec
jno
sbb
add
inc
cmp
push
pop
push
sysenter
ins
imul
adc
cmp
cmps
std
push
add
add
(bad)
fsub
lods
or
mov
jmp
pop
std
std
test
xchg
ins
scas
mov
ret
jle
test
in
and
pushf
mov
pop
push
ss
lds
cmp
shr
enter
lds
jmp
and
test
test
push
std
fstp
add
add
inc
out
sub
push
es
and
dec
inc
add
ficom
mov
xlat
inc
fwait
adc
jmp
add
pop
jnp
adc
int
or
in
adc
jp
aaa
inc
(bad)
dec
jg
push
cwde
lahf
and
sub
sbb
pop
aad
push
arpl
cmp
ret
sbb
les
sbb
or
dec
bound
pop
mov
shr
cmp
pop
aam
xchg
xchg
pop
push
adc
pop
push
fadd
mov
push
jb
sub
cld
ss
ins
sbb
add
push
xchg
push
mov
imul
lods
int3
das
adc
in
pop
sub
add
inc
movs
cdq
xlat
sar
call
push
jmp
adc
mov
adc
adc
test
cld
nop
jmp
xor
cmps
imul
ins
adc
loope
rcr
jg
popa
xchg
sbb
push
jge
shr
cs
je
retf
push
fwait
in
nop
jbe
push
and
xchg
fs
lods
shr
ins
pop
je
sbb
shl
push
hlt
aam
xchg
push
aam
xor
bound
mov
jge
addr16
add
jmp
inc
jmp
add
sbb
sub
mov
mov
jb
jle
les
js
jmp
inc
add
cmp
push
xor
stos
and
js
jmp
sub
sbb
call
fsubr
ins
sbb
add
add
push
imul
cmp
xor
(bad)
or
cmp
pop
adc
sub
pop
push
pop
inc
pop
les
js
jmp
sub
xchg
into
mov
add
cmp
pop
sbb
sbb
xor
pop
pop
dec
jbe
pusha
or
sbb
enter
ins
push
pop
xchg
add
xor
and
or
pop
jbe
imul
mov
pop
repnz
adc
imul
jmp
sub
pop
jle
imul
rol
loopne
jo
jnp
or
or
inc
sub
and
pop
pushf
mov
cmp
sub
sub
push
push
push
imul
cmp
push
add
pop
xchg
xchg
imul
ret
add
pop
cmp
pop
cmp
xchg
loopne
dec
xor
pop
sahf
pushf
imul
add
lock
out
jbe
xchg
cmp
inc
pop
jle
imul
(bad)
xor
div
sub
add
imul
cmp
dec
cmp
pop
sahf
mov
or
add
int3
pop
out
adc
imul
and
push
sub
xor
pop
sahf
mov
or
xor
loop
in
push
pop
push
imul
pop
cmp
jb
pusha
cmp
mov
sub
cmp
adc
sbb
xor
push
add
pop
mov
cmps
push
cwde
cmp
mov
mov
cmp
sub
ins
in
push
add
cmp
pop
pop
push
imul
cmp
sahf
or
imul
ret
sub
and
push
dec
cmp
cs
je
bound
nop
sub
cmp
imul
or
cmp
and
pop
or
pop
jl
imul
or
int3
pop
call
imul
pop
cmp
jo
xchg
cmp
into
or
xor
(bad)
cs
or
xor
push
movs
push
inc
inc
jmp
dec
imul
fiadd
in
inc
sbb
cmp
sub
sub
pop
pop
dec
jo
ins
or
add
(bad)
push
neg
fisttp
imul
cmp
or
imul
in
in
dec
add
cmp
pop
cs
imul
cmp
cmp
and
inc
loop
jmp
dec
in
sbb
cmp
stos
repz
rcl
cmp
outs
pop
nop
xchg
or
cmp
pop
js
dec
jns
add
jnp
and
pop
or
fs
add
imul
sbb
push
cmp
sub
aad
imul
rol
fiadd
into
jmp
push
data16
jns
mov
mov
or
sub
and
mov
jmp
jp
xchg
fnsave
jecxz
push
out
hlt
adc
xor
cmps
aam
loop
xchg
sbb
jp
xchg
mov
jg
jns
adc
jecxz
pop
into
dec
inc
fdiv
adc
or
adc
or
(bad)
push
mov
rcr
nop
push
adc
jno
jl
mov
stc
adc
repnz
in
jp
mov
cld
and
retf
jmp
mov
pop
inc
daa
adc
out
aam
mov
push
push
mov
gs
mov
mov
mov
into
(bad)
retf
adc
enter
test
push
adc
ja
retf
or
xchg
es
not
pushf
and
mov
daa
retf
call
or
addr16
(bad)
adc
dec
add
nop
mov
fdivr
push
inc
inc
sub
out
repz
or
rcl
(bad)
jo
cld
mov
mov
movs
imul
popa
mov
idiv
cdq
xchg
adc
jo
push
in
test
dec
rcl
lock
in
or
adc
mov
dec
call
repz
or
cld
test
dec
lods
add
push
in
add
jno
mov
push
adc
push
pop
sbb
cmp
sub
(bad)
adc
adc
lods
or
imul
repnz
mov
jl
push
add
test
sti
sub
and
popa
adc
gs
xchg
mov
adc
call
mov
and
sub
adc
pop
jecxz
mov
adc
cmp
mov
stos
adc
cmps
xor
mov
mov
pop
iret
jbe
xchg
push
fadd
inc
mov
aam
or
sbb
lods
sub
push
mov
sbb
inc
jae
outs
cmps
adc
scas
mov
add
pusha
push
out
sahf
xor
retf
popf
call
and
in
sub
mov
dec
lods
lock
adc
test
adc
push
pop
mov
adc
dec
cmps
icebp
sub
mov
outs
jle
out
std
cli
ss
je
adc
add
pusha
xchg
mov
push
jl
jecxz
add
sub
mov
adc
mov
sbb
sub
pushf
cmp
pop
stos
push
sub
adc
ror
dec
movs
test
adc
ja
lahf
pop
test
xlat
das
idiv
scas
int3
loopne
mov
or
cli
pushf
cmc
jns
and
xchg
jmpw
or
jmp
pop
adc
adc
scas
aaa
add
int
sahf
xchg
mov
jae
(bad)
push
push
stos
push
ss
pop
cld
mov
add
sbb
lods
sbb
sbb
repnz
je
js
adc
fidiv
jnp
and
sub
adc
pop
(bad)
mul
fldenv
cmp
xor
push
sbb
js
inc
fsqrt
pusha
pushf
ret
cmp
inc
xchg
iret
fisub
adc
pop
jmp
and
pop
(bad)
adc
xor
pop
add
cdq
adc
ret
push
fst
adc
hlt
mov
adc
xchg
push
cmp
mov
xor
pop
push
bound
mov
test
lock
lods
mov
in
xchg
lds
in
adc
dec
ret
loopne
adc
xchg
mov
add
mov
adc
(bad)
and
xchg
cli
jb
gs
rcr
adc
stos
fadd
ret
nop
cwde
in
js
add
cdq
in
ficom
into
xchg
jnp
xchg
fucomip
adc
sbb
hlt
aam
outs
mov
stos
lods
out
cmps
adc
int
(bad)
jb
adc
and
out
loopne
mov
popa
mov
adc
les
inc
int3
xchg
mov
nop
inc
in
mov
(bad)
popf
and
push
push
add
shr
sub
in
push
iret
mov
es
adc
mov
stos
adc
inc
pusha
cdq
xor
in
es
adc
mov
sbb
adc
mov
test
xchg
dec
jne
mov
push
fnstenv
imul
xchg
push
repnz
jmp
cmp
fild
adc
movs
jle
(bad)
adc
mov
push
retf
cs
outs
jae
or
add
jb
loop
push
sbb
xchg
pop
add
and
cli
scas
loope
adc
adc
adc
pop
xor
mov
aam
mov
adc
or
ret
repz
dec
push
pop
rcr
and
cmp
inc
popa
cmp
int
movs
(bad)
push
mov
adc
push
mov
outs
clc
dec
jno
inc
mov
nop
shr
inc
out
aam
mov
jge
add
imul
les
popf
test
test
inc
in
adc
adc
adc
mov
lds
dec
adc
imul
mov
int
fst
cmps
pop
mov
push
stos
xchg
and
mov
xchg
out
clc
inc
cld
das
xor
adc
add
sub
test
pop
inc
cdq
adc
jp
cmp
in
adc
cmp
inc
xchg
lods
jno
jo
sbb
repz
jns
xchg
jbe
imul
mov
fiadd
imul
jle
ret
outs
fdivr
mov
dec
xor
repz
jecxz
mov
cmp
test
mov
gs
pop
jne
adc
enter
pop
mov
adc
push
mov
and
mov
fiadd
adc
add
sub
fs
aad
jno
xor
(bad)
ror
add
mov
sbb
mov
pop
pop
clc
sbb
push
xor
sbb
cdq
popf
adc
sub
xor
daa
scas
or
mov
in
test
adc
or
mov
and
add
pop
cld
push
or
movs
mov
cwde
pop
loopne
das
jle
hlt
mov
fcom
cmps
cwde
daa
addr16
mov
adc
imul
push
fidiv
ss
cmp
xchg
in
fistp
and
(bad)
jbe
mov
cmp
jne
nop
adc
xchg
and
sbb
fst
cmp
inc
xchg
jmp
jle
loopne
mov
hlt
xchg
ret
cld
sbb
dec
mov
xlat
push
adc
retf
imul
add
gs
cwde
adc
lea
or
or
mov
out
in
mov
jae
adc
cmc
xchg
outs
ja
xchg
mov
adc
in
dec
pop
xchg
xor
(bad)
adc
enter
adc
pop
and
stos
sbb
mov
rcl
hlt
std
push
lock
sti
pop
xlat
pop
xor
movs
sti
popa
and
add
adc
or
adc
aad
cld
loop
clc
and
mov
gs
ins
sti
mov
aam
inc
or
inc
push
fidiv
adc
lock
add
mov
test
outs
or
sbb
mov
call
adc
(bad)
jmp
repz
adc
mov
test
test
mov
or
scas
aam
enter
adc
mov
cmps
adc
adc
icebp
adc
test
xor
repz
pop
jne
or
mov
xchg
adc
mov
mov
jmp
enter
fs
in
ror
call
in
mov
adc
xor
test
jne
or
ss
std
and
sbb
mov
adc
xchg
pop
dec
lds
pop
sar
retf
out
mov
ds
push
clc
mov
jmp
jge
fs
pop
cmc
adc
xor
jae
call
pop
add
and
scas
xchg
pop
rol
pop
pop
and
cmp
js
xor
cld
imul
hlt
retf
test
push
pop
ins
and
jmp
(bad)
mov
mov
adc
into
pop
(bad)
call
sbb
lods
push
lods
ins
inc
popf
jmp
movs
adc
stos
adc
sbb
mov
not
hlt
jge
popa
push
dec
cmp
call
sti
sub
push
pop
mov
in
js
call
ds
pusha
xchg
and
jmp
add
xchg
cdq
push
inc
or
adc
inc
cmp
fcom
inc
sbb
xchg
in
retf
mov
push
popf
and
jne
mov
fwait
adc
int3
loopne
xor
mov
mov
adc
inc
adc
pushf
or
int
dec
outs
adc
arpl
(bad)
jno
imul
in
adc
daa
pusha
inc
dec
and
adc
out
loopne
loope
sahf
xor
sbb
adc
sub
imul
(bad)
adc
add
lock
mov
and
xchg
pop
(bad)
cmps
mov
xchg
int3
mov
fwait
jo
inc
js
xor
inc
sbb
imul
inc
ret
lgs
adc
mov
xor
out
and
pop
test
test
push
adc
push
and
arpl
jns
inc
out
push
xchg
rcl
jp
adc
ss
fs
sbb
fidivr
adc
pop
adc
test
push
pop
or
mov
mov
fs
adc
xor
ds
sbb
scas
sbb
push
mov
xchg
scas
pop
jl
stc
je
cmp
sbb
mov
stc
cwde
sbb
inc
hlt
repnz
xor
fld
sbb
and
fcomip
iret
ins
arpl
mov
push
sub
cmp
or
xchg
imul
jmp
mov
adc
in
pop
inc
jp
xlat
jae
dec
adc
repz
shr
push
xchg
das
stos
fst
pop
pop
jg
arpl
adc
out
xor
jmp
pop
adc
mov
and
ficomp
push
scas
lahf
adc
retf
in
cli
push
sbb
jl
or
sbb
leave
sub
imul
movs
test
jmp
pop
clc
fs
mov
dec
(bad)
sbb
sub
jmp
xchg
or
mov
pop
cmp
je
add
pop
sti
fs
das
popa
retf
ror
xor
adc
out
daa
push
(bad)
aam
mov
mov
out
and
add
call
add
js
mov
fisubr
popa
out
(bad)
arpl
mov
push
dec
inc
or
stc
sbb
push
call
cmps
arpl
fs
pop
mov
push
out
aam
and
push
hlt
or
popa
jp
xchg
mov
mov
push
mov
arpl
jl
loope
ficom
dec
pop
into
sbb
jmp
or
mov
push
add
mov
retf
xor
scas
inc
stos
in
mov
xchg
mov
int3
aaa
push
mov
jl
add
adc
pop
sbb
pop
nop
loopne
sbb
pop
sbb
inc
ds
xor
lea
mov
mov
or
jno
mov
retf
aad
dec
adc
in
movs
and
mov
cwde
fs
in
hlt
jae
cld
cmc
adc
add
imul
ja
adc
pop
sub
popa
adc
mov
loop
adc
icebp
popf
mov
xlat
adc
adc
or
cmps
maxps
call
xchg
pop
xlat
pop
sub
data16
pushf
and
or
adc
icebp
jecxz
mov
jmp
mov
or
jle
loopne
add
loope
push
rol
mov
mov
lds
xor
push
adc
movs
popf
sub
adc
aaa
movs
sbb
or
aam
mov
adc
es
and
jl
das
cmp
or
retf
ficom
sbb
mov
ret
and
pop
lods
cmp
rcl
inc
in
test
data16
or
gs
xchg
xchg
and
shl
ret
xchg
adc
pop
je
mov
mov
xchg
test
and
mov
inc
pop
fcmove
adc
pop
pop
mov
dec
loope
repz
dec
adc
jnp
(bad)
pop
sub
test
inc
mov
lds
jmp
stos
adc
pop
movs
lock
retf
cmp
aaa
push
jmp
fisttp
int3
inc
gs
inc
adc
stos
inc
fldenv
xor
push
sub
and
enter
cmps
xchg
pop
adc
cld
adc
cmp
out
push
push
pop
lahf
sbb
jl
ins
adc
dec
mov
xor
jns
aam
xor
pop
mov
hlt
enter
hlt
jmp
dec
adc
xor
(bad)
adc
ss
add
sub
aam
jmp
mov
retf
jb
sub
inc
or
enter
test
mov
jbe
push
inc
mov
or
test
adc
inc
iret
lds
fdivrp
outs
adc
xor
adc
sub
cmps
bound
sqrtps
jae
add
int3
jo
add
test
into
nop
jmp
ret
adc
or
mov
adc
js
movs
xor
cmp
(bad)
test
jecxz
fdiv
fucomp
arpl
enter
mov
push
adc
pop
add
test
iret
cmps
or
js
repnz
(bad)
xlat
lahf
dec
inc
cdq
adc
push
jge
jecxz
sbb
push
fmul
cmc
outs
or
adc
adc
mov
lods
jle
test
sbb
call
adc
das
adc
jb
adc
push
push
call
aaa
or
adc
sar
(bad)
(bad)
out
jmp
adc
mov
int3
adc
or
sub
es
pop
lods
rcl
das
inc
push
clc
inc
hlt
(bad)
and
inc
push
hlt
push
xchg
rcl
lods
adc
inc
and
push
pop
dec
loope
aam
div
xor
xchg
push
scas
test
aaa
adc
push
cmp
ja
dec
cmps
adc
stos
or
enter
(bad)
out
xor
ret
and
xchg
das
adc
jp
(bad)
(bad)
mov
daa
sahf
cwde
leave
inc
in
adc
cmps
jg
mov
ins
adc
lods
adc
aad
fdiv
cmc
adc
je
add
ficom
sahf
fild
je
aaa
aam
hlt
adc
mov
out
push
lock
movs
sbb
aas
push
jb
xor
sub
fs
lods
bound
adc
xor
(bad)
lds
aad
inc
popa
pop
ffreep
popa
mov
mov
(bad)
div
jnp
pusha
in
call
in
pop
jmp
mov
jge
adc
sub
push
xor
call
mov
push
adc
push
inc
retf
adc
push
int
mov
lds
cmc
xor
pop
hlt
adc
jno
mov
adc
icebp
or
push
stos
push
adc
jge
pop
cmp
mov
cmp
scas
add
dec
xchg
hlt
cmps
sbb
fstp
aam
out
cli
cmp
or
fistp
imul
ss
push
nop
das
shr
outs
jg
ret
dec
lods
cld
pop
mov
adc
sbb
jae
xchg
aam
gs
daa
jmp
nop
sub
add
aam
(bad)
iret
jmp
xchg
lds
popa
adc
cmps
lods
lods
jecxz
dec
test
mov
push
movs
xlat
sub
shl
cld
add
cld
retf
sar
hlt
es
mov
cmp
clc
arpl
fidivr
aad
and
cli
popa
add
jle
mov
adc
xor
scas
adc
jnp
mov
adc
leave
popa
add
adc
mov
inc
sbb
and
call
pop
scas
adc
pusha
test
aas
xchg
je
popa
leave
adc
fwait
nop
push
cwde
push
aam
and
cmp
mov
(bad)
push
push
pop
in
cmp
or
into
retf
call
loopne
shl
movs
icebp
sbb
fiadd
pop
xchg
sti
mov
pop
push
mov
popa
mov
jmp
ror
sbb
daa
xlat
outs
ins
jnp
mov
xor
in
sub
xchg
push
push
in
push
inc
adc
jae
div
jle
out
mov
mov
(bad)
in
(bad)
stc
adc
xchg
xchg
cmp
icebp
adc
mov
add
push
fwait
adc
add
cmc
popf
xchg
pop
push
adc
fld
nop
and
dec
adc
out
xlat
fsub
sbb
sbb
rcl
jns
adc
jl
sbb
lods
mov
adc
(bad)
push
data16
call
sub
outs
mov
jo
inc
mov
lds
sub
das
jns
imul
adc
icebp
loope
in
push
popf
cmp
adc
cmp
fst
loop
push
xchg
repnz
adc
push
and
retf
sbb
int
out
les
xchg
adc
sbb
inc
adc
jle
sub
cs
mov
cdq
mov
fiadd
xor
or
hlt
rcl
fadd
cwde
pop
or
jmp
fisub
inc
push
jmp
inc
outs
push
sub
scas
div
pop
adc
pop
test
retf
adc
nop
(bad)
jl
shr
inc
push
mov
sahf
adc
push
xchg
and
int
cmp
cmp
out
fwait
sub
xchg
mov
(bad)
push
jecxz
or
adc
out
movs
mov
movs
loopne
ins
rol
push
mov
test
jb
xchg
sbb
and
in
mov
pusha
pushf
mov
je
push
pop
ins
mov
add
in
pop
loope
shr
aam
rcl
adc
sbb
xor
and
push
sbb
dec
adc
in
repz
cmc
or
and
jb
dec
sub
jp
dec
aaa
hlt
int3
lods
pop
call
and
aam
and
cwde
add
sbb
and
xchg
add
clc
clc
push
in
pmaxub
mov
xchg
call
imul
push
adc
(bad)
sub
dec
adc
add
xor
shl
enter
and
inc
and
jno
fadd
popa
(bad)
cmp
jp
and
ins
mov
int
inc
enter
push
jnp
out
push
dec
dec
jl
aam
mov
push
adc
outs
rol
ret
sar
push
dec
pop
jne
clc
adc
add
xor
jmp
lods
add
daa
hlt
xor
mov
aad
push
pop
(bad)
fld
stc
mov
test
and
mov
lea
enter
jg
aam
pop
movs
sbb
fsubr
ss
test
add
jle
(bad)
pop
or
in
pop
fst
adc
aam
stc
gs
mov
jecxz
cmp
icebp
push
add
xchg
and
dec
sub
pop
xor
mov
adc
fld
mul
and
or
test
stos
xchg
test
clc
xor
adc
cmp
hlt
adc
push
ins
(bad)
cmps
pop
push
jmp
sar
add
xlat
shl
bound
out
add
mov
add
mov
stos
push
adc
loop
jo
mov
fstp
and
mov
(bad)
sbb
in
pusha
test
cmc
pop
adc
cmp
xor
stos
mov
movs
stos
adc
fisttp
nop
mov
js
pop
jbe
out
inc
jo
adc
imul
bnd
in
sub
xchg
xchg
hlt
adc
std
xchg
add
clc
cdq
jl
das
and
jg
jmp
mov
and
adc
push
inc
mov
sbb
or
jge
pop
xor
adc
inc
ret
bound
jle
xchg
inc
cmp
add
test
mov
inc
jo
and
adc
xchg
mov
xchg
sbb
dec
pop
mov
push
adc
mov
and
dec
push
movs
pop
push
mov
xor
fwait
hlt
ret
adc
ins
into
and
aad
adc
xor
adc
cmp
jbe
xchg
cmc
add
inc
adc
test
mov
gs
je
jae
lahf
xchg
fs
sbb
xchg
pop
cmp
int3
mov
(bad)
in
retf
inc
repnz
icebp
js
adc
movs
inc
mov
inc
fist
sbb
imul
push
xchg
mov
mov
retf
fdivr
mov
mov
adc
or
xor
mov
mov
add
mov
pop
mov
repnz
aam
retf
sub
xor
ins
fist
sub
push
cmp
mov
das
xor
cmp
or
pop
pop
adc
add
je
cs
sbb
xor
jle
push
fisubr
push
outs
xchg
popa
pop
inc
mov
mov
mov
sahf
nop
shr
into
adc
inc
repnz
loope
push
bound
fild
js
adc
lock
jge
mov
and
dec
aam
mov
sub
test
jle
in
adc
add
cmp
add
shl
(bad)
xchg
retf
adc
stos
pop
sbb
adc
call
out
jns
adc
test
imul
out
je
jl
pop
dec
add
neg
loop
cmp
in
ror
int3
sub
jmp
dec
hlt
adc
daa
adc
xor
sbb
xchg
call
dec
xor
gs
imul
dec
sahf
adc
xchg
jmp
sub
mov
lea
stos
jmp
frstor
mov
xor
adc
int
mov
adc
xchg
sbb
stos
ficomp
lock
call
test
cdq
enter
and
loope
mov
lea
pop
and
adc
inc
cmp
pop
cmp
lods
adc
call
repz
inc
push
sbb
sbb
add
mov
adc
adc
push
jl
cmc
loope
xor
add
call
shl
into
stos
push
sbb
cmp
cmp
adc
cmp
ins
(bad)
jecxz
cmp
pop
adc
sub
sbb
movs
adc
lds
cmp
pop
adc
or
add
inc
in
prefetcht1
int
ficomp
scas
in
(bad)
mov
cmp
sti
jbe
out
popa
dec
imul
hlt
mov
sub
(bad)
adc
jmp
clc
aaa
mov
adc
mov
adc
dec
int
int3
inc
jnp
fs
adc
imul
das
hlt
lock
in
jle
push
aad
add
inc
sbb
enter
adc
fwait
(bad)
fidiv
(bad)
(bad)
pop
sbb
xchg
adc
pushf
push
xor
mov
es
xchg
adc
bound
xchg
aam
stos
test
rol
loope
xor
jmp
adc
stc
dec
adc
jecxz
js
jg
clc
adc
arpl
dec
pop
xchg
aam
adc
sub
shl
cmps
shl
fistp
inc
sbb
adc
mov
std
das
or
(bad)
and
pusha
(bad)
mov
jb
xchg
(bad)
aas
(bad)
mov
imul
sbb
adc
aaa
jge
test
pop
sbb
mov
adc
dec
add
adc
jb
mov
cmp
outs
(bad)
in
xchg
xor
bound
ins
cmp
fxch
jge
or
in
cmps
mov
inc
jmp
and
dec
or
adc
sub
test
pop
adc
or
push
adc
cmps
or
jae
lds
adc
cmp
dec
mov
sbb
add
or
or
sub
xor
daa
add
das
pop
ficomp
cmps
adc
js
jmp
sub
mov
mov
inc
sbb
adc
cmp
scas
push
mov
test
dec
add
adc
mov
pop
xor
push
adc
or
out
adc
push
mov
dec
cli
dec
jecxz
lock
leave
mov
adc
test
les
int
mul
add
sbb
push
xchg
outs
sbb
cmp
mov
xchg
daa
movs
adc
out
inc
ss
fyl2x
mov
dec
(bad)
jmp
out
adc
or
outs
push
outs
xchg
lods
adc
dec
retf
sub
add
jb
xchg
jns
adc
push
adc
mov
fild
stos
std
(bad)
(bad)
das
into
adc
ja
cmp
ds
pop
cdq
adc
js
in
clc
in
mov
mov
dec
aaa
rcl
xor
push
outs
in
adc
pop
aam
jp
cmps
cld
not
aam
pusha
and
rcr
hlt
jp
dec
jmp
(bad)
out
mov
adc
jl
dec
or
pop
mov
cmp
int3
aas
pop
mov
aam
adc
sub
sub
cmp
cmp
jecxz
adc
les
mov
sbb
cld
xchg
mov
inc
dec
mov
rcl
icebp
cmp
inc
jmp
scas
mov
stc
adc
xchg
inc
mov
into
adc
imul
lds
mov
outs
xor
mov
adc
out
data16
add
jle
pop
and
inc
pop
and
scas
sub
inc
cs
movs
sbb
fbld
and
xor
pop
int3
dec
test
dec
jno
sbb
sar
ror
xchg
sbb
xchg
adc
lea
or
inc
bound
movs
xor
outs
ss
mov
mov
mov
pop
mov
hlt
jne
arpl
lods
pop
hlt
sahf
dec
or
cmp
les
xor
out
in
popf
xchg
scas
dec
test
loopne
or
jle
sbb
enter
xchg
(bad)
minps
xchg
and
bound
lock
jbe
fst
das
sbb
adc
imul
cmp
data16
xor
rcl
fadd
test
adc
sub
mov
fisub
je
dec
adc
push
aam
scas
mov
fdivr
pop
mov
mov
popf
scas
mov
fwait
xor
adc
and
inc
sbb
sub
push
not
retf
popa
sub
clc
sti
adc
and
xor
aas
daa
lea
add
push
aam
sahf
imul
push
xchg
nop
int3
not
jmp
push
push
ds
mov
test
jo
fstp
push
not
sar
test
popf
adc
je
clc
cwde
ror
cdq
sar
inc
aad
mov
hlt
loop
in
adc
sub
push
mov
js
push
adc
in
(bad)
sbb
jecxz
lahf
adc
cmp
aas
ja
add
jbe
addr16
adc
hlt
xor
aam
push
sbb
cdq
cmp
xor
fld
xchg
adc
mov
in
and
add
ins
mov
aam
iret
adc
jo
jb
push
mov
test
adc
or
je
aam
mov
dec
adc
sub
cmp
data16
fwait
loopne
xor
sub
sbb
cmp
push
dec
or
cmps
(bad)
xor
push
push
adc
retf
les
add
popf
icebp
cmc
push
in
jle
test
xchg
push
div
cdq
jno
imul
jo
pop
xchg
pushf
movs
cmps
int
loope
and
push
sbb
(bad)
mov
xchg
ds
jge
mov
shl
gs
js
cmc
in
iret
cmp
(bad)
or
imul
mov
pop
pushf
cmps
push
push
ins
in
les
bound
sbb
sahf
clc
adc
aad
pop
mov
pop
add
inc
in
stc
test
mov
cdq
int3
(bad)
jmp
sub
xchg
jae
and
or
rcl
mov
inc
mov
push
dec
sahf
adc
sbb
add
cmp
es
cs
xchg
cmc
mov
ds
mov
clc
xchg
jo
inc
push
or
in
pop
cwde
rcl
lock
jbe
inc
rcr
ficomp
call
rcr
jecxz
inc
ins
sbb
addr16
mov
lea
mov
dec
adc
xchg
xchg
fcmove
sub
adc
xor
popa
adc
jmp
inc
ds
or
xchg
das
ror
fnsave
mov
inc
int
mov
cmp
dec
cld
daa
not
ret
inc
shl
inc
enter
add
(bad)
mov
pop
and
jg
adc
aas
xor
fisub
adc
push
and
push
fist
lea
push
imul
xchg
dec
sbb
jno
fstp
test
push
hlt
push
push
push
aam
cwde
and
out
jecxz
push
xchg
jmp
jge
adc
mov
and
xchg
jge
iret
pusha
mov
mov
adc
xchg
loopne
stos
clc
pop
scas
and
sbb
popf
out
adc
mov
push
push
lods
fild
adc
mov
xchg
adc
mov
addr16
adc
iret
scas
jle
ror
mov
in
into
lods
adc
sub
inc
shl
xchg
push
lds
adc
test
xchg
adc
inc
mov
xchg
hlt
out
jg
cmp
fadd
pusha
(bad)
pop
aas
hlt
or
scas
xchg
jno
out
mov
fdiv
jmp
rcl
or
in
dec
mov
hlt
xchg
out
sub
jno
out
cmovae
fwait
push
xor
ins
nop
test
jmp
call
in
jmp
mov
arpl
jg
stos
ins
mov
or
es
in
adc
xchg
xchg
mov
add
in
adc
ins
in
(bad)
in
into
pusha
sub
dec
mov
cld
(bad)
jns
in
and
add
cdq
iret
dec
imul
push
ins
xor
jb
shl
xchg
in
adc
sbb
gs
clc
fsubrp
fsubr
add
xchg
mov
cmp
(bad)
retf
pop
ja
stc
adc
inc
jne
xchg
and
push
push
adc
push
jp
(bad)
ror
adc
jecxz
mov
mov
and
adc
movs
je
rcr
add
adc
sub
add
pop
mov
test
sbb
or
push
shr
call
push
aaa
sbb
ds
in
sar
mov
add
push
push
call
mov
pop
and
mov
adc
ret
mov
cmps
adc
outs
pop
sar
mov
adc
sub
xor
je
jae
mov
(bad)
popfw
jmp
pop
sbb
sub
push
cmc
into
idiv
hlt
aam
xchg
sub
out
ret
xor
cmps
test
xor
sub
fucomip
or
adc
rol
push
push
fcmovbe
rcl
and
(bad)
cmp
inc
sbb
push
push
cmps
mov
sbb
nop
(bad)
jmp
mov
cmps
je
pop
movsx
mov
setne
lea
pusha
pushf
mov
jmp
pusha
lea
je
ror
rol
add
bsf
shld
sub
sar
cmc
ror
shr
btr
btr
xor
add
mov
stc
cmc
clc
add
shld
clc
add
shl
mov
cmc
shr
stc
pusha
cmp
push
jmp
sahf
(bad)
cmp
adc
lahf
push
push
pushf
fist
xchg
icebp
stos
xor
(bad)
outs
and
pop
or
fsub
cmps
sahf
dec
bound
pop
sbb
sub
mov
ja
sbb
je
sbb
cdq
in
lock
fisubr
out
inc
lea
mov
stc
call
add
movs
rcl
mov
mov
das
in
add
das
aaa
enter
iret
jne
fiadd
and
mov
adc
das
mov
call
sbb
adc
repnz
lods
lea
daa
push
sub
inc
mov
push
ins
test
cmp
jl
mov
enter
sbb
xor
jb
jo
rcr
rol
fst
stc
(bad)
out
xchg
jmp
pop
aad
shl
adc
mov
pop
pop
xor
loopne
or
inc
mov
leave
clc
scas
shl
sub
mov
pop
sti
add
jmp
mov
push
out
pop
ficomp
pop
or
in
(bad)
retf
xchg
int
pushf
adc
enter
mov
movs
adc
cmp
mov
xlat
xchg
sbb
push
cmc
xor
and
jmp
leave
cmps
push
aas
sbb
outs
dec
dec
(bad)
fisub
ret
es
and
xor
call
mov
and
inc
and
mov
call
gs
sub
gs
loopne
test
jmp
rol
(bad)
jle
mov
imul
mov
push
push
inc
xor
stos
std
jne
fcom
cli
repnz
call
cmps
xor
aam
out
mov
les
adc
sub
push
fidivr
xor
shl
out
iret
sbb
ficomp
fldcw
mov
sahf
or
pop
bnd
inc
stc
xchg
push
or
add
sbb
pop
jae
in
les
in
test
jp
dec
test
or
retf
aad
cmp
sub
mov
in
pextrw
je
retf
mov
jmp
mov
aam
adc
jmp
push
ror
call
jmp
cmp
js
adc
mov
fs
je
ins
out
mov
repnz
in
imul
pop
xchg
not
add
retf
pop
(bad)
fbld
add
fist
stc
shl
pushf
ss
mov
nop
sub
pop
out
popa
gs
movs
add
ss
inc
jge
dec
bound
adc
lods
or
sti
daa
call
lods
jmp
cdq
mov
mov
in
sahf
(bad)
push
push
pop
xchg
pop
push
push
sub
pop
mov
mov
adc
jmp
dec
push
loop
addr16
add
sbb
adc
cdq
or
jbe
adc
mov
retf
adc
adc
add
pop
sub
xor
mov
push
or
jae
repnz
pop
lods
in
push
in
inc
push
jecxz
test
sbb
hlt
and
inc
clc
jno
retf
push
add
loopne
or
shr
mov
test
icebp
(bad)
addr16
cld
(bad)
stc
icebp
pop
xchg
ins
cmps
pop
pop
push
or
mov
mov
cmp
pop
out
hlt
dec
lahf
xor
cmc
or
ds
xchg
and
pusha
push
test
dec
std
adc
(bad)
sub
test
jle
cli
(bad)
mov
fwait
jno
dec
sbb
pop
hlt
push
daa
dec
lds
pop
clc
outs
inc
ja
sahf
inc
cld
xchg
push
repz
ins
or
or
jl
mov
mov
jo
out
hlt
dec
cmps
cdq
dec
sbb
cmp
ja
rcl
int3
push
pop
or
das
xor
fwait
jno
add
repz
fstp
inc
inc
mov
jg
pop
mov
fs
sub
test
pop
jge
xor
xchg
inc
dec
add
ins
jecxz
pop
mov
bt
rol
cmc
clc
add
clc
call
ins
gs
int3
adc
jmp
xchg
dec
enter
pop
movs
pop
hlt
stos
in
sub
out
sub
sub
inc
xchg
cdq
jge
repz
mov
inc
xlat
adc
sbb
jno
(bad)
into
push
inc
js
js
stc
jae
sub
fcom
xor
pop
mov
lock
repnz
cmp
call
inc
stc
loope
cmps
pop
pop
xchg
in
test
adc
jmp
repz
dec
loop
sub
hlt
loop
pop
repz
pop
jle
and
xchg
test
jl
aas
push
sub
cmp
and
mov
mov
lea
jle
pusha
bt
add
mov
mov
cmp
stc
movzx
btc
mov
pushf
clc
cmc
mov
add
clc
call
adc
scas
cmc
retf
adc
xor
sub
cmps
push
inc
cmps
fbstp
lods
fld
repnz
mov
loope
arpl
or
jg
jns
sbb
dec
add
push
ror
xor
sbb
into
fs
sbb
les
neg
push
test
pusha
dec
mul
mov
add
sbb
hlt
cmp
mov
sub
ja
pop
add
xchg
lahf
shl
xchg
sub
xchg
mov
dec
push
mov
out
(bad)
enter
clc
push
mov
and
xlat
mov
fs
sahf
xchg
ror
jp
push
bound
std
cli
cli
mov
xchg
enter
sub
add
fmul
ret
mov
push
mov
adc
and
fst
and
jno
jnp
inc
xchg
push
out
cmps
mov
popf
scas
mov
imul
or
jne
sbb
inc
fwait
scas
out
push
adc
mov
dec
mov
or
arpl
or
inc
mov
andnps
test
push
dec
fdiv
jecxz
cmp
jle
jae
and
idiv
inc
jp
mov
sbb
push
adc
outs
movs
mov
repz
mov
dec
and
push
xchg
je
and
pop
imul
retf
jg
inc
shl
pop
mov
fisubr
shl
add
js
out
test
cmps
mov
cmc
mov
out
mov
dec
das
adc
inc
jle
cs
inc
mov
bsr
bsr
mov
clc
cmc
pushf
or
call
lea
jne
pushf
mov
pusha
lea
call
pusha
pusha
lea
jmp
mov
lods
pushf
mov
not
pusha
pushf
mov
dec
mov
mov
pushf
xor
mov
add
pushf
mov
jmp
mov
lea
call
push
adc
call
fcom
jae
enter
outs
rol
cmc
imul
inc
inc
jbe
inc
(bad)
call
jg
dec
sbb
pop
inc
adc
pop
inc
pop
cwde
les
pusha
out
iret
enter
stos
arpl
xchg
div
imul
and
push
retf
jge
in
ins
mov
sub
mov
inc
ret
in
addr16
cmc
mov
xor
adc
aas
jae
cs
mov
xor
mov
sbb
fnstenv
mov
jnp
push
and
cld
fmul
xchg
add
fbstp
jne
dec
push
and
mov
push
or
mov
jmp
sub
adc
repnz
dec
inc
(bad)
ja
jle
mov
fs
mov
push
sbb
cdq
nop
or
push
pop
xor
stos
add
dec
int
(bad)
dec
call
mov
stc
sahf
pop
xchg
mov
cdq
mov
or
test
xchg
mov
out
pop
fldenv
mov
mov
sub
retf
jle
xchg
mov
xor
out
and
xlat
mov
push
sbb
xor
lock
cmps
mov
fmul
and
(bad)
xchg
imul
inc
sbb
ret
call
pop
xchg
in
test
sbb
(bad)
pop
xchg
sub
add
dec
rol
push
into
shl
mov
pop
adc
mov
popa
aad
and
cs
jmp
aaa
cmps
lahf
mov
fsubr
cmp
sub
repz
shr
mov
mov
jbe
sub
fdivr
xor
push
fld
mov
inc
mov
jl
inc
push
ins
aas
aas
mov
push
dec
add
retf
jge
jmp
fst
(bad)
int
xchg
out
xchg
ins
adc
daa
sub
adc
ds
xor
rcr
mov
test
ins
sbb
enter
jge
sub
retf
sbb
mov
sub
inc
jnp
lahf
popa
inc
stc
sbb
(bad)
jne
add
test
(bad)
add
add
mov
adc
or
mov
std
mov
adc
xor
stc
std
push
div
lock
jle
cs
loopne
jno
stc
(bad)
ins
mov
pop
pop
aad
mov
loopne
adc
jecxz
mov
dec
adc
sbb
enter
in
(bad)
scas
mov
dec
popa
mov
outs
retf
inc
sub
out
sub
add
inc
nop
imul
cwde
pop
cmp
fiadd
test
imul
cmp
jnp
sub
mov
fsub
pop
(bad)
cld
pop
mov
aam
cmp
cwde
lea
mov
cwde
call
mov
jle
lds
xor
adc
into
xchg
jnp
sub
pop
retf
(bad)
loope
loopne
or
aad
and
aas
xor
jae
and
shl
cli
movs
(bad)
push
pusha
and
popa
inc
sub
scas
xor
das
pop
mov
or
push
sub
and
adc
pcmpgtd
cmp
mov
xor
pop
outs
inc
push
push
adc
sub
out
push
pop
jo
in
pop
xor
push
xor
mov
push
xlat
cli
gs
push
iret
add
ins
fild
jmp
aad
stos
les
dec
add
pusha
inc
clc
pop
add
retf
out
fst
mov
sub
shr
aam
je
adc
(bad)
movzx
movzx
mov
xadd
not
not
je
mov
neg
cmc
mov
xor
pushf
lods
not
inc
push
pusha
not
push
dec
xor
neg
add
jbe
xor
mov
bt
add
jmp
xchg
or
ja
adc
push
dec
test
mov
imul
xchg
mov
adc
movs
jnp
sar
xchg
cmp
ja
lahf
cmp
shr
and
ins
repnz
xchg
dec
cs
mov
xchg
mov
je
aad
ins
mov
lods
call
or
addr16
cs
movhlps
into
neg
xor
aam
xchg
iret
ds
das
das
es
jbe
cmp
add
sub
(bad)
push
daa
shl
and
mov
aaa
adc
adc
iret
call
std
lahf
cwde
inc
dec
pop
out
mov
lods
inc
push
sub
cwde
add
inc
pushf
mov
bt
cmp
mov
pusha
lea
jmp
call
adc
xlat
mov
pop
dec
retf
inc
movs
sahf
ja
and
push
fcomp
push
rol
xor
mov
push
push
es
loopne
pushf
ret
retf
out
int
lahf
in
pop
lahf
adc
movs
mov
adc
xchg
mov
push
(bad)
sub
retf
hlt
jne
loope
sti
jl
push
iret
gs
cmp
stc
nop
xchg
ret
mov
cmp
adc
daa
fbstp
sahf
ja
jae
movs
xchg
push
or
arpl
mov
mov
dec
(bad)
retf
jnp
pop
pop
mov
loopne
adc
iret
xchg
inc
inc
mov
jecxz
and
jns
ins
add
retf
jmp
jp
dec
add
ss
aas
test
adc
mov
jle
lods
adc
iret
dec
dec
(bad)
imul
mov
fidiv
ins
cmp
mov
inc
inc
mov
mov
lds
pop
(bad)
in
sar
dec
jecxz
movs
sahf
retf
in
xchg
cld
push
jbe
cmp
stc
push
cmp
pop
xchg
sub
and
es
sub
push
leave
ins
loop
sahf
xchg
retf
pusha
cmp
xor
repz
and
mov
aam
lea
and
addr16
dec
and
sub
cmp
push
jle
popa
xchg
retf
test
sub
fs
mov
mov
xchg
fadd
adc
mov
ins
movs
xchg
sub
call
cli
push
fstp
aam
cwde
or
pop
push
mov
sub
mov
pop
xchg
adc
(bad)
fs
int
cmp
sub
stc
mov
mov
outs
jo
mov
pop
out
push
sub
aaa
mov
scas
mov
jl
or
jle
clc
adc
cmc
mov
les
imul
sub
mov
dec
sahf
and
(bad)
xchg
and
push
cmp
xchg
mov
inc
jl
mov
mov
repnz
dec
fnstenv
dec
sub
retf
sbb
(bad)
or
mov
mul
add
sub
push
hlt
int3
mov
jb
add
mov
xor
cmp
adc
jne
cmp
mov
jmp
ret
leave
leave
and
push
jo
stos
sbb
retf
lahf
xchg
es
pop
loope
sbb
push
jae
push
xor
(bad)
xchg
ja
in
mov
sbb
pop
xor
(bad)
mov
test
stc
add
std
das
xchg
test
int3
cli
xchg
jno
adc
jmp
out
addr16
mov
and
pop
adc
iret
xchg
sub
xchg
push
bound
cmp
repz
push
add
and
mov
or
(bad)
rcr
xchg
test
jl
aad
lods
sbb
jo
mov
adc
movs
fldcw
sub
dec
cs
xchg
jl
(bad)
push
fild
arpl
jmp
sub
mov
inc
inc
mov
dec
sbb
jmp
push
mov
icebp
test
sahf
aad
cld
sar
sbb
(bad)
aas
jns
addr16
cmp
loopne
sbb
sbb
push
jge
jp
retf
add
aad
and
dec
add
add
inc
add
int3
arpl
test
jg
add
sar
scas
pusha
jmp
fcmovb
xchg
xlat
mov
adc
mov
pushw
add
pop
cmovne
lods
shr
pop
hlt
(bad)
(bad)
inc
aam
aad
xchg
xor
imul
pushf
adc
pop
sub
out
mov
jmp
xor
jmp
mov
addr16
ins
xor
rcr
push
inc
ficomp
out
xor
jmp
stc
ss
jmp
sbb
movs
xchg
push
unpckhps
pop
dec
ins
loopne
push
movs
sub
leave
and
pop
cmc
sbb
out
push
lods
std
push
mov
sbb
xchg
aas
and
xor
mov
fwait
inc
xor
and
adc
pushf
add
adc
adc
add
xor
xor
xor
adc
not
not
sub
mov
not
push
pushf
stos
pushf
pusha
call
fcmovbe
add
iret
add
shl
ins
add
add
jmp
xchg
pop
retf
es
mov
xchg
out
and
pusha
ss
scas
(bad)
gs
arpl
sub
loop
sbb
mov
jae
adc
push
hlt
imul
dec
jns
xchg
cmps
ins
fldcw
add
and
inc
pusha
pop
clc
mov
mov
push
or
mov
xor
mov
pushf
mov
imul
mov
rcl
test
mov
xor
icebp
enter
out
in
out
(bad)
loopne
mov
xor
test
mov
pop
(bad)
ds
ja
or
xchg
test
test
cmps
jl
repnz
movs
or
das
sti
jl
xor
pop
push
lock
and
push
mov
inc
and
lock
pop
std
and
mov
mov
and
inc
leave
adc
enter
iret
jg
cmp
popa
movs
push
retf
sar
dec
mov
sahf
jmp
pop
movs
push
mov
pcmpgtd
rol
jle
xchg
add
inc
imul
mov
and
jmp
inc
push
gs
arpl
and
mov
aas
js
stc
pop
cmc
sti
adc
mov
lods
cmp
test
(bad)
or
pop
movs
jne
gs
xor
fs
ins
add
rol
jecxz
mov
clc
mov
setg
mov
bt
stc
repnz
call
dec
ret
mov
pusha
es
ficom
inc
cmp
in
out
and
push
adc
pop
dec
jle
add
jns
cld
shl
popa
int3
int3
add
push
cmps
cmp
mov
retf
xchg
adc
frstor
add
and
and
push
mov
fidiv
adc
loopne
dec
xchg
mov
adc
pop
popf
push
sbb
clc
xor
lahf
clts
sar
push
jne
inc
jp
mov
hlt
cmps
mov
mov
movs
jp
mov
enter
push
sub
dec
add
mov
nop
push
adc
or
jecxz
sbb
sub
cdq
add
or
(bad)
push
popa
retf
mov
shl
cli
mov
or
fmul
fidiv
test
add
and
scas
jns
cs
mov
or
arpl
pusha
xchg
rol
popa
pop
sbb
cmp
nop
in
xchg
jb
add
shl
jmp
clc
push
popfw
push
mov
push
jmp
in
and
mov
je
jae
mov
dec
test
sbb
sub
movs
outs
inc
mov
test
or
cmp
mov
imul
shr
outs
in
outs
jbe
stc
outs
push
(bad)
cli
xor
imul
cdq
shr
das
test
mov
xchg
fs
pop
inc
mov
push
jno
push
imul
jne
push
(bad)
fistp
xor
mov
or
pop
(bad)
push
jbe
fist
adc
sbb
outs
adc
and
jns
lds
push
jge
cmp
mov
sbb
mov
mov
mov
add
dec
adc
retf
cmp
out
pop
jbe
jmp
xchg
lahf
xor
das
xchg
outs
jge
mov
adc
push
pop
mov
mov
scas
in
lds
adc
inc
cli
xchg
(bad)
push
jmp
fidiv
fmul
mov
std
xor
loop
fist
xor
ins
pop
jne
aad
mov
dec
outs
in
mov
push
out
pop
std
mov
test
nop
inc
fld
fbstp
mov
ja
leave
stos
and
fnstenv
adc
and
sbb
adc
test
cmc
stos
vpcomw
arpl
jbe
adc
jb
movs
dec
inc
cmp
jge
sahf
aam
shr
rep
mov
pop
fdivr
jb
mov
out
mov
gs
or
adc
inc
add
in
add
pop
(bad)
ret
pop
out
test
lds
jb
sub
and
mov
mov
test
xchg
in
push
mov
and
ja
test
sub
repz
movs
dec
inc
loopne
mov
cmc
dec
movs
pop
xor
mov
cli
mov
pop
xor
retf
pop
neg
sub
mov
test
mov
bt
cmp
push
pusha
lea
jae
pushf
bt
sub
jbe
stc
add
call
bt
shl
add
bt
call
clc
movzx
sub
btr
mov
clc
cmp
pusha
pusha
mov
lea
jmp
outs
pop
and
xchg
adc
inc
sbb
mov
push
and
inc
pushf
mov
pop
jo
in
push
dec
dec
xor
adc
iret
mov
fbstp
pop
in
cmp
(bad)
lahf
test
in
dec
daa
cmp
out
arpl
aam
sub
jne
or
jg
push
pop
cli
and
out
imul
into
ja
dec
xchg
test
xchg
aas
push
or
and
pop
jns
fwait
hlt
sti
and
and
call
nop
jb
fisttp
sbb
das
into
mov
(bad)
jnp
lods
dec
test
out
test
paddd
pushf
shl
call
aas
shr
aas
hlt
mov
or
mov
loop
ficom
sub
scas
mov
mov
pop
mov
in
and
(bad)
hlt
ja
stos
cld
fldcw
mov
xchg
or
ss
cmp
(bad)
mov
movs
test
adc
inc
repz
outs
cmps
and
cmp
pop
cmp
adc
or
mov
int3
call
sub
jb
mov
cli
inc
leave
leave
add
dec
pop
xchg
mov
cmp
mov
jg
xor
push
sub
mov
rcl
nop
iret
adc
sbb
js
ss
push
call
fst
push
faddp
not
jecxz
mov
push
(bad)
xchg
ror
pop
mov
movs
pextrw
jns
jo
test
xor
sub
repnz
fst
pop
add
outs
in
fstp
or
es
xor
xchg
mov
cmps
in
and
pop
test
fdiv
jae
outs
adc
cmc
push
xor
xor
push
or
lahf
jmp
mov
dec
dec
mov
sahf
int
push
add
sti
jno
sbb
ficomp
lods
lahf
mov
and
sbb
add
push
cs
mov
mov
fs
ja
shl
rcl
sub
btr
test
jmp
out
daa
mov
mov
push
xchg
xchg
dec
push
and
push
ss
xor
aam
cmp
mov
mov
cmp
lods
add
pop
movs
cli
pop
mov
cwde
push
inc
add
mov
push
mov
adc
test
loop
mov
loopne
jno
(bad)
pop
mov
or
mov
lds
movs
test
aam
int3
push
inc
push
mov
mov
add
jb
shl
cmp
pop
mov
nop
in
inc
jmp
push
lea
pop
add
fcmovnbe
xchg
xor
push
jmp
mov
and
push
inc
cmp
dec
loope
or
push
push
cld
(bad)
mov
jmp
push
and
retf
mov
fidivr
jmp
or
cld
out
popf
shl
in
xlat
mov
pop
ss
mov
repz
loopne
push
into
js
or
push
mov
dec
fild
(bad)
test
stos
xchg
retf
imul
mov
dec
cmps
adc
je
mov
daa
sub
push
mov
ds
(bad)
call
fs
push
dec
mov
add
mov
jnp
inc
xlat
lods
push
shl
sahf
aad
dec
cmp
add
test
xor
rcr
jmp
lea
je
bt
cmp
pusha
stc
cmp
pusha
pushf
lea
je
clc
stc
bt
pushf
cmp
mov
pusha
pushf
lea
je
pusha
pusha
mov
push
lea
jmp
or
push
jg
sub
sub
push
add
in
mov
cwde
shr
scas
fs
scas
xor
jge
(bad)
(bad)
int
fcomp
add
xor
loope
sub
imul
mov
out
lods
scas
xor
adc
outs
xchg
or
rcr
rcr
push
xchg
or
push
jmp
mov
jge
mov
push
mov
pop
adc
cmps
jae
cmp
mov
and
fidivr
dec
mov
das
in
cmp
fisubr
stos
sbb
ret
jbe
repz
sub
pushf
push
int
in
movs
xchg
int
cmp
push
or
fs
pop
test
ins
scas
out
lods
int3
inc
xor
outs
jbe
lods
or
jb
add
cmp
inc
dec
rol
std
xor
adc
loope
push
fcmovbe
cmp
div
mov
mov
xchg
xchg
scas
mov
sub
mov
or
iret
pusha
mov
(bad)
ret
push
nop
enter
sbb
fninit
retf
xchg
jb
cmp
or
xchg
addr16
inc
dec
(bad)
cmp
nop
dec
dec
inc
jg
sub
cs
jp
mov
sub
hlt
(bad)
rcr
mov
loopne
fs
cmp
pop
je
and
hlt
dec
mov
pop
ja
mov
inc
bound
imul
adc
bt
mov
and
sbb
ror
loope
in
scas
iret
test
cmps
sti
adc
adc
push
jnp
dec
add
mov
shl
aaa
sub
mov
pop
push
sbb
lods
mov
daa
scas
dec
xchg
fnstcw
mov
pop
mov
adc
sbb
xlat
retf
test
inc
hlt
xor
jge
push
push
or
imul
and
cmp
inc
mov
fdiv
cmp
dec
cmps
pop
mov
mov
sti
es
cmp
out
cmps
(bad)
stc
sbb
sub
and
fidiv
mov
test
in
inc
je
sbb
mov
loopne
pop
(bad)
mov
bts
cmc
mov
clc
or
shl
cmp
sub
sub
lea
bt
sub
cmc
push
push
pop
cmp
push
cmp
call
lea
ja
pushf
lea
jb
push
pushf
call
loope
xchg
fdiv
pop
adc
popf
xor
int
adc
iret
mov
fcom
cli
ins
push
es
lods
(bad)
jbe
cld
pusha
loope
add
retf
ret
lea
call
stos
loope
sbb
adc
cld
mov
add
adc
leave
xchg
dec
add
sub
shr
sbb
sbb
and
ss
cwde
jae
or
clc
clc
cs
sbb
movs
sub
jns
adc
bound
test
xor
mov
sbb
(bad)
clc
outs
inc
(bad)
arpl
pop
iret
push
or
movs
fisttp
pop
mov
inc
js
fs
jae
pusha
mov
mov
jmp
lea
jae
stc
mov
cmp
mov
pushf
neg
dec
not
mov
call
sub
pusha
call
inc
cs
mov
push
push
xor
lock
xor
mov
xchg
(bad)
clc
outs
popa
pop
sub
push
jmp
push
cmp
inc
sbb
push
in
loopne
cmp
lock
and
cmps
mov
test
xlat
fwait
cmp
hlt
retf
sar
jmp
cmc
in
and
int3
sbb
ds
xor
out
sub
add
xchg
adc
add
ja
into
sbb
cld
loop
mov
dec
sahf
rcl
lock
aaa
scas
cld
cld
je
fstp
shr
adc
cmp
jno
inc
cs
xchg
imul
in
sti
or
sbb
jp
pop
adc
adc
aad
push
xor
rol
dec
ret
sub
jne
ret
mov
loop
aam
jae
dec
mov
push
call
les
cmps
xchg
inc
mov
push
loopne
lods
xchg
push
int
pop
jg
outs
xchg
iret
xor
jmp
pop
out
inc
xchg
push
add
iret
ja
pop
outs
sbb
cmps
mov
sub
test
push
pop
jno
das
pop
sbb
(bad)
cmp
xor
test
pop
cmp
and
scas
dec
cmps
cmps
pop
and
inc
inc
lods
jecxz
dec
push
jo
mov
pop
adc
jmp
psubsb
jbe
and
push
call
xchg
mov
sbb
outs
loopne
mov
push
dec
sub
in
repnz
int
xchg
dec
adc
sar
push
dec
mov
(bad)
out
sbb
dec
lock
adc
xor
(bad)
sub
call
xor
sahf
pop
mov
in
je
mov
sbb
stos
cmp
fsubr
scas
and
sub
test
jge
pop
sahf
int
and
mov
in
in
jecxz
xlat
mov
pop
xchg
mov
push
inc
std
arpl
mov
shr
scas
(bad)
xor
mov
add
test
call
or
ret
mov
adc
pop
fist
or
fs
add
aad
or
test
cdq
or
fidiv
jne
fist
pop
call
xchg
dec
and
pop
into
push
push
test
push
jb
xor
out
cmc
int
nop
dec
and
mov
and
fs
adc
mov
outs
movs
mov
xchg
out
sub
out
or
sub
pop
mov
mov
jbe
sub
sbb
inc
cdq
int
loope
fist
sub
xchg
push
(bad)
lahf
mov
mov
cmovne
xchg
loop
mov
sub
addr16
mov
cmc
clc
cmp
push
pushf
pushf
lea
jmp
pushf
mov
push
lea
je
call
lea
je
pushf
add
stc
call
popa
clc
adc
add
jb
inc
cli
repnz
dec
f2xm1
cmps
or
lahf
sbb
inc
mov
adc
add
adc
lea
cs
sbb
jno
fnstsw
popf
sub
pop
jmp
mov
add
mov
cmp
cmp
push
sub
xlat
iret
pop
ds
outs
jbe
aad
cmps
int3
dec
ret
lods
mov
add
fstp
inc
cdq
sbb
test
fcom
aam
ror
mov
jno
mov
lods
lahf
inc
mov
lds
sbb
out
es
dec
dec
mov
outs
and
jge
and
rcl
xor
and
dec
mov
loopne
loope
js
push
imul
push
ret
pushf
sbb
jne
or
mul
inc
sub
or
or
aas
ss
xchg
push
mov
jae
add
fwait
nop
pop
pop
cmp
inc
stos
xor
push
pop
jno
movs
(bad)
and
lds
jmp
adc
fimul
inc
stc
psubw
dec
retf
mov
push
aaa
cs
jmp
cmp
inc
imul
sub
jns
mov
sub
mov
sbb
xor
in
lahf
push
sbb
out
adc
add
out
sbb
mov
test
dec
in
pop
inc
and
inc
fucompp
into
mov
mov
test
inc
and
call
cwde
aad
js
aas
aas
js
xlat
rol
outs
pop
out
mov
push
dec
adc
aad
pop
dec
jns
test
xor
(bad)
inc
pop
jecxz
iret
fisubr
push
mov
mov
mov
mov
in
iret
mov
jl
adc
shl
in
cmps
sbb
fdiv
pop
movs
movs
(bad)
aas
pop
fiadd
xchg
jmp
mov
cli
mov
aad
(bad)
xor
push
clc
out
jge
xchg
push
pushf
xchg
xor
(bad)
not
das
mov
lock
test
mov
pusha
push
push
mov
das
popa
xchg
leave
inc
jmp
jmp
enter
jne
retf
inc
mov
leave
iret
mov
cmp
and
adc
xor
xor
jmp
mov
ror
mov
cmc
sbb
jbe
adc
(bad)
pop
jb
mov
outs
mov
loopne
das
and
jge
mov
mov
jb
imul
popa
push
mov
jo
popa
std
adc
mov
mov
cmps
aaa
or
dec
bound
movs
xchg
push
inc
sbb
xchg
rcl
repz
gs
add
in
pop
mov
pop
outs
push
sub
fsub
mov
mov
jecxz
pusha
clc
sub
lea
pushf
pusha
jmp
and
add
mov
dec
add
mov
xor
jecxz
lea
mov
icebp
aaa
add
pop
outs
and
push
gs
sbb
push
outs
jb
imul
ins
jae
and
dec
dec
inc
ret
mov
jg
push
cmp
mov
dec
pop
mov
fcmovnu
xchg
cmp
out
mov
inc
dec
jg
cdq
sbb
adc
mov
sub
sbb
test
and
out
xor
fst
pusha
retf
and
fiadd
out
mov
stos
adc
ds
lock
ja
sbb
ror
icebp
pop
inc
xor
adc
inc
popf
push
into
and
jmp
inc
fidiv
pop
sbb
gs
ja
dec
(bad)
enter
movs
or
cs
fiadd
jo
test
mov
sub
mov
jmp
xor
sub
call
aas
xchg
xor
in
cwde
repz
(bad)
out
test
test
adc
mov
adc
add
bound
xchg
xchg
mov
aad
inc
xor
jb
enter
mov
pop
int
aad
mov
mov
(bad)
push
stos
adc
pop
int3
add
push
adc
fdivr
iret
(bad)
jg
push
aad
in
loopne
sahf
xchg
push
enter
dec
dec
jge
cmp
adc
adc
ja
lock
pop
pushw
in
movs
xchg
stos
dec
int
xchg
or
mov
xlat
hlt
sbb
dec
add
aad
mov
neg
jge
mov
int3
push
add
mov
or
sbb
and
cmp
(bad)
cmp
push
shr
jp
sub
pop
push
ins
pop
out
(bad)
call
xor
sbb
dec
lods
gs
jo
push
ins
mov
mov
push
int
inc
lock
ficom
sbb
mov
xor
int
out
mov
xor
imul
jmp
xchg
pop
xlat
or
add
cmp
cdq
mov
cmc
adc
xor
sbb
mov
ss
mov
mov
sub
ins
mov
sub
cmp
ror
scas
mov
mov
fdivr
dec
(bad)
inc
mov
mov
inc
(bad)
cmp
sub
or
mov
push
imul
aam
or
pushf
cmps
jo
xor
sbb
adc
pop
scas
repz
in
test
cmc
push
(bad)
fadd
xchg
fldenv
stc
pop
shl
fisubr
repz
addr16
cmp
stc
xor
inc
test
mov
mov
pop
add
js
iret
mov
sbb
mov
sbb
addr16
inc
jo
stos
inc
mov
lds
xor
push
rcr
or
cmps
push
fidiv
gs
mov
push
(bad)
adc
in
jmp
ret
cmp
inc
js
sub
xor
loopne
mov
js
cli
xor
imul
inc
cmp
xor
mov
push
or
ja
jae
je
mov
inc
dec
adc
dec
add
dec
mov
dec
cmps
adc
jmp
mov
add
xor
je
ret
clc
ja
inc
jp
into
aad
inc
inc
icebp
or
cmp
or
lods
pusha
imul
xor
repz
mov
(bad)
lea
imul
(bad)
sbb
hlt
or
cmp
add
inc
out
mov
lea
cmp
lods
test
pop
std
xor
push
ror
or
xor
xchg
dec
jmp
xor
lods
test
hlt
int3
lds
sbb
lock
xchg
mov
pop
mov
dec
(bad)
lahf
ja
adc
dec
aaa
bsf
idiv
sub
push
adc
popf
inc
cmp
jg
xor
inc
ja
loope
dec
adc
shl
imul
push
xchg
lock
pop
in
shr
sub
das
daa
leave
add
in
dec
(bad)
movs
fnstsw
les
int
mov
jo
sub
aaa
or
sub
cmp
cmp
cld
adc
call
scas
push
inc
jecxz
rcl
inc
inc
inc
mov
aam
cmp
out
and
adc
repz
push
cmp
int
sbb
maskmovq
test
pop
xor
mov
test
xchg
jmp
dec
ja
(bad)
shr
(bad)
movs
adc
cli
push
or
pop
std
repnz
adc
lods
xchg
pop
pop
xchg
das
daa
xchg
mov
adc
xor
retf
mov
cmps
and
in
adc
pop
adc
ror
mov
aam
mov
cs
ss
(bad)
rcl
sub
adc
or
mov
jecxz
fild
loopne
cmps
sahf
add
jle
adc
rcl
or
aaa
jge
jns
gs
scas
jmp
dec
daa
jg
mov
in
mov
ja
aas
cmps
push
push
out
(bad)
sahf
push
shl
es
push
addr16
js
add
pushf
mov
or
ins
inc
lods
dec
add
xor
mov
mov
push
push
lea
jmp
cmps
loopne
and
mov
jmp
aam
push
rcl
imul
fld
cld
dec
push
pop
mov
inc
mov
rcr
mov
sub
pop
dec
outs
enter
mov
stos
mov
push
inc
data16
or
aad
pop
enter
rcl
into
push
ja
adc
add
ret
jae
mov
push
or
sbb
push
mov
ins
je
test
xor
leave
push
inc
and
adc
fwait
sbb
jmp
aad
popa
cmp
and
rcr
iret
js
dec
ins
fidiv
add
push
outs
test
pop
inc
pop
jecxz
movs
adc
pop
mov
mov
inc
cmps
sbb
test
mov
mov
push
and
mov
mov
movs
call
movs
inc
dec
push
jns
aas
and
dec
add
or
pop
jmp
or
lds
mov
push
fistp
inc
cmp
mov
mov
(bad)
sahf
xor
dec
loopne
je
data16
pop
jl
lock
cwde
pop
sub
push
rol
dec
cmps
pop
push
icebp
cmps
fstp
push
mov
add
and
mov
das
push
adc
fist
in
and
nop
test
stos
or
push
jbe
inc
cmp
mov
inc
or
xor
dec
adc
adc
mov
or
(bad)
test
call
pop
mov
adc
and
je
adc
call
test
jmp
jnp
adc
jne
in
int3
cmp
fist
das
pop
psubw
pop
pop
lods
adc
fcomp
mov
hlt
out
sub
cwde
dec
retf
add
movs
fcom
rcl
xor
jns
addr16
push
clc
jns
call
sar
add
pop
popf
ins
inc
cmp
in
dec
ret
mov
dec
bnd
lods
inc
cmp
adc
arpl
push
push
(bad)
lea
inc
adc
mov
jl
mov
repz
pop
add
xchg
add
push
dec
loopne
cmp
hlt
dec
scas
mov
ficom
mov
pop
dec
clc
xchg
fwait
mov
imul
mov
in
enter
idiv
and
repz
jae
mov
cdq
xchg
cmp
ss
test
int
into
add
(bad)
sahf
xchg
dec
add
pop
push
or
jmp
(bad)
ins
jb
cmp
in
nop
out
jmp
test
mov
add
xchg
mov
call
enter
mov
pop
dec
push
mov
or
dec
inc
and
sbb
(bad)
lahf
xlat
push
mov
adc
scas
mov
inc
mov
pusha
cdq
or
stc
(bad)
loope
mov
sub
jns
(bad)
sti
cwde
adc
inc
in
jmp
push
into
sahf
pop
(bad)
std
xchg
lds
mov
jns
push
ja
scas
addr16
mov
ror
iret
inc
ins
test
fdiv
and
(bad)
outs
inc
call
je
mov
pop
popa
imul
(bad)
das
sahf
test
dec
test
add
mov
je
out
jge
push
shufps
repnz
repnz
pop
push
(bad)
loope
push
mov
pop
mov
and
mov
call
rol
dec
mov
xlat
out
or
add
jle
mov
jne
inc
test
dec
inc
iret
out
cmp
out
pop
and
cdq
cmp
mov
sub
and
cmp
adc
pop
sbb
inc
mov
adc
push
ror
sbb
fdiv
addr16
mov
inc
idiv
mov
addr16
push
out
lds
std
sbb
jno
cmp
add
test
aam
and
mov
mov
jae
out
sahf
cmps
ss
adc
sahf
push
inc
or
dec
add
jl
dec
inc
pop
inc
ins
cmc
or
icebp
inc
mov
jmp
add
mov
sub
cli
push
ficom
test
jne
out
push
movs
cld
cmp
xchg
jb
add
mov
adc
adc
or
sahf
xchg
lds
inc
pop
retf
rol
inc
cwde
adc
enter
lahf
xchg
cmp
fstp
stos
jge
mov
push
sbb
(bad)
push
stos
mov
or
xor
scas
sub
lods
push
outs
shl
(bad)
cmp
xchg
push
clc
das
test
fwait
xchg
sub
test
jo
cdq
xor
dec
xchg
mov
inc
xchg
out
je
loope
jge
adc
xor
mov
add
inc
cmp
fisub
xor
mov
xchg
dec
dec
sahf
xor
ret
push
cmps
and
call
ja
int
mov
pop
stos
ret
push
xor
ds
push
outs
mov
ss
aam
add
xor
inc
inc
js
scas
push
cmc
cld
clc
xchg
push
rcl
mov
push
lock
jl
pop
lods
adc
shl
pop
jo
dec
and
outs
mov
(bad)
mov
pop
fnstsw
xchg
icebp
xchg
or
jb
cmp
or
lea
(bad)
xchg
sub
sbb
pop
ds
add
call
jmp
fild
adc
push
mov
bound
inc
imul
es
dec
adc
adc
out
push
mov
dec
xchg
push
outs
push
mov
sbb
nop
les
xor
mov
mov
jne
cmp
xchg
xor
movs
lods
outs
test
mov
jno
cdq
push
push
repz
sbb
inc
mov
pop
lahf
cmovae
pop
inc
dec
mov
fdiv
adc
stos
pop
daa
sar
xchg
dec
cwde
out
sbb
xor
sub
imul
fwait
mov
lods
popa
add
adc
xchg
pop
stc
jb
retf
jnp
pop
adc
shr
inc
mov
jns
dec
(bad)
adc
call
(bad)
push
inc
test
add
cmp
cmc
dec
scas
mov
jb
arpl
popa
fist
(bad)
outs
out
fldenv
inc
shl
shr
or
arpl
adc
xor
pop
(bad)
loop
fstp
add
mov
xor
mov
xchg
ror
mov
pop
lea
pop
lock
iret
lds
mov
fcomi
or
stos
stos
add
fwait
icebp
push
sub
cdq
mov
lods
dec
xchg
popf
adc
fistp
adc
loop
or
(bad)
or
aam
jb
mov
imul
mov
(bad)
fcom
out
loop
or
fidiv
out
cmp
out
repz
pop
int3
and
inc
push
dec
sub
shl
mov
int3
jg
arpl
xchg
sub
xchg
out
pop
aam
jl
cmps
cwde
fimul
or
jno
in
in
cmc
not
jl
in
xor
int3
push
xor
pop
jo
and
jmp
call
jl
test
mov
or
jge
and
pusha
test
repnz
call
xchg
or
push
jl
xchg
xor
add
inc
or
pop
adc
mov
mov
(bad)
sub
or
popf
call
js
mov
repnz
xchg
lods
and
jecxz
cdq
mov
mov
add
hlt
pop
ret
or
(bad)
cmps
cld
(bad)
aaa
or
jecxz
popf
repz
sub
fwait
xor
std
in
mov
loope
ss
adc
xchg
js
mov
imul
les
bound
inc
mov
sbb
jnp
xchg
fistp
aas
cmc
mov
mov
mov
mov
mov
nop
movs
fidiv
sub
lahf
js
inc
cmp
int
push
pop
dec
and
fcomi
cli
mov
lea
jae
pushf
pusha
mov
lea
jne
jmp
sub
pushf
mov
pusha
call
jmp
inc
ss
or
adc
cmp
js
rcr
add
out
lds
fwait
rcl
lds
mov
scas
inc
jb
cmp
mov
push
sbb
cdq
jns
adc
shl
xor
mov
int3
aad
pop
jns
loopne
xor
ficom
or
jne
push
or
into
dec
xchg
sub
jne
sub
fisubr
add
sub
jl
fxtract
dec
jbe
es
pop
jb
cmp
pop
jne
or
ror
cmps
mov
mov
mov
dec
(bad)
mov
xchg
mov
sub
div
les
add
sub
jp
jl
push
jns
test
jnp
xor
inc
mov
push
imul
jb
add
scas
in
fwait
adc
sub
imul
cs
xchg
pusha
cdq
xlat
mov
fcom
dec
xor
inc
daa
and
sub
test
push
xor
retf
js
popa
push
(bad)
div
dec
ror
movs
sub
push
stos
outs
or
jnp
or
inc
cmc
into
push
into
es
test
push
scas
in
movs
sbb
mov
jno
aad
mov
pop
adc
in
add
add
shl
sbb
stos
and
cmps
repnz
and
cmc
aad
mov
xor
xor
adc
xchg
dec
lds
cld
xchg
bt
ror
clc
sub
bt
call
pusha
lea
jne
shrd
call
adc
push
ror
pusha
push
adc
lea
inc
mov
mov
sbb
fcmovnbe
mov
fbstp
jne
rcr
xchg
add
movs
jns
cs
test
jmp
fdiv
cmp
std
(bad)
mov
dec
cmc
adc
movs
pushf
mov
lods
jle
push
(bad)
ins
dec
inc
mov
inc
cmp
push
sub
int
xchg
or
jge
xchg
cmp
xchg
or
in
and
adc
imul
adc
ror
inc
mov
arpl
repz
pop
je
fcomi
int3
xchg
ss
jmp
scas
or
mov
mov
xchg
pop
pop
cdq
adc
rcr
inc
cmp
and
cmp
les
jmp
xchg
jae
outs
jp
jnp
xor
js
xor
adc
test
push
and
xlat
fidivr
and
mov
stc
mov
loopne
mov
in
inc
pop
mov
sbb
xor
scas
in
out
popf
loopne
pop
shl
cld
xor
test
je
dec
and
xchg
in
mov
loopne
xchg
sub
loope
clc
into
xchg
cmp
call
movs
inc
repz
push
mov
push
imul
mov
cmp
js
push
push
mov
mov
sub
dec
push
jno
ins
and
push
in
arpl
fadd
cmp
adc
sti
add
xchg
das
ins
sbb
rep
fs
arpl
mov
push
out
or
mov
push
jns
push
xchg
push
adc
shr
cmp
adc
call
adc
pop
xor
jmp
out
and
ret
mov
in
rcr
scas
push
mov
or
mov
dec
loopne
rcl
inc
fsubp
ret
mov
lods
mov
push
push
out
inc
sub
dec
(bad)
aas
popa
ins
arpl
dec
xchg
adc
aaa
das
sbb
or
das
or
idiv
sub
jnp
sub
and
jl
cmp
push
xchg
mov
push
pop
adc
test
loop
movlps
sti
jbe
push
xchg
test
out
ja
cs
int3
or
lahf
stos
or
or
stos
test
xor
fidiv
daa
pop
sub
jecxz
das
jns
xchg
jo
dec
in
mov
jle
(bad)
or
imul
jnp
sahf
movs
cli
cmp
sbb
xor
jbe
repnz
retf
cmp
jo
jl
fimul
cmp
cmps
int
test
or
gs
xor
popf
cli
dec
int
push
jne
aaa
add
ds
lea
aaa
jne
sub
or
int
(bad)
int
cmc
data16
fisttp
or
aaa
repnz
jne
stc
mov
mov
cdq
fsubr
ins
pop
cmp
xchg
xchg
pop
scas
cli
or
aaa
gs
add
lock
stc
nop
cmp
pushf
jo
(bad)
aam
int
std
lea
aaa
sti
repz
sti
or
in
sub
retf
or
sub
mov
aaa
inc
mov
stc
(bad)
cmp
pusha
xor
dec
(bad)
(bad)
(bad)
cmp
arpl
push
jnp
lea
aaa
add
xchg
dec
or
ins
inc
mov
stc
les
ss
dec
(bad)
jmp
inc
cmp
in
dec
cwde
jecxz
dec
dec
dec
pop
ja
aaa
in
mov
dec
call
pop
adc
adc
aaa
add
or
add
ffreep
(bad)
or
cs
movq
mov
ds
lea
aaa
or
imul
mov
jnp
lea
aaa
mov
or
aaa
add
jns
jmp
aaa
cli
mov
int
std
lea
aaa
add
mov
ds
lea
aaa
and
leave
xor
mov
ds
lea
aaa
out
or
enter
mov
aaa
xchg
fist
dec
int
and
and
jmp
pop
sar
dec
or
aaa
or
enter
cmp
sti
scas
add
mov
jnp
xchg
cmp
push
test
addr16
or
imul
cmp
fbld
mov
call
lea
aaa
repnz
(bad)
ror
enter
cmp
sbb
add
or
lea
aaa
add
add
(bad)
retf
call
retf
push
(bad)
pop
in
mov
ds
lea
aaa
adc
aad
hlt
or
stos
mov
aas
pop
dec
pop
(bad)
lea
aaa
and
sbb
mov
in
jmp
out
cmp
sbb
fcomp
movs
add
xor
(bad)
dec
out
ds
scas
cmps
pop
adc
dec
(bad)
mov
dec
in
mov
xor
enter
outs
daa
push
mov
dec
and
int
xchg
cs
inc
or
ror
call
fld
inc
pop
xor
mov
push
mov
fiadd
js
dec
inc
mov
(bad)
sbb
aaa
push
xor
out
add
fidiv
sbb
push
into
(bad)
xlat
mov
sub
in
add
jg
inc
(bad)
jne
cmp
int3
jmp
cs
sbb
mov
imul
xchg
adc
add
sbb
adc
jbe
or
rol
fmul
rcr
sbb
push
call
sbb
xchg
imul
and
outs
dec
inc
das
data16
dec
xor
pop
das
jbe
stos
call
sub
push
out
ror
adc
sbb
pop
imul
test
jge
retf
push
inc
dec
(bad)
or
sti
xchg
pusha
dec
pop
sti
ret
imul
fist
pop
movs
xchg
adc
mov
push
mov
retf
repz
jbe
dec
xchg
push
dec
out
and
and
(bad)
jge
aaa
pop
cmp
ja
bound
push
pop
push
pop
std
mov
call
les
or
aam
scas
movs
xor
loope
mov
sbb
aam
call
mov
and
inc
mov
sahf
xchg
outs
aaa
ds
dec
xor
pop
xchg
sub
adc
sbb
out
or
outs
push
xchg
mov
rep
jmp
push
xchg
jmp
push
int
inc
push
jne
das
add
not
push
xchg
imul
jl
fwait
mov
(bad)
mov
pop
adc
sahf
xchg
add
ins
xchg
loope
(bad)
mov
les
push
cdq
(bad)
sbb
cmp
cmps
lea
(bad)
mov
dec
icebp
lods
push
(bad)
mov
mov
pusha
sub
lods
mov
retf
retf
ret
ror
rcl
xor
test
movs
ret
arpl
mov
mov
dec
outs
daa
push
outs
sub
in
scas
into
into
lds
xchg
aad
jmp
xor
mov
dec
es
inc
aas
adc
pushf
adc
inc
mov
pop
scas
loopne
jp
fsubr
and
jle
ror
xchg
outs
cmps
and
jne
dec
jp
xchg
adc
inc
xchg
or
aam
mov
pop
push
mov
mov
cld
repz
adc
cmp
popf
jae
into
rol
jb
cmp
jae
lods
add
fwait
mov
into
push
xchg
dec
and
sub
shl
push
shl
retf
xchg
add
jp
push
sbb
retf
dec
mov
lea
dec
adc
and
push
out
xchg
jae
sbb
(bad)
out
mov
les
dec
dec
dec
and
retf
cmp
and
arpl
push
mov
xor
lea
and
jmp
fwait
xor
dec
fcmovnbe
jg
in
loope
push
adc
popf
fbstp
xchg
and
sbb
loop
lea
jmp
inc
jmp
in
jne
xchg
adc
sti
or
sar
scas
cmps
repnz
adc
pop
daa
gs
ret
lahf
cmps
jno
jecxz
xor
and
add
mov
adc
std
icebp
test
cmp
sbb
rcl
outs
jbe
data16
aaa
popa
cmp
imul
sub
add
test
popa
mov
add
ret
mov
and
fist
mov
je
xchg
(bad)
xchg
loop
mov
adc
aaa
cmp
xchg
int3
fcom
daa
or
mov
push
push
dec
add
jo
and
inc
cmp
add
push
pop
mov
mul
xor
add
es
std
pop
hlt
adc
shl
gs
cs
mov
adc
mov
rcl
leave
jo
ins
ins
arpl
es
bound
hlt
hlt
push
mov
mov
out
pop
aas
mov
int3
inc
test
lods
lods
push
scas
or
xor
sub
loopne
cmp
jno
movs
sbb
out
xchg
mov
jno
add
lock
int3
int3
icebp
add
stos
or
frstor
fist
in
add
sub
cs
mov
or
xor
jo
and
aam
je
add
ret
pop
ins
and
mov
mov
and
call
lods
and
into
mov
pushf
mov
and
imul
int3
and
adc
add
cmp
sbb
xlat
fidivr
fbstp
cmp
adc
cwde
popf
adc
nop
test
sbb
sar
push
mov
jnp
cmp
(bad)
pop
int
inc
add
ror
inc
push
into
mov
inc
dec
or
cmps
inc
and
jb
mov
in
fiadd
dec
and
loopne
movs
jp
push
cld
hlt
adc
inc
pop
xchg
icebp
retf
outs
xor
sbb
mov
mov
push
sbb
lock
jnp
test
cmps
or
pop
xchg
mov
add
shl
cmps
xor
cmps
in
psadbw
(bad)
mul
adc
call
cmp
aad
inc
mov
sub
daa
sbb
pop
xchg
mov
dec
loopne
cmc
not
call
cmp
push
push
xor
adc
pop
leave
jg
xchg
fwait
push
xchg
sub
ins
cmove
in
xchg
je
pop
nop
jp
push
mov
scas
es
jecxz
pop
inc
jecxz
mov
xchg
lods
pop
or
mov
jl
mov
hlt
adc
nop
es
imul
pop
idiv
mov
mov
aaa
xchg
pop
rol
mov
inc
int3
int3
lds
ret
adc
xchg
arpl
out
enter
data16
sahf
dec
adc
call
mov
or
rol
adc
les
(bad)
lods
and
xchg
imul
retf
push
pop
in
pop
xor
dec
push
mov
int3
aad
(bad)
adc
stos
cmp
dec
cmps
sub
in
xchg
imul
xchg
stos
ja
dec
push
pop
sub
xor
xlat
mov
ror
or
fisttp
push
and
xlat
sub
(bad)
movs
cmps
pop
xor
xlat
xor
xor
shl
aas
cmc
fnsave
(bad)
test
xchg
shr
xchg
mov
repnz
jg
int3
add
pop
xchg
adc
ja
and
lahf
mov
ins
push
repz
int3
cmp
adc
and
xchg
cmp
push
cmp
cmp
push
adc
add
mov
pop
and
mov
xor
bound
test
(bad)
jl
add
and
jo
aad
jbe
popa
xchg
pop
sti
mov
mov
pop
daa
add
ins
je
ss
rcr
jmp
and
mov
ds
sbb
jle
pop
adc
add
adc
push
cli
in
cmp
cs
mov
xor
jg
call
scas
jmp
test
mov
ffreep
sahf
adc
retf
ins
and
movs
mov
(bad)
mov
aas
dec
scas
retf
scas
mov
int
push
mov
aam
jns
or
mov
sti
mov
pextrw
push
imul
inc
ja
mov
(bad)
push
or
loope
or
sub
dec
inc
sahf
jb
mov
out
cmp
shr
call
mov
inc
sahf
fist
adc
out
mov
or
push
les
daa
pop
aas
and
into
movs
ins
scas
inc
(bad)
mov
push
int
(bad)
pop
push
xchg
imul
push
dec
xor
push
xchg
xchg
inc
rcr
call
sbb
sahf
mov
sbb
push
xor
or
out
xor
out
call
dec
int
push
mov
sbb
dec
push
inc
movs
jbe
enter
gs
pop
and
lds
test
cmps
ret
fiadd
cli
dec
sahf
and
fnstcw
mov
pusha
xchg
int3
and
dec
jmp
call
mov
sbb
repnz
lahf
push
cmc
mov
xchg
popa
js
sbb
mov
mov
jmp
js
pushf
pushf
lea
jne
push
mov
rcr
sub
movsx
dec
movsx
lea
bt
sub
clc
stc
push
pop
call
pushf
call
arpl
pop
mov
add
sbb
jnp
mov
mov
xchg
mov
jmp
push
mov
mov
out
ror
jmp
iret
pop
stc
sub
cdq
scas
and
sub
in
and
mov
ficom
outs
adc
jg
ins
and
lds
dec
inc
shr
jns
call
dec
mov
push
or
inc
call
lods
fbstp
popa
dec
in
sub
push
pop
movs
jns
and
mov
inc
dec
lods
icebp
test
jbe
jecxz
cmc
xchg
xchg
push
adc
inc
inc
cli
icebp
enter
jecxz
inc
dec
fcom
retf
je
push
shl
(bad)
mov
rol
xchg
and
add
sub
aas
xor
add
je
pop
push
imul
outs
mov
jb
into
xchg
xor
xchg
dec
dec
ret
add
ret
cmc
fild
inc
shl
popa
jmp
jnp
test
inc
or
jb
loop
outs
inc
call
nop
(bad)
or
adc
dec
and
add
ficom
call
dec
cmps
pop
aas
ss
outs
jnp
xchg
xor
jg
call
add
cmps
sub
jmp
stc
inc
jb
loopne
pop
adc
movs
mov
aam
nop
lock
outs
jo
imul
imul
inc
push
outs
add
jge
pop
push
std
shl
cs
ss
mov
lock
sahf
mov
mov
jnp
push
xchg
ins
jnp
out
adc
mov
ins
loop
pop
iret
push
leave
int3
dec
inc
jl
(bad)
xchg
int3
bound
imul
push
ins
or
test
dec
xchg
xchg
or
sbb
or
shr
test
cs
adc
xor
jae
sub
sbb
dec
out
cdq
cmp
and
xor
inc
lds
mov
xlat
arpl
nop
test
sbb
jnp
and
out
in
xchg
popf
pop
push
push
mov
(bad)
das
out
nop
imul
or
lock
jns
fbstp
xor
dec
out
jl
(bad)
adc
(bad)
sbb
ror
inc
and
ds
or
and
mov
mov
cmp
sbb
in
mov
hlt
retf
movs
cli
sub
mov
js
bound
cmp
mov
jo
mov
adc
test
xchg
or
push
xchg
shr
inc
mov
dec
inc
jnp
jno
stos
mov
dec
bound
loopne
push
data16
pop
lods
and
call
nop
push
int3
mov
movs
cmp
cmps
mov
ret
pop
fs
mov
stc
xor
dec
cpuid
jb
mov
pop
mov
cmp
mov
popf
je
xlat
dec
ret
xor
fistp
push
stos
mov
ins
ins
movs
enter
sbb
es
shr
popf
shr
addr16
ss
out
inc
jbe
iret
aad
aas
xchg
out
imul
fidivr
sbb
aas
xlat
inc
inc
out
sbb
repnz
xor
pop
adc
push
(bad)
pop
push
mov
adc
(bad)
fwait
mov
push
dec
enter
ret
cmp
shl
repnz
ror
jmp
pop
mov
sub
(bad)
pop
stc
das
lahf
aad
jns
adc
int
stos
add
sbb
cmp
ror
add
in
(bad)
push
push
and
int3
aas
pop
lock
(bad)
fwait
or
inc
out
dec
mov
mov
xor
cli
xor
pop
aaa
add
push
jbe
imul
call
js
pop
pop
hlt
pusha
loope
addr16
inc
rcr
and
ficom
and
pop
out
xchg
lods
jb
and
lock
jo
sub
fstp
cdq
das
das
out
mov
sub
pop
xchg
std
div
imul
jecxz
or
outs
cmps
xor
out
movs
adc
cmp
imul
mov
adc
psadbw
xchg
jbe
loope
ss
or
add
mov
sub
pop
lods
aad
(bad)
daa
adc
outs
test
mov
jle
mov
mov
and
cwde
mov
mov
pop
push
cmp
push
pop
or
inc
shl
mov
psrld
mov
mov
retf
mov
lea
loope
inc
adc
cs
mov
sahf
jbe
sub
pop
cdq
in
dec
and
lods
sti
nop
mov
pop
add
test
xor
repnz
cs
pusha
lea
jne
call
xchg
dec
test
dec
jmp
les
xor
sub
leave
daa
pop
in
mov
dec
mov
neg
xor
mov
sbb
mov
xlat
ins
nop
jo
mov
sub
mov
std
das
gs
popa
push
dec
push
sub
je
aam
inc
shl
mov
gs
pusha
bound
data16
repnz
mov
cs
shr
jbe
xor
in
inc
mov
xor
or
lahf
adc
aad
adc
sar
sub
jae
ins
push
mov
nop
movs
sti
cmp
pop
add
sub
jp
pushf
push
add
cmp
push
test
movzx
sar
lea
mov
clc
clc
clc
add
test
mov
bt
test
test
pusha
push
lea
je
pusha
add
push
pushf
test
call
jg
inc
adc
aaa
sub
or
mov
jmp
cmp
clc
icebp
imul
mov
push
push
scas
push
mov
pop
ss
lahf
adc
mov
cmp
pushf
inc
js
xchg
adc
inc
std
cmc
arpl
rcr
bound
aas
jno
cmp
adc
xlat
fnsave
push
inc
cmp
and
push
(bad)
arpl
jp
fdivr
sub
jo
add
xor
ins
sbb
add
ror
push
lock
ins
push
mov
inc
mov
and
loopne
mov
ret
cmc
imul
push
(bad)
fmul
lahf
xchg
repnz
mov
cld
push
lds
inc
cmp
push
imul
out
push
mov
adc
pop
adc
ins
movs
sub
test
mov
aaa
dec
test
mov
cmp
cmc
in
jl
adc
add
fs
fwait
das
je
dec
add
push
push
and
mov
jmp
sbb
test
dec
repz
mov
stos
mov
sub
pop
sbb
(bad)
pusha
cmp
push
add
js
adc
data16
je
or
dec
ret
mov
cld
repz
add
pop
xchg
jbe
jb
sbb
lds
mov
loope
popf
and
xchg
push
test
add
clc
or
dec
jns
cmp
sahf
adc
jne
fisub
cdq
push
arpl
jmp
das
rol
mov
test
add
repz
test
inc
sbb
std
sbb
cdq
sbb
shr
jns
push
cmps
push
push
(bad)
fcmovnb
int
add
xlat
xor
push
cmp
mov
test
pushf
jle
cs
ins
inc
and
add
(bad)
fcom
dec
test
sub
pop
xor
mov
sub
ds
jle
jmp
out
xor
xchg
out
out
dec
add
test
dec
and
out
out
push
jnp
daa
gs
inc
xor
in
in
mov
fbld
in
xor
out
dec
push
retf
sbb
stc
test
sub
lods
test
jne
shl
fs
nop
xchg
ins
and
movs
sub
jle
sub
repnz
out
push
int
gs
xchg
or
repnz
popf
xchg
outs
out
cmps
xchg
int3
mov
enter
and
jle
je
int3
ret
push
int
add
fiadd
leave
int3
lds
out
mov
mov
imul
jmp
jmp
call
push
retf
sbb
xchg
jmp
jb
sub
call
aas
int3
sbb
jge
adc
adc
(bad)
cli
xor
in
mov
jmp
inc
call
nop
in
in
mov
adc
ret
cmp
rcl
sbb
jno
dec
addr16
std
ss
mov
jl
push
jmp
int3
xchg
in
cs
adc
mov
mov
imul
popf
jecxz
adc
xchg
mov
cs
mov
(bad)
ficom
pop
dec
rcr
jp
push
push
sub
aad
cmps
lahf
push
dec
add
xchg
mov
fst
(bad)
push
or
(bad)
sar
dec
cs
stc
mov
mov
outs
jno
xchg
mov
bound
pop
mov
push
xchg
test
mov
jecxz
xchg
mov
shr
loopne
pop
and
out
pop
jecxz
and
sahf
jae
sub
mov
inc
mov
sbb
jne
retf
jb
shr
pop
mov
jnp
or
inc
pusha
lea
mov
pop
not
jmp
lea
call
push
push
jmp
push
call
bt
pushf
cmp
call
pop
adc
or
adc
or
cmp
inc
or
movs
sbb
add
mov
leavew
test
loope
frstor
or
addr16
cmps
les
cmp
stos
xchg
gs
das
enter
fidivr
sbb
cmps
and
je
jge
sub
or
addr16
push
neg
mov
ret
push
pop
addr16
ret
sbb
outs
movs
(bad)
or
movs
(bad)
cmova
sub
(bad)
cld
cmp
inc
cmp
das
sbb
dec
ret
sti
pop
gs
xchg
scas
xchg
scas
addr16
sahf
mov
sub
int
inc
mov
sar
iret
stos
icebp
jg
push
cmps
dec
aas
sbb
xchg
into
imul
pop
cmp
icebp
and
hlt
fdivrp
jo
stos
dec
js
xchg
pxor
mov
sbb
pusha
mov
mov
shl
jg
and
int
movhps
sbb
fmul
mov
or
test
icebp
sub
loope
add
(bad)
hlt
mov
jge
jae
or
sbb
fisttp
pop
push
add
sub
int3
into
inc
jmp
sbb
(bad)
cmp
pop
jne
stc
push
or
jmp
xor
lock
sahf
jle
push
(bad)
cmps
pop
cmp
rol
cld
cdq
adc
sub
xchg
cs
sbb
repz
imul
jbe
cmp
cmp
xor
xor
mov
movs
jmp
mov
dec
push
xor
xchg
dec
push
fwait
inc
dec
xor
gs
call
xor
jecxz
mov
sar
loopne
(bad)
sti
daa
xor
les
inc
sti
and
sub
mov
(bad)
addr16
mov
lods
pop
rcr
jle
ss
and
fidivr
cmp
hlt
outs
ret
cs
push
call
xchg
or
jb
hlt
or
lods
jae
add
add
test
cs
jle
push
and
jmp
pusha
push
sar
lahf
icebp
test
call
mov
dec
lock
inc
(bad)
ret
jecxz
jge
cmp
retf
mov
cld
push
cmps
xchg
cmp
mov
xchg
inc
leave
fild
cmc
mov
test
int3
into
xor
or
jecxz
xchg
push
mov
jge
cmp
fcomp
and
pop
xor
pop
cmp
mov
add
mov
ss
push
mov
or
(bad)
das
xor
test
fsubr
or
out
pop
xchg
mov
mov
mov
leave
pusha
xchg
mov
dec
xchg
mov
imul
mov
ror
adc
cmc
and
or
ret
mov
retf
add
std
hlt
scas
push
(bad)
shr
lds
cmp
cs
push
mov
into
in
xlat
dec
mov
jnp
mov
push
fdiv
push
scas
xchg
scas
push
dec
push
sub
div
mov
repnz
je
in
(bad)
int
or
ficom
sub
mov
dec
mov
jp
test
ror
inc
fld
fwait
sbb
inc
push
and
pushf
cmps
jo
xor
rcr
jb
ror
sbb
jge
pop
xor
pop
movs
(bad)
inc
lock
ins
and
xlat
adc
les
jmp
bt
sub
stc
cmp
call
jmp
int
sahf
in
adc
arpl
out
and
mov
out
std
(bad)
dec
xor
mov
ins
dec
inc
(bad)
test
inc
fcomi
cli
test
stc
jge
and
js
mov
add
shl
pop
dec
pusha
cmp
out
mov
or
fild
sub
push
push
sub
cld
push
ins
out
test
or
ins
push
les
adc
popa
in
loope
ja
mov
lahf
cli
out
pop
aad
push
fist
mov
dec
mov
mov
out
bound
sbb
mov
jle
xchg
jo
sbb
stos
jae
add
xor
jmp
pop
iret
pop
jl
push
aas
shl
or
push
or
xchg
and
xchg
int3
dec
add
pop
test
nop
mov
ret
xchg
mov
cmc
dec
lods
mov
and
pop
adc
aas
xor
inc
xor
mov
data16
jmp
cli
push
sub
(bad)
jmp
iret
pop
and
popa
pop
sub
(bad)
call
pushf
sahf
push
ins
xor
xor
call
push
inc
inc
xchg
push
add
jl
scas
inc
imul
lea
movs
sbb
mov
mov
add
adc
frstor
aaa
xor
and
cmps
ds
movzx
movsx
mov
pushf
bts
mov
pusha
pushf
add
clc
jmp
mov
lea
call
pushf
pushf
pusha
jmp
int
pusha
cmps
jp
push
pop
pop
push
jae
adc
mov
push
(bad)
mov
inc
retf
loope
in
xchg
ficom
sub
test
mov
pop
dec
das
and
ret
dec
and
stos
xor
fidivr
clc
loop
stc
push
mov
nop
je
in
int3
es
sub
cmp
mov
sub
add
fwait
popf
adc
push
stos
test
jmp
frndint
adc
and
jmp
xchg
dec
adc
jo
pop
int3
push
lods
gs
das
mov
jno
dec
lds
jnp
lods
add
sub
addr16
inc
cmp
repz
xor
xchg
pop
mov
cli
ss
stc
push
jne
mov
mov
push
pushf
mov
push
ret
cmp
jle
cmp
enter
and
xor
jns
idiv
repnz
out
xor
gs
in
ret
jnp
jne
dec
mov
xor
clc
mov
int3
jne
popa
xchg
pop
repz
push
fstp
mov
repnz
sbb
jnp
cdq
add
push
mov
mov
cmp
loope
sbb
adc
mov
sub
pop
cmps
loop
mov
mov
les
dec
fist
(bad)
or
or
and
mov
mov
cmp
clc
xchg
les
or
test
dec
(bad)
jmp
mov
add
stos
inc
sbb
imul
ins
add
xor
adc
mov
and
(bad)
ror
movs
ret
fcom
mov
inc
jl
xchg
jnp
mov
rep
jge
or
movs
xchg
mov
push
loop
pop
mov
mov
out
ret
cmp
iret
pop
jne
add
fild
call
sub
lock
in
lds
ds
adc
and
in
popf
outs
dec
sub
push
js
adc
xor
dec
ins
lds
inc
sti
pushf
rcl
sahf
mov
mov
pop
nop
es
jg
add
stos
sbb
xchg
or
stc
mov
mov
je
mov
mov
mov
pushf
push
ret
dec
ret
loopne
jns
push
dec
sub
dec
adc
fdiv
int3
sbb
imul
inc
add
cmps
fwait
jge
dec
dec
jecxz
dec
push
xchg
shr
ret
scas
nop
cmp
dec
ret
add
fist
jbe
das
or
cmp
sahf
jns
mov
push
or
add
movs
sbb
and
push
outs
ror
adc
sub
sbb
(bad)
sbb
jne
in
jo
mov
mov
xor
mov
and
sbb
sub
dec
lods
add
repz
fwait
mov
jbe
int
xor
(bad)
mov
inc
fst
jmp
mov
adc
retf
out
enter
icebp
test
gs
scas
add
outs
mov
jl
hlt
sub
mov
xchg
scas
cwde
or
dec
mov
fcom
xor
inc
sbb
loop
or
retf
add
sbb
push
and
dec
cmps
sbb
(bad)
sub
cli
scas
fiadd
test
mov
in
mov
or
xchg
adc
pop
into
repnz
ror
inc
mov
mov
or
jmp
inc
nop
(bad)
cmp
hlt
cmp
out
jl
xor
cld
xchg
mov
pop
jle
or
icebp
mov
and
push
xor
xchg
or
push
int3
add
adc
aam
mov
jns
stos
shr
cmp
or
sbb
sti
xor
fidivr
and
daa
jge
mov
mov
cmp
xchg
jg
loop
mov
cs
cmp
pop
xchg
inc
cmc
es
repz
(bad)
xor
out
push
inc
sbb
adc
xor
ja
jns
repnz
test
xchg
or
bound
and
retf
aam
shl
and
out
fcom
arpl
mov
xchg
inc
idiv
jp
push
repnz
mov
add
add
mov
mov
(bad)
mov
call
add
mov
xor
jne
sbb
hlt
sub
pushf
shl
clc
das
and
popa
fist
jno
sub
out
fadd
mov
jno
(bad)
les
in
fmul
jno
pusha
jmp
ins
push
and
mov
or
inc
sti
mov
cdq
call
ficom
ins
outs
out
inc
pop
pop
pop
add
nop
out
cmp
fdivp
mov
repnz
mov
imul
jle
shr
test
lahf
stos
repz
fsub
cdq
int3
movs
cmps
pop
and
jbe
push
call
add
test
jecxz
xor
or
in
mov
(bad)
pushf
xor
dec
mov
or
scas
mov
fcmovb
adc
in
ret
cld
mov
cmp
sbb
mov
fstp
(bad)
mov
cli
neg
mov
iret
inc
jns
jnp
outs
and
pop
adc
imul
cmps
mov
int3
add
add
mov
cmp
xchg
ret
mov
aad
mov
add
cld
cmp
add
fnstsw
mov
div
xlat
xor
mov
mov
call
xor
jmp
adc
push
or
mov
stos
or
pop
inc
movs
pop
cmp
daa
cmp
pop
fld
sbb
dec
outs
test
sub
mov
xlat
sbb
addr16
lods
mov
fist
popf
mov
push
xlat
sbb
inc
popf
dec
movs
push
or
mov
test
pushf
rol
dec
add
ficomp
repz
(bad)
or
fwait
popf
les
loopne
test
mov
int
xchg
or
lds
(bad)
push
mov
call
sub
dec
jle
inc
dec
mov
adc
jge
mov
jo
adc
mov
push
mov
inc
dec
adc
(bad)
dec
push
ret
cmp
xor
cmps
pop
cmps
inc
hlt
mov
(bad)
or
in
gs
pop
(bad)
jecxz
mov
pop
xor
mov
ret
fstp
in
clc
pusha
popa
adc
sahf
sbb
ins
(bad)
mov
and
jmp
fistp
push
dec
jns
mov
ins
sub
imul
bound
ret
jle
cmp
cmp
sub
rcl
fnsave
jecxz
dec
pusha
lock
inc
cmp
out
popf
repnz
push
cmp
xor
leave
rcl
aam
dec
adc
popa
xlat
(bad)
inc
mov
push
fistp
mov
xchg
pop
xor
jg
adc
popf
dec
leave
retf
add
adc
stos
cmp
cmp
pushf
shl
cli
dec
or
jae
sub
jmp
lds
jge
es
pop
push
nop
dec
jl
pop
aam
movs
sub
pop
jae
xchg
cwde
mov
sub
mov
repz
repz
mov
popf
rcr
cmp
dec
repz
mov
sub
cmp
out
pop
mov
adc
call
outs
and
aaa
jae
push
in
in
gs
call
mov
push
(bad)
dec
inc
aaa
add
and
fmul
je
fs
xor
movs
call
js
adc
ins
mov
jbe
mov
add
xchg
jecxz
scas
and
shl
pop
push
out
cmp
inc
call
inc
mov
imul
mov
(bad)
mov
mov
mov
jp
push
lahf
shr
xchg
mov
stos
xchg
sub
cmovns
mov
cwde
das
ja
(bad)
bound
out
and
sub
(bad)
enter
or
leave
xchg
ins
push
pop
push
out
xor
push
out
dec
lds
sbb
dec
imul
jne
jo
adc
jg
imul
sbb
pop
stc
mov
rol
retf
dec
jb
push
or
push
sub
scas
mov
push
sbb
inc
pop
fcom
(bad)
jmp
bound
lods
push
and
in
mov
out
ret
(bad)
je
popfw
pop
rol
inc
pop
mov
mov
leave
and
aam
js
push
fadd
stos
fadd
xlat
xor
and
in
fidivr
test
scas
sub
push
adc
sbb
gs
adc
xor
dec
pop
or
fdiv
sub
addr16
out
pop
loopne
pop
(bad)
das
es
scas
daa
xor
mov
sub
mov
sub
fcom
and
fs
clc
fwait
push
cmp
jecxz
push
in
int
cmp
and
jnp
clc
xor
je
adc
mov
mov
leave
push
fidivr
das
out
xchg
imul
adc
sub
vmovupd
(bad)
mov
mov
adc
push
add
lar
mov
dec
enter
adc
add
pop
jmp
pop
ret
(bad)
loop
xchg
in
push
xor
mov
mov
mov
adc
push
cmp
retf
in
into
test
mov
xor
fstp
lds
shr
repz
pop
push
jp
and
xchg
ss
add
fcom
ja
lods
add
test
in
aam
jae
xchg
jmp
nop
cdq
mov
pusha
out
cmps
inc
in
adc
repnz
cld
add
dec
cmp
aaa
hlt
mov
ds
sbb
lahf
pushf
xor
dec
adc
ror
cmp
(bad)
jo
push
dec
jle
jb
sar
enter
imul
pushf
std
xor
retf
mov
cmp
icebp
out
call
sub
int
movs
pop
mov
out
test
ret
mov
mov
les
repz
xchg
add
loope
arpl
or
in
adc
sub
(bad)
adc
pop
dec
mov
add
les
loope
pop
pusha
iret
sub
sub
mov
fadd
push
or
sbb
ja
add
mov
lods
or
es
fcom
out
(bad)
fcom
and
and
fdiv
mov
stos
xchg
mul
fsubr
call
mov
pop
mov
dec
jmp
cmp
cmp
ins
loop
int
mov
popa
arpl
inc
ds
and
jecxz
push
cmp
mov
dec
movs
out
clc
daa
xor
ror
mov
call
jmp
cmps
push
jmp
pmulhuw
movs
xor
push
jns
loope
ret
fild
push
int
pop
int
dec
imul
(bad)
into
mov
adc
cmp
mov
mov
cli
(bad)
sti
repnz
aaa
push
mov
sub
lods
xchg
pusha
js
sub
and
xlat
pushf
push
sbb
aam
scas
movs
xor
fbstp
add
loop
add
cmps
pop
inc
lea
push
mov
jge
cmp
ins
into
inc
sub
aad
or
mov
stc
scas
cdq
sub
icebp
or
outs
xchg
sbb
xor
push
and
out
mov
cmp
dec
imul
mov
sti
adc
shr
jmp
leave
sub
clc
lods
xchg
push
pop
mov
fsubr
(bad)
cmp
pop
push
popf
jl
and
cdq
cmp
int
and
fs
jnp
ja
jmp
iret
mov
add
mul
cmp
add
out
dec
stos
cmps
std
xchg
retf
sar
cmp
cmp
push
xor
or
hlt
fs
(bad)
and
xor
mov
adc
repnz
lea
xlat
retf
bound
popa
xchg
enter
sbb
sbb
add
out
jmp
sahf
retf
and
loopne
hlt
stos
outs
rol
data16
jae
in
test
jmp
push
add
cwde
scas
cmp
add
test
dec
fisubr
pop
and
mov
es
lds
jmp
jp
push
mov
add
dec
dec
shl
pop
repz
mov
loopne
cwde
push
adc
in
mov
in
mov
imul
sbb
add
dec
ins
popa
addr16
imul
add
jb
imul
add
repz
rcr
sub
mov
push
not
seta
stos
call
lea
call
pushf
mov
adc
mov
call
inc
call
je
jge
xor
push
xor
push
mov
retf
lods
and
rol
jo
test
cs
mov
adc
fs
mov
pop
mov
or
mov
add
test
imul
inc
jno
adc
mov
or
imul
loop
arpl
pusha
xchg
int3
adc
adc
push
arpl
(bad)
fst
mov
jp
cmp
lahf
mov
sub
or
jae
test
pop
mov
fidiv
mov
mov
(bad)
pop
outs
ret
inc
test
xor
lock
xchg
sbb
pop
rcr
push
mov
adc
xor
ins
dec
dec
inc
cmp
aad
ins
add
jmp
lods
es
inc
lahf
and
adc
add
pop
shl
or
xor
dec
pop
mov
pop
pusha
imul
loopne
repz
imul
movs
fyl2xp1
ins
pop
rcl
push
aaa
pop
addr16
or
push
or
fwait
iret
mov
test
outs
in
push
adc
es
push
mov
xor
retf
movs
jp
jns
sbb
cs
(bad)
add
retf
push
ds
fwait
xchg
push
dec
ins
fs
mov
popf
jmp
cmp
loopne
push
pusha
sub
mov
push
in
rol
sbb
cld
test
mov
clc
sub
test
clc
push
pusha
cmp
pushf
push
jmp
stos
not
not
sete
mov
mov
jmp
pop
xchg
(bad)
or
mov
in
ins
push
push
ds
mov
int
adc
xor
ins
std
(bad)
sbb
sar
cdq
dec
inc
clc
sar
jmp
sahf
xor
cs
mov
std
push
sub
(bad)
jl
ins
pop
nop
loop
push
ja
aam
(bad)
mov
cmp
out
movs
lahf
rcr
mov
and
out
out
cmps
adc
scas
mov
(bad)
loopne
loope
inc
mov
pop
cmp
call
push
clc
pop
js
repz
fdivrp
das
(bad)
imul
jae
mov
fst
dec
test
stos
rol
cli
addr16
xor
mov
push
mov
gs
and
dec
add
mov
mov
inc
mov
inc
mov
push
ret
int
adc
push
mov
xchg
pushf
xchg
int
xchg
fwait
push
jns
loopne
mov
sub
prefetcht1
add
push
and
jle
add
jmp
mov
das
jp
inc
cmp
and
addr16
xchg
xchg
push
add
icebp
sbb
mov
sti
shr
sub
fsubr
jle
aad
nop
dec
enter
adc
in
adc
mov
adc
pop
xchg
int
ja
mov
call
mov
das
(bad)
mov
cmp
fdiv
aaa
(bad)
fsub
dec
loope
shl
(bad)
(bad)
jb
jmp
mov
pusha
mov
lea
jmp
mov
imul
mov
shl
mov
imul
and
jae
xchg
sbb
adc
test
sub
nop
cmp
in
outs
and
loope
mov
cs
dec
xor
ds
lods
ins
ret
clc
sahf
loope
(bad)
in
ds
rcr
jg
sbb
stos
pop
lods
loope
push
rcr
aad
aaa
jns
mov
movs
stc
cmp
jmp
ja
ja
mov
push
or
mov
and
(bad)
fmul
cmp
in
(bad)
es
into
out
fisttp
xchg
scas
cmp
iret
call
std
aam
xchg
test
lock
stc
add
pop
std
std
xchg
jnp
je
jp
or
ret
pop
jge
push
cdq
adc
mov
xor
(bad)
jge
jge
in
sub
jmp
and
add
in
daa
adc
test
sbb
nop
push
sar
add
jmp
add
xchg
push
inc
mov
cmp
mov
or
jmp
adc
inc
call
outs
dec
xchg
cmps
mov
rcl
(bad)
mov
adc
mov
ins
neg
movq
aaa
jmp
jecxz
sbb
adc
push
pop
popf
xor
icebp
xor
aam
rcr
jmp
mov
fdivr
push
call
xchg
cmps
popa
dec
test
push
dec
jb
out
push
ror
hlt
outs
imul
fistp
or
push
outs
(bad)
xor
hlt
int3
into
pop
dec
sub
(bad)
les
(bad)
unpckhps
adc
or
popf
or
and
ins
in
cdq
and
mov
adc
add
push
dec
leave
add
mov
add
xchg
xchg
(bad)
cs
or
push
imul
fucomi
jb
push
mov
adc
mov
dec
inc
je
push
adc
cmp
pop
(bad)
loopne
cmp
icebp
icebp
test
jbe
clc
outs
xchg
ret
gs
test
sbb
sahf
jb
jecxz
fsub
ret
adc
repz
adc
add
mov
sub
inc
jmp
call
repnz
add
call
dec
mov
mov
jecxz
xchg
jge
retf
mov
loopne
fcomp
(bad)
aaa
in
movs
fidivr
ror
(bad)
(bad)
jle
icebp
imul
or
mov
dec
lahf
or
aam
xchg
rol
call
movs
pop
push
int3
or
push
push
std
fisubr
mov
imul
in
repz
fdiv
pop
pop
xchg
imul
cmp
or
stos
mov
std
sub
cmps
jge
sbb
push
add
push
jle
inc
fucom
mov
mov
mov
jmp
pop
adc
push
cmp
in
lds
aam
cdq
out
ins
and
into
pop
inc
stc
(bad)
mov
imul
fwait
rol
cmp
push
and
stc
bnd
or
scas
xor
out
push
mov
push
dec
push
or
dec
mov
mov
ds
mov
sbb
repnz
mov
std
xchg
sbb
out
mov
add
xchg
cdq
jnp
outs
adc
in
cs
data16
sub
outs
movs
mov
jne
and
push
dec
retf
xor
out
inc
push
das
xor
in
test
xor
push
cmps
call
add
jge
or
and
add
xchg
adc
stos
sbb
cdq
nop
imul
iret
(bad)
xchg
jnp
pop
shl
rcr
retf
rcl
sub
retf
shr
xchg
lods
dec
sub
stos
fbstp
scas
arpl
jle
adc
add
sahf
pop
int
push
out
sbb
test
out
fs
fistp
xor
lock
push
dec
push
jge
mov
jecxz
rcl
mov
arpl
je
mov
xor
cmp
out
shl
movs
jp
aam
repz
jne
pusha
cld
push
movs
cmp
in
fs
push
movs
jo
enter
es
fcom
aas
test
push
test
inc
push
dec
sahf
xlat
je
cs
mov
pop
nop
push
or
hlt
push
sti
retf
dec
dec
add
fcomip
test
loopne
nop
sub
mov
popa
sub
(bad)
fs
push
ja
mov
jbe
or
(bad)
ja
js
sbb
retf
cmc
outs
mov
inc
xchg
xchg
dec
jecxz
push
ss
aam
dec
adc
sub
cmp
push
ins
mov
sbb
movs
pop
add
sti
jb
dec
jo
cmp
xchg
push
les
mov
or
shl
jmp
pushf
jl
adc
cmp
cmp
pop
nop
out
xor
cdq
jmp
mov
mov
dec
xchg
call
int3
int
fnstcw
cld
sbb
enter
aam
push
mov
test
mov
mov
int3
xor
or
jg
add
fwait
out
mov
cmp
daa
in
xor
lods
jmp
aad
ret
loopne
(bad)
ss
mov
xor
cdq
xor
int
frstor
push
lods
jae
pop
xchg
aad
dec
mov
add
sbb
out
mov
sub
push
je
mov
out
dec
sub
mov
push
ja
in
(bad)
mov
cmp
jmp
mov
scas
pop
pop
movzx
lea
pop
pushf
push
pushf
lea
ja
push
lea
jb
cmc
pushf
pusha
clc
cmp
pushf
push
call
sub
push
push
imul
cmps
or
mov
fs
add
mov
repz
rep
dec
add
leave
nop
jnp
jmp
fnsetpm(287
add
pushf
addr16
mov
push
in
repz
into
push
lea
dec
mov
and
shr
hlt
sbb
rol
dec
fwait
pop
nop
xor
jmp
mov
mov
js
jb
push
adc
xor
or
cmp
pop
pop
test
in
sbb
inc
or
push
aaa
aad
lods
dec
push
adc
pop
xlat
dec
icebp
je
fwait
jg
pop
fimul
pop
sub
push
scas
in
mov
xchg
ret
fidiv
stos
xchg
fcomp
xchg
mov
shr
mov
or
imul
outs
jg
adc
bound
ja
cmp
mov
xor
adc
scas
sub
call
sub
or
or
movs
cmp
mov
stos
cmp
add
js
lods
in
pushf
lods
push
mov
loopne
mov
or
sbb
cld
fs
clc
pop
cs
cmps
movs
push
out
dec
or
std
and
inc
pushf
cs
mov
mov
jp
mov
and
aas
jno
xor
jecxz
cmps
mov
mov
dec
addr16
lea
in
lds
movsx
sar
mov
mov
test
stc
cmp
and
cmp
jmp
mov
adc
dec
mov
xchg
mov
cmp
inc
(bad)
xor
pusha
mov
idiv
imul
jecxz
ds
movs
pusha
sbb
sbb
cmp
cmp
mov
ds
adc
adc
lds
imul
ficom
or
xchg
(bad)
pop
push
mov
or
mov
ret
jbe
and
mov
mov
inc
bound
push
mov
sub
js
lods
stos
jecxz
sbb
cmps
scas
call
ins
imul
cmc
xchg
shl
pop
int
xchg
lods
loope
je
dec
push
pop
xchg
lahf
and
jae
(bad)
push
or
add
adc
stos
out
into
add
cmp
sub
xchg
sbb
mov
repnz
cli
push
stos
add
pop
fwait
shl
mov
in
sub
cmp
jnp
or
test
mov
mov
adc
xchg
ins
and
push
jg
in
and
xchg
hlt
push
dec
out
idiv
xchg
or
out
mov
fstp
aad
(bad)
inc
js
cwde
dec
ds
mov
mov
imul
call
addr16
sbb
or
inc
ja
pop
(bad)
shr
mov
fst
(bad)
dec
push
jg
sti
push
push
mov
dec
xchg
jne
mov
add
xor
jl
pop
push
sbb
scas
jecxz
jbe
icebp
sub
push
jns
add
jge
lods
jbe
loop
push
fist
sar
sub
dec
mov
(bad)
or
sbb
mov
gs
and
jno
sbb
push
mov
cmp
(bad)
push
or
fwait
fwait
adc
cs
dec
mov
mov
push
jecxz
test
xchg
retf
mov
daa
fcomp
popf
jne
dec
mov
icebp
outs
scas
sub
xor
enter
mov
and
push
lds
frstor
sub
xor
push
addr16
pop
adc
push
es
add
sub
jno
fmul
inc
jmp
adc
push
mov
mov
ror
test
adc
mov
xchg
int
das
xchg
mov
push
inc
xor
mov
inc
cmp
dec
add
scas
inc
fimul
inc
mov
icebp
lods
cmp
inc
(bad)
jl
push
adc
pop
adc
fmul
ficom
push
add
and
int3
dec
inc
push
call
jo
(bad)
cmp
js
cmps
jnp
sbb
cmp
sub
cmp
lahf
cmp
pop
jle
and
sbb
and
loope
xchg
add
adc
xchg
push
add
int
(bad)
cmp
sub
pop
sub
xchg
sub
add
in
in
test
jle
pop
loopne
xchg
or
xlat
sbb
mov
pop
pop
rol
test
(bad)
sbb
inc
sub
or
adc
sbb
fcom
adc
out
test
dec
add
mov
lods
push
push
cmp
mov
mov
adc
sub
test
shl
ds
test
xchg
les
imul
repnz
or
add
sbb
aam
mov
enter
xor
(bad)
mov
mov
adc
jmp
jo
cmp
fisttp
dec
dec
adc
sar
inc
retf
ja
lods
cmp
sbb
mov
(bad)
mov
mov
adc
in
mov
add
into
shl
lds
out
retf
(bad)
hlt
push
addr16
dec
lahf
(bad)
in
es
aam
push
mov
imul
js
movs
mov
xor
hlt
pushf
call
icebp
fldenv
mov
fidiv
mov
mov
xlat
lea
sub
add
aam
mov
ins
lds
in
stos
and
mov
push
imul
shr
mov
xor
lock
aad
pop
xchg
jmp
out
movs
cmp
fwait
sti
rol
es
push
xchg
jmp
jo
das
idiv
sub
push
pop
sub
mov
adc
mov
not
sti
dec
xchg
jnp
mul
xchg
jnp
lea
sbb
outs
inc
sbb
mov
push
gs
inc
dec
jecxz
lods
arpl
fsubp
sub
pop
xchg
jbe
dec
mov
(bad)
mov
into
pop
data16
push
addr16
or
enter
ret
mov
sbb
dec
das
daa
xchg
sbb
mov
adc
cmps
pop
daa
mov
mov
std
add
push
psrad
repnz
mov
adc
cwde
outs
sub
imul
xor
jo
mov
or
imul
fs
jae
push
not
not
inc
mov
setg
pusha
not
inc
pushf
push
mov
mov
lea
call
call
pushf
call
in
push
call
je
es
add
push
sbb
dec
mov
push
and
ins
mov
aad
aas
dec
mov
(bad)
nop
jmp
pop
sbb
pushf
pop
xchg
mov
gs
xor
xchg
sub
cmp
ss
push
xor
dec
adc
mov
fcom
cdq
cmp
out
enter
dec
out
bound
sbb
xor
push
xchg
mov
retf
xchg
lods
cmp
mov
shr
sbb
mov
popa
js
jp
mov
add
jg
sub
rol
out
call
push
mov
inc
jbe
pushf
xchg
or
mov
repnz
mov
cwde
nop
sti
xor
out
retf
or
imul
(bad)
cs
jb
sbb
mov
jo
rol
arpl
inc
lods
repz
add
repz
shr
scas
dec
inc
aam
xchg
push
cmp
sbb
pop
jmp
loop
mov
loop
mov
inc
xlat
icebp
xor
push
std
add
add
inc
call
push
or
dec
and
and
repz
xchg
cmps
fnsave
scas
push
mov
mov
xor
cmps
pop
clc
cmp
call
dec
jle
cs
jl
shl
(bad)
shl
and
mov
inc
(bad)
mov
retf
hlt
sub
adc
jge
pop
icebp
cmps
pop
adc
dec
retf
adc
std
sbb
in
movs
imul
push
rol
js
lods
adc
icebp
sub
dec
sbb
aam
dec
push
sbb
fsubr
mov
jae
push
fstp
pop
rcr
hlt
push
fsub
bound
cs
xchg
shl
pop
or
cli
imul
pop
nop
and
or
ja
dec
nop
dec
jns
push
sub
push
sbb
jle
mov
gs
sub
cwde
jae
mov
call
inc
jbe
mov
(bad)
les
xor
lea
adc
mov
xor
mov
dec
push
outs
jns
in
pop
jle
nop
movs
jp
cmp
pop
xor
ret
push
stos
or
lods
adc
not
movsx
lea
bt
sub
mov
push
jmp
lock
pop
adc
sbb
sar
lahf
xchg
popa
xlat
or
pop
inc
cmp
adc
inc
sbb
retf
push
das
test
and
test
es
dec
xor
das
mov
dec
stos
cmp
int3
xchg
xbegin
or
cmp
mov
ds
mov
int
and
jg
xor
and
test
fidiv
outs
sbb
lods
loopne
inc
js
xchg
mov
jge
fcomp
fist
xchg
push
gs
(bad)
cli
push
cmc
mov
loop
jmp
cmp
add
clc
fwait
cwde
jno
add
pop
popa
clc
or
jo
push
adc
cdq
int
lock
jne
ret
dec
cmp
stc
xchg
or
enter
inc
adc
xor
or
popf
aam
stos
xor
das
dec
out
mov
mov
int
fs
lods
dec
adc
ficom
call
jle
and
iret
fsubr
mov
mov
jmp
jp
adc
fdivp
shr
call
mov
add
mov
add
popa
push
aad
add
xor
ret
pop
dec
push
push
inc
xchg
scas
xchg
stos
outs
test
in
ror
jbe
push
xchg
call
push
cwde
push
adc
js
out
xchg
(bad)
clc
out
enter
xor
dec
call
adc
aam
(bad)
cdq
or
ja
pop
jge
mov
or
ror
call
sahf
xchg
ds
add
enter
scas
imul
cmc
cmp
retf
int
add
sbb
pop
xchg
lahf
sti
sti
je
xor
pop
adc
lds
pop
pop
mov
call
xor
jnp
sub
test
cmps
cmp
ins
and
pop
in
(bad)
popf
jge
sbb
es
loop
adc
mov
or
or
inc
bound
mov
inc
fcom
push
popf
(bad)
jbe
hlt
outs
test
xor
dec
sar
(bad)
mov
fisub
retf
mov
loopne
std
in
mov
add
mov
push
dec
add
mov
pushf
in
mov
push
cld
sub
sbb
fdivr
dec
imul
mov
ss
adc
loop
pop
xor
icebp
sub
shl
in
inc
lods
add
stc
push
rcr
xchg
out
add
lods
movs
xor
jmp
adc
jae
nop
and
pop
push
push
mov
repz
push
adc
sbb
outs
cld
jb
ds
dec
mov
sub
adc
mov
aaa
cmps
in
dec
leave
dec
add
xor
mov
mov
dec
test
lods
arpl
jle
test
add
ds
dec
sti
stc
scas
push
push
xchg
gs
sub
out
mov
dec
jle
push
or
cmp
aas
xchg
mov
add
pusha
xchg
jecxz
sbb
pushf
jae
ins
std
jl
push
test
and
xchg
in
pop
popf
or
jo
scas
test
mov
push
hlt
jmp
dec
xor
out
add
hlt
(bad)
rcl
test
fucomp
lods
js
popa
mov
icebp
stos
and
fcom
aam
add
push
pushf
inc
cwde
aam
mov
clc
movsx
mov
cmc
jmp
or
xor
adc
js
pusha
sbb
fsubr
loope
and
retf
lock
outs
jecxz
adc
test
jbe
push
popf
push
or
adc
bound
xchg
jge
adc
fiadd
jbe
pop
or
rol
jp
sbb
hlt
iret
jns
mov
into
push
cmp
cmc
pop
shr
or
or
cs
fdivr
mov
cld
aam
fs
jo
xor
mov
stc
outs
sbb
or
retf
ret
or
fs
fisttp
cmps
xchg
stos
and
adc
shl
sub
pop
pop
ret
js
adc
mov
xlat
push
dec
leave
and
xor
out
cmps
cmps
pop
cmp
in
fs
in
sbb
dec
add
mov
repz
xchg
dec
inc
cmp
push
in
fist
fnstcw
pop
inc
mov
cmp
adc
pop
lea
cmp
pop
pop
xchg
scas
pop
jo
jbe
xrelease
lods
inc
mov
aad
and
je
daa
pusha
ss
xchg
dec
test
pop
pusha
cmp
std
dec
mov
adc
in
add
jmp
add
sub
xchg
or
int3
push
xlat
cld
hlt
mov
inc
(bad)
ja
jo
xor
(bad)
mov
push
xchg
xlat
call
and
xor
movs
fimul
stc
loope
inc
mov
arpl
push
jmp
(bad)
test
dec
imul
fadd
adc
xchg
test
sbb
sub
out
inc
add
(bad)
int
jne
movs
dec
mov
pushf
dec
shld
fadd
in
add
push
xchg
push
stos
dec
adc
dec
repz
into
cmp
or
int
(bad)
mov
push
jecxz
sub
jne
retf
jmp
jnp
sub
repz
push
adc
jp
loopne
add
mov
aam
and
cdq
ins
cmp
movs
inc
nop
cmovbe
loop
inc
dec
dec
add
mov
fistp
lock
mov
or
xchg
dec
adc
mov
jl
out
sahf
scas
cmc
rcl
pop
daa
sbb
and
dec
mov
push
mov
cmp
cdq
lea
xor
lock
pop
xchg
loop
xor
in
jecxz
dec
fdivr
movs
pushf
lods
shr
loopne
or
retf
int
pop
loop
pop
pop
ss
push
fbstp
outs
jmp
loopne
shl
cdq
scas
test
or
popf
movs
pop
pop
add
ret
sub
pop
mov
jns
out
aaa
push
adc
adc
es
cld
mov
xchg
pop
sbb
push
imul
imul
mov
add
add
adc
inc
push
lock
int3
add
pop
push
neg
out
les
jbe
inc
mov
fcom
or
and
jb
in
inc
(bad)
add
sbb
cmp
push
push
mov
xchg
(bad)
pusha
add
push
icebp
es
scas
ds
inc
cmp
fs
push
pop
into
add
xchg
xor
mov
xchg
dec
and
dec
cmp
scas
or
test
push
mov
ss
arpl
adc
mov
pushf
mov
pusha
lea
jmp
pushf
lea
je
cmc
push
test
stc
sub
pushf
cmp
pushf
push
lea
ja
pushf
imul
mov
bt
add
mov
mov
pushf
pusha
lea
jmp
sub
and
btc
lea
jmp
inc
mov
push
mov
sbb
es
das
inc
pop
pop
cmc
sub
push
push
jp
sti
rep
lahf
mov
aam
repz
xchg
loope
mov
std
push
mov
mov
repnz
xor
or
lahf
(bad)
xchg
xchg
or
(bad)
jbe
sub
scas
push
pop
jb
push
cwde
shl
inc
fwait
mov
add
inc
or
sub
iret
jp
pop
ror
mov
retf
aas
arpl
xor
jb
es
adc
push
les
sub
out
lds
movs
sub
jecxz
int
cs
xchg
int
mov
pushf
mov
lea
jae
cmc
cmc
pushf
add
mov
mov
pusha
push
lea
jmp
inc
not
mov
call
lea
jne
or
shl
mov
stc
cmp
bt
clc
cmp
pusha
push
jmp
pushf
xchg
and
adc
dec
jo
push
lea
sbb
dec
mov
xchg
dec
adc
push
push
mov
pop
shl
(bad)
sbb
sub
xchg
ds
in
outs
jecxz
jb
fdiv
sub
jns
cmp
ins
popa
xchg
mov
cmp
icebp
pushf
mov
test
lds
and
or
cld
sbb
push
imul
aad
and
ds
daa
pop
shl
ins
ins
cmps
dec
add
mov
add
iret
into
push
(bad)
or
jb
movs
pushf
hlt
push
imul
lds
inc
sub
std
ror
pop
call
popf
sub
push
dec
adc
rol
pop
push
das
call
sbb
into
add
sub
imul
imul
sbb
xor
and
cmp
mov
int3
jne
movs
mov
imul
repnz
sub
stos
repnz
cwde
rep
lahf
cmp
les
clc
add
or
or
mov
jle
jecxz
into
mov
retf
mov
ja
mov
out
stos
pop
imul
mov
xchg
and
pop
pop
aam
(bad)
mov
lods
rcr
pusha
cmp
aad
mov
stos
test
pop
les
push
movs
movs
fadd
pop
enter
shr
clc
lea
xchg
mov
jmp
dec
ret
dec
adc
shl
shl
cwde
int
xor
pushf
aam
xor
imul
sub
mov
pop
repz
fcmovnbe
les
std
pop
inc
mul
and
jle
clc
inc
sbb
retf
(bad)
stc
adc
fdiv
mov
inc
inc
cmp
sbb
xlat
clc
push
pop
adc
jecxz
test
popa
sbb
pop
cld
icebp
jno
cmp
ja
sub
or
lods
(bad)
jno
pop
push
test
repz
iret
push
cmps
pop
push
out
stos
movs
and
cli
pop
cmp
mov
and
cmp
ins
add
mov
inc
dec
pop
and
mov
mov
(bad)
stc
xor
clc
call
leave
inc
adc
stos
xor
shl
repz
jns
in
jp
dec
aam
push
push
mov
or
repz
data16
xchg
ret
cmp
push
and
xor
adc
add
push
dec
(bad)
pextrw
(bad)
es
adc
dec
cmp
mov
scas
loope
fidiv
ins
imul
ins
jae
cmp
icebp
cmps
cmps
sbb
mov
nop
push
iret
adc
gs
cmp
xor
cmp
mov
cmp
inc
sbb
enter
(bad)
(bad)
jns
and
mov
ror
mov
and
pop
repz
pushf
rcr
nop
sub
push
add
les
pop
loopne
lods
inc
inc
or
mov
or
pop
jno
dec
adc
fnstenv
dec
and
xor
add
mov
mov
mov
and
imul
jle
push
jmp
test
jge
mov
sub
mov
add
cmp
call
ja
sbb
jne
dec
lds
scas
push
or
pop
mov
mov
dec
or
jecxz
cmp
ja
sbb
mov
cld
xor
stos
outs
push
jg
in
lahf
inc
retf
ret
mov
cmc
in
rcl
push
mov
jmp
gs
and
cmc
mov
sub
aad
aam
frstor
out
int3
enter
test
enter
bsf
jmp
adc
adc
adc
fwait
xchg
or
inc
iret
xchg
repz
jl
jno
ficom
jecxz
xchg
push
jbe
add
xchg
stos
aaa
out
loop
xchg
int
xchg
or
sub
(bad)
std
jge
ins
mov
mov
pop
lock
fs
(bad)
push
mov
into
test
pop
fst
mov
dec
in
fs
fist
outs
dec
add
sbb
mov
jmp
rol
jmp
fidiv
or
sub
xchg
loopne
mov
add
sahf
jne
fisttp
xchg
cli
repz
mov
jmp
pusha
xchg
(bad)
dec
adc
dec
inc
jg
test
add
mov
pop
xchg
xor
jle
sti
outs
clc
int3
cdq
mov
mov
jmp
mov
jle
mov
scas
sub
cmp
or
fbstp
aas
mov
cmp
push
xor
push
idiv
xchg
push
xor
pusha
jmp
sbb
std
push
cmps
loop
or
jmp
and
add
jge
xor
fs
jnp
pop
fs
mov
or
call
mov
xchg
pop
mov
jmp
add
bt
cmp
call
sub
jmp
inc
jne
cmovp
xchg
nop
or
xchg
in
mov
movs
(bad)
sbb
ins
loope
dec
cmps
lahf
mov
jno
icebp
(bad)
call
push
dec
jmp
push
lods
in
and
dec
stos
inc
push
call
leave
push
inc
and
cdq
mov
mov
mov
(bad)
int3
push
mov
out
mov
cmps
(bad)
sub
pushf
push
adc
mov
nop
aad
retf
ds
fidivr
jmp
mov
jl
push
lods
inc
mov
xor
xlat
fimul
jl
xor
mov
dec
pop
cmps
jle
int
inc
loope
xchg
pop
jnp
or
inc
xchg
add
jle
mov
push
cmp
push
fist
loope
mov
fidiv
dec
pop
iret
xchg
sbb
inc
(bad)
(bad)
pop
hlt
std
test
cwde
iret
dec
(bad)
cli
xchg
leave
rcl
rcl
sbb
ror
pop
mov
rcr
enter
mov
or
cmp
out
push
push
call
cli
xor
xchg
in
aas
test
ss
cmps
mov
hlt
(bad)
dec
mov
or
jle
dec
jle
mov
ins
bswap
(bad)
addr16
rol
je
aam
clc
in
fiadd
mov
mov
jp
ror
jg
popa
std
(bad)
int
popa
cdq
jmp
push
cmp
add
outs
mov
add
cli
cli
xor
jbe
add
adc
push
in
loope
aam
pop
push
es
inc
sti
iret
push
outs
out
fcom
mov
cwde
mov
int3
xor
sbb
call
lods
pop
es
push
outs
out
(bad)
jo
cmp
(bad)
dec
jle
outs
mov
outs
add
sbb
cli
xor
stos
sbb
xchg
call
cmp
add
pop
xchg
retf
scas
les
inc
xchg
jae
pop
add
popa
in
enter
pop
xchg
xor
mov
or
cwde
scas
sub
ret
push
(bad)
int
jmp
pop
popf
push
xchg
mov
pop
push
stos
push
push
stos
xor
push
(bad)
push
adc
jg
adc
lods
ins
inc
mov
xor
ror
adc
push
ror
in
add
mov
fld
ds
push
sahf
sub
stc
cmp
xchg
push
inc
dec
sbb
sub
mov
das
out
sbb
adc
mov
popf
mov
or
int
mov
mov
mov
test
fchs
pushf
repz
lods
push
aad
dec
and
hlt
test
aam
fsub
cmp
xchg
inc
ret
popa
cwde
adc
dec
sbb
jns
push
or
fsubr
inc
test
cmps
jmp
mov
jmp
mov
adc
in
pop
inc
movs
fwait
push
push
(bad)
push
sub
cmp
stos
or
int
push
or
mov
jbe
push
or
stos
mov
cmps
sbb
(bad)
fist
add
fiadd
pop
pushf
xor
aaa
scas
loope
dec
ins
mov
mov
stc
sub
inc
mov
imul
and
mov
mov
pop
paddq
lock
add
sub
fs
mov
mov
in
xor
jns
sbb
dec
scas
mov
dec
pop
lea
mov
jl
push
mul
sahf
jle
rcr
sbb
inc
and
push
lea
ja
pusha
inc
pusha
inc
jmp
and
rcl
inc
adc
push
mov
aaa
pop
push
push
push
xor
fnstcw
mov
and
push
fstp
sti
xor
(bad)
jle
sbb
or
xchg
cmp
cmc
xchg
lea
xchg
sub
das
push
sub
sub
add
(bad)
jmp
pop
inc
(bad)
lgs
pop
adc
out
test
adc
fistp
aam
std
hlt
stos
dec
dec
sub
ror
adc
out
fldenv
cli
add
mov
sub
xor
mov
rcr
mov
and
fst
lds
mov
mov
js
sahf
jns
inc
inc
xor
rcl
or
mov
fadd
data16
jmp
mov
xor
jae
xchg
sahf
or
enter
xor
call
gs
jne
pop
daa
int3
(bad)
push
or
stos
mov
inc
pop
test
xor
(bad)
jmp
jne
xor
add
or
lds
data16
dec
inc
xchg
adc
scas
jl
jge
cmp
je
sti
ins
fldenv
sbb
gs
cli
repz
repnz
mov
outs
cmps
adc
pop
jp
sub
push
rol
xor
mov
inc
(bad)
inc
sub
xor
aam
div
call
lods
adc
cmp
cmps
pop
xchg
inc
mov
xchg
div
loope
clc
sub
sahf
rol
mov
in
in
sub
out
test
adc
push
push
stos
mov
mul
fbstp
fisttp
mov
(bad)
xchg
dec
push
pop
dec
in
xor
inc
inc
inc
jbe
pushf
push
dec
cli
adc
sbb
mov
scas
inc
rcl
out
add
jge
outs
pop
std
push
mov
and
rcl
fst
xor
fcmovb
mov
jmp
xor
push
pop
xor
adc
inc
cld
stc
dec
push
pusha
in
push
mov
movs
lea
jbe
sub
js
inc
pop
sti
mov
cmps
movs
inc
cmp
fmul
int3
add
jbe
add
push
stos
mov
xor
ficom
adc
mov
imul
dec
mov
cmp
add
popf
fcom
xor
push
mov
jbe
out
cld
(bad)
push
leave
push
adc
pop
push
sbb
xchg
jecxz
addr16
add
push
adc
gs
mov
pop
iret
in
je
push
or
add
fiadd
push
add
fwait
shl
jmp
inc
cmp
in
or
dec
cs
xor
ins
add
fsub
xchg
push
dec
loopne
mov
push
and
outs
pop
pop
adc
ins
cmp
xchg
scas
pop
lods
mov
push
cmps
imul
pop
int3
and
jecxz
mov
iret
push
pop
xchg
mov
jmp
mov
movs
cmps
sbb
add
xor
xor
mov
sar
leave
rcl
push
mov
std
xor
jmp
xchg
ror
adc
outs
mov
sub
psadbw
repz
popa
fs
imul
add
(bad)
or
sbb
pop
out
test
jle
add
mov
mov
and
adc
aaa
mov
mov
in
(bad)
mov
sahf
push
push
cdq
rcl
mov
div
xchg
push
or
mov
dec
push
sbb
jbe
pop
shl
push
and
rol
fnstcw
fcom
mov
ins
and
jl
mov
popa
enter
or
shl
mov
out
sub
xor
test
out
cmps
popf
hlt
xor
fbld
inc
adc
addr16
mov
popf
xchg
xchg
pop
dec
rcl
push
cmp
hlt
jmp
(bad)
cli
push
cmp
push
jge
mov
into
adc
jmp
adc
in
cwde
xor
pop
jg
rep
jg
mov
popa
mov
pop
(bad)
xor
pop
nop
adc
ror
retf
and
clc
and
sub
inc
xchg
push
into
add
push
sar
int3
and
adc
xchg
mov
fcmovb
mov
out
add
push
cmc
jmp
add
pop
ins
scas
add
mov
jns
call
loope
push
leave
out
push
cmp
mov
inc
sbb
int
shl
es
jmp
pushf
mov
push
ret
in
add
add
leave
std
ret
(bad)
iret
cmp
push
mov
pusha
fmul
ret
into
arpl
jnp
cmp
add
shl
cmp
xchg
mov
in
jbe
and
fs
test
sub
or
outs
cwde
xor
sub
adc
aam
cmps
xchg
sub
out
popf
ja
pop
repnz
push
jecxz
xor
dec
mov
add
ds
sub
je
add
nop
xor
imul
es
mov
adc
mov
call
mov
lds
daa
into
mov
bsf
shl
shr
clc
btr
pushf
mov
add
btc
add
jmp
scas
gs
xchg
adc
inc
cmp
bound
xor
xor
dec
pop
or
or
sub
scas
mov
dec
mov
aaa
add
mov
dec
and
mov
jns
cmp
xchg
push
ror
push
mov
leave
call
xor
int3
arpl
push
push
mov
xchg
push
int
retf
jg
adc
sub
add
xor
add
xchg
adc
and
ss
(bad)
pop
jnp
ror
gs
jmp
push
call
setle
push
call
mov
addr16
adc
dec
repz
jle
(bad)
imul
mov
xchg
mov
aad
jb
les
addr16
fist
push
xchg
jmp
je
sub
jb
xor
mov
sub
xor
mov
hlt
fstp
mov
retf
aad
jo
xchg
sbb
pop
push
or
xchg
sub
lahf
cmp
sar
mov
es
clc
xchg
xchg
xchg
or
mov
loopne
icebp
sbb
in
out
xor
and
mov
adc
test
call
adc
aas
adc
adc
jle
cmp
sbb
inc
ds
push
mov
test
aaa
jne
ins
fxam
data16
iret
mov
(bad)
fist
pop
xchg
test
dec
push
loop
data16
cmc
cld
mov
xchg
push
das
scas
clc
xor
sub
and
repnz
lea
sbb
and
xor
push
pop
stc
add
enter
inc
inc
mov
push
jl
jb
adc
mov
sub
mov
rol
cmp
pop
addr16
mov
dec
and
inc
sub
mov
gs
mov
jmp
mov
push
add
(bad)
arpl
add
scas
cwde
jl
lock
adc
loop
ins
fst
inc
aaa
adc
ret
out
and
test
jmp
and
pop
adc
(bad)
xchg
push
inc
call
cmp
pop
stc
out
gs
cwde
jmp
ins
ins
and
not
or
mov
fist
jecxz
fcom
mov
les
call
xchg
and
sti
ret
or
sahf
mov
adc
mov
cmp
cld
push
je
pop
xchg
scas
loopne
xchg
call
xchg
inc
and
sbb
stos
jb
loope
ret
cmp
pushf
lea
jne
shl
not
bsf
mov
or
btc
neg
sub
jmp
sbb
adc
mov
cmc
lods
mov
xchg
dec
inc
mov
fidiv
ins
scas
cmps
popa
pop
or
push
and
ror
push
dec
and
shl
adc
and
pop
out
ds
sub
movups
cdq
mov
lods
adc
or
cmp
adc
push
push
iret
popf
mov
push
xchg
neg
(bad)
js
add
fwait
mov
pop
mov
xor
or
jnp
mov
cli
aad
pop
push
sti
xor
cmc
pop
aad
adc
cs
push
dec
add
add
lds
hlt
jmp
cmps
mov
shl
lods
das
data16
repnz
inc
rcl
cmp
push
int3
int3
add
in
pop
push
and
jae
inc
jnp
xor
shr
fs
mov
shl
pusha
inc
mov
mov
push
cmp
int3
ja
hlt
or
(bad)
lea
pop
adc
stos
jecxz
pop
ins
rol
and
or
jge
add
test
mov
fist
mov
test
fcom
push
sub
repz
outs
retf
nop
enter
jg
xor
or
push
jns
xor
cmp
rcl
movs
add
aam
cdq
lea
inc
aam
pop
fcomp
jg
imul
adc
out
pop
push
and
or
pop
ficom
mov
pop
adc
repnz
out
jecxz
cmp
and
imul
dec
dec
repnz
imul
push
retf
adc
(bad)
stos
mov
and
mov
stos
sub
jnp
push
mov
mov
push
pop
sub
cdq
call
push
je
push
clc
adc
dec
mov
outs
add
ret
xchg
mov
mov
inc
adc
xchg
in
and
mov
dec
inc
shr
mov
and
ret
or
sub
pop
pop
xchg
lds
add
adc
mov
out
mov
mov
xchg
loopne
nop
inc
sti
xchg
dec
jo
dec
rol
ins
dec
push
push
xchg
dec
cmps
push
jmp
pop
push
xchg
popf
jge
dec
push
in
pop
pop
or
retf
inc
cwde
pop
pop
sbb
repnz
jns
outs
mov
xchg
int3
popa
imul
imul
test
retf
pop
(bad)
pop
add
pushf
hlt
add
es
adc
mov
jbe
into
test
add
imul
mov
repz
ror
xor
pop
pop
xor
dec
js
je
xor
sbb
(bad)
call
ret
pop
mov
sbb
mov
ds
lods
add
and
or
adc
ins
pop
xor
inc
inc
jp
xchg
push
sub
daa
gs
add
jae
or
mov
xor
mov
adc
adc
gs
mov
mov
pop
(bad)
add
cmp
pushf
adc
aas
mov
xor
in
adc
cli
pushf
adc
cdq
int
add
or
push
popa
pop
cdq
cmp
pop
icebp
jae
stos
lock
dec
jbe
and
mov
sahf
movq
(bad)
xchg
cmp
dec
cli
push
mov
cmp
out
call
mov
addr16
imul
sbb
aaa
mov
repnz
adc
lea
jne
setno
sete
cwde
mov
cwde
movzx
pushf
mov
setbe
lea
pushf
mov
mov
pusha
jmp
mov
adc
jmp
mov
imul
mov
mov
pop
int
and
aad
add
dec
fwait
popf
adc
sub
push
mov
clc
jmp
imul
mov
xchg
sub
repz
in
push
or
cmp
aaa
mov
mov
or
xor
mov
call
and
pop
jg
pushf
ja
jns
pop
jmp
movs
inc
mov
dec
lock
mov
and
adc
push
int
and
in
jecxz
jg
repnz
pop
(bad)
ds
mov
mov
pop
and
jmp
aad
bound
fucomip
and
mov
dec
add
ret
jp
cld
(bad)
push
jle
push
in
loopne
xor
xor
rcr
sub
cli
loop
nop
pop
inc
xchg
or
lock
mov
mov
push
push
mov
mov
nop
push
mov
xlat
gs
xchg
ins
jae
jmp
xchg
popf
arpl
pop
inc
std
xchg
outs
sub
inc
mov
pop
mov
fldcw
lods
in
cwde
fcom
(bad)
xadd
scas
test
push
cmp
out
imul
test
or
stos
test
or
add
ins
scas
inc
dec
inc
push
ins
mov
test
jb
jmp
xor
push
sub
daa
sub
(bad)
imul
and
loop
inc
rcl
add
add
add
sbb
add
add
mov
sbb
add
add
sbb
out
add
cmps
sbb
add
add
neg
add
add
add
add
add
sbb
add
add
or
add
or
sbb
bound
sbb
xchg
dec
pop
add
sti
sbb
add
add
push
cmp
and
pop
call
jecxz
lock
jl
xchg
push
aas
fcomp
bound
pushf
cmc
mov
call
imul
xor
pop
sbb
jbe
movs
repnz
xchg
addr16
js
jns
sub
aam
sti
adc
retf
or
pusha
sbb
jmp
mov
test
cmp
cdq
jp
sub
outs
inc
test
and
cmps
and
cmp
xor
retf
mov
out
std
jmp
sub
xchg
leave
cmps
repnz
push
retf
dec
les
adc
pop
je
jg
and
out
js
mov
mov
mov
mov
add
in
sub
sahf
sbb
inc
dec
fs
push
enter
test
xchg
and
dec
retf
pushf
repz
in
iret
(bad)
cmp
push
outs
sub
xor
jg
(bad)
xchg
push
jp
dec
and
push
or
int3
into
inc
mov
pop
sub
jnp
lods
push
mov
loope
add
ins
and
mov
jp
xchg
sbb
ins
(bad)
icebp
lods
fst
dec
mov
sbb
push
inc
shr
push
ins
cmp
add
fdiv
jbe
jmp
jmp
mov
pop
cmovnp
xlat
ficomp
sbb
inc
push
add
popf
or
mov
mov
in
nop
sub
ds
jl
test
data16
inc
and
cmps
rol
cwde
mov
dec
scas
jbe
(bad)
fcom
xchg
cld
add
lahf
mov
enter
sbb
push
xchg
fadd
sbb
fidiv
dec
xor
(bad)
call
xchg
int
sub
mov
mov
out
hlt
jnp
and
daa
repz
lods
push
(bad)
test
lds
and
push
ss
out
scas
stos
(bad)
fimul
scas
cmp
rcl
hlt
fs
js
and
stos
jg
push
adc
loop
cmp
xchg
mov
cmp
cs
mov
mov
xchg
sub
sub
or
cmc
xor
dec
mov
fisub
xchg
jbe
popa
mov
ds
inc
mov
in
sub
icebp
pop
inc
jl
sbb
jmp
xchg
int
xchg
and
adc
js
div
sahf
imul
push
adc
je
xchg
add
push
xchg
ret
aam
push
mov
(bad)
mov
push
sbb
sbb
mov
push
loop
push
jo
stc
ja
sub
cmp
in
mov
ret
dec
dec
ja
int
push
outs
push
sub
xor
out
mov
repz
mov
sbb
hlt
cmp
mov
pop
and
into
sbb
aam
les
sub
sbb
push
jg
cmp
imul
lahf
fsub
in
retf
cli
push
sub
je
and
ror
mov
loop
or
add
movs
loop
(bad)
rcr
cld
ret
lods
cmp
popf
and
sub
cmp
dec
into
in
cmp
mov
xor
cmp
push
pushf
mov
inc
arpl
inc
jb
fcomi
ds
xchg
fbld
(bad)
(bad)
dec
push
xchg
sbb
add
xchg
push
scas
loop
or
movd
or
mov
xor
lea
jle
cs
cmps
loopne
mov
sub
jp
xor
data16
mov
fild
dec
and
(bad)
fild
imul
rol
push
repz
test
les
imul
jmp
pushf
jb
dec
popf
out
sbb
repz
cld
inc
sbb
call
rol
stos
pop
inc
call
das
dec
ror
(bad)
movs
cmps
mov
hlt
scas
cli
mov
jg
lds
and
mov
mov
imul
xchg
adc
outs
pop
cli
retf
aaa
cdq
lods
adc
sahf
addr16
repz
jl
fimul
ins
test
mov
hlt
sub
mov
cmps
inc
in
mov
scas
loopne
int
rol
js
push
mov
mov
mov
and
stos
movs
push
mov
jbe
jno
neg
mov
daa
lahf
push
(bad)
mov
(bad)
ins
cmp
and
xchg
ror
jb
push
fucom
icebp
lea
mov
jno
push
adc
xor
ja
mov
mov
lds
into
mov
js
xchg
(bad)
test
mov
lods
xchg
int
in
dec
aam
jecxz
xchg
pusha
sbb
jge
outs
jbe
xchg
pop
out
repnz
(bad)
xor
mov
outs
xchg
lock
sahf
scas
inc
in
pop
xchg
icebp
xchg
dec
fstp
dec
mov
mov
fidiv
dec
push
xchg
and
jns
popf
jecxz
jmp
inc
or
cmps
cmp
lods
rol
imul
aaa
or
mov
ja
test
dec
cmp
and
inc
pop
pop
clc
scas
push
inc
add
or
lods
in
or
jbe
or
out
push
shl
sbb
in
add
cdq
inc
aam
adc
xchg
or
jecxz
hlt
and
sub
ins
enter
sbb
iret
mov
pop
jecxz
mov
xchg
or
xor
inc
push
movs
inc
cdq
cwde
and
call
and
pop
les
cmp
mov
nop
imul
add
sub
out
push
and
into
jo
cmp
addr16
adc
sbb
jb
xchg
push
pop
mov
cmp
mov
or
pop
jae
pop
fmul
lds
out
mov
lea
ss
(bad)
mov
lea
test
cmp
arpl
mov
push
xor
inc
inc
shl
pop
outs
mov
xlat
push
loopne
or
(bad)
les
mov
(bad)
icebp
mov
pop
dec
sub
mov
and
shr
inc
mov
adc
or
cmps
jbe
mov
imul
ret
adc
lea
sahf
iret
mov
ror
ins
sbb
ds
xchg
iret
ja
mov
in
(bad)
xor
mov
pop
adc
nop
sahf
pop
adc
fidivr
scas
jl
neg
shl
dec
push
lds
mov
mov
inc
pop
mov
(bad)
mov
addr16
or
add
sbb
dec
inc
(bad)
and
fstp
xchg
cmp
and
mov
aas
xor
xlat
inc
jle
out
xchg
cmps
aam
pop
cmps
psllw
dec
mov
add
mov
xchg
pushf
out
(bad)
fwait
outs
retf
mov
in
fcomp
mov
cs
in
(bad)
pop
push
xor
gs
adc
fisub
je
push
jno
lods
push
cld
pop
(bad)
inc
loope
dec
ficom
dec
sbb
xor
mov
pop
inc
xor
std
call
test
fstp
aad
popa
mov
sbb
cld
ja
pushf
repz
mov
add
add
cmp
mul
mov
add
ds
adc
jecxz
mov
nop
mov
push
int
push
add
cs
mov
retf
jmp
scas
push
and
(bad)
(bad)
cmp
sub
xor
add
das
das
movs
pop
inc
jne
push
cmp
mov
add
or
mov
push
cs
mov
mov
mov
repnz
rcl
leave
lods
adc
mov
pushf
out
stc
ss
push
jmp
sbb
or
rcr
aam
cmp
dec
out
mov
outs
jl
xor
data16
call
aas
mov
sub
xchg
call
push
push
pop
aam
push
sub
inc
push
movs
sbb
sub
icebp
stc
adc
adc
jmp
mov
stc
xchg
xchg
lods
popa
rol
stos
retf
mov
xchg
xchg
pop
ss
dec
std
mov
mov
xor
fbld
or
div
out
aad
js
das
xchg
inc
dec
ror
push
cmc
ret
xchg
inc
mov
xchg
popa
ret
and
mov
outs
adc
mov
test
dec
lock
mov
and
test
or
cmovo
push
xchg
mov
xchg
pop
lods
or
popf
mov
sbb
xchg
push
push
xchg
cmps
popa
dec
sar
sbb
jno
mov
mov
test
xor
pop
out
shl
adc
repz
hlt
gs
popa
add
call
inc
mov
sbb
fadd
mov
mul
popa
and
aas
ret
outs
cwd
or
inc
stos
ins
xor
push
popa
js
jmp
aaa
push
das
and
data16
sub
or
push
jae
sub
aas
ret
imul
hlt
dec
jp
(bad)
adc
(bad)
(bad)
lea
scas
mov
mov
dec
inc
test
mov
popa
add
inc
lods
repnz
dec
enter
push
iret
cdq
jnp
leave
jae
xlat
push
out
pop
jnp
clc
dec
inc
pop
nop
sbb
cmp
in
jb
xor
into
dec
dec
inc
mov
jbe
cmp
sub
repz
pop
sub
push
xor
lds
push
jle
mov
imul
jb
aad
and
xor
push
dec
(bad)
scas
test
and
jecxz
aas
xor
mov
popf
adc
lea
es
and
xor
mov
icebp
cli
inc
mov
xor
xchg
dec
aaa
adc
or
sbb
pushf
sbb
movs
adc
clc
div
pop
mov
cld
bound
sbb
gs
lea
pop
xchg
mov
addr16
xor
stos
scas
dec
and
mov
cmp
mov
adc
xchg
inc
dec
mov
mov
pop
push
das
add
dec
inc
and
or
fwait
out
std
in
pop
cwde
pop
popf
pushf
stos
out
jg
jp
inc
ja
xchg
lahf
dec
inc
add
inc
or
jns
js
sbb
dec
bnd
cli
xchg
pop
test
in
push
adc
in
cli
data16
xor
test
enter
test
nop
ret
ds
ficomp
add
imul
sbb
sbb
outs
test
xor
pop
cs
cld
pop
fiadd
mov
fstp
sub
out
stc
cmp
lods
imul
aaa
rol
xchg
(bad)
(bad)
loop
xor
pusha
mov
adc
add
sub
inc
pop
mov
pop
mov
pop
sub
inc
ins
mov
shr
inc
dec
les
arpl
pop
xchg
in
jecxz
dec
xchg
scas
stos
fwait
sahf
aaa
push
mov
mov
aam
jmp
mov
cmp
push
or
adc
retf
je
sbb
sar
je
push
sub
xor
push
sbb
inc
xor
dec
fstp
push
mov
mov
fisub
sbb
xchg
push
gs
inc
jmp
mov
pop
sbb
push
stos
push
das
lahf
dec
iret
jmp
mov
(bad)
mov
xchg
inc
mov
lock
dec
sub
inc
cmps
fsubr
das
jmp
lods
cs
dec
out
sbb
mov
cmc
jno
(bad)
and
jbe
mov
loopne
in
hlt
cld
xchg
shl
fmul
movs
iret
pop
fadd
xor
test
dec
add
fnstsw
popf
scas
call
and
int3
lds
iret
pusha
inc
pop
dec
fwait
ins
xchg
movaps
test
xchg
popa
and
ja
and
jno
(bad)
jo
mov
mov
lods
hlt
out
cli
test
xor
mov
fdiv
cmps
xchg
dec
popf
stos
adc
jne
pop
nop
cmp
xor
dec
dec
cmp
or
adc
out
mov
xchg
push
neg
call
and
lahf
cmp
cmps
adc
pop
(bad)
in
test
xchg
sub
cmp
les
lods
cmp
movs
out
pop
adc
rol
dec
adc
ins
dec
iret
inc
int3
stc
add
cmp
sub
xlat
dec
pushf
jecxz
cmps
and
loopne
nop
cmp
cld
push
and
aad
inc
mov
dec
jge
fnstsw
je
xchg
icebp
ficom
xlat
sbb
push
cld
mov
outs
jp
stc
dec
call
sbb
and
fdivr
fistp
mov
dec
mov
add
(bad)
jp
stos
aad
ins
scas
push
inc
xor
pop
add
adc
mov
imul
(bad)
sbb
idiv
dec
scas
pop
loop
lods
in
adc
test
xor
in
xor
add
in
(bad)
mov
std
bound
aas
cmc
aad
out
add
push
ss
repnz
outs
clc
dec
push
std
ins
out
sub
mov
pop
icebp
lds
pop
std
clc
dec
sub
(bad)
movs
add
push
int3
jno
mov
outs
adc
xchg
adc
div
add
test
inc
xchg
outs
dec
xchg
sbb
jmp
test
int3
push
xor
loopne
(bad)
cmp
fdiv
cmp
fist
scas
out
mov
call
ds
mov
adc
adc
sbb
mov
call
lds
and
out
movs
xlat
inc
pop
jae
mov
mov
test
add
aam
dec
jmp
fwait
or
data16
cwde
fmul
shl
sub
xor
sbb
mov
mov
inc
movs
sub
fldcw
push
(bad)
push
xchg
es
sar
add
mov
ret
movs
shr
mov
sbb
(bad)
loop
jl
sbb
pop
xchg
test
inc
xchg
or
xchg
pop
mov
int3
call
inc
push
inc
push
jl
jo
dec
test
daa
mov
sahf
adc
pop
pop
adc
mov
in
lods
push
(bad)
lea
ja
sub
jp
shr
mov
push
ret
and
daa
pop
jle
fild
dec
mov
in
cmp
pop
xor
pusha
mov
mov
mov
test
cmps
jb
adc
add
mov
add
adc
mov
jo
sbb
adc
out
leave
stos
mov
and
pop
xor
pushf
inc
adc
sub
mov
sub
lock
xchg
stos
movs
movs
fidivr
jb
inc
jecxz
dec
or
and
pushf
cmp
inc
inc
inc
js
mov
ss
or
in
imul
test
xchg
push
repz
xor
sub
or
and
push
stc
nop
sub
call
sbb
adc
mov
neg
cs
shl
push
dec
daa
pop
in
xlat
jo
and
mov
cmps
fidivr
ja
inc
stc
mov
and
mov
aam
or
retf
mov
fimul
push
mov
shl
ins
outs
cmps
and
loop
jns
push
xor
bound
or
push
xchg
mov
jl
push
and
cmc
sub
(bad)
inc
sbb
pop
icebp
das
add
add
fidivr
inc
pop
add
pop
fst
add
mov
das
pop
out
xchg
bound
gs
or
mov
mov
mov
and
dec
(bad)
pop
push
add
adc
test
xchg
jmp
out
mov
push
cmp
call
cmp
cmp
inc
(bad)
cmps
pop
add
sub
loope
in
push
out
lods
movs
dec
hlt
cld
fcom
and
pop
adc
stos
out
xchg
dec
je
shl
in
aam
ja
push
sar
call
jns
add
outs
jne
call
mov
imul
mov
int3
popa
jns
inc
mov
jmp
push
push
retf
pop
out
hlt
stos
je
in
movs
mov
dec
sbb
mov
push
mov
mov
shr
adc
mov
lahf
add
sbb
inc
cld
jge
mov
(bad)
xchg
sahf
mov
jmp
(bad)
in
mov
adc
push
xchg
push
or
xor
push
pop
xchg
xor
jo
outs
loop
fiadd
fnsave
push
ins
call
loop
or
jae
push
pusha
push
add
jnp
cmp
sbb
(bad)
pop
aad
pop
aad
push
jp
mov
xchg
leave
xor
pop
pop
(bad)
pop
pop
xchg
and
sbb
xchg
dec
movs
test
mov
xor
mov
out
xchg
lahf
cmps
add
add
xchg
sub
jno
sub
pop
inc
mov
and
jge
mov
and
ins
arpl
je
and
mov
outs
(bad)
dec
shl
mov
pusha
lods
pushf
push
not
pushf
dec
cmp
xor
cmc
bt
jmp
cmp
jnp
adc
inc
(bad)
sub
(bad)
test
and
xor
or
mov
rol
call
fwait
mov
mov
jge
mov
mov
push
or
ror
loop
cwde
call
jmp
aas
std
mov
add
and
cli
shr
xor
cmp
and
cmc
push
mov
pop
or
inc
dec
(bad)
push
das
mov
xchg
and
in
mov
in
push
adc
fnstsw
sub
jb
pop
daa
ffree
js
pusha
lea
ja
pushf
not
mov
lea
pusha
mov
bswap
pop
setae
pop
mov
not
bswap
mov
pushf
jmp
call
push
adc
call
mov
es
lock
les
xchg
leave
nop
pop
cmp
(bad)
push
mov
cmp
or
or
imul
test
call
loopne
cmp
or
scas
sub
xor
out
and
jo
loop
cmp
push
dec
ret
mov
sub
das
add
js
scas
dec
out
cmp
adc
jmp
cvtpi2ps
jns
cmps
pop
mov
icebp
sub
cmp
xchg
mov
inc
inc
sbb
push
stos
in
(bad)
lods
in
push
xchg
push
imul
or
ins
jne
xor
or
fist
cld
xor
or
in
loopne
outs
sar
mov
shl
(bad)
(bad)
fldenv
lahf
ret
pop
push
out
(bad)
and
xor
test
ja
outs
xor
sub
pop
xor
ss
mov
jle
(bad)
mov
movs
mov
adc
das
das
ror
out
movs
jns
into
outs
movs
and
jle
inc
xor
leave
push
xor
fst
test
push
mov
arpl
(bad)
push
cmps
jmp
stos
mov
xchg
or
jbe
stos
jae
std
rcr
in
inc
mov
adc
loopne
inc
test
cmp
fwait
ror
stc
icebp
mov
jbe
shr
out
(bad)
cmps
pop
les
loopne
das
xor
shr
lds
lods
ret
dec
add
jns
mov
push
dec
adc
out
out
and
(bad)
ins
mov
rcr
mov
mov
push
lods
push
adc
pop
fcom
inc
(bad)
or
sub
cld
out
cmp
lock
js
fs
add
pop
iret
jo
mov
in
nop
pop
scas
imul
dec
call
pop
in
(bad)
movs
cmp
std
xchg
cdq
xchg
cmp
jmp
push
sub
jmp
push
movs
fldcw
jg
inc
and
sub
xor
mov
inc
mov
jmp
mov
push
lea
call
push
pushf
mov
lea
jae
bt
sub
jmp
push
retf
aam
adc
call
and
test
add
mov
daa
in
arpl
or
sbb
enter
xor
fxch
dec
popa
mov
pop
aam
xchg
in
sub
pop
loopne
hlt
in
shl
and
xor
lds
enter
or
xor
or
aad
fstp
je
jo
push
es
out
out
mov
imul
or
cmp
mov
aam
add
test
push
or
mov
test
cmp
lods
ja
push
leave
pop
and
lahf
fmul
and
push
sub
imul
leave
jae
sahf
adc
xor
xchg
mov
cmp
mov
adc
push
sbb
movs
sbb
mov
cmp
clc
cmps
scas
dec
jle
dec
loope
out
xchg
dec
jne
add
pop
scas
cmp
sbb
cmc
ins
add
aam
leave
or
test
xchg
cs
xlat
(bad)
mov
pop
xlat
jmp
ret
stc
je
xor
cmp
shl
aad
fst
pop
or
mov
xor
ud2
into
xor
test
xlat
pop
mov
ficom
push
int3
faddp
stc
xchg
imul
cmp
sar
sub
pextrw
jg
inc
hlt
lods
or
cli
xor
add
popa
ins
inc
ins
ins
outs
arpl
mov
jb
adc
out
stos
jnp
fmul
lea
cmps
add
cmp
cdq
or
leave
inc
aaa
sbb
sub
shl
imul
jne
fst
adc
lahf
xlat
gs
std
pop
shr
xor
dec
xor
rol
pusha
pop
mov
cwde
(bad)
jne
lock
arpl
cdq
out
and
shl
xlat
adc
shr
push
sub
push
push
and
sub
dec
push
aad
in
fild
iret
fs
adc
add
cld
mov
xchg
push
jbe
dec
adc
aaa
dec
lahf
out
adc
mov
adc
inc
fwait
retf
enter
lods
stos
stos
arpl
scas
jl
push
mov
in
pop
rcl
adc
xchg
cmp
popf
rol
mov
cli
out
fwait
mov
ja
aas
test
and
scas
les
mov
mov
push
scas
(bad)
loope
fnstcw
xchg
xchg
push
push
push
pop
xchg
jge
sub
adc
mov
int3
or
rol
cdq
xchg
mov
add
or
and
mov
js
xor
pop
push
xor
ret
fbld
jmp
ret
mov
aas
loope
cdq
and
xchg
xchg
jge
popf
dec
push
mov
push
xor
fild
mov
sub
aas
mov
jb
pop
sbb
pop
jne
or
fwait
push
rcl
mov
int
and
fwait
(bad)
mov
mov
pop
jg
and
jno
mov
inc
xchg
test
inc
inc
inc
pop
inc
mov
bound
pop
mov
retf
inc
push
hlt
jmp
mov
jb
cmp
adc
out
cdq
dec
push
hlt
sub
cmp
adc
add
adc
mov
adc
movs
push
dec
dec
xor
mov
cmp
xchg
ins
dec
xchg
data16
add
mov
mov
or
fdiv
nop
sub
scas
aas
jno
sub
lds
jmp
fisttp
stc
jp
ror
xchg
fcom
xchg
dec
loop
scas
movs
add
mov
cmp
xchg
adc
mov
cmp
xor
loope
adc
movs
test
pop
push
pop
add
cli
cs
xchg
dec
pop
adc
aad
push
sub
mov
pop
mov
jg
je
je
aaa
aaa
lods
loope
cli
adc
aas
jb
xor
jmp
xor
iret
sbb
mov
and
int3
mov
popf
pop
mov
stos
mov
pop
sar
bound
mul
lods
jle
pop
ss
int
cmp
and
into
add
aas
push
loop
iret
mov
stc
bt
pushf
clc
and
cmc
add
add
bt
clc
cmp
add
jmp
mov
or
adc
enter
mov
sbb
sbb
push
test
sti
xor
or
aas
inc
add
pop
mov
stos
dec
xchg
popf
test
sti
add
jo
bound
mov
es
jnp
xor
xchg
(bad)
aaa
les
icebp
cmps
lods
popa
add
in
sbb
retf
jns
and
push
push
mov
pop
ins
sbb
adc
movs
fist
stos
loop
push
mov
inc
dec
clc
dec
out
aam
xchg
bound
push
xor
sub
add
loopne
inc
inc
dec
cs
dec
mov
sbb
jmp
mov
push
push
push
es
mov
or
shrd
pop
sbb
(bad)
jge
lods
jecxz
push
fadd
mov
sbb
sub
shl
mov
sbb
push
or
enter
jb
push
int3
lock
mov
jbe
and
add
int3
pop
rcr
push
adc
sahf
popf
cmc
jae
cdq
jp
mov
cmp
jno
mov
sub
dec
sar
add
push
inc
je
pop
xchg
test
scas
dec
mov
dec
(bad)
in
cwde
jno
xor
cld
ret
xchg
les
mov
scas
xchg
shl
and
jae
jmp
pop
push
push
pushf
push
ret
xor
xchg
adc
push
sbb
(bad)
dec
xor
sub
or
out
add
mov
aas
push
jmp
shr
xor
push
jne
jae
dec
jmp
out
lods
mov
mov
mov
dec
ret
inc
add
aam
out
lock
cmp
pop
mov
aad
xchg
cmp
bound
cli
sub
cld
push
mov
jno
pushf
pop
(bad)
lock
add
out
mov
stc
lock
sub
inc
adc
sub
pop
leave
loopne
popa
fs
jo
xor
cs
ins
add
inc
and
mov
call
jmp
mov
xor
or
(bad)
mov
adc
adc
jbe
push
dec
add
inc
jle
mov
std
mov
or
sbb
enter
je
adc
cmp
add
popa
js
cli
sub
inc
inc
mov
sbb
out
popa
xor
ins
cmc
outs
movs
fdivr
and
outs
stc
nop
add
push
lods
out
outs
repz
jne
xlat
push
push
xor
cmps
xchg
ins
inc
call
cdq
or
adc
(bad)
fist
popa
jne
sbb
data16
or
iret
imul
jae
jb
xor
fs
ins
add
push
add
jmp
jmp
lods
and
pop
or
pop
adc
ficom
push
xor
sub
rcr
xchg
retf
sti
mov
push
ds
in
jne
test
outs
ds
cs
in
mov
xor
shl
dec
xchg
and
xchg
inc
pop
pop
sbb
out
iret
sbb
fidivr
imul
xchg
mov
push
rcr
fstp
shl
ds
les
xchg
adc
pop
call
pushf
mov
loop
icebp
inc
dec
movs
xor
mov
out
mov
adc
cmp
cmp
imul
fdiv
loope
fmul
es
xor
jne
pop
xchg
rol
cmp
push
jne
jmp
or
mov
push
repz
mov
popa
jle
xchg
sbb
inc
aad
aaa
and
mov
xor
scas
je
lea
or
nop
cmp
mov
cs
xor
je
sub
aas
cwde
mov
pop
int
pusha
adc
shl
cwde
add
cs
add
dec
sub
sub
add
shr
fist
xchg
jbe
and
retf
jne
dec
mov
jg
sub
and
lahf
ja
imul
jecxz
cmps
outs
out
and
scas
test
(bad)
cmp
cwde
mov
xor
fadd
push
lahf
push
dec
dec
add
dec
and
out
cmc
jno
and
or
add
shl
sar
xlat
loopne
and
push
mov
jo
outs
jbe
sahf
sbb
mov
jle
pop
data16
and
inc
jne
inc
inc
mov
mov
imul
out
aas
lahf
arpl
not
or
fld
add
pop
gs
sbb
cmps
call
xor
dec
push
ins
repz
or
cs
outs
adc
inc
push
fs
jnp
fdivr
pop
push
das
sub
enter
xchg
fwait
jns
pop
out
clc
jns
sbb
fisubr
adc
add
ror
(bad)
push
push
stos
cmps
pop
dec
push
jb
aad
inc
mov
imul
ror
fistp
out
and
jne
test
pop
cmp
jmp
(bad)
cmp
bound
xchg
(bad)
pop
js
cdq
cmp
(bad)
and
imul
mov
in
stos
es
cmp
adc
push
call
add
ficom
inc
int3
or
ret
jecxz
ds
enter
or
xchg
mov
pop
bswap
lods
loop
mov
xor
imul
aad
push
or
cli
les
aam
ds
daa
daa
lahf
lods
jg
ins
std
std
jne
ret
dec
pop
xlat
call
scas
sub
jb
pop
xchg
sahf
sbb
loop
ss
and
adc
xchg
into
xchg
ja
and
sbb
sbb
sub
mov
ja
xor
mov
push
mov
fucom
cdq
inc
fcom
jmp
push
int3
mov
sub
out
mov
push
push
(bad)
pop
sub
cmp
dec
inc
rcl
js
loope
aaa
jo
xchg
dec
pop
ret
inc
jno
adc
sub
xchg
and
les
shr
ret
imul
popf
xor
lods
sub
cwde
xor
cdq
adc
or
add
push
dec
and
lods
mov
push
cwde
sbb
test
add
and
adc
and
cmp
arpl
lods
dec
cmp
scas
sti
xor
cld
sbb
clc
in
enter
and
xchg
pop
pop
mov
call
mov
icebp
add
jmp
cld
popf
sbb
ret
in
(bad)
pop
scas
cdq
sbb
dec
rcl
(bad)
mov
inc
sub
inc
fucomi
iret
mov
shr
das
stc
adc
mov
and
or
xor
fist
stos
retf
shl
and
sbb
adc
pop
imul
gs
add
cli
xchg
dec
push
mov
shr
mov
int
and
pusha
or
(bad)
xchg
stos
ins
aam
into
hlt
jne
(bad)
cmp
adc
mov
sub
mov
popf
rcl
add
push
sub
cld
add
arpl
xor
xchg
fst
push
pop
es
jb
dec
outs
mov
mov
fmul
dec
mov
scas
into
int3
push
out
fisub
xchg
mov
test
pop
cdq
push
dec
popa
pop
nop
ret
fsub
jg
dec
and
jle
mul
les
test
imul
push
dec
adc
xchg
mov
or
jns
xor
pop
jb
mov
aam
pop
shl
ins
rcl
fst
adc
shr
pop
repz
mov
ror
dec
push
cs
adc
or
sti
lods
xlat
and
daa
mov
and
clc
push
push
int
inc
jl
stc
dec
push
call
jbe
inc
adc
arpl
sub
test
pushf
push
push
pop
pop
arpl
pop
or
leave
pop
jnp
sti
push
mov
cmp
stos
mov
int3
push
out
adc
adc
pop
ja
xor
and
adc
push
or
cmps
sbb
xlat
sub
int3
lods
jecxz
pop
push
pop
mov
ror
pop
mov
inc
rcr
outs
lock
cmp
xor
std
xor
inc
fist
stos
push
scas
(bad)
xor
out
pop
sub
or
and
ds
pop
cmps
pop
(bad)
xlat
or
or
ins
addr16
push
cmps
adc
(bad)
push
iret
lea
sub
add
gs
sbb
out
xchg
iret
or
xchg
dec
push
(bad)
cli
popf
adc
mov
scas
mov
ins
ret
jecxz
mov
test
push
jmp
imul
push
addr16
cli
rcl
push
dec
mov
inc
mov
and
bsr
push
not
stc
push
ror
rol
adc
push
sar
push
bsf
sbb
push
btr
mov
call
ror
pop
sahf
add
add
sub
test
lgdtd
jnp
jp
fist
sbb
fcomi
xor
loop
push
inc
fadd
cmp
add
cs
lds
mov
pop
shr
xchg
mov
mov
xor
jae
push
xchg
or
push
or
dec
icebp
je
add
arpl
loope
movs
fdivr
jg
fcom
and
cli
dec
push
scas
rcr
push
xchg
mov
fdivp
dec
stos
les
push
in
or
sar
add
fld
sbb
mov
jne
pop
jle
push
lea
jae
call
pushf
ror
mov
sub
pushf
cmp
mov
cmp
mov
lea
lea
lea
jb
pop
pushf
mov
push
lea
ja
call
call
pushf
mov
lea
jb
pusha
cmc
cmp
cmp
push
lea
jae
xadd
pusha
mov
sete
mov
pusha
mov
stc
stc
pushf
sub
cmp
repnz
call
fcom
push
je
ins
xlat
or
rol
jae
jecxz
std
cmc
outs
iret
xchg
mov
adc
add
jmp
popf
mov
inc
dec
fidivr
cmps
sub
mov
jae
enter
inc
stc
add
inc
repz
outs
xchg
sbb
jno
or
fdivr
sar
adc
mov
gs
jg
xor
pop
add
test
dec
mov
or
aad
dec
and
pop
lock
popa
dec
mov
retf
data16
or
cmps
clc
int3
and
test
mov
fstp
fst
inc
mov
cwde
add
ror
jns
aas
test
outs
pop
icebp
pushf
fidivr
enter
add
fsub
std
std
push
addr16
sbb
dec
or
out
mov
inc
mov
or
int
jo
test
adc
mov
sbb
mul
pop
shr
adc
mov
fistp
les
popf
jecxz
jns
pop
(bad)
popfw
xor
loop
sbb
in
(bad)
or
mov
jno
test
lods
jecxz
retf
(bad)
push
mov
pop
popa
js
fwait
mov
sbb
xor
jmp
xor
xchg
add
scas
sti
outs
js
inc
sub
push
mov
and
repz
mov
adc
(bad)
jae
bnd
cmc
or
cdq
pop
ja
pop
adc
pop
into
fs
stc
repnz
jno
mov
mov
lock
inc
or
and
pusha
mov
xchg
add
call
mov
ss
jmp
jns
dec
xchg
loopne
push
stc
gs
jns
sub
arpl
mov
sbb
out
ror
pop
pop
adc
rcr
add
int
mov
dec
xor
xchg
call
in
jo
adc
add
mov
jb
shr
xor
dec
data16
xor
aaa
lea
mov
pop
sbb
adc
jne
push
test
pop
rol
fist
mov
adc
mov
les
out
jne
jecxz
dec
sub
pop
loopne
jle
add
pop
call
push
cs
mov
jmp
clc
icebp
bound
pop
pop
sar
push
mov
adc
movs
dec
int
xor
pop
adc
adc
lods
inc
dec
add
jl
and
loopne
loop
sbb
in
jbe
aas
cwde
fadd
mov
mov
mov
jnp
cmp
mov
ins
lods
movs
jp
das
(bad)
push
dec
xlat
ins
lea
or
(bad)
dec
sbb
pushf
pop
call
mov
jne
rol
push
and
rcl
movsx
pushf
mov
pushf
setle
not
mov
bt
lea
xadd
jmp
cmp
push
daa
pop
icebp
pop
or
inc
jnp
es
mov
pop
nop
push
ins
inc
cld
imul
out
inc
jns
out
stos
popa
cmp
jmp
mov
sahf
pop
push
sbb
jns
xor
fldenv
xor
scas
stc
pop
or
cmps
mov
wbinvd
cwde
les
adc
call
jno
inc
pop
inc
outs
outs
fyl2x
stos
jb
out
dec
adc
jmp
pop
mov
and
std
std
ss
inc
cmp
nop
cmc
xchg
sub
test
std
aad
das
enter
mov
mov
push
sbb
sti
adc
aam
dec
mov
(bad)
inc
aas
aaa
add
sub
ret
imul
fdivp
or
and
mov
xchg
and
popa
cmp
stos
mov
xchg
xor
fsubr
add
lds
movs
bound
out
mov
adc
loop
pop
fs
aas
js
ret
mov
jg
mov
push
iret
into
movs
lds
xchg
lods
push
mov
jecxz
lahf
sti
hlt
icebp
ficom
sub
jnp
mov
(bad)
and
ficom
aad
fdivr
jmp
neg
ds
cmp
xchg
div
or
inc
xchg
sti
mov
ins
test
xchg
xchg
cmps
jle
pop
sub
push
xchg
ret
fcom
call
sbb
adc
add
call
aam
push
data16
adc
fs
call
add
or
in
or
ret
imul
cdq
push
xor
jnp
and
js
push
in
xor
test
jb
arpl
fs
retf
adc
imul
pushf
or
sbb
cs
cmps
sti
xchg
cmp
in
push
dec
(bad)
push
clc
pcmpgtd
xchg
pop
lock
mov
push
pop
and
popa
rcl
pushf
mov
pop
sahf
and
(bad)
call
push
jmp
pop
xchg
cwde
dec
inc
pop
or
scas
xchg
test
movd
push
mov
or
je
mov
leave
test
fcmovb
jae
xlat
pop
sti
adc
mov
das
in
scas
sub
and
mov
into
xchg
adc
cmp
hlt
sti
sub
test
ins
aad
dec
fstp
jge
inc
sar
fwait
xor
add
ja
test
xchg
mov
loopne
fs
imul
dec
fsubp
jbe
sbb
add
shr
out
std
test
xlat
jb
call
and
rcr
lods
inc
adc
ret
inc
mov
test
jns
inc
jmp
ds
es
and
idiv
adc
mov
in
dec
int3
pusha
xchg
dec
(bad)
fwait
xchg
int3
imul
rep
popf
adc
jp
pusha
add
cwde
popa
sbb
in
pop
daa
inc
ins
or
mov
in
add
push
imul
out
fwait
aaa
retf
fs
lods
push
pop
add
test
and
dec
sar
shl
dec
xor
mov
ins
inc
dec
mov
xor
loope
sbb
inc
sbb
push
pop
mov
sub
jl
and
rcl
push
mov
jmp
lock
outs
inc
push
test
cmp
and
cli
in
pop
mov
cmc
cmp
xchg
sub
mov
ror
retf
inc
pop
fist
jno
xor
dec
xchg
clc
adc
repz
fwait
inc
xchg
push
dec
in
in
or
or
xlat
dec
scas
and
pop
pop
adc
jae
or
sbb
ins
in
jb
push
mov
test
push
adc
shl
int
aaa
inc
mov
iret
add
sar
mov
jmp
inc
adc
push
xor
fwait
shl
dec
lahf
mov
int
jge
and
push
in
or
xor
pusha
pusha
pop
icebp
push
push
ds
(bad)
sbb
push
inc
ficom
jbe
sbb
push
cli
adc
sub
xor
arpl
push
push
(bad)
push
scas
push
mov
mov
mov
dec
sub
call
(bad)
push
sub
fcom
xchg
mov
adc
(bad)
jge
pop
add
(bad)
fnstcw
fst
xor
je
push
fist
ret
push
lea
adc
mov
jnp
aaa
lods
popa
push
or
mov
scas
push
mov
push
push
sub
xchg
cmp
mov
adc
mov
add
or
ins
and
sbb
out
out
loopne
push
movs
mov
xor
xlat
sub
into
fs
mov
xchg
retf
or
add
xor
dec
fcmovnbe
cdq
shl
scas
ja
add
ret
cdq
es
pushf
pop
in
aam
xchg
xchg
cmps
xor
mov
xlat
pop
test
das
in
jae
pop
mov
and
clc
inc
dec
fwait
popf
aad
fiadd
or
call
enter
push
xor
jb
cmp
out
cmp
xchg
neg
imul
popf
stc
stc
xor
fist
popa
movs
shl
xchg
popa
cli
scas
mov
pop
shr
fwait
cmp
sbb
mov
pop
repnz
sar
inc
test
call
lar
cs
xchg
in
pop
repz
xor
xchg
(bad)
push
test
xchg
dec
adc
out
out
call
dec
sar
xchg
outs
dec
cmp
push
push
scas
add
push
cmp
(bad)
inc
cli
neg
push
xchg
dec
xor
iret
sbb
loope
into
mov
stc
pushf
cmp
push
jp
loopne
(bad)
scas
not
shl
ins
mov
jno
movs
ins
and
sti
mov
sbb
push
pminsw
add
jmp
xchg
in
pusha
std
push
push
add
add
cli
lock
pushf
jle
(bad)
imul
je
pop
mov
adc
popf
xchg
pop
pop
jns
mov
dec
cs
pushf
call
add
push
gs
jo
outs
dec
gs
js
add
sldt
add
ins
xchg
add
mov
jmp
clc
test
add
push
call
std
mov
aam
adc
xchg
call
ds
in
arpl
pop
stos
and
pop
dec
pop
icebp
adc
imul
sub
rcr
xor
jns
mov
fisub
cdq
adc
mov
mov
dec
out
ror
adc
rcl
jmp
sub
std
mov
dec
inc
and
std
xchg
aam
mov
add
dec
jno
shl
int
std
shr
add
adc
enter
dec
ret
fdiv
nop
es
lock
jae
adc
cmps
add
lahf
push
das
dec
loop
(bad)
rcr
cmc
adc
jne
int
mov
dec
push
dec
xor
stos
and
mov
sub
jmp
pusha
pop
mov
xor
daa
repz
and
je
aaa
or
lods
sub
cmps
pop
outs
and
push
push
cli
adc
sar
cmc
jecxz
enter
ins
nop
inc
test
mov
jmp
sbb
shufps
pop
int
pop
mov
inc
(bad)
std
adc
out
shr
out
jg
imul
or
scas
sbb
sbb
imul
and
mov
ja
add
sbb
mov
sub
aad
mov
sbb
icebp
call
mov
hlt
adc
mov
or
or
inc
jnp
xor
adc
sub
inc
pop
jae
sub
jo
fdivp
or
retf
add
mov
arpl
push
adc
push
xor
adc
les
dec
push
mov
push
outs
sbb
xchg
dec
fistp
fs
int
jmp
and
add
sub
call
jo
pop
or
jbe
and
jno
cmps
daa
test
pop
sbb
ins
inc
mov
jmp
icebp
xchg
dec
icebp
cmps
cdq
adc
mov
and
mov
jb
(bad)
jne
loopne
xor
pop
es
mov
and
adc
adc
in
fcom
(bad)
mov
shr
and
pop
aaa
add
or
retf
loop
cs
jge
adc
or
sbb
mov
inc
cmp
rol
push
push
pop
pop
cld
inc
push
daa
out
pop
sbb
hlt
ins
mov
xlat
xor
je
pop
aam
push
bound
(bad)
mov
cmp
push
lock
sar
xor
pop
ins
ror
cli
outs
lods
xor
mov
mov
push
out
adc
ret
or
xchg
(bad)
scas
cdq
jnp
sahf
movs
jb
or
mov
xchg
lea
stos
clc
icebp
cmps
test
or
ficom
fwait
cdq
jl
jo
pop
cmp
push
test
cdq
test
inc
pop
push
pop
mov
shl
push
js
xor
mov
movs
fldcw
cs
lds
mov
mov
push
inc
pop
mov
jp
into
shl
push
in
add
stos
inc
cmp
adc
jbe
push
pop
out
lds
fbstp
sub
dec
lea
jne
pop
mov
call
sub
aam
repnz
xlat
iret
(bad)
xchg
(bad)
fmul
push
mulps
xor
pop
call
movs
aas
xchg
clc
push
gs
jge
hlt
aaa
cs
pop
arpl
test
pop
sub
ss
dec
lods
shrd
pop
mov
inc
pop
jns
fstp
cmc
fnsave
or
cmps
sbb
mov
xor
pop
lods
pop
leave
ss
xchg
imul
outs
jne
mov
fstp
sbb
mov
xlat
(bad)
jno
mov
fwait
(bad)
xlat
jmp
xchg
cmp
leave
ret
cmp
adc
and
in
ret
lods
sub
(bad)
int
sbb
mov
push
sub
loop
and
add
cwde
dec
sub
adc
out
rol
in
and
and
sbb
clc
dec
scas
mov
xor
mov
push
xchg
retf
and
push
aad
mov
add
xor
sbb
fistp
xchg
retf
pusha
test
add
pushf
xchg
inc
pop
sub
push
arpl
mov
mov
xor
sti
sti
mov
hlt
fdiv
cmp
fs
jmp
xchg
mov
inc
(bad)
jecxz
std
clc
das
(bad)
pop
outs
inc
inc
test
jo
fcomi
inc
cwde
out
dec
inc
fdivp
pushf
adc
jno
ins
aaa
(bad)
out
xchg
(bad)
sbb
xchg
pop
xor
mov
push
mov
jge
pop
aam
dec
jecxz
xlat
sar
cmp
(bad)
mov
pushf
cmp
sti
pop
xor
jb
in
add
pop
test
fistp
sbb
(bad)
xor
or
jmp
stos
adc
aaa
adc
int3
and
cmc
fs
push
mov
pushf
mov
add
pop
movs
pop
(bad)
ja
lds
es
outs
jmp
call
adc
adc
popa
mov
lods
icebp
jb
(bad)
jle
inc
push
ja
jo
dec
sub
inc
jl
in
out
fcom
and
pop
push
leave
bound
cld
xor
cmp
jmp
jbe
xor
sub
push
xchg
mov
cli
mov
fcmovnb
dec
cli
movs
jbe
mov
sahf
mov
stos
outs
jo
pushw
jne
in
or
sub
dec
mov
daa
mov
add
cmp
jae
cli
loop
mov
jno
xchg
and
adc
es
mov
inc
test
aam
add
outs
clc
into
cmp
repnz
(bad)
sub
mov
ror
xchg
mov
and
shl
dec
xor
retf
xor
(bad)
out
daa
push
daa
sbb
aad
(bad)
lea
adc
(bad)
xchg
adc
inc
mov
mov
mov
and
add
cs
call
cs
scas
int
out
dec
inc
cli
shr
sar
repnz
and
les
call
icebp
sbb
mov
aas
les
add
inc
mov
sbb
and
in
es
mov
ds
sbb
or
adc
xlat
jle
retf
call
hlt
push
push
fidivr
or
imul
loope
dec
jecxz
pop
or
ja
pusha
ds
dec
and
xlat
and
mov
cmp
or
jge
mul
mov
aad
add
call
jl
mov
loop
cmp
inc
xchg
pop
xchg
jmp
mov
adc
push
call
cmp
icebp
cmp
rcr
addr16
in
jne
mov
mov
shl
sti
mov
std
repz
mov
xor
dec
dec
test
cmps
pop
inc
pop
(bad)
pop
mov
mov
daa
cmp
in
add
es
mov
cmc
mov
xor
mov
inc
adc
cld
cmp
outs
(bad)
arpl
or
in
pop
(bad)
fmul
test
pop
push
sbb
jmp
ins
adc
jae
in
jg
sbb
mov
xchg
movs
lock
cmps
pop
inc
add
push
inc
clc
(bad)
jle
and
(bad)
xchg
or
cmp
jae
jmp
rcl
dec
dec
jg
and
test
outs
in
shr
cmps
push
dec
lds
jnp
jbe
pusha
pop
add
in
fwait
or
push
jmp
outs
and
loopne
mov
ss
pusha
test
out
sub
adc
data16
jmp
(bad)
clc
jmp
sub
mov
fnsave
cmp
jmp
movs
(bad)
jne
mov
(bad)
scas
daa
and
xlat
pop
push
leave
(bad)
xchg
int
arpl
icebp
mov
popa
loop
dec
jecxz
fstp
adc
xor
mov
add
push
mov
aaa
dec
and
call
(bad)
xchg
daa
(bad)
ficom
push
psubb
call
pop
and
inc
mov
and
inc
jg
mov
lock
pop
cs
push
cmp
sbb
push
leave
loope
fnop
addr16
sbb
in
les
imul
shl
mov
in
adc
call
aam
mov
sbb
leave
inc
mov
cmps
push
jmp
fldcw
jl
mov
ret
stc
dec
stos
loop
push
(bad)
jns
sti
push
and
sbb
pop
mov
call
pop
out
inc
xchg
cmps
push
fst
dec
or
mov
fdiv
mov
pushf
(bad)
std
adc
retf
(bad)
push
mov
jne
call
test
clc
adc
dec
sub
(bad)
xchg
or
jmp
fwait
jno
inc
punpckhbw
cs
push
mov
das
(bad)
cmps
inc
sbb
hlt
test
cld
inc
lods
test
jg
and
pop
sbb
sbb
adc
(bad)
and
jg
mov
cmps
(bad)
ret
inc
jbe
mov
xor
mov
mov
fsub
scas
mov
inc
sbb
aaa
or
dec
mov
inc
loopne
inc
stos
mov
jle
mov
xor
xchg
pop
nop
and
mov
fdiv
fist
data16
xor
or
xchg
push
pop
gs
sbb
out
pop
sbb
mov
clc
cld
jge
push
aad
push
rcr
fdiv
cmp
(bad)
mov
imul
adc
sbb
mov
pop
repnz
dec
sbb
mov
in
movzx
movsx
lea
jmp
mov
mov
mov
mov
mov
mov
mov
pushf
push
push
ret
push
retf
jmp
push
dec
sub
mov
icebp
stos
iret
xchg
mov
les
dec
movs
cmovne
retf
push
je
mov
scas
repz
push
pop
(bad)
clc
nop
mov
push
mov
dec
movs
mov
ret
sbb
ror
mov
add
jg
push
(bad)
bound
xchg
or
jge
xchg
iret
stc
dec
cs
dec
(bad)
dec
shl
mov
(bad)
sbb
xor
icebp
(bad)
push
jne
mov
sbb
fadd
out
mov
iret
aam
sti
push
sahf
jb
or
mov
inc
pop
mov
jge
jmp
lods
in
dec
ret
pop
jb
mov
mov
jmp
push
xor
das
ds
call
sahf
inc
fld
pusha
push
ins
data16
mov
in
es
fimul
gs
and
mov
shl
shr
mov
inc
fidiv
jecxz
push
leave
(bad)
jns
or
mov
push
movs
push
pop
xlat
xor
dec
jecxz
sti
mov
adc
inc
xchg
jle
pop
mov
xchg
retf
mov
sbb
aad
jae
mov
inc
fidiv
retf
push
repnz
sti
pop
shl
sbb
dec
and
add
addr16
js
test
(bad)
div
sbb
jo
icebp
ror
je
adc
adc
jb
push
ss
add
shr
adc
(bad)
in
imul
enter
mov
into
arpl
or
(bad)
jns
movs
pushf
popa
popa
fcomp
xchg
sar
xchg
or
fcomip
sub
shl
mov
mov
dec
adc
push
xchg
gs
mov
pop
aam
shl
dec
and
sub
data16
dec
mov
pusha
not
push
dec
mov
bt
mov
xor
clc
add
test
call
add
test
clc
cmc
bt
test
push
lea
jne
push
call
add
cdq
fucomip
adc
dec
push
mov
xchg
ins
movs
test
mov
stos
mov
mov
xor
fadd
outs
push
(bad)
out
cmp
popf
jg
mov
inc
mov
fdiv
pop
pop
aam
mov
pop
cmp
and
or
xchg
xchg
xchg
xor
loop
pusha
push
test
loop
sub
cmps
and
mov
push
repz
in
and
popf
dec
jl
sbb
loop
fwait
mov
mov
test
call
dec
jle
daa
cmp
adc
adc
fmul
adc
popf
cmp
hlt
dec
test
cmp
inc
js
push
mov
inc
scas
and
repz
sti
mov
ins
push
int3
les
inc
sbb
sahf
dec
call
enter
bound
bound
xor
ror
fst
out
ret
fwait
xchg
hlt
adc
lahf
mov
inc
push
popa
dec
and
dec
dec
shl
hlt
ret
push
push
xchg
out
lods
int3
inc
mov
in
push
in
retf
inc
call
rol
sub
mov
pop
or
mov
in
inc
iret
cmps
add
lahf
jbe
mov
(bad)
pextrw
popa
in
push
cmp
and
movs
mov
pop
aad
rcr
leave
nop
movs
enter
fcmovnu
xchg
pop
mov
daa
lds
adc
sbb
jge
jo
sti
(bad)
pop
push
repnz
inc
xchg
test
pop
es
retf
and
stc
into
add
lea
shl
js
push
or
pop
cmp
xor
cmp
adc
inc
aaa
push
push
stos
or
popa
into
lds
and
arpl
loop
push
stos
cld
push
xchg
sub
lea
das
pop
lods
push
retf
xchg
push
inc
inc
clc
lds
std
mov
dec
cmc
xchg
dec
dec
sub
mov
fwait
test
in
push
mov
xchg
call
movs
in
push
int3
sar
clc
jo
shl
in
(bad)
push
popf
pop
dec
dec
dec
std
cmc
xchg
dec
push
dec
mov
mov
add
xor
adc
outs
ret
popf
je
inc
and
push
push
call
mov
jge
(bad)
lock
pushf
cmp
push
dec
ins
fs
dec
pop
aad
push
repnz
call
sbb
mov
and
aad
xor
mov
jno
jmp
(bad)
shl
sub
sub
mov
cdq
scas
pop
data16
test
inc
pop
nop
shr
inc
fcmove
inc
mov
adc
pshufw
jnp
(bad)
mov
sub
imul
pop
push
mov
push
sub
inc
aas
js
inc
xor
fchs
push
xchg
pop
loope
inc
dec
inc
jnp
jb
mov
sub
sbb
ins
xchg
push
lea
and
fadd
ins
push
test
inc
loopne
jbe
ror
sub
xlat
ja
xchg
jb
das
gs
adc
idiv
fbstp
mov
push
ja
and
mov
xor
mov
das
in
xchg
adc
cmp
cs
les
ins
inc
push
or
les
inc
jle
jb
mov
jmp
bsr
jmp
push
sbb
adc
cs
ss
xor
cmp
add
ret
pushf
shl
cmps
inc
jbe
jnp
xor
andps
outs
push
in
adc
test
adc
adc
js
xchg
jae
ds
sbb
fsubr
mov
mov
bound
movs
rol
je
sub
fnsave
in
push
dec
call
ins
mov
push
lods
lds
pusha
aaa
mov
int3
xchg
sbb
ficomp
xchg
xchg
into
pop
mov
ja
add
enter
and
pop
push
sti
xor
cmp
pop
push
stc
aas
jecxz
push
cmc
cmc
lods
mov
mov
scas
and
ds
sbb
adc
xchg
jo
push
mov
inc
or
adc
mov
fisub
ja
rol
ins
or
les
hlt
ins
cmp
neg
hlt
sub
rol
mov
stos
movs
jle
(bad)
sti
add
mov
in
es
movs
pop
jge
jne
clc
fist
ja
cmc
dec
mov
ds
call
pop
sub
xchg
rcr
push
sar
(bad)
mov
jge
cli
mov
dec
sbb
popa
sbb
xor
cmp
fild
add
gs
je
dec
popa
ins
data16
outs
gs
popa
ins
gs
add
mov
mov
push
push
mov
lea
jmp
imul
push
push
ror
pop
xchg
ja
test
xchg
cmp
jbe
rcr
mov
push
aaa
lods
loope
daa
mov
add
fcmovb
arpl
lds
stc
loope
mov
(bad)
push
pop
gs
and
sub
mov
mov
nop
cmp
mov
das
push
sub
fistp
or
xchg
jns
push
push
fstp
outs
pop
pop
xchg
add
inc
leave
aas
add
pop
push
and
jecxz
jg
bound
mov
xor
scas
cmp
imul
mov
cmp
loope
xchg
ins
inc
pop
fmul
andnps
adc
repnz
inc
cli
adc
mov
cs
cmp
pop
xor
and
sbb
jl
movs
inc
xor
adc
lea
aad
mov
inc
pop
in
enter
inc
dec
push
stos
inc
mov
pop
mov
cmp
xlat
or
stos
dec
dec
movs
add
aas
sub
fist
inc
inc
cmp
mov
inc
mov
pop
mov
daa
xchg
or
jmp
inc
push
jno
dec
jo
das
cmova
cmp
mov
stc
xor
cmp
es
push
or
rcr
or
ficom
leave
and
mov
iret
pop
fmul
push
idiv
inc
aad
sbb
add
les
sub
enter
iret
push
adc
(bad)
or
add
adc
test
fiadd
fisub
test
sbb
adc
ret
je
pop
out
leave
sub
iret
dec
out
in
push
adc
in
jle
inc
jp
mov
ds
(bad)
push
mov
push
push
in
mov
and
mov
dec
mov
hlt
jne
inc
jmp
ret
into
outs
push
inc
repnz
pop
bound
add
bound
jl
push
call
xchg
loopne
push
jl
xchg
push
aas
fmul
cmp
xchg
mov
push
dec
push
jge
mov
push
fsub
cmp
aaa
jo
jmp
mov
push
lahf
add
cs
std
(bad)
sub
inc
push
and
je
(bad)
pop
(bad)
shr
nop
pop
jle
inc
mov
xchg
pop
or
and
je
(bad)
loopne
mov
ja
movs
jecxz
fist
xor
je
mov
adc
cmp
test
(bad)
cwde
push
dec
popa
or
mov
jne
jns
dec
xor
xchg
dec
mov
xor
pop
jmp
pushf
call
mov
adc
fdiv
add
stc
mov
and
hlt
jmp
xor
cli
call
dec
nop
inc
and
call
pop
push
loopne
js
scas
cmps
mov
or
sbb
dec
mov
jle
and
les
int
mov
jmp
in
sti
pop
fs
xchg
push
in
int3
add
imul
je
pop
xlat
mov
or
das
adc
pop
mov
push
out
popa
aaa
ficom
mov
adc
jecxz
mov
iret
test
push
(bad)
mov
gs
jp
mov
sub
movs
popa
sub
push
outs
mov
js
jmp
js
jmp
xchg
out
ficom
sub
movs
push
mov
jmp
xchg
leave
jl
add
inc
rcl
jnp
dec
push
jno
adc
cmps
ficomp
add
adc
fcom
or
popf
cmps
xchg
clc
xchg
pop
test
iret
xchg
jecxz
sub
add
iret
pusha
cdq
lock
loop
loop
nop
(bad)
inc
mov
fimul
push
inc
cmp
in
pop
mov
dec
loopne
cs
ins
dec
les
popa
scas
div
mov
int3
inc
cs
iret
in
mov
cmp
das
jmp
and
fcom
lods
or
sbb
or
mov
fidivr
xor
(bad)
fiadd
xchg
pop
inc
xchg
call
fwait
xchg
pop
xchg
adc
lock
pushf
push
jmp
scas
mov
push
into
in
push
movs
sahf
mov
imul
and
pop
cmp
test
cmps
mov
xchg
outs
xor
(bad)
xor
mov
mov
pop
(bad)
fisubr
xchg
mov
repnz
aas
mov
aas
inc
fld
pop
dec
and
js
mov
xchg
dec
inc
xchg
mov
inc
rcr
popa
call
adc
jno
jge
(bad)
jmp
aam
push
dec
jne
sti
inc
fld
sbb
pop
xchg
or
sub
(bad)
ins
lock
and
inc
sub
mov
xor
xchg
das
das
daa
in
push
or
cmps
jmp
sbb
in
pusha
addr16
shr
inc
sbb
dec
xchg
pop
ins
je
arpl
pop
and
movs
fwait
hlt
jge
xchg
and
dec
pop
or
mov
ins
ins
and
cmps
ins
inc
ds
push
ret
cld
push
xor
xchg
ja
dec
adc
enter
add
pop
mov
xchg
popa
pop
pop
xchg
jmp
adc
jp
sub
push
(bad)
dec
push
ds
xchg
jne
or
cmp
add
jmp
xchg
int3
int3
mov
aad
xchg
jg
popa
movs
pop
bound
imul
retf
or
mov
imul
fst
mov
ret
(bad)
mov
cmp
xor
and
mov
arpl
cmp
dec
pop
not
adc
mov
sub
sar
jo
push
xchg
pop
in
imul
dec
xor
sbb
jmp
dec
leave
mov
jns
sub
sub
clc
outs
je
ficomp
fdivr
js
xor
popf
test
xchg
das
push
stc
lock
xor
sbb
cmp
popa
sbb
stc
bt
xor
cmp
stc
call
stc
bt
cmp
mov
pusha
lea
jae
setno
mov
ror
jns
mov
neg
and
movsx
bsr
mov
clc
call
push
or
sbb
adc
cmp
and
lahf
int
add
sbb
xor
xor
mov
enter
lds
rcr
popa
mov
mov
cmp
clc
test
mov
jecxz
xchg
(bad)
pop
shr
sbb
jecxz
mov
stc
and
mov
repnz
and
dec
xor
test
in
jge
mov
push
sbb
pop
add
int3
sbb
xor
xor
daa
dec
mov
bound
sub
cmp
pop
mov
or
sti
xchg
in
das
pop
out
inc
mov
addr16
and
xchg
aas
pop
push
jns
fnstenv
fiadd
loope
mov
aam
adc
xor
popa
push
mov
lods
sub
mov
popf
repz
and
hlt
or
and
aaa
out
(bad)
(bad)
jmp
mov
sbb
fstp
mov
icebp
icebp
jmp
cdq
sbb
pop
test
mov
push
sahf
adc
shl
enter
dec
sbb
popa
neg
jae
fs
and
mov
enter
test
and
call
in
lods
jns
fistp
cmc
pop
lock
and
repz
pop
push
ss
add
dec
inc
cld
shr
mov
pop
daa
jle
jmp
jo
pushf
mov
pusha
mov
pushf
mov
mov
pushf
pusha
lea
jmp
add
dec
xchg
fiadd
add
inc
sbb
sub
js
in
and
jecxz
mov
xor
(bad)
popf
scas
addr16
jmp
mov
xor
jae
fs
and
dec
xor
push
mov
mov
add
mov
pop
add
sbb
mov
mov
push
lock
das
inc
std
jne
arpl
retf
ficom
ret
mov
test
fwait
nop
jp
add
and
xor
lods
xchg
add
arpl
and
pop
sti
inc
neg
cmps
daa
pop
mov
add
add
in
add
add
xor
xor
xor
push
xor
jl
xchg
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
ins
xor
xor
les
enter
shl
aam
fdiv
fdiv
pop
xor
test
ret
xor
stc
xor
dec
ss
xor
mov
(bad)
shl
fnsave
in
ss
aaa
pusha
aaa
imul
cmp
mov
nop
cmp
cmp
cmp
jne
mov
popf
cmp
cmp
cmp
cmp
cmp
cmp
pop
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
mov
ds
mov
mov
ds
repz
std
aas
add
add
add
mov
xor
xor
xor
xor
xor
xor
jno
jge
mov
sub
pop
xor
xchg
xor
mov
xor
inc
ss
popa
cmp
lods
cmp
cmp
cmp
scas
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cs
dec
cmp
imul
(bad)
cmp
pop
ds
dec
ds
ds
aas
outs
aas
jl
pushf
aas
add
add
add
add
mov
mov
nop
xor
mov
xor
outs
xor
mov
xchg
xor
xor
xor
xor
xor
hlt
xor
sub
mov
sar
cmp
cmp
cmp
cmp
cmp
mov
push
cmp
sar
out
xor
xchg
call
fidivr
repnz
inc
aas
dec
aas
bound
ins
aas
jg
scas
aas
fdivr
in
add
add
add
and
push
xor
xor
xor
jo
jns
mov
xor
xor
push
xor
xor
xchg
xor
xor
xor
xor
xor
xor
outs
xor
xchg
xor
add
ss
inc
ss
ss
ss
ss
ss
imul
clc
ss
sub
xor
push
aaa
popa
aaa
imul
aaa
jns
xchg
mov
aaa
(bad)
aaa
in
jmp
cmp
lea
xchg
cmp
cmp
cmp
add
cmp
add
icebp
xor
xor
xor
xor
mov
cmp
cmp
cmp
cmp
cmp
add
adc
and
daa
aas
jns
mov
retf
aas
jecxz
add
add
add
add
or
push
xor
xor
xor
xor
xor
xor
mov
xor
sub
push
bound
xor
ss
mov
ss
ss
ss
dec
aaa
pop
aaa
ins
aaa
or
and
add
add
add
iret
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
adc
sbb
and
sub
xor
cmp
inc
xor
xor
xor
xor
xor
movs
xor
les
int3
xor
xor
xor
xor
xor
xor
xor
or
adc
sbb
and
sub
xor
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sbb
and
sub
xor
cmp
inc
xor
pop
xor
je
jl
test
pushf
xor
mov
mov
xor
hlt
xor
add
or
or
adc
adc
sbb
sbb
sub
cmp
pop
ss
ss
js
jl
xor
ss
ss
mov
les
enter
shl
aam
fdiv
in
ss
adc
sbb
sbb
and
and
sub
sub
xor
xor
dec
aaa
push
aaa
js
jl
xor
aaa
mov
mov
nop
aaa
mov
aaa
int3
aaa
shl
aam
fdiv
fdiv
loopne
in
call
cmp
cmp
sub
sub
xor
xor
cmp
cmp
inc
cmp
js
cmp
cmp
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cwde
cmp
test
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
adc
xor
cmp
inc
cmp
cmp
cmp
cmp
cmp
pushf
cmp
cmp
les
in
in
cmp
cmp
cmp
cmp
cmp
cmp
or
or
sbb
cmp
inc
cmp
dec
cmp
push
cmp
pop
cmp
cmp
cmp
test
lods
cmp
cmp
clc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sbb
and
sub
inc
cmp
ins
cmp
js
jl
cmp
cmp
enter
sar
fdivr
hlt
cmp
and
and
sub
sub
xor
xor
cmp
cmp
push
ds
js
jl
cmp
mov
mov
nop
ds
ds
ds
sar
fdivr
fdivr
loopne
in
call
ds
ds
ds
sub
xor
cmp
cmp
inc
aas
inc
aas
dec
aas
dec
aas
push
aas
push
aas
push
aas
xchg
aas
cwde
aas
pushf
aas
mov
aas
lods
aas
mov
sar
aas
call
aas
hlt
aas
clc
aas
cld
aas
add
add
add
add
add
or
and
sub
xor
pop
xor
xor
test
lods
xor
xor
sbb
and
and
sub
sub
inc
xor
push
xor
js
jl
xor
xor
xor
push
xor
xor
aas
xor
push
xor
pop
xor
cmp
cmp
push
cmp
cmp
test
mov
pop
cmp
jp
xchg
cmp
cmp
cmp
popa
cmp
nop
add
ins
add
add
xor
dec
xor
push
xor
pop
xor
xor
ins
xor
jne
jns
jge
xor
lea
pop
xor
and
ss
ss
ss
ss
aaa
or
or
adc
adc
push
cmp
cmp
cmp
cmp
ret
cmp
add
add
inc
xor
pop
xor
xor
xor
xor
xor
xor
xor
icebp
xor
std
xor
or
or
sbb
sbb
sub
sub
aaa
mov
mov
leave
aaa
fnsave
push
cmp
bound
ja
cmp
ret
cmp
cmp
cmp
ins
cmp
cmp
cmp
cmp
je
test
xchg
cmp
cmp
mov
adc
push
aas
pop
aas
mov
add
aaa
xor
mov
lea
fwait
xor
xor
xor
xor
xor
xor
xor
mov
cmps
xor
xor
imul
out
adc
xor
xor
xor
xor
xor
cmp
inc
aaa
push
xchg
aaa
pushf
aaa
mov
(bad)
or
cmp
xchg
cmp
cmp
cmp
cmp
pop
cmp
test
cmp
cmp
cmp
cmp
cmp
cmp
daa
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
fdivr
test
aas
mov
aas
(bad)
aas
add
add
or
add
push
xor
xor
xor
ja
xor
xor
xor
sbb
das
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
adc
sbb
sub
xor
inc
xor
pop
xor
ja
jge
test
lahf
xor
mov
xor
sub
xor
cmp
dec
ss
ss
ss
jle
xchg
cmps
ss
ss
aaa
popf
aaa
mov
aaa
sbb
jle
fwait
cmp
cmp
cmp
add
inc
cmp
xchg
stos
cmp
cmp
cmp
cmp
jno
jp
in
cmp
cmp
push
ds
ds
mov
sahf
cmps
ds
fidivr
std
or
sub
inc
aas
dec
aas
pop
aas
ins
aas
cmp
sar
fidivr
add
add
add
mov
xor
xor
xor
dec
xor
xor
xor
jg
lods
xor
xor
xor
xor
jns
and
xor
xor
xor
xor
xor
xor
push
xor
imul
cmp
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
nop
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
adc
sbb
sub
xor
inc
cmp
push
cmp
push
cmp
test
cwde
cmp
test
mov
mov
mov
cmp
fdivr
in
cmp
cld
cmp
adc
adc
sbb
and
das
cmp
inc
ds
imul
xchg
xchg
ds
movs
ds
ds
fdivr
loop
in
idiv
add
or
pop
aas
and
sub
ss
cmp
inc
aas
dec
aas
push
aas
pusha
aas
imul
aas
cmp
aas
xchg
aas
cmps
aas
add
add
cmp
add
xor
xor
xor
xor
xor
mov
mov
xor
xor
mov
test
fnsave
sbb
dec
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sbb
das
xor
inc
xor
pop
xor
jno
jbe
xor
mov
xor
leave
xor
fbstp
cmc
xor
or
adc
sbb
and
es
aaa
ss
inc
ss
ss
ss
ss
mov
cwde
aaa
retf
aaa
shl
jmp
cmp
cmp
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
in
in
cmp
cmp
cmp
cmp
cmp
cmp
or
or
sub
dec
cmp
push
cmp
pop
cmp
cmp
ins
cmp
mov
lods
cmp
sar
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
and
and
sub
sub
xor
xor
cmp
push
cmp
cmp
cmp
cwde
cmp
loopne
in
call
cmp
cmp
cmp
cmp
cmp
cmp
inc
cmp
dec
cmp
push
cmp
pop
cmp
cmp
mov
mov
mov
cmp
cmp
cmp
cmp
cmp
adc
sbb
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
inc
cmp
push
cmp
pop
cmp
mov
mov
cmp
push
ds
xchg
xchg
lods
fistp
sbb
sub
inc
aas
imul
popf
aas
retf
add
lock
mov
xor
xor
mov
int
fdiv
repz
xor
xor
xor
xor
bound
jno
xor
xor
xor
xor
pop
xor
test
hlt
xor
cmp
cmp
cmp
cmp
mov
lock
cmp
cmp
test
mov
cmp
jo
stos
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
ds
ds
ds
ds
bound
ds
outs
ds
jbe
jp
jle
cmp
mov
mov
xchg
ds
ds
add
add
add
add
loope
clc
xor
xor
xor
xor
xor
xor
xchg
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
pusha
xor
ins
xor
js
jl
xor
xor
cwde
xor
movs
xor
mov
mov
mov
sbb
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
and
sub
cmp
inc
and
inc
aas
push
aas
pop
aas
jg
xchg
aas
lods
aas
mov
jmp
cli
aas
add
add
test
add
pop
xor
xor
xor
cdq
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
dec
xor
pop
xor
push
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
fidiv
xor
push
aaa
jns
jge
xor
lea
iret
aaa
adc
cmp
cmp
cmp
cmp
push
cmp
jnp
cmp
cmp
cmp
cmp
sbb
je
test
enter
loopne
cld
cmp
xor
dec
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
adc
sbb
xor
push
cmp
fs
jo
je
js
jl
nop
cmp
mov
cmp
sar
call
ds
sbb
sbb
and
and
sub
sub
xor
inc
ds
ds
ds
js
jl
cmp
mov
cwde
ds
ds
sar
aam
fdivr
fdivr
loopne
lock
sbb
sbb
and
and
sub
sub
xor
xor
cmp
dec
aas
ins
aas
je
js
jl
cmp
aas
mov
mov
nop
aas
xchg
aas
test
enter
aam
fdivr
fdivr
loopne
in
call
aas
add
add
add
cmp
add
xor
xor
xor
xor
xor
cmp
cmp
inc
xor
xor
js
xor
xor
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
cmp
inc
xor
xor
xor
xor
xor
xor
xor
mov
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
xor
push
xor
xor
xor
xor
xor
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
xor
push
xor
imul
test
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
adc
sbb
and
sub
xor
cmp
inc
xor
dec
xor
pop
xor
fs
jo
je
js
jl
xor
xor
mov
xor
adc
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
ss
ss
ss
ss
ss
ss
ss
ss
ss
ss
js
jl
xor
mov
mov
nop
ss
ss
ss
mov
lods
ss
mov
mov
les
enter
shl
aam
in
cmc
ss
ss
sub
xor
cmp
cmp
inc
aaa
inc
aaa
dec
aaa
dec
aaa
push
aaa
push
aaa
pop
aaa
pop
aaa
pusha
aaa
fs
push
aaa
jl
pushf
aaa
movs
aaa
test
lods
aaa
mov
mov
mov
aaa
les
enter
shl
aam
fdiv
fdiv
loopne
hlt
aaa
add
adc
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
jl
pushf
cmp
mov
mov
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
test
lods
cmp
cmp
enter
sar
aam
fdivr
cmps
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
adc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
adc
sbb
and
inc
cmp
int
sar
fnstsw
adc
xor
xor
inc
ds
ds
ds
ds
ds
ds
ds
ds
ds
js
jl
cmp
mov
mov
nop
ds
ds
ds
ds
ds
fdivr
fdivr
loopne
in
call
ds
ds
ds
add
add
or
or
adc
and
xor
xor
inc
aas
arpl
test
movs
aas
lods
aas
mov
mov
mov
aas
les
enter
sar
aam
fdivr
fdivr
loopne
in
call
xor
add
add
add
adc
and
and
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
ret
xor
xor
xor
xor
shl
xor
xor
xor
xor
xor
xor
xor
adc
adc
sbb
sbb
and
and
sub
cmp
je
ret
xor
xor
xor
mov
xchg
ss
aaa
leave
aaa
(bad)
aaa
adc
daa
cmp
cmp
cmp
cmp
cmp
sbb
xchg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
xor
dec
cmp
js
test
mov
les
call
and
xor
cmp
pop
ds
jge
(bad)
ds
lods
ds
ds
fdivr
fdivr
loopne
in
call
ds
ds
aas
pop
aas
ja
xchg
ret
aas
enter
add
nop
add
add
js
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
dec
xor
imul
shl
fdiv
jp
in
xor
xor
test
in
sub
mov
std
aaa
sub
jb
scas
cmp
cmp
cmp
cmp
cmp
ja
mov
cmp
cmp
cmp
cmp
cmps
ds
adc
aas
aas
pop
aas
ret
aas
add
add
push
jae
xor
mov
scas
xor
xor
xor
xor
xor
pop
xor
(bad)
xor
xor
xor
pop
ss
cmps
ss
aaa
push
aaa
outs
aaa
mov
shl
xor
cmp
cmp
cmp
cmp
cmp
cmp
cmp
outs
cmp
cmp
cmp
cmp
ja
sar
and
cmp
cmp
ins
mov
fdivr
hlt
ds
add
add
xor
xor
xor
xor
xor
xor
loopne
out
cmp
inc
ss
jns
cli
ss
aaa
xchg
aaa
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sub
xor
mov
sar
fdivr
loopne
in
call
ds
ds
ds
add
push
aas
push
aas
sub
dec
aas
push
aas
pop
aas
pop
aas
pusha
aas
fs
push
aas
je
js
add
add
cmps
xor
xor
xor
xor
xor
xor
xor
xor
jge
call
xor
xor
xor
fs
xor
xor
xor
xor
xor
xor
xor
inc
xor
leave
ss
cmp
cmp
movs
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
test
fidivr
arpl
out
aas
add
add
mov
inc
xor
xor
xor
inc
xor
xchg
xor
xor
xor
xor
ss
ds
ss
ss
mov
call
cmp
cmp
mov
cmp
cmp
cmp
push
cmp
cmp
cmp
cmp
cmp
sar
add
cmp
cmp
cmp
cmp
cmp
fwait
cmp
cmps
cmp
mov
mov
mov
cmp
iret
cmp
fstp
cmc
aas
add
add
pop
xor
xor
xor
xor
xor
js
jge
xchg
xor
xor
xor
mov
xor
xor
xor
cwde
ss
aaa
mov
aaa
retf
aaa
iret
aaa
shl
xlat
aaa
(bad)
fbstp
jecxz
out
jmp
out
aaa
repz
div
sti
aaa
push
add
pop
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
icebp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
jo
mov
cmp
repnz
(bad)
cmp
or
push
adc
push
sbb
push
and
es
cs
ss
jnp
cmp
aas
add
add
add
jnp
movs
xor
xor
xor
xor
xor
xor
xor
xor
xor
jbe
jge
mov
xor
xor
xor
xor
xor
xor
xor
xor
pushf
ss
aaa
aad
in
repnz
clc
aaa
or
out
cmp
cmp
cmp
cmp
dec
cmp
sar
add
add
cmp
mov
xor
pop
xor
xor
pop
xor
xor
xor
xor
xor
xor
pop
xor
movs
xor
mov
xor
pop
ss
adc
mov
xchg
ss
ss
into
fdiv
loop
in
ss
ss
aaa
dec
aaa
push
aaa
push
aaa
pop
aaa
pop
aaa
pusha
aaa
fs
push
aaa
je
js
jl
nop
aaa
mov
mov
aaa
les
enter
shl
aam
fdiv
fdiv
loopne
in
cmp
add
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
jb
cmp
cmp
lods
cmp
cmp
enter
fidivr
hlt
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
inc
ds
cdq
ds
ds
aas
cmp
dec
aas
add
add
add
fadd
add
sbb
cmp
xor
xor
xchg
xor
xor
popa
xor
xor
xor
xor
xor
xor
xor
xor
xor
(bad)
xor
cmc
xor
lds
fidiv
dec
aaa
ins
aaa
je
lods
aaa
fidiv
sub
dec
cmp
std
cmp
cmp
and
jmp
idiv
(bad)
cmp
cmp
cmp
push
cmp
imul
cmp
ret
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
inc
cmp
(bad)
cmp
out
add
push
ds
ds
ds
mov
xor
cmp
aas
aas
dec
aas
push
aas
(bad)
aas
call
add
or
xor
xor
outs
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
dec
xor
push
xor
ja
test
cmp
inc
xor
xor
xor
xor
xor
movs
xor
les
int3
xor
xor
xor
xor
xor
xor
xor
or
adc
sbb
and
sub
xor
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sbb
and
sub
xor
cmp
inc
xor
pop
xor
je
jl
test
mov
xor
adc
sbb
and
and
sub
sub
xor
xor
cmp
cmp
push
ss
ss
jl
xor
mov
mov
nop
ss
ss
ss
ss
ss
ss
ss
cmp
cmp
cmp
cmp
xchg
mov
cdq
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
push
jo
mov
lods
ds
sub
cmp
inc
aas
dec
aas
push
aas
push
aas
pop
aas
pop
aas
pusha
aas
fs
push
aas
je
js
jl
test
cwde
aas
lods
aas
mov
les
fnstcw
cld
aas
add
add
pop
add
add
xor
sbb
sbb
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
push
je
jg
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
inc
xor
xor
xor
jg
xor
xor
enter
shl
aam
fdiv
fdiv
loopne
in
call
xor
xor
xor
xor
xor
xor
xor
xor
pop
xor
bound
jp
jle
xor
xor
enter
shl
aam
fdiv
fdiv
loopne
in
call
xor
xor
xor
sbb
xor
xor
jo
xor
xor
cwde
xor
test
lods
xor
xor
fnstenv
fnsave
out
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
cmp
mov
cwde
xor
shl
xor
in
xor
clc
xor
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
ss
ss
ss
ss
ss
ss
ss
ss
ss
test
xchg
ss
fidiv
loop
out
jmp
aaa
sbb
and
and
xor
xor
cmp
inc
aaa
inc
aaa
dec
aaa
dec
aaa
push
aaa
push
aaa
pop
aaa
pop
aaa
pusha
aaa
fs
push
aaa
mov
mov
pushf
aaa
stos
aaa
scas
aaa
shl
aaa
call
aaa
hlt
aaa
clc
aaa
cld
aaa
add
add
or
or
and
inc
cmp
dec
cmp
push
cmp
pop
cmp
cmp
ins
cmp
cmp
cmp
sar
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
inc
cmp
push
cmp
cmp
cwde
cmp
test
lods
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
mov
sar
fdivr
fdivr
loopne
in
call
cmp
cmp
cmp
cmp
sbb
sub
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
nop
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
mov
aas
call
lock
jo
add
adc
dec
xor
mov
shl
xor
xor
xor
jnp
jae
xor
aaa
cmp
outs
cmp
cmp
cmp
cmp
jns
xchg
cmp
cmp
cmp
inc
cmp
cmp
sub
xor
pop
cmp
mov
cmp
cmp
cmp
ds
jmp
push
aas
xor
dec
aas
pop
aas
jp
xchg
aas
jmp
add
jb
jg
popf
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
inc
xor
out
xor
sbb
push
aaa
xchg
aaa
mov
aaa
and
imul
cmp
in
icebp
cmp
cmp
cmp
push
cmp
cmp
jbe
mov
xchg
cmp
cmp
cmp
cmp
cmp
out
add
sbb
sub
xor
arpl
jb
mov
mov
push
aas
sub
test
sar
add
add
add
push
add
add
xor
xor
xor
xor
xor
retf
xor
out
xor
cdq
aaa
(bad)
std
aaa
xchg
cmp
cmp
cmp
and
mov
cmp
cmp
cmp
xchg
and
and
add
add
add
xor
mov
dec
xor
je
test
in
add
cmp
dec
xor
retf
xor
xor
xor
imul
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
aaa
xor
pop
xor
jg
lea
mov
inc
xchg
xchg
ss
sbb
jno
mov
aaa
add
or
or
adc
adc
sbb
sbb
and
and
push
cmp
outs
cmp
nop
cmp
cmp
cmp
cmp
cmp
cmp
cmp
repnz
cmp
cmp
cmp
cmp
cmp
cmp
cmp
pop
sar
fstp
jmp
add
cmp
outs
xor
xlat
xor
xor
xor
push
loop
shl
jb
nop
cmp
cmp
lahf
cmp
cmp
cmp
push
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
xor
xchg
cmp
call
ds
xor
inc
aas
jle
add
add
add
add
xor
popf
xor
xor
addr16
loopne
call
aaa
clc
aaa
cmp
sub
mov
cmp
cmp
cmp
cmp
dec
cmp
cmp
cmp
cmp
or
xor
mov
add
add
adc
xor
mov
fbstp
aas
xor
aas
ss
jge
test
aaa
imul
aaa
add
sbb
ja
xchg
cmp
cmp
cmp
das
cmp
fnstsw
add
add
(bad)
xor
xor
jl
mov
push
xor
xor
xor
xchg
aaa
div
push
cmp
cmp
pop
cmp
cmp
cmp
outs
cmp
cmp
cmp
cmp
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
inc
cmp
dec
cmp
pop
cmp
lods
ds
aas
add
add
add
add
add
cmp
xor
jl
xchg
xchg
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
push
xor
xor
xor
xor
xor
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
loop
out
repnz
xor
xor
xor
jnp
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
pop
xor
sub
xor
dec
xor
pop
xor
jb
jns
xor
xor
stos
xor
mov
xor
loop
jmp
xor
or
adc
sbb
and
sub
das
ss
ss
ss
ss
jnp
mov
xchg
mov
ss
ss
(bad)
call
push
or
adc
push
aaa
and
xor
xor
aaa
push
aaa
pop
aaa
data16
imul
aaa
jge
mov
(bad)
aaa
pushf
aaa
mov
aaa
shl
aaa
shl
xlat
aaa
in
jmp
aaa
or
or
cmp
xor
cmp
push
cmp
bound
cmp
jns
xchg
mov
cwde
cmp
cmp
sar
loopne
in
repnz
cmp
or
push
cmp
cmp
cmp
cmp
cmp
arpl
jo
jne
cmp
cmp
stos
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sbb
(bad)
cmp
add
(bad)
pop
ds
ds
ds
ds
cmp
ds
ds
mov
ds
ds
aas
push
aas
sbb
and
sub
xor
cmp
inc
aas
dec
aas
jle
cmps
aas
mov
mov
aas
in
(bad)
aas
add
add
add
and
inc
xor
movs
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
jl
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
in
xor
xor
xor
xor
xor
jns
jge
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
ss
jl
test
enter
aam
jmp
out
xor
sbb
xor
cmp
ds
ss
ss
xor
ss
ss
xor
push
aaa
jns
mov
aaa
adc
cmp
popa
cmp
cmp
cmp
sbb
sbb
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
nop
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
push
cmp
pop
cmp
bound
data16
outs
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
nop
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
xor
push
cmp
cmp
cmp
jmp
sub
xor
xor
dec
ds
ds
ds
mov
ds
hlt
ds
ds
ds
pusha
aas
push
aas
test
aas
clc
aas
add
add
add
add
push
xor
xor
dec
xor
xor
xor
xor
xor
xor
xor
xor
inc
xor
popa
xor
ins
xor
xor
xor
xor
xor
xor
test
test
retf
xor
xor
push
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
pop
xor
xor
xor
cwde
xor
movs
xor
mov
mov
mov
xor
int3
xor
fdiv
in
call
xor
cld
xor
or
or
adc
adc
sbb
sbb
and
cmp
pop
ss
ss
xor
ss
ss
ss
mov
lods
ss
mov
mov
les
enter
shl
aam
fdiv
fdiv
loopne
in
call
ss
ss
ss
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
aaa
inc
aaa
dec
aaa
dec
aaa
push
aaa
push
aaa
pop
aaa
pop
aaa
pusha
aaa
fs
push
aaa
je
js
jl
xor
aaa
mov
mov
nop
aaa
xchg
aaa
cwde
aaa
pushf
aaa
mov
aaa
lods
aaa
mov
mov
mov
aaa
les
enter
shl
aam
fdiv
fdiv
cld
aaa
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
inc
cmp
push
cmp
test
fdivr
call
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
nop
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
jle
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
nop
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
gs
xchg
cmp
sar
(bad)
cmp
cmp
inc
ds
arpl
addr16
cmp
ds
ds
or
sub
push
aas
pusha
aas
jbe
jle
cmp
aas
mov
fnstcw
(bad)
aas
add
add
add
and
sub
inc
xor
ja
xchg
xor
xor
xor
xor
xor
xor
xor
pop
xor
jne
jns
xchg
xor
mov
xor
xor
xor
xor
xor
pusha
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
push
xor
jl
xor
xor
cwde
xor
movs
xor
mov
mov
mov
xor
int3
xor
fdiv
in
call
xor
cld
xor
or
or
adc
adc
sbb
sbb
xor
inc
ss
ss
ss
ss
ss
ss
js
jl
xor
mov
mov
nop
ss
ss
ss
mov
lods
ss
mov
mov
les
enter
shl
aam
fdiv
fdiv
loopne
in
call
ss
ss
ss
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
aaa
inc
aaa
dec
aaa
dec
aaa
push
aaa
push
aaa
pop
aaa
pop
aaa
push
outs
aaa
jb
jbe
mov
mov
aaa
enter
fdiv
loopne
in
call
aaa
hlt
aaa
clc
aaa
cld
aaa
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
nop
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
xor
xor
cmp
outs
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
pop
cmp
jg
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
jo
xchg
cmp
cld
cmp
jae
call
aas
dec
aas
pop
aas
ins
aas
je
js
jl
cmp
aas
mov
mov
nop
aas
xchg
aas
cwde
aas
pushf
aas
mov
aas
lods
aas
mov
mov
mov
aas
les
enter
sar
aam
fdivr
fdivr
loopne
in
call
aas
hlt
aas
clc
aas
cld
aas
add
add
add
add
add
or
or
adc
adc
sub
inc
xor
js
mov
(bad)
xor
xor
xor
xor
xor
xor
xor
xor
dec
aaa
pop
aaa
inc
cmp
sahf
cmp
cmp
cmp
cmp
ins
cmp
cmp
cmp
push
aas
xchg
aas
stc
aas
add
add
add
ins
add
add
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
pop
xor
xor
xor
xor
sbb
dec
aaa
xchg
aaa
scas
aaa
pop
cmp
cmp
cmp
cmp
cmp
cmp
cmp
movs
cmp
cmp
(bad)
dec
ds
aas
sti
aas
add
add
push
add
add
shl
xor
int3
xor
xor
push
xor
pop
xor
push
fbstp
pop
aaa
add
dec
cmp
cmp
cmp
cmp
sbb
cmp
cmp
cmp
cmp
cmp
cmp
mov
in
aas
add
add
inc
add
add
xor
xlat
xor
pop
aaa
popf
aaa
(bad)
aaa
(bad)
aaa
sbb
sub
cmp
cmp
cmp
cmp
cmp
cmp
cmp
inc
cmp
dec
ds
ds
sbb
idiv
add
add
add
lods
add
add
xor
xor
inc
cmp
fs
cmp
cmp
int3
cmp
fdivr
in
call
cmp
cld
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
ds
ds
ds
ds
ds
ds
ds
ds
ds
ds
js
jl
cmp
mov
pushf
ds
lods
ds
ds
jmp
aas
sub
inc
aas
dec
aas
imul
aam
loopne
idiv
add
add
and
add
and
sub
dec
xor
xor
xchg
xor
xor
xor
xor
xor
xor
xor
sub
xor
inc
xor
push
xor
xor
xor
dec
xor
cwde
xor
xor
xor
jnp
movs
xor
int3
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
aaa
push
aaa
fdiv
cmp
cmp
cmp
cmp
cmp
je
mov
hlt
cmp
cmp
xchg
cmp
sar
cmp
in
call
cmp
cld
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
dec
ds
ds
ds
ds
ds
cmp
ds
ds
fnstsw
(bad)
and
xor
ds
dec
aas
jns
in
aas
cld
aas
add
add
add
je
add
sub
cmp
xchg
xor
popa
xor
xor
xor
xor
xor
xor
xor
xor
xor
push
xor
xor
ins
xor
xor
xor
xor
mov
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
adc
sbb
and
sub
cmp
dec
xor
push
lds
push
ss
xor
ds
ss
ss
ss
arpl
outs
ss
xor
xchg
mov
ss
ret
ss
shl
(bad)
ss
in
ss
add
aaa
sbb
es
das
aaa
xor
cmp
inc
aaa
push
aaa
push
aaa
pop
aaa
push
aaa
cmps
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sub
inc
cmp
mov
mov
cmp
cmp
cmp
cmp
xchg
cmp
cmp
cmp
cmp
cmp
cmp
xor
pop
cmp
test
movs
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
and
cs
dec
cmp
gs
cmps
cmp
aam
clc
cmp
sbb
and
cmp
inc
ds
ds
arpl
addr16
test
movs
lods
ds
ds
sar
jmp
aas
sbb
xor
inc
aas
push
aas
pop
aas
pop
aas
js
cmp
aas
movs
aas
test
mov
aas
loope
in
aas
add
add
add
mov
add
add
sub
push
xor
xor
lods
xor
xor
enter
shl
aam
fdiv
fdiv
loopne
in
call
xor
xor
xor
xor
xor
adc
and
sub
sub
xor
cmp
inc
xor
pop
xor
xor
lods
xor
xor
enter
shl
aam
fdiv
fdiv
loopne
in
call
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
pop
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
cli
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
inc
xor
push
xor
shl
xor
or
and
dec
ss
outs
ss
xchg
ss
aaa
and
sub
xor
xor
cmp
cmp
inc
aaa
inc
aaa
dec
aaa
dec
aaa
push
aaa
push
aaa
pop
aaa
pop
aaa
pusha
aaa
jo
nop
aaa
cwde
aaa
pushf
aaa
mov
aaa
lods
aaa
mov
mov
mov
aaa
les
push
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
mov
(bad)
cmp
ds
add
xor
arpl
mov
xor
add
add
pop
xor
xor
xor
xor
shl
sbb
xor
push
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
ss
or
push
ss
mov
cmp
cwde
cmp
cmp
cmp
cmp
cmp
cmp
mov
cmp
cmp
cmp
cmp
cmp
pop
ds
ds
ds
mov
inc
add
inc
add
add
xor
test
mov
loopne
add
push
xor
arpl
xchg
xor
xor
xor
xor
xor
ss
ss
mov
jne
mov
cmp
cmp
cmp
ds
ds
aas
add
add
add
add
xor
xor
(bad)
xor
ss
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
mov
call
ds
ds
ds
aas
fs
test
pusha
add
pop
add
add
xor
xor
xor
xor
xor
xor
adc
pop
aaa
test
cmc
aaa
sbb
cmp
cmp
cmp
mov
cmp
imul
out
idiv
sti
adc
adc
aas
dec
aas
mov
jo
add
add
adc
sbb
xor
mov
div
fdiv
sbb
aaa
xor
xor
xor
enter
addr16
xor
xor
ss
fnsave
arpl
xchg
inc
cmp
cmp
cmp
cmp
push
cmp
jge
popf
cmp
cmp
cmp
cmp
cmp
retf
cmp
and
sub
fs
add
bound
test
mov
jmp
xor
xor
ss
ss
outs
ss
xchg
test
(bad)
or
and
retf
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
into
cmp
imul
sub
cmp
aam
fidivr
call
nop
add
inc
add
add
xor
xor
shl
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
push
xor
push
xor
xor
std
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sbb
and
sub
xor
cmp
inc
xor
push
xor
pop
xor
cwde
xor
aam
fdiv
in
call
xor
cld
xor
or
or
adc
adc
sbb
sbb
and
cmp
pop
ss
ss
ss
js
jl
xor
mov
mov
nop
ss
ss
ss
mov
lods
ss
lock
ss
ss
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
aaa
inc
aaa
dec
aaa
dec
aaa
push
aaa
fs
jns
jge
nop
aaa
mov
mov
aaa
les
enter
shl
aam
fdiv
fdiv
loopne
in
call
aaa
hlt
aaa
clc
aaa
cld
aaa
add
add
or
or
adc
adc
sbb
xor
inc
cmp
pop
cmp
cmp
cmp
cmp
cmp
cmp
nop
cmp
sar
loopne
lock
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
nop
cmp
in
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
adc
xor
pop
cmp
xchg
(bad)
cmp
or
sbb
sub
xor
xor
cmp
cmp
inc
ds
ds
ds
ds
ds
ds
ds
ds
ds
mov
mov
lahf
cmps
ds
ds
cld
ds
and
xor
inc
aas
dec
aas
dec
aas
push
aas
push
aas
pop
aas
pop
aas
pusha
aas
fs
push
aas
je
js
jl
cmp
aas
xchg
aas
mov
aas
mov
aas
hlt
aas
cld
aas
add
add
add
adc
sbb
cmp
call
xor
xor
xor
lods
xor
xor
xor
xor
xor
xor
xor
xor
dec
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
jl
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
inc
xor
mov
or
push
ss
jns
jge
xor
push
aaa
or
push
aaa
adc
push
aaa
sbb
mov
xchg
aaa
xchg
aaa
sahf
aaa
movs
aaa
or
or
adc
sbb
cmp
je
cmp
cmp
cmp
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
push
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
inc
cmp
dec
cmp
push
cmp
pop
cmp
data16
outs
cmp
jbe
jp
jle
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
outs
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
adc
sbb
and
sub
xor
cmp
inc
cmp
push
cmp
pop
cmp
push
cmp
jl
cmp
cmp
cwde
cmp
movs
cmp
mov
mov
mov
cmp
ins
ds
cwde
ds
loopne
stc
ds
ss
cmp
push
aas
cmp
aas
scas
aas
sar
add
add
add
and
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sbb
and
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
xor
xor
xor
xor
xor
xor
xor
xor
xor
inc
xor
dec
xor
push
xor
pop
xor
xor
outs
xor
jbe
jp
jle
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sub
inc
xor
dec
xor
pop
xor
fs
jo
je
js
jl
xor
xor
cwde
xor
movs
xor
mov
mov
mov
xor
int3
xor
fdiv
in
call
xor
adc
and
ss
ss
ss
ss
ss
js
jl
xor
mov
mov
nop
ss
ss
ss
mov
lods
ss
mov
mov
les
enter
shl
aam
fdiv
fdiv
loopne
in
call
ss
ss
ss
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
aaa
inc
aaa
dec
aaa
dec
aaa
push
aaa
push
aaa
pop
aaa
pop
aaa
pusha
aaa
push
aaa
xchg
aaa
test
mov
aaa
shl
aam
fdiv
fdiv
loopne
in
call
aaa
hlt
aaa
clc
aaa
cld
aaa
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
nop
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
ins
cmp
je
js
jl
cmp
cmp
cmp
cmp
cmp
cmp
cmp
inc
cmp
dec
cmp
push
cmp
pop
cmp
test
mov
movs
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sub
dec
cmp
push
cmp
pop
cmp
cmp
ins
cmp
jl
mov
pushf
cmp
mov
mov
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
aam
fdivr
push
ds
dec
test
xchg
mov
ds
hlt
ds
rol
mov
add
mov
(bad)
xor
xor
xor
xor
xor
xor
xor
xor
sbb
cmp
inc
xor
dec
xor
push
xor
pop
xor
xor
ins
xor
je
inc
xor
xor
xor
cmps
xor
or
sub
push
ss
ss
ss
aaa
and
add
cmp
cmp
cmp
cmp
push
cmp
cmp
cmp
cmp
cmp
cmp
aaa
cmp
cwde
cmp
add
ins
ds
mov
mov
sub
xor
xchg
mov
fwait
aas
mov
aas
sar
aas
in
in
aas
cli
aas
(bad)
aas
add
add
add
add
xor
xor
xor
xor
xor
push
xor
imul
popf
xor
xor
xor
xor
xor
xor
xor
dec
xor
push
jge
xchg
xor
xor
xor
xor
or
xor
dec
xor
ja
xor
call
xor
pop
xor
jo
jbe
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
mov
xor
push
sub
cmp
inc
ss
ss
ss
ss
test
lea
xchg
ss
mov
ss
add
adc
xor
push
aaa
mov
xchg
aaa
mov
aaa
mov
aaa
div
add
or
cmp
cmp
cmp
push
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
(bad)
cmp
push
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
pusha
cmp
ds
xor
pop
aas
jle
mov
aas
add
add
push
add
add
xor
xor
jg
mov
test
(bad)
xor
xor
xor
xor
xor
xor
xor
xor
and
scas
ss
popf
cmp
cmp
mov
ds
ds
jle
mov
aas
add
add
push
add
add
aaa
xor
xor
push
xor
jge
icebp
xor
xor
test
xor
mov
cmp
cmp
cmp
cmp
cmp
lea
popf
cmp
cmp
cmp
cmp
cmp
push
cmp
cmp
add
js
add
pop
xor
xor
ja
xchg
pop
xor
add
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
push
cmp
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
jo
jecxz
jmp
cmp
fistp
pop
ds
ds
ds
ds
ds
xchg
(bad)
ds
add
add
add
xor
add
mov
and
out
xor
xor
jb
je
jg
lea
xor
stos
aaa
xchg
sar
fidivr
call
cmp
add
add
add
add
add
xor
xor
mov
ret
xor
xor
xchg
xor
xor
das
xor
je
xor
dec
xor
ds
jp
stos
aaa
mov
jae
ja
jnp
jg
cmp
cmp
cmp
cmp
inc
cmp
dec
cmp
jbe
jp
jle
cmp
cmp
cmp
jnp
xchg
cmp
cmp
jle
hlt
and
cmp
aas
add
add
pusha
add
add
push
xor
xor
shl
sbb
icebp
xor
xor
xor
(bad)
lds
stc
xor
ins
aaa
jle
mov
aam
repz
xchg
cmp
cmp
cmp
imul
cmp
cmp
cmp
pop
aas
xor
cmp
pusha
aas
ins
aas
jmp
icebp
aas
add
add
add
add
xor
xor
dec
xor
xor
xor
xor
xchg
xor
cli
xor
xor
push
ss
aaa
add
sbb
cmp
inc
cmp
pop
cmp
enter
jecxz
push
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
add
add
add
xor
xor
cmp
jecxz
sysenter
inc
xor
xor
xor
xor
xor
xor
sar
xchg
cmp
cmp
cmp
cmp
cmp
cmp
outs
cmp
cmp
cmp
cmp
cmp
cmp
cmp
ds
hlt
aas
add
add
add
dec
xor
jmp
xor
xor
inc
cmp
imul
pop
cmp
aas
add
add
add
add
dec
xor
xor
xor
aaa
inc
cmp
cmp
cmp
cmp
cmp
aaa
ds
add
add
cmp
in
xor
xor
cwde
xor
xor
adc
and
ss
cmp
mov
ret
cmp
push
cmp
cmp
mov
(bad)
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmps
cmp
or
dec
aas
cmp
nop
add
inc
add
add
xor
xor
xor
pop
xor
xor
push
cmp
pop
ss
aaa
fnstenv
jmp
cmp
cmp
cmp
push
ds
add
add
add
pop
xor
xor
xor
xor
arpl
xchg
cmp
cmp
cmp
cmp
cmp
cmp
jbe
js
mov
test
aas
bound
jg
add
add
cld
xor
xor
xor
xor
pusha
xor
or
xor
xor
xor
inc
ss
aaa
push
aaa
pushf
aaa
lods
aaa
dec
cmp
pop
cmp
cmp
add
clc
add
add
xor
xor
mov
stos
xor
cmps
xor
lods
ss
shl
ss
xor
aaa
shl
(bad)
cmp
cmp
cmp
cmp
cmp
cmp
inc
cmp
push
cmp
arpl
push
cmp
mov
lea
xchg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
pop
cmp
cmp
cmp
cmp
cmp
cmp
sbb
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sub
dec
cmp
je
jns
mov
cmps
cmp
les
loope
out
cmp
add
adc
push
sub
(bad)
ds
aas
add
add
cmp
add
test
iret
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
sbb
xor
jo
js
jge
test
dec
ss
ss
ss
aaa
pop
aaa
lahf
aaa
ret
cmp
cmp
inc
cmp
dec
cmp
cmp
cmp
cmp
cmp
inc
cmp
dec
cmp
push
cmp
pop
cmp
cmp
outs
cmp
jbe
jp
jle
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
ds
ds
cmp
dec
ds
ds
jl
test
mov
mov
nop
ds
ds
ds
mov
ds
ds
ds
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
aas
inc
aas
dec
aas
dec
aas
push
aas
push
aas
pop
aas
pop
aas
pusha
aas
fs
ins
aas
test
call
loopne
add
add
mov
shl
xor
xor
dec
xor
pop
xor
jmp
xor
xor
xor
xor
xor
xor
xor
jmp
cmp
cmp
xchg
cmp
cmp
cmp
cmp
pop
cmp
loope
push
cmps
ds
out
idiv
or
aas
add
add
add
or
add
movs
xor
xor
xor
xor
xor
mov
cwde
xor
dec
xor
xchg
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
pop
xor
push
xor
jl
xor
xor
cwde
xor
movs
xor
mov
mov
mov
xor
int3
xor
lock
adc
es
cmp
inc
ss
ss
ss
jl
xor
mov
nop
ss
ss
ss
mov
lods
ss
mov
mov
les
enter
shl
aam
fdiv
fdiv
loopne
in
repnz
cli
ss
ss
sub
das
aaa
inc
aaa
push
aaa
pusha
aaa
push
aaa
je
js
jl
xor
aaa
mov
mov
nop
aaa
xchg
aaa
cwde
aaa
pushf
aaa
mov
aaa
lods
aaa
mov
mov
mov
aaa
les
enter
shl
aam
fdiv
fdiv
loopne
in
call
aaa
hlt
aaa
clc
aaa
cld
aaa
add
add
or
or
adc
adc
sbb
sbb
and
xor
inc
cmp
pop
cmp
ins
cmp
jl
test
mov
mov
nop
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sub
cmp
dec
cmp
cmp
xchg
cmp
cmp
mov
mov
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
mov
cmp
cmp
cmp
cmp
cmp
cmp
and
add
add
add
xor
shl
xor
xor
xor
xor
xor
xor
pop
xor
xor
xor
xor
xor
xchg
ss
aaa
inc
cmp
pusha
cmp
mov
stos
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
cmp
push
cmp
cmp
mov
xchg
cmp
cmp
cmp
cmp
cmp
inc
cmp
jns
cmp
mov
cmp
cmp
cmp
aas
cmp
cmp
cmp
cmp
mov
mov
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
fs
lods
cmp
das
ds
dec
ds
jle
mov
ds
ss
ins
aas
jg
test
pushf
aas
add
add
add
xor
xor
xor
cmp
xor
xor
xor
xor
xor
xor
cmp
xor
jl
xor
xor
cwde
xor
test
lods
xor
xor
enter
shl
aam
fdiv
fdiv
loopne
in
call
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
retf
xor
data16
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
push
xor
sbb
es
xor
ds
dec
xor
push
xor
bound
jl
lea
mov
xor
fdiv
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
ss
ss
ss
ss
ss
ss
ss
ss
ss
ss
js
jl
xor
mov
mov
nop
ss
ss
ss
mov
lods
ss
mov
mov
les
enter
shl
aam
fdiv
fdiv
loopne
in
call
ss
ss
ss
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
xor
aas
aaa
inc
aaa
push
aaa
pop
aaa
jb
jp
jle
call
aaa
fbstp
out
or
adc
adc
cmp
cmp
jae
jg
xchg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
adc
adc
sub
cmp
cmp
cmp
push
cmp
pop
cmp
jg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
inc
cmp
ins
cmp
cmp
cmp
cmp
cmp
cmp
inc
cmp
popa
cmp
jge
test
mov
sahf
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
xor
cmp
xchg
scas
cmp
iret
cmp
or
xor
push
ds
ds
ds
test
mov
lahf
cmps
ds
ds
ds
in
ds
or
push
aas
das
aas
pop
aas
xchg
xchg
aas
lods
aas
mov
aas
icebp
aas
std
aas
add
add
add
add
xor
outs
xor
xchg
xor
xor
xor
xor
xor
xor
xor
jge
xchg
xor
xor
xor
xor
dec
xor
xor
(bad)
xor
xor
xor
xor
xor
ja
sahf
xor
xor
xor
xor
and
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
adc
sbb
and
sub
xor
cmp
inc
xor
dec
xor
pop
xor
fs
jo
je
js
jl
xor
xor
cwde
xor
movs
xor
mov
mov
mov
xor
int3
xor
fdiv
in
call
xor
cld
xor
or
or
adc
adc
sub
xor
xor
cmp
cmp
inc
ss
ss
ss
ss
ss
jns
xchg
mov
(bad)
ss
shl
fdiv
fdiv
loopne
in
call
ss
ss
or
adc
sbb
sub
xor
xor
cmp
cmp
inc
aaa
inc
aaa
dec
aaa
dec
aaa
push
aaa
push
aaa
pop
aaa
pop
aaa
pusha
aaa
fs
push
aaa
je
js
jl
xor
aaa
mov
aaa
shl
aaa
loopne
or
sbb
sbb
sub
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
mov
cmp
cmp
cmp
cmp
cmp
sbb
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
jns
xchg
(bad)
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
pop
cmp
jns
xchg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
pop
cmp
jns
cmp
cmp
mov
retf
cmp
ja
lea
mov
(bad)
idiv
dec
aas
(bad)
aas
in
add
add
add
xor
outs
xor
xor
xor
xor
xor
xor
lea
xor
jp
jle
xor
aaa
mov
mov
xchg
aaa
mov
mov
cmp
cmp
cmp
cmp
push
cmp
cmp
cmp
cmp
cmp
idiv
mov
inc
add
add
fnsave
and
push
xor
xchg
xor
xor
xor
xor
jne
call
xor
inc
ss
ss
aaa
popa
aaa
xor
aaa
lods
aaa
(bad)
jmp
cmp
cmp
cmp
cmp
cmp
mov
out
movs
cmp
cmp
cmp
sar
aas
ds
inc
aas
inc
aas
dec
aas
dec
aas
push
aas
push
aas
lock
(bad)
aas
add
add
xor
xor
xor
xor
mov
call
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
loop
push
aaa
je
xor
aaa
cmc
aaa
push
cmp
push
cmp
cmp
cmp
gs
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
xchg
cmp
add
add
add
xor
xor
fdiv
loope
out
xor
xor
mov
xor
xor
xor
xor
shl
out
sbb
xor
pop
cmp
cmp
cmp
cmp
cmp
cmp
jmp
cmp
cmp
cmp
cmp
cmp
pop
ds
add
add
add
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
push
xor
xor
xor
xor
xor
xor
push
xor
xchg
xor
retf
ss
ss
ss
mov
div
or
pop
aaa
das
aaa
popa
aaa
jbe
xor
aaa
mov
cmp
cmp
push
cmp
cmp
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
ins
or
dec
aas
pop
aas
fwait
aas
add
add
cmp
pop
xor
jno
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
loope
add
dec
aaa
jo
push
cmp
(bad)
cmp
inc
cmp
cmp
cmp
cmp
(bad)
cmp
add
add
add
pop
xor
xor
jne
xor
xor
xor
xor
xor
xor
pop
aaa
push
aaa
sub
aaa
enter
add
sbb
xor
inc
cmp
pop
cmp
cmp
pop
cmp
jae
cmp
adc
and
cmp
jl
mov
xchg
cmp
cmp
cmp
jne
call
cmp
cmp
cmp
xchg
cmp
add
test
aas
sar
add
add
add
adc
dec
xor
xor
xor
inc
xor
jle
lahf
xor
xor
xor
xor
xor
xor
xor
xor
xor
ins
xor
xor
xor
xor
xor
xor
xor
pop
xor
cmps
xor
xor
xor
xor
cmp
cmp
cmp
inc
cmp
cmp
cmp
mov
fdivr
add
add
adc
sbb
pop
xor
xor
dec
xor
ins
xor
xor
xor
xor
adc
and
(bad)
out
adc
pop
xor
xor
xor
dec
xor
and
cmp
pop
xor
xor
xor
xor
xor
xor
enter
jae
push
adc
sbb
sub
ss
cmp
cmp
pop
cmp
dec
cmp
popa
cmp
cmp
jle
cmp
cmp
cmp
jge
adc
sbb
es
inc
aas
inc
aas
fs
outs
aas
mov
aas
out
(bad)
aas
add
add
add
xor
xor
dec
xor
imul
xchg
lea
xchg
xor
xor
xor
outs
xor
xor
xor
xor
xor
xor
xor
xor
pop
xor
xor
and
xor
xor
xor
xor
xor
xor
out
xor
(bad)
sbb
push
ss
ss
ss
outs
xor
aad
xor
push
aaa
outs
aaa
fidiv
jmp
add
and
push
or
sbb
cmp
xchg
cmp
cmp
cmp
cmp
cmp
sub
cmp
dec
cmp
sar
fistp
repnz
dec
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
mov
lods
ds
mov
mov
les
enter
sar
aam
fdivr
fdivr
loopne
in
add
add
add
add
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
pop
xor
push
add
push
cmp
cmp
cmp
movs
cmp
arpl
jl
mov
(bad)
ds
sub
fistp
repz
add
add
add
add
xchg
xor
xor
xor
xor
xor
retf
xor
xor
xor
xor
int
add
sbb
nop
ss
cmps
ss
mov
or
push
aaa
arpl
scas
aaa
mov
lds
retf
aaa
add
sub
push
cmp
mov
daa
cmp
pusha
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cs
ds
idiv
jne
mov
add
lock
add
stos
xor
push
sbb
mov
add
xor
xor
shl
ss
cmp
jbe
xchg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
es
dec
cmp
je
js
jl
cmp
cmp
cwde
cmp
movs
cmp
mov
mov
mov
cmp
in
jmp
or
adc
xor
cmp
cmp
inc
ds
ds
ds
ds
ds
ds
ds
ds
ds
mov
xchg
ds
ds
mov
lods
ds
mov
mov
les
enter
sar
aam
fdivr
fdivr
loopne
in
call
ds
ds
ds
add
add
or
or
adc
adc
sbb
sbb
sub
cmp
inc
aas
lock
add
add
push
add
add
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
dec
xor
mov
popf
xor
sub
push
xor
in
pop
xor
xor
xor
shl
fidiv
push
aaa
fdiv
call
cmp
cmps
cmp
cmp
cmp
cmp
cmp
icebp
outs
aas
jae
test
add
add
push
add
add
add
xor
xor
xor
stc
xor
xor
xor
xor
push
xor
aaa
mov
ret
aaa
(bad)
aaa
retf
aaa
iret
aaa
shl
add
(bad)
add
and
add
add
div
xor
pop
xor
sub
xor
in
cmp
cmp
or
or
cmp
cmp
cmp
xor
add
add
add
cmp
cmp
cmp
cmp
cmp
add
add
add
add
cmps
xor
xor
xor
cmp
cmp
ds
sbb
mov
push
push
add
add
push
xchg
mov
ret
cmp
mov
retf
cmp
cmp
sbb
inc
cmp
cmp
pusha
push
add
add
add
jno
jge
(bad)
ss
shl
aaa
dec
aaa
dec
aaa
add
add
add
add
mov
cmp
cmp
cmp
lds
fdivr
add
add
(bad)
xor
xor
xor
add
nop
push
add
add
xor
xor
xor
xor
xor
mov
ret
fdiv
jmp
cmp
cmp
add
sub
ds
aas
add
add
add
arpl
jb
jnp
mov
push
xor
xor
xor
add
mov
add
add
push
cmp
or
rol
push
ss
or
push
adc
push
sbb
push
and
inc
ss
ss
ss
ss
ss
ss
bound
ss
outs
ss
jbe
jp
jle
push
cmp
push
cmp
cmp
cmp
cmp
cmp
mov
lea
pushf
aas
mov
aas
les
leave
aas
add
add
push
add
add
add
xor
xor
xor
xor
xor
xor
xor
xor
test
jbe
add
add
push
add
add
add
push
xor
mov
push
add
add
add
sub
xor
repnz
xor
ss
ss
aaa
jmp
add
pop
add
add
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
pop
xor
cmps
xor
leave
cmp
pop
xchg
cdq
ds
ds
add
add
add
xor
ins
xor
xor
xor
xor
xor
xor
je
test
xor
cmp
cmp
fnstsw
add
pop
add
add
add
xor
xor
mov
mov
xor
xor
xor
xor
xor
cmp
cmp
sbb
add
adc
aas
xor
push
xor
push
mov
cwde
xor
mov
mov
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
jle
(bad)
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
cmp
ss
ss
aaa
push
aaa
jecxz
out
aaa
and
outs
cmp
cmp
cmp
cmp
cmp
pop
arpl
and
sub
aas
add
add
add
inc
xor
jle
inc
xor
xor
xor
xor
mov
push
aaa
push
aaa
sub
inc
cmp
mov
mov
ds
sbb
sub
add
add
inc
xor
cld
xor
xor
xor
xor
mov
leave
xor
arpl
das
cmp
cmp
push
cmp
jle
nop
cmp
mov
int3
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
sbb
and
inc
cmp
dec
cmp
pop
cmp
cmp
ins
cmp
je
js
test
mov
mov
nop
cmp
test
in
call
cmp
adc
adc
sbb
and
sub
cmp
inc
cmp
cmp
add
add
add
add
adc
sbb
pop
xor
xor
xor
xor
xor
jb
jl
xchg
nop
xor
xor
xor
xor
xor
xor
xor
xor
xor
push
xor
imul
js
jge
xor
xor
xor
xor
(bad)
xor
xor
xor
xor
xor
xor
xor
aaa
xor
dec
xor
xor
outs
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
dec
xor
pusha
xor
jno
js
xor
xor
mov
xor
(bad)
xor
xor
jbe
jle
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sbb
xor
je
jle
mov
sahf
xor
mov
xor
out
xor
sbb
ss
ss
ss
ss
ss
imul
mov
nop
ss
mov
ss
ss
ss
in
icebp
ss
ss
aaa
xor
inc
aaa
dec
aaa
push
aaa
pop
aaa
gs
outs
aaa
jnp
xor
aaa
into
aaa
(bad)
in
icebp
aaa
push
push
cmp
cmp
cmp
cmp
cmp
jo
add
xor
xor
cld
xor
cmp
and
and
sub
sub
xor
xor
sbb
sub
sub
push
cmp
cmp
cmp
nop
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
dec
cmp
pop
cmp
push
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
dec
cmp
cmp
cmp
cmp
pushf
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
adc
sbb
and
sub
xor
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sbb
and
sub
xor
cmp
inc
cmp
pop
cmp
je
in
ds
ds
ds
or
adc
sbb
and
sub
xor
cmp
inc
aas
dec
aas
push
aas
pop
aas
fs
ins
aas
je
jl
test
mov
xchg
aas
pushf
aas
movs
aas
lods
aas
mov
mov
aas
aam
fdivr
in
in
aas
hlt
aas
cld
aas
add
add
add
add
or
adc
sbb
and
sub
xor
cmp
inc
xor
xor
xor
xor
xor
movs
xor
les
int3
xor
xor
xor
xor
xor
xor
xor
or
adc
sbb
and
sub
xor
cmp
inc
xor
xor
xor
xor
xor
movs
xor
les
int3
xor
xor
xor
xor
xor
xor
xor
or
adc
sbb
and
sub
xor
cmp
inc
xor
xor
xor
xor
xor
movs
xor
les
int3
xor
xor
xor
xor
xor
xor
xor
or
adc
sbb
and
sub
xor
inc
xor
xor
xor
pop
xor
xor
ins
xor
je
js
jl
xor
xor
xor
mov
xor
clc
xor
xor
sbb
xor
dec
xor
pusha
xor
js
xor
xor
and
and
sub
sub
xor
xor
cmp
cmp
inc
ss
ss
ss
ss
ss
ss
ss
ss
ss
ss
js
jl
mov
aaa
in
call
aaa
hlt
aaa
add
add
or
sbb
add
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
adc
sbb
and
sub
xor
cmp
inc
xor
dec
xor
pop
xor
fs
jo
je
js
jl
xor
xor
cwde
xor
movs
xor
mov
mov
mov
xor
int3
xor
fdiv
in
call
xor
cld
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
ss
ss
ss
ss
ss
ss
ss
ss
ss
ss
js
jl
xor
mov
mov
nop
ss
ss
ss
mov
lods
ss
mov
mov
les
enter
shl
aam
fdiv
fdiv
loopne
in
call
ss
ss
ss
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
aaa
inc
aaa
dec
aaa
dec
aaa
push
aaa
push
aaa
pop
aaa
pop
aaa
pusha
aaa
fs
push
aaa
je
js
jl
xor
aaa
mov
mov
nop
aaa
xchg
aaa
cwde
aaa
pushf
aaa
mov
aaa
lods
aaa
mov
mov
mov
aaa
les
enter
shl
aam
fdiv
fdiv
loopne
add
add
add
or
stos
xor
jp
xchg
xor
xor
out
xor
dec
xor
sbb
dec
cmp
cmp
jp
add
add
pushf
xor
popa
cmp
ds
ds
add
sbb
leave
aas
add
add
mov
xor
xor
xor
aaa
push
cmp
cmp
ds
aas
add
add
or
xor
xor
xor
cmp
cmp
add
mov
idiv
add
or
sbb
add
stos
xor
xor
xor
cmp
xchg
add
add
or
or
add
clc
cmp
or
loopne
add
add
add
cmp
pop
cmp
cmp
cmp
add
add
or
sbb
add
mov
adc
xchg
xor
xor
sar
clc
cmp
aas
add
or
sbb
add
mov
xor
xor
push
pop
cmp
cmp
add
and
add
add
add
cld
xor
jbe
xchg
ds
xor
add
add
xor
aaa
and
add
add
add
add
add
xor
xor
jbe
mov
xor
dec
cmp
test
cmp
cmp
cmp
cmp
cmp
xchg
aas
test
add
add
add
xor
xor
xor
pop
xor
ins
xor
je
popf
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
jge
test
nop
xor
pushf
xor
lock
cld
xor
shl
ss
out
sub
xor
jge
cdq
aaa
mov
add
xor
xchg
cmp
cmp
cmp
xchg
cmp
add
cmp
cmp
cmp
cmp
cmp
cmp
xor
dec
sar
cmc
adc
sbb
and
aaa
aas
push
aas
ins
aas
jne
test
mov
cwde
aas
mov
aas
add
add
add
add
loope
or
mov
xor
xor
xor
xor
dec
xor
jle
lods
xor
xor
xor
xor
sub
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
lods
xor
xchg
mov
in
ss
ss
aaa
push
aaa
push
aaa
bound
push
aaa
xchg
aaa
mov
aaa
(bad)
loope
call
aaa
sti
aaa
add
or
(bad)
cmp
cmp
xor
cmp
inc
cmp
dec
cmp
cmp
xchg
mov
xchg
cmp
cmp
cmp
cmp
cmp
cmp
outs
cmp
cmp
cmp
addr16
aad
out
add
add
add
xor
xor
pop
xor
scas
xor
xor
xor
xor
xor
xor
push
xor
xor
xor
xor
xor
push
xor
jl
fs
xor
xor
xor
xor
mov
xor
imul
fbstp
push
aaa
daa
aaa
jbe
xor
aaa
hlt
cmp
cmp
cmp
sbb
inc
cmp
xchg
aas
add
add
add
pop
xor
ins
xor
jl
xor
xor
cwde
xor
and
inc
cmp
nop
cmp
cmp
push
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
dec
cmp
jge
or
push
ds
ds
ds
mov
jecxz
jmp
sub
xor
aas
add
add
dec
xor
mov
shl
xor
xor
xor
ins
xor
xchg
xchg
xor
push
xor
imul
loope
div
sbb
xor
xor
xor
push
xor
cmps
xor
ret
xor
cld
xor
xor
lods
ss
int3
shl
popf
aaa
mov
cmp
cmp
and
jnp
xchg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
ds
ds
bound
imul
cmp
ds
mov
mov
ds
jmp
aas
or
push
aas
sbb
pop
aas
xor
cmp
dec
aas
push
aas
pop
aas
arpl
jo
jbe
mov
aas
add
add
add
mov
xor
xor
xor
xor
ss
xor
and
sub
inc
aaa
push
aaa
push
jno
mov
cmp
cmp
cmp
cmp
cmp
cmp
jge
or
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
push
cmp
pusha
cmp
in
cmp
cld
cmp
dec
ds
test
mov
mov
nop
ds
ds
ds
mov
ds
ds
ds
add
add
add
sub
jb
mov
xor
xor
jl
stos
xor
xor
dec
xor
pop
xor
addr16
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
and
lea
lock
cmp
aaa
stos
aaa
in
aaa
jl
call
cmp
ror
mov
xor
xor
(bad)
xor
xor
lea
pushf
xor
xor
xor
xor
xor
xor
xor
xor
xor
push
xor
xor
xor
xor
xor
xor
pop
lods
sbb
gs
cmp
cmp
and
cmp
cmp
pop
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
dec
cmp
sbb
pop
aas
and
aas
cmp
aas
aas
inc
aas
dec
aas
push
aas
pop
aas
bound
push
jb
jp
xchg
(bad)
aas
xchg
aas
call
aas
leave
aas
fidivr
jmp
add
add
dec
xor
xor
push
xor
xor
xor
xor
(bad)
xor
xor
xor
dec
xor
arpl
mov
lahf
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
lahf
xor
aas
aaa
mov
mov
cmp
jecxz
(bad)
aaa
cmp
cmp
cmp
cmp
cmp
cmp
ds
hlt
ds
fistp
add
add
or
push
add
add
xor
xor
sbb
sub
cmp
inc
xor
jae
jp
xor
jne
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
inc
xor
push
xor
ja
jle
xor
xor
lock
sub
add
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
les
enter
add
or
lock
add
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
nop
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
pop
cmp
fs
jo
je
js
jl
test
mov
mov
lock
hlt
aas
clc
aas
cld
aas
add
add
or
inc
add
add
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
aam
fdiv
call
xor
sbb
and
xor
xor
cmp
inc
xor
pop
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sbb
xor
inc
xor
pop
xor
xor
xor
xor
les
enter
fdiv
loopne
call
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
adc
cmp
inc
xor
jl
test
movs
xor
fdiv
and
inc
ss
xor
ss
mov
shl
lock
sub
xor
push
aaa
ins
aaa
jo
nop
aaa
mov
shl
lock
adc
xor
push
cmp
cmp
mov
sar
lock
cmp
cmp
pop
cmp
test
mov
xchg
cmp
cmp
add
or
add
add
add
add
sbb
and
cmp
mov
xor
or
sbb
sub
dec
ss
ss
ss
ss
ss
aaa
add
or
adc
sbb
and
sub
xor
cmp
inc
cmp
cmp
cmp
cmp
cmp
movs
cmp
les
dec
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
nop
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sbb
sbb
and
and
sub
sub
xor
xor
inc
cmp
pop
cmp
cmp
fdivr
call
cmp
cld
cmp
cmp
pop
aas
jl
movs
aas
les
enter
add
add
add
sub
dec
xor
xor
or
sbb
add
pop
xor
shl
cmp
aas
add
add
or
adc
add
into
xor
xor
xor
cmp
add
and
adc
add
aaa
xor
jbe
or
xor
sbb
add
jb
jl
dec
xor
cmp
cmp
cmp
cmp
or
sbb
add
shl
xor
clc
cmp
in
ds
aas
add
add
add
pop
xor
xor
aaa
sahf
cmp
pusha
or
adc
add
fwait
xor
xor
cmp
add
jo
add
add
xchg
aas
add
add
add
adc
into
aas
add
add
arpl
fdivr
cwde
cmp
add
ror
adc
add
lea
out
cmp
ds
add
or
sbb
add
xor
xor
xor
cmp
fdivr
xor
add
add
or
adc
add
xchg
xor
cmp
jbe
add
or
add
xor
xor
aaa
loopne
add
or
add
xchg
aaa
jo
mov
cmp
add
or
add
xor
add
xor
add
xor
xor
cwde
xor
push
inc
or
add
cmp
xchg
add
add
add
add
mov
(bad)
aaa
cmp
add
add
add
in
aaa
add
add
add
add
dec
xor
cmp
cmp
aas
add
add
add
aad
dec
xor
xor
xor
ss
aaa
jbe
and
push
aas
add
add
add
dec
ss
div
and
sti
cmp
push
add
add
lods
ss
aaa
dec
cmp
aas
add
add
sub
ss
cmp
jmp
imul
add
add
xor
xor
scas
xor
cmp
cmp
add
ror
add
xor
cmp
cmp
ds
or
add
xor
aaa
hlt
cmp
add
add
or
add
sahf
xor
sbb
add
add
add
add
xor
xor
adc
add
add
call
xor
xor
cmp
and
add
add
add
(bad)
sub
jae
add
push
add
add
add
nop
aaa
mov
xchg
cmp
push
add
add
or
dec
cmp
push
push
add
add
add
xor
xor
add
add
add
wrmsr
sbb
shl
xor
xor
xor
adc
add
add
add
add
xor
cmp
adc
add
add
cmp
push
add
add
bound
sub
test
xor
xchg
xor
scas
cmp
adc
add
aad
sahf
cmp
ror
or
add
ret
xor
cmp
ror
add
add
push
xor
xor
xor
push
add
add
add
cmp
cmp
add
push
add
add
add
xor
cmp
cmp
cmp
cmp
ds
stc
aas
add
add
verr
add
sub
and
aaa
or
pop
cmp
out
cmp
aas
add
add
str
add
clc
aaa
inc
cmp
and
add
add
add
xor
cld
xor
xor
pushf
cmp
cmp
add
str
add
dec
cmp
or
inc
lldt
add
int
mov
sar
in
inc
cmp
add
add
xchg
sbb
add
adc
add
mov
adc
mov
jo
add
add
add
cmp
cmp
cmp
add
add
add
jmp
ss
jmp
cmp
lldt
add
add
xor
add
add
add
ss
ss
aaa
xchg
aaa
sar
add
mov
add
add
add
xor
aaa
aas
aaa
dec
aaa
add
ltr
add
add
int
xchg
cmp
cmp
cmp
add
lldt
add
dec
aaa
mov
retf
cmp
aas
fidivr
add
lldt
add
pop
xor
xor
xor
xor
add
lldt
add
add
aam
push
ds
add
adc
adc
add
je
cld
xor
cmp
add
adc
add
add
add
jnp
mov
fbstp
add
adc
sub
add
mov
or
xor
xor
xor
cmp
jae
cmps
cmp
cmp
mov
cmp
mov
add
add
adc
sbb
add
jne
inc
xor
sub
imul
add
add
add
add
cmp
cmp
push
adc
adc
add
inc
xor
cmp
cmp
adc
sbb
add
ja
sahf
xor
(bad)
xor
aaa
mov
sar
dec
cmp
jo
add
add
les
jb
add
add
pop
xor
and
sub
sbb
cmp
cmp
and
add
shl
jo
cmps
aaa
sahf
cmp
cmp
lock
cmp
mov
add
add
add
(bad)
jmp
cs
add
add
add
dec
xor
adc
sub
add
rcl
adc
add
xchg
cmp
push
cmp
or
rcl
add
add
adc
add
add
add
add
stos
aas
add
add
add
add
add
xor
xor
xchg
cmp
mov
sbb
add
test
shl
ss
aaa
xchg
call
cmp
adc
and
add
push
sbb
imul
jmp
sbb
cmp
inc
cmp
out
cmp
cmp
cmp
adc
adc
add
hlt
xor
add
mov
add
mov
xor
adc
adc
add
sti
xor
xor
xor
ss
add
add
adc
sbb
add
imul
xor
xchg
cmp
cmp
aas
add
adc
and
add
std
xor
xchg
aaa
aad
push
cmp
cmp
cmp
fidivr
lods
aas
add
or
add
jno
call
add
add
or
xor
add
adc
adc
add
xchg
xor
or
cmp
adc
adc
add
mov
xor
bound
adc
sbb
add
cli
xlat
aaa
call
cmp
push
add
adc
sbb
add
jno
scas
xor
xor
fwait
cmp
cmp
aas
add
add
add
pop
xor
enter
jmp
and
cmp
add
push
adc
adc
add
pop
xor
xor
xor
cmp
add
add
add
add
add
pop
xor
add
add
add
add
sbb
xor
add
add
add
add
push
enter
and
add
add
dec
xor
cmps
aaa
cmps
cmp
mov
add
shl
xor
add
add
cmps
xor
xor
xor
sbb
retf
cmp
cmp
add
adc
adc
add
iret
xor
xor
cmp
cmp
adc
add
sbb
jae
(bad)
cmp
cmp
cmp
push
add
adc
sbb
add
mov
cmp
cmp
cmp
cmp
cmp
add
add
adc
adc
add
cmp
xor
sbb
add
add
add
aaa
lds
xor
inc
cmp
cmp
cmp
add
adc
add
xor
xor
mov
cmp
cmp
scas
cmp
outs
cmp
add
adc
add
xor
add
add
adc
add
xor
push
xor
xor
xor
mov
mov
aaa
xchg
aaa
fidiv
call
cmp
add
inc
adc
add
xor
aaa
add
add
add
add
repnz
cmp
ds
hlt
add
add
add
shl
mov
mov
pushf
cmp
cmp
aas
ret
jo
add
add
add
xor
bound
shl
push
cmp
adc
push
xor
cmp
nop
adc
add
ss
xor
adc
add
fwait
xor
xor
xor
(bad)
ss
aas
add
add
or
add
(bad)
xor
ds
adc
add
xor
cmp
rcl
add
xor
xor
add
adc
add
scas
xor
xor
ss
cmp
add
lock
add
xor
xor
xor
xor
in
ss
add
push
add
add
add
xor
call
cmp
push
add
add
sub
pop
xor
ds
add
add
add
fidivr
mov
xor
add
add
add
cld
cmp
sub
or
add
and
mov
and
add
shl
sub
xor
jae
lods
aaa
and
push
cmp
pop
cmp
add
pusha
push
add
add
dec
ss
add
add
add
and
out
push
cmp
add
add
mov
cmp
cmp
cmp
cmp
push
add
add
add
xor
cmp
cmp
add
add
call
mov
add
add
lods
xor
xor
mov
fnsave
rdmsr
adc
jno
ins
cmp
add
rcl
add
add
add
aaa
jnp
xlat
cmp
add
push
add
add
shl
push
add
add
mov
ss
cmp
add
add
add
add
xor
add
adc
add
add
pop
add
add
pop
add
add
jp
lea
push
mov
push
cmp
je
int
add
add
pop
add
add
sbb
inc
pop
add
add
pusha
cmp
or
push
pop
add
add
add
ss
cmp
cmp
cmp
cmp
aas
add
add
add
add
add
dec
cmp
int
add
add
add
add
outs
xor
add
add
add
push
xor
add
add
(bad)
xor
xor
mov
add
shl
add
add
aas
xor
std
add
add
pop
add
add
pop
cmp
or
rcl
add
add
(bad)
xor
cmp
add
pop
add
add
add
xchg
xor
xor
ss
iret
cmp
cmp
jg
or
add
pop
add
add
add
cmp
sbb
and
add
ret
xor
cmp
cmp
dec
aas
pop
aas
add
add
sbb
adc
add
ja
cmp
lds
sbb
add
push
xor
xor
cmp
add
add
sbb
sbb
add
add
fidiv
add
and
mov
test
add
add
add
shl
xor
lock
push
sbb
sbb
add
cmp
aaa
xor
xor
xor
xor
cmp
cmp
cmp
cmp
sbb
adc
add
sbb
cdq
xor
cmp
cmp
jo
add
add
add
xor
xor
cmp
cmp
add
sbb
adc
add
pop
xor
xor
xor
cmps
cmp
add
nop
sbb
sbb
add
int3
xor
addr16
ret
cmp
add
mov
add
mov
sub
add
adc
lea
add
add
lahf
xor
xor
rcr
or
add
call
jp
(bad)
call
shl
fcomi
rcr
sbb
ds
call
lea
xchg
xor
adc
jb
mov
fsubr
enter
sub
pop
lods
inc
pop
adc
mov
cmp
push
repz
sub
inc
shl
stc
icebp
ror
xchg
in
or
jp
add
mov
push
push
lea
add
jo
nop
in
sahf
ja
mov
cld
cld
xor
fwait
push
adc
mov
outs
push
sub
pop
xor
inc
mov
inc
cmp
cdq
sbb
(bad)
push
sbb
call
out
inc
sbb
leave
add
cli
xchg
sub
inc
cwde
adc
mov
jl
inc
cld
bound
cmps
push
ja
scas
mov
pop
add
fcom
add
lea
pop
repz
test
sbb
mov
jo
adc
push
movs
fwait
imul
add
xor
and
lock
pop
push
in
xlat
jo
mov
sbb
(bad)
mov
push
xchg
cmps
mov
adc
jecxz
bnd
outs
popa
fisub
cld
mov
ja
dec
cmp
add
fstp
or
add
dec
mov
(bad)
pop
and
add
xchg
jno
cmp
imul
leave
cli
rcr
xchg
aam
jmp
mov
cli
mov
jo
push
mov
sub
jns
adc
loope
fistp
sbb
xor
stos
and
xor
(bad)
jg
jp
call
js
push
iret
and
and
mov
ss
scas
sbb
push
in
sbb
pop
gs
ja
jbe
adc
sbb
je
pop
pop
jae
sbb
sbb
addr16
sub
xor
sbb
pop
dec
jae
dec
xor
add
test
in
sub
push
sbb
xchg
je
sbb
sbb
pop
push
jnp
xor
jo
sbb
push
sbb
push
in
pop
jae
dec
jbe
fcom
sbb
sbb
imul
sbb
sbb
in
sbb
loopne
nop
sub
push
inc
jmp
pushf
in
adc
inc
jp
ja
push
rdpmc
jae
push
dec
jnp
int3
ja
or
add
add
push
jle
jns
push
inc
in
adc
in
ja
sub
sbb
push
sbb
retf
mov
ss
adc
lods
iret
adc
push
mov
sbb
jl
ja
and
bnd
hlt
xor
xor
jp
add
je
enter
jmp
js
jecxz
mov
add
or
movs
ins
add
add
push
inc
cmp
pop
(bad)
inc
xchg
dec
sub
sbb
(bad)
xor
mov
pushf
push
repz
pop
mov
clc
mov
ins
add
add
jl
or
rol
fsub
add
mov
cmp
inc
add
push
add
xchg
or
sbb
fdiv
adc
or
xchg
test
ins
dec
sbb
xchg
cld
mov
push
hlt
pop
ins
add
rol
jnp
jp
mov
cmp
add
push
hlt
sti
ins
and
call
push
add
pusha
add
pushf
fs
ds
pop
jp
mov
cmps
(bad)
lds
add
mov
out
lods
sbb
xor
cdq
fmul
mov
dec
int3
inc
dec
pushf
out
xor
xor
adc
add
xchg
fprem1
cmp
inc
arpl
loope
dec
les
add
enter
pushf
jmp
mov
fmul
ss
xchg
xor
dec
push
movs
dec
jl
push
push
jmp
ins
mov
xor
daa
retf
inc
dec
xor
push
bound
jns
adc
jle
imul
dec
sbb
jl
(bad)
pop
pop
jbe
aad
xchg
ret
jmp
movs
add
mov
xchg
in
imul
sub
sbb
jg
push
lahf
aad
dec
or
cmp
and
push
add
cdq
test
outs
and
mov
pop
push
sbb
push
les
or
dec
in
xor
add
sub
bound
out
xor
scas
xor
push
xor
pop
cdq
add
test
push
and
fs
inc
inc
call
test
imul
xor
push
int
and
je
cdq
retf
adc
push
sbb
std
fstp
cmc
pop
mov
add
and
out
or
push
xchg
pop
xor
call
imul
nop
sub
imul
sahf
test
ret
lds
dec
push
retf
mov
rcl
xchg
sbb
out
xchg
leave
aam
sbb
hlt
pop
add
ret
aaa
sub
xor
test
repnz
adc
shl
in
fmul
adc
xor
retf
ficom
adc
mov
xchg
inc
adc
cmp
imul
stos
push
ficomp
in
js
fadd
leave
hlt
jmp
adc
xlat
xor
jp
cs
add
sbb
sbb
cld
aaa
cdq
jmp
push
add
les
push
pushf
dec
sbb
or
cdq
dec
pop
mov
add
inc
loopne
sbb
ret
xor
add
xchg
mulps
icebp
dec
mov
int3
nop
ins
sub
dec
push
add
icebp
mov
or
loopne
xchg
aam
adc
lods
adc
add
imul
xchg
inc
(bad)
jmp
and
sar
shr
jne
leave
xchg
fidivr
mov
add
or
mov
test
jge
xor
or
mov
jecxz
xor
stos
adc
lods
mov
cwde
sahf
add
push
sbb
adc
xlat
aam
adc
xchg
int3
(bad)
cmps
add
mov
sbb
test
sbb
popf
adc
imul
(bad)
push
xchg
jge
int3
sub
push
nop
mov
lods
and
mov
imul
add
pop
add
mov
xchg
aas
jne
mov
adc
sub
test
(bad)
addr16
and
push
repz
mov
ficomp
in
addr16
xchg
movs
fs
dec
int3
pushf
sub
pop
lods
sbb
fs
push
cdq
vmovlpd
xchg
(bad)
mov
stos
mul
xchg
xor
add
fs
adc
sub
push
and
pop
adc
push
xchg
push
imul
xor
jmp
ds
cs
rol
cmc
dec
(bad)
repz
mov
shr
rol
leave
cld
sub
fmul
(bad)
fcos
repz
inc
push
leave
stos
call
sbb
shl
(bad)
idiv
cdq
pushf
add
hlt
in
inc
(bad)
rcl
sub
inc
xchg
pop
or
jns
or
pusha
ins
push
sub
js
add
inc
xchg
sub
into
gs
xchg
and
imul
xor
jge
dec
cli
inc
sbb
fldcw
fdivr
bound
xor
dec
push
dec
int3
int3
cmp
mov
nop
dec
sbb
je
les
ds
adc
and
adc
xlat
int3
bound
and
jb
fild
xor
sbb
outs
sub
dec
xor
sub
push
add
push
lds
lods
in
shl
jno
and
jmp
cdq
in
es
mov
sub
cmp
lahf
xchg
pusha
popa
(bad)
dec
(bad)
push
cmp
nop
dec
(bad)
xchg
inc
test
(bad)
pop
ret
jp
or
ins
retf
cwde
stos
movs
mov
xchg
pop
xlat
push
fs
xchg
dec
adc
in
mov
inc
ret
sti
fs
stos
popf
pop
push
loopne
out
jb
mov
scas
sbb
add
mov
and
pop
adc
aaa
xor
pop
push
xor
push
adc
or
push
and
cmp
and
xor
push
add
push
jmp
shr
cmp
mov
and
or
icebp
mov
xor
cmp
aaa
or
pop
(bad)
pop
clc
cld
cmp
xor
fsubr
cld
push
lods
add
daa
xor
pop
fs
mov
xlat
mov
xchg
adc
stos
fst
or
imul
dec
adc
pop
push
and
mov
xor
xchg
(bad)
add
aad
shl
mov
je
adc
jo
loop
or
adc
mov
loop
sti
inc
pop
push
sbb
mov
push
lea
ret
or
pop
push
imul
or
mov
out
push
icebp
xor
jmp
sbb
clc
icebp
fidivr
jae
mov
cmp
xchg
js
loopne
(bad)
push
inc
push
imul
aam
sbb
push
in
pop
in
lods
sub
mov
(bad)
mov
rcr
test
scas
and
push
std
or
clc
popa
adc
pop
loopne
(bad)
cmp
push
inc
push
in
mov
dec
pop
xor
std
dec
in
fwait
xchg
cmp
mulps
xchg
stc
jmp
sbb
(bad)
call
paddd
daa
in
mov
cmp
xor
aam
shl
inc
mov
and
xchg
jp
les
lods
imul
hlt
pop
dec
aaa
daa
test
fld
add
add
push
mov
pop
loopne
in
in
int3
jecxz
or
repz
and
rcl
xchg
cmp
push
lods
das
push
imul
pop
retf
or
sub
mov
push
int3
push
xlat
push
imul
adc
rol
pusha
sahf
fs
sub
pop
add
mov
xchg
movs
add
fimul
call
rcl
test
xor
jb
push
std
stos
push
shr
mov
pushf
xchg
jae
je
or
dec
jp
aaa
and
or
mov
push
xor
movs
mov
mov
xor
xchg
dec
loopne
sahf
retf
xchg
lds
fsubr
repnz
dec
cmp
xlat
out
inc
pop
lods
ja
gs
mov
add
icebp
fnsave
cdq
out
add
add
(bad)
out
pop
lock
int
or
in
or
dec
adc
movs
std
pop
sub
ja
add
in
cdq
stos
mov
pop
lds
clc
jge
or
lods
jbe
jp
sub
pop
push
lods
ret
sub
shr
dec
mov
in
rcl
fcmove
std
out
cmp
or
sbb
(bad)
push
sbb
addr16
xor
std
xchg
push
mov
cli
ret
pop
dec
push
or
mov
call
sbb
sbb
cmp
pop
sbb
dec
pop
push
or
cmp
lods
mov
jecxz
sbb
cld
jmp
repnz
cld
sub
shr
dec
mov
in
add
sbb
sahf
hlt
ja
ss
push
jmp
xchg
out
sar
out
pop
push
or
aaa
int3
inc
fwait
dec
push
out
(bad)
(bad)
dec
aam
xor
mov
push
xor
(bad)
or
sbb
adc
jo
sbb
sbb
dec
dec
test
add
cwde
pop
cld
in
xchg
dec
mov
imul
sub
jmp
pop
push
stc
add
ins
out
jp
xor
push
stc
xchg
dec
sbb
out
xor
pop
add
shl
call
lods
sbb
(bad)
mov
out
pop
test
sbb
retf
dec
mov
pop
cli
and
add
jmp
adc
push
inc
xor
mov
inc
loopne
cld
imul
mov
xchg
pop
sub
cdq
sar
or
icebp
sbb
pop
adc
mov
(bad)
popf
in
pop
int3
imul
sbb
cld
lods
push
pop
ds
cmp
sub
xor
mov
sar
xlat
sub
sbb
int3
xchg
call
loopne
ret
mov
fucomi
fwait
shr
hlt
in
call
cmc
pop
dec
ins
inc
jecxz
add
cwde
inc
jmp
ins
push
jmp
push
out
pop
mov
je
int3
add
lods
rcr
call
jne
sbb
les
neg
cmp
inc
add
cmp
std
pop
test
icebp
push
xor
jae
push
adc
jge
out
xlat
mov
xchg
in
adc
cmp
mov
mov
sbb
(bad)
dec
lahf
std
mov
inc
lds
push
std
dec
sub
popa
ret
and
fdiv
adc
test
cwde
push
sbb
test
push
imul
sbb
loopne
je
shl
stos
(bad)
call
std
rcl
mov
in
dec
jl
adc
mov
in
test
in
sbb
(bad)
les
sbb
aam
cmp
dec
adc
xchg
pop
add
and
and
imul
or
cli
aam
fldcw
cwde
push
icebp
push
mov
ds
xchg
add
pop
lds
(bad)
inc
cmp
in
(bad)
cdq
icebp
das
rol
xchg
sbb
xor
imul
inc
sub
cli
dec
dec
test
jae
push
jne
clc
std
cli
test
xchg
push
test
in
nop
xor
ret
adc
lods
cdq
cwde
and
in
lods
outs
jge
cmc
pop
cmc
adc
add
push
mov
mov
lods
in
outs
pop
add
sbb
sbb
jmp
sbb
push
cmp
add
ins
xor
sub
sub
and
ret
(bad)
int3
inc
inc
adc
sbb
vprotq
cmp
outs
dec
inc
cmp
jns
inc
outs
jmp
clc
adc
and
jge
mov
sbb
into
inc
xor
imul
add
cdq
(bad)
push
dec
inc
int3
xchg
idiv
aam
jl
sbb
lds
xchg
xor
lods
pushf
addr16
sbb
push
cld
fwait
push
mov
movs
aaa
inc
aas
pop
scas
or
test
dec
pop
mov
adc
ja
inc
inc
hlt
sub
xchg
test
js
aaa
pop
push
mov
or
cmp
inc
xchg
addr16
and
and
sbb
or
or
cmp
mov
(bad)
pop
jge
or
int3
mov
xchg
addr16
push
cmp
push
xor
loopne
cdq
fdivr
adc
push
in
jp
mov
sub
add
imul
inc
pop
in
imul
adc
pop
xlat
call
sahf
xor
add
mov
(bad)
sbb
scas
sar
mov
add
pop
add
xchg
sbb
cmp
push
mov
inc
add
pusha
xchg
or
in
adc
call
movs
sub
pop
push
ret
in
pop
add
stos
cdq
push
daa
int3
sub
xchg
in
movs
inc
pop
push
mov
inc
in
and
push
fstp
or
sbb
or
cmp
adc
sbb
mov
jne
and
sahf
or
push
in
pushf
int3
cmps
mov
stos
hlt
in
mov
(bad)
sub
jge
pop
dec
clc
pop
jbe
pop
imul
aam
fild
xchg
pop
out
sbb
add
jmp
ins
in
ficom
in
add
and
test
mov
push
push
aam
test
jl
xchg
nop
sahf
xchg
test
add
(bad)
mov
xor
ds
rcl
in
add
xchg
loop
jae
add
xchg
pop
loop
add
xchg
pop
cmp
push
movs
in
inc
ds
pop
sbb
ins
dec
adc
hlt
fstp
cmp
sti
movs
mov
or
call
(bad)
ins
adc
loope
stc
xchg
data16
push
xchg
pop
imul
pop
dec
sbb
xchg
mov
call
imul
pop
mov
inc
mov
fcomp
int3
stc
in
addr16
dec
add
in
pop
jp
xchg
imul
mov
xchg
xor
cmp
push
xor
mov
outs
fiadd
pop
adc
mov
push
call
xor
adc
dec
pop
add
push
add
out
icebp
lods
inc
lahf
sub
cmp
push
sbb
lock
fcom
(bad)
shl
js
stos
arpl
xchg
imul
mov
dec
ret
push
xchg
call
popf
mov
aam
push
xor
ins
test
test
cwde
dec
pop
ds
imul
in
inc
imul
nop
inc
mov
jg
dec
push
pusha
cmps
xchg
xor
stos
aam
xor
add
xchg
ins
lods
mov
pop
mov
lods
adc
lods
xchg
in
and
pop
and
stc
hlt
in
jb
mov
cmp
sub
jmp
add
lds
sti
mov
sub
inc
or
jmp
je
add
xchg
leave
jae
or
mov
xor
xchg
inc
ficomp
mulps
adc
xchg
mov
push
inc
ret
sti
adc
dec
xor
das
push
in
cmp
int3
aaa
mov
dec
in
jp
cmp
in
icebp
popf
pop
cld
xor
sub
push
nop
cwde
and
pop
icebp
cmp
repnz
sub
xor
call
mov
pop
pop
push
dec
fcomp
xor
mov
cdq
retf
mov
xchg
pop
xor
dec
xor
mov
or
bound
retf
xchg
nop
add
cmp
mov
and
push
sub
cmp
mov
or
push
neg
dec
scas
ins
jge
repnz
addr16
mov
pop
repz
dec
add
jae
hlt
test
jp
and
adc
int
mov
cmp
jbe
shl
inc
fs
push
dec
js
outs
mov
gs
shl
test
inc
jns
addr16
aad
jo
(bad)
sbb
dec
lea
sbb
jae
test
push
push
jno
sub
(bad)
movlps
(bad)
mov
add
jno
gs
sbb
pop
pop
imul
cmp
push
cmp
mov
jo
aaa
or
jne
inc
push
inc
aad
mov
push
push
and
inc
pushf
or
out
push
mov
sbb
movs
xor
call
shl
sbb
xchg
(bad)
movs
stos
sbb
cld
outs
cmp
ins
(bad)
leave
adc
out
inc
pop
cdq
fidiv
out
cmp
or
sub
cdq
and
jmp
lods
sbb
test
clc
imul
mov
int3
ja
cld
in
loopne
mov
(bad)
sbb
xchg
sbb
jl
imul
mov
popf
xchg
ror
setns
in
dec
outs
cmp
lods
stos
adc
retf
dec
not
hlt
add
jle
sub
mov
(bad)
and
lods
cs
sbb
(bad)
adc
xchg
call
inc
fsub
addr16
inc
inc
mov
cmp
add
mov
shr
retf
jle
in
mov
out
popa
mov
das
test
lods
mov
out
sbb
sbb
or
popf
cmps
call
(bad)
imul
push
arpl
addr16
sbb
sub
and
pop
inc
mov
xchg
popa
fcomi
or
gs
dec
repnz
int3
shl
xchg
xchg
fistp
and
addr16
mov
imul
pop
sbb
or
mov
xor
addr16
dec
add
inc
sbb
cmp
and
aas
popa
xchg
sbb
js
cmc
and
xchg
imul
outs
jne
xor
cdq
pop
aam
lds
in
inc
int3
das
sub
pop
cvttps2pi
add
(bad)
xlat
int3
jns
imul
inc
push
mov
and
nop
call
clc
in
popa
adc
pop
xor
adc
jmp
inc
inc
mov
or
add
cmp
ror
test
pop
cmp
or
in
xchg
in
in
xchg
stos
push
sbb
imul
pop
sbb
adc
dec
add
in
and
xchg
icebp
pop
inc
clc
js
ja
pinsrw
sub
xchg
or
pop
cdq
mov
hlt
pushf
dec
call
in
ins
fwait
int3
pop
inc
xor
sub
sbb
pop
aam
daa
xor
add
or
inc
in
sbb
sub
pop
retf
icebp
jo
xchg
mov
pop
sbb
lods
int3
pop
sbb
xchg
cmps
xchg
push
fcom
in
les
in
lea
adc
shl
fnstsw
xchg
xchg
loope
jge
mov
pushf
cmp
scas
pop
inc
cmp
mov
mov
pop
cdq
hlt
xchg
mov
cmp
inc
dec
inc
sub
cmp
sbb
pop
addr16
fcom
test
fwait
pusha
push
imul
pusha
bound
ficom
jmp
push
push
sbb
ficomp
xchg
add
les
pusha
or
shl
mov
into
ins
adc
add
and
out
ds
in
cmp
dec
mov
scas
inc
shl
test
push
ret
adc
cdq
sti
cdq
xchg
pusha
mov
in
xchg
sbb
adc
adc
xor
xor
add
mov
add
push
in
inc
jmp
outs
sub
inc
push
and
pop
xor
imul
cmp
dec
xchg
(bad)
ss
adc
push
adc
cdq
cli
adc
sahf
pusha
out
rol
fldenv
adc
ret
or
xchg
adc
dec
xchg
inc
sbb
and
mov
pop
pop
xchg
sub
and
mov
mov
xchg
xchg
push
sbb
pop
ins
pop
mov
add
add
xlat
mov
adc
vmread
add
movs
lahf
mov
cld
dec
or
test
adc
in
sub
adc
mov
dec
and
or
mov
xor
adc
std
cli
lahf
das
mov
jle
cmp
das
in
or
pushf
jnp
and
pop
xlat
add
lock
jnp
xor
xor
(bad)
adc
cmp
push
test
xor
xor
pop
or
gs
movs
pop
xchg
jmp
jnp
adc
leave
push
add
aam
mov
push
sbb
sbb
xchg
ret
leave
jmp
add
sbb
xchg
jp
in
(bad)
clc
leave
push
and
sbb
pop
mov
sub
sbb
mov
loopne
xchg
add
fs
out
stos
pop
sbb
sbb
jge
cld
aaa
pusha
stos
fisttp
in
lea
adc
mov
push
pop
mov
adc
dec
mov
js
(bad)
mov
mov
xchg
in
and
and
add
pop
adc
push
cmp
jge
push
pop
ret
push
sbb
(bad)
pop
test
lods
xor
shl
xor
sbb
push
add
jg
nop
and
and
popf
push
imul
adc
inc
dec
aam
push
sbb
push
rol
push
sbb
jne
jmp
cmp
lods
mov
cli
sub
push
push
sbb
gs
out
sbb
xchg
push
and
add
clc
push
adc
inc
int
cmp
out
sbb
aam
sbb
inc
cmp
add
fucomip
adc
jge
int
into
call
popa
fs
inc
imul
shl
arpl
push
xor
sub
inc
in
cmp
aam
in
dec
arpl
loop
adc
xchg
in
and
adc
push
test
push
popa
aaa
xchg
rol
inc
add
sub
xchg
cmp
xor
or
pusha
pop
or
jmp
fnstcw
or
mov
sbb
rcl
sbb
ja
xchg
inc
cmps
xchg
(bad)
std
ret
cld
xor
aam
jl
ss
adc
adc
je
inc
pusha
sub
push
pop
sti
test
jmp
pop
sbb
imul
or
add
push
adc
adc
sahf
call
inc
das
mov
mov
aad
adc
adc
xor
push
das
mov
xor
pop
cmp
mov
xchg
pop
push
inc
and
or
lods
cmp
pop
cwde
je
xor
dec
sbb
das
out
and
jmp
jge
cmp
cdq
xor
fadd
sub
out
push
dec
icebp
shl
inc
std
fsub
push
jl
inc
or
in
out
mov
ret
xor
fstp
mov
adc
add
xchg
pop
jge
les
adc
sbb
(bad)
mov
and
imul
in
mov
movs
hlt
push
inc
xchg
inc
sti
add
xchg
and
pop
aad
push
ins
sbb
addr16
sbb
ror
pusha
dec
into
mov
or
and
xor
xor
mov
push
jle
cmps
(bad)
out
int3
pop
push
enter
add
sbb
sbb
mov
cmp
adc
icebp
dec
cmp
xor
push
fdivr
cmp
sbb
jl
icebp
xor
mov
jno
jae
or
imul
xor
fidiv
xchg
in
loop
idiv
adc
inc
fld
or
sbb
add
jno
add
add
xchg
cmp
xchg
add
enter
xor
int
xor
xchg
call
cwde
sbb
add
aad
stos
add
mov
loop
push
and
mov
lods
xchg
es
jp
sbb
icebp
jl
push
adc
bound
fcomp
test
ins
push
sub
adc
push
push
dec
mov
mov
shr
(bad)
add
leave
push
mov
cwde
or
jae
outs
pop
bound
lods
mov
test
mov
or
or
pop
xchg
cwde
jmp
cld
jl
push
push
xchg
inc
xchg
not
mov
test
dec
sbb
stos
push
bound
mov
xchg
push
repz
gs
int3
xchg
scas
xlat
jg
loopne
mov
xor
adc
adc
pop
adc
hlt
nop
retf
xchg
stos
sub
adc
sbb
push
adc
or
inc
or
fs
pusha
push
and
and
adc
int
xchg
adc
jg
icebp
data16
inc
pop
nop
and
loopne
retf
outs
stc
shr
or
cwde
pusha
xchg
pop
pop
add
test
in
or
sbb
add
push
pop
and
js
enter
repz
sub
rcr
adc
cmp
adc
mov
mov
stc
mov
xchg
sahf
(bad)
outs
adc
sub
clc
lea
mov
aas
pop
imul
mov
in
xor
in
dec
mov
cmp
fdiv
aas
imul
adc
jmp
lock
popf
xor
sbb
sbb
aaa
addr16
(bad)
in
add
adc
shl
inc
int3
jecxz
push
jmp
inc
sub
call
in
add
mov
jo
sub
ins
getsec
adc
cli
je
test
test
mov
add
(bad)
iret
loopne
jb
sahf
dec
push
cmp
adc
jo
or
out
(bad)
push
inc
dec
sbb
shr
lods
push
call
lock
in
cld
ror
xchg
ficomp
inc
inc
pop
add
xor
add
lea
jecxz
in
fidivr
aam
or
and
stc
mov
inc
pop
sbb
push
dec
push
inc
addr16
rcr
shl
add
push
adc
inc
inc
dec
jae
and
or
mov
sub
pop
retf
add
(bad)
(bad)
test
in
fst
enter
push
push
mov
push
or
call
out
jmp
ins
adc
add
cmp
xchg
adc
mov
sbb
jne
add
jae
test
add
mov
add
shl
or
push
dec
popf
xchg
(bad)
fcomp
jmp
add
dec
xor
sub
stos
push
or
cmp
in
dec
in
leave
test
sbb
(bad)
or
mov
jecxz
dec
call
inc
xchg
lods
mov
push
push
nop
aam
push
cmp
retf
xor
in
int3
sub
test
wbinvd
js
pop
inc
and
adc
sbb
shr
fdiv
ds
stos
adc
in
adc
movs
je
fnsave
and
inc
ror
sbb
pusha
jmp
sbb
mov
les
cdq
push
adc
inc
shl
inc
xchg
ss
out
cmp
jmp
add
and
push
sbb
imul
sysenter
add
addr16
stc
cmp
icebp
xlat
in
stc
outs
xor
in
in
int3
xlat
sbb
imul
addr16
push
ins
ret
xchg
sti
mov
in
out
push
add
add
xchg
repz
dec
clc
(bad)
adc
xchg
push
add
in
aaa
add
aam
pop
add
imul
fucom
dec
inc
ins
fsincos
add
hlt
and
cs
dec
and
or
cld
imul
pop
and
xchg
push
push
repnz
icebp
sbb
(bad)
dec
nop
dec
sbb
in
into
push
add
rol
xchg
lahf
add
and
in
pop
pop
push
push
stc
jg
aas
retf
clc
sub
mov
fist
and
mov
sti
repz
add
imul
int3
cwde
(bad)
pop
cmp
rcl
and
pop
popf
or
int3
(bad)
mov
outs
rcl
pop
sub
sbb
je
push
imul
xchg
jmp
ret
push
push
shr
xchg
stos
sbb
movs
adc
es
push
dec
pop
mov
sbb
jle
push
les
push
inc
cdq
lods
sbb
es
or
pop
cmp
sub
fstp
aam
lods
fldcw
loopne
push
jecxz
pop
rcl
pop
pop
and
(bad)
fmul
cmp
test
ror
cmp
mov
in
inc
addr16
and
sbb
iret
mov
add
stos
mov
cwde
mov
jle
cmp
push
xchg
out
aam
cmp
pop
call
mov
in
imul
mov
fist
scas
ror
pop
mov
xchg
ficom
xchg
push
push
cmp
adc
push
adc
inc
addr16
jecxz
xadd
sbb
(bad)
cmps
fldenv
add
xchg
stc
cmc
idiv
pop
pop
sbb
adc
inc
inc
inc
inc
lods
imul
push
nop
ds
adc
in
sub
les
outs
add
mov
out
es
inc
adc
dec
pop
dec
inc
dec
xchg
sub
and
call
push
cmp
xchg
add
sbb
dec
in
lods
push
sbb
xchg
test
jg
adc
xor
retf
ds
adc
(bad)
lds
in
stos
xchg
inc
xor
int3
jmp
stos
or
pop
je
xchg
add
das
dec
cld
jle
inc
inc
nop
imul
push
retf
pop
es
sub
xchg
cmp
cmp
add
mov
retf
and
lahf
dec
mov
push
or
mov
cdq
aas
jns
or
and
inc
pop
jg
test
or
in
adc
jb
pop
mov
cmc
loop
push
adc
pop
add
cwde
inc
fnstcw
jb
xor
clc
jo
pop
mov
jmp
mov
sbb
or
shr
sbb
into
or
jo
in
inc
or
fdivr
mov
xchg
push
adc
adc
addr16
add
xchg
sbb
xchg
movs
and
push
dec
arpl
jno
sub
cmp
into
lods
xchg
or
xor
push
inc
inc
in
push
add
lods
pop
stc
sar
test
std
imul
cmp
and
push
xchg
inc
push
xchg
or
test
aad
sbb
add
jae
push
add
stc
leave
aam
or
jg
cmps
adc
push
xchg
call
jmp
cmp
cmp
xor
outs
sub
pop
fnstcw
(bad)
push
sub
retf
cdq
pop
cmp
imul
fcmovbe
adc
and
adc
and
mov
jae
pop
inc
and
int3
fadd
inc
pop
in
push
sbb
add
jmp
shr
aaa
je
fisubr
hlt
fs
int3
std
aaa
mov
lods
and
inc
mov
xchg
aaa
gs
push
aas
lods
sub
cdq
fst
int3
jle
movs
test
retf
dec
push
sbb
shr
ins
push
fiadd
imul
mov
pop
or
xchg
add
mov
fwait
pop
cld
cmp
ins
dec
adc
fldenv
inc
sbb
xor
mov
pop
sbb
(bad)
arpl
imul
push
dec
pop
pop
repz
fst
and
xchg
jmp
sbb
push
enter
xchg
pop
mov
xchg
ror
les
aam
inc
retf
cmp
or
pop
stos
ror
add
sub
cmp
mov
pop
or
or
les
sub
sahf
dec
cdq
enter
or
ins
pop
inc
cmp
jbe
cmps
pop
sahf
or
stc
fmul
shl
mov
jns
jl
cmp
ins
in
push
test
fwait
pcmpeqb
mov
inc
cmp
adc
sub
icebp
sub
js
or
push
push
xchg
cmp
inc
xchg
push
fisttp
or
(bad)
sub
icebp
sub
sub
int3
shr
mov
pop
or
or
pop
and
push
sahf
call
jecxz
push
js
pop
adc
dec
inc
sbb
sahf
in
les
mov
or
nop
shl
int3
adc
xchg
jae
adc
mov
adc
mov
xor
loope
cdq
pop
(bad)
in
cmp
and
imul
popa
inc
popf
test
cmp
sub
out
in
inc
cmp
pop
dec
in
sbb
test
cli
fldenv
retf
in
cmp
pop
shr
sbb
ficom
fiadd
mov
rol
sbb
mov
jnp
inc
xchg
jmp
jmp
shr
pop
sub
push
icebp
sbb
pop
arpl
sbb
lds
dec
pop
mov
das
mov
jle
pop
or
xor
fild
jmp
lods
int3
xor
stos
jecxz
fxch
stc
cmp
(bad)
xor
frstor
push
es
or
fsub
push
es
aaa
(bad)
shl
adc
sbb
int3
(bad)
repnz
rol
inc
iret
(bad)
daa
xor
dec
pop
iret
or
or
add
mov
mov
and
cmp
sbb
dec
stos
loop
inc
imul
das
jle
sbb
pop
xchg
and
sbb
aaa
ret
cmp
mov
fcmovb
data16
mov
push
call
aaa
dec
push
gs
not
lods
cmps
ins
fbstp
mov
adc
add
sti
dec
and
bound
push
out
cmp
pop
sbb
mov
mov
inc
pop
jp
sbb
add
xchg
shl
push
mov
sbb
or
jg
xor
or
retf
pop
jmp
or
or
pop
inc
push
ja
out
cmps
imul
xor
pop
push
and
sbb
xchg
sub
pop
cmp
dec
or
cmp
add
jno
mov
sbb
jo
mov
sbb
sbb
xchg
mov
push
inc
imul
mov
xor
pop
test
out
ficom
sub
fptan
or
xchg
cmp
cmps
sbb
push
jmp
int3
fwait
pop
push
clc
adc
in
inc
addr16
inc
jne
inc
fwait
cmp
in
imul
adc
lock
in
inc
ror
add
daa
cwde
mov
stos
adc
and
sbb
ins
or
scas
add
or
jne
test
jae
hlt
add
arpl
ins
sbb
call
mov
ins
pop
xchg
inc
std
fcomp
int3
push
aad
fadd
ss
adc
adc
xor
cmp
jmp
push
sub
jnp
pop
jle
clc
push
retf
fisttp
cdq
mov
das
adc
mov
jbe
push
dec
or
jp
arpl
lgdtd
sbb
push
jmp
sbb
inc
(bad)
or
dec
addr16
pop
inc
jns
push
into
push
push
sbb
adc
mov
aad
mov
xchg
popa
or
xchg
push
mov
add
mov
jp
jcxz
mov
mov
mov
movs
scas
cmp
(bad)
sbb
dec
sbb
push
push
pop
imul
push
ficomp
jns
inc
sub
sbb
push
in
jne
sbb
jno
lea
and
sbb
xor
dec
int3
cmc
stos
xchg
movs
(bad)
loopne
pop
addr16
adc
dec
xchg
xchg
loopne
or
dec
cmp
mov
arpl
sub
dec
xlat
retf
jno
cmp
int3
add
test
pop
sbb
stc
pop
setno
fstp
adc
cld
sub
in
aam
adc
pop
loope
mov
and
lock
xchg
jae
inc
add
mov
or
inc
xchg
sub
ret
test
push
push
push
xchg
add
mov
cmp
nop
pop
sbb
xchg
in
int
jge
icebp
jo
jl
ins
mov
or
cmp
imul
scas
xor
clc
jmp
inc
cdq
mov
jae
out
sbb
lods
pop
sbb
js
aam
in
cmps
(bad)
rcl
sub
into
inc
cmps
xchg
mov
out
jae
lods
cmp
jg
push
jae
inc
push
and
dec
dec
inc
repnz
xor
fstp
or
inc
jo
cli
xchg
or
lods
cdq
popa
xchg
pop
jecxz
push
movs
cld
ret
jmp
and
stos
icebp
jne
or
xchg
sbb
or
mov
mov
or
int3
add
pusha
mov
outs
cmc
mov
push
ror
push
or
mov
movs
adc
mov
jmp
and
pop
sbb
mov
loope
mov
cli
mov
loope
xor
test
and
and
mov
shl
shr
adc
loop
sbb
xlat
ja
push
adc
int3
pop
sbb
ret
inc
or
retf
shl
fwait
js
and
dec
jle
and
adc
inc
sbb
ror
push
sub
in
icebp
clc
adc
sbb
mov
ins
xchg
adc
call
mov
movs
jmp
add
xlat
jne
dec
add
je
pop
cli
sbb
arpl
add
or
mov
(bad)
int3
ins
sbb
push
mov
xlat
clc
push
cmp
xchg
jp
int3
sbb
push
jne
xchg
add
pop
repnz
xchg
adc
fs
push
cmps
int3
xor
mov
and
push
iret
xor
or
bound
pop
and
sbb
retf
xchg
out
jbe
inc
jns
and
and
inc
int3
in
mov
xor
cmps
cmp
(bad)
push
fistp
cmp
pop
mov
cmp
sub
fcom
xor
jno
dec
push
pop
add
leave
xor
out
mov
fneni(8087
jnp
imul
jp
jle
push
(bad)
cld
or
js
and
addr16
cmp
stos
loopne
jmp
push
icebp
sbb
and
jns
sbb
xor
jne
lds
or
repnz
sbb
jge
rcr
pop
and
push
icebp
in
out
shr
sbb
xor
push
les
pusha
stc
ss
addr16
mov
adc
sbb
pop
inc
mov
pop
(bad)
cmp
xchg
lock
mov
in
call
adc
dec
jmp
pop
loopne
push
xor
ret
adc
or
push
rcl
add
jmp
in
add
sbb
fstp
and
add
and
in
into
addr16
and
retf
dec
xchg
jecxz
repnz
pushf
lea
xchg
mov
mov
movs
sub
adc
mov
or
add
cli
daa
pop
or
adc
inc
imul
aam
mov
or
das
mov
sub
ds
adc
add
ret
or
xchg
sbb
xchg
sbb
stc
les
loop
push
jl
inc
or
loop
inc
inc
xor
push
sub
int3
mov
and
loopne
ds
xor
pop
ds
data16
jecxz
sub
test
sti
adc
ds
sbb
push
cli
or
dec
bound
add
dec
fwait
dec
inc
dec
adc
fsubr
cmp
mov
pushf
sub
arpl
cmp
fsub
push
xchg
push
push
push
(bad)
sti
fmul
mov
cld
mov
test
enter
jmp
cs
mov
rcl
xor
in
cmp
pusha
push
push
cmp
push
cmp
into
adc
imul
and
std
rcr
aad
out
and
neg
ss
xchg
push
ds
and
adc
paddsb
int3
and
icebp
js
cmp
or
in
cmp
fadd
les
mov
mov
cmp
push
add
cmp
dec
in
test
adc
push
fsubr
push
or
ror
lods
mov
adc
adc
and
push
in
outs
pop
das
jg
sub
adc
jecxz
ret
mov
xlat
fs
push
retf
sbb
jmp
popa
adc
jmp
dec
hlt
call
cmp
xchg
fs
jl
sbb
or
int3
dec
inc
sti
push
sub
add
xor
mov
js
xor
mov
adc
sub
fisubr
push
dec
int3
or
add
imul
test
inc
ss
push
pop
sti
xor
jecxz
imul
or
sub
fwait
xor
jo
cmp
sar
jmp
cmp
scas
sub
dec
adc
mov
aas
ins
fsubr
inc
inc
cld
ins
data16
inc
(bad)
icebp
xor
mov
adc
pusha
dec
pop
adc
xor
ins
sub
retf
inc
xchg
mov
mov
push
out
out
sub
imul
dec
aaa
pop
mov
adc
push
das
retf
push
or
das
cmp
js
neg
push
or
xor
sbb
fisttp
fs
inc
xchg
outs
dec
xchg
pop
test
pop
xchg
add
push
dec
sub
pop
adc
out
mov
mov
test
mov
or
pop
mov
mov
ret
fmulp
inc
aas
les
loope
pop
xchg
popa
in
push
cmp
fldcw
xor
adc
xor
and
xor
xchg
add
or
mov
dec
push
dec
mov
movs
dec
outs
(bad)
adc
cmp
jmp
in
fisubr
and
mov
enter
xchg
or
add
xchg
push
rcr
adc
adc
(bad)
pushf
mov
mov
fdiv
stos
test
in
cmps
cmp
adc
lods
shrd
lods
push
lods
dec
lods
add
adc
movs
inc
adc
retf
or
dec
cmp
xchg
or
in
js
ds
in
sub
(bad)
xchg
push
dec
ss
jns
inc
jb
push
push
mov
ror
pop
or
push
dec
push
retf
and
jo
test
clc
or
aad
pop
add
rcr
cdq
jmp
movs
cld
int3
pop
rcr
cdq
sti
int3
in
hlt
dec
inc
idiv
cmp
inc
outs
cdq
arpl
adc
add
ins
retf
popf
mov
sti
adc
(bad)
xchg
adc
and
sar
push
adc
xchg
loope
icebp
jge
daa
std
jmp
jbe
add
or
mov
retf
pop
xor
push
dec
fidivr
xor
mov
push
and
add
push
jecxz
adc
cmp
sbb
mov
pop
fcom
daa
in
add
dec
shr
jl
mov
retf
push
(bad)
pusha
in
xor
gs
sbb
inc
cld
inc
sbb
sbb
shl
ret
ficom
in
sahf
repz
inc
push
xchg
sub
xchg
adc
adc
pop
enter
sub
(bad)
inc
adc
fs
adc
out
or
xchg
ins
or
mov
jp
adc
or
adc
les
icebp
pop
add
loop
pop
jo
sbb
cmp
inc
fdiv
add
enter
push
fisttp
push
pop
xor
and
and
inc
fcomp
sbb
ja
sub
aaa
inc
sahf
pop
push
cwde
inc
dec
add
in
pop
or
sub
add
pop
push
repnz
movs
cld
push
xchg
stos
shr
pop
jo
or
cwde
pop
dec
xor
xchg
lods
mov
push
or
fcmovnbe
jmp
aaa
jnp
or
lods
dec
dec
addr16
cmp
icebp
pusha
enter
out
or
fs
dec
stc
mov
fwait
cmp
or
mov
in
sbb
adc
sub
cmp
pop
add
cvtpi2ps
imul
cmp
sbb
in
and
xor
or
inc
sub
xchg
sbb
xchg
lock
sub
or
dec
int3
sbb
lahf
pop
sbb
inc
mov
stos
push
and
mov
das
fdiv
sbb
add
pop
jmp
shl
add
adc
stc
fild
(bad)
cwde
clc
sub
mov
aaa
sub
add
mov
in
imul
pushf
bswap
dec
stos
inc
fs
and
jne
sub
mov
add
cmp
xchg
adc
cmp
movs
sbb
mov
push
mov
into
dec
cmp
retf
sub
stos
in
inc
adc
enter
sbb
add
fidiv
inc
int3
adc
pop
inc
stos
and
(bad)
in
out
pop
lods
std
outs
int3
inc
push
ins
sbb
rcr
(bad)
in
pop
dec
fwait
cdq
cmp
xchg
addr16
imul
hlt
cmp
aaa
call
adc
adc
add
ficom
dec
in
lds
hlt
int
clc
stos
ffreep
mov
je
jge
adc
fmul
in
shl
ins
mov
mov
adc
pop
pop
push
sub
sbb
inc
dec
push
mov
jns
(bad)
int3
into
dec
mov
xchg
leave
cmp
pop
mul
or
sbb
mov
adc
test
inc
in
inc
fldcw
push
ret
(bad)
pop
cld
adc
ss
in
pusha
sbb
cmp
cs
stos
push
(bad)
adc
(bad)
mov
imul
(bad)
cmps
shr
sub
cdq
adc
or
jb
xor
ror
jmp
cld
addr16
fimul
pop
pop
inc
push
sbb
in
push
adc
sub
push
mov
inc
sbb
ss
pop
push
pop
or
aam
push
inc
dec
imul
pop
jmp
cli
add
xor
fdivr
jb
xchg
mov
inc
cmc
add
cmp
cmps
cmp
dec
xchg
fdivr
cmps
xor
fcomp
xor
fisubr
jns
pop
add
int3
pop
ins
lods
fsubr
pop
out
ins
scas
pop
outs
popf
cs
mov
adc
daa
jl
jne
pop
jbe
pop
jmp
mov
add
xor
imul
sbb
adc
addr16
rcr
cld
icebp
cdq
xchg
add
push
addr16
push
pop
fcmovne
mov
nop
mov
scas
push
cwde
pop
cmp
inc
jmp
mov
adc
outs
fcom
call
ror
mov
push
jne
push
inc
dec
dec
or
popf
pop
sbb
dec
lds
imul
or
fist
sbb
test
or
inc
call
and
cwde
xchg
cmp
cwde
dec
jecxz
in
shl
or
fist
sbb
pop
repnz
test
jns
dec
ficomp
mov
(bad)
xor
aas
sahf
dec
or
xor
lea
xor
cmp
lods
xor
shl
pop
sub
add
sbb
push
inc
dec
mov
jp
jo
scas
adc
stos
mov
scas
call
sub
fs
rcl
adc
(bad)
xor
xchg
inc
fimul
(bad)
cmp
inc
mov
sub
(bad)
push
inc
jo
dec
test
push
sbb
imul
neg
mov
pop
jp
xchg
or
mov
push
jbe
jo
sub
js
leave
cmp
sub
push
jbe
inc
jae
dec
push
sub
or
fdiv
out
inc
aam
sar
gs
adc
push
mul
mov
dec
pop
add
xchg
int3
pop
rcr
push
sti
sbb
std
pop
cmps
cmp
push
test
and
mov
arpl
dec
pop
outs
aas
xchg
xlat
in
int3
pop
mov
mov
fisttp
xchg
push
cli
or
mov
fild
int3
pushf
dec
les
dec
enter
pop
bound
sbb
sub
jmp
aas
cmp
sub
fxch
rcl
adc
pushf
dec
inc
mov
and
test
imul
sub
xchg
inc
lahf
xor
inc
(bad)
and
jg
sub
div
leave
mov
mov
sbb
adc
and
fidivr
add
fsub
mov
lods
jo
mov
adc
xchg
leave
xor
cs
dec
int3
xchg
test
jbe
es
call
cmp
jmp
mov
fidiv
in
jbe
fisub
retf
pop
and
jne
pop
test
jns
out
in
ret
add
lock
mov
clc
dec
cmp
push
hlt
nop
mov
jp
leave
pop
cmp
lea
xor
pop
adc
(bad)
in
pop
mov
xor
and
add
int
mov
push
lds
das
shl
retf
inc
or
fstp
das
or
push
xor
or
pushf
icebp
fstp
aas
jne
retf
leave
inc
sbb
add
xlat
jne
inc
cmp
xchg
aas
cld
enter
sbb
xchg
inc
adc
cmp
cmc
xor
stc
xchg
jbe
cmp
into
lock
pop
sub
iret
mov
inc
push
sub
sbb
int3
push
pop
je
and
push
cmp
cmp
adc
xor
jp
adc
addr16
inc
sub
mov
cmc
das
leave
repnz
loope
push
ficom
sbb
leave
inc
xor
xchg
call
and
sbb
test
outs
inc
pop
jno
retf
test
fsubr
sbb
dec
inc
pop
sbb
adc
retf
pop
or
iret
adc
fld
hlt
xchg
mov
stos
xor
mov
jl
je
sbb
(bad)
or
mov
adc
mov
dec
add
retf
popf
dec
jne
cli
push
push
test
pop
mov
pop
sub
pop
and
push
in
inc
das
stos
mov
stos
popa
(bad)
lods
add
jmp
in
(bad)
lods
pop
call
lock
xchg
movs
mov
out
stos
stos
push
inc
ins
cmp
xor
push
push
cdq
loop
xchg
jge
ins
xor
pop
icebp
pop
xchg
std
and
pop
adc
aas
loopne
mov
ret
adc
and
push
push
iret
stc
push
add
jmp
cli
xor
shl
sbb
cdq
ficomp
icebp
xor
jp
dec
cmp
add
aam
cmp
adc
and
dec
in
imul
xchg
push
pop
sbb
and
xchg
cmp
xchg
ins
sub
outs
adc
and
or
dec
repz
fidiv
sar
fucomp
xchg
pop
add
retf
pop
jle
lods
add
iret
js
lock
loopne
mov
mov
inc
call
sbb
rcl
leave
cdq
frstor
and
push
cmp
xor
cmps
repz
mov
mov
mov
shl
push
adc
ret
xchg
shl
mov
sub
lock
push
icebp
in
mov
or
and
mov
into
(bad)
clc
call
adc
xor
mov
adc
push
inc
(bad)
ficom
cmp
pop
xchg
cs
addr16
addr16
rcl
dec
push
push
retf
mov
adc
sub
sub
in
js
push
ins
int3
inc
sub
mov
jnp
xor
jns
push
movs
inc
or
ins
push
lock
aas
sbb
adc
pop
and
inc
add
add
sub
jmp
or
add
ss
lods
jmp
sbb
mov
or
stos
rcr
call
sub
call
fincstp
aam
(bad)
into
mov
jbe
mov
mov
xchg
out
dec
push
lahf
pop
stc
lods
and
pop
inc
sti
mov
idiv
pop
lock
retf
icebp
add
mov
pop
clc
call
xchg
mov
call
xchg
jne
inc
pop
cmp
pop
jbe
add
(bad)
and
loope
pop
aad
sar
mov
stos
(bad)
ss
mov
int3
jmp
daa
scas
stos
lods
(bad)
cmp
push
dec
cld
adc
fisttp
in
add
cs
jb
sub
int3
xor
mov
mov
bound
addr16
mov
mov
push
jb
cmp
adc
clc
leave
or
xor
push
dec
stc
stos
cmc
cmp
cmp
sbb
ret
popf
dec
inc
and
fs
gs
cmp
into
setns
push
retf
and
mov
int3
jmp
nop
gs
jmp
test
pusha
inc
pop
adc
pop
xchg
mov
mov
xor
pop
xor
or
push
or
js
pop
xor
sbb
xor
adc
mov
inc
aas
adc
aas
add
xchg
pop
and
mov
dec
sub
add
pop
bound
das
and
int3
ja
push
mov
sub
push
inc
mov
(bad)
retf
adc
repz
mov
push
mov
stos
mov
dec
adc
pushf
xchg
or
cdq
shr
int3
add
pop
rcr
xchg
adc
and
lods
jnp
gs
pusha
pusha
pause
push
dec
mov
pop
push
pop
loop
lods
and
or
sbb
dec
and
adc
jmp
cmp
pop
gs
ja
out
mov
push
push
sub
(bad)
pop
dec
imul
sbb
xor
jno
pop
pop
jmp
jle
shl
dec
sub
fcom
or
dec
adc
sub
xchg
rep
ja
push
push
xchg
ja
lsl
sub
adc
push
xchg
push
pop
or
adc
jg
jp
pop
or
ins
in
pop
sub
imul
adc
test
mov
sbb
cmps
cmp
push
cmp
jno
popa
xor
sub
test
xchg
or
add
or
adc
jno
add
pop
add
push
dec
out
or
mov
and
pop
and
xlat
jmp
mov
or
lea
jl
jge
mov
pop
fs
mov
push
in
in
add
pmullw
push
xor
ficomp
and
into
fiadd
push
jge
inc
mov
push
push
les
sub
fld
mov
jmp
add
jae
jl
ret
cli
jmp
in
jmp
mov
inc
sub
jnp
ficom
(bad)
cmp
call
test
test
adc
stc
ins
pop
pop
cld
fs
xchg
or
xchg
adc
aaa
pushf
jp
adc
jge
pop
je
call
pop
adc
xor
xor
(bad)
fsubr
pop
sub
and
les
xchg
cld
mov
xchg
ins
mov
xor
or
cli
popa
inc
jl
add
inc
adc
les
mov
popa
pushf
xchg
mov
ins
pop
nop
add
jbe
mov
pop
cmp
iret
test
add
add
xor
jae
mov
push
jmp
test
out
dec
or
fisttp
push
sub
push
sbb
pop
add
sub
cmp
lock
movs
sbb
lds
lea
xchg
mov
push
add
shl
add
nop
aam
add
xor
xor
adc
mov
fidivr
or
sbb
sbb
xchg
cmp
and
jmp
lods
fsubrp
nop
push
sub
push
xchg
sub
pop
or
mov
jns
add
xor
fld
aas
rcr
ins
ins
or
mov
cmp
cmp
div
nop
pushf
xchg
adc
inc
and
add
sbb
jmp
pop
fs
cmp
jns
add
cmp
xchg
jo
add
xor
push
je
or
aad
jl
das
(bad)
aam
push
imul
out
stos
out
add
jmp
mov
cmp
shl
fdiv
in
rcr
mov
inc
inc
and
sbb
add
sub
retf
jp
enter
push
sub
ins
dec
gs
je
add
(bad)
xchg
or
lock
clc
ror
jl
ja
push
les
jl
adc
ror
rcr
inc
ss
and
mov
jmp
rol
and
mov
in
mov
ins
js
adc
test
push
push
ja
jbe
sbb
or
add
add
sti
inc
cmp
outs
push
sahf
or
hlt
mov
xchg
add
(bad)
fidiv
and
push
add
add
in
pop
nop
(bad)
lahf
test
fiadd
push
es
pop
mov
(bad)
mov
mov
xor
cmp
pushf
mov
test
inc
hlt
pop
mov
in
push
in
xor
jns
js
icebp
iret
pushf
pop
xchg
xchg
sahf
cmc
xchg
add
in
ret
xchg
pop
mov
pop
mul
lods
push
sbb
fbld
or
and
pushf
int
inc
push
ds
mov
movs
mov
cmp
push
jns
push
and
pop
in
enter
jp
add
jmp
data16
push
movs
xor
aad
xor
pop
(bad)
rol
pop
mov
inc
inc
cmp
rol
sub
into
sub
cwde
lea
cdq
jl
xor
test
cld
mov
rol
xor
push
call
sbb
cdq
xlat
xor
jo
add
or
mov
std
mov
aaa
and
fwait
mov
cdq
rol
stos
lods
mov
push
test
sbb
setne
and
or
hlt
mov
jecxz
cwde
into
stos
nop
fs
push
inc
or
pop
paddb
cld
cwde
pop
cmp
pusha
jmp
mov
inc
add
mov
test
in
mov
or
in
lea
ss
js
gs
imul
stos
sbb
test
push
jae
inc
ins
lds
sbb
dec
int3
cwde
adc
or
jg
mov
jae
and
dec
sbb
inc
push
add
scas
fs
jbe
pop
inc
xchg
and
mov
or
dec
mov
call
hlt
jae
mov
shr
xchg
in
pushaw
or
add
loope
and
(bad)
xor
les
and
dec
sar
ficomp
ss
or
pop
push
aas
sbb
in
push
lock
adc
add
and
mov
or
xor
xor
nop
add
mov
mov
push
sbb
jl
lods
add
push
mov
mov
mov
pop
mov
retf
pop
push
mov
xor
(bad)
and
ins
pop
aam
and
setno
pop
dec
mov
sub
cld
jns
add
xor
mov
lea
mov
xchg
dec
xchg
dec
dec
push
je
aam
nop
add
inc
hlt
xor
add
ja
fs
jl
xchg
pushf
mov
in
lods
sbb
sbb
nop
inc
mov
or
xor
arpl
int
ins
enter
idiv
sub
ins
or
je
add
dec
mov
xor
or
jo
cmc
or
inc
or
sub
xchg
adc
enter
inc
out
fsubp
hlt
in
or
mov
fwait
adc
add
or
sbb
add
or
cld
pop
adc
dec
test
adc
aad
fidiv
cmp
test
sti
pop
test
loop
leave
adc
movs
loope
es
adc
xor
imul
ins
add
push
inc
mov
sbb
sbb
mov
fisttp
cmp
adc
icebp
in
mov
cdq
push
push
cmp
in
repz
imul
jge
in
sbb
xchg
mov
je
dec
jae
ja
jo
mov
lods
dec
pop
sub
push
fs
mov
gs
sub
and
jne
inc
retf
fnstsw
xchg
pusha
cmp
inc
test
dec
mov
retf
pop
sub
push
push
out
sbb
and
jmp
or
add
adc
mov
ds
mov
mov
xor
sbb
pop
in
pop
in
add
lods
jmp
push
and
push
cmp
add
xchg
sub
fild
clc
repz
cmp
add
xchg
sub
int
int3
clc
retf
push
cmp
add
xchg
sub
in
(bad)
clc
ret
push
cmp
add
xchg
sub
(bad)
cmp
add
xchg
sub
cmc
lods
aam
shr
cmp
add
xchg
sub
lods
lods
lods
clc
stos
push
cmp
add
xchg
sub
lds
cmp
cmps
cmp
clc
mov
add
cmps
adc
mov
mov
mov
xchg
sub
lea
cmp
(bad)
and
xlat
sub
rcl
mov
out
mov
jb
jmp
jl
das
ja
outs
cmps
xchg
ins
outs
addr16
or
xor
adc
test
dec
out
xchg
xor
inc
dec
fdiv
sub
ja
movs
movs
test
jge
test
adc
inc
addr16
dec
mov
fisttp
adc
jbe
lahf
(bad)
push
mov
lock
mov
adc
repnz
pop
in
pop
jl
mov
pop
fmul
das
push
jo
mov
jmp
mov
xchg
adc
push
pop
dec
outs
pop
jnp
mov
test
movs
pop
pop
dec
jnp
rcl
adc
jbe
ja
mov
pop
js
and
outs
mov
jle
ds
ins
in
(bad)
loopne
push
js
inc
adc
pop
movs
sbb
test
js
arpl
test
xchg
sbb
inc
xor
out
js
xchg
gs
add
bound
popa
imul
dec
jae
adc
pop
out
pop
dec
lahf
push
in
inc
jbe
mov
pop
fcmovnbe
(bad)
jp
int3
add
lea
lahf
inc
daa
push
(bad)
mov
jbe
lahf
cmp
inc
js
and
xorps
mov
movs
fcom
popa
inc
cmp
adc
das
add
sub
imul
inc
jae
and
push
xor
inc
push
jnp
aad
std
test
jge
push
push
inc
push
jns
xchg
inc
test
movs
inc
js
and
xor
jo
xor
xor
mov
pop
dec
jae
jo
inc
out
pop
sbb
cmp
ficomp
cmp
dec
(bad)
jae
out
pop
loopne
push
xchg
jp
fld
imul
pop
xchg
retf
fs
stos
cmp
test
add
shr
xchg
mov
add
xchg
cld
adc
mov
jae
ja
pop
push
cmp
cmp
xchg
add
ss
sbb
in
in
(bad)
hlt
adc
rcr
inc
mov
cmp
mov
ds
cmp
loope
test
xor
pop
xchg
dec
ins
dec
push
aaa
jae
ret
loopne
stc
or
sbb
cdq
fs
retf
xor
pop
xchg
in
xchg
add
and
out
or
or
xchg
add
pop
shl
xchg
jge
jmp
xchg
adc
add
out
pop
fcom
nop
add
test
rcl
cmc
pop
hlt
arpl
pop
sub
inc
xor
sub
and
jbe
push
xor
add
ins
jl
pop
cmp
int3
call
inc
xor
imul
outs
cli
inc
pop
jbe
push
out
push
xchg
bound
aam
fcmovbe
repnz
std
jmp
adc
mov
add
fadd
shr
pusha
retf
add
push
xor
mov
data16
add
pop
mov
(bad)
fsubr
adc
or
mov
mov
aad
leave
mov
cmp
mov
imul
inc
or
stos
ja
mov
or
jle
adc
xchg
aam
jle
push
push
lahf
jp
aas
pop
sbb
sbb
(bad)
push
inc
loopne
pop
add
sete
sbb
das
popa
pop
sbb
rcl
pusha
jp
sbb
(bad)
(bad)
repz
les
in
and
cdq
icebp
adc
loopne
push
retf
push
fidivr
sbb
cmp
and
and
imul
ins
cld
retf
pop
sar
inc
sub
ins
dec
cmp
(bad)
ins
pushf
cmp
push
xchg
aam
dec
add
in
jno
push
xchg
xchg
and
icebp
push
call
in
and
jo
cmc
push
in
or
or
clc
aad
adc
cmp
mov
push
push
xor
scas
cdq
jecxz
(bad)
aam
lock
push
shr
dec
xchg
pop
lods
mov
mov
xchg
lods
sbb
or
xchg
ss
lds
add
and
out
cdq
shr
xchg
dec
sbb
and
cli
xchg
adc
sti
push
xchg
popf
fs
cmp
add
xor
or
xchg
jmp
and
inc
inc
test
and
addr16
pop
add
mov
inc
dec
mov
or
mov
or
hlt
and
sbb
jns
sbb
fldenv
dec
cmp
in
xor
jae
in
push
bound
xchg
jle
sbb
adc
fdiv
addr16
and
cmp
push
xor
(bad)
cmps
ss
scas
adc
imul
aas
and
aam
sbb
and
sbb
xchg
and
or
int3
push
mov
ficomp
movs
adc
mov
sub
shl
hlt
pop
lods
popf
jecxz
das
jmp
xor
xor
call
lods
adc
sub
pop
and
repnz
xor
rcr
pop
out
out
sbb
xlat
int3
sbb
inc
dec
push
dec
sub
out
fstp
sbb
fs
out
jno
pop
fnstenv
mov
push
and
inc
sbb
xor
js
lea
in
cmp
jmp
xor
call
stc
ficom
icebp
sbb
and
push
push
(bad)
add
jl
imul
loop
in
std
and
add
or
pushf
add
xchg
cmp
aad
retf
add
adc
sbb
add
jmp
sub
push
int
and
in
or
ins
push
mov
cld
dec
mov
pop
cmps
aas
daa
sbb
sahf
adc
add
sti
push
btr
sbb
adc
push
addr16
icebp
and
cmp
pop
rol
mov
sbb
ret
les
in
mov
jnp
push
mov
movs
das
push
push
ins
push
fnstenv
jmp
xchg
and
push
fisub
loop
push
sahf
add
ins
push
dec
sbb
pop
inc
or
aam
outs
add
adc
movs
and
into
adc
and
dec
imul
cdq
lock
retf
dec
fs
int3
mov
loopne
pop
in
lahf
jb
out
mov
push
(bad)
inc
std
jmp
adc
imul
add
cdq
imul
int3
push
xor
pop
adc
fs
stos
mov
mov
adc
sub
push
imul
cs
js
int
xchg
dec
pop
es
cmc
jo
in
push
inc
fadd
fcmovb
rcl
sti
sbb
cld
jae
sar
aad
mov
fsub
sbb
aam
fmul
xor
repz
sbb
rcl
aam
js
add
icebp
push
in
icebp
inc
mov
adc
push
in
int3
push
mov
xor
jmp
inc
push
sahf
sub
pop
cwde
xor
int3
ins
call
jmp
add
or
push
cmp
aam
or
cdq
jmp
inc
fdivp
stos
adc
push
xlat
lock
push
stos
int3
adc
jp
fadd
push
imul
sbb
test
jmp
in
add
cmp
mov
sti
adc
pop
or
mov
xchg
pop
inc
xor
or
add
xor
imul
iret
aad
enter
pop
fadd
pop
cwde
cmp
lds
ins
mov
mov
sub
sbb
std
mov
dec
(bad)
pop
add
jnp
das
pop
loopne
jbe
and
call
pop
imul
mov
sub
ds
sbb
data16
mov
sub
adc
pop
pop
push
mov
dec
dec
or
mov
add
mov
push
loopne
fld
push
push
shl
test
addr16
ss
outs
mov
inc
and
loopne
std
jae
adc
dec
or
(bad)
shl
adc
(bad)
mov
push
add
sub
sub
cmp
fdivr
clc
call
and
ficomp
mov
xchg
push
cmp
xchg
cmp
test
dec
and
adc
add
and
mov
jns
int3
push
inc
in
push
add
fiadd
dec
sub
add
xor
retf
in
ficom
xchg
fimul
xchg
cmps
adc
invd
js
mov
xor
cld
or
lods
test
mov
sbb
xchg
retf
xchg
cli
in
fld
mov
cmp
or
mov
cmp
xchg
and
and
lods
cwde
ins
popf
xlat
xchg
fsubr
sar
xchg
repnz
rol
in
shl
in
pop
lods
push
outs
sbb
add
push
leave
mov
cwde
add
or
sti
inc
jno
in
dec
rcl
mov
mov
in
sub
cs
test
jle
(bad)
repnz
pushf
sub
cdq
sbb
out
fmulp
test
sbb
jmp
aam
shl
pop
xchg
pop
cmp
mov
inc
call
xchg
cmp
jb
inc
add
or
adc
loop
lods
mov
addr16
inc
lods
sub
cmp
loop
(bad)
leave
mov
fwait
aad
add
mov
cld
mov
adc
inc
and
pop
push
pop
or
icebp
je
data16
inc
pusha
test
or
pop
push
test
(bad)
lahf
xchg
bound
div
test
sbb
mov
dec
aaa
fmul
lods
leave
dec
mov
repnz
push
cmps
repz
popf
cmp
mov
xor
inc
mov
and
in
call
(bad)
pusha
pop
pop
inc
movs
in
outs
jne
ins
jo
cdq
mov
call
pop
jbe
sahf
fsubr
pop
mov
js
sub
mov
hlt
test
xchg
cmp
add
ret
push
movs
call
cwde
dec
addr16
in
stos
push
div
adc
(bad)
leave
call
adc
sub
lods
push
(bad)
sub
xor
adc
fimul
mov
jmp
push
sbb
xchg
add
or
fnstcw
jle
mov
pop
fldcw
sbb
sar
xor
mov
fstp
aam
mov
push
mov
adc
inc
inc
jne
aad
fsub
cli
test
rol
mov
xchg
hlt
js
mov
sub
mov
sbb
mov
mov
push
sbb
xor
sub
jae
loopne
push
cmp
inc
xor
int
pop
pop
stos
sbb
cmp
cmp
lods
xor
xor
sahf
not
or
fcmovnb
mov
rcr
jmp
jle
in
xor
fstp
fxch
jmp
pop
in
adc
push
bound
xor
pop
pop
sub
push
sbb
push
adc
in
mov
aaa
jnp
and
out
jecxz
or
push
mov
sbb
jle
stos
adc
std
ret
sub
imul
cmc
mov
adc
jecxz
inc
(bad)
xchg
inc
repnz
sub
lods
pop
call
out
mov
mov
xchg
or
int3
and
push
inc
(bad)
ret
div
mov
xlat
inc
nop
fild
mov
jecxz
je
fisttp
adc
and
outs
retf
js
fld
loop
pop
repz
mov
pop
cwde
cmp
jae
fsubr
int3
into
inc
add
ficomp
add
jmp
push
cli
mov
mov
inc
jl
clc
clc
add
sub
or
adc
sub
ds
push
adc
call
sub
push
mov
jmp
ret
imul
mov
adc
mov
js
pop
inc
cld
adc
fbld
jge
inc
(bad)
(bad)
retf
shl
mov
dec
sbb
xor
retf
cmp
test
sbb
xchg
int3
ins
es
int
das
push
and
shl
and
or
call
repz
hlt
mov
xor
test
fdiv
in
xchg
add
sub
sbb
imul
pusha
sar
mov
movs
xor
mov
push
(bad)
mov
xchg
adc
jae
add
xchg
retf
sub
xor
in
and
pop
cdq
cmp
dec
out
sub
fbld
and
(bad)
adc
pop
retf
sti
pop
out
ss
or
jmp
adc
add
xchg
pop
rcl
rol
and
sbb
addr16
(bad)
je
dec
sbb
cmp
xchg
xor
cmp
sub
add
mov
pop
sub
cdq
jmp
aaa
sub
jne
add
pop
ret
dec
sbb
or
cli
loopne
shl
pushf
addr16
ds
xchg
sbb
pop
add
and
xor
fidiv
adc
test
test
cmp
js
jo
ins
retf
bound
dec
sub
xor
add
cdq
cmp
outs
js
fisubr
ret
fistp
in
icebp
or
stos
xor
cmc
or
pop
cmps
loopne
push
sar
into
push
xor
xor
loopne
mov
bswap
inc
(bad)
adc
pop
mov
pop
push
xchg
stos
ss
aas
and
dec
sar
dec
adc
out
push
mov
ret
stc
add
sti
sti
je
jne
push
inc
add
fstp
retf
sub
cmp
adc
sar
and
adc
cmp
sbb
sbb
js
dec
adc
mov
cmp
outs
aaa
push
mov
rcr
pop
adc
adc
shl
lock
in
mov
mov
popf
imul
pop
lds
mov
push
or
sub
sub
or
push
movs
or
(bad)
(bad)
or
inc
stos
pop
popf
or
mov
test
int3
sub
push
inc
push
pop
cli
or
fldenv
pop
loopne
pop
sbb
(bad)
and
jg
ret
loop
jmp
aas
add
hlt
(bad)
sbb
inc
pop
dec
cmp
sbb
add
in
pop
cld
mov
dec
mov
mov
fcmovbe
shr
pop
sub
pop
xor
xor
dec
loopne
xchg
sub
in
cmps
nop
jecxz
push
loope
push
icebp
dec
add
les
sub
and
ret
int3
push
test
mov
outs
popf
aaa
dec
shl
push
mov
in
mov
sub
pop
shl
outs
inc
or
pop
cmp
mov
xchg
inc
dec
and
out
mov
shl
adc
adc
rcr
add
aas
xchg
in
clc
xchg
adc
mov
imul
std
scas
push
js
inc
mov
ins
or
pop
sub
xchg
retf
push
xchg
sbb
and
sbb
pop
dec
dec
cmp
loope
adc
mov
xchg
cmp
jmp
jmp
or
aaa
jg
push
sbb
retf
push
retfw
pop
test
dec
or
sbb
mov
push
pop
enter
dec
xchg
pop
pop
adc
sbb
pushf
adc
jns
int3
fs
(bad)
sbb
cmp
cmc
fcomp
mov
popa
fst
lods
adc
adc
jge
rcl
push
fldcw
inc
add
pop
aas
fstp
mov
loopne
icebp
ds
jecxz
fwait
and
fdiv
pushf
sbb
push
pop
mov
mov
and
and
in
dec
pop
into
push
push
(bad)
add
jp
dec
enter
lea
xchg
sbb
cdq
sti
fbld
sub
add
push
cmp
xchg
sbb
fwait
std
fild
jmp
es
pop
(bad)
cli
inc
cld
in
or
ins
fcomp
mov
adc
or
cld
or
jne
adc
addr16
adc
in
iret
jnp
imul
mov
fcomp
mov
push
xchg
aas
adc
aad
enter
xor
mov
push
mov
cmp
das
push
inc
pop
push
sub
std
out
jmp
int3
cmp
sub
push
addr16
icebp
xor
int3
dec
imul
xchg
adc
mov
int
push
test
push
addr16
cs
out
sbb
std
jo
mov
jmp
fwait
in
add
cld
add
mov
ins
retf
pop
sub
inc
test
push
push
cmp
aaa
pop
imul
(bad)
adc
(bad)
and
dec
dec
call
stc
add
xchg
sub
mov
lods
sub
(bad)
push
sbb
scas
adc
xor
sbb
xor
repnz
add
out
mov
test
or
or
add
xor
or
or
scas
dec
add
pop
or
icebp
mov
jp
hlt
or
mov
adc
mov
sub
mov
pop
xor
pushf
out
xor
bound
fidiv
imul
pop
in
adc
jle
pop
push
aad
nop
add
xchg
pop
dec
sbb
ficomp
jo
xchg
xor
test
dec
aam
jns
adc
cld
cmps
icebp
inc
jle
dec
aam
fcomi
mov
cwde
int3
out
popf
adc
or
shl
cmp
push
push
xor
addr16
(bad)
adc
mov
xchg
pop
xor
imul
xchg
pop
xchg
clc
add
xchg
xor
mov
xchg
cld
sbb
in
jnp
call
icebp
adc
inc
adc
or
daa
fidiv
ficomp
hlt
inc
add
add
cmp
icebp
or
and
or
xchg
or
xor
and
jecxz
sbb
rcl
repnz
sbb
push
imul
int3
sbb
add
and
jmp
add
cwde
dec
push
ins
add
cdq
mov
jae
xchg
sbb
jmp
aad
adc
xor
push
das
xchg
lea
hlt
punpckhwd
sub
push
retf
cmp
outs
xlat
adc
mov
adc
cmp
imul
imul
adc
and
push
mov
sbb
icebp
cmp
sub
cmp
jo
pop
repnz
or
or
push
mov
std
dec
mov
mov
jmp
ins
in
push
int3
icebp
or
jmp
push
sub
push
xor
sbb
and
int3
xchg
push
jl
xchg
adc
adc
adc
in
jo
or
jp
in
pop
out
enter
cmp
push
cmc
and
adc
pop
int3
fnstenv
pop
adc
lods
out
add
addr16
les
cdq
fcom
fwait
adc
sbb
hlt
retf
imul
push
icebp
out
ror
dec
adc
lock
aad
mov
outs
mov
dec
mov
xor
cmc
add
(bad)
adc
ret
dec
ss
and
push
pop
icebp
repnz
xchg
push
push
loopne
movs
addr16
call
retf
test
push
mov
sbb
addr16
test
loop
or
(bad)
push
adc
sti
cli
adc
je
dec
fs
mov
clc
and
in
call
movs
pop
into
cmps
aas
outs
imul
inc
jmp
enter
sub
shl
cmp
xchg
xor
or
ins
add
test
or
sbb
cmp
cli
mov
jo
pop
cmc
ja
cmp
add
iret
test
icebp
push
adc
inc
xchg
push
or
inc
xor
mov
lahf
jle
mov
adc
and
inc
cdq
ds
es
and
xchg
imul
xrelease
retf
je
cmp
sbb
push
ret
sbb
fdivr
pop
adc
rcr
daa
rcl
ficomp
in
mov
adc
je
sar
xchg
retf
nop
out
push
adc
or
cmovg
jle
lods
loopne
stc
les
sub
mov
fcom
mov
pop
lds
or
adc
pop
lods
sub
rcr
js
or
call
push
inc
out
cdq
into
or
push
mov
adc
scas
xor
pop
adc
mov
fild
inc
mov
mov
xlat
sar
cmp
pop
inc
out
call
mov
jge
mov
retf
sub
movups
jl
loope
jo
outs
lods
mov
call
jge
mov
sub
or
ins
pusha
jle
sbb
out
sub
std
les
not
sub
in
dec
jecxz
or
ret
pushf
xor
add
lods
shl
sbb
xor
mov
mov
sar
fcom
xchg
not
or
fisttp
movhlps
aaa
int3
dec
add
out
or
int3
or
fbstp
lock
stos
daa
xchg
cmp
dec
sbb
sbb
inc
jmp
xor
nop
cdq
pusha
in
retf
or
sbb
mov
or
pop
out
(bad)
les
sub
adc
xchg
or
repz
mov
pop
sbb
loop
dec
xor
jno
js
in
fmul
add
inc
cmps
pop
int3
lods
stos
inc
add
std
rol
int3
mov
inc
aas
mov
ins
sbb
mov
jmp
fiadd
mov
cmp
push
test
mov
and
adc
add
inc
add
or
dec
js
push
call
inc
pop
push
inc
jg
jl
cmps
push
mov
xor
inc
fild
sbb
stos
imul
push
jle
push
pop
in
int3
in
lods
xor
sbb
popf
add
loopne
dec
in
mov
fwait
jp
scas
and
addr16
ret
das
add
mov
mov
push
pop
pop
movs
test
pop
test
xlat
adc
sbb
inc
inc
int3
outs
mov
int3
ss
jmp
jb
test
jmp
repz
push
lock
cmc
adc
push
mov
mov
xlat
pop
shl
dec
or
push
dec
jecxz
jae
adc
dec
pop
and
loope
jecxz
aad
int3
xor
mov
pop
xchg
jl
out
das
addr16
pop
test
adc
sbb
or
neg
xor
push
jmp
push
out
adc
cmp
stc
and
dec
push
(bad)
sbb
pcmpeqb
mov
loope
cmp
cmps
sub
mov
adc
cmp
ret
cmp
sub
dec
cmp
fidivr
adc
or
sub
mov
leave
aas
dec
cmp
mov
cmp
mov
or
popf
dec
fnstenv
outs
sbb
minps
pop
cs
jno
sbb
jg
mov
lods
cld
sub
test
jle
adc
ds
xchg
push
pop
sbb
xchg
push
nop
cmps
fyl2x
adc
pop
sar
daa
addr16
loope
lods
mov
cmps
mov
sbb
pop
xchg
cmp
xchg
and
push
sar
sbb
in
xor
sbb
clc
push
dec
sub
add
inc
clc
in
push
xlat
cmp
pushf
mov
out
add
int3
push
sti
gs
fxch
fwait
dec
xchg
push
fadd
dec
ja
inc
xlat
int3
cmps
(bad)
add
add
mov
into
hlt
leave
xchg
sti
nop
mul
pop
in
sets
xchg
dec
xor
mov
(bad)
fadd
xchg
ret
pop
mov
addr16
cmp
inc
fist
(bad)
sub
mov
or
scas
mov
xor
cmp
ror
test
xor
movs
push
push
enter
and
lea
mov
adc
and
or
stos
fstp
xor
xor
pushf
movs
sub
xor
fiadd
pop
stc
repz
retf
sub
push
pop
in
ficomp
sbb
adc
imul
jp
or
add
aaa
cmp
mov
inc
cmp
imul
xor
mov
add
lahf
js
sbb
dec
mov
cli
sub
out
push
ins
aas
(bad)
push
and
dec
jnp
cs
dec
xchg
push
or
cmp
call
cmp
pop
cmp
or
pop
pop
sbb
pop
adc
in
sbb
in
jmp
adc
or
in
xchg
cmp
lea
lock
mov
mov
dec
pop
ins
mov
cdq
or
int3
jae
cmc
xor
sahf
aaa
outs
loop
or
aaa
adc
ret
mov
or
jae
repnz
sub
lahf
fcmovb
and
mov
mov
push
test
inc
xor
loope
es
int3
xchg
inc
xchg
das
xor
xor
loopne
sti
test
and
mov
sbb
and
(bad)
in
push
and
(bad)
xor
sbb
add
cmp
pop
xor
sti
in
(bad)
fistp
dec
add
adc
push
outs
icebp
xchg
sub
pop
and
mov
ror
xor
jno
gs
loop
shr
lahf
ins
cwde
pop
fwait
popa
movs
or
add
jae
or
add
xor
loopne
dec
mov
cmp
or
cmp
cmp
pop
push
(bad)
adc
imul
pusha
daa
cdq
rcl
pop
cmc
cmp
xor
xchg
add
push
icebp
je
jae
in
mov
dec
and
mov
sti
push
xchg
add
xor
dec
pushf
xor
(bad)
sahf
add
mov
mul
sbb
adc
icebp
or
test
sub
ins
adc
sti
add
push
repnz
call
jg
in
fld
(bad)
test
push
outs
cmp
adc
bound
cld
or
sbb
mov
xor
pop
int3
xor
test
lods
arpl
(bad)
jb
(bad)
cmp
add
sbb
or
ins
xor
in
jns
pop
stos
sbb
pop
or
inc
or
daa
adc
sbb
cmp
outs
adc
cwde
mov
fwait
imul
addr16
loopne
imul
add
loope
mov
in
sbb
xor
xor
and
sbb
adc
aad
sbb
fmul
and
sub
add
rcr
add
mov
mov
(bad)
sub
xchg
cmc
or
fs
out
shl
jp
aas
xchg
pop
xchg
and
mov
pop
mov
xor
sbb
(bad)
add
inc
out
rcr
test
mov
pop
rcr
sub
sub
add
(bad)
jae
ror
popf
in
inc
cbw
(bad)
loopne
dec
sti
pop
mov
(bad)
xor
dec
xor
daa
sub
sbb
push
stos
xor
je
push
ret
push
xor
jo
in
or
xchg
push
(bad)
gs
in
add
inc
xchg
mov
and
sbb
das
shl
pop
sub
push
fmul
or
mov
clc
inc
repnz
jecxz
stc
sub
inc
mov
enter
mov
lods
mov
xchg
cdq
dec
and
test
sbb
add
sbb
fs
xor
xor
cld
dec
(bad)
dec
imul
test
xor
lods
mov
loope
adc
mov
js
adc
fsubrp
push
and
in
call
repz
sbb
in
xchg
xor
imul
retf
sbb
out
lods
int3
mov
or
sub
icebp
push
push
nop
mov
ficom
ds
repnz
fcmovnu
aam
mov
inc
nop
or
pop
xchg
sbb
jmp
adc
arpl
adc
pushf
loopne
and
(bad)
fdiv
arpl
ins
sbb
imul
lock
repz
into
shr
int3
aad
mov
dec
lods
sar
xchg
xor
and
int3
lss
mov
(bad)
push
add
mov
ds
xchg
cmp
xor
jle
and
dec
cmp
jmp
xor
in
(bad)
xchg
mov
push
or
dec
mov
lock
imul
mov
les
mov
inc
aaa
mov
and
pusha
add
mov
xor
cmp
cmps
jne
push
push
mov
jg
xor
adc
jmp
add
lods
test
push
mov
adc
icebp
add
sbb
add
les
sub
sub
sbb
ror
fldenv
std
jl
jno
mov
fwait
pop
repz
xchg
jns
add
push
sbb
sub
dec
test
mov
(bad)
das
sub
fidivr
mov
or
int3
inc
mov
das
aad
outs
mov
in
adc
aas
call
sbb
add
push
jae
push
xchg
ja
jmp
or
fistp
cmp
aas
jne
jecxz
push
fcomp
or
xor
jns
cmp
ss
repnz
fwait
sub
push
jp
add
mov
jno
int
fcom
cmp
push
or
std
pop
pushf
icebp
push
add
sbb
loope
call
push
cmps
data16
mov
cld
jecxz
jnp
fmul
test
dec
repnz
mov
iret
int3
adc
pop
iret
in
jmp
fs
cli
int
cld
in
pop
or
sub
xor
sub
sub
and
hlt
mov
(bad)
adc
add
jns
jnp
add
pop
cdq
push
mov
pop
add
data16
and
js
xchg
int
sbb
fistp
cwde
dec
jmp
leave
jmp
sqrtps
add
mov
ins
xor
sub
cmp
xor
xor
div
lock
out
loope
fist
retf
shl
push
dec
cmp
inc
push
jnp
lock
clc
scas
adc
pop
test
icebp
cmp
pop
imul
sbb
sbb
lock
pop
xor
out
jb
cld
icebp
fs
pop
clc
sbb
jge
int3
and
(bad)
out
jg
pop
mov
or
cmp
lock
xor
hlt
outs
dec
and
jge
sbb
and
je
call
ins
nop
bound
ret
jae
and
lods
push
loop
aaa
pop
les
mov
sbb
in
cli
(bad)
jbe
push
sub
or
retf
or
jmp
xchg
into
aam
xor
dec
bnd
xlat
add
test
shl
pushf
mov
lods
and
inc
rcr
retf
stos
dec
fsub
or
xor
sbb
mov
popf
xchg
pop
dec
loopne
inc
int3
sbb
icebp
lods
movs
jmp
test
fyl2x
xchg
stos
sub
daa
aad
xchg
test
test
stc
cmp
push
and
sub
fwait
loopne
push
jo
push
cdq
cli
lds
pop
mov
mov
clc
sub
inc
xchg
call
or
retf
fdiv
cwde
or
add
pop
sub
aad
(bad)
push
mov
jmp
aas
xor
or
cmps
icebp
(bad)
push
(bad)
in
inc
or
cs
shr
push
in
pop
in
jp
(bad)
dec
cmc
sbb
dec
call
adc
add
xor
fmul
cld
jns
cwde
push
and
sbb
xchg
add
lods
mov
pop
dec
cmp
fdivr
sti
xor
sti
lock
cld
jl
pushf
sti
leave
in
mov
cwde
adc
jae
in
cmp
jl
loope
pop
xor
aaa
dec
inc
sbb
push
push
jmp
mov
dec
add
pop
push
adc
aas
dec
mov
sub
push
push
dec
pop
adc
jl
mov
pop
xchg
in
pop
push
and
imul
mov
test
imul
add
or
sub
add
mov
pop
or
cmovns
adc
retf
(bad)
sub
jle
sbb
icebp
or
fst
jge
sub
mulps
jl
adc
test
retf
imul
lods
enter
add
ret
and
call
sbb
cwde
add
stos
stos
pop
adc
aas
add
xor
sbb
push
adc
push
and
ret
and
mov
(bad)
xchg
aas
in
or
jae
stos
in
data16
das
lods
sub
aam
es
xchg
or
pop
xchg
mov
test
inc
pop
adc
cld
jb
sahf
xlat
xor
sub
push
mov
inc
cld
sub
movs
(bad)
dec
dec
jmp
push
loope
stos
movs
jno
leave
(bad)
ds
or
sbb
imul
and
inc
scas
adc
in
add
mov
pop
mov
jnp
jmp
xor
adc
adc
bound
pop
pop
push
sub
stos
aaa
pop
pop
mov
test
cmp
push
in
xchg
add
cmp
in
xchg
and
addr16
jae
in
mov
rol
lds
mov
pop
cdq
aam
int3
dec
in
push
cmp
push
repnz
and
add
stc
out
sub
and
or
adc
mov
ins
ret
fxch
sbb
jecxz
shl
mov
out
mov
in
push
jg
or
jno
sbb
fcmovbe
in
int3
gs
cmps
cmp
ret
les
pop
ret
push
ins
push
test
ins
lock
xor
pop
les
imul
mov
(bad)
loopne
cmp
in
outs
jmp
jge
mov
sahf
xor
movs
and
test
mov
sub
mov
jecxz
add
out
xor
(bad)
aam
and
sbb
int
or
dec
gs
jo
sbb
lds
lods
add
addr16
cmps
lods
jo
add
call
pop
ins
inc
ins
ret
rol
push
aad
cmp
test
dec
and
lods
pop
ja
cmp
lods
and
in
xchg
loopne
cld
jp
or
aam
call
adc
jmp
out
inc
pop
cmp
push
adc
add
mov
movs
xor
mov
jbe
call
data16
retf
push
lea
xchg
push
sub
test
xchg
leave
mov
cli
xchg
mov
loopne
fisttp
sbb
sbb
sbb
loopne
mov
xor
ins
mov
enter
or
nop
xchg
sub
out
xchg
mov
inc
mov
cwde
pop
mov
add
in
fsubr
xor
mov
jl
add
in
icebp
dec
sub
in
pop
push
cmp
cwde
pop
xchg
icebp
mov
pop
lock
test
dec
test
add
jl
mov
test
pop
inc
lock
lds
inc
aad
inc
shr
sbb
dec
lock
sbb
dec
ins
lods
test
add
cmp
das
fmul
pop
mov
adc
shl
into
scas
adc
lahf
hlt
les
and
jae
neg
or
int3
cli
mov
cmp
cmp
stos
cmc
mov
lods
mov
lock
sti
mov
icebp
or
xor
inc
add
or
jecxz
mov
xor
out
adc
mov
sbb
adc
das
bound
nop
int3
mov
xor
pop
and
rol
(bad)
(bad)
les
pmaddwd
or
mov
mov
(bad)
push
sbb
jg
add
stos
or
push
leave
test
xor
xchg
add
es
fisubr
mov
sbb
sub
mov
retf
jg
dec
psubusb
sbb
in
(bad)
mov
shl
loop
sahf
aad
xor
and
mov
jg
jno
adc
jmp
add
scas
adc
js
mov
aam
push
cmp
fdiv
enter
retf
ja
sub
iret
fdiv
adc
sub
call
pop
xor
add
push
sub
and
dec
cwde
fmul
in
inc
sbb
aas
fcmovne
mov
xchg
cmp
das
cdq
stos
out
dec
scas
pop
mov
pop
push
xor
mov
jg
stos
xchg
push
push
call
xchg
shl
lods
push
ret
fistp
dec
test
inc
push
mov
sub
xchg
dec
in
outs
adc
into
push
icebp
loopne
lods
xor
jl
cmps
mov
jp
xchg
add
cdq
cwde
sahf
pop
inc
clc
stos
ret
pop
popa
fdiv
data16
and
iret
das
mov
push
cmps
cmp
sub
xor
nop
push
fdiv
mov
mov
stos
pop
aad
ins
mov
mov
cld
stc
and
imul
arpl
(bad)
mov
xchg
jl
mov
dec
mov
dec
mov
in
movs
lock
popf
leave
mov
fisttp
int3
push
mov
loope
xchg
sbb
and
mov
int
push
push
pop
xchg
adc
or
jge
add
mov
sub
fdivrp
sub
fist
sub
imul
lods
push
mov
adc
(bad)
out
jae
xchg
jmp
push
xchg
repnz
push
or
enter
jl
js
add
cmp
pop
or
and
mov
(bad)
(bad)
push
ror
and
in
mov
nop
fcmove
outs
call
test
adc
ret
add
pop
ror
jecxz
xchg
sub
xchg
xor
es
clc
std
gs
(bad)
addr16
push
in
push
call
clc
sub
dec
hlt
mov
lods
cmp
cmp
pop
out
inc
push
cmp
pop
fcom
xchg
hlt
int3
fwait
ins
xor
jmp
dec
adc
fisttp
mov
lods
les
dec
inc
push
fsubr
retw
adc
(bad)
push
js
movs
jbe
xchg
mov
mov
or
add
inc
fsub
add
hlt
aad
xchg
fsub
jp
sbb
icebp
pop
and
sbb
sbb
sbb
push
in
xchg
in
sbb
sbb
in
adc
xor
xchg
push
inc
test
inc
mov
and
je
test
cmp
adc
adc
cmp
mov
and
loopne
popa
or
fsubr
mov
cli
jmp
sbb
add
cmp
pop
adc
xchg
pop
in
mov
add
and
shl
and
and
dec
and
inc
les
(bad)
dec
xchg
fild
cmp
dec
ins
mov
push
sub
sub
pop
fcom
fwait
xor
xor
cmps
les
dec
enter
xor
sbb
mov
pop
shr
shl
xor
xchg
inc
fwait
mov
inc
adc
nop
pop
mov
lods
sbb
ins
push
push
ds
fst
cmp
mov
push
jmp
push
test
xchg
cmp
aas
xor
add
jbe
fistp
imul
adc
lds
js
mov
jo
push
push
and
xchg
adc
(bad)
push
add
in
fsub
cld
jge
into
inc
pop
in
pop
inc
mov
mov
and
jg
idiv
fdiv
inc
fwait
dec
xor
add
jg
test
test
out
xchg
and
ins
nop
cmp
outs
ja
sar
and
jp
popa
cmp
cmp
and
hlt
pop
mov
xlat
adc
stc
or
das
cs
loop
mov
sbb
xchg
mov
loopne
adc
js
icebp
or
imul
xchg
(bad)
cld
(bad)
sti
in
add
fiadd
push
adc
jmp
icebp
inc
dec
(bad)
pop
test
add
dec
adc
int3
add
ss
add
and
push
in
sbb
cli
inc
fisubr
sar
dec
dec
sub
or
xchg
pop
in
addr16
not
mov
dec
pusha
inc
inc
(bad)
mov
push
call
mov
xchg
test
jge
pop
jnp
mov
mov
adc
(bad)
aaa
adc
inc
nop
jbe
aam
icebp
inc
jmp
add
mov
push
or
fistp
pop
pop
add
pop
pop
dec
pusha
or
in
addr16
repz
pop
dec
out
into
movs
adc
push
and
pushf
or
nop
stc
jb
lods
xchg
or
mov
xor
or
lock
pop
mov
ret
fidivr
movs
jne
pop
dec
lods
sub
imul
in
sub
js
and
mov
ret
clc
jg
pop
dec
pusha
lods
aad
dec
(bad)
mov
xor
test
pop
int3
and
stos
pushf
add
bound
mov
jno
inc
fild
xchg
rcr
fucomp
enter
mov
jmp
inc
out
fwait
out
stos
fld
and
icebp
push
push
xchg
std
push
lahf
sti
sahf
xchg
out
pusha
add
sub
and
stos
xor
unpcklps
xchg
lds
(bad)
ds
repz
stos
aaa
out
push
icebp
or
repnz
pop
sbb
fidiv
inc
stos
clc
les
sub
jge
into
push
push
adc
stos
push
aaa
in
xchg
or
cld
dec
inc
ror
push
aaa
shr
inc
and
cmp
ins
or
push
call
sub
xchg
out
xchg
and
movs
add
or
xlat
fiadd
imul
out
jp
mov
icebp
and
mov
bound
fcomp
lods
sub
shl
lds
popa
cli
aaa
pop
inc
icebp
or
pop
ret
xchg
pop
and
call
pusha
into
sbb
jmp
jecxz
adc
sub
mov
(bad)
popf
push
sub
dec
int3
lea
jne
fcmovnbe
and
data16
fisubr
fldcw
out
test
push
or
or
pop
and
pop
add
add
mov
icebp
in
adc
add
jne
shl
push
cdq
fdiv
popa
dec
jmp
jle
call
jmp
dec
or
imul
imul
add
push
adc
push
fldenv
jae
repnz
or
rcl
sbb
xor
sbb
mov
sbb
sub
push
call
and
sub
add
cmp
push
cmp
fnstcw
jbe
add
or
scas
neg
mov
popa
inc
lods
inc
imul
sti
cmps
xor
jge
aaa
fild
mov
or
and
outs
lods
mov
lahf
dec
shr
pop
mov
scas
xchg
push
sbb
in
nop
or
inc
(bad)
adc
sbb
shr
aad
out
adc
push
and
cmp
dec
(bad)
mov
jmp
in
sbb
pop
sub
repnz
loop
sbb
xor
push
lea
ja
fiadd
mov
mov
shr
mov
hlt
(bad)
add
aaa
loopne
ins
or
ds
jae
sbb
movs
clc
dec
fs
pop
mov
cld
xor
ins
or
cdq
pop
and
nop
fisubr
addr16
and
outs
movs
mov
push
or
in
cmp
lock
and
push
push
dec
sbb
add
cmp
jecxz
mov
mov
cld
xor
xchg
adc
loope
fsub
pop
push
fdivr
sbb
jp
ror
pop
lock
(bad)
in
sbb
stc
or
xchg
cmp
popa
in
sbb
push
pop
ins
push
push
bound
jbe
add
addr16
aas
xchg
(bad)
data16
adc
push
and
addr16
dec
retf
mov
es
rcr
popf
xor
or
cmp
adc
int3
mov
imul
jle
push
ins
push
push
cli
jp
(bad)
xchg
scas
imul
adc
ror
adc
dec
out
cmps
sub
fisttp
mov
inc
cdq
pop
enter
add
int3
pop
ficomp
ins
int
jb
int3
or
cmp
xchg
xor
add
adc
in
inc
call
mov
or
xlat
sbb
addr16
dec
test
mov
sbb
or
xor
pop
into
repnz
fsubr
lea
sub
sbb
test
dec
mov
jb
cdq
jecxz
mov
cwde
leave
xor
mov
dec
in
dec
jp
sbb
add
pop
int
imul
ins
mov
(bad)
jp
cdq
mov
mov
dec
adc
xchg
pop
sbb
mov
clc
xor
add
test
int
cvttps2pi
xor
dec
retf
pop
mov
mov
enter
xor
pop
sub
enter
dec
das
pop
mov
out
adc
pop
jns
mov
add
ins
or
(bad)
xor
mov
jnp
jp
add
rcr
mov
repnz
and
lods
mov
pop
(bad)
cmp
pop
mov
mov
add
add
push
and
fsubr
sahf
push
push
into
pushf
cmp
add
pop
sub
js
call
retf
jp
cld
les
ins
and
loopne
and
push
in
pusha
out
add
mov
xchg
ins
jmp
adc
xor
cmp
xchg
inc
mov
cwde
fbstp
push
dec
push
jl
add
mov
nop
out
loopne
jmp
outs
and
mov
jae
sbb
xor
enter
add
push
adc
fs
dec
dec
cmp
sar
scas
sub
add
and
(bad)
cwde
scas
sbb
imul
test
mov
inc
in
sub
ins
ins
fwait
pop
retf
push
adc
jbe
dec
xchg
mov
or
sbb
lods
jge
ss
inc
lahf
mov
call
or
inc
mov
xchg
mov
in
jge
bound
add
jl
adc
add
xchg
rcr
xor
popa
mov
clc
movs
push
pop
daa
dec
xor
mov
cmps
pop
in
jg
inc
jmp
xor
ja
ins
movs
adc
sub
jns
icebp
cmp
mov
pop
aaa
jns
iret
mov
retf
leave
dec
push
loope
je
fld
xchg
inc
mov
retf
int3
sub
shl
je
add
cmp
dec
rcr
inc
add
dec
inc
jbe
adc
jae
dec
push
push
mov
clc
push
add
imul
gs
jo
push
sub
or
retf
icebp
pop
ret
and
rol
inc
or
sbb
sbb
shl
sbb
pop
icebp
clc
inc
inc
test
cwde
mov
pop
add
call
pop
sbb
out
or
imul
jl
add
sub
mov
xor
cld
cmps
sbb
or
sub
fcomp
add
sub
(bad)
and
and
push
mov
xor
push
ins
adc
dec
adc
call
push
mov
leave
adc
sub
aam
loop
fisub
mov
mov
imul
cdq
push
and
or
or
dec
pop
(bad)
jb
xlat
ret
imul
pop
pop
sahf
add
xchg
call
scas
add
cdq
add
(bad)
fsubr
inc
or
sbb
adc
mov
inc
push
cmp
aam
cmc
enter
cmp
pop
lock
(bad)
jp
xchg
ins
repz
mov
mov
cwde
jb
mov
dec
xchg
or
jp
xor
pop
xor
test
cwde
dec
jbe
dec
add
enter
out
imul
in
test
call
int3
dec
inc
(bad)
xchg
xchg
cld
popf
xchg
stos
icebp
in
adc
xor
movzx
es
xchg
cmps
push
cmps
adc
mov
pop
call
adc
xchg
xchg
cmps
mov
xchg
xchg
ins
sahf
xor
mov
and
inc
pop
push
imul
out
aad
mov
gs
sub
push
sbb
jl
jmp
push
jl
loop
clc
mov
add
mov
mov
jmp
add
clc
adc
add
int3
mov
and
lahf
sbb
dec
adc
mov
pop
xor
pop
ins
adc
outs
add
mov
cli
inc
loopne
das
mov
mov
add
fcom
push
int3
daa
or
loopne
cmp
push
rcl
cld
addr16
sub
out
fstp
inc
aam
sbb
sbb
sbb
sbb
adc
or
cmp
pop
scas
add
xor
ja
imul
dec
in
imul
pop
das
call
pop
outs
dec
or
cmc
mov
cmps
cdq
adc
sub
xor
mov
xor
or
mov
les
push
call
repnz
popf
scas
push
je
clc
cli
mov
retf
pop
push
jns
sub
adc
pop
pusha
les
mov
pop
add
mov
or
(bad)
xlat
dec
mov
xchg
ins
xor
scas
ins
js
cmp
push
sbb
pop
test
sbb
popa
jmp
or
jmp
or
jp
mov
jae
test
push
inc
inc
aad
sbb
rcl
mov
cmc
cmp
push
lds
add
fsub
pop
cmp
or
or
push
dec
push
enter
adc
imul
add
neg
gs
inc
fist
or
loope
inc
xor
dec
ror
stos
fwait
sub
fcmove
cmp
daa
pop
cmp
addr16
push
ins
pop
in
cmp
imul
jns
sbb
add
add
jo
inc
fld
pop
xor
fcomp
clc
push
add
cdq
popa
std
mov
mov
push
pop
stc
push
loopne
pop
cld
dec
out
test
inc
push
in
mov
or
dec
push
push
adc
in
adc
add
push
sbb
movs
ds
jae
sub
or
shr
cmp
retf
mov
or
adc
inc
aam
mov
sub
ins
dec
sbb
cmp
xchg
sub
(bad)
jmp
xchg
sti
jb
jmp
cmp
adc
sbb
sar
inc
ins
js
cmp
pop
add
aaa
in
add
clc
xchg
arpl
sbb
inc
mov
into
jmp
ins
int3
or
xchg
add
add
scas
pop
add
lds
loop
in
or
loope
je
mov
or
xor
xchg
in
test
sub
fs
push
pop
fwait
int3
scas
xchg
loopne
sbb
sbb
or
fistp
add
rep
push
cdq
repz
jne
mov
retf
push
add
repnz
cwde
jg
adc
jg
push
add
cdq
dec
xor
xor
in
mov
ins
cld
inc
push
or
in
cmp
stos
mov
or
pop
repz
sub
xor
xlat
sbb
xor
jno
add
popf
js
add
adc
mov
test
movs
cmp
mov
cld
add
cmp
and
xor
mov
pusha
or
mov
jo
test
js
push
dec
jae
sbb
gs
add
and
sub
test
add
dec
enter
cmp
jae
daa
inc
cmp
adc
sbb
add
fdivr
sbb
cwde
fidivr
hlt
pop
fld
jl
cmp
call
ins
push
xlat
nop
pop
lock
jo
cmp
aaa
sbb
sbb
aaa
fsubr
adc
cmp
push
aaa
sub
dec
les
clc
sub
aaa
shr
aaa
movs
sub
cmp
push
cmp
push
aaa
mov
sbb
aaa
sbb
and
cmp
push
aaa
adc
adc
mov
push
pop
lods
and
sbb
push
test
push
lock
test
cmp
push
shl
ins
push
or
js
inc
stc
adc
loopne
lahf
fsubr
dec
inc
mov
mov
in
mov
fs
xchg
add
mov
in
sbb
xor
imul
pop
push
movs
xchg
ret
fcmovbe
loopne
adc
sub
jp
pop
movs
add
push
fsubr
push
mov
pop
in
adc
and
or
and
add
push
fidiv
cmp
ins
or
in
cmp
cmp
dec
ins
sahf
int3
dec
xor
inc
lods
es
nop
cmp
add
cmp
cmp
jg
loopne
xor
sub
test
add
popf
and
or
mov
or
cwde
dec
lds
mov
sub
add
fdivr
sub
mov
pop
test
xchg
jp
ret
les
xlat
ja
enter
int3
adc
mov
popf
or
and
add
(bad)
push
push
xchg
icebp
sbb
inc
adc
and
(bad)
mov
ins
or
sub
xor
jb
js
xor
nop
pop
mov
es
test
mov
loop
scas
add
int3
pop
(bad)
hlt
cwde
push
loopne
inc
mov
mov
inc
repnz
add
jo
jmp
or
pop
dec
jnp
fiadd
push
test
repz
jp
sbb
je
js
xor
pop
leave
stos
ret
cmp
adc
fisubr
cli
push
test
loop
push
fcomp
cli
jae
jle
adc
sar
clc
pop
cmps
mov
push
cmc
dec
pop
out
cmc
(bad)
call
jle
sbb
mov
xor
call
sbb
(bad)
sub
js
xchg
or
push
cmp
add
dec
les
push
sbb
lods
jbe
sub
mov
xor
ja
add
dec
test
daa
add
scas
dec
or
add
out
dec
inc
push
mov
and
jg
dec
add
mov
xor
xor
in
dec
mov
int
mov
mov
hlt
outs
lea
sbb
pop
or
int3
sub
pop
ss
push
mov
sbb
mov
and
dec
movs
dec
dec
int3
rcr
loop
inc
mov
mov
fild
adc
ror
lahf
sahf
pushf
cmp
inc
mov
mov
adc
jns
add
in
hlt
xor
lods
add
test
ins
sahf
pop
or
pop
pushf
xor
sbb
mov
inc
adc
ins
add
ins
push
js
cmp
cwde
pop
and
mov
test
aam
sbb
xor
lods
cwde
out
out
and
pop
les
fld
adc
pop
xor
cwde
pop
mov
and
cmp
cld
add
sbb
cmp
int
dec
xor
fs
sbb
dec
sub
shr
cwde
pop
pop
xor
cli
test
or
add
add
stc
popa
cwde
xor
fild
lods
mov
dec
cmp
sbb
retf
inc
or
jmp
dec
xchg
adc
dec
jnp
and
push
data16
shl
inc
in
push
js
sbb
addr16
jp
loopne
push
in
mov
js
or
gs
or
in
push
inc
mov
repz
pop
outs
fs
sub
gs
dec
jnp
mov
pop
dec
add
cmp
pop
(bad)
mov
dec
xor
loope
fstp
pop
dec
imul
add
in
sub
push
cmp
inc
xor
lds
sbb
leave
sub
jecxz
dec
mov
cmp
xor
bswap
or
push
push
mov
lods
jmp
scas
out
ja
ror
imul
int
inc
mov
lahf
fstp
outs
add
rcpps
lock
in
jl
mov
nop
cmp
sbb
mov
jmp
and
inc
aam
pushf
or
dec
cmp
sbb
pop
mov
mov
or
in
sbb
test
add
dec
in
push
das
imul
adc
dec
retf
ror
call
xlat
push
push
daa
inc
repnz
mov
push
mov
das
call
fsub
cmp
push
js
and
loopne
and
shr
xor
push
repnz
mov
mov
js
mov
jge
jno
pop
add
sbb
icebp
push
daa
push
jno
ret
sar
jl
xor
js
and
pop
adc
int
xor
dec
fcmovnb
push
test
mov
mov
lock
ins
or
mov
outs
xor
add
push
rcr
ficomp
out
push
sub
out
jmp
fisttp
pop
or
fdivr
mov
ins
add
or
cld
xlat
cmp
dec
cmps
call
push
mov
repz
out
pop
adc
inc
js
cmp
push
pushf
push
clc
lock
stos
push
int3
add
jns
jle
lahf
data16
cmps
xchg
call
push
mov
mov
(bad)
fisubr
enter
jb
sbb
mov
enter
pop
push
pushf
cwde
xchg
pop
mov
in
pushf
outs
inc
fsubr
cmp
inc
rcr
pop
pop
or
ins
dec
in
xlat
add
xor
lods
nop
pop
or
das
into
add
fdivr
and
cld
pop
mov
cmp
dec
ins
inc
ins
mov
pop
bound
sar
and
jecxz
int3
push
pop
adc
sbb
rcl
nop
push
lods
or
lahf
and
inc
adc
bound
das
in
fldcw
push
loop
cwde
add
scas
inc
inc
aas
mov
xchg
rcl
and
sub
rcr
cmp
es
inc
stos
cmp
cwde
pop
ret
lods
cmp
push
cmp
retf
inc
inc
and
cwde
pop
dec
popa
add
cmps
lods
jle
ins
cwde
and
cmp
mov
call
jl
out
aaa
mov
pop
cmp
mov
in
pusha
dec
mov
and
xchg
cli
or
adc
mov
push
add
cmc
jp
pop
ds
add
in
mov
ins
pushf
xor
cmps
fadd
in
sar
pop
inc
mov
push
ds
imul
stos
in
ds
icebp
imul
lahf
cmps
fdivr
ins
icebp
inc
das
mov
jb
inc
ins
daa
stc
cmp
adc
aas
les
enter
lea
into
cs
fadd
sbb
aam
jo
push
jno
cmps
fsubr
pop
pop
test
rol
scas
fisttp
pop
sub
hlt
repnz
or
inc
push
mov
dec
test
shr
inc
ds
icebp
cmp
jge
clc
add
rdtsc
in
(bad)
ret
test
pop
adc
pop
mov
mov
add
lods
fld
push
add
add
add
pop
dec
xor
cwde
xchg
mov
jge
xor
rol
mov
pavgw
dec
rcr
popa
or
aam
and
add
hlt
rcr
mov
pop
stc
xchg
call
xchg
cmp
jmp
fld
pop
sbb
and
sahf
push
xor
cmp
icebp
jg
or
imul
dec
sub
mov
neg
nop
scas
inc
dec
inc
and
mov
ja
xchg
push
push
out
push
adc
cdq
in
xchg
in
xchg
int3
xor
mov
dec
enter
imul
and
fcom
or
sahf
pushf
pop
cld
icebp
pop
add
push
enter
in
jg
push
push
in
pusha
or
sub
mov
cmp
int3
xor
push
mov
sub
movs
mov
(bad)
or
popf
xchg
call
cmp
add
cmp
xor
aaa
add
mov
std
dec
lock
add
pop
xchg
mov
mov
cdq
ficomp
fdivr
push
jmp
cmps
push
scas
cmc
(bad)
sahf
(bad)
xor
lock
cli
cmps
in
xchg
sub
xor
js
push
jae
cmps
sbb
or
cmp
repnz
or
adc
arpl
out
imul
adc
icebp
inc
loope
ficom
addr16
inc
jmp
int3
out
mov
adc
cmc
mov
dec
jmp
daa
jle
adc
xor
jmp
shr
icebp
aaa
mov
inc
adc
mov
icebp
sbb
popf
pusha
ret
and
pop
adc
loop
out
push
push
mov
mov
das
or
mov
shl
cld
cwde
dec
ret
out
pop
(bad)
mov
sbb
cmp
or
test
cwde
dec
jmp
adc
mov
mov
mov
add
xor
add
jge
xchg
pop
hlt
sub
jbe
cdq
shl
int3
inc
out
loop
xchg
je
sahf
pop
cld
outs
lea
movs
adc
adc
imul
pop
cmp
add
jbe
or
xor
leave
sbb
les
test
aam
icebp
or
imul
loop
pop
cld
pop
cmps
(bad)
and
cmp
jne
js
dec
aas
push
jmp
sub
jnp
retf
adc
xor
add
or
push
adc
imul
and
add
add
mov
xor
mov
cmp
add
sub
div
fadd
or
sub
jge
stos
xor
lea
sub
push
rcl
push
cmps
dec
cwde
dec
pop
ins
adc
push
imul
xchg
ret
adc
(bad)
dec
dec
leave
mov
scas
adc
dec
inc
nop
in
ror
mov
push
jmp
sub
shl
lock
fidivr
clc
adc
mov
mov
ret
in
sbb
xchg
mov
ins
hlt
inc
dec
lods
sti
xchg
or
movs
dec
mov
dec
ficom
adc
sar
adc
scas
pop
add
sub
inc
push
push
cmp
pop
test
or
loopne
pop
cld
xchg
jo
dec
push
pop
icebp
js
pop
in
shl
pop
call
cmp
sub
jnp
cmp
repz
in
pop
dec
xor
inc
adc
retf
gs
addr16
call
scas
mov
scas
retf
cmps
test
in
mov
inc
dec
xor
jp
or
fucomp
int3
hlt
std
out
outs
in
mov
(bad)
shr
pop
pop
inc
imul
ds
(bad)
cmp
pusha
loop
push
in
aam
adc
sub
dec
dec
jnp
mov
lods
pop
mov
sub
jg
sub
scas
adc
mov
jp
dec
add
lods
xchg
pop
mov
mov
jl
loope
xchg
pop
and
pop
mov
sbb
imul
jmp
jp
xchg
fs
sub
or
pop
and
cmp
cmp
pusha
mov
mov
fwait
js
xchg
call
pop
inc
push
lock
dec
in
jnp
push
cdq
clc
add
mov
dec
(bad)
enter
cli
mov
push
ins
mov
cdq
push
les
cs
sub
pop
rcr
scas
push
loopne
pop
xor
outs
or
mov
cmp
sbb
cmp
pop
sti
or
lds
push
sbb
inc
or
mov
mov
das
movs
push
imul
mov
or
imul
in
int3
mov
mov
lods
pop
in
leave
and
or
add
sbb
xchg
jo
lods
sahf
aam
pop
add
cli
daa
loopne
(bad)
popa
cmps
or
sub
movs
adc
rcr
loopne
imul
xchg
add
xor
xor
in
mov
mov
in
mov
or
popa
js
and
int3
cli
clc
sahf
jecxz
inc
add
loope
add
inc
add
or
cwde
aaa
push
or
push
mov
push
cwde
pop
xor
cmp
cmp
push
aaa
add
mov
or
dec
enter
imul
pop
add
or
movs
dec
hlt
mov
pop
(bad)
int3
lahf
cmp
in
mov
ror
mov
jl
inc
in
xchg
cmps
fisttp
(bad)
mov
lods
retf
sub
in
pop
stos
shr
adc
pop
or
mov
pop
pop
xor
cmp
rcl
and
sbb
or
aad
dec
sub
clc
adc
dec
out
and
mov
cmc
cmp
adc
cmp
sub
xor
and
sbb
int3
ds
or
pop
pop
jl
mov
or
test
lock
pop
xchg
pop
sub
fidiv
call
push
xor
add
mov
ds
in
in
sub
aad
pop
and
movs
int3
jno
sti
jl
call
or
in
mov
cwde
add
out
xor
or
pop
inc
sti
xchg
mov
int3
test
xchg
sar
mov
ins
inc
ret
add
mov
scas
add
cmc
mov
mov
aad
push
cwde
push
xchg
dec
cmp
dec
sbb
pushf
aaa
push
icebp
dec
(bad)
rcl
mov
push
inc
add
pop
jmp
push
dec
inc
jns
sar
lods
test
enter
outs
or
or
cmp
popf
(bad)
sbb
mov
sbb
nop
jge
push
int3
arpl
daa
add
pop
push
repnz
pop
dec
add
pop
int
jmp
add
cmp
jecxz
cmp
push
pop
fadd
and
adc
mov
in
dec
mov
div
cwde
std
add
add
pop
xchg
shr
cwde
(bad)
push
scas
clc
xchg
pop
push
mov
push
push
pop
pusha
or
jmp
and
mov
adc
inc
sahf
pop
aas
js
hlt
dec
imul
inc
test
dec
dec
jmp
js
imul
cdq
sbb
and
in
mov
inc
call
sbb
jmp
push
add
int3
stos
pop
jmp
push
int3
retf
dec
cwde
pop
popf
push
or
das
xor
stos
xor
cmp
sbb
mov
sbb
nop
pop
mov
pop
sbb
cmp
jmp
repz
sbb
sbb
or
xor
or
fs
sahf
xor
cli
jo
cmp
and
pop
cdq
xchg
inc
add
jmp
mov
add
arpl
or
xor
jns
inc
out
imul
fcom
bound
xor
call
aas
mov
add
clc
or
call
push
or
hlt
sahf
or
outs
dec
or
rcl
push
call
mov
sub
cmp
enter
imul
sbb
int3
xchg
cdq
imul
sar
les
test
test
xor
and
in
sbb
mov
jecxz
or
pop
cmp
jns
sahf
cmp
sub
aam
jmp
cmp
dec
sbb
or
mov
(bad)
mov
inc
aam
mov
arpl
lock
cmp
int3
mov
arpl
stos
push
cmp
int3
mov
and
push
push
xor
sbb
and
imul
adc
dec
push
xchg
xor
fdiv
push
fdivr
push
cli
or
fst
aad
scas
adc
push
or
mov
or
stc
push
or
jmp
int3
inc
xchg
(bad)
sub
jmp
int3
cmp
push
push
or
xchg
bound
xchg
jnp
xchg
pop
xchg
lods
test
push
sub
imul
out
push
cmovp
mov
xor
mov
mov
lods
sub
leave
mov
les
push
sahf
pop
clc
xor
adc
retf
pop
and
inc
mov
jne
std
in
inc
mov
lods
jp
lock
retf
add
popa
fnstenv
sbb
push
xor
jle
repz
pop
(bad)
lods
fnstsw
and
or
xchg
iret
js
aad
push
in
push
popf
mov
bound
inc
loopne
mov
scas
mov
xor
adc
jmp
jmp
mov
jmp
xchg
(bad)
mov
fwait
sub
push
or
ins
sub
sbb
jl
lods
popf
scas
push
das
enter
mov
mov
into
int3
and
push
mov
mov
mov
cld
and
popf
repnz
in
push
(bad)
jle
cmp
fcom
jmp
cli
int3
adc
(bad)
mov
sub
jnp
mov
cmps
add
add
in
sahf
dec
outs
jae
pop
dec
jbe
or
std
or
inc
gs
push
int
ja
add
pop
gs
xor
inc
pop
mov
jl
jns
ret
mov
add
aas
in
mov
dec
loopne
retf
inc
lods
je
fmul
add
and
fisubr
nop
add
pop
ja
dec
lds
and
push
int3
sub
add
mov
xchg
add
mov
dec
add
gs
push
or
pop
add
cs
ja
add
xchg
pop
jge
pop
adc
xchg
adc
push
jne
xchg
or
adc
xchg
cmp
mov
adc
add
mov
lock
sahf
ins
adc
push
add
adc
pop
sbb
fadd
sbb
sbb
mov
test
arpl
push
ss
add
and
sbb
test
xchg
or
mov
mov
out
cmp
fadd
popa
cmp
add
dec
push
es
mov
cwde
pop
sahf
xor
and
addr16
pop
xor
or
adc
xchg
sbb
std
and
retf
cmp
inc
out
mov
(bad)
shl
xor
or
ins
cmp
mov
xor
pop
sbb
test
repz
loopne
xor
sub
call
dec
test
sbb
sub
push
cmps
das
movs
data16
loopne
cmps
nop
rcl
dec
test
sub
retf
ret
adc
sub
cmp
xlat
add
sub
add
sbb
les
pushf
and
pop
or
das
cdq
and
mov
ins
fcom
xor
ins
inc
jmp
test
ins
xor
xchg
push
out
in
ja
loope
sub
inc
jl
ficomp
cmp
and
sbb
sbb
das
fnsave
mov
inc
jnp
icebp
std
adc
cmp
and
push
sub
adc
push
or
pop
pop
daa
sub
xlat
sub
inc
mov
idiv
push
sub
fisubr
jne
mov
xchg
xchg
in
(bad)
fiadd
in
xor
sbb
jne
imul
xlat
ror
adc
mov
dec
fst
rol
lods
sbb
imul
imul
jae
addr16
ds
add
push
scas
fadd
frstor
nop
inc
js
imul
cmp
bound
inc
add
sub
mov
sahf
or
xor
mov
push
in
scas
and
into
call
das
imul
cwde
cli
push
test
movs
std
les
or
(bad)
repnz
mov
xor
adc
call
enter
js
lods
mov
push
adc
xor
cdq
pop
sub
or
pop
icebp
outs
idiv
or
adc
fimul
pop
dec
xor
mov
pop
int3
loopne
mov
jg
inc
pushf
es
mov
jmp
cwde
mov
jg
sahf
xor
xchg
addr16
dec
cmp
cwde
jg
xor
sbb
xchg
fdiv
in
cmp
neg
ja
cwde
mov
adc
pop
test
mov
sub
inc
pop
(bad)
cmp
je
and
mov
(bad)
in
sbb
pop
or
push
setge
ins
das
push
stc
stos
push
pop
or
neg
push
addr16
or
les
and
or
das
push
sub
cld
mov
adc
pop
ins
mov
int3
daa
mov
pop
sbb
dec
clc
xor
test
fdivr
pop
mov
pop
sahf
out
aaa
pop
push
cmp
sub
dec
lods
imul
mov
and
scas
xor
cmp
add
xchg
pushf
push
cmp
cmp
add
xchg
cmp
cwde
cmp
clc
ins
push
or
lds
or
bnd
loop
dec
inc
hlt
(bad)
pop
add
lock
loopne
add
or
add
and
(bad)
out
out
(bad)
push
jb
or
inc
add
fprem1
fst
sub
jecxz
push
shl
push
and
adc
cld
mov
jne
sub
dec
lds
int3
bnd
popf
mov
pushf
nop
cdq
jl
pop
sub
les
pop
test
das
push
stc
or
xor
mov
ds
mov
retf
inc
repnz
arpl
push
xchg
sbb
ret
jmp
scas
adc
xchg
and
cmc
mov
shl
adc
sbb
test
(bad)
jmp
push
adc
daa
add
clc
xchg
movd
int
cmp
adc
cmp
sbb
push
xchg
xor
lock
lods
fst
add
or
out
xlat
in
int
push
daa
in
fisttp
and
jmp
push
xchg
adc
cmp
out
dec
add
push
adc
loope
jbe
cmps
repz
ret
ret
sbb
push
xchg
ja
loope
fidivr
lds
sbb
mov
daa
imul
push
sub
mov
xchg
or
aad
mov
out
adc
xchg
cmp
es
rol
push
sbb
xchg
loop
dec
xchg
lds
lea
xchg
xchg
adc
fadd
out
sbb
imul
in
ins
in
push
imul
push
cmps
rol
test
jle
stc
fcomip
fs
mov
data16
icebp
cmp
add
cmp
mov
(bad)
mov
xchg
inc
adc
sub
lods
add
cmp
pop
in
sub
adc
out
jg
mov
test
push
push
in
mov
out
js
out
dec
mov
cwd
adc
xor
ss
dec
fpatan
fst
js
jecxz
and
(bad)
fidivr
mov
lods
pop
imul
adc
jmp
inc
pop
aaa
or
popf
mov
adc
test
aaa
sub
rol
and
int3
fwait
sub
jno
nop
cld
sub
jno
pop
xchg
(bad)
cmp
lods
adc
push
inc
pop
ja
sbb
or
and
sub
daa
cwde
outs
and
add
jmp
inc
mov
xchg
add
icebp
pop
movs
or
pop
add
or
pop
sub
pop
sahf
mov
and
clc
test
pop
xchg
out
mov
cmp
jbe
adc
mov
fucomp
out
and
bound
aad
cwde
out
lods
setns
popf
add
xchg
cli
mov
or
(bad)
bound
cmp
sbb
mov
imul
ja
inc
and
out
mov
jge
inc
sbb
mov
(bad)
adc
addr16
adc
sub
int3
adc
lds
adc
fdiv
sbb
and
and
or
push
(bad)
mov
inc
in
sub
jmp
add
xchg
dec
leave
mov
mov
inc
cld
sub
add
fwait
pop
lods
add
aad
ins
shr
fild
or
mov
push
aaa
sbb
push
add
add
or
je
in
cmc
and
inc
adc
mov
add
push
in
xor
call
sbb
fmul
imul
sbb
or
add
or
seto
sbb
das
jmp
sub
sub
les
add
adc
or
lods
cmp
mov
sub
stos
mov
cmp
int3
add
call
cmp
clc
or
cmp
sbb
dec
or
and
xchg
pop
icebp
push
mov
das
stos
aam
adc
push
add
mov
xor
movs
leave
adc
je
imul
sbb
sub
rcr
sbb
or
repz
test
pop
sbb
test
cmp
sbb
addr16
dec
outs
push
cmp
or
dec
jp
jnp
sbb
pop
mov
jnp
(bad)
push
(bad)
and
push
pop
xchg
icebp
pop
retf
sub
ins
inc
(bad)
mov
adc
push
adc
dec
add
adc
(bad)
mov
setno
not
ret
mov
xor
mov
cmp
xchg
dec
xor
sub
test
cmps
add
test
bnd
dec
dec
jbe
hlt
jmp
rcr
pmulhuw
ja
repnz
mov
jnp
rol
dec
push
dec
mov
push
in
pop
sar
in
in
push
imul
add
dec
pop
dec
loopne
xor
pop
sbb
pop
add
js
dec
gs
dec
(bad)
in
test
adc
or
jnp
ret
sbb
pop
push
in
mov
jo
jnp
sub
or
fs
sbb
and
push
pop
push
dec
push
mov
pop
add
test
adc
push
add
dec
in
xchg
add
jo
or
sub
xor
shr
inc
dec
pop
es
mov
push
cmp
dec
sub
adc
pop
gs
cmp
inc
out
mov
les
inc
jecxz
sbb
sbb
loopne
dec
jmp
push
ja
push
jge
popw
sahf
and
adc
jmp
(bad)
ret
jle
and
fdivr
outs
mov
push
in
push
dec
pop
add
mov
jne
gs
dec
fcomp
ror
mov
mov
outs
cmps
test
xor
inc
les
nop
and
mov
or
dec
add
mov
lods
enter
inc
jmp
rol
push
jmp
mov
pop
daa
push
and
ins
adc
sub
nop
out
nop
add
push
and
popa
pop
xor
(bad)
xchg
movs
pop
push
dec
jp
and
xor
sub
mov
pop
fimul
movs
inc
js
push
adc
push
push
call
dec
imul
push
ins
pop
arpl
dec
imul
fcomp
test
je
sbb
ins
arpl
outs
fs
add
jne
je
out
sbb
cmp
idiv
lahf
inc
iret
push
stos
push
adc
inc
stos
mov
idiv
inc
mov
xchg
movs
xchg
xchg
push
add
xor
aad
fsub
xchg
adc
sub
lods
imul
dec
or
pop
xor
xor
hlt
mov
shl
fsubr
pop
xchg
dec
sub
mov
cmp
dec
pop
add
cmp
pop
shr
sbb
nop
in
arpl
in
in
ins
add
sbb
jmp
jmp
fiadd
imul
js
cmp
pop
xchg
loop
mov
mov
je
pop
push
retf
popa
or
pop
rcr
jnp
sub
jne
fucom
mov
push
xchg
mov
push
scas
clc
shl
sbb
adc
cmp
inc
aam
adc
mov
pop
adc
add
pop
xor
push
push
add
mov
adc
ins
cmp
add
imul
imul
imul
fs
call
dec
in
aaa
cmp
ins
(bad)
sbb
xor
repnz
push
nop
xor
inc
and
xchg
hlt
dec
in
pop
int3
jne
dec
in
lock
xchg
add
pop
xchg
add
xchg
test
xchg
add
jnp
sub
jne
clc
add
inc
jae
arpl
sbb
fmul
sbb
dec
add
sub
jl
mov
or
sub
mov
pop
in
cwde
mov
or
imul
test
in
mov
jmp
or
enter
cmp
mov
(bad)
dec
ds
int3
scas
add
fdivr
cmp
mov
or
fnop
jne
xor
jmp
dec
cmp
xchg
jae
shr
sub
nop
lock
jns
(bad)
jnp
mov
add
in
inc
cmp
fidiv
arpl
sub
sub
xchg
cmp
mov
xchg
sub
or
add
push
sub
test
pop
or
or
cmp
mov
jmp
xchg
push
sbb
or
in
jmp
dec
jle
pop
lods
fs
clc
cmp
inc
adc
xor
dec
xchg
pusha
sub
cmp
xchg
and
jbe
scas
fmulp
sbb
push
or
jl
inc
sti
adc
jbe
fdivr
pusha
movs
jl
cwde
jb
popa
inc
mov
push
xchg
stos
push
les
or
adc
push
add
adc
or
pushf
pusha
jb
jl
nop
push
or
les
pop
or
push
js
jae
pusha
or
pusha
imul
sbb
jo
test
push
bound
ficomp
sbb
cld
outs
nop
(bad)
cld
adc
pusha
inc
add
bound
pop
fs
lock
in
push
jnp
add
add
or
pop
std
add
or
or
enter
jb
or
nop
or
imul
cmp
pop
jl
push
or
imul
sbb
and
aas
cmp
adc
and
and
movs
xchg
in
sbb
xor
(bad)
xor
mov
adc
test
or
movs
test
xchg
jl
xchg
test
sub
and
retf
push
test
enter
push
xor
mov
and
fdiv
jnp
fadd
and
cld
push
rcl
inc
inc
ins
ins
jbe
movs
les
sbb
(bad)
mov
test
ds
xor
loopne
fs
les
adc
fstp
xchg
cmp
sub
cld
sbb
sbb
js
xchg
aaa
in
dec
jb
adc
cld
loopne
push
(bad)
jo
in
push
jo
shr
dec
adc
fs
sub
rcl
pop
jae
and
adc
inc
adc
fcom
adc
int3
arpl
mov
test
push
scas
aam
test
add
mov
adc
lea
aad
retf
dec
fisttp
jns
xchg
mov
jg
imul
test
sbb
adc
sahf
lock
push
test
jno
inc
call
or
loop
cmp
fld
push
xor
dec
add
ss
das
nop
mov
cmp
xor
inc
and
dec
mov
jmp
jo
jae
lea
fsubr
inc
sbb
fdivr
sub
mov
ror
sbb
dec
hlt
and
das
sbb
loopne
pop
ins
out
loop
sti
(bad)
cld
lods
std
int
int
int
std
jmp
jecxz
in
and
xchg
pop
jmp
imul
js
jo
cmp
or
and
jle
ret
dec
xor
jmp
push
cwde
xor
xor
test
lock
mov
lock
js
das
repnz
out
sbb
imul
fwait
add
pop
sbb
mov
cmp
je
les
push
or
jl
xor
(bad)
xor
sub
and
cmp
add
pop
mov
dec
jns
ror
xchg
mov
xchg
cmp
test
add
rcr
mov
dec
fcomp
cmp
mov
cwde
ins
scas
ss
scas
mov
mov
shr
int3
sbb
lock
inc
jmp
sub
movs
call
pop
cmps
cmp
popf
sbb
push
mov
sub
test
jae
push
xchg
adc
fld
and
movs
or
daa
inc
jle
inc
sub
pop
std
push
test
je
sub
shr
into
pop
shr
cmp
addr16
mov
push
fmul
push
and
and
jne
sub
jmp
sbb
push
gs
fdiv
sub
loopne
sub
sbb
mov
xchg
push
adc
rol
adc
xor
push
mov
mov
pop
mov
push
add
(bad)
sbb
cmp
loop
push
adc
aaa
movsx
dec
pop
add
popf
jae
rcr
xlat
pop
inc
inc
int3
int3
mov
ror
push
aas
in
xchg
adc
mov
icebp
sbb
lods
jle
jno
xor
mov
shl
push
sub
mov
gs
sti
inc
adc
jmp
mov
ja
pop
jne
ret
inc
pusha
sti
fs
ins
sti
ins
dec
inc
scas
aas
dec
xor
repnz
les
ror
daa
sbb
or
adc
sub
pusha
shr
iret
std
aaa
dec
bound
int3
fist
mov
cld
or
in
or
in
add
jne
jmp
loopne
inc
push
dec
adc
inc
pop
pop
jne
neg
dec
in
dec
push
pop
pusha
xor
fmul
xchg
sub
clc
push
or
int3
cli
sar
jae
mov
dec
and
sub
(bad)
sbb
dec
sub
inc
lods
mov
ret
fisub
aam
pop
in
dec
xor
push
into
int3
cmp
mov
xchg
in
mov
mov
movs
inc
cli
les
fidiv
jecxz
sbb
call
fistp
in
lock
mov
xchg
add
jmp
mov
cld
cwde
dec
(bad)
cmove
ficomp
pop
xchg
push
push
push
push
adc
addr16
adc
xor
add
or
lods
stos
pushf
pop
xor
cmc
push
sub
jmp
int3
mov
or
test
add
inc
fst
push
nop
and
fdiv
cmp
es
call
jge
retf
push
(bad)
std
ins
mov
fwait
sahf
adc
into
push
push
mov
xor
shl
daa
bound
mov
push
shl
mov
inc
inc
in
mov
mov
dec
or
cld
test
imul
push
pop
or
sub
and
sbb
dec
enter
cmc
aam
push
imul
jmp
push
(bad)
int3
cmp
mov
in
push
fistp
ins
pop
add
aam
stc
inc
mov
push
cmp
dec
ret
pop
in
mov
add
pop
xor
sbb
out
xchg
fsubr
or
pop
ins
pop
and
loopne
in
jbe
outs
push
adc
pop
add
data16
cmp
in
scas
sub
mov
jbe
cmps
sbb
scas
xchg
and
mov
inc
push
test
mov
dec
outs
out
or
mov
and
push
out
push
push
or
cmp
rcl
dec
ins
or
dec
or
mov
add
push
mov
ins
adc
add
push
xchg
jl
or
push
jecxz
loopne
scas
out
xor
inc
stos
ins
lods
lds
call
cmp
cld
jmp
stos
ins
adc
mov
sub
fdivp
push
sbb
cmp
mov
shl
xor
mov
pop
sahf
add
adc
xchg
data16
lahf
fld
je
fdiv
hlt
adc
popa
jmp
mov
leave
enter
out
dec
or
retf
cld
sti
fistp
xor
sub
sub
mov
out
dec
int3
mov
sub
sbb
sub
adc
push
inc
xor
test
xor
inc
sar
fstp
push
xor
or
or
popa
adc
cmp
(bad)
mov
mov
dec
int3
aaa
(bad)
test
and
sub
loop
inc
out
shr
sbb
add
int3
ins
add
mov
push
add
int
mov
push
clc
xor
push
jle
xchg
ss
cld
pop
add
add
and
or
sub
push
or
adc
mov
in
(bad)
data16
les
cdq
cmp
in
sbb
xor
inc
adc
push
in
call
mov
sub
xor
add
inc
xor
xor
ss
mov
aam
mov
jbe
xor
and
stos
and
dec
push
xor
adc
dec
push
sub
add
aaa
fsubr
jp
sti
pop
test
movs
dec
jmp
pop
fld
xchg
pop
call
xor
xchg
popa
add
mov
pop
push
mov
mov
hlt
adc
imul
jae
wrmsr
xchg
in
lock
and
pop
sbb
hlt
popf
sbb
dec
cmp
or
sbb
xchg
push
add
imul
std
and
xor
fsub
idiv
es
mov
retf
mov
pop
out
retf
push
push
sbb
mov
lods
jmp
fistp
sbb
dec
dec
loopne
push
and
push
aas
mov
mov
pop
push
ss
pop
pop
(bad)
or
(bad)
add
push
add
call
push
and
or
jo
shl
xchg
loopne
or
fisub
and
sbb
dec
sub
add
and
arpl
sbb
test
jno
test
adc
push
or
cmp
push
add
pop
xchg
icebp
push
loopne
sbb
call
sub
sub
out
jp
std
fidivr
ins
je
inc
fs
xor
sbb
into
clc
int3
fiadd
pop
inc
das
pop
arpl
scas
push
cmp
adc
push
ins
inc
clc
jmp
push
xor
loope
push
mov
ins
adc
pop
es
dec
(bad)
inc
push
es
sahf
das
call
adc
les
loop
xchg
dec
sub
xchg
loopne
ficomp
lods
xor
daa
arpl
cld
es
shr
sbb
shl
cdq
fsubr
daa
test
ret
out
or
lock
rcl
jmp
sti
out
out
pop
es
xchg
movs
sub
les
mov
cwde
mov
pushf
mov
loopne
xor
in
push
dec
push
pop
inc
or
shl
clc
mov
jl
addr16
mov
push
add
cmc
push
sub
fist
inc
jge
sbb
ja
push
push
pop
jp
loop
sub
sbb
mov
fistp
je
push
fwait
lods
mov
test
fwait
imul
mov
imul
loope
mov
arpl
loop
pop
push
pop
call
sbb
push
sub
outs
lods
repnz
hlt
lock
shl
adc
cmp
inc
in
adc
adc
movs
(bad)
pop
pop
fdivr
or
test
adc
jmp
jmp
and
js
dec
adc
jl
push
cmp
cmp
or
loope
loop
add
inc
inc
xor
inc
mov
pop
add
ss
imul
or
mov
ja
mov
movs
or
cmp
push
adc
mov
cmc
push
jo
inc
fbstp
(bad)
mov
lods
int3
xor
ret
and
pop
or
push
dec
pop
sub
daa
and
xchg
pushf
loopne
xchg
push
push
inc
sub
ds
mov
sbb
faddp
cmp
popf
dec
xlat
push
mov
jne
sbb
xchg
pushf
movs
out
sbb
test
mov
imul
in
xchg
fidivr
jl
nop
xor
xor
xor
ins
fcmove
pop
cwde
sub
pop
xchg
into
(bad)
(bad)
jl
aaa
adc
or
or
jle
cwde
add
fwait
mov
in
cmp
sub
cwde
ja
aaa
loope
repnz
and
push
adc
or
retf
cmp
ret
test
iret
cmp
test
(bad)
retf
inc
cli
ss
pop
(bad)
repz
and
xchg
adc
lock
in
popf
inc
sbb
jno
mov
jo
imul
dec
pop
mov
fsub
push
push
in
mov
ss
pop
sbb
je
xchg
(bad)
sub
pop
loopne
stos
dec
adc
adc
pop
pop
push
ins
test
out
mov
(bad)
adc
mov
icebp
and
xor
cmp
mov
loopne
aam
jle
pop
call
cld
cmc
add
inc
push
out
xchg
pop
int
retf
leave
sbb
and
int3
repnz
iret
jecxz
or
xor
mov
adc
xchg
add
out
xor
retf
xchg
popf
fwait
sbb
inc
jmp
mov
std
fbstp
aaa
adc
add
shl
out
out
cwde
push
das
in
xchg
jmp
or
out
mov
or
fmul
in
adc
xchg
dec
fimul
inc
and
stos
jmp
xchg
dec
in
fsubrp
cmp
and
sub
add
sub
(bad)
push
cmp
in
or
xor
retf
sbb
(bad)
push
pop
out
fs
inc
icebp
pushf
adc
sbb
inc
cmp
enter
fisttp
inc
imul
add
push
and
imul
cmp
or
fld
nop
sub
xchg
and
aaa
(bad)
xchg
pop
(bad)
pop
test
dec
push
ds
sbb
clc
push
enter
clc
sub
iret
hlt
pop
add
rcr
pop
enter
push
adc
add
adc
push
cdq
rcl
shl
add
out
repnz
pop
pop
ret
sbb
pusha
xchg
jmp
adc
nop
or
popa
icebp
sbb
sub
pop
xchg
push
pop
sbb
or
addr16
stos
ror
xchg
cmp
in
or
mov
cwde
imul
je
add
aam
int3
add
test
mov
pop
sub
mov
xchg
aam
test
add
movs
dec
cld
fmul
dec
mov
push
mov
sub
inc
push
rcr
dec
in
retf
pop
xchg
add
sub
add
jo
retf
(bad)
je
ins
int
or
lods
xchg
stc
and
mov
pop
cld
xlat
xchg
xor
test
data16
sub
lods
test
sbb
sbb
test
sub
dec
in
jmp
xchg
push
inc
sti
retf
cmp
and
dec
sub
in
retf
and
stc
aam
push
sub
mov
ret
jmp
mov
mov
imul
imul
out
out
inc
jmp
fdivr
icebp
sub
repnz
sub
std
sub
mov
jmp
and
cli
sub
mov
or
fwait
add
jo
xchg
sti
clc
popf
clc
int3
retf
stos
fdiv
fiadd
push
ret
outs
add
(bad)
push
xchg
jl
adc
dec
xchg
inc
es
inc
clc
addr16
loope
icebp
push
or
sbb
xchg
js
xchg
push
dec
scas
enter
jmp
xchg
or
push
dec
pop
mov
pop
xor
pop
add
adc
sub
clc
push
cdq
mov
xor
pop
sub
push
mov
hlt
add
sbb
inc
sbb
cmp
rcl
or
cmp
data16
push
push
int3
pop
addr16
inc
xchg
dec
sbb
push
push
jae
shl
sbb
add
xchg
mov
aad
mov
pop
pop
cmp
xor
cld
pop
popa
mov
jmp
sbb
in
inc
mov
call
or
clc
jno
bound
leave
push
cmp
jo
adc
mov
stos
xlat
xor
test
(bad)
mov
(bad)
sbb
push
clc
pop
jo
mov
ror
and
out
add
stos
push
(bad)
(bad)
nop
add
int3
cs
pop
inc
pop
icebp
ret
enter
mov
sbb
dec
pop
out
rcr
lock
ins
sbb
movs
push
dec
mov
loop
jge
cdq
cli
sbb
int3
rcr
das
pop
fmul
js
and
pusha
je
or
push
push
and
xor
(bad)
pop
adc
mov
dec
sbb
jge
stos
call
pop
sbb
sahf
aad
mov
add
or
xor
aaa
jge
adc
mov
mov
pop
push
mov
push
int3
aaa
test
lea
mov
inc
imul
sbb
por
je
icebp
js
addr16
aaa
mov
out
jae
das
icebp
xor
mov
adc
pop
pusha
dec
push
imul
cli
out
push
pop
xchg
inc
out
popf
loope
pop
in
lds
dec
jo
mov
je
xchg
xchg
pop
mov
push
jbe
mov
add
lods
cmps
lods
push
xor
jle
cmps
inc
pop
fiadd
or
add
push
sbb
in
daa
scas
clc
mov
fild
cmp
bound
retf
mov
sub
mov
inc
fst
adc
adc
and
call
sub
xor
inc
or
pop
pop
sub
jno
mov
mov
sbb
mov
bound
test
js
xor
out
std
fsubr
add
fcomp
pop
jb
sbb
lock
lea
dec
xchg
sbb
or
push
dec
cmp
icebp
fdiv
sub
aaa
test
xchg
push
int3
rcr
dec
inc
pop
js
mov
dec
inc
push
and
les
test
icebp
arpl
jb
hlt
retf
je
push
shr
sti
cmp
les
sub
pop
sar
xchg
sub
xchg
jp
inc
inc
call
rcr
push
pop
cld
dec
bound
sub
das
adc
pop
aaa
push
and
adc
cli
in
lods
xchg
inc
xchg
sbb
pop
push
addr16
add
jmp
adc
jb
aad
in
daa
jmp
dec
mov
out
sbb
into
loopne
dec
adc
add
sbb
pop
loop
cmp
lods
je
cwde
mov
retf
test
dec
(bad)
rol
add
inc
push
ins
pop
fild
(bad)
cmpps
cmp
lea
jp
dec
scas
call
sbb
jp
in
push
mov
repz
dec
jmp
call
mov
add
dec
rcl
xor
das
test
mov
inc
or
cld
int3
dec
xchg
int3
and
pop
jmp
or
mov
ds
lds
jne
fisub
dec
xor
cwde
scas
pop
jmp
inc
adc
enter
test
dec
(bad)
xchg
push
mov
xor
adc
mov
mov
xor
imul
sub
retf
pop
int3
inc
popa
or
fcomp
addr16
imul
and
pop
das
or
adc
inc
pop
inc
mov
ds
pop
mov
mov
(bad)
in
dec
inc
push
sub
clc
mov
fwait
ss
repnz
shl
and
xor
jo
sahf
jecxz
movs
fld
retf
call
lds
icebp
inc
call
popf
sub
hlt
push
cmc
(bad)
pushf
jl
push
loopne
push
(bad)
movs
mov
repz
(bad)
dec
sbb
mov
repnz
add
call
call
add
add
add
dec
out
cmp
mov
add
stos
cmp
sub
or
fimul
into
dec
push
in
push
out
call
aaa
not
adc
jbe
dec
mov
fwait
or
dec
loope
mov
cmp
dec
or
and
dec
push
cmp
shr
jne
xchg
in
out
mov
dec
call
clc
sub
int3
inc
retf
js
bound
xchg
push
pop
out
fisttp
and
dec
xor
(bad)
mov
mov
gs
arpl
sbb
adc
push
call
stos
test
dec
sti
and
add
or
test
fbstp
fstp
xor
pop
daa
rcl
mov
fdivr
sub
lods
pop
mov
jmp
int3
jnp
js
jmp
fcom
outs
out
xchg
stc
mov
imul
popf
in
sub
sub
cmp
add
ja
fnstcw
ins
add
xlat
sub
jg
mov
dec
jmp
xchg
cwde
sahf
jne
xchg
xor
loope
mov
lods
and
mov
jae
sub
xchg
dec
bound
loope
mov
retf
aas
cmp
lahf
cmp
push
xor
pop
jns
(bad)
inc
jmp
pusha
xchg
mov
lods
add
push
addr16
(bad)
inc
or
jmp
frstor
stc
pop
call
les
fdivr
mov
push
in
(bad)
ss
aas
jne
dec
mov
add
aas
sbb
cvtpi2ps
or
jb
add
shl
cwde
int3
inc
or
div
jp
jo
shl
dec
mov
lahf
test
aad
xor
mov
leave
(bad)
and
pop
mov
xor
xchg
push
xor
scas
pop
xor
(bad)
repz
jmp
xor
jle
xchg
pop
or
pop
loopne
mov
add
movs
and
pop
out
hlt
(bad)
int
mov
fild
test
sub
push
pop
and
js
mov
fs
jge
jo
xchg
xor
in
inc
repnz
sti
stc
sub
imul
xchg
cli
test
add
das
mov
xor
dec
and
pop
add
fwait
std
pop
clc
mov
pop
pusha
std
icebp
jne
fdiv
sbb
jle
inc
push
imul
gs
push
adc
ficomp
add
pushf
dec
movs
int3
sbb
rcr
add
imul
(bad)
enter
mov
pop
stos
jl
jge
nop
xor
push
lock
jnp
jg
ss
and
adc
cmps
xchg
in
add
test
mov
mov
aas
jecxz
ret
dec
scas
inc
in
push
sbb
fdivr
mov
(bad)
lock
pushf
cwde
sbb
test
js
retf
mov
int3
xor
in
retf
sub
popf
call
xor
add
rcr
loope
mov
dec
inc
xchg
lea
mov
jecxz
arpl
ret
stos
daa
popa
cmp
jmp
jne
aas
loopne
cdq
jecxz
mov
pop
mov
and
adc
sbb
lods
adc
xor
lahf
fidivr
in
jo
push
cmp
and
addr16
lods
adc
jbe
adc
retf
lods
dec
mov
jg
and
mov
sar
in
in
push
mov
add
xor
pop
pop
lea
push
mov
(bad)
xor
xchg
int3
and
inc
sub
in
repnz
mov
cld
icebp
mov
push
pushf
call
imul
jo
adc
sbb
xchg
xchg
js
jbe
jae
es
les
fdiv
sbb
loope
and
in
xchg
call
cmps
push
(bad)
cmp
inc
mov
(bad)
pop
repz
clc
mov
outs
mov
xchg
push
dec
inc
je
aaa
ret
jle
sbb
inc
pushf
jb
pop
lock
(bad)
mov
out
pop
sbb
in
adc
mov
dec
cmc
pop
sar
jg
inc
dec
mov
pop
pusha
ret
jg
push
inc
push
push
xchg
push
rcl
(bad)
push
or
movs
inc
loop
jb
in
mov
mov
repz
add
cld
add
pop
dec
push
sahf
xor
pop
push
bswap
mov
xchg
jae
push
in
xchg
push
adc
push
call
inc
or
aam
pop
or
push
xor
add
aaa
sub
add
in
fild
sub
stos
int3
jmp
ret
fcomp
retf
mov
push
add
hlt
scas
mov
stos
sub
addr16
repz
xchg
popa
cmp
push
enter
or
and
fs
mov
push
call
aaa
jne
inc
mov
std
sub
in
sub
popf
into
adc
jmp
stc
loope
xchg
xor
mov
push
jmp
add
push
xor
pop
xor
or
add
lods
sub
into
cmp
jne
mov
xor
imul
js
cmp
add
or
jecxz
ins
movs
jp
or
inc
jl
sbb
lods
jno
mov
jnp
adc
add
dec
addps
aas
xchg
in
outs
dec
xor
imul
xchg
lds
and
lds
mov
retf
out
dec
loop
xchg
inc
cmp
pop
sti
outs
leave
push
push
sbb
add
push
mov
xchg
ss
sub
mov
cmp
repz
mov
add
sahf
push
adc
push
and
adc
mov
icebp
xor
or
sub
inc
sub
push
add
pusha
fs
adc
(bad)
add
lfs
xchg
and
mov
sub
mov
fiadd
daa
fdiv
or
retf
jl
push
sbb
out
jmp
vmptrld
ret
add
dec
mov
outs
pop
cmp
inc
jge
fdiv
inc
xor
fwait
xchg
lea
scas
(bad)
shl
lahf
mov
add
or
js
imul
ja
mov
sub
jb
pop
(bad)
sub
dec
fsubr
add
mov
dec
jmp
shl
sub
test
mov
mov
or
test
mov
cmp
push
xchg
vpcomub
or
and
cmp
dec
cmp
icebp
add
push
scas
int
mov
int
into
push
pop
ds
mov
fwait
sub
das
into
sub
(bad)
in
inc
lods
fadd
mov
stos
mov
sub
cmp
inc
inc
int3
retf
inc
les
sbb
ret
int3
lods
jb
pop
popf
sub
aas
cli
das
(bad)
push
jne
aaa
pop
push
xor
push
xchg
cmps
ficom
jne
sub
(bad)
int3
stos
xor
pop
adc
addr16
imul
dec
in
adc
pop
push
pop
push
fisubr
mov
add
(bad)
mov
pusha
mov
call
mov
mov
int3
xor
shr
xor
push
enter
add
or
adc
or
ds
pop
hlt
inc
jmp
jecxz
retf
dec
jecxz
pop
in
lods
adc
jo
pop
sub
xchg
mov
push
iret
or
or
xor
data16
jno
sbb
mov
pop
mov
loop
jl
call
retf
xchg
jnp
cwde
repz
icebp
adc
dec
cmp
pop
xchg
cmp
add
retf
or
fdivr
mov
int3
mov
cs
aad
adc
jle
popf
ret
push
lea
push
sbb
dec
sub
push
in
cmp
bound
sbb
jmp
repnz
dec
sbb
dec
nop
in
and
push
outs
and
push
cdq
pop
lods
das
adc
xchg
push
icebp
sbb
or
xchg
outs
add
ds
pop
loopne
jae
jnp
in
call
or
xchg
(bad)
repnz
push
mov
std
jo
test
cmps
push
or
movs
xchg
nop
add
add
loope
add
mov
rcr
(bad)
cmc
cmp
retf
push
outs
iret
or
mov
in
dec
cmps
out
sbb
mov
mov
dec
(bad)
pop
xchg
ret
fsub
lea
packssdw
lock
and
jmp
adc
add
or
dec
push
inc
mov
inc
stc
fsubr
xor
pop
cmp
sar
fimul
fwait
push
in
inc
call
rol
shr
push
fs
mov
sar
sub
mov
mov
pop
jl
xor
add
hlt
xlat
js
cmp
xchg
inc
mov
jae
dec
dec
sbb
aaa
jne
mov
dec
icebp
sub
mov
sub
mov
outs
(bad)
jmp
out
cmpps
or
xchg
or
outs
lods
jne
mov
dec
mov
pop
(bad)
cmp
call
pop
pop
repz
lock
cmps
pop
iret
and
loope
out
pop
adc
pop
add
sbb
fwait
or
bound
cmp
xor
pop
mov
ret
(bad)
into
add
mov
pop
inc
leave
xor
add
sub
das
mov
xor
dec
js
mov
mov
xlat
fisttp
dec
or
retf
cwde
or
inc
ins
mov
xchg
mov
jge
push
call
dec
aas
cmp
and
push
mov
fs
fstp
sar
adc
sub
(bad)
jecxz
lods
sub
jnp
sar
fnsave
into
push
and
dec
fs
cmps
out
sub
(bad)
nop
jg
(bad)
pop
in
cmps
inc
ins
cmps
xor
jp
(bad)
aas
es
mov
push
pop
rol
mov
call
dec
in
ror
popf
jecxz
clc
jg
lds
outs
in
and
inc
jle
mov
and
retf
sbb
sbb
xor
aam
call
out
add
and
jo
aam
cmp
mov
test
push
push
push
sbb
adc
lock
into
xor
add
or
push
ret
jns
nop
mov
in
dec
cmp
shl
cs
ja
adc
sbb
cmp
rcr
sbb
pusha
xchg
fmul
cmc
mov
xchg
cmp
dec
mov
stos
(bad)
js
cmp
fdivr
(bad)
leave
repz
mov
not
push
pop
scas
adc
call
cmps
xlat
add
pop
or
and
imul
in
ja
pop
xchg
popa
adc
mov
pop
sbb
xor
repnz
hlt
leave
and
ds
sbb
mov
out
pop
sbb
adc
adc
(bad)
xchg
cld
xchg
xchg
jle
retf
adc
jmp
adc
adc
add
adc
pop
adc
bound
jno
add
xor
or
jnp
mov
cmp
pop
(bad)
retf
(bad)
(bad)
pop
add
add
jg
add
in
fcomp
cld
or
(bad)
pusha
loope
sbb
imul
push
add
shl
loop
jecxz
rcr
iret
call
xlat
ror
jmp
adc
or
jle
or
daa
ss
or
xchg
inc
fxam
or
rcl
fs
gs
xlat
xchg
inc
jmp
shl
push
jp
or
mov
cs
retf
retf
push
mov
add
jmp
(bad)
push
or
xchg
add
mov
inc
or
repnz
cmp
adc
push
sub
data16
popa
in
dec
add
bound
mov
stos
ins
loopne
mov
aam
clc
xlat
mov
sub
fxch
push
int
ror
jne
clc
add
iret
pop
aam
mov
lds
fidiv
stos
mov
cmps
push
jle
add
ret
scas
jbe
pusha
into
retf
jge
in
outs
push
xor
daa
xchg
jl
or
mov
test
cld
xor
cmp
mov
push
inc
jge
(bad)
in
mov
out
push
xor
push
mov
mov
sar
mov
sub
outs
mov
retf
and
hlt
pop
loop
test
and
lds
daa
dec
adc
daa
mov
add
cli
shr
out
or
leave
xchg
enter
pop
pop
mov
out
out
mov
les
push
dec
and
pushf
fcmovnbe
adc
sti
vmovntps
mov
jne
pop
(bad)
lds
mov
sbb
sub
cmp
test
int3
test
push
mov
sub
xchg
gs
pushf
fsubr
repz
adc
push
or
imul
in
fs
leave
pusha
imul
lods
or
fs
pop
dec
jl
stos
aas
mov
ret
stos
pusha
pushf
jl
jbe
adc
fucomp
or
mov
cwde
imul
push
or
xor
shl
mov
pop
mov
sbb
(bad)
sbb
or
jp
cmps
add
xchg
iret
pop
xchg
bnd
xchg
icebp
xor
sbb
(bad)
sub
movs
inc
jecxz
mov
or
sub
int
out
movs
repnz
push
ja
(bad)
push
aam
mov
fisub
into
pusha
in
fs
imul
pusha
ins
xchg
out
push
cmp
test
inc
inc
add
xchg
into
xor
dec
sar
push
add
mov
dec
sbb
movs
das
pop
xchg
or
mov
in
cmp
call
fimul
push
and
mov
xchg
jb
or
icebp
inc
loope
sahf
mov
leave
xor
inc
imul
int3
test
jb
fcom
out
push
or
or
std
xor
sub
cmp
dec
das
push
es
inc
aam
adc
cld
scas
fsub
jo
in
(bad)
jne
sar
push
test
lahf
arpl
pusha
pushf
rcl
lea
leave
int3
and
ret
mov
push
ss
js
cmp
pusha
packsswb
inc
retf
xor
cmp
sti
and
ss
cwde
sub
push
sar
cvtdq2ps
pop
push
mov
sbb
add
mov
and
int3
scas
into
mov
add
add
cdq
xchg
aam
add
jmp
jle
mov
lods
cwde
imul
data16
out
retf
jecxz
ss
mov
test
pop
test
pop
call
add
xor
push
and
push
add
sbb
sbb
retf
inc
fild
jo
imul
into
out
pop
pop
repnz
pop
jb
ret
push
fptan
or
scas
or
and
add
sbb
nop
dec
arpl
imul
xor
(bad)
mov
pop
movs
jne
stos
(bad)
lods
pusha
pop
push
push
jle
dec
pop
add
mov
js
dec
xor
dec
arpl
(bad)
js
xchg
cmp
push
pop
lds
(bad)
xchg
gs
push
cld
out
and
pop
push
push
in
mov
dec
jmp
enter
imul
cmp
pop
sub
dec
pop
in
cmp
and
jp
ins
dec
cmps
or
adc
lds
sub
push
ficom
xchg
addr16
bound
rcr
iret
aas
mov
es
xchg
lea
pop
xor
and
pop
jg
ins
add
(bad)
xlat
push
push
test
xchg
ins
add
lods
and
fwait
test
xor
clc
sub
pop
je
mov
sub
and
loopne
imul
sub
adc
js
imul
in
lods
imul
push
dec
mov
xchg
fnstcw
call
scas
(bad)
lods
jo
mov
xor
or
mov
(bad)
test
cld
movs
mov
cld
idiv
or
fsub
call
xor
and
fstp
xchg
mov
xor
or
or
in
or
xor
int3
les
inc
or
out
in
test
add
push
pop
test
push
mov
movs
out
aad
daa
xchg
mov
push
mov
push
add
xchg
mov
adc
cld
or
in
fcom
out
cwde
into
outs
push
push
sbb
push
xchg
shl
lock
and
pop
add
and
cmp
outs
rol
jae
not
and
bnd
pop
imul
add
arpl
bound
repz
cmp
mov
dec
mov
cmovs
pop
ror
adc
xchg
das
jecxz
js
sub
mov
in
add
popa
pop
aaa
pop
inc
push
dec
pushf
scas
inc
jmp
xor
or
dec
test
(bad)
int3
test
dec
js
in
inc
mov
pop
xchg
push
icebp
push
sbb
rol
daa
shl
neg
popf
pop
cmps
iret
(bad)
gs
mov
test
leave
imul
in
add
push
sbb
pushf
mov
mov
add
xchg
and
pop
and
or
sbb
popa
int3
mov
inc
imul
jno
loop
and
clc
das
and
iret
mov
cmp
pop
fwait
addr16
add
in
push
adc
adc
ficom
push
loop
xlat
fwait
sub
xor
add
stos
xchg
aad
call
loopne
cs
jnp
in
jmp
xchg
or
xchg
inc
cdq
add
test
sub
ss
sbb
fdivr
in
pop
or
push
xor
lods
push
dec
cmc
mov
mov
mov
mov
cmp
or
or
in
pop
call
sub
jl
xor
sub
out
sub
daa
mov
push
jmp
les
inc
loope
and
test
cli
fnstsw
mov
loop
add
add
pop
sahf
lods
inc
or
ja
in
lds
lods
inc
push
mov
int3
xor
inc
jge
sbb
xor
inc
add
or
js
imul
push
cmp
or
dec
push
test
pop
fidivr
iret
cmp
sbb
add
lock
int3
and
icebp
sub
rcr
jmp
test
mov
fiadd
xlat
in
sahf
sbb
jmp
les
addr16
(bad)
sub
hlt
pop
or
pop
addr16
xchg
mov
mov
int3
fsubrp
sahf
lahf
cld
icebp
adc
stc
fs
bnd
test
retf
inc
and
xor
add
ficomp
add
mov
jmp
cwde
add
jp
loop
lock
leave
std
fdivr
icebp
cs
push
jl
add
jge
or
xlat
push
cmp
mov
or
cmp
aaa
sbb
and
xchg
popa
sbb
jmp
out
xchg
inc
jmp
fiadd
pusha
dec
out
cli
into
cwde
lock
out
and
or
in
dec
pop
imul
jg
or
push
into
sar
jmp
mov
and
popa
(bad)
mov
adc
dec
aas
push
xchg
and
jge
push
sti
data16
rcr
add
pusha
cwde
fcmovnbe
xor
fisub
rcl
pop
je
pop
pusha
jl
nop
in
xchg
in
clc
cld
fdivr
and
in
cmc
xlat
dec
mov
and
lods
inc
in
pop
sub
repnz
push
xchg
dec
pop
pop
add
pop
xor
xor
imul
sahf
or
cmp
mov
adc
shl
xchg
sbb
(bad)
test
xlat
add
and
sbb
sub
dec
and
jae
les
cmp
int3
je
imul
shr
movs
dec
jp
sub
test
sti
test
loope
mov
stc
inc
inc
jecxz
cmp
pop
fsubr
pop
jne
adc
inc
mov
ficom
or
in
mov
out
daa
or
and
ret
mov
jo
rcr
sbb
shr
ins
or
ss
cmp
call
push
and
adc
xchg
push
icebp
add
xor
std
les
xor
add
fidiv
mov
adc
std
adc
jmp
daa
jl
mov
adc
ror
movs
loope
push
sar
es
lahf
mov
add
cli
pop
out
rol
pop
enter
addr16
or
inc
sub
js
adc
add
and
int
mov
xchg
push
ret
or
jo
add
pop
ss
add
cmp
dec
js
nop
push
fs
cld
daa
mov
xor
lock
call
int3
mov
xchg
sub
adc
sbb
xchg
xchg
cs
mov
or
cmp
cdq
rcl
popf
icebp
sbb
sti
pushf
mov
mov
jmp
xor
retf
pop
stos
sub
fwait
inc
mov
adc
cmp
dec
xor
xchg
cli
inc
xor
cmps
sti
xchg
jle
mov
clc
daa
sti
push
pop
ds
add
xor
push
call
addr16
lods
mov
sbb
fidivr
sbb
push
mov
adc
add
dec
or
add
shr
sbb
mov
imul
mov
or
fiadd
xlat
sub
and
jae
or
cwde
outs
xchg
inc
test
aaa
clc
sahf
inc
in
fwait
push
cdq
adc
(bad)
dec
hlt
js
std
loop
test
movs
xchg
sub
call
xor
nop
xor
mov
add
fadd
mov
jo
push
out
cdq
or
cmp
cld
clc
add
das
cwde
and
push
sbb
call
jg
push
or
outs
push
mov
je
or
fistp
inc
pusha
xor
dec
sub
adc
mov
push
stc
mov
icebp
push
in
xlat
es
nop
or
inc
sbb
js
mov
dec
retf
fcom
add
inc
add
jo
pop
mov
out
xor
mov
push
mov
jbe
xor
int3
cs
mov
sub
ins
and
add
jle
sbb
sbb
add
push
xchg
mov
in
cmp
mov
loope
xlat
in
sbb
scas
mov
adc
gs
out
ret
scas
pop
icebp
xor
sahf
sahf
jmp
aad
xchg
inc
dec
xchg
adc
scas
mov
jmp
into
dec
call
(bad)
leave
cmc
mov
data16
and
inc
or
aaa
scas
out
and
fnstenv
test
jne
inc
xor
adc
enter
es
jmp
dec
push
test
les
xchg
icebp
adc
pop
cmp
test
jmp
mov
dec
or
mov
mov
shl
loope
xchg
mov
sbb
jp
daa
adc
or
cdq
inc
sbb
ret
or
xor
retf
inc
adc
cs
pop
mov
sahf
mov
data16
or
or
(bad)
mov
and
int3
and
outs
and
ss
enter
mov
sub
sbb
push
(bad)
leave
iret
sbb
or
push
lea
dec
cmp
pop
cmp
add
ins
add
pop
sbb
inc
enter
inc
add
push
push
js
pusha
sub
nop
or
out
pop
pop
jp
cmp
inc
add
push
sbb
imul
and
adc
test
pop
push
(bad)
jne
mov
add
test
inc
fsubr
cmp
pop
xchg
adc
retf
xchg
cld
cld
fist
out
push
outs
pfacc
xchg
daa
cmp
sub
add
sbb
nop/reserved
popa
cmp
popf
xor
mov
cmp
movs
aam
rcr
les
and
pop
xor
mov
ja
and
mov
xor
xor
add
xchg
pop
icebp
dec
enter
call
push
int3
aad
xchg
stos
jnp
mov
add
sbb
sahf
and
jmp
icebp
pop
aad
xlat
xor
pop
out
jmp
repz
fisub
push
mov
aad
push
in
pop
fwait
or
mov
fsubr
arpl
sub
test
popa
sar
and
addr16
addr16
test
add
fwait
sti
mov
test
(bad)
clc
xchg
out
add
call
push
pushf
pop
add
sub
add
and
or
and
mov
out
mov
shl
shr
mov
retf
ins
lods
ficomp
push
sbb
dec
outs
push
sbb
into
xlat
xor
or
mov
rcr
fcomip
ins
sar
mov
ss
sub
or
and
pop
jge
loopne
shr
push
cs
sub
ins
jmp
cwde
push
mov
add
call
cmp
cld
icebp
push
cwde
mov
and
int3
aad
lds
adc
arpl
call
dec
push
adc
xchg
int
xchg
xchg
mov
pop
arpl
xchg
ds
std
push
call
adc
adc
lock
adc
and
mov
pop
lods
fsubr
int3
xor
add
cwde
xchg
movs
or
or
imul
jae
push
cmp
jo
loope
outs
jg
inc
lock
call
cmp
sub
out
out
add
mov
in
or
or
test
adc
jae
fst
mov
in
pop
ss
scas
imul
arpl
adc
inc
imul
retf
adc
aad
aad
jb
les
inc
(bad)
mov
icebp
pop
and
icebp
dec
lods
cmps
mov
adc
mov
popf
loop
fimul
add
retf
mov
xor
xchg
fwait
xchg
mov
dec
bound
jbe
cmp
sbb
jns
dec
(bad)
mov
jnp
test
scas
jg
xchg
cmps
or
fdivr
and
sub
jp
retf
mov
rcl
popf
xchg
rol
sub
add
mov
jb
xchg
pushf
ins
test
ins
movs
stc
cwde
nop
push
cmp
sub
mov
pop
nop
or
cwde
ror
test
cwde
or
(bad)
mov
sbb
push
dec
mov
and
inc
and
stos
mov
push
mov
or
sub
jno
fistp
cld
pop
(bad)
sub
stos
dec
arpl
sub
inc
(bad)
and
sub
pop
cld
xor
mov
mov
pushf
xchg
push
mov
leave
cwde
daa
cmps
cmp
das
(bad)
out
dec
push
loop
jae
xchg
(bad)
jae
pop
test
cmc
add
push
cmps
or
push
xor
inc
imul
adc
adc
mov
add
js
dec
test
addr16
adc
xchg
int
sub
sbb
test
ins
dec
pop
ret
xchg
mov
sub
test
stc
add
or
cwde
cmp
sub
pop
fwait
or
or
or
lock
sub
adc
or
mov
push
mov
cmps
dec
idiv
cmc
inc
adc
add
xchg
add
xlat
cmp
imul
mov
fisubr
mov
call
xor
cmp
xor
pop
cwde
sub
push
imul
imul
sub
push
xchg
retf
push
ins
fs
test
lods
rcr
mov
xor
repnz
jecxz
sbb
icebp
adc
pcmpgtd
bound
add
cmp
in
repz
adc
sub
mov
cmp
retf
mov
mov
in
imul
cdq
push
pop
popa
pop
icebp
adc
add
pop
loope
pop
mov
dec
jmp
and
enter
sub
xor
cmp
stos
push
sbb
lahf
in
or
dec
xchg
sbb
std
pop
dec
inc
sub
add
sbb
jecxz
js
sbb
pop
mov
(bad)
aam
in
hlt
jne
test
in
adc
mov
loop
cwde
aaa
pop
jecxz
sbb
add
xor
pop
xor
pop
mov
push
push
out
or
es
or
aad
and
ss
mov
jne
js
stos
aam
shr
enter
fadd
stos
cwde
xor
mov
mov
xor
mov
push
pop
sub
inc
leave
jg
in
clc
or
cld
fs
mov
popa
mov
ss
dec
and
inc
xor
push
icebp
pop
jb
out
pop
and
add
(bad)
pop
and
icebp
and
in
sbb
lahf
stos
int
stos
test
test
popf
jg
div
sub
hlt
(bad)
leave
es
or
mov
nop
dec
call
mov
cmp
int3
(bad)
or
rol
popf
mov
icebp
or
push
add
inc
sub
jo
hlt
cmps
stos
push
test
pop
ins
retf
mov
int3
adc
int3
adc
sbb
mov
repz
mov
and
add
mov
fiadd
shl
iret
jg
call
xchg
mov
pop
adc
int3
int
scas
inc
sub
ss
mov
pop
movs
cmc
mov
push
call
sahf
int3
mov
push
repnz
sbb
cmc
int
or
shl
add
pop
push
add
push
jp
loopne
out
jp
movs
ds
adc
icebp
scas
cmp
jne
or
call
in
cmp
cmp
sub
jecxz
mov
xchg
mov
fsub
retf
push
jne
(bad)
push
sub
inc
pop
cmps
or
cmp
lea
das
jp
mov
xor
cli
xchg
sbb
and
loopne
in
cmp
mov
cld
data16
sub
loopne
jns
ins
push
imul
cmp
int3
sub
hlt
add
sar
ficom
or
sti
inc
jg
sub
repz
mov
add
scas
cwde
jg
and
sub
or
and
lods
mov
push
test
jbe
pop
aaa
inc
fnstenv
xchg
pop
xor
cli
push
cmps
add
pop
inc
add
jne
mov
jbe
div
and
or
addr16
into
dec
cmp
cs
mov
pop
scas
inc
icebp
mov
inc
fst
jmp
or
inc
or
test
lds
sub
loopne
fild
jp
cmc
aaa
(bad)
push
pop
and
sub
xchg
cmp
xor
pop
div
cwde
jno
and
cwde
push
push
retf
add
adc
sbb
cmp
mov
or
mov
icebp
inc
xchg
cld
push
mov
pop
cwde
mov
jns
gs
ficomp
and
clc
xchg
icebp
cmp
or
and
mov
mov
enter
mov
or
mov
push
jmp
fcomip
stos
dec
dec
lds
cwde
shl
mov
aad
retf
jns
mov
mov
int3
in
lock
(bad)
jno
test
(bad)
xchg
dec
nop
cli
pop
je
loopne
push
in
adc
rcl
push
push
hlt
cmp
in
cmp
inc
cmc
and
jmp
ds
dec
outs
sub
xchg
scas
stc
fild
ja
sub
fucom
sbb
cmc
xchg
sbb
add
aaa
xor
nop
aaa
movs
xor
or
mov
cmps
or
mov
mov
mov
sbb
pushf
in
or
and
push
sub
and
jns
sub
sub
fwait
or
ror
les
cmc
sub
and
adc
loope
mov
int3
stos
out
pop
jecxz
mov
push
cmps
or
mov
dec
ins
rcr
push
add
or
lea
mov
retf
inc
popf
js
sub
arpl
sahf
ss
push
out
icebp
pusha
sub
dec
or
jbe
(bad)
pop
or
(bad)
sbb
std
dec
out
sub
xor
cmp
sbb
inc
inc
add
fist
dec
xor
pop
fwait
mov
mov
and
shr
addr16
push
or
ins
inc
or
jecxz
fwait
cs
xor
fimul
shr
adc
in
xor
outs
stos
mov
mov
shl
xor
loop
movs
stos
or
or
in
cli
mov
outs
fimul
(bad)
out
cmp
mov
lock
cmp
fild
xchg
repz
pop
xor
stos
in
mov
popf
arpl
out
arpl
cwde
imul
jle
cmps
in
popf
fistp
test
fisubr
cmp
pop
repnz
bndldx
adc
pop
sbb
(bad)
jg
push
xchg
xlat
push
ins
ja
ins
ins
enter
and
js
mov
dec
xor
shr
mov
inc
pop
push
sbb
in
jmp
pop
sub
push
mov
xchg
cwde
and
cs
mov
push
dec
sub
cmp
(bad)
push
jb
push
dec
stc
jb
jo
dec
daa
push
or
jmp
inc
mov
cmp
fucomi
sub
push
(bad)
imul
loope
movs
sub
adc
jae
mov
icebp
mov
xor
or
and
pusha
repz
addr16
aaa
xchg
jg
mov
adc
mov
call
sbb
pop
sahf
xchg
mov
pop
fadd
imul
scas
dec
push
add
stos
push
sub
fdivr
dec
retw
das
jmp
adc
and
int3
and
fwait
stc
and
scas
push
jp
jp
loopne
pop
lods
jl
les
(bad)
push
(bad)
pop
add
lods
mov
or
pop
add
xor
pop
mov
and
jbe
pop
sub
test
mov
dec
call
jecxz
sub
pop
sub
test
mov
js
inc
pushf
cwde
rcr
stc
add
mov
stos
aaa
movs
push
sub
mov
into
pop
inc
xor
mov
and
xchg
lahf
into
pushf
inc
call
scas
mov
or
dec
pop
call
pop
or
sbb
es
jnp
jae
add
jmp
cmp
and
rol
adc
ins
mov
dec
cmp
jle
in
pop
les
cld
xor
add
xor
jns
adc
cs
mov
or
jg
retf
mov
cmp
aad
data16
jnp
xchg
pop
je
and
jae
sbb
in
(bad)
idiv
xlat
inc
mov
je
test
jp
add
sbb
pop
cmp
jne
xchg
sub
movs
cmp
outs
dec
push
and
mov
sbb
push
std
ss
mov
xor
push
sbb
ret
jle
loopne
pop
shl
das
inc
xor
out
push
int
pushf
or
jecxz
xor
fcmovnu
lahf
mov
pushf
das
mov
shl
cmp
in
xchg
mov
cmps
sub
into
sub
ins
cld
iret
push
and
shl
push
sub
adc
retf
test
jne
popf
shr
fidivr
and
push
cmps
lods
popf
stos
jmp
int3
(bad)
mov
xchg
push
in
cmps
ja
test
xchg
pusha
xor
setne
add
adc
cmp
inc
push
adc
mov
pusha
cmp
outs
xchg
sub
sbb
xor
jp
xor
adc
sub
dec
leave
out
cwde
lahf
in
(bad)
jmp
cmp
(bad)
std
fstp
js
mov
jb
mov
push
mov
sbb
out
mov
rcl
out
dec
cmc
cmp
scas
push
sbb
dec
loop
out
pop
mov
sahf
pop
push
test
inc
fmul
sahf
out
lods
adc
add
sbb
ins
pop
inc
push
jne
mov
mov
stos
sub
mov
rol
mov
clc
ins
cmp
int
call
ins
call
cmp
push
dec
push
push
sbb
mov
jge
push
fidivr
pop
xchg
push
or
loope
xor
sbb
mov
inc
out
xor
sbb
lods
xchg
push
add
add
xor
sub
mov
das
mov
sub
cmp
dec
cmc
and
push
push
imul
popf
aas
fmulp
add
inc
out
sbb
xor
imul
jg
lods
and
push
fs
mov
(bad)
sub
enter
xlat
pop
movs
pop
idiv
push
xchg
in
stos
pop
scas
cmp
inc
js
scas
test
mov
sysenter
inc
mov
cmp
fsubrp
cmp
popa
jg
add
sub
adc
xchg
xchg
jl
ret
cdq
int3
aad
out
push
or
imul
add
mov
jae
mov
retf
fcomp
fdiv
hlt
mov
push
push
pop
js
addr16
or
push
div
add
push
jmp
sbb
mul
adc
add
repz
(bad)
out
in
into
mov
cwde
mov
pusha
xor
add
retf
retf
(bad)
push
jecxz
fwait
adc
pop
dec
adc
sub
arpl
inc
iret
fwait
xchg
dec
(bad)
push
cmp
inc
fs
dec
and
test
int3
jne
into
and
icebp
adc
test
dec
jmp
mov
icebp
xchg
cdq
imul
data16
cmc
jne
jmp
shl
mov
scas
sbb
xchg
(bad)
(bad)
mov
add
mov
(bad)
add
xchg
pop
dec
mov
repz
dec
add
pop
and
repnz
out
and
sub
push
int3
mov
js
or
push
in
retf
xchg
xor
jle
push
add
aaa
aas
lods
cmp
sub
pop
test
(bad)
cmp
jne
enter
fwait
sbb
sbb
dec
add
cmc
les
inc
gs
inc
sbb
js
add
pop
inc
sbb
add
imul
into
js
mov
mov
mov
in
test
mov
pop
stos
and
je
sub
arpl
jmp
inc
les
(bad)
out
inc
sub
mov
add
push
add
ret
loopne
mov
mul
xlat
add
cmp
mov
imul
mov
sbb
icebp
pop
and
mov
xor
retf
adc
loopne
add
mov
add
pop
pop
and
or
sub
ds
outs
(bad)
out
mov
push
add
call
sbb
out
push
jecxz
jle
push
mov
xor
imul
int3
push
movs
out
cmc
xchg
xchg
or
mov
int3
fwait
fwait
dec
sbb
inc
popa
pop
mov
or
inc
retf
mov
or
ret
loope
xchg
pop
inc
fcomip
mov
seta
cmp
xlat
xor
pop
xchg
xchg
and
cmp
lock
jle
push
pushf
mov
or
(bad)
pop
pusha
in
add
or
fld
in
sub
fwait
sbb
aaa
mov
mov
dec
sub
xor
adc
inc
push
xor
xchg
pop
arpl
cmp
push
push
out
popf
sbb
sub
(bad)
lock
inc
aaa
jnp
stos
jne
cdq
pop
xchg
gs
push
inc
jmp
test
popf
ret
shl
pusha
call
sub
es
xor
clc
out
or
sbb
ret
inc
jl
inc
xchg
mov
popf
das
rcr
cdq
sub
jmp
jne
dec
and
pushf
in
sbb
loopne
fs
sqrtps
and
add
push
add
sbb
xor
push
mov
sub
push
out
adc
add
lds
in
push
sbb
pop
inc
dec
mov
ret
cmp
sub
das
mov
pop
or
out
push
adc
int3
push
and
in
fild
xchg
mov
push
loop
dec
mov
mov
les
cmp
arpl
push
mov
imul
int
adc
pop
ins
pop
fwait
xchg
xchg
pop
les
pushf
lods
adc
inc
syscall
xchg
fadd
or
sub
nop
cld
pop
push
into
xor
or
fnstenv
xchg
sbb
fwait
add
inc
jmp
mov
sbb
rcr
push
push
sbb
pop
imul
and
fwait
bound
pop
xor
out
push
pop
mov
xchg
sbb
push
ficomp
mov
stos
dec
sar
sub
push
call
jo
push
xchg
in
adc
mov
pop
imul
sbb
add
mov
addr16
loopne
dec
xchg
dec
xchg
xchg
jge
mov
or
fdiv
cmp
mov
not
imul
push
push
aas
loope
sub
pusha
mov
xlat
cmp
std
inc
jmp
add
aam
or
and
pop
xchg
aaa
xor
inc
lahf
outs
mov
int3
ss
cld
add
mov
xor
adc
mov
inc
push
add
into
xchg
test
mov
lods
pop
xor
(bad)
rol
shl
clc
dec
gs
repnz
cdq
push
aas
xor
sbb
cmp
and
add
or
fadd
out
xor
cmp
mov
aaa
xor
ror
pushf
inc
(bad)
add
adc
outs
or
and
push
dec
add
fsub
sbb
and
push
jmp
shl
or
lods
test
or
mov
xchg
shr
addr16
movs
xor
(bad)
jae
mov
adc
sub
cld
mov
mov
shl
mov
fstp
sahf
sti
add
icebp
add
mov
ss
aaa
dec
pop
xor
jge
dec
ds
int
sub
lahf
lock
fdivr
test
jg
push
leave
movs
iret
lock
push
push
scas
xchg
jge
mov
das
mov
mov
or
stc
and
sub
sbb
sub
pusha
pop
xlat
push
push
push
sbb
or
and
adc
inc
push
inc
jp
add
pop
and
fst
cld
jmp
push
imul
pop
mov
dec
fninit
and
jmp
or
ja
dec
adc
loopne
jo
ds
push
inc
fcomp
addr16
cmp
or
dec
sahf
mov
aas
fild
test
pop
and
jnp
ss
inc
sub
xchg
mov
push
in
xchg
fild
jmp
in
ins
ds
xchg
inc
int
sub
not
add
cmp
push
imul
xchg
xchg
ins
jne
jb
retf
jge
adc
stos
loopne
and
and
xor
leave
lea
sti
adc
fdiv
leave
xchg
cdq
pop
hlt
jl
mov
in
xor
push
mov
(bad)
xor
pop
push
dec
xor
loope
ins
adc
adc
jo
or
dec
cmp
or
stc
and
loop
push
retf
jp
aam
loope
js
hlt
adc
xor
dec
(bad)
cmps
shl
stos
pop
add
(bad)
movs
cwde
lods
outs
cdq
(bad)
xchg
or
int3
test
aad
jno
lock
sub
jnp
xor
and
xor
rol
sbb
jp
push
sbb
(bad)
xlat
add
adc
xor
mov
and
int3
sub
test
inc
bound
sbb
hlt
xor
xor
pop
pop
enter
dec
fild
(bad)
jne
fild
call
in
lods
push
xchg
int3
fs
loopne
dec
mov
and
(bad)
mov
and
or
cmps
adc
sbb
addr16
add
and
call
sahf
in
jne
pop
(bad)
mov
mov
dec
in
outs
or
int3
arpl
dec
fcmovu
fwait
adc
pop
mov
mov
fadd
inc
dec
repnz
adc
cmp
rol
clc
cmp
push
cmp
and
(bad)
mov
jae
or
movaps
xor
iret
or
icebp
sbb
xchg
test
(bad)
mov
add
adc
popf
push
add
and
popa
adc
and
ins
int3
pop
lock
mov
call
mov
imul
rcr
xlat
sub
mov
xchg
out
rcl
push
sbb
fwait
cld
dec
sar
sbb
or
jo
mov
adc
mov
pop
jae
out
cmp
push
or
cmp
or
xchg
loop
jmp
add
xor
ja
js
adc
scas
fs
in
cmps
jp
test
fisub
cmp
cs
add
ficomp
test
std
sub
sub
xor
push
cli
jmp
shr
xchg
das
xchg
jmp
ins
movs
pushf
cld
and
xor
addr16
or
push
sbb
add
cmp
xor
aad
push
xor
aad
(bad)
cdq
push
and
jo
jb
dec
dec
sub
cmps
jp
lahf
test
xchg
in
clc
aam
imul
dec
sbb
mov
int3
sub
xchg
scas
mov
jl
pop
inc
adc
sbb
inc
inc
out
adc
pop
adc
in
xchg
pop
pop
xor
xor
and
add
inc
daa
dec
mov
dec
and
ja
mov
jmp
sar
pop
or
popf
cmp
pop
mov
dec
lahf
outs
mov
xchg
call
out
bound
popa
movs
or
mov
les
inc
adc
adc
fld
inc
cmp
and
dec
cmp
sbb
icebp
jmp
add
push
pop
scas
or
sub
push
arpl
sbb
or
(bad)
cmp
loopne
pop
lock
popf
out
in
jo
ins
in
mov
pavgb
int3
js
mov
or
enter
int
adc
loopne
mov
mov
pop
xchg
fxch
stos
sahf
push
inc
jmp
push
lahf
or
cmp
push
xchg
mov
mov
inc
mov
call
movs
push
fld
out
lea
fsubr
and
cmp
icebp
test
das
ins
and
lea
xchg
gs
cwde
push
scas
push
xchg
mov
jmp
mov
test
pusha
jmp
adc
push
ja
or
adc
ret
sar
add
cli
pop
dec
movs
push
test
jne
clc
inc
pop
sbb
xchg
mov
and
call
fmul
xchg
and
(bad)
test
sbb
push
dec
pusha
das
xchg
imul
lahf
xchg
push
in
sub
pop
stos
mov
lods
out
iret
(bad)
pop
pop
popa
mov
mov
dec
stos
js
xor
fsubr
add
aam
inc
dec
pop
mov
mov
movs
push
jne
out
mov
jnp
and
cmp
out
xor
jl
cld
cmp
adc
push
outs
repnz
cs
fisubr
push
dec
add
movs
cmp
in
add
pop
jge
fs
js
bound
add
push
jl
jns
mov
es
or
sub
jle
pop
sbb
dec
mov
xchg
(bad)
fcomp
push
sub
std
mov
jmp
ror
pop
add
in
push
push
or
sub
iret
inc
in
sbb
pop
icebp
xor
cwde
and
fmul
fist
ss
fistp
and
adc
mov
and
jmp
xchg
or
push
xor
xchg
inc
dec
enter
movs
out
ret
add
jnp
xlat
sbb
mov
and
or
cmp
sub
sbb
pop
pop
push
imul
cmp
jno
and
fwait
pop
mov
retf
repnz
rcl
adc
push
loop
adc
jecxz
ret
xchg
mov
jb
sub
sub
arpl
pop
mov
adc
pop
loope
stos
enter
dec
push
dec
push
and
fs
repnz
push
xor
push
push
mov
mov
or
and
mov
clc
sti
jmp
or
int3
and
or
mov
fdiv
mov
adc
jae
ds
outs
pop
test
dec
mov
push
aas
dec
xor
or
pop
push
or
push
gs
clc
push
pop
gs
clc
(bad)
cdq
pop
in
cmp
mov
xchg
dec
jbe
adc
mov
or
rcr
or
push
sbb
xchg
mov
repnz
and
xchg
xchg
and
mov
jp
pop
xor
repnz
sti
xchg
fisubr
call
pop
lods
push
add
add
rep
out
pop
xor
lods
mov
aad
mov
mov
ror
int3
shl
and
in
loop
xchg
sbb
lahf
sub
sbb
xor
cmp
aam
inc
addr16
(bad)
scas
pushf
inc
aad
pop
jne
mov
mov
add
push
push
stos
push
sbb
adc
pushf
retf
mov
fdivr
fucomp
pop
mov
inc
cld
pop
or
stc
adc
dec
sbb
fidivr
xchg
pop
lahf
shl
xchg
ja
outs
add
(bad)
ins
mov
aas
cld
xchg
push
mov
leave
dec
test
or
aad
inc
in
ins
xor
sar
pop
loop
shr
pop
and
inc
sbb
out
or
mov
sbb
or
test
repnz
jg
iret
imul
ja
jg
aaa
jecxz
(bad)
aaa
cmp
popa
out
dec
adc
push
add
xchg
pop
inc
pop
jmp
loop
xchg
push
add
jge
sbb
mov
add
inc
sar
mov
push
addr16
(bad)
push
lds
sbb
pop
inc
sbb
xor
mov
icebp
sub
and
repnz
inc
push
test
mov
mov
sti
mov
xor
bound
call
je
add
push
xor
jnp
ins
test
cdq
mov
call
in
push
(bad)
ja
lea
dec
mov
ins
cmp
dec
pop
inc
push
clc
lds
pop
mov
(bad)
shl
push
jp
cwde
sbb
jno
ds
pop
pop
out
sbb
movs
pop
inc
aas
inc
popf
das
loopne
jno
adc
ins
or
icebp
sbb
mov
xor
pop
in
mov
mov
in
adc
popa
add
adc
and
cld
std
fs
jno
aam
lods
cli
mov
aas
fsub
cmc
(bad)
jne
xchg
jo
mov
mov
or
mov
cli
scas
fadd
jl
pusha
hlt
popa
ret
inc
mov
ret
jnp
and
rol
mov
push
icebp
retf
xor
out
push
hlt
mov
daa
jle
je
dec
shl
rol
call
fcomp
(bad)
fst
mov
jo
ret
loopne
in
adc
imul
cdq
cmp
mov
jl
jecxz
pop
jg
lods
pop
or
loop
add
call
sbb
cld
inc
jns
sbb
clc
mov
add
lahf
pop
mov
mov
pop
or
jb
xchg
add
fst
bound
add
add
or
push
xchg
push
mov
test
jnp
pop
int3
rcr
in
les
pop
sbb
sbb
cmp
loopne
pop
sub
and
in
mov
pop
push
cmp
cmps
fisubr
push
lock
jle
and
pop
sbb
add
mov
inc
or
cmps
dec
imul
or
cs
or
mov
push
xor
fcmovb
fidivr
fcom
out
adc
xor
sar
cli
ficom
enter
call
fistp
addr16
(bad)
mov
xor
stos
repz
fwait
inc
or
loop
mov
or
mov
lods
cli
out
sti
cmp
add
popf
arpl
pop
and
dec
xchg
test
jb
lahf
jno
fstp
or
sbb
lock
push
jge
push
push
xchg
and
aad
jmp
push
mov
xchg
xchg
mov
or
cmp
add
loope
sbb
pop
adc
pop
jns
add
or
adc
cmp
dec
rol
or
aad
jmp
jns
les
das
les
push
scas
(bad)
mov
jp
add
push
das
add
mov
xchg
stos
add
lock
lock
pop
in
pop
in
pop
jno
cmp
mov
dec
xor
adc
(bad)
cmp
or
(bad)
add
inc
fild
fcomi
retf
push
pop
xor
pop
xor
pop
daa
jo
fadd
int
jge
fwait
popa
and
loope
xchg
icebp
or
js
nop
out
(bad)
or
or
in
dec
cmp
js
cmp
out
xchg
push
call
and
xor
retf
clc
xchg
jmp
xchg
int3
int
in
popa
mov
pop
mov
jmp
adc
jmp
int3
xlat
xchg
jb
pop
add
cmp
pop
and
aam
sub
call
lahf
ret
popa
add
pushf
mov
pushf
or
sar
aaa
and
or
add
xor
test
inc
pushf
push
dec
xor
pop
bound
inc
jbe
adc
int3
mov
inc
(bad)
pop
dec
adc
add
das
inc
lods
sbb
call
jnp
hlt
fadd
and
cwde
nop
xor
stos
sub
inc
adc
push
push
fidivr
lods
push
cmp
push
add
and
xchg
mov
add
loope
pop
sub
or
out
imul
cmp
dec
popf
cmc
and
movs
or
adc
rcl
push
aas
ret
add
aas
jb
arpl
fcmovne
ret
rcl
adc
int
cmp
lods
call
lock
scas
call
hlt
dec
pop
call
or
popa
xor
les
mov
mov
stos
jmp
shl
gs
loop
push
or
or
pop
arpl
or
cmp
mov
mov
call
loopne
popf
mov
inc
dec
int
push
out
pop
jl
mov
dec
hlt
add
jecxz
shr
pop
add
test
mov
jge
xchg
sub
sub
jmp
push
adc
sub
sub
or
addr16
das
pop
test
xor
mov
mov
pop
xor
in
add
and
adc
ds
icebp
jne
mov
cmc
repz
xor
and
and
inc
or
add
gs
cs
into
scas
inc
enter
ror
enter
mov
fcom
lds
cmp
jb
inc
aam
out
push
call
scas
adc
fst
lahf
cmp
push
and
dec
cmp
or
mov
sbb
jmp
ins
adc
fild
add
xchg
or
outs
cld
js
jg
xabort
fucomp
cmp
adc
(bad)
adc
retf
xchg
jmp
leave
cwde
clc
shl
pusha
in
inc
pop
outs
xor
aad
icebp
stos
add
xchg
jg
jbe
es
push
pop
enter
cmp
sbb
jl
test
movs
int3
loop
mov
adc
or
cmp
es
test
repnz
push
push
and
inc
icebp
jbe
dec
xchg
jmp
sub
pop
sti
sub
push
dec
int3
daa
dec
call
add
nop
imul
push
jns
or
sbb
pop
sbb
mov
loopne
add
int3
outs
test
or
xchg
xchg
or
or
not
mov
sbb
cmp
jb
mov
or
adc
lods
pop
sbb
pop
cmps
pop
aam
or
mov
pop
icebp
(bad)
mov
mov
jbe
sub
push
mov
pushf
jne
rcr
cdq
adc
mov
icebp
and
mov
dec
mov
xor
inc
add
adc
xchg
js
dec
push
dec
adc
push
cwde
push
mov
mov
and
int3
xor
dec
xor
or
sub
xchg
pop
adc
stos
cmc
mov
test
or
pop
mov
aaa
pop
in
push
sbb
and
xor
jne
mov
pushf
bound
bound
sub
pop
cmp
xor
(bad)
lds
loopne
mov
outs
inc
cmc
retf
add
es
les
inc
js
push
or
inc
xchg
and
adc
gs
push
inc
sbb
in
mov
sub
adc
adc
in
add
(bad)
data16
addr16
test
inc
lods
retf
cmp
push
dec
sbb
cwde
(bad)
pop
or
ja
jl
das
test
add
push
jp
scas
xor
pop
pop
dec
inc
push
push
pop
ss
shr
xchg
clc
jge
aas
ins
xor
push
arpl
jl
cwde
enter
sbb
cli
aam
cmp
fwait
xchg
fistp
ss
sub
je
mov
add
in
int3
out
xchg
jmp
out
jbe
push
add
ror
mov
cmc
xchg
das
cwde
scas
enter
sub
mov
mov
ja
les
je
stos
sbb
cmp
jns
push
sbb
loopne
std
fsubr
push
push
dec
xchg
add
push
lea
pop
push
popa
sbb
cmp
xchg
sbb
das
test
cli
inc
and
xchg
or
pop
pop
dec
sub
mov
push
sub
mov
or
push
jbe
outs
mov
in
cmp
and
adc
pop
retf
ins
mov
mov
pop
into
adc
rcl
cld
ins
add
cwde
pop
loopne
mov
fcom
test
sub
cmp
xor
add
les
inc
dec
push
dec
sub
add
pop
push
jl
adc
add
lock
out
in
cmp
push
inc
in
ficomp
push
out
cmp
js
xor
iret
movs
push
and
imul
jne
sahf
inc
push
and
add
bound
ins
add
add
add
push
or
pop
push
sahf
cmp
test
xchg
pop
sbb
cmps
sbb
sub
xchg
cmp
arpl
mov
jmp
sbb
or
scas
aam
fs
and
clc
imul
xchg
sub
jnp
(bad)
clc
popa
push
cmp
xchg
sub
jae
jp
jns
js
ja
jle
sub
dec
lods
jb
jno
jo
outs
add
sub
inc
lods
dec
clc
dec
push
cmp
dec
xchg
sub
pop
lods
inc
clc
inc
push
cmp
add
sub
push
lods
pop
clc
pop
push
cmp
pop
xchg
sub
sub
push
adc
clc
dec
push
cmp
and
sub
sub
cmp
cmp
cmps
pop
clc
xor
cmp
sub
pop
(bad)
ins
or
addr16
mov
pop
mov
data16
repz
in
inc
push
jo
rol
push
lods
dec
pop
or
push
dec
movs
mov
dec
or
dec
ja
or
lock
or
xchg
imul
rol
(bad)
or
mov
sbb
and
das
push
jmp
and
data16
xor
dec
mov
and
into
enter
xor
psllw
or
or
jp
cmps
mov
mov
xor
xor
xchg
ins
push
test
add
adc
stos
fcmovbe
jle
pushf
test
inc
dec
loopne
int3
or
cmc
test
adc
jo
and
sahf
test
mov
mov
or
loope
lds
jle
pop
or
ficomp
imul
push
mov
fsub
mov
push
or
arpl
dec
jmp
push
push
sub
jb
inc
arpl
xor
sbb
lahf
mov
loopne
adc
and
enter
aad
push
fbld
cmp
int
out
pop
xor
lods
nop
mov
(bad)
jg
out
cld
jl
jb
xchg
stos
mov
mov
nop
or
xchg
lds
sub
cdq
sbb
cmc
ins
cwde
fsubr
adc
pop
nop
cdq
addr16
stc
mov
imul
inc
mov
sbb
leave
adc
cmp
xchg
test
lods
cmp
and
jmp
js
dec
xchg
adc
jle
outs
cdq
or
inc
fwait
inc
cdq
lds
xchg
push
push
das
mov
sbb
dec
fsub
jecxz
pop
adc
js
sub
enter
sbb
pop
pop
mov
ret
aaa
and
sub
inc
mov
xchg
jecxz
fiadd
ins
push
pop
out
mov
sub
mov
or
movs
out
and
in
dec
repnz
ins
fdivr
mov
inc
xchg
fdiv
mov
and
outs
(bad)
mov
lock
lods
push
or
mov
ret
mov
sbb
and
test
ds
(bad)
cld
add
xor
loope
in
imul
jmp
inc
(bad)
in
daa
cld
mov
adc
jl
retf
iret
fimul
out
ja
or
xor
lods
cmp
mov
ret
or
stos
retf
retf
mov
test
in
movs
shl
adc
mov
jle
aam
sbb
push
dec
pop
gs
push
fwait
jno
stos
xchg
imul
rol
xor
jmp
sub
push
pusha
lahf
inc
test
cmp
adc
add
dec
jae
add
dec
sar
cmps
push
in
jmp
fs
ja
jae
jo
retf
scas
or
xor
stc
adc
loopne
jge
js
push
sahf
imul
adc
sbb
dec
jo
ja
dec
dec
adc
inc
fs
clc
jnp
jo
or
in
shr
push
jle
pop
xor
test
sub
movs
jns
lea
(bad)
icebp
(bad)
outs
push
icebp
test
jp
call
retf
pop
fs
adc
adc
sbb
ja
mov
add
cmp
ret
sahf
add
jae
dec
pop
add
je
iret
pop
pop
sbb
cmovae
in
dec
popa
pop
mov
adc
mov
and
push
jnp
add
adc
mov
das
aas
and
loop
dec
in
outs
or
iret
add
mov
xchg
in
pusha
gs
jns
and
pop
sbb
jmp
paddsb
bndstx
dec
lds
aaa
adc
xchg
xor
sbb
paddsw
push
adc
xor
inc
sub
sub
pop
jae
in
dec
add
lea
movs
mov
pop
push
adc
es
add
dec
add
sub
add
or
bound
test
adc
dec
jnp
fist
pop
int
dec
pop
and
pop
xchg
xor
jnp
retf
fst
or
adc
push
or
sub
rcr
fist
add
stos
or
je
mov
jmp
sub
ret
inc
or
scas
adc
pop
les
push
(bad)
cmp
test
cmp
dec
rcr
jl
pop
jle
jbe
cmp
cmc
enterw
test
mov
xor
adc
sbb
daa
pop
jns
push
dec
in
mov
rcl
retf
push
lock
imul
int3
inc
jmp
jbe
adc
js
pop
mov
imul
scas
xor
push
pop
push
sub
mov
push
rcl
loopne
or
xor
std
push
test
inc
call
dec
call
sbb
cdq
cld
inc
push
push
cwde
mov
test
pop
sbb
mov
push
or
pushf
ja
mov
xor
add
test
repz
cli
add
call
mov
shl
sbb
jmp
adc
in
dec
bswap
mov
loope
jb
ja
adc
push
ja
pop
sub
sbb
out
outs
mov
in
shr
add
inc
push
xor
cmc
mov
cmp
sub
xor
in
sbb
push
pop
fsubrp
push
in
cmp
adc
cmp
adc
cwde
mov
rcr
push
mov
in
or
sbb
fadd
sbb
cmp
fdivr
pop
sbb
mov
stc
jmp
les
pop
cmp
cwde
jl
pop
jo
jle
xor
jmp
lods
adc
in
dec
pop
jae
sub
inc
ror
fdiv
leave
loopne
dec
cmp
inc
sti
pop
cmp
or
adc
rcr
pop
in
mov
mov
jmp
hlt
fdiv
xor
enter
loopne
or
xor
dec
pop
adc
clc
push
xchg
push
imul
ror
and
inc
pop
ss
shl
sbb
dec
addr16
pop
in
xchg
push
(bad)
ffree
sub
out
or
mov
inc
pop
jae
fs
xlat
push
xchg
out
mov
mov
sub
js
add
gs
in
out
out
or
adc
cmp
imul
dec
imul
xor
call
jbe
add
mov
dec
pop
mov
test
pop
mov
dec
ins
sbb
dec
(bad)
xor
sub
retf
xchg
jmp
sbb
mov
sub
cmp
push
dec
sub
mov
bound
enter
ret
je
stos
mov
pop
in
(bad)
fcomp
not
inc
or
mov
out
sahf
jp
cmp
ret
lock
mov
mov
sub
sbb
cmp
sbb
push
add
cmp
sub
cmp
clc
xor
and
mov
bound
sbb
mov
fwait
cwde
cmp
das
ror
cmp
inc
imul
test
std
pop
xchg
pushf
pop
in
push
xchg
scas
dec
mov
dec
js
inc
inc
dec
sub
ret
pop
mov
(bad)
(bad)
loopne
inc
push
mov
or
mov
xchg
pop
sub
xor
sbb
mov
jmp
push
fcom
pop
pop
mov
sbb
loopne
ins
xor
jmp
and
mov
cmp
add
push
sbb
adc
int
test
jecxz
pusha
mov
dec
cwde
jns
movntps
dec
sub
jo
je
fs
test
int
out
out
and
jmp
inc
aam
jae
dec
movs
jns
jp
fdiv
retf
scas
add
sub
and
mov
fdivr
adc
sbb
in
xor
cwde
or
js
in
in
test
or
fsub
sbb
and
daa
cmp
xor
sbb
fadd
add
mov
movs
retf
pop
sub
jnp
out
lods
jmp
mov
enter
add
push
xor
pop
pop
cli
pop
push
add
nop
push
and
inc
xchg
inc
inc
xchg
or
clc
dec
xchg
les
cmp
fs
in
mov
mov
pop
jmp
pop
in
repz
cmp
dec
add
or
jo
push
aas
add
(bad)
les
dec
push
cmps
sbb
mov
adc
push
in
sbb
xchg
adc
or
jbe
nop
pop
icebp
push
xor
add
aam
sub
sub
and
add
fwait
nop
lods
aam
ficomp
dec
in
and
ss
int
lds
ins
cmps
jmp
inc
shl
cwde
push
int
fwait
and
jmp
or
pop
daa
aam
sbb
xchg
in
cvttps2pi
xor
and
and
cdq
fsub
inc
cmp
aam
or
add
lock
pop
inc
pusha
in
inc
add
addr16
mov
cmps
dec
mov
dec
mov
xor
lock
test
dec
outs
ret
imul
fisub
xor
shr
pop
sbb
sbb
addr16
cmc
scas
sar
inc
sbb
push
xor
dec
dec
aaa
dec
pusha
inc
cmp
push
inc
jg
push
inc
fstp
sub
add
and
or
mov
loopne
xor
sbb
(bad)
sub
movs
push
jge
std
add
mov
pop
adc
add
mov
jae
inc
cld
icebp
in
and
jns
xor
(bad)
jle
adc
dec
sub
pop
pop
adc
ret
xor
pop
pop
fild
addr16
push
push
push
inc
xor
call
neg
mov
movs
into
retf
or
(bad)
(bad)
mov
push
pop
in
jmp
inc
lahf
cwde
iret
sbb
imul
loopne
shl
mov
fxch
jmp
mov
(bad)
aam
dec
out
jle
cwde
jmp
cwde
mov
ss
aas
dec
inc
cmc
retf
cwde
clc
lods
sub
in
rol
mov
fsubr
aad
jmp
and
addr16
aad
outs
mov
std
and
pushf
add
(bad)
out
gs
cmp
or
cmp
cmp
lea
cmp
scas
cmp
les
or
xchg
xchg
pop
xchg
popa
add
sub
cmp
pushf
jmp
fild
fnsave
mov
in
add
fistp
test
add
jnp
mov
jp
add
retf
add
sub
cdq
ficomp
or
leave
pop
bound
pop
xor
int3
jae
(bad)
push
add
int3
inc
(bad)
mov
cmp
inc
in
pop
add
lods
mov
jmp
add
adc
dec
pop
out
dec
repz
jmp
in
out
xor
inc
and
pop
jnp
in
ins
add
ror
push
out
push
or
dec
in
add
push
sbb
nop
test
cmps
push
xchg
aad
test
xchg
fnsave
adc
push
or
xchg
aas
loopne
sub
in
into
mov
xchg
sbb
loop
dec
out
xchg
cmp
ss
les
and
jns
mov
or
dec
mov
xlat
jbe
or
push
xchg
jbe
add
inc
sbb
jg
test
jae
jnp
pop
stos
inc
repz
into
std
arpl
jae
add
mov
sub
dec
dec
jmp
jl
pop
pop
rcl
outs
ja
sub
imul
test
or
test
lds
sbb
jae
adc
addr16
retf
sub
je
sbb
or
ror
jnp
jne
and
pop
push
jae
push
cmp
test
rcr
push
xchg
mov
aad
test
pop
jne
stos
pop
push
and
fs
pop
inc
jno
dec
xor
mov
xchg
mov
jbe
movs
pushf
sbb
jbe
pop
pop
push
push
adc
adc
jo
push
jecxz
add
jl
push
push
setle
xor
push
sbb
js
cmp
inc
xor
sub
lea
mov
add
mov
(bad)
shl
cmp
dec
sbb
xor
gs
push
lock
add
repz
bound
jl
cmp
nop
or
add
xor
jle
pop
jno
outs
aam
or
push
adc
outs
add
sbb
test
pop
adc
inc
cli
push
jb
test
imul
mov
jecxz
pop
xlat
jno
repz
mov
push
lods
jg
imul
into
stos
gs
hlt
fs
adc
int3
xor
outs
adc
mov
movs
jne
jmp
je
shl
sbb
add
movs
cdq
dec
or
lds
inc
add
adc
push
dec
sub
sub
dec
not
dec
and
pop
in
push
inc
push
pop
dec
add
(bad)
aam
dec
pop
inc
dec
push
sub
pop
lea
test
sub
pop
jmp
inc
fnstcw
push
sub
lods
seto
cmp
and
sub
and
and
sahf
cmp
push
push
cmp
xor
in
adc
pusha
pop
inc
dec
push
adc
stos
xchg
js
test
cdq
sbb
push
mov
dec
pop
sbb
pop
push
xor
push
sbb
je
inc
out
inc
in
hlt
je
adc
lods
or
jmp
dec
dec
adc
dec
inc
inc
(bad)
push
pop
lods
inc
enter
jmp
mov
mov
and
jmp
mov
gs
push
loope
or
add
jge
jmp
inc
xchg
out
pop
sti
int3
adc
jb
dec
int3
daa
push
imul
mov
pusha
fadd
mov
push
adc
adc
adc
imul
out
push
jp
jne
and
sbb
push
push
add
push
pop
movs
pop
push
cmp
push
mov
add
or
and
addr16
add
sbb
push
jae
je
xchg
add
xlat
aam
cmp
pusha
push
xor
call
imul
jle
mov
or
push
add
ins
aaa
test
pop
inc
cmp
pop
pop
cwde
out
int
add
fst
js
repz
scas
pop
outs
cwde
inc
adc
add
mov
pop
leave
mov
int3
or
mov
imul
xor
ja
mov
sub
add
lahf
dec
pop
(bad)
sbb
fistp
inc
mov
imul
sbb
add
pop
stc
(bad)
push
xchg
or
sub
rcl
pop
(bad)
js
dec
dec
dec
inc
or
adc
fs
or
outs
cmp
(bad)
mov
rcl
push
adc
xchg
and
xor
outs
cwde
mov
cmp
add
sbb
inc
sbb
sahf
not
test
pop
jbe
shrd
add
fst
or
(bad)
and
or
push
pop
int3
cmp
pop
push
in
mov
sar
xor
test
mov
xor
(bad)
xor
rcl
sbb
adc
or
aaa
cwde
pop
adc
aam
pop
fmul
sbb
lods
push
jno
sbb
adc
ins
push
lods
out
ins
add
ja
or
repnz
outs
mov
cmp
sbb
(bad)
sbb
sahf
push
into
in
ret
cli
push
and
sub
xchg
dec
pop
retf
jle
adc
sahf
jmp
sbb
adc
cdq
ficomp
ss
add
add
adc
add
cmove
loop
cmps
jmp
add
fild
xchg
mov
jg
inc
imul
or
nop
xchg
or
sub
fcomi
mov
fwait
sbb
or
enter
adc
and
and
xchg
movs
or
xor
inc
sbb
adc
push
pop
shl
in
icebp
mov
fidiv
mov
jmp
in
jmp
in
icebp
adc
rcr
adc
movlps
es
(bad)
mov
loope
push
in
ja
mov
mov
movs
ds
in
pop
cmc
push
aaa
imul
pop
pop
aaa
ins
ins
mov
pop
jnp
add
mov
pop
retf
push
movs
sub
loopne
sub
pop
mov
fsub
dec
or
test
adc
add
loopne
pop
ins
outs
jae
xchg
cmp
sub
or
sub
dec
xchg
test
(bad)
inc
xor
dec
push
cmp
add
add
cs
aaa
xor
addr16
cmp
inc
and
and
or
dec
mov
icebp
sbb
cmp
jns
jno
dec
std
fmul
aam
ret
(bad)
std
in
dec
cmp
inc
fidiv
push
fnop
mov
sub
clc
push
and
cld
push
xchg
add
mov
xchg
add
retf
xchg
or
pop
scas
fcomp
stc
pop
push
fcomp
rol
lea
pop
inc
cmp
(bad)
stos
lods
xor
add
push
js
dec
daa
test
fdivr
pop
out
add
and
jl
pop
sub
push
idiv
push
fsubrp
addr16
pop
push
xchg
and
int3
adc
cmp
and
xor
call
or
mov
push
repz
sbb
cmp
out
nop
jge
test
inc
sbb
ins
push
add
(bad)
sub
aaa
cdq
adc
in
ds
pop
movs
pop
cs
scas
nop
dec
jmp
mov
push
cmp
push
push
fsubr
pop
inc
adc
xchg
sub
sub
pop
nop
pop
out
xchg
ds
in
test
jmp
(bad)
xchg
int
pusha
frstor
retf
stos
lock
pop
cli
test
stos
cmp
xchg
jnp
sub
mov
in
repnz
mov
call
sub
mov
xchg
iret
retf
mov
pop
stos
inc
push
rcl
jns
cmp
dec
les
pop
and
mov
out
sub
clc
mov
push
in
and
xor
out
clc
rol
retf
add
cmp
test
icebp
add
xor
in
and
cmp
pop
pop
and
and
push
sub
test
sbb
cmp
or
test
fwait
ror
push
mov
pop
pop
les
dec
jmp
sahf
sbb
xor
push
prefetch
or
mov
(bad)
call
(bad)
sbb
sahf
mov
das
lock
and
jmp
jns
shl
loopne
cmp
mov
int3
xchg
retf
pop
cmp
js
sbb
sbb
cmp
sub
sbb
cmp
repz
(bad)
push
scas
jbe
adc
adc
mov
add
in
add
xchg
mov
mov
and
pop
sbb
adc
and
xchg
mov
push
mov
inc
adc
sub
jecxz
dec
dec
push
cmp
dec
jg
les
push
jmp
fistp
jnp
push
xor
or
scas
enter
ja
stos
sbb
jecxz
inc
call
ja
mov
push
sbb
mov
xchg
call
inc
ror
sub
stc
fdivr
das
or
sub
adc
pop
in
lods
or
sbb
imul
pop
dec
and
mov
in
jmp
out
mov
adc
jge
or
cmc
das
jno
pop
mov
jge
mov
in
pushf
jg
or
int
mov
cmp
add
mov
loop
xor
sbb
xchg
cmps
out
push
xor
dec
push
loop
inc
jae
pop
adc
aam
mov
int3
out
cmp
xchg
aas
fcom
sub
push
in
adc
pop
fcom
cld
sub
jl
mov
jns
push
ror
cmp
test
scas
sub
pop
in
dec
inc
jb
call
jo
xlat
call
inc
dec
es
push
pop
adc
jo
add
adc
jno
arpl
test
xchg
cmps
cmp
les
sbb
shr
fld
adc
push
fmul
jmp
in
xlat
cdq
scas
aas
add
fisubr
cmp
in
nop
imul
pop
mov
pop
aaa
jl
test
icebp
pop
dec
add
js
dec
adc
popa
pop
mov
add
ja
push
xor
sbb
cmp
lds
xor
mov
inc
idiv
or
test
jmp
leave
hlt
mov
pop
push
jae
sbb
ins
inc
dec
mov
jle
jecxz
outs
dec
jmp
stos
pusha
and
add
ins
in
out
ja
cmps
ins
loopne
ret
test
call
jns
lea
dec
js
adc
inc
test
sahf
jae
(bad)
out
dec
cmp
das
jge
or
test
xchg
ins
dec
mov
mov
test
sbb
out
test
or
xchg
loop
mov
stos
loop
pop
xchg
or
mov
sub
xchg
lahf
test
out
pop
push
dec
xchg
push
jg
sti
pop
jnp
jp
cmp
sbb
push
mov
mov
icebp
dec
pop
jmp
and
push
mov
cmpxchg
mov
mov
add
dec
pop
xor
div
test
rcr
inc
jae
and
clc
les
lahf
jmp
mov
sub
out
sbb
imul
adc
repz
in
fwait
jmp
(bad)
mov
pop
adc
xlat
int3
fstp
(bad)
dec
aaa
imul
shl
mov
add
ins
or
fistp
js
ror
push
inc
mov
fimul
pop
cmp
popa
jne
xchg
xchg
adc
xchg
mov
jnp
fisub
and
fxch
add
(bad)
jnp
pop
cmp
or
in
or
push
imul
mov
mov
cli
dec
test
pop
adc
or
mov
mov
sbb
adc
je
test
leave
xor
mov
into
push
xlat
imul
in
cld
mov
stos
or
je
neg
sahf
xor
adc
push
jecxz
mov
jecxz
sbb
rcl
xchg
fadd
dec
dec
mov
dec
sub
push
pop
fsubr
sbb
pop
in
sbb
ret
and
push
movs
sahf
out
xlat
cld
push
retf
jl
jne
xor
arpl
iret
add
xor
loopne
xor
xchg
pop
ds
or
pushf
out
sar
fwait
ds
xchg
jns
out
popf
add
push
ficom
cmc
mov
fld
int3
xchg
or
fmulp
in
std
leave
pop
cmp
enter
adc
adc
push
mov
pop
gs
or
xor
add
pusha
mov
xor
fimul
push
mov
adc
sahf
pop
mov
rcl
ins
push
inc
jg
mov
inc
mov
mov
xchg
adc
fwait
out
das
or
fld
or
out
sbb
xor
ja
adc
popf
lea
mov
gs
add
cmps
push
and
or
stc
xor
pop
mov
mov
stos
out
repz
jl
ins
jb
mov
fild
xor
fcomp
adc
sti
out
or
cmp
fbld
sbb
inc
aas
mov
sahf
add
mov
stos
fsubr
stc
adc
fwait
dec
idiv
das
add
and
push
daa
call
sar
xor
sub
mov
lock
and
cli
loopne
adc
jae
ficomp
sbb
pop
mov
mov
rcr
or
cmps
mov
cmp
into
dec
sti
lahf
add
and
dec
mov
mov
fisub
add
inc
test
and
js
movs
mov
mov
cdq
das
hlt
pop
jecxz
adc
js
inc
mov
pop
pop
cmp
pop
mov
inc
pop
(bad)
out
push
mov
cmp
out
cmps
mov
inc
push
adc
enter
pop
call
pop
xchg
int3
test
movs
mov
dec
mov
push
adc
lds
add
jg
sbb
mov
push
inc
dec
pop
pop
retf
add
inc
test
cmp
ins
in
cmp
ret
cmp
mov
nop
daa
retf
xor
mov
xchg
das
mov
add
and
cmp
adc
stos
sub
push
sahf
and
add
sub
or
inc
xchg
mov
mov
sub
xor
xor
dec
dec
add
xchg
push
xchg
pop
scas
js
ror
or
add
mov
pop
les
mov
repnz
(bad)
sbb
or
fxch
xchg
ret
(bad)
std
ret
cmp
pop
add
(bad)
pop
and
in
mov
jnp
fldenv
mov
inc
inc
mov
add
sub
xor
jg
addr16
mov
jp
cmp
xchg
inc
fs
aas
sub
inc
jp
xchg
dec
cmc
and
fwait
add
out
or
mov
test
int3
xor
jmp
xor
imul
jnp
push
pop
int3
mov
(bad)
fst
pop
dec
ret
daa
mov
and
cmc
dec
into
sub
aad
inc
mov
fist
mov
outs
or
dec
dec
dec
test
xor
inc
fistp
adc
add
xor
scas
cmp
arpl
add
jb
pop
sub
add
icebp
pop
or
js
pop
js
adc
mov
sbb
test
call
xchg
cmp
pop
cs
or
dec
cmps
sbb
add
fiadd
ins
aas
cmps
ss
cmp
cmp
pop
cmp
dec
dec
test
mov
dec
pop
addr16
or
adc
imul
jecxz
out
mov
pop
call
add
pop
xor
loopne
sub
idiv
fsubr
mov
popf
fwait
adc
push
push
push
pop
sbb
ins
pop
clc
add
jmp
in
ficom
push
jne
ror
pop
imul
and
call
adc
mov
(bad)
mov
push
outs
push
ins
xchg
inc
mov
xor
addr16
xchg
push
cmp
adc
sbb
jle
inc
dec
add
dec
test
push
sub
mov
and
push
test
in
std
or
jne
cmps
shl
sub
push
hlt
sbb
aam
xchg
add
in
imul
jmp
or
stc
xor
imul
daa
retf
repnz
call
xchg
xchg
in
adc
or
imul
xchg
mov
mov
mov
mov
mov
jle
pop
pop
cmp
inc
push
jmp
inc
dec
add
nop
xchg
dec
pop
es
in
cwde
fcom
dec
sbb
jbe
sbb
addr16
push
sti
jmp
cli
mov
add
cwde
mov
push
add
cdq
icebp
(bad)
dec
push
cmp
lods
jo
iret
and
or
cmp
push
mov
pop
shl
sbb
xchg
push
sub
pop
stos
nop
push
inc
xor
mov
push
out
(bad)
cs
pop
push
movs
repz
mov
push
push
or
jb
push
imul
retf
push
outs
das
repnz
adc
cdq
cdq
in
or
(bad)
cwde
loope
sti
or
int3
dec
adc
sbb
sbb
push
xor
adc
pop
cld
xor
pop
in
jmp
mov
aad
cwde
cmc
js
cmp
loope
cdq
out
xor
int3
call
dec
cmp
and
loopne
sub
fstp
push
nop
(bad)
jle
sbb
pop
jne
js
push
pop
xchg
ficomp
sbb
scas
jp
inc
cdq
pusha
in
out
pop
xor
and
fmul
mul
ret
imul
sbb
(bad)
fld
outs
and
xchg
sar
cli
inc
adc
inc
imul
dec
jb
(bad)
in
rol
or
xor
cmp
and
mov
cmp
or
push
add
popa
xor
shr
ret
dec
inc
in
mov
mov
stos
push
je
ss
jb
jmp
or
mov
sbb
mov
or
or
xor
sbb
pop
sub
cdq
aam
std
(bad)
out
ficomp
fstp
test
shl
dec
dec
repnz
test
out
mov
call
sbb
cmc
or
push
cmova
push
mov
adc
mov
xchg
or
mov
test
test
xor
push
xor
or
sub
div
lea
js
ins
mov
(bad)
mov
stos
inc
ins
lahf
out
pop
xlat
add
adc
cld
xchg
pop
add
test
inc
add
or
in
mov
dec
or
mov
pop
jo
mov
xor
call
sbb
or
inc
adc
(bad)
in
dec
mov
sub
push
fcomp
jne
sbb
fwait
sub
cmc
or
push
fimul
and
data16
jecxz
push
fmul
add
xchg
jmp
cmps
jecxz
aas
cld
icebp
and
pop
stos
test
fbstp
xchg
imul
shl
sbb
scas
or
xchg
or
sub
pop
add
dec
mov
imul
mov
sbb
sbb
add
int3
mov
xor
inc
adc
mov
imul
ss
mov
adc
pop
inc
fdivr
xor
call
ds
mov
push
push
popa
ins
ficomp
add
xchg
xchg
in
outs
xor
xchg
icebp
adc
das
adc
pushf
pop
cwde
add
inc
cwde
mov
xor
sbb
inc
imul
out
test
push
pop
cmps
adc
sbb
(bad)
mov
pop
pop
push
xchg
push
cmp
xchg
xor
adc
pusha
ds
push
push
(bad)
ins
shl
cmps
jne
cld
push
push
imul
inc
pop
inc
idiv
daa
pop
test
push
mov
dec
sbb
mov
or
push
enter
add
inc
stos
cmp
mov
add
les
jle
adc
add
inc
aas
enterw
test
or
fs
sbb
mov
inc
js
mov
rcr
jle
jl
xor
ret
pushf
push
not
cmp
adc
inc
jge
push
repnz
or
or
les
les
pop
dec
mov
xchg
dec
lahf
jno
jne
fisttp
in
jmp
jo
pop
cwde
push
pop
add
mov
sbb
jbe
aas
test
out
outs
(bad)
cmp
lods
or
jmp
mov
pop
iret
out
aaa
cmps
jmp
or
in
adc
int3
add
test
ins
repnz
mov
lock
int3
mov
add
adc
mov
or
push
jle
adc
push
out
call
mov
mov
mov
sbb
jb
stos
aaa
xor
in
lds
push
mov
push
pusha
sbb
daa
les
jg
in
or
vpcomw
adc
fldcw
int3
mov
sbb
and
in
sbb
mov
push
(bad)
xchg
das
in
rol
adc
jle
pop
(bad)
mul
cmp
imul
sahf
mov
std
addr16
add
cwde
stos
sub
jno
stos
xor
in
imul
dec
xor
push
dec
push
xor
sub
jmp
in
daa
sbb
push
or
ret
(bad)
xchg
inc
fsub
cmp
in
fmul
movs
stos
lods
cmp
(bad)
mov
imul
or
push
icebp
cmps
out
add
test
fstp
jmp
imul
xchg
fisub
push
inc
adc
popf
call
cmps
loopne
mov
add
and
jecxz
pushf
cld
inc
out
loope
mov
mov
or
out
xor
mov
push
dec
popa
outs
sub
add
jp
fild
dec
dec
sbb
mov
stc
movs
inc
fwait
repz
outs
and
xchg
dec
jmp
icebp
xor
xchg
inc
cmp
stos
std
int
or
xor
fdivr
xchg
or
imul
inc
inc
ins
inc
mov
pop
ins
dec
popf
pop
enter
into
loopne
push
adc
or
ins
mov
xor
mov
push
fistp
cmp
imul
jb
xor
lods
int3
aas
cmp
mov
xor
int3
jmp
pop
and
iret
ret
scas
push
jg
cmp
push
mov
fcom
mov
retf
mov
mov
xor
in
sbb
push
inc
jnp
jo
ds
cwde
lods
int3
sub
xchg
mov
and
cmp
test
out
add
sub
ret
into
xor
(bad)
ficomp
sub
add
mov
stos
ins
shr
mov
nop
dec
jns
xchg
mov
mov
add
cmp
adc
xor
int3
pushf
inc
mov
mov
loop
loope
lock
psubb
movs
xor
test
xor
ins
call
setno
dec
cld
clc
repnz
rcl
xchg
clc
jecxz
or
sar
fadd
mov
lds
or
mov
adc
add
mov
jnp
jecxz
pop
add
jmp
repz
push
add
iret
call
inc
or
adc
mov
add
fmul
jmp
leave
fnsave
sbb
or
sbb
das
fisttp
add
test
pop
and
jns
pop
les
xchg
mov
xor
xor
mov
ja
scas
inc
shl
jns
mov
xlat
retf
loopne
sbb
ins
lds
and
push
and
test
adc
sbb
mov
mov
bswap
into
ret
xor
addr16
cmp
jnp
pop
add
cld
mov
inc
xor
adc
sbb
cmp
sub
nop
cmc
or
dec
inc
outs
fsub
and
or
mov
repnz
push
lods
aas
jo
adc
call
mov
fst
les
add
add
xchg
dec
mov
mov
jg
jbe
enter
sub
pop
mov
loopne
ror
dec
pop
xchg
in
loopne
and
push
add
fistp
dec
add
stc
(bad)
aas
or
adc
add
ss
dec
enter
or
(bad)
mov
inc
fst
xchg
(bad)
pop
test
xchg
js
xor
pop
cmp
push
ins
and
fbstp
mov
fmul
icebp
jne
cmp
sbb
and
add
or
pop
pop
sbb
scas
push
adc
push
pushf
xchg
stos
or
inc
neg
sub
in
xor
mov
sub
inc
int
repz
xor
cdq
popf
imul
xchg
sub
aaa
adc
inc
pop
test
mov
xchg
into
mov
lods
repz
add
push
adc
jb
lahf
adc
and
or
ret
cmps
ins
mov
jae
icebp
adc
jmp
call
cli
sahf
xor
retf
xchg
inc
push
ins
imul
add
cwde
icebp
cmp
les
inc
and
pop
out
outs
add
sbb
pop
rcl
sti
fdiv
outs
jle
adc
cwde
dec
jns
xor
outs
fld
dec
push
ds
jle
gs
lods
int3
mov
sbb
sbb
sbb
xlat
loope
mov
xchg
mov
les
aas
imul
in
in
dec
add
cmp
jg
and
shl
(bad)
jge
xchg
lahf
inc
adc
icebp
jbe
cmp
add
inc
add
mov
jno
pushf
jmp
out
mov
pop
xor
sub
adc
clc
mov
stos
push
and
mov
adc
sub
sbb
push
imul
dec
iret
(bad)
dec
fistp
dec
shr
idiv
push
(bad)
push
scas
xchg
imul
and
pop
xchg
or
test
add
lahf
out
push
push
push
stos
xor
push
or
(bad)
cmp
fwait
add
jae
rcl
mov
adc
int3
ret
mov
pop
jo
fs
jp
jae
js
inc
xor
pop
sbb
cmps
add
or
pop
sbb
push
sysenter
or
sbb
add
push
cmp
fmul
cwde
pop
sbb
sub
add
aad
sbb
pop
out
fs
fild
test
lods
xchg
xchg
loopne
inc
and
mov
(bad)
icebp
aas
adc
ret
int3
sbb
lahf
not
mov
add
push
jnp
or
pop
and
addr16
add
retf
(bad)
repnz
pusha
mov
(bad)
(bad)
or
dec
or
add
add
enter
lahf
ret
mov
pop
sub
pusha
cmp
push
arpl
mov
fst
fadd
or
rcl
mov
call
lods
cmp
xor
inc
cli
add
jge
movs
pop
inc
or
jne
xchg
pop
add
mov
mov
xchg
fdiv
add
bound
mov
dec
aaa
xor
sar
add
adc
call
xchg
mov
or
or
mov
jle
cmp
xor
xor
add
sbb
jne
(bad)
jne
or
inc
mov
xor
sub
and
and
jmp
ret
cmc
shl
add
or
dec
xchg
mov
inc
add
sbb
cmp
sbb
inc
xor
int
ds
add
mov
rol
loope
mov
cmp
sbb
cmc
mov
inc
mov
into
xchg
jb
mov
or
fld
pop
jb
outs
pusha
shl
mov
cld
ror
dec
pop
rcr
pop
xor
int
imul
sbb
cld
push
icebp
aaa
shl
adc
std
jle
xor
push
stos
inc
xchg
jb
or
(bad)
(bad)
pop
dec
add
and
jle
add
xor
es
mov
shl
data16
dec
popf
repnz
jle
or
xlat
and
or
call
js
jmp
fisttp
or
add
das
pop
cmp
cmp
mov
ds
lahf
push
inc
jecxz
cwde
push
int3
sbb
cmps
arpl
movs
lahf
leave
sti
call
push
sar
push
dec
je
mov
fadd
cmp
cwde
and
pop
retf
xor
seta
pusha
out
and
jle
xor
add
pop
push
call
mov
pop
or
mov
aam
fild
dec
inc
sub
jb
loop
shl
adc
mov
jno
(bad)
stos
call
outs
jl
mov
xchg
aaa
pop
mov
mov
in
lahf
movs
fnsave
jp
int
ror
sbb
(bad)
nop
ficomp
adc
or
cmp
mov
stos
outs
add
push
mov
out
aaa
pop
jmp
stos
lock
ss
dec
shl
jg
bound
nop
and
das
fdiv
aaa
sbb
xchg
sub
push
jmp
pop
jne
pop
dec
push
sub
call
stos
pop
sbb
and
mov
and
out
mov
bound
out
pushf
mov
cli
dec
outs
lahf
and
pop
xor
in
xor
jbe
sub
mul
arpl
cmps
dec
in
jp
push
cmp
or
addr16
add
aas
movs
lgdtd
push
mov
push
push
js
lahf
pop
neg
mov
or
sahf
ds
inc
or
dec
push
pop
xor
ins
pop
mov
or
addr16
cs
imul
adc
call
sbb
and
inc
adc
inc
mov
cmp
add
sub
(bad)
sbb
addr16
push
pop
bound
push
fcom
xor
stc
dec
push
dec
sbb
jb
imul
and
mul
in
lods
xor
cwde
movs
push
fsub
(bad)
mov
outs
mov
(bad)
mov
push
or
dec
or
push
sahf
push
jo
mov
cmp
adc
ja
or
mov
aad
jl
stos
test
test
inc
loop
mov
or
cmps
dec
xchg
push
xor
sub
js
cwde
xchg
cmp
jno
jmp
loopne
add
or
cmp
icebp
or
xchg
jmp
push
or
cmp
dec
out
pop
fcomp
xchg
xchg
das
dec
dec
lock
adc
and
xchg
ins
lahf
int3
cmp
inc
push
xchg
int
sub
(bad)
mov
daa
mov
mov
xlat
imul
xlat
inc
dec
arpl
int3
loope
ins
out
xor
in
mov
add
aam
inc
shl
push
nop
xor
stos
add
cmp
jmp
adc
cmp
outs
in
out
push
stos
arpl
cmovo
icebp
add
js
mov
and
imul
aaa
sub
sub
xchg
add
sbb
or
inc
mov
or
pop
mov
inc
sbb
push
push
xchg
adc
or
lea
and
mov
retf
sbb
rol
xlat
mov
inc
pushf
mov
addr16
adc
pop
aam
in
push
dec
pop
push
pusha
mov
loop
mov
or
aas
add
push
movs
cli
or
popf
jl
xchg
dec
inc
lods
xchg
loope
das
outs
fisubr
push
lods
in
cmp
xor
sbb
icebp
push
mov
inc
xchg
pop
mov
jmp
xor
pop
cmp
ins
inc
lods
xlat
test
jae
sahf
fxch
add
jbe
test
loopne
dec
adc
xor
xchg
out
(bad)
jg
xchg
mov
fadd
(bad)
adc
and
and
jnp
dec
jmp
outs
cld
push
mov
repnz
ins
and
pop
(bad)
mov
retf
push
lock
mov
loopne
xchg
fs
xor
inc
sub
(bad)
aad
int3
in
inc
clc
xor
mov
adc
add
pop
jmp
jle
data16
(bad)
in
pusha
hlt
fmul
cmp
xchg
pop
ret
(bad)
pop
mov
cld
shr
pop
mov
mov
pop
loope
js
pop
ror
mov
jle
xchg
xchg
adc
or
lods
ins
(bad)
fmul
jp
daa
jmp
sti
in
call
xchg
adc
movs
data16
jnp
cmp
popf
(bad)
adc
push
cs
mov
mov
jg
dec
out
loope
adc
xchg
and
mov
cli
xor
jl
outs
imul
ret
or
cmps
inc
loope
inc
xor
mov
int
add
or
push
mov
aam
push
ret
int3
leave
gs
dec
pop
sbb
rcr
xor
loopne
scas
mov
cmp
inc
push
retf
fs
push
call
pop
stos
ins
pop
adc
int3
mov
push
aaa
inc
into
js
(bad)
adc
test
xor
xchg
xor
fs
push
fmul
or
mov
dec
outs
adc
jg
fadd
in
adc
in
in
call
loope
add
sub
dec
pop
stos
and
arpl
dec
xor
add
in
pop
addr16
and
push
cdq
out
pushw
or
outs
mov
retf
(bad)
push
iret
fucom
arpl
adc
inc
repz
imul
fdiv
lods
sahf
addr16
movs
push
xlat
mov
sbb
data16
add
call
jnp
and
ds
xor
sbb
adc
cli
xchg
jp
cld
cli
imul
in
and
test
ins
int3
cdq
push
in
jne
push
cmp
int3
mov
add
popf
pop
cld
mov
add
pop
outs
jae
cmp
loope
add
jmp
loopne
aaa
pop
pop
clc
fisttp
mov
or
inc
pop
dec
gs
jne
jmp
cmp
retf
adc
cmp
mov
imul
fucomp
cmp
ror
pop
cmp
test
xor
and
xchg
les
mov
aas
cmp
leave
bsf
in
mov
repnz
and
repz
std
clc
addr16
(bad)
(bad)
push
add
or
push
push
(bad)
sbb
mov
dec
mov
icebp
sbb
jnp
imul
pop
and
xor
pop
ds
cli
mov
sub
sub
lock
xor
xor
nop
pop
pop
ins
mov
lahf
mov
inc
and
or
pop
imul
cdq
imul
push
popa
xor
add
pop
jbe
ins
push
and
cwde
aaa
cmp
inc
cmps
pop
and
push
(bad)
cmps
loop
sub
cwde
sbb
fwait
push
and
sbb
int3
inc
inc
push
mov
aam
adc
fcmove
(bad)
lock
lods
ret
mov
inc
jo
jbe
xor
pusha
stos
and
mov
(bad)
push
jg
push
cmp
sti
ss
mov
daa
(bad)
mov
sbb
adc
bnd
and
aaa
in
xchg
add
popf
sti
jo
rcr
lods
push
(bad)
sub
xor
imul
loope
test
repnz
xor
loop
icebp
sub
ret
xchg
push
add
jo
xor
xor
shl
scas
test
in
pop
add
call
inc
stc
(bad)
or
test
out
and
inc
push
jmp
mov
or
pop
pop
ins
or
stc
loop
es
arpl
enter
mov
loopne
mov
std
cli
in
inc
sar
shl
jae
paddsb
movs
test
jb
ror
call
sub
xor
lock
ficomp
sbb
ret
dec
loopne
or
clc
ret
inc
(bad)
ins
xchg
stos
inc
outs
add
jbe
push
out
neg
sub
jmp
in
xchg
in
sub
pop
dec
(bad)
sti
fld
pop
je
push
or
in
and
shl
cmp
es
add
fsub
sbb
mov
clc
frstor
fild
fimul
leave
add
(bad)
jl
mov
jmp
ja
push
inc
loope
cmp
mov
push
cwde
jge
push
jmp
lods
inc
mov
icebp
lds
sbb
inc
adc
xor
iret
sbb
and
sbb
pusha
pop
mov
rcr
shr
dec
jp
xor
cmp
adc
pop
shr
retf
rol
int
jg
ins
push
cwde
mov
pop
or
cmp
in
aam
and
imul
ffreep
xchg
push
or
in
icebp
out
sbb
ror
pop
pushf
push
push
mov
fs
ret
in
add
and
pop
or
in
repnz
push
repnz
int
dec
mov
sbb
jo
and
test
adc
in
jecxz
push
sbb
pop
stos
jl
adc
and
popa
push
xchg
je
hlt
and
dec
cmps
js
rcr
outs
or
inc
out
fstp
lock
jmp
adc
inc
xor
or
and
fwait
pop
(bad)
sti
fisttp
bound
ss
loopne
pop
in
sub
adc
and
or
pop
mov
cmp
push
sti
add
repz
mov
fwait
or
int3
movs
or
fistp
cmps
xchg
jnp
in
out
ins
jp
sbb
mov
(bad)
mov
xlat
js
xor
retf
mov
sub
test
scas
mov
or
inc
xchg
push
inc
jne
sub
int3
xor
rcr
rcl
push
mov
daa
repnz
mov
xchg
push
mov
ds
aaa
addr16
lods
inc
ds
bound
push
xchg
pop
hlt
pop
in
add
and
pop
cwde
hlt
adc
or
(bad)
in
mov
mov
sbb
xchg
js
mov
push
pop
ret
add
sbb
sub
and
or
or
out
pop
and
daa
test
mov
push
push
jl
jb
dec
cmp
add
cdq
cld
sbb
lods
xchg
cmp
cld
add
jle
pop
sub
cmp
jb
clc
xor
or
inc
xchg
les
mov
adc
xchg
jmp
cmps
push
adc
sub
ds
mov
push
xor
xchg
in
jne
popf
add
fs
pop
ds
cmp
mov
int3
push
icebp
pushf
push
push
dec
call
cmp
jmp
mov
push
push
cmp
inc
dec
dec
retf
rcl
andps
dec
pushf
dec
imul
inc
add
or
into
mov
dec
sar
dec
in
pop
sub
ja
int
pop
dec
jle
adc
mov
stc
or
cdq
jbe
sub
dec
es
mov
retf
aas
mov
(bad)
push
cmp
call
xor
test
enter
mov
inc
test
fistp
test
outs
aaa
pop
je
xor
cli
sub
je
das
mov
cmp
cmp
or
lock
or
pop
mov
fcomp
cmp
cld
add
jmp
sub
scas
sub
leave
or
mov
scas
sar
loopne
loopne
pop
int3
jnp
(bad)
dec
ss
popa
xchg
test
add
aaa
pop
fs
shl
mov
xor
mov
stos
mov
inc
push
and
sub
test
xchg
inc
pop
outs
sub
mov
fmul
repz
and
retf
or
clc
hlt
popa
push
pop
ins
ror
jmp
mov
push
loopne
dec
push
imul
cwde
test
ds
or
adc
fistp
mov
div
les
ins
mov
mov
mov
push
cs
sub
add
and
jbe
pushf
jl
dec
data16
add
sbb
push
sub
icebp
call
mov
push
dec
jae
cli
jmp
xchg
fdivr
sbb
lods
sub
nop
je
test
or
mov
icebp
les
xchg
cwde
dec
xlat
or
inc
(bad)
sub
outs
test
inc
popf
cmp
pop
jp
jmp
dec
lods
add
cmp
xor
sbb
sti
in
cmp
cmp
xchg
loop
mov
push
dec
aas
loopne
or
mov
ins
mov
mov
push
xor
sub
iret
cmp
cmp
dec
sub
in
xchg
or
fsubrp
mov
lods
call
retf
push
jnp
push
in
in
sub
leave
cwde
les
cmp
xchg
mov
dec
push
xor
mov
das
jmp
or
sbb
retf
dec
std
fbld
jle
(bad)
mov
nop
fisub
or
xchg
xor
mov
mov
arpl
iret
sti
imul
cmp
cmp
loope
hlt
push
pop
popf
or
cmp
jle
inc
add
and
jmp
pop
mov
xchg
clc
in
dec
mov
cli
test
dec
loopne
fcom
adc
cwde
clc
arpl
lods
or
lea
stos
lahf
call
adc
cmc
push
adc
outs
push
cmp
ficom
xor
cmp
aas
pushf
mov
push
mov
test
xlat
sbb
in
add
xchg
inc
sbb
pop
sub
enter
inc
mov
std
sub
js
jl
mov
dec
push
pop
popf
push
lods
ror
lock
add
movs
xchg
mov
jo
(bad)
cmps
test
icebp
sbb
ror
push
xchg
mov
(bad)
jl
cwde
add
out
mov
inc
or
pop
fild
pop
or
xor
bound
push
out
push
xchg
popa
sub
pop
xor
sub
or
in
push
xor
cld
inc
xor
push
mov
call
clc
pop
pop
dec
and
int
mov
cmp
jb
jmp
xchg
xor
cmp
jb
out
inc
jmp
movs
cmp
fadd
cdq
stos
sub
fadd
cmp
sub
push
movs
xlat
cld
mov
es
pop
push
pop
mov
shl
fs
shr
fadd
jmp
popa
xor
in
jns
inc
scas
or
jb
out
push
and
test
pop
mov
movs
and
int3
call
fsin
xchg
arpl
add
dec
xchg
and
pop
xchg
jmp
jnp
js
pop
ds
out
fadd
call
inc
adc
sub
mov
test
xor
fcmovne
push
xor
rcr
hlt
aas
push
push
sbb
sbb
jge
repz
test
(bad)
mov
ret
mov
xchg
into
js
clc
sar
adc
mov
and
mov
jbe
mov
jmp
and
(bad)
cdq
inc
loop
inc
cld
mov
and
jae
xor
mov
cmp
sbb
(bad)
fs
jge
jo
int3
mov
ds
push
jns
pushf
ins
int3
mov
jmp
add
out
into
cmp
mov
inc
mov
dec
push
mov
scas
es
push
in
stc
push
pop
dec
cdq
aam
jo
dec
nop
pop
and
fmulp
and
jmp
js
out
sbb
in
arpl
pop
xlat
or
call
dec
jo
jne
clc
sbb
sub
pop
sti
and
retf
mov
sbb
lds
fmul
dec
cs
dec
test
test
jne
cmp
push
inc
mov
fcom
cmps
lock
imul
cld
xor
cdq
cmp
fs
cmps
imul
sar
adc
push
add
loop
mov
les
cmp
add
in
push
aam
movs
ret
and
pusha
cmps
stos
push
inc
sbb
cmp
mov
jns
adc
jb
push
dec
sub
push
pop
jmp
pop
icebp
dec
add
sahf
addr16
sbb
and
push
int
mov
or
jg
pop
push
pop
inc
div
aas
adc
pop
push
and
(bad)
std
xchg
bound
push
lods
inc
pop
jmp
test
sub
adc
enter
xor
cmp
adc
iret
sbb
sahf
pop
add
int3
xor
and
add
adc
sbb
sar
cli
adc
aad
add
mov
ret
retf
sbb
adc
pop
mov
jg
add
or
clc
sub
inc
fidivr
icebp
cmps
jnp
or
retf
mov
pop
pop
aaa
hlt
sub
shl
fidiv
or
loop
loop
repz
xchg
dec
inc
dec
mov
fucomi
imul
loopne
xchg
dec
pop
scas
or
clc
mov
jg
int3
push
add
sbb
cwde
jne
mov
sub
aam
adc
push
cmp
jo
mov
es
ds
inc
xor
cmp
jb
cmp
or
lods
lods
test
pop
das
jno
push
inc
push
adc
jnp
sbb
push
sub
and
pusha
mov
sbb
leave
ror
xor
xchg
stos
jo
jne
xchg
pop
inc
ins
xor
pop
and
js
adc
sbb
pop
ss
enter
or
xor
mov
xor
shl
inc
jno
add
ret
add
addr16
add
cmp
sar
jmp
in
mov
dec
jns
shl
mov
pop
push
cmp
dec
or
(bad)
adc
add
add
sub
std
mov
mov
icebp
pop
push
adc
in
xor
mov
sub
sbb
and
sbb
xor
inc
in
call
and
bound
ds
cmps
pop
mov
loope
cmp
fbstp
data16
cmps
xlat
xchg
and
xlat
adc
ret
dec
pop
in
enter
enter
mov
imul
call
popw
xor
pop
push
lahf
pop
sbb
adc
xchg
std
in
sbb
mov
int3
enter
sahf
push
xor
xor
shr
call
xor
jp
aaa
sti
adc
retf
mov
mov
sbb
jp
or
add
movs
shl
pop
imul
int3
jbe
sub
sbb
call
pop
fistp
jl
lods
jmp
aam
push
in
(bad)
adc
or
mov
mov
fnstenv
inc
push
and
push
sahf
int3
fxam
enter
nop
mov
inc
and
or
push
icebp
bnd
repz
es
ds
gs
int3
retf
cmps
inc
pushf
scas
sub
adc
jmp
call
lods
mov
es
push
iret
push
jo
jno
push
out
sahf
inc
cmps
push
rcr
aas
mov
loopne
cmp
mov
js
sub
add
pop
and
mov
sbb
gs
jnp
out
repz
in
into
pop
loop
movs
cmp
dec
leave
ror
add
call
sub
(bad)
in
and
sub
or
xchg
adc
xchg
mov
cmp
pop
mov
jg
and
in
push
outs
sbb
popf
cmps
mov
cmp
int3
xchg
shr
retf
jg
lods
retf
cmp
pop
adc
jb
mov
add
cmp
(bad)
popf
nop
pop
mov
jge
inc
or
repnz
pusha
jp
sub
pop
adc
mov
jmp
dec
jmp
jg
add
mov
and
jb
mov
leave
fsub
ror
fsubr
out
mov
pop
sub
sahf
(bad)
or
pop
mov
aam
pop
inc
sub
mov
dec
ficom
test
aaa
push
lock
pop
xchg
into
pop
fidiv
das
loopne
inc
inc
iret
dec
cmp
or
cld
xor
sub
lea
jecxz
push
(bad)
iret
add
clc
inc
jae
pop
dec
cmp
fs
addr16
in
or
push
and
pop
cdq
mov
repz
jmp
add
push
or
int
add
scas
sbb
mov
adc
out
call
mov
mov
or
and
imul
shl
fdiv
call
sub
lock
sti
xlat
mov
jmp
outs
add
dec
iret
shr
push
xor
les
fidivr
ret
push
mov
push
push
cmc
(bad)
or
sar
outs
adc
fist
fwait
inc
clc
hlt
cwde
sbb
adc
lock
adc
push
fcom
mov
in
push
jns
and
jp
rcl
retf
rol
cmp
sub
jle
adc
ficomp
cdq
neg
retf
iret
push
push
dec
hlt
and
mov
addr16
push
push
fcom
cld
sbb
mov
repnz
outs
xlat
jge
cmp
popf
jl
pop
dec
cdq
xor
push
in
lods
shl
cmp
xor
div
pop
add
sub
imul
lods
imul
cwde
add
mov
or
loop
sbb
ficom
xchg
std
ret
cmp
add
add
inc
mov
jne
mov
add
adc
cld
cmp
mov
or
push
das
movs
mov
push
push
cmp
sbb
test
mov
push
cvtdq2ps
outs
stos
cmp
inc
jmp
sub
int3
xlat
ror
push
sti
push
imul
ins
fadd
clc
and
daa
cmp
out
pop
sar
popf
sbb
or
or
aad
mov
daa
add
retf
sbb
int3
xor
pop
mov
imul
arpl
inc
cmp
sub
lea
pand
mov
adc
retf
mov
or
imul
and
mov
pop
add
shr
in
cdq
stos
xor
or
imul
cmp
outs
push
xor
bound
mov
jb
cmp
(bad)
neg
into
and
shl
mov
repnz
bound
sbb
retf
add
fistp
add
test
jnp
jae
into
test
fwait
xchg
add
ud2
loopne
and
into
(bad)
shl
mov
or
mov
sub
or
add
leave
jb
inc
dec
xor
repz
push
out
jo
cmp
xchg
dec
or
sub
cmc
sub
cmp
inc
mov
cmps
push
in
jmp
fild
fimul
add
adc
add
push
clc
and
inc
jmp
(bad)
fist
push
in
sub
std
mov
xor
sbb
les
or
xchg
add
mov
dec
sbb
cmp
into
cmp
push
sub
cld
push
lods
sbb
mov
sbb
sbb
sbb
or
(bad)
mov
add
int3
push
or
xor
dec
in
push
mov
lods
in
dec
les
js
mov
cmp
lahf
repz
bound
cwde
dec
fdivrp
imul
push
(bad)
jmp
ds
dec
push
stc
cwde
inc
fld
inc
jle
sub
loop
jnp
jno
lods
int3
dec
jmp
xor
xchg
and
cli
mov
adc
fimul
jge
adc
pop
cmc
mov
lea
mov
data16
call
retf
mov
cld
cwde
aaa
adc
repz
pop
int3
fisttp
cmc
retf
cwde
add
sbb
fld
movs
sub
std
push
in
daa
push
icebp
in
int3
and
aas
adc
xor
sti
jge
dec
cld
lds
inc
ins
ret
cli
jmp
in
mov
imul
ins
push
or
out
jmp
and
call
aas
cmp
sbb
cdq
xchg
in
adc
adc
xchg
add
mov
mov
lods
add
push
pusha
je
adc
xchg
sub
and
xor
test
in
stc
call
xor
inc
call
or
in
addr16
(bad)
cmp
loopne
and
iret
clc
(bad)
fcomp
std
add
sub
inc
add
inc
xor
mul
icebp
jl
call
or
xor
xor
sbb
(bad)
jge
mov
jmp
push
add
pop
push
int
cmps
sub
pop
fisttp
push
call
cmp
in
icebp
or
test
adc
xor
jmp
aas
std
iret
pusha
or
out
xchg
push
and
mov
or
(bad)
pop
and
mov
inc
data16
push
fwait
(bad)
sub
fs
call
push
test
jno
iret
in
pop
ds
add
or
push
and
cmp
out
cmc
or
data16
pop
test
in
xor
push
int3
push
aad
mov
bound
pop
cmps
jmp
bound
xchg
mov
call
cmc
ret
je
lock
lds
int3
retf
retf
cmc
add
adc
add
stc
or
mov
enter
int3
clc
hlt
sbb
pop
cmp
shl
rol
out
jecxz
mov
push
push
fnstenv
lods
push
push
in
push
stos
aas
add
fs
aaa
sbb
int3
imul
push
mov
leave
fucomip
test
mov
push
xchg
lods
xchg
lea
aad
push
mov
nop
or
mov
idiv
push
mov
cmps
ja
or
mov
je
sub
ret
pop
push
xchg
jmp
and
clc
push
mov
mov
adc
es
or
jmp
add
cmp
and
add
stc
call
or
xor
test
cwde
mov
dec
or
int3
xor
mov
mov
or
jmp
cmc
xor
in
fnstenv
(bad)
hlt
pop
jg
pop
retf
fild
sbb
ffree
enter
aad
inc
pop
sub
xchg
fmul
loope
(bad)
fld
ss
push
add
enter
jp
pop
dec
xchg
pop
dec
jo
out
pop
push
inc
jl
xor
push
xlat
mov
fcomp
js
mov
sbb
retf
es
sbb
mov
pop
jbe
loop
aas
push
or
cmp
jecxz
inc
inc
dec
(bad)
mov
cmp
fs
cmp
in
es
aad
jge
lea
pushf
or
pop
xchg
jmp
pop
aam
dec
sub
lods
test
je
xchg
push
in
icebp
xor
pop
lods
in
adc
xor
ins
xor
ins
(bad)
cmp
push
mov
nop
ret
adc
cmp
mov
es
pusha
or
push
cmp
mov
(bad)
mov
mov
mov
lds
pop
es
outs
add
ja
ror
lds
into
cmp
sbb
cwde
dec
mov
and
push
pop
pop
je
push
mov
sahf
pop
imul
sub
setp
mov
inc
inc
stos
jl
cmp
push
pushf
inc
inc
mov
imul
repnz
and
ret
stos
push
push
push
sub
add
inc
xchg
jae
push
mov
icebp
and
inc
cmc
enter
xor
push
push
sbb
add
pop
or
or
xchg
in
ins
clc
fmul
sbb
cmp
sbb
cmp
mov
cmp
push
mov
int3
push
mov
push
into
mov
sub
mov
stos
fdivp
inc
jne
dec
shl
ins
inc
lahf
out
mov
xchg
data16
cmc
fstp
imul
and
or
and
int3
xchg
stc
mov
in
and
add
jnp
mov
in
inc
pop
and
adc
push
retf
and
inc
or
push
popa
add
mov
xor
push
sub
xchg
or
shl
imul
cs
add
xor
dec
cld
pop
inc
rcl
add
pop
int3
fcmovnu
(bad)
or
adc
xchg
test
enter
fdiv
or
in
retf
ret
mov
out
lock
xor
je
movs
repnz
fs
das
sub
inc
mov
fild
or
jmp
movs
mov
out
in
fcmovu
inc
jmp
pop
jnp
popf
add
mov
sub
add
xchg
cmps
(bad)
jbe
mov
shl
fwait
mov
inc
out
fwait
sub
push
xchg
mov
hlt
fs
dec
nop
and
mov
jb
sbb
out
into
inc
xchg
in
fistp
mov
inc
jne
dec
test
in
mov
dec
inc
loope
mov
jmp
inc
xchg
adc
jne
dec
daa
adc
inc
or
add
adc
push
nop
cmps
dec
fsubr
jbe
sbb
cdq
or
pop
int3
pushf
loopne
push
in
push
or
stos
adc
mov
mov
or
mov
mov
and
push
(bad)
mov
sahf
inc
sub
sub
dec
ret
or
fsub
mov
xor
pusha
dec
ret
push
add
sahf
lods
je
mov
out
jnp
inc
dec
sub
pop
xor
and
adc
sbb
cmps
xor
xor
fist
jbe
push
pop
mov
(bad)
cdq
mov
add
repnz
(bad)
fld
adc
ror
clc
mov
add
ret
mov
lea
sbb
loope
inc
xor
ja
retf
ds
mov
(bad)
jae
pop
push
fistp
dec
movs
and
cld
add
jmp
mov
mov
xor
cmps
fsub
dec
enter
sub
jno
scas
mov
or
mov
jmp
push
jb
in
xor
pop
ja
out
js
hlt
les
fnsave
shl
das
les
nop
push
push
push
dec
in
inc
dec
cwde
(bad)
sbb
movs
ins
das
jb
aas
or
dec
xchg
sti
pop
xor
or
das
inc
enter
push
or
sbb
inc
cwde
in
jo
push
or
fxch
adc
icebp
(bad)
jmp
sub
dec
dec
jnp
sub
sahf
and
mov
dec
enter
popa
inc
dec
pushf
gs
sub
xlat
sub
inc
sub
xchg
xor
sbb
and
add
xchg
push
(bad)
xchg
fcomp
imul
sbb
adc
call
out
aam
or
inc
js
lahf
cmp
out
inc
das
jno
adc
js
pop
rcr
into
mov
cwde
sub
xchg
mov
lock
mov
add
ficomp
aas
mov
sub
or
and
dec
int3
xor
push
mov
pop
stos
add
aas
test
imul
jl
les
xchg
mov
mov
sub
ficom
in
mov
fist
sbb
push
imul
in
push
int3
adc
(bad)
xchg
mov
xchg
mov
dec
into
push
cs
stos
mov
mov
cmp
and
syscall
xchg
ret
dec
push
sbb
dec
test
outs
mov
xchg
in
jne
cmps
add
inc
(bad)
call
push
stos
aaa
aaa
aaa
aas
fdiv
lahf
pop
push
cwde
pop
cmc
fbld
xor
xor
pop
fsubrp
bound
int3
stos
rcr
or
xor
dec
jae
and
dec
add
and
inc
pop
dec
pop
push
dec
push
sbb
push
clc
imul
push
dec
std
cmps
xor
push
jl
xor
addr16
jne
loope
jge
repz
dec
dec
xor
dec
adc
mov
inc
push
outs
mov
out
sbb
aas
push
sub
xchg
inc
add
imul
jbe
inc
dec
(bad)
fbstp
loope
jne
xchg
mov
add
sti
cld
scas
test
mov
dec
les
retf
adc
ficomp
mov
out
cmc
lods
jbe
ret
xchg
inc
add
and
addr16
and
cli
push
loopne
popf
arpl
inc
push
xchg
pop
push
jmp
jmp
inc
repnz
jne
out
jp
jbe
pushf
push
adc
leave
add
fucomip
stos
int3
add
outs
ret
mov
jp
gs
cmps
mov
push
(bad)
sub
int3
shl
data16
xchg
imul
or
push
push
jge
and
add
xchg
xor
ja
cmps
sbb
inc
mov
addr16
fld
cwde
jb
scas
adc
jnp
sub
lods
out
push
sahf
xchg
cli
add
and
mov
fild
mov
adc
cdq
loope
rcr
out
adc
sbb
push
mov
(bad)
jmp
ss
inc
inc
mov
mov
inc
call
je
aas
cld
(bad)
js
mov
mov
push
call
je
pop
gs
fistp
ss
shl
inc
imul
fs
out
sbb
push
xchg
call
cmc
add
les
repnz
mov
jmp
pop
push
jp
inc
add
daa
(bad)
int3
das
out
test
pop
sar
sbb
pushf
std
scas
and
adc
or
das
repz
pusha
mov
out
stos
imul
cli
add
lock
push
xchg
scas
into
popf
ficom
jno
mov
fsub
pop
jbe
xor
xor
pop
cmp
sbb
add
dec
mov
mov
jge
repz
arpl
icebp
int3
add
adc
push
dec
dec
jnp
jns
mov
pop
test
lahf
js
hlt
cmp
jl
jecxz
(bad)
fld
jo
jmp
add
dec
jge
cld
dec
ja
aas
sub
call
rcr
repz
out
cmp
pop
and
rcr
jl
cwde
and
js
and
out
jmp
pop
rcr
push
sbb
jp
(bad)
inc
fstp
and
xchg
inc
add
stos
or
sbb
pushf
sub
jg
lods
ins
inc
add
mov
jo
cwde
pop
outs
pop
dec
and
aad
mov
js
sbb
dec
add
cmps
push
loop
or
jle
push
jge
dec
ja
outs
xchg
add
dec
mov
je
sbb
pop
sub
je
icebp
push
ins
pop
fwait
inc
sub
cwde
out
je
push
pop
push
es
loop
jg
push
ja
dec
jbe
addr16
adc
jg
call
ja
push
cmp
imul
cs
push
or
xor
test
ins
js
cmp
adc
sbb
out
jb
mov
add
xlat
cmovns
icebp
cmp
or
mov
or
cmp
add
or
add
imul
pop
(bad)
movs
add
pop
(bad)
inc
por
pop
add
and
into
add
imul
jmp
syscall
test
cmp
fdiv
mov
pop
movs
cmp
lds
ins
fcomp
lods
jp
and
sbb
nop
pop
fdivr
rol
ins
clc
fmul
jp
and
sbb
nop
pop
cld
cmp
cmp
ror
sbb
add
ins
adc
add
or
sbb
add
add
xor
and
sub
cmp
and
add
fnstsw
mov
loopne
call
test
mov
mov
cmp
das
jb
js
sub
mov
pop
add
push
imul
push
cmp
aad
pushf
and
dec
sti
push
or
cwde
pop
mov
je
xor
push
in
cwde
xchg
cmp
jecxz
mov
icebp
pop
mov
cmp
pop
mov
rol
jge
pop
test
loopne
sub
cwde
cmp
popa
add
ins
mov
add
in
sub
add
repz
ins
fs
cmp
add
cwde
pop
les
test
push
add
in
movs
xchg
cmp
in
sar
test
push
add
jmp
cmp
add
sbb
xchg
ins
or
cdq
cmp
add
add
pop
cld
cmp
test
loopne
push
push
or
and
sbb
push
in
add
cmp
cwde
sub
xor
add
cmp
cmp
in
add
add
ins
in
mov
cmp
loopne
fwait
cwde
pop
or
adc
ins
pop
xor
or
addr16
and
sub
sub
inc
cmp
push
and
ins
test
ins
push
pop
mov
pop
pop
cmp
cmp
in
sub
jo
popf
idiv
mov
cld
in
or
inc
scas
loope
mov
test
ss
stc
fidivr
jae
mov
jo
imul
mov
pop
xchg
loope
cmp
repnz
jg
dec
or
hlt
inc
jae
adc
mov
mov
ins
in
das
or
pop
dec
pop
xor
jl
xchg
lds
sub
cmp
imul
push
add
sub
imul
test
jbe
js
or
sub
xchg
cmp
aad
add
add
mov
push
xchg
add
movs
xor
jge
loopne
add
gs
cld
add
and
jge
hlt
jbe
into
aad
xor
imul
in
int3
sub
in
mov
shl
add
dec
or
js
pop
and
inc
not
into
jnp
pop
add
add
in
push
dec
pop
dec
jo
out
jae
dec
mov
jmp
inc
rcr
sub
das
add
std
adc
rcr
mov
aad
pushf
xor
shl
js
sub
jae
jo
lahf
mov
sub
push
sub
sbb
add
aas
push
dec
jmp
jae
mov
xor
rol
adc
sub
mov
sbb
mov
xchg
int3
jo
adc
xor
jne
xchg
push
pop
fnstcw
popa
pop
ins
add
xor
aaa
int3
(bad)
mov
jmp
fs
cbw
imul
ror
cwde
lahf
fisubr
push
xor
add
int3
repz
sbb
add
pop
sahf
inc
jle
push
push
mov
add
pop
add
jmp
jge
mov
push
jle
inc
gs
push
loope
outs
out
jae
scas
mov
jl
adc
sahf
or
dec
pushf
ficomp
fs
mov
add
inc
jmp
inc
jmp
(bad)
inc
fs
cmp
sti
mov
xchg
fsub
push
mov
out
icebp
out
xor
repz
mov
mov
jo
or
stos
shl
jnp
mov
cmp
sbb
call
adc
scas
call
data16
inc
clc
mov
pop
stos
jo
sahf
dec
in
adc
or
(bad)
outs
(bad)
aam
js
movs
pop
loopne
sbb
or
xchg
add
push
cld
dec
inc
fs
test
cdq
push
push
ja
push
addr16
push
push
(bad)
call
clts
repz
sbb
mov
pop
add
add
xchg
scas
cld
mov
sub
and
mov
jg
cmps
xchg
add
adc
mov
add
mov
call
mov
fs
xchg
ficomp
in
rcr
pushf
push
pop
lock
sub
imul
dec
push
out
inc
push
std
xor
xor
jl
dec
pop
mov
js
add
hlt
jmp
sbb
in
push
or
shl
sti
sbb
jp
in
fs
push
cld
sbb
js
je
cmp
pop
and
and
pop
push
push
ficom
push
jmp
xchg
cdq
mov
adc
iret
mov
jo
sub
sbb
pop
enter
scas
mov
jo
test
adc
add
mov
cwde
pusha
and
adc
cmovl
pop
pushf
mov
cs
sub
add
test
pop
dec
jbe
add
mov
or
xor
push
xor
mov
(bad)
ins
cmp
loopne
mov
pop
cmp
imul
xor
pop
outs
mov
je
xor
pop
cmp
inc
push
gs
mov
add
gs
fsubr
dec
push
dec
pop
shl
sub
and
adc
and
int3
xor
pop
cmp
dec
lea
cmp
push
stos
or
data16
and
or
fst
(bad)
int3
or
adc
pusha
sbb
mov
or
mov
call
xor
dec
sahf
imul
clc
adc
ror
pop
movs
adc
push
mov
inc
sub
out
cmp
pop
leave
pop
in
imul
cmp
xor
dec
mov
dec
jmp
and
pop
or
out
push
adc
test
pushf
lods
sub
cmp
das
imul
dec
add
add
add
jmp
fs
add
push
ja
push
mov
imul
dec
or
fisub
cmp
jecxz
xor
ds
xchg
imul
dec
sbb
sub
and
pop
mov
jmp
xlat
test
or
or
push
add
mov
in
cmp
adc
adc
jae
or
in
cmp
in
test
sub
mov
jp
cmp
or
xlat
jecxz
jae
or
les
mov
xor
sub
repz
mov
ins
cmp
mov
cdq
ret
add
push
sub
and
or
scas
jns
sbb
and
sahf
pop
push
mov
ds
push
add
scas
or
pop
pop
test
sar
push
xor
aaa
mov
fucomi
pushf
dec
adc
test
mov
ss
pop
cmps
push
push
or
fcmovbe
jno
cmp
aas
test
mov
das
jle
fwait
sub
mov
or
sub
stc
jb
sub
sub
inc
sub
mov
dec
aam
push
push
and
xchg
jge
movs
dec
lods
sbb
ja
outs
sub
les
jmp
inc
nop
inc
cmp
mov
sahf
cmp
inc
or
xor
dec
push
ds
xor
mov
in
es
sub
ins
and
xchg
push
sbb
ins
adc
cmovs
mov
imul
movs
cmp
sti
jns
jb
mov
dec
adc
sar
mov
cmp
push
cmp
adc
or
imul
xchg
cwde
xchg
add
push
fwait
sbb
imul
je
pop
adc
cmp
xchg
es
ds
nop
ins
sub
jo
aaa
xor
mov
popa
cmp
push
dec
pushf
xchg
imul
ins
jmp
push
popf
and
fs
pop
pop
fadd
mov
sti
add
sbb
mov
in
fsub
rol
aam
sbb
in
push
jns
jmp
pop
jp
cmp
add
jle
sbb
xor
ins
xor
arpl
or
adc
sub
cmps
xchg
jmp
push
aad
rol
or
shr
xor
mov
stos
or
or
popa
fldcw
fidivr
jmp
sub
adc
sbb
adc
cwde
cwde
xchg
pop
in
cmp
sub
fistp
(bad)
dec
pop
fcom
push
jae
jl
jae
mov
xchg
and
xor
add
adc
mov
mov
add
pop
cmovp
xchg
xchg
adc
push
lea
in
sbb
inc
mov
sbb
sahf
cmp
sbb
or
call
mov
mov
or
jns
or
aaa
xchg
sub
adc
and
push
pop
or
jmp
aaa
bound
xchg
sub
pop
sub
xchg
sub
test
dec
cmc
push
rol
sti
sbb
push
adc
imul
mov
push
loope
mov
retf
jp
jmp
ins
mov
jno
mov
pop
mov
add
sub
(bad)
fild
pushf
outs
sbb
add
pop
lds
(bad)
aas
add
mov
xor
xor
dec
pop
loopne
ins
in
pop
sbb
jl
inc
cmp
fwait
dec
mov
shr
dec
xchg
lods
pop
cmp
sub
adc
mov
cmp
mov
nop
pusha
mov
pushf
pop
adc
jl
ja
dec
and
dec
pusha
fwait
sub
jl
dec
push
xchg
fs
ror
pop
or
fcmovnbe
inc
mov
cmp
repnz
push
sub
ins
xor
or
inc
sbb
rcr
add
fnsave
cmps
test
js
popf
lods
pusha
ss
or
inc
jbe
jnp
or
and
call
pop
sbb
adc
repnz
inc
bound
stos
bound
ja
mov
inc
jb
xor
dec
retf
sub
push
sbb
jmp
dec
pop
daa
mov
xchg
ret
cmp
pop
cmp
lods
and
mov
and
sbb
test
xchg
mov
aam
jl
push
sbb
push
ja
jnp
xor
jbe
push
xchg
test
inc
push
and
sub
call
pop
push
mov
(bad)
scas
mov
test
cmp
lods
xor
pop
lods
push
(bad)
fstp
sub
test
aam
jge
push
enter
in
ss
adc
add
adc
jmp
sub
in
leave
in
jb
lea
add
int3
rcl
dec
out
es
out
aas
pusha
pop
mov
xchg
add
inc
or
icebp
nop
test
hlt
cmp
xor
jp
or
sbb
adc
lods
je
sbb
mov
push
mov
add
mov
lods
rcl
inc
and
inc
pop
je
hlt
dec
lods
add
pushf
and
push
dec
ficomp
pop
in
jp
sbb
add
sbb
stos
sbb
dec
jmp
jl
jle
or
jmp
call
rcr
inc
in
fsubr
and
adc
and
mov
pop
in
jle
mov
jmp
push
dec
mov
push
jp
pop
in
lahf
sbb
imul
aaa
push
xchg
pusha
mov
cld
aam
mov
push
add
hlt
popf
sbb
ins
xor
inc
push
pop
fisubr
rcr
add
pop
sar
ins
leave
pop
adc
movs
cmp
inc
gs
mov
mov
dec
ret
rcr
mov
jle
sbb
movs
and
sub
or
mov
jo
std
push
jo
add
adc
inc
ja
jae
test
movs
add
push
xchg
int3
hlt
das
hlt
ins
lods
nop
adc
scas
dec
test
xchg
jmp
jne
(bad)
sub
push
cmp
dec
pop
inc
adc
stos
pusha
fst
sbb
fsubr
ds
les
or
pop
repnz
sub
idiv
ds
std
mov
dec
and
jns
imul
push
dec
dec
outs
jnp
push
push
or
imul
enter
icebp
or
in
dec
hlt
fs
ins
jmp
xor
mov
jb
mov
sbb
out
xor
sar
int
sbb
pop
sub
fdiv
inc
(bad)
xor
xchg
nop
jo
sti
jmp
sbb
rcl
outs
mov
in
dec
push
push
movs
xor
add
add
xchg
shl
(bad)
mov
repz
sbb
xor
sbb
mov
ins
push
pushf
fwait
mov
add
add
inc
xor
pop
rcr
test
je
xchg
add
popf
or
inc
es
test
push
sbb
inc
xor
push
je
and
or
ds
inc
push
ror
dec
call
cmp
pop
retf
(bad)
sbb
aad
ss
jp
mov
or
dec
mov
retf
aaa
inc
neg
cmps
cmps
or
adc
pop
stos
push
adc
mov
sbb
sbb
aaa
stos
jnp
add
jo
sub
pop
jmp
daa
push
mov
mov
pop
xor
jnp
jg
mov
mov
sbb
repnz
add
add
xor
push
test
push
sub
or
fisubr
push
mov
lods
xor
sbb
das
test
sti
ja
lahf
sub
in
test
and
or
push
js
push
sub
sub
sub
jl
xchg
cs
pop
cmp
cmp
mov
fidiv
outs
push
mov
aaa
mov
pop
retf
pop
and
mov
cli
jmp
push
inc
test
push
inc
pop
pop
int3
pop
xchg
mov
sub
les
addps
cmp
push
mov
pop
test
outs
fld
mov
sub
pop
sub
mov
xor
pop
add
pop
mov
hlt
in
nop
inc
mov
test
xor
sbb
xor
mov
push
ficomp
pop
shl
add
dec
repz
shr
cmp
cmp
gs
add
test
xchg
sub
xor
stc
and
jo
add
add
and
sub
xor
jo
pop
int3
xor
cli
jle
add
pop
jmp
sbb
push
pushf
jmp
pop
sub
shr
int3
add
shl
sub
add
dec
pop
addr16
push
jbe
cli
or
push
jnp
jno
aam
mov
lea
je
bound
pusha
add
bnd
inc
icebp
adc
pop
lock
pusha
cs
jo
gs
sub
jle
jmp
add
or
in
fist
mov
ficom
push
mov
push
jne
push
mov
enter
add
cmp
mov
or
add
cmp
xor
sbb
xchg
cwde
jne
test
cmp
int3
stc
fsub
xor
in
movs
test
and
in
daa
xor
not
xor
push
in
lods
add
dec
cli
add
ja
imul
in
inc
mov
or
inc
and
pop
jp
xor
test
push
push
ja
loopne
mov
lds
fdiv
popf
shr
or
mov
push
mov
or
aad
lods
or
mov
mov
ror
clc
sbb
lods
sbb
test
mov
(bad)
mov
nop
call
dec
ja
retf
xchg
pop
add
inc
and
pop
dec
xor
lods
xor
add
cmps
mov
sub
xor
sbb
pusha
lock
xor
test
mov
ds
ret
or
or
test
movs
xor
dec
pop
xor
mov
and
xor
pusha
pop
sub
sub
cs
stos
adc
mov
fisubr
addr16
jno
mov
fld
xor
add
sbb
add
call
xchg
fsub
add
retf
ret
repz
push
push
(bad)
in
movs
sbb
popf
mov
in
or
mov
inc
addr16
inc
pop
adc
jle
imul
mov
arpl
cld
add
sahf
jg
cwde
jecxz
push
mov
int3
mov
lahf
aaa
mov
cwde
sbb
mov
(bad)
std
les
pusha
xchg
cdq
icebp
adc
lock
adc
ins
adc
push
push
xchg
fs
mov
int3
pushf
cmp
jmp
mov
xor
mov
and
int3
mov
push
adc
or
adc
xchg
aaa
(bad)
iret
inc
pop
pop
addr16
in
xchg
dec
aam
mov
pop
add
dec
addr16
and
pop
sbb
ins
xor
(bad)
cmp
push
(bad)
dec
movs
stos
gs
mov
mov
pushf
cmp
add
mov
jg
retf
xchg
stos
sbb
ja
lods
xchg
dec
test
fnstsw
add
mov
popf
cmps
xchg
push
outs
test
dec
mov
mov
pop
cmp
pop
stc
jne
dec
pushf
or
mov
rol
fnsave
mov
mov
bswap
pop
inc
loope
loop
repnz
jb
rcr
cwde
cmp
cwde
js
xor
aas
fadd
dec
loopne
inc
push
or
pop
sbb
mov
cli
or
add
sub
push
clc
mov
pushf
dec
movs
xor
inc
call
add
cmps
xor
(bad)
pushf
mov
push
dec
das
xchg
mov
cmp
ds
in
sub
frstor
and
sbb
or
pop
pop
adc
movs
or
cwde
jns
dec
lods
dec
cmp
int3
add
pop
adc
add
js
jg
xchg
sub
in
test
sbb
jecxz
mov
pop
add
adc
xchg
add
sub
loop
jne
xor
lock
hlt
mov
in
or
pop
xchg
mov
inc
cdq
call
cwde
mov
retf
jmp
jp
sub
call
jp
mov
cmp
xor
cmp
and
pushw
sub
int3
mov
xor
mov
mov
(bad)
dec
in
addr16
push
cmps
ret
push
jne
jno
or
out
mov
add
aaa
(bad)
xchg
(bad)
pop
iret
and
test
fwait
int3
js
xor
adc
retf
xor
cmp
adc
xchg
lods
mov
loope
jle
push
cwde
xchg
fs
repz
jne
mov
mov
push
adc
or
sub
lods
dec
inc
cld
xchg
push
ret
ds
in
and
lods
or
xchg
cmps
pusha
mov
pop
jb
sbb
dec
mov
xor
sti
pop
ret
adc
add
icebp
and
inc
mov
ins
and
mov
cmps
pop
imul
dec
pop
mov
lock
mov
addr16
sub
sbb
lahf
dec
lods
xor
push
or
test
add
fdiv
add
inc
push
test
in
inc
jp
and
pop
scas
mov
sbb
rcl
mov
js
pop
out
int
mov
mov
sub
pop
mov
jg
mov
es
out
xor
lods
jae
out
sub
push
test
lods
jne
lock
jnp
lods
cmp
ins
rcr
or
push
dec
pop
in
pop
ret
test
mov
nop
push
ror
sub
pop
fs
mov
xchg
retf
ja
jns
adc
bound
jns
icebp
das
cmp
out
xor
jb
ins
aaa
test
pop
add
or
lock
mov
and
ins
push
mov
mov
rcr
cmp
clc
pop
rcl
pop
(bad)
push
mov
sub
xchg
stos
fmul
mov
cmps
push
xlat
dec
jl
xchg
mov
xchg
add
push
test
int3
add
push
je
cld
jnp
cmp
les
add
mov
sub
cwde
call
and
jns
cmps
push
ficomp
mov
mov
add
aad
mov
in
xchg
call
cwde
clc
pop
inc
push
int
call
das
outs
cmps
outs
push
inc
mov
ins
ds
sub
fs
arpl
xor
in
push
sbb
scas
cmp
mov
sbb
cmp
cmps
mov
cmp
or
and
push
cmp
or
inc
lods
in
les
(bad)
ds
sbb
cmp
push
jle
and
add
loope
pop
imul
pop
pop
lds
sub
xchg
jbe
aad
or
push
pop
loope
fild
test
sbb
les
mov
push
fimul
pop
das
cdq
or
sub
ds
xor
xchg
sub
adc
imul
adc
popa
dec
div
jne
add
pop
ins
xchg
mov
push
fbstp
pop
adc
es
movs
mov
movs
enter
pop
dec
xchg
push
cld
and
ins
dec
in
cwde
js
sar
push
push
nop
xor
lds
jecxz
xor
sbb
mov
sub
pop
idiv
cmps
stos
mov
adc
jnp
inc
adc
or
retf
jl
pop
adc
mov
pushf
sbb
mov
xchg
mov
mov
cmp
sub
(bad)
xchg
add
xchg
xor
xchg
sub
add
sub
(bad)
repz
out
sahf
mov
call
dec
cwde
mov
xlat
inc
sub
les
int3
sbb
in
fnsave
adc
jnp
loopne
dec
and
add
clc
mov
ins
add
sbb
pop
in
add
dec
sub
int
retf
jle
lods
or
jo
xor
call
pop
mov
inc
ror
xchg
int3
cmp
sbb
leave
pop
sbb
adc
bswap
pop
push
adc
mov
in
mov
in
pop
xchg
mov
mov
nop
aaa
and
lods
or
in
ins
add
shl
test
imul
inc
aaa
xchg
repnz
sbb
inc
in
xchg
iret
xchg
cmp
hlt
push
xchg
mov
mov
add
pop
or
sbb
dec
fwait
mov
sub
inc
dec
mov
push
add
jnp
aas
mov
mov
cbw
push
sub
and
mov
cdq
mov
js
cmp
or
jge
or
mov
call
cmp
popa
fistp
add
cwde
mov
icebp
fsub
and
mov
or
aaa
mov
mov
clc
xor
or
stos
add
test
mov
xor
or
add
out
inc
sub
mov
sub
adc
push
mov
test
xor
xor
cmp
jb
pop
xchg
cmp
sahf
pop
sbb
xchg
mov
add
cmps
ins
jb
shl
call
ret
sbb
push
jmp
enter
inc
test
das
xor
xor
mov
hlt
push
in
adc
or
jp
cmp
(bad)
push
movs
(bad)
(bad)
(bad)
dec
xchg
aad
sub
jne
bound
jmp
in
cld
xchg
sbb
jno
rcr
cmps
inc
cmp
rcl
add
add
call
hlt
xlat
loop
fwait
or
lods
jmp
ss
je
loope
retf
ds
xchg
es
adc
or
cs
sbb
fs
push
and
js
push
mov
inc
xchg
fistp
int
addr16
mov
jge
shl
pop
inc
ss
or
or
add
xchg
mov
ficomp
inc
xor
nop
dec
pop
push
cmp
je
pop
fdiv
inc
and
imul
mov
adc
sbb
push
das
xchg
jle
leave
add
xor
sub
adc
sbb
push
cmc
leave
sub
pop
out
push
pop
pop
in
add
cmp
adc
std
mov
dec
jp
jge
mov
xchg
dec
jbe
lock
dec
sbb
mov
icebp
in
cmp
(bad)
ficom
pop
push
inc
nop
fimul
xchg
inc
jg
test
test
lods
out
mov
stc
retf
cwde
jmp
test
cmp
or
dec
aas
pop
inc
mov
inc
push
cmp
or
inc
xor
xor
sub
and
mov
es
les
lock
xchg
xor
in
or
clc
wrmsr
int3
nop
mov
and
loop
js
cdq
sub
push
adc
cdq
jo
or
cmp
enter
pop
mov
or
mov
fcmovu
iret
pop
push
jge
fiadd
dec
and
in
in
mov
jne
jae
ins
dec
es
arpl
cwde
push
(bad)
pushf
fiadd
mov
bound
cwde
js
sub
jp
aaa
dec
sub
dec
mov
sbb
add
cbw
sbb
sahf
adc
mov
pop
pop
push
jb
je
mov
out
test
aaa
sbb
aas
aam
ins
and
data16
sbb
push
pop
xchg
shl
fld1
rcl
sbb
push
push
inc
ins
push
lods
jge
push
or
das
push
adc
jle
mov
push
lods
iret
fidivr
and
xchg
rcl
push
int3
(bad)
sbb
push
cli
aaa
dec
push
loop
push
movs
arpl
adc
xor
dec
sbb
or
cmc
int3
adc
movs
fwait
xor
or
dec
fsubr
movs
lods
pop
stos
cmc
or
inc
clc
mov
int3
in
adc
inc
cmp
out
dec
lahf
sub
push
jg
and
lahf
mov
mov
or
or
lods
or
in
lea
add
sbb
mov
and
xchg
ds
mov
into
xor
jno
sbb
and
or
or
add
adc
sbb
jmp
push
fidivr
pop
push
dec
(bad)
mov
aam
jno
add
sub
or
lahf
pop
xlat
mov
(bad)
inc
pop
adc
or
dec
out
push
iret
fmul
outs
mov
inc
pop
inc
push
sbb
stc
jb
bound
fndisi(8087
and
repz
cmp
test
(bad)
or
and
addr16
pop
lods
sbb
or
mov
imul
inc
mov
js
push
jae
shl
shl
(bad)
jo
dec
inc
sbb
push
push
stos
pcmpeqd
cmp
and
dec
jle
pop
bound
jmp
or
mov
jle
movs
unpckhps
sbb
es
outs
test
add
mov
dec
cmp
sbb
cwde
jl
sbb
adc
cmp
xor
sti
fmul
scas
xor
(bad)
jmp
cld
iret
pop
push
shl
pop
inc
xor
push
fcom
pop
fild
sbb
dec
ins
push
push
inc
mov
xchg
ins
cmp
in
mov
dec
inc
sub
xor
mov
cld
inc
cdq
stos
addr16
and
fwait
out
pusha
adc
sbb
test
xchg
outs
jg
add
aad
mov
xchg
inc
lods
jp
xchg
sbb
jb
or
aas
idiv
inc
and
mov
dec
pop
mov
xchg
test
xchg
retf
and
sbb
test
ins
je
pop
push
xchg
inc
lods
inc
sub
sahf
sub
cmp
jmp
pusha
imul
stc
adc
movs
lods
or
jp
mov
adc
push
push
mov
repnz
scas
xor
xor
mov
pop
lods
add
xchg
xchg
ins
jnp
call
mov
push
xlat
xor
das
rcl
or
imul
fldcw
test
hlt
xchg
inc
dec
mov
push
xchg
pop
xchg
jmp
pop
das
(bad)
sub
mov
pop
or
pop
xchg
or
mov
pop
xor
int
test
add
pop
test
icebp
push
add
fistp
nop
jl
in
inc
jg
push
movs
xchg
dec
sbb
ror
in
lods
int3
xchg
cdq
mov
sub
cwde
push
mov
cmp
fcom
cmp
sub
cs
mov
cwde
arpl
in
imul
cmp
arpl
sbb
inc
jecxz
xor
cmp
and
adc
jl
dec
jecxz
sbb
xchg
adc
add
pop
inc
xor
jl
and
sub
popf
fidiv
lods
cdq
xchg
popf
xor
mul
in
adc
sub
imul
jl
(bad)
int3
or
retf
add
xor
stos
or
aaa
lahf
xor
adc
outs
pmulhw
mov
jmp
call
push
test
push
scas
fwait
dec
adc
sub
test
push
sahf
jno
mov
mov
sub
gs
aaa
js
mov
loope
aaa
test
test
push
adc
xor
or
cdq
dec
cwde
in
xor
pop
(bad)
rcr
fldl2t
fsub
xor
xchg
sbb
nop
push
xor
aam
pop
mov
fimul
popa
js
mov
cmp
mov
or
popf
shl
inc
pop
in
inc
adc
pop
xor
mov
inc
std
jb
xor
scas
mov
mov
call
mov
cmp
xchg
loopne
test
and
stc
mov
xor
and
in
pop
cmp
push
test
out
lea
mov
mov
fwait
dec
ds
imul
jp
sbb
sbb
imul
xor
cdq
data16
pushf
add
xchg
cmp
xor
test
jge
call
or
xor
sub
mov
jg
xchg
int
mov
fs
in
test
xchg
jle
or
jb
(bad)
imul
in
add
mov
inc
(bad)
add
sbb
sbb
adc
mov
add
(bad)
mov
pop
imul
or
add
add
jl
dec
repz
pop
adc
jmp
inc
or
pop
mov
inc
sbb
rcl
and
mov
scas
adc
pushf
test
cmp
xlat
es
imul
les
adc
push
add
xchg
test
cmp
jp
lsl
sub
add
push
mov
add
sub
jno
jl
jae
and
movs
test
jb
xchg
xor
or
daa
fbstp
mov
and
adc
add
add
xchg
clc
push
test
cmp
sbb
mov
push
add
mov
cdq
stos
div
inc
jecxz
out
retf
jno
stc
pop
in
dec
push
sbb
pop
daa
adc
das
lods
xchg
mov
xchg
xchg
push
mov
shl
mov
inc
cmp
mov
jb
cmp
xchg
cmp
aam
ret
dec
pop
sahf
hlt
int3
jnp
ss
sbb
mov
les
push
dec
cld
inc
(bad)
movs
addr16
iret
pop
arpl
popf
xchg
mov
mov
stos
imul
ins
mov
ja
add
jo
neg
ja
adc
push
es
sub
xor
lock
cmc
adc
add
movs
xor
push
sub
sbb
pusha
sti
fisubr
retf
cmp
mov
in
and
dec
sbb
mov
sbb
cmp
pop
movs
xor
xor
jne
pop
and
inc
leave
push
sbb
lahf
in
test
sti
sbb
retf
mov
jmp
cwde
cld
xchg
adc
sbb
cmp
fstp
ins
mov
inc
lods
mov
ja
inc
jbe
add
push
push
cmp
jg
mov
pusha
lahf
xchg
push
arpl
mov
push
mov
adc
adc
lidtd
int3
into
sti
mov
scas
cmp
sti
sti
fs
daa
mov
or
and
xor
push
xor
mov
scas
ret
ins
pop
movs
push
sbb
push
mov
and
cmp
pop
push
push
adc
movs
call
sar
pushf
pop
add
adc
mov
scas
push
adc
test
sahf
ficom
mov
pop
push
rcl
xor
mov
push
xor
into
sub
in
ja
mov
xlat
in
sbb
xchg
push
pop
inc
xchg
push
retf
pop
sub
or
sbb
retf
push
jo
xchg
push
adc
add
icebp
pop
cmp
into
or
cdq
add
inc
les
xchg
adc
in
add
jae
inc
loop
fimul
popa
stc
ins
stos
ss
por
arpl
xchg
push
and
sbb
pop
dec
push
sbb
lock
and
sti
push
sub
call
push
xchg
das
push
jnp
aam
add
jmp
xchg
mov
out
inc
mov
jmp
dec
outs
mov
out
jp
popf
fs
cmp
(bad)
xor
add
dec
ficomp
adc
cwde
int3
push
mov
in
ins
cdq
mov
nop
nop
xchg
leave
call
pop
movs
cmc
icebp
sub
or
retf
cld
nop
outs
xor
xchg
jl
dec
cld
or
mov
fs
cmp
push
push
xor
push
das
fnstsw
xor
add
mov
mov
cmps
mov
inc
sub
mov
dec
ds
sahf
or
jne
cmp
outs
pop
call
push
sub
jae
xchg
fwait
sbb
or
push
add
sub
fmul
dec
inc
out
aam
add
in
sbb
push
fisubr
sbb
mov
rcr
pop
(bad)
jmp
aad
and
fisubr
and
out
xchg
cmp
lods
push
mov
jnp
stos
pop
leave
sbb
fwait
retf
ficom
push
push
push
(bad)
neg
fsubr
arpl
inc
xor
push
adc
test
push
push
movs
dec
ins
icebp
cmp
add
pop
mov
(bad)
cld
addr16
xchg
icebp
pop
mov
xchg
jmp
jmp
cwde
mov
cmp
xchg
cwde
jle
lock
mov
popf
lock
call
in
sbb
add
pop
cdq
jl
xchg
enter
sar
imul
and
ror
lods
cmp
and
sub
ficom
mov
push
and
xchg
fcomi
add
fs
test
dec
add
fs
fdiv
int3
jo
mov
movs
push
mov
scas
jne
jecxz
xchg
fs
(bad)
div
pop
jmp
stos
jns
jo
xchg
or
loopne
dec
push
mov
cmp
push
mov
(bad)
or
out
xchg
jp
xchg
js
add
cmp
xchg
push
in
gs
mov
(bad)
pusha
adc
aam
pop
jb
or
ror
adc
pop
js
and
in
sahf
std
sbb
test
outs
jno
dec
xor
popf
pop
int
iret
mov
pop
gs
hlt
out
inc
add
clc
lods
loopne
xor
lods
pushf
pop
jp
sbb
das
retf
and
rcr
adc
xchg
aas
sbb
idiv
mov
xchg
pop
rcr
std
icebp
stos
adc
sbb
cdq
aam
inc
xor
push
(bad)
std
jo
xchg
inc
test
or
jae
adc
inc
ror
push
pop
movs
xchg
dec
pop
and
mov
xchg
hlt
cdq
adc
(bad)
mov
dec
fmul
jecxz
push
push
fcmovnb
retf
mov
jl
sahf
xchg
scas
ins
into
push
push
add
fiadd
sahf
mov
mov
jae
jbe
in
pop
dec
mov
cli
sbb
inc
jge
rol
mov
inc
in
pop
ret
les
repnz
cmp
loop
aad
ins
cli
out
fwait
add
xchg
aaa
jecxz
jbe
add
push
fcomp
rcl
or
jne
lahf
cli
xor
movs
repnz
dec
or
test
add
std
out
loopne
ret
mov
fild
sub
and
inc
sbb
mov
fimul
mov
lods
push
movs
fwait
adc
fcomp
inc
push
scas
inc
ins
inc
call
mov
js
mov
inc
aam
leave
cwde
popf
and
dec
in
jmp
inc
lahf
dec
pop
ins
pop
fwait
jae
dec
fcomp
cmp
in
in
or
push
rcr
inc
push
(bad)
pusha
cmp
mov
and
fcmovu
xor
mov
(bad)
dec
cwde
cmp
les
pop
fidivr
mov
ficomp
and
sbb
cmp
cmp
mov
rol
je
inc
dec
pop
int
sbb
inc
daa
xchg
push
fistp
imul
push
pusha
xchg
cmp
iret
mov
wbinvd
mov
sub
call
imul
cli
jle
cmp
lods
clc
dec
cmps
out
and
mov
push
mov
call
data16
sub
or
sub
or
stc
mov
loope
imul
add
cmp
lods
mov
rol
or
mov
mov
hlt
in
mov
arpl
test
pushf
sahf
pop
mov
cli
dec
mov
dec
xchg
push
cdq
pop
sub
pop
xor
sub
or
xchg
enter
in
(bad)
enter
out
pop
inc
xor
inc
and
popa
or
jae
or
or
aam
dec
mov
(bad)
jne
fiadd
push
ficom
pop
and
ror
xbegin
push
mov
xchg
lods
not
sbb
adc
push
mov
and
xor
dec
dec
push
adc
stos
pop
rol
sbb
and
add
(bad)
xor
fld
(bad)
into
aam
add
ror
jmp
pop
push
dec
call
sbb
aaa
mov
jnp
and
pop
xor
fidivr
pop
add
add
push
sar
add
mov
mov
add
lods
mov
nop
xor
dec
in
addr16
cmc
ja
adc
sub
mov
push
shl
add
stc
cmps
jmp
pop
and
fs
dec
stc
push
or
adc
mov
or
ins
shl
lds
and
xchg
push
or
imul
imul
sbb
in
push
psubusw
retf
xchg
lods
ss
or
sbb
shr
stos
aaa
add
js
sti
or
sbb
pushf
imul
hlt
ins
lock
push
int3
out
addr16
adc
jl
test
test
xor
repnz
or
or
dec
(bad)
fbstp
or
aas
addr16
leave
loopne
xchg
call
xchg
sbb
jecxz
stos
or
and
jo
cli
fsubr
mov
das
inc
mov
aas
mov
push
inc
xor
mov
xor
jb
jecxz
xchg
sub
ficomp
cmp
lods
ror
call
jae
and
inc
mov
inc
inc
mov
dec
push
js
jns
push
icebp
jbe
(bad)
movs
mov
sahf
xor
mov
into
int3
xor
pop
cs
dec
dec
add
retf
idiv
out
inc
call
int3
inc
fst
mov
jmp
sbb
push
retf
add
adc
mov
dec
cld
fidivr
arpl
cmp
daa
mov
movs
adc
xor
sub
clc
pop
scas
icebp
ja
push
mov
sbb
dec
or
pushf
push
int3
add
pop
push
jns
pop
mov
mov
mov
pusha
inc
int3
rcr
retf
int3
iret
nop
aad
cwde
sbb
pop
enter
addr16
xor
int3
mov
shr
aad
cld
push
pop
stc
mov
popf
adc
jb
push
fcomp
xchg
xchg
mov
icebp
or
xor
sbb
sub
mov
data16
add
jb
icebp
dec
mov
lods
sbb
sahf
pop
call
out
imul
fistp
gs
push
les
int3
les
test
addr16
push
loope
inc
push
fnstcw
jp
pop
sbb
inc
pop
fst
mov
xchg
rol
jp
xor
cmp
ss
and
cmp
stos
lds
ficomp
fistp
jp
push
jp
dec
mov
mov
bound
outs
int
xor
push
mov
fmul
fld
inc
and
icebp
dec
mov
push
pop
adc
jmp
jmp
lock
inc
mov
push
push
add
mov
das
or
aad
mov
add
push
scas
addr16
push
sub
into
cmc
push
push
shl
sbb
int3
inc
jmp
jbe
mov
(bad)
push
repz
cdq
sub
jp
(bad)
jns
add
jmp
sub
pop
and
xchg
fld
not
inc
aad
xchg
dec
(bad)
aam
and
in
jg
mov
movs
cli
rcr
retf
sbb
inc
mov
sbb
cmp
frstor
inc
in
and
mov
enter
jle
lds
inc
pop
ror
sbb
in
stos
aaa
adc
jp
cmp
mov
nop
adc
inc
xchg
adc
aaa
jle
adc
push
push
or
cli
add
into
or
adc
xor
in
xchg
out
sbb
pop
(bad)
push
add
(bad)
jl
adc
adc
(bad)
jp
xor
mov
jg
aas
sbb
out
pop
push
sahf
sub
xor
and
ins
pop
inc
in
or
cld
scas
inc
and
sub
int
in
into
and
js
js
out
cmp
test
jb
int3
push
test
ror
sub
les
lock
sbb
in
test
arpl
ins
adc
or
jp
add
stos
add
add
pushf
inc
sti
in
mov
and
sahf
xchg
jmp
pop
(bad)
pop
xor
int3
in
imul
js
jmp
and
icebp
loope
xchg
sub
mov
mov
rol
mov
rcl
scas
push
jno
mov
or
or
not
mul
(bad)
retf
cmp
mov
das
lock
fs
stc
(bad)
xor
ins
cdq
sbb
sub
movs
pop
addr16
jp
xor
mov
out
push
mov
push
pushf
sti
cmp
cmps
adc
scas
add
push
push
pop
push
test
mov
in
sbb
jb
sbb
xchg
sbb
or
cmps
out
cdq
mov
fst
push
sub
sbb
out
jecxz
and
fnstsw
test
xchg
jb
fidiv
push
in
in
int3
cwde
pop
add
add
pushf
push
in
arpl
xor
mov
imul
bswap
mov
add
sbb
mov
test
inc
enter
int
pop
pop
cdq
sbb
icebp
cs
xlat
and
or
(bad)
test
xlat
push
cli
adc
dec
pop
push
ds
sbb
xor
sbb
stos
test
cs
xchg
push
or
retf
int3
mov
fild
pop
ret
push
inc
cmp
mov
or
inc
dec
into
rcr
push
inc
push
mov
cmp
add
or
cld
push
pop
xor
and
fcomp
dec
dec
cmp
or
xchg
inc
int3
jns
retf
repnz
sub
sar
fwait
and
aaa
hlt
cmp
pop
xchg
nop
mov
jne
mov
mov
mov
add
sbb
ficomp
pop
pop
dec
xchg
push
xchg
and
xor
xor
xchg
push
cmp
adc
outs
fxrstor
cmp
fiadd
aam
mov
mov
push
adc
sub
das
ins
rcl
mov
jmp
pop
icebp
push
arpl
or
add
pop
aaa
jne
fsub
ficomp
push
add
pop
or
pop
loope
jmp
or
jmp
pop
sbb
addr16
mov
or
test
retf
pop
mov
mov
scas
cmp
sbb
ja
sub
pop
push
aad
push
scas
ins
xchg
inc
push
cs
aam
data16
inc
jne
repz
das
mov
cld
pop
bnd
adc
mov
jg
mov
sub
mov
in
xchg
les
inc
(bad)
cli
add
loop
in
ss
gs
movs
mov
lock
pop
out
push
pusha
ja
sbb
push
xchg
inc
fist
inc
scas
or
mov
ins
pop
cs
mov
pushf
xchg
(bad)
cmp
mov
sahf
and
jecxz
jmp
setge
cmp
out
cmp
push
xchg
cdq
cmp
add
lods
mov
dec
enter
inc
sahf
xor
call
jge
mov
cmp
sahf
popa
or
test
xchg
push
in
movs
or
sbb
dec
idiv
idiv
push
xor
sub
sbb
add
pop
inc
dec
sub
outs
xor
imul
or
jno
dec
jle
and
mov
sbb
xchg
sbb
inc
aad
cwde
jmp
sbb
push
in
int3
adc
mov
pop
cwde
not
cmp
adc
test
fidivr
fiadd
stos
push
cld
out
popf
push
xchg
xlat
inc
je
cmps
xor
jb
mov
xor
or
arpl
in
and
cld
pop
cmp
lds
cwde
not
pop
mov
add
mov
and
icebp
stos
outs
pop
jb
cwde
jo
div
mov
(bad)
sti
imul
ins
sub
jo
rcl
(bad)
xlat
fdivr
pop
xor
cwde
lods
inc
and
int
fadd
sub
sub
pushf
inc
xor
push
xor
adc
xchg
pop
arpl
push
cmp
push
dec
pop
sub
adc
ja
dec
jne
out
sbb
pop
icebp
call
add
or
aaa
jae
jne
sbb
fstp
cmp
bnd
es
test
mov
outs
xor
or
ds
dec
dec
xor
fcomp
faddp
cwde
aad
aam
adc
push
jbe
dec
arpl
mov
pop
jae
cwde
mov
add
jmp
dec
sahf
push
mov
xor
add
imul
mov
push
pop
mov
clc
cmc
fnstsw
or
inc
mov
repz
jae
stos
jnp
jge
scas
sub
push
lods
xor
dec
ret
dec
lods
dec
gs
add
std
cli
xchg
lods
call
push
jnp
gs
js
call
push
dec
jnp
xchg
mov
mov
stc
sar
cmp
cdq
fsubr
mov
outs
inc
inc
pop
mov
nop
pop
or
cvttps2pi
jbe
retf
add
or
inc
mov
cli
inc
(bad)
xchg
inc
(bad)
addr16
ins
jle
dec
xchg
ret
sbb
jo
pop
push
jae
jno
jnp
dec
imul
js
adc
imul
shr
lahf
add
pop
aas
xor
push
dec
mov
outs
and
sub
in
gs
outs
cwde
push
push
outs
imul
jbe
out
imul
movs
mov
mov
scas
jnp
sub
xchg
dec
xchg
add
mov
xchg
or
pop
dec
push
adc
pusha
dec
jno
out
(bad)
arpl
(bad)
mov
mov
jae
jmp
fdivr
xor
or
add
mov
push
in
sbb
add
xchg
mov
(bad)
xor
aas
push
cld
xchg
add
out
or
movs
sti
std
cmp
mov
and
push
jns
dec
jle
pop
pop
scas
sbb
sbb
xor
dec
jp
in
dec
scas
xor
jmp
pop
enter
in
push
int
or
xchg
sub
sbb
pop
pop
dec
aam
dec
outs
(bad)
ret
loop
xor
cli
add
or
loopne
clc
jmp
or
jmp
adc
ror
inc
pop
push
popa
pop
mov
xchg
adc
fimul
movs
shl
adc
rcl
or
inc
dec
enter
push
pop
gs
imul
pop
jnp
fwait
xchg
sbb
pop
enter
dec
sub
movs
clc
or
js
fnop
jge
pop
pop
or
sub
dec
(bad)
or
add
lods
stos
xor
adc
adc
mov
sbb
xchg
or
sub
add
in
imul
xor
sbb
je
scas
or
lods
mov
dec
dec
sub
sbb
pop
mov
imul
cld
jmp
xor
and
add
mov
and
std
inc
inc
add
(bad)
adc
dec
and
add
loop
jle
inc
cmp
dec
lods
sub
jnp
inc
dec
sub
stos
pop
popa
push
mov
mov
je
jno
jns
mov
add
push
xor
jmp
inc
jmp
outs
in
pushf
dec
push
imul
sub
daa
jb
test
pushf
cmp
dec
dec
xor
pusha
jo
sub
and
and
scas
and
ss
push
inc
jnp
movs
mov
dec
add
lods
sbb
xchg
lods
dec
add
gs
popa
adc
pop
(bad)
stc
xchg
xchg
test
loop
dec
jnp
fcomip
xlat
mov
test
pop
add
out
push
xchg
lea
jmp
sti
cmp
inc
adc
adc
movs
inc
fild
xchg
xchg
sub
pop
ins
add
dec
cwde
jmp
inc
mov
inc
and
mov
mov
jae
mov
es
add
pop
mov
dec
out
nop
cwde
sbb
push
xor
inc
pop
pop
pop
ror
loopne
enter
pop
rol
jecxz
lock
adc
adc
xchg
jmp
in
push
dec
aas
loope
xor
or
add
sub
and
sub
fnsave
dec
jge
dec
not
test
sub
je
in
sbb
adc
mov
adc
mov
dec
sub
cmc
mov
popf
add
ss
ins
or
add
mov
or
or
pop
test
cmp
cmc
(bad)
jmp
sub
push
xchg
mov
test
loopne
xchg
push
or
aam
adc
push
sub
movs
mov
(bad)
cmp
(bad)
scas
(bad)
mov
fdivr
xchg
cmp
mov
sbb
test
rol
pop
cs
jp
xchg
jmp
inc
add
sbb
imul
and
jge
cld
test
cld
(bad)
mov
jb
in
loopne
xchg
ret
cmp
mov
jnp
adc
aaa
adc
push
stos
or
or
cli
or
xor
lods
cli
mov
sub
aas
dec
jle
cmc
xor
and
in
push
pop
dec
adc
dec
sbb
xor
or
jmp
push
adc
jg
pop
repz
pop
adc
ins
mov
inc
rcr
pushf
add
mov
jae
in
adc
sbb
push
pusha
dec
in
cvtps2pd
or
test
sar
sub
in
sbb
imul
pop
jmp
in
sub
test
sub
out
sub
sbb
out
test
les
aad
sub
push
push
shr
ror
pop
cmp
pop
iret
pushf
(bad)
fadd
push
lods
pop
add
adc
cmp
dec
jle
cmps
shl
cmp
ret
pushf
test
inc
push
adc
mov
pop
cmp
adc
in
out
add
cmp
sahf
sub
pop
push
add
loopne
fadd
dec
stos
inc
ins
or
arpl
jp
cmp
imul
pushf
cli
mov
ficomp
(bad)
jmp
push
in
int
enter
or
adc
(bad)
mov
add
je
sub
xchg
adc
es
xchg
repnz
sbb
push
outs
sub
xchg
fs
in
inc
sbb
mov
mov
and
sbb
xchg
outs
rol
xor
lea
sbb
push
sub
in
icebp
sub
clc
inc
cs
data16
and
icebp
in
mov
ss
bound
addr16
into
pop
lock
or
test
push
lods
scas
test
xor
push
inc
int3
loopne
aad
jp
aas
lahf
call
(bad)
and
jo
inc
lahf
cwde
or
xchg
std
add
sbb
pop
jo
xor
arpl
test
or
pop
and
outs
sub
mov
sub
inc
bound
jne
mov
pop
in
pop
xchg
daa
sbb
pop
jmp
and
repnz
icebp
xchg
imul
in
test
xchg
push
outs
sti
out
mov
loopne
cmps
jo
imul
(bad)
jge
add
clc
mov
ins
push
loope
(bad)
sbb
addr16
pop
fcmove
xchg
test
xchg
inc
push
mov
jg
or
leave
jo
cmp
inc
jecxz
cmp
dec
dec
xor
mov
cdq
ds
shr
inc
mov
out
pop
icebp
xor
cmps
cs
dec
jne
cwde
scas
aaa
adc
push
adc
xchg
mov
inc
dec
test
sahf
lahf
inc
add
int3
jno
mov
rcr
pop
and
popa
aaa
out
push
outs
pop
cmp
and
arpl
cmps
arpl
addr16
retf
pop
xchg
cmp
inc
ret
int3
lea
push
sbb
push
das
pop
ret
gs
nop
ficom
or
mov
add
js
push
icebp
aad
mov
or
mov
add
fisub
movs
jo
ins
or
(bad)
add
xchg
mov
xor
push
pop
rcr
cmp
test
cdq
cmps
mov
sti
push
or
xchg
aas
(bad)
popf
fild
frstor
xchg
stos
mov
or
add
adc
inc
adc
ins
in
mov
bswap
inc
xchg
and
mov
dec
mov
mov
fsubr
jle
sub
add
add
out
mov
in
inc
inc
sbb
inc
push
mov
pop
sbb
pop
cmps
inc
mov
push
pop
ror
out
inc
jne
mov
pop
adc
sub
pcmpgtw
pop
fidiv
xor
add
mov
or
movs
mov
pop
push
and
scas
cwde
icebp
loop
cli
mov
xor
xchg
push
idiv
daa
out
xchg
(bad)
in
and
sub
push
or
add
push
adc
popa
adc
movs
outs
add
jae
xchg
cmps
cs
sbb
cmp
mov
out
pop
movs
push
mov
sub
push
out
pop
sub
cmp
mov
cmp
push
shr
into
pop
inc
jecxz
push
sbb
lock
ud0
add
xor
imul
push
sub
xchg
in
or
mov
jae
xor
push
and
lods
cmp
push
dec
dec
sub
mov
mov
mov
cmp
loop
aam
arpl
mov
cmc
push
std
jb
cs
jecxz
inc
in
test
jl
in
not
sub
addr16
mov
leave
retf
xor
in
push
aad
jmp
mov
pop
cmp
leave
sbb
add
cmp
int
sub
push
je
cmp
mov
fcomp
cs
dec
pop
xor
jp
imul
xchg
popa
xor
jae
call
dec
mov
jg
adc
call
xor
cld
and
mulss
mov
and
add
lock
mov
and
ins
and
dec
data16
test
jo
xor
xlat
adc
pop
loop
fs
fwait
cmp
adc
and
inc
and
xchg
mov
mov
pop
pop
mov
jp
loopne
sub
repz
pop
add
push
or
je
test
pusha
add
add
mov
pop
sub
xchg
cmp
add
daa
int3
xor
mov
fisttp
add
call
cmp
jmp
pusha
push
lods
jmp
mov
mov
and
cmp
pop
sub
das
sbb
sbb
js
push
sbb
xlat
hlt
add
or
data16
inc
inc
sub
inc
mov
test
dec
mov
push
pop
retf
fstp
mov
push
sub
scas
or
and
ins
or
mov
sbb
movs
jmp
not
or
sti
mov
push
scas
mov
mov
adc
pop
add
pop
mov
pop
ins
mov
dec
mov
xchg
leave
dec
retf
fwait
add
shl
sbb
js
mov
lods
sbb
rcr
dec
jle
lds
sub
mov
push
cmps
add
clc
dec
add
adc
aam
mov
out
js
loop
enter
or
or
sbb
cmp
or
out
push
push
mov
fcmovne
xchg
pop
mov
retf
push
fsub
hlt
imul
mov
pop
pop
cdq
fadd
inc
aad
dec
cld
popa
xor
add
sub
(bad)
mov
pop
(bad)
out
push
mov
retf
(bad)
aas
ss
mov
cli
fsub
sti
or
and
lock
push
or
add
and
xor
sbb
js
or
xor
inc
mov
fwait
gs
cmp
(bad)
push
mov
add
lock
cwde
xlat
add
or
out
pop
nop
into
xchg
add
sub
sub
rcl
fld
loopne
add
jmp
xchg
aad
add
adc
inc
jge
aad
sbb
cld
cmp
lods
add
ds
jo
adc
push
inc
mov
test
pop
mov
push
cwde
pop
ja
xor
gs
cmp
add
inc
mov
pop
mov
and
xor
jnp
and
sub
pop
inc
ja
mov
aas
inc
sbb
lods
dec
neg
mov
cwde
add
ror
xchg
les
js
pop
lahf
push
mov
inc
sbb
sub
pop
mov
jne
icebp
pop
test
in
jp
sub
inc
adc
xor
lds
mov
or
xchg
xchg
sbb
dec
sbb
and
push
mov
les
jne
push
repz
dec
mov
push
xor
cli
bound
or
cmp
sbb
or
js
test
cmps
sahf
push
test
mov
jp
cmp
fldenv
add
lods
sbb
imul
cmp
pop
test
xchg
pop
ins
in
adc
pop
xchg
pop
xchg
test
mov
out
or
fwait
sbb
sbb
push
pushf
and
jl
push
or
pushf
pop
addr16
cmp
pop
sbb
dec
call
mov
inc
push
loope
cmp
dec
or
lock
fistp
lods
mov
mov
xchg
add
and
mov
hlt
pop
push
pop
add
and
mov
mov
call
in
dec
hlt
in
scas
mov
push
push
xor
mov
add
dec
jmp
inc
js
add
pop
cld
loope
push
sbb
jmp
in
sbb
dec
inc
scas
out
(bad)
dec
adc
add
lahf
and
jp
mov
jbe
adc
add
pusha
and
cmps
fbstp
or
xor
and
icebp
outs
inc
or
imul
rol
mov
jae
add
push
adc
out
sbb
out
pusha
push
cmps
push
xor
add
rcl
or
movs
lahf
out
mov
dec
xchg
sbb
popa
ror
shl
test
dec
int3
rcl
xor
add
mov
sub
sahf
pop
xor
xchg
popf
call
aam
mov
mov
pop
sbb
jb
test
cmp
arpl
in
sbb
jmp
jl
aad
xor
or
mov
add
in
xchg
pop
aam
fs
les
inc
fcom
outs
pop
pop
loop
shr
xlat
cmp
xor
lods
rol
jmp
push
push
aam
jl
hlt
ret
sub
aas
js
cdq
sub
fbstp
pop
fmul
outs
or
push
pop
in
pcmpeqw
dec
clc
inc
adc
call
xor
aas
mov
xor
dec
je
push
dec
jmp
test
test
scas
add
xor
xlat
sbb
inc
les
xor
pop
sbb
push
mov
sbb
sub
loopne
jne
adc
test
push
test
sbb
dec
jmp
pop
shl
jno
shl
sub
outs
jp
jl
dec
in
push
add
adc
and
jo
in
add
push
loop
jne
sti
jno
loope
stos
ret
loopne
xchg
xor
jle
jns
dec
pop
jp
dec
jo
pop
loope
aaa
std
rcl
sbb
pop
pop
or
inc
loope
lods
inc
jmp
shl
push
cmp
add
push
mov
enter
dec
mov
rcr
test
dec
push
js
xchg
mov
aad
mov
jnp
adc
jl
pop
clc
retf
mov
imul
sub
sti
mov
lock
xchg
(bad)
jmp
mov
sub
or
adc
sbb
adc
adc
icebp
lfs
popa
daa
or
je
sub
sub
pop
into
and
ds
les
imul
pop
mov
pop
ss
jp
and
mov
push
aam
jmp
add
and
jo
sub
aam
jmp
fwait
or
cwde
sub
cmp
push
clc
mov
rcr
jmp
sbb
jmp
sbb
icebp
fist
adc
sbb
add
adc
xor
jo
push
cmp
nop
cld
cs
retf
mov
les
add
xor
jne
push
xor
jle
pop
mov
push
mov
jns
in
pop
cmp
mov
mov
sub
(bad)
jmp
and
out
xor
jmp
xchg
test
push
nop
rcr
mov
add
adc
and
sub
inc
jmp
cs
ss
ds
pop
and
inc
push
sbb
inc
jno
ja
imul
lods
pop
sbb
cmp
dec
mov
outs
nop
repnz
stos
mov
adc
clc
in
mov
sbb
xor
(bad)
push
ficom
jb
push
and
add
cmp
ins
add
or
add
pop
add
adc
add
adc
(bad)
dec
addr16
dec
mov
loopne
push
add
pop
les
cli
adc
mul
pop
cmp
lods
fld
int3
xor
dec
adc
jns
xor
adc
fs
lock
add
aaa
sub
push
ret
loope
or
dec
dec
jno
xchg
add
(bad)
pop
cli
sbb
in
mov
mov
adc
mov
pop
xchg
pop
dec
test
adc
cmp
sub
push
cmc
sub
test
or
or
lods
es
cld
sub
or
pop
ins
push
xchg
sbb
inc
scas
aaa
or
pop
aam
push
test
retf
and
xchg
arpl
or
cmp
ret
sub
or
das
ins
mov
popf
sbb
sbb
shl
or
push
xor
add
add
pop
mov
outs
outs
les
popf
jbe
sub
jae
jl
outs
jge
add
mov
adc
or
sub
jmp
dec
xor
pop
pop
pop
in
xchg
aam
mov
mov
jmp
mov
xor
cmp
aaa
lods
xor
cld
xor
cmp
sbb
adc
xchg
mov
mov
dec
in
add
mov
jno
cli
ds
jno
inc
cmp
lock
sbb
cwde
ins
inc
xor
pop
add
addr16
movs
shl
jbe
lods
xchg
sbb
add
mov
nop
mov
xor
push
pop
int
ins
sub
jmp
cmp
push
aaa
rcl
mov
xor
lods
inc
pop
adc
je
jmp
sbb
(bad)
(bad)
je
pop
inc
inc
call
shr
stos
push
dec
retf
mov
mov
jecxz
mov
or
pushf
pushf
mov
ret
pop
lea
push
jae
cmp
cmp
adc
cmovl
js
stos
xchg
sub
sti
addr16
pop
or
xlat
dec
gs
sub
sub
push
pop
test
push
cmps
ds
call
push
scas
add
dec
push
test
dec
rcl
test
inc
adc
clc
mov
cmp
ds
jl
pop
ins
aam
xchg
adc
and
jp
xor
mov
test
mov
out
fadd
divps
push
xor
add
sbb
pop
jmp
push
sub
add
or
pop
mov
add
ja
sub
pop
jmp
pop
ds
dec
pop
retf
or
outs
jmp
adc
add
cmp
dec
retf
push
outs
inc
xchg
aaa
push
jne
fidiv
push
xchg
stos
add
movs
call
out
js
push
or
lea
pop
push
xchg
jp
ins
ja
mov
sbb
test
cmp
cmp
movs
sub
cmp
push
or
test
and
adc
sub
cs
push
pop
pop
pop
push
pop
sub
push
push
dec
push
inc
inc
adc
dec
dec
dec
inc
dec
pop
pop
aaa
pop
inc
loopne
clc
cld
in
sub
int3
sub
sbb
sub
adc
cli
popf
xor
into
fdivrp
mov
fadd
int3
ja
repz
cmps
clc
push
xor
pop
aaa
xchg
mov
jmp
add
push
mov
sti
push
mov
jno
or
pop
push
cmp
mov
fist
outs
test
sbb
xor
fsubr
push
cmp
sub
ret
ins
(bad)
xor
push
neg
push
pop
rol
mov
and
dec
lods
push
(bad)
pop
dec
add
in
push
dec
pop
add
int3
inc
cmp
mov
mov
xchg
inc
dec
lds
and
aas
out
fstp
or
sahf
xor
sbb
aaa
push
cmc
js
lods
xor
xor
sbb
jo
mov
add
xor
sub
adc
fwait
push
retf
out
sub
aad
add
sbb
adc
in
sbb
mov
retf
fcom
aas
fnstcw
pop
out
leave
xchg
or
lds
sbb
or
lods
ins
mov
je
fstp
mov
test
icebp
pusha
sbb
add
xchg
ja
sub
xchg
in
jbe
jns
cmps
xor
or
lods
int3
mov
mov
test
xor
cmc
xchg
pop
cmp
fisubr
cmp
mov
push
adc
jmp
and
push
cs
andps
mov
xor
pop
push
fs
cwde
or
es
retf
add
lahf
and
pop
fcmove
xor
mov
cld
push
cwde
cmp
and
call
lea
mov
push
mov
or
leave
fcmovne
sbb
les
xchg
sub
and
retf
inc
pop
cs
xor
imul
popf
jnp
icebp
aas
faddp
xchg
mov
pop
aaa
movs
loope
cli
pop
leave
jecxz
and
stc
in
jmp
shl
fstp
push
jle
push
loop
stos
paddb
shl
cs
cmp
jle
dec
adc
icebp
(bad)
daa
mov
push
sbb
push
icebp
iret
pop
dec
xor
add
sub
add
out
xchg
xchg
icebp
fwait
mov
mov
in
cli
fwait
xor
mov
in
mov
cmp
mov
rcl
fcom
xor
cmp
popf
fnstsw
call
ds
jmp
jb
push
loop
in
sub
sbb
xchg
rol
xor
ss
add
aaa
loop
aas
dec
mov
jmp
mov
in
sub
jmp
cmc
jae
leave
mov
cwde
inc
fptan
or
imul
push
jno
cmp
pop
pop
shr
cwde
mov
mov
push
push
xchg
mov
pop
add
sbb
fidivr
inc
out
sbb
ja
or
sti
xchg
sar
lods
std
pop
sbb
dec
adc
(bad)
rcr
mov
adc
ds
push
addr16
das
xchg
es
in
xor
jmp
in
icebp
mov
aas
in
add
push
pushf
push
call
push
test
xor
sbb
adc
sub
xor
adc
pop
cs
jge
cmp
in
sub
sbb
inc
xchg
dec
sbb
fstp
xor
or
idiv
inc
lock
clc
sbb
repnz
jnp
test
inc
lods
or
jne
das
shl
inc
add
retf
sbb
das
xor
push
add
(bad)
mov
xchg
pop
xchg
dec
sbb
call
pusha
cwde
pop
fcmovb
sub
test
inc
dec
js
mov
push
jns
imul
ins
xchg
add
mov
dec
mov
pop
cmp
push
call
cmp
cmp
xchg
mov
jne
pop
dec
cmp
mov
push
(bad)
adc
inc
pusha
fwait
lods
pop
pop
xchg
call
js
and
jl
pop
and
popa
sti
les
add
movs
sahf
push
jo
xchg
mov
fisub
js
sub
arpl
push
mov
mov
les
ins
sub
inc
adc
sub
in
mov
mov
or
add
sbb
pusha
out
push
add
pop
xchg
ins
mov
add
add
dec
jl
xchg
and
ins
pushf
fwait
(bad)
cmp
(bad)
mov
dec
xor
push
adc
or
test
push
mov
xchg
int3
mov
pop
or
mov
or
adc
sti
cmp
prefetch
int3
repnz
and
mov
ja
or
ja
mov
js
cmp
mov
jg
hlt
nop
push
pop
in
pop
retf
jae
test
xor
or
add
adc
adc
out
gs
adc
sbb
and
push
mov
inc
pop
lods
push
push
dec
js
rol
pop
cdq
mov
out
mov
inc
aas
out
pop
xor
pop
mov
adc
xchg
repnz
jns
xor
mov
jmp
aad
ror
sub
xchg
jne
icebp
jne
lods
cli
push
mov
cmp
rcl
int
xchg
push
push
sbb
aaa
les
cmp
inc
cdq
std
in
and
and
xor
mov
inc
jle
fimul
or
sub
sbb
pop
fcmove
in
jne
sbb
xor
add
jle
inc
mov
push
loopne
dec
inc
std
mov
inc
loopne
fisubr
xchg
inc
es
jns
sbb
xchg
pop
stc
xchg
mov
and
scas
sbb
adc
cwde
enter
call
jne
sub
das
jmp
jmp
enter
push
pusha
xor
xor
in
fldenv
(bad)
loopne
dec
lods
ror
sub
out
addr16
(bad)
int
rcr
mov
out
xor
add
lods
add
xor
jecxz
daa
add
or
cdq
adc
xchg
retf
dec
push
pop
ins
push
cmp
mov
iret
mov
shl
sub
mov
test
mov
mov
and
je
pop
call
and
sbb
xchg
das
addr16
adc
adc
xor
xor
mov
mov
popf
inc
mov
cwde
movs
ds
pop
pop
xchg
sahf
inc
pop
adc
adc
(bad)
xor
inc
std
pusha
(bad)
mov
dec
inc
lods
cmp
jge
sbb
shr
sub
pop
and
cmp
(bad)
pop
test
enter
shl
ins
adc
cmp
ss
sbb
icebp
enter
in
cld
xor
and
cli
xchg
pop
mov
add
xchg
cmp
sbb
cmp
in
xchg
xchg
fcom
ja
cmp
pusha
jg
sbb
sub
push
sbb
cdq
ror
add
imul
pop
cli
fisttp
xlat
addr16
push
jo
xor
mov
test
add
xchg
adc
jne
clc
ja
mov
in
cmp
adc
push
sub
int3
add
or
pop
pop
sub
pop
pushf
mov
push
aaa
ds
add
push
stos
or
sbb
jbe
inc
adc
lods
adc
int3
stos
push
adc
push
add
inc
fsub
ret
jmp
in
cs
pop
mov
inc
inc
xor
xor
repz
cmp
das
pop
call
cwde
or
sub
scas
movs
adc
out
pop
add
addr16
xor
dec
and
mov
or
aam
imul
xchg
fisubr
jmp
je
sbb
int3
in
jbe
shr
jl
int3
xchg
dec
arpl
mov
sbb
or
pop
and
popa
push
pop
mov
push
test
popf
fdiv
outs
fmulp
adc
retf
mov
adc
jo
jmp
(bad)
cmp
sbb
add
mov
inc
fst
jae
jo
mov
adc
pop
pop
fcomp
mov
add
sbb
adc
adc
dec
xchg
ror
dec
sub
sub
jo
cmp
jno
test
add
pop
pop
inc
or
icebp
in
mov
and
cwde
aas
jne
mov
push
or
push
movs
fwait
xor
push
pop
sub
and
xor
pop
adc
and
imul
cmp
inc
jmp
jge
outs
adc
sbb
addr16
inc
mov
cdq
popa
sub
je
cmp
sbb
inc
das
sbb
pop
jmp
pop
and
xor
fild
and
mov
out
push
js
push
stos
les
fprem
cmp
mov
sbb
adc
das
repnz
sbb
loopne
into
ret
aam
addr16
clc
and
cmp
fwait
push
ss
(bad)
sub
jecxz
jns
out
scas
addr16
cdq
xor
adc
add
int
jae
push
test
fbld
repz
pop
aaa
das
xchg
pusha
adc
cmp
pop
loopne
add
or
or
mov
push
or
and
ja
add
arpl
adc
(bad)
pop
sub
mov
cdq
clc
xchg
and
stos
push
movs
push
pop
adc
mov
cmp
xchg
retf
adc
and
mov
adc
or
jl
mov
(bad)
adc
fld
inc
cmp
das
xchg
inc
mov
pop
xor
xor
or
aad
lods
(bad)
or
pop
sbb
adc
add
pop
movs
jno
push
add
push
sub
int
pusha
in
add
shr
or
mov
(bad)
or
xchg
pushf
bound
or
pop
pop
xchg
cs
and
in
jno
popa
imul
inc
push
mov
in
or
in
fst
push
or
sub
lods
ss
in
inc
mov
in
mov
pop
sub
out
xor
push
mov
push
pop
dec
sbb
in
pop
cld
loopne
fidiv
test
fsqrt
test
sbb
inc
dec
rcl
push
mov
or
jb
int3
or
fwait
mov
inc
gs
clc
mov
loope
lea
test
push
mov
or
test
cmp
lock
sbb
ror
repz
add
xor
retf
dec
nop
sbb
cmp
shl
cmp
pop
lods
xor
mov
mov
fistp
pop
xchg
pop
inc
(bad)
cmp
cwde
push
aaa
daa
adc
xchg
push
test
loope
aad
retf
stos
daa
data16
inc
cmp
les
xor
pop
or
ja
test
cmp
push
scas
sar
adc
aad
xor
sbb
in
inc
or
and
adc
addr16
pop
sub
jmp
xlat
adc
or
mov
or
push
xor
fld
mov
dec
stos
push
dec
mov
dec
jmp
sbb
xchg
pushf
jmp
mov
mov
sub
mov
pop
cmc
mov
sar
pop
or
test
mov
imul
adc
(bad)
pushf
xchg
pushf
call
rol
or
in
test
sub
stos
mov
rol
add
jb
call
or
pop
add
int3
lods
push
ror
clc
jmp
in
xor
sub
push
shl
mov
(bad)
jl
fadd
mov
sbb
cdq
mov
mov
arpl
and
scas
test
dec
xchg
adc
jp
sub
int3
cmp
or
add
xor
xchg
hlt
icebp
adc
or
fdivr
test
lods
test
xor
pop
movs
test
mov
push
pop
jmp
mov
test
jns
pop
pushf
xchg
mov
add
pop
dec
adc
pop
or
ja
sub
in
cmp
or
psllw
mov
adc
mov
sub
mov
in
pop
adc
mov
outs
xchg
jmp
ficom
in
test
mov
fmul
mov
or
mov
or
xor
ins
pop
(bad)
in
and
pop
dec
nop
mov
pop
inc
outs
cwde
cwde
sbb
mov
cmp
and
adc
add
lods
mov
dec
adc
icebp
cmps
out
adc
push
add
mov
lds
jbe
or
xor
fcom
or
and
mov
or
jl
popa
test
dec
jl
mov
xor
in
inc
rcl
and
loop
in
retf
jmp
pop
push
jno
add
sbb
hlt
pushf
icebp
xor
es
movs
xor
inc
lods
inc
jno
(bad)
mov
retf
jo
lea
xchg
jne
jb
out
dec
mov
pop
test
adc
jo
sahf
cmp
mov
inc
outs
mov
add
xor
(bad)
pop
retf
repz
fist
and
sbb
neg
repnz
sbb
adc
xor
xor
adc
sbb
or
pop
scas
or
outs
pushf
push
sbb
mov
xor
and
and
stos
xor
movs
cmp
mov
movs
enter
push
push
mov
fsub
lods
xor
mov
shl
push
push
xchg
cli
adc
pop
xor
mov
xchg
(bad)
pop
jns
test
xor
mov
icebp
sbb
or
dec
add
sub
fwait
xlat
xor
mov
ss
ds
in
push
mov
iret
pop
inc
jne
dec
lods
addr16
cmp
arpl
push
or
or
add
xorps
push
add
xchg
fcomp
fcmovnbe
cmp
popf
std
sbb
cdq
lods
je
sbb
test
pop
and
movlps
ins
xchg
sub
mov
and
(bad)
jl
xor
dec
push
aaa
iret
sbb
ss
(bad)
sub
sub
test
jp
mov
or
xchg
or
imul
push
mov
sbb
fidivr
inc
aas
inc
fcmove
fwait
xor
ret
push
in
mov
mov
sub
mov
(bad)
cmp
sbb
dec
mov
adc
std
inc
enter
xchg
xor
push
inc
fmul
les
mov
inc
in
shr
popf
iret
bound
push
in
sub
mov
outs
xor
xchg
icebp
imul
push
test
es
adc
add
inc
test
test
stos
adc
sahf
pop
xor
out
iret
(bad)
mov
pop
stc
popa
add
sbb
loope
inc
call
stos
call
inc
jo
mov
adc
inc
ins
xchg
mov
dec
mov
mov
xchg
mov
sbb
push
sub
cli
(bad)
jmp
adc
std
test
popf
mov
movs
add
jmp
inc
in
or
in
scas
call
jmp
pop
call
int3
mov
ins
sub
adc
xchg
fld
sbb
inc
and
outs
ret
pop
cmps
xchg
retf
sbb
push
dec
pop
retf
(bad)
cmp
nop
jne
push
and
fsub
xor
lods
pop
add
xchg
out
mov
mov
je
pop
lods
inc
sbb
or
or
adc
push
pushf
out
pop
dec
sub
xor
xchg
pop
ins
and
clc
icebp
push
sub
cdq
or
add
lods
add
mov
aam
xchg
adc
clc
cmp
enter
out
xor
pop
mov
xor
mov
mov
fdivr
jb
or
pop
mov
ins
mov
sbb
mov
cmp
lods
mov
int3
push
adc
xchg
mov
test
les
or
inc
or
test
sub
xchg
imul
sbb
enter
xchg
mov
xchg
push
ins
stos
je
addr16
imul
das
outs
mov
fisttp
mov
call
sbb
inc
dec
mov
pop
movs
push
jmp
mov
arpl
xor
arpl
pop
dec
push
or
dec
pop
fdiv
leave
outs
sti
pop
sub
pop
test
mov
push
movs
lock
repz
adc
scas
ins
xor
mov
or
dec
cdq
bound
push
pop
xor
push
xor
and
ficomp
push
mov
popf
inc
bnd
daa
xchg
xor
(bad)
bound
add
jmp
int3
push
bound
dec
adc
rol
shr
add
call
push
mov
js
pop
adc
xchg
bound
shl
and
mov
pop
cmp
ja
dec
push
shl
call
arpl
lods
es
or
mov
div
pop
pop
xchg
inc
mov
aam
in
imul
push
cmps
pop
stos
cmc
xor
push
ja
stc
shl
hlt
sbb
dec
push
mov
int3
mov
cmc
cmps
fisttp
mov
mov
xchg
pop
imul
push
ja
pop
push
xchg
stos
dec
clc
xlat
aam
or
lea
cmp
aaa
icebp
aaa
mov
sbb
xchg
sbb
push
stos
or
repnz
and
int3
mov
mov
cli
addr16
mov
jmp
gs
leave
nop
jmp
add
and
jns
sub
cmps
mov
in
scas
outs
inc
loop
clc
jmp
and
mov
repnz
add
js
inc
call
add
xor
hlt
sub
pop
mov
sbb
and
inc
cmp
ins
scas
lods
xchg
mov
mov
out
push
mov
mov
mov
ss
cld
xchg
jl
sbb
icebp
add
dec
adc
jo
sahf
pop
fcmovne
or
pop
imul
adc
inc
mov
cmp
jae
scas
cli
or
inc
xchg
pop
ins
inc
cs
ins
cmp
xor
stos
in
mov
stos
xchg
jp
mov
in
push
dec
bound
jp
scas
pop
jp
icebp
sbb
mov
xchg
movs
loope
in
sub
mov
fld
sbb
fiadd
imul
out
aad
scas
daa
add
ins
xor
fsub
int
dec
add
mov
imul
hlt
in
ins
xchg
movs
(bad)
xor
jl
inc
or
jl
adc
lods
fisubr
(bad)
cli
dec
cmp
and
out
ins
dec
pop
ins
test
xchg
jl
mov
stos
cmps
mov
ins
jg
pop
xor
cwde
cmp
sti
push
push
dec
fimul
ret
sub
(bad)
in
lods
stos
inc
retf
popf
movs
xlat
sbb
xor
add
add
test
jne
jno
fsubr
sbb
jne
jecxz
movs
adc
or
pop
push
xchg
cmp
or
les
sbb
dec
cli
bound
jne
ins
pop
ins
fnstenv
clc
mov
test
pushf
mov
pop
sbb
adc
test
pop
sbb
ins
jnp
fs
xchg
inc
dec
jns
repz
mov
imul
pusha
pushf
push
inc
in
mov
cdq
mov
cmp
addr16
dec
pop
in
stos
sub
mov
icebp
cwde
and
fdivr
jne
repnz
pop
adc
out
jmp
lea
iret
fistp
adc
jno
ficom
hlt
xchg
popf
xlat
mov
mov
ins
data16
std
sub
cmp
mov
mov
push
cmp
mov
fcom
bnd
add
sbb
test
es
mov
scas
icebp
sbb
fist
mov
dec
dec
xor
out
popf
inc
push
in
push
call
mov
push
pop
sub
pop
cwde
and
mov
jecxz
or
retf
cmps
or
das
jae
cwde
nop
jno
fnstcw
aas
push
pop
mov
adc
mov
shl
mov
test
in
pushf
sbb
push
bound
mov
popa
pop
mov
push
jg
ins
int3
loope
ds
cli
mov
xor
pop
sar
fdivr
icebp
add
in
or
call
retf
dec
in
mov
icebp
sbb
adc
fld
pop
xchg
inc
(bad)
icebp
adc
aaa
sbb
sti
dec
and
pop
sub
fldenv
pushf
aam
aas
fmul
push
inc
dec
(bad)
mov
adc
int3
test
loope
or
and
imul
pop
retf
push
aas
xchg
or
clc
ret
aaa
arpl
inc
add
push
shl
adc
(bad)
adc
sbb
movs
ins
sbb
int3
pop
ror
into
repz
popa
and
sub
and
imul
cmp
xchg
in
call
adc
sbb
adc
mov
mov
int3
aam
popf
pusha
mov
inc
retf
mov
call
inc
mov
test
out
inc
xchg
es
adc
repz
test
clc
lods
loopne
mov
cmp
inc
cmp
das
xchg
or
push
(bad)
js
inc
ret
jb
ss
cld
ret
jmp
popa
inc
pop
pop
cmps
ins
jne
jmp
sbb
(bad)
xor
dec
push
fwait
cli
loopne
push
xchg
imul
push
pop
lock
loopne
sbb
pop
fsub
mov
fnstsw
or
jmp
fs
inc
jmp
xor
xchg
or
div
repnz
gs
(bad)
sbb
or
fs
or
mov
jmp
jecxz
pop
js
sbb
jnp
shr
cwde
std
nop
fadd
sahf
sub
addr16
ja
test
ins
ror
retf
xor
cli
jmp
add
lods
rcr
and
sbb
stos
dec
sbb
jge
cmp
jae
cli
cld
jle
cmps
jmp
pushf
sbb
test
sbb
movs
nop
loope
jne
jl
pop
out
dec
xor
adc
imul
and
jle
and
aaa
inc
addr16
push
outs
cdq
push
push
icebp
mov
xor
sbb
sbb
shl
or
push
hlt
pop
sub
loop
fcmovb
dec
std
sub
arpl
jne
je
jp
add
ins
xor
mov
add
adc
imul
aas
xor
push
addr16
pop
cmp
dec
sub
xor
add
sti
mov
aaa
cmps
adc
push
xor
push
in
mov
out
or
cmp
call
or
es
sub
ds
inc
mov
push
inc
fsubr
mov
sub
aas
mov
repnz
les
sar
clc
pop
sub
sti
lahf
inc
or
sub
lods
fnstenv
mov
call
das
outs
mov
loop
cmps
es
nop
aas
les
lods
jbe
push
mov
enter
in
fdiv
int3
sti
pop
dec
add
dec
hlt
sbb
mov
jge
les
push
adc
dec
inc
stos
(bad)
lock
aad
scas
and
int3
enter
or
sub
scas
(bad)
push
loop
aam
push
imul
jae
mov
aam
das
push
imul
jne
mov
ror
and
push
add
sbb
inc
push
and
addr16
shl
adc
sub
aad
or
and
cmp
cmp
data16
in
std
sbb
fisub
jbe
(bad)
sbb
mov
sub
inc
jno
jecxz
push
dec
mov
mov
mov
xchg
scas
fld
jg
mov
jle
dec
mov
test
adc
dec
adc
cdq
xchg
jo
adc
dec
cs
jmp
call
sub
xchg
push
push
(bad)
dec
cmp
sbb
in
add
mov
scas
cmp
mov
test
pop
push
dec
sbb
pop
add
movsx
rep
add
sbb
call
or
add
jbe
jns
pop
inc
ret
mov
jno
clc
jle
and
outs
jb
adc
dec
inc
fs
jle
push
xor
pop
jae
adc
mov
ror
out
dec
sbb
inc
pop
jbe
enter
mov
into
outs
jae
xchg
sbb
cs
cmp
adc
sbb
dec
adc
and
jb
ror
icebp
stos
sbb
aad
outs
int3
jo
ja
push
movs
dec
or
pop
mov
inc
sbb
cmp
(bad)
clc
jl
mov
addr16
pop
fistp
xchg
cmps
shl
je
xchg
loopne
out
jns
push
inc
not
and
lods
push
jb
das
add
fdiv
cld
inc
test
jle
or
or
add
ins
ficom
inc
add
ins
sahf
imul
xor
or
data16
push
adc
add
xchg
aam
pop
neg
or
sbb
loopne
test
xchg
in
hlt
pop
and
sub
dec
in
pop
or
mov
mov
mov
sbb
cmp
mov
add
call
aam
mov
cmp
hlt
xor
jmp
sahf
test
mov
cli
pop
(bad)
sbb
pop
ret
fistp
(bad)
xchg
xchg
sub
mov
mov
out
mov
add
mov
jbe
xor
ficom
inc
(bad)
xchg
cmp
mov
push
sub
imul
clc
les
pop
or
jmp
fbstp
or
xchg
popa
loopne
pop
cwde
mov
aaa
pop
adc
pop
push
mov
pop
jecxz
cmp
pop
addr16
out
dec
cmp
jne
movs
ret
jle
mov
xlat
cmp
loopne
dec
gs
int3
sbb
cdq
ins
cwde
inc
call
jne
cld
jge
or
push
xor
push
inc
sub
dec
out
xlat
mov
mov
sbb
in
inc
adc
jmp
(bad)
(bad)
sar
clc
ds
cwde
adc
sbb
add
aam
test
or
or
in
cmp
movs
pop
pop
cmps
aam
xchg
xor
mov
ds
(bad)
xchg
and
sahf
jb
adc
cmp
sub
inc
inc
pop
mov
pop
push
adc
jo
cwde
inc
lds
mov
xchg
leave
int3
shr
xchg
xor
fiadd
fs
jl
dec
xor
mov
scas
(bad)
inc
add
cli
xor
push
stos
adc
adc
fild
inc
xchg
stos
xor
add
mov
int3
aas
retf
add
or
inc
cmp
das
pop
retf
not
shl
or
retf
fisttp
imul
cld
les
out
aaa
sub
scas
and
or
daa
pop
and
shl
lods
add
push
pop
test
shl
aam
adc
cld
xchg
test
js
xlat
aaa
icebp
dec
test
mul
sar
cdq
bound
outs
mov
lods
icebp
or
push
pop
add
stos
out
out
cmp
jmp
pop
sub
fbstp
add
in
into
mov
fmulp
hlt
dec
cmp
jo
std
and
fs
cmp
nop
ins
adc
xor
movs
(bad)
enter
push
jbe
dec
mov
cmc
inc
jmp
pushf
dec
popf
out
adc
dec
aaa
dec
jmp
sahf
xor
mov
adc
xchg
pop
js
sub
cmps
or
and
nop
dec
pop
dec
xor
ins
cmp
js
sub
lock
dec
test
xchg
add
pop
addr16
in
mov
pop
xchg
mov
add
xor
jno
test
inc
popf
imul
in
jle
and
inc
sar
mov
dec
sbb
scas
cmp
adc
push
xchg
cmp
iret
adc
sub
jg
inc
dec
jne
outs
(bad)
mov
das
xchg
aad
fucomp
sbb
push
jbe
mov
xor
movs
pop
fistp
pop
xor
or
lods
cmp
sub
adc
test
mov
inc
ret
pop
cld
pop
sbb
les
push
inc
sbb
lds
xor
jle
or
std
pushf
sbb
pop
dec
fwait
cwde
pop
and
push
mov
imul
test
mov
jnp
sub
sets
icebp
jmp
rcr
push
int3
mov
mov
add
sbb
out
pop
leave
jne
stos
push
popa
cdq
add
pusha
push
add
fidiv
dec
addr16
cmc
stos
mov
or
adc
pop
pushf
xchg
adc
mov
or
push
gs
push
push
hlt
cmp
dec
dec
nop
and
out
retf
cmp
sub
and
popa
(bad)
loop
mov
aad
lods
jb
sbb
(bad)
stc
jbe
pop
fnstenv
test
push
dec
mov
enter
mov
int3
jae
mov
popa
dec
rcl
loopne
sbb
popa
hlt
out
ins
inc
aas
push
hlt
push
pop
lods
js
jg
mov
xor
push
and
inc
xchg
xlat
lock
add
cmp
pop
leave
pop
int
inc
push
out
mov
call
push
addr16
cmc
int3
mov
adc
mov
ja
mov
in
or
int3
int
neg
jno
data16
dec
inc
sub
ja
sbb
imul
sbb
addr16
js
call
or
fcomip
pop
mov
pop
(bad)
cs
cmc
ss
test
mov
js
addr16
push
cs
int3
in
(bad)
test
mov
inc
dec
test
scas
nop
adc
jnp
ins
cvtps2pi
xchg
mov
icebp
cmp
js
pop
cmp
add
and
adc
ds
add
mov
lock
aaa
jge
iret
sbb
cmp
retf
add
mov
or
or
mov
push
or
add
test
repnz
shr
ins
inc
shl
push
xor
xchg
sbb
int
add
cmps
cwde
int3
adc
and
mov
jnp
or
aad
cmp
cld
push
loop
inc
out
imul
dec
ror
add
or
xor
push
test
cld
xchg
lea
fsubr
int
dec
sbb
push
stos
or
fsub
and
imul
das
dec
cmp
push
(bad)
push
xor
pop
add
jl
xor
pop
jmp
pop
out
retf
or
push
clc
out
sub
fcomp
or
pop
inc
adc
ret
or
fimul
icebp
jb
getsec
dec
addr16
pop
cmps
add
pop
inc
mov
fwait
pop
addr16
cmp
mov
push
xor
cs
retf
add
pop
push
retf
fucom
nop
fnstsw
pop
jbe
pop
sti
dec
shl
sbb
push
inc
cld
daa
mov
js
addr16
jae
int3
fdivr
lock
leave
xor
clc
cdq
fs
jo
push
jg
sbb
movs
scas
mov
fs
pop
hlt
dec
sub
mov
pop
icebp
jl
(bad)
std
(bad)
dec
aaa
aad
sub
(bad)
sar
aam
and
dec
loope
push
add
jle
out
and
push
inc
or
call
cmp
and
icebp
add
or
(bad)
jmp
add
fldenv
cwde
movs
push
or
sub
xchg
icebp
mov
pop
push
mov
cmps
mov
fs
or
adc
mov
inc
test
imul
ret
xchg
fdiv
adc
cld
xlat
add
lea
dec
mov
add
jbe
nop
adc
jle
aas
cli
xor
sbb
cli
test
ja
and
push
int3
jmp
ret
mov
stos
push
mov
xor
and
(bad)
mov
jns
jo
inc
cdq
pop
in
nop
jp
int3
imul
xchg
fisttp
call
ds
adc
in
xchg
add
(bad)
mov
(bad)
xchg
daa
xlat
xor
movs
mov
repnz
(bad)
mov
inc
cmp
rcr
ret
and
and
mov
movs
mov
mov
nop
lock
icebp
(bad)
sbb
cld
jnp
adc
sbb
jp
stos
rcr
xor
adc
and
js
push
add
xor
push
popa
sbb
out
xchg
inc
adc
adc
loope
push
sub
neg
jne
dec
xor
pop
sbb
or
shl
iret
push
pop
cdq
(bad)
adc
push
imul
pop
pushf
xor
inc
xor
ss
pop
push
xor
xchg
jae
lahf
in
ficom
pop
or
jge
pop
xchg
icebp
or
mov
in
adc
cmc
mov
adc
xchg
xor
xchg
cmp
mov
or
(bad)
aam
push
sub
aaa
or
dec
jb
add
jg
lock
and
sbb
sahf
pop
push
shl
xchg
mov
cmp
add
icebp
inc
fistp
lods
sub
xchg
gs
add
jo
aas
enter
mov
cmp
and
fs
imul
in
loopne
stc
in
pusha
xchg
add
enter
lds
pop
jnp
in
xchg
or
out
and
and
mov
lods
loopne
adc
call
jns
inc
dec
scas
sub
sub
pop
sub
add
das
test
or
dec
out
addr16
adc
mov
sub
retf
jbe
jbe
cmp
jo
aaa
mov
div
push
sub
sti
sbb
mov
inc
jge
lods
pop
cmps
fsub
in
dec
dec
mov
and
or
and
dec
movs
pop
call
addr16
ret
aad
add
fidivr
fdiv
adc
or
or
test
sahf
pop
imul
cld
sub
push
and
sub
cmp
pop
and
ja
push
sbb
cmc
loop
or
mov
cwde
call
xor
fidivr
mov
push
xor
hlt
add
mov
or
cmc
sbb
pop
add
fcomp
xor
popf
push
ror
pop
mov
pop
pushf
test
icebp
xor
xchg
enter
scas
mov
pop
dec
xchg
outs
pop
cmp
iret
lods
jae
outs
in
scas
sbb
retf
int
aas
stos
mov
adc
faddp
mov
sub
xchg
sub
or
push
dec
call
mov
xchg
adc
loope
adc
add
or
out
inc
mov
ret
push
call
mov
test
and
mov
and
dec
sub
pushf
inc
lods
out
loopne
sub
arpl
cs
add
jmp
xor
pop
mov
fwait
test
das
pushf
xchg
fprem
retf
dec
ja
jmp
sbb
out
ss
and
mov
clc
push
(bad)
addr16
pop
xlat
bound
in
ret
call
xor
fadd
mov
pop
sbb
pop
cmp
mov
out
cdq
int3
xor
ret
and
dec
xor
fisub
mov
ins
xor
mov
or
std
inc
nop
imul
cmp
fbld
aad
mov
inc
mov
cld
push
and
imul
or
jle
sub
in
cld
(bad)
aam
pop
fcomp
or
bound
fdiv
out
test
xchg
pop
lods
in
push
pop
sar
aad
(bad)
jp
in
dec
push
ret
fisubr
pop
shr
cmp
xor
aas
push
pop
sbb
sub
or
dec
mov
sub
cmp
jnp
sti
adc
imul
pop
xor
mov
jp
xor
imul
gs
adc
mov
pop
jno
jmp
adc
dec
push
adc
in
adc
dec
ud0
sbb
jmp
(bad)
fstp
push
mov
sbb
mov
bound
jb
int3
add
xchg
stos
xor
jb
int3
adc
fs
out
pop
pop
cmp
xor
dec
adc
sub
push
push
xchg
retf
inc
addr16
jmp
js
inc
sbb
pop
cmp
(bad)
dec
adc
retf
arpl
pop
adc
sbb
sbb
xor
outs
retf
jg
loopne
in
add
aad
dec
loop
mov
xor
enter
mov
mov
cs
fucomi
fistp
retf
test
ins
lock
sub
inc
int
mov
cwde
cwde
sub
cld
xchg
xchg
into
call
xlat
sbb
fstp
ds
cld
pop
sub
sub
cmp
out
fdiv
rcr
int3
div
sbb
mov
add
bound
movs
clc
jmp
sbb
retf
inc
or
hlt
int3
gs
rcl
push
push
jp
sub
mov
mov
ja
ror
mov
(bad)
fcmovnu
ins
or
sbb
loop
jmp
call
int
stc
and
inc
and
stos
nop
push
jmp
loop
sub
int3
jl
push
adc
push
sub
stos
in
cs
xchg
pop
in
cmc
lock
jns
fdiv
iret
in
gs
aas
iret
add
push
cmp
and
xchg
and
lock
cmps
js
addr16
mov
and
push
scas
aam
push
sub
xor
dec
dec
mov
mov
pop
mov
ret
push
lods
sbb
xor
in
ret
add
in
fdiv
or
sub
dec
call
add
popf
test
dec
push
cmp
xchg
cli
adc
adc
add
pop
and
push
cmp
sbb
adc
fidiv
fadd
pop
inc
cmp
cmp
inc
xchg
movs
and
sbb
mov
mov
pushf
mov
icebp
dec
sub
loope
enter
jno
les
fs
mov
icebp
clc
dec
int3
push
mov
gs
cmp
fdiv
xchg
cmp
std
lods
sbb
ficomp
cmp
fnstenv
call
xor
test
fwait
push
and
pop
cmps
cwde
mov
enter
push
jg
sub
xchg
in
mov
fdivrp
mov
stos
test
mov
cmps
cmp
mov
adc
push
sti
jae
fs
lock
popf
add
add
ret
jecxz
sub
mov
int3
pop
shr
lock
or
cld
mov
mov
imul
sbb
and
pop
dec
push
mov
sub
rcl
jmpw
xor
fwait
popa
xor
inc
cmp
leave
inc
jl
inc
loope
in
xchg
das
inc
test
jno
pop
cli
pop
out
add
pusha
ror
ins
add
xor
mov
push
xlat
sbb
xchg
daa
pop
repnz
popf
dec
clc
movs
dec
and
or
jge
repnz
repnz
adc
hlt
ins
pop
inc
push
scas
add
xor
jl
and
push
mov
or
dec
and
cmp
adc
inc
sub
jmp
out
in
sti
movs
dec
or
in
pop
int3
xor
(bad)
cmp
cmp
pop
xlat
imul
fidivr
sub
jge
push
retf
jmp
mov
test
pop
cmp
cmp
int
jl
mov
test
mov
add
sbb
jg
out
cmp
add
mov
test
in
add
sub
les
adc
add
push
adc
and
out
dec
inc
push
repnz
adc
dec
and
pusha
push
scas
and
inc
push
loop
pusha
cmp
dec
sbb
inc
out
loopne
test
test
dec
add
icebp
mov
icebp
xor
xor
pop
dec
dec
push
fcomi
push
hlt
and
in
adc
(bad)
add
ins
cdq
xchg
jg
cmp
pop
loope
mov
int3
stos
cmps
sbb
or
pop
es
int3
mov
arpl
in
pushf
cmp
fistp
inc
dec
xor
push
sub
and
push
out
es
lods
and
dec
sbb
and
ins
xchg
push
mov
xadd
ror
mov
in
jb
pop
mov
sti
or
jne
ror
pop
adc
lods
push
in
lock
repnz
call
jb
fdiv
jl
xor
push
push
cmp
retf
inc
push
mov
pop
fadd
(bad)
cmp
icebp
ss
jnp
jmp
sbb
jne
xchg
pop
mov
mov
push
lock
xchg
dec
ins
sub
pop
ror
inc
imul
pushf
push
jp
retf
sbb
xlat
jmp
inc
icebp
jae
mov
mov
mov
(bad)
into
mov
mov
(bad)
pop
ret
icebp
add
addr16
pop
inc
fcmove
push
add
mov
add
xlat
imul
and
call
retf
xor
test
push
jmp
mov
fidivr
enter
sub
or
or
cli
xor
scas
jmp
fisubr
inc
ret
mov
adc
int3
cmp
xor
xor
in
cmp
or
push
xchg
xchg
stc
xor
and
ins
adc
fdiv
cwde
dec
or
dec
mov
xchg
cli
enter
cld
stos
add
dec
int
lods
mov
jne
xchg
mov
push
cld
movs
test
xor
icebp
xchg
stos
mov
xor
addr16
inc
push
jbe
xor
test
pop
xor
cli
push
xchg
mov
sbb
mov
and
cli
xchg
push
cmp
(bad)
pop
and
jmp
inc
rcpps
push
adc
xchg
inc
retf
and
int3
cmp
test
cld
rol
cmp
enter
adc
or
les
jge
bswap
ja
ss
cmp
dec
(bad)
mov
pop
fidiv
loop
push
and
mov
movs
pop
(bad)
pushf
(bad)
out
xchg
pop
test
jp
adc
or
popf
pop
stos
mov
or
cmp
inc
dec
add
cmp
mov
inc
sbb
push
(bad)
jo
mov
jl
mov
pop
sub
aas
dec
or
fcom
jecxz
jmp
push
pop
sti
and
xchg
popf
push
add
sub
push
push
sbb
xor
sbb
or
das
sbb
xor
jle
pop
inc
or
fwait
cwde
pop
in
mov
pop
add
pop
inc
cmc
sub
sbb
jmp
adc
sub
jo
cmp
push
sub
pop
js
fs
and
retf
push
cmp
pop
push
add
jge
adc
pusha
jno
xchg
push
pushf
adc
xor
loop
jo
xchg
jl
mov
idiv
lods
adc
sub
aaa
cwde
jo
test
cwde
aaa
jmp
dec
jnp
fs
pop
les
pop
int3
add
popf
ret
icebp
(bad)
iret
xor
jne
retf
lods
sbb
jae
mov
adc
jecxz
sbb
into
inc
hlt
or
pop
adc
sbb
repz
std
push
mov
adc
add
(bad)
or
cmp
or
imul
add
push
inc
out
aaa
mov
sub
hlt
dec
jo
dec
xor
adc
mov
movups
xor
sbb
fsubr
mov
fwait
inc
cli
jg
cmp
inc
sub
mov
mov
add
inc
out
out
push
sbb
fcom
adc
ret
out
(bad)
fild
scas
cmp
out
jne
int
xchg
(bad)
jbe
sub
enter
jg
call
fadd
push
fmul
sbb
jmp
xchg
cvtps2pi
sbb
inc
add
rcl
pop
mov
inc
jp
lds
popa
add
retf
or
and
aas
or
push
adc
in
adc
add
adc
adc
or
cmp
in
fdivp
jnp
fcmovbe
xor
dec
stc
mov
neg
jbe
or
pop
sub
retf
aaa
ja
or
and
jmp
mov
hlt
pop
adc
cmp
rol
cwde
mov
or
adc
repz
sub
je
xor
cmps
and
pop
and
pop
push
stos
jmp
pop
pop
xor
out
sub
cs
mov
enter
xchg
jns
add
daa
sbb
cld
leave
test
xchg
into
push
adc
out
xchg
push
stos
mov
loopne
clc
jae
shl
pop
adc
out
or
or
and
add
mov
mov
or
push
int3
pop
or
xchg
in
jg
jo
scas
movs
jmp
xor
hlt
fiadd
push
pop
loopne
(bad)
out
xchg
mov
push
inc
mov
dec
fwait
out
adc
push
mov
test
cmp
inc
jae
into
aaa
mov
stos
push
mov
movs
loopne
push
int3
int3
dec
scas
outs
pop
and
pop
das
push
enter
ficomp
clc
xor
jne
aas
movs
fimul
inc
mov
xchg
adc
dec
fadd
sub
add
mov
adc
pop
pop
or
enter
add
pop
mov
aam
and
imul
fs
sub
cmovp
ds
ins
sub
pslld
mov
(bad)
icebp
xor
sbb
in
mov
in
fiadd
jb
jmp
cmp
inc
xchg
add
push
adc
and
sti
pop
sub
mov
test
adc
cmp
dec
jecxz
inc
pop
iret
(bad)
ss
push
push
lods
mov
bound
xchg
bound
inc
cdq
add
dec
jle
fcomp
jo
or
shl
adc
int3
jb
pop
outs
or
pop
dec
inc
mov
or
repz
lods
pop
mov
mov
jmp
call
push
inc
scas
pop
cmc
test
jns
sub
jbe
xchg
cmp
rcl
leave
jo
cmps
fmul
and
test
ins
fisubr
test
mov
ins
icebp
push
aas
aaa
xchg
loopne
add
mov
push
arpl
and
or
ds
sub
push
ja
push
push
xor
test
mov
das
int3
in
pop
es
maxps
xor
dec
ds
push
sbb
shr
lahf
cmp
mov
xchg
push
mov
lahf
xchg
inc
fistp
inc
mov
icebp
mov
mov
add
call
adc
mov
mov
in
add
imul
in
push
sub
sub
mov
cwde
imul
adc
and
and
(bad)
loopne
pop
and
xor
fistp
add
icebp
pop
fimul
and
adc
inc
sub
xchg
add
std
adc
or
inc
fstp
fdivr
mov
push
stos
mov
mov
movs
pop
or
adc
and
ins
iret
xor
lods
add
cld
jns
daa
std
sti
mov
sbb
movs
imul
and
pusha
and
in
dec
push
adc
mov
stc
cmp
adc
lods
xor
sub
or
add
or
ror
pop
fcom
jg
add
push
int
add
mov
movs
pop
shl
inc
pop
stos
add
stos
jbe
push
pavgw
lea
pop
push
mov
add
(bad)
es
mov
dec
inc
inc
dec
xor
push
std
mov
(bad)
push
jmp
xchg
dec
test
mov
scas
loopne
pushf
movs
ss
add
call
sub
jl
jns
cmp
sub
cdq
xor
fstp
add
add
cmp
pop
lock
push
xlat
int3
imul
add
add
lods
cmp
pop
je
imul
xor
ds
pop
les
add
hlt
add
add
xchg
mov
cli
lock
enter
lea
pop
adc
add
add
cmps
pop
aam
mov
mov
aam
ins
in
movs
mov
mov
vmread
fidivr
adc
dec
std
jnp
ja
in
js
or
enter
dec
cmc
add
pop
nop
movs
aam
and
and
sub
inc
ins
shr
int3
(bad)
xor
ins
repnz
sar
dec
not
fbld
(bad)
sub
loopne
test
jne
inc
cdq
gs
adc
inc
test
test
push
and
fmulp
xor
in
xchg
test
and
enter
ds
js
jmp
push
lock
lods
jmp
imul
jge
cmps
(bad)
in
fdivr
imul
leave
sbb
mov
xchg
pop
retf
mov
mov
ficom
or
push
dec
pop
jae
ja
mov
xchg
xchg
mov
and
pop
mov
aam
test
xor
fsub
cmp
and
or
repz
es
aam
cwde
mov
ins
movs
cli
mov
add
push
mov
add
popf
cld
dec
stos
push
jl
add
hlt
lods
pop
adc
stos
hlt
repz
adc
pop
movs
add
rcr
jmp
imul
mov
mov
dec
sti
in
jl
or
retf
sub
add
jo
cmc
add
out
dec
mov
pusha
pushf
cli
mov
loope
mov
mov
pop
cwde
and
enter
or
xchg
test
in
pop
test
ins
aad
mov
cmp
nop
add
sub
add
adc
aaa
or
fstp
fwait
mov
mov
mov
int3
retf
sti
xor
sbb
xor
sub
add
popf
in
jl
dec
in
push
pop
mov
cmp
in
cli
add
retf
inc
test
mov
ja
stc
add
sbb
jp
test
mov
and
in
add
mov
fwait
xchg
data16
add
and
ficom
or
xchg
jbe
push
push
jp
cmp
mov
pop
xor
add
jmp
adc
lahf
nop
inc
and
aaa
js
pop
sub
mov
pop
or
nop
and
sahf
xchg
mov
jle
sub
dec
imul
adc
stos
int
sub
test
push
test
push
in
xchg
ins
cmp
push
mov
call
add
cmp
dec
aad
(bad)
fstp
adc
sub
adc
dec
xchg
dec
mov
pop
sub
(bad)
pop
inc
xchg
inc
pop
sbb
jae
jno
(bad)
pop
push
cmp
sub
adc
dec
data16
and
nop
ss
mov
pop
or
(bad)
push
push
aaa
adc
pushf
xchg
xchg
xor
add
add
xchg
hlt
cmp
nop
adc
push
push
and
mov
sub
inc
dec
arpl
xchg
push
mov
js
cmps
sbb
xchg
shl
adc
dec
mov
xor
call
cmp
mov
push
sub
add
sbb
test
and
xchg
jecxz
sub
sub
adc
mov
jnp
xor
dec
xchg
dec
xchg
add
mov
add
(bad)
pop
mov
test
in
inc
rol
movs
sbb
xchg
mov
imul
add
call
jg
lds
mov
pop
in
xor
add
daa
arpl
push
add
sub
iret
imul
or
pop
sbb
ds
mov
mov
in
dec
pushf
add
ins
xor
cmps
scas
sbb
jl
xchg
adc
scas
in
pop
dec
(bad)
push
push
js
add
call
cwde
test
(bad)
es
mov
in
adc
push
inc
sti
xchg
add
mov
xchg
dec
(bad)
mov
pop
in
pop
mov
pop
xor
add
mov
add
mov
out
add
add
sbb
or
inc
or
dec
push
in
and
pop
cdq
mov
bound
ror
outs
call
in
jmp
dec
mov
lock
cmp
out
xchg
push
mov
push
sahf
test
mov
cmps
inc
dec
inc
ins
sbb
fdiv
sub
or
xchg
pop
and
(bad)
sar
and
in
repnz
push
enter
mov
push
xor
jo
idiv
mov
cmp
retf
adc
test
ins
sub
std
sub
mov
mov
jbe
lea
cli
jmp
dec
xchg
mov
xor
int3
ins
push
sub
dec
push
or
pop
sub
inc
jmp
inc
(bad)
jecxz
mov
mov
mov
ja
js
pop
dec
adc
push
mov
mov
outs
mov
jmp
mov
jbe
(bad)
out
dec
imul
pop
push
fistp
dec
push
repnz
loop
adc
push
out
in
push
addr16
mov
in
outs
jmp
mov
in
retf
in
enter
stos
or
push
jmp
dec
sub
in
cli
push
int
(bad)
adc
cld
add
mov
jns
pop
jecxz
pop
add
(bad)
pop
addr16
retf
and
adc
sbb
inc
and
clc
jo
xor
scas
inc
xchg
or
bound
mov
movs
scas
js
sub
cmps
ret
mov
dec
scas
cmp
xlat
test
fs
js
arpl
adc
mov
sub
aaa
outs
cmp
cld
sbb
adc
(bad)
loop
cwde
xchg
pop
dec
pop
or
retf
fnsave
dec
xor
and
push
add
jle
ins
lods
sub
push
mov
outs
pop
jge
dec
ins
cwde
mov
inc
xor
dec
jnp
loope
and
outs
sahf
add
add
ret
mov
ret
cmp
inc
mov
js
xor
pop
test
mov
call
cwde
js
push
cwde
jo
jns
lea
dec
jne
je
cwde
rol
or
sbb
sbb
push
leave
jmp
pop
rcr
pop
test
lds
(bad)
xor
movs
adc
push
ins
in
lea
lods
jmp
cmp
and
adc
or
or
add
and
and
pop
int
clc
popa
movs
call
lock
in
call
int
(bad)
loopne
loopne
loopne
loopne
loopne
loopne
loopne
loopne
loopne
loopne
loopne
loopne
loopne
loopne
loopne
loopne
loopne
loopne
loopne
loopne
loopne
loopne
loopne
loopne
loopne
loopne
loopne
loopne
loopne
xchg
(bad)
mov
mov
mov
imul
push
jmp
push
add
push
or
rcr
in
add
aam
mov
in
xor
add
jo
fcomp
push
pop
test
ror
cmp
cmp
fs
push
fwait
add
cmp
jae
add
jmp
sbb
and
inc
sbb
or
xor
sub
or
in
in
in
sub
fwait
add
repz
mov
xor
lock
add
jmp
adc
loopne
pusha
ins
sbb
sbb
add
adc
fucomi
hlt
add
ret
hlt
and
mov
fcomp
and
jae
cmp
dec
enter
icebp
add
mov
test
jl
and
inc
fisttp
or
test
retf
xor
and
push
movs
pop
adc
loop
sub
mov
retf
mov
js
movs
mov
fsub
mov
sub
mov
mov
push
xor
and
push
sub
loopne
pop
(bad)
push
ins
and
test
push
cmp
or
mov
adc
pop
cmp
dec
hlt
daa
pop
mov
adc
stos
icebp
stos
in
jne
fistp
loopne
sub
push
in
repnz
mov
fidiv
dec
jnp
cmps
add
repz
sub
pop
mov
mov
and
js
or
ret
inc
cmps
icebp
icebp
sbb
ret
adc
mov
scas
es
xor
fcom
cmp
xor
pop
out
add
cmp
in
jo
pop
mov
push
mov
fcom
pushf
jmp
outs
ja
xchg
pop
adc
and
pop
retf
cdq
sbb
push
or
inc
test
xchg
pop
pusha
js
push
dec
aad
jge
sub
stc
push
add
sub
and
ja
aaa
jnp
sbb
dec
addr16
mov
xor
push
xchg
enter
mov
jo
in
xor
xchg
call
lds
adc
ja
outs
sahf
pop
addr16
mov
jp
popa
dec
test
inc
into
push
js
or
jae
test
in
push
dec
xchg
addr16
test
sub
adc
sub
sahf
push
ja
mov
push
push
mov
adc
mov
or
pop
adc
pop
xor
or
sub
loope
and
and
ds
add
dec
jo
dec
ror
add
jmp
inc
mov
push
sub
add
jg
sbb
or
je
inc
jnp
sbb
shl
mov
lock
xlat
dec
in
sbb
nop
out
push
jae
pop
xor
sbb
cmc
test
sbb
and
sbb
ror
stos
ret
not
pop
mov
sub
jmp
movs
arpl
cmp
stos
(bad)
arpl
mov
js
in
mov
nop
inc
das
adc
xchg
cmp
add
(bad)
cmp
mov
add
call
mov
mov
lahf
xchg
loop
adc
xor
add
pop
cmp
xor
sbb
push
call
mov
jne
pushf
xchg
enter
mov
mov
ret
ins
mov
and
ss
xchg
cmp
or
cmp
das
hlt
xor
mov
fsub
pop
or
cmp
sbb
pusha
sbb
sbb
or
and
(bad)
xor
cdq
jmp
jae
xchg
xchg
pusha
sbb
push
add
(bad)
jmp
jae
in
aam
adc
fs
add
pop
test
add
jmp
sbb
push
add
add
add
mov
aaa
loopne
loopne
loopne
(bad)
lahf
adc
sbb
sbb
push
in
loopne
loopne
int3
sub
and
sub
lock
pushw
fdiv
shl
cmps
mov
mov
jmp
cmp
pop
sti
scas
loopne
loopne
loopne
loopne
loopne
test
jmp
dec
repz
inc
sbb
add
adc
inc
pop
pusha
sub
clc
cmp
pop
js
jmp
pop
mov
in
sub
js
adc
cmp
cld
sbb
js
jmp
push
ja
outs
jle
jmp
cmp
cdq
or
fsubr
pop
cwde
adc
or
and
add
push
ins
hlt
push
dec
call
sti
jmp
or
jl
aam
int3
add
jb
cmp
clc
imul
mov
jmp
add
jno
sar
xor
and
ins
xchg
jo
xchg
outs
sbb
jmp
jbe
sbb
mov
test
lods
sti
push
xor
xor
xchg
adc
outs
xchg
mov
mov
jmp
inc
in
mov
add
sbb
cmp
sbb
sub
nop
or
inc
xchg
jo
xchg
cmp
enter
je
dec
test
shl
popa
and
cld
imul
imul
add
inc
daa
dec
movs
ret
sub
push
fcom
mov
mov
jl
dec
scas
add
cld
add
xor
cmps
out
pop
mov
cmp
nop
push
das
jae
cwde
pop
xor
jae
fs
dec
jns
int3
int3
push
in
jnp
push
mov
add
xchg
mov
jo
in
icebp
xchg
in
jecxz
xchg
sub
cwde
xchg
mov
dec
cmc
fild
jb
pop
in
inc
jno
sbb
call
mov
sub
xor
and
pop
nop
out
mov
pop
mov
mov
sbb
or
or
or
stos
rcl
imul
enter
lea
or
pusha
ds
and
mov
fs
and
xor
jmp
cmp
or
rcr
not
xchg
xor
mov
sbb
ins
sbb
fldenv
sub
inc
mov
ins
and
retf
adc
or
mov
pop
push
lea
sub
xor
mov
mov
les
cmp
mov
test
or
(bad)
(bad)
jp
jbe
or
mov
add
dec
xor
xchg
mov
push
fisubr
pushf
fsubr
sub
sbb
push
fsub
or
xor
xor
movs
jp
sub
pop
and
enter
jg
dec
mov
pushf
(bad)
mov
mov
cmp
pop
nop
cmp
movs
push
mov
rol
mov
inc
pop
enter
sub
and
sbb
aaa
or
sub
je
hlt
mov
jl
js
add
and
adc
(bad)
fldenv
pop
mov
(bad)
aas
loopne
shl
outs
cmps
ret
addr16
pop
in
sbb
push
stos
mov
xchg
sub
sub
xor
add
test
jns
xchg
mov
test
call
fs
mulps
and
icebp
sub
arpl
adc
push
mov
fild
sub
pop
adc
sub
sbb
js
inc
push
or
pop
stc
mov
push
xchg
adc
stos
int3
sbb
loopne
mov
dec
repnz
or
jnp
mov
and
pop
or
mov
mov
fwait
push
inc
repnz
jno
out
xchg
rol
mov
sub
into
xchg
push
sbb
and
fadd
xchg
retf
pop
fdiv
fiadd
mov
mov
push
icebp
adc
pop
loop
sub
pop
jae
sbb
seto
pop
add
stos
and
add
inc
mov
add
and
inc
or
adc
lahf
jp
or
or
imul
pop
push
arpl
add
sub
jae
jb
and
push
cmp
push
test
mov
xchg
or
pop
test
pop
pop
push
or
adc
push
push
movs
sub
inc
sub
xor
movs
push
ja
push
push
push
mov
(bad)
pushf
ins
or
dec
fs
push
cmp
pop
dec
dec
inc
cmp
push
or
dec
or
sbb
push
fs
pushf
lea
mov
xor
cld
xchg
push
jo
rcr
or
add
or
mov
js
repz
pop
enter
and
or
into
mov
xor
jmp
fcmovnbe
aaa
rol
sti
sub
add
pop
rol
fisubr
nop
call
push
mov
pop
js
cmp
xchg
(bad)
push
popf
jmp
ror
sub
pop
mov
pusha
mov
fnstcw
lods
mov
or
jle
lock
push
pop
inc
mov
mov
fst
pop
imul
repnz
add
pop
xchg
jmp
pop
and
or
mov
popf
ret
int3
inc
mov
pop
mov
das
test
push
mov
bound
or
outs
push
imul
xchg
pusha
inc
stos
sub
mov
ret
sub
test
fimul
push
add
stc
sbb
jo
fstp
hlt
xacquire
stos
push
pusha
das
imul
mov
pop
inc
sbb
je
dec
sbb
jmp
inc
xchg
shl
call
out
outs
push
lock
scas
bnd
mov
cmp
jne
call
and
int3
je
add
call
xchg
or
cld
fldenv
(bad)
dec
cmps
aad
pop
ja
pop
out
mov
xchg
dec
es
and
sbb
data16
push
sbb
out
push
cmp
mov
out
mov
adc
icebp
cmp
add
xchg
pop
mov
call
scas
xchg
std
add
pop
fsubrp
pop
in
(bad)
sub
(bad)
add
mov
icebp
pop
cmp
mov
xor
mov
mov
push
mov
pushw
jae
pop
adc
fs
inc
mov
xchg
jae
sbb
leave
or
push
in
imul
adc
cmp
add
sub
cmp
sbb
sub
cmp
or
sub
cmp
and
sub
cmp
fcomp
inc
dec
loopne
ret
pop
push
jecxz
aaa
data16
xchg
mov
shr
or
fcom
js
sub
and
add
xor
jo
or
adc
xor
mov
sub
inc
icebp
pop
cwde
xchg
shl
pop
xlat
ficomp
pop
pop
(bad)
(bad)
in
xchg
sbb
jp
wbinvd
mov
sub
sbb
jns
mov
mov
or
jno
xchg
fisubr
test
in
aad
cmp
int3
push
jmp
jnp
adc
(bad)
mov
into
imul
xchg
pop
ret
fdivp
jbe
out
js
add
ja
adc
pushf
sbb
inc
pop
(bad)
jmp
cmp
pop
mov
sbb
and
mov
and
outs
int3
pop
adc
out
sbb
adc
popa
adc
std
jmp
push
lods
pop
pop
fstp
int3
jge
loope
movs
icebp
adc
retf
clc
jnp
cwde
pop
sbb
inc
into
in
or
add
cmp
sbb
les
(bad)
aam
push
jle
mov
adc
and
ja
cmp
or
pop
es
mov
sub
aas
jnp
loopne
data16
pop
mov
cli
test
xor
dec
int3
dec
mov
popf
lahf
add
pop
jge
adc
mov
push
mov
dec
aas
jb
inc
fldenv
mov
nop
addr16
int3
popf
pop
push
xchg
imul
loopne
mov
fcmovbe
push
sbb
sbb
push
pop
inc
sti
mov
jo
pop
cmc
xchg
mov
loop
clc
adc
inc
add
(bad)
and
loopne
cmp
imul
(bad)
enter
shl
iret
push
or
cmp
cmc
xlat
inc
push
pop
outs
loopne
add
out
(bad)
cmp
aas
sbb
out
imul
cmp
mov
cmp
push
test
and
inc
outs
loopne
fisubr
cld
pop
sub
or
fwait
jmp
outs
xchg
dec
xchg
fdiv
jae
mov
in
push
mov
dec
popaw
push
clc
add
(bad)
fs
and
sbb
fist
sub
(bad)
lahf
push
push
movs
sub
xor
jb
test
clc
(bad)
hlt
jle
sub
xor
xchg
jmp
loopne
sub
or
pop
retf
dec
sbb
jmp
and
fisub
or
cmc
push
(bad)
push
add
xchg
test
inc
loope
mov
data16
adc
sahf
jecxz
cwde
xchg
aaa
push
aam
pop
mov
push
add
(bad)
ficom
pop
push
call
ss
pop
inc
mov
push
sub
shr
imul
lahf
pop
add
push
mov
push
mov
je
pop
mov
and
lahf
pop
(bad)
sbb
xchg
retf
out
mov
test
sbb
push
adc
pop
ja
imul
and
push
fs
in
pop
or
icebp
add
sub
call
push
push
in
daa
sbb
jg
aaa
rcr
jo
jge
pop
push
adc
xor
ss
mov
addr16
retf
sbb
sbb
or
push
call
js
mov
and
dec
std
mov
or
movs
pop
pusha
aaa
outs
cmp
xchg
jmp
xor
pop
pop
inc
in
mov
cmps
add
dec
sub
icebp
xor
or
mov
popf
arpl
adc
fisttp
dec
pop
mov
inc
jp
loope
call
dec
fs
or
jg
or
sbb
sbb
inc
adc
and
inc
dec
shl
clc
mov
(bad)
imul
mov
mov
or
or
or
mov
sbb
add
xchg
jmp
loopne
xchg
and
fadd
mov
xor
int3
mov
cmp
repnz
sub
add
(bad)
ins
xchg
loope
sub
lahf
jnp
test
mov
push
xor
xor
mov
cmc
je
pop
push
mov
loop
cmp
jg
adc
mov
pop
xor
lock
call
dec
pop
rcr
pop
in
inc
cmp
int
cmp
sub
sub
ss
int
aas
test
mov
dec
imul
leave
outs
cmp
sbb
inc
mov
loop
mov
mov
addr16
pop
mov
pop
js
mov
std
aaa
cmp
pop
cmp
fdivrp
pusha
xor
addr16
std
and
mov
mov
lock
int3
pop
out
mov
dec
stos
or
(bad)
call
gs
add
inc
stos
(bad)
pop
inc
lahf
ret
dec
rcr
sub
or
arpl
add
lods
pop
push
outs
mov
jae
test
jne
push
addr16
jmp
mov
cmp
sbb
repnz
inc
dec
mov
push
movs
pop
lahf
and
retf
sbb
out
sbb
adc
add
sub
call
xchg
pop
cmp
jge
add
cld
test
sub
dec
dec
and
xchg
addr16
mov
mov
leave
add
sub
and
and
in
dec
pop
xor
(bad)
jb
mov
push
xor
icebp
pop
adc
push
es
jge
dec
xchg
sbb
int3
or
sbb
call
adc
or
call
stos
aaa
push
add
push
jb
sub
stos
or
int3
call
sbb
es
test
(bad)
pop
ins
jmp
or
repnz
push
inc
movs
cmp
cwde
mov
add
aaa
dec
dec
and
inc
cmp
mov
or
push
inc
pop
div
xchg
fs
sbb
cmps
jmp
outs
adc
and
cmps
ins
add
lods
sbb
sbb
nop
sahf
mov
int3
push
mov
nop
call
jae
int3
and
pop
outs
add
aaa
out
sbb
pop
jmp
icebp
pop
int
push
jmp
icebp
adc
xor
sbb
jmp
jne
or
or
sbb
mov
add
sbb
pop
add
mov
pop
or
das
pop
and
mov
pop
xchg
inc
cmp
pop
and
int3
jnp
push
in
inc
ds
and
push
sbb
push
jg
cmps
or
jo
mov
int3
or
mov
adc
ficom
pop
or
mov
pop
icebp
or
xor
xor
sbb
push
inc
push
pop
stc
rol
push
push
xor
mov
xchg
dec
adc
sub
or
dec
sbb
icebp
dec
jno
pop
cmp
das
cmp
ds
cmp
inc
ja
in
sub
jmp
add
in
movs
sbb
int3
lods
dec
sub
or
cmp
stos
cld
or
push
addr16
call
inc
push
adc
sub
out
jl
test
test
and
cmp
pop
sub
data16
push
mov
fstp
pop
add
bound
fs
mov
pop
ins
icebp
neg
xchg
mov
or
ja
push
out
dec
scas
inc
inc
push
inc
mov
xor
hlt
jno
icebp
inc
mul
mov
cwde
jl
mov
xor
adc
pop
in
test
jmp
jb
mov
inc
popf
dec
cs
aad
fdivr
add
mov
pop
cdq
sub
(bad)
mov
loop
dec
ficomp
or
aas
add
add
imul
adc
js
xchg
stos
add
pop
jp
int3
inc
imul
sub
test
ins
int3
push
add
mov
or
loop
lods
mov
lock
lods
push
cmp
ret
mov
dec
dec
or
fidivr
push
pop
test
add
sti
sbb
data16
bound
or
jne
popa
shr
out
push
cmps
out
push
(bad)
sti
mov
icebp
in
push
push
ficomp
jno
and
inc
sbb
rol
test
lods
jnp
cmps
loop
cs
rcr
cmp
pop
and
push
sub
into
(bad)
(bad)
dec
and
adc
jae
mov
cwde
or
xor
aad
push
ins
(bad)
fcmove
push
fnstsw
mov
push
pop
dec
ret
movs
fisttp
add
pop
sbb
sbb
jnp
idiv
push
xor
xchg
pop
aad
imul
test
rcl
dec
xor
cmp
cdq
test
nop
xchg
or
mov
mov
inc
add
retf
adc
sbb
sbb
inc
pop
sub
jle
or
outs
push
fisttp
cwde
ins
dec
sub
and
and
fist
pop
add
cmc
fimul
int3
pop
xor
xor
inc
das
test
ds
lods
sahf
into
push
adc
shl
cmps
(bad)
int
push
xor
sti
lahf
push
jp
bound
add
xor
jne
addr16
dec
out
xchg
pop
jl
sbb
pop
lds
test
imul
xor
sbb
inc
fisttp
push
call
pop
int3
mov
jbe
adc
rcl
push
push
xchg
mov
adc
lea
dec
sbb
ror
xchg
push
inc
dec
xchg
sbb
xor
mov
sbb
add
pop
sub
sub
push
sbb
lahf
in
mov
imul
enter
push
loop
pop
pop
std
jmp
jg
adc
jmp
xor
in
xor
dec
cmp
mov
movs
fcomp
ficom
mov
jge
inc
adc
push
pop
cmp
(bad)
jmp
not
ret
and
mov
dec
jge
jno
je
pop
push
push
mov
sub
or
in
lods
pop
jmp
add
or
pop
cmp
and
or
add
fnsave
xchg
pop
js
into
sub
xchg
std
sub
inc
and
dec
inc
jne
fistp
adc
stos
js
jecxz
pop
jno
or
xor
and
lahf
sti
repnz
or
dec
mov
jo
and
xor
loopne
adc
adc
and
in
les
cmp
pop
sub
lods
mov
cmps
push
push
mov
xchg
or
xchg
fst
mov
mov
jmp
mov
les
adc
cdq
fiadd
or
jns
jmp
mov
cmp
aas
jecxz
iret
jl
mov
jmp
cld
ret
imul
clc
push
xchg
icebp
int
ds
scas
jo
xlat
cmp
shl
mov
fs
jmp
(bad)
or
(bad)
mov
sbb
mov
or
call
pop
mov
jns
ror
jae
jge
sbb
and
adc
or
ins
push
jae
mov
add
ss
leave
nop
ror
mov
xchg
clc
test
inc
imul
hlt
xchg
aaa
adc
ficom
or
test
sti
cld
leave
icebp
lods
bound
out
ins
pop
(bad)
out
inc
push
cmp
fnstsw
hlt
push
add
add
mov
dec
aad
clc
push
cdq
and
fwait
je
imul
sbb
call
xor
sbb
cmps
jo
test
sub
sbb
xor
add
cmp
in
pop
add
inc
in
fsubp
lahf
xor
mov
call
sub
cmp
out
inc
xlat
in
mov
out
leave
dec
mov
sub
jo
call
sbb
and
int3
jmp
or
out
stos
xchg
test
out
sub
sub
and
icebp
sub
fild
fs
jbe
pop
jmp
call
std
push
dec
mov
stos
push
sub
or
call
outs
mov
outs
cdq
hlt
pusha
push
pop
loopne
cmps
pop
pop
xor
int
xor
pop
sub
push
outs
sub
adc
jmp
sbb
lods
push
jne
xlat
dec
jle
or
xchg
lods
mov
pop
movs
js
jg
idiv
enter
xlat
jp
jns
faddp
test
or
or
push
jp
pop
ja
mov
push
pop
psubusb
int3
ror
push
test
ja
in
cmc
jo
(bad)
out
jp
ror
fs
sbb
mov
sub
add
jmp
icebp
(bad)
not
pop
inc
mov
dec
fild
xchg
je
or
in
jo
(bad)
ja
addr16
inc
mov
in
dec
mov
inc
xchg
or
xor
leave
pop
cmp
inc
push
inc
in
je
mov
lea
enter
imul
jno
sbb
or
out
add
pushf
push
jg
fistp
inc
fwait
test
in
and
xchg
mov
jnp
je
xchg
jecxz
call
sub
or
and
jae
lods
jne
push
mov
sub
and
cmp
outs
mov
clc
adc
add
push
adc
inc
shl
movs
imul
dec
or
sbb
push
push
sbb
outs
and
retf
arpl
adc
cmps
faddp
sbb
popa
mov
fldenvw
xor
dec
out
dec
cwde
icebp
add
ss
(bad)
aam
in
(bad)
sub
push
loope
xor
jg
add
add
sbb
mov
push
loopne
addr16
push
sub
lods
xchg
loop
adc
or
aaa
imul
sbb
outs
addr16
movs
or
sbb
or
fnstcw
(bad)
pop
sbb
cdq
mov
push
mov
push
push
mov
fs
push
adc
mov
push
(bad)
sbb
int3
sub
jg
clc
mov
cmp
xchg
cmc
jle
xor
scas
into
inc
inc
xchg
test
dec
cmp
in
fdivr
mov
dec
push
shl
mov
jns
inc
xchg
xchg
lods
xchg
aaa
imul
mov
dec
xor
dec
aaa
or
jle
xor
cmp
out
out
sbb
or
or
mov
mov
fdiv
mov
inc
push
sub
clc
dec
repnz
frstor
cwde
sbb
cmp
gs
ins
inc
and
cwde
xchg
sub
add
(bad)
or
push
mov
push
pop
jae
shl
(bad)
test
cmp
sahf
inc
cmp
inc
xlat
ja
push
in
call
mov
pop
pop
jl
inc
xor
jl
les
inc
loopne
pop
xor
call
stos
out
cmp
pop
or
aas
into
and
pop
imul
push
cmp
and
add
call
call
ins
mov
adc
or
cmp
xlat
inc
push
pop
vcvtss2si
dec
cdq
push
sahf
je
inc
addr16
mov
loopne
(bad)
sub
pop
hlt
add
mov
add
sub
sahf
pop
push
cmp
jne
idiv
jecxz
les
stos
push
xchg
call
mov
cmps
cmps
xor
sbb
push
inc
(bad)
jmp
rcl
inc
inc
and
dec
pop
cmp
inc
stc
repnz
in
mov
out
imul
xchg
icebp
pop
je
push
ins
push
jae
test
sub
js
push
add
sbb
mov
push
inc
in
xchg
shl
cmp
cmp
xor
mov
xchg
cmc
lock
sbb
in
pop
or
inc
pop
cdq
xchg
pop
fstp
sbb
push
callw
mov
cmp
mov
sti
and
(bad)
in
rol
sbb
add
int3
cwde
int3
pop
inc
cli
aam
cld
dec
sub
(bad)
icebp
stc
jnp
push
ins
pushf
mov
mov
addr16
and
pop
mov
cmp
int3
inc
cmp
retf
arpl
(bad)
push
ret
push
(bad)
rcr
dec
xor
fstp
cmp
icebp
jmp
xor
pop
int3
aam
add
add
test
mov
js
jne
cwde
jl
and
fidivr
mov
or
xor
push
outs
push
pop
xchg
mov
pushf
xchg
cmps
or
mov
popf
or
enter
push
scas
xchg
and
ins
or
sbb
xchg
xchg
std
sbb
sbb
sbb
xor
inc
push
stos
stos
data16
aas
cmp
sub
mov
dec
int3
lock
aaa
sub
xor
mov
in
xchg
xchg
jb
push
iret
sbb
jbe
loop
mov
jno
shl
dec
into
mov
jp
pop
jae
cwde
jo
test
inc
out
add
xchg
nop
adc
sub
mul
pop
fldcw
adc
pop
xchg
and
push
out
xor
push
in
ins
dec
sub
adc
nop
jae
push
mov
and
mov
retf
and
push
cmp
loopne
lods
push
or
xor
dec
movs
or
(bad)
push
icebp
dec
inc
push
jl
loope
aaa
popa
jo
sbb
adc
dec
add
pop
nop
add
add
sub
movs
inc
adc
cmp
xchg
clc
or
sub
inc
loop
mov
mov
shl
retf
in
and
(bad)
call
les
fdiv
push
lds
sbb
clc
retf
or
dec
jmp
cmp
jl
mov
mov
jl
ins
in
or
pop
mov
in
scas
inc
in
pop
cli
pusha
inc
cmp
push
ins
mov
mov
std
and
jb
ins
jmp
cmp
add
in
ins
sbb
sbb
sub
stc
mov
sbb
xchg
mov
fbstp
and
(bad)
cwde
jle
push
ds
test
add
mov
es
es
adc
fcmovne
shl
inc
popa
cwde
lods
ds
ins
sahf
mov
cdq
fstp
test
sub
sub
lahf
xchg
lea
test
int3
lods
popf
mov
js
or
pop
rol
fcom
xor
jno
jge
jnp
or
and
and
sbb
pop
push
xchg
jae
sub
sub
inc
pop
out
pop
aad
iret
add
addr16
xor
dec
ins
(bad)
jg
add
lods
popf
dec
and
imul
retf
xor
dec
fwait
mov
xor
dec
in
stos
inc
adc
je
or
and
push
pop
mov
adc
out
pop
adc
pop
sub
inc
xchg
pop
sub
nop
push
movs
dec
dec
pop
pop
shr
xchg
sub
(bad)
sub
sub
lods
pushf
cmp
or
sahf
dec
xlat
or
int3
xchg
aaa
(bad)
popf
adc
in
mov
jecxz
and
adc
in
cmps
int3
lds
pop
pop
push
inc
mov
imul
popa
in
mov
out
das
add
and
js
and
xor
sbb
addr16
push
push
outs
test
or
adc
test
mov
or
stos
adc
in
add
retf
lds
push
pop
pop
jne
pop
ja
icebp
and
pop
adc
xor
in
push
stos
add
js
dec
cmp
pop
dec
pop
xor
ret
movs
fsubr
mov
je
(bad)
xchg
mov
sub
les
inc
dec
cld
inc
dec
or
xchg
ds
xchg
push
pop
jne
aas
mov
dec
push
xchg
inc
mov
adc
aad
ja
ret
cdq
xchg
loope
mov
or
rcl
dec
dec
push
dec
sbb
xor
dec
dec
ja
sub
sbb
push
sub
movs
dec
or
int3
in
xchg
add
xor
and
dec
loop
xchg
and
sub
sbb
cdq
mov
mov
jmp
retf
gs
les
add
mov
aad
dec
sbb
push
fimul
sahf
adc
sub
lods
or
xchg
xor
inc
add
(bad)
fstp
mov
inc
je
push
ds
jo
and
into
ins
fadd
jb
and
call
adc
adc
dec
jle
sbb
xchg
test
adc
stos
push
pusha
in
adc
lock
(bad)
xor
inc
ja
shr
add
adc
outs
mul
jmp
dec
lock
int3
sahf
push
out
loope
loope
xor
leave
fdiv
std
in
ficom
je
push
fnstenv
(bad)
frstor
test
in
sbb
and
adc
adc
cmp
sbb
or
xor
adc
xchg
pushf
aaa
sub
daa
(bad)
inc
add
les
test
mov
xor
pop
mov
pop
sub
jp
pop
bound
and
enter
xor
inc
pop
scas
icebp
cwde
rcr
sti
or
pop
mov
xchg
js
fild
rol
dec
in
pop
xor
mov
in
or
test
inc
mov
paddusw
mov
pop
cmps
adc
bound
mov
jo
or
cli
scas
jne
fs
fs
pop
outs
in
(bad)
dec
xchg
movs
out
mov
push
adc
aas
jnp
pop
sbb
(bad)
jne
inc
inc
inc
loop
stos
dec
fisttp
or
aam
xchg
push
sbb
push
in
gs
or
mov
xor
jno
adc
adc
xchg
lods
lock
xchg
repnz
mov
jno
mov
pop
xchg
cmp
add
lods
add
js
sbb
pop
or
sub
lea
mul
movs
(bad)
(bad)
cli
and
rol
je
push
jb
inc
push
jecxz
gs
out
inc
aaa
arpl
adc
inc
cs
or
test
into
xchg
fisub
aas
sbb
sbb
out
bound
in
stc
push
xor
(bad)
test
fs
ror
sbb
sbb
(bad)
and
int3
stc
push
adc
mov
add
cmp
mov
cwde
push
pop
js
or
stos
mov
jecxz
int3
cmp
movs
adc
jnp
mov
mov
jbe
push
push
or
js
xor
ret
jmp
sub
adc
mov
inc
enter
xlat
inc
in
icebp
dec
add
js
cmps
inc
or
jecxz
mov
addr16
sub
xchg
sub
test
leave
ror
pop
lock
pop
adc
outs
add
lea
mov
test
movs
mov
jae
pop
ror
sbb
pop
les
adc
mov
mov
pop
sbb
xor
fstp
std
pop
jge
adc
cmp
fiadd
dec
pextrw
adc
dec
xchg
ret
shl
icebp
dec
jmp
sbb
sub
int3
inc
test
retf
jmp
push
loopne
dec
adc
aam
icebp
loopne
js
xor
inc
les
scas
dec
imul
stos
pop
int3
repz
pop
and
sub
stos
addr16
jge
cmps
add
xor
adc
jno
and
cmps
outs
xor
sub
lods
mov
test
push
scas
inc
retf
push
mov
int3
jne
cmp
gs
out
cmc
pop
sub
ss
mov
out
sbb
pop
push
push
sub
pusha
jo
push
xor
inc
(bad)
int3
pop
sbb
or
rcr
push
inc
jae
xor
fnstcw
fild
ins
movs
cmp
or
aad
hlt
pop
mov
clc
push
xchg
jae
std
ins
cmp
stc
mov
stc
or
inc
mov
inc
hlt
jg
ins
into
adc
ficom
call
pop
push
pop
dec
inc
(bad)
emms
cwde
xchg
jno
sbb
xchg
adc
aam
test
xchg
jl
imul
mov
sbb
cld
stc
dec
push
ror
xchg
in
jns
mov
repz
pop
mov
xlat
rcl
xchg
adc
pushf
push
retf
cmp
fnsetpm(287
stos
adc
call
mov
mov
pop
ret
outs
jmp
mov
and
pop
dec
in
mov
pop
inc
and
push
je
stos
pop
and
cmp
and
enter
cwde
adc
and
dec
mov
repnz
sbb
test
ja
in
sbb
fs
xor
dec
lahf
loopne
jo
xchg
pop
jl
cs
adc
mov
inc
sub
sub
sub
test
in
pop
retf
mov
stos
jns
int3
mov
stos
(bad)
sub
add
in
faddp
xchg
xchg
mov
nop
aaa
sub
cwde
push
xor
in
pusha
push
cmp
and
push
fs
mov
cmp
cmovb
dec
xor
scas
(bad)
loope
sub
add
cmp
mov
cwde
xor
add
inc
je
and
stos
pop
add
inc
pusha
jmp
imul
add
mov
jecxz
mov
push
cwde
int3
stc
aad
mov
xor
mov
push
fsub
adc
mov
push
sub
mov
rcl
pop
inc
aad
mov
pusha
js
xchg
jl
pop
or
mov
and
push
xchg
fisubr
stc
fisttp
inc
mov
stos
sar
cmp
hlt
xor
aaa
addr16
aad
outs
cmp
in
sbb
mov
ins
push
les
jne
or
xchg
jmp
push
out
add
push
or
inc
adc
cmp
dec
pop
test
cmp
inc
std
and
jo
pop
fidiv
push
sbb
aaa
sbb
sbb
push
loop
aad
push
sub
xchg
sbb
gs
sti
std
nop
outs
stc
pop
inc
jnp
push
push
mov
and
(bad)
stos
ds
das
mov
inc
mov
push
shl
stc
lods
mov
push
aaa
pop
sbb
sub
jae
sub
mov
movs
(bad)
scas
lock
inc
fild
daa
pop
push
in
int3
(bad)
fdivr
cmp
fnsave
mov
add
pop
movs
cmp
icebp
loopne
mov
fs
inc
mov
inc
sbb
or
pushf
iret
fidiv
push
pop
sub
mov
ins
xchg
pop
icebp
sbb
mov
jb
in
inc
aaa
int3
or
into
out
int
aas
inc
movs
xor
or
sbb
fwait
ins
sbb
ds
xchg
jnp
fdiv
fistp
out
lock
xor
(bad)
or
adc
in
jecxz
jecxz
jb
lods
xor
in
mov
leave
jno
mov
inc
inc
mov
mul
outs
cs
mov
rcl
sbb
idiv
push
push
out
add
(bad)
mov
fstp
push
loop
adc
xchg
out
pop
fistp
sub
shr
xchg
mov
or
push
dec
mov
frstor
mov
adc
pop
jmp
cwde
or
or
jl
mov
add
mov
cmc
jo
aaa
dec
dec
lea
xchg
mov
push
adc
cmps
mov
sahf
xor
push
bound
aaa
inc
jge
stos
jecxz
loop
and
pop
xor
mov
aas
aam
push
push
inc
inc
and
sub
dec
aad
mov
push
aaa
loop
ss
cld
ins
or
inc
or
inc
or
retf
or
xor
push
sub
adc
nop
xchg
fs
mov
or
jne
add
adc
movs
add
call
call
in
jmp
es
jne
out
jge
cmps
and
xor
cdq
mov
push
int3
out
jno
sub
rol
xor
test
pop
mov
adc
pop
push
sub
adc
and
jmp
push
adc
cdq
out
sub
adc
mov
pop
(bad)
scas
hlt
scas
lods
dec
sub
scas
std
inc
scas
out
sbb
add
sbb
mov
in
dec
call
sbb
stc
sbb
sub
mov
in
dec
scas
push
fdiv
jb
imul
ffree
mov
aaa
or
in
and
imul
mov
adc
push
add
fiadd
xor
add
sub
dec
ficom
xlat
pop
add
xor
hlt
(bad)
test
js
ret
inc
js
xor
pop
pop
sbb
into
dec
jp
adc
or
shl
jb
loopne
push
les
mov
jmp
push
pusha
or
mov
xchg
mov
je
sbb
int3
pop
out
aad
test
imul
inc
cdq
rcl
pop
(bad)
(bad)
repz
imul
and
or
sbb
imul
sub
jns
push
mov
es
bound
sbb
sbb
es
push
push
not
cld
outs
ret
mov
cmp
movs
sahf
push
add
fld
arpl
xchg
inc
xchg
or
push
je
aaa
movs
dec
jmp
xlat
popf
into
in
sub
enter
xor
loop
arpl
fiadd
cld
or
stos
call
mov
sub
(bad)
cmp
sbb
jmp
pop
out
inc
paddsb
pop
adc
pop
(bad)
wbinvd
sti
bound
xchg
mov
mov
inc
mov
enter
out
and
aad
stc
xchg
add
cmp
pop
add
pop
cwde
popf
push
pop
xchg
pop
dec
push
pushf
icebp
gs
add
add
adc
push
cdq
int3
jl
mov
fs
dec
cmp
push
xor
std
fadd
ins
(bad)
dec
scas
mov
repz
pop
(bad)
icebp
pop
mov
test
cmp
inc
sar
jl
adc
pop
call
in
mov
ret
mov
jb
js
js
xchg
push
cwde
jne
push
retf
pop
dec
adc
into
call
mov
mov
pop
xor
dec
add
adc
loopne
dec
inc
shr
popf
mov
data16
push
dec
cdq
or
arpl
inc
icebp
adc
push
adc
int3
pusha
outs
pop
shl
dec
sbb
mov
imul
xchg
cwde
cmp
pop
test
lods
mov
test
add
jno
in
ficom
inc
fadd
mov
cmp
fisub
and
pop
(bad)
sub
cwde
aam
add
jae
lock
add
xchg
push
sbb
ror
dec
xor
daa
clc
adc
add
pop
or
sub
test
test
das
out
jbe
and
push
ss
ret
pop
jmp
fisttp
sub
dec
retf
popa
cmp
mov
cmp
pop
cdq
outs
jge
mov
mov
inc
jecxz
xor
cmp
add
add
fs
mov
push
(bad)
std
jmp
and
push
push
push
repz
adc
mov
mov
and
in
add
xor
jp
xchg
cmp
cs
xchg
pop
sbb
daa
lea
sahf
mov
cmps
xor
jns
sub
add
xchg
(bad)
mov
xchg
adc
jmp
rol
scas
fist
sub
rcr
jb
mov
sbb
rcr
adc
and
pop
sub
pop
ss
fist
imul
adc
sbb
pop
fisubr
xchg
fmulp
cmps
icebp
adc
mov
rcr
push
add
pop
pop
jae
fwait
(bad)
shl
inc
les
push
adc
sti
jmp
xchg
cdq
mov
ja
out
loope
jmp
adc
cmp
aad
cmp
pushf
jmp
loop
jae
sbb
mov
cdq
jmp
arpl
mov
xchg
retf
out
jle
push
movhps
jmp
test
in
setge
ins
inc
inc
lea
inc
xchg
jmp
rol
or
adc
mov
repz
pop
xchg
(bad)
ds
mov
jp
cmp
jmp
cs
add
ja
xor
aad
push
cmps
fisttp
and
dec
cmp
sub
sub
inc
test
or
cmp
test
mov
inc
cmp
fistp
imul
push
inc
and
mov
add
out
cmp
sbb
test
in
enter
or
aaa
dec
inc
fst
pop
ins
adc
in
sub
icebp
das
test
or
push
or
inc
imul
pop
push
inc
dec
jecxz
repnz
adc
(bad)
push
jne
inc
sub
cwde
sbb
fistp
enter
imul
repnz
mov
mov
cmp
hlt
sub
sub
and
or
popf
imul
mov
xor
pop
mov
jle
aam
jecxz
inc
cmp
ret
aad
lea
jp
movs
clc
inc
jne
lods
pop
pop
out
sub
dec
in
fbld
aam
sub
aad
add
cwde
push
or
add
sbb
or
mov
mov
dec
or
cmp
mov
push
loope
out
scas
xor
push
and
cmp
sub
mov
icebp
cmp
loopne
imul
inc
pop
mov
repz
or
adc
rcl
pop
repz
adc
test
push
sbb
sahf
jmp
mov
cld
cmp
in
mov
popf
(bad)
adc
loope
mov
xor
aam
aad
aaa
dec
aaa
or
int3
popf
repnz
jb
aaa
or
das
add
xchg
dec
add
inc
ins
imul
icebp
cmp
adc
push
pop
loopne
dec
mov
sub
cmps
pop
push
cmp
pushf
pop
adc
xor
add
arpl
jo
lock
int3
out
and
(bad)
fst
test
or
adc
xchg
or
fdiv
mov
pop
adc
add
aad
mov
sub
pop
call
in
xchg
and
and
sahf
add
out
adc
adc
inc
xchg
or
jp
cmp
pop
stos
mov
fild
lahf
js
aad
lds
dec
jo
fidivr
xchg
mov
ins
jmp
jmp
add
inc
sbb
mov
sub
lea
push
fistp
mov
pop
add
or
add
jno
mov
neg
mov
or
cmc
pop
jne
clc
xor
sub
jno
lea
sbb
mov
ins
jo
dec
push
mov
aaa
into
ret
xor
loopne
arpl
das
push
sub
dec
rcl
lods
pop
adc
xchg
jmp
mov
xchg
lea
sub
retf
cmp
adc
xchg
mov
bound
adc
data16
dec
jge
xchg
sub
jo
inc
add
mov
xchg
addr16
(bad)
xchg
icebp
cmp
jns
jbe
fcomp
aaa
dec
adc
pop
lods
and
leave
sbb
push
and
push
icebp
xor
div
sbb
pop
adc
div
lock
sti
and
cld
mov
enter
push
xchg
push
xor
dec
cmps
jmp
aad
adc
mul
rcr
cdq
mov
fild
jge
sahf
outs
(bad)
aaa
and
aaa
push
aas
mov
pushf
fwait
dec
pop
imul
or
popa
clc
sbb
outs
int3
and
inc
fist
daa
inc
or
mov
int3
ret
fimul
mov
pop
repnz
sysexit
add
and
mov
sbb
jne
mov
mov
adc
in
mov
add
call
cli
call
pop
xor
addr16
arpl
xor
and
cmp
popf
scas
xlat
es
jp
fiadd
pop
add
jae
pop
test
inc
pop
leave
xchg
mov
jl
addr16
dec
pop
pop
push
or
gs
fcomp
mov
mov
pushf
ins
fcomp
out
js
pop
jmp
mov
sub
mov
nop
pop
jmp
nop
add
ror
adc
mov
sbb
(bad)
fcom
pop
mov
cmp
sbb
stos
in
add
aaa
int3
xchg
pop
jmp
dec
mov
and
pop
push
or
xor
aam
push
in
mov
sahf
cmova
or
imul
pop
stos
adc
cmp
cld
xor
sbb
cld
lods
(bad)
clc
int3
outs
fucom
sbb
cmp
add
movs
sub
clc
int3
repz
jno
clc
clc
jg
mov
sbb
or
pop
push
jl
(bad)
jns
push
dec
les
sbb
dec
arpl
addr16
nop
or
test
out
(bad)
popa
fisub
adc
mov
das
sub
and
imul
mov
fs
adc
xor
jl
xor
push
sub
mov
xchg
cmp
add
pop
sbb
xchg
test
(bad)
push
xor
leave
movs
pop
fsubr
aam
jge
pop
pop
cld
ss
and
out
sub
xchg
xchg
sub
jno
test
jmp
and
out
inc
leave
retf
cmc
aam
sbb
push
scas
out
pop
lods
adc
cmps
sbb
adc
fdiv
popf
pop
push
aas
inc
adc
or
pop
loopne
fcomp
sbb
int3
test
cmovno
jmp
in
out
mov
push
sbb
fadd
repnz
cld
add
xor
dec
cmp
pusha
cmp
xchg
dec
mov
sbb
adc
sub
xor
mov
repz
inc
mov
jbe
dec
retf
xlat
aas
test
jne
inc
cmp
sti
and
cmp
sub
ja
cs
inc
stos
add
pop
push
jne
xor
xor
or
or
and
adc
adc
xor
and
in
ds
popf
clc
test
fist
xor
mov
mov
mov
xor
and
(bad)
xor
inc
push
aaa
mov
xor
pop
pop
shr
pop
rcl
rcl
xor
les
fiadd
mov
es
inc
xor
xor
pop
(bad)
jmp
in
add
lahf
or
mov
or
icebp
xor
xor
xor
in
sub
arpl
clc
push
fwait
jl
retf
enter
jl
cmp
or
push
retf
or
xchg
clc
fwait
lods
mov
ins
mov
cwde
ja
push
sub
push
sbb
inc
inc
mov
mov
fs
adc
push
or
mov
int3
cmc
inc
fisttp
dec
pop
loope
icebp
nop
push
or
jmp
in
xchg
push
mov
add
fcom
and
or
push
inc
pop
ror
inc
pop
aas
addr16
ficom
mov
int3
into
test
sbb
inc
add
ins
add
push
stos
xchg
out
xchg
cdq
popa
lahf
xchg
fucomip
or
icebp
int
push
mov
lock
push
xor
dec
and
in
icebp
sbb
mov
inc
fnstenv
jg
mov
mov
pop
repnz
loope
add
packssdw
in
rcl
imul
js
or
sub
ins
pushw
gs
cmp
sub
push
cwde
icebp
in
cld
pop
add
cld
dec
or
scas
push
xor
outs
sbb
push
sbb
cdq
or
movups
jge
adc
ins
mov
les
jne
push
push
aad
xchg
xchg
cmp
adc
int3
mov
rcl
test
push
inc
inc
icebp
and
and
or
adc
push
daa
out
push
mov
ins
xchg
inc
or
out
and
jge
les
push
inc
or
adc
adc
xor
in
int3
mov
and
or
popf
or
push
inc
or
sbb
stos
and
inc
or
fwait
(bad)
jmp
xlat
aad
int3
mov
jnp
sub
stos
(bad)
(bad)
loopne
dec
push
cwde
dec
fwait
sub
adc
aaa
and
icebp
call
push
shl
aad
xor
cdq
inc
test
mov
loopne
add
pop
adc
or
cmp
pop
mov
pop
xchg
adc
sbb
(bad)
loopne
fsubrp
mov
cmps
(bad)
pop
sbb
mov
adc
aad
add
inc
icebp
jle
je
dec
sbb
loopne
neg
mov
imul
pop
pop
sti
mov
fstp
mov
cmp
mov
cdq
data16
shl
jle
and
and
cmp
(bad)
xor
and
or
ret
sub
xor
and
inc
mov
mov
inc
out
sub
pop
or
sub
push
xor
cmp
or
stos
xlat
das
jmp
scas
pop
xor
imul
or
sbb
ret
jp
xor
xor
adc
test
cdq
fadd
sbb
pop
adc
adc
jmp
pop
(bad)
jge
pushf
mov
push
adc
daa
mov
arpl
gs
add
push
or
xor
out
adc
push
movs
(bad)
in
loop
adc
shr
movs
mov
loope
pop
hlt
mov
cmp
mov
mov
aam
push
inc
int3
push
cmp
jb
inc
adc
out
pushf
or
mov
aaa
pop
push
inc
jge
cdq
dec
mov
test
sub
pop
mov
push
add
dec
cmp
or
add
in
inc
sbb
fcmovnb
clc
xor
pushf
cmps
push
clc
cwde
mov
sbb
rcl
fisttp
imul
add
jmp
cmps
test
shl
(bad)
push
sahf
adc
ss
loopne
cmp
fcom
pop
lods
mov
cmp
or
test
mov
xor
dec
out
shl
inc
mov
lock
pop
xor
inc
mov
(bad)
jo
int
stos
jo
xor
mov
mov
pop
jo
push
adc
nop
sbb
push
push
fst
movs
pop
add
pop
mov
div
mov
repnz
and
pop
add
dec
fidiv
dec
cmp
jmp
dec
clc
icebp
int
sbb
add
or
inc
pop
add
jp
push
jmp
adc
pop
inc
mov
mov
ds
add
into
and
ret
mov
and
or
adc
pushf
jne
fimul
in
mov
add
xor
sbb
pop
stos
or
(bad)
mov
jno
ins
aas
lods
pop
fistp
inc
push
or
adc
xchg
test
pusha
xchg
icebp
jnp
je
retf
adc
add
in
ja
repnz
rcl
cmp
retf
or
in
jo
and
cmp
loop
xchg
mov
aas
imul
test
retf
(bad)
adc
nop
push
icebp
jbe
mov
int
daa
fstp
(bad)
test
cmp
mov
sbb
push
les
xchg
loopne
dec
(bad)
jl
mov
jo
inc
rcl
push
inc
sub
in
push
push
mov
out
in
fwait
int3
jbe
sbb
push
mov
and
les
pop
or
adc
sbb
rcr
mov
daa
pop
adc
mov
and
xchg
(bad)
and
arpl
in
loop
test
adc
sub
pop
cmps
in
popf
fld
cwde
ret
aam
mov
repnz
mov
stos
pop
out
aam
xchg
inc
(bad)
jae
retf
or
daa
repnz
fnsave
or
mov
outs
and
fcmovu
int3
test
inc
jo
cmps
pop
fdiv
and
popa
jp
mov
das
adc
or
lods
adc
retf
(bad)
add
xchg
aaa
mov
add
(bad)
adc
xor
pusha
xlat
push
addr16
add
add
mov
push
xchg
popa
clc
movs
mov
sub
out
sbb
imul
sub
or
add
imul
stos
pushf
xchg
rol
lds
mov
ins
cwde
push
lods
push
(bad)
mov
daa
inc
dec
mov
cmp
and
mov
xchg
cdq
mov
xchg
fld
jbe
jl
inc
push
les
jecxz
and
leave
jb
push
push
mov
cmp
leave
push
mov
neg
lock
pop
xchg
push
cmp
inc
or
mov
aaa
adc
inc
in
pop
adc
push
and
or
imul
xlat
adc
sub
out
(bad)
aam
addr16
les
lock
ror
xlat
out
sahf
loope
add
jp
xor
pop
jnp
ins
(bad)
pop
push
xor
xchg
fild
fs
mov
sub
retf
fld
jmp
inc
sbb
adc
das
dec
and
mov
xchg
sub
hlt
add
retf
imul
sub
inc
sub
fs
and
cmp
test
jge
sti
sub
cwde
sbb
ins
sbb
nop
shl
sti
cmp
fist
jl
enter
enter
ja
out
mov
inc
sub
jmp
mov
in
test
lods
nop
dec
sti
adc
mov
pop
loopne
in
imul
cwde
add
popf
aad
stos
add
dec
ins
jnp
mov
cmp
dec
cmc
push
pop
arpl
cmp
xor
loope
push
scas
(bad)
fistp
call
push
fcomp
mov
lods
cmp
jl
in
(bad)
(bad)
jp
aaa
int3
(bad)
inc
cwde
inc
dec
pop
movs
arpl
dec
adc
jl
inc
call
ins
sti
mov
sbb
dec
mov
out
jmp
add
xor
mov
and
fdivr
lea
cwde
jmp
int3
sub
push
imul
in
adc
adc
add
adc
jg
pop
call
loopne
xlat
ficom
sub
mov
rcr
and
inc
mov
scas
push
push
jae
dec
cdq
push
lea
lahf
dec
test
adc
xor
int
dec
sub
mov
cdq
clc
push
add
mov
mov
jno
pusha
jns
loopne
xor
add
rcr
cmp
push
aam
fnstsw
repnz
add
mov
(bad)
cmps
loop
mov
push
mov
inc
cmp
mov
cwde
pop
or
pop
cmp
mov
pop
xor
inc
aaa
pop
adc
xchg
push
das
sub
cld
jmp
sub
jo
lahf
jnp
and
aaa
cdq
into
int3
gs
cmp
retf
jns
je
adc
lods
call
test
sub
add
pop
sbb
inc
ja
ss
dec
inc
jbe
sub
lock
jns
popf
pop
push
xor
adc
add
fld
push
int3
fiadd
aaa
adc
sbb
push
rol
add
test
mov
add
mov
das
add
and
xchg
add
xchg
pop
data16
ins
imul
in
lock
push
sbb
add
in
add
mov
fs
add
pop
ja
rcl
mov
pop
adc
or
adc
add
outs
mov
addr16
mov
xchg
loopne
push
mov
push
ret
loopne
fcom
aad
addr16
push
lock
aam
sbb
unpckhps
repnz
inc
mov
lock
push
ficom
dec
es
icebp
inc
and
inc
aaa
mov
repnz
pop
int3
cwde
pop
dec
bound
mov
movs
pop
in
push
bound
js
cmp
cmp
icebp
dec
pop
push
movs
call
addr16
push
rcr
sub
sahf
pop
lock
inc
stos
mov
push
or
mov
call
enter
js
and
push
adc
addr16
and
sbb
push
xchg
dec
enter
push
jb
mov
sub
cld
xor
call
stos
in
mov
lea
push
addr16
push
ror
xchg
xchg
iret
sbb
fdiv
sub
xor
pop
pop
mov
ss
or
cdq
jmp
jge
inc
fisub
mov
js
jmp
sub
or
pop
scas
adc
jb
cmps
add
shl
cwde
movs
jne
and
jmp
das
ret
jns
pop
or
jnp
add
jmp
lock
movs
dec
call
mov
dec
jmp
xlat
mov
xchg
addr16
scas
stos
test
inc
idiv
pop
jns
pop
retf
ins
mov
push
or
jmp
sub
adc
pop
dec
xor
les
pop
leave
or
inc
adc
adc
and
sbb
mov
xor
shr
jmp
loop
mov
das
imul
cmovns
jecxz
and
sbb
in
and
push
push
adc
push
sbb
push
ins
dec
loope
aaa
jbe
(bad)
mul
mov
and
adc
push
xchg
adc
sbb
in
and
or
or
jno
mov
inc
inc
or
mov
adc
retf
test
cmp
in
xchg
or
or
in
sbb
add
cli
mov
jo
icebp
dec
push
xor
call
pop
sbb
dec
(bad)
inc
jle
pop
mov
and
push
mov
jle
cld
iret
cld
mov
inc
cld
out
dec
std
es
cli
rol
mov
adc
jp
cdq
jl
fld
scas
xchg
cmp
mov
adc
dec
or
adc
adc
pop
inc
out
add
or
out
sbb
or
in
mov
mov
push
enter
std
mov
inc
add
jl
xchg
jae
out
push
mov
(bad)
in
cmp
pop
mov
and
xchg
sti
jne
mov
xor
addr16
and
cld
icebp
adc
inc
call
add
repnz
mov
ins
jno
jne
bound
jmp
lds
sbb
xor
mov
push
mov
dec
scas
(bad)
and
pop
xlat
mov
aas
loopne
adc
dec
inc
rcr
mov
pop
out
xor
stos
shr
js
xchg
mov
adc
in
int3
mov
mov
call
mov
xor
add
in
inc
outs
adc
cli
xor
xchg
mov
mov
and
xchg
mov
out
and
mov
jns
add
es
sub
repnz
push
call
loopne
add
or
xor
test
sub
sbb
test
or
lods
pop
mov
push
shr
jnp
jnp
mov
jnp
loop
push
push
xchg
mov
and
mov
fcomi
jno
dec
push
out
inc
not
cmc
push
test
dec
pop
mov
das
outs
sti
jg
in
outs
add
out
test
dec
add
aam
xor
pop
and
adc
push
leave
mov
lods
mov
sti
ins
fisub
aas
ins
sub
dec
inc
in
push
xchg
push
mov
mov
jmp
cmp
jmp
xchg
addr16
adc
pusha
lock
imul
pop
inc
fmul
lock
adc
cmp
adc
lahf
idiv
les
push
jl
mov
cmp
aaa
mov
and
retf
cmp
sbb
inc
xchg
cmp
(bad)
xor
aaa
push
push
push
push
mov
cmp
test
jb
test
inc
in
dec
cmps
pop
mov
adc
mov
out
jcxz
ja
xor
ins
call
stos
mov
xor
sub
pop
int
js
aad
xchg
mov
das
and
push
das
mov
jno
lods
mul
fcomp
loop
add
mov
repz
push
or
inc
addr16
sbb
adc
pushf
pop
mov
mov
shr
das
stos
push
add
sbb
ret
dec
push
or
xchg
aam
sbb
loopne
jmp
pop
(bad)
icebp
mov
push
sbb
or
xlat
ror
std
out
fisub
inc
test
xor
in
lahf
mov
xchg
fmul
(bad)
push
dec
sti
ds
mov
add
dec
and
push
cs
mov
fisub
test
shr
or
sbb
(bad)
sahf
les
mov
mov
clts
rcr
ins
imul
mov
add
sahf
and
inc
mul
out
mov
stos
ret
das
push
and
imul
inc
pop
or
jb
test
mov
push
sbb
xor
cmp
xor
sbb
xchg
mov
shr
nop
dec
push
jno
xchg
push
and
xor
add
jmp
sbb
leave
xchg
sbb
adc
or
push
icebp
fcmovnu
and
xlat
popa
loope
scas
in
mov
fidivr
jg
mov
mov
inc
push
pop
xchg
out
lds
js
nop
cmp
cdq
stos
sbb
loope
sbb
mov
jnp
movs
icebp
adc
xchg
dec
addr16
dec
pop
pop
fcomip
fsub
js
stos
xor
das
xor
dec
js
xor
xchg
dec
scas
out
cmp
push
cmp
xchg
out
sub
jnp
std
aaa
adc
leave
push
jp
fistp
cdq
cmp
int3
inc
cmp
push
mov
ins
mov
stos
push
in
add
push
dec
(bad)
bound
push
xlat
cwde
mov
jge
fnsave
or
inc
dec
test
pop
inc
cmp
outs
imul
(bad)
addr16
call
add
stos
adc
xor
repnz
je
lods
and
inc
mov
jmp
mov
sub
push
in
jno
ror
int3
jbe
mov
mov
and
or
popa
sbb
(bad)
pop
cmp
fcomp
test
call
repz
add
sbb
cld
mov
inc
and
(bad)
cmps
push
lods
push
aaa
imul
xor
aaa
xor
fisttp
out
jl
xlat
mov
and
test
mov
jno
mov
mov
rcr
pop
add
repnz
icebp
or
lahf
cdq
jge
cdq
inc
ss
movs
retf
sbb
lock
movs
sbb
retf
fnstenv
fisttp
lods
sbb
pop
or
lods
pop
les
dec
popf
retf
push
inc
jp
adc
inc
adc
xchg
push
mov
sbb
fist
cmps
mov
xor
fadd
push
bound
jnp
add
adc
or
sbb
(bad)
xlat
mov
shr
jne
inc
cmp
aam
sahf
fcom
mov
sbb
mov
cmp
dec
inc
mov
inc
out
mov
add
xchg
nop
neg
and
punpckldq
ins
or
xchg
int3
test
jmp
pop
sub
fild
sbb
pop
ja
pop
fwait
shl
jp
adc
push
adc
mov
adc
push
push
pop
sbb
imul
push
push
out
shl
dec
pop
ins
in
cld
sbb
rcl
test
pop
in
sbb
sub
movups
jl
jle
cmp
jb
mov
mov
cli
mov
xor
and
mov
daa
mov
cpuid
xor
lahf
xchg
and
and
add
xor
int3
cmp
xor
sbb
sub
jae
jle
popf
pop
jmp
xor
daa
out
cmc
dec
call
imul
sub
or
add
add
jl
cs
adc
ins
xchg
or
ds
xor
pop
outs
sub
or
js
xor
xor
dec
call
push
lods
mov
xchg
(bad)
call
cmp
sbb
jl
cmp
xchg
cmp
pop
mov
cmp
in
mov
mov
jmp
or
sbb
add
in
xor
data16
in
int3
cdq
js
call
push
fadd
cdq
pop
jne
sbb
dec
divps
jne
push
xor
or
inc
cmc
ret
mov
sahf
and
jae
ja
mov
jle
movaps
iret
out
dec
push
pop
gs
push
in
das
and
aas
xchg
pop
sbb
inc
inc
xor
ins
xor
or
pop
adc
int3
mov
mov
lea
cmp
cmps
or
fdiv
ss
add
and
bound
xchg
aad
jne
jmp
adc
inc
xor
and
sub
adc
(bad)
xor
les
cmp
add
cld
in
cwde
mov
adc
sbb
sbb
shr
fadd
inc
leave
test
inc
loopne
add
cmp
loopne
fcom
and
das
out
(bad)
adc
pop
ja
dec
dec
jbe
jle
mov
mov
pop
dec
xchg
add
cwde
int3
sub
adc
xor
add
pop
mov
adc
lods
enter
jno
clc
pop
mov
mov
mov
mov
popf
mov
jnp
stc
scas
mov
and
ror
pushf
sub
iret
xchg
dec
and
cmps
push
sub
stos
sub
cmp
lods
retf
clc
daa
inc
ins
jae
xor
gs
(bad)
pop
add
ins
xchg
xor
pop
xchg
sahf
add
xchg
xor
push
mov
test
pop
mov
xchg
sub
lods
pop
mov
rol
mov
xor
sub
mov
add
pop
xchg
xor
inc
jae
jb
mov
pop
dec
adc
pop
(bad)
lock
(bad)
loope
add
(bad)
fisttp
mov
das
sub
inc
pop
or
xor
idiv
cmp
mov
int3
aad
std
popf
add
test
mov
or
ficom
pop
sub
mov
mov
adc
mov
mov
sbb
and
push
or
jb
in
push
cmc
or
scas
and
lods
or
pop
dec
push
dec
pop
jp
cmp
adc
sbb
or
push
sar
cmp
add
bnd
sbb
ffreep
push
iret
xor
int
xor
push
inc
mov
push
bnd
ins
data16
clc
and
pop
cmp
mov
retf
xor
mov
rcl
xchg
fsub
out
mov
mov
iret
push
xchg
sub
int3
xor
mov
inc
dec
adc
arpl
ret
mov
pop
add
sub
inc
pusha
cmps
pop
clc
pop
push
movs
xchg
xor
push
jmp
push
dec
mov
jecxz
sbb
dec
cmp
sahf
jno
inc
out
inc
shl
sbb
pushf
test
mov
loop
shl
sub
aad
add
hlt
fld
iret
cmp
into
int3
cwde
fwait
mov
popf
out
xchg
push
aaa
sub
imul
mov
mov
sub
(bad)
jl
mov
call
xchg
push
sar
add
ret
push
enter
aad
xor
or
add
loope
loop
push
sub
call
dec
jecxz
pusha
call
aas
mov
int
(bad)
xchg
mov
aas
ficom
push
inc
sbb
mov
cmp
mov
and
mov
pop
and
retf
mov
push
fwait
sub
fimul
call
push
dec
adc
add
xchg
std
retf
and
inc
neg
pop
sbb
lea
cmp
loope
push
out
mov
add
in
mov
mov
cmp
scas
cmp
repnz
stos
sbb
inc
pushf
daa
pop
(bad)
or
adc
inc
inc
cmp
or
cmp
push
dec
lods
jecxz
and
adc
pusha
push
(bad)
jbe
inc
or
mov
mov
(bad)
xlat
aad
dec
xchg
out
add
dec
pushf
js
pop
sub
pop
push
sti
mov
imul
sub
cwde
push
outs
inc
or
cwde
call
fild
add
hlt
pop
push
push
lds
mov
movs
fmulp
cmp
jbe
lods
mov
adc
dec
xchg
test
loope
add
jg
and
sub
pop
retf
(bad)
lock
xor
popa
pop
cmp
outs
pop
push
int3
enter
jecxz
out
gs
cmp
xchg
push
jmp
push
dec
fisubr
mov
push
xor
push
or
je
icebp
inc
inc
add
fbld
mov
sub
daa
and
call
cmp
cld
cmp
xor
adc
movs
(bad)
not
cmps
lds
sti
mov
sti
add
aas
aaa
fsubr
mov
fwait
test
xor
push
cwde
je
cmps
les
or
pop
add
cdq
fs
xor
pop
loope
lahf
inc
sbb
xchg
pushf
(bad)
cmc
xchg
or
addr16
cmp
cmp
dec
aam
sub
cli
cmp
mov
das
push
ss
cwde
add
sbb
fmul
adc
push
jnp
xchg
int3
mov
cmp
test
adc
or
add
sbb
ror
int3
jl
or
repnz
stos
ins
mov
cld
js
xor
loope
sub
xor
cmp
jmp
cmp
xchg
imul
add
add
pop
mov
add
nop
adc
xchg
repnz
arpl
rcr
pop
jne
stos
out
in
ds
sub
sub
pop
adc
adc
sahf
inc
adc
sub
cwde
xor
mov
adc
sub
xchg
repz
pushf
dec
push
or
adc
ins
xor
(bad)
js
ins
sbb
nop
xor
fisub
or
mov
mov
lds
inc
cld
cli
cwde
or
mov
jmp
in
pop
and
imul
adc
repnz
sbb
mov
dec
arpl
push
or
mov
fistp
into
repnz
jns
push
pop
stos
pop
adc
pop
jge
push
pop
or
cmc
push
mov
imul
neg
shl
scas
push
les
pop
cmp
loope
aaa
sbb
shl
in
adc
push
es
retf
mov
rcr
jmp
jns
mov
mov
movs
sub
inc
pop
and
loopne
fadd
add
cmps
adc
or
pop
pop
ja
repnz
ja
sbb
add
adc
add
jmp
jnp
aad
sub
pop
pop
jae
int3
pop
cmp
pop
(bad)
js
jge
or
sbb
and
stos
jae
stc
retf
sti
mov
inc
jmp
sbb
sti
adc
sbb
sub
aam
pop
cmps
and
mov
cwde
adc
sbb
pop
mov
cmp
xchg
fwait
cmp
xor
pop
mov
addr16
cmp
int3
scas
ret
jne
imul
into
dec
add
jo
push
clc
imul
int3
jle
cmp
mov
cs
lea
leave
add
nop
daa
scas
add
es
lods
push
div
cli
retf
xor
sbb
shl
out
aaa
jns
rcl
add
inc
sub
or
retf
ror
sub
outs
mov
fwait
dec
adc
mov
int3
or
loopne
test
ins
adc
xchg
adc
sbb
push
jno
jp
dec
adc
fdiv
push
sub
pop
jp
and
pop
enter
cmp
xlat
push
pop
cs
add
pop
and
mov
push
xor
retf
mov
sbb
out
pop
jbe
pop
in
in
mov
add
pop
mov
fisub
inc
or
inc
pop
add
and
or
mov
sub
test
bound
push
sub
xchg
int3
test
push
hlt
xor
adc
push
cmp
mov
inc
imul
adc
imul
sub
ss
cmp
in
xor
mov
stos
aad
add
mov
es
sti
mov
xor
add
mov
dec
(bad)
test
stos
pop
ins
xchg
cmps
xchg
retf
pushf
pop
jns
xor
add
test
cmp
xchg
push
daa
cmp
and
addr16
jge
mov
lds
rol
sub
xor
bound
pop
mov
pushf
adc
std
loope
clc
lahf
mov
or
mov
loopne
stos
xor
cld
lds
pop
ret
out
or
cmp
(bad)
lahf
push
(bad)
and
mov
in
imul
xor
cwde
lods
pop
(bad)
out
sub
dec
pop
adc
add
pop
adc
in
pop
xchg
lods
push
mov
xor
inc
(bad)
cmp
mov
sbb
or
cmp
movs
cmps
stos
ja
and
mov
repz
pop
aas
inc
sbb
imul
fcomp
pop
fwait
push
mov
int3
loop
mov
inc
shl
cld
enter
ret
sbb
loop
jmp
fiadd
std
mov
fsubr
adc
int3
mov
jne
psubusb
test
ror
mov
pop
mov
inc
inc
jb
aaa
sar
addr16
(bad)
xchg
mov
test
cs
pop
aas
push
dec
pop
and
rcr
addr16
or
fsubr
popf
shl
int3
and
mov
stos
shl
and
rcl
mov
pop
xor
sbb
and
or
pop
cmp
and
push
inc
mov
sbb
or
sysenter
out
push
call
push
mov
pusha
std
(bad)
jg
(bad)
push
mov
xchg
popf
or
dec
out
icebp
outs
xor
push
test
lahf
xor
int3
jp
and
movs
inc
add
or
(bad)
enter
xor
or
sbb
lods
jecxz
scas
imul
dec
out
fadd
mov
or
or
das
sub
js
xor
push
push
inc
jbe
add
fld
repnz
mov
std
loopne
test
call
sti
jp
aam
rcl
add
mov
cmps
or
ss
lods
jno
test
or
mov
add
jae
clc
pop
cmovae
nop
(bad)
fs
pop
fmul
fiadd
out
pop
fcomp
or
rol
pop
fnstcw
mov
cld
jno
cld
add
(bad)
add
dec
jmp
ret
fidivr
shl
xor
jo
sub
pop
push
mov
push
movs
jo
push
add
mov
iret
and
mov
or
mov
pop
test
pop
mov
push
jmp
je
jno
shr
push
and
nop
fcomp
lods
mov
aas
cmp
push
pushf
mov
and
sub
pop
mov
out
mov
lock
data16
ret
stos
adc
cmp
xchg
adc
or
out
inc
mov
push
in
dec
out
mov
xchg
fsubr
ror
cmp
or
sti
lods
jp
dec
pop
push
xor
jle
inc
fdivr
pushf
jno
mov
adc
or
push
addr16
ins
or
hlt
pop
js
sub
mov
and
shr
add
inc
loop
add
rol
in
mov
bound
pop
aam
mov
sbb
sub
stos
sbb
adc
cmp
inc
call
xor
sahf
lahf
jl
inc
mov
sub
stos
cwde
pop
jecxz
jb
mov
fld
mov
cmp
inc
add
retf
dec
outs
push
dec
ret
fdivp
mov
jno
jo
mov
fldl2e
mov
loope
data16
ss
cmp
pop
pop
icebp
sbb
jmp
cmps
add
jb
pusha
xor
xor
gs
cld
push
cmp
pop
loope
jns
cmp
int3
mov
adc
mov
cli
or
xchg
(bad)
xchg
or
dec
xchg
xchg
rsm
aam
fcom
out
inc
and
and
xor
out
mov
pop
pop
add
jb
(bad)
mov
in
mov
cmc
scas
cmp
pop
add
sbb
icebp
pop
movs
dec
dec
lea
into
loopne
iret
pop
imul
ins
pop
inc
inc
add
stos
fmul
out
repnz
test
shr
sub
xchg
xlat
add
dec
cs
out
or
push
fisttp
dec
dec
pop
xchg
cwde
mov
adc
fild
jmp
retf
pop
mov
pop
fisub
push
sbb
push
cmp
sub
nop
hlt
adc
and
retf
or
add
and
xor
(bad)
sub
mov
and
xor
cmp
and
xchg
dec
jns
cld
lods
xchg
test
sbb
xchg
fisub
xor
push
das
jmp
inc
push
add
stos
xor
in
sbb
ficomp
dec
int
jle
lahf
jae
and
mov
mov
dec
inc
xor
push
out
retf
rol
or
pop
aaa
cmp
or
and
sub
mov
adc
and
repnz
in
arpl
dec
mov
sahf
sub
mov
mov
pop
aaa
push
test
cmp
adc
sub
imul
fsub
mov
adc
dec
mov
js
(bad)
in
fwait
sub
syscall
pushf
lods
xchg
dec
fwait
xchg
or
sbb
ins
inc
add
sub
sbb
sbb
scas
lock
adc
xor
test
mov
in
aad
push
add
xor
hlt
jmp
pop
dec
popf
rol
rcl
dec
cmps
cmp
or
cld
cmp
jl
add
mov
mov
fnstenv
ret
or
ds
stos
add
add
cwde
pop
mov
loopne
int3
xor
jmp
mov
lea
mov
adc
call
int3
sar
sbb
int3
mov
nop
out
gs
int3
rcr
xor
lods
xlat
or
cmp
xor
pop
xor
sti
pop
mov
pop
data16
cmp
pop
dec
pop
sbb
outs
sti
push
test
sahf
dec
sbb
icebp
inc
and
push
sub
call
jmp
icebp
cs
mov
pop
sbb
int
fstp
int3
mov
cmp
push
div
in
idiv
scas
inc
sub
lods
lahf
(bad)
jne
fadd
cmp
xchg
sbb
push
into
aad
cld
add
call
cmps
mov
xchg
sbb
mov
(bad)
addr16
test
jbe
cmp
xchg
and
loopne
or
cmp
or
cmc
ds
adc
lahf
dec
pop
xchg
es
pop
add
pand
jo
mov
or
addr16
xor
sub
inc
popf
lods
movs
stos
mov
test
arpl
pop
inc
test
(bad)
push
imul
imul
sbb
mov
mov
movs
fnsave
mov
mov
popf
adc
cmp
imul
jne
inc
loope
mov
aaa
mov
or
in
mov
add
movs
fcomp
jle
int3
out
pop
scas
sub
sbb
jno
xchg
shl
jl
pop
jle
mov
fistp
xor
call
sahf
xchg
sbb
adc
jmp
and
aad
xchg
sbb
xchg
pusha
sub
pop
sub
xchg
push
inc
in
mov
or
xor
icebp
in
push
jle
data16
out
in
and
or
inc
enter
inc
(bad)
mov
add
fwait
pusha
leave
xchg
das
pop
cmp
stos
inc
out
fwait
add
bound
cmp
jecxz
(bad)
loope
int
inc
add
pop
adc
ins
ret
pushf
or
xor
jge
les
out
inc
adc
push
gs
cmps
mov
cmp
rcr
push
test
push
xchg
cmp
pop
adc
cwde
add
jmp
xor
add
push
adc
adc
push
pop
inc
test
xor
and
sub
push
cmp
dec
(bad)
pop
pusha
pop
jmp
cmc
(bad)
aam
cld
ret
xor
inc
mov
in
out
or
ins
gs
repnz
jnp
cwde
jmp
popf
clc
add
cmps
test
and
fadd
inc
mov
or
and
mov
inc
lods
test
mov
inc
adc
xchg
xchg
test
push
jp
in
xor
inc
or
and
pushf
add
addr16
push
mov
pop
in
jbe
hlt
add
inc
ins
or
mul
mov
aam
jmp
mov
fdivr
call
xor
ret
loopne
cld
out
jmp
mov
in
push
imul
jmp
inc
out
jmp
cmp
mov
mov
xor
mov
mov
sbb
hlt
inc
sbb
sub
imul
mov
pop
jnp
dec
daa
int3
xor
call
gs
inc
lahf
test
ret
pop
add
sahf
jg
and
ficom
xor
dec
push
mov
(bad)
xor
cmp
in
push
push
dec
sub
lds
xor
pcmpgtd
pop
or
idiv
jae
mov
push
mov
mov
repz
fild
fild
xchg
idiv
jmp
xchg
cmc
dec
not
jnp
test
mov
test
and
dec
xor
retf
inc
cld
retf
inc
lods
add
cs
mov
mov
pop
mov
adc
jb
sbb
xor
pop
(bad)
sbb
pop
shl
scas
jb
push
and
ror
test
fprem1
push
cdq
loope
pusha
add
mov
jmp
inc
daa
cmps
adc
mov
sub
clc
movs
adc
pushf
lahf
pop
rcr
or
aad
nop
cwde
sub
fld
cdq
sub
ins
stc
cmc
xchg
sub
movzx
les
add
and
dec
xchg
fdivr
dec
sbb
(bad)
out
mov
pop
push
lock
nop
je
and
mov
push
(bad)
fild
cmps
movs
xor
dec
gs
retw
imul
pop
fwait
scas
adc
icebp
cmp
or
cmp
or
xchg
xor
xor
sar
add
mov
push
inc
xor
inc
je
mov
xchg
mov
or
loopne
movs
mov
lods
ror
add
js
adc
daa
cmp
or
inc
mov
pushf
dec
jne
ins
xor
mov
mov
inc
setl
out
and
and
aaa
and
inc
je
call
inc
add
call
xlat
jle
lock
test
mov
into
das
jp
lds
adc
sbb
jmp
call
fdivr
sahf
dec
stos
ret
pop
or
std
mov
and
int3
scas
ffree
xchg
inc
mov
jecxz
xor
pop
(bad)
sub
mov
mov
test
or
cwde
xchg
data16
aam
add
pusha
call
retf
ins
ror
pop
ret
lods
rcl
sbb
push
cli
jg
les
nop
in
cmovb
cmps
cmp
lods
loopne
push
(bad)
xchg
call
out
dec
xchg
lahf
addr16
pop
cmovle
mov
xor
ins
cmc
iret
and
(bad)
punpckhbw
and
gs
(bad)
cmp
push
xor
sbb
jb
adc
pop
xor
sbb
(bad)
pop
dec
mov
in
mov
xor
jno
fwait
sbb
mov
jecxz
adc
das
pop
jo
cwde
(bad)
cmp
xor
jae
xor
sbb
inc
fwait
xor
adc
add
push
or
idiv
pusha
shl
fsubr
push
mov
aam
adc
dec
push
xor
les
or
js
inc
push
pop
lods
add
mov
xor
sub
adc
adc
fstp
mov
out
xchg
fdivrp
xchg
aam
lods
mov
and
fiadd
pop
cdq
jmp
xor
(bad)
mov
cmp
(bad)
mov
lock
mov
leave
cli
movs
arpl
sub
sbb
mov
add
(bad)
pop
push
stos
cdq
ja
jo
mov
test
ret
sbb
icebp
loopne
ins
aam
aaa
in
(bad)
stos
pop
push
hlt
inc
addr16
aaa
jge
jl
xor
dec
push
adc
call
or
loopne
and
xchg
and
and
ficom
stc
cwde
fwait
shl
rcr
inc
and
or
inc
aaa
outs
mov
aam
pop
dec
mov
jne
inc
xchg
pop
imul
push
psllw
add
ror
dec
arpl
loope
pop
and
or
mov
jp
cmp
pop
in
daa
fsub
dec
pop
ins
adc
push
jg
xchg
xor
cmp
or
cld
retf
mov
lock
int3
sub
aad
outs
jmp
(bad)
popa
jno
xlat
xchg
fmul
les
int3
mov
sub
imul
xor
loopne
xchg
cmp
push
push
iret
inc
das
pop
and
ins
dec
jmp
(bad)
add
fsubr
out
push
test
inc
scas
adc
sbb
sub
ins
cmc
enter
xchg
sub
retf
pop
aam
mov
pop
xor
inc
in
fbstp
and
and
and
sub
adc
retfw
xchg
lods
pop
xor
mov
xchg
aaa
jb
ja
push
xchg
int3
out
clc
stc
in
stos
or
cmp
ins
aad
int3
lods
xlat
out
push
out
sbb
rcr
out
leave
jmp
and
xor
sbb
sub
mov
int
dec
movs
fist
lahf
jnp
mov
(bad)
push
dec
aam
clc
call
sub
js
jp
lock
jg
das
dec
cmc
pushf
jbe
lods
cwde
jg
cwde
and
add
into
ja
or
int3
and
mov
mov
jge
mov
jne
jo
ja
mov
lds
outs
or
jnp
adc
xor
or
sbb
jge
dec
sub
scas
pop
add
fwait
inc
mov
cwde
xor
rcr
aas
cmp
xchg
test
inc
or
add
cld
cdq
sti
sub
imul
pop
xchg
fcomp
pop
and
aas
adc
add
outs
adc
mov
pop
inc
aad
inc
into
lahf
js
punpcklbw
or
pop
add
enter
fst
daa
jmp
cmc
es
mov
or
cmp
push
adc
mov
adc
cmp
add
dec
jne
in
push
(bad)
push
outs
scas
pushf
les
adc
and
add
nop
test
xchg
or
add
xor
js
push
sub
adc
xchg
pop
cmp
xor
push
out
push
cdq
xchg
adc
mov
int3
clc
sbb
icebp
xor
ret
ret
push
ror
mov
mov
fnsave
shr
ss
or
xlat
xlat
mov
jp
js
inc
std
push
cmp
pop
jno
out
or
and
inc
and
test
aaa
arpl
mov
mov
sub
or
stos
push
jmp
pop
fmul
arpl
cdq
mov
inc
cmp
dec
stos
aaa
je
sbb
dec
xor
pop
bound
loopne
push
rcr
enter
jnp
lock
cwde
stc
sub
cmps
xor
and
push
push
sbb
cmp
push
sub
xchg
sub
cdq
cld
add
aad
dec
or
push
or
je
xor
aam
pop
push
mov
sbb
add
or
int3
jl
pop
loopne
xchg
pop
sub
sub
push
fcmovu
fwait
add
sub
ret
or
pop
pop
mov
pop
imul
mov
jle
cmp
sub
data16
xchg
lods
mov
pop
push
xor
add
call
or
nop
lds
mov
dec
les
ret
mov
xchg
push
cmp
sbb
jnp
lods
push
jb
jp
fisttp
pop
mov
jbe
pushf
pop
cmp
adc
pop
in
mov
aaa
aaa
jle
inc
xor
cld
and
jno
jle
addr16
sub
mov
shr
push
sbb
jae
or
into
and
cwde
dec
mov
sub
xor
fs
cwde
adc
jb
cmc
push
cs
mov
sbb
imul
adc
pop
xor
sub
movs
sbb
jg
cmp
push
repnz
in
repnz
pop
retf
addr16
jo
cmps
pop
cmps
push
jnp
dec
adc
inc
xchg
cs
fwait
nop
das
call
aad
loope
and
xor
ds
push
push
mov
lock
out
shr
les
stc
and
adc
imul
dec
inc
xor
(bad)
xchg
mov
jmp
dec
xchg
adc
jmp
xchg
pop
clc
es
sub
push
fcomp
xor
xor
sub
pop
sbb
adc
sbb
fcom
mov
xor
cmps
jmp
retf
mov
shl
mov
test
ja
jp
ins
out
(bad)
or
in
xchg
dec
pusha
in
into
(bad)
aaa
or
out
mov
fcom
sbb
jo
out
push
add
add
dec
shl
add
bound
jnp
pop
push
or
cmp
js
or
pop
pop
sbb
dec
add
mov
push
push
addr16
lds
cmc
pop
shl
(bad)
mov
mov
arpl
mov
mov
dec
push
(bad)
and
test
jg
loope
xor
push
inc
jo
leave
int3
push
enter
pusha
cmp
pop
pop
push
imul
inc
dec
icebp
std
in
jmp
push
mov
mov
aaa
inc
sbb
push
in
mov
mov
and
sub
sbb
inc
or
lahf
sbb
fstp
popf
jle
or
pushf
mov
mov
mov
sbb
cwde
retf
mov
push
in
sub
std
ret
test
fs
or
out
icebp
sub
not
fsub
xchg
aas
pop
cdq
cli
xchg
mov
inc
movs
dec
xlat
inc
jl
clc
inc
sbb
out
pop
data16
loope
icebp
rdpmc
xor
sub
jae
pop
sbb
sahf
pop
push
add
loope
mov
imul
sti
mov
adc
inc
pop
nop
out
pop
cmp
outs
xchg
xor
(bad)
mov
mov
cmc
(bad)
jmp
addr16
xchg
mov
and
jp
cmp
sub
and
jle
nop
lods
ds
lahf
and
dec
add
push
pop
inc
or
rcr
mov
pop
jp
push
fbld
clc
push
movs
cmp
adc
mov
int3
aas
inc
push
popf
dec
adc
div
into
or
or
aaa
retf
nop
add
mov
cwde
mov
scas
add
xor
mov
out
xor
stos
fstp
lahf
sbb
int3
jne
jb
in
or
cmp
cmps
fisubr
mov
and
push
push
jmp
ss
jnp
xchg
adc
bswap
pop
(bad)
dec
lock
not
(bad)
push
fcom
cmp
addr16
jae
pop
int3
xlat
adc
adc
sub
mov
ficom
dec
stos
pop
aaa
xchg
jb
mov
mov
mov
and
push
mov
mov
sbb
enter
imul
addr16
xor
aad
add
or
push
sub
jno
call
addr16
lea
test
xchg
int3
mov
and
pushw
xor
imul
push
xchg
push
movs
adc
movs
cmp
push
xor
popf
stc
mov
mov
test
pop
sbb
rcl
mov
cli
aam
test
xchg
mov
mov
fwait
cmp
and
ins
mov
aam
mov
jo
mov
xor
or
add
mov
dec
test
nop
push
push
ficom
pop
or
or
je
push
xor
or
mov
add
fwait
jo
rdtsc
int
adc
(bad)
loopne
sub
sub
and
iret
cmp
add
shl
mov
or
jle
mov
ret
mov
jns
or
mov
mov
push
iret
xor
jl
ss
sub
mov
push
imul
lods
fadd
and
ins
inc
in
push
nop
cmps
or
inc
xor
mov
jle
xchg
adc
inc
push
inc
cld
pop
call
ja
lahf
inc
mov
fadd
and
shl
ins
add
cwde
les
adc
fdivr
cdq
sahf
push
ins
ins
pop
jl
sti
int
mov
arpl
push
(bad)
jbe
xor
arpl
out
or
mov
push
xor
jecxz
pop
gs
cmp
adc
xchg
loopne
jne
cmovle
cmp
call
and
ds
mov
xor
out
shr
dec
dec
leave
push
std
aas
mov
sti
repz
cmp
in
xor
sub
adc
loop
push
inc
and
mov
imul
loop
(bad)
pusha
cmp
add
push
call
dec
leave
rcr
pop
xor
jge
call
or
sbb
mov
jg
call
xlat
es
(bad)
outs
pop
(bad)
retf
cmps
pop
dec
cli
fiadd
sbb
cwde
mov
dec
neg
shl
out
jbe
addr16
and
das
(bad)
mov
pop
mov
fidivr
aam
shl
adc
xor
test
stos
mov
mov
imul
inc
inc
outs
jmp
aad
mov
mov
mov
loop
mov
pop
out
fsub
sbb
inc
dec
cmp
shr
out
movs
mov
push
adc
adc
ret
inc
lea
jmp
cli
or
fbstp
inc
mov
jo
inc
adc
inc
and
and
in
xor
xor
aad
loope
test
xchg
inc
pop
mov
or
out
xchg
sub
and
popa
inc
call
loopne
mov
mov
stos
inc
mov
inc
call
adc
sbb
xor
pop
pslld
sbb
icebp
in
pop
xchg
sub
and
les
pop
or
jmp
mov
xor
jl
inc
test
pop
lods
cdq
and
data16
rcl
and
xchg
pop
add
in
or
cwde
xor
cmp
ins
cdq
cmp
call
mov
jae
or
jp
sbb
xor
ds
push
push
je
mov
pop
adc
mov
movs
sahf
or
jmp
test
(bad)
push
inc
(bad)
mov
xor
sbb
fwait
and
sbb
lods
lock
mov
cmps
fidiv
call
mov
add
(bad)
cli
sbb
or
int3
mov
mov
push
cwde
pop
les
rol
and
push
lods
pop
dec
sub
fcomp
sub
aas
sbb
push
clc
imul
test
sbb
retf
mov
test
test
dec
mov
inc
mov
imul
sbb
push
mov
ficom
icebp
mov
fstp
movs
sub
xchg
jbe
xrelease
push
fs
les
add
les
add
pop
or
jbe
pop
mov
fistp
mov
sbb
ins
jno
add
mov
jl
stos
or
push
mov
outs
xor
xchg
test
mov
stos
add
xchg
xchg
pop
icebp
outs
sub
cmp
repz
repnz
xchg
fadd
or
mov
cmp
mov
inc
adc
in
xchg
xor
shl
add
icebp
xor
add
add
shr
stos
jnp
adc
cwde
std
jmp
add
fsub
test
pop
mov
and
cdq
or
dec
or
add
cdq
inc
emms
(bad)
lods
jo
fsubr
and
mov
mov
js
hlt
in
sbb
xor
mov
adc
imul
and
ds
fisubr
add
repnz
dec
ds
fcomp
xchg
lods
sbb
sub
movhps
enter
in
xor
fistp
pfmin
cwde
and
adc
xor
push
adc
or
call
mov
cwde
inc
loope
or
fmul
jne
push
or
mov
call
stos
mov
push
adc
shl
fnstenv
mov
adc
loopne
enter
repnz
sub
imul
jne
and
int3
jmp
test
neg
std
pop
cmp
ins
das
pop
movs
jp
stos
inc
aas
sbb
cmc
mov
pop
rol
inc
pop
adc
add
and
bound
stos
imul
add
out
aaa
ret
rol
adc
dec
inc
dec
or
mov
test
xor
addr16
xor
call
sbb
les
imul
lds
push
dec
into
cmps
dec
outs
(bad)
push
test
imul
leave
xlat
movs
sbb
lahf
aad
pop
cmps
scas
inc
and
fiadd
cli
jp
ds
xor
addr16
xchg
dec
loopne
push
sub
adc
xor
shr
add
dec
adc
fsub
inc
xor
in
aad
test
inc
pop
xor
int3
xchg
hlt
adc
push
fadd
cwde
pop
call
cmp
lock
cdq
icebp
push
pop
xor
inc
mov
and
add
mov
fstp
push
or
cs
mov
adc
cmps
arpl
add
vpunpcklqdq
inc
jge
mov
xchg
push
stc
fdiv
cwde
mov
loop
push
pushf
fwait
and
cmp
cmp
dec
pop
fistp
fs
cdq
mov
std
cmc
pop
mov
adc
pop
sbb
jl
mov
inc
mov
push
sbb
mov
std
out
dec
test
push
mov
cld
pop
sbb
pop
enter
inc
adc
add
lock
imul
xlat
sub
jmp
test
movs
fsub
in
inc
fmul
fadd
ins
mov
adc
push
and
push
push
add
pop
in
or
sbb
out
adc
ja
jmp
test
movhps
lds
out
push
out
rol
sbb
imul
sub
mov
cld
call
cmp
push
je
enter
xor
rol
adc
xor
sub
jge
or
push
xor
pop
jmp
ror
jp
pop
mov
mov
jnp
xor
into
xchg
mov
imul
or
out
xchg
ja
add
stos
sub
fsubr
cmps
add
pop
mov
aas
pop
cmp
jg
xchg
sub
shr
leave
cwde
out
jl
add
xchg
adc
mov
cmp
pop
hlt
sub
sbb
sbb
(bad)
clc
loope
xor
enter
or
sbb
and
sbb
sub
imul
test
iret
out
add
nop
out
cmp
or
push
mov
lods
dec
push
fmul
inc
jecxz
dec
mov
pusha
mov
adc
test
push
int3
mov
sbb
mov
or
inc
and
or
aaa
add
push
mov
std
dec
enter
fld
mov
sti
popa
jp
or
scas
sub
dec
loopne
fwait
push
xchg
add
mov
popa
xchg
mov
fidiv
jnp
movs
push
push
mov
imul
cmps
push
mov
jmp
mov
(bad)
or
mov
rol
int3
jp
xor
stos
out
pop
add
movs
push
mov
adc
cld
jle
or
popf
jle
mov
dec
stc
inc
loope
je
ins
pop
xchg
daa
addr16
retf
mov
jmp
ret
or
jb
fidivr
cmc
aaa
fild
inc
pop
aaa
test
mov
je
scas
adc
imul
icebp
rcpps
les
dec
add
retf
aas
push
shl
(bad)
pop
or
mov
pop
xor
out
clc
cdq
cmps
loope
cmp
mul
and
std
xor
lods
fidiv
movs
adc
jl
jno
lods
jb
fsubr
cmp
or
(bad)
ror
lahf
sub
pop
push
(bad)
sub
xchg
mov
(bad)
lods
or
fnsave
or
and
and
xor
inc
into
rcl
cmp
sti
sar
mov
lahf
mov
popf
(bad)
jne
jmp
iret
sbb
addr16
retf
fld
pop
push
inc
xchg
out
ss
xchg
or
loop
iret
jmp
adc
cmp
cmps
imul
movs
adc
out
jae
out
sti
jp
xor
aaa
inc
jns
out
fiadd
xchg
enter
dec
ins
imul
(bad)
mov
stos
mov
mov
imul
js
pop
inc
inc
inc
adc
in
fimul
mov
stos
loope
inc
jmp
cmp
cmp
xchg
fwait
int3
bound
mov
sub
push
push
movs
loope
sub
pop
xchg
add
mov
movs
push
xchg
lea
shl
and
push
pop
mov
xor
xor
jmp
mov
push
test
nop
sub
dec
inc
fiadd
fsubr
das
ss
or
aaa
ror
pcmpgtd
pop
adc
bnd
inc
call
and
outs
fs
lods
sbb
dec
fwait
inc
jnp
push
xchg
xor
sahf
inc
sbb
mov
pop
add
mov
jge
inc
inc
neg
xchg
mov
jo
mov
mov
xchg
add
popf
pop
jmp
fadd
popf
mov
cmp
cmp
xchg
xor
sbb
pop
push
cmps
outs
mov
and
or
call
dec
jb
push
jbe
sub
jne
arpl
pop
push
movs
cli
lods
out
pop
test
mov
dec
retf
sbb
pop
xchg
mov
push
dec
sbb
call
xchg
xor
cdq
je
adc
je
jo
das
(bad)
add
(bad)
adc
cld
fsubr
outs
push
inc
sub
mov
pop
cmc
xchg
add
sbb
(bad)
mov
in
std
lock
pop
sbb
loopne
adc
push
in
xchg
fs
mov
push
jl
or
push
jmp
sub
cmp
cmp
adc
jnp
in
outs
in
add
jl
(bad)
mov
aas
int
aaa
pusha
and
inc
mov
add
test
and
sub
dec
pop
imul
push
pop
ja
rol
data16
in
push
fsub
xor
sbb
mov
enter
sbb
and
pop
pop
cmp
(bad)
mov
ret
jnp
ja
cli
jle
mov
ficom
call
shl
push
aad
jne
lahf
add
mov
mov
xor
rcl
stos
int3
xlat
and
fcmovb
arpl
xor
adc
add
push
push
push
inc
jmp
(bad)
mov
jne
je
add
and
push
push
cli
enter
pop
add
push
pop
xor
jl
imul
or
push
add
daa
and
in
cld
test
and
out
mov
js
sbb
into
mov
add
jb
xor
xor
clc
lods
jl
call
xor
inc
aaa
jne
sti
mov
outs
or
cld
js
and
data16
pop
fdivr
out
jo
dec
cmp
add
sub
addr16
add
mov
retf
push
sahf
pop
pop
cmp
sbb
mov
jmp
push
stos
call
add
nop
out
sbb
dec
movs
pop
jb
adc
je
and
mov
mov
lods
push
outs
ins
add
jp
inc
or
ds
sbb
mov
(bad)
sub
in
pusha
ins
push
or
fst
hlt
fisub
fimul
jmp
sahf
push
pop
aas
in
cmp
cmp
nop
or
add
mov
daa
jnp
test
cdq
pop
in
push
in
or
popf
mov
jl
xchg
ret
mov
push
sub
inc
mov
cdq
add
xor
aaa
jb
inc
xchg
push
dec
int3
pop
jg
icebp
or
jnp
repnz
push
sub
jp
sbb
inc
fstp
add
out
adc
cmps
sbb
mov
inc
outs
adc
cmp
mov
mov
popf
fcomi
and
pop
inc
out
fld
cld
xor
mov
lock
mov
into
mov
jge
jno
int3
inc
cmc
pop
in
inc
movs
sbb
popa
fs
add
and
fs
cmp
stos
push
pop
cmp
call
fwait
sar
and
repz
hlt
imul
lock
add
or
mov
and
aas
(bad)
es
fs
sub
pop
sub
and
dec
jl
mov
jne
fnsave
sub
and
push
add
xor
xchg
dec
dec
int3
mov
xchg
dec
outs
test
sbb
out
lods
int3
pop
jno
cmp
jge
dec
sub
jecxz
inc
(bad)
imul
xchg
or
jecxz
imul
xor
es
pop
cdq
rcr
cmp
inc
aaa
or
ret
cmp
mov
mov
xor
inc
xor
push
imul
jecxz
and
sub
(bad)
out
and
push
cmp
pop
inc
int3
xor
mov
and
and
sbb
mov
js
test
mov
adc
mov
cmp
shr
mov
adc
or
loopne
push
xchg
jno
jno
mov
push
mov
repz
sbb
sub
jecxz
mov
rcl
or
fdiv
mov
test
in
mov
xchg
std
out
mov
cli
call
arpl
cmp
sub
mov
push
add
mov
adc
add
and
les
and
jnp
aaa
int3
or
imul
popa
pop
aaa
popa
lock
sbb
pop
mov
sbb
ficomp
jb
push
lods
mov
mov
pop
xor
cmp
add
pop
js
cmp
jl
loope
das
fisttp
inc
add
mov
cmps
lea
mov
push
in
mov
push
xchg
rcr
addr16
cld
repnz
sub
int3
or
sbb
std
adc
pop
mov
fiadd
call
xor
cmps
jp
or
mov
mov
out
mov
mov
mov
cmps
les
push
or
sti
mov
cs
or
xor
adc
pushf
inc
adc
or
addr16
or
sub
inc
sub
mov
xor
out
mov
out
push
lods
xchg
jno
and
addr16
or
fmul
and
lock
mov
pop
fild
mov
cmp
out
fsub
or
stos
pop
push
pop
sub
mov
inc
cld
push
retf
jb
(bad)
xor
xchg
loop
pop
mov
cmp
test
or
pop
loopne
push
out
sub
cs
jge
pop
(bad)
les
test
jl
(bad)
adc
jo
push
mov
pop
in
retf
xor
add
pop
fld
jg
sbb
scas
or
movs
xor
icebp
ds
mov
pop
lock
fisttp
bound
push
pop
pop
icebp
dec
nop
repnz
dec
fcmove
xor
mov
dec
xchg
rcr
loopne
les
or
loope
inc
shl
pop
add
push
push
(bad)
or
xor
popa
aas
sbb
icebp
or
out
jno
push
add
mov
add
fwait
std
sti
jbe
(bad)
loopne
pop
lods
sbb
or
dec
movs
inc
pop
adc
ins
icebp
test
or
inc
sbb
jge
mov
addr16
pop
inc
int3
push
das
xor
mov
or
sbb
stc
cmp
stos
sub
inc
push
es
in
mov
jae
jne
loopne
int
sti
in
cld
inc
xor
fcomip
mov
mov
push
mov
xchg
fcomp
and
cmp
push
xchg
pop
adc
jno
adc
jno
ins
push
into
jl
inc
cmp
add
inc
arpl
jb
loopne
xlat
push
aad
jle
or
test
jle
aad
mov
fs
scas
fscale
and
adc
ins
mov
pop
pop
push
out
mov
dec
adc
cdq
bound
xchg
pop
mov
inc
in
add
test
sbb
cmp
pop
jo
fsub
adc
add
in
lahf
push
mov
mov
adc
xor
pop
adc
xor
xchg
inc
fnstcw
popa
ficom
lock
add
pop
mov
js
mov
imul
mov
xor
dec
pusha
sub
ins
add
sub
push
js
jge
scas
mov
push
push
lea
jmp
push
dec
cld
(bad)
push
rol
cmp
lock
jns
adc
mov
int3
push
inc
pop
dec
clc
aaa
pushf
xchg
into
loop
in
pop
or
jmp
cld
adc
pop
mov
out
imul
in
pop
fist
das
and
lock
or
sbb
cmp
addr16
aam
loopne
lods
adc
in
push
dec
sar
adc
cmp
inc
xor
jo
xchg
enter
pusha
xchg
or
or
sbb
int3
add
dec
aaa
mov
jmp
je
mov
lahf
sub
sbb
mov
xchg
dec
clc
and
ins
fmul
cmp
or
push
dec
mov
dec
call
jg
and
mov
out
inc
xor
or
cmp
adc
xchg
sbb
dec
imul
std
imul
jecxz
pop
loopne
add
dec
les
push
pop
loope
cld
adc
adc
imul
sbb
xor
fbstp
hlt
ja
or
adc
push
pop
call
cmp
mov
sbb
jae
das
les
out
pop
inc
adc
pop
mov
rcl
jmp
mov
jno
aad
xchg
mov
cmc
ret
and
aaa
enter
out
cmp
inc
mov
add
dec
and
push
int3
cmps
mov
sub
xchg
je
pop
lds
sub
sub
loope
add
js
inc
or
xchg
scas
adc
cwde
or
scas
mov
sbb
push
aad
add
adc
sub
std
jl
pop
xchg
adc
inc
add
push
loopne
into
and
and
mov
lds
push
cld
mov
fisubr
pop
adc
rcr
dec
rcl
dec
call
inc
pusha
mov
into
ins
cmp
mov
adc
call
pop
push
cld
mov
xchg
(bad)
and
adc
add
ret
and
add
imul
ficom
cmps
add
int3
imul
cwde
fidivr
and
movs
mov
jp
or
dec
add
inc
sbb
pop
std
fild
jnp
add
ds
test
out
call
call
(bad)
jno
jns
or
pop
add
cwde
out
retf
jmp
xchg
sbb
sbb
fnstsw
sbb
dec
xor
mov
jae
int3
xor
hlt
and
xchg
daa
xchg
jl
cwde
ins
call
push
jg
stos
xor
jmp
ds
movs
dec
jb
pop
cwde
hlt
int3
push
mov
dec
(bad)
les
sbb
fst
sbb
push
mov
pop
out
push
js
stos
stc
ins
cmps
retf
or
or
retf
xor
ss
mov
out
out
sub
or
fild
sub
in
xchg
in
xchg
push
ins
xor
jecxz
pusha
add
gs
jl
std
ins
or
add
adc
mov
xchg
out
imul
or
movs
dec
shl
imul
dec
icebp
or
or
xor
sbb
xor
fstp
ins
call
cmp
cld
das
push
js
mov
jmp
mov
and
add
daa
lahf
add
ficomp
icebp
dec
daa
std
dec
xor
mov
mov
add
popf
or
push
mov
call
push
adc
xchg
imul
sti
inc
cmp
add
icebp
sub
aaa
push
lods
adc
push
in
xlat
sub
int
xchg
push
pop
fmul
sbb
push
inc
aad
jp
and
enter
loopne
icebp
jo
cs
lods
adc
or
ins
xlat
cld
sbb
jmp
fcomp
mov
mov
inc
loopne
js
cmp
test
lods
jle
mov
jge
mov
mov
aaa
clc
fwait
por
sbb
int
out
sub
lahf
mov
or
dec
and
or
icebp
inc
mov
int
loop
cld
popa
out
cmp
push
lahf
jl
icebp
pop
sbb
mov
sbb
rol
int
gs
xchg
outs
cs
add
hlt
mov
aas
pop
mov
stos
push
fdivr
xor
xor
inc
sbb
mov
dec
icebp
xor
out
fs
loope
ret
and
inc
push
add
int3
inc
imul
idiv
sbb
dec
cld
aaa
sbb
cld
scas
mov
scas
(bad)
int
int3
or
adc
adc
and
add
sub
bound
lods
lods
cmp
stos
nop
popf
(bad)
push
bound
push
jmp
cmp
xchg
stos
iret
adc
cmc
and
repnz
sbb
pop
and
jae
xor
pop
dec
push
add
push
pop
sysexit
sbb
jae
ficom
mov
add
sbb
cld
or
or
pop
cdq
fisub
mov
test
xor
push
test
push
pop
xlat
push
loope
data16
xor
repz
xor
mov
retf
(bad)
cmovb
mov
int3
rcl
sbb
aad
popa
repnz
ja
adc
stos
pusha
mov
sbb
sbb
jb
call
adc
imul
test
and
loop
jl
stc
or
dec
push
in
sbb
test
sbb
push
mov
sbb
xor
push
cmp
add
hlt
push
cmps
inc
test
data16
xor
add
fincstp
mov
retf
xor
xor
mov
pop
(bad)
pop
popa
mov
enter
push
loopne
fwait
xchg
and
sbb
in
xor
xor
xor
push
or
icebp
sub
jp
xchg
stos
clc
push
fldenv
xchg
ret
icebp
aaa
inc
xor
push
js
or
or
dec
repnz
out
aaa
in
dec
hlt
scas
adc
jo
push
repnz
fstp
or
add
or
int3
fidiv
stos
xor
enter
popa
scas
cmp
aad
pop
mov
outs
pavgb
das
cmp
push
or
pop
jle
push
nop
clc
inc
mov
xchg
pop
clc
rcr
leave
fs
arpl
in
jbe
pop
pop
fs
adc
addr16
sbb
mov
ins
ret
icebp
mov
adc
shr
lods
popf
or
mov
scas
adc
mov
cmc
sbb
int3
(bad)
inc
retf
lods
push
shl
pop
pop
out
push
fwait
xchg
mov
push
cmp
les
mov
xor
xchg
cmp
mov
(bad)
jmp
mov
sbb
mov
out
cmp
pop
mul
addr16
dec
scas
addr16
call
cmp
ret
xchg
or
lods
mov
sahf
bswap
jns
inc
mov
jne
repnz
out
cwde
cmps
jo
lock
pop
das
sahf
out
adc
mov
movs
lock
or
outs
div
xor
sbb
sub
call
mov
jmp
sbb
adc
test
and
sbb
retf
jae
icebp
mov
test
retf
inc
xchg
dec
sbb
and
jg
rcr
imul
mov
int3
in
test
adc
imul
icebp
inc
xor
in
mov
pop
sbb
dec
shl
psrad
add
ss
push
in
cmps
xor
outs
mov
xchg
shl
jmp
fldl2e
outs
jp
push
mov
or
mov
cmp
outs
icebp
dec
data16
repnz
xor
xchg
ret
mov
lods
mov
sbb
int3
dec
mov
dec
ds
add
mov
lahf
and
push
clc
jg
cs
mov
lods
sbb
out
add
aaa
(bad)
(bad)
(bad)
out
pop
jmp
xchg
mov
movs
das
xor
pop
and
dec
cmps
xor
leave
dec
movs
(bad)
lods
gs
jne
in
sub
inc
out
aas
xor
sbb
aaa
adc
sub
jmp
aam
std
xlat
mov
into
dec
stos
push
jo
sub
add
fbstp
mov
mov
movs
retf
call
cmp
js
xor
cmp
iret
sub
xchg
shr
or
les
or
loopne
cli
in
push
add
dec
adc
xor
sub
shr
loopne
add
sub
jns
add
inc
xor
jp
mov
aas
xchg
mov
dec
sbb
sbb
loopne
pop
and
pop
push
mov
jp
dec
sub
adc
repnz
push
sbb
lods
ss
movs
ins
int3
jnp
xor
repz
sbb
inc
sbb
lea
cdq
rcl
jo
push
mov
in
in
push
int3
fs
retf
pushf
mov
stos
xor
push
xor
inc
adc
cdq
fld
push
mov
rol
cmp
mov
or
sbb
icebp
or
add
mov
call
sti
aas
cmp
add
mov
nop
pop
leave
cmp
ret
movs
push
xlat
stos
lahf
das
lds
in
sti
jmp
mov
mov
rol
adc
sbb
add
mov
outs
pusha
inc
jp
cmp
sahf
sbb
and
int3
out
jnp
sub
jp
sub
jge
addr16
sbb
pop
pop
dec
js
fimul
sbb
pop
rcl
and
xchg
mov
(bad)
popa
mov
cmp
mov
xor
rol
pop
lods
xor
js
imul
daa
mov
cmp
clc
fwait
lods
in
(bad)
out
movs
and
jge
cmp
mov
sahf
fcom
sub
mov
and
dec
mov
sahf
ficom
xor
xchg
out
cmp
push
jmp
dec
jmp
push
retf
inc
shr
adc
repz
into
mov
inc
imul
(bad)
mov
das
arpl
xor
cmp
xchg
add
in
sbb
inc
data16
mov
ja
sub
xchg
dec
push
adc
pop
adc
or
adc
mov
mov
mov
jg
addr16
test
xor
in
adc
adc
icebp
push
mov
cli
xchg
fdivp
mov
pop
xchg
js
js
xor
inc
sub
xor
daa
scas
push
fnstenv
inc
loope
jnp
and
lods
repnz
pop
fld
and
jae
outs
outs
test
inc
pop
xchg
mov
xchg
in
inc
int3
stos
sub
sbb
in
ja
jl
xor
lods
js
xor
ja
add
and
inc
js
cmp
cmps
in
pop
mov
aad
mov
ret
rcl
jg
test
fisubr
jne
sub
imul
sub
cdq
js
xor
push
push
and
mov
mov
cmps
xchg
inc
mov
cld
or
pop
add
dec
sbb
inc
arpl
hlt
adc
fld
call
loope
in
mov
stos
pop
xchg
ss
xchg
add
ins
mov
jmp
cmp
into
in
in
ficom
retf
test
sar
xchg
dec
(bad)
xor
jl
aaa
popa
adc
cld
and
repz
pusha
mov
imul
mov
lahf
push
clc
fadd
pusha
push
retf
ins
push
ret
int
inc
xor
mov
dec
jmp
jg
loope
lods
or
lahf
aaa
cs
retf
inc
cmp
or
push
retf
arpl
push
add
xor
gs
gs
push
pusha
push
pop
push
in
pusha
retf
call
adc
cmp
mov
loopne
cdq
(bad)
int
fdivr
push
fcom
(bad)
out
adc
movs
bound
aad
jb
jb
jl
div
xor
sbb
(bad)
add
sahf
loope
sti
jns
add
or
push
mov
add
mov
xor
sbb
mov
sub
or
movs
dec
(bad)
das
scas
fnstcw
ja
idiv
dec
gs
pop
adc
add
dec
and
mov
mov
icebp
cmp
xchg
pop
test
in
leave
push
int3
repnz
out
cmp
les
cmp
dec
jge
or
cmp
pop
clc
js
push
inc
mov
xor
movs
sbb
out
in
enter
aaa
dec
enter
in
cmps
or
fsub
loope
and
in
sbb
jne
int3
mov
inc
add
rcr
icebp
and
shl
dec
push
or
sub
fbld
sub
add
and
(bad)
int3
xor
cmps
call
or
xor
push
ss
jecxz
bound
and
aaa
addr16
(bad)
hlt
mov
pushf
test
push
rcl
or
pusha
loope
ret
and
mov
popf
loope
pop
cwde
xor
sti
cmp
cmc
jno
or
pop
retf
push
fsub
mov
ds
jmp
mov
sbb
cmp
idiv
sbb
les
xor
cld
mov
scas
rcl
adc
fistp
xor
and
js
or
lahf
push
popf
call
push
cli
cmc
test
inc
sbb
test
xchg
aaa
rcr
pop
out
ss
pop
sub
aaa
call
test
fcom
or
push
cwde
mov
int3
push
xor
adc
int3
sbb
push
or
cmp
lods
mov
jge
les
mov
add
mov
mov
sub
add
xchg
xor
outs
and
jae
leave
call
imul
lea
or
add
jmp
mov
cdq
leave
repz
sbb
pop
(bad)
cmp
inc
push
addr16
leave
mov
in
mov
mov
inc
in
ds
or
or
rol
jge
shl
cli
or
cli
push
and
jns
inc
sbb
dec
call
pop
or
jmp
pop
cmps
and
int3
(bad)
jmp
ins
(bad)
icebp
bound
fimul
push
aaa
mov
xchg
ins
xor
(bad)
mov
add
fst
outs
add
add
mov
fsubr
cld
(bad)
aad
shr
xor
xor
or
fisub
or
movs
pop
mov
add
push
loop
cli
pushf
xchg
sbb
or
fadd
add
adc
inc
rcl
(bad)
xchg
and
inc
in
retf
sahf
or
sub
stos
shl
mov
pop
cmp
sub
cmp
and
and
inc
push
sbb
dec
push
sbb
jne
movs
mov
mov
dec
je
call
jp
push
xor
sbb
dec
or
int3
cwde
test
int3
push
ins
inc
fimul
jne
loopne
call
outs
xchg
ror
int3
loope
stos
clc
mov
jp
inc
mov
mov
shl
data16
or
xchg
(bad)
inc
fwait
int
retf
in
cmp
lea
and
aad
adc
cmp
dec
test
sub
repnz
inc
mov
aad
test
dec
addr16
inc
rcr
enter
addr16
arpl
mov
shr
aas
imul
(bad)
ja
cmp
pop
into
sbb
mov
inc
mov
test
and
inc
mov
pop
cmp
sub
mov
mov
sbb
fadd
cmp
(bad)
pop
ja
ss
(bad)
fadd
jecxz
movs
xor
int3
cmps
inc
sub
sbb
movs
loope
out
dec
and
rcr
inc
mov
add
or
jno
dec
adc
fwait
cmps
int
mov
sub
je
loopne
dec
pop
sub
jmp
inc
pop
pop
mov
call
cmps
retf
inc
xchg
xor
or
dec
test
sbb
push
fs
rcl
mov
(bad)
dec
xor
outs
in
jne
call
adc
adc
aas
mov
into
pop
add
ret
adc
and
mov
jge
jmp
cmp
lods
int3
xor
lahf
iret
pop
pop
gs
sahf
add
pop
adc
mov
in
sbb
cmp
or
sbb
jg
clc
cmps
sbb
les
or
div
push
fild
add
mov
mov
sub
pop
adc
dec
pushf
xchg
xor
jmp
and
cmc
mov
push
jno
xchg
or
loopne
inc
pop
mov
dec
xor
jecxz
aas
aad
and
cmp
fs
sbb
dec
sub
xor
pop
lds
(bad)
push
sbb
pop
adc
retf
fimul
sbb
rol
xchg
sbb
cdq
aam
push
dec
xchg
push
or
(bad)
jg
inc
sbb
sub
ja
add
(bad)
ret
cmp
pop
outs
das
jbe
pop
call
ds
dec
mov
sbb
iret
push
xchg
and
pop
dec
jle
cmp
sbb
sub
xlat
and
pop
and
rcr
aad
pop
(bad)
cwde
or
xchg
cmp
hlt
rcr
(bad)
jg
and
enter
sub
cld
or
movs
nop
cmp
or
mov
stc
mov
pop
mov
push
pop
push
int3
imul
jo
fadd
repz
sbb
retf
inc
jecxz
add
push
loop
in
mov
mov
jle
xor
fdivrp
mov
das
push
pop
inc
lods
xchg
xchg
and
lahf
or
push
add
fyl2x
cdq
int3
xor
or
das
hlt
cdq
adc
retf
sub
retf
mov
(bad)
mov
retf
xor
daa
jmp
push
ins
addr16
xor
rcl
sti
push
mov
adc
sub
ins
mov
cli
imul
retf
fdiv
in
mov
clc
aam
fs
dec
and
lods
or
or
inc
or
push
and
adc
or
xchg
add
adc
pop
pop
jmp
jecxz
outs
jmp
inc
xor
cld
lods
outs
(bad)
in
add
cmc
in
pusha
pop
mov
inc
mov
or
ret
loopne
jne
or
add
jle
xchg
in
inc
cmp
test
pusha
push
(bad)
jg
fisubr
fnsave
and
inc
aas
out
add
addr16
dec
mov
not
sbb
call
mov
jbe
enter
jmp
or
adc
mov
push
cmp
(bad)
pushf
fwait
dec
or
xor
or
mov
xchg
sub
repz
popa
js
loop
in
push
cmp
int3
test
mov
jne
mov
aaa
stos
int3
push
jp
loopne
inc
mov
jp
pop
and
inc
dec
aad
jmp
sub
or
cdq
sti
fmul
mov
pop
mov
mov
push
xchg
loop
addr16
or
cwde
xor
adc
mov
pop
sbb
inc
or
jge
call
aam
loopne
push
sbb
pop
push
add
push
in
jl
inc
sub
or
push
add
in
adc
and
popa
jb
cmp
clc
xor
cmps
xchg
test
popf
sub
fcomp
pop
adc
push
xchg
inc
(bad)
dec
xor
les
out
ss
sbb
and
jae
pop
int3
lods
pop
imul
mov
iret
es
pop
dec
mov
inc
inc
push
add
stc
mov
inc
or
sub
adc
out
adc
dec
push
dec
addr16
fld
sbb
sub
movs
loopne
xchg
rcr
(bad)
(bad)
out
int
and
aaa
ss
pop
jno
std
js
mov
add
jl
rcl
adc
or
imul
adc
jno
data16
test
mov
je
add
dec
fsubr
jmp
adc
sbb
pusha
pop
push
cld
sub
push
mov
sub
xor
cmp
sub
sub
add
cmp
cwde
retf
std
or
xchg
sub
jne
dec
mov
jno
(bad)
cmp
aas
jb
rcl
adc
loopne
jge
jo
mov
adc
int3
and
and
mov
adc
out
popa
mov
mov
cmp
jno
xchg
cmp
test
sub
out
jae
je
push
sbb
outs
loope
jmp
(bad)
fcom
sar
sub
mov
aaa
jge
jl
scas
dec
lea
push
gs
cld
jmp
dec
jg
mov
ficom
cld
cmps
fwait
xchg
in
mov
cli
mov
shl
dec
(bad)
pop
or
mov
in
or
(bad)
cmp
inc
mov
and
push
popa
pop
xor
pop
or
add
sar
push
pop
and
and
sbb
cmp
lods
cmp
fbld
ret
(bad)
call
mov
popf
rcr
ror
call
inc
xchg
or
dec
push
pop
pop
jge
repz
mov
xchg
clc
adc
scas
lds
call
in
aad
inc
xor
pop
bound
fcmovu
movs
ja
jge
dec
adc
in
aad
fcom
cmp
ds
outs
mov
(bad)
pop
xor
cmp
pop
mov
pop
cmps
xchg
inc
loope
mov
xchg
add
mov
jg
add
cmp
(bad)
push
aam
inc
inc
popf
aam
pushf
je
test
or
mov
lods
shl
in
inc
sub
aaa
jb
outs
inc
dec
mov
push
adc
adc
or
push
rcr
dec
xor
inc
movs
adc
push
add
dec
int3
xor
mov
(bad)
pop
mov
adc
int3
dec
scas
cmp
or
pop
retf
mov
stos
xor
popa
mov
and
in
add
jne
dec
retf
cmp
in
add
ret
cmp
lahf
mov
loopne
(bad)
sub
and
adc
xor
mov
ja
or
and
or
enter
xor
sub
sub
pop
(bad)
jns
cmp
addr16
or
jl
cmps
imul
or
adc
dec
sbb
int3
xor
rcl
ins
xchg
addr16
jp
or
neg
dec
(bad)
push
sbb
mov
repz
xor
adc
aaa
cmp
imul
add
dec
jl
mov
nop
ins
add
ins
inc
pop
mov
je
mov
add
push
xor
dec
xchg
fsubr
cmp
call
and
sbb
cmp
cmp
xchg
sub
iret
pop
mov
jns
loope
adc
icebp
nop
fadd
dec
push
dec
sub
add
pop
sub
push
sbb
xor
cmp
dec
outs
arpl
ss
out
sub
sbb
ja
ss
scas
cmp
into
push
push
jae
leave
or
cmp
dec
push
push
mov
mov
stc
fs
fs
aas
or
xor
fs
xchg
movs
cmp
xor
pop
in
mov
sbb
mov
dec
dec
push
push
imul
jp
push
jle
add
test
cmp
add
dec
fild
or
pop
icebp
or
push
imul
sub
movs
pop
jg
push
sub
xchg
(bad)
out
std
sub
ins
js
mov
dec
cmps
cmp
popa
xchg
or
pop
pop
ss
inc
or
psllw
sahf
add
pop
out
adc
xchg
mov
dec
mov
pop
sub
push
mov
mov
je
out
cmp
shl
jp
ss
mov
inc
jbe
lock
retf
inc
push
sub
lea
jo
or
fistp
add
cmp
pop
loop
jp
add
pop
xlat
sub
adc
xor
scas
ret
sbb
pop
in
inc
(bad)
mov
(bad)
push
push
sub
xchg
imul
aad
stos
and
dec
push
int3
in
aad
xchg
cwde
inc
pop
sbb
xchg
adc
xlat
jecxz
mov
in
into
jg
xor
cwde
clc
rcr
push
mov
data16
xchg
dec
inc
add
shl
fcompp
fisub
mov
inc
ficomp
cmp
cwde
push
pop
cli
add
mov
callw
cmp
push
push
and
loope
clc
inc
cmp
inc
iret
or
cmp
loopne
call
jne
mov
push
add
or
pushf
call
outs
mov
or
ficomp
aam
mov
les
mov
mov
dec
stos
psllw
pop
sbb
cmc
add
sbb
xor
jno
add
adc
imul
jo
dec
sbb
ss
mov
popf
out
stos
jle
mov
cmp
push
jbe
xor
fcmovu
arpl
rep
in
stos
in
call
xor
gs
mov
adc
cld
fucom
inc
jne
mov
loope
js
aad
clc
lods
xchg
(bad)
fdiv
aaa
cmps
int3
out
icebp
rol
or
fcom
pusha
repnz
sub
loop
cmp
lods
pop
in
sbb
adc
cwde
aad
cld
jnp
sbb
in
pop
aad
movs
leave
mov
imul
ffreep
hlt
test
or
data16
sbb
icebp
int3
mov
push
ins
pop
add
cmp
push
es
(bad)
cdq
js
mov
push
xor
mov
pop
(bad)
into
lock
mov
dec
push
add
pop
adc
in
call
mov
push
jns
push
icebp
and
es
shr
add
inc
mov
fdiv
or
lock
imul
jns
arpl
cmc
icebp
out
icebp
mov
mov
dec
movs
adc
(bad)
rcl
adc
xchg
jmp
ret
xchg
inc
or
or
push
push
popa
mov
icebp
sub
push
or
retf
aad
psllq
push
out
dec
sub
int3
dec
adc
jmp
data16
cmp
add
fdivr
mov
jmp
push
sbb
sbb
retf
iret
or
sub
pop
push
cwde
shl
xchg
add
xchg
fwait
sub
xchg
cwde
sub
adc
jno
in
je
or
jp
ins
xchg
and
icebp
and
and
les
add
and
addr16
cmp
ror
adc
sbb
push
cmp
push
jecxz
cmp
and
jae
outs
das
add
mov
aas
lock
pop
fsub
sub
dec
xchg
pop
gs
lea
cld
pushf
add
add
or
(bad)
adc
push
dec
fmul
outs
push
dec
jns
imul
jecxz
and
mov
sub
and
push
and
sbb
jno
push
enter
dec
add
jp
cmp
push
fwait
cwde
jns
jo
sbb
jno
adc
outs
mov
jl
cmp
dec
pop
adc
fs
and
sbb
cmp
jae
imul
js
sbb
jo
ja
dec
outs
ins
ins
xchg
outs
pop
clc
dec
adc
aas
dec
mov
add
out
dec
dec
xchg
sbb
inc
xor
jns
ror
aam
ret
push
outs
mov
or
sbb
in
addr16
dec
push
or
fstp
jno
push
inc
cdq
test
jo
push
add
hlt
ins
mov
inc
fs
xor
jns
sub
gs
or
sbb
sbb
mov
cs
adc
pusha
dec
gs
pop
retf
cmp
js
adc
cdq
pop
cwde
clc
add
add
ret
or
adc
jl
pmaddwd
add
or
ret
pop
dec
inc
jbe
sub
aaa
js
mov
xchg
stos
jae
sbb
test
mov
jg
push
cmp
and
fstp
add
ins
pop
pop
mov
in
pop
popf
mov
push
sti
mov
xor
sub
in
dec
leave
inc
dec
dec
xchg
outs
or
in
fnstcw
outs
fwait
push
mov
or
cmps
test
enter
(bad)
call
popa
dec
cmps
push
dec
xchg
jmp
ds
cdq
pusha
sahf
in
cmps
dec
mul
clc
int
repnz
lahf
xor
xchg
call
mov
fdiv
cmps
in
lahf
dec
std
call
pop
push
adc
xchg
jmp
mov
xchg
dec
es
mov
inc
mov
jmp
ror
pop
xchg
loope
addr16
in
or
push
fsub
or
ret
or
push
mov
ins
pop
loopne
cld
jecxz
pop
mov
xor
sbb
lock
adc
pop
pop
cwde
leave
out
mov
or
push
jmp
xor
stos
xchg
or
jge
pop
pop
mov
mov
push
repnz
sub
mov
fidivr
cmp
ficom
sbb
in
push
add
add
(bad)
sbb
sti
pop
mov
or
inc
sub
adc
imul
mov
data16
sbb
fcomp
cmp
adc
sbb
sbb
pop
jle
das
dec
jmp
jae
imul
or
jnp
adc
sbb
and
ror
repz
cmp
fcom
jns
dec
pop
(bad)
mov
nop
xor
fld
lods
mov
push
sbb
xlat
in
xlat
jmp
adc
adc
adc
(bad)
push
cmp
cmp
pop
or
imul
push
cmp
cmp
pop
add
ins
inc
adc
cmp
stos
rcr
jmp
cmp
xor
ret
and
push
or
jns
push
pop
lea
icebp
cmp
xor
rcr
imul
jp
imul
or
cmp
sub
and
in
test
mov
retf
movs
xchg
bound
ins
retf
push
enter
in
cmp
ss
cmp
cmp
or
adc
ins
push
pop
add
loope
adc
cwde
pop
or
repnz
ins
push
pop
fstp
add
lods
nop
pop
adc
add
mov
cmp
cwde
pop
xchg
(bad)
xor
cwde
fcom
cmp
add
add
jp
add
xor
jp
add
push
nop
pop
or
sub
and
cmp
and
in
and
add
xchg
loopne
lods
push
pop
pop
cmp
and
ret
or
fwait
push
test
sbb
ret
ins
add
cmp
cwde
pop
mov
add
ins
xchg
fdivr
cmp
jge
inc
add
ins
dec
test
sub
pop
jns
dec
cmp
cmp
xchg
add
ins
ja
cmp
jle
add
ins
dec
inc
aaa
in
dec
ins
stos
pop
adc
mov
(bad)
cmc
retf
aam
fisttp
and
fcomp
popf
into
cdq
sub
cmp
add
std
mov
push
int3
cmp
mov
test
lods
cmp
mov
or
inc
movs
idiv
xchg
ins
loope
pop
sti
sbb
loope
jo
lods
add
sbb
fadd
sbb
mov
out
pop
fcom
shr
mov
dec
leave
add
pop
lods
lea
int3
push
dec
xchg
ins
fsub
add
jecxz
outs
mov
or
pushf
hlt
mov
aam
fsub
push
xor
stos
out
fnstenv
loop
repz
jb
mov
add
mov
rcr
adc
or
add
mov
cld
mov
push
stos
test
call
int3
test
push
mov
aad
inc
sub
push
add
outs
add
inc
mov
mov
(bad)
loopne
mov
test
push
xor
push
mov
fldcw
sbb
adc
test
pushf
cmps
mov
pop
sbb
add
(bad)
cwde
(bad)
jns
pop
or
movs
jmp
mov
call
cmp
xchg
add
dec
pop
dec
jae
aaa
dec
ja
repz
aam
xchg
adc
sub
jo
adc
aad
in
ins
cld
cmp
jecxz
push
add
dec
sbb
(bad)
push
loop
js
pusha
int
hlt
push
mov
in
xor
div
retf
and
inc
lea
call
mov
sbb
jmp
aam
in
add
mov
test
cmps
jl
popa
test
sahf
sbb
(bad)
ficomp
sbb
dec
mov
aam
mov
xchg
mov
xchg
xor
push
icebp
or
cdq
lods
push
daa
cmp
imul
adc
push
jp
pop
xor
xor
jo
(bad)
aas
jl
fadd
add
push
and
inc
inc
ja
scas
aas
sbb
call
mov
cwde
cld
icebp
add
adc
loopne
test
pop
cdq
jge
jg
jge
int
sub
inc
inc
and
xchg
sbb
push
out
leave
xor
add
add
jmp
(bad)
(bad)
adc
(bad)
in
(bad)
sti
lods
dec
call
dec
mov
pop
dec
pop
sub
hlt
or
inc
pop
mov
loope
ins
sti
sub
pop
xor
(bad)
(bad)
sbb
cmp
sbb
cmp
adc
sub
pushf
jns
mov
pandn
cmp
and
sub
fsub
retf
pop
mov
mov
inc
repz
xor
xchg
push
std
adc
jnp
xor
inc
addr16
xlat
mov
or
mov
div
push
nop
loopne
mov
cli
es
jle
cwde
in
aas
sub
outs
ins
adc
and
cld
sbb
gs
mov
add
adc
outs
sbb
cmp
push
push
cld
sbb
inc
int3
adc
out
jns
xchg
add
fld
test
xchg
sub
cmp
mov
add
pop
pop
push
loop
jge
dec
mov
or
sub
mov
dec
mov
iret
in
fsub
mov
mov
jmp
push
dec
call
pop
mov
push
mov
push
imul
test
mov
call
fisub
retf
xchg
je
and
in
mov
dec
mov
pop
sbb
fsubr
pop
adc
inc
mov
fs
or
dec
jmp
hlt
adc
xchg
and
into
cmp
sub
mov
imul
sar
or
xchg
imul
sbb
xchg
pushf
inc
xor
mov
cli
mov
mov
or
lahf
and
sbb
fisubr
(bad)
ins
cwde
ret
jne
xor
pop
mov
imul
stc
in
adc
outs
inc
std
lods
fs
jecxz
push
cmc
add
push
cmps
in
fistp
fistp
pop
imul
adc
cwde
pop
jb
mov
mov
adc
fwait
ja
call
mov
add
and
add
or
imul
push
iret
aas
(bad)
mov
cwde
or
movs
outs
mov
adc
add
mov
add
fadd
imul
push
mov
nop
mov
cmp
pusha
and
fadd
and
fild
add
xor
dec
xchg
pusha
dec
cmp
pop
xor
push
neg
xchg
jns
in
xchg
sahf
test
adc
mov
and
stos
mov
call
inc
adc
daa
(bad)
and
pop
xchg
jmp
jge
pop
pop
ja
and
pop
add
jl
mov
add
loope
pop
mov
mov
lods
int3
aad
nop
jnp
mov
pop
add
sqrtps
call
(bad)
jo
data16
lock
call
js
jmp
jp
dec
xchg
sbb
push
or
pushf
cmp
sbb
mov
stos
add
imul
pop
push
inc
sub
fcom
inc
sub
call
xor
cmp
add
jne
mov
dec
or
stos
xlat
inc
add
retf
mov
cmp
mov
test
fistp
jmp
dec
sub
dec
loop
cs
loope
add
xchg
dec
or
cli
pop
xor
test
or
push
rcr
in
fadd
jp
cmp
sub
and
jo
push
adc
xchg
call
jne
in
retf
jo
retf
push
sub
push
sti
aam
adc
nop
push
das
cmp
sbb
inc
mov
(bad)
leave
dec
adc
xchg
in
sub
loop
jle
and
sub
addr16
movs
sub
sbb
jecxz
mov
jne
and
mov
push
dec
cmp
les
inc
or
push
ret
pop
cmp
pop
in
dec
dec
jno
push
push
outs
data16
sahf
mov
push
into
retf
loopne
out
add
xchg
rcl
cmc
addr16
(bad)
dec
inc
popf
push
mov
add
cmp
push
cmp
jmp
cmc
mov
xchg
sahf
mov
jne
add
cwde
das
dec
in
push
pop
out
xchg
push
ins
xor
aas
retf
fistp
pop
add
xchg
retf
xchg
aaa
inc
das
mov
mov
mov
adc
sbb
sar
fist
and
jg
add
addr16
or
mov
(bad)
pop
adc
jmp
icebp
cmp
dec
call
pop
test
into
sub
dec
test
pop
imul
push
or
mov
ds
pop
lds
cmp
sub
in
jbe
mov
ja
pop
jp
loop
std
fldenv
cmp
push
das
ja
jmp
adc
lock
scas
fmul
movs
(bad)
fiadd
cwde
inc
push
fldenv
mov
sub
jb
xor
sbb
mov
call
inc
arpl
jge
jno
add
xchg
mov
(bad)
pushf
out
and
fsub
into
sbb
sbb
jo
xrelease
add
aaa
data16
mov
pop
cdq
dec
push
aad
int3
cwde
push
push
pushf
loop
inc
xchg
mov
pop
shr
xchg
cmp
fdiv
shr
cmp
call
lahf
ret
stos
xchg
add
or
je
inc
mov
push
inc
es
clc
je
loope
sbb
or
ret
or
push
push
repnz
cmp
jmpw
sbb
cwde
and
mov
sbb
pop
sti
pop
in
icebp
ficomp
push
mov
pop
sub
stos
mov
psrlq
test
xor
dec
ins
or
dec
inc
das
adc
push
xchg
lock
pop
mov
fnstenv
dec
inc
bound
addr16
pop
mov
mov
mov
lahf
int3
xchg
test
push
push
retf
cmps
int3
arpl
or
mov
adc
mov
dec
mov
cmps
jnp
icebp
push
cmp
call
call
js
cwde
mov
adc
out
lock
mov
push
sti
push
call
inc
lods
push
loope
xor
or
push
cmp
pop
add
push
xchg
push
aas
and
into
out
or
sti
xchg
and
out
call
inc
loop
fs
test
xor
jne
vmovddup
push
es
stos
cwde
div
in
nop
popf
xchg
movs
fcomp
jmp
outs
jae
std
(bad)
in
mov
not
loopne
(bad)
outs
mov
ins
jge
jne
clc
add
repz
inc
fistp
cdq
xchg
loopne
mov
mov
pop
fcomi
jns
dec
sbb
sbb
fwait
dec
fmul
or
addr16
push
in
in
cmc
cmp
mov
dec
jae
ret
call
ror
movs
sub
inc
mov
call
jno
gs
push
cmp
sub
mov
in
push
pop
fcmovu
in
push
clc
mov
or
push
inc
mov
arpl
ins
in
pop
hlt
sub
push
daa
clc
jno
aam
repz
xor
sbb
or
dec
fcom
cmp
mov
cmp
add
adc
xchg
or
call
pushf
add
pop
shl
inc
jge
xchg
xor
cmp
dec
pop
add
cwde
dec
lock
and
jmp
pop
push
add
fwait
sbb
or
xchg
loopne
rep
in
xor
sbb
imul
lods
xor
imul
das
(bad)
sahf
iret
not
push
test
pop
mov
jp
jecxz
push
dec
scas
jmp
sahf
xchg
jbe
icebp
push
pop
repnz
pop
add
jo
cli
call
das
int3
lock
xor
repz
mov
pop
fs
rol
xor
test
pop
mov
sub
in
xor
jmp
jp
loopne
clc
gs
rcl
or
add
in
jo
jne
mov
push
xchg
pop
in
lock
lods
push
cmp
ds
es
or
(bad)
in
cmp
(bad)
dec
mov
clc
xchg
push
sub
arpl
(bad)
mov
xor
mov
in
mov
dec
call
cmp
mov
mov
and
push
dec
dec
mul
or
xlat
push
push
pop
cdq
or
push
repnz
mov
dec
push
dec
inc
inc
rol
add
lods
inc
sbb
inc
or
inc
push
add
add
push
cmp
ror
in
ins
lahf
fisubr
sahf
repz
out
sub
loope
addr16
or
in
movs
aad
fistp
rcr
adc
call
cli
adc
dec
stc
movs
sub
xor
and
loopne
add
xor
xor
mov
mov
aam
xchg
fistp
and
call
or
or
sbb
sub
mov
xor
mov
jmp
addr16
fisubr
xor
cmp
mov
(bad)
or
pop
add
call
ds
mov
lahf
fidivr
ins
jns
pop
hlt
cdq
push
cmp
push
jb
pop
xlat
js
xor
adc
sub
js
inc
or
xor
xchg
pop
das
cmc
iret
call
pop
loope
adc
push
mov
push
or
jne
pop
push
call
adc
dec
loope
shl
sub
xchg
neg
out
push
inc
adc
sbb
add
pop
sub
sbb
sbb
and
loop
cdq
push
das
fild
fwait
dec
jle
adc
inc
jl
push
adc
(bad)
lods
sbb
ror
les
or
push
add
cli
jno
jmp
stos
das
sbb
or
push
aad
jo
mov
pop
leave
cmp
stc
jo
push
mov
fimul
and
lock
cwde
mov
fisttp
jg
mov
jmp
in
sbb
cmp
movs
(bad)
ficomp
push
in
cmp
jae
adc
jge
mov
sbb
adc
gs
xchg
aam
inc
out
sub
cmp
std
cli
ins
out
jae
push
cmp
ins
enter
js
mov
sub
out
jl
(bad)
jmp
aaa
dec
jmp
fs
test
inc
add
shr
in
mov
sub
das
jbe
mov
mov
xor
cld
test
pop
cmp
inc
jp
sar
or
aas
push
hlt
fcomp
and
push
shl
push
je
lods
jmp
ins
push
dec
in
xchg
jae
rol
add
inc
and
add
adc
in
push
fdivr
jl
xchg
add
inc
sub
add
dec
or
pop
push
inc
(bad)
jmp
sbb
test
add
or
cmp
dec
clc
cwde
jle
sbb
sar
dec
dec
dec
jmp
push
mov
pop
clc
xor
pop
push
in
push
clc
ds
pop
and
mov
nop
loopne
push
dec
sti
add
push
sbb
shr
mov
and
mov
nop
retf
xor
sbb
clc
pusha
dec
icebp
xor
and
dec
wbinvd
cmps
add
les
jmp
or
xchg
ja
push
lods
sbb
cwde
pushf
aas
jg
push
xchg
jg
and
xor
repz
push
aad
xchg
cmp
xor
cmps
jecxz
mov
mov
cmp
sar
and
in
adc
adc
jmp
cmp
sub
and
sub
or
inc
ss
in
cmp
inc
add
inc
sbb
adc
mov
lods
pop
inc
adc
dec
push
and
int3
pop
push
es
fstp
movs
adc
mov
(bad)
scas
add
daa
mov
(bad)
mov
clc
aaa
mov
adc
je
pop
adc
adc
jmp
jp
call
mov
inc
imul
sti
sbb
sbb
loopne
pop
push
pop
rcl
or
arpl
(bad)
pusha
push
pop
int3
rcl
and
pop
lods
pop
lock
shl
pusha
and
xor
sbb
rol
sbb
add
addr16
fidivr
aas
pop
stos
popa
mov
popa
retf
lahf
rcl
jmp
sub
pop
push
(bad)
imul
xor
push
sbb
mov
int3
in
(bad)
adc
add
pop
ins
in
mov
mov
sbb
jb
(bad)
ds
cwde
out
stos
mov
mov
cmp
int3
hlt
imul
mov
mov
inc
mov
adc
clc
xchg
movs
pop
push
jne
mov
fsubr
icebp
adc
fsub
adc
sti
cwde
add
jnp
int3
mov
arpl
retf
dec
sub
push
loop
cmp
and
repz
mov
jg
inc
bound
in
mov
push
or
xor
and
add
sbb
leave
outs
js
das
hlt
sub
jb
in
dec
cli
cmp
(bad)
push
xchg
neg
imul
pop
scas
cmp
bound
cmp
imul
push
sbb
xchg
xor
xchg
push
adc
retf
mov
lea
lods
xchg
inc
aas
or
mov
mov
inc
sub
add
je
push
cld
lods
xchg
inc
jne
pushf
fsub
in
sub
clc
pop
andps
fs
shl
sub
scas
jno
pop
ss
add
shl
sahf
pop
adc
and
movs
adc
sub
cwde
addr16
loopne
test
dec
addr16
in
in
and
inc
fadd
mov
fmul
pop
sub
jle
xchg
out
push
cld
(bad)
ins
dec
dec
cmp
add
call
and
and
cdq
mov
mov
(bad)
jae
add
cld
cmp
ins
call
test
mov
(bad)
jecxz
rol
loope
mov
fdiv
dec
pop
dec
sbb
rol
or
xor
xor
jmp
push
cmp
or
call
cmp
xchg
and
icebp
adc
pop
cmps
ficom
adc
mov
cwde
or
push
call
cdq
pop
icebp
call
push
sbb
sub
cmp
js
(bad)
push
push
ret
std
dec
mov
retf
and
sub
pop
(bad)
jmp
xchg
clc
pop
and
and
mov
fisubr
aas
add
mov
jmp
lods
sahf
xchg
loopne
(bad)
test
adc
loopne
inc
xchg
popf
sub
or
xchg
cmp
cmps
sub
int
add
(bad)
push
adc
sbb
aas
mov
pop
dec
cld
ficomp
push
xchg
fdivp
cli
and
sar
sahf
dec
adc
mov
or
pop
mov
adc
push
push
pusha
ins
or
sbb
xchg
mov
jne
mov
data16
pop
sahf
cmp
sbb
cs
and
sub
xor
push
adc
sbb
add
lock
or
(bad)
mov
jmp
pop
inc
xlat
cmp
test
enter
push
dec
arpl
ror
daa
pop
aad
sahf
and
inc
jne
idiv
(bad)
(bad)
mov
scas
xchg
(bad)
mov
xor
push
loope
cli
fnsave
xor
aaa
pop
dec
aas
test
pop
mov
ins
or
sub
nop
xchg
xor
cmp
in
mov
sahf
loopne
dec
outs
ins
sahf
(bad)
clc
call
fisttp
es
int3
sbb
popf
inc
push
lds
gs
fldenv
push
addr16
cmps
call
xor
xor
int3
or
jp
(bad)
shl
jge
(bad)
pop
mov
(bad)
in
push
es
(bad)
push
rcr
dec
and
or
add
inc
pop
aas
aaa
xchg
jmp
jne
daa
icebp
push
add
mov
sahf
xor
loop
sahf
(bad)
arpl
dec
mov
push
(bad)
cdq
(bad)
xlat
aam
push
mov
int3
jle
mov
pop
dec
dec
inc
das
and
dec
in
inc
int3
fcom
cmp
dec
add
xor
je
sub
lock
add
push
pop
xor
aas
push
and
or
sub
inc
jmp
imul
and
mov
pop
sub
lods
dec
fsub
and
jbe
push
data16
jo
mov
pop
cmp
jle
aas
push
cwde
sub
cld
xor
add
les
mov
sub
or
xor
daa
pop
int
inc
or
push
lea
cli
pop
sub
ds
addr16
scas
pop
adc
popf
jge
jl
leave
pop
cmp
pop
inc
pop
dec
adc
mov
xchg
mov
adc
mov
cmp
mov
nop
sbb
add
ret
dec
and
adc
lods
pop
leave
popa
jb
jbe
pop
mov
push
dec
pop
adc
mov
dec
loop
inc
jmp
adc
pop
xlat
push
mov
mov
test
je
push
std
pop
adc
sub
cdq
pop
cmp
mov
repz
pop
sub
xor
mov
cmp
loopne
lods
or
lahf
imul
or
cld
loop
aaa
xor
nop
push
add
sbb
in
push
pop
mov
or
sbb
mov
add
in
push
dec
pop
test
sub
or
adc
jns
(bad)
jg
jae
sub
sbb
mov
adc
cmp
xchg
jnp
ja
cmp
push
jecxz
pop
jmp
imul
jo
jle
or
mov
gs
fucomip
jns
pop
pop
xchg
outs
cli
add
push
inc
inc
ret
push
inc
add
or
sub
push
cmp
int3
test
in
jmp
js
dec
add
lahf
mov
rol
in
sbb
cdq
dec
cmp
jbe
pop
mov
cmp
cwde
cmp
mov
sbb
ins
xchg
mov
sar
push
hlt
dec
xor
sbb
fdiv
mov
bound
pop
sbb
add
jmp
push
push
push
ins
js
leave
add
dec
xchg
sbb
push
out
add
push
loopne
inc
in
in
sbb
adc
xchg
jno
movs
add
add
cmp
pop
imul
int
js
sbb
pop
push
mov
sti
mov
dec
xor
in
xchg
dec
outs
arpl
push
fsubr
sbb
mov
nop
sub
sub
cmp
sub
and
pop
dec
dec
sub
imul
push
sub
sub
sub
add
add
add
sbb
in
dec
dec
sahf
bnd
mov
ds
pushf
xchg
adc
mov
std
inc
ins
cmp
in
jge
push
sub
jae
sti
or
std
js
adc
nop
mov
cmp
mov
rcl
pop
sbb
(bad)
js
mov
pop
push
pop
cwde
mov
loopne
xchg
xchg
add
movs
cmp
pusha
jg
mov
lock
nop
jp
in
aam
jmp
push
cmc
retf
and
xchg
aad
fdiv
test
iret
fsubr
pusha
pop
sbb
or
and
inc
test
inc
or
add
sahf
in
mov
ds
sbb
les
add
pop
mov
out
push
cli
cmp
push
ss
push
add
jmp
pusha
dec
dec
push
mov
add
mov
pop
and
add
add
dec
in
or
movs
xchg
sbb
dec
scas
inc
mov
sub
lods
pop
pushf
mov
push
jp
nop
sbb
in
push
dec
dec
out
inc
adc
xor
jae
imul
pop
aad
sbb
adc
dec
ret
lds
xor
dec
or
sbb
sub
jnp
into
and
aaa
jno
mov
add
(bad)
enter
and
push
inc
mov
pop
adc
repnz
dec
mov
fbld
adc
loope
adc
sub
in
sub
jmp
out
les
shl
sbb
ret
lock
pop
call
mov
std
inc
xchg
inc
pop
mov
push
jnp
push
in
shl
mov
cmp
sbb
xchg
sub
jle
mov
sub
bound
js
adc
fisttp
retf
sbb
or
jns
pop
inc
iret
add
push
sub
imul
jbe
adc
fwait
loope
sbb
push
and
sub
adc
adc
sub
or
cwde
pop
adc
je
mov
adc
adc
and
iret
test
xor
mov
push
mov
jno
add
add
xchg
in
mov
xor
inc
jge
xlat
adc
pop
scas
or
add
mov
inc
dec
mov
push
in
and
pop
jmp
outs
mov
push
sti
push
mov
or
add
outs
cmp
pop
dec
xor
ret
sbb
jmp
das
rcr
mov
sub
adc
and
mov
pop
call
mov
retf
js
mov
mov
fiadd
pop
cmp
enter
xor
in
push
add
in
sub
(bad)
fcomp
pop
sbb
out
mov
jbe
xchg
call
xor
push
ficomp
inc
addr16
inc
sub
ds
inc
aas
int3
pop
aaa
or
sbb
pop
aam
sbb
dec
call
dec
pop
mov
fnstcw
in
sub
jp
jo
pop
out
sbb
pop
shr
jmp
or
cmp
call
or
pop
inc
arpl
pop
pop
shl
inc
mov
inc
push
sahf
jae
sbb
js
loop
icebp
jmp
das
adc
or
cwde
xchg
dec
mov
out
sub
movs
outs
push
add
adc
mov
ss
jne
push
or
clc
movs
push
or
xor
sbb
call
sub
call
fcomp
sub
inc
cli
sbb
push
lds
sbb
sbb
xor
xor
in
mov
fadd
add
cmp
pop
add
dec
mov
call
mov
push
aaa
jnp
call
inc
imul
call
jo
loop
xchg
ins
inc
xchg
pop
xor
and
les
lock
cmp
pop
mov
cwde
sbb
jmp
lods
add
sbb
hlt
xchg
hlt
or
or
ror
pop
test
xor
xor
sti
ror
sti
sbb
cmp
jbe
or
cmp
or
pushf
inc
movs
ins
shr
lea
lods
bswap
add
push
int
int
int
int
int
int
int
int
int
int
in
adc
lock
mov
scas
lea
int
int
int
int
int
clc
les
iret
(bad)
mov
stos
xlat
sub
jmp
imul
xchg
xchg
or
jmp
xor
xchg
xor
nop
xor
(bad)
pop
cmp
ins
sbb
xchg
mov
cmp
test
pushf
pop
push
test
lods
jmp
ins
nop
sub
mov
and
sbb
add
cs
arpl
je
in
mov
jmp
gs
aam
in
sbb
xchg
inc
sub
cmp
add
sbb
xchg
lock
sbb
cld
jmp
xchg
sbb
sbb
pushf
xchg
inc
sub
add
jmp
mov
sub
xor
pop
xchg
int3
jle
ror
lock
fwait
add
xchg
aam
adc
push
or
ins
fcom
sub
or
or
sub
rol
hlt
sbb
add
xor
movs
stos
or
push
jo
cmp
sbb
je
and
or
pusha
cmp
dec
mov
rsqrtps
pusha
mov
aas
mov
out
xor
outs
mov
mov
dec
repz
cld
inc
xchg
retf
or
(bad)
or
pushf
mov
dec
mov
adc
popa
cdq
or
aaa
jle
jg
sbb
outs
and
adc
push
fs
jae
into
pop
jnp
dec
push
or
popa
lock
pop
ins
push
inc
dec
cmc
shl
adc
cli
cmc
loopne
sbb
clc
sub
aaa
push
sbb
push
jbe
pop
mov
pop
mov
mov
mov
aaa
sbb
je
sbb
mov
in
aaa
mov
add
jne
call
or
sbb
jp
jo
loop
or
push
jns
cmp
or
adc
es
pushf
arpl
ja
push
fadd
xchg
das
add
pusha
mov
jb
xchg
adc
or
add
mov
adc
(bad)
in
mov
jae
jbe
and
out
and
dec
adc
dec
push
cmp
push
fs
pop
test
pop
ret
xor
add
or
out
pop
fs
adc
cld
sbb
xor
out
shr
shl
mov
push
scas
xchg
push
dec
sbb
cmp
and
mov
(bad)
jecxz
hlt
xor
cmp
bound
dec
cli
dec
pushf
out
fist
xchg
pushf
cmp
mov
xchg
cmp
pop
xor
ins
lock
dec
lods
aaa
adc
inc
imul
mov
cmp
mov
mov
push
pop
cmp
leave
inc
dec
dec
add
add
jne
or
dec
sub
ja
and
sub
fxch
inc
cmp
ror
cmp
or
add
add
cmp
icebp
or
adc
pop
xchg
cmp
out
cli
xor
inc
ds
fnsave
pop
(bad)
hlt
push
(bad)
and
push
add
fnstenv
mov
push
xchg
sub
and
xor
ins
and
xchg
lock
(bad)
push
add
push
inc
ss
pop
lahf
add
ins
dec
ja
cmp
sti
add
lods
icebp
adc
sub
and
pop
push
iret
addr16
sbb
dec
movs
and
jmp
out
pushf
mov
jecxz
cmp
imul
and
and
js
mov
sbb
pop
test
jecxz
movs
ror
movs
les
jo
pop
mov
stc
inc
iret
ins
mov
test
dec
sub
sub
outs
dec
js
adc
paddsb
dec
pop
mov
dec
mov
lods
outs
mov
and
jg
popa
test
inc
dec
jl
dec
imul
sbb
jmp
test
cld
xor
xchg
cmp
mov
fwait
sub
hlt
push
push
pop
xchg
stc
jl
aad
mov
jb
call
cmp
sbb
mov
or
dec
jb
aaa
arpl
add
push
leave
inc
sub
mov
mov
pop
or
and
mov
inc
out
cmp
leave
es
jge
dec
jbe
cmc
push
mov
adc
addr16
ja
dec
ret
cmp
dec
(bad)
dec
add
sbb
aas
dec
cwde
xchg
xor
xchg
gs
push
loopne
and
fs
test
push
xor
xchg
lock
push
pop
mov
pusha
sti
pop
pop
cmps
aaa
ds
push
add
xchg
push
jbe
add
mov
dec
in
pop
retf
adc
sbb
dec
mov
mov
retf
push
jle
in
dec
fidiv
add
mov
mov
sub
push
hlt
retf
sub
aad
mov
mov
xchg
or
pop
pop
fwait
sbb
mov
adc
rcl
mov
repz
pop
fiadd
sbb
push
ds
jp
dec
fwait
adc
cmp
ss
pop
ins
push
pop
or
push
aaa
xor
imul
ja
sahf
call
jnp
int3
mov
mov
repnz
cwde
stos
sub
cmp
hlt
mov
jne
xor
mov
je
fs
pop
xchg
adc
jo
inc
xchg
and
mov
sbb
mov
mov
inc
mov
inc
xchg
push
dec
adc
test
mov
or
or
stos
push
test
adc
sahf
ja
mov
enter
(bad)
cmp
in
add
push
add
mov
sub
inc
xor
cmp
in
retf
inc
pop
or
aaa
in
push
xchg
(bad)
jge
sbb
cmp
fistp
adc
or
cmp
les
sbb
mov
sahf
sbb
or
adc
jp
jmp
imul
cmp
fs
mov
or
xor
cmp
pop
mov
ds
out
lock
or
inc
xchg
mov
and
sub
aas
push
rcl
outs
cmp
cmp
inc
sbb
push
in
push
mov
pop
pop
dec
int
popa
mov
sub
or
xor
int
sbb
dec
inc
mov
es
in
inc
test
mov
rcl
jns
in
ds
nop
out
outs
cdq
in
add
js
sub
sbb
add
jb
ja
push
inc
aaa
jge
sub
in
sar
int
jle
inc
inc
movs
mov
ins
retf
fcom
xchg
mov
pop
inc
rcl
jo
js
ds
sbb
inc
retf
xor
fsub
mov
add
mov
cli
jmp
sub
movs
pop
stos
cmp
adc
fcom
cs
imul
fs
push
lods
fbstp
mov
add
js
jmp
lahf
lds
cmp
pop
mov
or
xchg
mov
sub
xor
popf
jnp
inc
jp
jmp
dec
loope
or
mov
sbb
mov
mov
mov
dec
popf
imul
test
cmp
in
dec
pop
loop
add
sar
dec
test
or
cmp
jns
clc
push
push
add
cmp
call
call
mov
fdiv
dec
adc
add
xor
int3
in
add
sbb
mov
inc
mov
nop
dec
hlt
cli
(bad)
rol
adc
fs
bound
inc
test
in
lea
mov
mov
pop
sub
mov
lods
pop
mov
mov
sti
and
jmp
dec
sub
mov
mov
in
push
add
xor
add
adc
imul
retf
dec
mov
les
cmp
imul
push
or
xchg
aaa
dec
mul
sbb
sbb
mov
mov
dec
or
and
xchg
or
dec
je
push
sub
push
pop
mov
movups
push
aam
fld
pop
loope
add
mov
or
mov
fs
int3
ss
popf
jne
add
adc
xor
sub
icebp
jae
sbb
aaa
popa
mov
or
cmp
pop
cmps
inc
and
cmp
popf
div
in
ins
adc
mov
xor
std
dec
lods
sar
sbb
xchg
adc
aaa
add
pop
bound
scas
std
outs
inc
lds
sbb
pop
mov
inc
jle
adc
les
mov
add
adc
or
int
dec
add
sub
ss
addr16
xchg
pusha
mov
call
push
push
mov
test
div
sub
push
mov
aaa
pop
loop
imul
inc
mov
rcl
add
mov
popa
loopne
jae
bound
movs
cli
nop
sbb
in
and
test
pop
push
dec
out
pop
sub
or
cmp
mov
sbb
nop
pop
fmul
push
or
adc
ins
push
add
jl
mov
adc
jbe
cmp
loopne
test
jmp
mov
push
and
arpl
pop
adc
pop
xchg
rcr
lods
xor
rol
mov
push
inc
loopne
xor
or
pop
mov
mov
push
jg
gs
faddp
mov
jne
push
and
pusha
add
mov
jbe
cmp
stos
cmp
xor
(bad)
lahf
push
sbb
adc
dec
add
sub
and
adc
out
addr16
lea
push
cmp
retf
ds
sub
je
enter
pop
sub
sbb
dec
pop
mov
imul
jmp
add
push
call
mov
sahf
dec
or
mov
xor
and
mov
push
(bad)
mov
mov
and
adc
jge
nop
and
loope
xchg
pushf
adc
adc
sbb
add
xchg
inc
(bad)
jg
xor
pop
and
fbld
and
sub
adc
push
xchg
push
and
xor
sub
pusha
in
ja
dec
sub
xchg
fadd
test
or
les
mov
adc
or
mov
pushf
or
or
push
mov
mov
mov
fcomp
and
jno
and
sbb
ret
xchg
cmp
xor
xor
add
rcr
in
test
pop
and
fisub
rcl
pop
in
sahf
push
sbb
sbb
or
sbb
or
test
lds
stos
pop
xor
cld
int3
call
jb
pop
xchg
ds
adc
add
xchg
push
add
or
push
fcmovnb
add
pop
add
xchg
popf
js
add
sbb
or
sbb
adc
in
add
sbb
xor
inc
pop
enter
cmp
sub
push
adc
in
jae
stos
xchg
inc
loope
cdq
(bad)
leave
jecxz
add
leave
sub
cmp
sub
icebp
xchg
mov
jmp
or
jbe
cwde
jno
in
repz
sbb
outs
and
add
push
mov
adc
pop
sub
enter
sbb
pop
(bad)
mov
inc
retf
or
lea
in
push
or
(bad)
and
in
jmp
and
cmc
and
fcom
pop
xchg
ret
pop
fsubr
sub
ins
jbe
cld
adc
or
dec
call
in
add
inc
mov
mov
jmp
lahf
dec
adc
jle
inc
(bad)
nop
shl
pusha
adc
xor
in
fisub
add
lods
mov
xor
and
jp
or
adc
in
pop
mov
fdiv
cmps
fisttp
les
xor
(bad)
(bad)
in
push
push
push
xor
pop
pop
add
xlat
mov
add
pop
imul
xor
in
call
das
imul
cmc
add
xor
sub
(bad)
stos
out
imul
sub
push
rcl
stc
lods
ss
pop
js
inc
pop
aad
das
adc
sbb
icebp
sub
pop
xchg
pop
add
cmp
mov
and
les
adc
push
adc
pop
dec
xchg
sub
sbb
fwait
xor
inc
loopne
push
cmp
adc
or
pop
fld
sbb
jb
adc
sub
bound
ins
clc
pop
in
push
inc
pop
push
push
repz
push
mov
and
pop
sbb
loopne
frstor
lods
mov
jmp
xor
retf
push
retf
movs
test
inc
cli
int3
fs
jmp
and
loop
cld
jne
push
inc
xor
pop
pushf
adc
jecxz
or
push
mov
xor
sub
sbb
dec
or
pop
push
add
les
int3
mov
sbb
popf
or
adc
fsub
ficom
addr16
cmp
jb
sub
lods
sahf
rcl
push
ret
xchg
in
test
dec
inc
or
cmp
jle
cld
popa
cwde
(bad)
js
ret
lods
xor
fsubr
aaa
aas
or
push
pop
movs
mov
sbb
loop
push
into
mov
sbb
inc
adc
or
xor
shl
mov
and
pop
and
fldenv
ins
dec
loop
arpl
mov
jmp
mov
sti
cmp
mov
xor
icebp
fwait
les
inc
jle
mov
es
dec
mov
cmp
and
add
icebp
pop
xor
xchg
inc
retf
adc
push
cmp
mov
ins
ror
push
dec
and
add
data16
lods
push
repnz
adc
call
cmp
aad
push
(bad)
fmul
dec
xchg
jb
and
mov
std
retf
inc
sbb
sub
inc
aad
(bad)
pop
pop
jl
dec
xchg
lea
xchg
pop
xor
in
push
inc
add
xor
push
pop
cmp
jo
xor
fldenv
add
push
repnz
and
icebp
sub
or
sub
lods
and
sub
dec
and
icebp
je
adc
pop
in
lock
pop
mov
or
jmp
cdq
and
sub
pop
(bad)
jmp
ficomp
fwait
hlt
jg
imul
push
sbb
push
or
icebp
push
xchg
xor
inc
mov
int3
xchg
mov
ins
sbb
push
cmp
add
inc
mov
inc
mov
add
pop
or
sahf
add
cwde
pop
cs
sub
jns
in
jl
retf
outs
mov
pop
sbb
inc
je
cli
les
push
adc
sub
outs
aad
pop
dec
xlat
pop
cmp
mov
stos
imul
in
add
sbb
adc
jmp
les
dec
cmp
fs
add
lods
push
pop
xlat
dec
or
(bad)
adc
pop
pop
xor
or
pop
add
push
push
int3
jmp
xor
or
xchg
or
int3
add
dec
or
mov
data16
add
imul
(bad)
jl
pop
cmp
add
add
cmps
ins
sub
or
or
nop
scas
xchg
and
and
jmp
sbb
sbb
lods
xchg
int
xor
ret
ficomp
adc
jno
fild
and
or
pop
adc
mov
cli
sbb
inc
xor
ins
mov
cwde
(bad)
adc
ror
(bad)
int
scas
xor
fdiv
in
aam
retf
bound
xor
icebp
push
or
stos
and
sbb
out
icebp
push
inc
cmps
adc
adc
inc
aas
sbb
add
fimul
jbe
mov
cmp
lods
xor
jmp
int3
jecxz
out
inc
xchg
add
push
xor
push
std
sub
or
test
pop
pop
add
lods
or
pop
ficomp
fsubr
out
mov
and
fcomp
jne
movs
dec
and
xchg
in
ins
pop
arpl
push
xor
push
cmp
js
popf
cld
je
and
adc
adc
imul
stos
pop
sub
sub
ficom
push
adc
inc
(bad)
ds
and
fmul
sub
movs
and
in
ds
fiadd
loope
pop
inc
out
xlat
inc
push
sub
add
push
sbb
(bad)
jp
cmp
sahf
add
es
cmp
ds
ret
xor
jl
pushf
xchg
cmp
jb
add
xchg
pop
shr
push
push
out
xor
fsubr
ins
cmp
bound
sbb
cmp
or
cli
addr16
es
ss
int3
ins
xor
dec
xchg
cld
jne
or
loop
mov
or
cmp
pop
jle
xor
in
pop
mov
pop
xchg
dec
in
jp
xor
lods
jge
scas
push
mul
imul
add
xor
and
push
(bad)
xor
ret
inc
sub
xor
mov
aaa
(bad)
mov
push
sar
idiv
add
and
push
out
inc
push
ficomp
out
and
pop
sbb
add
sbb
fld
cli
pop
cmp
mov
lods
cmp
push
pushf
adc
xor
mov
aam
cmp
or
push
imul
xor
dec
xor
fsubr
pop
in
out
fs
arpl
jo
mov
aam
pop
inc
adc
pop
xor
imul
and
imul
or
push
pop
or
dec
or
loopne
pop
in
adc
in
pop
adc
(bad)
add
jno
push
out
pusha
inc
inc
(bad)
pop
out
test
fld
cld
es
shr
cdq
jns
loopne
lahf
aam
inc
sti
out
inc
gs
addr16
jnp
jae
ins
loope
out
test
pop
cmp
cmp
rcr
lock
mov
dec
sub
adc
in
xor
or
inc
push
mov
or
mov
ins
js
loop
loope
test
push
or
cmp
dec
aaa
movs
out
jle
loopne
mov
mov
jle
add
mov
xchg
in
aad
cdq
or
and
mov
popf
inc
iret
push
scas
out
es
ret
pop
mov
or
adc
mov
pop
retf
aas
pop
mov
bound
(bad)
cmp
xchg
sbb
inc
mov
call
mov
clc
sub
inc
dec
jmp
adc
jp
mov
xchg
sbb
sub
jg
in
push
into
jl
inc
sbb
xchg
push
pop
jnp
xor
add
dec
mov
and
das
ins
mov
xchg
bound
call
mov
call
movs
or
jg
add
add
cmp
in
inc
mov
xchg
shr
mov
ja
(bad)
mov
add
or
jmp
mov
ds
pop
jne
jecxz
push
call
ins
adc
mov
icebp
sub
xor
adc
outs
inc
inc
adc
inc
or
push
scas
dec
pop
sub
pop
sahf
push
cwde
xchg
mov
call
sub
mov
pop
mov
movhps
fsubr
mov
repnz
loop
out
inc
mov
jb
mov
or
loop
test
xor
fisub
mov
dec
test
cmp
neg
imul
invd
test
dec
adc
inc
pusha
test
mov
push
inc
cmp
jnp
pop
out
int3
stos
pop
stos
jmp
ins
inc
xor
xlat
pop
daa
lods
inc
nop
xor
add
imul
sbb
pop
pop
test
rol
xchg
pop
test
test
or
inc
add
stos
outs
add
or
adc
cmp
or
ins
sti
mov
in
fadd
aas
(bad)
adc
push
or
dec
aam
pop
je
out
pop
popf
pop
nop
pop
or
mov
mov
sar
out
push
pop
ret
xchg
dec
jae
mov
xor
gs
adc
pop
dec
push
cmps
enter
xbegin
xor
lods
push
dec
dec
cmp
ds
repz
mov
aaa
addr16
test
pop
mov
adc
int
cmp
arpl
or
pop
xchg
mov
jp
push
js
cld
dec
jne
lock
mov
movs
push
dec
adc
scas
push
push
ja
rcr
movs
cmp
xor
push
ret
pop
stos
jp
ins
imul
in
popf
loop
icebp
in
inc
xchg
fcom
lahf
fwait
popa
stos
fwait
mov
or
movs
outs
fucomip
push
xor
inc
mov
and
lods
push
addr16
xchg
in
sub
xlat
and
(bad)
in
retf
(bad)
ins
and
mov
add
fmul
jmp
loopne
sub
inc
or
push
sub
pushf
or
and
pop
sbb
bound
xor
dec
adc
pop
cld
loop
pop
int3
in
xor
jge
mov
div
loope
sbb
(bad)
gs
mov
repz
cdq
fmul
aas
push
hlt
and
cmp
mov
test
sbb
ins
std
loop
vmread
dec
lods
push
pop
adc
pushf
jmp
jecxz
pop
jmp
and
mov
sbb
repz
sub
ss
mul
mov
outs
cld
inc
xchg
xor
iret
sbb
shr
jmp
adc
cld
loop
fstp
fs
mov
and
mov
scas
or
and
in
or
imul
sbb
pop
popf
pop
les
in
cmps
mov
ins
pop
sbb
test
enter
call
xchg
out
dec
mov
and
jmp
add
loopne
ins
sbb
xchg
shl
int3
push
xor
add
int
lock
jae
cmp
add
pop
sub
add
imul
and
xchg
mov
inc
pop
push
clc
cmp
pop
outs
and
sbb
fs
push
lock
jge
xchg
das
ja
sub
pop
xor
jge
cli
push
mov
loop
push
xchg
rcr
(bad)
loopne
cmp
out
cdq
mov
xor
or
mov
repz
xchg
mov
ja
cli
repnz
sub
mov
int
cmp
mov
sbb
adc
pop
pop
inc
add
jns
dec
jmp
xor
cwde
retf
add
xor
push
loop
sub
push
es
imul
jb
inc
pop
rcr
adc
lea
jmp
ins
sar
dec
sub
jmp
pop
or
sahf
loop
cdq
jl
int
retf
sbb
add
loope
push
or
xchg
sub
cs
fs
jp
arpl
imul
nop
cmp
dec
or
mov
int3
scas
loopne
push
push
fidiv
sub
pusha
ror
xchg
mov
ins
cmp
xor
std
pop
cmp
fisubr
adc
inc
jecxz
or
or
mov
lods
jmp
jmp
cmps
add
jmp
clc
xchg
mov
retf
call
adc
cdq
push
sbb
(bad)
sbb
aad
ss
in
inc
adc
cli
js
jne
mov
inc
loopne
inc
dec
call
add
xor
mov
jmp
pop
jge
adc
ins
and
dec
dec
or
dec
push
int3
(bad)
sti
cmp
add
and
jp
call
sbb
mov
int3
push
imul
and
sbb
jp
test
(bad)
xor
mov
arpl
sub
and
pop
xor
add
test
lods
cmp
sbb
call
daa
mov
or
pop
nop
push
pop
outs
loopne
push
xlat
test
sub
or
push
data16
repnz
dec
pop
nop
lahf
enter
jmp
sub
adc
push
cmp
sub
add
and
lock
int
adc
xor
fwait
and
lea
pop
mov
inc
add
xchg
jp
das
sbb
in
js
jne
inc
cmps
or
pusha
xor
test
mov
(bad)
sbb
iret
inc
stos
ret
push
mov
loop
mov
cmp
add
shr
mov
push
pop
ds
pop
sub
test
inc
movs
sub
jbe
test
push
cmps
sub
or
sub
push
aaa
loop
fcomp
es
xchg
sub
fisttp
jae
pop
cdq
aad
jl
lods
(bad)
sahf
and
or
gs
mul
pop
sbb
pop
nop
ins
push
div
adc
mov
js
lds
mov
xor
sbb
sbb
ins
fwait
je
xchg
test
into
sbb
jmp
popa
push
dec
les
scas
push
pop
adc
sub
xor
jmp
inc
js
push
cmp
sub
pop
adc
fcomp
sub
xor
pop
pushf
pop
adc
or
(bad)
ret
outs
or
xchg
push
int3
xchg
retf
js
xor
sbb
push
mov
test
push
ret
test
ins
mov
cmp
cmp
or
jecxz
sub
addr16
dec
pushf
scas
mov
fsub
lods
push
and
hlt
push
jno
adc
jmp
mov
inc
mov
dec
js
push
and
out
and
mov
fs
pop
adc
xor
stos
out
add
pop
and
sbb
xor
or
or
movs
dec
lods
mov
pop
call
mov
or
xor
adc
cmp
adc
jmp
outs
add
in
and
sub
xor
pop
dec
pop
pop
xor
pop
sbb
add
fwait
mov
data16
mov
sbb
fsub
xor
inc
or
aaa
inc
popa
inc
cmp
or
aas
sbb
pop
or
pop
(bad)
cmp
mov
xor
sbb
sub
aam
fxch
push
jmp
mov
mov
ss
sbb
ja
sub
cmp
mov
cmp
jl
or
or
sbb
add
mov
adc
sbb
lods
outs
rol
clc
fidivr
in
stos
sub
aad
les
ss
pusha
js
ins
repnz
stos
jecxz
push
inc
dec
jl
push
movs
add
xchg
push
jecxz
mov
mov
pop
jo
inc
lea
sbb
push
xor
jo
xchg
pushf
out
xor
cld
sbb
out
mov
mov
sbb
int3
mov
mov
jmp
adc
or
cli
lock
push
sbb
pop
xchg
sub
jp
mov
pop
int3
and
call
lods
xor
jmp
or
pop
xor
and
push
leave
push
push
loop
pushf
dec
or
and
outs
sbb
sbb
mov
sub
add
ss
push
cmp
add
add
mov
sub
lods
sub
jnp
lds
adc
dec
mov
and
aaa
or
mov
jnp
sbb
mov
pushf
push
lea
xchg
imul
popa
daa
dec
dec
mov
sti
shl
dec
loopne
push
cmp
sub
jnp
or
mov
cli
sbb
test
cmp
pop
pop
test
or
jle
or
dec
adc
cmp
in
test
iret
scas
mov
mov
add
outs
dec
sbb
dec
icebp
mul
add
int
sub
into
mov
jmp
pop
sbb
mov
xchg
pop
xor
ins
popa
gs
dec
mov
mov
add
sahf
jns
push
adc
mov
jb
lods
cmp
or
or
fsub
dec
imul
mov
xor
mov
push
out
push
xor
xchg
into
lahf
imul
scas
icebp
fisttp
sub
jmp
aam
mov
les
add
inc
push
dec
mov
xchg
add
adc
cli
jo
repnz
push
and
stos
aad
add
ret
add
outs
push
pop
loop
add
add
lods
cld
jno
jle
or
sbb
mov
or
in
in
mov
stos
jns
pop
pop
rol
jmp
xor
in
jp
mov
aam
pop
mov
sub
fimul
jecxz
sbb
int3
pop
push
pop
adc
jge
cdq
or
and
retf
xchg
mov
icebp
(bad)
dec
xchg
mov
xchg
sahf
adc
in
cmp
aaa
and
jae
sbb
scas
cwde
aaa
cs
mov
push
dec
xchg
ror
jecxz
cmp
loop
xchg
(bad)
sbb
sub
(bad)
out
pushf
mov
int
add
or
lea
js
mov
test
xor
jmp
sbb
dec
int3
into
mov
jl
int3
int3
mov
and
cs
loop
push
add
fistp
pusha
and
pop
or
jle
lods
in
pop
in
cmp
mov
inc
mov
out
ds
inc
pop
(bad)
push
add
and
jmp
arpl
push
push
addr16
shl
ja
mov
xchg
and
ins
inc
ror
push
push
add
xchg
mov
jns
xor
shl
in
push
push
xchg
or
ins
dec
push
and
ret
mov
mov
sub
pop
test
and
inc
in
jmp
ins
aam
push
sahf
imul
add
push
icebp
cmp
jmp
fistp
pop
inc
retf
push
sbb
lods
aad
dec
test
push
fisub
xor
addr16
xor
push
push
or
in
xor
cmp
cmp
mov
mov
jmp
sub
or
popf
hlt
call
retf
push
aas
loope
or
loope
pop
test
lock
inc
mov
adc
pop
sbb
jo
not
sub
push
add
int
sub
loopne
repz
and
(bad)
ins
lea
mov
ja
xlat
pushf
adc
mov
jne
addr16
icebp
xchg
int
(bad)
jge
jbe
xchg
loop
push
out
xor
cdq
popa
(bad)
repnz
or
adc
push
jbe
in
add
sbb
dec
retf
add
hlt
sbb
repnz
push
add
int
mov
and
cdq
repz
cmp
pop
jb
fidiv
xor
push
fsub
aam
cmp
pop
not
xchg
scas
sbb
and
add
int3
lock
xchg
dec
sub
add
add
popa
cwde
sub
and
add
inc
sub
or
push
add
mov
shl
sub
mov
xor
cmp
mov
fsub
pop
dec
sub
push
test
cmps
jae
pop
add
mov
mov
adc
adc
imul
into
push
js
adc
xor
movs
rsqrtps
in
imul
fbld
jnp
and
out
mov
pop
sub
jne
add
and
and
fs
sbb
or
push
cld
adc
dec
test
lock
and
cld
cmp
jns
mov
or
or
add
imul
dec
pop
xor
add
sbb
adc
jle
pop
or
popa
push
sub
sbb
neg
imul
jne
or
int
in
cdq
sub
sbb
cmp
xor
fstp
fisub
xchg
aaa
mov
xor
retf
mov
adc
mov
imul
cmp
hlt
xor
jae
ins
add
es
in
pop
mov
int3
mov
dec
add
sbb
mov
or
dec
jl
xchg
mov
call
cs
inc
sbb
adc
jmp
movs
jmp
add
add
jb
jb
pop
nop
add
add
mov
pop
cmp
test
sub
fwait
stos
cmps
xchg
inc
lea
arpl
rcl
adc
or
mov
add
(bad)
push
add
test
test
nop
add
dec
cld
jp
add
dec
gs
jmp
xor
lea
pop
xchg
aas
fsub
sbb
inc
aas
cmp
fdiv
push
xchg
or
pop
add
enter
dec
mov
add
pop
scas
sbb
push
adc
mov
mov
cwde
jg
or
loop
clc
repz
push
jae
xor
cmp
addr16
clc
pop
cmp
in
xor
fcomp
push
scas
in
dec
test
mov
mov
jle
add
aaa
jo
xor
mov
cmp
inc
daa
add
xchg
add
lods
add
add
xchg
add
fsub
mov
jae
cwde
int
out
inc
hlt
add
test
inc
adc
sbb
jmp
fidivr
adc
test
xor
jg
add
cmp
cs
lahf
outs
mov
add
into
int3
dec
addr16
and
jb
jne
clc
ja
lock
fisub
sub
adc
cmp
movs
pop
and
xchg
mov
and
adc
mov
cwde
lahf
add
add
cmc
arpl
jg
lahf
pop
inc
inc
mov
cmps
mov
pop
repnz
es
push
rol
inc
mov
push
push
mov
dec
inc
pop
xchg
push
cli
sets
push
mov
je
in
(bad)
or
in
ins
ds
dec
jo
push
retf
cmp
arpl
xor
rcl
cmps
cwde
lahf
stos
es
bound
repnz
popf
sub
adc
pop
sbb
add
je
push
das
pop
fdivr
fld
dec
nop
test
pop
mov
dec
fild
adc
pushf
std
inc
ret
cdq
xchg
jnp
pop
fsubr
popa
icebp
ins
add
pusha
(bad)
mov
repz
rcr
inc
bnd
mov
rcl
xor
pop
or
jb
shl
data16
lds
or
ss
ins
rcl
cmp
push
test
dec
dec
and
jo
gs
ret
or
push
xchg
cld
mov
inc
retf
push
dec
push
xchg
cwde
je
cmps
push
pop
lea
add
setae
mul
in
adc
or
mov
pop
push
cmps
jmp
jp
add
sub
dec
mov
loope
ret
sub
pop
xchg
aas
xor
sbb
push
mov
sbb
mov
movs
push
into
inc
repnz
dec
popf
push
sti
pop
nop
sbb
sbb
out
or
or
jp
imul
clc
mov
cmp
adc
ficomp
icebp
adc
dec
jne
cmp
xor
mov
or
mov
retf
add
hlt
pop
test
movs
xor
inc
sbb
mov
inc
out
stos
sub
and
sbb
jle
rcr
push
add
bnd
cdq
int3
push
data16
push
sbb
and
imul
mov
jecxz
jbe
xor
inc
and
xor
call
lahf
loope
pushf
sahf
add
pop
dec
xchg
cmps
stc
sub
fwait
push
adc
sbb
xchg
sbb
jno
(bad)
or
repz
clc
sbb
jae
notrack
cdq
mov
or
pop
imul
push
fsub
adc
sbb
repz
out
fxch
push
push
xchg
push
add
sbb
pop
cmp
retf
out
in
out
dec
pusha
jb
inc
adc
fwait
and
shl
jb
stc
retf
test
mov
loopne
or
jne
int
inc
xor
mov
loop
lods
or
addr16
stc
xor
js
xor
add
push
adc
pop
imul
out
cwde
xor
adc
sbb
(bad)
push
jmp
and
aam
loop
mov
shl
xor
adc
or
pop
out
mov
sub
cli
or
sub
jbe
xchg
mov
mov
xchg
stos
cmp
mov
xchg
in
data16
frstor
sbb
pop
loop
push
scas
sbb
sti
call
js
lods
jmp
sbb
cs
add
cmps
aad
dec
cwde
addr16
xchg
sti
inc
push
xchg
icebp
dec
in
fs
outs
cwde
push
fdiv
inc
cmp
add
jecxz
stos
pop
sbb
xor
cld
xchg
add
add
int3
push
or
pop
mov
cli
cs
push
scas
or
cmps
add
movs
adc
sbb
jae
add
push
and
sbb
mov
cld
and
push
ins
mov
xchg
aad
gs
jmp
ins
leave
sub
pushf
shr
(bad)
push
push
adc
cmpps
imul
mov
sbb
fwait
pop
sbb
std
or
fdivr
jmp
push
(bad)
xor
mov
add
in
mov
mov
or
lods
xor
mov
dec
inc
ret
mov
push
scas
dec
sub
dec
bound
dec
sbb
dec
xlat
push
inc
pop
adc
push
pop
addr16
sub
lods
push
loop
aad
mov
jb
dec
push
push
add
mov
ds
movs
jmp
or
or
(bad)
mov
out
aam
mov
jb
or
mov
sar
mov
out
and
jecxz
add
into
out
cmp
(bad)
xchg
xor
mov
mov
push
or
ss
lods
ins
mov
sub
or
lods
arpl
push
xchg
sub
fdiv
jmp
fstp
or
or
test
enter
out
pop
sub
xor
pop
inc
xchg
fst
jae
dec
into
push
add
sub
inc
in
inc
retf
push
and
cmp
add
stos
xor
pop
dec
stos
pop
jb
popa
scas
sbb
or
mov
ds
adc
retf
adc
xchg
or
paddd
or
rcr
cmp
add
ds
jle
sbb
jb
sbb
or
adc
cld
sub
ror
data16
call
popf
xchg
and
xlat
jp
sahf
and
out
adc
ror
fcomp
xchg
pop
inc
pop
dec
mov
repz
and
stos
mov
popf
lock
popf
push
ror
out
call
inc
xor
adc
cdq
cmp
aad
in
and
mov
jge
or
xor
mov
and
add
loope
addr16
jb
push
mov
std
ins
retf
push
imul
or
daa
lsl
pop
fisttp
xor
mov
pop
scas
inc
dec
xor
ins
and
adc
add
push
add
(bad)
shr
(bad)
adc
js
sub
xor
jnp
rol
mov
dec
xor
jb
in
push
cmp
jmp
fadd
push
stos
push
fs
fist
push
or
inc
call
adc
pushf
hlt
xchg
xchg
sub
(bad)
inc
xchg
lods
or
jb
dec
fadd
push
xor
adc
jo
xchg
lahf
jae
ja
(bad)
and
lods
xchg
inc
test
inc
in
mov
lods
leave
div
inc
fisttp
jmp
xor
sbb
and
adc
fstp
dec
and
(bad)
pop
xchg
test
out
test
leave
retf
rcl
je
repnz
shr
sahf
aaa
cmp
fld
(bad)
push
mov
mov
xor
imul
mov
shl
into
inc
mov
mov
sti
(bad)
fdivr
sbb
loopne
push
sbb
jmp
and
fsubr
push
lods
call
pop
in
inc
test
lock
pop
dec
repnz
into
xchg
movs
mov
ds
or
enter
or
test
xchg
repnz
test
xchg
sahf
cmp
pop
les
pcmpgtw
movs
loopne
ret
inc
inc
mov
loopne
dec
xor
mov
ins
xor
and
cmp
in
cmp
push
jg
inc
sbb
push
inc
lods
and
jp
sbb
mov
rol
call
call
sar
xor
dec
cmp
add
xor
lods
ins
js
pop
data16
sub
add
mov
xlat
rcl
dec
aas
sti
icebp
lea
jle
inc
into
add
xor
xlat
add
push
in
aad
jg
xchg
jmp
shl
xchg
enter
sub
pop
addr16
xchg
xchg
mov
fdiv
xchg
shl
adc
das
inc
inc
call
pop
sbb
ret
data16
arpl
xor
xchg
sbb
cdq
loope
pusha
cmp
push
mov
mov
nop
scas
jle
(bad)
fisttp
xor
add
sbb
add
mov
xchg
in
enter
int3
or
mov
mov
leave
and
jge
sti
xchg
popf
sub
fcomp
jle
or
pop
mov
mov
jno
cli
(bad)
adc
cwde
xlat
cdq
push
pop
in
dec
lahf
jmp
(bad)
sbb
(bad)
daa
cdq
stos
cdq
xchg
jge
xor
and
jne
mov
movs
xchg
mov
stos
movs
xor
shr
popa
jmp
sbb
loop
pop
cdq
xchg
pushf
dec
adc
fs
xchg
mov
mov
xor
adc
cwde
xor
jnp
mov
stos
(bad)
xchg
loope
pop
fs
rcl
popa
fs
add
add
jge
xchg
jle
xchg
sub
sti
lea
dec
int3
and
mov
jmp
mov
pop
and
dec
in
les
cmps
ret
sbb
ins
sub
mov
(bad)
fist
cmps
sbb
lock
ss
jnp
arpl
ins
pop
sbb
bound
or
sub
and
cmp
es
pop
(bad)
je
int3
fiadd
jecxz
lahf
jl
mov
idiv
push
dec
call
ror
xchg
inc
repz
daa
cmp
push
push
xor
popa
push
push
push
and
sbb
mov
and
mov
add
mov
lock
imul
pop
dec
cs
jne
lods
push
dec
les
xchg
(bad)
push
cmp
cmp
jl
popf
addr16
jno
inc
mov
jbe
pop
lea
or
popf
cmp
xor
pop
sti
popa
jg
bound
dec
push
add
ins
xor
xchg
icebp
or
ins
pop
xor
add
mov
pop
repnz
adc
fild
mov
cwde
pop
push
ins
sbb
and
mov
or
mov
jp
mov
xchg
in
fdiv
daa
inc
cmp
xor
and
outs
or
or
ret
mov
pop
or
fcomp
adc
xchg
adc
xor
push
fsub
adc
int3
push
xchg
adc
and
xchg
inc
loop
adc
enter
int
or
dec
fcomp
mov
xor
scas
pop
addr16
dec
push
mov
mov
or
and
and
pop
mov
xchg
pop
sti
scas
cmp
aaa
dec
sbb
jns
sbb
loop
enter
in
or
fs
or
push
mov
pop
pop
and
and
cmp
ja
pop
pop
sub
and
or
xchg
add
cwde
outs
repz
mov
xchg
and
inc
mov
jmp
mov
lock
add
inc
xor
xchg
xchg
jp
pop
adc
movs
sbb
xor
(bad)
in
loope
cmp
and
mov
push
or
movs
add
or
mov
mov
xchg
out
ins
cmc
out
inc
pop
(bad)
(bad)
push
call
xor
lods
add
lods
aaa
retf
into
inc
jmp
xlat
scas
adc
mov
hlt
xchg
int3
pop
ret
in
jb
adc
jmp
adc
(bad)
imul
sbb
dec
pop
cli
push
add
js
dec
js
or
xchg
xor
gs
or
inc
and
xor
mov
leave
mov
mov
or
dec
and
(bad)
call
test
or
and
xchg
dec
push
add
out
xor
cwd
push
aaa
cdq
xchg
int3
jmp
and
mov
mov
dec
lock
pop
dec
or
(bad)
rcl
xor
or
dec
adc
adc
push
fucomip
ds
jne
jo
mov
in
and
(bad)
fs
push
dec
mov
push
jg
lock
jb
fdivr
adc
add
adc
cwde
and
pop
out
add
(bad)
jmp
addr16
das
or
inc
add
xchg
push
xchg
sub
push
or
xor
mov
push
or
add
ficom
mov
sbb
icebp
sub
jg
or
jle
pop
or
rcl
out
cmc
cld
loopne
rcr
and
xor
lds
std
push
int
add
loopne
fsub
ror
cli
outs
fs
das
sub
push
mov
sti
movs
pop
push
xchg
dec
aam
loopne
lods
sub
push
or
inc
pop
or
or
sbb
push
js
scas
stos
jne
push
push
sub
outs
xchg
xor
add
(bad)
xchg
inc
les
neg
or
lahf
or
les
(bad)
add
bound
push
xor
js
xchg
mov
mov
jmp
addr16
or
or
or
xchg
dec
popa
lahf
xchg
pop
hlt
sub
aad
fiadd
outs
fs
jmp
add
xor
sub
or
(bad)
mov
sbb
ja
in
mov
dec
push
mov
adc
mov
into
or
stc
add
and
(bad)
out
xchg
ds
repnz
sti
dec
mov
rcl
xor
or
cwde
adc
outs
jge
test
push
jo
jne
stc
mov
or
ja
mov
adc
out
dec
out
in
dec
ja
and
lods
es
pop
pop
cmp
push
sub
lea
mov
inc
stos
not
or
into
adc
cmp
nop
or
dec
cmps
fcmovnu
xor
test
(bad)
dec
sub
aad
addr16
ins
es
mov
cmp
mov
out
pop
js
les
dec
mov
int3
push
and
lods
cmp
xchg
jbe
or
call
mov
inc
push
add
adc
or
mov
mov
scas
mov
mov
dec
sub
sbb
sbb
xor
mov
sub
(bad)
jp
ror
(bad)
clc
(bad)
mov
call
imul
add
or
mov
xchg
mov
mov
sbb
cld
pop
jno
and
test
fs
or
dec
mov
adc
(bad)
adc
ficom
pusha
xchg
cmp
xlat
aaa
jbe
ror
mov
(bad)
lea
or
mov
xchg
cmp
or
scas
hlt
mov
push
xor
loope
pop
lods
ss
lods
push
imul
xchg
sbb
hlt
es
(bad)
pop
adc
push
int3
add
lock
sbb
in
sbb
call
xor
loopne
(bad)
dec
lock
dec
sar
in
push
leave
(bad)
sbb
nop
pop
xchg
push
xchg
pop
mov
aam
(bad)
lahf
jp
fistp
mov
stos
pop
push
sbb
loopne
push
sbb
out
cmc
nop
in
sbb
xor
lea
or
sbb
and
adc
out
sbb
addr16
inc
addr16
call
out
sbb
jecxz
mov
jae
xchg
lock
mov
mov
lds
sbb
les
in
jb
loopne
sub
or
add
push
cmp
sub
sbb
or
cld
jmp
repnz
loope
cwde
clc
or
repnz
sub
lea
lock
add
fsubrp
xchg
ins
fs
dec
in
mov
daa
fmul
fnstsw
add
or
in
not
fistp
bnd
fsubr
int3
cwde
jno
jb
lods
push
mov
loopne
bound
mov
cmps
add
push
cld
imul
mov
sbb
mov
push
push
shr
jmp
cmps
(bad)
and
mov
clc
inc
inc
sbb
hlt
out
or
adc
jmp
sbb
sub
out
mov
jge
stos
lahf
rol
movs
sbb
push
push
cmc
add
push
dec
or
cdq
sub
call
add
fisubr
add
lahf
mov
pop
ret
mul
sub
mov
inc
imul
add
int3
adc
fwait
pushf
movs
sbb
xor
pop
movs
xchg
jg
adc
das
stos
jmp
fcmove
in
(bad)
dec
bound
xor
cmps
mov
pop
pop
and
ins
or
popf
dec
add
outs
jecxz
pop
popf
lock
(bad)
(bad)
sub
gs
test
cli
xchg
je
adc
mov
sbb
pop
loopne
loop
int3
pop
jbe
cmps
or
scas
adc
adc
jl
imul
add
je
call
in
popf
mov
js
push
ss
cld
js
push
icebp
adc
mov
mov
lahf
(bad)
fmul
adc
jge
hlt
jle
pop
fcom
or
inc
mov
dec
mov
dec
scas
repz
int3
mov
mov
mov
cdq
mov
popa
sub
(bad)
retf
jge
mov
cdq
xchg
dec
inc
add
fmul
xor
add
xlat
push
imul
xchg
add
sti
or
int3
xor
test
add
popa
in
inc
or
loopne
gs
mov
pop
inc
in
and
cs
data16
jmp
and
dec
mov
cmp
cmp
shr
fiadd
jnp
(bad)
leave
adc
pop
out
mov
pushf
das
pmaddwd
add
pop
and
rcl
add
cdq
or
dec
or
movs
cmp
xor
mov
cmp
xor
mov
cmp
mov
or
xchg
adc
sub
xor
xlat
enter
jge
inc
(bad)
jae
sbb
xor
cwde
push
cmp
jb
not
mov
popa
dec
push
repnz
mov
jecxz
ins
inc
stos
add
push
fmul
mov
inc
xor
sahf
push
add
mov
dec
sub
xchg
or
sbb
fisttp
js
js
mov
or
xor
or
adc
pop
cmp
movs
or
test
jmp
cld
int3
dec
or
outs
add
dec
das
mov
arpl
sbb
sbb
jle
inc
push
dec
loop
outs
in
sar
mov
psubq
cwde
sahf
add
rcr
cdq
mov
or
dec
loopne
lds
or
cli
xchg
mov
sub
fwait
sub
call
ror
mov
mov
push
sbb
or
sub
sti
je
int3
rep
cmp
mov
push
jbe
sub
and
mov
inc
sub
in
inc
icebp
adc
dec
in
xor
or
adc
dec
addr16
pushf
cld
enter
mov
cmps
mov
adc
fdiv
sub
fisttp
mov
jae
outs
xchg
aad
ret
and
scas
jmp
arpl
aas
xlat
pusha
and
call
mov
jmp
sahf
xor
sbb
scas
test
or
ror
fwait
movs
arpl
push
pusha
imul
xor
int3
ins
xchg
popa
js
pop
(bad)
pop
pop
jge
add
add
repnz
xchg
sub
mov
xor
in
xor
inc
push
lock
or
mov
mov
fbld
ins
xor
inc
cmp
shl
push
cmp
daa
int3
(bad)
push
aad
rcr
cwde
mov
sbb
mov
lock
add
pusha
and
push
or
pop
enter
pop
popa
sub
jns
dec
shr
add
pop
cmp
add
xor
mov
or
mov
mov
mov
xchg
adc
xor
mov
arpl
popf
inc
and
fild
push
xchg
sub
test
bnd
lock
push
das
sub
retf
shl
mov
adc
icebp
pusha
inc
and
imul
sbb
out
pusha
and
shl
inc
dec
addr16
enter
cmp
hlt
sub
and
lods
mov
fcom
iret
sub
xor
pop
xchg
fxch
sbb
ins
ja
aam
je
jl
out
in
mov
add
push
hlt
jle
xor
jmp
mov
call
icebp
and
cmp
stc
adc
push
mov
pusha
imul
cmp
iret
ins
dec
(bad)
adc
movs
nop
add
jb
add
xor
inc
mov
mov
test
daa
add
and
movs
int3
or
loope
pop
stos
ss
push
jmp
(bad)
fisttp
cmp
pop
ins
sbb
adc
push
jp
push
xchg
pop
or
sub
in
adc
loopne
inc
xchg
mov
mov
out
xchg
imul
ror
mov
mov
int3
div
cmp
fsubr
aam
push
adc
addr16
sub
and
scas
cli
add
in
test
mov
or
(bad)
xor
call
mov
jecxz
icebp
cmp
lea
(bad)
adc
add
sbb
movs
pop
in
xor
xlat
sbb
and
sbb
adc
in
inc
jmp
sbb
adc
pop
cs
rol
inc
ficomp
push
cmp
ja
sub
retf
cmp
xor
retf
out
fcomp
push
mov
add
mov
sti
jmp
mov
out
ja
adc
adc
lock
xor
ja
inc
xchg
mov
leave
xor
int3
idiv
lock
ficomp
push
cmp
lahf
fsub
or
pop
push
add
cmps
pop
dec
mov
scas
cdq
aad
pop
add
xchg
addr16
sbb
call
sahf
add
(bad)
repz
adc
xchg
sbb
sbb
fdiv
xchg
in
addr16
cmp
inc
movs
fsub
push
cmps
arpl
pop
dec
mov
jp
jle
cmc
sub
ins
test
adc
in
mov
cs
mov
sahf
xchg
lods
aaa
pushf
je
pop
lock
push
lods
arpl
push
stc
jnp
push
xor
or
and
out
popf
inc
pop
movs
push
push
xchg
jp
jb
xor
int
cmps
or
sub
mov
fild
lds
test
stos
fistp
std
and
push
imul
push
movs
adc
lods
enter
xchg
push
stos
mov
int3
dec
mov
mov
jae
dec
int3
inc
out
scas
cs
mov
pop
and
adc
mov
or
cmc
data16
out
jle
bound
pop
sahf
pop
jmp
cmp
jnp
imul
test
push
sbb
fdivp
mov
jmp
add
int3
or
sub
mov
inc
icebp
cmps
fist
jmp
or
mov
lods
hlt
stos
call
out
mov
int
retf
rcr
push
pop
push
mov
movs
test
xchg
jae
mov
mov
push
mov
icebp
dec
ins
inc
mov
push
popf
inc
test
test
movs
mov
push
mov
adc
mov
rol
xchg
adc
mov
adc
stc
ds
pushf
mov
pop
push
call
in
sti
into
pop
in
lods
pop
mov
cmp
stos
pop
out
lock
addr16
or
jmp
into
and
xlat
es
icebp
das
mov
pop
add
pop
out
mov
pop
mov
and
rol
sub
sub
dec
dec
push
ret
ins
mov
jno
rcl
push
retf
sahf
movs
sub
cdq
mov
jmp
cdq
mov
xor
idiv
pop
lea
mov
loop
movs
sbb
in
mov
mov
cmp
sub
mov
sbb
xchg
mov
std
hlt
sbb
or
lahf
js
repz
pushf
or
mov
int3
aas
xchg
fwait
and
mov
inc
adc
int3
enter
xchg
mov
jg
xor
push
fisubr
add
fucomip
jmp
addr16
hlt
les
jecxz
in
sti
lock
in
test
jmp
nop
cmps
(bad)
pop
(bad)
lods
popf
xchg
and
mov
jge
mov
push
fist
pop
sbb
or
sub
inc
mov
jl
cwde
jmp
cdq
div
jne
push
xchg
or
push
fdivr
lods
xor
sbb
bound
cmps
jecxz
jb
(bad)
sbb
inc
cdq
and
add
xor
int3
mov
fadd
mov
cmp
add
mov
xchg
xor
lods
mov
cdq
jl
scas
je
or
int3
xor
mov
cmc
sbb
jg
add
out
xchg
dec
call
push
jne
add
mov
xchg
std
xchg
jg
cmp
xchg
sub
lock
int3
stc
lods
add
xor
in
pop
icebp
fcom
adc
cmp
add
xchg
cwde
sub
int3
inc
fadd
dec
or
or
cmp
push
cli
or
in
push
fsub
addr16
in
setnp
int3
sbb
not
mov
jmp
add
inc
add
or
adc
mov
cld
int3
cmc
cmps
add
movs
cwde
jg
and
pop
loop
sub
jae
ret
data16
outs
push
xchg
push
leave
and
pop
pop
(bad)
pop
sbb
sub
xchg
push
stos
outs
sbb
or
sbb
and
adc
or
and
inc
add
mov
cmp
mov
sbb
fdivrp
fwait
sub
jnp
adc
lods
or
adc
jecxz
sub
arpl
data16
ds
scas
mov
pop
xor
push
sbb
xchg
xchg
mov
or
xor
xor
dec
jmp
pop
(bad)
retf
dec
xchg
jnp
stos
call
aaa
fs
sbb
or
jmp
or
popa
push
ror
imul
sar
jmp
arpl
addr16
xor
pop
sub
sbb
sub
enter
ficom
lods
ds
pop
push
enter
fdiv
aaa
(bad)
into
repnz
add
dec
sbb
std
pop
xchg
data16
cmps
xchg
out
rcl
aad
hlt
addps
inc
test
retf
repnz
cmp
sbb
stos
es
imul
jmp
je
cld
xor
mov
lahf
stos
push
je
ins
out
pushf
pop
int3
cmp
and
xchg
jns
jbe
call
sbb
xor
(bad)
test
mov
and
fwait
aas
int3
sub
test
push
push
or
jmp
in
sbb
rol
movs
cmp
das
shr
out
jb
dec
imul
cmc
or
sbb
cld
call
add
mul
(bad)
arpl
std
test
adc
test
shl
in
jb
pop
inc
dec
inc
pop
sbb
out
or
mov
xchg
dec
xor
stos
mov
test
rol
mov
fucom
add
add
push
jmp
jno
sti
clc
cmps
or
mov
xor
add
push
push
add
push
pop
enter
lods
pop
cli
mov
das
xor
pusha
or
mov
aas
icebp
sbb
int3
clc
stc
pop
daa
sub
dec
dec
retf
imul
mov
xor
push
or
jmp
pop
xor
mov
cwde
loope
add
rcr
out
not
call
jg
adc
(bad)
mov
es
fwait
add
popf
out
pop
mov
cs
xor
sbb
ss
jmp
out
dec
pop
lea
adc
jne
xor
test
inc
add
and
mov
ss
sbb
pop
sub
loope
push
js
pop
add
push
ret
out
jnp
cmp
mov
cmp
add
lock
xchg
xor
sbb
and
pop
jg
sbb
inc
inc
and
or
add
xchg
fst
pop
pop
out
aaa
aas
js
inc
(bad)
adc
mov
stos
das
dec
sti
in
icebp
fld
pop
mov
jbe
(bad)
mov
pand
pop
fs
push
cmp
fistp
and
pop
mov
fs
div
pop
dec
xchg
popf
cmp
outs
mov
inc
or
sub
mov
xor
cmc
sar
cmps
repnz
xchg
or
lahf
mov
in
lock
xor
(bad)
xor
lods
ret
xchg
call
adc
fcmovu
into
ds
and
xor
add
cmp
pop
sub
jmp
inc
iret
std
dec
sbb
ror
pop
ss
lahf
pop
cmp
movs
fist
es
pop
test
mov
(bad)
sti
cmps
adc
imul
imul
inc
sbb
mov
lock
fdiv
icebp
inc
fsub
mov
push
ins
mov
mov
cli
or
fisubr
js
jb
inc
push
sar
push
inc
cld
cdq
xlat
dec
sub
or
jne
(bad)
pop
sahf
pop
jns
and
inc
fcmove
sub
mov
scas
mov
mov
lea
int3
jo
imul
movs
or
sub
ja
cmp
in
push
out
aad
fidivr
fadd
xchg
loopne
adc
xor
mov
pop
(bad)
mov
addr16
dec
lods
cmp
test
arpl
mov
inc
mov
sahf
pop
pop
dec
cld
mov
leave
mov
push
sbb
push
lods
dec
imul
push
ins
retf
dec
xchg
mov
xchg
nop
jne
adc
call
not
sbb
loope
sub
xchg
retf
test
jmp
mov
push
mov
mov
rdtsc
shl
adc
dec
jg
adc
icebp
out
and
cmp
pushf
rcr
sub
mov
jo
jmp
mov
lea
jg
or
pop
mov
jmp
dec
in
mov
es
push
out
xchg
das
fadd
loopne
xchg
out
imul
sbb
int3
or
imul
inc
cmc
fucompp
addr16
xor
xchg
mov
lahf
inc
scas
sub
jbe
push
inc
int
sub
push
add
xchg
sbb
mov
mov
leave
inc
cli
sub
nop
adc
lahf
mov
mov
scas
push
sbb
jg
cmp
adc
xor
push
sub
or
dec
jmp
xor
ret
test
dec
ret
xchg
pop
dec
js
daa
inc
cmps
jmp
or
fcomp
lods
cmps
scas
sub
add
sar
cmp
ficom
addr16
add
rcr
hlt
push
cmpxchg
fs
lahf
pop
mov
adc
ror
or
inc
dec
xor
jp
jg
jmp
icebp
pop
mov
repnz
add
adc
hlt
aam
retf
fidiv
jmp
sbb
mov
sub
mov
mov
fwait
in
push
mov
fsubr
or
jae
addr16
bound
ja
push
sub
sbb
fmul
fmul
mov
cli
mov
repz
mov
and
mov
movs
pop
mov
fistp
pop
sbb
movs
fld
ror
test
xchg
jmp
pushf
push
xor
jecxz
loope
or
mov
in
mov
mov
push
pop
jp
addr16
repnz
cmp
push
into
jg
adc
xlat
add
fnstenv
aaa
rol
imul
ret
call
or
(bad)
xchg
shl
mov
mov
mov
in
mov
std
ja
pop
ss
(bad)
sahf
test
and
movs
sar
int
clc
mov
ins
sub
test
jl
and
mov
popf
inc
sahf
inc
or
pop
dec
and
not
and
xor
mov
mov
mov
xchg
cmps
fcomip
and
jmp
loope
pop
jno
push
lock
dec
iret
xchg
dec
adc
(bad)
mov
out
ror
cmp
loop
test
mov
cmp
adc
ret
cwde
pop
pusha
dec
in
dec
(bad)
in
jg
push
push
xchg
jno
sti
mov
adc
sub
add
or
sbb
neg
and
push
pop
xor
imul
pop
inc
pusha
adc
ret
addr16
xor
push
call
push
cwde
sbb
dec
mov
or
data16
int3
(bad)
and
or
std
xchg
mov
jg
xor
mov
aaa
js
call
xchg
hlt
int3
sbb
inc
mov
push
out
clc
pop
mov
sbb
test
out
lods
pop
ror
into
push
test
pop
or
mov
xchg
or
cli
pushf
imul
ds
loopne
loop
adc
fcmovnb
mov
je
pop
sbb
lahf
jnp
stos
sti
fisttp
xor
and
popa
sbb
int3
xor
fcomip
ins
das
cmp
ret
cwde
sub
daa
fstp
and
inc
popf
mov
test
pop
test
xor
leave
imul
add
fucom
and
pop
imul
bound
jmp
or
retf
xchg
dec
jne
imul
pop
inc
test
mov
es
popf
adc
into
cmp
mov
je
sbb
fwait
inc
ret
push
jmp
out
inc
inc
inc
lock
push
xor
in
xchg
xchg
dec
mov
dec
mov
add
in
adc
push
aas
mov
add
add
xor
cmps
sub
repz
inc
mov
xchg
jmp
inc
outs
push
xlat
and
jnp
cmp
xor
add
jecxz
sbb
loopne
adc
in
mov
pop
(bad)
int3
xchg
fs
int3
popa
sbb
mov
mov
push
test
mov
movs
fisub
mov
mov
mov
loope
or
imul
and
mov
fmul
add
(bad)
dec
test
nop
cdq
adc
cvtps2pd
xchg
mov
movs
setns
sub
not
sahf
and
ds
mov
cmp
arpl
pop
add
scas
dec
push
mov
mov
inc
dec
int3
or
or
ficom
repnz
nop
lods
mov
add
inc
inc
xlat
out
pushf
mov
scas
add
les
and
test
js
mov
cdq
pop
mov
mov
push
lea
xor
rcl
out
aad
call
jbe
test
inc
sub
inc
adc
pop
push
xchg
(bad)
adc
dec
sub
cmp
sbb
xor
mov
pop
(bad)
(bad)
jmp
in
stos
push
or
xor
cwde
dec
pop
pop
cmp
dec
xchg
sbb
inc
xchg
xchg
loop
hlt
xchg
and
in
or
pop
push
imul
or
pusha
and
xor
push
int3
out
out
lock
ins
in
pop
repz
add
pop
push
xor
pop
call
jo
popa
adc
sti
cmp
or
in
xchg
push
in
xor
into
test
adc
xchg
sub
xchg
repz
retf
sbb
and
repz
and
sbb
xlat
(bad)
out
aas
mov
or
dec
sbb
ss
pop
push
stos
scas
sbb
jmp
stos
call
mov
jmp
fimul
sbb
pop
mov
fmul
dec
mov
test
in
sbb
cmps
jne
mov
mov
adc
loop
mov
imul
dec
jg
mov
fild
mov
or
movs
lods
push
(bad)
dec
cvttps2pi
push
xor
mov
cli
mov
or
or
das
add
sub
xchg
or
out
es
(bad)
pop
adc
add
fiadd
adc
xchg
leave
push
mov
push
sub
ret
or
jo
call
inc
fdivp
push
pop
mov
and
clc
pop
or
and
stos
sbb
in
mov
mov
push
loop
push
nop
mov
sar
ins
inc
cld
movs
sub
out
aas
outs
sub
dec
mov
or
pop
movs
test
and
inc
mov
ss
xchg
xchg
div
sub
adc
mov
add
sbb
cwde
stos
jecxz
xchg
or
pop
mov
bound
or
push
sbb
arpl
adc
cmps
lods
ins
dec
pop
sahf
ja
xor
jo
dec
mov
lods
and
add
push
xor
cdq
inc
stos
clc
les
lods
jne
mov
(bad)
shl
xor
xchg
cs
pop
test
rol
pushf
and
pop
cdq
mov
mov
popa
sti
loope
jle
or
or
cdq
shr
repnz
or
xor
dec
mov
pop
push
vmovups
mov
pop
std
je
inc
pop
fmul
out
mov
pop
js
lds
icebp
rcr
sub
cwde
xor
cld
sub
add
repz
push
push
(bad)
adc
mov
sub
mov
ror
push
add
stos
stc
in
rol
inc
cmps
jecxz
fiadd
jo
jp
add
sbb
mov
mov
pop
push
or
es
and
mov
adc
sbb
push
and
inc
pop
aaa
sbb
in
xor
pop
fmul
call
mov
aad
scas
es
loope
xor
or
xchg
fadd
mov
xor
sub
xchg
or
dec
xor
retf
sbb
add
xchg
imul
mov
cmp
mov
scas
lahf
fisub
and
or
and
add
pop
add
dec
or
xor
lods
pop
pusha
mov
pop
push
stos
dec
inc
icebp
adc
push
push
arpl
push
inc
mov
arpl
adc
push
icebp
cmp
jg
jl
or
punpckldq
and
in
call
add
xchg
stos
push
add
in
(bad)
(bad)
adc
int3
cmp
jmp
sub
ror
cwde
pop
pop
xor
dec
xchg
xor
adc
in
xchg
add
and
or
cwde
adc
pusha
pop
and
in
pop
mov
addr16
sbb
mov
or
out
or
inc
or
ss
sub
mov
jl
lods
jnp
pushf
or
popa
stc
mov
sub
jmp
nop
jb
aaa
adc
loope
adc
pop
dec
add
and
ss
push
out
sbb
push
and
out
xor
fidiv
adc
ror
sub
ss
in
pushf
sub
imul
imul
in
repz
jg
sbb
(bad)
jle
pop
pop
imul
lea
sub
sub
(bad)
popa
and
sbb
test
ins
cmp
js
mov
add
aaa
test
mov
add
xlat
out
(bad)
test
sub
daa
xchg
shl
add
aaa
rol
dec
pop
xchg
nop
cwde
ficomp
push
outs
je
pusha
int
cmps
push
je
cdq
loope
in
pop
adc
imul
fimul
pop
std
or
push
inc
call
lods
mov
in
mov
pop
cdq
ficomp
rcl
sar
es
clc
inc
in
sub
imul
aam
xlat
adc
push
imul
pop
mov
push
fldenv
bound
push
jle
iret
push
mov
xor
inc
je
fisubr
dec
loop
les
test
div
nop
push
lods
movs
sub
fild
jb
int3
lods
sbb
push
mov
jne
xchg
push
hlt
adc
cwde
inc
loopne
fidivr
cmc
ds
inc
fist
je
popa
popf
push
je
xchg
fdiv
xchg
scas
push
fcomp
sub
aam
inc
adc
mov
movs
pop
cmp
imul
sbb
cmp
movs
mov
pop
push
push
xor
retf
fnsave
sbb
mov
cmp
push
push
mov
mov
adc
jne
jno
imul
mov
shl
rdmsr
mov
mov
int3
cs
(bad)
mov
sbb
stos
add
cmp
scas
fnstsw
les
cld
ffreep
and
dec
rol
test
and
addr16
and
mov
xchg
dec
adc
push
mov
dec
mov
dec
jg
stos
loopne
addr16
mov
ins
cmp
add
mov
mov
or
cld
lods
nop
in
call
out
lahf
popa
popf
sub
inc
push
mov
loope
add
pop
push
xchg
sbb
int3
or
mov
test
out
aas
add
jecxz
js
jmp
pop
addr16
clc
mov
data16
(bad)
xor
gs
js
push
movs
mov
addr16
ss
fs
push
xor
loop
mov
in
stos
dec
xor
cmp
sar
jo
xor
and
and
cdq
pop
mov
jmp
sbb
es
pop
ss
imul
or
retf
cwde
mov
xchg
mov
sub
popf
sub
jbe
mov
pop
and
cli
out
or
clc
or
bnd
sub
imul
xchg
mov
sbb
imul
adc
mov
scas
loop
lea
and
cmps
cmp
ds
in
aaa
mov
movs
push
and
cmp
mov
int3
adc
int3
mov
push
xor
jns
xor
mov
sbb
xor
and
or
inc
push
pop
fistp
aaa
das
pop
sub
movs
inc
jle
cmp
popf
ss
loopne
cmp
pcmpgtd
stos
ins
mov
retf
lds
add
mov
or
push
push
das
ss
fst
sub
mov
jo
mov
popf
xchg
cmp
jb
clc
gs
mov
ins
jmp
ins
dec
adc
adc
call
mov
(bad)
jle
js
cmp
sub
ins
in
mov
icebp
cmp
and
fsub
cmp
push
loopne
add
in
cwde
add
dec
xor
push
mov
inc
xchg
aaa
and
pop
xor
imul
shr
out
cli
and
add
push
pusha
and
xchg
aam
out
xchg
js
add
or
adc
mov
cmps
(bad)
(bad)
aaa
jne
pop
aam
jo
stos
jmp
imul
dec
icebp
jle
pop
adc
pushf
jne
(bad)
jnp
cwde
popf
jge
sbb
dec
leave
sbb
sub
dec
jmp
sub
mov
add
imul
push
nop
bound
dec
pop
fs
pop
or
and
lds
(bad)
sbb
dec
sub
inc
retf
aas
fist
mov
cmps
xlat
pusha
jmp
or
inc
and
jl
push
adc
scas
test
popf
mov
adc
jecxz
jae
icebp
sbb
add
dec
fwait
lahf
call
sub
jmp
cmp
pop
sub
sub
xor
cmp
lds
rcl
mov
xor
mov
xor
or
xor
leave
inc
dec
mov
mov
ds
jmp
cmps
inc
jmp
int
xchg
call
jg
nop
outs
jbe
test
lods
push
in
pop
bound
cmp
xchg
adc
stc
jmp
imul
stos
stos
mov
xor
adc
pop
push
add
adc
icebp
sub
in
popf
pop
mov
jp
adc
inc
cs
cmps
call
or
mov
cdq
jl
adc
sbb
jmp
movs
ins
fisub
mov
and
dec
inc
jb
adc
pop
add
int3
lahf
ins
dec
loope
xor
mov
out
mov
xor
addr16
push
lahf
sub
fsubr
push
jns
mov
inc
gs
fcomip
das
push
dec
inc
and
in
xor
pop
jb
and
adc
ret
hlt
into
int3
xchg
les
xlat
cmps
cli
lds
into
push
fwait
rcl
sbb
addr16
sub
mov
sbb
lea
fwait
popa
enter
dec
sbb
(bad)
(bad)
mov
adc
jb
out
cmp
fcmovne
ret
push
inc
add
push
inc
or
cs
fwait
sub
jmp
(bad)
in
in
dec
loopne
push
call
mov
daa
ins
cmps
pusha
scas
inc
cli
dec
push
lods
dec
cmc
stos
movs
sbb
xchg
sbb
test
or
lods
sbb
pop
out
pop
pop
cli
fiadd
xchg
jg
or
hlt
(bad)
jge
test
mov
(bad)
xchg
ins
add
pop
inc
int3
aaa
ss
mov
push
cmps
mov
mov
fucomi
fbstp
lock
xor
in
lock
loop
ins
mov
ins
in
aam
xor
add
inc
lock
fild
cwde
in
sub
adc
movs
add
xchg
arpl
daa
pop
push
mov
jecxz
(bad)
call
std
adc
outs
push
(bad)
aaa
add
mov
test
cmp
xchg
xlat
jp
das
pop
add
add
push
xchg
mov
push
movs
jo
sub
fist
push
enter
adc
fs
mov
sub
or
jne
loope
mov
sub
int3
push
sub
inc
sbb
push
mov
ja
push
ds
pop
sbb
mov
mov
xor
mov
inc
cli
mov
mov
xor
shl
xchg
mov
xor
dec
push
inc
xchg
fsubr
je
xchg
int3
lea
mov
shr
nop
lds
mov
or
arpl
int3
or
test
test
mov
xchg
push
inc
xor
push
test
add
or
push
mov
loop
jnp
pop
imul
jb
mov
test
sbb
lea
mov
adc
in
jne
aad
jecxz
xchg
int3
sub
mov
adc
mov
pop
in
pop
mov
sub
xchg
(bad)
or
and
dec
or
in
sub
sti
movs
sub
je
int3
and
mov
push
(bad)
call
outs
rcl
or
scas
inc
jmp
stos
fstp
out
mov
adc
sbb
or
lods
cld
retf
dec
jmp
mov
jo
push
daa
call
and
cwde
aas
out
mov
dec
pop
inc
test
cmp
int3
lahf
sahf
pop
sbb
mov
fdiv
pop
in
push
ds
dec
mov
mov
pop
mov
push
addr16
rcl
pop
and
add
xchg
pop
jmp
sbb
xlat
outs
and
popf
inc
les
sub
xchg
ins
push
popa
leave
mov
sar
mov
adc
cdq
in
mov
fiadd
(bad)
lds
push
pop
sub
xor
xor
test
mov
and
ret
pop
xchg
adc
adc
add
or
mov
adc
popf
out
add
mov
xor
dec
movs
cld
pusha
cwde
sub
mov
mov
dec
xor
jae
ficom
int3
push
dec
ins
retf
adc
inc
mov
or
in
leave
cld
sbb
stos
inc
pop
sahf
in
loope
fcom
or
int3
inc
sar
sbb
pop
fiadd
int3
je
fstp
add
inc
(bad)
mov
jg
xchg
clc
ins
cmp
xor
push
enter
pop
pop
ret
jecxz
jno
cmp
not
nop
sbb
inc
xor
inc
daa
cdq
mov
inc
pop
jp
ds
lods
icebp
in
mov
aam
push
sub
pop
push
sub
mov
imul
cmp
iret
and
and
retf
adc
jecxz
in
cmp
out
sub
mov
dec
or
jge
movs
mov
arpl
sub
out
jne
pop
or
inc
cmc
xchg
sahf
lods
sub
cmovle
rcl
sub
sbb
in
xor
pop
popa
lods
aam
xchg
add
mov
inc
ins
or
lea
cdq
push
and
(bad)
out
loopne
inc
sbb
mov
movs
sbb
and
mov
sbb
(bad)
dec
fnstenv
mov
lahf
retf
test
retf
icebp
test
and
aas
lods
push
pop
mov
add
imul
add
int3
call
push
mov
mov
(bad)
push
fmul
sahf
les
xchg
mov
pop
mov
mov
ficom
int3
mov
jne
pop
enter
ins
into
xchg
test
std
out
scas
pusha
adc
cwde
loopne
clc
out
or
aaa
sub
pusha
ds
mov
fcomp
sub
retf
jae
mov
xchg
mov
adc
dec
test
xor
sub
push
mov
or
test
mov
adc
push
inc
sub
and
xchg
(bad)
dec
das
lods
retf
aam
mov
inc
ret
popa
or
dec
push
mov
pop
addr16
aad
pop
pop
pusha
or
not
js
mov
imul
jo
pop
jl
cmp
outs
pop
je
out
push
xchg
adc
in
popf
pop
mov
call
out
in
lods
mov
fwait
adc
fmul
mov
xchg
jl
mov
adc
sub
mov
out
sub
test
(bad)
psubusb
movs
mov
imul
icebp
xchg
push
rcl
rcl
sbb
shr
xchg
cmp
inc
mov
dec
fs
mov
jge
jb
out
pop
sub
std
stos
mov
and
adc
js
inc
xor
les
into
cmp
int3
mov
add
js
pop
(bad)
cmps
or
inc
enter
rcl
adc
add
adc
pop
lods
mov
adc
in
mov
pop
ins
add
adc
pop
cmc
jae
jae
fistp
imul
jg
jmp
inc
mov
push
cwde
shl
adc
out
sbb
je
(bad)
loope
sbb
jno
movs
mov
push
stos
enter
add
push
addr16
mov
lock
inc
(bad)
mov
or
ficom
popa
pop
out
cmp
dec
cmp
cwde
adc
xchg
xchg
sbb
add
es
sub
push
and
add
xor
sbb
add
xchg
mov
adc
daa
repnz
retf
add
lea
stos
cli
xchg
pushf
jo
push
dec
xor
pop
dec
or
cwde
nop
jnp
mov
inc
pop
inc
xor
pop
cmp
scas
(bad)
push
cmp
mov
mov
sbb
pop
nop
xchg
sub
cmp
das
and
adc
call
(bad)
out
sub
jbe
test
fidiv
pop
mov
cmps
xor
mov
dec
aas
or
or
add
mov
pop
daa
bswap
sbb
or
cld
cdq
retf
xor
mov
sbb
sbb
mov
inc
xor
retf
sbb
xor
popa
(bad)
or
pushf
out
repz
mov
hlt
retf
cmp
movs
add
shr
or
add
push
xor
fadd
and
retf
sahf
and
mov
jp
pop
push
aam
xor
mov
bound
std
repz
(bad)
adc
retf
mov
fld
in
inc
add
inc
xchg
xchg
js
push
add
cmp
add
nop
xchg
inc
call
icebp
stc
pop
sub
das
or
(bad)
pop
ror
push
mov
push
jmp
aas
ss
jnp
sub
lods
and
retf
jae
dec
iret
push
les
xor
or
dec
cli
loop
lahf
int3
mov
and
pop
scas
mov
and
add
iret
push
fidiv
loop
(bad)
push
repnz
stos
je
sti
xchg
inc
cdq
and
jp
dec
fadd
pop
cmp
push
push
sub
test
mov
jo
cmp
retf
jnp
sub
retf
fstp
aas
jmp
adc
fwait
repz
(bad)
mov
xchg
into
int3
xor
daa
jae
sub
sbb
pop
retf
dec
imul
ret
(bad)
mov
xor
push
and
lock
jge
push
pop
mov
add
push
dec
sbb
call
inc
mov
xchg
sub
cdq
xchg
xchg
sbb
ret
mov
pop
sub
and
add
aad
js
or
sbb
stos
sub
sbb
daa
stc
retf
dec
xchg
push
mov
xor
jns
dec
retf
dec
pop
call
sbb
cmp
jne
jl
ud2
xchg
or
inc
push
push
push
js
in
add
jo
or
xor
das
loop
xchg
add
xor
int3
pop
pushf
or
dec
xor
xor
dec
add
sub
sbb
sbb
icebp
in
sbb
dec
dec
mov
pop
call
int
push
mov
jmp
ror
fstp
push
add
std
adc
or
add
pop
or
out
push
pusha
dec
xchg
mov
pop
sub
iret
(bad)
call
jg
push
and
sbb
xchg
js
js
stos
call
js
pushf
jno
sub
and
pop
push
sub
sahf
sub
in
inc
js
or
or
pop
sub
push
fimul
call
inc
retf
rol
mov
push
jne
mov
pop
lock
pop
(bad)
xor
cmp
jp
in
stos
lods
aas
out
icebp
dec
mov
xchg
retf
pushf
sbb
cmp
add
jmp
and
bound
cwde
sub
sub
test
cmp
adc
mov
xor
or
mov
push
add
or
dec
nop
or
or
mov
pop
jbe
sbb
dec
outs
jg
clc
and
jecxz
(bad)
dec
addr16
pop
dec
int3
inc
pop
mov
sbb
fadd
push
sbb
add
std
sub
and
sub
pop
dec
lock
cwde
movs
cmp
cbw
sub
pop
push
inc
iret
xor
push
call
pop
mov
cwde
lods
push
inc
mov
or
or
pop
push
cmp
or
mov
cli
call
out
adc
cmp
fsub
xor
test
pop
mov
sbb
pop
sub
les
xchg
adc
jl
pop
and
or
xor
out
cmp
psubq
pop
and
dec
or
xor
loop
add
mov
int3
cmp
and
mov
(bad)
sbb
jg
loope
retf
push
adc
in
push
mov
adc
xchg
cmp
(bad)
cmp
int3
cmps
sub
neg
xchg
out
jae
or
mov
fmul
int3
fimul
xor
push
mov
leave
cmp
inc
call
popf
loope
pushf
retf
mov
sbb
sub
fs
pop
clc
pop
pushf
js
sbb
cwde
pop
xchg
cmp
mov
icebp
jle
cmp
jge
lock
call
add
jp
sti
dec
loope
and
repnz
cld
in
add
pop
sbb
cli
add
mov
lods
and
sub
dec
push
pop
retf
repz
push
(bad)
dec
push
inc
adc
jbe
fsubr
xor
(bad)
adc
shr
sbb
dec
cmp
inc
push
stos
shl
sti
icebp
in
pop
xor
push
out
clc
mov
or
mov
idiv
test
add
aas
fdivr
xor
or
adc
or
push
cmps
pop
loop
mov
jmp
xchg
add
adc
loope
xchg
jne
jns
and
xor
add
mov
loope
clc
icebp
lods
gs
pop
adc
pop
imul
nop
repz
cwde
sbb
(bad)
aam
inc
add
sbb
sub
push
test
xor
adc
push
imul
jl
or
dec
fwait
jmp
fs
sahf
sub
pop
adc
retf
mov
fcmovnb
xlat
push
bound
pop
mov
in
mov
sub
add
cmps
jecxz
push
pushf
test
inc
call
js
sub
mov
scas
lea
and
or
ja
cmp
stos
add
lock
test
movs
sub
or
cld
rcr
imul
pushf
nop
pop
add
or
fcomp
mulps
or
(bad)
sub
bswap
inc
rcr
sbb
push
mov
ror
std
jmp
popf
jnp
pop
enter
push
push
imul
cmp
sub
and
pop
push
addr16
leave
nop
cwde
xor
arpl
inc
bnd
jne
pusha
das
cdq
nop
sbb
push
ins
jge
inc
dec
(bad)
arpl
inc
rcl
dec
xchg
into
push
in
cwde
xor
or
cld
fs
xlat
sahf
adc
push
mov
mov
dec
or
mov
enter
test
or
lods
ret
inc
push
mov
imul
xor
push
ins
aaa
pop
xchg
mov
or
out
adc
pushf
pop
dec
gs
clc
cmps
cli
cmp
aaa
add
jmp
adc
xor
jg
sbb
xor
jmp
je
sbb
mov
dec
adc
int3
xlat
and
call
or
scas
not
jns
jmp
mov
push
out
xor
out
loope
call
sahf
push
inc
mov
pop
in
and
push
and
dec
imul
sbb
mul
xor
push
pop
lods
mov
sbb
lahf
aaa
pop
sti
call
int3
push
jecxz
inc
mov
inc
fwait
xor
pop
dec
cmc
scas
fimul
aaa
or
not
jl
fdivr
dec
adc
mov
add
ret
cmp
popa
inc
adc
mov
xchg
push
aad
loope
jnp
jecxz
(bad)
ins
mov
pop
jecxz
jo
fucom
(bad)
hlt
dec
int3
sbb
push
push
test
push
pop
mov
pusha
gs
push
aad
adc
inc
xchg
mov
and
or
push
test
cdq
pusha
fisttp
push
and
xchg
dec
mov
(bad)
pop
loop
cmps
loope
int3
repnz
mov
das
mov
adc
mov
pop
(bad)
js
jp
xchg
in
dec
jg
in
lods
push
and
xchg
test
mov
and
lds
sub
cwde
push
and
adc
mov
icebp
loopne
pop
push
jb
jp
mov
push
push
xor
mov
sbb
sbb
imul
(bad)
loop
data16
sbb
push
dec
dec
pushf
sbb
mov
sbb
xor
syscall
into
dec
add
in
jno
in
push
or
ja
sub
loop
and
inc
and
push
imul
mov
mov
in
in
ficomp
(bad)
movs
mov
jb
sar
jmp
das
hlt
adc
aam
mov
sbb
push
nop
dec
das
adc
inc
loope
inc
stos
pop
call
mov
jae
adc
fsubp
ja
adc
mov
ins
mov
or
std
sbb
popf
xor
adc
mov
dec
mov
mov
in
leave
add
add
xor
fadd
or
cld
fcomp
mov
jno
icebp
out
push
mov
xor
pop
or
and
add
push
dec
push
push
call
sti
or
imul
mov
or
inc
sahf
je
aaa
add
jle
sar
mov
push
ins
and
arpl
ror
xor
pop
push
ficomp
in
movs
ja
sbb
cmp
mov
ins
and
in
mov
icebp
cmp
adc
sbb
dec
xor
sub
push
call
das
xchg
test
sub
js
pop
dec
dec
mov
pop
fcom
push
mov
(bad)
cs
(bad)
sub
loop
adc
and
add
js
fmul
cmc
sbb
scas
lock
mov
test
mov
fsub
imul
mov
cdq
repnz
push
add
lahf
inc
int3
mov
and
pop
cmp
xor
or
push
int3
sbb
inc
or
sbb
nop
adc
jl
and
add
std
das
sbb
push
fs
pop
popa
sti
mov
push
cmp
pop
cmc
cmp
mov
(bad)
call
rol
mov
in
movs
pop
ins
push
test
xor
fidivr
push
int3
pop
inc
mov
fdiv
jmp
jl
cmps
and
das
jns
or
add
mov
stos
push
inc
shr
mov
push
xchg
pop
add
and
dec
cmp
mov
inc
mov
xor
outs
ret
mov
ins
in
inc
stos
mov
push
push
aaa
jmp
outs
sub
jp
pop
xchg
jb
sbb
sbb
lods
mov
int3
into
jp
icebp
cmp
pop
les
pop
test
ja
cmovb
sub
imul
stc
pushf
add
or
jmp
jb
aas
jne
lock
out
int3
iret
pop
int3
cmp
test
test
and
push
addr16
push
jno
or
cmp
xchg
jb
jmp
aam
xor
ret
sti
jns
movs
push
xchg
push
fcomp
mov
lods
and
repz
push
sub
lock
pop
in
hlt
test
popf
push
lahf
jmp
add
mov
push
movs
repz
pop
stos
inc
mov
inc
pop
dec
mov
cmp
pop
mov
dec
cmp
ins
test
mov
movs
sbb
es
test
popf
cmp
mov
stos
sub
addr16
ins
je
mov
call
xor
cmp
loopne
xchg
cli
dec
pusha
lahf
push
sbb
addr16
call
xchg
add
mov
xlat
pop
dec
pop
jno
adc
nop
gs
(bad)
jns
xor
setne
pushf
add
xchg
add
xchg
clc
sub
add
sbb
push
xchg
sbb
repnz
ja
xchg
(bad)
xor
inc
jle
stos
inc
dec
push
add
mov
shl
adc
mov
mov
or
mov
inc
sub
xchg
push
adc
retf
pop
inc
mov
or
adc
and
call
adc
cld
adc
xchg
xchg
pusha
inc
pop
fs
aad
xchg
dec
aaa
pop
xchg
pusha
pop
adc
pop
ins
push
xchg
sti
jbe
inc
les
adc
jp
xor
push
xchg
test
repnz
jne
cmp
inc
sub
and
sub
les
pop
add
ins
cmp
push
and
xor
inc
push
adc
les
mov
or
mov
ror
mov
mov
out
scas
xor
dec
dec
in
xchg
cmp
cmp
mov
mov
shr
outs
jge
fisttp
mov
cmp
sub
push
pop
cli
or
sub
xor
loopne
das
cdq
cmp
adc
mov
push
shl
movs
das
mov
jmp
neg
imul
mov
loopne
test
xchg
jb
or
xlat
pop
pop
pop
add
jmp
add
cmp
movs
popa
adc
icebp
sbb
and
and
sahf
jmp
jo
popf
test
lds
lods
or
and
jl
pop
mov
cs
test
imul
test
push
cdq
out
adc
xor
sub
mov
movs
sub
xor
sbb
inc
pop
dec
icebp
or
mov
leave
icebp
scas
mov
mov
jne
stc
push
push
mov
in
dec
pop
lock
nop
add
xlat
sbb
cmp
cmp
sbb
mov
rol
mov
inc
push
int
popf
sbb
sub
repz
inc
jge
xchg
dec
dec
scas
clc
inc
ins
ja
pop
inc
sub
int3
cmps
ins
cld
fs
arpl
pop
sti
lods
rcr
add
scas
pop
jge
mov
into
cld
arpl
inc
ror
call
jmp
int3
int
xchg
std
cmps
or
jmp
jl
cmc
and
mov
mov
or
imul
fcmovnb
or
adc
xor
int
mov
inc
fimul
sub
adc
inc
pushf
pushf
aam
xchg
ror
or
ss
push
aam
addr16
dec
ins
mov
push
dec
cli
xchg
add
imul
mov
xor
cli
in
mov
pop
fdivr
mov
xor
inc
call
pop
shl
jmp
sbb
gs
int3
cmp
stos
fnsave
sbb
imul
pop
out
in
mov
loop
xchg
pop
retf
fmul
push
shl
loope
push
in
sbb
xchg
jae
fnsave
pop
int3
xchg
push
push
out
(bad)
cmps
jecxz
dec
inc
inc
inc
das
cmp
push
lock
mov
adc
jbe
mov
sbb
xor
lods
pop
push
sahf
and
push
ja
je
data16
js
cmps
push
fs
test
pop
push
xor
lock
cmp
sbb
icebp
dec
jns
adc
xor
cli
jge
in
xchg
in
add
xor
icebp
(bad)
int3
imul
daa
(bad)
push
inc
and
pop
loope
stos
mov
out
fwait
fs
xchg
xchg
in
leave
outs
xchg
call
in
push
mov
nop
in
or
pop
sbb
lock
push
fs
add
cwde
(bad)
and
or
fmul
jp
repz
dec
mov
mov
pop
popf
or
cmps
jno
xlat
xor
push
lods
adc
dec
leave
and
clc
aad
inc
(bad)
in
inc
or
clc
or
mov
movs
test
xchg
icebp
bswap
xor
xchg
add
stos
loope
pop
test
add
addr16
or
adc
dec
mov
add
out
or
pop
dec
sbb
jle
ins
xchg
test
ins
mov
(bad)
hlt
aad
add
in
inc
loope
call
add
push
jbe
sbb
cmp
mov
pop
push
xchg
adc
aaa
or
add
add
push
sub
fs
push
xchg
lock
adc
test
leave
mov
sbb
jmp
or
(bad)
xchg
movs
(bad)
pop
mov
lahf
adc
jmp
data16
sti
mov
sbb
mov
cmp
add
sbb
repnz
sbb
cwde
cmp
jno
jmp
xchg
xchg
pop
pushf
lahf
dec
push
push
lock
jl
add
mov
loopne
push
inc
or
jmp
imul
outs
xchg
mov
repnz
scas
ja
in
popf
cmp
inc
mov
dec
sahf
or
xor
xchg
clc
pop
xor
push
addr16
mov
dec
invd
movs
jl
nop
add
fmul
je
lods
retf
fwait
cs
das
mov
sub
push
pop
mov
and
xor
retf
push
push
jmp
adc
cdq
push
dec
push
test
pop
cdq
popa
inc
je
mov
pusha
xor
int3
adc
fisub
jo
(bad)
int
cmp
imul
loop
lods
pop
jmp
fnsave
push
jno
les
out
fsubr
dec
xchg
push
adc
xor
call
aad
hlt
fs
test
cmp
inc
or
leave
sub
lock
loop
outs
js
push
das
pusha
(bad)
cmp
mov
mov
mov
sbb
jnp
in
je
push
adc
addr16
mov
jmp
cmp
xor
retf
int3
in
shr
mov
sahf
inc
cld
and
pop
aam
call
repz
jle
loopne
xor
idiv
xor
sbb
retf
pusha
ret
scas
xor
int3
adc
pop
ss
pop
mov
pushf
adc
or
sub
mov
mov
in
enter
dec
imul
cmp
dec
mov
dec
xor
pusha
xchg
fiadd
por
inc
pop
lods
sub
fptan
int3
int3
call
mov
inc
movs
cmp
test
aaa
ret
push
loopne
push
xor
push
xchg
add
clc
inc
push
loopne
xlat
sub
lahf
add
(bad)
std
fisubr
pop
mov
jg
cmp
stc
call
pusha
push
jmp
fsubr
sbb
sbb
out
xchg
int3
xchg
shl
(bad)
xor
into
aas
mov
stos
sub
jmp
int3
inc
add
sar
pop
(bad)
xchg
pop
int3
and
xchg
sahf
packuswb
pop
adc
fs
mov
cmp
in
sbb
cld
pop
cmps
dec
test
dec
or
pop
hlt
xchg
fsub
call
jmp
jge
sbb
test
addr16
aam
test
inc
dec
xor
xlat
cmp
rcr
ficom
sti
shr
push
(bad)
xlat
sub
or
mov
arpl
(bad)
sbb
fsubr
adc
cmp
lock
fcom
sbb
test
test
(bad)
ins
or
pop
pop
je
xchg
movs
inc
ss
pop
test
fdiv
cmp
int3
ror
adc
adc
rcl
sbb
rcr
inc
sbb
(bad)
xchg
mov
int3
mov
les
mov
ss
jg
cmp
or
push
pop
sbb
icebp
and
push
retf
mov
sbb
or
aad
stos
jp
int3
mov
add
mov
(bad)
movs
sar
and
mov
and
ss
jmpw
aaa
push
xchg
push
imul
or
ret
ja
cmp
add
xor
int3
mov
mov
mov
or
push
or
lods
or
mov
pop
mov
jle
pop
in
add
xchg
pop
and
push
push
sbb
sbb
das
rol
mov
cwde
xlat
inc
push
adc
sub
in
sub
sbb
mov
jl
cmps
int3
ror
mov
pop
pop
push
or
scas
jnp
xor
test
jg
dec
push
push
mov
aam
jge
add
pop
and
int3
mov
in
mov
sar
lods
push
std
xchg
push
cmp
or
xor
dec
mov
or
inc
fbld
xchg
or
dec
dec
or
stos
jo
dec
fs
mov
dec
or
pop
or
mov
mov
pop
cmp
btc
je
icebp
or
(bad)
stc
cwde
dec
add
ins
lds
or
loop
cdq
xor
sub
fld
inc
push
inc
cli
lods
fcomi
cmp
ret
pop
jbe
inc
icebp
das
mov
and
inc
add
xor
hlt
jb
cmps
push
cwde
add
cdq
and
add
push
fisub
push
push
sar
xor
dec
pop
push
or
add
(bad)
cmp
jg
cmp
xchg
dec
add
or
(bad)
pop
lea
adc
imul
inc
and
inc
push
lahf
div
ins
push
aaa
call
fcmovne
and
lods
or
cdq
mov
push
mov
int3
sub
push
sbb
adc
xchg
imul
push
inc
enter
fldenv
jmp
call
jmp
jnp
ret
dec
push
and
sub
jmp
loop
loopne
pop
cld
imul
mov
or
(bad)
adc
fstp
or
dec
mov
adc
lods
int3
sbb
aaa
jle
aam
jbe
and
fist
inc
xlat
arpl
jno
cli
movs
push
(bad)
jp
or
dec
mov
add
rcr
push
(bad)
mov
call
fcom
mov
xor
dec
rcr
repz
pop
pop
sub
fdivr
dec
clc
sahf
pop
hlt
call
imul
int3
sub
push
mov
add
mov
push
mov
sbb
xchg
push
stc
jmp
ja
repz
into
ret
cld
fstp
sub
jl
sbb
imul
sbb
mov
jno
push
inc
sub
cld
movs
jle
or
sub
dec
test
and
imul
push
inc
or
sbb
xor
mov
movs
xor
lods
sbb
int
add
inc
mov
retf
mov
push
sbb
int3
aaa
test
sti
or
sbb
shr
jp
fstp
cmp
in
add
add
mov
adc
js
dec
cdq
mov
or
lods
jp
dec
sbb
inc
popf
imul
loopne
pop
or
xchg
out
add
jne
jo
pop
adc
jno
enter
push
mov
pop
add
in
push
std
test
adc
(bad)
mov
in
cmp
in
icebp
movs
cmp
loope
nop
cmp
mov
aad
or
ds
retf
pusha
cmp
push
jge
icebp
and
xor
dec
lahf
fdiv
jg
sbb
mov
add
mov
xchg
inc
repnz
mov
gs
xor
push
pop
mov
int
sub
jmp
sub
clc
(bad)
frstor
mov
adc
mov
add
loop
mov
dec
xor
fild
add
imul
jbe
add
push
loop
mov
cmp
sub
pop
sbb
fisttp
aas
fidiv
push
pop
loop
das
int3
and
es
das
outs
pop
pop
out
sub
in
lock
imul
add
adc
jbe
jl
push
or
ins
pop
fist
cmps
ror
cmp
inc
loope
out
or
cmp
xor
inc
xor
sub
or
cmp
push
std
fdiv
add
adc
push
sbb
icebp
rcl
int3
or
data16
fist
jo
inc
fnstcw
sub
mov
inc
shl
xor
rol
push
mov
dec
or
inc
out
sbb
adc
xchg
cmp
pop
sbb
or
mov
xor
inc
xor
pop
mov
dec
add
jae
je
push
xor
rol
or
adc
cwde
push
pop
inc
or
loope
neg
and
mov
push
jmp
sbb
mov
inc
dec
test
mov
sbb
or
fimul
pop
or
add
cmp
xor
push
xor
xor
add
sbb
sbb
cmp
dec
cmps
inc
or
mov
add
add
or
fs
push
sbb
mov
xor
pop
jne
cmps
pushf
and
or
mov
fstp
ror
pop
jnp
sar
xchg
or
aad
sahf
jmp
out
sub
adc
jbe
or
dec
aas
pusha
sub
pop
(bad)
xlat
pop
or
sbb
sub
cmp
scas
mov
jl
add
push
(bad)
push
pop
pusha
xor
test
icebp
push
pop
sbb
add
rcr
add
or
dec
nop
sti
jns
inc
pop
pop
sub
push
push
in
or
mov
xor
imul
jp
jp
inc
sbb
(bad)
in
sub
test
inc
push
addr16
inc
mov
sahf
push
sub
push
mov
popf
fld
enter
pop
and
jno
ins
dec
mov
adc
pusha
in
das
jno
mov
mov
clc
jno
cmc
and
xchg
(bad)
and
movs
fxch
call
jnp
pushfw
mov
inc
add
lods
push
and
fist
into
or
(bad)
push
stc
xor
jae
dec
pop
inc
dec
jae
pop
dec
jle
imul
pushf
pop
mov
popf
mov
and
add
in
and
cmp
cmc
imul
aam
loop
or
sbb
in
jmp
adc
push
sub
aam
mov
dec
add
imul
imul
aam
push
ins
jle
mov
nop
xor
hlt
les
leave
jns
je
sbb
clc
jmp
sbb
xchg
mov
enter
cmp
fcomp
and
push
in
in
xor
or
sub
or
sub
fsubr
xor
xchg
and
mov
lods
sub
mov
inc
dec
adc
push
cmps
mov
and
cwde
(bad)
push
ins
sbb
dec
cmps
neg
sbb
pop
and
int3
int3
dec
add
push
mov
adc
jmp
sub
xor
pushf
xor
mov
mov
mov
fstp
xor
popa
xchg
test
aam
out
(bad)
fnsave
adc
iret
and
and
pop
pop
hlt
mov
pop
adc
das
rcl
push
imul
or
fstp
cmps
mov
and
push
in
xchg
aad
pushf
popf
mov
retf
(bad)
shr
pop
retf
dec
adc
mov
mov
cmp
loop
in
push
movs
cmp
lods
outs
sub
adc
call
or
push
jo
fs
pop
or
sbb
aas
imul
mov
(bad)
jecxz
sub
push
pop
sub
cmp
jg
and
cld
das
cmps
rcr
arpl
mov
add
push
ins
sub
adc
push
pop
push
sbb
sbb
cmp
in
push
test
cmp
inc
pop
test
or
(bad)
sbb
ret
and
or
fcomp
sti
fnsave
call
ins
es
xlat
in
xor
loope
push
lea
add
jo
xor
or
pop
test
out
sub
ins
cdq
xchg
xor
push
mov
pop
jge
and
pop
sub
retf
push
cdq
cwde
jns
xor
sub
mov
es
loope
imul
or
add
or
daa
cli
outs
sub
hlt
jb
mov
ficom
xchg
fwait
loop
in
fmul
int3
js
lock
xchg
dec
xor
rcl
sbb
fst
inc
shl
xchg
stos
xchg
test
inc
add
dec
pop
cli
ins
nop
loop
bound
ror
mov
or
ins
adc
pop
cli
pop
add
push
aas
stos
adc
loopne
sub
test
pop
cld
push
in
(bad)
dec
sti
adc
inc
rcr
jo
push
add
or
bound
call
pop
add
push
add
mov
inc
rol
in
adc
cld
sbb
in
fadd
xchg
imul
lock
or
dec
inc
sub
cdq
lods
or
scas
lods
movs
pop
sbb
inc
call
xor
sub
pop
mov
pop
and
imul
mov
cmp
pop
in
mov
mov
add
sbb
push
lods
mov
pop
sub
imul
and
cwde
imul
(bad)
mov
push
pop
in
mov
inc
mov
or
ror
adc
mov
pop
mov
mov
add
add
out
pop
popf
pop
pusha
imul
lods
push
or
mov
sub
nop
pop
push
aaa
sahf
repz
movs
mov
icebp
xchg
mov
lea
push
add
mov
or
fimul
cli
xchg
xchg
movs
or
add
test
ja
shr
mov
das
push
or
pop
pop
or
or
inc
ins
ins
dec
push
add
jmp
inc
xchg
in
sbb
cmp
cmc
fistp
movs
fwait
iret
adc
cmp
xchg
daa
fdivr
ja
pop
cli
pop
add
xchg
and
dec
push
pop
xchg
mov
xchg
cmp
xor
pop
gs
outs
mov
xor
shr
(bad)
jp
or
(bad)
dec
imul
pop
push
xchg
mov
int3
push
rcl
fxch
clc
and
test
inc
mov
pop
pop
push
fbld
pop
je
dec
cmp
and
jg
jmp
sbb
mov
call
sub
and
mov
xor
inc
push
or
mov
das
pusha
jbe
sti
jmp
movs
retf
repnz
jae
loop
sub
cmp
in
xchg
jo
or
inc
loope
retf
test
sbb
add
fisttp
aam
add
add
or
or
int3
push
dec
adc
or
icebp
pop
and
cwde
add
pop
imul
pop
mov
inc
adc
pop
jne
pop
add
sub
sbb
jne
mov
add
push
push
nop
jmp
ret
sbb
xor
out
jbe
stos
push
pop
add
and
enter
dec
jmp
cdq
stos
xor
pop
retf
xchg
pop
jl
cmp
push
lods
fidivr
ins
movs
xor
lods
mov
or
stos
cmp
pop
iret
or
stos
sub
into
cmp
mov
xor
sub
cmp
data16
fldenv
jo
cld
cmps
push
fidiv
mov
mov
xor
movs
or
inc
(bad)
jno
and
sti
loop
ret
retf
dec
aad
rcr
int
sbb
add
jae
or
aam
int3
sub
lahf
pop
aas
sbb
std
not
test
and
lahf
stos
ret
aad
rcr
scas
int3
test
aaa
stos
mov
add
mov
les
jnp
or
add
mov
xor
and
mov
lock
push
retf
or
cmp
lahf
test
mov
push
in
repnz
rcl
das
pop
in
xor
xchg
pop
jns
aas
inc
adc
iret
or
mov
js
cli
mov
cmp
pop
sub
mov
cmp
pop
bound
cmps
dec
bound
sbb
push
and
add
mov
xor
or
add
or
into
scas
lock
loope
cld
jle
fist
stos
inc
and
jmp
addr16
cmp
movs
sub
or
ins
push
test
fbstp
in
jmp
add
push
test
push
cdq
fiadd
mov
or
sub
lods
push
jmp
sub
inc
mov
fsubr
das
jne
push
push
rcl
fldcw
in
inc
mov
mov
lahf
mov
jne
jns
inc
jmp
int3
fcmovnbe
fwait
rcr
iret
dec
and
dec
lea
retf
shr
xor
out
loopne
sbb
sahf
or
adc
pusha
push
inc
sub
in
clc
test
aam
pop
inc
lds
fst
pop
mov
dec
push
cdq
pop
int
rcl
pop
pop
push
retf
mov
push
sbb
or
movs
or
cs
(bad)
mov
add
jle
or
and
mov
jmp
lahf
push
ja
mul
les
stos
sbb
add
mov
movsx
sub
xchg
and
jbe
inc
idiv
xchg
(bad)
in
xor
div
out
cmp
leave
and
test
mov
xchg
push
push
fsubr
cld
cmp
cmp
pushf
out
fnsetpm(287
inc
xlat
jge
test
push
add
or
mov
push
add
repz
adc
fimul
inc
push
in
jg
sbb
leave
pop
add
test
movs
inc
push
cmp
xchg
mov
cmc
bound
xor
pop
ror
sub
pop
fisub
repz
aaa
xchg
test
push
les
stc
xchg
push
jg
cdq
pop
mov
shl
ror
dec
out
push
hlt
jne
inc
in
lods
mov
mov
fstp
xor
jmp
(bad)
(bad)
push
test
mov
cli
and
cmp
sbb
jns
lods
loopne
ss
adc
ds
ficomp
(bad)
cmp
sbb
pop
daa
push
push
pop
mov
dec
inc
lock
clc
loope
xor
cmp
pusha
cdq
out
push
out
fdivr
adc
repnz
(bad)
out
mov
push
call
xor
loop
xor
(bad)
in
test
xchg
add
retf
cli
or
push
icebp
fwait
int3
stc
repz
or
stos
jge
call
add
pop
mov
or
adc
jns
sti
imul
nop
pushf
add
mov
pop
bound
sbb
sub
call
sub
fsub
jnp
pop
adc
fiadd
mov
imul
xchg
adc
imul
lods
pop
jns
in
das
pop
(bad)
xchg
mov
or
in
push
adc
cmp
sub
push
cmp
sub
fisubr
and
xchg
into
int3
faddp
or
pop
sub
push
or
call
stos
adc
enter
or
loope
xor
(bad)
pop
sti
dec
inc
xchg
cmc
shl
cli
jecxz
jmp
mov
test
cmp
loopne
xor
push
pop
or
add
inc
cmp
mov
icebp
mov
jmp
inc
inc
aam
mov
(bad)
xlat
test
arpl
pop
or
call
popa
mov
ss
popa
shr
cld
sbb
(bad)
in
jp
dec
xor
sbb
movs
cmp
ins
cmps
fistp
push
cmps
cli
fs
(bad)
mov
ja
dec
dec
sub
test
xchg
adc
retf
sbb
sbb
mov
adc
adc
or
icebp
retf
or
xchg
or
add
mov
lahf
and
push
cli
jne
gs
mov
stc
cld
mov
cmp
sbb
pop
or
cmp
iret
aad
cmp
pop
in
idiv
fidiv
loop
ror
dec
(bad)
out
mov
f2xm1
jnp
sbb
mov
mov
inc
(bad)
xor
pop
and
mov
jge
cmp
and
cmps
adc
outs
push
repz
in
xchg
stos
push
int3
xor
mov
sbb
imul
xor
sub
push
std
push
call
fs
nop
xor
in
sbb
ss
cmp
xor
or
or
cs
add
dec
push
or
adc
sbb
loop
cdq
pop
popf
fdiv
fsub
cdq
cmp
test
jmp
ficom
cmc
adc
jmp
dec
or
inc
mov
cmp
ins
push
lods
pop
sbb
jecxz
daa
push
sbb
fcom
sbb
dec
jmp
add
xchg
out
mov
xor
pop
fs
or
or
or
cmp
js
lods
fcomp
enter
sub
or
sbb
and
das
adc
loop
xchg
cs
jmp
push
pop
inc
or
add
adc
dec
cmps
in
scas
jecxz
mov
ret
int3
xor
inc
or
hlt
popf
movs
fsubr
xchg
retf
inc
inc
adc
or
push
push
pop
xor
mov
pop
stos
or
sub
add
xlat
push
xchg
mov
in
int3
fldenv
sbb
sbb
and
add
cli
sub
push
sub
popa
enter
sbb
or
in
ja
dec
test
and
sahf
das
sbb
sbb
sti
sbb
jmp
sbb
dec
in
sub
sbb
or
cdq
ficomp
push
clc
dec
sbb
push
in
mov
dec
fisttp
or
outs
mov
pop
push
call
cmp
jmp
xor
ret
or
lods
sub
iret
retf
inc
hlt
xor
sub
xor
cmp
pop
and
add
push
sub
sbb
sub
sbb
xor
dec
xchg
pop
push
pop
inc
jp
jmp
js
push
dec
inc
pop
jo
pop
ror
jle
adc
sub
jmp
enter
pop
sbb
jge
rcl
test
inc
cmp
(bad)
aad
xchg
das
push
ds
cli
mov
sbb
lods
pop
or
pop
cmp
mov
jo
out
or
fidiv
jge
xchg
xchg
mov
or
rol
dec
adc
movs
or
jmp
push
jecxz
ffree
jmp
inc
mov
mov
daa
fmul
movs
or
mov
sbb
std
and
js
rcr
xor
or
(bad)
clc
neg
fwait
add
mov
pop
pusha
jge
pop
retf
in
dec
pusha
sub
jbe
sub
jmp
stos
iret
cmp
(bad)
cwde
sub
outs
push
ss
add
and
imul
pop
pop
inc
sbb
cli
retf
xchg
jnp
inc
lds
jmp
or
adc
push
icebp
dec
cmp
es
fld
bound
pop
push
add
ret
stos
xor
imul
imul
sub
xor
lock
push
inc
jecxz
jge
stos
and
jmp
sub
adc
pop
push
lods
stos
les
and
in
shr
lods
into
xor
les
jmp
sbb
push
sub
mov
xor
out
or
in
outs
mul
int3
xor
add
cld
test
jno
repz
pand
add
jne
sbb
sbb
rcl
mov
sbb
retf
jg
lods
sbb
int3
dec
adc
xchg
sub
sbb
sub
imul
sub
xor
add
lds
ins
push
jb
sbb
and
and
add
push
jnp
jp
outs
dec
xor
xor
ds
test
icebp
sbb
in
and
outs
mov
arpl
pop
into
or
fidiv
scas
mov
and
pop
xor
xlat
int3
fwait
out
stc
push
xchg
pop
scas
xor
(bad)
dec
adc
out
jl
sbb
cwde
adc
push
sbb
cdq
rcl
imul
cmps
xor
dec
ins
and
or
imul
pop
adc
mov
repz
and
cmp
test
je
or
add
in
jno
cs
cdq
and
in
pop
pop
imul
or
gs
nop
pop
inc
sbb
aaa
repz
push
fcmovb
fist
dec
xor
scas
sbb
cmp
hlt
push
mov
fbstp
mov
pop
icebp
test
and
jbe
pop
call
stos
les
loopne
sbb
pushf
xchg
stos
outs
add
dec
in
outs
mov
shr
xor
push
ret
push
push
sub
mov
mov
fcmovnb
inc
mov
mov
dec
sub
pusha
sub
hlt
mov
dec
ds
in
test
div
idiv
sbb
je
es
int3
jecxz
sbb
cli
imul
mov
pop
loopne
sbb
in
mov
fisttp
dec
gs
in
mov
fistp
or
push
pop
or
mov
mov
dec
mov
ret
jge
loope
inc
sub
sbb
mov
or
cmps
call
sbb
and
and
test
dec
into
add
inc
push
repz
sar
pop
sub
xor
xor
cli
in
addr16
dec
sub
cmps
pop
ins
push
adc
pushf
hlt
jne
sbb
int3
mov
xchg
pop
cmps
aaa
pop
mov
mov
fwait
std
inc
out
cmp
xchg
jne
stos
es
pop
imul
pusha
sbb
icebp
xor
shl
push
or
push
or
cdq
xor
ds
pop
push
sbb
jmp
or
fiadd
mov
jp
push
cmp
push
jmp
mov
js
(bad)
repnz
adc
sahf
or
dec
sbb
arpl
inc
in
retf
icebp
jge
fisub
pop
or
pop
and
sub
add
push
pop
fs
add
shl
shl
or
sub
ror
cld
into
das
sub
stc
adc
pop
push
inc
xlat
push
or
call
iret
sub
gs
mov
sbb
movs
pop
push
loopne
cmc
jle
sub
mov
call
lock
nop
mov
adc
pop
cmc
sbb
popa
sbb
sub
or
xlat
add
or
jge
(bad)
lea
or
push
inc
adc
mov
or
imul
pop
cs
stos
fcomp
inc
cli
push
sbb
icebp
push
jae
xor
mov
and
add
jmp
cdq
mov
mov
icebp
push
jmp
popa
imul
and
push
call
pop
hlt
out
sub
and
stos
xchg
call
jl
pop
cmp
icebp
sbb
sub
dec
pop
inc
ret
dec
inc
pop
and
adc
cld
mov
sbb
sbb
rcl
fistp
ja
sbb
or
lods
es
leave
js
or
out
test
retf
addr16
add
or
jnp
sub
in
inc
sbb
jne
pop
adc
or
sbb
pop
sub
and
dec
sub
dec
mul
push
sub
clc
sub
(bad)
and
pop
xchg
and
jmp
rcr
adc
les
ror
push
mov
push
xor
imul
xchg
jp
rol
mov
loopne
xchg
js
lahf
xor
in
es
or
pop
pop
pop
jmp
or
pop
cmc
mov
and
in
cwde
xchg
in
cdq
pop
sbb
add
gs
test
pop
pop
xor
add
(bad)
mov
mov
retf
rcr
xchg
sub
lods
sbb
pop
jle
mov
sbb
push
add
or
add
cld
cmc
sub
call
lods
sbb
mov
loopne
sbb
pop
cmp
or
inc
and
mov
outs
xor
inc
cmp
push
jmp
adc
loopne
retf
xor
movs
pop
sbb
push
dec
jne
inc
sbb
(bad)
inc
jnp
add
clc
cmps
push
add
sbb
mov
and
adc
mov
out
push
lock
xchg
jmp
or
jmp
push
clc
jae
or
ja
cdq
mov
push
test
data16
jmp
pop
lds
jg
sub
test
jns
add
add
push
xchg
adc
push
pextrw
sub
enter
push
in
and
dec
mov
adc
dec
adc
lds
push
mov
adc
hlt
cmp
js
cld
and
les
or
in
retf
add
cli
jo
mov
int3
mov
repz
sbb
xor
adc
mov
inc
std
jbe
in
cs
int3
data16
or
or
adc
pop
int3
jb
cmp
retf
mov
push
ins
inc
nop
sub
mov
push
or
add
and
pop
jmp
imul
loop
loopne
push
ins
mov
push
and
popa
out
int3
lock
dec
inc
cmp
add
jle
push
sbb
mov
sub
sub
iret
push
sub
data16
lods
add
mov
push
(bad)
arpl
adc
out
or
lods
dec
push
sub
gs
js
mov
mov
add
mov
xchg
cld
inc
cli
dec
dec
loope
sbb
shl
out
in
dec
mov
fistp
dec
sbb
sub
xchg
mov
aaa
in
adc
sub
adc
in
mov
adc
std
dec
dec
lods
inc
add
sti
data16
out
lods
lods
or
xor
pop
cmp
sub
mov
(bad)
cmp
sub
cmp
imul
xor
fild
xchg
clc
pop
or
clc
and
icebp
adc
popf
jne
nop
imul
(bad)
fs
push
dec
cmp
(bad)
fild
cdq
out
add
adc
mov
addr16
lods
sub
or
mov
dec
sbb
int3
or
into
mov
(bad)
call
jbe
and
scas
lods
cmp
xchg
dec
adc
pop
mov
dec
mov
rcl
pop
enter
test
mov
push
sub
sbb
outs
and
rcl
pop
xchg
daa
sub
jbe
ins
pop
shl
rcl
adc
xor
(bad)
and
retf
sar
inc
xor
cwde
push
mov
and
sub
fs
sbb
outs
jg
add
out
push
inc
test
addr16
imul
push
icebp
es
and
sub
mov
mov
mov
dec
aaa
and
and
ja
mov
push
imul
lock
pop
cmp
xor
or
or
dec
int
mov
mov
push
loope
adc
aaa
mov
pop
push
stc
push
imul
xor
adc
in
add
je
test
daa
jmp
adc
inc
sbb
push
xchg
push
add
mov
inc
xor
int3
cmp
fisubr
aam
jge
xchg
push
or
push
sbb
xor
es
aaa
jl
pushf
xchg
stos
sub
movs
(bad)
repz
cmp
mov
mov
into
loop
add
xchg
shl
sbb
sbb
push
stos
shr
mov
adc
or
retf
mov
dec
addr16
aaa
repnz
pop
or
mov
xchg
sub
nop
ja
xor
lds
pop
xor
and
push
mov
fs
stos
sub
jmp
pop
or
xchg
popa
loopne
cwde
cmp
addr16
addr16
lds
shr
dec
sti
and
jne
movs
push
jmp
jecxz
push
sbb
into
push
popa
sbb
sub
addr16
je
adc
push
push
jnp
and
pusha
lahf
xchg
call
sub
cmp
dec
mov
fadd
mov
jo
push
ss
push
cli
mov
inc
nop
or
cmp
sub
jecxz
jbe
dec
and
adc
xor
cmp
loopne
push
mov
mov
pop
sbb
sbb
pop
push
data16
cmp
xor
aad
in
data16
sbb
or
enter
ror
push
cmp
(bad)
sti
dec
fnstenv
mov
pop
and
out
sbb
xchg
scas
jo
imul
ror
mov
sub
ds
mov
test
loop
mov
frstor
adc
dec
cdq
stos
inc
mov
push
test
xor
test
cmp
enter
or
jnp
movs
(bad)
push
push
and
outs
mov
push
sbb
add
ds
adc
icebp
in
call
imul
add
mov
sub
lock
rol
imul
out
xchg
jno
mov
dec
jl
enter
jmp
or
add
mov
or
adc
das
jp
jnp
fwait
enter
dec
mov
cmps
(bad)
jmp
(bad)
lods
imul
adc
or
xor
xor
xor
loope
mov
inc
les
mov
jle
cmp
push
inc
int3
outs
pusha
mov
pop
push
adc
xchg
add
mov
test
pop
add
lock
sub
outs
cmp
push
and
addr16
push
jl
sbb
adc
test
sbb
shl
sbb
sub
enter
push
mov
pushf
add
int3
pop
iret
das
push
pop
retf
aad
and
sbb
xor
sbb
mov
push
sbb
cmp
sbb
xchg
add
fs
ret
pushf
arpl
movs
or
sbb
aam
fldlg2
pop
xchg
sub
xchg
movs
retf
jl
xor
ret
xchg
sbb
sub
lods
imul
push
test
and
std
jbe
ja
add
(bad)
inc
xor
jmp
xor
in
push
or
push
pop
jmp
icebp
add
jmp
pop
or
and
ror
or
sbb
jl
cdq
pusha
jg
inc
fbld
mov
les
imul
in
in
in
xor
xchg
pop
push
push
mov
fidivr
sub
or
sahf
xchg
out
(bad)
into
inc
sar
add
js
in
ins
sbb
lock
dec
out
dec
or
pmaxub
adc
or
dec
xchg
pop
xchg
xchg
add
ds
xor
inc
xchg
fist
add
mov
inc
lods
push
push
out
pop
pop
jl
les
fisubr
hlt
sub
push
adc
add
adc
or
sbb
cmp
add
cmp
jo
add
shl
mov
and
mov
pop
js
jp
addr16
loop
push
call
lahf
sbb
xchg
add
and
xor
sub
mov
xchg
fwait
dec
xor
mov
push
or
adc
inc
scas
sar
dec
xor
(bad)
ins
aaa
mov
add
dec
je
add
jns
iret
mov
test
sbb
in
push
pop
pop
add
repz
jno
retf
(bad)
pop
mov
cmp
inc
cmp
push
add
ror
dec
sbb
xor
in
xchg
push
aas
push
push
pop
mov
imul
xchg
stos
(bad)
ficomp
fwait
mov
imul
pop
push
dec
iret
rcr
cmp
ret
mov
cmp
in
mov
xchg
adc
imul
and
imul
pop
pop
test
ins
and
adc
xor
retf
mov
sub
nop
mov
mov
fcmovu
cwde
imul
mov
add
mov
icebp
and
adc
aam
int3
push
adc
inc
adc
fdiv
adc
call
sub
sbb
imul
push
mov
sub
ins
lods
sbb
add
fidivr
xor
push
sbb
adc
(bad)
jmp
in
or
jl
out
xchg
mov
rcr
cmp
xchg
ja
js
mov
xor
pop
aaa
add
pop
jl
inc
sbb
adc
aaa
pop
ss
jle
inc
scas
or
jo
lods
sbb
dec
push
xor
shl
jmp
into
mov
movs
out
clc
xchg
mov
mov
add
enter
mov
shr
pushf
adc
xchg
add
ret
pusha
pop
cdq
loop
push
mov
aaa
jo
sub
xlat
mov
push
dec
sbb
pcmpgtd
push
mov
sub
mov
pop
inc
jp
test
mov
cmp
xor
out
xor
loop
popf
or
hlt
or
lock
mov
pop
aaa
sbb
push
fcomp
test
lds
add
sub
ret
pop
mov
or
and
std
cmc
jns
div
imul
sbb
push
(bad)
mov
push
xor
daa
data16
dec
fwait
cli
lahf
push
nop
adc
push
add
dec
sub
ja
out
push
sbb
cmp
xor
pop
push
sbb
mov
movs
push
xchg
cmps
(bad)
int
lock
mov
mov
in
das
xchg
dec
imul
sbb
fcom
(bad)
jmp
pop
cmps
xor
push
nop
adc
shl
in
sbb
sbb
sbb
inc
data16
mov
movs
in
adc
jg
aas
popf
movs
mov
inc
popa
xor
cs
pusha
fsubr
cmps
or
and
out
shl
push
cld
out
sub
fnstcw
aaa
jnp
ja
mov
retf
fdiv
icebp
rcl
jl
xor
adc
sbb
mov
test
sub
lahf
(bad)
stos
xchg
lahf
pop
sar
into
pop
adc
jnp
or
(bad)
xlat
int3
inc
push
adc
out
retf
in
mov
or
mov
daa
jo
sub
pop
out
fisub
out
fwait
inc
pop
or
pop
jmp
lods
sub
paddb
hlt
or
arpl
sub
sbb
xchg
rcr
call
inc
add
dec
inc
sub
shr
adc
fild
cwde
xchg
add
inc
or
lahf
sub
movs
jl
inc
and
stos
or
(bad)
test
cld
add
xor
adc
fisub
(bad)
push
inc
(bad)
leave
jmp
adc
mov
sbb
call
or
rcl
ja
and
jmp
daa
inc
and
inc
jno
dec
mov
(bad)
push
jno
fs
pop
addr16
cwde
cmp
mov
(bad)
xor
xchg
add
jmp
cmp
cmp
and
sbb
ins
sub
jo
mov
aas
pop
es
scas
dec
mov
sbb
and
push
sub
jle
imul
sub
xor
pop
add
xor
test
mov
jmp
or
adc
add
mov
mov
sub
movs
cwde
fcom
aas
sbb
xchg
jmp
cmp
daa
ins
out
ret
gs
outs
inc
ds
mov
xchg
and
int3
adc
mov
xor
cmp
adc
sahf
fstp
push
or
jle
in
hlt
outs
cmp
adc
test
or
jl
jo
jecxz
lods
adc
pop
mov
push
mov
jmp
mov
stos
sar
and
and
nop
fs
cdq
push
loope
ds
sar
(bad)
or
jno
xor
cmp
inc
test
nop
xor
stos
or
cmp
mov
push
popf
xor
adc
add
push
or
cmps
and
inc
dec
fwait
lfs
inc
push
imul
cmp
push
js
or
shl
jmp
int
in
adc
dec
mov
jae
pop
push
fwait
add
adc
jae
pop
out
out
lds
pop
sub
cmp
and
lahf
rcr
sahf
push
into
retf
sub
aaa
cmp
enter
sbb
push
and
dec
movs
xor
mov
push
fimul
imul
(bad)
and
or
dec
xchg
js
jp
sbb
dec
mov
sti
xlat
mov
inc
in
push
cmp
or
icebp
or
push
jno
push
jmp
xchg
push
pop
adc
cmc
jae
scas
loope
lahf
popa
xor
inc
add
fld
sub
push
or
into
adc
sub
test
out
and
iret
mov
(bad)
fbld
pop
jns
xor
scas
pop
fsub
or
push
pop
aas
sbb
retf
or
pop
xchg
push
inc
jp
pop
cmp
mov
call
xor
jb
(bad)
push
sub
in
stos
aas
pop
sub
int
sub
imul
lods
pop
mov
neg
mov
cmp
pop
fidiv
icebp
and
add
jb
int3
imul
pop
adc
pop
sbb
jp
add
ins
lahf
(bad)
mov
mov
ins
mov
cwde
mov
in
outs
cdq
push
adc
pop
pop
add
pop
mov
jl
js
sti
fdiv
push
or
aad
pop
fnstcw
cmp
jnp
fs
inc
jmp
jge
cli
sub
push
movs
add
or
pop
pop
or
mov
xlat
das
and
or
dec
nop
dec
sub
and
sti
or
or
ins
mov
xor
test
xor
cwde
(bad)
mov
mov
fisubr
imul
out
sub
mov
jge
inc
inc
aaa
and
mov
pushf
test
or
in
(bad)
mov
sbb
outs
and
xor
push
adc
jb
mov
jmp
cmp
mov
sbb
push
les
(bad)
aam
cdq
fild
iret
xchg
cli
sbb
mov
and
mov
inc
dec
fsubr
push
pop
fstp
mov
jo
outs
retf
shl
rcl
fld
xor
pusha
stc
and
lea
les
mov
inc
inc
addr16
pop
pusha
push
cmp
cmp
mov
add
fwait
ds
add
xchg
sbb
sbb
in
xor
push
shr
jo
jae
push
(bad)
test
and
js
and
xor
fisttp
ror
mov
jbe
ds
dec
mov
adc
lods
inc
dec
cmp
mov
ret
and
mov
jmp
push
mov
lock
sbb
mov
sbb
cmp
pusha
icebp
jbe
inc
repnz
data16
xchg
or
xor
lods
sbb
add
xchg
(bad)
jae
jae
dec
prefetch
sub
je
imul
or
adc
aam
push
xor
ret
cmps
iret
jmp
dec
xchg
mov
shl
dec
push
sub
sbb
inc
into
shl
sub
dec
les
fwait
dec
push
mov
push
loop
push
retf
fwait
and
jmp
or
mov
or
jge
pusha
ror
iret
inc
cmp
mov
pop
mov
adc
xchg
mov
icebp
loop
mov
and
(bad)
dec
lahf
(bad)
stos
je
add
lds
rol
xor
add
add
mov
and
xchg
mov
sub
jmp
jecxz
xor
pusha
cmps
or
cmp
jbe
out
jl
mov
mov
cmp
mov
mov
aaa
jl
clc
inc
in
push
cmc
cmp
fmul
xchg
mov
ss
aaa
push
adc
dec
mov
dec
cmp
lock
jmp
lods
jp
(bad)
imul
in
out
int3
sbb
cdq
out
mov
out
cmp
call
cld
adc
inc
test
jnp
inc
ins
sbb
xchg
pop
or
xchg
sbb
mov
imul
cmps
xchg
and
inc
inc
mov
nop
add
cmc
inc
push
(bad)
pop
adc
sub
mov
pop
lock
mov
data16
pop
in
cmp
(bad)
data16
push
call
xchg
push
or
pusha
call
pop
pop
cmc
add
data16
lock
ficomp
mov
inc
clc
add
add
icebp
push
or
sub
xchg
xor
imul
enter
pop
pop
in
sbb
jecxz
in
(bad)
leave
adc
xchg
fst
xchg
pop
sbb
pop
add
enter
ret
pusha
call
push
shl
hlt
jecxz
mov
mov
es
pop
jbe
hlt
jbe
xor
sbb
fsub
mov
lods
jl
mov
sbb
cmp
mov
ds
ja
pop
les
int3
out
mov
clc
xchg
mov
lods
mov
add
ins
add
dec
jecxz
mov
cmp
movs
add
int
rcl
dec
shl
dec
add
jmp
sub
jle
leave
daa
mov
lahf
imul
test
cmp
aaa
mov
data16
or
loopne
push
enter
add
add
xchg
not
push
pop
les
xchg
rcr
fistp
pop
stos
xor
inc
push
movs
xlat
push
js
fs
lods
mov
sahf
movs
sub
and
lock
pop
mov
mov
or
pop
and
(bad)
fbld
es
sbb
addr16
cld
test
mov
xchg
or
pop
cmp
or
or
pop
jge
cs
sbb
nop
push
push
cmps
xchg
pop
pop
sub
inc
pop
mov
cmp
sub
enter
cld
shl
in
adc
adc
mov
push
jns
or
data16
aaa
xchg
add
jnp
adc
or
inc
cmc
adc
fxch
cs
add
xor
leave
add
lods
nop
lock
push
imul
inc
xor
jp
cli
sti
push
ss
fwait
mov
push
adc
fmul
jge
loopne
fild
adc
xor
cmps
push
and
xchg
out
(bad)
in
jo
or
lahf
push
stos
push
jl
cdq
push
pop
adc
sub
rcl
sub
dec
sub
adc
inc
pop
(bad)
sbb
sbb
push
push
or
pop
pop
icebp
dec
gs
retf
add
xor
cmp
sub
inc
adc
sub
cdq
adc
inc
call
push
add
push
push
jmp
adc
jg
sub
inc
jne
inc
out
xchg
sub
pop
in
add
or
push
ins
or
mov
jnp
sub
jg
imul
movs
test
mov
pop
adc
repz
pop
and
mov
bound
pop
sub
outs
jmp
inc
bound
push
sub
gs
xor
dec
sbb
add
popf
into
adc
xor
or
push
or
or
pop
and
(bad)
jp
push
mov
dec
es
sub
clc
lods
cmp
xchg
push
les
test
das
mov
jp
fucomip
mov
mov
inc
dec
imul
(bad)
in
(bad)
loope
ret
rdtsc
(bad)
pop
and
cmps
cld
xchg
jmp
pop
adc
ja
adc
push
imul
jns
jle
sub
es
xor
or
and
inc
lea
jg
js
cmp
xor
add
jns
shl
sub
xor
cmp
repz
jl
fdivp
sub
or
add
int3
inc
xor
mov
pop
mov
(bad)
fcomp
scas
popf
mov
inc
fmul
push
icebp
fdiv
gs
rcl
fist
cmc
push
out
stc
fisubr
cwde
xor
xor
xor
add
add
loop
cmp
pop
stos
xor
es
dec
cdq
in
retf
cmp
addr16
cmp
js
or
mov
bound
out
ja
ins
and
adc
push
outs
mov
sub
adc
jl
fsubr
cmc
mov
adc
inc
mov
aaa
imul
lods
das
inc
pop
clc
mov
cmp
xor
xchg
lods
in
dec
(bad)
xchg
and
(bad)
je
xchg
adc
mov
or
pop
sbb
cdq
fcomp
ins
das
call
ror
jns
ss
shr
cmp
sti
inc
sbb
sahf
xor
mov
sub
sbb
sbb
adc
(bad)
in
add
push
mov
stc
movs
inc
clc
push
(bad)
fidivr
add
inc
mov
jmp
xchg
or
mov
loopne
add
jle
in
sbb
(bad)
cmp
je
dec
aaa
pop
lods
add
push
sti
xor
in
cli
retf
das
inc
fs
adc
sbb
jmp
pop
stos
sbb
in
hlt
in
xor
repnz
inc
pop
push
(bad)
push
lock
call
or
mov
and
or
cwde
sahf
addr16
sub
ror
(bad)
cmp
pusha
inc
fistp
ret
jmp
adc
mov
cmps
cmp
add
or
mov
push
jmp
jle
xchg
pop
in
sbb
rcr
adc
cmp
pusha
enter
inc
add
dec
add
cli
inc
sbb
in
xchg
ret
xchg
jmp
clc
retf
cmp
sbb
fs
or
retf
push
xor
cdq
pop
push
cmp
das
jmp
jg
aas
clc
or
jb
sbb
push
mov
test
pop
push
sbb
jns
enter
adc
(bad)
out
xor
mov
les
pop
cld
pop
in
xchg
shl
ins
cmp
adc
push
sub
lds
push
push
sbb
inc
sbb
cli
adc
out
cli
not
out
push
adc
int
jp
jmp
(bad)
(bad)
mov
ficomp
rcr
mov
cmp
push
cld
push
or
test
imul
fs
hlt
test
data16
sbb
lods
lea
add
push
cld
sbb
out
sub
sahf
sub
clc
add
leave
push
hlt
loope
cmps
mov
out
movs
mov
test
or
add
xor
test
cdq
dec
fs
repnz
enter
sahf
cvtps2pi
rcr
or
div
mov
addr16
jecxz
call
mov
lods
js
cmp
fcomip
xor
clc
pop
and
(bad)
and
xchg
retf
xor
mov
or
sub
test
xor
xor
xor
les
jne
and
and
or
sub
leave
push
inc
inc
cs
dec
wbinvd
ins
jmp
aad
adc
cwde
nop
sub
enter
sub
test
popa
test
loop
retf
sbb
test
dec
jmp
gs
and
test
add
sbb
sbb
jl
jo
and
scas
or
mov
push
lods
sbb
out
aas
dec
fs
mov
es
or
cmps
cmp
push
sbb
mov
pusha
cmps
ror
(bad)
jl
(bad)
or
nop
pop
dec
xor
icebp
or
add
inc
int3
add
mov
lock
add
clc
or
xor
ret
adc
pusha
ins
test
fbstp
ror
(bad)
lods
fsubr
xchg
pop
inc
in
loope
pop
hlt
add
or
retf
push
cmps
fild
fbld
sub
inc
in
xchg
add
movs
adc
mov
dec
test
cmps
mov
imul
stc
and
outs
sbb
call
clc
nop
ds
push
xor
jo
cmp
mov
sbb
add
or
xor
pop
hlt
dec
and
push
shl
xor
test
mov
lods
pop
movs
inc
pushf
dec
push
cmp
mov
mov
clc
inc
inc
(bad)
inc
ins
or
retf
sub
aas
out
lea
push
cdq
sbb
ret
js
outs
dec
xchg
sbb
push
push
push
loopne
inc
xor
jmp
or
sbb
pop
pusha
iret
push
ds
or
push
repz
das
fld
ret
xor
movs
xor
aaa
pushaw
mov
xchg
loopne
inc
popf
mov
ins
mov
push
sub
push
call
pop
out
sbb
cld
add
or
pop
jb
aas
dec
dec
ss
retf
pop
clc
lods
hlt
js
sub
sbb
retf
pop
out
sti
out
movs
gs
outs
rcl
adc
dec
push
int3
fsub
sbb
retf
push
jne
jmp
rol
xor
lods
lods
inc
hlt
sbb
fwait
mov
sbb
xor
push
(bad)
and
ss
out
fmul
mov
adc
add
call
mov
adc
sbb
xchg
fadd
add
mov
sbb
lods
stos
sbb
cmp
ins
sbb
test
mov
push
adc
push
mov
push
ss
or
push
adc
push
pop
sbb
push
in
adc
push
adc
icebp
pop
and
scas
leave
sbb
xor
pop
add
pop
add
add
add
mov
ds
(bad)
pop
push
xchg
popa
or
test
push
jmp
sbb
cmp
sub
xor
push
and
and
cdq
pop
pusha
clc
retf
stos
push
and
mov
add
push
xchg
or
mov
ins
xchg
dec
and
int3
adc
pop
imul
xor
adc
ins
sbb
xchg
retf
loop
or
addr16
jmp
fdivr
icebp
push
or
fistp
je
pop
dec
mov
mov
sbb
mov
fistp
and
addr16
(bad)
cmps
cmp
jne
cmps
push
jl
imul
scas
adc
int3
(bad)
xor
inc
jl
add
mov
xchg
je
in
mov
mov
add
rcl
push
pusha
out
fcomp
cli
sbb
loope
pop
push
into
mov
imul
test
or
cdq
dec
sbb
jmpw
aam
push
pusha
jecxz
retf
adc
hlt
pop
or
sub
xchg
or
ror
fstp
sub
jle
inc
cld
loop
fwait
std
gs
clc
sbb
ficom
add
adc
adc
add
mov
movs
cli
xchg
addr16
popf
mov
lock
xchg
movs
cmp
dec
push
hlt
in
or
test
jne
mov
in
(bad)
stos
pop
ds
dec
mov
lods
rcl
sub
cmp
jl
les
sbb
xlat
pop
fidiv
and
mov
sub
or
or
lahf
cmp
cs
mov
mov
call
jmp
add
icebp
inc
jp
(bad)
retf
xlat
lods
jne
adc
ja
mov
mov
inc
pop
out
mov
pop
add
xchg
sub
sar
xor
ins
mov
repz
sahf
sti
pusha
or
ins
cmc
or
add
int3
inc
fstp
js
or
add
mov
cld
inc
sub
out
sbb
les
cmp
adc
in
adc
add
fld
cmc
aas
push
ins
lea
xchg
imul
pop
inc
add
pusha
inc
ret
push
sbb
cmp
cdq
push
xor
jmp
ficomp
add
sahf
in
clc
neg
jmp
and
add
sub
test
cmps
jp
pop
xchg
jl
mov
es
push
(bad)
sbb
or
fisttp
push
add
inc
mov
aas
sbb
dec
(bad)
outs
jns
stos
dec
push
pop
pop
add
or
sub
pop
mov
pop
sbb
retf
enter
and
dec
inc
mov
retf
xchg
push
addr16
mov
out
dec
frstor
xchg
adc
cmp
pop
js
dec
(bad)
sar
fstp
pusha
sbb
cld
(bad)
fmulp
ss
and
xor
xor
pop
add
ins
add
sub
xchg
loope
adc
bound
mov
push
(bad)
leave
(bad)
jne
std
ret
cwde
jne
movs
cmp
mov
sub
fsubr
addr16
and
nop
xor
xchg
mov
sub
inc
push
aaa
ret
push
inc
in
enter
call
xlat
push
mov
bound
out
pop
adc
idiv
popf
cmp
in
pop
cmp
fucom
push
(bad)
ss
pop
or
pop
mov
cmc
mov
imul
push
pop
fist
cs
pop
push
or
stos
inc
pop
xchg
les
and
cmp
pop
in
push
mul
xor
add
cld
xor
push
mov
cmp
dec
stos
and
add
sub
lea
in
cwde
pop
leave
jae
add
push
cmps
pop
dec
xchg
push
fisub
inc
jl
aad
pop
mov
ficomp
mov
cmp
inc
int3
cmp
cmovbe
in
pop
jae
adc
hlt
rol
add
xor
aaa
lock
pushf
mov
mov
pop
push
mov
dec
inc
mov
clc
add
pusha
repnz
mul
and
sub
xchg
jge
pop
imul
mov
ficomp
xchg
imul
mov
data16
aas
call
mov
in
clc
add
jnp
push
dec
mov
sbb
xchg
out
xor
xchg
dec
add
xchg
or
xchg
mov
push
mov
jge
or
popf
sub
int3
mov
dec
pusha
mov
lahf
mov
or
lods
jl
add
ins
jnp
ins
add
or
hlt
pop
mov
dec
loopne
mov
mov
cld
sub
sbb
cmp
shl
pop
fsubr
dec
xor
sbb
retf
pop
jmp
dec
jno
adc
pushf
mov
xchg
xchg
jbe
in
stc
push
jo
aaa
fnstcw
or
out
hlt
and
mov
in
xchg
add
(bad)
sbb
call
shl
add
mov
cwde
push
sbb
lock
lock
pushf
shl
test
push
adc
les
inc
and
clc
sbb
mov
rcl
xor
(bad)
aaa
iret
or
push
fild
neg
sub
adc
dec
add
xor
test
dec
or
stos
lahf
cmp
hlt
and
shl
sub
rcl
sub
sar
fist
mov
sbb
sub
xor
test
inc
pop
and
adc
dec
cmp
imul
call
(bad)
adc
fcomp
add
and
jmp
int3
cmp
loopne
mov
pop
or
add
pop
adc
mov
dec
and
movq
rcl
sbb
sbb
call
cmp
cmp
stos
lods
sar
mov
movs
push
shl
mov
push
shl
xchg
lods
int3
xchg
dec
es
imul
cmp
dec
test
movs
jae
mov
xor
rol
fadd
adc
imul
inc
xchg
cdq
jnp
gs
cmp
pop
add
xor
iret
push
ja
(bad)
cli
mov
pop
inc
push
shl
clc
icebp
add
jp
rcr
sbb
ret
push
jae
iret
(bad)
add
add
cmps
aaa
fldcw
sbb
ins
adc
add
jb
cmp
or
fadd
lock
das
or
push
add
push
in
jg
pop
or
call
xchg
les
mov
xchg
mov
adc
sbb
push
adc
in
lods
pushf
add
pushf
cmp
sbb
inc
rcl
jge
mov
adc
or
push
test
adc
mov
pop
dec
ins
dec
out
sbb
fsub
pushf
(bad)
push
dec
les
fs
imul
inc
mov
cdq
bound
fs
icebp
or
sub
pop
icebp
push
cdq
xchg
adc
adc
and
popa
jl
pusha
test
test
fld
sub
dec
or
pop
data16
push
pop
cdq
retf
mov
sub
outs
jl
mov
cmp
cwde
pop
push
jmp
cmp
pop
aam
or
mov
cdq
data16
jnp
scas
std
jns
icebp
sub
add
mov
inc
and
out
repz
cs
mov
div
fs
pop
pop
sbb
(bad)
clc
xlat
mov
cld
ficomp
ja
adc
into
and
mov
jo
add
jno
mov
hlt
cmp
jle
pop
add
dec
(bad)
or
mov
fstp
aas
and
or
lahf
fcom
adc
mov
cmp
call
xchg
add
cmps
out
jp
pop
sbb
mov
inc
shl
sbb
sub
out
retf
mov
sbb
dec
cld
loopne
or
mov
fsub
add
(bad)
out
fdivr
push
cld
add
into
das
sbb
lods
mov
push
pop
jle
push
dec
and
push
xor
inc
ret
add
jbe
and
mov
mov
cmp
add
out
mov
mov
jl
pop
retf
stos
or
mov
imul
sbb
ds
js
fcom
popf
stos
ins
xchg
dec
(bad)
push
and
jmp
dec
or
inc
ficomp
sub
push
inc
jecxz
stos
pop
arpl
fsub
add
pushw
push
bound
xor
sbb
cdq
xchg
jne
xchg
inc
popa
jmp
lods
les
jae
or
dec
(bad)
ss
push
or
add
aam
in
aas
shl
xor
cmp
cdq
sar
aaa
addr16
jg
jae
cs
neg
push
rcr
mov
mov
enter
jle
(bad)
xor
sub
loop
or
push
xchg
enter
fcom
(bad)
adc
clc
add
push
add
loopne
loope
lods
adc
jno
jb
cmp
dec
imul
in
cmp
pop
test
sbb
in
push
mov
rcr
mov
lahf
pop
loopne
sahf
out
cmp
adc
pop
mov
push
pop
jae
icebp
js
sbb
cmp
gs
or
shl
ret
ror
movs
xchg
ret
pop
pushf
jnp
add
push
mov
sbb
mov
cmp
xor
push
jo
and
mov
sahf
inc
adc
outs
(bad)
icebp
call
fisub
xchg
mov
retf
mov
xchg
mov
sbb
jp
add
sub
xor
sbb
repz
xchg
(bad)
bnd
ret
jmp
in
mov
pop
cmp
add
cmp
dec
aad
xor
bound
sbb
aam
push
jg
jmp
mov
or
test
mov
xchg
add
lock
in
jecxz
sbb
and
adc
std
cmp
mov
or
loope
retf
repnz
ret
adc
xchg
aam
fiadd
(bad)
pop
pop
pop
sbb
cld
ins
out
dec
xchg
shl
stos
sahf
fist
or
sbb
mov
xchg
or
(bad)
push
sti
(bad)
lahf
jno
push
sub
cmp
fsubr
mov
cs
loop
mov
call
mov
sbb
icebp
xchg
add
stos
mov
jns
les
icebp
dec
xor
ffreep
inc
out
adc
icebp
inc
or
mov
lods
xchg
sub
mov
fnstcw
pop
dec
pop
std
or
(bad)
sub
sar
out
pinsrw
test
xor
xor
sub
loopne
or
ins
test
adc
jg
fdiv
stos
push
daa
mov
mov
push
inc
shl
popf
mov
fdivr
add
dec
lods
cmp
cld
stos
inc
cmp
xor
mov
je
in
sbb
aam
call
retf
shl
sbb
sub
pop
add
cmp
xor
repnz
xlat
pop
xchg
sahf
pop
lahf
pop
sbb
fwait
push
inc
and
jp
addr16
cmp
ret
sti
mov
fstp
das
add
imul
xor
xchg
dec
lea
pop
pop
push
lock
aas
xor
ret
rcr
out
pop
cmps
or
adc
xchg
dec
push
and
or
lahf
and
sbb
push
call
or
pop
dec
xchg
iret
movs
lods
cmc
sub
fild
push
je
cmp
rcr
into
jne
int3
mov
cmp
xchg
or
repnz
retf
imul
inc
sbb
stos
fcomp
aas
loop
(bad)
xlat
loope
jb
loop
sub
jg
movs
shl
pop
xchg
xor
adc
arpl
enter
or
push
hlt
adc
loope
xor
in
ror
inc
or
xchg
and
fidivr
fcom
inc
ret
nop
dec
lods
xor
xor
push
cmp
xor
sbb
enter
jae
or
in
sbb
and
loopne
push
fldenv
xor
inc
cs
adc
xor
add
call
clc
cwde
mov
xor
sbb
cld
pop
pop
push
jge
retf
lock
cmp
add
pop
sub
mov
pop
pop
lock
and
pop
hlt
xchg
enter
or
add
add
jg
sbb
sub
int3
mov
sbb
jo
ins
add
adc
xchg
add
fist
inc
aaa
je
fsubr
and
dec
enter
stos
cld
mov
xor
mov
nop
mov
cmp
pusha
push
cmp
cmp
inc
in
cmps
cwde
jno
push
push
mov
xchg
in
xchg
mov
push
int3
pusha
push
pop
aam
sbb
pusha
pushf
in
inc
rol
mov
mov
add
xchg
arpl
js
test
stos
out
loopne
push
dec
test
push
inc
adc
and
pop
in
add
out
cmp
cmp
(bad)
loopne
lea
stos
adc
test
pop
xor
add
mov
movs
add
xor
or
push
xchg
popa
(bad)
dec
inc
cs
cmps
int
sub
adc
dec
jns
pop
or
push
ds
lods
test
xchg
in
adc
sub
jge
ins
push
sbb
jmp
mov
movs
test
ja
dec
add
retf
xchg
into
xchg
and
test
ds
cwde
sub
movs
mov
pop
adc
test
(bad)
jmp
mov
out
push
hlt
sub
jmp
xchg
adc
ror
push
lock
push
cmps
inc
enter
cmp
pop
xor
int
xchg
xchg
dec
arpl
cmp
nop
(bad)
out
enter
fild
lock
pop
fmul
inc
cmp
sbb
sbb
call
leave
in
sbb
mov
mov
int
cmp
nop
es
cmps
jb
loop
push
fst
dec
dec
dec
mov
out
push
dec
mov
inc
adc
pop
stos
pushf
adc
shl
mov
or
test
sbb
add
(bad)
sbb
cli
sub
mov
cmps
dec
and
jle
imul
sbb
cmp
in
addr16
jle
shl
or
sub
aad
(bad)
retf
xchg
push
aad
ja
push
gs
enter
pop
clc
dec
imul
fimul
inc
xor
mov
jge
outs
pop
dec
dec
mov
ss
in
test
inc
outs
sti
cmp
imul
cmp
mov
enter
stos
push
jle
cdq
xor
or
jmp
mov
imul
call
and
jle
cli
jge
mov
or
popa
inc
xchg
shl
pop
xor
xchg
(bad)
push
push
dec
fcomi
push
movs
push
test
mov
or
mov
pop
push
or
cmps
mov
retf
retf
in
adc
push
test
mov
mov
jle
fwait
push
adc
jb
or
jnp
repz
push
xchg
cmp
fcom
call
and
aam
adc
fild
adc
jne
xor
enter
push
lahf
les
cmp
xor
aas
imul
pop
xor
ret
jnp
lods
pop
cmp
fadd
inc
or
pop
shr
enter
shr
xchg
xor
inc
addr16
call
fld
mov
add
sbb
cld
sbb
or
add
sbb
push
mov
adc
jns
xchg
lds
cmp
and
scas
xor
and
aas
dec
retf
push
lahf
jnp
push
or
ins
lock
inc
jo
and
inc
fimul
sbb
and
push
or
adc
xor
pop
cmp
and
and
aaa
daa
cmp
sub
cmp
std
mov
test
addr16
pop
pop
dec
out
pushf
inc
inc
sbb
aas
pop
add
imul
mov
sub
loop
inc
adc
pop
mov
(bad)
jle
pop
shl
pop
hlt
aad
fld
das
add
cmp
adc
or
mov
addr16
inc
(bad)
in
jo
pop
add
inc
mov
add
push
clc
mov
mov
pop
or
cli
fcomp
leave
or
hlt
add
out
and
out
retf
inc
inc
adc
sub
aam
adc
xor
push
les
add
fmul
push
jl
inc
cmc
pop
stos
(bad)
push
push
sahf
mov
push
pop
test
cmp
and
jmp
loopne
jnp
or
std
fs
xchg
shl
pop
fcom
push
or
push
push
(bad)
jmp
xor
sbb
sbb
cld
add
pusha
retf
pop
xchg
add
and
aaa
and
cmp
add
aaa
out
icebp
(bad)
jecxz
adc
push
pusha
shl
sbb
loop
sbb
int3
jne
adc
add
xlat
cwde
sbb
(bad)
jnp
or
dec
out
mov
shl
popf
jecxz
icebp
pop
in
xchg
pop
sbb
pop
cdq
or
jg
sbb
mov
add
dec
sbb
dec
jl
sbb
retf
mov
adc
(bad)
and
push
xor
imul
cmps
lods
pop
adc
push
pop
mov
sub
fisubr
add
call
cmps
outs
es
(bad)
and
and
sbb
lds
and
pop
inc
xor
cwde
adc
int3
ror
pop
dec
sbb
scas
pop
loopne
sub
popa
add
nop
in
mov
int3
mov
test
xor
jg
push
add
cs
jg
push
xor
cmp
popf
not
and
fimul
lods
push
pusha
or
jnp
push
imul
mov
(bad)
and
aas
popf
outs
int3
adc
mov
pop
popf
(bad)
pop
icebp
pushf
shl
les
retf
fwait
je
in
cmp
ins
push
(bad)
shr
imul
daa
dec
in
loop
push
data16
jno
inc
icebp
dec
aam
xor
pop
not
cmp
dec
stos
mov
push
or
push
repz
mov
jo
aad
adc
pop
mov
xlat
(bad)
mov
icebp
js
cmp
push
inc
or
movs
mov
aaa
rcl
cmp
dec
pop
adc
inc
cmp
(bad)
push
sbb
cdq
jno
pop
out
loopne
and
mov
std
jb
mov
stos
scas
push
add
(bad)
jl
out
mov
inc
mov
dec
ficom
stos
das
and
or
dec
sbb
mov
dec
and
pusha
mov
sbb
loopne
clc
mov
jne
iret
jl
and
pop
in
jmp
or
out
dec
(bad)
stos
aas
mov
mov
add
xlat
aaa
loope
sub
sub
inc
push
adc
cmps
xor
and
cmps
ins
jmp
shl
(bad)
add
stc
imul
pop
shr
call
imul
xor
add
call
loop
lods
pusha
retf
icebp
cmp
aam
sti
sbb
adc
and
aas
pop
fld
imul
push
sbb
sbb
sbb
dec
aas
dec
or
dec
cmp
dec
ins
rcr
test
mov
test
pop
iret
or
cmps
push
jl
pop
outs
stc
inc
mov
es
cmps
push
sub
or
mov
pop
mov
ret
and
push
loope
(bad)
pop
in
hlt
adc
in
bound
mov
or
xchg
mov
push
or
mov
stos
push
adc
xor
pop
add
push
push
dec
add
test
cmp
pop
into
jmp
fdivr
mov
out
movs
push
push
pop
xor
xchg
jge
dec
rcr
pop
push
(bad)
push
adc
mov
cmps
push
jp
call
fiadd
icebp
jmp
and
push
out
fsub
(bad)
fnstcw
sub
jp
mov
mov
xor
es
push
dec
xor
add
or
add
xchg
adc
(bad)
add
push
mov
mov
aaa
push
sbb
data16
outs
dec
and
and
add
shl
sub
mov
stos
bound
pop
or
push
sbb
mov
jbe
je
xchg
sahf
daa
push
movs
cmp
dec
jne
into
ror
inc
into
enter
dec
movs
add
or
sub
sub
push
xchg
sar
test
call
inc
or
cmp
lahf
mov
icebp
adc
adc
pop
sub
push
sbb
push
add
pop
sub
loop
dec
jl
pop
nop
ror
mov
mov
inc
add
fcomp
xchg
(bad)
adc
or
xchg
mov
sub
inc
push
and
stos
das
mov
push
pop
pop
nop
adc
sub
loopne
aas
dec
mov
inc
in
dec
repz
or
jo
push
call
loopne
scas
imul
mov
rol
xor
jge
pushf
dec
inc
xchg
jle
sub
or
dec
sbb
dec
dec
mov
mov
mov
mov
cmps
cmp
lods
in
ins
mov
jne
call
out
cwde
fsub
xchg
push
sahf
or
pop
cmp
sbb
mov
ficomp
cmps
aaa
jnp
das
out
push
xchg
sub
icebp
and
cld
jmp
jno
and
adc
fsubrp
ud2
sbb
push
mov
sbb
stos
rcl
outs
je
jne
mov
mov
aaa
pusha
cmps
mov
push
clc
mov
jecxz
imul
aad
add
or
add
and
push
lods
xchg
push
scas
adc
icebp
mov
sub
arpl
push
or
sbb
fnstenv
arpl
sbb
mov
test
in
push
mov
ins
inc
mov
mov
pop
adc
jmp
cmp
cdq
mov
sbb
add
(bad)
inc
stos
sub
gs
xchg
retf
jg
mov
or
add
ret
xchg
xor
cmp
loop
push
in
int3
sub
(bad)
aas
mov
cld
fcom
xor
das
addr16
dec
icebp
dec
dec
idiv
jg
xchg
shr
adc
or
enter
test
je
retf
int3
repz
cdq
int
sbb
jl
adc
mov
cli
retf
lods
xchg
jo
das
xchg
aam
imul
mov
call
pop
daa
shl
xor
pop
mov
push
push
(bad)
xchg
aad
lods
into
or
cmp
push
mov
and
je
xor
ja
pop
mov
cmp
mov
fwait
pop
fisub
inc
out
in
or
rcl
sub
inc
pop
lea
pop
into
pop
add
sbb
leave
adc
popa
mov
pop
pusha
fcom
jge
xor
mov
push
mov
add
stos
mov
(bad)
popf
push
add
mov
leave
cwde
add
stos
ror
cmp
and
sbb
jmp
xchg
xchg
mov
imul
add
imul
push
add
add
push
sub
data16
fmul
push
out
cld
imul
pop
or
stos
adc
(bad)
pushf
pop
scas
pop
icebp
pop
mov
shl
pop
jb
add
mov
jle
loopne
stos
dec
push
lds
mov
push
fcomp
and
(bad)
push
retf
fldcw
adc
adc
scas
add
int3
arpl
pop
call
sub
movs
dec
jne
stc
or
movs
push
jmp
ret
ds
bound
loopne
(bad)
sbb
xchg
in
inc
sub
or
pop
cld
pop
pop
sbb
and
aad
(bad)
push
test
jne
lea
jle
sub
packssdw
(bad)
sbb
cmp
jns
and
or
pop
pop
bound
(bad)
mov
inc
jle
jp
adc
push
inc
test
lods
add
rcr
in
dec
ror
popf
or
fsub
adc
or
pop
add
xor
push
and
mov
mov
and
dec
loope
or
int3
stos
enter
in
movs
mov
das
xchg
sub
icebp
push
pop
mov
nop
out
ror
jg
lock
punpcklbw
or
mov
(bad)
lods
inc
mov
dec
xchg
fwait
push
in
ins
or
sti
jmp
push
xchg
mov
push
xchg
push
pop
mov
fwait
dec
test
jp
lods
mov
popa
cs
mov
jl
fbstp
aam
or
popa
sbb
test
das
and
pop
test
js
pop
sbb
sub
cwde
or
jne
sub
or
icebp
xor
pop
mov
(bad)
loopne
into
dec
push
rol
fst
sbb
in
pop
hlt
sub
sbb
pusha
mov
mov
dec
or
dec
arpl
push
retf
div
sub
xor
push
lock
not
add
push
(bad)
pop
pushf
push
stos
xor
xchg
iret
adc
adc
iret
retf
js
add
xor
xchg
mov
push
cli
mov
push
sbb
push
cdq
xchg
mov
addr16
ss
aaa
push
jle
adc
mov
pop
pop
xor
push
or
sbb
sub
cmc
fwait
aas
inc
jl
ins
mov
push
push
cli
in
sub
fidivr
call
mov
and
dec
in
lods
inc
lods
sbb
sbb
sti
sbb
dec
sbb
in
fsubr
nop
jno
retf
jp
fstp
dec
int3
out
das
push
mov
icebp
push
jns
mov
cmp
cmp
mov
jp
sbb
nop
cmp
mov
fwait
ret
sbb
jp
stc
cs
adc
pusha
or
out
out
or
outs
inc
adc
sbb
retf
rcr
mov
fcomp
data16
add
or
call
or
xchg
cmp
mov
and
pop
xor
pop
push
or
xlat
retf
inc
and
daa
jmp
test
pop
or
inc
jae
adc
fld
inc
jb
and
sub
out
inc
lfs
test
sbb
test
dec
sub
das
out
push
push
push
mov
push
xchg
dec
sub
cmp
fld
stos
in
mov
test
test
mov
cmp
sbb
sub
mov
adc
iret
dec
inc
pop
adc
ret
outs
or
xchg
push
pop
or
lods
or
je
add
fcom
test
loop
dec
mov
or
cmp
sub
(bad)
retf
push
adc
or
xor
mov
inc
sub
nop
dec
add
dec
xor
jae
push
loopne
dec
and
xchg
pop
nop
push
xor
mov
lods
inc
dec
test
js
push
mov
sub
add
jmp
push
ds
mov
xchg
pop
or
or
jmp
push
ins
xchg
cwde
sbb
xchg
mov
shl
and
jge
sbb
pop
pushf
xor
sbb
xor
int3
imul
ins
jmp
xchg
mov
test
jg
cmp
mov
jmp
sbb
shl
add
addr16
into
or
xchg
and
adc
sub
scas
pop
or
addr16
jns
or
mov
fisub
cmps
push
hlt
jp
sub
lods
sbb
std
pop
ret
xor
cwde
sub
ins
je
push
imul
mov
lods
jo
js
mov
and
in
fwait
xchg
pop
mov
pusha
sbb
ror
dec
fisubr
loope
sub
mov
dec
mov
pop
lods
add
sub
(bad)
sbb
dec
xor
jl
cwde
iret
mov
movs
nop
push
pop
xchg
mov
add
les
test
mov
mov
or
cld
ins
and
ret
daa
cmps
sbb
xor
pop
out
push
ss
pop
sub
mov
cmp
push
xor
or
call
fs
sub
cs
push
ss
add
pop
dec
outs
adc
nop
outs
push
jge
pop
xchg
mov
and
sub
icebp
test
adc
push
sahf
inc
cli
add
(bad)
(bad)
leave
cmp
fcomp
xchg
jbe
mov
add
into
sub
pop
int3
inc
mov
cdq
jnp
xor
cmc
push
xchg
fsub
push
jno
jo
lods
jnp
pop
sub
jnp
mov
lods
push
rcl
mov
push
(bad)
(bad)
push
imul
mov
sbb
pop
sub
lods
xchg
inc
push
dec
pop
sub
push
mov
xlat
push
cmp
jno
inc
push
dec
add
lods
cmc
push
retf
xchg
xchg
inc
mov
cmps
cmp
bound
push
or
push
cwde
xor
(bad)
push
mov
es
mov
xchg
sbb
lods
es
xchg
mov
and
(bad)
sub
pusha
neg
call
imul
inc
xacquire
ins
push
push
push
icebp
addr16
inc
data16
aaa
mov
dec
lods
mov
pop
stos
test
pop
fiadd
or
(bad)
adc
adc
pop
and
jg
loopne
cmc
popf
push
movs
(bad)
out
mov
fadd
das
es
xor
cmp
jmp
ret
imul
fcomp
mov
aaa
in
(bad)
cli
push
push
aas
addr16
in
mov
int3
popf
and
cmp
aaa
shl
lds
adc
adc
ret
xchg
sub
mov
mov
stc
jne
mov
movs
js
in
sbb
jl
mov
sbb
pop
popf
mov
adc
or
mov
mov
mov
pop
sbb
orps
xor
xor
dec
push
fbstp
mov
adc
dec
xchg
mov
in
mov
enter
mov
(bad)
(bad)
or
pop
xor
xchg
dec
imul
fisubr
out
sub
fiadd
imul
inc
pop
pop
(bad)
xchg
mov
(bad)
fisttp
and
sbb
pushf
stos
pop
jge
loopne
js
aad
repz
jbe
inc
movs
shl
sbb
mov
adc
popa
cwde
adc
popa
xor
and
std
aaa
jbe
jne
add
jmp
inc
xchg
add
or
dec
fist
test
cmp
push
shl
(bad)
in
pop
adc
or
mov
xchg
jno
dec
xchg
pop
aam
adc
mov
sbb
aam
cmp
loope
scas
cmp
retf
fild
dec
int3
sub
add
int3
mov
int3
daa
icebp
(bad)
aad
or
mov
lods
aaa
push
adc
xor
push
pop
mov
adc
push
lahf
ret
push
(bad)
mov
xchg
inc
or
add
xchg
sub
rcl
mov
mov
add
jg
std
pop
imul
sub
add
or
or
and
and
push
mov
fwait
idiv
in
add
sbb
das
sbb
(bad)
fnstsw
nop
mov
and
push
or
sbb
push
push
call
retf
dec
lahf
aaa
popf
cmp
cwde
data16
and
xchg
fnstcw
push
push
aam
sbb
pop
es
push
push
int3
pusha
lods
(bad)
and
dec
je
add
sti
adc
add
xchg
mov
mov
fidiv
out
sbb
add
rcl
jmp
cmps
in
fild
outs
es
mov
push
or
jmp
push
inc
retf
pop
jle
dec
jmp
cmc
hlt
xor
fistp
mov
jae
mov
sahf
aam
popa
js
add
in
(bad)
jl
imul
inc
repz
adc
and
mov
movs
dec
sbb
lods
in
cmps
sbb
dec
xchg
rol
fmul
and
jns
or
idiv
dec
je
inc
clc
fwait
adc
pop
or
inc
and
loope
mov
sti
and
sbb
add
icebp
jne
loopne
mov
jmp
js
outs
int3
jno
push
loopne
adc
into
sbb
popf
adc
pop
pop
aaa
inc
fwait
dec
mov
push
mov
test
mov
pop
xor
je
adc
mov
add
loop
popf
fsubp
jne
fist
xor
lods
sbb
add
test
mov
lods
push
cmc
or
push
dec
je
sub
imul
pop
mov
adc
mov
push
mov
in
add
sbb
mov
mov
lods
mov
push
pop
addr16
mov
mov
(bad)
adc
inc
and
test
std
add
xchg
push
pop
aam
call
push
sub
xchg
or
jge
mov
adc
xor
cmp
sub
ja
fs
inc
inc
mov
setb
push
sub
(bad)
fsubr
dec
xchg
rol
xchg
push
mov
int3
mov
push
mov
mov
aad
hlt
mov
or
nop
cmp
and
outs
(bad)
(bad)
adc
mov
push
push
add
xor
lods
scas
mov
ins
ins
inc
jae
sub
push
adc
in
sbb
cmp
icebp
push
xchg
mov
scas
push
push
pop
jmp
cli
cmc
add
(bad)
lods
in
test
(bad)
mov
lock
xor
retf
call
ds
aad
sbb
lock
inc
icebp
jmp
xchg
lea
idiv
xchg
in
and
repnz
fisttp
movs
mov
call
and
out
mov
push
bound
outs
xor
push
pop
and
sbb
out
sbb
inc
pop
push
sub
adc
push
sub
dec
jge
inc
inc
std
outs
out
inc
adc
fnstsw
add
shl
dec
or
jl
cld
enter
rcl
xchg
cdq
push
fwait
jmp
enter
add
das
clc
dec
icebp
lahf
(bad)
xor
sbb
adc
push
(bad)
mov
push
or
cmp
adc
inc
or
lahf
clc
into
jecxz
iret
push
mov
(bad)
sub
xor
lea
and
or
fiadd
ds
outs
in
jle
(bad)
adc
or
lods
mov
test
mov
pop
or
push
int3
sbb
fild
outs
ins
mov
jl
aas
lock
loope
xor
sub
pop
push
test
sub
sub
cmps
clc
pop
sbb
pop
sbb
add
mov
shl
mov
and
cmp
mov
mov
jbe
xor
pop
je
sbb
popf
push
pop
enter
sbb
add
cmp
clc
lock
stos
es
sbb
in
(bad)
xor
retf
or
repz
jbe
in
push
dec
mov
(bad)
add
das
jmp
js
jb
imul
sti
fild
mov
adc
mov
lahf
mov
cmc
jp
or
movs
cmps
in
mov
cdq
xchg
lahf
ins
lea
stc
pop
(bad)
jmp
(bad)
and
je
sbb
xor
loopne
pushf
jp
in
jge
stos
sbb
inc
addr16
xor
aaa
xchg
mov
rcl
ins
jne
or
mov
sbb
fwait
sbb
mov
xchg
push
js
or
sbb
sbb
adc
jle
or
xchg
popf
fistp
lods
addr16
xchg
ficom
sbb
dec
ins
ins
sbb
mov
fsubrp
pop
mov
adc
jbe
jmp
int3
out
sbb
fldenv
pop
not
xor
dec
aad
shl
push
inc
stc
int3
inc
in
cmps
xlat
ins
ins
movs
out
pop
aad
push
pop
loop
pushf
(bad)
jg
or
dec
lahf
pop
push
mov
inc
jno
inc
bound
mov
jo
push
xchg
ja
inc
sbb
je
pop
xor
aaa
inc
cmc
inc
fadd
sti
cmp
test
or
adc
xor
push
pop
push
xor
jle
jmp
or
ins
hlt
(bad)
in
gs
push
mov
loopne
push
xor
push
push
or
cdq
fstp
call
dec
in
test
mov
jns
shr
xchg
call
xchg
les
ja
fimul
or
fmul
push
aas
enter
test
loopne
ja
xchg
ins
add
rcr
jmp
pop
mov
xor
js
or
sbb
adc
lods
sbb
add
mov
int3
xchg
mov
lods
adc
cmp
xchg
fcomp
ja
aam
sub
mov
jmp
lods
xchg
aam
push
sbb
shl
pop
add
mov
cmp
rcl
mov
dec
or
lahf
mov
mov
sbb
add
jo
add
xor
xor
in
or
adc
inc
inc
push
jmp
test
xor
test
inc
je
ins
in
es
mov
xchg
sub
loopne
inc
mov
and
addr16
in
movs
dec
add
(bad)
sub
and
jns
and
js
data16
or
xor
cdq
loopne
add
lods
or
inc
inc
or
call
aam
sbb
pushf
aaa
jmp
mov
push
pushf
je
dec
scas
push
jecxz
in
imul
adc
xor
or
retf
(bad)
push
stos
cli
and
xlat
int3
dec
or
pop
int3
jmp
push
pop
stc
xor
aaa
sub
movs
mov
call
push
pop
cmp
jmp
cdq
lock
xchg
xchg
in
sbb
pop
dec
ror
fistp
loopne
leave
loopne
push
cmp
adc
(bad)
xchg
and
lods
add
bound
push
mov
add
push
das
add
je
pop
xor
inc
and
repz
movs
adc
into
js
push
push
add
mov
aam
hlt
xchg
xor
xor
jnp
cwde
and
add
(bad)
push
pusha
(bad)
lock
bswap
mov
cmp
sar
sub
lock
xor
clc
jg
jne
xor
sbb
out
inc
lds
shl
in
sbb
add
aas
mov
add
out
(bad)
add
lock
xor
push
mov
and
bound
sub
xor
outs
test
inc
fs
mov
jle
rcr
jmp
lds
(bad)
and
rol
pushf
inc
or
stos
pusha
or
(bad)
cwde
pop
jns
xchg
loope
stc
sbb
js
adc
inc
test
sti
fistp
mov
test
mov
mov
(bad)
sbb
cs
cmc
pop
je
or
sub
mov
jae
rcr
xor
pushf
mov
out
pop
js
add
pop
pushf
aam
or
sub
ds
xor
xor
sub
fwait
ins
sbb
inc
mov
adc
int
ret
aaa
sti
pop
adc
dec
sub
xor
loopne
xor
in
jmp
push
cmps
call
pop
pop
adc
xchg
sbb
sbb
or
pop
ret
xchg
repz
jno
sbb
stos
adc
push
adc
sbb
xchg
in
cwde
loop
retf
fs
or
mov
out
fisttp
sbb
cmc
cmp
mov
lahf
mov
or
mov
or
sbb
iret
pop
adc
push
xchg
lea
aaa
(bad)
mov
retf
pop
stc
push
lahf
or
sbb
in
aaa
jg
and
adc
sbb
push
int3
xor
sbb
mov
adc
aaa
push
gs
aas
inc
inc
retf
dec
arpl
in
sbb
ins
mov
xchg
add
retf
pop
push
inc
mov
pop
pop
or
adc
imul
add
or
sar
mov
inc
jle
sub
push
test
and
imul
je
cmp
or
fimul
pop
jl
js
push
push
sbb
lock
push
xor
push
push
push
iret
or
je
pop
xchg
shr
pop
lock
shl
xor
and
neg
cld
xor
sub
xor
cs
and
add
sbb
loopne
push
or
call
cmp
mov
in
and
inc
je
lock
xor
int3
dec
and
(bad)
push
sub
or
dec
(bad)
and
mov
add
or
je
mov
pop
push
call
std
fld
cmp
addr16
(bad)
inc
inc
or
mov
push
aad
imul
pop
loopne
jecxz
pop
jnp
in
xor
adc
imul
push
inc
adc
jmp
sub
les
(bad)
mov
shr
push
rcl
sub
sar
push
push
pop
sub
dec
jmp
sub
fsubrp
pop
sub
das
xchg
or
mov
sbb
hlt
xchg
or
ins
push
lods
dec
adc
clc
pop
or
sub
or
leave
loope
mov
xchg
into
inc
jno
dec
cmp
inc
mov
(bad)
cmps
or
out
dec
sbb
mov
addr16
jecxz
ins
fld
nop
cmps
sbb
add
pop
popf
in
mov
repnz
cwde
cwde
xor
test
lods
mov
pop
hlt
add
xor
sub
(bad)
rol
xor
mov
movs
mov
dec
hlt
dec
xor
ss
arpl
nop
inc
sub
jp
mov
(bad)
iret
mov
xor
mov
loop
inc
ins
sub
sbb
lods
test
cmp
sbb
add
inc
in
inc
sbb
jo
sub
push
sbb
jb
inc
xor
jns
pop
imul
ins
dec
dec
or
test
dec
and
mov
sar
cmp
ds
cmp
adc
xor
popf
sbb
sbb
in
in
sbb
push
jno
(bad)
call
pop
jp
add
and
inc
sbb
fmul
or
fild
movs
stc
jmp
enter
fiadd
mov
add
pop
dec
arpl
(bad)
aas
jmp
adc
pop
adc
push
dec
pop
or
mov
adc
jmp
call
or
arpl
in
mov
add
pop
icebp
or
in
aas
dec
in
cld
movs
jg
xchg
mov
aad
and
inc
or
mov
mov
push
fistp
xor
push
fild
pop
in
jl
inc
hlt
stos
fs
mov
xchg
adc
xor
xchg
(bad)
cli
cmc
xchg
inc
mov
add
xchg
in
xor
pop
fst
ret
pusha
not
test
jbe
imul
xchg
mov
or
ss
ficomp
(bad)
mov
jno
out
mov
cs
call
dec
or
mov
adc
js
in
push
popf
mov
xchg
idiv
adc
mov
cmps
(bad)
xor
push
dec
mov
ds
push
add
imul
pop
bound
pop
sub
xchg
repz
push
das
lods
shr
imul
and
or
stos
jp
mov
pop
xor
dec
dec
jb
jmp
jmp
ins
clc
add
add
adc
cdq
inc
out
xlat
and
cmp
aam
mov
push
add
pop
dec
hlt
int
lods
sbb
or
sub
xchg
pop
cdq
and
and
xchg
and
sbb
out
popf
rcr
adc
hlt
xchg
jg
lock
mov
inc
xchg
and
mov
jg
stc
and
push
data16
shr
dec
ins
in
es
cdq
fcomp
mov
adc
enter
pop
xor
ss
pop
mov
test
popf
cld
scas
xor
loop
(bad)
cli
test
int3
sbb
push
cmp
sbb
dec
add
je
inc
xor
dec
in
jmp
adc
jmp
scas
ret
lods
adc
dec
enter
in
xor
add
fld
outs
call
push
call
int3
jnp
add
push
mov
dec
jge
(bad)
and
adc
ins
es
xchg
out
pop
push
out
add
sbb
pop
pushf
xchg
and
xchg
inc
cmp
test
pop
inc
mov
in
sbb
das
inc
pop
xchg
mov
sub
xchg
dec
mov
or
cmp
aam
inc
push
jmp
in
push
addr16
aas
inc
adc
pop
adc
sahf
xor
shl
cmp
out
jmp
fcom
fdivr
or
ins
push
in
push
mov
enter
not
cmp
popf
in
fnstenv
into
mov
aaa
push
pop
adc
call
out
jne
push
or
dec
or
sub
push
dec
ja
push
mov
outs
and
pop
jmp
inc
pusha
out
jmp
xor
or
dec
sbb
pushf
scas
test
test
sbb
sbb
mov
jge
adc
pop
fisttp
loopne
mov
pushf
sub
pop
add
add
pop
in
xchg
les
js
push
mov
scas
retf
jb
pop
and
mov
adc
dec
pop
cdq
xor
sbb
and
sub
pop
call
add
xor
mov
scas
sbb
add
inc
pop
xor
lods
sub
cmp
adc
jbe
stos
enter
stos
add
mov
mov
push
sbb
aaa
jg
add
push
jg
or
in
adc
add
ins
push
add
lods
xor
or
xlat
lods
dec
mov
and
sar
jae
add
xchg
add
lea
pop
or
xchg
lahf
or
xchg
push
jmp
jl
xchg
dec
dec
sbb
cmp
out
inc
(bad)
or
pop
sub
cmp
(bad)
repz
xchg
or
ins
add
push
adc
sub
or
out
pop
adc
push
cdq
jo
add
jmp
xlat
fsubr
add
pop
test
or
mov
adc
and
sbb
(bad)
cmc
pop
cli
fs
jmp
int3
out
pop
clc
mov
inc
or
adc
ficom
add
neg
sub
test
das
(bad)
pop
mov
push
or
out
jge
pop
push
mov
xor
cmc
mov
int3
ins
push
jecxz
sbb
arpl
inc
add
cmp
aas
sub
out
mov
pop
xor
push
cs
pop
pop
and
xor
hlt
xchg
pop
outs
ins
in
dec
push
rol
pop
push
fldcw
stc
or
aam
jp
sbb
inc
add
loope
outs
dec
or
cmp
mov
nop
push
xor
sub
add
mov
mov
or
les
lea
inc
inc
or
sar
mov
into
aas
xchg
in
add
and
sbb
fcomp
xor
ret
pop
popf
xor
aad
fwait
add
fdiv
icebp
sub
int3
nop
cmp
out
jl
sbb
pusha
outs
sti
xor
test
jp
push
sbb
xchg
ds
dec
imul
and
xchg
or
adc
sbb
push
xor
xlat
aas
xchg
xchg
xor
mov
ret
pop
mov
(bad)
push
push
xor
mov
xor
add
mov
push
ds
push
jl
(bad)
mov
cmp
jge
dec
mov
test
aas
cmps
clc
and
pushf
xchg
mov
xchg
mov
jge
push
icebp
jns
inc
push
retf
add
xor
and
mov
xlat
dec
adc
xlat
xor
aas
jnp
sub
and
sbb
call
adc
jne
xor
inc
adc
push
sub
js
or
sahf
jb
pop
cmp
pop
pushf
jecxz
pop
es
ins
scas
add
dec
fisttp
lock
xchg
hlt
pop
push
in
out
xchg
inc
push
adc
jmp
cli
jle
test
sahf
dec
xor
inc
adc
repz
pop
cmp
or
xchg
push
jb
cmp
jge
xchg
mov
push
icebp
inc
mov
aas
cmp
xor
jmp
arpl
sbb
cmp
push
xor
fisttp
xchg
aas
inc
adc
mov
pop
popf
add
imul
xor
cmp
adc
clc
inc
cmp
xlat
dec
xor
dec
punpcklwd
setp
repnz
in
sbb
and
add
push
dec
ss
pop
pop
imul
sbb
xchg
retf
into
inc
dec
jmp
push
in
push
in
int
in
inc
mov
sbb
popf
cwde
cmp
push
cdq
sub
push
sbb
or
clc
cs
dec
push
jno
jo
icebp
jbe
add
outs
cli
dec
add
(bad)
mov
pop
jo
aad
and
xor
mov
pop
dec
leave
cmps
fist
ss
cld
sar
adc
ror
sbb
mov
and
mov
bound
bound
mov
nop
cwde
call
cwde
call
pusha
dec
inc
fld
pop
pop
stos
push
push
mov
or
loopne
xor
aad
fisubr
dec
inc
ret
push
push
sub
xor
sub
inc
fs
push
or
jmp
ins
jnp
or
shr
dec
fsub
and
and
pop
cmp
jl
sub
push
xor
push
push
shr
or
cmp
sbb
push
retf
(bad)
call
sbb
adc
jmp
stos
aas
or
or
(bad)
jo
mov
imul
imul
adc
je
push
dec
adc
aaa
sub
test
pop
repnz
repnz
imul
and
cmp
fstp
cdq
jno
int3
mov
mov
inc
inc
sbb
(bad)
add
test
stos
out
pop
xchg
mov
das
idiv
pop
leave
add
xchg
push
sbb
add
xor
clc
mov
inc
cli
leave
jp
xchg
mov
loop
adc
fiadd
or
sbb
mov
fcmovbe
pop
jne
repnz
sti
stos
mov
cld
xor
or
add
rol
pop
mov
inc
pop
push
mov
movs
nop
test
pop
ja
jmp
lock
je
sbb
add
clc
inc
loopne
xor
mov
jb
or
cdq
aaa
ror
shl
fnsave
out
repnz
fst
pop
push
(bad)
xor
scas
movs
popf
(bad)
adc
test
bound
je
pusha
xor
test
popa
(bad)
aam
push
test
xchg
push
mov
icebp
xor
repz
jecxz
dec
sub
lahf
loope
and
dec
add
inc
in
xor
pop
stos
daa
or
xor
xlat
(bad)
inc
sbb
or
xor
add
aaa
jo
mov
xchg
mov
adc
push
faddp
inc
push
jmp
js
add
add
icebp
sbb
aas
inc
adc
dec
fisubr
outs
lock
daa
pop
jae
dec
add
test
xor
aad
out
into
(bad)
bound
mov
cli
adc
inc
fwait
ror
cld
or
sbb
dec
push
fadd
loope
and
(bad)
sar
fwait
repz
mov
jno
add
dec
or
loopne
pop
add
repz
in
mov
jno
and
aaa
push
push
(bad)
imul
sub
sahf
out
imul
sub
xchg
push
mov
dec
(bad)
mov
leave
and
jo
sub
push
fisub
jg
jg
pop
push
inc
data16
sub
pop
push
xchg
arpl
push
lods
out
pushf
arpl
mov
js
and
jmp
ds
sbb
retf
jne
fistp
inc
xchg
sbb
cmp
xor
jmp
jne
cmp
lahf
jmp
mov
jne
push
ss
aas
in
sub
adc
inc
push
es
nop
pop
pop
xor
jle
xchg
pop
cdq
sbb
adc
xor
das
push
pop
stos
xor
clc
mov
push
mov
jecxz
sbb
xchg
fcom
push
cmp
mov
fadd
xor
sahf
pop
pop
xor
cmp
xor
add
cmp
out
das
add
push
and
push
ficom
xchg
in
retf
inc
outs
or
fst
cmp
inc
xor
cwde
push
loop
add
cmp
xchg
fidivr
lods
sbb
add
sbb
setae
sbb
test
js
jae
sub
mov
pop
sar
add
cdq
fcmovu
(bad)
add
or
adc
push
lods
xor
retf
mov
pop
popf
and
lds
inc
mov
pushf
and
int
pop
ins
mov
xor
mov
mov
ret
cmp
or
ins
and
sub
or
popa
loope
add
xchg
in
jns
add
imul
xchg
xchg
pusha
loope
sub
or
out
xor
xchg
xchg
pop
mov
jge
js
test
(bad)
jge
and
ret
into
dec
mov
sub
push
sub
or
(bad)
sub
and
fsub
in
addr16
jmp
pop
sbb
jl
retf
loop
mov
mov
loope
push
pop
mov
push
mov
dec
and
addr16
xor
jp
cmp
test
mov
(bad)
cmp
cs
mov
mov
mov
jb
movs
or
and
repnz
adc
cmc
jnp
push
jbe
dec
push
sbb
in
and
sbb
les
pusha
in
add
or
sbb
(bad)
push
adc
cmps
xor
arpl
cmc
fdiv
push
add
sub
adc
jns
pop
and
jae
(bad)
jl
mov
adc
adc
sbb
je
jl
xchg
ins
mov
pop
fmulp
cmp
sti
inc
dec
loop
mov
adc
idiv
push
ins
fmul
in
ins
test
inc
mov
pop
or
adc
push
add
xchg
pop
or
stos
sub
mov
or
nop
repnz
xor
sbb
repnz
cdq
nop
pop
xor
and
je
movs
or
in
lods
cwde
add
or
jle
je
sti
fisubr
inc
ret
push
int3
fs
add
lock
cmps
or
mov
inc
mov
mov
pushf
sbb
je
outs
and
cdq
test
jecxz
sbb
(bad)
xchg
sbb
aam
mov
adc
mov
pop
div
push
adc
mov
not
xor
add
add
imul
xor
pusha
sbb
imul
mov
push
not
out
xor
imul
sbb
mov
scas
ja
mov
push
add
xor
nop
sub
cld
or
fmul
outs
sti
jmp
pop
out
icebp
gs
dec
loope
adc
fisub
es
xor
cmp
jecxz
jmp
call
aas
jae
push
neg
and
dec
int3
mov
sti
dec
sbb
and
rcr
pop
addr16
xor
movs
leave
sbb
sub
int
push
inc
cmp
rcl
inc
sahf
cmp
lods
fs
ss
and
shl
js
leave
ds
in
imul
retf
inc
popw
imul
mov
sub
push
call
sbb
jo
adc
cmp
fs
imul
and
add
lea
movs
pop
or
sbb
addr16
sub
push
sbb
push
adc
push
jne
cmps
pop
add
in
or
outs
ds
or
or
mov
inc
int3
ja
push
pop
mov
add
xor
xchg
jg
and
std
movs
xchg
sbb
add
addr16
mov
push
xchg
jle
test
mov
in
add
push
iret
imul
or
mov
inc
pop
inc
mov
jp
jmp
(bad)
lods
adc
aas
rol
fistp
jb
and
push
ds
add
aas
add
outs
adc
aad
lds
pop
dec
or
cmc
sub
popa
pop
repz
sbb
dec
pop
jle
xor
hlt
jmp
push
pusha
mov
mov
fist
inc
test
outs
pushf
add
sbb
and
(bad)
add
jmp
in
jbe
cmp
sub
out
mov
shr
lods
icebp
adc
stos
retf
mov
sub
into
ds
cwde
fcmove
aad
mov
nop
(bad)
mov
std
xor
cwde
enter
imul
fistp
jb
sub
xor
je
and
adc
out
xor
pop
mov
fcmovnb
mov
loope
enter
out
adc
in
dec
ins
mov
inc
sti
or
push
push
xor
sbb
dec
xchg
adc
jae
dec
lds
xor
add
ins
mov
pop
sub
pop
call
cmp
mov
dec
stos
add
mov
sub
sbb
call
arpl
and
dec
xor
jmp
push
pop
scas
mov
fcomp
mov
mov
mov
adc
mov
lods
sub
xchg
cmp
test
fdiv
fcmovnb
push
int3
loop
mov
mov
into
sahf
jg
fdiv
mov
sub
loop
jge
shl
ret
sbb
cmp
push
pop
sbb
imul
mov
fldcw
adc
das
test
ins
cmp
cmp
aad
pop
rcl
jmp
out
mov
add
jmp
retf
shr
das
movs
cmp
aam
pop
add
mov
cmps
mov
mov
add
jmp
push
retf
leave
lods
cwde
cmp
(bad)
cmp
movs
add
imul
or
in
sub
adc
inc
sub
jl
nop
les
and
push
shl
(bad)
jns
sbb
je
or
cmp
mov
mov
rcr
lods
sbb
nop
xchg
jne
fmul
sti
pop
mov
call
mov
sbb
scas
adc
scas
sub
fisttp
inc
inc
test
dec
cmp
loopne
clc
push
xor
mov
das
repz
pop
mov
and
sbb
inc
xchg
popf
pop
hlt
in
dec
cmp
(bad)
adc
loop
xchg
ins
cmp
aam
icebp
xor
and
fadd
imul
and
xchg
sahf
pusha
(bad)
xchg
sub
xor
rcr
inc
ja
push
cmc
jge
sbb
mov
pop
or
cmp
pop
data16
mov
dec
cmp
xor
push
pop
adc
aas
mov
pop
xchg
push
mov
js
jl
cmp
xchg
(bad)
fs
push
aad
mov
je
int
mov
loopne
test
icebp
push
jb
inc
dec
call
out
dec
jl
or
ins
not
retf
or
xor
add
pop
je
adc
lods
sbb
mov
or
data16
ins
mov
lods
loop
jmp
sub
push
or
and
cmp
lock
cmp
mov
inc
fcom
imul
add
lods
xchg
and
in
mov
scas
mov
add
xchg
lods
or
out
lock
enter
push
sbb
add
adc
pop
movs
sbb
test
xchg
add
mov
or
or
(bad)
adc
add
sbb
pushf
fcom
xor
mov
xor
xchg
mov
push
mov
or
ins
mov
pop
jnp
push
cmp
inc
out
mov
and
ficomp
es
sar
add
movs
sbb
test
xchg
in
mov
cmp
aad
inc
or
out
ja
jecxz
sub
add
xor
or
(bad)
retf
int
push
add
std
mov
dec
or
sub
cdq
inc
mov
imul
inc
fnsave
lahf
mov
jg
mov
rcl
clc
in
mov
movs
jle
loop
pop
sbb
outs
scas
test
test
(bad)
sbb
movs
sti
dec
and
ret
mov
fimul
scas
lock
jne
push
fsubr
xchg
fsubr
jns
push
outs
fcmovbe
es
mov
push
push
movs
iret
push
jb
pop
and
fld
inc
dec
dec
cmps
enter
fisttp
pop
mov
push
retf
popf
(bad)
adc
inc
jecxz
movs
nop
adc
pusha
(bad)
or
pop
mov
jge
(bad)
push
movs
mov
mov
add
xchg
sbb
xchg
shl
or
or
sub
stos
push
(bad)
push
sar
mov
call
and
mov
add
sub
in
icebp
dec
jnp
jmp
push
icebp
inc
push
add
sub
cld
mov
jmp
push
lahf
pop
inc
sbb
xor
sar
fcomp
pop
or
test
popa
dec
or
push
add
cwde
pop
pop
xor
mov
add
pop
in
pop
mov
mov
loop
adc
or
xor
dec
add
test
mov
rcr
icebp
push
es
cdq
push
lods
or
jne
dec
ins
arpl
das
shr
xor
ins
mov
mov
lods
pushf
pop
shl
or
push
fisub
xor
aam
add
mov
mov
mov
cmp
cli
fucompp
hlt
ins
push
add
push
in
fcmovbe
dec
cwde
sub
xor
test
aad
push
pop
inc
dec
xor
push
or
add
or
mov
mov
ds
ficomp
and
mov
inc
mov
fisttp
jle
cmps
leave
xlat
into
and
cmps
iret
or
loop
adc
mov
dec
add
xchg
lock
ins
or
int3
aam
jo
pop
lahf
jmp
fisub
inc
sub
rcl
sub
hlt
adc
jle
cmp
outs
mov
nop
pop
xor
test
xchg
rcl
int3
push
dec
out
fsubr
mov
pop
sbb
jnp
sar
sbb
xchg
mov
ret
sub
scas
rol
fmul
mov
clc
sbb
push
mov
in
int3
leave
les
sub
test
sbb
xchg
mov
mov
clc
stos
in
dec
bswap
push
pusha
sahf
js
push
sub
rcr
sub
push
sub
ds
aad
dec
ret
ins
fcomp
(bad)
or
out
mov
pop
xchg
add
repnz
aaa
je
pop
or
aas
out
repz
sbb
imul
or
pop
pop
pop
int
or
sbb
in
sbb
hlt
(bad)
and
ins
nop
pop
hlt
pop
(bad)
retf
mov
repz
sbb
out
rcl
xor
lods
mov
fistp
jb
sahf
inc
lods
xor
xchg
popa
xor
fild
adc
xchg
pop
jle
pop
pop
nop
cmp
dec
call
sbb
imul
xchg
jge
jl
out
test
(bad)
int3
mov
fcom
xor
loopne
dec
xchg
push
cmp
enter
mov
push
sub
mov
int3
dec
add
cmc
inc
aad
jge
lock
dec
xchg
cmp
mov
xor
pop
or
sbb
mov
xor
mov
or
push
push
dec
sbb
or
hlt
cmp
pop
sbb
and
(bad)
(bad)
lods
sub
fisttp
rdpmc
pop
test
xchg
pop
sbb
icebp
xor
mov
sub
add
adc
cmp
adc
out
cmp
jp
or
sbb
pop
nop
sub
xchg
mov
daa
loop
mov
xchg
mov
push
cld
enter
dec
and
pop
dec
call
xor
dec
idiv
cmp
pop
mov
push
add
ins
js
push
cmp
daa
in
jp
pop
or
ja
jmp
jae
arpl
inc
xchg
mov
retf
sbb
sbb
add
clc
loop
xchg
ror
push
mov
cmp
aaa
jecxz
jmp
outs
mov
pop
lds
(bad)
dec
sbb
div
mov
lds
stos
dec
test
fisub
mov
push
add
pop
fdiv
mov
fild
shl
jne
js
pushf
lock
inc
imul
into
push
repnz
mov
push
jg
jmp
icebp
push
lahf
cwde
cwde
es
or
(bad)
xchg
cmp
sbb
neg
sbb
retf
pop
add
sbb
push
stc
ja
out
inc
push
jmp
push
mov
sbb
jmp
daa
mov
lods
ss
sbb
push
js
cmp
jae
loope
adc
rol
cmc
push
sub
ret
dec
sar
adc
outs
push
arpl
dec
push
jl
push
test
cdq
out
or
jno
loop
xor
cmp
add
js
dec
and
inc
add
daa
shl
mov
sub
cld
jmp
push
cmp
lahf
sub
add
int3
mov
and
or
pop
cdq
es
pop
leave
or
or
aad
mov
mov
dec
in
adc
sti
adc
push
push
mov
mov
and
leave
int3
cmp
or
mov
pop
jb
aaa
cmc
mov
in
in
sbb
xor
aam
add
rol
or
inc
sbb
mov
lahf
pop
mov
data16
push
mov
shl
inc
mov
adc
jno
es
das
pop
pop
mov
or
mov
cdq
clc
rcr
dec
cmc
cmp
jb
add
cmp
fs
pop
in
adc
fimul
cmps
add
inc
pusha
cmp
xor
cwde
adc
data16
in
fs
repz
mov
mov
and
inc
in
inc
sbb
int3
jge
or
push
jns
or
sub
jnp
xchg
push
das
inc
sbb
push
push
cmp
dec
jne
sub
fdivr
mov
or
or
das
fisubr
or
ins
xchg
mov
push
out
pop
mov
repnz
push
push
hlt
cmp
pop
cmp
add
pop
in
jecxz
sbb
sbb
inc
pop
in
pusha
pop
jecxz
rcl
or
pop
mov
xchg
mov
add
xor
adc
sti
adc
cdq
aam
mov
nop
gs
lock
inc
cld
cwde
retf
mov
icebp
fcmovne
and
inc
in
in
sbb
(bad)
mov
cmp
fisubr
das
outs
mov
shl
dec
sbb
stc
inc
push
fsub
adc
inc
or
shl
scas
xor
add
jne
dec
xchg
cmp
adc
in
pusha
mov
add
and
push
mov
ins
jb
fwait
jne
retf
mov
hlt
in
add
int3
sub
jge
push
pop
or
fwait
add
push
lahf
cmp
xchg
out
lahf
or
xor
mov
mov
dec
add
mov
push
icebp
call
push
in
adc
es
xor
mov
or
loop
xlat
push
mov
fdivr
and
imul
dec
mov
add
jge
xor
and
and
(bad)
bound
neg
enter
sub
sbb
mov
lock
sub
(bad)
cmp
pop
push
fmul
cmp
adc
sbb
dec
loop
cmp
lods
cmp
jb
xor
xor
dec
pop
sub
adc
xchg
in
test
push
mov
and
jo
pop
loopne
xchg
int3
sub
inc
stos
scas
inc
lock
gs
dec
aaa
dec
das
sub
icebp
neg
movs
jno
jns
dec
outs
or
push
sbb
push
adc
adc
out
mov
outs
cmps
pusha
pop
push
(bad)
pop
cmps
xor
(bad)
fsub
rol
mov
push
repz
gs
int
push
and
(bad)
pusha
lahf
repz
sbb
int
sbb
popa
push
imul
ja
test
mov
repz
pop
or
pop
imul
xchg
push
pop
add
mov
cwde
jmp
jbe
mov
push
ins
sbb
push
bound
mov
add
or
xchg
pop
push
ins
push
or
push
mov
fcomp
test
imul
data16
hlt
in
inc
cdq
mov
dec
loope
sub
push
mov
sbb
imul
sub
ins
dec
in
add
clc
repz
add
mov
jnp
dec
sbb
push
imul
xchg
(bad)
(bad)
add
shl
sbb
or
pop
int
jnp
push
lods
adc
ins
add
fs
dec
sbb
mov
ret
test
in
jmp
retf
ss
cmp
push
adc
pop
rol
or
push
jmp
cmp
xor
cmp
push
xor
test
mov
sub
cli
lods
inc
push
add
push
js
pop
mov
dec
add
xchg
popa
dec
pop
dec
and
popf
movs
sub
imul
pop
jle
cld
mov
loopne
xchg
js
arpl
outs
mov
aaa
mov
(bad)
(bad)
int3
push
imul
jbe
test
sbb
adc
ja
cmps
pop
cmp
das
inc
add
cld
lods
mov
inc
in
pop
push
or
and
loopne
add
aaa
or
sbb
adc
push
push
ret
pushf
or
popf
pop
mov
jae
lock
push
sub
fcom
fisubr
dec
nop
popf
pop
pop
inc
ret
test
add
xor
and
cmps
mov
sbb
adc
xor
sbb
adc
or
imul
fild
mov
out
jno
adc
in
mov
int3
pop
jnp
sbb
xor
daa
xor
inc
or
nop
jl
or
neg
push
xchg
arpl
push
push
movs
cmp
pop
mov
mov
in
nop
xor
setno
add
mov
dec
jp
mov
jmp
das
into
inc
adc
pop
add
xchg
add
stos
ss
repnz
adc
in
jecxz
popf
add
sub
dec
cmps
pop
mov
jae
(bad)
pop
ins
inc
xchg
neg
adc
adc
jb
sub
mov
movs
cmp
pop
sbb
packuswb
push
scas
pop
sub
leave
shl
adc
adc
or
cmp
push
push
int
movs
push
fst
sti
lds
mov
stos
xor
inc
jecxz
mov
jmp
mov
add
lods
in
ja
push
inc
repz
icebp
mov
jb
fdivr
inc
aaa
in
jnp
pop
stos
mov
das
enter
sbb
xchg
add
pop
cmp
xchg
shl
sub
(bad)
jmp
push
and
mov
sub
mov
sti
js
cmp
fdivp
cmc
pop
sbb
or
(bad)
int3
and
fild
cmps
or
and
xchg
or
xchg
inc
retf
pop
or
xor
sub
ja
pop
call
jl
jg
mov
add
scas
jmp
inc
(bad)
push
(bad)
stos
fs
pop
scas
sbb
xchg
or
lds
sbb
xchg
or
and
imul
sub
out
pop
shr
dec
dec
dec
aad
mov
and
pop
add
cdq
and
push
sbb
xchg
dec
sub
and
mov
cmp
inc
adc
push
daa
dec
sub
je
popa
mov
push
jmp
std
sbb
aam
ja
daa
pop
or
icebp
xor
xchg
cmp
jmp
lods
push
aam
lds
xor
sbb
mov
dec
cmp
jmp
imul
wrmsr
add
(bad)
loopne
lock
push
mov
into
ror
test
sub
and
jp
bnd
add
fmul
and
cli
sub
add
call
mov
movs
inc
mov
inc
xor
dec
and
cmps
test
dec
lock
sub
jmp
icebp
cmp
out
or
and
ret
rol
inc
jnp
mov
pop
fst
or
shl
inc
cmp
cmp
xchg
lahf
mov
test
xlat
(bad)
dec
xor
pop
sbb
xor
xchg
mov
pop
mov
mov
imul
adc
dec
add
push
and
inc
test
fimul
ror
cmp
cli
hlt
jnp
addr16
inc
add
cmps
jne
scas
and
push
cmp
or
or
push
xchg
imul
and
push
jecxz
push
cld
xchg
es
les
jmp
dec
xor
sub
ret
mov
dec
jb
(bad)
lock
pop
sub
cmp
add
xchg
cli
xor
mov
ret
xchg
mov
jmp
ret
in
ret
pushf
cmp
sub
rcl
pusha
pop
and
push
clc
nop
stos
or
std
mov
cs
popa
data16
and
mov
jne
sbb
leave
inc
out
pop
(bad)
retf
push
int3
pop
jmp
jecxz
xchg
and
shrd
and
cmps
imul
pushf
in
sar
push
jp
retf
pop
aas
das
cmp
jmp
inc
pop
jnp
pop
mov
add
lea
mov
lahf
imul
jecxz
jl
xchg
add
add
inc
and
jmp
scas
gs
adc
inc
fdivr
jmp
dec
add
jo
cld
jmp
sub
icebp
dec
iret
xor
pop
and
mov
cmp
ins
push
mov
pop
inc
mov
mov
push
adc
cdq
mov
jne
mov
ins
or
push
lock
and
sub
pop
xor
push
fs
sub
and
mov
cmp
cmps
sbb
call
push
test
in
cdq
inc
push
icebp
inc
pop
push
pushf
mov
pop
fs
cld
xchg
(bad)
xchg
fsub
add
push
int3
enter
xchg
mov
rcr
add
popa
movs
cmp
mov
inc
in
pushf
cmp
mov
xor
lods
pushf
push
push
adc
add
aam
or
sbb
call
retf
or
in
inc
and
sub
xor
and
aad
les
std
and
shl
jnp
mov
and
add
(bad)
mov
addr16
mov
add
lsl
sbb
hlt
push
sub
inc
jl
stos
push
sahf
sbb
add
inc
mov
aad
cmc
push
outs
leave
cmp
sbb
adc
repnz
clc
fisttp
inc
sbb
inc
mov
rcl
inc
mov
aam
div
pop
pop
cmp
push
pop
fld
shr
je
xchg
pusha
(bad)
icebp
cmp
fst
xchg
in
mov
add
inc
pop
and
lods
jle
jb
sbb
xchg
jl
cmp
adc
cmps
fild
ja
pop
aas
add
loop
push
and
sbb
in
mov
jl
xor
out
(bad)
dec
jnp
jmp
dec
div
imul
mov
icebp
gs
neg
mov
fs
aaa
std
popf
and
in
push
ss
in
inc
xlat
mov
js
xchg
push
sub
std
or
mov
push
push
repz
push
push
rol
aaa
movs
loop
nop
pop
push
sub
unpckhps
cwde
mov
inc
mov
and
mov
cmp
xor
and
movsx
enter
xor
add
pop
in
mov
mov
movs
inc
mov
and
and
sub
cmc
stc
push
inc
test
xor
xchg
out
pushw
je
xor
movs
jae
lahf
popa
adc
mov
cmp
adc
dec
aaa
adc
xchg
adc
sub
mov
in
cs
fcmovnb
cmp
xchg
dec
in
adc
mov
or
les
push
in
or
adc
pushw
sub
std
cmp
jg
iret
out
imul
jge
sub
push
inc
fcom
push
inc
jmp
xchg
sbb
xor
mov
cmp
sub
test
arpl
int3
mov
icebp
jle
lahf
and
imul
sub
push
push
mov
pop
rcr
in
mov
pop
push
mov
jnp
fild
add
bound
(bad)
in
push
inc
and
je
cmp
sbb
pop
sti
fstp
sub
pop
inc
ffreep
dec
add
mov
xlat
ja
push
loope
dec
fs
popa
inc
xor
std
test
pop
push
jmp
stos
jp
es
in
addr16
sbb
(bad)
in
xor
adc
and
sbb
adc
pop
ins
or
lods
inc
pop
push
fmul
cld
xor
lods
push
adc
mov
js
sar
dec
push
sbb
jle
fcom
inc
push
loopne
jg
icebp
cmp
ror
cmps
adc
adc
push
repnz
scas
mov
cmp
mov
ds
dec
inc
rcl
cmc
test
rol
je
push
pop
inc
jg
test
push
xor
pushf
xchg
xor
test
adc
sub
pop
inc
imul
ror
shl
sub
xchg
fadd
mov
ins
loopne
mov
imul
es
in
xor
enter
pop
adc
mov
add
in
repz
cmp
add
mov
mov
add
pop
dec
or
or
or
inc
mov
mov
loop
inc
lock
frstor
xor
cmp
loop
aaa
or
aas
cmc
sbb
fwait
adc
sbb
jp
in
sbb
mov
fcmovb
in
pop
repz
test
rcr
lock
xchg
inc
sbb
adc
add
call
dec
mov
xchg
in
push
cmps
mov
adc
int3
shl
add
xor
inc
int3
xor
add
or
clc
and
dec
xchg
inc
fist
xor
push
hlt
shl
push
inc
add
mov
jg
outs
fdivr
jnp
stos
call
cmp
inc
pop
inc
clc
cmp
imul
sbb
sbb
pop
in
mov
jge
mov
sar
add
aas
int
fcomp
jp
xchg
push
mov
xchg
xchg
and
nop
test
push
retf
add
xchg
mov
fsub
mov
mov
aad
cmp
xchg
add
mov
ret
push
mov
push
xor
xchg
sbb
loope
sbb
add
mov
mov
(bad)
jecxz
xor
fdiv
std
sbb
push
enter
push
ret
add
mov
js
xor
sti
dec
xor
xor
xor
shl
adc
rcl
sbb
sbb
sbb
push
mov
into
jg
mov
out
mov
cmp
cld
pop
ins
or
icebp
dec
out
(bad)
out
and
mov
xchg
cld
pop
pop
daa
outs
mov
xor
cwde
add
imul
icebp
add
not
mov
xchg
loop
inc
adc
fwait
test
mov
cmp
lods
inc
jae
sbb
in
push
xchg
jmp
xor
jmp
cwde
push
adc
gs
adc
sbb
aam
in
jle
add
xor
mov
jbe
mov
rcr
stos
pusha
(bad)
xor
add
in
js
pop
adc
adc
xchg
sbb
push
xchg
add
xchg
sbb
or
dec
(bad)
pusha
add
lods
cwde
jnp
dec
ins
sbb
sbb
pushf
adc
jg
test
and
or
ins
xchg
and
jmp
xor
add
je
jb
xor
or
loopne
xor
in
mul
pusha
xor
xchg
adc
xchg
inc
adc
push
push
mov
xchg
leave
push
sahf
xor
out
scas
out
ret
pop
xchg
sahf
je
retf
aam
cmp
push
cmps
sub
mov
and
dec
fucomp
retf
mov
adc
sbb
scas
add
jo
sbb
ret
loopne
xchg
pusha
pop
fs
ficom
lock
jmp
pop
push
aaa
pop
mov
cmps
int
or
dec
inc
inc
mov
add
aaa
xchg
clc
movs
aad
in
aad
push
inc
(bad)
sti
mov
or
pop
out
mov
in
out
(bad)
clc
dec
int
retf
(bad)
popf
push
or
xor
lock
xchg
and
add
int3
aam
out
add
aam
in
test
shl
push
jnp
push
ss
fwait
sub
rol
imul
or
pop
or
sbb
repnz
movs
ins
pop
add
jns
push
pop
bndstx
pop
inc
fcmovnu
adc
sbb
rol
clc
ins
adc
cmp
push
jp
pop
xchg
enter
and
imul
fstp
add
sbb
jo
test
fs
sbb
add
int3
mov
cmps
xor
div
rol
dec
inc
shr
shr
ret
mov
les
retf
xor
jno
jge
bnd
inc
out
out
or
xchg
push
neg
adc
jmp
jl
push
rcr
pop
in
fucomip
push
jecxz
ret
loope
add
and
out
cwde
mov
adc
xchg
mov
int3
mov
in
arpl
adc
fild
lock
inc
xchg
mov
imul
adc
xor
inc
dec
sbb
imul
and
and
cdq
fidiv
(bad)
xchg
out
lahf
inc
call
ds
mov
mov
in
enter
mov
(bad)
pop
(bad)
mov
cmp
repnz
mov
dec
mov
das
js
dec
sbb
sbb
jae
into
and
sub
in
inc
imul
xchg
lds
dec
adc
push
dec
aas
push
push
cs
xor
imul
shr
pop
into
loopne
fistp
loopne
cwde
add
sbb
or
pop
les
cmp
pop
jl
in
dec
adc
retf
add
cmp
adc
leave
arpl
(bad)
sbb
jp
or
xchg
cmp
(bad)
adc
int3
(bad)
pop
xchg
movs
ret
rcl
xor
jno
or
xor
mov
fnsave
mov
test
sahf
mov
in
mov
(bad)
fbld
pop
pop
adc
mov
imul
sti
mov
push
pop
jmp
dec
push
adc
mov
push
jo
and
adc
or
bound
push
les
shr
add
aad
les
out
xchg
ficom
loop
add
enter
fdiv
call
pop
ror
jle
inc
dec
jecxz
call
sti
int
adc
jmp
ins
test
into
push
xchg
sub
or
or
and
xlat
sub
iret
jmp
das
cdq
push
pop
cld
xchg
xchg
adc
repnz
cmps
xor
lock
fisttp
les
sub
aas
adc
or
dec
adc
sub
fisttp
pop
fild
add
aaa
outs
into
mov
jno
jmp
outs
pusha
cmp
sub
mov
pop
inc
lahf
dec
loope
xchg
dec
jge
cwde
movs
dec
inc
xor
cs
std
outs
push
mov
(bad)
fisub
in
push
dec
mov
mov
add
add
push
std
add
mov
shl
lock
sub
push
fs
or
sbb
adc
cli
or
pop
in
and
cmp
out
mov
pusha
mov
in
loopne
sub
fdivr
(bad)
xor
inc
popa
dec
adc
aam
lods
sbb
ss
dec
xor
in
or
outs
fsub
cmp
or
jo
dec
icebp
in
cmp
das
jbe
popf
in
push
add
lods
call
add
push
push
(bad)
cli
sub
add
xchg
and
and
cmp
mov
mov
movs
and
fmul
jmp
addr16
inc
(bad)
fdivr
pop
jbe
fist
pop
rcl
add
mov
sbb
jne
inc
scas
xchg
add
pop
fwait
mov
cmp
aam
pop
sub
push
or
sbb
(bad)
sbb
loop
out
out
test
xchg
aaa
sub
mov
jae
(bad)
mov
add
aad
(bad)
mov
cmc
mov
pop
lea
adc
push
cdq
mov
pop
cld
out
pusha
add
xor
nop
cdq
rcl
sub
or
mov
or
mov
dec
add
xor
shl
scas
add
arpl
psubusb
mov
fistp
pop
inc
xchg
or
test
lds
push
xor
push
and
push
outs
out
in
call
inc
push
push
xchg
push
mov
out
lods
fist
sbb
dec
cmps
sbb
pop
test
rol
pop
movs
int
push
adc
cwde
sub
out
xchg
cdq
adc
cld
xchg
pop
test
adc
mov
xchg
add
mov
sbb
call
scas
mov
test
push
lock
mov
sbb
pop
lahf
je
pop
add
lods
sbb
cld
sbb
and
xchg
rcr
fnstenv
mov
fnsave
fild
push
sbb
push
push
add
dec
sub
test
mov
push
cwde
adc
int3
xor
mov
add
or
adc
xor
pop
adc
int3
bound
cmp
rcr
or
ss
jbe
and
mov
nop
in
ins
(bad)
in
enter
ins
(bad)
(bad)
in
rcl
push
sbb
lods
cmp
rcr
inc
and
mov
adc
pop
sbb
std
jae
push
popa
mov
xor
jp
inc
jle
call
aaa
adc
xchg
add
jmp
pop
dec
jb
inc
push
ja
fdivrp
scas
or
xor
lods
sbb
pop
add
push
sub
pop
xchg
push
or
xor
cmps
xor
popa
test
in
icebp
push
xor
or
add
movs
(bad)
or
and
popf
stos
pop
repnz
(bad)
cmps
push
js
aad
pusha
test
popf
cld
inc
ret
dec
stc
cmp
cmps
test
cdq
aad
loopne
add
push
mov
jmp
fs
sbb
add
or
mov
cmp
push
add
cdq
or
int3
push
sbb
aad
not
pop
(bad)
in
lods
or
lea
lods
dec
dec
out
je
test
out
jmp
rol
adc
xor
arpl
push
cmp
push
adc
imul
aaa
push
shl
test
rcl
pusha
aaa
test
add
jae
dec
adc
pop
(bad)
sub
xor
push
inc
jmp
add
out
or
(bad)
xchg
(bad)
dec
xchg
jno
xlat
int3
mov
repnz
sti
test
nop
in
xchg
and
jmp
xchg
popf
fsub
pop
loopne
jmp
sub
fisttp
lods
xchg
mov
sub
imul
pop
cmps
xchg
stos
test
sti
shl
mov
or
aas
mov
jbe
jmp
push
cmp
xor
loopne
adc
cdq
fistp
mov
xchg
out
dec
shl
adc
xchg
int
and
lods
ins
sbb
pushf
dec
mov
xchg
out
xchg
push
into
inc
or
add
sbb
inc
push
or
(bad)
loope
out
xrelease
imul
dec
sbb
mov
adc
test
adc
inc
aam
inc
adc
xchg
dec
adc
xchg
add
add
out
ss
bound
xlat
ret
dec
les
push
lds
rol
xlat
jns
int3
out
inc
cdq
clc
or
cmp
cmp
es
push
ret
cld
cmp
loopne
push
popw
add
jle
outs
fs
xchg
and
lods
(bad)
out
cld
mov
retf
sbb
and
cmps
mov
adc
test
shl
add
xchg
mov
std
adc
or
and
ins
add
(bad)
dec
xor
mov
mov
shl
and
daa
pusha
out
int
pop
lds
loope
idiv
ins
pop
adc
sbb
xchg
sub
xor
adc
fcomp
inc
add
pop
sub
dec
adc
retf
sbb
(bad)
ins
add
and
leave
jp
inc
cld
lahf
xchg
(bad)
pop
clc
or
xlat
push
nop
popf
or
add
in
leave
out
repz
sub
add
pop
std
fcom
push
push
pop
aam
sti
cdq
loope
add
mov
out
add
inc
nop
inc
fcmovbe
mov
fistp
add
xor
or
adc
leave
or
dec
js
rcr
aas
scas
add
stc
or
ins
imul
and
inc
jle
in
jge
mov
mov
das
xchg
mov
test
dec
aas
dec
inc
(bad)
jb
retf
clc
xlat
and
data16
pop
mov
pop
push
outs
sbb
stos
dec
inc
popa
adc
call
dec
xor
inc
cmp
pop
fdiv
inc
(bad)
icebp
aaa
mov
or
mov
or
push
inc
and
je
push
pop
mov
pop
or
jns
pop
add
pop
mov
and
addr16
adc
je
sbb
outs
mov
push
sub
fist
mov
and
or
add
xchg
add
lahf
adc
in
push
ret
adc
mov
pop
loopne
sub
xchg
fstp
iret
int3
jne
popa
loope
stos
(bad)
ins
mov
clc
imul
enter
mov
sar
xchg
ror
sbb
bound
cmps
stos
or
dec
mov
xchg
sub
mov
xchg
cmp
add
pop
jns
xchg
sbb
test
mov
xchg
loop
mov
clc
pop
or
xchg
cli
inc
loopne
out
retf
xchg
push
gs
aaa
into
pop
aas
js
fidivr
cs
loop
sub
pop
adc
aaa
ret
push
pop
icebp
or
cdq
fwait
inc
dec
ds
aas
dec
fs
fadd
out
test
pop
stos
add
loope
sub
mov
push
pop
or
push
cmc
cmp
ds
mov
loope
sbb
xchg
jnp
or
adc
out
out
add
dec
pop
adc
arpl
or
pop
clc
std
inc
pop
(bad)
leave
add
jae
sbb
adc
sub
inc
cmc
dec
jge
cmp
jno
imul
bound
xor
push
imul
dec
cmc
lds
stos
sub
movs
push
cmc
mov
retf
mov
loop
mov
jmp
sub
test
fcmovb
adc
pop
or
sub
ins
jge
adc
adc
pop
(bad)
lds
les
iret
gs
jnp
jle
and
loopne
rol
push
dec
ror
mov
cmp
imul
test
push
add
cwde
test
jg
cmp
call
mov
or
mov
ds
jp
sti
lds
pop
push
pop
mov
aas
push
pop
cmp
xchg
pop
mov
imul
xchg
dec
xor
or
shr
lock
call
xlat
inc
cdq
cmps
(bad)
lds
add
out
in
aam
and
xchg
scas
dec
adc
inc
icebp
je
pop
xchg
push
dec
inc
cmp
sub
adc
adc
push
(bad)
ins
xchg
or
and
pushf
ins
xor
mov
imul
push
push
add
aaa
aaa
mov
icebp
loope
jo
fild
sub
leave
loop
and
add
push
lods
push
sbb
xor
xchg
pusha
(bad)
push
push
xor
adc
pop
add
lds
cmps
push
push
jo
cli
int3
test
in
cmp
in
add
push
push
xor
sbb
push
clc
jb
jmp
or
inc
xor
repnz
xor
in
jo
iret
pop
test
jl
xor
jae
bnd
sti
jp
bound
dec
(bad)
xor
mov
cs
push
inc
pop
push
mov
loop
inc
adc
xor
inc
mov
lds
inc
jbe
mov
(bad)
fstp
push
xor
push
dec
jle
xor
pop
cld
ds
mov
cwde
adc
stos
ret
stc
push
inc
adc
fnstsw
jg
sbb
pop
mov
ror
test
xor
inc
push
jmp
aad
push
pop
sar
or
imul
xchg
add
les
loopne
add
adc
xchg
clc
pop
(bad)
in
mov
and
fsubr
imul
test
(bad)
iret
inc
inc
add
pop
mov
fild
xor
inc
or
jp
mov
xchg
mov
cmp
push
movs
leave
or
and
pop
sbb
pop
sub
dec
in
jo
or
adc
sbb
pop
add
mov
xor
jp
mov
cmp
in
jp
fistp
in
cmp
in
adc
call
xchg
lahf
in
adc
in
sub
sbb
xor
in
cmps
enter
pop
or
(bad)
or
dec
adc
inc
add
sbb
(bad)
fild
fisttp
add
inc
in
adc
cmp
add
or
add
sbb
mov
jae
or
push
sahf
pop
test
xor
push
jnp
test
sub
mov
or
and
mov
and
js
sub
dec
and
test
adc
sbb
test
mov
xor
sub
mov
call
adc
aam
(bad)
in
mov
lods
sub
clc
or
je
xchg
nop
inc
adc
mov
inc
adc
lods
push
pop
sub
push
xchg
cmp
je
xor
sub
pop
dec
xor
test
jmp
pop
in
es
addr16
lea
jo
xchg
dec
xchg
popf
call
add
push
pop
or
xor
cmp
popf
mov
sbb
shl
mov
push
dec
movs
mov
repz
retf
adc
in
adc
push
xchg
movs
loope
cmp
jmp
push
bound
loope
sub
add
push
inc
int3
adc
es
jb
inc
add
stos
jl
sbb
(bad)
cmp
leave
daa
cdq
cld
inc
int3
fnstcw
(bad)
mov
xchg
das
lds
fcmove
jns
adc
cmp
inc
adc
dec
addr16
adc
xchg
jne
loopne
dec
lahf
out
stc
mov
ins
in
ins
mul
aaa
fisub
adc
xor
pop
or
mov
lds
stos
les
jecxz
sub
jmp
pop
mov
jp
or
pusha
repz
push
repnz
and
mov
mov
or
push
pop
div
repnz
push
aaa
fstp
(bad)
aaa
cdq
fsubrp
retf
imul
push
pop
loop
ficom
xor
xchg
cmps
pop
xchg
cmps
add
(bad)
icebp
pop
(bad)
loop
pop
call
pop
(bad)
push
int
das
inc
push
lock
fdivrp
out
adc
int3
xchg
mov
aas
imul
rol
mov
and
icebp
nop
js
cwde
pop
push
clc
(bad)
xchg
(bad)
xchg
mov
gs
jmp
dec
mov
cmp
clc
xchg
jle
(bad)
in
inc
and
mov
xchg
and
sub
stos
cmp
fsub
or
sub
inc
rol
and
leave
jo
aas
and
push
jecxz
rcl
push
cli
or
jg
js
adc
cwde
pop
inc
or
aas
sbb
inc
in
addr16
fadd
add
pop
cmp
dec
fmul
lock
mov
fs
adc
bound
dec
pop
pop
and
(bad)
or
inc
adc
adc
jmp
mov
push
push
xchg
les
and
in
ret
out
mov
fld
lock
xor
push
dec
sbb
xor
int3
lods
out
mov
in
or
sbb
fs
add
lods
jecxz
ficomp
fisub
ror
retf
xchg
sub
neg
pop
retf
mov
add
inc
imul
push
sti
and
int3
inc
mov
movs
xor
je
aas
xchg
retf
dec
call
adc
sub
adc
loop
pop
sbb
lods
jp
nop
sbb
ret
jnp
sbb
cld
fist
ja
or
and
inc
sar
retf
ins
test
stos
mov
scas
push
cs
inc
into
fs
outs
pop
xlat
and
or
pop
fild
cli
adc
or
(bad)
pop
pop
xor
cmp
ret
add
loop
cmp
xchg
in
mov
ret
dec
push
js
lahf
dec
lea
dec
(bad)
xor
cli
enter
inc
imul
mov
(bad)
scas
mov
inc
or
jp
outs
pop
or
ins
cmp
clc
fisttp
or
icebp
sub
bound
and
cwde
cmps
call
sbb
xor
dec
daa
sbb
and
mov
jmp
int3
inc
add
dec
jae
(bad)
dec
mov
in
mov
mov
sahf
jnp
or
pop
mov
add
cmps
xor
xchg
stos
jmp
sahf
pop
jnp
pop
cmp
push
ret
in
fdiv
in
xlat
add
(bad)
fwait
xor
sub
inc
jmp
pop
sbb
ror
push
setp
test
iret
fisubr
xchg
fmul
xchg
jg
push
sbb
outs
(bad)
dec
popfw
cmp
mov
loop
nop
lahf
xlat
test
pop
in
add
pop
test
sbb
fsubr
out
loopne
lods
pop
jp
adc
push
popf
test
div
or
ds
jmp
sbb
sub
adc
and
mov
mov
jl
stc
movs
or
les
fwait
dec
jmp
cmc
add
int3
pop
lock
sub
jg
in
or
cmp
pop
or
pop
mov
cmps
iret
or
(bad)
mov
lea
cmp
xchg
xchg
add
mov
loop
push
xchg
pop
sub
sub
nop
xor
inc
jle
push
test
push
pop
aas
in
into
sub
dec
xor
xor
loop
das
(bad)
adc
inc
mov
nop
sub
movs
rcr
out
in
jb
repnz
out
cmps
pop
lock
pop
dec
adc
(bad)
es
int3
sbb
cwde
loope
cmp
lods
xchg
into
sbb
xor
pusha
imul
lods
fs
adc
and
icebp
ins
(bad)
gs
pusha
dec
xchg
inc
mov
inc
or
imul
jne
push
out
pop
(bad)
in
xchg
sub
add
mov
xchg
retf
inc
ds
jmp
adc
mov
imul
std
cwde
and
push
or
in
outs
pusha
nop
mov
in
mov
xor
pop
push
les
push
aam
retf
pop
mov
movs
xor
jnp
push
cdq
cld
xor
adc
loopne
bound
or
out
adc
xchg
les
mov
xor
cmc
out
aaa
sbb
jmp
in
std
sti
dec
adc
imul
pop
sbb
bndldx
adc
rcl
xchg
or
inc
call
cmps
and
loope
push
aad
ds
int3
cmp
add
add
mov
and
adc
add
aad
mov
dec
mov
(bad)
cmp
daa
ins
or
(bad)
cmp
and
adc
xor
mov
in
ins
dec
or
dec
sub
fwait
sbb
sbb
lds
fdivr
mov
mov
nop
adc
push
imul
mov
add
or
mov
lods
pop
dec
cmp
adc
add
ins
mov
inc
inc
js
cs
jg
and
mov
dec
rcr
mov
imul
call
or
mov
out
sbb
int3
cmps
jecxz
sub
jbe
and
add
jmp
inc
aas
into
pop
cdq
mov
int
xchg
int3
std
loop
aas
push
div
pop
fxch
lods
idiv
and
test
imul
mov
adc
lods
sub
xor
sub
dec
cli
sbb
add
rol
mov
mov
pushf
pop
add
sub
ins
rcl
loope
pushf
sbb
sub
xchg
fs
sub
inc
add
inc
loopne
and
push
sbb
jecxz
cdq
fadd
push
add
retf
lahf
jnp
adc
pushf
jns
in
lock
sbb
sbb
mov
and
push
xor
and
jmp
inc
xor
mov
add
sbb
dec
(bad)
in
js
xchg
mov
dec
mov
call
or
sub
sbb
imul
sbb
nop
sbb
push
jnp
in
and
fsubrp
add
dec
inc
fcom
ja
repz
arpl
push
arpl
std
sbb
rcr
nop
push
xchg
inc
xchg
xchg
xor
fadd
add
pop
add
xchg
xchg
sub
inc
test
mov
sbb
sbb
add
push
js
(bad)
clc
pop
jl
xchg
dec
cld
dec
mov
in
sub
sbb
push
push
jae
ja
and
ins
sub
push
adc
push
inc
and
ins
sub
lods
add
sar
xor
and
jmp
cwde
mov
fwait
sub
mov
xor
xchg
xchg
pop
jo
jns
add
adc
push
pop
(bad)
ja
jae
mov
add
jp
mov
dec
test
lahf
clc
jo
lea
sbb
in
xor
xchg
or
(bad)
sub
add
stos
fwait
xor
dec
cmp
sub
inc
jbe
int3
mov
cld
clc
or
out
or
sar
jmp
mov
rcl
adc
(bad)
xchg
or
mov
or
adc
xchg
into
sbb
ret
push
movs
dec
dec
mov
push
mov
and
sub
loopne
add
xor
adc
outs
adc
ins
push
loope
adc
or
pop
(bad)
xchg
js
sbb
pop
push
leave
xchg
dec
adc
dec
add
popa
inc
call
pop
out
loope
pop
lods
push
test
int3
or
adc
outs
push
pminsw
nop
jno
movs
int3
mov
mov
pop
daa
fmul
or
xor
xchg
pusha
xchg
lea
add
or
jge
mov
or
addr16
jmp
outs
pop
push
addr16
fmul
add
sub
xor
add
xor
push
mov
push
or
mov
arpl
push
dec
icebp
in
or
xor
mov
enter
or
lods
sbb
adc
jg
mov
or
pop
inc
mov
xor
push
(bad)
in
(bad)
cmp
std
jl
lds
xchg
(bad)
jmp
xor
push
call
or
add
imul
dec
cmp
xor
cwde
inc
fisubr
enter
lock
frstor
sbb
movs
cmp
jmp
mov
mov
sub
jae
jmp
sbb
scas
inc
aad
pop
cmp
ins
or
inc
jg
add
push
(bad)
sbb
icebp
push
out
sub
sbb
sbb
icebp
xor
pop
xor
adc
push
or
adc
inc
ss
xor
js
sbb
adc
arpl
dec
add
add
outs
jae
in
daa
cmp
sbb
pop
sub
push
(bad)
shl
das
pop
repz
push
js
fnsave
pop
or
mov
and
retf
push
icebp
mov
scas
ret
mov
add
sub
push
push
push
sbb
mov
mov
dec
sbb
dec
fld
xchg
hlt
mov
out
rcl
je
imul
int3
cmp
adc
mov
punpckhdq
cmp
js
retf
push
inc
sbb
push
mov
out
std
repnz
add
inc
lods
fnstsw
je
dec
xor
jnp
push
sbb
sub
mov
xor
sahf
push
lahf
pop
scas
je
adc
ins
dec
mov
mov
adc
(bad)
lods
jp
scas
test
aad
in
lds
les
xchg
(bad)
xchg
fwait
aas
adc
xchg
scas
mul
xchg
add
sti
and
mov
mov
adc
add
jge
cmps
rcl
sub
out
lods
out
into
xchg
neg
(bad)
fimul
jae
pop
rcr
xchg
inc
retf
rcr
fsincos
sbb
sub
je
clc
dec
fadd
jp
popf
loope
mov
pop
adc
adc
mov
retf
fbld
test
enter
sub
cli
outs
(bad)
sub
mov
adc
sahf
(bad)
in
inc
xor
mov
mov
clc
sub
fisubr
sub
sbb
retf
stos
popa
popf
outs
imul
int3
pop
jl
je
(bad)
int3
rol
and
movs
sbb
jmp
repnz
(bad)
cmp
cli
sub
add
stc
gs
or
adc
and
aam
lahf
fst
cmp
xchg
(bad)
jecxz
(bad)
sbb
fdivr
sub
div
dec
sbb
mov
lods
mov
fst
ret
out
pop
outs
sub
xor
mov
ins
and
push
mov
mov
mov
in
sbb
push
jne
or
push
add
popf
cs
or
add
or
fwait
mov
pop
fdiv
cmp
sbb
jp
or
pop
in
mov
cmp
or
mov
loope
add
iret
mov
push
les
adc
(bad)
xor
mov
or
ds
es
mov
int3
dec
or
popw
es
fisubr
pop
xor
xchg
das
retf
xchg
mov
int3
enter
shl
stos
push
xchg
hlt
cmp
dec
xchg
popa
sbb
dec
stos
push
je
or
cmp
xchg
nop
outs
mov
loop
fscale
retf
adc
jne
xor
cmp
cdq
or
ins
scas
bound
add
adc
mov
fidivr
lock
pop
push
sbb
call
in
sub
inc
retf
jo
out
or
test
mov
sbb
cmp
or
pop
dec
xor
mov
xchg
out
ror
int
popa
mov
push
mov
pusha
cmp
pop
out
xchg
inc
or
sbb
pop
dec
movs
push
adc
xchg
mov
mov
cwde
or
js
add
fsubrp
imul
dec
std
and
add
sub
(bad)
push
movs
retf
ror
pinsrw
nop
or
sbb
sub
or
test
movs
fld
out
fcmovne
xchg
mov
xchg
inc
mov
cmp
js
sub
pop
popf
inc
xchg
jb
cld
mov
fnstenv
pop
in
jb
pop
inc
je
xchg
sub
sbb
int3
icebp
dec
imul
xor
dec
int
pushf
xor
xor
(bad)
jo
mov
xor
addr16
xchg
xchg
cmp
or
sbb
jecxz
outs
pop
pop
enter
scas
mov
xor
mov
in
movs
and
jnp
xchg
int3
push
(bad)
pop
cmp
es
sbb
cmp
mov
popf
push
sbb
mov
push
mov
leave
ret
fadd
push
out
adc
dec
mov
shr
jle
les
imul
xor
mov
or
fisub
not
or
in
dec
ds
hlt
sub
or
loop
into
das
add
sbb
mov
push
inc
adc
stos
test
in
mov
dec
lea
and
add
push
je
or
mov
pop
cmp
push
nop
cmps
test
pop
cmp
sub
cwde
xor
mov
imul
cld
in
jmp
cmp
aad
sbb
ss
push
inc
inc
push
push
xor
enter
pop
push
mov
sub
dec
pop
fs
push
pop
push
lds
add
xlat
pop
mov
outs
movs
add
(bad)
dec
pop
xlat
lock
or
adc
jno
pop
xchg
inc
cwde
test
cwde
call
jl
loop
jle
ror
imul
and
ror
and
jne
int3
bound
or
dec
inc
cmp
and
jl
aaa
sbb
cmp
adc
xor
mov
call
or
or
sbb
in
pop
inc
xchg
jmp
mov
retf
mov
rcl
jno
jb
dec
inc
jl
dec
push
cwde
sub
pop
jg
jmp
scas
lock
sbb
and
cmp
xchg
out
pusha
push
dec
mov
aad
push
or
xor
je
add
push
push
test
mov
dec
jo
fst
push
cmp
mov
cwde
mov
adc
adc
cld
call
retf
adc
and
out
sub
cdq
push
fs
xchg
lahf
retf
call
pop
scas
leave
ins
(bad)
fdivr
fcmovu
mov
in
test
cwde
bnd
mul
fsubr
xchg
cmp
sbb
ficomp
sahf
mov
jns
mov
add
and
out
int3
push
(bad)
mov
movs
fldcw
sbb
jbe
inc
add
stos
push
add
sbb
push
in
push
xchg
not
mov
aas
rcl
xor
mov
push
pop
push
inc
push
push
dec
xor
(bad)
dec
jns
push
sub
add
push
dec
sbb
pop
sub
dec
adc
inc
inc
add
pop
dec
sub
(bad)
jmp
dec
pop
mov
adc
sub
jge
push
inc
pop
pop
jne
pusha
pop
jns
pusha
pop
push
movs
aad
inc
dec
pop
out
jb
inc
push
jbe
cmp
push
sub
dec
push
xor
sub
shl
pusha
adc
inc
push
dec
test
mov
repz
pop
pop
loope
cmp
jmp
xchg
dec
add
or
lds
pop
mov
and
pusha
rcl
push
sub
and
sbb
add
pop
test
mov
fadd
fcmovne
fld
dec
sub
jno
scas
push
and
mov
xor
ins
push
mov
cmp
retf
pushf
inc
stos
pop
js
xor
jle
and
mov
les
and
mov
ins
mov
mov
or
jo
jle
mov
xor
fimul
out
jg
sti
outs
call
mov
sbb
cmp
sti
out
jp
xor
gs
fiadd
push
pushf
cmp
push
out
mov
ds
bound
pusha
add
retf
stc
pop
outs
stc
or
pushf
test
adc
repz
xchg
dec
sbb
int3
lods
pop
push
repnz
pop
int3
jmp
jle
out
add
xchg
(bad)
push
inc
inc
or
inc
jmp
dec
mov
outs
(bad)
jecxz
ret
sub
inc
dec
xchg
lahf
retf
inc
sbb
or
push
mov
inc
out
lods
sub
xor
cdq
(bad)
push
imul
shl
data16
dec
adc
cwde
adc
lods
xor
popa
dec
mov
add
cmp
mov
test
retf
sahf
out
lods
xchg
mov
ret
pushf
es
leave
hlt
sti
pop
and
scas
pushf
lahf
push
lods
sub
xchg
pushf
xchg
jmp
sbb
push
dec
push
clc
ins
js
cmp
sub
mov
add
not
aam
in
add
das
out
push
xor
push
xor
outs
aaa
cmp
push
retf
sahf
or
xchg
sbb
adc
dec
or
mov
xchg
js
xchg
and
pop
out
loop
xlat
sti
int3
and
jg
pop
add
push
fidiv
les
sub
hlt
mov
adc
sub
in
xor
das
pusha
push
mov
fs
js
ins
aad
mov
adc
stc
mov
or
or
int3
cmp
cmp
icebp
cmp
mov
mov
fcmovne
pminub
xchg
fistp
lods
mov
add
push
in
dec
movs
addr16
stos
sbb
mov
sbb
pop
pop
pushf
cwde
add
(bad)
cmps
mov
jecxz
seto
sub
jae
scas
xor
mov
call
sbb
sub
fsubr
fsub
and
sti
je
pop
loop
ins
pop
(bad)
in
fidivr
push
dec
cmp
mov
clc
and
jo
dec
stos
sahf
cmp
les
std
in
adc
adc
in
pop
fisttp
xchg
(bad)
je
sub
push
(bad)
jg
sub
ins
ins
(bad)
pushf
jns
aas
(bad)
aad
mov
out
leave
fwait
jl
test
aaa
in
jl
sbb
jne
xor
pop
adc
adc
mov
push
(bad)
xchg
stc
adc
imul
retf
aas
pop
cmp
mov
push
xor
sbb
jge
jmp
loopne
xor
pop
sub
xor
jl
sbb
clc
rcr
jmp
es
sub
and
retf
jae
add
mul
std
dec
into
cmp
into
push
xchg
jg
xchg
jge
bnd
jmp
retf
outs
imul
pop
jne
dec
lods
jge
das
jb
retf
xchg
pop
int3
or
mov
mov
mov
xor
mov
fidivr
mov
or
popf
pop
push
sbb
xor
sbb
fst
inc
sbb
dec
push
push
jmp
ins
dec
out
and
add
sahf
push
xlat
xchg
stos
ror
retf
test
and
pop
lds
movs
cwde
jns
ret
loop
or
(bad)
push
dec
sbb
inc
mov
ins
aaa
dec
loopne
cmp
xchg
in
push
mov
cwde
sbb
lea
push
mov
adc
jle
mov
jnp
cmp
pusha
inc
aad
das
jle
and
pusha
int3
jnp
fcomp
pop
adc
add
lods
jae
ds
cmp
movs
mov
or
sub
add
sbb
dec
imul
leave
adc
call
popa
mov
je
dec
mov
lea
pop
in
jecxz
ss
int3
inc
cmp
bnd
xchg
add
pop
and
and
clc
sbb
lods
sti
cmps
fidivr
(bad)
mov
add
push
into
mov
les
dec
data16
cmp
and
pop
inc
jae
adc
xor
retf
in
inc
ins
imul
pop
(bad)
xchg
test
mov
xchg
mov
xor
shl
inc
loopne
dec
sub
ret
es
ins
in
pop
sbb
mov
les
int3
mov
xor
cld
sbb
jmp
or
je
sbb
adc
movs
pop
mov
pop
mov
jmp
rol
add
mov
(bad)
loope
sub
sub
jecxz
pushf
leave
or
inc
mov
jnp
in
stos
shl
dec
pop
and
mov
imul
je
and
mov
mov
cwde
push
add
dec
add
add
or
scas
cmp
xchg
fisubr
xor
ficomp
aam
je
fmul
push
retf
cmp
cmps
sbb
loope
xchg
fadd
test
and
inc
bound
int3
call
jmp
mov
ret
cwde
clc
hlt
fst
enter
mov
out
pop
clc
(bad)
sar
mov
sub
xchg
or
xchg
or
jmp
and
enter
fcomp
inc
stos
jno
loop
(bad)
or
push
adc
lock
xchg
sti
arpl
push
inc
out
xchg
push
mov
outs
movs
rcr
jle
mov
push
fidiv
cmps
cmp
popf
cmp
mov
mov
xchg
loope
je
into
inc
and
mov
or
jle
lods
retf
pop
(bad)
cmovae
pop
icebp
aaa
sbb
adc
call
xor
sub
jne
int
jp
push
retf
add
xor
(bad)
out
jp
or
or
sub
cmp
(bad)
jecxz
lea
dec
jne
xlat
popa
fmul
dec
call
jb
cmp
jmp
(bad)
sub
sbb
push
xchg
dec
or
les
fadd
arpl
stos
cmp
fadd
or
pushf
imul
xchg
and
dec
mov
sbb
xchg
leave
popa
jmp
jne
sub
sbb
cli
imul
push
mov
push
mul
(bad)
or
push
push
sub
dec
pushf
loop
or
scas
loop
test
push
sbb
ds
add
dec
cmp
jg
repz
sbb
int3
loopne
sub
inc
push
push
adc
or
mov
dec
mov
or
or
add
pop
add
ins
in
push
jmp
dec
sbb
pop
in
jmp
ins
pop
and
mov
loop
dec
in
es
je
xor
jecxz
rcr
call
xor
xor
or
aad
jnp
in
out
jp
sbb
leave
iret
js
pop
out
add
fcomp
pop
push
pusha
ss
inc
add
sbb
mov
jmp
call
lock
add
imul
stc
push
cmp
push
int3
dec
mov
jno
xchg
lea
leave
inc
pop
retf
rcr
loop
adc
dec
mov
les
hlt
aam
sbb
fldcw
stos
test
sti
sbb
retf
jnp
push
outs
sub
xchg
std
leave
hlt
dec
pop
jmp
jae
je
jge
addr16
repz
cmp
inc
adc
add
mov
pop
xchg
mov
popf
jmp
or
(bad)
cmp
in
mov
fld
repz
sbb
mov
mov
fistp
(bad)
call
lods
and
jno
aad
fimul
inc
out
retf
sbb
mov
xchg
cld
add
cmp
sub
pop
cmp
push
sub
(bad)
rcl
xlat
out
ret
inc
cmp
cmc
retf
ja
rcr
mov
xchg
dec
ss
and
xchg
lods
mov
push
pop
adc
add
push
out
xchg
cmp
pop
std
sbb
int
pop
bound
je
push
sub
data16
cli
pop
ds
cmp
xchg
dec
mov
scas
shl
jmp
push
sbb
sti
scas
xor
or
jae
fistp
adc
fdiv
push
push
push
ins
add
into
or
retf
sub
sub
ins
sub
pop
cdq
retf
not
outs
sub
(bad)
aas
push
nop
xchg
nop
or
jmp
loop
rcr
mov
jmp
push
or
out
jmp
pusha
pop
sbb
cmp
add
inc
pop
ja
cmp
xchg
js
xor
fsubr
adc
adc
scas
cli
jmp
xchg
das
push
pop
dec
pusha
jmp
shr
cmp
mov
dec
stos
fist
repz
xchg
stos
retf
retf
adc
mov
mov
sbb
int3
call
test
retf
leave
out
xchg
mov
jg
adc
test
(bad)
loope
sbb
mov
jae
cmp
std
(bad)
jmp
loop
jne
sbb
adc
out
cdq
push
int
add
lahf
es
in
mov
imul
pop
adc
dec
mov
je
leave
xchg
jmp
mov
repnz
inc
imul
test
cs
pop
mov
dec
stc
jmp
jb
add
inc
lods
aaa
out
xor
xor
adc
movs
loop
add
int
(bad)
pop
and
lods
aad
mov
push
mov
xor
cwde
cdq
sbb
pop
push
fcmovnbe
dec
sub
xchg
or
pop
cwde
sbb
daa
in
out
xlat
mov
retf
fld
xchg
(bad)
adc
data16
sbb
and
idiv
cdq
ins
mov
mov
jle
sar
dec
xor
xchg
cmp
inc
hlt
leave
adc
imul
pop
cmp
and
aam
out
cld
push
pop
xchg
fst
jg
std
sbb
cmps
inc
nop
lahf
leave
in
mov
mov
sbb
and
popa
inc
jb
sub
mov
scas
aam
push
shr
out
test
cmp
or
sahf
pop
mov
lods
scas
jns
sar
sbb
retf
xor
fmul
cli
push
sbb
xchg
int3
push
push
fidiv
mov
xchg
sti
test
dec
push
pusha
pop
inc
inc
pop
scas
aam
mov
and
add
int3
push
les
std
add
retf
mov
dec
mov
pop
das
ins
pusha
fimul
js
sbb
mul
(bad)
mov
pop
xor
adc
push
mov
imul
cld
dec
inc
jl
or
jmp
jle
repz
fild
call
aaa
sub
mov
jl
dec
xchg
mov
and
pop
push
push
add
sbb
mov
aad
or
(bad)
sbb
xlat
push
nop
cmp
mov
push
lahf
xor
enter
mov
or
push
cmp
adc
int
pop
pop
call
rcl
in
cld
out
xlat
mov
(bad)
push
xchg
xor
dec
cwde
fsub
push
bound
mov
inc
jmp
je
mov
push
nop
mov
mov
add
fistp
repnz
ja
iret
sti
cmps
inc
push
and
sbb
sahf
(bad)
aam
add
pop
not
aaa
js
fisttp
jne
jmp
cwde
test
scas
xor
mov
pop
test
in
div
retf
or
mov
push
adc
dec
pop
pop
push
sub
inc
in
sub
adc
out
out
out
inc
(bad)
sub
pop
out
rcl
fcomi
cmp
pop
dec
icebp
vmovdqa
xchg
push
sub
cmps
or
xchg
(bad)
ja
in
int3
or
mov
in
jmp
pop
sbb
xor
cvtpi2ps
or
into
jmp
dec
inc
mov
push
xor
in
and
add
push
mov
dec
cmp
and
and
jbe
or
add
es
out
ret
cmp
mov
loop
sbb
into
gs
imul
data16
sti
mov
pusha
ficomp
push
retf
jge
add
in
movs
in
pop
in
addr16
test
out
dec
jmp
(bad)
call
div
in
sub
test
arpl
(bad)
cld
(bad)
dec
mov
pop
jmp
addr16
xchg
jno
sbb
add
in
or
xchg
js
xor
or
cs
pop
call
call
adc
adc
addr16
and
lock
push
mov
xchg
icebp
adc
xchg
and
test
add
ins
cli
jmp
dec
xchg
pop
out
fs
cmp
sahf
dec
or
and
pop
sub
cmp
push
xchg
dec
loopne
rcl
mov
adc
pop
out
dec
push
int3
movs
xchg
push
inc
xchg
das
(bad)
pop
sbb
sub
xor
movs
mov
mov
inc
add
xor
sbb
or
mov
arpl
in
add
pop
addr16
xor
jp
push
add
sbb
or
call
in
add
inc
cld
and
out
dec
sbb
ror
int3
aaa
mov
test
pushf
sbb
cld
adc
xchg
fimul
inc
sbb
or
(bad)
shl
stos
xchg
mov
ins
jl
xchg
xor
nop
mov
pop
push
je
jmp
jle
sti
xchg
and
fwait
pop
mov
cwde
loope
mov
xor
or
mov
xor
aam
add
pop
aaa
into
push
cli
mov
aaa
dec
je
pop
mov
das
cmps
es
in
int3
mov
add
inc
jmp
inc
ret
adc
jg
int
add
outs
test
xor
inc
jmp
xor
jg
jnp
cmp
out
xchg
add
xor
in
addr16
dec
in
pop
retf
repnz
add
pop
xor
cmps
add
outs
xor
xchg
nop
scas
dec
cwde
xor
add
push
add
xchg
jecxz
or
push
xchg
rcr
rcl
pop
fild
adc
inc
push
push
gs
pop
dec
jnp
ja
leave
shl
inc
and
pop
push
xor
jbe
jae
bound
push
mov
sbb
mov
fdivr
push
hlt
sbb
test
in
lods
jmp
sbb
push
mov
je
lahf
cld
mov
sub
cwde
pop
pop
or
pop
les
in
mov
mov
imul
jecxz
je
push
mov
icebp
mov
xor
xchg
sub
mov
in
and
sbb
ja
mov
jp
xor
mov
or
xchg
sub
add
int
pop
xchg
aam
push
imul
cli
cld
cmp
mov
(bad)
push
xor
test
dec
fs
movs
adc
movs
jns
inc
loopne
and
push
add
jle
push
in
mov
jp
mov
sbb
ja
pusha
retf
int3
and
(bad)
cli
or
and
xchg
clc
pop
rcl
in
ins
mov
ret
push
adc
fist
push
add
or
or
dec
or
mov
movs
hlt
loopne
jne
add
dec
or
shl
cmp
add
cmp
dec
ret
ret
jle
xor
mov
popf
push
sbb
xor
repz
gs
mov
sub
addr16
add
or
or
xchg
pop
gs
mov
aaa
div
out
and
lds
fmul
xor
test
imul
out
arpl
ss
fbstp
int3
pop
jbe
add
and
fist
xchg
jo
cmp
shl
(bad)
xor
jns
inc
mov
(bad)
stos
add
adc
dec
loop
ffreep
jl
pop
adc
movs
cmp
xchg
add
aaa
ins
mov
mov
xor
mov
mov
or
xor
ss
out
pop
mov
cmps
cmps
lahf
fs
daa
popf
test
fwait
jge
sti
fst
dec
jno
das
sbb
pop
inc
gs
dec
push
jne
cmp
in
mov
pop
adc
je
and
pop
loop
inc
aam
lea
add
push
cmc
imul
mov
mov
xor
rol
sub
push
xchg
jle
jae
into
rol
movs
sbb
xchg
enter
lahf
into
inc
or
sub
mov
imul
imul
jmp
inc
std
std
jne
mov
lods
mov
and
out
adc
dec
sar
jmp
mov
fwait
cmps
mov
inc
sti
jno
imul
cmp
jo
cmp
mov
push
xor
cmps
pushf
sbb
push
in
dec
frstor
jno
fdiv
jmp
pushf
adc
jecxz
dec
inc
cld
repz
push
push
call
out
les
clc
jmp
popa
jmp
mov
das
jmp
inc
jbe
cmp
or
mov
jno
mov
movs
daa
pop
inc
(bad)
imul
dec
and
rcr
xchg
jle
inc
ret
js
outs
mov
xchg
xor
cmc
or
jae
es
enter
xor
pop
idiv
sti
xor
mov
sub
sub
data16
fidiv
sub
out
xchg
call
out
jg
push
mov
sahf
sbb
xchg
sti
adc
mov
int3
cmp
es
lds
ror
(bad)
sbb
adc
iret
in
cmc
ffree
mov
mov
cmps
pop
ss
rol
pop
outs
sbb
or
jmp
mov
mov
retf
addr16
mov
sbb
imul
push
push
xchg
jbe
test
pushf
pushf
mov
lea
jb
clc
jmp
xchg
sub
jle
jle
mov
int3
inc
movs
fmul
jg
ins
xor
adc
les
test
ret
mov
xchg
jp
xor
or
sti
add
cmp
ins
xchg
fwait
movs
mov
out
(bad)
or
and
add
fild
repnz
pop
jno
adc
cdq
sbb
out
lods
cli
rol
shl
and
mov
(bad)
dec
jl
call
sub
fwait
iret
rcl
xor
in
or
mov
gs
jno
adc
mul
stos
add
dec
cwde
popa
fst
ret
fwait
add
jnp
repnz
ins
(bad)
les
add
popf
sbb
int
mov
shr
(bad)
cld
pop
iret
into
das
jle
pop
cli
ficom
fdivr
push
push
gs
mov
pop
xor
dec
mov
dec
sub
inc
jecxz
push
hlt
and
rol
(bad)
jae
inc
jp
scas
mov
(bad)
xor
stos
(bad)
mov
pop
retf
xchg
je
jle
xor
xor
popa
aam
les
js
repnz
les
pop
std
jae
or
add
ins
loopne
mov
pop
add
push
test
ds
cld
mov
jae
cdq
int3
and
add
shld
sbb
retf
sbb
iret
nop
jle
not
rcr
add
lea
mov
mov
fidiv
jl
sbb
xor
sub
inc
and
loop
sbb
or
lahf
and
out
es
rep
retf
mov
inc
mov
jo
adc
int3
fs
idiv
out
int
jmp
adc
shl
sbb
or
nop
push
inc
loopne
jl
sub
into
add
pop
jle
int
ins
imul
daa
sahf
aam
pusha
shr
(bad)
push
inc
cmp
int
imul
mov
hlt
mov
pop
shl
stos
xchg
lods
inc
or
fldcw
test
inc
jnp
mov
sub
(bad)
int
sahf
mov
cli
je
sub
cld
out
mov
cmp
adc
sub
sub
in
xchg
mov
(bad)
js
ret
cmp
jo
push
jge
leave
fadd
sbb
mov
jnp
sbb
daa
mov
pop
mov
lods
and
and
(bad)
add
push
push
cmp
add
pop
(bad)
fnsave
jae
pusha
in
pop
pusha
dec
pop
(bad)
fnstcw
cmp
jp
xchg
or
rcl
jmp
sub
dec
jne
add
fild
lods
adc
push
cmp
cs
fisubr
ds
and
call
cs
push
xor
dec
inc
aad
xchg
mov
jg
and
(bad)
mov
mov
add
pusha
pushf
pushf
lea
jmp
cmc
cmp
pushf
push
mov
lea
ja
inc
bt
sub
mov
bts
pushf
bts
add
add
movsx
mov
bt
seta
mov
test
clc
repnz
push
mov
lea
jne
movzx
cwde
mov
call
cmp
pushf
lea
jb
clc
cmp
pushf
mov
mov
jmp
jp
je
mov
push
push
mov
mov
jl
stos
sub
add
aad
fwait
push
sbb
(bad)
dec
int
sub
inc
and
or
popa
push
lods
push
out
fs
lock
mov
mov
cmp
call
dec
mov
jg
cmp
add
inc
ficomp
sbb
xchg
ds
inc
xchg
xchg
mov
cdq
jns
sub
fs
xchg
push
idiv
xor
xor
add
inc
inc
cmp
mov
cmc
mov
mov
pop
adc
in
mov
sbb
fsubr
lea
repz
jmp
sub
jle
xchg
sbb
js
push
or
push
or
(bad)
mov
out
test
jle
inc
mov
arpl
aaa
cs
and
movs
cmp
mov
xchg
mov
mov
arpl
aam
jle
jp
lods
xchg
mov
rol
icebp
js
jle
cmp
fld
lea
jbe
sbb
sub
adc
(bad)
addr16
adc
aas
imul
sti
adc
cld
aad
xchg
xor
loope
ins
movs
cmc
dec
lods
inc
jae
out
inc
mov
mov
pop
hlt
inc
cmp
pushf
pusha
lea
jne
pushf
pushf
push
jmp
icebp
jmp
push
imul
inc
mov
ret
scas
addr16
sub
pop
mov
dec
(bad)
std
sbb
xor
pop
pop
shl
jl
test
add
add
mov
mov
xchg
inc
jne
stos
cli
pop
(bad)
jns
fist
jg
or
dec
(bad)
mov
push
int
sub
pop
mov
jl
add
sbb
je
(bad)
inc
jns
cmp
pop
mov
dec
inc
cmp
call
cmps
mov
ins
shr
xchg
or
sahf
xor
and
fstp
out
mov
inc
mov
push
call
and
inc
inc
mov
xchg
dec
mov
inc
dec
add
jo
push
sbb
pop
jno
adc
inc
pop
fnstcw
sub
or
push
aam
mov
idiv
cli
push
fwait
xchg
stos
pusha
cdq
dec
and
and
add
or
cmc
cmp
movs
bound
add
adc
fwait
int
stos
loope
mov
xchg
into
jecxz
xor
mov
(bad)
popf
js
dec
dec
mov
and
adc
out
rol
mov
stos
pushf
xchg
cwde
fisubr
xchg
es
mov
shr
mov
test
call
shl
stc
push
call
test
jle
fdivr
ins
shl
aas
push
shufps
loop
in
adc
aas
or
mov
movs
pushf
cmp
les
icebp
add
cwde
out
addr16
dec
mov
inc
xor
adc
jae
dec
icebp
call
and
int3
cs
xor
mov
sub
and
push
mov
dec
test
ret
cld
jbe
inc
stc
pop
sbb
icebp
mov
in
push
movs
pop
and
cmp
add
retf
leave
stc
jp
xor
leave
jmp
pop
sbb
adc
sbb
(bad)
loop
jle
cs
in
pop
es
sub
and
test
xchg
and
pop
in
jne
pop
(bad)
(bad)
clc
ror
dec
cmp
add
mov
popa
aaa
add
data16
(bad)
xchg
leave
cmp
mov
adc
pop
mov
add
loop
mov
jmp
mov
ds
stc
sbb
sub
or
icebp
daa
cld
movs
pop
jb
add
xchg
addr16
inc
mov
adc
xor
mov
sbb
mov
xor
mov
mov
cmp
mov
rcr
mov
jb
fadd
mov
cdq
out
xchg
inc
pop
push
or
pop
pop
frstor
fs
dec
adc
rcl
pop
outs
movs
jb
sbb
xor
ror
pop
mov
dec
mov
lods
fs
gs
and
mov
mov
cmp
or
ficom
popf
sbb
je
sub
(bad)
or
xchg
lahf
jge
dec
jmp
int3
lods
and
das
retf
in
xchg
lods
icebp
(bad)
dec
bound
mov
outs
daa
into
adc
pusha
adc
test
mov
cmp
and
adc
add
mov
call
adc
lods
test
lods
scas
sub
shl
addr16
pop
fcom
mov
shr
out
stos
inc
push
cs
jle
mov
mov
mov
push
xor
inc
into
xor
aam
shl
mov
sub
test
or
add
ror
mov
cmc
pusha
test
call
add
stc
call
jl
or
jle
ja
iret
ret
fdiv
pop
adc
sub
xchg
out
mov
jb
add
out
xlat
lea
push
pop
gs
ret
outs
mov
enter
jmp
imul
pop
stc
adc
pop
repnz
je
test
adc
loop
or
cwde
dec
popa
xchg
xor
cmp
repz
mov
adc
scas
cmps
pop
std
mov
sbb
jno
mov
in
or
dec
inc
push
jl
sbb
outs
imul
test
into
and
aas
inc
mov
pusha
mov
loope
mov
cs
sbb
and
(bad)
or
push
pop
ret
idiv
push
(bad)
dec
jle
add
dec
ds
scas
cmps
loopne
mov
in
pop
aad
or
inc
dec
add
shl
push
test
ins
loope
ins
jle
xor
sub
call
cmc
int3
shl
pop
pop
or
outs
je
lods
repnz
add
xor
and
xchg
push
push
sbb
addr16
ret
mov
sub
loop
xor
aam
mov
dec
jecxz
out
xchg
dec
adc
dec
popa
jae
jecxz
jno
xor
dec
jmp
sub
mov
lahf
mov
rcr
xlat
mov
retf
add
enter
mov
add
inc
ds
out
fcmovbe
popa
inc
js
add
sbb
cmc
aad
jnp
ret
mov
(bad)
mov
cmps
out
xchg
movs
movs
pushf
jl
(bad)
aam
jmp
lea
dec
fsub
xor
xor
sub
adc
xchg
or
add
pop
xor
dec
fs
inc
jg
xchg
mov
leave
pop
mov
xchg
stos
ret
jns
adc
xchg
call
aaa
pop
(bad)
ss
push
stos
sub
test
mov
leave
out
sar
es
push
push
and
sub
cli
mov
sahf
push
lahf
pusha
aaa
sar
inc
jle
mov
jns
dec
int3
bound
inc
xchg
xchg
inc
fcmovnb
stc
dec
and
cmp
movs
ficomp
in
xor
inc
mov
loop
sbb
fcom
cmp
jns
repnz
xchg
aam
dec
loop
stc
push
(bad)
stos
fbld
cld
nop
gs
xor
or
ret
loopne
(bad)
cdq
push
mov
lahf
(bad)
xor
aam
xchg
or
or
pop
add
add
fiadd
push
call
loope
xchg
iret
xor
inc
shl
mov
sub
cld
mov
push
xor
xor
sar
jbe
mov
(bad)
not
dec
cmp
(bad)
jmp
mov
xchg
adc
pushf
cmc
cmp
or
or
lock
xchg
dec
xor
mov
add
push
or
arpl
or
add
xchg
int
(bad)
jg
test
xchg
add
pushf
stos
mov
pusha
lea
jmp
das
arpl
test
scas
in
push
dec
jnp
sbb
(bad)
xor
pop
jg
enter
pop
xor
mov
cmp
in
idiv
push
sbb
mov
jne
mov
inc
clc
inc
mov
lock
and
lods
popf
adc
xor
mov
lods
or
shr
cmps
in
add
pop
jmp
adc
push
sub
mov
jl
mov
call
fsubr
sub
in
cmp
popf
cmp
gs
in
inc
test
pusha
pusha
dec
jmp
ror
push
push
push
retf
sub
or
lds
lahf
pop
jge
call
sub
(bad)
mov
adc
inc
or
cld
in
mov
ins
dec
(bad)
mov
mov
jecxz
int3
sti
xor
test
dec
pop
pop
sbb
ins
sbb
jecxz
push
imul
loope
pop
icebp
imul
in
sub
scas
jo
mov
and
inc
and
imul
fdiv
sbb
xchg
(bad)
cwde
add
mov
xlat
or
jle
push
fs
mov
es
call
test
js
cs
add
sbb
ss
sub
cli
mov
mov
lock
ret
cmp
rol
retf
pop
daa
getsec
inc
push
ins
ret
xchg
jmp
std
sub
outs
outs
pop
outs
ret
rcr
xor
call
in
mov
pop
loopne
outs
pop
mov
sbb
mov
hlt
fsubp
cmp
jmp
dec
das
sbb
shr
xor
mov
push
out
ins
icebp
sti
xchg
sbb
aam
cld
lds
mov
lahf
push
cmp
into
sub
xor
adc
sub
gs
xor
ins
cmp
leave
and
fcmovnu
push
imul
xor
add
mov
push
mov
jne
xor
pop
aad
bound
mov
into
test
ja
and
fst
test
test
cmps
pop
ret
loop
in
xor
shr
sbb
and
into
movs
cs
cmps
or
mov
pop
lock
dec
lods
arpl
fiadd
sbb
jge
mov
cmp
pusha
ja
lods
xchg
push
cmp
loop
out
xchg
leave
mov
movs
imul
mov
and
cmp
imul
jmp
and
daa
jl
xor
xor
xchg
seto
ret
and
jle
mov
mov
pop
lods
xchg
scas
out
cmp
sub
scas
jl
shl
not
int
fs
and
out
popf
test
cmp
movs
inc
retf
pop
mov
and
jmp
pushf
adc
hlt
addr16
adc
test
fsubr
popf
mov
pushf
xchg
dec
loopne
xchg
dec
xor
iret
xor
add
and
fbstp
dec
or
sbb
inc
pop
inc
scas
dec
jnp
dec
add
cmp
iret
xchg
rcr
cmp
adc
push
fdivr
push
arpl
das
addr16
adc
iret
fbstp
adc
call
frstpm(287
mov
clc
adc
pop
fistp
das
scas
(bad)
jns
into
cwde
xor
arpl
jno
jbe
fsub
mov
and
inc
div
add
jle
jo
dec
and
out
cld
mov
cwde
outs
jns
push
dec
not
push
cli
outs
jbe
(bad)
in
ss
or
and
xor
jge
ins
lea
add
mov
dec
add
hlt
mov
sub
push
jle
lahf
xor
adc
in
popf
jnp
scas
out
jne
nop
into
inc
push
lods
xchg
sahf
push
mov
mov
fsub
test
in
clc
ficom
mov
cmp
loope
xor
adc
ret
test
xchg
push
push
retf
or
cmp
shr
es
mov
repnz
mov
outs
cmp
imul
sbb
pop
je
in
shr
(bad)
jb
dec
movs
outs
fwait
xor
push
cdq
fidivr
dec
into
mov
out
mov
test
adc
ret
mov
mov
pushf
or
js
cmps
ins
les
arpl
mov
std
cli
mov
lea
and
aaa
jb
mov
mov
mov
push
cmp
aaa
jnp
aam
out
and
mov
jo
imul
push
imul
sbb
xchg
cmp
repz
push
stos
pusha
push
push
lea
jmp
lea
call
push
pushf
mov
push
mov
pushf
push
lea
jmp
cmp
pusha
lea
je
pushf
cmc
mov
cmp
push
mov
lea
je
push
lea
jmp
and
icebp
jg
push
sbb
cs
push
lds
test
popa
xchg
add
ror
cmp
scas
lahf
mov
retf
mov
aas
scas
in
add
pop
call
or
mov
fimul
mov
imul
pop
imul
mov
jecxz
fstp
and
mov
cmp
stos
rcl
dec
ror
ins
in
inc
in
xchg
ins
arpl
out
jge
leave
repz
iret
cmc
push
lods
push
and
adc
add
dec
rol
add
mov
outs
and
xchg
mov
fcomi
popf
je
jecxz
sqrtps
sti
les
mov
push
add
dec
jecxz
lea
jne
mov
mov
not
push
lahf
lea
pusha
pushf
pushf
mov
push
call
add
inc
gs
outs
fs
gs
imul
add
pop
scas
jle
push
xlat
aam
lods
in
cli
dec
lds
pop
in
and
mov
inc
cli
bnd
jnp
mov
jo
and
retf
sub
jbe
jp
lea
adc
or
test
mov
pop
add
shr
add
aas
cmc
sti
iret
movs
dec
add
aad
enter
jnp
out
fwait
push
push
pop
ficom
mov
jns
les
repnz
inc
inc
push
sub
xchg
ficomp
sti
push
retf
aaa
dec
rep
xchg
sub
sbb
test
and
aad
mov
pop
jbe
cdq
mov
mov
xchg
or
js
jle
mov
fcmovnb
mov
xor
es
icebp
push
loop
inc
jp
add
cli
pop
scas
(bad)
xor
or
sbb
lds
inc
push
jb
popf
and
repnz
pop
jmp
ins
and
retf
stos
xor
xrelease
cmp
leave
popa
push
ins
arpl
lds
mov
and
lods
adc
jmp
cmps
cmps
dec
cwde
(bad)
out
icebp
cmps
enter
mov
mov
and
mov
or
(bad)
xor
dec
push
sub
stos
ret
pop
(bad)
fisttp
cmc
jmp
jp
add
enter
(bad)
push
adc
loope
dec
mov
fist
ja
gs
pop
dec
lahf
cmp
or
push
sbb
daa
out
adc
push
sub
xchg
mov
into
repnz
jae
bt
xor
pushf
pushf
cmp
cmc
sub
jmp
or
fbld
fist
arpl
sub
xor
adc
adc
xchg
inc
mov
repz
jl
add
icebp
adc
adc
adc
lods
movs
xor
stos
mov
mov
ins
jg
mov
and
jg
jne
and
not
dec
out
inc
aad
(bad)
sar
and
sbb
or
pusha
jmp
cmps
mov
add
pop
enter
jecxz
pop
push
sub
sar
js
lock
cld
jne
or
mov
jns
sbb
fnsave
cmps
and
ficom
lea
inc
lahf
add
pop
and
inc
sbb
jl
push
mov
adc
lods
test
stos
mov
ja
dec
add
xor
mov
jecxz
sti
imul
cdq
rol
lods
xchg
lea
cs
mov
and
call
mov
popa
dec
arpl
push
in
aas
scas
add
mov
data16
fs
pop
cld
dec
add
jo
sbb
les
fimul
cmp
cwde
mov
loop
test
mov
cmp
in
inc
xchg
sub
movs
jnp
out
jae
cmp
hlt
fcom
rcl
ret
sti
das
test
inc
mov
push
mov
lods
test
pop
dec
mov
jb
jb
and
cmp
dec
hlt
not
iret
test
add
lahf
push
das
or
or
jp
add
sub
ror
jmp
adc
dec
ss
mov
ja
pop
sbb
out
xchg
mov
cdq
jmp
or
scas
add
loopne
xchg
bound
jo
imul
pop
sti
cmp
jns
movs
fwait
stos
add
xchg
or
into
inc
dec
mov
pushf
rol
adc
nop
or
in
dec
in
fwait
call
inc
mov
scas
das
jecxz
and
shr
test
xchg
scas
pop
push
mov
in
in
lahf
mov
not
mov
lods
call
inc
mov
push
push
xor
(bad)
mov
dec
fst
(bad)
or
mov
dec
cmp
dec
rcl
stos
shl
xchg
stos
mov
or
aaa
iret
inc
push
mov
dec
leave
inc
test
lods
pop
pop
sbb
pop
mov
cs
movups
xchg
lods
bound
fdiv
fst
stos
push
and
ins
and
pusha
xchg
or
movs
mov
jo
jmp
(bad)
pop
bound
fsub
adc
mov
iret
mov
pop
iret
mov
test
xor
sbb
mov
cdq
sbb
cmp
dec
(bad)
xlat
outs
lods
gs
es
call
push
dec
daa
popf
jb
dec
add
(bad)
call
addr16
push
mov
cwde
jb
sti
cmps
jl
(bad)
jg
mov
xor
mov
lea
and
sahf
fs
inc
int3
mov
mov
push
inc
jns
(bad)
mov
test
sub
mov
mov
jb
cld
in
pop
adc
repnz
xchg
outs
imul
and
lods
mov
pop
mov
mov
hlt
cmp
movs
pushf
push
stc
scas
(bad)
out
adc
ror
outs
cmp
push
out
jg
cmp
sub
inc
es
mov
fs
jmp
test
jnp
jle
sahf
and
cmp
lds
mov
pop
pop
and
popfw
sbb
imul
vorps
adc
mov
mov
test
test
sbb
cmc
dec
test
jle
push
lods
loope
mov
inc
inc
mov
out
call
dec
dec
xor
xchg
outs
movs
(bad)
cmc
ds
stos
mov
loopne
pop
xor
iret
(bad)
push
dec
push
ins
les
pop
mov
xor
add
imul
psrlw
add
jno
inc
jl
std
push
test
jg
sub
jmp
jae
jbe
xchg
(bad)
outs
repz
int
jo
xor
js
push
jp
rol
ret
test
inc
jl
add
xchg
push
or
sbb
inc
fcom
or
pop
dec
imul
rcr
mov
loopne
sub
fwait
adc
xchg
dec
and
or
ror
add
loop
scas
jns
adc
push
jmp
jp
xor
mov
(bad)
fst
jne
cmp
xor
cmc
pusha
or
mov
pushf
lea
je
aam
shl
shld
cmc
sub
bswap
dec
aaa
mov
call
jno
aad
js
push
inc
and
aas
cmp
and
jp
push
push
inc
je
pushf
pop
scas
mov
dec
les
push
mov
scas
pop
mov
push
mov
mov
movs
pop
pusha
(bad)
adc
lahf
js
ss
push
icebp
sub
into
pop
aad
into
xchg
mov
je
jno
push
aas
xrelease
(bad)
push
stos
mov
mov
leave
or
dec
cld
dec
fimul
mov
std
hlt
mov
jge
dec
retf
add
loop
cmc
cmp
push
mov
push
data16
sti
fst
test
pop
ret
jns
and
inc
inc
jge
call
es
cs
mov
sbb
xchg
dec
popa
pop
jbe
scas
push
movs
je
daa
lahf
aad
jle
jle
cmps
fld
mov
xor
daa
fnsave
lock
jbe
scas
dec
add
xchg
nop
cmp
fwait
movs
adc
or
mov
jecxz
rol
ja
or
fiadd
sub
outs
pushf
jne
and
push
fcmovb
jl
fidivr
std
and
out
mov
test
inc
aad
jmp
ss
retf
jge
js
xor
ror
loopne
push
repz
es
jmp
inc
ror
xchg
int3
push
mov
aam
scas
dec
outs
popa
mov
jns
add
fs
cld
repz
xchg
and
adc
imul
arpl
cmp
add
es
dec
inc
pop
pextrw
(bad)
xchg
sub
cld
sub
ins
dec
sbb
adc
jle
(bad)
fist
adc
adc
pop
xchg
inc
xchg
sub
cmps
mov
ret
(bad)
xlat
fs
xlat
setge
xor
jp
and
(bad)
leave
add
pop
ror
adc
inc
rcr
and
cmp
pop
mov
add
push
lods
jecxz
cmp
jo
pop
lock
mov
sub
mul
push
adc
push
dec
mov
xlat
and
fcmovbe
outs
js
stos
into
daa
xchg
sub
jp
xor
xor
cmc
mov
rcl
das
int
bound
fmul
fldcw
xlat
loope
shr
mov
xchg
push
sbb
xor
(bad)
popf
jbe
xor
jne
push
popa
popa
sbb
xchg
and
or
xor
cs
jb
and
jnp
clc
loope
add
popf
movs
sbb
(bad)
sahf
lahf
js
adc
and
movs
sbb
dec
and
cmp
retf
jecxz
mov
jecxz
fmul
sub
(bad)
mov
aas
dec
or
pop
rcr
mov
ds
push
sahf
popf
popa
pop
add
adc
enter
mov
mov
and
enter
stos
xchg
in
shl
and
dec
in
xchg
dec
dec
data16
sbb
jns
pushf
xchg
adc
scas
sub
xchg
ins
and
int
ja
nop
call
push
shl
cmp
dec
pop
ss
dec
test
mov
and
push
add
jge
xor
push
shl
into
xchg
xor
mov
nop
mov
push
fst
cmps
(bad)
dec
movs
mov
leave
add
out
mov
(bad)
jmp
push
daa
lock
pop
movs
mov
mov
fisttp
loope
jno
xchg
nop
dec
dec
sahf
xor
xor
sub
fcmovb
jg
mov
push
or
cli
nop
loop
js
or
mov
outs
popf
mov
mov
push
cld
cmc
mov
mov
aas
nop
test
jmp
test
mov
dec
jno
jae
push
fist
add
ret
push
xchg
int
xchg
add
sub
scas
cmp
jae
push
sbb
inc
jmp
js
xor
jg
cmc
sub
popa
cmp
xor
loope
xchg
lods
jecxz
lods
int
ja
pop
xchg
dec
dec
outs
out
cmc
or
jecxz
jo
ja
fdivr
xor
push
mov
fnstsw
mov
xchg
mov
fstp
and
leave
adc
pop
pop
shl
xor
or
dec
xor
and
mov
ja
sbb
fstp
rol
ja
push
sbb
mov
icebp
gs
mov
dec
pusha
fdivr
adc
mov
sbb
jle
test
and
int
pop
lea
std
cmc
lods
push
mov
adc
xchg
or
rcr
and
hlt
jmp
adc
add
jne
adc
aam
pop
jne
xchg
lds
mov
(bad)
(bad)
push
sbb
pop
fs
jb
sub
out
sahf
cmc
push
ficomp
iret
cli
pusha
daa
gs
lea
add
test
cld
mov
fld
sbb
mov
push
cmp
sahf
inc
ror
pop
cmp
shl
push
dec
xor
and
adc
jmp
imul
(bad)
cwde
jo
xor
repnz
fcomp
pushf
adc
mov
(bad)
in
xor
push
jmp
lock
rol
in
movs
fist
dec
or
ficom
mov
in
xchg
pop
and
or
xchg
sbb
ja
sti
add
jmp
addr16
xor
sbb
out
dec
in
mov
mov
pop
test
ficomp
inc
jmp
inc
jne
cmp
pop
mov
loop
lods
push
test
xchg
mov
xor
enter
in
daa
pop
jg
lock
rcl
mov
inc
scas
cmps
(bad)
pop
out
jb
fs
adc
push
mov
mov
pop
cmp
add
mov
and
inc
movs
mov
call
dec
es
out
(bad)
pop
jae
not
or
xor
push
pop
fcmovbe
cmp
push
lds
pop
xchg
add
popa
xchg
mov
dec
bound
mov
scas
mov
je
inc
add
gs
sbb
mov
push
retf
cmp
sti
add
adc
add
shr
fwait
std
and
jo
and
or
jbe
sbb
(bad)
inc
or
fidiv
inc
ror
adc
cli
xor
mov
pop
cmp
mov
fsub
and
ins
and
cli
shl
sbb
fsubr
(bad)
fnstsw
xor
lods
inc
push
sbb
loope
xchg
adc
gs
xor
jle
pushf
jle
in
test
pop
xchg
int3
cmp
(bad)
je
add
jb
fst
pop
and
rcr
arpl
in
inc
int
ins
test
fs
jb
xchg
(bad)
mov
xor
inc
imul
push
cdq
sub
add
add
loop
ins
mul
add
jae
dec
push
jnp
das
popf
cdq
pop
xchg
scas
xchg
push
and
not
jge
test
sub
push
inc
push
jle
xchg
cld
fs
or
cmps
fcmovne
int3
test
arpl
sbb
iret
daa
ja
and
(bad)
jae
aad
or
mov
cmc
mov
dec
sahf
inc
and
int
dec
out
lea
je
btc
btc
mov
shrd
sar
jmp
int3
inc
imul
mov
cmp
inc
cmp
mov
xchg
push
gs
(bad)
retf
(bad)
retf
push
(bad)
loope
outs
addr16
pop
push
icebp
clc
sbb
push
sahf
fcom
ret
scas
mov
cmp
xchg
call
arpl
dec
mov
xor
mov
cmp
jmp
fs
xchg
dec
inc
sbb
mov
mov
aam
ins
outs
out
push
clc
jnp
out
aas
mov
sbb
loop
repz
out
or
das
pop
icebp
mov
jle
mov
cmp
sti
push
xchg
ins
call
mov
add
test
dec
cli
or
add
inc
cmp
or
test
outs
jle
sbb
cmp
push
mov
mov
ror
stc
jo
enter
jnp
inc
mov
dec
cmp
mov
adc
sub
inc
and
push
bnd
sbb
enter
imul
rcl
dec
stc
mov
xor
pop
fbstp
pop
cmp
mov
loope
or
js
repnz
loopne
fst
cmc
push
ror
iret
inc
sbb
mov
jge
sbb
ror
or
mov
xor
push
jmp
enter
out
test
imul
and
push
cmc
mov
sub
pushf
mov
push
push
lea
call
test
cmp
pushf
call
mov
pop
dec
outs
jle
add
neg
xchg
ins
out
ror
inc
std
mov
xor
push
and
lods
movs
ficomp
cld
xor
cdq
stc
nop
test
cdq
dec
popa
fidiv
pusha
pop
jne
dec
or
popa
xchg
les
inc
mov
(bad)
cmp
mov
fidiv
rol
pop
mov
outs
mov
aaa
mov
jl
xchg
push
cld
xor
mov
repnz
gs
das
out
out
daa
or
fcom
inc
retf
dec
ret
cmp
arpl
jbe
cmp
es
jmp
jmp
popf
xchg
sahf
push
imul
xchg
inc
cmp
push
adc
xchg
arpl
cmp
xlat
cld
hlt
mov
lods
sbb
repz
not
adc
out
pushf
push
aas
jl
push
xor
push
dec
add
mov
stos
not
mov
mov
in
and
aam
imul
imul
stos
push
out
sbb
mov
sahf
in
daa
mov
das
push
xor
enter
or
rol
jge
xor
test
ds
icebp
inc
sbb
pop
push
loope
mov
aaa
scas
pop
in
or
dec
addr16
repnz
cwde
pop
loop
push
rcr
dec
xor
and
cmps
sub
ins
jle
pushf
jl
cwde
xchg
push
sbb
sbb
fsqrt
mov
je
enter
jb
das
daa
pop
ret
or
cwde
push
pusha
xchg
ins
ret
jmp
inc
pop
aaa
shr
stos
in
and
push
pushf
pop
mov
je
dec
cmps
int3
inc
imul
mov
and
cli
mov
dec
push
push
or
aad
xor
sbb
call
int
inc
in
sub
sbb
adc
imul
cs
movs
enter
mov
inc
popf
std
aam
std
aas
aad
mov
dec
xor
(bad)
je
xor
dec
xlat
inc
cwde
add
sbb
mov
or
stos
lock
xchg
retf
sbb
stos
or
mov
sub
ret
xor
in
inc
sub
jns
sub
enter
dec
adc
jp
jle
repz
int
lahf
in
jle
push
ret
cmp
add
adc
xchg
sahf
leave
pop
xor
cmps
add
mov
push
or
sbb
(bad)
idiv
jno
sub
mov
mov
loope
pop
lods
test
adc
jmp
xchg
imul
jg
xor
jbe
add
cdq
adc
lea
smsw
stc
mov
mov
mov
mov
ds
(bad)
xor
test
mov
dec
out
and
(bad)
cs
lock
fs
call
mov
pusha
lea
jae
cmc
cmc
jmp
jb
mov
imul
adc
(bad)
push
(bad)
int
in
mov
ss
shl
jo
ins
mov
push
mov
mov
cmp
xchg
in
pop
lock
xor
dec
mov
xor
inc
fwait
outs
fild
pop
mov
or
mov
lea
mov
cwde
and
loop
(bad)
jnp
push
mov
sub
jne
or
retf
test
out
xchg
pop
pop
fimul
hlt
popa
dec
mov
or
jne
adc
test
(bad)
(bad)
jb
or
outs
jo
cmp
jmp
mov
push
cld
xor
scas
mov
das
in
ret
xchg
sbb
aad
mov
and
dec
leave
adc
xchg
imul
cmp
inc
fisubr
or
push
pop
jge
dec
rcl
dec
jl
movs
das
inc
icebp
mov
jne
jmp
mov
retf
and
arpl
fbstp
xchg
scas
hlt
push
push
stos
stos
and
inc
ja
xchg
call
jne
cmps
ficomp
bswap
mov
cmp
cli
sbb
test
jle
inc
mov
cmp
(bad)
mov
jmp
fsubr
inc
jp
movs
sbb
daa
popf
fist
popa
sbb
(bad)
cmp
xor
retf
adc
fidiv
jne
dec
mov
sub
test
bswap
popa
xchg
dec
adc
sub
add
dec
add
out
ficom
cmps
mov
dec
mov
je
cmp
fidiv
fsub
lods
ret
inc
mov
fcomp
ja
mov
retf
mov
pop
sub
push
push
ror
sbb
hlt
mov
push
pop
out
xchg
dec
dec
jmp
cwde
pop
pop
ds
loop
xor
test
xchg
test
xor
hlt
jmp
inc
mov
in
test
jae
fisub
sub
in
stos
in
xlat
mov
out
dec
ror
cmp
das
cmps
scas
mov
cmc
imul
mov
mov
dec
and
out
enter
adc
ret
sbb
sbb
cmc
mov
mov
mov
sub
add
hlt
or
enter
popa
push
jl
push
or
and
jae
in
test
inc
movs
test
push
jg
and
cmc
into
mov
pop
adc
scas
fs
push
mov
adc
sti
fcmovnbe
jge
jns
cmp
pop
scas
mov
push
pop
cmp
cmc
rcr
lahf
sbb
imul
fisubr
xor
push
push
rcr
xchg
jecxz
je
jb
mov
jnp
aas
jne
sub
test
dec
fcom
les
fnsave
sub
(bad)
fnstsw
sub
cli
jb
in
cs
pop
xchg
mov
fst
stos
sbb
jns
ror
jle
xor
pop
push
lods
scas
ins
es
ret
ror
nop
(bad)
out
sbb
xchg
add
mov
push
lahf
push
ja
packuswb
rol
xchg
popa
js
mov
pop
pop
repnz
add
lods
popa
test
movs
jb
xor
fnstenv
cmp
ja
outs
sub
int3
and
popf
fmul
cmp
ds
test
and
cdq
loope
arpl
ins
nop
(bad)
or
xor
or
test
hlt
sbb
stos
je
dec
add
mov
dec
push
jae
sub
pop
jne
jmp
mov
rcr
mov
push
inc
xor
inc
enter
pop
cwde
psubw
aaa
hlt
cmp
(bad)
mov
mov
shr
jno
jmp
mov
pop
popf
xchg
xchg
mov
fs
in
test
int
xchg
xchg
dec
jo
repz
xchg
mov
das
movs
add
call
retf
lock
cmp
dec
(bad)
ja
jnp
mov
ss
xor
je
add
push
sub
dec
add
call
mov
ret
cmp
jmp
test
cli
cld
jae
fbstp
inc
aam
pop
rcr
cmp
jecxz
imul
xor
ins
mov
sub
mov
cmp
push
dec
loopne
xchg
sar
xor
push
push
out
dec
in
es
add
(bad)
push
mov
cmp
add
scas
cmp
shr
out
sti
(bad)
clc
ror
jmp
jmp
sub
sti
data16
mov
push
sar
xchg
das
movs
jp
xlat
mov
push
retf
loopne
mov
imul
dec
mov
jmp
or
mov
or
inc
jne
mov
pop
fwait
jecxz
int3
or
dec
mov
neg
sub
mov
rol
mov
cmp
jmp
xor
or
call
sahf
xchg
ins
inc
ficom
jmp
push
cmps
jmp
cld
mov
fst
jnp
sbb
cmp
jle
xor
sar
ins
out
jg
inc
jecxz
mov
ror
std
hlt
cmc
jb
push
into
pushf
xor
cmp
mov
test
lock
mov
add
(bad)
test
xchg
dec
ret
ret
(bad)
gs
repnz
popa
and
popa
mov
adc
iret
test
aaa
test
mov
lods
scas
out
pop
nop
xchg
dec
fdiv
fs
sbb
ss
adc
xchg
das
mov
es
ret
loopne
punpcklwd
(bad)
adc
loopne
jbe
and
cld
dec
mov
aaa
xor
lods
xchg
out
ja
and
dec
sub
jge
cmps
xchg
sahf
push
and
add
xchg
jl
call
in
gs
dec
das
es
jle
push
jp
icebp
gs
jmp
mov
std
jae
fst
xchg
(bad)
fnsave
sub
jbe
(bad)
push
xor
sbb
inc
jg
sbb
sub
cld
fcom
out
adc
cli
dec
mov
sub
inc
mov
data16
retf
adc
add
xchg
dec
adc
mov
aad
rcl
add
push
push
ret
pushf
mul
int
add
push
pop
mov
test
xor
sbb
aaa
(bad)
out
push
xchg
in
and
(bad)
sub
push
retf
xchg
or
mov
cmp
(bad)
(bad)
cld
jne
fisub
add
adc
fdiv
stos
int3
add
test
pushf
or
xor
shufps
in
dec
jo
lds
cli
shr
xchg
jmp
int
pop
cmp
or
mov
push
cs
aaa
fcom
or
(bad)
mov
inc
push
mov
jmp
(bad)
inc
pop
mov
test
fwait
sar
aad
push
test
cmp
mov
push
add
fnsave
cmc
pop
pop
jp
retf
arpl
daa
(bad)
data16
pop
movs
in
push
and
in
test
out
jae
xchg
out
mov
adc
jns
sahf
fnstsw
sub
jmp
mov
fist
aaa
jg
jle
mov
fmul
push
xlat
or
cmp
cmp
push
ret
cmps
das
push
sub
inc
pop
pop
iret
mov
xor
push
jnp
jns
sbb
int
imul
sbb
enter
cwde
sbb
sub
mov
sar
and
icebp
out
jmp
dec
adc
pop
adc
loopne
aam
stc
stc
outs
xchg
xor
xchg
cmp
sub
cmp
adc
jb
test
lock
push
xchg
sar
add
shr
xchg
xchg
dec
inc
fiadd
fnstenv
push
xchg
or
adc
sbb
xor
push
xor
cld
adc
inc
or
mov
mul
push
sbb
dec
mov
ffreep
retf
jo
ror
popf
movs
sbb
add
pop
and
aam
xchg
jg
and
jae
out
xchg
or
retw
ja
pop
aam
fwait
out
cs
pusha
sbb
mov
xor
add
mov
leave
mov
xchg
push
movs
sub
add
movs
mov
js
sbb
movs
jnp
pop
cmps
cmp
repnz
adc
jmp
push
mov
mov
gs
jge
jmp
push
rcr
push
cli
icebp
or
mov
pop
sar
bound
loop
dec
pop
nop
xchg
or
outs
inc
cmp
(bad)
in
push
loop
cmp
add
call
retf
add
(bad)
xor
test
stos
loopne
mov
inc
std
(bad)
(bad)
push
ins
jmp
js
in
lock
add
pop
add
(bad)
inc
outs
mov
loope
pop
jo
sub
pop
sub
inc
cli
inc
push
clc
jmp
mov
ins
gs
loopne
cwde
jns
push
inc
inc
(bad)
mov
rcr
pop
icebp
stos
jecxz
call
fnstenv
std
jbe
jae
clc
js
test
(bad)
fldz
inc
jne
adc
lea
jae
push
pusha
pusha
lea
jae
call
dec
inc
icebp
aaa
popa
jle
pop
aas
jbe
lods
mov
popa
sbb
mov
inc
sub
addr16
fdiv
loopne
lahf
pop
pop
push
xchg
loopne
shl
movs
stos
cwde
bound
(bad)
push
mov
loopne
cmp
mov
ror
and
gs
or
cmc
pmulhw
mov
xchg
ret
sbb
ror
imul
xchg
scas
movs
(bad)
into
cwde
outs
bound
mov
sub
mov
(bad)
xchg
stos
arpl
les
ret
push
repnz
inc
and
mov
loope
not
clc
call
lea
jne
lea
setge
setle
pusha
mov
pusha
pushf
lahf
bswap
mov
setl
call
mul
xchg
fstp
push
xchg
stc
repnz
loope
sub
data16
push
jbe
xchg
and
inc
fadd
cmp
and
add
scas
in
into
jno
dec
dec
mov
shl
lock
dec
dec
loopne
dec
icebp
(bad)
jno
lahf
sub
mov
psubusb
data16
retf
add
cmp
push
dec
jmp
div
les
fwait
xchg
pop
ss
ficom
in
and
stc
das
xor
cmp
dec
movs
mov
adc
cmp
iret
xor
adc
(bad)
sti
push
pusha
ficom
push
int
add
mov
inc
dec
int
push
pop
daa
add
inc
cmp
adc
push
cmp
ret
adc
adc
aam
test
stos
call
out
xor
dec
and
retf
test
in
test
push
mov
jne
test
cmp
retf
into
push
int3
ds
dec
mov
add
pop
(bad)
mov
xchg
enter
inc
cmp
sbb
jae
or
or
call
loope
mov
pop
adc
ret
push
sub
repz
dec
dec
shr
(bad)
fwait
je
ds
pop
mov
sbb
adc
or
outs
mov
rcl
jns
adc
out
out
inc
cld
push
pusha
lea
call
pusha
mov
pushf
jmp
btc
shr
neg
test
dec
mov
stc
cmc
clc
or
push
pusha
mov
pusha
lea
je
rcr
dec
shr
add
sbb
cmp
cmc
sub
xadd
rol
shr
sbb
xadd
rol
mov
shl
add
or
sbb
cmp
stc
add
sbb
and
mov
cmp
cmc
shr
pusha
stc
stc
cmp
pusha
lea
jnp
je
clc
pusha
jmp
ror
mov
jle
fidivr
mov
call
xchg
pop
aam
mov
cmp
nop
ss
xchg
or
push
aas
pop
ret
jne
mov
push
lock
jne
inc
jmp
fwait
xor
scas
scas
mov
mov
pop
das
dec
(bad)
xor
dec
test
adc
mov
cli
cs
xchg
sub
xchg
ror
dec
sbb
and
push
lea
retf
pop
sub
int3
mov
movs
inc
mov
inc
(bad)
mov
int
mov
xchg
mov
ret
stos
mov
cwde
inc
or
inc
fwait
sti
xchg
mov
push
gs
add
jle
(bad)
lahf
xchg
add
jl
xor
xchg
inc
cmp
pop
repz
inc
dec
popf
mov
ins
mov
nop
into
inc
push
es
shl
add
dec
xor
xchg
aas
mov
(bad)
mov
dec
(bad)
loopne
add
lock
pop
nop
rcl
dec
ficomp
out
xor
pop
mov
ins
mov
xor
push
mov
popf
or
clc
mov
xchg
mov
xor
mov
aam
sub
test
add
lahf
xchg
outs
inc
or
aad
pop
or
mov
mov
ja
shr
inc
mov
popa
sbb
mov
inc
ror
test
adc
test
jg
dec
pop
aad
in
popa
sub
jmp
sub
daa
ret
int3
repnz
fsub
sbb
loopne
movs
rcl
mov
in
cmp
dec
mov
pop
stc
mov
ror
repz
cmp
cmp
pop
jnp
and
idiv
pop
movs
or
jmp
jmp
loope
jo
leave
mov
lods
inc
test
sub
add
pop
push
sub
jmp
jg
mov
loope
(bad)
jno
ffree
xchg
jmp
sub
xor
not
dec
sub
sub
pusha
sete
jmp
fidiv
stos
pop
jle
int
out
shr
(bad)
jmp
dec
mov
pop
push
dec
test
mov
dec
bound
cmp
jns
retf
pop
xchg
daa
jbe
int
xchg
out
cld
mov
add
in
cwde
outs
jbe
mov
dec
gs
cmp
mov
outs
mov
inc
mov
leavew
cmp
push
pop
jle
cmp
mov
adc
and
cmp
fsubr
push
js
add
mov
aaa
int
or
in
jl
mov
cmp
idiv
xor
xor
ret
aam
nop
inc
and
add
xchg
dec
fs
add
push
sub
jle
test
pop
adc
sub
in
mov
out
aaa
mov
ins
inc
push
dec
sti
stos
ret
mov
mov
scas
ret
push
addr16
pop
(bad)
cmp
add
lods
xchg
mov
inc
cld
aad
pop
loop
cmp
jns
inc
test
ror
sbb
js
push
ret
lds
push
clc
mov
bound
jo
sbb
(bad)
push
mov
sbb
ss
pop
mov
mov
mov
gs
inc
fild
mov
push
test
out
ret
pop
cdq
push
cmp
mov
adc
lahf
xchg
dec
aaa
lock
jle
jmp
popa
jno
xor
lods
xor
test
dec
push
mov
ins
in
into
cwde
rcr
out
test
xor
or
and
fnstenv
xchg
fwait
mov
es
xchg
xchg
or
push
addr16
mov
jae
sar
mov
mov
fst
xor
jp
(bad)
jne
pop
lock
and
or
sbb
dec
cs
cwde
jae
jmp
mov
in
test
jmp
sub
push
sub
or
(bad)
aad
jle
mov
or
aad
pusha
loope
xchg
ins
jge
stc
add
inc
gs
gs
imul
cmp
mov
lea
je
pushf
lea
jmp
inc
xlat
(bad)
cvtps2pd
vpaddd
nop
fs
adc
inc
pop
(bad)
cmp
pop
xchg
test
jnp
cmc
mov
sti
adc
clc
in
mov
into
mov
push
xor
lods
cmp
or
stc
add
mov
lods
xlat
jno
xor
add
inc
es
push
adc
mov
popa
shr
test
sti
ja
pushf
and
mov
mov
pop
ret
ds
fsub
add
and
jle
cmp
cs
sub
cdq
jb
cmp
mov
xor
fst
popf
icebp
sbb
or
add
pop
mov
nop
addr16
dec
lahf
iret
mov
shl
mov
arpl
add
pusha
mov
pushf
mov
pushf
lea
jmp
pusha
mov
outs
pop
jle
and
ins
test
jo
cmps
pop
test
pop
(bad)
sub
push
xor
add
inc
gs
push
or
and
mov
inc
dec
or
out
aas
xchg
sbb
push
(bad)
call
pextrw
pusha
xchg
imul
xor
mov
push
pop
dec
dec
ins
mov
js
ret
cmc
cwde
test
daa
pop
(bad)
or
stos
scas
jp
and
inc
repnz
imul
sbb
push
pop
push
xor
call
push
mov
push
retf
ret
pop
aaa
pop
cmc
scas
cdq
arpl
mov
shr
add
rcr
mov
jle
lds
cmps
jnp
aaa
in
in
mov
push
dec
pop
push
leave
mov
and
movs
leave
sub
sub
add
cli
add
hlt
xchg
push
or
cmps
lods
and
xor
in
sbb
aaa
mov
int
xchg
sbb
pop
scas
inc
pop
je
iret
rcr
sbb
lock
mov
jle
addr16
loop
or
into
inc
inc
sub
pushf
outs
movs
pop
nop
ret
retf
mov
in
shl
repnz
jb
ret
lahf
data16
fcmovne
and
mov
in
add
inc
gs
gs
imul
fs
jle
mov
pop
lahf
xlat
mov
pop
es
fld
inc
neg
clc
push
retf
push
shl
(bad)
out
jns
jmp
je
adc
pop
pop
push
sub
ficom
and
dec
dec
dec
shl
jo
ins
mov
add
pop
sar
push
call
and
leave
add
push
(bad)
mov
sub
cmp
mov
adc
call
push
lea
out
les
lahf
sti
jb
lahf
cmp
arpl
mov
push
xor
lahf
push
push
bt
jmp
mov
inc
mov
push
stos
cs
mov
bound
lods
xchg
enter
add
loopne
jno
test
mul
jl
adc
jno
iret
cmps
inc
dec
out
xor
inc
add
dec
fwait
rcr
in
pop
(bad)
or
movs
mov
xor
pop
xchg
rcl
test
sbb
xchg
(bad)
hlt
cmp
adc
icebp
cdq
stc
jno
or
jmp
xor
popf
xor
pop
adc
jb
cmc
add
movs
inc
sbb
lods
jne
cld
add
mov
mov
cmp
test
jmp
push
(bad)
repnz
push
out
adc
adc
or
and
repnz
sahf
inc
cmp
repnz
call
mov
dec
ror
mov
adc
rol
xchg
repz
mov
fcmovu
xor
aas
mov
sub
pop
pop
ins
adc
movs
(bad)
cmp
test
inc
ja
cmp
loope
out
push
pop
push
pop
icebp
pop
adc
aaa
inc
stos
arpl
ins
and
adc
les
adc
mov
in
cmp
mov
sahf
ja
inc
mov
int
or
inc
jp
out
xchg
(bad)
aam
cmp
sahf
adc
jg
and
bound
lods
hlt
sub
mov
xor
bound
mov
add
imul
jbe
sbb
pop
dec
(bad)
jmp
stc
das
xor
cmp
sub
push
test
(bad)
ret
xor
adc
jmp
mov
push
fldcw
sbb
or
add
sar
cmp
jo
rol
cmp
mov
loope
pop
movs
enter
mov
scas
retf
loope
jge
jmp
gs
jb
push
jmp
mov
fs
stos
mov
adc
sbb
js
nop
aad
jmp
cmp
inc
outs
ror
outs
movs
mov
xor
cld
push
movs
cld
dec
add
daa
mov
repz
mov
xor
jle
mov
jg
push
or
mov
or
test
jnp
ret
cmp
dec
add
inc
cwde
sub
idiv
mov
sbb
iret
fs
xlat
push
and
sub
cmp
stos
inc
daa
jecxz
xor
jecxz
lods
jecxz
sub
xor
shr
lods
mov
mov
mov
inc
je
addr16
movs
push
scas
and
push
jecxz
push
gs
push
shr
gs
mov
jmp
pop
lock
pop
mov
nop
xor
mov
sbb
shr
push
push
js
mov
repz
in
in
mov
push
mov
int3
fst
retf
daa
pop
lahf
cmc
or
fs
push
ds
fld
scas
fld
xchg
dec
test
sahf
xchg
into
pop
aam
cld
shl
(bad)
cmp
je
sub
cmps
cmps
fwait
pop
jno
inc
fcom
cmp
popa
or
mov
pop
out
dec
mov
pop
adc
imul
inc
pop
dec
jg
adc
pop
mov
jno
sub
push
mov
adc
mov
sbb
into
rol
dec
mov
and
add
ss
cmp
dec
and
jmp
ins
and
out
and
(bad)
cmps
scas
jns
pop
xchg
repz
ret
std
mov
daa
mov
dec
adc
or
push
pushf
cmp
ins
sbb
jle
mov
push
call
adc
jle
loope
sbb
sub
int
add
out
mov
dec
aaa
pop
push
mov
aas
mov
inc
jmp
mov
xchg
push
aam
xchg
xor
ins
xor
or
shl
aad
or
repz
or
enter
pop
pop
add
(bad)
lfs
popf
inc
xor
les
loopne
xchg
sub
cmp
xchg
retf
jp
xor
cmp
jne
adc
sbb
xchg
out
loope
test
repnz
(bad)
xchg
scas
dec
loop
cli
pop
xor
shl
push
pushf
lea
call
pushf
lea
jae
clc
push
pushf
clc
xor
pusha
jmp
add
add
add
pusha
dec
add
pop
add
add
es
push
jle
jbe
and
imul
repz
jmp
lds
mov
cld
mov
aad
xor
adc
retf
lods
xchg
lods
inc
push
into
cmc
cld
leave
mov
jmpw
or
loop
das
gs
mov
loop
fnsave
or
pop
cs
push
(bad)
cdq
adc
or
rcl
dec
shl
scas
gs
push
out
jge
pop
adc
rcl
mov
js
xor
mov
(bad)
mov
jmp
xchg
mov
mov
int3
inc
xor
into
cmps
mov
mov
sub
lock
mov
add
cdq
dec
rcr
push
jle
inc
enter
jns
out
xchg
retf
aad
stos
xchg
lea
sub
fst
pop
pop
lahf
(bad)
(bad)
dec
or
es
enter
mul
out
test
dec
popa
pop
cmc
movs
movs
popf
push
lahf
mov
jle
adc
mov
loope
clc
movs
sub
push
push
test
xchg
or
xchg
shl
jbe
sub
out
jmp
and
mov
xor
mov
push
hlt
stos
rol
push
shr
data16
ja
inc
jns
lock
loopne
data16
not
out
retf
lea
mov
mov
add
jle
cld
popf
push
dec
ret
jo
push
dec
add
into
xchg
or
cld
xor
retf
data16
fsubrp
add
call
jne
in
loop
adc
xor
pop
jae
lgs
int3
xor
sub
xor
xor
call
movs
cmps
pop
rep
push
add
xchg
or
ds
xchg
dec
hlt
ja
and
fcmovu
adc
mov
and
(bad)
mov
add
or
pushf
cmc
lea
pop
push
xor
and
push
cli
cmp
sub
popf
ins
xchg
dec
push
sbb
xor
xchg
pop
push
adc
(bad)
fst
scas
adc
adc
(bad)
push
in
push
aam
cmp
sbb
dec
or
adc
lods
xor
sbb
rcl
(bad)
js
sub
ins
or
pop
and
xor
cmp
jo
retf
add
lods
add
pop
repz
dec
repz
jl
xor
ins
repz
pushf
repz
movs
repz
(bad)
repz
in
xor
add
xor
xor
cmp
push
xor
xchg
jmp
test
add
push
add
test
mov
cmp
cld
xor
test
fs
cmp
cld
xor
test
xchg
xchg
cmp
cld
je
test
hlt
xchg
add
add
in
cli
aam
ins
xchg
in
loopne
inc
jmp
and
ins
call
adc
in
int3
push
push
sar
adc
adc
shr
iret
(bad)
rcr
fcmovnbe
rcr
(bad)
cmc
hlt
repz
xchg
clc
idiv
add
inc
gs
adc
aam
addr16
dec
add
xor
add
push
adc
out
call
sub
daa
cs
pop
pop
pop
push
pop
jbe
sbb
aad
sub
in
sub
call
test
fisub
add
xchg
sub
in
lea
pop
mov
adc
sbb
sbb
imul
xchg
outs
and
push
cmp
jl
push
xchg
sar
pop
aaa
ss
xor
push
test
mov
enter
clc
xor
call
adc
or
cmp
sub
sub
and
push
imul
cmp
jo
push
nop
imul
mov
test
mov
xlat
lsl
lods
sbb
mov
sub
jb
mov
mov
adc
in
pop
mov
je
sbb
xchg
cmp
add
pusha
jp
cmp
pop
nop
sub
xor
sub
ins
pop
xchg
fcom
test
cmp
or
(bad)
pop
push
jl
hlt
stos
or
adc
add
or
je
je
push
nop
or
xchg
imul
fadd
cld
adc
imul
and
push
sub
or
nop
sub
repnz
sbb
sbb
adc
xor
or
jmp
inc
adc
outs
jmp
pop
retf
test
adc
nop
cmps
nop
push
(bad)
mov
jmp
shr
mov
cmc
push
cmovg
pop
jae
imul
push
mov
jecxz
(bad)
jle
add
mov
js
dec
inc
add
js
rcr
push
mov
add
imul
sbb
mov
mov
push
ror
in
stos
cmp
nop
xor
or
aam
xchg
sub
add
push
sbb
add
je
cli
mov
adc
cmp
sbb
adc
or
cmp
sub
cmp
or
add
mov
cmp
int
inc
add
xor
add
pop
mov
imul
add
loopne
ins
sbb
xchg
or
sub
sbb
pusha
cmp
sub
cmp
mov
in
mov
rcl
cmp
pop
pop
in
push
add
out
pop
cmp
sub
and
push
sub
fdivr
mov
jae
add
or
out
jns
xor
add
dec
or
sbb
imul
or
mov
or
(bad)
sub
xor
sub
adc
inc
(bad)
push
mov
adc
fiadd
ds
pop
or
pop
setnp
inc
adc
test
js
lods
ficomp
sbb
xchg
sbb
test
das
mov
(bad)
adc
jmp
leave
movntps
adc
jmp
retf
(bad)
cwde
mov
adc
mov
push
adc
mov
sub
or
in
push
add
xor
jge
push
or
imul
cmp
xor
jmp
lods
retf
popf
sbb
retf
cmp
loop
xor
in
add
out
ins
add
dec
inc
sub
fsubr
cld
rcr
push
out
cmp
sbb
rol
test
cld
push
adc
jecxz
add
pop
xor
stc
xchg
or
in
jmp
(bad)
pushf
and
in
(bad)
scas
mov
cmps
pushf
and
add
mov
in
dec
int3
mov
out
fs
loopne
rcl
les
mov
xor
and
in
push
icebp
inc
cwde
cmp
fdiv
jl
ret
test
retf
hlt
mov
in
push
aam
cwde
repz
cmp
push
lods
jns
iret
inc
(bad)
fimul
or
xchg
push
hlt
add
sbb
fnsave
sbb
jns
jae
add
or
mov
lods
jae
add
dec
push
test
je
mov
mov
sub
call
add
cmp
add
xchg
push
retf
add
iret
cmp
push
cmp
add
mov
add
int3
mov
enter
ret
pop
and
out
cmp
scas
adc
xchg
mov
je
add
enter
ss
fs
pop
mov
push
mov
daa
aam
or
and
add
and
lock
adc
out
xchg
add
iret
sub
loopne
sub
pushf
loope
sbb
jle
adc
arpl
cwde
add
lahf
mov
inc
lahf
sete
add
sti
sub
add
push
sub
xor
xor
in
xchg
mov
in
loop
xor
test
fs
add
and
call
or
scas
fcom
hlt
rol
sub
cld
and
add
out
test
xor
push
push
sub
fstp
adc
push
hlt
(bad)
in
xor
xchg
test
movs
dec
hlt
xchg
mov
mov
push
dec
inc
repz
push
cdq
or
cmp
sbb
(bad)
ret
nop
cwde
add
xchg
aam
in
dec
jae
mov
aad
mov
add
test
add
in
stos
push
lods
or
mov
fwait
sub
adc
loop
pop
rcr
cmp
lods
or
xchg
sbb
shl
jmp
xchg
xor
adc
mov
add
mov
jno
sbb
nop
add
shr
add
call
fs
mov
add
add
push
test
pop
add
in
aam
jae
add
add
fs
jge
dec
fwait
movs
xor
sub
add
leave
sbb
sub
(bad)
jnp
fiadd
call
shr
add
cmp
add
rcr
pop
add
shr
enter
add
add
mov
rcl
movs
daa
add
sbb
inc
fild
mov
pop
int3
fmul
stos
mov
aam
enter
js
inc
sub
mov
jp
pop
nop
cwde
jmp
imul
and
push
sub
xor
pop
ins
sub
dec
push
cmp
cmp
nop
add
or
xor
mov
retf
js
add
xor
fsubr
mov
jg
xor
je
(bad)
stos
sbb
aaa
sbb
pusha
and
adc
push
(bad)
mov
and
sbb
popa
xchg
stos
ret
ds
dec
ret
sahf
les
movups
add
aad
xor
mov
fistp
loopne
dec
cmp
sub
cmp
jl
cld
nop
imul
mov
out
sub
and
lods
pop
call
lock
dec
sbb
jecxz
or
in
or
in
and
inc
imul
je
lock
xor
cwde
pop
repnz
xchg
push
mov
psrlw
gs
inc
or
(bad)
pop
adc
sbb
mov
sub
stos
mov
add
sbb
mov
pop
faddp
jmp
jl
imul
rol
loopne
push
enter
or
cmp
je
cmp
sub
mov
and
sbb
not
pop
aad
add
cmp
pop
jne
mov
mov
or
and
sbb
push
in
popa
jns
xor
sbb
adc
push
push
je
aam
push
in
sub
sbb
add
xchg
sub
jmp
cmp
cmp
pop
loopne
imul
sbb
xchg
cdq
xchg
sbb
sub
mov
icebp
(bad)
je
push
dec
test
sub
inc
push
adc
pop
adc
jmp
imul
ror
fcom
xchg
es
ins
sub
jl
sbb
cmp
xor
mov
add
fdivr
movs
sub
sar
xchg
pop
adc
out
loopne
imul
hlt
cmp
sub
xor
adc
and
sbb
sub
add
xchg
push
movs
fs
push
mov
test
adc
xor
add
xor
add
cmp
or
and
mov
test
adc
jns
dec
movs
gs
jne
lods
cmp
sbb
sub
adc
and
in
lods
cmp
mov
adc
xchg
push
mov
adc
or
sbb
cmp
or
xor
add
or
mov
mov
mov
add
sbb
sub
push
(bad)
es
adc
and
bswap
pop
adc
call
adc
xchg
push
mov
adc
cmp
or
test
(bad)
xor
add
das
out
call
mov
jbe
adc
mov
add
jg
aas
adc
and
push
fisubr
adc
jmp
cmp
pop
xlat
daa
adc
xchg
push
mov
adc
imul
jnp
push
cmps
adc
xor
add
dec
adc
or
sbb
aaa
test
add
mov
mov
pop
mov
xchg
inc
adc
bound
and
push
add
sub
add
popa
adc
imul
adc
sbb
rol
push
outs
dec
jp
add
loopne
das
or
pop
xchg
add
and
push
adc
cmp
add
or
scas
or
ror
add
or
nop
outs
fs
popf
add
fs
in
in
jae
mov
shl
add
adc
add
jp
(bad)
jmp
aam
cmp
in
sbb
aam
mov
in
mov
js
lds
ss
jnp
or
ds
and
sbb
jmp
sbb
adc
add
imul
and
or
add
pushf
in
aaa
push
shr
xchg
cmp
or
cmp
cmp
cmp
imul
cmp
jmp
add
imul
sub
and
sub
das
pop
ds
cmp
sub
sbb
cs
and
push
pop
jnp
or
mov
sbb
fwait
push
or
push
cmp
and
cmp
push
add
push
cmp
pop
pop
imul
mov
cmp
outs
dec
imul
cmp
imul
inc
jg
sbb
sbb
sub
or
lods
jne
jp
fs
or
inc
or
dec
dec
and
or
lock
pop
xchg
sbb
lods
cmp
sti
push
dec
pop
lea
dec
sbb
dec
es
shl
sbb
sbb
push
in
or
jmp
inc
sbb
cmp
xor
std
std
inc
fild
pop
bound
daa
pop
cmp
jmp
and
push
or
in
cmp
or
xchg
xor
rol
dec
ret
in
sub
push
push
sbb
aaa
ds
nop
xchg
and
sub
dec
dec
inc
dec
pop
pop
pop
inc
adc
js
jle
dec
dec
jb
imul
bound
cwde
xchg
sahf
ins
ins
imul
mov
mov
lea
test
scas
mov
fcmovu
fcom
ficom
leave
enter
fstp
fcmovnb
repz
stc
adc
idiv
int
retf
repnz
jmp
sti
dec
loop
push
mov
ds
or
ret
xchg
stos
push
or
push
inc
in
jae
or
adc
or
cmps
adc
jmp
sub
in
inc
ret
mov
aaa
jecxz
sub
dec
test
pop
call
test
frstor
rcl
test
adc
ins
adc
sub
mov
ss
sub
sbb
cwde
mov
pushf
mov
mov
mov
sar
or
aas
or
fsub
dec
push
adc
nop
sub
cmps
mov
loopne
call
pop
enter
mov
mov
movs
lahf
pop
mov
icebp
retf
mov
or
enter
adc
aam
push
xchg
sub
jne
or
xor
xchg
pop
mov
dec
ror
je
pop
sbb
in
or
movs
xchg
icebp
or
sbb
call
push
popf
push
xor
or
xchg
push
push
inc
adc
stos
hlt
adc
or
movs
mov
in
jl
sti
adc
es
int3
push
sbb
push
in
pop
mov
dec
add
mov
cmc
mov
lods
pop
pop
loopne
in
mov
imul
pop
in
aad
in
xchg
and
pop
sub
into
and
xor
sbb
in
dec
int3
cmp
dec
cwde
test
aam
mov
inc
jmp
hlt
mov
jecxz
imul
movs
in
aam
mov
or
ss
je
mov
inc
push
call
je
mov
pop
test
or
xchg
and
sbb
jge
inc
cmp
push
fs
lods
retf
popa
call
popf
pop
and
in
mov
adc
ret
mov
ja
jne
ret
pop
not
pusha
mov
movs
pop
pop
jmp
adc
mov
and
sub
sbb
sub
ret
jmp
mov
cli
sbb
js
in
mov
in
fwait
add
clc
adc
mov
cmps
movs
sub
mov
adc
sbb
sti
sbb
je
shr
ins
retf
inc
jo
push
lds
xor
test
add
xchg
out
adc
enter
adc
hlt
xor
sbb
adc
dec
jo
call
in
dec
in
mov
and
dec
sbb
ret
sbb
push
cli
in
lods
ins
popf
adc
aad
adc
inc
hlt
adc
js
adc
movs
push
mov
pop
cmp
test
sbb
push
aad
sti
(bad)
pusha
cli
adc
inc
pop
adc
jnp
inc
xchg
push
fs
(bad)
not
int
test
cmp
xchg
jmp
fs
xchg
mov
sbb
push
ror
pop
xchg
cwde
cmp
mov
xchg
xchg
mov
(bad)
dec
das
jmp
mov
adc
mov
sbb
and
rcl
dec
inc
add
rcl
mov
enter
adc
loop
or
adc
or
(bad)
inc
ds
add
clc
in
lds
cmp
jl
push
xchg
aam
pop
jnp
(bad)
pop
mov
das
int
mov
popa
je
mov
add
or
cli
sbb
cmp
cmc
xchg
mov
inc
mov
push
cld
push
in
cmp
adc
movs
cli
sbb
fadd
sub
shr
cwde
jnp
xor
cmp
je
mov
mov
idiv
je
or
mov
adc
sti
mov
sbb
xor
mov
push
movs
cmc
not
pop
mov
mov
jl
clc
xchg
mov
and
rcr
push
and
ss
sbb
loopne
add
pop
stos
mov
or
mov
int3
add
add
loopne
ret
pop
icebp
mov
cmp
int3
into
test
hlt
(bad)
leave
push
mov
enter
call
add
cvtps2pi
add
adc
movs
imul
add
push
or
pushf
aas
xchg
movs
rcl
push
and
ins
xor
test
(bad)
and
cmp
add
push
add
dec
pushf
or
pushf
clc
dec
mov
shr
and
xor
movs
mov
(bad)
lock
sbb
or
aam
or
arpl
jns
shl
aam
adc
mov
call
or
or
add
mov
stos
or
xlat
or
sti
mov
or
pushf
adc
xor
or
add
cwde
retf
push
sub
pushf
mov
sub
pop
or
or
mov
mov
pop
push
dec
or
and
or
jl
or
lds
adc
sub
mov
fs
hlt
clc
andnps
jmp
and
add
mov
xor
mov
test
or
ss
hlt
bound
mov
adc
add
add
mov
mov
in
push
sbb
and
xchg
sbb
pop
xchg
lods
pusha
mov
or
in
mov
cmps
xor
mov
pop
add
inc
aaa
and
xor
dec
pop
ret
pop
imul
xor
xchg
loopne
mov
and
loop
pop
cmp
cmp
cli
sbb
test
push
add
mov
pop
retf
sub
add
ins
xchg
or
cwde
mov
push
into
or
sbb
(bad)
push
pop
fsubr
std
mov
add
test
mov
in
in
xchg
mov
or
push
adc
pop
ror
imul
and
clc
or
push
clc
pop
and
ins
out
(bad)
xor
fisttp
or
pop
clc
fisub
pop
(bad)
push
mov
pop
mov
pop
sbb
aaa
push
add
mov
les
mov
mov
pop
and
pushf
stos
push
push
hlt
and
add
pop
lods
retf
or
retf
jnp
cmc
mov
test
jnp
sub
retf
add
shl
add
dec
clc
sbb
pop
fwait
fs
or
mov
mov
push
in
add
int3
call
sub
pop
jmp
cmp
or
in
or
add
cmp
movs
and
or
fadd
ins
xor
cwde
(bad)
neg
test
push
sbb
add
or
rcr
mov
test
jmp
pop
mov
or
movs
in
mov
and
cmp
mov
inc
xor
enter
imul
test
movs
addr16
or
push
push
cmp
pop
cmp
adc
sbb
stos
pop
xchg
xchg
xchg
out
in
cmp
sbb
in
clc
dec
(bad)
xor
std
in
sbb
mov
push
addps
xchg
add
push
xchg
lods
sbb
add
and
mov
repz
adc
jnp
jns
rol
sub
mov
mov
sbb
clc
push
and
xchg
movs
call
pop
sar
xor
push
dec
jl
inc
popa
cwde
test
mov
sbb
and
mov
add
add
sub
leave
dec
fs
lock
cmp
movs
rcl
sbb
cmp
push
mov
push
adc
jmp
sbb
stos
push
sub
in
sbb
pop
lods
ins
mov
dec
in
add
aam
adc
pusha
push
mov
jmp
iret
lods
pop
in
lods
ret
mov
add
push
pop
sbb
pop
movs
repnz
(bad)
loopne
sbb
push
in
arpl
pop
ins
clc
or
lods
xor
in
jnp
push
movs
lahf
or
enter
push
pavgw
or
test
push
or
sbb
stos
or
in
add
pop
clc
push
jmp
js
mov
les
in
add
push
sub
cmp
sbb
push
adc
push
pushf
jnp
or
test
cmp
cli
xchg
in
sbb
bound
aam
mov
aas
mov
stos
in
lods
rol
sbb
(bad)
or
mov
xor
cmp
or
fcomp
arpl
outs
int3
bound
or
and
adc
enter
push
mov
fs
pop
push
add
fs
push
inc
retf
or
or
sbb
cmp
push
test
pop
add
(bad)
sbb
enter
stos
les
mov
ins
push
sbb
sbb
mov
sar
add
ss
push
fdivr
jns
leave
or
das
add
mov
xchg
mov
mov
in
xor
(bad)
cld
pop
add
fdivr
sbb
add
or
push
mov
push
in
sub
add
fs
pop
add
movs
xor
jne
cmp
sbb
or
ret
sbb
add
fs
add
or
loopne
mov
pop
add
inc
inc
fmul
lds
fs
add
mov
push
sbb
int
xchg
sbb
sbb
sbb
fdiv
push
cmp
adc
or
nop
add
test
ins
jno
je
or
in
mov
xchg
mov
jge
adc
bound
mov
inc
add
lods
cli
sbb
arpl
dec
fs
add
cld
ds
pop
sbb
(bad)
mov
jmp
add
sbb
mov
aaa
and
ja
or
(bad)
adc
mov
mov
push
or
dec
push
mov
leave
or
push
cmps
dec
push
in
push
pop
cwde
or
rcr
xchg
clc
or
jo
rcl
les
adc
pop
and
adc
stos
push
push
push
pop
push
mov
in
push
clc
test
mov
dec
pop
neg
lds
pop
call
movs
mov
cli
sbb
mov
xor
mov
and
push
ins
push
in
cmp
push
inc
cmp
je
mov
(bad)
add
pop
add
mov
push
cmp
(bad)
cmp
in
dec
js
mov
lea
cmps
iret
(bad)
sti
adc
cli
add
xchg
push
add
adc
int3
inc
sbb
add
in
pusha
mov
mov
sbb
scas
iret
aam
inc
and
dec
rol
lods
fdiv
mov
sbb
imul
call
mov
adc
cmp
dec
(bad)
cmc
mov
xchg
mov
(bad)
call
add
mov
mov
mov
neg
push
add
mov
loope
enter
push
fs
jnp
leave
xor
ins
mov
push
xchg
or
inc
push
adc
pop
test
arpl
sub
xor
push
adc
leave
dec
or
adc
xchg
int3
adc
fdivr
mov
pop
jmp
push
cwde
mov
punpckhdq
or
pop
xor
or
sbb
lods
clc
push
mov
xchg
xor
push
imul
cwde
dec
retf
leave
jo
or
call
push
xchg
xor
div
xor
jbe
mov
mov
jmp
sbb
mov
mov
add
jnp
sub
stos
add
in
push
pop
cmp
movs
mov
dec
fs
jg
jnp
leave
xor
leave
dec
fs
scas
push
push
lock
or
in
mov
loopne
xor
test
adc
mov
pop
fs
xor
xchg
sbb
adc
mov
mov
jmp
test
or
pop
test
pop
cwde
jnp
inc
mov
mov
ds
(bad)
not
sbb
cli
sbb
push
sub
pop
cmp
or
pop
mov
mov
sbb
das
sbb
mov
in
add
retf
adc
xor
mov
(bad)
push
add
icebp
(bad)
shl
mov
test
loopne
mov
push
push
cmp
sbb
not
sub
push
hlt
xor
fs
jo
idiv
retf
xor
push
push
movs
call
je
jmp
jnp
jns
fld
mov
mov
mov
adc
mov
cmps
add
jmp
pop
dec
dec
xchg
or
push
cld
pop
push
cwde
jmp
push
push
mov
aam
and
add
push
jl
adc
pop
dec
cwde
mov
enter
sbb
add
add
xor
add
in
test
test
movs
movs
dec
and
mov
test
xor
sbb
popa
mov
sbb
enter
xchg
xor
pop
xor
push
xchg
clc
xor
stos
xor
dec
pop
(bad)
jmp
shl
inc
sub
adc
fs
pop
inc
test
mov
or
pusha
push
fwait
fs
cmp
js
xor
jnp
aas
lock
mov
add
sbb
or
nop
dec
pshufw
cmp
adc
cmp
add
test
addr16
cld
leave
shl
cmp
imul
sub
mov
hlt
push
mov
sub
cwde
call
inc
rcr
or
popf
movs
clc
add
in
or
js
sbb
js
xlat
adc
add
or
cmp
push
cmp
or
loop
mov
cmp
(bad)
fdivr
jecxz
inc
pop
push
mov
mov
push
jmp
stos
or
sbb
sub
add
ret
enter
imul
enter
jnp
pusha
push
sbb
xor
xor
xchg
mov
xchg
pusha
and
call
cli
adc
push
mov
nop
sar
int
or
movs
movs
aas
mov
sbb
inc
fld
jmp
fcomp
(bad)
xlat
pop
or
push
adc
arpl
cmp
cli
xor
enter
lods
mov
mov
rcr
jo
cwde
mov
nop
push
push
and
add
div
inc
push
sbb
fsubr
mov
sbb
je
jbe
fwait
fs
push
add
fs
xor
fs
jmp
mov
mov
adc
add
jns
rcl
dec
pop
add
les
imul
js
cmp
or
add
enter
sbb
xor
fs
test
add
shl
mov
push
and
or
(bad)
je
push
add
inc
popf
adc
sub
inc
in
push
push
cmp
push
mov
popf
mov
aas
xchg
loopne
scas
add
mov
jo
add
icebp
or
je
ins
push
popa
sub
xor
(bad)
out
test
sbb
xor
xor
or
adc
aam
adc
test
jo
cwde
lea
push
sbb
sbb
aas
out
or
adc
in
or
in
mov
icebp
(bad)
hlt
adc
or
dec
jnp
xor
add
lods
pop
adc
or
cmp
movs
iret
push
cmp
inc
aaa
aas
mov
lock
addr16
pop
xor
and
add
(bad)
mov
dec
xor
les
push
sbb
jge
sub
mov
jmp
add
mov
sbb
push
ret
pop
or
cli
cmp
push
fcom
sbb
pop
adc
in
add
xchg
and
or
xchg
or
or
rcl
jmp
movs
cmp
xchg
jb
mov
adc
ret
popf
push
lock
or
pusha
imul
lods
or
xchg
xor
adc
int3
inc
cmp
sbb
or
imul
clc
out
xor
sub
mov
lods
pop
inc
enter
out
add
xchg
adc
ss
rcl
inc
retf
xchg
push
add
retf
test
inc
cmp
xor
inc
xor
(bad)
cmp
aas
lods
inc
and
(bad)
and
add
or
cmp
adc
pop
or
leave
dec
fs
mov
pop
sbb
push
dec
add
fs
dec
pop
cmp
les
je
shl
jecxz
icebp
leave
ins
xchg
sar
pop
ja
vcomiss
add
lock
pop
inc
inc
fdivr
test
xchg
push
adc
movs
cmp
jo
cli
aaa
inc
inc
xlat
jmp
mov
mov
test
jnp
pusha
adc
dec
mov
int
and
mov
cmp
inc
movs
sar
dec
add
sbb
mov
out
add
pop
les
rol
push
rcr
push
mov
scas
sbb
fmul
lahf
fs
loopne
(bad)
clc
ds
cmp
xor
cmp
aaa
adc
dec
dec
imul
jo
or
add
fs
xor
push
fs
das
add
add
add
xor
mov
mov
clc
or
xchg
(bad)
cld
test
add
push
cmp
sbb
aam
add
fs
shl
nop
pop
pushf
mov
ins
pop
je
adc
fadd
mov
idiv
sbb
mov
cmp
mov
or
int3
xor
add
xlat
sbb
fs
mov
pop
ins
enter
mov
sar
and
shr
sbb
mov
pop
and
sbb
leave
and
sub
fs
pop
push
test
fs
xor
clc
jne
retf
test
xor
mov
add
bound
fcomp
and
lds
(bad)
xor
or
fs
or
push
fs
pop
push
aam
or
rol
push
mov
loop
and
push
je
fwait
mov
mov
cmps
int3
arpl
xor
sbb
fdivr
jl
mov
cmp
ror
dec
sbb
mov
inc
in
xor
lock
mov
dec
adc
rcr
dec
sub
add
cmp
push
mov
push
push
xchg
sbb
clc
sti
lock
test
inc
imul
movs
das
(bad)
cmp
add
mov
fwait
inc
xor
xor
mov
push
jmp
cld
fiadd
ds
cli
pop
inc
test
test
rcl
xchg
int3
adc
lea
or
int3
or
enter
inc
add
xlat
sbb
and
test
mul
cs
or
mov
inc
arpl
or
add
in
ds
adc
sbb
(bad)
cli
sbb
or
enter
inc
(bad)
cmp
jge
cmp
cmp
test
inc
cli
or
jg
in
and
jmp
add
out
push
test
stos
inc
pop
mov
dec
ret
push
or
aaa
cmp
mov
lods
sbb
push
call
sub
cmp
mov
and
mov
cli
sbb
jmp
sbb
push
sbb
lods
addr16
movs
push
add
cmp
or
or
not
addr16
dec
xor
adc
cmp
add
retf
or
xor
xor
or
or
xor
hlt
mov
pusha
aam
mov
popf
sbb
or
(bad)
cmp
and
and
adc
pusha
pusha
ds
arpl
ss
or
clc
cmp
outs
jl
cmp
das
adc
or
dec
mov
xchg
inc
or
xor
sub
fs
mov
repz
xchg
mov
jo
aas
loopne
and
xor
js
push
xchg
adc
adc
or
xchg
aaa
push
sub
pop
ds
cmp
nop
bound
fs
fsub
dec
xor
movs
popf
push
(bad)
mov
in
sub
ins
and
nop
test
aas
test
mov
push
pop
pushf
rol
adc
mov
sub
sbb
xor
hlt
xchg
pushf
enter
sub
ins
or
sub
push
push
mov
or
xchg
leave
lea
retf
jbe
push
add
xor
mov
mul
out
sbb
rcr
test
jmp
mov
mov
es
and
sub
sbb
xchg
push
in
aam
mov
jge
pop
jns
out
xor
imul
js
je
push
pop
xchg
push
mov
test
and
sub
aam
inc
repnz
push
les
cmp
dec
dec
in
xor
mov
mov
test
pop
fs
in
sub
mov
int3
in
mov
popf
push
push
pop
pop
mov
push
shl
fwait
add
retf
daa
adc
jmp
push
clc
bound
test
mov
mov
repnz
push
xchg
pusha
mov
cmp
pop
dec
jmp
push
sbb
adc
adc
adc
sub
retf
mov
lods
mov
(bad)
pop
adc
enter
lahf
add
loop
adc
mov
xor
and
movs
adc
retf
mov
mov
jge
ror
pop
xor
push
setbe
mov
mov
mov
hlt
call
or
int3
mov
aam
ret
mov
sbb
cmc
xor
fs
push
lods
push
mov
dec
xchg
fmul
mov
lds
ins
mov
pop
jecxz
stos
jg
inc
pop
add
adc
jbe
imul
je
inc
mov
shr
gs
pusha
(bad)
mov
fisttp
add
sbb
loope
inc
sti
cs
je
retf
xor
cmp
fnstsw
sub
inc
add
xchg
call
rcl
and
xor
scas
test
sub
loop
hlt
and
and
mov
adc
in
sub
enter
sti
add
shl
lods
mov
add
call
movs
mov
dec
aam
pop
or
retf
in
dec
mov
cmp
fwait
fs
or
hlt
leave
popa
fs
jge
in
gs
out
in
ja
push
sub
dec
pop
clc
sub
hlt
lahf
cmp
push
pop
mov
dec
jnp
aas
retf
(bad)
fmul
pop
pop
shl
fs
mov
push
ja
retf
xchg
push
lock
push
jmp
enter
mov
hlt
call
ins
mov
clc
mov
fs
sbb
fs
sbb
adc
push
mov
mov
sbb
movs
bound
cwde
sub
pop
ds
push
sbb
push
lahf
sub
pop
cld
test
lock
mov
dec
clc
xor
sub
clc
pop
ds
lahf
adc
mov
xor
mov
aas
das
ret
hlt
fnstsw
cmc
lock
shl
fist
pusha
clc
jbe
mov
mov
fwait
fs
push
add
call
push
xor
adc
sub
add
out
jg
sti
add
in
clc
mov
hlt
loop
fs
leave
movs
rcl
sub
pop
cld
mov
xchg
in
dec
mov
inc
hlt
aas
retf
mov
dec
sub
fstp
cmc
pop
push
fs
add
bound
call
retf
adc
retf
or
popf
aad
retf
mov
ds
cs
mov
movs
out
jo
push
push
call
mov
jb
mov
fwait
fs
push
push
gs
sti
sub
pop
sbb
ds
int3
push
test
sub
std
mov
dec
fwait
fs
pop
xor
fs
xor
fisttp
xor
je
xor
sbb
dec
fbstp
clc
inc
ds
lahf
sub
xor
(bad)
fist
push
arpl
out
cwde
ret
xor
jo
push
bnd
mov
dec
mov
fs
adc
inc
dec
mov
sub
(bad)
push
add
and
cwde
ret
xor
imul
retf
ds
cmp
pop
leave
xor
fwait
lock
push
push
jo
xchg
cmp
pop
cmp
stos
or
test
repnz
movs
mov
test
dec
pop
xlat
add
daa
ins
retf
push
ja
bound
push
push
or
cmp
mov
cmp
fstp
shl
lahf
cmp
push
mov
add
cmp
sub
hlt
lahf
add
(bad)
movs
sub
sub
call
aaa
jo
leave
or
jbe
aam
and
mov
mov
fwait
or
call
xlat
push
loop
jo
push
ds
cmp
aam
sub
add
mov
repnz
inc
or
repnz
xor
push
or
movs
push
jo
mov
mov
or
inc
retf
jg
inc
or
lock
or
inc
loop
test
and
jmp
sub
hlt
movs
push
fs
or
loop
mov
popf
push
movs
inc
or
adc
pop
and
and
popa
clc
mov
fwait
hlt
fnstsw
sub
pop
retf
or
ins
mov
and
imul
ins
retf
daa
cwde
push
xor
jo
xor
mov
fs
or
inc
sti
inc
adc
jmp
mov
xor
adc
sbb
(bad)
fstp
xchg
aam
in
or
adc
push
pop
adc
pop
push
out
enter
dec
pop
sub
dec
push
nop
in
sub
inc
sbb
inc
dec
icebp
rcr
dec
inc
or
inc
retf
int3
dec
sub
sbb
jmp
or
hlt
repnz
push
adc
mov
add
inc
xor
out
lock
add
imul
push
sbb
cmp
icebp
cld
add
test
and
and
les
sub
and
rcr
jmp
fnstenv
cld
fist
sbb
in
out
add
sub
fs
jae
fwait
cmp
jmp
fwait
inc
xor
pushf
add
inc
enter
pusha
sbb
jmp
xor
iret
jmp
arpl
in
and
sub
and
cmp
sbb
xor
in
mov
mov
add
jmp
inc
fadd
bound
mov
add
mov
sbb
nop
pusha
jmp
mov
loopne
mov
js
adc
mov
fcomp
sbb
(bad)
sar
or
or
sub
sbb
mov
pop
xor
or
rol
and
mov
add
add
rcr
push
pusha
sub
or
inc
mov
mov
or
shr
and
imul
imul
imul
sbb
fmul
rcr
or
dec
mov
sbb
fist
lods
sbb
fwait
push
xchg
cld
dec
ins
clc
fs
pop
jo
xor
add
mov
fisttp
add
and
or
or
and
xor
add
add
int3
adc
mov
aam
xchg
sub
cmp
in
mov
sub
jl
sub
sub
xchg
pop
mov
movs
cmp
jle
pop
push
pop
cmp
lock
inc
nop
shr
mov
dec
sar
mov
mov
push
cmp
sub
mov
jle
sbb
pop
js
sbb
dec
fdivr
and
mov
arpl
dec
nop
je
call
mov
nop
dec
inc
fldcw
xor
cmp
imul
stos
jnp
mov
xor
jae
sub
xor
sar
jmp
and
add
repz
hlt
cmp
dec
retf
mov
fcomp
loopne
sbb
pushf
sbb
jp
jmp
or
fdivr
lods
and
mov
loopne
mov
mov
jo
mov
mov
movs
nop
sbb
or
jmp
pushf
mov
loopne
adc
dec
mov
sub
test
ins
xor
int3
fdiv
add
ds
pop
std
mov
mov
aam
or
dec
xchg
and
mov
imul
pop
rol
cmp
aad
sub
pop
jne
aam
dec
std
pop
adc
daa
es
ficom
or
test
test
jno
mov
push
mov
jns
out
inc
addr16
stos
inc
jmp
sub
mov
aam
cmp
or
sbb
hlt
mov
lods
xchg
ins
jno
ror
into
in
cmp
dec
and
xor
xor
jg
out
sahf
pop
push
or
cmp
pop
scas
dec
imul
mov
sahf
sub
das
(bad)
rep
lahf
test
loope
mov
popa
sbb
test
stc
js
jns
mov
push
fcom
bswap
lea
js
push
sar
shr
lea
dec
test
mov
bt
or
jmp
repnz
jmp
je
neg
shl
add
add
cmp
mov
cmc
pusha
add
clc
mov
mov
mov
jmp
jg
hlt
cmp
jle
pop
aas
jbe
in
mov
popa
call
sti
hlt
outs
and
test
js
push
mov
daa
pop
popf
jg
out
gs
xor
dec
add
dec
xor
push
ins
sti
fist
pushf
push
pop
xchg
mov
cwde
int
jne
sbb
cmp
sub
shr
mov
push
stos
and
inc
jg
stc
mov
test
ds
ror
cmc
adc
inc
fbld
cmc
lea
jp
jle
cmc
sbb
aaa
into
add
pop
sbb
bound
sbb
ds
xchg
movsx
pop
call
and
ret
or
jle
xor
pop
jge
push
or
int3
push
lea
dec
inc
and
dec
jg
dec
xor
arpl
push
pop
mov
xchg
jl
call
arpl
mul
loop
xchg
inc
loopne
jb
fs
inc
cld
xchg
leave
jp
ss
dec
adc
(bad)
cmp
xchg
call
retf
inc
sbb
outs
cwde
mov
mov
(bad)
dec
lock
cmp
xor
stos
loope
movs
fcmove
add
mov
fild
out
mov
lods
push
xchg
mov
test
mov
fistp
adc
sti
adc
dec
sbb
mov
jb
pop
aad
xor
jle
pop
cmp
stc
xor
sub
cli
in
adc
mov
jae
mov
xchg
dec
dec
inc
shr
imul
(bad)
int
(bad)
shl
pop
cli
add
pop
push
stos
and
popa
data16
add
imul
add
(bad)
gs
inc
movs
mov
jo
cmp
fnstsw
sbb
dec
mov
push
hlt
stos
mov
fist
jle
sub
mov
lock
jae
int3
mov
or
arpl
mov
mov
aam
test
js
xor
imul
jp
add
call
push
lock
jle
push
xor
(bad)
test
(bad)
jle
shr
xchg
leave
clc
ins
mov
imul
dec
popf
mov
or
jl
sub
enter
popf
shl
xchg
sub
and
bound
ret
add
out
mov
mov
sbb
ins
les
mov
test
ficom
cmp
xchg
and
loopne
pop
lea
pop
bound
pop
mov
mov
in
mov
cld
xchg
mov
setae
(bad)
jg
ss
cmp
xor
bound
ret
inc
add
cmp
fcmovnb
(bad)
in
ret
outs
pop
cmp
and
enter
xor
add
jp
pushf
add
aas
cmp
mov
sub
sbb
push
retf
dec
inc
scas
cmps
and
int3
sub
fist
add
pop
and
shr
mov
jge
mov
aam
mov
loop
xor
adc
jae
outs
push
push
call
dec
and
or
xor
sub
les
loop
outs
inc
(bad)
sti
push
add
and
or
es
mov
outs
lods
inc
xchg
sub
popf
pop
sahf
dec
in
jp
jecxz
mov
retf
sar
aaa
hlt
jne
inc
and
in
pop
inc
mov
jae
rol
and
cmc
mov
jno
adc
mov
jb
adc
pusha
(bad)
(bad)
mov
mov
mov
or
mov
sbb
aad
shl
fwait
ror
xrelease
sbb
mov
xchg
xchg
fsubr
jo
(bad)
mov
pop
mov
out
push
inc
cli
(bad)
cmp
inc
ins
add
bound
shl
sub
mov
imul
ja
pop
or
iret
xchg
out
and
pop
push
stos
ds
imul
push
test
add
sub
scas
out
pop
xor
or
fnsave
fistp
shl
mov
sbb
push
in
and
xor
xchg
dec
rcl
mov
pop
jle
xlat
mov
mov
add
cmc
mov
lds
fistp
pushf
ins
adc
and
sub
outs
(bad)
or
push
xchg
and
dec
dec
les
jl
loope
je
(bad)
sub
outs
loope
mov
jo
sbb
rol
out
cmp
mov
jmp
aam
int
adc
pop
shr
dec
test
add
add
mov
dec
add
xchg
test
fst
pop
fiadd
sbb
mov
mov
es
pop
mov
enter
mov
or
add
test
push
call
sub
cs
dec
and
aam
loop
fisttp
(bad)
call
vaddps
adc
loope
mov
(bad)
ins
stos
and
outs
fsubrp
mov
cwde
iret
and
add
inc
sbb
sbb
fst
scas
cwde
sbb
gs
(bad)
fucompp
ror
jmp
lahf
xchg
sbb
out
jb
cs
push
cmp
sub
sbb
lahf
aaa
mov
loope
xor
mov
cmovs
ret
sub
inc
nop
mov
add
xchg
bnd
mov
push
retf
aaa
in
movs
mov
aad
xchg
xor
nop
xor
push
lahf
shl
pop
push
imul
xor
call
xlat
push
stc
fist
push
int3
ins
fs
das
xchg
aad
test
mov
neg
xchg
push
xchg
push
call
cmp
sti
xchg
xchg
jo
inc
push
popf
pop
shr
jo
aad
xchg
jb
jno
je
js
and
cmp
xchg
push
mov
bswap
call
push
dec
loopne
sbb
push
rol
xor
into
(bad)
xor
imul
cmps
pop
fnstsw
hlt
lea
xor
jae
dec
std
lds
pop
out
adc
loope
out
sbb
(bad)
xchg
scas
sbb
inc
repnz
and
pop
xor
std
push
sub
(bad)
mov
jge
(bad)
cmp
cmps
pop
add
lea
cmp
imul
xchg
sub
icebp
adc
jns
std
xchg
xchg
push
leave
cli
loop
and
jmp
push
div
mov
mov
cwde
shl
enter
es
fisttp
mov
lahf
push
inc
mov
jle
movs
pop
push
or
(bad)
or
cmp
pop
fisubr
or
in
pop
xchg
ja
dec
push
repnz
mov
inc
cmp
and
mov
retf
in
push
leave
jmp
mov
pop
into
(bad)
addr16
and
dec
int
dec
fcom
push
push
dec
xor
int3
add
mov
outs
mov
pop
xlat
es
jle
bound
mov
xor
mov
test
imul
and
xchg
xchg
fist
add
pusha
cdq
or
adc
ds
sub
add
mov
fs
sbb
push
sbb
mov
dec
ss
in
fst
ret
push
in
in
sbb
dec
jae
mov
out
jecxz
mov
sbb
(bad)
cs
test
pop
push
repnz
out
sbb
or
jecxz
test
push
cmp
jb
sbb
dec
pop
mov
out
dec
lods
mov
dec
shl
adc
int3
mov
sbb
(bad)
in
and
sti
xchg
mov
pop
aas
push
ffree
pop
sub
push
mov
fmul
in
xchg
sub
call
mov
imul
mov
ret
fxch
inc
pop
shl
sbb
jle
repz
push
fst
or
push
cmp
(bad)
int3
aaa
imul
mov
jle
int3
movs
cmp
in
xchg
arpl
cmp
ror
adc
(bad)
movs
cdq
fs
cdq
rol
cdq
mov
aam
pop
call
sti
add
std
imul
jge
fst
push
lods
mov
popa
add
xchg
ins
es
repnz
dec
inc
js
adc
jle
push
push
or
aam
xor
sbb
fadd
stos
loop
push
cli
jo
mov
cs
cdq
lds
push
lods
jnp
dec
div
(bad)
jle
mov
jbe
add
pop
xchg
dec
sbb
xor
xor
movs
jo
test
adc
loop
adc
mov
adc
inc
inc
jl
ret
stos
cmp
push
call
add
push
gs
jne
jb
push
popa
ins
jne
inc
add
test
adc
sbb
lahf
push
mov
lea
not
lea
mov
call
call
rep
lea
movzx
push
pop
mov
pushf
lea
jmp
fcmovnb
loope
push
jle
sub
rcl
icebp
jmp
sbb
add
test
inc
sahf
xlat
cdq
or
fnstcw
ss
fcom
jp
jecxz
pop
loope
mov
ss
lods
mov
int3
xlat
arpl
xchg
popf
mov
or
add
jl
and
stc
cs
pusha
loopne
pop
das
movs
pop
pop
pop
rcr
push
sub
sub
or
lods
and
mov
and
adc
test
push
inc
adc
add
int
cld
repz
in
(bad)
out
or
rcr
adc
repz
das
push
daa
in
xor
loop
pop
push
mul
(bad)
jmp
ss
ficom
fmulp
mov
sub
push
out
add
ror
cmp
imul
adc
lods
mov
xchg
and
les
aam
pop
push
fs
jne
les
jecxz
mov
adc
inc
cmp
ret
push
pop
addr16
pop
(bad)
jecxz
cdq
dec
ja
das
cmps
test
pop
or
sub
fst
popa
cdq
xchg
push
neg
nop
jnp
lods
jmp
pop
xchg
fist
jp
dec
mov
or
imul
clc
ror
fild
mov
in
hlt
or
stos
and
jns
cld
imul
test
dec
cmp
xor
and
cs
bsf
fsub
fs
jbe
mov
call
rcl
add
add
add
sbb
add
add
mov
sbb
add
add
sbb
out
add
cmps
sbb
add
add
neg
add
add
add
add
add
sbb
add
add
or
add
or
sbb
bound
sbb
xchg
dec
pop
add
sti
sbb
add
add
push
cmc
repnz
push
lea
jne
rol
pushf
mov
add
adc
ror
movzx
sub
rcr
adc
ror
lea
bt
stc
stc
sub
test
mov
pusha
mov
push
pop
cmc
pushf
stc
mov
cmp
push
lea
ja
test
neg
sub
btr
adc
pushf
add
add
sar
rcr
rol
mov
push
xor
cmc
pusha
mov
stc
cmc
repnz
pusha
mov
lea
jne
setle
push
jmp
mov
lea
jae
clc
xor
btc
mov
bts
mov
sar
xor
mov
test
cmc
mov
bt
cmc
sub
test
pushf
repnz
call
ror
ja
adc
jae
stos
sub
imul
mov
adc
lods
jecxz
push
outs
jge
sub
sub
add
loope
mov
mov
push
mov
jbe
sbb
inc
and
add
xor
sub
add
(bad)
mov
adc
ret
neg
sub
mov
call
and
or
or
jecxz
cdq
int3
mov
fldenv
aam
cs
push
movs
pop
push
mov
push
mov
inc
cwde
das
inc
call
adc
cmp
in
xchg
pop
and
movs
ins
mov
jle
inc
call
pop
clc
outs
test
add
(bad)
xchg
adc
inc
cwde
fstp
inc
dec
xor
push
loop
cmp
and
push
push
imul
cmp
dec
xor
add
dec
or
fld
mov
xchg
pop
sti
xor
xchg
mov
cld
leave
pcmpgtd
push
ss
or
retf
and
out
in
push
jns
pop
addr16
ins
mov
iret
je
mov
loope
mov
mov
pop
cs
mov
cmc
cs
addr16
int3
add
cwde
mov
call
sbb
and
cmps
push
sbb
repz
sbb
sub
sub
bound
inc
cmp
ffree
xchg
mov
leave
push
push
push
out
mov
mov
and
and
mov
rcr
pop
bound
ror
pop
aad
mov
cmp
xchg
call
cmp
(bad)
dec
mov
sbb
data16
xchg
jns
and
and
xor
xchg
cli
xor
push
xor
sub
sti
int
add
xchg
daa
pop
aas
sub
xor
loopne
jl
cmp
xor
lods
test
push
jbe
pop
nop
lock
fstp
lds
jmp
xchg
enter
jle
mov
repz
jmp
cmp
fist
(bad)
ficom
mov
in
into
adc
scas
cmps
std
adc
test
jne
movs
stc
add
into
inc
mov
mov
arpl
cwde
test
jae
adc
xchg
imul
adc
ret
jecxz
and
jae
lea
stos
add
int3
movs
scas
jns
das
push
out
repnz
lods
xchg
movs
retf
test
(bad)
jbe
cmp
cmp
lea
inc
mov
fcom
push
xor
ret
jnp
xchg
xor
cs
ins
mov
and
push
loop
cmps
ds
lods
mov
xor
int3
mov
sub
mov
xor
or
mov
(bad)
(bad)
adc
and
sbb
dec
movs
not
lea
scas
cmp
stos
inc
inc
pop
cmc
dec
scas
jecxz
jo
in
int
mov
and
loop
inc
xor
xor
sbb
jge
xchg
jle
fidivr
or
add
mov
gs
iret
fadd
clc
push
pop
push
stc
nop
test
imul
ficom
adc
das
cmpxchg8b
ins
jecxz
jmp
adc
xor
in
jl
and
mov
jb
add
and
mov
mov
clc
test
call
imul
push
icebp
aaa
xor
push
gs
push
dec
adc
cmp
or
cmp
test
es
sar
movs
add
mov
mov
sub
mov
cmp
sub
add
or
pushf
mov
lods
enter
test
jp
pop
push
popf
jge
ss
sub
xchg
jnp
mov
cmp
add
mov
xchg
repnz
dec
sub
arpl
cld
or
sub
add
mov
inc
cld
in
mov
push
enter
aas
lahf
mov
cli
mov
fdivr
out
std
push
mov
test
push
adc
push
mov
rcr
movd
jbe
push
dec
and
sti
jo
ficom
mov
push
add
bound
nop
mov
fidiv
lahf
or
icebp
je
mov
pop
loop
test
(bad)
imul
jb
stos
jno
int
les
into
test
enter
adc
jg
imul
jge
daa
repz
and
inc
and
cmp
sbb
call
pop
rcr
loope
sbb
xchg
std
jae
sub
mov
sbb
(bad)
(bad)
ror
mov
imul
push
pusha
ins
in
(bad)
mov
add
cmp
adc
mov
mov
mov
imul
mov
and
lea
das
popa
pop
iret
adc
pop
(bad)
(bad)
push
pop
stos
mov
push
fcom
repnz
add
cmp
pop
(bad)
cmp
inc
inc
ds
dec
into
sbb
sub
or
mov
inc
(bad)
pop
dec
sbb
cmp
(bad)
sub
gs
das
xor
cs
dec
add
add
jge
jmp
sub
in
cli
je
sbb
and
in
and
add
pop
xchg
(bad)
jmp
jecxz
xor
fcmovnbe
outs
xchg
sub
ret
int
adc
mov
jmp
sbb
mov
shl
stc
xor
imul
js
icebp
add
sbb
fs
inc
pop
sbb
cld
hlt
cld
in
add
adc
cs
xor
jb
shl
sti
cwde
adc
xchg
or
mov
ins
jge
jbe
push
mov
aad
pop
(bad)
out
sbb
inc
clc
std
inc
dec
ret
push
div
ins
jge
nop
xor
push
enter
lods
mov
leave
pop
add
rcl
push
mov
push
popf
rcl
add
and
les
das
cmps
dec
dec
(bad)
outs
add
add
add
movs
jl
movs
aam
fs
adc
ficom
jl
cld
adc
out
jge
push
loope
mov
xor
push
ins
mov
jle
(bad)
mov
test
fwait
push
fst
sahf
int
(bad)
(bad)
arpl
loop
clc
xchg
xor
int3
inc
fcom
icebp
jmp
shl
xchg
cmps
loopne
ret
ja
cmps
nop
ins
test
fadd
xor
mov
mov
xchg
call
inc
jbe
inc
test
jecxz
or
fnsave
xchg
jne
sub
pop
mov
sub
push
ror
mov
clc
lods
jns
js
in
xlat
xlat
nop
xchg
loopne
fistp
cmp
pop
aas
mov
ins
test
push
mov
aas
adc
into
clc
not
or
(bad)
call
jle
jl
inc
fist
enter
xor
arpl
jno
cmp
inc
mov
dec
xor
jmp
mov
dec
cdq
adc
stc
mov
lea
imul
les
dec
(bad)
es
dec
and
adc
mov
adc
mov
es
das
inc
jecxz
ror
outs
movs
add
xor
shl
mov
mov
ret
jle
mov
fwait
xor
jmp
sbb
iret
push
push
fnstenv
cwde
in
sbb
into
and
jg
push
jbe
or
and
fcom
xlat
adc
ror
aaa
hlt
adc
pop
dec
test
xlat
sub
pop
adc
data16
scas
loop
ins
(bad)
fcomp
pop
push
add
icebp
xchg
dec
dec
ret
mov
mov
fld
jb
sub
add
mov
mov
inc
scas
mov
test
lea
ss
shr
popf
xchg
adc
adc
inc
out
mov
(bad)
jns
jg
mov
and
sahf
pop
mov
stos
and
jp
fcomp
(bad)
xchg
dec
jl
loope
mov
dec
jge
pop
(bad)
ds
lock
sbb
fld
push
mov
js
lea
xchg
add
mov
not
dec
adc
pop
ins
test
(bad)
pop
lea
mov
arpl
mov
cmc
scas
push
enter
ror
(bad)
sar
add
mov
stos
dec
and
adc
mov
cmc
and
add
sub
pop
outs
mov
dec
adc
sub
cmp
jmp
lds
sbb
cmc
or
sbb
lods
out
fnstenv
jnp
rcl
sub
mov
cwde
in
mov
jne
lods
popa
inc
jp
push
inc
fwait
hlt
std
mov
clc
jns
cmps
cmp
mov
rcr
js
mov
in
and
xchg
sbb
jnp
(bad)
fidivr
mov
std
aas
push
test
push
and
or
add
mov
int
cmp
push
dec
les
add
cmp
loop
xchg
sbb
fnsave
or
popf
jbe
into
push
add
aaa
(bad)
pop
add
in
stos
mov
mov
fmul
or
xor
dec
fmul
sbb
aas
mov
jne
cs
loop
mov
cmp
pop
mov
mov
adc
push
cmp
mov
mov
jp
mov
mov
popa
cmp
push
jbe
add
mov
mov
fisttp
push
add
fidiv
cdq
jns
jo
inc
mov
sbb
test
pop
out
fs
or
inc
das
dec
and
enter
jle
adc
into
out
out
movs
cmp
jne
mov
aaa
out
mov
arpl
adc
or
cmp
xchg
rcr
mov
dec
fisub
cmp
call
inc
mov
push
loopne
fdiv
dec
fcmovnbe
stos
shr
xor
sub
and
sub
js
les
sub
addr16
in
daa
mov
pusha
jle
frstor
jmp
(bad)
mov
call
stc
les
mov
cdq
fwait
adc
not
lds
dec
pop
call
test
fbstp
ins
aaa
mov
jne
pop
outs
inc
push
mov
loopne
aam
out
fnsave
mov
sbb
retf
mov
jno
sbb
add
or
popf
and
jge
int3
scas
out
push
cld
adc
les
xchg
pop
aad
in
outs
mov
jle
fdivr
mov
xor
icebp
(bad)
cli
push
int
jge
pop
aam
outs
(bad)
test
arpl
es
cli
cmp
bound
jae
sbb
(bad)
cmps
xchg
cmps
cmp
int
fsub
push
cdq
in
inc
(bad)
out
pop
out
or
fs
adc
and
outs
jp
pop
sbb
es
into
daa
mov
add
jb
jl
sbb
mov
push
ss
fidivr
and
mov
cmc
hlt
mov
mov
fwait
pop
xchg
in
rcl
mov
(bad)
es
les
(bad)
lods
mov
push
fimul
addr16
pop
ficom
cmc
and
and
mov
or
aam
bound
inc
jge
mov
or
rcr
push
cmps
sub
imul
add
push
out
in
sar
xchg
test
mov
or
mov
sub
ds
mov
jg
fsubp
cwde
inc
dec
add
mov
std
xor
repz
in
test
retf
es
addr16
mov
and
test
inc
out
inc
xlat
or
repnz
sub
mov
mov
outs
(bad)
dec
je
loope
aaa
in
mov
inc
add
mov
push
push
mov
aaa
cmp
imul
push
pop
mov
lea
je
cmp
in
int
jecxz
rcr
or
or
sub
sbb
mov
rcr
mov
sub
or
inc
dec
fst
mov
dec
add
push
dec
push
fnstenv
sti
fist
mov
pop
adc
jb
push
test
and
mov
test
mov
sbb
sbb
not
lock
or
cmp
jle
retf
push
dec
jmp
mov
push
mov
hlt
sub
and
inc
sbb
jle
xchg
rol
movs
fucom
push
xchg
push
ds
push
lahf
cmc
fsubr
test
push
cmc
or
in
aas
pop
fcomp
(bad)
mov
sub
int
push
je
dec
(bad)
mov
fild
mov
cmp
mov
fisttp
int
mov
daa
jno
sub
bound
leave
retf
add
in
xor
call
hlt
or
jo
sti
adc
xchg
test
inc
mov
movs
cmp
int3
ror
pop
pop
cmp
mov
out
add
scas
out
jo
movs
mov
and
icebp
or
mov
shl
clc
(bad)
movs
cmp
not
pop
lea
lea
movsx
pop
not
push
mov
push
pusha
mov
jmp
lea
jne
stc
bsf
ror
bsf
mov
cmc
add
test
stc
push
bt
movzx
lea
push
bsr
lea
inc
mov
pushf
pusha
add
jmp
mov
jmp
aam
test
pop
imul
mov
out
cmp
adc
into
inc
cwde
shl
mov
push
push
ss
cmc
jmp
fdiv
push
pop
sbb
fcom
lock
and
pop
mov
push
les
push
pop
sbb
jne
jmp
jo
add
cmc
lods
push
cmp
div
xor
pop
mov
mov
mov
dec
ja
mov
add
retf
retf
sbb
imul
sbb
movs
mov
cmp
lock
shr
or
add
xor
(bad)
or
adc
hlt
sub
mov
cmp
test
aad
pop
(bad)
clc
aaa
jo
daa
popf
(bad)
mov
xor
xor
jns
and
dec
push
retf
xchg
pop
idiv
and
aam
push
cmps
out
bound
sub
cmp
dec
bound
(bad)
push
push
sar
or
adc
mov
inc
jnp
call
mov
scas
test
mov
mov
fnstenv
inc
mov
out
shl
adc
retf
push
(bad)
dec
shr
cmc
pusha
pop
push
aam
mov
inc
mov
push
in
cmc
push
aaa
ins
xor
xchg
repz
stos
lahf
sar
inc
add
outs
lock
ins
loop
cmp
inc
xchg
inc
pop
push
xor
pop
xor
xor
jno
cli
pop
inc
fist
popa
test
sub
ret
mov
xlat
(bad)
xchg
or
dec
je
xor
ficom
sbb
mov
dec
popa
mov
mov
jp
push
jo
dec
mov
cwde
rol
gs
cwde
shl
call
add
jmp
inc
cmp
repnz
push
xchg
xor
sbb
pop
cs
jl
push
cmp
sub
mov
rcl
jmp
fcom
out
mov
out
out
mov
call
dec
inc
mov
or
inc
sub
mov
lea
call
es
movs
in
add
adc
cmps
push
sbb
mov
(bad)
cmc
out
cdq
mov
fisubr
dec
repnz
cmp
add
jns
shl
mov
dec
add
scas
inc
mov
out
fdiv
in
dec
sahf
mov
fdiv
outs
push
mov
retf
and
push
stos
inc
mov
rcl
adc
mov
and
add
sub
lock
je
shl
mov
aaa
sbb
mov
stos
add
rcl
add
push
push
leave
jo
popa
sub
sbb
repnz
xlat
test
sar
mov
arpl
ror
mov
mov
xor
xchg
mov
jnp
jp
inc
mov
adc
push
pop
out
push
movs
jmp
int
jecxz
movzx
rcr
(bad)
cmp
inc
jnp
push
push
scas
jp
popa
dec
or
push
mov
adc
pop
xor
ficom
add
inc
dec
add
push
mov
test
cmp
hlt
xchg
mov
pop
jb
xchg
mov
jno
cmp
or
loope
mov
mov
int3
xor
pop
clc
imul
gs
xor
cs
ins
add
cdq
jmp
mov
lea
call
call
xchg
or
push
popf
jg
(bad)
cld
fbstp
push
lea
xchg
mov
mov
outs
push
add
lahf
jg
push
dec
aad
jns
cmp
sub
jno
mov
sahf
shr
ficom
inc
mov
movs
cmp
xchg
mov
adc
sub
mov
lea
int3
add
xchg
pushf
data16
cld
add
cmps
push
cmp
add
fild
dec
or
sti
jb
ret
aaa
jbe
or
clc
cwde
sbb
or
dec
and
rcr
and
(bad)
jl
retf
mov
dec
mov
imul
cmp
xchg
clc
pushf
call
arpl
and
jge
(bad)
rol
cli
ror
and
cmp
xchg
adc
iret
inc
jns
std
adc
cwde
test
add
aad
imul
add
or
aad
mov
xchg
dec
les
fwait
stc
add
sub
ret
ret
stc
cmp
xor
in
or
cmps
dec
mov
push
bnd
and
leave
inc
and
sbb
ds
and
ror
test
ins
sbb
scas
add
dec
fild
xchg
fsub
mov
xchg
jmp
pop
pop
bts
sbb
cdq
arpl
out
sub
stos
sbb
or
retf
jmp
pusha
lea
call
pusha
lea
jae
setne
mov
pusha
mov
pushf
inc
setno
pushf
call
test
sub
stc
cmp
pop
lea
pop
lahf
not
mov
call
pop
sbb
repnz
jge
adc
fst
lods
ret
icebp
inc
jbe
push
cmp
push
repnz
push
sub
mov
fild
add
ins
movs
mov
push
pushf
pop
mov
dec
mov
lds
test
adc
shl
inc
test
movs
adc
call
or
or
rcr
sbb
push
dec
test
lea
enter
scas
scas
gs
dec
sbb
cmps
sub
add
sub
pop
fwait
imul
es
cld
xor
xor
scas
inc
iret
cwd
icebp
inc
mov
dec
rcl
cdq
outs
stos
push
ror
push
push
xchg
nop
xchg
jmp
icebp
daa
in
ret
and
iret
dec
dec
add
cmp
sbb
hlt
sub
ffreep
push
sbb
jg
xchg
retf
sub
hlt
inc
xchg
adc
add
inc
adc
movs
sbb
shl
gs
and
cmps
sbb
outs
enter
popf
mov
push
out
mov
push
int3
mov
fcomp
ret
or
(bad)
jnp
test
dec
aam
xchg
jnp
and
add
cmps
push
stos
dec
cmp
adc
retf
add
mov
and
mov
push
mov
rcl
inc
mov
push
sub
inc
mov
jne
int
mov
add
jge
sub
add
adc
sub
fdecstp
sub
shl
cmc
in
or
rcr
cmp
rcl
dec
movs
xlat
dec
push
pop
xchg
adc
mov
sub
movs
lods
cs
enter
loopne
ja
fsub
fwait
clc
adc
jecxz
pop
push
inc
inc
xchg
jae
ins
or
out
pop
xchg
push
lock
inc
sbb
and
mov
push
inc
push
xor
fdivp
mov
sub
(bad)
mov
inc
fisttp
xchg
xchg
int
sahf
adc
mov
dec
std
jle
push
cmp
jmp
and
cmp
xchg
retf
sbb
das
lds
xchg
fcmovnb
loopne
lahf
cwde
adc
outs
xchg
mov
out
ins
lock
add
pop
xor
push
daa
rcr
lock
dec
fucomip
add
stos
dec
inc
ffreep
cmp
xchg
or
(bad)
jae
lods
or
loopne
push
mov
outs
outs
call
stos
jl
xchg
push
sbb
lahf
fidiv
lahf
ss
out
pusha
xchg
rcr
add
(bad)
call
out
jle
mov
jg
imul
daa
jge
fadd
fwait
popf
push
dec
movs
add
push
mov
or
push
and
(bad)
out
sbb
jge
out
iret
xchg
and
popa
ret
push
dec
ret
mov
push
mov
push
xchg
pusha
sub
mov
push
hlt
leave
jl
popf
pop
cmp
xchg
push
imul
cmp
ficom
cmp
imul
inc
(bad)
push
cmp
push
mov
pop
pop
adc
pop
shl
inc
(bad)
arpl
lea
cmp
cmps
fistp
popa
into
xor
and
cld
ds
imul
sbb
mov
shr
out
in
mov
sub
pusha
call
jmp
push
test
call
or
jns
cli
jge
in
pushf
mov
cld
mov
push
int
xchg
xchg
jmp
jne
sbb
adc
ins
mov
sub
xchg
out
jl
and
int3
dec
inc
sbb
inc
mov
xchg
push
or
aas
sbb
cmp
cli
out
xchg
xlat
(bad)
js
pop
loope
fsubr
and
fadd
and
shr
ds
add
xchg
pushf
xchg
(bad)
and
sub
add
push
or
out
mov
adc
imul
mov
cdq
mov
call
enter
push
xchg
ucomiss
cld
je
pop
into
sbb
adc
loop
jmp
repz
inc
cs
cmc
out
pushf
mov
adc
or
fist
or
or
nop
pushf
and
and
mov
cs
lock
mov
sub
call
sbb
pop
test
in
cmp
mov
ret
adc
xor
add
pop
or
adc
xor
pop
cmp
arpl
out
add
sub
dec
xlat
lock
ret
sub
stos
and
and
lods
inc
je
leave
jg
iret
xchg
ss
mov
(bad)
in
mov
mov
mov
fwait
xchg
hlt
aas
mov
call
xor
sub
xor
scas
es
aas
cmc
add
dec
mov
cmp
add
outs
adc
and
rcl
xor
dec
mov
mov
das
mov
pop
mov
pop
(bad)
sahf
cs
outs
mov
add
in
mov
test
dec
(bad)
xor
jp
test
and
stos
mov
push
pop
adc
and
mov
mov
stos
mov
(bad)
rcr
(bad)
inc
sbb
jg
sbb
xchg
xchg
xchg
mov
or
adc
cmp
lods
loopne
xchg
repnz
add
(bad)
je
retf
(bad)
adc
mov
clc
xlat
pop
call
test
(bad)
xor
call
retf
dec
push
fcmovnbe
jb
leave
pop
mov
into
arpl
xchg
push
iret
call
mov
dec
adc
shr
mov
push
int
dec
xor
mov
cmp
mov
dec
cs
repz
dec
add
std
aad
push
jne
out
mov
pop
aaa
cmp
div
sti
pop
jae
out
jb
dec
cdq
aam
fwait
jnp
test
enter
inc
and
ins
xor
dec
inc
inc
mov
jge
mov
push
mov
pop
lods
arpl
repnz
and
mov
(bad)
cmps
xchg
(bad)
mov
movs
sub
mov
or
mov
cs
lods
add
enter
icebp
enter
cmp
pop
xor
pop
outs
jmp
pop
fidiv
fs
ins
mov
xor
cmp
(bad)
outs
fsubr
and
(bad)
jp
adc
dec
clc
ficom
aad
lock
(bad)
cli
push
mov
std
cwde
iret
and
ficom
dec
and
sub
cmp
jnp
and
cli
xchg
sub
add
je
outs
fs
gs
imul
add
add
popa
ins
inc
jb
add
xchg
mov
jmp
mov
cld
std
jbe
sub
mov
lea
jmp
mov
push
pushf
lea
call
call
test
cmp
pusha
lea
jae
cmc
test
stc
jne
cmp
call
xchg
or
addr16
jge
mov
xor
movs
push
(bad)
fcom
js
scas
lds
jnp
test
xor
mov
push
lea
push
mov
pop
adc
cmp
outs
fwait
rol
xlat
loopne
dec
xchg
and
or
pushf
aad
fcomp
nop
stos
not
push
test
mov
loopne
cwde
cmp
sti
mov
loope
and
sbb
mov
idiv
mov
push
inc
leave
rol
(bad)
cld
jge
sbb
inc
test
push
leave
popf
not
lahf
fwait
jbe
das
es
(bad)
int
cmps
cmps
pop
mov
mov
out
xlat
inc
pushf
clc
jo
and
ret
adc
xor
push
mov
xor
cli
xchg
xchg
dec
sbb
mov
cli
jmp
inc
adc
lea
jae
push
cmp
sub
call
sbb
push
in
fidivr
and
adc
movs
retf
movs
repnz
(bad)
jle
repnz
mov
jnp
fimul
push
test
fcmovnb
inc
mov
jle
jbe
mov
jmp
mov
adc
in
dec
jo
xchg
add
or
test
fwait
cli
pop
mov
pop
adc
inc
jl
cmp
retf
mov
out
test
and
jo
ja
(bad)
jmp
js
std
sub
cmp
call
adc
(bad)
push
lods
or
shl
xchg
or
loope
bound
stos
mov
sbb
cwde
lea
call
cmc
bt
mov
cmp
pushf
test
push
jmp
ror
btc
rcr
mov
stc
and
pusha
add
pushf
push
pushf
lea
jmp
icebp
imul
je
dec
add
loop
out
and
aad
push
or
push
sub
cli
jae
dec
push
mov
push
push
or
cmc
loope
push
mov
mov
pop
mov
call
outs
xchg
ins
je
pushf
xchg
inc
fcos
xor
push
not
scas
arpl
sbb
push
lods
jecxz
aad
retf
ds
xchg
cmp
call
adc
leave
std
dec
into
bound
cmp
adc
push
push
addr16
(bad)
rcr
lahf
inc
(bad)
(bad)
ror
jle
call
add
push
push
mov
push
xchg
pushf
call
push
mov
pushf
pushf
mov
mov
mov
push
lea
jmp
or
push
repz
fidivr
inc
push
int
sbb
inc
jbe
cld
aas
mov
pop
(bad)
jne
stc
repz
push
pop
sbb
icebp
lods
bound
adc
rcl
loopne
mov
push
in
cwde
cwde
xchg
or
(bad)
bound
cld
ret
neg
out
sub
and
cmps
adc
cwde
and
das
inc
rol
std
push
pop
(bad)
fisttp
sub
sar
je
mov
popa
mov
test
and
or
jmp
into
xor
jmp
sub
imul
jmp
(bad)
jmp
out
gs
jge
shr
inc
sahf
repnz
pushf
xchg
int3
and
add
mov
pushf
push
pushf
push
ret
push
pushf
inc
jmp
cmc
cmp
mov
mov
lea
jb
cmc
cmc
test
cmp
jmp
and
jge
pop
pop
pop
inc
cmp
daa
xchg
nop
imul
shl
ficom
add
pop
scas
out
cmp
sti
je
rcl
jae
xchg
add
dec
dec
aas
fwait
setbe
jp
mov
mov
xchg
pop
shl
aas
cmp
mov
test
retf
cmp
add
or
add
cmp
dec
push
fwait
(bad)
mov
xchg
in
aaa
xchg
std
adc
out
lahf
mov
add
xor
or
movs
stos
dec
add
icebp
push
daa
mov
iret
aad
mov
gs
sub
xor
dec
push
and
stos
imul
push
mov
call
fcmovbe
jg
icebp
jge
in
xor
cmp
jmp
clc
ss
add
pop
or
inc
aaa
repnz
xor
clc
push
mov
cmp
ror
mov
push
mov
mov
pop
rcl
shr
ds
mov
(bad)
into
sbb
imul
jge
cmp
jl
call
xor
mov
(bad)
in
fwait
loopne
shl
push
call
add
(bad)
dec
push
sub
dec
stos
mov
xchg
and
ret
cwde
jl
or
mov
inc
jge
mov
mov
push
ins
jnp
mov
dec
loopne
ds
push
xchg
aaa
cmp
test
push
xchg
ret
cld
rcr
add
add
sub
push
cmc
cmp
sbb
xlat
setge
push
mov
xor
(bad)
scas
inc
xchg
and
dec
inc
hlt
lea
jbe
jo
les
(bad)
add
ret
dec
push
push
fbstp
enter
outs
vmovhpd
adc
dec
shr
in
mov
sbb
pusha
in
addr16
fs
sub
popa
dec
fisttp
xchg
jb
dec
xchg
xlat
lea
fwait
pop
test
mov
cmp
mov
rcl
dec
push
xor
int3
pusha
cmp
(bad)
mov
test
sbb
leave
push
lods
(bad)
aad
js
xor
pop
js
jmp
lea
ja
inc
setb
inc
inc
pushf
dec
inc
lea
adc
sar
xchg
pusha
mov
neg
bt
mov
lea
pushf
pusha
clc
mov
sar
pop
btr
mov
cmp
push
stc
sub
mov
pushf
mov
pusha
rep
call
lea
jae
pushf
mov
pusha
lea
jmp
add
push
popa
jb
popa
outs
je
push
push
jns
add
push
mov
dec
pop
jae
mov
cmp
sub
pop
fnstenv
xor
cmp
xchg
add
int3
sub
xchg
mov
or
push
pop
cmp
sahf
mov
jecxz
pop
cmp
shr
stos
outs
jle
loop
jl
jg
add
(bad)
cmp
ins
ret
and
cmps
nop
js
xor
loope
stc
movs
sbb
sbb
aas
call
xchg
xlat
add
call
enter
sbb
cmp
jl
sub
mov
cdq
repnz
sub
div
lahf
clc
addr16
outs
inc
(bad)
dec
or
aad
pop
pop
xchg
inc
sbb
call
jge
idiv
dec
les
jmp
mov
and
or
fs
push
xchg
sub
loopne
mov
int
ss
retf
ss
ror
or
xor
loop
jnp
pop
(bad)
and
sar
cmps
test
inc
imul
pop
sbb
pop
xor
mov
wbinvd
aam
inc
sub
test
cli
ficom
mov
jmp
jns
jno
add
test
scas
loop
lds
pop
fs
call
mov
cmps
pusha
inc
add
shl
sbb
and
mov
push
pop
xor
and
ins
mov
jae
push
jmp
adc
repz
ja
imul
repnz
sbb
aas
xchg
movs
sbb
das
or
bound
adc
jle
ret
fdivr
test
loopne
lods
in
pop
mov
gs
scas
fs
and
xor
xor
sbb
push
jbe
out
nop
push
sub
mov
mov
in
jne
and
ds
mov
add
test
jno
(bad)
fcomi
jg
or
cmps
push
or
rcr
xor
push
fdiv
push
mov
out
pop
ret
jns
iret
or
(bad)
sbb
hlt
xchg
mov
jns
push
cwde
fs
xchg
popf
fs
and
cmp
imul
dec
je
jmp
jge
push
mov
push
jmp
clc
cs
jmp
sbb
pop
loopne
xchg
jae
xor
rcr
scas
in
sbb
xor
jne
nop
(bad)
push
cmps
push
ds
push
xlat
sub
aam
mov
push
lea
mov
xor
add
lods
loope
jbe
pop
adc
lods
add
push
sbb
sti
push
cmps
cli
mov
mov
int3
lock
dec
inc
sbb
jmp
or
mov
jbe
xor
mov
adc
loopne
sar
(bad)
cld
xchg
cwde
jo
lock
jl
cmp
cmp
and
je
mov
les
mov
dec
inc
ret
jmp
jmp
int
js
jmp
push
je
or
outs
data16
test
push
icebp
mov
push
movd
xor
add
mov
loop
mov
jmp
adc
sar
xchg
in
sbb
mov
ret
push
push
mov
dec
jg
stc
lock
imul
fdivp
pop
aad
inc
fnstcw
mov
sub
ds
mov
stos
or
fnstsw
ja
xchg
and
push
(bad)
stos
loop
xor
xor
push
stos
mov
push
imul
mov
add
into
push
dec
mov
push
in
loope
and
lea
ja
mov
pushf
rcr
clc
sub
call
pusha
push
mov
pusha
lea
jmp
call
add
mov
daa
test
add
mov
test
pop
pushw
mov
mov
mov
jbe
and
lods
(bad)
aaa
xchg
iret
inc
dec
push
in
sub
dec
add
and
jbe
jg
jecxz
mov
outs
xchg
mov
xor
sbb
add
ret
cdq
jnp
in
pop
sub
fdiv
pusha
jecxz
scas
scas
and
into
aam
mov
inc
cli
addr16
sub
push
sbb
ret
or
xor
mov
mov
dec
xlat
(bad)
inc
xchg
push
repnz
jecxz
adc
or
add
push
push
imul
adc
sub
out
fisub
or
ds
push
push
and
inc
jnp
push
sbb
bound
retf
out
mov
(bad)
(bad)
js
inc
mov
(bad)
jmp
fs
jne
sub
shld
clc
push
mov
call
pop
pushf
mov
push
ret
xlat
dec
ss
jge
movs
test
(bad)
push
repnz
sub
idiv
imul
pop
and
push
mov
aad
shl
lods
movs
push
call
dec
aaa
jecxz
ja
and
fst
cmp
int
imul
pop
inc
cld
out
fst
into
call
xor
shl
repnz
dec
dec
dec
add
ds
sahf
je
xor
sti
inc
enter
daa
int
sub
xchg
mov
and
xchg
jmp
pop
test
pop
(bad)
ror
add
inc
push
cmp
hlt
jmp
fnstcw
cmp
push
enter
push
retf
pop
scas
ret
mov
jmp
call
adc
aad
test
sbb
cmps
clc
jno
dec
loope
mov
repz
imul
xlat
loopne
ins
cli
cmp
mov
inc
inc
in
push
or
mov
scas
push
fs
cs
or
cwde
xchg
pop
mov
test
cmp
dec
dec
jg
or
mov
push
jmp
push
and
dec
js
jp
add
leave
pop
data16
and
les
popa
js
jo
mov
inc
fild
mov
outs
out
shl
cmp
mov
mov
or
out
movs
popf
dec
mov
sub
es
sti
push
jmp
call
test
cmc
add
push
mov
lea
jmp
ror
arpl
mov
mov
and
mov
pushf
xchg
out
gs
push
call
mov
stc
cmc
fmulp
hlt
gs
repnz
fist
and
adc
inc
mov
pop
dec
jmp
test
sbb
pop
pop
xor
lahf
xchg
into
ret
and
add
or
jecxz
sbb
jle
pop
jmp
jnp
in
and
sar
hlt
call
jo
or
fsubr
inc
popf
add
jo
mov
fnstenv
cwde
push
int
rcr
mov
push
dec
fsub
retf
in
test
mov
dec
jmp
js
ror
jge
sbb
repnz
sbb
adc
dec
(bad)
or
push
outs
and
rcl
dec
cmp
xchg
(bad)
jl
ss
mov
inc
std
stc
cs
push
adc
popa
mov
cmp
sub
cs
add
mov
and
fcmovnu
xchg
popf
cmp
jmp
xor
jae
cmc
sub
mov
xchg
adc
pop
dec
test
mov
mov
fimul
(bad)
pop
pop
sbb
mov
and
inc
bound
sbb
mov
popf
cmp
movs
mov
cwde
test
mov
fwait
nop
out
clc
xor
scas
in
push
test
into
pop
add
jecxz
jmp
scas
movs
xor
iret
push
mov
ficom
dec
add
icebp
cmps
dec
add
sahf
push
ins
mov
jo
sbb
loope
dec
and
mov
movs
mov
sub
enter
mov
mov
mov
mov
and
out
xchg
sub
mov
and
test
mov
ror
cmps
clc
int3
in
mov
and
retf
pusha
movs
and
mov
(bad)
mov
push
mov
icebp
test
or
jecxz
pop
bound
push
test
and
cld
adc
dec
sub
cmp
push
ret
inc
cwde
(bad)
dec
pop
std
xchg
xchg
out
les
add
int
pop
icebp
sub
mov
jp
push
cmp
les
sub
cmp
iret
and
pop
mov
outs
sub
cwde
into
cs
cmp
sub
jp
push
scas
and
sub
call
sbb
sbb
aad
outs
push
retf
(bad)
jae
pop
clc
or
lods
arpl
xor
aad
popa
jecxz
push
jl
mov
imul
gs
movs
jbe
in
push
out
pushf
mov
push
aam
xchg
into
mov
cmp
cmp
popa
jmp
or
(bad)
aad
pandn
dec
cmp
imul
cmp
(bad)
cmc
add
bound
inc
push
test
sar
mov
add
jns
out
jge
dec
mov
xor
sub
mov
imul
jmp
dec
mov
xchg
int3
jg
bound
das
rep
xchg
jbe
jno
movs
sbb
inc
je
and
call
sub
jnp
mov
mov
add
sti
pop
rol
pushf
not
pushf
jmp
(bad)
les
pop
in
push
xchg
ds
xchg
inc
cmp
adc
(bad)
jge
cld
out
push
call
inc
shl
dec
mov
in
and
std
inc
mov
mov
aam
icebp
ss
sub
bnd
or
push
sbb
xor
pop
ss
or
push
int3
loopne
cmps
lahf
dec
jecxz
and
sar
ds
into
gs
dec
mov
push
aaa
dec
(bad)
imul
popf
aad
pushf
aad
leave
mov
and
rcr
xchg
xchg
mov
mov
mov
jo
or
jle
inc
or
adc
adc
jl
cmp
pusha
push
pushf
pushf
lea
jne
inc
xor
mov
push
mov
add
cmc
push
stc
movzx
movzx
mov
jmp
pushf
jmp
imul
push
xchg
sti
mov
lock
es
out
icebp
out
stos
cmp
fs
cmp
xchg
jo
add
sub
repz
jbe
mov
sbb
mov
sbb
jmp
push
push
mov
xchg
std
sar
jb
les
leave
mov
pop
fild
arpl
sbb
in
dec
or
stos
ret
jns
sub
lds
jno
std
mov
push
pushf
imul
(bad)
lds
test
ret
add
ins
xlat
push
mov
out
and
xchg
jecxz
cs
pop
xchg
pop
dec
jg
cmp
retf
inc
sub
inc
outs
cli
(bad)
fmul
push
sbb
jne
in
das
sbb
lds
pop
dec
movs
cmp
mov
jno
leave
inc
cwde
add
mov
push
int3
int3
add
mov
sub
(bad)
xor
jo
sbb
cmps
cmp
cmp
jmp
pop
movs
sub
add
lds
adc
loopne
mov
jbe
sbb
imul
popf
hlt
dec
pusha
imul
cs
sti
lods
add
cmp
je
inc
dec
xor
and
pop
pop
add
push
jle
not
mov
mov
sbb
imul
and
fidivr
jmp
(bad)
int
cmps
test
lea
sbb
dec
into
icebp
aad
fistp
push
dec
in
sub
pop
mov
xor
test
in
xchg
outs
push
popa
scas
inc
(bad)
fdivr
repnz
push
sbb
pushf
popa
ins
fwait
repnz
mov
cmp
push
push
or
xchg
out
dec
out
mov
mov
inc
imul
les
push
shl
daa
lahf
icebp
test
call
ret
sbb
mov
cmp
shl
pop
cwde
retf
and
out
dec
pcmpeqw
dec
gs
nop
pop
dec
rol
test
mov
inc
pop
inc
fst
cs
push
or
out
pop
push
add
jg
mov
in
cli
ficom
(bad)
(bad)
jns
cld
xor
cmp
int
out
out
out
dec
inc
jo
push
sbb
and
add
(bad)
(bad)
adc
inc
inc
cmp
out
cmps
mov
das
out
out
ret
pop
fistp
dec
rcl
or
(bad)
ss
cmp
cmp
js
fdivrp
push
hlt
dec
jl
dec
aaa
int
cmp
retf
add
inc
and
icebp
mov
leave
test
pop
push
out
mov
sbb
xchg
idiv
xor
(bad)
jo
sub
clc
add
bound
sub
ror
cmp
cmp
mov
xor
out
dec
cmp
loopne
push
pop
push
mov
dec
inc
fwait
pop
out
movs
fidivr
retf
and
push
pop
push
dec
scas
scas
daa
mov
hlt
push
mov
adc
lds
hlt
leave
mov
inc
add
mov
int
(bad)
aam
repz
push
leave
push
(bad)
jmp
movs
sahf
ja
xor
xor
mov
xchg
test
int
or
cmp
jl
pop
sti
cmc
(bad)
out
jp
push
inc
adc
arpl
mov
lea
mov
imul
or
or
ds
imul
xchg
sub
xchg
xor
retf
xchg
pusha
mov
jmp
(bad)
push
inc
inc
stc
fs
and
popa
scas
ret
jle
dec
les
(bad)
and
or
inc
sbb
sbb
and
repz
int3
into
inc
mov
rcr
and
int3
arpl
xchg
aaa
hlt
aaa
mov
lods
test
pop
mov
push
jmp
sbb
inc
jp
or
ret
movs
pop
add
add
imul
test
sti
shr
push
mov
test
fwait
loope
loop
adc
ins
test
repnz
and
mov
jmp
lea
push
push
sub
int
mov
xor
fistp
mov
popa
xchg
(bad)
jge
loopne
int3
xor
xchg
push
or
sbb
inc
or
ret
lahf
es
daa
retf
or
cmp
push
jg
xchg
jecxz
mov
std
sbb
and
sti
ret
imul
(bad)
inc
jmp
xor
(bad)
push
mov
mov
ins
and
or
scas
div
(bad)
ss
mov
mov
sbb
mov
pop
pushf
mov
or
fcom
jmp
jle
dec
dec
xor
inc
popf
fbstp
iret
sub
jg
imul
jge
fidivr
call
sbb
shl
(bad)
out
cs
arpl
cmps
mov
pushf
mov
ficom
jmp
jns
lea
sar
jl
mov
adc
(bad)
in
test
into
inc
retf
cdq
fwait
push
dec
in
jecxz
lods
fwait
push
sub
mov
inc
cmp
adc
sub
and
int3
mov
sub
mov
ss
pop
repz
dec
ins
mov
or
das
imul
data16
lods
lods
in
sub
mov
push
mov
(bad)
push
aaa
mov
mov
add
fadd
dec
and
sbb
sub
leave
pop
dec
pop
dec
pushf
fisubr
mov
dec
add
sub
aad
xchg
jbe
mov
stos
xchg
mov
mov
in
call
out
icebp
movs
fnstsw
pop
aad
test
fdivr
xor
jg
and
cmp
cmp
inc
cmp
inc
and
xchg
jo
in
cmc
xchg
or
sub
jg
push
test
sbb
dec
les
sbb
(bad)
enter
and
jmp
(bad)
push
in
and
stc
not
call
lea
jae
clc
stc
xor
pushf
call
fnop
and
jge
and
sbb
inc
push
lods
dec
add
jle
jp
(bad)
cmp
ins
and
or
in
and
jns
or
dec
inc
or
ins
scas
movs
test
test
jecxz
mov
imul
xchg
push
popf
push
retf
xor
dec
dec
les
xchg
jbe
sub
movs
stos
cdq
xor
or
cmp
jge
ret
pop
pop
js
adc
xor
push
stos
sub
add
push
jbe
call
xor
jae
jmp
jae
or
jmp
sub
iret
stc
mov
dec
xor
in
jns
add
stc
xchg
mov
push
call
mov
push
(bad)
mov
nop
dec
outs
cmps
xor
scas
movs
mov
xor
(bad)
retf
inc
mov
loopne
mov
in
fwait
mov
daa
test
adc
dec
xor
out
jno
sbb
push
cmps
scas
jg
cli
xchg
nop
in
sbb
loope
test
sti
adc
sbb
ss
sbb
cmp
inc
mov
or
xor
and
push
test
inc
sub
inc
dec
inc
loopne
sub
mov
xchg
jge
jge
mov
repnz
xchg
mov
inc
mov
fsub
cs
sbb
ss
dec
mov
and
dec
cdq
sbb
retf
push
mov
push
call
int3
test
pop
push
xchg
call
cmps
imul
dec
or
hlt
sti
jo
ror
mov
ror
push
cmp
pusha
pop
repnz
outs
xchg
jge
repnz
mov
push
mov
inc
mov
mov
push
hlt
imul
xor
ss
call
pop
cmp
dec
movs
pop
and
cmp
sbb
inc
mov
pop
addr16
cmp
inc
mov
jmp
xchg
xor
rcr
aam
xchg
dec
call
xchg
push
and
dec
gs
xor
sbb
imul
dec
adc
pushf
call
test
add
jge
(bad)
push
mov
or
mov
mov
inc
cli
xor
fmul
add
push
sub
mov
test
dec
mov
in
sbb
jne
or
xor
adc
and
ins
loope
fld
(bad)
inc
push
cs
dec
sub
sbb
sbb
jmp
jns
and
mov
adc
inc
popa
clc
push
push
or
cli
mov
xor
push
aam
jb
in
add
push
or
jl
xor
ret
push
jmp
fnstenv
mov
xlat
into
pop
movs
fnstcw
int3
dec
add
fdiv
ss
sub
(bad)
xchg
dec
cwde
ss
ja
xor
fsubr
or
ins
rcl
cmps
(bad)
xor
dec
add
in
cdq
unpckhps
jmp
int
push
push
outs
or
xor
sahf
push
dec
gs
mov
sti
inc
fnstcw
fs
pop
fwait
push
imul
sar
and
jmp
mov
arpl
cmp
fst
mov
dec
jo
push
into
mov
sub
sbb
sub
xor
pop
daa
and
mov
lahf
imul
jmp
xor
(bad)
aaa
pushf
mov
cmps
push
push
xchg
fsubr
push
push
sbb
jmp
fwait
adc
mov
stos
mov
dec
xor
(bad)
adc
pop
inc
test
push
retf
scas
xchg
push
dec
out
daa
mov
mov
mov
and
(bad)
mov
mov
pop
cmp
cmp
icebp
pusha
cmp
add
inc
xchg
and
mov
dec
push
or
fdivr
addr16
mov
repz
(bad)
jle
mov
mov
jge
in
das
es
je
xchg
push
hlt
xchg
xchg
mov
shr
push
inc
dec
sbb
add
mov
cmp
ja
add
stos
sub
jle
xor
cwde
shl
pushf
cmps
jns
cmp
and
iret
(bad)
(bad)
push
dec
mov
pusha
loope
test
mov
std
or
(bad)
jne
or
mov
or
popa
ror
pop
lahf
(bad)
mov
push
add
fldenv
push
xchg
push
ja
jecxz
shl
addr16
sub
jge
add
jno
and
xchg
imul
jnp
imul
and
sbb
jmp
jno
dec
test
mov
jge
xchg
adc
je
xchg
in
fdivp
and
ja
lods
inc
movs
popf
jbe
sbb
dec
add
loopne
stos
and
pop
call
in
jg
retf
hlt
inc
jg
test
push
(bad)
mov
repnz
loopne
push
xchg
mov
out
mov
sahf
xchg
xchg
in
cs
push
jle
jne
adc
xchg
lds
lods
icebp
jb
mov
outs
js
push
(bad)
mov
pop
inc
cmp
lods
mov
shl
pop
cmp
pop
not
xchg
and
je
or
pop
adc
sub
mov
jle
sbb
xchg
bnd
loopne
jbe
lock
xor
(bad)
cmp
in
add
jge
cdq
jns
daa
pop
in
mov
ficom
popf
mov
xor
sti
pop
or
mov
test
je
adc
hlt
test
cmp
lds
xchg
adc
scas
and
jnp
repnz
js
inc
inc
inc
sub
pop
push
aad
mov
dec
stos
ret
pop
aaa
cmp
div
sar
inc
sbb
sub
cs
bound
dec
movs
in
(bad)
jge
adc
stos
inc
jns
and
stos
and
shl
sub
test
repz
adc
nop
jb
push
xchg
sub
and
jle
pop
xor
pushf
push
xlat
lea
cmp
xchg
mov
xlat
mov
dec
fst
sbb
les
add
aad
jno
push
daa
ffreep
mov
or
push
test
cmp
mov
sbb
push
jb
fidivr
out
loopne
push
dec
adc
or
mov
popf
mov
pop
fwait
mov
addr16
aad
bswap
push
inc
repnz
mov
push
dec
aad
push
add
sbb
movs
retf
xchg
out
and
lea
fisub
add
xchg
sar
inc
fadd
xchg
mov
in
add
enter
call
fcom
mov
bound
cmp
and
cmp
mov
mov
mov
movs
cmp
nop
push
ficom
jo
sub
or
or
mov
xor
push
mov
imul
adc
mov
ret
jl
or
jbe
fdiv
cmps
cld
xchg
in
push
(bad)
sub
xchg
push
stc
fist
jle
loope
mov
(bad)
int
add
mov
rol
shl
movs
fs
out
in
inc
psraw
cmp
xor
add
popf
addr16
pop
iret
ror
pop
mov
pop
jae
sub
adc
ins
lods
dec
sbb
test
(bad)
fadd
cld
adc
pop
aad
push
mov
call
mov
imul
cdq
push
mov
mov
jmp
int3
and
mov
mov
cdq
xchg
dec
sti
sub
scas
(bad)
in
ins
jecxz
mov
(bad)
std
inc
sub
call
cld
repz
jmp
xor
sbb
fdivr
and
adc
add
sub
push
sub
test
push
stos
or
ins
inc
push
fwait
adc
outs
sub
ja
stos
into
mov
mov
lock
lods
inc
pop
stc
iret
mov
mov
sahf
push
jmp
repz
adc
jle
cmp
jge
adc
mov
arpl
scas
retf
add
xchg
sub
mov
lock
mov
fdivp
and
sub
in
repz
test
sbb
mov
mov
adc
call
ror
xchg
push
sub
xchg
sahf
dec
ds
in
dec
retf
sub
push
add
cmc
sar
jnp
inc
fst
push
mov
arpl
cmp
call
xchg
adc
out
xchg
sbb
mov
lea
sbb
out
cmps
mov
loop
mov
jb
dec
adc
cmp
inc
push
outs
or
lods
ja
dec
mov
rcr
sbb
out
ds
rcr
aam
push
cmp
push
xor
push
test
fcom
dec
ret
mov
and
and
mov
call
out
sbb
adc
pop
iret
push
ret
fmul
ds
jp
dec
xchg
sahf
js
mov
push
cld
add
fist
jbe
mov
ss
js
rcl
sahf
pop
push
add
add
fcom
sub
cwde
lahf
or
dec
mov
addr16
mov
popf
icebp
retf
and
cmp
pop
sahf
rol
ins
outs
daa
lock
sub
stos
loop
dec
adc
sbb
xchg
xor
push
jmp
popa
sbb
jo
add
sbb
ret
jp
lea
call
jmp
dec
add
push
sti
sti
jno
push
jg
sub
(bad)
imul
mov
add
popf
xchg
inc
ja
adc
sub
mov
mov
inc
dec
push
xor
xchg
push
loopne
jmp
jbe
sbb
jecxz
in
sub
rcr
adc
pop
cmp
add
xchg
xchg
cmc
mov
mov
add
mov
arpl
sub
and
or
sbb
xchg
xlat
jo
xor
out
in
xchg
icebp
sbb
mov
outs
test
scas
pop
adc
fwait
sub
scas
arpl
xor
mov
ins
xchg
jmp
dec
movs
fs
add
cmp
outs
rcl
out
lock
fist
pusha
adc
xor
(bad)
stos
fs
xor
adc
push
sub
add
mov
ds
mov
ins
push
dec
inc
add
cmps
(bad)
mov
pushf
sub
inc
mov
xchg
mov
mov
mov
sar
xchg
scas
sbb
int
cmp
icebp
push
add
push
aaa
loop
xchg
or
add
fistp
das
mov
retf
add
ins
in
leave
cmp
lods
mov
aad
xchg
enter
scas
hlt
jne
test
pop
xchg
lods
(bad)
aad
jns
and
lahf
fwait
sub
jmp
movs
sahf
dec
mov
repnz
mov
push
cmp
lods
std
push
aam
cmp
inc
jl
dec
jg
sub
xchg
pop
or
int3
scas
out
jno
popf
push
inc
xchg
jmp
shr
bound
out
sbb
sar
mov
(bad)
xor
add
add
daa
pop
rcl
add
(bad)
add
pop
jl
mov
dec
mov
jae
push
ds
jbe
shl
mov
dec
xchg
push
push
adc
scas
inc
pop
mov
pushf
jmp
popf
pop
adc
lea
adc
fcmovnbe
outs
pop
cs
mov
adc
je
xor
mov
xchg
dec
inc
jl
add
cmp
jle
leave
mov
mov
inc
add
mov
dec
cmp
adc
mov
movs
call
or
add
add
test
adc
pushf
or
ds
xlat
imul
leave
sti
and
pop
xchg
jmp
sbb
sahf
jbe
aad
push
call
sbb
mov
icebp
sbb
dec
or
push
and
scas
inc
pop
xor
loope
add
ins
retf
add
xor
inc
and
push
xor
icebp
xor
ret
xor
push
(bad)
mov
enter
push
pop
mov
movs
adc
xchg
jmp
xchg
sub
cdq
iret
jge
mov
mov
xor
mov
pushf
xchg
retf
mov
dec
fsubp
retf
repnz
sbb
addr16
push
add
ins
into
data16
xor
out
fsubr
std
sahf
shl
xchg
clc
es
mov
xchg
mov
adc
js
sub
jecxz
retf
and
aaa
jge
data16
push
jl
mov
pop
int3
dec
lds
xor
ror
mov
pushf
mov
data16
mov
je
push
call
data16
loop
test
jae
and
(bad)
or
mov
cmps
fisttp
add
dec
adc
jb
push
add
popa
jbe
sbb
stos
arpl
sub
mov
pop
xlat
dec
(bad)
(bad)
and
mov
cmp
mov
lea
jbe
inc
mov
inc
pusha
add
stc
mov
cmp
clc
add
cmp
bts
or
mov
or
rol
mov
add
push
cmp
pusha
pushf
lea
ja
jbe
bsr
bsf
stc
sub
neg
rcl
ror
rcr
mov
dec
setae
mov
bsr
xchg
call
loopne
(bad)
aad
jge
std
jle
cs
push
fwait
mov
in
dec
mov
sbb
fbld
inc
jns
inc
mov
and
aad
scas
xchg
mov
(bad)
xor
or
scas
sub
jp
mov
pop
into
sub
bound
pusha
push
cmp
mov
ffree
dec
popa
neg
outs
cmps
mov
dec
in
test
adc
pop
cmp
pop
mov
mov
adc
hlt
or
fcomp
shl
pop
cmp
rcr
shl
sub
das
fdiv
jg
mov
and
scas
fwait
sub
and
or
test
jl
iret
add
ss
inc
ja
lods
mov
cmp
or
popf
mov
sub
jge
sub
fisubr
xor
popa
(bad)
iret
pop
ss
push
jmp
cli
sbb
push
lods
sti
mov
or
aaa
js
jmp
cmp
dec
aam
pop
cmp
push
(bad)
fcom
dec
sub
int
push
xor
cli
fmul
mov
scas
jnp
fsubp
mov
cdq
xchg
xor
(bad)
(bad)
push
rcr
fidiv
mov
push
nop
leave
push
sub
cs
cli
repnz
aam
add
or
popf
lea
and
mov
add
xor
test
outs
daa
push
add
push
pop
scas
inc
jge
pop
sbb
cmps
mov
mov
dec
sub
pushf
push
ret
cdq
sub
push
imul
outs
push
jmp
jmp
(bad)
jns
imul
push
or
push
ja
rcr
(bad)
cmp
ror
adc
out
jbe
or
aad
adc
sbb
mov
call
mov
jecxz
jle
pushf
mov
pop
xchg
jmp
push
xchg
lock
mov
add
xchg
movs
sbb
inc
pop
test
fs
xchg
lds
pop
adc
or
add
stos
mov
jg
and
mov
push
aas
inc
sub
jmp
leave
pusha
push
dec
and
lds
arpl
adc
mov
push
dec
iret
inc
cmp
idiv
lock
outs
call
add
cmp
sub
lahf
inc
mov
(bad)
mov
jl
mov
(bad)
sbb
mov
les
test
jle
jmp
mov
mov
mov
push
ds
cmp
dec
push
adc
movlps
jbe
int
mov
mov
add
ja
mov
mov
jmp
stc
cs
mov
mov
jae
pop
scas
add
sti
adc
scas
mov
dec
movs
add
inc
(bad)
ret
xchg
add
mov
jmp
adc
push
fwait
fwait
push
jns
push
push
sub
adc
ins
jecxz
sub
and
call
xchg
ins
jmp
loope
push
push
into
sbb
pusha
call
(bad)
in
sbb
mov
stos
sub
(bad)
sub
mov
mov
push
dec
sbb
jae
mov
mov
fiadd
or
mov
dec
pop
loopne
mov
mov
js
add
leave
shl
cwde
or
outs
push
inc
add
pop
call
sub
inc
jg
inc
out
push
xchg
imul
mov
or
loopne
jp
retf
and
movsx
ror
mov
test
cmp
pushf
call
mov
call
stc
add
jmp
aad
je
leave
jge
jo
lds
jmp
(bad)
dec
scas
addr16
xor
pop
popa
sti
adc
outs
sti
outs
shl
mov
into
mov
dec
rcl
xchg
iret
out
stos
add
cmp
cmc
mov
dec
sub
pop
invd
mov
stos
pop
popf
lods
add
outs
push
mov
jo
inc
and
rcl
pop
xchg
mov
gs
arpl
in
xor
push
pushfw
fidiv
nop
mov
pop
sbb
push
mov
cmps
jl
adc
imul
fmul
jge
inc
jo
xchg
mov
pop
push
out
pop
jno
shl
xor
arpl
into
retf
pop
les
inc
jns
mov
clc
xor
cmps
loopne
push
push
jmp
sub
arpl
jecxz
mov
test
and
mov
mov
push
into
out
pop
adc
push
sti
pusha
(bad)
jns
inc
and
adc
inc
cmp
gs
or
stc
push
mov
aam
nop
nop
or
inc
pop
cmp
xor
jns
push
hlt
cmp
and
mov
inc
jg
(bad)
fwait
adc
ret
cmp
repz
fdiv
inc
out
movs
xrelease
add
mov
movs
inc
or
ins
or
adc
push
sub
mov
test
mov
mov
jmp
xchg
leave
push
push
enter
std
in
push
les
and
and
adc
(bad)
je
xor
rdmsr
mov
ss
(bad)
jb
add
fst
sub
lods
add
loope
or
cmp
(bad)
jne
test
or
push
into
(bad)
bound
sub
out
sub
cld
xchg
sub
popa
sub
hlt
xchg
retf
sahf
push
and
mov
mov
es
(bad)
loopne
cmp
imul
adc
(bad)
jge
adc
add
pushf
mov
push
inc
or
(bad)
adc
push
and
xor
in
push
mov
mov
xchg
arpl
jb
in
xchg
ds
ins
xchg
dec
mov
nop
enter
call
fld
(bad)
popf
jbe
dec
dec
xchg
mov
sub
jns
or
repnz
aaa
scas
ret
jns
sbb
ja
in
jnp
push
pop
sbb
pop
mov
pop
mov
mov
push
jle
xlat
xchg
ret
(bad)
mov
stos
dec
and
aad
push
enter
fst
or
and
and
out
push
sub
inc
js
enter
in
cld
mov
jno
icebp
inc
jns
sbb
jae
pop
clc
mov
pop
test
ins
or
ss
test
push
lea
je
push
call
(bad)
xor
push
mov
dec
inc
sti
jne
push
pop
push
mov
lods
out
fimul
jmp
out
or
sbb
mov
mov
daa
cmp
push
nop
mov
adc
or
test
js
cmp
stos
gs
xor
pushf
xchg
mov
jge
inc
in
add
add
(bad)
fucom
(bad)
jns
imul
aaa
out
add
popa
ja
(bad)
enter
xchg
dec
xor
dec
pusha
cld
push
mov
inc
mov
push
(bad)
out
imul
fnsave
dec
hlt
dec
and
loop
jge
cwde
cwde
into
ds
fisttp
inc
loop
push
push
scas
loop
or
jns
push
sub
retf
push
push
movs
mov
inc
mov
adc
data16
stos
scas
xchg
push
loopne
mov
(bad)
shr
mov
jns
add
aaa
mov
xor
push
out
popf
xor
jecxz
mov
out
popf
fs
add
xchg
or
addr16
add
into
into
lds
repz
sub
and
dec
cmp
hlt
sbb
test
int
shr
xor
mov
xchg
push
xor
push
xchg
ins
jae
adc
inc
dec
xchg
lds
mov
iret
test
push
ret
add
stos
and
inc
dec
add
cld
stos
not
std
xor
leave
ror
push
pop
ja
or
ret
cwde
cmps
inc
fisttp
sub
lds
in
push
jnp
xor
scas
nop
leave
pop
sbb
or
test
mov
je
xor
loope
jg
test
jmp
xchg
xchg
lea
std
cs
add
movs
icebp
pop
jg
clc
ins
ins
outs
adc
das
add
pop
or
xchg
mov
and
add
jmp
xchg
shr
sahf
div
lock
les
push
loope
pusha
outs
outs
data16
cwde
xor
pusha
push
dec
stc
pushf
cmc
clc
mov
call
dec
test
adc
jge
cmp
aam
cs
ds
lea
fst
push
or
ret
aad
push
aaa
lods
ss
outs
jbe
hlt
shr
ret
add
call
sub
mov
sub
(bad)
rol
imul
and
ins
leave
popf
add
jl
movs
cmps
jnp
add
mov
loopne
mov
cmp
(bad)
jns
push
aaa
scas
loope
xchg
push
dec
push
mov
adc
jecxz
enter
xlat
xor
lds
sbb
mov
retf
loopne
xor
xchg
push
or
lods
jbe
xor
mov
sahf
xchg
push
xchg
mov
pop
aas
cmp
lods
xchg
fnstenv
pop
popf
sbb
mov
adc
mov
pusha
mov
jmp
jmp
push
or
xor
jge
pop
fst
mov
inc
push
or
loope
mov
cmp
cmc
loopne
jbe
mov
cmp
fld
adc
sbb
movs
pop
adc
stos
mov
(bad)
sub
push
(bad)
fmul
fsubr
lock
sbb
bnd
sbb
mov
loopne
(bad)
add
aas
daa
cmc
sti
xor
jmp
xchg
push
(bad)
sbb
loopne
xchg
pop
mov
pop
test
out
in
call
jmp
pop
adc
xchg
inc
pop
and
and
scas
js
sbb
jb
mov
jge
inc
and
mov
jmp
movs
xchg
jl
js
jge
cs
mov
jo
movs
add
xchg
syscall
iret
push
fisubr
jmp
mov
std
test
xchg
leave
dec
mov
mov
scas
cmp
sbb
cdq
cmp
sub
(bad)
fisttp
cs
add
dec
leave
push
adc
and
fcom
mov
adc
fs
jmp
pop
shl
fcomp
mov
dec
fs
xlat
sbb
mov
xor
imul
jge
int
mov
sti
sbb
mov
shl
jmp
je
push
xor
(bad)
int
xor
into
inc
push
cld
adc
mov
mov
mov
ins
mov
dec
dec
jb
xor
adc
shl
clc
sub
clc
bt
stc
ror
jmp
cmps
fild
add
pop
repz
or
mov
push
inc
mov
push
addr16
adc
or
jge
das
adc
jo
out
jle
lock
loop
jp
dec
mul
pop
scas
mov
xchg
retf
pop
add
inc
dec
lahf
clc
pusha
fdivrp
aas
int
imul
cmp
loopne
pop
mov
dec
mov
mov
fisub
leave
in
dec
mov
sbb
movs
mov
loope
mov
bound
ficom
ror
mov
icebp
addr16
into
jecxz
xchg
in
stc
xchg
fist
inc
ss
or
jne
mov
push
sbb
clc
mov
add
shl
in
add
ss
jp
sub
mov
out
and
fst
imul
sahf
or
adc
leave
and
ja
dec
pop
inc
call
jge
jecxz
mov
or
mov
idiv
test
hlt
out
mov
pop
cmp
and
jns
push
xor
shl
dec
enter
cmps
loopne
test
icebp
leave
sar
pop
clc
and
outs
push
cli
jno
or
shr
xchg
or
leave
out
pushf
dec
push
add
out
push
xchg
sub
adc
xchg
sub
or
mov
add
pop
pusha
rcr
xchg
xchg
ja
adc
mov
or
push
add
jno
lahf
mov
pusha
sbb
mov
xor
lock
mov
mov
(bad)
xchg
fisubr
cld
sti
adc
(bad)
iret
dec
jg
jns
retf
int
jns
cld
sub
je
inc
das
test
push
movs
(bad)
xchg
push
cld
mov
adc
mov
out
rol
fidivr
leave
leave
aas
call
dec
inc
or
mov
gs
pop
jo
dec
push
int3
into
test
xlat
test
inc
test
bound
pop
ret
jns
and
dec
and
jl
push
cmp
xchg
dec
rol
push
xchg
add
out
cdq
es
ds
repnz
aas
adc
mov
repz
pop
scas
inc
pop
shr
mov
in
mov
jae
test
push
push
xor
loope
mov
test
mov
jmp
outs
or
ror
mov
mov
xchg
or
enter
mov
push
cmps
popf
push
xchg
mov
cmp
je
shl
retf
sbb
adc
dec
int
xor
mov
icebp
lods
cld
fwait
jp
(bad)
test
push
call
(bad)
xor
mov
xchg
jns
mov
pop
xchg
jb
imul
aam
pop
xchg
icebp
lahf
mov
retf
test
shr
ds
das
jno
adc
loopne
push
mov
or
cs
mov
js
pop
aaa
imul
(bad)
retf
ins
loop
pop
mov
sahf
in
jge
or
arpl
and
lock
cmp
xchg
test
mov
push
int
dec
pusha
idiv
shl
in
add
adc
cmp
idiv
xor
inc
mov
pop
pop
adc
xchg
and
or
mov
mov
mov
adc
pop
(bad)
push
(bad)
icebp
or
les
retf
inc
enter
stos
ret
pop
and
xchg
nop
xor
jmp
jbe
pop
adc
jo
inc
mov
sub
inc
jmp
in
sub
shl
mov
out
movs
fdivr
popf
adc
or
movs
pop
(bad)
and
iret
(bad)
push
sub
sbb
inc
push
dec
inc
jmp
cmp
add
cmp
mov
adc
push
int
inc
xchg
shr
aas
aaa
add
fnstsw
popf
pop
push
cmps
fcomp
adc
pop
call
jle
(bad)
ja
jb
inc
add
inc
in
test
xchg
push
es
outs
loopne
add
dec
xchg
(bad)
mov
lea
mov
cmp
push
test
or
xchg
movhps
sub
mov
add
call
jle
call
scas
xchg
repz
int
xor
push
in
push
pushf
lea
jae
jmp
fst
xchg
mov
add
cmc
inc
pop
mov
je
ret
(bad)
dec
add
je
push
(bad)
std
xor
ret
out
mov
cmps
ficomp
mov
aam
jecxz
pop
dec
and
pcmpgtw
push
mov
pop
bound
fcmovnb
addr16
lods
rol
adc
int
push
fwait
adc
fldenv
ds
les
loope
std
dec
jg
outs
stos
sbb
mov
xor
cmps
mov
add
int
mov
addr16
xchg
sub
cmp
div
push
sbb
xchg
popf
mov
pop
add
int3
sub
dec
adc
out
inc
dec
pop
out
jae
or
and
lea
jb
push
mov
pushf
pusha
push
ret
xchg
enter
jge
daa
enter
pop
shl
mov
retf
iret
push
sub
adc
push
scas
scas
and
add
lahf
test
cmp
lock
out
icebp
repz
pop
add
rcr
ja
xor
out
xor
in
pop
xor
push
mov
mul
xchg
jne
pop
mul
fptan
pop
ret
dec
push
lods
sbb
sti
movs
inc
adc
and
hlt
push
and
(bad)
rcl
sub
inc
jge
pusha
or
mov
jge
sub
rol
push
pop
sbb
cs
dec
fwait
adc
fst
push
pop
mov
addr16
jno
retf
retf
push
fcmovbe
or
mov
cmp
adc
mov
sbb
and
mov
rcl
cmp
inc
(bad)
dec
nop
repnz
test
jl
fisubr
or
xlat
xchg
mov
jo
and
stc
push
sub
cmp
lods
out
sub
in
pop
cmp
lahf
(bad)
inc
pop
adc
lods
and
add
cwd
jb
or
pop
outs
inc
sub
outs
cmp
or
adc
cmp
std
mov
xor
dec
sbb
aam
and
inc
add
xlat
rol
dec
mov
jnp
jp
in
lea
jae
pusha
stc
sub
pusha
lea
call
jmp
pop
pop
leave
adc
int3
mov
push
popa
sbb
hlt
mov
sub
(bad)
or
scas
jecxz
sub
mov
cmc
cmc
ins
pusha
aam
inc
push
repnz
mov
fmul
lods
and
popa
rcr
je
and
sbb
push
or
in
push
aaa
ins
daa
mov
mov
in
mov
sbb
adc
xchg
cmp
mov
inc
test
int
cdq
not
mov
jne
inc
jno
inc
fwait
iret
lds
cmp
popa
and
clc
or
test
push
(bad)
call
lods
fsub
movs
movs
ins
loop
push
mov
loopne
test
sbb
jge
xor
mov
cmp
scas
sub
push
outs
pop
push
mov
pusha
iret
push
jmp
mov
std
push
pop
cmp
xchg
mov
call
push
sub
xchg
jmp
dec
fnstenv
sub
rol
xor
mov
jmp
outs
out
xor
push
lahf
hlt
mov
stos
dec
xchg
imul
int
dec
mov
enter
retf
xor
or
sub
in
bound
push
or
ret
push
fimul
mov
sub
(bad)
pop
dec
or
adc
lahf
xchg
dec
inc
shl
mov
rcr
lock
gs
xchg
and
fsubrp
in
mov
out
push
arpl
mov
push
(bad)
imul
mov
in
addr16
sub
retf
sub
jge
in
adc
mul
jmp
sub
xchg
xchg
dec
repnz
add
sbb
call
or
cmp
ret
mov
sub
cwde
test
sbb
mov
out
and
jnp
not
lods
mov
pop
ins
inc
arpl
cmp
or
mov
dec
xor
jmp
and
push
mov
(bad)
push
add
cmp
ja
out
mov
push
dec
scas
add
(bad)
fdiv
jne
(bad)
lock
ret
jnp
xor
pop
aam
push
push
das
lock
pop
sahf
daa
mov
mov
pop
sbb
mov
(bad)
or
js
jae
in
mov
jle
dec
mov
pop
sahf
xchg
push
mov
jb
hlt
mov
add
cld
ret
cld
imul
leave
fisub
adc
out
cmc
imul
lods
(bad)
lds
push
(bad)
pop
js
sbb
int3
aaa
outs
pop
mov
adc
aad
repnz
in
bound
jecxz
imul
and
aam
test
in
call
push
lahf
(bad)
loopne
and
js
outs
es
ret
dec
lds
pop
lock
stos
rol
sbb
adc
cli
sub
jbe
movs
jge
or
leave
push
cmp
mov
fimul
mov
mov
push
add
push
daa
sbb
push
dec
jnp
jo
dec
jle
pop
aam
mov
test
sbb
and
std
xor
push
add
out
fs
je
jae
sub
aam
lahf
push
fadd
mov
cmp
cmp
jo
fistp
xchg
adc
adc
mov
ja
popa
mov
in
jbe
push
dec
scas
inc
fs
or
sbb
or
inc
xor
inc
call
mov
inc
xor
jge
xlat
inc
jge
sbb
aam
sbb
ror
cli
popf
push
pop
cmp
sub
fwait
sbb
sub
sbb
cmp
jno
lahf
cmps
or
push
dec
into
add
adc
jecxz
(bad)
jb
push
es
repnz
sbb
xor
test
adc
shr
adc
call
mov
pusha
mov
lea
jmp
cdq
jo
cdq
mov
push
shl
leave
add
gs
push
imul
lahf
mov
dec
or
cmp
aad
push
jb
and
pop
shl
pop
dec
and
inc
inc
not
add
loope
in
add
test
xor
pop
adc
mov
adc
dec
stos
ret
cmc
sbb
mov
mov
popf
int3
xchg
jp
cmovne
sub
sub
mov
or
retf
adc
iret
dec
fbstp
jmp
mov
sub
and
pop
data16
in
jno
retf
jp
sub
into
lds
hlt
push
retf
push
lds
mov
and
aaa
aas
mov
cld
shl
shr
popf
aad
setnp
mov
inc
cmp
xor
and
lds
sub
stc
xor
push
mov
xchg
(bad)
sbb
nop
popf
push
loopne
adc
call
in
rol
repnz
mov
pop
adc
rcl
xor
retf
xor
test
jp
pop
xor
das
mov
push
in
into
pop
jne
out
loope
sub
mov
cmc
sub
sahf
pop
data16
dec
mov
push
dec
int
jp
jbe
(bad)
jg
pop
push
ror
loopne
pop
sub
imul
push
out
fwait
xor
ja
adc
(bad)
outs
daa
enter
fwait
push
mov
jbe
adc
shl
ins
pop
or
nop
cmc
xlat
nop
mov
adc
(bad)
lahf
xor
jmp
cmps
mov
imul
cmp
pop
je
ret
ja
pop
out
test
arpl
jecxz
aad
fwait
jmp
jge
mov
mov
mov
push
dec
out
int
xchg
dec
and
mov
inc
jp
pop
cmps
cmp
test
pop
mov
xor
lods
js
lahf
ins
mov
jge
fidivr
xor
jne
dec
and
test
jno
add
jne
sub
mov
cdq
cmp
mov
out
pushf
pop
push
sub
fidiv
ins
jmp
dec
mov
jbe
stc
shl
(bad)
iret
out
mov
shl
mov
fldenv
mov
pop
jbe
xlat
add
std
or
ror
mov
push
test
add
fwait
shl
cmp
cmps
hlt
sub
push
pop
push
loopne
mov
out
pop
into
push
pop
adc
xchg
(bad)
outs
movs
out
inc
adc
add
repz
(bad)
(bad)
inc
xchg
lock
push
in
adc
jecxz
push
push
inc
sqrtps
push
fcomp
cdq
cdq
mov
xchg
fdivrp
inc
aas
fidivr
xchg
clc
sbb
xor
dec
(bad)
jge
in
xchg
add
loope
inc
dec
and
inc
int3
dec
add
adc
push
jmp
adc
xchg
in
push
cwde
stos
addr16
int3
dec
loopne
xor
inc
rcl
sub
lahf
inc
hlt
dec
in
ficomp
lds
cdq
idiv
fst
in
xchg
out
push
xchg
daa
pop
sub
push
test
jae
ror
sub
adc
aam
push
xchg
ds
sub
jne
adc
enter
adc
pop
movs
mov
inc
cld
test
sbb
adc
fldlg2
xchg
hlt
xor
retf
ret
dec
ins
xor
mov
test
mov
dec
xchg
mov
or
xchg
sub
cmp
fsubr
loop
call
or
xchg
shr
rol
sbb
inc
jb
xor
xor
or
xor
xor
add
cmp
xor
add
push
ss
sbb
in
or
xlat
xchg
dec
sbb
xchg
jnp
inc
push
sti
jnp
daa
pop
out
aaa
or
dec
shr
push
or
xor
cmp
adc
pop
push
addr16
xchg
dec
ret
xchg
mov
add
mov
imul
int3
adc
and
ror
shr
cwde
aam
or
in
inc
adc
mov
in
ret
xchg
int3
sbb
add
retf
adc
lods
(bad)
cmp
push
mov
es
pop
inc
mov
cld
retf
or
xchg
xchg
test
sbb
jl
in
ficom
adc
out
retf
adc
mov
es
ficomp
les
add
movs
pop
pushf
dec
out
cld
add
ins
movs
std
test
mov
out
sub
push
clc
pop
cdq
loope
pop
pusha
mov
call
fimul
clc
lods
sbb
fnsave
xchg
cmp
sti
mov
mov
add
sbb
or
xchg
push
cmp
mov
mov
jbe
stos
pop
fnstcw
mov
pop
xchg
and
xor
jne
xchg
xor
dec
es
sbb
out
imul
mov
ficom
pop
or
pop
dec
dec
movs
in
pop
mov
je
fs
imul
int3
fisubr
mov
imul
out
mov
xor
xor
(bad)
push
in
(bad)
mov
cld
fcomp
(bad)
addr16
lock
add
dec
enter
mov
push
cmps
nop
sub
xchg
adc
sub
ret
je
adc
aam
dec
std
les
clc
int3
in
(bad)
cmp
push
sub
xchg
jge
rcr
pop
sub
(bad)
out
cmp
ret
pop
dec
in
repz
xchg
fucom
icebp
sbb
out
fistp
sub
push
into
imul
cmp
outs
xor
and
pop
movs
movs
add
or
fwait
adc
sub
adc
es
in
push
jne
mov
daa
adc
cmp
(bad)
inc
mov
adc
lahf
scas
ja
movs
neg
push
sbb
jmp
(bad)
push
add
xor
xchg
std
and
cld
pushf
inc
dec
mov
mov
xchg
xchg
sub
dec
in
xchg
stos
pop
repnz
or
dec
retf
adc
push
adc
adc
push
jmp
sbb
sbb
adc
ins
jo
sbb
dec
adc
mov
pop
ds
test
inc
mov
dec
hlt
push
sbb
imul
mov
cmps
cmp
adc
repz
repnz
sar
adc
adc
or
loopne
sbb
mov
or
xchg
shr
xor
int3
out
loop
push
pop
in
jno
push
jne
xor
push
sbb
cmps
sbb
(bad)
pop
push
sbb
push
mov
push
xor
sub
add
adc
pop
mov
rcl
nop
rcr
xor
sub
mov
adc
fld
data16
adc
xchg
shl
shr
dec
xor
add
dec
(bad)
into
retf
mov
sub
xor
ja
sbb
hlt
cmp
adc
stos
pop
cmp
push
cmc
sbb
shl
imul
fwait
cmp
cvtps2pi
or
call
adc
clc
and
pop
dec
call
je
cwde
cmp
(bad)
pop
js
pop
sbb
in
test
ins
loope
pop
lock
js
sub
nop
xchg
out
add
imul
retf
or
(bad)
psllw
mov
lods
and
pop
cmp
xchg
add
xor
push
mov
pop
out
push
inc
cmp
pushf
(bad)
push
dec
inc
leave
dec
mov
out
pop
stos
xchg
iret
cmp
inc
test
add
out
inc
lods
push
and
mov
lods
hlt
in
cdq
or
cld
xchg
mov
pop
ins
add
lods
cmp
sbb
pop
dec
dec
fsubr
or
je
sub
adc
lea
mov
sub
arpl
inc
lock
cmp
dec
shl
int3
outs
and
dec
or
sbb
(bad)
pop
sub
dec
dec
inc
sub
xor
sbb
push
enter
fisubr
nop
fimul
inc
(bad)
ds
inc
push
adc
retf
cdq
movs
push
sbb
clc
sets
mov
pop
mov
gs
mov
jmp
int3
movs
cmps
pushf
bound
movs
mov
adc
cmp
shr
mov
dec
sbb
aam
hlt
cdq
cld
adc
or
clc
ret
movs
adc
in
adc
or
or
push
imul
lahf
adc
mov
cmp
sbb
in
test
sub
or
or
das
add
cdq
rol
xchg
push
pop
fldcw
pop
xchg
jbe
sbb
out
pop
lods
or
imul
xchg
add
and
add
or
inc
popa
adc
mov
aam
sbb
into
cmp
xchg
icebp
pop
add
pop
loopne
mov
mov
mov
es
stos
sbb
adc
dec
int3
ret
mov
call
rol
xchg
cmp
cmp
dec
fimul
xchg
repz
in
imul
mov
mov
inc
and
cwde
adc
xchg
jmp
mov
xchg
call
mov
pop
lods
add
mov
inc
jg
xchg
xchg
push
pop
or
xchg
dec
cmp
push
and
sbb
and
adc
out
and
loopne
imul
xor
and
in
pop
mov
ins
or
ds
ss
fwait
aaa
push
adc
in
pop
xor
push
add
sub
pop
pop
pop
ret
mov
in
jge
or
adc
sbb
sbb
out
adc
je
push
push
push
inc
add
repz
out
sbb
es
mov
adc
retf
add
adc
dec
cmp
lods
jecxz
(bad)
and
push
ins
xchg
add
or
or
dec
push
aam
out
fmul
adc
sbb
sbb
add
cmp
and
retf
int3
in
pop
jp
push
cmp
cli
or
mov
or
ds
push
dec
in
or
test
popf
dec
retf
in
test
sbb
mov
sbb
cli
add
test
mov
dec
sub
pop
hlt
je
cld
push
out
(bad)
in
xchg
nop
push
adc
sbb
xchg
fstp
repnz
into
cmp
mov
(bad)
mov
mov
xchg
sbb
icebp
scas
mov
cmp
retf
mov
adc
mov
sbb
stc
shr
pop
xchg
fnstenv
es
ficom
push
pop
out
into
sti
retf
scas
xchg
fs
std
cmp
push
(bad)
in
xchg
cwde
xchg
add
aam
sti
cdq
lock
inc
sbb
mov
jnp
pop
or
push
push
ins
sbb
pop
ins
xor
dec
das
pusha
mov
inc
adc
je
add
sti
jl
xchg
imul
enter
inc
mov
loope
xchg
loop
push
les
retf
out
mov
adc
ret
test
and
lods
mov
add
adc
pop
imul
ret
int3
sbb
sbb
and
sub
mov
stos
adc
add
dec
lods
mov
dec
and
call
test
and
mov
out
inc
mov
dec
cmps
sub
into
test
sbb
and
cmp
shl
jp
cmp
pop
cmps
mov
lea
outs
sub
cld
add
cmp
xor
fmul
pushf
mov
sbb
mov
ins
adc
je
in
inc
int3
jmp
xchg
dec
or
xor
sahf
fadd
icebp
mov
mov
retf
jb
ror
sbb
inc
out
sbb
xchg
add
xchg
dec
out
ret
jbe
test
inc
xchg
pusha
dec
fs
je
pop
inc
pop
sub
cmps
pushf
pop
rol
dec
adc
inc
lods
aaa
sar
repnz
xchg
add
fld
retf
adc
arpl
cmp
out
stos
xor
sub
pop
mov
ins
cmp
int3
push
cmps
enter
ja
sub
fwait
es
mov
(bad)
aam
lods
in
lods
cmp
(bad)
ror
adc
cdq
(bad)
sub
dec
and
fwait
gs
out
je
bound
aam
nop
and
retf
sti
sub
into
mov
jmp
add
inc
mov
xchg
or
lds
jo
enter
(bad)
fdivp
push
dec
nop
xchg
retf
jle
pop
leave
push
mov
adc
cwde
pop
mov
lods
je
ins
call
ins
cwde
and
retf
mov
dec
xlat
push
fiadd
cmps
ficom
pop
xchg
or
push
adc
retf
call
xlat
sbb
adc
jnp
jo
or
adc
inc
lods
in
xor
jno
xchg
pminub
iret
dec
or
pop
sbb
cmc
aas
in
dec
iret
push
mov
rcr
retf
inc
ret
dec
xchg
sub
pop
sub
adc
retf
aaa
test
ins
sub
retf
mov
adc
sub
add
jb
cwde
not
jo
add
(bad)
or
xchg
loop
sbb
or
jle
or
test
xor
mov
or
pop
in
ds
repz
jmp
pop
aad
add
cmp
cld
lea
das
je
cmp
clc
xchg
dec
out
cli
faddp
adc
adc
push
jo
int3
dec
and
dec
iret
sbb
dec
mov
sbb
lock
add
addr16
jg
scas
(bad)
retf
js
loopne
pop
cmp
sbb
sub
loop
call
adc
les
addr16
sub
adc
retf
cwde
push
mov
dec
jg
mov
mov
mov
push
ror
(bad)
jne
data16
sbb
dec
imul
repnz
pop
pop
pop
out
mov
dec
adc
loop
xor
je
cmp
dec
addr16
ret
dec
push
sbb
aam
dec
ins
test
retf
in
out
pop
test
jne
fisttp
or
test
xchg
fwait
jae
cmp
push
mov
mov
and
jnp
adc
out
repnz
ret
(bad)
shl
cmc
add
(bad)
lds
xlat
mov
out
aas
repz
jo
ins
xchg
add
pop
retf
jle
jno
sar
push
sub
mov
add
retf
imul
movs
loop
mov
inc
or
mov
ret
inc
jmp
cmp
mov
aad
lahf
jmp
daa
sbb
push
ret
mov
in
inc
inc
push
mov
movs
pop
in
jmp
test
inc
push
pushf
xchg
adc
retf
fnstenv
push
mov
sub
pop
aaa
mov
push
mov
cmp
movs
fwait
push
sbb
pop
pop
enter
and
mov
pop
dec
lds
call
pop
int3
test
mov
(bad)
jle
icebp
push
leave
mov
or
adc
rcr
push
(bad)
adc
adc
lock
rol
add
add
(bad)
pusha
push
les
sbb
inc
imul
push
ficom
out
rcr
xchg
add
retf
bound
fmulp
or
leave
int3
js
push
sbb
mov
shl
push
mov
lds
movs
xchg
pop
aaa
std
pop
popf
(bad)
out
add
mov
inc
and
cmp
xchg
rol
push
sbb
mov
and
adc
dec
int3
xor
mov
adc
sbb
mov
out
(bad)
test
std
js
mov
adc
out
ret
int3
shl
retf
xchg
dec
in
xchg
sub
mov
rcl
mov
sti
and
rol
daa
in
out
dec
sub
adc
push
retf
popf
mov
je
mov
cmp
pop
lahf
adc
cld
retf
and
cs
jnp
out
loop
dec
ss
xchg
pop
push
adc
call
rol
sbb
or
cmp
mov
int3
test
mov
fnstsw
pop
mov
push
cld
int3
push
dec
leave
mov
das
sti
sbb
mov
int3
lods
lea
movs
or
mov
xor
aad
cmp
xor
cmp
inc
mov
shr
ins
cmp
test
mov
add
int3
and
sub
dec
int3
sub
loop
push
jmp
mov
daa
mov
mov
and
or
aas
mov
push
ins
retf
add
iret
cmp
daa
test
mov
add
mov
mov
es
push
push
dec
ins
push
fldcw
outs
in
push
or
xor
push
test
test
sub
push
xor
push
dec
and
sub
sbb
add
dec
xchg
pmulhuw
das
cs
je
lea
scas
push
les
dec
ja
dec
or
pop
dec
daa
mov
bswap
add
mov
je
pop
popf
in
hlt
inc
xor
popa
sub
retf
aaa
fisub
inc
push
xor
ret
xchg
sub
push
sub
push
das
rcr
stos
int3
sub
mov
in
sti
dec
sbb
(bad)
cmp
cmp
stc
(bad)
dec
hlt
cmp
popa
xor
mov
imul
jmp
adc
das
aad
push
in
mov
mov
jmp
std
fnstsw
in
pop
sbb
or
adc
cmc
or
(bad)
call
faddp
imul
dec
lods
and
mov
(bad)
mov
push
inc
addr16
inc
je
std
cmc
and
inc
ret
pop
adc
int3
mov
pop
sbb
sbb
push
xor
jp
jns
movs
(bad)
add
sbb
mov
xor
je
inc
mov
lock
into
push
mov
rcr
cmp
(bad)
mov
adc
sub
retf
mov
into
sbb
dec
sub
add
neg
retf
retf
ins
mov
xchg
in
cmp
in
sbb
scas
dec
sub
push
leave
dec
and
xchg
jmp
mov
sbb
jne
mov
mov
jne
cmp
call
in
fild
adc
pop
(bad)
cmp
sbb
mov
lods
add
stc
or
nop
push
push
add
jle
lahf
jge
retf
mov
jbe
aas
xchg
(bad)
jne
mov
xor
ins
gs
dec
int3
push
push
call
add
ins
imul
adc
dec
and
pmuludq
in
into
push
add
je
movs
ficomp
add
pop
fdivr
cld
jl
fimul
xchg
and
mov
pop
sahf
mov
call
(bad)
xchg
adc
fsubr
out
retf
call
xor
sbb
push
mov
cmp
fild
pop
sub
dec
sbb
fisubr
arpl
fstp
mov
add
jge
or
fsub
add
aas
call
mov
mov
pop
inc
xor
int
test
pop
add
adc
push
cmps
mov
xchg
cmova
fist
je
retf
hlt
gs
xchg
push
xchg
loop
ins
mov
xlat
in
inc
hlt
xor
mov
addr16
dec
in
dec
or
test
pop
jbe
mov
es
cs
pop
es
shl
test
xchg
imul
pusha
pop
and
sahf
add
cmp
sub
shl
xchg
and
sbb
pop
pushf
xchg
push
dec
or
push
rol
dec
int
push
cld
inc
(bad)
push
ds
push
pusha
mov
add
int3
xor
fs
shr
sahf
xchg
or
cli
push
push
(bad)
(bad)
xchg
std
(bad)
add
or
cwde
jns
add
jmp
add
push
inc
std
ret
mov
bnd
adc
leave
wbinvd
jl
and
adc
adc
dec
or
cdq
and
imul
aaa
scas
cmp
syscall
mov
imul
mov
inc
dec
jns
scas
cmp
(bad)
and
push
adc
sbb
xlat
or
adc
ja
inc
test
stos
push
test
pop
int3
inc
mov
out
fimul
iret
popa
dec
push
inc
fdiv
hlt
hlt
mov
je
cmp
mov
movs
mov
dec
pop
add
fmul
push
inc
add
out
jg
in
nop
pop
cvtdq2ps
sub
push
push
cwde
xchg
or
add
cmps
sbb
dec
les
or
ficomp
push
push
cli
int3
outs
push
call
xchg
adc
dec
xchg
mov
cwde
dec
aas
test
sub
sub
ja
mov
add
test
aam
dec
xchg
mov
pop
cwde
adc
xchg
dec
dec
dec
and
cmps
push
cmp
mov
xchg
xlat
mov
int3
jne
inc
jl
das
dec
xchg
sbb
je
mov
push
stos
push
sbb
jns
int3
(bad)
fild
pop
sti
je
cmp
sub
cmp
retf
mov
mov
lahf
inc
(bad)
and
stos
mov
xchg
mov
arpl
fwait
mov
cli
in
sbb
cmp
mov
fldcw
in
pushf
pop
sub
inc
jno
inc
xchg
into
hlt
cmps
ss
(bad)
aas
call
sbb
test
sbb
in
mov
mov
out
retf
out
adc
pop
sbb
pop
addr16
cdq
inc
fldenv
dec
(bad)
cli
hlt
aam
xlat
retf
add
fwait
adc
popf
or
xchg
mov
and
mov
fdivr
xchg
aad
ret
ficomp
and
int3
test
inc
nop
push
add
cmps
repnz
daa
rcr
dec
and
add
ret
inc
test
aam
in
jl
add
jmp
dec
jmp
(bad)
sbb
sub
or
mov
dec
loopne
sbb
ss
dec
cmps
adc
int3
mov
xor
adc
in
js
retf
fcomip
pop
adc
shr
jnp
inc
pop
mov
inc
imul
push
cmp
xor
fdiv
push
xchg
or
xchg
xchg
xor
es
jno
cmp
fadd
adc
sub
push
cmps
fs
je
push
pop
(bad)
aam
cmp
or
mov
sbb
mov
push
push
sbb
sub
ins
adc
cld
mov
cwde
test
add
dec
cmp
das
cdq
add
pop
push
push
cmp
fstp
dec
stos
mov
out
les
je
in
loopne
adc
pop
getsec
mov
clc
in
xor
inc
xlat
ins
test
xor
cli
xchg
mov
inc
or
or
lahf
mov
iret
lahf
les
lods
mov
adc
ficom
mov
sahf
mov
inc
xor
sar
mov
add
adc
and
inc
push
dec
(bad)
retf
sbb
mov
adc
jp
lahf
jp
fcomp
push
aam
jb
xchg
jg
dec
sbb
jmp
xchg
xchg
inc
mov
icebp
(bad)
pop
sbb
in
jle
push
adc
sbb
sub
mov
call
test
push
fidivr
add
ins
or
fiadd
sbb
mov
ss
les
sub
and
cmp
inc
sar
sbb
and
mov
push
jg
xchg
add
inc
out
fwait
jl
add
push
adc
dec
mov
stos
cmp
in
outs
or
dec
neg
sbb
les
iret
adc
push
push
es
adc
clc
in
ret
mov
call
loop
sbb
inc
outs
xor
fs
adc
inc
loope
and
sub
pop
adc
or
dec
adc
xchg
retf
adc
jmp
daa
add
not
test
std
add
(bad)
xchg
sbb
inc
(bad)
sbb
rcl
push
add
mov
test
mov
imul
add
not
mov
ss
scas
mov
aas
pop
das
jge
push
popa
pop
jno
cmps
(bad)
jo
ins
retf
fbld
adc
(bad)
fwait
cmps
push
pusha
adc
out
dec
cli
or
jmp
mov
dec
mov
xchg
lock
add
push
jle
into
cdq
fstp
adc
pop
sbb
lods
imul
int3
mov
into
inc
push
mov
inc
ins
xchg
and
push
xor
ror
and
das
stc
xchg
or
pop
pop
add
dec
out
sub
outs
sub
ins
cmp
lea
rcl
push
paddusb
loop
xchg
jmp
or
into
pop
fs
pop
pop
lods
cmp
push
mov
aad
sbb
retf
les
adc
add
push
arpl
sbb
add
push
xchg
(bad)
in
out
push
(bad)
(bad)
adc
mov
xor
xor
cmp
mov
jle
sbb
and
and
cmp
push
lea
out
int3
std
add
adc
xor
sub
cwde
and
call
dec
and
push
push
adc
cs
or
mov
pop
lods
add
fld
dec
cs
imul
add
fxch
sub
jmp
cmp
pop
mov
xchg
adc
fimul
pop
and
push
pop
int3
cld
daa
(bad)
xchg
xchg
fwait
bound
mov
dec
repz
jl
sub
push
or
sar
ficom
fistp
sub
cmp
jmp
xchg
push
inc
daa
popa
aam
mov
and
retf
xlat
xor
adc
mov
xlat
pop
mov
leave
pop
cmp
adc
dec
adc
shl
adc
cwde
les
sub
fwait
pop
lock
dec
cmp
dec
arpl
(bad)
jmp
(bad)
mov
jmp
adc
int
je
pop
push
mov
je
xchg
int
ins
or
in
cmps
sti
or
dec
mov
jns
push
fldcw
push
xchg
inc
xchg
(bad)
jo
xchg
pop
and
fistp
or
and
push
mov
and
mov
retf
ins
leave
test
je
fdivr
cld
or
add
ficom
int
call
movs
ja
cmp
jmp
mov
pop
call
add
mov
popa
inc
mov
pop
fisubr
lods
test
or
cwde
sbb
dec
clc
mov
push
add
fidiv
or
addr16
jno
jecxz
sub
cmp
dec
mov
inc
movs
lahf
inc
jmp
xchg
aam
loopne
gs
dec
aas
jg
push
rcl
mov
in
fidiv
jmp
adc
movs
int3
xchg
aam
dec
cmp
xchg
pusha
dec
adc
fstp
fcmovu
fiadd
out
jnp
pop
pushf
push
dec
mov
addr16
mov
mov
jmp
in
adc
adc
imul
inc
adc
mov
or
std
xor
jl
out
test
or
in
add
stc
call
xchg
pop
xor
movs
clc
fistp
rol
dec
in
cmp
repnz
adc
inc
inc
pop
retf
mov
xchg
or
add
iret
dec
pop
(bad)
scas
repnz
sbb
test
neg
sub
sbb
mov
cld
dec
cld
aaa
jne
pop
add
sbb
mov
sub
adc
adc
sub
adc
inc
adc
stos
jae
(bad)
dec
mov
xchg
(bad)
adc
int3
cmp
fucomi
jecxz
cmp
inc
xchg
cdq
fcmovne
xchg
and
test
pop
loope
cmp
cmp
fcom
ins
or
movs
loope
push
in
sbb
jo
sahf
(bad)
in
movs
inc
scas
js
std
retf
ficomp
pop
push
cmps
inc
jmp
push
xor
cmp
push
xchg
push
gs
ss
mov
and
shl
retf
movs
in
je
pop
and
push
fisub
popa
int3
mov
into
call
es
sbb
sub
adc
mov
adc
mov
fild
sbb
in
rcr
add
sbb
sbb
les
mov
cmp
sbb
jmp
out
ret
jecxz
in
shl
cmp
adc
dec
adc
in
dec
xor
push
or
adc
push
sbb
sub
pop
and
add
adc
push
push
or
fiadd
sar
mov
dec
test
sub
ret
xlat
pop
or
in
or
pushf
inc
or
and
lock
or
scas
xor
xchg
mov
fwait
or
jmp
jns
adc
sbb
jmp
mov
or
mov
inc
add
call
sbb
clc
dec
inc
or
jp
sbb
js
adc
adc
leave
adc
cmc
or
dec
pop
jmp
pop
int3
test
jns
pop
aam
adc
call
adc
ja
loop
inc
inc
cwde
sbb
aad
out
fcom
cmp
push
pop
inc
jns
xchg
push
add
fidiv
adc
xchg
in
lahf
inc
xchg
pop
sub
int
scas
xchg
sub
(bad)
rol
xchg
loop
jecxz
mov
jle
adc
in
mov
call
add
jnp
call
mov
mov
adc
leave
inc
xchg
loope
ror
mov
xlat
lock
mov
stos
test
or
in
sbb
or
push
sbb
(bad)
in
loop
adc
sbb
pop
stc
cld
test
jecxz
jno
in
inc
inc
adc
(bad)
lock
rcr
mov
and
push
xor
mov
dec
mov
rcr
jo
imul
arpl
pop
aam
shl
sti
xlat
popf
fwait
call
cdq
repz
je
cs
neg
dec
aas
pop
cmp
pop
fnstcw
xor
cs
rcl
shl
and
or
jmp
dec
push
adc
pushf
adc
xchg
js
jecxz
xchg
mov
push
cli
shr
mov
and
scas
dec
aam
adc
and
popa
pop
shl
and
or
gs
mov
jmp
push
stos
mov
sub
inc
adc
xor
movs
cli
dec
xchg
jns
adc
popf
cli
or
jb
xor
sub
sbb
and
div
mov
jae
cmp
xor
popa
dec
push
ins
lahf
or
mov
inc
xchg
ja
cmp
aas
sub
fld
fwait
adc
xor
scas
jge
xchg
cmp
inc
xchg
pop
lahf
lea
lods
rcr
xchg
cmc
test
pop
iret
repz
fucomip
outs
dec
adc
sti
mov
and
add
jmp
sbb
pop
je
add
dec
mov
add
push
or
paddw
adc
ficom
adc
add
mov
dec
mov
ds
or
popf
leave
add
add
test
adc
(bad)
jecxz
xor
jle
retf
pop
pop
cmp
sub
into
dec
bnd
jmp
inc
or
push
mov
xchg
inc
ror
fnstsw
cmps
mov
inc
ins
into
pop
lds
jl
lock
mov
ret
cdq
arpl
call
pop
jmp
retf
mov
or
neg
mov
pop
push
and
imul
sahf
call
add
pop
push
aam
sbb
and
sbb
adc
jl
cmp
or
fiadd
jmp
retf
test
dec
cmp
sbb
xchg
sub
jo
rol
push
cwde
ja
xchg
retf
sbb
add
shl
(bad)
and
cli
cmp
scas
js
xchg
push
push
xor
xchg
mov
out
cdq
rcr
inc
(bad)
jmp
test
icebp
or
fcmovnbe
aam
or
push
test
xor
je
shl
enter
sub
je
lock
inc
push
pop
popf
inc
mov
adc
xchg
rcl
outs
(bad)
dec
push
jp
sahf
or
(bad)
das
dec
test
xchg
inc
addr16
xchg
ins
and
adc
repnz
iret
jmp
lahf
xlat
or
jmp
aaa
adc
pop
sbb
xor
xor
mov
dec
test
pusha
xchg
xor
in
dec
fisttp
adc
sub
xor
shr
iret
jmp
clc
je
scas
cmps
icebp
retf
sbb
mov
pcmpgtd
(bad)
and
leave
call
or
dec
and
jae
sub
mov
inc
mov
cwde
out
mov
xor
and
mov
shl
jle
mov
je
fs
adc
mov
sbb
lds
ins
sti
xchg
or
mov
or
xor
inc
fisttp
xor
or
leave
xor
xchg
pop
cli
int3
dec
jmp
inc
psrld
call
shr
push
xor
dec
jecxz
adc
imul
hlt
lock
rcr
sbb
ret
loop
dec
fld
std
loopne
push
retf
call
lahf
fnstsw
js
adc
adc
cmps
or
mov
(bad)
mov
(bad)
xchg
rol
call
test
scas
jb
jmp
int3
stos
xor
mov
retf
jno
or
add
into
sub
push
neg
adc
jg
sub
int3
mov
cdq
fdiv
retf
mov
out
jl
pop
out
int3
mov
xchg
and
add
bound
sbb
ins
or
mov
cmps
stos
or
jmp
int3
pop
in
or
inc
sbb
xchg
fcom
adc
xchg
push
loopne
ja
fimul
ss
xor
sahf
and
lds
jo
sub
dec
nop
push
sub
mov
imul
imul
cmp
mov
ins
out
fnstcw
jmp
ret
and
xlat
adc
stos
ror
sbb
mov
jno
add
enter
lahf
push
sbb
fst
ins
int3
jmp
loop
mov
mov
adc
stc
neg
xor
xor
mov
in
(bad)
ja
mov
xor
adc
or
mov
sbb
ss
cmps
adc
into
stos
mov
adc
(bad)
imul
cs
mov
mov
adc
sti
dec
cmp
sub
aas
adc
pop
or
jnp
idiv
add
xor
mov
adc
push
cmp
mov
push
imul
adc
cdq
push
dec
mov
dec
fcom
xlat
adc
jne
mov
sbb
shr
push
mov
xor
sub
adc
add
sbb
xor
fucomp
xor
dec
inc
(bad)
lods
in
pop
(bad)
sub
push
repnz
mov
jmp
das
add
pop
jb
sub
cs
xor
(bad)
mov
dec
ret
dec
add
cmp
jmp
mov
add
mov
hlt
test
pop
jo
push
pushf
cwde
int3
lods
cmc
cld
out
sub
ins
inc
inc
icebp
aam
rcr
jmp
cld
mov
inc
mov
mov
sbb
sbb
mov
mov
sub
add
outs
test
jl
rcl
test
or
cmp
outs
mov
(bad)
sbb
not
enter
mov
test
(bad)
jp
mov
or
dec
cwde
in
int3
test
mov
je
xchg
cmp
and
and
sbb
cwde
mov
and
xor
in
push
sbb
push
cwde
add
fisub
cmp
sub
add
das
fisubr
xlat
or
mov
pop
sti
retf
cwde
add
and
popf
add
movs
sub
das
sbb
sbb
or
inc
(bad)
jmp
fcomp
inc
or
lahf
mov
fs
add
test
mov
jmp
stos
stc
jl
movs
lahf
das
add
push
cmp
inc
xor
mov
int3
clc
ins
out
ja
add
adc
push
pop
dec
(bad)
data16
jo
or
lea
test
pop
dec
(bad)
je
pop
int3
inc
mov
retf
aam
in
and
call
push
push
rol
pushf
mov
ins
dec
xor
pusha
retf
cmp
and
es
stos
std
enter
fsub
add
iret
inc
js
mov
mov
retf
dec
adc
push
dec
dec
pop
ins
icebp
mov
ret
test
shr
mov
xlat
aam
dec
add
sub
sbb
je
dec
repnz
dec
cmp
fdivr
mov
inc
ja
jnp
bound
jg
fbld
je
fimul
mov
mov
inc
pop
adc
sub
cli
call
xlat
retf
jl
mov
lods
das
fsub
push
pop
(bad)
scas
jno
jbe
das
jle
dec
xlat
lahf
mov
cmp
test
mov
lahf
cmp
sbb
add
in
jae
add
mov
push
mov
push
push
jnp
or
lea
in
or
and
sub
test
sub
leave
enter
retf
ins
loop
mov
aas
imul
lds
ret
and
jb
retf
xchg
mov
cmps
add
push
inc
sbb
adc
or
dec
and
dec
repz
pop
out
rol
adc
adc
xor
or
pop
pop
fucomip
xchg
sub
repnz
xor
cmps
pop
inc
int3
jp
jle
jnp
ds
and
inc
aad
mov
inc
loop
xchg
ficom
js
xchg
pop
sar
pcmpeqw
xor
sbb
(bad)
and
lock
mov
xor
(bad)
and
aam
mov
pop
lahf
cmp
movs
adc
dec
mov
retf
lock
xor
add
bsr
and
aas
ret
icebp
xchg
push
mov
dec
ja
test
mov
adc
aaa
ret
mov
ror
aas
je
adc
push
xchg
xor
test
ja
xor
jb
fild
mov
dec
xchg
call
add
sbb
jno
ins
clc
imul
inc
mov
cwde
and
lock
(bad)
add
mov
shl
dec
stos
adc
in
inc
push
push
jnp
push
ja
mov
xchg
(bad)
in
imul
jmp
popa
std
sti
jmp
inc
mov
inc
adc
add
mov
dec
adc
mov
push
call
push
cli
std
test
jno
adc
dec
push
sti
adc
mov
sbb
jp
repz
fldln2
pop
or
sbb
dec
icebp
popf
sbb
push
ret
out
int3
xchg
outs
sahf
stos
inc
nop
mov
adc
icebp
xor
adc
mov
data16
mov
jne
fcmovnb
enter
leave
adc
loope
xlat
lea
push
std
push
ins
push
add
sub
pop
rcl
(bad)
dec
add
sub
mov
pop
test
adc
sti
out
add
pop
or
scas
add
xchg
clc
or
mov
pusha
ret
mov
mov
pop
iret
pop
adc
mov
mov
and
stos
adc
mov
sbb
adc
xchg
pop
jns
jecxz
push
adc
or
mov
jae
sbb
out
(bad)
sbb
pop
or
jp
adc
dec
dec
(bad)
loope
inc
adc
mov
mov
mov
sub
push
nop
jo
add
or
pop
mov
aam
jnp
in
xor
xchg
test
or
adc
sub
push
pop
cmps
mov
gs
mov
arpl
mov
xor
pop
loopne
xchg
(bad)
adc
rcl
je
ds
adc
xlat
arpl
add
sub
fisttp
adc
jle
mov
ins
push
jns
in
test
std
adc
shl
xchg
mov
inc
hlt
nop
xchg
jmp
mov
push
jge
and
add
scas
pop
xor
cld
sbb
inc
push
movups
shl
ss
mov
or
or
inc
dec
pusha
pop
fiadd
adc
push
test
retf
push
xchg
add
mov
push
movs
(bad)
in
inc
jno
les
jo
push
test
fisubr
sbb
adc
jae
xchg
sub
cs
adc
int3
jbe
jp
inc
test
sub
jge
lock
adc
adc
xchg
adc
and
or
inc
sbb
imul
in
sub
cli
retf
je
mov
add
js
fcom
push
aam
push
or
adc
dec
cmp
inc
adc
jbe
stos
push
xor
mov
mov
retf
sub
dec
and
adc
test
das
std
repz
(bad)
xlat
or
mov
push
cmp
push
add
ficom
xchg
imul
ins
out
adc
dec
sub
movs
jecxz
lods
cmp
push
mov
hlt
add
xchg
sub
pop
(bad)
xor
add
inc
mov
ins
lahf
adc
jnp
pop
shl
repnz
movs
jge
adc
mov
push
ins
ds
xor
mov
pushf
pop
les
inc
call
dec
in
jno
ret
push
int3
hlt
(bad)
fisub
push
aam
sub
addr16
or
fldpi
aam
mov
mov
fistp
fnstsw
data16
mov
or
push
outs
add
das
sbb
cmps
push
push
out
scas
int3
bound
in
call
lock
mov
mov
js
pop
add
xchg
push
cmps
call
push
ret
and
lods
rcl
inc
or
leave
stos
add
jle
(bad)
cmp
std
(bad)
clc
fistp
inc
and
lods
inc
and
cmp
test
or
or
nop
jmp
push
jb
adc
adc
mov
mov
mov
and
jl
outs
cmp
push
jnp
adc
adc
or
cmp
push
push
cwde
pusha
cdq
imul
into
inc
stos
inc
cmp
pop
aam
mov
mov
fimul
les
or
mov
shl
mov
iret
sar
ins
ins
mov
dec
ds
jbe
xchg
push
repnz
push
or
cmc
xchg
punpcklbw
xchg
sbb
jbe
xrelease
pop
lea
icebp
pop
je
lock
in
imul
xor
sub
push
push
pop
sub
popf
pop
clc
pop
sub
cmps
cli
inc
lods
mov
pop
out
enter
xor
adc
jae
popf
sbb
mov
and
retf
stos
ds
adc
xor
xlat
outs
sbb
hlt
retf
popa
jle
push
sbb
repz
loop
pop
sbb
sbb
sbb
adc
ret
push
js
xchg
adc
and
cli
xor
inc
jle
mov
repz
adc
mov
xchg
sub
(bad)
pusha
popf
je
cwde
shr
mov
adc
push
and
push
sahf
stos
retf
pop
cld
push
ror
sub
out
sbb
sbb
leave
inc
jge
(bad)
out
adc
mov
sub
jg
adc
fstp
loop
int3
cmp
mov
or
jb
and
push
fidivr
lods
hlt
dec
or
adc
in
(bad)
iret
in
jp
mov
push
(bad)
mov
mov
aad
lods
stos
test
fsubr
xchg
xor
xchg
dec
sub
xor
pop
retf
les
clc
ret
xor
jae
out
retf
out
test
add
syscall
mov
mov
and
icebp
fs
push
int3
call
and
retf
int
xlat
test
xor
inc
sbb
mov
xchg
fistp
scas
and
into
int3
cmp
inc
scas
jmp
pop
popf
mov
int3
addr16
aam
js
cmps
mov
push
sbb
sbb
add
dec
sub
arpl
stc
mov
dec
mov
in
dec
push
and
(bad)
mov
sub
sbb
aad
popa
test
xchg
dec
jmp
mov
mov
jle
dec
add
(bad)
mov
inc
xchg
cmps
int3
lahf
jecxz
add
cmps
loopne
in
mov
adc
test
pop
xor
jb
and
fcomp
sub
adc
out
cwde
mov
dec
cdq
adc
stos
cmc
into
(bad)
lahf
cli
pop
sbb
lock
add
loop
jmp
loope
xchg
inc
jl
push
xlat
out
push
xchg
pop
adc
push
mov
cdq
jmp
ins
test
or
push
xor
jno
cmp
icebp
leave
loope
bound
push
mov
or
inc
mov
or
adc
inc
mov
add
daa
adc
leave
pop
and
jmp
and
out
xchg
lock
fidivr
adc
movs
inc
into
shl
adc
adc
outs
and
sub
sar
jae
fsub
push
mov
repnz
out
aas
jmp
sub
jecxz
(bad)
(bad)
mov
test
in
mov
add
mov
inc
adc
xchg
fbld
adc
jmp
pop
fldenv
jmp
xor
cmps
jp
(bad)
or
cld
inc
jmp
inc
push
dec
nop
out
xchg
cdq
out
mov
push
loope
or
std
or
sub
cmps
jp
mov
sub
rcr
retf
add
mov
aam
push
xor
out
movs
clc
inc
lods
dec
fwait
pusha
in
and
aas
sbb
and
in
fcom
in
repz
mov
sub
sbb
sub
inc
ror
fsubrp
and
push
sub
retf
sbb
xchg
rcl
mov
jge
xor
jecxz
pop
cmp
or
lahf
sbb
push
mov
dec
push
jmp
sbb
ss
lods
aas
ror
push
ins
and
sahf
jg
es
inc
sub
mov
xor
add
mov
ins
push
dec
or
or
or
or
cmp
bound
xchg
add
dec
jmp
jnp
cmp
jo
retf
cwde
sub
out
xchg
lods
adc
sub
aas
cld
test
loop
rcr
xchg
xchg
mov
sbb
aam
or
jmp
add
dec
fdivr
jns
fwait
int3
(bad)
push
jmp
repz
push
adc
std
leave
add
call
add
bound
(bad)
mov
cli
das
je
js
and
or
add
clc
mov
xchg
not
xlat
sbb
sbb
int3
sub
in
clc
fsubr
sbb
shl
(bad)
out
xchg
je
pop
sbb
jae
out
xor
pusha
push
cmps
push
push
lods
aam
stos
adc
fisub
adc
push
push
hlt
sbb
aam
arpl
sbb
and
fdivrp
call
mov
fst
cmc
pop
xchg
cmp
adc
ror
xabort
jo
shl
sbb
dec
fwait
aam
aaa
mov
add
ret
inc
cmp
lock
cmp
ret
call
push
xchg
push
xchg
pop
jmp
imul
sar
nop
hlt
jo
pop
add
(bad)
xor
shr
(bad)
ins
xchg
mov
xchg
aaa
push
add
or
retf
imul
adc
mov
cmc
fldenv
adc
and
fst
push
push
(bad)
fiadd
lods
icebp
test
jmp
mov
fimul
xchg
outs
adc
rcl
dec
sbb
or
(bad)
sti
leave
std
aam
lods
pop
xchg
data16
xor
jl
or
xchg
adc
adc
adc
les
daa
int3
pop
cwde
dec
adc
xor
sub
mov
stos
adc
in
mov
ficomp
pushf
add
inc
xchg
or
out
cmp
pop
movs
and
inc
in
ss
rcr
sbb
test
jl
shr
(bad)
leave
retf
mov
adc
or
das
dec
leave
adc
mov
cld
xchg
push
mov
sub
movs
pop
inc
xchg
(bad)
jb
push
inc
sbb
inc
fcmove
push
ror
test
retf
mov
xor
aam
push
addr16
(bad)
es
mov
xchg
mov
mov
mov
sbb
mov
hlt
repz
dec
nop
jne
mov
sahf
or
or
call
outs
dec
jle
imul
pushf
(bad)
rol
int3
pop
jp
mov
sbb
xchg
icebp
fucomip
std
imul
(bad)
fwait
lds
fucomip
bound
xor
adc
je
cdq
add
adc
xchg
mul
mov
outs
adc
pop
sbb
bound
cdq
add
retf
test
leave
adc
in
cwde
cmp
and
aad
jnp
and
test
dec
sbb
jecxz
push
stos
sbb
mov
push
sub
jmp
or
sbb
ret
xor
fs
pushf
fwait
mov
shl
push
lahf
push
mov
mov
xchg
pop
mov
sbb
cmp
adc
psrlq
inc
adc
lods
adc
fstp
aaa
add
push
aam
push
or
adc
int
(bad)
pop
je
mov
xlat
adc
sahf
loop
into
push
mov
aam
pop
cmp
xor
aad
jno
in
je
push
jmp
mov
sbb
cmps
out
fs
ror
jne
mov
or
sbb
xchg
je
daa
cli
xor
add
rcl
sub
outs
ret
sbb
iret
movs
lahf
adc
xor
and
enter
cmc
xchg
stc
pop
adc
imul
add
jmp
sbb
xchg
adc
and
mov
sbb
sub
dec
mov
adc
popf
dec
jp
loop
test
mov
jecxz
aad
out
xchg
test
dec
lds
cli
pop
and
shr
lea
mov
push
es
adc
rcr
mov
adc
xchg
jl
ss
and
outs
adc
aam
pop
out
fld
jnp
sub
xor
retf
fstp
icebp
mov
sbb
cmp
data16
and
add
mov
push
adc
mov
imul
cs
cmp
ja
add
xchg
add
push
test
sahf
in
mov
(bad)
rol
push
jg
mov
sbb
in
dec
icebp
into
jl
xor
cs
sbb
aam
imul
adc
iret
cmp
cmp
mul
adc
push
cmps
mov
adc
xchg
ret
or
and
cmp
push
mov
sbb
pushf
inc
call
sub
mov
mov
xor
pop
clc
jmp
add
and
jge
test
retf
outs
ret
(bad)
xchg
(bad)
imul
sbb
cmps
int3
outs
es
arpl
stos
bound
daa
and
cwde
int3
jle
scas
push
in
out
sbb
(bad)
sbb
(bad)
shl
mov
sub
sti
stos
aaa
jmp
in
mov
lods
lea
test
in
mov
xchg
retf
ds
cmp
and
inc
int3
aas
mov
lock
sub
movs
cmps
cmp
pushf
dec
adc
sar
retf
mov
imul
cmp
mov
adc
fdiv
fs
and
jecxz
xchg
xchg
jl
push
mov
inc
nop
mov
adc
dec
adc
dec
lea
mov
stos
cmps
push
mov
push
sub
pushf
cmp
adc
ret
dec
ins
push
nop
adc
jl
pop
cmp
push
icebp
rcr
add
xchg
mov
sar
aam
mov
(bad)
mov
cmp
jno
add
aad
lock
sub
enter
out
cmps
pop
out
cmps
push
or
(bad)
dec
sub
push
xor
bound
adc
lods
xor
sbb
add
rcr
cdq
sbb
mov
sti
mov
adc
bnd
inc
xchg
adc
loope
dec
dec
mov
sbb
pop
adc
xchg
imul
mov
adc
mov
sbb
mov
cmc
test
(bad)
adc
push
sbb
xor
add
inc
pop
dec
imul
fdivr
xchg
push
(bad)
outs
pop
cmps
cmp
and
xchg
pop
adc
out
inc
ins
xchg
mov
aaa
pop
sbb
aad
cmp
adc
outs
xor
jge
sbb
pop
and
enter
repnz
pop
adc
cmp
stos
sub
mov
cld
shr
mov
jmp
iret
and
add
dec
fmul
pop
push
dec
dec
inc
addr16
sub
je
or
(bad)
or
sbb
dec
xor
sub
mov
cld
out
mov
jp
sub
or
mov
retf
push
iret
lock
das
lock
inc
add
mov
jae
cmp
inc
test
(bad)
xchg
xor
loop
aad
(bad)
adc
retf
push
pop
sbb
mov
adc
(bad)
add
sbb
mov
loop
retf
pop
retf
mov
lods
jmp
xchg
jb
mov
pop
sub
cwde
sbb
movs
rol
aam
xchg
and
lahf
sub
add
dec
cmp
xchg
push
rcl
xchg
mov
push
push
maskmovq
and
fbld
or
cmps
js
clc
inc
movs
mov
call
pop
jns
sar
mov
imul
sbb
fisttp
clc
fwait
mov
ja
xlat
xor
push
mov
cmp
fidivr
fdiv
xchg
fnstenv
cs
mov
xchg
jns
test
sbb
dec
mov
push
mov
xor
adc
push
mov
shl
stc
jb
cdq
sub
cmp
and
sbb
mov
inc
jp
call
adc
mov
inc
xchg
repnz
dec
das
sbb
add
and
mov
fadd
mov
pusha
push
das
int3
mov
cmps
sbb
popf
pop
fimul
cmp
mov
shl
jl
xchg
je
xchg
add
lds
inc
test
(bad)
jl
pusha
pusha
enter
push
int3
mov
popf
mov
xchg
add
mov
int
icebp
pop
sbb
je
push
mov
xchg
xchg
sbb
add
inc
aam
dec
in
arpl
mov
sub
mov
dec
aas
sahf
push
addr16
test
fisubr
je
xor
push
cld
push
push
or
sbb
xor
mov
add
sbb
push
dec
or
ds
sub
repz
shl
lds
ss
outs
push
adc
add
adc
push
enter
mov
sub
jmp
in
push
das
daa
sbb
add
push
lea
out
xlat
adc
rcr
xchg
stc
jge
xor
inc
pop
out
pop
shl
xchg
(bad)
xchg
jmp
or
adc
dec
push
leave
add
addr16
push
lods
cmp
pop
dec
sub
movlps
out
and
add
dec
adc
push
popa
stc
pop
arpl
jno
sub
js
nop
jmp
mov
movs
and
pop
jnp
pop
inc
pop
sub
daa
add
mov
lahf
mov
push
retf
rcr
and
push
adc
shl
aaa
std
into
pop
mov
jl
(bad)
and
dec
ja
fs
add
mov
inc
inc
mov
dec
xor
addr16
jb
les
hlt
(bad)
adc
sub
pop
test
xor
cmp
adc
cdq
imul
add
or
out
imul
call
stc
sbb
mov
inc
ror
popf
das
out
mov
cmps
inc
data16
sub
jmp
test
inc
retf
mov
cmp
jne
or
or
mov
push
add
lods
movs
cmps
inc
push
scas
or
push
inc
sbb
lea
mov
retf
cmp
xor
ror
xchg
gs
xor
test
add
adc
jl
fwait
or
sbb
imul
jbe
inc
xchg
movs
adc
mov
mov
je
add
stos
adc
sbb
inc
jmp
xchg
test
in
adc
pop
adc
ret
cli
cmps
outs
jmp
adc
loope
cli
(bad)
mov
adc
mov
(bad)
mov
test
xor
cwde
les
outs
loope
scas
dec
test
cmp
ins
mov
in
mov
xchg
loope
sub
or
xor
jecxz
jno
sbb
iret
jmp
mov
push
(bad)
push
jmp
and
mov
sbb
add
and
das
pop
(bad)
out
pop
out
sbb
mov
xchg
ds
aaa
bound
mov
adc
and
fist
add
loopne
scas
cmps
ins
pop
mov
push
test
movs
fisubr
es
(bad)
pop
cmp
(bad)
sbb
ins
xchg
dec
xchg
in
loopne
outs
xchg
xor
retf
ss
xor
(bad)
adc
xchg
push
adc
leave
sti
xchg
push
sub
movs
ficom
sub
shl
lahf
mov
push
mov
mov
push
sub
inc
test
popf
lods
cdq
and
adc
dec
cmc
es
push
(bad)
sbb
xchg
push
mov
mov
iret
(bad)
sub
adc
cmc
je
or
pop
ror
add
retf
cmp
es
mov
(bad)
icebp
loope
push
pop
sbb
mov
xchg
out
sbb
test
cmp
inc
movs
std
pop
jbe
sbb
icebp
mov
and
neg
cmp
je
out
adc
push
sahf
scas
cmp
fcomp
adc
js
push
lahf
hlt
mov
outs
lods
(bad)
repz
test
mov
adc
lods
push
and
loope
cmp
jo
push
mov
sti
clc
aam
lods
jmp
or
add
push
sbb
pop
pop
outs
push
imul
adc
aaa
and
(bad)
out
inc
or
xchg
add
adc
xor
out
ror
ins
mov
in
xchg
stos
mov
add
cs
fild
int3
inc
outs
and
add
adc
lock
retf
cmp
cmps
icebp
jne
ja
test
cmps
xor
sbb
or
loopne
adc
into
ss
es
in
and
aaa
fcmovne
or
sbb
gs
sti
push
pusha
cmp
in
jo
sub
xchg
in
clc
dec
sbb
pop
jg
add
push
xchg
xor
xor
cmp
in
push
hlt
dec
adc
dec
inc
dec
cmp
xchg
xor
idiv
mov
pushf
cld
add
in
sbb
cmp
jno
xchg
lea
aad
sbb
nop
aam
ins
ret
and
test
stc
xchg
sub
xchg
cmps
adc
dec
in
xchg
enter
rol
inc
ds
nop
xor
cmp
loop
mov
or
and
sbb
ja
and
dec
add
dec
pushf
sub
int3
ins
add
push
mov
dec
adc
repz
mov
add
sbb
sub
sub
and
or
cwde
jl
lea
xchg
sub
or
nop
inc
ret
xchg
dec
inc
xor
(bad)
and
dec
test
and
enter
aam
or
dec
cwde
inc
sar
adc
xor
mov
cld
sbb
mov
pop
adc
cwde
sub
fwait
js
jo
mov
cmp
and
cmp
mov
cmp
sub
push
sub
mov
in
fist
add
js
test
jmp
mov
jmp
pop
add
add
jo
and
push
int3
in
je
mov
jl
jl
xor
js
dec
xchg
clc
xchg
inc
push
pop
mov
push
xor
cwde
xor
xor
nop
or
nop
test
xor
test
cmp
mov
add
pop
sub
inc
lods
sbb
mov
or
fs
adc
add
add
sub
int3
xchg
push
movs
xor
add
in
test
pop
fcom
in
pusha
lea
add
push
test
out
xor
pop
adc
rcl
xor
lock
cmc
int
mov
stos
mov
lds
shl
sbb
in
xchg
sbb
lods
std
mov
and
cld
jns
mov
movs
jno
rcl
retf
push
inc
dec
sbb
adc
adc
ror
mov
jecxz
or
cmps
xchg
push
adc
in
jnp
sar
fwait
adc
xchg
cmp
mov
push
adc
sub
je
adc
jbe
(bad)
aas
ins
shl
mov
ret
ds
inc
std
adc
fsub
adc
dec
hlt
idiv
fnstcw
inc
arpl
enter
mov
push
push
data16
je
sub
shr
enter
call
push
or
mov
inc
adc
loop
les
pop
addr16
and
inc
sub
adc
std
push
cli
adc
push
sti
inc
mov
popf
fwait
adc
and
sbb
jo
lock
fldenv
adc
ins
mov
inc
int
in
(bad)
sbb
mov
test
mov
push
aam
lahf
push
pop
xchg
es
gs
cs
mov
sets
cmc
cdq
push
xor
cli
or
cmp
push
test
inc
adc
fild
adc
in
jo
pop
das
push
push
xchg
push
push
rep
xchg
jb
fnstcw
jp
ret
hlt
adc
rcl
pop
mov
cmp
add
add
je
dec
and
adc
inc
test
dec
(bad)
cmp
xchg
jecxz
retf
sbb
(bad)
in
cdq
sub
pop
rol
popf
adc
adc
aad
ror
push
retf
lods
mov
sbb
call
mov
aam
jge
leave
call
dec
and
retf
popf
adc
sbb
cld
cmc
jl
ror
ins
jb
les
bound
pop
loop
jmp
les
sub
sar
shr
dec
adc
retf
add
and
hlt
(bad)
sar
add
sub
lods
inc
push
push
mov
loopne
xchg
not
sahf
dec
jne
jmp
mov
out
repnz
cmc
int3
inc
pop
fist
jne
push
js
or
fs
push
fadd
pop
enter
or
sbb
adc
pop
shr
adc
mov
xor
out
aam
daa
sbb
mov
push
imul
hlt
bound
ss
mov
mul
xchg
xor
jnp
arpl
loopne
adc
sub
jge
dec
pop
test
dec
cmp
aas
lahf
pop
pop
data16
pop
jge
loop
std
and
scas
add
push
addr16
and
cdq
aaa
stos
xchg
jns
mov
dec
xor
xor
sahf
mov
cmp
push
add
scas
addr16
es
xchg
xor
cmp
inc
pop
inc
push
int3
mov
aam
repnz
je
add
dec
xor
dec
jo
mov
mov
and
xchg
ja
or
(bad)
mul
sub
adc
jg
dec
inc
push
sub
adc
ror
ret
inc
addr16
sbb
fs
jecxz
jmp
dec
sbb
mov
arpl
rcl
cs
xchg
mov
sub
adc
rcr
pop
fwait
jno
(bad)
scas
in
popf
jae
or
cmp
adc
mov
adc
jle
fst
or
arpl
retf
mov
inc
adc
fcmovu
retf
inc
call
pop
xchg
nop
xchg
adc
mov
outs
xchg
in
mov
(bad)
in
and
jmp
mov
and
aaa
xor
xchg
loopne
jns
fst
sbb
int
movs
adc
ja
fmul
std
and
or
cmp
fiadd
pushf
test
xchg
icebp
adc
popf
fadd
push
sub
sbb
fucomp
mov
lock
adc
call
mov
adc
ret
leave
mov
ss
adc
int3
and
sbb
les
popf
rol
cmc
je
mov
ficom
mov
adc
in
call
neg
jge
inc
push
movs
sub
dec
add
sti
push
push
dec
sub
xlat
retf
mov
ret
ins
dec
sub
jl
addr16
shl
xlat
push
xchg
in
cld
ja
neg
push
ins
cmp
retf
adc
xchg
es
jge
rcl
mov
inc
(bad)
jle
and
pop
xchg
repnz
pop
in
bound
ret
sbb
mov
inc
or
ds
adc
jecxz
in
xlat
mov
aaa
inc
pop
in
gs
adc
ror
xor
push
std
add
xchg
sbb
jge
jne
cli
xchg
add
push
dec
and
in
mov
push
stc
test
mov
jl
pop
adc
xchg
fcomp
jmp
and
cli
ja
fadd
add
inc
jo
dec
popa
adc
mov
inc
adc
xchg
pop
sub
mov
stos
adc
pop
out
adc
xchg
dec
cli
cdq
adc
pop
test
sub
and
xlat
fwait
inc
xor
aam
pop
rol
int3
lods
stos
add
push
mov
or
fild
ret
xchg
aaa
mov
shr
retf
shl
adc
(bad)
sub
and
cmp
lods
add
je
and
dec
sub
xor
cmp
lahf
push
adc
push
(bad)
rcr
test
or
cmps
aam
cmp
movlps
dec
mul
int
push
adc
lods
addr16
pushf
xchg
fwait
jnp
xor
cmp
and
dec
xor
sub
gs
nop
add
adc
test
retf
jnp
add
sub
mov
(bad)
dec
pop
ret
pop
test
xchg
shl
mov
pop
scas
idiv
push
dec
push
out
mov
lock
fild
hlt
xchg
addr16
dec
add
je
adc
dec
add
std
cdq
aaa
dec
push
push
add
inc
in
sbb
retf
neg
jns
adc
dec
push
adc
sbb
cmps
call
fs
xor
mov
or
pop
and
sub
push
adc
mov
fcmovnb
ins
xor
jg
mov
cld
push
fsubr
retf
adc
das
popa
mov
add
adc
jle
mulps
adc
(bad)
sub
pop
mov
test
lock
push
pop
mov
or
xor
dec
bound
cmc
jle
lds
xchg
sti
mov
adc
pop
in
rol
stc
mov
in
in
add
cli
adc
mov
(bad)
cld
add
adc
movs
int3
adc
inc
pop
mov
and
xchg
and
pop
dec
arpl
std
sub
xor
daa
dec
cld
xchg
add
cwde
aad
cmps
and
adc
pop
clc
mov
dec
dec
aam
inc
dec
scas
inc
jp
jns
sar
xchg
ror
adc
xor
pop
adc
aam
call
adc
loope
bound
(bad)
cmp
in
sbb
add
xor
jnp
test
bnd
icebp
ins
xchg
adc
jmp
adc
push
outs
out
adc
sbb
mov
sbb
(bad)
push
mov
add
fcomp
mov
mov
push
push
loop
inc
xor
in
xchg
loope
cmc
adc
xchg
mov
push
fisub
mov
and
xchg
pop
add
fwait
adc
dec
bound
push
(bad)
cmc
or
xchg
movs
out
or
xlat
lods
lahf
outs
call
jl
mov
cmps
jno
mov
xchg
mov
lds
or
stos
jecxz
sbb
adc
loop
ins
cmp
add
add
sub
and
stos
push
(bad)
out
pop
jns
pop
ins
mov
cmc
adc
jbe
xchg
pop
xor
rcl
pusha
dec
or
cmp
inc
adc
xchg
and
jp
sub
adc
call
stc
add
add
dec
push
pxor
nop
mov
inc
in
sbb
xchg
xor
xor
js
int3
dec
xchg
ss
out
xor
je
pop
repz
fmul
adc
and
fstp
push
mov
pop
add
in
das
jp
jl
fs
xchg
sbb
push
cmp
dec
fmul
imul
sub
pop
dec
adc
xchg
fcom
mov
adc
aas
jle
cmp
in
int3
adc
mov
ins
pop
sbb
loope
mov
mov
daa
es
fcmovb
in
lods
fsub
int
cmp
mov
dec
add
fild
retf
cli
jns
push
lock
cmps
not
xchg
das
or
mov
cwde
iret
call
add
fist
les
ret
or
lods
pmaxub
add
sbb
imul
mov
jmp
enter
pop
je
pop
pop
mov
or
jo
rcl
(bad)
pop
or
lods
or
sbb
fs
adc
mov
adc
in
mov
mov
int3
adc
mov
in
in
mov
xor
jae
adc
adc
arpl
sbb
scas
mov
in
adc
jle
mov
sbb
adc
scas
test
adc
shr
xor
jmp
adc
xor
popa
ret
inc
inc
inc
xchg
add
nop
xor
mov
jmp
xor
outs
jo
ins
and
xor
xor
test
and
stc
neg
fs
xchg
fsubr
sbb
stc
jb
das
adc
das
(bad)
loop
movs
adc
lods
iret
js
hlt
in
in
xchg
data16
rcl
jnp
and
pop
aad
adc
jmp
ret
and
or
test
movs
inc
adc
jge
cmp
sub
aaa
bound
inc
arpl
xor
js
pop
cdq
mov
fst
mov
ds
adc
adc
pop
movs
ins
adc
mov
call
fist
jl
xor
aam
add
xor
(bad)
ins
lds
adc
or
aas
outs
add
leave
push
jmp
inc
adc
in
jno
jnp
pushf
adc
shl
cmp
nop
dec
and
aas
pop
lods
pop
and
xchg
call
cli
or
push
push
or
mov
inc
clc
lock
repz
cmp
cs
in
sbb
jb
lds
add
push
pop
pop
loope
hlt
loop
repnz
rcr
inc
adc
test
dec
cmp
ss
mov
sbb
adc
dec
enter
mov
jno
fld
and
mov
xchg
mov
sub
jp
pop
sbb
aam
mov
jmp
push
cmp
xor
cmp
inc
xchg
jb
adc
idiv
sub
xchg
inc
mov
dec
mov
mov
sbb
inc
dec
inc
adc
mov
mov
pushf
inc
jmp
pop
js
sub
cmp
repz
fsub
jmp
xchg
ins
mov
fwait
dec
adc
fucom
fsubr
ins
adc
les
test
cmc
(bad)
adc
in
or
and
push
push
xchg
push
push
rcr
push
push
jns
add
retf
jne
adc
and
or
arpl
adc
mov
jmp
fiadd
sti
(bad)
mov
mov
dec
imul
gs
pop
push
push
aaa
mov
push
pop
jnp
xchg
out
out
sbb
jg
push
in
mov
sub
fld
and
jp
xchg
push
push
les
xor
(bad)
(bad)
popa
lods
adc
repz
stos
je
xchg
dec
repnz
test
aam
cli
mov
adc
(bad)
daa
in
fs
xor
fist
rcl
out
mov
imul
jno
out
into
test
out
int
(bad)
ja
jne
adc
sub
(bad)
in
mov
arpl
clc
or
lahf
add
xchg
retf
inc
or
add
inc
lahf
push
dec
sub
sub
pop
add
cmps
shr
int3
rol
movhps
pop
push
imul
push
fdivr
pop
xor
or
int3
cmps
mov
xor
push
(bad)
movs
inc
adc
movs
sahf
jnp
in
aad
xchg
adc
push
es
push
sub
fild
pop
inc
adc
in
sub
std
fadd
in
dec
inc
sar
icebp
test
call
mov
inc
jmp
in
pop
mov
or
adc
xor
ficom
fcom
mov
leave
mov
sub
inc
add
inc
aas
or
push
inc
adc
(bad)
mov
adc
cmc
je
add
lods
shr
fsubr
ja
sahf
adc
test
sub
adc
popf
mov
(bad)
push
int
popa
pop
adc
fcmovne
movs
sbb
sbb
(bad)
in
ins
(bad)
ja
(bad)
ins
adc
push
rol
shld
sbb
ins
mov
adc
cdq
cmp
lods
dec
sbb
cli
ja
sbb
adc
outs
or
or
xchg
fsub
xchg
jmp
adc
imul
loopne
mov
aad
xchg
mov
xchg
adc
sub
mov
mov
dec
cli
repz
mov
sbb
adc
retf
jmp
(bad)
adc
dec
fnstcw
adc
pushf
add
xchg
in
push
cs
icebp
sbb
mov
xchg
data16
int
in
push
in
or
adc
fs
sti
fild
call
push
cmp
adc
sbb
fild
pushf
bound
andps
imul
fimul
pop
or
add
in
adc
aam
dec
jne
bound
adc
inc
sbb
fcom
mov
test
push
scas
adc
les
ja
mov
loope
sub
mov
inc
adc
cmp
(bad)
outs
xor
bound
inc
mov
pop
adc
lahf
enter
sub
ss
repnz
adc
mov
out
in
ja
lahf
xor
in
shl
in
xchg
or
jbe
xor
and
call
rcl
or
push
xchg
mov
mov
in
(bad)
cmps
mov
add
inc
or
sbb
loopne
jle
pop
add
inc
movlps
xchg
jle
xchg
cmp
push
ds
mov
ins
shl
sub
int3
mov
adc
dec
dec
idiv
cmp
and
cmps
jmp
ss
push
push
mov
sub
aam
adc
scas
outs
das
sbb
mov
sub
mov
bound
or
mov
and
popf
sbb
(bad)
xor
dec
and
repz
shl
imul
mov
push
xchg
jnp
retf
je
adc
adc
inc
inc
inc
cmp
xor
(bad)
js
push
inc
popa
retf
data16
mov
inc
push
lds
adc
(bad)
cmp
or
sbb
in
imul
loop
add
jns
push
push
cld
mov
iret
xchg
adc
pause
adc
loop
mov
outs
cmp
in
xchg
repnz
pop
hlt
pop
shl
dec
adc
mov
xlat
test
popa
adc
add
xor
pop
pop
repz
addr16
cmp
mov
adc
jmp
pop
imul
pop
aad
adc
or
mov
sbb
cld
shl
hlt
mov
pushf
popf
(bad)
and
dec
scas
or
mov
adc
scas
mov
adc
ja
push
or
or
(bad)
mov
loop
outs
inc
fisub
add
sti
test
mov
cmp
push
push
xor
icebp
je
into
pop
ret
or
fdivr
xor
cwde
adc
nop
aad
add
mov
push
call
aas
aam
xchg
pop
adc
mov
enter
jle
adc
mov
add
mov
push
mov
ror
out
pop
cli
jb
mov
pop
int3
mov
fwait
jecxz
ficomp
add
xchg
push
add
mov
xchg
dec
aad
aad
retf
xor
out
retf
rol
jns
sbb
loop
imul
add
je
mov
fdiv
mov
push
loopne
je
dec
cmp
sbb
movs
retf
dec
dec
pop
cli
ss
(bad)
je
fmul
sbb
ja
add
loop
xchg
cmp
jmp
data16
movs
jl
cdq
push
pusha
stos
jmp
adc
add
mov
mov
iret
dec
cmc
mov
sbb
ds
lods
adc
sub
mov
cmps
arpl
inc
sbb
arpl
pop
push
sbb
stos
mov
scas
and
pusha
mov
stos
push
mov
dec
jle
arpl
xor
retf
inc
inc
out
jmp
adc
stc
imul
dec
leave
loopne
je
cmp
retf
sub
and
cmps
call
cmps
pop
sub
(bad)
xor
cmps
rcl
int3
inc
sbb
cmps
outs
cmp
sbb
cmps
lds
and
ret
(bad)
jg
fiadd
icebp
cmc
and
sbb
sahf
or
int3
cmps
test
xor
fdiv
mov
ss
cdq
adc
inc
(bad)
mov
in
imul
imul
repnz
xchg
fdiv
jecxz
sub
jae
jb
pop
or
ret
or
retf
fwait
jo
xchg
stos
iret
sbb
mov
and
mov
lods
mov
loopne
jae
mov
in
and
pop
sbb
pop
xchg
stos
mov
mov
mov
shl
ret
hlt
mov
mov
mov
pop
add
adc
dec
dec
mov
aaa
dec
shr
dec
popf
movs
(bad)
mov
ins
dec
in
mov
pop
int3
jae
jae
imul
adc
ins
push
or
cmc
retw
pop
jnp
nop
adc
dec
adc
sub
not
mov
mov
dec
les
or
daa
push
(bad)
(bad)
rcl
dec
or
jne
jg
dec
sbb
dec
aad
stc
push
aas
jmp
retf
dec
inc
std
mov
sub
cmp
jle
imul
enter
cmp
in
adc
mov
inc
mov
mov
int3
dec
sub
xor
movs
aam
push
clc
jg
and
mov
(bad)
aad
jmp
cmps
movs
aad
inc
mov
retf
and
nop
adc
idiv
into
rep
pushw
ja
(bad)
ins
push
int3
or
js
and
mov
xchg
aas
mov
xor
inc
jae
les
data16
ins
hlt
in
fild
popf
jne
pop
push
jg
xchg
xchg
retf
fnstsw
movs
push
push
mov
push
retf
mov
std
adc
inc
adc
mov
out
adc
xchg
dec
sbb
je
dec
or
add
mov
into
lods
mov
fidivr
int3
push
mov
retf
loopne
or
cmp
lahf
aas
cmp
dec
fst
push
adc
adc
in
imul
cmp
shl
pop
mov
mov
mov
dec
cli
inc
push
dec
mov
ds
add
mov
loope
lods
inc
mov
mov
js
mov
jo
add
fidiv
js
hlt
das
addr16
dec
mov
pop
pop
int3
or
push
mov
jle
inc
in
pop
cwde
dec
mov
or
lea
add
mul
int3
test
fs
inc
retf
xchg
fwait
popf
jae
cmps
fcmovu
mov
inc
xor
push
sub
mov
ror
pop
sub
fwait
xor
les
fcom
jecxz
add
sbb
mov
lahf
stos
and
add
sub
dec
es
(bad)
mov
dec
push
adc
lods
bound
jbe
cld
das
xchg
or
aad
jl
dec
in
cmps
push
test
popa
sbb
dec
jo
out
idiv
mov
push
xor
pop
ins
icebp
jle
call
cld
(bad)
xchg
sub
ins
sub
in
adc
mov
mov
xchg
inc
aam
fs
or
adc
adc
or
(bad)
imul
test
sbb
cld
and
xchg
jmp
sti
jmp
add
sahf
cmps
adc
or
in
dec
idiv
mov
mov
mov
movd
jne
jg
fdiv
fs
sub
loop
inc
adc
mov
xchg
inc
mov
dec
in
(bad)
adc
jp
xchg
scas
inc
push
mov
cmp
scas
retf
scas
fiadd
(bad)
xchg
std
in
gs
xor
and
xor
in
jecxz
dec
dec
je
xchg
cmp
adc
aaa
add
cld
jl
fsubr
jle
jmp
popf
cmps
mov
fmul
adc
sub
adc
inc
add
das
xchg
xchg
in
das
call
jmp
jae
(bad)
xor
dec
inc
xor
mov
xchg
(bad)
mov
push
out
dec
inc
xchg
mov
stos
xlat
jb
retf
jne
je
sahf
or
mov
cmps
pop
sub
cmp
push
je
mov
xor
sub
int3
or
repnz
xor
cmp
sbb
vunpckhpd
(bad)
push
adc
lds
fadd
xchg
sbb
call
mov
pusha
call
mov
cmc
jb
mov
add
xor
sub
inc
int3
fs
test
pop
mov
or
or
clc
sti
hlt
sbb
ror
std
fldenv
movs
fnstsw
sbb
sahf
aam
add
(bad)
lods
fist
sub
loopne
ret
dec
fiadd
dec
xchg
ins
cmp
lahf
push
retf
clc
sbb
mov
ins
inc
enter
inc
and
and
jns
or
call
loopne
sbb
jmp
mov
adc
in
shr
xor
inc
movs
push
icebp
jmp
pop
enter
(bad)
mov
jne
cs
jnp
(bad)
icebp
pop
iret
push
sbb
xor
aam
mov
addr16
lea
(bad)
push
adc
sbb
push
dec
lock
dec
add
cmp
outs
inc
xor
pop
push
mov
sbb
dec
aaa
dec
sub
icebp
sub
dec
mov
mov
cmp
(bad)
retf
retf
jb
mov
xchg
addr16
mov
sbb
(bad)
sbb
cli
lahf
arpl
je
xchg
add
cld
cwde
inc
xor
and
loopne
xchg
fmul
icebp
lahf
js
xlat
pop
jle
aas
test
scas
imul
pop
call
mov
sbb
sub
inc
shr
(bad)
push
das
out
(bad)
leave
in
add
sti
les
(bad)
out
adc
(bad)
hlt
push
je
pushf
and
add
pop
aad
pop
cli
shl
xor
setl
push
xor
adc
xor
xchg
call
rcl
pop
aad
inc
ret
push
mov
adc
cmp
pusha
inc
mov
jecxz
jmp
outs
in
or
movs
jae
cmp
xor
sub
loopne
sbb
cli
add
dec
fiadd
int3
adc
mov
jo
je
test
int3
(bad)
push
je
pop
mov
mov
es
int3
push
xlat
adc
xor
cli
mov
inc
out
jg
pop
jle
jae
xchg
push
or
(bad)
mov
adc
fidivr
movs
push
inc
and
sub
or
ret
pusha
jmp
cmp
arpl
mov
adc
jne
sar
and
xchg
mov
adc
inc
xor
sub
rcr
mov
std
scas
pop
bound
or
movs
adc
call
dec
(bad)
pop
push
loopne
mov
pop
add
aas
mov
dec
mov
ror
lahf
mov
call
lds
adc
aam
push
fidivr
adc
dec
stos
dec
xchg
xchg
inc
mov
imul
xor
jle
and
mov
and
mov
(bad)
(bad)
and
iret
bound
call
pop
outs
data16
mov
pop
inc
adc
into
cmps
push
loop
in
adc
pop
cld
hlt
jl
jns
cmp
mov
adc
or
rcl
jo
in
cbw
aas
adc
mov
pop
xor
popf
test
cdq
leave
rol
push
(bad)
imul
retf
cmp
int
rcr
into
xchg
sti
dec
iret
fdivr
aaa
addr16
popa
test
cmps
lods
dec
inc
bound
adc
cdq
and
addr16
neg
(bad)
dec
int3
jbe
inc
xor
add
or
retf
sub
push
sub
inc
adc
inc
sbb
in
cdq
aam
adc
pop
data16
not
(bad)
data16
sbb
mov
cmps
pop
call
mov
mov
lock
push
inc
out
pop
jne
in
sbb
add
inc
and
sub
pop
jne
pop
and
sub
imul
jne
xchg
push
cwde
mov
and
inc
test
stos
push
les
imul
dec
out
imul
into
inc
loope
jne
sbb
cs
mov
mov
sahf
and
clc
sub
xchg
xchg
outs
mov
or
inc
pop
ret
mov
pop
pop
not
jmp
or
sbb
clc
inc
xchg
sbb
and
xchg
es
add
cmp
fistp
dec
pop
mov
stos
gs
adc
outs
jo
push
sbb
out
enter
and
aad
shl
xchg
les
es
mov
push
out
and
imul
test
adc
(bad)
cmp
dec
sar
pop
lahf
mov
jp
push
push
cdq
pop
xchg
xchg
adc
jl
pop
aad
push
test
nop
es
add
adc
inc
sbb
and
shr
adc
inc
mov
call
sar
pusha
or
sbb
imul
xchg
and
pop
push
cmp
leave
pop
lock
(bad)
rcr
sti
fstp
adc
dec
mov
jnp
inc
push
test
adc
cmp
out
in
sub
adc
mov
shl
into
fisub
adc
xor
jge
or
dec
pushf
cmp
je
fwait
xchg
jp
and
in
rol
call
mov
aaa
lods
push
xchg
inc
push
mov
xor
aam
sti
call
pop
lahf
adc
or
aad
jae
outs
in
aam
(bad)
mov
das
xor
pusha
ins
daa
shl
mov
aam
or
push
in
scas
cld
inc
add
mov
cs
dec
cmp
xchg
loope
ds
movs
ficomp
jle
ins
cwde
sti
or
inc
add
add
push
sbb
scas
adc
movs
clc
popa
push
add
lods
movs
mov
clc
sub
jnp
mov
cmp
xchg
lods
adc
call
jg
cmp
mov
mov
mov
add
lahf
test
sbb
push
mov
(bad)
int3
push
xchg
cmps
pop
adc
mov
inc
push
ins
sbb
retf
lds
mov
dec
pop
mov
adc
add
inc
call
or
sbb
arpl
dec
push
adc
mov
imul
int3
add
push
rcl
pop
in
cmp
adc
(bad)
lods
sbb
inc
mov
adc
(bad)
das
mov
xor
ins
jmp
mov
ret
(bad)
fild
aaa
(bad)
dec
and
rcr
xchg
adc
add
mov
pushf
(bad)
je
add
adc
sub
out
ret
int3
cld
push
xchg
adc
pop
fist
fwait
push
xor
movs
pushf
jg
pop
add
xchg
ins
xchg
ret
mov
xchg
sbb
mov
dec
aam
arpl
add
or
xchg
inc
push
fcmovb
jne
push
pop
inc
sbb
ret
aam
mov
aad
cmc
dec
and
adc
sti
sub
jmp
(bad)
xchg
pop
push
out
scas
mov
test
push
pop
or
into
mov
adc
add
xchg
pop
adc
ins
dec
pop
ret
mov
push
or
test
jmp
and
aam
mov
sub
js
dec
cmp
xchg
call
pop
adc
retf
(bad)
ins
pop
dec
adc
jmp
xchg
xor
mov
stc
sbb
clc
ins
(bad)
call
mov
and
bnd
loopne
lods
scas
dec
les
aad
pop
das
add
and
(bad)
jmp
xchg
xchg
(bad)
cmp
movs
xchg
call
ja
inc
cmc
jle
pushf
movs
ror
and
cld
fwait
adc
push
jb
repnz
push
add
push
sbb
out
add
inc
loopne
mov
sbb
adc
ins
inc
data16
push
mov
sbb
pop
int3
lods
dec
xor
in
jmp
fistp
fstp
out
test
cs
adc
loopne
mov
mov
cmps
out
pop
push
sbb
mov
(bad)
retf
add
mov
int3
cmp
lods
adc
add
std
je
xchg
aam
mov
and
movs
and
sub
xchg
loope
sub
inc
movs
xchg
adc
ins
xor
push
fs
movs
out
popf
push
hlt
push
pop
adc
pop
retf
or
add
fcomp
sbb
movs
adc
cmp
mov
xor
repz
jbe
aam
pusha
mov
adc
adc
sar
xchg
sub
or
inc
adc
(bad)
jno
sub
mov
in
test
clc
aas
cli
cld
mov
loop
movs
ja
adc
and
push
cmc
aaa
rcr
inc
mov
mov
xor
mul
mul
sbb
sbb
icebp
pushf
ret
scas
pop
int3
bnd
inc
xor
xchg
mov
and
ins
inc
mov
in
ror
sub
adc
ja
jecxz
cld
inc
test
rcr
inc
push
scas
and
xchg
mov
out
push
cld
aaa
inc
sub
mov
enter
pop
test
sbb
xlat
mov
retf
add
push
shl
loopne
push
cmp
sub
cmps
inc
sub
pop
(bad)
in
loopne
(bad)
xor
gs
jmp
or
movs
mov
or
mov
imul
in
pop
hlt
dec
adc
pop
data16
xchg
adc
or
push
out
aas
and
jmp
mov
(bad)
lahf
rol
out
add
xchg
push
scas
mov
mov
adc
push
das
imul
(bad)
ins
cmps
sub
dec
mov
out
imul
repz
movs
pop
les
cmp
xchg
adc
inc
imul
mov
and
adc
clc
or
pop
cwde
add
inc
pop
std
or
(bad)
call
clc
sbb
pusha
adc
adc
pop
mov
push
push
aam
cdq
xor
cmps
cmps
and
xchg
sbb
call
sti
xchg
pop
fisub
pop
sbb
add
cmp
hlt
adc
lahf
pop
sahf
mov
push
cmp
mov
inc
mov
dec
(bad)
cs
cmp
out
xchg
ja
in
enter
adc
(bad)
mov
inc
sbb
adc
call
jo
loopne
and
rol
add
or
xor
cli
adc
out
push
adc
push
xchg
jae
sub
mov
sub
xor
adc
scas
fidivr
push
push
pop
sbb
iret
mov
scas
mov
(bad)
movs
lods
adc
xchg
pushf
(bad)
xchg
cmp
adc
mov
cli
rcl
xchg
xlat
ret
add
inc
adc
repnz
lods
jno
movs
or
(bad)
pop
adc
into
mov
add
mov
sbb
xor
jle
mov
gs
xchg
jge
test
push
sub
rcr
sbb
xor
loope
in
inc
and
adc
sbb
int3
push
push
mov
adc
ins
adc
sbb
pusha
or
dec
pop
or
test
call
aam
or
cmps
push
jmp
mov
sub
dec
mov
and
test
jmp
int3
or
jl
daa
dec
imul
das
loopne
inc
push
and
adc
retf
or
add
enter
xor
mov
push
push
xchg
and
cmp
es
inc
movs
mov
fs
xor
dec
pop
ins
js
loopne
cdq
(bad)
adc
cdq
int3
out
aad
je
loope
jmp
xchg
or
loopne
loop
test
je
lods
int3
mov
xchg
shl
dec
(bad)
pushf
sub
pop
sar
je
xchg
sub
je
sti
jne
rcl
aad
rcl
xor
imul
mov
(bad)
scas
or
dec
pop
cmp
sbb
retf
and
mov
mov
add
push
cmp
int3
das
push
ror
push
or
inc
jae
in
fwait
sar
mov
dec
pop
xchg
rcr
adc
ror
pop
lahf
arpl
int3
xlat
int
add
pusha
push
xchg
ds
cmc
in
pop
sbb
xor
sti
adc
in
jl
es
mov
dec
xor
(bad)
inc
in
add
bound
sbb
adc
outs
and
cmp
push
aad
mov
jmp
clc
and
adc
pop
loope
rcr
adc
arpl
aaa
pop
push
popa
cdq
pushf
inc
adc
sar
int3
or
adc
lock
mov
out
aaa
mov
ss
push
scas
or
mov
or
inc
dec
fmul
push
push
in
inc
call
jo
sub
push
mov
nop
pop
mov
push
cmps
push
adc
rcl
scas
pushf
lds
mov
cmps
cs
(bad)
adc
sbb
ja
fist
xchg
xchg
mov
pop
fadd
in
pop
into
pop
pop
aam
das
enter
mov
js
push
pop
mov
sub
stc
cmp
push
je
ds
loop
cmovb
ins
mov
jne
sub
xor
shr
adc
cli
fidivr
repnz
sub
in
xchg
sub
or
int
jge
pop
test
std
adc
sub
mov
and
inc
xchg
adc
xchg
sbb
dec
adc
add
xchg
sbb
cmp
cmp
adc
or
sub
cmp
push
cmps
mov
loop
adc
je
ins
imul
fs
pop
mov
cs
dec
(bad)
jg
jp
loopne
cmp
adc
xor
dec
shl
mov
pop
in
adc
fcom
jnp
jns
das
cmp
pop
jl
mov
data16
jbe
ds
ds
push
adc
lods
push
bound
je
iret
mov
ds
fs
(bad)
mov
adc
sahf
out
call
push
out
dec
adc
and
stos
dec
aaa
push
jo
cmps
xor
(bad)
xor
push
sub
and
cwde
retf
int3
call
add
out
jae
inc
and
xchg
sub
jmp
rcl
gs
sub
and
mov
push
add
sbb
adc
dec
pop
sub
mov
push
sub
xchg
and
xchg
mov
xchg
pop
test
out
pusha
inc
pusha
sbb
push
sub
fcmovnb
ss
lahf
inc
lahf
js
xor
int3
xchg
sub
mov
cmc
sbb
dec
pop
push
jnp
xchg
stos
loop
push
xchg
fadd
sbb
xchg
scas
jl
lock
inc
loopne
and
push
jb
push
mov
fwait
and
jmp
dec
xchg
test
cdq
loop
mov
pop
dec
jmp
sbb
xor
imul
mov
sub
shl
test
scas
pop
test
xchg
jmp
popa
and
(bad)
fnsave
and
retf
xchg
pop
test
imul
aad
mov
out
(bad)
cld
mov
daa
inc
(bad)
iret
icebp
cwde
out
adc
ret
and
loopne
fwait
add
in
lods
add
retf
pop
xchg
arpl
pop
sbb
jl
psrlq
pop
jmp
xor
xlat
imul
cmp
data16
retf
pop
cmp
jae
aas
and
adc
icebp
inc
je
xchg
sbb
jecxz
retf
daa
out
shr
lea
jne
das
push
add
jo
movs
sbb
inc
or
mov
je
xchg
sbb
ins
dec
push
fbstp
pop
sbb
xchg
jns
sub
inc
add
test
add
movs
and
jne
out
push
mov
and
cmps
inc
ret
outs
ss
pop
add
arpl
(bad)
in
fwait
add
sbb
cdq
jmp
cmc
inc
rol
sbb
push
cmp
call
ja
push
pop
int3
cld
fistp
dec
loopne
push
nop
or
shl
movs
push
sub
iret
xor
add
inc
ss
add
pop
or
mov
(bad)
and
scas
xor
(bad)
jns
adc
mov
sub
loope
js
call
rcr
clc
sub
xchg
mov
mov
lods
jne
push
cdq
mov
outs
pop
int3
jge
adc
fs
mov
add
es
add
pop
cmp
mov
sahf
add
sar
and
sub
mov
sub
ja
xor
movups
cli
jecxz
jmp
inc
or
mov
movs
mov
mov
push
push
test
mov
xchg
mov
xchg
scas
or
push
scas
aad
sub
je
cmps
push
fwait
daa
xchg
or
mov
sub
or
mov
retf
mov
adc
xchg
es
pop
(bad)
test
pop
aam
cld
and
sub
inc
retf
dec
retf
adc
mov
ss
jle
(bad)
adc
fadd
or
add
aad
sahf
ret
push
jne
xor
add
sbb
push
adc
xor
test
sbb
ja
(bad)
jl
adc
xchg
sub
jl
adc
cld
into
fidiv
xor
sar
(bad)
repnz
cmp
stos
pop
inc
inc
jne
dec
test
sahf
ins
cmp
xchg
(bad)
fs
add
adc
ins
lahf
jmp
cmp
mov
mov
adc
mov
cmps
jmp
inc
out
loop
cmp
(bad)
aas
push
inc
jmp
add
arpl
mov
and
out
mov
push
inc
adc
mov
repz
cmp
sbb
adc
dec
or
mov
scas
mov
es
push
pop
ret
pop
shl
je
cmc
lahf
pop
cli
adc
mov
xor
in
xchg
dec
mov
sbb
sub
inc
xor
or
ret
neg
and
sub
sbb
sub
cmps
xchg
aam
add
sbb
retf
dec
xor
sti
repnz
push
leave
out
popf
push
imul
pop
xchg
neg
add
in
cli
das
retf
sub
cmp
(bad)
jbe
ja
xchg
addr16
xlat
ins
mov
add
int3
or
and
mov
stos
xor
test
jp
push
fisttp
mov
mov
pop
adc
pop
test
lea
sbb
(bad)
cwde
jno
(bad)
sbb
cmps
mov
inc
lock
adc
push
cmps
cmp
xchg
sbb
jno
adc
int3
adc
xchg
jo
push
sahf
retf
in
jns
mov
movs
fiadd
adc
call
data16
sub
jne
clc
adc
in
adc
mov
mov
push
scas
push
dec
cmc
xor
test
out
lock
sub
mov
loop
scas
nop
or
adc
faddp
bound
int3
push
mov
mov
jmp
out
cld
sub
(bad)
sub
inc
dec
and
xchg
icebp
lahf
push
pop
sbb
mov
add
dec
leavew
sbb
inc
sub
push
je
dec
outs
push
imul
pushw
sub
push
cmp
add
fs
pop
inc
jecxz
and
mov
mov
pop
sbb
jne
pusha
sub
jmp
push
hlt
call
repz
test
cwde
xchg
cld
sub
push
adc
or
iret
push
sbb
in
xor
cmp
sub
inc
cmps
sbb
jno
ss
xchg
xor
adc
mov
mov
pop
mov
fimul
mov
jl
pop
popf
cwde
jmp
out
je
rcr
dec
mov
pop
sub
xchg
cli
daa
ins
dec
dec
pop
push
mov
(bad)
sbb
pop
sar
stos
push
adc
repnz
scas
in
outs
jle
xchg
xchg
mov
leave
out
fs
push
cmp
mov
sbb
jno
js
mov
scas
push
movs
mov
stos
jbe
xchg
push
inc
(bad)
imul
inc
mov
int3
sbb
out
inc
mov
ja
jecxz
call
inc
jecxz
movs
mov
ins
fdiv
scas
out
in
push
push
xchg
push
std
gs
cmp
and
or
ss
js
aad
cli
cmp
push
movs
fsubr
repz
xchg
sar
and
and
movs
je
adc
and
int3
mov
in
dec
test
retf
or
mov
sbb
call
mov
retf
call
mov
pop
fs
adc
mov
add
int
pop
out
cmp
fisttp
cmp
iret
rcr
xchg
adc
test
out
shl
test
mov
dec
cmp
call
inc
(bad)
or
je
ins
and
inc
push
test
int3
push
jbe
das
jmp
lods
sti
mov
cli
mov
or
sbb
cdq
mov
je
xchg
clc
adc
jmp
(bad)
adc
call
push
mov
es
mov
data16
sbb
test
push
js
mov
xchg
sub
push
mov
cmp
hlt
in
jns
add
mov
cmp
test
adc
int
dec
dec
mov
call
mov
adc
pop
ficomp
cli
ds
lods
jnp
push
mul
dec
adc
cld
push
mov
adc
cmps
push
mov
and
sbb
aam
pop
movs
jl
sub
add
fbld
call
adc
nop
sub
xor
adc
dec
outs
mov
push
adc
repnz
aaa
ret
mov
adc
mov
mov
aad
jge
cmps
xor
inc
adc
or
jnp
in
xchg
adc
in
aas
mov
pop
push
mov
mov
stos
aas
outs
push
movs
fs
pop
xor
dec
sti
mov
iret
or
lods
ins
gs
out
add
xor
push
adc
push
jmp
push
inc
aas
xchg
mov
adc
push
js
fwait
std
aam
cld
sub
mov
adc
cs
sbb
adc
lods
xchg
inc
aam
xchg
les
xlat
loope
push
je
push
and
call
push
adc
into
pop
out
xchg
jmp
cmp
add
sti
push
arpl
mov
push
sub
inc
or
je
or
pop
xor
ret
mov
nop
ins
fstp
xor
sahf
push
aad
adc
add
enter
mul
dec
mov
mov
int3
addr16
push
cmp
dec
sub
cmp
sti
lock
xchg
fwait
pop
jae
arpl
repz
and
shl
adc
not
and
or
push
bound
pop
dec
cdq
sub
adc
fimul
sub
and
rcl
loopne
adc
es
xor
cwde
js
jno
jmp
adc
inc
loope
pusha
aad
sbb
xchg
xchg
cmp
mov
cmp
mov
adc
jno
xchg
or
outs
fsub
jae
stc
xchg
mov
mov
lods
jns
or
jmp
movs
stc
or
jmp
xchg
push
pop
adc
scas
mov
bound
and
retf
push
out
sbb
cdq
xchg
mov
xchg
jp
repnz
or
mov
je
retf
cmp
add
retf
pop
dec
xor
(bad)
fadd
retf
lahf
ss
ins
jns
movs
xchg
xor
std
mov
dec
sub
add
repz
mov
(bad)
in
push
cmps
sub
fsub
cmp
dec
cld
les
and
ins
and
jecxz
dec
ret
mov
adc
sub
mov
fisttp
jmp
je
imul
fcomi
xor
call
push
pop
sub
push
out
shr
sti
out
cmp
or
pop
mov
es
test
je
sbb
ret
sub
cmp
jns
in
mov
dec
pop
xchg
stc
mov
iret
xchg
cmp
jno
sbb
aam
mov
adc
mov
dec
hlt
in
jno
mov
adc
mov
mov
cmp
fstp
(bad)
pop
int3
pop
jne
adc
adc
lods
cmps
sbb
ret
adc
jnp
dec
daa
xchg
mov
cmp
mov
adc
or
pusha
js
pop
push
test
mov
or
xchg
test
jns
sti
rep
clc
and
je
ret
in
and
pop
mov
arpl
sbb
rol
and
xor
out
xchg
icebp
enter
adc
sbb
les
push
cmp
jp
xchg
adc
jge
adc
fisub
adc
jmp
nop
arpl
push
xchg
adc
ins
xchg
cdq
push
cli
adc
out
dec
out
sbb
add
cmp
xor
mov
jl
stos
adc
dec
sub
mov
xlat
rol
pusha
add
jb
loope
in
daa
or
repz
and
adc
movs
stos
repnz
sbb
push
mov
adc
jle
jge
add
push
cld
push
les
ss
sets
xor
loope
xchg
or
cli
adc
ins
add
and
ret
adc
ja
mov
sbb
mov
and
cmp
adc
inc
(bad)
test
fs
pop
arpl
adc
xchg
adc
inc
fs
ret
pusha
xchg
inc
mov
xor
sub
rol
xchg
adc
jmp
mov
mov
sahf
cmps
xor
cli
int3
adc
(bad)
cli
adc
rol
cs
add
jge
movs
jecxz
sub
sub
xchg
mov
adc
ret
test
inc
pop
xchg
(bad)
jmp
dec
mov
not
lods
push
push
fstp
ins
adc
push
in
or
adc
inc
adc
push
sbb
shr
int3
sub
popa
push
xchg
jo
or
es
movs
adc
xor
imul
jecxz
mov
(bad)
ds
in
cmps
popf
adc
ja
fucomip
mov
in
(bad)
jl
outs
inc
out
add
movs
fcom
int3
inc
push
mov
dec
pushf
pop
call
aam
sub
pop
movs
out
cmc
lock
out
dec
inc
mov
add
mov
lea
mov
sbb
dec
sbb
sbb
int3
push
push
xchg
in
stos
adc
imul
aam
cmp
adc
xchg
mov
sub
inc
das
cmp
mov
outs
xchg
push
out
repnz
ficom
jg
and
xchg
pop
fwait
and
mov
adc
nop
cmc
push
enter
sbb
lods
bound
jmp
stos
pop
dec
das
cdq
pusha
in
xchg
inc
adc
or
hlt
cmps
jmp
sbb
scas
xchg
adc
inc
pop
test
dec
out
adc
sub
test
and
je
lods
adc
out
mov
iret
lea
adc
cli
addr16
sbb
and
arpl
fst
ins
dec
xor
mov
sub
scas
sub
and
loope
int
icebp
add
pop
mov
adc
mov
adc
dec
xor
ret
fistp
adc
inc
and
push
cmc
scas
push
loope
mov
cli
sub
or
aam
jmp
(bad)
in
push
nop
jns
cli
shl
sub
mov
push
(bad)
pop
js
jmp
shr
int3
pop
push
cmc
mov
repz
dec
cmp
cmp
lahf
xchg
pop
adc
push
fistp
(bad)
std
adc
rcr
sti
ins
adc
adc
sbb
adc
jp
in
xchg
mov
inc
fcom
out
jbe
push
outs
dec
mov
hlt
dec
ins
adc
mov
iret
jbe
or
arpl
ins
push
pop
in
std
mov
add
xchg
nop
pop
push
rol
stc
loop
and
adc
ins
(bad)
xor
cmp
inc
adc
cmp
addr16
das
xchg
fstp
mov
or
adc
pop
add
cli
cmp
and
or
adc
rcl
mov
jg
push
mov
mov
mov
mov
cmp
test
adc
adc
pop
adc
or
sub
xor
sbb
dec
mov
lods
pop
adc
pushf
pop
rcr
push
sbb
imul
ins
push
mov
add
adc
pop
scas
test
(bad)
add
adc
gs
adc
call
pop
pop
loop
sbb
and
push
push
adc
cmc
popa
ret
lock
in
jne
push
or
adc
or
lea
xchg
sub
jnp
test
adc
jo
hlt
mov
and
mov
aam
sub
cli
jb
mov
lock
or
imul
scas
ss
movs
pop
mov
sbb
not
pop
ret
mov
push
shr
jo
stos
cvtps2pd
mov
sar
popa
fcomp
scas
lods
xchg
inc
cmp
les
das
std
lds
push
push
inc
xor
int3
pop
add
out
mov
pop
adc
ja
clc
jns
or
mov
xchg
into
add
and
aam
mov
mov
sbb
mov
sbb
inc
mov
popa
inc
fwait
lds
sub
mov
push
pop
std
fimul
push
imul
mov
push
xchg
idiv
fcmovbe
aad
enter
xchg
ret
push
adc
push
loop
adc
dec
sub
xor
push
imul
xchg
sbb
lods
nop
outs
push
movs
adc
int3
enter
sub
adc
sahf
dec
mov
push
inc
in
in
int
jo
leave
add
mov
mov
es
adc
sbb
pop
test
jl
dec
cmp
(bad)
push
mov
add
cdq
pop
fcmovu
loope
pop
scas
rcr
inc
and
stos
xchg
call
cmc
xchg
into
adc
jp
mov
adc
das
divps
ins
fwait
push
inc
sbb
retf
pop
out
mov
or
sbb
and
cmp
mov
rcr
jl
sbb
adc
xor
adc
add
cs
dec
in
adc
fdivr
in
bound
aad
push
repz
jl
je
mov
in
out
inc
(bad)
and
addr16
xchg
icebp
pop
pop
fnstcw
call
in
retf
es
and
cmp
mov
mov
pusha
and
or
inc
sub
out
call
mov
xchg
adc
shr
aam
xor
(bad)
cli
(bad)
adc
mov
and
adc
stos
icebp
pop
sahf
rcr
adc
push
leave
in
cmps
lock
adc
daa
std
loope
outs
dec
test
cmp
in
call
cs
or
xchg
pop
and
mov
repz
mov
fisttp
addr16
hlt
cli
adc
hlt
cdq
jno
or
and
lods
inc
and
loopne
pushf
adc
ret
xchg
jmp
xchg
(bad)
cld
fadd
xlat
fucomi
dec
adc
dec
add
sbb
mov
retf
dec
loop
mov
in
inc
sbb
inc
xchg
dec
pushf
movs
adc
jns
mov
in
lock
mov
rcl
hlt
sbb
push
mov
out
sbb
mov
test
inc
inc
mov
in
cmp
pop
xchg
or
dec
xchg
std
bnd
push
arpl
iret
scas
dec
sbb
jge
jle
sub
inc
mov
nop
sbb
xchg
adc
push
es
xchg
mov
adc
xor
mov
push
mov
push
sbb
pop
in
push
sub
not
mov
adc
stc
loopne
nop
shr
hlt
xchg
in
out
adc
jns
adc
add
xchg
cli
cmps
movs
call
fimul
ins
and
and
inc
mov
scas
push
cs
out
lods
dec
icebp
xlat
mov
sar
xchg
xor
sbb
cmps
sbb
xor
movs
adc
(bad)
cmp
mov
into
nop
sbb
push
and
inc
in
pop
cmps
push
mov
shl
cmp
in
add
fiadd
sbb
stos
dec
ins
cmc
cmp
adc
iret
dec
jno
add
or
or
shl
push
cmp
push
fisub
(bad)
repnz
sbb
mov
test
adc
rol
jl
ficom
and
pop
in
adc
jge
cmps
cdq
popa
jmp
arpl
sti
adc
stos
test
test
inc
xor
clc
in
add
or
fnstenv
in
mov
xchg
jle
push
or
adc
mov
cmps
pushw
ror
jmp
cmp
out
sub
mov
bound
xor
sbb
or
push
inc
int3
inc
adc
cs
mov
add
sbb
mov
mov
(bad)
nop
mov
scas
pop
adc
(bad)
ficomp
hlt
sbb
sub
add
mov
adc
xchg
stos
and
fst
lock
retf
cli
das
(bad)
(bad)
out
adc
cmp
ror
push
lods
xor
adc
mov
in
call
xchg
in
sub
retf
cmc
push
inc
or
mov
(bad)
sbb
sbb
mov
in
out
fwait
and
sahf
out
inc
(bad)
cmp
mov
dec
in
sti
dec
es
scas
add
adc
dec
inc
loop
mov
mov
bndldx
daa
cld
mov
aam
stos
sub
inc
pop
out
add
cmps
ss
push
fimul
sub
pop
popa
ret
rcl
or
movs
aam
xchg
dec
hlt
adc
mov
out
lahf
jg
inc
pop
rol
adc
(bad)
cmps
ds
mov
loop
mov
push
in
add
mov
inc
ret
pop
pop
inc
dec
xchg
jl
adc
mov
mov
(bad)
cli
or
push
lea
xor
inc
adc
(bad)
sub
clc
pusha
mov
mov
sbb
dec
mov
movs
adc
ret
arpl
lahf
xor
xor
push
sbb
xchg
push
data16
adc
adc
les
repz
gs
cmc
and
out
adc
adc
stc
push
inc
ins
adc
pop
int
arpl
imul
jns
adc
rcr
ret
mov
adc
xchg
sbb
addr16
cmps
adc
jp
inc
(bad)
cmp
(bad)
mul
mov
adc
stc
xchg
jbe
jae
mov
stos
popa
pop
test
out
adc
fcom
ficomp
pop
stos
(bad)
jge
push
adc
popa
call
ins
xchg
push
sbb
rcr
in
les
je
rcl
mov
and
xchg
daa
push
les
bound
jl
movs
int3
fdiv
mov
pop
lahf
add
ins
das
sub
lea
push
(bad)
std
push
jns
lock
mov
inc
cmps
dec
dec
push
pop
adc
ins
dec
jne
loop
imul
in
pop
adc
pop
movs
push
rcr
ins
aad
mov
cmp
ror
leave
dec
imul
test
loopne
into
pop
mov
addr16
int3
adc
ret
cmp
xchg
daa
jge
adc
pop
not
nop
shl
jo
xchg
xchg
aam
cli
out
push
scas
sub
adc
outs
and
mov
fst
xchg
inc
mov
cmp
jge
inc
cwde
outs
dec
lods
pop
adc
add
sub
in
sar
xchg
ins
mov
sub
into
adc
cmc
(bad)
(bad)
repz
add
jecxz
(bad)
or
mov
push
jmp
test
xchg
xor
inc
mov
add
sbb
sub
mul
push
or
dec
push
add
inc
mov
inc
pop
sbb
enter
push
jle
repnz
pop
jg
dec
es
jae
ins
xor
pop
test
inc
dec
in
sbb
int
sbb
and
dec
push
out
mov
test
xchg
ret
cld
aas
adc
inc
popa
add
fnstsw
or
idiv
rcr
adc
aaa
out
pop
fwait
jbe
adc
lods
mov
out
ror
cmp
ds
aas
stc
jecxz
jg
into
sub
inc
in
and
adc
mov
jl
xchg
xor
cmps
push
scas
arpl
inc
push
in
and
sbb
adc
sbb
bound
sub
mov
xchg
pushf
sbb
std
fistp
bound
jl
idiv
mov
lods
add
and
pop
xchg
mov
xchg
hlt
mov
and
push
addps
(bad)
in
or
idiv
cmp
aam
scas
cmp
mov
add
or
sbb
mov
adc
call
adc
and
sub
mov
cmp
push
rcr
dec
imul
stc
not
sti
lds
aam
mov
mov
es
movs
in
rcl
ret
imul
iret
aam
out
ds
adc
xchg
scas
push
nop
ja
out
xlat
adc
mov
rcl
sub
dec
test
scas
lahf
pusha
mov
mov
mov
pop
enter
call
retf
and
fcomp
push
lock
scas
repnz
add
inc
scas
(bad)
push
call
cdq
mov
inc
adc
(bad)
jae
mov
push
mov
fs
gs
test
dec
xchg
mov
adc
xor
jge
mov
push
push
mov
jnp
xor
stc
and
add
cmps
xchg
fidiv
int
adc
sub
jmp
or
sahf
cli
adc
fisub
nop
adc
inc
adc
mov
dec
jecxz
and
dec
sbb
int3
add
add
or
out
gs
popa
sbb
pop
inc
lahf
cmp
arpl
adc
in
sub
aad
push
and
cs
inc
adc
and
mov
lea
daa
popa
or
rcl
loopne
ffree
mov
add
inc
retf
out
lea
adc
jp
pop
test
mov
je
sub
loopne
inc
es
dec
aaa
jge
test
xchg
xor
push
jnp
inc
mov
pop
ja
mov
push
bound
adc
stos
and
adc
sub
mov
adc
in
cli
adc
adc
add
push
pop
cmp
leave
rcr
mov
push
xchg
xchg
sub
push
imul
jmp
stos
add
jmp
mov
fwait
movs
cs
jmp
push
sbb
std
mov
pop
xchg
pushf
mov
out
scas
addr16
xor
mov
es
mov
sub
adc
icebp
mov
adc
add
or
(bad)
repnz
lock
cmps
add
mov
push
add
adc
cs
les
stos
jb
or
mov
push
xchg
inc
mov
and
aad
push
dec
adc
mov
int
mov
mov
xor
xchg
fsubr
stos
inc
pop
rcr
or
cmp
xchg
dec
cmps
adc
je
pop
inc
leave
adc
fcmovne
push
fldz
inc
das
loopne
jmp
sbb
mov
mov
and
cmp
retf
adc
xchg
push
lods
xchg
mov
adc
out
call
inc
cwde
sub
push
adc
(bad)
out
adc
cmp
and
out
sbb
and
sub
xor
aaa
sbb
pusha
or
push
aad
dec
mov
ss
sahf
adc
add
jcxz
popf
jnp
sbb
lock
cmp
and
jecxz
mov
pop
mov
mov
inc
add
in
jbe
cmp
mov
adc
(bad)
lea
adc
movs
int3
sub
or
mov
mov
loope
push
sub
fild
lods
shl
or
push
push
test
loop
adc
int3
xchg
(bad)
pop
pop
push
repnz
jge
adc
dec
jbe
cld
cmc
fwait
sbb
or
mov
mov
lods
loopne
adc
jecxz
pushf
cmp
and
arpl
add
adc
sub
or
push
addr16
pop
adc
add
cmp
rcr
fwait
adc
push
scas
jecxz
dec
je
or
(bad)
in
test
pop
xchg
jns
pop
and
cmp
jl
int3
(bad)
pop
fnstsw
enter
adc
fld
inc
vmwrite
adc
and
cmps
nop
mov
dec
adc
mov
jae
sub
xor
adc
ja
pop
inc
iret
call
push
adc
mov
sub
mov
cmp
aas
xchg
or
push
push
retf
(bad)
adc
test
es
xlat
push
mov
ja
push
cmp
icebp
in
jmp
mov
inc
aas
xchg
scas
cmp
xchg
jl
rcl
jne
pushf
adc
pop
dec
xchg
sbb
sub
dec
in
lea
xor
stos
(bad)
fs
mov
inc
add
out
frstor
ja
and
xchg
jb
es
xor
loope
xchg
push
jge
int3
(bad)
push
adc
pop
mov
inc
mov
daa
lods
inc
int3
aad
add
je
out
nop
mov
add
arpl
jnp
xchg
into
jbe
adc
gs
ins
lds
pop
jl
hlt
ins
adc
adc
mov
addr16
mov
fucom
jmp
mov
and
adc
dec
in
adc
or
lahf
pop
fld
jp
mov
xchg
mov
inc
aas
mov
push
clc
dec
cmps
clc
xchg
adc
hlt
mov
rcl
dec
pop
sbb
pop
jno
xchg
ret
in
push
inc
adc
fild
xchg
test
add
out
adc
or
fisubr
in
push
inc
inc
xchg
mov
adc
outs
repnz
add
into
add
push
mul
popf
add
pop
push
popa
mov
cmps
loope
cld
out
push
sub
cs
repnz
add
push
outs
push
scas
sbb
pop
push
mov
cmp
xor
test
adc
mov
push
sbb
cmps
mov
xchg
mov
bound
(bad)
fwait
arpl
mov
dec
or
dec
cdq
ins
cld
and
int3
mov
arpl
mov
jmp
(bad)
pushf
jmp
movs
aaa
je
xchg
aas
cmp
sbb
shl
ss
cmc
and
neg
jmp
pop
add
sti
loope
test
(bad)
xor
adc
loop
in
inc
in
mov
add
add
ret
adc
and
pop
mov
sub
adc
xor
iret
int3
adc
aam
aam
pop
scas
daa
jb
adc
add
pushf
cmps
xchg
pop
movsx
add
aam
cwde
in
imul
ret
jb
mov
lods
adc
or
rcl
(bad)
jmp
hlt
adc
xchg
inc
aad
sub
adc
mov
cli
xchg
adc
mov
pusha
push
dec
inc
jne
js
bound
xchg
in
or
jmp
cmp
pushf
(bad)
fbstp
adc
sar
xchg
out
add
adc
cmc
jmp
xchg
xchg
pop
sbb
loop
popf
push
loop
or
sbb
jge
adc
inc
mov
or
out
add
addr16
mov
cmp
inc
adc
jb
sbb
cmp
lods
mov
mov
inc
xor
adc
push
push
movs
clc
jns
loop
inc
mov
fld
and
adc
inc
jecxz
rcl
mov
lea
stc
mov
int3
aaa
std
hlt
inc
adc
lods
test
mov
(bad)
retf
hlt
cmp
fwait
add
push
scas
push
cli
mov
jmp
popa
stos
aam
mov
gs
loopne
cmc
cmps
xchg
mov
sbb
in
(bad)
add
and
push
fdivr
(bad)
std
adc
adc
movs
xchg
js
(bad)
aam
xchg
ds
es
retf
movs
stos
icebp
push
movs
adc
sar
daa
out
adc
outs
pop
adc
ds
cmps
lods
out
iret
cdq
hlt
ror
ret
mov
and
lock
sqrtps
ror
dec
shl
xor
scas
hlt
xor
je
cmps
cli
adc
adc
ror
pop
or
out
fisubr
xor
xchg
add
lock
adc
mov
mov
outs
push
loope
aaa
jg
fcom
xor
sub
pop
add
scas
js
callw
adc
aaa
inc
loope
adc
mov
imul
or
add
ds
or
ins
adc
inc
add
popa
arpl
jecxz
dec
adc
push
les
mov
dec
jae
adc
sti
pop
stos
mov
out
loope
or
jns
push
enter
sbb
jmp
mov
pushf
(bad)
outs
cmc
xchg
xor
cmp
(bad)
sbb
lea
adc
ss
fisubr
retf
inc
jae
stos
cmps
adc
cld
movs
fwait
(bad)
mov
sub
inc
inc
lock
push
sub
cli
add
int
mov
sub
xchg
pop
xor
add
cdq
push
mov
adc
ret
daa
push
jg
mov
pop
mov
es
imul
xchg
ins
test
xor
sub
cmp
pusha
inc
in
or
sub
leave
mov
inc
fmul
ins
adc
push
cli
pop
add
rcl
mov
adc
and
adc
sbb
out
adc
rcl
in
ins
loopne
mov
xchg
das
pop
pop
fidiv
xor
test
imul
leave
(bad)
xchg
xor
xchg
out
sub
stos
xchg
pop
aad
mov
inc
pop
pop
in
(bad)
ins
jmp
pop
jne
in
mov
pop
pop
adc
nop
imul
push
into
(bad)
cmps
out
xchg
xchg
inc
ror
mov
and
rcl
jecxz
mov
jl
jae
inc
push
or
mov
dec
add
aam
xchg
push
mov
arpl
(bad)
inc
fld
leave
sub
or
jbe
mov
dec
fild
push
inc
inc
inc
push
adc
adc
jle
test
inc
push
push
push
add
mov
sub
sub
mov
ins
movs
adc
sar
adc
or
cmp
mov
call
sub
loop
ins
mov
cmp
xchg
add
adc
jmp
lds
pop
jmp
(bad)
jnp
out
dec
out
sbb
sbb
test
push
pop
xchg
adc
pusha
mov
sub
xor
sbb
and
neg
mov
xchg
in
mov
idiv
jl
sahf
inc
imul
pop
fmul
(bad)
sbb
jle
fsub
fcom
rcr
movs
add
mov
fistp
(bad)
rcl
mov
or
pop
loopne
sbb
jp
inc
fmul
adc
xchg
rcl
add
sar
adc
xor
mov
adc
or
es
int3
aad
adc
add
xchg
jae
dec
popf
push
xchg
xor
inc
es
push
in
xor
mov
test
mov
mov
jb
sub
(bad)
aad
cmp
addr16
stos
inc
push
std
xchg
adc
and
push
adc
pop
(bad)
push
mov
xchg
mov
pop
xchg
adc
test
ror
cli
jmp
aas
lock
js
sub
sbb
xchg
xchg
jae
adc
mov
xor
pop
lds
daa
cmps
mov
sbb
mov
enter
mov
adc
pop
add
mov
push
fsubr
xchg
sar
dec
adc
lods
mov
cmp
fsub
outs
js
mov
das
sbb
frstor
or
addr16
jb
fistp
fisttp
jmp
aam
je
stos
das
jl
ins
jmp
hlt
imul
fs
imul
sub
int3
cmp
adc
xchg
aam
or
cmp
(bad)
and
scas
ds
pusha
pop
and
retf
xor
fs
mov
aad
popa
(bad)
adc
ficom
or
inc
bound
call
ret
fld
or
std
scas
mov
inc
sbb
ret
jmp
adc
push
(bad)
psllq
adc
xor
sar
int3
in
add
stos
popa
popa
add
mov
push
mov
popf
sti
push
sbb
mov
movs
pop
and
pop
xchg
popa
jl
imul
mov
and
or
fs
mov
sbb
shr
xchg
lods
xchg
adc
cmp
fmul
and
sahf
fs
jge
dec
out
push
je
jnp
xor
and
pop
xchg
xchg
sub
cmp
inc
adc
xchg
sbb
adc
outs
push
and
jae
std
clc
mov
push
imul
arpl
adc
xor
or
mov
ret
fsub
data16
sub
mov
sbb
leave
push
or
adc
stos
aas
jmp
sbb
clc
out
mov
hlt
daa
jmp
repnz
and
push
fcomp
xor
jnp
scas
cmp
or
dec
retf
sbb
add
loopne
adc
mov
dec
lahf
push
cmp
and
aad
je
pop
adc
mov
sub
int3
rep
cmps
push
add
adc
pop
(bad)
repnz
adc
rcl
mov
fild
adc
push
pop
fwait
adc
mov
lods
add
call
inc
adc
jp
sbb
sbb
vmread
add
ffree
aam
xchg
cmps
stos
jo
push
mov
xchg
pop
push
movs
adc
das
push
lods
imul
ja
xchg
push
or
adc
lods
add
(bad)
adc
dec
mov
adc
xchg
sbb
push
pusha
sub
adc
hlt
pop
data16
movs
lods
sbb
jle
mov
pop
xor
jecxz
loope
mov
push
pop
sub
fnop
push
and
in
xor
aam
test
sti
mov
in
add
mov
imul
sub
adc
(bad)
stos
sbb
adc
dec
rcl
repnz
cld
mov
or
sub
adc
repnz
loope
pop
push
and
and
mov
cdq
push
clc
and
sahf
mov
repnz
mov
jns
sbb
retf
fdivr
adc
loop
sbb
xchg
jbe
adc
cmp
mov
icebp
pop
and
or
sub
aas
call
mov
fild
pop
jge
aam
int
mov
pop
adc
ror
or
mov
and
jge
arpl
mul
and
imul
imul
aad
sub
mov
in
pop
xor
push
dec
mov
fst
push
cdq
sahf
jmp
ins
and
adc
enter
push
rcr
sbb
imul
dec
and
jg
pop
mov
xor
inc
adc
stos
push
fucomi
test
fs
adc
mov
adc
xchg
mov
adc
xchg
inc
xor
adc
ds
repz
jle
arpl
adc
shr
inc
js
pushf
push
adc
and
dec
adc
outs
das
js
pop
or
mov
sub
and
dec
out
sbb
mov
sbb
push
mov
fs
icebp
jns
dec
cmps
or
test
ret
and
repz
xor
jbe
aaa
bound
repz
xlat
mov
mov
or
ret
cdq
adc
cmc
in
inc
mov
and
mov
out
scas
nop
(bad)
lock
das
test
push
in
cmps
pusha
in
xchg
lahf
inc
jecxz
in
and
cmp
push
mov
retf
or
fldln2
inc
mov
adc
pop
out
and
pop
clc
mov
mov
xchg
scas
xchg
jle
push
rol
push
inc
and
cmps
fs
and
dec
fsub
push
push
sbb
adc
xchg
push
sbb
push
fwait
jbe
aam
retf
mov
xlat
pop
adc
lock
mov
js
das
push
imul
inc
enter
(bad)
call
aam
xchg
call
dec
sub
and
dec
mov
push
adc
add
rcl
pop
push
jmp
stos
xchg
dec
push
leave
sub
xor
sbb
mov
int
retf
push
cs
jns
cmp
push
test
fdivp
rcr
sub
nop
adc
inc
jmp
adc
sub
or
fwait
and
dec
adc
add
clc
xor
mov
(bad)
mov
retf
cmps
xchg
imul
and
je
(bad)
rol
mov
pop
or
jbe
xlat
enter
ins
ins
push
push
pop
in
ret
stos
mov
imul
les
test
jb
sbb
popa
dec
sti
adc
push
(bad)
sbb
mov
fcomi
adc
pop
jecxz
test
hlt
mov
add
idiv
or
es
les
inc
out
mov
ret
cwde
pop
sbb
in
lods
les
xchg
sbb
or
rcr
pop
jg
outs
int3
cmp
dec
enter
push
cmps
adc
leave
or
aam
push
adc
jbe
xchg
sar
icebp
adc
xchg
pop
adc
loope
int3
out
std
rcl
mov
xchg
in
xor
jns
adc
outs
cmp
aas
int3
(bad)
xchg
adc
fadd
add
mov
add
aam
mov
pop
cmp
push
iret
xlat
fisubr
cmps
fsubr
xor
pop
cli
sub
mov
cmp
add
sub
ficom
lods
loop
std
fisttp
mov
lea
fisubr
fstp
fistp
add
dec
add
mov
in
imul
mov
pop
adc
(bad)
lods
in
push
fst
adc
sub
mov
pop
je
sub
ss
(bad)
pop
shl
daa
sbb
test
jo
test
cmp
jmp
in
icebp
jbe
add
in
(bad)
fcom
push
(bad)
and
adc
jl
loop
and
cmps
sti
js
cdq
and
add
jg
cs
enter
and
add
iret
or
ins
dec
aam
repnz
pop
cmp
(bad)
mov
sbb
sbb
push
or
mov
push
pusha
mov
(bad)
ins
or
int3
or
aam
jo
dec
loopne
jne
out
test
cmp
sub
inc
xchg
adc
scas
bound
or
dec
pop
adc
int3
vsubps
dec
out
popa
cmps
jl
pop
mov
xchg
inc
dec
data16
or
or
push
cmovo
retf
mov
or
ins
out
jb
je
mov
mov
pop
xchg
mov
cmp
fs
sbb
inc
fidiv
sub
lds
sub
push
sub
mov
pop
nop
jne
(bad)
hlt
sub
jmp
aam
in
xchg
xchg
dec
test
mov
out
inc
in
stos
test
dec
add
pop
adc
dec
or
cs
fldenv
mov
mov
and
das
mov
out
inc
popa
nop
or
aaa
xchg
dec
mov
icebp
jno
pop
jp
cmp
add
loopne
adc
xor
adc
pop
gs
(bad)
adc
adc
inc
sbb
call
xor
lock
mov
fdivr
fs
jmp
das
test
cmp
and
push
sub
sbb
fdiv
inc
cmp
jno
dec
cdq
mov
push
das
dec
(bad)
xchg
mov
sbb
in
cmp
mov
inc
pop
jno
mov
fs
pushf
inc
fldl2e
dec
adc
pop
cld
mov
and
mov
push
cmp
ds
ds
push
jp
adc
xchg
push
dec
sub
dec
ins
leave
repnz
movs
mov
lahf
push
pop
dec
sbb
mov
mov
ins
adc
lahf
mov
xchg
(bad)
je
or
or
or
inc
retf
xchg
sbb
xor
(bad)
mov
mov
jno
xor
int3
cdq
adc
retf
or
call
lahf
pop
jno
and
cmps
mov
cmp
ja
fisttp
repnz
adc
mov
ret
lods
je
pushf
jp
cmc
mov
hlt
pop
dec
cld
pusha
dec
or
in
faddp
lahf
pop
stc
imul
fldcw
push
cmp
mov
(bad)
ds
adc
movs
xchg
pcmpeqb
lods
push
mov
stos
sahf
pop
lahf
std
xchg
xchg
(bad)
fdiv
sbb
hlt
cld
jmp
data16
xchg
or
mov
outs
xchg
cmc
jne
add
(bad)
lds
mov
sbb
xor
push
sub
adc
push
rcr
cmp
mov
sub
adc
cmps
stos
inc
(bad)
fist
in
rcr
mov
outs
je
test
or
scas
adc
dec
add
mov
mov
xchg
sbb
jp
xchg
cdq
daa
pop
sbb
mov
cmp
cmps
sahf
bnd
or
cmp
fisttp
mov
movs
sbb
and
dec
sub
fcomp
(bad)
jg
mov
xor
cmp
repz
lods
xchg
aam
mov
sub
aaa
sub
mov
js
aam
sar
mov
dec
sbb
xchg
add
push
sbb
inc
push
scas
ss
sbb
cmp
ins
movlps
cld
add
cli
std
retf
dec
pop
push
mov
dec
pop
out
(bad)
mov
jle
ret
jmp
dec
push
and
leave
int3
jp
mov
xor
ret
or
xor
or
(bad)
icebp
mov
sub
shr
add
lock
stos
pop
add
jo
rcl
mov
mov
je
jmp
sbb
mov
push
in
cmp
shrd
mov
test
pushf
(bad)
adc
mov
les
dec
fdivr
shr
xchg
push
xchg
shl
pop
jmp
jge
or
mov
dec
(bad)
repnz
mov
fiadd
pop
sub
movs
push
fcomp
cs
bound
jecxz
dec
js
push
or
cwde
xchg
aas
aaa
mov
(bad)
or
jecxz
les
mov
or
pop
xor
cld
push
retf
in
out
jae
cwde
call
fimul
inc
push
cmps
pop
inc
hlt
pop
int3
push
dec
ins
in
mov
cld
sbb
add
sub
xchg
dec
inc
mov
into
fstp
xchg
jp
push
push
pop
test
(bad)
in
mov
std
and
inc
adc
sub
call
lds
pop
cld
push
dec
sbb
mov
mov
repnz
xor
in
push
xor
pop
cmp
inc
pop
dec
aas
mul
xchg
mov
mov
dec
mov
clc
ds
test
add
movs
dec
dec
or
adc
push
xchg
imul
xchg
aas
scas
popa
inc
push
or
dec
repnz
mov
dec
je
std
in
xchg
(bad)
adc
adc
in
cdq
adc
outs
jle
jb
fs
adc
cmp
cwde
mov
gs
jl
cmp
and
push
lahf
cdq
rcr
shr
inc
aam
sti
movs
adc
inc
ds
fld
dec
mov
jae
inc
out
(bad)
ds
pop
xchg
xor
fmul
pop
add
xchg
aam
fisttp
xor
loope
sub
outs
adc
push
cld
jns
sbb
sub
add
push
sbb
xchg
adc
pusha
mov
aam
sub
or
outs
pop
mov
arpl
inc
sar
lock
adc
fisttp
mov
push
in
cmp
and
dec
lea
loope
lods
adc
xchg
iret
addr16
and
inc
cmc
or
ss
sbb
push
inc
mov
push
push
pop
(bad)
int
repnz
adc
(bad)
mov
ss
xchg
and
jbe
jb
xor
pop
rcr
aad
push
test
in
int
mov
rol
ss
cmp
mov
test
push
adc
pop
add
not
adc
loope
sbb
in
int3
shr
mov
stc
sar
imul
or
out
xchg
xlat
push
push
adc
xor
mov
adc
mov
and
lahf
ins
mov
sub
rcr
fucomp
push
(bad)
mul
lods
xchg
lods
mov
aaa
(bad)
paddb
and
cmp
imul
push
(bad)
cmp
clc
xchg
inc
je
xchg
pop
and
adc
mov
jne
jle
xor
test
or
ror
or
movs
and
imul
ficomp
ins
adc
push
push
sbb
pushf
add
adc
out
jo
or
xchg
popa
adc
mov
dec
popf
sbb
movs
repnz
rcr
xchg
mov
sbb
and
xchg
mov
aam
jbe
adc
(bad)
dec
xchg
fstp
xor
shl
sahf
push
sbb
out
adc
dec
xor
fsub
std
rcl
js
push
cdq
(bad)
cmp
mov
sub
adc
xor
jmp
pop
xor
dec
xchg
or
pop
or
lods
mov
xor
adc
add
cwde
imul
ficomp
ds
std
push
addr16
adc
mov
push
dec
mov
add
xchg
in
cmp
xchg
adc
ret
add
rol
dec
cmp
adc
mov
loopne
or
repnz
inc
pusha
ret
dec
call
adc
and
test
repnz
xor
xchg
pusha
mov
adc
pop
loopne
mov
popa
adc
dec
sub
xor
and
in
and
pop
push
fst
pop
test
sbb
mov
mov
psrlw
pop
dec
ror
xchg
lods
xor
pop
xchg
mov
loop
leave
xor
push
js
mov
dec
jbe
enter
cmp
push
sbb
test
and
sbb
int3
xor
int3
mov
dec
gs
pop
es
stos
push
adc
cdq
loop
and
imul
ja
mov
jmp
push
(bad)
arpl
lock
ja
aas
jecxz
dec
(bad)
mov
out
jmp
scas
in
jae
xchg
xchg
add
sar
aas
mov
adc
push
cmp
(bad)
cmc
int3
and
idiv
mov
adc
jecxz
syscall
in
mov
adc
pop
std
cmc
and
adc
fmul
lock
xchg
imul
popf
aam
mov
cmps
adc
out
pop
das
jmp
mov
or
push
xchg
adc
mov
pushf
lea
inc
and
fmul
cmp
mov
jge
rcl
sub
xchg
scas
jnp
aam
adc
mov
mov
repnz
pop
push
mov
xor
cmp
fcom
scas
ins
gs
jge
in
shl
push
adc
push
pop
stos
dec
xchg
(bad)
sti
sbb
pop
aas
hlt
dec
mov
sbb
dec
push
push
cli
aam
jno
adc
xor
dec
mov
(bad)
adc
mov
jp
dec
pop
xchg
(bad)
stc
cmp
adc
jmp
movzx
jle
adc
and
sar
fistp
adc
in
xchg
cmp
movs
in
sub
cmp
sbb
mov
lahf
jecxz
mov
xor
pop
or
fild
bound
xchg
mov
aad
xchg
jl
in
test
ins
cwde
cmp
jnp
popf
mov
fwait
push
retf
or
sbb
enter
xchg
adc
bound
adc
test
(bad)
fst
and
jnp
adc
push
(bad)
sub
mov
aaa
jmp
adc
dec
test
fisttp
pop
call
push
dec
xchg
cmp
sub
or
jle
add
xlat
mov
sbb
frndint
push
push
fisubr
adc
je
icebp
cwde
xchg
mov
jge
sbb
cdq
ja
add
les
das
jle
(bad)
sbb
aaa
adc
ffreep
xor
xchg
cmp
test
clc
cli
add
aas
adc
lods
cld
add
rol
mov
xchg
adc
or
push
mov
fs
mov
je
mov
mov
jnp
or
in
add
xor
fcmovnu
push
dec
mov
pushf
cmp
mov
or
hlt
and
jmp
push
movs
ja
xor
and
in
and
mov
or
jmp
jno
sbb
arpl
fstp
and
fidivr
jle
mov
cmp
(bad)
push
add
pop
jmp
sub
loope
je
pop
rol
adc
push
xchg
adc
mov
(bad)
cld
lock
adc
cdq
add
test
or
sub
adc
xchg
xor
sbb
dec
push
jne
push
std
xchg
rol
inc
mov
enter
aaa
stos
dec
or
mov
out
js
outs
sub
mov
mov
mov
and
add
and
sbb
cmp
sbb
inc
xchg
mov
inc
adc
retf
pushf
xor
lods
repnz
mov
lods
jno
call
add
pusha
icebp
leave
stc
pop
dec
adc
jne
aam
outs
dec
in
scas
push
push
jge
sub
push
hlt
jo
ror
xchg
shl
int3
movs
mov
dec
push
lahf
pop
sbb
adc
loope
and
hlt
out
out
sub
(bad)
adc
neg
int3
outs
movs
int3
sbb
adc
mov
repz
xor
pop
clc
mov
jnp
cmc
arpl
popa
pop
test
(bad)
mov
rol
(bad)
push
mov
repz
mov
push
xchg
mov
lahf
movs
add
pop
test
adc
sti
dec
mov
clc
xchg
call
in
mov
sti
add
adc
btc
sub
and
cmp
(bad)
jge
push
int
dec
aam
and
in
repz
ret
cmp
sbb
sbb
xchg
cmp
add
push
(bad)
adc
xchg
jbe
packuswb
xchg
or
sub
adc
loop
les
pop
loop
or
dec
into
addr16
mov
in
jb
xchg
pushf
in
xor
adc
add
jle
adc
into
lds
adc
jbe
xor
mov
scas
aam
lea
cmps
icebp
arpl
xchg
arpl
loop
into
adc
jl
adc
fistp
xchg
shr
adc
push
add
sbb
sub
adc
add
arpl
stos
test
push
xor
jns
rcl
xor
sbb
ja
in
call
movs
idiv
out
fmul
sub
aam
jle
and
jg
aas
lahf
adc
pop
inc
test
or
sbb
shr
cmp
ss
push
popf
cmp
fcmovb
test
or
enter
call
adc
lock
mov
cmp
add
fcomp
pop
mov
mov
cmps
test
and
int3
cld
repz
shl
in
and
frstor
push
stos
or
(bad)
push
sbb
scas
or
test
lock
mov
mov
retf
gs
jne
adc
dec
ss
and
cmc
xor
adc
rol
cdq
pop
xor
prefetch
int3
sbb
push
adc
(bad)
mov
pop
lahf
mov
test
xchg
jmp
rcl
shl
xor
imul
or
cmps
push
jae
or
or
cmp
pop
je
sets
sub
pushf
je
inc
adc
retf
pop
or
ror
ins
(bad)
push
in
sahf
int
cmc
mov
fwait
inc
sahf
fsub
retf
add
retf
out
ins
mov
add
scas
xor
les
nop
push
ds
sbb
loopne
bound
pop
mov
addr16
retf
push
or
add
sbb
shl
add
in
xor
jmp
jmp
enter
xchg
mov
mov
xor
(bad)
lock
ret
push
mov
cmp
cmc
fnsave
jg
mov
jmp
pop
das
imul
cld
xchg
xor
fiadd
mov
add
sub
ror
jmp
shl
add
jg
lea
sbb
push
or
add
adc
jno
mov
popf
int3
sbb
mov
add
loopne
jle
sub
pusha
jnp
aas
(bad)
xchg
(bad)
pop
sbb
mov
pop
xchg
add
pop
adc
ins
jmp
leave
stos
(bad)
sub
call
pop
sahf
aaa
stc
mov
inc
push
pop
push
and
push
inc
sub
cwde
and
push
adc
ret
xchg
fdiv
icebp
repz
cmp
push
sub
sbb
test
test
add
stc
addr16
popa
les
mov
call
sub
ss
test
add
imul
es
mov
inc
mov
inc
aam
dec
mov
aad
test
into
pop
retf
push
add
ds
xor
aaa
fnsave
add
out
call
push
in
cld
std
les
adc
fmul
pusha
jl
add
inc
retf
sub
and
pop
xchg
xor
sbb
jbe
movs
sar
sbb
sbb
loope
es
(bad)
pop
aam
retf
adc
jp
lds
repz
shr
(bad)
cmps
push
xchg
adc
push
inc
lods
add
mov
jns
sbb
fs
in
(bad)
mul
ds
xchg
adc
xchg
pop
imul
cli
or
lea
adc
push
iret
pop
hlt
jp
push
sbb
imul
sub
(bad)
in
pop
pushf
out
jo
adc
push
js
jbe
push
daa
in
out
loopne
fisttp
sub
pop
adc
lea
gs
xchg
lock
fs
mov
push
repnz
cmp
adc
add
in
sbb
cmp
push
lock
test
call
xchg
sar
sub
inc
inc
jp
ss
mov
daa
cmp
dec
retf
sub
test
pop
push
mov
aaa
or
in
mov
xchg
lahf
cli
xchg
mov
daa
mov
fist
scas
nop
fnsave
rcr
xor
(bad)
in
adc
cmps
add
dec
scas
data16
out
sub
aas
xor
mov
and
sub
push
dec
push
xor
fstp
xlat
adc
frstor
cwde
add
adc
xchg
jbe
les
sbb
mov
or
repnz
sbb
jp
xchg
jecxz
addr16
pop
fcom
sub
cli
and
arpl
or
lods
xchg
xchg
adc
adc
sahf
xor
jge
cmp
neg
fdivr
out
inc
push
lock
inc
loopne
sbb
cmpps
mov
xchg
in
push
stos
xor
xchg
adc
jecxz
adc
or
mul
rcl
sti
loopne
outs
scas
mov
adc
fld
sub
repz
in
add
xor
outs
push
adc
hlt
call
test
repnz
(bad)
repnz
popf
js
cmps
lea
pop
scas
pop
xlat
adc
sub
data16
ret
add
int
nop
vbroadcastsd
xor
test
retf
push
and
icebp
int3
xor
mul
adc
fdiv
ret
or
push
push
in
loope
mov
stos
add
pop
dec
xchg
push
cs
rcr
in
outs
inc
and
leave
push
lea
push
xor
add
stc
cs
xor
mov
(bad)
pop
dec
adc
test
pushf
add
sbb
mov
int
fcom
inc
push
mov
ds
push
test
push
aaa
cwde
ret
jl
mov
retf
ja
adc
sbb
popf
mov
xor
push
movs
cdq
ss
push
add
out
mov
test
lock
pop
push
clc
(bad)
jmp
adc
in
xor
mov
or
xor
dec
mov
mov
out
adc
nop
push
arpl
repnz
pop
sbb
stc
js
jle
sbb
adc
enter
fcmovnb
mov
cmps
nop
xor
fst
out
scas
dec
cs
adc
loop
fadd
pop
push
mov
sub
loop
test
cmp
jmp
adc
xlat
sti
jp
add
outs
shr
add
mov
and
jmp
jno
adc
pop
add
call
adc
fnsave
fisubr
dec
jns
xor
push
inc
cmp
pushf
je
in
pop
adc
aad
gs
push
retf
es
push
sbb
mov
and
movs
loope
inc
ret
jne
xchg
(bad)
xchg
xchg
sub
mov
or
in
std
jle
sbb
pushf
(bad)
scas
lods
iret
and
inc
mov
pop
sbb
lods
icebp
pop
test
in
xchg
adc
or
mov
xor
cwde
test
xchg
scas
xchg
push
adc
dec
mov
cdq
fimul
jbe
dec
sub
cmps
xchg
or
nop
outs
out
loopne
les
mov
rol
mov
stos
pop
shr
push
sbb
pop
fdiv
mov
add
mov
cmps
cld
xchg
cdq
jge
or
cmc
sub
cmps
loop
imul
lods
(bad)
ins
sub
pushf
scas
sbb
or
sub
inc
push
xor
xchg
fimul
loopne
xor
adc
and
and
stos
dec
adc
ss
lea
mov
shl
mov
adc
xchg
imul
and
int3
xor
jb
imul
js
aad
rcl
jae
out
je
or
icebp
pop
push
out
les
movs
push
repnz
int
pop
and
or
loope
pop
ja
sbb
dec
jnp
adc
ins
xor
push
pop
adc
and
std
cmps
add
sbb
(bad)
adc
pop
(bad)
xor
pop
mov
cmp
in
adc
push
ss
adc
lods
inc
test
pushf
mov
fmul
rcr
adc
add
jnp
pop
neg
dec
pop
sar
lds
ins
(bad)
sub
mov
adc
mov
cld
add
lock
push
jae
push
xchg
(bad)
push
adc
jnp
nop
rcr
push
sbb
loope
in
outs
out
das
adc
push
sbb
ror
clc
inc
dec
fwait
dec
jns
or
push
and
int3
pop
pop
sub
mov
mov
movs
jmp
aas
dec
cmp
xor
xor
int3
add
test
adc
dec
hlt
sub
and
daa
mov
or
jmp
das
jg
mov
dec
outs
pop
shr
pop
bound
in
out
in
sbb
stos
sbb
sub
inc
xchg
xchg
push
rol
mov
int3
lods
jmp
push
and
mov
dec
sahf
ja
push
dec
mov
jg
jg
xchg
fwait
test
and
push
xchg
cld
mov
xor
cmp
jae
dec
push
jmp
pop
(bad)
out
sahf
add
pop
cmps
cmp
mov
xchg
add
or
or
daa
fsub
mov
pop
movs
jecxz
rcr
jb
das
ins
aam
mov
retf
imul
add
sti
dec
mov
inc
xor
lea
test
ret
cld
out
sbb
das
rcr
in
dec
dec
push
pop
ret
dec
je
sbb
jg
rcr
xor
or
inc
(bad)
pop
sbb
outs
aad
hlt
sub
aam
(bad)
lea
push
shl
mov
fidiv
push
cdq
pop
adc
jnp
lds
xchg
addr16
adc
pop
sbb
dec
jl
push
adc
out
std
push
sub
sbb
push
sti
cdq
jecxz
vandnpd
sbb
repz
out
add
in
add
leave
mov
push
push
sub
(bad)
xchg
aam
inc
jne
inc
neg
xchg
pop
loopne
and
push
in
stc
cmp
ror
add
pop
pop
shr
enter
inc
test
inc
out
sbb
fistp
or
cmc
fucomip
cmp
pop
adc
int3
push
dec
xor
imul
push
sub
rcl
adc
popa
sbb
and
cs
push
push
daa
add
sub
fs
int3
test
pop
sbb
pop
jae
xchg
push
call
push
inc
pop
sub
aam
out
push
sbb
or
push
bound
sbb
mov
cmp
cmp
int3
(bad)
mov
bound
xchg
aas
in
cmps
or
and
imul
mov
xchg
adc
(bad)
push
je
jb
dec
mov
sbb
fcom
icebp
psrlq
mov
adc
push
sbb
adc
xchg
pop
call
sbb
cdq
je
fist
add
add
jl
dec
adc
imul
imul
aaa
adc
sbb
arpl
xchg
ins
or
sbb
and
(bad)
out
out
xor
pop
int3
test
and
sbb
dec
sub
fild
push
mov
fwait
adc
inc
cld
sbb
ret
fistp
push
dec
mov
fiadd
mov
jg
mov
dec
sti
and
xor
inc
inc
sub
xor
push
dec
and
popf
(bad)
sub
out
call
jge
pop
aam
aas
fnstcw
inc
mov
out
out
push
mov
mov
xor
test
push
jae
mov
dec
sbb
and
lahf
pop
adc
loope
jge
int3
std
(bad)
xchg
jb
inc
imul
adc
jno
sub
or
enter
sbb
ret
ss
push
(bad)
jmp
pop
mov
sbb
jmp
ss
mov
or
or
icebp
rcl
sahf
jne
or
das
pop
jmp
out
sub
and
cmp
push
pop
fdivrp
cdq
aam
xchg
push
sub
rol
add
int3
sub
cmps
cmp
daa
cmp
sbb
int3
inc
add
mov
les
cmp
or
shl
into
jb
adc
mov
inc
lods
adc
jecxz
add
enter
mov
jecxz
stc
sub
scas
adc
loopne
sub
xchg
jae
xchg
dec
add
cmps
push
mov
cs
popw
dec
(bad)
xor
nop
sub
out
inc
jae
lods
loope
push
or
add
call
int3
aas
rcl
das
fdivr
aam
out
pop
lock
push
nop
adc
hlt
packuswb
cdq
dec
movhps
aam
dec
pusha
stc
loope
mov
call
pop
mov
sub
mov
ja
aas
mov
cmp
mov
std
in
or
jmp
test
sub
test
(bad)
sahf
and
js
jle
pusha
sbb
pop
push
sar
sub
xchg
adc
pop
pop
aam
lds
push
addr16
div
xor
lea
dec
mov
fdivr
push
mov
adc
jb
and
sbb
pop
retf
inc
pop
xlat
int3
sub
retf
cli
add
and
leave
in
imul
add
sub
and
sbb
enter
cmp
pop
xchg
push
aam
addr16
(bad)
jl
retf
mov
dec
adc
pop
add
lahf
outs
dec
and
xlat
mov
push
cmp
dec
xor
or
aas
fidivr
mov
(bad)
repz
push
ins
int3
add
adc
bound
pop
ror
add
push
je
jecxz
cmp
cmp
pop
add
push
hlt
xchg
pop
mul
push
outs
jmp
xor
or
sbb
fcomi
pushf
adc
or
in
and
push
pop
jp
clc
jl
xchg
cs
ins
adc
icebp
add
rcr
sub
arpl
xor
in
mov
pop
adc
icebp
add
clc
xchg
push
data16
jg
sub
jne
test
sub
cmp
sub
xor
or
test
out
xchg
dec
adc
int3
xchg
or
aaa
icebp
sub
dec
(bad)
push
mov
dec
loopne
jnp
ss
fldenv
pop
add
add
xchg
ins
inc
sub
cmp
cmp
nop
pop
arpl
mov
mov
es
pop
sub
push
and
cmp
call
adc
push
addr16
xchg
push
adc
jmp
aam
icebp
sbb
stc
cmp
pop
rcr
fidiv
jnp
imul
aaa
pop
cmp
(bad)
jge
sar
ror
leave
adc
xchg
adc
je
pop
mov
pop
sbb
or
pop
sub
sbb
add
ins
inc
push
std
je
jl
jmp
int3
cmp
call
sbb
push
or
cmc
fidivr
jl
int3
movs
sub
in
dec
stos
fistp
adc
rcr
xchg
fwait
repz
cmp
xchg
xchg
sub
test
clc
pop
std
push
inc
add
push
jmp
ret
sbb
mov
xor
sahf
or
call
retf
push
mov
push
pusha
ror
cmp
xchg
fmul
je
imul
xor
popa
pop
(bad)
sbb
in
test
xor
or
lods
popa
mov
test
mov
shl
dec
fwait
retf
sub
or
adc
fcomip
pop
and
push
cld
jl
stc
xor
pop
sbb
in
sub
or
jmp
push
lds
and
push
or
jne
dec
sub
hlt
sbb
imul
cld
xchg
fadd
cs
adc
jb
push
pop
adc
fidivr
push
inc
xchg
call
repnz
outs
jl
sbb
stos
and
hlt
imul
or
push
scas
jae
cld
outs
cmp
sbb
push
mov
inc
xchg
inc
inc
inc
clc
ja
mov
aas
jno
jmp
sbb
icebp
xchg
cmps
xor
mov
jae
ret
adc
pop
cdq
or
sbb
sub
xchg
jge
ror
outs
ds
js
test
sbb
adc
push
addr16
push
pop
sbb
adc
cmp
mov
std
add
jb
push
inc
call
icebp
mov
cmc
fisttp
aas
outs
mov
bound
cld
leave
cwde
xor
fsubr
xchg
int3
inc
out
mov
out
rcr
jno
mov
add
idiv
sub
jbe
pop
fdiv
pop
pop
stos
sub
mov
xchg
inc
push
mov
inc
push
sbb
leave
cmp
push
cmps
mov
in
stos
js
sub
dec
pop
in
in
cwde
pop
xchg
xor
loope
scas
pop
pop
push
test
or
es
push
repnz
pop
inc
jmp
cmp
xor
dec
stos
sbb
xchg
in
and
bswap
dec
fadd
jbe
xlat
or
push
sbb
mov
and
xchg
fwait
rcl
push
out
rcr
push
aaa
les
sbb
std
icebp
sbb
in
div
sti
sbb
mov
dec
in
sbb
adc
outs
xor
test
sub
jecxz
stos
test
fcmovnbe
mov
or
add
ror
push
movs
icebp
sbb
cmp
dec
outs
rcr
inc
fsub
sub
mov
cs
retf
cmp
les
jl
cmps
inc
push
adc
and
pushf
adc
cmp
jo
adc
xchg
retf
fs
jmp
out
mov
and
bound
cld
aaa
add
sti
loop
and
out
aas
add
lahf
inc
mov
add
inc
jne
cwde
in
sub
mov
daa
and
lods
xor
sub
sar
sbb
adc
push
jmp
arpl
push
inc
test
sbb
fwait
hlt
std
arpl
sub
(bad)
js
xor
add
fdivr
mov
jnp
and
call
inc
sub
mov
lods
dec
inc
ror
or
mov
ins
mov
mov
cmp
pop
nop
push
add
or
pop
sbb
imul
xchg
pop
xchg
and
imul
js
int3
aas
cmp
retf
aas
cmp
retf
aas
cmp
and
sbb
fst
fisubr
cld
sub
out
jo
pop
jl
xchg
mov
test
out
or
add
sub
pusha
cmp
adc
(bad)
sbb
jecxz
inc
cwde
cmp
(bad)
mov
in
mov
jp
add
dec
sahf
cmp
inc
jle
adc
push
inc
mov
sbb
push
hlt
cmp
sub
cmp
mov
mul
cwde
loope
or
sub
mov
outs
dec
ja
add
mov
test
mov
enter
jo
add
add
push
add
adc
imul
sub
xor
lods
jmp
xor
test
mov
push
add
ins
pop
or
adc
dec
pop
sbb
pusha
inc
mov
push
(bad)
stc
or
push
retf
push
pop
je
and
inc
dec
push
in
pop
and
icebp
retf
imul
loop
sbb
mov
cmp
call
cmp
cmps
(bad)
lds
and
aaa
jmp
ret
push
push
daa
sub
adc
mov
jae
mov
pop
sbb
xchg
mov
in
and
mov
int3
aaa
(bad)
lea
lea
mov
xlat
dec
mov
icebp
inc
jb
add
cmp
mov
sub
xchg
in
pop
sbb
std
add
pop
mov
adc
push
pop
int3
dec
adc
ss
arpl
(bad)
sti
mov
int3
adc
xor
sub
and
cld
sbb
enter
push
jmp
cld
pop
imul
push
push
(bad)
leave
sti
sub
les
xchg
dec
xchg
out
movs
cmp
mov
retf
lock
stc
mov
ss
xor
movs
in
sbb
xchg
aas
cdq
imul
int3
push
mov
cdq
and
xchg
inc
jl
sub
outs
jl
test
iret
or
sbb
push
mov
add
mov
cmp
sti
xor
push
lods
and
(bad)
icebp
call
xor
xor
jmp
cld
rcl
adc
dec
xor
rcl
push
ja
sbb
adc
cmps
xchg
add
pop
jge
fcomp
es
es
js
les
mov
pop
jb
int3
add
jp
pop
or
jns
jmp
call
cmc
mov
stos
imul
stos
icebp
adc
push
push
jno
add
call
shl
xor
or
frstor
xchg
adc
push
test
enter
add
fldcw
mov
cdq
jmp
xor
hlt
idiv
or
jecxz
in
add
dec
hlt
and
imul
xchg
(bad)
pop
add
add
cmp
data16
in
sbb
(bad)
repz
loopne
ffreep
mov
sbb
push
inc
xor
aad
cmp
push
sbb
std
(bad)
sahf
(bad)
cmp
cmps
dec
or
imul
pop
jns
xchg
add
sahf
ss
and
sub
adc
dec
pop
(bad)
xchg
movs
inc
call
sub
rcl
pop
cmp
adc
xchg
in
xchg
ins
cwde
pop
ins
sbb
push
push
xchg
xchg
neg
fidiv
mov
(bad)
jg
lea
jl
lods
push
sbb
inc
jge
xor
pop
push
inc
(bad)
xor
xor
push
xor
pusha
pop
cdq
pop
xchg
sbb
pop
mov
outs
pusha
dec
cmp
mov
rol
(bad)
das
fistp
pop
mov
dec
or
or
pop
xor
or
test
cmp
nop
push
mov
out
rcl
push
inc
xchg
nop
pop
pop
sbb
add
sbb
pop
xor
mov
add
icebp
in
xor
cwde
jmp
sub
cmps
out
mov
fwait
xchg
clc
xor
adc
xchg
xchg
adc
sbb
xor
xor
loope
sub
mov
aad
sahf
icebp
add
jmp
or
icebp
sbb
xchg
pop
push
and
push
pusha
adc
iret
inc
int3
ret
cmp
stos
dec
fldcw
sub
addr16
pushf
sbb
cld
mov
popa
push
sub
cdq
xchg
jo
pop
sbb
ret
inc
push
pop
and
jo
inc
push
retf
imul
daa
mov
imul
sti
add
clc
mov
pop
mov
xchg
out
sub
push
add
loopne
mov
aaa
imul
gs
int3
in
adc
mov
xchg
xchg
and
or
add
mov
dec
je
test
mov
lds
push
lods
pop
push
adc
mov
imul
aas
loopne
inc
push
(bad)
cld
cmps
cmp
and
xor
sar
aam
shl
sbb
pop
call
(bad)
cld
(bad)
sbb
push
xor
out
mov
aaa
pop
mov
sar
sub
imul
fxch
mov
pop
or
(bad)
sub
sbb
pop
in
sbb
int3
fild
sub
sbb
sub
adc
xchg
inc
push
sbb
mov
push
cmc
cld
adc
jle
sbb
cmp
fwait
mov
(bad)
pop
add
and
pop
cmp
imul
imul
neg
push
in
push
fwait
stos
add
or
ds
shr
retf
retf
mov
inc
pop
sub
jmp
jno
and
or
icebp
xor
dec
dec
sub
es
adc
xchg
xchg
nop
and
pop
and
(bad)
jg
sub
repnz
mov
ret
mov
in
xchg
fcmovbe
sbb
lods
sub
dec
loope
pushf
push
imul
(bad)
in
pop
fmul
xchg
and
mov
push
addr16
sub
sub
cmp
idiv
adc
shr
mov
xchg
sub
mov
fcom
addr16
xchg
ficomp
int3
or
lea
sbb
mov
popa
add
mov
cmp
clc
push
cwde
pop
retf
mov
sbb
inc
pop
pop
rcl
or
add
cmp
cdq
dec
hlt
sbb
mov
shl
popf
retf
dec
push
in
cs
sub
icebp
jb
push
in
pop
adc
dec
xor
out
int3
xchg
jp
adc
xchg
shl
ins
mov
jge
loope
or
imul
hlt
push
call
ss
dec
int3
cmp
push
pop
mov
pop
loop
test
mov
dec
inc
dec
lahf
add
mov
sbb
jbe
call
adc
mov
and
test
dec
add
cwde
sbb
adc
add
adc
mov
cld
pop
pop
add
ja
push
pop
adc
adc
int3
add
fwait
adc
setb
add
or
sub
pop
retf
fs
stos
stos
inc
sbb
cmp
mov
shr
div
adc
dec
xor
pop
fst
mov
scas
add
or
ret
or
ficom
movs
paddb
mov
or
push
int3
loopne
inc
fxch
pop
nop
pop
(bad)
push
mov
jb
int3
dec
mov
nop
aas
test
or
mov
cs
test
or
aam
inc
cmp
inc
lods
add
jmp
cs
movs
push
push
lods
pop
test
ss
xor
add
adc
pop
or
fsub
push
repnz
out
pop
nop
aad
adc
js
(bad)
les
pop
aam
cmps
sbb
and
call
arpl
pushf
mov
dec
and
push
inc
std
push
jp
in
push
cmp
ins
daa
inc
add
jle
cmp
mov
jne
loopne
adc
in
cdq
and
loope
dec
or
add
sub
mov
popf
int
adc
in
mov
pop
mov
cmp
dec
jne
lods
popa
shr
xchg
sbb
cdq
sub
push
adc
and
dec
ins
sbb
das
test
cmp
iret
test
int
adc
popf
out
mov
test
mov
or
sub
or
jmp
cmp
ror
add
adc
jmp
push
fild
inc
fldcw
dec
jo
in
mov
sbb
nop
push
pop
cmp
cdq
data16
int3
pop
sbb
cwde
inc
or
in
in
adc
mov
cmp
(bad)
pop
jo
pop
dec
cs
or
rcl
pop
mov
cmp
gs
int
aas
jg
call
fcomp
scas
mov
sbb
jecxz
ds
jmp
cld
int3
xchg
or
sub
pop
cmps
inc
jl
mov
test
or
je
cmp
jecxz
jle
jle
(bad)
jno
ja
push
inc
fisttp
int3
ins
nop
xor
inc
pop
loopne
pop
int3
sub
xchg
aad
adc
inc
cdq
xchg
sub
xor
or
(bad)
inc
xchg
pop
call
ins
cmp
adc
ja
dec
cmp
xor
cwde
lahf
ins
xchg
xor
and
push
push
pop
repz
add
and
push
retf
mov
cli
push
xchg
call
int
sbb
or
in
pop
ds
jecxz
mov
lods
pop
inc
and
adc
sub
dec
fidivr
push
dec
push
inc
int3
std
and
pushf
or
imul
sar
add
jns
fs
sti
mov
pop
push
push
adc
nop
push
dec
pop
pop
sbb
cs
stc
cwde
adc
push
mov
push
cmp
fs
pop
int3
test
cmp
stos
and
adc
mov
cdq
sub
mov
pop
push
daa
cmp
inc
jmp
or
fs
mov
nop
jp
xchg
sbb
rcl
sbb
jb
sub
popa
mov
jmp
stos
jmp
pop
test
jg
jmp
dec
add
aaa
pop
cmps
sub
dec
test
sahf
and
rcr
sub
inc
iret
pop
cmp
js
ja
dec
cmp
xor
pop
ins
sub
sub
and
sbb
nop
pop
das
cmp
xor
jae
pop
aaa
ror
or
and
xchg
dec
retf
push
xor
mov
ds
sub
push
shr
xchg
push
or
jl
or
sbb
loop
dec
and
gs
or
push
packuswb
push
mov
popa
sub
dec
sbb
dec
aad
fwait
sub
xlat
push
mov
sub
in
xor
or
jns
inc
jb
rcr
jmp
sahf
cmp
jl
ds
inc
jp
aas
jle
test
pop
jmp
pushf
add
and
inc
pop
adc
cmp
sbb
inc
arpl
repz
push
in
mov
repnz
sbb
sbb
add
test
dec
mov
sub
or
rdpmc
or
sbb
cmp
(bad)
ins
scas
lods
inc
pop
cmp
ja
or
lods
dec
and
rdpmc
mov
push
(bad)
fstp
popf
cmps
test
and
(bad)
pop
xor
int3
inc
aaa
push
push
push
out
mov
sub
dec
xchg
cwde
pop
sub
xchg
test
pop
addr16
fdiv
jne
sub
js
pop
ja
adc
jp
lds
push
popf
mov
push
pop
xchg
xor
sub
or
cwde
xor
and
pop
sub
pushf
sbb
in
int3
cmp
xchg
cwde
mov
shl
cmp
jp
push
cmp
cmps
and
mov
sti
out
xlat
dec
mov
xchg
adc
cmp
dec
repz
cmp
addr16
in
fs
sbb
sbb
pop
xchg
imul
cmp
pop
sub
dec
pop
sar
adc
or
data16
add
cmp
xchg
inc
push
and
addr16
xor
xor
sub
adc
xor
imul
mov
adc
mov
mov
shr
xor
out
or
sti
out
push
sub
cmp
dec
mov
sbb
xlat
inc
pop
mov
push
mov
adc
hlt
sub
pop
arpl
aam
push
(bad)
pop
push
and
mov
or
retf
je
fadd
push
mov
or
add
inc
push
mov
cmp
jne
push
inc
aas
mov
bound
mov
mov
cmp
stc
sub
seto
adc
mov
rol
ins
lahf
ins
adc
std
jge
or
lods
pushf
add
add
lea
lea
adc
test
shl
jp
jecxz
cmp
jmp
push
int3
pop
or
call
lods
push
aad
shl
add
xchg
adc
popf
mov
push
stos
cld
dec
mov
xor
test
test
mov
push
xor
push
imul
sbb
xchg
(bad)
iret
mov
mov
pusha
retfw
add
pusha
in
jp
or
dec
jb
cmp
xchg
lock
xor
and
in
sbb
stos
int3
(bad)
jae
inc
aaa
dec
sub
int3
dec
ins
pop
dec
shl
push
add
adc
cmp
test
and
mov
mov
jge
or
push
mov
aas
adc
mov
jge
xor
pop
cld
or
mov
or
and
sar
mov
dec
call
icebp
aaa
push
inc
sub
lock
fstp
cmc
in
mov
mov
cmp
xor
mov
arpl
int3
ror
sbb
push
push
xchg
lods
out
dec
icebp
inc
fs
ins
adc
neg
inc
xchg
ja
repz
adc
or
cli
mov
setp
sbb
or
adc
xchg
add
int3
or
test
aad
inc
mov
jp
stos
not
xchg
fisub
sbb
xchg
inc
jne
or
sti
das
push
(bad)
and
out
add
jge
sbb
add
cwde
push
or
pop
pop
shl
xor
lods
jmp
aam
shl
cs
das
jmp
cmp
test
cmc
mov
sbb
cld
in
inc
imul
mov
aas
xchg
pop
adc
fisttp
add
(bad)
imul
cmp
aaa
push
cwde
push
and
push
stc
scas
pop
mov
mov
mov
sub
popa
aaa
pop
adc
push
jge
sbb
(bad)
xchg
mov
addr16
stc
shl
xchg
sti
sbb
cmp
div
hlt
adc
mov
inc
add
sti
mov
pop
js
test
add
push
xchg
ret
(bad)
icebp
or
mov
out
mov
jmp
pop
pop
adc
lods
xchg
lods
or
cmps
push
or
dec
rcl
or
push
(bad)
xchg
and
inc
pushf
add
add
sbb
ja
mov
adc
add
rcr
enter
add
shr
xor
lock
jg
jp
fcomp
aam
cmp
xchg
in
jmp
lods
sub
xor
int3
sahf
pop
call
or
aaa
lods
sub
repnz
pop
int3
jne
movs
cdq
inc
leave
lahf
xchg
(bad)
fadd
test
(bad)
mov
nop
adc
mov
push
mov
sbb
and
mov
inc
cmc
leave
(bad)
push
xchg
jmp
inc
ja
cmp
daa
call
ins
fnstcw
sahf
hlt
xchg
pop
xor
retf
stos
xchg
popf
push
outs
or
pop
in
mov
fcom
int3
or
outs
outs
dec
dec
cdq
mov
pop
or
pop
cmp
nop
rcr
addr16
push
mov
cmps
xor
push
loopne
jb
sub
in
daa
adc
inc
jmp
jae
push
mov
mov
mov
xchg
pop
jmp
add
(bad)
inc
pop
xchg
mov
(bad)
movs
add
std
ret
mov
adc
imul
cmp
sahf
inc
cli
dec
stos
push
ss
pop
out
cmp
xchg
xchg
and
(bad)
into
and
cmps
sub
sub
adc
pop
or
repz
lea
add
jmp
(bad)
jecxz
fidiv
sub
ins
xchg
loope
xor
sbb
ins
dec
mov
push
or
aad
pop
sub
daa
(bad)
sub
mul
jne
jnp
mov
pop
pop
call
hlt
fnstcw
cmp
loope
jmp
xchg
inc
mov
int3
mov
pop
fdivr
pop
mov
pop
mov
add
out
test
sbb
mov
mov
jae
xchg
xor
jo
add
sbb
pop
add
inc
xor
mov
pop
sub
xor
or
pop
or
push
and
add
xor
(bad)
je
xchg
push
xor
icebp
sub
in
jge
jmp
xchg
push
adc
(bad)
push
repnz
or
fild
lea
sbb
or
out
mov
adc
jno
mov
pop
lods
add
jge
mov
dec
pop
imul
imul
pusha
pop
mov
cmp
push
idiv
movs
stos
push
adc
xchg
stos
push
dec
mov
cmps
add
mov
xlat
push
int
cs
clc
mov
xor
cdq
jle
jbe
enter
xor
clc
(bad)
icebp
xlat
ins
mov
jp
pop
stc
cmp
addr16
sbb
ss
adc
ds
jae
jnp
jnp
inc
jmp
js
xor
add
rcr
mov
clc
cs
retf
repz
fld
fst
(bad)
ins
retf
add
sbb
data16
or
jno
and
sbb
mov
ds
das
inc
fidiv
lahf
cwde
push
sbb
ins
fwait
or
pop
mov
lods
sub
je
neg
xchg
(bad)
jle
mov
movs
or
pop
in
rol
pop
push
xchg
in
mov
sub
jmp
sti
push
pop
les
adc
retf
or
jmp
xor
cmp
inc
out
xlat
cdq
jnp
or
adc
pop
or
pop
scas
stc
dec
and
pop
addr16
mov
imul
std
mov
test
(bad)
daa
ins
xor
mov
neg
mov
xor
loope
xor
loop
adc
xor
(bad)
mov
push
movs
or
outs
push
sbb
sahf
mov
jg
enter
mov
add
push
pop
pop
iret
mov
add
pop
push
cmp
mov
pop
rcl
int3
pop
out
mov
mov
and
imul
or
sbb
mov
rol
js
fcmovu
sbb
in
mov
aaa
stc
adc
out
cmp
push
pop
or
mov
adc
jb
pop
inc
fstp
(bad)
scas
pop
fdiv
test
push
jo
pop
test
fwait
ror
into
out
mov
frndint
push
xchg
xchg
xor
nop
cmp
pop
pop
sub
lods
cld
ja
jmp
clc
test
and
and
jge
pop
sbb
aaa
inc
or
cmp
sub
pop
das
cmp
pop
xor
xchg
cdq
push
out
add
add
pop
jne
or
xor
sbb
int3
push
aaa
rol
xlat
loop
cmp
js
out
clc
mov
xchg
out
inc
(bad)
cmp
and
add
dec
enter
pop
or
pop
or
cld
aaa
in
xor
retf
(bad)
inc
cmp
pop
pushf
sub
icebp
lds
dec
push
lods
adc
out
retf
sub
inc
push
icebp
adc
xor
xor
adc
dec
sub
pop
add
ins
push
dec
jnp
mov
add
pop
dec
mov
leave
adc
test
xor
call
adc
(bad)
pop
hlt
jmp
xor
jne
loopne
inc
ja
out
imul
dec
add
pop
push
fwait
adc
and
fistp
hlt
add
pop
inc
repnz
or
outs
push
xor
call
mov
jmp
cdq
push
adc
pop
adc
adc
push
push
add
ins
icebp
stc
aad
push
mov
sbb
or
into
sbb
out
push
mov
dec
push
in
jl
sbb
mov
xchg
mov
mov
in
cld
jmp
jnp
push
xchg
shr
mov
std
movs
jl
int3
pop
test
(bad)
(bad)
sub
aam
les
cld
sub
loope
aam
data16
mov
sub
push
dec
xor
push
mov
data16
sub
adc
xchg
mov
ins
mov
xor
pop
adc
sbb
xchg
and
xor
push
or
dec
xor
ins
push
nop
mov
fiadd
aaa
out
inc
xchg
lahf
and
push
div
xchg
xchg
je
or
in
outs
cld
fdiv
icebp
outs
loope
sub
cmp
cmp
sub
jge
cmp
push
sbb
jle
and
xchg
add
cmp
mov
inc
mov
adc
xchg
cdq
and
mov
pop
mov
pop
out
jle
mov
pop
loop
adc
cdq
xchg
mov
adc
icebp
and
add
mov
cmp
pop
les
addr16
or
jg
cmp
adc
push
cmp
push
mov
les
cwde
sbb
aas
or
adc
pop
inc
out
loopne
xchg
test
sbb
jg
pop
xchg
mov
cld
adc
sahf
pop
call
lods
fmul
aas
daa
xchg
pop
imul
out
xchg
daa
lahf
aam
mov
or
stc
and
adc
xchg
int3
inc
fcmovnbe
or
xlat
mov
hlt
push
lods
lock
ins
rol
mov
clc
xor
mov
xchg
push
fild
loop
cmp
add
sub
(bad)
or
data16
mov
xchg
scas
xchg
aam
addr16
jae
push
jno
jmp
ss
and
and
inc
(bad)
xor
sub
fidiv
in
fs
mov
dec
pusha
mov
cdq
(bad)
push
call
adc
xchg
(bad)
retf
movs
imul
mov
xor
jmp
add
inc
cmps
and
stos
sbb
sbb
dec
cmp
adc
or
je
sub
(bad)
xchg
in
xchg
sbb
fldenv
popf
call
std
jg
sub
cmp
xchg
mov
or
xchg
stos
(bad)
pop
in
les
mov
xchg
or
fucomip
pop
lods
aaa
fucomi
add
pop
in
xchg
cs
sbb
es
sti
pushf
fisubr
push
push
in
jo
sbb
ins
adc
ins
mov
jo
add
sbb
in
aam
std
xlat
jb
adc
inc
mov
dec
push
cwde
sbb
xchg
sbb
jns
rep
sbb
xchg
imul
inc
out
cmp
rcr
push
cmp
pop
js
cmc
or
and
adc
out
jl
icebp
sbb
xchg
repz
in
or
sub
add
or
daa
fs
out
dec
stos
js
lods
mov
pop
retf
mov
test
sbb
cwde
lahf
js
push
dec
push
ret
lds
and
push
repnz
jmp
pop
jmp
or
sbb
pop
push
shl
mov
std
cwde
es
(bad)
jg
shl
mov
in
xchg
xchg
mov
aaa
lods
(bad)
bound
stos
retf
cmp
and
inc
push
stos
or
lahf
repz
add
addr16
sbb
xchg
jp
icebp
push
sbb
loope
mov
xchg
sub
or
shl
pop
mov
das
sbb
mov
pop
fmul
out
pop
in
pop
lock
xchg
mov
xchg
push
cwde
sub
jle
pop
sub
xchg
paddq
in
movs
xor
pop
stc
repnz
aad
lahf
mov
pusha
les
push
(bad)
into
sub
aam
pop
add
(bad)
lea
sub
xchg
ficom
mov
pop
push
mov
cmps
fsub
mov
ins
push
lods
add
xchg
in
mov
add
mov
mov
mov
xor
call
in
pop
mov
jmp
cmp
retf
pop
dec
cwde
lds
pop
shl
out
mov
mov
add
sub
or
sahf
inc
sbb
xchg
mov
jb
jmp
ins
mov
call
fs
out
xchg
in
loope
jb
sbb
sbb
dec
or
lock
jbe
cmp
add
xchg
push
adc
inc
xchg
dec
sub
into
or
loop
add
push
hlt
pop
mov
in
adc
or
scas
movs
inc
rcr
fwait
push
pop
push
xor
leave
imul
cld
cmovns
retf
int
and
pop
dec
lock
xchg
cmp
sbb
xchg
jle
inc
mov
adc
push
int3
xchg
jmp
repnz
jns
mov
push
adc
push
dec
nop
sub
mov
sbb
or
mov
or
cmp
sbb
dec
or
daa
in
cdq
int3
cwde
cli
(bad)
sbb
xchg
jg
(bad)
push
adc
xchg
push
stc
push
arpl
and
sbb
inc
call
es
or
add
pop
ds
cld
pop
ss
ss
repz
aad
dec
retf
in
pop
or
jg
lods
cli
dec
sub
icebp
icebp
push
enter
dec
ds
call
or
(bad)
stos
imul
in
test
ja
inc
jmp
pop
mov
xor
retf
xchg
cmp
push
inc
push
mov
add
out
fs
push
xor
dec
push
icebp
sbb
push
dec
add
push
sub
cmp
and
xchg
sbb
imul
push
mov
jmp
ret
cmp
inc
cli
pop
adc
imul
pop
mov
stc
retf
xchg
add
imul
js
(bad)
cmps
fistp
push
cs
add
cdq
cmp
test
add
sub
pop
or
and
xchg
cmp
jae
mov
(bad)
mov
ins
push
push
cmp
lahf
movs
xor
pop
xor
pop
mov
out
dec
mov
push
(bad)
xchg
cmp
xchg
push
mov
ficomp
adc
icebp
cs
call
icebp
jmp
and
cmp
push
sbb
jmp
cld
mov
out
aaa
adc
fcomp
xor
jb
icebp
push
adc
and
das
sbb
js
shr
frstor
push
iret
lods
xor
and
push
adc
stos
cmps
fcomp
sub
cmc
inc
cmp
and
jmp
push
dec
int3
xchg
out
pop
cmp
pop
lods
xor
push
sbb
xlat
pop
jl
mov
pop
xor
pop
fdivr
sahf
xchg
out
data16
jbe
retf
aas
jo
xor
test
enter
xchg
pop
and
in
int3
and
pop
xor
pop
je
xchg
push
mov
inc
dec
or
dec
mov
pop
inc
clc
xor
inc
cmps
push
call
xchg
push
lea
sub
or
jbe
and
sub
push
or
mov
xchg
fwait
inc
fidivr
adc
loopne
cmp
xchg
in
in
xor
inc
into
xor
icebp
or
xchg
xchg
push
adc
pop
popa
in
pop
outs
ret
ins
jmp
or
cmp
adc
inc
jle
repz
jb
imul
aas
fld
and
in
xchg
mov
fst
and
add
ret
mov
cmp
je
add
call
jns
jae
ror
jne
xor
and
mov
inc
hlt
stos
mov
stc
mov
xor
fwait
in
sbb
or
sub
loope
sub
pop
pop
cmp
adc
cmc
clc
sub
inc
pop
(bad)
das
cmp
rsm
lea
pop
add
push
mov
imul
add
imul
inc
push
adc
mov
sbb
xlat
mov
add
mov
sbb
pop
xchg
and
pop
mov
pop
or
adc
cmp
fsub
loope
and
jle
stc
xor
xor
add
jl
xor
and
xlat
jecxz
xlat
mov
pushf
lock
cmp
lahf
jl
lahf
push
push
aaa
jb
jno
and
pop
push
cwde
inc
add
cmps
inc
out
cmps
(bad)
adc
sar
inc
inc
pop
in
lock
(bad)
fnsave
test
retf
in
arpl
jmp
gs
jmp
add
adc
pop
inc
and
xchg
in
jmp
inc
or
jne
gs
adc
cmp
cmp
cmp
arpl
jge
fsub
sbb
aad
movntps
xchg
retf
mov
ins
ins
add
call
push
sbb
push
or
cmp
int
neg
mov
in
push
ja
frstor
push
sahf
add
(bad)
push
sbb
jecxz
stos
xor
dec
dec
mov
or
pop
xor
jge
cmps
lods
js
leave
push
ret
imul
lods
in
push
jmp
dec
and
or
std
fist
cmps
add
clc
adc
and
std
sahf
sbb
cdq
xchg
add
xor
sbb
int3
push
mov
cmp
retf
sbb
mov
movs
xor
inc
shl
loopne
js
cmp
sbb
aaa
push
imul
inc
or
lods
mov
add
nop/reserved
xor
inc
(bad)
in
jno
dec
push
inc
push
mov
and
mov
push
out
imul
push
call
pop
pop
daa
shl
xor
inc
jg
inc
imul
push
add
inc
int3
loopne
shl
pop
push
loope
dec
cld
inc
std
outs
aam
sbb
int3
inc
leave
mov
sbb
dec
int3
fwait
popf
or
mov
ss
iret
dec
dec
mov
pop
pop
fsubr
or
ror
xor
pop
mov
(bad)
sahf
out
fidivr
mov
enter
in
mov
sar
mov
cs
push
pop
push
fidiv
fld1
and
es
pop
mov
or
push
scas
cmp
sbb
add
outs
in
stos
pcmpgtb
mov
test
lods
push
push
hlt
jl
rcl
jge
xchg
or
jne
ins
int3
stos
int
or
push
inc
daa
fsubr
cmp
or
out
cwde
jge
les
inc
push
xchg
dec
jmp
sbb
out
retf
lea
adc
xor
mov
out
jb
inc
lods
imul
loop
cmp
xchg
and
jb
jmp
pop
push
xchg
sub
adc
push
pusha
gs
pop
jp
jp
in
sbb
add
stos
sbb
lock
cdq
pop
test
out
sbb
int3
xor
push
sub
adc
cli
int3
scas
out
sbb
push
cmp
fsub
mov
push
into
push
addr16
dec
push
xchg
xor
retf
sub
in
xor
mov
or
dec
jmp
(bad)
push
test
jg
cmp
pop
mov
dec
pop
cmp
or
pop
rcl
fwait
add
rcr
aam
pop
lea
imul
sbb
leave
add
inc
and
jg
push
into
pop
mov
adc
jl
lea
push
sub
and
push
adc
cdq
neg
sbb
and
push
sar
out
add
movlps
xchg
add
dec
inc
into
mov
dec
js
inc
shl
cmp
hlt
movs
xor
push
jp
ror
icebp
mov
int3
dec
adc
jne
cmp
dec
in
add
cmp
enter
pop
lock
xchg
or
sub
pop
cld
and
dec
std
mov
fist
sbb
cmp
push
cmp
or
dec
push
adc
jbe
cmp
push
or
dec
push
and
loop
test
xlat
adc
sti
ror
cli
hlt
adc
inc
neg
xor
or
cmp
xor
in
sbb
aaa
dec
mov
mov
aad
jle
mov
add
cmp
push
(bad)
push
push
and
je
add
nop
xor
call
lods
or
sub
imul
dec
jg
icebp
and
push
les
adc
cli
psrad
ds
(bad)
xchg
(bad)
or
shr
outs
and
push
jle
movs
ficom
mov
inc
ds
inc
jae
(bad)
pop
sbb
popf
loope
daa
dec
cmps
or
jmp
xchg
or
push
hlt
cmp
test
push
and
dec
add
(bad)
adc
pop
cmp
mov
add
mov
xor
mov
sbb
cmp
sbb
adc
push
pusha
jg
icebp
push
xchg
adc
je
fs
outs
add
dec
cwde
sbb
mov
adc
inc
mov
aas
jp
push
or
shr
cld
pop
cdq
(bad)
xor
sub
xor
pop
sbb
dec
mov
xchg
rcr
lock
in
stos
add
add
dec
sbb
and
pusha
mov
call
push
mov
gs
pop
xchg
push
sbb
xchg
hlt
xchg
pop
jb
out
pop
call
retf
fsubp
mov
mov
push
pop
dec
int3
imul
lods
arpl
in
cmps
mov
pop
push
icebp
jmp
(bad)
jl
sbb
add
cmp
lods
push
adc
adc
sbb
lods
jecxz
int3
out
push
shl
mov
test
push
idiv
cmps
fwait
cmps
es
imul
ins
add
jl
sub
or
shr
sbb
or
mov
xchg
out
push
xchg
jne
jno
fcomp
pop
int3
add
ret
rcl
sub
imul
adc
sub
pop
addr16
pop
jbe
sti
or
mov
xchg
or
js
jp
jne
fcomp
es
fs
and
aas
pop
in
mov
inc
push
pop
ja
scas
mov
xor
mov
inc
jmp
inc
inc
int3
or
aaa
mov
loop
and
mov
pop
push
xchg
pop
int3
sbb
popa
std
jmp
adc
ret
mov
push
pop
dec
inc
gs
in
jmp
les
jae
aas
and
fisttp
or
addr16
bound
test
pop
or
mov
arpl
push
xor
aaa
or
sbb
movs
push
mov
movs
sti
popa
push
add
fstp
cmc
cwde
shr
inc
loopne
mov
xchg
loope
int3
scas
bnd
mov
xchg
ficomp
and
cmp
shl
push
sbb
mov
jmp
sbb
xor
lds
adc
stos
icebp
sbb
push
pop
inc
push
ds
(bad)
xor
test
jle
cmp
push
sbb
les
xlat
sub
xlat
pop
fadd
push
retf
pop
mov
sbb
movs
ret
mul
aaa
rcl
push
cdq
test
push
sub
add
cmp
and
cmc
mov
repnz
(bad)
int3
adc
jle
sub
cmp
dec
sbb
loope
cwde
imul
and
push
test
push
in
inc
inc
push
xor
mov
push
adc
jp
cmp
stos
xchg
cmp
shl
pop
dec
jmp
call
push
mov
int3
mov
jae
sub
movs
mov
out
mov
addr16
loope
jmp
pop
inc
call
bound
jae
out
push
imul
ficomp
mov
cld
aaa
add
dec
arpl
imul
(bad)
cwde
or
push
rcr
out
dec
push
push
stos
fist
pop
sub
mov
push
mov
jge
cmp
cwde
aam
dec
mov
sub
or
int3
icebp
enter
add
push
imul
dec
pop
movs
or
sbb
pop
mov
mov
ds
xchg
push
lds
sub
mov
lods
jle
cmp
push
sbb
sti
test
jmp
enter
lods
sti
xor
push
out
daa
or
push
push
out
addr16
push
jge
mov
dec
call
call
(bad)
fnstcw
inc
jne
das
pop
fcomp
push
push
enter
inc
aad
cmp
call
xchg
dec
add
xchg
push
pop
cmp
jae
push
cmp
mov
out
xor
int3
fcmovne
xor
sti
dec
movs
movs
hlt
in
dec
les
inc
inc
repz
stos
jne
imul
add
scas
pop
sar
pop
dec
pop
repnz
imul
jecxz
inc
xor
lods
clc
mov
add
xlat
jb
sub
dec
mov
addr16
xchg
(bad)
ret
mov
sbb
jnp
xchg
jne
int
ds
gs
inc
jne
call
jmp
fiadd
nop
xchg
and
dec
cmc
test
shr
and
fadd
dec
sub
jne
inc
adc
adc
sub
adc
int
inc
xor
ss
iret
fwait
int3
dec
inc
or
xchg
jmp
mov
jno
adc
cdq
rcl
push
jecxz
xchg
ficomp
imul
ror
popf
dec
mov
retf
xor
loope
repnz
cld
adc
retf
repnz
faddp
in
imul
(bad)
ds
jno
pop
pop
xchg
or
mov
jmp
adc
sbb
and
pop
sbb
mov
cmp
mov
adc
cmc
sbb
call
xchg
call
cdq
popf
adc
inc
pop
test
xchg
xor
pop
adc
mov
pop
xchg
in
ss
pop
in
push
xor
test
xor
pop
mov
xchg
sahf
int
in
dec
leave
fimul
add
pop
mov
mov
xor
mov
inc
out
inc
in
test
push
ins
lahf
push
mov
pushf
sbb
js
xchg
lea
lods
in
(bad)
imul
outs
and
or
xlat
sbb
ja
into
mov
mov
sbb
in
mov
fmul
imul
jmp
jne
pop
fimul
inc
loopne
call
stos
test
out
daa
xchg
pop
(bad)
sbb
mov
call
push
pop
ja
xchg
adc
lds
adc
ret
popf
movs
add
add
iret
test
push
movs
dec
jle
mov
push
adc
mov
imul
aaa
inc
fs
or
fsubp
or
mov
cdq
add
pop
mov
push
mov
add
int3
xchg
fs
icebp
mov
xchg
sub
call
dec
or
sub
and
int3
push
sahf
dec
call
repz
stos
sbb
addr16
or
je
mov
in
in
int3
sub
aas
loope
ds
adc
pop
pop
sbb
sti
sub
or
push
inc
test
pop
or
dec
ja
sbb
lods
int3
mov
sub
mov
add
in
pop
(bad)
mov
jg
dec
jne
jecxz
mov
pop
sahf
ror
ret
cmp
sub
shl
dec
sbb
push
(bad)
push
mov
ret
jle
xchg
jb
outs
std
les
je
xor
xchg
int3
inc
pop
adc
xor
add
pop
popa
pushf
ins
in
dec
xchg
sahf
push
push
or
cld
daa
cmp
aaa
aad
add
and
inc
cmps
icebp
adc
mov
add
in
adc
jae
jne
loop
sar
fmul
in
and
cmp
inc
adc
xor
imul
ss
int3
push
sub
aaa
add
cmp
xor
mov
dec
cwde
dec
jecxz
mov
cmp
dec
cmps
xor
pop
scas
xor
or
fsubr
fnstcw
or
test
add
shl
jne
(bad)
jmp
xor
push
inc
adc
inc
das
and
xor
ins
ins
jl
(bad)
cmps
loopne
bound
push
xor
lods
popf
aam
add
sahf
xor
pop
xchg
in
mov
cmp
adc
lods
icebp
jbe
popf
pop
sbb
mov
mov
retf
retf
inc
movs
out
pop
repz
mov
je
xor
dec
fsubrp
fbld
enter
sbb
and
outs
cs
sub
arpl
es
js
or
cmps
pusha
loope
mov
mov
int3
pop
shr
xchg
dec
out
dec
or
fistp
push
cdq
mov
js
(bad)
mov
retf
jno
stos
loopne
or
add
inc
adc
or
sub
or
icebp
jmp
xor
leave
mov
jnp
xor
loopne
shl
add
lds
out
test
push
push
sub
adc
pop
lahf
jae
leave
xchg
sub
add
xchg
or
imul
std
loopne
cld
leave
(bad)
mov
adc
out
fimul
sbb
int3
push
jmp
jb
inc
xchg
push
lods
and
xchg
(bad)
pop
cmps
push
out
xor
imul
(bad)
push
call
sbb
aam
inc
mov
cmp
pop
icebp
add
cmp
pop
inc
sbb
push
dec
sahf
lea
xchg
call
pop
mov
mov
lea
aas
cld
ja
adc
test
mov
test
aaa
shl
sbb
inc
imul
sbb
(bad)
outs
sbb
cs
and
push
push
arpl
sub
pop
sbb
je
xor
movs
push
push
sbb
addr16
xchg
icebp
add
test
mov
cmp
pop
sbb
adc
add
icebp
inc
sbb
mov
popa
fbstp
aas
dec
aas
cs
inc
adc
jmp
fidivr
addr16
sub
ins
dec
inc
xor
aaa
xchg
pop
fisttp
pop
enter
jmp
mov
inc
ja
xor
or
cmp
test
mov
mov
push
cmp
call
mov
mov
mov
sub
fcomp
call
dec
fisubr
adc
repz
mov
adc
sub
jmp
in
mov
dec
cdq
mov
xchg
das
out
pop
or
jnp
mov
out
popf
repz
mov
adc
add
mov
arpl
in
push
lods
pop
push
add
inc
mov
pop
out
cli
mov
xor
pop
jmp
outs
adc
outs
in
or
or
jecxz
sbb
pop
sub
pop
pop
xchg
add
scas
inc
adc
sub
sub
sar
pop
ins
(bad)
xchg
adc
xchg
mov
addr16
pop
cwde
cs
mov
add
dec
fcom
mov
lahf
inc
mov
(bad)
push
pop
jb
dec
enter
lods
fwait
pop
cmc
mov
loop
daa
adc
lea
adc
neg
icebp
sbb
inc
pop
jns
retf
(bad)
fisubr
(bad)
inc
cs
icebp
cwde
add
test
aam
pop
in
sti
out
jnp
mov
sub
les
push
adc
aam
push
addr16
js
cmp
int
ds
or
inc
jmp
push
pop
jg
fs
aas
fs
xor
sbb
jge
aam
xor
ror
in
push
cdq
sub
adc
adc
test
add
fwait
xor
add
xchg
int3
or
movhps
pusha
mov
adc
add
pop
mov
sbb
popf
js
pop
adc
js
add
sbb
cwde
aam
mov
push
in
sbb
jmp
sbb
jns
mov
std
retf
dec
push
stc
jl
cmps
repz
dec
jmp
cdq
stc
pop
adc
fnsave
inc
mov
sbb
movs
mov
cld
or
and
adc
cmp
lds
add
aas
fxch
and
sbb
pusha
inc
and
sar
push
sbb
sbb
inc
test
and
xchg
jne
mov
hlt
sti
xchg
add
ds
xchg
sbb
add
sbb
cmp
add
imul
push
xchg
int
jnp
pop
rdtsc
(bad)
adc
xor
daa
mov
lahf
sub
rcl
and
call
add
inc
inc
push
or
xchg
push
ror
and
push
addr16
ficomp
cmp
or
add
in
lds
cmc
cmp
xor
inc
iret
inc
mov
cmps
mov
arpl
sbb
jbe
arpl
int3
ret
hlt
mov
jns
jmp
cld
retf
and
push
idiv
add
(bad)
sub
cmps
push
and
jbe
sub
sub
shl
xchg
sbb
(bad)
and
inc
out
push
std
aaa
xchg
push
pop
addr16
xor
and
pop
(bad)
pop
push
push
mov
push
cmp
outs
outs
enter
jge
outs
out
int
scas
fs
xchg
sbb
shr
arpl
(bad)
and
jecxz
jnp
push
dec
popa
add
mov
ret
push
lea
call
(bad)
aad
in
cmp
add
cmp
pop
push
add
sbb
push
sbb
mov
repz
cmps
adc
mov
sbb
js
cmp
sbb
mov
xchg
sub
adc
(bad)
adc
jo
icebp
(bad)
jge
shl
sub
mov
movs
(bad)
std
sub
fstp
dec
stos
and
cmp
in
adc
cdq
(bad)
enter
fsubr
data16
or
cmp
inc
icebp
in
pop
popa
(bad)
or
stos
in
and
xchg
push
fistp
cmps
mov
push
aaa
pushf
push
jmp
sub
add
mov
repz
push
mov
add
xor
jmp
nop
add
mov
dec
mov
or
inc
xchg
imul
cmp
push
push
adc
mov
sbb
sbb
int
jbe
loop
push
test
or
mov
aaa
xor
adc
sub
dec
test
adc
jmp
jecxz
add
or
sbb
(bad)
xchg
push
and
(bad)
pop
inc
mov
xchg
pop
movs
retf
pop
lds
mov
into
pusha
cmp
push
inc
ins
pop
in
jmp
add
cmp
xor
icebp
xor
es
nop
ins
mov
mov
adc
pop
jmp
cld
fcmovnb
cmp
imul
lods
push
les
xor
lods
pop
inc
dec
adc
mov
xor
mov
cmp
sub
cs
and
pusha
pop
mov
or
cmp
xor
cmp
imul
aas
cmp
adc
shl
add
mov
into
ret
fmul
pop
push
loopne
iret
add
push
lock
push
inc
gs
imul
pop
adc
(bad)
pop
sbb
test
sbb
popf
dec
cmps
ret
ror
cmp
push
push
jg
scas
cdq
pop
retf
mov
jmp
pop
xchg
sti
xchg
sbb
xor
adc
ret
ins
mov
(bad)
addr16
xchg
lods
in
adc
add
rcr
sbb
adc
repnz
fcompp
jne
orps
push
retf
xor
adc
jno
and
dec
inc
pop
lods
lock
cmp
mov
fldenv
xor
and
ins
xor
(bad)
fiadd
lods
push
lods
sub
xchg
adc
in
add
cmp
cwde
pop
add
adc
sbb
mov
add
xchg
out
fimul
xchg
jge
mov
pushf
and
cli
mov
sbb
out
aam
xchg
lock
stos
push
inc
jg
sbb
pop
mov
adc
mov
inc
das
cld
shl
push
push
xcrypt-ofb
cmps
push
out
aam
(bad)
ficom
(bad)
and
lahf
push
or
scas
rcr
dec
add
movs
clc
out
rcr
and
push
add
adc
jne
neg
es
rcr
fild
or
inc
hlt
mov
into
pop
mov
xor
lods
(bad)
ja
lock
rcl
xor
movs
fcmovnu
inc
push
push
repnz
lds
cmp
push
and
cli
mov
mov
mov
add
xor
ror
mov
daa
sahf
xchg
enter
cs
lea
sbb
or
push
sbb
repz
adc
out
mov
sub
out
mov
dec
imul
cmp
(bad)
sahf
jl
push
(bad)
sbb
leave
mov
pop
repz
sub
fstp
push
repz
(bad)
in
dec
cwde
mov
pop
fidivr
adc
sahf
jl
pop
xchg
and
xchg
popa
lds
dec
push
fidivr
pusha
repz
aas
cdq
xor
push
enter
pop
test
js
cmp
sbb
xor
test
in
js
xor
scas
in
mov
mov
cmc
js
xor
shl
push
and
imul
push
or
or
daa
sbb
or
and
dec
push
adc
xchg
pop
outs
inc
pop
mov
js
or
cmp
dec
sbb
xchg
or
push
nop
push
add
xchg
pop
ss
sub
outs
xchg
daa
sub
mov
push
adc
enter
nop
sbb
and
cmp
jecxz
xor
call
jp
cmp
fsubrp
mov
rcl
xor
aad
scas
fs
cmc
adc
shr
cmps
adc
scas
mov
cwde
icebp
sbb
scas
xchg
fld
jecxz
xchg
loopne
cmp
sbb
sbb
and
jno
mov
std
add
mov
pop
mov
mov
lods
mov
xor
cmps
push
jmp
stos
mov
movs
sbb
pop
loop
movs
retf
aam
std
rol
xchg
adc
mov
add
addr16
dec
mov
xchg
das
adc
les
outs
fidiv
mov
jns
sbb
cs
xchg
cmp
es
mov
sbb
iret
(bad)
push
out
jle
rol
clc
fbstp
loopne
call
sbb
adc
jmp
(bad)
pop
aas
mov
test
in
xlat
jb
in
inc
dec
sbb
fcomp
leave
loopne
call
adc
addr16
arpl
add
sub
aas
dec
loope
test
fsub
std
cdq
dec
cmp
ror
arpl
dec
shl
pop
hlt
fcomp
enter
out
cwde
jne
dec
loop
movs
push
aaa
ja
test
inc
mov
popf
call
pop
cdq
pop
int3
adc
ins
inc
dec
jne
leave
push
dec
push
or
into
shr
sbb
clc
push
push
fmul
je
inc
cmp
inc
xchg
sti
dec
xor
shl
lods
cmp
xchg
das
pop
cmp
jge
outs
das
cli
fxch
cs
hlt
xchg
ret
les
dec
inc
addr16
pop
clc
pop
repnz
push
push
inc
cmps
xchg
mov
cmp
or
inc
pop
scas
xchg
push
xchg
aas
shl
adc
dec
add
and
adc
and
hlt
or
push
je
aas
hlt
icebp
pop
inc
inc
int3
xlat
ret
sbb
mov
sub
pop
sbb
je
push
int3
mov
imul
mov
dec
sbb
or
adc
xchg
or
add
mov
das
mov
(bad)
ja
ret
sub
mov
jp
fadd
and
in
mov
sbb
inc
stos
adc
pop
retf
ret
sub
fdiv
aaa
pop
retf
push
int
sub
pop
and
push
pop
aas
push
jl
bswap
sub
mov
sbb
call
fdivr
aam
and
push
loopne
es
inc
pop
xchg
shr
xor
adc
in
jbe
sbb
xor
pushf
jbe
rol
cmp
daa
xchg
call
xchg
push
push
pop
pop
adc
cmp
in
sub
adc
int3
imul
inc
mov
adc
pop
icebp
je
jge
das
xchg
leave
into
mov
push
mov
icebp
inc
(bad)
mov
int3
add
push
dec
sub
add
push
mov
aad
jae
mov
sub
mov
pop
stc
push
test
pusha
mov
xor
mov
lock
xor
in
pop
cdq
push
sbb
out
test
xchg
fsubr
push
cmps
adc
inc
inc
xor
outs
sub
add
les
sbb
ss
add
sub
ror
and
sbb
jl
pop
sbb
movs
adc
sub
or
add
cdq
adc
icebp
ror
movs
mov
mov
sbb
movsx
dec
xor
nop
cmp
mov
or
add
into
adc
pop
js
cmps
int3
pusha
stc
push
inc
xchg
scas
jne
mov
jb
jne
ja
add
fadd
dec
push
sbb
pop
mov
xor
inc
int3
shl
jmp
sub
push
jmp
dec
ins
or
push
add
sbb
add
sbb
mov
inc
and
push
xchg
pop
push
add
sbb
pop
das
pop
js
pop
push
pop
jne
sbb
dec
imul
or
dec
outs
test
repnz
xchg
xor
mov
out
push
or
stos
sbb
int3
js
adc
adc
sahf
test
or
call
dec
add
lods
mov
cmp
mov
pop
sbb
ds
out
ss
loopne
add
or
loopne
stos
call
scas
sub
add
add
adc
int3
sbb
and
pusha
push
cdq
sti
sbb
or
or
in
imul
(bad)
int3
pop
xchg
loop
int3
daa
jmp
daa
ret
(bad)
xor
jne
or
sbb
dec
inc
inc
add
xor
mov
(bad)
imul
aaa
aaa
inc
mov
jp
xor
jae
fs
push
push
loop
or
push
jmp
inc
test
sub
popa
sbb
ror
push
sbb
int3
fiadd
sub
sbb
bswap
xor
movs
js
sub
inc
add
fnstcw
xchg
push
jo
aaa
mov
fcomi
ret
aam
int3
push
xor
adc
icebp
add
dec
mov
lods
jmp
sbb
test
or
sbb
or
jmp
sbb
dec
xchg
bnd
cdq
imul
ss
ret
inc
adc
mov
rol
xor
js
and
loop
in
out
or
dec
or
add
pop
in
pusha
fwait
sub
dec
xchg
fbstp
jae
in
dec
sbb
mov
rcr
nop
and
repz
fs
mov
mov
jns
cmp
push
cmp
push
sbb
pop
loopne
cli
cmp
lock
sbb
or
jmp
leave
outs
sbb
inc
scas
or
aaa
xchg
jge
and
ss
lahf
push
test
pop
(bad)
ja
sbb
mov
push
adc
jp
add
adc
loopne
stos
sbb
jmp
cmps
pop
mov
(bad)
push
mov
inc
jae
ret
pushf
enter
addr16
or
fwait
xchg
jmp
cmp
mov
imul
call
call
jae
pop
and
jecxz
fistp
ret
loopne
xchg
xchg
push
push
fcomp
sbb
pushf
shl
hlt
sub
cld
out
cdq
sub
test
das
xor
aad
xor
retf
les
pop
inc
lods
pusha
in
mov
xor
dec
movs
push
out
inc
mov
dec
inc
mov
and
add
pop
pop
ror
(bad)
push
add
dec
repz
pop
inc
pusha
lods
pop
scas
inc
aam
xchg
(bad)
inc
inc
ret
sbb
call
adc
shl
cli
int3
mov
fbld
(bad)
imul
int3
in
mov
sahf
cdq
dec
rcr
std
cmp
imul
push
sbb
push
adc
dec
sti
inc
mov
inc
enter
rcl
and
test
cmp
cmp
push
in
and
les
cmp
jl
out
pop
cmps
sahf
retf
cmps
pop
push
dec
cli
repz
xchg
out
jbe
int
push
pop
xchg
sbb
sbb
(bad)
add
jg
lds
xchg
stos
sbb
or
and
ror
and
xlat
push
mov
sub
retf
pop
push
ret
mov
pop
sub
pop
data16
xchg
adc
jg
mov
add
adc
cmp
pop
test
and
mov
xchg
push
jo
ins
cmp
adc
mov
inc
jl
push
sub
imul
xchg
outs
inc
pop
add
push
test
lock
xchg
push
mov
mov
(bad)
or
dec
repz
add
cmp
pop
outs
xchg
mov
fmul
xor
movs
inc
xchg
sti
adc
dec
pop
in
pop
cdq
jl
aad
jle
inc
sub
sub
xchg
mov
das
mov
push
adc
mov
xchg
push
or
ret
adc
pop
xchg
mov
mov
into
xchg
sub
xchg
pop
cli
pushf
imul
mov
cwde
or
xor
clc
vpshld
mov
call
mov
cmps
fstp
sub
jmp
in
enter
jns
outs
(bad)
push
test
es
dec
(bad)
outs
repz
add
xor
and
nop
or
mov
sbb
cmp
cmp
add
cmp
iret
or
cwde
xor
ficomp
cvtdq2ps
aad
jle
les
cmp
lds
in
mov
retf
ja
xchg
in
int
sbb
cwde
scas
sub
sub
or
push
inc
int
or
dec
out
or
jle
jne
mov
add
xchg
mov
xor
mov
or
sbb
cmp
or
ja
mov
cmp
sub
xchg
push
xchg
or
add
pop
loop
out
mov
mov
sbb
sar
mov
aad
mov
xlat
(bad)
push
out
dec
sbb
or
dec
icebp
push
ja
add
sbb
fs
xor
enter
je
dec
imul
mov
pop
or
loop
fmul
mov
xchg
andps
ror
add
xlat
xchg
lahf
xor
fst
fsubr
xor
cmp
or
fsubr
ror
or
mov
dec
adc
inc
xchg
mov
addr16
ja
or
push
xchg
mov
sbb
push
fcmovnb
xchg
add
(bad)
fadd
pop
adc
ins
pop
pop
add
dec
rol
in
(bad)
sbb
repz
jae
in
adc
inc
jle
sbb
stc
out
xchg
call
sbb
or
out
add
mov
in
jae
pop
pushf
jbe
adc
mov
ins
hlt
test
push
adc
pusha
pop
sub
sub
sti
inc
mov
xlat
adc
sbb
shl
push
fcom
fidiv
and
sub
test
jae
mov
or
addr16
dec
inc
dec
femms
call
pop
xor
xor
add
inc
cld
xlat
stc
xchg
xor
fistp
js
sub
aad
stos
adc
popf
or
in
xchg
fldenv
xor
loopne
cwde
daa
pop
adc
jb
push
inc
cmps
or
xchg
shl
aam
int3
and
sbb
test
add
sbb
adc
icebp
push
stos
nop
cmp
fiadd
cmp
and
add
xchg
sbb
inc
push
push
cwde
cwde
and
aam
(bad)
rol
push
sub
cmp
sub
or
push
cmp
push
mov
loopne
or
and
hlt
imul
test
push
push
xchg
cmp
(bad)
daa
push
cmp
shl
leave
xlat
sbb
xor
xchg
push
imul
push
mov
xlat
push
inc
int3
daa
dec
cmps
fisub
push
cld
leave
push
jns
add
popf
mov
pusha
jecxz
push
int
push
jl
jbe
mov
dec
lods
mov
mov
stos
loopne
push
out
add
ss
inc
fs
jecxz
xchg
add
sti
lds
push
clc
mov
inc
into
jae
dec
add
xchg
and
inc
aam
sbb
mov
in
setns
adc
add
add
sbb
or
inc
and
cdq
jae
mov
mov
adc
dec
popa
movs
cmp
xchg
or
add
sub
cli
les
adc
add
aas
cli
jno
add
adc
dec
push
sbb
pop
adc
sbb
inc
jno
in
mov
sub
or
loope
fcom
cmp
call
sbb
into
lods
stc
loopne
push
cmps
pop
adc
ds
imul
add
lahf
inc
sbb
pop
jb
xchg
xchg
lods
sub
mov
push
sbb
or
xor
call
repnz
inc
push
je
pop
xchg
fisubr
jnp
stos
push
in
cmc
or
mov
neg
imul
xchg
pop
(bad)
out
and
(bad)
jne
mov
or
out
pop
mov
cld
fiadd
adc
dec
xchg
enter
pop
hlt
imul
out
cmp
jge
jmp
xor
xchg
or
mov
xchg
aaa
push
adc
inc
test
adc
cdq
fidiv
fist
or
dec
or
jo
inc
cmp
or
add
adc
loop
rcl
xor
xchg
je
pop
inc
xchg
pop
or
sub
push
into
mov
and
mov
jg
xor
sbb
sar
xlat
scas
pop
or
sub
mov
mov
in
jno
pop
pop
mov
dec
iret
xchg
cmps
mov
mov
sbb
lods
inc
retf
adc
imul
cs
mov
leave
mov
mov
mov
inc
sub
sbb
or
mov
mov
jnp
xor
pop
pop
push
sbb
call
arpl
aaa
xchg
and
int3
mov
pop
sub
push
clc
push
pusha
and
clc
adc
mov
add
sbb
outs
std
test
int
dec
mov
xchg
push
push
call
fs
mov
mov
in
mov
xchg
icebp
aas
adc
push
ins
push
sbb
cli
adc
in
hlt
push
add
imul
add
xor
outs
xor
adc
les
dec
test
push
pop
sbb
jl
inc
fld
aad
stos
ins
push
sbb
fild
cmp
or
xchg
out
mov
fdiv
loopne
in
and
fs
movs
imul
or
push
dec
(bad)
dec
jp
adc
push
ss
mov
mov
pop
mov
cmps
mov
in
jmp
mul
or
ss
enter
jne
out
in
pop
push
xchg
movs
xchg
xor
pop
into
push
inc
inc
int3
adc
out
pop
ror
add
push
cmps
and
add
fwait
ins
mov
xor
adc
adc
repnz
jmp
xchg
dec
aaa
dec
inc
fisubr
jmp
jns
retf
call
mov
and
xor
sbb
push
xadd
mov
dec
fild
sbb
iret
mov
add
(bad)
aas
in
and
xchg
push
inc
xchg
mov
pop
mov
xchg
push
or
out
out
cmc
hlt
or
sub
push
jg
and
jecxz
add
add
int3
fsin
js
inc
lods
out
push
in
sbb
ret
icebp
sub
dec
dec
sbb
ret
retf
mov
mov
stos
packuswb
std
jmp
push
pop
in
(bad)
inc
push
and
in
in
jecxz
pop
outs
jmp
xor
sub
or
cmp
in
or
std
ret
dec
ss
push
shl
add
add
int
test
xor
adc
xor
sbb
repz
adc
adc
hlt
leave
inc
retf
inc
repz
pop
pop
out
adc
or
test
inc
int3
xchg
dec
pop
xchg
gs
dec
std
mov
pushf
mov
jecxz
outs
in
hlt
sub
sbb
pop
test
push
int3
out
mov
retf
dec
pop
lea
retf
(bad)
or
add
jecxz
out
xchg
or
int3
imul
ret
hlt
or
retf
and
stos
xchg
and
leave
or
mov
outs
ret
(bad)
scas
test
add
test
jecxz
dec
xor
stos
in
xchg
mov
xor
push
push
clc
add
mov
inc
retf
cld
push
mov
pop
sbb
push
fst
push
mov
int3
jp
xchg
cmp
sbb
fist
gs
adc
adc
rol
xchg
fld
mov
not
out
loopne
mov
mov
ins
xchg
inc
pop
jecxz
test
fcom
leave
into
xchg
push
pop
scas
mov
enter
xor
not
(bad)
sub
imul
int3
scas
jo
cmp
mov
dec
mov
lods
mov
cmp
call
push
mov
mov
mov
or
test
jp
mov
dec
or
popf
push
ss
sbb
or
mov
dec
xchg
and
push
xor
mov
xchg
add
out
sti
lds
test
and
aad
mov
mov
retf
(bad)
nop
mov
jo
xor
adc
jno
dec
cmp
inc
jne
cdq
ins
int3
dec
mov
mov
icebp
arpl
adc
jp
dec
cmc
mov
das
dec
xchg
xor
xor
jmp
add
rol
retf
pusha
xchg
fcom
into
arpl
(bad)
in
or
(bad)
dec
mov
nop
aaa
(bad)
(bad)
icebp
retf
dec
lea
aaa
jle
jp
mov
push
out
lea
cmc
adc
xchg
jmp
add
das
aas
jecxz
dec
(bad)
jbe
sub
lods
add
cdq
sbb
arpl
dec
pop
and
sbb
outs
add
out
das
push
pop
mov
test
pop
cdq
aam
or
into
push
int3
mov
ja
mov
dec
pop
mov
pusha
mov
mov
popf
inc
adc
cld
pop
cmps
or
imul
pop
cdq
adc
je
sub
mov
sti
mov
pushf
das
mov
inc
sub
(bad)
sbb
add
xchg
push
sbb
ror
xor
adc
into
lock
cmps
sub
imul
jnp
mov
sub
dec
pushf
(bad)
xor
pop
mov
pushf
mov
push
jl
push
pop
js
sbb
test
cdq
jmp
and
mov
and
push
jbe
xchg
mov
add
inc
mov
enter
add
das
and
(bad)
icebp
mov
dec
in
cmp
lock
dec
sub
stos
pop
sbb
xchg
ins
jge
sub
mov
mov
movs
xchg
sub
lea
jge
inc
scas
call
inc
or
push
push
mov
sub
inc
cmp
retf
cmps
arpl
ret
sbb
ds
adc
adc
(bad)
push
dec
sbb
cmps
pop
lods
cli
adc
push
retf
sbb
in
icebp
clc
repnz
test
adc
movs
xchg
inc
cmp
ss
jmp
push
pop
or
aad
into
sub
and
cli
xchg
mov
fidiv
retf
jno
shr
inc
jae
xor
push
cmps
or
(bad)
fisubr
jo
mov
inc
loope
mov
cmp
ss
cmc
cdq
lods
iret
test
cli
test
add
adc
les
mov
mov
test
test
(bad)
dec
(bad)
sbb
cmp
push
in
pop
movs
sub
in
daa
mov
mov
les
push
pushf
sbb
mov
cmp
lods
fcmovne
mov
dec
in
sbb
aam
(bad)
xchg
add
hlt
loopne
xor
adc
mov
dec
sub
jmp
mul
retf
test
pop
adc
mov
add
add
cmp
addr16
mov
clc
and
inc
xor
cdq
ret
pop
push
xchg
or
int3
jbe
sub
dec
test
cwde
test
pop
push
out
sub
sbb
add
push
pusha
cmp
xchg
fdiv
call
sbb
sbb
aaa
fldcw
dec
dec
xchg
xchg
mov
sar
adc
retf
stos
arpl
jp
mov
movs
lods
sub
fmul
in
cmp
or
xor
inc
inc
mov
gs
mov
sub
lock
ror
mov
ret
outs
in
adc
out
xor
pop
push
and
das
aam
xchg
adc
mov
in
jl
lods
pop
shr
xor
mov
mov
js
pop
add
jnp
mov
cmp
cmp
in
mov
shl
jae
adc
xchg
mov
pop
add
aam
pop
aas
stos
inc
popa
push
jp
dec
fnstenv
in
xchg
and
(bad)
push
pusha
inc
stos
punpckhdq
imul
pop
ja
mov
mov
inc
push
adc
mov
das
and
xchg
repz
shr
add
(bad)
in
int
or
jb
icebp
pushf
mov
mov
cmp
out
cld
adc
shl
and
push
or
xor
cmp
inc
sbb
jecxz
sbb
ins
add
retf
inc
loop
cmp
arpl
arpl
loop
jg
cmp
sub
jge
scas
add
mov
ja
or
adc
pop
sbb
sbb
xor
adc
imul
retf
or
cwde
scas
inc
call
lods
xor
jns
add
add
xchg
nop
sub
cmp
pop
jp
idiv
cmp
push
int
inc
push
ss
das
cli
mov
add
dec
hlt
fcom
iret
scas
lods
shr
icebp
sub
mov
adc
cmc
xor
cmp
aam
imul
mov
push
adc
pop
int3
jmp
das
into
scas
sub
imul
into
mov
into
imul
sbb
sbb
iret
call
mov
dec
das
jp
into
inc
and
(bad)
fwait
es
cli
push
inc
adc
or
in
cwde
and
pusha
xchg
sbb
mov
in
dec
inc
or
mov
and
fimul
or
push
aam
nop
aaa
icebp
stc
cwde
(bad)
fdiv
mov
pop
stos
dec
pop
add
xchg
lods
dec
jo
sbb
call
pop
call
je
xchg
sbb
sbb
pop
xchg
call
or
xchg
or
cmps
and
xchg
or
or
rcl
dec
movs
fmul
ins
adc
cwde
pop
mov
or
fadd
xchg
add
fiadd
lods
popf
mov
mov
xchg
repz
sbb
push
xor
cmp
xchg
fwait
adc
xor
xor
(bad)
fisttp
outs
adc
fldcw
cwde
aam
jmp
icebp
in
loopne
pop
rcr
adc
push
imul
mov
scas
retf
sbb
jne
pop
icebp
and
add
jne
into
xor
push
in
imul
imul
mov
sbb
add
test
cld
pop
push
fidivr
mov
cwde
ror
loopne
adc
inc
xor
adc
sbb
or
inc
push
dec
mov
cmp
out
push
das
movs
sbb
and
add
push
push
ror
sbb
pop
xor
stos
push
sbb
test
cmp
nop
out
int3
in
(bad)
pop
and
hlt
sub
sar
js
xchg
xchg
cmp
js
nop
adc
ror
(bad)
xchg
fidiv
xor
and
stc
scas
ins
dec
es
sbb
cmp
popf
sub
retf
pop
cmps
inc
push
ins
pop
popf
pop
repz
xor
test
cld
adc
xor
add
fldenv
mov
pop
jbe
(bad)
pop
(bad)
and
popa
repnz
add
jge
shl
or
pop
ror
clc
push
sub
mov
pop
jmp
dec
shr
jae
pop
pusha
into
inc
mov
das
xor
mov
movups
jmp
push
inc
loopne
xchg
inc
loope
leave
retf
int3
jns
jl
mov
dec
jmp
push
pushf
aaa
or
or
mov
loope
jecxz
sub
into
mov
sbb
int
add
sbb
sbb
adc
jb
inc
dec
push
adc
mov
pushf
jbe
inc
or
icebp
mov
das
sbb
pop
imul
retf
fisttp
int3
mov
push
sub
mov
adc
loopne
arpl
cmp
push
sbb
ret
push
mov
sahf
sub
sbb
mov
xor
lea
popf
fwait
xchg
retf
pop
cdq
cli
ins
push
stos
cmps
dec
xor
adc
js
inc
movs
sbb
inc
dec
pop
dec
dec
and
or
xor
cli
mov
inc
add
sbb
imul
cmp
jo
rcl
lahf
imul
mov
lea
in
bound
pop
or
push
dec
inc
jg
sub
or
retf
dec
inc
xor
sub
arpl
or
in
popf
sbb
dec
clc
add
adc
pop
adc
inc
xor
xchg
ds
int3
in
or
push
cmp
popf
and
push
push
add
jge
inc
(bad)
cmps
clc
pop
fld
pop
hlt
adc
ret
sub
mov
sbb
fucomi
push
out
inc
movs
clc
sar
dec
mov
push
mov
pusha
daa
adc
push
fnstenv
inc
dec
inc
xor
xor
imul
jne
xchg
mov
lock
or
inc
(bad)
xchg
adc
bound
movs
or
xchg
leave
sbb
pop
out
lods
test
test
xor
loop
jo
adc
jge
sbb
retf
call
pop
xlat
xchg
add
adc
in
ret
icebp
fldenv
jno
shr
xor
add
lahf
imul
addr16
aas
mov
xor
jno
cmp
mov
in
and
xchg
mov
or
adc
ins
icebp
mov
sbb
add
inc
push
pusha
movs
inc
mov
popf
ins
mov
rcl
mov
jle
xor
mov
imul
imul
ficom
sbb
out
pop
push
les
mov
ss
mov
adc
mov
ss
aas
(bad)
pop
sbb
mov
imul
xor
mov
ret
hlt
pop
or
out
jae
inc
mov
mov
lock
cwde
imul
pop
not
mov
popa
or
(bad)
(bad)
mov
sub
or
ret
mov
loopne
lea
shr
scas
lea
aad
push
adc
rcr
pop
or
ficomp
adc
mov
xor
mov
in
cmp
mov
inc
xchg
ss
test
ret
dec
mov
movs
test
adc
mov
shl
sub
xchg
test
jge
out
or
xor
inc
add
adc
popa
adc
mov
das
stos
push
(bad)
lods
sub
sbb
sbb
inc
sub
lea
je
xor
test
sbb
mov
push
imul
add
loop
fcmovbe
enter
repz
cld
std
cmps
or
ins
outs
dec
push
pop
sub
and
mov
stos
xor
inc
std
push
xor
aas
cdq
rcr
psubsw
add
pop
pop
imul
fcomp
adc
add
wrmsr
outs
mov
pop
test
inc
retf
jno
and
(bad)
and
shl
push
jl
pop
mov
jg
inc
or
ror
add
dec
in
sub
fistp
pop
xor
adc
iret
(bad)
in
or
retf
mov
push
push
sub
mov
add
xchg
dec
in
cmp
push
and
mov
inc
in
sbb
dec
stc
dec
jecxz
sbb
mov
lock
pop
add
out
dec
rcr
add
retf
cmp
rol
rcr
cli
mov
das
xchg
mov
jns
clc
ins
push
test
std
xchg
(bad)
popf
add
jmp
xor
jecxz
inc
ret
(bad)
or
sbb
lock
dec
xchg
xor
dec
xchg
into
stos
push
jb
adc
repz
push
stos
jecxz
or
xor
movs
pop
xchg
mov
jg
(bad)
pop
pop
xchg
fs
test
mov
pop
add
cmp
cmp
adc
out
ficomp
push
js
sbb
mov
push
dec
hlt
and
and
inc
fst
data16
adc
sbb
sub
clc
and
in
jnp
jge
repz
pop
mov
retf
xchg
adc
or
in
hlt
push
xchg
or
loopne
out
pop
jl
jecxz
or
add
movs
mov
test
mov
sbb
das
rcr
mov
jecxz
mov
cmp
out
mov
ror
out
clc
hlt
ds
fisttp
call
mov
sbb
cld
adc
fnstcw
jbe
jbe
enter
cmp
xchg
jp
movs
or
jp
in
cmc
adc
jnp
icebp
push
movs
mov
pop
pop
add
push
imul
shr
xor
and
nop
xchg
or
rol
xor
xlat
cmp
cwde
xor
push
mul
sahf
mov
and
adc
retf
inc
nop
push
loopne
inc
dec
sbb
mov
inc
lahf
jb
loope
aam
inc
dec
dec
int3
xor
cmp
iret
lahf
call
add
test
pop
fdiv
mov
(bad)
out
push
and
shr
cmp
jae
inc
test
ror
cs
fisttp
mov
(bad)
cmps
outs
cmp
pop
fsubp
push
inc
cmps
sbb
es
nop
ins
mov
mov
retf
or
pop
cmp
lods
mov
dec
fisttp
xchg
add
inc
hlt
push
retf
addr16
jecxz
in
addr16
fmul
pop
fs
sbb
in
cmp
xchg
pop
jb
cmp
dec
xor
cdq
(bad)
aam
icebp
or
addr16
and
sub
adc
add
push
ins
dec
cld
push
add
push
mov
ror
aam
enter
daa
jmp
sbb
push
cmp
leave
fiadd
mov
les
pop
or
dec
dec
push
add
sbb
shr
add
lods
pop
fild
xchg
push
xchg
mov
cmp
fs
adc
xchg
cmp
dec
jecxz
adc
mov
or
lea
in
xchg
cld
in
mov
push
cmp
adc
sub
(bad)
not
pop
xchg
das
mov
xchg
or
adc
sbb
add
shr
test
loopne
in
dec
fsubr
lock
neg
dec
je
and
sar
adc
daa
jmp
push
jno
stc
jg
or
cmp
out
xor
mov
push
ss
movs
test
add
jmp
cmp
or
cmp
movs
js
jmp
sub
or
ins
and
sub
sbb
scas
inc
cli
movs
adc
dec
jge
test
shl
mov
ja
xor
sbb
es
adc
add
call
inc
mov
sbb
adc
sbb
add
js
and
adc
popa
and
and
loop
xchg
out
xchg
mov
xchg
sbb
not
daa
loopne
or
leave
add
ss
test
push
cli
push
sbb
jbe
push
mov
clc
xchg
adc
jb
(bad)
vphaddubw
cmps
or
and
stos
aas
add
lds
adc
cmc
and
fild
in
aam
pop
fisub
sbb
adc
and
int
outs
out
unpcklps
mov
fsubr
push
xor
fistp
sbb
cdq
sbb
or
jne
sub
mov
add
lods
and
jne
les
in
call
inc
aam
xchg
cmp
retf
cmp
movs
lods
add
call
add
or
push
leave
adc
adc
adc
push
add
or
pop
push
sbb
add
inc
xor
cmp
aaa
ds
xor
das
ss
sub
daa
cs
and
pop
es
push
adc
pop
pop
pop
push
pop
sub
push
push
dec
push
inc
inc
adc
dec
dec
loopne
adc
pop
inc
inc
inc
aas
adc
jne
jae
jns
ja
jle
dec
dec
jb
jo
adc
gs
push
jl
bound
pop
cmp
xchg
xor
cwde
adc
jns
push
inc
int3
dec
in
lock
xor
sub
push
cdq
sub
add
jmp
add
imul
dec
mov
mov
sub
cmp
in
inc
push
shr
outs
ja
lahf
bound
outs
fidiv
adc
push
dec
push
inc
dec
sub
test
push
sub
dec
push
cmp
cwde
sbb
and
jmp
in
push
jbe
jae
add
jns
sub
imul
mov
mov
or
add
ss
out
xchg
xchg
cmc
jae
jnp
inc
loopne
movs
(bad)
es
inc
cmps
outs
call
xchg
sub
inc
jbe
mov
inc
daa
inc
pop
outs
inc
jle
shl
imul
leave
nop
sbb
xor
sub
mov
(bad)
mov
lods
outs
dec
mov
lahf
sub
addr16
dec
aad
popf
outs
dec
ja
gs
add
xchg
adc
sub
or
addr16
xor
jnp
ret
outs
mov
ss
sub
mov
xchg
mov
jno
les
fst
mov
aad
mov
add
cmp
or
pop
or
std
or
or
dec
adc
mov
fistp
add
pop
xchg
mov
dec
js
cmp
sub
pop
jo
(bad)
ja
jmp
dec
sbb
fs
push
mov
dec
mul
(bad)
and
and
xchg
loopne
ja
lahf
dec
dec
ds
add
ss
pop
add
or
js
xor
sub
loope
cmp
cdq
call
cmp
cli
cmps
mov
cmps
adc
cmp
pop
daa
pop
fs
outs
dec
push
xchg
daa
pop
cmp
or
sub
(bad)
dec
pop
jl
and
mov
and
movs
cld
xor
daa
xchg
cmp
ins
cmps
int3
dec
xor
call
retf
cmp
shl
dec
aam
jae
push
push
jno
and
sbb
daa
ror
mov
out
pop
arpl
int
dec
jg
pop
stos
popf
mov
loope
or
imul
jge
xchg
jmp
cmp
cmp
rcr
xor
add
imul
push
pusha
pop
popf
les
daa
js
fimul
retf
jle
dec
repnz
(bad)
pop
xor
cmp
push
stos
out
or
aas
jbe
sbb
and
dec
mov
jbe
jle
inc
jno
popa
jge
es
sub
lea
xor
sub
and
jnp
movs
fsub
pop
push
lods
inc
jl
add
adc
xor
mov
mov
js
mov
into
dec
sbb
xor
fldenv
repz
cdq
push
fist
sbb
sbb
inc
retf
fwait
adc
or
cmp
in
xor
ins
test
mov
adc
pop
or
mov
fs
add
cwde
sbb
xor
adc
call
or
sbb
adc
mov
sbb
mov
pop
sbb
cmp
sbb
inc
adc
sbb
jmp
sbb
scas
xchg
test
push
shl
xchg
xchg
call
ins
imul
test
xchg
adc
cmp
mov
mov
mov
adc
mov
mov
movs
mov
cmps
scas
mov
mov
aam
ficom
fcom
fisubr
rcl
iret
(bad)
(bad)
retf
enter
(bad)
ret
sar
adc
clc
idiv
int
retf
repnz
lock
mul
in
jmp
cld
sti
loop
loope
(bad)
adc
ret
shl
mov
adc
inc
xchg
mov
mov
ret
xor
push
xchg
mov
outs
jnp
pop
mov
xor
xchg
scas
por
fnstenv
and
xor
jmp
cmp
hlt
push
xor
adc
adc
xor
dec
mov
fidiv
pop
add
pop
ja
push
fs
jo
dec
jae
jns
add
ja
jmp
jbe
adc
in
je
xor
call
jnp
pop
push
xor
cdq
sub
pushf
ret
jmp
cmps
adc
dec
imul
pop
loop
or
adc
add
sub
cmp
and
push
cmp
xor
sub
pop
ins
mov
xor
inc
imul
xchg
adc
cli
and
push
add
pop
push
test
std
mov
push
inc
inc
je
test
aam
mov
dec
int
scas
jl
adc
dec
push
dec
sub
ss
arpl
inc
xor
mov
cmp
inc
jg
push
loop
stos
mov
jo
test
dec
dec
in
pop
jnp
pop
xchg
bound
pop
jl
pop
aaa
sbb
push
jnp
scas
or
and
movs
jmp
stos
je
lds
xor
int
cmp
sub
xor
les
push
stos
xor
cwde
sar
mov
scas
dec
je
jge
jp
add
ret
inc
fnstcw
xor
outs
mov
movs
das
jae
adc
push
xchg
cli
sub
dec
leave
mov
enter
mov
test
inc
inc
sti
not
jle
jbe
cmc
pop
sbb
inc
aas
pop
jmp
imul
push
ds
xor
xchg
mov
rcr
sbb
mov
imul
or
ins
dec
sub
cmp
add
dec
dec
dec
sub
push
sub
addr16
call
into
stos
shl
mov
repnz
(bad)
fmul
inc
inc
push
ret
cmp
push
js
imul
in
aam
push
mov
in
sub
add
inc
push
pushf
or
jae
mov
call
pop
push
iret
je
dec
xchg
sub
sbb
cmp
gs
pop
arpl
ret
xor
mov
daa
pusha
lods
jmp
and
adc
xchg
in
jle
sbb
imul
pusha
xchg
sub
mov
sub
add
add
in
add
xchg
mov
ins
das
es
dec
ins
in
adc
cmp
mov
sub
pop
dec
push
fs
pop
mov
xchg
popa
jmp
add
jmp
push
les
jne
jmp
sahf
cli
dec
push
js
sbb
add
in
sbb
or
sub
add
xor
test
mov
adc
fs
push
jb
add
or
es
in
push
sbb
jmp
or
mov
nop
pop
xchg
push
push
push
sbb
sub
imul
jo
jle
jmp
push
jle
add
pop
pop
dec
imul
push
sub
cmp
pop
and
imul
cmp
add
add
xchg
loopne
sbb
imul
in
lock
cmp
hlt
pop
rcr
enter
shr
sbb
mov
pushf
or
push
cmp
add
push
sbb
cmp
cmp
pop
or
jbe
repz
sub
or
dec
or
xor
cld
sbb
les
js
imul
int3
sbb
imul
addr16
sub
or
out
loope
sbb
add
sbb
sbb
pop
ins
daa
and
inc
sub
pop
in
in
aam
and
pop
jmp
inc
sbb
mov
rcl
inc
push
cmps
add
cmp
push
xchg
inc
sahf
mov
bound
call
sbb
ds
fidivr
or
lods
ja
sub
push
ja
and
or
sub
add
mov
iret
mov
(bad)
xlat
jge
push
je
out
mov
jo
jmp
fisub
xchg
sub
fimul
icebp
(bad)
fs
rcl
jnp
in
das
push
jo
pop
cli
add
xor
fucomip
test
cmp
jo
cmps
(bad)
pop
stos
xor
mov
fcomp
pop
jae
mov
xchg
lahf
je
or
push
stos
sbb
dec
in
or
push
and
dec
push
dec
cmp
inc
or
pop
ds
les
sbb
mov
adc
push
jnp
add
mov
xor
cli
pop
call
mov
and
fist
pusha
xor
je
repz
hlt
jbe
jp
leave
out
out
cmp
cmps
add
out
sub
or
test
inc
adc
adc
push
xor
jl
adc
lds
dec
inc
jb
adc
mov
cmp
(bad)
adc
mov
mov
adc
sub
js
in
rcl
or
xchg
test
mov
dec
cmp
sub
cdq
test
adc
faddp
rcl
mov
push
and
mov
pushf
mov
adc
retf
cmp
dec
add
or
loopne
push
add
inc
call
pop
(bad)
mov
sbb
push
dec
xchg
pop
push
pop
(bad)
jmp
es
bndldx
pop
leave
dec
test
sbb
loope
rcr
cdq
mov
sub
or
push
sbb
mov
cmp
les
xchg
pushf
push
inc
push
scas
inc
jae
pop
gs
adc
pop
nop
ja
inc
jl
test
es
popa
dec
mov
inc
dec
adc
jl
icebp
fistp
or
and
fs
jmp
xor
jne
push
xor
pop
dec
arpl
dec
shr
fisubr
fdiv
push
pop
stos
jmp
jp
xor
mov
jo
bound
add
and
pop
jle
stos
lock
ja
sysenter
jmp
aaa
shr
pop
loopne
in
or
test
je
jmp
andnps
ret
adc
inc
cld
loopne
pop
(bad)
hlt
mov
cld
push
push
sub
fcomp
adc
ret
sbb
pop
ins
xor
jmp
jns
(bad)
ffreep
adc
inc
retf
pop
aam
dec
xlat
adc
out
xchg
pop
sbb
fimul
adc
sbb
inc
and
push
fnstcw
adc
jecxz
cwde
mov
inc
and
movs
xchg
popf
mov
add
or
adc
inc
test
pop
and
rcl
push
inc
or
adc
dec
pushf
add
and
movs
cmp
test
push
jle
mov
(bad)
data16
jno
ret
jp
jno
xchg
jo
dec
and
sub
pop
in
jl
or
and
dec
call
sub
dec
ror
push
mov
cmp
nop
(bad)
pop
mov
outs
ss
ins
dec
imul
jle
push
dec
and
js
and
rdmsr
pop
add
adc
xor
pushf
or
call
sbb
xor
add
adc
mov
jmp
in
fs
pop
stos
test
in
add
mov
nop
adc
unpcklps
sbb
pop
bnd
adc
jmp
mov
cld
dec
add
mov
sub
sbb
adc
add
xchg
and
enter
aad
rcr
mov
jmp
adc
push
sahf
inc
in
leave
inc
mov
ficom
std
xchg
out
pop
ja
fwait
pop
cvtdq2ps
cmp
ins
xchg
popf
sbb
jae
int
adc
movs
(bad)
mul
or
neg
arpl
cmp
out
test
out
je
mov
mov
xor
icebp
popa
dec
push
xor
adc
sub
jne
mov
cdq
mov
push
xchg
jo
into
iret
fs
hlt
rcl
sbb
jmp
js
pop
mov
xor
and
jne
repz
push
mov
stos
or
jle
sbb
jo
outs
jae
imul
sub
sbb
test
push
push
xor
pop
hlt
(bad)
adc
psubd
movs
mov
enter
test
pusha
adc
jae
push
imul
aas
clc
scas
or
mov
xor
push
and
mov
jo
lock
mov
add
in
sub
adc
xor
or
or
pop
sbb
xor
inc
push
xor
mov
push
scas
sbb
jg
xchg
jl
and
push
inc
pop
adc
cmp
xor
mov
lods
sub
ins
add
fidivr
stos
inc
cmp
or
sub
inc
inc
xor
test
pusha
xor
sbb
or
push
push
xchg
test
int3
imul
cmp
pop
int3
fcomp
pusha
ins
not
jo
xor
sub
sub
push
fs
test
sub
js
sub
push
add
js
cmp
clc
mov
push
cmp
sar
pop
xchg
add
jmp
pop
cmp
mov
and
shr
push
arpl
les
xchg
les
nop
mov
xor
sub
adc
leave
je
add
add
addr16
enter
sub
cmp
mov
xor
in
retf
movs
xor
cmc
inc
and
bound
jns
int3
jne
ja
adc
xchg
or
xor
es
pop
add
inc
fs
cmp
cmp
cmp
xchg
lods
scas
push
cmp
pop
push
test
retf
jne
cwde
xchg
ins
cmp
adc
push
int3
cmps
pop
shl
cwde
cmps
sar
nop
mov
inc
xor
bswap
push
add
cmp
sub
or
push
mov
cs
repz
shl
xor
mov
add
mov
sub
xchg
stc
sbb
inc
mov
inc
mov
and
cmp
mov
nop
xor
mov
jmp
into
add
push
stos
int3
adc
stos
repnz
cwde
mov
add
scas
addr16
adc
shl
sbb
test
push
xchg
das
pop
xchg
adc
lods
inc
mov
sub
jmp
cmp
dec
retf
or
and
push
imul
or
or
(bad)
jmp
or
push
or
cmp
dec
xor
pop
sub
hlt
dec
int3
or
or
or
or
lods
sub
cmp
pop
out
push
movs
xor
xor
cmp
retf
or
fs
imul
xor
loop
add
pop
cmp
imul
cmp
sbb
imul
sbb
sub
sub
pop
je
imul
rol
sbb
test
movs
dec
rcr
sub
jmp
inc
add
rol
inc
jmp
adc
jecxz
jnp
jle
jo
leave
sbb
aas
movs
or
enter
sbb
popa
adc
pop
add
in
cli
call
push
xchg
cmps
into
ins
or
mov
and
sbb
(bad)
(bad)
outs
mov
or
int
adc
adc
icebp
push
cmps
aam
les
ins
lds
sbb
clc
(bad)
cmps
int3
aad
dec
mov
adc
loopne
mov
ret
fs
add
hlt
pop
jns
push
xor
cmp
(bad)
mov
call
pop
sbb
fisubr
ficom
mov
add
bound
pop
js
adc
mov
pop
sub
jmp
adc
nop
cmps
mov
adc
out
jg
das
lea
in
or
and
mov
out
fidivr
mov
nop
cmp
(bad)
call
les
sub
xor
jns
in
add
fst
sub
mov
adc
sbb
sbb
lock
adc
sub
adc
fistp
xor
adc
sub
test
inc
enter
cs
pusha
jg
adc
xchg
leave
pop
mov
xor
or
aas
sbb
das
in
mov
sbb
test
mov
adc
call
adc
aam
sbb
mov
fdivr
pop
adc
dec
out
ss
scas
or
adc
xchg
pop
arpl
cld
push
adc
mov
xchg
lods
test
jl
add
jle
adc
pop
fadd
adc
lock
inc
cmp
xor
adc
rcl
push
lds
shl
test
repz
lods
hlt
xor
std
aam
ds
and
xchg
add
sub
mov
out
jmp
mov
xor
pop
xlat
xchg
and
je
inc
lods
push
jno
adc
jmp
sar
mov
and
lods
cdq
pop
movs
adc
out
xchg
neg
cdq
inc
cmp
pop
in
stc
and
add
add
xor
mov
mov
mov
or
jecxz
neg
add
mov
shl
and
adc
mov
movs
and
test
fist
rcr
jmp
push
sbb
add
add
(bad)
dec
xchg
sbb
div
int3
push
repnz
push
xchg
cmovns
adc
iret
(bad)
lods
xchg
in
pop
or
pop
es
jecxz
shl
movs
xchg
xchg
pop
dec
jne
push
sub
aas
shr
in
push
jnp
add
mov
stc
jbe
ins
mov
out
sbb
sub
inc
mov
xor
movs
push
xor
in
mov
scas
ds
call
adc
sbb
adc
clc
daa
adc
(bad)
sub
adc
cmc
mov
xchg
adc
ret
pop
adc
mov
dec
je
outs
cdq
jne
lock
adc
xor
dec
adc
add
ret
(bad)
in
sbb
lods
test
adc
sbb
test
inc
push
adc
jmp
and
test
mov
xor
mov
fisub
sbb
and
adc
sub
mov
jge
adc
add
pop
ja
xor
fisubr
adc
inc
sbb
add
xchg
movs
arpl
mov
and
sbb
or
push
push
mov
or
call
sti
adc
pop
adc
aaa
sbb
scas
adc
sbb
and
push
pop
pushf
adc
push
xchg
outs
loopne
adc
dec
aad
pop
dec
mov
mov
pop
aam
aas
mov
jecxz
out
stos
sbb
add
aam
fbstp
in
pushf
dec
adc
loope
stos
fisubr
push
cld
inc
adc
cmc
mov
ret
mov
xor
jns
xchg
mov
shl
adc
loopne
adc
popf
in
jge
int3
mov
adc
mov
mov
xchg
loopne
inc
cdq
call
fst
aaa
adc
push
inc
pop
out
sub
xchg
hlt
mov
pop
jp
outs
cmc
sub
arpl
je
hlt
popf
adc
loop
test
(bad)
fcom
shr
mov
rep
xchg
jne
add
and
jne
pop
inc
xchg
cmp
mov
mov
sbb
dec
cmp
push
pushf
mov
adc
dec
add
push
dec
mov
in
adc
nop
xor
pop
jnp
adc
arpl
mov
hlt
cmp
push
adc
in
xchg
cdq
jne
sbb
dec
mov
and
repz
pop
pop
mov
sbb
sbb
nop
pop
adc
mov
mov
mov
into
cmps
adc
add
pop
jae
imul
push
pop
rcr
adc
fistp
lods
jno
mov
adc
dec
add
jl
leave
sub
and
cmp
jp
push
adc
xor
nop
jns
inc
adc
inc
xor
or
loope
cmp
lods
pusha
push
adc
je
inc
xlat
cmp
add
js
mov
fdivr
cmp
or
pop
pushf
icebp
mov
enter
cdq
nop
push
or
sub
mov
pop
fld
test
outs
pusha
dec
mov
loop
sub
and
adc
(bad)
cmp
jge
outs
jmp
mov
or
daa
mov
in
add
mov
add
loope
add
xor
aam
add
lea
movs
je
ins
adc
daa
outs
inc
(bad)
cmp
not
dec
cwde
fidivr
mov
jle
sbb
push
cs
aam
jno
cmc
or
popa
cdq
dec
mov
adc
add
push
out
js
jle
shr
jg
jne
cmc
adc
or
stc
adc
(bad)
fidivr
imul
and
pop
inc
out
push
pop
mov
mov
dec
adc
mov
and
popf
jmp
(bad)
mov
fdivr
outs
idiv
jl
xor
xchg
push
mov
in
add
rcr
aaa
rcr
and
cmp
les
popf
cmp
je
fstp
lahf
sahf
cmps
call
das
adc
push
dec
bnd
inc
pop
xor
mov
xchg
xor
in
(bad)
int3
push
mov
lahf
mul
mov
jb
cmp
dec
push
xor
adc
mov
inc
mov
mov
clc
jns
adc
mov
or
adc
xchg
cmp
fst
sub
pop
cwde
in
test
out
xchg
int3
popf
fisubr
pushf
sbb
pop
(bad)
or
sub
lahf
nop
mov
and
test
lock
lods
fbld
xor
adc
add
and
mov
in
sub
jle
ret
push
bound
das
enter
pop
mov
ror
loope
popa
dec
jns
mul
mov
adc
mov
lds
pop
(bad)
fild
push
rcr
or
test
lea
cmps
jb
push
and
jge
xchg
test
mov
xor
or
sti
adc
rcr
xchg
adc
dec
and
dec
fdivr
adc
outs
(bad)
jg
push
or
jae
adc
xchg
pop
pop
stos
fcom
sbb
mov
call
loopne
jae
pop
sti
adc
sbb
xor
push
retf
mov
inc
inc
repnz
aad
pop
add
mov
or
pop
js
aam
pop
es
push
xchg
sbb
adc
push
int
xchg
cmp
inc
adc
pop
loope
repz
nop
mov
add
ret
(bad)
adc
mov
addr16
cmps
xchg
adc
and
pop
push
mov
call
aad
test
sahf
adc
sub
add
or
pop
js
push
push
pusha
out
xchg
mov
push
(bad)
jne
fmul
test
adc
jecxz
aam
sar
cdq
outs
test
ds
daa
inc
pop
shl
xchg
pop
repz
push
sub
in
mov
xor
call
jae
adc
or
dec
adc
rcr
mov
ins
mov
xchg
jg
leave
dec
xlat
pop
les
or
sbb
adc
mov
sbb
sbb
faddp
push
aam
sti
push
gs
fld
pop
data16
in
mov
inc
jbe
xlat
stc
test
fadd
inc
or
std
retf
adc
movs
lahf
(bad)
push
mov
retf
xchg
in
push
das
and
mov
pop
jnp
dec
adc
test
inc
jne
or
pop
xchg
jg
enter
fmul
sub
adc
je
or
adc
test
cmp
adc
push
test
mov
ins
fsubr
mov
or
not
add
mov
adc
jecxz
or
add
xchg
fsub
test
mov
cs
xchg
mov
adc
rcl
inc
xor
mov
aas
rcl
in
stos
mov
jmp
out
dec
adc
mov
jecxz
pop
pop
sbb
ja
dec
cdq
jmp
push
adc
sbb
ins
fadd
pop
sub
sbb
sbb
and
lea
cmps
cmp
dec
adc
mov
jmp
cdq
out
loop
push
hlt
in
stos
adc
mov
jp
sahf
push
mov
add
ret
dec
cmp
in
dec
cmp
cmp
adc
aam
dec
cld
fcmovnu
cli
xor
or
les
adc
ja
adc
jb
mov
inc
dec
pop
test
cmp
mov
pushf
imul
adc
scas
adc
retf
je
xchg
sahf
xchg
jae
jmp
inc
mov
pop
cmp
mov
fst
jmp
or
push
pop
push
add
xchg
cmp
out
sub
repz
pop
and
mov
add
jne
shr
inc
pushw
movs
test
pop
sbb
ins
pushf
sbb
push
imul
jb
or
adc
das
lock
test
mov
push
imul
stc
cmp
xor
mov
adc
cmp
cmc
int3
xchg
dec
movs
push
popa
sub
xchg
je
mov
ror
xchg
in
adc
sub
push
call
mov
push
hlt
fld
hlt
mov
jl
xchg
push
adc
push
stc
retf
int3
pop
adc
gs
arpl
push
sub
cmc
lahf
xor
ins
jno
push
mov
in
push
adc
dec
push
in
test
pop
adc
int
out
jmp
leave
xor
add
xchg
push
dec
std
jns
pop
aam
jecxz
mov
adc
test
ret
mov
adc
push
pop
shl
and
sbb
mov
dec
and
test
mov
and
xor
rcl
dec
popa
cld
or
jmp
fs
into
cmp
adc
or
dec
lods
adc
or
sbb
sub
mov
scas
ja
call
cmp
fst
sbb
cs
pop
mov
mov
xchg
xor
loope
sub
add
pushf
nop
ss
aaa
push
dec
jmp
stc
jne
push
hlt
clc
jne
push
push
repz
mov
add
into
fs
add
daa
adc
add
shl
xor
fisub
outs
xchg
add
inc
dec
into
mov
aas
stos
pop
sbb
adc
jecxz
les
sbb
and
stos
xor
mov
mov
xchg
xchg
mov
loopne
push
xor
pushf
mov
mov
inc
xchg
out
dec
push
in
or
cmp
add
test
adc
add
ret
aam
test
adc
fadd
hlt
sti
adc
data16
mov
loopne
js
xor
xor
daa
push
ss
adc
cmp
mov
and
(bad)
in
movs
add
cld
cdq
and
cmp
adc
push
jmp
sbb
sbb
sbb
sbb
pop
packssdw
or
cmp
sub
sub
jmp
adc
add
push
dec
push
and
mov
cmp
dec
or
push
sbb
xchg
dec
daa
add
push
sbb
sub
sub
fwait
in
pop
push
je
mov
cmp
xor
imul
push
mov
push
and
mov
dec
xchg
in
or
cwde
sub
sub
xchg
mov
idiv
mov
xor
fnstsw
sbb
mov
and
sbb
and
push
or
sbb
nop
jle
add
or
or
adc
jl
sahf
js
add
sub
sbb
pop
sbb
imul
loopne
sbb
cmp
sub
add
imul
cmp
call
jmp
cmp
jnp
cmp
bound
or
add
repz
mov
mov
jp
adc
shl
adc
xor
ins
xor
and
and
adc
mov
and
add
loopne
fcomp
sub
jmp
cmp
sub
sbb
aam
mov
cmp
sub
and
pop
push
dec
cmp
je
inc
cmp
inc
imul
cmp
and
or
lods
xor
sbb
add
sbb
push
adc
lods
jmp
xor
rcr
imul
cmp
and
xchg
adc
call
pushf
ficom
add
in
adc
cmps
jae
adc
or
adc
pop
adc
xor
pop
push
lock
dec
fs
cwde
in
aad
pop
inc
dec
dec
movs
xchg
fadd
push
les
stos
clc
(bad)
jmp
inc
lock
mov
xor
cmp
sub
aam
popf
cmps
imul
jmp
and
push
imul
sub
imul
jmp
dec
aaa
jo
mov
mov
sbb
and
dec
push
push
dec
mov
mov
sub
jo
and
push
js
xor
mov
stos
xchg
sbb
push
inc
push
ins
js
lahf
jp
jne
ror
adc
dec
pop
adc
pop
sbb
cmps
pop
xor
jno
push
mov
(bad)
push
and
leave
sbb
ja
jnp
mov
gs
jno
daa
(bad)
xor
call
mov
jno
pop
cli
push
jne
mov
jge
in
ja
or
sub
es
out
push
fidiv
mov
aam
fwait
push
and
push
inc
or
addr16
xchg
movs
enter
cmps
movs
cmp
inc
adc
lds
les
sbb
cmps
mov
xor
aas
out
fisttp
dec
xor
scas
mov
or
test
xchg
lods
out
jo
int3
in
adc
leave
push
dec
outs
clc
push
out
cmp
xchg
jge
loop
repnz
cmps
mov
sub
stc
mov
cmp
inc
jae
pop
and
mov
arpl
adc
pmaxsw
xor
mov
enter
adc
mov
lock
call
pusha
(bad)
addr16
arpl
leave
xor
xchg
mov
fld
or
xchg
xchg
xchg
in
adc
sub
mov
in
adc
dec
push
aas
popa
pop
cs
adc
fadd
out
(bad)
jbe
jmp
sub
scas
or
xchg
xchg
adc
cmp
(bad)
mov
push
fidivr
pushf
sbb
popf
inc
rol
adc
iret
imul
retf
or
cmp
in
adc
mov
xor
aam
(bad)
in
push
mov
push
sbb
mov
lds
nop
sar
adc
push
stos
mov
not
mov
push
jle
adc
and
test
pop
inc
test
lea
push
add
mov
pop
test
mov
dec
jbe
mov
pushf
add
push
test
loop
and
sbb
aas
xchg
sub
adc
mov
adc
adc
ss
aam
pusha
or
sbb
sub
adc
push
je
and
shl
xor
leave
test
xchg
adc
repnz
jno
fwait
mov
aam
pop
clc
and
pop
adc
ss
aad
adc
jecxz
cdq
sbb
mov
xor
clc
icebp
push
mov
addr16
jmp
mov
and
mov
pop
jnp
mov
nop
cmp
loope
stos
jl
xchg
neg
(bad)
fidiv
sbb
sub
adc
inc
add
dec
jmp
(bad)
dec
adc
(bad)
push
sub
shl
xlat
push
loop
in
xchg
imul
rcl
fist
sub
adc
xchg
cmp
cld
outs
adc
loope
pop
enter
push
sar
loopne
xchg
mov
call
mov
(bad)
jge
outs
adc
dec
das
jmp
cli
adc
sbb
test
in
es
push
rcr
lea
pop
xchg
repz
fldl2e
retf
jnp
outs
jns
rcl
psubb
cmps
xor
sub
ins
sbb
dec
jnp
test
in
jmp
je
pushf
add
ds
mov
retf
adc
lock
mov
cmp
jmp
je
fs
adc
test
mov
jo
adc
adc
xor
fdivr
push
(bad)
gs
xor
rcl
add
ins
je
or
mov
add
adc
or
push
adc
push
add
in
fisubr
icebp
clc
add
loop
cwde
js
inc
dec
ins
je
push
mov
or
in
int
outs
xchg
sub
(bad)
imul
mov
xchg
xchg
pop
add
mov
inc
sbb
lods
xchg
gs
jae
pop
aam
dec
adc
mov
push
rcr
add
adc
ja
imul
call
adc
pushf
outs
mov
jb
(bad)
sbb
sbb
and
hlt
(bad)
retf
adc
cld
or
mov
jb
xlat
cli
mov
leave
xor
movs
adc
sahf
movs
xchg
push
sar
xchg
push
xchg
cmps
xchg
dec
and
adc
test
scas
adc
out
rol
stc
div
adc
(bad)
xlat
pop
pusha
in
adc
sub
adc
addr16
jne
adc
cmp
(bad)
adc
xor
push
ret
adc
sti
ror
cmp
imul
int
cdq
sbb
push
pop
mov
addr16
adc
sub
add
cwde
dec
sbb
jae
push
aad
arpl
sbb
mov
js
xor
mov
fdiv
sub
fidiv
sub
ret
sub
xor
jl
adc
retf
xor
cmp
cmps
and
inc
mov
sub
sub
gs
ins
call
retf
out
add
push
fdivr
adc
xor
outs
cs
(bad)
jmp
loope
dec
mov
jge
adc
push
pop
sub
sub
bound
(bad)
in
adc
cwde
ror
lods
and
(bad)
addr16
retf
add
das
xchg
jne
sub
pop
inc
outs
sar
ja
mov
test
loop
adc
mov
add
scas
lock
hlt
mov
add
push
mov
ret
ins
ds
test
arpl
in
jge
out
in
cwde
fidivr
push
add
imul
jmp
adc
jl
fild
ret
mov
call
or
xchg
(bad)
rcr
add
addr16
push
push
push
ret
adc
pop
pop
mov
adc
fistp
push
adc
adc
icebp
jo
jbe
adc
and
pop
mov
xor
out
sub
add
hlt
push
movs
pop
adc
aaa
adc
adc
mov
adc
mov
fild
pop
jne
adc
fsubr
pop
adc
ret
scas
fbld
fwait
add
sbb
push
xchg
int
call
mov
out
lods
loop
adc
aad
mov
ds
jmp
cld
xor
inc
mov
xchg
adc
pop
adc
and
loope
and
in
fnstcw
add
push
push
mov
cmps
mov
adc
pop
(bad)
in
shl
fdiv
xor
hlt
das
cdq
add
or
adc
stos
jecxz
psubusb
mov
xor
adc
rol
pop
les
rcr
jo
add
pop
je
lock
jno
pop
ret
mov
adc
sbb
sahf
in
stos
cmps
out
adc
mov
and
clc
cmc
adc
dec
sub
dec
sti
test
pop
fbld
push
shl
xor
mov
stos
push
push
inc
sti
repz
xchg
mov
movs
mov
pop
adc
sub
inc
xchg
adc
dec
stc
push
mov
push
jae
fdiv
dec
cmp
jmp
es
test
dec
imul
mov
xor
popf
fsub
adc
jno
adc
add
adc
fcmovnbe
clc
adc
add
push
out
hlt
pushf
adc
sbb
adc
retf
icebp
jne
sbb
hlt
mov
pop
sub
ins
xor
loope
pop
or
cmp
fisubr
xchg
out
or
inc
cmp
adc
jge
div
call
aam
pushf
sti
push
rcl
sbb
aam
push
sub
aas
sbb
inc
outs
outs
mov
and
xchg
cmps
jl
jecxz
add
hlt
enter
movs
aas
or
adc
cmp
xor
sahf
int3
push
adc
(bad)
cdq
jle
leave
xor
mov
data16
mov
pop
ret
test
xchg
lods
clc
xchg
mov
fstp
inc
and
in
mov
inc
xchg
jae
add
inc
mov
cs
mov
xchg
imul
xchg
pop
jmp
mov
das
cwde
sbb
in
pop
inc
cmc
dec
stos
add
jl
(bad)
sub
xor
pop
aaa
test
adc
adc
mov
mov
adc
pop
mov
pop
lock
add
mov
in
pop
adc
js
jge
xorps
xor
es
repz
or
inc
mov
push
call
cmp
mov
popa
lods
(bad)
lock
adc
retf
pop
mov
shl
cdq
ja
jg
adc
in
mov
add
mov
lock
stos
repnz
in
hlt
inc
mov
out
in
sbb
and
ss
xor
fwait
dec
sub
arpl
sti
xchg
les
fadd
je
mov
fistp
sbb
mov
add
xchg
pop
dec
hlt
inc
js
(bad)
and
aam
jno
rcl
sbb
pop
aas
xchg
adc
or
cmps
adc
adc
int3
cwde
jle
adc
adc
imul
adc
add
adc
push
aaa
pop
stos
adc
cmp
mov
out
cdq
mov
sub
pushf
and
adc
adc
pusha
add
sbb
jae
cmp
adc
xchg
lods
int3
mov
(bad)
mov
fadd
aad
les
xchg
out
xchg
mov
sub
pop
adc
(bad)
hlt
jns
in
lock
mov
in
sahf
outs
dec
add
sbb
add
nop
out
adc
lea
jae
mov
jnp
mov
adc
mov
push
or
test
in
sub
lahf
add
mov
aaa
push
mov
mov
sbb
add
pop
push
shl
adc
(bad)
aam
out
jb
mov
adc
or
daa
xor
out
mov
sahf
enter
movs
or
xchg
adc
cwde
and
cs
ds
inc
mov
movs
push
ja
adc
fiadd
or
imul
push
push
fnsave
sbb
sbb
rcl
shl
out
jae
ins
jmp
mov
leave
adc
push
mov
movs
mov
sbb
sbb
xchg
cdq
mov
mov
push
fdiv
mov
jmp
ret
or
push
xchg
jecxz
inc
mov
test
adc
jecxz
pop
fdiv
dec
sub
int3
les
(bad)
shl
mov
mov
dec
inc
dec
loopne
and
mov
pop
xor
jle
sub
ja
adc
jbe
hlt
ret
fstp
cmp
fs
adc
ret
mov
test
movaps
jp
and
mov
(bad)
mov
adc
push
out
(bad)
mov
jmp
mov
xor
(bad)
outs
ins
adc
xor
js
xor
or
fs
test
mov
sub
aam
aaa
daa
iret
xchg
jp
add
mov
push
pop
add
xchg
cmp
in
or
les
mov
out
sub
adc
sbb
adc
cs
add
mov
mov
repnz
jecxz
hlt
add
adc
enter
add
pop
dec
in
mov
adc
sbb
lods
mov
dec
stos
push
adc
int
bound
adc
inc
inc
mov
sbb
adc
fsub
test
dec
dec
jne
das
ja
push
pop
push
push
and
stc
loop
push
push
dec
sub
scas
ja
pop
adc
fist
xchg
pusha
call
shr
adc
icebp
mov
push
mov
add
aaa
call
fistp
or
pextrw
add
adc
call
xchg
es
enter
pop
(bad)
in
ins
das
call
loopne
test
test
add
into
imul
arpl
mov
loopne
adc
scas
pop
ret
jmp
(bad)
mov
add
ins
jle
adc
cmp
dec
mov
ds
and
or
daa
adc
shl
popa
push
xlat
xchg
adc
jl
push
jle
(bad)
or
shl
cmp
je
stos
push
xor
cli
add
sti
add
or
jge
adc
cmp
aas
push
adc
ror
mov
es
xchg
mov
fistp
xor
pop
push
cmp
not
fcmovnb
in
mov
xchg
mov
into
jg
xor
aam
cmp
into
cmp
cmps
dec
loopne
cmp
or
fidiv
fs
jbe
ret
sub
outs
fsub
cmp
fild
cdq
mov
or
movs
mov
and
sub
inc
jnp
sbb
jge
and
movs
mov
imul
arpl
out
mov
or
out
call
cmps
cs
sbb
or
outs
adc
ret
cmp
pop
adc
stos
sbb
pusha
adc
ds
popa
out
out
mov
mov
cmp
or
adc
in
ins
mov
cli
xor
and
aaa
xchg
xor
lods
or
xor
adc
int3
enter
in
gs
stc
sti
adc
mov
rcl
aaa
dec
push
(bad)
pop
and
dec
adc
adc
fcomp
jo
xor
dec
mov
or
imul
lahf
aas
hlt
xchg
cwde
cmp
or
adc
sbb
xchg
in
ds
or
mov
push
push
xchg
adc
sbb
xchg
loop
sbb
mov
call
cli
adc
das
push
cld
adc
ins
pusha
adc
jbe
mov
adc
ins
inc
sar
xor
jns
popa
adc
(bad)
jno
push
adc
sub
adc
call
mov
retf
ret
and
pop
ins
mov
adc
jecxz
mov
sbb
ins
je
cmp
aaa
adc
inc
aaa
xchg
adc
adc
jmp
pop
cli
pop
cmp
push
test
adc
push
xchg
mov
mov
in
adc
stc
adc
push
popa
test
movs
stos
pop
clc
fsubp
aad
sbb
push
aam
out
xchg
adc
fnstenv
loop
das
stc
adc
add
jecxz
retf
lock
cli
bound
or
rol
in
lahf
adc
es
mov
movs
mov
sub
inc
push
in
mov
mov
inc
ja
data16
jle
inc
cli
adc
fwait
cmps
add
std
push
aaa
push
pushf
push
imul
ret
(bad)
bnd
(bad)
or
in
jne
or
sub
pop
push
or
pop
cmps
fisttp
cmp
hlt
sbb
leave
push
test
ins
add
sbb
repz
add
xchg
shr
shl
push
mov
push
inc
push
std
test
clc
rol
lahf
arpl
and
adc
loop
fld
adc
ins
data16
mov
ja
imul
les
dec
retf
popa
inc
les
adc
pushf
rcr
lods
inc
mov
push
pop
outs
jo
mov
jge
or
push
pop
stos
or
aam
das
(bad)
fdivr
push
out
aad
jge
adc
push
xchg
movs
(bad)
push
cmps
cmp
retf
jns
adc
xor
mov
fxch
add
xchg
xor
not
mov
fsub
in
lods
adc
jb
xchg
adc
cmp
add
out
xchg
adc
xor
hlt
sub
movs
cwde
arpl
jecxz
aam
out
in
adc
(bad)
cmc
mov
adc
inc
and
adc
out
jb
mov
(bad)
loop
arpl
js
and
test
lods
or
popf
and
cs
fcom
pushf
out
push
sub
cmp
pop
das
sete
in
jecxz
cwde
jo
into
inc
outs
aam
mov
imul
iret
xor
cld
ret
fwait
cli
or
outs
cmp
push
ss
xchg
stos
cmp
jmp
mov
dec
movs
cwde
adc
xchg
jb
or
xor
and
rcr
adc
jo
xor
adc
push
dec
mov
arpl
adc
add
pop
jnp
test
dec
xchg
imul
mov
mov
dec
lahf
in
fsub
enter
xor
pop
mov
int3
(bad)
fcom
xor
push
or
dec
imul
sbb
les
inc
sbb
mov
adc
fs
sub
pop
mov
push
and
mov
or
cwde
inc
ja
xor
fisubr
rol
popf
outs
push
mov
adc
jecxz
aam
and
adc
mov
cmp
lds
les
adc
mov
cmc
imul
es
stos
xchg
push
mov
sar
scas
cli
repnz
pop
ins
scas
mov
dec
sub
ss
fcom
sub
cmp
jg
adc
js
ins
push
jne
sbb
mov
mov
mov
adc
push
or
jnp
adc
xchg
jl
test
or
cmc
adc
adc
sub
loopne
sub
xchg
sbb
outs
sub
inc
adc
push
cmps
jg
rcr
movs
addr16
inc
mov
loopne
fistp
(bad)
dec
xchg
xchg
mov
js
jecxz
mov
in
jecxz
and
addr16
jo
sub
or
and
xchg
jbe
in
inc
or
in
imul
xchg
pop
std
push
adc
pop
jmp
pop
lahf
sbb
xchg
jg
pusha
cld
and
cmps
lock
or
xchg
lods
push
out
sub
xor
fst
xor
mov
imul
jmp
leave
out
es
iret
js
cdq
pop
jp
jmp
and
inc
mov
or
cmp
adc
bound
fistp
mov
jae
pop
mov
adc
xor
xchg
sub
div
dec
adc
mov
les
fdiv
xchg
(bad)
jbe
jle
adc
test
pop
(bad)
mov
in
push
retf
hlt
push
cmps
xchg
jae
mov
xor
cmp
enter
ja
or
xchg
sbb
mov
adc
das
add
sub
and
(bad)
xor
enter
das
les
dec
push
push
or
lahf
xchg
push
pop
and
add
fs
ins
pop
loopne
jno
push
imul
aaa
je
adc
adc
sar
lahf
bound
or
and
add
push
in
pop
sbb
add
fisub
adc
aad
sbb
push
xor
sub
aam
(bad)
dec
adc
pop
scas
mov
adc
or
jg
pop
xchg
mov
push
mov
jns
mov
push
adc
xchg
clc
popa
cdq
stos
fisubr
mov
cs
lahf
gs
ss
dec
mov
(bad)
xchg
aas
enter
or
stos
mov
daa
sbb
movs
in
loopne
push
imul
pop
adc
and
inc
cmp
adc
lock
fsubr
adc
adc
xchg
addr16
pop
mov
pusha
inc
enter
cmp
test
and
rcr
mov
retf
in
dec
adc
push
push
mov
retf
sub
fadd
xor
dec
adc
mul
pop
sbb
mov
push
arpl
jmp
(bad)
mov
mov
push
adc
add
in
sahf
add
aaa
mov
dec
xchg
rol
pop
xchg
push
mov
xor
(bad)
or
ins
fsub
mov
mov
dec
xor
add
push
xchg
cmp
loopne
fs
pop
or
int3
push
ss
cwde
divps
loope
mov
cli
fld
idiv
aam
sub
arpl
cmp
push
xchg
lahf
ja
xor
fs
enter
popa
imul
push
int3
stc
loop
cmp
push
je
mov
mov
aam
ins
cmp
fnstenv
adc
sbb
xor
adc
jl
or
dec
push
add
sub
cli
sbb
cmc
and
fisub
or
cmps
call
cmp
jnp
loope
mov
idiv
loopne
(bad)
xor
or
xchg
cmps
(bad)
call
sar
out
hlt
cwde
sbb
jecxz
or
lea
call
ja
icebp
adc
clc
sbb
sbb
movs
mov
call
popa
fdivr
(bad)
div
pop
pop
loop
fs
mov
jge
xor
xchg
clc
or
popf
out
cs
sub
mov
cmp
aas
sbb
jp
fmul
sbb
jle
fnstcw
push
(bad)
shl
scas
and
inc
and
aam
retf
out
aam
sub
cmps
mov
cli
mov
mov
jle
sub
loopne
rcl
ror
int
or
ret
jb
push
cld
mov
adc
xor
fsub
jae
daa
retf
mov
(bad)
push
aas
je
adc
push
sbb
cmp
in
mov
addr16
(bad)
shl
popa
and
or
xor
stc
push
sbb
push
aad
arpl
rcr
sbb
xor
in
adc
es
(bad)
in
sub
je
repnz
fs
jnp
adc
inc
stos
(bad)
movs
mov
movs
fist
sbb
lods
inc
fadd
cmp
pop
aaa
add
push
mov
unpcklps
cli
in
xchg
xlat
push
ins
xor
inc
inc
jo
arpl
add
in
mov
xor
pop
scas
lock
movd
mov
adc
fwait
lock
inc
test
adc
sbb
sub
cmp
dec
or
popa
sub
inc
add
arpl
pusha
into
mov
in
test
sbb
adc
fcomp
jo
aam
in
inc
sub
scas
mov
pop
leave
xor
dec
push
xor
jge
and
in
pop
loop
out
inc
sti
(bad)
outs
mov
xchg
scas
or
lods
push
(bad)
imul
push
jns
ss
xchg
push
and
inc
xchg
rol
add
push
fisub
push
xor
sahf
and
mov
mul
inc
retf
dec
mov
inc
mov
lahf
push
scas
rol
jae
pusha
(bad)
(bad)
cld
adc
adc
leave
or
pop
loopne
push
je
out
xchg
jp
ds
clc
and
mov
jl
adc
jnp
push
ror
aaa
cmps
loopne
inc
fisttp
adc
jge
or
sub
ficomp
test
mov
ret
int3
add
in
and
sbb
add
fldenv
adc
xchg
ins
adc
push
and
add
dec
nop
data16
xor
ds
mov
adc
fs
ret
in
fldenv
mov
inc
or
outs
int3
fist
cmp
and
(bad)
in
push
adc
adc
xchg
fadd
stos
adc
mov
cwde
lock
push
sbb
movs
imul
out
jecxz
jmp
sub
call
add
xchg
cmp
push
or
cdq
sti
mov
cmc
mov
push
scas
adc
adc
fistp
pushf
(bad)
sti
xchg
and
dec
stos
inc
ds
inc
fdivr
or
adc
inc
fisttp
stc
aas
into
jmp
fsincos
and
xor
sbb
ret
dec
adc
sub
notrack
mov
cmp
stos
xor
mov
adc
xchg
call
xor
and
jg
adc
pop
mov
and
pop
add
sbb
test
adc
and
mov
in
ins
fs
call
aaa
inc
cmps
outs
mov
bound
mov
sub
cli
cmp
lock
mov
cmp
ror
jne
jecxz
ja
ss
cld
test
arpl
or
pop
loope
jmp
adc
jnp
push
adc
retf
xchg
push
cmp
mov
jns
rcl
scas
cli
das
ss
sbb
and
sti
stos
mov
pop
cmp
xchg
xchg
cmp
cmp
mul
mov
adc
inc
in
out
rcr
imul
push
stos
mov
cmps
enter
pop
jp
loop
imul
js
rcr
inc
mov
mov
pusha
push
clc
push
sbb
out
sub
jns
mov
mov
adc
mov
add
xlat
pop
ins
cwde
(bad)
adc
jmp
cmp
ret
fdivr
push
fmul
adc
add
sahf
xchg
jne
popf
aaa
(bad)
fnstenv
mov
sub
sub
add
mov
pop
loopne
or
push
lea
adc
fst
mov
fnstcw
adc
sub
popa
shl
cli
adc
adc
pop
imul
adc
ds
push
mov
jno
adc
pop
inc
shl
out
loop
hlt
sub
dec
in
das
sbb
adc
(bad)
pop
retf
pushf
push
test
pop
pop
jne
pop
(bad)
adc
push
pop
cmp
pop
in
mov
jno
retf
addr16
(bad)
(bad)
pusha
mov
imul
xchg
jp
push
push
les
sub
mov
mov
or
adc
sbb
stos
push
lods
ror
sbb
je
sub
dec
adc
gs
inc
mov
ret
pop
aas
dec
lds
nop
fld
out
dec
jmp
(bad)
xchg
inc
dec
out
xor
adc
fwait
(bad)
mov
or
pop
dec
sahf
mov
dec
adc
push
inc
jecxz
sti
adc
inc
or
mov
jae
in
push
fist
movs
mov
mov
std
mov
repz
xor
aam
add
pusha
adc
bound
push
movs
sub
mov
adc
sbb
int
xchg
mov
xchg
xor
ss
outs
and
pop
mov
xchg
gs
call
mov
inc
add
cmc
and
lods
pop
lds
(bad)
mov
and
add
call
std
pop
adc
lds
pop
or
pop
mov
xchg
test
xor
mov
jne
cmps
dec
aam
fadd
xor
mov
pop
push
xchg
jecxz
mov
add
rcr
fisttp
adc
aaa
in
mov
lds
pop
movs
sub
adc
push
aad
nop
cmp
pushf
pop
xchg
std
int
in
mov
aam
pusha
out
adc
cmp
jae
cmp
push
in
xor
syscall
sub
mov
repz
ds
push
call
aaa
div
sbb
add
clc
ret
cmp
jge
push
pop
adc
cld
call
sbb
jb
jg
jno
pop
xchg
push
push
call
push
or
push
nop
ja
ret
out
cld
xchg
retf
rcl
outs
fsub
jmp
adc
sbb
stc
retf
pop
jmp
push
adc
loope
and
push
push
movs
mov
aad
test
(bad)
cwde
pusha
int3
and
pop
iret
nop
or
mov
ja
in
adc
stc
dec
adc
prefetcht1
fdivr
mov
and
push
cmp
repz
dec
test
pusha
or
sub
movs
ret
push
bound
jno
ins
mov
jae
inc
sub
scas
or
adc
sbb
inc
fild
and
jge
aaa
cmps
adc
aas
inc
loope
inc
lods
push
push
ret
cdq
pushf
aam
jns
cmps
push
inc
adc
xor
lahf
fidivr
hlt
pop
pop
pusha
(bad)
call
push
ret
mov
adc
aas
push
jge
or
pop
add
iret
mov
or
stos
adc
imul
push
push
pop
push
dec
sbb
int3
leave
mov
aam
sbb
push
push
xchg
retf
mov
das
stc
cmp
sti
test
add
add
dec
sub
imul
xchg
rol
repz
add
fs
(bad)
out
add
repnz
cli
enter
fstp
(bad)
test
loope
mov
out
pop
fwait
lds
xlat
cmp
push
mov
jg
out
cmp
sbb
test
sbb
mov
int
je
test
adc
arpl
mov
adc
iret
xchg
imul
jge
add
test
iret
and
(bad)
push
push
fwait
add
sub
jg
pop
retf
mov
pushf
enter
je
xchg
aad
jmp
jno
inc
call
jge
scas
enter
cmp
ror
dec
kxorb
movs
(bad)
gs
adc
mov
sub
adc
push
enter
and
xor
(bad)
js
cmp
cmps
sbb
ret
sub
gs
cmp
push
cli
adc
jne
xor
sub
int3
lods
sub
retf
dec
push
std
aaa
fs
adc
movs
and
cmp
adc
mov
mov
cmp
out
outs
adc
sub
lahf
pop
adc
mov
jle
xor
lods
pop
mov
jmp
xor
xchg
xor
jg
push
dec
arpl
push
xchg
mov
in
inc
hlt
adc
push
ins
mov
cli
cmp
and
adc
xchg
fadd
dec
and
in
xor
or
pop
adc
push
sub
mov
adc
gs
repnz
rol
inc
xchg
ins
lds
movs
push
mov
add
fsub
fs
adc
cmc
mov
jo
mov
ret
mov
xchg
clc
jecxz
adc
push
inc
mov
sub
xchg
out
cmp
mov
mov
es
in
add
into
stos
push
shl
fs
mov
mov
cmps
xchg
fstp
jge
les
adc
bound
ds
mov
inc
mov
inc
aas
mov
jnp
jae
jns
fstp
and
xchg
jne
xchg
jge
or
clc
add
xchg
push
outs
lods
in
mov
fidivr
bound
xchg
in
std
(bad)
(bad)
adc
mov
xor
lods
les
add
sbb
sbb
ja
pushf
and
adc
or
mov
fwait
in
mov
out
xor
stos
mov
cmp
fld
mov
sub
mov
adc
sar
mov
xchg
loope
fstp
mov
pop
adc
sub
jle
or
inc
imul
xor
push
push
or
cmps
aam
or
xchg
sbb
das
add
pop
test
sub
retf
xor
test
bound
loopne
pop
sti
adc
gs
dec
pop
xchg
imul
je
add
push
xchg
shl
and
push
rcl
bound
loop
int
repz
fwait
or
adc
imul
adc
aaa
stc
stos
or
not
push
imul
cdq
dec
(bad)
pop
xor
pushf
bound
adc
xchg
pusha
lea
retf
cmp
adc
jge
add
mov
cmps
pusha
addr16
and
jle
cli
add
daa
maskmovq
idiv
xor
(bad)
cwde
adc
ins
stos
pop
xor
add
test
das
repz
jno
xor
test
adc
mov
and
sbb
in
ins
gs
sub
push
xor
adc
xchg
cld
cmc
stc
repz
mov
mov
fisub
jo
xchg
push
push
bnd
cmp
mov
rcr
add
push
fsub
int
bound
cld
sub
mov
movs
sub
pop
xchg
mov
push
icebp
add
call
inc
aam
sbb
aam
xor
sbb
push
inc
adc
(bad)
or
cdq
cmc
xchg
jge
inc
imul
ror
inc
xor
in
jno
push
nop
add
adc
xor
iret
ja
jge
adc
popf
or
mov
xor
fadd
stos
or
cmp
pop
xor
jb
add
adc
add
fwait
shl
and
in
fxch
in
push
mov
pop
inc
ins
pop
adc
loop
xor
and
push
mov
inc
cs
in
adc
or
adc
cmp
and
pop
cmp
outs
ds
mov
mov
xchg
xchg
mov
sbb
test
add
adc
daa
mov
call
mov
inc
sub
mul
mov
add
lds
sbb
sbb
ss
sbb
ret
mov
jmp
cmp
sub
les
scas
adc
jg
pop
lock
fsubr
dec
mov
push
adc
test
pop
in
mov
iret
clc
fdivr
ror
adc
add
mov
loopne
popa
call
cs
(bad)
aaa
shrd
push
mov
adc
das
call
loopne
shr
outs
outs
sub
adc
cli
cdq
jno
in
jmp
dec
je
stos
jnp
icebp
pop
pop
repz
push
jecxz
or
adc
adc
cmps
xchg
adc
xchg
mov
cmp
loope
push
fnsetpm(287
pop
or
ja
xor
imul
retf
sub
mov
xchg
mov
adc
cmp
hlt
jp
mov
pop
(bad)
out
scas
outs
sti
mov
inc
repnz
lods
mov
xor
popf
push
push
out
(bad)
mov
adc
dec
loopne
retf
fwait
mov
sbb
outs
dec
and
sub
cdq
sub
fsub
into
mov
mov
cdq
dec
cld
lods
jge
movs
imul
sbb
and
add
aas
(bad)
out
fisub
ins
cmp
ins
inc
pop
or
lods
test
sti
in
mov
lods
adc
jp
mov
jne
xchg
lea
ds
test
add
push
cld
xor
dec
jb
push
push
jmp
mov
nop
pop
and
popf
pop
or
adc
or
xchg
lea
clc
popa
test
outs
adc
or
mov
adc
jnp
loope
sbb
push
adc
clc
jg
out
push
fwait
inc
push
add
adc
xchg
dec
push
push
aad
mov
sub
adc
xor
test
ins
xchg
pop
mov
mov
cdq
leave
rol
je
movs
mov
xor
adc
sub
xchg
and
loopne
jbe
add
xor
call
sbb
jne
stos
scas
sub
lea
aam
lods
lds
pop
mov
aad
addr16
adc
in
js
aas
adc
mov
and
out
pusha
push
dec
jmp
rcl
repnz
fucomp
movs
adc
sub
jns
jo
cmp
pop
inc
sbb
mov
inc
sbb
jl
ss
mov
xchg
mov
hlt
pop
and
mov
sbb
add
push
sub
fcmovb
dec
es
in
pop
cmp
fcom
movs
sbb
and
(bad)
outs
sbb
mov
in
jns
lock
xor
movs
pop
out
rcl
jne
xor
jecxz
lods
push
lahf
adc
dec
adc
mov
mov
adc
mov
imul
fidivr
scas
adc
movs
push
sbb
in
push
leave
fisubr
push
movs
fnop
pop
out
std
enter
jo
ret
sub
sbb
mov
sbb
cmps
mov
adc
cmp
mov
sub
arpl
sbb
(bad)
pop
sbb
sbb
and
mov
jmp
cld
in
(bad)
mov
mov
(bad)
dec
icebp
adc
cmp
sbb
mov
inc
js
mov
jno
daa
shr
xor
cmp
jnp
sbb
cmps
call
mov
call
cmc
movs
ror
movs
adc
dec
ret
mov
adc
cmp
mov
pop
pusha
inc
sbb
cdq
(bad)
(bad)
cli
adc
or
retf
pop
out
scas
dec
sub
in
mov
xor
xchg
sbb
push
mov
dec
int3
adc
pop
xor
vpperm
lods
dec
aam
dec
jo
pop
xchg
adc
xchg
xchg
jno
xor
in
sbb
mov
push
out
fist
and
adc
fidivr
and
rcr
loop
in
out
mov
retf
xchg
mov
mov
fs
shr
xor
loope
jae
push
push
(bad)
fdivr
(bad)
aam
out
pushf
imul
das
inc
pop
adc
hlt
sahf
dec
xor
jg
adc
push
sbb
aam
push
movs
fwait
aaa
lods
clc
add
push
add
pop
add
or
das
jno
out
pop
mov
add
ins
adc
xchg
je
ins
ins
mov
push
push
int
jp
push
and
loopne
mov
hlt
sbb
outs
and
inc
mov
dec
adc
inc
or
inc
cdq
and
jg
mov
xchg
adc
in
mov
ret
ja
cmc
push
or
movs
mov
mov
into
push
adc
mov
(bad)
xchg
or
(bad)
push
idiv
adc
adc
out
xor
fidiv
ins
sbb
and
add
inc
jl
and
sub
mov
stc
ficom
popa
add
adc
repz
or
iret
(bad)
mov
cli
ret
div
nop
pop
(bad)
fsubr
push
adc
rcl
imul
fst
pop
pop
jp
cmc
jle
cmp
dec
mov
call
(bad)
push
shl
xor
leave
or
adc
mov
fwait
nop
(bad)
push
dec
(bad)
sti
dec
lahf
addr16
sbb
adc
jno
mov
ins
fcom
sbb
cld
rcl
push
pop
(bad)
leave
stc
adc
addr16
add
fisttp
dec
aaa
jmp
mov
xor
mov
cdq
fwait
xchg
add
sbb
inc
sbb
jp
pop
bound
aam
in
movs
mov
(bad)
jp
dec
mov
retf
add
cmp
mov
in
cmp
and
ret
(bad)
out
hlt
mov
or
nop
mov
mov
imul
out
out
or
stc
jne
jae
adc
sub
mov
mov
sbb
outs
mov
dec
adc
push
mov
mov
pop
sbb
pop
outs
cmp
aam
hlt
ds
inc
sti
xchg
sub
in
lods
clc
sbb
inc
neg
test
test
cmp
inc
xchg
enter
xor
mov
gs
fwait
push
popa
lds
dec
idiv
jne
sbb
cli
cmp
mov
mov
hlt
adc
pusha
adc
add
test
jns
push
sbb
inc
xchg
add
push
push
sbb
frndint
jp
repz
adc
js
sub
inc
dec
adc
jb
jle
or
ins
popa
loope
pop
jmp
pop
mov
push
xor
pop
jp
adc
adc
pop
in
jmp
or
xchg
in
push
mov
mov
(bad)
cmp
int3
and
lock
push
pop
jnp
xchg
cs
cli
push
mov
add
in
inc
out
sub
adc
xchg
stos
loop
sbb
push
inc
jmp
adc
ins
aam
fadd
xor
clc
out
mov
sbb
fnstcw
mov
xchg
push
out
test
or
cmp
ret
pop
xchg
and
sub
sub
dec
pusha
movs
xchg
mov
xor
dec
dec
inc
nop
mov
fst
xchg
adc
inc
dec
rcl
adc
repz
jb
dec
adc
test
and
clc
xchg
adc
sbb
adc
mov
or
(bad)
add
sahf
inc
loopne
jno
ficomp
dec
les
outs
fs
retf
push
adc
xchg
fild
stc
add
inc
push
ins
push
sbb
mov
addr16
add
xchg
in
pusha
loopne
mov
or
aam
call
cmp
loop
clc
arpl
test
in
sbb
mov
jb
into
in
mov
and
or
xor
pushf
mov
adc
(bad)
mov
out
cdq
lahf
dec
jb
adc
test
adc
rol
out
adc
test
xor
and
sub
popf
(bad)
mov
sbb
aam
addr16
adc
pop
fsub
dec
pop
add
hlt
xchg
push
xchg
jge
cli
dec
adc
mov
add
adc
repz
ja
push
lahf
ret
adc
push
jns
fwait
add
adc
jle
je
mov
clc
xlat
imul
enter
fwait
push
icebp
out
js
sub
inc
xor
mov
fcomp
cmp
add
adc
or
imul
and
fisubr
mov
lods
mov
ss
test
pop
sbb
cld
mov
mov
adc
and
xlat
dec
imul
mov
int3
inc
movs
inc
clc
cmp
cmps
mov
(bad)
xor
sbb
test
push
retf
mov
adc
test
test
push
cli
pop
pop
outs
das
mov
lods
push
mov
sbb
in
push
imul
cmps
test
push
aam
dec
cwde
jle
mov
xchg
mov
sbb
call
retf
stos
cmp
arpl
cwde
adc
push
fldenv
fcom
push
outs
inc
scas
std
adc
xchg
sahf
gs
lods
test
jbe
(bad)
cmp
out
push
stos
icebp
in
pop
mov
daa
movs
fst
jnp
adc
lock
imul
adc
nop
jp
shl
iret
dec
adc
adc
ins
test
das
sbb
test
sub
mov
std
jbe
add
mov
test
cmps
retf
dec
out
xchg
adc
dec
fs
or
xchg
fst
das
clc
aad
loopne
inc
adc
dec
and
mov
fwait
mov
sar
out
push
pushf
jmp
iret
xor
sbb
test
adc
into
cmps
xchg
adc
icebp
cmp
fst
mov
gs
or
cwde
repnz
adc
mov
mov
push
or
(bad)
out
not
mov
and
ins
fstp
jo
clc
xor
xchg
add
stos
jmp
pop
(bad)
std
sbb
aaa
dec
mov
push
push
mov
push
adc
xchg
add
scas
adc
int
out
cld
inc
or
xchg
jp
lea
cld
loope
xor
cmps
xchg
shl
js
adc
imul
icebp
cwde
pop
stos
(bad)
leave
hlt
clc
sbb
test
jmp
sti
neg
push
sbb
hlt
int
ins
mov
test
adc
sub
adc
push
adc
push
pop
je
loopne
cdq
xchg
adc
push
lods
int3
xchg
inc
inc
xchg
outs
mov
and
jl
rcl
leave
xchg
test
mov
inc
and
dec
adc
(bad)
int3
stos
adc
dec
outs
mov
ret
jg
lock
and
sahf
add
aam
inc
sub
daa
(bad)
jl
imul
jge
pop
push
mov
adc
pop
adc
or
jno
adc
xor
sar
xor
pop
test
imul
lock
fs
(bad)
add
pop
and
mov
push
adc
mov
adc
outs
rcr
or
ror
adc
and
xchg
aaa
jg
popa
adc
push
inc
jnp
(bad)
fsubr
pop
jg
popa
ins
push
adc
(bad)
fs
bound
inc
daa
jnp
dec
pop
not
ins
dec
(bad)
pop
or
stos
and
out
fs
fst
shr
push
ret
icebp
cmp
adc
int
test
sub
adc
cmp
jecxz
mov
adc
cmp
pop
std
outs
mov
adc
jno
sbb
aas
(bad)
cli
(bad)
mov
iret
daa
outs
mov
and
jnp
(bad)
mov
jo
adc
sbb
stos
in
adc
test
or
rcr
adc
aaa
inc
mov
adc
loope
outs
icebp
adc
enter
or
cmp
inc
mov
cmp
pop
dec
mov
and
clc
clc
xchg
fnstenv
push
ror
gs
repnz
fwait
es
ins
aad
cdq
out
fisubr
push
dec
mov
or
cmp
mov
cmp
adc
mov
xchg
jle
sbb
out
mov
ins
jge
mov
cmp
adc
pop
(bad)
mov
adc
fsubr
pop
xor
sub
and
fadd
push
ds
test
sbb
aaa
add
or
mov
adc
ret
mov
repz
dec
cmp
pop
adc
cmps
jnp
inc
pop
jb
and
sub
mov
mov
xchg
clc
sar
adc
mov
retf
cli
jge
xchg
dec
pop
test
xacquire
stc
jle
sbb
cmp
or
aam
sti
mov
hlt
data16
lods
jl
push
fcom
adc
inc
shl
fst
test
adc
xor
xlat
adc
movs
xchg
mov
into
out
xor
out
push
(bad)
sbb
mov
sub
mov
call
add
in
add
push
push
scas
aad
jmp
idiv
pusha
adc
test
pushf
sub
xor
xchg
push
and
inc
fwait
neg
test
je
dec
mov
(bad)
out
in
into
mov
jne
push
mov
adc
ja
cmove
fsubr
in
push
dec
sbb
cs
imul
pop
in
push
or
out
movs
mov
je
sbb
add
adc
xchg
(bad)
xor
lds
je
test
fcomp
or
and
imul
outs
push
adc
add
sub
inc
cmp
unpcklps
xor
mov
adc
ds
(bad)
jmp
or
in
add
sub
fwait
adc
mov
adc
fsub
xchg
iret
mov
cmp
ins
out
ret
xchg
jnp
jp
adc
je
xchg
sbb
fcom
mov
add
adc
fs
sub
add
hlt
shl
clc
adc
(bad)
test
push
or
sar
in
out
imul
ret
movs
sub
adc
out
scas
and
lds
or
cmp
mov
xor
jnp
aas
pop
xor
imul
loopne
inc
(bad)
jmp
inc
mov
mov
sub
icebp
cwde
pop
push
sbb
inc
stos
and
xchg
nop
fiadd
adc
add
(bad)
dec
fstp
aam
adc
bound
popf
shl
push
sub
aam
sbb
xor
inc
mov
inc
xchg
retf
test
inc
in
mov
or
mov
mov
out
stos
pop
out
inc
test
jbe
lock
push
adc
mov
pop
sub
xchg
enter
sub
aam
inc
in
pushw
ds
push
push
jl
das
xchg
test
mov
add
outs
pop
adc
or
enter
lock
aam
test
imul
movs
not
mov
nop
inc
in
dec
adc
jno
sbb
mov
mov
mov
sub
(bad)
inc
test
aam
adc
jp
fidivr
imul
jle
sub
sub
in
popa
lock
and
cld
cmp
lahf
movs
sbb
imul
pop
rcl
lock
or
sar
popf
fadd
adc
jae
enter
cwde
push
lock
pop
loope
fisubr
pop
adc
mov
sub
xchg
pop
icebp
lds
cwde
mov
push
adc
ficomp
shl
pop
add
jbe
cmp
sbb
xchg
sbb
bound
imul
jmp
xchg
xor
gs
jle
or
mov
ss
sar
mov
cmc
or
sub
pop
int
xor
jnp
mov
adc
hlt
shl
push
(bad)
adc
(bad)
pushf
jmp
gs
jnp
sbb
pop
hlt
outs
or
jo
mov
inc
and
stos
xchg
pop
in
push
adc
icebp
jbe
xor
(bad)
fist
mov
imul
int3
test
dec
mov
adc
xor
sbb
fcmovbe
mov
fcmovnb
fsubr
sbb
and
cwde
mov
adc
xchg
push
and
adc
jp
sbb
jo
xchg
adc
mov
mov
xchg
pop
dec
xchg
cmp
outs
jmp
in
mov
mov
mov
add
in
fs
add
pop
adc
pop
jl
dec
push
stos
lea
sbb
xlat
adc
jmp
jecxz
mov
jb
adc
or
sbb
pusha
cmps
adc
dec
and
adc
call
cmp
adc
fbstp
cld
cdq
and
inc
add
js
xor
cmp
test
dec
mov
lahf
add
fiadd
jecxz
mov
addr16
imul
adc
clc
push
inc
inc
push
cmp
xchg
mov
(bad)
pop
and
mov
push
rcl
adc
shl
jmp
add
retf
(bad)
cli
aas
adc
sub
jno
push
xor
addr16
loope
sbb
sub
xchg
adc
fsubr
mov
adc
mov
sbb
fdivr
mov
adc
xor
fidiv
cmps
or
mov
fsub
sbb
pcmpeqw
clc
cmp
mov
icebp
xchg
adc
pushf
sub
cmp
adc
(bad)
sbb
jo
sbb
scas
(bad)
jb
push
xor
jo
lock
push
repz
or
stos
js
jnp
call
or
call
xchg
adc
jge
adc
mov
out
adc
adc
dec
cmp
inc
add
(bad)
cmc
mov
sahf
in
ins
inc
imul
cmp
arpl
mov
loopne
sub
adc
adc
push
test
in
inc
cwde
aam
add
add
test
stc
daa
mov
sub
outs
test
fnstcw
add
xor
mov
cmp
adc
(bad)
cwde
lahf
stos
cdq
icebp
jns
cmp
shl
xor
ror
es
lods
lods
mov
jae
jl
das
and
out
jo
adc
jno
mov
movs
jmp
pop
cdq
jns
push
adc
out
pop
add
das
sbb
es
xor
mov
jge
movs
sub
imul
mov
xchg
loope
push
add
adc
int3
xor
add
push
jg
xor
cdq
adc
loopne
pop
xchg
retf
jne
sbb
mov
rcr
add
imul
scas
adc
repz
mov
push
push
test
adc
dec
xor
aaa
inc
loopne
jmp
or
leave
je
jge
xchg
mov
xchg
daa
add
mov
repnz
js
adc
aam
sbb
bound
adc
push
add
mov
mov
ret
add
enter
lods
jge
and
stos
adc
jecxz
jno
xchg
cmps
jmp
cmp
(bad)
pop
fsub
push
repz
(bad)
rol
outs
cmp
or
jo
or
inc
sahf
sbb
add
cmps
rcr
mov
adc
add
and
jmp
sub
dec
pop
and
bound
mov
mov
call
lds
or
inc
lahf
loop
xchg
fwait
adc
jo
jge
imul
in
stos
sub
sbb
rol
ret
cmp
or
stos
xchg
test
push
cmps
xor
pop
mov
fs
sbb
aad
dec
cdq
pop
mov
xor
push
in
adc
inc
jnp
xchg
mov
pop
push
loopne
and
push
inc
dec
sbb
fst
mov
add
jmp
repz
mov
pop
out
mov
ins
mov
and
inc
mov
xor
rcl
sbb
out
mov
or
sbb
fs
fild
xchg
sbb
lods
pop
sub
jno
push
adc
cmps
push
fnop
idiv
xchg
sub
(bad)
cmps
cmps
xlat
ret
jmp
sbb
mov
jp
pop
adc
inc
jmp
mov
fwait
in
add
lods
adc
push
cmp
dec
push
sbb
and
les
or
cmp
mov
push
cdq
sahf
and
cli
mov
cmp
mov
test
fwait
jbe
mov
out
adc
in
stos
repnz
xlat
add
sub
popa
jo
sub
enter
dec
inc
inc
aam
call
shr
dec
rcr
fstp
lods
push
xor
lock
or
sbb
push
push
fld
loopne
xchg
add
adc
cmps
xchg
(bad)
mov
retf
or
cmp
xchg
cld
mov
imul
aam
loope
mov
je
stc
cs
jbe
or
repz
push
sbb
xchg
in
sbb
sub
and
in
jno
jg
into
xchg
sub
sub
push
adc
inc
mov
jae
pop
imul
fs
add
stc
pop
aaa
cmp
inc
pop
pop
push
dec
cli
dec
adc
xchg
sar
jl
mov
adc
cmp
jne
sbb
mov
loop
pushf
mov
cmp
test
ins
mov
adc
ss
loop
in
mov
or
in
or
loopne
xor
cmps
lods
mov
(bad)
adc
pop
ins
dec
hlt
fs
mov
stos
mov
lods
nop
(bad)
aam
and
adc
mov
into
inc
out
adc
call
add
push
int3
sub
sbb
daa
mov
pop
pop
mov
stos
call
dec
push
call
mov
jl
adc
and
sbb
push
xchg
fldenv
sub
adc
xchg
mov
sbb
xor
pusha
xor
pop
jns
or
(bad)
pop
fsubr
dec
xor
iret
lods
ds
fidivr
adc
gs
popf
xchg
loop
icebp
mov
stc
call
not
sbb
cmp
mov
stos
adc
cld
jmp
and
clc
ret
mov
sub
push
or
(bad)
(bad)
aam
sti
dec
out
jl
add
adc
(bad)
loopne
or
movs
adc
fnstenv
cmp
cli
hlt
retf
add
mov
fadd
sub
adc
and
push
xor
(bad)
ffree
adc
dec
ss
dec
cmp
push
xchg
popf
icebp
jmp
sbb
sar
sub
leave
adc
and
and
sbb
mov
add
inc
push
or
out
ret
cmp
xchg
ja
or
adc
ret
dec
ins
ret
add
mov
mov
push
sbb
mov
add
movs
popf
ret
and
and
xchg
mov
shr
adc
fadd
fwait
jl
rcl
jp
pop
hlt
lds
xor
jmp
fcomp
outs
add
lea
icebp
dec
xchg
test
adc
sub
sbb
sar
sbb
dec
dec
test
imul
popa
das
adc
frstor
mov
mul
lahf
cmp
call
call
scas
test
xchg
mov
push
fild
into
psubd
mov
addr16
movs
lods
adc
sbb
xchg
jg
push
push
adc
push
ds
lahf
cmp
mov
test
lock
cmp
mov
adc
pusha
dec
xchg
jmp
inc
cmp
push
call
cli
add
xchg
je
cmp
(bad)
adc
in
shl
pop
push
fs
lahf
call
or
push
fadd
jns
in
ins
cmps
xchg
out
mov
xbegin
push
fs
xor
retf
mov
mov
mov
xor
adc
mov
in
hlt
pop
sti
in
and
adc
xor
mov
(bad)
xchg
adc
adc
fbstp
in
lahf
mov
and
sbb
loope
mov
sbb
inc
and
lock
push
jge
jne
cdq
and
jmp
add
in
cs
pop
mov
push
push
push
pop
sub
into
cmc
dec
sbb
sbb
loopne
fwait
sbb
inc
mov
add
push
mov
jmp
cmp
test
iret
dec
outs
bound
mov
in
ins
(bad)
xlat
in
xchg
mov
aam
mov
or
xchg
push
out
pusha
xchg
pushf
adc
and
push
loope
jp
xor
out
outs
inc
adc
loopne
ss
aam
or
xchg
xchg
cs
cli
sub
dec
jno
sbb
nop
push
fcomp
loopne
xor
xchg
ins
sub
sbb
mov
out
adc
(bad)
and
std
push
mov
out
mov
mov
sti
movs
imul
adc
stos
pop
popa
arpl
adc
mov
inc
sbb
xchg
call
rcl
lock
adc
mov
sub
xor
xchg
adc
aaa
jnp
retf
mov
mov
enter
push
cmp
fs
scas
and
cld
and
jle
mov
mov
mov
sbb
clc
in
adc
ret
cmp
xor
lahf
popa
cwde
gs
stos
sbb
pop
push
pop
iret
not
mov
je
jnp
in
push
cdq
push
test
mov
int3
outs
adc
cs
inc
sahf
pop
pop
adc
ins
push
ss
sub
inc
inc
arpl
scas
jae
cld
jnp
adc
inc
mov
hlt
adc
xor
loope
and
push
cmp
mov
add
pushf
sub
push
mov
inc
mov
push
cmp
adc
pusha
fild
mov
icebp
sub
adc
div
iret
fidiv
stos
mov
fiadd
movs
xchg
sbb
dec
jne
sbb
pop
rcl
pop
ret
add
pop
adc
mov
adc
or
retf
icebp
adc
pop
mov
push
cmp
cmp
and
mov
mov
pop
pop
pop
adc
mov
sub
sbb
(bad)
and
pop
sub
push
fidiv
mov
cmc
adc
mov
pop
leave
test
or
mov
mov
in
pop
out
aas
sbb
scas
mov
mov
int
xchg
in
pop
repnz
pop
cs
jmp
adc
push
pop
cmc
or
push
movs
or
(bad)
(bad)
hlt
dec
hlt
adc
cmp
call
mov
(bad)
xchg
push
adc
test
sub
rcl
mov
pop
(bad)
or
cdq
cmc
dec
cmp
pop
push
add
into
xchg
sub
sbb
push
sar
xlat
repnz
adc
loop
int3
xchg
(bad)
adc
push
or
add
shl
inc
adc
test
imul
inc
pop
cli
retf
jmp
movs
adc
mov
and
or
sbb
adc
outs
push
sbb
lock
call
adc
scas
add
(bad)
int3
and
ins
xchg
push
push
mov
or
hlt
ja
dec
xor
call
out
popf
sqrtps
sbb
adc
jne
fwait
jp
xchg
jnp
adc
popf
and
(bad)
mov
fadd
add
xchg
jns
in
ret
sbb
js
cmc
pop
je
(bad)
jecxz
bound
cld
mov
sti
inc
or
fsub
jge
shr
leave
sub
push
hlt
imul
adc
jo
std
addr16
lock
push
inc
pop
push
pop
pop
in
setae
jb
(bad)
mov
rcr
adc
sub
outs
xor
aas
pusha
loope
xlat
das
xchg
push
js
xchg
cmp
arpl
inc
push
out
adc
push
pushf
(bad)
rcl
inc
adc
daa
and
mov
jbe
pop
and
jl
add
adc
(bad)
retf
icebp
lds
ret
je
adc
inc
pop
in
jnp
sysexit
adc
fmul
or
call
mov
lds
and
dec
adc
js
popa
inc
dec
out
je
repnz
push
and
cmp
shl
push
out
nop
(bad)
int3
test
xchg
retf
xchg
sbb
mov
movs
cld
es
clc
pop
adc
call
cmc
dec
xchg
or
xchg
iret
adc
inc
mov
enter
call
leave
aam
add
push
xor
inc
mov
adc
mov
jb
into
mov
jmp
cmp
jge
sbb
pop
aam
rol
out
sbb
add
ret
xor
not
cwde
sar
push
adc
inc
aam
icebp
je
xor
pushf
and
je
aaa
push
xchg
adc
or
push
adc
int3
inc
inc
into
cmps
pop
and
daa
fcomp
clc
icebp
push
push
(bad)
cld
call
jo
cmp
mov
adc
mov
push
cmp
adc
call
mov
aad
push
lds
adc
popf
nop
and
jbe
add
sub
inc
adc
cmp
frstor
cdq
(bad)
jnp
stos
sbb
xchg
das
xlat
jb
jae
mov
xor
jp
push
inc
aam
into
retf
sbb
jmp
push
sbb
pop
outs
inc
fsubrp
or
popa
inc
add
fwait
repnz
adc
pop
sysret
dec
daa
sub
aas
jle
lods
in
rol
mov
sub
aam
push
call
sbb
adc
jecxz
cdq
cmp
or
mov
mov
shl
shr
pop
pop
les
mov
push
xlat
add
jmp
xor
cmp
mov
ds
fadd
mov
data16
int3
cmps
ss
cmps
hlt
mov
pop
sub
sahf
jle
xchg
sahf
imul
dec
outs
aam
loop
inc
add
ror
je
push
jo
and
sub
popf
in
mov
mov
jecxz
xor
sub
push
push
dec
movs
jl
push
gs
jnp
adc
ss
fisttp
sbb
xchg
push
bound
lock
add
inc
sti
adc
ins
sbb
jns
bound
sbb
stos
mov
pop
popf
add
lock
and
pop
fwait
test
inc
push
push
scas
dec
retf
stc
xchg
pushf
dec
ficom
adc
es
mov
pop
mov
fs
adc
add
fist
cdq
inc
sbb
mov
xchg
xor
and
(bad)
mov
push
loope
pushf
add
and
mov
aam
cmp
adc
test
xor
enter
add
cli
aas
hlt
adc
push
iret
push
fldcw
mov
xchg
cmp
xchg
xchg
nop
std
mov
(bad)
shl
in
pop
sti
adc
sub
mov
cmp
not
sbb
adc
jns
pushf
adc
adc
sbb
ficomp
xor
es
sub
xchg
cmps
jge
jbe
mov
lahf
mov
mov
sar
std
cdq
mov
jo
xor
call
clc
inc
js
icebp
push
pop
shl
in
push
imul
and
cli
int
adc
push
mov
and
push
out
fst
push
in
(bad)
push
sub
popa
add
xor
adc
adc
xlat
fistp
mov
pop
sbb
xchg
xlat
retf
(bad)
imul
jno
test
xor
repnz
lahf
sub
int
xchg
push
lods
xor
lods
and
adc
scas
and
mov
mov
dec
jecxz
pop
jmp
add
ss
dec
out
adc
xor
aad
push
out
ficom
mov
out
mov
pop
sub
cmp
sbb
mov
dec
xor
push
ret
sbb
push
xchg
adc
or
mov
push
(bad)
mov
adc
idiv
into
leave
push
arpl
jg
dec
fadd
aad
sub
jmp
(bad)
ins
inc
xlat
inc
push
ret
pushf
jl
movs
retf
sti
push
adc
sar
jmp
test
cli
daa
mov
adc
leave
mov
loop
sbb
fcmovu
adc
jmp
sub
jle
pop
add
sbb
fmul
in
mov
xchg
adc
pop
cmp
test
or
outs
xor
cmp
sbb
mov
lods
adc
pop
rol
cmp
adc
ja
cmc
(bad)
mov
loopne
mov
(bad)
jecxz
lds
mov
sar
pop
adc
cmc
ins
inc
cdq
jo
shl
jns
xchg
adc
iret
push
mov
jmp
stos
inc
and
in
das
fcom
add
xchg
sbb
shr
leave
cs
sub
cmc
aad
sahf
pusha
push
adc
pusha
jmp
fwait
adc
shl
loopne
icebp
mov
xchg
je
mov
cmp
xchg
xchg
pop
push
not
loopne
hlt
adc
pushf
mov
xor
(bad)
and
cmp
clc
or
das
jae
xchg
xchg
sti
inc
push
lahf
mov
adc
push
mov
sbb
loopne
xchg
fs
adc
xor
adc
hlt
adc
bound
mov
xor
xchg
in
sbb
add
stos
dec
jmp
clc
fsub
xor
push
cmc
pop
pushf
aas
aam
xor
push
jecxz
int
cli
iret
ins
sbb
lahf
adc
out
sub
outs
adc
xchg
popf
or
movs
int
pusha
test
push
cmps
cmp
std
fst
dec
adc
jle
sar
jge
pop
adc
mov
nop
mov
cmp
dec
mov
push
ss
mov
stos
mov
mov
cmp
xchg
ficom
mov
inc
adc
out
lea
adc
adc
inc
sar
push
adc
adc
pop
mul
jae
call
xor
hlt
inc
test
lea
out
pop
div
mov
pop
ret
(bad)
cmp
sbb
jno
push
clc
mov
mov
push
sub
xchg
pop
and
les
test
call
ret
mov
pop
adc
pop
addr16
mov
inc
cmp
adc
adc
imul
fcom
and
jmp
adc
jp
jne
enter
xor
lahf
cmc
(bad)
pushf
jmp
cmp
ret
test
xchg
fisttp
ja
xor
out
adc
mov
loope
outs
dec
adc
ficomp
mov
sbb
xor
lea
mov
setbe
adc
repnz
fs
and
repz
and
or
cmc
mov
cmp
sbb
movs
dec
mov
jp
and
dec
ins
push
adc
fisub
sub
retf
clc
cdq
or
cmp
push
push
mov
jg
aas
aam
cld
in
jmp
jmp
clc
adc
xor
sbb
mov
ins
adc
jle
stc
dec
sub
dec
hlt
ss
hlt
push
mov
or
scas
out
call
push
int3
push
and
xor
pop
sbb
pop
(bad)
cwde
loopne
xchg
rcl
push
fwait
push
sbb
repz
adc
jne
pop
in
xchg
and
je
cmp
xchg
sysexit
fsubr
cmp
aas
or
jne
adc
lds
fdiv
adc
and
or
push
cmp
push
shr
add
sbb
mov
shl
dec
jl
adc
lods
mov
dec
enter
je
adc
adc
or
aad
or
adc
retf
daa
mov
xchg
xchg
pop
xor
xor
(bad)
jge
push
xor
and
dec
inc
xor
cmovbe
adc
push
inc
imul
mov
mov
adc
aam
pop
cli
or
outs
je
cmp
lods
push
dec
imul
cmp
add
sbb
pusha
cwde
inc
shr
sub
daa
or
fistp
sub
fisttp
(bad)
sbb
push
out
mov
inc
clc
sbb
push
push
mov
pop
inc
lock
sub
dec
adc
add
adc
test
outs
or
xor
sbb
add
mov
rol
mov
inc
dec
stos
xchg
jnp
push
push
push
push
sub
fmul
adc
mov
ss
sbb
lock
sar
inc
mov
repnz
sbb
xlat
je
mov
adc
(bad)
jecxz
retfw
xor
xchg
jge
xor
cmp
dec
iret
cmp
mov
scas
add
push
jo
mov
xor
pop
in
fild
xlat
cmp
sub
xchg
jmp
dec
push
push
adc
pop
mov
dec
test
adc
popf
cli
loope
sbb
jno
cwde
mov
test
mov
outs
sub
and
dec
call
shl
push
xchg
pop
(bad)
jne
bound
inc
add
pop
fdivr
test
xor
mov
adc
mov
hlt
sbb
scas
pop
cmp
mov
popf
dec
jmp
popa
pop
stos
jbe
or
inc
loopne
push
aas
sbb
mov
repnz
sbb
cmp
adc
adc
cwde
out
es
xor
in
mov
leave
in
imul
push
arpl
push
lea
sahf
rcr
mov
shr
mov
sbb
repnz
adc
mov
aam
cmp
bound
pop
pop
cmp
cmp
addr16
cmps
cmps
jno
cdq
jle
adc
dec
mov
jmp
push
push
bound
mov
ja
lods
out
adc
(bad)
fcomp
add
dec
pushf
push
pop
cmps
sub
inc
es
pop
pop
mov
sti
aam
mov
les
nop
setnp
fs
adc
push
fcom
sbb
imul
inc
imul
pop
std
sar
mov
fild
mov
jae
(bad)
jge
das
jecxz
fs
mov
es
jmp
fwait
adc
or
inc
stos
adc
aas
into
cmp
add
adc
adc
jmp
inc
sar
mov
adc
imul
(bad)
mul
cmp
adc
jbe
in
jg
or
and
pop
xchg
stc
ficomp
rcl
sbb
popa
dec
dec
repnz
pop
adc
jecxz
adc
mov
adc
adc
loop
lea
fbstp
mov
dec
mov
loop
and
rcr
ins
adc
xchg
sbb
dec
lahf
push
(bad)
nop
das
fldcw
mov
cmp
icebp
mov
jo
jns
popa
rol
in
cdq
jmp
add
xchg
adc
jmp
shl
scas
aaa
sti
scas
retf
lahf
cwde
inc
adc
retf
pop
mov
adc
jle
repz
push
loop
xchg
adc
loopne
mov
pop
sub
and
mov
adc
pop
xor
push
adc
je
jg
pop
jnp
stos
out
xchg
in
mov
xor
(bad)
cmp
popa
(bad)
mov
call
xchg
das
sbb
adc
cmps
daa
dec
retf
(bad)
jbe
adc
add
add
adc
les
jmp
cmps
jbe
fcmovnbe
cld
pop
adc
xor
loop
addr16
pop
pop
adc
xchg
jmp
ds
push
or
adc
xor
iret
and
fisttp
mov
std
adc
and
into
inc
inc
in
jmp
xor
enter
ds
sbb
fdivr
in
push
push
lock
adc
ret
xor
daa
addr16
int
stos
adc
add
adc
mov
js
push
out
fs
lods
adc
nop
fdiv
adc
dec
jp
and
cld
popf
loop
inc
imul
push
aam
mov
popf
sub
call
dec
inc
push
icebp
mov
imul
fisttp
js
push
pop
mov
loopne
mul
sbb
push
cli
inc
mov
gs
sbb
(bad)
xlat
xor
adc
dec
cmp
aaa
das
rcr
test
xor
(bad)
xlat
xchg
and
adc
xlat
daa
aad
jl
or
mov
aas
(bad)
(bad)
push
or
nop
in
inc
sahf
and
sub
adc
mov
imul
cmp
adc
sbb
pusha
jmp
fwait
ret
sub
mov
outs
jno
div
test
lods
add
aaa
mov
xchg
scas
sbb
ret
adc
jge
inc
inc
rcl
bound
xor
mov
jg
fsubr
mov
hlt
dec
xchg
sbb
jbe
js
cld
sub
and
les
sub
arpl
jae
mov
push
lahf
(bad)
xchg
xor
clc
mov
ficomp
dec
and
push
lahf
or
js
imul
xor
add
and
fadd
call
fdivr
sbb
ds
jmp
adc
in
in
xchg
js
push
call
sbb
loopne
lds
or
adc
mov
sti
dec
scas
into
push
pop
(bad)
adc
jmp
aam
xchg
repz
inc
cmp
and
cs
mov
test
in
daa
add
sbb
sub
data16
xor
clc
mov
sahf
adc
repz
outs
pop
call
push
inc
andps
adc
inc
xor
mov
dec
xor
and
call
in
or
xchg
and
in
adc
cmp
pop
adc
jnp
enter
in
sbb
hlt
mov
daa
xchg
mov
push
(bad)
enter
mov
test
gs
daa
adc
stos
lea
jl
cwd
push
lds
frstpm(287
pop
mov
xor
mov
ret
push
and
push
sub
movs
clc
(bad)
mov
dec
hlt
cld
push
mov
dec
ret
inc
(bad)
call
or
fisubr
push
mov
ins
lock
outs
sbb
inc
in
or
lds
push
push
xor
adc
jae
aam
loope
loopne
adc
dec
dec
lods
les
and
adc
cmp
sbb
stos
add
inc
bound
adc
jns
add
addr16
mov
adc
loopne
fcom
push
sbb
popa
jmp
scas
not
inc
fimul
push
js
or
sbb
ficom
mov
jbe
push
scas
mov
dec
xor
out
ins
out
adc
or
push
jmp
xchg
adc
jp
pop
adc
bound
pop
rcl
and
push
cmp
(bad)
add
xchg
call
cmps
push
stos
or
leave
dec
imul
mov
scas
push
sbb
fcomi
pushf
jno
or
pop
test
jae
push
mov
add
mov
leave
pushf
inc
xor
je
rcr
fadd
jo
sbb
fld
aad
and
xchg
test
cmp
mov
add
aas
dec
dec
adc
xor
pusha
jnp
lods
shrd
js
arpl
adc
fwait
mov
jbe
mov
aas
(bad)
outs
adc
into
adc
fs
jg
imul
sbb
mov
xor
test
cwde
or
or
adc
xchg
dec
inc
mov
and
ins
cld
and
mov
xchg
lods
call
inc
ja
daa
mov
sbb
es
xchg
or
pop
adc
test
sub
cmc
fist
xor
ss
push
adc
out
call
(bad)
push
xor
test
ins
adc
aam
xchg
sub
sbb
fistp
adc
mov
fmul
and
lds
sbb
lods
and
mov
mov
mov
cmp
repnz
popf
xchg
adc
mov
test
mov
cmp
icebp
or
mov
push
aam
or
and
jmp
fwait
adc
push
and
stc
or
dec
push
sbb
xlat
loop
xchg
sbb
outs
imul
mov
in
das
les
pop
mov
push
dec
adc
add
clc
ins
hlt
imul
aaa
xor
mov
ja
push
pop
loopne
mov
or
es
push
cs
fwait
clc
xor
jle
outs
push
jo
inc
lods
cmp
mov
jbe
pop
retf
out
lahf
retf
mov
in
xchg
mov
jo
mov
adc
ss
adc
push
and
sbb
push
xor
sub
adc
sbb
(bad)
adc
mov
cs
scas
rcl
enter
clc
jmp
pusha
out
xor
sti
mov
mov
movs
xor
mov
adc
sar
push
inc
mov
sbb
out
adc
adc
add
jno
cli
jns
xchg
iret
rcr
adc
test
adc
mov
xchg
pop
(bad)
xchg
test
hlt
cld
inc
adc
(bad)
(bad)
adc
mov
adc
imul
adc
icebp
jae
push
fnstcw
inc
push
and
sbb
aad
sub
das
add
int
xlat
and
adc
and
in
jb
push
xor
ins
push
jns
jmp
popf
int
add
imul
mov
push
mov
arpl
mov
cmp
xor
cmc
sub
outs
fst
pop
addr16
cmp
xchg
and
push
clc
add
aas
mov
mov
adc
out
or
xchg
adc
imul
adc
scas
hlt
mov
inc
mov
pop
dec
fild
cmp
mov
pop
test
dec
adc
ds
cmc
dec
inc
pop
adc
aam
and
fcom
cmps
in
push
xor
popa
fist
mov
mov
outs
pop
adc
add
jnp
je
jg
dec
shl
sbb
jl
mov
nop
lahf
in
jle
aam
xchg
hlt
adc
pop
push
pop
rol
push
jg
adc
pop
sti
and
adc
mov
push
mov
jno
sub
and
cmp
and
adc
out
dec
in
jge
mov
pop
mov
or
sbb
pop
shl
movs
xchg
mov
fisubr
xchg
cmc
mov
jge
jns
outs
mov
(bad)
shl
rcl
pop
outs
ins
push
scas
addr16
sbb
pop
das
mov
test
pop
adc
dec
jns
out
lea
sub
hlt
std
adc
psubusb
or
sti
ss
add
idiv
xor
or
pop
and
dec
scas
movs
lea
je
jmp
push
and
mov
sbb
mov
cs
sub
and
mov
jb
sbb
mov
xor
dec
push
add
call
mov
(bad)
ficom
sbb
je
jle
xor
inc
xor
add
mov
sbb
mov
dec
mov
in
shl
adc
or
pop
push
fdiv
mov
adc
jnp
jmp
cmp
ss
cli
add
lods
sbb
iret
push
aam
xchg
pop
fst
out
push
pop
outs
push
and
push
mov
jb
mov
mov
adc
dec
pop
daa
xor
or
movs
call
ins
cmc
test
lock
daa
adc
dec
fs
sub
cwde
mov
aam
cdq
jnp
ins
inc
loope
mov
sbb
test
lea
adc
mov
cmp
xchg
lfs
data16
adc
and
imul
adc
in
mov
add
aam
adc
mov
pop
xlat
test
in
pop
jmp
jno
sbb
mov
xchg
inc
cmps
scas
arpl
adc
lahf
sub
adc
or
pop
cmp
cmp
adc
out
inc
ja
mov
adc
sub
bound
xor
fild
gs
xor
dec
arpl
out
cmp
cli
dec
and
stos
lahf
or
or
push
cmp
adc
mov
jnp
adc
mov
(bad)
test
aad
inc
ror
out
add
push
test
adc
cmp
mov
movs
mov
adc
push
(bad)
(bad)
rcr
(bad)
push
ins
dec
rcr
xchg
and
and
nop
push
cmp
lock
daa
xor
mov
push
repnz
mov
shr
or
sub
aam
rcr
or
jo
adc
mov
lods
pusha
adc
movs
enter
call
ret
sub
data16
jo
nop
repnz
movs
cmp
adc
mov
out
inc
jns
pop
cld
imul
push
out
fsub
and
std
pusha
mov
and
mov
test
inc
add
mov
fdivrp
xchg
dec
rcl
and
cs
or
jecxz
pop
dec
test
pop
mov
rcr
in
out
jge
xlat
shl
prefetcht1
mov
retf
hlt
adc
or
int3
cmp
ficom
loopne
adc
in
jmp
cmc
fsub
hlt
aam
aam
inc
sub
aaa
and
jge
mov
aam
cmps
dec
jb
cmp
dec
jnp
stos
daa
mov
in
out
xor
les
or
cmp
mov
add
aaa
pop
mov
jg
dec
or
enter
xchg
mov
add
dec
adc
push
mov
and
and
mov
leave
lea
jne
adc
sbb
ds
sbb
out
adc
mov
pop
mov
bnd
cmp
idiv
jge
pop
cmps
cld
cmp
adc
adc
add
cmps
mov
pop
imul
out
cli
movs
adc
outs
outs
stos
xchg
inc
gs
push
setg
clc
cmp
pop
lds
sub
adc
cmps
lods
test
in
les
pusha
sub
add
adc
out
les
lods
mov
leave
push
int
pop
bound
jmp
out
adc
out
dec
jmp
dec
popf
xchg
adc
push
pop
cli
fsub
dec
or
aam
ret
rcl
add
jbe
or
popf
sub
repnz
adc
ret
sub
jmp
adc
es
adc
(bad)
or
ins
dec
mov
je
sbb
movs
mov
aaa
dec
or
fcom
jne
mov
call
cmp
cwde
adc
rol
xor
mov
movs
pop
pop
adc
sbb
popa
mov
mov
retf
adc
repz
loop
fs
mov
adc
inc
js
ins
inc
mov
adc
or
adc
nop
adc
(bad)
ficom
inc
dec
aam
xor
dec
lock
mov
adc
mov
sar
adc
(bad)
jne
retf
dec
push
fsubr
cli
movs
dec
sub
inc
jae
das
sub
repz
inc
mov
or
mov
adc
cmc
fstp
aad
pop
adc
and
jnp
cmps
jmp
imul
push
adc
jmp
adc
outs
je
fld
leave
adc
xor
les
stos
fidiv
mov
sub
(bad)
adc
pop
in
mov
push
mov
jle
fist
fnstenv
mov
sub
push
mov
push
pop
jmp
xchg
scas
mov
push
pop
lods
push
sar
cdq
pusha
or
jne
adc
adc
mov
dec
adc
stc
cmp
adc
addr16
push
cmp
ret
(bad)
jp
push
fadd
mov
pop
je
ins
pop
push
stos
test
push
xor
data16
imul
stos
push
or
push
sbb
(bad)
xchg
ret
ja
and
stos
cmps
and
xchg
retf
out
vmwrite
arpl
dec
cmc
xchg
or
fwait
les
test
push
and
lahf
retf
test
fdiv
jmp
(bad)
leave
jl
add
xor
sahf
mov
inc
cli
ins
aad
sbb
fiadd
jbe
xchg
mov
pop
adc
pop
and
in
jmp
cmps
push
mov
jns
mov
jmp
das
jg
out
data16
pop
pop
pop
or
lahf
or
adc
cmps
int
movs
les
pop
popa
push
cs
push
int
pop
mov
cmp
inc
retf
repz
jae
mov
mul
jle
sahf
and
xor
pushf
aad
lods
jl
loope
setle
sbb
shr
bound
mov
scas
pop
and
stos
lods
adc
dec
fwait
mov
rcr
ror
inc
adc
or
vpmacsswd
adc
xlat
xchg
sbb
popf
lea
push
dec
mov
inc
push
xor
fisttp
shr
in
stos
retf
mov
icebp
scas
pop
aad
mov
inc
mov
int
sbb
jl
push
pop
movs
or
rcl
sbb
mov
sub
jmp
lods
or
xor
pop
inc
push
ret
cmp
je
adc
arpl
jp
neg
sbb
inc
ja
addr16
dec
fst
and
cwde
pop
pop
xor
push
ins
cmp
or
out
and
ins
add
mov
jge
jb
adc
scas
(bad)
xchg
aad
rcl
adc
int3
call
es
test
push
jecxz
xor
xor
cdq
ja
adc
imul
inc
(bad)
fmul
shl
cmp
or
pop
pop
mov
sbb
jno
and
retf
sbb
pushf
hlt
fisttp
pop
imul
rcl
popf
inc
and
adc
jbe
or
dec
jmp
mov
pop
push
sub
(bad)
mov
das
movs
and
fsub
push
retf
push
cwde
sbb
mov
cmp
test
sub
push
xchg
mov
ret
sbb
retf
add
add
mov
es
mov
mov
int3
repnz
ins
arpl
inc
nop
std
ss
dec
std
adc
popf
(bad)
push
popa
adc
or
iret
pop
jns
pop
jge
adc
jle
outs
test
fsubr
mov
repz
in
pop
imul
push
fnsave
pop
aam
dec
shl
ja
sbb
in
jo
out
iret
loopne
sbb
shl
ds
pop
dec
push
popa
aam
pushf
mov
repz
pop
add
adc
sub
fdivr
test
sbb
fs
adc
and
test
or
adc
pop
push
sbb
outs
push
inc
mov
arpl
add
lock
push
push
adc
xchg
mov
jg
outs
adc
mov
inc
adc
jp
add
sub
sbb
lds
adc
inc
fstp
sbb
pop
fs
jmp
mov
cmp
adc
clc
mov
and
test
sbb
xlat
scas
jle
xchg
xor
inc
or
inc
add
div
dec
adc
push
push
daa
ins
test
jecxz
dec
cmp
stc
pop
lock
add
(bad)
mov
xchg
adc
aaa
or
dec
call
fist
aam
lods
jo
into
push
or
mov
dec
sbb
xchg
aam
ja
cmp
ficom
and
sar
inc
adc
cmp
dec
or
(bad)
in
jo
or
add
in
fstp
sub
adc
add
in
ret
or
gs
xchg
dec
cmps
pop
dec
sbb
adc
imul
sub
cli
xor
je
push
hlt
push
movs
cmp
call
sbb
retf
(bad)
adc
sbb
mov
xor
or
retf
pop
sbb
inc
pop
cmp
and
mov
hlt
sub
cs
push
dec
mov
fcmovnbe
inc
ficomp
call
retf
lea
je
xchg
cmp
mov
inc
and
loope
retf
(bad)
xchg
jge
and
adc
xor
repz
sbb
outs
ins
mov
mov
mov
adc
fsubr
cmp
shl
pop
mov
jl
imul
movs
or
adc
mov
adc
ret
mov
xlat
or
scas
pushf
pop
push
mov
jne
movs
adc
inc
call
pop
movs
ret
sbb
and
sti
adc
(bad)
sahf
stos
dec
lods
ja
adc
add
inc
push
jmp
inc
adc
loop
pop
jo
push
fwait
adc
cmc
sar
sub
add
hlt
lock
rcr
or
sbb
call
mov
test
xchg
mov
or
jmp
fistp
add
adc
jns
sar
sbb
and
sbb
pop
(bad)
popf
mov
xchg
cmps
mov
and
pop
adc
(bad)
jecxz
mov
sub
adc
cli
mov
or
mov
stos
jne
mov
push
push
es
mov
mov
leave
pop
aam
sbb
adc
mov
and
and
sbb
jb
fistp
repz
aam
push
or
xor
(bad)
retf
es
fsub
inc
ret
mov
into
xor
push
adc
enter
je
mov
std
push
dec
imul
sub
push
cmp
xchg
jne
sub
push
sar
jl
cmp
jle
and
jp
cmp
inc
adc
dec
test
sbb
xor
cwde
adc
dec
adc
jl
aam
mov
inc
pop
int
stc
jnp
bnd
cmc
pop
push
mov
adc
aaa
das
imul
and
repz
fsubr
std
adc
jmp
fwait
pop
pusha
adc
xor
fsubr
es
scas
les
adc
mov
add
sbb
scas
out
lods
(bad)
lods
pop
std
adc
mov
rcl
mov
call
jp
js
adc
jno
push
adc
xor
stos
jo
mov
cwde
adc
outs
or
jae
unpcklps
(bad)
lahf
dec
dec
es
push
shr
mov
ror
inc
xchg
jl
sbb
dec
aad
rcr
or
adc
retf
or
cli
pop
or
ret
sbb
push
sub
mov
add
dec
das
fisub
(bad)
dec
repnz
je
es
ins
mov
push
xchg
inc
test
test
sbb
cli
ret
push
(bad)
adc
cmp
or
push
(bad)
mov
clc
adc
xchg
pop
fdiv
adc
cmc
aad
mov
pop
in
xchg
mov
add
push
test
popf
push
push
rcr
xlat
fwait
loop
adc
sti
fcmovnb
or
sub
cmps
or
or
sbb
shl
mov
pop
pop
(bad)
aad
pusha
retf
popa
or
add
cmovae
cli
shl
dec
(bad)
(bad)
pop
add
adc
ja
aam
push
ins
adc
inc
jnp
aam
hlt
dec
xchg
push
adc
jno
cdq
int3
scas
(bad)
ficom
cs
and
add
out
mov
loopne
stos
pusha
or
cmp
jne
xor
and
sub
pusha
arpl
push
pop
mov
adc
dec
or
cdq
loopne
mov
sbb
pop
clc
fwait
sbb
cld
or
mov
into
sub
push
out
mov
inc
dec
cmp
sub
int3
mov
es
sbb
mov
sub
rcl
push
adc
adc
mov
pop
not
push
jo
or
sub
(bad)
inc
inc
cmp
xchg
adc
neg
inc
test
icebp
pushf
mov
xor
or
jbe
sub
aad
adc
adc
jp
jnp
add
rcl
mov
test
or
bound
push
pushf
or
fwait
sbb
hlt
push
jne
adc
imul
lahf
in
sub
sbb
xor
add
or
adc
cmc
xchg
aam
adc
les
mov
pop
jns
cmp
retf
mov
jmp
out
xor
xchg
mov
push
mov
or
dec
pop
sbb
or
out
out
hlt
js
popa
inc
call
xchg
push
push
adc
mov
mov
xor
or
pop
(bad)
cmp
jl
cmp
addr16
and
push
stos
fld
aad
xchg
enter
jbe
imul
dec
loope
jae
dec
mov
mov
mov
cmp
push
inc
dec
nop
loope
push
lods
xor
xlat
iret
jae
mov
(bad)
das
and
jno
sub
push
adc
neg
mov
(bad)
js
test
and
ds
pop
out
iret
aam
pop
cmp
aaa
and
sbb
loope
mov
outs
xchg
in
fcom
inc
inc
ins
rol
pop
in
shr
arpl
aaa
jge
test
addr16
enter
lods
cs
test
sbb
les
push
xlat
mov
out
dec
xor
xchg
jnp
adc
mov
dec
hlt
std
mov
or
test
mov
pop
loopne
test
or
sub
or
and
xor
in
dec
push
pop
aam
adc
dec
sahf
dec
lock
sbb
aam
cmp
test
cmp
in
ds
cmp
dec
sbb
lds
sbb
iret
fsubr
xor
mov
push
imul
sub
sbb
xchg
inc
jb
pusha
dec
fs
sub
bound
pop
and
pop
xor
hlt
xchg
or
inc
dec
lods
loopne
fdivr
push
mov
mov
jae
scas
jno
cmp
fs
mov
hlt
push
sbb
add
adc
inc
inc
pop
and
cmps
shr
or
fadd
addr16
mov
xchg
leave
adc
jle
and
mov
les
cmp
stos
xor
or
scas
adc
xor
out
sbb
fiadd
sbb
push
sub
mov
movs
mov
pop
adc
mov
scas
cmp
xchg
mov
sub
js
mov
inc
xchg
addr16
and
rol
mov
scas
std
push
pusha
mov
mov
jae
jl
movs
icebp
arpl
adc
int3
retf
dec
cs
push
test
adc
pop
shl
jne
dec
test
movs
int
adc
dec
mov
push
push
cmp
ins
data16
xchg
and
mov
pop
xchg
jae
inc
xor
mov
cmps
xchg
out
aam
sar
push
pop
aad
sub
push
dec
jnp
or
mov
add
sub
je
xchg
adc
(bad)
sti
fs
push
adc
arpl
push
inc
and
rcl
add
fcompp
jne
cmp
popa
fdivr
push
mov
cmp
mov
adc
cmc
cmp
add
loopne
stos
les
mov
inc
test
pop
push
xor
cmp
sti
adc
(bad)
fnsave
dec
pop
mov
adc
and
jge
adc
(bad)
mov
adc
xlat
xor
mov
jno
in
add
xchg
into
push
out
(bad)
mov
xchg
addr16
sub
daa
inc
ror
adc
sub
movs
fadd
cmps
les
sbb
clc
fistp
or
cdq
adc
loop
test
pop
mov
adc
xchg
outs
in
sbb
push
ins
data16
jnp
cmps
scas
jmp
inc
cmc
(bad)
in
int3
ss
push
cmps
adc
in
ret
xchg
lock
mov
aas
mov
movs
scas
push
jbe
arpl
mov
iret
mov
movs
mov
add
adc
mov
pop
adc
jl
xlat
jle
into
mov
lock
dec
out
adc
xchg
jl
xchg
and
mov
sbb
mov
lds
or
daa
(bad)
out
cmp
(bad)
mov
loope
mov
inc
popf
in
push
push
pop
clc
shl
in
arpl
xor
mov
aaa
mov
xchg
(bad)
jmp
dec
adc
dec
repz
adc
mov
shl
addr16
pop
in
cld
push
adc
or
push
iret
test
in
popf
add
jmp
push
push
pop
aas
adc
cdq
enter
push
bound
cmp
cs
jnp
jbe
mov
call
aad
jecxz
jns
arpl
les
xchg
aas
cmp
or
adc
push
pop
mov
adc
je
pop
mov
mov
xchg
in
js
jo
cmp
les
and
adc
movs
sub
out
xchg
outs
jbe
push
xchg
adc
push
mov
data16
stos
sub
retf
jb
fnstcw
cmps
push
adc
fiadd
or
adc
push
sub
jo
push
mov
repnz
pop
cli
adc
xor
mov
sub
jg
(bad)
add
adc
cs
xor
in
push
popa
push
sbb
pop
ret
scas
push
push
xchg
lods
mov
jae
xchg
jo
xchg
adc
cmp
adc
dec
adc
mov
xchg
ins
inc
xor
lea
jae
fisubr
addr16
xchg
mov
mov
ins
arpl
in
mov
push
mov
adc
ins
test
arpl
adc
sub
cmp
adc
push
loop
inc
add
adc
sub
cmp
out
adc
sub
push
jno
fild
(bad)
jmp
cld
lahf
add
push
ror
push
fwait
call
mov
movs
inc
or
adc
xor
hlt
(bad)
adc
sbb
jo
shl
aam
or
or
(bad)
add
pop
xchg
loope
sub
sbb
xchg
loopne
push
ret
in
(bad)
jp
xchg
add
ins
push
or
xchg
sbb
mov
cmp
loopne
retf
adc
sub
xchg
shl
es
movs
rcl
mov
and
push
inc
sbb
dec
in
int
and
or
push
stos
dec
and
push
in
mov
adc
jmp
loopne
pop
sbb
mov
hlt
adc
adc
mov
or
ret
push
outs
xchg
jns
pusha
leave
in
fsubr
pop
ror
jnp
adc
stos
sub
inc
xor
arpl
in
sub
scas
mov
in
sbb
sub
add
aad
mov
mov
dec
pop
push
movs
cmps
adc
pop
push
xchg
xor
push
push
sbb
sub
cld
xchg
iret
ins
add
push
xor
out
ja
(bad)
loopne
adc
inc
xchg
js
fs
adc
sar
push
shl
out
or
mov
adc
pop
push
and
(bad)
xchg
adc
xchg
adc
cdq
pop
leave
jnp
or
jmp
adc
mov
jl
adc
and
bnd
mov
popf
pop
jae
mov
jno
adc
(bad)
loopne
pop
ret
(bad)
sub
cwde
xor
test
or
ja
adc
push
sbb
add
adc
retf
ror
inc
fcom
mov
mov
aam
ret
adc
mov
cmp
shl
jge
add
xchg
cdq
pop
imul
mov
call
rcr
add
cmps
lock
jecxz
cmps
jne
sub
mov
jl
push
stos
std
fstp
jbe
outs
cmp
pop
and
or
(bad)
xchg
cli
xor
pop
jmp
pop
mov
xchg
out
(bad)
(bad)
mov
xchg
daa
mov
mul
mov
ja
xor
jno
xor
test
icebp
xchg
pop
cmp
ds
sbb
mov
(bad)
daa
retf
mov
adc
mov
xor
and
ficom
mov
jae
lahf
jg
adc
mov
ss
aam
aaa
mov
test
or
cmp
gs
fdivr
das
sbb
out
jo
ja
mov
neg
sahf
loop
cmp
scas
sbb
mov
mov
les
xchg
cmp
ja
inc
jge
stos
xor
not
popa
aas
sub
in
jg
jbe
(bad)
adc
sbb
adc
stos
adc
mov
cmp
sbb
cmc
lods
pop
int3
mov
xor
push
xchg
and
out
test
or
imul
fistp
enter
push
mov
sti
jns
les
adc
adc
sbb
out
aam
lahf
fsubr
cmp
into
ins
bound
add
inc
push
push
mov
cmp
jno
cmp
movs
dec
ins
push
out
sub
or
mov
call
cld
push
and
adc
dec
ret
test
lock
adc
push
fld
adc
lea
clc
ins
xor
mov
loope
clc
add
in
lea
outs
ja
in
pop
fisub
adc
ret
sbb
push
mov
stc
in
cmps
xchg
adc
xchg
xchg
cdq
dec
xchg
sub
das
pop
dec
inc
adc
mov
jle
out
sbb
cs
movs
loopne
adc
dec
in
and
hlt
std
(bad)
in
sahf
adc
pop
pop
test
pop
xchg
unpcklps
pop
fwait
ss
inc
(bad)
mov
push
leave
dec
pop
xlat
push
jbe
push
retf
add
in
out
mov
hlt
fdivr
test
jmp
pop
sub
jae
outs
ror
mov
mov
adc
mov
xchg
adc
sub
data16
jl
or
aad
hlt
and
mov
(bad)
sbb
push
cmp
aad
mov
push
fdiv
sbb
push
xchg
in
xor
inc
add
imul
ret
retf
push
dec
push
add
push
movs
jl
jmp
add
xchg
mov
jecxz
shr
dec
aad
std
adc
cli
ja
adc
stos
bound
sub
mov
push
add
lods
or
packsswb
adc
aaa
pop
ror
xchg
cmp
push
sub
out
cmp
fwait
mov
(bad)
jmp
inc
and
(bad)
adc
cmc
or
xor
xchg
mov
xchg
pop
inc
in
adc
in
movs
or
mov
xchg
rcr
cmp
mov
mov
out
or
xor
cmp
jle
retf
int3
jo
(bad)
in
in
ins
adc
add
add
(bad)
rcr
test
jb
mov
dec
adc
sbb
xchg
jo
js
pusha
nop
mov
lock
mov
sbb
cmp
mov
xchg
push
in
or
movs
inc
and
cdq
xchg
loopne
mov
push
push
in
adc
lds
and
mov
pop
cli
fidivr
outs
clc
loopne
rcl
fistp
push
or
jno
fcomp
pop
push
cmps
cdq
stos
push
mov
xor
mov
fst
push
inc
or
lods
xlat
mov
pop
cs
mov
fst
mov
cli
mov
retf
mov
test
sbb
mov
jecxz
adc
outs
jg
and
pop
les
rcl
adc
adc
leave
in
jns
cmc
cs
in
cmp
adc
mov
retf
shl
xlat
cld
add
pop
and
ins
jge
jo
cli
jl
rcl
scas
icebp
je
sbb
add
outs
adc
and
jnp
in
adc
cmp
and
mov
pop
data16
mov
cmp
jg
adc
add
sbb
shl
adc
jge
mov
sub
fdivr
push
or
push
jo
into
xor
lock
dec
ja
jp
pop
(bad)
pop
mov
outs
(bad)
ins
adc
stos
mov
loop
adc
cmp
sbb
sub
ror
push
out
hlt
mov
jnp
sub
test
shl
mov
sub
sbb
mov
adc
or
mov
aas
int
mov
sub
sub
inc
not
scas
xor
pop
adc
push
xchg
ret
xor
(bad)
in
push
push
ret
scas
cdq
push
shr
add
mov
adc
adc
adc
lahf
lea
cmp
jp
inc
out
bound
sbb
(bad)
adc
and
or
les
push
in
adc
dec
xor
pop
inc
mov
jge
xor
sub
sahf
pop
in
retf
add
lock
mul
mov
mov
jne
test
cmp
dec
push
(bad)
push
adc
movs
(bad)
(bad)
mov
cmp
inc
cld
and
ror
ret
sbb
mov
aam
xchg
pop
adc
pop
mov
add
scas
mov
sbb
cmp
rol
call
sbb
or
pop
ret
push
xor
pusha
imul
out
mov
cwde
adc
add
inc
pushf
lds
cmp
rcr
inc
sbb
mov
in
je
mov
push
xchg
ja
dec
push
stos
jbe
jp
jmp
dec
jne
es
retf
mov
fst
xchg
mov
xor
jg
mov
xor
out
lock
ds
outs
rcl
and
mov
imul
loop
out
ss
push
sub
push
fild
mov
or
int3
xchg
adc
movs
lea
sub
pop
adc
mov
cmp
or
mov
mov
mov
dec
cs
xchg
adc
ficom
daa
adc
sbb
gs
xchg
sbb
mov
dec
mov
mov
out
ds
adc
int
mov
push
je
test
and
adc
lea
adc
leave
xor
in
add
dec
sub
pop
cmp
mov
sbb
dec
lods
in
outs
ret
adc
cmp
lea
xchg
iret
scas
(bad)
lock
test
cmps
xchg
mov
mov
xor
scas
jl
in
add
mov
rcl
ds
cmp
sbb
fnstsw
adc
jns
push
sbb
into
sub
adc
ss
sub
jno
ins
push
adc
xchg
push
cld
popa
dec
hlt
cmps
adc
imul
push
xor
inc
sbb
outs
mov
out
pushf
xor
scas
jmp
cmp
jno
not
fistp
inc
ret
rcr
or
xchg
ja
call
add
aad
mov
adc
sub
cmc
dec
adc
dec
mov
loopne
arpl
xchg
int
mov
push
jnp
mov
adc
leavew
fcom
inc
jp
adc
add
pop
(bad)
neg
inc
xchg
adc
call
cld
(bad)
dec
imul
jle
inc
hlt
aaa
repnz
imul
int3
sub
jmp
sub
hlt
lea
mov
push
xchg
mov
pop
xchg
xor
in
or
cmp
rcr
adc
(bad)
dec
sub
stc
ds
ret
ds
fisubr
call
out
dec
xchg
fcom
add
fwait
adc
shl
adc
les
push
add
sub
and
adc
adc
add
out
test
in
popf
cld
lods
cmp
repnz
jp
add
sbb
imul
and
shr
xor
imul
retf
mov
jno
adc
add
repz
jns
push
out
dec
movs
jg
adc
test
iret
icebp
inc
dec
in
mov
ja
sub
clc
adc
mov
adc
push
or
xor
cmp
sbb
ins
xlat
fild
js
pop
adc
ret
mov
jecxz
xchg
imul
or
loop
mov
mov
sbb
or
jl
push
stc
pop
fucomip
or
cli
(bad)
xchg
jl
fwait
add
stc
adc
pop
or
ds
add
adc
and
xchg
push
mov
mov
test
into
mov
aam
pop
cmp
inc
(bad)
arpl
xchg
(bad)
ja
adc
ins
shl
push
adc
call
fs
push
(bad)
jle
jae
test
mov
xchg
fucomip
mov
in
sub
(bad)
cmp
and
aam
jo
push
adc
test
mov
test
loop
cwde
push
pop
(bad)
arpl
adc
sub
jmp
xchg
stc
bound
jl
ds
shl
lds
and
mov
rcl
stc
jp
xlat
push
test
in
in
jae
xchg
add
mov
data16
fwait
and
xchg
ins
cmp
stos
pop
xor
adc
jns
mov
mov
mov
sbb
fistp
out
aam
out
adc
pusha
out
add
test
adc
sbb
in
stos
je
(bad)
adc
jbe
or
imul
mov
mov
inc
adc
fldenv
adc
pop
pop
jno
(bad)
out
adc
mov
inc
xor
mov
push
cmp
adc
test
movs
sbb
retf
imul
mov
gs
mov
sar
xchg
(bad)
jl
popf
adc
inc
and
xor
les
sbb
in
dec
push
and
adc
cmpxchg
pop
scas
adc
push
lods
std
or
cmp
sar
int3
jmp
xchg
push
mov
pusha
std
sbb
int
cwde
dec
cmp
pop
jmp
test
sahf
call
lahf
mov
pop
push
out
add
xor
mov
cmp
cli
(bad)
mov
popf
adc
jp
sub
out
bound
jnp
arpl
adc
mov
stos
repnz
out
cmp
test
lods
xor
(bad)
adc
mov
xor
cmps
mov
cmp
in
arpl
xor
mov
std
xchg
lea
push
mov
push
dec
stos
int3
pop
(bad)
arpl
dec
push
icebp
mov
adc
jp
fnstsw
aaa
add
out
pop
ret
je
repz
arpl
pusha
cmp
lahf
pop
sahf
dec
hlt
leave
sub
cmp
mov
out
ds
enter
imul
xchg
dec
push
imul
loope
mov
ficom
push
push
push
and
push
aam
cs
mov
fbstp
(bad)
mov
xchg
sbb
mov
push
push
mov
call
or
pop
mov
sbb
aad
stos
retf
push
lods
out
aaa
jmp
iret
outs
unpcklps
loope
mov
out
mov
scas
sbb
fimul
nop
sbb
jp
fdiv
mov
cmp
lds
shr
adc
jno
out
shl
test
xchg
out
call
pop
adc
(bad)
sbb
les
adc
imul
xchg
retf
add
jl
leave
mov
stos
jecxz
add
mov
sub
push
pop
mov
xchg
ret
shr
push
xchg
sbb
dec
(bad)
jae
nop
push
jmp
mov
arpl
or
and
sbb
das
sub
adc
or
or
ja
jl
mov
jmp
pop
adc
mov
fadd
mov
adc
mov
call
sub
inc
push
(bad)
sub
dec
sbb
test
mov
adc
repz
mov
bound
(bad)
mov
pop
jnp
mov
cli
push
inc
in
mov
push
push
inc
icebp
xor
test
pop
xor
ror
jge
add
jb
dec
xchg
test
adc
add
mov
push
fst
adc
jge
inc
push
mov
cli
sub
xchg
push
xor
push
dec
fwait
or
adc
adc
inc
or
test
mov
mov
adc
loope
mov
loop
div
ficomp
sub
sub
pop
fs
mov
pop
pop
int3
adc
mov
inc
adc
imul
arpl
add
or
and
sahf
xchg
xchg
aaa
jmp
hlt
push
aaa
outs
cli
in
or
movs
mov
mov
xor
addr16
adc
cmp
sbb
sbb
push
mov
jno
movs
xor
out
mov
adc
mov
inc
rcr
pushf
jb
xor
int3
repnz
jle
lods
and
cli
(bad)
adc
jp
xchg
or
lahf
fst
mov
lods
xchg
mov
mov
dec
imul
hlt
mov
adc
xchg
jae
jo
inc
dec
jmp
stc
enter
nop
mov
pop
inc
xor
aad
adc
push
(bad)
mov
mov
sbb
xchg
pop
jp
sbb
mov
jl
cmp
stc
ins
jmp
adc
inc
or
cwde
push
repz
aad
sbb
cdq
aaa
ret
aam
or
adc
xchg
pop
shl
xor
inc
add
dec
cmp
add
fiadd
pushf
cld
lds
rcl
inc
mov
adc
adc
movs
adc
dec
sti
stc
sub
mov
sbb
add
test
inc
je
and
scas
xlat
adc
jp
lods
aad
inc
cmp
adc
xor
call
arpl
adc
popa
pushf
ror
lods
jl
inc
daa
adc
(bad)
dec
pop
fsubr
in
fadd
sbb
add
adc
mov
ds
xchg
xchg
adc
scas
pop
(bad)
cs
fadd
adc
mov
cmps
in
xchg
xor
sub
movs
add
jecxz
mov
sub
cmp
adc
mov
icebp
jp
push
and
rcl
adc
invd
stos
(bad)
mov
data16
pop
mov
or
lods
je
jns
pop
dec
adc
jle
sub
jmp
mov
or
in
fidivr
addr16
rcr
sti
jmp
ficomp
aam
aaa
adc
mov
push
pop
cmp
not
(bad)
(bad)
out
pop
xchg
and
not
cld
cld
adc
xchg
dec
and
aas
mov
sbb
cmp
lahf
test
or
rcl
mov
lods
adc
(bad)
push
jl
xor
add
adc
jnp
mov
push
movs
ja
xchg
xchg
sub
or
(bad)
adc
cmp
pop
out
push
int3
mov
mov
add
mov
mov
(bad)
fcomp
mov
jl
mov
adc
repz
mov
xchg
mov
pop
sbb
(bad)
fmul
bound
mov
cmp
aad
jp
ja
sub
jmp
fs
cld
jbe
clc
lahf
pop
add
lahf
sub
add
push
push
jle
retf
cmp
sbb
adc
lahf
test
adc
inc
nop
xor
push
loopne
adc
mov
bound
sbb
mov
pop
(bad)
outs
inc
mov
jb
or
cmp
sar
xlat
sar
mov
rcl
or
sahf
xchg
adc
dec
psubb
ds
scas
add
push
mov
adc
or
repz
ror
cmc
adc
mov
xchg
jne
fsubr
aaa
mov
mov
mov
sub
fdivr
xchg
dec
outs
push
idiv
push
adc
add
test
adc
xchg
ss
shl
push
pop
add
pop
push
cli
mov
sti
enter
clc
out
jmp
imul
sbb
shl
test
scas
in
outs
cwde
xor
add
(bad)
retf
inc
adc
into
dec
popf
mov
push
adc
adc
ret
adc
(bad)
std
add
sbb
xor
lds
inc
push
push
loope
fnstcw
shr
adc
cmp
retf
fwait
pop
sahf
stos
cld
ss
stos
push
xchg
lds
mov
adc
(bad)
(bad)
adc
mov
shr
sbb
xor
sub
cmp
fs
gs
and
mov
test
adc
mov
cwde
cld
repnz
movs
xor
(bad)
xchg
adc
mov
mov
stc
(bad)
adc
nop
in
pop
fwait
inc
adc
xchg
out
sbb
and
and
sbb
bound
and
push
fsubr
aam
mov
sbb
sbb
test
nop
push
push
push
pusha
fwait
mov
xchg
pop
pop
push
out
jmp
clc
or
adc
pushf
or
jnp
sbb
mov
enter
xchg
mov
mov
(bad)
gs
cmp
retf
ins
push
jno
or
idiv
sub
popa
adc
push
cmp
idiv
ret
stos
or
cmp
xor
jo
jecxz
int3
aam
jmp
fcomp
inc
adc
in
or
movs
scas
cs
push
sbb
and
add
xor
push
cld
jl
leave
lods
ret
push
push
test
scas
(bad)
mov
enter
test
shl
scas
and
or
out
push
pop
adc
ins
xor
add
pand
ds
neg
pop
adc
xor
into
xor
jecxz
iret
enter
push
ins
mov
adc
jae
fist
nop
sbb
and
push
xchg
sbb
mov
ret
ins
in
cmp
xor
cmp
adc
push
cmp
in
ror
ins
lock
add
clc
mov
adc
fdivr
mov
(bad)
pop
cmp
inc
fistp
je
clc
xor
cli
sbb
in
movs
lods
in
xchg
int
imul
mov
jno
clc
push
loope
jo
xchg
test
ror
icebp
adc
lds
cwde
adc
cmp
cmps
cmps
fwait
add
jle
rcr
fnsave
pop
adc
push
xor
inc
les
pop
adc
fist
mov
dec
retf
in
fwait
jbe
and
retf
daa
jno
pop
adc
xlat
in
sti
jb
dec
daa
adc
test
mov
loopne
sbb
icebp
sbb
adc
cs
or
inc
in
js
shl
push
adc
mov
aaa
push
adc
sar
ror
rcr
cdq
loop
cmps
jmp
and
inc
ins
popa
dec
ss
inc
sbb
pop
or
pop
xchg
fnsave
popa
call
adc
mov
cmc
xchg
adc
cli
(bad)
sub
movs
xlat
inc
std
and
and
pop
hlt
dec
adc
repz
fcom
retf
ss
and
adc
dec
sti
arpl
gs
loope
adc
mov
adc
cmps
cmp
repz
sub
mov
pop
adc
pop
lock
sbb
jbe
adc
or
jno
lock
jecxz
cld
adc
cs
xchg
xchg
emms
push
sub
fnsave
xchg
inc
loope
pushf
hlt
cmovs
add
push
rcl
pop
les
jp
arpl
adc
dec
jne
pop
arpl
mov
inc
xchg
(bad)
jne
or
jge
adc
ror
stos
xchg
lds
inc
fucomip
mov
movs
sahf
adc
dec
(bad)
fst
dec
inc
or
xchg
adc
jns
or
cmp
and
cmp
inc
stos
cmps
adc
rep
mov
push
ret
jle
sbb
sar
js
push
jae
nop
add
pop
inc
aam
bound
sahf
movs
mov
and
and
push
sbb
pop
mov
cwde
sub
fild
loopne
jae
or
push
lods
xchg
xchg
add
xchg
leave
pop
push
clc
mov
ss
test
inc
jmp
out
adc
dec
cdq
outs
into
hlt
mov
add
pushaw
mov
and
repnz
mov
push
enter
mov
adc
sbb
cli
je
sbb
stos
dec
push
fnstsw
and
push
mov
out
adc
int
sbb
in
cwde
bound
adc
jl
cmps
cdq
pop
mov
xor
jmp
mov
pop
movhps
aam
movs
mov
pushf
gs
pop
cmp
push
call
mov
cmps
mov
jmp
pushf
ror
mov
and
cs
mov
pusha
push
jb
add
cmp
jg
push
dec
popa
xchg
and
outs
push
pop
xor
arpl
sub
add
adc
scas
repz
cmps
xchg
jnp
sbb
mov
loopne
adc
dec
iret
pop
pop
in
sbb
(bad)
xchg
push
inc
xlat
(bad)
stos
adc
call
inc
sub
(bad)
jp
or
cdq
adc
retf
xor
mov
sbb
scas
test
jmp
add
mov
inc
push
mov
mov
mov
sub
jmp
xor
pop
and
adc
icebp
or
xor
dec
pop
dec
push
mov
sub
adc
addr16
addr16
adc
xchg
jae
iret
sbb
jg
pop
cli
mov
or
mov
push
sub
xchg
mov
div
inc
cmps
loopne
fisubr
outs
repnz
push
lahf
mov
test
gs
fwait
and
or
cwde
loopne
sub
pusha
push
cli
adc
loopne
adc
call
iret
out
ror
cmc
adc
arpl
xor
adc
aam
cmovns
in
nop
adc
dec
inc
ficom
pop
inc
jns
or
push
fist
popf
popf
xchg
loopne
adc
enter
pop
push
and
call
data16
(bad)
stc
sbb
shr
(bad)
adc
arpl
cld
and
call
test
ficom
ret
mov
popa
test
out
xchg
sbb
je
lock
sahf
mov
pushf
mov
add
or
neg
cmp
rcr
pop
mov
push
int3
scas
aam
or
enter
out
sahf
jmp
xchg
rcl
cmp
sub
push
pop
adc
inc
fidiv
ret
ret
adc
mov
push
clc
mov
pop
push
xchg
sbb
inc
dec
cmp
mul
pop
push
jmp
loop
es
add
lds
out
mov
adc
fstp
mov
pusha
leave
lea
lods
inc
dec
or
rcl
adc
mov
ins
jmp
fdivp
jo
xor
push
xor
jge
pop
xor
in
int3
sbb
stos
data16
mov
xchg
xchg
jbe
fwait
add
mov
push
fabs
jnp
push
add
pushf
ds
pusha
add
push
sbb
stos
retf
add
adc
push
push
xchg
sbb
(bad)
das
sbb
cdq
retf
mov
dec
push
jmp
retf
or
leave
pop
(bad)
xchg
(bad)
push
sbb
cmp
ss
cmp
(bad)
call
adc
xlat
lods
aam
add
hlt
mov
enterw
sub
or
outs
cmp
adc
cli
or
and
inc
sbb
jmp
fadd
retf
shr
mov
push
adc
imul
jge
and
cmp
sbb
dec
test
stos
leave
jl
sti
gs
push
pop
mov
dec
cmps
dec
pusha
fwait
adc
(bad)
ins
arpl
int3
sbb
or
jno
adc
scas
cmp
jmp
cwde
and
pop
sbb
ss
pop
ins
jae
or
gs
pop
add
mov
mov
call
push
cld
xor
adc
movs
mov
in
imul
sbb
call
in
out
ret
cmp
adc
cdq
push
cli
imul
in
pop
xchg
inc
sbb
popa
jmp
hlt
sub
adc
xchg
sub
std
pop
retf
cmp
hlt
pop
cmps
js
or
aad
and
push
pop
enter
pop
adc
retf
movs
push
dec
mov
cmp
out
call
rcr
or
and
fld
leave
xor
mov
fimul
test
add
and
jb
add
cmp
push
sub
(bad)
push
scas
into
scas
in
xor
xchg
addr16
lods
nop
shr
sub
sahf
js
test
jne
sub
adc
xor
lahf
adc
nop
adc
sub
repnz
or
mov
mov
jnp
jns
mov
ja
popf
lds
fnstsw
pop
sub
xlat
or
inc
push
aad
popa
adc
hlt
cmps
adc
cmp
adc
jecxz
pop
into
arpl
dec
jmp
adc
add
jp
fisub
xor
out
mov
push
cmps
das
push
sti
lea
rcl
adc
and
repnz
mov
sub
adc
outs
dec
lock
adc
dec
loop
imul
xchg
pop
adc
idiv
xchg
mov
mov
mov
lock
lods
je
xchg
push
mov
adc
aaa
lea
pushf
bound
push
xchg
jmp
xchg
sub
inc
push
aad
sbb
add
enter
adc
shl
adc
dec
in
adc
rcl
adc
cdq
pop
jo
and
test
pop
mov
sbb
pop
push
inc
pusha
adc
cs
jmp
push
arpl
aam
leave
aam
adc
mov
mov
xor
sub
in
gs
(bad)
adc
loopne
fidivr
outs
adc
jp
mov
loop
adc
jl
push
(bad)
cmc
xor
jbe
push
jne
push
and
xlat
out
jmp
(bad)
int
adc
and
mov
mov
xor
das
adc
inc
adc
cmp
sbb
xchg
(bad)
cli
ja
adc
jo
arpl
je
sar
cmp
xlat
xchg
jb
cmp
jo
mul
(bad)
pcmpgtb
or
adc
mov
mov
in
push
cmp
push
xchg
(bad)
cli
sbb
push
mov
clc
or
pop
outs
dec
inc
adc
shl
(bad)
mov
repnz
jbe
lods
rcr
adc
push
cmp
jg
out
inc
cmps
sbb
mov
data16
xchg
in
out
int3
sub
adc
mov
sub
ja
rcr
pop
adc
mov
std
in
inc
adc
cmps
test
fsub
in
jb
and
cmps
dec
push
lds
mov
sub
stc
out
cmp
fs
loope
or
loopne
mov
stos
sub
cmp
xchg
scas
pop
adc
retf
mov
(bad)
adc
ret
stos
cmp
xchg
mov
mov
fsubr
sbb
sbb
sub
cs
les
adc
xchg
imul
(bad)
pusha
jg
je
pushf
js
adc
std
sbb
les
push
cld
adc
inc
push
aaa
sahf
mov
cs
out
dec
in
repnz
inc
mov
push
pushf
outs
push
imul
mov
and
enter
popa
retf
fs
sti
adc
cmp
ins
ja
and
xor
cld
ret
adc
add
add
jo
ret
sbb
push
dec
sahf
ror
fnstsw
add
mov
add
xchg
push
dec
pop
iret
or
not
(bad)
push
outs
mov
loopne
into
hlt
scas
test
or
pop
loope
cmps
icebp
xchg
clc
test
mov
sbb
fs
outs
xor
jne
lahf
test
cld
das
cmp
push
sbb
jne
add
fwait
jmp
sub
sub
adc
dec
out
aaa
push
or
adc
mov
sbb
push
addr16
cmp
pop
das
dec
push
ds
dec
sbb
out
and
adc
scas
jae
loope
or
loopne
mov
mov
lods
sub
sub
push
fld
ss
lock
test
inc
jns
lahf
ja
enter
fninit
call
enter
je
adc
or
sbb
daa
clc
fsubr
adc
out
add
retf
adc
jmp
int
xchg
add
dec
and
pushf
imul
scas
test
aam
sbb
adc
or
les
push
stos
scas
lahf
xchg
aad
mov
adc
int
jmp
inc
in
adc
mov
leave
test
idiv
inc
or
sbb
aam
push
and
or
out
push
shr
adc
and
push
pop
pop
pop
les
sub
cmp
xchg
cmp
pop
fdivr
out
nop
test
imul
xor
addr16
iret
add
mov
push
pop
push
mov
xchg
std
xchg
js
sbb
inc
je
mov
aam
out
sub
pop
sbb
icebp
mov
sub
call
inc
xchg
adc
dec
scas
out
retf
adc
and
jmp
and
je
sub
repz
pop
dec
or
or
xlat
and
scas
cmps
sahf
mov
or
inc
push
retf
mov
scas
in
imul
nop
add
xor
(bad)
call
cmp
jo
pop
arpl
fs
adc
stc
cli
inc
sbb
ins
std
xchg
shl
add
pusha
pop
sbb
push
push
push
adc
adc
inc
mov
repz
(bad)
adc
pop
cmp
sbb
fmul
aam
cmps
adc
(bad)
cmp
dec
mov
outs
sub
or
mov
das
sbb
retf
jp
out
xchg
cmp
adc
retf
in
add
adc
shl
adc
sahf
cld
fs
push
jp
dec
sbb
(bad)
fsub
stos
mov
shr
xchg
inc
adc
iret
xlat
iret
and
add
adc
fs
outs
mov
in
jbe
pop
int
adc
xchg
retf
sbb
xchg
lods
push
or
ss
outs
std
arpl
jmp
jae
mov
mov
leave
mov
sbb
inc
pop
or
iret
adc
cli
imul
jmp
(bad)
retf
pop
js
rol
cmp
shl
sbb
jmp
jno
inc
xchg
sti
test
mov
and
rol
ffreep
adc
push
lea
cmp
in
nop
inc
adc
movs
sub
xor
in
xor
lock
mov
mov
aas
aam
push
adc
js
dec
ficom
adc
pop
popa
mov
std
jbe
adc
xchg
jno
or
pop
push
(bad)
adc
mov
dec
and
xor
inc
lods
imul
xor
xchg
rcr
js
fld
shl
ret
ss
fst
adc
movs
pop
add
xor
jbe
xor
jge
sbb
add
add
mov
sub
cmps
mov
fwait
inc
mov
push
cmp
push
sar
sbb
(bad)
cmp
jmp
ror
xchg
cmps
imul
and
sbb
push
inc
cmp
adc
xchg
sbb
xchg
adc
add
sub
stos
inc
mov
jno
cs
add
cli
inc
sbb
mov
(bad)
xchg
mov
das
shl
popa
scas
cmp
xor
pop
pop
iret
mov
push
les
push
ja
or
test
inc
sub
add
loope
lds
adc
jnp
dec
mov
stos
xchg
outs
cmp
push
push
out
pop
cdq
mov
aad
add
jb
retf
imul
ins
inc
call
rcl
cmp
loopne
xchg
dec
lock
rcr
(bad)
or
loopne
mov
sbb
mov
aam
call
xchg
inc
and
mov
adc
cmp
movs
scas
sbb
shl
adc
push
adc
hlt
push
ja
adc
sub
inc
in
jmp
or
mov
add
stos
or
xor
jo
test
xor
jg
jl
jge
jb
ins
test
push
mov
mov
sbb
std
or
(bad)
hlt
dec
fnstsw
cdq
mov
pushf
icebp
jmp
fs
mov
retf
mov
jnp
sbb
jg
adc
call
pop
aaa
dec
jmp
cmp
sbb
lock
and
jne
out
iret
cdq
icebp
stos
int
mov
mov
call
adc
dec
jne
inc
cmp
mov
sub
pop
ret
dec
xchg
movaps
outs
adc
sub
push
push
mov
not
aam
pop
adc
pushf
bound
arpl
sbb
adc
pop
inc
mov
ins
jg
outs
pop
jmp
adc
stos
xchg
mov
jmp
inc
daa
stc
out
movs
or
cld
cwde
adc
retf
xchg
jle
maskmovq
div
movs
pop
in
pop
push
xchg
rcl
imul
push
pop
adc
mov
in
xor
sahf
jl
adc
cmp
shr
jp
lods
pop
pop
adc
xchg
cs
(bad)
fcom
les
mov
repz
jns
out
pop
sar
push
sub
push
or
fisttp
adc
jmp
adc
fwait
outs
sbb
adc
pusha
inc
pop
scas
imul
popf
add
test
push
mov
jb
push
jmp
pop
cs
clc
pop
add
retf
xchg
loopne
adc
xchg
ret
push
ja
iret
mov
lods
movs
or
pop
fdivr
mov
add
jge
in
es
pop
fidiv
(bad)
in
fdiv
inc
sbb
sar
push
adc
xor
call
add
and
xchg
push
hlt
ror
pop
mov
or
movs
outs
push
sub
or
jp
sbb
movs
das
and
bound
in
daa
mov
arpl
lock
adc
sbb
ss
adc
adc
movs
jle
mov
sbb
pop
adc
xor
push
ja
fsubr
out
jmp
loope
lock
jmp
popf
mov
lahf
sbb
mov
ins
and
stos
push
int
repnz
or
hlt
fldenv
adc
or
call
jge
cmp
sbb
push
daa
loopne
add
adc
outs
cmp
aam
mov
jne
or
xchg
out
ds
stos
cmps
das
mov
push
adc
repz
je
retf
jb
es
sbb
sub
ins
pop
add
sub
je
or
mov
cmp
nop
fs
push
add
imul
pop
or
fisub
xchg
aam
dec
ins
push
jno
cwde
adc
pop
lods
cmp
and
adc
enter
inc
ins
push
repnz
push
push
adc
fidiv
addr16
out
mov
hlt
ret
push
retf
jg
dec
adc
repnz
jle
inc
scas
xor
in
xor
pop
pop
xor
pop
js
mov
adc
adc
imul
sar
push
sbb
adc
dec
loope
mov
fadd
add
or
xchg
mov
jns
add
ret
popf
jge
adc
mov
adc
xchg
push
in
cmps
mov
push
rol
xchg
adc
sahf
shl
sub
sub
imul
in
inc
das
inc
mov
cmp
cmc
mov
hlt
icebp
push
sbb
adc
sbb
addr16
or
adc
fs
scas
mov
push
and
inc
cdq
mov
fcomp
adc
in
push
inc
and
dec
in
xchg
adc
xor
cmc
dec
xor
scas
popa
inc
leave
pop
xchg
(bad)
out
in
int
not
inc
jmp
fs
adc
cmp
mov
jo
push
repz
add
lds
adc
adc
and
hlt
pop
lods
adc
shl
pop
aam
(bad)
je
sahf
adc
pop
inc
or
jns
test
add
and
pop
into
in
aad
mov
pop
shl
int3
enter
mov
push
enter
xchg
sbb
inc
popa
sbb
ins
cld
test
adc
mov
test
add
xchg
adc
xchg
and
push
jo
pusha
mov
pop
adc
xchg
lock
jl
xchg
dec
add
jg
inc
or
in
and
aaa
pmaxub
pusha
adc
mov
aam
adc
push
scas
cmp
int3
outs
dec
out
ret
mov
pop
mov
pop
jmp
xchg
push
div
xor
jg
dec
fdiv
pushf
(bad)
adc
push
sbb
mov
jmp
fst
add
xchg
(bad)
sub
adc
xchg
mov
sbb
mov
scas
mov
xchg
cwde
pop
das
std
test
xchg
mov
and
xchg
ror
mov
dec
xor
inc
out
lods
and
fcomp
ret
in
xor
and
xor
add
aad
dec
mov
dec
aas
sbb
rcl
ds
jne
lock
aam
dec
add
hlt
adc
sbb
fdivr
dec
nop
call
ss
lods
xchg
jl
adc
ins
add
inc
add
adc
lods
(bad)
sti
jmp
inc
jnp
test
loop
enter
sahf
pusha
adc
in
hlt
lods
xor
sub
adc
dec
cdq
ja
add
pusha
fimul
xor
add
cmps
fldenv
jecxz
sub
adc
adc
jne
in
add
xchg
imul
jmp
in
(bad)
cmp
jo
sub
jp
inc
adc
or
mov
mov
push
xchg
mov
sub
fcom
mov
inc
pop
adc
arpl
pop
pop
pop
fild
add
xor
adc
dec
sub
ror
adc
rcr
mov
add
xor
aaa
mov
hlt
ins
shl
push
xor
xor
test
mov
mov
mov
ja
lock
adc
adc
ins
popf
out
push
mov
push
and
cs
jno
xor
mov
(bad)
clc
cmp
es
bound
lods
jmp
sub
ins
je
fild
and
nop
pop
cmp
loop
sbb
not
ficom
adc
fs
push
aas
out
cmps
mov
xchg
mov
dec
mov
ins
pop
and
push
xor
or
es
adc
popa
sahf
je
xor
adc
cwde
adc
(bad)
xchg
pop
neg
jg
imul
mov
pop
call
adc
movs
jnp
or
xor
je
push
adc
cmp
jecxz
dec
xor
push
adc
addr16
pop
mov
sub
repz
adc
mov
pop
imul
mov
icebp
xor
add
mov
adc
sahf
xor
addr16
lahf
and
mov
vunpcklps
out
ja
(bad)
adc
or
sbb
aas
xchg
leave
cmp
adc
es
sub
in
adc
(bad)
(bad)
push
adc
in
xchg
mov
jns
push
mov
cmp
ins
jp
cmp
or
dec
das
adc
cmps
mov
mov
ins
cmc
add
jmp
mov
sbb
std
and
int3
inc
dec
lea
adc
lahf
ins
(bad)
adc
push
mov
je
test
adc
lods
pop
add
dec
lea
ins
test
shl
mov
mov
adc
push
(bad)
jno
ret
push
fcomp
out
push
test
js
dec
imul
sub
cmps
jg
add
push
push
dec
scas
push
inc
pop
gs
pop
adc
ins
(bad)
mov
je
stc
adc
inc
dec
jno
push
xor
add
daa
pusha
xchg
mov
mov
inc
mov
pop
lahf
push
pop
nop
cmp
mov
aam
cmp
(bad)
add
sub
in
inc
adc
jnp
jecxz
lahf
cmp
dec
sub
loop
xchg
faddp
sbb
imul
push
cld
stc
pop
dec
or
sub
xchg
popf
mov
dec
aam
mov
(bad)
push
test
mov
daa
mov
in
xchg
fnstcw
inc
adc
out
shrd
mov
int3
cmps
(bad)
mov
or
neg
(bad)
(bad)
mov
call
xchg
pop
aaa
push
movs
dec
xchg
mov
cmp
cmp
mov
mov
jnp
cmp
mov
add
(bad)
shl
mov
popf
xchg
pop
sbb
cmp
bound
arpl
pusha
int
xchg
push
xchg
fistp
dec
lods
out
jg
outs
adc
lds
int
xchg
adc
je
test
mov
sbb
outs
xchg
inc
jg
xor
fimul
jmp
and
adc
ret
sbb
add
mov
loopne
adc
dec
adc
sub
hlt
retf
jb
lds
add
dec
cmps
(bad)
std
adc
addr16
leave
xchg
sub
pop
scas
into
add
ja
inc
adc
inc
dec
inc
inc
inc
xor
loop
and
leave
call
adc
mov
push
add
retf
adc
call
jo
pop
jno
call
pop
sub
clc
std
or
inc
adc
icebp
rol
cwde
adc
xor
fsub
(bad)
jne
scas
mov
adc
movs
das
jle
int3
call
xchg
sub
test
fidivr
mov
pop
arpl
nop
std
pop
outs
je
(bad)
lahf
adc
int
in
push
push
add
sbb
cmc
in
mov
icebp
push
mov
jno
retf
adc
cmp
adc
mov
sub
rcl
sysexit
addr16
adc
pop
xor
aas
jmp
pop
adc
push
push
lock
mov
cld
push
das
jns
push
fimul
mov
cmc
adc
mov
adc
lea
adc
jmp
adc
scas
xchg
mov
jne
jle
sbb
mov
mov
push
xchg
(bad)
scas
adc
jl
lds
stos
aaa
aam
fiadd
adc
add
repnz
jbe
or
xchg
adc
movs
sbb
stos
xor
call
mov
adc
mov
push
fs
jno
xchg
bound
and
sbb
mov
cmp
pop
xchg
lahf
dec
inc
movs
in
cld
arpl
xchg
mov
pop
mov
std
imul
or
and
jb
and
xor
aaa
push
daa
dec
(bad)
cwde
and
sub
inc
sbb
divps
adc
fwait
pop
sub
mov
ror
psubsb
xor
lods
aam
jl
sub
cmp
inc
sbb
sbb
xchg
std
js
pop
scas
cwde
retf
aam
cmp
popa
in
or
jmp
adc
jnp
jns
xor
adc
nop
(bad)
pop
gs
js
add
mov
mov
pop
shl
xlat
sbb
repnz
mov
dec
loope
adc
das
out
pop
adc
fs
test
xor
sbb
rcl
ins
xlat
and
js
add
ret
mov
mov
gs
pushf
sbb
ror
cdq
sub
xchg
outs
mov
jbe
(bad)
mov
adc
popa
std
sub
sbb
hlt
out
das
aam
and
adc
mov
sbb
adc
or
scas
sbb
hlt
pushf
mov
xor
jne
fnsave
sub
imul
jl
call
sbb
push
cli
sbb
dec
in
inc
cmps
lock
jmp
inc
cdq
es
test
sahf
adc
fs
daa
pop
adc
mov
out
mov
(bad)
jmp
loope
adc
ins
sar
cmp
arpl
in
sahf
imul
dec
and
or
dec
into
mov
push
sbb
fimul
inc
and
je
es
and
fnstenv
(bad)
ds
shl
mov
and
xchg
and
out
adc
jmp
test
aam
rol
mov
mov
mov
or
jmp
adc
jo
xchg
cs
in
int
cmp
pushf
add
sbb
call
mov
loopne
mov
inc
daa
cmp
es
call
fnsave
adc
or
pop
loop
pop
sahf
adc
loopne
mov
cmps
test
inc
sbb
ret
dec
in
hlt
fwait
inc
cmc
adc
out
mov
jp
inc
out
vmread
xchg
retf
jbe
adc
sbb
pop
ret
pop
xor
pop
adc
jecxz
popf
jle
call
bound
jo
cld
in
test
faddp
pop
mov
jg
and
test
add
ins
ret
mov
test
sub
pop
outs
adc
cmp
jb
dec
cmp
xchg
or
jbe
sub
daa
inc
jp
cmp
and
rol
movs
xchg
or
stos
clc
inc
fisttp
dec
pop
into
add
sub
stos
or
xchg
pop
inc
test
add
ds
sbb
pop
pop
mov
mov
push
call
fdiv
sbb
cmp
sub
sbb
lea
adc
dec
add
stos
cmps
loope
pop
ins
push
cmps
gs
pushf
xor
out
adc
fisubr
mov
je
cmps
adc
jo
jge
in
adc
and
jae
pop
adc
aam
rol
cld
icebp
mov
pop
loopne
adc
pop
cwde
es
and
imul
sbb
fiadd
xchg
mov
int3
cmp
xchg
adc
dec
mov
add
push
pop
push
aaa
jl
and
sub
nop
rcl
loopne
pop
comiss
fadd
ss
xor
fnstenv
in
fistp
mov
mov
adc
std
bound
push
out
add
test
(bad)
push
jmp
pop
mov
mov
call
xor
xchg
push
in
inc
xor
bound
xor
push
sbb
sbb
push
xchg
in
enter
jg
fs
jb
pop
pop
push
les
ins
adc
cmps
jbe
mov
push
jge
jae
push
ds
scas
sbb
xchg
or
xchg
sub
sbb
mov
mov
ja
jg
pop
add
(bad)
mov
retf
mov
dec
cmp
cmp
fidivr
pushf
mov
jle
loopne
mov
addr16
fadd
lea
and
loope
jecxz
adc
rcl
dec
jb
pop
sahf
sbb
add
mov
sub
mov
dec
iret
fidiv
jne
adc
(bad)
scas
xlat
cli
sub
mov
push
mov
cli
sbb
sbb
fwait
out
and
(bad)
adc
mov
pop
ror
mov
imul
xchg
jnp
push
adc
xchg
add
inc
adc
stc
xchg
into
inc
loopne
retf
adc
mov
mov
pop
int
lods
pop
push
inc
adc
ror
dec
jmp
or
jmp
ret
push
or
jmp
adc
dec
adc
and
or
push
enter
fadd
stos
xchg
lods
inc
bound
retf
pop
jg
or
fisttp
(bad)
stc
adc
lods
mov
xchg
adc
cs
test
aam
jmp
jl
sub
cmp
inc
push
jns
sbb
pop
pop
inc
lahf
add
arpl
cmp
movs
fadd
jmp
adc
mov
pop
pop
out
data16
xchg
mov
outs
jbe
ins
pop
cdq
push
dec
xor
movs
dec
std
imul
and
cld
jecxz
xchg
jo
adc
je
push
pop
adc
cmp
push
rcr
mov
adc
aaa
bound
xor
pop
sbb
jne
sbb
xor
mov
pop
add
jl
sbb
adc
movs
ins
(bad)
std
aad
inc
call
rcr
test
fsubr
or
mov
ins
pop
popf
mov
lock
add
lods
sahf
(bad)
aam
push
ins
jne
in
hlt
aad
cwde
adc
popf
neg
mov
jg
leave
xchg
sbb
dec
add
push
push
lods
xchg
mov
fist
hlt
inc
and
addr16
push
pop
or
mov
mov
rol
mov
push
or
outs
retf
enter
mov
or
in
das
cmp
pop
(bad)
(bad)
arpl
jmp
jns
cmps
outs
sub
or
jnp
adc
cmp
popa
jmp
mov
cli
rcr
jp
(bad)
jne
(bad)
aam
loopne
adc
dec
jmp
cld
fadd
mov
lds
rcl
push
mov
mul
in
popf
inc
mov
sahf
gs
sbb
cmp
div
arpl
push
jne
adc
sub
stos
mov
jae
add
or
das
fldcw
dec
xchg
ficom
dec
xchg
cmp
push
pop
test
xor
or
push
in
gs
iret
test
es
sti
movs
nop
mov
add
outs
test
or
enter
cmps
mov
(bad)
rcl
mov
movs
or
jg
adc
mov
sub
aas
popa
push
xchg
or
push
fs
sub
aas
push
pop
call
push
sub
retf
movs
xor
repnz
popa
push
adc
fdivr
push
retf
sbb
loope
jecxz
jae
(bad)
les
adc
cmp
and
and
jle
mov
inc
push
and
sbb
hlt
or
rcr
mov
gs
clc
int
mov
inc
add
fucomip
out
adc
shl
adc
mov
adc
popa
or
mov
fld
dec
lock
jns
push
jle
and
or
loope
icebp
xor
sbb
shr
pop
adc
cmp
fsub
mov
sbb
test
data16
push
std
je
repnz
adc
ret
xor
stos
xor
mov
cmp
aad
xor
sbb
popf
mov
addr16
push
sbb
xchg
sub
mov
rol
aam
sub
adc
aad
xor
ror
adc
jo
out
js
repz
arpl
es
mov
mov
cmp
or
inc
int3
inc
into
js
add
xor
adc
int3
jp
out
test
xchg
nop
das
adc
repnz
test
mov
xor
cdq
and
adc
add
sub
push
ret
adc
cmp
movs
sub
adc
out
fild
(bad)
cmp
mov
imul
jo
adc
adc
lods
mov
aas
call
ret
adc
jp
popa
out
or
mov
adc
inc
(bad)
adc
call
adc
cld
lahf
jg
and
lods
popf
je
xor
sub
adc
push
lock
sbb
push
pushf
mov
les
in
mov
adc
mov
lds
std
(bad)
ss
push
arpl
in
iret
adc
aaa
ror
sbb
add
mov
mov
dec
and
int3
jae
xchg
lds
arpl
mov
sti
movs
push
hlt
fsub
out
popa
call
mov
inc
retf
adc
repz
das
add
aam
sbb
dec
cs
jno
(bad)
sti
cwde
loope
add
fs
dec
(bad)
mov
mov
sub
clc
enter
jl
jmp
sbb
fild
stos
int
adc
ins
cmps
in
adc
push
adc
lock
add
mov
pop
inc
out
cmp
pop
and
movs
cmp
push
add
mov
adc
loope
xchg
fstp
outs
adc
add
and
push
std
adc
adc
mov
lahf
adc
mov
loop
fcmove
sbb
jmp
ins
xchg
mov
mov
pop
shl
pushf
pop
adc
cmp
inc
in
adc
mov
pop
cmp
jl
push
mov
inc
in
scas
jge
not
dec
xor
pusha
sub
sub
pop
xchg
inc
into
adc
lock
retf
jge
movs
mov
outs
adc
jo
nop
icebp
or
push
fcmovu
test
fimul
inc
and
mov
ins
adc
sbb
push
mov
xchg
inc
cli
sub
neg
int3
xor
and
hlt
ror
adc
fadd
loope
jae
add
loop
shr
mov
and
cmps
adc
(bad)
xor
movs
clc
pop
(bad)
dec
jg
fst
adc
lods
aad
adc
sub
ja
push
pusha
dec
sbb
add
adc
pop
add
pop
(bad)
mov
cli
cld
adc
push
in
or
int
bound
fnstenv
xchg
repz
out
movs
call
das
clc
jnp
les
push
sahf
inc
add
mov
adc
add
or
xchg
mov
pop
push
push
xchg
xchg
pop
mov
adc
idiv
aad
data16
sub
sahf
adc
pop
xor
in
push
xor
neg
fiadd
outs
xor
int
imul
les
mov
lods
aam
dec
retf
push
shl
and
jns
add
mov
push
pushf
aam
sti
repnz
jnp
xor
adc
push
fist
push
adc
push
jb
sub
push
mov
and
or
(bad)
data16
inc
inc
ffree
shl
push
cmp
push
xchg
sbb
add
sub
xor
mov
mov
and
add
jb
aaa
and
cmps
push
push
and
int
out
mov
test
pop
scas
mov
and
mov
hlt
fs
and
or
cmp
inc
sbb
dec
mov
ins
inc
iret
ficom
aam
imul
clc
sbb
inc
add
adc
retf
cmp
fs
jl
sti
outs
imul
sbb
sbb
xchg
(bad)
scas
mov
lock
retf
rcl
mov
add
aad
push
pop
loope
push
dec
int
xchg
ins
sbb
push
jl
repz
test
rcr
js
adc
leave
jg
and
adc
out
or
(bad)
xchg
adc
xchg
cmp
mov
mov
in
cmp
fs
sbb
mov
test
xlat
mov
shr
mov
xor
fs
adc
or
xchg
and
add
push
sub
adc
fadd
mov
cld
arpl
inc
pop
test
add
adc
es
xchg
(bad)
out
psllq
xchg
jnp
into
fidivr
mul
inc
adc
and
and
inc
xor
sahf
push
(bad)
aam
scas
sub
mov
aam
and
outs
adc
sahf
push
pop
adc
xchg
xor
dec
adc
mov
adc
inc
mov
jmp
das
ja
fild
repnz
cdq
movs
jmp
popf
xchg
xor
adc
adc
mov
inc
popa
mov
dec
hlt
or
sbb
xchg
push
mov
cli
sbb
les
xchg
outs
shl
adc
dec
jl
add
and
popf
xor
fsubr
xchg
adc
mov
stos
xchg
add
int
cdq
ja
pushf
mov
or
(bad)
push
sub
adc
faddp
sub
dec
out
movs
ins
push
dec
and
xchg
mov
jmp
add
in
popf
add
leave
inc
mov
in
sbb
xchg
sbb
add
and
add
mov
test
call
and
(bad)
sahf
jmp
not
(bad)
in
test
test
mov
mov
mov
adc
ret
ror
outs
retf
mov
shl
pop
push
adc
movs
imul
adc
hlt
cmp
aaa
mov
push
test
retf
in
out
and
lahf
sbb
inc
(bad)
ficomp
test
xchg
add
jle
xchg
cmp
dec
ror
mov
inc
adc
push
movs
and
sbb
adc
or
movs
pop
dec
fild
push
dec
cmp
(bad)
dec
xchg
rcl
sbb
adc
out
lds
and
fs
adc
or
outs
add
sbb
dec
jg
jb
push
loopne
adc
and
call
clc
jg
mov
dec
cmc
icebp
mov
and
xchg
(bad)
xor
dec
mov
mov
in
push
leave
and
pushf
mov
adc
xor
xchg
adc
pop
jmp
out
fisub
adc
fs
in
ins
xor
adc
mov
aas
or
pop
sub
ret
imul
xchg
je
stc
shl
test
pop
mov
les
fsubr
test
adc
mov
(bad)
outs
adc
mov
nop
or
push
xchg
fld
cmp
clc
in
aaa
loopne
shl
and
mov
jbe
xor
add
jmp
ficom
jnp
aad
fnstenv
test
adc
xchg
cwde
xchg
and
mov
inc
and
sub
mov
push
pop
adc
(bad)
test
push
pop
sbb
pop
ja
test
popa
and
(bad)
or
push
inc
xchg
loope
adc
mov
cli
adc
imul
outs
adc
pop
fdivr
adc
mov
stc
jmp
ficom
xor
dec
popa
adc
out
scas
rcr
lods
fidivr
js
sub
push
(bad)
mov
ss
mov
out
pop
and
or
adc
cmp
ret
pop
sbb
test
adc
mov
sbb
rol
int3
pop
jp
adc
mov
jo
pop
in
retf
add
mov
mov
jno
ficom
dec
and
lods
and
fs
std
pop
in
(bad)
scas
jge
ds
jb
push
adc
inc
inc
je
mov
add
pop
xor
or
and
int
inc
(bad)
outs
sbb
fcom
(bad)
je
cdq
test
xchg
adc
mov
jae
cmp
int3
xchg
pop
aam
(bad)
js
pop
add
sbb
(bad)
in
ret
sbb
in
adc
pop
ficom
push
retf
aad
sub
jns
adc
ins
sbb
or
and
mov
adc
mov
xchg
mov
nop
and
in
mov
in
retf
loopne
adc
imul
add
fwait
addr16
jmp
rol
adc
sub
fs
jae
push
mov
int3
or
jl
sbb
cmps
aam
cmp
out
arpl
bound
dec
adc
and
mov
fmul
push
ror
cmp
fldcw
xchg
sbb
mov
mov
xchg
sbb
sahf
add
cwde
mov
or
adc
ins
push
jmp
sbb
sbb
mov
loope
fist
mov
xor
inc
xchg
adc
adc
shl
xchg
adc
pop
fdiv
push
int
xchg
and
and
sbb
inc
cmc
into
adc
in
lock
pop
pop
pusha
adc
sbb
iret
pop
push
les
xchg
adc
fcom
sar
data16
les
mov
mov
push
bound
push
adc
test
add
cmp
arpl
xchg
mov
xchg
add
mov
retf
xchg
mov
outs
nop
(bad)
jp
mov
dec
pop
or
push
mov
sub
pop
jnp
repnz
and
mov
push
rol
jl
sar
call
std
cmp
inc
jae
in
mov
pop
(bad)
retf
stos
int3
mov
adc
dec
xchg
adc
or
jno
mov
hlt
pop
push
adc
int
ja
and
adc
cli
pusha
repz
mov
adc
addr16
push
out
mov
sub
xchg
ja
xchg
pop
imul
pop
jecxz
cli
hlt
xchg
clc
scas
inc
add
and
pop
cmp
jecxz
lods
jl
and
push
inc
pop
mov
stos
call
xchg
xchg
test
hlt
mov
call
ds
inc
push
add
mov
aaa
pushf
add
pop
adc
and
sbb
mov
cmc
test
ficom
and
mov
test
mov
xchg
add
pop
imul
xchg
push
add
(bad)
push
repz
or
call
fwait
lea
jbe
push
cmp
mov
jg
rol
inc
(bad)
repnz
xadd
cld
lea
adc
imul
jge
cmp
adc
dec
mov
ss
jno
adc
loope
in
mov
movs
adc
outs
sti
xor
out
pop
(bad)
iret
xlat
pop
mov
iret
cmp
mov
lock
adc
sbb
xchg
js
mov
add
mov
adc
mov
ins
dec
sbb
jg
test
cmp
xchg
and
sub
and
cmps
mov
push
jmp
imul
aam
sub
jg
mov
mov
push
pop
in
add
sub
dec
push
xor
pusha
test
rcr
cs
or
shl
push
dec
cwde
sub
(bad)
ss
ja
call
lods
mov
push
js
rcl
jp
loopne
adc
stos
dec
jmp
mov
xchg
in
call
adc
hlt
sbb
adc
xchg
xchg
ffree
enter
adc
dec
dec
lods
and
outs
mov
lahf
push
dec
stos
mov
in
(bad)
mov
xchg
loop
mov
aam
aas
adc
(bad)
gs
test
rcl
dec
or
hlt
out
sbb
jo
adc
cli
(bad)
call
test
push
aaa
sbb
mov
sbb
push
pop
dec
in
dec
inc
fidivr
cmp
jecxz
(bad)
sbb
mov
xor
jae
cli
fcomp
pop
mov
xchg
adc
inc
stos
xor
scas
mov
aam
inc
xor
call
ftst
loop
(bad)
and
jns
out
imul
push
fstp
xchg
loop
aam
inc
stos
xchg
sti
sbb
xchg
ins
mov
adc
cmp
fs
cmp
test
sub
fild
imul
jb
mov
jmp
loopne
dec
iret
and
xchg
mov
loope
sahf
jmp
cmps
inc
cmps
(bad)
jae
aam
jge
imul
adc
mov
outs
std
or
je
das
jmp
jb
ror
mov
mov
adc
push
fcomi
repz
push
call
push
xchg
hlt
mov
adc
(bad)
fcom
dec
pop
adc
xor
std
adc
in
cmc
(bad)
stos
adc
fldenv
xchg
repnz
jl
inc
add
jecxz
xchg
aas
fld
popa
fadd
aaa
sbb
test
in
add
sahf
sbb
test
pushf
xor
lahf
outs
adc
sbb
dec
jne
jle
repz
push
add
aam
xchg
sbb
fwait
repz
scas
adc
and
or
push
push
adc
pop
jmp
pop
jno
push
xor
jns
iret
rcl
push
mov
test
add
ret
push
cld
xor
push
and
jmp
rcl
xchg
push
cmc
iret
ins
cwde
xor
mov
xor
mov
stc
xor
lea
adc
pminub
and
adc
movs
jp
in
(bad)
into
push
ds
push
adc
bound
adc
sbb
push
pop
mov
btc
movs
rol
stos
jge
xchg
xor
aam
or
adc
pop
loope
push
int3
aad
cmp
adc
inc
into
xchg
xor
imul
sub
or
adc
dec
das
stc
pushf
push
mov
in
int
or
mov
ja
mov
arpl
mov
jo
mov
xchg
cmp
adc
icebp
cmp
mov
or
loope
mov
mov
cmp
xor
push
(bad)
add
je
push
es
adc
mov
dec
scas
out
les
popa
or
jno
sbb
push
in
je
cmp
jle
in
xchg
add
sbb
adc
fld
rcr
xchg
retf
pop
xchg
cmps
sub
scas
lods
push
retf
xchg
push
and
and
cs
adc
loope
cdq
sub
pop
pop
test
jecxz
xchg
mov
cwde
mov
fimul
test
inc
es
xor
je
clc
cmc
bound
and
xor
push
scas
pusha
and
fsub
mov
in
adc
sti
sub
cmp
mov
outs
dec
xor
and
addr16
test
push
ret
ins
jecxz
mov
cmp
sub
jno
int3
and
imul
sahf
and
and
cld
and
sub
and
mov
push
adc
inc
mov
adc
add
je
lods
addr16
or
xchg
jmp
call
adc
inc
cmp
pop
imul
int
pop
inc
jne
outs
jmp
fisub
inc
mov
xchg
dec
sahf
and
sbb
jnp
test
push
push
fwait
mov
xor
inc
sub
mul
cs
sbb
mov
mov
and
adc
ret
cwde
push
xor
mov
xor
fistp
dec
jo
pop
push
idiv
or
js
jmp
dec
pushf
aas
int3
in
sub
into
xor
lahf
jb
mov
popa
or
loop
adc
or
jmp
adc
shl
(bad)
movs
(bad)
repnz
sbb
push
into
icebp
call
ds
mov
imul
addr16
repz
adc
inc
je
mov
jne
mov
adc
cmp
cmps
lods
inc
xchg
cmp
fwait
push
sbb
sbb
adc
mov
xchg
push
pop
cmp
dec
test
adc
int3
hlt
jle
pop
add
adc
mov
sbb
(bad)
adc
and
push
(bad)
loopne
adc
neg
ret
lods
jg
adc
shl
pop
jmp
sub
ror
jge
je
xchg
mov
or
cwde
sahf
adc
mov
pop
add
hlt
movs
test
mov
cmp
xor
mov
icebp
gs
lahf
jge
bound
mov
mov
aam
mul
jmp
xor
sub
mov
sbb
arpl
xchg
cmp
xchg
push
out
xor
bnd
push
lds
cmp
(bad)
lea
mov
inc
movs
leave
ret
and
in
sti
out
mov
int
cld
jb
sub
adc
inc
repnz
cs
adc
sub
adc
mov
lods
push
hlt
call
repz
or
adc
scas
pushf
adc
xchg
sub
dec
adc
dec
pop
pop
push
or
call
in
or
mov
sub
pop
sub
pop
es
xchg
jne
scas
dec
add
jecxz
inc
lods
int
cdq
cwde
sar
or
adc
lahf
xor
retf
outs
adc
outs
clc
ins
adc
cmp
pop
jnp
or
sbb
mov
sbb
in
ret
add
out
xchg
push
mov
cmps
jle
leave
adc
out
add
adc
mov
imul
cdq
scas
(bad)
retf
adc
je
inc
mov
push
adc
call
das
dec
xor
sub
les
or
push
test
xor
push
mov
pop
mov
icebp
out
fsub
sbb
adc
sub
sbb
add
jmp
retf
and
je
int3
cmp
jnp
bound
fst
retf
push
inc
push
push
xchg
test
or
push
mov
push
push
mov
and
stos
push
out
hlt
adc
adc
push
imul
addr16
je
out
ins
xlat
sbb
sbb
aam
mov
cdq
mov
mov
test
push
test
adc
dec
jg
pop
mov
fs
xchg
cli
scas
pop
out
rcl
test
jnp
sahf
icebp
mov
and
lahf
inc
(bad)
jl
aas
xchg
push
inc
pop
cld
cmps
sub
call
enter
jmp
xchg
les
outs
mov
mov
jmp
daa
sbb
dec
pusha
mov
adc
push
fidiv
out
xor
bound
jg
fild
or
adc
cmp
ins
adc
aas
adc
cmp
push
push
sbb
dec
das
jmp
lock
es
mov
push
adc
test
sti
dec
push
jno
adc
repnz
iret
jmp
adc
adc
xchg
cmp
add
xchg
mov
(bad)
adc
fld
sbb
movs
aaa
adc
lock
leave
adc
mov
sbb
data16
xchg
call
dec
xchg
std
inc
test
adc
adc
test
sub
adc
cmp
mov
test
push
gs
adc
dec
jp
mov
fimul
aam
cmp
adc
es
shr
or
xchg
stos
nop
pop
pop
add
and
aam
push
cmp
cmc
mov
xchg
mov
test
inc
xchg
int
in
out
sub
or
(bad)
cli
movs
sbb
jle
sub
dec
(bad)
add
or
sub
hlt
int3
test
stos
xor
mov
add
push
repnz
sub
aam
cmp
mov
inc
push
or
xchg
xchg
je
fisubr
retf
cmp
in
ins
sbb
pusha
not
std
mov
into
adc
repnz
sbb
je
cmps
adc
dec
std
mov
push
jmp
cmp
push
push
adc
pop
leave
stos
adc
jne
pop
cdq
or
lods
sar
mov
push
stos
in
xor
mov
push
aad
scas
jle
out
add
es
xchg
in
std
push
dec
je
or
sbb
cmc
push
and
repz
adc
in
add
jno
pop
aas
sbb
jp
(bad)
ins
jbe
aam
mov
pop
add
or
xchg
es
iret
mov
sbb
dec
ror
sub
xor
sub
iret
and
sub
pushw
push
fimul
push
popf
(bad)
jge
or
(bad)
jne
add
sbb
int3
xor
out
pop
test
aam
push
sbb
sbb
aad
or
out
xor
push
enter
add
xor
int3
xor
push
js
inc
test
add
stos
sbb
add
iret
xchg
cmp
adc
dec
lahf
mov
mov
mov
adc
test
mov
push
jg
(bad)
lods
scas
gs
xchg
out
or
xchg
push
add
ficom
dec
repnz
adc
cmp
clc
cwde
hlt
sti
retf
pop
es
xchg
push
add
jnp
xchg
xor
add
mov
cmp
ins
pop
mov
sub
inc
int3
jge
xor
(bad)
jnp
cmp
sbb
aam
shr
jecxz
mov
mov
or
in
lods
jno
test
push
int3
sbb
sti
mov
ror
push
xor
fdivr
sbb
pop
les
mov
test
int3
rol
adc
mov
ins
test
daa
cmp
mov
jnp
retf
add
pop
jp
push
jle
mov
int3
push
ja
cmp
clc
test
jecxz
sbb
(bad)
pop
or
cwde
aad
test
outs
(bad)
mov
xor
mov
mov
pop
retf
sub
push
mov
mov
xchg
js
daa
mov
xor
out
xchg
pusha
mov
push
je
jmp
in
or
push
cld
pop
mov
int3
loope
cmp
push
inc
inc
lock
inc
int
frstor
cmp
fwait
add
add
xchg
or
call
shl
fisttp
ins
cmps
sbb
outs
mov
sbb
(bad)
cld
das
or
addr16
xchg
adc
jg
scas
jb
xor
sbb
xlat
pusha
je
out
rcl
push
mov
imul
test
and
add
in
(bad)
repz
dec
add
jb
jge
push
cdq
fcom
xchg
xchg
xor
std
ficom
push
ds
fs
repz
xor
mov
sbb
and
cwde
sub
out
or
inc
sub
xor
ret
pop
mov
dec
dec
inc
adc
cmps
jns
lods
adc
cmp
pop
jl
add
mov
mov
int3
retf
ret
fiadd
mov
addr16
mov
rdmsr
cli
jb
sbb
pop
xchg
mov
shr
pusha
add
sbb
sbb
aad
nop
out
xlat
adc
lods
dec
(bad)
daa
adc
or
arpl
jmp
imul
sahf
enter
push
lods
outs
les
inc
sbb
das
push
mov
jo
mov
dec
mov
and
je
je
cwde
loop
sbb
push
leave
xchg
mov
jp
push
rcl
cld
aaa
retf
hlt
add
rcr
fimul
fst
xchg
push
push
mov
ret
mov
jo
or
cs
imul
xor
xor
and
sub
jns
int3
push
mov
sbb
push
ror
adc
pushf
out
enter
bound
mov
das
sbb
repnz
in
inc
(bad)
ret
enter
mov
push
int3
addr16
shl
and
arpl
cmp
or
fwait
push
xor
call
aad
jno
js
pop
arpl
iret
aas
loope
icebp
ror
gs
retf
idiv
movs
mov
inc
xchg
lods
repnz
shr
cmp
jb
xor
adc
stc
jo
and
push
cmps
adc
push
xchg
xchg
push
mov
ja
dec
sub
fild
mov
mov
aam
daa
lods
loopne
fsub
add
repnz
push
adc
jbe
(bad)
mov
enter
(bad)
fisubr
cmps
xor
xchg
setns
ds
not
fadd
js
pop
pop
jmp
adc
pop
clc
inc
push
test
mov
imul
push
das
jp
mov
adc
xacquire
adc
dec
adc
std
mov
mov
cmc
sbb
inc
jmp
dec
add
adc
mov
rcl
mov
bnd
mov
pop
popa
adc
and
or
adc
mov
pop
push
aad
retf
adc
sub
xlat
shl
in
xchg
ret
sub
repnz
out
outs
inc
adc
mov
lods
dec
shl
add
popa
dec
xchg
jecxz
mov
jl
push
cmp
fisub
dec
nop
cmp
adc
test
push
adc
adc
in
imul
jo
adc
scas
dec
xor
adc
js
or
dec
push
sbb
jmp
dec
mov
cld
push
in
and
fcmove
mov
inc
mov
call
aam
xor
mov
add
xchg
mov
jb
loop
adc
mov
int3
div
scas
int
dec
sti
adc
xchg
mov
loope
adc
pop
ins
lahf
test
lods
mov
rcl
lock
bound
fsubr
mov
icebp
idiv
mov
mov
mov
fwait
pop
inc
and
sbb
sar
xchg
(bad)
adc
push
mov
call
inc
adc
adc
and
xchg
adc
lds
into
push
(bad)
clc
arpl
cld
or
es
in
add
sbb
jmp
sahf
xchg
adc
out
cs
lock
xchg
or
adc
mov
mov
xchg
jp
test
add
xchg
aam
les
into
(bad)
popa
aam
inc
inc
sub
out
loopne
push
hlt
and
mov
stos
mov
out
xchg
or
(bad)
out
mov
test
fdiv
aam
les
mov
jmp
dec
push
adc
invd
and
add
(bad)
test
jb
push
js
sbb
dec
or
or
(bad)
inc
cmps
pop
aaa
mov
inc
jo
loope
rcr
mov
movlps
aaa
xchg
ins
jg
adc
sub
sbb
cmp
loope
lds
rcr
movs
hlt
jecxz
dec
adc
pop
xchg
inc
fs
imul
jbe
add
psubusb
(bad)
jg
bound
push
mov
mov
(bad)
sbb
aam
clc
stos
hlt
loopne
mov
fisubr
les
inc
jmp
call
sub
icebp
jmp
dec
fild
xlat
pop
pop
in
rcr
mov
loopne
jmp
mov
jl
adc
sub
dec
push
jmp
nop
fld
adc
ins
je
mov
adc
push
imul
ret
out
push
cmp
dec
xor
pusha
pop
jo
retf
movs
inc
movs
je
in
adc
xor
xchg
retf
pop
add
adc
scas
aam
jl
retf
mov
cdq
mov
(bad)
cmp
dec
sahf
js
call
push
rcl
out
cmp
inc
je
fs
rcr
out
xor
xchg
cmove
in
stos
push
jmp
pop
pop
inc
pop
cmp
cli
dec
push
and
das
and
lods
adc
mov
dec
ins
mov
mov
push
in
inc
je
pop
cmp
ins
or
(bad)
mov
ror
sti
sbb
jecxz
js
xchg
add
ins
fcmovbe
or
adc
retf
push
or
in
push
push
and
mov
imul
mov
xor
retf
js
fild
scas
mul
outs
mov
jmp
push
and
pop
mov
stc
mov
pushf
xchg
arpl
pop
mov
jo
pop
xchg
cmps
movs
call
add
int
pop
pop
out
scas
sti
aam
std
xchg
or
xchg
sbb
dec
push
sbb
sbb
and
xor
add
mov
daa
cmp
aad
or
aaa
ror
pop
dec
test
inc
mov
sub
mov
mov
lea
xor
in
mov
dec
xor
adc
test
adc
sub
cmp
push
sub
das
mov
and
pop
sub
rcr
cmp
push
mov
mov
cmc
cmp
push
cli
repz
sub
fwait
or
out
xor
repz
jns
je
add
jmp
pop
movs
je
cmp
adc
mov
loopne
adc
movs
dec
call
inc
scas
sahf
adc
mov
inc
pop
fadd
xchg
xor
adc
ds
inc
call
fldenv
sbb
leave
xchg
pop
lods
mov
and
sbb
int3
cmp
push
iret
aad
xchg
lea
retf
mov
push
mov
std
xlat
push
out
push
into
shl
mov
add
out
push
push
xchg
(bad)
push
xchg
movs
test
mov
adc
adc
loopne
add
aaa
test
outs
and
push
jb
push
aaa
xchg
test
rcr
push
stos
ret
movs
sbb
pop
retf
jae
sub
pop
adc
clc
xchg
mov
ins
push
aaa
cwde
and
popf
loopne
fidivr
inc
scas
add
dec
in
jl
sbb
ret
mov
imul
push
retf
or
hlt
pushf
or
pop
and
inc
xchg
(bad)
(bad)
ficomp
inc
and
dec
adc
pop
arpl
jmp
mov
mov
lahf
and
mov
popf
or
outs
(bad)
in
dec
ins
push
push
sbb
ds
jno
adc
add
out
jle
mov
adc
stos
jne
icebp
mov
cmp
pop
adc
enter
adc
sub
std
test
cdq
mov
dec
push
jmp
and
sbb
test
ins
cmp
jae
loop
adc
sbb
scas
test
push
mov
not
std
adc
popa
push
add
adc
enter
mov
mov
mov
or
aam
jne
inc
xchg
clc
not
jo
adc
unpcklpd
arpl
lods
cmp
adc
add
cmps
out
dec
adc
and
mul
(bad)
lock
adc
sub
pop
or
push
fdivr
rcl
sub
adc
jbe
(bad)
jmp
jl
rcl
xor
retf
jl
xchg
fimul
repz
int3
test
cmp
jecxz
sub
mov
jnp
xchg
or
or
mov
stos
sbb
inc
(bad)
or
xor
cli
xchg
lds
cdq
fimul
mov
mov
imul
add
and
int3
pop
sub
stos
mov
inc
jbe
xchg
popa
xor
pop
js
pop
in
lods
and
sbb
jl
pop
xchg
xchg
aaa
push
xchg
xchg
sbb
repnz
ins
adc
cs
fld
add
repnz
add
clc
inc
add
push
(bad)
scas
xor
mov
out
inc
pusha
pushf
jae
sub
repnz
inc
loope
push
std
sbb
(bad)
(bad)
movs
(bad)
idiv
call
(bad)
jb
imul
mul
cmc
cmp
adc
push
lock
or
mov
adc
xor
movs
adc
mov
jl
or
jp
out
inc
adc
inc
jmp
leave
adc
jle
in
repnz
push
popf
push
xchg
jne
jae
adc
add
adc
shl
sbb
mov
sahf
outs
sub
outs
add
push
dec
test
push
sbb
cmp
movs
imul
mov
adc
shr
xchg
das
out
lds
mov
mov
jge
lods
js
add
pusha
mov
sahf
push
add
mov
jae
int
push
adc
adc
imul
std
in
adc
sub
push
mov
sbb
into
out
sbb
adc
scas
or
fiadd
es
out
add
xor
mov
(bad)
pop
pop
fs
cmp
cmp
cmp
int
call
xor
retf
out
mov
clc
pusha
mov
or
(bad)
mov
leave
repnz
adc
xor
cmps
inc
repz
fidivr
sub
dec
mov
fdiv
bndstx
(bad)
fsubr
jbe
pop
mov
xchg
stos
jae
imul
jne
cmp
inc
jmp
jecxz
pop
pushf
movs
sbb
lods
mov
loopne
xor
test
mov
mov
lahf
adc
jno
sbb
or
pusha
dec
pop
sbb
imul
cli
leave
aam
outs
cmps
outs
adc
cmp
add
cmp
lds
sbb
sub
out
mov
sbb
adc
(bad)
int3
inc
adc
cmps
jno
inc
xchg
lods
mov
mov
or
add
xchg
adc
xor
retf
scas
cmp
jle
in
push
mov
mov
aas
cmp
push
sahf
sbb
adc
xor
(bad)
ins
sbb
adc
sub
cli
mov
push
jecxz
push
adc
dec
adc
btr
nop
int3
loop
repz
add
aam
fimul
mov
sbb
(bad)
dec
jnp
cmp
sbb
mov
aad
sub
and
call
xor
sbb
mov
stos
fs
push
add
int3
mov
xchg
adc
out
cdq
push
loopne
or
cmp
xchg
pop
int3
jnp
popf
adc
mov
inc
mov
xor
and
int3
xor
mov
ret
(bad)
xchg
jg
adc
push
sub
sbb
mov
xchg
ret
sub
call
addr16
movs
add
(bad)
jle
les
data16
scas
or
cmp
daa
stos
retf
adc
jl
mov
xor
stos
push
xchg
in
inc
mov
pop
and
xchg
movs
aad
add
or
mov
stos
cli
repnz
test
cmp
test
adc
(bad)
push
adc
xor
loope
clc
jne
pop
add
(bad)
stos
push
push
cmp
cdq
xchg
mov
push
pop
xchg
jg
xor
ror
ins
lods
jecxz
clc
aam
adc
je
mov
push
repz
out
aaa
xchg
add
fidivr
mov
hlt
sub
mov
and
shl
mov
fcom
daa
ins
mov
in
dec
jmp
mov
mov
mov
imul
ds
js
mov
pop
icebp
xchg
jp
mul
adc
inc
les
push
stos
retf
jl
adc
pop
cmp
out
ret
sbb
fisttp
or
js
push
cdq
jb
cmps
(bad)
mov
inc
stos
dec
mov
sub
jmp
cmp
push
xor
add
adc
jecxz
scas
daa
scas
adc
out
outs
adc
push
rcr
sub
push
xchg
loope
sbb
jmp
mov
dec
aam
adc
adc
lahf
(bad)
arpl
xchg
fild
pop
lea
xor
xchg
in
dec
pop
xchg
adc
jbe
or
aad
jno
out
mov
lods
sahf
shl
ret
push
dec
xor
xor
dec
fistp
adc
enter
out
ficom
or
push
cmp
xchg
sti
in
in
iret
adc
sub
adc
xor
or
pop
sub
mov
idiv
fsub
adc
mov
push
mov
std
or
movs
ins
popf
cmc
sub
out
sub
push
cmps
cs
stos
int
lahf
pop
xchg
lds
or
and
std
sub
cli
adc
inc
test
mov
adc
rol
cmp
and
lods
push
xchg
add
dec
repz
adc
xchg
xchg
push
sar
sub
xor
aaa
fnsave
aam
ret
ds
jns
int
popa
jecxz
push
loopne
(bad)
shl
hlt
push
and
retf
adc
fisub
int3
fnstcw
out
jl
shl
enter
mov
xchg
mov
outs
int
jp
push
xor
inc
sbb
xchg
aam
pop
and
enter
sub
dec
pop
add
dec
xchg
jnp
in
stos
fs
push
aam
jbe
adc
fwait
popf
jmp
and
inc
pop
adc
xchg
aam
cmp
rcl
push
mov
xchg
aad
adc
fisubr
cmp
mov
pop
setl
dec
les
nop
retf
rcl
and
ror
mov
add
pop
adc
in
mov
ret
sub
push
es
scas
arpl
adc
xchg
push
jno
retf
adc
sahf
scas
call
lahf
add
cmps
adc
mov
dec
daa
cld
adc
inc
pop
out
in
and
inc
js
adc
adc
imul
xchg
ss
jmp
mov
cmp
jnp
add
mov
sbb
or
arpl
int3
rcr
dec
jne
pop
ins
inc
cmc
sub
dec
add
pop
jmp
(bad)
gs
shr
ins
pop
adc
in
adc
retf
mov
inc
adc
cmp
and
cmps
xor
add
push
ins
jg
add
sahf
mov
pop
xor
aam
jnp
and
xor
mov
pop
inc
cwde
cmp
repnz
jmp
rcr
inc
cmc
or
stos
mov
push
sbb
test
aas
pop
das
cwde
repnz
add
popa
sub
adc
cmps
jo
push
and
and
cmp
int3
scas
retf
sbb
in
push
push
pop
mov
xor
lods
xor
cmp
or
lods
nop
adc
pop
add
inc
jmp
cli
shr
adc
inc
test
dec
and
js
adc
inc
xchg
std
data16
mov
push
daa
xor
jb
jmp
adc
add
sub
in
adc
ss
inc
ins
adc
push
and
adc
or
shl
neg
adc
xchg
es
and
stc
adc
out
loopne
pushf
ss
adc
not
rcl
in
sbb
adc
or
mov
jns
adc
adc
cmps
cld
adc
lock
lds
jecxz
push
jle
sbb
dec
ja
shr
test
(bad)
xchg
in
sbb
int
xchg
cmp
push
xchg
ret
out
loopne
test
or
adc
cdq
push
fdiv
cmp
hlt
cmp
or
mov
pop
in
aam
lods
sbb
and
ds
lahf
ror
inc
sub
xor
frndint
jge
bound
in
adc
add
movs
mov
jno
aaa
adc
mov
inc
fld
sbb
xchg
cld
and
mov
clc
pop
xchg
stc
aam
pop
and
test
jl
out
call
sub
clc
mov
xor
jns
(bad)
std
out
jmp
pop
push
or
movs
adc
ret
cmps
pop
adc
add
jecxz
inc
in
adc
(bad)
(bad)
aaa
or
cmp
cmp
leave
xor
dec
xor
xor
sbb
fs
inc
fdivp
adc
cmp
lahf
adc
test
cmp
adc
xchg
and
adc
sbb
je
fwait
and
push
clc
bound
mov
push
push
xlat
in
mov
lock
push
mov
xchg
fcomp
pop
adc
xlat
(bad)
int3
(bad)
sti
adc
xchg
scas
arpl
jg
je
sbb
and
adc
das
push
repz
cmp
fsqrt
jnp
into
xor
add
xor
sub
and
mov
fimul
cmp
inc
inc
sbb
(bad)
jno
pop
mov
rcr
adc
imul
pop
jle
dec
imul
pop
xor
dec
mov
and
sar
or
jb
sbb
(bad)
shl
or
xor
push
js
cmp
mov
mov
adc
pop
int3
xchg
lea
rcr
xrelease
jecxz
call
outs
retf
lds
stos
mov
lods
inc
xchg
fnsave
pop
sbb
push
ret
jb
adc
ins
xor
in
test
adc
mov
jmp
adc
xor
les
jns
adc
imul
mov
adc
xchg
xor
and
fdivr
cmp
scas
xchg
xor
inc
sub
fs
xchg
jae
push
stc
xchg
and
adc
xor
or
mov
adc
sub
gs
aas
dec
mov
add
jb
hlt
fstp
ficomp
push
repz
les
adc
pop
dec
imul
push
out
mov
mov
ss
repz
dec
jnp
pop
adc
jne
xor
loope
jmp
or
movs
pop
std
ret
adc
popa
mov
lods
ins
adc
inc
(bad)
mov
xchg
hlt
sbb
add
out
int3
unpckhps
into
push
cmps
pusha
add
rol
(bad)
pop
call
xor
loope
add
dec
jmp
jmp
pushf
jecxz
hlt
fidiv
xor
into
mov
(bad)
arpl
jle
aaa
inc
inc
mov
popa
(bad)
retf
and
icebp
loopne
test
test
mov
je
xor
cld
pop
in
rep
or
dec
ins
lahf
inc
sbb
adc
cdq
test
std
lods
xchg
pop
mov
in
fisub
pop
cmps
loope
aam
gs
push
jl
adc
ds
sub
clc
mov
ds
cld
xchg
rol
add
dec
add
iret
adc
in
scas
fisubr
pushf
xchg
xchg
into
jne
inc
ins
imul
fld
lods
cld
jne
popf
lods
retf
cmp
jmp
fdiv
lods
inc
cli
(bad)
imul
xor
cmps
clc
jae
mov
cwde
call
mov
daa
in
dec
mov
movs
xor
push
inc
dec
test
inc
adc
sbb
pop
adc
js
mov
das
dec
jg
pop
and
adc
xchg
out
fdiv
push
mov
scas
cmps
jmp
stos
adc
xchg
outs
stc
sbb
lock
repz
jae
and
add
fiadd
push
daa
xor
mov
fimul
adc
pusha
mov
cs
nop
and
lods
sub
mov
cmp
ja
es
je
cwde
popa
xor
les
aam
xchg
or
add
or
push
jmp
sbb
sar
inc
mov
mov
std
dec
fst
adc
lods
aad
outs
mov
loopne
inc
mov
inc
cmp
not
es
adc
push
jbe
in
bound
and
std
jmp
pop
fnstcw
cmp
sbb
pop
repz
jbe
jge
mov
std
adc
adc
inc
dec
ror
adc
adc
cmp
pop
and
xchg
leave
jg
iret
enter
xor
or
dec
or
push
cmps
sti
fcomp
adc
shl
mov
or
xlat
inc
aad
xor
adc
mov
in
call
or
mov
(bad)
movs
jno
push
lea
add
pop
cmp
pop
mov
mov
imul
push
outs
outs
push
cmp
test
adc
jle
or
jmp
mov
adc
add
jo
mov
outs
cmp
inc
mov
int
rol
mov
pushf
add
ret
xor
sbb
stos
mov
stos
test
mov
stos
shl
or
xor
and
xor
pop
lahf
push
bound
xor
outs
(bad)
jae
ret
test
mov
imul
xchg
push
jge
(bad)
je
push
mul
pop
pop
int
mov
xchg
fld
and
sbb
xor
xor
jmp
enter
cs
cmp
adc
sbb
mov
adc
test
hlt
mov
dec
adc
cmp
imul
adc
xchg
mov
mov
mov
xor
mov
clc
cmp
fwait
popf
test
pop
ins
push
xor
mov
pop
add
adc
push
imul
push
cmc
adc
not
ret
daa
js
fidiv
dec
xor
(bad)
mov
jle
adc
retf
aaa
sbb
or
popa
je
iret
pop
or
addr16
adc
jg
retf
in
mov
popf
packssdw
outs
mov
jb
mov
fstp
jl
mov
int3
cmp
das
xchg
js
sbb
stos
ret
pop
xchg
imul
rcl
movs
adc
push
(bad)
mov
addr16
mov
bound
js
or
xchg
pushf
fcom
push
or
adc
xchg
push
dec
cmps
xchg
adc
mov
mov
cmp
push
mov
in
stc
sub
fsub
fidiv
xor
push
adc
outs
dec
mov
sbb
sub
dec
adc
retf
ror
pop
and
pop
in
jnp
jmp
into
adc
mov
jbe
das
sbb
aad
cmp
xchg
sub
pusha
sbb
clc
mov
in
stos
mov
mov
mov
fild
push
mov
lahf
test
cld
jp
xchg
push
mul
adc
cmp
int3
xchg
mov
adc
loop
xor
rcl
aam
test
mov
(bad)
adc
sbb
adc
fisub
sbb
retw
adc
mov
and
clc
stc
mov
sbb
das
fadd
(bad)
aam
cwde
cmp
and
dec
mov
mov
stos
bound
in
int3
mov
out
retf
xor
dec
test
or
pop
je
push
adc
out
adc
retf
sub
les
or
sar
and
push
pop
arpl
das
aaa
in
mov
sahf
xor
dec
rcl
cmp
shr
pushf
ja
rcr
pop
repnz
das
mov
js
in
retf
xor
popa
movs
call
fidiv
jne
lahf
jbe
push
xor
jmp
call
pop
scas
cmps
adc
lods
jb
inc
mov
into
dec
mov
ss
cmps
std
jle
cmp
inc
(bad)
into
outs
in
dec
xchg
sbb
mov
(bad)
mov
movs
aam
fmul
or
adc
(bad)
adc
test
retf
xchg
out
dec
retf
push
movs
dec
xchg
push
pop
and
(bad)
or
xor
enter
mov
out
fs
lds
sbb
mov
mov
cmp
fnstcw
(bad)
rcr
aam
call
pop
sbb
xchg
mov
cmps
das
mov
xchg
push
cmp
out
call
fadd
push
and
add
test
inc
or
in
pop
repnz
fcomp
sub
and
pop
popf
push
mov
mov
or
sbb
fst
xlat
adc
add
mov
mov
xchg
fs
dec
cmp
jge
push
push
inc
adc
ret
lods
fcom
cmp
inc
in
ds
push
sub
mov
(bad)
repz
dec
mov
push
jl
xchg
enter
fs
out
jnp
and
add
pop
ss
rcr
push
jle
lock
sahf
mov
and
push
retf
push
inc
mov
out
mov
es
sahf
data16
repnz
les
stos
xor
sbb
mov
push
inc
stos
push
add
jl
inc
retf
jb
sub
sub
adc
loopne
mov
(bad)
into
mov
adc
repz
add
test
jns
inc
pusha
and
mov
mov
sbb
loopne
movs
jmp
in
mov
sub
xchg
cmps
test
adc
hlt
pop
movlps
fnstenv
xchg
fwait
and
enter
xchg
icebp
jbe
imul
xchg
lahf
sub
pop
inc
xchg
push
test
xor
fs
mov
fild
test
add
pop
test
add
xchg
loope
sub
dec
mov
ds
inc
sub
xor
cwde
ja
xchg
cmp
(bad)
push
xor
mov
xchg
xchg
test
je
call
add
xchg
mov
lods
gs
mov
enter
push
adc
dec
push
sahf
pop
popa
cmp
mov
mov
inc
es
in
push
or
test
adc
xchg
movs
inc
fisttp
sub
fcomip
fmul
movs
or
les
xor
push
adc
(bad)
jnp
pop
dec
arpl
adc
xlat
sbb
sub
stos
mov
mov
enter
adc
out
ret
fwait
test
adc
pusha
inc
inc
cli
loope
xchg
jp
jns
stos
push
jl
jp
jne
ds
(bad)
(bad)
push
mov
scas
xor
xor
pushf
inc
in
cmp
loope
mov
add
or
jb
out
jno
adc
retf
cld
in
ret
adc
push
push
ret
aas
mov
pop
mov
sbb
sub
fstp
fistp
xor
push
or
xchg
adc
jecxz
loopne
push
int
pop
fist
and
stos
test
xor
inc
mov
adc
div
sub
adc
call
push
mov
pop
sbb
mov
adc
mov
js
adc
loope
or
(bad)
push
aaa
cmp
outs
add
mov
sub
test
push
call
adc
xor
lea
stos
and
push
int3
das
adc
movs
push
shr
je
dec
adc
pushf
push
imul
adc
pop
pop
cmp
bswap
push
les
call
and
push
outs
xchg
cmp
xor
add
int
imul
xchg
mov
(bad)
adc
test
sub
out
sub
adc
xor
pushf
sbb
es
pop
inc
scas
adc
and
and
hlt
(bad)
ds
aam
adc
out
mov
punpcklwd
(bad)
jecxz
scas
in
jb
cli
(bad)
adc
adc
inc
fbld
in
jecxz
xor
cwde
dec
test
adc
mov
or
ja
cmps
imul
hlt
outs
neg
push
push
jnp
aam
lods
daa
sti
sub
(bad)
mov
dec
dec
inc
sbb
or
fst
mov
in
scas
mov
sub
sti
and
sbb
out
aaa
aas
popf
fisub
push
(bad)
xor
mov
xor
lock
in
xlat
inc
cwde
mov
cmp
add
ins
adc
iret
fwait
clc
ja
call
and
add
and
nop
cmc
mov
in
jns
movs
mov
hlt
or
icebp
push
nop
jo
push
cli
sbb
pop
mov
ins
add
and
lods
dec
jmp
stos
sub
jnp
sbb
pop
xlat
out
xchg
mov
pop
pop
hlt
dec
iret
ja
fidiv
stc
push
xor
adc
push
call
rcl
loopne
or
pop
leave
add
mov
xchg
dec
sbb
pusha
retf
repnz
xchg
push
loope
push
rcl
pop
fimul
retf
jae
adc
dec
add
fild
call
je
lods
mov
out
inc
sub
cmc
(bad)
fstp
rol
test
fdiv
popa
pop
pushf
jbe
cmps
rcl
xor
mov
fs
push
jmp
icebp
cli
pop
call
adc
pop
fwait
add
call
add
adc
pop
dec
xchg
out
shl
inc
loop
mov
adc
mov
addr16
adc
adc
fbld
stos
xor
(bad)
movs
aam
push
hlt
cmp
push
xchg
sbb
adc
pop
or
cmp
adc
xchg
loop
sub
aaa
fwait
dec
fcom
scas
icebp
fxch
je
jge
sbb
push
push
mov
fldenv
in
fisubr
pop
call
sub
pop
lods
leave
outs
add
into
iret
fs
inc
in
in
jo
jle
fnstsw
stos
xor
cmps
das
movs
imul
xor
clc
in
adc
inc
out
retf
scas
adc
dec
fs
jg
(bad)
mov
mov
push
xor
in
xchg
pop
add
jecxz
mov
sbb
jl
movs
pop
sbb
and
pop
aam
xor
daa
xchg
rcr
cmp
adc
movs
cmp
sbb
fwait
adc
jo
lock
xor
cmp
pop
inc
mov
or
data16
cdq
fcmovnbe
or
in
popf
and
push
retf
jp
call
pop
in
jb
mov
fwait
adc
jecxz
sbb
push
ja
cmp
rcl
mov
push
mov
(bad)
ficom
add
repnz
xchg
fist
sub
pop
mov
mov
xor
data16
gs
sahf
pop
push
adc
mov
push
ret
je
adc
add
(bad)
jno
outs
sub
xor
cwde
mov
jmp
mov
(bad)
pop
fcom
rcr
sub
jb
rol
fs
aaa
cmp
xchg
imul
fild
and
or
mov
lock
les
ins
stos
idiv
or
aas
hlt
aaa
mov
adc
repz
inc
push
retf
sub
popa
in
test
sbb
ffreep
ret
in
jae
sahf
pop
jne
out
cmc
sub
sub
retf
push
inc
and
retf
call
xchg
push
push
mov
pusha
jg
mov
adc
adc
xchg
or
hlt
es
cld
push
jg
pop
in
jg
ss
rol
fs
cwde
inc
or
add
test
icebp
add
mov
pop
adc
stc
and
inc
or
adc
jle
mov
mov
scas
xchg
cmp
data16
or
adc
stc
sbb
sbb
adc
test
cmp
test
xor
pop
fst
jmp
cli
out
xchg
and
adc
outs
repz
adc
leave
mov
movs
sub
adc
arpl
adc
mov
and
iret
push
test
add
xchg
jmp
icebp
adc
outs
test
sbb
jmp
daa
jb
fs
jmp
sub
or
in
inc
pop
(bad)
mov
or
xor
jl
mov
fist
dec
lea
enter
lahf
shr
jge
cmp
xchg
das
mov
or
jg
dec
jno
lods
adc
and
iret
xchg
cmps
cld
in
cmp
test
mov
out
movaps
and
adc
imul
inc
sbb
cli
sbb
fbstp
adc
cmps
out
inc
ins
loopne
outs
sbb
das
int
add
pop
hlt
mov
fs
andps
cmp
into
dec
mov
(bad)
leave
sbb
xor
xchg
and
rcl
or
es
dec
pop
cwde
pop
sbb
inc
scas
sub
mov
leave
jmp
dec
dec
dec
adc
push
jl
aas
cld
retf
cdq
adc
fwait
cmps
cmp
iret
adc
mov
fucomip
sahf
adc
mov
outs
hlt
cmp
mov
rcl
out
adc
scas
push
xchg
xchg
jg
adc
xor
pop
rcr
push
mov
push
inc
sbb
retf
cmp
paddq
dec
lods
addr16
adc
xchg
lea
(bad)
fdiv
lahf
pushf
sub
cmp
xchg
das
mov
out
and
inc
adc
mov
ror
retf
pop
xchg
mov
jns
dec
xchg
mov
or
in
arpl
xchg
and
int
inc
aad
je
adc
pop
imul
inc
outs
push
jb
jmp
movs
adc
sbb
cmovp
and
les
or
fsubr
xor
jmp
adc
adc
inc
das
pop
jg
pop
lods
icebp
fisubr
cld
xchg
and
scas
jns
lea
push
sbb
sub
dec
or
aas
sbb
retf
fiadd
fsub
adc
(bad)
mov
jmp
adc
ins
ja
adc
pop
fldpi
stc
daa
fs
push
andps
xor
test
dec
adc
fist
mov
fiadd
push
add
lods
jge
scas
sub
lea
sub
xor
sub
adc
push
shl
adc
int3
inc
rcr
dec
jbe
mov
adc
pop
mov
adc
pop
xchg
es
sahf
(bad)
in
pop
icebp
retf
mov
addr16
cmp
push
fist
xor
jmp
sahf
loopne
mov
jle
push
in
push
mov
sbb
inc
data16
add
addr16
rcl
mov
das
xor
rcr
push
adc
icebp
out
xchg
or
iret
dec
adc
adc
sub
retf
xor
pop
mov
jmp
mov
aaa
adc
mov
xor
pushf
ins
pop
push
iret
jmp
daa
test
in
adc
add
xor
es
rcl
jae
jg
push
(bad)
in
xor
retf
(bad)
aad
lods
adc
cmp
sbb
dec
aam
ror
dec
mov
sub
rcl
jl
jns
push
int
jge
xchg
xchg
xor
gs
stc
cmp
mov
push
movs
jmp
pop
sbb
push
jle
xor
ss
in
aad
imul
jo
xor
shl
adc
xchg
je
adc
mov
lods
xor
pop
cli
in
cmp
xor
jecxz
stc
pushf
sbb
rcl
mov
xchg
or
add
cs
fdiv
call
inc
and
bnd
test
pop
(bad)
sbb
not
int3
push
repnz
dec
jmp
sub
ins
fcom
(bad)
and
push
jne
sbb
sub
push
retf
inc
mov
cmp
cvtps2pd
mov
mov
dec
cmp
adc
push
add
jmp
sbb
or
mov
lods
dec
(bad)
xchg
or
sti
je
aam
sub
jp
in
or
and
push
sbb
sahf
push
and
adc
push
sbb
jo
sbb
out
adc
add
(bad)
cmp
aaa
adc
xchg
xor
add
je
clc
sbb
dec
sbb
sub
xor
daa
pop
ret
sbb
aad
xchg
gs
fsub
adc
dec
movs
or
cdq
bound
mov
jmp
or
mov
jmp
mov
push
pop
pop
cmps
pop
adc
(bad)
idiv
ror
push
push
outs
out
ror
push
(bad)
push
inc
dec
push
adc
cmp
or
push
mov
push
fs
pop
jl
sbb
(bad)
or
sbb
and
ror
movs
cmp
inc
mov
and
lds
inc
aaa
lahf
jne
push
ja
iret
mov
movs
adc
push
sbb
sub
popa
lock
inc
push
or
xchg
sbb
push
adc
pop
adc
movs
xor
in
repz
adc
popa
jb
inc
mov
arpl
lock
nop
lds
lock
mov
rcl
add
std
les
test
in
inc
repnz
cmp
inc
cmp
or
rol
ins
and
test
jecxz
jbe
dec
or
adc
or
xlat
jb
dec
adc
xor
jne
arpl
sub
dec
dec
ins
stos
add
mov
push
(bad)
fiadd
icebp
loopne
push
retf
or
iret
sbb
int3
push
and
mov
mov
and
pop
xchg
sahf
push
fimul
mov
or
mov
xchg
aaa
into
mov
out
jns
bound
adc
jle
xor
add
fsubr
xor
adc
(bad)
adc
mov
sbb
sub
push
dec
cmp
xor
imul
test
push
imul
sahf
cli
je
(bad)
loope
adc
dec
retf
dec
xchg
(bad)
retf
pop
fisttp
push
mov
(bad)
sbb
jno
aad
jae
call
sti
in
mov
fwait
sar
mov
retf
add
add
cmp
mov
mov
pop
cli
aad
fsub
jp
cdq
inc
mov
dec
or
sbb
retf
sub
sub
and
retf
xchg
out
fild
das
call
ret
aad
mov
sbb
int3
retf
jne
mov
imul
in
std
sbb
or
and
retf
push
nop
pusha
fcomp
pushf
test
lock
push
lds
adc
xor
adc
test
or
inc
fcom
aas
loop
cmp
repz
xlat
push
rol
adc
adc
iret
xlat
test
clc
mov
les
stc
pop
hlt
pop
loopne
outs
add
retf
je
outs
mov
sbb
sbb
pop
jg
jmp
push
into
pop
cmp
push
mov
lahf
adc
icebp
push
mov
cli
jge
das
mov
fisub
cmp
fdiv
fs
cwde
daa
dec
test
mov
xchg
and
je
imul
adc
pop
das
imul
retf
fisttp
loopne
pop
xor
cmps
cdq
cmp
dec
mov
call
ret
dec
sbb
loope
jle
cmp
call
out
cmp
mov
sti
imul
int3
(bad)
je
pop
in
sbb
outs
jecxz
sahf
dec
push
or
add
jmp
cmp
(bad)
adc
or
mov
push
scas
lds
int3
das
shl
sbb
test
xlat
test
inc
lods
in
dec
shl
movs
or
and
js
xchg
mov
or
cmps
mov
aam
loopne
jno
shr
cmps
dec
scas
(bad)
push
add
and
in
xor
jg
cmps
xor
sbb
dec
pop
pushf
xchg
sahf
dec
push
fisttp
cmps
add
jns
(bad)
leave
ja
sbb
leave
(bad)
shl
dec
mov
clc
push
push
aas
sbb
cmp
adc
mov
rcl
call
pop
test
xor
and
arpl
stc
lock
iret
push
jle
adc
jns
cmp
or
out
out
push
ss
xchg
push
adc
test
cmp
adc
aam
gs
mov
cmc
push
addr16
push
dec
aaa
jl
or
adc
jecxz
popf
xor
fldcw
or
mov
sbb
jmp
and
js
jbe
pushf
push
imul
cmps
adc
stos
push
mov
push
ins
arpl
cmp
inc
aam
leave
push
test
lods
out
fwait
xchg
push
dec
mov
(bad)
(bad)
jp
adc
loopne
fucomi
sub
xchg
std
stc
idiv
push
add
adc
enter
mov
pop
adc
sub
push
adc
js
mov
jl
adc
mov
dec
popa
clc
push
popfw
sbb
xchg
pop
push
xchg
fdivr
adc
cdq
rcl
push
cmp
pop
cmp
add
fnstcw
popf
cmp
jmp
das
imul
int3
mov
jb
mov
adc
fdivr
add
push
jne
add
push
push
ds
mov
push
sbb
mov
jno
sti
mov
aam
in
data16
call
mov
adc
repz
cdq
inc
(bad)
fst
sbb
sbb
fs
ss
xor
loop
add
mov
ret
stos
sahf
sbb
daa
cmps
loop
out
adc
dec
adc
in
je
xchg
scas
mov
cmc
in
ins
pop
pop
std
jnp
adc
sbb
(bad)
movs
sub
jb
add
jge
dec
jmp
icebp
sbb
cdq
ret
psrlq
int3
arpl
and
(bad)
mov
retf
sar
js
(bad)
ss
test
neg
mov
fstp
cwde
mov
or
inc
and
(bad)
retf
push
mov
jno
adc
fwait
jle
jbe
sub
stos
pop
arpl
adc
rol
scas
adc
adc
push
adc
mov
push
push
adc
(bad)
idiv
adc
pop
(bad)
es
adc
add
stos
nop
dec
int3
add
push
adc
dec
cs
cmps
pusha
sbb
push
pop
pop
push
xchg
jge
into
shl
sub
sti
leave
stos
in
mov
fcomp
into
int3
or
mov
xchg
cmp
fstp
dec
repnz
xchg
push
loope
mov
js
adc
cmp
pop
hlt
adc
pop
inc
jge
call
outs
shl
dec
adc
cli
test
sub
mov
adc
inc
or
shr
inc
(bad)
xor
jge
sti
cmps
adc
push
aam
push
fadd
adc
jmp
adc
not
shl
adc
lods
pop
adc
add
dec
add
xor
loopne
dec
in
push
loope
cld
jns
ret
pop
repnz
aad
rcr
js
je
lods
mov
push
ret
xor
repnz
ins
adc
or
mov
mov
mov
pusha
ss
adc
mov
pop
sbb
stos
or
ret
xchg
ret
sbb
ins
pop
scas
mov
adc
mov
pop
lods
int3
cmp
adc
aaa
jmp
cmp
mov
enter
xchg
adc
mov
(bad)
mov
imul
fist
ins
cmp
pop
mov
in
je
sbb
cmp
(bad)
lds
movhps
mov
mov
inc
push
sbb
rcl
jecxz
xlat
xchg
xchg
lock
fsubrp
or
fnsetpm(287
icebp
adc
in
sub
mov
fld
(bad)
push
in
push
adc
aaa
mov
je
lea
ins
adc
popa
(bad)
dec
inc
(bad)
repnz
push
imul
adc
not
adc
xor
jo
dec
mov
push
jecxz
mov
push
hlt
pop
dec
js
fadd
and
xchg
aas
outs
pop
cmp
cwde
lahf
les
int3
rcl
xor
add
sti
sbb
(bad)
inc
cmps
dec
movs
ss
push
in
test
aas
push
aad
jbe
jle
retf
jne
scas
inc
pop
in
rol
cld
and
inc
les
cmc
(bad)
adc
fist
test
outs
idiv
xchg
ja
add
sub
aam
pop
or
hlt
jmp
cmp
in
adc
call
aam
pushf
and
cli
cmp
mov
rcl
pop
loop
add
sbb
das
xor
rcl
mov
mov
pop
enter
adc
retf
sub
lock
arpl
adc
pusha
xchg
clc
cmp
and
mov
xchg
ret
out
es
mov
(bad)
adc
or
and
push
mov
popa
in
mov
hlt
sub
xor
xchg
shr
cmps
xlat
xor
jb
inc
and
and
jmp
adc
out
cmp
push
mov
rol
push
xor
ret
sub
stc
les
dec
(bad)
adc
test
mov
fs
lea
adc
push
inc
add
popaw
adc
cmp
repnz
ret
jmp
xchg
push
addr16
adc
mov
out
fild
push
or
adc
pop
ds
and
mov
xchg
and
arpl
add
xor
int
aad
pushf
push
jmp
jne
fwait
push
lock
fldenv
hlt
mov
adc
scas
pop
(bad)
cwde
aaa
push
push
adc
dec
xor
adc
adc
call
push
cmp
sbb
cmp
aam
loop
pop
pop
pusha
mov
sahf
xchg
jge
and
add
adc
ins
icebp
jmp
jge
push
xor
adc
sahf
test
ror
sbb
jmp
mov
(bad)
adc
mov
daa
mov
arpl
and
dec
adc
cmp
sar
xor
jmp
inc
jmp
adc
cmps
push
scas
imul
xchg
lock
popf
push
(bad)
or
jae
adc
inc
shl
dec
cli
adc
test
adc
out
mov
ds
or
or
cmp
(bad)
xchg
pop
sbb
shl
loope
jecxz
sub
daa
mov
adc
dec
mov
or
addr16
cli
iret
push
sbb
push
call
adc
jbe
add
jae
xor
dec
and
sbb
js
xchg
lds
je
xor
add
aam
mov
and
jp
fistp
and
xchg
inc
bound
in
or
mov
lahf
addr16
xor
inc
jecxz
aaa
jmp
jle
je
aam
or
adc
and
adc
xchg
pop
jno
inc
xchg
adc
inc
ds
adc
loop
xor
adc
sbb
rol
lock
js
jecxz
adc
sub
popf
(bad)
fmul
adc
add
sar
call
push
das
xchg
inc
or
test
popa
out
in
and
mov
push
iret
mov
mov
jecxz
jle
and
popa
aaa
and
sub
pop
xchg
setbe
test
adc
lahf
imul
inc
adc
add
cmp
pop
jns
dec
mov
movs
inc
mov
jmp
repz
push
loopne
and
push
retf
push
inc
adc
scas
aas
sub
addr16
xlat
lea
movs
jl
pop
mov
je
xlat
loopne
mov
sub
sbb
sub
pusha
inc
and
call
or
add
push
std
mov
js
clc
jnp
push
mov
(bad)
adc
sub
aad
popf
stos
or
jmp
add
pop
xor
pop
addr16
push
adc
sbb
loope
and
test
xchg
jecxz
stos
xor
(bad)
call
inc
mov
inc
mov
jnp
add
sbb
cs
int3
xor
adc
xchg
fs
pop
adc
xor
mov
push
adc
repnz
xor
out
or
enter
adc
mov
and
adc
push
faddp
ins
push
jecxz
movs
jge
sbb
add
push
xchg
scas
(bad)
mov
mov
or
or
push
in
pop
and
jns
cmp
jmp
lods
ret
xchg
or
in
aas
lea
adc
mov
pop
int
push
push
ins
sahf
sub
shl
enter
sub
fistp
movs
ja
push
inc
stos
inc
xchg
adc
ss
dec
adc
lock
sar
xchg
in
(bad)
pop
pusha
dec
les
xchg
aad
jne
(bad)
fst
adc
and
jmp
adc
xchg
cmp
loop
dec
(bad)
adc
adc
imul
int3
shr
adc
fxch
mov
mov
test
xlat
mov
shr
dec
xor
mov
aas
xchg
dec
or
mov
call
pop
mov
add
xchg
inc
mov
xchg
sbb
cmp
sbb
aas
scas
out
lods
mov
pusha
adc
xchg
iret
push
fild
push
jne
xor
cmp
daa
lock
hlt
cld
jl
es
movs
cmp
sbb
sub
mov
mov
imul
iret
ret
or
adc
xchg
test
retf
adc
out
or
mov
repz
mov
adc
cli
and
sub
jb
xchg
leave
adc
sub
pop
cdq
ins
popa
jg
add
mov
push
test
dec
in
and
imul
add
inc
adc
add
or
iret
and
xor
sti
jle
fs
pop
aam
mov
es
iret
popa
push
adc
push
sbb
push
pop
xor
or
mov
mov
xchg
pusha
adc
sub
and
lahf
jmp
inc
inc
repnz
push
adc
dec
or
repz
and
adc
mov
hlt
cs
xchg
or
adc
clc
dec
stos
jmp
cmp
inc
sbb
retf
adc
pop
ss
and
cmc
jb
sbb
repnz
and
sbb
fisub
fs
xchg
jnp
jg
xor
loop
mov
and
xchg
push
jg
stos
mov
or
aam
iret
cli
jne
adc
mov
call
imul
outs
fnstenv
loopne
bound
sahf
(bad)
adc
sub
dec
in
pop
adc
retf
daa
add
push
sub
adc
dec
xor
fdivp
cmp
jle
sub
inc
dec
js
arpl
cmp
push
out
out
xor
add
pop
push
mov
adc
aam
sbb
sub
mov
push
retf
dec
pop
mov
mov
and
shl
sub
mov
xchg
and
or
xchg
in
add
adc
mov
pop
mov
add
imul
pop
inc
jmp
sub
sbb
xchg
sbb
ins
arpl
ins
adc
lods
jno
ss
xchg
mov
cdq
in
int3
pop
icebp
inc
in
out
ret
cmps
fwait
call
aad
in
adc
sar
add
pop
fst
add
or
int3
daa
dec
fist
stos
ret
xchg
(bad)
je
mov
(bad)
movmskps
mov
jb
inc
leave
(bad)
shl
mov
ficom
ror
int3
dec
in
push
push
ins
adc
je
fsub
in
pop
jg
dec
test
stc
retf
xchg
sbb
push
push
arpl
jp
xor
movs
call
sub
pop
jno
add
or
enter
mov
mov
sub
push
push
(bad)
aaa
fidivr
pusha
clc
dec
test
fnsave
jl
pop
push
mov
rcr
pushf
jp
retf
and
in
nop
scas
mov
dec
pop
mov
or
add
movs
fist
movs
fsub
jno
imul
pop
mov
(bad)
call
pop
jne
ficom
mov
mov
inc
jno
in
xchg
mov
lahf
add
clc
xchg
popa
movs
gs
adc
fcomp
or
and
xchg
dec
ror
jmp
in
pop
add
popf
adc
xlat
cld
hlt
retf
bound
pop
or
movs
imul
or
inc
retf
add
adc
push
xor
and
clc
rcl
xchg
push
sti
movs
repnz
(bad)
in
xchg
cmp
loope
(bad)
les
popf
(bad)
leave
sti
sbb
iret
adc
es
adc
shl
sub
sbb
fild
popf
dec
mov
push
adc
xor
xor
call
jecxz
sti
in
ja
aad
mov
mov
mov
pop
mov
cwde
das
add
sbb
push
lock
push
cmps
ins
test
xor
in
and
lea
mov
add
adc
stos
and
sahf
and
push
enter
movs
cmp
cmp
cmps
push
push
sbb
pop
jmp
call
mov
test
adc
in
mov
call
and
push
into
cmc
adc
add
jnp
(bad)
lds
lahf
pop
cmp
repz
xchg
lods
push
call
enter
sbb
sbb
mov
inc
out
out
adc
test
leave
push
(bad)
jo
scas
pop
pusha
and
push
adc
mov
cld
rol
adc
add
in
ins
aad
pop
adc
inc
repz
xor
push
ins
es
adc
sbb
mov
btc
cmp
xchg
adc
mov
imul
gs
hlt
icebp
add
bt
and
push
lahf
dec
adc
adc
xchg
or
(bad)
jg
aaa
jmp
push
push
adc
push
rol
ja
inc
imul
pop
aam
fs
inc
inc
scas
adc
(bad)
mov
jne
mov
ja
aaa
mov
adc
pop
mov
push
sbb
or
imul
and
inc
xchg
pop
mov
or
ret
push
sub
das
test
add
or
pushf
and
in
int
sub
loopne
and
jne
movs
ret
retf
and
adc
xchg
cmp
lods
or
push
inc
or
jg
into
jmp
popa
push
inc
int3
and
jl
and
pop
je
movs
push
sbb
stos
in
adc
xor
jle
pop
inc
rcr
mov
push
movs
enter
and
adc
xor
idiv
popf
xchg
js
jmp
pushf
cld
jmp
clc
stc
iret
jbe
in
je
adc
vmovaps
dec
add
mov
mov
lods
shr
(bad)
xor
je
sbb
mov
or
and
mov
push
js
and
lahf
mov
pop
adc
retf
mov
cmc
push
xchg
std
ror
mov
sub
arpl
ss
sbb
fisttp
xchg
mov
pop
xor
sahf
fst
loop
into
add
cli
aam
std
sub
(bad)
xchg
pop
adc
stos
dec
mov
gs
xchg
mov
cmps
lock
jg
ins
aam
xchg
jmp
rcl
cld
int3
mov
mov
repz
pop
jnp
dec
sub
or
call
mov
push
mov
clc
je
adc
mov
out
mov
in
iret
das
rol
sahf
std
adc
inc
fst
inc
int3
dec
jno
adc
cmc
loopne
dec
mov
jns
mov
push
fbstp
and
mov
scas
rcr
adc
mov
and
push
sbb
je
(bad)
dec
je
jg
inc
sbb
mov
xchg
adc
cld
add
dec
fidivr
pop
aam
mov
push
imul
xchg
out
push
sbb
adc
inc
mov
adc
pop
cwde
ds
pusha
rcl
xor
je
sub
add
and
mov
mov
xor
dec
aad
js
int3
xchg
dec
cmps
cmp
sbb
imul
xchg
mov
xchg
fstp
or
add
repnz
mov
out
mov
pop
cwde
or
push
push
or
hlt
nop
les
popa
cmps
adc
and
sbb
scas
out
cmp
adc
mov
sbb
inc
or
out
(bad)
mov
arpl
loopne
cmp
test
scas
pop
sar
cmps
jae
mov
and
cmc
sub
sub
mov
or
mov
sbb
pushf
pushf
cmp
cmps
ins
mov
loop
cwde
cmps
xchg
(bad)
sti
add
push
cld
dec
std
dec
int3
popa
pop
pop
and
retf
aam
loopne
aaa
add
sbb
fwait
les
push
cdq
cmp
ja
dec
adc
ins
adc
arpl
(bad)
mov
cmp
clc
and
adc
pop
loope
push
cdq
jge
adc
mov
repz
inc
popw
push
movs
inc
jl
mov
jmp
push
sbb
push
add
(bad)
pop
xor
mov
lods
xor
out
mov
cmp
xor
idiv
cmp
rol
cdq
fs
movs
hlt
cdq
out
iret
adc
xchg
scas
push
loope
cmpps
ror
jns
dec
ins
mov
mov
hlt
sbb
test
and
adc
jecxz
(bad)
div
rcr
shl
repnz
xchg
xchg
or
pop
or
pop
sub
dec
sbb
loope
sub
xchg
imul
and
sbb
fdivr
lods
ror
push
or
cmp
hlt
fst
inc
pop
icebp
aam
jmp
je
imul
xchg
or
adc
jmp
mov
iret
and
mov
mov
fisub
push
je
in
pop
adc
pop
jmp
push
push
jno
rcr
inc
clc
pop
mov
adc
stos
add
(bad)
pop
pop
mov
cdq
add
sbb
stos
rol
push
pop
das
push
clc
test
mov
imul
enter
cmp
cmp
cmp
cmps
sub
jmp
setae
arpl
xlat
(bad)
cli
in
je
add
call
jb
popf
ss
xor
adc
cmp
adc
and
push
mov
jnp
lahf
adc
aad
or
mov
addr16
das
cmp
lock
cld
mov
dec
inc
adc
jle
and
pop
scas
fnstcw
out
enter
push
xor
jmp
xchg
loop
add
xchg
xchg
jo
pop
and
sbb
adc
adc
ret
shr
cld
aam
(bad)
cmp
mov
pop
(bad)
adc
fimul
adc
test
jno
cmp
sub
leave
or
dec
push
dec
std
repz
inc
ss
adc
xchg
test
or
jmp
add
call
test
imul
ja
int3
aaa
sbb
hlt
loop
aam
jo
call
jge
sbb
xchg
and
jbe
ret
and
push
inc
pushf
cmp
sub
movs
push
or
add
aas
xchg
(bad)
xchg
sub
fild
int3
sbb
cmps
out
adc
sbb
jns
loop
ins
call
adc
cld
(bad)
seta
or
je
jp
sub
das
push
and
fld
dec
jge
mov
ror
call
sbb
leave
fisttp
add
call
inc
rcr
out
ficom
cwde
fscale
rcl
dec
dec
mov
jae
ds
in
fsubr
jecxz
pushf
xor
aam
or
push
jmp
mov
(bad)
or
stc
ins
aaa
cmp
test
or
sbb
sbb
std
leave
inc
dec
and
scas
fs
dec
add
push
xor
(bad)
je
xchg
inc
test
or
sbb
ins
sar
adc
xchg
jb
push
pop
movs
ror
adc
adc
jmp
adc
pop
dec
outs
lahf
add
aas
out
in
pop
test
or
mov
mov
pushf
in
cmp
cmp
add
cmp
fucomp
in
jl
jmp
adc
cmc
in
(bad)
lods
fistp
or
out
and
lods
jle
(bad)
sub
cmps
add
scas
mov
lahf
clc
sub
(bad)
sbb
cmp
rcl
arpl
mov
adc
scas
inc
xchg
adc
sar
(bad)
in
sbb
icebp
outs
imul
push
movs
hlt
ror
mov
ins
xor
inc
stos
dec
sbb
enter
sub
dec
test
sbb
ins
push
add
pop
cli
add
cmps
cmp
ins
mov
push
sbb
xchg
test
dec
sbb
rol
xor
dec
bound
sub
push
sar
inc
ret
pushf
je
cmp
or
rcr
pop
jnp
sbb
retf
jno
mov
dec
dec
pop
inc
out
mov
je
xlat
push
retf
cmp
dec
test
mov
add
jg
mov
pop
xchg
pop
xor
ss
movs
jmp
int3
dec
push
clc
dec
pop
adc
lock
push
lds
aam
inc
jp
xchg
xor
loop
add
cmc
cmp
inc
mov
cwde
retf
xchg
aam
cli
fistp
pop
and
or
mov
inc
and
xchg
cmc
out
sahf
push
xor
and
jns
cmps
shr
xchg
je
push
daa
fwait
nop
adc
or
rcl
je
call
psubb
adc
jmp
push
push
mov
imul
xchg
adc
retf
fs
sbb
ret
dec
add
xchg
stos
test
mov
xchg
js
loope
sub
adc
pop
(bad)
mov
pusha
pop
mov
out
add
inc
and
and
(bad)
arpl
dec
cmp
jecxz
or
pop
call
push
pusha
and
repz
(bad)
fisub
jle
outs
idiv
push
and
xchg
mov
ja
test
xor
out
fs
ds
out
jmp
test
bound
push
push
pop
or
lea
push
mov
sbb
fdiv
adc
in
adc
adc
mov
popf
(bad)
enter
out
pop
cmp
arpl
xchg
nop
adc
sub
(bad)
aam
cmp
and
adc
fwait
xchg
sub
adc
ret
adc
push
pop
mov
pushf
cmp
mov
xlat
loope
push
fdivr
loop
or
xchg
jl
adc
mov
push
mov
adc
or
aad
sbb
adc
mov
cmps
jmp
sbb
add
(bad)
imul
inc
dec
cmp
cwde
cdq
mov
test
call
pop
cmp
mov
xlat
pop
pusha
jmp
cmp
data16
cmp
mov
push
ja
add
cdq
push
call
(bad)
cmp
sub
outs
ja
adc
inc
hlt
aam
popa
movs
sbb
xchg
int3
mov
and
in
add
outs
push
mov
in
pushf
jno
mov
sub
jns
ficomp
shl
sub
cwde
jle
mov
ror
mov
mov
outs
adc
and
push
push
sahf
rcl
inc
mov
xchg
je
outs
cmp
fldenv
xor
aad
sbb
mov
(bad)
xchg
adc
mov
sub
add
xchg
stos
fisttp
ins
cmp
loope
ss
loop
aam
ins
sub
je
or
cmp
fild
inc
rcr
arpl
imul
aam
call
int
bound
jg
jnp
inc
xchg
adc
adc
jle
xchg
jae
xchg
mov
jnp
xchg
ja
adc
scas
cmps
xchg
add
adc
pop
std
jg
lahf
fcom
cmps
out
inc
pop
retf
adc
cmc
push
jo
sbb
shl
push
add
pop
cmc
into
mov
leave
xor
dec
cmp
pop
xchg
push
xchg
test
jne
dec
rcl
sbb
and
pushf
push
cdq
or
loop
adc
or
mov
(bad)
repz
adc
sbb
(bad)
pushf
jecxz
hlt
xchg
cdq
stos
push
cld
stos
hlt
jns
stos
je
push
ja
das
or
adc
in
retfw
inc
lods
push
int3
xchg
cmp
jmp
inc
mov
popf
adc
dec
push
shl
sub
inc
mov
(bad)
and
mov
and
cmp
dec
rcl
xchg
sbb
ficomp
or
mov
adc
out
les
int3
xor
test
mov
pop
push
jae
je
push
loope
loop
cmp
test
push
push
lods
add
or
clc
push
pop
cs
pop
sbb
out
test
push
je
dec
cmp
cmps
in
adc
mov
in
scas
rcl
test
nop
mov
test
push
xor
test
ins
out
cs
shl
aam
movs
call
int3
push
jge
dec
in
adc
or
icebp
sbb
mov
dec
and
dec
adc
push
test
mul
div
cmps
addr16
sub
in
shl
popf
fwait
add
or
sbb
cld
lock
je
pop
sbb
sub
mulps
and
ss
imul
mov
add
callw
xchg
loopne
sbb
sub
push
mov
sub
jne
inc
vmread
sbb
xor
and
sti
mov
push
sbb
rcl
adc
cmp
stos
or
adc
or
je
adc
push
in
cld
adc
add
and
inc
adc
mov
mov
xchg
in
dec
int
retf
push
fcom
(bad)
mov
inc
out
xchg
xchg
rol
mov
in
push
ss
in
mov
xor
adc
inc
stos
aam
(bad)
ins
jmp
sbb
fisubr
jg
pop
out
imul
enter
sbb
retf
inc
mov
adc
mov
sub
push
adc
add
mov
lock
or
stc
popa
js
les
mov
test
mov
shl
pop
dec
sbb
int
cmps
pop
ins
arpl
mov
mov
stos
(bad)
cmps
sbb
dec
sbb
pop
je
inc
cwde
adc
push
test
push
loop
push
lock
pusha
out
inc
adc
pop
and
pop
pop
bound
xlat
inc
xchg
shl
arpl
pusha
fist
pushf
mov
movs
shl
pop
repnz
mov
sub
or
sbb
pop
push
or
xchg
push
aad
cdq
mov
adc
inc
mov
mov
(bad)
adc
jmp
inc
push
ins
ss
aas
test
mov
call
add
imul
jle
icebp
call
scas
xor
sbb
push
retf
cmc
out
adc
sub
addr16
cmp
cs
and
sbb
stos
mov
aam
or
mov
mov
int3
mov
adc
push
push
mov
cmp
push
vunpcklps
sub
or
iret
push
bound
add
xor
lods
in
or
movs
push
data16
add
xor
jno
inc
js
shl
stos
sub
ins
xchg
fldenv
or
sbb
inc
jae
das
xchg
add
cmp
fidivr
int3
hlt
add
jecxz
mov
jne
push
and
gs
xor
repz
pop
inc
inc
adc
icebp
fxch
or
mov
pusha
js
adc
out
movs
lds
leave
sbb
in
scas
retf
mov
cmps
out
ret
adc
fcom
ss
aam
sub
xchg
fcomp
xchg
icebp
mov
sub
pop
shl
add
mov
xchg
push
scas
adc
mov
iret
pop
and
xchg
hlt
xchg
(bad)
and
pop
stos
adc
mov
cs
xor
sbb
pop
adc
loop
std
aas
push
and
sbb
aad
mov
pop
mov
mov
adc
ror
add
adc
loopne
enter
gs
mov
add
pop
push
out
mov
fcmovbe
retf
repz
cwde
call
in
xchg
fmul
sub
ds
cli
mov
push
mov
cwde
test
push
cs
adc
mov
fsub
cmp
scas
aaa
push
dec
mov
pop
xor
(bad)
je
mov
fidivr
(bad)
je
lea
push
add
ror
push
adc
jmp
sbb
inc
sbb
pop
lods
push
les
inc
fimul
add
adc
aad
pop
mov
mov
cs
and
sub
fld
sbb
stos
(bad)
hlt
not
push
shr
inc
inc
retf
fsubr
adc
jbe
mov
cmp
rcl
mov
adc
inc
rcl
dec
enter
mov
cmp
or
into
cmp
or
cmp
jecxz
or
(bad)
xor
aaa
in
jnp
(bad)
les
popf
jecxz
push
mov
push
sub
pusha
adc
out
xlat
push
adc
call
aam
cli
inc
es
cli
icebp
in
mov
lea
loope
mov
adc
and
jp
pop
adc
inc
dec
push
add
xor
push
xlat
dec
or
dec
fwait
jnp
rol
jp
sub
cmps
(bad)
mov
fld
dec
sub
lock
(bad)
mov
add
or
outs
xchg
mov
in
push
push
enter
adc
ins
sub
sti
jl
in
adc
mov
sub
push
jo
cwde
and
aas
js
jmp
fild
hlt
aam
adc
shl
sar
xchg
ins
adc
popa
call
hlt
jmp
pushf
loop
lahf
adc
cmp
push
in
add
cmc
adc
repnz
mov
mov
fstp
in
and
xor
xlat
push
outs
mov
adc
mov
pusha
cmp
xor
mov
adc
js
jl
loop
dec
call
pop
arpl
imul
into
shr
icebp
adc
xchg
sti
adc
rcl
push
idiv
pop
sti
mov
pop
and
mov
aam
in
bnd
xchg
adc
retf
lods
push
sbb
jo
mov
xchg
pop
out
cdq
outs
outs
xor
in
lods
push
shl
dec
retf
int3
sbb
cli
repz
cld
inc
xor
adc
(bad)
call
pop
or
jne
xchg
cmps
aam
pop
xchg
add
cmps
adc
int3
lahf
(bad)
jb
sbb
cdq
retf
stos
jp
in
lock
and
xchg
pop
mov
es
or
sbb
aad
aad
push
pop
or
cmovge
push
jmp
test
add
call
or
xchg
pop
imul
scas
cmp
int3
xor
xchg
pop
cmp
sub
fisub
fs
adc
aaa
sar
push
aas
mov
rol
inc
jl
(bad)
cmp
and
sub
pop
fdiv
xchg
cmp
mov
or
adc
mov
ds
push
mov
retf
sbb
leave
adc
dec
repz
fild
retf
cmps
adc
jns
rol
dec
pop
inc
out
mov
sbb
adc
cmc
imul
ins
pusha
shl
arpl
pop
icebp
xchg
mov
push
lock
adc
out
rcl
nop
ss
ficom
pop
imul
adc
mov
push
cld
xor
xchg
sbb
into
adc
mov
adc
inc
mov
in
pop
jmp
mov
dec
fstp
add
cmp
(bad)
fidiv
push
xor
das
iret
mov
or
(bad)
loop
jae
fst
fmul
jp
hlt
dec
push
fnstcw
or
in
add
ret
(bad)
or
ja
pop
cmp
test
fsubr
adc
in
aas
adc
adc
jmp
jmpw
pop
adc
fild
xchg
adc
or
cli
push
adc
test
jb
fstp
fdiv
cdq
test
pop
sbb
icebp
jge
push
pop
(bad)
jae
fild
fimul
call
fcmovne
lods
adc
repnz
adc
sub
fadd
adc
dec
xchg
scas
or
xlat
fist
push
jno
aaa
sub
mov
xchg
xchg
(bad)
(bad)
jle
mov
pusha
sub
inc
add
push
aaa
(bad)
repz
jmp
mov
xchg
adc
scas
je
xchg
rcl
sbb
fiadd
das
enter
enter
cwde
xor
dec
pusha
cli
sbb
bound
cmp
cwde
popf
inc
fcmovu
ins
enter
scas
imul
dec
cld
je
call
clc
add
out
call
cld
mov
add
daa
cwde
pop
sub
arpl
add
dec
sahf
push
fstp
mov
inc
fisubr
add
cmp
adc
mov
mov
and
test
fst
mov
test
and
pusha
dec
adc
dec
jns
enter
int3
mov
pop
fadd
or
rcr
int
jp
adc
mov
pusha
sub
adc
add
test
mov
adc
or
es
mov
push
sub
stos
test
mov
dec
xor
(bad)
cmp
dec
mov
adc
shr
mov
rol
fdivr
sti
adc
xor
sbb
mov
mov
mov
hlt
loope
retf
out
imul
(bad)
int
mov
nop
je
out
cmp
cmp
and
push
lahf
adc
pusha
js
mov
push
div
dec
xor
or
das
fimul
mov
sahf
inc
sbb
inc
cli
or
(bad)
pop
test
out
mov
pusha
sbb
adc
push
enter
pop
cld
sbb
and
arpl
adc
fadd
neg
dec
mov
and
or
adc
inc
adc
clc
sti
test
das
push
ret
in
jns
or
jo
push
outs
out
(bad)
mov
xor
jle
leave
cmc
jo
and
jae
imul
pushf
ds
out
mov
ins
adc
push
stc
push
push
and
cmp
mov
(bad)
ds
into
inc
jbe
or
mov
add
xlat
inc
popa
pop
enter
into
test
adc
adc
xor
nop
mov
aaa
pop
retf
adc
ss
jns
sahf
enter
xor
add
cmp
icebp
pop
and
into
in
je
add
int3
xchg
ret
inc
jmp
push
aam
fucomi
xchg
adc
mov
mov
pop
aam
sbb
repnz
loopne
xchg
out
sub
dec
and
adc
sahf
les
adc
lea
data16
call
adc
jge
sbb
adc
lods
xchg
push
retf
push
jno
jns
imul
test
int3
adc
pop
jo
rcl
outs
pop
es
aas
inc
xchg
loope
jmp
in
mov
adc
mov
das
fwait
mov
adc
adc
and
inc
enter
iret
jmp
sub
or
stos
les
loopne
ds
outs
shl
push
aaa
or
mov
out
outs
retf
ds
sar
cmp
imul
rol
mov
test
rcl
fcomp
dec
(bad)
pop
fldcw
or
mov
jns
repnz
push
stc
jne
scas
bound
pop
enter
jmp
or
cmp
mov
cmp
ja
jge
and
xchg
ret
jno
test
ds
imul
(bad)
je
add
es
fist
lock
jbe
adc
pusha
push
add
int
adc
pop
jnp
aad
lahf
sbb
fwait
bnd
ret
inc
sbb
xchg
test
inc
in
sub
leave
jmp
call
in
cmp
push
xchg
pop
test
inc
dec
mov
dec
daa
and
lahf
outs
jmp
push
jg
add
mov
inc
pop
sbb
xchg
pop
or
xchg
scas
lds
pop
inc
(bad)
data16
sti
or
and
sbb
fdivp
movs
inc
repz
sbb
sahf
xor
ficom
retf
in
stc
or
stos
mov
sub
or
adc
and
xlat
mov
cmp
retf
scas
cmp
adc
daa
jmp
jbe
bound
fnstenv
rol
out
popf
or
ins
(bad)
std
push
cmp
mov
add
sbb
adc
(bad)
xchg
mov
fucomip
out
dec
push
dec
adc
jge
ret
adc
paddusw
xlat
movs
mov
inc
and
xor
xor
cmp
mov
js
mov
mov
in
sbb
movs
fadd
fisttp
adc
mov
jle
adc
xlat
mov
stos
sar
retf
adc
xchg
add
loop
mov
cmp
bound
adc
xchg
iret
pop
push
xor
loopne
stc
pop
popa
mov
push
clc
loope
push
jno
xor
pop
mov
jnp
jmp
inc
scas
rcr
fld
cmc
pushf
cmp
adc
int3
and
in
jne
hlt
mov
ret
dec
pop
popf
popf
adc
ins
cwde
add
lds
push
dec
sbb
mov
fwait
ss
pop
jbe
movs
mov
add
int3
cmc
xor
cli
mov
cmp
or
les
cmp
scas
jnp
in
fnstenv
int3
inc
mov
adc
scas
dec
sub
fadd
test
aam
in
leave
xor
loopne
loop
ret
sbb
adc
sti
pusha
jmp
mov
xchg
dec
fnstenv
add
iret
push
fiadd
cdq
xchg
adc
xor
xchg
pop
xor
add
pop
sub
pop
push
mov
out
adc
icebp
cli
xchg
stos
mov
(bad)
mov
outs
mov
aad
retf
ds
sub
xor
add
test
repnz
addr16
mov
jmp
cmp
aad
pop
pop
and
fwait
mov
and
push
push
out
into
push
jp
push
das
inc
xchg
outs
xchg
in
iret
retf
pop
fcomip
rol
(bad)
push
retf
loopne
mov
inc
pop
xchg
stos
xor
je
xchg
in
xchg
or
pop
mov
or
xchg
xchg
xchg
fnstenv
rol
call
push
sbb
sub
mov
shl
sbb
fimul
rcl
cmp
gs
mov
stc
in
xchg
std
mov
shl
test
pop
out
loop
xor
sbb
inc
mov
in
inc
fsubr
inc
push
mov
xchg
dec
dec
dec
adc
xor
popf
out
rcl
jmp
sub
mov
fidivr
icebp
adc
xchg
es
inc
jae
jns
sbb
mov
mov
jo
pop
push
push
addr16
fistp
test
sbb
add
ficom
loop
loop
arpl
xchg
or
pushf
lds
pop
outs
push
in
jae
jb
out
dec
cmp
adc
mov
repnz
rol
and
int
jno
sub
ss
test
pop
int3
sbb
std
sub
cdq
in
inc
test
dec
in
repnz
xor
rcl
xchg
push
mov
mov
mov
les
lds
sub
out
ds
(bad)
call
and
movs
out
xchg
jne
in
nop
cmp
push
add
out
push
mov
not
mov
adc
xchg
xor
pop
in
pusha
les
rol
ret
hlt
inc
or
test
and
and
lock
sub
or
adc
loopne
out
ins
mov
aam
inc
adc
les
addr16
adc
retf
(bad)
loope
fild
shl
ja
jno
ficomp
mov
ins
mov
mov
adc
and
sbb
retf
hlt
adc
fwait
in
ficom
call
dec
xchg
and
adc
rol
mov
dec
jo
bound
adc
(bad)
push
dec
xchg
out
mov
hlt
push
and
lds
push
push
(bad)
push
add
shl
int3
cwde
mov
bound
xchg
(bad)
jmp
xor
and
int3
xor
pop
add
clc
xor
or
int
test
pop
fistp
mov
(bad)
in
mov
push
scas
pop
inc
mov
push
test
inc
aaa
(bad)
bound
popf
movs
xchg
stos
sbb
(bad)
imul
ret
pop
or
(bad)
aad
inc
shr
xchg
test
loop
cs
les
loop
outs
clc
enter
shl
add
clc
ror
xchg
fisttp
pop
repz
and
out
adc
fadd
stos
adc
test
or
xor
into
int
inc
js
jne
movs
add
adc
repnz
retf
and
movs
and
hlt
icebp
sbb
jmp
pop
cli
mov
sahf
adc
(bad)
rol
cld
gs
fnsave
aam
cli
xor
fcom
dec
jl
or
adc
xor
and
popa
les
or
push
dec
xlat
xchg
xor
push
mov
cdq
shl
dec
call
mov
(bad)
sbb
xor
int
je
ficom
test
fdivr
inc
cmp
push
jmp
dec
mov
adc
and
mov
leave
cld
arpl
jecxz
pop
stos
pop
mov
aam
push
inc
mov
sbb
adc
mov
adc
sub
lea
and
loope
in
lods
adc
xchg
push
(bad)
pop
jmp
arpl
(bad)
mov
inc
jns
mov
xlat
lds
aaa
or
shl
and
dec
ss
cdq
jnp
xor
sub
hlt
sahf
test
xchg
in
xlat
movs
jns
loopne
(bad)
pop
push
fs
test
loop
popf
ucomiss
shr
popa
dec
pop
mul
mov
adc
xchg
popf
(bad)
mov
push
sbb
scas
cmp
test
shl
pop
lds
imul
pop
shl
adc
loopne
clc
add
and
adc
pushf
cmp
cmp
in
add
fs
push
adc
call
iret
ja
sub
ret
push
rcr
push
les
inc
mov
adc
bound
xchg
adc
and
adc
scas
arpl
or
mov
add
(bad)
mov
jns
(bad)
cli
ret
xchg
mov
in
push
xchg
jmp
rcl
lock
jecxz
push
cmc
adc
inc
shl
loop
jnp
jmp
add
adc
push
clc
stc
mov
fs
mov
loope
inc
push
sbb
pop
(bad)
jmp
xchg
dec
sub
shl
xor
push
add
and
test
movs
sub
push
shl
stos
xor
sbb
add
pop
pop
adc
xor
push
cmp
fwait
pop
dec
clc
in
dec
fld
cmp
mov
les
or
movs
adc
cdq
and
stos
jmp
push
mov
cli
inc
sahf
jo
push
cs
adc
movs
lds
outs
and
ret
xchg
fldenv
fwait
mov
pusha
cmp
aam
out
mov
mov
adc
ds
aad
repz
cmc
ja
movs
sub
jmp
xchg
push
adc
fiadd
push
into
lock
mov
ds
call
cwde
pop
in
inc
adc
and
add
dec
and
in
adc
mov
loope
loope
dec
pop
adc
xor
sub
aad
mov
lock
pop
inc
enter
mov
pop
imul
mov
mov
mov
aam
inc
sub
loopne
and
mov
sub
mov
arpl
add
arpl
jae
fwait
mov
adc
cmp
add
xchg
sbb
out
loopne
mov
xor
stc
js
iret
push
adc
adc
aam
add
sub
inc
xchg
hlt
xlat
int
push
lds
jg
adc
stc
xor
adc
jmp
es
lods
sub
cdq
adc
lods
shl
adc
push
adc
les
or
in
jno
out
scas
ret
push
xor
ror
or
lods
add
pop
adc
into
das
sub
sbb
mov
aaa
add
and
and
sti
sbb
lahf
mov
(bad)
adc
jmp
or
add
push
xor
jbe
xor
sbb
mov
pop
adc
loop
sbb
and
rcr
nop
xchg
scas
dec
sub
xchg
pop
adc
push
push
(bad)
clc
jns
in
jmp
ins
(bad)
dec
adc
push
or
push
cmp
xor
cmp
arpl
in
sub
fwait
sbb
mov
aam
retf
push
cmp
mov
push
jo
jecxz
or
adc
or
bound
sbb
js
pop
xchg
enter
(bad)
retf
in
adc
gs
les
pop
loopne
sbb
loop
pop
and
ja
mov
pop
or
imul
and
add
jno
or
adc
jecxz
fisttp
outs
mov
cmp
mov
sbb
xchg
or
adc
adc
or
les
hlt
bnd
mov
push
mov
adc
aaa
cmp
cld
sub
and
and
and
mov
push
addr16
mov
pop
adc
cmp
(bad)
xor
imul
add
adc
cdq
jns
push
leave
dec
in
adc
sub
jecxz
adc
mov
aaa
fisub
mov
xchg
call
(bad)
fadd
sbb
pop
mov
loope
sub
mov
mov
repnz
mov
cwde
lea
js
and
jns
adc
and
push
adc
outs
pop
psubusb
inc
adc
mov
push
add
ss
pushf
gs
jge
mov
sub
out
sbb
rol
inc
int3
call
mov
cld
ja
push
test
cmps
adc
test
enter
sbb
loope
daa
mov
push
ins
pop
test
mov
in
push
jne
adc
pop
test
jae
icebp
and
call
xchg
retf
ja
test
test
and
cwde
div
xchg
fld
int3
xor
ss
sub
fmulp
xchg
cmps
xchg
movs
push
pop
hlt
ds
lds
xchg
xor
retf
cli
mov
outs
outs
or
out
push
(bad)
aas
pop
push
sbb
mov
inc
and
sbb
ror
sub
cmps
jmp
jbe
in
mov
mov
adc
xchg
xchg
pop
je
mov
adc
jl
pop
adc
call
inc
test
dec
cmp
loopne
xchg
rcl
out
and
xor
mov
and
pop
lea
loopne
fisub
pop
adc
push
ja
in
(bad)
in
je
push
adc
inc
retf
push
stc
or
sub
push
mov
cmp
fsubr
cli
adc
hlt
inc
push
xchg
out
fstp
clc
dec
(bad)
adc
adc
mov
push
dec
arpl
stc
ror
dec
mov
inc
js
int3
pop
jno
xor
popf
adc
fsub
cmp
enter
pop
ds
mov
cwde
add
mov
xor
pop
call
fabs
add
push
cli
cmp
push
retf
popa
ret
adc
inc
jp
add
adc
inc
dec
pop
cli
pushf
add
push
in
xor
retf
xchg
es
sbb
xor
je
and
or
adc
xchg
std
pop
mov
(bad)
fist
add
mov
cli
push
xchg
out
mov
in
je
xor
push
mov
and
cdq
xor
call
adc
int3
xor
add
fist
pop
cdq
adc
fst
je
sti
xchg
out
lock
mov
ins
sbb
dec
cmc
push
cwde
mov
pop
or
mov
adc
jge
mov
inc
pop
jmp
sub
adc
sar
adc
mov
xchg
enter
push
adc
inc
add
fbld
cmps
or
mov
add
outs
aam
jne
int3
cmps
add
xor
ins
jb
mov
movs
or
arpl
push
xchg
outs
adc
add
mov
sub
pop
xchg
aad
mov
pop
pusha
in
add
je
and
push
adc
popa
mov
dec
xor
jne
aas
xor
add
lahf
jge
mov
add
cmp
pushf
push
ficomp
pop
test
adc
neg
or
popf
sbb
inc
fisubr
inc
popa
ins
(bad)
movs
sbb
inc
mov
rcr
inc
jno
mov
out
lea
(bad)
sti
push
stc
xchg
sbb
xor
aam
retf
or
aam
dec
add
sub
std
jmp
and
imul
gs
dec
cwde
mov
push
dec
sub
ror
mov
add
js
push
jae
in
pop
jne
in
inc
pusha
add
xor
pop
or
sti
adc
adc
add
das
mov
lock
adc
jnp
push
or
inc
xchg
push
cli
loopne
mov
stos
xor
cmp
clc
mov
fstp
adc
push
cmc
cmp
adc
xor
mov
dec
fs
mov
pop
sbb
adc
dec
push
push
test
sbb
jb
xor
aad
loopne
ret
push
cmps
jge
pop
adc
xchg
push
cmp
push
pushf
aas
mov
sbb
and
loop
leave
mov
adc
mov
in
adc
pop
test
sar
mov
stc
inc
push
shr
aam
dec
mov
aad
push
mov
sbb
sbb
lods
stos
sub
mov
cmp
mov
adc
repnz
pop
push
(bad)
and
jle
mov
push
jo
xchg
(bad)
in
mov
lods
sbb
loop
mov
call
pop
cmps
sub
mov
adc
pop
mov
cmp
mov
scas
push
repnz
adc
leave
dec
rol
push
mov
enter
adc
test
in
test
push
aam
sub
ret
fild
(bad)
push
jmp
inc
ror
xchg
dec
fidivr
dec
mov
adc
aad
fcomip
cmp
aaa
in
outs
cmp
out
jmp
sub
(bad)
or
aad
push
cmp
dec
sbb
mov
cmp
xor
dec
je
stc
adc
inc
pop
push
or
dec
push
call
aam
xchg
or
push
jge
xor
sub
call
mov
pop
jb
sbb
not
movs
mov
xchg
inc
shr
cmc
pop
data16
dec
pop
fidivr
xor
sbb
loopne
sahf
mov
fcomp
in
pusha
jmp
cmps
mov
test
mov
adc
int
pop
popf
lock
adc
scas
mov
inc
in
xor
mov
ja
iret
hlt
sub
mov
movs
in
dec
shl
test
sbb
xchg
outs
xchg
adc
fwait
repz
xor
clc
jmp
adc
cld
jbe
jnp
pop
sbb
int3
or
inc
repz
in
adc
or
xchg
dec
and
inc
pop
ror
sbb
adc
jb
sub
push
dec
add
pop
pop
loop
ror
xchg
mov
push
inc
dec
pop
add
inc
aam
mov
and
push
out
sub
xchg
pop
adc
mov
xchg
sbb
xchg
mov
add
mov
je
push
mov
pop
addr16
xchg
pop
popa
cmp
stc
cwde
cmp
lock
adc
adc
(bad)
adc
aaa
sbb
sbb
jle
or
sbb
sbb
je
je
cmp
pop
cmp
adc
pusha
inc
je
xchg
push
sar
dec
adc
(bad)
mov
mov
xor
jne
mov
inc
dec
adc
cs
shl
add
cld
std
adc
push
int3
mov
sbb
push
les
jmp
out
xor
mov
movs
cmp
jne
adc
pop
mov
fldenv
xchg
jmp
fcom
popf
adc
into
cmc
leave
ror
sbb
adc
jmp
cld
sahf
hlt
cmp
sub
mov
icebp
adc
and
push
movs
mov
outs
jecxz
pop
cld
and
add
push
mov
or
and
and
pusha
div
out
pushf
xchg
repz
inc
mov
jl
sbb
lds
(bad)
dec
fldcw
je
adc
mov
fs
enter
sbb
in
std
js
inc
mov
loopne
adc
popf
adc
cmp
xor
jp
jbe
adc
into
push
in
cmps
adc
sub
ficom
xchg
xchg
je
cmp
adc
loopne
add
add
mov
aaa
not
pop
and
retf
add
cdq
loope
daa
popf
rol
xor
jbe
retf
mov
push
add
sbb
add
int3
jl
xchg
mov
mov
xlat
push
aas
sbb
push
and
adc
ins
jecxz
hlt
icebp
pop
test
add
mov
retf
mov
mov
out
mov
inc
test
aam
jmp
add
jmp
out
inc
inc
lods
loop
je
cld
and
mov
mov
or
(bad)
out
mov
jg
sub
in
mov
stos
aaa
pop
add
mov
enter
jmp
pop
sbb
rcl
stos
push
jno
xchg
sub
adc
sahf
ret
inc
adc
(bad)
scas
add
pop
repz
jae
mov
push
adc
xchg
jle
test
jg
(bad)
xchg
nop
adc
inc
in
(bad)
dec
inc
mov
and
imul
add
sbb
pop
mov
in
pop
sbb
sbb
cmp
mov
and
inc
sub
test
mov
in
ficomp
xlat
aam
or
adc
inc
push
movs
js
ins
jg
(bad)
jns
pop
shr
and
cli
xor
pop
mov
test
sbb
js
pop
movs
in
not
call
lock
jbe
sub
aad
pop
xlat
into
xor
adc
and
mov
inc
sbb
or
xchg
sub
inc
adc
mov
xor
shr
pop
in
sub
sar
sub
js
mov
pop
add
push
cmps
aam
and
mov
sbb
xor
xchg
fsub
xchg
dec
pop
xor
dec
std
xor
add
cmp
cs
pushw
sbb
in
es
sbb
and
arpl
adc
push
iret
push
mov
pop
arpl
adc
cmp
add
adc
push
call
pushf
xchg
outs
push
pop
leave
pushf
iret
cmp
mov
sub
test
sbb
cmp
(bad)
cmc
mov
into
lds
loopne
movs
es
imul
fsub
adc
sti
sub
lods
pop
retf
inc
sar
(bad)
and
dec
dec
loop
ret
pop
mov
dec
push
adc
mov
adc
ja
xchg
je
loopne
adc
shl
inc
(bad)
mov
adc
cmp
pop
push
add
imul
repnz
aam
fisttp
push
lods
ss
pop
mov
adc
push
xchg
test
loop
or
mov
pop
es
sub
adc
mov
dec
rcl
pop
xchg
mov
jecxz
aaa
shr
hlt
test
dec
ror
mov
mov
sbb
(bad)
fst
ins
adc
mov
lods
int
movs
ja
ins
shr
cwde
lock
xchg
push
daa
retf
jmp
out
xor
es
and
aad
out
mov
xchg
int3
ins
push
int3
sbb
iret
fcmovu
rcl
mov
scas
icebp
nop
adc
lock
lods
adc
js
test
enter
mov
sbb
adc
jo
pop
add
push
sar
pop
mov
xchg
dec
lahf
add
movs
sub
sbb
sub
adc
fld
mov
adc
jge
hlt
push
cmp
(bad)
xchg
addr16
add
sub
xor
dec
repz
dec
jae
pop
dec
fisttp
cli
pop
cmp
mov
push
retf
mov
call
idiv
mov
and
aam
pop
imul
cmp
xchg
xchg
sbb
xor
cmp
pop
test
jge
adc
lods
test
pop
test
ins
and
shr
xchg
stos
jns
xor
ins
pop
sahf
jle
test
mov
rcl
mov
adc
mov
inc
ins
and
jnp
rcr
push
iret
les
ds
add
je
xchg
imul
add
mov
dec
rol
pusha
cdq
(bad)
outs
adc
or
push
pop
mov
scas
cmp
repz
mov
adc
out
loope
jg
dec
jnp
xchg
jno
jbe
adc
aad
xor
cdq
mov
mov
adc
dec
das
mov
popa
jo
sbb
push
scas
cmp
xchg
xchg
neg
mov
cmps
dec
xor
sbb
push
fs
jge
pop
sahf
push
daa
jb
cmps
xchg
and
popa
fs
adc
and
sti
sub
out
into
dec
ja
mov
aam
popa
cwde
mov
jo
mov
inc
adc
adc
push
pop
pop
hlt
push
dec
xchg
sub
fsub
adc
les
mov
fist
mov
xchg
adc
icebp
jmp
xchg
adc
adc
sbb
and
fisttp
dec
fsubr
bound
clc
adc
and
int3
push
sub
fs
adc
enter
pop
hlt
repnz
xor
pop
jmp
and
adc
repnz
ins
fucomip
pop
popf
cmp
adc
aam
push
(bad)
pop
mov
add
mov
das
data16
cwde
adc
stos
mov
ins
push
into
sbb
add
rcl
in
xor
gs
add
test
(bad)
iret
cdq
mov
hlt
ins
aad
std
sti
test
cmp
leave
jmp
ret
fist
ins
scas
adc
adc
fs
or
lock
mov
inc
jp
in
add
pop
mov
push
test
or
inc
jne
aaa
in
aad
stc
push
adc
adc
dec
aaa
gs
inc
test
(bad)
jae
jge
test
pop
dec
jmp
or
stos
jmp
pop
out
dec
(bad)
sbb
inc
ja
or
popf
stc
pop
add
jmp
lock
inc
hlt
(bad)
sbb
(bad)
fdiv
ja
rcr
push
retf
mov
int3
push
pop
adc
test
or
imul
bts
mov
adc
scas
and
fistp
ret
mov
add
inc
dec
xor
sbb
fwait
retf
test
jne
(bad)
and
(bad)
arpl
jno
loop
(bad)
push
sbb
cmps
jmp
jnp
sbb
fcmovne
scas
pop
mov
xchg
fisttp
movs
xor
lahf
(bad)
sbb
mov
fild
clc
or
iret
push
cld
push
push
test
adc
jae
into
add
in
scas
movs
inc
fdivr
and
hlt
push
stc
jmp
or
inc
pop
xchg
fstp
dec
lods
cmp
and
adc
and
xchg
call
imul
inc
test
or
xchg
in
fild
xor
jle
push
mov
fist
mov
mov
in
pop
jge
in
movntps
aad
mov
(bad)
pushf
dec
add
lods
adc
std
xor
test
or
jg
pop
(bad)
pop
or
stos
lock
sbb
in
scas
or
pop
leave
adc
icebp
xlat
sub
or
lahf
cmp
pop
popf
cmps
and
in
sbb
jno
enter
dec
mov
daa
outs
adc
mov
(bad)
jmp
movs
push
jo
fist
mov
mov
xchg
ins
fsubr
in
(bad)
into
xchg
adc
sbb
test
push
call
pinsrw
push
adc
(bad)
repnz
scas
mov
pop
lahf
pop
xchg
adc
pushf
dec
arpl
loopne
and
mov
loop
(bad)
pop
xchg
adc
mov
jle
(bad)
in
cli
cmp
jl
push
xchg
and
xor
inc
mov
bound
popf
sbb
fistp
imul
in
adc
loopne
outs
gs
int3
or
add
sbb
adc
fs
dec
pop
aas
cmp
lock
sbb
push
adc
aam
xchg
mov
cmps
or
das
sub
pop
adc
pop
xor
repnz
cmp
adc
adc
dec
les
sbb
out
sub
sbb
jl
aas
int3
aad
fist
iret
sbb
(bad)
cwde
ins
cmps
aad
fild
and
jne
fisttp
aam
pusha
fsubrp
cli
adc
mov
or
in
(bad)
aad
fcomi
inc
push
lods
pop
mov
mov
arpl
ins
sbb
dec
popa
adc
jb
xor
iret
call
out
sbb
inc
rol
cdq
adc
stos
iret
ins
pop
jecxz
xor
mov
int3
aad
fist
imul
inc
mov
jmp
sbb
fcomi
inc
lods
loopne
outs
adc
das
clc
or
adc
push
and
fs
pop
adc
cmp
dec
adc
push
(bad)
adc
(bad)
pop
dec
(bad)
jmp
and
repnz
fistp
jg
mov
or
outs
and
add
and
adc
div
lods
cmp
sub
xor
test
lock
xchg
ins
mov
adc
fild
mov
sbb
outs
(bad)
in
pusha
into
dec
adc
mov
adc
adc
out
jo
aad
adc
lods
adc
cmovg
pop
sub
lock
mov
lahf
dec
xchg
adc
pop
push
ins
mov
ror
jl
push
lahf
mov
je
jbe
dec
push
std
out
mov
sbb
lock
push
cmps
dec
adc
fucomp
test
push
loop
adc
imul
dec
lock
and
out
out
xor
sbb
push
push
shr
adc
dec
or
adc
out
xchg
loop
inc
mov
sbb
aaa
ret
add
mov
inc
popf
ss
dec
arpl
xchg
fs
call
pop
xor
sbb
add
and
sar
sub
dec
push
(bad)
leave
inc
or
dec
lods
jmp
and
cmp
mov
cld
jns
loope
mov
cmps
dec
pop
(bad)
push
hlt
sti
mov
pop
out
inc
inc
retf
enter
dec
mov
mov
repz
dec
call
into
xchg
mov
add
jo
pushf
int3
jns
inc
aad
push
icebp
inc
loop
adc
cmp
inc
or
retf
mov
cmp
adc
sbb
cmps
mov
fwait
xor
sub
pop
fisubr
inc
je
push
stc
cld
sahf
adc
retf
jns
adc
xchg
stos
cld
sti
retf
fstp
sbb
sbb
lods
sub
or
xchg
cmp
in
int3
std
jno
ss
retf
dec
cli
bound
mov
inc
das
mov
xchg
shl
inc
bnd
sbb
mov
pop
fmulp
ins
xchg
adc
xor
inc
(bad)
dec
sbb
push
(bad)
or
sub
xor
xchg
je
lds
mov
retf
hlt
cdq
adc
loopne
jle
leave
xchg
sub
in
out
fld
pop
jmp
call
and
mov
xchg
(bad)
mov
enter
xchg
test
es
mov
xchg
adc
xchg
inc
lds
fsub
in
xlat
jbe
hlt
int3
xchg
push
sub
and
imul
mov
shl
add
ficom
xchg
loope
sbb
xchg
lods
xchg
xor
and
xor
in
ficomp
repnz
popa
(bad)
ins
xchg
cld
movs
inc
retf
dec
ins
mov
sbb
cmp
pop
out
or
mov
sub
or
adc
xchg
out
pushf
outs
cmp
sti
fcomp
xchg
int3
xchg
inc
push
or
add
pushf
in
lods
push
cmps
fimul
add
test
mov
push
mov
xor
sub
cmp
mov
loopne
xchg
xchg
movs
push
in
lds
call
push
(bad)
aad
pop
imul
add
arpl
jbe
mov
hlt
cmp
mov
xchg
xchg
scas
xlat
push
push
xchg
ja
push
xchg
dec
cmp
imul
retf
push
in
cmp
jne
mov
or
mov
sub
and
mov
gs
jb
mov
out
fld
adc
icebp
or
stos
gs
push
push
pop
setae
and
and
mov
push
mov
push
repz
push
cmps
int3
into
adc
ins
call
push
sbb
push
xchg
in
mov
push
xor
cdq
sar
and
pop
xchg
xchg
push
xchg
add
xor
sbb
(bad)
in
test
lods
loopne
lods
xchg
inc
aad
mov
popf
push
jmp
adc
xchg
dec
or
mov
pushf
add
movs
loop
cmp
xchg
xor
adc
mov
hlt
std
dec
(bad)
cmp
and
mov
imul
out
inc
or
inc
xchg
and
mov
int
lds
hlt
mov
gs
push
cdq
xor
fdiv
ds
cmp
mov
push
shl
call
xchg
push
push
jnp
push
gs
sbb
stc
shl
dec
jge
mov
hlt
ds
pop
or
cwde
fwait
cld
dec
sbb
xchg
adc
mov
leave
adc
jl
clc
xor
fimul
add
cwde
sub
xchg
popf
pop
into
adc
fnstsw
iret
pusha
jns
cmp
add
push
mov
jmp
repz
xor
aam
popa
adc
push
fisttp
add
pop
cmc
(bad)
retf
xlat
popa
adc
imul
pop
test
cdq
call
hlt
rcl
jae
icebp
push
int3
jbe
movs
rcr
inc
imul
dec
sbb
ficom
and
cld
xchg
adc
push
clc
xchg
cmp
(bad)
mov
mov
jbe
sbb
or
xchg
push
pushf
adc
sar
adc
or
inc
repnz
pop
dec
pop
push
(bad)
cmp
adc
fstp
push
pop
repnz
adc
sub
adc
stc
mov
scas
adc
add
add
sub
outs
push
xchg
mov
not
pop
push
fdivr
stos
(bad)
xchg
adc
fisubr
adc
mov
daa
fild
mov
fdivr
mov
inc
repnz
mov
push
jle
jge
jns
adc
mov
mov
push
mov
mov
cwde
(bad)
gs
aam
call
sar
jp
push
std
push
inc
inc
dec
leave
push
cmp
sub
mov
arpl
adc
xchg
outs
sub
sub
xchg
dec
in
addr16
add
xchg
les
or
sbb
imul
jbe
sub
das
xchg
ins
inc
pop
movs
xor
jns
jl
adc
test
retf
add
stos
or
(bad)
sbb
dec
pop
xchg
jne
xchg
push
lods
test
xor
hlt
cwde
les
out
(bad)
pusha
xchg
dec
mov
aas
jmp
sub
lea
mov
xchg
adc
pop
push
test
int
push
xor
add
inc
pop
clc
lods
adc
test
or
adc
adc
inc
sbb
adc
pop
fisttp
cmp
div
push
push
lahf
(bad)
mov
daa
sahf
adc
bsf
xor
adc
pop
in
sti
push
adc
or
xchg
push
push
xlat
pop
je
das
adc
inc
fwait
(bad)
int
push
adc
repnz
cld
xchg
jns
push
scas
ror
test
adc
or
loop
popf
les
jecxz
push
ins
repz
sbb
mov
adc
adc
pop
adc
movs
adc
push
sbb
pop
adc
push
out
dec
ret
mov
jmp
jmp
or
pop
inc
sub
sub
retf
jmp
xor
out
out
mov
jnp
pop
(bad)
fbld
iret
dec
call
(bad)
aam
movs
push
push
inc
in
repz
mov
inc
xlat
fistp
pop
in
jp
xor
mov
call
and
fadd
adc
cs
fdivr
sbb
push
pop
fwait
adc
out
mov
cmps
mov
adc
call
adc
fwait
and
sti
inc
cmp
adc
mov
cmp
mov
and
hlt
dec
adc
in
pop
cmps
(bad)
enter
cmp
test
iret
push
jns
adc
xlat
shr
and
cmp
hlt
xchg
popf
push
les
loope
push
sahf
in
and
xor
push
sbb
cmp
arpl
jnp
push
repz
mov
sbb
jge
js
mov
xchg
fstp
push
sub
enter
mov
adc
xchg
pop
add
ret
dec
ss
mov
in
fstp
xchg
push
fdivrp
push
lods
sbb
adc
add
(bad)
mov
inc
adc
cmp
in
dec
sbb
jo
add
mov
mov
inc
cs
std
ret
xor
popf
jg
xchg
mov
push
bound
cmp
mov
or
dec
leave
sbb
pop
push
not
mov
imul
in
push
inc
lds
adc
lock
movs
stos
jl
pushf
inc
pop
push
xchg
pop
dec
push
cmc
mov
ds
and
push
retf
in
push
(bad)
mov
outs
push
mov
add
pusha
pop
adc
sbb
adc
dec
inc
xchg
(bad)
leave
dec
and
je
dec
and
or
cdq
frstor
scas
fs
push
popf
and
mov
mov
push
addr16
adc
aam
fisttp
mov
adc
lock
mov
neg
adc
fstp
in
inc
addr16
push
and
ins
adc
int
jns
xor
mov
pushf
in
sbb
fldenv
inc
ins
xor
pop
bound
or
inc
(bad)
jmp
jbe
adc
(bad)
pop
pop
add
jge
adc
sub
les
in
test
movs
retf
sbb
mov
inc
sub
cmc
aas
aam
mov
pop
add
adc
and
fmul
dec
mov
xchg
pop
dec
rcl
pop
jnp
jmp
outs
jbe
or
ret
adc
mov
(bad)
push
out
outs
adc
in
cmp
stos
adc
xchg
and
aas
mov
push
imul
mov
add
not
(bad)
aad
test
mov
pop
dec
xor
outs
push
adc
push
mov
pushf
adc
dec
push
scas
mov
dec
sbb
or
adc
and
outs
lock
inc
adc
sbb
push
sub
push
clc
sbb
adc
pop
xlat
loop
push
scas
adc
inc
dec
sbb
(bad)
fld
int
push
jl
pop
dec
ss
mov
in
push
xchg
dec
loope
std
push
adc
jmp
pop
xlat
or
sbb
lods
push
adc
aaa
ffree
xor
jb
sbb
mov
hlt
stos
leave
ficom
pop
xchg
and
aam
out
aaa
add
nop
mov
push
stc
lock
xchg
lahf
dec
push
xchg
mov
cld
movs
aaa
sub
imul
(bad)
adc
xchg
push
in
push
xchg
mov
jne
and
sbb
lea
cmc
fdivr
fiadd
cli
cmp
aaa
popf
or
xor
fist
in
int3
jno
or
and
adc
int
mov
adc
jmp
add
out
in
aaa
inc
nop
cwde
mov
mov
shl
imul
mov
ds
getsec
mov
inc
pop
jo
mov
adc
cmps
cmp
jle
add
test
mov
pop
inc
mov
mov
adc
es
cld
xor
dec
adc
mov
adc
sub
adc
mov
mul
dec
push
pop
mov
addr16
adc
mov
xchg
les
xchg
pushf
cmp
out
mov
cmps
cli
daa
sbb
dec
and
dec
in
xchg
(bad)
in
xchg
mov
and
sti
adc
mov
push
fbld
add
inc
int
sub
xor
push
pop
jl
rcl
and
(bad)
fisubr
push
jne
jns
loop
xchg
fist
je
and
xor
in
jmp
call
sbb
jnp
pop
ins
das
jp
jb
std
dec
adc
fisubr
pop
inc
xor
test
push
push
add
cmp
adc
sub
and
mov
ins
retf
movs
adc
fild
xor
std
shr
adc
enter
push
call
mov
stc
hlt
jle
bound
xor
push
mov
jae
outs
mov
inc
(bad)
xchg
ret
into
enter
in
lods
out
rcr
fst
int3
push
out
ret
mov
in
jg
stos
out
out
push
into
nop
aad
sbb
sti
push
adc
sbb
cld
jmp
loop
pop
jmp
and
mul
add
push
xchg
popa
clc
xchg
jb
not
fwait
aad
(bad)
adc
jne
xchg
pop
pop
retf
dec
mov
adc
ins
and
or
fmul
mov
inc
loopne
pop
jne
in
retf
adc
movs
xchg
inc
and
inc
dec
xor
cmp
xchg
mov
dec
push
adc
cli
jg
rcr
sbb
add
jmp
add
sbb
not
adc
cdq
(bad)
addr16
je
mov
int3
fisub
ret
cdq
mov
push
rcl
lods
retf
xchg
nop
xchg
imul
push
(bad)
fmul
dec
jecxz
cmp
jo
inc
mov
sub
adc
xchg
ror
push
xor
push
cmp
ja
aam
jb
dec
adc
daa
jno
jmp
or
jmp
movs
fdivr
jle
add
push
shr
xchg
push
cdq
mov
adc
pop
inc
mov
jecxz
mov
fcmovne
fmulp
sbb
shl
sub
je
pop
xchg
(bad)
adc
loope
fstp
jns
ss
adc
add
inc
sub
repnz
sbb
xor
adc
(bad)
sbb
inc
mov
adc
mov
test
xchg
adc
sahf
and
jno
mov
xor
inc
mov
sbb
and
aas
cwde
fnclex
inc
sahf
lock
retf
mov
dec
jp
fild
adc
mov
outs
je
retf
repz
ror
sbb
popa
int
(bad)
dec
je
inc
adc
mov
in
test
cmp
xchg
jmp
cmp
xor
mov
je
aam
test
pop
stos
adc
sub
jb
sbb
unpcklps
push
movs
adc
out
loop
pop
dec
xor
push
int
sbb
test
shl
adc
sub
sar
sbb
sbb
imul
inc
fsub
add
popf
(bad)
dec
push
ins
cmp
mov
clc
dec
pop
arpl
call
jmp
movs
sub
adc
mov
js
(bad)
jnp
mov
add
push
push
sbb
sub
or
in
loope
adc
pop
int
mov
cmp
mov
arpl
push
xor
pop
test
mov
pop
push
cdq
xor
mov
(bad)
daa
xchg
adc
dec
sbb
xchg
cmp
std
push
and
adc
xlat
rcl
pushf
movs
mov
stc
sbb
leave
mov
or
clc
or
pop
adc
cmp
enter
mov
dec
cmc
sbb
pop
js
dec
xchg
(bad)
mov
adc
add
adc
rol
vandps
push
call
dec
lahf
leave
int3
xor
mov
mov
and
pop
js
push
int
jmp
inc
or
test
xchg
cmp
adc
push
adc
mov
pop
or
in
clc
mov
icebp
mov
cmp
sahf
mov
adc
(bad)
jne
lods
pop
xlat
loope
jns
fild
jg
mov
sub
dec
cli
xchg
sbb
je
in
xor
jno
mov
lods
or
int3
aas
ret
inc
pusha
fcom
fcomp
test
push
inc
psubsw
sub
(bad)
(bad)
dec
mov
aam
nop
xchg
fsubr
call
sub
clc
pop
push
in
adc
pop
mov
jo
data16
adc
lds
call
jmp
aad
mov
cmp
sbb
stos
arpl
adc
inc
push
push
mov
(bad)
and
ficom
aaa
sub
adc
cmp
aam
rcr
jnp
adc
cli
pop
mov
hlt
or
xchg
ins
sub
add
mov
adc
mov
shl
fisub
ds
push
pushf
xor
stos
jne
pop
sbb
or
inc
test
fsubr
cmps
xchg
pop
in
mov
sub
inc
adc
adc
sbb
cwde
mov
jno
daa
les
jle
ficom
popf
xor
test
dec
jmp
inc
jmp
out
cmp
mov
mov
test
in
adc
ja
arpl
xor
cmps
cmp
jp
out
adc
je
cmp
adc
inc
movs
aam
cwde
loop
adc
daa
sar
call
push
inc
outs
int3
mov
cmp
xor
inc
imul
mov
in
xor
pusha
jae
adc
cmp
bound
pop
and
ins
push
or
call
mov
sbb
fisub
shl
cmp
enter
xor
fs
adc
mov
lods
jns
xor
add
push
sbb
or
mov
sbb
sbb
dec
cmp
lock
es
xchg
add
sub
push
(bad)
push
into
stos
and
add
jecxz
cdq
jno
add
gs
enter
xchg
ja
fwait
ss
lea
push
cmp
mov
imul
push
les
mov
pop
fild
mov
adc
jno
inc
inc
arpl
adc
lock
xchg
jp
add
daa
push
mov
sbb
in
scas
cmps
ins
outs
repz
jae
fisubr
xor
lds
repz
and
pop
jecxz
adc
cmp
scas
ret
inc
fcom
fst
in
inc
enter
adc
stos
call
xor
inc
sub
lds
addr16
xor
sub
call
iret
fdivr
les
ror
adc
adc
pop
hlt
adc
shl
sbb
mov
xchg
adc
dec
push
add
movs
(bad)
adc
cmp
inc
ja
aas
je
ins
iret
jnp
(bad)
clc
aad
pop
pop
call
push
mov
(bad)
cmp
and
int3
jae
and
dec
cld
outs
xor
lahf
lahf
mov
lds
adc
dec
retf
ds
sub
es
jno
add
jae
aaa
loopne
hlt
(bad)
jmp
or
jne
mov
jbe
imul
cmp
mov
inc
hlt
jae
mov
push
shr
sbb
popa
lods
pop
pop
cwde
movs
aam
retf
fwait
out
sbb
sbb
xchg
(bad)
push
adc
dec
ss
jne
shl
retf
or
int3
test
pop
push
js
addr16
inc
or
xchg
mov
adc
fs
mov
adc
popa
add
xchg
adc
cld
stos
dec
test
das
push
adc
push
js
mov
inc
or
fstp
pop
cmp
in
cmp
xor
lea
adc
ret
dec
fimul
push
nop
fs
sti
xchg
mov
es
cmp
mov
cli
and
pop
push
cli
iret
push
jne
rcl
mov
loope
xor
dec
(bad)
mov
dec
test
mov
add
sub
pop
int
scas
dec
add
sbb
adc
mov
inc
adc
lea
shl
addr16
pusha
arpl
push
in
and
sub
mov
jnp
mov
dec
xchg
pop
sub
sbb
shl
xor
jo
dec
add
jg
rol
(bad)
jle
mov
pop
pop
test
ss
mov
mov
loop
mov
xchg
aaa
rcl
adc
jmp
push
pop
in
adc
pop
std
and
(bad)
test
push
data16
shl
arpl
jnp
jb
in
jle
out
adc
push
push
lods
stos
xchg
outs
dec
pop
mov
adc
mov
mov
stos
fbstp
push
add
in
or
movs
sub
adc
jbe
repnz
arpl
out
adc
aam
add
and
mov
mov
sbb
sbb
dec
or
jge
adc
inc
in
repz
add
xor
fstp
fist
out
mov
ret
inc
arpl
sub
popf
sbb
es
cmp
(bad)
sub
retf
or
jb
sub
movs
cmp
xchg
xchg
out
adc
mov
or
and
rcl
sub
xor
retf
and
(bad)
in
test
sub
leave
inc
jae
pop
mov
inc
pop
jmp
dec
pop
out
enter
popa
sbb
cmc
jp
xlat
jns
sub
aaa
push
xchg
test
pop
mov
repnz
mov
fcomp
xchg
mov
add
movs
out
ficomp
sub
and
popf
push
imul
and
and
xchg
scas
jmp
or
(bad)
mov
in
xchg
(bad)
mov
adc
jp
cmps
sub
mov
adc
mov
push
mov
fisubr
mov
fwait
xchg
mov
dec
je
fsubr
lds
xor
test
in
in
mov
or
not
aam
xchg
rcl
inc
or
mov
adc
aam
div
xor
sbb
rol
outs
fst
jecxz
(bad)
sar
push
xchg
out
pop
and
cld
fadd
scas
push
jmp
sub
rcr
iret
lds
adc
jmp
ins
arpl
dec
js
mov
pop
pop
and
cs
adc
sub
int3
adc
mov
adc
lea
or
inc
adc
in
ret
or
push
sub
pop
pop
dec
adc
pop
cwde
test
jo
sbb
push
cwde
jbe
push
in
aaa
int3
inc
cmp
inc
popa
inc
pop
fadd
retf
stc
and
pop
repnz
(bad)
push
cmc
mov
pop
xchg
ret
xor
pop
mov
aam
jb
cmc
xchg
ud1
and
inc
je
gs
fbld
nop
adc
adc
int
aam
lds
lods
pushf
lods
push
loopne
in
sbb
les
retf
adc
cdq
pop
cmp
jns
cmps
fst
mov
adc
int3
push
mov
sbb
sbb
inc
std
mov
mov
mov
adc
pop
popf
dec
fiadd
dec
and
push
inc
in
sub
stos
fwait
aam
or
dec
inc
pushf
and
xchg
mov
add
aam
ins
jnp
in
(bad)
adc
pop
xchg
enter
mov
inc
xor
test
test
sbb
bound
retf
pop
je
mov
pop
pop
cwde
jp
into
adc
adc
or
fs
in
loopne
bswap
out
xlat
sbb
xchg
jmp
loopne
adc
enter
aas
sbb
pop
cdq
gs
dec
sbb
icebp
inc
loope
enter
and
call
sub
ret
lods
xchg
push
adc
push
loop
ror
retf
test
ret
jne
mov
rol
ss
mov
and
jp
jecxz
add
mov
je
test
daa
xor
dec
push
test
push
shl
ror
popa
imul
adc
inc
cld
adc
or
out
aam
xor
mov
and
adc
imul
lock
pop
mov
cmp
pop
and
outs
add
imul
cwde
jbe
or
adc
mov
movs
aam
and
mov
and
dec
fsub
stos
xor
mov
inc
adc
dec
addr16
cmp
popf
test
dec
lods
pop
adc
add
dec
jae
out
sbb
jmp
es
mov
inc
mov
out
ror
jge
int
aam
push
loop
shl
ror
loop
adc
inc
mov
aam
and
pushf
pusha
(bad)
adc
push
out
sbb
leave
adc
push
outs
jne
shl
add
movs
cs
aam
sahf
iret
vmovupd
inc
add
pushf
xor
imul
test
aam
and
sbb
xchg
xchg
dec
inc
test
xor
add
mov
imul
shl
mov
push
out
mov
cwde
mov
push
(bad)
mov
dec
call
ret
rcl
ror
sbb
pop
add
jl
and
icebp
adc
inc
pop
repz
cmc
das
and
mov
mov
aad
xor
fwait
cwde
or
sbb
xchg
aam
retf
arpl
adc
lahf
jge
adc
imul
ret
add
inc
push
xchg
add
in
adc
popa
push
cmp
adc
xchg
push
outs
into
out
jb
adc
xchg
adc
adc
pop
jg
dec
call
ds
xor
inc
mov
paddsw
stc
xor
mov
adc
jge
cmp
in
cmps
repnz
and
xor
(bad)
(bad)
jmp
jmp
cli
xchg
lods
xchg
pop
cmc
dec
es
mov
adc
adc
or
aam
(bad)
lahf
adc
in
fst
(bad)
aaa
test
lahf
call
mov
push
mov
ins
cwde
div
cli
into
in
pop
aam
movs
xlat
test
stos
fld
mov
fwait
out
adc
(bad)
push
lds
stc
mov
frstor
xor
ss
xchg
das
adc
inc
or
pop
movs
call
add
imul
into
push
cmps
outs
adc
inc
in
cmp
mov
mov
push
adc
cmps
cdq
dec
imul
xor
xchg
in
in
sbb
clc
inc
push
adc
loopne
cmc
inc
arpl
sbb
sub
push
adc
dec
sbb
repnz
cmp
(bad)
adc
xor
adc
es
outs
sub
jg
add
mov
mov
push
lods
and
cmp
xchg
(bad)
fcom
aam
push
cdq
lds
push
adc
xchg
scas
in
sub
aad
adc
xchg
leave
jae
or
jle
pop
in
ss
xchg
sbb
xchg
add
pop
mov
adc
mov
imul
adc
xchg
fld
bound
(bad)
in
fist
dec
adc
jno
aam
rcl
adc
mov
js
xchg
in
sti
lahf
push
adc
cwde
pop
adc
stos
adc
mov
cdq
sub
ins
ds
push
int
sbb
mov
lods
cmp
push
add
aam
pop
lea
adc
ja
or
int
sub
push
div
lods
adc
xchg
test
outs
push
sub
jne
jbe
jmp
out
add
fsubr
push
adc
int3
push
in
mov
pop
and
or
pop
adc
retf
loop
cmps
(bad)
pop
adc
jecxz
dec
adc
xor
mov
cmc
shl
psubusw
ret
pop
or
xor
cmp
ror
adc
fsub
inc
xchg
(bad)
cmp
push
jno
mov
add
out
test
push
test
xchg
adc
xchg
dec
dec
mov
or
icebp
mov
jp
jg
adc
dec
movs
pop
or
sbb
xchg
sub
xlat
sbb
ins
dec
imul
adc
out
inc
(bad)
lea
adc
cdq
aaa
jo
adc
or
les
ss
mov
or
mov
sar
and
push
sahf
lahf
gs
not
daa
dec
and
iret
and
lods
pushf
fwait
jb
adc
or
jne
xor
adc
inc
cli
mov
xor
cmp
ja
sbb
imul
jne
aas
pop
int
xor
adc
fwait
mov
xchg
(bad)
jge
ret
push
lods
ss
ret
adc
aaa
pop
mov
and
adc
xor
xchg
xor
js
adc
loope
mov
add
ds
jne
adc
stos
pop
pop
cdq
add
mov
std
push
mov
ins
adc
ins
(bad)
int
xor
dec
adc
pop
cmp
fsubr
adc
jo
push
or
shr
inc
and
or
or
lock
popf
cmps
in
inc
loopne
pop
xchg
movs
sub
in
pop
les
cmc
inc
adc
jmp
shl
stos
gs
loope
or
push
mov
mov
mov
adc
pushf
sub
and
(bad)
xchg
popf
daa
adc
sbb
loopne
push
cdq
jbe
push
not
jae
cdq
cmp
adc
pop
xchg
dec
cmp
cmps
jnp
cmp
jge
and
pop
js
sub
jbe
xor
cmc
mov
dec
mov
jns
mov
push
xor
int3
adc
(bad)
repz
add
dec
jg
sub
cdq
out
xchg
add
push
sub
or
jmp
push
jb
and
imul
repnz
jle
sbb
fldcw
or
aam
mov
ins
ins
mov
(bad)
pop
in
or
add
adc
ud1
xor
(bad)
push
pop
(bad)
shr
add
scas
leave
adc
push
fdiv
mov
sub
cld
xor
jg
xor
mov
pop
push
not
adc
rcr
stc
in
(bad)
(bad)
ds
dec
jne
adc
ret
pop
mov
jmp
das
push
pop
adc
push
xchg
mov
xchg
xchg
lods
push
adc
or
sti
sub
add
push
bnd
(bad)
mov
push
sbb
adc
jle
xchg
add
dec
push
es
into
sbb
or
neg
jle
out
rcr
xor
adc
inc
outs
pop
(bad)
and
into
cmp
and
adc
sbb
stos
hlt
sbb
inc
mov
fld
push
int3
adc
lods
cmp
sbb
ins
pop
mov
int
adc
mov
bound
pop
add
sbb
retf
push
out
or
xchg
adc
dec
in
xchg
or
inc
adc
adc
je
cmp
push
sbb
call
adc
add
dec
jmp
cmp
sbb
xlat
sub
or
cmp
gs
jle
out
cmp
push
dec
and
inc
adc
mov
xchg
(bad)
in
xor
and
aad
adc
inc
cmp
(bad)
cmp
adc
movs
push
adc
movnti
mov
mov
popa
mov
or
jae
scas
stc
nop
mov
add
hlt
mov
jg
(bad)
adc
popf
mov
(bad)
mov
lahf
adc
jmp
imul
adc
cmp
(bad)
test
loopne
imul
mov
sbb
mov
push
sbb
mov
pop
icebp
xlat
dec
aam
add
ret
popa
ss
jmp
adc
sbb
test
outs
out
push
adc
call
sub
pusha
fldenv
inc
push
mov
jl
das
or
sbb
loopne
push
xchg
pop
popf
pushf
inc
(bad)
fbstp
pusha
sbb
retf
jno
adc
pop
mov
push
(bad)
test
jae
adc
popa
push
add
or
inc
nop
mov
push
mov
sub
sbb
fwait
daa
and
and
add
fsub
push
lods
popa
div
data16
std
adc
sub
and
test
nop
pusha
iret
lock
xchg
and
mov
popa
shl
scas
push
jmp
inc
lahf
int3
adc
pop
les
adc
pop
test
ins
push
cmp
mov
mov
adc
jnp
jne
jecxz
ins
push
sbb
and
or
call
mov
push
adc
push
cmp
jo
pcmpgtd
or
mov
add
adc
(bad)
jnp
or
bound
cs
pop
and
add
fisttp
inc
and
adc
pop
xor
test
jb
mov
push
cli
adc
jmp
repnz
or
adc
lock
(bad)
jns
cmp
xchg
sub
sub
cmp
cdq
adc
in
pop
mov
arpl
sub
sbb
pushf
ja
sti
adc
add
xchg
xor
push
xchg
dec
lods
adc
adc
repnz
in
dec
test
mov
ds
xchg
jno
icebp
adc
call
adc
xor
push
cmp
pop
adc
mov
enter
adc
and
mov
fistp
imul
add
pop
adc
and
inc
mov
rcr
push
in
push
cmp
sbb
movsx
or
sub
dec
aam
pop
push
loop
xchg
sbb
or
in
mov
pop
and
or
jp
stc
cli
jno
mov
out
sub
adc
add
lods
mov
jge
fst
dec
or
adc
and
mov
pop
daa
push
cwde
in
iret
xor
adc
dec
jmp
popa
popf
and
mov
xchg
and
add
jbe
cli
in
or
adc
or
mov
in
inc
pop
sahf
lds
adc
inc
in
out
sbb
xchg
rcl
pop
adc
and
cmp
shl
adc
shl
sbb
or
xchg
dec
adc
test
div
cmc
fwait
mov
adc
iret
mov
std
inc
jle
adc
pop
and
adc
gs
lds
sbb
cld
pop
adc
inc
mul
mov
mov
push
ds
adc
mov
xchg
pop
adc
in
loopne
je
(bad)
(bad)
push
sub
xchg
inc
in
jmp
xchg
adc
out
adc
or
adc
sbb
push
mov
ret
adc
not
in
adc
inc
jp
psraw
dec
adc
repnz
int3
adc
add
je
or
or
ins
mov
adc
adc
mov
adc
sti
xor
mov
scas
fild
mov
xlat
lods
sub
(bad)
sub
adc
popf
cmp
jmp
cmps
mov
push
mov
and
dec
xor
jg
push
jle
test
inc
ins
jnp
loopne
mov
xor
xor
adc
cmp
cmps
mov
faddp
fisubr
lea
push
test
stc
int
hlt
add
ins
cmps
repnz
jo
int3
(bad)
mov
push
adc
(bad)
adc
adc
sub
add
mov
ds
pop
int
pop
adc
xchg
mov
adc
cmp
jmp
jbe
adc
jb
(bad)
xor
inc
fucom
pop
xor
adc
mov
mov
adc
push
sub
out
clc
es
adc
gs
push
xor
leave
ss
and
mov
push
xchg
int3
mov
cmp
add
dec
dec
repz
push
vpmacsdql
push
adc
sbb
cwde
inc
fidiv
jne
cld
repnz
ja
call
mov
(bad)
hlt
shl
adc
cmp
in
sbb
iret
xchg
imul
and
sub
gs
loopne
ss
add
cmp
jb
mov
xchg
xor
adc
xchg
push
stos
mov
xchg
lahf
and
jmp
push
(bad)
rcl
pop
out
fist
(bad)
outs
ins
lea
adc
xor
adc
icebp
and
sbb
cmp
test
sub
aad
int
fsub
jne
scas
imul
adc
push
adc
loopne
imul
mov
sbb
inc
cmp
loop
je
fwait
and
push
mov
xor
(bad)
in
mov
into
pop
mov
adc
mov
dec
les
pop
xchg
push
adc
mov
daa
xchg
mov
and
int3
fwait
xchg
call
ins
retf
xchg
in
enter
mov
sar
inc
sahf
outs
hlt
stc
(bad)
popf
xor
je
test
ja
and
movs
imul
dec
mov
adc
mov
ror
adc
or
pop
cmc
pop
cmp
adc
cvtps2pi
dec
scas
xor
mov
push
pop
push
push
cld
xchg
xor
adc
adc
out
pop
(bad)
imul
sbb
repz
push
mov
rcl
les
sbb
nop
ins
out
enter
into
jg
and
mov
mov
mov
xor
adc
jl
push
mov
sbb
out
cmp
fs
push
leave
pop
fsubr
ja
sub
dec
dec
test
jmp
mov
pop
ret
push
(bad)
aam
mov
fwait
adc
push
adc
cmps
push
imul
sub
adc
into
xchg
push
sbb
popa
mov
imul
ins
mov
sub
cmp
adc
mov
outs
pop
jo
(bad)
cmp
adc
in
popw
or
ins
cmps
mov
adc
jp
leave
imul
fmul
stc
or
hlt
fist
std
mov
mov
nop
xchg
out
(bad)
fsub
push
or
adc
mov
cmp
or
js
pop
mov
sahf
sbb
and
adc
cmps
shl
adc
ret
xchg
(bad)
hlt
lea
movs
jp
sbb
cwde
cmps
fidivr
inc
or
shl
enter
xchg
mov
nop
sub
adc
pop
jl
cdq
mov
jns
sbb
out
push
xor
or
push
scas
sbb
adc
daa
lods
jmp
mov
jb
adc
ror
sbb
pushf
add
aam
dec
fld
shl
add
cmps
(bad)
scas
scas
aam
es
cmp
fs
inc
arpl
xor
sbb
les
in
adc
cmp
mov
push
push
push
lods
adc
inc
scas
sahf
xor
or
mov
sub
retf
aaa
movs
sbb
ins
in
jmp
les
out
sbb
arpl
test
adc
lods
xlat
jg
inc
std
adc
sbb
fisub
pop
mov
adc
push
inc
fs
shl
and
cmp
fwait
push
(bad)
cld
or
mov
fcom
fmulp
js
cmp
inc
out
sub
popa
sbb
add
movs
push
mov
and
xor
adc
pop
or
das
loope
adc
or
adc
call
or
ret
mov
js
xchg
out
(bad)
sbb
sub
push
adc
gs
movs
addr16
pop
adc
mov
mov
in
adc
pop
popa
push
fs
and
aas
jp
cmps
pop
mov
sbb
ret
int
inc
sbb
in
je
in
pop
out
mov
test
fsubr
pop
or
adc
imul
lods
xor
mov
mov
pushf
and
jne
and
cdq
sub
cmc
xchg
or
fs
adc
call
imul
adc
add
xchg
add
sbb
adc
scas
or
outs
pop
adc
xor
sbb
push
add
push
retf
(bad)
in
and
mov
jge
jae
and
sahf
adc
or
adc
xchg
or
and
shl
aam
mov
mov
hlt
sbb
pushf
mov
mov
push
push
nop
je
mov
cmp
inc
adc
push
pop
cmps
outs
push
fwait
push
cmc
mov
leave
pop
cli
(bad)
adc
(bad)
adc
mov
(bad)
sbb
xchg
ret
cld
inc
cmp
adc
xchg
pushf
adc
lock
cdq
in
cld
adc
es
retf
ficom
repnz
int
repz
jne
or
sahf
and
in
rcl
push
push
mov
pop
xchg
imul
clc
ds
adc
ins
pushf
jl
and
mov
mov
lds
mov
in
add
sbb
hlt
adc
pop
xchg
mov
call
dec
adc
or
nop
dec
in
pop
cmp
cs
xor
test
ror
das
les
pop
pop
or
push
outs
ins
sbb
idiv
push
mov
(bad)
outs
repz
(bad)
cmc
movs
fsubr
adc
pop
(bad)
mov
adc
mov
dec
jge
stc
(bad)
es
loopne
push
lods
xchg
adc
jae
shl
dec
in
pop
sub
sub
pop
or
stos
jmp
bound
sbb
jnp
leave
lahf
hlt
adc
scas
arpl
sub
ja
adc
mov
xor
in
push
cmp
adc
adc
jns
ror
dec
dec
inc
out
xchg
imul
pop
lods
pop
pop
adc
xchg
sbb
push
adc
cwde
and
mov
std
adc
sub
gs
(bad)
test
xchg
or
pop
stos
xor
mov
movs
add
jns
lods
lods
call
shr
mov
inc
sbb
push
xlat
cmp
call
sub
shr
outs
or
adc
sbb
call
daa
ja
stos
mov
xchg
cli
xor
push
adc
adc
cwde
jno
sbb
popf
and
std
xchg
js
data16
out
(bad)
and
jge
mov
lock
sbb
ins
xchg
pop
arpl
test
adc
dec
dec
adc
xchg
out
aam
mov
loope
adc
dec
in
fmul
fist
and
and
sub
dec
adc
and
adc
sbb
not
movs
lds
adc
sbb
aas
cmps
lods
pop
mov
mov
sbb
rcl
lds
inc
in
adc
out
push
and
cmp
lahf
adc
in
(bad)
es
shl
pop
jmp
out
push
mov
pop
(bad)
(bad)
in
pop
je
int3
jge
bound
retf
cwde
aam
into
stos
mov
adc
xchg
jo
(bad)
pop
pop
add
inc
pop
cmc
es
adc
fst
or
es
mov
fdiv
add
adc
jne
push
mov
icebp
adc
je
iret
pushf
or
mov
push
adc
addr16
add
adc
cmp
in
xor
xor
xchg
cmc
mov
out
adc
(bad)
dec
movs
pushf
or
jge
sbb
and
or
data16
mov
dec
jnp
loop
adc
or
jnp
js
pop
xchg
adc
mov
neg
mov
fs
adc
dec
xchg
fcmovbe
sub
sbb
pop
cld
jecxz
test
in
or
or
fnsave
and
xchg
sbb
es
out
push
dec
pop
adc
sbb
leave
adc
stos
cs
mov
test
mov
mov
cmc
mov
lods
sub
mov
js
test
ins
in
push
adc
pop
loop
mov
cmp
sub
xchg
pop
and
and
dec
or
lods
scas
test
push
add
ret
aaa
mov
mov
adc
inc
lds
inc
mov
xchg
pop
adc
ja
out
je
div
push
(bad)
outs
int
push
sahf
fadd
inc
jge
pop
popa
fcom
hlt
cmp
or
sub
bndldx
scas
pop
ins
mov
je
sub
test
sub
pop
nop
in
out
int3
cmp
movs
in
mov
out
mov
cmp
ficom
aaa
adc
iret
and
pop
adc
imul
or
sbb
clc
add
test
inc
mov
mov
mov
xchg
sbb
or
pop
add
push
cmp
rcl
out
out
fstp
adc
mov
adc
push
in
shr
or
xchg
adc
push
pop
cmp
jb
daa
mov
ds
imul
hlt
or
jmp
lahf
pop
adc
cmp
pop
jg
js
adc
add
push
fs
test
adc
lods
in
stc
jb
je
adc
test
jae
daa
adc
cmp
stos
inc
int3
push
jb
sbb
push
mov
mov
dec
loopne
push
mov
xchg
push
adc
popa
loopne
fnstsw
(bad)
xor
push
inc
sbb
adc
(bad)
cli
inc
pop
call
loop
adc
and
jp
pushf
lock
sbb
cwde
sub
fcom
rcl
(bad)
push
push
movs
je
inc
cmp
mov
adc
fxtract
(bad)
into
sub
lods
mov
pop
aam
jae
popa
and
out
mov
sbb
lahf
add
fcom
jl
jp
test
nop
or
push
xchg
pop
jb
cmc
jmp
jae
and
and
inc
pushf
loopne
rol
sub
jle
jb
xchg
pop
movs
mov
push
popf
imul
jns
arpl
sbb
xor
repz
add
cmp
xchg
add
neg
fnstcw
aam
sbb
pop
out
pop
and
movs
mov
or
adc
jbe
popa
adc
mov
loope
in
int3
xchg
jge
shr
and
aas
adc
push
cmps
fstp
enter
call
and
out
in
add
lock
sub
dec
mov
js
or
cmp
xchg
pop
jle
test
xor
cmp
or
ds
adc
loopne
mov
adc
sbb
cmp
fwait
sbb
push
call
jmp
test
xor
adc
sets
and
(bad)
(bad)
ficom
dec
(bad)
mov
in
pop
mov
pop
and
mov
xchg
mov
jmp
xor
lds
cmps
int
and
in
cmp
dec
add
in
sbb
cmp
out
jb
lahf
xchg
stc
pushf
jp
ja
movs
cmp
popf
mov
fs
ss
pop
xlat
mov
test
jmp
inc
mov
clc
mov
pop
retf
sub
adc
into
pop
mov
loop
adc
inc
neg
outs
xor
sub
ss
sub
cld
in
inc
out
enter
dec
pusha
out
pop
jg
std
not
mov
movs
cwde
out
add
hlt
fist
mov
dec
dec
out
adc
pop
(bad)
sti
cmp
loopne
adc
pushf
add
adc
mov
aas
cmps
jle
adc
dec
dec
push
cmc
std
pop
dec
in
(bad)
bound
movs
adc
xor
adc
clc
add
(bad)
adc
mov
in
ret
jmp
push
jo
pop
iret
std
daa
pop
adc
inc
xchg
adc
test
enter
pop
adc
sti
loop
aad
push
fucomip
sub
movq
es
aam
pop
dec
movs
jmp
push
das
out
mov
test
jnp
mov
mov
lds
outs
xor
rcl
loope
pop
sub
push
jl
add
ss
pop
pop
mov
cs
mov
xor
test
fs
xchg
mov
inc
arpl
lods
jmp
test
adc
mov
adc
mov
arpl
ss
in
je
and
imul
fild
or
(bad)
cmps
inc
pushf
(bad)
adc
aad
or
dec
adc
mov
or
call
lock
sar
movs
pop
out
push
lea
cmp
and
or
xor
sbb
jno
and
pop
adc
cmp
sbb
je
jne
or
ds
inc
mov
inc
lods
push
cmp
jb
test
imul
or
lea
mov
or
pop
push
adc
inc
aad
dec
bound
dec
cwde
xchg
adc
xchg
(bad)
in
movs
rcl
push
push
jge
sbb
js
fnsave
pop
sub
sbb
jecxz
fsubr
cld
rcl
ficom
inc
mov
mov
popf
xor
lods
(bad)
neg
xchg
cmp
stc
ds
push
pop
sbb
push
daa
or
adc
test
or
arpl
adc
test
(bad)
adc
stos
push
fdivr
xchg
adc
xor
movs
add
fs
or
lds
add
imul
pop
icebp
les
xchg
(bad)
sbb
(bad)
lock
pusha
scas
or
inc
adc
or
fst
lods
out
mov
repz
push
add
lock
push
ret
nop
sbb
test
rcl
add
adc
adc
scas
popa
pop
scas
pop
test
iret
or
adc
push
sbb
fwait
add
in
fild
nop
(bad)
in
adc
sahf
shl
movs
xchg
adc
inc
cs
add
push
int
adc
(bad)
in
popa
adc
dec
add
mov
mov
sub
xlat
aam
dec
jno
(bad)
nop
adc
pusha
inc
stc
push
lods
and
call
adc
jl
lahf
jle
test
xor
test
popa
adc
cdq
inc
jmp
mov
adc
in
push
out
sbb
mov
aaa
mov
repnz
adc
outs
mov
in
mov
and
pop
adc
ror
sbb
hlt
add
out
bound
call
mov
adc
test
xlat
adc
cmps
jo
add
leave
nop
adc
sub
into
arpl
ins
and
call
adc
hlt
dec
cmp
adc
xor
xor
lock
mov
aas
inc
daa
adc
stc
cmps
int3
mul
and
mov
addr16
call
xchg
rol
add
dec
fmul
jg
aam
enter
dec
call
push
push
movs
xor
push
stos
scas
push
mov
popa
sub
pushf
sub
hlt
inc
scas
adc
mov
retf
jp
sbb
in
sub
fs
ret
(bad)
adc
lahf
mov
xlat
adc
loopne
cli
outs
mov
pushf
sub
aam
stos
adc
jns
sbb
stos
mov
adc
fwait
lods
fcom
cmp
mov
push
add
in
mov
or
inc
aaa
call
adc
hlt
dec
push
icebp
jmp
mov
and
and
push
mov
mov
fwait
push
xlat
bound
je
mov
mov
adc
push
call
jl
add
out
fs
test
adc
sbb
cmc
cmp
mov
push
sub
add
sub
retf
push
mov
and
call
adc
leave
mov
xor
mov
out
push
ja
(bad)
push
push
xchg
dec
call
in
outs
sbb
rcr
mov
xchg
push
paddsw
cmp
sub
mov
add
aas
adc
fdiv
lea
jp
adc
iret
push
jge
retf
std
xor
inc
sub
ds
popa
sbb
retf
adc
mov
sub
xchg
sbb
ins
push
test
fs
push
sub
mov
lea
inc
xor
fdivr
aam
pop
lods
adc
push
and
(bad)
adc
jecxz
sub
sbb
test
fstp
mov
adc
mov
sar
jg
push
cmp
out
push
aam
leave
and
repz
clc
jmp
hlt
loope
adc
mov
shr
inc
jmp
sub
lahf
add
push
adc
push
mov
or
gs
scas
fdivr
call
in
aam
mov
push
data16
push
add
push
add
mov
ins
pop
adc
arpl
push
es
mov
jb
and
jl
adc
mov
sub
ror
xchg
mov
xchg
xor
repnz
add
add
jo
adc
(bad)
es
add
ss
fbstp
add
sub
pusha
add
hlt
jl
mov
adc
cmp
(bad)
or
mov
xor
xor
push
icebp
dec
test
inc
mov
mov
fsubr
adc
and
iret
mov
aam
cmp
fs
add
jb
popw
mov
int
or
xchg
or
iret
je
inc
in
icebp
sbb
das
cmc
daa
adc
push
adc
adc
xor
popa
cmp
add
jl
jns
mov
hlt
jle
cli
cs
mov
ret
xchg
pop
adc
jle
xchg
xchg
lea
pop
(bad)
xchg
adc
sti
push
out
xchg
adc
jmp
rcl
dec
lock
aam
in
mov
fld
adc
jbe
mov
sbb
mov
in
pop
sbb
adc
dec
sbb
arpl
jbe
jl
dec
scas
mov
hlt
bound
jge
daa
cli
in
or
cwde
into
add
adc
mov
push
sbb
xchg
fdivr
mov
sub
xor
adc
push
push
fisubr
data16
ja
pusha
xchg
lahf
push
sub
mov
mov
sub
xor
mov
(bad)
adc
mov
jmp
lods
(bad)
jge
(bad)
pop
mov
xchg
fs
fst
jb
adc
dec
ficom
rcl
in
push
sbb
sbb
pushf
fs
xchg
adc
xor
add
scas
mov
sub
mov
xchg
mov
pushf
in
jmp
jle
daa
ds
push
inc
rcl
sub
jns
or
js
(bad)
xchg
not
dec
aaa
loop
push
adc
test
or
adc
jl
aam
rcl
jns
jle
add
adc
inc
sub
mov
repz
fidivr
js
pop
xchg
es
xchg
add
mov
cs
out
push
inc
in
hlt
gs
shl
mov
jb
out
sbb
xchg
outs
adc
icebp
out
repz
push
sbb
imul
add
mov
sbb
repnz
push
js
adc
cdq
sbb
or
adc
std
movs
pop
ret
mov
aaa
xchg
dec
fwait
scas
add
je
jle
pop
push
adc
popf
or
mov
fadd
push
mov
test
dec
adc
mov
out
in
push
cld
pop
adc
not
addr16
and
hlt
pop
add
xchg
int
and
dec
fild
adc
push
(bad)
and
adc
xchg
dec
jecxz
in
jb
addr16
jecxz
sti
jno
mov
xor
xor
cs
(bad)
in
push
add
dec
in
call
(bad)
lods
int
push
repnz
ds
adc
mov
add
jmp
adc
mov
pop
in
pop
out
sub
xchg
push
ds
lock
cmp
sbb
daa
sbb
gs
out
adc
xchg
mov
outs
in
ins
loope
dec
clc
push
mov
mov
or
adc
mov
scas
inc
adc
adc
mov
sbb
lahf
out
jge
test
hlt
push
(bad)
adc
jmp
push
adc
mov
pop
clc
xchg
or
adc
xchg
cdq
push
enter
adc
mov
pop
jne
test
jle
fld
hlt
and
enter
xchg
push
lods
adc
sbb
icebp
test
or
shl
cli
loopne
cmp
fistp
jne
in
les
lea
and
(bad)
aam
ss
movs
ret
mov
mov
popa
push
loop
jg
cdq
adc
push
(bad)
xchg
fisttp
repnz
and
xchg
jbe
pusha
adc
inc
add
sbb
pop
sbb
in
adc
cmp
sbb
mov
inc
cld
xor
les
add
ss
cmp
adc
jp
and
xchg
movs
add
icebp
cld
(bad)
push
adc
cmp
rcl
and
leave
adc
adc
xor
jmp
mov
mov
adc
add
push
sbb
aas
pop
ret
cs
sub
mov
pop
adc
xchg
push
inc
in
das
sub
js
arpl
sbb
or
cdq
lods
fbstp
cmp
or
int3
xlat
push
int
addr16
movs
adc
daa
call
mov
out
pop
fcomp
shr
mov
into
adc
loope
dec
test
shr
ins
aad
and
push
xchg
xor
enter
dec
stc
loopne
add
xchg
adc
cmp
call
jo
sbb
inc
fnsave
cld
add
ins
repnz
pop
(bad)
popf
add
imul
aam
xor
mov
push
imul
xor
fnstenv
xchg
daa
(bad)
arpl
push
cmps
xor
jno
xchg
retf
lock
xor
les
clc
mov
aad
les
sbb
mov
fs
sbb
gs
clc
adc
repnz
sub
lods
pop
sub
outs
int3
add
mov
push
not
adc
clc
mov
inc
cmp
fld
sub
dec
adc
push
xlat
cwde
ret
js
call
(bad)
push
and
sbb
push
leave
cmc
xchg
pop
clc
add
jbe
mov
sub
mov
std
rcl
jge
sub
jno
cmp
and
leave
dec
cdq
fld
inc
jmp
rcl
or
stc
sub
add
sub
dec
adc
test
pop
pop
cwde
loopne
sbb
fnstenv
call
pushf
adc
adc
pop
mov
int3
outs
fsub
pop
in
loopne
sub
lods
clc
mov
sbb
cmp
out
add
push
stos
test
xchg
and
(bad)
adc
xchg
iret
pop
adc
xor
push
cmp
sub
out
adc
sti
inc
ds
sub
fild
pusha
rcl
mov
pop
push
cmp
inc
push
adc
movs
jns
sbb
test
xchg
call
mov
adc
int
xchg
and
adc
ins
or
cld
cmp
add
jno
sub
scas
ins
sbb
lahf
xchg
sti
xor
arpl
xchg
xor
adc
repz
jb
int3
mov
adc
ror
and
test
xchg
jg
push
push
cmps
push
sbb
mov
dec
fcmovb
in
cmp
inc
add
hlt
aas
(bad)
sbb
adc
dec
sub
jbe
xor
and
xchg
adc
inc
test
sbb
or
sti
shr
adc
dec
pop
jmp
stos
ret
je
and
test
add
jb
xchg
pop
fstp
mov
mov
add
jge
mov
pop
sbb
push
sub
je
adc
repz
int3
or
ret
popf
mov
les
stos
fwait
adc
sbb
or
adc
imul
adc
loope
lods
adc
adc
add
ficom
xor
sub
fstp
push
sti
not
mov
std
jmp
(bad)
leave
adc
ja
cwde
pop
sub
mov
rcl
push
adc
xchg
adc
clts
loopne
dec
rcl
adc
sub
les
cld
jmp
sbb
push
push
rcr
fidiv
in
ja
in
ficom
sbb
movs
mov
pop
pop
cmp
dec
(bad)
lods
popa
sub
(bad)
inc
mov
adc
int3
cmp
lock
clc
mov
push
adc
arpl
not
cmc
aad
pop
call
jbe
mov
aas
adc
(bad)
loop
jns
in
outs
push
adc
mov
mov
pop
adc
adc
adc
pop
xchg
sbb
sub
xor
fiadd
and
inc
xchg
push
dec
lea
test
mov
in
pop
iret
jg
call
pushf
pusha
mov
add
aam
jmp
push
mov
adc
cdq
shl
sbb
push
in
mov
sub
and
movs
push
movs
aaa
lea
in
mov
sub
es
adc
push
hlt
fs
nop
pusha
push
fldcw
sbb
fwait
jnp
inc
aam
cmps
sub
cmp
adc
popa
sar
scas
jo
out
js
stos
outs
jae
add
inc
mov
lods
int
push
push
jnp
push
lea
adc
retf
add
daa
push
adc
nop
cmp
inc
addr16
jmp
aam
cld
push
adc
stos
pop
sbb
clc
sbb
adc
pop
call
adc
push
mov
sti
and
imul
and
(bad)
jo
(bad)
sbb
(bad)
pop
mov
adc
dec
xchg
imul
mov
loop
lods
push
sar
adc
mov
mov
in
mov
movs
cmps
mov
cmp
data16
xchg
ror
adc
loope
aad
(bad)
(bad)
fst
shr
test
scas
adc
dec
add
mov
call
mov
xchg
ficom
repnz
and
and
inc
mov
adc
jmp
mov
in
mov
jnp
or
add
push
jne
xchg
jo
mov
xchg
hlt
test
sahf
dec
out
adc
adc
(bad)
ss
mov
adc
inc
push
mov
ss
sub
cmps
jmp
ret
push
movs
and
xor
or
lods
call
sbb
outs
aam
add
pop
xor
in
mov
sti
cmp
pop
pushf
dec
mov
cmp
jns
clc
push
aam
mov
enter
fs
not
adc
mov
repz
repnz
jp
push
test
jecxz
push
sbb
repz
int3
mov
inc
push
xchg
dec
sbb
lock
in
jae
sbb
xlat
(bad)
retf
or
and
fstp
mov
inc
mov
dec
shr
adc
xchg
mov
fsubr
jp
and
loopne
adc
jo
ss
icebp
jecxz
pop
xchg
sti
fstp
xchg
rol
movs
jmp
inc
jge
push
inc
push
xchg
sub
je
sbb
jp
push
mov
icebp
lea
push
sub
adc
xchg
mov
mov
jne
ins
jmp
iret
inc
adc
outs
push
lds
es
fs
(bad)
xchg
mov
stc
sub
push
fxch
xor
imul
cmp
jno
pop
mov
pop
mov
or
ds
jno
adc
movs
pop
inc
or
mov
adc
pop
mov
cli
jnp
es
xchg
jle
add
(bad)
mov
jmp
jne
outs
test
cmp
adc
mov
xchg
into
adc
sbb
fist
add
stos
mov
or
punpcklwd
test
call
or
mov
mov
popf
jb
adc
sub
inc
fimul
int
push
imul
adc
mov
mov
sbb
mov
int3
mov
out
clc
int3
shl
mov
or
lds
jns
xchg
xor
adc
fdiv
lahf
mov
in
xor
xor
push
dec
addr16
loop
aaa
int
adc
cmp
pop
xor
(bad)
jo
and
mov
repnz
stc
xor
lds
jnp
fisubr
aam
and
xchg
xchg
pop
push
cmp
adc
fisub
mov
dec
int3
mov
cwde
adc
or
or
pushf
mov
dec
pop
adc
add
dec
outs
mov
cmp
or
icebp
es
xor
ds
mov
adc
pop
fadd
out
or
push
shl
das
cmps
int
ret
aam
mov
adc
daa
push
inc
lock
fwait
push
clc
and
add
lods
mov
loop
in
adc
mov
les
add
(bad)
movs
inc
cmp
xchg
push
jmp
test
pop
imul
ret
pop
pusha
aad
sbb
rol
cmp
scas
adc
mov
xchg
push
jnp
lods
inc
std
sub
call
loop
ss
fld
in
stos
pop
shl
sar
push
fst
xor
repnz
xchg
push
cmps
jb
movs
cdq
pushf
jo
stos
sub
fisub
ja
scas
adc
mov
xchg
into
addr16
pop
(bad)
in
adc
inc
mov
and
imul
xchg
adc
cmp
fild
jmp
sub
push
adc
loop
call
adc
sub
jns
adc
idiv
mov
sub
pop
adc
shr
mov
jge
jmp
fst
out
sbb
out
das
movs
jl
cmps
jmp
adc
cmp
push
sbb
adc
or
sub
push
loopne
jecxz
sbb
push
xor
fsubr
adc
sbb
and
les
dec
cdq
(bad)
pop
popf
(bad)
std
not
into
adc
jbe
add
adc
mov
xchg
sub
inc
jo
cdq
stos
mov
fst
sti
lods
mov
jnp
mov
out
stos
cmp
in
(bad)
sbb
adc
in
icebp
adc
or
in
addr16
aas
aam
pop
outs
xchg
adc
pop
xor
adc
sub
iret
js
rcl
stc
adc
repnz
mov
push
push
and
int3
xchg
mov
ror
cmp
ficomp
inc
adc
pusha
cdq
push
fdivr
xchg
xor
inc
adc
xchg
mov
loop
cdq
pop
adc
ins
adc
xor
xor
or
into
inc
add
sbb
adc
jmp
in
adc
cmps
retf
fwait
push
xlat
je
adc
and
sbb
adc
mov
mov
in
mov
push
repnz
sbb
and
xor
adc
xor
xlat
jmp
data16
dec
jp
rcr
aam
jge
pop
in
cld
cli
fcom
jecxz
add
mov
adc
inc
adc
push
je
mov
cld
xor
add
push
cmp
xor
stc
xchg
adc
adc
add
pusha
cmc
test
loopne
add
dec
push
dec
imul
pop
fistp
movs
mov
scas
mov
hlt
cli
adc
mov
inc
jo
jbe
mov
ss
pop
dec
adc
mov
push
cdq
adc
lahf
movs
fs
pop
in
pop
fstp
mov
cdq
mov
xchg
sbb
sbb
loop
jg
push
fs
ins
icebp
adc
pop
fld
inc
pop
xchg
mov
popf
pop
xor
cmovno
ret
and
shl
mov
xchg
pop
enter
ds
xchg
add
push
xchg
adc
movs
xor
call
das
xchg
mov
cli
pop
adc
or
push
inc
sbb
lods
sbb
inc
push
dec
mov
adc
imul
push
cli
mov
stos
ret
adc
push
in
adc
mov
adc
jnp
push
rol
adc
loopne
enter
pop
adc
sub
pop
out
aam
lock
lahf
sbb
inc
adc
dec
adc
fdivr
mov
pop
outs
dec
popa
adc
push
jo
dec
fcom
cld
inc
adc
pop
sbb
sub
fwait
xor
or
push
mov
and
or
and
test
retf
push
outs
xor
adc
jno
in
adc
jecxz
sub
mov
sub
and
mov
aaa
pop
out
fs
pop
dec
xor
pop
push
dec
fstp
push
fwait
es
adc
xor
fs
pop
mov
inc
fistp
pop
adc
std
sub
push
sbb
adc
jle
lea
lds
adc
ins
outs
cmps
push
lods
loope
out
sub
and
xor
repz
retf
adc
cmp
jge
fs
and
adc
adc
inc
lock
cmp
cmp
stc
push
mov
mov
inc
pop
sub
push
stos
dec
adc
add
jle
adc
and
cmc
or
push
pop
int3
fidiv
pop
adc
push
mov
lea
lahf
jne
jl
cmps
cmp
inc
push
imul
mov
xlat
mov
adc
nop
in
jl
or
jge
inc
scas
add
dec
adc
dec
pop
xchg
imul
adc
fwait
add
loopne
adc
fiadd
sar
and
ret
retf
test
call
mov
inc
jno
push
stos
popf
loope
inc
rcl
aam
int
fisubr
movaps
fs
mov
ss
inc
test
pop
(bad)
aam
push
ins
ds
xor
and
jl
adc
jns
into
popf
fsub
in
xor
xchg
mov
mul
ins
xor
dec
icebp
adc
add
sub
and
mov
adc
mov
shl
in
daa
pop
sbb
xchg
bound
adc
data16
pop
cmovg
cmc
sub
shl
adc
dec
sub
js
jne
movs
pop
mov
push
inc
and
adc
pop
push
mov
lds
fisubr
pop
stos
adc
pop
pop
aam
lahf
jae
mov
popa
repz
in
sub
cdq
add
sbb
xchg
mov
scas
fidivr
out
mov
and
dec
rol
pop
aaa
add
xlat
scas
jl
int3
mov
adc
cmp
pushw
lods
gs
xor
dec
xchg
fucomip
out
xor
mov
pusha
pushf
(bad)
sub
xchg
push
les
cmp
add
popa
lods
sbb
lods
mov
adc
ss
add
pop
and
ror
adc
xchg
sbb
adc
sti
dec
stos
in
ins
daa
adc
cmps
adc
addr16
lock
mov
pusha
push
ret
jge
pop
push
ins
mov
adc
and
push
ins
sub
into
jo
ins
psraw
dec
inc
in
call
xchg
inc
(bad)
xor
mov
repnz
ja
js
sbb
cmp
stos
lods
push
jmp
icebp
inc
es
ror
(bad)
adc
and
sub
push
(bad)
fisub
ds
leave
xor
adc
adc
adc
mov
sbb
and
cmps
cdq
nop
loope
in
fisttp
dec
in
fs
mov
out
or
test
adc
lahf
push
call
mov
add
push
inc
fst
nop
xor
and
addr16
add
retf
mov
or
jmp
and
sbb
adc
fcomp
fwait
inc
adc
cld
push
mov
mov
mov
inc
lahf
enter
(bad)
adc
and
xchg
fstp
fwait
cmps
adc
in
jmp
mov
sbb
add
xor
add
adc
int3
test
push
mov
div
retf
adc
retf
inc
push
mov
jmp
pop
add
mov
sub
leave
xchg
sbb
ret
je
les
enter
scas
jne
in
adc
xor
xchg
aam
(bad)
(bad)
cld
mov
sbb
jg
in
(bad)
push
shl
fistp
enter
mov
jo
in
or
mov
lods
movs
loope
(bad)
ins
mov
adc
sub
repz
lock
popf
popa
add
clc
jmp
mov
mov
xlat
lahf
pop
inc
adc
rcr
dec
loopne
push
push
enter
xor
sbb
pop
out
mov
adc
inc
mov
and
xor
mov
mov
mov
dec
xchg
test
in
push
dec
ds
jge
je
aam
sbb
repnz
mov
xchg
adc
lock
sbb
dec
xchg
test
outs
in
sbb
lods
or
je
xor
add
mov
adc
push
out
pop
push
pop
(bad)
xor
int
mov
cmp
jbe
int3
rol
and
ins
mov
inc
jmp
outs
retf
push
jmpw
xor
movs
data16
clc
and
add
aaa
dec
add
or
mov
adc
cli
mov
mov
hlt
js
xchg
mov
cmps
adc
add
jle
push
adc
test
add
je
cmp
lock
call
sbb
xchg
pop
test
hlt
rcr
fist
dec
iret
mov
adc
and
push
scas
popf
push
adc
xchg
xor
push
jne
repnz
mov
cdq
fs
adc
cmp
and
movs
adc
leave
mov
and
in
aaa
pop
jmp
cmc
dec
cmp
adc
pop
in
push
ins
mov
adc
aad
push
pop
out
adc
loop
and
sbb
cwde
pusha
and
adc
pop
test
inc
pop
out
push
dec
add
push
adc
fimul
into
xor
xor
pop
aaa
mov
add
xchg
or
sbb
xchg
mov
mov
(bad)
das
test
add
push
pop
and
and
mov
xor
test
ss
adc
xlat
je
xchg
cld
into
sbb
adc
xchg
adc
adc
popa
mov
mov
imul
call
sti
in
test
mov
repz
xor
movs
pop
iret
mov
dec
ins
or
mov
adc
movs
les
neg
push
dec
add
bound
nop
cdq
sbb
adc
mov
mov
push
adc
pushf
and
mov
jnp
jae
nop
jb
push
js
cmps
xor
inc
sbb
adc
mov
in
int3
push
add
push
loope
jle
pop
sbb
and
jl
mov
adc
imul
sub
mov
pusha
dec
adc
jge
inc
cmp
cdq
fcomp
sti
hlt
push
scas
adc
jbe
sar
out
enter
(bad)
fiadd
or
and
mov
push
jne
inc
in
int3
cdq
paddsw
ss
sbb
dec
sub
out
lea
and
adc
arpl
jmp
jge
or
mov
mov
mov
mov
mov
xlat
shl
inc
pop
push
les
mov
xchg
imul
dec
adc
es
lahf
or
shl
test
push
les
and
pop
scas
into
sbb
rol
aam
jb
adc
retf
jg
cmp
adc
push
pop
mov
xchg
push
xor
fcmovnbe
sbb
mov
rcl
jbe
xchg
pop
xor
adc
and
and
adc
jne
pushf
movs
repz
or
leave
ret
lahf
sbb
and
jns
and
cli
xchg
fwait
add
mov
xor
sub
in
dec
inc
mov
fist
jg
movs
mov
in
mov
mov
sar
adc
fidiv
or
mov
adc
mov
aad
jae
pop
adc
gs
pushf
mov
xchg
int3
(bad)
in
jg
add
rol
fsub
rol
adc
call
rep
adc
call
adc
loop
popf
or
dec
sbb
enter
adc
and
mov
adc
loope
jns
fdivr
cli
call
inc
js
popf
sahf
sbb
adc
ret
inc
pop
push
movs
sbb
leave
test
pusha
clc
adc
cdq
shr
xor
dec
pop
mov
cmp
jo
mov
sbb
xchg
xchg
push
sub
or
cmps
mov
ret
inc
xor
adc
mov
ins
mov
jo
mov
add
hlt
ins
push
ror
adc
call
out
jmp
and
xchg
(bad)
pushf
pushf
xchg
test
push
mov
icebp
xor
loop
rcr
pop
cmp
add
push
out
mov
mov
or
jmp
or
pop
and
(bad)
cli
xlat
in
icebp
rol
add
cmp
and
push
inc
xchg
inc
adc
mov
(bad)
into
xor
out
movs
adc
jp
pop
mov
push
jl
loope
icebp
adc
push
gs
push
mov
cmc
mov
lds
shr
repnz
idiv
pop
ins
sub
(bad)
in
loop
mov
lods
jg
fwait
cdq
adc
cmp
movs
sbb
push
pop
adc
das
inc
loope
sub
out
out
push
adc
mov
cwde
in
cmp
push
xchg
push
push
hlt
(bad)
cmp
adc
outs
fst
inc
iret
mov
adc
icebp
jae
xchg
push
mov
sub
daa
sbb
je
pop
sbb
std
sbb
(bad)
jne
jmp
nop
rcr
or
sbb
push
ret
std
add
(bad)
jo
int3
jg
xlat
cmps
je
mov
movs
fwait
lock
int3
add
loopne
faddp
jl
ins
inc
in
aaa
sbb
or
mov
sbb
add
jbe
int3
inc
inc
jge
or
xchg
movs
pusha
aam
xchg
add
sub
cwde
xor
xchg
adc
adc
ficomp
pop
xlat
mov
addr16
push
lahf
dec
add
je
fs
jg
dec
dec
cwde
ins
in
lods
xchg
push
cwde
std
adc
mov
adc
inc
outs
adc
add
popf
xchg
jnp
xor
ds
push
mov
mov
mov
adc
push
retf
adc
(bad)
cli
push
adc
movs
push
int
sbb
(bad)
in
sub
fwait
mov
adc
call
lods
mov
mov
jge
cdq
loope
dec
outs
in
xor
ret
repz
cld
cs
adc
add
sti
pop
outs
adc
dec
dec
inc
hlt
in
and
dec
adc
xchg
mov
popa
sbb
test
or
xlat
and
push
jns
add
rcr
and
adc
call
adc
jbe
loope
mov
cmp
mov
pushf
jmp
push
inc
rcl
inc
ds
call
lock
daa
jnp
add
and
loope
movs
mov
hlt
out
xchg
mov
test
lods
fcmovnb
loop
jle
lock
retf
test
sbb
shl
test
(bad)
fstp
sbb
and
shl
mov
aam
mov
jg
lds
loope
xlat
dec
cmp
push
imul
retf
push
sti
cdq
lock
out
push
repz
frstor
fiadd
jmp
add
out
inc
fld
ret
call
call
sub
fnsave
and
in
add
dec
dec
jle
imul
xor
jl
mov
sbb
pop
in
fldenv
je
xor
gs
data16
mov
jge
inc
jnp
mov
cmp
test
sbb
or
ror
push
mov
add
mov
stos
jo
xor
ret
xor
(bad)
fcomp
push
fnstenv
xor
rcl
(bad)
jmp
dec
push
(bad)
mov
(bad)
pop
outs
mov
lahf
mov
push
jne
ins
cmp
xchg
fcom
adc
adc
jmp
adc
ja
fistp
and
popf
cwde
in
dec
mov
sub
(bad)
aas
test
or
cmps
ins
rcr
sub
pop
adc
aaa
lahf
inc
movs
mov
dec
push
test
movs
mov
push
lods
add
loop
adc
sbb
fistp
inc
push
pop
popa
xchg
pop
jmp
mov
adc
jg
sbb
mov
push
inc
mov
sbb
ds
mov
mov
xchg
arpl
out
pop
cmp
(bad)
and
sti
mov
into
mul
jmp
pop
push
jmp
xchg
data16
inc
push
retf
aad
movs
rcr
scas
loope
in
std
fnstsw
ret
rcr
test
pop
sbb
pop
mov
inc
sub
jge
xchg
aas
in
retf
cmp
ins
adc
in
ins
or
int3
pop
xchg
rcl
push
adc
fisttp
mov
aas
dec
pop
mov
imul
xor
mov
push
cdq
retf
and
mov
pop
sub
xor
getsec
jno
test
xor
mov
das
(bad)
adc
inc
cmps
adc
cmp
(bad)
adc
out
popf
data16
hlt
leave
and
ffreep
jge
xchg
adc
out
sbb
sbb
ret
and
pushf
or
add
call
jnp
cmp
sbb
out
ins
aaa
fucomp
adc
add
adc
lods
stc
jns
mov
retf
fistp
pop
adc
repz
cmp
mov
jbe
scas
fidivr
movs
es
xchg
add
in
push
cwde
cmp
xor
inc
adc
icebp
aad
test
or
xchg
(bad)
clc
pop
popa
inc
adc
xor
xchg
adc
cdq
mov
aaa
mov
xchg
aaa
call
inc
add
jl
inc
movs
xor
or
fs
adc
xchg
call
les
add
aad
jbe
adc
adc
mov
mov
vunpcklps
test
pushf
call
rcr
fsubr
mov
aas
(bad)
xchg
sbb
adc
mov
ror
dec
ins
sbb
fsub
scas
xchg
aam
push
jecxz
adc
xchg
jae
lods
add
std
iret
aam
xchg
adc
adc
push
adc
mov
xor
add
lods
inc
mov
adc
test
pop
or
test
xor
icebp
aaa
cli
inc
je
mov
push
and
mov
(bad)
or
pop
mov
hlt
fbld
movs
int
adc
(bad)
fdiv
inc
mov
cmp
shl
xchg
jecxz
in
xlat
daa
scas
jo
sub
(bad)
push
sbb
add
(bad)
les
sbb
test
imul
rcl
pushaw
jbe
cmp
lock
(bad)
pop
xor
loop
mov
imul
das
js
sar
enter
xchg
mov
jg
xchg
jae
call
out
xchg
xor
cwde
dec
push
jmp
jno
rcl
cmp
popa
loopne
clc
fwait
adc
in
gs
mov
les
dec
or
sbb
stos
xchg
ja
sti
in
outs
mov
outs
jb
or
mov
mov
xchg
mov
or
rcl
push
stos
and
movs
or
rol
in
xor
inc
mov
inc
(bad)
std
and
int3
(bad)
es
repz
push
jle
ret
test
lock
xchg
mov
fst
adc
arpl
fcomp
mov
xor
stos
pop
ret
in
pop
imul
push
lods
test
add
inc
pop
mov
and
mov
loopne
mov
mov
dec
aaa
mov
dec
xor
and
cli
nop
loopne
cmc
jbe
lock
cmp
and
mov
out
fldcw
repnz
repz
fs
in
xchg
xchg
jb
hlt
mov
sbb
repnz
(bad)
arpl
jbe
cli
adc
jecxz
sbb
jno
jmp
repz
adc
aam
stos
aad
pop
call
or
jle
adc
adc
div
cmp
mov
push
sbb
scas
(bad)
retf
jmp
lock
sub
xor
jnp
mov
fist
rcr
mov
test
retf
jns
aam
sub
jmp
dec
fcmovne
sub
push
pop
loopne
inc
aam
(bad)
xor
fucom
push
adc
sti
pop
cmps
test
add
in
popf
adc
cmp
cmp
inc
add
lea
div
in
pop
push
hlt
mov
adc
push
enter
rcl
dec
nop
xchg
jmp
mov
cdq
add
xchg
icebp
mov
je
rol
loop
adc
leave
xchg
cmp
inc
dec
jo
adc
mov
xor
lock
fwait
sbb
fcom
xchg
loop
lods
sub
adc
and
std
dec
mov
or
ds
sub
mov
rcr
sbb
mov
push
stos
jl
adc
mov
in
fiadd
or
cli
hlt
and
cmp
ds
jg
in
stc
icebp
xor
jae
fs
ret
add
adc
jo
xor
jmp
mov
loop
retf
es
push
cld
fnstsw
adc
xchg
gs
jp
(bad)
sbb
mov
xchg
xchg
pop
pop
aad
or
or
fst
xchg
cmp
pop
or
and
pop
sbb
imul
inc
loope
pop
xchg
adc
xor
pop
cmp
test
mov
sub
shr
mov
(bad)
sbb
jae
xor
js
mov
arpl
dec
adc
cmc
push
inc
or
mov
lock
cwde
out
xchg
adc
push
test
or
xor
leave
or
idiv
mov
adc
and
inc
rol
int3
mov
lods
push
push
xchg
shl
cli
xor
cmp
add
push
pop
sub
shl
mov
(bad)
(bad)
mov
xchg
adc
test
jo
dec
add
les
out
adc
test
adc
xchg
pop
mov
cwde
rdmsr
push
xchg
mov
pop
out
fidivr
adc
cld
xchg
mov
adc
pop
aam
arpl
push
iret
arpl
jnp
adc
xchg
int3
retf
sti
sbb
push
adc
imul
adc
icebp
mov
ss
cmp
adc
inc
fisubr
ror
pop
pop
test
adc
movs
loopne
scas
outs
dec
test
test
lahf
or
xchg
and
cmc
pop
xchg
xchg
add
push
push
pop
adc
jge
push
stos
xchg
add
push
sub
sbb
mov
xchg
dec
push
lods
movhps
jo
iret
stos
cmps
inc
adc
pop
test
pop
dec
cs
push
pop
cmc
push
xor
out
adc
(bad)
adc
add
add
or
adc
xchg
movs
ror
mov
mov
in
mov
pop
jno
js
sub
jbe
ds
dec
dec
dec
cld
inc
cdq
push
adc
out
mov
push
or
and
adc
shl
dec
adc
jne
xchg
fild
lods
(bad)
jp
sbb
aam
push
imul
mov
push
dec
xchg
xlat
mov
movs
sbb
arpl
fxch
pop
dec
sub
cmp
imul
aas
push
cmp
leave
pop
xchg
out
cmovle
ins
test
test
adc
call
adc
scas
push
mov
mov
(bad)
jmp
xchg
cmp
mov
(bad)
(bad)
lods
clc
lods
mov
xchg
mov
cld
sti
inc
adc
xchg
enter
and
and
adc
mov
jmp
xchg
fcmovb
ja
cld
aaa
adc
test
arpl
mov
push
sbb
clc
or
sbb
xor
sub
lahf
test
movs
or
xchg
in
jne
xchg
repnz
sti
sbb
cmp
xchg
and
pushf
out
outs
inc
das
dec
mov
mov
pop
jae
jb
lods
cld
jne
popf
std
add
adc
and
imul
xchg
adc
xor
and
sbb
sar
shl
fstp
or
(bad)
jo
inc
push
xor
add
out
inc
add
loope
push
sti
aam
in
ror
add
out
fcmovne
mov
retf
jae
std
les
sbb
ja
int3
shr
cmp
push
cmp
adc
push
adc
outs
mov
cwde
push
mov
mov
dec
pushf
cmp
shl
or
pop
popa
sub
lods
sub
sbb
jle
clc
dec
outs
adc
nop
and
mov
adc
xchg
lock
fldcw
dec
(bad)
movs
je
mov
popa
pop
jae
add
push
jp
sub
ret
inc
sbb
push
call
repnz
adc
cwde
and
cli
jge
pop
mov
adc
push
xor
sbb
push
and
enter
data16
sbb
adc
pop
sub
fstp
xchg
fcomi
adc
push
dec
fnstcw
jbe
xchg
sub
cli
push
sbb
pop
retf
sub
bound
fdiv
cmp
inc
mov
mov
in
hlt
adc
mov
pop
add
mov
pop
out
dec
mov
cli
dec
xchg
sbb
les
mov
cmp
adc
inc
or
movs
leave
dec
(bad)
js
stc
pop
inc
adc
cmp
sbb
adc
test
push
fwait
mov
fsubr
cmc
dec
leave
add
xchg
mov
push
jns
int3
add
pop
jnp
add
push
stc
adc
push
add
xor
sbb
dec
shr
ins
sar
and
xor
inc
adc
jae
xchg
std
xchg
aam
cmp
mov
jbe
sub
popf
ds
fnstcw
into
sub
inc
jle
cmc
pop
test
test
push
das
std
push
shl
xchg
sti
add
or
jle
adc
xor
push
int
popa
lock
ja
aam
cs
fsub
bnd
adc
add
js
jo
cmp
adc
arpl
dec
icebp
push
cld
add
rcl
push
cmp
push
sub
test
or
je
xor
(bad)
mov
sub
aaa
lods
mov
xlat
adc
test
test
je
bnd
and
sbb
cmps
jbe
es
ins
fucomp
out
push
adc
adc
and
adc
mov
in
test
aad
and
sbb
push
cmp
inc
adc
leave
sub
sbb
es
sbb
xchg
mov
xchg
loope
xor
adc
sbb
mov
dec
ret
xchg
cmp
dec
jg
mov
and
popa
sub
out
sbb
out
mov
pop
(bad)
scas
add
xor
mul
inc
push
mov
loope
mov
xor
mov
pop
push
retf
ins
push
pushf
pop
dec
inc
jmp
mov
cmc
sbb
mov
jecxz
retf
xlat
jae
fcmovb
jecxz
add
sbb
jo
dec
retf
xchg
push
adc
ret
in
hlt
sbb
stos
jb
leave
idiv
mov
fst
sub
sub
push
add
mov
adc
test
fucomip
ins
popa
int3
(bad)
jl
shl
clc
imul
fistp
loop
sbb
inc
arpl
or
jne
or
jmp
jle
adc
fidivr
pop
pop
or
aaa
sbb
loop
xor
or
rcl
inc
cld
jns
pusha
push
leave
stos
int3
adc
push
pop
ins
inc
push
in
xor
adc
add
xor
cs
mov
add
mov
xchg
lahf
push
sar
hlt
cli
adc
int3
paddsb
fcom
stos
adc
inc
mov
daa
cmp
adc
fidiv
push
fst
jg
pushf
lock
xchg
bnd
movs
mov
arpl
cmp
pop
dec
jno
jb
pop
frstor
leave
mov
push
movs
jmp
aas
xchg
adc
mov
sub
sbb
mov
dec
add
adc
cmp
les
or
dec
jo
hlt
mov
push
lods
adc
pop
mov
adc
push
mov
push
inc
jmp
xchg
enter
idiv
xor
(bad)
inc
mov
xchg
loop
pop
js
adc
xlat
dec
imul
adc
jb
or
xchg
iret
adc
jp
sub
outs
outs
clc
sbb
jmp
js
add
or
pop
cli
mov
ds
inc
cmp
xor
jmp
out
(bad)
push
aam
xchg
mov
adc
mov
and
loop
push
mov
mov
je
xor
rcl
outs
(bad)
mov
adc
shl
or
xor
xchg
mov
pop
popa
dec
fs
mov
dec
cmp
inc
sub
mov
adc
jo
nop
sbb
jl
or
push
push
stc
shr
(bad)
rcl
mov
cmps
jne
jmp
pop
adc
xchg
pop
dec
push
ret
adc
lock
or
xchg
mov
popa
(bad)
(bad)
adc
sbb
imul
push
ja
in
or
enter
dec
jge
fs
test
fst
int3
xor
sub
das
int3
push
mov
jmp
xor
imul
enter
test
fwait
mov
jmp
jle
mov
push
cmp
ss
(bad)
cli
jmp
pop
shr
shl
sbb
leave
cmp
loop
xchg
adc
fist
fadd
retf
jmp
rol
test
mov
aas
movs
lahf
fdiv
es
xchg
scas
mov
push
sub
and
pop
cmc
std
push
ret
cmp
sti
cmp
jmp
or
pop
aad
pushf
mov
mov
bnd
inc
retf
mov
aam
inc
adc
in
je
dec
jno
cmc
push
or
es
xchg
imul
sbb
aam
add
dec
sub
lods
jne
int3
mov
or
out
in
pop
into
dec
lock
(bad)
jns
adc
push
inc
and
cs
shl
jmp
fldenv
mov
dec
cmc
push
cmp
adc
pavgb
call
lds
int3
enter
mov
lahf
or
xlat
scas
cli
mov
jb
aad
push
mov
mov
xchg
inc
adc
aas
mov
cmp
in
call
repnz
adc
sbb
je
adc
dec
or
cdq
adc
or
jmp
mov
adc
cmc
cmp
(bad)
rcl
jo
xor
push
cmp
ficomp
cs
pop
mov
sahf
xchg
jae
mov
or
push
ret
lea
sub
pop
das
push
jmp
es
sub
stos
sti
push
jae
jb
aad
pusha
xor
repz
pop
outs
xor
pop
or
fimul
test
sahf
pop
fisttp
jmp
rcr
push
sbb
or
and
(bad)
xlat
imul
jmp
ds
std
cwde
(bad)
jno
or
scas
mov
jge
popa
pop
sbb
adc
sbb
repz
test
and
popf
push
out
jmp
and
adc
sbb
sub
ss
jno
leave
adc
les
xor
push
add
fdiv
or
cld
xchg
jmp
in
mov
out
mov
xor
retf
xor
mov
sbb
sbb
jecxz
ret
jle
adc
jl
pop
retf
ins
adc
cmp
and
jmp
rcl
aaa
out
jl
add
test
cld
cmp
adc
fidivr
adc
aad
mov
adc
daa
loopne
(bad)
cmc
scas
and
xchg
mov
(bad)
xchg
cmp
ret
je
xor
jmp
out
dec
loopne
and
push
push
int
xchg
jne
mov
add
rcl
inc
adc
jecxz
jae
cs
lea
dec
in
and
pop
into
sub
in
pop
dec
inc
shl
jae
mov
adc
jecxz
dec
add
sbb
push
fmul
jmp
fdivp
sub
mov
frstor
inc
cmp
imul
ret
inc
cmps
xchg
or
in
xchg
cwde
mov
ror
movs
and
adc
mov
mov
mov
mov
pop
shl
clc
fst
retf
push
sub
call
jns
ins
fs
ficom
scas
push
jb
inc
or
pop
imul
lods
es
mov
or
adc
pop
add
out
jge
femms
scas
xchg
iret
retf
out
outs
adc
outs
jno
aas
pop
xor
inc
adc
div
outs
mov
test
sbb
rol
frstor
pop
cmps
mov
and
pusha
mov
call
not
cs
fcom
stos
and
pop
push
adc
jbe
or
push
hlt
pop
loopne
and
or
xchg
mov
shr
lods
repz
fcomp
mul
mov
or
jmp
adc
pop
xor
test
push
test
(bad)
cmp
fcomip
(bad)
cli
and
sbb
jp
in
dec
or
cmp
push
xor
jle
or
into
lds
lahf
adc
fmul
in
push
rcr
pushf
sub
push
mov
xor
xchg
jb
mov
dec
pop
and
push
je
cmps
cmp
mov
in
mov
xchg
addps
sbb
mov
or
adc
adc
jnp
ja
dec
xor
adc
pop
sbb
movs
je
dec
inc
outs
icebp
dec
xor
sbb
jle
mov
sbb
fwait
add
int3
and
adc
outs
lods
test
imul
sub
loope
ins
dec
enter
or
and
pop
sbb
or
inc
retf
adc
jnp
call
cwde
jl
adc
xor
push
outs
jmp
sahf
cli
cmps
adc
in
inc
ja
in
out
dec
jb
addr16
les
push
xor
or
or
stos
retf
or
in
adc
xor
fild
add
xchg
sar
jbe
mov
enter
(bad)
cmps
ss
cs
scas
out
lds
jmp
xchg
and
xor
test
sbb
jno
inc
test
cmp
out
das
out
add
js
pop
in
sbb
js
idiv
adc
fisttp
adc
push
xchg
arpl
inc
into
mov
sar
mov
jg
loop
lahf
(bad)
aam
bound
jmp
ja
and
adc
out
dec
xchg
fsub
cli
cld
sbb
dec
ins
and
cmp
push
ins
fld
in
pop
pop
inc
(bad)
adc
repz
bound
mov
mov
sbb
pushf
mov
xor
push
fst
jns
icebp
jmp
xchg
je
pop
les
jnp
vmaxsd
test
pop
pop
repz
dec
movs
mov
cmp
cmp
sbb
cli
jae
call
shr
out
pop
adc
jno
int
mov
or
push
xchg
inc
(bad)
leave
push
sbb
gs
xchg
out
retf
mov
paddusw
dec
mov
mov
jae
adc
sub
jp
lea
push
leave
rol
outs
mov
addr16
sar
fistp
jae
fadd
adc
mov
vmovupd
pop
inc
mov
sbb
adc
jns
pushf
push
out
adc
sbb
and
adc
jg
pop
adc
xor
loop
or
xchg
sub
(bad)
jle
(bad)
xchg
addr16
xchg
push
jge
sub
push
clts
pop
xchg
loope
xor
cmp
rcr
loopne
stos
adc
sti
fild
in
nop
adc
sbb
jbe
mov
cmp
(bad)
(bad)
pop
jo
pop
add
fldenv
sbb
xchg
xor
jnp
add
mov
push
out
stc
aas
mov
inc
test
fisub
arpl
adc
movs
xor
bound
and
loop
or
dec
iret
sub
adc
mov
xchg
arpl
jp
adc
xlat
mov
rcr
fcom
or
adc
xor
jns
jl
pop
and
xlat
pusha
fiadd
pop
push
dec
rcl
inc
or
jl
mov
cmp
out
add
jp
shl
add
icebp
mov
mov
push
and
lock
call
jmp
xchg
cdq
popa
adc
test
fistp
cmp
adc
jp
in
pop
outs
dec
packuswb
adc
test
dec
addr16
pop
or
sub
adc
adc
enter
daa
pop
xchg
adc
cmp
sbb
jns
in
adc
mov
sbb
adc
inc
pusha
inc
and
pop
or
pop
adc
jg
ja
scas
movs
mov
dec
aam
sub
shr
retf
xor
pushf
and
mov
pop
lea
icebp
jmp
rcl
dec
jge
aad
retf
or
aam
sbb
jmp
pop
shr
mov
xchg
jo
adc
push
nop
xchg
in
ja
repz
pop
movs
adc
bound
add
inc
jmp
xor
fcomp
xchg
hlt
popf
xchg
and
sahf
xchg
adc
(bad)
jnp
push
and
gs
daa
aam
sbb
mov
jmp
push
xchg
dec
and
xchg
add
(bad)
and
aas
call
pushf
ins
das
cmp
sbb
sbb
stos
push
les
dec
lods
into
ins
ss
mov
mov
xor
adc
loope
jmp
push
cmp
pop
(bad)
hlt
mov
xor
imul
sbb
stc
imul
fstp
leave
div
cmp
retf
push
enter
cmc
loop
fiadd
cmps
stos
or
mov
int3
nop
test
adc
imul
mov
adc
shr
sub
int3
(bad)
sub
jbe
popa
cmp
xor
xchg
loopne
jle
mov
out
sbb
push
cmp
or
data16
inc
inc
test
mov
mov
inc
movs
jmp
je
loop
jae
ror
push
jp
sahf
loop
into
mov
jecxz
mov
add
add
pop
mov
mov
jbe
mov
push
fdiv
cwde
sub
dec
in
retf
push
xchg
dec
dec
fcomp
xor
adc
push
sub
jmp
ins
xchg
xor
daa
fidiv
ins
or
xlat
xor
icebp
mov
pop
pop
adc
fsubr
sub
cwde
das
xor
outs
pusha
push
add
mov
pop
movs
rcr
loopne
and
inc
outs
pop
test
push
add
test
scas
inc
xchg
adc
mov
jo
gs
mov
pop
sbb
adc
stos
retf
cmc
and
in
pop
pop
push
test
xchg
jns
jle
mov
push
retf
cld
dec
or
push
adc
adc
mov
dec
call
(bad)
fadd
mov
adc
rcr
inc
adc
outs
outs
pop
frstor
adc
inc
dec
cmc
pop
in
sbb
sbb
adc
(bad)
scas
xchg
xchg
pusha
data16
ins
adc
lea
call
shl
aas
sbb
jo
adc
dec
mov
xor
cmps
add
pop
int3
repnz
scas
in
push
and
xor
adc
xchg
push
aaa
mov
sbb
test
xor
mov
not
fistp
lock
push
cld
jp
add
scas
adc
ret
dec
add
cmps
push
in
inc
and
lock
bound
add
lds
dec
or
cld
loop
mov
jl
adc
into
add
xchg
pop
pop
mov
cmc
or
movs
xchg
sahf
stos
and
cli
sub
jecxz
push
and
or
push
ja
pop
(bad)
dec
arpl
xor
test
test
icebp
mov
int
mov
xchg
xor
pop
cli
in
jb
rol
xchg
sbb
cmps
push
in
sbb
ja
dec
icebp
mov
lea
test
cli
sbb
(bad)
jae
fnsave
xchg
or
mov
dec
jge
xor
in
cmp
xchg
push
mov
cwde
and
ss
cmp
rcr
adc
leave
loopne
xor
xchg
mov
enter
xchg
cli
cmps
outs
gs
or
mov
pop
add
ins
sub
jb
adc
movntq
out
(bad)
in
or
hlt
push
fild
loopne
adc
bound
fstp
sbb
in
adc
cmp
jo
fsub
iret
adc
ror
loop
mov
adc
call
jns
repz
lods
mov
ret
data16
xchg
adc
fld
addr16
sbb
mov
sbb
dec
sahf
add
mov
hlt
aaa
ret
(bad)
cwde
mov
daa
das
into
adc
repz
push
loopne
loop
cmp
lods
push
in
ror
add
fiadd
cmp
fst
sbb
add
mov
rcl
jnp
out
sub
aad
in
outs
pop
add
lods
ret
rol
ins
retf
jl
adc
sbb
add
stc
ins
(bad)
lods
std
test
out
daa
das
test
pop
(bad)
not
mov
rcl
(bad)
lods
aam
and
ret
mov
adc
lods
call
pushf
mov
or
mov
push
dec
sbb
sub
fst
or
addr16
in
repz
jl
dec
adc
lods
mov
sub
fisttp
dec
daa
out
in
mov
push
push
pop
or
pop
xchg
xor
adc
bound
jbe
or
pop
pop
scas
dec
inc
lock
inc
(bad)
push
sbb
mov
cdq
and
enter
mov
add
neg
or
pop
jp
imul
iret
ficom
les
jbe
lahf
jge
inc
jmp
je
mov
mov
ss
sbb
and
or
or
int
nop
cwde
jmp
in
push
mov
scas
mov
jmp
sub
xlat
repnz
out
xchg
in
mov
pushf
mov
ds
bound
sti
pop
adc
fisttp
not
jmp
xlat
mov
retfw
dec
adc
jo
cmp
inc
inc
mov
jne
pop
movs
push
add
xchg
ins
data16
in
sub
push
xor
leave
adc
and
cmp
add
in
adc
push
xchg
nop
enter
mov
mov
adc
jl
sahf
cdq
retf
fdivr
xor
cmps
pusha
js
(bad)
sub
mov
xchg
rcr
xor
mov
mov
adc
add
jnp
push
or
sahf
adc
adc
repnz
add
retf
xor
enter
or
or
int3
jnp
loop
imul
fs
test
adc
ins
cmp
sub
cmp
mov
xor
ss
imul
std
movs
(bad)
adc
ds
adc
add
xor
sub
cmp
adc
mov
cmps
xor
dec
push
adc
arpl
mov
adc
fiadd
sbb
inc
das
out
push
outs
inc
adc
mov
adc
mov
push
adc
jp
aaa
xchg
and
es
loop
loope
(bad)
dec
xchg
inc
adc
pusha
sbb
add
adc
mov
dec
cmps
jno
jg
call
or
das
xor
sbb
sti
jmp
push
addr16
nop
sbb
loopne
js
adc
sti
xchg
aas
lahf
mov
cli
in
fldenv
ret
add
dec
and
in
sbb
xor
and
push
and
adc
outs
es
adc
retf
cld
sub
inc
in
mov
xor
les
(bad)
lea
jmp
ins
(bad)
pop
lods
in
imul
je
lds
sub
xchg
inc
ja
aam
jno
and
clc
jae
add
adc
lock
push
push
adc
scas
cli
xor
pop
dec
adc
sbb
push
sbb
out
xor
cld
xor
arpl
push
and
mov
(bad)
movs
sub
pop
test
mov
into
xchg
adc
pop
test
movs
ds
lods
pop
mov
adc
add
ret
ficomp
push
dec
fcmovnb
sbb
cmp
in
mov
repz
(bad)
enter
adc
xor
push
jmp
cli
pop
cli
nop
adc
sub
and
cmp
push
mov
aam
jne
int3
dec
add
call
aad
inc
ror
xor
jb
cmp
or
mov
aam
mul
sbb
jno
mov
or
push
xchg
lods
lea
mov
adc
test
xchg
icebp
xor
xchg
and
lds
xor
add
adc
ja
pop
(bad)
mov
push
retf
out
mov
aam
pop
test
sbb
(bad)
dec
mov
in
int3
add
dec
add
out
cmp
jmp
dec
xor
xchg
mov
cmp
sub
test
cmp
adc
jo
xchg
mul
js
sbb
fwait
test
push
and
adc
push
aam
pop
inc
pop
xchg
div
mov
cmp
inc
jl
cmp
scas
lea
mov
dec
pusha
psubusb
adc
test
sub
in
lahf
inc
jmp
lock
and
or
retf
sbb
cld
shl
jo
pop
jmp
push
in
sub
adc
adc
jmp
test
pop
inc
mov
push
jne
mov
cld
int
push
adc
cmp
ja
add
push
ror
scas
hlt
pop
and
mov
jb
push
adc
adc
xor
cmps
daa
out
adc
sub
fcom
mov
lea
test
inc
cld
mov
jo
adc
mov
sbb
stc
bound
in
xchg
xchg
dec
add
cmp
push
jmp
pop
not
cmovg
jmp
je
sub
sbb
jbe
lods
push
adc
rcr
pop
cmp
jmp
mov
ficom
imul
sbb
imul
and
inc
(bad)
cs
test
xchg
adc
outs
je
cmp
push
addr16
adc
xchg
xchg
pop
sahf
loope
cwde
in
lock
sub
jae
cmc
cdq
adc
repz
rcl
rol
loope
cli
inc
xchg
xchg
in
dec
mov
mov
xor
div
test
adc
push
xchg
daa
outs
mov
inc
fcom
(bad)
sbb
in
enter
mov
cli
inc
push
add
push
lods
in
lds
pcmpeqb
ds
add
jp
mov
add
adc
xlat
jae
xor
pop
fbld
cmp
(bad)
aam
push
pop
add
sbb
xor
addr16
cmps
cmps
out
clc
js
pop
loope
mov
adc
fst
push
push
fmul
ret
jmp
rcr
adc
aas
sar
addr16
mov
cwde
pop
mov
arpl
adc
rcl
gs
push
mov
das
out
cli
pusha
imul
sbb
(bad)
mov
ins
in
inc
cld
out
pop
sbb
outs
sbb
int3
mov
mov
hlt
stos
sub
adc
and
scas
mov
in
push
inc
aas
jmp
mov
repnz
mov
loop
cmp
sub
sbb
adc
inc
imul
arpl
sbb
mov
ret
ins
sub
test
xchg
adc
or
mov
dec
and
adc
cmps
or
cmc
sbb
adc
jge
add
aam
rcl
push
inc
lods
ret
sbb
jmp
imul
push
sahf
icebp
adc
enter
(bad)
adc
mov
sub
call
push
or
imul
or
pop
aad
or
adc
and
enter
mov
daa
out
dec
outs
or
idiv
shl
mov
pop
cmps
ins
xchg
and
movzx
es
cmp
push
inc
dec
pusha
fmul
inc
int
nop
push
adc
jns
inc
cwde
mov
lods
int3
xchg
xchg
mov
in
xchg
xchg
push
ja
pushf
retf
mov
jo
call
popa
mov
cmp
scas
xchg
mov
mov
mov
lods
jmp
aad
pop
cmc
fadd
pushf
pusha
add
ins
movlhps
mov
in
jmp
mov
xchg
fsub
jne
sbb
xchg
xchg
shl
pop
adc
inc
sbb
scas
icebp
push
mov
ror
push
jg
mov
mov
inc
retf
xlat
mov
xor
adc
loope
mov
mov
outs
cmp
inc
daa
push
sti
or
push
cli
push
inc
jp
hlt
xchg
add
addr16
rcl
cwde
(bad)
pop
add
ss
ja
in
sahf
adc
int3
sbb
lods
mov
mov
and
and
sbb
xor
cmp
xchg
xchg
pop
mov
push
loopne
scas
adc
cdq
shr
pop
pop
mov
adc
rcr
sub
inc
sub
xchg
mov
inc
mov
cs
mov
pop
loopne
mov
ja
xchg
test
mov
mov
cld
or
jnp
adc
and
dec
and
aaa
push
lock
ins
xchg
cs
adc
mov
fild
sbb
movs
pop
push
mov
push
div
jns
and
or
dec
xchg
mov
adc
outs
scas
pushf
(bad)
jbe
shl
cs
(bad)
xor
repz
mov
ins
push
bound
int3
push
add
pop
and
lock
jae
cld
lds
fadd
pusha
mov
or
addr16
(bad)
cmp
fild
mov
pop
popa
shr
dec
push
cli
std
lds
je
in
cmps
pusha
adc
dec
retf
push
adc
inc
mov
(bad)
clc
int3
aad
lahf
or
mov
adc
push
out
clc
nop
push
and
mov
sub
adc
scas
call
dec
in
int3
or
in
jmp
xor
and
pop
pop
push
or
cli
setnp
(bad)
dec
aaa
pop
jp
jp
pop
call
and
adc
scas
sbb
lock
out
push
int3
and
adc
in
call
aam
dec
ja
add
add
aaa
push
ins
leave
into
(bad)
std
outs
(bad)
or
rcr
sbb
sti
int3
or
lea
mov
push
xchg
pop
push
pop
scas
(bad)
adc
sub
out
popf
push
or
sub
push
popa
icebp
pop
stc
adc
lea
call
and
and
xchg
cmp
sbb
inc
lods
adc
repz
adc
and
dec
cld
and
mov
mov
adc
jecxz
outs
pop
or
push
in
fcmovnb
adc
inc
jmp
sbb
outs
push
and
lea
hlt
pop
scas
mov
add
int
je
aam
mov
mov
stc
adc
leave
jl
cmp
loopne
daa
mov
outs
add
pop
adc
push
mov
or
adc
nop
ss
jb
fcomp
and
or
xor
jl
(bad)
(bad)
in
nop
xchg
cmps
add
mov
rcl
cmp
inc
add
and
lock
outs
and
xchg
dec
pop
adc
cmp
lods
gs
sub
ins
leave
rcl
xchg
js
into
adc
or
jns
push
movs
call
call
add
frstor
mov
sbb
mov
jnp
aam
dec
adc
add
xor
int3
xor
fisub
sbb
cld
push
pop
xchg
and
arpl
test
leave
lods
mov
movs
push
pop
or
icebp
cdq
fcmovbe
mov
cli
cmp
sti
out
jle
fs
pop
or
push
lahf
or
cmps
fsub
pop
adc
clc
dec
or
dec
adc
push
mov
hlt
mov
adc
test
cli
jmp
out
ja
les
je
mov
xchg
mov
push
sbb
adc
adc
or
adc
mov
mov
xchg
or
repnz
adc
shl
pusha
xor
and
adc
cmc
cs
sbb
dec
jb
bound
idiv
push
xchg
mov
aam
adc
adc
sbb
sub
scas
dec
lahf
aaa
inc
popf
fnsave
jmp
addr16
out
cli
mov
fs
jg
dec
ja
fisttp
fucom
jae
sbb
push
add
xchg
push
jnp
shl
ror
mov
lock
cmps
lea
adc
xor
ror
mov
adc
cli
adc
es
or
mov
jnp
mov
sbb
aad
mov
stos
pop
cmp
std
mov
into
xor
pop
pop
jo
cmp
hlt
in
adc
inc
sub
in
push
adc
xlat
cmp
in
call
in
pop
mov
mov
imul
add
int
pusha
sub
in
mov
data16
mov
adc
push
xor
cmps
push
mov
inc
fcomp
and
test
inc
mov
add
mov
adc
ficomp
scas
adc
push
nop
xor
(bad)
or
cs
pop
jns
inc
xor
push
ins
cmc
pop
test
nop
dec
sbb
jmp
cmp
data16
push
push
xor
adc
push
stos
push
mov
scas
les
cli
and
add
aam
icebp
jo
movq
and
std
pop
cmp
in
xlat
xchg
aas
popf
sbb
mov
sbb
clc
inc
adc
adc
nop
mov
fisttp
mov
add
inc
xor
jl
(bad)
xchg
cmc
mov
gs
stos
xchg
sahf
cdq
jge
lahf
xchg
push
rcl
in
mov
in
and
clc
or
out
pop
mov
adc
xchg
movs
mov
and
imul
and
(bad)
int3
sub
jmp
jl
adc
(bad)
or
jne
add
ins
pop
sbb
inc
arpl
aam
ss
ja
outs
add
daa
ins
push
aad
stc
add
lea
rol
pop
test
bound
xchg
sbb
fs
sub
push
or
pop
imul
mov
loopne
cmp
mov
adc
cdq
sbb
arpl
ss
cmp
and
sbb
push
jb
hlt
cmp
das
mov
dec
mov
push
pop
mov
int
imul
push
rol
les
mov
scas
and
push
movs
and
dec
in
or
mov
imul
dec
cdq
pusha
mov
xor
retf
pop
mov
lods
enter
(bad)
out
retf
inc
sbb
pop
je
imul
cdq
adc
mov
retf
xchg
mov
mov
dec
push
and
adc
jmp
xchg
cmp
fcmovu
sbb
sbb
push
xchg
pop
xchg
push
adc
cmp
out
es
pop
cmp
je
or
jp
push
inc
int3
and
and
retf
push
rcl
xor
cmp
dec
ja
mov
fldcw
rol
sbb
mov
std
div
add
and
cmp
ror
inc
retf
xor
adc
sub
pushf
or
fidiv
in
push
adc
ja
loop
push
pusha
es
sti
push
push
call
call
je
push
dec
push
pop
hlt
enter
js
mov
cli
les
test
je
push
iret
cli
sbb
pop
js
jge
es
dec
rcl
call
arpl
aam
(bad)
enter
inc
sbb
adc
aad
out
call
rcr
jl
push
int3
in
mov
ins
xchg
jle
mov
int3
sbb
or
call
icebp
xor
cmp
mov
loope
sub
lahf
call
adc
pop
test
test
mov
xchg
aam
jnp
div
sahf
dec
cmc
int3
adc
jmp
in
fmul
mov
sbb
adc
jp
cmp
lock
cmp
sbb
adc
jle
movs
in
pop
movs
inc
adc
into
lds
rol
mov
movs
jmp
loope
fadd
pop
(bad)
pop
leave
test
ds
push
xor
nop
cmp
mov
push
loop
and
jmp
add
loope
ins
xchg
cld
mov
inc
fsubrp
cmp
out
clc
adc
mov
adc
pop
push
mov
pop
and
cmp
jnp
sub
out
js
inc
(bad)
xor
pop
loopne
and
jmp
popf
arpl
adc
mov
mov
in
cwde
jbe
lods
inc
ds
inc
inc
enter
test
xchg
jno
xor
mov
imul
push
mov
test
scas
cdq
adc
daa
ret
or
jecxz
sbb
jo
xchg
lods
pop
xchg
dec
jae
xchg
rcr
push
push
dec
add
lods
sbb
or
mov
mov
fisttp
jmp
mov
add
jne
fadd
loopne
ficomp
movs
imul
call
icebp
(bad)
sub
sub
jge
stos
adc
out
or
push
aad
dec
sbb
push
and
iret
popf
push
mov
mov
xchg
std
rol
jle
adc
aaa
ja
fstp
or
mov
shl
stc
fst
adc
sar
jmp
jge
push
adc
lds
lods
xchg
sti
sbb
repnz
ror
repz
pop
add
out
or
fild
jle
mov
int
push
xor
xor
loope
sbb
xchg
stos
sub
pop
or
das
out
les
inc
sbb
xchg
push
ret
jns
out
(bad)
jp
or
mov
pop
std
into
xchg
arpl
push
cdq
hlt
ins
xchg
mov
retf
(bad)
adc
sub
enter
(bad)
cmp
jmp
nop
out
loop
fdivp
mov
sbb
js
je
jns
add
mov
sub
sbb
adc
jg
push
add
daa
push
mov
retf
hlt
inc
add
xor
push
jae
adc
dec
inc
or
daa
lock
and
push
cmp
mov
push
or
adc
out
lock
jne
call
push
cwde
adc
aas
push
daa
movs
lods
ss
jo
jle
adc
inc
int
cmp
jl
cmp
adc
scas
in
mov
and
fnsave
adc
and
iret
jmp
(bad)
out
int3
sub
stos
lahf
mov
inc
add
test
ins
pop
in
push
dec
out
stos
mov
jnp
retf
xchg
inc
sahf
aas
dec
adc
sbb
dec
push
push
adc
mov
pop
adc
push
xor
cmp
push
cmc
adc
ds
ins
lea
jmp
adc
xlat
stos
inc
and
and
or
test
aaa
test
or
xchg
ret
cmp
mov
adc
push
sub
clc
je
in
mov
aam
scas
scas
sbb
cs
inc
mov
push
adc
cmp
fadd
je
dec
cmp
sbb
fisttp
adc
lea
rcr
adc
or
and
dec
mov
fsubr
dec
jo
int3
and
xlat
and
sbb
stos
test
and
lea
pop
je
dec
dec
xchg
pop
xor
push
addr16
push
fcomp
mov
das
jns
or
sub
cmp
ret
adc
mov
mov
inc
mov
jle
(bad)
sub
mov
pop
ror
lods
xchg
jl
leave
clc
and
or
out
xlat
movs
or
mov
cld
xchg
rol
dec
jbe
lods
sub
cmps
mov
or
xor
fs
adc
cmp
and
mov
ret
mov
cmp
adc
es
xlat
push
cmc
popa
adc
imul
xor
loop
push
in
ret
test
fcomp
js
pop
inc
pusha
adc
jle
sub
pop
bound
rol
aaa
cmp
sub
adc
mov
enter
test
into
(bad)
movs
mov
arpl
lods
mov
push
mov
aam
sar
adc
inc
movs
and
adc
pop
mov
inc
push
sbb
into
xlat
push
xor
adc
or
adc
jge
adc
in
xchg
add
int3
repz
push
or
xchg
rcr
push
jle
mov
jmp
jmp
call
call
jl
std
lock
enter
sub
jno
shr
fs
mov
ins
loop
push
or
dec
jmp
pusha
jle
xchg
jno
outs
dec
loop
push
pop
ins
xor
lds
jne
push
mov
or
xchg
or
(bad)
retf
jl
jne
sub
add
mov
call
rcr
add
inc
retf
scas
jae
adc
xchg
xchg
inc
cdq
adc
push
pop
adc
nop
fst
or
adc
mov
mov
sbb
lods
mov
push
(bad)
fstp
ds
cmp
adc
pushf
xchg
lods
rol
loop
sbb
push
jbe
ret
ror
out
adc
or
mov
lahf
stos
addr16
push
cs
adc
inc
xchg
arpl
rcr
js
or
inc
adc
jmp
mov
mov
jecxz
push
test
sub
call
in
push
and
cmp
mov
push
cli
adc
pop
sub
xchg
retf
xor
push
in
pop
inc
sti
push
cmp
mov
cdq
les
pop
adc
add
fld
pop
popa
jmp
mov
(bad)
aaa
adc
cdq
add
jmp
jo
xor
xor
out
xchg
jge
fwait
mov
mov
adc
mov
xchg
hlt
mov
adc
mov
repz
jb
in
pop
in
xchg
mov
scas
loopne
pop
mov
push
arpl
adc
(bad)
loope
movs
aam
and
sub
xor
jns
shl
int
sub
bound
adc
adc
fmul
or
mov
dec
loopne
call
pushf
adc
xchg
scas
mov
xchg
jo
mov
push
mov
xchg
xchg
rcr
cmps
adc
dec
sub
test
push
push
retf
inc
cdq
fistp
lea
add
sbb
cli
pushw
or
loop
movs
dec
xor
inc
or
xchg
outs
mov
in
fdiv
cld
xchg
sahf
out
adc
(bad)
out
sbb
ins
mov
fadd
jg
ror
pop
fst
cmc
pop
or
mov
push
mov
mov
cmp
bound
sbb
je
xchg
mov
jmp
cwde
adc
bnd
addr16
push
cmp
mov
pop
out
gs
jbe
or
fdivrp
lods
and
cld
hlt
adc
loopne
test
adc
shl
dec
jg
fs
in
loopne
push
adc
call
hlt
inc
shl
xlat
sbb
sub
es
sahf
and
adc
mov
mov
jle
mov
mov
push
sub
push
call
test
mov
inc
test
pop
clc
inc
inc
(bad)
out
adc
dec
imul
inc
movs
adc
adc
dec
adc
sti
retf
test
dec
int
mov
and
lock
out
cmp
clc
mov
je
or
aad
inc
das
xchg
add
movs
push
retf
dec
push
or
pop
mov
adc
sti
xchg
shl
xor
fdiv
xchg
lods
test
xchg
aas
loopne
xchg
aam
dec
xchg
inc
test
adc
xchg
adc
adc
pop
dec
test
mov
push
or
(bad)
pop
sbb
mov
jno
push
out
xlat
inc
add
call
test
adc
pop
(bad)
out
daa
test
loop
or
(bad)
push
not
inc
push
imul
pop
iret
cmp
pusha
mov
es
fisttp
sbb
je
(bad)
sbb
xchg
movs
in
mov
dec
push
adc
fwait
xchg
sub
(bad)
ficomp
add
mov
out
les
pop
popa
adc
ret
repnz
mov
jae
mov
dec
call
mov
xor
ja
and
adc
lods
xchg
adc
or
iret
fdivr
dec
fldcw
push
out
adc
les
dec
dec
sub
pop
div
sub
lods
or
test
mov
sub
mov
shl
es
mov
out
imul
and
adc
inc
les
fistp
stc
in
dec
mov
xlat
ins
add
pop
lods
mov
inc
out
push
leave
in
pushf
adc
movs
push
cdq
shr
adc
jecxz
mov
adc
jmp
inc
xor
loop
adc
stc
or
mov
pop
lods
cmp
mov
clc
inc
call
retf
(bad)
movs
push
rcr
adc
ins
mov
and
cmp
push
mov
mov
jns
test
adc
ret
or
mov
lock
and
in
mov
jecxz
add
lods
in
es
stos
mov
adc
movs
pop
xchg
ss
inc
adc
xlat
dec
aas
sbb
stos
adc
es
jb
xchg
cdq
cmp
into
lds
xchg
aaa
push
pop
cmp
outs
int3
aaa
cwde
lock
aam
mov
cmp
inc
adc
ins
xchg
pop
cmp
scas
adc
sub
outs
adc
mov
sbb
shr
mov
mov
mov
xor
adc
(bad)
jp
pusha
xor
sub
je
enter
enter
stos
in
out
push
adc
in
das
cmp
cmp
jb
xchg
adc
out
lds
dec
jno
xor
push
adc
scas
xchg
(bad)
push
adc
or
movs
les
mov
mov
mov
sub
cmp
mov
loopne
retf
(bad)
ds
call
in
dec
jns
or
and
in
jge
gs
ins
out
outs
pop
push
cmp
dec
dec
xchg
sbb
pusha
add
(bad)
xchg
cmps
movs
dec
adc
addr16
pop
dec
sti
fiadd
jmp
jmp
mov
std
mov
mov
mov
pop
call
daa
mov
cmp
sbb
inc
lods
jae
test
mov
in
push
adc
add
or
lock
pop
daa
adc
jl
push
scas
sbb
adc
in
or
adc
sub
dec
daa
push
leave
mov
mov
sbb
ins
fwait
add
mov
adc
add
dec
ins
adc
pop
adc
mov
lahf
dec
mov
xchg
ja
adc
dec
les
adc
int
sbb
push
cli
adc
inc
adc
lds
adc
fstp
out
mov
lahf
outs
outs
adc
and
mov
in
jb
mov
fdivr
je
push
aad
clc
add
je
hlt
xor
and
push
and
sbb
xor
push
aam
imul
adc
mov
cmc
popf
mov
repz
rcl
mov
hlt
test
mov
in
xchg
jp
xlat
jle
fnstcw
adc
push
adc
pusha
cs
add
cli
add
jmp
pop
pusha
sub
adc
packsswb
jb
mov
adc
int
dec
jp
in
test
adc
aam
or
(bad)
iret
fcom
clc
adc
int3
sub
mov
jp
jmp
add
xor
cmps
push
adc
int3
pop
xchg
leave
pusha
fsub
or
adc
shr
push
dec
shr
push
jge
adc
inc
jecxz
mov
(bad)
pop
adc
and
xchg
mov
in
pop
pusha
icebp
out
aas
inc
or
sbb
leave
call
inc
adc
fs
jb
jmp
popf
adc
mov
aaa
inc
gs
xor
xchg
push
je
mov
adc
xchg
cmp
cld
(bad)
mov
push
je
test
push
xor
cmp
bound
hlt
sub
adc
mov
xchg
imul
jmp
mov
adc
loopne
or
out
cli
add
inc
outs
aam
es
aas
jns
or
xchg
adc
xchg
fidivr
sub
sti
sub
or
lock
in
pop
mov
xchg
adc
fwait
jnp
push
fsub
add
and
packuswb
adc
adc
jp
aam
dec
xchg
(bad)
fild
sbb
push
mov
pop
xchg
fdiv
rcl
push
pusha
sbb
rol
or
xor
jmp
cmp
cwde
xchg
push
adc
pop
adc
push
scas
adc
pop
clc
ror
adc
adc
fs
aam
xchg
add
push
call
mov
repz
sbb
daa
loope
aam
mov
(bad)
in
pop
aas
cdq
scas
rol
mov
xlat
mov
inc
push
into
adc
cs
mov
sbb
repz
and
adc
mov
ins
mov
adc
inc
cli
push
adc
cwde
adc
jmp
js
inc
dec
or
jmp
dec
daa
js
sub
push
xor
cwde
adc
cmp
adc
mov
rol
and
inc
sub
lock
push
clc
lahf
mov
out
sbb
fdivr
pop
mov
adc
adc
mov
nop
pop
mov
or
adc
mov
in
div
test
(bad)
aad
jo
nop
sbb
jg
adc
pusha
iret
cmp
jo
pop
add
clc
jnp
push
mov
and
aas
adc
cld
push
std
dec
aad
call
mov
xchg
popa
cmp
ss
jmp
inc
xor
push
adc
adc
inc
sbb
or
sbb
clc
aas
test
stc
loop
dec
adc
add
fs
xor
pop
sbb
ds
enter
dec
push
stos
xor
pop
push
push
aas
sbb
add
mov
(bad)
adc
or
arpl
leave
dec
iret
adc
repnz
dec
sbb
pop
xchg
push
int3
(bad)
jg
pop
inc
xchg
out
cmp
(bad)
lods
xor
or
out
jns
mov
push
lea
mov
xchg
out
adc
shl
outs
not
and
add
mov
call
xchg
xchg
rcl
popa
inc
or
adc
sar
not
sub
sub
scas
add
sbb
shl
aam
xor
adc
js
cmc
mov
popa
stos
adc
repnz
push
movs
(bad)
bound
cld
xor
add
inc
dec
lock
xor
xchg
cmps
adc
adc
add
push
pop
fucom
xor
and
inc
sahf
aaa
inc
mov
and
add
mov
fcomp
in
fstp
mov
dec
and
movs
lods
(bad)
mov
(bad)
rcl
push
add
out
cli
and
mov
lahf
push
adc
and
cwde
xor
cmp
pop
std
mov
into
pop
test
jb
scas
jns
adc
je
jecxz
jmp
adc
scas
xchg
jle
sbb
lods
adc
jl
push
stc
or
jns
arpl
mov
cmp
pop
or
int3
cli
mov
ins
pop
aaa
dec
mov
dec
repz
sbb
inc
fdivr
push
adc
nop
retf
ffree
leave
call
sbb
add
inc
imul
cmp
mov
jb
repz
or
inc
pop
cmp
jne
lock
xchg
sub
pop
popa
cld
jg
mov
sbb
dec
out
sub
adc
or
in
or
or
pop
xor
hlt
pop
dec
es
xchg
adc
inc
xlat
(bad)
jbe
test
xor
lea
sbb
icebp
inc
dec
sbb
cmp
xchg
aaa
inc
fadd
xor
loop
ret
jmp
mov
or
mov
shr
loopne
pop
bound
xor
mov
pushf
nop
popa
inc
jmp
cmp
test
adc
dec
sbb
pop
in
sbb
ret
outs
mov
jnp
(bad)
push
mov
aam
sbb
cmp
fwait
mov
int
pop
ds
mov
jmp
ja
(bad)
mov
xchg
mov
sub
sub
sti
and
(bad)
mov
lea
cmp
hlt
cwde
cmps
or
sbb
adc
ds
test
adc
dec
das
cdq
scas
add
aam
pushf
out
ret
sbb
pop
mov
ins
les
and
jo
mov
iret
sub
cs
(bad)
adc
jns
retf
cdq
into
inc
repnz
not
add
fldcw
out
jmp
cmps
mov
cld
lea
das
mov
or
mov
mov
adc
jecxz
sub
lahf
and
add
adc
add
cmp
mov
lds
fisttp
sub
(bad)
out
aad
sbb
mov
or
jp
loop
bound
mov
outs
cmp
ret
jle
ror
sbb
mov
add
sub
sar
scas
sar
cli
in
push
inc
jae
fwait
adc
fsubr
pop
es
popf
icebp
and
jne
xchg
hlt
cmps
mov
push
ins
jne
xor
inc
mov
jbe
in
push
je
test
sbb
mov
into
iret
sbb
(bad)
nop
(bad)
push
cwde
adc
inc
push
mov
adc
addr16
xchg
ss
sbb
sbb
push
cmps
in
or
enter
sub
adc
sub
jne
mov
fcom
add
hlt
imul
in
adc
and
cmps
mov
pop
add
xchg
jle
sub
aam
and
push
and
jecxz
sbb
mov
mov
cmc
loop
cld
gs
fidivr
jge
aad
xor
push
mov
rcl
daa
adc
bound
pop
lods
scas
or
adc
and
add
mov
inc
ins
sub
in
pop
adc
lahf
or
outs
push
dec
and
pop
pushf
dec
mov
pop
and
in
int3
fist
push
cmp
fnsave
xor
dec
cmps
adc
bnd
jbe
adc
out
icebp
pushf
add
sar
lods
in
call
push
rcl
jecxz
ret
inc
je
ins
sbb
cld
jle
cmc
add
sbb
xchg
out
mov
inc
push
mov
daa
out
jmp
data16
test
adc
cwde
icebp
and
lods
pop
call
shl
jge
fdiv
push
and
mov
adc
pop
xor
pop
pop
loopne
adc
or
cmp
jnp
arpl
jecxz
xchg
ins
adc
hlt
lods
sar
cli
mov
fwait
sbb
adc
push
inc
ins
aam
test
adc
aad
in
xor
cs
adc
dec
jmp
outs
adc
fs
push
adc
sub
ss
push
pop
mov
cmp
enter
or
retf
or
or
push
je
cld
sahf
imul
cld
ror
fs
xchg
pop
dec
daa
or
mov
cmp
shr
push
retf
sub
repz
call
imul
xchg
adc
mov
inc
adc
add
push
sbb
push
cmp
xchg
imul
push
shl
or
adc
mov
outs
adc
cmp
in
int3
in
in
xor
jnp
pop
and
rcr
add
mov
sbb
jae
das
mov
icebp
mov
mov
push
inc
inc
sbb
inc
test
lahf
mov
push
xor
stos
sbb
(bad)
aam
in
dec
mov
or
mov
int3
mov
lds
xor
stc
mov
call
push
data16
or
mov
add
cmps
call
mov
fiadd
mov
or
xchg
adc
retf
add
std
iret
int3
and
pop
mov
sbb
mov
mov
mov
std
fwait
inc
dec
sub
mov
jecxz
(bad)
clc
aad
iret
ficom
add
retf
retf
dec
std
arpl
or
push
mov
int3
mov
out
fs
and
pop
jae
test
push
(bad)
mov
test
pusha
mov
pop
dec
jecxz
aaa
mov
sub
xlat
jae
mov
retf
repz
mov
dec
adc
clc
loope
aad
fisttp
jbe
or
jmp
scas
or
push
push
ins
iret
movs
mov
sub
and
sbb
retf
mov
mov
jmp
lods
in
movs
ror
ins
cld
push
jns
nop
dec
shl
cmc
movs
shl
fadd
aaa
push
scas
aas
shr
pop
dec
stos
or
mov
sbb
ror
out
sbb
mov
add
or
rol
add
ficomp
je
mov
jle
scas
sbb
(bad)
aas
pusha
inc
pop
shl
idiv
pop
dec
push
bound
xor
movs
jno
je
dec
add
add
or
dec
dec
(bad)
add
cmp
aas
cld
movs
push
mov
or
xchg
mov
pop
ja
je
scas
loope
retf
xlat
push
cmp
ret
sahf
jge
je
sahf
popf
push
dec
outs
add
aaa
adc
mov
bound
or
push
arpl
xor
out
scas
stc
mov
sbb
ret
fcmovne
jge
adc
jmp
scas
jp
inc
nop
hlt
sbb
stc
loopne
je
adc
and
loopne
inc
test
adc
push
loop
push
dec
iret
daa
xchg
in
lods
shl
int
ret
aam
cdq
jns
or
xchg
lods
(bad)
aad
sbb
adc
int3
cwde
(bad)
xchg
dec
test
popa
loopne
xchg
cmp
push
(bad)
adc
jo
adc
inc
inc
adc
clc
enter
sub
loop
adc
and
jb
xor
dec
adc
repnz
bound
add
les
jb
cs
cmps
or
inc
jg
sub
outs
mov
movs
dec
push
fcom
inc
cmps
popf
data16
xor
adc
aam
dec
fimul
add
ficom
cmc
(bad)
mov
inc
cwde
fistp
push
push
mov
test
lods
push
pop
cmp
out
nop
movs
test
in
xor
push
or
xor
dec
cmp
inc
adc
mov
lock
pusha
fs
xchg
ins
aaa
aaa
repnz
je
cld
xor
loop
mov
dec
adc
xor
inc
add
aam
mov
add
push
repz
xchg
sbb
pop
mov
sahf
aam
and
fdiv
dec
loop
fiadd
cwde
clc
cdq
int3
cmp
sbb
jl
or
sar
xchg
adc
pop
retf
into
push
ins
scas
in
xchg
dec
and
test
ss
fsub
inc
jns
or
out
outs
xor
or
sbb
fisub
sar
rcr
adc
pop
xchg
aaa
scas
xor
cmp
(bad)
pop
pop
mov
js
fisubr
sbb
sbb
(bad)
ins
fldcw
lds
in
mov
test
push
cld
lds
adc
jbe
cmp
mov
xlat
ret
xor
cli
popf
pop
cmp
xor
(bad)
lock
adc
loope
out
pop
add
cmps
pop
mov
push
adc
xchg
push
add
xchg
sar
pop
retf
or
mov
push
retf
fisttp
xlat
jnp
aas
lahf
hlt
icebp
mov
xlat
cwde
out
push
and
(bad)
das
enter
sbb
cmp
stos
imul
dec
cmp
xchg
mov
push
jg
pusha
sbb
push
loopne
sbb
das
cmp
imul
and
call
pop
push
popf
loopne
adc
scas
neg
ret
mov
lock
mov
jae
dec
xor
test
sbb
aas
scas
lock
mov
ins
test
adc
cmp
mov
xor
lods
loopne
adc
push
popf
retf
mov
inc
add
push
cld
inc
fs
retfw
xchg
push
dec
cmp
movs
push
into
iret
pushf
push
xchg
call
repnz
mov
push
hlt
push
mov
(bad)
jo
mov
(bad)
adc
std
(bad)
ss
mov
in
(bad)
shl
retf
cmp
in
outs
xor
gs
sub
or
inc
les
cwde
test
lock
ror
call
mov
ret
or
and
fistp
movs
pop
push
adc
add
mov
inc
in
mov
inc
push
lods
repnz
sbb
sub
aad
ins
in
outs
sub
sbb
xchg
xor
cmps
stc
into
mov
mov
pop
and
aam
dec
xor
les
mov
fs
mov
cmp
xchg
loope
add
adc
out
in
je
leave
or
neg
cmp
loope
jnp
push
test
mov
out
adc
xchg
sti
je
push
aad
cdq
loope
leave
push
(bad)
adc
scas
test
jae
mov
sub
test
cld
cmp
dec
inc
clc
jne
pop
adc
push
shr
mov
push
cmp
cmp
popa
in
dec
xor
lods
mov
add
mov
xchg
scas
xor
sti
jno
sub
(bad)
ds
sub
enter
nop
sbb
sbb
popa
shr
loopne
mov
dec
xor
loope
sub
adc
std
and
cmp
bound
mov
sub
in
adc
mov
push
and
jmp
cmp
xchg
xchg
sti
xor
icebp
xchg
ror
cli
mov
sahf
loopne
or
adc
jno
ret
push
mov
cld
xchg
hlt
frstor
sbb
or
xchg
adc
test
dec
push
mov
jmp
xchg
lods
loope
inc
sbb
mov
in
pop
cmp
mov
pop
dec
jl
adc
clc
cmp
add
sub
push
test
ficom
jne
fnstsw
fstp
out
cs
fwait
mov
les
repnz
retf
test
cmp
inc
ins
je
add
push
adc
imul
or
push
js
adc
jg
fistp
rol
or
push
jmp
ret
loop
add
in
fisttp
in
add
cmps
dec
inc
sub
inc
stos
sbb
mov
sub
adc
enter
or
jle
or
call
adc
mov
mov
adc
icebp
sub
and
adc
pop
xchg
test
adc
pushf
aas
(bad)
or
call
xchg
jns
cmp
xor
cmp
ins
and
adc
push
cmps
xchg
or
fsubr
mov
xchg
or
ret
adc
in
out
pop
xchg
hlt
pop
add
aam
ret
scas
push
or
mov
test
adc
fidiv
push
add
je
fwait
jbe
xor
scas
pop
mov
inc
sbb
xor
inc
xchg
out
arpl
adc
jge
inc
leave
xor
jl
adc
lock
test
mov
push
mov
cmp
adc
xor
pop
ins
or
mov
scas
mov
mov
xor
sbb
push
mov
inc
push
jno
ins
sti
fstp
mov
mov
sbb
ss
cdq
jnp
sbb
shl
stos
sub
fist
or
add
popf
test
add
fst
(bad)
shl
adc
fs
mov
ins
mov
xor
and
int3
mov
and
mov
adc
mov
or
aas
sbb
cwde
jle
jmp
mov
fadd
pop
les
push
add
xor
js
cmp
aad
out
test
mov
ja
in
cmp
add
push
push
jp
movs
xchg
sub
xchg
push
ss
mov
mov
jl
ret
dec
xchg
xchg
sbb
test
clc
scas
sbb
dec
aam
mov
xchg
leave
dec
adc
int3
push
icebp
mov
sahf
cdq
xchg
mov
jmp
add
add
inc
das
fdivr
xchg
imul
cmps
adc
in
push
xchg
cli
daa
pop
adc
aam
push
pusha
mov
add
dec
sub
adc
mov
fcomi
je
ins
adc
cmp
addr16
adc
jbe
mov
sub
lods
adc
push
or
gs
jp
les
js
pop
mov
or
stos
fs
add
shr
xlat
adc
repz
stos
xor
aam
push
popa
cmps
jmp
pusha
stos
cmp
adc
call
cli
outs
adc
xchg
cmp
sbb
xchg
cs
dec
adc
es
(bad)
mov
lahf
gs
popf
mov
inc
xor
retf
jae
and
out
pop
retf
or
adc
sub
inc
mov
fst
cwde
in
dec
push
push
xor
xchg
add
mov
xor
adc
addr16
push
pop
in
push
imul
mov
prefetchnta
mov
mov
and
repnz
mov
(bad)
scas
(bad)
jmp
pop
cmps
sti
or
dec
call
leave
mov
mov
ds
int3
cmps
inc
adc
test
xchg
cdq
movs
lock
push
adc
xchg
lods
sbb
or
mov
sbb
in
ins
and
sbb
inc
xor
cli
mov
adc
lock
mov
xchg
in
in
jne
xor
and
pushf
adc
rcl
cdq
sbb
or
pop
pop
mov
or
pop
adc
mov
loop
xchg
jmp
pop
cdq
call
adc
or
scas
stc
and
jae
mov
cmp
adc
jae
adc
mov
adc
inc
call
cmp
dec
aam
rcr
inc
fld
cmc
loope
enter
or
adc
sbb
retf
outs
push
sub
and
jle
adc
loope
cld
aas
sbb
out
aam
xchg
into
adc
mov
adc
push
gs
and
iret
adc
bound
in
jns
push
pop
sbb
or
repz
inc
call
pusha
fcomip
bnd
sbb
pushf
stc
jnp
ret
adc
mov
retf
pop
ja
aas
ins
call
pop
call
data16
out
fmul
enter
(bad)
adc
(bad)
addr16
in
rol
push
inc
std
sbb
out
push
xchg
into
jmp
pop
and
(bad)
into
test
jns
fadd
xchg
and
(bad)
cmp
mov
pop
pop
inc
in
xor
in
in
cld
loop
clc
repz
mov
xchg
enter
mov
adc
in
fs
pushf
push
movs
jmp
leave
hlt
adc
imul
call
jns
add
xor
and
push
ror
test
std
pop
or
fnstenv
add
fwait
mov
cli
fistp
adc
aad
pop
dec
fidiv
adc
mov
push
es
sbb
pop
scas
rol
jecxz
loopne
fist
sti
(bad)
int
inc
xlat
pop
push
cmc
movs
fwait
dec
inc
pop
xlat
push
test
or
sub
cmp
outs
test
nop
repnz
xchg
jmp
in
jns
and
cmps
cmps
or
dec
mov
adc
mov
sbb
adc
es
jns
mov
pop
sbb
mov
enter
and
adc
into
sub
test
push
ss
sbb
mov
fs
lock
fs
push
jg
dec
(bad)
mov
xchg
sub
pusha
and
nop
add
ror
aam
test
ss
dec
add
ins
push
adc
dec
daa
(bad)
call
int
sahf
bound
push
adc
push
jecxz
or
sbb
rol
sub
lods
sbb
cmp
lods
call
sti
sahf
(bad)
es
loop
loopne
add
jb
add
dec
adc
dec
mov
idiv
adc
cmp
sub
imul
je
inc
jecxz
sub
xchg
adc
jb
dec
fdiv
cmp
fstp
adc
clc
icebp
std
push
jl
adc
imul
adc
ret
(bad)
(bad)
push
or
sbb
dec
sub
retf
mov
or
mov
xchg
sbb
in
daa
xchg
jne
out
movs
pushf
mov
mov
je
or
mov
addr16
mov
xor
fst
lea
sbb
out
adc
and
iret
mov
aas
mov
in
inc
loopne
ins
ins
mov
xabort
adc
and
inc
mov
mov
ret
sub
movs
xor
jmp
or
(bad)
pop
xchg
or
cmp
jb
leave
xchg
jle
and
mov
adc
push
mov
lea
mov
sbb
jmp
sub
sbb
mov
adc
mov
fsubr
pop
adc
sbb
jg
test
test
test
pop
cmp
enter
push
aad
mov
push
pop
push
ins
sbb
push
xchg
push
inc
les
adc
arpl
mov
dec
iret
adc
inc
pop
mov
and
(bad)
add
cmp
mov
inc
test
jmp
xor
pusha
rcr
inc
shr
inc
adc
cmp
not
add
fstp
(bad)
dec
std
cwde
add
pusha
lock
xor
xchg
mov
fscale
inc
cmc
aam
push
sbb
cmps
cmp
mov
adc
xchg
daa
adc
inc
inc
jmp
lods
add
mov
mov
adc
push
adc
iret
enter
jb
xchg
cwde
ret
jbe
not
out
or
dec
jnp
ret
dec
and
xchg
rcr
leave
pushf
jl
sbb
mov
lods
mov
iret
sbb
push
adc
cmp
or
push
lock
jle
xor
in
arpl
dec
add
int3
cmps
js
adc
and
and
aad
fstp
inc
xor
adc
and
adc
scas
cmps
adc
lds
int3
push
sbb
je
repz
jle
push
push
mov
pop
mov
loope
and
mov
push
xchg
sbb
scas
inc
das
adc
push
loop
mov
jecxz
jmp
in
rcl
es
sahf
outs
adc
jge
fnstsw
dec
mov
ss
jne
cmc
cmps
cld
add
ins
retf
jno
in
mov
bound
jmp
pop
test
or
je
cs
les
push
sbb
pop
xchg
adc
inc
pop
leave
repnz
lods
adc
mov
jne
in
fisub
in
sbb
push
dec
dec
cmp
push
inc
pop
inc
adc
(bad)
xchg
daa
mov
repz
les
call
cli
and
sbb
out
lds
mov
out
cmc
movs
jbe
pop
lods
popf
je
repnz
mov
mov
sbb
cs
js
jge
imul
push
int3
cmp
out
out
pop
sub
or
mov
cs
sbb
shl
pop
je
xchg
test
cmp
or
cmp
dec
pop
push
cmps
inc
mov
or
retf
je
setno
mov
div
in
rep
and
xchg
dec
cld
dec
mov
jg
cli
xchg
or
je
xchg
dec
out
push
aaa
retf
ss
sub
jo
retf
inc
cmp
jnp
mov
xor
jg
sub
out
ficomp
xor
or
pop
sbb
jb
scas
and
cld
out
adc
dec
cwde
ins
cmp
adc
int3
mov
dec
sbb
out
retf
and
push
adc
dec
out
enter
jg
aas
jno
sbb
(bad)
data16
adc
mov
sbb
je
push
dec
in
mov
cmp
xchg
and
mov
inc
push
test
in
adc
aad
movs
xchg
aas
ret
call
xchg
sbb
sub
xchg
(bad)
sub
aam
jle
mov
setp
or
push
pop
adc
ss
psraw
xor
xor
jne
bound
fld
adc
sbb
and
hlt
dec
out
fist
jg
inc
mov
xchg
ror
lods
pusha
xchg
daa
aam
mov
or
loopne
out
dec
imul
in
test
push
inc
gs
int
mov
mov
mov
adc
push
dec
dec
(bad)
mov
inc
cmp
xlat
adc
mov
adc
inc
adc
lods
xchg
and
jo
je
or
clc
and
jp
cmp
mov
ins
movs
xchg
or
adc
push
cmp
sti
fs
pop
retf
in
push
xchg
repnz
sub
lods
mov
pop
les
sbb
push
mov
mov
cmc
popf
icebp
stos
jo
pop
call
call
popa
cs
not
xadd
jg
(bad)
(bad)
popa
nop
shl
add
pop
mov
adc
xchg
mov
aam
mov
mov
jg
push
test
adc
mov
jns
dec
adc
aad
push
js
pop
push
adc
test
jl
call
inc
pop
sub
imul
lock
loopne
dec
mov
nop
pusha
in
and
shl
inc
sbb
dec
add
retf
adc
gs
jb
cmp
rol
jge
xchg
int
push
inc
mov
adc
push
lds
push
loope
int
jg
push
cmp
fcmovnbe
int
mov
push
aad
ss
or
ror
lock
int3
icebp
test
sahf
call
popa
dec
jge
push
out
adc
ret
xchg
xchg
fcom
addr16
add
rcl
push
dec
or
xchg
dec
aas
or
pusha
pop
test
in
stos
bound
das
out
daa
not
pop
xchg
pusha
cs
test
fcomp
jo
outs
std
shl
xor
xchg
in
cwde
or
push
or
sub
adc
push
jge
push
mov
jmp
mov
sar
aam
push
popa
mov
mov
sahf
pop
jbe
pop
pop
cdq
lahf
mov
sub
pushf
sbb
out
xor
cwde
push
daa
int
aad
or
jmp
or
or
dec
push
add
je
mov
sbb
cs
sub
leave
fdivrp
movs
adc
xor
or
adc
inc
add
add
loop
adc
push
push
dec
retf
push
sub
(bad)
cli
out
jbe
push
push
jnp
sbb
in
shl
jl
xchg
sbb
jmp
add
pop
je
and
adc
ret
(bad)
adc
outs
dec
xchg
sti
shl
jle
xchg
push
adc
scas
xor
pop
dec
adc
push
dec
xchg
push
bound
or
mov
jae
mov
add
(bad)
inc
xlat
and
mov
adc
(bad)
ins
jecxz
sbb
cmp
xor
js
bnd
mov
xchg
adc
cwde
shl
in
pop
sbb
fidivr
out
xor
cmp
int3
mov
xor
push
adc
lods
xlat
adc
mov
call
je
xchg
sbb
in
mov
hlt
cdq
mov
out
call
adc
push
lods
out
fimul
xchg
cmp
cwde
enter
fwait
les
or
mov
in
aad
jo
sub
mov
imul
call
iret
mov
test
xchg
adc
pop
mov
mov
out
test
lds
retf
push
js
xor
mov
loopne
rol
jl
das
jmp
(bad)
xchg
mov
jmp
rol
lds
loope
out
je
(bad)
iret
adc
dec
movs
int
lea
pop
add
cmps
in
data16
add
mov
call
sbb
cmps
pusha
inc
enter
scas
cwde
adc
data16
dec
mov
dec
nop
fstp
sbb
cmc
dec
mov
pop
pop
mov
in
inc
sbb
dec
rol
sbb
xchg
gs
adc
mov
leave
or
std
jbe
es
adc
gs
out
jne
out
into
mov
lds
mov
adc
pop
xlat
cmp
test
int3
dec
(bad)
xchg
push
pop
adc
icebp
or
pop
adc
sub
adc
call
adc
cdq
lods
mov
or
rcl
mov
movs
enter
xor
sub
loop
sub
fwait
jmp
jge
mov
add
jecxz
xor
rcl
jae
popf
xchg
pop
(bad)
in
test
add
test
cwde
cmp
ds
jecxz
rol
clc
push
pop
or
out
adc
rcr
push
retf
inc
fldl2e
cld
lods
cmp
and
aam
push
adc
rcl
mov
arpl
daa
mov
xchg
es
lods
adc
add
pop
mov
in
inc
movs
out
adc
shl
adc
push
in
pop
cli
popa
adc
outs
(bad)
inc
inc
jl
sub
out
in
adc
sti
pusha
sub
inc
xchg
pop
fld
adc
xchg
daa
stc
bswap
adc
cwde
xor
sbb
dec
in
mov
test
or
xor
rol
xchg
and
push
arpl
cmps
adc
inc
fmul
adc
mov
jmp
popf
mov
inc
js
adc
xor
fisttp
test
daa
nop
adc
(bad)
fist
mov
cmps
std
cli
sbb
dec
pusha
xchg
aaa
imul
xchg
jmp
cmp
adc
das
in
js
xor
add
xor
sbb
pop
clc
in
addr16
imul
add
repnz
int3
cli
repnz
(bad)
adc
sahf
mov
ja
in
stos
int3
add
jnp
leave
(bad)
imul
sbb
adc
mov
ins
(bad)
out
into
retf
push
shl
call
cmp
pop
mov
call
or
shr
jno
inc
xchg
ins
dec
and
in
ficomp
(bad)
div
push
ja
loopne
out
jl
jmp
push
rol
push
sbb
adc
adc
xchg
in
mov
pop
dec
mov
and
test
aas
dec
ret
popa
movsx
sub
jne
dec
test
stc
addr16
inc
mov
pop
lock
loopne
dec
retf
test
pusha
mov
test
pop
jecxz
retf
frstor
jbe
(bad)
jbe
(bad)
pop
mov
mov
push
jle
push
ins
adc
cwde
fst
cmp
fmul
mov
scas
(bad)
into
stc
and
pop
sbb
arpl
or
ret
cmp
jg
scas
sbb
nop
addr16
dec
loopne
mov
fistp
repz
(bad)
mov
(bad)
cmp
nop
push
repz
pusha
mov
mov
ja
dec
xchg
loop
push
dec
cmps
int3
in
lods
or
push
push
test
je
jae
aam
xchg
scas
add
push
or
cmp
add
cli
push
cdq
sub
mov
xor
pop
les
xchg
xor
dec
in
clc
push
xchg
adc
das
int
fstp
sub
data16
pop
push
inc
stos
aaa
neg
sbb
in
repnz
or
rcl
mov
ret
in
dec
mov
ins
fs
in
xor
test
cmps
and
and
mov
adc
outs
jae
std
ss
fcom
push
ret
push
inc
je
fcom
stc
mov
adc
jo
sub
out
nop
bound
mov
cmp
dec
xchg
add
ret
jns
sub
pop
cmp
jge
out
adc
lock
mov
adc
les
(bad)
or
push
sub
ja
pop
inc
push
jmp
cmp
xor
in
add
(bad)
cmp
jae
popf
push
mov
(bad)
mov
jp
cmovg
and
int3
sbb
jns
cmp
lahf
push
jmp
sbb
xchg
adc
mov
push
dec
fild
outs
into
stos
mov
aaa
out
sbb
retf
mov
lock
fucomi
gs
pop
clc
(bad)
and
int3
gs
inc
pop
adc
das
inc
xchg
inc
hlt
push
xor
inc
cmp
cwde
movs
loopne
mov
dec
push
adc
add
int3
das
pop
(bad)
retf
jecxz
xor
or
mov
not
pushf
outs
cli
aaa
rol
add
adc
mov
sub
(bad)
aam
mul
sub
dec
cmp
jb
sbb
jmp
bound
adc
push
mov
jmp
std
xchg
jae
adc
adc
jmp
push
out
out
shl
aam
xor
(bad)
or
mov
xchg
or
ret
or
movs
adc
cld
mov
sub
aad
adc
popa
or
push
call
arpl
call
div
loop
cli
int3
adc
test
cwde
jle
mov
mov
dec
cld
sbb
lea
aam
xchg
jae
mov
je
jl
sub
sbb
in
dec
cld
jp
loopne
or
(bad)
mov
lods
adc
inc
jmp
mov
push
out
cld
fs
sub
test
xor
xor
in
data16
rol
rcl
jmp
mov
cmp
popa
aam
dec
add
and
sbb
into
sbb
(bad)
adc
jge
enter
jg
inc
in
jmp
adc
repz
cmp
dec
lods
xor
pop
stos
push
repz
add
push
mov
add
jmp
jg
add
mov
pusha
aas
sbb
jne
pop
and
jecxz
retf
shl
mov
int3
mov
xor
add
aas
pusha
addr16
pop
push
cli
shl
popf
jne
imul
fcomp
add
pop
xchg
dec
sbb
add
xchg
mov
call
jae
icebp
sub
xchg
xchg
jne
pop
aad
cmps
sub
in
in
mov
and
mov
icebp
pop
jo
or
rsm
aam
(bad)
and
add
xor
mov
dec
dec
mov
sar
fisub
xchg
push
aam
scas
cld
mov
jae
retf
xchg
rcl
stc
jge
imul
out
rol
call
aas
clc
std
mov
ds
aaa
mov
xchg
mov
sbb
or
jne
sbb
adc
sub
and
inc
or
bsr
movs
jne
call
add
icebp
and
jmp
sar
popa
push
in
sbb
mov
jns
mov
ds
cmp
mov
adc
rol
dec
adc
jmp
repnz
int
and
jbe
inc
sub
inc
ret
mov
ins
mov
scas
add
adc
sub
(bad)
adc
jb
xor
adc
bound
cmps
xlat
lahf
sub
jno
cmp
ss
sub
mov
call
(bad)
pop
jb
adc
mov
scas
imul
mov
ins
adc
add
imul
shl
xchg
push
mov
shl
push
lods
dec
rcl
ds
inc
jge
cmps
nop
xchg
adc
lock
add
leave
sub
adc
and
pop
adc
xor
sub
inc
out
push
iret
pop
mov
push
sahf
adc
sub
mov
add
cmp
xchg
inc
pop
mov
in
adc
scas
adc
pop
in
mov
xor
lods
es
inc
mov
lods
pop
push
mov
mov
cmp
xchg
mov
dec
mov
out
mov
sub
in
mov
jbe
cli
jmp
loope
push
out
mov
out
adc
adc
fst
out
mov
inc
outs
xor
mov
adc
xchg
idiv
mov
sub
or
je
aaa
add
mov
mov
push
hlt
cmp
in
cmp
not
jmp
out
imul
sub
scas
cmp
lds
dec
add
fst
hlt
daa
movs
mov
outs
sbb
mov
pavgw
jno
sub
and
adc
dec
imul
push
cmc
mov
bound
jp
pushf
lods
pop
dec
out
cdq
cmp
pop
in
(bad)
hlt
sbb
test
test
sbb
push
ins
out
(bad)
adc
inc
inc
pop
test
shl
cmp
pop
sbb
push
adc
hlt
fcom
and
addr16
and
adc
mov
scas
mov
jae
leave
mov
in
cmps
sub
ja
add
call
clc
lods
add
push
jp
add
cmp
inc
mov
sbb
jmp
aam
add
sbb
loop
mov
test
pop
sbb
jmp
dec
fbld
add
xor
jns
cmps
adc
cmp
ins
int3
in
sbb
ficomp
xchg
xchg
mov
std
fxch
outs
out
pop
adc
and
mov
(bad)
je
and
push
jp
and
or
ins
clc
fstp
push
jle
mov
gs
les
inc
popf
pop
adc
cmp
addr16
mov
mov
adc
jmp
adc
adc
fisttp
sbb
lock
mov
fbstp
pop
pop
jae
mov
xchg
ja
arpl
retf
in
jmp
cli
dec
aad
je
aas
js
fld
lahf
xlat
popf
aam
inc
pop
adc
inc
vmwrite
shr
mov
in
adc
fwait
pop
add
shr
and
push
xchg
imul
aas
adc
shl
test
push
xchg
int
jns
adc
ret
daa
imul
aaa
jo
sub
sbb
sub
dec
adc
cwde
aas
sub
sar
call
dec
nop
cli
sbb
cmc
pop
xchg
repz
xchg
xor
or
adc
pop
adc
je
mov
and
int
jmp
xchg
leave
rcr
test
sub
mov
inc
and
aaa
adc
mov
adc
enter
loope
cdq
cld
aaa
adc
bound
(bad)
adc
cli
fidiv
arpl
adc
sbb
xor
and
ds
jmp
pop
sbb
jge
je
lock
adc
test
cmc
sbb
int
adc
retf
(bad)
scas
sbb
push
pop
aaa
ficomp
adc
shl
inc
in
xchg
movs
(bad)
clc
dec
in
or
aam
mov
fcomp
adc
retf
hlt
mov
push
sti
xchg
out
repnz
add
push
outs
pop
jns
lods
push
inc
xchg
loope
in
push
mov
cs
iret
dec
gs
pop
jg
cmp
in
lahf
mov
sbb
imul
adc
sub
cld
or
xchg
xchg
push
aam
scas
icebp
sbb
xchg
sbb
adc
add
out
cld
adc
(bad)
retf
das
(bad)
aam
cmp
(bad)
stos
nop
or
in
jl
inc
aaa
aad
adc
hlt
mov
mov
sub
sbb
xor
outs
in
popf
sbb
mov
in
adc
repz
icebp
jne
xor
push
inc
sub
mov
ret
cmp
pop
in
push
push
adc
mov
inc
repz
jmp
jmp
imul
push
enter
scas
repnz
mov
and
repz
loope
mov
sti
repnz
xchg
aas
enter
push
gs
add
ds
adc
cli
int3
out
sbb
push
scas
loop
add
not
imul
ins
fbstp
and
ret
jmp
fdivr
(bad)
ins
mov
or
lods
mov
add
push
pop
arpl
aaa
cmp
lods
xchg
push
jne
pop
xor
rol
sub
cmp
mov
div
sbb
push
jne
hlt
hlt
cwde
rcl
dec
dec
xor
mov
leave
jmp
xchg
pushf
inc
pop
aam
frstor
pop
and
leave
ins
ja
xor
adc
adc
call
pop
or
in
inc
jne
add
dec
push
mov
adc
xchg
outs
test
call
or
std
adc
or
adc
adc
or
jl
movs
lea
aas
or
pop
mov
adc
sbb
pop
repz
aaa
sub
adc
inc
lods
iret
mov
mov
or
mov
cmp
dec
pinsrw
retf
jg
xor
cld
inc
xor
arpl
mov
fmul
or
out
dec
int3
inc
mov
and
in
lahf
sub
sbb
fwait
inc
adc
inc
pop
retf
(bad)
fs
pop
jl
adc
jp
inc
push
adc
ins
lahf
(bad)
push
popa
call
ds
jp
ret
(bad)
adc
cmp
sub
pop
outs
mov
sbb
mov
out
jle
jo
int3
retf
sets
xor
stos
fadd
aam
inc
jmp
sbb
dec
sti
movs
(bad)
jno
cmc
pop
scas
xor
and
fst
fisubr
into
push
scas
call
sbb
and
pop
lods
and
dec
repnz
jae
mov
scas
adc
cmp
out
lods
dec
rcl
xchg
cwde
pop
cmp
adc
sti
xchg
ss
retf
adc
call
and
jge
adc
pop
jb
inc
clc
aam
adc
dec
in
inc
cmp
mov
push
xchg
xchg
nop
or
aam
test
test
(bad)
xchg
jmp
ins
loopne
hlt
movs
and
arpl
xchg
jo
(bad)
sbb
xchg
push
or
test
outs
sbb
(bad)
rcl
adc
lods
aam
jle
in
add
cwde
xor
in
das
push
test
mov
adc
adc
sbb
call
xchg
in
stos
mov
mov
push
(bad)
fs
adc
repnz
ds
mov
xor
xchg
out
nop
and
mov
bound
adc
in
mov
jo
psubq
mov
pop
push
lahf
int
sub
cmp
repz
jp
gs
jmp
jle
in
out
mov
mov
and
pop
and
pop
lods
cmp
adc
pop
gs
adc
pop
outs
iret
jae
xchg
adc
jne
inc
fnstenv
xchg
cdq
inc
test
das
je
sbb
pop
adc
inc
sar
gs
dec
jbe
mov
sub
mov
sub
ja
icebp
iret
hlt
out
daa
sti
jb
icebp
sub
ret
loopne
scas
fs
and
shl
shr
mov
add
dec
fdiv
call
mov
enter
jns
adc
jle
jne
in
loopne
(bad)
dec
std
scas
daa
cmps
(bad)
hlt
mov
stc
sbb
jno
mov
(bad)
in
popa
xor
mov
iret
es
ins
pop
inc
adc
cmp
mov
and
cmp
xor
rcr
xchg
dec
add
lods
mov
mov
or
(bad)
aam
adc
jmp
call
in
cmc
in
mov
xor
out
movs
sbb
mov
dec
retf
xchg
or
lods
and
test
sub
and
in
adc
fidivr
xchg
mov
js
add
ret
pop
and
jecxz
xchg
shr
push
add
out
sbb
adc
add
jmp
loope
xor
xchg
xor
jmp
jne
in
inc
sub
mov
sbb
pop
test
fist
sbb
addr16
jne
adc
xchg
stos
sub
dec
sbb
das
add
vpaddusw
out
mov
cdq
mov
mov
mov
es
push
clc
push
int
leave
xchg
jns
adc
repnz
sub
imul
lds
mov
(bad)
aam
and
adc
mov
popf
hlt
push
mov
add
adc
cwde
es
mov
sub
jg
mov
jge
adc
dec
imul
aam
pop
adc
or
ficom
jp
jae
data16
xchg
push
xor
inc
pop
(bad)
adc
jecxz
or
fbld
(bad)
adc
cli
inc
mov
retf
jae
inc
mov
xchg
mov
mov
faddp
aaa
(bad)
adc
ret
xor
xlat
jno
idiv
sub
cmp
mov
inc
or
adc
ret
outs
cs
(bad)
mov
push
sub
jmp
jle
push
push
scas
adc
call
adc
popa
idiv
mov
add
sbb
pop
int
repz
ins
(bad)
aam
dec
adc
clc
add
aas
mov
jp
stc
popf
iret
popf
sbb
xchg
adc
sar
(bad)
daa
pusha
mov
fnstcw
popa
adc
mov
adc
adc
pop
(bad)
lock
jg
adc
push
pusha
add
xchg
jae
adc
pop
and
dec
mov
adc
mov
cli
sub
sbb
daa
rcl
mov
movs
sbb
mov
adc
jecxz
inc
jg
pop
stos
inc
adc
jns
adc
int3
ror
cs
sub
mov
pop
xchg
xchg
cmp
jl
sub
and
mov
rcl
aaa
xor
mov
push
or
sub
hlt
cli
mov
push
dec
mov
xchg
test
adc
sbb
in
adc
push
and
and
sahf
ins
es
leave
aam
adc
dec
pop
jne
jmp
add
in
imul
inc
stos
jle
xchg
cmp
xchg
add
(bad)
cmc
push
cmps
push
adc
sbb
sub
adc
xor
(bad)
sbb
mov
das
mov
ret
ja
mov
add
lea
sbb
repz
das
or
jp
inc
inc
add
mov
cmp
sbb
xchg
add
je
into
int3
jg
sbb
aad
pop
lods
popa
jne
loop
adc
mov
add
mov
aad
nop
add
das
out
push
inc
fs
aad
inc
cwde
or
inc
mov
int3
stc
push
push
call
out
pop
je
movs
sbb
adc
xchg
ins
adc
sar
cmp
mov
pop
das
xchg
arpl
ins
aas
add
test
add
and
sbb
mov
cmp
cmps
pop
pop
push
mov
mov
push
inc
push
sti
cmp
in
or
mov
into
cmp
jl
cdq
adc
mov
mov
adc
mov
inc
dec
mov
mov
sbb
pop
mov
xchg
pop
pop
or
movs
scas
sti
je
out
or
sahf
jbe
xchg
adc
adc
add
nop
adc
lods
lea
mov
(bad)
es
pusha
inc
add
cmc
xor
xchg
adc
popf
jmp
imul
sub
push
xchg
and
loope
sbb
sbb
(bad)
shl
cmp
adc
pushf
popf
mov
(bad)
aas
mov
ror
mov
xchg
ds
adc
outs
pop
ret
loop
adc
jmp
add
jno
fs
cmp
cli
stc
adc
int3
je
pop
add
rcr
sub
push
pop
fcomp
pop
push
fcmovbe
ret
and
jl
adc
sub
push
mov
jae
add
xchg
inc
loop
fidiv
sub
or
mov
imul
paddd
jbe
and
retf
hlt
cld
mov
ja
jp
add
test
jb
adc
in
or
shl
sbb
arpl
sub
jg
adc
retf
cwde
aas
adc
dec
push
sahf
movs
xlat
push
movs
lods
xor
loopne
jg
push
int3
lock
fcmovbe
add
xchg
mov
sbb
lods
fisub
mov
adc
(bad)
sar
inc
jp
push
cmp
mov
adc
mov
clc
in
inc
adc
add
inc
dec
push
test
js
mov
fcom
loope
add
adc
push
mov
cmc
cmp
(bad)
or
cmc
test
push
xchg
jge
dec
imul
mov
fsub
pusha
push
add
adc
push
jmp
jp
inc
mov
shr
pop
shl
imul
jmp
dec
fisubr
test
mov
xchg
loop
and
retf
sbb
pop
(bad)
push
cld
push
ret
aam
jl
or
adc
call
adc
push
fnstcw
jg
dec
lds
cdq
retf
lods
fsubr
mov
push
cli
pop
push
retf
mov
jle
jo
shl
std
pop
in
data16
pop
cmp
adc
push
inc
push
je
fwait
adc
mov
push
or
xchg
lock
sub
jnp
movs
xor
cwde
sbb
dec
dec
mov
inc
mov
or
out
retf
adc
les
dec
adc
test
jl
lahf
and
scas
cmp
lahf
pop
fist
adc
fstp
pop
scas
pop
aad
or
sar
mov
icebp
dec
dec
in
xor
in
mov
shl
(bad)
and
cmp
je
in
ror
inc
je
in
dec
ins
and
paddsw
or
(bad)
push
adc
add
enter
hlt
and
retf
jmp
add
sahf
jno
cmp
and
mov
dec
dec
adc
mov
in
push
lods
inc
jo
xor
(bad)
mov
dec
xor
xor
adc
idiv
outs
fwait
repz
out
pop
xchg
cmps
mov
mov
test
xchg
enter
jl
ja
adc
ret
lods
(bad)
fistp
pop
adc
cmps
nop
xchg
mov
sub
sahf
sti
pop
mov
mov
sbb
add
lds
push
mov
in
ror
pop
out
addr16
pop
aad
xchg
aas
add
dec
in
in
xchg
adc
int3
jl
adc
jne
std
div
sbb
dec
xor
loope
push
movs
outs
adc
jmp
loop
adc
mov
sbb
sbb
mov
idiv
jnp
cdq
jge
adc
rcr
inc
cmp
mov
and
dec
mov
(bad)
dec
fs
cmc
cmps
inc
adc
jmp
cdq
sbb
fcom
xlat
adc
imul
stos
cmp
lock
ficom
pushf
mov
push
call
jo
push
cmp
lods
call
mov
stc
sbb
sbb
pop
ja
jae
sub
mov
jns
push
adc
pop
add
aad
sbb
ficom
cmp
mov
pop
hlt
dec
mov
rcl
mov
or
and
popa
cmps
xor
jnp
outs
xor
and
adc
fist
mov
cmp
jl
in
clc
or
in
push
cs
scas
add
les
xchg
add
lahf
out
mov
inc
xchg
aaa
in
out
test
cs
iret
out
loopne
mov
cmp
mov
outs
das
jmp
push
sahf
in
imul
out
in
ja
sbb
sub
adc
aas
push
pop
mov
(bad)
hlt
nop
mov
fwait
ins
call
adc
(bad)
add
scas
inc
or
jo
daa
icebp
(bad)
sub
xchg
jne
retf
sbb
int3
adc
in
and
popf
les
sbb
cld
push
fs
sbb
bound
lods
cmp
je
mov
popa
enter
out
(bad)
aam
outs
push
cmp
in
cmc
retf
ror
fistp
sbb
movs
jge
arpl
and
imul
fistp
adc
or
test
mov
or
push
das
inc
cmp
imul
stos
je
int3
and
in
aad
scas
scas
loop
xchg
sub
scas
add
enter
jno
mov
sub
cdq
les
mov
fwait
dec
rcl
in
bound
xor
lahf
jl
add
rcl
fld
adc
jmp
pop
pop
jbe
and
xchg
jecxz
fsubrp
pop
mov
adc
xor
icebp
sbb
pusha
rcl
lea
cmp
rcr
dec
stc
jae
or
mov
aam
loop
adc
inc
add
(bad)
daa
pop
jmp
sbb
ins
cmps
aad
push
push
mov
mov
cmp
add
jb
xor
sub
jge
mov
aam
out
inc
adc
ret
mov
ds
popa
and
xchg
jnp
mov
add
aas
test
xchg
inc
aam
mov
pushf
inc
adc
fst
(bad)
cmp
push
arpl
adc
mov
sbb
inc
or
push
pop
(bad)
out
mov
mov
pop
imul
dec
inc
idiv
inc
xlat
call
or
inc
adc
hlt
cdq
and
aaa
call
jp
inc
cmps
push
ds
and
mov
ins
mov
push
jle
int3
sbb
adc
fwait
add
(bad)
out
sbb
adc
cmp
adc
adc
daa
loop
sahf
jg
cdq
sbb
aam
jp
rcl
jb
mov
or
and
push
push
lds
cmps
lock
push
dec
idiv
in
(bad)
mov
mov
out
jmp
mov
mov
xor
cmp
push
lahf
fcmovne
pop
adc
add
sbb
pop
call
std
retf
adc
dec
add
inc
xor
push
push
mov
fs
sbb
mov
(bad)
inc
or
ror
mov
loopne
stos
out
mov
cmp
call
iret
or
mov
or
out
add
ret
xchg
enter
stos
out
mov
push
cmps
retf
cli
mov
cs
movs
ds
je
and
jnp
out
popa
dec
retf
jecxz
sahf
inc
call
mov
add
je
pop
rcr
aas
in
sub
fs
adc
test
das
adc
std
stos
call
sbb
out
pop
fcom
sub
sti
(bad)
repnz
out
jbe
jl
jnp
add
adc
test
lods
mov
test
cmovp
addr16
mov
adc
adc
inc
(bad)
push
fisub
push
fst
outs
cdq
adc
or
mov
cmp
das
xchg
fdivr
repnz
mov
or
adc
repnz
pop
outs
mov
mov
ja
test
jle
les
pop
fsub
sbb
cdq
jae
inc
cld
int3
push
dec
adc
loop
sub
rol
adc
lock
xor
ret
ss
les
jae
add
out
add
adc
or
int
sub
pop
adc
enter
or
ret
pop
adc
and
adc
mov
pop
xchg
cli
adc
dec
scas
xchg
xchg
jl
fidivr
and
mov
enter
or
sub
ss
jne
sbb
pop
scas
xor
mov
in
sbb
sbb
and
adc
jge
dec
rcl
or
add
jae
push
imul
bound
ret
mov
adc
cmp
js
addr16
call
fmul
inc
xchg
mov
call
fs
jbe
lods
push
pop
std
adc
push
add
adc
push
fld
xchg
jle
repnz
leave
add
call
neg
fs
sub
ins
data16
sub
into
or
pop
sbb
jge
add
jo
sbb
sti
and
addr16
shl
shl
push
fadd
xor
add
add
xlat
and
retf
push
fcomp
fwait
sbb
inc
pop
outs
pop
cmps
sub
and
push
sar
pop
out
rcl
or
mov
pop
jbe
jo
push
outs
pop
adc
and
sbb
or
adc
adc
add
jns
int3
adc
stos
push
adc
arpl
lods
and
push
dec
aad
leave
adc
xchg
add
or
pushf
loop
push
jle
push
shr
out
xlat
pushf
xor
mov
and
mov
in
sub
int3
test
adc
mov
sbb
aam
push
inc
rcr
mov
or
nop
fstp
jno
stos
aam
les
mov
adc
mov
xchg
jmp
lock
fstp
mov
(bad)
(bad)
loopne
test
pop
in
adc
or
in
mov
mov
xchg
cdq
outs
adc
js
push
push
popf
cmp
dec
movs
xchg
inc
in
imul
pop
cmp
or
stos
adc
jae
inc
es
adc
(bad)
hlt
out
aas
inc
fistp
xchg
dec
imul
(bad)
pop
ret
jbe
push
es
aam
pop
test
xor
test
sub
les
dec
arpl
xor
std
xchg
adc
jmp
sub
adc
je
(bad)
rcr
add
pop
pop
cmps
std
jp
xor
sahf
xchg
push
ins
xor
xor
ins
cs
in
push
fsub
cmp
adc
mov
adc
movs
sti
shl
out
xlat
push
dec
out
adc
push
add
cmp
pop
jmp
ins
sbb
sbb
ror
pop
adc
lods
pop
test
add
and
adc
push
icebp
push
add
mov
mov
xchg
mov
cmp
int3
(bad)
out
mov
inc
loopne
fiadd
push
mov
pop
shl
xchg
aas
pop
jnp
jae
adc
fld
adc
cmp
xchg
fisttp
movs
inc
and
jecxz
sub
or
retf
adc
je
pop
ins
sbb
and
or
jecxz
inc
movs
jl
neg
pop
adc
rol
scas
dec
hlt
leave
stos
mov
cmp
ins
fistp
inc
icebp
call
jg
pop
adc
fild
rcr
jmp
jmp
ret
adc
xlat
cmp
in
in
mov
aad
pop
inc
pop
test
mov
retf
inc
mov
jmp
movs
xchg
ret
imul
push
iret
xchg
push
jns
lahf
movs
mov
aaa
jl
mov
add
mov
adc
mov
ror
retf
jno
push
sub
popf
test
adc
outs
push
loope
pop
sbb
xor
or
adc
push
inc
stos
or
dec
mov
cmp
das
jnp
aam
inc
lea
pop
jo
inc
leave
xor
arpl
push
cmps
mov
dec
outs
dec
pop
sbb
loope
(bad)
lock
or
xor
add
loop
outs
gs
xchg
dec
mov
das
mov
push
xchg
jbe
adc
repnz
pop
xor
add
mov
aad
jo
adc
mov
call
xor
push
cmp
cmps
outs
fdivr
sub
fbld
mov
add
(bad)
add
mov
mov
or
stc
jp
fnop
xchg
mov
add
cli
cs
movs
test
and
(bad)
lods
jmp
xchg
loop
dec
jo
and
inc
adc
jb
mov
pop
xor
add
sub
or
pop
les
adc
bswap
jmp
lods
je
sbb
sti
les
xchg
stc
sub
push
mov
push
inc
adc
div
push
add
add
std
test
mov
adc
pusha
pop
cmp
pop
call
call
or
or
out
adc
jg
and
adc
sub
adc
gs
sbb
xor
push
adc
not
aam
jne
bound
xchg
ds
xor
inc
adc
iret
pop
nop
push
jge
mov
retf
and
sbb
adc
lea
push
div
loop
adc
push
jecxz
std
push
dec
push
xlat
adc
nop
inc
cmps
sar
adc
in
add
js
fcmovne
jecxz
adc
xor
cmps
mov
mov
arpl
ins
adc
adc
(bad)
xchg
fs
into
xor
cmp
inc
lock
push
push
aad
mov
adc
jmp
add
and
lahf
xchg
mov
mov
out
sti
arpl
adc
cmps
cs
test
adc
xchg
std
adc
(bad)
jmp
call
cmp
jbe
ja
adc
out
dec
cld
jnp
outs
nop
jmp
fldenv
fdiv
mov
in
in
cmp
and
fist
adc
jmp
mov
inc
pop
adc
or
shl
mov
fmul
je
jmp
aad
es
mov
adc
jbe
(bad)
rcr
test
clc
pusha
mov
sahf
jmp
loope
rcl
enter
xor
xchg
push
retf
scas
adc
test
adc
sbb
push
add
xchg
pop
jno
ins
repnz
js
cmp
jnp
(bad)
in
fmul
cmps
and
fcmovu
adc
out
movs
sub
outs
pop
add
retf
inc
cmp
divps
sbb
xor
aam
jmp
lods
fadd
push
fs
jge
inc
mov
in
cli
sbb
sar
aam
into
pusha
adc
mov
or
sub
add
in
(bad)
sbb
adc
jle
rep
xor
ret
jbe
or
adc
adc
mov
xor
out
adc
sbb
jmp
fcom
lds
inc
or
arpl
rol
pop
adc
pop
in
sbb
cmp
jmp
and
bnd
pusha
dec
sbb
pop
cmp
loopne
adc
jns
sub
mov
add
pop
ss
mov
aam
add
mov
push
jp
jl
add
or
mov
add
repnz
adc
mov
sbb
ret
inc
es
ficom
push
outs
jb
ds
clc
lea
xchg
cmc
push
add
dec
xchg
adc
pushf
aas
fist
push
cmp
shr
push
mov
or
addr16
xlat
cmp
pusha
int
and
cmp
sub
jmp
adc
pop
and
sbb
pop
daa
xchg
xchg
xlat
adc
jb
out
icebp
cmp
lods
adc
sub
xchg
adc
and
lock
jo
outs
stos
push
mov
icebp
popa
jns
mov
retf
and
int3
idiv
ins
cld
mov
out
or
add
std
pushf
dec
std
(bad)
out
lock
repz
pop
inc
push
mov
rcl
cmps
xchg
je
or
call
add
xchg
out
sub
out
sbb
(bad)
shl
int3
fnstcw
out
cwde
cdq
fdiv
arpl
sub
adc
push
dec
outs
mov
dec
adc
mov
js
sub
in
ds
jne
add
mov
adc
stos
ret
inc
and
adc
scas
out
dec
push
ins
adc
imul
or
adc
out
mov
adc
arpl
addr16
adc
mov
mov
jl
sbb
adc
jnp
push
outs
adc
cmp
aaa
cld
jmp
out
dec
sti
imul
adc
xor
test
in
int3
dec
xor
adc
pusha
hlt
lea
adc
sar
bound
(bad)
sti
gs
sub
adc
add
fldcw
aaa
add
xchg
jae
adc
push
in
pop
and
sbb
xchg
(bad)
push
xor
pop
adc
loop
jge
mov
sbb
jmp
push
or
mov
mov
dec
sbb
fiadd
into
nop
js
in
adc
movs
lods
data16
push
int
es
xchg
ss
out
test
mov
addr16
lods
xchg
adc
mov
repz
test
dec
sbb
cld
movups
outs
int
add
xor
aas
xchg
jne
lahf
in
cmp
mov
scas
inc
outs
jne
loope
xchg
xor
outs
aad
cwde
sbb
outs
and
adc
iret
les
int
jl
inc
push
mov
sbb
gs
mov
jmp
sub
jmp
ins
dec
cmp
pushf
add
int3
aaa
mov
int
adc
pop
out
daa
sub
out
les
cdq
in
int3
mov
jmp
and
std
shl
je
add
int3
out
fistp
(bad)
xchg
xchg
cmp
inc
cmp
mov
lods
(bad)
mov
(bad)
mov
xlat
jl
xor
jnp
mov
(bad)
push
cmp
sub
xchg
and
mov
out
test
dec
mov
pop
adc
test
jbe
test
(bad)
mov
repz
stos
jbe
sbb
adc
mov
repz
cmps
data16
dec
sub
cld
push
inc
test
and
adc
fdivr
out
popf
aam
dec
inc
push
fwait
inc
pop
xchg
(bad)
in
sub
sbb
(bad)
xchg
adc
pushw
loopne
xchg
dec
cmp
cdq
rcl
jl
adc
mov
xchg
idiv
in
mov
mov
out
stc
mov
ss
and
and
int3
sub
out
jne
rol
shl
into
mov
pop
sub
mov
sbb
neg
add
ins
dec
push
xor
jne
jmp
in
cmc
sbb
inc
pop
imul
push
adc
test
sbb
out
cmp
push
push
jmp
or
xlat
cdq
sti
lds
je
cwde
jmp
sbb
imul
(bad)
popa
xor
dec
aad
arpl
std
adc
xchg
fs
pusha
sbb
mov
sbb
adc
add
inc
out
xchg
add
xchg
test
or
adc
jmp
xchg
dec
pop
xchg
cmps
sub
add
test
shl
mov
scas
adc
or
repz
push
int
adc
jge
jns
popa
xor
stos
cli
aam
dec
push
xor
pop
adc
imul
cli
mov
push
fs
arpl
cdq
xchg
fwait
dec
mov
pop
ds
ja
mov
pop
add
popf
inc
jge
test
ror
xor
jmp
fwait
adc
in
adc
aas
mov
xor
gs
rcl
or
call
push
neg
int3
xchg
sti
lock
jl
(bad)
cmps
adc
es
sub
shl
mov
push
push
imul
push
iret
in
or
fist
retf
mov
mov
mov
dec
and
iret
adc
adc
lods
sub
aaa
mov
ins
leave
pop
out
sub
adc
clc
adc
dec
fnstenv
ss
adc
dec
xor
shr
xor
daa
iret
sbb
mov
fnstenv
leave
test
jno
xchg
jg
cmps
int
xor
movs
ins
push
mov
adc
or
xchg
cmp
sbb
push
cld
mov
sbb
neg
adc
popf
mov
enter
das
sbb
in
jbe
pop
dec
fst
adc
imul
cmp
(bad)
fcmovb
daa
fdiv
int3
out
adc
movs
pop
inc
out
push
inc
pop
dec
pop
xor
loopne
push
pop
cmp
bound
sub
jbe
sub
cvtdq2ps
or
sub
push
aas
or
adc
cmp
leave
cmp
mov
mov
and
add
iret
or
into
enter
jp
mov
fwait
adc
int
add
iret
sahf
jno
dec
pop
call
ss
dec
adc
adc
dec
pop
xchg
sub
cmp
adc
sbb
mov
(bad)
and
sbb
addr16
pop
mov
jp
push
cmp
cmp
cmp
xchg
inc
xor
loope
test
or
lods
push
cmp
lock
ds
and
imul
movs
icebp
ret
push
jb
pop
xlat
ja
adc
jg
into
call
dec
inc
push
mov
pop
adc
mov
push
mov
mov
adc
mov
fsub
adc
xor
jg
jmp
(bad)
sbb
addr16
mov
movs
sbb
dec
lods
int3
jae
test
sub
cld
mov
adc
and
jecxz
out
and
paddd
mov
mov
cld
sbb
pushf
ret
or
in
neg
jmp
xchg
xchg
neg
inc
(bad)
fs
sbb
stos
ss
fiadd
inc
pop
pop
fwait
imul
cmps
ret
mov
stos
sub
aaa
cmc
push
ficom
push
add
mov
repnz
hlt
je
div
cmp
xlat
jmp
test
mov
das
adc
gs
or
mov
or
xchg
lods
sub
mov
in
test
xchg
fisub
xor
cmp
mov
cld
or
outs
adc
and
xor
cmp
xchg
push
or
adc
sbb
cmp
mov
(bad)
shl
sti
aam
or
jmp
leave
shr
cli
outs
mov
xchg
or
out
adc
fiadd
int3
sub
pushf
(bad)
push
inc
clc
test
(bad)
scas
adc
mov
and
outs
shl
daa
xchg
pop
mov
dec
loopne
jl
mov
mov
adc
or
sbb
push
add
shl
xchg
and
pop
ins
sti
imul
aad
xchg
das
jecxz
in
ds
loope
enter
or
sub
in
mov
pop
in
jp
hlt
pop
mov
sbb
cmp
inc
cmp
mov
sub
fcmovnb
or
adc
mov
inc
hlt
xor
es
adc
imul
inc
and
fcom
aam
dec
stc
adc
add
lods
leave
aaa
sbb
stos
test
in
sub
loopne
or
adc
add
adc
jae
mov
rcl
test
(bad)
jl
repz
xchg
mov
test
mul
cmc
imul
jmp
push
push
sub
iret
pop
hlt
sub
cwde
xor
mov
rol
call
popa
sbb
mov
mov
cmp
mov
jg
pop
shl
pop
or
or
adc
jmp
jo
adc
sub
and
addr16
mov
out
ds
lock
sbb
add
adc
pop
dec
sbb
jnp
add
xchg
adc
rcr
les
pusha
xchg
inc
(bad)
and
adc
das
rcl
mov
aam
pop
pop
retf
dec
xor
mov
adc
scas
iret
pop
dec
psrlq
arpl
xor
ds
adc
pop
neg
xor
test
xlat
adc
fld
jae
cmps
pop
adc
enter
xchg
loopne
adc
out
mov
push
(bad)
popa
sbb
jmp
int3
jne
xchg
iret
lods
(bad)
push
lds
fstp
add
rcr
out
jne
add
dec
mov
shr
pop
int3
xor
icebp
sbb
ins
sbb
dec
sti
or
pushf
pop
sbb
scas
push
xchg
(bad)
adc
mov
xchg
imul
popf
sbb
retf
mov
adc
xor
sti
adc
cld
int3
inc
lds
je
push
aaa
mov
pop
mov
push
sbb
retf
jg
sbb
cmp
aam
cmp
sahf
(bad)
stc
adc
pop
cwde
aaa
add
imul
fisttp
mov
and
adc
cmc
imul
xchg
dec
xor
test
adc
out
fadd
xlat
sti
stc
pusha
aam
int
or
jmp
sbb
std
cdq
pop
push
xchg
in
in
mov
adc
pop
xor
adc
std
dec
lods
ins
cmps
test
add
ret
retf
mov
sbb
nop
std
int3
pop
test
lods
mov
sbb
jg
xor
xchg
mov
int3
dec
push
arpl
in
jb
(bad)
sbb
cmp
push
aad
mov
stos
data16
mov
neg
adc
inc
mov
cmp
mov
xchg
in
jb
pop
and
stos
push
adc
push
inc
ss
shl
aad
retf
or
out
stos
and
mov
inc
adc
lock
out
out
sahf
out
mov
cwde
jle
xchg
jge
in
(bad)
repz
int3
push
ds
adc
div
jecxz
xchg
(bad)
sub
jmp
out
and
fs
add
popa
xchg
out
pop
sar
enter
pusha
add
shl
adc
xor
outs
neg
out
imul
loop
cs
arpl
leave
lahf
jge
add
fisubr
mov
lds
das
out
mov
jecxz
adc
bound
repnz
out
aad
(bad)
push
in
jl
retf
xchg
inc
in
mov
mov
test
or
xchg
cs
jne
adc
lahf
jl
nop
xchg
adc
mov
hlt
adc
test
jg
pop
add
ret
fiadd
push
stos
les
setp
dec
lods
mov
bound
cmp
mov
stc
inc
sbb
aam
add
les
daa
adc
mov
cdq
out
adc
test
or
and
sub
icebp
les
xchg
add
pop
add
(bad)
push
mov
fdiv
jno
cmp
ror
in
add
mov
int3
(bad)
dec
pop
adc
add
cld
sub
xchg
lods
(bad)
mov
push
dec
xor
or
aam
sub
xlat
jge
pop
movs
adc
cmps
iret
cmps
movs
jle
add
out
mov
xchg
in
adc
ins
rcl
add
xor
mov
daa
aam
jae
sbb
pop
xor
inc
das
sbb
jmp
pushf
ins
aad
adc
stos
ret
pushf
hlt
cs
push
jl
stc
fist
adc
pop
pusha
mov
(bad)
push
adc
ret
push
ins
sub
add
aaa
in
push
add
pop
inc
xor
adc
and
mov
push
mul
clc
dec
add
xchg
inc
mov
aad
and
jno
fist
push
cmps
mov
test
mov
adc
xor
frstor
pusha
sbb
mov
adc
pop
bound
call
pop
xchg
xchg
adc
mov
jbe
movs
sub
xchg
out
cmps
pop
lahf
pushf
jl
shl
sbb
pop
xchg
inc
jns
lock
push
adc
ret
jmp
out
fwait
lds
adc
hlt
(bad)
mov
cld
adc
mov
shr
sbb
cmp
mov
mov
mov
cmp
push
pushf
icebp
or
adc
data16
xchg
mov
adc
mov
js
add
repnz
mov
ins
(bad)
pop
outs
sbb
aas
add
inc
sub
xchg
jnp
sbb
neg
je
enter
fist
loopne
add
imul
lods
mov
xchg
adc
sub
xor
cmp
xchg
dec
(bad)
ror
jno
mov
dec
adc
lods
loopne
fwait
cmc
dec
out
adc
out
xor
pop
adc
add
mov
or
rcl
jo
sbb
adc
xor
cdq
jmp
pop
dec
das
fyl2xp1
sar
and
pop
xor
adc
add
cli
pop
sub
pushf
outs
pushf
push
adc
push
ficom
lods
out
or
mov
lahf
adc
fisub
hlt
sti
or
push
js
sub
xor
les
psubusb
repz
xchg
cld
xchg
push
and
(bad)
xor
(bad)
jl
sbb
test
xchg
pop
ins
mov
sbb
je
das
dec
cmp
and
push
outs
adc
mul
ret
sub
inc
adc
cdq
sti
adc
out
adc
xchg
cmp
sbb
sbb
inc
inc
in
je
mov
mov
push
push
fmul
adc
mov
out
sbb
push
(bad)
scas
aam
xchg
mov
mov
loope
outs
or
(bad)
mov
mov
push
in
hlt
fisttp
cmps
mov
data16
xor
and
jle
add
mov
jge
ror
mov
je
lods
adc
cwde
inc
jae
(bad)
adc
adc
pop
aas
dec
into
fld
rcr
adc
(bad)
sub
xor
jg
push
inc
sub
data16
adc
jmp
sbb
push
push
add
das
xchg
push
inc
xchg
cs
inc
(bad)
adc
out
mov
hlt
jns
fwait
or
push
movs
and
xor
aas
in
and
test
sbb
mov
mov
push
adc
mov
jle
jne
inc
lods
dec
jo
cmp
mov
sbb
push
movs
aam
mov
and
xchg
pop
mov
fisubr
push
mov
retf
push
popa
jl
push
push
fcom
and
(bad)
popf
mov
or
stos
ins
adc
sar
out
xchg
in
xchg
pop
push
(bad)
mov
fsubr
in
arpl
mov
ins
jmp
js
adc
(bad)
pop
jl
loop
pop
popf
push
out
jecxz
adc
dec
mov
pop
aaa
shl
into
xchg
fidivr
sbb
jecxz
push
pop
jg
sub
adc
sbb
fld
mov
sti
stos
mov
(bad)
jae
push
in
cdq
cmps
lods
es
mov
push
add
sbb
xlat
mov
fdiv
not
fwait
jne
(bad)
out
adc
stos
into
jbe
mov
mov
mov
(bad)
sbb
ror
cmp
les
loopne
adc
mov
add
add
xchg
pop
pop
int3
adc
push
push
scas
stos
xor
std
cmps
call
enter
pop
dec
stos
or
das
mov
lods
jns
mov
xchg
adc
pop
mov
jl
and
mov
(bad)
jmp
inc
lea
imul
adc
cmp
retf
aas
sub
push
cdq
(bad)
pop
adc
ss
ins
add
adc
lods
jo
xor
add
loop
bound
mov
nop
shr
add
sahf
dec
adc
(bad)
sti
dec
movs
adc
loopne
into
addr16
arpl
(bad)
aam
xchg
loop
mov
test
cmp
xchg
cs
lea
dec
and
inc
sbb
pop
or
pop
movs
fidivr
aam
test
xchg
mov
test
push
adc
js
xchg
stos
ds
sbb
pop
xchg
rcr
mov
adc
repnz
ja
xchg
adc
and
push
pop
ret
push
mov
ins
pushf
ret
adc
cwde
mov
in
(bad)
rcr
leave
xchg
add
in
pusha
fcom
jnp
fs
les
retf
cld
cmp
ins
push
sbb
cmp
dec
dec
bnd
es
push
cmc
xchg
pop
mov
xor
ficom
ret
or
in
xor
fwait
adc
mov
sbb
xchg
xchg
jne
pop
or
and
or
dec
add
call
pop
jge
dec
stos
inc
jl
aam
sahf
retf
in
in
cmps
leave
out
adc
dec
adc
aam
jno
retf
push
xor
sbb
mov
and
mov
adc
cmps
or
jb
lea
scas
cmp
sbb
out
out
add
cwde
rcl
xor
fidivr
adc
sahf
aas
leave
(bad)
xchg
cmc
imul
push
repz
je
mov
mov
mov
in
jge
mov
push
and
xor
adc
aas
cmp
sti
mov
push
dec
jp
in
push
push
pop
mov
pop
sub
pop
sbb
sbb
lds
jl
jl
adc
mov
pop
imul
inc
xchg
and
bound
pusha
xor
cld
cmp
jb
stc
bound
scas
fsub
mov
enter
out
sbb
dec
hlt
in
ins
js
in
sar
iret
movs
adc
outs
cmp
adc
inc
push
jnp
mov
jae
in
mov
adc
or
inc
aas
xlat
enter
inc
push
xchg
mov
pop
pop
cs
dec
add
int3
mov
jmp
sbb
adc
fst
push
or
mov
sbb
xchg
adc
and
sbb
push
add
mov
shr
(bad)
pop
movs
push
jo
stos
ffreep
sbb
in
sbb
and
adc
(bad)
adc
mov
push
mov
push
out
adc
and
jl
add
jae
or
outs
mov
xor
mov
adc
(bad)
and
or
cld
das
pop
retf
cmps
jns
xor
sbb
mov
push
movs
and
and
repnz
ins
icebp
ret
aas
int3
mov
mul
xor
add
imul
out
fsubp
jb
pop
sbb
in
sti
cmp
ins
int3
mov
rcl
add
retf
ds
cwde
cmp
sbb
mov
adc
jle
test
adc
mov
repnz
rol
ja
ror
inc
mov
(bad)
or
mov
fidivr
add
push
(bad)
loopne
and
cld
fstp
dec
jne
sbb
mov
ins
lods
dec
jo
out
xor
retf
aad
in
repnz
and
scas
loope
mov
or
pushf
adc
jmp
add
fistp
mov
xor
(bad)
retf
test
cmp
and
fs
xchg
cmp
cmp
lods
sbb
int3
cmc
pop
aam
xchg
test
fs
inc
addr16
sbb
rcl
in
dec
aad
mov
inc
and
and
adc
mov
jns
push
arpl
sbb
mov
mov
lock
push
jl
xor
nop
add
mov
pop
test
cmp
mov
inc
shl
addr16
sbb
fwait
adc
dec
mov
test
add
test
or
cdq
cmp
adc
xor
shl
int3
imul
cmp
and
xor
pop
jl
jg
and
test
int3
loop
pop
adc
push
dec
out
pop
(bad)
sti
inc
mov
retf
popa
rcl
cdq
daa
jmp
jno
(bad)
sbb
jo
pop
dec
in
sbb
add
bound
dec
push
mov
add
ja
push
adc
arpl
fcmovne
adc
mov
and
xlat
xchg
sbb
fwait
out
adc
and
popf
inc
repnz
or
jg
pusha
xchg
push
ret
mov
mov
out
or
fwait
in
out
stc
adc
pop
loop
lock
adc
ins
cmc
arpl
push
inc
add
imul
sbb
loope
test
mov
fild
arpl
ja
adc
out
inc
push
push
unpcklps
out
mov
adc
inc
xor
jg
adc
int
in
ucomiss
fadd
shl
sti
lock
cmc
outs
mov
add
in
not
adc
mov
push
sbb
aas
es
sbb
ror
xchg
adc
repz
clc
icebp
adc
ss
jnp
leave
or
sbb
push
inc
in
(bad)
push
fmul
cli
adc
pop
sub
jmp
jmp
or
mov
daa
out
lods
mov
mov
loopne
in
in
dec
arpl
cmp
fnstsw
adc
inc
and
adc
push
les
mov
fwait
mov
arpl
stos
sbb
outs
or
xor
sbb
xor
rcr
fs
adc
mov
popf
dec
mov
test
adc
jp
std
lds
fistp
neg
mov
mov
mov
aas
(bad)
sbb
jge
outs
movs
or
xlat
fidivr
cmc
mov
pusha
daa
xor
adc
sbb
mov
adc
sahf
pop
inc
retf
call
into
mov
xor
mov
inc
push
lods
(bad)
xchg
pushf
scas
mov
(bad)
xor
icebp
mov
fimul
mov
std
jmp
cs
jp
ins
push
adc
and
xchg
(bad)
mov
mov
ss
mov
cmp
stc
pop
call
mov
gs
xor
vunpcklps
mov
lock
cmp
sub
mov
adc
pushf
loopne
add
cmps
out
fadd
ds
ds
ins
push
mov
mov
(bad)
in
mov
fnstsw
xchg
pop
ret
sbb
jns
dec
outs
jp
adc
cmc
push
pusha
in
add
mov
and
jl
lods
data16
cmps
cmp
(bad)
xchg
xor
sbb
mov
or
jg
out
adc
sub
pop
jg
out
mov
adc
dec
pop
int3
xor
dec
pop
sub
mov
sbb
mov
add
movs
or
ds
inc
mov
fistp
cdq
retf
and
in
jmp
ror
push
sub
lods
repz
sbb
fst
and
cmps
int3
cmp
scas
test
das
mov
out
cmp
int3
mov
mov
sub
fmulp
daa
inc
jo
ret
(bad)
adc
jne
add
mov
cmp
out
enter
push
fimul
mov
les
int3
adc
dec
inc
call
in
and
shl
and
in
pop
jo
push
adc
pop
cmp
jp
ins
inc
and
or
push
test
inc
dec
aad
pop
ja
mov
data16
rcl
or
psllq
mov
add
sahf
pop
and
jl
mov
xchg
adc
call
or
mov
adc
fwait
daa
adc
pop
jg
in
and
xor
and
adc
mov
jnp
int
outs
jl
retf
cmp
pop
add
ins
movs
leave
or
retf
inc
in
in
mov
dec
xchg
jmp
lock
push
lods
xlat
push
popa
sub
into
jo
adc
pop
stos
cld
popf
dec
and
and
adc
push
(bad)
movs
call
test
mov
sbb
shl
icebp
in
jmp
scas
in
in
nop
sbb
(bad)
jns
aam
imul
bound
pop
and
push
inc
out
adc
cmps
das
jno
dec
outs
movs
dec
stc
jl
xchg
je
ret
xchg
loop
retf
out
inc
adc
xchg
mov
mov
loope
add
fwait
repz
movs
sbb
cdq
cmps
enter
mov
adc
(bad)
pop
cli
xchg
pop
sti
test
mov
jmp
cmp
ss
scas
lahf
or
mov
inc
pushf
or
dec
adc
sub
mov
adc
push
xchg
hlt
pushf
xor
xor
mov
aaa
out
int3
jmp
mov
push
(bad)
fcom
inc
nop
fwait
adc
xchg
js
mov
mov
pop
inc
mov
in
addr16
cmpps
je
popf
gs
fadd
ds
outs
inc
aaa
push
xchg
jg
cmp
aad
or
cmp
inc
xchg
lods
loope
retf
leave
fimul
mov
in
lahf
arpl
adc
adc
push
movs
adc
repz
test
pusha
int
shl
jne
sbb
popa
cli
sub
je
scas
icebp
loopne
adc
lock
call
add
je
mov
sub
jecxz
adc
call
adc
mov
mov
clc
into
mov
adc
push
je
in
aas
out
push
pop
mov
xchg
inc
call
les
xor
push
repz
int
mov
ins
rol
cdq
nop
jmp
cmp
xchg
adc
outs
lods
xchg
dec
push
repnz
inc
and
fld
adc
xchg
inc
lods
je
sub
xchg
sbb
or
dec
outs
je
cmc
fs
es
retf
xchg
es
retf
mov
adc
movs
ins
test
clc
and
add
cld
dec
mov
push
sbb
leave
dec
adc
sub
les
pop
repnz
mov
xchg
fdivr
dec
pusha
adc
add
pop
in
in
xchg
repz
fs
fldenv
cmp
ss
(bad)
(bad)
dec
push
push
cmp
adc
add
sub
fisubr
xlat
call
popa
test
mov
push
jae
lods
not
inc
xchg
aas
movs
and
test
(bad)
adc
aaa
cmp
sahf
movs
and
pop
xchg
inc
out
push
in
dec
sub
add
out
fistp
mov
sbb
adc
(bad)
mov
imul
ins
test
add
push
pop
push
in
or
cmp
int3
mov
lea
clc
aam
adc
pop
or
pop
aaa
add
jns
dec
push
mov
add
loop
lahf
pop
dec
adc
loopne
xor
mov
xchg
mov
jge
mov
adc
xor
enter
fcom
or
xor
test
cmp
or
sbb
push
push
inc
pop
or
and
xchg
xor
out
aam
adc
and
xchg
data16
cs
adc
adc
lahf
adc
dec
pop
add
adc
stc
push
pop
jmp
retf
repz
jne
adc
ins
adc
sbb
sub
test
mov
in
adc
push
sub
mov
out
out
inc
push
and
test
fcomp
les
pop
xor
lds
adc
jae
mov
adc
aaa
nop
pop
jl
ret
mov
inc
imul
jge
pushf
jbe
mov
pop
lds
sub
mov
nop
mov
adc
aam
(bad)
out
and
jmp
test
sbb
aaa
ret
lods
fs
in
data16
dec
add
outs
aad
arpl
adc
xchg
into
add
ins
ror
adc
mov
sti
jp
sub
xchg
dec
imul
in
xor
pop
fs
imul
xchg
push
dec
add
jle
add
sbb
push
dec
icebp
aam
pop
imul
pusha
repnz
sbb
push
fisttp
fmul
(bad)
inc
cdq
int3
fst
(bad)
jecxz
adc
mov
jle
sub
adc
push
mov
out
adc
mov
das
ror
push
xor
and
loop
ror
adc
fbld
test
xchg
adc
cmc
repz
jne
dec
loope
mov
sbb
pop
addr16
mov
mov
xor
xor
or
add
jo
mov
mov
retf
rol
inc
inc
mov
adc
adc
dec
xlat
inc
fild
fdivrp
push
sbb
lock
cmp
aad
jle
mov
dec
mov
int3
and
stos
pop
adc
jp
mov
push
mov
aad
ror
pop
and
or
fld
(bad)
(bad)
aad
pushf
inc
push
xor
fiadd
sbb
aad
fst
out
push
retf
dec
in
ja
adc
test
pop
mov
xchg
pop
dec
call
xchg
fldenv
in
dec
call
sbb
jno
mov
push
fsubr
std
mov
in
push
dec
call
fwait
push
stos
cdq
retf
js
cmp
les
jbe
cs
mov
adc
mov
jmp
and
call
adc
scas
mov
push
and
xor
(bad)
push
leave
retf
or
in
mov
scas
xchg
dec
and
dec
sbb
aam
das
je
retf
sahf
mov
and
hlt
imul
cmp
retf
bound
push
sbb
and
xchg
fimul
stos
pop
out
mov
xchg
ret
pushf
push
sbb
retf
neg
sbb
int3
cmc
lock
mov
sbb
loope
and
aam
out
shl
jle
out
inc
inc
mov
aam
je
ins
mov
int3
dec
es
mov
cld
lock
and
in
adc
popa
mov
sub
cmp
rcl
int3
out
cmp
add
in
(bad)
call
lock
lods
sbb
je
pop
arpl
fsub
outs
ficom
rol
icebp
fdivr
pop
mov
iret
mov
enter
ds
jl
das
loopne
jmp
push
adc
push
call
pop
stc
iret
xor
adc
pop
and
retf
dec
push
adc
mov
fst
sti
push
mov
sbb
mov
gs
cmps
mov
test
adc
xchg
shl
pop
cmp
lock
leave
(bad)
(bad)
sub
test
retf
cmps
add
ret
rcl
loop
sbb
cli
adc
and
cmp
adc
adc
loop
adc
imul
mov
in
cli
stos
xchg
push
sub
and
ins
push
retf
lods
jge
adc
inc
pop
fwait
cmp
cli
push
sub
imul
mov
mov
fnsave
sbb
cmp
jae
sub
aad
test
xor
std
fldcw
mov
pop
add
aaa
add
cmp
sbb
mov
jo
inc
or
pop
lock
int3
jecxz
xchg
sub
push
mov
jge
jae
loopne
addr16
and
cmc
outs
neg
adc
add
sub
lds
retf
in
adc
adc
sahf
leave
adc
in
add
mov
imul
rcl
jnp
cmp
js
push
es
and
push
xchg
sbb
pop
test
arpl
push
push
cli
pop
lods
mov
xor
add
pop
xchg
jmp
mov
scas
jl
add
push
push
push
mov
ins
fstp
out
ins
sub
ins
pusha
jae
(bad)
xchg
outs
inc
daa
pop
and
mov
test
mov
dec
das
bound
jbe
in
mov
(bad)
mov
inc
sub
rol
cwde
jmp
push
ins
and
dec
jne
cld
mov
mov
adc
iret
fcomp
xlat
in
dec
xchg
mov
dec
mov
or
neg
jmp
cmp
adc
mov
sub
rcl
test
ja
sbb
cwde
scas
mov
jnp
call
xor
in
adc
xchg
push
ss
adc
mov
jmp
cmp
pop
sub
mov
(bad)
push
adc
mov
sbb
lock
adc
sahf
push
cmp
pop
stos
xor
cmps
cmp
mov
jbe
stos
xchg
push
rcr
adc
sbb
aas
push
(bad)
in
ins
imul
int
scas
paddd
adc
outs
push
push
data16
loopne
adc
sbb
or
(bad)
adc
and
push
cmp
out
lock
adc
icebp
cmps
mov
inc
daa
jb
retf
jp
or
stos
clc
(bad)
push
jg
dec
mov
sar
or
sahf
test
push
ds
loopne
jbe
lock
test
jmp
pop
mov
cs
(bad)
mov
adc
shl
ins
repnz
fldenv
mov
adc
or
cmc
nop
mov
mov
shr
mov
xchg
xchg
jp
daa
dec
jbe
aas
push
bound
push
push
mov
push
pop
pop
cmc
cmp
and
scas
cmp
mov
movs
xchg
jmp
mov
in
retf
repnz
and
clc
xchg
mov
pushf
dec
sbb
movs
ret
dec
cmps
ret
push
adc
popf
dec
ja
xor
mov
mov
movs
jecxz
(bad)
inc
(bad)
lods
test
adc
sub
or
add
jne
sub
fcom
add
mov
cmp
push
jne
je
push
mov
arpl
add
adc
dec
sbb
xlat
loopne
add
pop
push
(bad)
mov
es
fadd
into
adc
jnp
outs
pop
add
stos
xchg
call
hlt
popa
(bad)
lea
jmp
(bad)
sub
xchg
rol
mov
loopne
xchg
sbb
les
stos
mov
jns
mov
mov
adc
dec
xchg
or
xchg
mov
mov
or
je
dec
(bad)
bound
ficomp
and
xchg
push
inc
leave
mov
icebp
popa
in
mov
and
outs
retf
xchg
loope
xchg
(bad)
(bad)
adc
int3
inc
cmps
sbb
retf
mov
fcomp
je
and
jmp
call
jmp
cli
mov
sahf
mov
push
dec
and
dec
das
ss
push
ret
in
cmps
pop
retf
push
imul
retf
in
push
dec
cld
imul
jmp
ss
lods
js
xlat
mov
aam
fstp
call
clc
sbb
dec
ret
add
inc
dec
(bad)
fsubr
pop
(bad)
mov
stc
ins
jp
pop
jb
xor
lock
ror
inc
ins
aam
daa
call
inc
mov
push
push
ficom
xor
jmp
xchg
push
js
and
rcr
pop
sti
repz
mov
xor
mov
popf
sbb
sahf
mov
(bad)
add
clc
test
ror
std
jecxz
(bad)
sbb
call
inc
dec
add
sbb
pop
inc
loopne
enter
outs
adc
ret
adc
in
fsub
xchg
adc
jo
mov
pop
add
adc
sti
in
shr
sbb
call
push
dec
sbb
adc
xor
dec
and
add
int3
push
repnz
adc
rol
jno
aaa
fwait
mov
add
xchg
sbb
repnz
jg
xchg
test
shl
push
fild
xchg
hlt
jae
adc
push
cs
clc
or
cmps
xchg
adc
mov
dec
xchg
repnz
sbb
adc
mov
cld
fadd
mov
jne
adc
std
ja
cmps
mov
xchg
sbb
aad
in
aaa
loope
repz
adc
cmp
add
into
aad
mov
adc
pop
adc
mov
pop
push
icebp
xor
adc
stos
add
(bad)
sbb
cmp
clc
jne
adc
pop
xor
pop
(bad)
outs
adc
pop
mov
inc
adc
mov
jl
ja
sub
dec
loope
das
imul
sub
or
adc
xlat
pop
mov
xor
dec
rol
fist
sbb
aam
push
mov
cmps
sub
and
mov
xor
add
jae
sbb
mov
es
cmp
inc
inc
rcl
pop
push
dec
scas
inc
inc
test
sub
pop
js
ins
adc
push
out
inc
jecxz
cdq
adc
ds
neg
jnp
inc
out
iret
ins
mov
add
or
adc
adc
xchg
xchg
fsub
mov
sub
or
out
sub
xor
(bad)
dec
mov
retf
adc
sbb
pop
and
shl
jp
pop
aaa
in
inc
inc
jno
sbb
fldcw
(bad)
sbb
add
sahf
fild
cmp
aad
fisub
xchg
call
test
xor
push
mov
and
dec
xor
std
fwait
or
cmp
inc
shr
fisubr
call
(bad)
xchg
dec
xchg
adc
je
push
dec
add
inc
(bad)
lods
ins
and
mov
retf
sbb
xchg
int
mov
jge
and
mov
xchg
cmp
bound
rcl
outs
mov
popa
cld
cmp
pop
hlt
cmp
inc
mov
fmul
bound
in
jle
cld
push
push
imul
add
leave
jne
ins
lods
(bad)
sbb
mov
shl
add
icebp
cs
adc
clc
add
mov
rcr
or
pop
cs
cmp
adc
jp
clc
mov
pop
mov
cmp
mov
das
xor
inc
std
inc
adc
imul
cmps
mov
jge
pop
push
mov
pop
lods
jno
xchg
adc
xchg
in
ins
push
sub
arpl
jmp
push
lds
iret
cwde
arpl
inc
jle
pop
sbb
cmc
adc
outs
mov
shl
mov
sahf
movs
cmps
icebp
inc
mov
sbb
(bad)
(bad)
test
rcr
xor
pop
push
dec
cld
jmp
add
mov
enter
sub
(bad)
pop
sub
mov
push
jle
lds
xchg
dec
pop
imul
ror
xor
push
je
sub
addr16
adc
xchg
push
xchg
enter
inc
sahf
adc
imul
cmp
inc
jns
jp
mov
mov
loop
mov
mov
adc
adc
and
ficomp
sub
(bad)
adc
lods
ret
cmp
test
push
adc
call
jmp
cmps
xchg
into
mov
adc
mov
mov
and
or
and
aam
inc
xchg
movs
in
xchg
sti
add
(bad)
call
push
and
xor
repz
call
add
jg
mov
mov
mov
es
mov
dec
dec
fst
loope
lods
es
jnp
pop
sbb
sub
pop
push
loop
add
in
repz
call
fidivr
fst
in
or
div
mov
sbb
sub
cs
dec
mov
aaa
in
es
out
rcl
mov
imul
xor
popa
enter
adc
inc
retf
mov
fs
das
inc
push
aam
stc
push
jne
lock
je
sub
shld
mov
(bad)
jmp
jg
pop
adc
(bad)
hlt
je
jg
test
sbb
das
ins
ret
push
add
xcrypt-cbc
cmps
adc
sub
or
jmp
stos
dec
pop
mov
mov
retf
sub
sti
int3
jmp
xor
inc
inc
ret
jge
push
ret
idiv
inc
call
sbb
je
add
aad
xchg
push
rcl
in
dec
ror
push
jb
ret
es
adc
xchg
aaa
jne
xchg
cmp
pop
jg
and
inc
and
xchg
jmp
xchg
inc
push
pop
dec
add
adc
daa
dec
dec
mov
mov
jae
push
adc
mov
jmp
sub
out
add
ficomp
adc
dec
out
cmp
fbld
xchg
repnz
retf
outs
xor
sti
cwde
cmc
fcmove
dec
int3
mov
leave
xchg
into
and
test
in
test
shl
fsub
nop
ror
dec
movs
addr16
or
icebp
lahf
in
inc
pop
jmpw
into
dec
retf
mov
fxtract
movs
xchg
cli
repz
iret
add
xor
jmp
clc
retf
inc
das
or
ret
in
test
dec
inc
xchg
sbb
in
outs
cmps
cld
and
jbe
mov
sub
dec
repnz
inc
add
retf
in
aaa
loopne
pop
xor
lods
fimul
or
fsub
xchg
(bad)
xchg
je
or
sbb
mov
hlt
aaa
and
jecxz
inc
inc
adc
pop
or
sub
loop
mov
cmp
adc
push
daa
xor
xchg
gs
jbe
sbb
mov
fist
pop
in
outs
mov
xchg
popa
addr16
enter
adc
addr16
xchg
mov
cmp
sub
and
xchg
test
rol
mov
in
and
cdq
sbb
(bad)
lock
adc
and
loopne
jecxz
cld
adc
fs
push
movs
sub
inc
rcr
dec
fsub
data16
sub
cdq
and
cs
adc
scas
cmp
sub
push
dec
in
mov
adc
dec
jecxz
or
clc
arpl
int3
sub
aad
jno
dec
cwde
mov
(bad)
in
into
push
push
adc
call
add
adc
rcl
pop
fild
loopne
cmps
data16
adc
xchg
out
cmp
xchg
xor
and
mov
jl
xor
and
test
push
push
cld
jbe
pop
pop
sar
pop
je
into
nop
fild
mov
xor
out
inc
fst
sub
cmp
push
mov
(bad)
movs
scas
push
es
dec
or
dec
inc
rol
adc
pop
pop
cmp
adc
scas
cmps
unpcklps
sbb
adc
gs
iret
loopne
rol
xlat
sbb
sbb
adc
cmp
cwde
cmp
imul
jb
sbb
mov
adc
cdq
stc
jnp
pop
jg
adc
mov
rcr
dec
int3
jae
adc
push
dec
add
or
dec
imul
xchg
jb
cli
ss
out
(bad)
je
repnz
mov
shl
adc
imul
and
adc
lahf
daa
push
cmps
sub
adc
out
add
add
sub
in
ss
lea
test
retf
xchg
hlt
enter
jmp
(bad)
xchg
repz
cmps
jbe
nop
ja
adc
or
outs
adc
dec
test
cli
sub
(bad)
in
pop
inc
out
fbstp
fwait
jecxz
int
cdq
inc
pop
or
mov
add
sub
and
fs
adc
aas
add
jge
fxch
sbb
mov
cmp
sbb
sub
adc
mov
lods
mov
push
sbb
inc
(bad)
adc
push
mov
mov
xchg
fcom
sbb
dec
aas
xchg
(bad)
pusha
std
popf
mov
adc
jae
stc
xlat
dec
sub
xchg
int3
repnz
mov
adc
cmps
into
cmp
adc
imul
adc
iret
ret
out
and
sbb
dec
add
fnsave
ss
or
jge
adc
adc
fs
pop
mov
adc
and
mov
aaa
(bad)
lahf
fsub
rcl
loope
pop
sub
or
rcl
pop
jbe
xchg
fdivrp
in
and
adc
jge
sbb
icebp
stos
mov
mov
outs
les
adc
xchg
sahf
rol
adc
repz
es
push
mov
neg
inc
mov
sar
enter
jmp
imul
dec
cwde
pop
add
sbb
jb
sub
fisub
retf
or
jge
mov
lods
(bad)
shr
sahf
je
jb
retf
call
stos
push
ret
clc
cmp
shr
xor
inc
mov
sbb
push
sbb
out
ret
push
dec
scas
jg
repz
mov
imul
(bad)
int3
inc
mov
xor
mov
pop
push
aaa
stos
mov
sar
xchg
cs
and
aas
mov
pop
mov
scas
cmp
add
lea
mov
sbb
ficomp
inc
pop
push
call
fidivr
in
add
sbb
popa
shl
push
push
das
stc
lods
pop
clc
or
pop
in
pusha
(bad)
popa
adc
aas
sub
outs
inc
add
and
push
arpl
inc
ja
fist
out
mov
mov
jl
pop
cld
cs
lahf
mov
shr
push
push
inc
mov
retf
cmp
enter
mov
add
adc
in
jge
int3
in
dec
sbb
js
sub
sbb
jns
jmp
adc
sub
aam
and
xchg
and
inc
retf
push
xor
fmul
nop
leave
sbb
popa
les
bound
xor
sbb
fld
in
loope
sub
out
jns
adc
aaa
lahf
adc
retf
adc
dec
cdq
lods
vaddpd
or
jp
in
es
xor
sub
cmp
mov
imul
in
or
and
cmp
sub
rcr
int
inc
adc
(bad)
test
cmp
adc
add
fcomi
push
mov
mov
xor
icebp
adc
or
test
adc
or
mov
mov
cmps
jge
adc
mul
ror
(bad)
jmp
mov
ja
add
xchg
scas
adc
jno
lock
inc
popf
sar
adc
mov
je
adc
xchg
pop
and
hlt
sbb
jbe
xchg
adc
push
pop
pop
aas
jmp
loopne
scas
fst
sub
les
sbb
(bad)
xchg
sahf
sbb
push
mov
mov
mov
jne
sub
pop
cmps
out
int3
jnp
mov
adc
iret
ror
nop
mov
sub
jge
sub
in
mov
jle
repnz
out
push
(bad)
fstp
jle
adc
xor
inc
int3
fistp
sub
adc
mov
or
call
jl
ds
jge
retf
das
into
popf
retf
jl
je
cli
mov
pop
and
xchg
jecxz
add
shr
loop
sub
sub
cld
and
inc
(bad)
push
test
outs
jmp
push
call
sub
or
sbb
add
dec
adc
cld
lods
xor
and
pop
sbb
cmp
mov
out
mov
jne
push
sbb
sub
cmc
jle
sub
ret
sbb
cmp
pop
sub
ror
ret
add
jecxz
pop
mov
mov
rol
aam
pop
xor
mov
cli
in
or
shr
mov
cmp
push
dec
jp
mov
push
pop
push
xor
adc
je
movs
adc
imul
mov
in
mov
ja
in
mov
stos
push
adc
dec
mov
xchg
dec
cmp
(bad)
xchg
jge
mov
gs
enter
test
mov
pop
xchg
(bad)
in
mov
ins
mov
inc
jmp
jle
into
dec
or
mov
and
test
pop
icebp
mov
xchg
mov
or
add
push
dec
jl
cs
adc
int
lahf
sub
call
push
push
cdq
mov
jmp
(bad)
mov
lods
xchg
pusha
jno
xchg
pop
aam
daa
(bad)
push
div
jmp
pop
fistp
xchg
ret
mov
xor
push
std
mov
in
adc
inc
ror
outs
and
mov
cmp
dec
mov
push
aaa
dec
push
out
adc
cmc
inc
pop
cmps
push
cmp
adc
fwait
cmp
fs
and
sbb
repz
dec
add
pop
int
add
lds
(bad)
mov
sbb
xchg
cmp
test
cmp
ja
rcl
jae
test
jne
retf
out
sbb
shl
xchg
xchg
jne
cdq
and
fist
pop
data16
xchg
mov
retf
lods
jg
adc
adc
dec
sbb
fwait
or
addr16
inc
pop
mov
ficom
je
test
fst
test
mov
push
mov
jmp
mov
xchg
inc
mov
xchg
arpl
lods
push
mov
add
sbb
pop
jbe
int3
inc
enter
push
mov
repz
pop
cmp
int3
movs
(bad)
fs
adc
loop
cmp
cmp
adc
lds
in
mov
in
push
fild
scas
out
pop
or
call
jb
xchg
movs
add
adc
inc
adc
sub
(bad)
std
adc
fs
pop
in
xor
lds
rcl
adc
mov
mov
cld
jns
cmp
mov
iret
cmp
cmp
dec
xchg
adc
(bad)
out
arpl
jb
cmc
fist
aad
jp
push
jmp
and
push
sbb
shr
mov
test
cmc
mov
cmp
retf
adc
or
push
out
jp
in
jo
and
popa
in
push
xchg
ja
sub
retf
xchg
adc
cmp
retf
stos
or
fld
and
shl
xchg
sub
add
lods
or
pop
xor
inc
fs
in
push
sbb
rcr
mov
arpl
out
or
xor
pop
rol
icebp
or
(bad)
(bad)
fld
test
push
stc
addr16
xchg
cld
inc
pop
xchg
mov
sbb
out
hlt
adc
int3
fdiv
push
xor
mov
imul
adc
cmps
xor
pop
dec
jmp
lea
pushf
xchg
mov
lahf
int3
ss
push
add
jg
int3
ror
and
fnstenv
imul
in
jno
mov
jl
scas
fcmovne
icebp
repnz
jge
mov
or
jne
mov
push
mov
inc
(bad)
pop
cmps
dec
fdiv
je
adc
cmp
in
push
sub
and
outs
int
sbb
out
xor
sar
cmps
cld
in
xor
push
addr16
lods
pusha
pop
dec
push
je
push
lods
data16
jmp
push
mov
jmp
add
push
pop
nop
xlat
jmp
and
mov
adc
sub
rcr
xchg
jno
adc
lahf
hlt
dec
xchg
push
inc
(bad)
adc
xor
cmp
pop
adc
fld
gs
push
dec
(bad)
cdq
adc
mov
in
(bad)
add
stos
xor
test
cdq
inc
push
push
or
xchg
sbb
sbb
nop
cmp
mov
xor
adc
int3
jne
fnsave
hlt
outs
push
fmul
mov
add
adc
mov
add
xor
ret
sub
movs
mov
and
add
xchg
loope
cmps
cld
push
adc
sar
in
jl
pop
or
xchg
nop
fs
or
fild
and
add
popf
cli
dec
adc
ror
fst
add
lahf
xchg
loope
int
xor
in
les
jmp
pop
rcr
mov
retf
icebp
inc
push
(bad)
and
or
ins
std
pushf
inc
xor
push
add
mov
or
xchg
loopne
shl
inc
sub
mov
xchg
(bad)
cld
pusha
cli
add
adc
retf
jmp
xchg
repnz
stos
ret
dec
cmp
push
sbb
adc
out
dec
test
mov
pop
inc
rcl
jmp
cs
in
sub
sbb
std
dec
adc
pop
xchg
fcomp
sbb
adc
mov
xchg
(bad)
fild
aaa
ror
outs
push
jle
stos
or
sub
sub
cmps
jmp
or
dec
or
xchg
pusha
les
mov
mov
adc
mov
cli
(bad)
in
adc
aaa
push
ja
jo
inc
adc
xchg
pop
push
cmps
mov
icebp
adc
pop
pop
and
sbb
sti
xchg
adc
sar
pop
jb
xchg
mov
lea
add
(bad)
mov
jl
push
(bad)
and
xchg
mov
pop
test
mov
mov
xchg
jae
adc
cmps
mov
adc
xlat
fmul
mov
inc
adc
xchg
in
jmp
sub
cs
mov
jno
inc
or
mov
mov
scas
sbb
cmp
adc
outs
addr16
aad
cmp
in
popf
or
adc
cli
cdq
push
dec
xchg
aam
adc
pminub
stos
dec
cld
jp
adc
data16
std
cmps
adc
ror
inc
sbb
mov
mov
sbb
popf
or
pop
pop
and
in
jbe
pop
mov
lods
sub
(bad)
mov
xchg
mov
push
adc
stc
inc
ret
push
ror
cmp
mov
push
stc
js
enter
cmp
cs
sub
adc
or
lods
xchg
mov
retf
adc
mov
sbb
mov
adc
mov
jmp
adc
shl
dec
push
xor
xor
dec
dec
sub
sbb
mov
mov
pop
or
jns
in
aam
xchg
sbb
mov
mov
shr
push
mov
adc
imul
add
fs
inc
mov
les
in
clc
push
fmul
sbb
sbb
mov
add
push
test
xchg
adc
and
xchg
je
mov
(bad)
sbb
and
add
xor
cmp
mov
and
lea
adc
sahf
and
ins
retf
mov
test
xor
jle
in
xchg
and
cmp
and
aam
mov
cmp
test
and
std
or
cmp
pop
mov
in
(bad)
fisub
rol
(bad)
mov
mov
int3
lock
nop
xchg
cwde
or
xchg
mov
rol
add
retf
sub
push
std
sbb
jmp
leave
in
push
fist
lea
ficom
inc
sbb
push
pusha
imul
(bad)
fdivr
jmp
mov
in
pop
hlt
ror
adc
pop
sbb
fst
mov
aaa
mov
cs
jecxz
xlat
repz
jp
pop
rcl
jo
scas
test
aam
retf
popf
adc
xlat
ret
or
adc
ja
int
jg
outs
jge
adc
cwde
popa
stc
and
cmps
outs
dec
sbb
movs
push
mov
sub
inc
ss
inc
sbb
rol
enter
imul
and
push
out
xor
xchg
xor
lock
jp
and
es
fcomp
dec
in
ds
fst
(bad)
je
mov
cmps
(bad)
lock
adc
mov
lods
push
mov
movs
ja
pop
push
adc
dec
cmp
pop
sbb
sub
push
or
mov
xchg
loop
cdq
ds
sub
sub
mov
adc
cmp
or
les
adc
mov
fstp
pusha
cmp
adc
test
retf
pop
dec
xor
xchg
inc
mov
jmp
xchg
add
push
jmp
add
das
dec
adc
int
sub
dec
push
(bad)
adc
dec
rcr
inc
cdq
pop
xor
iret
adc
mov
cmp
mov
push
out
adc
cmp
mov
mov
xchg
loopne
enter
mov
xor
jmp
xchg
adc
mov
out
or
aaa
fist
call
push
mov
pop
jmp
xchg
adc
aad
dec
call
adc
ds
mov
push
sub
(bad)
sub
xor
jo
xor
xlat
add
inc
bound
mov
test
jns
and
push
pop
and
mov
dec
bound
nop
cmps
pop
xlat
in
add
call
arpl
retf
mov
xchg
cs
add
fmul
call
mov
loop
sbb
pop
xor
ret
pusha
or
xor
(bad)
cdq
sbb
mov
out
jbe
mov
aam
mov
xchg
dec
in
loop
dec
adc
pop
retf
je
push
sbb
jmp
int3
mov
imul
test
and
jg
retf
aas
rcl
loopne
inc
popf
in
adc
ror
retf
push
push
loop
or
jecxz
repz
ds
xor
adc
pusha
cmp
unpcklps
aaa
xchg
sbb
sbb
adc
(bad)
jne
xlat
aas
stos
sub
add
push
fst
push
and
adc
mov
xchg
out
fidivr
mov
fnsave
les
jge
and
(bad)
sbb
adc
adc
rcl
js
xor
mov
int
xchg
push
push
outs
adc
ret
or
adc
imul
xor
fmul
dec
add
fsub
cwde
cmp
cmp
mov
(bad)
fist
int3
out
push
mov
repnz
adc
adc
in
inc
leave
imul
or
fs
mov
loop
in
adc
pop
clc
shl
retf
stos
xchg
mov
clc
and
mov
inc
movs
push
fist
cwde
and
pop
and
and
xabort
adc
and
ror
out
dec
mov
adc
pop
cmp
popa
retf
push
ds
cmp
gs
in
sbb
adc
jno
pushf
dec
loopne
in
cmp
add
icebp
aam
fnstenv
inc
ss
sub
xor
push
fsubr
clc
mov
gs
in
mov
adc
sbb
addr16
retf
cmp
sbb
fwait
imul
gs
clc
adc
repz
push
inc
mov
xchg
add
push
sbb
xchg
push
pop
lods
xor
mov
loope
push
das
icebp
out
ja
pop
sbb
sbb
(bad)
push
adc
jbe
add
fnstenv
scas
repz
ss
mul
jl
adc
or
repnz
adc
mov
inc
and
jg
imul
mov
retf
fidivr
add
sub
or
and
and
adc
xchg
dec
aad
pop
cmp
popf
ins
iret
(bad)
or
movs
xor
aam
sub
out
dec
sbb
adc
in
jmp
dec
nop
ror
adc
test
ins
iret
pop
adc
mov
int3
mov
rcl
push
adc
inc
pop
repnz
push
ins
in
popf
js
aam
mov
lock
adc
jb
jae
imul
push
cmp
loop
lahf
jmp
inc
xchg
dec
mov
retf
pop
call
cwde
outs
(bad)
mov
lods
test
inc
push
out
adc
in
adc
fnstcw
cmps
sbb
imul
btr
push
mov
adc
add
mov
mov
push
lods
pushf
adc
out
jmp
cmp
pop
mov
in
mov
test
cdq
es
adc
pcmpeqb
cld
popa
dec
adc
mov
(bad)
clc
and
outs
div
pop
test
fistp
jecxz
test
mov
xor
movs
ins
pushf
push
sbb
rcl
jne
lock
inc
dec
mov
pop
inc
adc
mov
int3
mov
mov
mov
inc
imul
add
push
aas
push
(bad)
imul
retf
dec
xchg
or
push
adc
xchg
sbb
(bad)
xor
aad
push
sub
ret
or
adc
cmps
std
cmp
pop
jno
pop
mov
xlat
fs
lahf
fdivr
pop
adc
jno
in
xchg
movs
dec
(bad)
jmp
xor
jg
push
mov
sbb
ret
mov
xor
jns
fs
fsub
push
push
xchg
and
fist
loope
adc
cld
ret
cmp
add
push
mov
adc
lds
push
not
mov
rcl
pop
and
dec
mov
int3
and
pop
fisubr
xchg
addr16
neg
(bad)
es
retf
inc
xlat
int
mov
adc
stos
repnz
je
adc
cmps
test
sub
ss
dec
mov
pop
jne
retf
sub
or
inc
fild
cmp
mov
inc
fldcw
cld
retf
inc
push
repz
jge
das
leave
adc
lahf
push
mov
les
dec
mov
jne
into
int3
sahf
mov
out
cs
mov
scas
fmul
dec
ins
mov
or
std
(bad)
push
or
xor
xchg
push
add
cwde
shr
test
gs
fist
mov
fmul
in
pop
jmp
mov
fsub
ficomp
in
mov
sub
sbb
das
in
in
ror
or
mov
clc
mov
dec
rol
xor
dec
adc
bound
xchg
and
or
lea
or
out
mov
int3
adc
scas
retf
shl
jp
fwait
and
jge
outs
or
aam
std
adc
mov
mov
or
dec
pushf
int3
push
pusha
aam
add
out
mov
xor
xor
xchg
lods
xchg
mov
lods
pop
or
lods
adc
jle
sbb
data16
dec
jno
out
aad
pushf
mov
pusha
push
dec
jge
les
or
cmp
push
sub
and
mov
in
pop
test
in
push
aaa
and
add
pop
movs
ins
sbb
mov
fdivr
adc
xor
in
xor
sbb
stos
push
gs
push
sbb
(bad)
push
rcl
inc
xor
xor
je
pushf
jmp
sbb
dec
icebp
add
popf
jge
push
adc
mov
pop
loop
ret
add
jnp
adc
test
sti
adc
inc
retf
mov
mov
fidivr
mov
pop
mov
and
mov
push
push
aam
jnp
ss
je
in
mov
jae
ret
rcl
dec
push
adc
pop
ror
mov
inc
leave
pinsrw
call
stc
adc
popa
push
dec
arpl
adc
aam
not
fchs
lock
(bad)
ficom
(bad)
loope
sbb
ss
adc
and
pop
rcl
cli
pop
vmwrite
dec
dec
repz
mov
mov
je
mov
repz
sub
imul
xchg
test
outs
das
jmp
cmovb
mov
ds
mov
pusha
dec
xor
mov
adc
loope
inc
cdq
dec
sub
push
mov
xor
dec
xchg
cdq
je
pop
mov
cld
push
or
test
adc
scas
adc
pop
jge
adc
cmp
adc
repz
retf
cmp
call
hlt
cmps
retf
cmp
nop
movs
mov
fsubr
sbb
mov
movs
adc
scas
sbb
call
rcr
sbb
mov
pop
popa
adc
fdiv
imul
(bad)
push
rcr
(bad)
inc
inc
xchg
retf
imul
adc
jbe
out
rcr
adc
loopne
and
out
and
or
stos
rol
pop
cmp
xchg
xchg
push
sub
sar
and
add
ins
adc
cmp
in
fst
mov
and
gs
sbb
jae
retf
hlt
cld
mov
test
outs
gs
jo
cmps
repnz
mov
xchg
push
daa
in
xchg
adc
sbb
mov
repz
xor
push
lahf
add
je
in
sbb
adc
cmp
and
mov
mov
jmp
and
pop
xchg
fistp
pop
mov
or
test
call
push
pushf
pop
push
pop
push
dec
and
jge
imul
clc
inc
stc
in
inc
je
mov
sbb
test
ret
xchg
jl
mov
mov
out
mov
add
push
push
mov
scas
sbb
mov
or
lea
xor
jns
push
dec
sub
jecxz
push
imul
cli
mov
pop
jmp
call
lods
or
pop
jno
adc
dec
xor
and
in
and
cmp
cwde
adc
sub
xchg
cmp
sbb
xchg
test
add
and
je
int
int3
aaa
and
in
sbb
lahf
lods
dec
mov
and
shl
sub
push
out
loope
pop
mov
dec
ds
xchg
cdq
mov
inc
loopne
or
mov
push
xchg
push
cmp
in
je
jmp
cmp
adc
cld
or
stc
xchg
mov
sbb
lods
cli
out
out
popf
in
pop
(bad)
xor
test
jae
cld
xchg
jb
xchg
aam
pop
shr
jmp
inc
dec
rcl
cmps
in
add
or
call
lods
cmps
ficomp
test
pop
and
iret
imul
pop
aam
sub
adc
enter
push
call
pop
call
mov
dec
ror
in
mov
xor
xchg
cmp
push
in
adc
and
jae
adc
jns
sub
into
sbb
push
sbb
retf
and
in
shl
in
dec
mov
popa
cmp
mov
add
icebp
out
adc
test
push
cli
jns
fcom
loop
mov
and
cmp
inc
xchg
popf
mov
je
cmp
int
add
mov
ds
cmp
lea
aaa
ror
adc
cmc
sub
test
mov
das
jle
adc
push
ins
inc
fcomp
sbb
lea
xor
shl
sbb
in
dec
imul
sbb
fdiv
pop
push
div
sub
pop
adc
dec
mov
iret
adc
jb
stos
rcr
lods
ret
xchg
mov
mul
in
xor
iret
das
xchg
movs
in
test
lods
adc
jmp
cmps
ret
loopne
adc
dec
jb
cmp
mov
in
aas
xchg
loopne
add
xchg
sub
fadd
or
mov
fs
sbb
gs
mov
pop
in
xor
inc
fs
in
xor
mov
push
cmp
in
add
xchg
cld
mov
add
push
push
cwde
jbe
std
mov
mov
fcom
pop
mov
dec
xlat
and
adc
cmp
inc
sub
jns
popf
jnp
and
fdiv
in
pop
aas
mov
loopne
and
dec
outs
aaa
or
hlt
scas
and
sbb
dec
mov
out
dec
add
je
rcr
das
pusha
nop
inc
jno
dec
sti
dec
movs
xchg
add
icebp
fdiv
int3
xchg
sbb
leave
pop
xchg
xchg
mov
retf
dec
mov
adc
push
dec
inc
sub
sbb
push
add
gs
int3
ret
add
rcr
add
lea
test
mov
jo
popf
rcr
jmp
(bad)
adc
add
pop
das
stos
jae
xchg
rcl
xor
and
ret
hlt
(bad)
and
jmp
adc
inc
cmp
mov
fst
test
loop
adc
int3
mov
mov
daa
ds
adc
imul
test
enter
mov
jecxz
arpl
outs
adc
(bad)
sbb
mov
adc
xlat
dec
int3
xor
gs
add
and
or
sbb
and
scas
ds
mov
push
popf
(bad)
in
push
neg
and
push
lock
out
cli
push
scas
push
adc
aad
stos
and
xchg
xor
xchg
loopne
cmps
push
sbb
push
enter
outs
test
dec
fwait
or
mov
(bad)
pop
cs
lock
(bad)
cdq
jo
cld
xchg
aas
xchg
adc
jmp
xchg
sub
push
cs
or
inc
loop
punpckhdq
inc
aam
add
das
mov
fcom
fst
xor
jmp
or
cmpxchg
stos
add
out
cmp
jp
push
mov
jno
adc
popf
add
add
mov
into
nop
dec
cmp
pop
xchg
and
mov
sub
je
add
sbb
call
and
cli
adc
loopne
pop
xchg
push
cmp
xchg
xchg
shl
fisub
jmp
mov
dec
call
in
mov
xchg
cwde
add
in
mov
ss
adc
sub
cmp
in
adc
fwait
cmps
jmp
adc
stc
pop
sar
mov
sbb
clc
xchg
aam
bound
add
mov
cmps
xchg
inc
call
enter
lahf
pop
daa
fist
adc
push
pop
test
pop
add
pop
shl
mov
adc
adc
into
fdivr
xor
push
mov
adc
push
jg
jno
sbb
ret
and
ja
mov
mov
sub
loope
adc
xchg
or
js
popa
ins
dec
xchg
xchg
adc
mov
push
movs
icebp
cmp
xor
cwde
push
and
sbb
aam
je
adc
mov
imul
fs
adc
inc
xchg
ret
int3
jle
dec
es
ret
xor
adc
push
push
shr
pusha
rcl
add
pop
adc
mov
add
std
shr
or
push
sahf
mov
mov
sub
add
push
(bad)
cmovle
adc
cs
in
mov
pop
ins
jle
adc
adc
retf
aas
cmc
int3
jmp
adc
xchg
mov
cwde
adc
cmp
cld
daa
gs
or
xchg
lods
(bad)
sub
jb
sub
or
jae
ror
jmp
add
xchg
jl
push
cmp
inc
xchg
inc
int3
mov
je
xor
push
push
pop
xchg
cmp
imul
push
jecxz
mov
inc
mov
aad
adc
out
push
adc
mov
aam
fild
cmc
sahf
in
xchg
imul
mov
adc
das
mov
mov
inc
popa
adc
add
dec
push
mov
adc
and
pop
repz
cli
loop
test
out
cmp
mov
aaa
ss
lea
enter
xchg
sbb
inc
mov
push
mov
add
in
mov
faddp
fld
repz
iret
and
push
push
inc
pop
sub
adc
xor
xchg
push
mov
adc
call
jp
pop
enter
loopne
sbb
cwde
jns
hlt
pushf
pop
add
ss
fisttp
pop
test
out
fist
fadd
adc
das
pushf
push
sub
nop
adc
cdq
cmp
and
or
xor
mov
adc
sub
push
cli
xchg
mov
mov
inc
js
retf
out
xchg
pop
cmps
inc
or
pop
jae
mov
pop
mov
movs
adc
dec
scas
loopne
jbe
and
out
adc
push
mov
jns
neg
push
pop
pop
adc
cwde
jge
jbe
push
cmp
test
xchg
adc
dec
call
and
sbb
push
or
mov
mov
inc
lods
pop
xchg
jge
or
adc
shl
and
xlat
dec
inc
ret
cmp
fist
lds
rcr
dec
dec
adc
or
xor
sub
je
mov
aas
xor
aad
cmp
sahf
xor
aam
cmc
repz
push
lock
in
jmp
mov
pop
lock
in
push
xchg
out
dec
das
int3
(bad)
adc
mov
int
xchg
adc
cdq
in
nop
push
xchg
cmp
add
bound
adc
cmp
das
pusha
fsubr
push
add
test
sub
adc
pushf
aaa
push
or
sbb
push
rcl
pop
xchg
xchg
xchg
and
inc
adc
cdq
lea
dec
retf
in
sbb
or
push
adc
aas
adc
cmc
jl
popa
push
ror
cmps
(bad)
and
fstp
gs
lods
add
in
jmp
inc
inc
pop
loope
mov
js
lods
or
adc
leave
shr
cld
imul
std
ret
sbb
(bad)
(bad)
adc
fcom
rcl
xchg
in
out
xlat
pop
je
aas
retf
lock
adc
fst
leave
int
push
sub
(bad)
call
repnz
adc
(bad)
in
jl
fwait
and
les
call
cld
inc
mov
out
jae
retf
sub
xchg
fs
jo
or
cmp
adc
dec
ins
sbb
aam
lahf
std
dec
adc
mov
int3
rcr
adc
enter
dec
in
push
dec
jno
xchg
add
je
retf
xchg
add
ret
adc
and
fwait
xchg
mov
xchg
lods
jmp
ret
in
sub
push
shr
dec
and
add
mov
push
popa
aam
shl
nop
aam
cmp
in
cmp
or
adc
jb
popf
lock
addr16
push
push
xor
cmp
adc
scas
adc
rcr
popa
mov
pushf
sub
retf
adc
sbb
pop
add
imul
inc
pushf
jnp
inc
or
jae
or
cmps
jo
lock
sbb
rcr
js
cmp
lds
add
or
pop
cld
or
sti
rcl
in
movs
xlat
jg
adc
hlt
xchg
jle
lahf
and
test
(bad)
in
sbb
adc
mov
mov
cmp
lea
adc
adc
xchg
adc
xor
retf
xor
out
inc
add
adc
les
adc
sub
mov
adc
adc
daa
(bad)
sbb
pop
(bad)
gs
xchg
sub
xor
adc
daa
jmp
test
cmp
or
leave
cld
xor
push
popa
add
imul
sub
add
sbb
fstp
and
lods
pop
pop
paddsw
aam
cs
push
jmp
cwde
xchg
sub
push
loopne
imul
repnz
adc
int
fadd
sbb
sbb
inc
movs
sub
aaa
mov
loopne
adc
jb
mov
sar
stos
stos
fmul
mov
(bad)
pop
pop
mov
jecxz
xor
iret
pop
(bad)
shr
mov
movs
adc
sub
test
mov
ins
adc
in
or
push
das
cmp
mov
div
mov
push
mov
mov
repz
pusha
adc
loopne
fiadd
dec
cmp
sti
adc
dec
les
jmp
push
call
fimul
cmp
retf
or
fs
xchg
test
adc
cli
adc
sbb
sbb
hlt
sar
pusha
call
test
addr16
enter
pop
push
neg
xchg
xchg
aad
mov
dec
xor
add
mov
jge
(bad)
dec
retf
hlt
mov
cli
jl
push
xor
and
adc
std
fild
mul
or
jne
aam
aas
test
or
jno
xchg
xchg
xor
mov
push
jne
push
mov
pop
test
xchg
or
loop
sbb
mov
pop
test
cmp
or
xor
or
mov
sbb
aad
mov
sbb
stos
push
movs
repz
mov
(bad)
shr
fst
je
cmp
adc
inc
jmp
pop
fnsave
add
(bad)
mov
dec
adc
rcl
dec
jmp
push
int3
cmp
sub
mov
xchg
add
movs
popa
add
pop
push
je
cmc
sbb
stos
loopne
xor
test
mov
push
aad
push
icebp
stos
adc
sti
add
sbb
fadd
scas
hlt
adc
daa
jle
mov
stos
inc
or
and
sub
int3
mov
in
hlt
mov
jnp
push
test
adc
xor
adc
lahf
pop
sub
adc
jl
fcom
sub
or
mov
add
in
xchg
cli
add
adc
inc
nop
mov
dec
adc
or
fiadd
xchg
adc
hlt
adc
jl
out
neg
pop
inc
jbe
cs
dec
add
sbb
stc
repnz
pusha
push
aam
adc
adc
and
push
loop
adc
rcr
pop
jmp
and
push
clc
aam
inc
push
push
adc
hlt
scas
cs
repnz
ret
dec
fdiv
or
dec
mov
iret
arpl
shl
adc
or
add
push
jno
addr16
daa
mov
inc
repnz
pop
cmp
jbe
arpl
inc
into
call
xchg
xchg
or
daa
jo
jle
(bad)
or
pop
adc
dec
xchg
sbb
mov
sbb
fistp
jno
fwait
cmps
or
adc
inc
jg
push
dec
test
dec
scas
jp
mov
mov
xchg
cmp
es
sbb
jns
ins
push
into
retf
pop
mov
mov
ret
stc
push
std
(bad)
leave
or
inc
movs
mov
call
mov
add
cmps
rol
pop
call
add
int
ficomp
sbb
stc
pushf
jb
lea
test
push
adc
sub
hlt
les
fst
shl
nop
loope
cld
and
pop
mov
dec
std
jl
sbb
jne
sbb
push
sbb
xchg
daa
mov
lods
pop
push
pop
add
repnz
pop
in
pusha
mov
jne
int
adc
xchg
aas
lahf
mov
ror
push
repnz
cmps
call
push
xor
jmp
clc
xchg
popa
xchg
dec
sahf
icebp
es
mov
cmp
inc
mov
(bad)
movs
imul
mov
data16
mov
imul
enter
(bad)
push
jp
sub
adc
mov
in
sbb
fild
inc
test
xchg
inc
loope
pop
add
adc
add
mov
ret
stc
in
daa
jno
stos
mov
pop
rcl
xchg
out
fisub
and
jg
out
in
stos
bound
stos
arpl
(bad)
xchg
pop
inc
dec
mov
lock
aaa
mov
(bad)
mov
aam
pop
adc
dec
cmps
add
out
pusha
mov
pop
ds
pop
xchg
jnp
and
clc
ins
adc
xor
cmp
cmp
dec
pop
push
add
adc
mov
das
sub
sub
pop
xlat
lea
sub
push
mov
push
(bad)
outs
mov
jle
xchg
sbb
pushf
mov
repz
sbb
std
sti
add
cmp
xor
data16
lods
(bad)
cmc
jp
cmp
cmp
add
in
adc
mov
(bad)
mov
jl
pop
nop
jo
and
and
test
sbb
adc
test
lock
cwde
push
pop
push
xor
push
mov
fmul
dec
mov
lods
or
push
sub
sub
lahf
cld
outs
adc
mov
push
fnsetpm(287
aaa
popa
adc
inc
sbb
sbb
cmp
scas
adc
mov
dec
cld
das
call
cdq
mov
sbb
mov
mul
ss
adc
jns
pop
or
jmp
pop
xor
out
xor
mov
and
and
repz
mov
je
inc
cmp
xor
int
dec
dec
and
jns
mov
movsx
mov
xchg
xchg
scas
repnz
aam
aad
rcr
stc
and
addr16
dec
sbb
int3
jecxz
out
bound
add
jnp
mov
aas
out
je
xchg
leave
sbb
cmp
sti
push
out
aam
jo
push
sbb
iret
imul
ss
mov
or
adc
mov
fwait
(bad)
adc
mov
mov
div
jns
inc
pop
pop
fist
adc
inc
out
rcr
inc
push
retf
jmp
push
ficom
test
imul
push
inc
cli
clc
adc
sub
je
rcl
rcl
push
mov
mov
leave
xor
cmp
adc
ins
adc
adc
cmp
inc
and
sbb
jno
and
jnp
adc
fcmovnb
outs
xchg
(bad)
sbb
mov
pop
nop
in
or
hlt
(bad)
or
pop
scas
cmp
adc
mov
test
int
out
fsub
fisub
out
adc
fs
cmp
adc
nop
jbe
fwait
stc
ret
xor
ds
fcmovnu
into
call
loop
mov
(bad)
push
push
sub
jecxz
push
int3
aad
pop
(bad)
loop
addr16
es
xchg
or
dec
and
fst
dec
jne
mov
arpl
adc
add
mov
ja
icebp
repnz
rcl
lods
jbe
int3
adc
jns
adc
hlt
rcr
icebp
and
rcr
movs
pop
daa
adc
mov
dec
and
mov
adc
popa
sbb
push
and
or
adc
xchg
sbb
xor
(bad)
aam
pop
stos
test
jo
stc
sbb
cld
cli
lds
cmp
push
sti
adc
aas
mov
imul
adc
pop
sub
mov
loop
sbb
jbe
add
jecxz
data16
(bad)
pop
ss
rcl
adc
sub
adc
xchg
repnz
jns
or
pop
push
adc
enter
lods
lods
mov
xchg
adc
loopne
dec
int3
inc
sub
adc
push
into
aas
jle
mov
ret
jmp
dec
adc
lds
rcl
add
xchg
mov
lods
push
or
lock
pop
sub
dec
cmp
sbb
xchg
fsubp
or
and
push
(bad)
xchg
add
(bad)
je
mov
arpl
mul
stos
test
or
loopne
cmp
in
add
rep
mov
lods
pop
arpl
cli
xor
popf
adc
and
ret
dec
scas
adc
mov
mov
(bad)
ss
js
adc
pushf
bound
mov
pop
push
aad
loope
mov
xchg
cmp
jp
shl
or
int3
inc
sbb
stos
in
pop
pop
cmp
or
adc
fisttp
cwde
loope
sbb
sahf
sar
in
mov
arpl
or
dec
jno
and
call
mov
fdivr
repnz
xor
iret
jp
test
lahf
or
adc
arpl
(bad)
add
push
rcl
xchg
out
(bad)
jmp
add
mov
cwde
fld
ins
mov
loope
cmp
add
push
(bad)
push
bound
adc
add
fild
mov
and
and
mov
cmp
add
jae
inc
mov
pop
es
pushf
ret
es
xchg
mov
mov
xchg
into
(bad)
jl
add
shr
adc
xchg
adc
or
in
ror
imul
loope
sahf
adc
mov
sbb
scas
jmp
jle
cmc
fisub
add
sbb
adc
(bad)
cli
sbb
dec
xchg
lahf
jmp
in
cli
ins
ret
add
push
into
xchg
mov
int
test
sbb
xor
out
inc
sbb
jmp
ds
fist
cld
test
xchg
mov
mov
push
shl
sub
cmp
aad
fist
iret
mov
push
lods
movs
jne
aam
sbb
add
add
(bad)
pop
sti
ret
scas
lods
jbe
icebp
xchg
imul
xor
cmps
fcom
in
sbb
nop
adc
push
dec
push
stos
movs
movs
mov
push
sub
sti
(bad)
push
addr16
mov
or
in
sub
js
add
fcmovu
test
int3
cmps
mov
xchg
je
lds
dec
js
inc
mov
xchg
ss
push
sub
pusha
lods
ins
shr
retf
fiadd
xchg
jmp
aaa
dec
call
xchg
pop
push
jmp
push
or
test
cdq
xchg
sahf
push
jg
call
int3
push
inc
inc
cmc
adc
mov
imul
test
dec
push
add
data16
int3
retf
xor
cld
nop
out
push
mov
cmp
sbb
mov
div
fsub
dec
fwait
inc
sub
jmp
lahf
rol
mov
(bad)
inc
hlt
dec
call
iret
mov
or
jne
mov
imul
adc
test
ret
retf
(bad)
sbb
sub
iret
sbb
popa
mov
cmp
adc
pop
movs
lods
dec
adc
sar
jno
mov
rcr
not
repz
adc
pop
adc
mov
inc
ret
imul
fabs
inc
ja
jae
dec
cmp
in
xchg
lahf
push
arpl
inc
push
ins
rcr
and
frstor
cmp
clc
mov
mov
test
xchg
leave
das
inc
call
or
push
popa
cmps
adc
mov
sahf
fnsave
mov
adc
xchg
rol
jmp
or
cmp
jno
inc
push
jo
lea
mov
push
adc
pop
in
lods
mov
jmp
push
test
fcom
fcomip
shl
pop
sbb
js
xor
xchg
popa
scas
(bad)
sahf
adc
cs
mov
sti
rol
mov
mov
or
into
rcr
fld
sub
mov
dec
lods
std
pushf
xor
data16
lods
add
loop
mov
pop
enter
fbstp
je
call
adc
xchg
mov
(bad)
cld
mov
adc
sbb
test
add
(bad)
sub
pushf
jl
ins
adc
sbb
in
scas
and
stos
sub
std
push
jnp
(bad)
rcr
dec
je
gs
js
mov
pop
arpl
(bad)
out
retf
sbb
jne
pop
neg
jmp
out
fist
push
(bad)
(bad)
cmc
xchg
adc
push
or
adc
or
sub
push
movs
sbb
test
lds
or
or
into
adc
repz
hlt
popa
ins
adc
mov
dec
rcl
stos
jns
dec
into
enter
(bad)
out
fdivr
fimul
sbb
or
cld
adc
push
mov
out
popf
jae
dec
out
fcomp
push
adc
fld
xor
popa
repz
xchg
xor
cld
ss
pop
xchg
into
bound
sbb
xor
jmp
icebp
std
dec
push
dec
gs
nop
sbb
adc
ret
in
pop
inc
add
adc
dec
mov
rol
xchg
mov
xchg
ja
jae
mov
popf
push
push
fwait
xor
jbe
(bad)
movs
hlt
pop
aas
push
add
xchg
icebp
fs
cli
dec
adc
outs
shl
movs
or
lods
mov
and
stos
mov
iret
retf
xchg
xchg
fstp
jns
scas
nop
arpl
adc
inc
ret
pop
mov
add
outs
dec
inc
aaa
call
sbb
fwait
dec
inc
xchg
adc
in
push
mov
scas
or
push
jmp
lea
mov
xor
fcom
movs
mov
xchg
add
test
jmp
sahf
jne
mov
call
or
je
add
ins
adc
add
inc
xchg
dec
sbb
ins
std
xchg
leave
xlat
imul
mov
mov
pop
jne
stc
inc
in
out
cmp
cli
jmp
mov
mov
sub
aad
aam
ret
fwait
mov
mov
add
fidiv
and
or
pop
out
les
mov
test
mov
scas
jnp
xor
jno
cmp
cmp
and
test
das
push
mov
loop
fcom
test
adc
sbb
je
test
pop
fild
(bad)
mov
push
xchg
mov
add
xchg
dec
push
pop
pop
xchg
or
sahf
dec
dec
icebp
adc
jo
fild
retf
std
adc
adc
fidivr
hlt
(bad)
adc
dec
shl
push
pop
and
mov
inc
inc
jns
or
mov
mov
scas
sahf
push
adc
addps
stos
jg
out
je
cmp
push
cmp
lea
mov
mov
call
(bad)
xchg
mov
sub
or
mov
inc
pop
fist
ins
fucomip
into
psubw
lds
sbb
sub
enter
pop
lock
sub
push
sbb
test
cmps
jns
push
ror
sti
sub
aam
imul
stos
xchg
clc
adc
out
xor
push
push
mov
repnz
test
dec
add
jb
push
cmp
mov
in
push
fsubr
(bad)
jp
sbb
sar
adc
or
jg
in
call
cwde
cmp
imul
cmp
or
sub
dec
fwait
push
inc
cmps
iret
shr
xor
xchg
mov
jo
loopne
xchg
add
adc
shl
sub
xor
xor
xchg
dec
cmc
adc
push
ror
sbb
sbb
jle
cli
xchg
jge
pop
sbb
test
add
or
fcom
les
push
add
pop
sbb
jno
and
xchg
adc
inc
mov
xor
jg
jno
pop
adc
mov
xchg
jecxz
inc
ins
sar
adc
push
(bad)
es
or
xchg
push
add
jae
sub
sbb
aas
fadd
ffree
jno
or
leave
adc
adc
shr
fwait
loopne
sbb
cmp
dec
mov
push
xchg
jbe
sbb
les
je
popa
push
sbb
fbstp
ret
mov
ficom
mov
cmc
sbb
dec
mov
jbe
adc
inc
int3
push
ds
sbb
stos
xor
jp
dec
or
push
add
aam
dec
xchg
xchg
and
cli
data16
popa
and
sbb
ret
push
push
loopne
push
mov
aaa
jl
and
inc
adc
xor
sub
or
out
in
pusha
and
xor
cmp
loope
xor
and
sahf
and
dec
(bad)
imul
dec
or
and
fisttp
in
cli
adc
test
ja
xchg
sub
xor
das
adc
icebp
pop
or
in
pop
mov
ins
push
mov
push
nop
cmp
adc
lods
out
(bad)
popa
aam
or
jmp
pop
cld
pushf
mov
aas
fs
xor
and
dec
push
es
sbb
dec
adc
das
std
iret
sub
add
xor
(bad)
jmp
jp
push
ins
cmc
pop
pop
(bad)
mov
lahf
out
adc
mov
and
clc
inc
adc
push
sahf
mov
test
addr16
push
lods
ins
inc
cwde
add
adc
mov
int3
fld
aad
cdq
test
test
cmp
cmc
mov
call
(bad)
jmp
or
push
enter
pop
sbb
outs
inc
(bad)
mov
jecxz
sbb
or
fcmovnbe
xchg
pop
adc
mov
cmp
push
popf
pop
add
and
in
jmp
adc
adc
iret
xor
pop
rcpps
pop
mov
pop
jo
hlt
add
xchg
or
cmp
xchg
xchg
js
das
sbb
data16
imul
sub
loopne
movs
jle
pop
cmps
xchg
je
shr
and
aas
leave
loopne
xchg
in
add
sbb
adc
imul
cld
cwde
fsub
adc
int3
xor
out
mov
test
clc
(bad)
gs
sar
sbb
mov
cld
push
mov
fbld
ficomp
and
jmp
loope
pop
cld
inc
adc
enter
pop
rcl
pop
pop
sahf
aam
or
mov
and
add
inc
dec
or
cdq
mov
xchg
imul
in
lahf
in
or
jp
in
hlt
sahf
xor
xchg
pop
push
mov
jb
fadd
ins
iret
jo
adc
mov
sub
sbb
jnp
dec
retf
test
cmp
xchg
clc
rcl
ins
push
or
leave
ficom
jp
push
push
jb
jge
sbb
ds
lahf
call
lods
or
pop
push
icebp
aaa
fistp
sbb
dec
ret
sub
sti
inc
data16
jns
push
adc
inc
jge
retf
and
aas
cld
int3
aad
pop
jg
and
cdq
sbb
inc
jge
lods
cmp
xor
or
fnstsw
into
rcr
movs
xor
fdivr
xor
retf
jecxz
into
or
or
xchg
(bad)
mov
(bad)
pop
adc
mov
cmp
add
add
pop
sbb
mov
mov
dec
inc
sbb
adc
or
mov
cmps
test
loope
push
jne
mov
into
adc
or
daa
and
mov
popf
(bad)
fimul
sahf
fist
cmp
cmp
xchg
xor
out
push
in
cld
mov
inc
fimul
jbe
sbb
lods
dec
mov
hlt
sub
adc
xchg
mov
mov
pop
je
push
adc
mov
ds
data16
mov
mov
(bad)
jecxz
stos
dec
inc
cmp
jg
ins
and
sbb
sbb
push
mov
dec
ror
jl
mov
sbb
cmp
pop
mov
movs
sub
scas
lock
out
(bad)
mov
jle
and
mov
adc
popf
hlt
add
jg
dec
sub
pop
(bad)
adc
cmp
retf
call
call
jne
ins
push
imul
sti
jmp
ins
push
call
mov
das
xchg
stc
ds
out
bswap
icebp
or
sbb
adc
adc
int3
mov
test
dec
lock
sbb
cs
sahf
call
sbb
pop
shl
mov
(bad)
lahf
jge
stos
jg
jb
movs
push
mov
repz
rcl
fst
mov
leave
jl
pusha
pop
xchg
adc
cld
outs
rol
repnz
jns
cmp
mov
or
push
inc
mov
pusha
dec
gs
ins
adc
adc
ins
dec
add
hlt
lods
push
movs
adc
mov
gs
shl
arpl
mov
sub
xchg
movs
sub
cmp
stos
cwde
adc
sbb
sbb
and
or
inc
rol
test
dec
hlt
out
fst
mov
data16
enter
int3
cmp
shr
add
ja
add
or
lods
sbb
mov
sbb
mov
and
sub
dec
push
in
retf
sti
fsub
sub
pop
or
cmps
cld
inc
xor
in
and
xor
in
or
and
xlat
rcl
xchg
ins
xchg
(bad)
popa
in
mov
dec
sbb
mov
je
xchg
sub
adc
jb
leave
ret
sub
mov
inc
iret
pop
fisub
and
adc
jecxz
adc
enter
inc
hlt
(bad)
sub
xchg
movs
sub
sub
fnstcw
mov
jae
and
and
mov
sahf
aas
cmp
icebp
or
cli
fild
push
pop
xchg
je
mov
adc
(bad)
je
in
dec
not
pop
mov
outs
jmp
in
call
sub
lea
adc
fld
int3
push
xor
push
xor
add
lock
adc
inc
mov
shl
sahf
jbe
jae
fnstsw
mov
mov
add
(bad)
xchg
pop
mov
hlt
inc
fld
adc
or
call
(bad)
leave
push
cdq
adc
mov
xor
push
xor
xor
push
lds
repnz
and
sub
jmp
(bad)
ret
xor
mov
lock
adc
jmp
push
mov
movs
adc
data16
imul
jge
rcr
or
push
mov
movs
in
jg
or
and
int3
or
adc
ja
loop
cmp
or
mov
adc
xchg
push
add
sbb
loope
or
into
addr16
xchg
in
cmp
or
in
push
cwde
and
imul
adc
scas
sahf
fs
repz
movs
hlt
push
add
fdiv
pop
outs
dec
call
cmps
aam
jmp
mov
repz
adc
aas
mov
stos
cwde
pop
je
inc
pop
clc
push
test
jb
mov
je
mov
adc
mul
xchg
and
in
pop
ret
push
ins
pusha
les
mov
pop
fcom
movs
mov
push
mov
icebp
int
sub
loop
jnp
adc
std
xor
pop
push
sbb
mov
mov
xlat
test
adc
popa
and
retf
dec
sbb
jns
push
push
xor
fs
push
xchg
adc
push
or
adc
adc
adc
jne
retf
stos
test
push
popf
mov
hlt
push
cmp
xlat
inc
xchg
jae
test
inc
jp
and
jmp
jmp
mov
pop
or
cmps
inc
lds
adc
xchg
gs
mul
fadd
nop
mov
xor
xchg
mov
mov
(bad)
cmp
fcomp
add
jae
pop
aad
xor
stc
and
lods
fdivr
test
mov
call
adc
mov
mov
adc
cwde
xchg
cmp
leave
stos
pop
dec
ins
rcr
pop
aad
inc
fldenv
push
dec
inc
push
and
inc
mov
div
jp
jns
xor
ficom
retf
jge
out
out
adc
mov
mov
push
sub
mov
scas
in
xor
mov
jp
sub
mov
xor
cli
mov
mov
mov
pop
sahf
rcl
in
or
jmp
jle
push
sahf
aam
or
xchg
cld
or
push
pop
int3
ficom
pop
push
mov
pop
fldcw
aad
dec
or
in
xchg
mov
adc
cmp
lock
cmp
in
push
push
es
and
sahf
(bad)
lods
adc
out
sub
jnp
adc
sub
movs
clc
popa
adc
cmps
scas
fistp
hlt
shl
adc
pop
xchg
sbb
add
mov
ret
xchg
jg
push
aas
adc
call
das
jb
inc
adc
push
xchg
cmps
push
xor
jns
jae
sti
in
aam
pop
pop
cmp
iret
mov
mov
adc
imul
sbb
fbstp
pop
add
cmp
inc
lahf
jo
int3
(bad)
ficomp
aam
add
sub
scas
rcl
add
jne
pop
dec
das
push
into
mov
jno
adc
cs
fwait
les
mov
je
pusha
(bad)
jne
neg
dec
sar
mov
dec
lods
sbb
inc
sahf
scas
push
add
mov
aam
jmp
test
mov
jnp
dec
xor
adc
cmp
les
fnstcw
xchg
clc
fnstcw
aad
clc
nop
inc
cld
fadd
int3
retf
inc
sbb
or
and
retf
pop
sub
xchg
aad
fild
loopne
fisttp
sub
mov
mov
test
adc
(bad)
jecxz
xchg
mov
pop
and
pop
adc
test
in
(bad)
cmp
sbb
dec
repz
adc
inc
jl
jmp
dec
cmp
jmp
adc
test
mov
es
sbb
cmp
pop
sbb
(bad)
pop
int3
lods
retf
xchg
call
sub
lahf
test
(bad)
jp
stc
in
jnp
push
add
je
test
push
mov
dec
call
xor
and
sbb
pop
and
inc
fisttp
sbb
std
loopne
xlat
adc
xchg
mov
into
xor
adc
add
mov
adc
inc
dec
add
shl
xor
adc
icebp
push
out
cld
movs
pushf
in
loop
ja
push
adc
xor
call
sub
inc
(bad)
sub
das
push
adc
adc
xchg
(bad)
mov
call
or
mov
sub
movs
mov
fwait
mov
and
cwde
nop
movntq
addr16
sbb
fst
inc
xchg
cmp
fmulp
adc
sti
add
in
jle
push
rcr
cwde
in
and
movs
sub
pop
icebp
adc
stos
mov
or
and
jge
push
push
cs
push
stos
icebp
xchg
call
ret
push
mov
xor
cmps
test
adc
pop
push
xchg
jne
outs
dec
mov
pop
cmps
jbe
ds
adc
xchg
int3
scas
loop
fsubp
or
pop
test
mov
xchg
js
adc
sahf
test
lea
pmaxsw
mov
pusha
sub
call
mov
popf
xchg
inc
mov
outs
adc
int
jne
outs
movs
cmps
adc
adc
mov
mov
icebp
inc
into
dec
rcl
mov
outs
xchg
je
enter
mov
shl
mov
pop
lods
and
scas
mov
mov
jecxz
lock
retf
ret
hlt
jmp
loop
repnz
pop
cmps
(bad)
push
jge
lods
out
fxtract
popa
cmc
xchg
adc
mov
dec
retf
dec
arpl
push
fstp
push
xchg
inc
add
sub
es
cli
fsub
pop
movq
xchg
outs
clc
stc
lock
(bad)
not
(bad)
add
push
jb
clc
outs
mov
rcl
stos
mov
mov
ss
ins
(bad)
test
jle
adc
push
sub
ss
icebp
pop
mov
mov
pop
imul
aam
jae
ret
adc
cmps
shr
or
mov
adc
sbb
mov
push
adc
sub
es
ins
xor
repnz
pop
xchg
push
fdivr
or
sbb
jge
sbb
jle
xchg
sti
jmp
and
sbb
retf
enter
add
xor
jl
loopne
push
dec
xchg
mov
ins
je
int3
and
sbb
out
xchg
je
loop
push
mov
les
sbb
dec
cld
xchg
xchg
stos
add
retf
mov
mov
adc
ins
outs
dec
shl
fadd
retf
xor
cmp
inc
rol
loop
sbb
or
and
inc
imul
inc
js
add
mov
pusha
and
pop
jnp
adc
stc
sub
pop
movs
(bad)
mov
mov
pop
stos
sar
adc
sub
call
adc
mov
(bad)
xor
mov
sbb
loopne
adc
rcr
arpl
adc
push
jbe
mov
jmp
cdq
sti
xlat
xor
mov
dec
movs
add
jb
push
loopne
add
sub
bnd
movs
add
cdq
push
cmp
or
lods
xor
pusha
dec
retf
adc
jg
adc
adc
pop
out
mov
push
pushf
cmps
cld
push
add
or
leave
xlat
and
call
js
mov
cmps
jp
inc
inc
aam
sbb
and
int3
pop
jp
xchg
adc
retf
outs
imul
rcl
push
test
pop
dec
dec
sub
cli
mov
sbb
adc
shr
and
xchg
push
mov
loopne
int3
sbb
cmp
pusha
cwde
(bad)
pop
ret
iret
out
cli
xchg
aaa
adc
popf
stos
xor
push
push
xchg
push
pop
scas
push
sbb
popa
pop
sub
jmp
sbb
lea
adc
push
cdq
add
adc
stos
pop
jl
ins
add
jl
arpl
ja
fdiv
xchg
mov
invd
clc
ins
adc
mov
pop
push
adc
fucomip
mov
adc
mov
mov
xchg
ret
inc
push
jecxz
adc
or
sub
cld
nop
cmp
dec
push
int3
leave
pop
jae
and
scas
ss
sbb
call
mov
cmp
mov
mov
xchg
mov
cmc
aas
adc
pop
sub
xor
add
rcl
sub
pop
sbb
rol
loopne
adc
popa
(bad)
movs
das
xor
adc
and
test
jb
gs
ret
jmp
lea
and
loope
pop
push
xor
sti
test
loope
push
xlat
mov
xor
lock
pop
push
push
push
fsubr
xor
(bad)
dec
cld
xor
xor
stc
inc
jne
adc
ret
shl
and
or
jmp
adc
ins
(bad)
jnp
adc
loope
jmp
adc
fcom
rcr
std
jmp
xchg
enter
loopne
inc
cmps
sbb
mov
call
test
mov
sub
fistp
xchg
push
ja
addr16
adc
stos
scas
call
mov
addr16
(bad)
repz
push
push
(bad)
jo
(bad)
adc
mov
xorps
imul
mov
xchg
inc
inc
test
lock
push
cdq
mov
inc
adc
xor
fs
ret
or
data16
hlt
rcr
es
bound
cli
pop
dec
cmp
cmp
sub
sbb
pop
(bad)
push
outs
xchg
mov
xchg
in
rcl
push
out
test
pop
inc
sbb
inc
push
loope
cmp
cmps
out
scas
cmp
pop
icebp
retf
push
fwait
out
mov
jo
mov
lock
dec
int3
hlt
xchg
out
lea
(bad)
sti
imul
out
mov
stos
scas
out
adc
xchg
div
push
pop
jns
mov
out
xor
ficom
hlt
push
xchg
aam
daa
call
(bad)
push
add
dec
aad
sbb
in
int3
inc
jns
fcomp
out
xchg
dec
loopne
xor
sbb
je
fcomp
push
cwde
aaa
pusha
not
adc
jnp
push
loopne
push
adc
movs
pop
sbb
in
jle
or
ror
clc
cmp
adc
pushf
or
xchg
aad
mov
xchg
std
int3
(bad)
cs
in
call
aaa
jo
sbb
int3
xlat
xchg
retf
add
inc
dec
in
(bad)
ja
cmps
sbb
push
lahf
ret
xchg
scas
scas
inc
adc
and
ins
adc
ins
(bad)
sbb
jmp
push
mov
push
xchg
aas
sbb
dec
ins
popf
sar
mov
sbb
fst
cld
jle
loop
and
inc
mov
jbe
dec
rol
mov
retf
pop
jg
les
adc
(bad)
hlt
sub
pop
and
out
fwait
imul
and
(bad)
sbb
data16
or
sbb
mov
out
lahf
or
das
xor
xchg
or
adc
add
les
das
mov
mov
movs
and
jle
cmp
ret
push
mov
icebp
add
mov
mov
sbb
bound
push
pop
sti
aam
std
and
cmp
sub
mov
cmp
add
test
jmp
pop
imul
mov
mov
rcl
sub
das
mov
ret
mov
in
test
adc
dec
sub
scas
into
or
shl
repz
mov
in
stos
lods
push
dec
enter
push
stc
js
jne
cwde
(bad)
sub
dec
daa
fild
out
adc
lahf
inc
and
push
fdivr
jg
pop
cmp
push
jmp
loopne
adc
push
adc
out
sub
cs
popf
out
les
sbb
retf
lock
adc
jns
dec
cli
retf
stos
rcl
fwait
in
fnstcw
adc
sub
sbb
and
mov
hlt
sbb
pop
std
in
cmp
lods
pushf
nop
adc
push
scas
inc
sahf
or
rcr
add
pop
and
xor
mov
xchg
scas
push
sbb
or
mov
adc
rol
sbb
daa
push
jmp
les
adc
mov
jecxz
test
xor
adc
ficom
jle
(bad)
and
loope
(bad)
int
cmp
leave
mul
aas
cld
hlt
stc
jb
repz
icebp
cmp
and
push
push
add
mov
sub
retf
xchg
push
mov
pop
popa
cmp
int3
ret
bnd
xor
jecxz
mov
xor
dec
sbb
les
mov
jp
sar
push
ins
pop
test
fcom
xor
rcr
pushf
stos
xor
bound
int3
cli
xchg
cmp
aaa
popf
xchg
pop
imul
leave
inc
int3
xor
or
outs
out
inc
aaa
xchg
outs
jge
xchg
adc
sub
in
mov
add
push
ins
lods
inc
or
and
mov
fs
popf
test
pop
sbb
movs
adc
out
pop
inc
in
jne
movs
(bad)
mov
inc
or
popa
ds
sti
cdq
push
adc
push
add
int3
jmp
xchg
push
mov
push
pusha
(bad)
push
es
fld
in
in
pop
test
or
stc
in
aaa
or
and
xor
fisub
aad
popf
std
scas
adc
ret
aaa
xchg
adc
xor
xchg
(bad)
and
inc
xchg
(bad)
icebp
adc
cmp
adc
dec
and
or
in
mov
loope
xchg
outs
adc
vcvtpd2ps
leave
out
rcl
je
inc
out
add
in
ss
inc
mov
(bad)
(bad)
aaa
outs
adc
and
jo
cmp
mov
or
add
fidivr
rcl
cwde
les
xor
xor
cmp
je
cld
mov
ja
out
push
ret
in
pop
in
dec
jnp
lods
xchg
enter
or
(bad)
pop
inc
out
mov
xor
pop
push
ins
fstp
jle
(bad)
scas
cmp
xchg
dec
adc
mov
xchg
call
iret
sbb
cmp
stc
std
adc
lds
push
xchg
and
stos
adc
mov
cld
dec
xor
add
div
mov
xchg
sti
cmp
add
adc
push
and
fwait
add
xchg
cmp
inc
adc
jg
adc
nop
enter
mov
out
jle
fdecstp
adc
cmp
xchg
xor
xor
nop
xchg
xchg
lock
mov
das
jmp
shl
xlat
xchg
(bad)
push
sti
aam
adc
retf
adc
aas
mov
adc
jle
sbb
xor
sub
cli
push
push
out
adc
jmp
dec
out
adc
push
je
lods
cwde
xchg
cmp
sbb
mov
in
mov
xchg
xor
lds
adc
mov
lea
jp
lods
push
push
rep
call
lds
sub
dec
sub
add
imul
popf
sbb
mov
call
fwait
(bad)
push
sbb
popa
retf
xchg
pop
jle
imul
push
daa
adc
lahf
sbb
xor
clc
add
movs
outs
push
adc
cmp
aas
dec
call
sub
pop
in
adc
lods
adc
imul
xlat
sbb
in
mov
mov
xchg
xchg
jnp
mov
hlt
addr16
repnz
mov
adc
adc
xlat
dec
int3
or
retf
add
xchg
popa
js
ror
cmp
nop
push
xchg
mov
ds
movs
out
fld
pop
jnp
push
bound
cs
das
xchg
jns
xor
mov
sti
sbb
xchg
pop
fs
push
test
push
loope
in
mov
jmp
push
ret
mov
in
cdq
push
sub
ins
outs
xor
gs
rcl
pop
ret
ins
je
dec
adc
not
hlt
test
(bad)
cli
cmp
adc
enter
arpl
shr
pop
push
sbb
cld
and
fstp
and
jne
sub
xchg
push
lahf
xlat
xor
adc
xor
nop
inc
js
adc
enter
adc
cmp
adc
dec
xchg
xchg
or
pop
lahf
mov
mov
push
mov
adc
pop
lods
push
xchg
xor
dec
mov
jb
or
xchg
les
rcl
inc
je
inc
cmp
into
aam
jle
jge
pusha
and
jae
adc
xor
sbb
adc
mov
push
jge
mov
mov
mov
cdq
je
xchg
pop
and
add
int3
movs
jl
repnz
add
icebp
cwde
dec
or
dec
pop
or
jmp
retf
dec
jbe
xchg
cmove
dec
adc
pop
jmp
cmp
add
cmp
and
add
or
(bad)
adc
cmp
xchg
call
cmp
shr
dec
lahf
adc
inc
bound
imul
inc
jmp
(bad)
into
lock
xor
inc
adc
or
jecxz
adc
or
retf
or
mov
out
cmp
jp
mov
adc
sbb
dec
xlat
lea
jae
ret
addr16
ja
adc
out
mov
xor
jne
pop
mov
mov
les
cli
jnp
pop
retf
loopne
in
cmp
jg
data16
xor
lods
adc
shrd
jl
mov
inc
daa
repz
mov
ret
jae
outs
cmp
scas
enter
cs
enter
or
sbb
rcr
cmp
or
cmp
cdq
mov
std
les
add
retf
jmp
inc
jb
xchg
enter
in
hlt
test
pop
sbb
sub
aam
push
addr16
fist
daa
inc
inc
repz
adc
lahf
fcomp
or
jle
add
fistp
jp
and
ja
aam
lea
sbb
add
(bad)
aam
loop
sub
pop
in
into
(bad)
dec
xor
pop
inc
ss
adc
jp
and
inc
push
sbb
test
clc
call
stos
pop
leave
adc
inc
imul
mov
lea
ror
add
push
mov
gs
push
loopne
in
add
repnz
sbb
bound
adc
loopne
int
sar
adc
mov
icebp
fdivr
test
push
arpl
aam
stos
add
jmp
cmps
cmps
add
sbb
push
movs
or
int3
and
sbb
imul
xchg
mov
in
xor
add
pop
fcom
cwde
pop
pop
(bad)
adc
stos
mov
mov
fwait
mov
and
push
push
in
or
dec
in
xor
std
inc
dec
call
push
test
push
enter
jecxz
gs
mov
movs
es
push
pop
arpl
adc
mov
xchg
int
clc
lock
cmp
in
mov
retf
push
xchg
jmp
(bad)
pop
cmc
pop
sahf
and
mov
xchg
pusha
xor
xor
mov
push
in
jmp
retf
iret
adc
lods
popa
pop
shr
fadd
and
adc
cmp
ror
jb
add
adc
in
push
pop
fcomp
cmp
cmps
xchg
outs
or
(bad)
sahf
enter
pushf
jp
cmp
ins
jb
movs
jbe
int
dec
in
lahf
mov
(bad)
inc
inc
sbb
cmp
out
push
pop
scas
je
jnp
cld
ins
sbb
cs
sub
xchg
(bad)
je
scas
push
sbb
jns
pushf
xor
add
lea
inc
mul
sbb
jns
pop
loop
cmp
mov
inc
dec
adc
iret
pop
nop
adc
add
adc
jge
ja
mov
rol
(bad)
adc
inc
or
mov
pushf
jnp
stos
and
scas
jo
movs
mov
dec
aad
loopne
xchg
dec
push
daa
retf
sub
ins
mov
inc
mov
out
or
mov
xchg
outs
push
sbb
mov
xchg
cs
jp
fiadd
adc
mov
into
stos
mov
inc
scas
cmp
fwait
adc
jge
dec
dec
sub
mov
test
cwde
or
mov
outs
cdq
adc
jmp
test
add
jb
dec
cmp
mov
ds
xchg
pop
adc
scas
pop
sar
sbb
xor
xchg
cli
mov
jne
push
jmp
jle
out
xabort
js
add
mov
mov
mov
out
xchg
push
cmps
mov
sbb
sbb
int3
idiv
arpl
cdq
pop
aad
loope
mov
call
push
dec
add
clc
pop
je
int3
inc
(bad)
(bad)
xchg
arpl
add
retf
sbb
imul
jnp
xor
cmp
sbb
jp
dec
in
dec
imul
add
lea
push
repnz
push
sbb
dec
mov
ror
outs
and
and
add
je
arpl
inc
cmp
mov
inc
dec
cwde
pop
lods
adc
push
sub
mov
(bad)
cs
pop
leave
outs
daa
and
in
adc
test
out
jl
xchg
jecxz
retf
push
fs
adc
ret
call
and
out
lea
xchg
jl
rcl
sub
cli
xchg
adc
in
mov
and
sbb
sub
pop
dec
hlt
loop
jmp
sub
sbb
fsubr
or
cmp
or
out
movs
xlat
rol
jle
pushf
mov
xchg
jmp
cld
pop
adc
(bad)
out
ins
stos
es
(bad)
cli
dec
add
je
cmp
fldlg2
retf
inc
(bad)
jecxz
and
mov
in
cmp
pop
or
or
sbb
int3
mov
fidivr
xor
pusha
mov
pushf
jne
ss
in
sub
ja
inc
mov
popw
or
dec
xor
imul
data16
outs
dec
cmps
and
jbe
scas
pushf
jg
pop
scas
and
push
jno
retf
and
mov
popa
push
test
sbb
and
loope
les
sbb
out
inc
cli
fsub
adc
cs
xchg
es
inc
addr16
cmp
jae
fstp
lods
loope
call
mov
push
or
jecxz
sbb
jge
jge
push
cmp
fist
or
adc
ret
dec
movs
call
mov
mov
cmp
adc
lahf
dec
pop
shl
adc
loope
cmp
popa
jmp
push
push
pop
jmp
fst
xchg
pop
xchg
sti
xor
push
mul
lods
retf
xchg
rcl
add
es
adc
inc
icebp
and
pop
int
adc
dec
push
in
pop
inc
adc
test
stos
cmc
add
ret
movs
mov
push
outs
and
pop
mov
sbb
test
ficomp
inc
mov
(bad)
mov
xor
mov
xchg
mov
inc
jns
adc
xchg
call
inc
adc
mov
fs
adc
mov
adc
xor
jge
pop
jl
movs
sbb
mov
cdq
mov
xor
adc
push
xchg
pushf
scas
and
jmp
sbb
or
adc
jno
cmp
jl
ret
bound
(bad)
adc
cmp
lock
pop
mov
adc
fisttp
leave
inc
inc
mov
push
inc
(bad)
mov
clc
fcomp
inc
sbb
jl
imul
jns
repnz
lahf
cmps
push
cmps
push
xor
or
retf
(bad)
enter
pop
and
sti
inc
add
xchg
pop
sub
nop
mov
cmp
pop
test
pop
pop
inc
call
clc
mov
retf
adc
add
sbb
loopne
xchg
mov
mov
arpl
jo
adc
mov
fs
push
cld
adc
int
std
cmc
push
shl
xchg
imul
jb
ror
mov
in
pop
sbb
les
mov
cli
mov
ja
cmp
lods
mov
xchg
xlat
jnp
jns
das
push
lds
add
lahf
xchg
adc
mov
pop
push
add
mov
push
sbb
(bad)
out
jge
mov
sub
fcomp
mov
mov
inc
or
or
into
sub
pop
mov
sbb
fxch
pop
jne
sbb
pop
mov
fidivr
mov
and
retf
push
stos
loope
stos
push
push
pop
xor
clc
sbb
push
retf
sar
loopne
and
pop
fmul
and
mov
out
les
clc
mov
sub
push
ds
sbb
mov
add
add
out
lahf
lahf
fwait
inc
or
xlat
sbb
sbb
pusha
shl
push
sahf
xchg
and
xor
sbb
dec
fdivr
and
aad
push
mov
pop
movs
(bad)
in
push
xor
inc
test
and
adc
push
or
mov
in
sbb
cmp
aam
(bad)
jo
iret
adc
mov
or
adc
pop
and
mov
adc
jb
xchg
adc
sbb
sbb
cmps
adc
jge
retf
xchg
jo
jns
fdivr
add
sahf
adc
hlt
retf
movs
call
xor
and
dec
lahf
aad
push
cmps
cwde
xchg
fwait
or
mov
pop
leave
sar
adc
mov
rcr
mov
in
mov
sar
xchg
adc
scas
pop
pop
cmp
out
adc
mov
fdiv
adc
and
retf
mov
fcomp
cmp
test
xor
inc
or
or
es
call
or
sub
xchg
movs
test
adc
sbb
sbb
mov
cmp
xor
pusha
movs
pop
mov
lds
neg
les
or
adc
stos
pushf
push
push
shr
jl
scas
inc
in
push
inc
or
popa
sbb
inc
ja
inc
xor
jo
adc
lahf
es
cli
fisub
call
inc
xchg
dec
(bad)
cmp
icebp
adc
out
test
hlt
and
mov
push
add
add
sbb
inc
or
and
sub
shl
cmp
xchg
(bad)
and
stc
in
(bad)
enter
les
xor
or
out
push
retf
mov
adc
pop
loope
jmp
xor
sbb
mov
mov
dec
cmps
jmp
jle
mov
sbb
inc
stos
xor
mov
jmp
sub
push
(bad)
in
mov
pop
scas
sbb
push
repnz
dec
movs
mov
jecxz
xchg
push
test
fadd
cli
jmp
mov
or
mov
stc
repnz
push
(bad)
fsqrt
pusha
adc
or
mov
sub
pop
int
adc
push
or
ins
test
cld
mov
adc
pop
sahf
jbe
xchg
inc
adc
das
shl
sti
adc
pop
je
mov
jecxz
xor
lods
inc
xor
or
sahf
push
iret
repz
adc
xchg
push
mov
sbb
inc
int3
mov
lock
adc
dec
call
imul
xchg
xchg
stos
pushw
adc
add
inc
addr16
xor
jle
iret
aas
in
cmps
je
jne
xlat
pop
push
fadd
xchg
scas
out
inc
cmps
rol
cs
adc
outs
add
mov
mov
pop
fadd
dec
cmp
pop
push
hlt
sbb
xor
sub
cmp
push
ins
dec
inc
jnp
adc
xchg
push
ja
push
test
adc
(bad)
stos
ins
xchg
in
(bad)
mov
out
leave
out
cmps
jmp
jnp
inc
xlat
add
adc
shl
or
idiv
inc
inc
mov
push
pop
fnsave
clc
mov
xor
aam
lock
mov
(bad)
mov
mov
inc
movs
jmp
pop
(bad)
out
adc
jecxz
sub
push
fcomp
adc
mov
xchg
bnd
ins
(bad)
sub
dec
iret
test
adc
or
lods
pusha
aas
pop
jmp
sbb
adc
xchg
jbe
(bad)
adc
push
push
lds
push
adc
pop
ins
imul
push
in
adc
pusha
fst
push
jmp
cwde
das
mov
add
push
lods
sar
jb
in
xlat
rcl
rol
adc
aaa
mov
pop
inc
push
sbb
xchg
or
cdq
ds
mov
adc
xor
pop
push
test
dec
push
icebp
jmp
out
jmp
shl
add
dec
sbb
sar
call
adc
jno
fst
push
icebp
xor
inc
fbstp
ret
(bad)
retf
lods
mov
pop
imul
ds
add
xor
pop
xchg
ins
xchg
sbb
bound
mov
add
cmps
mov
ret
push
cmp
push
sti
ins
out
int
sub
jno
pop
inc
adc
test
clc
dec
ss
pop
lock
xchg
outs
jmp
cmp
call
mov
fdiv
add
scas
adc
repnz
rol
leave
mov
jns
sbb
test
pop
sbb
adc
pop
fcmovne
cmp
mov
push
mov
adc
js
adc
push
pop
mov
dec
xchg
push
push
in
les
ja
or
mov
stos
pop
mov
(bad)
sbb
sbb
orps
or
pop
dec
lods
adc
sahf
and
ret
xor
loop
sbb
push
adc
shl
sub
inc
or
call
mov
pop
sbb
jecxz
add
pusha
ret
dec
add
sbb
xchg
push
cmp
adc
lea
xor
movs
in
mov
add
aaa
jb
cli
cmps
adc
mov
pop
pop
sub
in
(bad)
jnp
mov
and
mov
adc
aas
inc
js
pop
test
dec
mov
icebp
push
iret
sbb
mov
aad
push
cmp
push
cli
adc
push
mov
xor
xchg
popf
adc
adc
ror
aam
cli
push
ja
pop
jne
dec
jmp
dec
xchg
add
inc
cmp
push
inc
mov
mov
push
add
daa
mov
adc
pop
dec
aam
push
in
inc
rcr
enter
xchg
adc
aaa
ret
jne
in
adc
push
(bad)
int
cmps
pop
xchg
cmps
stos
cmc
xchg
dec
pop
inc
xor
push
xor
push
aas
lahf
mov
push
xlat
dec
sti
or
push
pop
retf
sbb
das
xor
xchg
add
test
aam
mov
sbb
mov
mov
stos
ins
push
sub
adc
sar
and
mov
inc
das
cdq
imul
push
jne
in
fcom
dec
(bad)
xchg
pop
nop
das
in
sbb
xor
mov
les
aam
and
sub
test
add
dec
sub
mov
adc
cmp
stos
and
aas
xchg
inc
call
pushf
adc
fwait
mov
adc
inc
fnstsw
add
call
aam
inc
movs
cmp
inc
rcr
les
sub
fadd
add
xor
inc
pop
cmp
push
sub
out
or
test
adc
mov
jp
sbb
inc
inc
push
sti
in
pusha
ins
popa
add
jo
(bad)
cmp
xor
scas
aam
aas
into
call
add
push
jp
push
fst
adc
cmps
aad
pushf
adc
add
lods
mov
dec
out
out
and
pusha
adc
or
jbe
sbb
fadd
bound
in
or
push
cli
push
test
adc
mov
push
ins
adc
jmp
cmps
test
mov
enter
loop
mov
ss
jp
mov
xchg
je
push
mov
push
or
loopne
cs
xchg
inc
in
mov
xor
clc
lock
adc
pop
cdq
cmp
out
ja
push
ins
mov
sub
aaa
jl
fdiv
or
jg
cli
retf
push
xor
inc
pop
arpl
or
or
test
pop
jae
fcomp
jne
hlt
push
xchg
cmps
mov
loopne
lea
repz
aam
xchg
push
int3
jecxz
imul
inc
cmp
pusha
dec
sbb
cdq
or
(bad)
aam
mov
outs
sar
jae
pop
mov
outs
arpl
aas
cdq
in
jg
jne
xor
fsub
sbb
dec
adc
ins
push
jo
lea
adc
inc
xchg
mov
push
inc
int
neg
inc
retf
int3
pop
ds
call
mov
dec
les
sahf
mov
cmc
stos
mov
sbb
sbb
jle
test
mov
pop
lahf
dec
dec
inc
mov
invd
aaa
rol
into
mov
jne
sub
ja
out
jg
ins
out
pop
pop
imul
adc
retf
call
xchg
xor
ins
adc
(bad)
cmps
or
int3
xchg
push
icebp
mov
dec
and
stos
pop
cmc
aam
push
fadd
jmp
or
or
scas
loope
into
inc
mov
jns
mov
lea
loop
add
sbb
jl
call
outs
jbe
push
sub
sbb
jmp
fs
push
fwait
pop
jnp
sub
fs
xchg
repnz
adc
dec
adc
cli
pop
addr16
jne
sbb
dec
test
xor
push
dec
jmp
adc
out
(bad)
popa
adc
test
or
inc
fiadd
and
inc
inc
jecxz
out
xchg
push
xor
jmp
retf
leave
push
mov
aam
cmp
push
xchg
popa
jp
xor
sbb
loope
and
or
sbb
mov
dec
mov
stos
popf
in
pop
(bad)
push
scas
pop
dec
or
int3
inc
ret
dec
adc
xchg
add
imul
std
retf
adc
inc
int3
and
sahf
or
(bad)
cmp
aad
fdiv
and
inc
not
adc
inc
pusha
or
int
cld
push
in
pop
mov
xor
enter
ins
add
lock
retf
loopne
push
sbb
cmp
xor
scas
xchg
movs
clc
mov
sti
addr16
mov
dec
movs
dec
mov
cmps
sbb
mov
call
adc
fdivr
and
dec
jae
retf
(bad)
mov
aas
popf
jge
or
mov
or
or
sbb
add
test
ds
mov
adc
movs
aad
ins
fist
(bad)
pop
imul
mov
adc
das
jmp
clc
dec
jae
jl
add
iret
push
test
or
adc
jo
(bad)
movs
pushf
sbb
and
(bad)
aad
fist
jp
add
sbb
cmp
das
gs
pop
mov
push
xchg
pop
jp
in
push
jmp
dec
adc
and
hlt
mov
scas
aaa
js
xchg
mov
popa
xchg
adc
jnp
add
loopne
inc
fst
mov
push
push
xor
jmp
adc
mov
inc
hlt
cmc
xor
call
nop
mov
xchg
adc
jg
hlt
(bad)
dec
fild
jnp
push
jmp
or
es
retf
sbb
mov
pop
jbe
lods
(bad)
in
in
mov
loop
mov
jne
fiadd
push
into
(bad)
adc
fadd
adc
jle
inc
push
sub
mov
sub
push
mov
add
ja
sbb
call
sbb
daa
mov
loope
pop
hlt
dec
mov
int
cdq
ss
add
and
and
jbe
sar
xor
mov
(bad)
adc
pop
fs
ja
daa
imul
push
jb
or
sbb
test
inc
mov
or
adc
cmps
dec
rol
ds
fxtract
lods
xchg
adc
push
fimul
adc
clc
out
sbb
ss
inc
dec
inc
xor
jno
lea
mov
call
cld
inc
in
and
in
or
pusha
adc
adc
add
jmp
or
scas
pushf
les
rcr
dec
adc
mov
push
cwde
inc
cmp
sbb
mov
in
dec
ins
push
inc
gs
xor
add
mov
cmp
xor
pop
sbb
popf
adc
retf
mov
push
adc
and
mov
adc
ja
(bad)
or
adc
lahf
imul
and
rcl
lods
push
nop
fcom
jmp
mov
xor
mov
add
push
push
repz
ja
xchg
dec
mov
loop
fdivr
and
cwde
jbe
fs
ins
push
hlt
sbb
arpl
sub
int
sahf
out
jmp
popa
dec
pop
mov
(bad)
enter
cs
jno
xchg
add
nop
adc
add
pushf
mov
mov
adc
jp
sbb
lock
into
cmp
adc
mov
in
fimul
push
adc
retf
data16
mov
leave
jp
popf
outs
fs
dec
mov
in
in
push
into
outs
adc
data16
push
loop
jmp
dec
and
xor
mov
xor
push
into
xchg
cmp
jge
push
xchg
xchg
jb
sbb
iret
sbb
xor
es
retf
pop
test
xor
mov
adc
lea
adc
push
mov
and
aad
push
jp
loopne
cwde
and
adc
leave
xchg
pop
aaa
dec
push
dec
mov
or
sahf
or
jmp
mov
in
call
aam
pop
dec
bound
outs
cwde
push
pop
add
pusha
cmps
cmp
ins
adc
shl
push
lock
int
adc
(bad)
adc
add
int3
adc
sbb
jp
xor
push
ja
retf
dec
lds
adc
jo
sbb
add
mov
imul
arpl
ds
xchg
xor
or
pop
cld
sbb
(bad)
icebp
cli
je
daa
unpcklps
and
iret
retf
jo
bound
mov
xlat
ror
dec
jb
push
pop
adc
adc
into
(bad)
call
mov
push
cwde
mov
aam
add
add
adc
sub
fdivrp
(bad)
xor
aam
mov
xor
test
popf
or
sub
sub
pop
fld
retf
xor
in
xchg
pushf
push
in
adc
rcr
out
retf
jb
in
inc
xor
(bad)
cli
adc
shl
aaa
xor
fadd
pop
xchg
scas
jae
push
aam
inc
and
sub
jmp
sbb
scas
fisub
js
das
and
je
and
or
and
leave
add
movs
xchg
dec
pop
fsubr
cmp
std
js
mov
pop
sbb
int3
shl
je
cmp
aaa
pushf
sar
xchg
sbb
sub
ins
or
pop
push
sub
and
adc
mov
xchg
(bad)
call
hlt
sbb
icebp
loopne
adc
daa
repnz
jg
adc
mov
push
or
sbb
jns
mov
aaa
fs
loopne
adc
bound
and
and
(bad)
push
push
push
mov
cld
and
sbb
test
push
inc
sbb
push
jae
pop
sub
xor
clc
mov
mov
xchg
push
sahf
jg
jne
or
icebp
sub
aad
shl
out
xor
ins
mov
push
or
push
or
pushf
cmps
push
addr16
ja
sub
adc
aam
(bad)
mov
cmp
inc
push
inc
bound
adc
xor
pushf
adc
int
push
iret
mov
or
cmp
loope
add
adc
xchg
xor
adc
mov
ss
popf
push
xchg
rol
stos
out
push
in
shr
iret
pop
pop
push
inc
cld
retf
jmp
je
xor
inc
jmp
pop
pop
mov
stc
push
dec
ror
inc
xor
mov
rol
inc
ins
cmc
sbb
mov
adc
cwde
mov
fistp
into
add
dec
dec
push
or
inc
mov
aas
scas
cmp
stos
xor
adc
mov
lods
mov
outs
add
mov
repz
ffreep
lods
out
pushf
mov
pop
adc
cmp
pop
retf
scas
mov
ret
sub
pop
sbb
jmp
daa
ds
push
xor
mov
fimul
sub
pop
in
mov
add
pop
xor
sbb
call
xlat
xor
nop
cmps
adc
xor
or
xchg
adc
jmp
add
pop
xlat
adc
int3
std
cmp
das
pop
nop
(bad)
leave
mov
push
sub
repnz
push
js
xor
mov
sbb
adc
mov
das
lds
pop
push
adc
lods
adc
fsubr
sar
pop
adc
nop
aaa
inc
sti
movs
lea
mov
push
adc
(bad)
jno
popa
daa
lock
push
mov
dec
lods
xchg
pushf
fs
cmp
pushf
add
fadd
test
push
adc
or
les
add
cmp
hlt
stos
xchg
adc
push
pop
popa
mov
jp
test
sti
int3
mov
repnz
out
pop
in
dec
sbb
mov
cmp
mov
loopne
xchg
and
aaa
popa
pop
out
fadd
aam
aam
mov
push
mov
push
gs
jns
pop
lahf
hlt
jmp
in
inc
leave
cmc
adc
mov
test
xor
lods
push
xchg
xchg
cmp
aad
call
(bad)
je
sbb
xchg
call
mov
dec
and
xor
sub
out
and
fs
cmp
(bad)
pop
leave
jbe
add
adc
cmp
sub
pusha
adc
add
test
and
dec
es
ins
loop
stos
xchg
lods
adc
dec
int3
mov
xor
dec
adc
data16
xchg
mov
fadd
sbb
fisubr
inc
or
xor
mov
inc
bound
loop
adc
cmps
sbb
sahf
cmp
xchg
mov
push
retf
(bad)
cmp
sbb
lock
into
pcmpeqb
push
int3
xor
adc
sbb
and
not
xor
out
mov
inc
adc
dec
(bad)
pop
push
push
adc
and
mov
xchg
test
dec
outs
mov
std
adc
ret
xchg
loop
mov
sub
mov
add
mov
sub
inc
sar
sbb
neg
adc
push
adc
aam
outs
scas
es
sbb
aaa
fstp
jbe
push
jmp
fiadd
or
nop
sub
push
aas
(bad)
xor
or
ins
mov
xor
test
iret
sbb
push
aam
mov
push
std
cwde
cmp
jecxz
xor
xor
movs
jp
dec
add
popa
(bad)
jmp
dec
jmp
adc
push
cwde
clc
and
inc
adc
fld
push
sbb
std
clc
adc
aam
pop
bound
adc
popf
rcl
adc
outs
imul
cmp
loope
xor
pop
data16
popf
call
ds
loop
adc
jecxz
sub
xchg
aaa
in
and
add
adc
fs
cmp
push
adc
jecxz
adc
test
xchg
cmp
xor
jae
adc
push
cli
add
test
jmp
int
(bad)
pop
or
jge
setns
(bad)
sti
adc
mov
test
sbb
mov
mov
xchg
ins
in
scas
neg
push
fadd
popa
adc
mov
in
sub
imul
sbb
and
push
mov
add
lea
es
lods
(bad)
loopne
inc
loope
in
pop
or
mov
cmps
xor
cmp
xchg
call
mov
cmp
in
sbb
loope
fbstp
arpl
add
das
xchg
fmulp
adc
test
das
lds
(bad)
cmps
cld
cli
sbb
or
fadd
ret
adc
dec
aaa
inc
adc
adc
mov
adc
mov
popa
test
push
and
add
sbb
jecxz
jnp
jne
or
movs
dec
sub
lock
cmps
and
fsub
jnp
push
mov
ins
imul
lds
add
sub
inc
push
ja
mov
xchg
or
in
cmps
sbb
fisttp
sbb
jae
call
inc
outs
add
or
sub
ins
je
mov
adc
jb
xor
nop
pop
cwde
and
sbb
mov
les
loop
adc
leave
xor
ds
jmp
neg
imul
inc
jmp
xlat
sar
in
retf
jne
out
(bad)
xlat
dec
ret
add
or
call
sub
mov
jp
lods
sbb
jmp
daa
cmps
ds
cmp
mov
push
sbb
dec
scas
imul
arpl
test
movs
mov
repnz
pop
lock
in
out
in
leave
add
jne
sbb
push
xchg
dec
sbb
out
dec
jge
out
mov
out
adc
(bad)
rcr
cmps
push
aas
add
sbb
mov
stos
push
repnz
and
cmp
inc
adc
sbb
fld
shr
adc
lock
inc
in
inc
or
addr16
mov
cmps
mov
or
xor
mov
mov
adc
sub
pavgw
ja
ror
push
xchg
clc
mov
adc
icebp
test
sub
bound
cmps
test
lea
xor
imul
jg
into
sbb
adc
xchg
xor
mov
mov
(bad)
jl
push
push
cmp
jmp
push
jp
or
out
clc
lds
push
and
jne
pop
cmp
in
mov
cli
add
cmp
inc
adc
or
loop
cli
repz
movs
(bad)
adc
(bad)
push
xchg
and
lods
ja
pop
adc
leave
xor
mov
dec
fldenv
cmc
mov
pop
popa
call
inc
(bad)
cmp
xor
fwait
xor
mov
sbb
fdivrp
and
cmp
out
cmova
sbb
ins
popf
and
pop
sbb
xchg
out
adc
out
sbb
and
xchg
xchg
sahf
jmp
and
jb
jmp
and
ins
adc
jns
iret
or
mov
xchg
jnp
xchg
pop
xchg
pop
or
add
fst
mov
fisubr
jmp
int
cmp
mov
or
nop
adc
xchg
pusha
loop
cmp
idiv
jmp
scas
xchg
ins
or
cwde
stc
sub
ret
push
scas
mov
mov
xchg
aaa
fstp
xchg
mov
jne
sti
sar
iret
jmp
sub
pop
pop
pop
xchg
enter
dec
dec
xchg
push
test
lea
adc
leave
js
jns
hlt
mov
cli
pop
inc
std
sbb
sub
dec
movs
xchg
sub
push
ins
ret
out
retf
retf
sub
dec
xchg
scas
sub
cs
mov
xor
lods
jns
and
rol
(bad)
ds
ins
sbb
int3
and
xchg
out
dec
inc
test
adc
sti
ss
ds
xchg
sar
(bad)
adc
sub
mov
pop
and
sti
jecxz
dec
sub
aad
push
jne
movs
dec
mov
das
(bad)
adc
out
js
inc
adc
jg
enter
icebp
(bad)
fsub
cdq
cmc
test
lock
scas
cmp
jp
test
(bad)
adc
ror
popa
push
pop
sbb
or
jg
adc
imul
cli
jmp
outs
(bad)
and
syscall
fcmovbe
ret
sbb
movs
sub
cmp
sub
lock
adc
sti
xchg
jg
outs
jle
push
dec
test
sbb
ret
adc
adc
cmp
cld
dec
adc
add
iret
mov
adc
fs
in
sbb
mov
dec
enter
and
sub
dec
fcom
imul
adc
test
mov
(bad)
fmulp
jo
loop
jecxz
jp
xchg
adc
dec
mov
movs
in
push
stos
or
sub
scas
xchg
cdq
push
cmp
les
push
adc
mov
cld
daa
jne
jmp
sub
sbb
inc
sbb
jns
adc
out
retf
repz
dec
dec
js
jecxz
mov
outs
xchg
repnz
aaa
jo
cli
stc
adc
mov
mov
ins
mov
and
push
lahf
js
and
cld
in
jmp
xchg
lods
adc
xor
push
(bad)
adc
mov
loop
fnstsw
jnp
sbb
test
in
das
cwde
push
dec
sahf
jecxz
jns
and
inc
push
inc
cdq
or
sbb
and
sti
nop
(bad)
fucomip
adc
pop
pmaxub
je
sti
mov
or
xchg
sbb
jmp
jns
sbb
lea
in
and
xchg
mov
add
je
fild
dec
push
jle
add
mov
(bad)
test
fs
inc
aas
pop
jmp
jmp
bound
adc
push
dec
sub
and
inc
sbb
loope
mov
shr
xchg
sbb
mov
mov
test
mov
fisubr
pushf
test
cmp
stc
push
in
push
jbe
cmp
xor
and
push
popa
and
inc
bound
ds
pop
mov
or
aas
adc
pop
mov
outs
mov
add
mov
pop
ins
lock
aam
xor
mov
cli
(bad)
test
sbb
imul
jge
arpl
xchg
in
arpl
add
ret
test
adc
addr16
mov
add
xchg
dec
cmps
fs
bound
mov
cmp
jbe
adc
add
adc
(bad)
clc
add
pop
cmps
in
shl
xor
in
mov
add
in
sub
cwde
xor
hlt
mov
jg
adc
sbb
shr
xchg
mov
push
adc
aad
push
cmps
inc
and
ficom
sbb
fsub
jno
in
dec
out
repnz
(bad)
aas
out
fild
call
clc
sbb
enter
sbb
jmp
daa
or
es
movs
dec
mov
out
scas
jns
push
inc
cmp
jbe
call
xchg
sub
test
inc
je
xchg
int
adc
loop
and
js
jge
mov
dec
xchg
repz
jnp
cmp
call
xchg
cmp
dec
(bad)
loopne
es
sbb
xchg
mov
xor
jge
dec
and
aam
je
inc
popf
inc
(bad)
or
in
xlat
test
fs
xor
sbb
out
popa
adc
ret
inc
aas
xchg
inc
sub
sbb
sbb
adc
jg
jae
aas
imul
add
dec
and
enter
or
inc
push
lahf
xchg
push
pop
or
retf
push
outs
sbb
les
jecxz
clc
mov
mov
fucomip
je
int
data16
mov
fild
add
int3
call
dec
movs
push
sbb
fst
cmp
push
cmpxchg
in
or
jp
lock
adc
movs
sub
jbe
jns
adc
sub
das
arpl
sbb
adc
fimul
icebp
dec
lahf
fnstenv
add
arpl
retf
jns
jmp
cmps
shl
shl
jno
cli
loopne
adc
jnp
push
cdq
fldlg2
mov
scas
lea
pop
jo
cmp
adc
aas
sbb
retf
jbe
int
dec
cld
add
sbb
pop
jg
jmp
imul
int3
inc
dec
pop
cmp
aas
rcl
sub
outs
and
inc
pop
add
dec
jge
and
(bad)
loope
retf
mov
scas
in
adc
retf
cs
or
add
das
and
push
xchg
jle
ret
lds
inc
in
or
cmc
jne
mov
out
(bad)
clc
addr16
jp
push
adc
xchg
and
lods
mov
or
cwde
call
outs
mov
pop
adc
mov
cmp
test
xchg
adc
add
je
dec
push
mov
(bad)
add
hlt
call
jmp
jb
sti
mov
adc
cmp
pop
dec
loopne
add
or
loop
dec
inc
adc
push
stc
inc
vpand
add
cld
adc
ins
ins
jne
mov
pop
inc
cmps
not
mov
sahf
pusha
sub
inc
pop
or
add
pop
mov
cmc
leave
es
and
mov
test
dec
xchg
pop
out
idiv
cmp
add
fnsave
retf
popf
fild
inc
aas
mov
arpl
sub
jne
int3
int3
push
push
cmps
jns
aaa
pop
sbb
ret
das
stos
or
mov
jb
sub
xchg
xor
imul
fldz
sahf
jne
mov
sbb
aaa
push
rcl
push
or
repnz
ficomp
out
add
mov
xchg
cmp
loop
mov
sub
jne
add
dec
pushf
mov
aaa
xor
(bad)
cmp
jae
mov
pop
xchg
retf
je
xchg
ss
push
cmp
xor
pop
adc
push
jbe
jno
xchg
out
cmp
cs
cld
adc
or
sbb
or
xchg
imul
sub
call
or
xchg
push
sub
push
adc
push
xor
cmc
aad
bound
fadd
push
clc
imul
gs
cmp
xchg
push
das
stc
ror
or
mov
inc
fstp
xlat
jle
or
loopne
sub
pop
fdiv
fisub
jmp
sahf
adc
into
paddsw
push
jp
fist
jns
or
pop
lods
ds
add
push
in
mov
nop
jbe
je
xchg
sbb
in
dec
jnp
add
jge
pop
lock
pushf
adc
jp
movs
jecxz
fwait
and
cmp
add
bswap
in
pop
popf
cmp
pop
dec
push
and
imul
push
dec
rcr
fs
jb
inc
test
pop
add
out
fadd
ds
in
push
mov
adc
out
xor
adc
in
jge
xor
sbb
push
push
test
dec
cmp
adc
enter
unpcklps
ret
cmp
adc
int3
inc
mov
aaa
push
rcl
dec
cmp
pop
xchg
pusha
mov
push
leave
inc
pop
stos
mov
ret
mov
pusha
rcl
test
jno
adc
ins
xor
dec
push
adc
test
dec
rcl
mov
mov
adc
pusha
jnp
sub
repnz
sub
sub
not
(bad)
rcr
loopne
inc
pop
or
loop
mov
sbb
stos
daa
jno
xchg
pop
movs
add
fbld
ins
pop
xchg
jge
mov
and
adc
(bad)
push
(bad)
fmul
jmp
and
out
fnstcw
inc
mov
lahf
cmp
cmp
sahf
ud0
add
mov
sbb
pop
jae
xchg
pushf
dec
or
adc
jb
xor
sti
xor
adc
xchg
push
ins
jmp
adc
out
movs
mov
int
adc
mov
and
(bad)
fdiv
adc
retf
das
fdivr
fiadd
in
mov
pusha
ja
test
xor
call
lahf
sub
xchg
shr
adc
nop
xor
pop
pusha
(bad)
jne
mov
sar
jo
mov
pop
adc
(bad)
pop
jmp
ror
aaa
adc
std
jno
add
add
cdq
cmp
stos
aam
ja
mov
adc
in
jbe
mov
movs
sub
xor
inc
inc
mov
add
in
pop
cmp
lods
das
or
mov
cs
adc
aaa
ins
or
adc
sub
mov
inc
out
xor
test
ins
sbb
xchg
imul
dec
fwait
sbb
loope
mov
mov
movs
sub
movs
ins
retf
xchg
inc
sbb
jnp
ficomp
jmp
inc
adc
outs
sar
cmps
vmread
cld
jne
retf
in
aaa
and
jb
mov
push
popf
and
xchg
in
call
aam
pop
and
das
mov
jmp
pop
enter
xor
lods
(bad)
aaa
(bad)
repz
loopne
mov
inc
xchg
fldcw
fiadd
mov
fmul
stos
es
int3
and
pop
inc
mov
fmul
xor
mov
mov
mov
adc
add
or
mov
cmc
ds
xor
jno
outs
leave
pop
mov
es
pop
and
cmc
dec
ins
cmp
mov
mov
adc
add
rol
into
sub
aam
cmps
popa
pop
scas
push
or
retf
test
shl
loope
test
jl
pop
adc
or
mov
cmp
or
pop
adc
iret
loope
jae
(bad)
les
xor
jl
inc
in
mov
test
mul
push
jne
push
mov
mov
enter
(bad)
and
mov
add
adc
in
cmp
adc
mov
or
sub
xchg
(bad)
adc
adc
cld
jns
fld
ss
in
mov
add
xchg
mov
in
popa
and
and
cli
call
mov
test
rol
repnz
sub
xor
mov
inc
rcr
dec
repz
fcmovnb
adc
xchg
jns
popa
dec
inc
pop
push
sbb
sbb
psubd
or
xchg
cmp
xchg
sub
push
jecxz
popf
lea
lock
(bad)
in
add
retf
push
sbb
hlt
daa
fistp
jae
mov
sar
call
not
loopne
mov
lods
add
cs
std
hlt
jle
mov
lods
aam
jnp
adc
add
in
ror
and
sub
or
xor
dec
lock
mov
hlt
adc
inc
jecxz
xchg
adc
jmp
xlat
push
sbb
cmc
test
jae
popf
dec
cs
cmp
and
push
je
repnz
xor
xchg
out
stos
add
dec
cmps
icebp
jecxz
ret
sub
adc
jnp
les
in
movs
or
lock
add
xchg
loope
sbb
mov
sbb
aam
xor
arpl
jmp
outs
(bad)
sub
pop
hlt
add
sar
les
pop
inc
jmp
sti
retf
sbb
arpl
(bad)
fdivrp
xchg
ficomp
mov
test
into
sbb
or
mov
aaa
mov
cmp
jmp
int
jmp
xchg
arpl
mov
fwait
pop
call
scas
add
out
and
(bad)
popfw
adc
and
std
fst
or
cdq
jmp
jle
adc
cld
xchg
xchg
mov
push
movs
in
sti
or
sub
ror
fnstsw
mov
pop
xchg
in
inc
sub
sbb
dec
push
rol
scas
mov
xor
adc
cmp
cmp
sub
es
lds
inc
test
scas
outs
pop
xchg
inc
(bad)
adc
cs
inc
pop
xchg
cli
inc
stos
aam
aam
adc
inc
out
inc
test
div
jns
jmp
add
mov
pop
jg
loopne
inc
cmc
adc
push
and
mov
push
inc
imul
add
aaa
pop
mov
outs
mov
frstor
sbb
repz
sbb
ret
mov
or
jmp
ss
nop
push
xlat
fcom
in
(bad)
sbb
adc
out
je
rol
adc
adc
push
adc
nop
sub
add
out
fdivr
out
out
lock
fdivp
jmp
and
inc
loopne
in
ja
jbe
addr16
dec
frstor
cmp
adc
shl
scas
adc
out
popf
xchg
into
test
mov
mov
in
inc
out
cld
adc
stc
js
dec
mov
push
leave
or
les
jl
jmp
cdq
cmp
test
out
xchg
mov
adc
mov
stos
ss
pop
add
mov
imul
int
push
jne
mov
(bad)
out
inc
in
xor
push
shr
xchg
push
adc
rcl
mov
in
adc
repz
fwait
pusha
inc
fst
push
push
je
push
sbb
xor
cwde
loope
sbb
inc
adc
fisttp
aam
sbb
test
add
outs
adc
mov
jg
or
movs
lods
push
push
cwde
cdq
xchg
mov
xchg
sub
and
and
ficom
dec
fnsave
mov
movs
mov
push
mov
fst
enter
xchg
fstp
mov
lods
adc
test
sbb
adc
loop
cmps
popf
cwde
adc
mov
and
push
das
hlt
xor
arpl
pushf
frstor
jle
cmp
pop
rol
lods
test
(bad)
dec
ret
shl
adc
hlt
mov
xchg
jb
out
mov
ror
adc
in
stos
mov
jl
cmp
dec
sbb
mov
push
ins
test
ds
repz
les
and
xor
call
jnp
cs
cmp
stos
adc
add
lahf
scas
push
push
pusha
inc
inc
adc
outs
sbb
or
cli
mov
push
cmp
fldcw
call
pop
pop
fucom
push
dec
or
fiadd
in
cmp
fadd
in
pop
retf
aam
cmp
dec
lds
add
adc
add
mov
add
sub
sbb
ror
jnp
mov
imul
dec
push
adc
jb
add
lods
dec
sbb
dec
cmc
xchg
in
add
sar
jl
(bad)
scas
sub
repnz
ret
jmp
aas
jmp
idiv
sbb
mul
and
adc
int3
les
push
pop
jb
in
push
mov
pop
in
out
lahf
jns
jle
(bad)
sbb
loop
js
neg
and
retf
fbld
les
movs
enter
repz
lahf
lahf
jl
adc
aam
ret
xor
aas
icebp
xor
lock
ins
ret
and
pop
call
aam
inc
call
cmps
nop
add
mov
dec
add
cmps
lahf
cld
pop
lds
xchg
xchg
jo
dec
jno
mov
xor
les
pop
pop
mov
mov
repz
iret
cdq
fcom
inc
fistp
out
adc
in
adc
hlt
mov
and
fs
imul
cmp
fldz
leave
pop
jmp
imul
pusha
and
inc
cmp
mov
lods
and
ret
popf
or
dec
(bad)
mov
mov
cmps
add
in
std
pusha
stos
or
fld
jmp
je
xchg
adc
arpl
je
out
inc
movs
es
in
xor
adc
icebp
sub
(bad)
adc
mov
sbb
mov
aas
inc
jecxz
mov
mov
fs
scas
mov
mov
push
loop
adc
push
mov
or
fimul
lahf
test
sbb
cmc
xchg
jmp
sub
push
cwde
sub
jnp
pop
and
pusha
call
ficom
test
daa
mov
add
aam
out
inc
jg
mov
mov
adc
xlat
ror
inc
test
and
dec
jle
push
into
or
pop
xchg
adc
call
push
inc
leave
fcom
out
and
ja
add
movs
sbb
mov
movs
jns
inc
jmp
out
and
sbb
sbb
je
fcom
sbb
push
jb
mov
pusha
in
leave
es
popa
xchg
jns
mov
pop
out
mov
xor
sbb
sbb
nop
adc
(bad)
loop
cmp
inc
and
sbb
adc
and
or
leave
cmp
ins
adc
sbb
out
sbb
jmp
cmp
lods
popf
data16
adc
and
(bad)
jmp
jno
fdiv
lea
lds
mov
fwait
inc
adc
outs
and
pop
div
call
(bad)
fcom
fst
pusha
mov
into
adc
dec
in
popf
inc
mov
adc
out
sub
mov
rcl
add
xchg
mov
js
data16
fiadd
pop
scas
add
aaa
loope
adc
ss
ret
cs
cmps
es
push
call
sbb
mov
lods
pop
mov
xor
xor
aad
xor
push
lock
mov
into
mov
mov
out
es
dec
in
pop
les
hlt
dec
icebp
xchg
push
add
jg
aam
inc
cmp
addr16
dec
xchg
(bad)
push
jg
(bad)
adc
add
push
push
xor
push
daa
jbe
adc
jmp
popf
rcr
dec
xchg
inc
cmp
jo
das
int
and
adc
push
sub
jl
hlt
in
imul
(bad)
ror
shl
fcomp
rcr
cmp
push
push
and
popa
sbb
shr
mov
add
ins
pop
clc
adc
pop
and
add
xchg
hlt
out
jae
mov
aad
imul
push
pop
fmul
hlt
(bad)
dec
cmp
xchg
push
adc
fstp
ja
sbb
and
mov
in
sbb
loope
sbb
xor
adc
in
test
adc
imul
call
retf
xor
imul
or
sub
dec
cli
ds
sbb
adc
shr
imul
and
mov
imul
icebp
hlt
sbb
jl
and
push
ret
stos
adc
(bad)
into
mov
pop
adc
mov
mov
and
(bad)
adc
stos
xchg
mov
pushf
adc
jmp
jno
push
mov
dec
mov
retf
dec
lds
adc
adc
cld
lods
test
sbb
cmc
jge
sub
mov
mov
add
pop
and
arpl
rcr
adc
(bad)
clc
loopne
cmp
loop
jmp
push
push
retf
jae
cs
adc
test
or
mov
inc
adc
leave
jp
pop
lods
(bad)
add
pushf
add
bound
sub
mov
push
or
iret
fcom
inc
adc
ret
lea
jmp
mov
inc
or
shl
xor
cli
jle
ins
push
push
inc
add
and
cwde
out
movs
pop
jne
scas
adc
xor
and
pop
call
aam
mov
sbb
ins
cld
lods
in
and
js
nop
adc
push
sbb
scas
scas
pop
not
xchg
mov
jmp
call
or
pop
hlt
cld
and
inc
jbe
ret
mov
dec
and
adc
cmp
adc
pop
sti
add
je
jns
push
les
xor
or
adc
push
hlt
add
call
push
xchg
jmp
ror
fsubr
pushf
adc
enter
lds
mov
pop
add
scas
xchg
mov
adc
(bad)
mov
or
sub
movs
lock
sub
mov
push
sti
neg
or
sbb
cmp
cmp
adc
dec
jnp
jo
or
retf
in
mov
test
(bad)
adc
xor
dec
mov
dec
call
cdq
loop
sub
not
fs
(bad)
sbb
xor
jb
das
cs
sub
or
ret
mov
pop
add
cmp
ins
xchg
push
shr
movs
jecxz
mov
and
retf
repz
mov
int3
add
fwait
nop
jmp
hlt
aad
aad
cmps
push
and
mov
and
aad
xor
es
jecxz
jle
xchg
je
sbb
stc
add
mov
fnsave
push
sbb
in
sbb
jl
xchg
rcl
pushf
dec
mov
mov
mov
ins
adc
sahf
es
sbb
push
clc
test
pop
adc
movs
xor
aad
push
das
jmp
jp
cs
push
adc
into
(bad)
in
mov
mov
adc
jmp
cwde
mov
sbb
js
arpl
or
ret
lods
out
popf
push
pushf
pop
xchg
es
push
sbb
xchg
fisub
ss
test
call
xor
leavew
or
adc
mov
cmps
add
in
pop
arpl
movs
jmp
push
sub
out
in
adc
lds
rcl
adc
mov
(bad)
sbb
(bad)
cmp
mov
sbb
jp
push
call
aaa
cmp
sub
(bad)
repnz
inc
adc
stc
loop
mov
jmp
or
jmp
sbb
xchg
jb
sbb
imul
hlt
dec
retf
pop
or
aaa
pop
jno
push
data16
lahf
in
pop
cmp
pop
mov
(bad)
adc
xor
(bad)
out
dec
clc
lods
sub
adc
movs
imul
mov
outs
fwait
mov
xor
rcr
int
fchs
push
in
pop
(bad)
mov
out
std
cmp
in
and
adc
ret
sbb
test
push
pop
cmp
shr
sub
or
enter
sbb
mov
out
in
sub
sbb
in
xchg
jo
ja
cld
jnp
out
jmp
aas
add
inc
pop
test
jo
dec
xor
adc
push
jmp
fsubp
in
int
push
dec
ror
adc
mov
imul
shl
mov
enter
cwde
es
mov
loopne
and
cmp
or
je
mov
daa
jge
adc
push
ret
outs
jne
mov
add
jmp
or
cmp
cmps
add
frstor
movs
addr16
(bad)
pop
pop
(bad)
push
ss
enter
fs
adc
fist
loop
int3
xor
xor
(bad)
pop
stc
pop
sub
(bad)
in
in
dec
rcl
push
xchg
retf
jae
push
out
nop
and
push
adc
je
mov
pop
data16
lods
jmp
es
jge
dec
mov
push
push
nop
cwde
inc
mov
sbb
fidivr
stos
adc
pop
fld
arpl
imul
ins
mov
add
int3
pop
cmp
loope
sbb
inc
jmp
dec
add
ins
aaa
bound
movs
(bad)
outs
arpl
and
imul
or
pop
add
mov
inc
stc
cmp
and
ins
jae
push
dec
idiv
sbb
mov
lods
daa
add
mov
mov
add
aaa
adc
ffree
fwait
retf
mov
jno
sbb
jecxz
dec
in
enter
out
(bad)
repnz
push
xchg
pop
inc
rcl
test
or
mov
adc
lahf
sub
add
mov
adc
fcmovne
aaa
xor
scas
lds
outs
(bad)
adc
push
lock
xor
push
adc
sbb
xlat
sbb
cmps
xchg
pusha
fist
xor
(bad)
adc
fs
or
sar
aad
mov
sub
data16
xor
ins
dec
hlt
cs
dec
jmp
and
adc
sub
(bad)
jmp
push
cmp
out
mov
mov
test
add
je
cld
xor
aas
push
adc
xchg
lock
rol
sbb
mov
cdq
les
pop
push
je
add
daa
and
lods
pmaddwd
and
and
jecxz
mov
xor
ret
leave
adc
adc
jecxz
nop
adc
pop
cmc
cs
bound
int
scas
fnstcw
in
mov
fist
xchg
outs
retf
push
adc
movs
ret
dec
inc
add
sbb
mov
and
(bad)
push
scas
xchg
sti
adc
stc
out
cmp
jmp
fcomp
call
pop
test
aad
ss
das
fdiv
cmps
sbb
xchg
push
mov
mov
mov
ficom
push
dec
xchg
mov
adc
(bad)
dec
div
cdq
outs
push
push
sub
or
enter
dec
or
aaa
aas
cld
retf
cmp
xchg
dec
cwde
outs
outs
movs
jmp
stc
pop
(bad)
adc
cmp
adc
jp
fsub
std
aad
jmp
fld
pop
fsubr
adc
mov
hlt
fcomp
fnstcw
adc
push
into
fild
sti
fwait
in
add
mov
mov
mov
xor
xor
push
mov
pop
pop
or
push
or
out
sbb
dec
dec
adc
aad
arpl
jb
test
test
jmp
and
fmulp
xor
ds
xor
fdivr
(bad)
or
(bad)
mov
adc
mov
dec
xchg
out
das
fisub
stos
std
fist
fisubr
ror
fistp
sbb
jb
daa
xchg
xor
and
pop
or
call
jle
ds
in
cli
adc
cmp
jl
fsubr
(bad)
out
dec
shr
repz
xor
in
mov
clc
jmp
sbb
sub
fdiv
push
cmp
xor
cmps
adc
dec
iret
ss
and
push
fstp
out
mov
loopne
dec
ror
dec
push
push
dec
hlt
push
mov
icebp
scas
cmp
jno
(bad)
mov
jno
shr
pop
cli
cdq
test
push
mov
jge
and
jmp
mulps
cmp
adc
(bad)
std
pusha
pop
lods
in
adc
mov
sub
sub
pushf
adc
jo
loopne
aaa
loope
adc
xlat
cmps
dec
aam
mov
adc
loop
mov
inc
arpl
sbb
int
dec
push
adc
mov
add
adc
or
push
jno
adc
je
(bad)
jmp
mov
xchg
pop
jmp
retf
add
sbb
div
add
xchg
popf
(bad)
and
or
test
je
sbb
popf
js
jg
fild
ins
in
popf
dec
shl
out
int
(bad)
fsub
xchg
jbe
cmp
sub
cmp
loop
adc
test
hlt
pop
sbb
mov
lds
cmp
jno
fist
sub
jecxz
and
addr16
push
jmp
xor
hlt
inc
jmp
mov
xchg
xor
xor
imul
adc
loopne
fnstenv
push
(bad)
jmp
sub
pushf
add
mov
retf
mov
test
mov
aam
cli
mov
sub
dec
lods
out
cli
ss
int
mov
dec
xor
adc
rcl
int3
scas
(bad)
pop
adc
adc
stos
mov
fst
cmp
aam
jb
sub
in
lea
shr
xchg
inc
sbb
adc
aaa
aas
cdq
push
adc
xor
ins
mov
aad
pop
mov
push
adc
pop
ret
cmp
fs
test
lea
xchg
jo
retf
pushf
jle
icebp
out
jns
add
fcom
pop
push
in
push
jbe
bound
sbb
int
xchg
fstp
cmc
adc
jge
push
cmp
div
or
les
and
into
sbb
call
jecxz
dec
mov
aad
sub
(bad)
xchg
inc
int3
das
push
out
dec
xor
imul
jne
int3
add
push
das
inc
or
dec
or
out
sub
(bad)
or
adc
pop
push
mov
dec
js
mov
mov
out
xchg
inc
icebp
and
cmp
in
cwde
and
sbb
inc
test
jl
push
repz
mov
pushf
xor
mov
pop
cld
pop
std
mov
and
daa
push
lods
jmp
cmp
mov
fcmovbe
or
sbb
scas
xchg
cmp
or
sub
and
fdivr
pop
in
lahf
adc
cli
jp
pop
add
nop
jno
loop
pop
dec
push
rcl
sbb
loope
imul
dec
(bad)
loop
fdivr
sub
enter
and
push
push
loope
jmp
dec
nop
in
add
mov
test
inc
dec
in
cmp
jmp
stc
and
dec
xor
ffree
data16
xchg
push
jb
cmps
xor
adc
jmp
adc
push
pop
cmp
or
inc
adc
sahf
call
ins
adc
rcl
pop
out
adc
mov
clc
jbe
cmps
lods
adc
jae
add
cmps
cli
aas
adc
clc
gs
mov
sub
push
mov
adc
fcmovne
shl
pushf
adc
cmc
int3
inc
in
sbb
pop
popa
xchg
and
je
call
mov
and
adc
mov
lahf
in
xchg
mov
clc
icebp
dec
mov
adc
jne
jg
ss
(bad)
in
jmp
mov
std
add
xlat
jnp
lea
out
sub
cld
dec
cmp
into
adc
aam
cmc
push
outs
shr
jne
leave
aaa
test
add
std
adc
push
pop
pusha
fadd
adc
mov
repnz
cld
in
mov
int3
add
adc
sbb
adc
sar
and
gs
adc
aad
dec
cwde
call
cld
fiadd
inc
cmp
push
(bad)
leave
int3
adc
jbe
das
mov
dec
ins
shr
and
add
mov
adc
pop
dec
loop
cmps
mov
lock
xchg
xchg
xchg
mov
sub
xor
repz
out
loope
cdq
jo
pop
jle
cmp
ret
(bad)
jnp
lock
inc
in
ret
push
cmp
mov
inc
bswap
sbb
imul
adc
sbb
jne
cmp
sub
adc
stos
daa
mov
mov
loop
pop
or
xlat
adc
push
push
sbb
bound
add
mov
mov
int3
aaa
(bad)
outs
hlt
fs
scas
icebp
or
add
cmps
je
jmp
xchg
rcl
dec
mov
mov
xor
sub
xlat
ss
mov
adc
sub
scas
inc
jge
sbb
(bad)
arpl
dec
stc
cli
fisttp
jbe
addr16
mov
push
add
and
imul
cmp
fisubr
js
imul
xchg
mov
xor
test
push
aad
mov
int3
popf
xchg
or
fldenv
test
sub
(bad)
sahf
scas
or
(bad)
lock
jb
xchg
lahf
jl
ds
inc
into
add
xchg
or
pop
je
add
jo
push
xchg
dec
jl
or
dec
pop
test
mov
into
outs
pop
ins
and
int3
scas
fyl2xp1
fsubp
pop
dec
xor
jmp
mov
or
jno
out
sub
cs
cld
push
repz
je
sub
inc
sbb
fsubr
xor
sbb
fs
repnz
inc
aam
mov
(bad)
das
mov
or
jmp
xlat
and
mov
sub
push
jmp
ds
mov
movs
jecxz
pop
sbb
push
mov
inc
sub
imul
stos
(bad)
std
cmp
mov
and
adc
pusha
fistp
inc
ret
stc
shl
fdivr
xchg
adc
pop
(bad)
retf
sub
ret
dec
scas
dec
inc
pop
sub
jbe
sti
cld
out
push
movs
call
cmps
sub
lods
(bad)
dec
push
mov
or
adc
in
imul
icebp
adc
push
xor
cmp
iret
fidivr
adc
aaa
cmp
push
mov
stos
adc
inc
inc
mov
ror
sub
daa
jecxz
test
dec
sbb
cld
gs
mov
push
mov
out
das
fstp
scas
test
adc
dec
retf
jmp
cmp
outs
test
lods
push
mov
or
adc
push
sar
sbb
jg
cs
mov
add
das
push
ins
adc
dec
or
or
repz
xchg
push
aaa
aas
jmp
out
push
in
push
jge
ins
gs
scas
adc
test
xchg
sbb
adc
mov
std
aam
nop
push
jnp
stc
popa
xlat
adc
jp
mov
xor
push
aad
call
fist
rol
cmp
sbb
and
and
push
cld
es
xor
sbb
jb
inc
pop
loop
push
fcomp
cli
sbb
aas
jmp
sub
dec
shl
add
pop
hlt
add
popa
cmp
scas
dec
outs
dec
(bad)
pop
adc
ret
fcom
ss
pop
xor
pop
or
add
adc
xchg
mov
mov
mov
lea
xchg
ficom
pop
xchg
push
push
test
adc
inc
and
jle
sbb
ds
inc
push
mov
jo
cmp
popf
fsubp
dec
fnop
leave
adc
or
imul
fiadd
or
sub
adc
ss
and
sbb
fild
cwde
adc
das
inc
movs
dec
in
loope
repz
inc
xor
cmp
fcom
push
add
mov
cli
inc
adc
dec
std
fld
ins
push
push
bnd
adc
stos
neg
popf
addr16
aas
hlt
ror
xchg
add
scas
and
sub
les
fwait
xchg
and
or
adc
push
pop
ret
mov
dec
xchg
imul
stc
cmp
sbb
jo
cmp
jle
test
pop
lds
adc
es
mov
(bad)
adc
into
loop
and
pop
fisttp
ja
stos
lea
adc
or
in
jmp
adc
xchg
neg
sbb
push
sahf
adc
adc
cmps
mov
stc
push
and
fdiv
xchg
push
add
ror
push
ds
cmp
adc
(bad)
out
pop
movs
xchg
and
iret
stc
push
adc
ret
push
jg
pop
int
sbb
mov
sbb
mov
add
retf
sub
adc
(bad)
stc
pop
ins
or
fist
cmp
lds
adc
xchg
fs
push
cmc
call
mov
pushf
out
stos
jbe
or
arpl
icebp
fstp
push
xchg
adc
and
pop
cs
pop
adc
and
push
sbb
cmps
xchg
cmp
sub
sbb
call
jge
idiv
xchg
dec
cmp
rcl
jae
pop
push
fadd
add
call
aam
js
jl
mov
sti
jmp
jo
inc
inc
sbb
in
stos
shl
in
clc
adc
cli
movs
leave
out
pop
mov
cmp
call
jmp
retf
xchg
sub
cmp
add
mov
imul
or
je
loop
push
ins
int3
adc
push
sub
lea
not
ss
adc
in
xchg
ret
mov
popf
sbb
pop
iret
push
pop
jge
inc
outs
stc
leave
shl
fcmovu
movs
mov
aam
pop
and
xlat
lea
fs
popa
ror
and
out
sbb
sub
cmp
pop
pop
test
shl
jmp
cdq
in
fwait
jmp
bound
jbe
das
pop
out
push
xor
shl
mov
pop
adc
lods
mov
retf
pop
inc
jo
sar
xchg
adc
push
dec
xlat
pop
enter
fs
push
dec
push
push
mov
popf
add
inc
cmps
adc
dec
pusha
push
push
adc
add
std
vpmuludq
imul
(bad)
cdq
(bad)
adc
xchg
in
adc
test
pop
sbb
inc
enter
aad
mov
shl
fnsave
inc
mov
sbb
push
aad
dec
inc
or
or
cmp
adc
sbb
mov
xchg
xor
and
xchg
inc
pop
push
and
ss
jg
retf
into
loop
test
lahf
adc
adc
int3
fisub
dec
sub
mov
xchg
pop
aam
je
mov
dec
adc
sbb
add
test
mov
test
nop
push
jbe
xor
jnp
xchg
fadd
fnstsw
adc
retf
in
sbb
adc
xchg
call
sbb
test
daa
das
stc
jmp
(bad)
xchg
gs
lds
inc
lods
inc
or
sbb
xchg
adc
enter
and
ins
mov
xor
stc
dec
scas
ss
mov
pop
dec
pop
pop
mov
neg
scas
(bad)
repz
int3
fadd
inc
repnz
pop
adc
pop
mov
(bad)
jp
mov
cmp
mov
cli
icebp
adc
xor
rcl
rcl
pushf
shl
push
mov
inc
push
push
clc
(bad)
xchg
(bad)
pop
out
xor
xor
in
mov
hlt
mov
sbb
pop
add
int3
inc
test
xlat
imul
mov
sub
ficom
and
mov
ret
push
call
nop
add
rcr
bound
mov
in
pop
push
add
cmp
enter
arpl
ins
add
mov
leave
ja
adc
cld
enter
in
xor
jmp
ss
dec
ficom
add
lods
out
mov
jne
int
and
adc
(bad)
clc
dec
add
aam
rol
in
mov
xor
and
int
xchg
mov
pop
adc
push
push
xchg
cmps
mov
bnd
xchg
xchg
pop
div
les
adc
xor
int3
xchg
push
xchg
mov
adc
rol
pop
loopne
push
pusha
ret
lock
cmp
dec
repnz
imul
lock
inc
mov
push
adc
adc
bound
push
shl
add
adc
pushf
add
cmps
adc
(bad)
jno
ret
leave
push
jo
adc
out
idiv
sti
cwde
loop
test
push
push
sub
sar
xor
bnd
push
in
push
sub
inc
adc
push
sbb
call
mov
sub
adc
sub
pop
adc
in
lea
sub
dec
lock
mov
push
test
inc
jmp
cmp
mov
mov
rol
xor
cs
add
pop
test
mov
adc
shl
add
ficom
pop
fs
or
and
rol
push
push
fmul
in
mov
cli
inc
lock
les
sub
adc
inc
mov
mul
or
retf
xor
adc
je
xchg
jns
and
or
es
retf
in
jg
not
pop
imul
sbb
mov
push
fwait
mov
xchg
adc
in
push
adc
cmc
or
xchg
scas
fist
xchg
retf
push
popa
cwde
cmp
pop
cmps
fs
mov
and
ss
(bad)
loop
lahf
mov
push
add
test
ins
mov
pop
adc
in
and
sub
cmp
movs
test
(bad)
ss
neg
adc
jl
adc
push
or
aam
dec
inc
lds
ret
inc
rcl
xor
test
daa
out
adc
cmp
loopne
or
add
jne
(bad)
aam
sbb
push
dec
ja
out
or
mov
(bad)
in
out
stc
xchg
mov
and
pusha
movs
pop
xchg
popa
jne
fdiv
fadd
push
pop
adc
leave
loopne
in
sub
nop
sbb
scas
cmps
and
imul
xor
aaa
mov
addr16
ret
or
mov
fist
rcl
movs
dec
inc
aam
fcomip
inc
inc
jg
push
sub
(bad)
ds
cs
add
gs
(bad)
mov
push
outs
(bad)
mov
and
iret
xor
dec
cmp
push
aad
or
daa
icebp
adc
push
cli
std
xchg
sbb
inc
out
sbb
or
std
sti
xchg
xchg
jecxz
mov
mov
dec
rcl
push
outs
cmps
mov
movs
retf
pop
push
adc
movzx
ss
call
dec
jne
or
loop
mov
dec
rcl
mov
imul
jl
sbb
mov
jge
mov
pop
mov
lods
mov
popa
scas
xchg
push
fwait
sti
or
mov
ror
js
or
arpl
mov
adc
ror
adc
out
pop
or
lock
sahf
jb
ins
push
int
xchg
inc
fsub
mov
xor
adc
sub
outs
shl
fs
adc
cld
in
pop
std
cli
adc
mul
push
mov
addr16
or
adc
popf
mov
mov
dec
pop
cmp
repz
aam
sbb
lods
es
fsub
arpl
je
xchg
retf
sar
sub
hlt
sbb
jg
xchg
jge
imul
test
in
add
sbb
inc
pushf
mov
movs
adc
mov
hlt
mov
inc
retf
and
sbb
das
in
pusha
inc
adc
push
mov
pop
mov
push
(bad)
push
lahf
out
bnd
xchg
lea
pop
mov
and
loope
sub
jl
adc
cmp
or
ins
inc
mov
and
xor
fs
dec
int3
cmc
add
push
imul
(bad)
xchg
add
ss
pop
jle
lods
cdq
xor
sbb
enter
int3
cmp
movs
fs
call
xchg
xchg
jle
add
adc
int3
in
cld
or
out
mov
push
shl
dec
jae
and
or
push
adc
sbb
cdq
inc
rol
fadd
dec
dec
out
iret
pop
adc
(bad)
(bad)
inc
pushf
adc
xchg
inc
sbb
iret
or
and
adc
shl
mov
icebp
cmp
mov
adc
dec
(bad)
iret
sti
retf
adc
gs
sub
js
fwait
cli
inc
add
add
aam
out
xchg
cmps
or
pmulhw
retf
pop
sbb
mov
push
cmp
sbb
mov
cld
jo
push
scas
sti
push
lods
pop
and
stc
adc
ins
push
sbb
dec
adc
call
fucomp
mov
lahf
adc
enter
dec
add
adc
lock
clc
and
loopne
jne
(bad)
mov
daa
push
adc
xchg
test
adc
and
cmp
ret
push
fdiv
xor
pop
add
out
mov
push
adc
data16
not
dec
adc
in
imul
or
cld
adc
mov
cmp
inc
mov
jns
outs
stos
push
pop
sub
and
fs
adc
add
mov
adc
not
adc
jns
xchg
pop
cmp
cli
fst
cmp
mov
loopne
add
ret
cs
xchg
sbb
dec
fwait
hlt
aam
add
push
repz
adc
cdq
mov
mov
fs
retf
test
mov
sub
out
ja
xor
xchg
push
cmc
(bad)
stc
and
je
cld
(bad)
fist
jo
cmp
pop
mov
add
mov
jnp
adc
int
cmp
xor
mov
push
push
ret
clc
fwait
push
or
or
outs
cld
inc
push
hlt
xor
(bad)
push
dec
fs
mov
fisubr
hlt
cmps
inc
sbb
xor
jno
pusha
lock
jae
sbb
mov
sbb
enter
adc
pop
and
pop
std
push
mov
add
sub
rcl
jns
mov
mov
stc
ret
adc
je
icebp
stos
test
lock
adc
cwde
lahf
xor
lods
xor
or
imul
xchg
int3
adc
or
inc
sbb
retfw
nop
add
imul
push
cmp
jmp
adc
je
mov
sub
dec
mov
push
hlt
inc
push
imul
mov
fdivr
pop
js
sub
mov
adc
and
mov
bnd
mov
adc
ins
enter
ins
inc
js
ficom
jp
aam
mov
xchg
adc
shr
popa
inc
iret
pop
ins
rcr
adc
sbb
stos
shr
adc
aad
int
jp
add
int3
xchg
adc
mov
add
repz
push
xchg
xchg
jge
xchg
sub
adc
mov
aaa
pop
stos
adc
mov
cdq
sbb
es
mov
cld
pop
push
push
xchg
and
adc
aam
ret
push
das
xchg
sbb
pop
adc
push
(bad)
adc
add
or
clc
je
sbb
mov
int
cmps
push
adc
sbb
mov
mov
adc
mov
in
and
mov
imul
mov
jmp
in
xor
(bad)
adc
arpl
sbb
adc
cmc
int3
add
mov
adc
push
loopne
adc
movs
icebp
call
adc
fsub
(bad)
mov
pop
jg
adc
mov
adc
je
push
(bad)
imul
adc
stos
push
adc
div
adc
pop
data16
fild
movs
dec
in
jb
repnz
add
push
shr
jg
es
mov
ins
iret
jecxz
cli
or
fld
cmp
add
dec
mov
movs
mov
shr
sti
ror
stos
and
push
movlps
xor
aas
push
in
add
in
bound
add
loopne
data16
in
add
cvttps2pi
hlt
xchg
retf
movs
in
adc
std
in
mov
add
cmp
adc
and
in
jecxz
xchg
jl
rol
and
push
in
sub
data16
neg
adc
in
mov
adc
(bad)
cmps
dec
dec
mov
(bad)
jno
(bad)
mov
or
in
arpl
loop
cmc
pop
dec
jp
mov
xor
scas
sbb
hlt
in
push
repz
push
sbb
cmp
das
xchg
dec
stos
jno
pop
loopne
inc
adc
sub
jns
loop
mov
adc
push
dec
fs
das
int3
jae
dec
inc
xchg
adc
fsub
inc
addr16
movs
adc
mov
shl
sub
fstp
adc
lock
outs
jl
ss
xchg
or
pop
pop
push
jge
std
adc
jbe
inc
je
xchg
sbb
cmp
mov
jb
sbb
jmp
addr16
adc
xor
dec
aas
repnz
not
sub
inc
jns
stos
pop
jmp
inc
sahf
add
inc
gs
xchg
pop
lock
and
in
les
xor
xchg
std
push
lahf
cs
fisub
pop
movs
adc
mov
adc
xlat
xchg
aaa
inc
js
dec
push
enter
cld
push
add
(bad)
gs
(bad)
jae
aaa
loope
mov
popf
neg
nop
clc
mov
mov
or
jl
jne
sub
inc
repnz
adc
fild
xor
lds
test
sub
inc
arpl
test
mov
cmps
push
xor
jmp
mov
fisub
adc
jp
loope
xor
data16
pop
cmp
cdq
add
jns
adc
adc
rcr
dec
xor
mov
add
retf
xchg
push
push
adc
mov
jns
xor
arpl
ds
mov
or
int3
sbb
in
mov
add
and
pusha
add
mov
xchg
sti
shl
cmc
add
add
adc
fs
pop
sbb
cli
xor
outs
adc
cli
or
push
sub
mov
xchg
cs
into
cwde
or
movs
cs
fild
test
adc
mov
push
sub
dec
lock
push
cld
aas
cmp
mov
add
adc
add
call
aam
mov
adc
and
jbe
into
adc
fs
rol
jnp
cdq
or
nop
sub
cmps
pop
sub
rol
add
and
scas
jnp
and
mov
xor
jmp
fld
add
arpl
ins
pop
loop
adc
clc
cmp
cmp
in
call
xor
add
cmp
(bad)
out
mov
cmp
inc
mov
test
scas
or
mov
pop
push
addr16
sti
mov
mov
jecxz
outs
sbb
mov
stos
jg
cwde
ins
cmc
aad
ins
sahf
and
xor
sbb
ins
(bad)
push
cmp
or
mov
dec
sbb
xchg
out
je
out
adc
imul
adc
test
call
mov
push
mov
xor
lods
inc
push
sbb
pop
daa
outs
sub
not
inc
or
mov
or
adc
adc
mov
push
add
lock
mov
sub
in
or
push
cmps
lock
dec
popa
and
xor
add
adc
es
shl
and
jecxz
dec
adc
xchg
mov
mov
movs
pop
push
mov
sbb
push
mov
inc
push
adc
cmp
mov
icebp
push
pop
arpl
(bad)
adc
xchg
retf
scas
jge
push
jns
in
hlt
adc
sub
add
out
pop
sbb
pop
adc
sbb
adc
jg
push
out
(bad)
std
int3
popf
cmp
and
mov
call
mov
or
je
pushf
lods
loopne
jecxz
jp
push
sbb
cmp
pop
add
mov
sbb
popf
dec
adc
mov
pushf
ja
push
fwait
retf
add
shl
xchg
and
push
mov
adc
sub
jecxz
lahf
cmp
bound
mov
sbb
in
sahf
dec
repz
test
mov
inc
and
xlat
adc
in
mov
sbb
and
push
out
adc
ds
call
xchg
retf
stc
adc
ja
cmp
out
lock
mov
jmp
dec
adc
or
idiv
jnp
aaa
adc
es
dec
dec
arpl
pop
in
adc
out
js
je
adc
mov
jp
and
sbb
es
mov
mov
mov
pop
mov
setne
les
sub
push
test
xor
inc
pop
int3
dec
inc
fdivr
out
outs
or
das
adc
mov
mov
dec
gs
sbb
jmp
xchg
mov
push
dec
cmp
stos
jb
adc
sbb
xor
xchg
dec
mov
outs
shr
in
cmp
loopne
xchg
jae
push
jbe
push
icebp
sub
or
add
std
(bad)
aam
movs
cwde
test
mov
mov
jecxz
mov
or
rcl
jmp
or
test
jmp
cmps
cmp
hlt
adc
pop
jp
add
xchg
cmps
pop
push
sbb
dec
aam
jl
adc
(bad)
fsub
xor
(bad)
stos
adc
ds
and
mov
imul
mov
or
xor
popa
adc
out
push
sbb
xchg
push
leave
shr
sub
(bad)
xchg
mov
jno
add
adc
jl
xchg
inc
adc
cmps
cmps
inc
les
sbb
dec
movs
adc
cmp
push
adc
repnz
adc
(bad)
and
cmp
dec
xchg
mov
call
aam
sub
adc
repnz
call
inc
jle
cmp
or
sbb
cmps
adc
sub
cli
ja
xchg
inc
mov
adc
jb
xor
hlt
scas
aad
inc
mov
adc
in
adc
(bad)
adc
in
adc
outs
retf
repnz
leave
mov
adc
imul
xor
loope
mov
add
inc
repnz
mov
jmp
mov
pop
add
mov
sub
jne
adc
or
aad
popf
outs
adc
ds
imul
sbb
std
stc
sar
xor
test
(bad)
xchg
pop
aas
pop
scas
fs
icebp
jns
not
lea
lds
inc
mov
mov
pop
daa
xchg
fild
int
xchg
pop
xchg
and
xchg
adc
clc
sub
adc
fst
ja
sbb
in
pop
and
int
daa
push
lods
mov
icebp
lea
adc
idiv
and
or
cdq
mul
out
mov
push
dec
jle
push
nop
ret
mov
sbb
inc
sbb
inc
aam
inc
loope
and
sti
cs
clc
ficom
pop
sahf
inc
in
cmp
mov
les
push
xchg
mov
dec
adc
or
and
and
int3
stos
sub
cmp
hlt
mov
cmps
xchg
ja
add
test
push
inc
xchg
push
pusha
push
xor
dec
inc
dec
push
in
jmp
pusha
out
add
jle
lahf
sub
in
xor
add
hlt
enter
sti
pop
(bad)
in
fldenv
pop
out
pop
jno
adc
rcr
dec
sbb
retf
aam
jmp
add
mov
out
cdq
ror
xchg
jp
and
adc
jb
stos
dec
xlat
xchg
add
stc
rcl
mov
push
mov
(bad)
es
daa
fiadd
mov
gs
stos
inc
mov
cmps
lods
(bad)
movs
(bad)
sbb
cmps
adc
ss
fstp
stc
out
ret
in
or
fnsave
mov
imul
xchg
jle
leave
sbb
pop
inc
xor
(bad)
cmp
cmps
movs
jno
or
out
mov
adc
jmp
xor
sub
or
jg
imul
repnz
aad
stc
inc
sbb
push
imul
int
fdivr
dec
xchg
push
sbb
aam
in
mov
or
je
test
xchg
(bad)
shl
sahf
adc
leave
imul
sbb
retf
cwde
push
mov
test
lods
(bad)
mov
pusha
test
jae
xchg
out
sub
icebp
inc
hlt
fbld
xchg
jp
inc
or
into
pop
cmp
push
add
xchg
aad
mov
mov
stos
dec
sbb
stos
mov
jge
out
xchg
retf
imul
aad
sub
mov
in
push
fisttp
aas
adc
(bad)
jnp
adc
sbb
es
lock
fdiv
sbb
fucomp
sar
lods
pop
(bad)
fdivr
pop
dec
movs
out
arpl
sti
loop
cs
bound
sahf
pop
jmp
aad
sub
adc
inc
int3
mov
outs
adc
(bad)
lock
dec
ficom
int3
aaa
jno
out
xchg
clc
or
adc
and
or
outs
sbb
popa
cmps
scas
(bad)
dec
mov
arpl
pop
adc
xchg
mov
ins
jne
or
arpl
adc
stos
mov
adc
mov
nop
cmp
mov
push
xchg
inc
xor
pusha
mov
mov
adc
xor
enter
mov
dec
inc
and
jns
sbb
ret
ret
stc
jge
adc
mov
dec
and
es
jmp
pop
push
sahf
not
(bad)
call
popf
jb
sub
adc
out
mov
cld
ret
xchg
adc
inc
mov
lods
adc
shl
pop
cmps
xor
inc
psadbw
adc
xor
stos
mov
xor
ja
cmp
(bad)
inc
jmp
in
or
inc
add
(bad)
int3
jge
pop
cmovl
push
mov
push
popa
cmc
enter
or
inc
test
mov
push
jmp
(bad)
les
sets
sub
(bad)
out
lods
mov
mov
cmp
test
mov
adc
mov
add
adc
fbstp
aam
lock
adc
fdiv
add
adc
cmps
inc
xchg
jl
in
xor
sbb
repnz
leave
in
clc
adc
jge
or
fistp
test
adc
nop
jb
jns
sbb
jl
adc
add
pop
cmp
cwde
in
sbb
aam
mov
rcr
scas
xor
loopne
pop
idiv
push
jno
fs
and
repz
addr16
add
xor
inc
mov
adc
sub
(bad)
lea
movs
bound
neg
shl
sbb
dec
aam
mov
adc
icebp
rcl
push
test
push
pop
aad
fidivr
je
hlt
lock
add
or
cdq
adc
in
adc
xchg
aam
mov
sbb
rcl
jmp
adc
lahf
retf
popa
je
mov
adc
pop
fbld
out
mov
addr16
add
(bad)
mov
sub
push
xor
rcr
pop
xchg
clc
mov
icebp
call
fistp
cmp
loop
cmp
lahf
xchg
sub
and
into
in
clc
xchg
adc
push
and
mov
in
movs
inc
daa
scas
mov
xor
fist
push
inc
int3
ficomp
jge
sub
mov
or
sbb
outs
xor
(bad)
pop
add
mov
das
xor
stc
sbb
pushf
ja
aaa
xchg
dec
sbb
mov
fwait
and
mov
xor
ret
or
pop
sub
push
xor
xor
xlat
xchg
aad
fild
xor
arpl
ins
xor
repnz
jg
pop
int3
inc
(bad)
loope
pusha
aam
mov
xor
gs
jae
xor
test
std
mov
icebp
xor
add
push
dec
mov
shr
mov
test
jmp
pop
mov
and
and
not
dec
xor
adc
jmp
jl
add
or
or
fst
je
mov
scas
cmp
(bad)
out
dec
inc
cld
add
cmc
xchg
jge
call
and
inc
in
or
mov
jecxz
dec
mov
cli
dec
adc
jecxz
movs
inc
pop
aas
jno
add
(bad)
mov
jmp
fist
pop
mov
pop
cld
adc
(bad)
ss
stos
xchg
adc
iret
jbe
push
cdq
adc
add
adc
push
sbb
adc
mov
mov
mov
in
pop
inc
jno
addr16
in
xchg
sub
ret
xchg
fidiv
and
imul
ja
fs
xchg
cmps
adc
in
jle
jne
mov
xor
pushf
adc
int
lods
jg
adc
rol
aad
xchg
jae
fsub
loope
push
les
inc
inc
fcom
mov
inc
cld
add
stos
xor
(bad)
cmc
cwde
ja
imul
ficomp
lea
test
xor
add
in
mov
cmp
movs
lods
adc
call
dec
jmp
push
fst
repz
lods
adc
sub
and
and
(bad)
jb
out
pop
repz
adc
xchg
mov
pop
in
push
ds
sub
in
in
push
test
cmp
inc
mov
xchg
es
mov
push
bound
sub
jno
sub
aad
push
adc
mov
std
(bad)
retf
jecxz
aam
mov
jmp
xor
xchg
je
push
adc
js
mov
xor
inc
cli
mov
sub
xchg
retf
xor
repnz
das
cdq
sti
arpl
ret
cmp
adc
push
mov
rcl
stc
xchg
mov
fnstenv
pop
mov
push
loopne
fcom
enter
cmp
lds
add
mov
adc
inc
or
stc
push
jp
(bad)
mov
js
loopne
or
adc
mov
fisubr
cli
push
arpl
in
or
in
add
sahf
jmp
in
(bad)
pop
mov
les
and
adc
aad
add
xor
lea
sar
gs
push
fld
imul
fld
inc
add
fwait
mov
out
hlt
dec
inc
pop
rol
aam
mov
pushf
adc
mov
nop
xor
aaa
in
adc
xchg
jb
mov
adc
cdq
sub
aad
jmp
mov
mov
push
mov
cmp
(bad)
xor
mov
mov
outs
mov
adc
xchg
and
arpl
jmp
aaa
pop
mov
push
add
movs
add
push
pusha
mov
xchg
je
test
adc
rcl
mov
(bad)
jmp
test
add
cmps
mov
mov
adc
ds
ins
rol
pusha
cmp
inc
sub
xor
mov
dec
or
scas
dec
sub
and
push
cmps
pop
das
addr16
inc
dec
retf
cmc
popa
xchg
add
hlt
mov
and
add
jge
ins
inc
or
adc
cdq
fld
sub
push
and
adc
inc
push
or
dec
xchg
mov
adc
inc
push
and
neg
push
push
adc
mov
inc
push
sbb
sbb
les
mov
cmps
aam
fidivr
jns
pop
loopne
fiadd
xchg
lahf
mov
jp
adc
das
and
leave
mov
pop
int3
(bad)
pop
int
xchg
xlat
lock
cmp
dec
mov
xchg
ins
sub
rcl
retf
ja
jp
dec
add
std
xchg
pop
xchg
jae
(bad)
ror
push
adc
retf
and
cmp
push
cmc
into
push
imul
adc
mov
(bad)
aas
hlt
mov
cld
adc
test
ss
inc
fmul
out
stos
cmp
xchg
xchg
push
mov
test
jns
pop
ror
add
lods
cmps
sbb
push
inc
je
shl
lea
imul
in
int3
call
dec
and
cmp
adc
cmp
adc
outs
ds
mov
adc
or
push
push
pop
adc
int
jns
mov
mov
loopne
adc
out
adc
adc
inc
add
xor
adc
aaa
loopne
xor
or
xchg
imul
popa
adc
push
or
int3
shl
out
je
test
cli
jle
xchg
xor
out
push
adc
ss
mov
xor
pop
jg
push
xchg
cmp
xchg
scas
or
xlat
sub
add
inc
jle
iret
out
leave
xlat
out
js
out
adc
cwde
(bad)
cdq
lock
xor
mov
pop
stc
jnp
jns
retf
pop
push
dec
retf
mov
nop
dec
sub
adc
int3
aaa
das
in
aad
push
in
retf
das
js
sbb
or
enter
adc
rol
adc
pop
int3
ins
mov
aam
ficom
xchg
mov
ins
jmp
cld
lds
adc
add
pop
add
xchg
adc
jnp
mov
push
pushf
pop
xchg
retf
inc
mov
adc
cld
test
and
das
mov
movs
nop
out
pop
mov
mov
sti
push
adc
clc
mov
in
lds
and
adc
jns
bound
cmps
out
test
xor
or
hlt
rcr
xchg
sbb
pop
jae
(bad)
jne
outs
test
ins
pop
and
or
inc
xchg
and
lahf
movs
lods
outs
pop
adc
inc
pop
dec
scas
sar
aam
add
adc
imul
or
movs
mov
push
mov
mov
repnz
xchg
push
adc
out
int3
out
mov
cmp
mov
jmp
loope
adc
pop
out
xchg
sbb
sub
mov
or
add
push
adc
sti
cld
fcomp
repnz
es
aas
into
mov
xor
retf
imul
xor
jg
jp
jmp
(bad)
sbb
cmp
push
jg
cmp
jge
push
adc
xor
mov
sub
je
sub
xchg
icebp
xchg
jo
pop
mov
repnz
pop
mov
pusha
mov
xor
jnp
test
pop
ror
adc
cwde
gs
xchg
sahf
inc
in
ins
inc
pop
das
dec
and
add
test
xchg
xchg
or
and
pop
inc
mov
push
pop
jnp
repz
pop
loopne
push
mov
(bad)
rol
cmp
(bad)
jecxz
clc
cmp
sub
aad
gs
xchg
push
or
adc
shl
push
stos
inc
jecxz
mov
imul
out
dec
or
add
adc
sbb
mov
adc
xor
scas
ds
sub
mov
jb
pop
mov
adc
loop
push
adc
jl
xchg
imul
stos
mov
dec
adc
(bad)
mov
imul
cli
pop
adc
push
xlat
cmps
cdq
and
mov
scas
or
int3
adc
mov
add
pop
mov
sub
pop
fiadd
gs
adc
int
rcl
xchg
ins
out
lea
ins
fnsave
mov
shl
push
shr
or
std
jbe
pop
xor
jne
int
leavew
adc
and
mov
lods
adc
test
xor
sbb
adc
shr
mov
sbb
jb
div
daa
js
outs
adc
ror
je
jg
arpl
ja
adc
dec
jno
(bad)
xor
loopne
dec
lea
fisttp
adc
xor
fcom
cld
ficom
das
add
je
lds
add
test
pop
sub
out
jmp
sub
sub
shr
add
push
jge
inc
mov
xlat
pop
pop
movs
in
jmp
ja
aas
je
jae
pop
or
jecxz
les
pop
inc
sbb
test
cmps
ins
(bad)
adc
fsub
icebp
mov
xchg
cld
xor
sar
dec
jbe
inc
inc
push
iret
add
je
xchg
call
inc
pop
rcl
fs
adc
retf
cmp
xlat
into
xor
int3
stc
jmp
xor
inc
retf
outs
dec
xlat
data16
xor
call
xchg
push
jge
mov
push
push
outs
jg
dec
ins
push
jg
icebp
and
ret
out
in
jo
mov
pop
mov
retf
int3
(bad)
addr16
add
mov
cdq
or
cwde
loop
xchg
fild
xor
mov
xchg
push
cmp
and
stos
adc
pop
pushf
sbb
mov
sbb
jbe
jo
adc
mov
pop
test
sub
mov
push
repz
out
inc
push
mov
jge
adc
xchg
sub
push
aam
adc
mov
clc
or
in
jl
sbb
inc
dec
jno
push
imul
movs
mov
ja
gs
fild
or
pop
push
in
add
retf
lds
mov
mov
shr
gs
pop
and
mov
cwde
cmps
dec
sbb
or
in
push
xor
or
stos
mov
push
jg
mov
mov
xchg
add
ds
imul
test
jae
or
pop
data16
cmps
adc
les
fidivr
into
cmp
mov
movs
in
in
cld
arpl
adc
cmp
add
in
es
in
movs
mov
sub
jo
sbb
xchg
call
pop
stos
pop
int
or
xchg
test
(bad)
scas
rol
adc
aam
fisttp
add
lock
adc
stos
ja
and
nop
dec
add
mov
xchg
lods
into
and
mov
dec
fs
lds
shl
xor
adc
cmp
jmp
(bad)
and
add
daa
inc
nop
add
hlt
(bad)
mov
inc
(bad)
adc
enter
fwait
ss
adc
cmp
ret
or
mov
sub
out
in
and
sub
sbb
icebp
cmp
cld
push
push
mov
aam
pop
fcmovbe
vunpcklps
fucomip
ret
test
fldenv
int3
aas
nop
pop
adc
js
jns
retf
call
pop
push
inc
jp
hlt
jo
jge
sub
push
and
lahf
arpl
sbb
pop
jnp
adc
or
lahf
stos
cdq
sbb
push
mov
mov
ja
mov
and
std
adc
ficomp
call
sub
ret
(bad)
jge
adc
xchg
(bad)
pop
sub
sbb
adc
xlat
popa
inc
inc
push
out
adc
and
push
jp
mov
adc
jno
and
adc
and
test
sbb
mov
adc
mov
dec
call
neg
(bad)
movs
push
xor
sub
fucomi
je
scas
mov
adc
pop
out
cmps
xor
adc
arpl
push
loop
popf
sbb
dec
out
xchg
sbb
test
sbb
xchg
mov
inc
sub
adc
push
dec
psubusw
mov
popf
scas
cmp
stos
adc
xchg
pushf
or
sbb
rol
repz
push
xor
or
aas
out
lea
cmps
fst
push
add
int3
repnz
scas
ss
xor
xchg
cwde
call
fst
sub
je
xor
inc
or
into
loop
loope
xor
sahf
adc
jbe
xchg
mov
adc
fistp
mov
dec
dec
dec
cmps
mov
jb
fs
adc
dec
or
push
test
in
aam
imul
ds
mov
outs
sbb
cmp
leave
fist
jmp
loopne
hlt
test
push
or
and
push
test
or
bnd
pop
out
pop
adc
stos
mov
and
scas
adc
outs
cmps
dec
mov
leave
xor
add
lahf
adc
jl
aas
loope
mov
ds
call
ins
lahf
jno
fucomip
sahf
adc
sub
mov
(bad)
jmp
stc
daa
jge
sbb
lods
out
jecxz
adc
mov
adc
ins
mov
fist
or
mov
adc
lods
dec
mov
sub
push
jmp
lea
dec
fcom
lahf
mov
jge
dec
push
sbb
mov
push
and
ds
lods
cdq
and
(bad)
iret
mov
movs
cld
and
xchg
es
rcl
popf
rcpps
daa
icebp
adc
imul
adc
out
je
ret
sbb
fisttp
imul
inc
cmp
test
adc
mov
push
fs
cmovle
cmp
out
push
pop
(bad)
lods
data16
add
(bad)
push
dec
fisubr
jecxz
xor
push
and
pop
fcomp
adc
repnz
xchg
jo
sub
adc
push
add
out
icebp
xchg
push
lahf
cmp
mov
pop
test
cmps
push
inc
shr
bound
ins
mov
icebp
adc
stos
adc
jmp
mov
fsubr
(bad)
adc
sub
add
out
out
scas
dec
mov
xor
ret
adc
or
icebp
sub
lods
bound
outs
cmp
adc
xlat
fcom
cdq
sub
jl
(bad)
mov
out
or
inc
rcr
dec
jno
fsubr
adc
test
ja
or
inc
xchg
shr
(bad)
pop
in
cmp
test
adc
aas
call
dec
cmps
fild
loopne
outs
gs
das
leave
adc
adc
mov
adc
push
mov
or
sbb
std
jmp
(bad)
sbb
cmp
sbb
sti
xor
cmp
or
test
xor
jg
pop
xchg
pop
pop
stos
push
mov
and
scas
jmp
mov
adc
leave
call
movs
dec
dec
add
es
adc
loopne
fiadd
nop
cmps
xor
hlt
iret
add
adc
imul
lds
mov
cli
adc
bound
mov
pop
fucomi
mov
aam
push
pusha
into
pop
out
adc
inc
mov
cmp
ins
pushf
iret
in
(bad)
fisttp
call
fld
out
adc
movs
setns
sub
adc
xchg
push
push
adc
call
lahf
rcl
xor
push
stos
mov
out
xor
(bad)
push
adc
lods
test
adc
sbb
xor
push
xchg
es
test
icebp
outs
imul
inc
movs
out
jns
xchg
sbb
adc
inc
imul
outs
inc
das
clc
adc
pop
adc
mov
cmp
in
pop
fs
sub
jmp
jmp
add
dec
add
dec
sbb
(bad)
xor
test
or
sub
adc
leave
pop
bts
out
mov
adc
rcl
push
mov
movs
inc
les
jl
adc
out
ret
pop
fwait
cmps
and
mov
popf
repnz
sbb
push
test
xchg
sub
stos
mov
push
cmp
xchg
xchg
dec
inc
lods
push
in
icebp
mov
sub
and
fisub
rcr
add
mov
outs
sbb
mov
or
repz
push
mov
pop
sbb
jbe
or
je
mov
shl
test
stos
adc
and
sbb
sar
sub
push
jg
in
cdq
mov
not
mov
in
inc
sbb
sbb
fst
movs
cmp
(bad)
jns
adc
pop
mov
jmp
mov
adc
push
dec
push
inc
in
pop
lea
adc
scas
dec
jb
fist
addr16
test
and
inc
inc
push
hlt
outs
adc
(bad)
loopne
stos
int3
adc
inc
lock
lods
mov
aam
sub
add
inc
das
xchg
jle
mov
sbb
sahf
jns
xchg
inc
call
pop
cmp
mov
arpl
ja
ror
jmp
xchg
arpl
sub
add
popf
jecxz
out
xor
sub
sar
mov
scas
rcl
mov
xor
adc
pushf
adc
inc
mov
ins
push
(bad)
in
lea
adc
ror
rcr
call
div
int3
scas
and
icebp
mov
outs
outs
ret
mov
pop
retf
pop
adc
jg
mov
fcomp
ds
add
adc
mov
jne
cld
es
loope
je
leave
mov
xchg
xchg
out
neg
pop
jle
sbb
xor
dec
pop
imul
in
repnz
ss
push
cmp
mov
inc
or
xor
lods
pop
cwde
and
fadd
or
loop
mov
or
out
push
lods
shr
data16
xor
in
xchg
rcr
pop
fimul
ins
cld
stc
scas
adc
push
imul
adc
std
fist
(bad)
fisub
enter
arpl
in
es
sub
ins
cs
daa
mov
ds
sbb
adc
rcr
mov
push
push
mov
sub
adc
fst
repnz
stos
int3
lods
adc
xor
mov
adc
pop
fstp
jl
in
mov
in
call
or
pop
xchg
retf
xor
push
movlps
into
adc
stos
sahf
cmp
imul
leave
test
mov
in
adc
pop
(bad)
fst
in
dec
pop
inc
cmps
in
ins
fwait
and
sbb
xchg
cmp
cmc
pop
pop
ss
je
xor
in
adc
aam
mov
xchg
and
neg
and
je
repnz
movs
add
dec
jmp
push
test
inc
call
push
jb
and
(bad)
xchg
(bad)
xor
shl
push
aas
or
xchg
jmp
or
jmp
out
ds
jo
sub
mov
sbb
xor
sbb
aam
cmp
push
ja
jg
xor
xchg
faddp
fld
out
mov
ficom
jl
aad
ja
icebp
mov
in
xchg
adc
pop
aam
mov
dec
(bad)
leave
adc
ins
xchg
cmp
adc
pop
imul
(bad)
imul
and
adc
mov
inc
adc
fwait
fs
out
stc
adc
inc
lods
pop
push
mov
and
test
ret
and
outs
adc
mov
ja
les
dec
rol
adc
pop
dec
jb
mov
push
mov
add
inc
shl
jns
inc
pop
push
xor
in
mov
sbb
sahf
neg
push
xor
cmps
lahf
addr16
(bad)
add
pop
in
sub
jp
aad
loope
inc
ins
lods
shr
repz
hlt
sbb
jecxz
fwait
pop
sti
fdivr
adc
test
cmp
loop
mov
jnp
enter
cmp
cmp
mov
into
cmps
aam
mov
icebp
xor
addr16
pop
add
jg
xchg
es
ins
mov
xchg
jns
or
mov
ss
inc
scas
adc
test
xchg
adc
mov
adc
fstp
pop
adc
sbb
in
fwait
push
cli
sbb
push
daa
adc
jge
shl
mov
inc
lock
cdq
cmp
(bad)
je
aam
pushf
adc
mov
fs
fcom
mov
pusha
ret
scas
pop
rcl
or
adc
adc
mov
sbb
dec
adc
aaa
sub
dec
popf
mov
or
loopne
adc
jbe
loop
leave
sbb
sbb
push
or
je
sbb
test
lods
stos
mov
cmp
xor
pop
test
add
je
push
fimul
mov
ret
inc
inc
sbb
test
fdivr
in
scas
adc
mov
mov
dec
stos
lods
scas
aas
ins
xchg
rol
inc
ins
push
adc
inc
(bad)
imul
mov
sub
xchg
lods
cli
push
or
popa
and
inc
dec
cmp
adc
xlat
inc
xor
loop
cmpxchg
adc
push
mov
mov
dec
cli
nop
adc
scas
or
adc
push
popf
rcr
mov
loop
adc
inc
test
mov
xor
sub
fwait
xchg
adc
loopne
adc
ins
xchg
mov
fucomp
jnp
adc
nop
(bad)
and
clc
js
adc
inc
aam
xchg
mov
jle
dec
and
mov
aaa
(bad)
sbb
jne
cs
leave
pushf
or
xchg
stos
push
push
push
jge
mov
or
fcom
iret
jnp
pop
imul
call
shl
sbb
fcomp
je
add
daa
adc
and
sub
or
and
push
icebp
push
jne
mov
xchg
aad
mov
xor
das
inc
and
mov
mov
add
sti
dec
movs
pop
xchg
add
in
add
push
retf
into
adc
pop
sbb
mov
(bad)
test
mov
xchg
xor
call
out
je
jmp
inc
imul
dec
inc
cli
aaa
aaa
inc
mov
and
fidiv
jmp
pop
pusha
mov
xchg
xchg
mov
arpl
je
in
xchg
pop
test
ins
dec
fsubr
aaa
cld
fistp
jge
sub
arpl
pop
loop
or
push
sti
mov
sub
scas
sti
xchg
loope
adc
scas
ror
mov
xchg
retf
ss
jg
mov
cmp
out
or
cld
cmp
int3
or
push
aam
xor
aaa
jno
add
rcr
outs
adc
cdq
es
mov
sbb
and
adc
or
pop
xchg
movs
mov
sub
xor
iret
fxch
movs
sbb
dec
adc
and
mov
inc
hlt
(bad)
adc
shr
int3
or
aas
(bad)
retf
adc
mov
lea
sub
je
jp
adc
or
into
jbe
and
adc
add
sbb
test
sar
adc
out
popf
fs
mov
sbb
hlt
jmp
fadd
jmp
push
push
cld
mov
retf
sub
(bad)
adc
mov
mov
lea
push
xor
mov
fs
sti
outs
ds
int
cmp
addr16
xor
out
xchg
push
pop
call
or
test
les
xchg
and
ja
adc
rcr
dec
fbld
repz
sti
imul
es
add
dec
push
xchg
mov
inc
cmc
adc
mov
push
sub
sub
mov
(bad)
lds
adc
jp
mov
add
popa
je
ja
push
lea
dec
dec
pop
xchg
pop
add
cmp
xor
es
(bad)
mov
cmp
aaa
add
and
cs
stos
sbb
pusha
jle
pop
aad
push
mov
mov
ins
xor
ficom
fnsave
scas
ds
push
push
adc
adc
dec
mov
adc
xchg
and
icebp
ins
je
inc
cwde
or
ins
mov
scas
sbb
push
rol
sub
sbb
dec
jno
mov
rol
aam
adc
ins
out
cmp
xor
cmps
or
sub
aam
inc
or
adc
repnz
adc
push
lods
sub
cld
adc
cdq
sti
sbb
xor
fs
ins
push
pop
jae
or
int
xchg
dec
mov
call
mov
and
adc
stos
mov
pop
xchg
scas
adc
fiadd
adc
dec
neg
add
adc
out
das
xchg
mov
arpl
pop
dec
push
or
fnstcw
mov
mov
sub
mov
movs
fwait
pop
dec
test
sub
out
jne
and
adc
mov
popf
adc
pop
pop
stc
sbb
lods
and
fwait
mov
pop
push
icebp
push
sbb
xchg
xor
mov
jle
les
sub
hlt
jae
adc
mov
pop
adc
push
pop
xchg
clc
fsub
sbb
add
push
lods
lock
mov
push
adc
hlt
pop
iret
cmp
mov
or
retf
and
call
dec
ins
icebp
adc
xor
sbb
pop
adc
add
jne
add
adc
cs
and
shl
and
out
call
push
js
ins
daa
scas
repnz
adc
or
sbb
mov
(bad)
pop
sbb
mov
iret
xor
add
out
sahf
in
pop
mov
jg
scas
pop
aaa
add
push
(bad)
xor
sub
and
xor
mov
adc
repnz
inc
lahf
cwde
js
adc
cmp
stc
sbb
cmps
sbb
test
inc
test
mov
aaa
outs
or
mov
test
fwait
mov
ja
shl
cmp
js
xchg
inc
xchg
fdivr
dec
enter
mov
out
jb
and
sbb
mov
jne
out
loopne
cmp
shl
xor
arpl
mov
add
jbe
loopne
mov
lods
ja
mov
lock
pushf
sub
mov
sbb
ds
cmp
push
adc
shr
fiadd
and
pop
add
xor
inc
adc
dec
gs
dec
or
fbstp
outs
imul
fsubr
jmp
ss
cmp
push
add
and
lea
aam
aam
jmp
rol
adc
jmp
cmp
ss
into
xor
in
mov
rcr
(bad)
pop
push
sbb
shl
pop
(bad)
call
fiadd
mov
fmul
imul
jp
test
call
popf
in
fs
sbb
xor
xor
nop
(bad)
adc
in
lds
and
adc
pop
outs
fild
xchg
popf
xchg
jmp
add
fstp
lods
xchg
adc
jb
xlat
ds
enter
neg
leave
adc
in
inc
retf
lods
jbe
mov
dec
adc
js
adc
mov
loopne
mov
movs
xor
add
push
sbb
ins
mov
ficomp
xchg
adc
dec
xchg
add
pop
aam
pop
push
iret
call
mov
data16
dec
sbb
inc
iret
adc
clc
xor
adc
cmp
cmp
adc
rcl
hlt
adc
in
mov
in
sbb
movs
stos
dec
mov
push
or
jp
add
xchg
sar
push
inc
cli
mov
xchg
lods
cmc
xor
and
adc
sbb
dec
jge
scas
adc
sub
pop
fild
in
loope
mov
fmul
xor
and
adc
pop
push
pop
adc
sub
dec
adc
cwde
(bad)
cmp
stos
adc
sub
xlat
lahf
out
movs
or
cmp
add
mov
leave
nop
adc
mov
(bad)
js
ret
cdq
mov
jg
inc
xchg
retf
sub
pop
enter
inc
sub
aam
into
jne
pop
aam
push
sbb
arpl
aad
test
push
inc
push
cmc
jp
pop
xchg
push
adc
jo
pop
enter
sbb
xor
or
xchg
cmp
and
cs
push
cs
add
add
mov
pop
adc
adc
in
stos
jle
mov
(bad)
sti
in
jecxz
inc
inc
movs
jno
push
inc
imul
push
jbe
or
cmp
add
cdq
scas
push
scas
jns
inc
pop
xchg
dec
lea
in
adc
and
pop
aas
sub
imul
xchg
and
dec
dec
in
sbb
cmps
int
sub
and
xor
xor
fstp
jg
pop
mov
xor
mov
bound
adc
sbb
mov
imul
push
mov
in
movs
and
das
mov
adc
clc
cmp
(bad)
scas
sbb
in
or
xchg
mov
sbb
jnp
aam
and
inc
cmp
jb
loopne
sbb
cmp
das
add
in
mov
mov
mov
inc
push
mov
xchg
out
out
adc
movs
lods
push
in
jmp
inc
adc
push
mov
push
int
cmp
push
mov
test
sub
sub
or
pop
aas
fadd
inc
aas
mov
fdivr
test
inc
loop
push
and
lahf
mov
mov
sub
loopne
xor
pop
js
push
mov
movs
fstp
rcr
bound
lea
fst
mov
hlt
aas
mov
call
mov
(bad)
(bad)
in
out
mov
sub
aam
daa
aad
mov
sahf
adc
loop
inc
cmp
and
add
dec
adc
fsubr
rcl
inc
cmps
popf
add
or
je
clc
fist
(bad)
(bad)
in
dec
xchg
shr
jmp
xchg
dec
mov
aaa
jbe
aas
push
adc
outs
in
pop
push
mov
movs
add
sub
and
fmul
adc
jns
fs
sub
push
movs
sub
ins
add
push
(bad)
jmp
pushf
pop
mov
in
mov
popa
xor
jmp
cmp
int3
jp
loop
xor
stos
hlt
jmp
cmp
std
xchg
push
leave
jmp
mov
adc
icebp
popf
test
repz
dec
adc
push
dec
inc
in
mov
lea
or
dec
sub
and
pop
and
aad
adc
in
xchg
call
fstp
mov
cdq
and
in
adc
call
sbb
mov
movs
or
mov
repz
add
je
or
sbb
out
sbb
dec
loopne
sub
inc
xlat
jl
xor
cmp
dec
fs
imul
movaps
loop
inc
mov
in
ins
jp
fistp
loope
xchg
cdq
inc
imul
out
je
aad
adc
xor
xlat
imul
and
cli
sub
shl
push
sahf
call
sub
mov
aad
(bad)
mov
xor
push
fcompp
js
sbb
adc
(bad)
mov
push
arpl
mov
fsub
ror
in
fisub
sbb
ins
fst
xchg
jns
xchg
adc
jnp
or
inc
adc
dec
mov
imul
jmp
or
push
jmp
adc
cli
jns
add
mov
aaa
pop
lahf
aam
or
xor
pop
mov
or
in
test
jb
mov
imul
int
push
pop
and
sub
or
lahf
cwde
lahf
and
icebp
fs
test
mov
inc
fucomip
fcom
je
or
loopne
adc
in
arpl
cwde
inc
neg
test
movs
cmc
add
adc
icebp
mov
popf
les
retf
mov
sbb
pop
push
aam
push
aaa
inc
adc
and
fwait
ret
jne
adc
add
data16
xor
out
sub
push
repz
std
mov
push
inc
in
hlt
adc
dec
inc
outs
sbb
daa
test
test
repnz
or
dec
sub
pushf
inc
pop
sti
dec
adc
(bad)
out
mov
sub
mov
and
xchg
test
or
adc
data16
mov
adc
lahf
and
ds
movs
cmp
in
mov
push
mov
cli
cmp
aaa
or
jmp
xor
mov
mov
mov
push
pop
fist
loope
loop
les
in
into
xchg
outs
sub
sar
xchg
push
adc
dec
in
add
(bad)
in
retf
leave
dec
push
mov
xor
outs
push
push
out
scas
test
shl
mov
sbb
aaa
jns
xchg
adc
or
mov
outs
jl
in
gs
sub
aam
mov
xor
sub
inc
lea
fcom
mov
pop
fcom
iret
pop
adc
aam
imul
inc
and
icebp
jns
jno
push
je
sub
(bad)
ja
adc
inc
pusha
js
icebp
mov
add
enter
lock
das
popf
add
cmps
js
fyl2xp1
mov
sbb
lea
adc
add
std
adc
sti
movs
jp
push
lods
sbb
and
js
mov
push
rcl
sbb
les
cld
sub
mov
jle
hlt
mov
pop
dec
js
add
fsubr
cmp
jno
xchg
sub
push
adc
int3
jmp
xor
jl
call
retf
je
bound
enter
fisub
jp
loop
scas
mov
icebp
mov
std
test
je
cmps
inc
dec
ss
cld
mov
fist
jmp
push
push
push
ffree
fcomp
icebp
xor
ror
push
mov
pop
cld
test
add
dec
mov
adc
outs
jae
add
add
out
je
daa
ins
or
push
adc
mov
push
sbb
ins
(bad)
xchg
and
(bad)
sub
push
mov
ja
pop
(bad)
lods
mov
lock
sbb
mov
mov
sbb
push
push
adc
sbb
pushf
sbb
mov
(bad)
call
sub
lock
int
mov
lds
push
lds
cwde
xchg
mov
repnz
add
vmulsd
mov
popf
loop
in
dec
ret
or
and
hlt
retf
or
repnz
xchg
outs
jle
cs
bound
push
int
add
adc
gs
arpl
stc
jecxz
adc
(bad)
xlat
icebp
xor
aaa
push
sub
adc
sbb
bnd
mov
adc
imul
int3
jmp
push
inc
addr16
in
push
inc
lahf
gs
jne
in
in
and
add
fiadd
stos
adc
push
ret
xchg
dec
mov
cli
adc
xchg
ins
ins
rcr
sub
div
xchg
adc
movs
loope
stos
adc
sti
and
adc
mov
out
in
int
xor
imul
push
xor
aad
adc
lods
pop
pop
(bad)
(bad)
nop
test
lds
add
fwait
(bad)
retf
and
ds
repnz
(bad)
mov
adc
iret
sub
rcl
adc
out
jno
lock
push
adc
pushf
mov
xor
mov
jb
nop
cmp
push
mov
scas
sti
hlt
sbb
jnp
sbb
in
rcr
cli
xor
adc
sar
push
fs
or
icebp
hlt
mov
push
(bad)
(bad)
pusha
loop
div
or
leave
adc
movs
mov
dec
out
sbb
fst
out
add
jbe
push
sbb
stos
outs
int3
outs
push
adc
push
mov
jmp
rcr
cmc
lock
nop
jmp
adc
cmc
call
into
aas
out
ss
ins
mov
adc
and
adc
test
adc
push
data16
outs
jae
jle
cmp
out
pop
or
adc
cs
push
aam
xchg
cld
xchg
(bad)
pop
arpl
ds
cwde
sbb
ret
jl
xchg
imul
out
stc
fs
adc
jge
and
adc
sub
sbb
mul
push
inc
push
cmp
xor
xlat
call
dec
retf
cmps
cmps
push
and
xchg
adc
shl
push
add
fcmove
xor
xchg
jmp
cmps
out
inc
je
aam
add
cld
adc
mov
stos
xchg
inc
adc
call
jecxz
dec
xor
mov
test
mov
ret
icebp
or
mov
fadd
dec
adc
shl
jnp
aad
mov
adc
cdq
jge
adc
fwait
xchg
pop
or
adc
pushf
xchg
fsubr
jmp
imul
xor
jne
mov
add
repnz
ss
sbb
lods
or
push
ins
xchg
outs
dec
xor
or
or
por
push
add
cmps
test
xchg
mov
fistp
(bad)
xlat
je
repz
cmp
adc
inc
je
fsub
ins
push
in
scas
loop
and
loopne
sub
(bad)
push
dec
mov
ror
adc
das
jns
in
xchg
inc
jp
jmp
dec
or
mov
inc
adc
cs
jo
pop
retf
mov
nop
jo
push
das
pusha
call
xchg
jl
adc
inc
inc
adc
inc
mov
adc
jne
add
or
sbb
ret
fdiv
mov
inc
out
lock
and
hlt
std
jbe
ins
sbb
cld
mov
push
es
int
mov
fsubr
dec
sub
fsub
xlat
push
jle
mov
cmps
jo
push
(bad)
call
in
pop
xchg
sbb
pop
shl
out
add
adc
scas
clc
mov
add
mov
pop
or
neg
daa
ret
push
mov
cmp
sbb
or
jg
lmsw
mov
push
inc
pop
jge
jae
mov
xor
ins
add
adc
sub
jb
sub
jl
adc
cmp
sbb
xchg
call
mov
xchg
out
fldenv
jne
cs
pop
pusha
push
jge
fist
cmp
inc
popf
mov
fs
xchg
or
adc
(bad)
xchg
push
mov
outs
push
in
jns
imul
les
stos
jbe
jmp
push
fdivr
ficomp
pop
js
cwde
push
push
jae
mov
cmpxchg
fcom
movs
mov
iret
or
push
push
cli
icebp
arpl
sti
pop
scas
cmp
sar
adc
imul
and
pop
mov
in
aaa
ret
imul
sar
cli
add
sbb
ret
in
mov
sbb
in
adc
mov
cdq
shr
push
clc
mov
in
fidivr
movs
and
arpl
xlat
scas
jle
fdivr
ja
and
inc
popf
fdiv
aad
je
or
push
mov
pop
gs
sahf
adc
aaa
lock
xor
add
adc
pop
sbb
push
cld
xchg
or
xor
aaa
jo
loopne
je
hlt
cld
adc
ror
mov
mov
aaa
mov
loope
or
or
outs
gs
in
pop
les
je
inc
adc
pop
ret
dec
adc
adc
cld
movs
xchg
loope
adc
cmp
mov
clc
mov
sbb
inc
push
xor
repnz
int
in
jno
stc
mov
fisubr
cmp
and
(bad)
mov
pop
adc
div
pop
mov
out
je
mov
and
outs
push
ja
cwde
mov
cmc
sbb
adc
rcl
(bad)
popa
pop
push
push
sahf
adc
add
int3
je
aad
adc
test
bound
mov
jmp
push
fnstcw
lods
pop
cdq
add
push
xor
adc
fisub
mov
jecxz
(bad)
mov
mov
cmps
cmps
xchg
sbb
adc
lock
shr
aad
int3
jbe
push
lea
jmp
stc
js
fist
cmp
aam
int
(bad)
lods
mov
mov
lods
xchg
xor
pop
and
clc
lock
jb
das
mov
jae
lds
imul
cmps
mov
adc
dec
cwde
movs
cmp
mov
call
(bad)
loope
cli
lahf
popf
dec
pop
adc
cmps
adc
jl
not
adc
mov
cs
dec
sub
in
imul
fld
or
in
clc
repz
cmp
sbb
mov
cwde
aam
shl
add
fist
mov
cmp
push
mov
enter
inc
mov
retf
loope
jl
sbb
xchg
and
xor
push
pop
test
out
enter
cmp
popa
and
rol
pop
nop
xchg
(bad)
test
lea
out
adc
cmp
mov
cs
inc
xor
shl
adc
push
cmp
mov
outs
lds
mov
popa
cld
push
adc
mov
or
adc
pop
inc
fbstp
stos
in
stos
popf
inc
inc
mov
xchg
je
push
mov
das
push
iret
outs
pop
in
dec
or
push
pop
adc
test
add
push
pusha
sub
jmp
mov
aas
cmp
xchg
data16
xchg
out
xchg
aad
inc
and
pop
adc
mov
popa
adc
sbb
add
adc
and
fidiv
imul
outs
push
int3
repz
push
and
pop
nop
adc
jmp
xor
adc
mov
retf
hlt
mov
std
stc
pushf
jg
scas
or
inc
jg
jns
sbb
leave
lahf
adc
xchg
int3
fdiv
test
fs
cmc
jbe
inc
in
cmp
int
mov
or
add
lods
mov
dec
mov
les
cmp
add
and
gs
(bad)
sub
call
mov
in
mov
push
ja
ss
add
jne
div
clc
cdq
lock
out
jae
pop
sahf
rol
fnsave
push
cld
iret
adc
(bad)
daa
retf
jp
add
xchg
movs
mov
cmp
push
ja
std
sub
in
rcl
mov
mov
xor
out
call
jbe
pop
in
daa
arpl
fst
mov
sbb
adc
(bad)
cmp
nop
movs
mov
cmp
add
adc
fmul
std
repz
jmp
xor
jp
hlt
les
call
std
lock
scas
adc
and
xchg
cdq
xchg
pusha
mov
or
sbb
push
push
adc
xor
(bad)
in
int
fwait
add
cdq
jbe
cmp
pop
lods
adc
shl
movs
adc
test
test
sahf
in
mov
aaa
pop
les
mov
adc
mov
push
movs
dec
call
adc
out
cmp
sti
sbb
icebp
mov
adc
in
js
and
ret
cmc
push
adc
jmp
adc
mov
enter
pop
mov
loope
fdiv
adc
sub
inc
lods
in
movhps
mov
mov
inc
aaa
dec
adc
fcom
sbb
lods
retf
rcr
adc
mov
test
fnstsw
and
into
sbb
je
jmp
mov
lahf
cld
adc
cmp
jg
xchg
imul
adc
(bad)
fxam
sub
mov
call
pop
jmp
je
jo
dec
ds
aas
mov
adc
lahf
(bad)
sub
fdiv
fadd
cmp
mov
mov
cs
jmp
loopne
sti
(bad)
retf
test
sub
adc
pusha
(bad)
cli
pop
push
mov
adc
movs
adc
sbb
loop
in
or
retf
add
inc
pop
xor
iret
or
xor
hlt
add
aaa
pop
or
add
imul
out
sbb
adc
xchg
mov
sub
pop
(bad)
fisub
adc
jmp
scas
imul
jne
mov
or
retf
mov
add
mov
ss
or
xor
cmps
loop
popa
push
stos
and
retf
xlat
xor
xor
dec
xor
xchg
dec
ins
pusha
pop
imul
ins
aaa
sbb
pop
imul
cmp
inc
pop
or
aad
fwait
cdq
push
das
enter
loopne
popf
jmp
push
jecxz
xchg
aad
sti
mov
je
jmp
fs
pop
js
aam
adc
mov
fs
sbb
fs
cmc
shl
cli
xlat
pusha
cdq
adc
loope
scas
stc
push
imul
add
xchg
aam
in
aas
jo
adc
pop
jg
lods
mov
xor
pop
out
fldenv
loop
call
retf
lea
add
or
popf
in
push
je
test
mov
adc
out
pop
or
adc
xchg
pop
inc
(bad)
in
jno
mov
and
or
pop
movs
xor
sbb
or
inc
sub
cmp
ins
ror
(bad)
hlt
adc
addr16
jl
xor
int
add
movs
jo
out
sbb
push
fdiv
fs
cmps
dec
adc
push
adc
loop
xor
or
ret
push
mov
mov
xchg
cmp
mov
adc
mov
xchg
ficomp
push
pop
ja
les
mov
and
mov
inc
add
adc
sahf
cdq
ins
gs
mov
jnp
stos
dec
sub
lods
mov
cld
ret
cli
sti
jmp
or
loop
mov
fidivr
jg
fistp
fsubr
mov
mov
fs
inc
mov
adc
add
pop
aas
dec
repz
icebp
cmps
adc
loope
inc
pop
loop
adc
nop
cmp
iret
push
push
out
scas
dec
fcmovnbe
xchg
pop
inc
arpl
les
out
mov
movs
aad
xchg
mov
outs
xor
cmp
adc
shr
(bad)
stc
and
lods
out
je
arpl
fdiv
not
call
(bad)
mov
jbe
loopne
stos
int3
cmp
sbb
outs
xor
xchg
and
lods
retf
xor
sbb
shr
inc
int3
xchg
mov
stos
ficomp
push
fst
data16
pop
retf
inc
sub
inc
cmps
ss
sbb
cs
(bad)
sbb
dec
lock
call
jmp
mov
jmp
xchg
lahf
add
mov
(bad)
fstp
pop
pop
mov
(bad)
lods
dec
dec
xor
jg
cmp
rcl
imul
mov
mov
xor
mov
mov
xor
imul
and
int3
push
dec
sbb
scas
cli
dec
inc
mov
or
mov
sbb
not
mov
dec
mov
cmp
jmp
mov
fst
shl
mov
xchg
(bad)
(bad)
fbld
xchg
jno
xor
or
fs
pop
adc
inc
test
ins
adc
push
pop
popa
pop
cmp
leave
push
adc
mov
mov
mov
sub
sbb
sub
lea
or
xchg
pop
ss
(bad)
std
mov
adc
fadd
retf
fidivr
cmp
js
xor
mov
(bad)
in
aam
jo
outs
test
pop
scas
cmp
cmp
aaa
xchg
rcr
pop
mov
and
and
rcl
jmp
adc
pop
jg
adc
std
ss
sbb
inc
arpl
adc
mov
cmps
fs
out
push
(bad)
sub
cmp
push
xchg
xchg
add
push
mov
cs
jo
stos
rol
ret
adc
leave
in
mul
adc
cwde
and
shl
sub
sub
mov
xchg
sbb
dec
lea
out
daa
mov
inc
enter
aaa
aas
fadd
mov
pushf
cld
out
adc
cmp
clc
inc
xor
adc
mov
in
push
sahf
sbb
fiadd
cwde
pop
aam
into
pop
iret
adc
inc
icebp
pop
mov
xchg
arpl
adc
and
inc
adc
repnz
sbb
pushf
mov
sbb
adc
pusha
dec
add
aam
popf
xchg
shl
dec
es
add
cmps
inc
xor
or
pop
or
out
mov
adc
pop
pop
(bad)
ret
dec
adc
fwait
sar
xchg
fsub
lods
inc
popa
(bad)
or
bound
sbb
adc
icebp
jmp
adc
lods
push
adc
or
mov
int3
add
dec
pop
pcmpgtw
sbb
xor
jle
fidivr
movs
adc
or
ret
std
rol
push
cmp
cld
or
xchg
adc
mov
jl
adc
mov
sbb
sbb
adc
out
std
pushf
inc
dec
add
mov
lock
adc
sti
fcom
adc
(bad)
or
lahf
jg
push
pop
pop
test
adc
inc
inc
ins
sar
push
mov
pop
push
loope
cmps
xor
mov
imul
jge
add
xchg
sbb
pop
pusha
jmp
rcl
adc
enter
cld
dec
(bad)
adc
jge
sar
xchg
push
adc
xchg
in
pop
aaa
push
and
push
pop
adc
or
test
adc
xchg
outs
cmp
stc
rcr
mov
aam
push
aam
push
outs
adc
adc
cmc
mov
cmp
adc
adc
lock
lea
fistp
push
ret
push
outs
inc
ins
hlt
sbb
push
fld
movs
mov
xchg
pop
in
mov
pop
inc
adc
iret
mov
dec
out
adc
xchg
inc
mov
add
push
adc
mov
ret
pop
pop
div
adc
cmps
pop
out
fwait
push
push
sti
adc
popa
std
cmp
rcl
aaa
xchg
in
outs
dec
push
out
aam
shl
push
adc
daa
into
xchg
dec
mov
(bad)
sub
adc
repz
fdivr
dec
cdq
test
adc
dec
cmp
lds
jge
sub
ror
pop
and
fwait
lahf
pop
iret
std
(bad)
adc
xor
fdivr
mov
mov
adc
loope
xchg
fs
dec
adc
push
stos
mov
call
xchg
dec
inc
add
xchg
pop
adc
adc
pusha
mov
shr
adc
cmp
mov
sbb
add
jp
imul
cld
cmps
cmp
mov
adc
pushf
inc
cdq
cmc
popf
adc
dec
in
ret
xchg
pop
adc
mov
fisubr
int
pop
adc
pusha
mov
in
xlat
movs
out
add
xchg
dec
cdq
aam
sbb
cmp
test
mov
sub
push
xchg
xchg
popf
hlt
shl
adc
ret
xor
adc
or
or
pop
sti
scas
push
jge
or
aad
dec
call
nop
sti
loop
sbb
in
fucomip
popa
sbb
adc
loope
in
adc
xchg
(bad)
pop
mov
idiv
(bad)
cld
mov
adc
rcr
xchg
aam
pop
xchg
out
in
jae
jg
repz
jle
std
fldenv
add
cmc
jmp
out
les
mov
xchg
pop
add
cwde
mov
or
push
mov
cli
out
sahf
jb
pop
stos
cld
mov
xor
cmp
xchg
adc
and
add
(bad)
hlt
aas
ror
inc
add
jmp
xchg
btr
inc
inc
sbb
aam
or
sbb
loopne
cdq
or
sub
mov
push
and
movs
or
cmc
psubd
retf
mov
push
pop
xchg
hlt
add
sar
ins
xor
test
pop
aas
xchg
sub
mov
or
iret
sbb
add
add
jp
xor
out
sbb
mov
call
fadd
stos
mov
cwde
push
adc
in
xchg
fidiv
imul
test
push
(bad)
aas
loop
adc
fstp
pop
and
jbe
adc
sbb
ret
sbb
call
cld
mov
jnp
iret
in
lock
pop
idiv
lds
repnz
jne
mov
sbb
mov
or
dec
pop
in
xchg
jmp
xor
xchg
xchg
jmp
bound
push
das
sbb
les
ins
mov
in
cs
mov
cdq
push
in
pop
sub
int3
add
out
rcl
mov
ret
mov
mov
pop
ins
lahf
(bad)
cmp
dec
mov
dec
add
push
ins
js
pop
xor
xor
lods
mov
sbb
dec
inc
dec
adc
xchg
mov
add
cmps
mov
adc
mov
add
jmp
mov
in
aas
cmps
and
pop
add
adc
add
cmp
dec
sbb
jmp
repnz
cld
sub
cmp
xor
jmp
push
std
lods
leave
in
imul
dec
aas
push
mov
xchg
test
(bad)
in
xchg
inc
out
or
hlt
mov
into
adc
ins
adc
pusha
dec
sub
je
push
dec
push
mov
ret
sbb
cmp
or
mov
adc
test
pop
inc
data16
sbb
and
dec
aam
cmp
mov
cmps
ins
sbb
cmps
stc
out
sbb
fs
add
dec
(bad)
pause
jg
adc
or
adc
dec
fnstenv
aad
and
mov
or
das
adc
pop
mov
xor
cdq
mov
adc
add
adc
jp
fadd
sti
test
push
jmp
repnz
cli
retf
cmc
(bad)
jp
into
rcr
sub
in
mov
test
cli
movs
sar
mov
test
int3
jo
cld
mov
adc
fidiv
call
push
mov
mov
mov
aaa
adc
dec
xor
arpl
adc
and
fild
xor
or
and
xor
in
inc
dec
out
jmp
int3
jno
xchg
xor
jle
add
xchg
dec
das
xchg
xor
mov
adc
sub
jmp
mov
data16
and
mov
fisubr
shr
rcr
ins
mov
push
push
cmps
xchg
fld
out
pop
cmp
jle
mov
xor
shl
out
inc
jae
adc
enter
jo
sbb
add
in
xor
mov
sbb
mov
sar
repz
loop
xor
scas
cmp
adc
xor
repnz
dec
sbb
or
movs
push
add
pop
xchg
ret
enter
(bad)
aam
pop
jge
and
and
aam
out
fs
(bad)
jp
call
or
adc
(bad)
xchg
sub
popa
inc
sub
mov
adc
push
mov
jae
cmp
mov
cmp
rol
adc
out
or
jbe
cld
sub
adc
ins
fsubr
hlt
lock
dec
hlt
lods
fwait
or
out
and
xchg
or
adc
dec
xchg
xlat
rcr
cdq
int3
je
shl
xchg
xchg
push
into
jbe
xor
sbb
lahf
cmp
adc
jge
clc
faddp
mov
adc
stos
les
adc
(bad)
cli
fidivr
sub
mov
adc
pop
pusha
cmp
jmp
xchg
push
jmp
pop
dec
outs
or
xchg
outs
adc
fwait
xor
aam
mov
push
pop
and
push
psubsb
jns
adc
fwait
ins
push
adc
pop
mov
jmp
dec
xchg
cmp
fnstcw
xchg
mov
and
adc
cmp
int3
sbb
shr
push
rol
xchg
ror
add
movs
repz
jmp
push
xchg
xchg
loopne
mov
jbe
or
ror
aaa
(bad)
test
sub
fisttp
fwait
or
outs
popf
jbe
dec
in
stos
sub
int3
bound
sbb
or
ret
push
bnd
int3
mov
add
dec
data16
xchg
(bad)
out
mov
int
sti
aam
xor
xor
pop
jecxz
adc
add
aam
jp
outs
aas
ds
or
push
dec
stc
daa
mov
xchg
stos
adc
in
int3
sbb
dec
in
mov
loop
bound
cmp
mov
retf
out
retf
test
pop
or
pop
jmp
push
jle
pop
and
fistp
cmp
and
mov
add
jge
jmp
repz
popa
stc
cmp
xchg
out
test
nop
loopne
xchg
mov
(bad)
dec
push
sbb
out
sbb
ret
repnz
lods
or
jae
cmps
ror
(bad)
int3
das
mov
fimul
mov
jbe
xor
adc
xchg
or
and
loope
add
sti
and
adc
outs
nop
add
and
rcl
or
xchg
scas
lods
cmp
out
rcl
push
push
sti
int3
sbb
mov
test
inc
adc
fisub
lock
sub
imul
(bad)
das
sbb
and
dec
je
std
sar
aad
loope
sbb
mov
push
xor
jmp
jmp
fisub
fs
int3
adc
or
test
jmp
jne
imul
mov
ffreep
test
sub
inc
or
mov
jno
sub
mov
mov
jns
adc
push
jae
movs
(bad)
pop
xchg
hlt
in
jmp
ret
je
xor
dec
call
adc
pop
push
mov
push
das
nop
fld
lock
retf
mov
xchg
cdq
adc
cmp
jmp
mov
sbb
mov
ds
mov
push
daa
aam
add
loop
fwait
in
or
add
mov
adc
nop
xlat
push
pop
jb
in
mov
mov
les
sub
push
mov
xor
outs
add
xchg
sbb
sub
test
cdq
repz
mov
adc
xchg
mov
or
add
arpl
sbb
cmp
or
aad
lds
mov
xor
pop
movs
mov
nop
adc
mov
ror
div
addr16
push
loop
jmp
cmp
add
jmp
jecxz
fld
in
and
cmps
dec
mov
pushf
(bad)
int3
fcomp
adc
fidivr
push
push
add
dec
fsubr
xchg
aad
xchg
call
dec
and
jbe
cmp
ror
sbb
ja
call
ror
stos
stos
adc
sbb
xchg
adc
mov
cs
(bad)
in
and
xchg
jp
je
rcl
jmp
enter
cmp
aam
(bad)
in
sbb
cmp
sub
imul
(bad)
fdiv
adc
xor
enter
test
lock
scas
cld
mov
pop
push
sbb
ret
dec
adc
iret
in
outs
loope
shl
adc
ret
dec
lea
sbb
mov
push
adc
mov
pushf
(bad)
sub
push
dec
jb
aam
mov
adc
scas
sbb
mov
fimul
mov
loop
out
jbe
test
adc
mov
jecxz
mov
push
pop
aad
sbb
lods
adc
adc
repnz
sbb
cld
sbb
mov
(bad)
adc
das
iret
sbb
retf
adc
inc
xchg
sub
mov
xchg
lods
arpl
adc
inc
xchg
dec
ins
adc
and
sbb
call
cmps
or
cmp
rcr
fcom
f2xm1
mov
or
xor
sbb
mov
xchg
js
jg
sub
sub
jnp
inc
in
xchg
ret
mul
adc
mov
or
ds
(bad)
cmp
aam
jnp
inc
ret
mov
aas
add
mov
mul
add
cdq
inc
inc
out
mov
std
adc
add
mov
dec
mov
pusha
adc
jae
inc
gs
xlat
cli
loope
push
shl
sub
and
sbb
in
jle
or
or
hlt
adc
xchg
add
scas
test
push
jns
inc
sar
sbb
je
in
cs
xchg
adc
or
sub
adc
imul
js
adc
dec
popa
pop
fst
loope
push
adc
das
(bad)
sbb
mov
adc
mov
and
mov
out
mov
pusha
mov
fcom
mov
sub
pop
rol
icebp
adc
bound
jae
push
loop
sub
pop
pusha
ins
iret
in
jmp
push
out
dec
bound
adc
or
out
movs
nop
stc
cmp
mov
push
(bad)
push
mov
or
and
adc
mov
scas
adc
ds
jbe
xlat
dec
inc
push
lahf
std
adc
outs
push
ins
jno
lods
push
mov
xor
ret
test
ficom
out
adc
cmp
sbb
push
add
ret
sub
cwde
mov
fist
adc
cmp
rcl
aad
pushf
mov
push
rol
mov
(bad)
fcmovnu
bound
daa
lock
and
adc
xor
xchg
loope
sbb
xor
sbb
dec
movs
sbb
adc
xor
out
mov
jge
lahf
in
adc
shr
or
push
loopne
(bad)
mov
test
out
mov
jmp
and
push
nop
std
add
rcr
adc
prefetcht1
mov
or
dec
fild
stc
js
cmc
jge
sub
pop
adc
cmp
test
sub
mov
js
sub
inc
push
pop
adc
pop
lds
enter
sbb
cmp
mov
adc
sahf
push
mov
scas
movs
push
ret
(bad)
repz
(bad)
push
aam
jae
lods
nop
shl
cmp
adc
outs
pop
push
fiadd
aaa
add
pop
das
sub
ins
scas
ret
leave
or
je
out
pop
sar
add
push
je
xor
inc
cs
mov
jmp
imul
je
adc
mov
xor
inc
xchg
mov
cs
retf
stos
sbb
dec
std
and
fild
in
push
ins
test
pop
inc
push
pop
adc
add
ror
jp
and
in
popa
cmp
add
mov
stos
adc
or
mov
repnz
or
adc
(bad)
mov
push
cmp
push
cmp
cmps
xor
hlt
aam
push
mov
aaa
or
mov
pop
inc
out
ins
cmp
shl
fimul
imul
pop
adc
xchg
mov
or
retfw
or
jp
mov
pop
in
loop
inc
fnsave
sahf
sbb
push
mov
dec
pop
or
jecxz
je
xor
and
sar
sbb
loopne
sbb
sbb
enter
das
mov
xor
(bad)
scas
das
ret
and
sub
mov
lea
push
mov
jb
sbb
fist
sbb
call
or
imul
push
scas
or
test
aaa
xchg
dec
xchg
sbb
xchg
ret
mov
aam
stos
ins
rcr
ins
ss
popf
mov
fidivr
jmp
mov
cli
push
aad
jae
pop
je
cmc
outs
in
es
and
fcomp
inc
loope
sub
hlt
dec
in
jns
adc
(bad)
out
jg
xchg
inc
call
(bad)
bswap
dec
xor
out
jo
ror
rcl
outs
push
adc
test
movs
or
adc
stos
dec
(bad)
call
xor
adc
jmp
cli
or
call
mov
sub
ins
les
into
xor
(bad)
cmp
ds
mov
mov
and
pop
aas
call
dec
add
cmp
adc
fisub
adc
lods
sub
xchg
xchg
cli
jno
push
sbb
test
cmp
add
gs
xchg
or
xchg
and
dec
pmulhw
pop
aad
popf
out
test
xchg
outs
jbe
and
pop
jns
rcl
dec
xchg
(bad)
into
jb
cmp
aam
add
test
leave
rcl
adc
fadd
sub
fbld
pusha
sbb
cmps
pop
test
cmp
jg
sbb
mov
mov
sti
in
push
movsx
jno
cmp
xor
cmc
adc
fs
rol
inc
mov
xlat
mov
aam
pop
mov
adc
(bad)
dec
pop
jo
push
inc
adc
xor
adc
aam
ins
dec
je
xor
ins
push
xchg
sbb
inc
adc
int
sbb
xor
cdq
clc
mov
out
sbb
cs
scas
adc
mov
arpl
sbb
inc
mov
lahf
fnstenv
popf
mov
push
cmp
ss
sbb
adc
lods
xor
pop
lahf
jae
cld
ret
sub
pop
jne
test
sbb
mov
stc
mov
and
out
std
mov
loopne
pop
fld
push
test
movs
(bad)
in
sbb
fistp
test
push
outs
cs
lods
add
adc
mov
sbb
xchg
or
jmp
mov
popf
outs
jmp
shl
xchg
ror
hlt
push
scas
imul
(bad)
push
adc
sub
jb
pop
iret
pop
mov
stc
cmp
pop
fsub
les
xchg
push
cwde
dec
(bad)
mov
mov
sti
mov
xchg
aaa
fstp
adc
outs
imul
cmp
add
push
xchg
xor
test
scas
jb
loop
clc
icebp
in
or
jecxz
add
pusha
bound
xor
clc
adc
int
jnp
push
push
out
popf
int3
lods
data16
push
std
xor
fdivr
mov
adc
and
xchg
cmp
imul
inc
cmc
(bad)
adc
pop
shl
push
retf
xor
jle
pop
fs
mov
xor
out
sbb
or
imul
pop
in
inc
nop
adc
sub
jb
or
(bad)
ins
pop
xor
adc
fist
adc
xor
and
sbb
loop
(bad)
sub
sub
icebp
lods
aaa
push
add
jae
adc
push
lock
adc
jle
cmp
adc
inc
or
or
fst
fist
adc
cli
addr16
shl
xchg
adc
test
lock
sub
add
mov
inc
sti
call
and
jecxz
cmp
mov
sub
jp
push
(bad)
push
push
ja
push
aam
adc
lods
sbb
pop
movs
sbb
jle
lahf
mov
adc
fmul
jecxz
jo
mov
aad
or
out
out
stos
dec
and
add
jne
xchg
sbb
lods
rol
ror
adc
mov
mov
cmps
xchg
sar
fsubr
or
repnz
cmp
out
fistp
inc
in
or
jmp
(bad)
jle
xor
outs
lds
add
retf
scas
out
cmc
in
adc
fstp
shl
ins
mov
adc
or
inc
adc
pop
call
ss
pop
xlat
adc
dec
mov
adc
cs
jmp
aam
jmp
pop
call
ins
xchg
pop
ss
das
adc
nop
pop
add
std
arpl
xor
pop
ret
jnp
aaa
test
aaa
or
xor
and
out
fmul
adc
fsub
lods
xchg
jmp
add
int3
cmp
sub
bound
adc
ins
imul
adc
iret
mov
sahf
pop
cmp
adc
push
je
repz
imul
xor
sbb
and
push
sub
adc
sub
push
inc
mul
test
jbe
repz
adc
mov
adc
shrd
mov
stc
fst
fld
xchg
not
iret
mov
xor
call
stos
sbb
leave
adc
repz
sar
mov
jo
adc
xchg
adc
mov
aas
push
psubb
inc
mov
push
mov
arpl
lock
dec
adc
aam
xchg
movs
mov
inc
inc
test
adc
inc
pop
cwde
movs
cmp
mov
inc
in
mov
das
mov
push
fmul
jge
iret
mov
mov
scas
push
test
fsubr
xchg
fist
add
fiadd
(bad)
cmp
pushf
sbb
je
and
rcl
add
dec
inc
mov
sub
push
push
xor
push
sub
add
or
call
adc
popf
and
adc
adc
stos
jnp
cmp
cli
xchg
adc
and
xor
scas
pop
pop
es
rcr
dec
(bad)
in
and
adc
xchg
push
nop
das
jns
mov
(bad)
xor
dec
jo
adc
cmps
mov
out
xchg
ins
sbb
int
dec
xchg
in
mov
xchg
test
loopne
in
(bad)
pop
adc
fdivr
bound
xchg
xor
stos
mov
jb
jmp
xchg
stc
xor
dec
adc
mov
mov
mov
adc
clc
ret
or
and
cmps
adc
mov
ror
inc
gs
cwde
mov
cmp
sti
and
sbb
sub
adc
ins
arpl
fwait
enter
stos
and
test
in
cmp
in
imul
mov
imul
ficomp
jge
in
inc
sub
(bad)
pop
out
jmp
imul
mov
daa
jmp
pusha
call
shr
dec
push
inc
inc
arpl
int
movs
mov
out
push
adc
arpl
sbb
xchg
rcr
bound
pop
mov
retf
sub
das
addr16
mov
push
int3
or
push
je
iret
fcomp
enter
push
xchg
(bad)
les
cld
ret
bound
and
out
sub
mov
jle
popf
cmp
je
aas
cli
jnp
sub
ins
xchg
push
add
hlt
dec
push
mov
ja
in
push
lea
adc
fisttp
out
rcr
ret
xchg
aam
jmp
jecxz
xlat
push
neg
fidiv
xchg
nop
test
inc
sbb
add
xor
xchg
inc
adc
sbb
fsub
push
sbb
pop
(bad)
scas
stc
adc
call
hlt
pop
loopne
dec
pop
add
xchg
int3
hlt
movs
lods
adc
and
mov
fiadd
add
jnp
or
adc
stc
test
wbinvd
dec
fild
lods
ins
es
xchg
push
cli
fwait
xchg
(bad)
aam
imul
retf
jle
add
sbb
dec
push
test
adc
inc
cmp
sbb
sbb
ins
pushf
call
sbb
lock
ss
neg
add
mov
fs
arpl
adc
in
pushf
test
repz
pop
xchg
dec
call
cwde
call
xor
mov
adc
out
ss
push
(bad)
dec
in
je
popf
jno
adc
test
jns
mov
adc
sbb
dec
mov
nop
xlat
aas
xchg
outs
mov
mov
outs
dec
xor
add
adc
lods
xchg
call
test
mov
fstp
int3
adc
sbb
lahf
push
xchg
add
xor
cdq
retf
shl
pop
setp
sar
or
add
jno
mov
stos
sbb
cld
push
or
jae
and
clc
jg
in
cmp
adc
sbb
inc
jae
lds
xor
test
and
es
ret
jmp
inc
adc
pop
cwde
mov
adc
sub
(bad)
lea
pop
dec
push
adc
adc
bnd
lods
inc
rol
in
arpl
call
neg
(bad)
in
or
add
sbb
das
xchg
mov
mov
(bad)
fadd
xor
jle
adc
aam
mov
jge
cdq
and
pop
enter
ror
shufps
not
dec
pushf
jl
push
xlat
xor
bound
push
repz
popa
jo
push
pop
ret
jmp
mov
aam
mov
xlat
dec
nop
pushf
out
pop
push
test
jg
out
xchg
popa
in
inc
adc
mov
dec
cwde
sbb
sub
push
gs
pop
inc
pop
adc
dec
jno
rcl
in
cmp
or
inc
mov
(bad)
mov
or
jmp
adc
xor
push
fidivr
mov
idiv
or
bswap
in
adc
in
stos
mov
xchg
mov
out
mov
stc
js
add
or
inc
inc
or
in
mov
xchg
sbb
xchg
je
push
push
out
(bad)
int
sub
jmp
xchg
test
push
rcl
xchg
jl
sti
movs
push
in
retf
repz
pop
stos
jbe
cmp
popf
push
test
xchg
adc
push
outs
mov
dec
adc
sub
add
mov
mov
sub
mov
xchg
jmp
adc
sbb
shl
cmps
adc
dec
aas
cdq
sub
mov
fwait
call
pushf
out
or
adc
sbb
lahf
push
adc
lods
aas
jns
ret
test
sbb
loop
jecxz
inc
ficomp
or
dec
and
mov
rol
call
push
xor
rcl
pop
(bad)
xor
loope
and
ins
xor
mov
or
je
enter
out
addr16
icebp
aam
xlat
mov
jnp
inc
push
mov
xlat
or
pusha
addr16
dec
aad
mov
aas
add
loope
in
lds
add
mov
scas
add
sti
data16
dec
fisubr
fadd
les
int3
or
movs
icebp
dec
dec
(bad)
and
sub
shr
mov
sbb
cmps
in
dec
mov
pop
pop
or
cli
mov
lahf
icebp
test
iret
je
test
aaa
add
outs
inc
call
push
in
mov
sahf
push
or
sub
scas
call
rcl
push
mov
mov
add
pusha
add
stc
(bad)
fdiv
lsl
ss
pop
out
pushf
push
retf
push
inc
cmps
cld
ror
or
sbb
(bad)
in
sbb
imul
(bad)
and
test
int3
test
aad
pmulhuw
sub
push
add
or
and
xchg
sbb
fist
xor
push
push
mov
cmp
xor
je
push
ins
pusha
dec
retf
jae
xchg
sbb
stos
aad
inc
jg
aam
dec
call
(bad)
adc
inc
or
xlat
repnz
add
aas
adc
dec
jmp
loope
or
int3
cmps
int
inc
imul
sbb
add
ds
pop
stos
xchg
mov
fdivr
adc
jecxz
mov
into
fcom
in
mov
add
pop
jmp
mov
xor
push
dec
adc
aam
punpckhwd
push
call
stc
lock
xchg
adc
call
push
dec
xor
adc
cmp
out
(bad)
jecxz
pop
ret
cld
lods
adc
pop
bound
(bad)
aam
bound
nop
sbb
jb
mov
jg
aaa
mov
(bad)
cmp
xchg
pop
les
jbe
shl
mov
into
ret
jmp
mov
retf
ds
adc
iret
sbb
or
aaa
mov
shl
jno
clc
out
sahf
fmul
sbb
or
add
adc
int
cmp
or
test
add
in
dec
sbb
xchg
xchg
lahf
sbb
mov
add
push
push
imul
mov
push
in
adc
hlt
daa
in
or
inc
jge
jnp
leave
add
pop
enter
xor
fild
mov
sbb
(bad)
mov
(bad)
jmp
pop
pop
xor
sbb
inc
adc
cdq
mov
and
call
sbb
and
ins
mov
cmp
(bad)
pop
and
repnz
nop
fidiv
adc
inc
out
shl
push
cli
cdq
adc
movs
clc
fs
jnp
xor
daa
nop
adc
dec
adc
adc
mov
mov
fdivrp
(bad)
paddw
inc
fadd
push
push
xchg
ins
movs
add
icebp
cld
stos
cmp
push
retf
adc
and
sub
cwde
test
iret
sub
and
xor
pop
adc
imul
dec
adc
mov
shr
adc
addr16
jmp
test
jecxz
sbb
test
in
jmp
mov
aad
xchg
adc
sub
xchg
mov
mov
dec
movs
je
cld
push
test
dec
in
and
cmp
es
sbb
xchg
ins
nop
add
adc
push
or
in
(bad)
adc
pop
push
movs
cmp
(bad)
cld
pop
ror
sbb
or
aas
jge
push
out
adc
test
or
pop
test
cmp
mov
jmp
add
inc
movs
xor
sbb
or
sbb
dec
add
lds
and
adc
xchg
mov
je
aaa
mov
sub
int3
std
sbb
and
or
fimul
adc
xlat
ja
xor
mov
cmp
test
xor
pop
and
pop
pop
ret
and
sbb
cmp
adc
push
inc
dec
sbb
rcl
popa
jnp
xor
adc
dec
in
ficom
mov
push
es
(bad)
adc
retf
in
xlat
sbb
sub
in
in
stc
cmp
test
nop
fmul
adc
jns
pusha
mov
cli
sbb
inc
push
add
mov
mov
sar
xor
jb
mov
mov
hlt
xlat
add
inc
dec
and
adc
(bad)
sbb
and
xor
(bad)
cmp
xlat
or
push
aaa
adc
shr
jle
xchg
rcr
or
xor
retf
fst
sbb
popf
test
imul
dec
xchg
push
in
sbb
adc
pop
inc
mov
mov
add
xchg
inc
dec
mov
xchg
inc
or
push
xchg
pushf
xchg
jl
pusha
xor
and
fucomp
sub
or
pop
jmp
cli
sub
sbb
fimul
xchg
pushf
adc
xchg
ins
std
call
aas
adc
retf
ja
cmps
scas
cmp
dec
xchg
aas
xchg
push
mov
dec
cdq
movs
std
mov
mov
jle
outs
iret
ins
jg
mov
cwde
movs
fwait
add
jne
sar
mov
adc
pop
mov
xchg
psubsb
je
frstor
test
add
cwde
adc
psllq
ret
shl
adc
es
stc
ds
in
cli
sbb
das
mov
sub
xchg
pop
sub
outs
mov
adc
inc
mov
and
ins
cmps
mov
in
fwait
mov
inc
dec
adc
mov
dec
mov
call
nop
jmp
in
add
js
jecxz
pop
in
mov
push
mov
mov
sahf
or
adc
stos
xchg
sbb
and
lock
push
xlat
(bad)
adc
xchg
data16
cmp
push
jle
xchg
rcr
in
sub
pop
and
adc
lahf
inc
sub
repnz
cli
shr
ret
je
add
cmps
cmps
push
int3
jmp
aad
aam
xlat
dec
mov
and
xchg
dec
stos
jae
cld
add
ins
adc
cmps
jns
mov
adc
mov
ins
mov
cli
icebp
adc
aaa
add
inc
or
leave
xchg
imul
popf
mov
jne
and
inc
push
dec
pusha
iret
cmp
ja
xor
shl
xchg
and
pop
or
push
mov
add
add
arpl
and
rcr
push
mov
loope
xor
xor
retf
adc
lock
mov
adc
and
push
inc
xor
sbb
clc
or
in
stos
movs
jp
cmc
add
retf
cmp
or
cmp
scas
inc
dec
sub
dec
xchg
and
icebp
jns
or
jno
xlat
retf
stc
push
pop
retf
push
inc
and
popf
jns
push
leave
add
xchg
test
je
dec
add
pop
jb
xchg
rol
addr16
daa
sahf
retf
jp
xchg
adc
sti
xchg
pop
cmp
xor
adc
aam
aam
retf
mov
push
pop
lods
(bad)
scas
mov
sahf
mov
ds
xor
xor
in
push
mov
or
push
mov
push
mov
or
jl
sub
adc
stos
or
or
mov
sub
push
arpl
std
ins
les
adc
mov
fst
jae
int3
inc
ss
pop
mov
pop
sbb
std
adc
shl
sbb
fs
xor
and
je
xchg
test
cmps
aam
sbb
enter
adc
in
sub
je
movs
jmp
cmp
or
lock
fwait
dec
adc
mov
loopne
mov
mov
scas
push
push
(bad)
cmp
adc
lock
jge
or
pop
dec
xor
dec
adc
jmp
mov
jmp
lahf
ins
call
inc
test
push
es
lods
cmp
mov
push
push
push
aam
adc
or
shl
jmp
xor
enter
imul
mov
and
test
out
(bad)
cmps
push
fimul
sbb
sbb
lahf
ds
enter
jmp
xor
inc
(bad)
push
push
xor
mov
sbb
sub
add
adc
ss
xchg
cmp
adc
sub
out
int
and
adc
lahf
jno
outs
sbb
(bad)
addr16
pop
ss
in
pushf
(bad)
jmp
(bad)
ins
adc
xchg
adc
fcomp
lods
and
xor
retf
jo
rcl
cmps
jmp
jle
xchg
push
jle
and
mov
sub
jp
popa
(bad)
mov
push
or
fbld
sbb
fs
dec
mov
data16
jb
cmp
mov
movs
movs
outs
jl
cs
mov
dec
ins
adc
or
js
icebp
dec
push
out
enter
push
push
gs
mov
mov
or
adc
pop
scas
loopne
xor
stos
cli
adc
adc
fsub
sub
inc
xchg
mov
adc
loop
push
jns
ins
push
cmp
mov
inc
daa
aam
and
out
jg
mov
adc
aas
push
pop
push
sub
bts
xor
or
mov
mov
push
test
stos
mov
jg
ror
dec
or
popa
xchg
data16
push
xchg
adc
int
adc
fmul
xlat
sbb
jg
jns
adc
mov
mov
sub
addr16
movzx
rcl
or
add
cmp
adc
mov
adc
nop
push
mov
mov
ins
cmp
dec
js
xchg
cwde
ins
movs
mov
cwde
add
cld
mov
push
mov
lea
cmp
int3
mov
push
jno
ror
fidivr
sbb
dec
stos
test
movs
dec
shr
pop
lods
cmps
or
cwde
pusha
add
cmp
pop
mov
jmp
inc
stos
sbb
push
pop
mov
inc
sub
push
pop
sbb
jmp
push
mov
sbb
jns
addr16
mov
fbld
mov
inc
jecxz
push
inc
inc
xor
mov
jmp
popa
movs
mov
dec
leave
rcr
std
das
adc
inc
mov
xor
cwde
bound
push
add
sbb
rcl
shl
jmp
xchg
aaa
mov
inc
ror
jns
popf
push
xor
pushf
mov
inc
push
push
je
cs
ficom
mov
push
out
mov
mov
mov
setbe
sbb
add
loopne
adc
push
pop
push
retf
add
jg
mov
cmc
sub
(bad)
jnp
in
psubusw
addr16
sub
adc
clc
mov
test
dec
retf
dec
scas
and
test
jg
lahf
arpl
test
frstor
rcl
stc
out
or
retf
cmp
pop
fmul
js
xor
dec
xor
sbb
loopne
fs
cmps
jbe
mov
adc
mov
enter
rcl
jl
div
adc
push
addr16
adc
(bad)
pop
es
outs
(bad)
fs
arpl
push
jns
cmp
cdq
sti
dec
ret
(bad)
xor
xchg
fidivr
test
cwde
shl
mov
lea
test
adc
lock
mov
aaa
aas
sub
xchg
dec
shl
adc
mov
adc
out
out
dec
add
cld
sti
xchg
aam
pop
jae
and
jp
call
cmp
sbb
mov
dec
sbb
lahf
sar
scas
test
fsubr
int3
in
popa
inc
jmp
iret
mov
inc
xchg
or
pop
leave
test
icebp
pusha
push
cmc
fwait
xchg
retf
xlat
mov
je
pop
jne
loop
aaa
push
imul
loope
adc
into
in
gs
mov
pop
xchg
sbb
(bad)
shl
(bad)
in
mov
repnz
mov
mov
retf
pop
stos
sbb
jmp
retf
or
aam
out
enter
xchg
repz
or
cmp
mov
shl
test
jle
dec
je
dec
adc
out
cmp
mov
imul
test
(bad)
lods
int3
add
sbb
dec
mov
fs
push
sub
jbe
mov
cmp
into
nop
fsubp
push
imul
xchg
xor
jecxz
cmp
fbstp
aad
cld
xchg
cmp
stc
retf
pop
sbb
mov
fadd
movs
add
scas
shl
xor
mov
inc
adc
fild
pusha
push
and
int3
push
and
(bad)
cmp
add
inc
and
ss
push
adc
js
jg
add
je
mov
cmp
xor
fnstcw
adc
gs
std
cmp
adc
sbb
mov
loopne
adc
lods
lea
push
mov
mov
jne
or
cmp
and
cs
ror
inc
invd
push
pop
cmp
mov
inc
movs
xor
and
mov
adc
daa
mov
call
add
push
dec
js
adc
cld
push
jne
in
adc
dec
test
sub
in
add
ds
push
stos
pop
push
int
es
sub
call
cld
jp
adc
ror
cld
sbb
jmp
ja
jne
loopne
jp
mov
mov
xchg
in
out
xlat
and
shl
dec
xchg
cld
movs
je
ret
adc
dec
mov
repz
dec
gs
call
inc
(bad)
cli
mov
fst
scas
add
jae
dec
jmp
shl
sbb
mov
pop
in
aam
(bad)
push
div
mov
(bad)
aad
mov
cwde
xchg
retf
xchg
lock
loopne
add
xchg
fprem
dec
push
cmps
(bad)
or
es
jle
or
sbb
js
shl
adc
xchg
jo
mov
in
jb
jge
fisubr
or
jbe
adc
jae
cs
movs
test
pop
mov
xchg
sub
xor
adc
push
fadd
or
sbb
cmp
ss
cmps
in
adc
dec
add
es
pop
add
pop
jae
push
je
idiv
inc
and
adc
inc
mov
or
adc
neg
cmp
sti
ja
sbb
(bad)
fst
xchg
jnp
loopne
popa
mov
ret
adc
enter
mov
(bad)
sbb
clc
leave
push
data16
inc
inc
sub
fwait
push
pop
adc
inc
ret
jmp
gs
or
jae
adc
jnp
or
enter
mov
jmp
lds
cmp
mov
std
pop
push
aam
xchg
inc
mov
jns
fistp
xchg
jne
inc
shr
loope
jbe
adc
clc
xchg
lods
pop
cs
adc
add
(bad)
in
ds
rcl
mov
aad
push
xor
xchg
push
rcr
mov
cmp
mov
jmp
aaa
in
adc
ds
or
aam
fstp
stos
jb
cmp
xor
mov
mov
loopne
fdivr
aaa
icebp
out
xchg
retf
jo
push
push
js
ins
inc
pop
int3
mov
lock
xchg
push
aad
fimul
sbb
(bad)
hlt
push
mov
add
retf
loope
xchg
xchg
mov
or
int3
call
xchg
lahf
jnp
mov
xor
inc
xchg
pusha
imul
out
loopne
adc
pop
and
xchg
std
aam
xchg
mov
jns
les
cmp
push
mov
push
cmp
inc
(bad)
mov
push
das
or
jl
mov
sbb
bound
fnstsw
icebp
sbb
add
adc
dec
adc
stos
mov
mov
or
mov
aad
xor
mov
cmp
xor
dec
adc
xlat
cmp
retf
dec
loopne
adc
xchg
bound
jl
add
out
mov
rcl
xchg
je
mov
adc
out
mov
adc
gs
sub
les
shl
sbb
xchg
add
mov
and
in
xor
add
push
mov
js
out
xchg
call
sub
scas
and
sub
mov
lock
xor
leave
push
ins
or
aam
scas
adc
in
push
(bad)
ja
xor
and
adc
add
cld
fbld
lea
dec
test
dec
ret
or
add
push
loopne
in
mov
fld
rcr
inc
and
pop
adc
sub
jo
push
xlat
cmp
jno
ja
add
mov
adc
or
xchg
xchg
mov
pop
pop
push
xchg
pop
pop
retf
loop
jmp
push
test
or
ret
mov
jne
xchg
test
xchg
test
adc
retf
cmp
leave
je
push
lea
jmp
pop
sbb
stos
mov
leave
mov
sbb
mov
adc
xor
test
and
cmp
aam
sub
in
xchg
push
push
pop
xchg
sub
lods
push
xchg
push
fsub
pop
xchg
or
gs
dec
in
das
and
mov
scas
fisttp
stos
mov
push
mov
push
push
dec
push
popf
bound
cmc
loop
or
inc
test
daa
mov
out
mov
retf
pop
dec
pop
jge
xor
or
call
jecxz
jbe
push
sbb
push
pushf
push
in
movs
(bad)
xchg
push
int3
xchg
lock
cmp
mov
push
adc
adc
push
movs
and
sub
cwde
sub
dec
jmp
dec
jmp
aam
mov
mov
push
repz
test
js
xchg
(bad)
ret
call
scas
adc
push
ror
popa
scas
imul
adc
fdivr
jmp
leave
adc
dec
pop
lods
xlat
cdq
push
sub
std
cmp
jmp
mov
mov
add
ins
mov
push
push
test
xchg
jecxz
jb
into
lds
jb
push
and
and
imul
call
xchg
ins
scas
adc
jb
retf
hlt
mov
jmp
int3
cmc
add
jmp
dec
cmp
pop
fsubr
mov
xchg
mov
adc
js
popa
jbe
lods
and
gs
xchg
sbb
adc
je
fsub
push
cs
retf
iret
into
xor
xchg
and
cld
pop
cmp
mov
xchg
adc
pop
nop
arpl
frstor
inc
retf
cmc
(bad)
mov
add
das
adc
inc
xor
arpl
jecxz
push
fcomp
mov
addr16
pusha
mov
in
retf
jp
adc
sbb
scas
cwde
aas
out
sbb
push
mov
xchg
out
adc
stos
cmp
fidiv
idiv
loopne
sbb
or
pop
sbb
call
sub
push
into
inc
push
jbe
jns
add
lahf
push
adc
cmp
(bad)
pop
adc
jb
iret
cmps
call
adc
mov
push
addr16
xor
test
inc
mov
(bad)
cmps
mov
adc
sub
rcr
call
pop
nop
mov
test
adc
outs
outs
stos
mov
retf
pop
cmp
pop
mov
repnz
sub
stos
and
pusha
cmp
gs
ds
in
clc
fs
jecxz
lods
inc
leave
fucomp
test
cs
out
lock
pop
sub
fdiv
dec
cli
push
pop
scas
push
or
add
pop
add
out
or
cli
sbb
aaa
cmp
mov
pop
fmul
pop
test
jge
jne
xchg
mov
sbb
fist
sub
in
mov
and
adc
stos
loop
add
sub
aam
je
pop
ds
and
ret
mov
out
aam
mov
imul
pop
push
fld
pop
ror
lock
cs
xlat
popw
aas
mov
mov
dec
pop
daa
fcom
cmps
adc
mov
jge
pushf
cmp
add
xor
sbb
cs
xchg
adc
pop
xchg
and
mov
je
test
or
sub
call
adc
mov
out
rcl
retf
adc
in
xlat
add
adc
xchg
add
fnsave
jnp
adc
mov
xor
hlt
adc
pop
paddusw
pusha
adc
xchg
aad
clc
data16
ds
xchg
pop
sub
test
adc
test
pop
dec
sub
scas
sub
mov
mov
sub
loopne
sbb
clc
xchg
jge
push
mov
mov
cmp
aam
mov
dec
call
adc
jmp
cmp
push
mov
shr
xor
repz
cmp
push
movs
mov
lods
je
stos
hlt
sbb
sar
adc
mov
sub
adc
xchg
cwde
mov
and
mov
mov
xor
inc
fsubp
movlps
xor
fadd
cld
push
fisub
add
je
imul
adc
std
sahf
in
cmps
mov
xchg
jecxz
add
jo
fwait
loope
adc
mov
fbld
sub
jns
movs
inc
adc
inc
pop
shl
xor
popf
mov
and
push
out
jne
inc
rcr
iret
frstor
cld
out
mov
xchg
adc
xchg
(bad)
sbb
and
ds
lds
fldcw
adc
cmp
push
add
adc
xchg
xor
aam
cmp
push
adc
pusha
add
sbb
add
stos
adc
mov
pop
ds
push
add
mov
into
icebp
pop
fistp
cmp
and
mov
inc
je
int
mov
cmp
or
adc
xor
in
int3
pop
adc
push
mov
pop
inc
jb
das
dec
popa
call
cmp
pusha
test
mov
adc
movs
pop
jbe
pop
sub
int3
or
inc
mov
dec
add
call
lock
adc
fsubr
pop
adc
pop
into
xchg
adc
add
pusha
lods
adc
mov
sbb
push
shl
in
scas
add
inc
in
mov
fs
lods
sbb
scas
dec
movs
(bad)
std
jp
adc
stc
and
xor
xlat
outs
or
das
(bad)
loop
jbe
or
lahf
add
sbb
mov
xchg
repnz
adc
xchg
jno
int3
adc
sbb
adc
xchg
leave
dec
sub
pop
add
loopne
cmp
(bad)
sbb
mov
lahf
dec
cmc
jnp
cmps
lock
pop
add
ftst
mov
je
fwait
in
xchg
jmp
std
adc
ins
adc
in
adc
mov
std
or
clc
in
hlt
add
adc
call
dec
test
(bad)
shr
out
(bad)
and
out
loop
xchg
dec
cmp
add
loopne
and
inc
ret
stos
scas
in
cmps
jmp
and
imul
test
out
fcmove
in
aad
loope
jae
imul
xchg
add
aas
cld
mov
jle
fcom
fisub
lahf
sbb
fs
lods
popf
mov
sbb
call
xchg
sbb
mov
leave
push
iret
and
lahf
and
in
outs
push
xor
sahf
aas
dec
lahf
cld
cwde
inc
sub
inc
sbb
jle
mov
mov
retf
jle
mov
ins
inc
or
jmp
and
xchg
cmp
cmps
mov
lods
and
popf
js
out
sti
inc
pop
cmc
dec
popf
and
dec
sub
add
mov
adc
sub
(bad)
rcl
pop
cmp
(bad)
jle
int3
add
mov
push
cmp
inc
mov
push
sbb
or
(bad)
adc
jno
dec
cmp
adc
xchg
aaa
xchg
jg
jp
lea
js
rcl
pop
dec
mov
retf
in
jg
adc
mov
int3
mov
adc
inc
push
mov
xchg
mov
pop
push
mov
cmp
mov
sub
cmp
mov
and
or
jns
push
push
cmp
adc
or
inc
sbb
pop
out
add
je
sub
adc
shl
(bad)
adc
or
clc
cmp
mov
mov
cmp
adc
adc
add
mov
pop
push
in
movs
jo
loopne
push
adc
mov
cli
scas
fbld
enter
outs
mul
push
ja
ret
cmc
mov
pusha
xor
jle
jns
pushf
adc
push
adc
pop
xchg
sbb
adc
mov
xchg
outs
adc
jp
pop
cli
dec
adc
out
data16
push
lods
pop
mov
dec
scas
not
(bad)
push
push
push
je
(bad)
sbb
jb
mov
xchg
push
dec
aam
mov
dec
or
hlt
mov
mov
cli
fcom
retf
pop
inc
dec
stc
push
cmp
or
xor
jmp
mov
cld
sbb
xchg
jne
adc
sahf
es
cli
sbb
shr
sbb
dec
aas
stc
dec
out
ds
cmp
mov
xor
in
add
inc
in
aad
test
fmul
imul
es
push
jbe
in
xor
jmp
push
dec
cwde
adc
popa
jnp
sub
loop
xor
shr
loope
sub
jge
ret
les
aaa
cmc
sub
push
mov
in
ficom
adc
cdq
mov
or
xor
pop
mov
xor
ret
aam
in
mov
idiv
outs
mov
push
lock
scas
add
sbb
inc
mov
cli
xchg
bound
cwde
add
mov
mov
test
add
adc
adc
add
xor
adc
dec
sar
push
push
out
push
je
push
int3
jmp
std
repnz
push
sbb
mov
inc
mov
ror
je
cli
ret
leavew
adc
fwait
out
add
adc
rcl
inc
ret
dec
sbb
jg
adc
imul
scas
cmp
sbb
outs
mov
retf
push
shl
inc
adc
mov
mov
arpl
int3
fs
(bad)
mov
mov
xchg
shld
mov
loop
gs
xor
imul
and
adc
ins
rol
push
ds
cmps
fstp
adc
sti
jge
pop
loope
adc
lock
xchg
add
push
cmc
adc
movd
push
push
movs
adc
out
adc
sti
dec
mov
cmp
fisttp
rcl
adc
clc
cld
add
jmp
int
adc
into
scas
mov
mov
out
aas
cmp
fs
xor
fnsave
bound
jecxz
mov
pop
push
sub
(bad)
mov
push
in
push
scas
adc
in
add
mov
push
xchg
loope
in
lods
sbb
adc
mov
addr16
(bad)
aad
or
fmul
hlt
dec
inc
push
int3
aaa
icebp
(bad)
mov
mov
or
push
jno
in
pop
dec
add
(bad)
retf
mov
sbb
mov
mov
movs
mov
std
into
mov
test
stos
mov
mov
mov
pop
out
gs
push
(bad)
repz
dec
push
xchg
clc
jns
dec
imul
and
inc
retf
mov
xchg
nop
retf
neg
or
sub
mov
xchg
je
int3
mov
popa
sahf
lea
or
adc
scas
push
into
or
loop
adc
sub
leave
inc
daa
aam
je
out
std
int3
sub
popw
xor
pop
cmps
pop
dec
jbe
xchg
xor
test
xchg
test
scas
retf
dec
cmc
and
shl
sub
shl
cld
adc
mov
mov
cmp
retf
test
stos
adc
jno
or
jecxz
retf
mov
push
out
pop
ds
popa
adc
mov
and
cmp
mov
out
adc
das
pop
sbb
xchg
adc
gs
pop
inc
jmp
pusha
adc
jbe
jge
femms
add
out
push
call
mov
lds
jmp
adc
pop
shl
stos
leave
in
pusha
inc
mov
add
icebp
sbb
push
not
jmp
xchg
xchg
loop
dec
shr
xchg
sbb
xor
xor
sbb
aas
je
xchg
cli
call
jmp
push
or
pushf
cdq
ss
jmp
les
test
lods
push
js
rol
ficom
les
lock
xor
xor
int3
adc
cdq
sub
mov
mov
or
adc
xchg
and
sbb
movs
outs
add
test
dec
xchg
adc
test
int3
mov
and
(bad)
rcr
stc
xlat
cmp
jle
jne
sbb
xor
in
add
add
(bad)
jno
sub
inc
push
ins
(bad)
and
adc
das
cmp
add
or
ins
xchg
adc
and
out
xchg
mov
and
xchg
aam
repnz
in
fwait
mov
mov
mov
fldenv
aaa
outs
pop
stc
jge
add
jmp
loop
adc
jno
rcl
icebp
iret
pop
mov
and
in
ret
icebp
out
js
adc
mov
inc
inc
mov
mov
or
push
ret
(bad)
ins
mov
pop
inc
daa
into
adc
clc
(bad)
mov
pop
adc
leave
in
imul
adc
jmp
jno
push
sub
aaa
sahf
adc
imul
(bad)
popf
cmp
loop
sbb
dec
js
push
jl
or
out
mov
dec
aad
xor
cmp
enter
or
scas
add
rcr
loopne
push
sbb
les
dec
adc
mov
xchg
fdivr
mov
add
xor
adc
daa
(bad)
or
(bad)
sub
adc
ror
push
fisubr
xchg
arpl
inc
aam
mov
adc
movs
popa
lahf
jge
push
mov
(bad)
jl
push
adc
imul
dec
gs
or
mov
push
(bad)
sbb
xchg
aam
clc
push
sbb
dec
ins
outs
mov
movs
loopne
jmp
cmp
or
std
int
ja
lods
pop
call
dec
(bad)
das
nop
fwait
add
adc
jnp
fild
repz
mov
dec
xchg
popf
test
mov
repz
dec
aas
jae
les
mov
push
out
imul
jbe
fmul
cmps
adc
(bad)
sahf
and
mov
adc
fwait
xchg
out
adc
pop
push
mov
rcr
push
stc
cmp
inc
aad
xchg
bound
and
cmp
xchg
cmps
cmp
(bad)
shr
adc
and
pusha
fld
adc
adc
adc
adc
pop
fwait
and
sub
in
mov
add
pop
mov
push
pop
adc
lods
sbb
pop
lods
mov
lds
aaa
mov
nop
psubusw
xor
fcomi
ins
cmp
fs
adc
sahf
fistp
std
add
int
stos
jge
mov
call
ss
push
xor
add
xchg
push
push
in
sbb
inc
stos
jne
pusha
jnp
ret
test
cs
push
xor
jp
call
push
fs
out
jp
popf
inc
push
adc
das
xor
jmp
mov
outs
iret
add
ss
push
test
je
and
xor
fucomip
xor
sbb
xchg
ins
je
cld
adc
pop
mov
stos
les
jmp
dec
or
mov
adc
arpl
adc
xchg
or
icebp
test
lock
in
adc
or
in
sbb
xchg
pusha
mov
pop
add
nop
sub
push
stos
mov
ss
lock
or
ins
fs
test
adc
push
out
mov
push
hlt
bnd
inc
xlat
mov
or
push
pop
add
bound
adc
popf
int
aad
es
imul
pop
adc
sub
jb
inc
stos
xor
je
call
dec
lahf
mul
test
push
pop
push
fisttp
(bad)
jne
or
popf
sbb
sbb
pop
push
and
ja
repnz
addr16
cwde
ret
mov
push
dec
mov
or
adc
push
mov
pop
pop
push
and
mov
mov
xchg
movs
sub
xor
inc
hlt
fisubr
mov
(bad)
outs
dec
adc
push
push
lock
icebp
cmc
aam
push
sub
sub
mov
adc
pop
dec
loope
das
and
fwait
inc
dec
add
sahf
inc
mov
outs
je
pop
adc
pushf
test
xor
push
sbb
test
sahf
add
into
mov
jle
adc
sub
and
outs
retf
in
cwde
(bad)
mov
cli
ret
lds
std
sbb
cmp
sti
ss
mov
or
sbb
rcl
aam
out
adc
aas
inc
movs
ds
sbb
jge
mov
iret
adc
push
icebp
ins
ss
ins
out
pop
adc
add
push
int3
pop
cmp
daa
sbb
pop
aad
aam
sub
sbb
pushf
adc
addr16
or
popf
fbld
adc
pushf
dec
cmp
sbb
and
add
jge
loopne
pop
mov
int3
adc
adc
fcomp
daa
cli
imul
jmp
adc
retf
fst
adc
mov
int3
stos
jmp
push
jnp
pop
rol
scas
pop
jg
add
mov
xchg
sbb
adc
mov
pushf
mov
not
fmul
pusha
push
test
das
fnstcw
add
jmp
push
int3
and
repnz
xchg
fs
test
jne
mov
sub
pop
sar
or
das
outs
jg
pop
imul
das
stos
in
push
scas
jns
adc
dec
les
xchg
in
call
sub
jge
push
aam
fsub
adc
(bad)
xchg
ins
mov
int
scas
dec
retf
les
adc
mov
ret
mov
push
out
std
jge
push
sbb
xor
(bad)
mov
or
push
cmp
adc
inc
lods
sub
and
push
add
scas
mov
sub
xchg
sbb
out
sbb
or
ror
pop
lods
and
in
push
inc
add
icebp
arpl
push
xchg
xor
adc
mov
outs
aas
adc
fisttp
and
loopne
outs
das
ins
mov
dec
adc
bound
inc
fs
hlt
push
(bad)
jp
jbe
stos
jmp
das
add
loopne
adc
sub
xor
jbe
push
test
call
in
push
dec
and
cmp
sbb
mov
inc
push
out
retf
rol
mov
das
inc
dec
je
mov
ins
cmps
jno
jmp
dec
in
cmp
test
call
pop
push
(bad)
out
xchg
scas
je
xchg
pop
or
xor
ins
aam
or
mov
hlt
inc
jnp
out
sbb
(bad)
iret
push
arpl
es
push
inc
inc
mov
(bad)
call
sub
addr16
xlat
lock
xor
mov
popf
je
mov
inc
ins
movs
dec
sbb
pusha
cmps
mov
gs
cli
push
sub
cs
sub
out
jnp
inc
sub
jg
xor
jmp
out
adc
and
push
cmp
retf
adc
add
dec
jno
ja
das
(bad)
test
imul
adc
xacquire
and
and
adc
or
pop
jmp
and
adc
push
push
hlt
popa
mov
inc
adc
xchg
je
inc
and
jmp
cmps
push
add
inc
into
jg
stos
in
adc
shl
sbb
call
es
xchg
scas
push
xor
xor
cli
(bad)
(bad)
movs
cmps
adc
es
mov
adc
push
xchg
pop
push
icebp
xchg
push
mov
xor
outs
cmp
imul
test
pop
mov
movs
mov
adc
je
test
pop
pusha
adc
les
xor
cwde
popa
inc
adc
hlt
stos
(bad)
add
sbb
rcr
fidiv
pushf
test
adc
fcom
or
mov
push
mov
dec
inc
mov
enter
adc
sbb
add
adc
xor
mov
xchg
ret
je
into
mov
xchg
mov
sbb
pop
les
addr16
clc
jne
mov
adc
dec
or
rcl
sub
pop
mov
data16
inc
adc
xchg
cwde
pop
mov
pop
inc
icebp
jmp
cmp
outs
xchg
adc
mov
pop
mov
cmps
xchg
daa
sub
push
aaa
dec
scas
adc
xor
outs
dec
xchg
loop
adc
out
mov
adc
in
and
aam
cmp
out
mov
or
repnz
mov
jp
push
sub
ss
or
ret
pop
xchg
mov
add
ret
arpl
push
bound
adc
xor
jmp
dec
sub
jle
xchg
push
cmp
or
mov
mov
popa
push
push
aas
dec
es
aaa
push
sbb
sbb
inc
sub
je
dec
imul
push
xchg
inc
(bad)
enter
dec
push
mov
repz
dec
add
dec
in
loop
aaa
sar
sub
adc
sar
retf
and
fcmovne
rol
clc
add
daa
test
pop
leave
out
sbb
pop
in
retf
jecxz
push
popf
js
pop
mov
sub
int3
cs
test
adc
test
push
mov
push
leave
retf
jnp
push
cmp
test
les
js
cmp
imul
sti
cmps
jle
inc
cld
aaa
outs
into
push
cmp
push
adc
cmc
push
loop
xor
test
aam
scas
or
and
(bad)
outs
jno
sub
pop
dec
lods
mov
and
ret
mov
je
bound
out
lods
ret
sahf
add
loope
push
ss
jmp
and
retf
xor
inc
popf
sbb
je
xlat
fstp
int3
mov
and
and
sbb
dec
xchg
call
std
cld
mov
push
inc
iret
test
cli
dec
xor
xchg
mov
push
dec
mov
(bad)
popf
(bad)
adc
mov
and
sbb
xchg
sub
mov
adc
je
outs
pop
push
mov
test
cwde
xchg
jae
movs
lock
cmp
inc
movs
call
mov
je
addr16
aam
movs
hlt
jns
mov
mov
pusha
add
int3
adc
dec
sub
loope
push
dec
jmp
inc
mov
inc
ins
sub
lock
fucomip
pop
outs
cmp
in
sub
add
adc
and
mov
xchg
lds
xchg
jno
xchg
sar
dec
aaa
sub
push
idiv
les
mov
xor
add
scas
ins
dec
adc
pop
adc
adc
mov
fs
ins
jb
out
imul
jmp
inc
(bad)
push
mov
inc
jecxz
mov
movs
cld
dec
jmp
mov
xchg
dec
jne
xchg
adc
mov
xor
bound
jns
test
xchg
pop
push
es
xchg
push
rcl
dec
push
sub
in
adc
pop
les
xlat
or
adc
repnz
lock
jno
cmc
into
or
imul
mov
mov
cmp
pop
xchg
cs
xchg
jl
jg
and
push
push
adc
int3
das
sub
pushf
data16
scas
mov
xchg
mov
inc
popa
mov
jns
(bad)
fwait
push
gs
push
push
leave
push
aam
xor
push
pop
xchg
pop
or
outs
xlat
inc
cmp
mov
or
loopne
adc
sub
and
sub
adc
fisubr
mov
int3
mov
jecxz
fs
sub
or
jo
icebp
div
aas
fist
mov
xor
(bad)
mov
sub
push
dec
adc
leave
fild
jp
push
push
lahf
bound
andps
cmp
test
adc
mov
sub
arpl
adc
mov
dec
call
cmp
lock
sbb
xor
cdq
mov
or
aam
in
(bad)
sub
ins
iret
push
div
lods
adc
add
in
fcom
stos
jl
std
adc
push
outs
lods
out
iret
fsub
jmp
mov
mov
sub
push
leave
cmps
mov
retf
addr16
pop
xchg
or
cmc
adc
fmul
ins
xchg
xor
(bad)
fimul
xor
test
cmp
adc
mov
in
popa
add
dec
mov
jmp
repz
fist
mov
mov
adc
lock
jl
lods
jne
pushf
jnp
repz
ficomp
movs
and
call
jmp
aaa
or
add
lods
fs
add
xor
in
adc
mov
ins
push
adc
sbb
or
push
pop
mov
xchg
cmps
push
pop
pop
ins
dec
mov
(bad)
call
ret
xor
ret
into
sbb
lahf
call
inc
inc
mov
add
retf
imul
ror
xchg
ja
jle
sti
pop
xor
int3
add
test
inc
inc
push
mov
xchg
xor
cmps
test
loope
dec
pop
daa
inc
ins
sbb
je
cmp
leave
jno
aas
jmp
cmps
mov
test
push
xor
or
stc
scas
clc
dec
adc
add
jne
push
mov
mov
popa
sub
lea
sbb
lahf
fcom
jecxz
or
inc
stc
mov
push
movs
pop
adc
jle
xlat
std
je
into
adc
imul
dec
cmp
ins
jp
jmp
sbb
mov
xor
sbb
mov
xor
cmp
data16
mov
xchg
jne
mov
adc
outs
mov
inc
dec
test
movs
fs
xor
push
loop
adc
(bad)
jmp
inc
dec
sahf
out
pop
push
add
les
xchg
mov
test
pop
add
jae
cdq
push
xor
cli
or
xor
push
icebp
mov
stc
cmp
jmp
xor
ins
pop
add
adc
cmps
pushf
out
pop
scas
outs
addr16
int
xor
int3
xchg
xchg
dec
sbb
scas
out
mov
leave
pushf
mov
idiv
repz
adc
fwait
or
lods
(bad)
(bad)
mov
jno
pushf
imul
pop
dec
xchg
sbb
and
fcom
imul
inc
test
adc
clc
add
movs
fs
push
scas
mov
mov
inc
mov
sahf
stos
cdq
fist
das
gs
add
cld
or
call
inc
add
xchg
push
mov
in
retf
scas
mov
adc
adc
(bad)
aad
adc
shl
jg
rcl
repnz
ins
xor
sbb
sti
sbb
sub
and
xor
sbb
int3
loopne
in
xchg
movs
push
pop
add
mov
dec
xor
and
push
pop
fmul
jno
in
mov
cld
sbb
xchg
push
cmc
or
sbb
push
mov
sahf
shl
jecxz
movs
pop
push
das
pop
lahf
mov
and
push
xchg
adc
jmp
shr
pusha
cmp
test
mov
and
test
add
movs
push
add
add
jmp
jl
lds
js
adc
cmp
xor
sbb
(bad)
cmc
call
out
std
mov
test
xchg
jmp
pop
xchg
ins
in
(bad)
ret
or
mov
das
aam
add
inc
leave
push
aam
xchg
pop
aam
sbb
(bad)
jne
mov
cs
xor
xchg
xor
inc
enter
gs
or
sbb
in
outs
pop
adc
push
and
cmps
add
xlat
ficomp
cdq
pushf
xchg
add
aaa
ins
push
arpl
mov
je
add
aaa
sti
fadd
(bad)
push
adc
push
jl
inc
inc
cmp
xchg
leave
xor
ret
mov
jmp
(bad)
bound
int3
jecxz
jne
test
adc
jmp
arpl
adc
icebp
fs
lds
jns
adc
jge
cmp
adc
jne
mov
loop
lock
mov
cmc
xor
cdq
sbb
call
(bad)
out
inc
inc
jno
outs
mov
or
adc
aam
fld
rcl
add
aaa
pop
vlddqu
jnp
sbb
xor
hlt
jl
push
in
mov
adc
mov
adc
cld
sub
adc
cmp
stc
int3
test
jmp
adc
inc
cmp
(bad)
or
push
outs
mov
or
push
retf
rcl
mov
(bad)
mov
and
sti
test
fsub
movs
sub
int3
pop
add
or
pushf
daa
adc
sbb
loop
xor
push
ins
out
xchg
daa
and
push
or
push
mov
adc
ds
mov
adc
inc
sub
fcmovnb
xchg
and
add
add
out
nop
(bad)
push
pop
xor
out
cmps
mov
repnz
ror
mov
aas
fild
lahf
je
loop
xor
arpl
loope
jge
lods
or
sbb
and
rol
ins
dec
ret
jmp
add
mov
pop
(bad)
leave
movs
(bad)
fld
sub
jmp
adc
(bad)
jmp
dec
adc
hlt
pop
data16
xor
outs
in
movs
hlt
add
std
dec
mov
movs
fcomp
fistp
push
(bad)
xor
cmps
pop
jbe
sbb
mov
push
scas
mov
inc
ret
xchg
ins
lods
cmp
sbb
iret
out
dec
adc
dec
dec
pop
cwde
xchg
cmp
pop
add
sub
ins
jecxz
and
dec
in
aaa
cs
inc
mov
in
cmps
test
sahf
mov
mov
or
jno
cld
cmp
ret
pop
out
adc
sbb
and
lds
popf
int3
adc
mov
rcl
or
adc
jp
loopne
popa
loope
movs
add
cmc
ror
xchg
daa
mov
out
sbb
in
add
int3
repnz
adc
sbb
cmps
je
arpl
daa
adc
bound
fist
push
and
(bad)
je
jg
scas
cli
adc
push
fwait
add
(bad)
or
aad
jl
aam
(bad)
adc
adc
addr16
sbb
jl
cs
call
add
in
sub
xor
fstp
push
push
adc
or
xor
in
retf
push
mov
mov
adc
in
bnd
jbe
gs
mov
sbb
ins
and
push
pushf
xchg
sub
lea
push
inc
push
lock
adc
in
lahf
dec
xchg
add
push
sbb
jmp
ins
push
and
jns
xchg
adc
cdq
(bad)
cmc
cmp
sub
mov
mov
ret
adc
out
ins
in
add
jp
xchg
add
push
popf
xchg
jmp
adc
(bad)
ds
fst
pushf
adc
add
mov
adc
or
mov
enter
popa
add
cmp
call
mov
fdiv
jg
ret
sbb
fisttp
inc
xchg
dec
leave
js
jmp
and
repnz
adc
into
pop
sbb
sbb
mov
and
pop
fmul
adc
xlat
mov
scas
adc
adc
sbb
and
ins
xchg
(bad)
cwde
add
pushf
loop
adc
hlt
add
cmc
aam
retf
daa
adc
and
rcr
jl
bound
push
push
imul
jp
mov
cmps
jmp
add
push
cmp
lods
lock
mov
xchg
loopne
pop
adc
shr
adc
pop
in
sub
xchg
adc
jmp
jmp
fild
xchg
in
scas
aam
retf
das
(bad)
lahf
je
cmp
cdq
mov
jbe
or
sub
aaa
aas
scas
cld
repnz
in
mov
nop
in
mov
dec
adc
mov
xchg
jb
int3
out
lock
cmp
xchg
add
inc
imul
pop
adc
push
mov
and
sbb
mov
ins
xchg
es
sub
mov
push
(bad)
xlat
xchg
jb
sbb
mov
xchg
adc
stos
fild
pop
scas
cmp
sysret
jb
(bad)
out
xchg
out
cwde
fbld
ins
mov
add
add
add
jae
bound
or
ror
push
bound
mov
retf
xlat
mov
call
adc
and
test
leave
call
mov
jg
dec
mov
rol
ins
in
xor
xchg
jb
and
cmp
and
outs
sbb
add
data16
pop
ja
and
pop
jnp
loopne
out
or
jmp
scas
xchg
xor
enter
adc
stos
add
push
add
sahf
fst
adc
aad
push
xlat
mov
and
mov
pushf
and
clc
xchg
jo
or
aam
ins
inc
push
or
loopne
movs
aam
in
out
push
cmps
mov
std
lahf
test
mov
inc
enter
call
mov
sbb
cld
mov
and
jmp
fadd
lods
adc
inc
bnd
std
test
add
push
cmp
(bad)
sbb
imul
cdq
mov
adc
lea
std
mov
pop
xchg
mov
aaa
xor
sub
mov
movs
in
adc
xchg
mov
ja
mov
xor
xchg
fcmovnu
adc
nop
xor
jg
aas
adc
lea
push
dec
sub
push
cmp
loop
dec
push
and
add
sahf
enter
inc
clc
sub
or
ret
cwde
lahf
call
mov
loopne
mov
test
call
mov
cmp
xchg
sbb
lock
adc
and
mov
sub
cs
out
and
rcl
cmps
jne
mov
and
out
jmp
test
sbb
stos
mov
std
adc
push
pop
mov
jmp
mov
adc
test
sbb
adc
jecxz
xchg
test
fdivr
adc
dec
pop
cmp
dec
adc
jb
mov
or
pop
in
jno
stos
or
push
sbb
dec
sbb
push
int3
inc
js
je
scas
(bad)
adc
sbb
and
xchg
mov
ret
adc
loope
pop
ins
adc
dec
retf
mov
repnz
cmp
out
xor
fdivr
(bad)
hlt
ss
mov
push
ret
adc
push
sbb
in
pop
sub
fcmovbe
inc
add
mov
sub
mov
push
xchg
inc
in
jbe
adc
jns
inc
xchg
mov
out
cwde
fsub
loop
retf
aam
push
adc
cli
dec
pop
fstp
mov
mov
cmp
mov
push
fs
sbb
aam
inc
push
push
(bad)
xor
pushf
jmp
cmp
jnp
and
mov
sti
out
add
adc
mov
xchg
push
adc
dec
std
mov
or
cld
lock
adc
fisttp
pop
(bad)
in
mov
scas
push
add
adc
inc
fistp
fsub
push
adc
cmp
and
pop
cs
stc
std
xchg
ja
loopne
push
adc
add
adc
and
or
fwait
adc
push
test
ret
(bad)
gs
jmp
idiv
xchg
rcl
enter
mov
jno
adc
push
mov
mov
adc
or
ins
adc
inc
mov
lds
data16
mov
sar
pop
adc
inc
in
xor
cs
(bad)
mov
pop
pop
adc
rcl
cmps
ds
jge
dec
retf
adc
sar
adc
mov
and
xlat
lahf
cmp
mov
dec
add
stc
hlt
pop
sbb
mov
stos
aas
out
sar
cdq
fstp
mov
mov
cmp
int
sahf
aam
sbb
push
adc
add
mov
push
int
adc
popa
sub
xchg
xchg
loop
retf
cs
(bad)
addr16
retf
dec
imul
pop
out
std
push
xor
push
cmc
aam
xchg
cli
dec
in
pusha
out
push
sbb
fbld
cwde
adc
push
dec
xor
out
hlt
adc
scas
mul
rcr
adc
inc
(bad)
xlat
in
adc
shr
rcr
cmp
jle
sbb
push
adc
enter
mov
ficomp
aaa
xchg
xchg
adc
fdivr
adc
fidivr
or
mov
(bad)
icebp
hlt
movs
or
loop
add
mov
inc
adc
retf
movs
pusha
inc
or
imul
inc
leave
xchg
mov
jl
adc
fadd
inc
ss
lods
in
out
adc
leave
sbb
xchg
jp
or
adc
mov
inc
ficomp
repz
test
cmp
xor
sub
jno
adc
(bad)
out
call
cld
dec
addr16
or
aaa
mov
hlt
adc
lahf
sub
push
adc
in
sub
stos
mov
sbb
fs
xchg
sbb
push
inc
adc
aaa
fldenv
mov
push
cmps
mov
adc
inc
loope
sbb
pop
outs
and
outs
inc
xchg
mov
adc
xchg
push
cmp
test
mov
xchg
add
xchg
rcl
inc
je
pop
in
inc
vandnpd
add
icebp
pusha
jns
mov
xchg
push
jae
sti
movs
pop
iret
sbb
loope
sub
ror
add
pop
add
jmp
sbb
shl
es
sub
mov
in
in
jg
sub
xchg
jecxz
mov
call
sbb
retf
add
ins
add
inc
in
scas
push
adc
sub
or
dec
hlt
pop
les
sbb
scas
mov
xchg
pop
retf
loope
ss
or
bound
rcl
mov
(bad)
fldcw
xor
mov
shr
call
jbe
ret
ins
scas
in
scas
out
mov
dec
jno
in
out
and
adc
or
fdivr
es
dec
nop
test
sbb
les
stos
push
push
and
mov
retf
adc
xchg
mov
or
push
push
adc
scas
movs
mov
adc
lds
push
xchg
into
xor
mov
ss
push
popa
xlat
call
lea
jne
cmp
retf
xor
adc
retf
cmp
clc
jecxz
mov
xchg
adc
call
jo
pop
push
hlt
jnp
xchg
cdq
add
sub
clc
ror
cs
adc
mov
(bad)
mov
in
jecxz
inc
aam
fmul
jmp
mov
ins
adc
push
and
push
or
push
jge
adc
int3
lods
adc
call
inc
retf
cmps
lahf
jg
xchg
pop
loop
in
pushf
adc
jmp
enter
adc
jg
inc
xchg
and
add
pop
stos
xchg
sbb
or
data16
lods
push
scas
cmps
mov
push
jl
lds
popa
add
adc
jo
scas
push
adc
adc
inc
int3
rcr
das
cmp
gs
js
nop
(bad)
pop
sbb
(bad)
push
cmp
pop
push
(bad)
cmp
xor
loop
mov
pop
mov
adc
dec
add
cmp
adc
test
mov
sub
repnz
aam
ins
loopne
sbb
rcl
dec
jb
push
dec
(bad)
dec
xchg
mov
xchg
cmp
fstp
jne
mov
xchg
in
push
cmps
cdq
sbb
jl
movs
push
sub
pop
pop
ds
ret
leave
inc
inc
retf
fsubr
test
mov
aam
mov
and
sar
cmp
or
mov
push
clc
(bad)
aas
ja
rol
stos
adc
ror
pop
inc
dec
push
jbe
dec
das
iret
add
xor
and
adc
adc
daa
in
xchg
sbb
or
int
push
imul
jge
test
inc
add
mov
clc
push
mov
int3
in
push
adc
add
sub
inc
push
inc
and
mov
adc
fst
mov
adc
lea
in
xor
(bad)
in
out
icebp
and
pop
mov
stc
xlat
lods
fist
sbb
add
or
int
pop
mov
and
pop
xchg
pop
sahf
push
int3
iret
enter
adc
pop
out
dec
push
enter
push
adc
into
popa
inc
retf
sbb
jmp
mov
add
mov
in
jmp
inc
xchg
aam
adc
mov
cmps
call
xchg
(bad)
mov
push
jmp
jle
adc
inc
inc
adc
adc
push
push
dec
lea
out
adc
inc
leave
mov
mov
ins
aam
cmp
imul
sbb
cli
and
jns
aaa
lahf
mov
scas
and
pop
sub
mov
push
sub
cld
out
fstp
je
out
adc
mov
jmp
add
fmul
test
and
stos
loopne
xchg
push
adc
hlt
sbb
and
mov
int
imul
adc
call
jmp
sub
seta
or
stos
test
repnz
jecxz
sbb
adc
stc
fwait
jns
lahf
gs
in
std
jbe
dec
mov
jl
and
in
adc
xchg
jmp
mov
cs
das
ja
or
leave
ret
inc
adc
dec
sub
repz
adc
pop
inc
mov
icebp
fadd
sub
fistp
adc
mov
test
adc
call
cmp
xlat
cmc
xor
int3
stos
adc
jno
fidiv
xor
inc
mov
pop
cwde
shl
dec
xchg
or
out
cmp
lods
sub
add
mov
inc
and
or
out
arpl
out
(bad)
mov
rol
paddusw
mov
push
movs
add
scas
cmp
in
sahf
fisub
shl
cmp
add
clc
out
jno
clc
push
inc
fist
cmp
mov
adc
add
sbb
push
adc
fsub
ins
outs
pop
adc
stos
int3
movs
mov
xchg
test
push
mov
pop
cmps
jns
aam
shl
push
push
iret
push
jge
cmps
xchg
fs
out
add
out
sbb
jo
cmp
adc
jmp
sbb
cmp
xchg
lods
mov
inc
mov
inc
push
loop
out
scas
add
andps
cmp
inc
adc
jbe
mov
cli
jecxz
movs
fs
mov
mov
add
out
aad
xchg
int3
sub
push
xor
jg
push
cmp
push
(bad)
adc
or
ficomp
jne
inc
adc
ds
retf
jno
push
test
rol
push
hlt
xlat
mov
mov
inc
add
pop
out
dec
jmp
push
inc
pop
scas
aam
mov
hlt
cs
test
dec
sbb
mov
mov
test
pop
cmp
cmp
jecxz
jl
adc
cs
mov
and
aam
sbb
push
and
and
push
xchg
hlt
call
fcomp
xor
adc
retf
dec
nop
push
out
test
sub
inc
jmp
bound
sar
or
es
xchg
or
fcomp
cmp
adc
pop
into
push
jmp
aaa
sbb
sbb
bound
push
jno
in
mov
or
and
hlt
lahf
xchg
popa
sub
pop
sbb
mov
ror
adc
push
inc
and
push
jne
cmps
push
adc
push
ror
idiv
mov
ins
aad
adc
jns
iret
pop
(bad)
fst
or
jg
mov
jb
cmp
(bad)
jns
fadd
(bad)
jl
test
call
out
adc
xchg
xor
push
lea
push
(bad)
retf
fimul
dec
jp
mov
scas
sbb
jmp
clc
mov
sbb
in
into
les
cwde
(bad)
loopne
(bad)
in
xchg
lods
lock
cli
loopne
or
dec
jmp
mov
jns
adc
lock
pop
mov
ss
cmp
xchg
adc
jle
js
cmps
push
adc
retf
inc
test
add
adc
jmp
sbb
mov
or
and
adc
aam
push
dec
inc
ins
xor
xor
imul
pop
cdq
dec
pop
xchg
mov
lock
mov
gs
dec
mov
add
cmp
or
retf
mov
cmp
jnp
arpl
push
loopne
int
mul
inc
dec
add
pop
(bad)
or
shl
mov
mov
rcr
not
or
in
sbb
es
inc
mov
int3
mov
js
and
push
retf
cmp
(bad)
in
repz
mov
sar
push
xchg
call
cmps
sbb
adc
adc
ror
cli
or
loopne
adc
(bad)
jp
jmp
ins
test
movs
popf
pusha
xor
sbb
(bad)
daa
(bad)
push
imul
(bad)
adc
dec
sub
mov
lahf
adc
ficom
and
sbb
push
jns
daa
outs
int3
(bad)
adc
shl
xlat
js
cli
fwait
adc
jecxz
imul
or
daa
loop
sbb
scas
xor
out
xchg
xlat
retf
dec
adc
repz
adc
ficom
sbb
in
cmps
pop
and
aaa
inc
adc
pop
sub
inc
fdiv
jmp
mov
inc
loop
sbb
pop
lahf
fidivr
int3
mov
ret
or
push
std
and
and
pop
ret
push
fcom
lock
adc
pop
fwait
add
(bad)
jge
mov
sbb
(bad)
mov
cmp
ds
movs
push
sub
jns
or
retf
xchg
outs
adc
pushf
stos
imul
sub
test
adc
or
sub
lods
cmp
add
jge
adc
cmp
fcomp
sti
sbb
mov
gs
ror
cs
retf
pop
ret
les
fwait
xchg
in
ins
push
fldl2e
dec
jmp
fistp
push
cld
sbb
mov
sti
test
and
retf
jne
imul
das
loop
das
lock
data16
shl
stos
cmp
xor
sub
push
add
push
int3
pop
adc
call
ret
dec
jne
sbb
gs
sub
retf
push
adc
pop
cs
cmp
add
mov
sahf
inc
test
inc
sbb
popf
(bad)
sbb
cwde
push
(bad)
lods
pushf
push
mov
mov
mov
imul
jae
pop
sbb
or
lahf
adc
cmps
sbb
(bad)
pop
mov
cwde
call
iret
lock
adc
nop
mov
pop
cmps
daa
adc
call
adc
fnstcw
arpl
push
cmp
cld
ret
repz
adc
push
mov
retf
in
xchg
ins
dec
mov
or
rcr
pop
iret
clc
cmps
push
adc
xor
sub
sbb
push
or
stos
out
mov
adc
(bad)
aad
push
cwde
pop
adc
mov
xor
dec
rcr
cmp
inc
call
or
loopne
adc
addr16
mov
or
mov
es
mov
lods
sbb
cs
ds
add
sbb
adc
ret
push
fs
aaa
popf
cmp
add
push
lea
and
add
xchg
or
pop
or
fisub
mov
out
xchg
aad
and
adc
setno
test
mov
xchg
sub
xor
pop
add
sbb
adc
lods
xchg
fiadd
mov
out
(bad)
sbb
aaa
fst
push
div
ror
mov
jecxz
lods
(bad)
and
cli
jmp
cmp
mov
adc
adc
push
gs
add
adc
stos
xor
sbb
aaa
inc
jg
inc
imul
push
lods
adc
jbe
and
je
test
pusha
dec
dec
add
out
push
out
inc
ds
inc
push
sbb
mov
aaa
unpcklps
xchg
fbld
adc
xor
pop
ror
in
cli
sti
cs
movs
test
mov
leave
ret
aam
aaa
add
sbb
loopne
or
ins
leave
cmp
dec
pop
adc
jecxz
add
dec
adc
adc
daa
cmps
cmp
pop
aad
std
ds
jmp
adc
dec
xor
sbb
rcl
adc
jno
push
rcr
adc
mov
scas
jmp
popa
inc
dec
sbb
idiv
jne
xor
loopne
imul
dec
xchg
call
dec
sub
pop
adc
movsx
adc
dec
test
not
lds
mov
add
xchg
inc
mov
adc
test
retf
push
push
add
popa
daa
mov
adc
inc
mov
stos
mov
and
popa
cld
imul
cdq
imul
je
adc
call
adc
lds
lahf
hlt
icebp
pop
push
pushf
and
adc
inc
in
es
xchg
sbb
mov
(bad)
aad
das
les
jl
pusha
add
inc
mov
test
dec
and
call
fnstcw
sbb
dec
mov
add
fcomip
push
push
aas
dec
sbb
call
inc
adc
loop
cli
clc
test
icebp
pop
test
inc
je
lahf
pop
aas
mov
cmps
jle
mov
jno
sub
sbb
inc
in
in
push
sbb
or
cld
jbe
jmp
and
dec
(bad)
out
sbb
mov
(bad)
sbb
jae
pusha
dec
pop
pop
inc
jge
or
mov
add
dec
mov
hlt
std
and
ins
or
fwait
repz
dec
(bad)
dec
push
xchg
sub
ja
lahf
or
shl
cmps
aaa
ss
call
(bad)
xor
repnz
add
inc
mov
int3
stc
fucomi
push
data16
test
sbb
fiadd
mov
push
inc
or
or
jle
fadd
adc
je
adc
cwde
enter
repz
xchg
sbb
movs
sahf
jl
addr16
in
push
loopne
push
pop
jmp
and
call
les
jnp
and
push
pop
repz
pop
mov
jno
(bad)
(bad)
mov
mov
mov
pop
dec
push
out
shl
push
cld
ds
repz
icebp
hlt
retf
dec
fdivr
mov
pop
adc
ret
repz
push
or
lea
xchg
in
mov
jmp
push
sahf
ret
cli
or
ficomp
add
push
lods
adc
loope
aam
test
pop
mov
sub
aaa
repnz
xchg
sbb
ins
dec
lods
pop
dec
out
pop
ret
add
data16
sub
in
sub
rcr
aad
inc
rcl
pop
push
addr16
xor
clc
pop
sahf
(bad)
not
jmp
shl
ds
mov
cmp
pop
mov
adc
nop
cdq
loop
push
sbb
adc
into
sbb
idiv
cmp
sbb
fs
into
mov
jno
adc
fucom
test
and
sbb
sbb
rcl
mov
cmp
rcl
dec
and
mov
inc
pop
push
xor
push
daa
xlat
rcl
adc
inc
xor
addr16
pop
adc
test
adc
rcl
movs
cmps
xor
dec
mov
into
movs
pushf
push
pop
arpl
add
repnz
ds
cmps
sbb
sbb
and
cld
and
adc
add
push
dec
add
add
sahf
push
and
fisubr
adc
xor
retf
ds
pop
adc
pusha
xchg
daa
add
jno
aad
das
cs
jle
push
dec
or
jmp
pop
aam
and
lds
div
ja
xor
out
cmp
cmp
or
aaa
sub
cmp
test
adc
lea
dec
adc
std
sbb
mov
jecxz
mov
bound
mov
adc
dec
mov
(bad)
mov
imul
jnp
fldcw
jb
cmp
hlt
lea
mov
inc
fmul
push
call
mov
je
cmp
(bad)
addr16
xchg
(bad)
adc
pop
sub
dec
popa
test
call
mov
fstp
pop
(bad)
push
pop
retf
cmp
lahf
ret
fcom
push
sti
in
ins
loopne
lods
adc
loope
mov
sub
adc
push
jno
fadd
mov
jb
adc
jmp
pushf
adc
cld
mov
rcl
fisub
shl
sub
cmp
dec
inc
push
mov
sbb
and
mov
in
popa
aas
pop
jmp
jmp
ffree
jmp
sbb
aad
sar
lods
jecxz
mov
xchg
movs
mov
mov
std
arpl
clc
xor
adc
mov
stos
rcr
clc
stc
jbe
or
gs
push
scas
push
fstp
aas
pop
jmp
mov
xchg
aam
sbb
push
add
(bad)
cmp
sub
icebp
je
repz
call
adc
lahf
data16
xchg
test
stos
sbb
or
movs
scas
pop
adc
inc
es
pop
xlat
lods
mov
je
jmp
std
pushf
push
xchg
call
into
dec
ror
inc
fs
adc
xchg
xor
out
adc
adc
mov
cli
cmp
pop
out
ja
test
movs
xor
fwait
inc
inc
shl
sub
mov
lods
stc
cli
ins
sub
outs
hlt
adc
test
pop
jp
pop
test
or
xchg
sbb
cmp
dec
fidivr
dec
inc
adc
scas
aam
in
pushf
(bad)
lods
adc
push
leave
rcl
ficom
jle
xor
pop
scas
faddp
(bad)
jbe
push
adc
push
ja
sub
lds
cdq
outs
push
adc
sbb
rcr
(bad)
hlt
aam
inc
sbb
sub
inc
inc
cdq
es
dec
mov
add
or
or
mov
popa
nop
ficomp
(bad)
mov
repnz
adc
aam
adc
and
icebp
les
ss
mov
pop
unpcklps
xchg
jne
imul
sti
cmp
(bad)
call
in
inc
adc
push
(bad)
sbb
ret
and
in
pop
pop
ins
arpl
xchg
es
add
mov
cmc
addr16
adc
leavew
or
push
aam
ds
adc
retf
std
jmp
mov
(bad)
xor
dec
adc
sahf
xor
pop
movs
xlat
loope
and
adc
inc
xor
inc
cmp
pop
stos
adc
pop
stc
adc
fs
xor
and
sub
bound
sub
dec
call
lods
outs
cmps
add
jle
sahf
push
push
or
xor
inc
cmp
mov
adc
fdiv
and
aam
in
add
repnz
lods
stc
push
mov
adc
adc
sub
fcomp
fisttp
stos
hlt
jb
sub
sbb
jle
int3
xor
fnstsw
push
jnp
test
mov
aas
xor
push
aad
pushf
neg
scas
int3
idiv
mov
lahf
pop
adc
dec
ror
dec
dec
push
retf
enter
inc
mov
xchg
clc
cwde
pop
adc
sub
jns
imul
movs
movs
mov
inc
xchg
jne
call
add
(bad)
dec
xor
or
popa
dec
xor
push
xlat
out
nop
jg
jecxz
mov
pop
in
adc
jbe
mov
dec
mov
jle
sbb
imul
ret
mov
loopne
mov
mov
push
adc
mov
pop
leave
clc
jno
ror
call
jne
sub
idiv
push
inc
mov
or
fs
cs
bound
dec
xchg
lock
mov
aad
imul
mov
xchg
(bad)
call
pop
pusha
or
(bad)
iret
mov
dec
or
(bad)
push
adc
ds
push
iret
fwait
jnp
sub
out
fs
arpl
dec
aam
sub
sub
xchg
adc
setae
out
cdq
adc
push
sbb
in
pusha
inc
inc
loopne
jae
and
sub
cmp
mov
cmp
mov
ret
mov
adc
xlat
mov
xor
outs
outs
mov
push
xlat
inc
xchg
sbb
outs
scas
xor
jne
dec
leave
push
or
imul
je
add
adc
aam
or
call
mov
adc
mov
inc
ss
jb
pop
pop
je
cmp
aam
mov
and
sahf
inc
inc
cmc
lods
push
out
(bad)
(bad)
mov
fisttp
arpl
or
xor
cmp
jbe
adc
out
push
test
test
call
ja
iret
push
imul
or
(bad)
or
mov
fistp
test
xor
push
adc
out
ss
push
mov
(bad)
jns
cdq
xor
retf
or
(bad)
cmps
xor
xchg
sbb
push
cmp
lds
shl
cdq
push
movs
sub
xor
arpl
mov
mov
adc
mov
jbe
loop
enter
adc
loope
shl
cmp
sbb
mov
movs
in
push
addr16
out
adc
lds
mov
test
xchg
cmp
loope
mov
sub
call
sbb
add
sahf
pop
mov
sbb
inc
jge
arpl
cli
jl
popf
inc
or
pop
xchg
(bad)
movs
rol
jl
arpl
out
pushw
xor
push
int3
or
daa
xchg
pop
int
test
sti
jmp
cld
lods
inc
mov
cmp
mov
ds
cmp
gs
scas
cwde
icebp
mov
or
into
sbb
xor
pop
lock
sbb
and
ins
ficom
loopne
ds
in
push
ins
or
mov
mov
pop
add
retf
add
xor
shr
nop
dec
mov
xchg
scas
jl
iret
scas
inc
sti
sahf
pusha
cwde
popa
and
call
push
jb
xchg
sbb
xchg
pop
cmp
jp
xchg
lock
xchg
data16
mov
mov
aam
dec
inc
or
into
loopne
jae
stos
mov
shl
mov
add
jp
push
pop
sbb
inc
int3
pop
mov
(bad)
cmp
test
xchg
xor
fdivr
movs
adc
je
arpl
leave
adc
pop
call
and
push
pushf
out
enter
fst
(bad)
pop
adc
call
adc
iret
mov
imul
hlt
aaa
xor
pop
pushf
jmp
nop
pop
sbb
xor
aas
pusha
leave
jno
inc
fs
out
inc
int3
sbb
ffree
repnz
or
pushf
(bad)
int3
sbb
dec
cwde
out
and
out
xchg
mov
lods
lahf
ins
aam
push
dec
shl
in
js
jb
push
test
out
mov
je
cmp
adc
test
or
shl
xor
adc
or
clc
adc
in
data16
fs
and
adc
sbb
imul
adc
(bad)
pop
cmp
xchg
adc
fld
jb
and
(bad)
sbb
jg
ror
aam
pop
shl
sub
sbb
mov
stos
push
add
sbb
push
cmp
in
lea
add
or
gs
repnz
jbe
test
icebp
add
mov
test
(bad)
xor
adc
and
ins
xor
and
fidivr
lods
push
xor
adc
add
jb
shl
rcr
mov
push
jl
mov
(bad)
pushf
inc
adc
lds
call
ret
push
adc
sub
sbb
ins
nop
mov
and
cld
add
push
cmp
ss
ins
add
and
jle
aaa
push
mov
xchg
adc
mul
xor
mov
mov
xchg
aam
int3
repnz
es
push
jl
fisttp
jecxz
adc
inc
outs
adc
jno
test
jl
aam
iret
scas
popf
adc
sub
sbb
dec
adc
push
aaa
out
daa
adc
aam
pop
adc
movs
push
js
sbb
xlat
out
mov
add
(bad)
stos
mov
out
mov
popf
gs
cwde
adc
(bad)
cmp
unpcklps
retf
adc
adc
jle
adc
fsub
psraw
pusha
dec
adc
repnz
(bad)
jno
sbb
mov
icebp
mov
adc
sti
adc
ficomp
mov
and
bound
fadd
sub
adc
fsubp
or
push
xor
bound
jmp
dec
cmp
push
repnz
fidivr
fwait
and
sub
shr
cmp
into
add
jecxz
sub
mov
adc
ins
mov
ret
es
cmp
inc
ins
pop
push
sub
les
test
push
cmps
adc
jno
rcr
js
jmp
dec
xchg
sbb
movs
mov
push
je
add
movs
adc
push
sbb
xor
cmp
in
nop
into
fs
sub
in
sti
push
sub
arpl
or
mov
dec
mov
dec
imul
(bad)
adc
ret
push
stc
xchg
in
mov
in
mov
cmp
ror
test
pop
adc
sbb
fdivr
xchg
aas
out
xchg
lods
cdq
and
icebp
clc
mov
pop
adc
sbb
jecxz
sbb
stc
fst
or
adc
mov
xchg
mov
inc
in
xchg
stos
adc
jmp
adc
pop
xchg
lahf
add
sahf
das
adc
mov
lock
add
cli
dec
daa
das
cmp
rol
cmp
(bad)
lea
jecxz
ds
cs
and
(bad)
fist
adc
aam
mov
xor
xor
mov
sbb
xor
movs
adc
je
imul
add
ins
xor
in
out
div
adc
stos
scas
xchg
cmps
adc
mov
frstor
cmp
inc
lds
retf
in
lea
aas
popf
jle
test
sti
xchg
push
push
mul
int3
mov
adc
(bad)
xchg
jmp
xchg
xchg
fsubrp
pop
outs
and
call
sar
xchg
jnp
cdq
js
inc
push
dec
sub
iret
in
mov
push
int3
shl
nop
and
adc
mov
hlt
inc
jmp
ficomp
dec
jmp
inc
adc
fwait
xchg
add
inc
xchg
div
or
adc
aas
les
(bad)
xchg
dec
je
sub
xor
push
out
fcom
xor
outs
ja
(bad)
and
push
movs
adc
ins
jmp
sar
xchg
push
cs
test
std
clc
adc
sar
das
sbb
stos
ins
or
ins
adc
mov
test
in
push
cld
nop
push
sbb
pop
jo
inc
iret
in
ss
and
and
push
xor
in
std
sbb
fild
mov
sbb
sub
xor
sbb
loop
add
or
xchg
mov
xor
dec
adc
sbb
push
icebp
aam
sbb
adc
pop
enter
add
push
pop
(bad)
clc
(bad)
retf
loopne
mul
cmp
daa
pop
inc
sbb
dec
dec
push
sub
xor
inc
dec
dec
xor
or
mov
dec
aaa
adc
cmps
dec
xchg
lods
fwait
mov
push
xor
leave
(bad)
sbb
xlat
mov
push
in
or
daa
jmp
and
fs
adc
cmp
mov
out
jecxz
xchg
and
mov
mov
adc
pop
stc
scas
lock
inc
adc
aad
xor
and
adc
int3
push
xchg
ins
mov
mov
jge
sahf
es
js
push
cmp
adc
push
lds
mov
jae
sbb
(bad)
pop
fs
dec
adc
ret
out
dec
and
cwde
(bad)
fdiv
push
pop
in
push
mov
jecxz
inc
or
push
fild
loopne
adc
xor
dec
fcomp
clc
mov
and
mov
mov
sub
jg
fdivr
pop
push
fidivr
stc
pop
(bad)
mov
rol
sub
fstp
or
in
mov
(bad)
fidiv
loopne
sub
lods
xchg
cli
outs
sbb
popf
adc
jmp
push
movs
adc
test
pop
bound
or
jmp
out
gs
mov
add
or
inc
sub
inc
adc
into
lds
adc
jle
mov
sbb
ror
repnz
in
pushf
push
and
pop
into
adc
mov
mov
std
adc
inc
add
jo
inc
adc
ja
push
cmp
mov
push
pop
pop
mov
sbb
lahf
and
adc
ins
and
jmp
pop
adc
xor
imul
lea
mov
mov
adc
jle
movs
push
cld
test
int3
rcr
into
iret
pop
test
(bad)
adc
sub
pop
sbb
pop
adc
push
add
les
add
cmp
lahf
mov
jbe
push
aam
jl
add
mov
rcl
outs
in
or
xlat
in
gs
adc
jns
loopne
push
or
(bad)
fdivr
sub
repz
push
jo
push
call
mov
sub
out
cmp
lahf
cmp
fsubp
ror
push
arpl
or
xchg
pop
push
popa
jg
pop
movs
aam
cs
and
xchg
shl
push
inc
mov
fist
xor
sbb
inc
es
mov
fadd
call
adc
or
and
in
ins
imul
mov
mov
popf
neg
or
je
fbstp
shr
sbb
arpl
idiv
sbb
enter
outs
adc
mov
das
popa
retf
adc
scas
inc
in
data16
mov
imul
gs
push
sti
leave
in
mov
adc
mov
(bad)
les
or
nop
pusha
push
pop
xlat
loopne
cmp
adc
adc
ror
nop
sahf
inc
scas
hlt
pop
adc
pop
jmp
ins
je
and
sbb
aas
ins
pop
dec
pop
inc
jns
add
in
push
out
mov
add
int
sbb
sub
retf
xchg
inc
sti
push
add
mov
in
mov
pop
jb
adc
inc
shl
dec
push
bound
ins
and
dec
sub
shl
call
cmp
xor
cmc
mov
mov
and
js
test
fldl2t
mov
scas
jle
fmul
pop
jns
in
push
sub
cmp
sahf
adc
movs
inc
cli
adc
sti
mov
adc
push
es
lea
mov
mov
mov
jp
xlat
cli
adc
push
fadd
je
adc
inc
addr16
adc
lahf
and
sbb
ss
gs
mov
mov
lds
in
aad
sbb
fisttp
call
popa
ja
adc
inc
jmp
fild
in
adc
inc
mov
mov
jo
adc
daa
sbb
xchg
adc
and
and
pop
push
xchg
fucomip
mov
inc
icebp
jecxz
xchg
lahf
lods
dec
add
adc
dec
pop
out
cwde
test
mov
in
pop
fist
sub
add
push
test
inc
push
inc
mov
inc
mov
cmps
repz
adc
or
hlt
mov
pop
inc
and
in
loope
xor
je
scas
bound
add
mov
jg
mov
retf
adc
xchg
rcl
rcr
and
mov
rcr
nop
(bad)
movs
inc
icebp
arpl
shl
or
cdq
mov
icebp
loopne
aam
retf
xlat
pop
cld
mov
pop
cmp
in
(bad)
shl
test
and
cmp
je
int3
les
out
je
push
jp
pop
aam
jle
and
call
mov
sahf
add
push
adc
mov
pop
fbld
adc
pop
lods
pusha
cmp
xor
push
fisttp
push
nop
fdivr
mov
call
in
in
or
xchg
xchg
test
adc
mov
je
rcr
add
out
mov
rcl
not
jecxz
xchg
imul
sbb
call
and
call
pop
jmp
dec
fwait
in
shl
adc
xchg
sbb
aad
stos
fist
add
test
call
xchg
xchg
loopne
cwde
in
adc
and
jecxz
sub
hlt
inc
dec
push
cmp
stc
arpl
scas
adc
fmul
add
and
test
stos
cli
adc
sbb
mov
fmul
push
scas
movs
and
jbe
jb
test
add
mov
aaa
and
mov
and
stos
mov
adc
adc
(bad)
pop
push
and
inc
bound
rol
lods
adc
arpl
ins
ds
adc
sub
into
xchg
js
xor
sbb
jnp
retf
sbb
inc
inc
push
and
repnz
(bad)
out
and
add
adc
adc
mov
mov
push
gs
adc
aas
sbb
(bad)
add
std
adc
jmp
repnz
add
test
push
or
cli
retf
movs
das
(bad)
jp
adc
and
outs
sub
cwde
(bad)
cmp
mov
mov
xchg
outs
fstp
sbb
xchg
ins
ficomp
ins
adc
and
rcl
xchg
xchg
or
inc
bound
retf
mov
mov
repz
cmp
mov
imul
repnz
pop
rep
xchg
ret
loopne
jns
mov
mov
shl
js
push
dec
cs
adc
or
pop
ds
je
cmp
mov
nop
mov
out
pop
shr
pop
jb
test
lock
cwde
in
loopne
cmp
adc
or
push
adc
cwde
dec
and
mov
repnz
mov
idiv
inc
retf
adc
sar
inc
das
add
push
mov
cmps
popf
xchg
shl
call
jmp
scas
popa
cwde
imul
xchg
xchg
sahf
push
xor
adc
in
jge
dec
jmp
xchg
pushf
hlt
xchg
adc
cwde
inc
pop
ins
xchg
sbb
fwait
jnp
and
out
pop
mov
in
mov
aad
adc
mov
and
adc
and
hlt
rcr
jmp
xchg
ins
or
gs
dec
inc
push
(bad)
mov
adc
mov
pusha
out
cmps
jne
cmp
ss
inc
and
xor
or
mov
dec
cmp
in
call
jge
hlt
adc
xor
or
repnz
mov
sti
cli
adc
cmc
aas
retf
(bad)
sub
in
js
mov
stos
push
adc
xchg
into
sub
adc
pop
rcl
ins
dec
adc
or
adc
jp
mov
(bad)
push
jle
add
shr
jbe
mov
mov
bound
xchg
cld
xlat
nop
adc
mov
mov
aaa
fsub
or
or
in
dec
cld
hlt
adc
push
cmp
cwde
je
push
cld
retf
in
xchg
movs
sbb
ins
adc
cmp
sbb
sbb
mov
bound
cmp
sbb
test
ds
fsubr
stos
push
icebp
xor
cmp
cmp
push
cmp
pop
inc
pop
popa
lfs
movs
adc
stos
ins
jge
and
xor
sbb
push
rcl
(bad)
mov
sub
inc
mov
mov
scas
cmp
hlt
sbb
out
mov
rcr
mul
aam
je
or
sub
push
and
mov
lods
lods
xor
mov
out
adc
add
aam
sub
push
inc
adc
hlt
mov
aad
sar
cmp
lea
adc
arpl
lods
or
lds
jp
std
in
ret
dec
sbb
lock
(bad)
arpl
movs
adc
sahf
dec
loope
cmp
adc
adc
mov
push
sub
pushf
or
jl
dec
test
imul
(bad)
sbb
jne
cmp
adc
call
adc
pop
mov
daa
in
mov
invd
cmps
and
in
adc
jne
out
jge
mov
iret
mov
hlt
loopne
and
test
xchg
push
adc
test
cmp
rcl
test
das
mov
jg
mov
adc
cmp
inc
imul
dec
jge
cwde
lods
aad
add
shl
jb
push
sub
aam
les
pop
adc
fs
inc
push
imul
popf
fsincos
leave
cmp
adc
mov
(bad)
and
add
pusha
inc
aam
push
push
(bad)
adc
rcl
cmp
or
outs
adc
ret
nop
das
mov
and
mov
in
int3
jne
sub
push
adc
cdq
pushf
div
sbb
xor
cmp
hlt
lods
mov
add
dec
fisttp
jp
inc
xchg
das
push
fnstenvw
push
adc
je
inc
add
mov
add
mov
in
pop
adc
dec
mov
mov
leave
test
or
test
adc
jae
retf
adc
inc
lds
jge
pop
int
(bad)
(bad)
mov
pop
add
arpl
icebp
mov
je
sub
fadd
dec
aam
push
inc
jbe
das
add
loope
push
dec
pusha
mov
push
pop
adc
(bad)
loop
test
adc
sbb
mov
add
mov
sub
sahf
mov
mov
das
adc
add
push
in
into
xor
mov
cld
pop
test
inc
ss
adc
jnp
pop
xchg
fadd
jns
or
leave
push
adc
xlat
inc
aas
jmp
sub
sub
cld
rcl
cmp
and
data16
aad
mov
scas
inc
mov
sbb
and
std
jp
fnstcw
lock
xchg
gs
aam
and
jno
cmp
pushf
mov
pop
out
adc
pop
outs
mov
sub
add
or
ins
push
bound
ret
push
(bad)
pop
mov
in
cmc
mov
adc
xchg
pushf
jl
and
mov
jmp
adc
sub
push
adc
inc
adc
adc
xchg
inc
sahf
test
jnp
retf
ss
mov
jmp
push
fcompp
or
dec
jo
or
xchg
sub
adc
addr16
stos
leave
test
and
cdq
movs
movs
enter
out
adc
dec
inc
or
mov
imul
out
mov
pop
in
sbb
mov
jge
or
and
fistp
shl
in
jmp
adc
jnp
mov
es
jmp
stos
jo
fadd
xlat
inc
inc
int
and
scas
jl
test
arpl
fwait
inc
mov
xchg
sub
fnstsw
inc
jp
retf
aam
mov
xor
adc
ret
xor
mov
daa
dec
retf
push
xchg
fwait
aaa
rcl
push
jg
mov
lea
fist
adc
arpl
mov
std
mov
jne
ins
add
add
mov
push
test
scas
adc
xchg
aas
loopne
scas
add
sti
out
adc
addr16
retf
jne
sbb
imul
or
mov
mov
daa
sbb
imul
cwde
loope
sub
out
adc
xchg
sub
pusha
jmp
mov
mov
push
adc
daa
sbb
mov
icebp
jne
mov
dec
mov
push
adc
lea
pop
ss
jl
dec
test
popf
icebp
movs
mov
iret
push
ss
adc
outs
push
jmp
imul
int
ss
sub
clc
add
mov
rol
mov
mov
push
fimul
out
cmc
aam
pop
and
fsubr
push
lock
(bad)
mov
inc
jno
adc
push
fmul
aad
jb
add
and
push
pop
lea
data16
adc
clc
cmp
xor
or
mov
and
mov
xor
mov
mov
adc
outs
adc
pop
retf
push
in
out
rol
in
adc
pop
sbb
mov
and
pop
jns
aam
outs
xor
adc
jbe
jle
or
dec
sbb
nop
xchg
adc
cmp
(bad)
scas
outs
pop
sbb
sti
fild
shr
adc
mov
and
mov
xor
(bad)
fist
aaa
xor
sbb
aas
add
mov
cmp
test
push
jne
and
retf
push
sub
mov
fiadd
jo
mov
jno
idiv
and
movs
xchg
sbb
cmp
movs
in
scas
adc
xor
pop
pushf
mov
out
lock
sbb
mul
push
xor
pop
adc
adc
dec
dec
dec
mov
iret
adc
lock
lods
stos
mov
jo
addr16
cmp
xor
push
ja
in
jne
xlat
mov
cmp
adc
out
nop
in
popa
add
sbb
cmp
rcl
sbb
test
pop
or
cmp
mov
sbb
lea
mov
adc
sbb
xchg
or
xchg
fbstp
sbb
sbb
mov
jg
adc
jne
int
cmp
js
push
and
inc
pop
jecxz
cmp
dec
outs
and
xchg
ss
(bad)
xor
adc
or
push
pop
inc
ret
pop
sbb
push
ror
hlt
adc
aad
or
mov
cmp
xor
adc
sbb
int
adc
outs
out
xchg
xlat
cmp
mov
sub
xor
inc
push
loopne
adc
(bad)
in
mov
add
sbb
ret
arpl
stos
hlt
cdq
sar
pop
movs
lods
nop
adc
ret
xchg
lahf
aad
push
data16
mov
sbb
movs
scas
jbe
out
clc
sbb
in
mov
sbb
je
cmp
xor
inc
xchg
repnz
enter
mov
mov
mov
inc
push
adc
cmp
inc
ret
(bad)
and
adc
mov
arpl
lods
movs
adc
sub
test
in
(bad)
push
add
in
dec
sbb
aaa
adc
ins
mov
ss
adc
xor
sbb
pushf
gs
ret
js
and
fldpi
xchg
fnstsw
cmps
sbb
sbb
dec
addr16
mov
or
iret
xchg
outs
push
std
in
pop
in
into
add
sub
dec
inc
mov
clc
lock
imul
or
mov
push
sub
push
adc
test
loop
adc
inc
adc
add
(bad)
rcl
loopne
and
push
push
sahf
fcmovnu
add
and
jmp
out
cmp
xchg
mov
pop
and
adc
fcomp
add
inc
stos
clc
adc
adc
sbb
pushf
hlt
cmp
and
and
cmps
pop
out
adc
xchg
bnd
retf
adc
mov
and
sbb
mov
cwde
dec
pop
(bad)
je
jns
adc
movs
clc
cmp
enter
mov
dec
rcr
jmp
xor
ds
daa
jo
sbb
nop
fidivr
xor
or
xchg
(bad)
pop
fcomp
dec
adc
xchg
mov
movs
call
mov
aam
loop
mov
mov
push
out
mov
jno
jne
enter
xchg
mov
xor
mov
xchg
retfw
icebp
(bad)
push
adc
xchg
cmp
pop
lods
sbb
fimul
sahf
jae
pop
adc
repz
jno
pop
sub
jmp
xchg
nop
fist
jnp
in
push
and
dec
pop
aam
xor
popa
jecxz
fs
imul
leave
test
jo
call
sar
rcr
adc
je
in
xchg
les
mov
or
pop
ret
rol
fiadd
lock
hlt
cmp
in
mov
mov
mov
add
aam
mov
jae
sub
and
or
cmp
pop
lods
outs
dec
push
fsubr
jbe
sar
jg
test
mov
adc
repnz
stos
jae
pop
retf
adc
jo
or
cli
shl
addr16
cwde
adc
sub
xor
cmp
pop
data16
and
jno
es
inc
(bad)
adc
imul
mov
stc
scas
adc
outs
mov
cmps
dec
popa
jge
and
jns
test
push
jmp
add
mov
shl
cli
xchg
or
aam
dec
dec
adc
mov
sbb
push
push
inc
push
das
mov
mov
pop
mov
or
sbb
test
add
mov
sub
push
add
adc
hlt
jl
aaa
cmps
fcmovnu
add
xor
adc
aam
test
stos
inc
ins
mov
into
int3
adc
pop
or
sbb
lahf
nop
mov
test
jae
sbb
mov
ret
aam
pop
sbb
sti
and
and
ret
imul
shr
int3
push
dec
neg
sub
fisttp
cmp
inc
mov
jne
jmp
adc
mov
mov
les
int3
dec
push
mov
fnsave
dec
cli
bound
add
push
xchg
add
cmc
and
push
je
push
mov
sub
int3
and
(bad)
jl
cli
and
xor
bound
call
addr16
or
dec
jg
and
and
stos
call
in
sub
ret
sub
dec
xchg
call
inc
test
in
lahf
out
mov
aad
cmp
scas
movs
std
push
mov
push
and
cs
cmp
mov
gs
pop
(bad)
fimul
inc
cdq
mov
sub
dec
neg
rcr
push
pop
sahf
mov
call
sbb
mov
sub
push
and
loop
push
mov
adc
cmc
repz
inc
adc
in
xor
leave
adc
add
lock
dec
pushf
adc
les
mov
in
aaa
clc
icebp
cwde
jmp
sbb
mov
movs
cld
lods
sbb
or
xor
adc
or
adc
je
es
rcl
mov
and
sbb
sbb
ss
and
or
pop
sar
aad
dec
add
loopne
sbb
aas
fldenv
hlt
into
xor
inc
jge
lock
fsubr
xchg
add
xchg
imul
mov
adc
sub
es
push
xlat
and
adc
int
loop
retf
adc
dec
push
data16
mov
xchg
mov
int3
adc
or
js
loope
shl
cmp
jp
and
and
cmp
shr
xor
dec
mov
jecxz
in
sbb
mov
movs
das
ficomp
push
fdivr
pop
dec
dec
dec
or
sbb
hlt
sahf
push
shl
adc
shl
ret
test
and
cmp
cmps
mov
and
add
sub
inc
fs
push
xchg
push
push
cmp
adc
into
nop
int3
fwait
push
imul
gs
(bad)
out
mov
fwait
sbb
into
int3
pusha
sbb
outs
push
imul
fadd
add
mov
xchg
mov
pop
dec
mov
fwait
in
mov
sbb
push
ins
xchg
std
jge
xchg
clc
jg
ins
lods
push
cmp
add
out
or
arpl
mov
pop
fst
fs
adc
pop
imul
and
or
aam
ins
dec
push
repnz
mov
in
aaa
pop
std
jbe
je
inc
int
adc
mov
pop
jb
or
xchg
xchg
adc
sub
lods
pop
dec
add
daa
stos
fst
adc
and
xchg
inc
xchg
mov
dec
bound
or
je
xchg
out
jge
mov
xchg
or
call
retf
mov
inc
dec
jmp
or
out
xlat
cmp
imul
lock
jmp
jp
shl
mov
xchg
inc
pop
xchg
adc
iret
shl
out
mov
scas
(bad)
xor
adc
pop
lahf
fsubr
in
xor
adc
das
or
in
dec
jl
and
outs
xor
(bad)
arpl
fidiv
mov
mov
adc
je
int3
pause
cli
cmp
popa
aas
adc
das
call
mov
je
push
jo
dec
or
fistp
adc
dec
dec
clc
lahf
inc
leave
sar
mov
and
jbe
cmc
xchg
das
lds
fnstsw
out
scas
jbe
pop
mov
lds
lods
sub
xchg
in
neg
shl
nop
add
jne
and
test
loop
fadd
adc
ins
cmps
push
push
pop
not
movs
adc
xor
pusha
(bad)
add
push
(bad)
call
xchg
or
inc
pop
push
adc
mov
pop
daa
add
out
and
sbb
xchg
sahf
jne
adc
xor
fisubr
leave
shr
div
fistp
repnz
hlt
outs
hlt
popa
fisubr
pop
push
(bad)
adc
mov
adc
js
int
pop
repz
adc
sbb
push
xchg
dec
loopne
xchg
repnz
mov
call
pop
push
jae
hlt
out
fistp
adc
sbb
(bad)
cmps
imul
fwait
loope
xor
stc
sahf
push
mov
mov
(bad)
scas
lahf
push
test
or
push
mov
test
aad
add
jo
mov
cmps
push
or
adc
idiv
jl
push
add
adc
jle
mov
adc
adc
pop
mov
mov
fxam
mov
lods
adc
retf
hlt
xchg
outs
ds
icebp
rcr
xor
add
inc
sbb
jb
ss
pop
out
ins
mov
je
adc
xlat
movs
dec
dec
inc
mov
call
mov
scas
or
add
aam
xor
inc
add
push
pop
push
sti
addr16
jbe
or
enter
out
pop
inc
cmc
adc
pop
sub
mov
pop
pop
adc
in
jg
mov
lea
js
stc
mov
xor
adc
or
or
cmp
or
cmp
loope
sub
ins
sbb
ins
shl
sub
lahf
or
dec
mov
push
mov
neg
(bad)
sbb
xlat
push
xor
pop
dec
out
das
add
dec
(bad)
xchg
scas
aam
test
test
sbb
outs
data16
add
retf
pop
sbb
outs
sbb
pop
mov
outs
js
cmp
retf
or
xchg
or
test
je
and
loope
shl
cmps
jle
fld
sub
or
jp
imul
pop
mov
adc
pop
inc
dec
in
cmc
or
xchg
out
or
ins
imul
mov
ss
mov
retf
and
ins
adc
fild
imul
jne
sub
aam
pop
(bad)
cmps
jecxz
pop
inc
stc
pushf
fcom
sub
fstp
adc
jg
add
sbb
pop
sub
or
cmp
xchg
dec
mov
movs
outs
fld
shr
sbb
(bad)
mov
mov
pop
push
sbb
data16
inc
data16
fwait
jp
das
pop
inc
leave
sbb
retf
fldenv
in
std
sub
popa
test
call
push
loopne
fsubr
push
push
add
in
dec
aad
mov
sbb
call
jbe
mov
shl
je
mov
pop
dec
xor
and
lahf
jmp
jmp
push
inc
pusha
xchg
movs
mov
dec
mov
and
add
scas
xor
call
(bad)
call
push
je
jecxz
ret
sub
xor
pop
ffree
add
mov
adc
jecxz
push
rcl
push
pushf
scas
pop
movs
clc
jmp
push
jnp
xchg
mov
push
jae
outs
sahf
sub
xor
sbb
jp
sub
xchg
cmc
cs
pop
add
xor
sub
ret
lock
mov
cwde
dec
push
push
ja
(bad)
out
fs
retf
cmp
inc
aam
jge
dec
inc
xchg
mov
stos
js
sbb
dec
addr16
imul
cs
push
xchg
inc
mov
mov
add
mov
lea
push
add
dec
mov
xchg
jmp
adc
fst
fcomp
leave
adc
out
mov
xor
xor
dec
mov
int3
in
cmp
(bad)
xor
lahf
stc
adc
or
je
adc
jp
dec
mov
adc
fcomp
add
jo
sub
hlt
adc
fwait
inc
adc
ficom
or
sub
lock
inc
adc
gs
push
jmp
or
movs
pushf
sub
sub
leave
mov
rol
imul
sbb
setl
lock
cmps
xchg
push
mov
jno
push
mov
mov
xchg
adc
mov
push
ficom
mov
and
xchg
adc
jmp
leave
mov
out
jns
jle
push
(bad)
aas
xchg
push
adc
mov
inc
push
ret
xchg
mov
xor
dec
fstp
not
cmp
scas
xor
movs
adc
and
adc
adc
adc
adc
or
retf
fidivr
push
adc
adc
imul
icebp
sbb
nop
cwde
and
call
sbb
lea
adc
icebp
fwait
jnp
jge
mov
stos
pop
push
pop
mov
mov
cmp
sub
sahf
xchg
scas
shl
jb
cmp
loopne
xor
jns
int3
scas
fdiv
adc
xchg
in
mov
and
fld
or
and
in
lock
outs
fwait
imul
shr
sub
push
cmp
sub
das
jge
fmul
call
or
pop
or
adc
enter
xor
int3
mov
sbb
rep
xchg
ja
and
push
test
mov
inc
pop
retf
mov
push
xchg
sbb
jno
dec
retf
cmp
mov
mov
sbb
or
daa
xchg
jecxz
sbb
jmp
push
aas
imul
mov
pushf
fs
dec
jg
mov
and
adc
add
jno
sbb
retf
add
adc
callw
pop
push
cmp
mov
lahf
into
mov
scas
push
mov
pop
sbb
and
push
mov
pop
das
sbb
hlt
in
xchg
scas
jb
adc
int3
lods
das
aam
fisub
jl
push
sub
inc
mov
xchg
xchg
inc
pop
enter
dec
fwait
sbb
xchg
xchg
jno
and
ror
xchg
cmp
pop
je
jnp
js
and
(bad)
rcl
mov
push
pop
shl
imul
int3
stc
adc
mov
scas
sbb
repnz
adc
mov
test
inc
sub
neg
int
push
aam
cmps
dec
nop
push
adc
cmp
mov
adc
push
addr16
mov
inc
mov
xor
mov
mov
mov
pop
stos
or
sbb
adc
cmp
pop
in
cmps
ins
mov
push
cmp
mov
ret
mov
mov
adc
test
jp
sbb
or
ss
adc
dec
push
mov
rcr
xchg
imul
push
jne
ret
sbb
stos
aad
data16
inc
jle
lods
retf
mov
shl
test
stc
sub
stos
push
(bad)
lahf
aam
push
sub
cmp
sub
icebp
jmp
mov
(bad)
mov
or
pop
ret
(bad)
cmp
sbb
cld
push
clc
mov
jp
dec
xor
cmp
in
fadd
outs
and
(bad)
out
xchg
nop
test
loope
sbb
sahf
ret
jmp
iret
fsubr
cmp
inc
scas
push
fcomp
adc
mov
and
outs
test
mov
push
mov
(bad)
jp
aam
ret
retf
adc
inc
daa
adc
das
(bad)
mov
les
rol
in
shl
push
cmp
(bad)
add
push
push
fldcw
xchg
imul
or
pushf
xor
jle
loopne
mov
jo
pop
xor
cli
pop
xor
dec
mov
dec
in
inc
in
mov
xchg
(bad)
sub
nop
add
adc
pop
push
adc
retf
jne
push
and
in
inc
xchg
adc
mov
or
xor
in
jnp
addr16
jmp
sahf
lods
hlt
ret
in
mov
pushf
(bad)
(bad)
hlt
in
sub
or
mov
or
adc
cmp
rcl
jae
popf
out
fdivr
adc
stos
pop
cmp
adc
test
mov
adc
pop
xchg
pop
mov
gs
and
test
scas
mov
jge
cmp
cwde
xchg
jno
pop
cmc
xor
jg
or
std
mov
adc
or
or
xor
loope
(bad)
jns
aam
dec
aaa
adc
jg
nop
adc
test
and
xchg
xchg
xchg
cli
cmp
fs
sbb
pop
test
push
mov
hlt
mov
inc
sti
xor
jbe
and
sub
xor
sub
jmp
mov
adc
adc
fnsave
mov
adc
hlt
pop
sbb
test
jmp
lahf
push
mov
jle
adc
inc
pop
mov
imul
int3
pop
add
adc
js
xor
xchg
lahf
and
test
(bad)
cmps
aam
dec
push
scas
adc
xchg
ins
je
pop
bound
mov
stos
popa
adc
and
adc
xchg
push
mov
and
adc
int
sbb
es
sbb
adc
cmp
ret
cmc
dec
(bad)
cmp
adc
(bad)
mov
push
repz
add
ins
dec
adc
adc
push
cmp
out
mov
cdq
jne
fwait
mov
ret
(bad)
jecxz
fs
scas
sub
nop
cmp
push
mov
adc
jl
repnz
(bad)
shr
loop
push
dec
test
test
push
ins
push
xlat
xchg
data16
into
adc
fucomi
jg
cmp
and
(bad)
dec
shl
(bad)
scas
xchg
scas
adc
or
test
mov
jle
mov
popf
push
push
icebp
cmp
sbb
pop
sub
cmp
inc
sti
cmp
call
in
add
sub
aam
xchg
pop
test
adc
icebp
call
(bad)
mov
rol
retf
cmp
cli
cmp
sub
or
jo
rcl
in
xor
(bad)
outs
lock
xor
(bad)
dec
rcl
sbb
cmp
scas
add
mov
push
popa
adc
xchg
sub
shl
enter
lahf
pop
xchg
xor
mov
adc
sar
jne
sti
sbb
cmp
xor
(bad)
push
out
aam
cs
(bad)
out
frstor
and
adc
pop
mov
scas
mov
mov
mov
mov
xor
inc
cmc
sbb
js
push
pop
xchg
lods
or
hlt
sbb
or
in
sar
mov
leave
jmp
(bad)
xchg
not
repz
xor
mov
ins
(bad)
mov
jno
inc
adc
(bad)
sar
jmp
jmp
and
mov
cdq
inc
retf
rcr
mov
enter
inc
sub
jl
xchg
outs
and
sbb
sbb
repz
lahf
xchg
and
jmp
ror
mov
rol
adc
add
and
mov
dec
pop
aam
mov
add
imul
dec
mov
cmps
daa
imul
ficomp
xor
call
push
sub
je
add
xchg
push
adc
dec
(bad)
pop
push
mul
(bad)
std
cmp
pushf
xchg
add
aas
retf
adc
mov
xchg
xor
loop
sub
aaa
sbb
dec
pop
adc
es
jnp
out
adc
ds
pop
xor
test
sbb
pop
jp
and
push
cld
sub
sbb
inc
(bad)
int
pop
adc
lea
inc
rol
pop
adc
cmp
and
sti
xor
push
cwde
sub
leave
push
(bad)
imul
xchg
fnsave
cmp
fwait
inc
adc
sbb
sbb
gs
loope
movs
pop
inc
sub
cmp
pop
push
fdivr
in
dec
cmp
lods
xor
or
clc
adc
or
dec
sbb
ins
cdq
inc
adc
lahf
or
cli
imul
icebp
popf
inc
jns
dec
dec
shr
jmp
cmps
(bad)
push
shr
fst
repnz
inc
mov
mov
mov
stos
int3
sub
out
mov
inc
or
mov
push
jge
aaa
int3
xchg
jae
mov
mov
adc
pushf
fwait
xchg
push
int3
dec
or
and
jbe
outs
pusha
mov
mov
sub
inc
cmp
loopne
adc
int
jo
retf
push
pop
adc
(bad)
sbb
sbb
out
add
data16
inc
je
and
inc
inc
xchg
xor
sbb
sbb
std
sbb
je
mov
fistp
inc
cmp
jge
leave
mov
inc
lods
adc
neg
xor
push
leave
mov
xor
add
inc
push
je
xor
test
dec
cwde
adc
inc
stos
xchg
mov
int
fiadd
ins
inc
dec
hlt
cmp
xlat
sub
inc
or
or
inc
fdiv
adc
jg
add
adc
fcom
or
mov
movs
mov
pop
mov
dec
imul
adc
mov
in
retf
lahf
aad
addr16
cld
mov
or
lahf
ficom
jecxz
and
mov
sbb
cmp
jle
jnp
or
cld
jmp
ins
mov
into
iret
fadd
hlt
int3
add
cdq
scas
cld
les
mov
lds
retf
and
cdq
lods
iret
pop
and
loopne
dec
or
cmp
and
sbb
xchg
push
ins
ret
adc
push
retf
les
push
pop
push
jmp
test
or
sub
xchg
and
leave
shl
or
adc
fild
adc
out
cmp
in
and
mov
dec
aam
sub
mov
call
icebp
test
dec
ret
jbe
and
(bad)
shl
and
(bad)
je
(bad)
pusha
or
nop
sub
jne
test
mov
call
mov
mov
add
adc
ds
lahf
das
js
adc
mov
ret
adc
fwait
add
fidivr
stos
adc
and
push
adc
sbb
add
xor
in
ins
xchg
fmul
out
ror
xor
test
out
adc
pusha
mov
and
popf
sub
sbb
dec
xor
ret
clc
sbb
in
dec
sub
inc
retf
sbb
adc
lods
ret
xchg
outs
mov
adc
cmc
mov
loop
adc
mov
rcr
mov
adc
cmp
test
repnz
aaa
mov
lods
(bad)
sbb
lods
and
(bad)
clc
ja
loope
dec
pop
xchg
mov
fdivr
xchg
aaa
data16
adc
push
pop
mov
push
xchg
adc
dec
pushf
movs
dec
xchg
arpl
bound
out
inc
retf
pop
adc
jle
in
cmps
adc
mov
test
push
sub
pushf
sbb
push
dec
not
sbb
and
xchg
std
sub
sbb
cs
out
dec
mov
pop
cli
mov
mov
jmp
clc
push
adc
ficomp
jge
or
adc
lods
lea
daa
mov
and
(bad)
fiadd
and
adc
xchg
in
cmp
js
les
aam
xchg
clc
and
adc
mov
dec
aad
aam
adc
stc
ret
retf
adc
pop
jmp
call
clc
loope
icebp
pop
test
cli
or
adc
fcmovne
mov
add
push
mov
or
dec
pop
and
sbb
cmp
cs
nop
add
push
sub
xchg
sub
loop
ret
out
ins
arpl
out
repz
arpl
cli
jns
int3
outs
movs
add
inc
jb
inc
mov
fimul
inc
mov
into
mov
call
cmp
adc
add
adc
add
push
mov
push
into
adc
rol
mov
adc
ds
mov
and
add
sbb
test
or
mov
mov
dec
fild
adc
stos
aam
ss
jns
lods
and
ds
in
push
aad
in
mov
add
and
adc
add
jle
inc
mov
cmp
int3
rcr
adc
je
mov
shr
adc
mov
(bad)
adc
dec
inc
fmul
adc
imul
adc
stc
mov
fild
pop
add
jo
aam
mov
dec
xchg
(bad)
jmp
addr16
int
xchg
mov
jle
xor
mov
sbb
add
pop
int3
das
cdq
mov
and
repz
(bad)
sbb
adc
icebp
stos
pop
and
ficomp
ds
rcr
cwde
retf
and
jle
leave
pop
pop
jae
mov
add
mov
retf
fldenv
ss
push
pop
cmps
inc
lods
mov
add
xor
in
ins
push
sbb
add
adc
je
loopne
push
fisttp
cmps
fldenv
lods
test
xor
pop
sbb
movs
xor
inc
cmp
inc
pop
lock
lds
mov
popf
mov
mov
xchg
cmp
out
dec
push
in
sti
push
cld
sub
xchg
clc
(bad)
push
lahf
arpl
and
out
leave
retf
sub
cmp
fbstp
mov
in
adc
leave
jo
out
sbb
dec
dec
sbb
pop
sub
and
mov
mov
xrelease
push
mov
pop
gs
icebp
(bad)
xchg
shl
mov
mov
mov
mov
or
and
aam
outs
jle
lahf
aam
push
retf
xchg
in
pop
xor
push
cmp
not
xchg
sbb
and
bound
(bad)
or
pop
xor
mov
lods
or
ins
shl
sub
adc
gs
test
(bad)
es
cdq
aam
fcomp
jp
cmp
sbb
stos
jo
adc
adc
movs
jle
mov
jae
jge
out
adc
das
cmp
mov
adc
lods
or
pop
loopne
mov
jb
popf
hlt
mov
adc
call
pop
pop
mov
test
add
dec
outs
sub
push
adc
push
repnz
jne
cmp
rcr
iret
shr
xchg
loop
ret
aaa
cli
xchg
mov
cmp
cdq
mov
pop
add
mov
sbb
fwait
arpl
mov
pop
cmp
pop
adc
cs
jae
pusha
cmp
sbb
xchg
mov
add
mov
xchg
aas
out
push
xchg
adc
jne
rcl
cdq
ins
xchg
les
ret
and
leave
xor
es
cmp
fsub
mov
nop
out
xchg
imul
das
mov
pop
(bad)
fisttp
das
xor
retf
mul
and
add
rol
stc
rcr
imul
cmps
out
xor
push
dec
dec
lds
push
sahf
out
sub
xchg
cmp
fst
adc
adc
jns
or
(bad)
sub
add
push
fisubr
imul
dec
test
inc
dec
repz
int3
lds
sti
out
or
cwde
and
xrelease
sbb
stc
in
add
sahf
inc
push
movs
mov
shr
xor
push
inc
cmp
sbb
mov
int3
retf
je
or
mov
push
repz
lahf
add
mov
mov
and
(bad)
push
or
loop
jg
jmp
xor
ret
add
fst
in
sbb
adc
cld
scas
xchg
arpl
adc
cli
cmps
stos
aam
sar
dec
and
je
leave
fild
sbb
adc
mov
xchg
repnz
(bad)
outs
push
xchg
imul
fld
inc
lahf
mov
dec
dec
adc
not
sub
or
sub
imul
cmp
shl
xor
cmp
push
movs
sub
mov
fnstcw
sahf
dec
dec
imul
aad
loope
sbb
mov
sbb
int3
jg
adc
shr
mov
cmp
pop
push
dec
call
sbb
dec
adc
and
aam
int3
and
pop
fs
add
rcl
hlt
iret
jbe
data16
mov
sbb
xchg
in
test
outs
inc
sbb
xor
adc
ins
mov
movs
ins
arpl
ds
push
or
fcom
push
xchg
jmp
lods
adc
out
push
hlt
adc
sub
dec
retf
add
je
(bad)
int3
icebp
mov
dec
adc
push
sbb
lahf
mov
push
pop
pop
int3
mov
and
add
xchg
xchg
mov
push
cmp
or
pop
mov
popa
cmps
outs
das
cmp
(bad)
xchg
inc
mov
jb
mov
add
push
sub
cli
pop
adc
push
pop
dec
lds
push
push
mov
popf
jecxz
cld
das
adc
lods
stc
ins
or
(bad)
je
add
in
repz
dec
cmp
cld
adc
sahf
lock
sub
adc
dec
jns
daa
mov
inc
adc
pop
test
stos
data16
adc
push
into
jle
and
pop
xor
(bad)
ja
jnp
sbb
or
sbb
push
stos
push
pusha
sbb
in
xor
in
push
imul
mov
std
in
mov
adc
fisttp
sub
or
xor
add
sbb
fidivr
mov
in
ja
sbb
or
cmc
xchg
dec
sub
ficom
xor
pusha
(bad)
mov
and
add
mov
add
out
ja
das
les
xchg
adc
mov
mov
cmp
and
and
pop
movs
js
stos
sbb
mov
jl
push
adc
mov
retf
mov
pop
aam
or
adc
pop
dec
cmp
sub
and
sbb
adc
pusha
sbb
leave
test
out
sub
(bad)
xor
pop
ror
sbb
pop
mov
hlt
jnp
add
mov
dec
inc
dec
ss
retf
adc
jae
(bad)
ffreep
adc
xor
jmp
jp
retf
xor
pop
jge
loop
icebp
repz
xchg
mov
movs
xchg
fistp
adc
inc
dec
mov
adc
pop
sar
(bad)
out
call
jo
or
pop
inc
call
adc
stos
in
adc
adc
das
cs
lods
or
inc
pop
mov
mov
aas
pop
push
or
adc
adc
or
call
inc
push
adc
xchg
mov
mov
and
mov
mov
icebp
mov
inc
dec
or
mov
dec
sub
repnz
nop
adc
bound
lods
lea
loopne
adc
daa
add
rcr
or
cld
dec
wbinvd
(bad)
ja
pop
leave
sub
imul
mov
gs
loopne
xor
adc
xchg
and
dec
adc
add
mov
retf
pushf
or
mov
es
xor
sbb
xchg
aad
into
or
pusha
mov
dec
movs
sub
repz
outs
mov
adc
push
inc
test
sbb
and
xchg
aam
jmp
(bad)
sbb
fld
cmp
out
xchg
mul
stos
push
cdq
mov
sub
idiv
xor
ins
mul
loope
adc
test
out
ficom
push
clc
fdiv
cdq
ret
lahf
mov
ins
adc
fnstsw
sbb
sbb
jcxz
iret
push
xchg
mov
in
jmp
(bad)
mov
mov
sub
add
mov
out
(bad)
jge
mov
cli
adc
ins
xchg
int
xchg
inc
xlat
popf
mov
sbb
jmp
ins
mov
add
jbe
ja
adc
pop
outs
into
adc
rcr
pop
adc
push
(bad)
test
or
aaa
shr
jl
rcr
pop
sub
and
cwde
fs
fisub
mov
sbb
rol
adc
jg
mov
retf
enter
pushf
in
in
mov
das
arpl
adc
mov
mov
es
lea
xchg
imul
aad
jg
sub
push
sbb
fbld
pop
sub
test
add
adc
adc
loope
(bad)
(bad)
or
xor
xchg
out
cld
pop
jne
cmp
inc
test
xlat
jmp
loop
add
adc
pusha
neg
add
cmp
sub
stc
xlat
pop
mov
mov
into
pop
push
sbb
and
inc
rcr
adc
dec
in
cld
adc
lea
push
mov
push
cli
(bad)
inc
in
or
jns
cld
popf
dec
lods
adc
sub
in
int3
add
sbb
cmc
hlt
jb
fadd
xor
sub
add
mov
lea
cmp
iret
popf
mov
ins
push
sbb
cmp
movs
or
adc
pop
jp
mov
push
in
mov
or
inc
cli
adc
mov
xor
into
dec
(bad)
xlat
cld
adc
fidivr
pop
jmp
mov
adc
pop
test
in
jl
pop
adc
add
or
loop
retf
dec
push
push
cwde
dec
or
leave
mov
xor
adc
add
loop
arpl
dec
sbb
test
or
inc
sub
push
addr16
mov
imul
lods
jns
mov
jb
mov
clc
arpl
mov
rol
repnz
int3
inc
cmps
adc
call
pop
add
fcomp
fadd
xor
addr16
les
xchg
push
adc
jle
or
in
aaa
mov
xchg
int
fist
jne
push
add
retf
or
std
cwde
popf
pop
sbb
div
or
pusha
std
call
imul
test
push
(bad)
lahf
je
pop
cmc
sub
das
jne
push
xor
mov
pop
mov
retf
fdivrp
in
lods
inc
inc
jle
inc
loop
jg
xchg
jl
xchg
je
push
dec
mov
int3
mov
push
test
xchg
imul
mov
aas
jle
push
int3
sub
or
jmp
jmp
leave
xor
push
mov
mov
imul
mov
loop
xchg
xlat
xor
add
movs
call
xchg
mov
(bad)
aas
adc
and
int3
aad
adc
leave
retf
test
adc
inc
adc
aas
ja
mov
repnz
adc
push
inc
adc
adc
sub
(bad)
in
pop
(bad)
popa
mov
jae
ss
push
mov
add
bound
dec
adc
mov
jle
imul
nop
jbe
pop
sbb
add
ins
retf
fwait
jno
push
mov
inc
cmc
or
cmp
out
repz
je
jb
loop
outs
add
call
or
sbb
xor
xchg
in
sbb
fdiv
mov
push
sub
daa
fild
je
loopne
jmp
sub
out
mov
cld
xchg
lds
mul
lock
test
ss
add
daa
adc
adc
loop
adc
ror
mov
cmc
jp
jg
dec
aad
fadd
and
push
sub
adc
xor
(bad)
adc
daa
jnp
push
aaa
scas
call
sbb
pop
ja
aam
pop
dec
adc
enter
and
mov
leave
pop
adc
push
jnp
adc
fs
sub
popa
loope
ds
inc
sbb
jp
pop
inc
push
ffree
or
fsub
cmp
movs
push
adc
imul
adc
jg
or
mov
xlat
bound
mov
add
lods
jnp
adc
mov
les
add
test
xchg
push
push
in
inc
push
sub
or
lock
out
sub
mov
test
mov
xor
in
retf
push
ja
cs
stos
aaa
push
(bad)
dec
mov
mov
or
push
in
ss
push
cwde
jb
inc
cwde
pop
out
in
retf
(bad)
dec
into
jmp
cbw
sub
add
aaa
out
loop
adc
loopne
sbb
cmps
outs
in
mov
push
imul
aaa
aaa
mov
and
inc
sbb
je
add
lahf
add
daa
and
push
out
aaa
add
loop
xor
jmp
and
pusha
adc
pushf
jmp
dec
fisttp
mov
pop
fstp
and
jmp
dec
inc
adc
call
push
push
adc
lods
jp
inc
cwde
sbb
add
call
adc
or
or
(bad)
pop
inc
or
adc
cwde
push
std
mov
stc
jge
mov
outs
clc
or
lods
cmp
daa
imul
push
jo
cdq
scas
cmp
ins
xchg
ss
cmovb
and
out
xor
aam
lock
mov
adc
int
scas
sti
mov
loop
inc
or
adc
nop
(bad)
ror
cdq
inc
jmp
xor
xchg
or
mov
dec
push
xchg
ins
mov
mov
sub
ret
push
or
mov
out
imul
push
ins
jmp
pop
adc
int3
enter
xchg
mov
mov
push
xchg
jmp
sti
sbb
(bad)
lods
stc
jno
call
xor
xor
sub
cli
cmp
and
stc
push
xchg
fnstcw
movs
test
push
inc
stos
mov
or
ins
mul
mov
and
aam
cld
pushf
adc
stos
or
pop
or
adc
xchg
mov
les
and
sub
adc
jge
push
and
cmp
adc
pop
clc
sbb
fmul
icebp
push
(bad)
aas
adc
imul
pop
aaa
mov
popa
fidivr
push
mov
adc
cmp
out
adc
add
jns
inc
push
retf
call
dec
xor
mov
cmps
rcl
sbb
sbb
jb
in
mov
fwait
inc
adc
test
aad
jnp
stc
icebp
enter
cmp
jp
mov
sub
xchg
adc
std
dec
fst
add
and
xor
or
adc
sub
xchg
out
iret
mov
call
imul
lahf
or
mov
lahf
jl
adc
pop
or
and
mov
outs
inc
ficom
add
sbb
ins
hlt
and
cdq
adc
mov
hlt
adc
data16
lods
cli
push
inc
(bad)
ficom
aam
dec
mov
fwait
test
mov
xor
enter
add
ret
das
arpl
stos
push
and
(bad)
push
mov
xor
es
mov
out
xor
das
adc
fscale
mov
push
hlt
leave
imul
jge
das
ficom
and
xchg
scas
and
or
adc
cmp
mov
push
rcr
pop
dec
inc
mov
scas
jmp
cmp
ins
push
add
dec
arpl
xchg
pop
and
fild
addr16
pop
dec
push
sbb
(bad)
jge
add
adc
sti
out
push
xchg
out
inc
xchg
push
dec
pushw
pop
test
push
or
jle
arpl
adc
(bad)
in
shl
jo
mov
pushf
adc
sbb
bound
xor
aam
and
imul
or
into
dec
dec
mov
callw
xchg
or
and
push
adc
pop
aad
add
repz
xchg
adc
inc
sbb
ret
inc
daa
mov
leave
fisttp
and
popf
cmp
lahf
and
adc
jmp
lods
out
mov
(bad)
xor
outs
xchg
push
sbb
retf
cmp
aam
xchg
ja
(bad)
fmulp
nop
mov
or
cmps
adc
xchg
pushf
outs
xchg
adc
je
mov
fdivr
adc
sub
mov
cmps
iret
into
(bad)
in
mov
xchg
cmps
fnstenv
mov
xchg
push
sbb
cld
in
sub
sbb
inc
push
xchg
cmp
sar
pusha
push
mov
out
adc
sub
jg
dec
es
fstp
sub
mov
add
sbb
cmp
add
mov
sub
(bad)
xor
fst
pop
adc
enter
ins
(bad)
(bad)
cs
jecxz
add
or
or
jno
rol
and
dec
inc
fisubr
cmp
push
pop
xchg
jmp
loope
not
mov
sub
push
jae
mov
push
adc
sub
add
sub
sbb
push
dec
(bad)
jge
mov
mov
inc
dec
sbb
shl
mov
(bad)
in
jle
inc
(bad)
xchg
or
ret
adc
cwde
loop
push
inc
or
adc
repnz
xor
mov
push
or
inc
stos
dec
push
in
xchg
inc
test
pop
jmp
mov
jp
shr
adc
sbb
imul
push
cmp
jb
sbb
in
cmc
lods
jae
push
sbb
data16
int3
and
ss
scas
cwde
icebp
scas
aad
jmp
leave
in
dec
or
jge
or
push
test
cmc
sub
mov
adc
mov
sub
push
pop
stc
scas
push
retf
pushf
cdq
or
jnp
shl
jmp
ficomp
test
push
inc
in
(bad)
(bad)
jmp
stos
xchg
lahf
scas
ror
push
aaa
retf
(bad)
cmps
add
stos
sbb
out
xor
pop
mov
dec
or
movs
or
out
xchg
or
adc
inc
imul
std
mov
rcl
jne
sub
call
sub
jmp
adc
cmp
jmp
xor
ins
inc
jno
cmp
or
ja
adc
push
daa
xor
sub
dec
ja
xchg
adc
add
retf
cld
xor
mov
mov
(bad)
cmp
shl
in
imul
je
int3
aas
jmp
add
add
ss
or
adc
jmp
push
sub
aam
fimul
xor
shl
add
loope
cmps
or
stc
iret
xlat
pop
and
(bad)
sbb
mov
mov
xchg
cmp
adc
jp
dec
push
idiv
outs
adc
dec
cmp
mov
mov
push
mov
jnp
hlt
xchg
push
cwde
(bad)
or
pop
or
jmp
or
push
das
rcl
xchg
not
call
adc
fwait
mov
jne
outs
fs
pop
push
inc
icebp
(bad)
cmp
or
int3
and
inc
adc
dec
ret
stos
je
jns
xchg
xor
fucomi
mov
adc
(bad)
pop
mov
ins
clc
lods
push
pop
add
arpl
xchg
ret
push
push
adc
jne
dec
jnp
inc
and
adc
std
pop
movs
bound
add
jns
adc
imul
sbb
retf
das
jne
cld
imul
mov
mov
ret
adc
test
and
imul
leave
xchg
adc
retf
pop
sbb
sbb
call
inc
push
mov
iret
and
and
out
sbb
or
jns
pushf
mul
cwde
mov
outs
jp
xchg
dec
(bad)
xchg
adc
sbb
lea
xchg
adc
jmp
loopne
adc
cmps
jecxz
xchg
std
adc
mov
pop
test
sub
out
jg
pop
(bad)
adc
add
fld
and
cmp
idiv
outs
daa
and
fisubr
xchg
adc
cld
dec
or
ror
inc
in
lods
mov
stos
mov
out
mov
cmp
add
cmp
sbb
dec
movs
ds
leave
add
stos
push
adc
and
sbb
cmc
popf
clc
adc
mov
aam
ss
ins
sbb
adc
jp
addr16
int3
adc
pop
push
clc
inc
mov
lds
adc
cs
pop
loope
push
mov
add
and
sub
add
xchg
add
scas
push
arpl
rcr
add
mov
add
movs
(bad)
bound
push
popf
mov
sbb
adc
lods
push
mov
add
adc
jns
mov
or
sbb
mov
lods
push
imul
stc
loope
jmp
stos
sbb
mov
jg
push
xlat
ja
outs
jle
xchg
sub
in
cmp
jmp
mov
and
cmp
fwait
call
ja
inc
retf
rcl
cld
adc
mov
scas
(bad)
jge
xor
fsub
sub
and
es
inc
out
mov
sbb
cdq
rcr
lods
xchg
pop
jmp
shl
aas
iret
fcom
loope
pusha
test
adc
sar
imul
repnz
pushf
mov
call
popa
aas
sub
test
cmc
push
mov
jl
das
lds
ret
and
push
xchg
fldcw
pop
in
sub
shr
scas
fs
test
adc
mov
fs
cmp
or
xchg
pop
sub
mul
adc
and
je
xor
mov
jne
sub
jg
call
les
sub
xchg
fs
in
adc
scas
sub
cmp
cmp
xchg
out
sub
push
adc
sub
fbstp
mov
jmp
es
or
jp
jns
adc
aam
(bad)
das
in
in
adc
and
rcl
addr16
cmc
js
adc
cmp
dec
out
loope
sbb
and
xchg
inc
scas
adc
xor
inc
leave
mov
loop
inc
and
adc
jo
addr16
adc
mov
cmp
es
xor
pop
jae
fnop
pop
push
adc
pop
cmp
not
out
push
scas
test
xchg
mov
mov
data16
stos
loop
pushf
push
fild
xor
sbb
sar
outs
mov
aaa
das
jp
cs
mov
adc
retf
adc
sti
call
lds
in
xlat
xor
cdq
sbb
or
aaa
hlt
lods
stos
mov
xchg
cs
adc
mov
adc
scas
inc
or
sub
fwait
fs
aam
xchg
jmp
push
cli
(bad)
clc
out
sbb
ja
xchg
adc
bound
jo
inc
add
xor
push
push
fild
add
mov
in
ficom
xor
pop
aaa
cmp
ror
add
adc
jb
push
rcl
out
outs
mov
push
jno
mov
and
push
frstor
jbe
mov
mov
cwde
pop
adc
aas
stos
push
lea
test
cmp
movs
mov
cmp
adc
ins
retf
adc
inc
ja
xchg
push
popa
and
xlat
add
dec
mov
jmp
out
mov
mov
or
push
call
inc
pushf
push
adc
xor
(bad)
adc
out
cmp
push
sahf
lea
int3
aad
push
adc
popf
adc
aad
pop
xor
xchg
jmp
adc
mov
fdivr
mov
ins
stc
adc
mov
push
outs
(bad)
push
shl
(bad)
aaa
retf
or
push
xchg
popa
xchg
mov
cmp
and
imul
jae
adc
add
clc
add
lea
sub
cs
xor
cmp
int3
ins
ja
cmp
dec
imul
adc
and
es
and
xchg
add
fadd
cs
xchg
sbb
addr16
adc
rcl
mov
or
adc
pop
mov
adc
add
jg
in
imul
das
and
pushf
sub
sti
cmp
enter
mov
jp
test
imul
xchg
mov
xor
iret
enter
aam
jp
mov
aam
push
ins
jnp
sbb
fcomp
pop
in
int
jbe
push
adc
dec
aad
adc
add
sub
mov
movs
mov
inc
es
lods
jns
and
retf
rol
xchg
outs
dec
lahf
adc
push
mov
add
adc
push
cld
sar
mov
fiadd
jmp
mov
scas
sub
sbb
mov
mov
test
mov
mov
push
cmc
sar
aam
xor
sub
xchg
into
cld
push
push
mov
dec
test
sbb
ss
xor
movs
and
fdiv
cmp
ins
xchg
pop
xchg
test
leave
sbb
adc
out
icebp
mov
push
pop
hlt
adc
mov
bound
aas
nop
(bad)
lock
fst
inc
mov
idiv
rcr
sub
mov
fld
scas
test
jle
(bad)
(bad)
sbb
mov
ror
loopne
mov
(bad)
sub
daa
pusha
push
retf
push
cli
ficomp
cmp
call
cdq
scas
int3
jne
in
xchg
lds
jg
and
jne
ds
mov
lods
lahf
pusha
push
mov
xchg
sub
mov
cmp
lock
inc
pop
pop
cld
add
imul
aad
and
out
aaa
fucomip
xchg
aad
mov
fimul
push
inc
pop
or
add
or
or
push
dec
loope
iret
jno
sbb
dec
cmps
and
in
xor
jge
aam
inc
jo
xchg
mov
pop
fwait
stos
push
nop
xor
fmul
xchg
test
mov
fcomp
addr16
xchg
lahf
je
cmp
push
mov
inc
loope
adc
arpl
dec
movs
ins
sub
cmps
dec
pop
int
xlat
lahf
not
cmp
mov
adc
and
dec
enter
cld
mov
(bad)
call
sti
aam
pop
cdq
sbb
mov
loop
out
sub
cmp
mov
add
cdq
xchg
push
mov
jbe
sub
mov
test
jp
retf
xchg
add
mov
push
xor
aad
cmps
adc
jmp
in
push
push
pop
repz
and
add
push
mov
xor
hlt
mov
sbb
leave
sbb
or
int3
ins
inc
mov
and
and
add
aad
repnz
clc
popf
jns
adc
dec
jl
or
movs
xchg
mov
dec
mov
dec
leave
(bad)
sub
xor
aaa
adc
aas
aam
test
in
inc
adc
jg
cdq
adc
inc
iret
ins
xchg
sub
mov
mov
add
mov
dec
dec
imul
imul
mov
aam
nop
or
retf
mov
in
fstp
xchg
mov
popf
or
dec
mov
aaa
retf
push
test
dec
fldenv
add
and
xchg
push
adc
fs
int3
loopne
out
adc
mov
fild
inc
xchg
repz
das
xor
xor
fadd
je
ret
popf
in
mov
mov
loope
dec
sub
out
movs
shl
cdq
lock
(bad)
xchg
(bad)
inc
mov
sub
fsub
imul
pop
sbb
and
cld
jne
pop
(bad)
popa
movs
mov
push
jmp
dec
mov
jb
sbb
push
adc
ins
push
jge
lahf
leave
imul
fst
cld
(bad)
dec
(bad)
in
adc
sbb
pusha
push
pop
mov
ja
into
push
cmp
dec
in
js
xor
mov
fs
es
or
jbe
mov
push
outs
cmp
push
aas
dec
rcl
cmp
adc
dec
xor
ss
or
inc
ret
leave
retf
jl
adc
retf
cmp
sbb
mov
or
out
xchg
xor
push
int
mov
and
xlat
or
mov
jo
hlt
pop
xor
inc
(bad)
in
je
sbb
ret
lods
push
xchg
adc
dec
cmp
mov
and
call
or
mov
jne
bound
mov
cmps
xor
adc
repz
pusha
shr
mov
mov
ret
dec
(bad)
repnz
xchg
(bad)
push
sub
adc
hlt
int3
retf
jb
adc
loop
inc
test
shr
push
xchg
gs
clc
jnp
adc
jmp
cmp
lea
xchg
and
adc
and
pop
outs
lock
dec
jno
adc
in
cld
ficom
stos
push
xlat
mov
xor
mov
shl
in
cld
lahf
out
int3
cmp
in
out
fistp
loop
leave
adc
mov
enter
fisttp
pop
or
mov
dec
jmp
ss
arpl
stos
dec
sbb
inc
sbb
push
mov
cmps
sbb
cli
aad
xchg
cmps
loopne
aaa
add
pop
dec
or
or
in
ss
xchg
(bad)
mov
dec
or
jnp
es
cld
popf
inc
pushf
cmp
stos
pop
or
sbb
(bad)
xor
adc
cdq
pop
xchg
add
int3
fwait
in
cmp
adc
push
in
or
call
xchg
mov
push
xchg
push
cmp
in
mov
xchg
pop
cmps
mul
inc
ins
std
add
int3
sti
daa
repz
bound
sbb
loopne
mov
jmp
adc
ror
jns
or
mov
or
or
mov
xchg
scas
sbb
sbb
int3
inc
push
pop
jle
pop
jne
mov
inc
add
xchg
sbb
retf
jge
aas
mov
in
repnz
adc
loopne
sti
cmp
jle
adc
cld
adc
int3
mov
mov
adc
imul
xchg
movs
movs
sbb
jmp
aas
pop
push
mov
into
mov
cmp
mov
stos
sbb
pop
sub
mov
dec
adc
ss
out
jmp
pop
je
add
(bad)
fwait
or
icebp
(bad)
ret
push
out
in
pop
push
shr
leave
call
jmp
jl
pop
int3
int3
push
enter
push
sbb
into
int3
or
add
stc
shr
fisub
dec
arpl
das
and
loopne
test
mov
ds
in
(bad)
mov
add
or
dec
jmp
retf
fsubrp
pop
xor
ja
mov
shl
dec
retf
push
aas
fs
xor
bound
sub
dec
sbb
out
cs
stc
lods
sbb
mov
cmp
pop
cmps
pop
loope
add
stos
cwde
fbstp
adc
ja
stos
dec
add
jae
jg
sub
adc
jle
ins
dec
test
sbb
movhps
lods
aam
aas
sub
xchg
dec
in
call
(bad)
push
xchg
shl
push
aam
xchg
jmp
sbb
aam
jno
in
pop
inc
sbb
imul
xor
mov
adc
ja
cmps
cdq
lock
ins
pop
shr
xchg
ins
sbb
or
adc
pop
or
mov
repz
sahf
dec
dec
scas
cli
dec
add
add
mov
cmp
aam
push
out
adc
sub
ins
xor
push
mov
xchg
adc
mov
call
add
cmc
loop
loopne
sub
pop
hlt
mov
mov
aad
inc
ja
push
cmp
adc
adc
sub
in
pop
dec
lahf
jecxz
je
xchg
push
push
xchg
ja
mov
out
scas
lock
jbe
cmp
pop
mov
test
fsub
mov
ds
(bad)
sbb
mov
add
push
sbb
dec
or
ret
xor
inc
shr
inc
lahf
cs
int3
or
mov
aam
sbb
ss
jo
cmp
sti
adc
mov
or
mov
adc
jbe
imul
dec
sbb
sub
ror
jo
jge
cmps
push
mov
in
adc
jbe
push
mov
mov
ja
adc
pop
lock
dec
test
dec
imul
int3
dec
push
adc
bound
push
mov
mov
test
pop
and
xchg
mov
cmp
jae
in
fidiv
or
js
mov
or
xchg
mov
sbb
mov
shl
outs
leave
jmp
sub
add
std
ror
in
test
scas
rol
add
push
idiv
cmps
sub
adc
int3
cwde
inc
loopne
(bad)
xchg
dec
jno
sub
cmp
mov
jmp
xchg
mov
std
les
dec
or
es
call
retf
xor
and
push
loop
add
aaa
push
out
shl
jl
mov
or
cli
test
idiv
xor
push
mov
mov
sub
push
fbstp
fist
call
in
lods
and
dec
push
aaa
cmc
push
add
and
add
ficomp
sti
cmps
inc
jmp
sbb
mov
inc
push
lock
popf
adc
iret
sbb
adc
sbb
jmp
(bad)
adc
mov
mov
jnp
adc
ja
aam
sbb
or
mov
mov
add
jb
jl
sbb
das
cs
test
mov
pushf
xchg
popf
jl
adc
sub
mov
add
mov
in
dec
pushf
les
and
inc
in
in
jp
add
jo
int3
in
idiv
(bad)
out
pop
or
sub
in
aaa
and
les
add
sub
movs
push
push
retf
adc
pop
push
out
cwde
jle
jmp
sbb
xchg
jl
scas
jb
adc
or
push
push
stc
popa
dec
mov
aaa
dec
(bad)
(bad)
sbb
xor
adc
jae
mov
(bad)
sar
xor
clc
and
or
fwait
cmps
in
adc
and
pushf
sbb
repz
sbb
sub
pop
jmp
out
pop
cdq
loope
mov
movs
adc
mov
add
push
mov
div
ds
jmp
lds
and
cdq
(bad)
mov
rol
mov
nop
jb
xchg
mov
fistp
mov
inc
sbb
xor
lock
repz
aaa
or
out
shl
sbb
xchg
xchg
push
sbb
ins
out
mov
in
dec
je
jo
push
ficomp
popa
sub
cmp
or
clc
daa
adc
out
and
cli
mov
sub
fsub
arpl
cld
in
push
mov
push
shr
push
or
adc
jp
loope
or
cmc
retf
mov
adc
push
scas
cmps
mov
sbb
and
inc
test
or
jb
inc
push
sti
cmp
ins
(bad)
adc
fsubr
aas
or
adc
test
in
cld
(bad)
jno
jecxz
sbb
adc
jmp
adc
sub
mov
in
push
out
nop
xchg
movs
in
push
jnp
loopne
mov
xchg
sbb
out
not
jns
and
adc
adc
mov
fisttp
jae
(bad)
movs
es
adc
adc
or
test
call
jge
sbb
sub
neg
hlt
sbb
xor
frstor
lods
lods
adc
pop
xchg
pusha
xor
mov
out
and
xor
push
adc
cli
pusha
arpl
ja
or
adc
mov
das
movs
imul
ja
unpcklps
in
and
sbb
mov
adc
mov
mul
data16
jp
shr
or
clc
dec
xchg
cmp
icebp
push
sbb
cmps
stos
movs
fmul
call
lods
loop
ins
jo
or
idiv
pop
int3
push
dec
out
das
(bad)
xchg
pop
xchg
loopne
out
xchg
adc
mov
loop
int3
xor
popa
imul
cmp
lods
xlat
int3
cmp
cmc
in
mov
dec
adc
(bad)
movs
in
aam
adc
ds
fdivr
loop
adc
or
outs
xchg
imul
jne
imul
xchg
fsubr
dec
cdq
jne
xor
scas
jmp
(bad)
mov
fcmovnbe
mov
loope
(bad)
scas
mov
sbb
push
pop
mov
mov
aaa
popa
retf
mov
adc
scas
pop
inc
mov
movs
mov
mov
sbb
fadd
push
sbb
ret
inc
imul
xchg
imul
cmp
jne
iret
es
(bad)
(bad)
push
movs
arpl
data16
aaa
test
inc
adc
sub
jnp
push
rol
mov
in
mov
mov
inc
fcomp
xchg
std
add
fisttp
xchg
push
loopne
or
and
outs
jb
aam
adc
fcomp
xchg
jge
ins
cmps
adc
sbb
arpl
aaa
xchg
push
add
dec
gs
mov
cmp
push
xchg
sbb
sub
outs
sbb
xchg
xlat
(bad)
inc
inc
push
leave
fcomp
xchg
or
mov
sub
push
push
je
not
cmps
(bad)
int
pop
ds
inc
(bad)
in
jmp
jnp
call
cmp
shr
retf
xor
test
in
neg
sbb
jns
xor
xchg
out
xlat
bound
adc
les
imul
pop
adc
cmps
mov
into
adc
sbb
mov
add
adc
xchg
pop
fnstenv
in
cmp
add
stos
hlt
sahf
lock
xchg
rcr
adc
call
dec
xchg
adc
jle
push
jl
ret
movs
loopne
push
inc
mov
sbb
mov
sti
mov
test
shl
push
outs
adc
in
pop
adc
not
pop
call
bound
repz
ins
xchg
mov
popf
inc
push
xor
in
fisub
arpl
mov
cli
daa
inc
repnz
xchg
in
ins
movs
pop
or
xchg
cdq
test
add
retf
jno
cmp
xor
addr16
mov
jns
xor
jb
jecxz
mov
test
stos
jne
dec
mov
ja
jmp
adc
inc
aad
mov
or
sar
xchg
mov
adc
out
popf
or
ds
mov
push
int3
repnz
lahf
ss
inc
adc
je
iret
(bad)
lock
push
aaa
mov
push
inc
icebp
xor
xchg
sub
dec
(bad)
sar
repnz
jnp
je
imul
test
ss
pop
jae
outs
retf
xchg
mov
leave
ds
xchg
mov
sbb
or
push
sar
int
cmp
xchg
hlt
push
jl
push
aam
ror
cs
mov
adc
stos
push
in
imul
out
(bad)
(bad)
fdiv
pop
xchg
pop
fadd
retf
lods
cmp
cmps
(bad)
sar
adc
mov
ins
mov
les
rcr
mov
inc
adc
pop
jnp
jbe
dec
cwde
adc
or
jmp
lods
xchg
sbb
cmp
call
aam
inc
fidiv
int
out
(bad)
pop
adc
sub
cmps
adc
sub
int
inc
push
mov
int3
sbb
push
ja
outs
mov
cmps
cmp
aam
sub
loope
jne
adc
js
cmp
adc
inc
jmp
adc
mov
ins
xor
push
pop
test
dec
lea
mov
jge
fs
cmps
xor
not
call
push
sub
adc
fidiv
push
sub
or
xor
push
mov
xchg
jbe
cmp
cmp
jecxz
retf
cmp
inc
push
mov
(bad)
mov
jbe
sbb
sbb
push
pop
add
sub
in
retf
pop
loop
pop
inc
xor
test
sub
dec
test
fnstenv
ins
sub
aas
or
ss
mov
adc
mov
lahf
test
cmps
or
sbb
push
xchg
xchg
jmp
in
mov
mov
scas
jns
push
jp
je
in
ins
push
xchg
in
add
cmc
mov
dec
xchg
loop
fs
mov
jo
cmp
les
jae
mov
(bad)
mov
mov
mov
mov
fisttp
inc
shr
in
mov
dec
cmova
out
pop
fabs
loopne
inc
push
popf
inc
mov
add
sbb
or
jne
adc
mov
call
xchg
xchg
addr16
pop
cmps
stos
adc
dec
push
push
xchg
hlt
dec
sbb
test
mov
adc
adc
fist
(bad)
adc
sbb
jl
clc
sbb
in
inc
movs
xlat
outs
call
xor
inc
mov
adc
fcmovne
adc
cmp
retf
push
jnp
lock
pop
fdivr
inc
lea
std
adc
or
loopne
add
je
lods
mov
pop
and
adc
mov
xchg
gs
std
jl
adc
push
fsub
ret
stos
inc
shl
adc
sub
(bad)
mov
or
mov
lahf
or
and
add
pop
cmps
jmp
adc
and
pop
and
mov
ins
stos
into
xor
hlt
or
or
sbb
xlat
ins
mov
add
add
xor
loope
mov
adc
(bad)
xlat
int3
add
adc
popf
jge
je
and
push
stos
ret
and
mov
loope
push
inc
xor
mov
sti
push
cli
and
cmp
ret
leave
xchg
imul
push
imul
xor
push
sub
mov
retf
mov
daa
dec
cmc
mov
aas
adc
or
xor
adc
sbb
stc
sar
and
inc
rcl
mov
push
fcom
retf
arpl
(bad)
aaa
mov
das
sahf
div
popa
and
clc
and
lods
loope
cdq
and
cs
dec
mov
or
movs
into
jmp
or
push
mov
mov
imul
retf
out
mov
in
(bad)
int3
push
test
ins
adc
test
not
sub
adc
into
lock
xchg
dec
push
aad
inc
les
sbb
mov
pop
xor
(bad)
mov
dec
xchg
inc
aaa
mov
sbb
hlt
adc
adc
loope
dec
xchg
icebp
cwde
adc
loopne
sub
xor
push
dec
sub
pop
push
and
cs
cld
adc
shl
test
or
mov
dec
pop
sub
int3
or
in
ss
mov
adc
shr
loopne
mov
mov
ret
mov
ins
xor
or
mov
pop
stos
in
in
mov
and
cmp
sbb
dec
not
je
data16
push
jle
adc
cdq
ja
and
test
mov
clc
(bad)
cwde
ror
lock
and
jge
(bad)
adc
add
lds
aam
adc
hlt
rol
gs
push
jb
mov
and
adc
in
mov
lds
icebp
adc
sbb
fdivr
dec
cdq
xor
mov
ja
and
inc
pop
loope
adc
shl
mov
xor
push
cmp
int
add
mov
loop
rcr
push
popa
movs
xchg
mov
stos
popa
fldenv
adc
push
gs
mov
mov
lds
sbb
lods
les
(bad)
data16
push
ret
outs
ins
xchg
jne
sub
add
dec
es
mov
lds
adc
stc
push
sar
shl
int
sbb
push
rcr
ror
jge
nop
jb
dec
gs
push
ss
xchg
adc
jnp
push
push
loope
xchg
loopne
cmps
(bad)
(bad)
retf
sub
shrd
or
es
adc
pusha
mov
jmp
fst
div
cmp
into
nop
mov
add
mov
in
mov
add
jmp
clc
cld
scas
scas
adc
das
sub
mov
mov
xchg
imul
cmc
sbb
or
xor
cdq
adc
adc
mov
mul
retf
mov
dec
sbb
xor
inc
std
cmp
lods
popa
jmp
nop
ins
pop
cwde
call
imul
push
dec
adc
jp
daa
push
fwait
outs
push
adc
pop
movs
jecxz
shl
add
push
lods
cmp
adc
aas
movs
push
dec
mov
imul
imul
popa
in
mov
pop
std
inc
aad
or
aam
mov
ins
sar
xchg
sahf
mov
fistp
in
ins
shl
fdivr
xchg
(bad)
adc
pop
fdivr
sbb
cmp
jle
les
loop
xchg
fst
xchg
lods
daa
pop
nop
ss
or
pop
mov
sti
icebp
push
push
call
adc
and
sbb
in
out
adc
cs
and
fdiv
and
daa
jge
add
mov
in
sub
je
test
ficom
jle
clc
movs
movs
mov
adc
lahf
ins
adc
push
xor
shr
test
dec
icebp
mov
adc
add
clc
inc
retf
mov
je
stos
cs
adc
cmps
and
daa
pop
xor
push
pop
jno
cli
lods
outs
div
imul
fadd
sbb
rcl
or
(bad)
adc
ss
push
ja
jecxz
in
xchg
inc
inc
xchg
(bad)
in
mov
mov
jp
fcomp
imul
mov
cmc
(bad)
icebp
sub
sub
out
mov
shr
outs
adc
dec
retf
jp
xchg
in
adc
cmp
imul
loop
jnp
and
inc
call
xor
das
int3
repnz
push
mov
jl
adc
test
or
mov
sub
dec
and
push
scas
out
xor
movs
pop
xchg
mov
xchg
push
(bad)
push
cmp
xor
adc
jecxz
cmp
mov
neg
or
mov
adc
sbb
in
fild
ret
dec
cmp
shl
mov
in
cdq
sbb
jns
outs
add
rol
pusha
repz
in
cmp
fisubr
xor
sub
dec
sbb
lock
and
jge
shr
pop
jmp
(bad)
int
adc
test
aaa
xchg
jl
pop
or
or
ror
mov
mov
pop
rol
adc
jecxz
adc
movs
dec
xor
adc
shl
mov
fs
pop
sub
adc
arpl
add
xor
and
pop
(bad)
xor
stos
sbb
adc
inc
aas
adc
bound
daa
or
in
sub
aas
xchg
data16
push
(bad)
mov
movs
int3
adc
scas
add
in
mov
sar
mov
hlt
push
jb
xor
xor
lods
push
xchg
not
mov
and
scas
push
fnop
add
int
push
aad
ja
jp
or
dec
int3
adc
ins
sbb
mov
ret
(bad)
mov
add
clc
jne
mov
sbb
or
push
jmp
adc
stc
pop
mov
pop
retf
test
aam
cwde
push
out
loop
(bad)
fcos
jge
xchg
rcl
jno
outs
pop
lods
fdivr
adc
ins
dec
pop
sbb
push
sub
sub
xor
clc
fwait
movs
and
sbb
adc
jb
push
fstp
data16
adc
jae
xchg
jns
sbb
mov
mov
jno
fidiv
adc
pop
adc
xor
ins
add
stos
pop
aas
aam
ss
movq
or
xor
(bad)
xchg
cmp
adc
pusha
shl
dec
fcmovu
and
adc
pop
shl
sbb
retf
lds
ins
(bad)
sar
sete
pop
rol
mov
add
(bad)
xchg
push
push
cmp
pop
inc
aam
rol
sbb
cld
xchg
adc
add
xchg
xor
add
xchg
sti
adc
(bad)
ss
mov
in
popw
sbb
or
cmp
pop
pop
push
movs
sbb
mov
push
dec
jb
ins
sub
cmp
pop
xor
cmp
fs
add
frstor
jne
and
scas
mov
inc
push
adc
cmp
sbb
fnstsw
in
jge
in
adc
sbb
mov
adc
lahf
mov
in
and
ja
nop
pop
clc
jae
inc
push
fisttp
in
loop
jge
test
data16
adc
in
aas
jne
push
fild
arpl
and
inc
sub
loop
ins
jno
fdiv
retf
aam
rcl
adc
push
push
rcl
imul
inc
pop
or
and
xchg
idiv
or
adc
mov
add
jmp
push
fwait
dec
xor
out
in
adc
or
fsub
xor
fcom
retf
mov
ror
mov
xor
inc
sub
adc
push
jp
test
adc
mov
inc
mov
pop
cmps
add
mov
cwde
dec
test
pusha
sbb
jge
rcr
loope
call
push
pop
adc
ins
cmps
sub
imul
cmp
mov
fld
les
scas
xchg
inc
inc
lock
push
int
in
popa
adc
xor
cmp
sbb
int3
adc
loopne
pop
pop
pusha
jecxz
sbb
sbb
retf
xlat
test
adc
pop
and
adc
jecxz
iret
retf
movs
and
out
dec
int3
(bad)
mov
cmp
pusha
adc
push
sub
je
bnd
(bad)
pop
sub
cld
xor
adc
enter
adc
dec
loop
mov
pop
sbb
addr16
jmp
test
inc
push
adc
adc
das
stc
ror
iret
inc
xchg
fistp
mov
and
icebp
mov
sbb
stc
ficomp
ret
fdivr
fbld
pop
out
aam
arpl
xchg
cli
jl
add
shl
aas
inc
je
cmp
(bad)
leave
push
mov
test
dec
pop
push
lods
sub
lea
push
cmps
hlt
xchg
rcr
out
repnz
and
aas
add
ror
mov
ja
repz
retf
ret
mov
jecxz
add
xchg
xchg
or
mov
adc
jge
add
aad
shl
lds
imul
xor
xchg
xor
sbb
icebp
stos
loop
or
mov
test
mov
mov
adc
dec
fimul
cmp
inc
out
add
test
in
out
cld
call
dec
fldenv
nop
push
jp
xor
retf
inc
stc
sbb
test
jge
cmps
js
adc
push
sub
data16
mov
aam
(bad)
cwde
cmp
sbb
sub
popf
das
dec
rcl
iret
les
popf
(bad)
adc
xor
stos
and
jae
add
nop
push
cwde
and
push
adc
adc
cdq
inc
pop
nop
jp
dec
hlt
adc
mov
outs
xor
jmp
fisttp
scas
or
cmps
mov
inc
and
add
or
addr16
adc
stos
in
ret
cmp
in
in
push
mov
and
sbb
sbb
ins
aam
call
fiadd
es
mov
adc
out
leave
mov
and
sar
adc
and
daa
xor
jb
cli
or
pop
push
cmp
sub
inc
imul
mov
push
push
in
push
sbb
cli
mov
lock
fcomp
and
sbb
cmp
add
(bad)
ss
xchg
pushf
push
cmp
lock
mov
inc
pop
mov
adc
push
fsubp
jb
xor
fst
push
popf
lahf
jecxz
cmps
mov
test
cmps
push
inc
in
mov
fwait
add
retf
dec
pop
sti
outs
jbe
scas
imul
dec
inc
es
movs
jmp
add
xchg
data16
jnp
repnz
add
fstp
aam
out
enter
inc
cs
lock
je
iret
inc
cmps
xchg
stos
std
out
in
scas
pop
sub
(bad)
sbb
xchg
xchg
mov
xchg
cs
adc
int
mov
rcr
xchg
cmp
ret
xor
cmps
(bad)
in
push
adc
stos
aam
imul
nop
retf
xchg
rcl
xor
shr
pop
mov
aaa
pusha
(bad)
adc
ja
(bad)
xor
jmp
lods
xor
mov
dec
sahf
adc
test
cmp
in
jle
fld
loopne
sub
aam
stc
xchg
push
adc
out
pop
fucomi
aam
sub
test
push
xchg
in
(bad)
xor
sbb
fst
pop
fist
adc
add
inc
push
adc
imul
cmp
xchg
xchg
pop
mov
sbb
call
adc
xchg
jp
push
mov
fwait
inc
cmc
div
mov
loopne
xchg
dec
adc
dec
mov
jbe
retf
aaa
in
in
movs
out
bound
adc
in
retf
jo
cs
jae
dec
xor
inc
push
mov
out
mov
cli
lock
retf
cmp
repz
inc
test
loop
movs
mov
es
jnp
call
je
mov
ret
data16
mov
cmp
sbb
cwde
xchg
push
sbb
(bad)
call
loope
inc
mov
add
inc
mov
iret
mov
sbb
sub
dec
loope
push
les
and
sbb
or
or
mov
pushf
sti
mov
cmp
mov
adc
jp
cmps
repz
ja
inc
push
mov
enter
aad
dec
push
sahf
add
(bad)
in
in
mov
sar
inc
adc
test
push
mov
adc
jecxz
ss
(bad)
test
aam
sub
clc
(bad)
jne
rcl
int3
mov
jg
mov
popa
cwde
(bad)
adc
int3
fnsave
adc
jmp
aam
adc
pop
test
popa
call
fbld
and
jmp
add
or
cmp
jbe
pop
lock
jns
repnz
pop
and
popf
dec
adc
adc
nop
pop
push
adc
xor
sub
pop
(bad)
in
mov
jns
mov
adc
mov
push
rcr
sbb
icebp
xor
and
addr16
adc
push
dec
cmps
enter
adc
ds
jmp
fs
xchg
inc
push
or
dec
adc
mov
mov
retf
ja
adc
bound
js
xor
mov
ret
test
pop
mov
pushf
sub
into
ror
xchg
movs
outs
dec
(bad)
repnz
addr16
adc
jmp
cmp
adc
fwait
xchg
fdivr
mov
(bad)
iret
jbe
adc
push
mov
pop
lahf
hlt
frstor
out
mov
clc
add
dec
jmp
push
dec
sub
or
jnp
jmp
fadd
cmp
push
mov
adc
xchg
enter
jmp
repnz
lahf
pop
out
ins
(bad)
sbb
inc
cmps
shl
inc
cdq
adc
mov
test
ins
je
xor
cld
adc
out
pop
arpl
sbb
sbb
imul
ds
leave
imul
or
lahf
mov
jge
pushw
arpl
push
pop
adc
and
adc
push
js
mov
mov
adc
mov
adc
sub
xchg
pop
jbe
xchg
rep
inc
sub
sbb
mov
aam
jae
adc
dec
inc
nop
loopne
out
push
xor
rcr
push
cmp
(bad)
vandpd
dec
adc
fadd
mov
repnz
(bad)
cmp
stc
xor
mov
push
scas
cli
mov
int
adc
je
int3
mov
xlat
and
mov
rol
and
sbb
popa
stos
xor
call
clc
pusha
xchg
mov
mov
ja
int
push
jne
xchg
aaa
adc
pop
push
xchg
std
lahf
adc
xchg
push
ror
hlt
fwait
inc
ds
das
out
adc
pop
fsub
std
movs
jae
jmp
xchg
sahf
push
out
inc
mov
hlt
ss
jno
cmp
or
mov
add
push
mov
popf
xchg
xchg
push
mov
es
pop
xchg
inc
mov
cmp
rol
pop
std
add
jmp
sub
je
or
push
adc
sub
in
pop
repnz
in
xchg
stos
test
cld
mov
mov
pop
add
or
pop
adc
fwait
add
pop
cmps
fdivr
push
addr16
(bad)
out
jne
jle
inc
(bad)
(bad)
int3
arpl
dec
lods
xchg
(bad)
ins
adc
ret
xchg
or
call
ds
pop
ins
inc
adc
sbb
movs
ffree
add
test
fnstenv
pusha
mov
jl
sbb
or
or
adc
(bad)
hlt
pop
xchg
sahf
rol
ins
dec
mov
outs
fsub
sbb
jno
lods
lds
outs
fadd
out
jne
and
imul
das
cli
adc
rol
mov
icebp
iret
fisubr
dec
pop
adc
movs
sbb
aam
sbb
adc
scas
or
add
call
sti
movs
nop
xor
dec
inc
in
sbb
ret
push
or
xchg
xchg
fsubp
push
in
mov
inc
aam
xchg
into
movs
mov
mov
adc
mov
mov
push
pop
pop
xchg
sub
fdivr
cmps
jmp
push
mov
pop
or
cmp
mov
jbe
jl
sbb
call
mov
outs
xor
inc
inc
fisub
or
retf
cmps
ftst
jg
ss
into
pop
sbb
stos
in
in
call
rcr
mov
stos
loop
xchg
outs
jmp
sbb
dec
pop
xchg
je
add
xor
and
and
xor
int
xchg
cmp
sub
loopne
cld
and
and
cli
or
imul
and
add
or
lea
mov
adc
or
out
outs
call
in
push
pop
call
and
adc
aam
mov
in
inc
cmp
pushf
mov
mov
mov
or
mov
mul
dec
(bad)
push
pop
adc
(bad)
xchg
es
loopne
enter
jle
sbb
cmp
mov
daa
inc
xor
nop
add
icebp
sbb
bound
jle
add
in
adc
retf
xor
push
jbe
in
adc
sar
(bad)
cmp
or
in
dec
dec
call
in
xchg
popf
adc
jg
mul
std
jp
adc
inc
sub
ror
cmp
es
mov
std
cld
sbb
arpl
icebp
pop
push
ss
data16
inc
movs
loopne
sbb
out
stos
movs
jns
mov
dec
fild
iret
sbb
inc
enter
or
jbe
xchg
repz
jecxz
stc
cmp
cmps
sbb
xor
adc
jl
leave
and
sbb
pop
movs
not
mov
frstor
loopne
mov
into
jnp
(bad)
mov
adc
repz
inc
jmp
xor
adc
adc
retf
or
lock
sub
push
jmp
dec
fcomp
sar
add
xchg
jmp
retf
push
jmp
adc
mov
(bad)
sbb
inc
push
sti
sub
movs
push
pushf
cwde
in
leave
jg
mov
sbb
popf
dec
jmp
mov
push
clc
retf
or
add
cmps
out
push
pop
adc
add
jb
movs
cmp
out
aad
movs
sbb
xchg
mov
leave
iret
mov
mov
add
dec
lahf
call
out
jbe
lea
inc
cmps
mul
out
sbb
xor
adc
loopne
pop
retf
sbb
mov
inc
adc
push
adc
test
inc
mov
ds
inc
jnp
push
pop
jg
in
mov
movs
jbe
ret
nop
pop
mov
push
adc
rol
popf
or
xor
adc
xor
int
and
fst
sub
inc
add
jno
sbb
mov
sub
stos
test
adc
outs
xor
adc
jp
icebp
cmps
xchg
test
adc
iret
cmp
cmp
mov
mov
inc
and
jmp
xor
cld
cmp
mov
neg
mov
fisub
fst
inc
xchg
ret
pop
out
fs
cli
xlat
push
in
push
call
jae
je
js
xor
mov
adc
or
adc
jecxz
push
je
xor
push
fisub
sub
retf
sbb
gs
pushf
push
aad
cmp
hlt
mov
push
pop
inc
lea
adc
icebp
dec
aad
gs
bound
xchg
les
push
sar
push
push
in
mov
loop
(bad)
xor
cdq
shl
cmc
lock
sbb
and
and
out
xor
xchg
pop
add
scas
and
in
out
add
push
ret
mov
push
mov
lea
arpl
out
cmp
je
push
or
add
sahf
fnsave
in
stc
inc
in
lock
mov
out
test
fdivr
cmps
add
ins
fild
jno
and
xchg
cwde
mov
xchg
adc
mov
fucomp
sahf
stc
adc
mov
ins
int
in
ret
(bad)
inc
test
call
test
gs
sub
adc
cld
daa
adc
scas
adc
dec
aam
inc
inc
cdq
cmp
scas
and
add
add
sbb
push
xor
int3
xchg
adc
aam
xchg
pop
fucomip
pop
add
leave
jo
in
call
fwait
sub
pop
pop
adc
lea
ret
jmp
mov
xor
inc
jmp
call
dec
fdivrp
sbb
cld
push
test
repz
clc
pop
xchg
dec
sbb
paddd
pop
mov
jl
shr
aaa
mov
call
xor
mov
ins
and
aaa
jmp
add
repz
adc
imul
aaa
lds
dec
lahf
adc
xchg
outs
std
(bad)
dec
xor
jno
sub
inc
inc
cmp
sbb
jne
pop
sbb
adc
out
fldlg2
add
push
int3
cmp
jns
sbb
(bad)
ja
fs
retf
mov
push
push
xchg
dec
and
(bad)
test
inc
or
nop
and
dec
jb
repnz
mov
mov
out
push
xchg
add
rep
sti
hlt
aam
or
add
in
lea
lahf
fsub
sbb
ror
mov
icebp
sbb
push
je
and
out
jecxz
mov
ss
in
adc
loope
(bad)
(bad)
cs
gs
in
xor
pop
ja
adc
and
stos
jp
adc
push
fisttp
mov
cwde
sbb
adc
out
push
in
xor
test
push
pop
mov
jp
movs
xor
adc
in
aaa
movs
or
cld
icebp
sbb
enter
xor
pop
push
scas
test
ins
add
je
popa
lods
(bad)
mov
push
mov
dec
xchg
mov
mov
sbb
ror
ins
cmp
ins
sbb
dec
add
je
xor
shr
cmp
les
dec
fcom
retf
pusha
inc
pop
adc
jge
adc
dec
repnz
jne
cmps
pop
cmp
add
cld
xchg
mov
adc
test
cmp
or
retf
adc
js
mov
sbb
outs
pop
pop
fdivr
hlt
out
adc
mov
inc
add
mov
adc
cmp
push
out
test
out
repz
xor
mov
pusha
jnp
push
jg
cmps
int3
xchg
aaa
fisub
push
adc
inc
xchg
lea
mov
std
in
jg
aam
xchg
jno
sub
rol
xchg
push
hlt
adc
sub
jmp
dec
test
adc
push
ja
sbb
mov
cmps
push
pop
addr16
sbb
loop
push
inc
mov
adc
xchg
cli
adc
jg
imul
sbb
test
and
mov
call
push
(bad)
push
data16
cdq
dec
xchg
xor
dec
or
outs
call
mov
and
push
pop
push
xlat
fnstsw
mov
push
lahf
push
push
into
xchg
sub
jne
add
mov
jae
and
dec
daa
mov
shl
lock
jae
(bad)
cwde
xchg
sub
inc
inc
pop
and
not
pop
aas
adc
loope
sbb
mov
or
mov
xchg
ror
or
mov
pop
jg
pusha
xchg
sbb
aam
adc
sub
ss
pop
mov
loop
pop
and
adc
cmp
in
je
adc
mul
aaa
lahf
clc
icebp
or
cmp
js
retf
je
adc
stos
imul
sbb
lds
cmps
mov
push
js
sub
dec
ins
aas
mov
das
cmp
out
ret
js
fninit
mov
loope
outs
in
mov
std
lods
fstp
adc
fist
ficom
sahf
jg
int
cmps
pop
je
inc
inc
movlps
sbb
adc
sub
out
sub
test
daa
inc
add
lahf
test
(bad)
cli
xchg
loop
leave
je
sbb
add
cmp
cdq
jo
outs
pop
adc
(bad)
xchg
adc
inc
es
adc
ror
nop
sbb
test
dec
in
mov
push
dec
mov
(bad)
in
outs
dec
sub
inc
xor
out
adc
aad
and
add
pop
jmp
(bad)
fst
ss
movs
(bad)
add
hlt
pushf
xchg
imul
jg
jne
jb
mov
arpl
in
xor
or
dec
pop
loope
and
cwde
xor
jl
sbb
(bad)
mov
sbb
inc
(bad)
data16
aad
int3
lods
mov
xor
dec
inc
sub
and
aad
out
xchg
mov
int
or
cmp
out
jbe
mov
test
adc
ja
out
je
and
and
mov
jnp
push
sbb
and
hlt
pop
jl
pushf
ficomp
push
xor
in
ja
dec
mov
adc
fwait
lods
rcl
lods
mov
mov
fldcw
retf
data16
xor
xchg
and
inc
inc
imul
lock
je
xchg
fidivr
adc
pop
push
test
mov
leave
rcl
imul
std
leave
xlat
stos
ss
test
inc
sub
ds
push
pop
push
ins
mov
mov
hlt
adc
sbb
inc
dec
adc
sub
adc
jmp
pushf
push
ja
repz
retf
cwde
jmp
xchg
in
int3
scas
test
mov
ret
shl
inc
and
cld
push
cld
xchg
jns
xchg
aam
sbb
jb
cdq
pop
sub
retf
sbb
fs
aam
ins
sbb
push
dec
sbb
shl
sbb
cs
ins
add
mov
test
add
cmp
or
mov
xor
movs
mov
ror
add
int
push
or
aaa
mov
rcl
cdq
pop
cmp
inc
mov
leave
dec
push
ror
mov
jnp
shl
cmc
pop
jge
inc
mov
mov
adc
mov
adc
mov
jmp
retf
sub
cmps
push
pop
loopne
lods
shl
pop
add
call
movs
adc
sbb
cdq
ds
bound
mov
in
retf
call
(bad)
and
xchg
hlt
jg
cmp
cld
cdq
adc
sub
add
js
adc
movs
sahf
inc
inc
jb
dec
sub
pop
retf
dec
push
and
ins
out
cs
xchg
inc
es
jp
repz
dec
scas
adc
dec
xchg
lahf
sub
mov
xor
jmp
inc
test
push
or
lea
int
ss
push
mov
cmp
iret
cmp
dec
hlt
or
cmps
xchg
inc
adc
sub
fst
ret
mov
test
scas
lock
sahf
pop
sbb
out
shl
add
sbb
xchg
out
je
nop
jecxz
gs
jle
sbb
cli
jns
mov
pop
add
call
ss
test
pop
(bad)
adc
jno
adc
sbb
int3
jne
stos
jb
dec
xlat
xor
mov
aam
mov
jb
sti
in
fild
mov
leave
cmp
aad
adc
(bad)
sbb
out
(bad)
imul
test
and
shr
lock
inc
aam
pop
test
add
je
sbb
adc
adc
push
hlt
cmp
mov
xchg
adc
jbe
ja
hlt
lods
call
pusha
sub
mov
xchg
aaa
mov
inc
rcl
(bad)
in
cmps
push
mov
call
xchg
jne
jp
adc
aas
mov
jl
sbb
in
not
mov
fld
jnp
xchg
fs
call
push
mov
jae
sbb
sub
adc
iret
and
adc
pop
or
sub
ret
and
inc
sub
xchg
xor
jecxz
in
stos
push
sub
call
scas
dec
leave
retf
ja
xor
jno
loop
retf
jecxz
xchg
addr16
pop
daa
add
cld
push
out
and
adc
dec
xchg
and
sub
ret
sub
cmps
and
mov
es
rcr
sti
adc
push
out
cmps
or
adc
mov
cmp
into
(bad)
and
div
jp
dec
leave
pop
or
sbb
popa
in
cli
adc
push
adc
cmp
out
pop
movs
ja
adc
arpl
dec
or
in
and
push
or
push
imul
xor
push
adc
sbb
sub
inc
add
dec
ds
(bad)
cmp
and
test
mov
mov
in
imul
clc
add
jno
cli
jge
adc
cmp
movs
jg
jmp
adc
outs
fisub
or
cld
leave
xchg
cmc
hlt
iret
(bad)
gs
out
dec
push
std
mov
mov
bound
sar
sub
push
int3
jmp
scas
out
pushf
test
(bad)
in
xchg
outs
mov
mov
int
cwde
mov
adc
lahf
aad
or
push
sbb
or
xor
push
movs
sub
(bad)
xor
cmp
js
notrack
adc
or
add
mov
fisttp
adc
jne
lods
push
sub
(bad)
test
xor
ins
cdq
xchg
sub
xor
cmp
retf
push
imul
das
aas
sub
sbb
mov
or
ins
aad
jmp
xchg
lods
push
mov
sub
data16
cs
lahf
adc
push
(bad)
mov
sub
adc
xor
out
arpl
xlat
xchg
lahf
pop
sub
sub
in
adc
es
jns
cmp
sbb
sbb
add
push
test
mov
jbe
mov
idiv
push
movs
aam
outs
pop
mov
sbb
data16
fsubp
and
adc
push
sbb
jns
mov
mov
dec
aam
jmp
push
jl
adc
xor
(bad)
pop
jbe
sbb
add
mov
pop
mov
add
ja
(bad)
push
add
adc
dec
push
enter
cmps
adc
popa
mov
mov
inc
dec
adc
scas
fldenv
mov
out
push
mov
leave
xchg
xor
adc
or
dec
adc
pop
adc
and
xchg
(bad)
or
jne
and
leave
dec
cmp
pusha
push
cmps
adc
sbb
adc
inc
in
in
fldcw
xor
pop
adc
aad
pop
adc
sub
mov
jg
push
lods
jb
cmp
adc
or
push
test
cwde
mov
or
xor
imul
adc
gs
mov
pop
clc
rcl
push
lods
je
cli
jmp
ror
clc
mov
mov
call
push
rol
or
push
imul
sub
stos
lahf
xchg
add
fs
out
pop
xchg
mov
imul
sbb
(bad)
mov
pop
jne
ror
stos
xchg
call
adc
ror
(bad)
sbb
in
mov
shl
push
aaa
repz
pop
scas
and
or
(bad)
cmp
mov
cli
mov
lods
xor
dec
jne
adc
mov
arpl
pop
adc
popf
jmp
sbb
push
mov
mov
outs
fs
jl
ficom
jnp
and
(bad)
in
mov
jecxz
jecxz
pusha
xor
pop
in
in
cdq
and
loopne
scas
jmp
inc
add
loope
xchg
cmp
and
ins
mov
mov
dec
fldenv
and
inc
dec
mov
imul
and
push
adc
(bad)
mov
push
je
mov
(bad)
call
hlt
enter
in
cmp
loope
sbb
mov
popf
xchg
push
xchg
hlt
stos
push
int3
inc
loop
adc
movs
js
and
pop
inc
jp
xchg
mov
adc
add
and
xchg
sbb
and
add
pop
push
cli
es
mov
and
adc
test
ror
push
inc
xlat
jle
hlt
mov
adc
cmp
lds
push
xchg
in
jecxz
shl
add
sub
jmp
pop
loop
add
in
movs
xchg
call
imul
jge
shl
or
cli
loope
xor
push
shl
jp
ins
add
shr
scas
cmp
jg
fbstp
lds
mov
rcl
inc
dec
enter
xchg
jmp
xchg
mov
stc
ror
fadd
push
inc
je
imul
retf
push
pop
ins
hlt
cmp
and
test
call
mov
jmp
sbb
cmps
fdivr
push
add
jae
call
movs
aad
adc
push
in
mov
(bad)
fnstcw
push
fisub
in
dec
ins
out
push
mov
jl
and
or
retf
xor
int
loopne
cmp
mov
adc
mov
in
pop
mov
lahf
or
xor
xor
add
inc
dec
inc
sbb
ds
xchg
(bad)
pop
hlt
and
sbb
fsub
test
pop
add
xor
jmp
xchg
sbb
cmp
push
iret
pop
mov
dec
clc
sub
adc
pop
push
sub
adc
xor
nop
pop
test
sbb
dec
(bad)
out
ror
jbe
push
adc
retf
inc
cmp
push
dec
repnz
adc
lods
push
mov
je
pusha
jnp
pop
push
adc
fistp
test
push
and
adc
pop
aas
daa
iret
sub
data16
ja
icebp
adc
cs
cmp
and
ror
dec
sbb
fnstcw
test
push
sub
rcl
inc
sbb
aaa
adc
jno
and
fisub
sub
adc
xor
loop
bound
inc
cmps
aad
unpcklps
not
mov
scas
sbb
push
cld
inc
sbb
out
test
icebp
jns
xchg
mov
cmp
ins
inc
inc
or
adc
div
addr16
adc
retf
dec
call
inc
adc
sub
fsubr
and
adc
jg
xor
repz
inc
and
adc
sbb
or
leave
adc
ins
pop
cld
rol
jmp
idiv
or
mov
repz
outs
leave
das
call
push
test
das
adc
arpl
outs
add
xchg
je
dec
test
jnp
leave
sahf
icebp
cmps
sub
dec
imul
pop
cld
cmps
sub
call
enter
adc
(bad)
dec
xchg
les
outs
mov
mov
jmp
daa
sbb
dec
pusha
mov
adc
fidiv
out
mov
bound
test
jg
adc
stc
inc
sub
ins
add
adc
mov
adc
(bad)
push
dec
mov
mov
jmp
pop
aaa
lahf
shr
sbb
mov
out
jae
sub
stos
aas
push
and
adc
and
(bad)
jmp
push
mov
ins
and
cmp
jmp
nop
fld
sbb
adc
aaa
or
mov
sbb
outs
mov
adc
mov
fst
mov
adc
pop
jmp
cli
mov
pop
std
adc
xchg
push
shr
fcom
sub
sbb
jp
js
push
fidivr
pop
fldcw
outs
and
mov
out
jnp
push
push
jle
adc
xchg
and
repnz
dec
mov
(bad)
pop
ss
mov
ret
aas
sbb
cmc
jmp
cmc
add
push
clc
mov
sbb
mov
mov
ins
sbb
jmp
js
ret
cmp
imul
inc
sub
jmp
add
xchg
stos
aas
cli
lea
jae
out
and
shr
sbb
int3
lea
in
clc
mov
pop
shl
mov
mov
daa
sbb
push
push
push
jne
fld
jmp
or
and
sub
lahf
xor
dec
out
fist
sbb
sbb
xchg
div
and
ins
je
arpl
int3
call
call
scas
mov
mov
cmc
imul
sbb
fwait
stos
dec
mov
cmp
add
in
sub
push
mov
(bad)
jo
(bad)
hlt
push
inc
aam
retf
scas
ins
push
in
out
ss
movs
xchg
xchg
push
mov
int3
xor
in
int
aad
push
add
(bad)
jns
int3
bound
sub
loop
enter
cmps
out
mov
pop
je
pop
div
cmp
adc
mov
into
jno
int
cwde
and
test
lahf
sbb
shl
aas
mov
inc
dec
int3
mov
aam
ins
sub
push
mov
sub
adc
lahf
fsub
aad
mov
push
sub
xchg
ins
adc
inc
sbb
jb
lahf
cs
loop
outs
xchg
and
es
out
xor
fadd
cmp
loopne
add
xchg
mov
nop
adc
cmp
inc
adc
add
mov
shl
cmp
loopne
popa
and
les
xchg
xchg
push
fcomp
adc
cmp
jmp
outs
into
out
dec
xchg
jle
adc
jb
in
inc
xor
repz
lods
ds
adc
retf
pusha
jno
int3
adc
pop
stos
(bad)
js
aas
add
mov
cmps
inc
rcl
inc
(bad)
adc
nop
(bad)
jmp
loop
arpl
pusha
mov
inc
retf
stos
stos
mov
daa
adc
or
jmp
sub
fiadd
loop
in
and
mov
cmc
or
fcmovnu
mov
sub
xchg
arpl
mov
cmps
xchg
sub
mov
outs
dec
in
mov
push
mov
mov
out
adc
mov
mov
adc
mov
cmp
ins
push
out
outs
jecxz
pop
push
jmp
enter
or
lds
inc
ficom
std
cmp
xlat
popa
je
enter
mov
mov
jb
inc
or
call
call
or
dec
fbld
fdivr
cdq
push
ss
and
cmc
into
push
inc
sbb
pop
add
aam
pop
dec
or
adc
imul
bound
mul
push
je
es
arpl
add
aad
adc
adc
mov
je
retf
mov
adc
lock
sbb
rcl
cmp
enter
push
mov
mov
mov
test
jp
cs
jmp
and
jge
mov
xchg
mov
jl
inc
mov
repnz
push
adc
(bad)
jae
mov
push
adc
jle
in
mov
out
sbb
data16
sub
not
out
mov
mov
push
push
mov
cli
adc
cld
sar
retf
xchg
adc
dec
ja
or
int3
xor
mov
outs
repz
adc
clc
jl
in
test
ss
pop
call
xchg
mov
inc
jmp
push
leave
mov
and
rcl
and
ret
in
test
shl
jecxz
mov
xchg
pop
and
std
loopne
call
adc
clc
inc
xchg
ins
cld
ds
cli
pop
add
pop
movs
enter
dec
mov
adc
inc
ret
fsub
sbb
mov
push
fidiv
mov
mov
rcl
sub
stos
xchg
dec
imul
push
adc
jno
push
dec
int3
(bad)
sub
jmp
sub
add
and
sub
test
mov
retf
jp
adc
retf
adc
adc
(bad)
mov
es
adc
out
dec
mov
adc
xor
dec
test
sub
and
xchg
and
dec
icebp
inc
je
cmps
adc
dec
cli
pop
jo
test
pop
leave
mov
getsec
push
push
out
enter
sub
sub
or
cmp
lds
dec
movs
push
dec
jbe
sbb
test
xor
mov
ds
adc
fistp
(bad)
fiadd
dec
retf
xor
imul
ins
imul
pop
adc
lods
repz
iret
adc
adc
sbb
aam
push
out
push
das
test
sbb
add
adc
mov
and
pop
jns
sub
xchg
int
xchg
fsubr
in
or
cwde
adc
leave
sar
pop
out
and
ss
stc
mov
test
push
or
in
jmp
mov
xchg
ror
std
and
adc
cwde
add
bnd
mov
add
mov
data16
cmp
pusha
js
jg
sbb
sbb
scas
fsubrp
mov
std
in
arpl
shl
lods
test
adc
fisttp
(bad)
std
test
imul
mov
inc
jmp
mov
enter
ins
xchg
sbb
ror
cmp
imul
mov
xor
dec
lods
mov
pusha
les
cmp
cmp
rcl
in
adc
add
push
xor
adc
cmp
mov
mov
or
jp
sti
sub
stos
mov
cmp
adc
mov
adc
in
mov
jmp
mov
out
push
inc
pop
jae
adc
add
sbb
jns
inc
pop
sbb
or
scas
and
je
sti
lds
xor
cmp
adc
push
jb
scas
adc
sbb
fimul
aaa
pop
mov
ret
test
in
jnp
out
loopne
mov
pop
inc
add
retf
das
mov
out
movs
mov
lds
or
into
and
or
push
gs
mov
adc
retf
pop
dec
cmp
int3
xchg
into
xchg
jne
int3
sti
sub
xchg
and
es
call
jge
xor
jmp
pop
mov
dec
dec
bound
or
das
jg
fcomp
loopne
sub
push
add
mov
jl
and
push
xor
pop
jmp
je
aad
je
retf
adc
xlat
mov
jno
retf
xor
ins
mov
and
popf
adc
sbb
jmp
push
mov
cmps
aam
call
mov
shl
pop
adc
adc
xchg
jmp
pop
push
sub
mov
enter
add
ins
push
cmp
mov
pop
les
repz
test
adc
mov
test
xor
movs
(bad)
cld
inc
adc
mov
loopne
and
mov
dec
adc
shl
and
jecxz
mov
cmp
cwde
arpl
sbb
cmp
jmp
popa
sbb
xor
adc
jecxz
mov
mov
shl
xchg
xchg
and
xchg
test
jo
jmp
sub
mov
aas
or
shl
pusha
dec
mov
mov
xor
out
out
adc
arpl
nop
jbe
fisttp
aaa
adc
lods
(bad)
movs
ficom
aas
and
mov
fptan
and
dec
jns
inc
mov
sbb
popf
push
xchg
pop
in
mov
test
mov
movs
dec
dec
and
pop
dec
outs
loope
retf
sbb
sbb
adc
sbb
and
aam
sub
inc
adc
jmp
adc
mov
loope
mov
imul
outs
cmp
adc
les
das
jno
mov
loope
sub
adc
cmc
pop
popa
sub
inc
lods
pop
xchg
dec
adc
adc
movs
ja
xchg
(bad)
and
adc
mov
push
adc
push
mov
or
aaa
cmp
fsub
or
in
push
sub
int3
xchg
data16
sub
xor
les
adc
or
pop
cmp
pop
adc
ins
(bad)
jo
sbb
adc
mov
aad
clc
ss
dec
mov
std
popf
cmps
bound
or
das
push
int3
in
outs
or
aam
mov
and
adc
shl
pop
stos
jo
ret
adc
sub
dec
and
cld
not
push
mov
adc
mov
xor
adc
push
push
scas
div
mov
mov
lods
cmps
retf
scas
int3
mov
sub
aaa
adc
aam
jmp
add
pop
sti
and
push
cmps
adc
mov
jge
jmp
in
aaa
loope
jecxz
sub
or
and
and
mov
gs
adc
outs
lock
jmp
xor
push
test
add
push
sete
mov
cmp
mov
dec
or
add
and
popf
add
pushf
xchg
xlat
pop
aam
mov
test
pop
push
out
add
xchg
test
(bad)
xor
in
in
cmps
(bad)
or
shl
dec
xchg
ss
ins
inc
iret
jns
mov
jb
dec
hlt
leave
adc
adc
retf
nop
lock
mov
(bad)
jp
mov
pop
adc
lods
scas
outs
call
xchg
add
mov
leave
ins
jge
sub
fild
mov
cmp
add
clc
jle
sti
fisubr
push
out
in
inc
jmp
loopne
aaa
cmps
mov
jns
clc
add
(bad)
in
jb
cmps
adc
(bad)
mov
xchg
test
fs
jns
mov
mov
mov
mov
sub
mov
cmp
adc
es
push
dec
adc
jmp
or
mov
inc
clc
shr
dec
cmp
in
mov
in
nop
clc
sub
or
mov
adc
test
sub
add
inc
push
xchg
rcl
lods
hlt
push
mov
add
cmp
adc
fstp
pop
adc
bnd
les
adc
std
and
ret
imul
inc
mov
data16
cmp
jg
adc
cmp
push
inc
adc
imul
adc
or
sub
sbb
mov
add
cld
scas
dec
and
push
inc
cmc
fldcw
pop
mov
fcom
popa
dec
mov
sbb
and
data16
xchg
xchg
pop
out
mov
cs
out
inc
mov
dec
(bad)
mul
jl
enter
add
rcl
dec
neg
cmp
pusha
(bad)
adc
int
jecxz
xchg
pop
(bad)
adc
jbe
sub
sub
jg
sbb
inc
push
ja
sbb
adc
fwait
and
inc
out
and
push
add
mov
xchg
mov
mov
movs
pushf
adc
pop
fbld
push
fdivp
and
xchg
xor
mov
adc
push
jno
dec
fstp
bound
jne
sub
inc
jecxz
push
shr
test
cli
adc
bound
mov
push
jecxz
push
rcl
pop
sbb
lea
dec
push
mov
adc
adc
pop
cld
inc
mov
retf
das
repz
ins
sbb
jno
in
jne
ds
adc
gs
dec
sub
leave
lea
hlt
fsub
jecxz
mov
mov
adc
int
push
sub
mov
call
jl
adc
loop
xor
jg
sahf
push
fist
jbe
cmp
adc
pop
and
xchg
popf
sar
push
shl
or
mov
adc
retf
inc
or
mov
push
mov
xchg
dec
sbb
push
out
fbstp
cmp
out
add
mov
adc
dec
mov
mov
inc
pop
and
jmp
mov
leave
mov
call
nop
cmc
loope
jecxz
jmp
push
call
mov
push
adc
mov
push
jmp
sub
test
out
rcl
sar
repnz
cli
xchg
sbb
aam
test
out
sbb
push
adc
adc
loop
pop
std
ja
jbe
sub
repz
jmp
test
sbb
mov
ins
xchg
adc
mov
(bad)
cmp
loopne
jae
inc
bound
adc
fisttp
dec
in
aad
test
sbb
out
mov
hlt
fisub
inc
add
jo
pop
xchg
out
fnstcw
rol
jl
adc
pop
rol
mov
sbb
fst
cmp
(bad)
cmp
sbb
xor
cmp
or
in
xlat
push
mov
cmp
je
sbb
xor
ds
repz
repz
jle
mov
jg
(bad)
pop
pusha
jle
and
aad
enter
cs
aaa
add
in
sahf
mov
in
pop
stos
adc
adc
aam
and
jno
inc
leave
sub
xor
aas
adc
mov
jecxz
loop
add
retf
cmp
or
test
dec
adc
jmp
repnz
call
adc
cmp
ins
bound
iret
ss
mov
cld
mov
test
out
sbb
pop
xchg
in
xchg
ds
push
in
call
sti
call
and
or
movs
push
nop
jbe
inc
cmps
jmp
std
fdiv
xchg
xor
aam
pop
adc
rcr
jae
jo
int3
lea
cmps
xchg
add
test
add
loope
jo
dec
stos
in
jne
or
outs
xchg
int3
js
loopne
fist
xchg
push
add
pop
xchg
mov
xlat
fs
mov
dec
adc
and
(bad)
jno
int3
icebp
pop
popa
in
cmp
lahf
arpl
addps
xchg
int3
mov
inc
sbb
adc
or
test
fiadd
test
adc
int3
es
inc
fs
jae
push
push
xchg
cmp
lds
je
xor
push
int3
gs
mov
jbe
stos
call
aas
add
jecxz
test
push
cmp
retf
sbb
retf
jmp
dec
sbb
call
cmp
retf
mov
push
lds
fst
fisttp
sti
das
les
rcl
in
stc
xor
fcmovne
mov
inc
sub
scas
fwait
aam
sub
pop
mov
cmps
adc
sbb
add
shl
in
adc
cmc
mov
js
adc
les
mov
pop
adc
inc
aaa
pop
popa
xchg
xchg
sbb
sbb
ins
outs
test
sti
ror
movs
sub
sbb
sbb
cmp
pusha
sub
jmp
jp
dec
popf
inc
cmp
repnz
adc
jnp
call
inc
pop
into
mov
adc
or
std
in
aad
pusha
mov
inc
pushf
cmp
xor
in
loop
stc
les
arpl
cmps
adc
neg
mov
movs
mov
sbb
fisubr
sar
adc
in
jecxz
mov
cmps
adc
or
cli
adc
nop
xor
jl
and
adc
ja
scas
clc
into
(bad)
fst
inc
cmp
scas
pop
not
and
pop
and
dec
sub
in
fs
pop
adc
inc
pop
cdq
cmp
pop
in
ins
loopne
mov
adc
sub
and
lods
or
movs
mov
leave
adc
cli
sbb
xor
push
iret
mov
xchg
sti
cmp
adc
maskmovq
push
sbb
cwde
inc
lahf
ds
pop
xchg
inc
jo
ins
jne
pop
inc
and
popa
xchg
in
adc
icebp
addr16
in
inc
daa
bswap
inc
mov
mov
adc
or
aas
es
fcmovu
mov
xchg
adc
inc
cmp
adc
retf
scas
cli
ss
cwde
cli
jmp
and
sar
ret
add
jp
pop
and
pop
je
push
or
adc
das
ja
mov
jg
(bad)
ficomp
xchg
push
popf
xor
adc
xchg
pop
inc
retf
jns
(bad)
in
adc
inc
pop
cli
mov
lods
jnp
jecxz
adc
push
add
les
xchg
push
sbb
fwait
add
pop
(bad)
adc
inc
movs
and
out
int
xchg
rcl
(bad)
xor
or
add
mov
call
mov
sub
jo
or
pop
mov
pusha
xchg
adc
mov
jns
adc
loopne
(bad)
mov
mov
pop
xchg
fwait
je
cmp
pop
adc
arpl
jbe
xor
or
jge
in
cmc
pop
hlt
in
xor
adc
add
jmp
cmp
dec
push
loope
in
jo
mov
sub
add
stos
xchg
mov
and
or
loope
ror
ss
loopne
xlat
push
and
jmp
sar
cli
jno
(bad)
cld
adc
stc
js
lods
mov
pop
mov
pop
shr
je
sbb
sbb
jle
sbb
dec
aaa
mov
mov
push
fdiv
jl
cmp
fild
in
sbb
cmp
lock
adc
pop
aad
sub
stos
daa
xor
adc
mov
cs
add
(bad)
not
enter
ins
xlat
in
(bad)
jmp
rcr
cmp
shr
inc
mov
cmp
dec
lds
push
adc
in
ficom
mov
xor
pop
imul
cmp
adc
mov
push
dec
xchg
xchg
stc
dec
out
hlt
push
push
push
nop
jae
push
je
jns
sbb
fsubr
aam
cmps
mov
hlt
(bad)
adc
and
pop
das
idiv
cmp
xor
aaa
(bad)
adc
sub
sbb
sahf
pop
jae
adc
sbb
daa
icebp
mov
sub
pop
pmuludq
cs
js
dec
jecxz
dec
push
adc
shl
addr16
(bad)
rcl
fs
push
lods
mov
out
cli
gs
das
mov
and
je
adc
pop
cmp
inc
(bad)
mul
adc
fwait
stos
inc
ret
ins
sbb
or
push
sbb
sub
lods
(bad)
out
icebp
adc
sub
push
pop
and
adc
xor
aam
dec
inc
rcr
or
cmp
adc
cli
(bad)
adc
xchg
aam
inc
scas
mov
dec
movs
ja
xchg
add
stc
jbe
push
icebp
loopne
mov
ficomp
push
cmp
hlt
cld
popf
adc
pop
push
push
mov
out
sbb
or
retf
push
fbld
jns
(bad)
adc
(bad)
js
fdivr
(bad)
inc
jbe
lock
mov
adc
adc
or
cmps
call
and
out
cli
add
or
adc
adc
popw
call
repnz
nop
aam
aaa
shl
fwait
or
xor
stos
sti
call
retf
aaa
xchg
popa
adc
dec
dec
pop
xor
mov
std
inc
add
lods
push
clc
cdq
fimul
mov
mov
mov
mov
pop
aaa
add
adc
dec
arpl
pop
retf
shl
mov
lea
push
cmp
adc
or
or
mov
add
clc
stos
loopne
xor
rcr
mov
aam
cwde
in
data16
pushf
lahf
call
call
xor
sar
lea
or
cld
mov
call
sub
repnz
cli
lea
aam
add
jmp
ins
mov
xchg
popa
dec
fs
cli
cwde
inc
pop
xchg
mov
pop
jmp
mov
hlt
lods
(bad)
sti
outs
push
arpl
adc
push
push
push
cmp
scas
inc
scas
lock
adc
dec
jle
mov
sbb
out
in
sbb
sub
jp
jecxz
and
movs
out
or
jne
and
pop
nop
aam
bound
sbb
loopne
push
(bad)
push
test
mov
mov
push
xchg
adc
sbb
in
clc
ins
and
and
loope
stos
or
lahf
aad
pop
popa
or
pop
leave
rol
mov
cmp
dec
addr16
inc
scas
mov
add
cmp
sub
xchg
sbb
jge
cmp
ja
adc
or
lods
inc
dec
(bad)
fist
mov
add
push
(bad)
and
repnz
cmp
rcl
xchg
jge
hlt
mov
adc
pop
pop
pop
fild
sub
jnp
adc
enter
add
jno
js
repz
test
shl
xchg
arpl
int3
ss
dec
div
ret
push
mov
xchg
dec
dec
adc
jne
retf
sub
in
mov
dec
inc
es
push
or
icebp
repz
call
or
aad
push
loop
test
outs
clc
mov
xchg
pop
xchg
sub
stos
or
movs
js
jno
aam
xor
cli
sub
jo
dec
ficom
adc
adc
lea
sub
adc
fbstp
pop
adc
adc
loop
adc
cmp
pusha
mov
inc
adc
sbb
adc
pop
call
mov
cmc
lea
add
ret
adc
jg
ss
inc
mov
sti
ins
mov
mov
lods
fdivr
in
adc
imul
mov
call
cli
loop
sbb
cmp
mov
cmp
out
mov
jle
ins
mov
ins
mov
xor
loop
lods
xchg
jnp
aas
mov
adc
cmp
and
dec
ins
push
inc
outs
mov
ds
into
push
int3
in
xor
les
fild
in
push
test
or
je
sahf
aas
sbb
xchg
push
push
in
dec
xchg
pusha
sbb
loopne
popf
call
adc
pop
mov
and
int3
push
sub
(bad)
std
pop
out
xor
cdq
jp
sub
or
fs
xor
loopne
sti
mov
js
sub
cmp
xchg
jmp
pushf
jno
jg
jno
je
pusha
xchg
scas
in
inc
adc
pop
cwde
jo
ins
pusha
cmps
xor
adc
adc
in
mov
add
cwde
jns
rcr
dec
adc
retf
adc
or
mov
add
add
adc
lock
ret
test
or
xchg
mov
in
cli
aam
int3
push
lods
test
adc
mov
lock
test
out
cld
adc
fidiv
jecxz
sub
inc
adc
cmp
je
jmp
hlt
popa
ja
in
es
fstp
adc
and
mov
scas
in
nop
push
or
adc
jno
ins
cmp
dec
mov
xchg
mov
in
mov
jp
loopne
std
pop
adc
xchg
xchg
es
add
and
(bad)
push
repz
xor
mov
outs
movs
adc
add
pop
adc
mov
je
adc
jmp
and
sbb
cmp
in
sbb
test
lock
pop
fs
xchg
movs
inc
sahf
rol
push
xchg
sub
pop
jecxz
movs
adc
retf
push
ror
or
loopne
jo
les
mov
adc
add
mov
adc
adc
jmp
lds
mov
sub
shr
adc
cmp
xor
out
xchg
sbb
adc
push
pusha
lock
sbb
or
ficom
daa
sahf
(bad)
es
ror
mov
lahf
int3
push
xchg
es
call
test
push
mov
aas
in
sub
pop
scas
jo
xor
and
ret
inc
sbb
sub
sbb
pop
lahf
pop
iret
xchg
hlt
or
jae
and
mov
xlat
jp
sahf
xchg
addr16
(bad)
or
inc
repz
outs
push
push
idiv
call
(bad)
enter
and
sbb
lea
or
inc
gs
adc
pop
daa
mov
adc
aaa
or
shr
and
es
js
sub
pop
jbe
retf
rcr
je
pop
sub
sub
mov
inc
out
(bad)
or
push
arpl
fst
enter
push
mov
xor
movs
adc
sti
sbb
bound
test
mov
call
adc
or
ror
dec
cld
adc
pop
adc
pushf
adc
hlt
aam
push
cli
dec
fdiv
pop
adc
stos
sub
jmp
dec
sub
adc
outs
jg
loop
push
imul
loope
push
pop
cmp
cmp
or
add
(bad)
(bad)
add
add
sbb
pop
pushf
rcl
adc
jae
adc
mov
jmp
adc
ror
sahf
xchg
xlat
loope
je
pop
and
repz
mov
hlt
mov
add
adc
pop
outs
shl
sbb
adc
sbb
sbb
push
dec
je
popf
aam
xor
xor
pop
and
repz
lea
pmulhuw
jnp
mov
icebp
xchg
cmp
ror
mov
hlt
pop
cmp
add
pop
clc
(bad)
movs
xchg
mov
addr16
lock
test
adc
adc
and
inc
cmp
mov
push
inc
mov
icebp
mov
test
scas
adc
adc
lods
out
sbb
inc
arpl
adc
add
out
test
jg
jmp
sti
stc
adc
jne
add
fstp
mov
adc
ficomp
aam
fisub
jl
retf
inc
adc
in
ja
lahf
retf
and
stc
repnz
pop
jo
lods
mov
ins
cli
cmps
or
aaa
sbb
ficomp
imul
out
fsub
(bad)
mov
cwde
mov
in
adc
movs
xchg
out
push
ss
sbb
adc
or
fucomi
pop
cmp
fucom
mov
sub
clc
dec
push
adc
addr16
adc
and
adc
jle
test
adc
or
mov
lods
mov
fdivr
push
xchg
jle
fist
adc
js
arpl
jmp
and
adc
mov
inc
je
das
cdq
adc
(bad)
pop
adc
xlat
shl
mov
call
loopne
(bad)
es
je
sub
sbb
test
scas
fadd
je
xor
add
cmp
mov
cmp
mov
popf
xchg
adc
pop
sbb
or
jmp
or
mov
mov
mov
xor
mov
push
pushf
xlat
mov
xor
adc
fisubr
xchg
and
mov
cs
mov
imul
push
xchg
es
cmp
sbb
adc
mov
push
xor
and
aaa
mov
repz
daa
loopne
test
adc
mov
dec
xchg
aad
fdivr
loop
mov
mov
xchg
adc
in
jno
or
adc
dec
iret
into
push
add
sbb
inc
call
mov
sub
test
retf
adc
jl
popa
add
lea
lahf
adc
sbb
cmps
lock
jg
sbb
arpl
pop
mov
pop
inc
icebp
cwde
mov
arpl
inc
or
lock
cmps
push
and
shr
inc
je
mov
push
iret
adc
cli
inc
loop
adc
nop
ins
inc
sub
xor
sahf
in
jbe
popa
movs
call
jmp
inc
xlat
rcl
movs
in
popf
jle
pop
ins
xchg
int
push
mov
adc
loopne
mov
pop
push
mov
es
pop
fwait
mov
aas
or
gs
ror
hlt
in
ret
xor
jecxz
retf
stc
mov
dec
ss
mov
sbb
mov
push
inc
int3
pop
scas
out
jne
inc
in
mov
inc
xor
sbb
js
or
or
repz
and
test
or
add
lds
cmp
mov
arpl
dec
xor
(bad)
cmps
xor
and
or
dec
test
pop
xchg
sbb
test
lods
xor
mov
sti
fldenv
cli
cs
adc
movs
ret
mov
pushf
in
pop
movs
push
adc
sub
push
adc
push
mov
shl
xor
cmps
(bad)
adc
out
ret
jne
retf
lahf
add
mov
push
jmp
lds
sbb
cmc
or
adc
test
inc
jle
fist
fst
adc
cmp
lods
push
sar
push
in
jb
in
jne
aam
aaa
idiv
adc
cld
mov
imul
inc
mov
sbb
cmp
mov
mov
pop
mov
add
inc
xchg
dec
mov
mov
xor
fstp
cmp
or
je
clc
shr
mov
cmp
xor
add
cmp
into
push
xchg
sub
adc
shl
push
sbb
inc
pop
mov
add
sti
retf
bound
adc
xchg
push
pop
mov
fwait
mov
dec
je
fadd
imul
sbb
jnp
pop
inc
in
ins
add
mov
loop
mov
lds
pop
cdq
in
fbstp
loope
dec
or
add
jbe
xchg
mov
mov
or
imul
rcr
inc
in
mov
xchg
in
in
adc
xor
stc
iret
jae
adc
cld
sar
pop
sub
sbb
push
or
dec
lock
stc
retf
pop
xchg
test
push
inc
xlat
mov
jnp
inc
adc
inc
lods
add
jle
add
mov
fnstenv
adc
icebp
addr16
scas
jmp
lds
loop
adc
div
mov
fst
add
xor
adc
push
icebp
fisubr
inc
retf
sub
jmp
mov
xchg
or
pop
add
xor
test
pushf
sbb
ja
fwait
in
xchg
sar
imul
into
jmp
cmp
add
rcl
rcr
cwde
mov
xchg
pushf
jo
push
leave
cmps
inc
pop
pop
out
jae
or
xchg
xchg
fisttp
adc
mov
fimul
mov
cmps
mov
les
push
in
nop
in
jmp
cmc
jp
clc
bound
jmp
or
cli
retf
cmp
pop
aaa
xchg
jmp
sti
rcl
pop
mov
clc
pop
push
clc
xor
dec
adc
dec
cld
hlt
clc
and
add
adc
add
bound
or
les
xchg
mov
je
or
dec
in
ror
cmp
pop
xchg
sti
xchg
(bad)
cwde
hlt
mov
mov
test
jns
dec
call
adc
pop
pop
imul
add
adc
adc
loopne
clc
sti
ret
mov
fcom
push
adc
pop
cdq
lods
in
sbb
or
sub
inc
push
ins
push
and
push
test
pop
neg
loopne
pop
inc
sbb
push
gs
xchg
aaa
dec
and
mov
push
mul
push
jnp
adc
(bad)
adc
into
adc
inc
inc
mov
sbb
retf
ret
lock
outs
test
sbb
into
arpl
arpl
sbb
mov
or
mov
gs
push
in
mov
and
int3
(bad)
fisub
jae
cmp
or
loopne
fidivr
clc
pop
xchg
clc
out
fstp
sub
cld
xchg
adc
inc
or
out
mov
gs
and
adc
add
xchg
sti
mov
xchg
and
or
cld
out
out
int3
adc
mov
adc
(bad)
sbb
add
mov
call
retf
pusha
xchg
sbb
clc
push
lock
adc
das
xchg
sbb
jmp
bound
pushf
sub
leave
pop
loop
shr
rcl
add
push
sti
dec
std
les
clc
(bad)
mov
cli
mov
or
imul
xchg
sbb
std
mov
out
xlat
adc
jae
pop
fidivr
bound
mov
adc
js
jge
cdq
sbb
mov
jb
sahf
and
adc
out
adc
(bad)
cmp
out
inc
mov
push
adc
into
mov
cmc
in
rcr
out
jmp
mov
lods
cmp
cmp
lahf
lea
xchg
adc
stos
mov
adc
test
mov
clc
(bad)
inc
adc
sub
neg
push
imul
adc
cmps
scas
sub
cld
push
adc
in
movs
mov
dec
xchg
sbb
shl
and
stos
xchg
mov
xor
adc
mov
pop
aas
add
or
dec
jnp
adc
aaa
cmc
add
push
xchg
jl
add
cwde
xchg
outs
sti
adc
xor
fs
jb
adc
push
sahf
(bad)
pushf
xor
rcl
ds
dec
pop
dec
adc
add
pop
loope
inc
adc
mov
call
cmps
jge
sbb
adc
push
sub
ret
aas
scas
mov
gs
jl
jmp
test
adc
pushf
add
cli
iret
xor
xor
ins
aam
cmp
leave
or
pop
jmp
xchg
pop
sbb
fwait
mov
aas
mov
mov
mov
and
mov
adc
or
in
pop
ins
or
xchg
in
mov
aam
es
xchg
and
pop
mov
xchg
lea
sar
add
adc
adc
int
fcmovnu
dec
push
inc
or
push
cld
in
pushf
sbb
fistp
imul
aad
inc
and
adc
xor
int3
mov
mov
shl
or
aaa
hlt
loopne
add
pop
sar
xchg
aad
adc
aaa
pop
mov
cld
add
pop
int
sbb
lds
mov
movs
unpcklps
push
jge
jl
ins
and
pop
sub
pop
in
mov
dec
mov
cmp
adc
xor
in
ins
xor
add
test
fnstsw
mov
push
int3
or
aad
mov
or
aas
dec
sbb
cdq
and
std
adc
(bad)
mov
and
in
sub
aad
mov
adc
dec
dec
fucomi
retf
rol
xchg
add
call
or
pop
addr16
fmul
std
retf
dec
mov
jmp
dec
paddb
mov
dec
xchg
adc
ds
rcl
cmp
add
sbb
xchg
cwde
xchg
shl
jmp
xor
push
cmp
sbb
je
and
fs
dec
and
and
push
dec
adc
iret
rcr
lahf
movs
ins
pop
ret
jno
loop
add
test
push
popf
clc
gs
dec
mov
cli
xor
add
retf
fisttp
imul
sbb
xchg
fistp
or
ja
jg
and
xchg
push
jg
pushf
test
sti
and
cs
out
mov
retf
jns
js
mov
dec
fdivp
xlat
mov
push
shl
loop
les
test
mov
jbe
adc
xor
mov
mov
mov
loopne
std
shl
in
xchg
into
xor
in
pushf
imul
ret
aam
xor
or
sbb
int
jb
es
lock
lea
cmps
inc
mov
mov
or
xlat
popa
sub
adc
mov
adc
loope
or
jle
cli
in
adc
stc
inc
test
data16
loop
sbb
in
pop
mov
int
xchg
leave
sbb
retf
cli
fsub
adc
fnstenv
imul
add
xchg
fdivr
jmp
mov
(bad)
lea
pusha
xor
dec
xchg
and
fisubr
cmp
jp
adc
pop
mov
ja
adc
in
icebp
cmp
adc
and
cmp
std
xchg
or
jmp
sub
enter
jbe
xchg
push
jno
adc
mov
ja
mov
xor
jb
jmp
inc
push
cmp
fsub
out
push
pop
imul
dec
int3
xchg
icebp
xchg
scas
mov
or
dec
jg
fwait
ins
sub
aas
jle
push
int3
(bad)
sbb
mov
pop
or
lea
xchg
cmps
int
push
ins
(bad)
call
jg
and
hlt
popa
jmp
sub
sbb
retf
pop
adc
adc
popa
and
in
leave
bound
fisttp
jne
ins
call
or
jl
sub
nop
out
ja
adc
fwait
rcpps
xor
(bad)
sbb
adc
and
jge
jmp
in
ja
mov
enter
popf
(bad)
mov
int3
rcr
icebp
js
xor
(bad)
cli
adc
add
ret
adc
or
call
jecxz
push
add
or
outs
pop
add
inc
push
pop
push
mov
dec
enter
push
add
test
pop
mov
jmp
stos
data16
lods
sbb
xor
pop
repnz
xchg
fs
cmp
push
les
test
mov
dec
aam
pop
adc
and
daa
adc
loope
lds
mov
inc
aas
sub
jbe
push
mov
adc
ins
retf
push
cdq
addr16
push
jb
xchg
adc
sub
mov
jg
ss
add
dec
fst
fcom
out
(bad)
dec
ins
es
shl
aaa
and
jbe
mov
xchg
adc
aad
daa
adc
pop
push
push
(bad)
and
sbb
inc
dec
push
js
push
adc
inc
mov
stc
jp
sbb
mov
in
pop
(bad)
mov
sbb
or
and
cmp
data16
out
mov
or
mov
loopne
cmp
inc
push
jb
sbb
mov
es
adc
cmp
pop
xor
xchg
loope
(bad)
ds
add
adc
leave
mov
in
shl
lea
mov
pop
jae
xchg
or
aam
clc
add
adc
test
mov
adc
xor
adc
outs
(bad)
cmp
cli
fistp
xchg
ins
loope
cmps
xor
adc
rcl
xchg
mov
push
adc
cmps
or
stc
clc
add
and
out
adc
xchg
pusha
lods
xor
cdq
xchg
push
mov
mov
ret
in
add
shl
test
mov
adc
pop
(bad)
in
adc
in
cli
mov
lea
jmp
push
cdq
pop
adc
js
loopne
adc
xor
inc
in
or
add
mov
pop
data16
push
int3
fstp
out
jbe
xor
test
xchg
je
rcr
add
pop
or
int3
adc
lock
sbb
xchg
and
rcr
fnsave
cmps
jmp
cmps
arpl
push
jg
enter
rep
mov
cmc
pop
xor
xchg
mov
js
or
and
xchg
retf
mov
xchg
imul
adc
int3
mov
jmp
xor
pop
jecxz
lods
hlt
cmp
loopne
and
xchg
inc
push
pop
and
aad
add
mov
xchg
or
sbb
inc
mov
jp
int
sar
or
jmp
xor
int
mov
xor
push
mov
adc
test
(bad)
test
mov
movs
adc
and
mov
into
std
xchg
in
adc
iret
cmp
aaa
sbb
neg
sub
pop
jecxz
inc
and
(bad)
stos
add
rol
jbe
retf
int3
pop
cmp
sub
mov
inc
loopne
push
inc
push
adc
jnp
(bad)
scas
jmp
and
fild
test
jle
xor
in
push
lock
outs
mov
js
imul
xchg
inc
ss
mov
push
adc
mov
loopne
and
sub
loop
mov
rcr
sbb
xchg
and
imul
or
(bad)
xchg
int3
lds
push
lock
fucomp
xor
xchg
cmp
pop
jne
or
xlat
adc
mov
mov
dec
out
inc
adc
call
adc
leave
adc
xor
push
dec
adc
outs
xchg
xchg
int3
in
sbb
xchg
or
cmps
in
xchg
push
sar
sbb
sbb
repz
lock
sbb
fs
stc
pop
mov
arpl
ins
jl
push
je
call
adc
and
lahf
mov
jg
loopne
dec
jmp
sbb
jnp
loop
in
repz
fsubr
in
repz
mov
add
xor
pop
xor
rcl
cmp
aad
in
mov
imul
lea
push
jg
ds
xchg
loopne
mov
into
sbb
fsub
cmp
jb
pop
rol
cld
xor
sbb
fisttp
ret
gs
add
int3
in
or
aaa
add
mov
aas
pop
cs
pop
mov
push
dec
in
push
add
stos
psrld
sub
mov
push
mov
adc
jmp
mov
push
or
mov
xchg
adc
nop
lahf
sub
shl
shl
dec
lods
sub
addr16
xor
mov
loop
cdq
stos
sub
cmp
sub
out
jbe
sbb
pop
imul
inc
int3
scas
dec
jle
aas
inc
adc
fsubr
and
xor
retf
xchg
addr16
sub
jp
in
xchg
int
in
push
xchg
fsub
jnp
jno
adc
mov
adc
iret
sub
pop
mov
hlt
jmp
fisubr
sbb
jns
pushf
jb
add
pop
sbb
aam
mov
std
adc
add
lods
dec
adc
mov
jp
sbb
pop
dec
jg
push
ss
imul
enter
add
data16
ficomp
int
jmp
dec
(bad)
jno
lea
rcr
fst
movs
(bad)
xchg
out
loopne
add
adc
gs
adc
clc
sbb
loop
add
pop
sbb
xchg
dec
ret
xchg
lods
mov
adc
(bad)
lods
xchg
mov
out
movs
push
leave
or
arpl
push
hlt
xchg
adc
into
sbb
mov
mov
retf
sub
add
jbe
cwde
ja
test
sbb
fwait
retf
add
mov
mov
lock
inc
loopne
mov
sbb
sub
push
(bad)
xor
ja
push
xchg
(bad)
dec
jb
lea
sub
hlt
or
cwde
or
push
or
mov
call
dec
or
clc
lds
add
retf
jb
sbb
sbb
or
movs
cli
xchg
adc
pushf
rol
arpl
imul
xchg
xchg
adc
adc
fild
adc
xchg
push
or
cmp
add
mov
adc
xchg
ret
push
call
jns
stos
pop
cli
sub
adc
pop
push
xchg
fmul
sbb
ins
into
jno
cmp
iret
hlt
cmp
or
mov
imul
push
out
xchg
adc
cmp
out
push
shl
add
mov
sbb
and
lahf
lods
push
sub
adc
sub
aad
or
push
cli
loopne
mov
pop
shl
jmp
retf
adc
(bad)
adc
jae
or
hlt
pop
mov
repnz
je
cld
ficom
add
mov
ffree
push
lods
ss
es
fwait
daa
call
(bad)
cmc
pop
and
jecxz
test
in
rcr
xchg
xchg
mov
adc
into
pop
xor
dec
sbb
cmc
popa
add
movs
sub
sub
call
in
fptan
jne
mov
adc
mov
out
out
mov
ficom
cmp
or
ret
mov
sbb
call
push
adc
cmp
aam
jb
out
cdq
loope
jmp
int3
sbb
in
fld
jnp
push
add
push
xor
xor
(bad)
jg
xor
scas
mov
xchg
aam
aad
call
mov
add
mov
inc
stc
int3
mov
in
fistp
xchg
inc
mov
xchg
aad
test
mov
pop
sbb
test
sub
inc
(bad)
dec
pop
inc
test
add
push
jmp
sbb
xor
jbe
ret
sbb
add
inc
sub
(bad)
(bad)
xchg
fistp
mov
xor
mov
sti
aad
cmp
jmp
mov
pop
pushf
xchg
(bad)
repnz
sbb
lods
imul
in
clc
adc
xchg
js
cwde
fisttp
mov
stc
test
sub
lahf
daa
push
or
ret
ficom
retf
jge
out
test
out
mov
add
cmps
adc
shl
cmc
jl
data16
sbb
rcl
clc
into
sbb
adc
stos
jge
mov
jp
jae
xor
bound
or
pop
cmps
lahf
es
mov
retf
int
outs
jg
cmps
sub
pop
cmp
loop
cs
xchg
in
pop
imul
push
enter
sub
int3
mov
lds
sahf
adc
pushf
les
and
jno
adc
mov
jnp
movs
int
test
sti
inc
mov
jg
adc
mov
jge
push
into
call
les
mov
xchg
cli
or
cs
dec
adc
or
pop
mov
(bad)
rcl
pop
movs
mov
pushf
inc
lock
lds
push
imul
sbb
movs
cld
mov
fs
(bad)
in
loope
pusha
rcl
lods
sbb
jmp
mov
pop
inc
sub
lods
sahf
or
mov
les
neg
cmp
dec
sar
xor
push
not
push
add
aam
out
sbb
out
and
fidiv
cld
test
rol
out
pop
adc
dec
int
xchg
cmp
adc
lods
dec
hlt
inc
sar
or
out
push
add
pop
jo
add
adc
sub
lock
and
std
cmps
cwde
dec
and
and
push
xor
jbe
int
data16
call
mov
ret
mov
mov
add
loop
xchg
add
mov
and
push
pop
arpl
or
ins
dec
lods
sbb
in
mov
adc
or
in
xor
(bad)
pop
sbb
int3
dec
adc
jbe
retf
dec
xor
mov
stos
push
dec
movs
sbb
adc
mov
cmp
push
bound
in
btr
adc
stos
sub
and
and
cld
xor
jp
add
adc
cmp
loopne
clc
cmps
jmp
push
in
sbb
cmp
(bad)
push
mov
(bad)
pop
int
jecxz
adc
adc
pop
mov
xchg
add
neg
lods
adc
mov
push
xor
mov
xor
ins
mov
fist
(bad)
adc
sbb
xor
add
adc
pop
ins
pop
xlat
and
leave
adc
jo
mov
xchg
clc
in
sub
out
popf
hlt
mov
and
sbb
mov
pop
adc
xchg
xchg
xlat
imul
imul
jle
mov
in
test
and
adc
mov
inc
cmp
push
mov
push
icebp
ja
jmp
adc
mov
fsub
jbe
stos
in
or
cmc
(bad)
cmp
repz
xor
sbb
imul
pushf
fild
mov
movlps
(bad)
out
enter
jmp
(bad)
shr
push
adc
push
push
je
inc
aad
and
(bad)
imul
(bad)
int3
daa
repnz
aas
jecxz
sbb
push
or
xchg
sbb
rol
adc
add
add
pop
push
int3
xor
sbb
movs
mov
outs
and
into
sbb
mov
mov
andps
ds
ins
imul
adc
pop
cwde
mov
xchg
enter
fbld
jb
jne
into
sub
xchg
and
hlt
push
sbb
popf
adc
daa
add
cmp
adc
push
fisub
adc
aaa
inc
out
out
int
sbb
imul
mov
ret
iret
icebp
adc
rcr
sub
xor
std
xchg
inc
je
call
mov
cli
das
xor
dec
sub
movs
push
out
jbe
adc
mov
push
mov
scas
lahf
xchg
mov
popf
add
add
hlt
out
dec
cs
lea
stos
sti
imul
ja
std
push
xor
sbb
fnstenv
shl
aam
jl
sbb
cld
(bad)
push
int3
cmps
push
pop
stc
jmp
xchg
sbb
dec
adc
jb
dec
data16
pusha
jecxz
(bad)
cld
dec
adc
or
mov
push
adc
push
xor
hlt
jo
add
push
rcl
outs
pop
stc
adc
inc
mov
fadd
adc
sbb
dec
adc
loop
pop
cmp
sub
leave
mov
mov
lock
sti
push
inc
popf
or
loope
inc
sar
cmp
or
test
adc
mov
sbb
or
sub
getsec
shr
xchg
test
jmp
stc
cmp
pusha
xor
dec
adc
mov
loopne
cmps
icebp
jmp
adc
sti
mov
(bad)
cmc
mov
pop
(bad)
int3
in
cmps
rcr
movs
stos
dec
push
adc
leave
xchg
in
sti
adc
sbb
ret
mov
add
push
mov
sbb
out
xor
mov
sub
mov
adc
mov
or
fs
sub
rcl
aas
or
fsubr
inc
sbb
pop
adc
mov
retf
leave
aam
sbb
xchg
test
mov
pop
mov
add
push
test
(bad)
dec
or
out
hlt
scas
mov
push
je
ret
mov
cmps
inc
or
stos
mul
mov
jno
jmp
imul
and
mov
mov
imul
sbb
in
iret
mov
pop
dec
xor
jmp
jbe
aam
mov
ins
movs
stc
popa
mov
push
sbb
cmp
adc
add
push
ds
das
push
adc
push
in
fsubr
xchg
adc
es
rcl
inc
sub
dec
std
ss
inc
(bad)
adc
lods
inc
fisttp
inc
jmp
push
jge
mov
rcl
int3
lods
shr
mov
jnp
pop
aam
xchg
pop
adc
adc
push
pxor
nop
icebp
pushf
scas
inc
cld
xchg
adc
push
pop
loop
inc
fsubr
push
or
adc
jmp
in
add
adc
test
cmp
rcl
sahf
jne
adc
js
adc
call
adc
es
and
bound
xchg
(bad)
sub
jge
jbe
iret
sbb
icebp
jge
sbb
dec
xchg
adc
imul
push
push
call
cld
adc
fnstenv
and
add
int
xor
(bad)
aas
xchg
pop
push
jb
int
inc
mov
jmp
xor
pop
sahf
sbb
in
jne
mov
pusha
inc
arpl
adc
fadd
inc
sbb
mov
mov
in
jne
sub
adc
test
xor
push
push
dec
out
xchg
mov
and
or
leave
cwde
mov
sub
pusha
jg
adc
jmp
sub
sahf
mov
sub
sbb
int3
mov
pushf
push
or
nop
adc
inc
and
adc
shr
(bad)
push
pop
repz
jge
nop/reserved
loopne
adc
and
aaa
xor
mov
or
cmps
push
push
add
std
adc
movs
adc
lock
mov
repz
sub
add
mov
les
push
ins
(bad)
xor
mov
inc
push
xchg
adc
adc
ds
mov
jns
fcmovu
loopne
outs
or
mov
cmp
les
fnsave
dec
cmp
stc
movs
push
iret
push
adc
fsub
gs
rcl
push
repz
and
mov
loope
or
mov
out
and
mov
pushf
or
ja
cdq
sti
imul
icebp
sbb
lods
push
pushf
mov
test
hlt
mov
jnp
sub
call
xor
inc
retf
dec
int3
xchg
in
test
adc
mov
rcl
in
aas
call
dec
aam
sbb
pop
adc
push
push
pop
cmp
adc
aam
jb
push
(bad)
je
jge
mov
push
popf
mov
clc
js
xor
cmp
jle
jo
jbe
adc
sbb
call
loop
dec
dec
das
pop
cmp
adc
imul
jnp
fistp
icebp
out
les
jb
xchg
aas
xchg
push
rcr
jmp
cmp
push
sub
in
xchg
xor
mov
and
xchg
not
(bad)
out
mov
test
fs
in
inc
jo
push
arpl
inc
fst
adc
je
out
cmp
out
mov
pop
mov
test
inc
mov
(bad)
mov
or
(bad)
mov
push
sar
dec
fst
cmp
add
add
pop
push
adc
subps
es
cmps
clc
data16
add
cmp
push
xchg
neg
add
call
xchg
mov
push
mov
push
mov
sub
inc
addr16
test
hlt
out
std
fld
jmp
cdq
mov
jbe
add
leave
dec
adc
rcl
and
xor
mov
fiadd
adc
nop
pop
jge
sbb
mov
cmp
stos
out
adc
aam
sbb
out
inc
xor
rol
gs
call
mov
fsubr
mov
xlat
mov
jmp
(bad)
sub
inc
fmul
ins
mov
sbb
add
mov
aam
(bad)
push
push
push
scas
add
sub
call
stos
fldenv
push
sub
inc
(bad)
fstp
jb
add
pop
or
bound
out
mov
(bad)
js
int3
into
inc
adc
out
cli
(bad)
movs
daa
jb
add
iret
je
(bad)
and
(bad)
ins
int3
dec
or
push
xor
inc
cmp
sbb
cmp
push
push
jp
fdivrp
mov
push
retf
sbb
loopne
sub
dec
rol
je
jmp
jle
pop
shl
xchg
scas
cmp
mov
(bad)
stc
(bad)
push
out
lahf
jl
push
adc
(bad)
movs
push
mov
xchg
jp
add
and
movs
push
and
jl
icebp
mov
pushf
int3
xor
sbb
push
or
clc
jp
or
ret
lods
lods
or
mov
pop
xchg
fistp
cmp
mov
jg
dec
imul
out
nop
in
and
mov
add
sbb
mov
not
ds
pusha
imul
adc
fwait
sbb
push
adc
(bad)
jmp
sbb
idiv
(bad)
mov
pusha
push
ins
call
sbb
pop
ret
sti
mov
in
jl
loope
out
cli
popa
(bad)
pusha
dec
xor
leave
test
clc
dec
sar
adc
movs
inc
pop
imul
fs
je
mov
sahf
outs
fcmovu
jg
mov
aaa
jmp
jmp
pop
inc
push
shr
rol
call
fimul
adc
popf
xor
mov
int3
mov
fadd
bound
adc
test
mov
lds
cmp
mov
xchg
pop
dec
enter
iret
jb
fiadd
cmp
mov
sub
popa
cmp
mov
jmp
mov
push
inc
pushf
imul
push
adc
enter
mov
stos
cli
(bad)
cmp
ss
pop
adc
add
and
loopne
in
dec
into
xchg
js
push
idiv
xor
mul
in
and
cmp
mov
std
dec
inc
sub
clc
arpl
push
leave
and
cwde
jle
(bad)
int
repnz
in
outs
aas
jne
push
push
jnp
add
or
sbb
mov
cmps
mov
popf
je
call
not
push
imul
push
pushf
adc
and
sub
loop
adc
or
rcl
mov
mov
lods
push
data16
push
scas
mov
xor
test
jle
shr
jmp
adc
xor
push
adc
(bad)
mov
fild
fsubr
es
in
jae
dec
push
mov
cmp
(bad)
adc
popa
out
test
or
inc
lods
adc
retf
jae
(bad)
lea
push
sbb
cmp
(bad)
xlat
inc
daa
in
push
xchg
push
(bad)
jp
fs
fst
and
push
sti
push
mov
cmp
lahf
adc
xchg
mov
inc
jae
push
xchg
or
je
cmp
stos
retf
fwait
add
(bad)
adc
popf
wbinvd
xor
in
rcl
outs
cmp
pop
adc
int3
inc
ins
ret
fs
imul
inc
adc
jmp
lods
push
out
lds
pop
inc
pop
and
fs
sti
cmp
aam
std
jp
xchg
inc
push
xor
loopne
jge
jmp
jnp
inc
jae
movsx
jo
sub
add
fidivr
push
lods
push
es
leave
rcr
(bad)
loopne
aam
push
rcl
inc
sbb
mov
test
popf
xchg
add
cld
ret
xor
add
cs
xchg
sbb
sbb
inc
popf
adc
pushf
sub
arpl
fst
cmp
xchg
cmp
(bad)
xchg
xchg
test
arpl
daa
or
adc
cmp
add
inc
ret
cmp
xchg
dec
repnz
fs
push
adc
stc
int
dec
push
out
sti
or
push
jo
scas
adc
jne
rcr
and
imul
lea
int
cmp
cmp
call
out
dec
jno
xor
and
adc
cmp
xchg
mov
mov
cmp
sti
fild
fild
adc
jl
push
rcr
cld
xchg
mov
fs
mov
dec
gs
iret
dec
ret
(bad)
rcl
adc
xchg
push
cmp
xchg
mov
xor
repnz
scas
neg
outs
adc
fmul
call
sbb
mulps
fist
gs
std
push
pop
jnp
xor
bound
stos
xlat
(bad)
and
jb
xchg
scas
inc
mov
jecxz
faddp
nop
mov
sub
loopne
xchg
sub
pop
js
fdiv
bound
leave
aad
dec
ret
dec
not
jp
and
div
xlat
jmp
xchg
cmp
jg
pop
out
or
push
add
mov
xchg
jmp
stos
test
dec
adc
in
(bad)
mov
inc
ficom
daa
das
mov
xchg
cmp
out
mov
sbb
adc
pop
add
dec
xor
loope
pop
bound
sar
xchg
jl
pop
addr16
or
jmp
adc
das
sahf
mov
xchg
cld
adc
pusha
test
in
scas
inc
jge
sbb
mov
sbb
pusha
mov
sbb
xor
movs
cs
cwde
ret
or
imul
das
sub
in
push
xchg
(bad)
popf
in
cmp
test
or
shl
or
pop
sbb
push
outs
rcl
pusha
(bad)
fld
inc
mov
loopne
adc
xor
adc
cld
mov
pop
aaa
mov
mov
dec
(bad)
pop
outs
push
mov
inc
clc
out
cmp
xor
pop
(bad)
push
fwait
push
fs
ret
adc
test
aaa
jg
not
test
cmp
xor
ficom
adc
es
rol
popa
imul
aas
mov
adc
dec
mov
ret
xchg
jbe
adc
push
add
arpl
shl
nop
mov
mov
scas
xlat
adc
bound
ins
adc
sub
dec
adc
in
imul
add
adc
int
mov
or
jo
xor
fmul
mov
and
cmp
(bad)
iret
scas
jns
jl
adc
je
das
repz
test
mov
aam
mov
mov
adc
mov
xchg
dec
or
and
mov
adc
sub
test
xlat
adc
push
in
adc
lods
hlt
sbb
pop
xor
xchg
adc
int3
adc
mov
mov
cli
jb
add
sbb
cmc
xchg
cmp
push
adc
outs
jbe
rol
sahf
(bad)
push
sub
aam
jp
adc
repz
mov
(bad)
push
cmp
inc
je
popf
sbb
cmps
inc
inc
leave
adc
adc
adc
jp
clc
out
sahf
xor
and
jmp
(bad)
imul
adc
add
aad
dec
sbb
xchg
ins
jl
ins
push
lahf
cmps
bound
test
sbb
cmp
adc
and
scas
imul
test
adc
in
add
add
enter
push
ins
mov
aaa
popa
xlat
(bad)
sbb
adc
mov
and
test
sbb
mov
xchg
loope
cmc
or
push
xchg
mov
jge
cmps
adc
adc
dec
adc
push
rol
bound
dec
adc
and
jbe
mov
jg
pop
fsubp
dec
in
in
retf
repz
sahf
and
ss
mov
adc
into
fsub
sub
mov
mov
add
xor
in
pop
pop
pop
icebp
adc
fist
cli
inc
data16
adc
int3
shr
jmp
imul
xchg
xor
sbb
icebp
adc
sbb
in
sub
or
xlat
or
cmp
in
xchg
fcomp
scas
popf
(bad)
sub
mov
add
and
cdq
push
stos
dec
bound
clc
mov
sub
scas
ja
push
jecxz
jbe
sbb
shr
imul
mov
adc
retf
and
leave
jmp
or
sbb
dec
call
in
or
cmp
sahf
(bad)
xchg
add
pop
outs
retf
push
pop
cld
out
jns
in
xor
push
leave
jg
nop
add
xchg
inc
aaa
adc
mov
in
sbb
(bad)
xchg
add
jae
xor
xor
stc
sahf
das
jg
xchg
sbb
test
xchg
cmp
add
aam
or
cwde
xchg
mov
cmp
pop
retf
cmc
and
or
pop
out
sub
sub
push
xchg
ret
pop
dec
jp
xor
xor
inc
retf
jo
mov
mov
out
pop
popf
sbb
push
cmc
sub
aam
in
xchg
inc
mov
pusha
xor
sbb
scas
jne
cld
xor
clc
not
dec
pop
jns
stc
pop
push
in
push
call
sti
test
dec
pop
sar
push
cmp
adc
aam
ret
xor
imul
int3
adc
(bad)
sub
or
push
adc
inc
pushf
(bad)
and
inc
sbb
add
push
jbe
cmp
lahf
aad
cmp
jle
inc
ins
(bad)
cmp
inc
into
sub
mov
and
retf
add
mov
repz
mov
xchg
push
stc
mov
inc
sub
mov
dec
xor
xlat
fbstp
hlt
(bad)
stos
mov
cmp
adc
and
mov
adc
pushf
xchg
ins
inc
inc
adc
adc
push
(bad)
repnz
adc
ss
xchg
inc
scas
xchg
jl
fidivr
xchg
loopne
sbb
cli
popf
sbb
in
xchg
adc
out
icebp
data16
in
cs
inc
mov
aaa
xor
je
les
pop
mov
test
cmp
push
mul
push
pop
push
push
std
xor
push
dec
adc
cmp
lock
fisttp
add
into
pop
js
es
hlt
sub
clc
and
lock
lods
je
jg
repz
xor
movs
mov
sbb
retf
scas
ret
mov
popf
and
xchg
fidivr
rcr
and
xchg
jnp
mov
or
jle
lods
xchg
pushaw
xor
mov
cmp
outs
mov
int3
out
(bad)
sbb
out
adc
cmp
int3
std
dec
lods
mov
imul
push
je
dec
pop
mov
dec
getsec
enter
cmp
in
enter
sbb
adc
mov
loope
jno
stos
aam
out
jbe
adc
imul
cwde
(bad)
retf
movs
outs
adc
scas
sbb
push
push
mov
cmps
imul
movs
(bad)
xlat
inc
cdq
scas
scas
or
jmp
retf
adc
cmp
and
push
int3
bound
je
pop
pop
pop
xchg
nop
cwde
xchg
cmp
cld
sub
adc
sub
pop
mov
inc
jle
jae
push
adc
push
dec
add
popf
icebp
sahf
jecxz
in
loope
xchg
sbb
sbb
movs
rol
mov
adc
dec
mov
imul
push
xor
adc
dec
mov
(bad)
clc
outs
addr16
fldenv
cmp
mov
jecxz
add
lods
xchg
je
loope
pop
jmp
cs
xchg
movs
sbb
push
stc
test
test
imul
retf
test
int
dec
dec
sub
scas
cmp
test
ds
mov
jg
lock
add
xlat
add
mov
scas
add
sbb
mov
cmp
fnstsw
pop
and
addr16
loope
idiv
sbb
mov
mov
(bad)
fs
rol
shr
or
scas
push
test
adc
mov
ret
repz
int
lods
mov
cmp
or
enter
aad
push
out
mov
adc
push
sub
cmp
cmc
in
lods
fsubr
retf
pop
ins
xchg
pop
mov
ficom
xor
scas
sbb
or
push
ins
push
sbb
shl
sub
pop
dec
or
sbb
in
mov
sub
mov
pop
sahf
or
or
es
cmc
push
xor
fld
push
jp
mov
dec
xchg
xor
fild
sahf
add
push
push
xchg
loop
lods
adc
add
fst
or
sbb
push
push
mov
in
jmp
test
cmc
ret
cld
arpl
inc
sub
sbb
push
adc
aam
enter
(bad)
adc
jmp
fst
(bad)
push
es
popf
bnd
popa
ja
sbb
add
movs
xchg
jl
sbb
add
into
in
jns
faddp
mov
cmps
mov
cwde
scas
icebp
xchg
daa
mov
cli
jle
clc
sbb
mov
stos
fist
push
sub
fwait
cmp
jae
retf
xchg
sar
aas
cwde
mov
adc
or
mov
ret
ret
jmp
xchg
push
lods
cmp
adc
mov
fwait
ret
hlt
daa
adc
jno
xchg
leave
jb
adc
les
push
jo
(bad)
sub
mov
hlt
mov
inc
sub
jbe
fdivr
inc
xchg
cmp
xchg
jns
jbe
xor
or
outs
lea
jae
dec
and
add
arpl
leave
xchg
or
arpl
inc
push
pop
dec
arpl
pop
jae
adc
sbb
scas
gs
les
cli
fs
popa
sub
push
imul
sub
sub
adc
xchg
cmp
std
add
pop
fcomip
sahf
or
and
cld
aam
in
mov
adc
fstp
mov
movs
inc
fsub
adc
sar
adc
retf
mov
jo
jb
inc
ds
int
xchg
jne
popa
in
inc
pop
int3
jecxz
xchg
lock
cwde
adc
mov
(bad)
lods
xchg
push
dec
add
bts
ins
xchg
xchg
xor
loopne
cmp
jl
mov
xor
iret
cdq
push
and
sti
adc
mov
cli
mov
retf
stos
xchg
jo
adc
sub
jns
ud1
outs
xor
cld
adc
ja
cmps
or
add
xor
cmp
fiadd
xchg
adc
retf
in
or
and
mov
lahf
xor
(bad)
adc
std
pushf
push
rol
cmp
int3
jnp
mov
into
aam
mov
retf
rcl
push
push
add
or
add
mov
shl
cld
sbb
jno
in
push
test
push
add
pop
inc
xlat
sbb
sub
sbb
or
dec
xor
inc
add
data16
je
sbb
test
nop
xchg
inc
dec
jmp
inc
data16
xor
add
je
pop
pop
(bad)
in
sub
mov
aad
inc
or
nop
lahf
add
pop
ins
push
dec
inc
jnp
pop
repnz
inc
cmp
sub
cwde
stos
nop
pusha
out
ror
pop
sti
xchg
dec
dec
retf
pop
mov
in
add
outs
sub
(bad)
mov
jne
mov
mov
add
sub
in
fsub
or
or
push
add
pop
div
cmp
adc
dec
xchg
imul
out
sti
les
fidivr
xchg
pop
xor
xchg
(bad)
movs
adc
jns
nop
or
jmp
ds
jo
cmp
sbb
sub
cwde
adc
leave
pop
adc
test
fs
and
test
jmp
fsub
pushf
cli
les
mov
push
xor
jl
xor
and
adc
sti
and
ret
in
sbb
add
and
mov
loope
test
push
out
out
js
out
stc
dec
mov
(bad)
sbb
sar
je
sub
xchg
int3
les
in
jl
inc
shl
lds
in
or
gs
adc
xchg
xchg
fst
cli
push
cli
sub
gs
jmp
adc
cmp
adc
outs
xor
fldcw
add
pop
add
hlt
(bad)
xor
inc
sbb
lea
xchg
das
loope
sbb
hlt
call
sahf
pop
and
or
sub
mov
mov
inc
and
aam
lods
aad
add
aaa
cmp
inc
(bad)
ins
sbb
lods
bound
xchg
lock
(bad)
test
push
mov
dec
dec
out
and
je
and
lea
xor
xchg
push
call
pop
pusha
imul
pop
sub
push
xchg
je
dec
call
test
inc
test
inc
js
sbb
shr
cli
loope
mov
adc
fs
dec
xchg
inc
aam
xor
nop
xor
ins
mov
imul
adc
mov
xchg
or
xchg
mov
stc
and
call
adc
outs
or
push
clc
push
in
es
lods
mov
in
jp
mov
mov
lea
fbld
ja
lock
add
hlt
sti
fs
jl
jbe
push
sbb
and
in
sbb
xchg
xchg
repz
mov
or
mov
fwait
dec
(bad)
adc
dec
xlat
sbb
cdq
sti
mov
mov
(bad)
in
adc
ret
add
test
icebp
xor
jmp
outs
jl
test
movs
xor
(bad)
jb
mov
pop
les
xor
adc
xor
and
movs
push
mov
or
jmp
movs
push
dec
in
mov
xlat
pop
lahf
hlt
sub
outs
gs
mov
nop
pop
cmp
cmp
push
lea
sbb
dec
push
inc
imul
jmp
stc
in
mov
loope
adc
ss
imul
lods
hlt
retf
jo
addr16
add
ins
dec
add
sbb
pop
in
je
push
fdivr
mov
xor
ins
arpl
inc
adc
and
pop
push
sti
xchg
out
pop
retf
push
mov
out
mov
inc
in
xor
out
inc
mov
cmp
add
je
or
inc
mov
pop
ins
or
or
enter
stc
inc
adc
loope
shl
pop
popa
sbb
and
pop
popf
loopne
(bad)
out
mov
lahf
inc
xchg
add
aam
in
pop
sub
popf
adc
ins
not
int
jge
lds
jmp
mov
cmp
jp
mov
rcr
retf
mov
in
cmp
daa
push
out
imul
aam
xchg
adc
je
std
fnstenv
loopne
adc
(bad)
mov
push
retf
inc
stos
in
adc
sbb
es
adc
(bad)
shl
adc
enter
pushf
mov
sar
fs
or
mov
gs
ins
(bad)
ror
jge
push
adc
vmovsd
inc
sub
fst
test
push
add
adc
fsubp
sub
xchg
ja
ds
mov
push
adc
mov
mov
dec
mov
push
push
adc
ficom
rol
pop
push
aas
cmp
(bad)
loop
fnstcw
sub
das
in
imul
bound
jl
fs
stos
mov
cmc
xor
cmp
outs
and
test
xor
xchg
sbb
cmp
push
sbb
and
ret
in
sub
jmp
les
sub
adc
add
mov
mov
fadd
push
ret
sbb
les
sub
cmps
sbb
jmp
add
nop
jg
out
xchg
mov
adc
push
retf
xor
pop
jbe
adc
sub
inc
ja
in
adc
cwde
and
adc
dec
pop
pop
ins
cwde
jge
push
fisub
or
in
lods
cmps
push
int3
clc
adc
movs
mov
push
add
fstp
ret
shl
lods
popa
xchg
ins
test
push
cwde
das
shl
shr
fst
push
pop
and
mov
sahf
ret
int3
addr16
pop
or
pop
add
(bad)
lods
push
adc
ds
dec
les
push
pop
cmps
ja
loope
addr16
call
inc
fbstp
jnp
adc
xchg
xor
xchg
fpatan
cmp
(bad)
mov
imul
js
data16
scas
(bad)
cmp
dec
jg
std
mov
mov
sbb
call
sbb
mov
leave
jns
lahf
adc
and
imul
leave
adc
cwde
into
push
jp
in
popf
add
xchg
inc
aam
mov
shr
pop
pushf
sub
out
popf
push
push
xor
jne
dec
adc
rcl
pushf
arpl
jecxz
mov
clc
ins
(bad)
cmps
sbb
jmp
mov
icebp
cmp
es
scas
ret
jae
xchg
adc
dec
out
ds
addr16
test
fidiv
sub
jbe
outs
sbb
and
dec
mov
nop
test
movs
push
cmp
pop
ins
pop
xor
add
xchg
jno
pop
popf
mov
aaa
por
arpl
mov
test
mov
mov
syscall
sub
mov
adc
retf
sbb
cmp
add
fcom
sbb
mov
test
jns
sub
mov
cli
mov
mov
cmps
jecxz
pop
jmp
stos
sbb
xor
repnz
test
add
sbb
int3
movs
(bad)
sahf
cmps
pop
xchg
mov
aam
popa
jmp
addr16
push
sub
adc
xchg
scas
dec
imul
rcl
dec
scas
pop
dec
sbb
or
push
or
adc
rol
jle
fstp
add
ret
xchg
loope
add
retf
leave
jmp
jne
jge
lods
lods
mov
into
nop
dec
movs
mov
loopne
mov
mov
and
mov
jbe
adc
push
(bad)
xchg
mov
ds
mov
xor
retf
and
sbb
sbb
sbb
push
sti
pop
jnp
sub
jmp
jmp
enter
dec
adc
pop
jmp
cmp
shl
fdivr
rcl
cmp
sbb
push
push
adc
leave
add
xchg
es
rcr
mov
fs
add
repnz
in
cs
adc
jge
iret
mov
add
pop
and
fidivr
fnstcw
les
into
mov
jmp
mov
ja
pop
std
ss
je
cmp
sbb
dec
adc
xchg
add
or
mov
inc
jl
aaa
inc
(bad)
loop
jmp
cmp
enter
and
pop
mov
xor
xor
sub
out
jbe
mov
in
cmps
xchg
add
jmp
inc
(bad)
clc
xchg
jle
es
cmp
adc
xlat
out
(bad)
fld
std
xor
cdq
jmp
push
icebp
sub
fnstcw
jnp
(bad)
push
cdq
cmp
dec
movs
sub
dec
cmp
jge
pusha
mov
push
sahf
ins
aam
pop
test
jmp
xchg
jge
inc
cs
rol
dec
mov
pop
aam
jle
iret
and
adc
(bad)
pop
pushf
jl
and
xor
sbb
test
imul
outs
clc
xchg
pop
nop
ins
push
adc
stos
retf
fcom
jg
movs
sub
popa
push
enter
mov
retf
std
dec
jp
xchg
push
movs
mov
jl
adc
adc
in
dec
xchg
loope
push
test
xchg
adc
sti
popa
jcxz
in
adc
push
out
(bad)
outs
(bad)
outs
aaa
hlt
xchg
adc
daa
out
cwde
push
movs
mov
adc
arpl
iret
sar
les
xchg
mov
mov
ins
adc
fdivr
inc
rcr
adc
jne
dec
adc
out
(bad)
mov
push
dec
fiadd
rcl
icebp
push
fnstsw
repnz
cmp
das
call
ins
bound
stos
cdq
sbb
jecxz
fadd
(bad)
adc
out
aaa
aas
aam
call
cmp
adc
clc
fsub
dec
sbb
lock
or
aam
call
xor
fld
gs
sahf
xchg
mov
adc
in
icebp
fcom
movs
(bad)
xchg
adc
jae
or
mov
in
gs
out
sbb
pop
mov
(bad)
(bad)
and
not
cs
pop
packuswb
jle
adc
cwde
pop
ds
mov
fwait
sbb
ins
dec
mov
mov
arpl
pop
xor
cmc
inc
aam
or
pop
and
ret
xchg
call
jecxz
enter
data16
and
xchg
jle
(bad)
cmps
out
enter
sbb
xor
or
neg
mov
(bad)
fistp
sub
jl
fistp
mov
arpl
xor
je
cmp
arpl
add
dec
sahf
cmp
(bad)
push
test
push
sbb
lea
sub
adc
clc
add
lods
sbb
push
sub
push
mov
adc
jl
popf
outs
cdq
and
push
jecxz
jbe
push
inc
cmps
sbb
stos
xor
adc
cli
and
enter
and
test
push
nop
cwde
cmp
shl
call
loopne
xchg
lods
rol
idiv
in
ror
pushf
dec
add
push
inc
mov
jp
add
adc
jle
fst
push
add
pop
cli
add
movs
int3
rcl
shl
(bad)
push
sbb
sti
and
pop
mov
dec
mov
mov
xor
repz
rcr
adc
(bad)
jp
jmp
adc
fwait
add
mov
out
and
(bad)
mov
add
sbb
xchg
push
std
cmp
xor
ja
imul
and
mov
or
cmps
int3
les
cld
mov
fdiv
fstp
adc
int
out
pop
pop
dec
fdivr
sub
push
les
sub
or
and
add
mov
and
mov
sbb
imul
jmp
repnz
in
int
inc
adc
ins
push
pop
imul
not
and
hlt
test
and
sbb
push
cmps
arpl
adc
popa
aas
mov
shl
sbb
mov
mov
jmp
mov
mov
adc
ret
(bad)
or
in
adc
jno
dec
sahf
jg
xchg
pop
clc
retf
(bad)
imul
adc
in
mul
or
inc
leave
add
int3
pop
retf
mov
(bad)
and
or
aad
inc
int3
adc
adc
fwait
nop
pop
out
adc
stos
in
push
mov
fs
inc
xchg
std
aam
mov
repz
pusha
sbb
or
mov
sbb
bound
or
call
ss
fcomp
loop
imul
inc
or
out
mov
inc
pop
test
int3
dec
push
int3
ds
mov
mov
pop
sbb
outs
sub
sbb
cmps
or
sub
push
addr16
sti
es
push
inc
dec
fmulp
or
dec
(bad)
push
scas
xchg
jno
mov
fadd
or
add
shl
xor
test
mov
(bad)
dec
rol
inc
ret
inc
or
xchg
push
int3
push
and
mov
imul
call
or
pop
xor
sbb
aas
jmp
jb
xchg
dec
lods
and
lahf
imul
aaa
iret
cmps
stos
sub
pop
fiadd
stos
or
mov
mov
mov
loopne
imul
jle
inc
shr
mov
sbb
dec
cld
push
sbb
int3
pop
cmps
fidiv
dec
sbb
xor
jl
cmp
push
je
mov
pop
xchg
push
jecxz
daa
dec
fadd
sbb
call
scas
scas
sbb
ja
pop
dec
adc
(bad)
lds
je
adc
mov
mov
mov
adc
(bad)
lds
je
pop
js
(bad)
or
lahf
sbb
sub
mov
pop
(bad)
mov
sub
jl
push
dec
cs
and
dec
int3
lds
pop
jmp
lock
add
inc
cld
jmp
push
aam
aaa
fwait
loopne
test
nop
push
xchg
dec
std
xchg
loope
rcr
int3
and
inc
jmp
push
movs
ds
xchg
movs
mov
add
repz
loope
in
adc
aad
and
or
enter
xor
adc
pop
cmps
add
fisub
enter
mov
sub
cmp
nop
ins
lock
adc
shr
dec
adc
ret
push
and
test
pusha
imul
inc
into
cmp
jmp
enter
aad
ret
adc
pop
inc
cmp
test
ret
int3
ja
adc
fsubr
shl
outs
outs
adc
jne
xor
icebp
shl
xlat
adc
test
(bad)
xchg
cli
sbb
or
lahf
and
push
je
pop
jmp
fstp
inc
cmp
mov
sar
cmp
cld
xchg
stos
dec
mov
call
add
inc
cli
jp
aas
jnp
imul
hlt
and
or
jno
mov
int3
aas
fidivr
lahf
inc
jnp
add
cmp
and
ja
retf
cmp
stc
(bad)
les
add
mov
or
mov
aas
cld
mov
add
(bad)
sbb
mov
push
jmp
dec
inc
clc
pop
sub
dec
fdivr
std
dec
leave
in
aaa
mov
adc
dec
mov
sub
xchg
or
add
jg
adc
imul
pop
loop
jne
pop
push
adc
and
sar
imul
mov
std
test
push
test
sub
mov
fisttp
es
inc
push
ins
(bad)
xor
ds
(bad)
aaa
arpl
(bad)
dec
ffreep
aad
sbb
aas
xchg
outs
mov
imul
sub
xor
das
js
and
call
cmp
mov
js
loopne
sti
ret
mov
push
jge
(bad)
pop
shl
bound
jno
hlt
sub
pop
adc
push
and
ins
adc
daa
clc
pop
xchg
jae
sbb
sbb
jno
adc
or
cmp
mov
test
sbb
jmp
add
icebp
iret
mov
push
popf
lods
lods
pop
imul
mov
clc
cmp
inc
mov
(bad)
push
loope
retf
push
loopne
test
push
mov
xor
sub
sbb
(bad)
popw
call
arpl
or
inc
fbstp
sbb
cmc
lds
cmc
and
int3
das
je
pop
retf
mov
inc
call
div
push
lods
push
ins
js
adc
jmp
add
pop
scas
call
jns
adc
xchg
mov
pop
cmp
in
sbb
shrd
xor
add
cld
scas
inc
xchg
lea
mov
addr16
mov
retf
xchg
test
mov
adc
out
js
movs
jnp
rcl
sti
sbb
jge
unpcklps
push
inc
hlt
mov
jb
push
adc
mov
mov
std
les
inc
jmp
push
icebp
mov
fadd
ficom
cmp
push
pushf
and
out
daa
jmp
push
push
lock
repnz
js
inc
je
xor
shl
cld
and
or
test
scas
and
and
cmp
ret
cmp
xor
mov
add
push
imul
xchg
jge
sbb
push
jnp
inc
cdq
mov
lock
fcom
cmp
jle
icebp
push
je
push
mov
inc
cmps
add
mov
loope
test
adc
push
(bad)
cli
inc
int3
dec
aas
es
outs
call
add
xor
and
into
cmp
xchg
sbb
shl
stos
mov
sahf
(bad)
jnp
popa
shr
and
adc
cld
imul
mov
sbb
xchg
les
ins
icebp
or
mov
add
dec
xlat
adc
cmp
fxch
aad
shl
pusha
je
and
or
jmp
int3
adc
scas
add
xlat
daa
ror
push
cdq
mov
outs
xor
jl
fcom
int3
cmp
pop
aad
add
les
xor
cmc
aaa
push
adc
dec
out
movs
push
enter
pop
inc
xchg
js
(bad)
cwde
cmc
xchg
or
mov
adc
sti
jl
pop
cmp
pop
not
mov
fisttp
ins
shr
cmp
jmp
cmp
pushf
call
gs
shr
not
xor
push
jmp
adc
cmp
xchg
xor
fldcw
mov
jbe
cli
add
jge
cmp
push
in
mov
cmp
adc
and
dec
vsubps
shr
add
and
push
adc
loopne
bound
pop
(bad)
mov
adc
mov
adc
ret
xor
push
es
inc
adc
push
mov
xchg
xor
in
adc
lock
ret
(bad)
(bad)
adc
cmc
(bad)
pop
dec
imul
je
sahf
pop
js
xchg
clc
pop
pusha
mov
adc
sbb
lods
xchg
icebp
adc
push
in
(bad)
jb
sub
and
and
inc
js
and
dec
add
imul
loope
add
std
and
adc
mov
jae
popa
xor
call
mov
push
mov
adc
iret
repz
add
push
dec
cld
add
daa
xchg
scas
or
sbb
sbb
cmps
les
add
mov
outs
or
mov
ret
pop
(bad)
jno
mov
movs
and
dec
mov
imul
stc
loope
xchg
cmp
retf
in
add
inc
adc
inc
ja
jecxz
jb
shl
int
or
push
dec
das
mov
jns
in
(bad)
adc
aad
pop
int3
cmp
int
into
mov
nop
xchg
cmp
shr
clc
adc
jp
lahf
pop
int
(bad)
(bad)
(bad)
call
jmp
sbb
dec
xor
bound
loopne
and
sbb
outs
test
mov
adc
jo
sbb
out
and
mov
mov
pop
or
and
xor
(bad)
cmp
jle
popf
or
sbb
pop
sbb
movs
jae
mov
leave
hlt
add
outs
xchg
adc
stc
cwde
fistp
sbb
mov
aam
dec
icebp
div
int
xchg
loope
das
push
xchg
arpl
sbb
scas
adc
ins
into
jmp
cmp
popf
dec
adc
pop
jg
inc
or
xor
sbb
std
inc
add
jmp
ficomp
xchg
and
test
int
pop
push
enter
or
push
adc
pop
cmp
cmp
jo
jmp
pop
sbb
adc
mov
test
dec
sbb
sub
adc
push
pop
add
ja
add
fmul
or
dec
jecxz
jo
xor
jb
sub
daa
icebp
movs
mov
xor
cmp
or
sub
mov
int
loop
pop
std
xchg
mov
add
fist
ss
sti
in
and
mov
xchg
jmp
leave
aad
cld
ficom
(bad)
pop
sub
mov
adc
inc
hlt
xchg
ss
adc
xchg
cmp
push
sbb
(bad)
xchg
dec
add
leave
jbe
inc
fs
shl
adc
daa
xchg
add
jg
jb
push
add
xchg
xchg
int
mov
sbb
pop
ds
mov
adc
lea
pop
out
cmps
xor
xor
inc
movs
adc
imul
pop
mov
in
and
dec
sbb
adc
cli
in
test
ins
cmps
test
or
rol
pop
and
adc
sbb
jle
xchg
fs
arpl
or
cld
fisubr
fst
fdiv
cmc
out
loope
in
popf
mov
in
mov
push
add
mov
rol
pop
sub
ret
scas
popa
loopne
xlat
loopne
pop
pusha
inc
fsubrp
xchg
mov
xchg
add
stc
mov
cmps
add
in
movs
mov
sbb
adc
add
xchg
aam
mov
xor
or
pop
stc
cmp
(bad)
sti
sbb
adc
add
pop
js
push
lar
xchg
sbb
icebp
push
int3
fldenv
jmp
and
xchg
adc
add
loop
cmc
jno
dec
and
in
mov
ds
fs
mov
push
pop
pop
and
or
pop
in
dec
mul
outs
xor
je
sbb
call
xor
outs
adc
add
mov
dec
aas
add
xchg
stos
pop
xor
adc
bound
test
jns
mov
ret
sbb
icebp
and
xchg
dec
push
je
or
mov
sub
push
sub
sbb
cmps
fs
push
dec
xchg
xor
adc
sbb
int3
lods
and
jmp
div
inc
or
dec
pop
imul
movs
jmp
mov
test
adc
dec
sar
pop
pop
inc
out
xor
pop
gs
(bad)
out
cmp
or
rcr
stos
dec
adc
adc
call
pop
cld
inc
push
iret
adc
xchg
gs
adc
in
and
mov
out
mov
xchg
pop
sbb
mov
fcmovnbe
and
sub
and
xor
cwde
outs
sbb
popa
sub
ins
dec
sbb
adc
mov
xchg
add
add
jmp
mov
adc
stos
mov
sahf
or
in
in
sbb
xchg
mov
fnstcw
retf
loopne
out
xchg
mov
and
inc
dec
adc
adc
jae
lds
cli
cmp
mov
xor
iret
mov
ret
pop
adc
shl
mov
(bad)
nop
cmp
adc
sub
xor
or
mov
jp
and
cmps
jb
xor
cli
xor
fadd
push
mov
pop
push
hlt
hlt
push
dec
mov
pop
inc
arpl
xchg
shl
adc
mov
icebp
in
les
jle
inc
cmp
punpckhwd
xchg
mov
mov
xchg
pop
xchg
and
push
lea
mov
push
popa
ss
int3
inc
xchg
and
adc
ficomp
rcl
ja
mov
sbb
rcl
jbe
inc
add
in
cmp
hlt
pop
xchg
mov
inc
das
and
inc
mov
mov
cmps
inc
jecxz
jb
sbb
adc
ja
xor
in
repnz
adc
pop
arpl
addr16
gs
xlat
sar
jb
adc
scas
mov
mov
add
shl
adc
stos
jae
jl
call
arpl
dec
adc
and
retf
adc
imul
jecxz
cmp
mov
jmp
es
adc
push
popa
stos
iret
cmp
push
test
cmp
add
cdq
or
(bad)
int3
repnz
cli
test
adc
fsub
xor
popf
sbb
sub
je
lea
pop
test
ins
fnstsw
mov
fisttp
pop
add
dec
enter
mov
pop
mov
lods
ja
loope
jne
or
int3
(bad)
call
or
sbb
xor
xchg
mov
push
out
std
adc
inc
mov
mov
xchg
pop
push
cmps
test
push
jmp
cmp
add
cmp
out
aaa
sbb
out
aad
nop
mov
retf
std
or
rcr
fidivr
popf
jae
jno
retf
retf
mov
xchg
movs
sbb
imul
sub
aad
jmp
push
inc
int3
scas
repnz
xchg
(bad)
dec
retf
aam
mul
xchg
xchg
sbb
fdivp
or
rcr
test
push
sub
xchg
sbb
pusha
out
rol
push
xchg
pop
std
pop
sbb
cmps
sbb
imul
fstp
cmp
or
test
and
hlt
scas
pop
out
dec
(bad)
mov
push
add
xchg
std
mov
sahf
and
(bad)
fiadd
mov
and
push
jb
or
pop
xor
sub
shr
out
loopne
sbb
rol
fsubr
out
or
and
loop
and
stos
inc
mov
sbb
adc
outs
imul
jnp
xchg
ins
cld
pop
das
sub
inc
mov
adc
push
rol
mov
sbb
dec
aam
imul
int3
stos
lock
pop
mov
xchg
adc
int3
xor
push
mov
pusha
sbb
sbb
fcmovnbe
adc
adc
jge
push
jg
push
adc
xchg
pop
push
lea
xor
add
fs
repnz
inc
pop
call
test
and
ins
mov
sbb
lods
ror
not
and
push
cdq
sub
pop
mov
div
inc
push
js
push
sbb
jl
adc
loope
jmp
jmp
inc
fwait
xchg
push
xchg
jmp
push
ds
imul
sub
push
rcl
cmc
adc
dec
test
xchg
mov
test
in
inc
mov
xchg
(bad)
cmps
lock
mov
movs
mov
js
int
adc
push
aad
push
inc
push
inc
sbb
(bad)
addr16
fcomip
dec
outs
cmp
adc
out
mov
and
fiadd
pushf
test
push
out
sbb
add
rcl
aas
sub
inc
(bad)
xor
lods
movs
mov
adc
push
cmc
pop
xor
cmc
or
lods
and
aad
mov
inc
stos
nop
cmp
dec
scas
sbb
daa
adc
icebp
sbb
xlat
ret
sub
xchg
ret
sbb
pop
lds
and
lea
push
sti
cmp
cmc
adc
test
frstor
cmp
mov
jno
dec
pop
xchg
adc
push
pop
ins
data16
repz
mov
gs
test
ds
cmps
scas
jo
and
mov
sub
jne
add
cs
mov
lods
aas
dec
adc
shl
pop
xchg
dec
je
push
jmp
mov
outs
xor
ja
fimul
aaa
popf
idiv
or
push
dec
pop
inc
xchg
outs
ja
and
xor
dec
jbe
cmp
gs
sub
jns
sub
cld
lods
dec
std
adc
adc
es
mov
jp
sbb
mov
sub
adc
bswap
xchg
gs
sub
cli
inc
daa
lock
addr16
scas
in
add
repz
mov
mov
adc
jp
(bad)
mov
jbe
dec
add
(bad)
dec
adc
pop
popa
scas
push
movs
mov
retf
xchg
fdiv
les
xor
adc
lea
mov
cdq
cmc
xchg
sub
mov
adc
pop
mov
fld
out
aam
test
outs
in
sbb
std
cmp
cmps
ins
clc
fisub
jns
mov
stos
jle
sti
push
loopne
or
fcomp
repnz
adc
xchg
pop
pop
adc
adc
push
jecxz
xor
cmc
das
addr16
shr
in
addr16
mov
xchg
adc
and
outs
jnp
adc
push
das
seta
ja
adc
add
mov
adc
test
mov
pusha
les
sar
sbb
daa
in
jmp
call
mov
cmps
ret
aaa
xchg
lds
out
jo
ja
adc
inc
push
shr
xchg
pop
add
jae
mov
jo
imul
fisttp
xor
clc
scas
mov
arpl
adc
out
xchg
cdq
iret
jp
cmp
sub
add
inc
cmp
and
mov
jle
jp
adc
mov
xchg
mov
aam
and
xor
push
adc
or
push
idiv
adc
add
and
jne
jl
xchg
mov
push
pushf
inc
push
les
dec
fst
add
aad
stc
in
rcr
xchg
mov
(bad)
mov
xchg
stc
cmp
cmp
push
ds
push
push
fdiv
jp
pusha
push
sbb
and
arpl
inc
sbb
and
inc
repz
jbe
jnp
sbb
jecxz
rcl
sbb
jle
inc
push
div
push
push
bound
in
push
imul
outs
sub
adc
mov
or
fld
retf
push
sub
icebp
int3
cmp
loop
push
add
cmp
daa
je
cmp
adc
lock
and
add
or
aad
cmp
jmp
(bad)
out
retf
cs
in
fiadd
mov
cmp
shl
ret
xchg
push
fcom
adc
xlat
mov
or
add
pop
xchg
sbb
dec
loopne
pop
ins
dec
hlt
mov
test
pop
push
scas
adc
cmp
aad
jle
imul
test
add
sub
pop
(bad)
cmp
xchg
sub
jmp
(bad)
mov
dec
mov
mov
lods
dec
push
(bad)
adc
mov
daa
push
aaa
(bad)
fs
xchg
or
retf
xor
push
pop
hlt
shr
add
and
xchg
mov
adc
jno
out
shl
test
or
je
les
dec
jno
and
pop
jb
jl
push
inc
repnz
stos
enter
jnp
cdq
imul
in
cdq
pop
adc
xchg
adc
xor
in
je
ins
(bad)
xchg
push
sbb
lea
jbe
or
aaa
aaa
sar
das
cmps
jae
jle
outs
sbb
mov
inc
daa
lods
xor
iret
or
xchg
ins
push
call
sub
aam
adc
cmp
repnz
mov
inc
jge
xchg
outs
cmp
lds
leave
retf
xchg
adc
and
arpl
add
icebp
sbb
les
push
add
push
scas
jne
xchg
add
pop
pop
sbb
jo
push
cwde
es
and
xchg
lahf
(bad)
rcl
xlat
add
adc
adc
add
inc
dec
mov
fs
fsubp
and
sbb
jmp
inc
stos
mov
or
adc
or
pop
inc
push
(bad)
arpl
push
shl
pop
mov
mov
popa
push
mov
in
push
sbb
repz
push
push
lods
adc
push
mov
push
sub
xor
adc
(bad)
push
pusha
adc
push
push
jp
ins
inc
pop
adc
cmps
mov
loope
out
lds
mov
xor
adc
pop
push
mov
popf
inc
mov
sub
inc
outs
popf
into
or
lahf
cli
pop
inc
sub
loop
adc
mov
push
aam
mov
sbb
nop
push
mov
mov
adc
inc
lods
in
cmp
cmp
lods
lea
push
in
(bad)
lock
dec
inc
inc
leave
cmps
in
loopne
test
push
push
(bad)
outs
out
inc
in
cmp
add
jns
dec
mov
pop
int3
push
push
fcomip
pop
push
cmc
cdq
mov
sahf
stc
clc
mov
jp
jge
mov
add
push
push
jmp
sbb
fst
mov
pop
sbb
mov
lock
adc
ds
loope
or
adc
mov
xchg
adc
scas
loopne
mov
xor
adc
sti
das
fs
adc
fisttp
in
pop
mov
push
shr
jno
fs
xor
dec
push
adc
xchg
xor
adc
cmp
adc
cld
or
xor
pushw
jnp
popa
lock
scas
xor
into
(bad)
outs
mov
mov
adc
popa
loopne
inc
leave
adc
pop
jmp
out
xchg
push
sahf
adc
add
push
cmp
push
xlat
lea
ins
imul
and
push
jl
cmps
cmp
adc
ret
sub
jp
movs
pop
test
mov
out
lods
add
inc
(bad)
cmps
in
inc
xlat
or
cmp
jno
arpl
adc
add
retf
es
mov
les
mov
arpl
pop
inc
in
pushf
test
movs
enter
pop
mov
xor
push
jae
xor
adc
sub
adc
cs
mov
mov
or
push
dec
test
push
cmp
test
add
dec
inc
aas
mov
int3
xchg
(bad)
popf
and
and
iret
adc
push
ret
inc
sub
xor
mov
imul
or
or
push
sbb
call
jecxz
in
daa
fcmovbe
movs
retf
xchg
and
mov
es
dec
pop
xchg
cmps
sar
xchg
sbb
cmp
xor
jno
sahf
sbb
retf
outs
out
in
out
push
add
or
aam
inc
jns
repz
je
ret
cmp
in
fisubr
and
adc
nop
into
adc
inc
jbe
xor
push
fidivr
jge
out
or
arpl
pop
sub
pushf
ins
jmp
scas
outs
sti
mov
jle
xchg
cmp
out
push
fst
pushf
sti
inc
imul
cld
fstp
adc
adc
in
pop
pop
(bad)
and
add
xlat
inc
xchg
pusha
das
dec
clc
lods
lds
call
sbb
sbb
push
inc
xor
int3
setle
call
ja
sbb
scas
out
xchg
or
jmp
fisttp
adc
pop
adc
adc
je
aad
or
or
ds
les
or
cwde
inc
imul
or
and
ja
fidivr
dec
adc
sub
loopne
pop
inc
mov
inc
cld
add
cli
cli
sbb
cdq
fdiv
das
adc
and
imul
xor
push
in
pop
mov
dec
addr16
movs
stos
sbb
in
and
pop
pop
push
or
cli
adc
popa
sub
das
je
cld
cmp
add
or
push
in
xchg
fidiv
inc
inc
xchg
jge
adc
in
es
pop
sbb
cwde
mov
jecxz
dec
xchg
hlt
add
xchg
ss
adc
adc
inc
ds
sub
inc
jo
sbb
vpandn
adc
xor
fdiv
div
pop
(bad)
icebp
xchg
pop
or
adc
dec
mov
out
push
aad
jmp
mov
aaa
js
adc
push
adc
mov
pop
aad
out
push
xchg
xor
dec
xor
mov
add
and
(bad)
xchg
xor
sub
adc
push
and
arpl
add
in
(bad)
movs
aad
dec
dec
mov
and
ret
out
adc
in
cmp
or
cmp
push
int3
and
adc
xchg
dec
test
adc
mov
rol
xor
lods
fild
or
fld
pop
out
jl
adc
imul
jle
das
inc
cld
fcomp
fucom
adc
aad
pop
js
enter
jl
sbb
mov
mov
dec
iret
ss
lods
xchg
addr16
mov
push
adc
mov
scas
sub
and
xchg
not
add
cmp
add
call
add
leave
test
adc
pop
push
into
jns
fsubr
adc
cmp
data16
and
jno
push
xchg
jl
push
xchg
inc
mov
xchg
sahf
mov
test
arpl
jae
scas
movs
dec
cli
mov
aas
push
fistp
ret
push
loopne
inc
aam
push
jle
add
cmp
stos
mov
sti
outs
inc
jmp
cmp
(bad)
(bad)
and
inc
out
mov
adc
shr
cmp
aam
mov
repnz
sar
ror
sub
inc
sbb
call
push
xor
mov
mov
pop
loope
js
fs
inc
xchg
paddw
and
push
ins
aas
pop
leave
lock
mov
mov
pop
imul
cmp
dec
mov
call
sub
cdq
fs
out
pop
dec
dec
push
aam
inc
sub
add
adc
mov
sub
push
shr
dec
ret
cdq
loopne
push
ffree
adc
shl
push
jae
stc
xor
(bad)
les
(bad)
cmps
cmps
adc
movs
xchg
push
mov
adc
sbb
inc
in
xchg
leave
push
jae
stc
jge
adc
push
mov
lea
cmp
sar
add
mov
in
loopne
dec
int3
ret
movs
dec
call
push
cld
movs
inc
and
inc
pusha
jnp
fild
ror
outs
daa
out
hlt
fs
mov
sub
cmp
(bad)
not
inc
test
or
(bad)
and
aaa
shl
jns
out
adc
mov
mov
adc
fcomp
mov
js
sub
xchg
mov
xchg
daa
adc
call
ror
imul
std
xchg
adc
adc
cmp
retf
xchg
mov
push
cli
jno
sub
fs
pop
xchg
jmp
adc
ss
imul
dec
adc
add
js
lahf
cmp
pop
retf
rcr
xchg
xor
push
add
xor
fwait
inc
test
xchg
ret
ss
clc
cld
push
lds
sbb
adc
push
call
sbb
aaa
push
xchg
div
adc
and
movs
pop
xchg
fsubr
sub
push
cmp
or
daa
nop
adc
div
mov
dec
xchg
inc
inc
inc
xchg
xchg
and
xchg
jmp
adc
adc
add
int3
inc
cmp
push
jmp
movs
mov
xor
xchg
mov
das
aaa
(bad)
mul
jne
in
adc
jae
and
push
jecxz
mov
adc
pop
sbb
xor
adc
and
imul
or
das
mov
add
movs
fprem1
cmp
push
mov
stos
lods
push
add
ins
push
rep
mov
fcomp
sub
add
sbb
xor
test
inc
aam
out
add
cld
movs
inc
push
dec
cmp
sub
cwde
mov
int3
in
call
das
sar
gs
mov
out
leave
retf
in
scas
jae
mov
mov
inc
mov
aas
repz
sub
cmp
ds
or
mov
cmp
mov
cdq
adc
loopne
cwde
and
push
call
dec
push
fisub
cmp
sbb
sti
push
inc
std
les
out
in
and
push
mov
ins
(bad)
mov
pop
int
add
in
sbb
sbb
sub
dec
jae
loopne
stc
adc
aad
or
idiv
jne
jecxz
jmp
xchg
push
call
pop
xor
adc
xlat
adc
xchg
hlt
adc
mov
mov
jno
mov
cmp
xchg
call
cmps
add
dec
sub
in
adc
cwde
cli
clc
jno
and
hlt
cld
mov
pop
int3
cmps
sahf
(bad)
lods
sahf
in
cmp
and
(bad)
popa
test
int3
dec
sbb
data16
jmp
dec
push
pop
mov
xor
dec
sbb
fnstenv
push
mov
dec
hlt
jo
cmp
or
or
jmp
xchg
inc
in
add
cmp
pop
inc
enter
test
ins
push
out
into
push
mov
std
push
mov
or
pop
dec
jl
adc
jg
jns
lds
inc
pop
mov
xor
inc
imul
or
ret
xchg
outs
sub
enter
ja
sbb
push
aas
movs
pushf
rcl
adc
sbb
mov
mov
push
push
mov
call
inc
jmp
not
adc
ins
or
shl
xchg
push
ds
mov
shr
aas
adc
in
(bad)
sub
push
inc
adc
jecxz
xchg
inc
lahf
sbb
or
and
adc
and
push
add
sub
xor
and
ins
int3
jle
adc
jg
fisubr
adc
or
out
nop
cmp
aam
mov
sbb
xchg
pop
into
call
add
icebp
call
cmp
out
ss
adc
ret
pop
test
dec
scas
add
xchg
repnz
test
jae
adc
sub
mov
retf
mov
dec
or
cmps
xchg
(bad)
and
mov
cmc
sub
push
inc
int3
fisttp
jno
aaa
jg
xchg
mov
pop
je
mov
pop
dec
arpl
movs
jmp
add
xor
push
lods
cmp
jmp
adc
cmc
jb
jge
push
std
imul
inc
xchg
pushf
push
and
retf
loope
pop
pop
push
nop
mov
xlat
ret
int3
mov
bound
movs
imul
xor
adc
sbb
leave
repnz
jmp
pop
sbb
int3
dec
push
jle
sbb
jmp
sbb
sbb
push
add
pop
mov
repz
mov
out
mov
(bad)
repz
sbb
and
sahf
int3
cmp
scas
mov
stos
stc
dec
cmp
and
shr
aas
aas
call
inc
mov
in
sbb
mov
int3
test
mov
xlat
test
jge
fisttp
jno
cmp
jo
adc
sub
pop
and
inc
test
jbe
(bad)
pop
aaa
fnstsw
xor
pop
les
sub
retf
xchg
pop
leave
push
jl
gs
test
or
push
push
add
scas
lods
cdq
retf
pushf
push
mov
jl
(bad)
and
or
cmps
hlt
int
mov
popa
les
adc
jp
add
in
push
xor
xchg
mov
rcl
into
in
inc
mov
ja
xchg
out
mov
addr16
xor
in
mov
sub
or
inc
jmp
adc
jno
and
cmp
cwde
test
(bad)
call
pop
push
pushf
mov
xor
push
leave
sbb
(bad)
(bad)
in
adc
dec
ds
mov
sbb
inc
add
fiadd
mov
imul
call
xchg
fs
xor
push
cmps
jmp
cwde
xchg
or
jmp
test
inc
xor
push
mov
fcom
div
out
rcr
or
dec
xor
mov
mov
cmp
aaa
mov
or
lods
ja
cmp
ror
mov
push
xchg
imul
push
sub
or
fnstsw
fbstp
adc
(bad)
ds
sub
cmps
mov
mov
neg
adc
jl
mov
push
or
ins
stos
sbb
cmp
lahf
(bad)
stos
sub
add
or
int3
or
mov
retf
(bad)
popa
push
test
mov
(bad)
pop
mov
in
sub
cmp
xchg
adc
or
inc
hlt
pop
dec
arpl
in
adc
addr16
push
mov
xchg
jg
popf
adc
out
jae
das
js
stc
ret
loop
push
mov
adc
sbb
adc
(bad)
cmp
mov
mov
test
test
hlt
dec
aaa
push
test
jg
jl
mov
mov
mov
das
inc
fnstcw
mov
dec
jle
retf
adc
sbb
add
mov
inc
dec
mov
jmp
mov
push
out
xchg
lods
pop
adc
out
pop
stc
xlat
movs
pusha
je
(bad)
mov
or
ins
ins
jne
loopne
mov
adc
imul
add
cwde
adc
push
mov
dec
adc
mov
sbb
mov
cmc
or
adc
popa
(bad)
dec
pop
cwde
mov
cli
fst
iret
xchg
sub
adc
lods
adc
movs
sbb
push
lds
dec
aam
das
les
push
adc
jge
mov
loope
sar
cdq
inc
mov
inc
adc
mov
pop
and
ror
adc
cdq
mov
jecxz
cmp
mov
es
mov
lods
icebp
xchg
fild
xor
jmp
adc
dec
outs
ja
add
retf
add
into
adc
movs
push
cmps
sti
and
in
adc
popf
sbb
nop
adc
push
sub
and
pop
jecxz
push
push
jmp
in
lock
mov
push
pop
cmps
(bad)
addr16
mov
and
(bad)
xor
xchg
sub
dec
ins
mov
push
adc
mov
aad
xchg
jo
push
mov
mov
repz
dec
cmp
out
dec
shl
adc
inc
jl
jo
adc
push
movs
aaa
out
or
add
push
aam
jne
cs
jl
adc
in
shl
in
mov
in
fist
cmps
dec
jmp
stos
test
push
pushf
or
lock
das
push
cmp
data16
(bad)
jne
dec
adc
cwde
inc
sti
push
jle
lods
fsub
mov
repnz
push
mov
scas
adc
pushf
xchg
adc
inc
xchg
cmp
push
inc
sub
sti
enter
pop
(bad)
in
or
movs
or
mov
(bad)
sub
push
jle
xchg
lods
shr
pushf
cmp
rcl
push
das
dec
scas
mov
cmp
sbb
pop
push
add
mov
and
in
retf
jno
shl
xor
adc
push
(bad)
pop
adc
mov
in
mov
jle
dec
mov
mov
aam
mov
xor
dec
dec
push
adc
rcr
or
mul
gs
out
into
xor
inc
push
dec
mov
jmp
test
mov
popa
push
aaa
out
shr
adc
xlat
loop
add
(bad)
adc
or
cmp
mov
sub
xor
push
jge
not
leave
sar
xor
cmps
jle
push
fidivr
out
not
ret
add
adc
(bad)
stc
xchg
leave
es
test
and
jnp
sahf
adc
jae
mov
call
mov
jge
add
xchg
je
(bad)
test
cmp
retf
jnp
call
out
or
aad
push
gs
retf
adc
add
push
mov
in
mov
sub
mov
out
test
xchg
xchg
into
cmps
rcl
retf
ror
fsub
adc
mov
ficom
xchg
adc
test
add
pop
and
bound
into
adc
or
rcr
adc
push
out
and
adc
mov
push
sbb
xlat
(bad)
enter
lea
mov
adc
daa
xchg
dec
or
shr
(bad)
cmp
int
movs
scas
(bad)
jb
ja
in
ror
push
or
push
xor
and
mov
cmp
sar
das
adc
loopne
jb
cmp
add
arpl
adc
inc
rcl
push
jmp
rol
(bad)
adc
leave
or
les
jl
adc
inc
into
mov
iretw
ins
pop
test
stc
clc
adc
call
call
xchg
adc
mov
daa
cmps
sbb
dec
movs
push
jge
xchg
lods
adc
mov
mov
cmps
loope
imul
test
xor
mov
daa
es
jle
outs
dec
por
adc
ja
dec
lds
arpl
repnz
pop
adc
sub
cmc
hlt
or
push
mov
aad
outs
sbb
je
mov
pop
je
shl
jl
fsubr
stos
dec
daa
and
ds
push
loopne
pop
ret
in
inc
clc
(bad)
scas
adc
inc
(bad)
mov
pop
push
adc
loope
push
std
adc
mov
push
adc
mov
dec
mov
xchg
mov
icebp
push
mov
jno
imul
xchg
fdivp
push
outs
pop
push
adc
cs
mov
jl
out
add
hlt
ror
adc
and
push
mov
cmp
jmp
fst
jg
add
or
jl
jecxz
dec
sbb
inc
repz
push
adc
inc
inc
push
sbb
not
imul
rcl
cmp
arpl
repnz
(bad)
sbb
dec
std
idiv
jg
add
fild
mov
adc
not
dec
fmul
shl
stos
aam
jl
test
fld
mov
sbb
into
mov
push
cld
movs
pop
or
mov
rol
hlt
pop
out
nop
or
push
in
mov
inc
mov
in
add
jmp
addr16
adc
mov
pop
(bad)
sbb
mov
jmp
cmps
in
adc
imul
adc
jb
jbe
or
dec
int
dec
leave
fisubr
inc
cmp
outs
imul
dec
sbb
stos
push
icebp
mov
xlat
loopne
aaa
inc
shr
popa
call
sub
mov
inc
imul
mov
inc
dec
loope
int3
inc
aas
aam
loopne
sar
sbb
call
mov
xchg
lds
je
pop
out
dec
jmp
pop
mov
lahf
in
inc
hlt
add
ficom
and
shr
dec
push
inc
sbb
test
jae
test
je
in
cmp
push
pop
and
pop
pop
and
mov
xlat
in
shl
add
adc
xchg
adc
mov
pop
repnz
cmps
push
xor
dec
cdq
pop
call
or
xor
pop
imul
adc
jle
out
into
sub
mov
stos
add
je
xor
ins
adc
retf
out
push
mov
adc
movs
lea
or
scas
in
outs
inc
addr16
fdiv
xchg
xchg
neg
xchg
pop
into
adc
in
rol
les
mov
inc
in
jmp
mov
mov
(bad)
xchg
shl
xor
push
in
adc
sub
call
lock
and
push
and
mov
push
and
inc
daa
add
fs
sbb
mov
xchg
pop
stos
push
pop
mov
movs
int
adc
and
(bad)
imul
mov
shl
bound
pop
push
(bad)
mov
dec
push
fild
add
fld
cli
addr16
jns
repz
(bad)
mov
icebp
cmc
shl
add
rcl
jo
fadd
cmp
adc
pop
and
or
xor
popf
mov
xor
popf
pop
mov
jbe
sahf
and
and
call
stos
shl
and
jl
adc
out
xor
inc
ret
je
pop
adc
pop
push
rcr
push
inc
mov
sub
pop
fist
jns
(bad)
ficomp
push
push
(bad)
imul
fs
xchg
or
pop
outs
sbb
sbb
sbb
pusha
push
jmp
sbb
aam
iret
es
adc
and
ret
out
outs
add
xor
mov
in
xchg
ins
sbb
sbb
push
xor
mov
pop
scas
popa
call
in
movs
aam
add
hlt
int3
scas
ss
stos
adc
jecxz
cmp
adc
inc
and
dec
in
dec
cmp
sti
adc
and
sub
(bad)
dec
inc
cmp
popa
imul
cli
enter
mov
push
sbb
cs
mov
xchg
jecxz
jmp
xor
mov
in
jb
adc
(bad)
dec
(bad)
sbb
cmc
sbb
sti
jne
mov
mov
or
adc
call
scas
xchg
in
add
jo
pop
or
adc
(bad)
mov
popa
adc
cmp
pop
push
adc
add
mov
add
out
loope
call
pop
mov
int3
or
push
xor
mov
inc
cmp
rcl
sbb
jecxz
or
adc
pop
aad
and
xchg
daa
das
clc
sbb
adc
and
mov
adc
dec
push
or
jmp
push
sbb
gs
adc
(bad)
pop
and
and
test
iret
int
test
je
and
inc
inc
gs
in
pop
movs
adc
cmc
out
addr16
into
mov
and
xchg
call
cs
mov
push
sbb
adc
(bad)
cmps
sub
cmp
xchg
call
jp
adc
(bad)
adc
inc
cmp
ret
ret
aad
and
dec
inc
cmc
jmp
imul
clc
fist
jg
scas
test
(bad)
sti
lods
dec
dec
icebp
shl
push
mov
iret
nop
ss
dec
rol
mov
xor
or
adc
inc
mov
xlat
xchg
adc
sbb
sbb
mov
inc
jmp
add
pusha
jecxz
scas
in
jbe
or
rcr
xchg
addr16
outs
mov
fwait
rol
pop
int3
cmp
test
push
mov
push
add
es
xchg
xchg
repz
(bad)
jns
fmul
mov
mov
xchg
mov
mov
lahf
call
or
fst
mov
inc
and
or
adc
rcl
retf
sbb
test
lods
and
mov
out
aam
push
shl
push
je
je
retf
sbb
scas
repnz
and
out
or
shl
fcomp
int3
test
hlt
repnz
inc
fldcw
mov
inc
sahf
aad
add
xor
not
int3
push
lods
pusha
sbb
xor
cmps
je
pop
retf
xor
sahf
enter
pop
cmps
(bad)
(bad)
(bad)
hlt
xor
je
mov
fwait
lods
inc
adc
xchg
xchg
scas
add
(bad)
cmp
mov
retf
enter
xchg
adc
dec
xlat
cmc
out
rol
cld
cmp
mov
mov
dec
xchg
mov
and
sub
xor
pop
jmp
adc
dec
pop
loop
ja
mov
or
jecxz
clc
or
das
or
rol
sbb
les
push
les
cmp
inc
dec
push
mov
or
neg
cmp
call
jmp
bound
adc
and
dec
adc
jmp
addr16
xor
push
call
adc
push
mov
or
es
or
fnop
jg
inc
data16
fist
xchg
cdq
out
cld
and
sub
mov
xchg
mov
pop
loop
adc
xchg
mov
lock
adc
mov
(bad)
out
ficom
test
daa
pop
maxps
xchg
jmp
xor
cs
(bad)
cmp
sbb
hlt
(bad)
in
or
adc
dec
cli
aam
jmp
int3
es
addr16
adc
lods
leave
pop
xlat
mov
jo
pop
pop
lock
xor
jmp
(bad)
test
pop
fmul
fidivr
mov
adc
sbb
mov
mov
and
mov
cmps
sbb
loopne
out
xor
xchg
jecxz
xor
fadd
stos
push
icebp
lock
xchg
dec
adc
in
add
mov
pop
dec
scas
rcl
mov
mov
xchg
(bad)
repnz
outs
sbb
pop
and
lods
test
adc
mov
sub
adc
iret
adc
xor
ds
arpl
xor
jae
push
add
in
or
adc
jge
adc
mov
ins
popa
out
cmp
jnp
inc
or
cld
movs
stos
jbe
jle
jl
fs
inc
and
sti
inc
test
adc
std
bound
cmp
cmps
cmp
jge
push
add
inc
mov
ins
jecxz
std
adc
mov
mov
adc
out
inc
push
adc
inc
sbb
add
push
push
aam
add
adc
cmp
stc
add
in
pop
punpckhdq
ins
and
out
mov
stos
mov
jge
pop
mov
pop
pushf
(bad)
std
adc
xchg
jae
out
mov
adc
and
popa
or
push
push
dec
ret
push
xchg
sub
mul
inc
sbb
inc
retf
call
xchg
sti
adc
or
mov
addr16
adc
test
cmp
adc
das
jl
daa
pop
clc
pop
hlt
stos
adc
out
xchg
cmp
mov
into
push
pop
leave
adc
icebp
xchg
pop
dec
mov
out
movs
inc
adc
pop
xchg
cmps
and
iret
adc
(bad)
shr
in
adc
adc
adc
mov
(bad)
jmp
mov
jnp
add
out
adc
scas
ja
adc
in
(bad)
adc
fbld
or
inc
sub
int
movs
unpcklps
iret
adc
imul
mov
xchg
enter
fwait
repnz
aas
adc
xchg
dec
ds
lods
sahf
in
and
iret
mov
sbb
shl
unpcklps
in
push
xchg
adc
int
inc
loop
arpl
pop
ins
dec
adc
das
cmps
std
inc
and
and
mov
cli
sub
jge
data16
sbb
or
lods
or
xor
hlt
xor
jmp
sti
popf
les
adc
das
ds
pop
ret
pop
adc
icebp
out
xchg
mov
mov
leave
int
fcom
cs
cmp
mov
pop
fcom
and
iret
push
(bad)
xchg
xor
stos
adc
outs
loopne
xor
(bad)
addr16
out
jecxz
jbe
cmp
xor
add
jge
adc
or
adc
setns
ja
popa
add
push
daa
sbb
lahf
or
jo
adc
push
ins
mov
adc
int3
inc
sar
push
pop
lods
cwde
and
iret
mov
mov
adc
(bad)
shl
rcpps
in
and
jl
addr16
inc
cmps
out
adc
aas
mov
fistp
push
cmp
outs
inc
sbb
fmul
adc
adc
adc
inc
pop
repnz
repz
mov
(bad)
cmc
sub
xchg
fisubr
rcl
or
imul
sbb
in
adc
outs
repz
lods
push
(bad)
leave
call
stc
pop
dec
aas
push
lahf
arpl
xchg
retf
leave
pop
jg
xor
out
iret
adc
jno
jmp
inc
or
mov
pop
nop
jmp
daa
add
pop
aam
out
repz
push
cmp
les
jg
adc
iret
inc
push
out
cmp
adc
scas
sub
push
outs
lea
and
push
xchg
shr
jge
and
iret
adc
fisubr
movs
out
or
push
retf
adc
lods
nop
sub
mov
movs
cli
adc
mov
push
es
int3
adc
xchg
unpcklps
sub
pusha
imul
inc
mov
dec
add
ret
sbb
fild
and
loopne
outs
adc
das
mov
mov
mov
in
gs
unpcklps
pop
pop
cmp
jmp
mov
sbb
mov
dec
iret
sub
xor
test
fadd
in
loop
pop
movhps
je
retf
nop
sar
add
or
loope
mov
inc
shrd
cmps
fs
ins
fnsave
(bad)
adc
mov
(bad)
sub
je
adc
adc
(bad)
into
rcr
aam
xchg
cli
xchg
xchg
fistp
jno
adc
out
lock
popf
in
(bad)
cmps
fs
cmps
out
in
xchg
rol
sbb
xchg
push
xor
gs
into
dec
push
sub
pop
push
xchg
adc
pop
push
inc
cmps
add
jae
jo
pop
mov
hlt
push
loope
repz
mov
mov
cmc
dec
(bad)
adc
jmp
inc
(bad)
test
icebp
or
in
out
sub
enter
imul
add
adc
and
ret
int3
or
inc
or
out
mov
in
je
es
popa
out
adc
xchg
push
ins
and
cs
xor
mov
and
add
dec
add
ds
and
sub
xor
dec
(bad)
xor
jle
(bad)
in
dec
iret
xchg
cmp
xchg
xchg
ficom
(bad)
sti
mov
sbb
pop
push
or
or
adc
cmps
ins
push
xchg
mov
xchg
int3
(bad)
in
idiv
fld
and
test
adc
xchg
unpcklps
ds
movs
aam
js
or
mov
mov
shl
shl
cmps
mov
adc
lock
inc
sbb
xchg
fsubr
out
and
ds
movs
mov
lock
push
cmp
or
adc
jle
or
in
and
sahf
das
fild
call
cmp
out
adc
adc
in
cdq
adc
push
dec
dec
jl
sbb
rol
fcomp
and
or
pop
out
xor
aaa
push
fs
xchg
jmp
and
adc
and
push
retf
repz
fucom
test
push
xchg
outs
adc
shl
jne
and
push
aam
pop
inc
lea
movs
sub
loope
movs
inc
push
outs
adc
sbb
push
out
dec
mov
cmp
imul
dec
(bad)
jge
test
fidivr
cld
popa
in
adc
outs
retf
and
pop
out
mov
dec
ja
jno
js
and
push
cmps
dec
or
adc
and
scas
cmp
adc
js
(bad)
arpl
or
outs
jb
sbb
and
lock
push
in
push
mov
jl
adc
stos
std
adc
enter
push
xor
add
adc
xchg
pop
out
int
mov
dec
and
out
mov
je
fdiv
jl
adc
pop
jne
mov
or
ja
add
shl
adc
into
sbb
rcl
shr
xor
cwde
xchg
les
fbstp
xlat
outs
clc
add
mov
pushf
pop
mov
sbb
out
push
lds
movs
not
loopne
ins
adc
mov
fcmovnb
push
int3
jbe
mov
push
dec
lea
jp
cmc
je
push
adc
pop
push
mov
clc
mov
jb
les
mov
sub
out
adc
ja
ins
inc
stos
mov
inc
ins
lock
inc
push
das
push
mov
rol
inc
dec
xchg
mov
adc
lahf
sbb
dec
sbb
pop
stos
retf
pop
sahf
addr16
inc
dec
stos
mov
jp
sbb
cmc
(bad)
stos
push
mov
push
div
pop
lock
aad
adc
mov
sub
repz
popf
aam
fild
into
pop
repnz
or
mov
fdiv
lock
les
pop
sub
xchg
jb
cmps
aam
stos
push
cmp
cld
xchg
es
dec
cmp
movs
jmp
mov
fist
cs
adc
(bad)
fcom
mov
mov
sub
das
adc
cs
or
(bad)
xchg
push
push
arpl
adc
mov
xor
js
adc
rep
ins
or
push
ins
and
and
in
pop
fsub
adc
in
cs
add
movs
push
inc
std
(bad)
in
jle
rcr
ret
dec
add
and
in
mov
xor
adc
(bad)
scas
pushf
mov
(bad)
lock
out
jo
inc
fcom
push
xchg
or
mov
mov
call
bound
in
and
xchg
mov
stos
push
pop
xchg
jecxz
adc
mov
into
test
xchg
pusha
cmp
sbb
in
jnp
adc
pop
retf
imul
addr16
add
and
jae
sbb
add
imul
xchg
loop
les
daa
iret
adc
fs
mov
cli
mov
int
movs
in
inc
adc
aam
retf
jb
adc
ficomp
dec
ret
test
xor
mov
shr
add
pop
sub
js
(bad)
cmp
jbe
inc
in
out
push
jae
into
mov
and
jno
mov
test
adc
repz
push
sbb
shr
adc
call
adc
lock
sbb
fisubr
ss
mov
(bad)
jl
adc
out
stc
xlat
popa
adc
fwait
jle
movs
push
fld
je
mov
iret
adc
push
or
sbb
mov
add
(bad)
push
pop
or
es
xchg
jno
add
adc
out
xchg
and
inc
dec
adc
scas
xchg
dec
sub
xor
add
neg
add
lds
xchg
xor
mov
and
adc
cdq
rol
mov
cmp
sbb
aaa
push
rcl
test
xchg
ret
inc
in
jnp
sub
ins
dec
or
loop
push
imul
adc
and
(bad)
and
xor
loope
sbb
leave
shr
jmp
jge
or
rcl
add
jno
lds
out
(bad)
mov
iret
aaa
adc
add
sar
cmc
out
adc
push
addr16
lahf
es
cli
push
mov
mov
xchg
call
outs
adc
sbb
test
adc
push
pop
sahf
loope
inc
cli
(bad)
adc
adc
xor
cmc
adc
cld
(bad)
adc
jl
push
mov
mov
dec
or
mov
dec
fucomp
aas
cld
adc
sbb
push
rcl
int3
mov
out
and
out
fstp
jns
pop
jl
pop
sbb
push
sbb
pop
adc
and
out
fst
push
and
mov
dec
pop
in
lahf
ins
aam
mov
ja
adc
add
sbb
das
mov
in
repnz
sub
push
popf
inc
adc
inc
inc
and
pop
push
xor
loopne
mov
inc
sub
pop
or
push
add
and
mov
xor
popa
sub
test
pusha
cmp
lds
in
jmp
dec
mov
push
xor
out
movs
in
sti
xchg
sub
cmp
pop
jne
mov
adc
inc
dec
dec
xlat
xor
inc
adc
(bad)
inc
outs
adc
add
fistp
test
mov
shl
inc
mov
nop
adc
xlat
sub
rol
movs
xlat
sbb
dec
xor
push
mov
jo
int
fwait
adc
cdq
and
adc
mov
call
scas
clc
push
xor
mov
push
push
and
aam
fstp
imul
in
out
push
cli
aam
icebp
cmps
aad
push
mov
dec
jle
mov
sbb
xchg
sub
ja
sub
xchg
mov
and
mov
adc
sar
pop
pusha
jg
je
dec
sbb
imul
iret
cwde
or
cmc
pop
mov
loopne
mov
dec
test
(bad)
push
shl
jg
iret
xlat
adc
cld
movs
sbb
sar
les
pushf
jp
cmps
and
or
mov
xor
jmp
scas
sbb
popf
inc
mov
mov
out
xlat
aam
and
adc
cmp
arpl
cli
lods
gs
sub
rcr
dec
scas
push
sbb
inc
xor
adc
test
add
stos
jnp
(bad)
mul
jne
cmp
imul
cdq
adc
fisubr
mov
hlt
add
add
shl
dec
mov
ins
cli
jmp
push
in
xchg
and
ss
test
cmp
icebp
adc
push
in
sbb
sub
xchg
adc
pop
dec
iret
pop
fs
adc
icebp
xor
adc
retf
fldenv
xchg
and
jl
rcr
cmp
push
xchg
ds
clc
fs
hlt
daa
pop
sub
fst
sbb
cmp
jp
adc
cwde
mov
adc
mov
push
pop
into
or
adc
mov
jno
out
fist
aad
scas
jbe
out
imul
loopne
rcl
in
xor
adc
and
aad
xchg
bndldx
sahf
pop
mov
sbb
inc
mov
test
adc
mov
bts
or
push
sbb
mov
pop
jmp
mov
or
lock
dec
sub
cmp
in
pop
outs
rol
test
inc
aas
scas
mov
cld
aad
lods
mov
ficom
repnz
mov
adc
rol
hlt
pusha
sahf
sbb
push
retf
rcr
aas
loop
push
fcom
cld
or
ret
cli
shl
mov
fmul
mov
adc
popf
je
xchg
movs
ficom
xor
jne
mov
adc
or
sbb
adc
cmp
in
inc
pop
addr16
jmp
repz
shl
xchg
into
push
mov
dec
outs
xor
jmp
xor
das
cmc
adc
ret
int3
fist
push
adc
push
jecxz
xor
int3
in
push
je
add
and
ret
dec
inc
je
fnstcw
cmp
adc
repz
cli
xchg
pop
std
push
xchg
es
adc
dec
xchg
imul
sbb
iret
cmps
xchg
inc
retf
ss
jg
mov
jecxz
das
(bad)
pop
jge
jb
and
xchg
test
fwait
sbb
sub
(bad)
arpl
aam
dec
fiadd
out
dec
hlt
int3
dec
lahf
pop
arpl
mov
imul
out
cdq
push
movs
out
and
retf
addr16
popf
call
add
pop
dec
pop
and
(bad)
and
scas
lods
(bad)
aad
or
and
in
retf
add
rcr
out
sbb
inc
pop
cld
sbb
out
xchg
adc
dec
ret
stc
icebp
lods
adc
movs
dec
dec
sbb
aas
jg
lea
mov
iret
or
out
jmp
imul
adc
fistp
clc
xchg
addr16
punpcklbw
out
lds
aam
fdiv
mov
ret
xchg
(bad)
repz
xchg
jp
mov
and
rol
xchg
ret
test
adc
push
jle
stos
add
scas
adc
(bad)
mov
sub
jno
and
(bad)
mov
popf
loop
cwde
mov
and
mov
cli
cmp
lods
pop
adc
hlt
or
pop
dec
clc
imul
adc
test
mov
in
adc
jo
je
adc
les
test
push
outs
and
pop
xchg
adc
(bad)
pop
mov
xchg
call
std
sar
jge
pop
das
mov
hlt
cs
stos
pushf
jae
pop
adc
(bad)
mov
ficom
dec
loope
dec
shl
pop
imul
daa
mov
adc
push
sbb
aaa
push
add
jl
and
out
xchg
mov
cs
adc
sub
pop
adc
call
retf
js
popa
and
hlt
out
jnp
cmp
mov
push
inc
push
scas
xchg
adc
xor
or
add
lods
mov
jle
dec
adc
jae
jb
pop
ret
add
cmp
xchg
jo
or
sub
in
movs
mov
dec
dec
mov
adc
les
inc
xor
pushf
mov
les
push
nop
pop
xor
test
cdq
sar
inc
mov
adc
adc
movs
cdq
repz
add
push
xchg
(bad)
out
pop
mov
out
push
add
ss
jmp
(bad)
mov
xor
aad
std
loope
mov
aaa
pusha
cwde
call
jb
and
adc
mov
loopne
pop
loopne
and
and
cwde
(bad)
ins
or
add
test
jne
loop
ret
push
call
je
add
loope
(bad)
or
mov
pop
rcl
out
loope
cmp
fwait
add
pushf
movs
lock
push
xchg
in
cmps
pop
call
stc
push
into
xor
adc
clc
mov
cmc
sbb
(bad)
out
cmp
scas
xchg
lods
sbb
xlat
fwait
in
jmp
(bad)
push
cwde
push
xor
enter
pop
push
inc
nop
outs
aam
sub
cmps
xor
out
pop
xchg
push
jmp
(bad)
loop
adc
(bad)
cdq
shl
push
and
not
test
in
cli
lahf
and
xlat
xor
push
push
pop
cmp
call
xchg
jmp
jo
test
and
mov
ror
popf
mov
je
movs
and
add
inc
ds
fisub
ret
xchg
jbe
shr
jge
sbb
ins
push
jo
mov
xchg
mov
and
loop
xchg
clc
dec
addr16
adc
sbb
pop
push
ins
push
inc
xchg
scas
cmp
add
jl
dec
in
imul
dec
mov
retf
push
mov
or
out
hlt
iret
mov
pop
stos
adc
popf
push
ja
pop
mov
and
test
mov
xchg
rcl
loop
sub
ss
and
lods
les
jo
addr16
ins
inc
and
pop
mov
and
stos
sbb
mov
pop
or
inc
jl
dec
adc
push
popf
xchg
xchg
gs
(bad)
jne
jo
out
lock
loopne
adc
repz
ins
pop
xor
and
aam
mov
push
jne
xor
xchg
test
push
icebp
pusha
add
xor
adc
fmul
or
pop
xchg
mov
adc
iret
push
cmp
adc
sbb
hlt
das
pusha
aaa
adc
xchg
stc
pop
add
push
add
mov
mov
ja
mov
idiv
test
aam
jae
sar
mov
and
mov
and
lock
(bad)
adc
je
ret
fimul
and
loop
jecxz
adc
fsubr
xchg
es
jo
bnd
mov
xor
call
xchg
(bad)
cmp
dec
adc
jns
cli
pop
sub
fsubr
dec
outs
lds
inc
in
fincstp
adc
icebp
call
cli
mov
add
imul
(bad)
sbb
adc
cli
or
jle
(bad)
cmps
jl
sbb
sti
out
shl
xchg
mov
or
aaa
retf
mov
inc
jle
test
mov
stos
push
ret
not
or
adc
ret
out
mov
xchg
xchg
mov
sti
adc
cmps
jmp
in
lahf
dec
aas
push
xchg
xchg
add
push
mov
push
sub
dec
(bad)
adc
fs
retf
add
or
sbb
push
retfw
jbe
push
cmps
lea
push
fcom
dec
sbb
and
dec
jle
fadd
retf
test
jmp
push
sub
fisttp
lock
push
movs
jle
and
sbb
fcomip
inc
dec
fdivr
push
test
out
stc
push
mov
push
sub
inc
movhps
inc
sti
jecxz
retf
sahf
xchg
test
mov
jmp
adc
cmp
(bad)
pop
adc
sbb
inc
ja
loop
adc
and
mov
pop
pop
ja
add
cmc
push
jmp
call
inc
cdq
call
mov
(bad)
mov
sbb
cmp
out
(bad)
(bad)
cmp
sub
adc
fwait
pop
adc
leave
(bad)
int
xor
lock
cwde
inc
inc
popf
push
mov
cs
ror
jmp
mov
mov
iret
cmp
and
jo
imul
push
add
jae
pop
inc
fwait
repz
out
adc
in
mov
cwde
fild
retf
push
adc
(bad)
or
mov
adc
retf
sbb
adc
dec
pop
adc
xchg
cmps
repnz
adc
ret
jb
mov
cld
repz
dec
cmp
pop
adc
cdq
mov
and
xchg
add
add
in
ss
mov
dec
mov
push
add
mov
(bad)
adc
add
sub
mov
jbe
mov
lahf
imul
mov
push
add
xor
lahf
loopne
mov
xchg
adc
mov
fild
mov
pop
out
je
xchg
in
clc
retf
add
sbb
dec
movs
sub
mov
push
sbb
xchg
mov
es
jb
mov
rol
jnp
mov
cmp
xor
cdq
mov
ja
add
sahf
adc
cmp
adc
mov
dec
je
push
adc
mov
jo
and
cld
out
test
hlt
and
lea
and
ret
ins
or
jnp
adc
jg
pop
inc
xchg
sbb
cli
mov
push
std
in
lock
cmp
nop
jbe
clc
or
daa
stos
lds
xchg
cli
sub
push
fdivr
in
adc
dec
das
push
inc
popa
mov
xchg
ss
lahf
es
movs
pop
add
ins
js
repnz
lahf
mov
lock
in
lahf
cmps
cmp
mov
jnp
push
ja
mov
push
mov
and
pop
pop
cmp
mov
ds
es
adc
pushf
dec
sub
sbb
lahf
inc
in
add
push
dec
retf
xchg
push
push
xor
fldpi
ror
ror
pushf
test
add
xor
les
int3
rcr
or
mov
out
push
mov
inc
mov
dec
movs
xchg
dec
xchg
out
push
xchg
add
fsubr
cwde
int3
add
int3
leave
or
sub
push
popf
fmul
lods
jge
movs
inc
cld
mov
xchg
cmp
inc
sahf
int3
pop
push
aaa
mov
mov
pushf
std
and
in
retf
sbb
cmp
out
aad
sbb
xchg
xchg
xlat
mov
dec
push
ds
lods
sbb
jl
out
test
fcmovnbe
sbb
or
or
std
xchg
mov
and
jo
clc
fwait
mov
enter
movs
ins
push
int
js
shl
adc
daa
jmp
in
adc
repnz
cmp
out
adc
scas
mov
pop
in
(bad)
mov
inc
stos
inc
sbb
retf
call
sar
jp
and
push
rcl
jo
adc
adc
mov
xor
cli
stos
xchg
call
jmp
adc
pop
inc
or
ins
dec
xor
scas
hlt
fcom
add
int3
xor
(bad)
sbb
mov
bound
pop
cwde
call
and
ds
xchg
pop
push
es
test
in
add
pop
jb
fistp
cmp
mov
dec
mov
mov
mov
pop
pop
(bad)
xor
xor
pop
fild
fst
inc
xchg
fstp
inc
sbb
imul
aas
ficomp
mov
scas
retf
pop
push
push
and
mov
ja
or
call
mov
jle
xchg
adc
sub
retf
outs
cmp
push
mov
into
adc
outs
pop
jmp
out
outs
data16
ficomp
sub
and
xchg
jg
pushf
push
adc
das
or
mov
sub
mov
jne
or
rol
dec
lods
stos
mov
pop
jnp
push
or
retf
in
mov
and
cmps
loope
add
lods
dec
cld
add
in
js
jo
ins
mov
sbb
ficomp
inc
pop
xor
hlt
pop
lock
jmp
repz
xor
int
fist
gs
leave
xchg
movs
jle
outs
cmp
mov
adc
or
jb
add
ins
pop
push
push
mov
gs
aas
push
sbb
add
push
sub
or
pop
dec
stos
cwde
inc
push
push
adc
jae
pop
test
in
shl
cmp
sub
mov
fcmovnu
jge
push
imul
adc
enter
lods
call
adc
sub
mov
jl
adc
ret
dec
sar
push
shl
push
(bad)
(bad)
fsub
arpl
pop
or
xchg
mov
rcr
ss
pop
sbb
xor
out
and
fsub
cmp
rcl
fidiv
test
movs
sbb
cmp
lock
mov
popf
bound
push
js
xchg
xor
xchg
rcl
mov
outs
cmp
out
xchg
ja
sbb
popf
xor
push
iret
jmp
lods
les
hlt
adc
cmp
(bad)
adc
inc
or
repnz
xchg
push
call
jle
movs
test
mov
inc
ror
out
ret
xor
or
push
dec
adc
xchg
dec
cmp
retf
sbb
ds
sbb
dec
xor
jg
ret
adc
repnz
mov
push
jns
bound
cwde
push
ins
xchg
stos
aam
xchg
popa
mov
fs
dec
icebp
mov
cmc
pop
push
lock
push
jmp
adc
xchg
sbb
lea
data16
jb
adc
xchg
jnp
push
iret
adc
and
or
pop
add
sbb
or
data16
jmp
in
sub
xor
jo
mov
mov
je
mov
(bad)
arpl
mov
push
pushw
stos
push
adc
stos
in
jp
retf
movs
retf
sbb
xchg
xor
out
push
ins
mov
lock
mov
stc
adc
push
daa
out
lds
adc
and
lea
into
xchg
inc
push
retf
adc
fisub
cmp
(bad)
(bad)
je
add
daa
cmp
adc
xlat
(bad)
shl
pop
or
sub
xor
xchg
mov
dec
test
in
mov
rcr
sbb
rcr
in
imul
dec
jp
test
test
pop
and
popf
test
loope
ss
push
mov
ror
cmp
cmp
push
(bad)
sbb
xchg
ja
adc
mov
movs
es
loope
cmc
in
test
or
jo
mov
loop
mov
ror
fdiv
int3
into
sahf
jp
les
fld
sub
mov
or
jno
sbb
add
icebp
mov
inc
les
add
call
sbb
pop
pop
xchg
push
movs
inc
fwait
mov
adc
mov
outs
repz
clc
cmp
push
mov
or
dec
(bad)
and
pusha
xchg
ret
push
fist
enter
(bad)
cmp
pop
jmp
retf
iret
mov
aam
push
mov
fsubrp
push
inc
push
xchg
aam
mov
(bad)
fs
mov
fiadd
movs
mov
mov
cmp
test
adc
mov
cmps
fld
adc
repz
push
mov
int3
xchg
pop
mov
mov
add
sub
rcl
test
lods
out
xchg
mov
ins
leave
adc
je
in
fwait
sbb
pop
inc
paddq
aas
sbb
cmp
sbb
xor
lods
inc
inc
or
in
loopne
or
ds
mov
neg
and
aad
xchg
and
lods
ret
xchg
and
shl
aas
sbb
pop
pushf
push
adc
jae
(bad)
cmc
xchg
xor
in
add
add
xchg
mov
in
lods
es
mov
adc
add
cli
and
adc
rcr
cdq
ja
sbb
mov
sbb
push
retf
adc
test
fnstcw
sbb
arpl
rcl
sub
cld
jp
adc
repnz
leave
jl
fcom
les
cmp
lock
add
xor
cli
fsub
out
add
mov
in
stos
push
arpl
mov
adc
rcl
imul
cmp
jmp
jo
dec
sbb
mov
iret
adc
mov
sub
xchg
(bad)
cwde
pusha
addr16
or
aas
mov
cli
jmp
dec
mov
xor
adc
(bad)
in
les
and
sar
sbb
dec
adc
daa
push
out
imul
in
shl
push
cmps
xor
mov
dec
aad
jmp
or
fs
sub
fsubr
aad
lock
xor
mov
push
sbb
push
int3
in
adc
(bad)
in
add
out
fisub
int3
pop
(bad)
pop
adc
pop
nop
enter
adc
(bad)
idiv
inc
pop
dec
xor
or
or
icebp
ja
dec
test
mov
xlat
cmps
sahf
jl
and
idiv
pushf
and
jmp
jg
jmp
or
dec
adc
inc
mov
or
(bad)
(bad)
sub
or
inc
loop
sbb
mov
and
scas
in
movs
js
clc
inc
fs
outs
jns
adc
mov
add
int3
fdivr
push
mov
cmp
adc
and
push
pop
fiadd
dec
test
bound
adc
call
xchg
lods
inc
cmp
popf
inc
xlat
sti
and
ins
(bad)
cmp
es
inc
jmp
and
sub
jl
inc
sbb
aam
loopne
add
out
xchg
fcomi
cmc
and
sti
jecxz
push
and
lahf
enter
adc
imul
sbb
call
in
pop
push
jmp
shr
adc
lock
inc
adc
sbb
in
or
xchg
sub
mov
into
jno
adc
stos
add
shl
ret
xor
jp
jecxz
push
cli
fcom
stos
retf
aad
out
push
cdq
xchg
(bad)
adc
fsubr
and
mov
add
call
pop
outs
mov
add
repnz
lods
inc
popa
int
aam
cmp
rcl
test
add
fidivr
adc
pushf
ja
jne
gs
push
pop
jno
arpl
adc
or
aam
in
adc
pop
ja
ds
mov
or
sar
jle
inc
xchg
cwde
lods
mov
(bad)
adc
clc
(bad)
aas
addr16
xor
mul
fist
dec
dec
mov
push
dec
xchg
jle
mov
popa
push
adc
(bad)
repz
xchg
sub
retf
scas
(bad)
cwde
cmps
outs
cmp
dec
fwait
add
daa
retf
ins
test
jmp
dec
(bad)
mov
adc
add
shr
stos
sar
fmul
lea
push
cmp
imul
add
in
sbb
pop
inc
outs
xor
clc
sbb
int
imul
xchg
adc
push
jnp
add
aas
jl
cmp
sub
aam
or
jecxz
push
push
and
cld
push
adc
les
push
mov
xlat
push
inc
pushf
test
call
xchg
and
stos
fdiv
fdivr
js
das
(bad)
pop
(bad)
fsubr
and
(bad)
into
movs
aam
cli
in
imul
imul
iret
dec
mov
xor
dec
xchg
xchg
je
add
xor
addr16
popa
jecxz
and
mov
ins
aaa
cmps
call
nop
inc
daa
cdq
test
adc
stc
outs
pushf
test
(bad)
cmp
inc
adc
mov
add
dec
ret
popf
xor
sub
sar
cmps
out
xchg
push
mov
ja
xchg
and
stc
mov
pushf
mov
mov
ins
adc
add
cmp
(bad)
aam
cmp
xor
adc
xchg
jo
push
outs
adc
jne
push
mov
sub
push
ja
sub
jl
cld
or
dec
addr16
and
sbb
movs
bound
adc
jae
jnp
xor
into
mov
jmp
hlt
pop
add
mov
ss
and
ret
and
push
fxch
and
add
push
jns
cmp
inc
test
inc
ss
xor
aad
mov
daa
cmc
xor
test
xchg
xchg
mov
dec
push
push
fadd
adc
iret
out
sub
push
aam
cmp
inc
adc
mov
jle
js
mov
adc
pop
scas
call
jb
add
xchg
cmp
xor
cmp
retf
adc
outs
mov
adc
mov
es
div
out
mov
mov
xchg
ror
push
neg
jnp
out
addr16
or
(bad)
int3
jmp
mov
sar
push
xchg
adc
push
aam
loopne
call
mov
push
es
retf
mov
adc
xchg
add
(bad)
stc
mov
out
jnp
aad
in
cmp
jl
cmp
mov
add
popa
dec
ret
add
mov
and
and
jnp
cs
inc
xor
cmps
arpl
cmp
adc
cmc
pop
es
jbe
mov
adc
cmps
sahf
xchg
div
jo
sbb
adc
cmp
int3
and
sbb
jmp
lahf
sbb
sbb
or
cmps
mov
shr
cmps
rol
xor
int3
loop
push
enter
mov
int3
rcl
push
fld
mov
pop
fs
push
and
pop
mov
cmp
pinsrw
test
dec
jg
pop
mov
loopne
jp
lds
xchg
pop
or
scas
loop
das
loop
rcr
xlat
dec
loopne
cld
rol
loopne
dec
xchg
mov
mov
mov
cwde
pop
daa
mov
pop
cmp
xchg
sbb
pop
test
push
(bad)
retf
leave
sub
lds
and
lods
push
movs
arpl
pop
cli
pusha
pop
jg
rol
push
push
ins
js
stos
dec
push
push
xchg
sbb
xchg
jns
out
and
dec
add
test
retf
adc
int3
xchg
add
add
and
xor
inc
mov
mov
sahf
rcr
movhps
adc
movs
(bad)
bnd
push
sti
ss
sub
sbb
ds
xchg
jae
jl
push
imul
adc
outs
jle
mov
shl
push
adc
sbb
fild
push
xor
gs
es
outs
stos
adc
jno
mov
pop
(bad)
sbb
jl
and
mov
adc
xor
cwde
adc
stos
pop
std
xchg
xchg
xchg
and
cmp
(bad)
mov
nop
pop
cwde
xor
sbb
out
loop
ds
enter
jl
jmp
(bad)
mov
sub
arpl
int3
mov
jg
xchg
ins
stos
xor
mov
sbb
mov
fcom
es
leave
jge
dec
sbb
bound
and
dec
xchg
int3
jae
or
sub
sbb
push
fist
jp
fisub
adc
inc
push
in
mov
dec
cld
or
pop
pop
mov
or
scas
sub
inc
sbb
test
xchg
pop
popa
adc
in
js
inc
jne
sbb
out
repnz
fsub
call
ins
outs
jecxz
cmp
cmp
and
xor
test
cmps
lods
movs
test
enter
ss
jno
push
repnz
sbb
inc
cmp
xor
jle
adc
xchg
test
pop
in
rcr
fwait
or
aam
cmp
adc
daa
cmp
pop
push
outs
xchg
jecxz
je
and
adc
fucomp
retf
xor
xchg
nop
adc
cmp
add
mov
in
je
cmp
shl
xchg
movs
add
push
arpl
push
repnz
adc
jle
or
inc
ins
les
add
inc
pop
pop
mov
push
imul
mov
mov
mov
mov
dec
and
(bad)
adc
cmp
popf
and
enter
xchg
mov
sub
add
sub
sub
dec
adc
loop
push
ins
push
push
cwde
or
nop
pop
ds
xchg
pop
mov
cmp
icebp
adc
test
repz
xor
pop
xchg
and
xor
cmps
movs
sbb
xor
cmp
rcr
ds
inc
hlt
adc
pop
stos
and
or
xchg
lods
fstp
jno
fwait
xlat
dec
adc
jne
repz
imul
dec
in
out
lods
xchg
xchg
and
fdiv
arpl
push
cmp
fstp
inc
outs
sbb
adc
jle
add
in
(bad)
jge
scas
test
add
imul
xchg
daa
inc
adc
inc
dec
popf
bound
imul
xchg
aam
loopne
xlat
cmp
sbb
fistp
call
ret
xchg
imul
movs
jle
in
lahf
aad
dec
add
add
push
inc
or
push
imul
clc
sub
mov
iret
call
sbb
in
cmps
xor
pop
adc
cld
adc
fbld
push
mov
push
je
rol
sbb
dec
xor
pop
jb
xchg
jmp
push
aam
inc
dec
test
icebp
fcomp
sbb
arpl
dec
sub
das
cmp
stos
sar
adc
jnp
sahf
rol
xchg
mov
xor
fcom
ins
mov
js
(bad)
stos
mov
movs
push
push
pop
adc
retf
mov
jne
pop
out
pushf
cmp
outs
jmp
mov
pop
adc
fld
ficomp
out
lahf
dec
mov
jmp
mov
les
jne
and
xchg
adc
and
idiv
adc
and
and
hlt
xchg
push
sub
add
xchg
sbb
(bad)
mov
mov
dec
mov
stos
dec
enter
rcr
imul
jmp
loope
test
fild
mov
ret
retf
cmp
xchg
stos
mov
add
push
pop
shl
aad
sub
out
push
pop
add
je
dec
cmp
push
sbb
adc
pushf
(bad)
movs
aas
dec
ins
jmp
adc
add
jno
sub
mov
and
sti
pop
and
int3
mov
(bad)
je
adc
adc
call
std
aam
xchg
fisub
and
jbe
lods
add
rcr
aam
or
test
ret
lods
(bad)
sahf
inc
stc
push
mov
in
repnz
shl
xchg
adc
div
sti
xchg
xchg
rcl
jg
add
test
sbb
or
mov
pop
cmp
adc
jecxz
push
lods
pop
or
mov
popf
jl
adc
retf
xor
lea
xchg
jp
in
add
push
movs
retf
mov
out
push
xor
dec
mov
and
adc
inc
adc
mov
xor
inc
(bad)
pushf
iret
jp
pop
mov
in
push
adc
mov
push
and
retf
and
lds
lods
cmps
pop
hlt
popf
xchg
clc
add
ss
jl
mov
js
xor
nop
fyl2xp1
fist
and
ror
add
push
icebp
rcl
jecxz
ins
adc
clc
add
ss
int
sbb
gs
or
lahf
jmp
jbe
push
adc
ret
stc
sbb
or
in
fild
pop
fbstp
scas
adc
in
clc
mov
adc
mov
cmp
adc
ja
xor
icebp
clc
push
add
push
(bad)
sbb
pusha
push
fadd
jecxz
ja
fidivr
in
addr16
(bad)
pop
mov
adc
jl
adc
bound
xchg
movs
int
xchg
jmp
xor
movs
icebp
adc
or
fs
es
adc
lds
cwde
adc
aam
push
ss
xchg
adc
cs
or
xor
mov
fild
js
sub
pusha
les
push
xchg
icebp
xchg
mov
in
push
jg
gs
pop
lahf
sub
adc
xchg
mov
addr16
inc
adc
adc
jns
xor
test
jg
xchg
shr
push
xlat
mov
dec
adc
int3
cmp
sbb
shl
sbb
pop
clc
lods
inc
or
es
xor
adc
inc
call
das
sub
out
outs
push
lock
xchg
and
scas
cmp
dec
add
push
pop
adc
sub
adc
push
cli
retf
pop
and
aam
adc
int3
outs
jmp
adc
or
lods
jmp
daa
in
(bad)
es
inc
fldenv
xchg
fisttp
stos
xchg
sbb
in
or
jg
loope
outs
sbb
retf
xchg
adc
ret
iret
push
lods
pop
outs
mov
sub
add
scas
mov
push
lahf
imul
addr16
nop
das
cmps
out
xor
pop
jmp
test
out
outs
adc
and
iret
xchg
pop
add
aam
pop
xchg
mov
prefetcht1
outs
bound
adc
and
pusha
inc
aad
jae
aas
call
inc
mov
push
push
outs
addr16
hlt
or
adc
sbb
mov
inc
in
inc
or
cmp
call
mov
dec
add
(bad)
pop
dec
leave
sub
out
or
push
or
xor
leave
pop
bts
and
inc
daa
hlt
outs
fidivr
push
add
rol
lahf
xor
mov
fiadd
pop
nop
cmps
sbb
iret
unpckhps
loopne
mov
in
mov
sbb
imul
(bad)
adc
pusha
iret
out
retf
mov
(bad)
in
pop
(bad)
mov
inc
adc
xor
cmp
(bad)
ins
jle
or
cmps
add
cmp
sub
or
js
adc
out
js
sub
lods
cwde
in
and
iret
or
xchg
out
outs
adc
dec
fimul
or
adc
icebp
cmp
xchg
cmp
adc
mov
addr16
jg
xchg
outs
inc
imul
in
xchg
loopne
outs
gs
pop
inc
add
cmp
push
sbb
add
in
pop
lods
xchg
cmp
or
cld
outs
adc
pop
rcr
stos
(bad)
xchg
xchg
and
int3
dec
mov
repnz
cmp
lahf
jae
cmps
xor
sbb
inc
jecxz
push
pop
ins
call
mov
sub
mov
pop
ret
daa
jb
push
adc
(bad)
out
lock
outs
mov
cmp
ins
shl
ret
out
aaa
jg
or
cwde
and
je
pop
sub
sbb
(bad)
fcom
cmp
ret
xchg
das
mov
rcl
dec
push
push
lods
and
iret
clc
pop
xchg
daa
mov
xchg
mov
dec
adc
add
int
pop
inc
mov
jle
ficomp
pop
dec
adc
cmps
adc
inc
(bad)
loopne
outs
add
adc
or
adc
es
pop
in
inc
fs
cvtps2pi
push
mov
(bad)
(bad)
add
das
(bad)
pop
inc
outs
adc
sbb
int
adc
xor
or
adc
ja
(bad)
sub
add
push
out
into
mov
push
adc
cmp
mov
cli
or
and
pop
or
push
adc
dec
stc
les
fisttp
iret
jmp
mov
outs
cmovle
mov
xchg
cmp
in
adc
call
nop
inc
push
cmps
push
outs
mov
inc
lods
js
scas
sub
lods
jae
movs
add
adc
(bad)
fdivr
lahf
test
sub
mov
sub
mov
or
dec
sbb
outs
in
outs
dec
inc
mov
retf
(bad)
sbb
push
outs
imul
lea
(bad)
pop
ror
adc
lods
push
pop
loop
mov
adc
sbb
fnstcw
adc
cs
(bad)
popa
adc
push
lahf
fwait
cli
add
sub
fldln2
iret
mov
jmp
xchg
ret
lods
cmp
clc
push
sar
adc
or
inc
adc
aad
xchg
jae
jns
(bad)
or
movs
dec
sub
out
scas
cmp
push
sar
mov
cmp
mov
add
adc
out
xchg
and
pop
fisubr
fcomp
pop
xor
pop
std
je
pop
push
hlt
scas
adc
dec
in
pushf
lds
in
cli
adc
jbe
(bad)
rcl
push
xchg
shr
bound
sbb
hlt
mov
adc
xchg
jb
cmp
je
mov
adc
push
jno
(bad)
mov
mov
fs
in
scas
aam
fwait
jge
popf
aam
mov
adc
fnop
das
cmp
mov
aad
imul
imul
ja
or
dec
loopne
sbb
jno
mov
(bad)
nop
pop
mov
loopne
iret
and
jb
jbe
adc
mov
(bad)
hlt
mov
call
push
(bad)
jnp
and
jo
add
inc
test
retf
arpl
mov
enter
loop
not
repz
pop
cmp
shr
(bad)
mov
push
cmp
and
movs
cdq
dec
mov
imul
jnp
addr16
das
ret
sahf
adc
adc
into
frndint
xchg
add
mov
adc
add
test
aaa
popa
movs
test
push
aam
out
unpcklps
mov
movs
rcl
arpl
lods
xchg
or
push
in
or
pop
cmp
adc
adc
dec
push
(bad)
stc
or
pop
adc
cld
aaa
pop
pop
fsubr
pop
xchg
xor
call
loop
movs
push
or
out
pop
je
adc
adc
mov
mov
adc
pop
jmp
cmps
imul
adc
je
pop
jg
dec
dec
aam
push
fnstcw
bound
sbb
data16
cmp
pop
jecxz
push
(bad)
arpl
adc
sbb
loopne
(bad)
mov
adc
and
std
out
test
ds
push
cmp
fiadd
jle
in
xor
add
ja
cwde
adc
xor
cmps
popf
mov
adc
mov
cmp
pop
enter
int3
jle
sbb
sbb
cwde
sbb
sar
mov
cmps
cmc
test
bound
push
jnp
and
jns
sub
mov
pop
outs
and
cs
jnp
(bad)
(bad)
and
cmps
std
daa
repnz
rol
push
hlt
pushf
xchg
fwait
pop
call
adc
add
mov
adc
icebp
call
imul
in
or
adc
jns
sbb
rcl
ficomp
les
ret
sub
push
sbb
push
addr16
jb
in
add
call
jmp
adc
in
gs
mov
xor
mov
jmp
push
(bad)
cmc
or
jmp
jnp
mov
das
mov
inc
cmc
repz
push
adc
imul
cmp
fadd
lods
in
test
push
mov
loopne
ds
loop
imul
daa
mov
cmp
add
xchg
aas
or
pop
into
push
xchg
in
ss
push
mov
adc
or
xor
xchg
adc
jb
ins
mov
ret
test
hlt
jmp
(bad)
out
mov
icebp
adc
cmp
sbb
inc
cmps
xlat
jmp
ret
adc
mov
mov
ret
aam
push
and
sbb
mov
mov
in
inc
icebp
xor
ins
mov
xor
out
imul
and
loop
adc
adc
shl
imul
adc
mov
in
into
into
xor
stc
adc
idiv
hlt
repz
sti
fs
rcl
xchg
adc
mov
hlt
mov
inc
adc
repnz
not
pop
out
cmp
imul
jl
adc
cmps
push
fidivr
adc
ficom
test
pop
and
in
pop
sub
pop
aaa
jmp
or
mov
pop
sti
xchg
mov
outs
repz
push
inc
ret
cmp
clc
and
mov
jmp
jecxz
lahf
test
int3
xchg
hlt
in
out
ret
push
sbb
jne
ret
rcr
stos
mov
into
int3
cs
sti
fs
ins
les
je
jmp
int3
xor
inc
cwde
mov
pop
rcl
sbb
or
push
adc
sub
cmp
or
or
push
mov
and
sbb
mov
add
xchg
adc
clc
stos
jge
adc
hlt
data16
lahf
fdivp
das
jmp
dec
mul
adc
sub
jmp
lods
(bad)
cmp
mov
and
div
push
test
pop
adc
aad
into
shl
and
(bad)
int
retf
cmps
in
test
in
xor
sbb
inc
retf
inc
ins
ds
add
test
jbe
ret
push
daa
hlt
or
sbb
cmps
in
add
mov
mov
pop
inc
dec
or
shl
adc
cmp
int3
aam
adc
outs
pop
jle
push
in
lea
daa
cmps
scas
dec
jb
mov
cmps
jl
shr
sbb
adc
loopne
xor
cwde
test
popf
xchg
mov
or
jne
adc
sub
fsub
lock
jge
cdq
inc
xchg
adc
ss
xor
std
(bad)
ins
inc
fadd
int3
loopne
cmp
scas
ret
mov
pushf
sub
sbb
cwde
push
pop
into
sbb
stos
dec
in
test
std
mov
rol
sahf
or
and
push
inc
mov
inc
inc
sub
movs
cmp
cdq
in
in
popf
xchg
push
adc
xchg
data16
xchg
push
mov
movs
push
jae
jns
add
adc
pop
push
lods
pop
aaa
add
(bad)
aas
xchg
fwait
xchg
call
cmp
add
aad
(bad)
icebp
and
leave
call
add
xor
(bad)
mov
mov
xchg
(bad)
dec
mov
movs
adc
sub
or
and
dec
(bad)
adc
inc
pop
or
aad
add
in
adc
mov
push
xchg
mov
or
or
hlt
jae
add
adc
(bad)
aad
push
push
call
imul
inc
mov
mov
adc
pop
ror
push
pusha
int3
adc
pop
dec
scas
dec
jno
mov
push
repnz
stc
dec
cwde
popa
(bad)
adc
lahf
stos
xor
pop
fwait
add
repz
xor
adc
test
adc
xor
adc
mov
test
pop
push
scas
in
mov
popa
lods
add
aaa
jne
loop
repz
xor
loop
xlat
jge
push
hlt
dec
aaa
repz
add
inc
js
add
fdiv
sar
fucomp
nop
push
repnz
xor
adc
test
adc
movs
sub
fnstcw
xchg
push
repnz
adc
cmp
dec
loope
mov
pop
enter
and
or
dec
inc
call
push
sbb
mov
mov
loopne
pop
stos
xchg
daa
adc
fisttp
cmp
and
dec
or
imul
adc
out
pop
dec
popf
lea
xor
mov
dec
pop
cs
repz
add
fimul
adc
adc
push
call
push
add
inc
add
pop
rcl
outs
cmp
cli
icebp
arpl
sbb
lock
push
aam
inc
mov
cmp
xor
jge
cwde
xchg
arpl
ds
add
ror
loopne
pop
push
out
dec
hlt
clc
out
(bad)
jg
retf
je
mov
add
or
push
adc
mov
or
adc
fnop
fs
test
push
adc
adc
adc
dec
inc
jmp
pop
fild
jmp
(bad)
push
dec
dec
arpl
sub
pop
mov
(bad)
ds
fucomi
push
jmp
sub
outs
int3
or
(bad)
pop
pop
pop
jl
push
cld
hlt
mov
sbb
cmc
rol
sbb
popf
xchg
cli
mov
xchg
dec
xor
fistp
mov
mov
push
in
jecxz
add
loopne
adc
mov
sub
adc
push
adc
mov
or
mov
add
arpl
jno
ret
xchg
std
jecxz
fs
addr16
dec
push
ins
adc
pop
psrlq
push
mov
cmp
and
test
jo
push
stc
js
retf
push
xchg
add
push
aam
sar
cli
adc
xchg
out
sbb
pop
into
jmp
cwde
(bad)
aam
jl
test
pop
stc
inc
xchg
pushf
sbb
or
mov
mov
lahf
pop
sub
xchg
icebp
mov
inc
push
mov
xor
fwait
and
test
loop
aam
adc
dec
int
mov
and
cmp
sahf
jne
inc
iret
jbe
aad
cdq
sahf
cmps
aad
inc
or
push
shl
hlt
pop
add
loopne
jecxz
call
fnstenv
dec
call
in
and
test
je
sub
inc
mov
jge
stos
pop
sbb
std
rcl
enter
pop
or
xor
scas
lgs
add
rol
sbb
test
xor
(bad)
pop
push
push
or
pusha
loope
outs
xor
xchg
dec
rcr
pop
mov
stos
ins
xchg
pop
ficomp
jo
adc
dec
mov
lods
call
jge
mov
adc
pop
fstp
sbb
jns
cmp
hlt
sbb
inc
(bad)
adc
stc
or
mov
mov
call
jae
push
clc
aam
fs
adc
adc
les
lock
movs
sub
mov
fst
pop
sub
popf
adc
ffree
jno
sbb
ins
jo
call
in
std
mov
cdq
lock
cmp
cld
not
jae
fld
in
xchg
das
sahf
sbb
adc
xor
dec
mov
mov
sbb
loope
or
test
sbb
cmp
bound
(bad)
adc
js
and
add
xchg
pushf
(bad)
cmc
pop
pop
mov
ror
jle
lock
in
out
inc
stos
and
rcl
mov
inc
sub
xor
sbb
hlt
mov
js
adc
mov
adc
pop
and
cmp
xor
sub
ror
(bad)
out
ja
or
stc
sbb
cwde
aaa
(bad)
pop
sar
ret
adc
push
loope
jge
mov
scas
cdq
pop
sub
inc
bound
int
hlt
movs
(bad)
out
imul
adc
mov
xchg
add
inc
cmc
inc
jnp
pushf
and
sbb
or
sbb
pop
int3
mov
adc
add
jmp
test
adc
les
loope
ret
ss
and
nop
sbb
aad
imul
jmp
ins
mov
rol
add
movs
fs
adc
jecxz
ins
pop
and
scas
pusha
loop
push
sbb
data16
mov
icebp
in
repz
int3
movs
mov
nop
cmp
ficom
retf
cwde
pusha
jg
xchg
sti
mov
mov
add
test
pop
xchg
neg
jg
add
inc
pop
(bad)
stc
jmp
sar
inc
mov
in
call
lods
ficom
pop
sti
cmc
adc
pop
(bad)
call
xor
mov
add
loop
(bad)
push
cdq
ins
adc
mov
dec
lock
push
out
xor
add
mov
jmp
retf
push
out
fdivr
pop
dec
fdivr
aaa
pop
retf
aaa
in
adc
repnz
pop
adc
inc
jg
push
xlat
jmp
mov
mov
pushf
cmp
fst
adc
add
adc
inc
and
cmp
jb
lods
xchg
push
mov
leave
push
retf
pusha
mov
ins
xchg
add
sar
fistp
and
imul
je
sbb
xchg
in
iret
lahf
xchg
das
pop
cwde
xor
nop
push
mov
sti
scas
clc
enter
je
jmp
pop
or
call
adc
xchg
dec
loopne
inc
int
(bad)
scas
aad
cmps
fld
dec
(bad)
cmc
dec
or
mov
sub
cmps
stos
sub
aam
jle
and
aam
add
or
dec
xor
sti
aad
arpl
stos
or
retf
sbb
mov
hlt
hlt
aam
pop
push
add
xlat
enter
push
jmp
mov
dec
retf
daa
retf
sbb
retf
xchg
cli
xchg
cmp
addr16
pop
leave
fisub
ret
repnz
pop
retf
dec
or
test
cmp
or
data16
gs
into
push
hlt
add
lahf
in
out
scas
out
clc
xchg
lods
rcl
out
enter
xchg
push
cs
xor
mov
in
sahf
(bad)
mov
loopne
cmp
cmp
(bad)
add
(bad)
xor
test
rcr
cwde
cmc
inc
xor
into
scas
seto
popf
adc
or
call
jne
mov
ret
imul
into
sub
inc
sbb
sub
dec
mov
mov
mov
dec
or
shl
sti
mov
ficom
imul
xchg
loop
or
pop
mov
das
dec
add
dec
mov
sbb
dec
mov
fmul
or
pop
pushf
mov
add
mov
cmp
push
out
and
xor
call
inc
pop
mov
mov
add
push
mov
adc
or
cdq
loop
mov
xchg
fwait
adc
sar
lds
mov
ret
jl
and
aad
pop
bound
clc
mov
dec
shr
and
pushf
add
adc
adc
pop
adc
ins
fs
mov
ret
and
add
out
cmp
clc
repz
stc
jb
scas
adc
adc
dec
mov
fild
out
jmp
pop
aas
in
mov
aam
call
mov
push
mov
mov
test
push
adc
mov
or
loopne
sub
je
pushf
adc
and
push
shl
pop
cmps
add
push
inc
fld
xor
nop
mov
daa
add
iret
retf
add
lods
adc
mov
pop
test
int
xchg
mov
cwde
or
in
dec
mov
les
std
cmp
cmps
push
das
jno
mov
sbb
add
lock
es
pop
jnp
adc
adc
mov
js
xor
jmp
mov
fisttp
pushf
scas
sbb
pushf
in
inc
movs
pushf
dec
xchg
daa
jmp
ret
or
push
xchg
lock
xchg
sbb
dec
aam
push
pop
stos
call
xchg
mov
inc
ins
or
loope
jne
sbb
pop
inc
push
add
aas
xor
cmp
int3
xor
and
jle
leave
std
ret
adc
in
int
in
dec
or
dec
retf
out
mov
sar
inc
sub
arpl
xor
sbb
push
in
int3
std
fcmove
xor
ds
pop
xor
sbb
repz
dec
cmp
and
sbb
ror
jmp
in
enter
cmp
and
cmp
aas
cmp
repnz
jo
ja
or
cmp
dec
push
adc
push
fucomi
cmps
fsub
retf
(bad)
aam
imul
(bad)
ins
movs
fwait
inc
inc
xchg
or
cld
xchg
das
ret
in
ret
in
test
inc
inc
cwde
xor
jge
aad
lds
test
push
xchg
jmp
js
(bad)
push
or
xor
and
mov
sbb
mov
or
mov
retf
xor
mov
iret
adc
imul
xchg
test
(bad)
clc
adc
xchg
push
sub
push
mov
sub
jge
pop
loope
addr16
xor
or
adc
(bad)
jbe
jnp
jle
popa
push
cmps
les
test
sahf
fadd
cmps
adc
(bad)
mov
mov
add
shl
ins
and
imul
into
test
retf
mov
xchg
push
jnp
mov
pop
adc
jno
out
test
or
push
push
pushf
fnsave
pop
adc
ret
push
aam
mov
push
ins
(bad)
aad
inc
icebp
adc
imul
jns
sbb
pushf
(bad)
daa
in
es
jbe
pop
inc
adc
and
lods
lahf
adc
pop
repnz
std
push
mov
adc
aam
mov
add
sti
inc
and
mov
(bad)
shl
ins
dec
inc
inc
in
cmp
add
lds
bound
movs
push
ins
add
or
(bad)
push
adc
into
and
fadd
in
push
push
adc
rcr
inc
mov
push
push
mov
mov
or
sbb
int
or
ins
sub
adc
div
push
std
aam
sbb
call
sub
pop
ficom
push
adc
loopne
cwde
nop
fadd
ret
and
or
pop
and
ror
push
test
dec
inc
sbb
stos
int3
inc
xlat
sbb
xchg
les
sub
xor
cli
add
xlat
vunpcklps
sbb
cmp
repnz
stc
fs
adc
adc
and
adc
pushf
cmc
aad
or
aaa
aam
mov
mov
jmp
sub
xchg
mov
inc
sbb
mov
sub
(bad)
jbe
or
adc
jmp
rcr
adc
ins
ins
rcl
mov
dec
call
pop
xor
scas
paddsw
ror
fnstcw
sbb
rcl
popf
cld
xchg
xchg
pop
adc
ja
xchg
aam
stc
inc
pushf
and
inc
add
fiadd
scas
or
sbb
or
(bad)
adc
cdq
int3
test
aam
imul
inc
add
cmps
stos
nop
push
retf
imul
call
adc
pop
push
(bad)
in
mov
mov
or
out
xor
fisubr
int3
mov
test
aad
push
mov
retf
dec
mov
cmps
cmp
data16
add
and
xchg
push
pop
jmp
dec
pop
dec
mov
add
pop
and
inc
cmp
add
jb
cmc
sti
xlat
xchg
imul
mov
scas
inc
or
pop
push
ret
mov
adc
ret
xor
sbb
push
cmp
ret
jmp
xchg
dec
push
int3
aas
cmp
jmp
fisub
test
cmp
and
ret
adc
out
outs
push
mov
and
or
jns
adc
lods
jne
mov
jmp
test
add
fst
jg
dec
adc
bnd
inc
push
inc
popa
adc
test
cwde
jbe
in
push
ja
ins
popa
xchg
mov
aam
adc
out
adc
fimul
in
xlat
and
pusha
inc
and
pop
iret
xchg
jge
out
adc
movs
ds
repz
ss
pop
adc
cld
lds
push
pushf
add
add
mov
xchg
inc
dec
lock
fidivr
mov
mov
jbe
pop
popa
jmp
adc
cmp
enter
cmp
test
inc
or
out
in
sbb
leave
cmp
imul
xor
adc
inc
sbb
pop
test
jno
adc
pop
sbb
cmp
ja
iret
and
sub
loopne
mov
cmp
inc
xchg
push
cmp
hlt
popf
mov
pop
or
les
push
xor
cmc
fsub
int
add
xor
adc
xchg
inc
and
inc
test
adc
imul
adc
sbb
jp
inc
ret
xchg
push
add
mov
fsub
adc
dec
mov
ret
shl
xor
fild
aam
into
nop
pop
push
pop
fdivr
jmp
pop
jmp
adc
and
out
jo
je
sbb
sub
dec
xchg
mov
js
(bad)
movs
xor
popf
jg
sbb
adc
mov
inc
xchg
in
std
xor
push
dec
mov
dec
cmc
and
add
adc
call
push
call
ins
xor
fisttp
sbb
mov
fnstenv
inc
dec
icebp
xchg
xor
mov
sbb
push
cmp
movs
mov
adc
ret
pushf
add
push
sub
adc
sub
scas
adc
call
hlt
sbb
movs
int
adc
pop
xchg
shl
sub
leave
ins
inc
and
add
sbb
lea
es
adc
scas
mov
or
adc
sbb
int3
or
adc
in
inc
fisub
and
lods
or
adc
push
add
mov
or
sar
push
add
push
fild
add
jmp
mov
sub
xor
loopne
shr
daa
out
pushf
(bad)
fiadd
stos
fsub
js
scas
neg
xor
add
adc
and
adc
jne
lea
rol
into
push
mov
mov
ds
outs
xchg
jae
ins
in
int3
dec
and
mov
shl
adc
rep
leave
jg
cs
push
xchg
fist
outs
fsub
mov
sar
in
popf
mov
or
lods
mov
sbb
sub
cmps
xchg
cmc
cmp
or
sbb
lahf
(bad)
xor
int3
jnp
loopne
sbb
jbe
pop
mov
jmp
rol
sbb
sbb
push
inc
dec
js
pop
and
push
add
pop
sbb
push
arpl
xchg
dec
int
fsubr
(bad)
fs
sbb
ins
(bad)
int3
mov
out
je
xchg
sub
inc
cs
adc
xor
or
mov
fld
lahf
data16
test
mov
xor
scas
inc
adc
or
sbb
clc
xor
sbb
cdq
stos
xor
hlt
sub
mov
popa
cmp
movs
push
cld
or
(bad)
in
jecxz
mov
xor
and
test
xor
push
push
mov
jge
adc
lock
push
sub
gs
in
mov
retf
aam
mov
(bad)
sahf
leave
imul
push
aam
out
inc
movs
in
adc
jmp
mov
add
scas
and
pop
test
adc
add
mov
pop
xchg
pop
test
dec
pusha
cmp
xlat
adc
lahf
mov
ins
loopne
cmps
adc
xor
int3
adc
stos
sbb
sub
inc
into
adc
outs
mov
sahf
or
adc
cmc
jmp
mov
bts
sub
mov
push
mov
adc
ja
rol
jno
inc
xchg
and
push
js
lds
xchg
pop
loop
rcl
(bad)
push
mov
jb
adc
loope
dec
loopne
dec
cmps
mov
out
pusha
ds
inc
sub
xlat
dec
dec
pop
sbb
lahf
ins
inc
mov
sub
mov
mov
inc
push
cmc
dec
retf
sar
out
push
and
loop
ins
inc
loopne
sbb
pop
pop
mov
mov
add
jns
push
adc
or
pusha
adc
shr
cwde
xchg
adc
dec
xchg
and
test
xchg
adc
int3
or
jg
or
xor
call
nop
adc
aas
or
cmc
pop
xor
inc
aam
cld
cmp
jnp
mov
(bad)
cmp
or
cmp
and
arpl
ins
sbb
enter
pop
xchg
push
mov
xor
ss
dec
hlt
add
mov
shl
push
cdq
js
adc
pop
loopne
fwait
aam
adc
mov
cmc
out
jb
push
mov
adc
mov
es
push
add
or
mov
jecxz
repz
pop
int3
ds
pop
push
sbb
sub
loope
mov
push
(bad)
or
aaa
add
add
and
mov
in
cmp
push
add
out
sub
jae
pop
out
hlt
xor
cld
sbb
gs
mov
jne
sbb
adc
add
stos
push
xchg
and
mov
imul
jle
ret
cli
mov
or
and
jmp
adc
out
push
xor
adc
imul
sahf
sbb
mov
sub
icebp
movs
mul
movs
ss
sbb
(bad)
xchg
xchg
adc
jg
inc
add
jb
dec
jbe
adc
sub
xchg
adc
adc
adc
pop
xor
enter
xchg
push
xchg
call
dec
push
push
pop
jns
mul
mov
inc
int
fldenv
dec
test
adc
inc
fcom
out
mov
ficom
imul
adc
jne
fsubr
in
mov
cmps
adc
in
stc
in
and
js
xchg
outs
cmp
adc
dec
aam
in
push
fcom
inc
mov
mov
xor
popf
mov
in
jb
outs
jno
add
jne
mov
loope
xchg
adc
cmp
std
jmp
dec
sub
or
je
retf
int
fistp
xor
or
rol
and
inc
jle
ret
sti
dec
das
push
aad
xlat
setae
fcomp
popf
cmp
pop
xor
out
jnp
test
hlt
addr16
cmp
or
xlat
int3
arpl
fs
retf
sbb
pop
cmp
fimul
sbb
mov
adc
movs
mov
call
pop
aam
out
mov
add
dec
add
loop
aas
repnz
adc
clc
push
aad
imul
repz
add
daa
mov
adc
jl
jge
ds
cmps
in
loopne
and
fs
mov
cwde
out
pop
adc
xor
xchg
mov
outs
pop
fiadd
add
sbb
add
jmp
and
repz
pop
adc
ss
in
cmp
(bad)
fwait
mov
mov
bound
fistp
retf
test
icebp
jmp
adc
xor
fld
or
neg
xchg
inc
js
adc
int3
push
je
aas
in
and
pop
outs
adc
push
cli
into
pop
stos
ins
inc
jmp
mov
add
or
pusha
icebp
shl
mov
nop
dec
js
iret
pop
mov
adc
int
pop
adc
xchg
push
push
sub
mov
iret
or
cmp
ret
ss
call
fdivr
xchg
jb
xchg
test
shl
in
mov
push
in
fisub
adc
mov
ret
push
sub
lock
pop
or
arpl
retf
hlt
xchg
ds
in
pushf
sbb
mov
mov
(bad)
call
out
test
sbb
out
add
popa
pop
sub
xor
addr16
sub
dec
jmp
inc
jmp
jns
lahf
push
cld
rcr
pop
imul
inc
push
xchg
int3
sbb
dec
loope
add
fs
(bad)
mov
fistp
sbb
jbe
pop
push
mov
pop
in
pop
or
out
push
adc
call
imul
and
(bad)
aas
ss
or
pop
mov
cdq
add
call
xor
and
das
imul
or
add
adc
add
mov
add
push
adc
sbb
mov
adc
in
les
mov
dec
mov
int3
xchg
mov
repnz
adc
je
dec
(bad)
fidivr
adc
push
push
bound
adc
es
jle
adc
xor
mov
push
je
imul
xchg
add
(bad)
retf
test
(bad)
out
(bad)
jne
add
aam
lahf
cmp
xchg
push
xchg
jecxz
scas
pop
(bad)
push
add
mov
push
dec
jp
adc
imul
hlt
dec
cmps
rcl
mov
das
int
inc
es
je
aam
adc
mov
aad
cmps
cs
pop
pop
imul
ror
pop
push
test
mov
mov
pop
adc
push
sbb
shr
sub
adc
sbb
adc
mov
xchg
int3
sar
arpl
lahf
das
mov
mov
mov
xor
push
out
push
inc
push
pop
lds
scas
in
mov
adc
out
jnp
das
jns
pusha
adc
mul
mov
mov
or
inc
push
jae
in
adc
sbb
dec
lahf
xchg
idiv
sbb
inc
push
loop
push
push
mov
aam
test
sbb
xchg
inc
mov
adc
fcomp
or
iret
enter
in
push
pusha
adc
mov
xor
adc
add
xchg
daa
(bad)
sbb
push
aam
or
mov
adc
repz
das
push
cmp
adc
sbb
pop
push
mov
sti
stos
adc
push
les
push
xchg
add
in
(bad)
mov
ds
nop
jns
push
loop
xchg
adc
and
sub
hlt
sbb
mov
xor
sbb
mov
jmp
fistp
call
lea
fisubr
mov
shl
mov
adc
in
stos
inc
xor
xlat
adc
out
popa
adc
iret
scas
mov
repnz
mov
ins
adc
mov
mov
pop
or
mov
mov
dec
cld
sbb
adc
jp
add
into
scas
movs
cmp
les
dec
ins
adc
lock
(bad)
jmp
jg
xor
rcl
out
arpl
repnz
sbb
mov
xor
add
adc
xchg
mov
mov
je
sub
hlt
scas
push
call
push
loopne
fdivr
test
xchg
addr16
fild
loop
mov
enter
loopne
adc
movs
fidiv
mov
adc
lds
arpl
fsub
call
rcr
xor
jmp
xor
rcl
add
test
hlt
sbb
in
loopne
repnz
mov
fistp
adc
les
adc
or
sub
lods
dec
retf
mov
adc
shl
shl
test
in
mov
adc
adc
jne
jl
sbb
inc
dec
ins
aam
aam
add
xchg
lds
jo
(bad)
in
mov
pop
adc
int
not
mov
xchg
call
jle
ds
dec
mov
xchg
cmp
fs
mov
cmp
dec
and
adc
cmp
mov
sti
imul
ret
pushf
and
data16
adc
cli
or
cmp
push
push
lods
iret
jo
call
mov
dec
mov
cmp
xor
or
jb
jb
test
out
loope
scas
sub
(bad)
or
push
jmp
push
enter
test
repz
mov
or
out
cmps
mov
adc
call
xor
out
pop
adc
repz
or
(bad)
adc
add
or
and
sbb
lock
cld
out
pop
jbe
inc
jno
cmc
inc
out
sub
pop
and
sti
cmp
loop
push
(bad)
dec
std
xlat
aaa
xor
popaw
adc
jb
je
movs
prefetcht0
not
aad
shr
jmp
shl
push
imul
sbb
push
jp
out
add
in
lahf
out
mov
mov
add
mov
mov
mov
out
xchg
test
dec
call
or
call
fnsave
loop
imul
push
push
out
enter
push
sub
push
adc
movs
pushf
pop
xchg
aad
out
pop
stos
adc
pop
nop
mov
sub
adc
push
or
jae
sub
push
test
loop
int
ins
xchg
pop
push
mov
aam
jno
mov
sub
sbb
ret
mov
sbb
lock
xchg
adc
js
push
fsub
fild
aam
rol
adc
or
add
sbb
xlat
or
std
jo
xchg
mov
inc
cmp
xor
retf
repnz
jl
adc
gs
or
xchg
pop
cli
fsub
out
push
adc
or
jg
stos
mov
cdq
push
rcl
test
ins
lea
sbb
dec
mov
jge
imul
cmp
sqrtps
mov
add
adc
int
fwait
inc
pop
pop
and
mov
adc
add
pop
mov
dec
fwait
xchg
push
call
sar
push
int
cmp
clc
inc
sbb
pop
fsubr
test
fisttp
movs
fwait
jle
iret
ins
adc
(bad)
xor
mov
adc
nop
das
pop
mov
add
cmp
ds
inc
adc
scas
sar
fadd
xor
cwde
movs
mov
fsubp
test
inc
hlt
pop
bound
push
icebp
aad
outs
aas
clc
pop
adc
inc
cli
cmp
arpl
cmp
movs
nop
stc
test
push
xor
cmp
shl
push
repz
mov
jge
cs
jo
adc
sar
loope
jg
jle
out
mov
mov
imul
cmp
pop
packuswb
test
xchg
ficom
ins
sub
test
loope
sub
in
popf
movs
addr16
add
std
pushf
push
mov
ret
rcl
aad
cmp
adc
mov
dec
push
xor
cmp
and
adc
cmc
inc
dec
imul
push
arpl
adc
aas
add
pop
loop
iret
cli
push
jmp
test
ret
xchg
icebp
pop
jo
cmp
add
adc
adc
cmp
daa
dec
dec
sbb
out
jge
xor
adc
mov
arpl
jg
cmp
mov
lods
les
dec
mov
or
mov
mov
mov
and
mov
adc
out
into
je
sahf
loop
retf
inc
jo
(bad)
frstor
adc
adc
clc
push
xor
ja
adc
push
loopne
mov
adc
(bad)
xlat
sbb
jmp
test
push
or
sbb
std
push
jns
mov
pop
rdmsr
je
dec
cld
or
mov
jmp
mov
mov
push
push
(bad)
jmp
inc
ds
jmp
jge
push
inc
sub
mov
enter
mov
je
sbb
in
push
push
(bad)
xor
neg
add
rcr
mov
push
outs
jno
xor
das
adc
inc
sbb
pop
push
adc
cmp
sbb
and
pop
push
stos
inc
mov
leave
and
mov
or
cs
jno
push
imul
pusha
mov
or
xchg
sar
loope
hlt
mov
mov
xchg
pusha
adc
cwde
jnp
jge
je
aad
out
adc
popa
stos
adc
fucomi
lock
out
in
adc
jno
lea
xor
pop
xchg
retf
mov
rcr
mov
xor
aam
std
arpl
add
fld
in
inc
adc
test
jnp
push
dec
cmp
lods
jmp
adc
jno
sub
xchg
sbb
cmps
adc
cmp
lods
movs
shl
adc
fs
push
mov
push
mov
in
test
ins
shl
mov
adc
jge
pop
push
repz
retf
(bad)
push
paddq
int
mov
in
daa
rcl
lock
push
pop
jmp
adc
imul
and
pop
push
or
hlt
cmp
dec
push
dec
cs
out
pop
sbb
clc
fidiv
pop
inc
dec
jmp
aas
cmp
pop
aaa
cmps
movs
and
fild
xchg
test
pop
repnz
ss
les
sub
mov
bound
int3
pusha
pop
cmc
mov
ins
xor
xchg
in
aas
jns
inc
(bad)
pop
mov
and
or
int3
clc
push
pop
ror
cdq
daa
xor
pushf
mov
dec
test
dec
adc
fscale
push
fistp
aas
ss
mov
mov
je
push
out
out
les
xchg
push
loopne
and
xchg
adc
hlt
out
push
sbb
shr
movs
in
jmp
fcom
xor
movs
xchg
fs
in
push
mov
lods
adc
mov
cli
mov
daa
sub
mov
add
lea
lods
fistp
scas
lock
mov
inc
(bad)
sbb
arpl
(bad)
mov
rcl
fdiv
add
mov
pop
mov
sbb
retf
stc
cmp
dec
xor
out
hlt
add
ja
enter
ret
addr16
adc
dec
call
ja
cs
mov
lahf
or
adc
xor
cmps
cmps
push
je
mov
add
xchg
ret
push
xchg
mov
jmp
inc
(bad)
ffree
aas
xor
jl
jg
fisub
mov
mov
mov
and
jns
aam
fs
push
dec
pop
ror
cmps
shl
int3
cmp
xor
push
inc
push
in
popf
adc
lods
call
dec
xor
xchg
xchg
cwde
add
cld
je
das
jbe
dec
mov
adc
int3
push
push
loop
xchg
retf
movs
add
stos
mov
sbb
into
int3
scas
aaa
and
stos
imul
dec
adc
leave
in
inc
sbb
aam
dec
jle
(bad)
retf
sub
movs
or
sub
or
popf
repz
ins
dec
adc
push
sbb
sub
in
push
adc
mov
jae
inc
retf
pop
lahf
inc
gs
sbb
sub
je
push
movs
into
push
das
out
les
xchg
addr16
adc
popf
daa
rol
push
push
xchg
pop
loopne
adc
and
lea
dec
xchg
call
mov
pop
js
mov
scas
imul
push
scas
rcl
dec
cmp
jns
or
xchg
shr
jno
or
neg
adc
idiv
dec
sbb
repz
cmp
jecxz
xchg
xlat
push
ss
push
loop
adc
lods
rcl
movs
in
jg
adc
pop
xchg
dec
inc
call
add
pop
inc
(bad)
dec
test
aad
std
ja
pop
ins
pop
cmp
cmps
fbld
cmp
out
xchg
mov
pop
push
adc
les
ss
pop
inc
sub
(bad)
push
adc
imul
dec
iret
lds
in
mov
sbb
in
xchg
fs
pop
and
retf
les
fld
or
mov
xor
xchg
mov
add
arpl
in
ret
shl
push
in
call
pop
push
or
adc
icebp
ins
xor
(bad)
jae
xchg
adc
cmp
sbb
loope
inc
add
pop
dec
adc
cmps
cmp
mov
mov
adc
sub
ins
int
mov
inc
add
pop
xchg
hlt
icebp
sub
add
jns
aam
ss
in
mov
movs
dec
test
dec
adc
jne
sub
rcl
and
adc
dec
and
lds
addr16
sti
push
xchg
dec
dec
int3
xor
xchg
or
sub
scas
hlt
scas
adc
jl
sbb
je
call
(bad)
cmp
sbb
jp
push
xchg
sbb
mov
dec
jge
scas
adc
loop
ins
and
repz
adc
shl
mov
cmps
pop
ret
xchg
test
adc
or
mov
shl
jle
mov
fsub
adc
mov
cmp
mov
fstp
inc
jecxz
(bad)
int3
ficomp
fdivr
mov
adc
fisttp
jmp
(bad)
mov
sbb
adc
pushf
jbe
movsx
rol
int3
xor
add
dec
stc
adc
(bad)
dec
adc
scas
mov
mov
pop
sahf
add
and
inc
out
lea
retf
xchg
ins
jnp
adc
aaa
jecxz
rcl
add
adc
mov
cmp
adc
sbb
repz
leavew
mov
retf
shl
test
addr16
dec
push
iret
or
sar
add
adc
int3
in
addr16
and
rcl
adc
retf
push
inc
loopne
movs
mov
(bad)
shr
jno
inc
cld
xor
jecxz
sbb
jbe
xor
stos
fcomp
adc
enter
pop
mul
into
fst
bnd
les
adc
jl
es
jae
sub
sbb
movs
mov
lods
xchg
pop
pop
push
mov
push
jecxz
pop
scas
fdivr
pop
fistp
mov
(bad)
fcmovne
jge
es
lea
imul
fcom
aam
ja
ins
iret
(bad)
jns
or
pop
sub
aam
inc
push
jge
adc
jmp
div
dec
js
fimul
adc
inc
sub
cmp
adc
cmp
sbb
frstor
je
adc
push
mov
push
push
stc
adc
mov
mov
pop
pop
stos
xchg
add
je
mov
and
sbb
fs
xor
fcom
dec
sbb
cli
nop
movs
jmp
adc
shl
cmps
adc
cmp
and
mov
pop
pop
pushf
sbb
pop
sub
adc
cmps
fsubr
stc
loopne
lahf
adc
sbb
cmp
ffreep
mov
add
mov
retf
adc
shl
(bad)
adc
add
aam
dec
and
mov
adc
cmp
xchg
test
push
pop
lahf
pop
mov
inc
xchg
mul
out
mov
jmp
xchg
lods
fsubr
inc
adc
lahf
pushf
mov
and
xor
mov
jne
push
pusha
mov
jae
push
adc
sbb
adc
scas
bound
icebp
ficom
push
adc
imul
xor
gs
pop
pop
inc
cdq
(bad)
scas
or
push
fwait
and
jnp
and
pop
ss
not
repnz
in
inc
dec
imul
pop
jnp
adc
ins
test
adc
daa
mov
mov
xlat
or
cmp
adc
in
jno
or
sub
pop
jne
cli
popf
adc
and
xchg
fdivr
fwait
mov
and
ins
je
(bad)
ret
lea
pushf
out
pop
call
lds
add
inc
adc
in
mov
or
in
adc
xchg
out
adc
sbb
daa
mov
pop
jmp
(bad)
fs
ret
(bad)
xchg
mov
add
mov
jecxz
mov
adc
ins
mov
in
lahf
push
push
push
jle
cmps
xor
mov
push
cwde
repnz
retf
fsubr
std
imul
in
dec
shr
jmp
aaa
inc
jo
or
in
and
mov
into
mov
adc
inc
add
push
sbb
shr
pusha
xor
aaa
xor
loope
call
stc
scas
mov
adc
imul
xor
mov
xchg
ja
aam
pusha
mov
imul
sub
popa
lds
repz
cs
hlt
inc
sbb
jecxz
cmp
adc
xor
bound
adc
cmp
popf
lock
adc
xor
pop
xor
ins
addr16
adc
adc
push
popf
test
call
add
jne
in
dec
mov
mov
jle
push
(bad)
pop
pop
push
in
dec
mov
aam
mov
adc
inc
pop
mov
jge
sbb
sbb
jmp
ret
adc
hlt
outs
gs
ins
adc
adc
or
push
repz
ret
stos
add
in
mov
xor
sub
pop
mov
sub
and
dec
gs
(bad)
iret
scas
ja
movs
pop
cwde
adc
out
lea
imul
(bad)
push
enter
(bad)
mov
mov
sbb
dec
mov
cmp
aaa
aas
inc
inc
aam
mov
adc
ins
scas
mov
add
sbb
xchg
repz
movs
in
loope
or
adc
mov
cmps
lods
test
dec
dec
push
jbe
(bad)
jbe
or
xchg
out
retf
clc
xchg
pusha
std
cmp
in
lock
mov
adc
jbe
pop
iret
push
retf
jns
in
jmp
fucom
bound
retf
das
and
stc
sbb
adc
repz
je
neg
jp
int
mov
push
cld
nop
xor
jae
or
adc
jb
mov
and
jo
mov
or
adc
adc
es
xchg
add
outs
aaa
inc
pusha
stos
adc
std
js
push
popf
dec
jns
das
jle
jnp
pop
mov
nop
pop
adc
adc
hlt
add
iret
ret
adc
mov
cld
xor
out
scas
inc
sbb
cli
imul
in
dec
test
je
pop
or
call
push
add
fstp
pop
push
cli
sar
sbb
cs
gs
xor
sbb
and
imul
inc
hlt
xchg
mov
inc
out
xchg
in
sti
jmp
addr16
mov
je
add
retf
xor
push
jne
xchg
movs
mov
inc
cmp
aaa
ins
inc
fadd
int
add
cmp
inc
cmp
push
add
xchg
xchg
add
adc
inc
pop
int3
ret
mov
inc
(bad)
sbb
adc
inc
mov
scas
lahf
xchg
movs
push
pop
mov
aaa
add
cwde
sub
mov
jmp
mov
in
fs
pop
(bad)
cdq
arpl
pop
mov
push
cmps
jmp
repnz
jmp
jl
inc
or
fld
fs
iret
shl
jae
sub
sbb
sar
mov
and
sbb
xchg
out
adc
xchg
xor
in
or
mov
add
fist
rol
sbb
adc
mov
ss
lods
sub
xchg
mov
rol
int3
jge
sti
push
pop
xor
jne
movs
xor
and
outs
(bad)
adc
pop
jae
and
mov
jl
neg
nop
fmul
ret
ins
gs
and
in
or
imul
clc
bnd
adc
loopne
lea
sbb
add
cs
leave
ffree
pop
aad
ds
mov
loop
xlat
fcmovbe
adc
sbb
data16
push
sti
fdivr
mov
das
pushf
xor
cld
adc
stc
sub
pop
inc
in
sahf
(bad)
fisttp
aam
xchg
ror
fadd
shr
push
cmp
je
sbb
fmul
div
inc
(bad)
ficomp
sbb
fs
ja
push
adc
pop
test
and
xor
jg
iret
or
repnz
cmp
hlt
fstp
jge
sbb
jmp
(bad)
movs
sar
push
fisubr
mov
adc
pop
int
fldenv
pop
dec
ins
or
jns
and
test
adc
sbb
scas
push
jecxz
in
sub
fisttp
sti
stos
not
lahf
sar
jo
mov
lock
icebp
fadd
mov
cli
sbb
xchg
cmp
fmul
pop
leave
sbb
adc
mov
loope
stc
fwait
sbb
pop
out
jo
fidivr
hlt
call
adc
mov
fistp
lea
sbb
pop
mov
or
xor
mov
adc
sub
aad
lds
pop
jb
adc
or
jo
dec
push
adc
fs
cli
xchg
adc
in
mov
jb
jmp
gs
cmp
pop
xor
jl
cs
inc
pop
loopne
out
(bad)
in
dec
pop
adc
sbb
push
cmp
xlat
ja
cmc
test
xchg
xchg
bound
test
jmp
sub
mov
in
rcl
dec
movs
or
adc
push
out
pop
add
bnd
adc
int3
xchg
call
xor
icebp
inc
jmp
retf
test
test
xor
pop
xchg
outs
sbb
sar
xchg
xchg
imul
loopne
in
inc
scas
xchg
xor
es
sbb
pop
push
cmps
jg
ins
jecxz
ja
and
xchg
iret
dec
jbe
adc
aas
mov
dec
dec
inc
push
xchg
nop
pop
ds
jmp
inc
push
pop
jle
adc
mov
repnz
pop
ret
int
jb
movs
cmp
popa
ins
jmp
cmp
xchg
mov
sbb
call
and
adc
jns
not
iret
in
add
push
daa
add
mov
jae
push
mov
jl
and
shl
arpl
in
retf
cli
adc
fst
gs
ret
mov
mov
mov
mov
test
or
xchg
push
fcompp
xor
std
repz
adc
push
repnz
dec
adc
cli
and
add
mov
out
mov
cli
ret
adc
pop
add
inc
xchg
sahf
lahf
adc
popf
adc
adc
cmp
mov
arpl
jg
(bad)
and
sti
popf
xchg
push
pop
popa
cmp
sub
push
sbb
sbb
cmp
stc
xchg
push
fcmovbe
push
jge
mov
mov
(bad)
mov
sbb
dec
sbb
pop
in
pop
add
div
push
nop
cmp
mov
sti
adc
in
std
rcl
xchg
jmp
mov
sbb
rcl
lock
js
jle
adc
iret
cmps
cmp
imul
rcl
ret
adc
fild
or
add
jne
and
adc
(bad)
jmp
loope
imul
(bad)
inc
push
jb
jo
les
stc
call
jae
mov
push
cli
pop
and
aam
das
mov
iret
push
mov
lods
cmp
stc
xchg
shr
imul
int3
adc
pop
scas
(bad)
imul
mov
test
addr16
push
sbb
out
adc
clc
ret
mov
in
test
pop
push
aas
adc
mov
or
xor
fwait
mov
nop
fst
push
pop
fidiv
push
test
int3
outs
ret
mov
das
push
mov
sbb
cli
movs
and
das
ss
aas
adc
jnp
lock
pushf
loop
pop
mov
cld
fsubr
aam
sti
out
sbb
loop
adc
popf
(bad)
push
sbb
jae
(bad)
cmp
xchg
je
cli
ja
push
add
xchg
(bad)
popa
call
clc
dec
and
push
adc
(bad)
cld
push
mov
jg
mov
imul
mul
inc
push
shr
pop
cmp
xchg
jle
push
or
ins
xchg
(bad)
or
cmovne
stos
inc
mov
adc
test
xchg
sub
adc
(bad)
jnp
and
in
imul
mov
sbb
lahf
sbb
gs
lds
sub
cmovnp
outs
mov
enter
pop
test
pop
js
jmp
adc
loop
adc
movs
mov
cmps
or
or
pushf
adc
add
mov
arpl
sbb
dec
mov
xor
mov
cmp
push
mov
dec
adc
xor
hlt
hlt
xor
jb
je
cmp
inc
xor
je
int3
and
lock
jg
je
dec
ins
mov
jge
jae
imul
push
push
out
(bad)
jl
stos
sbb
push
lods
pusha
fwait
in
pop
mov
xor
mov
sub
xchg
xchg
pop
std
xchg
adc
jo
cmp
xchg
mov
pop
test
test
ret
jmp
mov
lahf
int
pop
inc
inc
dec
retf
int3
adc
add
ss
sub
push
dec
test
into
mov
retf
inc
xchg
sbb
ret
mov
xchg
jecxz
mov
inc
jb
call
cmovno
ds
sbb
in
pop
jmp
xor
dec
inc
sub
test
mov
xor
mov
cld
hlt
clc
mov
lock
out
mov
xchg
pop
ins
pop
sbb
xchg
lods
sar
jl
adc
jb
call
cmp
aaa
sbb
mov
adc
push
jge
mov
push
sbb
inc
fmul
cmp
push
pop
mov
xor
mov
dec
aad
cmp
mov
dec
adc
je
pop
push
out
mov
jl
shl
fmul
and
shl
sbb
in
push
loop
adc
xchg
mov
cmps
jbe
sub
jmp
(bad)
xchg
cmp
movs
pop
xor
pop
adc
xor
inc
push
imul
js
pop
push
mov
adc
outs
add
xchg
sub
fwait
inc
cld
pushf
adc
sar
mov
cmp
stos
xchg
push
ja
icebp
shl
in
jge
ins
sbb
cmps
xchg
shr
clc
popa
clc
scas
jns
fwait
out
xchg
jl
adc
xchg
and
stos
adc
and
mov
pop
in
das
aad
jne
imul
push
out
les
add
pop
mov
aaa
inc
ret
test
xchg
xor
out
jae
mov
and
cmps
call
mov
sbb
or
popf
les
jg
mov
and
mov
movs
stos
adc
lods
push
int3
hlt
pusha
mov
sub
out
fsub
or
cli
xor
xchg
adc
or
repnz
test
adc
jnp
nop
jns
test
adc
sbb
jne
mov
adc
xchg
je
adc
mov
out
lods
cmp
mov
outs
adc
outs
xchg
sbb
mov
inc
cdq
xchg
push
jae
shr
(bad)
pop
pop
jnp
and
mov
cmp
ret
aad
bound
mov
ja
adc
dec
jp
push
das
mov
adc
adc
mov
retf
add
cmp
or
js
xlat
sbb
adc
cmp
mov
adc
scas
inc
sahf
inc
out
fadd
or
enter
pop
jns
adc
xchg
pop
fdiv
pop
sbb
lock
xlat
or
mov
test
lods
scas
mov
shl
sahf
test
push
jnp
ins
or
in
arpl
popa
call
xchg
push
es
jp
cmp
stc
test
lock
inc
or
xchg
enter
mov
dec
mov
popf
inc
jp
icebp
push
clc
cmps
dec
shl
mov
pop
lea
adc
jp
loope
add
xlat
into
jbe
adc
mov
push
xor
popf
cwde
js
jo
adc
adc
pusha
sub
test
iret
jge
or
jae
int
aam
fs
rcl
lods
les
xlat
cmps
das
xor
inc
and
adc
sahf
dec
adc
jno
stos
cs
mov
dec
jnp
xchg
pusha
xor
push
adc
pop
jno
lds
sbb
out
ins
mov
jnp
inc
mov
fisub
add
xchg
icebp
hlt
and
adc
mov
cmp
mov
pop
outs
push
stc
pop
cmc
sar
loop
sbb
mov
into
and
pop
ret
inc
jb
scas
adc
out
in
pop
aam
jg
xchg
enter
mov
sahf
pop
adc
mov
sub
mov
lods
adc
sbb
enter
adc
mov
cmps
dec
jp
pop
xor
or
ins
sbb
push
add
push
(bad)
sahf
dec
(bad)
jb
inc
xchg
ins
mov
test
dec
lea
add
icebp
loop
adc
cli
jp
pop
dec
pop
repz
sbb
cdq
pushf
arpl
test
sbb
pop
pop
mov
jecxz
(bad)
jge
not
push
fcmovbe
test
imul
dec
mov
inc
jo
sbb
and
ins
and
hlt
or
icebp
adc
inc
bound
adc
loop
stos
aad
or
jmp
xor
xacquire
pusha
stos
xor
pop
xchg
(bad)
adc
in
add
les
push
inc
mov
inc
stos
dec
add
addr16
(bad)
mov
adc
sbb
push
inc
cmc
mov
cmps
sbb
sub
lods
loope
movs
fisub
inc
xchg
imul
test
pop
ds
push
cld
dec
adc
cmp
data16
test
test
pop
(bad)
jl
jnp
sbb
sar
scas
mov
adc
mov
cmp
cmp
xor
addr16
push
scas
xchg
test
popa
and
movs
(bad)
jmp
sbb
jns
enter
xor
sbb
jmp
test
xchg
in
fidivr
ret
int
dec
lods
out
neg
xchg
adc
hlt
sub
stos
push
or
arpl
inc
(bad)
aad
inc
cli
and
scas
or
test
lods
cmc
out
pop
pushf
js
jae
in
push
inc
sbb
sbb
jmp
mov
aaa
retf
cmps
inc
lds
sub
mov
adc
neg
outs
addr16
pop
fbld
mov
add
movs
sub
mov
jge
xchg
imul
cmp
in
ret
adc
xchg
jge
enter
pop
jne
xchg
sbb
or
loop
push
rcl
retf
les
fld1
sbb
mov
sub
pop
mov
xchg
mov
inc
lods
adc
jbe
es
gs
loop
adc
pop
pop
ds
pushf
adc
ins
mov
push
ds
and
loope
adc
cmps
repnz
pop
and
loope
or
xchg
daa
pop
pop
repz
adc
test
adc
hlt
cdq
bound
arpl
movs
out
adc
and
xor
cmp
adc
jnp
or
out
lea
shr
xor
dec
setae
std
aam
push
jl
sbb
mov
retf
stos
add
loope
sub
int
cmps
push
fsub
jne
iret
loopne
dec
xchg
loop
and
push
aas
ss
adc
mov
fdivr
add
push
push
inc
sub
adc
lods
lea
adc
jbe
push
call
inc
aam
xchg
mov
sbb
sub
xor
jl
pop
add
retf
push
aam
iret
push
mov
mov
dec
outs
sbb
push
sahf
sbb
xor
into
mov
rcr
shr
cmps
and
jns
and
or
lds
es
adc
fs
(bad)
popf
pop
cmp
cmp
fisub
mov
(bad)
jmp
push
and
cmp
dec
sbb
adc
cmps
pop
fadd
push
add
bound
dec
push
adc
mov
push
outs
lock
(bad)
icebp
push
xchg
or
mov
mov
or
clc
ret
pusha
aam
dec
pop
and
xor
jg
test
test
mov
sbb
dec
ss
push
push
fsubr
mov
aam
cs
into
cmps
das
scas
jmp
inc
xor
into
and
repnz
jge
je
dec
sti
cwde
icebp
std
push
ret
cmp
shr
retf
add
jge
call
in
pop
xchg
or
(bad)
mov
jl
inc
push
loope
lock
push
je
int3
mov
push
pop
push
pusha
pop
push
adc
into
dec
sahf
mov
dec
inc
in
or
jns
fsubr
or
stc
and
std
add
xchg
inc
aam
dec
dec
bound
xchg
repnz
xor
push
cwde
pop
push
je
mov
lahf
add
out
adc
jmp
push
xor
popf
xchg
pop
retf
push
xchg
repnz
ins
ja
push
(bad)
ja
push
sbb
ret
ins
sub
inc
or
test
sbb
add
in
cmps
popa
jns
dec
test
inc
imul
jb
test
sub
mov
jbe
pop
pop
fistp
mov
pop
xchg
cs
push
jp
push
mov
bound
xor
(bad)
fist
mov
rcr
mov
fs
cld
adc
inc
push
lods
ins
lahf
or
push
cmp
mov
jne
mov
add
jl
inc
xor
int
aam
adc
aaa
sbb
or
sbb
sbb
out
in
push
pop
aam
pop
push
push
inc
int3
aam
push
xchg
fdiv
adc
das
jle
jge
adc
jg
sub
or
pop
and
mov
jnp
xor
adc
push
aam
int3
aaa
dec
cmp
ss
aam
loopne
mov
(bad)
(bad)
adc
inc
jle
add
call
loopne
fs
jge
adc
popa
iret
sahf
pop
dec
repnz
pushf
call
fbstp
xor
dec
loop
enter
sar
stc
sub
mov
dec
push
jnp
sbb
movs
scas
stc
adc
mov
repnz
pop
dec
push
dec
out
or
and
xchg
das
sbb
or
adc
sbb
inc
adc
out
jbe
jb
aaa
xchg
xchg
push
fnstenv
(bad)
sbb
bound
out
adc
sti
push
jno
jp
sahf
push
cmc
fwait
push
es
adc
push
ret
clc
and
sub
cmc
out
popf
nop
adc
xor
fs
ror
lods
cmp
mov
pop
in
jne
cmp
jo
xchg
mov
sbb
sbb
mov
int3
mov
or
mov
add
xchg
pusha
aas
and
dec
fnstenv
sub
sub
mov
(bad)
out
leave
cwde
je
dec
retf
cmp
fwait
data16
retf
push
cmp
test
cdq
push
call
js
test
cwde
lahf
in
daa
dec
xor
adc
xchg
jne
adc
ds
(bad)
loopne
mov
adc
cdq
fsubp
sub
adc
cmps
jae
dec
push
jmp
adc
cwde
rcl
repnz
(bad)
pop
add
aad
dec
lock
ss
adc
xchg
iret
adc
sub
fnstsw
hlt
mov
imul
xchg
xchg
dec
loopne
adc
mov
add
popf
adc
sbb
fadd
adc
lahf
xchg
fild
adc
cwde
pavgb
adc
(bad)
enter
lods
xchg
call
icebp
sub
xor
xchg
aam
imul
cmp
(bad)
adc
and
fs
xor
adc
in
and
xchg
fstp
clc
push
enter
jne
adc
xor
es
shl
stos
adc
xchg
cwde
in
(bad)
jns
adc
pop
add
out
adc
(bad)
xor
movs
pushaw
fucomip
sub
fldenv
jmp
xchg
jle
lea
adc
xchg
cwde
dec
fstp
mov
mov
sbb
jecxz
cdq
loop
xlat
push
in
inc
cmp
fisubr
sub
retf
fs
das
mov
xchg
pop
xchg
jno
aam
add
rcl
hlt
or
or
mul
dec
es
imul
imul
in
xor
mov
dec
mov
or
sub
test
imul
jne
pop
push
mov
popf
push
arpl
in
sbb
int3
cwde
push
cmp
test
je
hlt
sbb
aam
frndint
iret
mov
sbb
(bad)
int3
or
and
or
mov
in
jne
mov
jne
adc
xor
(bad)
out
lock
xchg
int3
push
ja
je
sbb
pop
xchg
dec
stos
add
cmps
sub
pushf
jae
retf
cmp
out
lea
cs
and
in
jmp
cmc
add
bnd
xchg
adc
or
and
mov
jl
dec
sbb
iret
fs
pop
xchg
out
jo
arpl
xchg
pop
icebp
cmp
retf
add
xor
xor
xor
aam
adc
int3
push
outs
push
retf
jne
mov
xor
mov
jb
inc
int3
in
sbb
jo
add
cmp
inc
dec
out
jmp
push
xchg
jns
lahf
mov
bswap
push
cwde
aam
sysret
cli
or
pushf
mov
inc
ror
mov
loopne
and
in
cwde
or
adc
mov
mov
mov
cmp
fucomip
and
popf
test
dec
jp
push
jbe
adc
outs
mov
mov
pop
clc
cmp
xor
sbb
cs
call
and
pop
adc
mov
movs
cmp
jmp
addr16
test
iret
push
in
push
(bad)
push
adc
add
int
mov
(bad)
mov
ss
mov
mov
es
int3
cli
lods
in
sub
sbb
mov
in
adc
movs
pop
push
adc
(bad)
push
ins
sub
shl
loope
imul
jbe
mov
arpl
in
add
data16
imul
ret
loop
sbb
call
inc
xor
fnstenv
sar
mov
add
jmp
add
ja
jl
test
add
xchg
mov
or
xchg
icebp
leave
mov
sub
add
call
and
in
pop
stos
cdq
xchg
add
sub
stos
xchg
and
retf
fwait
xchg
dec
(bad)
jp
test
adc
mul
push
jecxz
add
je
xchg
in
adc
lock
(bad)
aam
jl
fwait
in
pop
push
jae
loopne
xchg
test
stos
loope
retf
jne
mov
cmp
adc
xchg
push
sub
and
adc
add
inc
test
dec
cli
push
adc
or
dec
xchg
shr
adc
pop
out
call
stos
jno
sbb
enter
and
stc
push
icebp
add
push
jle
xlat
sti
and
mov
dec
mov
sub
push
scas
je
mov
xor
out
sbb
xchg
sbb
sub
out
icebp
jns
test
adc
cdq
jae
mov
push
aaa
mov
popf
xor
(bad)
cmp
add
movs
xchg
cdq
int3
xchg
add
mov
sub
mov
xor
ficom
inc
cmp
push
adc
mov
xchg
sbb
clc
hlt
xor
out
dec
mov
(bad)
shr
test
inc
dec
in
push
xor
cmp
les
or
xchg
inc
dec
mul
iret
loopne
adc
sar
xchg
adc
jmp
add
mov
sbb
out
xor
xor
mov
cmp
jp
fsub
or
jb
outs
adc
push
mov
pop
push
(bad)
push
xchg
cmp
adc
out
mov
mov
imul
xchg
push
dec
jo
nop
ror
sub
mov
mov
pop
loopne
cld
or
adc
loope
jne
outs
or
adc
pop
inc
into
cmc
fiadd
inc
sbb
mov
or
ret
jg
(bad)
sbb
add
shl
adc
mul
js
movs
cdq
rcr
cwde
mov
fs
mov
cmp
add
push
enter
adc
pop
mov
fisttp
xchg
jne
pop
mov
add
add
adc
and
push
sbb
mov
adc
in
dec
add
pop
enter
movs
or
aaa
and
jge
(bad)
cmc
pop
dec
inc
adc
cs
js
xchg
adc
sbb
sub
fs
repnz
jmp
fldlg2
inc
xchg
pop
in
mov
add
in
add
pop
adc
xchg
pop
add
pushf
dec
add
leave
dec
aam
iret
test
test
aad
sub
and
mov
out
(bad)
imul
and
pop
cld
push
int3
out
and
sti
retf
loopne
hlt
test
sbb
mov
push
dec
mov
adc
in
loopne
das
jae
jecxz
lods
es
inc
adc
pop
sbb
xchg
scas
rcl
adc
cmp
sbb
jg
and
aad
xor
pop
mov
call
test
scas
and
adc
lahf
fidivr
mov
adc
mov
jno
movs
mov
adc
arpl
lahf
aad
push
fdiv
adc
mov
jmp
and
in
fs
inc
mov
or
adc
inc
dec
push
bound
push
call
sub
pop
and
into
and
cmovne
mov
or
add
hlt
sbb
aaa
push
add
sti
rcl
stos
ret
retf
jb
or
lock
aam
int3
sub
add
cwde
ja
adc
repz
cmp
inc
int3
(bad)
and
adc
and
add
inc
adc
imul
inc
rol
mov
cwde
pop
movs
and
mov
inc
mov
cmp
pop
popa
inc
xchg
retf
jecxz
cmps
hlt
addr16
mov
cmps
(bad)
(bad)
mov
std
jo
push
sub
stos
test
les
lods
sahf
je
jle
add
popf
loope
jb
fdivr
dec
retf
lods
sbb
lahf
sub
sbb
lahf
jnp
adc
dec
inc
xor
not
inc
adc
mov
loope
jl
mov
movs
add
repnz
(bad)
aas
loopne
jb
sar
pop
jae
xor
js
shl
push
out
pop
pop
mov
jnp
in
dec
iret
jo
mov
int3
enter
pop
aaa
ins
push
xchg
or
dec
ret
int3
pop
sbb
push
sti
xor
adc
adc
fcom
cwde
xor
sbb
pop
push
inc
not
(bad)
fucomi
adc
mov
xchg
es
or
xchg
xor
inc
shl
int3
shl
jb
les
enter
retf
pop
jb
dec
sub
shr
add
int
pop
retf
loop
in
mov
push
aad
mov
sub
(bad)
xor
aas
call
adc
dec
mov
ins
ss
hlt
cli
push
pop
mov
xor
and
daa
jg
add
adc
scas
cld
cmps
mov
retf
and
or
add
adc
sbb
mov
test
xchg
and
lods
xchg
jno
dec
and
adc
mov
jle
fstp
(bad)
jno
or
add
cmp
xchg
(bad)
xor
adc
mov
movs
test
ins
pop
adc
pop
xor
push
jbe
(bad)
push
pop
aam
mov
aad
mov
and
mov
pop
push
(bad)
jmp
adc
fdiv
adc
push
xor
xchg
xor
xor
enter
adc
faddp
push
sbb
cmp
cmp
fwait
push
fistp
push
scas
sti
and
sbb
stos
sub
adc
je
add
jl
sbb
mov
inc
adc
fcomp
fsubr
adc
popa
loop
cmp
adc
mov
ret
mov
and
les
or
add
mov
adc
and
pop
adc
jmp
mov
add
adc
dec
xchg
add
(bad)
sbb
sti
dec
cmc
stos
xchg
add
mov
pop
sbb
or
add
cld
lds
mov
ror
adc
sub
ins
push
das
push
xor
mov
pop
and
mov
fisubr
sbb
cmp
mov
unpcklps
pop
pop
out
leave
xchg
cwde
adc
push
dec
daa
or
test
xchg
xor
add
ins
test
adc
mov
pop
mov
xlat
xor
ins
xor
shr
xchg
mov
mov
out
cmc
stc
inc
movs
jae
pushf
in
fsubr
push
push
mov
imul
and
jl
push
cmp
dec
imul
sbb
add
cmps
jb
push
fucomi
add
push
imul
dec
es
lahf
or
pop
adc
bound
test
xchg
pusha
les
sbb
jae
inc
mov
cld
lock
nop
xchg
mov
sbb
xchg
adc
div
call
or
and
mov
lea
pop
fs
jae
ror
lds
cld
jmp
loop
mov
adc
stos
push
sub
xchg
cli
push
mov
jae
inc
xchg
mov
xor
xchg
and
dec
mov
not
and
aad
xor
in
sbb
data16
push
cdq
pop
xchg
lea
adc
push
inc
dec
fidivr
dec
repnz
mov
xchg
cmp
xor
cmp
and
mov
addr16
retf
fcmovbe
cwde
scas
in
inc
imul
(bad)
es
push
pop
mov
lock
xchg
push
adc
aam
mov
push
scas
repnz
(bad)
push
pop
cmps
rol
dec
leave
jae
xor
sub
out
mov
scas
mov
retf
bound
adc
mov
adc
retf
ret
outs
jmp
data16
and
js
retf
and
sbb
imul
inc
pop
int3
or
xor
adc
sub
jnp
fstp
ret
div
dec
sbb
jecxz
xchg
jne
xor
cmc
sbb
js
(bad)
fcmovb
scas
test
or
or
scas
(bad)
jg
mov
sbb
(bad)
ins
loop
xchg
mov
jns
xlat
hlt
jbe
and
cmp
fidivr
pop
cwde
ss
leave
pop
mov
push
ins
adc
fs
sub
dec
push
loope
sub
cmp
xchg
jp
ins
adc
test
dec
sbb
clc
dec
mov
inc
aaa
sub
mov
sub
dec
hlt
inc
aam
sbb
retf
xor
loop
adc
and
mov
fisubr
adc
cmp
inc
(bad)
bound
jb
call
(bad)
push
add
sub
les
cld
lea
cmp
movs
test
or
or
adc
hlt
sub
enter
mov
mov
lea
adc
fwait
les
jmp
or
in
xchg
jmp
sahf
mov
jge
gs
aam
pop
jbe
adc
dec
ficom
mov
in
nop
mov
inc
push
sub
or
fdiv
test
push
dec
cmp
adc
mov
inc
outs
aam
xor
push
adc
jmp
adc
sbb
pop
ret
retf
dec
and
fldcw
js
and
jmp
clc
ja
inc
nop
adc
mov
cld
push
push
pushf
ret
adc
js
jmp
mul
and
add
adc
inc
mov
pop
or
xor
hlt
sbb
(bad)
push
rol
or
adc
lahf
scas
mov
mov
sbb
mov
es
fst
shl
xor
xor
cmc
popa
adc
lea
pop
jo
shr
pusha
jp
xor
js
push
cld
cli
or
lds
fcmovnu
aam
xchg
(bad)
adc
mov
push
loop
adc
fld
or
aam
in
int
mov
mov
mov
xchg
adc
or
adc
pop
stos
fs
add
xor
dec
leave
pop
and
in
pop
out
fsub
push
dec
inc
xor
das
and
fwait
xchg
mov
les
sbb
out
mov
mov
push
inc
cmp
jle
jne
data16
clc
call
xchg
ja
pop
push
sti
adc
cs
pop
lahf
pop
sub
lods
cmps
adc
ror
call
lahf
sbb
cld
xor
rol
sbb
(bad)
fsub
adc
je
aas
out
test
sub
and
sub
aam
(bad)
adc
lds
lea
add
test
(bad)
mov
adc
cmp
gs
add
pushf
push
sbb
and
xor
repnz
pop
dec
or
mov
jl
arpl
xchg
adc
and
sahf
adc
jmp
jmp
adc
je
jl
icebp
imul
xchg
xor
daa
xchg
movs
adc
mov
push
out
xchg
mov
adc
xchg
dec
repnz
pop
(bad)
add
(bad)
pushf
mul
mov
out
pop
or
dec
lock
or
cld
push
jle
int3
mov
and
in
loope
ret
xor
sbb
jmp
push
lods
mov
mov
lahf
loopne
test
push
xlat
aam
pop
jmp
adc
ss
fsub
mul
xchg
xor
jl
in
in
add
and
imul
adc
cdq
div
and
jbe
mov
out
lahf
adc
les
jle
sbb
mov
adc
sub
jbe
leave
cmps
xchg
into
cmps
xchg
sbb
mov
mov
mul
icebp
adc
stos
push
cli
sbb
cmp
dec
mov
adc
cmp
lods
enter
xor
inc
enter
in
jl
adc
call
dec
sub
add
leave
aas
fild
stos
in
mov
aaa
cmp
and
or
dec
push
sbb
stos
enter
ins
fadd
js
cmp
add
out
push
push
inc
or
cmps
mov
hlt
adc
cld
popa
and
pop
pop
push
adc
add
dec
xchg
adc
icebp
inc
jmp
cmp
push
adc
ret
adc
mov
daa
dec
or
into
mov
pop
lock
sar
adc
es
or
xchg
or
aad
sbb
sbb
pop
(bad)
in
cwde
mov
push
cmps
or
adc
jmp
pop
push
fmul
int3
mov
loope
icebp
scas
pop
mov
aam
xor
scas
out
outs
mov
jne
and
jnp
popa
mov
xor
(bad)
jo
pop
dec
xor
cmp
push
sbb
sub
xchg
xchg
add
mov
or
or
lods
push
je
inc
adc
movs
dec
pop
out
inc
xchg
sbb
pop
std
into
repz
fimul
xchg
or
inc
jmp
hlt
fst
xchg
pop
je
jmp
scas
cdq
mov
loopne
(bad)
sbb
jnp
push
or
or
(bad)
sbb
pop
pop
mov
xchg
push
sbb
and
addr16
or
sub
xchg
xchg
adc
(bad)
mov
ret
clc
sbb
pop
inc
popa
push
retf
dec
mov
clc
add
retf
into
scas
lock
fild
and
adc
shl
add
test
out
xor
aas
and
mov
xor
inc
imul
xlat
out
cmp
adc
push
stos
cmps
in
sbb
adc
test
les
sbb
jmp
(bad)
hlt
adc
and
and
or
add
xor
xor
cdq
mov
ins
movs
jp
mov
jo
or
cld
mov
cld
cld
adc
mov
jae
bound
inc
adc
pop
mov
cmp
add
in
mov
movs
xor
nop
add
test
push
push
repnz
mov
sbb
jg
pusha
push
scas
not
pop
in
or
nop
rcl
bound
fstp
adc
pop
movs
shl
call
mov
mov
pop
cmp
(bad)
les
repnz
mov
ins
jle
mov
dec
xor
add
sti
inc
fst
adc
and
(bad)
adc
adc
add
ret
imul
adc
test
or
lahf
jmp
or
enter
popa
adc
lods
fdiv
inc
jae
cmps
xor
xchg
push
psrad
adc
dec
mov
mul
test
fidivr
sbb
in
dec
sub
xchg
call
mov
jne
inc
(bad)
adc
cmp
pop
dec
lods
pop
push
neg
push
adc
pop
aam
(bad)
push
mov
sbb
push
jge
aam
mov
adc
fs
xchg
xchg
and
cmps
jmp
shl
sub
js
scas
push
and
pop
mov
xchg
cwde
jns
jmp
icebp
icebp
adc
add
xchg
and
jmp
mov
add
sub
lds
xchg
or
jg
inc
pop
mov
xor
sbb
xchg
mov
ror
fst
adc
std
sti
adc
sub
xchg
mov
cmp
mov
xchg
sar
jmp
jo
mov
add
push
sbb
enter
loop
sub
add
adc
(bad)
pop
push
lods
dec
mov
and
adc
shl
cdq
cmp
add
lods
(bad)
jno
test
sti
out
bswap
jmp
or
aaa
ret
icebp
out
leave
hlt
mov
inc
sbb
vaddsd
mov
lahf
movs
and
pop
(bad)
int3
(bad)
xor
jmp
ds
shr
inc
push
in
jge
imul
inc
sbb
mov
or
call
dec
xor
pusha
das
jo
dec
push
jl
fist
xor
xchg
push
and
retf
test
add
jmp
adc
fist
lock
adc
jle
stos
xor
mov
push
mov
push
in
loope
adc
shl
push
jl
cmp
dec
lahf
xchg
popf
xchg
(bad)
mov
xchg
fsubp
inc
cmps
and
xchg
pop
out
shl
adc
int3
test
movs
cmp
cmp
dec
jmp
hlt
dec
cld
add
jbe
cs
sbb
push
frstor
cmc
cmp
dec
je
cdq
nop
adc
scas
and
sbb
and
jne
push
test
ss
aam
arpl
inc
in
cmp
adc
inc
bnd
xor
enter
xchg
pushf
pop
push
push
push
push
call
movs
add
int
stos
mov
inc
fmul
dec
es
dec
aad
xchg
das
stc
clc
adc
sbb
out
jo
bound
cmp
mov
fist
fdiv
ss
movs
xor
mov
rcl
and
sbb
into
icebp
out
mov
and
xchg
adc
mov
xor
(bad)
pop
sbb
sbb
call
xchg
jmp
or
pop
les
cld
mov
adc
inc
xchg
and
mov
push
movs
loopne
fstp
add
popf
sbb
inc
add
outs
and
in
rcr
hlt
mov
ret
inc
xlat
retf
mov
pop
mov
xor
(bad)
aad
adc
les
ret
mov
mov
(bad)
xor
out
sahf
aam
sub
je
mov
pmaddwd
or
dec
rol
imul
aad
mov
std
(bad)
lahf
sbb
out
adc
jnp
aam
bound
cmp
not
sbb
fcom
dec
jmp
mov
sbb
test
xor
mov
inc
sar
or
ins
xchg
call
inc
call
hlt
fisub
mov
adc
adc
or
lock
std
adc
jbe
ins
stos
in
loopne
pop
loope
or
cmp
xor
dec
aaa
xchg
inc
jb
jne
and
adc
mov
out
js
leave
pushf
(bad)
sbb
xchg
into
scas
mov
pop
aad
sbb
ror
inc
sbb
mov
sbb
mov
add
pop
pushf
xchg
fcom
push
adc
outs
iret
mov
sbb
or
ins
cli
dec
nop
adc
out
mov
ret
push
ret
iret
pop
idiv
pushf
add
rcl
fdiv
jge
add
mov
ss
jo
inc
aam
cmps
adc
test
inc
push
pusha
fsubr
xor
jae
hlt
ja
gs
repnz
mov
movs
push
adc
call
xchg
sbb
jmp
aaa
jmp
sahf
iret
adc
or
jb
and
lock
test
mov
adc
cld
sub
cmp
call
and
aam
fstp
out
dec
push
adc
scas
pop
or
inc
retf
dec
pop
adc
lahf
(bad)
sub
jne
pop
sub
jmp
imul
cmp
xchg
adc
cmc
test
push
push
movs
xchg
pop
cmp
sti
push
out
mov
mov
enter
jne
(bad)
cmp
xchg
add
xor
push
mov
addr16
std
repz
enter
push
das
xchg
out
out
inc
loopne
pop
and
ficomp
sub
mov
push
aam
xchg
adc
ret
lods
xchg
jp
xor
adc
mov
jno
push
sbb
leave
adc
mov
mov
test
jg
pop
gs
ja
cmp
add
adc
mov
and
mov
adc
shl
adc
(bad)
cmc
jmp
in
mov
sbb
movs
jge
push
nop
xchg
(bad)
lock
mov
dec
bound
and
sbb
xor
mov
pop
dec
mov
scas
aam
cld
inc
call
int3
iret
jge
into
outs
jbe
retf
addr16
pop
add
mov
cdq
jecxz
pusha
pusha
jle
dec
cmp
push
dec
int3
movs
push
cmp
and
inc
cmp
pop
add
mov
adc
inc
div
inc
shl
lea
shl
pcmpeqb
and
aas
loope
std
lods
add
pop
mov
mov
or
adc
int3
je
adc
cmp
into
cmp
pop
mov
adc
sbb
mov
sti
add
adc
(bad)
lock
fidiv
and
mov
xor
stos
jg
ss
or
cmc
pop
pushf
pop
rol
adc
sbb
daa
add
in
cmp
call
jg
call
ss
outs
aas
nop
outs
test
daa
adc
mov
pop
mov
jmp
out
mov
and
or
pop
lds
adc
inc
jns
or
mov
xchg
pop
pop
pop
test
in
movs
loope
lds
mov
ss
pop
pushf
adc
rcr
mov
retf
adc
push
cli
popf
fs
enter
fst
shl
inc
and
mov
js
pusha
pop
cmp
rcr
nop
adc
adc
mov
xchg
outs
adc
rol
and
push
aam
in
int3
ja
nop
push
jl
ror
sbb
sti
inc
daa
xor
adc
mov
cli
into
adc
leave
test
add
lds
cld
cli
xchg
xchg
push
sub
pusha
xor
loope
push
or
sub
js
stos
or
jp
imul
dec
mov
push
dec
inc
cmp
push
cmp
ss
xor
sbb
cmps
out
ins
jecxz
loope
mov
shl
jle
push
or
adc
push
scas
cli
and
or
mov
adc
xor
mov
adc
retf
dec
inc
or
push
in
cmps
jmp
movs
xlat
dec
sub
jmp
lods
jb
adc
(bad)
ins
arpl
adc
pop
je
fsubp
push
mov
pop
adc
cwde
and
inc
jp
syscall
js
jo
and
xor
retf
mov
call
add
mov
push
fdivr
adc
inc
mov
into
in
loopne
jle
adc
mov
mov
inc
icebp
in
adc
dec
push
(bad)
outs
cmp
pop
mov
fimul
inc
hlt
push
adc
clc
cdq
(bad)
mov
(bad)
out
call
xor
fwait
in
cmc
dec
in
call
adc
sbb
and
pusha
xchg
int
aaa
xor
xor
or
neg
mov
adc
pop
aam
inc
jp
xchg
adc
neg
lahf
in
int3
in
push
inc
ret
mov
mov
lahf
jno
dec
xchg
outs
jmp
sub
mov
shr
ret
test
dec
cmps
inc
mov
mov
cmc
idiv
mov
or
and
test
jge
adc
movs
jp
scas
push
jp
and
je
cld
push
jno
cdq
inc
xor
xchg
not
or
add
in
rcr
out
cli
sub
dec
ficom
rol
loope
outs
ins
bound
imul
rcl
jno
add
and
jb
cli
in
adc
xchg
fcomp
es
sahf
adc
popf
inc
xor
idiv
rcr
cdq
repnz
outs
xchg
daa
inc
adc
loopne
movs
pop
dec
adc
or
cmc
scas
xor
mov
xor
outs
inc
(bad)
xchg
into
comiss
cwde
adc
call
mov
adc
stos
cmp
sbb
les
adc
mov
stc
add
call
adc
into
and
lock
push
cli
jl
or
or
(bad)
ds
cmc
add
hlt
pushf
xchg
sbb
adc
or
aad
mov
(bad)
mov
adc
dec
into
cmp
outs
clc
mov
das
pop
mov
add
adc
cmc
shl
jp
pop
inc
popa
and
mov
retf
lahf
ins
mov
aas
mov
je
dec
shl
lods
stos
adc
adc
sbb
adc
stos
and
int3
pop
das
fidiv
xor
stos
add
daa
retf
adc
fsubp
adc
sub
push
cmp
sar
xor
data16
fs
push
add
mov
pop
lods
xor
retf
pop
cmps
repnz
xchg
push
aas
push
or
xchg
adc
jno
fld
les
test
and
push
lea
cmp
call
adc
or
dec
js
jnp
arpl
in
cwde
loop
and
xchg
movs
fchs
adc
sub
jno
jl
mov
inc
or
mov
imul
stc
add
adc
dec
out
jmp
sbb
push
les
mov
and
dec
inc
fisttp
jnp
adc
std
aad
push
or
out
add
aam
adc
adc
adc
sub
lahf
sahf
jle
add
aam
(bad)
js
add
call
clc
call
mov
jb
div
scas
dec
adc
jne
stos
retf
sbb
push
mov
rcr
daa
xor
cmps
or
xchg
or
inc
imul
jg
rcr
or
dec
pushf
adc
or
mov
pushf
call
imul
sub
mov
fs
adc
adc
std
ins
leave
jb
sbb
inc
inc
adc
add
jle
add
jge
nop/reserved
and
adc
mov
sti
(bad)
repnz
test
cld
xor
mov
adc
ss
mov
in
push
adc
xchg
sbb
and
mov
xchg
fdivr
scas
xor
iret
dec
jmp
(bad)
cli
sbb
mov
add
adc
push
clc
stc
adc
xchg
loopne
mov
add
push
jmp
not
iret
mov
lahf
mov
fwait
xor
out
hlt
rcr
pop
int
pushf
jo
push
sub
adc
bound
pop
add
test
and
test
call
xlat
adc
pop
sbb
test
clc
rcl
fs
ins
add
mov
or
jbe
ss
je
mov
popf
push
in
int3
repz
sub
bound
jl
add
lods
push
repz
push
mov
adc
sbb
in
sbb
adc
mov
mov
iret
loop
adc
sub
cmp
std
stc
cli
inc
adc
pop
fadd
adc
cmps
mov
imul
mov
out
jecxz
stos
div
pushf
mov
jl
push
xchg
mov
inc
cdq
inc
in
retf
je
xchg
repz
mov
cmp
lahf
pop
sub
xchg
loopne
adc
stos
fild
es
mov
push
shr
push
test
data16
aas
or
sub
mov
in
mov
sub
sub
push
adc
sbb
mov
adc
xabort
outs
iret
cmp
and
lahf
fsub
dec
icebp
add
addr16
or
lock
adc
dec
jne
push
mov
nop
cdq
xor
mov
retf
aaa
inc
pop
sbb
je
bound
mov
push
jnp
rcr
cmps
call
fabs
add
fnstenv
pop
jge
xor
xchg
aam
and
(bad)
in
mov
mov
jl
mov
mov
adc
push
jmp
pop
adc
mov
pusha
pop
gs
dec
adc
cmp
out
in
jg
ins
push
mov
jecxz
jns
aad
xchg
xor
in
lods
sbb
mov
fst
ror
add
std
movs
(bad)
xrelease
mov
jmp
lods
xchg
in
xchg
adc
sysret
push
aaa
fiadd
imul
je
adc
(bad)
adc
cwde
lea
push
pop
fcom
xchg
call
push
sbb
les
fdivr
adc
pop
dec
jl
adc
stos
cdq
ja
add
xchg
xor
xchg
js
stos
(bad)
mov
inc
ret
ret
fcomp
out
daa
mov
daa
popw
arpl
add
adc
ja
adc
sbb
push
or
mov
hlt
or
jg
mov
test
mov
xchg
sbb
push
std
or
adc
jns
pop
(bad)
and
rol
test
fidiv
xchg
adc
sbb
mov
stc
sbb
int3
mov
fcomp
push
int3
push
fst
mov
sbb
xchg
jnp
or
aam
imul
adc
dec
push
movs
xor
cmp
pusha
xor
(bad)
(bad)
add
test
mov
leave
lock
dec
adc
(bad)
fnstsw
enter
mov
cwde
les
adc
dec
xor
and
mov
sub
movs
lods
adc
rol
test
icebp
mov
cwde
sub
xchg
xor
into
xchg
adc
mov
pop
in
aaa
push
xlat
loopne
inc
sbb
sub
adc
movs
adc
pop
jl
aam
inc
es
push
jle
adc
xchg
mov
adc
jg
inc
retf
dec
adc
mov
popf
scas
and
aas
push
mov
lods
fdiv
in
in
fs
jg
test
add
clc
(bad)
rol
adc
sbb
jmp
and
xor
out
sbb
push
sar
aaa
jl
adc
mov
inc
adc
imul
ja
in
(bad)
pop
mov
mov
lock
sub
stos
(bad)
jmp
aam
xor
movs
and
dec
popa
loop
sbb
cdq
xlat
jg
imul
popa
aam
jbe
push
adc
repz
inc
or
xlat
stos
mov
jo
push
mov
xchg
jno
hlt
ins
sub
adc
lds
xlat
cmp
cmp
stos
pop
adc
adc
shl
ret
push
dec
adc
push
jb
jmp
test
xchg
push
xchg
in
gs
aaa
adc
push
mov
test
inc
mov
lds
outs
add
inc
xchg
or
jmp
ffree
push
xchg
ror
add
push
or
sub
ja
int
mov
test
mov
cwde
mov
xchg
adc
jge
mov
jns
into
and
outs
adc
retf
xor
inc
lea
jo
stc
(bad)
(bad)
dec
cs
or
cmp
ss
and
div
xchg
inc
repnz
xchg
sbb
dec
jmp
out
out
jp
and
arpl
mov
xchg
mov
leave
sahf
push
mov
adc
xchg
pop
ret
mov
ret
jmp
sbb
fstp
push
loopne
adc
je
inc
sbb
pushf
push
cmps
loope
lods
ret
or
inc
adc
xor
fs
or
and
stos
mov
cmp
dec
test
popf
jg
adc
and
xchg
dec
xchg
int3
xchg
jbe
lods
mov
dec
popf
xlat
and
ins
imul
les
adc
retf
icebp
xor
jmp
(bad)
fsub
out
sub
sbb
aad
inc
mov
ficom
movs
pop
mov
aam
dec
sub
xchg
lock
adc
jb
int3
mov
scas
imul
aam
cmp
lock
jl
dec
pop
jne
pop
cmp
lods
push
xlat
dec
pop
xchg
adc
xlat
out
mov
dec
mov
aad
imul
(bad)
fistp
add
inc
push
in
dec
inc
and
push
adc
imul
mov
xchg
popf
hlt
dec
sbb
sub
adc
scas
scas
dec
repz
add
xchg
jns
fwait
cmp
cmp
fst
jb
xor
es
mov
scas
in
loopne
adc
add
adc
test
call
hlt
mov
bound
test
jne
mov
sti
cmova
add
xor
lods
adc
mov
ja
adc
xor
fwait
inc
imul
jnp
sub
add
lahf
add
mov
daa
ret
enter
push
inc
xor
dec
adc
int3
cmp
ror
cwde
(bad)
pop
mov
adc
mov
sbb
mov
std
loopne
sub
shl
jmp
call
adc
xchg
xchg
lds
test
adc
test
adc
int3
mov
adc
cli
add
pop
xor
fisttp
add
int3
ret
mov
ss
in
sbb
sub
xchg
fisttp
mov
leave
jmp
scas
rcr
movs
rcl
ds
inc
dec
add
jmp
jmp
lahf
fild
mov
sbb
push
xor
fnstsw
and
cmps
inc
outs
iret
pusha
aaa
cwde
popa
aas
xchg
mov
add
or
inc
mov
ret
mov
xor
xor
int3
jp
sar
add
mov
cs
in
push
inc
popa
adc
imul
in
adc
loope
je
iret
je
(bad)
mov
pop
int3
inc
mov
xor
lock
test
imul
nop
xor
stos
jle
inc
out
mov
push
pushf
push
aaa
test
clc
mov
jae
icebp
adc
lahf
jg
shl
mov
mov
sbb
in
jns
xor
pop
lea
adc
lahf
lock
dec
addr16
add
mov
out
push
int3
adc
pop
mov
xor
lods
xor
iret
cmp
cld
inc
inc
add
push
add
lahf
add
ret
add
lods
add
cmps
add
jl
int3
adc
adc
or
and
adc
fcomp
xor
adc
stc
lahf
arpl
stos
inc
scas
adc
enter
sub
adc
gs
adc
fimul
data16
fnstcw
push
mov
ins
adc
or
jno
xor
stos
popa
mov
imul
loop
retf
push
xchg
cmp
scas
outs
pop
xor
xchg
add
pusha
iret
pop
pop
xchg
aas
shl
sbb
adc
dec
ret
retf
cmp
sub
fistp
cmp
aam
jae
sbb
push
imul
int3
fs
add
fiadd
pop
sbb
je
xchg
rcl
dec
xchg
jmp
inc
sub
aas
adc
mov
mov
stc
and
pushf
xchg
stos
test
sbb
fist
sahf
xchg
jb
test
cmc
cld
shr
sbb
repnz
loope
pop
or
movs
std
dec
rcl
test
out
sub
fstp
adc
enter
push
(bad)
adc
jbe
xor
mov
sbb
add
cmp
das
jno
cmp
cld
fstp
xchg
ins
xor
inc
xchg
es
in
xchg
and
jge
xlat
dec
call
adc
test
call
sbb
adc
pop
movs
test
fs
jmp
adc
pcmpgtw
je
xor
mov
pop
xchg
(bad)
pop
xchg
mov
cmps
cmp
add
rol
jl
adc
xchg
or
add
sub
mov
loopne
mov
mov
or
aam
push
add
inc
rcl
mov
adc
add
hlt
adc
es
sub
call
xor
adc
daa
xchg
shr
(bad)
sbb
adc
clc
fisubr
mov
xchg
sbb
push
fld
fs
jno
mov
mov
or
or
into
loope
out
dec
jne
xchg
pop
aaa
ffree
pop
int3
aas
sbb
int3
cmc
cmp
sar
push
adc
xchg
and
or
cmc
add
push
ins
push
push
stc
imul
push
xchg
dec
inc
retf
xor
and
rcr
fwait
das
rcl
xchg
mov
push
test
cmps
adc
pop
adc
mov
lods
stos
or
mov
cmp
pop
enter
int3
out
movs
stos
sbb
and
ins
fs
push
repz
mov
ja
adc
gs
cmp
adc
xor
xchg
pop
adc
shr
adc
xor
pop
adc
mov
or
dec
imul
cmps
rcl
sub
sahf
push
xor
push
xor
and
shl
sbb
sub
mov
jmp
add
ficom
mov
loop
push
das
cli
and
stos
push
cwde
and
sbb
sub
inc
into
fistp
adc
ins
fucom
sti
(bad)
sub
adc
leave
cmp
fcmovbe
aad
or
mov
mov
xor
mov
and
add
stc
bound
test
std
outs
ss
cmp
sbb
neg
mov
xchg
shl
pop
movs
mov
adc
icebp
pop
add
adc
bound
adc
out
jo
xchg
data16
sub
clc
pop
push
(bad)
or
adc
dec
outs
mov
adc
fisubr
in
(bad)
gs
shr
cli
retf
xchg
pushf
sbb
test
(bad)
jno
adc
cmp
nop
adc
push
cld
jecxz
add
stos
adc
push
mov
cmp
mov
or
(bad)
shl
lods
aad
dec
mov
call
push
imul
push
pop
cmp
aam
mov
(bad)
int
adc
cld
ret
mov
mov
stos
sub
push
sti
or
push
addr16
faddp
shl
mov
in
repnz
sbb
out
pushf
gs
ja
adc
pop
adc
fcom
sbb
or
adc
xlat
lahf
and
jmp
adc
jbe
mov
add
mov
adc
cwde
add
fldenv
(bad)
retf
or
mov
jmp
stc
adc
pop
sub
(bad)
jle
aas
or
ror
push
mov
xor
pusha
mov
lahf
jbe
jb
por
mov
push
pop
out
adc
inc
imul
mov
xor
adc
mulps
stc
cmp
push
push
rcl
sbb
scas
or
mov
adc
push
jecxz
or
pop
sbb
or
sbb
aas
movs
jp
popf
push
jp
int
neg
xchg
mov
inc
je
cdq
fs
lahf
cmp
sub
adc
jnp
mov
xor
push
call
fwait
mov
sub
adc
std
(bad)
shl
push
adc
cmp
xchg
addr16
push
ret
mov
or
out
cld
retf
loope
or
repz
addr16
fild
inc
fimul
jp
push
or
mov
or
push
sbb
sar
sbb
outs
scas
aam
retf
cmp
mov
in
mov
scas
arpl
int3
stos
xchg
(bad)
adc
fcomp
or
fdiv
push
mov
dec
ja
adc
repz
outs
mov
retf
jg
rol
imul
push
cmp
fwait
pop
push
xchg
mov
lock
(bad)
push
les
int3
sbb
into
imul
scas
fidivr
xor
jmp
or
sub
mov
dec
mov
stos
mov
(bad)
xchg
adc
xchg
mov
ds
or
adc
ins
and
test
push
jge
arpl
adc
cmp
int
mov
add
pop
movs
push
sbb
inc
jae
mov
push
xchg
jnp
push
pop
(bad)
lods
adc
sbb
xchg
jg
jbe
pop
jb
lock
sbb
push
call
sub
and
cmps
mov
adc
popa
mov
out
fwait
jmp
daa
movs
jno
test
fstp
arpl
sbb
popa
ja
std
push
icebp
push
dec
push
sub
push
sar
jg
pop
cmp
in
enter
and
cmp
hlt
xchg
pop
pop
or
fwait
mov
outs
pop
jbe
push
(bad)
adc
pop
popa
mov
cwde
and
repnz
pop
xchg
pop
adc
pop
addr16
sub
into
iret
pop
lock
and
fild
adc
movs
pushf
inc
xor
clc
test
push
adc
xchg
add
or
inc
cli
(bad)
xchg
cld
add
mov
jle
jecxz
jbe
mov
adc
sbb
push
cmps
inc
xchg
adc
outs
jge
adc
ins
adc
jmp
into
test
xor
mov
pop
pop
cmp
cmp
loop
data16
inc
push
jmp
jmp
inc
sub
hlt
sub
popa
in
pusha
jmp
cmp
adc
in
pop
les
lock
cli
ror
cmp
ins
iret
loop
mov
aad
fmul
mov
xor
lds
arpl
int3
data16
outs
adc
sub
mov
sbb
or
jl
jne
jbe
sub
cmp
je
dec
cmp
dec
jmp
pop
sar
jp
cld
dec
(bad)
xchg
xor
jnp
pop
inc
cmp
push
fimul
sub
mov
das
jo
call
add
xor
test
and
and
jecxz
mov
fidiv
nop
idiv
sbb
inc
fnsave
adc
mov
adc
fistp
ja
xor
inc
test
push
retf
out
mov
js
es
cli
sub
xor
inc
or
std
mov
add
push
jg
aad
es
fmul
dec
test
adc
dec
nop
push
xchg
aaa
push
jge
mov
mov
xor
in
lds
push
test
xchg
sbb
or
add
ficomp
mov
(bad)
int3
add
add
and
sub
jnp
mov
and
test
jecxz
sbb
xchg
loop
sub
les
loopne
cwde
int3
jno
(bad)
jmp
jl
stos
ins
popf
push
in
adc
pop
enter
out
sbb
shl
jnp
add
das
xor
sub
push
sahf
pop
adc
movs
sbb
enter
jno
and
push
add
sbb
jae
jns
xchg
fadd
cmp
and
add
int
pop
sub
in
cld
hlt
repnz
je
nop
ins
cmc
test
(bad)
ds
mov
rcl
(bad)
lods
je
rol
mov
pop
jg
push
ins
xchg
test
or
adc
ss
inc
and
test
mov
lods
cld
fs
mov
adc
outs
in
call
pop
dec
push
adc
mov
daa
xor
mov
fild
add
fld
ja
(bad)
aam
mov
mov
ret
cmps
in
jge
test
push
shrd
and
sbb
jno
iret
aam
mov
pop
cld
cmp
scas
mov
mov
dec
call
pop
cmp
clc
ds
je
mov
push
pop
inc
les
mov
std
popf
(bad)
stc
adc
pop
jg
sbb
ret
int
jbe
or
push
ins
sti
stc
mov
adc
xchg
dec
cmc
inc
sub
dec
adc
stos
adc
fwait
(bad)
cmp
and
mov
fild
xor
dec
jle
aad
jnp
jg
push
mov
arpl
dec
ret
pop
xor
lods
sbb
mov
fnstcw
(bad)
out
adc
add
sub
sub
cli
jbe
inc
nop
mov
not
iret
call
push
mov
movs
and
xchg
xchg
mov
addr16
cmc
gs
mov
leave
cmp
cmp
fnstsw
loopne
sub
(bad)
pop
inc
inc
dec
adc
call
mov
xchg
add
aaa
popa
adc
stc
daa
cdq
lods
mov
sub
imul
ins
shr
push
sub
xor
and
dec
lea
fcom
(bad)
mov
inc
xchg
and
(bad)
mov
pop
imul
sbb
rcr
ret
xchg
xchg
mov
sbb
mov
les
call
jg
mov
pop
or
imul
pop
hlt
fs
pushw
adc
mov
in
and
ds
test
push
xchg
fld
dec
loop
stos
repz
lods
hlt
inc
out
add
(bad)
leave
cmp
jae
retf
rcr
loopne
or
fild
pusha
sbb
xchg
dec
je
stos
pop
push
add
cmp
retf
(bad)
pop
xchg
adc
sahf
jp
xor
inc
popf
imul
push
xchg
std
les
pushf
retf
dec
fisttp
jecxz
ds
movs
xor
sti
add
adc
in
loop
sbb
mov
mov
adc
lock
rcl
lods
pop
mov
imul
sub
and
jnp
adc
(bad)
jmp
test
dec
adc
mov
fcos
sub
jmp
pusha
int3
xchg
outs
xchg
or
call
or
mov
pop
movs
adc
push
sub
in
adc
ins
jg
xchg
add
(bad)
adc
stos
xchg
cmp
mov
scas
cdq
adc
test
and
and
and
lods
es
in
bnd
add
dec
cs
dec
movs
lahf
push
clc
sbb
mov
repnz
cmp
push
sub
cmps
adc
dec
mov
not
(bad)
icebp
cmp
repnz
neg
pop
rcl
push
jns
enter
test
daa
test
rcl
popa
test
xor
dec
mov
mov
cmp
inc
loope
adc
jnp
je
mov
ret
sub
inc
aam
mov
ins
mov
dec
jge
out
mov
aam
xlat
and
adc
out
in
mov
jns
dec
jge
cmps
mov
cmps
pop
in
adc
imul
sub
retf
in
cmp
dec
jb
xchg
mov
leave
adc
push
sbb
jge
nop
push
test
movs
cdq
xor
mov
pusha
inc
push
aam
push
xlat
fiadd
and
push
push
idiv
(bad)
sbb
in
push
retf
rol
scas
stos
in
pushf
dec
ret
jns
test
sti
xchg
in
push
aaa
mov
retf
movs
push
ret
je
push
add
inc
pop
hlt
in
jno
in
fidiv
repnz
js
div
fstp
mov
int3
mov
jne
test
xlat
and
adc
ret
in
pop
inc
dec
mov
arpl
cdq
nop
mov
dec
and
loope
sbb
sahf
push
cmovp
add
xchg
fnstenv
xchg
shr
int
nop
sub
mov
jne
or
mov
mov
sbb
push
adc
loope
adc
mov
pop
adc
iret
sbb
and
or
outs
call
mov
mov
add
adc
test
dec
mov
jmp
inc
cdq
mov
jo
ror
sub
push
inc
push
mov
adc
fisub
ss
fdivp
aam
adc
add
push
jmp
fst
cdq
ret
pop
dec
adc
mov
outs
pop
adc
mov
fwait
sti
xor
xor
push
std
(bad)
push
jmp
or
bound
dec
retf
neg
addr16
mov
int3
call
fldpi
push
scas
xor
mov
aad
mov
scas
sahf
lahf
and
cld
outs
push
add
xlat
data16
(bad)
mov
lods
and
inc
dec
int
pop
jb
xor
push
(bad)
xlat
push
(bad)
xor
popf
inc
jp
cld
jo
or
inc
xor
sbb
mov
ds
sbb
mov
ret
add
mov
imul
shl
fist
outs
loope
jge
aad
adc
pop
test
xor
fmulp
cmp
xchg
call
setns
xlat
sub
cs
(bad)
outs
mov
cmp
lahf
add
pop
rcl
push
xlat
mov
out
pop
out
mov
jle
jp
into
add
push
adc
mov
addr16
add
aam
inc
rol
movs
jbe
mov
mov
sbb
ds
cmp
push
adc
je
mov
into
ja
jns
test
ficom
iret
xchg
dec
adc
or
jne
xchg
sbb
adc
xor
adc
call
aam
sbb
mov
sub
adc
mov
add
mov
push
sar
or
mov
aad
cmp
std
out
movs
ret
add
daa
cmps
cs
mov
into
mov
and
adc
push
mov
dec
push
icebp
adc
add
call
jo
fld
mov
outs
jg
movs
mov
cmp
lods
adc
jmp
inc
stos
aam
mov
xor
push
dec
adc
pop
pop
jp
cld
push
adc
idiv
jns
sahf
shl
or
sub
sub
out
in
or
lods
or
xchg
call
hlt
retf
xlat
adc
test
and
sub
adc
mov
fimul
fcom
aas
adc
(bad)
aad
pop
adc
jb
scas
pop
dec
out
adc
xor
loope
push
out
popa
adc
mov
shl
in
push
adc
adc
iret
in
call
lock
outs
out
loop
out
xor
sar
dec
add
push
mov
push
imul
push
into
repnz
shr
sbb
aaa
jecxz
retf
addr16
je
adc
int3
add
sbb
in
dec
addr16
pop
fdiv
sbb
int3
dec
adc
sub
movs
sbb
mov
retf
mov
dec
int3
push
inc
mov
add
jnp
rol
out
and
pusha
out
add
shl
dec
sbb
add
cmp
imul
loope
rol
add
lds
push
push
andps
clc
repz
jge
mov
jmp
outs
pop
dec
push
mov
retf
clc
or
fcmovnu
adc
cld
lock
neg
mov
jo
int3
or
mov
pop
in
loope
mov
add
mov
jno
fadd
sti
ins
ins
inc
or
scas
call
sub
jp
movs
loope
fdivrp
imul
mov
add
aaa
push
scas
push
xchg
mov
mul
xchg
cmc
(bad)
sahf
jge
je
sub
stos
loop
mov
adc
das
cmp
test
fwait
jmp
lods
mov
mov
adc
adc
xor
sub
push
fsub
hlt
aam
mov
adc
fcomip
sbb
ins
jmp
(bad)
jmp
push
and
or
arpl
loopne
imul
add
xchg
ja
sbb
push
fs
(bad)
push
inc
pop
dec
push
and
or
call
mov
and
push
adc
push
xor
xchg
test
sbb
push
(bad)
sub
fisttp
sub
ds
(bad)
xlat
sahf
outs
mov
imul
pop
push
pop
jl
mov
add
xchg
sbb
enter
shr
ins
xchg
fdiv
ja
sub
(bad)
imul
jmp
call
ss
and
loop
ds
(bad)
or
neg
or
cld
inc
test
or
call
adc
xor
pushf
cmp
adc
ds
cvtps2pi
push
xchg
je
xor
xor
popa
cmp
mov
push
aad
adc
mov
outs
popf
jne
xchg
movs
cmp
aam
dec
loope
(bad)
out
aaa
ins
adc
imul
js
dec
push
cdq
mov
jae
mov
inc
push
in
xor
cmp
adc
je
mov
adc
lahf
jns
cmc
fs
cmp
icebp
jp
call
push
ins
sti
dec
xor
push
or
fisub
xor
cmc
out
xor
adc
sbb
fldcw
add
dec
cmps
inc
and
add
popf
vdivps
sar
icebp
mov
(bad)
fadd
adc
mov
mov
adc
xchg
xor
test
retf
adc
push
cmp
test
push
xor
or
adc
fadd
adc
dec
adc
test
push
lahf
xchg
mov
call
sbb
or
inc
(bad)
int3
fwait
adc
mov
imul
int3
data16
adc
push
rcr
sub
add
mov
ins
inc
xchg
sub
or
repz
dec
push
xchg
fidiv
and
cdq
(bad)
adc
cmp
lock
call
les
sbb
or
mov
mov
mov
das
cli
inc
daa
int3
(bad)
mov
jbe
and
fwait
hlt
mov
xchg
pusha
jmp
mov
inc
movs
dec
jne
mov
cmp
stc
loope
jae
hlt
ins
xor
sub
xchg
fadd
mov
ficom
push
mov
cmc
adc
jg
in
inc
xlat
push
sti
stc
rcl
xor
pop
or
in
jmp
arpl
adc
fwait
movs
and
mov
ss
jmp
pop
adc
aad
pop
push
adc
dec
or
add
fstp
dec
pop
rcl
xchg
nop
adc
cmp
mov
daa
adc
add
push
xchg
shr
cmp
jmp
arpl
sub
adc
or
adc
call
call
stos
pop
out
fild
mov
inc
jge
in
in
xor
js
xor
aam
jne
jns
and
and
out
dec
pop
imul
pushf
(bad)
iret
xor
cmp
mov
inc
outs
imul
sbb
pop
adc
enter
repz
cld
adc
int
popf
(bad)
(bad)
sbb
jecxz
test
out
jge
jmp
icebp
cmp
les
pop
pop
jbe
fnstenv
mov
adc
aaa
and
retf
fiadd
push
shr
int3
adc
dec
lods
xchg
xchg
sti
movhps
sub
sbb
outs
sahf
adc
popf
(bad)
pop
push
in
push
movs
adc
pop
retf
xor
jo
repz
sbb
sbb
inc
push
jmp
scas
xchg
or
sub
(bad)
(bad)
push
int3
add
in
pop
shl
out
call
mov
mov
xchg
in
jmp
loop
mov
cmps
sub
or
lea
in
jne
or
pop
dec
and
and
daa
imul
dec
and
hlt
ds
fucomp
mov
les
xor
mov
mov
movs
adc
int3
xchg
pop
out
pop
(bad)
lods
sub
sbb
jmp
add
and
mov
addr16
xchg
mov
xor
mov
clc
pop
mov
push
mov
jp
adc
xor
es
sbb
pop
repz
retf
push
gs
shl
frstor
scas
int3
aad
jns
or
mov
popf
jne
(bad)
retf
xor
(bad)
in
cmp
and
and
jmp
int3
cmp
repz
pop
ins
add
adc
into
fcom
repz
xchg
(bad)
mov
ror
pop
pop
popf
imul
cs
mov
add
mov
dec
int
xor
inc
clc
xchg
rcr
and
retf
sub
sti
cmp
push
add
in
jnp
mov
or
dec
add
pop
mov
movs
push
ss
je
aad
test
sbb
pop
cmp
aad
repz
int3
sub
sbb
mov
test
aad
aad
push
xor
fwait
inc
lfs
sub
xchg
enter
push
mov
jecxz
pusha
sbb
and
inc
imul
(bad)
arpl
mov
push
inc
and
push
adc
add
shr
jmp
outs
ficom
aas
shl
add
cmp
lods
aas
jl
sysenter
retf
test
data16
ins
inc
mov
retf
mov
cld
in
jnp
lds
push
push
rcr
enter
pop
(bad)
pop
mov
sbb
stos
movs
mov
push
xchg
push
jg
mov
pushf
mov
sbb
adc
xlat
mov
loop
add
in
pop
adc
dec
sbb
shr
fs
(bad)
int
mov
dec
xchg
pop
jmp
xlat
and
xchg
adc
aam
and
adc
out
outs
movs
jle
pop
mov
inc
shr
xor
xchg
pushf
lds
add
cmp
sbb
xor
ror
add
cld
(bad)
pop
push
cmp
mov
dec
test
dec
inc
pop
ins
mov
retf
cld
call
outs
imul
cmc
in
fldcw
das
or
stos
inc
xchg
shl
mov
test
test
ja
in
sub
xchg
pushf
cli
inc
push
fist
dec
iret
ja
test
adc
inc
sahf
pop
pop
lds
sbb
and
out
repz
adc
jmp
or
out
jmp
lahf
pop
fldcw
fidiv
outs
aas
adc
mov
jp
mov
(bad)
into
xor
and
test
mov
iret
push
mov
dec
es
xchg
xor
adc
mov
xor
retf
into
(bad)
jb
cmps
bound
les
std
mov
rol
cmp
push
xchg
lahf
mov
and
mov
pop
dec
or
mov
pop
fst
lods
lods
sbb
mov
push
dec
and
inc
push
ins
push
xchg
xor
mov
mov
aad
push
ins
pop
pushf
pop
pop
push
cmps
pop
xor
cmps
nop
mov
lds
es
jp
fcomi
xchg
test
push
push
(bad)
mov
xor
int
out
mov
clc
pop
ret
push
pop
adc
scas
mov
and
mov
fwait
jg
jno
sbb
push
pop
int3
(bad)
push
sbb
std
scas
sbb
aam
xchg
stos
in
add
mov
fsub
jns
mov
(bad)
out
(bad)
or
push
mov
jae
cli
(bad)
(bad)
data16
not
aaa
adc
rcl
call
(bad)
xchg
nop
sbb
(bad)
adc
inc
mov
cmps
push
xchg
cld
jmp
mov
sti
push
cmps
push
mov
je
adc
xor
xchg
hlt
fld
in
push
pop
data16
mov
bound
inc
dec
adc
jmp
div
jp
sbb
jmp
int
(bad)
in
int3
jmp
fist
vpcomeqw
fs
das
mov
mov
dec
push
pop
lahf
inc
out
into
pop
adc
arpl
(bad)
adc
cdq
loope
adc
out
jnp
push
adc
push
fwait
dec
sti
xor
sbb
sar
stos
and
jnp
call
adc
mov
push
leave
aaa
stc
and
adc
dec
aad
push
mov
retf
sbb
popf
or
add
fild
sbb
(bad)
mov
inc
xchg
sti
ret
and
test
xchg
mov
inc
cmps
icebp
stc
mov
add
adc
loop
into
std
addr16
scas
(bad)
sahf
pop
icebp
mov
test
loope
aam
out
addr16
in
in
xlat
push
nop
jecxz
leave
or
hlt
jo
test
sbb
fcmovu
and
idiv
push
mov
ficom
cmp
jbe
and
out
int3
out
test
cmc
push
mov
ds
fidivr
mov
jns
jp
and
pop
pop
cmp
test
imul
loopne
or
mov
sbb
adc
jmp
push
dec
loopne
aam
cmp
and
and
adc
inc
into
addr16
arpl
pop
pushf
or
mov
cli
retf
fcmovnu
cld
test
dec
cs
jnp
push
push
test
and
outs
mov
jge
in
mov
popf
adc
dec
out
fadd
fistp
sbb
inc
adc
mov
add
fxch
mov
sbb
pop
cmp
or
out
adc
dec
push
ret
je
xor
movs
dec
dec
sbb
add
xchg
push
xlat
in
lea
jl
cmp
sub
aas
sub
(bad)
cmp
lahf
in
sbb
sti
int3
pushf
ds
lods
(bad)
scas
bswap
xor
adc
cmc
xchg
dec
jb
scas
adc
loope
pop
adc
loop
mov
push
mov
pop
cdq
cmp
cwde
xor
sub
push
or
jne
push
xchg
mov
xor
test
and
xor
das
repnz
adc
pushf
add
adc
jne
das
mul
test
fild
cli
movs
je
or
sub
ins
mul
push
add
mov
test
loope
xor
adc
cwde
loop
sbb
xor
mov
ins
(bad)
adc
dec
push
mov
adc
adc
xchg
dec
das
sbb
movs
lds
or
jns
lea
jmp
pop
in
test
add
and
cmps
cmps
outs
mov
xchg
adc
dec
clc
icebp
in
sub
mov
std
push
ins
cli
les
movs
mov
lods
pop
hlt
fdivrp
loope
jmp
and
or
adc
jno
loopne
ficom
push
or
adc
cmp
js
ss
mov
idiv
xor
pop
pop
xlat
scas
mov
fwait
inc
aam
sub
pop
mov
sbb
xchg
jg
adc
call
mov
arpl
add
loopne
(bad)
dec
pop
cld
and
movs
sub
pop
data16
inc
(bad)
loope
js
rcl
mov
and
jle
aas
adc
lea
lahf
push
and
lock
dec
push
adc
aad
sbb
sets
jnp
imul
add
and
call
jno
push
xchg
add
(bad)
inc
mov
nop
inc
cmp
push
and
int3
(bad)
dec
retf
fistp
push
fisubr
aaa
push
mov
dec
jae
lock
xchg
push
(bad)
sbb
sbb
or
retf
outs
jns
call
je
mov
sar
mov
xor
jmp
popa
and
call
xor
cld
xchg
jmp
test
sub
mov
jb
(bad)
push
push
adc
mov
aad
adc
and
pop
mov
push
adc
aaa
mov
add
test
xchg
daa
adc
pop
adc
fdiv
shrd
in
cmp
jmp
jl
mov
test
sbb
js
loop
lods
shl
xchg
je
sbb
adc
xor
iret
dec
adc
out
pop
pop
inc
inc
sbb
das
fs
pop
aam
mov
fnsave
adc
adc
aam
lahf
xlat
push
imul
add
retf
dec
scas
sbb
cmps
jo
dec
push
sahf
mov
lock
sbb
cmp
in
ins
push
es
(bad)
jge
and
xchg
outs
fcom
add
cli
call
jl
mov
sbb
call
inc
cmp
mov
mov
je
sbb
frstor
fist
jmp
adc
dec
popw
movs
xor
sti
popa
pop
sub
jecxz
aam
and
iret
adc
fistp
dec
xor
mov
das
adc
retf
inc
mov
test
push
jae
in
cdq
inc
mul
adc
sub
mov
ds
pop
push
adc
in
push
sbb
xchg
popa
in
sub
adc
inc
sbb
ret
sub
pop
es
add
ja
adc
or
retf
xchg
daa
call
ret
push
adc
dec
aad
xchg
add
popa
aaa
pusha
loop
arpl
cmc
je
into
in
mov
adc
and
push
movs
push
adc
adc
imul
sbb
mov
xchg
pop
jbe
and
inc
ret
pop
sahf
mov
leave
movs
xchg
adc
mov
mov
cmp
and
shr
out
or
fsub
adc
jecxz
(bad)
call
pop
outs
push
cli
loope
movs
pop
imul
fild
lods
mov
xchg
sbb
ror
lods
fnstenv
inc
out
jecxz
hlt
xor
neg
sbb
rcl
cmp
loop
in
jbe
jne
sub
das
aaa
adc
lahf
pop
add
out
xchg
imul
push
scas
and
movs
push
push
adc
xor
aas
hlt
lds
inc
dec
dec
xchg
icebp
jae
and
sbb
hlt
jmp
movs
jmp
int3
je
popf
and
or
inc
sbb
adc
mov
retf
or
mov
xor
xor
inc
push
jmp
shr
sbb
repnz
xor
std
stc
mov
jnp
add
push
xchg
ins
or
cmp
loop
push
and
inc
bound
jmp
out
pop
adc
int
call
lods
inc
jp
cli
cwde
adc
cmp
and
mov
popf
inc
neg
fist
xchg
push
cmp
and
ja
test
adc
popf
xor
iret
fs
adc
fidivr
loop
vunpcklps
jp
stc
fldcw
ret
mov
add
pop
xor
(bad)
inc
jge
jle
mov
(bad)
aam
adc
sub
scas
cmp
icebp
sbb
dec
sbb
cmp
push
imul
or
push
mov
nop
fisubr
jbe
(bad)
mov
lahf
aam
adc
jmp
es
adc
lahf
movs
ret
and
push
xchg
fist
loope
lds
call
adc
shl
mov
jecxz
mov
outs
outs
cmp
repz
enter
out
aad
pop
xor
xor
sbb
xor
(bad)
adc
adc
leave
mov
test
test
jno
cwde
mov
(bad)
aad
mov
pop
and
dec
adc
scas
xor
or
arpl
xlat
adc
sbb
mov
fiadd
pop
sahf
test
pop
jmp
adc
adc
cli
sti
sahf
cmp
dec
ins
nop
idiv
aaa
push
xchg
pop
xlat
and
inc
pop
into
leave
cdq
jecxz
add
hlt
fcomp
scas
movs
int
inc
loopne
lods
xor
xchg
pop
test
or
sbb
test
sub
jns
push
xor
loop
sahf
popf
aam
mov
adc
pop
add
xchg
add
ins
ret
inc
xchg
adc
stos
cmps
pusha
out
add
push
fild
inc
xchg
jle
test
pop
jl
push
fs
adc
iret
sbb
mov
add
(bad)
and
lahf
ret
scas
sbb
icebp
int3
fisttp
in
dec
adc
retf
ficomp
adc
mov
dec
inc
add
push
dec
pop
adc
pop
xchg
sub
js
and
push
xchg
mov
dec
aam
jb
dec
add
out
leave
dec
jg
ds
adc
sbb
sub
stos
adc
xchg
lods
add
adc
push
adc
and
xor
aam
mov
pushf
inc
cdq
sbb
(bad)
(bad)
push
jae
dec
jae
enter
scas
loopne
cmp
xchg
xor
leave
push
cld
cmp
lea
(bad)
add
push
rcr
dec
stos
sahf
div
adc
scas
push
fistp
mov
retf
cmp
jle
je
loopne
jl
sub
push
ffreep
sbb
lds
cwde
stos
enter
hlt
mov
repz
test
adc
das
cmp
imul
mov
lods
jmp
mov
mov
pop
hlt
and
inc
loop
dec
cmc
cmp
fwait
mov
or
aas
in
addr16
into
push
je
retf
jne
in
inc
jnp
(bad)
jns
mov
int3
xor
test
scas
add
(bad)
jo
icebp
dec
ucomiss
xchg
movd
imul
pop
out
sbb
ret
push
(bad)
dec
in
cld
jle
lods
pushf
into
pop
adc
fsub
and
fisubr
in
add
mov
test
mov
add
jne
inc
xor
dec
loopne
js
out
std
jmp
pushf
mov
lods
loop
push
jp
pop
into
mov
rcl
push
cmp
adc
out
js
dec
sub
and
rcl
mov
jg
out
mov
mov
dec
aas
ds
mov
pop
cli
push
cmps
jl
push
sub
ss
ins
mov
int
and
mov
shl
mov
(bad)
mov
mov
mov
sub
or
mov
sub
mov
sbb
adc
jl
dec
add
pop
or
fdiv
hlt
pop
sbb
arpl
ss
repnz
das
sbb
not
js
add
data16
xor
mov
jno
jae
iret
add
retf
sbb
adc
cld
ret
sbb
(bad)
test
sbb
arpl
int
hlt
mov
adc
push
dec
mov
add
loopne
adc
addr16
cmp
adc
inc
jg
jmp
aas
jbe
add
retf
adc
xchg
jl
add
mov
xor
bnd
hlt
fisttp
fisub
cwde
inc
jle
adc
outs
in
jno
xor
dec
push
mov
pop
adc
sbb
shl
bnd
adc
movs
fstp
jne
fcomp
shr
jl
imul
xchg
xchg
cli
mov
adc
lock
push
pop
lea
movs
int3
cmp
sbb
adc
mov
stos
sub
and
adc
lock
adc
shl
push
inc
inc
enter
mov
rcl
pop
inc
xchg
retf
inc
mov
movs
push
ss
xchg
push
mov
inc
jmp
adc
push
mov
sar
push
(bad)
addr16
inc
iret
movs
sbb
or
stc
sbb
and
mov
pop
aaa
cli
(bad)
adc
rol
fcomi
cmp
mov
xchg
rcl
pop
pop
(bad)
dec
mov
retf
adc
and
mov
push
pop
arpl
mov
outs
out
and
jb
or
or
mov
sahf
call
cld
mov
cdq
rcl
adc
add
mov
sub
adc
retf
xchg
xchg
push
push
cmp
adc
imul
mov
push
xor
int
xchg
sbb
nop
xchg
inc
add
ffree
or
jmp
int3
aad
call
(bad)
mov
adc
mov
in
retf
cmp
fs
mov
addr16
in
or
lea
xchg
xor
xor
clc
mov
sti
inc
inc
lods
ss
cmp
lock
ins
sub
in
add
and
loopne
sbb
daa
shl
dec
mov
adc
popf
lock
test
xor
push
aad
jae
pop
and
lds
aas
std
int3
cs
xchg
scas
cmp
add
movs
sahf
cld
jne
xchg
fbld
jmp
adc
(bad)
out
cld
fild
ja
and
gs
retf
cli
mov
dec
in
inc
add
fidiv
int
and
ficomp
in
mov
jne
xchg
adc
dec
ja
jle
xchg
mov
cmp
mov
mov
xor
rcr
xchg
imul
adc
mov
scas
rcl
push
int3
jmp
and
bound
adc
xchg
mov
lods
js
and
arpl
adc
dec
call
cmc
pop
xor
cli
and
push
jae
call
cld
cmps
push
push
test
test
add
dec
sub
aaa
fild
dec
xchg
jnp
loop
fdivr
sub
mov
push
sub
mov
dec
jne
jb
fnsave
out
bound
retf
cmp
pop
movs
out
fld
fidiv
and
pop
hlt
cld
stos
jmp
loopne
fs
bsf
xlat
pop
outs
lock
test
sub
mov
mov
push
aad
sbb
popa
hlt
sbb
sbb
loopne
mov
xchg
cmp
sbb
and
xchg
push
or
jno
rcl
mov
sbb
out
stc
jmp
sub
xchg
icebp
dec
scas
sti
(bad)
push
cli
call
mov
lahf
aaa
cmc
jno
in
popf
and
adc
ins
cmp
jmp
pop
pop
pop
inc
mov
sbb
arpl
sbb
lods
or
pop
add
or
aaa
test
hlt
int3
push
sbb
jmp
mov
jmp
inc
pop
xchg
in
sub
sbb
call
xchg
jnp
arpl
sub
inc
pop
mov
mov
sbb
push
adc
xchg
leave
adc
push
xchg
cld
mov
pop
push
inc
mov
inc
out
stos
pushf
hlt
jb
or
mov
push
adc
push
lahf
repz
out
idiv
into
adc
mov
in
imul
addr16
dec
fldcw
adc
fcom
in
adc
call
ds
ficom
loop
jno
push
adc
fucomi
adc
outs
cli
mov
arpl
xchg
push
adc
lods
pause
cmp
sub
sbb
fadd
jne
les
push
rcr
push
retf
ror
push
mov
and
mov
movs
push
aam
sbb
jp
xor
inc
push
out
mov
adc
arpl
jge
push
(bad)
adc
jno
std
frstor
mov
push
rol
and
jne
div
(bad)
jecxz
push
add
pop
adc
adc
(bad)
fadd
sbb
sub
loopne
jno
scas
sbb
xor
cmp
inc
pop
or
add
outs
xor
dec
test
dec
xor
and
cs
les
int3
pop
cdq
pop
inc
ret
sub
in
dec
push
(bad)
aas
pop
jne
les
js
add
lock
mov
cdq
int3
test
xchg
sahf
inc
dec
ret
mov
push
cmc
cmps
pop
jae
push
scas
inc
clc
push
das
push
mov
xchg
adc
dec
fst
push
adc
jle
outs
out
and
test
(bad)
pop
and
call
mov
in
loopne
adc
inc
add
into
test
(bad)
in
mov
jno
cmps
in
(bad)
das
bound
cmps
loopne
push
out
jle
mov
add
add
imul
inc
mov
cld
in
ret
pop
xchg
push
mov
jb
adc
pop
jmp
sbb
pop
mov
or
bound
popf
dec
mov
push
dec
fwait
(bad)
dec
mov
adc
xor
iret
push
test
xchg
sbb
mov
pop
fadd
pop
xor
mov
push
retf
je
add
(bad)
movs
out
movs
or
jge
das
push
fwait
cmp
inc
nop
sbb
pop
pop
je
scas
adc
fild
mov
out
dec
adc
push
out
dec
dec
sub
adc
xor
ror
inc
mov
fiadd
adc
xchg
push
push
adc
inc
call
ret
and
(bad)
pop
inc
fs
in
repnz
pop
cmp
sub
stc
sub
cmp
push
addr16
push
xor
aam
pop
inc
arpl
push
fwait
mov
repnz
fld
stos
fdiv
inc
xor
adc
(bad)
in
fcmovu
push
mov
pop
jmp
fcom
cmps
clc
int3
arpl
adc
xor
xor
in
clc
hlt
les
in
fist
dec
mov
(bad)
hlt
sub
mov
xor
inc
enter
inc
xor
inc
sub
in
rcl
dec
xor
paddusw
mov
mov
xchg
xor
adc
xchg
cmp
mov
adc
mov
scas
cmp
nop
or
pop
stos
sar
jecxz
and
xchg
out
(bad)
je
jne
adc
movs
cs
xor
cld
adc
pop
call
push
dec
push
mov
sbb
pushf
inc
pop
bound
add
adc
inc
mov
pop
mov
and
adc
mov
(bad)
and
outs
mov
iret
or
icebp
cld
jge
jbe
add
or
cmp
stos
push
adc
sub
mov
mov
movs
and
leave
(bad)
mov
dec
pop
adc
pop
cld
pop
push
mov
bound
jle
jne
push
(bad)
addr16
dec
xor
das
adc
mov
add
shl
sbb
aam
dec
mov
ins
(bad)
(bad)
enter
out
lahf
invd
adc
sub
adc
stc
jl
push
std
adc
ret
pop
aas
or
jge
ds
lahf
push
pop
push
ins
sub
dec
mov
jmp
sub
cli
adc
repz
sbb
sbb
popf
inc
xchg
sub
xor
mov
in
jmp
ror
and
lods
(bad)
dec
push
adc
int3
xor
adc
ins
shl
retf
adc
iret
into
push
pop
test
add
rcr
test
mov
sti
add
test
cs
pushf
sbb
int3
xchg
jne
and
pop
xchg
cmp
or
adc
shl
cdq
pop
test
idiv
in
test
jo
mov
les
xor
(bad)
mov
loop
(bad)
sbb
push
jge
lahf
call
int
xor
xor
xor
or
xchg
inc
and
xor
stc
mov
adc
in
mov
push
add
retf
sub
addr16
xchg
clc
rcl
mov
lahf
adc
outs
sbb
scas
movs
loop
data16
ficomp
push
sub
test
xchg
(bad)
mov
out
cmps
and
adc
sub
stos
pop
pop
lods
(bad)
pop
and
popa
inc
mov
or
xchg
loop
ja
movs
ficomp
cmp
cmp
unpcklps
retf
sbb
sbb
nop
xor
rcr
adc
mov
mov
jle
push
push
hlt
rol
adc
mov
sar
cwde
inc
out
jecxz
adc
je
jecxz
push
xchg
fdivr
test
or
cli
adc
and
pop
ins
adc
add
adc
cmc
jne
push
cmp
fimul
adc
xlat
cmovp
aas
pop
outs
xchg
(bad)
int
pop
cmp
test
inc
adc
repz
(bad)
mul
mov
loope
out
adc
adc
mov
mov
rcr
pop
(bad)
mov
shr
popf
adc
ss
pop
out
ret
mov
jl
or
dec
aad
adc
or
push
inc
or
lea
cmp
mov
pop
push
push
imul
out
hlt
ins
push
mov
mov
addr16
mov
icebp
xchg
inc
xor
pop
sbb
aaa
push
hlt
rcl
sub
or
bound
xor
sbb
cmps
(bad)
mov
fdivr
retf
push
xchg
adc
push
cmp
pop
xchg
cs
pop
out
movs
jle
aam
outs
in
or
adc
jge
sbb
and
and
cmp
sbb
mov
adc
test
pusha
dec
adc
ja
shr
pop
inc
int
cmp
mov
xor
sbb
stos
mov
adc
or
add
adc
fwait
inc
push
adc
xchg
adc
dec
mov
and
sbb
add
pop
lock
shl
std
repz
push
mov
sbb
mov
das
sbb
xor
rol
push
test
sbb
add
cdq
pop
inc
mov
sbb
outs
cmp
inc
fist
cmps
fcmovne
xor
in
add
push
aad
pop
fcom
stos
pop
test
loop
dec
fsubr
fs
aam
inc
ds
sahf
pop
retf
aaa
adc
or
xchg
fbld
inc
clc
add
loope
inc
or
mov
mov
mov
in
fs
es
and
xchg
cmps
neg
or
je
sahf
sub
enter
dec
mov
rcl
in
dec
or
xor
adc
aaa
jno
xchg
xor
loopne
pop
or
adc
pop
lahf
div
neg
movs
mov
out
clc
push
adc
jb
pop
into
xchg
jno
push
test
out
popf
shl
int3
inc
sbb
aam
xchg
mov
loop
ficomp
stc
bound
sub
pop
sub
aad
in
pop
cmp
retf
and
call
aam
adc
sub
loop
and
and
aam
jge
cwde
in
adc
and
test
cdq
inc
mov
adc
xor
das
js
fdivr
test
out
and
jno
xor
xchg
sbb
push
outs
pop
xchg
lahf
or
mov
adc
gs
data16
je
push
adc
mov
push
xchg
fcmovu
jle
aad
popf
mov
cmp
sub
pop
inc
sbb
sub
inc
lahf
mov
retf
dec
jns
call
cmp
stos
int3
or
pop
add
push
xor
shl
popf
mov
dec
adc
lock
das
sbb
hlt
loopne
sbb
mul
inc
xchg
pop
pop
inc
rcl
dec
aas
cmc
jbe
inc
and
repnz
pushf
js
mov
leave
outs
mov
fmul
test
adc
dec
cmp
sti
(bad)
mov
pop
push
add
stos
ins
inc
or
bnd
inc
cld
hlt
mov
mov
test
mov
inc
mov
pop
in
mov
adc
in
cmps
aas
cmp
xor
xchg
cmp
imul
fdiv
inc
(bad)
icebp
enter
(bad)
jne
pushf
xor
dec
sub
push
sub
rcr
fdivr
dec
adc
push
mov
xchg
loopne
int3
add
retf
xor
xchg
dec
cmc
xchg
dec
cmps
pop
adc
adc
hlt
out
adc
sub
out
xor
loopne
cmc
je
aam
mov
hlt
cld
adc
xchg
rcl
aas
jne
mov
fs
mov
sbb
jo
pop
sbb
je
or
jp
les
or
sti
mov
stc
pop
jne
aaa
ds
xor
ffreep
lods
hlt
(bad)
pop
mov
mov
fwait
ins
lods
cld
xchg
mov
popf
or
sbb
je
rcr
inc
stc
cld
das
or
loop
push
imul
fmul
add
test
daa
sbb
jmp
push
mov
mov
dec
loope
sbb
jb
mov
mov
movs
inc
cmp
fst
push
jmp
inc
dec
or
dec
inc
fsubr
mov
jb
call
jno
dec
outs
dec
jge
sbb
xchg
pop
or
push
nop
je
cmp
cld
push
cwde
cwde
retf
xchg
ror
or
mov
fsubr
out
sub
push
pop
xchg
adc
outs
mov
cmp
add
add
mov
aam
mov
inc
mov
(bad)
sub
jo
xor
push
popf
nop
add
adc
jmp
mov
add
inc
loopne
cmp
jb
ins
xchg
cmp
push
(bad)
retf
jl
jle
adc
lods
iret
pop
bound
or
cmp
imul
adc
inc
test
xchg
adc
xlat
nop
cvtps2pd
adc
(bad)
scas
jge
jne
fist
hlt
mov
xchg
gs
xor
in
jmp
add
(bad)
or
mov
jg
adc
xchg
inc
call
ss
retf
inc
test
mov
adc
mov
inc
dec
adc
repnz
xor
imul
adc
and
sbb
nop
sub
loope
test
(bad)
gs
sbb
xchg
bound
mov
lock
int3
push
test
mov
sub
or
mov
imul
call
xor
cmp
mov
pop
mov
ins
in
push
push
jl
repz
pop
movs
popf
retf
das
js
fsubr
push
sbb
xchg
mov
add
xchg
fild
xor
adc
sahf
loop
shl
ret
push
and
add
hlt
aad
xchg
adc
rcl
mov
cmp
xor
xchg
adc
jecxz
inc
enter
in
adc
cmp
mov
jmp
rcl
pop
in
cli
push
in
cmp
jg
pusha
and
loopne
dec
sbb
and
sub
mov
sbb
jno
inc
lods
in
repnz
or
push
repz
sar
pop
xor
sbb
inc
mov
rol
lds
aaa
nop
cmp
adc
jmp
mov
lock
add
mov
ss
in
jmp
arpl
addr16
nop
jp
mov
outs
int
les
adc
call
pushf
sub
gs
dec
ins
iret
mov
ret
aam
dec
int
ss
(bad)
pop
(bad)
(bad)
ret
sbb
into
push
adc
and
pop
inc
ins
add
fsubr
mov
adc
out
or
dec
jno
ret
adc
xchg
sbb
fdivr
test
fs
in
mov
pop
mov
scas
adc
in
xchg
or
rol
sbb
sahf
es
retf
mov
push
fisub
in
dec
jcxz
cmc
xor
sbb
fmul
sub
sbb
adc
aad
inc
shr
ja
or
jno
cmc
fs
push
adc
neg
adc
xchg
lods
aam
push
xchg
adc
shr
mov
shl
adc
xor
call
jbe
mov
nop
jmp
pavgw
cmp
test
movs
imul
popa
push
push
daa
and
pop
sbb
pop
je
je
sbb
retf
pop
int3
lods
adc
sar
loopne
out
sar
out
iret
xor
sub
neg
pop
ds
inc
push
ins
mov
loop
in
sbb
enter
push
icebp
xor
and
adc
sub
inc
jmp
xor
push
xchg
adc
mov
push
int3
adc
sub
pop
or
mov
pop
jg
xchg
fidivr
jnp
dec
jns
sbb
ret
test
inc
arpl
call
adc
fnstenv
ret
inc
js
inc
cwde
mov
fcom
push
rol
mov
repz
sbb
je
icebp
xchg
mov
pop
xor
mov
push
mov
sbb
dec
and
push
pushf
daa
ss
leave
or
adc
sbb
sub
scas
adc
add
pop
clc
push
int
jne
shl
cmc
mov
sub
inc
mov
or
and
or
dec
or
les
data16
adc
sub
lods
call
stc
stos
inc
pop
pop
cmps
push
adc
dec
test
cwde
inc
jne
sbb
adc
jmp
mov
in
sub
pop
xor
inc
gs
test
cmp
sub
mov
cmp
push
cmp
jae
add
pop
pushf
push
retf
xchg
rcr
inc
xor
sub
js
fs
or
loop
ror
inc
(bad)
hlt
dec
push
add
scas
adc
les
inc
xor
cwde
push
jl
dec
aam
test
mov
frstor
jmp
movs
xchg
push
adc
push
jbe
xchg
xor
(bad)
cmc
adc
pop
ins
push
js
loop
cmc
cmps
mov
push
(bad)
push
cmp
jno
mov
xchg
adc
cwde
push
cdq
loope
lods
div
dec
movs
xchg
mov
mov
or
and
inc
xchg
in
leave
push
mov
adc
fs
xchg
enter
cmp
xor
fcomi
jns
das
in
or
test
cwde
not
xchg
movs
imul
mov
jecxz
ret
adc
ds
stos
int
push
sbb
inc
xor
outs
fsub
cmp
ret
pop
adc
sbb
das
cmp
arpl
jmp
ins
xor
xchg
jo
cld
aaa
jbe
in
cmp
xor
(bad)
cmp
adc
jns
call
jbe
fisub
lods
mov
push
adc
jl
sar
push
adc
adc
ins
mov
push
mov
sub
scas
(bad)
pushf
shr
push
int3
(bad)
jg
sub
mov
pop
adc
test
in
adc
fsubr
mov
pop
jp
adc
enter
and
mov
outs
add
ds
adc
add
inc
jl
je
adc
inc
or
ins
hlt
adc
mov
mov
adc
pop
xchg
ins
sub
cmps
mov
xchg
add
cmp
sbb
test
xchg
or
outs
in
mov
jnp
push
xchg
push
adc
xchg
push
in
lock
adc
jg
and
aam
xor
pushf
scas
jecxz
dec
retf
push
xchg
movs
jae
adc
dec
and
int3
sub
and
jbe
into
dec
push
xor
xchg
repnz
pop
xor
inc
lods
or
out
lea
stos
aad
or
test
stos
mov
das
xchg
fimul
js
cmp
cdq
hlt
inc
xchg
out
call
js
loop
popa
movs
push
adc
(bad)
scas
mov
mov
mov
pop
rcl
add
cmp
fwait
daa
jo
out
jns
dec
adc
aas
pop
and
xchg
lock
dec
and
aaa
push
xchg
out
push
and
sbb
or
pop
xchg
out
pop
adc
push
movs
dec
sbb
bnd
fdiv
mov
pop
pushfw
xor
add
retf
repz
iret
add
xchg
das
std
push
xchg
jae
loope
stc
in
fs
or
repz
and
xchg
(bad)
int
adc
dec
dec
inc
pop
sar
and
push
test
push
xchg
pop
fnstcw
jmp
mov
in
xlat
and
sbb
sbb
push
int
push
pop
jp
xchg
add
push
mov
xor
fucomip
movs
adc
and
and
cli
dec
push
xlat
loopne
out
rcl
add
or
or
aaa
sub
pop
fsub
sbb
int3
or
aam
inc
cld
fadd
pop
ds
adc
mov
cmp
xchg
shr
jns
push
in
nop
mov
cld
and
push
adc
fiadd
pop
aas
mov
mov
jb
mov
stc
dec
hlt
(bad)
data16
mov
call
adc
test
(bad)
(bad)
in
icebp
sbb
in
cvttps2pi
das
enter
xor
xor
ror
jnp
adc
pop
mov
outs
adc
cmp
mov
adc
cmp
dec
movs
loope
out
adc
sti
pop
mov
in
push
(bad)
test
xchg
push
call
sbb
std
aam
and
aam
not
adc
mov
push
mov
mov
adc
cmc
cmp
pop
pop
js
ins
out
adc
(bad)
stos
add
adc
das
js
or
call
call
popa
pop
stos
push
adc
lahf
aad
or
outs
imul
sub
inc
add
adc
nop
fadd
cmps
cmp
sbb
shr
inc
add
jmp
aam
pop
pop
mul
add
repz
stos
dec
out
fcomp
sbb
rcl
push
(bad)
loopne
mov
rcl
repz
ret
aad
movs
push
neg
lock
mov
push
cmp
and
mov
shr
mov
(bad)
jg
and
fcom
js
int3
xchg
scas
xor
fs
idiv
neg
ficom
or
pop
mov
sbb
dec
xor
or
mov
movs
pop
pop
retf
pop
and
push
ret
cli
mov
pop
dec
cwde
gs
fs
and
inc
loopne
push
dec
ss
mov
xor
mov
inc
int3
imul
sbb
mov
push
(bad)
cld
ins
pushf
xor
stos
and
or
sub
sbb
shl
or
call
or
ins
xlat
sar
jno
push
pop
pop
cwde
mov
sbb
ret
and
(bad)
fs
or
mov
out
adc
stc
cmc
cld
xor
dec
jmp
mov
mov
je
movs
push
arpl
inc
adc
pop
push
dec
add
loopne
cmp
pop
jo
mov
test
aam
cmp
sbb
aas
ror
ins
out
dec
fcomp
leave
imul
mov
cli
iret
mov
jno
scas
in
xor
sub
inc
in
fdiv
int3
call
or
repz
and
and
call
mov
pushf
and
mov
mov
push
dec
pop
jge
cmc
scas
cs
jecxz
(bad)
dec
mov
mov
inc
retf
xor
xchg
enter
xchg
ror
fstp
xchg
inc
mov
sbb
retf
int3
adc
jmp
loope
scas
mov
(bad)
jae
inc
sub
in
mov
sub
ficomp
mov
repz
mov
je
add
push
jg
push
cmp
lods
ins
sbb
jnp
nop
jg
add
cmp
iret
pusha
fs
mov
into
push
retf
aaa
int3
adc
(bad)
js
add
in
adc
sbb
jmp
adc
or
and
adc
xor
xor
dec
and
inc
and
int3
adc
pop
icebp
mov
stc
and
inc
cld
mov
sbb
fiadd
sti
mov
stos
xchg
sahf
jg
(bad)
arpl
or
mov
outs
xchg
sbb
adc
retf
cmps
jno
push
adc
or
out
cmovno
ss
cmp
call
ins
sbb
je
in
dec
adc
pop
loop
push
and
into
imul
mov
cld
push
push
or
mov
loope
mov
stos
dec
(bad)
sub
cli
or
push
jg
add
loop
in
(bad)
and
je
pop
sub
mov
mov
mov
ins
push
scas
jmp
inc
sub
dec
xlat
popa
push
adc
hlt
mov
xchg
adc
and
fs
sbb
mov
fadd
clc
out
or
aaa
(bad)
call
inc
pop
push
add
mov
xchg
leave
adc
cmp
or
dec
xor
jae
jl
adc
fdiv
lods
jb
fs
cmp
and
push
aaa
loopne
sbb
sti
(bad)
dec
mov
and
icebp
mov
or
je
pop
clc
jmp
sbb
sysexit
mov
adc
in
add
into
(bad)
loop
pusha
jae
ret
sub
mov
in
push
mov
mov
adc
push
mov
cmp
out
cmps
loope
cmp
jg
imul
mov
mov
pop
adc
adc
aam
pop
push
jmp
loopne
cmp
jmp
pop
rcr
jmp
mov
and
scas
outs
mov
dec
ficom
leave
jecxz
xchg
dec
xor
aas
mov
retf
les
jg
and
add
sbb
std
jmp
dec
int3
les
repz
inc
pushf
sbb
stc
adc
jb
jmp
out
scas
cli
adc
mov
xor
add
push
jg
or
or
mov
adc
adc
adc
jl
mov
adc
xlat
fcom
sub
sbb
sub
pusha
cmp
mov
ror
pop
retf
xchg
mov
shl
out
cmp
pop
shr
dec
retf
mov
mov
dec
inc
cmp
les
iret
inc
jmp
or
int3
ja
adc
scas
cmp
cmps
or
(bad)
aas
retf
popa
in
int3
cmp
sbb
mov
dec
(bad)
xor
repnz
je
loop
xchg
inc
sbb
mov
in
es
mov
int3
xchg
sahf
pop
call
xchg
popa
add
cmp
xlat
loopne
sub
aad
pop
adc
cmc
mov
loope
push
dec
adc
xor
xor
retf
or
lods
jmp
sahf
inc
pop
adc
push
adc
pop
cs
or
push
cmc
and
jecxz
jb
mov
scas
adc
and
(bad)
pop
push
ins
sbb
lods
dec
inc
addr16
jecxz
and
imul
add
je
push
aam
lods
ret
sub
mov
mov
add
xchg
mov
adc
out
mov
mov
mov
call
enter
inc
in
adc
sub
and
adc
fs
rcr
pop
adc
inc
add
jle
mov
xor
(bad)
xchg
jmp
xchg
(bad)
cld
in
aaa
mov
jmp
call
and
in
loop
add
jbe
stos
mov
out
fwait
shr
mov
adc
push
cmp
lahf
test
sub
cli
mov
int
iret
repz
add
and
dec
mov
daa
xor
mov
adc
jg
mov
adc
push
inc
ins
sub
call
mov
cmps
lock
(bad)
adc
or
adc
lods
mov
and
mov
cli
pop
ja
arpl
adc
mov
dec
inc
xchg
push
xchg
push
outs
js
push
adc
xor
adc
dec
sub
adc
(bad)
xchg
sbb
sar
idiv
mov
and
mov
mov
popf
pop
ret
gs
ins
lock
push
dec
push
jmp
add
rcl
jno
xchg
cwde
mov
out
xchg
das
push
xor
popa
popf
pop
nop
adc
add
mov
adc
push
xor
clc
fcomip
xor
push
jnp
adc
sub
lock
adc
xor
mov
mov
lea
je
fwait
(bad)
ds
add
inc
mov
lds
jmp
ret
ret
int
mov
cmps
mov
push
xchg
or
fcmovb
(bad)
jne
hlt
sti
loop
arpl
add
adc
and
outs
jnp
call
mov
out
mov
test
lea
mov
push
pop
jne
pop
psubusw
jae
push
mov
jge
sbb
mov
loopne
xchg
je
or
push
push
out
inc
imul
inc
sub
mov
xchg
jmp
mov
nop
in
adc
mov
lods
rcr
mov
add
stos
out
je
inc
popa
push
and
adc
cdq
add
test
jnp
xor
and
sbb
adc
pop
pop
je
clc
dec
sbb
out
pop
and
adc
(bad)
xchg
dec
in
sub
push
dec
xor
stc
addr16
or
data16
cli
jmp
repnz
xchg
inc
jno
mov
scas
adc
mov
outs
sbb
lods
xchg
inc
jbe
push
mov
push
xor
xchg
ds
cli
adc
jle
ret
scas
mov
aaa
push
fnstcw
inc
jle
mov
xchg
sbb
call
xchg
aam
mov
xor
sbb
scas
or
mov
pop
ss
dec
sbb
cmps
popf
sub
adc
push
adc
push
adc
fstp
mov
cmp
cmp
jmp
fisttp
std
adc
inc
xchg
or
inc
xchg
sub
arpl
aad
jnp
xchg
and
retf
lea
adc
push
loopne
inc
jg
adc
inc
jno
sbb
jbe
pusha
pop
hlt
in
adc
jl
(bad)
ficom
cmps
clc
push
add
adc
xchg
sub
test
push
test
jmp
add
aam
push
neg
hlt
adc
repnz
sub
mov
gs
cmps
bound
or
icebp
int
cmp
adc
fsubr
or
cmps
mov
adc
into
es
pop
ret
and
adc
add
sti
cli
pop
pop
(bad)
cmp
push
dec
das
mov
push
adc
cmc
aad
inc
sub
mov
fdiv
popf
or
xchg
adc
cld
pushf
and
xor
or
out
jg
ss
shl
pop
mov
pop
inc
call
retf
out
or
pop
out
loope
clc
jno
push
ret
hlt
pop
je
push
in
mov
inc
mov
add
cwde
aad
adc
pop
dec
cs
sbb
fdivr
ficomp
adc
in
inc
sar
shl
jl
(bad)
mov
(bad)
xor
xor
aaa
inc
arpl
loopne
out
adc
sub
xor
mov
cmp
imul
pop
adc
cli
sub
nop
fisub
sbb
mov
pop
pop
sahf
inc
cmp
push
push
adc
mov
sbb
imul
sete
pop
mov
ja
cmc
or
fnsave
jmp
dec
sub
xchg
xchg
test
sti
mov
ror
addr16
ret
das
in
stc
je
adc
add
ficomp
xor
lods
adc
or
mov
ror
push
mov
outs
sbb
ins
jne
and
ins
push
mov
retf
clc
xor
repz
adc
mov
sub
inc
and
adc
sub
cmp
pushf
and
(bad)
pop
adc
loope
cmp
mov
sbb
cwde
cld
test
sub
or
xor
loope
adc
fdivr
aaa
add
push
shr
jae
ss
test
(bad)
out
inc
push
movs
ins
xchg
inc
xor
jnp
(bad)
lahf
adc
jbe
loopne
cli
push
or
in
leave
test
das
test
sbb
sub
clc
mov
push
movs
jb
test
push
test
jmp
mov
cmp
iret
hlt
aad
retf
and
ins
mov
jno
push
jnp
cmp
add
dec
push
pop
es
cmc
xchg
loope
adc
stos
xchg
jns
data16
jp
sbb
repnz
xor
nop
das
sbb
adc
nop
stc
ja
and
shl
jl
lds
pop
add
cmc
jmp
cmps
sbb
fistp
push
outs
cmc
pop
loopne
sbb
test
adc
movs
pop
rcr
push
sub
scas
push
sbb
dec
push
(bad)
out
cmps
adc
ror
mov
sar
ss
or
in
in
ficom
xor
repz
(bad)
sbb
aad
loope
and
cmp
add
jecxz
jbe
int
jnp
and
in
sbb
stos
inc
jecxz
push
and
rcr
xor
push
add
hlt
jne
outs
sbb
dec
add
jnp
inc
mul
adc
test
daa
test
sti
ret
and
add
mov
add
std
mov
pop
jae
push
fist
(bad)
pop
jns
and
adc
pusha
addr16
jae
jo
fbld
in
mov
push
push
loop
sbb
dec
sbb
call
cwde
push
loope
add
fcmovu
pop
imul
repnz
push
xlat
jno
mov
mov
mov
ins
fadd
call
pop
sbb
xor
jo
adc
aad
(bad)
sbb
xor
mov
mov
retf
pop
sbb
(bad)
std
xchg
call
(bad)
jecxz
and
aaa
cmp
fdiv
and
sti
dec
popf
sbb
xlat
push
jnp
or
loope
sbb
cmc
add
mov
imul
adc
jo
mov
sub
sub
(bad)
sbb
std
or
and
addr16
sbb
pandn
adc
xor
pop
sbb
inc
imul
rol
sbb
lods
dec
jmp
dec
sbb
int3
sbb
ja
adc
rcl
loope
adc
test
adc
dec
adc
jno
lods
and
fwait
sbb
sbb
sbb
xchg
xor
rcr
pop
pop
or
loopne
jo
dec
lds
mov
mov
and
add
in
in
mov
mov
adc
fwait
and
xlat
jmp
dec
sti
lock
mov
inc
or
(bad)
or
out
push
dec
lds
xor
mov
cli
nop
add
sbb
sbb
cld
shl
sti
cmp
out
xor
(bad)
in
push
mov
in
movs
lods
out
call
enter
pop
js
adc
sbb
dec
xchg
fwait
loope
mov
test
movs
cmp
repz
aad
mov
push
call
sub
lods
sbb
aas
test
or
mov
cmp
jae
pop
dec
xor
adc
retf
sbb
cmps
popf
jp
dec
and
ins
inc
sbb
add
pop
sbb
push
cmp
neg
loop
hlt
add
adc
icebp
(bad)
imul
shl
adc
je
mov
and
and
mov
sbb
pushf
sbb
sbb
call
loop
pop
lock
jecxz
rcr
cmp
dec
mul
dec
or
jl
push
adc
or
fist
cmp
or
movs
pushf
jmp
pop
xchg
hlt
test
cmp
imul
ror
push
xlat
loope
cwde
push
or
xor
inc
cmp
test
in
sar
dec
in
jmp
sub
lock
in
fsub
sub
dec
xchg
aas
push
out
in
sar
sub
out
and
dec
loopne
push
xlat
xor
mov
and
mov
cmp
push
hlt
(bad)
mov
or
out
pop
dec
xchg
inc
and
fadd
mov
aad
out
or
push
push
dec
sub
ficomp
inc
loope
cmp
jmp
add
outs
test
out
out
in
mov
call
jno
pushf
int3
cmp
aad
test
dec
jne
ins
sbb
cld
mov
add
cdq
inc
shl
loope
and
and
cwde
mov
test
pop
movs
add
or
rcl
jns
aas
out
sbb
leave
iret
popf
xchg
push
xchg
ja
cwde
adc
and
inc
xor
push
and
or
ret
test
(bad)
xor
mul
cmp
mov
push
adc
pusha
out
mov
add
push
pop
rol
inc
jns
out
or
push
inc
sbb
loope
je
lds
call
loop
jae
and
mov
sub
adc
mov
clc
jnp
std
mov
ss
adc
mov
out
in
dec
jecxz
cmp
mov
inc
pop
call
cld
pop
jecxz
adc
push
enter
std
adc
bnd
ins
push
jmp
cmc
(bad)
xlat
xchg
sbb
test
loop
sar
xchg
xchg
outs
jne
in
sbb
pop
fstp
mov
rcr
sub
jno
lds
mov
inc
hlt
pushf
push
out
cmps
leave
adc
sbb
gs
loop
ins
sub
cmp
and
mov
sbb
sub
push
inc
pop
call
and
stos
aam
out
adc
mov
dec
cld
dec
push
adc
fsubrp
gs
or
hlt
mov
fst
call
and
lods
push
jno
out
and
sbb
fcomip
(bad)
aad
sub
cmp
sar
(bad)
mov
shl
sar
ins
cwde
scas
in
cmps
outs
dec
adc
sbb
mov
xchg
xchg
mov
loopne
sbb
dec
ds
(bad)
push
pushf
(bad)
(bad)
xchg
xor
repnz
call
sti
mov
movs
(bad)
sbb
dec
movs
and
cmc
cmp
sbb
mov
loopne
lds
sub
outs
cmc
sahf
fucom
rcl
or
jl
out
push
clc
es
fwait
cmp
xchg
push
adc
out
test
(bad)
movs
pop
adc
arpl
dec
inc
in
or
xor
adc
out
fiadd
arpl
gs
out
add
adc
inc
repnz
out
mov
add
int
push
add
mov
sbb
push
inc
sbb
adc
lods
dec
lock
in
dec
std
ficom
dec
shl
loope
(bad)
push
inc
xor
rcr
stc
xor
out
xchg
or
mov
mov
mov
imul
jecxz
lods
sbb
int3
cs
lds
fnstsw
cld
test
xor
out
in
jno
xchg
xor
ror
push
dec
aad
add
es
psubsw
xchg
push
adc
mov
je
rcl
push
jno
sbb
out
stos
sub
cmps
cmp
lock
stc
dec
xlat
rcl
enter
sti
mov
call
sub
jnp
jne
jecxz
xchg
js
fcom
inc
or
sbb
mov
dec
pusha
adc
or
pop
dec
jne
out
(bad)
sbb
add
test
xchg
xor
sar
ret
sbb
jl
jl
in
aam
xchg
fdiv
loope
add
add
pop
jecxz
aad
call
cmp
xor
mov
test
push
fistp
cli
xor
outs
inc
out
test
(bad)
pop
add
cwde
pop
js
jmp
lock
add
aaa
imul
sub
daa
out
fisubr
sub
mov
fdiv
ins
aaa
leave
and
test
mov
sbb
or
or
test
and
pop
ss
jae
inc
mov
and
xchg
jne
mov
stc
stos
or
sub
aam
or
neg
in
out
je
and
movs
add
xor
mov
sbb
lds
and
mov
push
sub
rcl
das
ja
pop
out
xor
push
(bad)
lods
sbb
outs
out
retf
cmp
es
lock
loope
push
sbb
pop
ret
mov
push
mov
inc
out
and
lods
cmp
sub
icebp
das
shr
out
mov
xchg
movs
mov
int3
add
movs
in
daa
in
retf
test
inc
aam
je
sbb
mov
ds
add
call
jae
fsub
dec
not
outs
and
adc
xor
loop
fidiv
jmp
mov
sub
or
dec
sbb
jmp
(bad)
fcom
popa
jne
sti
pop
mov
call
sbb
fcom
test
mov
xchg
and
jmp
mov
xor
and
mov
gs
mov
add
fist
cmp
jae
inc
dec
xor
shl
inc
out
mov
mov
push
and
mov
out
sti
imul
loopne
aam
fs
dec
cli
dec
xchg
xor
call
out
jae
in
add
call
fdiv
cld
xor
xchg
sbb
in
nop
xchg
sbb
jecxz
push
mov
fstp
loop
push
xor
(bad)
ins
sub
std
rcl
push
test
pop
jo
(bad)
(bad)
dec
in
push
jno
mov
aam
xor
es
inc
das
and
scas
ret
and
inc
in
jmp
jae
xor
add
xor
aaa
sub
mov
test
xor
add
and
lds
ror
inc
xor
xchg
cmps
adc
add
cdq
cmp
leave
or
cmc
dec
fst
and
add
dec
out
adc
jmp
sub
out
pop
sbb
mov
je
in
mov
stc
jge
cmc
add
outs
inc
je
test
cmp
fstp
adc
into
call
inc
push
inc
add
and
pop
cmps
sbb
push
dec
or
sbb
(bad)
add
repz
push
sbb
jns
imul
cdq
pop
cmp
loope
and
mov
jae
es
jp
daa
jmp
ret
mov
test
cdq
mov
in
cmp
pusha
adc
xchg
or
xchg
jns
adc
in
gs
std
ret
call
inc
das
je
mov
or
test
jbe
xchg
push
jne
adc
add
(bad)
pop
sub
mov
mov
(bad)
aam
and
mov
adc
test
sbb
addr16
and
fistp
jmp
pushf
pop
mov
adc
rcr
pop
adc
and
add
out
mov
jmp
icebp
pop
fcom
xor
inc
and
imul
adc
in
dec
inc
or
lods
sbb
add
and
cmp
add
add
xchg
test
dec
xor
add
adc
pusha
fsub
inc
adc
adc
das
mov
ja
retf
out
pop
test
test
in
add
aad
clc
call
lods
mov
mov
dec
xchg
cmp
in
sbb
xlat
xchg
xchg
outs
jmp
sbb
adc
sub
test
loopne
inc
adc
into
rol
call
aam
mov
xchg
lods
out
rcl
in
sub
int
push
loopne
pop
loope
cdq
cmps
jae
jbe
je
jmp
or
sbb
sbb
dec
mov
or
inc
mov
jmp
push
test
cmp
rcr
sbb
xchg
imul
and
mov
aad
jno
adc
mov
or
fild
std
aam
call
retf
ins
(bad)
xchg
jns
push
add
and
aad
xchg
loopne
in
cmp
adc
mov
cmp
fcomp
stos
int3
jns
sbb
and
loopne
ins
mov
push
std
les
xchg
add
or
ins
cmp
sub
inc
pusha
ins
sub
or
cmp
jle
pop
pusha
dec
inc
ret
adc
or
adc
loop
adc
arpl
fsubrp
sbb
cdq
aam
sub
dec
xor
push
jnp
dec
sbb
fistp
adc
inc
pop
and
mov
jmp
test
shr
loopne
stos
sub
pop
call
cli
in
or
loopne
sbb
jnp
push
cmc
sti
test
xor
adc
sbb
call
cld
retf
ja
jns
add
gs
sahf
inc
adc
ss
mov
sti
mov
dec
jo
test
out
or
sbb
jmp
fcmove
pop
inc
sub
xchg
stos
shl
push
adc
loope
inc
aam
pop
xor
outs
arpl
adc
jp
push
daa
pop
push
ret
and
or
test
xor
lods
cmp
rcl
repz
gs
xor
sub
imul
enter
int3
data16
push
adc
jns
inc
pusha
sahf
fucomip
sbb
mov
adc
or
cmp
call
out
adc
push
loope
jl
and
dec
adc
jmp
adc
pushf
out
add
adc
(bad)
in
cli
and
(bad)
push
in
cmp
cld
outs
lea
fwait
int3
sbb
imul
sub
xor
sbb
int3
aam
jne
pushf
(bad)
in
and
out
mov
xchg
je
daa
ds
in
push
add
leave
sbb
(bad)
out
jg
push
shl
sbb
cdq
movs
stos
mov
pusha
push
or
ror
fwait
sub
and
shl
shl
outs
aad
loopne
sbb
xor
pop
popa
push
lea
fld
mov
cmp
jo
pusha
(bad)
sbb
mov
mov
in
cmp
adc
and
in
jne
in
in
mov
adc
and
into
aas
pop
adc
add
cdq
sbb
dec
jne
out
enter
inc
cmp
push
push
fild
push
les
mov
loope
mov
jge
cmps
jne
in
sbb
(bad)
sti
lea
mov
xor
or
ficom
and
add
stos
mov
jae
jle
jmp
xor
loope
or
out
xchg
sbb
fdiv
jmp
rcr
sub
push
adc
xchg
retf
test
in
data16
js
call
sbb
loope
adc
pop
cwde
cmp
push
jmp
stos
fild
ja
xor
cmc
pop
add
xor
mov
gs
(bad)
adc
push
popf
std
jp
adc
mov
cmp
loope
xor
push
fisub
cdq
sbb
jae
fcmovnbe
jl
jecxz
ret
sbb
imul
ss
ja
das
cmp
enter
and
push
xchg
call
or
inc
add
ja
mov
call
dec
dec
mov
cld
loope
mov
in
stos
adc
add
cmp
shr
sbb
sub
es
loopne
push
push
xor
jns
imul
fisubr
pop
cmp
fild
add
jg
add
iret
push
xor
xlat
xor
adc
mov
fs
jmp
into
or
ins
sub
jmp
les
call
movs
pop
sbb
mov
and
pop
ins
in
mov
pop
adc
xchg
jp
sbb
jbe
cmps
cmp
fisubr
out
or
gs
popf
cmp
clc
mov
pop
rcr
pop
ret
movs
fs
sub
(bad)
std
adc
dec
inc
inc
loope
push
adc
scas
push
jp
je
std
test
lods
and
jmp
retf
xchg
ins
pop
shl
cmp
mov
add
xchg
jne
cld
shl
xchg
sub
push
aad
pushf
int3
aaa
xchg
cld
jo
inc
cwde
aam
scas
lock
(bad)
cdq
sar
sbb
sar
xor
jge
call
mov
jo
imul
adc
jae
and
shl
cmp
outs
movs
or
aam
scas
jbe
mov
loope
xor
aad
ins
repnz
je
out
iret
rcr
adc
sub
int
pop
xchg
jle
movs
and
adc
loope
xor
outs
scas
xor
push
and
xor
add
iret
sub
add
cmc
adc
cmps
sub
push
loopne
and
ss
icebp
aam
outs
test
adc
jns
cmc
pop
cld
and
push
and
sub
pop
sbb
add
xchg
pop
shr
dec
test
or
aaa
sub
js
leave
mov
clc
inc
test
xchg
fld
dec
loop
sbb
push
loope
xor
jg
xchg
gs
in
mov
xor
inc
xor
stc
aad
jne
imul
rcl
mov
pop
or
psubb
xchg
jmp
std
je
and
inc
jb
sbb
(bad)
in
inc
daa
hlt
mov
sub
neg
and
pop
sub
or
add
loopne
lock
sbb
call
mov
lods
inc
mov
popa
push
add
dec
add
sbb
mov
xchg
in
and
ror
push
hlt
mov
push
lds
or
test
push
jmp
call
jg
dec
in
(bad)
clc
sbb
rcl
sbb
scas
adc
or
sub
xor
jne
mov
(bad)
aas
and
hlt
adc
sbb
adc
out
mov
out
xor
cmp
rcr
pop
aam
jecxz
pop
js
push
jmp
div
enter
jno
ins
lods
dec
leave
out
fs
ja
cmp
enter
pop
jno
mov
push
movs
xor
(bad)
xor
fsub
xor
xor
jecxz
push
mov
adc
in
push
and
int3
je
mov
mov
or
adc
mov
rol
lock
xor
mov
mov
in
addps
adc
enter
or
cwde
push
out
aam
inc
pop
inc
dec
adc
int3
or
cdq
js
shl
sti
inc
add
cmp
xor
pop
dec
nop
push
fldenv
test
or
sar
daa
jns
cwde
pop
cld
adc
xchg
std
cli
arpl
aas
jmp
dec
ja
(bad)
loope
enter
mov
xor
(bad)
jae
in
out
lods
xlat
or
scas
push
mov
fbstp
mov
std
lods
pushf
push
sbb
fisttp
push
fdiv
jmp
mov
push
jecxz
inc
adc
push
sub
dec
dec
lds
je
push
xchg
pop
mov
stos
add
sub
sub
dec
or
jmp
mov
jae
int3
std
scas
rcr
ror
push
sub
pop
shl
outs
xchg
inc
loopne
xchg
dec
xchg
sbb
fistp
gs
test
cmp
xor
mov
pop
xor
mov
ss
jl
or
or
out
pushf
sub
pop
inc
std
jo
jle
ja
and
mov
mov
xor
jmp
mov
dec
ficom
cmp
mov
jl
in
xor
(bad)
imul
call
ds
fist
fdiv
or
xchg
rcr
cmp
jl
jne
mov
dec
retf
clc
xor
shl
ret
ss
jae
or
or
outs
or
jnp
cdq
int3
jp
or
movs
and
je
sub
fistp
push
push
test
out
jnp
lock
movs
int3
xor
cwde
jno
xor
out
add
mov
and
and
xchg
adc
int3
push
mov
movs
mov
push
shl
dec
(bad)
ins
sbb
sbb
pop
jo
stc
or
xor
push
gs
popa
call
out
push
pop
in
cld
(bad)
adc
(bad)
push
stos
call
adc
hlt
outs
jne
(bad)
ins
pusha
and
mov
call
test
inc
add
out
sbb
or
sub
nop
add
fwait
stos
clc
hlt
pusha
push
in
xchg
xor
bound
pop
mov
inc
lea
cmps
adc
daa
push
ds
jo
xchg
or
push
nop
push
dec
pop
nop
jg
clc
dec
sub
dec
push
aad
cwde
aam
dec
fs
repnz
je
jge
xchg
jae
mov
sti
jno
hlt
push
(bad)
cwde
ja
jne
out
inc
lds
adc
sub
out
test
ja
mov
aam
jne
ret
ins
adc
sbb
out
or
add
aam
mov
push
enter
test
movs
pushf
or
and
cmp
or
or
aam
ins
call
or
sahf
aam
(bad)
in
rol
ins
cmp
call
sbb
gs
cmp
push
pop
call
loope
pushf
in
pop
adc
adc
inc
jae
aaa
sti
test
shl
loopne
std
into
cdq
jnp
shl
ds
and
daa
cli
sbb
add
pop
popf
data16
inc
adc
jp
loop
or
jno
inc
out
call
push
shr
mov
out
and
push
xor
imul
repz
sbb
lods
dec
push
aaa
retf
(bad)
aam
jae
clc
jecxz
sub
and
retf
inc
test
xor
push
and
je
xlat
add
fimul
icebp
inc
rcl
and
sub
xor
je
mov
push
cld
aam
jl
sub
movs
jmp
and
ins
cmp
fsubrp
mov
(bad)
shr
xchg
test
retf
cmp
call
push
icebp
jmp
adc
fdiv
add
adc
stos
pop
add
inc
pop
jecxz
movs
repz
les
and
xor
test
dec
std
push
movs
mov
sub
inc
clc
sub
and
jle
and
imul
mov
and
aam
gs
cmc
addr16
fistp
iret
nop
and
inc
xlat
test
mov
cwde
push
push
mov
and
(bad)
jae
xchg
enter
xchg
inc
adc
mov
out
cmp
cld
sti
ins
jmp
inc
adc
gs
clc
shl
cmp
or
jl
mov
fnstenv
aas
adc
loope
mov
in
mov
xor
cmc
mov
adc
jne
arpl
fdiv
call
pop
daa
add
sub
loop
push
test
sub
sbb
movs
sub
std
call
imul
add
pop
(bad)
jmp
jns
push
dec
shl
jae
and
aam
daa
push
and
dec
mov
clc
(bad)
aad
push
and
sbb
adc
dec
mov
lds
in
test
pusha
adc
std
mov
push
sub
cmps
add
add
sbb
arpl
out
xor
cmp
pop
pushf
mov
call
pop
loope
lods
inc
call
cwde
sbb
ja
shl
inc
and
je
sbb
mov
lds
mov
movs
cmp
cwde
lods
pop
mov
loop
dec
or
bound
lods
aad
out
sbb
idiv
mov
sbb
lods
mov
dec
in
out
je
push
inc
jmp
in
jmp
jl
mov
fmul
and
mov
add
xor
shr
fadd
cmp
ins
push
inc
stos
sbb
aam
out
mov
repnz
inc
stos
ins
adc
fld
outs
add
inc
sti
jmp
gs
inc
pop
sbb
sub
sbb
out
call
xchg
pop
mov
stos
je
jmp
cmp
lds
xchg
mov
sbb
jl
push
jmp
ins
imul
sbb
in
popa
pop
dec
and
push
retf
stos
lock
nop
mov
stos
ins
cmp
push
and
les
sub
xchg
ja
(bad)
cmp
cmps
xchg
into
sbb
cmp
sti
lock
pop
repnz
in
adc
fild
jae
xchg
std
jae
movs
jmp
and
les
sub
and
in
je
xchg
mov
sbb
pop
iret
fisttp
mov
mov
mov
pop
push
(bad)
test
push
jmp
lock
jecxz
inc
xchg
cmp
test
xor
shr
xor
pop
sub
in
loopne
add
dec
dec
adc
loopne
sti
or
adc
or
pop
hlt
cld
pop
push
fild
aam
cmps
pop
dec
and
clts
sub
pop
xlat
dec
movs
adc
div
and
jl
pusha
dec
add
mov
inc
xchg
jo
out
pop
sbb
sbb
xor
and
cwde
aam
aas
(bad)
cmp
popa
dec
scas
push
enter
and
pop
scas
hlt
(bad)
out
jl
js
push
in
gs
stos
xchg
and
pop
sbb
pop
stc
or
hlt
inc
jg
sub
nop
es
mov
in
sub
cmps
adc
std
inc
scas
mov
jae
scas
(bad)
es
adc
push
cs
add
adc
neg
jmp
push
out
fcmovnb
sbb
fcom
dec
add
inc
mov
and
(bad)
nop
inc
jp
add
push
gs
rcr
out
(bad)
add
int
(bad)
jge
and
mov
in
add
je
jmp
bound
test
aam
jmp
frstor
fdivr
jmp
jae
inc
arpl
or
repz
pop
dec
xchg
cld
adc
push
adc
(bad)
mov
sub
jecxz
and
push
xor
ins
sbb
dec
jno
test
cmp
mov
mov
scas
sub
ss
imul
push
jae
and
or
sbb
mov
jo
xchg
push
xor
jp
aaa
inc
das
clc
or
mov
pop
int
xor
cmps
and
push
jns
dec
mov
aam
(bad)
xor
test
sub
jl
test
mov
sbb
out
sti
mov
adc
jns
pop
jecxz
test
mov
push
dec
jmp
jmp
dec
jmp
pushf
clc
sub
xor
sub
loopne
ins
sbb
mov
pop
pop
aam
loopne
and
mov
aad
lock
inc
xor
js
cld
iret
pop
call
cmp
xlat
cli
in
outs
inc
ja
sub
sub
movs
pop
les
push
jmp
mov
sbb
push
enter
push
xlat
je
data16
sbb
in
xor
xor
je
retf
add
rcl
stc
movs
cmp
aam
inc
call
aaa
push
mov
(bad)
xor
or
xlat
sbb
dec
and
fld
inc
or
ss
pushf
inc
mov
test
test
pop
aaa
jl
cld
jmp
jl
aam
out
cwde
push
pop
push
xchg
loope
cmp
jae
pop
inc
and
movs
or
in
inc
mov
inc
outs
(bad)
enter
hlt
movs
(bad)
dec
mov
loop
(bad)
dec
cli
jne
sti
je
push
pop
jp
gs
mov
sbb
adc
adc
cdq
outs
jns
sahf
out
ins
in
ss
lods
or
(bad)
jge
movs
sub
cmp
fmulp
pop
in
rcr
sahf
call
fadd
adc
out
sbb
adc
test
add
adc
test
jns
inc
jno
add
mov
jl
es
adc
adc
xor
les
push
xor
pop
xchg
sahf
adc
imul
mov
xor
or
stc
adc
clc
aam
call
jmp
xor
in
cmp
push
xor
pop
fwait
and
xor
sub
xchg
jp
mov
jge
cmps
cmp
lods
adc
sar
cwde
push
adc
pop
cwde
jns
inc
inc
out
in
pop
cmp
sbb
int3
repnz
mov
cmc
jae
imul
sbb
(bad)
mov
xchg
aas
push
out
jl
data16
inc
popf
call
inc
inc
cmp
push
sub
bound
cmp
shl
sbb
mov
nop
call
es
jle
lds
inc
adc
cmp
mov
loope
add
fist
test
mov
or
imul
pop
test
xchg
ror
ret
je
inc
jo
push
dec
in
movs
mov
std
call
cli
out
fs
xchg
sbb
or
loopne
dec
jmp
inc
stos
sbb
stos
test
dec
into
and
sub
ds
fcomp
jne
out
jbe
aaa
and
cmp
jo
push
cwde
jecxz
jnp
xchg
jne
push
adc
sbb
jp
fcom
rcl
dec
pop
and
push
push
xchg
popf
jne
push
sti
imul
lock
mov
sub
pusha
enter
inc
outs
xchg
or
push
push
cmp
out
aad
cmp
mov
jno
or
jp
inc
push
test
cmps
add
fild
mul
rcl
stc
lods
mov
je
inc
adc
push
cmp
sub
jmp
cli
call
inc
dec
push
(bad)
jg
mov
jo
fisubr
femms
mov
push
jmp
fiadd
addr16
mov
inc
adc
mov
jmp
jno
ss
dec
cwde
lock
xchg
push
clc
jmp
mov
jae
out
xchg
push
adc
aam
add
lds
sbb
cmc
xlat
sbb
sub
cmp
push
mov
cmps
add
push
pushf
int3
pop
popa
push
adc
rcr
je
inc
lahf
add
dec
sub
or
jo
pop
movs
imul
push
add
call
mov
xchg
fst
adc
fcom
sbb
dec
xor
adc
and
das
jns
iret
out
push
ret
rcl
inc
loop
pushf
sub
mov
imul
cwde
xchg
dec
cmp
xchg
in
out
sbb
imul
mov
lods
test
adc
push
jae
std
fistp
xor
mov
pop
into
nop
pop
cwde
mov
lock
xchg
xchg
pop
jae
inc
shl
pminsw
out
or
push
test
push
call
inc
and
cld
mov
aad
and
inc
add
loopne
mov
fcomp
jbe
fcom
iret
jmp
mov
xor
je
in
cli
jle
or
jne
jnp
and
outs
sub
and
xlat
mov
in
adc
cmp
jne
adc
push
fisub
pop
ja
push
sbb
gs
in
loopne
dec
pop
adc
mov
test
sti
jae
cmp
inc
or
fcomp
jmp
sbb
dec
adc
adc
das
fbstp
jge
jmp
xor
dec
mov
das
xor
adc
movs
dec
xchg
cmp
neg
in
mov
pop
xchg
mov
ins
rol
adc
add
pusha
adc
aaa
jne
jae
mov
pop
hlt
call
aam
cli
shl
sub
cs
pop
mov
xor
sub
mov
sahf
pop
(bad)
in
stos
leave
adc
add
sbb
push
adc
(bad)
push
pop
add
out
lds
aaa
jne
shl
mov
retf
dec
out
mov
in
mov
adc
sub
inc
dec
jmp
in
push
pop
push
add
mov
xchg
mov
cdq
les
or
out
mov
not
xor
adc
aas
xor
rcl
push
loopne
ins
xchg
dec
xor
outs
and
jns
ret
pop
imul
mov
push
mov
add
add
int3
call
fdivr
cmp
ins
rcl
sub
fcomp
aam
pop
adc
or
sti
inc
push
adc
sbb
ins
popa
and
in
sub
mov
xchg
sbb
mov
(bad)
jmp
out
push
sbb
in
dec
mov
jmp
mov
mov
neg
jo
movs
xchg
(bad)
aam
mov
js
shl
loope
call
jnp
pop
xlat
xchg
cmp
repz
out
sbb
ja
cmc
int
and
(bad)
gs
xchg
iret
fcomp
and
ficomp
cli
pop
adc
sahf
push
and
adc
test
xor
bound
mov
sbb
imul
xor
sub
enter
pop
mov
loope
ss
bound
fmul
std
je
sbb
jae
movs
and
or
lods
or
stos
pop
mov
in
mov
iret
ins
or
or
jno
pop
cmps
pop
push
fstp
pop
add
or
cmp
ficom
mov
or
in
gs
out
xchg
mov
adc
not
dec
jne
xor
sbb
hlt
sub
cmp
or
sbb
adc
sub
cmc
jns
add
mov
dec
adc
out
dec
sbb
mov
out
pop
ret
in
jmp
imul
sbb
stos
and
je
std
lahf
xor
ret
mov
out
push
xor
arpl
clc
std
out
int
shl
call
loopne
dec
das
push
sar
add
xchg
add
(bad)
mov
mov
dec
lds
stos
movs
in
in
ret
adc
sbb
xchg
xchg
movs
mov
in
push
dec
test
fs
inc
cmp
ficom
pop
cmps
cmps
jno
cmp
mov
jecxz
sbb
xchg
je
(bad)
loop
sbb
fdiv
fsubr
mov
or
or
push
adc
add
fsub
push
pop
loope
sbb
jp
push
pop
ja
and
sti
jg
mov
in
out
in
jbe
jno
cs
inc
pop
(bad)
clc
pop
push
xchg
dec
push
loopne
cwde
leave
add
test
test
movs
lock
pop
out
adc
in
pop
cld
jmp
sbb
sbb
loope
xchg
cmp
mov
in
adc
(bad)
adc
xchg
sub
pop
cld
sbb
int
xchg
mov
ss
cmp
aam
adc
dec
rcr
test
jnp
test
jg
pop
mov
push
in
cld
xor
test
arpl
and
fcom
bound
ja
or
add
xor
adc
and
mov
adc
and
inc
xchg
test
mov
dec
sbb
(bad)
ficom
jo
jbe
xchg
push
gs
sbb
out
fidiv
fnstenv
xor
add
or
ins
in
jae
(bad)
cmps
add
sbb
ja
mov
shl
adc
adc
sub
movs
bnd
adc
nop
aad
jge
ds
or
add
scas
mov
leave
addr16
add
xchg
inc
cdq
or
or
loope
xchg
aad
rcl
movs
rcl
jo
aam
(bad)
xlat
mov
add
cmp
test
mov
mov
cmp
dec
inc
xchg
push
and
cld
fisttp
ja
and
ins
mov
or
mov
cmp
push
push
xchg
gs
mov
dec
cmp
push
cwde
xor
add
call
pop
sbb
test
jl
in
cld
add
xchg
es
jmp
test
(bad)
neg
xchg
(bad)
xor
lds
ins
lock
or
dec
mov
aam
and
push
cwde
rcr
nop
sbb
push
loop
xor
push
mov
dec
out
or
xor
lock
addr16
movs
ja
cwde
mov
in
out
adc
inc
movs
sbb
loopne
sbb
xchg
arpl
pop
mov
movs
sbb
out
dec
retf
adc
adc
mov
mov
mov
xor
sar
adc
jae
fdivr
mov
movs
sti
out
inc
test
xor
mov
jae
pop
call
inc
cmp
in
adc
loope
sbb
xchg
aam
sbb
push
outs
adc
xor
and
xchg
or
sbb
clc
xor
stc
push
mov
popa
adc
adc
sar
jecxz
jae
loop
xor
ins
jno
adc
or
jmp
es
mov
cwde
sbb
in
cld
xchg
je
je
(bad)
pop
ja
push
cli
or
pushf
adc
cmp
ds
sbb
mov
ins
jno
int
cmp
cwde
jmp
or
addr16
cmc
jno
shl
sbb
pop
sub
in
mov
add
mov
sbb
cmp
(bad)
out
fsub
pusha
shl
jmp
sbb
and
xchg
in
and
jle
clc
fild
adc
jmp
mov
and
pop
nop
add
and
ret
add
out
adc
fisub
jno
hlt
jne
test
mov
xlat
mov
xor
lea
inc
sub
or
mov
aam
std
or
xchg
jmp
inc
cwde
cld
retf
pop
mov
jnp
pop
fisttp
mov
mov
xchg
dec
pop
pop
sbb
cmp
mov
fwait
sbb
sbb
xlat
push
inc
push
shl
in
and
dec
in
mov
popa
aad
aaa
out
inc
sbb
xchg
ins
push
jmp
shr
and
or
mov
shl
mov
sbb
addr16
shl
push
push
daa
call
mov
sti
dec
push
push
push
or
mov
pop
xchg
pop
loopne
in
nop
sub
xchg
push
retf
jnp
jno
pusha
cmps
je
sub
jbe
shl
sbb
cwde
call
hlt
add
pushf
ins
sbb
loopne
sbb
cmp
sbb
pop
cld
sbb
aad
mov
rcl
dec
loopne
out
and
jge
cmp
sub
xchg
lods
cld
fistp
fcmovbe
pop
xor
sbb
cdq
shr
stos
in
add
and
mov
and
pop
mov
cld
xchg
mov
repnz
mov
sub
mov
clc
adc
pop
loopne
jns
in
sti
mov
sbb
ins
inc
sbb
push
and
push
aad
jmp
inc
inc
adc
dec
sbb
sbb
cmps
mov
pop
push
rcl
jmp
xor
retf
add
pop
scas
mov
jp
test
sub
add
add
shl
mov
push
sbb
loop
or
rcl
fild
sbb
cdq
adc
loop
mov
enter
ffreep
add
sbb
(bad)
xchg
pop
ret
pop
add
xor
adc
push
sub
stos
add
mov
sbb
lods
test
push
add
xor
aam
test
loopne
call
loope
mov
adc
cld
popa
pop
xor
inc
js
in
nop
push
out
into
fcomp
mov
in
mov
add
add
in
inc
jecxz
adc
push
and
push
and
stos
in
pop
rcl
fbstp
inc
or
jmp
xchg
inc
sbb
mov
xlat
dec
adc
mov
or
in
adc
jle
adc
sub
in
outs
push
inc
sbb
int
dec
imul
sbb
and
arpl
and
retf
sbb
repz
sbb
or
jnp
test
xchg
in
mov
stos
jmp
xchg
mov
lds
sbb
cmp
sbb
es
in
push
cmc
push
jecxz
pushf
neg
ins
push
or
xchg
xchg
adc
pop
fdivr
lock
inc
js
jmp
aam
dec
sbb
imul
pushf
inc
out
test
stos
loope
jl
dec
push
loop
adc
push
outs
test
fsubr
mov
or
fmul
gs
pop
out
popa
add
sti
jmp
or
sbb
mov
and
xchg
je
in
or
and
xor
mov
addr16
js
adc
es
dec
pushf
adc
(bad)
cli
mov
jl
add
test
mov
push
sbb
xlat
hlt
pop
push
jge
xchg
call
cmp
xchg
push
call
test
cld
push
xchg
das
mov
lods
rcl
jg
cmp
add
lods
or
xchg
lds
stos
mov
push
test
call
repnz
push
movs
addr16
hlt
es
sub
stc
mov
test
pop
cld
movs
and
cmp
das
imul
movs
push
pop
in
fbstp
in
mov
dec
jo
mov
xor
je
shl
js
ficomp
cmp
imul
xor
mov
fwait
jecxz
shl
in
cld
aam
xchg
in
jl
push
mov
ret
call
fistp
adc
enter
mov
gs
outs
mov
xchg
scas
cld
fidiv
jne
pop
pushf
pop
add
call
push
jnp
jmp
inc
pop
sub
and
call
jmp
cwde
sbb
jmp
pop
les
fild
push
sbb
sub
cmp
cmp
push
(bad)
std
pop
and
sub
test
xor
outs
mov
push
sbb
out
bound
test
push
inc
xor
out
pop
push
adc
xchg
adc
cmp
jae
ins
push
dec
cwde
inc
int3
fcom
and
jmp
test
mov
cmp
lock
in
hlt
aad
pop
mov
sar
jecxz
add
mov
xchg
nop
out
jecxz
test
icebp
fadd
fsubr
sbb
lods
dec
test
std
push
xchg
cld
jno
push
xchg
push
mov
pop
dec
push
add
lock
jo
mov
jp
je
xor
mov
pushf
loopne
add
xchg
lods
add
cmps
call
das
push
pop
movs
push
cmp
dec
hlt
pop
cld
(bad)
and
in
movs
mov
push
imul
xor
test
or
dec
pop
ret
lds
or
xchg
outs
xchg
sbb
xor
and
dec
in
ins
push
mov
adc
repz
adc
lods
adc
arpl
jnp
sbb
loopne
sbb
idiv
iret
or
jmp
adc
and
dec
sbb
in
shl
add
jbe
fidiv
mov
aam
not
xor
jns
call
clc
pusha
imul
jbe
pop
sbb
pushf
sbb
inc
xchg
cmc
leave
jecxz
add
imul
sbb
mov
jl
jg
aam
hlt
jge
xlat
sbb
cld
out
mov
arpl
mov
sbb
jb
std
jo
out
loope
shl
mov
(bad)
xor
in
jge
mov
ins
cld
jbe
fstp
pusha
xchg
jb
data16
cwde
pop
sbb
sbb
mov
dec
jno
add
test
in
xchg
or
loope
outs
adc
lods
loop
in
dec
xchg
or
mov
jecxz
jno
sbb
mov
mov
and
fs
movs
inc
or
test
or
sti
call
pop
or
inc
push
mov
mov
jl
test
outs
call
clc
imul
test
adc
pop
sbb
mov
and
dec
xor
hlt
xchg
dec
clc
ins
stos
pop
jp
jmp
push
in
pop
outs
adc
add
xchg
dec
jmp
shr
out
push
cwde
in
inc
fnop
jne
cmp
xor
es
(bad)
in
test
push
scas
add
fsubr
inc
in
ins
and
and
loopne
les
jno
cdq
jmp
cmp
or
call
inc
cmc
lods
mov
and
xlat
and
sbb
ins
xor
das
mov
es
pop
ja
and
rol
fsubrp
fcom
push
out
imul
clc
push
pop
jg
dec
adc
adc
sub
mov
popf
out
fst
push
sub
cmp
adc
xlat
js
cwde
inc
shr
sub
inc
std
inc
add
cmp
mov
test
xor
aaa
cmps
loopne
movs
add
stc
sub
sbb
jmp
hlt
sbb
cdq
cld
jl
sahf
xor
xchg
add
aad
dec
sbb
jmp
fistp
hlt
xchg
pop
loope
(bad)
sbb
jns
add
lods
inc
pop
sbb
mov
idiv
xor
add
sbb
dec
push
push
les
and
add
xchg
pop
push
adc
not
addr16
push
(bad)
jbe
sub
fidiv
add
and
jnp
inc
icebp
call
push
sub
lock
mov
sub
jp
aam
in
ret
pop
sbb
cld
inc
and
(bad)
or
mov
fsubr
jns
aad
jb
mov
call
test
rcl
clc
in
sub
rcr
push
mov
in
and
xchg
push
pop
lods
xor
je
push
dec
test
dec
or
dec
addr16
nop
cmc
pop
std
and
repz
pusha
ss
jno
mov
loop
sbb
or
sbb
unpckhps
xor
sbb
adc
test
xor
gs
cld
pop
in
in
adc
or
loopne
xchg
adc
out
fiadd
add
sbb
mov
and
in
jae
push
je
and
out
inc
repz
dec
int
pop
or
out
ins
lock
ins
js
push
mov
or
call
in
adc
loopne
cmps
ins
sub
sub
push
add
(bad)
pushf
push
push
pop
or
retf
and
xlat
in
jo
or
sbb
cmp
fnstcw
daa
cli
xchg
cld
test
dec
test
pop
arpl
xchg
sbb
ss
push
cmp
xchg
mov
jb
mov
sahf
jae
dec
out
sbb
push
dec
inc
or
mov
jmp
push
aam
pop
cmp
stos
ja
mov
mov
sbb
int3
loopne
cmp
hlt
ror
sbb
and
adc
xor
jmp
shr
push
cmp
sbb
pop
jge
scas
sbb
gs
cmp
push
rol
imul
shl
push
(bad)
add
out
sbb
in
add
fdivr
lds
and
pop
jmp
inc
pop
push
adc
mov
ins
int3
cmps
sbb
sbb
push
ror
addr16
inc
int3
stos
cld
sub
enter
push
xchg
gs
mov
jb
shl
xor
test
imul
repnz
add
add
movs
lods
lods
push
and
adc
aam
add
mov
(bad)
rcr
out
push
test
or
ins
in
push
cmp
popa
gs
je
jae
push
inc
push
mov
pushf
(bad)
or
rcr
or
js
push
int
in
loop
pop
aam
scas
pop
mov
addr16
fldpi
dec
add
add
xlat
push
sbb
mov
loopne
cmp
jae
or
cdq
out
push
cmp
inc
add
mov
vpaddb
ins
jbe
or
and
pop
lods
mov
test
loope
sbb
inc
mov
pop
jecxz
sbb
push
ror
xor
mov
cld
xchg
hlt
int3
mov
pusha
inc
or
add
add
test
add
hlt
cmps
popa
xor
dec
add
xchg
out
arpl
dec
mov
adc
add
xchg
lds
movs
int3
out
ins
mov
xor
xor
aas
mov
jg
add
in
or
sbb
mov
and
aad
xchg
in
es
xchg
push
xchg
ja
je
aaa
shl
dec
ss
fsub
fnstsw
shr
jno
dec
fld
stos
aad
xchg
mov
xchg
addr16
sub
and
add
bound
in
adc
ins
push
ficomp
dec
jmp
shl
(bad)
fdivr
mov
jno
fcomp
push
stc
adc
in
fld
jne
sahf
xor
scas
sbb
push
fistp
inc
xor
test
enter
cld
jne
hlt
inc
and
and
xor
out
pop
sbb
dec
inc
xchg
pop
mov
sbb
jmp
add
jp
int
cld
and
je
sbb
lea
out
gs
mov
jns
xor
sbb
ret
fidivr
xchg
das
jmp
daa
(bad)
mov
fild
push
es
and
iret
loop
ins
daa
push
in
xchg
test
sub
ficom
cmc
movs
call
fdecstp
add
pushf
or
scas
out
jae
push
mov
mov
xchg
add
loopne
ret
ins
pushf
call
inc
ror
test
inc
movs
xor
push
bound
pop
movs
data16
push
scas
inc
inc
(bad)
std
into
adc
jg
loope
js
pusha
int3
mov
fld
ins
fdiv
in
jl
sub
jmp
push
sti
push
call
pop
movs
dec
fidiv
xor
call
or
xchg
and
out
imul
pop
call
jns
xor
pop
cmp
mov
cld
lods
ins
push
pop
imul
setl
xor
inc
xchg
jl
xor
aad
pushf
push
call
addr16
mov
inc
sub
mov
std
mov
(bad)
addr16
xor
aam
int3
xor
fiadd
(bad)
out
cmp
lock
cmc
xchg
and
aam
popf
cld
jae
add
and
call
ss
xchg
pop
jge
into
js
gs
sbb
int
xchg
rcr
jl
push
add
or
mov
mov
loop
fdivr
(bad)
shr
aad
std
jo
maxps
je
(bad)
in
enter
mov
pop
jb
ret
pusha
fimul
and
dec
bound
cld
loope
xor
cdq
cs
pop
or
adc
inc
out
inc
or
sbb
aas
fild
add
cmc
adc
push
es
xor
aad
cld
fcom
aas
xor
call
aam
in
and
mul
fs
cmps
loopne
mov
or
mov
in
in
clc
clc
cwde
pop
sti
and
mov
mov
lock
enter
es
adc
lds
jl
xchg
jne
je
in
loopne
lods
push
sbb
in
mov
adc
lods
sbb
xchg
and
loop
cmp
into
loope
pop
push
sbb
out
in
and
je
movs
out
pop
retf
sbb
pusha
div
call
ins
imul
fmul
mov
xor
retf
push
sub
pop
dec
jmp
cmc
xchg
cwde
movs
fbld
and
inc
sbb
popf
sub
out
into
inc
pop
fnsetpm(287
fwait
lods
lock
xor
add
mov
lock
jmp
jae
xchg
lea
inc
std
int3
push
loop
movs
stos
adc
ss
push
mov
test
mov
jmp
sub
(bad)
out
dec
je
stc
and
push
call
shl
loop
xor
cli
aad
sbb
dec
jecxz
sub
rol
fistp
adc
fiadd
sbb
lods
dec
push
dec
es
mov
std
inc
mov
and
ret
xor
mov
lock
fs
pop
(bad)
nop
nop
jmp
mov
enter
ja
mov
fdivr
push
sbb
pop
xchg
je
fisttp
xchg
rcl
push
in
cmp
sub
inc
in
push
fcomp
inc
sbb
out
pop
ins
cmp
fbstp
repnz
mov
jmp
cs
push
call
arpl
js
(bad)
jmp
jne
jnp
adc
or
jns
out
jmp
aas
sbb
out
div
mov
cmps
inc
sbb
out
cwde
ja
fsubr
sub
xchg
adc
out
ficomp
sbb
std
pop
mov
sbb
adc
jle
pop
sbb
std
loopne
sbb
xor
push
test
sti
xor
add
aaa
enter
jmp
pop
cwde
lock
push
ja
aad
cwde
cmps
pop
inc
pushf
test
cmp
add
xchg
xchg
test
inc
dec
sbb
pop
cmp
mov
xor
iret
cmp
rcl
cmp
jb
pop
(bad)
in
xor
xchg
sti
loop
xor
movs
sub
sbb
ja
cwde
mov
call
mov
jg
pop
mov
jb
fidiv
rcl
in
add
add
pop
retf
pop
dec
movs
sar
xchg
adc
in
and
mov
sti
inc
test
and
bound
pusha
daa
xchg
jmp
rcr
pop
add
jno
aam
inc
jo
gs
sbb
fcom
shr
jmp
outs
and
sub
fisub
sbb
ins
mov
loopne
ins
or
sbb
das
repz
inc
je
and
and
pop
push
xor
xchg
push
icebp
pop
inc
adc
test
jno
fst
inc
jmp
push
inc
xchg
loopne
and
lock
xchg
inc
dec
in
(bad)
cld
ins
in
jo
mov
sti
(bad)
je
sbb
into
jecxz
cmc
movs
sbb
and
loopne
stos
sub
sbb
push
cmps
cmp
aam
or
xor
in
aad
mov
cmp
sbb
into
inc
jmp
gs
jecxz
jns
and
fidiv
into
leave
pushf
sbb
inc
test
jp
mov
shr
sbb
sub
push
jge
dec
xor
jne
mov
ja
idiv
add
aas
mov
fucomip
unpcklps
pop
or
jae
pop
jmp
outs
mov
sub
arpl
ja
jl
adc
push
add
jne
loop
call
inc
cld
je
jnp
push
mov
pop
sbb
cli
cmp
and
cmp
pop
pusha
jns
and
fcomp
imul
inc
cld
shr
ds
adc
mov
neg
xor
loop
dec
xor
xor
cld
stos
sbb
jno
ja
mov
push
int3
jnp
sbb
(bad)
adc
jmp
pop
or
arpl
call
jne
mov
adc
mov
aam
in
daa
out
mov
mov
or
ins
out
clc
xor
in
jmp
pop
pop
and
clc
nop
adc
adc
rol
gs
popf
mov
hlt
inc
or
adc
push
xor
repnz
jno
cld
call
sub
jmp
cdq
cmc
rcl
xchg
(bad)
or
mov
div
adc
and
test
and
mov
dec
mov
mov
loopne
lds
jmp
push
in
or
and
jecxz
cmc
fs
rcl
jge
jmp
addr16
push
sub
sub
data16
push
scas
sbb
imul
in
adc
add
jl
lods
mov
jns
fld
jnp
cld
sub
jmp
xchg
push
mov
jnp
jno
movs
rcl
push
test
in
adc
push
fst
fist
xor
cmp
enter
pop
int3
xchg
push
ins
mov
xchg
call
hlt
pop
mov
gs
mov
or
retf
jns
aam
mov
cmp
ins
jp
add
aad
fxtract
adc
in
sar
movs
push
inc
xchg
xchg
sbb
ins
xchg
sbb
je
jmp
es
xor
in
sub
cmps
xchg
sbb
jg
loopne
in
mov
sbb
pop
iret
mov
lock
bound
jne
std
and
call
or
addr16
cwde
add
push
aad
jecxz
imul
and
movs
adc
ror
mov
out
jl
jmp
sub
in
in
ror
and
mov
adc
mov
xchg
mov
fld
aas
scas
add
mov
adc
loopne
inc
gs
fs
cmc
xor
adc
cld
mov
movs
popf
and
in
sub
aam
adc
icebp
xchg
pop
call
stos
cmp
outs
es
push
loopne
push
dec
mov
jmp
stc
pop
and
fcomp
jae
mov
add
cwde
mov
mov
aam
call
clc
jnp
leave
sbb
and
or
or
and
outs
or
mov
dec
push
pushf
out
sbb
iret
test
ror
push
adc
lods
int
ja
jbe
loope
and
in
xchg
and
lods
scas
mov
movs
push
bound
jnp
hlt
mov
lahf
cmp
xchg
clc
and
sbb
and
int3
sbb
repz
in
cld
ins
cmps
rcl
push
(bad)
adc
popf
mov
mov
dec
movs
ds
fs
test
popf
jbe
pop
lods
and
push
pop
gs
xor
jge
lods
test
push
cmp
push
push
xor
or
sub
xchg
aaa
js
sbb
dec
ror
in
add
lods
and
jl
imul
sub
adc
xchg
clc
sbb
or
pop
movs
std
outs
dec
ficom
xchg
cli
dec
push
ins
aad
lock
jne
and
dec
sbb
out
sbb
iret
lock
add
pop
jecxz
mov
das
rcr
hlt
jno
test
std
and
or
jns
dec
mov
xchg
push
xchg
int
and
(bad)
cld
(bad)
ins
test
push
pop
and
stos
cdq
xor
push
repz
jb
pusha
test
inc
sbb
(bad)
xlat
out
jge
adc
js
cld
sub
push
scas
inc
mov
out
xchg
sbb
sbb
fcom
bound
xchg
cwde
adc
cmp
add
sti
and
mov
and
movs
or
cld
xlat
jmp
or
jns
in
push
mov
pop
jns
aaa
pop
call
ss
in
pop
push
sbb
movs
mov
add
outs
mov
aad
dec
fneni(8087
sbb
jae
retf
ret
jo
js
add
ja
push
out
mov
mov
in
loop
mov
inc
xlat
shr
or
sar
into
inc
adc
mov
inc
loop
js
fs
adc
push
push
cmp
in
jmp
cdq
dec
push
adc
ins
aad
retf
outs
inc
dec
retf
not
sub
adc
mov
jae
das
std
pop
fisubr
aam
jo
xchg
mov
inc
inc
arpl
xor
cmp
xchg
int3
enter
mov
aaa
loop
push
mov
imul
adc
and
ret
push
or
pop
lock
and
imul
dec
or
movlps
and
sbb
cmp
mov
popf
jl
xchg
hlt
popa
arpl
push
and
cld
sbb
or
aam
mov
loope
adc
cdq
retf
mov
sbb
das
int
xchg
add
pop
pop
nop
call
test
pushf
jmp
mov
nop
push
add
pop
aaa
mov
sbb
mov
and
std
jbe
gs
or
out
ins
inc
repnz
in
push
adc
(bad)
and
jecxz
sub
push
int3
es
ins
sti
add
mov
xchg
gs
out
mov
push
pop
xor
add
xor
cld
aad
in
cmp
dec
fucom
pop
int3
dec
loop
push
adc
cmp
imul
mov
sub
out
neg
repz
scas
loop
or
jne
jmp
sbb
loopne
push
sbb
imul
dec
mov
rol
jle
lods
inc
outs
es
push
in
xchg
pop
pushf
cmps
ja
adc
rcl
lods
in
fcomp
dec
pop
jl
std
jne
sbb
jns
dec
push
or
cdq
(bad)
pop
loopne
sub
arpl
xor
(bad)
cld
dec
outs
and
adc
push
pop
and
push
jl
pop
test
adc
sbb
adc
cmp
xor
test
hlt
jo
lods
imul
add
sbb
mov
das
in
repz
pop
mov
jae
test
mov
adc
cmp
jno
inc
cld
mov
in
sbb
out
stos
push
jns
leave
cwde
dec
push
xchg
mov
mov
jno
fninit
test
stc
cdq
and
rep
sub
or
sub
(bad)
test
cmp
xor
test
xchg
arpl
pop
jae
push
push
ja
and
call
xor
in
cmps
add
mov
in
jecxz
jae
sbb
mov
sbb
mov
int3
xchg
mov
es
cmp
test
pop
xchg
ror
mov
test
or
loop
sbb
sbb
ja
or
and
jno
call
outs
movs
ret
mov
pushf
jmp
add
sbb
inc
or
cwde
and
sbb
sbb
cli
ja
adc
std
movs
jns
mov
pop
or
loope
xor
cmp
xor
push
or
push
xor
jl
aaa
sub
mov
push
jns
test
aam
ss
mov
fcom
ret
dec
and
cwde
dec
inc
icebp
adc
ja
sub
sub
out
mov
adc
push
call
lods
sti
cwde
cmp
in
aas
add
mov
push
sbb
shr
lock
mov
fdiv
or
loopne
add
mov
pop
ja
repz
in
cld
lods
jae
mov
add
add
sub
mov
fdiv
add
ret
push
loope
test
fcomp
repz
call
rcr
pop
aam
push
push
inc
add
imul
or
mov
mov
cs
cmc
xor
xor
mov
push
inc
pop
inc
or
out
(bad)
sub
stos
and
sub
adc
test
or
jae
mov
mul
pop
pop
adc
jle
call
push
out
fwait
cwde
push
cmps
adc
cld
ret
xchg
adc
push
inc
nop
stos
ins
xchg
outs
cmc
adc
iret
imul
mov
xor
out
xlat
jbe
mov
dec
in
je
(bad)
imul
dec
imul
in
out
(bad)
bnd
and
xchg
js
test
xlat
stos
(bad)
sti
repnz
or
dec
lahf
call
dec
xor
loope
sbb
out
js
push
cmp
xor
in
xchg
add
daa
cld
jnp
fcom
test
out
out
sbb
(bad)
adc
loopne
(bad)
imul
test
call
xor
sbb
movs
xchg
add
jmp
inc
movs
adc
sub
push
dec
movs
cmpxchg
adc
rol
pop
xor
jo
cmp
stos
adc
xchg
test
dec
add
test
(bad)
sbb
lds
in
adc
xchg
push
test
mov
lods
jmp
sbb
push
aas
cs
retf
inc
push
cmp
inc
push
mov
pop
imul
cld
or
mov
jg
je
shl
cmps
dec
sbb
sbb
arpl
adc
vpcmpeqb
gs
fsubp
mov
or
ror
pop
xchg
sbb
jnp
sbb
stos
dec
xor
cmp
aad
inc
pop
add
ins
loope
xor
cmp
retf
pushf
push
add
scas
pop
rdpmc
ss
sbb
cmp
lock
lds
cld
ins
mov
dec
aad
out
push
nop
xchg
xchg
inc
ins
pop
and
fcomp
adc
into
dec
movs
push
out
add
cmps
inc
or
xor
mov
hlt
add
bound
test
jecxz
call
into
adc
sahf
cld
(bad)
je
or
cmps
sbb
addr16
arpl
sbb
cmp
xchg
push
mov
xchg
test
loopne
loopne
xor
pop
xlat
dec
test
sti
je
and
bound
out
cmp
outs
lds
std
loopne
jnp
ror
inc
sub
dec
push
xchg
dec
add
fcom
test
ficomp
frstor
in
pop
ins
fs
xchg
adc
sbb
inc
xchg
test
in
jbe
mov
cmp
rcr
cwde
test
mov
ins
popa
sbb
jmp
cmps
arpl
adc
pop
jmp
sbb
in
jge
jmp
fwait
movs
call
cld
aam
or
jae
movs
retf
jmp
jle
aad
in
pop
fdiv
inc
call
xchg
pop
and
add
iret
outs
loop
es
test
ja
icebp
sti
mov
pop
je
loopne
cmp
mov
outs
pop
pushf
xchg
jecxz
call
add
sub
scas
in
pushf
mov
jno
push
(bad)
loopne
mov
pop
pop
mov
push
out
sub
les
or
in
lods
loop
push
push
repnz
mov
adc
xor
jge
enter
adc
xor
and
mov
mov
jnp
jmp
add
xchg
add
scas
jnp
or
call
sbb
ja
mov
sbb
and
xlat
inc
xchg
loopne
out
xor
or
push
jno
pop
ins
in
adc
mov
cmp
repz
mov
push
int3
arpl
add
outs
jnp
inc
movs
add
scas
adc
pop
stc
mov
mov
imul
push
push
fwait
std
push
add
xchg
sahf
sti
adc
ins
jb
imul
mov
std
fwait
mov
gs
cmp
inc
push
mov
jl
or
sbb
jmp
jnp
call
in
xor
sub
aam
(bad)
es
push
paddw
xchg
addr16
loop
hlt
add
call
adc
retf
dec
xchg
imul
pop
sbb
dec
dec
xchg
inc
(bad)
mov
ret
jns
movs
(bad)
sti
sbb
dec
push
or
sub
hlt
or
jnp
jno
enter
loop
sbb
out
sbb
inc
daa
lods
lds
pushf
hlt
jmp
inc
sub
adc
sti
rcr
je
fninit
test
js
inc
imul
xchg
pusha
clc
aaa
mov
fadd
jns
pop
fbld
in
xor
add
aam
test
bound
dec
fs
out
adc
(bad)
push
mov
in
stc
retf
mov
(bad)
sar
mov
imul
add
dec
ret
clc
sbb
cs
repnz
loope
xor
in
or
jnp
rcl
ret
ins
xchg
rol
in
test
pop
rol
cmps
lods
cmp
jnp
adc
stos
mov
(bad)
lods
mov
ss
inc
sti
mov
pop
shl
sbb
xchg
adc
ins
inc
lds
loope
or
mov
push
out
shl
xor
in
loop
sbb
mov
fs
mov
movs
push
cld
out
aam
pminub
mov
ins
or
retf
add
adc
sub
jno
inc
std
mov
jecxz
pop
pop
and
loope
aam
pop
icebp
outs
add
ss
and
call
scas
adc
arpl
cmp
aam
sti
mov
cmp
in
xchg
rcr
enter
mov
mov
and
cli
mov
jne
or
test
xlat
jp
outs
add
mov
xor
or
or
adc
mov
dec
movs
gs
lods
sbb
and
xchg
cmp
iret
je
loopne
jmp
sub
in
mov
jecxz
and
inc
out
sbb
repnz
iret
push
shr
clc
out
push
adc
nop
loope
cmp
mov
mov
dec
ror
popf
lahf
and
sbb
in
mov
push
or
imul
adc
pop
ins
imul
cmc
mov
in
add
add
outs
adc
cwde
jp
movs
enter
mov
push
and
push
in
xchg
popa
retf
in
arpl
inc
cdq
jmp
mov
xor
sbb
movs
icebp
jno
popa
inc
loope
cmp
jl
fisttp
pushf
jmp
fimul
sub
cmps
add
dec
and
cwde
cwde
mov
int
test
adc
(bad)
stos
and
or
xchg
pushf
mov
mov
pop
cwde
adc
cld
and
cmp
and
retf
pusha
or
pop
jecxz
add
or
dec
in
cmp
les
ror
(bad)
mov
or
jmp
sbb
rol
adc
mov
jle
ficomp
xor
fcomp
and
cmp
or
jg
test
stc
xchg
jmp
cld
xchg
dec
repz
je
aam
in
test
push
bndldx
add
out
sbb
(bad)
pushf
mov
sbb
mov
sbb
adc
jle
sbb
loopne
xor
xor
sub
mov
cli
cmp
ror
pop
jbe
jmp
dec
push
ficomp
adc
je
movs
pop
in
icebp
or
sbb
lea
jl
adc
xchg
push
(bad)
std
pushf
rcr
stc
ja
adc
jbe
and
jns
jmp
(bad)
jno
ins
jecxz
clc
push
ins
lds
inc
jmp
jns
push
sub
fmul
arpl
jne
outs
jmp
sub
clc
sbb
push
aad
call
adc
jg
mov
sti
jle
sbb
xlat
jecxz
mov
xor
dec
fmul
clc
ds
add
inc
ss
arpl
je
out
and
mov
inc
pop
dec
or
outs
sbb
rcl
cmp
lock
movs
adc
stos
push
xchg
aad
in
cmp
int3
jne
ja
pop
push
ins
xor
bound
gs
xchg
out
call
mov
scas
push
push
in
jl
rcl
test
shr
fistp
sbb
jns
add
ins
push
fcom
fstp
pop
jecxz
je
sub
push
out
or
pop
cli
cld
aaa
xchg
jl
push
aas
int3
pusha
add
push
adc
(bad)
mov
(bad)
loopne
inc
(bad)
int3
sbb
mov
sbb
gs
mov
movs
sar
push
push
sub
mov
aam
clc
retf
add
sbb
xor
fcom
xchg
add
in
push
sub
jge
and
in
sti
mov
fs
js
jecxz
out
dec
lds
cmc
not
sahf
push
aam
inc
mov
xor
dec
sub
nop
xchg
fnstsw
sub
je
xchg
jl
ins
loope
sub
sbb
ficomp
jb
adc
jae
inc
adc
int3
ja
in
fucomip
fcom
inc
sub
mov
mov
add
or
test
jns
or
shr
cmp
aad
push
xchg
jae
sbb
out
rol
sbb
add
sub
mov
loop
adc
hlt
(bad)
clc
sbb
adc
in
and
outs
in
sbb
mov
sbb
out
sbb
clc
jg
call
mov
or
cmps
ret
sbb
scas
loope
out
and
hlt
push
push
or
sbb
cli
jecxz
mov
xor
fistp
cmps
call
(bad)
adc
es
loop
mov
dec
cmc
jmp
repnz
jno
pop
movs
aam
mov
pop
test
push
inc
imul
mov
popa
loop
(bad)
mov
mov
std
idiv
pop
retf
pushf
jecxz
sub
jo
popa
sti
push
sbb
push
jbe
xchg
shl
jne
jecxz
adc
rcr
pop
repnz
sbb
call
sbb
push
sbb
xor
rcl
loopne
sub
movs
call
cld
fistp
js
or
jmp
dec
cmc
int
lods
sub
rcr
cld
ins
jns
add
out
out
ins
or
mov
movs
inc
out
xor
(bad)
push
sbb
jns
xor
dec
jne
and
sub
cmps
fmul
or
or
jmp
cwde
xor
sub
arpl
xchg
xlat
pop
push
jns
outs
std
icebp
jp
dec
cwde
clc
and
mov
cmp
adc
cwde
and
neg
add
and
aaa
sti
shl
jb
out
jmp
enter
xor
mov
dec
in
enter
cmp
int
adc
clc
pop
out
sub
fisub
out
add
test
retf
inc
and
add
inc
jns
mov
mov
lock
ret
inc
and
js
cmp
mov
or
mov
cmp
call
cld
pop
xor
jbe
xor
es
sbb
jecxz
jbe
add
jmp
xlat
nop
sbb
loop
pop
mov
nop
add
shr
mov
cld
movs
cmp
or
mov
dec
out
cli
stos
xor
add
in
pop
mov
clc
imul
sar
and
add
pop
cwde
sbb
inc
mov
ret
clc
push
pusha
pop
adc
std
test
add
push
sub
pop
xchg
(bad)
movs
or
push
(bad)
adc
in
std
jnp
leave
push
aam
(bad)
adc
loop
jns
push
dec
sub
hlt
push
ss
jmp
mov
jno
fs
or
and
rcl
add
mov
add
shl
push
adc
pop
add
daa
loopne
jae
xor
jne
jmp
call
out
pusha
sbb
or
icebp
ret
or
ins
and
loopne
rol
mov
and
or
rcr
jnp
inc
test
lods
or
in
jns
fsub
adc
loop
add
mov
lds
jo
sub
mov
fistp
mov
fcom
std
dec
adc
dec
push
movs
add
mov
int3
lock
shr
cmps
call
dec
and
retf
sbb
cmc
mov
sbb
mov
test
jle
xchg
shl
sbb
out
sbb
mov
jne
adc
sub
repnz
adc
js
lds
sub
aad
mov
in
stc
cmps
pop
jae
das
pop
mov
fcomp
mov
clc
rol
aad
dec
push
sbb
jecxz
sub
sbb
mov
ss
sbb
pop
mov
jmp
cmc
jg
sub
jp
or
cwde
jnp
pop
pop
je
(bad)
je
gs
es
xor
adc
inc
jg
inc
shl
xor
fdiv
sub
push
xchg
hlt
jle
pop
push
je
sti
dec
sbb
(bad)
movs
ficomp
inc
ja
push
loop
je
int
push
inc
jno
pavgw
xchg
sbb
arpl
adc
loopne
iret
lahf
aam
aam
mov
inc
dec
jmp
gs
cli
fcmovne
fdiv
mov
jne
adc
or
sub
in
je
jns
xchg
enter
jmp
adc
repz
xor
mov
ja
and
retf
adc
sbb
shl
mov
push
popa
and
cld
fwait
inc
cmp
xor
call
xchg
stos
call
or
mov
cmp
push
js
mov
dec
sub
pop
or
mov
or
out
leave
sub
enter
pop
dec
push
out
in
mov
mov
pop
push
dec
pushf
pop
clc
loope
mov
test
inc
inc
jmp
mov
xchg
push
clc
dec
ins
push
aaa
imul
xchg
into
pop
scas
jns
inc
scas
out
mov
adc
fsubrp
aad
lods
adc
rol
jo
scas
xor
mov
int3
cwde
inc
(bad)
cli
xor
and
sar
xor
out
sub
call
push
ss
or
fstp
loope
push
push
add
adc
loopne
xchg
sub
in
pop
inc
sbb
mov
sub
mov
test
out
and
xor
inc
dec
aad
popf
pop
xchg
sub
fs
mov
test
push
leave
push
call
int3
xor
inc
out
add
xchg
enter
or
add
(bad)
add
sbb
pop
std
aad
adc
push
mov
loopne
and
scas
sbb
gs
fdivr
sbb
dec
inc
call
cmps
push
adc
and
jmp
adc
mov
or
adc
cmp
call
and
stc
les
cld
in
mov
mov
ins
nop
mov
rcl
cli
adc
enter
mov
and
loopne
xchg
shl
dec
dec
push
cli
xchg
out
push
pop
repnz
test
jae
sub
xlat
movs
in
movs
daa
out
movlps
(bad)
mov
call
pop
mov
out
in
ja
test
inc
loopne
loopne
sub
add
sub
aam
pop
frstor
push
aad
loop
jae
sbb
(bad)
outs
push
pop
jmp
jge
cmc
aas
loope
xchg
jmp
hlt
and
inc
add
inc
adc
or
in
addr16
cmp
stos
adc
clc
aaa
xchg
dec
test
and
cdq
neg
fidiv
mov
(bad)
pop
mov
push
adc
int
mov
dec
jno
(bad)
in
in
cmp
addr16
sbb
out
inc
outs
in
cmp
mov
or
aam
out
out
xor
sub
das
mov
xchg
dec
mov
loopne
sbb
pusha
dec
sbb
rcr
pop
adc
mov
outs
gs
ins
xor
inc
imul
mul
lds
jns
outs
and
adc
jmp
loope
and
mov
outs
dec
cmc
sub
rol
ins
adc
stos
sub
out
retf
mov
jp
je
loopne
jl
pop
repz
xchg
mov
ja
or
mov
xchg
cmp
cli
out
and
cmp
frstor
scas
mov
adc
aas
into
and
adc
hlt
dec
fbld
scas
push
cmps
ret
test
leave
sbb
push
jmp
stos
ins
xchg
test
or
(bad)
or
lods
(bad)
dec
inc
push
in
xchg
push
rcl
fsub
imul
adc
sub
loopne
push
add
stos
ja
pushf
add
cs
sbb
retf
jecxz
push
mov
jg
cld
retf
mov
shl
cli
shl
fisttp
scas
sbb
in
iret
push
mov
push
aad
jmp
jge
jnp
enter
das
adc
les
out
sbb
shr
movs
push
add
xchg
scas
inc
outs
repz
nop
clc
dec
cmp
loope
adc
addr16
adc
int3
add
fs
inc
sbb
ja
jbe
fcmovbe
je
push
std
xchg
inc
(bad)
jnp
mov
xor
gs
test
loopne
cmc
pop
push
inc
mov
fsubr
jae
stos
xor
and
push
cld
(bad)
inc
push
adc
cs
pop
ret
fdivp
call
jo
stc
adc
sub
push
adc
hlt
xchg
push
jbe
in
sti
cld
les
jae
aas
jbe
fs
add
mov
inc
out
call
inc
jo
aad
jo
sub
gs
shr
fwait
jge
aas
inc
(bad)
out
pop
and
push
das
sbb
jmp
lea
call
xor
and
sub
ins
adc
inc
movs
push
loop
add
xor
inc
mov
aaa
mov
rcr
mov
ins
push
adc
sbb
fdiv
and
adc
lods
jg
dec
xor
ret
mov
or
out
sbb
loopne
arpl
aaa
jle
shr
dec
in
sti
int3
call
pop
push
push
adc
mov
loope
mov
xor
pop
fist
adc
dec
loope
das
mov
jmp
jnp
dec
imul
dec
out
sbb
xor
mov
call
dec
xor
sbb
mov
sti
xlat
mov
push
pop
sbb
or
in
jmp
dec
gs
mov
rcl
xor
inc
fdiv
or
outs
movs
sub
fdiv
xor
cmps
xchg
push
gs
adc
in
int
and
sbb
pop
dec
fisub
js
or
retf
(bad)
xor
call
jle
stos
xchg
xor
adc
xor
in
xor
jl
fmul
test
pop
adc
rcl
test
add
dec
inc
mov
jo
jno
xchg
pop
nop
jmp
in
ins
addr16
shr
out
jmp
jecxz
and
div
or
or
jecxz
inc
shl
dec
arpl
add
in
push
jge
or
cld
adc
ja
cmps
test
mov
dec
or
loopne
inc
ja
xchg
ret
xchg
sub
fisttp
mov
hlt
sub
pop
out
enter
mov
sti
es
cld
pusha
in
cmc
pop
jmp
pop
or
out
xor
mov
hlt
test
and
push
sbb
cmp
mov
movs
and
cmp
xor
loopne
or
sub
adc
gs
push
hlt
jmp
push
rcl
inc
shr
adc
add
loope
adc
xor
jne
inc
in
sahf
or
push
stos
nop
pusha
jno
aaa
stc
addr16
xchg
ficom
in
loop
adc
jle
retf
dec
jne
(bad)
lock
sub
cmp
pushf
in
xchg
push
outs
loopne
dec
mov
xor
fdiv
mov
pop
test
sub
in
push
imul
xor
adc
push
pusha
and
aad
in
jae
sbb
or
push
xchg
jle
jmp
iret
ror
call
inc
xchg
mov
cld
cmps
in
inc
(bad)
aam
pop
xor
add
movs
inc
push
out
mov
or
mov
inc
das
mov
push
and
ret
adc
adc
popa
popf
arpl
sub
jecxz
pop
push
push
jne
push
ss
adc
sub
bound
xchg
fbld
js
rol
in
loopne
pop
aad
fistp
dec
shl
mov
cmc
jmp
mov
push
inc
mov
or
jae
mov
loope
and
sub
out
test
pop
les
lds
aam
jo
mov
and
cld
dec
xchg
sub
add
popa
mov
pushf
mov
ret
fcom
jns
movs
aas
jle
and
cmp
ficom
out
retf
push
(bad)
sti
jns
adc
loopne
ja
push
cmp
(bad)
cmp
xor
aad
sub
int
jle
jne
jmp
jno
and
retf
push
add
repz
into
ja
xor
dec
pop
js
outs
or
mov
mov
pop
adc
mov
outs
mov
loope
pop
(bad)
jo
fs
cmp
jmp
dec
or
test
dec
lods
mov
out
or
cld
addr16
rcl
addsubps
mov
jmp
movs
loop
pop
pop
mov
adc
shl
inc
jnp
add
leave
adc
sub
out
adc
sar
mov
mov
(bad)
sbb
test
inc
addr16
out
pop
adc
gs
jns
movs
aas
or
call
cld
cmps
mov
inc
in
outs
das
adc
lock
shl
popf
push
or
call
xor
out
sbb
out
fist
jno
test
jl
pop
(bad)
ficomp
jo
cmps
pop
movs
mov
ins
mov
pop
pusha
and
xchg
inc
xor
xchg
add
inc
add
adc
out
lds
pushf
cmp
or
std
jnp
jl
ds
xchg
sbb
pop
and
call
mov
inc
sbb
pop
movs
stos
fmul
and
call
push
aaa
dec
lds
pop
sbb
mov
call
adc
je
jae
inc
inc
arpl
jae
ja
fstp
push
and
movs
sbb
out
add
ds
imul
call
add
ins
not
and
mov
fiadd
cld
jns
sbb
out
inc
fs
(bad)
arpl
movs
cmp
rcl
adc
cld
(bad)
jae
push
and
or
push
loope
stos
call
jno
ds
lock
pop
xor
sbb
add
fdiv
dec
popa
xchg
fchs
xchg
and
and
pop
fdivr
imul
cwde
test
dec
in
fbstp
cmp
jge
inc
hlt
mov
cmp
jmp
aam
mov
sub
dec
pop
cmp
cwde
cld
aam
call
int3
lock
inc
std
test
arpl
inc
xor
imul
push
push
and
aam
in
push
dec
movs
ins
sti
imul
stos
push
jmp
jmp
rol
pop
sub
in
inc
in
call
fsub
xlat
enter
loop
sbb
cld
push
movs
sbb
call
pop
out
jbe
fdiv
xor
sbb
pushf
das
push
pop
jl
push
sahf
adc
cmp
sub
push
call
sar
and
cld
rcr
aas
loope
imul
mov
into
fcom
out
daa
sub
jmp
js
adc
fincstp
fsub
inc
loop
pop
sub
in
cld
jmp
pause
aas
cmp
sub
jg
out
outs
sbb
pop
pusha
out
inc
nop
std
pop
or
pop
sti
xor
call
gs
loope
mov
call
repnz
lods
mov
lods
in
mov
popf
xor
ins
cmp
inc
mov
mov
sbb
(bad)
xor
hlt
jno
inc
cwde
hlt
xor
fcom
mov
fild
sbb
jmp
xor
sar
xchg
inc
pop
int3
sub
jmp
loopne
fdiv
in
cmp
jmp
sbb
ret
syscall
neg
mov
lods
add
inc
ds
dec
loopne
cld
mov
or
pusha
call
jne
ffreep
clc
cmc
gs
ja
test
and
inc
xchg
cmp
sub
sbb
aad
loopne
loopne
add
(bad)
pop
xchg
test
adc
ds
ja
lock
in
add
loope
arpl
adc
mov
jecxz
ins
add
test
js
adc
gs
movsx
je
xchg
popf
pop
je
dec
xor
out
and
mov
jb
add
push
jmp
fdivr
or
xchg
rcr
push
jnp
mov
das
sbb
or
pop
cdq
popa
xor
out
mov
aas
mov
adc
mov
jno
lds
je
sbb
pop
loopne
pop
test
out
test
pop
mov
sub
cmps
scas
out
and
xor
or
out
adc
out
sbb
je
xchg
test
loopne
add
push
enter
jne
mov
int3
inc
add
jl
push
mov
inc
fistp
int
mov
shr
loopne
call
jecxz
stc
inc
movs
jl
jmp
push
sti
lods
pop
xor
xchg
sbb
cli
movs
sbb
or
pop
push
pusha
movs
push
jmp
jae
pop
sub
push
push
pop
inc
ins
jne
mov
pop
jecxz
cmps
sbb
imul
or
daa
cld
sbb
mov
push
stos
call
dec
mov
inc
lods
adc
or
jmp
jmp
mov
pop
test
jp
jo
cwde
adc
jecxz
and
pop
jg
clc
sbb
stos
xor
pop
int
adc
loop
and
mov
and
jge
sbb
sbb
lea
aam
scas
push
adc
mov
xchg
adc
imul
in
adc
stc
sub
fdiv
xchg
mov
loopne
mov
or
xchg
cli
dec
je
adc
jecxz
(bad)
call
out
sti
data16
push
stos
jns
fwait
arpl
push
mov
fdiv
int
pop
cld
add
and
or
mov
or
cli
lock
push
aas
mov
shl
push
leave
mov
cmovb
or
in
into
jmp
sub
cmp
in
sbb
test
mov
push
in
out
sete
sbb
xor
stos
mov
and
jnp
mov
mov
and
pop
imul
adc
sbb
ret
sub
sbb
fisub
cwde
test
jo
or
(bad)
aas
add
fstp
mov
out
into
push
cmp
jne
je
mov
mov
add
dec
inc
outs
xchg
pusha
cmp
sub
rol
fdiv
mul
repnz
cmc
adc
fs
lods
ja
add
pop
lods
fsubr
inc
xor
cmp
mov
jmp
jmp
jb
mov
mov
or
ins
dec
pusha
ins
jmp
pop
xor
test
cmp
out
or
sbb
ret
add
inc
movs
dec
(bad)
push
inc
out
fstp
push
movs
scas
fiadd
loopne
fwait
sub
pop
sub
mov
push
shl
cmp
aam
dec
rcl
xchg
aaa
popa
jmp
sar
repnz
jge
xchg
out
aam
popf
sub
jg
push
xor
pop
dec
jp
addr16
mov
mov
cmp
cmps
adc
jns
mov
and
sbb
xchg
dec
sub
push
xchg
fdivr
add
ds
out
hlt
sub
dec
mov
loopne
adc
mov
add
ja
lea
inc
pusha
dec
push
fistp
fucom
sbb
test
cmp
cmc
sub
inc
xchg
pop
das
sbb
fs
jne
ins
gs
push
jle
add
xor
cmp
xor
sti
rcr
add
aad
in
ins
sbb
pop
(bad)
div
call
dec
and
lods
mov
xchg
out
out
shl
jmp
xor
and
xchg
sub
jmp
or
aad
push
or
pop
cmp
mov
xchg
and
mov
aam
gs
loopne
add
push
pop
aad
sub
mov
movs
gs
cmp
adc
inc
sti
not
popa
in
jmp
(bad)
xchg
mov
xor
call
cmp
leave
ins
pop
fisttp
add
jns
dec
cli
ins
fsub
int
or
jne
push
mov
cwde
pop
cwde
into
sbb
test
sbb
lea
call
repz
lock
ror
xor
out
push
push
dec
and
cdq
sub
inc
nop
dec
ss
scas
shl
add
rep
les
outs
and
mov
push
adc
mov
aad
xchg
popa
shl
dec
push
cmps
das
lods
je
out
jns
shr
fcom
inc
cwde
stos
xor
(bad)
mov
imul
inc
shl
mov
mov
retf
xchg
call
in
mov
mov
clc
std
jecxz
loopne
js
sbb
and
add
pop
outs
push
adc
inc
cld
pop
jecxz
in
enter
mov
outs
mov
fimul
add
jne
out
mov
std
loope
in
mov
sti
sbb
adc
in
jae
ret
imul
int
jno
iret
out
mov
adc
dec
inc
lock
push
dec
test
push
or
aam
jb
or
lea
in
add
cdq
add
push
in
mov
xchg
add
test
xor
jnp
push
xchg
movs
cmp
jns
pusha
js
xor
adc
push
push
sbb
(bad)
sub
jl
das
jmp
cld
sbb
xchg
neg
cmps
test
enter
and
adc
mov
(bad)
adc
or
and
add
pop
std
mov
in
aaa
jns
test
pop
adc
adc
adc
outs
cmp
add
fadd
movs
or
pop
jno
or
jnp
or
pop
jmp
ja
mov
loop
call
in
fmul
add
stos
sub
sti
aam
push
into
fwait
mov
ror
fist
mov
lock
in
test
pop
push
jns
xor
ret
xor
popa
repz
xor
and
push
stos
loope
addr16
xchg
dec
dec
sti
jb
lods
sbb
lock
xor
push
je
sbb
mov
fiadd
push
sbb
jno
pop
loopne
ins
jle
xor
inc
je
outs
in
pop
das
ins
pop
xchg
jl
popa
cld
mov
mov
jnp
add
push
mov
and
mov
js
adc
ins
xor
call
std
popa
xor
push
scas
loop
std
mov
es
mov
dec
mov
loopne
movs
adc
fdivr
sbb
sub
jne
jmp
inc
call
mov
aam
push
es
test
call
push
ret
jo
sub
dec
mov
test
jo
gs
movs
cwde
pusha
xor
rol
cdq
cli
out
adc
iret
(bad)
repz
dec
lds
imul
or
sub
add
jnp
aam
clc
daa
ret
cmc
xor
adc
scas
call
push
sbb
shl
mov
not
dec
or
in
add
xchg
jns
shl
out
jo
adc
sahf
sub
jae
dec
std
je
jnp
ficom
mov
dec
push
ins
mov
call
mov
in
add
aam
and
fst
leave
ds
lds
or
xor
add
and
out
pop
lock
jl
in
sub
js
jmp
ja
and
pop
or
shl
sti
movs
sub
arpl
fucomi
inc
push
aad
call
ds
out
add
out
jmp
or
outs
nop
adc
shl
out
test
ja
loopne
jecxz
mov
cld
dec
cmp
rol
and
cmp
ret
outs
mov
pusha
mov
das
and
mov
test
push
inc
ins
jnp
add
inc
pop
pusha
fld
mov
push
push
aaa
sub
aam
(bad)
loop
adc
sti
mov
int3
xchg
cld
mov
pop
push
xor
sbb
idiv
push
sub
and
fist
clc
and
cmps
add
and
jbe
enter
pop
xor
icebp
cld
aam
aas
(bad)
add
sbb
jmp
xor
(bad)
fbstp
add
cmp
lods
adc
shl
cmp
mov
jmp
or
pop
mov
ins
aam
mov
test
loopne
sub
ins
sbb
dec
aad
out
ret
mov
inc
outs
cwde
push
enter
push
ja
push
fwait
sbb
xchg
ss
or
xor
jns
and
in
fmul
push
rcr
clc
jmp
xchg
nop
push
out
je
jmp
aas
out
in
sbb
mov
sar
call
dec
push
cld
jmp
mov
and
(bad)
out
(bad)
cdq
inc
sbb
mov
pop
out
adc
inc
mov
and
jbe
add
pop
loope
cwde
adc
pop
or
mul
repnz
imul
in
dec
aas
xchg
add
lahf
adc
push
jb
and
repz
jne
je
sbb
mov
and
jp
sbb
pop
cmp
or
cwde
test
sbb
sub
pop
push
cmp
mov
test
mov
adc
jg
lods
pop
call
jne
in
adc
or
adc
adc
lods
idiv
mov
rol
jmp
mov
xchg
mov
mov
mov
cld
call
sbb
and
call
in
xor
mov
push
rcr
and
pop
loopne
popa
fild
and
inc
push
test
inc
add
jae
push
into
sti
lods
xchg
sub
aaa
add
add
mov
in
xchg
mov
dec
loopne
jecxz
jnp
inc
inc
jo
sti
lods
cld
les
in
jno
ret
or
mov
push
ds
fisubr
cld
cmps
adc
es
and
cwde
std
je
jnp
xchg
or
jmp
push
xor
sub
xchg
inc
cwde
call
in
(bad)
sbb
js
xchg
call
push
dec
jno
(bad)
sti
push
mov
push
out
fldcw
pop
xchg
inc
add
shr
xlat
mov
add
or
sbb
dec
in
jecxz
jl
mov
mov
dec
dec
loopne
pop
ins
cmp
out
xchg
xchg
xor
jg
fs
es
push
and
fmul
sar
lds
test
cmp
xchg
xabort
adc
push
shr
je
sbb
inc
call
adc
mov
inc
int
fadd
jae
and
clc
sti
cmps
ins
out
and
in
jecxz
mov
jmp
sbb
repnz
dec
pop
int3
jge
das
xchg
sub
xchg
pop
adc
out
in
mov
pop
mov
aam
push
std
lods
in
adc
mov
out
dec
sub
pop
push
test
jns
jmp
fisubr
ss
lods
pushf
es
loope
dec
push
jne
out
lods
adc
stos
fmul
cmps
fadd
in
pop
das
xchg
xchg
push
sub
ss
test
(bad)
ins
mul
clc
fidivr
jnp
scas
jmp
push
push
hlt
xchg
out
and
sti
ins
mov
xchg
rcr
int
xor
data16
imul
sbb
push
(bad)
sar
jmp
pop
dec
nop
xor
push
jle
dec
add
aaa
jnp
adc
push
(bad)
jecxz
sbb
xchg
mov
jnp
aam
push
xchg
jecxz
sbb
int3
out
or
adc
sub
push
mov
in
(bad)
mov
std
arpl
xor
inc
add
cld
add
dec
dec
or
cmp
sbb
(bad)
push
xchg
jb
cmc
jnp
gs
loope
and
test
fsub
mov
adc
or
mov
pop
sbb
lods
xchg
pop
call
sbb
or
adc
(bad)
stc
sbb
aaa
fist
push
sub
adc
mov
loop
adc
adc
mov
jmp
sbb
out
lock
in
or
sbb
add
xor
xchg
cmp
rcl
inc
inc
sub
or
mov
movs
inc
call
sbb
jae
and
push
dec
pop
jae
cwde
or
xor
xchg
fdiv
fnstcw
cli
pop
sbb
stos
ret
nop
pop
jecxz
jecxz
or
adc
loopne
adc
adc
call
xor
push
mov
daa
push
mov
cld
inc
fist
lock
loopne
hlt
cmc
pop
jmp
pop
std
dec
sbb
loope
push
xor
lea
and
movs
mov
adc
jne
xchg
sub
in
mov
mov
and
sbb
sub
int
push
adc
mov
add
js
cmp
int3
and
cwde
push
outs
ss
and
adc
xchg
xor
lods
dec
mov
inc
stos
stc
jno
paddb
cld
movs
push
daa
leave
push
push
mov
out
add
inc
test
in
push
cld
adc
ficom
push
pusha
push
jmp
pop
inc
sub
enter
push
popa
mov
xor
movs
mov
call
outs
cli
dec
call
cmc
add
push
out
sbb
mov
sbb
ds
movs
and
cld
(bad)
ins
cmp
mov
jmp
xor
or
sbb
ret
push
bound
dec
outs
das
in
pop
shr
fisubr
xor
je
daa
aam
sbb
(bad)
sti
fcom
push
ja
test
loope
xor
xchg
in
mov
retf
aas
fs
in
outs
rcl
out
jae
sbb
sbb
push
loopne
call
and
inc
ficom
cdq
ja
fwait
inc
jmp
outs
lds
cmp
int
gs
jnp
mov
inc
inc
fild
aam
and
pushf
xor
fadd
sti
jecxz
adc
mov
inc
inc
out
fs
call
int3
pushf
cmp
call
xor
out
cmps
add
jl
and
ss
call
pusha
es
aaa
xor
adc
push
cmps
in
unpcklps
outs
in
pop
loope
cdq
pop
push
or
pop
adc
in
shl
test
cmc
outs
mov
mov
cli
movs
js
je
mov
test
call
cmp
shr
shr
aaa
add
rcl
pop
outs
nop
mov
sub
ret
ins
and
js
sbb
mov
mov
je
dec
and
mov
push
enter
jp
or
push
cmc
cmps
or
in
sub
mov
or
mov
inc
or
and
or
int3
mov
in
or
or
mov
add
aad
and
hlt
sbb
pop
push
push
mov
js
pop
push
movs
mov
push
add
inc
xor
mov
jmp
sbb
fs
popa
fimul
out
nop
xor
out
lock
je
and
movs
movs
pop
fistp
ja
sub
sbb
retf
cmp
cmc
fidivr
sbb
sbb
loopne
sub
pop
or
and
cmp
sub
xchg
and
jecxz
shr
lock
pop
dec
pop
mov
js
cwde
out
mov
pop
lds
jns
sub
fldcw
popa
xchg
sbb
aam
mov
test
xor
jnp
aam
loop
add
dec
pop
pushf
sub
push
sahf
clc
xor
mov
dec
mov
xor
nop
xchg
or
inc
or
or
int3
rol
mov
leave
pop
sti
ss
mov
clc
icebp
loop
push
cld
dec
repz
add
mov
adc
xchg
inc
dec
in
cmp
lods
adc
sbb
in
lock
lods
aam
popf
adc
xor
fimul
pop
mov
hlt
jne
jns
int3
xor
and
movhps
mov
jecxz
xchg
test
call
mov
cmp
mov
mov
mov
jns
ja
aam
mov
and
jno
xor
adc
out
stos
cmp
enter
ror
pop
test
(bad)
lods
pushf
repz
inc
cmp
ins
mov
call
inc
or
push
or
cld
dec
in
aaa
sahf
pop
movs
sub
xor
sub
mov
or
add
sbb
mov
and
and
fcom
jmp
sbb
xor
jge
mov
lods
popa
add
mov
push
inc
loope
les
cli
icebp
add
mov
mov
hlt
dec
xchg
xor
imul
cmp
nop
sub
jg
and
dec
pop
(bad)
pop
clc
or
mov
clc
cld
push
aaa
clc
fcom
addr16
xchg
out
aam
enter
and
loope
out
enter
in
xor
push
xor
or
xchg
add
cmps
adc
add
ror
jnp
rcl
mov
es
pop
jne
ds
xchg
shl
cmps
xlat
fcomp
jno
in
hlt
xor
jg
cwde
scas
dec
sbb
addr16
add
pop
fstp
es
sub
and
add
popa
pop
hlt
das
clc
mov
nop
ins
mov
outs
add
gs
mov
jne
cmp
mov
push
in
add
add
scas
in
sbb
loop
xchg
dec
dec
jnp
jns
and
pop
clc
sub
nop
cmp
je
arpl
push
inc
movs
sub
mov
sbb
daa
std
int3
xor
dec
cld
leave
push
addr16
add
cdq
mov
jl
movs
sbb
pop
mov
sub
or
call
mov
dec
aad
sti
jnp
xchg
mov
sbb
xchg
or
cmp
mov
mov
fsub
enter
inc
in
(bad)
xchg
ficomp
pop
or
mov
adc
mov
sbb
xchg
clc
fcom
dec
dec
mov
sub
stos
lods
jmp
ffree
or
push
add
loope
adc
inc
xchg
call
adc
(bad)
cli
sbb
jle
pop
into
mov
test
stc
sbb
ds
es
sbb
pushf
adc
dec
jmp
fcomp
sar
les
push
mov
pop
test
pop
retf
scas
sub
out
mov
hlt
outs
and
adc
mov
cmp
(bad)
out
inc
xchg
leave
mov
xchg
mov
xchg
cmp
or
ja
ss
add
ror
or
xor
out
jmp
pushf
sbb
lods
push
pop
or
mov
retf
pusha
into
jmp
or
js
cmp
test
lods
cld
in
mov
adc
arpl
push
test
cmp
loopne
dec
adc
(bad)
outs
test
push
and
sbb
in
popf
loopne
xchg
push
add
loop
xchg
sbb
jae
cmc
jno
arpl
or
fadd
in
add
fldcw
jecxz
hlt
inc
into
and
or
cld
push
neg
jle
or
stos
mov
xchg
mov
outs
adc
adc
jge
out
push
fsub
push
(bad)
clc
sbb
je
std
cmc
mov
sti
sub
std
aaa
ja
call
mov
hlt
jns
int3
pusha
dec
cwde
aaa
imul
ret
push
loopne
scas
lds
mov
inc
xor
jmp
loopne
inc
ja
js
pushf
cld
fisubr
aaa
in
unpcklps
xor
inc
jmp
xchg
test
into
ins
inc
int3
in
push
fbstp
(bad)
iret
jae
adc
cmp
lock
jne
pop
shr
pop
inc
add
imul
or
xchg
rcl
pop
adc
gs
jae
xor
ror
push
sbb
fbstp
into
adc
pusha
sbb
and
adc
ret
in
std
fiadd
jmp
xor
pop
in
or
push
xor
fsubr
and
sbb
enter
mov
xor
jg
mov
mov
sar
in
test
push
push
jge
das
mov
pop
xor
xchg
test
xor
shl
pop
dec
je
mov
or
into
in
xor
cs
xchg
add
xor
pushf
fcmovnb
mov
mov
call
call
xlat
je
ror
xchg
lds
jno
test
pop
mov
inc
xchg
lock
jne
shr
mov
lods
push
xchg
sbb
test
ins
adc
retf
gs
cmp
test
mov
(bad)
xchg
xor
pushf
inc
fs
ds
add
(bad)
outs
adc
mov
not
jge
call
or
jns
je
imul
cmp
xor
mov
inc
out
sbb
loope
pop
jno
ins
pusha
in
add
mov
mov
in
add
icebp
nop
and
sbb
mov
push
jno
push
loope
jl
push
xor
jecxz
sub
call
pop
mov
push
xor
arpl
sbb
sub
and
pop
loopne
sbb
xor
jle
add
dec
add
push
cmps
sbb
cwde
jne
sbb
gs
test
jno
out
or
shl
inc
aad
in
push
mov
or
loop
push
cmp
push
js
cmp
and
scas
or
jbe
aad
cmp
inc
jne
dec
outs
xchg
pusha
imul
ror
add
pop
retf
push
jmp
stc
and
out
mov
and
lods
push
les
aam
add
xor
aaa
and
dec
pusha
aaa
fist
lds
pop
ins
inc
movs
call
or
xor
out
xchg
loope
pop
mov
rcl
ja
push
sar
loopne
add
xchg
jns
add
xor
jmp
mul
iret
xor
stc
inc
cld
ficomp
ret
jmp
dec
lods
xchg
xchg
mov
fcomip
jae
loopne
neg
jecxz
add
jmp
adc
rol
outs
mov
std
shr
push
mov
imul
iret
add
xor
in
or
cdq
inc
rcl
cld
test
adc
mov
inc
into
out
inc
shl
fcom
fs
ret
in
adc
pop
std
mov
push
adc
sbb
out
int3
or
cmp
mov
jo
cwde
cmp
lods
xor
or
aaa
lds
add
inc
or
lock
pop
dec
adc
adc
call
(bad)
jnp
or
or
loope
(bad)
or
outs
fsubr
mov
repnz
ins
dec
popf
mov
or
cmp
mov
loope
pop
(bad)
sub
scas
fist
jl
out
pusha
mov
loope
pop
sbb
sbb
scas
retf
mov
sub
jmp
jl
inc
jmp
pop
lods
add
push
sbb
xor
fidiv
out
jecxz
(bad)
retf
xchg
fsub
out
mov
push
push
gs
aaa
pop
test
popf
dec
dec
mov
sub
les
push
or
loope
or
sbb
daa
enter
pop
clc
and
jo
out
icebp
mov
sbb
dec
into
cmp
test
lods
push
jb
int
push
cld
xor
sbb
or
adc
jge
jmp
sbb
scas
cmp
movs
push
gs
fstp
adc
or
mov
sti
mov
xor
gs
sbb
dec
mov
je
into
das
std
sbb
lds
xor
mov
sbb
jmp
and
in
or
retf
cld
and
cwde
push
jmp
je
jb
dec
aas
xor
and
fmul
xchg
cmc
sbb
loop
jae
mov
cmp
je
dec
(bad)
repz
push
push
push
int3
sar
cmp
into
lock
jg
jnp
mov
movs
xchg
retf
data16
sbb
push
sti
popa
dec
mov
adc
mov
lods
mov
retf
scas
push
fwait
dec
cmps
or
ror
imul
pushf
fcomp
push
and
jb
mov
adc
jns
inc
in
out
rol
xor
adc
mov
mov
shl
push
aam
adc
xchg
in
push
sbb
jbe
aam
sbb
cmps
outs
xchg
dec
dec
and
xchg
cmp
cmp
jmp
fild
shr
je
xor
pop
aam
sbb
mov
test
pop
(bad)
push
push
or
xor
pop
addr16
scas
loop
call
inc
dec
gs
dec
jmp
sbb
loopne
mul
push
inc
in
adc
out
loopne
test
scas
pop
dec
fadd
cmc
mov
add
xchg
xchg
stos
retf
je
aad
push
shl
xchg
test
in
out
cmps
adc
dec
or
in
sub
lods
or
sti
movs
jg
pop
or
push
jmp
fisttp
xchg
pop
lahf
inc
pop
sbb
mov
repz
pop
jmp
fcomp
je
cmps
test
jle
adc
arpl
pop
mov
rcr
in
call
xor
mov
cmc
addr16
xlat
adc
aam
ret
ja
xor
mov
imul
add
retf
fs
push
movs
aad
loopne
push
ss
inc
or
xor
outs
sbb
add
rol
adc
div
ja
or
jb
aam
mov
shl
dec
jg
mov
cmp
(bad)
jmp
mov
sub
dec
jne
retf
adc
add
xchg
inc
jmp
int3
xor
adc
enter
xor
test
dec
(bad)
xor
pop
and
cmp
ret
push
hlt
lea
mov
ins
sbb
les
cdq
xor
mov
fidiv
ror
inc
push
mov
add
add
shl
sub
movs
cmp
mov
cs
jae
add
push
fcomp
out
adc
in
lds
push
test
enter
in
jecxz
pop
int3
add
ja
loope
clc
mov
adc
push
cld
mov
jns
jmp
cwde
ins
ins
(bad)
xlat
fsubr
mov
in
lahf
jnp
push
addr16
xor
inc
jp
xor
cli
sub
inc
or
fdiv
mov
sub
mov
xor
inc
(bad)
loope
cmp
xor
mov
daa
adc
push
inc
hlt
js
sub
add
mov
std
xchg
xchg
and
ins
mov
gs
add
fbld
out
push
inc
ins
aam
adc
push
hlt
ja
pop
sti
mov
in
push
xchg
jecxz
inc
sbb
pop
cwde
gs
mov
cld
inc
xchg
push
into
clts
fsubr
rcr
jp
jp
call
test
mov
in
inc
(bad)
hlt
cmps
jae
test
sar
fsubr
fst
cmc
inc
sbb
fs
stc
and
jp
push
dec
jns
mov
(bad)
mov
sub
loopne
add
cmp
sub
mov
push
add
mov
test
inc
xchg
or
adc
push
cwde
dec
out
ins
out
imul
dec
stos
mov
or
mov
jno
fidiv
loop
cwde
ss
jle
sbb
push
mov
into
mov
jmp
mov
jl
add
out
sub
adc
test
jecxz
add
or
aad
push
xor
addr16
and
sub
jo
mov
in
and
jns
icebp
loope
movs
and
adc
sub
add
fst
dec
jl
into
ins
aas
or
call
jg
sbb
in
mov
rcr
int
add
mov
add
adc
loopne
mov
or
cmp
pop
icebp
fisttp
cmps
mov
jno
adc
data16
dec
in
add
xor
call
mov
jmp
out
push
sbb
xchg
movs
cld
inc
sub
or
mov
rcl
sub
movs
cmps
fdivr
cwde
inc
push
ds
jb
in
unpcklps
cmp
jle
loopne
inc
ror
and
add
out
mov
cli
jo
call
xlat
add
push
sbb
push
sub
dec
xor
sti
rcl
fisubr
sbb
pop
xor
or
sub
ja
nop
mov
and
test
cmps
aam
out
cwde
cmp
stos
aaa
xor
cmp
sti
jmp
movs
dec
out
cmp
arpl
sbb
std
out
sub
jnp
in
pop
int
or
mov
cmps
out
fidivr
sbb
cld
jno
push
sti
in
mov
sbb
je
leave
jns
xchg
mov
es
mov
icebp
push
ja
loope
jecxz
push
mov
jnp
cdq
xor
adc
adc
dec
and
pop
fwait
lock
arpl
popa
les
aad
mul
adc
mov
das
repz
cmc
outs
ins
mov
or
cmp
cld
mov
das
cld
rcr
adc
cld
(bad)
sti
scas
xchg
jnp
jmp
pop
mov
addr16
jle
xor
push
add
imul
(bad)
pop
movs
fnstsw
test
pop
mov
jbe
inc
push
sbb
leave
(bad)
movs
xor
scas
jmp
pushf
push
jne
xor
iret
cld
xchg
es
jno
int3
adc
push
jg
jge
sbb
in
sbb
dec
cmc
pop
rcr
lds
adc
ftst
mov
enter
mov
push
sbb
push
dec
cmc
inc
fist
push
mov
imul
inc
or
mov
add
inc
adc
loope
pop
cmp
neg
and
test
loop
and
in
popa
push
neg
rcl
sahf
gs
test
pusha
pushf
inc
arpl
loop
fsubr
jnp
fld
mov
js
(bad)
pop
jmp
pop
mov
test
loopne
sbb
cmp
inc
push
and
mov
add
cmc
jecxz
lods
sbb
jmp
sub
jmp
jle
sub
ins
dec
adc
dec
adc
dec
addr16
cmp
cmps
repnz
pusha
dec
add
loop
dec
sub
into
ins
jb
ds
mul
loopne
dec
pop
pop
popa
adc
mov
jo
pop
mov
cmp
or
jbe
test
psrad
cwde
cli
retf
or
dec
jno
ror
fst
push
push
outs
(bad)
jl
dec
dec
pop
push
jge
test
loope
imul
pop
cld
ja
sbb
or
je
fscale
je
jae
sbb
rol
ret
jae
out
jmp
aam
jno
jb
pop
mov
imul
cmp
push
out
in
xor
inc
inc
in
hlt
cmp
pop
pop
jno
movs
std
or
gs
in
arpl
push
mov
sub
dec
dec
ss
mov
or
out
mov
ret
js
push
(bad)
out
sub
push
sar
jns
dec
(bad)
adc
neg
ret
ja
push
xchg
leave
daa
dec
adc
out
(bad)
and
pop
and
out
jl
sar
adc
xchg
arpl
unpcklps
or
jecxz
push
sbb
arpl
sub
adc
xchg
je
jnp
movs
popf
or
push
cmps
xor
push
mov
cmp
jmp
pop
and
aam
retfw
sar
loopne
or
adc
dec
push
jmp
call
into
bndldx
iret
pusha
leave
inc
cld
xor
mov
inc
sub
xor
(bad)
repnz
xchg
daa
pop
push
push
sbb
cld
adc
(bad)
mov
jecxz
push
jnp
rcl
xor
lea
pusha
retf
or
xchg
xor
jno
je
adc
xlat
or
xchg
into
out
dec
adc
sub
inc
adc
xchg
hlt
or
aas
jecxz
fcomp
pushf
add
out
je
nop
cmps
sub
cmp
retf
jmp
mov
adc
out
and
jae
sub
jg
ins
adc
in
mov
es
outs
adc
call
mov
loope
pop
enter
vmovsldup
mov
add
retf
in
mov
neg
adc
mov
cld
mov
jnp
clc
inc
(bad)
cli
add
arpl
push
aad
rcl
enter
pop
cmp
xchg
mov
int3
dec
fbstp
int3
stos
pop
jmp
fdivr
and
popa
inc
push
xchg
fs
out
adc
mov
jmp
dec
popa
shl
add
inc
cs
jno
jl
xchg
mov
cmp
add
pusha
hlt
arpl
xchg
or
fdiv
out
popf
inc
or
gs
test
loopne
xchg
(bad)
movs
cwde
test
cli
test
dec
add
fdiv
lock
xchg
cmp
in
jmp
outs
and
cld
and
mov
popa
xchg
inc
pop
cmc
add
stos
adc
repnz
push
jns
scas
cmp
fldpi
mov
mov
add
xchg
mov
stos
xor
jb
cmp
push
aam
and
and
repz
bound
and
fcomp
or
mov
xor
pusha
sbb
lea
mov
mov
outs
movs
je
rol
test
pop
sub
jne
sub
dec
add
sub
sti
adc
pop
add
idiv
xor
mov
xchg
mov
add
retf
mov
in
push
adc
test
pop
cli
rcl
sahf
test
jno
dec
call
fdiv
push
mov
cmp
retf
inc
pop
call
jl
or
sbb
and
jl
and
pop
cmp
in
test
std
or
inc
loope
push
or
enter
inc
mov
jecxz
xor
mov
or
loop
adc
push
adc
push
add
mov
pop
fadd
or
movs
add
ja
fcom
pop
sbb
lds
push
pop
ss
pop
sbb
fld
and
outs
jne
jmp
xchg
ss
in
stc
dec
lods
in
lea
push
cmp
out
imul
ins
xor
sbb
enter
mov
push
cli
vdpps
cmp
xlat
adc
and
mov
xchg
jb
lods
cmp
and
les
out
dec
cmp
sub
jg
fmul
std
sbb
aad
xor
xchg
or
out
add
xchg
mov
jno
jo
cmp
pop
jl
jecxz
popa
cmp
fmul
adc
push
sbb
test
xor
arpl
test
pop
push
push
ss
cld
push
clc
xor
cmc
imul
mov
das
data16
aam
mov
shl
xor
pop
sub
cwde
js
sbb
push
sbb
out
xor
sahf
ja
movs
jge
add
sub
push
xchg
push
cmp
pop
add
mov
ds
(bad)
adc
pop
xor
out
push
push
imul
ins
test
or
(bad)
push
sbb
add
inc
jmp
push
in
enter
adc
jmp
lods
sbb
call
mov
popa
adc
pop
add
loopne
xchg
or
jne
jg
rcl
stc
mov
mov
xor
push
in
pop
cwde
and
daa
jecxz
ins
cmp
mov
pop
call
sbb
xchg
imul
and
xor
and
ins
icebp
pushf
addr16
mov
adc
clc
cmp
leave
jl
(bad)
ja
push
push
out
std
push
movs
sub
out
push
std
xchg
mov
rcl
mov
pushf
in
xor
int3
cmp
fstp
rcl
and
mov
push
xor
call
lods
js
or
mov
les
std
cwde
in
ins
dec
rcr
mov
pusha
(bad)
lock
ja
stos
jmp
fimul
jae
in
adc
cld
js
jmp
adc
sub
xor
add
jmp
xchg
js
jmp
mov
fwait
shl
es
sub
mov
sub
jg
mov
movs
test
jmp
stos
outs
aad
cli
push
jmp
sub
xor
pusha
jno
mov
js
or
test
mov
ins
jl
daa
mov
jns
ja
and
and
pop
dec
aad
push
std
mov
fsub
pop
test
in
xlat
std
push
aam
xor
and
int
aaa
loope
lds
jmp
adc
popa
gs
pushf
call
inc
jmp
pop
cld
rcr
mov
jl
sti
sbb
sbb
cs
mov
popf
mov
ss
xchg
dec
mov
sub
sub
rep
in
sti
xchg
adc
call
mov
adc
dec
cmc
stc
cld
cmps
add
loopne
pop
in
clc
pusha
pop
aam
sbb
iret
dec
inc
xchg
inc
sub
sbb
aaa
movs
mov
out
lahf
fmul
inc
adc
std
and
(bad)
cmp
jno
ja
cld
sbb
int3
cdq
shl
hlt
fbld
ror
cmp
xor
imul
push
push
(bad)
and
jno
pop
stos
cwde
aam
sub
pop
rcl
aas
add
mov
adc
sbb
cdq
test
lock
and
xor
paddsw
fsub
sub
test
loop
inc
movups
loopne
fstp
jnp
jb
inc
jae
out
aas
add
jg
add
(bad)
gs
xor
mov
sub
loopne
aaa
std
xor
leave
retf
push
gs
test
jne
inc
aaa
jo
int3
push
hlt
mov
gs
cmps
push
push
sub
fsub
ret
ins
sbb
gs
ins
cwde
mov
jae
sbb
sbb
shl
arpl
jecxz
xchg
sbb
(bad)
in
(bad)
adc
mov
xchg
push
inc
inc
mov
mov
pmullw
std
jae
and
cli
inc
sub
arpl
jl
out
je
and
or
sub
jae
dec
jmp
dec
jne
cmps
pop
inc
push
ja
xor
inc
out
lea
aad
xchg
test
out
xchg
sbb
cmp
in
cmc
in
mov
aaa
pop
inc
ins
adc
cld
imul
je
add
xchg
xchg
ret
lods
push
jl
push
pop
in
mov
call
sbb
mov
mov
gs
lea
push
sub
pop
pop
sbb
jmp
push
shl
(bad)
(bad)
xchg
mov
and
popa
aad
cmp
push
inc
xchg
aam
in
inc
jns
jl
call
cmp
test
xor
nop
gs
loopne
lods
imul
gs
add
mov
cmp
cmc
xor
xor
sbb
fwait
jmp
dec
in
call
mov
loopne
push
fwait
mov
xor
jmp
fimul
cmp
ror
pop
sti
push
jo
pop
in
mov
and
mov
push
jo
mov
and
repz
cwde
ss
mov
jmp
jno
scas
loope
jbe
mov
push
std
mov
lods
or
and
or
mov
cmc
ins
push
in
stos
sbb
out
push
pop
rcr
jecxz
adc
imul
fsub
mov
test
lods
lods
cmp
and
shl
rol
test
sbb
xchg
ficom
out
xchg
or
jmp
mov
and
dec
mov
or
jp
test
fstp
fcmovnb
xchg
cmp
out
lods
ins
fsub
ja
jmp
pop
std
inc
mov
cmc
jmp
jecxz
mov
adc
pop
js
es
lods
xchg
pop
push
xchg
int
jmp
cmovl
mov
adc
in
arpl
inc
lock
sub
cmp
sbb
mov
mov
jne
test
fs
xchg
jg
or
out
push
cmp
mov
std
mov
inc
pusha
outs
and
jmp
mov
cmc
push
ret
fsubr
hlt
mov
enter
lea
and
out
jg
in
sub
sbb
scas
xchg
xor
sbb
jmp
ja
repnz
dec
retf
ins
inc
sbb
sti
cld
xchg
sub
jp
arpl
jmp
imul
adc
pop
fcomp
mov
xchg
sbb
in
das
inc
test
xchg
push
adc
dec
ins
shr
xlat
mov
jg
(bad)
aam
mov
cmp
mov
sbb
or
sub
lods
inc
inc
out
mov
mov
push
or
rol
pop
into
pop
mov
int3
gs
sar
(bad)
test
push
aaa
imul
xchg
scas
inc
xor
sbb
inc
ins
jecxz
mov
and
mov
dec
xor
xchg
lods
push
stc
sbb
in
test
js
adc
aam
push
inc
push
adc
into
push
pop
and
and
loopne
xor
addr16
xchg
fcomp
std
add
push
and
adc
jo
mov
jno
dec
cli
dec
pop
mov
jl
call
loope
je
dec
sti
test
repnz
sbb
bound
call
je
adc
repnz
xchg
icebp
inc
cmp
cmc
mov
xor
sbb
xor
fist
pop
data16
fmul
ficomp
popa
jae
mov
addr16
movs
lods
cld
adc
xchg
adc
int
aad
gs
es
xlat
xchg
jnp
and
shl
fiadd
call
mov
gs
popf
sti
lods
adc
test
or
xor
push
loopne
mov
pusha
call
push
int
repz
push
aaa
jne
ret
mov
xor
out
add
scas
in
fldenv
fs
sbb
popa
enter
(bad)
adc
stos
ja
jnp
cmp
aaa
jmp
pop
popf
fcomp
sub
ins
mov
in
in
cld
cmps
xor
imul
push
or
mov
sbb
pop
push
ror
hlt
inc
add
div
mov
pop
test
jecxz
add
imul
xchg
ins
int3
adc
xchg
retf
call
repnz
xor
aaa
xchg
arpl
xor
into
and
or
psubw
xor
mov
xchg
test
add
xor
popa
test
icebp
xor
jmp
dec
xchg
js
or
repz
lock
push
out
in
mov
ja
movs
xchg
sub
sar
in
(bad)
and
push
xchg
xor
jno
mov
inc
movs
into
push
and
sub
js
test
hlt
dec
inc
push
jmp
or
dec
sub
ret
and
pop
out
sti
inc
outs
enter
scas
ins
js
out
xchg
or
cld
pusha
enter
or
pop
push
dec
cld
idiv
in
jbe
inc
js
outs
jns
(bad)
cwde
fcomp
mov
push
xchg
je
push
inc
loopne
or
and
cmps
sbb
movs
(bad)
sbb
ja
daa
fnstsw
pop
jnp
cmp
cmp
add
adc
fsubr
ds
push
bndldx
js
loopne
xor
stos
div
movs
lds
pop
add
inc
xchg
jl
mov
dec
or
cmc
cmp
jmp
sbb
(bad)
loope
dec
pop
dec
aaa
mov
int3
push
adc
nop
iret
inc
enter
mov
and
mov
dec
pop
movs
gs
sub
push
repz
mul
sbb
adc
inc
out
mov
sahf
push
fbld
cld
fst
movs
pusha
xchg
push
cmps
je
inc
inc
out
(bad)
xchg
push
adc
outs
xlat
pop
dec
cmc
inc
jne
inc
and
sbb
popf
dec
test
fdivr
call
mov
jne
movs
pushf
loopne
push
push
adc
sbb
cmp
sbb
addr16
inc
sbb
push
clc
ret
or
dec
and
and
(bad)
push
in
pushf
addr16
mov
mov
jmp
xor
stos
xor
fist
mov
push
jbe
pop
and
gs
(bad)
fs
vmovdqa
call
movs
in
pop
fwait
std
pop
mov
sbb
push
rol
sub
or
jecxz
inc
sbb
dec
in
cwde
cmp
cmp
xlat
and
or
and
inc
icebp
mov
mov
push
xor
pop
xchg
mov
mov
mov
stos
loopne
callw
ja
gs
mov
je
mov
jmp
out
sbb
mov
adc
movs
sub
enter
jno
retf
jne
int
dec
sbb
(bad)
(bad)
or
dec
sti
sub
inc
adc
add
loope
add
and
sbb
pop
inc
ss
sub
push
pushf
mov
cld
in
add
ja
neg
jge
jno
out
lods
xchg
mov
mov
test
retf
xor
sbb
outs
add
mov
cwde
loopne
mov
loopne
out
push
or
add
arpl
jp
mov
mov
pop
jecxz
push
push
je
mov
lahf
(bad)
lock
dec
and
aam
ror
xchg
mov
xchg
sbb
in
inc
loope
(bad)
sbb
or
and
ret
es
pop
imul
pop
dec
pushf
mov
bound
je
(bad)
add
add
(bad)
jno
mov
push
cld
shl
and
(bad)
gs
xchg
(bad)
jmp
push
inc
xchg
js
out
fiadd
jnp
push
dec
scas
test
jmp
dec
add
xchg
pop
imul
fild
in
cmp
sti
cld
push
scas
out
(bad)
add
in
aad
js
sbb
jne
jbe
mov
aas
sbb
xor
test
call
pop
out
mov
xor
sbb
sbb
icebp
fwait
or
ror
clc
pop
add
fcomp
xor
jne
add
call
mov
mov
loopne
xchg
(bad)
rcr
xor
pop
mov
sub
pop
mov
add
or
stc
popf
loopne
xchg
fsubr
into
lods
sbb
mov
push
xor
loopne
sbb
or
pop
cwde
test
sub
cmp
dec
xor
push
jnp
andnps
jno
jle
and
sbb
xor
aad
cli
rcr
jge
xchg
rcl
shl
in
sbb
test
mov
cwde
aad
loop
or
test
and
mov
cs
push
sbb
and
jecxz
add
out
push
mov
and
int3
lock
adc
jge
mov
xchg
pop
repz
inc
xor
mov
mov
push
loope
fs
pop
sbb
outs
mov
pop
mov
cmp
ins
jno
dec
inc
adc
inc
ret
dec
cdq
sbb
mov
xchg
and
push
or
(bad)
out
lods
push
mov
push
aaa
outs
and
jae
jp
push
test
loopne
mov
add
aad
xchg
js
cmc
bnd
sti
jne
push
jmp
jecxz
cmp
arpl
pop
xlat
push
inc
inc
sbb
cmp
mov
inc
in
jl
std
lods
push
(bad)
shr
je
adc
out
jmp
adc
adc
pop
(bad)
mov
in
retf
and
and
mov
jne
fistp
mov
sub
call
arpl
add
inc
icebp
mov
shl
bound
popa
xor
and
pushf
jmp
gs
and
inc
test
xchg
aad
inc
dec
adc
gs
fsub
sub
cmps
loopne
push
push
adc
les
loope
sbb
adc
mov
or
mov
inc
sti
scas
mov
jmp
mov
and
shr
push
hlt
mov
adc
pop
jmp
test
push
jmp
loop
pop
call
inc
adc
sbb
(bad)
sbb
and
dec
gs
int
aad
rcr
adc
sahf
adc
fdivr
xor
xchg
in
mov
scas
mov
hlt
fstp
inc
fnsave
mov
jmp
sub
xor
lock
adc
test
or
call
es
cmp
shl
push
mov
or
xchg
std
clc
pop
cmc
add
shr
add
xchg
iret
mov
lock
dec
lds
out
xor
jecxz
adc
(bad)
sar
sbb
jl
xor
in
cld
fld
sbb
jge
retf
movs
in
cmp
mov
add
mov
(bad)
adc
outs
sti
xchg
lds
jns
fisub
ss
jmp
add
ins
and
push
out
jmp
dec
sbb
in
paddsw
add
mov
pop
outs
mov
add
mov
or
jmp
lods
add
data16
arpl
(bad)
out
jnp
pop
mov
sbb
movs
cld
jmp
imul
aaa
jp
dec
sbb
xor
in
je
(bad)
cmp
das
jecxz
hlt
jmp
mov
arpl
aaa
sbb
push
and
dec
adc
push
hlt
inc
dec
clc
mov
push
adc
mov
fist
inc
mov
lods
out
jmp
adc
mov
pop
in
xor
jbe
push
dec
out
out
cmp
repnz
cwde
jmp
push
xchg
xchg
pop
push
sti
lds
jo
adc
ds
stos
and
xchg
stos
loop
adc
lds
pusha
add
adc
loopne
dec
fucom
call
push
xchg
or
dec
push
dec
jne
push
xchg
xor
or
cwde
pop
test
call
cs
rcr
add
fistp
jl
pop
sbb
dec
sbb
xchg
loopne
xor
jae
cs
mov
push
mov
in
fbld
xor
clc
je
xchg
mov
out
cld
dec
jo
xchg
ins
xchg
call
cld
(bad)
bound
xchg
jne
xor
jl
pop
or
test
adc
dec
popa
jns
sbb
stos
shl
cmp
dec
pop
xchg
sbb
out
pop
xchg
dec
gs
adc
inc
jge
rcl
pop
xchg
mov
jmp
jae
xlat
and
mov
es
inc
pop
and
cwde
retf
sar
xor
std
push
jno
lock
cli
jecxz
and
sti
mov
dec
loop
cdq
add
aaa
inc
dec
in
stos
push
jns
and
xor
pushf
cmp
mov
loope
inc
gs
mov
jp
jne
out
in
pop
push
cs
pushf
gs
jmp
cmps
fnstcw
test
jecxz
push
sbb
jne
mov
out
les
loope
mov
in
push
jmp
sub
dec
add
rcr
cmp
and
xchg
pop
mov
sbb
stos
add
jne
loopne
movs
pushf
nop
dec
loope
movs
sbb
sub
shl
movs
sbb
loope
and
mov
clc
add
mov
inc
cwde
add
mov
movs
data16
clc
sahf
rol
icebp
loopne
retf
cld
mov
mov
call
jge
mov
dec
cld
(bad)
ins
push
ror
mov
jno
loopne
mov
adc
sbb
add
sbb
loopne
mov
mov
push
adc
mov
jbe
cmp
jmp
aad
push
xchg
lods
hlt
fwait
adc
jno
dec
cmp
lods
aad
call
fwait
pusha
call
js
xor
push
outs
push
sub
inc
or
sub
cdq
jno
jo
inc
js
pop
jb
ss
adc
bound
jmp
fxch
rcr
stos
sub
sbb
scas
jl
jns
pop
imul
movs
xchg
adc
push
jecxz
clc
sbb
test
mov
jns
mov
jecxz
ret
lods
or
out
add
xchg
dec
cld
push
and
xchg
sub
xlat
sub
pop
loop
cwde
push
push
(bad)
adc
(bad)
cmp
push
adc
push
(bad)
je
cmp
inc
test
and
test
into
xchg
jae
pusha
out
xchg
je
mov
fwait
ss
dec
mov
movs
inc
gs
pop
cld
sbb
outs
push
jne
jmp
jno
inc
mov
jmp
(bad)
in
(bad)
cmp
adc
mov
jbe
push
push
in
mov
call
jns
int
mov
shl
scas
inc
push
mov
mov
enter
std
dec
adc
pop
jmp
sbb
test
cld
aad
test
arpl
pop
add
mov
out
ins
mov
ds
xor
adc
push
ret
aaa
into
sbb
pop
add
mov
and
sar
cwde
adc
xchg
imul
into
stos
pushf
jmp
jae
pop
in
xor
lds
cmps
inc
jo
fadd
adc
xor
inc
out
mov
push
out
push
fsubr
hlt
(bad)
loopne
mov
pop
gs
push
out
mov
sub
test
out
or
xor
adc
pop
in
adc
xor
xor
jo
das
adc
(bad)
ins
sahf
xor
mov
out
test
sbb
mov
adc
jecxz
call
aam
loope
aam
xchg
popa
ds
dec
push
test
mov
jecxz
xchg
add
(bad)
jns
add
lods
sbb
and
hlt
mov
lods
int3
jbe
lods
xlat
push
xchg
sbb
mov
cwd
clc
loopne
pop
in
adc
std
mov
sub
fxch
neg
mov
not
push
sub
es
pop
cmps
xor
jbe
or
and
(bad)
add
or
es
dec
push
call
jbe
ins
nop
sub
out
adc
push
and
xchg
mov
ret
pusha
mov
fcomi
jg
mov
xor
fs
js
inc
sub
add
sahf
mov
push
adc
fistp
sbb
out
jns
adc
shl
xchg
jno
mov
sub
sub
sbb
inc
and
mov
push
cmp
loop
call
movs
pusha
fcom
aaa
inc
daa
js
adc
ret
xchg
mov
mov
or
outs
jecxz
and
sbb
ret
jae
(bad)
jmp
jno
mov
jo
into
gs
sbb
cli
sti
ror
adc
xor
add
cld
lock
cmc
sti
push
sub
add
mov
dec
push
push
push
les
jl
lods
push
fsub
mov
add
cmp
addr16
fcomp
push
adc
dec
sti
mov
inc
lods
es
cmp
xor
repz
sbb
jl
cmp
jne
xor
dec
xlat
sahf
mov
sbb
xchg
scas
pop
mov
or
inc
daa
adc
cmp
cli
test
inc
loope
xor
inc
ficom
push
add
adc
arpl
or
pusha
cmp
jmp
fisubr
rol
int
call
ds
adc
adc
movs
aaa
cmp
repnz
jp
(bad)
aam
test
xor
pop
mov
or
adc
jle
and
mov
inc
lea
cli
nop
cdq
cmc
aaa
out
push
mul
jge
je
shl
sbb
pop
js
je
cmps
xchg
cld
sbb
(bad)
push
adc
cwde
mov
js
and
inc
in
fmul
pop
js
loop
sub
inc
push
pop
xor
fwait
mov
rcl
ds
cld
inc
pop
enter
mov
movs
jmp
mov
or
js
out
mov
mov
jge
in
sti
outs
lods
je
xchg
pop
and
int3
xor
(bad)
into
adc
ret
je
mov
in
loopne
xchg
lds
xor
hlt
cs
addr16
and
popa
inc
(bad)
cld
cmp
ja
pop
shl
data16
adc
clc
jbe
(bad)
cmp
add
sbb
adc
jns
mov
(bad)
sbb
out
fmul
pushw
inc
xor
xlat
sbb
sbb
add
ret
pop
ja
std
js
or
aaa
(bad)
arpl
sub
mov
add
push
mov
adc
adc
loopne
sbb
mov
movs
xor
cmp
pop
ins
adc
inc
xor
loopne
into
in
aas
mov
push
fidivr
mov
jg
fdivr
std
iret
bound
or
ins
aam
xchg
mov
push
sbb
sbb
dec
and
out
cli
fist
or
xchg
push
rcr
xchg
pushf
pop
jmp
out
in
jg
add
pop
pop
inc
iret
inc
jae
sub
fsubrp
sbb
aad
mov
iret
pop
cmp
es
mov
aam
ficom
jae
push
mov
rcl
mov
adc
cmp
pop
jns
aad
loop
fadd
pop
(bad)
cmp
shr
push
(bad)
mov
das
adc
dec
cld
adc
xor
and
fmul
mov
test
xor
js
pop
cld
aam
test
int
pop
push
or
sbb
sti
out
(bad)
xchg
adc
idiv
je
ror
push
or
jmp
push
xor
mov
rcl
in
xchg
mov
(bad)
adc
inc
imul
repnz
cmps
inc
sub
stos
icebp
sbb
and
into
lods
xchg
inc
mov
adc
mov
jno
or
iret
pop
inc
push
sub
dec
movs
xchg
cwde
and
sti
cmps
push
movs
pop
fadd
fcmovbe
mov
in
xor
es
push
push
aam
pop
or
dec
xchg
or
add
mov
inc
hlt
xchg
pop
cdq
imul
fbld
adc
adc
outs
std
aam
mov
test
adc
jl
mov
hlt
retf
xchg
add
cli
outs
dec
add
xchg
fistp
ror
add
jmp
jno
ret
push
mov
je
cmps
or
icebp
js
cld
test
inc
mov
sbb
out
ficomp
add
call
movs
add
mov
cmp
jecxz
cwde
arpl
imul
sar
xchg
adc
outs
pop
movs
aaa
jecxz
int3
sbb
lods
repz
cwde
sbb
sbb
fidiv
sub
out
dec
test
jb
pop
dec
lds
loop
and
xor
cmc
pop
adc
leave
adc
mov
dec
jne
loope
adc
push
call
pop
or
icebp
test
ins
les
push
mov
jmp
jne
jg
dec
es
pushf
xchg
pop
push
cld
jno
push
clc
stos
and
jl
(bad)
shl
movs
pushf
popf
loope
cmps
les
adc
inc
push
sub
stos
jecxz
xchg
sbb
xor
movs
cld
sbb
cld
and
sbb
pusha
pop
inc
iret
inc
rcr
pop
cwde
push
jae
ins
jno
pusha
cld
int
sub
inc
das
xor
pusha
adc
in
out
in
xor
gs
mov
xchg
test
push
in
cld
xor
push
(bad)
rcl
add
add
adc
mov
out
ins
int3
(bad)
ds
xchg
sbb
push
loop
addr16
fnsetpm(287
add
xchg
lds
js
fisttp
in
jg
adc
adc
xchg
xchg
gs
and
js
movs
inc
cmp
cmps
call
or
jne
push
loopne
dec
rcl
inc
and
jmp
jns
faddp
mov
xchg
push
add
jb
jo
loop
or
and
pop
jmp
sbb
fnsave
xor
enter
je
and
xor
test
mov
cmp
out
rcl
stc
es
sbb
data16
sub
shl
fidiv
int3
fadd
xor
mov
jo
jne
call
out
and
sar
push
xchg
(bad)
or
aas
arpl
js
inc
test
mov
mov
jno
call
(bad)
sahf
cmps
mov
jno
xor
jns
jbe
xchg
mov
fidiv
and
xchg
sbb
xor
add
mov
sti
mov
js
dec
cmc
test
aam
sbb
sub
movs
cwde
jecxz
xchg
jmp
fcom
sbb
out
push
push
xchg
and
lock
mov
pop
push
jne
ins
cmp
push
jb
call
or
div
js
or
in
es
jecxz
sub
pop
pop
cld
add
out
pop
inc
and
jl
xchg
xchg
cmp
mov
shl
xchg
jmp
gs
inc
xchg
jns
jmp
mov
or
scas
aam
jle
ficom
bound
mov
lods
or
out
add
adc
xor
repz
je
and
pop
sub
push
cmp
and
push
xchg
add
xchg
add
ss
hlt
xchg
cmp
in
dec
adc
cmp
jne
ror
mov
sbb
test
and
mov
jl
cmp
xor
pop
addr16
test
pop
and
dec
mov
jge
(bad)
xor
jne
je
dec
mov
jp
call
xor
neg
sub
mov
pop
or
cwde
js
sbb
in
movs
(bad)
loope
jp
cmps
mov
mov
adc
sub
test
loope
test
lahf
test
jp
aam
test
add
add
dec
imul
out
inc
loop
jmp
loope
cmp
ja
leave
in
jg
pop
movs
adc
sbb
rcl
add
xor
pop
xchg
jmp
jp
ja
mov
out
mov
(bad)
fcomp
adc
push
cwde
pushf
push
adc
imul
jl
movs
xchg
stc
call
je
and
in
sbb
(bad)
xchg
mov
jno
adc
add
in
inc
jmp
jae
push
xor
stc
retf
sti
sbb
adc
push
jb
clc
cld
push
ja
repz
xor
dec
fidivr
pop
push
enter
xchg
push
fsubr
fistp
clc
pop
retf
jae
inc
push
out
and
aaa
pop
mov
and
sbb
adc
mov
loop
jl
ss
rcr
push
lds
call
sub
aad
cmp
and
pop
mov
xchg
push
xor
pop
adc
imul
in
test
push
mov
dec
xor
push
ins
push
gs
mov
push
pop
mov
arpl
or
push
in
mul
mov
inc
jp
and
fs
stos
pushf
rcl
fs
call
hlt
jl
xchg
xor
add
lods
retf
or
rcr
je
ds
mov
xor
clc
inc
mov
std
cld
sub
int3
jne
sbb
inc
adc
fadd
cmc
ja
and
loopne
out
add
dec
xor
out
(bad)
xchg
cli
mov
xchg
add
cmp
pusha
mov
lods
loop
or
fadd
inc
std
jl
adc
nop
loopne
and
or
push
mov
ins
jmp
inc
push
mov
outs
push
imul
inc
sbb
cmp
imul
out
dec
add
mov
imul
add
jae
jmp
push
imul
fs
push
cli
dec
mov
les
add
sbb
jae
inc
loop
fdivr
in
jecxz
cmp
addr16
rcr
test
idiv
sti
dec
je
addr16
retf
pushf
pop
or
call
call
loopne
push
clc
cmp
rcl
or
sbb
xchg
push
or
sub
rol
xor
das
add
sbb
icebp
sbb
lds
loopne
sbb
add
int
pop
pop
or
loope
ror
shr
sti
stos
clc
push
mov
inc
xchg
inc
dec
push
lock
fstp
mov
xor
test
inc
cmp
xor
inc
out
jecxz
mov
adc
repz
imul
dec
movs
pop
cmp
ficom
outs
jecxz
outs
adc
rcr
test
data16
mov
inc
pop
out
jo
adc
mov
cld
and
inc
push
mov
fsubr
cmc
popf
addr16
jg
cmp
mov
call
les
push
sub
cmps
jge
push
shr
hlt
imul
sti
mov
push
test
xchg
xchg
sbb
adc
cmp
or
add
jge
and
mov
push
fcomip
rol
adc
aad
out
xor
hlt
js
pusha
arpl
mov
sbb
in
and
fld
jae
gs
lock
pop
jbe
je
ins
pop
fisttp
cli
clc
inc
push
push
jo
adc
lods
sub
push
add
push
mov
cmps
call
in
pop
jl
add
jnp
or
adc
cmc
ret
cdq
dec
xor
inc
cmp
clc
mov
aam
loop
in
lea
push
movs
stos
hlt
adc
sbb
inc
adc
mov
call
push
fbstp
add
out
push
leave
sbb
jmp
or
ror
or
retf
push
cmp
push
loopne
in
cmp
adc
lods
outs
out
ja
sub
xchg
movs
jnp
inc
cmp
rcl
jge
inc
cwde
xor
mov
pop
xchg
retf
add
add
and
adc
pushf
pop
inc
sub
in
cwde
ins
xor
xchg
clc
sbb
add
xchg
push
dec
jns
jl
dec
aad
lock
in
and
leave
movs
inc
sahf
gs
test
or
jno
xchg
repnz
add
dec
adc
sbb
(bad)
ficomp
dec
jno
jne
pop
scas
sbb
mov
(bad)
xchg
xchg
or
mov
mov
in
aad
add
jecxz
sbb
jp
pop
sti
and
add
jecxz
jmp
ret
and
mov
(bad)
rol
mov
loopne
call
cmp
mov
pop
push
add
mov
inc
xchg
(bad)
push
jmp
test
pop
fs
sbb
outs
or
xor
xchg
sti
mov
push
lock
pop
lods
cmp
aad
push
dec
lds
shr
and
aaa
fnsave
mov
xchg
lods
xchg
sbb
dec
jne
pop
out
or
in
out
cdq
mov
cmc
fucomip
je
and
scas
dec
mov
add
xor
add
retf
inc
mov
mov
or
clc
add
pusha
inc
mov
xchg
sbb
add
sub
add
sbb
loope
loopne
pushf
xlat
sti
xor
sbb
mov
out
jmp
test
loope
and
mov
ret
shl
test
adc
push
ja
or
loop
pushf
pop
outs
add
inc
adc
or
movs
clc
cld
int
sbb
arpl
xor
std
outs
in
shl
addr16
sbb
cwde
push
add
int
mov
sbb
adc
pusha
jmp
cmc
icebp
pop
int3
pop
fisubr
sti
or
jno
mov
out
std
xchg
popa
adc
dec
je
jecxz
xor
sbb
mov
ficomp
mov
pop
pop
rcl
mov
int3
hlt
mov
js
xchg
pop
or
aas
(bad)
pop
add
aam
in
fs
stc
std
cmps
inc
test
loop
and
pop
sub
les
test
in
push
cmc
inc
aaa
mov
pushf
mov
mov
std
int3
aam
loopne
movs
jns
in
push
dec
in
call
sub
cwde
adc
sbb
sub
cmp
cmps
adc
ins
popa
mov
and
js
push
add
pusha
sub
loop
lods
(bad)
xchg
rol
ins
retf
fnsave
jb
jl
out
shr
xchg
jns
aam
(bad)
or
outs
(bad)
call
clc
cmp
xchg
test
jp
test
sbb
adc
hlt
add
dec
inc
fisttp
cmp
jecxz
push
adc
mov
push
sbb
jbe
or
aam
outs
xor
inc
push
adc
lock
lds
sbb
int3
jae
in
mov
cdq
lods
and
jne
lods
sti
push
or
mov
jp
jg
ins
mov
inc
lahf
rcl
push
pusha
push
cwde
jmp
jmp
test
adc
out
cmp
pusha
dec
call
push
sub
std
jo
pop
mov
and
clc
jecxz
mov
loop
jne
mov
mov
inc
lds
pop
popf
outs
or
pop
call
popa
sti
jbe
rcr
mov
ds
or
retf
cld
mov
daa
jae
mov
fadd
pop
out
lea
xchg
test
jno
lods
fs
mov
aaa
out
xchg
cmp
add
jne
push
lods
pusha
pop
aaa
adc
je
adc
jmp
xor
popa
or
sbb
cld
sbb
imul
push
adc
jo
loop
cmp
pop
xchg
inc
out
adc
or
stos
dec
and
push
(bad)
mov
sbb
shl
sbb
jno
mov
and
loop
xchg
push
test
cmp
fist
push
test
ja
cs
xlat
xor
cmps
inc
adc
and
ss
ficom
(bad)
jecxz
dec
gs
mov
inc
add
mov
je
out
jmp
cmp
sub
in
in
call
adc
jmp
neg
sub
add
pop
mov
pop
cmp
mov
and
test
xor
pop
loope
xor
shr
lods
aam
ja
pop
in
(bad)
fistp
imul
add
arpl
imul
ins
mov
cmps
jmp
sbb
xor
push
std
xor
arpl
mov
pop
jle
adc
ja
addr16
or
xchg
xchg
test
gs
outs
loope
sar
jmp
cld
pop
ins
push
dec
adc
je
adc
cdq
cmps
(bad)
retf
push
or
pop
fucomp
adc
lea
mov
loop
cmps
fsub
adc
gs
adc
and
adc
adc
pop
paddsb
loopne
retf
call
xchg
add
adc
daa
fst
mov
std
fst
jp
ror
shl
and
xchg
mov
fbstp
in
add
sbb
gs
out
push
in
idiv
mov
xor
adc
retf
or
cmc
jmp
mov
movs
sbb
bnd
dec
jae
das
(bad)
sti
int3
test
mov
cmp
gs
test
jecxz
fs
jns
int
sti
rol
test
mov
mov
mov
mov
and
jb
inc
jno
pop
in
xor
push
in
in
push
xchg
xor
lods
jmp
push
xor
cmp
ret
shl
loop
xchg
dec
fild
push
mov
ins
cmp
xlat
adc
mov
and
mov
push
xchg
xor
(bad)
mov
pop
gs
inc
out
cmp
sbb
jecxz
xor
enter
inc
adc
sbb
jge
xor
push
or
es
je
pop
push
loopne
movs
jne
fistp
and
call
loop
test
je
mov
sti
lods
adc
or
popa
test
push
sbb
jns
in
out
push
sbb
mov
sub
xchg
cli
jecxz
clc
gs
das
js
adc
jmp
push
sub
or
rcl
in
rol
push
nop/reserved
retf
into
xchg
hlt
dec
call
adc
push
gs
push
adc
add
loopne
jle
push
cs
cmc
inc
out
les
add
mov
pusha
and
jmp
xor
imul
je
ficomp
pushf
mov
push
retf
movs
jno
int
les
xor
jns
mov
dec
or
cmc
das
mov
sbb
fdiv
push
xchg
not
push
aad
in
sbb
dec
test
scas
icebp
jecxz
in
hlt
cmp
push
mov
or
mov
enter
movs
js
jecxz
xor
xchg
in
jmp
enter
stc
scas
gs
sub
sub
ins
or
pop
sahf
jno
push
cli
mov
sub
jns
fisubr
jge
ss
jl
inc
cld
int3
push
mov
cld
stc
mov
aad
or
test
dec
lock
add
les
sub
dec
icebp
gs
dec
je
ror
mov
adc
pop
sub
test
sbb
jae
mov
pop
lds
xchg
xchg
scas
sub
aas
popa
jl
jns
cmp
jne
je
in
add
neg
and
pop
std
add
xchg
mov
xchg
or
rcl
sub
aam
jne
call
add
lock
lahf
hlt
aam
cmc
shl
cli
ins
int
es
std
sbb
sbb
lods
call
dec
mov
sub
clc
pop
jnp
xor
mov
pop
or
push
xchg
xchg
xchg
fistp
inc
rcr
out
push
xchg
xlat
pop
mov
mov
pop
scas
push
data16
adc
sub
inc
jnp
nop
cld
out
add
sbb
push
dec
in
mov
push
xchg
jle
fistp
xor
out
pop
in
cli
mov
ja
in
out
and
or
dec
pop
xchg
lods
pop
gs
cmc
xchg
jnp
push
aas
int3
push
xchg
loope
xlat
int
je
sti
mov
xor
and
mov
ja
mov
pop
adc
ret
sub
cmp
mov
adc
mov
out
inc
test
lds
inc
inc
cld
inc
cmc
out
adc
push
push
dec
push
pop
call
sbb
popa
sbb
idiv
cmp
cmp
sbb
xchg
call
dec
loope
fdivr
sub
jecxz
in
push
adc
test
or
fist
loopne
jns
fadd
out
mov
ins
pusha
aam
jmp
sti
sbb
lds
cli
pop
repnz
jne
adc
jmp
gs
out
sbb
outs
(bad)
ins
hlt
pop
neg
inc
mov
xor
jl
xchg
cli
stos
or
xchg
loopne
aad
lock
stos
xor
je
xchg
or
mov
fisub
adc
mov
fbstp
push
adc
repz
jge
cmp
fdiv
sti
sub
pushf
int3
pusha
add
inc
sbb
xor
ins
push
jp
xchg
sub
cld
push
cmp
ja
nop
and
xchg
retf
lods
(bad)
jp
(bad)
ja
cwde
imul
outs
or
movs
xor
ret
movs
and
lods
pusha
jg
inc
fisttp
je
mov
aaa
or
fsub
pop
jno
loopne
fiadd
sbb
sub
nop
and
movs
xchg
xchg
(bad)
sub
and
jno
jg
in
xchg
std
das
mov
and
ins
jg
fdiv
or
xchg
or
in
pop
sub
out
dec
adc
test
mov
xchg
loop
jb
aas
hlt
sahf
int3
jns
gs
xor
lds
shr
loope
inc
shl
loopne
fist
out
sbb
jae
retf
xchg
neg
mov
push
hlt
shr
imul
loope
sub
and
cmp
retf
jmp
sbb
xor
push
dec
adc
or
xor
or
xor
popf
mov
es
mov
jmp
arpl
arpl
sub
add
ret
push
lock
fadd
stos
mov
jnp
sbb
and
loop
ins
popf
xor
mov
clc
lods
fcom
in
clc
in
pop
test
dec
dec
cdq
adc
test
mov
les
push
jecxz
jmp
adc
jne
or
and
js
push
jmp
and
jl
or
mov
push
hlt
sub
je
sbb
pop
out
xchg
cld
push
sbb
out
sub
or
push
loopne
mov
hlt
dec
das
xor
sbb
mov
je
mov
mov
mov
call
pop
popa
inc
push
loop
and
sub
je
inc
jmp
pop
mov
shl
fcomp
sub
lods
ins
or
mov
cwde
test
(bad)
call
adc
fidiv
sar
add
xor
pop
jg
push
xchg
lods
fs
sti
push
js
or
fst
or
adc
mov
outs
ret
ja
jne
pusha
ja
not
fsub
or
dec
adc
call
inc
mov
call
mov
test
sub
shl
popa
mov
push
xor
arpl
neg
mov
inc
jno
xor
dec
add
jns
or
push
pop
adc
add
adc
add
enter
dec
add
jno
adc
int3
push
imul
inc
in
loopne
xchg
aaa
daa
push
jae
and
inc
and
fs
lods
sti
aad
sbb
loope
aam
sbb
popf
int
call
loop
ins
les
(bad)
outs
jo
(bad)
xchg
adc
or
jae
mov
push
mov
gs
xor
pop
in
pusha
sbb
mov
cmp
xor
push
push
dec
dec
aam
hlt
movs
mov
fcom
ret
je
sub
clc
inc
inc
inc
loopne
pop
inc
adc
aam
push
pop
fbld
out
repz
mov
cmp
mov
and
test
push
pop
stos
out
repnz
xchg
in
in
(bad)
sbb
and
aad
(bad)
int3
cld
pop
xor
jne
jnp
sbb
mov
shl
cmps
(bad)
mov
stos
enter
xlat
movs
jl
shl
pop
mov
xchg
sbb
into
pop
jg
mov
push
jmp
add
std
ficomp
ja
leave
in
mov
stos
xor
rcl
jg
hlt
or
dec
aad
jecxz
adc
cwde
adc
push
inc
jmp
pop
mov
out
or
fdiv
call
cdq
out
test
fild
xchg
mov
in
fs
inc
xchg
adc
sar
leave
hlt
int3
fist
sub
or
xor
xchg
inc
jecxz
fcom
in
and
call
mov
sbb
and
add
sbb
test
add
push
dec
ins
stos
in
xchg
gs
or
out
and
dec
cs
xor
clc
or
xchg
xchg
lods
pusha
jecxz
push
movs
aas
call
mov
xor
or
cld
mov
jge
jns
cmp
scas
aam
dec
lock
push
xchg
and
data16
adc
cdq
mov
pop
pop
pop
popf
outs
fdiv
aam
js
out
addr16
int3
or
mov
loop
clts
xchg
mov
jbe
push
inc
call
push
shl
inc
adc
outs
clc
test
movs
xor
shr
ja
mov
(bad)
(bad)
xor
mov
outs
call
xchg
push
xor
or
cld
cmps
fsub
aad
loope
push
sbb
pop
push
jl
dec
pop
int3
lods
and
or
fcomp
adc
fdivrp
sub
test
loopne
adc
push
xchg
mov
mov
loop
les
ss
ret
cmp
pop
das
out
hlt
jnp
pusha
sti
pop
jmp
lds
ret
call
and
xchg
das
mov
scas
retf
gs
mov
test
cmps
and
or
mov
clc
adc
adc
repnz
inc
pop
std
cmp
in
jecxz
push
xchg
mov
push
mov
fucom
pop
mov
or
clc
iret
(bad)
xor
test
dec
mov
jg
enter
(bad)
cld
jns
push
xchg
enter
inc
xchg
out
or
push
in
and
outs
jnp
cld
cmc
aaa
iret
adc
pop
lods
mov
nop
call
jmp
dec
xchg
sbb
xchg
mov
cwde
cmp
aad
jns
cwde
repz
sbb
jl
jns
aam
rcl
dec
add
hlt
inc
add
(bad)
inc
jecxz
or
push
push
jmp
cmp
add
and
lods
mov
in
push
pop
sti
in
sub
mov
das
xor
mov
sbb
adc
and
call
ficomp
cmps
cwde
xor
in
xchg
pop
ins
sub
sub
ffreep
cmp
jno
aaa
mov
pop
push
adc
adc
cmp
jmp
outs
gs
fwait
push
int
adc
push
(bad)
nop
pop
cdq
xor
jmp
loopne
test
sub
in
push
and
cmc
and
sbb
sbb
out
stos
xor
xor
jo
fadd
mov
in
int3
aam
mov
aad
in
cmp
aam
jns
mov
imul
or
loopne
add
xchg
xchg
and
ja
test
push
std
hlt
mov
lds
nop
ret
fist
or
jecxz
nop
arpl
in
mov
jmp
hlt
imul
js
sub
and
dec
mov
inc
movs
xor
mov
lds
jge
in
out
unpcklps
ror
xchg
push
jecxz
sbb
shr
xor
and
call
jl
in
push
mov
test
fmul
arpl
push
xor
js
in
pushf
or
jne
adc
data16
cmp
mov
outs
and
cmp
(bad)
push
stos
jno
gs
std
lods
xor
adc
mov
movs
loopne
retf
fild
mov
push
ins
sbb
dec
xchg
cwde
mov
sbb
les
adc
push
jecxz
add
fistp
mov
in
test
jmp
retf
adc
nop
mov
sbb
adc
outs
adc
scas
aaa
xlat
xor
clc
cmp
xor
inc
or
enter
paddusw
jno
outs
out
adc
aad
cld
inc
cmc
in
dec
outs
push
popa
push
lods
cmp
lahf
mul
sub
lea
jb
in
lds
sti
fisttp
aad
out
unpcklps
dec
cmp
adc
jno
inc
jns
aas
dec
sti
dec
pop
dec
in
dec
jmp
addr16
das
sti
mov
cmp
movs
nop
retf
jns
xchg
jo
jae
or
shl
inc
iret
and
add
call
cmps
add
mov
add
loopne
pop
xor
pop
xor
pop
adc
jnp
push
es
inc
in
loope
add
addr16
js
or
mov
adc
jbe
sbb
out
ds
call
dec
cmp
dec
adc
xor
and
in
inc
jmp
dec
and
xchg
cmp
scas
out
pop
cli
out
or
cmps
ins
dec
out
pop
mov
and
ds
dec
xor
pop
cwde
push
std
(bad)
adc
sar
fmul
sbb
scas
adc
cmp
adc
lock
test
jmp
call
sbb
adc
dec
add
jns
xchg
call
test
pop
and
lea
mov
in
inc
std
lea
and
xlat
ret
xor
int3
or
jl
sbb
push
mov
and
and
fs
cmc
and
mov
and
jge
rol
jmp
std
push
gs
cli
aad
daa
cdq
nop
rcl
xchg
inc
in
retf
sub
bnd
add
jae
sub
retf
sbb
aad
jne
mov
xchg
or
sub
cmp
push
adc
jmp
lods
dec
test
in
and
adc
out
lods
hlt
sub
inc
std
and
movntps
dec
adc
xchg
jge
dec
test
sub
mov
inc
or
enter
repz
jns
out
sbb
and
mov
cld
lds
inc
aam
fisub
js
xchg
out
cwde
in
cld
cmps
dec
vpsllw
and
ins
loop
fcomp
adc
loop
sub
xor
sti
sbb
les
push
in
inc
dec
and
push
outs
ins
daa
mov
loopne
adc
in
push
jns
(bad)
cmp
cmps
jmp
inc
xchg
push
jae
jne
fcomp
ficom
loop
in
mov
pusha
mov
cmp
sub
fucomip
mov
adc
jno
out
pop
leave
sahf
mov
dec
sbb
sar
xor
enter
add
pop
xchg
dec
retf
pop
test
pop
push
add
loopne
add
mov
ja
test
arpl
mov
out
dec
out
aaa
sub
call
and
gs
mov
jmp
loopne
sbb
add
push
inc
and
dec
xchg
pusha
jns
cld
jecxz
adc
xor
pop
cmp
loop
imul
ficom
push
sbb
arpl
and
lods
mov
push
out
clc
hlt
addr16
adc
jmp
and
pop
xchg
repz
jp
shr
or
and
xchg
push
xchg
jne
and
xchg
fsubr
movs
or
sbb
add
in
cmp
xchg
jns
ja
in
jp
sub
sbb
sub
cmp
xchg
xchg
xor
mov
adc
push
inc
lea
fs
push
stc
aad
mov
xchg
leave
or
mov
inc
inc
lds
add
sbb
lock
push
pop
sbb
adc
pushf
out
push
inc
fiadd
mov
mov
pop
mov
mov
xchg
dec
inc
push
mov
dec
xlat
sbb
xor
pop
clc
adc
or
mov
popf
icebp
and
fldenv
ret
jl
fistp
push
jno
dec
sti
fnstcw
aaa
retf
dec
xor
or
enter
inc
std
stos
fcom
call
cmp
ret
pop
cmp
push
sti
repnz
jnp
test
jmp
and
and
fadd
add
push
and
inc
sub
sbb
popa
add
cdq
jns
cmp
sahf
repz
fistp
shr
add
push
test
in
cmp
inc
in
inc
neg
test
or
add
push
gs
pushf
call
sbb
mov
xchg
mov
int
push
mov
and
inc
lods
out
je
sub
fisttp
call
in
jne
out
mov
mov
push
dec
jmp
cmp
loopne
cmp
and
jecxz
inc
ret
add
xchg
adc
sbb
or
mov
fisubr
movs
pop
loopne
sbb
pusha
push
mov
jmp
std
ja
mov
push
dec
cmc
push
out
and
mov
popf
in
jl
inc
fild
jp
xor
loop
cmp
jae
sbb
out
and
xor
jb
and
and
or
cmp
je
sar
shl
adc
test
repnz
sar
inc
(bad)
stc
or
and
movs
inc
or
or
pop
cmc
ret
and
sbb
xor
add
xor
pop
cwde
in
rcl
or
inc
lahf
test
mov
xor
fdiv
aaa
xchg
pop
inc
mov
dec
xor
and
mov
out
xor
or
pop
mov
dec
aad
out
inc
daa
pop
int3
fcomp
xchg
in
loop
push
inc
call
add
lea
and
mov
cs
mov
jmp
in
out
rcl
jne
pop
sti
in
jmp
push
inc
int3
test
cmp
jmp
mov
push
enter
adc
ins
repz
out
loopne
dec
mov
jo
and
inc
shl
adc
repnz
clc
xor
ss
jmp
jecxz
push
pop
in
fimul
cwde
fdivr
mov
(bad)
pop
sbb
pop
aad
and
(bad)
hlt
add
icebp
cld
movs
daa
add
imul
pop
dec
xchg
sbb
cld
jmp
outs
push
mov
hlt
call
fild
out
in
lock
jnp
sbb
lods
call
jl
(bad)
adc
or
movs
or
cmp
mov
mov
jbe
push
and
loopne
pop
icebp
jge
mov
sti
rcl
dec
in
loopne
loopne
jl
call
shl
push
or
int
outs
adc
lods
push
cwde
test
jl
test
mov
sbb
gs
inc
jmp
jbe
leave
call
inc
stos
shl
xor
pop
sbb
(bad)
jmp
mov
inc
imul
mov
aam
mov
mov
ja
sbb
jge
les
aam
sub
mul
jmp
dec
push
push
cld
jl
ins
inc
adc
push
and
test
push
rcl
jmp
jecxz
xchg
fld
sub
out
stos
ins
mov
std
add
jmp
jmp
(bad)
fbstp
mov
or
sbb
jns
xor
stos
pop
sub
xor
js
pop
stos
pop
adc
movs
mov
sub
movs
scas
rcl
cmps
loope
add
iret
mov
or
mov
jecxz
inc
jmp
add
jecxz
sub
sub
push
xchg
inc
ds
adc
test
std
pop
fidiv
sbb
nop
out
xor
jge
sub
dec
and
cdq
je
outs
movs
dec
cli
mov
jge
pop
inc
aas
loope
push
mov
jl
test
ror
add
pusha
shl
gs
in
jecxz
adc
jo
dec
call
or
int
mov
aad
xor
or
cli
add
ins
cld
lds
cli
xor
int3
xlat
add
and
fsubr
pop
mov
push
or
in
xor
jns
in
jo
xchg
inc
retf
mov
data16
push
xlat
repnz
pushf
inc
inc
mov
das
lods
daa
push
outs
jne
loopne
add
dec
imul
and
rol
test
pushf
mov
fdivr
hlt
ins
and
(bad)
xor
and
adc
pop
addr16
mov
loopne
out
fsubr
adc
or
add
movups
mov
cli
jae
in
retf
xchg
jnp
push
in
aas
jg
gs
xchg
mov
pusha
mov
push
push
in
xchg
jae
jge
stos
gs
fimul
ret
hlt
adc
xchg
push
cmp
inc
jle
and
mov
call
push
cmp
sbb
sahf
adc
sbb
aad
out
mov
jnp
enter
pop
mov
rcr
aam
(bad)
adc
mov
fcom
iret
and
imul
fisttp
add
pop
test
adc
fldcw
in
retf
inc
add
jmp
dec
inc
(bad)
nop
push
and
jnp
inc
test
jo
mov
in
pop
aad
inc
jg
cld
inc
retf
test
xchg
fmul
movs
rcr
repz
pop
xlat
outs
and
movs
or
inc
cs
mov
sbb
stos
retf
jl
aad
fcomp
arpl
jmp
test
sti
stos
add
xor
pop
mov
mov
adc
cli
shl
cs
cld
and
sbb
shl
or
test
lods
mov
pop
jg
(bad)
aam
jecxz
add
out
shr
inc
add
inc
or
ss
xor
xor
call
sub
add
ins
fst
jne
push
jmp
and
cmp
mov
lods
xor
push
imul
out
jecxz
add
pop
aas
sbb
gs
sti
lock
ss
push
repz
cli
cwde
add
popf
in
jae
dec
out
mov
outs
je
sti
xchg
cli
xor
mov
lods
jnp
arpl
ins
lock
int
pop
loopne
aaa
xor
mov
mov
fucom
out
lock
push
xor
xor
scas
enter
loopne
sub
mov
lock
jmp
xchg
movs
add
in
or
pushf
mov
loop
call
or
mov
xchg
adc
ins
jl
mov
xor
div
adc
cmp
fucomip
rcl
ss
jno
jle
xor
pop
je
es
push
and
sbb
out
clc
aaa
addr16
or
sti
and
pop
cld
icebp
in
or
popa
inc
shr
ret
adc
mov
pop
and
nop
cmp
ins
out
push
jae
mov
aam
xchg
cld
mov
adc
test
neg
push
jmp
aam
sub
cs
ficomp
sub
mov
cmp
cmp
aad
cmp
adc
jne
std
pop
fstp
sbb
outs
dec
dec
xchg
aad
xchg
cmp
sbb
adc
jle
sub
xor
adc
jp
adc
movs
cmp
(bad)
out
pop
push
dec
mov
in
mov
rcr
push
enter
ror
xchg
ins
data16
cmps
shl
addr16
jle
or
adc
adc
jno
or
loopne
adc
jae
pop
xor
cld
add
add
addr16
ins
in
or
clc
movlps
fcmovbe
ss
mov
test
lods
or
inc
dec
push
lods
lock
lea
cwde
and
xchg
fwait
mov
pop
mov
sbb
jno
retf
sub
ficomp
int
xor
jne
mov
stc
fmul
out
sub
cld
mov
sub
or
(bad)
fild
mov
aam
cmc
out
sti
mov
or
push
or
sbb
xchg
sub
call
or
adc
pop
fsub
add
loopne
arpl
jmp
test
adc
cmp
stos
push
xor
data16
movs
and
gs
mov
loope
repnz
je
out
ins
fcom
sub
gs
lds
jge
enter
mov
adc
pop
push
enter
sti
fcom
gs
dec
xor
mov
cmp
lea
test
push
(bad)
loopne
sbb
cmc
es
pop
fs
sar
xlat
inc
mov
sti
lock
xor
jg
mov
jge
inc
in
adc
jp
sbb
stos
xor
mov
xor
push
addr16
pop
jge
adc
push
in
sti
push
push
adc
jns
loope
(bad)
loop
imul
pop
cdq
fimul
scas
into
in
push
xchg
jmp
lea
shl
push
inc
icebp
and
dec
(bad)
jnp
inc
out
js
adc
xchg
push
loopne
sub
xchg
xchg
mov
mov
loop
sub
addr16
cmp
add
cld
push
mov
push
mov
mov
bound
sub
dec
sbb
outs
inc
aaa
adc
mov
ins
div
or
mov
fimul
fisttp
cld
xchg
adc
je
hlt
(bad)
out
adc
xor
pop
pop
sbb
add
bound
and
jg
pop
inc
and
test
adc
(bad)
push
in
pop
jmp
jge
in
sub
push
add
xchg
arpl
pushf
push
test
nop
push
mov
add
pushf
hlt
jmp
cli
jno
ja
jne
push
jbe
sbb
clc
std
retf
dec
sar
lds
sbb
xor
js
push
sbb
outs
xchg
mov
cmp
out
sbb
and
sar
fsub
gs
lods
test
or
adc
pop
and
ins
shr
ins
lods
iret
xor
imul
ins
jmp
or
or
les
sbb
lods
dec
add
inc
adc
std
inc
push
loop
fistp
jne
xchg
jge
cli
mov
adc
adc
and
jne
adc
push
inc
in
mov
adc
and
sbb
rol
gs
repnz
imul
out
rol
and
pop
in
mov
jmp
pop
adc
shr
xchg
addr16
adc
cmc
scas
pop
sub
xor
or
adc
push
xor
adc
dec
cmp
rcr
idiv
ret
sub
ds
into
call
mov
jecxz
dec
mov
imul
cmp
pop
push
xchg
add
das
in
inc
and
sbb
jmp
push
aad
and
cwde
je
xchg
cmp
rcr
test
jmp
cmp
adc
addr16
mov
pop
ins
sub
jl
pusha
cmp
pop
push
int3
add
sti
(bad)
adc
add
add
push
add
paddsb
out
lock
or
enter
in
std
xlat
movlps
cmp
loope
add
fdivr
lds
adc
jo
iret
inc
cld
repnz
jmp
aam
test
push
lds
push
mov
pop
inc
push
xor
mov
jns
cmps
test
sub
out
aam
imul
fldcw
call
and
adc
fcom
add
adc
aam
cld
mov
imul
xor
fimul
fsubr
sbb
mov
or
mov
out
adc
cdq
mov
enter
jo
fs
jmp
sti
aam
imul
rcr
xor
ja
and
sbb
sahf
pop
loope
or
int3
sbb
ins
jnp
je
push
fisttp
int3
adc
jbe
mov
add
inc
in
loope
mulps
mov
aam
loop
in
shl
test
out
adc
cmc
inc
adc
repnz
cmp
frstor
push
and
inc
sub
hlt
adc
lock
loop
in
xchg
push
je
mov
push
jns
and
jne
xlat
and
mov
inc
sbb
ret
scas
mov
pushf
and
test
cmc
popf
imul
cmps
jmp
call
hlt
or
dec
pop
aaa
sbb
fnstenv
mov
nop
repz
sub
in
sub
aad
icebp
push
mov
jge
adc
pop
mov
push
aad
std
jbe
sbb
dec
jmp
xchg
and
add
add
out
mov
sub
push
push
jo
push
xor
mov
xlat
dec
dec
jno
xchg
loope
or
mov
test
and
retf
sbb
fisubr
mov
mov
pop
test
icebp
test
pop
jecxz
xor
mov
jmp
stos
outs
mov
in
xchg
pop
jb
xor
cld
fcom
xchg
(bad)
loope
ins
push
lods
cld
or
mov
sbb
in
mov
das
mov
ja
and
and
sti
(bad)
mov
sti
js
add
dec
lds
ins
ins
out
test
sbb
(bad)
in
dec
rcl
push
push
(bad)
out
mov
jae
jns
fwait
adc
mov
shl
ds
xchg
pusha
xchg
push
test
jecxz
xchg
sbb
mov
add
pop
push
add
jno
fidiv
(bad)
cld
sbb
sbb
pop
ror
es
inc
ins
cmp
ja
xor
push
jns
fs
adc
dec
push
ja
cmp
xor
add
mov
push
gs
fdiv
aam
lahf
loopne
xchg
push
daa
ror
xchg
cmp
pop
pusha
push
dec
mov
loop
add
stc
mov
xchg
ja
lods
jmp
jmp
sbb
sbb
xor
sub
je
in
mov
add
outs
and
popa
push
nop
and
sub
push
mov
add
xor
in
ffree
mov
jecxz
pop
and
xchg
(bad)
out
ins
push
jl
or
dec
cmc
imul
aam
std
aad
dec
or
pcmpeqb
mov
cld
ret
mov
rcr
imul
cwde
hlt
dec
sbb
xor
std
adc
mov
int3
cwde
out
std
movs
adc
push
fisttp
lods
sbb
add
call
inc
push
sub
ds
sbb
sti
ins
mov
or
cmp
pop
mov
pop
xor
fmul
jmp
icebp
mov
add
adc
and
mov
into
fsub
jmp
mov
loop
shr
adc
inc
fistp
inc
or
jmp
fstp
int3
adc
inc
add
aad
pop
mov
sub
inc
cmp
popf
pop
dec
sbb
(bad)
jno
nop
mul
xor
aam
and
jg
loopne
in
adc
dec
shl
jecxz
add
loopne
push
pop
or
js
mov
sbb
pushf
or
les
cmp
call
in
push
clc
ror
sub
mov
nop
out
mov
xor
adc
mov
loop
push
sbb
loope
push
test
popf
jae
popf
sbb
nop
mov
pop
outs
popf
shr
fucomip
loope
fwait
lds
data16
sbb
jp
and
rcr
push
rcr
imul
je
in
out
sbb
xor
inc
mov
push
pop
faddp
sbb
rcr
cmp
or
pop
cmp
inc
cwde
clc
fmul
shl
popa
push
inc
fs
cmps
and
xor
test
or
les
mov
xor
sub
mov
mov
sub
push
test
jne
inc
loopne
push
stos
stc
pop
bnd
jnp
inc
inc
push
adc
and
ins
or
cmp
sbb
mov
aam
gs
mov
dec
sub
std
in
jae
call
xchg
enter
sub
sbb
loope
movups
add
icebp
adc
mov
push
xchg
mov
scas
test
mov
cdq
rcl
or
adc
je
mov
in
add
add
mov
gs
loop
inc
or
mov
mov
movs
js
out
push
adc
sti
push
add
(bad)
pushf
mov
pop
cld
fsub
inc
stos
or
xchg
jmp
xchg
push
rol
adc
or
cmp
shl
pop
and
mov
sti
add
jmp
fwait
sbb
ins
sti
mov
jecxz
ja
or
jbe
inc
outs
inc
or
dec
mov
rol
lods
mov
dec
inc
jo
adc
push
dec
and
rcl
ja
mov
add
jns
xor
xor
cwde
popf
clc
test
shl
sub
xor
outs
jnp
jmp
gs
enter
xchg
pop
pusha
outs
add
fstp
(bad)
adc
mov
mov
and
gs
shr
add
aaa
imul
mov
aad
out
shl
pop
cmp
sbb
mov
adc
inc
cwde
jae
fist
mov
push
mov
daa
out
cmp
xchg
(bad)
dec
je
sti
xchg
je
out
inc
mov
or
movs
or
loope
adc
xor
lods
jae
test
and
call
add
dec
push
dec
inc
(bad)
mov
pushf
test
or
enter
and
pusha
nop
push
xchg
jmp
or
aaa
lds
jle
in
xchg
mov
pop
test
loopne
call
mov
cmps
jp
pop
pop
jae
and
retf
dec
ror
pop
out
dec
clc
adc
push
jnp
gs
cmp
out
inc
pop
dec
or
xor
sbb
mov
inc
push
lods
and
mov
stc
cwde
sub
cli
iret
or
push
inc
inc
fist
leave
rcr
mov
jne
cmp
lods
adc
jmp
adc
mov
imul
push
jae
mov
cwde
je
out
pop
cmps
inc
aam
xchg
add
xor
jbe
push
mov
test
icebp
xchg
inc
fnstenv
and
cmp
push
aas
cmp
cmp
push
sub
pop
out
loopne
adc
mov
call
aas
xchg
stos
or
stos
cmp
xchg
jno
jmp
in
mov
std
xchg
mov
add
jmp
outs
sahf
jge
mov
inc
je
mov
(bad)
out
jmp
ins
jp
adc
out
xor
imul
inc
jecxz
loope
sbb
loop
push
pop
xchg
mov
pusha
jne
or
add
call
fild
(bad)
in
pushf
push
dec
pop
shl
out
nop
mov
gs
mov
test
dec
adc
jo
and
mov
jmp
push
mov
hlt
cmp
xor
add
out
fldcw
ret
xor
sbb
out
mov
pushf
pop
jmp
das
in
sti
enter
mov
call
dec
pop
pop
ja
pushf
cld
cmps
leave
lods
mov
or
cmp
fadd
loope
(bad)
lds
in
int3
(bad)
ds
ins
mov
(bad)
sbb
pop
movs
shr
mov
mov
sub
sbb
push
retf
or
je
pop
xchg
mov
in
aas
push
jecxz
test
lds
sbb
aad
repnz
inc
and
push
jecxz
test
pushf
dec
jns
push
test
sbb
aas
loop
dec
adc
call
call
jge
pop
fimul
shl
inc
xchg
jbe
lahf
test
retf
lods
ja
loopne
nop
pop
inc
icebp
jg
mov
stos
cdq
push
into
push
xlat
xlat
aam
jmp
stos
cmc
sbb
xchg
inc
(bad)
xor
jo
out
jns
lock
ficom
je
mov
mov
add
dec
xor
pop
stos
dec
cmc
test
cli
add
mov
cmps
add
jmp
sbb
jno
jnp
add
lods
or
jne
or
cld
cmp
sti
pop
cmps
fidivr
(bad)
lea
movs
mov
test
or
mov
aas
add
sbb
fldcw
es
jne
in
cmp
mov
cmps
jmp
push
mov
out
scas
pushf
aad
fldcw
cmp
and
push
fsubp
xchg
xor
outs
sub
movs
clc
int3
cmp
rcl
xchg
and
push
xchg
pop
jecxz
fdiv
test
nop
adc
xchg
mov
jg
cmc
imul
sbb
jp
test
out
fisub
add
gs
imul
mov
sbb
jmp
stos
and
fs
jmp
push
jp
test
call
xchg
fucomip
push
(bad)
mov
jae
aam
loop
xchg
sub
je
lea
inc
movs
mov
dec
jnp
mov
jae
cmp
jmp
pop
add
push
movs
fidiv
hlt
lock
adc
push
mov
xchg
push
pusha
sub
icebp
call
add
addr16
xchg
push
outs
xor
mov
jp
pop
out
in
cld
push
stos
pop
in
and
cmps
inc
fs
in
je
dec
in
imul
fstp
push
outs
loopne
dec
cmc
je
jmp
push
jp
add
sbb
std
or
cld
adc
xor
dec
gs
iret
adc
dec
inc
int3
dec
in
rcr
fdivp
jno
mov
dec
add
aam
push
adc
jmp
popf
out
stos
pop
inc
mov
push
stc
pop
adc
test
add
cmp
jp
push
xchg
jle
xchg
inc
xchg
adc
(bad)
push
(bad)
mov
inc
and
stos
loopne
push
ror
or
(bad)
movs
lods
jae
rcl
push
lods
push
imul
lods
mov
sti
mov
movs
std
out
iret
xchg
hlt
lea
cmc
test
mov
ss
xor
sbb
and
xchg
pop
xchg
push
xchg
aam
std
aam
sub
loop
stos
lock
push
ins
pop
xor
test
je
sbb
cld
cmp
xchg
cld
mov
ins
fsub
frstor
or
add
ins
ret
xchg
sbb
sti
call
mov
out
int
inc
inc
mov
enter
sbb
test
inc
outs
vpsrad
xor
mov
in
sbb
mov
inc
fst
adc
cmc
pushf
mov
mov
add
cmp
adc
sti
cmps
add
ins
push
xor
gs
out
mov
dec
xor
adc
dec
pop
inc
cmp
mov
movs
sbb
sub
out
aad
push
jg
dec
pop
xchg
ss
ficom
mov
jmp
xor
pusha
fistp
imul
adc
jmp
js
mov
xor
addr16
sub
cmp
out
cmp
jmp
aad
ins
xchg
call
fst
je
xchg
pushf
mov
pusha
push
mov
loope
xchg
in
sti
cwde
adc
inc
push
xchg
inc
cld
and
or
push
movs
sub
pushf
in
add
mov
in
fdivr
ficomp
fcomi
in
xor
and
fwait
add
icebp
lods
outs
xchg
in
sti
xor
push
add
mov
into
out
mov
xor
dec
pop
aam
mov
push
pop
mov
jbe
and
cmp
jne
push
(bad)
mov
ins
in
sub
jno
xchg
jmp
or
jns
xchg
and
pop
out
adc
rcr
inc
movs
mov
cwde
sub
jecxz
lock
jge
movs
sbb
imul
xor
cmp
dec
add
inc
mov
addr16
pusha
add
inc
add
jae
sub
aas
fwait
push
xchg
cmp
lods
adc
(bad)
retf
adc
xchg
cmp
or
mov
call
add
stos
aam
ret
enter
jge
in
and
cli
cwde
pop
scas
add
ficomp
loopne
loopne
jmp
dec
inc
mov
jmp
pushf
mov
sub
pop
mov
push
jmp
mov
xor
lds
mov
retf
aas
das
out
add
hlt
aad
cwde
cmp
push
retf
and
std
mov
test
(bad)
div
sub
jmp
mov
xor
out
test
jmp
gs
lods
adc
sub
mov
test
clc
clc
xchg
movs
sbb
add
inc
adc
pop
push
xor
mov
adc
aad
nop
xchg
adc
and
and
add
movs
cmp
das
call
ds
push
sub
shr
lea
adc
ins
sahf
jae
test
out
add
jno
inc
push
mov
adc
cmps
or
ins
sbb
xchg
(bad)
xor
in
les
pop
jg
(bad)
sti
test
adc
rcr
mov
jmp
ror
jp
aam
arpl
imul
push
cld
retf
push
pop
imul
gs
fistp
ja
mov
cmp
not
sbb
push
jne
out
mov
sub
mov
in
int3
outs
add
icebp
sbb
(bad)
in
enter
sbb
cmc
call
adc
push
loop
inc
mov
xchg
cmp
in
mov
mov
add
mul
ss
enter
arpl
in
jmp
pop
shr
or
adc
xor
pop
ins
div
nop
jae
mov
jmp
fdiv
lods
aam
push
call
cmp
adc
jnp
mov
cwde
push
shl
in
enter
xchg
loope
sbb
call
mov
mov
clc
sbb
(bad)
ds
adc
out
cmc
add
loope
fbld
out
jnp
fst
lods
mov
mov
ins
outs
inc
push
xor
cmp
out
clc
outs
stos
add
js
add
movs
push
jnp
loopne
xlat
mov
aad
push
pop
fmul
cli
imul
xchg
mov
jmp
retf
outs
inc
inc
mov
xor
mov
rcl
jmp
cmps
jns
sub
mov
fidivr
ret
sbb
adc
pop
iret
cmp
les
xor
jg
fistp
adc
nop/reserved
inc
add
sbb
sub
out
ins
inc
inc
or
jmp
sbb
cld
aad
and
pop
and
clc
pop
sbb
jmp
dec
xchg
call
or
imul
imul
fwait
lock
and
xchg
(bad)
out
mov
sub
mov
nop
ja
adc
jnp
dec
cli
jno
movs
mov
les
aaa
adc
push
mov
loop
repz
dec
jne
adc
xor
hlt
mov
sbb
pusha
lock
jb
mov
push
add
cmp
mov
mov
sbb
xchg
sub
out
rol
and
push
lock
pusha
xlat
in
jmp
xor
std
inc
fnsave
cwde
sbb
pop
in
mov
xchg
jo
adc
jnp
and
adc
fiadd
gs
enter
in
fldl2e
int
sbb
loope
test
out
and
sub
sbb
jmp
gs
push
jnp
sub
ret
mov
mov
cmp
or
out
xchg
hlt
leave
call
jmp
js
je
cmps
sub
cmp
jle
mov
test
mov
pop
pop
xchg
cmp
fsubrp
adc
and
in
push
loope
clc
inc
mov
adc
cmp
aad
popf
cli
call
out
jo
cs
xchg
int
icebp
push
lock
je
add
push
call
or
sub
mov
vmovntdq
add
int
sbb
jno
rcl
rcl
jo
pop
push
fsub
xlat
cld
and
or
dec
add
and
daa
pop
test
out
adc
xchg
(bad)
addr16
inc
gs
jmp
fist
add
add
sub
sub
mov
mov
aad
loop
mov
cmp
shr
sbb
hlt
push
call
scas
dec
dec
in
jmp
stc
or
aas
cwde
js
loop
push
xchg
test
cmp
adc
ins
fsub
sub
and
xor
mov
pop
push
push
mov
push
lods
mov
push
jmp
push
cmc
sbb
lock
idiv
test
cmp
cli
sub
gs
xchg
dec
add
or
push
or
mov
adc
popf
stc
xchg
fdiv
and
and
push
aad
call
push
xor
fisub
adc
clc
push
push
cld
jp
xor
aam
inc
out
movs
popa
test
mov
test
cmp
xchg
sbb
out
in
movs
lock
lods
adc
adc
pop
xchg
mov
div
fcom
and
xchg
call
dec
js
pop
or
scas
mov
std
pop
mov
out
in
dec
je
loop
test
pop
movs
xor
mov
cmc
sub
sub
jecxz
xor
sub
jns
je
add
ret
push
in
inc
push
out
adc
adc
data16
pop
jle
sbb
jne
sti
lahf
pushf
pop
push
aas
fidivr
inc
(bad)
in
adc
sbb
cmp
repz
inc
xchg
jl
cmps
add
je
aaa
out
jae
in
dec
cwde
jmp
mov
call
jle
ja
dec
and
in
icebp
ret
add
call
xor
pop
cmp
mov
add
dec
movs
aaa
and
cmp
cmps
xchg
and
sbb
sbb
pop
fdivr
pop
jp
repz
sub
or
cld
je
mov
add
sti
call
pop
or
and
mov
ret
rol
loope
mov
jnp
call
sbb
adc
cwde
mov
arpl
cmp
jecxz
mov
xor
adc
and
lods
push
fcom
adc
mov
dec
mov
loope
mov
out
lds
sbb
cli
outs
movs
out
test
push
jge
dec
push
leave
cmps
xor
add
adc
ror
fs
call
pushf
cmp
lods
in
and
xor
cmp
stos
adc
mov
sub
cmp
cmps
xor
jge
cwde
call
mov
cld
cmp
enter
imul
push
mov
aam
ins
jp
push
or
mov
cmp
xchg
pop
push
dec
or
xor
adc
aas
and
sahf
sbb
adc
sbb
pusha
in
shl
loop
xor
test
push
sub
mov
and
sti
hlt
inc
or
lea
sbb
pop
loopne
sbb
stos
pop
xchg
fs
xor
sbb
shl
adc
data16
sbb
push
mov
xor
mov
(bad)
movs
or
hlt
pop
loop
mov
out
in
call
dec
out
xchg
xchg
add
mov
jne
in
add
add
adc
sub
xor
leave
add
sub
test
(bad)
fnstsw
movs
jl
hlt
rcr
in
mov
mov
push
ins
inc
sub
xchg
xchg
ins
jecxz
add
dec
add
bnd
les
mov
lds
cmp
aas
add
or
call
rol
xor
mov
cmc
or
in
cld
in
and
popa
xchg
and
rcl
sbb
movs
dec
out
sbb
push
pop
aaa
mov
ror
sar
fucomip
shl
(bad)
loopne
push
push
sbb
into
lods
mov
rcr
inc
aad
sub
push
adc
cmp
cdq
stos
xor
test
call
pusha
or
or
mov
(bad)
fbstp
cld
dec
sub
sub
or
cdq
jmp
out
aam
jne
cmps
add
sbb
pop
(bad)
es
xor
aad
push
loopne
fidiv
cmp
test
xor
clc
lods
sbb
dec
mov
xchg
jg
test
push
loopne
sbb
test
call
jnp
les
adc
adc
push
gs
dec
add
sbb
sti
les
sbb
std
pop
clc
cwde
push
pop
and
jns
pop
stos
sub
fiadd
out
mov
inc
sbb
jl
inc
sub
ss
(bad)
hlt
jp
ja
push
in
lock
mov
xchg
inc
sbb
dec
or
jbe
clc
xchg
and
add
call
shl
popa
mov
aam
mov
mov
fild
pushf
mov
add
out
jp
xor
sbb
add
sbb
mov
pusha
sbb
push
outs
push
sub
push
scas
rcr
sbb
pop
adc
mov
xchg
and
jle
ja
add
adc
fist
div
stos
mov
int3
cld
xor
outs
je
jmp
(bad)
sbb
dec
mov
(bad)
test
popf
push
push
push
xor
xchg
adc
jge
jne
push
out
ins
or
test
arpl
add
rcl
push
cwde
dec
dec
adc
adc
xchg
imul
add
je
mov
loop
int3
cmp
xchg
sub
and
push
sbb
lods
fmul
out
xor
cmc
cmp
pop
adc
mov
xlat
jne
and
loope
adc
xchg
test
dec
adc
xchg
pop
push
into
mov
in
adc
add
push
pusha
gs
pop
lods
mov
push
xchg
cmps
xchg
sbb
xor
cld
xchg
add
dec
bndldx
(bad)
push
cmps
push
pushf
xchg
jmp
adc
je
cmp
sbb
and
cld
movs
sub
adc
sub
inc
push
and
pop
clc
mov
jp
test
jo
or
hlt
hlt
stc
in
mov
and
jmp
adc
inc
fcom
fisttp
cmp
jl
mov
pushf
xchg
arpl
or
add
push
push
rol
jns
xlat
dec
adc
gs
out
jnp
sbb
out
xchg
aam
(bad)
(bad)
ins
xor
ss
cli
cld
or
enter
and
aad
into
mov
lds
jno
cmps
or
fxtract
(bad)
jmp
mov
or
jle
sub
dec
cmc
call
jnp
ins
push
mov
(bad)
rcl
in
mov
or
aam
div
dec
xchg
jl
push
push
mov
mov
fs
sbb
sub
sti
loopne
push
movs
mov
and
or
push
lds
test
add
mov
push
push
(bad)
out
jmp
jl
outs
push
test
adc
into
in
pusha
sbb
sti
mov
in
hlt
lods
loopne
xchg
dec
cmps
push
je
stc
out
jae
adc
fmul
es
fmul
xor
std
popf
xchg
jecxz
retf
cmp
push
sti
inc
jecxz
lods
sbb
add
stc
test
xlat
xchg
mov
lods
shl
add
js
cmp
fistp
sti
adc
in
outs
sbb
mov
pop
jns
lea
push
test
fwait
sub
aam
fist
xor
in
dec
pop
jae
cmps
cld
lods
hlt
inc
push
js
call
iret
push
or
sbb
jecxz
clc
mov
sbb
loop
sub
loopne
cmc
ds
int3
out
jo
adc
in
jp
sub
outs
test
jg
dec
jmp
jns
gs
push
xchg
sbb
xchg
sub
push
inc
test
ss
loope
inc
dec
xor
jmp
fwait
call
test
mov
test
icebp
mov
sub
pop
shr
lock
adc
push
clc
jns
ss
jnp
test
xchg
adc
test
sub
in
popf
je
fldcw
pop
mov
call
fdivr
movs
(bad)
(bad)
xchg
mov
lds
inc
jo
rcl
adc
movs
xor
rcl
aas
test
sub
ja
sar
sti
out
push
dec
and
repz
lahf
jl
pusha
out
push
jp
sbb
cld
xchg
dec
(bad)
cmc
lods
pop
pushf
rcl
pushf
mov
pop
movs
nop
loop
sub
test
sub
xor
cwde
adc
test
mov
fdiv
adc
pop
jp
push
and
sub
mov
pushf
push
xchg
or
gs
mov
out
call
dec
ds
fcom
fistp
call
dec
sbb
mov
in
cmp
mov
jns
jne
jae
call
cld
retf
jmp
cmp
push
div
cmps
data16
cmp
xchg
xchg
or
call
popa
sbb
cmp
mov
sub
adc
scas
inc
jne
std
popf
xor
inc
test
lock
xlat
ins
dec
ficom
aam
pop
add
(bad)
sbb
rol
ret
in
ds
sar
jmp
cmps
add
enter
cld
xor
push
(bad)
adc
jno
lods
(bad)
hlt
pop
inc
je
or
cmps
retf
xor
cmc
ss
out
jl
push
push
fucomip
jno
push
js
jmp
adc
pop
xor
ins
and
adc
pop
sub
add
push
xor
jmp
add
mov
pusha
pop
ret
rcl
retf
mov
loopne
lods
cdq
daa
mov
in
and
(bad)
xchg
pushf
adc
jnp
or
in
push
or
mov
mov
or
add
rcl
add
xchg
out
mov
int
add
sbb
xchg
repz
add
es
je
test
jecxz
ins
jnp
sbb
jl
add
adc
scas
jecxz
adc
scas
xor
adc
mov
or
pop
fbld
sbb
sub
xchg
call
in
and
xchg
aas
dec
lds
xor
push
push
pop
xlat
and
mov
in
adc
in
loope
lods
js
ror
adc
repnz
jno
and
xchg
sbb
int3
sbb
jp
push
dec
in
jne
lock
vcvtsi2ss
dec
add
xor
inc
add
dec
mov
pushf
mov
adc
xchg
mov
aaa
out
fdivr
add
mov
cmp
loop
adc
in
mov
das
xchg
sar
xor
cdq
loop
arpl
loopne
push
pusha
cmp
push
sub
xchg
cmp
xchg
xor
cmp
sub
or
xlat
mov
test
push
mov
adc
dec
jb
jno
dec
into
mov
xchg
adc
jne
adc
sub
hlt
cmp
rcr
push
push
fwait
test
outs
add
repz
jb
test
lock
jmp
and
les
inc
in
adc
jbe
popf
je
mov
xchg
in
fidivr
je
bound
sti
fisttp
enter
pop
sub
adc
cdq
je
mov
mov
rcr
adc
jmp
sbb
jge
das
jecxz
xor
int
xor
call
cld
pop
push
cmp
add
mov
mov
pop
fldpi
jae
adc
retf
xchg
xor
les
pop
dec
cld
mov
jl
in
mov
or
cmp
inc
neg
stos
fcom
lds
loop
push
nop
mov
adc
cdq
scas
into
jae
xchg
sahf
jl
mov
or
pop
lods
sbb
xor
adc
mov
and
xchg
and
scas
sbb
push
hlt
div
xor
cmp
adc
jno
(bad)
adc
cmp
sbb
out
into
sub
sub
es
sbb
inc
jns
test
adc
xchg
in
std
outs
enter
movs
sti
iret
add
push
clc
or
mov
add
or
sbb
lds
test
call
and
mov
cdq
or
cmp
push
mov
pop
push
scas
mov
mov
dec
popf
fstp
mov
stos
cmp
push
mov
js
adc
cmps
sbb
and
push
push
and
and
int3
sti
xchg
sar
stos
lods
test
imul
and
dec
mov
jae
movs
inc
out
jecxz
or
add
pop
aad
aad
dec
and
cmc
add
in
inc
jecxz
arpl
test
es
mov
cmp
xor
outs
adc
imul
outs
in
and
mov
lea
je
std
adc
icebp
jle
jae
dec
jg
mov
stc
sbb
outs
jmp
dec
pop
movs
pop
loop
mov
push
mov
adc
push
in
ror
dec
xchg
int3
ror
scas
cld
rcl
xchg
je
inc
test
add
aad
loop
les
dec
out
jae
sbb
or
push
sub
and
in
shl
pcmpeqw
loope
and
icebp
sbb
jbe
sub
std
call
dec
push
pop
arpl
out
xor
mov
(bad)
jle
or
loop
push
push
call
and
mov
sub
inc
pop
shl
and
xor
cld
es
sbb
in
unpcklps
fistp
outs
or
aam
mov
not
fcmovnu
mov
push
pusha
xlat
add
in
push
loop
pop
fist
jge
lods
cmp
ins
jbe
sbb
mov
push
sbb
jl
arpl
mov
or
int3
rcl
sbb
daa
out
xor
add
xchg
pusha
dec
inc
lods
mov
sbb
ror
cmc
(bad)
or
test
mov
xchg
mov
xor
test
je
or
sbb
les
fsub
inc
out
scas
mov
jae
cwde
inc
in
je
mov
loop
and
xchg
stos
mov
dec
jbe
xor
sub
movs
add
sub
jne
push
test
arpl
adc
test
dec
jns
ret
lods
inc
mov
cmc
std
loope
mov
scas
arpl
and
shl
mov
mov
mov
push
lock
cmp
test
inc
push
inc
loopne
call
dec
jmpw
ins
cmp
ins
pop
pushf
or
mov
pop
sbb
sbb
push
std
loope
mov
xadd
test
in
add
add
call
jmp
enter
cwde
scas
jmp
sahf
clc
gs
sbb
pop
or
cld
inc
cwde
xchg
repnz
je
and
rcr
cmp
push
mov
sbb
jnp
outs
push
dec
into
lds
loopne
jnp
or
add
test
xor
mov
mov
fcom
in
das
ror
adc
sub
sbb
sbb
in
mov
sti
mov
aam
out
jmp
inc
loop
xchg
sbb
xor
sub
push
cmc
cmp
mov
pusha
pop
lds
ins
mov
movs
or
loopne
xchg
fs
jmp
or
push
fidiv
add
loopne
sbb
push
adc
mov
jl
aad
sar
or
les
adc
add
xor
stos
xchg
pop
pop
gs
mov
retf
cmp
das
aas
dec
cwde
adc
outs
and
mov
js
adc
and
adc
add
data16
rol
repz
popa
shl
rol
std
jbe
ja
dec
sti
(bad)
push
xlat
cmp
aas
mov
sbb
std
shl
aas
pusha
in
test
or
aaa
pop
rcl
cmp
jge
addr16
std
unpcklps
imul
cmps
rcl
sub
mov
nop
ja
inc
popf
outs
call
in
xchg
je
or
call
mov
out
pushf
addr16
jae
jmp
(bad)
cmp
adc
cmp
lods
addr16
shr
push
sbb
les
cmp
cli
jmp
push
ja
fdivr
aam
add
xor
fnsave
in
repnz
jecxz
retf
mov
xor
test
pushf
fsub
sti
push
mov
jae
inc
mov
sub
xlat
sub
call
inc
sbb
and
(bad)
shr
jecxz
pop
cmps
retf
adc
out
sub
mov
loopne
xchg
inc
jmp
inc
paddb
es
sar
sbb
pusha
icebp
push
xor
mov
shr
adc
jl
cmps
pop
(bad)
pusha
xchg
jmp
ror
ja
in
clc
in
adc
retf
movs
fidivr
ins
sub
mov
loope
or
push
rcr
push
call
or
and
leave
pop
jne
sahf
out
adc
cvtdq2ps
jno
cmp
std
(bad)
pop
dec
mov
lods
inc
mov
cwde
add
movs
cwde
lods
cmp
jle
adc
(bad)
test
pop
loope
fmul
pop
idiv
add
int
push
aad
jmp
push
or
sbb
adc
ds
push
or
loope
mov
xor
addr16
xchg
pop
mov
popa
in
pop
lock
popa
cwde
pop
int3
inc
jmp
cmc
jmp
sbb
jae
xchg
loop
pop
xor
lods
loopne
xchg
mov
jp
enter
and
adc
xchg
rol
add
aad
xchg
and
jns
(bad)
push
out
fs
xor
mov
sti
jmp
mov
retf
cmp
cli
loope
mov
mov
jbe
sti
mov
add
inc
cmp
lods
jne
adc
pop
push
sahf
pop
jae
and
mov
int3
in
and
nop
jecxz
(bad)
outs
(bad)
fisub
or
jecxz
mov
jl
inc
inc
jae
loope
inc
popa
sub
inc
in
xor
les
in
pop
or
in
aad
jno
dec
pop
adc
popa
dec
aaa
jg
int3
inc
add
adc
adc
add
cmps
add
jnp
sub
dec
or
je
ss
pusha
adc
out
cmp
iret
cmp
xchg
out
fisttp
push
cmps
adc
enter
in
sbb
pop
or
je
xor
or
arpl
(bad)
out
sti
push
int
leave
popf
and
ins
and
mov
aam
fild
or
out
xchg
gs
mov
adc
sbb
jae
aas
jmp
fimul
jnp
test
or
adc
jns
shl
add
xor
mov
mov
fwait
xor
cld
cdq
dec
movs
mov
retf
retf
fisttp
dec
ja
adc
in
arpl
push
mov
ret
lock
xor
jns
or
loop
inc
sub
test
adc
sbb
push
mov
xor
test
test
test
xor
or
les
sbb
jmp
mov
mov
enter
rcr
adc
push
pusha
adc
pusha
sbb
mov
jo
pushf
adc
jl
mov
fisubr
pop
outs
inc
xor
fist
sbb
(bad)
nop
fnsave
retf
loopne
sub
pushf
das
hlt
jge
(bad)
out
pusha
jge
outs
xchg
add
sahf
and
movs
dec
mov
pop
dec
sbb
and
mov
mov
xchg
sub
mov
cwde
sbb
shr
jmp
inc
cld
iret
ins
sub
jne
jmp
in
jge
pusha
outs
xchg
int
cmp
jns
add
inc
adc
xor
jno
mov
dec
xor
pop
movs
and
sysenter
sub
jno
xor
push
adc
sar
pop
jmp
jns
cmc
adc
dec
sub
es
adc
bound
add
xchg
mov
imul
std
ret
pop
jp
imul
or
pop
cmp
movs
and
adc
sti
icebp
xchg
test
or
je
(bad)
add
fmul
ins
sbb
push
shl
pop
push
jae
int3
in
aam
movs
mov
pop
jmp
jae
call
imul
jl
aam
lahf
xchg
mov
fdiv
pop
inc
jmp
xchg
dec
es
(bad)
mov
inc
xchg
adc
popf
out
add
jbe
jmp
sub
fld
jmp
cmc
and
mov
jmp
pushf
cmp
loope
xor
mov
push
sub
inc
adc
neg
cmp
retf
xor
sti
add
xchg
test
and
mov
add
mov
jge
dec
out
ret
aam
loope
jae
cmp
or
add
stc
push
pop
mov
inc
daa
call
jnp
xchg
jne
mov
scas
ss
in
pop
push
cmp
pop
add
je
cmc
js
add
add
jns
js
cld
js
adc
mov
pushf
jmp
fsubr
add
test
les
jge
cmp
cwde
or
lock
pop
xlat
enter
div
test
jo
jae
out
in
or
cld
test
xchg
adc
pop
jno
xor
jo
adc
mov
sub
cmps
xchg
xchg
bt
pop
and
fcom
repz
and
xor
adc
sub
ror
stc
(bad)
ror
push
jne
in
jae
fdivr
in
stos
and
pop
dec
daa
push
sbb
in
sub
dec
aad
mov
lock
cmp
sbb
iret
adc
push
stos
aas
cld
xchg
out
adc
test
and
pusha
in
xchg
inc
(bad)
call
xor
popf
inc
sub
jno
fsub
je
sbb
mov
fbstp
push
adc
mov
fisttp
inc
ins
call
aam
aad
cmp
xor
jns
mov
cs
sbb
div
shl
mov
lock
sbb
outs
mov
stos
adc
rol
lods
test
std
mov
dec
add
sti
sbb
cld
lea
jmp
sub
sub
das
pusha
loopne
nop
repz
scas
cmp
ficom
and
addr16
movs
ja
in
jg
adc
xchg
int3
(bad)
call
inc
mov
xor
je
pop
cmps
test
movs
mov
mov
loopne
pop
fdiv
in
fistp
mov
xor
jb
mov
push
test
lods
sub
in
dec
jle
aam
aad
(bad)
xchg
pop
pushf
jl
jno
cmc
in
push
iret
test
xchg
and
xor
in
pop
and
mov
hlt
adc
es
cwde
or
(bad)
and
shl
loope
sub
lock
ror
ja
int
je
test
test
inc
or
dec
add
sbb
(bad)
mov
and
dec
push
jp
jno
pop
inc
jl
and
pop
test
gs
fwait
popf
ret
xor
fist
add
pushf
pop
loopne
push
ins
mov
in
mov
jmp
push
or
sbb
pop
scas
(bad)
mov
xor
pop
unpcklps
mov
cmp
push
xor
mov
and
add
lock
mov
cmps
jecxz
inc
add
xchg
test
sub
add
jnp
jae
das
imul
jl
inc
cmp
inc
cmp
out
lods
pop
sbb
xor
pushf
mov
mov
sbb
lock
mov
outs
ins
sbb
addr16
iret
out
fwait
sbb
aad
gs
adc
enter
xchg
sub
aas
and
jnp
adc
std
imul
in
mov
push
add
cmc
cld
pop
push
fnstenv
into
jl
xor
aam
fadd
ss
jl
shl
sub
sbb
ins
or
push
loopne
xor
in
ins
or
pop
adc
rcr
pushf
mov
pop
inc
dec
jnp
aam
push
cld
cmps
ins
mov
adc
add
xchg
iret
pop
pusha
pop
dec
add
adc
push
fsqrt
add
jmp
sbb
icebp
nop
loopne
xchg
sbb
sbb
aad
aad
mov
int
dec
ffreep
add
sub
adc
test
ret
pushf
sbb
dec
and
out
sub
mov
stos
sub
mov
ror
ficom
fidivr
movs
lods
sbb
imul
sub
sbb
dec
xchg
out
mov
mov
mov
inc
or
stos
mov
daa
ret
outs
inc
(bad)
out
mov
xor
in
inc
loopne
call
adc
vmread
sbb
push
inc
ins
cs
and
int3
cmp
jb
sbb
loop
cmp
jle
jno
je
cld
adc
adc
int
dec
and
adc
add
jl
cmp
mov
call
push
lods
mov
mov
loopne
add
imul
mov
test
adc
pop
inc
jl
and
push
and
xor
pop
adc
xchg
push
arpl
inc
outs
push
bound
sbb
inc
mov
lea
mov
jbe
sub
xor
pop
mov
or
or
push
arpl
push
add
jo
sbb
in
std
pop
dec
pop
pop
test
or
add
mov
sub
adc
sahf
retf
inc
call
inc
add
stos
add
sub
xor
or
pushf
sbb
jmp
in
push
in
gs
les
jae
inc
cmp
adc
adc
push
bnd
add
jmp
test
sub
adc
xor
mov
sub
in
ja
aam
xor
push
mov
sbb
mov
xlat
cli
push
push
pushf
retf
lods
ficom
gs
popa
ins
inc
xchg
push
cmp
sub
xchg
pop
push
div
into
dec
cmp
pushf
add
add
lea
inc
pop
mov
add
aaa
adc
jecxz
jno
sahf
adc
xor
or
sti
fst
push
aaa
inc
ffreep
or
or
push
loopne
aad
xor
mov
xor
stos
mov
cmp
lods
adc
mov
(bad)
loope
fistp
add
sbb
inc
cmp
jecxz
xchg
jg
dec
std
jnp
xor
call
fidiv
add
std
repz
sti
mov
push
inc
push
sti
push
sbb
cmp
push
fadd
adc
sub
aad
js
sbb
dec
cmc
mov
or
test
adc
sub
jb
pop
fld
or
in
sbb
mov
scas
add
fild
outs
or
femms
lock
aaa
pop
adc
js
rcr
arpl
mov
cmc
cwde
loope
xchg
sub
aas
icebp
push
call
dec
cwde
pushf
shl
test
jbe
push
mov
out
push
xchg
and
and
sbb
push
adc
repz
inc
je
loop
xchg
aam
repnz
sbb
xor
cld
mov
add
sbb
jp
push
std
jnp
and
cmc
jnp
sbb
cli
call
movs
xor
mov
sbb
or
outs
mov
int3
mov
xor
int
xchg
jne
jecxz
cmp
mov
add
sub
ja
push
push
pcmpeqw
mov
fdivr
lods
out
inc
sbb
arpl
pop
call
xchg
je
push
push
jmp
adc
pop
test
cmp
jmp
mov
mov
adc
out
out
jmp
xchg
lods
pushf
int3
push
pop
test
jne
lock
sar
retf
mov
clc
pop
jns
sbb
test
movs
adc
push
and
loopne
ins
stos
cmc
in
jns
dec
movs
jbe
aam
jl
in
jecxz
sub
addr16
add
push
jae
pop
loop
aam
sti
mov
or
lds
jae
cmp
jmp
(bad)
idiv
ins
fild
jmp
and
xchg
mov
adc
lods
push
jge
movs
sub
hlt
sbb
loop
je
fbstp
add
xchg
in
cmp
in
mov
xchg
popf
in
jnp
gs
(bad)
mov
scas
push
rcr
gs
dec
dec
call
push
ins
call
rol
in
mov
jno
jl
jl
sbb
pop
ret
arpl
into
adc
and
mov
dec
icebp
xor
cld
out
sbb
xchg
or
popf
add
loope
fdiv
leave
daa
add
ja
cmp
cmp
xor
push
push
test
dec
mov
repz
jle
sbb
stos
int3
inc
xchg
pusha
add
fld1
cmps
test
and
sahf
inc
push
and
imul
xor
pop
dec
imul
push
dec
mov
arpl
and
out
inc
test
add
add
mov
in
push
push
in
cmc
xchg
gs
add
test
mov
xchg
in
jno
cmp
cmps
rcr
mov
cmp
inc
sbb
add
adc
adc
ss
fbld
pusha
mov
and
cdq
lods
add
mov
shl
pop
cmp
js
out
test
inc
fstp
fs
or
mov
xchg
mov
jo
pop
push
push
jmp
jns
in
jne
shl
gs
push
cmp
jg
pusha
adc
int3
pop
in
ins
add
in
dec
jne
movs
cmp
and
pop
cld
test
add
stos
push
fild
adc
icebp
out
les
sub
aam
outs
mov
inc
das
push
push
or
lock
sub
in
popa
movs
test
fild
and
jnp
les
xor
lock
inc
and
jns
push
adc
cwde
cmp
mov
jo
test
cmp
add
aam
scas
adc
xor
fbld
and
out
les
test
(bad)
dec
je
mov
imul
jge
dec
call
jae
retf
sbb
sbb
jno
popf
lock
xchg
xor
lds
aad
cld
jp
mov
lods
lods
lock
ja
cmp
xchg
mov
std
test
aas
ds
outs
and
mov
sti
push
gs
push
mov
add
adc
(bad)
adc
in
les
mov
int3
das
scas
jmp
lods
and
call
or
call
xlat
dec
and
ret
adc
cmp
mov
xor
je
sub
xchg
adc
in
das
push
pop
xchg
sbb
out
sbb
jmp
clc
push
adc
mov
cmp
add
call
xchg
ret
aad
sbb
pushf
and
scas
scas
cwde
cmp
ror
add
aad
or
loop
sbb
mov
lods
fidivr
inc
cmp
pop
jae
aad
in
inc
jns
jbe
add
pop
pop
in
jmp
inc
xchg
gs
sub
inc
hlt
sbb
out
aam
outs
jecxz
push
outs
out
and
cmp
inc
in
xchg
je
rol
jg
sbb
push
jo
(bad)
xor
xor
arpl
cmps
sti
jnp
enter
push
xor
xor
shr
mov
retf
sbb
stos
out
xor
xlat
dec
clc
sub
add
idiv
cmp
les
xor
adc
clc
lods
adc
or
nop
out
cli
inc
aas
or
pop
mov
mov
mov
or
xchg
imul
aad
mov
out
outs
cld
add
je
aam
pop
sti
aas
cmp
jno
jmp
xchg
xor
(bad)
and
ror
out
mov
push
hlt
push
movs
mov
dec
(bad)
clc
sbb
or
sti
mov
and
(bad)
ins
jnp
test
fild
dec
call
sub
mov
mov
jb
adc
bound
add
daa
fadd
popa
push
push
sahf
adc
ja
push
and
and
jg
pop
xor
mov
dec
aad
sti
outs
movs
shl
enter
in
sahf
jno
dec
mov
cmps
lods
call
xor
(bad)
sti
icebp
ins
adc
sbb
call
xchg
adc
mov
xlat
add
call
movs
mov
sub
shl
add
sar
ja
sub
pop
shr
sbb
cld
inc
mov
sub
imul
inc
jle
xor
sahf
push
xchg
adc
mov
and
in
pop
test
hlt
mov
jno
icebp
mov
mov
icebp
pushf
inc
dec
es
or
test
test
hlt
outs
in
loope
hlt
inc
sbb
jne
and
loope
fld
add
dec
jmp
jmp
push
repnz
movs
mov
xor
fcmovb
lea
fcom
xchg
fsub
cld
jne
lods
sbb
call
aad
inc
in
das
push
mov
xchg
mov
cmc
xchg
out
jo
std
lods
mov
loopne
xchg
jmp
push
enter
pop
shl
sub
push
(bad)
inc
and
call
adc
xchg
adc
stos
addr16
xor
bound
xchg
ss
push
xchg
dec
test
mov
pushf
cmp
loop
add
sbb
dec
inc
lock
xchg
add
(bad)
and
ficom
inc
push
adc
cmp
ja
aaa
fdiv
jno
or
inc
inc
inc
mov
aaa
out
pop
sahf
pop
in
pop
or
and
pop
mov
cdq
xor
je
cmc
scas
pushf
push
movs
sub
or
(bad)
loop
xor
retf
imul
not
sbb
xchg
out
dec
sub
sub
cmp
or
fcomp
jnp
mov
and
lods
add
dec
in
into
test
xchg
push
or
xor
sbb
hlt
xor
hlt
jmp
sahf
nop
test
lods
cmp
cmps
push
pushf
mov
xor
and
fdiv
call
fbld
sub
adc
mov
sbb
ins
enter
fnsave
gs
pushf
add
repz
loopne
add
push
xchg
adc
gs
fsub
jl
add
and
inc
aam
jne
cld
push
lock
pop
push
mov
out
add
js
xor
pandn
mov
mov
mov
aam
sbb
xchg
scas
pushf
movs
jb
xchg
hlt
in
jl
push
cmc
mov
sub
retf
cwde
jmp
pusha
cmp
pop
inc
inc
sti
and
mov
jnp
jmp
adc
xor
arpl
das
sbb
mov
cmc
and
mov
cli
xor
scas
add
inc
ud0
or
ins
mov
mov
push
mov
sub
inc
pop
jl
pop
dec
sbb
in
jmp
jl
push
dec
cmp
sbb
rcl
jg
push
hlt
inc
out
lods
ins
cmps
adc
arpl
cld
test
mov
adc
ins
dec
xchg
add
pop
jae
dec
in
add
cld
int3
adc
retf
jno
sub
jns
and
out
ins
jb
push
dec
int3
and
adc
and
mov
cmp
(bad)
mov
repz
push
outs
xor
mov
jns
js
adc
mov
(bad)
push
add
retf
out
adc
mov
outs
movs
sub
jge
test
xor
mov
cli
pop
add
fistp
xchg
aam
inc
nop
sub
pushf
aaa
xchg
clc
pushf
adc
stos
jnp
inc
xor
aam
cmc
jb
gs
mov
fst
out
mov
jmp
call
dec
cli
cmp
add
mov
and
mov
xor
sub
jae
inc
icebp
nop
(bad)
scas
adc
sub
sub
mov
sbb
sub
movs
and
mov
lds
pop
and
xor
lods
cs
jmp
scas
and
ret
sub
aad
pusha
mov
(bad)
or
loopne
movlps
cmp
push
sti
xchg
ins
rcl
cld
(bad)
pop
cwde
sub
mov
jmp
pop
iret
pop
jns
inc
out
shl
dec
lds
xabort
mov
aam
jmp
xchg
fistp
cld
sbb
std
out
push
out
dec
leave
ret
jno
rol
or
cmp
test
mov
rcl
adc
or
bound
test
pop
mov
or
mov
add
xchg
out
dec
push
push
out
pusha
cwde
mov
cld
xchg
inc
in
outs
sbb
repnz
aas
mov
sbb
loop
ins
adc
jg
inc
(bad)
loope
add
mov
and
arpl
addr16
sbb
inc
push
sub
in
jmp
dec
stos
gs
add
in
loop
push
std
clc
lea
call
loopne
loope
add
inc
inc
out
mov
mov
loop
sbb
fwait
push
adc
sub
(bad)
sbb
outs
adc
in
and
fiadd
mov
je
lock
and
ja
(bad)
in
cmp
ins
add
test
cmp
sbb
(bad)
outs
add
mov
xchg
je
xor
jno
jne
loop
cwde
xor
jmp
scas
or
adc
es
inc
inc
sbb
test
jae
pop
sub
inc
das
sbb
adc
test
icebp
dec
add
pop
pop
mov
sti
cmp
shr
pop
ja
sbb
inc
fisttp
xchg
test
jmp
and
in
in
push
(bad)
call
std
mov
xchg
xor
xchg
test
arpl
mov
lds
es
adc
jb
shl
aas
xor
cmp
out
fdivr
pushf
cld
sub
int
dec
clc
popa
cmc
dec
out
in
iret
pop
push
cld
loopne
xor
stos
xchg
test
pop
jmp
jae
sbb
sti
sub
jb
mov
and
popa
sbb
push
outs
mov
loop
shl
gs
mov
xchg
mov
mov
inc
cld
jge
retf
mov
cmc
sub
adc
cmp
push
or
dec
shl
jmp
sbb
xor
adc
fild
fcom
cmp
jbe
(bad)
jmp
aam
ja
sub
pop
rcr
jns
test
ficom
gs
adc
out
dec
pop
jmp
push
mov
xchg
fld
sbb
int
dec
lods
pop
xchg
xor
mov
cmp
out
adc
push
int3
sbb
inc
jg
and
mov
add
and
ja
xor
loopne
xchg
mov
push
test
inc
loope
mov
loopne
sbb
xor
stc
push
adc
fdivrp
jae
iret
loop
aam
jbe
test
test
sti
mov
aam
sbb
xchg
stos
in
adc
sar
pusha
pop
in
sub
stc
xchg
movs
mov
cmps
mov
aad
dec
push
xchg
ins
cwde
loopne
call
inc
ss
out
enter
out
jae
mov
adc
les
jmp
inc
add
mov
dec
out
jmp
xchg
xchg
pop
push
movs
data16
cld
enter
call
jmp
add
leave
adc
add
mov
push
mov
call
cmp
fs
popa
jmp
movs
call
jmp
jmp
add
push
loop
xchg
inc
ins
into
nop
jae
add
iret
adc
hlt
fild
call
adc
and
push
outs
sbb
mov
push
call
loope
ins
adc
adc
or
gs
jae
push
jb
jo
jne
mov
adc
out
or
cmps
adc
aaa
mov
or
aad
ror
jne
jecxz
mov
sbb
cmp
jb
test
ins
add
mov
movs
es
repz
mov
gs
popa
(bad)
pop
(bad)
lock
loopne
sbb
std
shl
jge
push
pushf
sbb
and
adc
or
ror
jne
fild
js
inc
movs
xchg
cmp
std
inc
loopne
and
hlt
and
loope
sar
out
aam
push
jnp
add
inc
mov
push
movs
in
jb
cmps
adc
in
xchg
inc
jno
(bad)
xor
jbe
fwait
lods
outs
cwde
dec
mov
fs
rol
fsub
je
sbb
or
jne
call
(bad)
jmp
add
adc
jge
ja
cmp
pop
and
jne
mov
imul
and
jge
or
jnp
adc
sub
iret
mov
leave
cmc
xchg
aam
repnz
push
xor
loopne
pop
lock
jmp
ror
xchg
sbb
movs
outs
fistp
jge
js
or
mov
xor
dec
mov
sbb
pop
in
in
xor
add
inc
lock
jmp
or
sbb
popa
mov
mov
push
mov
jmp
mov
call
hlt
or
hlt
inc
clc
pop
mov
pop
sar
inc
jmp
pushw
mov
test
mov
jmp
adc
in
cmp
clc
es
mov
dec
sbb
das
mov
mov
in
cs
addr16
dec
loopne
push
push
pushf
inc
in
lock
xchg
jae
(bad)
cli
loop
test
in
enter
ret
sar
jne
shr
xor
mov
lds
sti
jne
push
add
shl
cmp
sar
push
jmp
dec
std
data16
inc
movs
js
arpl
cmps
push
sti
sbb
or
cmp
in
and
in
call
imul
cwde
adc
and
lods
fld1
push
ror
mov
push
aam
js
push
arpl
add
xor
jns
int
mov
dec
inc
mov
pop
cli
in
jp
push
arpl
adc
imul
test
sti
mov
cld
in
fistp
xchg
cmp
dec
sti
movs
pop
mov
jmp
nop
push
cmp
pop
clc
gs
jne
adc
xor
mov
xor
pop
inc
out
xchg
imul
fild
lods
dec
push
in
in
jnp
push
punpckhdq
sti
adc
aad
adc
pusha
xlat
push
stos
sub
cmp
jl
xchg
xor
inc
repz
in
mov
dec
and
jnp
(bad)
clc
and
mov
adc
fwait
out
xchg
adc
and
cwde
cld
cmps
sub
out
adc
test
cmps
or
inc
pushf
mov
nop
xchg
sbb
ja
inc
aaa
mov
dec
fs
jmp
pop
stos
inc
aas
call
fdivr
jl
jecxz
add
sbb
stc
or
mov
sub
cmp
mov
pop
mov
mov
cmps
mov
xlat
pop
ret
bound
ja
mov
test
mov
inc
shr
daa
cwde
sbb
or
iret
ins
sbb
or
jmp
in
dec
loope
add
(bad)
leave
popf
mov
sub
push
js
in
mov
jecxz
cmp
aas
cmp
loop
sar
cmp
sahf
stos
dec
push
inc
push
inc
ins
and
or
push
and
(bad)
int
fbstp
fstp
xor
inc
popa
test
inc
loop
and
pop
out
sbb
xor
push
jae
add
sbb
sbb
loope
pop
stc
xor
push
inc
push
inc
mov
sbb
scas
push
sbb
mov
sbb
imul
xor
sar
mov
int3
mov
(bad)
je
mov
add
inc
sbb
jne
addr16
inc
sbb
out
inc
stc
dec
and
and
mov
mov
jno
mov
xor
int3
mov
pusha
mov
pop
imul
sbb
pushf
addr16
lods
movs
push
push
sub
mov
jno
push
popf
dec
aam
mov
in
loop
mov
pushf
sbb
hlt
std
xor
sbb
inc
mov
rcr
cmp
stos
pop
mov
int3
xchg
call
push
push
cdq
push
or
inc
lea
fmul
adc
sbb
lea
in
push
arpl
je
sub
in
jno
sbb
xor
or
dec
loop
sbb
test
push
mov
or
mov
mov
mov
jmp
pop
jl
xor
enter
clc
ss
nop
das
xor
add
jmp
xor
cmp
mov
fneni(8087
xchg
movs
aad
out
pop
retf
ds
pop
xchg
mov
ins
push
aaa
push
shl
sub
mov
jp
repz
push
je
mov
loopne
jmp
inc
jecxz
xor
imul
nop
loopne
aam
enter
aaa
pop
std
out
int3
popa
and
and
pop
jmp
shl
cld
data16
jmp
fwait
mov
fmul
aas
test
jle
or
sti
into
ins
xchg
jmp
cld
rcl
and
or
outs
adc
xchg
jnp
repz
push
xor
mov
or
xor
stos
loopne
inc
imul
test
add
mov
sbb
fsub
leave
in
sbb
cmp
dec
std
cmps
or
mov
jo
mov
jne
mov
cmp
loop
sbb
jnp
test
push
mov
stos
jmp
dec
(bad)
pop
and
xor
mov
push
pop
pop
es
jns
cmp
push
ins
repz
es
xchg
imul
in
movs
out
xlat
cdq
sub
dec
mov
lds
and
adc
adc
mov
loopne
and
jmp
jmp
jno
cld
add
mov
push
xor
push
adc
icebp
xchg
jno
cmp
adc
mov
inc
in
xchg
out
bndldx
pop
jne
jns
cli
shl
movs
xchg
cmc
clc
pop
in
inc
fucomip
pushf
jl
push
sbb
cmc
mov
lods
fs
jmp
ja
(bad)
ficom
pop
mov
pusha
sbb
movs
mov
popa
sub
ret
xchg
cwde
(bad)
mov
cs
enter
and
and
(bad)
xor
add
leave
sbb
adc
pushf
loope
push
por
push
out
sbb
mov
pushf
jmp
add
test
push
cmp
jecxz
jmp
push
cmc
adc
enter
ins
adc
ss
xor
jp
aam
sbb
adc
pop
add
aad
out
stos
shl
sub
movs
push
xchg
xchg
jno
mov
xlat
jge
dec
std
push
call
and
xchg
pop
pusha
or
inc
in
je
pop
sti
mov
rcr
jmp
fnstenv
cwde
mov
loopne
sbb
lods
jecxz
jecxz
add
push
in
es
leave
inc
dec
in
das
loopne
add
inc
add
ficom
dec
outs
test
cmp
adc
mov
lea
push
pop
adc
and
and
sbb
inc
test
xchg
and
dec
xchg
and
jecxz
or
or
sbb
jmp
mov
aas
push
cwde
or
test
call
dec
mov
mov
movs
push
pop
js
imul
mov
cmc
mov
inc
adc
cmps
push
retf
inc
mov
and
mov
add
js
out
pop
add
ins
rep
fdivr
jmp
add
jecxz
adc
sub
mov
or
push
inc
dec
(bad)
add
aas
and
icebp
mov
gs
loopne
sub
call
iret
jmp
je
ins
xchg
or
inc
sub
loopne
sbb
or
dec
cmp
adc
pop
inc
movs
push
loope
sbb
je
inc
bound
scas
in
pop
xchg
and
mov
call
jmp
jge
xchg
pop
ja
rcl
add
movs
int3
call
push
sbb
stos
xor
data16
jmp
jne
std
jbe
pushf
fcom
xor
sub
jno
mov
pop
mov
outs
inc
dec
or
sbb
lods
aam
call
add
xor
shl
or
in
test
(bad)
jmp
mov
lock
sbb
lods
xchg
jnp
mov
cmp
mov
and
ins
push
test
dec
xor
push
frstor
ds
pusha
or
xor
xor
in
sti
outs
xor
lods
mov
test
jl
xchg
mov
js
and
jnp
cwde
jmp
ins
jo
sbb
nop
dec
jns
fsubr
mov
xor
clc
test
sbb
and
jae
js
int3
ja
clc
cmp
xchg
sub
cld
adc
pop
aaa
icebp
call
gs
dec
cdq
pop
lds
stc
add
jb
pop
lods
fdivr
adc
pop
mov
xchg
jns
aas
push
jecxz
xchg
xchg
jne
sub
clc
or
pusha
cld
push
xchg
xchg
sub
inc
int
repz
in
add
cmp
jmp
dec
movs
loop
and
sub
sbb
pop
mov
neg
sub
loope
pop
sbb
std
pop
fidiv
push
sbb
retf
call
ja
pop
and
in
xchg
data16
dec
lods
push
into
aas
sar
stc
add
lods
add
push
aaa
add
fcomp
cmp
lds
movs
outs
mov
cmps
je
xchg
cmps
ins
in
jae
pop
xor
stos
in
adc
jecxz
pop
inc
inc
xchg
cmp
lods
in
xor
mov
xor
jb
loop
jae
call
adc
sub
mov
hlt
mov
or
or
adc
mov
es
enter
scas
inc
inc
xor
and
push
inc
cwd
daa
movs
je
fdiv
loop
and
test
mov
push
hlt
mov
sub
mov
lods
hlt
push
jmp
xor
sti
push
movs
jns
int
and
ins
xor
ret
push
idiv
int
jno
xor
fs
mov
aad
gs
mov
push
sbb
pusha
jge
loopne
pop
mov
jmp
cmp
sti
or
inc
call
mov
dec
rcl
mov
jnp
inc
add
cdq
add
aaa
jae
mov
push
jno
(bad)
push
add
shr
cmp
or
push
and
sub
jno
fsub
stos
pop
lods
push
lods
dec
gs
cmp
fisub
ds
test
sbb
std
cld
nop
in
addr16
stos
call
or
and
add
fild
jmp
adc
and
cmc
bound
mov
rcl
sub
mov
mov
push
add
test
dec
inc
call
call
pusha
out
les
push
add
fst
aas
push
cmp
outs
(bad)
call
push
ins
fst
es
adc
jo
(bad)
mov
and
inc
push
adc
ffreep
hlt
add
aam
mov
lds
out
inc
cmp
or
gs
loopne
xchg
add
pop
pop
dec
sbb
(bad)
jnp
loop
retf
xchg
xor
inc
test
leave
mov
outs
adc
sbb
repnz
xchg
jg
and
push
scas
mov
xchg
retf
psrld
xor
mov
mov
mov
add
fadd
sub
dec
push
(bad)
xor
aad
sbb
push
out
je
gs
and
scas
cld
(bad)
shl
cmp
jnp
or
add
push
or
out
xor
repz
mov
adc
push
push
pop
xchg
xor
xor
in
jecxz
adc
(bad)
cld
add
scas
cs
imul
sub
mov
movs
aaa
in
sbb
and
cmc
fiadd
add
pop
sbb
add
out
ret
jo
and
xchg
mov
mov
mov
sub
fwait
shl
inc
xchg
adc
mov
jp
popa
or
in
jmp
sub
jnp
icebp
pop
xchg
mov
loop
sub
lods
push
scas
or
jmp
adc
in
cmp
fadd
xor
retf
adc
sti
lods
add
fimul
popf
push
movs
test
sti
cmp
stos
pusha
loopne
gs
xchg
jmp
cmp
push
fmul
mov
push
mov
rcr
cmps
sbb
xchg
push
sub
int3
inc
loope
lahf
shl
int
lock
xchg
mov
leave
adc
fist
popa
add
jne
test
sub
mov
push
rcl
bound
in
ret
gs
jne
fmul
sbb
pushf
add
jecxz
sub
into
xchg
push
js
ins
push
adc
in
jl
lods
aam
cmc
inc
jmp
bound
xchg
or
inc
dec
and
fild
jl
sub
into
call
lds
jle
std
xor
out
inc
jmp
mov
outs
imul
pusha
loopne
aaa
and
and
out
sub
mov
inc
out
loopne
scas
dec
push
or
jns
cmc
call
push
fdivr
jmp
push
jne
pushf
out
or
arpl
popf
retf
cwde
adc
(bad)
or
inc
xor
mov
add
inc
hlt
out
push
cmps
and
pop
pushf
or
sub
enter
xchg
outs
jmp
and
sub
cmp
rol
aad
in
inc
mov
xchg
jmp
push
add
mov
inc
in
add
xchg
out
out
push
inc
pop
sbb
cmc
stos
jns
mov
cld
pop
stos
popa
sbb
pop
fs
mov
and
mov
ins
xor
fucomi
dec
test
and
adc
lods
cdq
push
mov
loope
stos
loopne
sti
or
sbb
pop
push
pop
adc
mov
xor
dec
stos
clc
fwait
and
popa
stos
test
or
dec
test
aas
call
sub
mov
imul
xchg
mov
in
inc
call
in
dec
and
sbb
xchg
push
cmps
mov
sbb
add
and
add
imul
ficom
mov
out
test
hlt
inc
call
loop
sub
xchg
or
jae
(bad)
adc
push
pop
ins
sub
adc
or
(bad)
je
pop
add
out
pop
push
adc
es
cmp
out
fdivr
and
stos
fldenv
sub
adc
rcr
and
vunpckhps
ins
lods
out
cmp
fldenv
call
mov
xchg
vmread
movs
popf
fmul
push
out
nop
in
cmc
mov
in
hlt
xchg
and
add
inc
outs
xor
sub
addr16
adc
xchg
arpl
jmp
push
mov
lods
ins
leave
or
or
unpckhps
mov
ds
std
xchg
mov
add
imul
dec
xor
in
pop
test
push
adc
dec
jecxz
xor
push
loope
fwait
pop
sbb
imul
and
and
adc
xchg
dec
sub
rcl
mov
jb
xchg
mov
or
pop
pop
sbb
cmp
sar
jae
ds
(bad)
or
jne
nop
push
xchg
inc
push
xor
les
das
gs
jne
cmp
dec
push
in
adc
in
out
ins
mov
sub
call
xchg
push
out
fcom
out
mov
jmp
test
xlat
push
sbb
adc
jecxz
adc
retf
jae
loop
pop
int
in
mov
jmp
sbb
pop
mov
sub
ret
(bad)
jge
lds
sti
lods
ror
pushf
fsubr
lock
mov
mov
sub
dec
mov
fist
push
rol
retf
xor
das
outs
int
mov
xchg
in
dec
out
call
mov
jb
enter
sti
fcomp
bound
pop
mov
aam
pop
popf
or
in
sbb
sub
sub
pushf
arpl
loop
adc
and
adc
inc
retf
rcr
out
and
vaddsubpd
jmp
int
fadd
or
xchg
ja
js
clc
pop
xchg
fcomp
(bad)
shl
sub
std
cmps
ins
aas
out
or
aad
push
inc
lock
hlt
sub
adc
addr16
inc
ror
shr
sti
cmp
ja
mov
sbb
stos
je
sti
out
mov
cmp
mov
xchg
sub
in
push
cmps
pop
and
in
(bad)
push
xchg
jo
or
mov
adc
gs
sbb
xchg
mov
mov
aam
jae
and
pushf
arpl
stc
xchg
adc
add
xchg
in
jo
sub
mov
push
push
jns
pop
out
push
sar
aam
(bad)
loope
jo
xor
in
mov
(bad)
stc
jnp
test
dec
cmp
push
inc
popf
xor
or
adc
mov
xchg
pop
push
jnp
pop
out
cmps
jmp
or
sbb
sub
test
std
scas
dec
xchg
leave
popa
inc
cmc
add
xor
aam
loop
ins
adc
add
dec
icebp
or
ja
gs
jmp
adc
cld
fsub
rcl
jge
sub
sbb
jae
jno
sbb
dec
push
iret
push
xor
in
mov
mov
jno
add
ins
bndldx
es
inc
fdiv
sbb
popa
xchg
repnz
add
push
call
jmp
pop
sub
out
push
rcl
arpl
mov
addr16
push
push
mov
popf
mov
aaa
lds
addr16
mov
push
out
call
test
add
ficomp
sbb
sti
push
rol
cmp
arpl
movs
pop
loope
(bad)
retf
les
sbb
and
mov
aam
nop
aaa
mov
aas
xor
fld
xor
dec
add
das
jnp
xor
xchg
and
outs
sbb
ins
xor
mov
(bad)
cmps
sub
or
test
enter
in
xor
jl
(bad)
adc
mov
sar
cdq
dec
stc
fcom
call
dec
aaa
pop
cmps
pop
cmp
dec
push
push
mov
adc
inc
or
dec
mov
bound
xor
ja
cmc
loope
ficomp
sbb
out
repnz
add
in
adc
push
or
push
adc
loop
gs
in
jmp
inc
jecxz
sub
cli
sub
dec
cmc
pop
push
cld
out
push
mov
sbb
addr16
nop
movs
call
cwde
push
in
push
pop
mov
add
adc
cmps
cdq
in
jnp
jle
jp
jecxz
ret
aam
dec
aad
xchg
mov
add
xor
sub
stos
je
jnp
add
jmp
sub
fsub
cli
cmp
mov
jne
and
rcl
xchg
pusha
popa
jmp
push
jmp
gs
clc
ret
pop
sbb
into
pop
add
adc
and
dec
jmp
or
loop
adc
or
adc
mov
inc
hlt
jg
or
imul
sub
jnp
inc
mov
jmp
rcl
add
add
push
lods
or
mov
iret
fmulp
jno
jge
mov
dec
push
jae
jmp
popa
shr
mov
jne
sbb
clc
jg
int3
cmp
jno
fucom
mov
cwde
cwde
loope
pop
xchg
dec
mov
test
(bad)
in
add
jns
(bad)
aad
fnsave
cmc
out
jmp
jl
pop
gs
jnp
inc
add
inc
out
fdiv
cmp
aam
mov
push
push
jne
cmp
test
jae
add
ds
add
daa
xchg
loop
cwde
dec
push
mov
ror
cmc
aas
in
loop
fxch
call
xor
xor
adc
cmp
(bad)
iret
ret
repnz
inc
call
or
cmp
fcos
mov
pop
jle
or
mov
loop
iret
inc
lds
push
adc
or
(bad)
inc
fbld
and
cmp
lods
jnp
je
mov
out
rcl
adc
lods
jmp
je
loop
adc
xchg
fisttp
ret
gs
and
aam
xchg
jle
dec
mov
xor
cdq
in
aas
out
xchg
and
jo
or
push
adc
mov
or
inc
mov
xchg
mov
in
cmps
mov
cmp
and
inc
mov
hlt
and
out
push
nop
mov
out
sbb
test
xchg
mov
inc
push
adc
cmc
call
push
or
cmp
mov
fmul
outs
and
push
adc
xchg
jmp
cmc
popf
ficomp
mov
outs
jecxz
hlt
imul
sbb
(bad)
aas
xchg
cmp
mov
dec
adc
jne
sub
add
jns
mov
ja
pop
mov
aam
mov
jb
je
or
repz
xor
idiv
scas
mov
or
push
inc
xor
push
rol
push
loop
shr
push
cmp
push
ja
jns
or
fild
push
xchg
int3
xor
jb
enter
pusha
adc
shl
nop
jg
mov
test
adc
mov
inc
inc
and
mov
icebp
adc
sbb
hlt
sbb
mov
arpl
or
loope
pop
or
adc
lock
ss
pop
inc
inc
xor
cmp
mov
jg
sbb
cwde
nop
fucom
cmp
or
es
push
rcl
mov
inc
or
xor
xchg
dec
out
inc
inc
add
mov
sub
adc
sub
call
jmp
pop
sbb
je
sub
stos
ret
mov
in
cmp
add
jne
arpl
pusha
adc
lds
push
ret
xchg
dec
pop
out
jmp
add
lds
adc
xor
sti
loopne
mov
cmp
jge
mov
xchg
sub
rcl
sub
test
dec
sti
xchg
les
xor
adc
mov
lock
mov
inc
sbb
mov
movs
cmp
pushf
js
enter
push
xchg
xor
rol
mov
test
loope
dec
inc
jl
stc
xor
ins
adc
jecxz
jbe
test
imul
or
and
xchg
in
push
in
xor
or
cmp
jne
sbb
out
aad
test
fwait
push
arpl
fdivr
ds
or
adc
test
sti
inc
push
pop
mov
mov
rol
lods
pop
out
sbb
movs
xor
inc
bound
push
sar
xchg
adc
pusha
jae
stos
div
adc
sub
out
ins
push
ja
int
mov
jo
and
loopne
call
mov
lods
mov
or
aad
iret
movs
enter
adc
jl
jmp
cmc
inc
cmp
nop
es
test
nop
mul
push
adc
or
mov
fld
call
xor
gs
and
imul
leave
popf
xor
or
adc
fwait
and
leave
hlt
jne
cld
pop
shr
outs
push
mov
mov
int3
fimul
jnp
shl
test
dec
xor
popf
xchg
inc
jne
mov
sbb
in
push
gs
loop
and
jge
jb
adc
(bad)
jl
les
xchg
jbe
mov
jmp
(bad)
fimul
sahf
arpl
cmp
fisub
mov
xor
in
adc
push
xchg
push
test
cmc
xchg
je
sbb
jo
hlt
pop
(bad)
pushf
frstor
or
fs
loopne
and
popf
clc
inc
adc
add
xchg
adc
pop
and
fisubr
stc
and
js
cmps
add
jl
xor
fucomi
cmps
push
xchg
ret
push
mov
fcom
sbb
push
out
inc
add
mov
xor
push
xchg
inc
and
jmp
(bad)
jno
hlt
sub
cmp
dec
sub
dec
add
bound
jmp
xor
ret
push
outs
dec
movs
mov
(bad)
adc
mov
jo
mov
push
and
popa
test
mov
fst
fisttp
mov
fnstsw
jecxz
jb
and
(bad)
sti
int
and
rcr
fwait
cmc
inc
and
push
cmp
out
loopne
jae
xor
jmp
test
je
pop
shl
push
xchg
in
fwait
call
enter
hlt
dec
push
xchg
jnp
xchg
cmp
test
stc
xchg
cmp
push
push
mov
jnp
aaa
cmc
adc
mov
shr
xor
pop
outs
cli
(bad)
in
dec
mov
gs
pop
nop
adc
cmp
sbb
adc
xchg
dec
mov
je
jae
jp
cmps
push
sbb
jmp
popf
jno
sbb
ins
movs
dec
vmovntps
mov
and
sar
pop
test
sbb
adc
movs
sbb
pop
addr16
out
test
mov
clc
mov
pushf
jae
pop
pop
and
sbb
hlt
mov
add
mov
out
stc
ficom
mov
outs
add
retf
pop
call
fistp
cmp
fsubr
mov
add
mul
mov
push
or
mov
jae
ins
adc
ret
sbb
dec
xchg
out
sbb
pop
xor
daa
or
dec
gs
or
push
jg
sbb
sahf
jns
mov
xchg
int3
adc
out
jo
or
and
in
mov
fsubr
cmp
cmp
outs
cld
add
or
xchg
mov
sbb
stc
and
pop
in
call
push
fild
popf
push
pop
retf
mov
ins
inc
jl
loop
ficomp
inc
xchg
xor
sbb
int3
loopne
mov
outs
push
inc
inc
int3
or
fstp
popa
inc
mov
cmp
mov
rcr
ins
(bad)
xchg
dec
gs
xor
cmp
mov
sbb
lea
push
(bad)
ins
popa
gs
jne
loopne
dec
push
arpl
cmc
jg
call
dec
inc
sub
lock
inc
sub
popf
add
pusha
bound
jb
fadd
xchg
cmc
loop
js
xchg
cmp
cli
jno
mov
outs
push
jmp
addr16
ins
lods
sbb
(bad)
xor
xchg
add
mov
xchg
push
lock
ret
inc
loop
sub
jecxz
ja
(bad)
jmp
sahf
ja
push
mov
push
setp
mov
hlt
xchg
sbb
aaa
test
inc
inc
(bad)
test
xchg
inc
adc
out
mov
cdq
sbb
xlat
adc
jge
inc
call
cmp
(bad)
aad
adc
mov
cmps
add
aad
in
aam
and
sub
push
fdivr
outs
dec
jae
dec
jns
pop
retf
mov
dec
pop
push
test
shl
ss
jns
xchg
pushf
loopne
xchg
lds
out
adc
cmp
xor
push
sub
push
out
movs
aaa
sub
push
cmp
cmp
je
pop
cld
add
leave
sub
jne
mov
push
ins
and
nop
jae
push
sub
(bad)
fsub
pop
ficom
ja
and
mov
sub
stos
push
es
sub
je
sub
add
push
push
movs
imul
sbb
push
lock
clc
in
and
lea
xor
xchg
fucomip
ror
sbb
hlt
out
cmps
cdq
int3
dec
adc
cld
gs
loop
aad
push
sub
cmp
mov
std
js
hlt
shl
fisubr
sbb
in
out
push
pop
mov
jae
in
in
shl
in
push
rcr
rcr
rol
ins
int
jno
sbb
(bad)
sbb
ja
mul
shl
shl
cwde
lods
jo
push
xor
ja
xor
pop
gs
add
ins
mov
rol
sbb
fisttp
mov
into
inc
in
out
popf
neg
adc
push
(bad)
push
and
and
sti
aam
inc
test
push
movs
in
sbb
lods
xchg
xchg
push
push
adc
xor
out
lock
push
mov
nop
and
add
test
and
mov
test
shl
sbb
sbb
cmp
iret
or
test
mov
hlt
js
push
jge
adc
push
and
mov
add
sahf
in
sbb
cmp
jne
lock
jae
lods
and
sbb
fs
loop
lock
cmp
sbb
or
div
in
(bad)
into
jmp
mov
push
and
mov
pop
sub
movs
std
adc
in
dec
cmp
enter
jmp
call
into
out
and
sbb
fidiv
jmp
sar
xor
jp
push
loopne
and
in
mov
pushf
sbb
cs
outs
xor
movs
jne
in
cmp
es
retf
or
fsub
or
fs
fwait
xchg
lock
ret
test
jmp
xor
hlt
test
dec
push
ins
imul
xlat
inc
or
dec
adc
in
dec
mov
aaa
mov
out
sub
xchg
ja
adc
test
js
adc
repnz
jb
nop
pop
in
mov
movs
stos
dec
ins
in
stos
dec
mov
(bad)
xchg
sbb
push
or
sub
mov
movs
sub
mov
xor
jo
and
inc
not
movs
call
lds
mov
outs
pusha
fst
inc
xchg
gs
out
add
inc
and
aas
mov
add
jmp
call
adc
or
out
sub
hlt
mov
sub
add
popa
movs
pop
std
push
push
adc
add
int3
jmp
push
aad
std
pop
push
add
xor
push
jmp
dec
mov
sbb
inc
loopne
push
icebp
fcom
jge
ds
sbb
cld
enter
cmps
mov
cmp
test
jg
aad
sbb
call
push
pop
jg
pusha
mov
sub
sbb
outs
mov
push
scas
imul
das
jmp
xor
pop
and
push
sbb
jmp
daa
adc
adc
jae
test
push
je
push
rcl
jmp
loop
xor
sbb
cli
sbb
cld
std
lods
inc
adc
ror
mov
rcr
outs
loope
adc
popa
gs
add
mov
addr16
adc
dec
in
mov
inc
out
sub
loopne
mov
xor
mov
into
ins
sbb
lock
in
aam
jno
iret
jecxz
add
das
(bad)
es
outs
das
pop
movs
enter
push
sbb
movs
push
mov
mov
fbstp
dec
ins
xor
(bad)
std
cmp
jmp
push
cmp
test
and
or
sub
sbb
cmp
cmp
fisttp
imul
adc
xor
mov
sub
jmp
int
and
out
mov
outs
bound
vpsubq
or
xor
jle
int3
mov
lock
(bad)
adc
dec
in
in
out
lea
jae
and
(bad)
pop
jnp
mov
ja
push
inc
jmp
std
stos
mov
add
jmp
data16
movs
shl
jno
mov
and
or
data16
scas
(bad)
sbb
cli
push
mov
lods
push
pop
cmp
cmp
int3
ins
push
jge
jbe
or
pusha
xlat
xchg
push
xchg
dec
popf
in
push
or
adc
pop
test
add
cld
or
mov
(bad)
lock
add
jne
xor
repnz
arpl
or
jns
loopne
and
jmp
push
jmp
ja
sbb
ficomp
and
shl
dec
jae
sub
fnstenv
ss
sbb
jno
add
lea
push
push
dec
gs
inc
inc
jnp
sbb
out
ret
bound
loop
jno
push
out
jl
or
pop
aad
test
inc
icebp
jecxz
mov
mov
mov
sar
sbb
hlt
add
nop
jae
out
add
xchg
pop
sbb
fstp
sub
lds
or
inc
loopne
adc
xchg
call
pushf
in
test
fstp
aad
push
inc
xchg
xchg
fcomp
and
push
ins
cwde
(bad)
ja
in
cld
mov
in
add
and
sbb
stos
dec
outs
adc
in
gs
pop
pop
cmp
cld
sbb
jbe
scas
xor
cmp
adc
div
pop
lds
adc
jecxz
add
jns
sbb
div
das
xchg
dec
inc
pusha
pop
int
popa
lds
xchg
dec
and
and
lods
js
sub
nop
mov
(bad)
jae
jmp
cmps
or
jne
inc
mov
pop
and
jno
scas
out
xor
cs
sub
mov
ins
xchg
js
mov
or
ins
or
xor
mov
ds
lock
add
repnz
sub
pop
arpl
inc
jmp
xchg
or
ins
retf
and
sub
aad
and
ror
fcomp
or
out
and
dec
not
cmp
xlat
add
in
inc
ss
cmp
jmp
pop
imul
popa
stos
test
adc
mov
popf
and
xor
out
retf
xor
outs
mov
int3
pop
push
push
lock
sbb
xor
sbb
mov
inc
in
call
push
fsubr
xchg
jl
jecxz
ss
cmp
jnp
sbb
pop
cwde
enter
fs
out
ins
sbb
ds
mov
test
pop
cmp
les
cwde
aas
sub
xchg
aam
jg
outs
in
loop
int
xor
add
fst
add
adc
xchg
test
jo
in
xor
movs
dec
fistp
dec
lds
mov
hlt
jnp
test
hlt
sbb
jmp
and
ret
ss
jmp
out
popa
movs
mov
sub
add
push
jl
dec
aaa
sbb
and
or
jb
jne
mov
xchg
or
jns
movs
add
pop
dec
jmp
xor
loopne
sbb
popa
aad
mov
or
or
ins
call
mov
test
scas
das
jnp
pop
test
push
mov
xor
icebp
aas
jecxz
push
and
lds
loop
sbb
sub
shl
in
cdq
stc
sti
hlt
dec
add
jp
adc
gs
jnp
call
xchg
lds
(bad)
cld
mov
or
dec
mov
adc
xchg
jbe
gs
std
hlt
xchg
hlt
pop
fidivr
test
sbb
jmp
jl
or
cli
nop
jmp
loopne
inc
fs
ins
loop
fstp
ds
lods
fdivr
inc
scas
inc
int3
ja
cld
push
neg
fs
pop
xor
sti
fisttp
xchg
jae
dec
sbb
les
adc
cld
int3
xor
inc
int
es
(bad)
cmp
jns
ins
loopne
dec
mov
xchg
jl
mov
mov
in
leave
pop
adc
out
adc
jb
pop
daa
inc
in
lds
jmp
xchg
int3
xor
cmp
aam
cld
pop
aam
or
inc
test
mov
adc
dec
push
movs
je
jge
mov
loope
jo
jl
test
push
rcr
leave
not
fcomp
mov
arpl
jmp
inc
pusha
mov
push
jmp
inc
and
adc
push
add
sbb
mov
cld
jae
sbb
pop
je
fiadd
sub
add
aad
xchg
lds
jmp
int3
jne
sbb
fst
xchg
xchg
imul
inc
call
das
icebp
clc
fcom
popf
pop
add
pop
out
clc
cmp
ror
jns
xlat
pushf
loopne
sbb
out
repnz
mov
sbb
pushf
push
sub
pop
fiadd
inc
hlt
enter
(bad)
out
(bad)
jg
jl
cmp
cwde
mov
sub
adc
hlt
jmp
xchg
std
mov
fild
add
call
mov
pop
out
xchg
inc
pop
mov
sub
xor
adc
mov
jae
popa
xor
ror
xor
je
loope
mov
push
jo
movs
aam
ins
aas
cmp
and
adc
xchg
ret
test
je
outs
add
xchg
mov
or
cmc
push
outs
jae
push
shl
ja
jecxz
out
test
sbb
xchg
adc
dec
pop
gs
mov
inc
fwait
call
call
shl
xor
clc
loopne
jns
aam
push
pushf
and
cmp
inc
xchg
mov
hlt
or
pop
aad
add
xchg
push
std
call
ja
retf
add
in
add
test
arpl
aad
xchg
mov
imul
inc
xchg
xor
or
push
push
mov
imul
sbb
addr16
pop
and
lods
fistp
jmp
adc
mov
ret
add
mov
and
add
sub
std
mov
cmp
adc
jmp
push
loop
sbb
ds
xchg
add
aas
or
sbb
ror
out
adc
sub
ins
xchg
in
cld
stos
and
xor
adc
pop
shl
pop
pushf
cmc
xlat
je
movs
jecxz
lods
mov
sbb
imul
adc
add
push
loope
call
movs
jo
or
dec
push
in
out
imul
mov
fadd
call
pop
jae
shr
xor
loopne
pop
xchg
and
sbb
lds
sub
inc
and
out
fst
mov
cmp
shr
cdq
inc
inc
mov
fs
adc
xor
retf
sub
mov
je
popa
test
sbb
or
xor
jp
adc
adc
mov
sbb
test
and
je
out
ret
lock
cmp
mov
or
jnp
in
add
lods
daa
aam
cwde
sar
lods
xchg
pop
adc
lea
nop
jmp
lahf
fiadd
push
and
adc
daa
mov
push
dec
in
inc
stos
out
retf
out
leave
les
addr16
sub
enter
(bad)
dec
and
inc
inc
mov
or
je
add
movs
call
sbb
or
or
sbb
push
call
jecxz
(bad)
out
cmp
add
adc
xor
enter
cmp
das
outs
test
and
movs
aam
push
out
hlt
sbb
mov
test
push
ror
dec
aaa
cmc
stos
add
ret
jnp
outs
jmp
loop
loope
ds
adc
sub
into
idiv
pop
xor
push
fsub
in
unpcklps
mov
das
jmp
cmc
aam
xchg
xlat
mul
add
xchg
repnz
outs
dec
xchg
dec
test
adc
stos
and
push
rol
test
call
mov
mov
std
movs
sub
push
add
jmp
push
hlt
fistp
or
add
push
repz
imul
or
sbb
mov
fdiv
sbb
pushf
outs
in
adc
cld
stc
xchg
jnp
aas
pusha
adc
outs
push
sbb
sbb
(bad)
fsubr
in
mov
inc
gs
cmc
test
xchg
test
loope
xchg
cld
inc
pop
and
test
mov
cmp
add
jae
and
rcr
scas
or
test
cmp
call
pop
idiv
push
outs
cli
int3
pop
push
enter
inc
popa
out
mov
mov
icebp
int
or
loop
stos
push
inc
call
sbb
(bad)
cmc
jmp
lods
add
sbb
jnp
mov
add
mov
lods
lods
jo
push
lods
sub
sbb
push
push
test
push
iret
ins
jbe
loopne
lods
out
push
add
in
hlt
dec
push
mov
xor
in
arpl
sbb
mov
jecxz
adc
or
or
mov
mov
clc
mov
(bad)
fs
popf
or
xchg
mov
mov
add
fild
or
push
jno
inc
mov
sbb
les
cmp
in
jmp
ret
int3
inc
push
sub
out
sbb
adc
jmp
xchg
sbb
push
and
inc
lods
sbb
jae
test
mov
inc
fistp
iret
test
stos
sbb
outs
test
sbb
gs
jmp
in
aaa
xchg
jbe
loopne
loop
add
cmp
mov
call
call
xor
addr16
and
sub
inc
outs
adc
dec
add
loope
mov
lock
mov
shl
cmps
cmp
xchg
movs
or
xor
push
xchg
js
xchg
jecxz
push
sbb
std
fstp
mov
jge
push
and
mov
lea
jbe
shr
xor
mov
pusha
inc
or
cmp
xchg
test
sbb
jae
pusha
sti
loopne
adc
add
inc
or
sub
movs
xor
sbb
xlat
or
mov
push
add
mov
sbb
jns
inc
std
mov
cmp
out
in
push
js
pop
outs
jecxz
out
fiadd
inc
adc
call
pop
sbb
push
in
(bad)
push
xchg
mov
jmp
sub
sbb
lods
es
inc
hlt
cld
aam
mov
addr16
and
imul
popa
push
outs
inc
call
inc
xchg
dec
test
jns
pop
dec
or
mov
rol
inc
neg
or
mov
and
xor
jle
aad
inc
loopne
push
sbb
mov
aam
or
and
lea
and
sub
cmp
je
and
aam
inc
jo
inc
lods
clc
retf
popa
out
bndstx
inc
fs
clc
cmp
aam
fdiv
jp
add
adc
sub
out
sub
jmp
pop
std
fdiv
imul
movs
add
and
jp
in
(bad)
test
fucomp
loopne
aam
mov
jge
fisub
xchg
cmps
out
xchg
mov
sub
and
and
xchg
pusha
or
cmps
std
nop
pusha
or
loope
adc
adc
in
and
jl
pop
inc
and
sbb
test
loope
mov
hlt
retf
gs
sub
adc
push
or
cld
push
dec
dec
das
test
outs
pop
push
loope
shr
movs
or
jecxz
add
jg
enter
stos
(bad)
sti
sub
movs
and
arpl
mov
int3
loop
sub
cmps
jmp
arpl
xor
cld
mov
test
cmp
out
fs
or
rcr
add
push
(bad)
sbb
jecxz
sub
push
icebp
and
sbb
imul
mov
xor
jae
fs
xor
sbb
mov
imul
push
add
mov
gs
cwde
loope
add
adc
ja
leave
sbb
movs
in
xor
push
push
movs
pop
out
or
push
xchg
les
jge
hlt
out
push
adc
mov
stos
movs
adc
ins
lock
sbb
test
fbld
dec
xchg
pop
sti
addr16
mov
or
outs
aam
aaa
mov
pop
adc
fmul
out
add
xchg
pop
clc
mov
loope
sbb
out
sbb
into
(bad)
popa
cwde
xchg
jnp
lock
les
iret
out
cmp
test
pop
mov
movs
xchg
cmp
jnp
test
std
test
jmp
loope
adc
test
or
xor
xchg
mov
js
sbb
adc
ret
aad
out
cmc
sbb
test
push
fistp
sbb
dec
sbb
nop
inc
or
mov
fmul
adc
dec
pop
lea
in
call
pop
jp
je
sti
ja
xchg
add
xchg
jne
sbb
jge
loope
xor
cdq
push
push
push
mov
xchg
nop
ror
out
mov
daa
mov
pop
jne
inc
inc
out
mov
and
mov
enter
pop
add
jae
hlt
outs
stos
test
fs
jns
aad
js
adc
or
call
mov
inc
aad
mov
gs
rcl
cdq
push
cmp
enter
jecxz
in
lods
mov
sbb
fcmovnb
je
call
gs
xchg
test
(bad)
div
loop
stos
sbb
mov
pop
mov
movs
repz
adc
and
inc
mov
or
clc
loop
das
jnp
cmc
xor
or
and
cmc
or
loop
dec
mov
ret
dec
jmp
add
int3
sbb
xchg
add
aam
es
push
add
data16
stos
xor
idiv
mov
mov
aas
push
adc
arpl
stc
jno
push
jmp
pop
pop
mov
fistp
test
cmps
not
adc
and
mov
push
inc
cs
nop
pop
aaa
enter
sbb
adc
imul
sbb
add
or
pop
fsub
sub
cld
es
aam
push
adc
pushf
sbb
fwait
pusha
sbb
dec
fimul
enter
and
cwde
mov
mov
aad
ss
loop
outs
test
xor
mov
fdiv
shr
je
js
xchg
ins
sbb
and
cmp
pop
or
in
js
in
add
(bad)
jmp
cs
push
std
leave
test
int3
add
sbb
bound
or
xor
into
aaa
lock
xor
pop
loop
push
xchg
dec
cmps
cmp
dec
sub
fidivr
xchg
pop
sbb
fidivr
std
dec
and
pushf
adc
or
arpl
mov
or
push
adc
sbb
mov
cmps
sbb
mov
cmp
and
(bad)
(bad)
push
test
not
jl
push
cmc
shr
in
jb
stc
fisubr
adc
add
test
mov
mov
add
rcr
push
xchg
jae
fist
xchg
add
xor
ja
push
jns
pop
mov
xchg
fisttp
or
js
inc
adc
and
repnz
das
adc
pop
jge
add
mov
sbb
cld
ror
push
or
cmp
clc
push
mov
js
loopne
adc
add
outs
mov
std
fmul
xor
aad
xor
or
fs
push
push
and
cwde
jmp
jecxz
jecxz
push
and
xchg
jg
push
aad
fdiv
adc
pop
out
repz
cdq
and
fdivr
jne
int3
pop
(bad)
rcl
pop
cmps
jnp
xor
inc
cmp
rol
xchg
scas
sti
push
inc
in
adc
fadd
push
mov
push
xor
or
dec
xor
les
loop
sbb
adc
jg
or
dec
es
or
adc
call
sub
lahf
fs
adc
or
sbb
enter
in
cmp
xchg
push
or
add
xor
mov
ds
gs
pop
and
jge
xor
mov
dec
pusha
sub
jge
or
mov
pop
sub
jae
push
mov
(bad)
or
jno
sbb
jmp
test
push
push
dec
pop
bnd
scas
call
iret
push
dec
and
adc
pop
jb
sub
inc
or
add
sbb
adc
sbb
vmovd
push
cmp
pop
xchg
cld
in
jmp
jb
mov
es
sbb
movs
loopne
les
sub
cmp
in
jecxz
adc
stos
xor
push
pop
shl
xor
scas
xchg
xor
dec
mov
xchg
(bad)
out
fnsave
sub
cmp
mov
xor
sub
shl
aam
inc
fistp
jo
mov
sbb
xchg
repz
ss
sbb
pop
cmc
aas
loope
xchg
push
inc
xor
int3
add
adc
imul
out
arpl
and
mov
push
and
es
in
fidivr
sbb
jg
lods
pop
loop
lds
fbld
pop
movs
push
pushf
aam
and
cmp
mov
in
in
movs
mov
out
mov
cmp
xchg
or
fdiv
push
inc
repz
rcr
dec
hlt
adc
test
inc
mov
repnz
adc
call
mov
je
je
dec
jo
mov
inc
gs
sti
pop
clc
scas
adc
push
mov
jae
and
ret
add
adc
pop
mov
(bad)
xor
dec
or
adc
sbb
ror
repnz
inc
adc
mov
mov
pop
mov
outs
aad
movs
xor
dec
fdivr
and
jmp
push
ja
imul
inc
sbb
xchg
jno
inc
repnz
inc
pop
or
lock
sti
mul
cmc
int
mov
lahf
out
fsubr
fsubr
cmp
mov
test
cwde
or
pop
nop
es
mov
push
or
aam
gs
cmp
xchg
dec
retf
sti
mov
inc
mov
jmp
cmp
out
or
in
int3
cmp
push
xor
lock
mov
jnp
cld
sbb
movs
mov
xor
mov
sbb
sub
ds
js
scas
out
push
push
xor
aad
sub
(bad)
jmp
cdq
ins
fdivr
mov
imul
dec
jnp
inc
js
out
adc
xor
add
out
adc
mov
add
dec
mov
call
sub
into
loopne
xor
icebp
mov
add
lea
jmp
sub
adc
out
in
sbb
dec
xchg
stc
cwde
inc
clc
repnz
sbb
push
sti
fdivr
mov
jmp
aas
sbb
sar
mov
cwde
sub
aam
xor
push
adc
xor
adc
or
lods
shr
adc
jecxz
jns
mov
popa
mov
add
jp
pop
(bad)
mov
pusha
xchg
dec
loopne
fld
xor
paddq
and
jnp
mov
mov
gs
fisubr
inc
arpl
mov
xchg
push
in
pop
mov
adc
xchg
mov
mov
ss
xor
sbb
mov
pusha
jns
mov
add
movs
dec
rcr
(bad)
and
sbb
addr16
push
sbb
mov
fnsave
pushf
ins
or
sbb
jge
repnz
push
mov
(bad)
jae
cmp
sar
shl
leave
div
cld
and
adc
dec
enter
outs
aad
hlt
sub
pop
jecxz
xchg
mov
loopne
aam
pop
pop
push
jmp
int3
jbe
fld
mov
push
call
pushf
cmp
mov
aad
mov
lds
out
ror
xor
add
adc
cwde
aad
push
inc
jge
je
mov
or
pop
ss
in
std
pop
popf
dec
push
xchg
icebp
pop
or
in
aam
jnp
sbb
cwde
in
test
jp
nop
pop
and
and
int
out
retf
xlat
push
inc
pop
jne
int3
clc
call
imul
push
loopne
aam
sub
add
loope
fucomi
call
out
mov
pushf
imul
xor
repnz
fiadd
int3
movs
cmp
xchg
scas
jmp
pop
mov
add
lds
sbb
or
mov
or
xlat
add
dec
push
fcom
sahf
scas
dec
cmc
mov
pop
movs
mul
sbb
mov
repz
jecxz
ins
mov
sub
pop
fcom
jnp
cmp
pushf
sub
fwait
sbb
loopne
xchg
sub
(bad)
mov
lock
shl
mov
mov
fcom
xor
pusha
loope
xchg
sub
jne
arpl
aaa
pop
adc
or
adc
push
out
push
fs
lods
inc
fcomip
and
pop
jae
or
add
in
aas
fisttp
lds
xchg
aaa
inc
adc
out
push
mov
xchg
xchg
pushf
mov
(bad)
adc
movs
outs
add
pop
fdivr
xor
dec
adc
cmc
lea
cmps
fstp
mov
je
add
or
jecxz
sbb
stos
in
int3
pop
jmp
data16
mov
jecxz
add
adc
mov
jbe
mov
rcr
cmc
int3
fs
aas
xor
leave
out
nop
mov
adc
xor
add
jmp
push
jmp
iret
push
call
jp
cmp
adc
cmp
xchg
dec
inc
enter
cmp
cld
std
jnp
sbb
jb
push
xchg
(bad)
or
je
fstp
fisttp
push
jl
xor
dec
push
test
pushf
fldenv
jb
cmps
sbb
repz
ds
xor
xchg
pop
call
data16
movs
xlat
rcr
or
mov
repnz
push
in
pop
cli
dec
mov
cmps
push
dec
adc
add
xchg
iret
push
sub
lods
pusha
ds
in
pop
aad
cmp
xor
mov
sbb
(bad)
jnp
or
mov
fadd
fld
call
sbb
xor
or
cmc
dec
pop
out
in
lahf
dec
pop
aam
gs
push
out
sub
test
dec
adc
or
fadd
loopne
movs
and
xchg
push
test
inc
outs
adc
sub
aam
out
ins
sbb
hlt
xor
out
ins
push
fwait
sub
mov
pop
cmc
popa
in
xchg
ja
sar
lock
cmps
sbb
ds
adc
dec
or
stc
or
xor
and
xchg
in
dec
cwde
or
movs
out
push
pop
ror
mov
inc
adc
lea
mov
xchg
dec
inc
pop
int3
je
test
fbstp
retf
sbb
jno
push
addr16
and
les
fistp
fisttp
int
mov
test
push
ds
sbb
and
wrmsr
lds
push
out
into
or
aam
lods
call
cmp
cwde
dec
jecxz
data16
outs
inc
out
adc
int3
push
adc
loopne
mov
push
sub
scas
imul
or
lock
nop
pusha
ins
adc
mov
icebp
ins
mov
jp
inc
test
jb
aad
and
jnp
mov
out
jns
loop
loopne
mov
outs
call
mov
push
test
lds
or
ins
loope
mov
push
scas
jge
push
jnp
mov
mov
cmp
jno
add
add
mov
mov
aad
pushf
pop
pusha
sbb
adc
mov
cmc
pop
loopne
sbb
movs
popf
pusha
shl
pop
xchg
ds
push
mov
mov
dec
mov
cld
in
cwde
loope
call
add
ins
jmp
adc
psrlq
xor
mov
je
ficomp
add
sti
mov
push
and
sbb
jecxz
xor
sub
cmps
adc
ds
mov
jmp
mov
adc
imul
and
call
add
icebp
ffreep
into
sbb
test
mov
xchg
add
push
cld
pop
jmp
cmp
std
(bad)
mov
mov
xchg
enter
ss
test
xor
add
push
push
sbb
jns
dec
call
inc
cmp
add
std
ret
add
lods
sbb
in
loopne
sub
push
and
cld
out
ins
inc
or
push
mov
lock
into
adc
and
mov
pushf
xor
mov
lea
mov
arpl
sbb
loopne
out
or
ss
outs
xor
adc
sti
ficom
aaa
mov
mov
adc
xor
sub
outs
test
nop
dec
or
sbb
jnp
das
in
xor
add
jbe
or
and
in
jg
and
pop
cli
jle
iret
rol
dec
movs
lock
cmp
jbe
rcl
mov
out
push
push
rol
idiv
movs
sbb
(bad)
push
push
pop
or
sbb
lea
fsubr
jg
rcl
jne
daa
jmp
aaa
sbb
dec
or
test
push
cmp
mov
xor
pop
data16
mov
loopne
push
aam
xchg
fwait
pushf
fs
int3
cld
xor
add
addr16
stos
out
aam
or
and
jmp
jecxz
xor
xor
add
jne
out
shr
pop
mov
sahf
jns
cmps
loop
cmp
iret
sub
push
loopne
pusha
mov
push
jb
test
pop
adc
and
mov
scas
nop
pop
cmps
cmp
pop
sti
xchg
(bad)
aam
loop
adc
dec
in
pushfw
push
sahf
sbb
push
std
push
pop
loopne
in
mov
lock
jnp
pop
xchg
adc
xchg
inc
outs
das
test
hlt
inc
adc
dec
gs
fiadd
outs
dec
das
sbb
jmp
add
jae
nop
loop
sbb
shl
mov
in
(bad)
sti
xor
movups
push
pop
dec
cwde
lock
sar
jmp
test
jl
sbb
cli
and
aas
(bad)
sti
ins
jmp
arpl
fsubr
outs
pushf
jp
in
nop
push
sbb
inc
jnp
in
jae
mov
adc
mov
and
or
scas
push
xchg
je
inc
xchg
cli
test
dec
adc
pop
jae
cmp
xlat
fmul
sub
cmp
xchg
adc
jl
(bad)
dec
aad
pop
loop
adc
xor
cmp
adc
mov
je
inc
xor
mov
loope
xor
jmp
lock
push
push
in
call
out
fcomp
sub
xchg
nop
cmp
lds
sbb
cmp
retf
xor
cli
ins
call
imul
cmc
ret
outs
add
(bad)
sbb
xor
mov
add
in
bound
movs
add
movs
in
imul
dec
repz
xor
mov
jmp
jae
inc
(bad)
imul
je
sbb
test
adc
imul
sbb
test
ja
fistp
fcomp
mov
std
cmp
in
imul
jmp
call
retf
add
loope
or
arpl
sbb
(bad)
in
inc
sahf
add
dec
and
lods
dec
sub
dec
or
adc
fstp
pop
cmc
xchg
call
movs
not
(bad)
out
retf
imul
cmp
cmps
pop
jne
into
movs
push
xor
pop
pusha
and
popa
mov
xlat
js
add
out
and
pop
inc
and
xor
mov
sub
cmp
or
xchg
fcomp
or
mov
mov
sbb
jmp
push
js
xchg
push
add
xchg
cmps
adc
jmp
jno
adc
movs
xor
push
jo
xchg
push
pop
movs
or
out
mov
std
adc
leave
(bad)
adc
xlat
push
xor
add
jmp
rcl
sub
or
div
loopne
je
das
stos
mov
adc
int3
and
mov
adc
loope
pushf
call
test
push
or
add
pop
dec
jne
lock
cdq
xchg
xchg
pop
cld
jns
mov
lds
jp
loope
adc
and
js
push
gs
adc
ret
xor
rcl
or
adc
nop
fdiv
setp
jl
push
loopne
sub
adc
in
je
and
out
pop
jge
adc
fild
jp
shr
nop
push
loopne
pusha
pop
inc
pop
aam
jne
ins
loopne
sbb
test
lods
adc
jp
push
dec
add
add
dec
inc
icebp
ja
sub
jne
out
loopne
out
out
cmp
shr
aam
pop
ins
add
in
inc
cmp
mov
xor
or
jae
xor
cmps
sar
sti
cmps
fucomi
and
jle
push
dec
pop
daa
sbb
cld
ins
in
repnz
int3
adc
cmp
jmp
xchg
cld
retf
ins
repnz
and
(bad)
outs
movs
jl
sub
(bad)
ficomp
adc
call
mov
dec
adc
test
jns
pop
sti
es
or
int
rcr
leave
je
clc
repnz
inc
jnp
xchg
sbb
and
out
add
imul
ins
jl
pop
in
mov
das
popf
pop
cmp
cmp
xlat
adc
or
or
outs
mov
xchg
and
xchg
inc
jb
pop
inc
mov
jmp
jecxz
mov
push
jge
addr16
hlt
sbb
pushf
sbb
sti
(bad)
and
xchg
pop
arpl
nop
shl
(bad)
in
push
pop
mov
out
jo
or
dec
dec
sahf
sub
push
in
pop
std
or
adc
mov
sbb
loop
and
inc
mov
call
loopne
mov
inc
sti
and
stc
jp
inc
int3
cmp
(bad)
adc
push
jne
je
push
pop
(bad)
cdq
loope
cwde
mov
cli
xor
xlat
jle
test
adc
xor
xchg
jno
sbb
dec
bound
sub
cmp
push
hlt
das
mov
dec
gs
cld
pop
ret
jge
sub
ins
cmp
int3
pushf
sbb
inc
adc
and
mov
cwde
push
cli
cwde
and
loope
push
es
cmps
jp
and
sbb
cld
cmp
cld
retf
jmp
dec
add
aas
jecxz
hlt
retf
pop
movs
add
pop
and
jl
mov
cdq
movs
ja
push
push
jmp
jmp
xchg
cld
jl
jmp
mov
out
fiadd
scas
push
lods
mov
dec
lods
adc
int
test
xchg
ds
test
dec
mov
mov
xchg
shl
dec
adc
sar
inc
dec
inc
and
or
xor
mov
mov
fmulp
ror
add
pop
les
pop
call
fstp
stc
mov
sti
jge
nop
sbb
out
in
stc
imul
lods
out
xlat
mov
xchg
pop
pop
xchg
add
cmp
dec
sbb
and
dec
adc
addr16
sub
int3
or
aam
in
retf
jno
call
into
aam
mov
ins
mov
and
xchg
pushf
data16
movs
jbe
shl
pop
clc
adc
jno
sbb
into
add
mov
aad
loope
test
push
icebp
out
sbb
imul
sub
ss
in
rcl
sti
push
or
movs
inc
ror
shl
add
stos
or
mov
stos
jbe
xchg
clc
popa
fbstp
bound
xchg
xchg
loopne
dec
aad
hlt
dec
aaa
in
out
lock
jge
xchg
cld
pop
or
shl
jle
cmp
in
aad
jl
pop
sub
aam
and
or
xor
mov
xor
and
lock
in
mov
jg
sub
push
das
and
bound
arpl
xchg
out
add
adc
sub
pop
outs
inc
jl
in
xchg
mov
in
in
(bad)
ret
jg
stos
test
aad
push
out
imul
ja
retf
int3
pop
or
pusha
cmp
mov
xor
cwde
adc
mov
adc
pop
sbb
xor
addr16
ins
sbb
movs
out
inc
(bad)
xchg
dec
xchg
loop
pop
lds
inc
mov
cli
sbb
xor
cmps
push
jl
inc
test
mov
inc
hlt
mov
add
or
aam
pop
les
jmp
loopne
dec
cmp
or
sbb
push
les
int3
jae
(bad)
std
fcomp
test
call
and
lods
cmp
cmp
dec
xchg
data16
xor
stos
sbb
test
jnp
dec
inc
call
push
ins
retf
sbb
enter
arpl
sbb
sub
ds
push
out
add
jmp
inc
push
mov
aam
jp
or
lds
loopne
loop
pop
or
in
adc
stc
addr16
adc
rol
jecxz
out
push
pop
(bad)
xor
inc
shr
mov
retf
jno
jmp
int
xchg
mov
loope
dec
es
pop
lds
arpl
in
and
imul
push
and
outs
adc
inc
sbb
push
adc
cmp
mov
xchg
cli
repnz
int3
mov
outs
gs
push
out
adc
rol
push
sbb
ds
or
xchg
pop
jl
cmp
jbe
jecxz
jmp
jg
xor
call
xchg
pushf
jg
add
push
sbb
fidiv
jno
loope
stos
aam
jle
adc
sub
push
fbld
fcom
sbb
push
movs
sub
rcl
clc
(bad)
sbb
mov
retf
or
(bad)
xchg
sbb
leave
adc
(bad)
dec
push
loope
movd
xchg
sbb
add
outs
call
stos
hlt
enter
in
je
aad
mov
ficom
push
sbb
push
pop
jne
rol
loope
adc
mov
pop
inc
adc
retf
pop
out
cmp
in
sbb
adc
popf
dec
mov
adc
sub
imul
fs
pop
outs
and
jmp
adc
xchg
(bad)
and
outs
mov
mov
adc
mov
out
bound
pop
xchg
push
fwait
or
sbb
pop
push
fst
es
cmp
xor
mov
mov
or
adc
jb
xor
icebp
in
xchg
cmp
mov
mov
cmp
hlt
sub
adc
sbb
push
call
cmc
jmp
pop
in
jecxz
jnp
paddq
daa
shr
inc
lds
jmp
mov
or
mov
xchg
iret
xor
cld
adc
cmp
jmp
jmp
adc
js
inc
xchg
adc
xchg
(bad)
mov
adc
xchg
pushf
add
mov
cdq
les
into
pop
fcmovnbe
cmp
hlt
(bad)
adc
scas
fdiv
sub
pop
sub
mov
popf
or
push
adc
or
sti
sbb
jne
stos
gs
adc
and
retf
ins
adc
adc
inc
(bad)
repz
mov
adc
mov
and
cmp
pop
pushf
pop
hlt
cwde
adc
xchg
mov
ins
dec
add
adc
dec
gs
jle
pop
xchg
sti
lods
mov
out
push
adc
addr16
jo
jmp
xchg
rcl
ja
xchg
mov
cmp
fcom
pop
scas
inc
mov
sbb
cmp
xor
in
fst
xchg
xlat
cmp
out
adc
push
aas
jns
ret
ja
arpl
adc
jno
mov
fld
fcom
mov
aam
adc
xor
sub
sahf
jbe
icebp
ret
repnz
adc
add
cmps
xor
int
lods
mov
ror
fistp
shl
stc
sub
sub
xchg
push
push
sub
jl
push
push
es
mov
je
push
sub
repz
jne
int3
faddp
jmp
rol
xchg
inc
retf
(bad)
call
rol
ret
pop
pop
out
adc
xchg
stos
leave
cmps
mov
adc
sub
mov
lock
adc
and
inc
mov
cmps
leave
mov
xchg
loop
cmp
push
pop
(bad)
dec
xchg
in
sbb
push
add
lea
out
mov
push
ds
adc
enter
push
retf
movs
jge
sub
ins
mov
mov
jo
cmps
cmp
shl
aam
adc
std
mov
repnz
in
popf
adc
adc
cld
push
and
mov
dec
cmp
test
outs
inc
adc
fwait
clc
in
call
cmc
rcl
int
loop
fldcw
xchg
mov
pop
xor
adc
cld
ret
inc
loop
adc
or
mov
ror
les
in
fsub
cmps
sub
data16
add
mov
mov
add
out
hlt
cwde
pop
adc
xchg
nop
push
inc
inc
lods
and
push
push
cmp
adc
push
test
imul
cmp
(bad)
clc
jl
add
adc
mov
ja
movs
sahf
inc
pushf
addr16
cmp
cwde
mov
outs
pop
adc
(bad)
lock
lds
data16
in
enter
lods
adc
mov
sbb
mov
xchg
retf
mov
ror
adc
sbb
neg
cmps
adc
adc
mov
mov
sub
pop
in
push
mov
jg
xchg
push
imul
call
pop
mov
inc
ficomp
adc
(bad)
mov
scas
inc
ficomp
push
fdiv
push
mov
adc
cs
outs
sub
dec
mov
iret
xor
jns
mov
push
test
addr16
(bad)
mov
push
dec
in
xlat
ror
jo
push
imul
jmp
adc
push
fidivr
sbb
rcr
sub
ds
mov
cmp
xchg
aas
shl
enter
fist
fldenv
cmp
lock
push
pop
mov
pusha
adc
andnps
mov
adc
lods
adc
pop
ds
jae
scas
mov
push
push
adc
dec
ja
jmp
mov
pop
in
xor
xchg
cs
in
sbb
loopne
adc
and
adc
jge
repz
std
sbb
add
lock
adc
aas
sbb
into
cdq
call
jnp
sbb
inc
adc
sbb
adc
test
stc
jp
movs
adc
cmp
dec
jbe
pop
and
jmp
inc
(bad)
outs
add
scas
or
fs
iret
sahf
jge
push
ret
out
cmp
adc
test
hlt
or
stos
dec
and
xchg
not
adc
xchg
mov
adc
xor
lds
mov
cmc
nop
push
xchg
in
xchg
shr
xlat
shl
dec
es
adc
fadd
in
xchg
cs
and
sti
(bad)
dec
adc
cli
jmp
cmc
and
pop
imul
(bad)
fdiv
leave
adc
or
sbb
(bad)
mov
imul
scas
adc
jmp
jle
jns
sbb
int3
sbb
or
sbb
mov
aam
hlt
leave
inc
inc
ja
or
test
loope
push
arpl
mov
dec
nop
pusha
xor
adc
mov
neg
call
jo
or
mov
aam
fimul
test
xchg
pop
adc
mov
inc
xchg
pop
mov
hlt
(bad)
retf
sahf
jmp
mov
cmps
icebp
adc
xor
add
sbb
inc
enter
lods
and
vpshad
adc
push
in
stc
push
lods
ds
adc
jnp
push
mov
dec
push
inc
nop
push
sub
inc
dec
fxtract
adc
push
add
xor
jmp
stos
lock
mov
adc
pusha
sub
jl
nop
out
adc
push
in
sbb
adc
mov
and
mov
adc
cmps
or
xchg
mov
add
dec
mov
xchg
mov
adc
cld
xchg
sub
xchg
adc
add
fnstcw
imul
or
mov
add
xchg
(bad)
imul
cmps
adc
into
xchg
mov
push
xor
fidiv
nop
adc
lds
popf
and
pop
test
add
pop
push
test
adc
add
push
jno
xchg
sub
test
inc
mov
gs
inc
imul
ins
xchg
push
outs
mov
mov
mov
js
adc
imul
sub
jmp
adc
push
pop
mov
push
xchg
push
adc
push
adc
adc
dec
push
mov
or
pushf
stc
imul
mov
adc
push
mov
adc
adc
mov
arpl
adc
in
in
push
stos
movs
repz
loopne
push
push
orps
xor
xchg
shr
adc
or
or
bound
dec
and
lds
jmp
xor
and
mov
sbb
retf
dec
jle
mov
pop
popf
inc
je
rcl
xor
data16
dec
dec
popa
mov
adc
adc
call
adc
lock
cli
add
push
outs
cdq
mov
xor
jne
mov
stos
or
fimul
enter
in
ins
add
ins
jp
hlt
test
mov
adc
mov
sbb
std
adc
lods
sub
(bad)
lahf
sbb
leave
xchg
dec
ins
retf
sub
sti
pop
and
dec
fdivr
adc
call
(bad)
adc
repnz
dec
xlat
dec
test
(bad)
mov
aad
rol
ror
adc
jg
cmp
sbb
push
pop
ins
push
and
arpl
imul
scas
adc
or
jl
adc
clc
movs
inc
xchg
jge
loopne
out
les
push
(bad)
push
lods
adc
mov
arpl
cli
pop
adc
adc
or
lods
out
adc
je
add
mov
pop
leave
clc
stc
dec
and
ins
xor
cwde
clc
fmul
dec
cdq
adc
adc
fst
aam
jae
dec
lock
pop
and
inc
call
aas
or
into
pop
adc
push
sub
cmp
sbb
outs
rcl
mov
push
call
inc
les
xchg
out
adc
leave
xlat
into
xor
adc
pop
rcl
fidivr
in
adc
or
lods
xor
out
adc
cmp
ja
jmp
push
es
adc
push
xchg
(bad)
xchg
xchg
xchg
fldenv
add
inc
movs
mov
add
inc
jp
adc
or
rcr
in
adc
xor
mov
adc
dec
mov
sub
int
adc
hlt
add
xchg
push
mov
call
and
sar
(bad)
lea
fist
sbb
int
push
mov
fiadd
cmp
push
add
mov
push
inc
mov
in
ja
neg
sbb
cdq
bound
jns
pushf
or
stos
pop
jl
jbe
int3
ja
ss
ins
xor
lock
xchg
cmp
xor
loop
cld
fst
inc
mov
je
call
mov
mov
aas
adc
jmp
fmul
bound
pop
hlt
cs
inc
out
ror
test
mov
add
push
push
mov
mov
cmp
add
ins
mov
lods
test
adc
jmp
add
adc
lahf
ja
stc
inc
add
cmp
xchg
(bad)
lds
in
cmp
push
jb
jno
push
popf
push
inc
inc
adc
mov
xchg
cmp
(bad)
xchg
mov
mov
xor
xor
adc
push
leave
dec
push
cmp
jmp
adc
cmp
adc
aaa
adc
pop
test
xchg
aam
add
push
sub
mov
cpuid
mov
mov
lea
js
outs
and
imul
enter
add
push
dec
aam
out
std
mov
xor
cmps
mov
in
cmps
adc
and
jae
arpl
and
cld
fcom
fwait
mov
mov
in
test
nop
pop
mov
sbb
inc
ins
add
adc
shl
xchg
adc
add
aam
leave
inc
pop
add
push
ret
mov
add
les
aaa
dec
xor
cmp
icebp
sub
pop
xchg
adc
in
xchg
fsubr
inc
popf
in
and
sar
adc
outs
push
pop
adc
add
push
xchg
unpcklps
imul
inc
(bad)
cld
push
in
fwait
cdq
inc
jge
movs
ficomp
adc
lahf
retf
int
scas
ins
fist
mov
xor
clc
addr16
xor
(bad)
jp
mov
daa
fsub
imul
xchg
dec
push
sub
add
mov
adc
in
mov
(bad)
rcl
int
das
mov
adc
mov
adc
sbb
adc
call
sub
add
mul
pop
sub
sbb
jo
dec
or
movs
xchg
inc
(bad)
xor
adc
pop
mov
mov
rcl
jmp
jae
pop
push
cmp
pop
movs
add
xchg
fimul
jle
xchg
nop
inc
add
cmp
inc
adc
repnz
jno
and
xor
mov
push
(bad)
fld
hlt
jns
sub
dec
mov
xor
jns
push
in
dec
call
push
inc
push
jmp
jne
aam
retf
xlat
ret
(bad)
aas
arpl
inc
ret
xchg
sahf
aam
int3
adc
adc
and
add
pop
jmp
sub
dec
loope
mov
cmp
mov
jmp
adc
xchg
pop
adc
test
pushf
xchg
adc
stos
inc
dec
push
or
pusha
push
mov
xor
and
or
int3
mov
cdq
je
lea
and
dec
loope
sub
mov
mov
mov
push
jmp
or
aas
adc
loop
outs
and
clc
xor
adc
stc
repz
inc
jb
jne
xchg
(bad)
rcl
adc
ss
aas
inc
outs
in
adc
movs
sub
and
adc
div
push
bound
les
adc
pop
fiadd
jbe
or
dec
out
shl
adc
inc
enter
outs
push
sbb
stc
or
adc
iret
dec
xchg
push
adc
push
fwait
cmp
sbb
test
pusha
and
fld
pushf
stos
adc
mov
xor
mov
xchg
sbb
add
retf
fwait
nop
fsubr
rcl
bound
std
adc
cli
adc
add
pop
cli
call
or
and
(bad)
and
adc
cli
sbb
test
icebp
adc
and
imul
(bad)
(bad)
and
xor
jb
add
adc
cmp
loop
je
int
dec
cmp
adc
scas
jmp
aaa
jle
int3
loop
sbb
push
pusha
and
pop
jne
push
jo
xchg
adc
sbb
mov
mov
mov
xchg
lock
dec
adc
mov
in
sbb
mov
imul
add
jmp
or
fucomip
je
xor
test
xchg
es
cmps
pop
xchg
out
test
pop
ror
popf
add
adc
movs
scas
outs
icebp
adc
and
cmp
repnz
xor
and
lods
xor
jbe
adc
(bad)
sti
loop
jne
adc
push
xchg
dec
adc
push
sbb
pusha
push
xchg
push
out
push
pushf
dec
lahf
inc
adc
bound
ror
adc
idiv
xchg
xor
addr16
adc
es
sbb
mov
push
je
(bad)
push
test
out
ret
or
mov
imul
jg
mov
je
sbb
or
mov
rcl
lods
push
enter
adc
push
js
fsubr
dec
(bad)
cli
jb
std
sub
lods
inc
outs
cmp
push
xor
in
dec
outs
(bad)
fs
hlt
sub
adc
in
cmp
aam
jnp
jmp
pop
xchg
mov
mov
fisub
add
mov
adc
inc
jae
and
xlat
repnz
ja
popf
adc
xor
cld
adc
jns
test
enter
test
imul
adc
dec
ins
add
adc
dec
xchg
adc
mov
pop
fs
sbb
ret
adc
outs
sub
sub
inc
fwait
cmp
ins
push
jg
repz
sub
in
adc
loop
push
fs
jo
or
mov
adc
push
cmp
mov
mov
dec
or
push
int
cmp
jmp
fs
in
ins
sbb
rcl
dec
add
clc
adc
jo
sbb
sub
adc
imul
cmp
movs
popf
adc
shl
hlt
fs
loopne
daa
dec
xchg
mov
neg
mov
xchg
adc
or
sahf
sub
xor
inc
and
or
adc
out
xchg
mov
in
retf
inc
les
push
mov
cmc
jge
xor
push
mul
xchg
out
data16
loopne
cmp
cmp
mov
sub
mov
jg
xchg
inc
push
adc
scas
shr
xchg
mov
mov
adc
(bad)
or
loopne
fadd
mov
mov
sbb
lahf
jno
rcl
add
adc
and
ret
adc
sub
xor
adc
nop
push
pop
test
call
stos
mov
lahf
adc
aad
mov
sbb
jae
leave
(bad)
xchg
ror
shl
lock
or
adc
test
fdiv
pop
cmp
icebp
dec
push
out
int3
fstp
adc
cmp
pop
movs
adc
gs
fs
fisubr
ss
fdiv
xchg
in
push
mov
shl
(bad)
out
arpl
and
push
jmp
(bad)
aam
lods
stc
(bad)
jmp
mov
jmp
(bad)
and
push
jmp
leave
dec
xor
mov
xor
xchg
test
inc
or
xor
sub
out
sbb
jl
mov
aas
jge
adc
into
shl
int
rcl
ret
sbb
mov
sbb
xchg
les
fist
adc
aaa
xor
sbb
rcr
std
jg
push
(bad)
xor
push
in
test
icebp
sub
out
stc
lock
cmp
in
int3
lods
test
jle
imul
call
push
movs
cli
xchg
rol
seta
call
jmp
jmp
push
mov
sub
lods
rcl
bound
aam
shl
pop
clc
sbb
sub
jmp
and
adc
jmp
arpl
adc
dec
shl
out
lds
adc
repz
and
inc
retf
xchg
pop
adc
sahf
pop
(bad)
ins
pop
icebp
(bad)
adc
in
cmps
jle
push
cmc
add
sbb
jb
dec
inc
mov
mov
jne
clc
sbb
ja
adc
dec
out
sti
sahf
loope
in
in
lock
loopne
jnp
adc
aam
cmp
or
repz
mov
jmp
fcom
xor
fisttp
scas
or
icebp
or
push
test
ss
icebp
mov
enter
jo
add
hlt
mov
lods
xchg
adc
sbb
retf
ret
ror
fcompp
adc
stc
jbe
mov
push
cld
inc
das
xchg
push
sbb
mov
pushf
adc
mov
int3
inc
dec
pop
lds
popf
faddp
push
dec
push
push
adc
mov
out
and
add
fild
dec
es
push
cwde
leave
jecxz
cdq
adc
jmp
stc
mov
mov
aam
add
mov
in
jp
sahf
jmp
and
inc
adc
loopne
dec
stc
jecxz
in
idiv
mov
aam
aad
repz
mov
adc
or
lock
push
fnstcw
sub
or
adc
cmps
xor
icebp
sbb
sub
xchg
out
add
je
mov
out
dec
lods
cmc
repnz
in
les
and
ss
dec
aam
xchg
cwde
mov
xchg
adc
sbb
mov
push
inc
and
mov
jp
mov
jmp
and
scas
mov
ret
dec
cmps
(bad)
xchg
jb
daa
ins
(bad)
jl
loope
xchg
xor
in
xchg
mov
out
rol
out
pop
sub
cmps
stc
inc
shl
xchg
ins
mov
sub
adc
pop
mov
mov
push
and
xchg
sbb
fs
mov
rcl
cmp
jmp
clc
xchg
xor
adc
lds
mov
cmp
into
xchg
add
adc
mov
cmp
sbb
inc
dec
mov
stos
and
inc
xchg
stc
in
aam
adc
leave
mov
lods
cdq
pusha
adc
enter
mov
push
adc
mov
xchg
cmc
mov
push
arpl
push
sar
adc
fld
fsub
sbb
xchg
xor
clc
xor
mov
jae
dec
mov
mov
push
push
aad
sbb
pop
xlat
hlt
inc
pop
jbe
hlt
je
test
add
adc
call
mov
adc
xchg
jno
dec
es
xor
push
mov
adc
push
sbb
dec
lea
(bad)
movs
xor
push
inc
cmp
sahf
out
jne
(bad)
daa
stos
sub
push
jmp
jecxz
aam
mov
test
adc
xchg
(bad)
mov
je
adc
inc
or
adc
sub
cmp
sbb
clc
jns
push
movs
dec
adc
push
xor
dec
fwait
sbb
aaa
jmp
loop
das
movs
div
adc
dec
pusha
fwait
daa
dec
dec
sti
adc
jl
mov
loopne
in
scas
aas
arpl
add
mov
sub
mov
out
scas
adc
pop
xchg
test
dec
loopne
clc
push
mov
pushf
mov
cmps
sbb
cmp
mov
xor
push
mov
adc
daa
(bad)
inc
or
jb
aas
mov
sbb
in
test
mov
xor
into
clc
and
xchg
sub
push
mov
adc
imul
sub
pop
test
sbb
les
(bad)
and
add
repz
pop
xor
loopne
rcl
or
ins
jle
je
fidiv
in
mov
xchg
pop
adc
cmp
xor
adc
jb
add
shr
mov
(bad)
or
or
repnz
pop
xchg
push
cmp
shr
cld
stos
fs
sbb
pop
call
movs
jge
or
repnz
js
call
adc
cli
es
pop
lds
and
(bad)
mov
test
adc
adc
and
test
loop
(bad)
adc
int
or
pop
out
fstp
mov
sbb
cmc
adc
clc
popa
aas
dec
sub
pop
arpl
cld
not
push
mov
xor
loope
adc
lock
mov
adc
push
xor
pop
fucomp
jge
adc
out
les
jmp
rcl
popa
pop
sbb
cmps
inc
adc
test
sub
xor
addr16
mov
xchg
pop
inc
or
mov
jl
aam
mov
cs
psubw
int3
js
(bad)
in
pop
pop
cld
fimul
pop
push
std
and
lods
push
sub
shr
cmp
push
inc
push
mov
fwait
sub
jmp
push
dec
adc
nop
xchg
inc
add
xchg
xchg
scas
mov
into
adc
push
out
loopne
push
adc
push
pop
mov
adc
cld
push
lds
and
push
mov
bound
dec
jbe
rcr
cmpxchg
sbb
and
mov
or
sub
outs
jecxz
xchg
gs
adc
sub
imul
xchg
retf
ins
xor
mov
cmp
aaa
mov
jno
cmps
ret
lahf
adc
mov
(bad)
sbb
adc
sub
cld
addr16
pop
mov
dec
jecxz
adc
mov
xchg
std
mov
in
adc
adc
int3
xchg
adc
mov
das
mov
jle
inc
pop
mov
xor
add
or
and
push
mov
mov
jle
xchg
xor
push
jae
sub
sbb
mov
mov
sbb
pop
add
mov
in
sar
jmp
loop
adc
inc
in
scas
inc
sub
pusha
call
or
push
jp
mov
adc
movs
dec
xchg
push
lods
and
not
pop
adc
ins
xlat
hlt
mov
mov
icebp
add
dec
pop
ror
in
mov
push
mov
adc
cdq
adc
lahf
mov
fs
retf
pop
shl
loope
div
popa
cmps
adc
je
inc
adc
pop
fcomp
and
popa
int3
pop
(bad)
jo
retf
xor
mov
sbb
mov
lea
icebp
sbb
xchg
fimul
movs
int
imul
adc
inc
fidivr
mov
aad
inc
adc
dec
mov
ds
jno
ffreep
add
push
cwde
ret
fsubr
dec
cmp
add
les
inc
jno
sub
xchg
stos
pop
xor
shr
pop
adc
dec
aad
push
cld
aam
adc
lods
xlat
gs
(bad)
pop
adc
jb
inc
movs
dec
shr
add
adc
jge
loope
xchg
ins
sbb
adc
outs
call
mov
cmp
xor
(bad)
adc
(bad)
movs
iret
pop
dec
fsub
sbb
add
push
aam
jb
cdq
adc
sbb
push
arpl
adc
and
fdiv
xchg
scas
lods
(bad)
shr
clc
arpl
adc
and
push
pop
add
inc
sub
mov
(bad)
retf
mov
mov
adc
ss
and
es
sub
and
(bad)
xor
adc
adc
addr16
dec
jb
sbb
pop
aad
movs
or
sbb
xlat
rcr
into
dec
push
sbb
sbb
lock
mov
fcomp
test
and
(bad)
pop
adc
add
add
sbb
stc
dec
sbb
xchg
xor
iret
imul
adc
xchg
cmp
bound
jb
or
push
stos
jmp
push
xchg
mov
arpl
jmp
add
xchg
sbb
xchg
shl
rcl
cmps
xchg
std
pop
lea
cmps
pop
sub
cs
add
out
rcr
clc
jmp
push
sbb
adc
test
popa
mov
cwde
dec
(bad)
sub
or
mov
jae
ds
push
call
in
outs
loop
in
int
iret
adc
ins
cmp
or
cmps
jle
mov
arpl
sahf
sbb
xor
adc
jnp
dec
push
inc
cmps
or
xchg
stos
jne
xchg
icebp
hlt
in
ret
ja
push
jecxz
adc
add
pop
xchg
ins
test
inc
leave
xor
stc
cmps
fstp
add
fiadd
sar
and
jns
and
iret
jmp
fcom
sbb
fcmovnbe
lds
xor
inc
dec
push
inc
test
jmp
fcom
sbb
in
add
lods
mov
dec
push
adc
lods
nop
sbb
int3
cmc
dec
adc
(bad)
cdq
jbe
fisubr
nop
dec
dec
push
sub
add
push
xchg
mov
adc
loopne
into
add
les
inc
pushf
inc
ffree
out
je
mov
jecxz
(bad)
adc
adc
pushf
or
out
mov
test
dec
cmp
movs
out
outs
mov
lahf
adc
aaa
in
jnp
cmps
pop
adc
fs
push
lods
das
shl
adc
cwde
loopne
hlt
pop
jecxz
adc
and
adc
aaa
sub
dec
shr
push
adc
jmp
adc
push
push
(bad)
or
mov
std
adc
and
adc
mov
and
pop
ja
je
lods
and
adc
sub
push
xor
pusha
cld
movs
and
das
xor
popa
adc
jae
cbw
mov
mov
fmulp
adc
xor
sbb
es
test
mov
movs
add
je
xchg
adc
leave
dec
mov
fcomi
adc
lahf
dec
mov
repnz
mov
sbb
clc
sar
or
adc
lahf
adc
es
daa
push
rol
xor
mov
hlt
adc
pop
xor
ja
stc
jge
loope
bound
fwait
lahf
xchg
out
ret
mov
std
adc
mov
push
pop
adc
out
jp
or
nop
movs
mov
test
adc
adc
mov
mov
mov
push
mov
sub
cmp
fdivr
stos
in
adc
or
mov
cmc
enter
je
push
sub
fadd
popa
add
pop
ror
inc
sbb
mov
adc
pop
inc
push
jg
jae
push
push
jge
adc
daa
dec
(bad)
pop
rol
adc
rcr
cmps
les
out
mov
adc
mov
jno
adc
mov
push
(bad)
jbe
bound
xchg
ret
sbb
dec
jg
push
cmp
push
and
or
adc
out
xlat
stos
xor
mov
aad
mov
push
aam
adc
xlat
out
and
adc
mov
shr
and
mov
adc
cs
stos
inc
pop
hlt
mov
outs
xlat
xor
inc
mov
cmp
arpl
xor
jb
mov
add
xor
mov
adc
es
push
jmp
arpl
jns
adc
adc
or
enter
out
rcl
das
mov
pop
xchg
push
dec
or
pushf
sbb
push
adc
shl
fs
adc
add
sbb
jl
stos
repz
(bad)
call
push
sbb
push
mov
aas
lock
rcl
pop
popf
loope
sub
cmp
cmc
sbb
push
mov
call
dec
(bad)
retf
pop
sbb
stos
jae
fisubr
test
in
rcl
rcr
cmc
inc
and
adc
cmp
xlat
in
adc
adc
or
or
add
lock
cmp
mov
popf
imul
cmps
jb
xchg
push
std
xchg
push
xor
icebp
xchg
cld
or
pop
add
cmp
rcl
std
add
rol
cmp
rcr
adc
cmp
cs
movs
adc
or
fnstsw
dec
sbb
sbb
arpl
lods
dec
jl
adc
fld
and
pushf
shl
push
adc
(bad)
push
(bad)
adc
pop
and
and
cmp
and
psllw
sbb
sbb
jle
pushf
mov
cli
cmp
push
or
adc
cs
or
pop
xor
enter
addr16
adc
inc
sahf
out
leave
adc
loope
dec
add
jmp
sti
xor
fisub
fist
loop
dec
mov
cdq
hlt
jmp
fsub
inc
fistp
adc
stos
out
test
sub
inc
dec
and
cld
cmp
jmp
jecxz
lods
adc
sbb
test
(bad)
repnz
(bad)
ret
aam
or
in
sub
out
imul
adc
aam
and
add
sub
push
and
inc
and
scas
sar
cmp
or
xchg
adc
xchg
popa
dec
enter
mov
pushf
push
and
fistp
gs
out
dec
mov
mov
mov
or
adc
shl
cmps
pop
and
ret
ror
adc
stos
jecxz
mov
mov
lea
adc
into
outs
aad
jae
addr16
test
adc
pop
enter
in
or
int
retf
sub
mov
adc
leave
aaa
test
add
push
jmp
scas
fisubr
xchg
push
repnz
leave
sbb
cld
icebp
test
std
xchg
dec
jge
jo
and
adc
cwde
fxch
sub
sbb
imul
xchg
adc
sbb
jmp
adc
add
inc
add
and
xchg
or
mov
adc
fwait
(bad)
aad
cmp
adc
push
loop
jmp
(bad)
leave
push
jmp
push
cs
jns
movs
xor
jge
movs
pop
mov
fsubr
add
(bad)
fstp
retf
into
mov
ins
inc
aam
scas
xchg
lahf
xor
ins
adc
pop
int
mov
clc
cld
rcl
call
rcl
in
sbb
and
pop
push
ins
in
xchg
ja
sbb
mov
mov
adc
bndldx
push
push
in
loop
call
mov
daa
add
sbb
mov
or
retf
inc
push
sbb
jmp
pop
mov
mul
cli
addr16
adc
fsub
cmp
jo
cmp
xor
in
push
dec
mov
mov
pop
aaa
retf
mov
retf
add
add
in
jecxz
imul
xor
fs
fisubr
call
inc
data16
mov
adc
jno
sbb
lods
push
adc
nop
mov
adc
sbb
pop
jbe
push
inc
in
mov
xor
ret
stos
pushf
mov
adc
inc
lods
aad
adc
mov
out
push
xlat
pop
adc
call
inc
mov
call
adc
pop
xor
out
cmp
mov
mov
lds
adc
int
sahf
push
and
cmp
inc
repz
xchg
dec
and
js
daa
mov
push
xor
je
jae
mov
push
dec
mul
cdq
jno
and
xchg
(bad)
or
lds
push
hlt
out
adc
fidivr
pop
das
int3
mov
adc
adc
sbb
adc
xor
mov
adc
stc
addr16
fdivr
adc
mov
out
adc
imul
or
sub
fsubr
pop
sub
lock
adc
mov
adc
cdq
call
jb
les
or
inc
adc
std
ins
cli
rcr
push
adc
lock
in
xchg
(bad)
stos
or
pop
pop
push
in
mov
cmp
inc
sbb
push
call
stos
pushf
xchg
fcom
xchg
sub
or
xchg
clc
mov
xchg
add
jmp
nop
cld
adc
ja
xchg
inc
aaa
rol
imul
pop
fdivr
sub
cs
sbb
mov
jmp
adc
std
adc
fidivr
and
mov
out
rol
les
jg
outs
adc
push
ret
push
and
jb
scas
int
mov
ins
ss
and
nop
xchg
daa
jle
cli
cmc
sbb
sbb
or
movs
dec
das
pop
mov
xchg
push
xor
hlt
add
fs
pop
adc
test
inc
mov
loope
adc
ret
lock
jnp
mov
inc
daa
adc
mov
ret
cmp
jne
call
cmp
jmp
icebp
sub
adc
ss
pop
dec
fld
inc
or
ja
adc
ret
ss
out
adc
dec
xor
sbb
cmp
inc
mov
xchg
or
(bad)
xor
inc
gs
lds
sbb
(bad)
popf
enter
inc
push
dec
jmp
push
lds
jb
push
shl
inc
adc
jmp
pushf
mov
js
or
out
xchg
jbe
out
adc
mov
fild
push
add
or
sar
in
daa
xchg
cmp
mov
and
or
adc
cmp
adc
jns
mov
arpl
adc
repz
frstor
ror
iret
jp
outs
adc
add
(bad)
fstp
call
or
jmp
retf
xchg
jp
jno
mov
pop
dec
stc
aaa
mov
and
mov
adc
xor
cmp
in
popf
adc
jle
shl
mov
dec
and
test
cwde
(bad)
repnz
fwait
add
sbb
adc
add
and
push
test
mov
or
inc
pop
fcomi
ret
stos
and
add
retf
cmps
ins
rcl
jl
dec
xchg
sub
mov
test
lods
jmp
sbb
adc
jmp
dec
cld
push
in
dec
jne
adc
ret
push
push
movs
adc
jge
popf
arpl
adc
lahf
leave
(bad)
xchg
scas
add
dec
mov
out
clc
mov
mov
repnz
mov
adc
movs
inc
pop
inc
adc
push
jno
pop
xchg
enter
mov
aaa
sbb
aam
sbb
pop
or
adc
out
(bad)
mov
adc
scas
mov
or
out
push
or
cmp
sub
adc
in
ja
jns
leave
popa
sbb
xlat
jo
pushf
fs
js
mov
lock
pop
ror
scas
jg
mov
cmp
imul
adc
pop
pop
push
pop
mov
inc
into
cmp
out
push
and
inc
push
xor
mov
out
scas
in
ret
or
dec
mov
pop
movhps
pop
inc
adc
lods
jns
ins
fucomp
xchg
adc
xchg
outs
and
mov
pop
jl
cmp
das
xchg
xlat
sbb
sti
(bad)
and
icebp
mov
shr
mov
adc
adc
cmp
sbb
xor
outs
adc
test
(bad)
sub
mov
cmp
out
ss
jb
cmp
add
adc
popa
xor
sbb
push
adc
fmul
push
mov
int3
mov
xchg
cmp
mov
aas
adc
out
fwait
mov
mov
pop
mov
js
mov
sahf
push
dec
push
sub
repz
pop
in
(bad)
xor
cld
dec
and
in
sbb
adc
cmp
and
(bad)
xor
sub
jb
sbb
or
jl
fadd
out
and
in
into
adc
ficomp
int
jb
adc
jns
cmp
mov
xchg
test
xchg
add
pop
test
dec
jbe
imul
shl
sub
sub
xor
adc
or
inc
mov
cmps
push
push
popa
jmp
test
xor
aas
imul
cwde
xchg
push
(bad)
push
xchg
xor
ficom
xchg
mov
clc
stc
popf
adc
shl
test
rcr
adc
std
cdq
add
fsubr
in
adc
add
mov
jmp
hlt
js
ss
sahf
adc
cli
xchg
sbb
outs
and
mov
ds
rcr
sbb
adc
jo
adc
and
add
inc
int
fst
ins
push
push
jbe
adc
int3
pop
jle
mov
sbb
addr16
or
mov
adc
or
clc
jne
ins
sbb
hlt
mov
mov
out
push
fs
lock
xor
jle
xor
push
xor
adc
in
jge
test
shr
and
adc
out
push
imul
repz
(bad)
inc
sahf
std
icebp
test
adc
in
xor
fbstp
adc
int3
sub
push
adc
enter
inc
jo
sbb
adc
inc
(bad)
mov
sbb
in
stc
mov
pusha
les
push
xchg
push
jbe
es
bound
inc
adc
xchg
icebp
rcr
pop
retf
repnz
jae
adc
mov
fiadd
adc
fbld
dec
pusha
aam
cmp
(bad)
sar
mov
adc
sbb
in
bound
adc
fs
rcl
push
lock
mov
aam
lea
adc
outs
(bad)
ficomp
ds
or
fstp
scas
bound
cmp
and
xchg
xor
mov
rep
aaa
rcl
ins
test
mov
push
push
mov
dec
pop
into
popf
sub
es
xchg
jl
mov
adc
inc
ss
je
or
xchg
adc
push
add
outs
adc
jnp
or
idiv
mov
pushf
xor
ret
jmp
mov
sub
or
adc
push
jmp
add
jae
jmp
test
sub
daa
jp
adc
(bad)
jmp
xor
pop
imul
(bad)
jge
adc
ficomp
fstp
scas
aas
(bad)
mov
shl
pop
call
jno
xchg
enter
and
sub
mov
cwde
daa
arpl
pop
ja
pop
cmp
mov
loopne
jns
bound
test
xor
(bad)
out
adc
int
loopne
and
pop
adc
addr16
test
jbe
pusha
mov
cmp
and
je
adc
dec
idiv
arpl
hlt
jmp
test
loope
mov
xchg
clc
repnz
pop
mov
test
push
jg
and
aam
mov
call
cwde
(bad)
(bad)
repnz
daa
rol
adc
pop
bound
stos
xchg
pop
jno
cdq
xchg
add
xchg
fwait
adc
pop
sub
dec
push
movs
add
jo
rcr
add
push
and
(bad)
stos
sahf
cdq
shl
jae
aad
mov
sbb
pop
or
retf
jmp
add
sub
push
xchg
imul
and
push
outs
xchg
adc
mov
aad
mov
cmp
jo
fist
pop
fwait
movs
sub
fs
sbb
daa
cs
enter
mov
test
adc
data16
sub
adc
out
xchg
inc
or
mov
push
jmp
adc
ins
call
adc
add
mov
xor
add
mov
jb
adc
in
cmp
or
enter
fcom
jb
adc
sbb
adc
xlat
call
inc
push
mov
sbb
mov
inc
retf
test
push
les
imul
mov
icebp
xchg
push
xor
jae
rcr
sub
daa
push
mov
or
or
dec
mov
push
adc
push
cmp
lock
imul
adc
sub
xchg
in
xchg
or
xchg
sub
xor
add
loop
(bad)
pop
adc
shl
xchg
adc
std
pop
(bad)
cli
fdiv
lods
hlt
pop
or
leave
out
stc
cmp
xchg
or
js
add
lods
add
dec
(bad)
sub
int
push
call
retf
mov
popa
in
pop
and
jae
xchg
les
int
(bad)
adc
ins
cmp
scas
inc
sahf
adc
jle
ret
sbb
sar
adc
sbb
sbb
sti
ja
xchg
mov
popf
push
adc
loope
sbb
adc
mov
mov
xchg
push
xchg
and
call
retf
gs
dec
jmp
fcom
mov
mov
and
sbb
mov
test
adc
test
js
fdiv
and
ret
xchg
cs
imul
push
mov
inc
xor
add
int3
rol
(bad)
adc
faddp
cmps
repnz
lods
adc
xchg
and
fisub
push
pop
adc
push
punpckhwd
push
pop
or
push
lds
adc
shl
adc
xchg
pop
mov
add
mov
pop
dec
sti
fist
cmp
leave
adc
mov
cmp
push
mov
and
aaa
and
jg
adc
cmps
fwait
ds
xchg
fcom
dec
shr
mov
loopne
sbb
retf
jecxz
test
inc
adc
mov
call
push
cmp
inc
sti
enter
or
retf
cs
in
(bad)
cdq
retf
aaa
lods
je
cmps
xchg
ins
add
mul
or
popf
add
dec
xor
and
leave
adc
test
clc
push
sbb
hlt
push
add
inc
inc
jecxz
xchg
adc
test
pushf
mov
stos
adc
inc
movs
jle
ret
je
adc
add
or
sbb
adc
dec
mov
out
mov
sub
lahf
jb
outs
int3
in
pop
adc
or
pop
adc
and
push
scas
int3
fld
adc
push
pop
in
adc
push
and
adc
pop
adc
jg
xor
or
xchg
sbb
clc
iret
push
jnp
shr
jge
dec
in
xor
or
clc
addr16
xchg
push
and
nop
sbb
mov
push
repnz
adc
(bad)
in
mov
(bad)
xchg
mov
xchg
ds
into
xchg
mov
adc
retf
push
arpl
int
inc
loop
je
popf
push
not
pop
adc
pop
jns
adc
adc
adc
loopne
mov
jg
sar
xchg
xor
mov
mov
imul
imul
xor
mov
popf
faddp
adc
les
ins
fist
nop
enter
sub
hlt
add
adc
or
lahf
ret
adc
sub
imul
bswap
retf
pop
jae
popf
jns
xor
adc
stos
fild
(bad)
test
sbb
aam
icebp
inc
xlat
or
gs
sub
and
aad
xchg
adc
ret
rcl
push
inc
adc
cmp
rcr
adc
mov
adc
imul
cmp
inc
fldenv
fs
or
(bad)
adc
push
rcr
push
mov
adc
pusha
popf
xchg
les
cmps
adc
and
mov
adc
lods
aam
aaa
out
dec
ret
aad
cwde
pop
je
inc
adc
dec
xor
adc
mov
int3
xor
adc
cs
and
or
cmp
fld
jno
repz
adc
jb
xchg
xchg
jl
inc
jae
ins
adc
pop
sub
adc
jb
test
mov
in
ds
hlt
adc
les
inc
jne
out
adc
jbe
call
push
cwde
(bad)
nop
inc
dec
xchg
adc
pop
or
adc
or
cmc
retf
fist
push
cld
sub
cmp
in
adc
xlat
sub
jno
out
xchg
cmp
iret
xchg
adc
push
jg
data16
in
add
test
sti
sar
int
shl
push
pushf
fmul
sbb
pop
addr16
cs
adc
lea
add
cdq
cli
movs
call
and
out
out
mov
daa
(bad)
mov
add
and
mov
and
add
sbb
in
xor
inc
cld
jle
jge
lods
sbb
aam
or
or
and
xor
jnp
cmp
and
outs
jnp
out
std
push
sub
cmp
hlt
lock
retf
mov
push
fwait
jbe
add
sub
cmp
mov
adc
mov
push
adc
fdivr
push
fcom
outs
fstp
leave
div
sub
push
ret
test
movs
mov
into
icebp
adc
hlt
adc
adc
sbb
inc
retf
lods
adc
dec
(bad)
adc
adc
stc
fld
push
sub
fcomp
sbb
in
push
mov
test
aas
ins
push
push
adc
fidivr
rcl
fist
inc
cwde
xchg
lock
adc
xchg
sub
popa
adc
pushf
cmp
pop
(bad)
dec
adc
out
jmp
mov
into
mov
jae
les
push
daa
sub
cmp
adc
cmps
je
pop
xchg
mov
ja
mov
xor
add
inc
dec
mov
adc
mov
ja
cmps
pop
movs
jmp
adc
mov
inc
loop
adc
xor
retf
sbb
ins
adc
sbb
adc
in
cmps
mov
adc
shl
call
dec
xchg
test
cld
fst
clc
ds
cdq
xlat
arpl
cwde
in
(bad)
fwait
push
adc
push
sbb
jge
inc
xor
fiadd
not
adc
jne
inc
jno
ret
mov
cmc
dec
inc
ins
sub
in
mov
cdq
sahf
sti
cdq
push
sub
mov
loop
mov
cmp
and
fs
adc
xor
into
push
adc
add
nop
les
imul
fld
aaa
pop
lods
jmp
lahf
xchg
mov
scas
stc
add
arpl
clc
pop
aas
sub
mov
add
jp
xchg
fxam
xor
xlat
movs
gs
addr16
adc
mov
fnsave
test
(bad)
(bad)
jp
dec
adc
out
in
jg
outs
das
adc
out
(bad)
push
(bad)
sbb
adc
aas
mov
retf
popa
setl
adc
call
inc
je
movs
add
mul
data16
pop
popa
bound
xor
push
mov
sbb
jmp
xchg
jg
lock
push
and
push
ret
pop
or
pusha
rcr
or
cmp
sbb
adc
inc
leave
test
xor
jno
and
cmp
ret
mov
jecxz
sbb
pop
and
outs
adc
inc
or
jo
stos
adc
dec
das
jmp
jno
aam
int3
repnz
adc
jg
(bad)
sbb
and
jl
shr
mov
adc
push
ror
jecxz
or
pop
retf
adc
or
adc
jge
adc
add
push
cmp
adc
outs
push
in
fs
fsubr
daa
and
adc
scas
add
je
pusha
ficom
adc
push
gs
and
std
xchg
dec
mov
adc
xlat
mov
dec
adc
mov
push
xchg
test
mov
adc
xor
popa
lahf
mov
inc
pop
adc
daa
sbb
sahf
pop
push
sbb
test
repz
lock
adc
ret
mov
add
mov
retf
add
dec
cmp
sbb
fsubr
adc
mov
add
pop
les
push
jbe
push
jge
xchg
test
pop
stos
xor
cmp
mov
(bad)
ror
jmp
loope
cmps
cmp
xor
add
adc
xchg
fnstcw
or
cmp
xchg
push
or
cdq
pop
nop
mov
sbb
adc
scas
daa
sar
fscale
adc
(bad)
cmp
mov
add
cwde
cs
xor
sar
mov
adc
les
pop
test
adc
repnz
and
sub
out
inc
pop
adc
adc
adc
and
push
mov
fxch
xchg
adc
ins
add
scas
or
and
cld
cmp
not
loopne
arpl
cmp
imul
jne
test
hlt
pusha
cs
and
xchg
add
mov
adc
(bad)
lock
daa
mov
adc
sub
cwde
ret
aam
fimul
cmp
enter
dec
fwait
mov
(bad)
hlt
jmp
fcomp
repnz
adc
xchg
call
fs
pop
xor
push
push
mov
and
pop
inc
add
in
sub
xchg
hlt
mov
add
rcl
push
(bad)
out
xor
faddp
or
(bad)
jns
push
or
push
sub
in
ins
push
push
push
mov
push
jle
adc
inc
es
jb
ins
rcl
or
xchg
and
and
mov
jmp
cmp
leave
out
daa
sub
inc
dec
test
cmp
sbb
mov
adc
cmp
outs
mov
sub
xchg
xchg
rol
enter
loopne
or
jecxz
pop
adc
mov
xchg
bound
pop
and
outs
sbb
jmp
enter
dec
int
hlt
adc
xchg
adc
xor
fstp
adc
aaa
into
call
adc
mov
fsub
aam
repnz
push
ret
and
mov
pop
xor
test
loop
popf
sbb
fst
jge
in
xor
xchg
add
idiv
adc
mov
inc
pop
inc
pop
(bad)
push
hlt
popf
sbb
mov
adc
mov
mov
mov
mov
dec
mov
into
sub
fwait
jmp
push
push
jmp
xchg
ss
adc
jne
mov
mov
jmp
in
add
push
cs
xchg
push
sbb
out
pop
adc
push
add
sbb
stc
test
repz
xchg
hlt
jp
adc
movs
shr
shl
cmp
push
push
std
cli
loope
in
test
mov
xchg
inc
bound
sbb
in
pushf
mov
dec
pop
or
call
into
jb
retf
sbb
mov
aam
xor
ins
idiv
lea
mov
popa
or
jo
adc
xor
cmp
rcr
mov
in
ins
jg
add
je
outs
imul
add
dec
rcr
ret
or
into
in
inc
add
jp
inc
add
retf
rcr
add
inc
mov
xor
(bad)
sub
(bad)
sub
xchg
jne
ins
btr
aaa
movs
aas
mov
lods
(bad)
xor
jmp
into
jns
xchg
sti
push
xor
adc
(bad)
mov
push
int
test
call
xchg
adc
adc
movs
je
sbb
inc
stos
retf
pop
aam
leave
outs
pop
loope
dec
dec
add
adc
cmp
xchg
cmp
(bad)
ins
jne
push
xor
cli
cdq
push
test
adc
push
nop
cs
mov
and
loope
je
xchg
lods
scas
dec
xor
adc
xlat
cmp
inc
xchg
in
push
pop
mov
adc
xchg
mov
scas
out
sahf
xor
(bad)
pop
int3
sbb
es
jmp
mov
(bad)
repz
adc
in
hlt
sbb
jl
xor
aas
add
dec
iret
aam
imul
jmp
sahf
dec
sbb
shr
call
pop
mov
push
pop
nop
sbb
adc
ret
inc
adc
push
scas
xor
in
sbb
(bad)
in
es
fmul
inc
les
adc
dec
jge
mov
shr
imul
push
cmp
jp
push
xchg
lock
(bad)
xchg
adc
fst
fsub
add
dec
xchg
nop
test
rcl
xchg
mov
rol
dec
fcom
dec
cld
cs
adc
or
mov
mov
sti
jp
leave
cli
into
ret
adc
gs
and
mov
jb
add
data16
mov
adc
lahf
fldenv
sbb
push
and
xchg
mov
dec
mov
int
pop
lods
int3
ins
pop
add
jle
into
in
sbb
add
push
adc
and
pop
dec
mov
push
jne
xor
repz
out
hlt
pop
adc
loope
xlat
lahf
lock
pusha
not
sub
in
enter
push
cmp
in
adc
mov
push
fdivr
in
fist
cmps
pop
mov
sbb
fwait
(bad)
pop
es
ss
stos
shl
sub
xor
adc
inc
cmp
fld
int3
and
(bad)
pop
faddp
scas
pop
shl
adc
aas
inc
les
or
lock
repnz
pop
push
mov
cld
inc
sete
shl
mov
xchg
das
in
xchg
mov
mov
mov
fild
jge
out
jl
std
leave
mov
lock
mov
mov
into
dec
mov
in
mov
cmps
push
mov
xchg
xchg
adc
(bad)
rcr
cmp
call
push
mov
jg
movs
adc
test
push
outs
or
sbb
ins
add
(bad)
hlt
pusha
enter
sub
in
add
sti
mov
hlt
sbb
aaa
mov
push
and
and
cmp
popf
repnz
adc
dec
jecxz
mov
dec
jmp
mov
jge
adc
jo
movs
xchg
and
into
adc
pop
add
cli
adc
sub
push
adc
sbb
movs
inc
in
adc
xchg
loop
push
stos
cdq
push
mov
sti
dec
xchg
adc
push
sahf
adc
in
push
xchg
jmp
xor
lock
(bad)
dec
cmp
xor
push
iret
ret
rcl
adc
mov
pop
pop
cmp
push
lods
adc
je
jo
iret
es
jbe
xchg
ficomp
xor
(bad)
aas
in
sub
icebp
addr16
stc
push
ret
cmp
adc
or
mov
bound
sti
es
mov
xchg
(bad)
sub
loopne
push
mov
inc
add
cmc
scas
mov
pop
xor
or
adc
xor
stc
xor
in
adc
movs
lock
pop
mov
push
mov
leave
xor
push
sub
imul
adc
mov
fisub
push
and
mov
test
jae
xchg
jno
push
mov
out
add
xchg
addr16
mov
xlat
rcr
loop
mov
paddsb
pop
je
cli
adc
pop
xchg
push
adc
pop
cmc
jae
rcr
aam
push
add
lea
sub
shl
leave
(bad)
out
or
gs
in
pop
xor
jmp
adc
dec
mov
adc
cli
cmp
scas
and
xlat
adc
daa
adc
out
lds
imul
and
pusha
sbb
mov
hlt
das
and
test
imul
adc
inc
sbb
test
xchg
dec
fcom
mov
cmp
mov
adc
mov
ret
popa
sub
and
jmp
adc
repz
and
pop
push
add
adc
loopne
adc
sub
into
jb
mov
(bad)
sbb
push
lds
movs
test
pop
dec
or
fcomp
jbe
jge
cmp
adc
add
add
(bad)
or
mov
sbb
js
ins
jp
test
je
imul
adc
stos
xchg
dec
ret
xchg
adc
jns
xchg
mov
adc
xchg
add
push
adc
nop
bound
pop
rcr
adc
es
fcomp
add
inc
pop
jb
adc
adc
dec
adc
sub
push
sti
sbb
adc
dec
sub
lahf
sub
push
cwde
out
loop
(bad)
push
adc
ficom
cmp
(bad)
xchg
sbb
fadd
int
int3
unpcklps
jne
out
idiv
push
sbb
mov
sbb
in
cmp
dec
std
in
or
test
hlt
stos
test
xor
sub
jecxz
and
cmc
or
mov
pop
xor
rcr
adc
xchg
cmp
push
mov
sti
mov
retf
jmp
fsubr
mov
fstp
cmp
push
mov
inc
jae
test
xchg
(bad)
cwde
sbb
mov
fadd
add
test
adc
cwde
aas
cdq
int3
mov
mov
pop
rol
sbb
sbb
mov
xor
push
or
(bad)
imul
push
mov
xor
icebp
adc
sbb
outs
mov
xchg
bound
xor
lods
(bad)
push
adc
call
inc
push
fldenv
in
jg
cmp
mov
jmp
push
adc
jo
in
adc
hlt
imul
scas
shr
scas
repz
adc
jmp
iret
lea
movs
and
outs
add
cwde
adc
adc
sahf
fst
sbb
fwait
jo
or
sbb
adc
ret
cmps
mov
test
adc
clc
fdivr
arpl
sub
jae
inc
repnz
mov
cld
ins
adc
push
add
push
dec
rcl
dec
stos
test
aam
adc
sbb
inc
aam
sbb
sbb
inc
lahf
clc
xchg
test
sbb
adc
inc
arpl
mov
cld
add
ins
fdiv
sub
dec
out
in
in
sahf
sbb
mov
shl
sbb
xor
sub
dec
sbb
inc
lock
xchg
add
sahf
sbb
popa
mov
push
js
in
xor
jge
stos
(bad)
pop
cld
ja
xor
mov
cli
mov
inc
xchg
clc
sti
in
jnp
out
jns
test
and
lods
outs
into
push
lahf
ret
xchg
jbe
jmp
and
sbb
dec
adc
adc
das
adc
stos
std
(bad)
shl
sub
mov
in
sbb
clc
xchg
mov
push
stos
shl
sti
dec
not
daa
mov
sub
push
adc
push
xor
cmp
pop
(bad)
int
mov
jg
cmp
push
aas
fcom
pop
sub
and
dec
ret
in
mov
push
xchg
xchg
pop
inc
mov
sar
js
adc
add
xor
pop
ret
je
lea
addr16
jo
pop
jns
imul
stos
fcomi
add
jmp
push
aam
pop
test
es
adc
adc
lahf
inc
pop
pop
dec
shl
stc
adc
clc
xchg
sbb
out
pushf
pop
int3
pop
int3
outs
adc
cmp
movs
adc
push
mov
or
mov
mov
add
inc
push
adc
into
push
push
jb
xor
xor
xlat
pop
sbb
outs
lock
or
lods
mov
mov
adc
(bad)
je
shr
mulps
push
sbb
dec
xchg
in
mov
dec
dec
and
jg
sub
and
(bad)
xchg
xor
(bad)
in
mov
jb
or
sbb
jl
push
aaa
aas
add
aas
aam
sub
or
adc
fldenv
jmp
sahf
les
loopne
popa
adc
add
add
and
sub
clc
ret
jnp
in
sbb
or
(bad)
and
pop
es
es
movs
and
xchg
icebp
cwde
imul
adc
stos
mov
jo
jl
cmp
je
and
push
xchg
push
add
and
sbb
ret
fild
in
hlt
(bad)
imul
cmps
adc
pop
add
dec
cs
stos
adc
or
ins
pop
js
aas
adc
sti
les
and
gs
inc
and
mov
xchg
xchg
(bad)
or
and
sbb
lds
xor
adc
scas
mov
adc
dec
or
addr16
or
ror
jne
pop
adc
hlt
dec
mov
xor
repnz
je
lock
cmps
cwde
mov
shl
adc
leave
(bad)
fstp
pop
cmp
(bad)
es
jmp
outs
pusha
adc
shl
sbb
lds
test
jle
(bad)
ror
jg
dec
push
icebp
rcr
std
add
inc
adc
inc
xchg
adc
sub
(bad)
cmp
mov
add
push
stc
push
or
jmp
pop
retf
mov
push
or
adc
stos
add
inc
dec
into
adc
rol
adc
xchg
daa
repnz
mov
cmp
xchg
mov
mov
add
leave
dec
imul
xor
and
mov
xchg
icebp
cld
and
in
pushf
push
pusha
sbb
mov
inc
loopne
adc
jecxz
daa
xchg
mov
lea
jl
pop
outs
std
add
scas
fnstcw
js
lods
or
mov
retf
popf
fidiv
mov
out
and
jb
mov
es
xchg
pop
repnz
popf
scas
fs
adc
fnstenv
mov
test
test
pop
adc
add
or
call
loopne
adc
jl
jns
pushf
adc
pop
xchg
inc
adc
jge
rol
fidiv
in
ret
or
push
add
xchg
cmc
ins
pop
inc
add
arpl
cld
dec
inc
or
iret
pop
mov
sub
mov
sbb
jno
adc
adc
lods
sbb
call
sar
adc
jp
and
loope
push
in
mov
addr16
add
in
mov
adc
cwde
xor
push
lea
cmp
int3
xchg
push
sbb
hlt
je
mov
pop
stos
xchg
mov
adc
enter
cmps
(bad)
retf
adc
aas
dec
loope
push
in
imul
dec
shr
out
jecxz
retf
sbb
pop
mov
jl
hlt
sahf
mov
popa
je
fsubr
not
adc
push
aam
jmp
mov
pop
(bad)
in
pop
cli
mov
xor
and
xor
cmp
push
pop
es
xchg
(bad)
pop
shr
arpl
lds
push
inc
adc
mov
jno
rcl
imul
ret
add
in
pop
jns
into
nop
push
pop
jle
test
xchg
adc
xor
inc
mov
mov
das
sbb
xlat
vshufps
add
cmp
adc
ret
adc
fnstsw
out
pop
add
xchg
pop
jbe
sub
xor
inc
dec
out
or
cmp
iret
cmp
test
fs
mov
sbb
push
cld
xchg
adc
pop
std
arpl
into
push
add
adc
sbb
out
repnz
mov
popa
push
and
pop
sbb
jge
push
aam
mov
push
cmp
or
adc
xor
push
das
mov
repnz
es
sub
pop
cmps
and
repz
les
jmp
iret
mov
adc
aas
push
jge
into
in
adc
sub
adc
sbb
(bad)
adc
test
stos
adc
pop
jae
and
(bad)
push
xor
gs
adc
rcl
int
leave
sbb
push
xchg
or
pop
int3
iret
test
es
ins
sub
popf
push
mov
imul
xchg
popa
pop
adc
xchg
mov
shl
and
xor
dec
inc
cmp
mov
test
cmp
mov
add
or
or
adc
sti
ins
mov
into
rol
jmp
clc
out
arpl
adc
fs
and
push
in
loop
push
mov
ins
push
shl
stc
sub
xchg
cmp
xchg
sbb
mov
or
adc
dec
test
adc
jne
pop
xor
add
mov
fs
out
fst
loope
enter
and
hlt
xor
fst
cmp
add
test
xchg
mov
mov
jmp
fcomp
std
(bad)
mov
pop
in
repnz
xor
cmp
ss
sub
icebp
shl
cmp
fdivr
lods
adc
mov
int3
scas
mov
(bad)
adc
or
fmulp
mov
inc
ret
repnz
nop
gs
push
leave
rcl
adc
push
clc
jmp
inc
out
add
adc
push
jno
jb
ror
jae
mov
clc
inc
sbb
fist
call
mov
pop
cmp
scas
sbb
and
adc
cmp
cmps
pop
jg
xchg
sbb
mov
rol
adc
jecxz
ins
xor
leave
lea
jb
outs
(bad)
mov
ds
cdq
fnstenv
sbb
enter
or
scas
xchg
xor
adc
jecxz
aaa
jmp
and
fs
(bad)
jae
add
out
adc
popf
lock
adc
mov
dec
push
cli
test
cwde
ds
jbe
adc
sbb
add
mov
push
inc
imul
idiv
call
push
inc
mov
pop
mov
in
inc
aad
ins
fidivr
mov
stos
mov
mov
sub
(bad)
jmp
xchg
sub
sub
int
adc
pop
sar
or
xchg
js
cmp
in
push
mov
pusha
push
xor
add
adc
lahf
adc
push
scas
sub
add
clc
add
jns
xchg
jp
movs
hlt
or
outs
mov
addr16
je
push
adc
mov
out
mov
jmp
dec
loop
(bad)
in
cwde
add
xchg
jne
les
adc
and
pop
mov
sub
mov
add
adc
adc
jo
test
sbb
mov
xor
std
mov
adc
ins
pop
inc
cmp
push
jg
mov
test
dec
pop
sub
mov
fadd
(bad)
lods
add
push
adc
inc
cs
lock
jno
xchg
jmp
hlt
in
ss
adc
sub
lods
jae
adc
pop
sub
dec
sar
adc
mov
sbb
stc
jae
adc
lods
add
adc
mov
adc
and
cld
(bad)
sub
mov
(bad)
mov
adc
aaa
cmp
pop
adc
sbb
cmp
jns
sub
dec
dec
jno
xlat
retf
cmp
xor
xchg
push
fs
pushf
mov
lea
push
add
jnp
fwait
and
test
adc
pop
or
lods
mov
push
jecxz
les
shl
pop
inc
push
mov
mov
adc
pop
mov
fidivr
adc
addr16
push
es
sbb
mov
repz
adc
jb
push
ret
jecxz
jno
and
repz
test
pop
inc
sbb
mov
jnp
enter
sbb
dec
test
cmp
les
push
pop
mov
mov
xchg
adc
inc
loop
rcr
xchg
fild
in
sbb
sub
xor
arpl
adc
add
(bad)
adc
push
test
addr16
lock
cdq
adc
xchg
(bad)
cmc
push
adc
or
xchg
clc
add
or
hlt
enter
sbb
std
popa
ss
push
mov
pop
jne
stos
cmp
enter
xchg
adc
les
jp
sti
es
(bad)
cli
cmp
fisub
adc
test
test
cmp
fistp
adc
fdivr
and
adc
scas
loop
addr16
inc
ins
adc
aam
mov
adc
aam
jl
cdq
push
dec
fwait
lds
xchg
iret
movs
test
cmp
hlt
push
ins
and
popf
adc
shl
nop
pop
add
and
push
lock
jg
fcomp
xor
mov
jmp
add
cmp
enter
push
test
shr
xor
pop
loope
ss
adc
add
outs
add
adc
mov
int3
or
ins
mov
repnz
int
and
jbe
sub
call
push
jle
xor
adc
loope
sbb
pop
adc
loop
mov
adc
jns
gs
sti
and
xchg
and
pop
adc
int3
sbb
out
cwde
mov
xor
(bad)
nop
adc
or
dec
adc
pop
in
out
pop
cmps
adc
inc
rcl
ss
jecxz
jmp
lea
adc
outs
xlat
dec
out
mov
dec
(bad)
fabs
cmp
or
std
push
adc
pop
adc
mov
push
xor
sti
add
cmps
addr16
cmp
lods
xchg
jp
rcl
data16
in
adc
adc
cdq
cld
cmp
(bad)
in
dec
pop
call
mov
and
and
cmp
jmp
adc
arpl
ret
adc
and
inc
jnp
inc
fdiv
xchg
out
rcl
cli
add
cmp
ins
push
ds
cmp
xor
dec
adc
(bad)
aam
sub
adc
sub
das
or
push
dec
push
pop
sbb
imul
cmp
or
into
sbb
xor
rcr
mov
mov
addr16
and
clc
cmp
jae
ins
jo
mov
in
stos
sub
add
out
push
jle
mov
xchg
mov
btc
push
inc
sti
mov
out
inc
in
xchg
dec
sbb
xor
mov
jl
adc
mov
out
retf
frstor
or
lds
mov
in
or
data16
push
popa
les
int
xor
mov
outs
pop
sub
adc
aas
popa
push
mov
add
xchg
pop
dec
push
ins
pop
cmp
fcmovnu
sahf
ror
lds
loopne
add
aaa
(bad)
cmps
inc
pop
cmp
mov
rcl
addr16
sbb
icebp
adc
cmp
sbb
shl
in
xchg
hlt
ror
mov
jo
enter
adc
call
es
sub
daa
or
popa
scas
xlat
fstp
in
pop
(bad)
repnz
inc
rcl
pop
dec
adc
lds
sbb
add
in
mov
je
dec
adc
xchg
mov
int3
ror
call
cmp
fs
add
das
cld
push
je
dec
push
xor
fadd
push
arpl
adc
and
cmp
jmp
loop
out
mov
dec
outs
pop
pop
fldcw
jge
adc
test
test
inc
xchg
push
xor
jg
cdq
mov
xchg
inc
es
sub
push
xor
xor
repz
stc
inc
jb
adc
jl
sub
xor
adc
push
add
in
mov
movs
clc
call
xchg
pop
les
je
cmp
jbe
and
shl
adc
inc
out
mov
adc
in
xchg
ret
jae
mov
adc
iret
aas
(bad)
xadd
cmp
cmp
ret
aaa
dec
stos
into
pop
xor
imul
mov
jne
cmps
cmps
push
lock
imul
inc
not
std
and
pusha
fcom
push
mov
cmp
or
and
je
aad
adc
push
or
cmps
aaa
cld
gs
lods
mov
mov
adc
pushf
pop
adc
mov
pop
in
and
dec
loop
xor
ins
loopne
add
in
mov
call
xor
sub
sub
leave
retf
adc
fs
mov
push
and
xchg
arpl
movs
mov
cmps
loope
in
cdq
lock
mov
adc
xor
xor
frstor
cld
das
cmp
sahf
test
call
cwde
ins
mov
adc
jmp
pop
cmc
adc
fisttp
add
pushf
jmp
inc
mov
rol
ss
xchg
and
loopne
dec
add
mul
cmps
xchg
jp
int3
mov
pop
stc
jne
out
pop
outs
push
adc
in
push
in
bound
jae
pop
in
mov
retf
loopne
adc
and
adc
push
push
bound
xchg
lock
push
pop
sub
mov
adc
lods
sbb
pop
dec
push
mov
and
adc
and
cmps
xchg
xchg
pushf
ret
clc
jo
xchg
adc
inc
shl
cmc
loopne
adc
mov
mov
lea
call
dec
ds
loopne
xor
enter
or
jmp
xor
mov
or
pushf
fmul
mov
pop
dec
jle
xchg
adc
push
jnp
jb
push
adc
push
rcl
adc
fadd
mov
adc
and
pop
(bad)
pusha
adc
daa
xchg
cmp
inc
or
repnz
adc
sub
cs
adc
cwde
inc
in
mov
je
add
and
adc
cli
pop
es
and
sahf
push
adc
mov
in
adc
inc
jmp
push
dec
sub
xor
xchg
adc
pop
imul
xlat
das
sbb
add
push
stos
push
aam
imul
adc
pop
clc
cmp
lahf
pop
adc
xchg
scas
mov
push
(bad)
lods
xchg
aaa
mov
mov
outs
in
jmp
ret
stc
fcmovnbe
xchg
call
stos
mov
test
test
cmovge
sub
push
add
adc
into
xor
push
movs
ret
pushf
pminub
(bad)
mov
mov
sbb
jmp
adc
and
outs
sbb
cmps
jo
cld
jns
clc
fisttp
in
mov
fs
mov
mov
pop
adc
dec
adc
imul
es
push
ficomp
nop
pop
pop
add
into
test
cmps
xchg
mov
mov
push
add
xchg
addr16
ret
sub
dec
jae
daa
push
movups
push
gs
aad
lods
adc
das
call
cmps
xchg
(bad)
adc
test
dec
aad
mov
adc
or
xor
inc
rcr
shr
adc
not
and
mov
xchg
sbb
dec
jbe
pop
push
outs
retf
ds
dec
icebp
rcr
cmp
fsub
movs
adc
push
out
fs
jg
aam
in
cli
or
push
fistp
xor
and
jno
pushf
push
lods
adc
xor
mov
pop
dec
fcomp
xchg
mov
stc
mov
adc
fs
into
xor
dec
out
mov
test
and
jg
xor
dec
repz
mov
inc
sbb
or
mov
aam
jmp
cmp
mov
fild
sbb
test
jmp
adc
fcom
cmp
push
(bad)
dec
adc
xor
mov
add
rcl
pop
cmpps
jg
shr
adc
or
adc
adc
inc
push
add
cmp
lock
test
xor
sub
sbb
add
xchg
adc
mov
push
mov
xchg
out
pusha
inc
nop
add
dec
xor
in
std
sti
jg
fadd
mov
inc
mov
inc
or
xor
icebp
mov
pop
cli
sub
mov
gs
shl
adc
mul
fisubr
fmul
add
call
adc
fsubr
sub
sbb
sub
mov
cmp
dec
shr
xchg
hlt
mov
xchg
dec
cmp
retf
loope
lods
push
lock
sbb
add
adc
jnp
ret
sbb
adc
stos
mov
cs
fdivr
out
xchg
adc
pop
pop
cmp
lods
dec
push
(bad)
repz
int
jb
cmc
adc
lahf
icebp
popf
test
or
int
inc
jb
pop
push
adc
adc
inc
(bad)
cmps
mov
fsubp
pop
fist
inc
mov
push
sub
out
push
pop
sbb
adc
sub
mov
ss
inc
cmc
adc
inc
rcr
xor
pop
xchg
cmp
cmc
pusha
unpcklps
add
dec
adc
cs
lds
mov
push
cmp
ficom
mov
iret
ins
int3
and
in
mov
cmps
pushf
push
test
sar
adc
pop
jecxz
pop
inc
mov
lea
repnz
adc
mov
bound
sub
push
add
in
nop
xor
mov
scas
adc
in
retf
mov
stos
xchg
ds
mov
pop
in
jae
fist
test
out
mov
adc
lods
cwde
sub
add
mov
call
sbb
and
not
es
adc
je
ret
gs
add
arpl
aas
cmp
dec
cld
mov
sahf
sbb
fstp
sub
adc
jmp
sub
jnp
jno
push
adc
movs
mov
push
push
dec
adc
sbb
ins
mov
push
pop
int
ret
push
mov
push
ficomp
jne
lahf
adc
sub
clc
movs
xor
xchg
push
cld
test
int
lods
sub
xor
lds
and
jp
sbb
cmps
rcl
dec
adc
ja
in
lds
aaa
out
scas
aam
xor
cdq
mov
jnp
xor
xlat
adc
dec
adc
enter
mov
mov
xchg
data16
sub
and
jo
shr
mov
ins
dec
pop
sbb
cmp
push
xor
mov
push
mov
call
dec
adc
mov
fadd
icebp
adc
aad
rcr
inc
adc
or
test
mov
push
unpcklps
(bad)
ret
xor
mov
ret
fsubr
shr
punpckhdq
xor
add
arpl
fmul
stos
mov
test
and
aam
mov
xlat
ret
fwait
pop
add
inc
call
xchg
xor
push
adc
or
cmp
sbb
xor
pop
int3
and
pop
lods
dec
and
ds
cmp
call
adc
lods
adc
daa
loopne
inc
push
xlat
hlt
adc
push
xchg
pusha
add
pop
adc
mov
mov
test
sahf
je
mov
pop
repz
dec
adc
jae
mov
mov
dec
push
test
xchg
aam
sub
mov
xchg
mov
aam
in
out
mov
int
inc
repz
xor
nop
clc
jl
dec
and
aas
int
lock
adc
popf
outs
sub
push
xor
adc
sub
xchg
sub
test
add
jecxz
adc
pop
pop
mov
stos
push
test
xchg
mov
ins
call
add
xchg
dec
ret
rcl
iret
xor
jbe
or
adc
cmp
cmp
test
mov
adc
lahf
xchg
cdq
xor
mov
adc
add
in
rcl
adc
pop
outs
shl
push
or
push
mov
es
dec
loopne
cs
mov
retf
hlt
mov
sti
jns
xchg
cli
shl
gs
call
push
out
fs
adc
ret
pop
call
inc
in
outs
pop
sbb
mov
je
jb
adc
fimul
stos
adc
add
je
or
div
jne
xchg
jle
dec
xor
xor
out
push
fndisi(8087
sub
add
jae
pop
mov
inc
inc
adc
add
dec
fnstsw
(bad)
loope
inc
pop
movs
mov
pop
pop
gs
je
mov
jnp
shl
jo
sub
call
pop
fsubrp
icebp
sahf
jge
sbb
aam
fiadd
adc
push
lods
data16
int3
fwait
adc
mov
fsubrp
adc
mov
push
sub
push
fwait
dec
adc
pop
pop
lods
push
inc
sbb
(bad)
jo
call
mov
xchg
or
fs
retf
mov
pushf
rcr
push
fistp
dec
es
leave
repz
push
cmp
aas
lds
and
jno
call
scas
adc
mov
loopne
jmp
xor
stc
ins
shl
adc
xchg
(bad)
mov
adc
pop
add
push
xchg
enter
or
sub
les
xor
div
(bad)
call
sub
fld
inc
popf
int3
pop
nop
jnp
adc
push
mov
inc
add
pop
cwde
dec
mov
neg
sbb
mov
mov
cmc
or
xor
xchg
sahf
mul
cld
repz
adc
add
fcomi
ret
fisub
push
ins
xchg
xor
pop
mov
adc
out
jne
iret
sahf
or
aam
sbb
sub
les
jle
pop
sub
adc
xor
cmp
adc
les
adc
mov
cmp
dec
mov
push
movs
out
mov
adc
inc
add
lahf
(bad)
repz
es
or
push
adc
jnp
lds
dec
in
dec
pop
movs
mov
arpl
and
add
in
ins
leave
mov
cmp
adc
int3
pop
xor
adc
fs
das
enter
inc
mov
jo
sbb
ss
(bad)
retf
mov
adc
xchg
cmc
sahf
mov
je
cmp
cli
add
seta
dec
sbb
mov
mov
push
adc
pop
iret
(bad)
mov
jg
adc
imul
add
adc
xchg
fcmovbe
fwait
mov
adc
jecxz
inc
dec
adc
icebp
mov
shr
jno
adc
int
mov
mov
ret
leave
sub
dec
pop
mov
xchg
lahf
pop
add
in
jge
call
mov
inc
adc
or
dec
retf
loope
sar
(bad)
adc
sbb
adc
loopne
sbb
xchg
mov
jnp
outs
gs
repnz
adc
inc
mov
cmp
mov
cmp
sti
mov
cmp
sbb
push
daa
(bad)
lea
adc
xchg
sub
ret
adc
fild
and
(bad)
jo
or
xchg
push
push
mov
mov
add
hlt
scas
cli
mov
int
sbb
mov
mov
into
adc
xor
and
mov
dec
add
push
xchg
scas
data16
dec
mov
adc
(bad)
cmp
jb
push
push
add
aas
adc
test
pcmpeqb
fistp
and
fdivr
leave
sbb
and
test
loop
pop
fsubr
bound
xor
push
xchg
rcl
cld
inc
jmp
and
or
push
push
fwait
iret
mov
push
in
add
or
imul
adc
stos
(bad)
xchg
inc
out
adc
fdivr
movlps
hlt
add
adc
int
(bad)
sar
hlt
push
shl
adc
std
jge
sub
cmp
loope
popa
cs
enter
lahf
push
xchg
js
aas
das
sti
mov
jbe
and
and
les
out
cmp
(bad)
or
xor
fs
(bad)
mul
adc
dec
or
sbb
cli
jle
ret
test
sbb
dec
pushf
jg
or
pop
popa
addr16
je
hlt
in
push
test
xor
adc
mov
shl
and
scas
adc
xor
out
add
mov
jl
mov
(bad)
inc
fsubr
(bad)
cld
daa
(bad)
xor
sub
adc
stc
rol
cld
and
mov
mov
adc
jmp
les
ins
xor
(bad)
nop
sar
ficomp
out
mov
push
dec
cmps
lods
adc
sub
push
bound
adc
push
cli
xor
jno
adc
push
and
inc
aaa
pusha
adc
shr
pop
mov
movs
pop
mov
pushf
sahf
int
fist
test
out
test
push
leave
adc
lea
pop
add
pop
mov
adc
xchg
xchg
in
sahf
adc
xchg
fwait
inc
push
rcl
push
or
add
adc
lea
nop
fwait
cmp
jg
ds
aad
fnstcw
aam
or
mov
mov
mov
cs
aaa
pop
push
(bad)
lock
shl
stos
adc
jae
fistp
adc
sbb
cld
aaa
mov
nop
xor
test
cwde
aas
adc
retf
jbe
dec
add
adc
les
not
pusha
(bad)
mov
inc
in
inc
clc
ds
ret
(bad)
out
xchg
add
pop
mov
mov
adc
dec
fisubr
push
outs
mov
int3
mov
adc
sub
add
test
in
stc
pop
push
inc
mov
adc
cmp
in
xchg
push
xchg
push
mov
inc
adc
pop
pop
dec
(bad)
lahf
push
clc
shr
mov
dec
push
rcr
add
jnp
and
jp
or
in
ins
inc
movs
fbld
out
push
jmp
lods
mov
mov
add
sub
or
adc
adc
adc
jne
jo
loope
adc
mov
push
and
test
xor
cmc
mov
adc
je
or
sbb
data16
pop
popa
std
xchg
iret
jo
xor
adc
sub
xlat
pop
popf
push
jne
mov
adc
xor
stos
jmp
(bad)
adc
xchg
mov
push
sbb
retf
lds
adc
push
fwait
int3
imul
out
mov
loop
or
int3
mov
dec
retf
adc
push
sbb
jl
sti
jns
repz
add
add
and
scas
fwait
imul
xlat
cmc
adc
(bad)
outs
dec
add
test
std
in
adc
bound
adc
dec
adc
clc
pop
imul
mov
dec
fdivr
sbb
fcom
cmp
(bad)
cmp
les
push
xchg
push
xor
push
imul
call
stos
xchg
in
xlat
jne
xchg
test
imul
out
dec
cwde
popf
adc
je
sub
adc
inc
jne
in
add
test
mov
sbb
out
movs
pushf
bound
daa
and
add
xor
fnsave
int
sub
(bad)
daa
xchg
scas
aam
int3
push
sbb
in
lock
sbb
frstor
test
adc
rol
lea
jb
jbe
jnp
xor
iret
add
sar
fld
in
pop
add
ret
sti
and
push
sbb
push
test
xchg
push
sub
xchg
cmc
cdq
out
repz
pop
xchg
adc
bound
nop
retf
fnstenv
data16
adc
cmp
fsubr
lods
sbb
sbb
int
push
push
push
adc
adc
js
das
lds
sti
ret
gs
adc
aam
ja
and
adc
mov
add
(bad)
jns
inc
jo
movs
xchg
or
cld
and
out
sub
int
push
int3
adc
ss
ja
jle
hlt
jmp
jne
adc
movs
data16
pop
pop
and
hlt
xchg
movs
mov
mov
cmps
or
loope
xchg
push
add
sbb
xchg
adc
cs
sbb
cmp
dec
sub
mov
lahf
ds
fcom
and
stos
pop
inc
adc
lock
pop
mov
and
ss
lods
mov
loop
mov
sbb
push
push
stos
inc
cdq
(bad)
lds
int3
test
(bad)
fdivrp
getsec
adc
call
adc
dec
mov
(bad)
sub
push
sahf
mov
adc
cmp
inc
lods
outs
mov
adc
xchg
std
xchg
dec
and
adc
push
dec
mov
pushf
push
aaa
(bad)
aam
retf
out
leave
pop
sub
xchg
outs
gs
lds
sbb
mov
scas
fnstcw
in
mov
cmps
out
cmp
shl
pop
cld
loopne
adc
int
sub
mov
call
xor
adc
mov
cmp
mov
out
enter
or
dec
push
cmp
add
cmp
into
mov
jmp
aam
es
xor
je
popa
adc
sub
cmp
clc
add
adc
inc
stos
mov
dec
movs
cmp
xchg
sbb
add
inc
mov
push
in
aam
jmp
std
inc
test
push
(bad)
into
ins
mov
(bad)
xor
dec
das
mov
adc
xor
fs
adc
mov
dec
stc
shr
sbb
jl
sub
test
mov
cmp
add
add
stc
push
xchg
leave
jge
addr16
adc
cli
adc
movs
iret
scas
fcom
xrelease
mov
clc
inc
adc
inc
jnp
push
bound
push
fimul
pop
fcomp
addr16
fcmovne
xchg
(bad)
sbb
and
jge
dec
mov
jle
retf
rcr
(bad)
adc
frstor
xchg
jbe
lods
les
nop
fimul
cld
rcl
je
dec
neg
dec
imul
out
xchg
adc
xor
aas
inc
mov
retf
pop
into
cmp
in
jg
clc
push
push
addr16
imul
aam
xor
mov
jnp
adc
mov
add
aas
rol
or
shr
jmp
xor
cdq
ret
sbb
sub
test
xchg
adc
ficomp
arpl
jns
sbb
outs
call
xor
xlat
xchg
inc
inc
aad
inc
rcr
in
xlat
jle
adc
(bad)
sbb
cmps
inc
pop
enter
cli
sbb
adc
dec
lock
mov
cmp
adc
mov
push
adc
out
jg
or
cmp
popa
bound
inc
cmps
shl
vmovntps
inc
and
retf
repnz
lods
arpl
hlt
and
ret
pop
or
lods
cwde
adc
add
hlt
pop
xchg
fisubr
pop
mov
dec
leave
ss
pop
jne
mov
in
es
sub
xor
or
push
loopne
hlt
jb
cmc
and
sbb
out
mov
inc
outs
adc
into
push
test
dec
sbb
pop
sbb
call
jg
push
xor
mul
dec
in
lds
repnz
xor
add
mov
cwde
or
js
loopne
inc
or
adc
(bad)
iret
je
pop
push
add
and
out
imul
pop
in
pushf
adc
mov
xchg
dec
adc
jno
cmp
sub
mov
or
dec
adc
cmp
push
cmp
out
mov
fsubr
sub
adc
jle
or
inc
jmp
sti
ins
retf
cli
mov
push
in
and
mov
out
xor
(bad)
pop
or
loopne
adc
fidiv
outs
and
adc
loop
push
add
imul
popf
push
idiv
or
retf
or
ins
push
inc
dec
mov
and
jne
dec
cs
aaa
sub
rcl
out
idiv
dec
jbe
inc
lock
retf
xor
(bad)
mov
mov
jne
push
pop
sahf
mov
sbb
jmp
je
call
aad
xchg
mov
inc
mov
arpl
sbb
fbstp
adc
daa
xchg
icebp
dec
lods
fadd
add
nop
neg
xchg
xor
jbe
loopne
adc
stc
xchg
in
mov
push
jo
es
scas
or
test
je
mov
call
mov
push
inc
jno
jmp
sbb
out
cwde
push
fsub
inc
out
push
adc
xchg
mov
fstp
pushf
loopne
sub
retf
fisttp
clc
add
adc
popa
std
cmp
fidivr
mov
fs
outs
mov
push
test
cmp
es
sub
dec
mov
inc
xchg
lea
icebp
imul
and
and
fld
adc
enter
or
and
fdiv
mov
enter
and
cmps
adc
push
jmp
cli
inc
push
jae
ins
hlt
repnz
mov
fwait
cld
xor
dec
lea
test
outs
imul
sbb
les
inc
xchg
inc
mov
idiv
adc
pop
mov
ret
inc
adc
ffreep
sar
popa
popa
adc
nop
mov
into
mov
adc
pop
sahf
push
pop
mov
sub
mov
mov
xor
cmp
mov
pop
xor
push
call
aam
cmp
adc
xlat
and
inc
cld
jge
sbb
pop
xchg
fcmovu
je
jbe
adc
in
icebp
das
mov
sar
js
test
xor
cmps
in
dec
movs
mov
into
fiadd
push
mov
jmp
and
in
bound
fisttp
das
imul
(bad)
ja
(bad)
neg
fs
retf
mov
ds
and
je
int3
cli
xor
or
popa
mov
add
xor
test
in
mov
pop
jecxz
mov
and
adc
cmp
inc
imul
mov
adc
cmp
cld
and
lds
push
add
mov
mov
sub
rcl
in
aam
jnp
adc
sbb
test
(bad)
dec
adc
jle
movhps
(bad)
jns
jp
call
stos
in
sbb
jmp
push
aam
mov
xchg
xlat
out
aam
(bad)
mov
mov
es
ret
adc
adc
xchg
adc
cmp
inc
sbb
mov
je
adc
out
mov
push
cmp
pop
jp
and
in
je
xor
test
sbb
and
push
inc
cmp
adc
jmp
dec
mov
push
adc
mov
push
adc
cmp
adc
pop
jmp
cmp
dec
mov
inc
loop
out
xchg
hlt
mov
sbb
fisttp
ds
and
inc
cmp
mov
cmc
jb
adc
aad
xlat
retf
push
cmp
jecxz
aas
cdq
xor
into
in
inc
repz
sbb
call
pop
fstp
mov
xchg
hlt
les
sub
pop
fwait
dec
push
adc
inc
inc
jle
int
test
sub
sub
aad
adc
add
jle
popa
fidiv
adc
ins
test
iret
lods
shl
adc
xor
outs
mov
(bad)
cwde
add
stos
lods
push
xor
xchg
pop
enter
aam
xchg
sbb
retf
frstor
rcl
mov
test
push
in
fmul
pop
xor
push
mov
jmp
js
shl
sti
push
(bad)
or
hlt
test
and
retf
test
mov
out
(bad)
or
adc
jecxz
pop
and
jne
adc
sub
int
mov
adc
(bad)
mov
jns
jle
add
jae
and
dec
jg
dec
or
imul
add
ja
sbb
out
xchg
cmp
pop
out
cmp
unpcklps
mov
mov
int3
jmp
jmp
and
inc
std
adc
sti
xor
mov
nop
pop
call
pop
test
push
adc
ss
popf
cmp
pop
adc
rol
adc
inc
inc
retf
and
add
xchg
or
adc
adc
adc
mov
push
sbb
bnd
popa
lock
and
test
pop
pop
push
(bad)
xchg
xchg
adc
xchg
xchg
xchg
sbb
fdivr
mov
jl
jnp
scas
adc
pop
cmp
call
lds
neg
sar
and
and
fst
xchg
mov
and
xchg
pop
sbb
jl
inc
xor
push
and
addr16
mov
lods
sub
push
fild
push
ss
adc
fprem
cmc
das
enter
jg
popa
cld
add
xor
mov
xchg
iret
aaa
adc
lahf
cwde
cmps
jb
mov
mov
jae
xor
mov
popf
clc
mov
cld
into
in
mov
dec
jb
and
and
adc
adc
adc
add
push
pop
add
mov
sahf
cmps
in
adc
fld
ret
cmp
les
add
mov
mov
movs
in
dec
loope
daa
sahf
sbb
stos
mov
movs
outs
jbe
sbb
cmps
sub
in
sahf
out
sbb
mov
push
adc
dec
pop
and
and
inc
push
push
shr
popa
xchg
xor
test
iret
ja
pop
add
les
ret
xor
clc
dec
sahf
add
sbb
lahf
das
lods
cmp
inc
adc
addr16
mov
adc
xchg
fsubr
mov
jmp
or
dec
in
inc
fisubr
adc
out
push
dec
repnz
cdq
xor
inc
xchg
(bad)
(bad)
adc
mov
loopne
sti
je
dec
repnz
jge
push
popa
aas
inc
jmp
adc
cmps
out
pop
(bad)
(bad)
pop
dec
scas
jbe
cld
iret
or
push
loope
sub
cmc
or
pop
adc
and
ficom
ret
out
jb
sub
inc
jbe
je
and
clc
mov
and
add
pop
xlat
cmp
dec
pop
aaa
loopne
fcom
sahf
pop
xchg
mov
jns
in
adc
call
xchg
lea
jmp
es
xchg
(bad)
icebp
xlat
push
adc
shl
adc
sti
xchg
adc
adc
sbb
lods
fstp
nop
adc
outs
popa
mov
adc
mov
retf
(bad)
add
adc
imul
push
and
aad
push
aam
mov
jmp
cs
mov
add
aam
bound
xor
loopne
adc
mov
mov
adc
dec
outs
inc
gs
xchg
dec
jnp
ds
xor
xor
retf
scas
in
adc
es
pop
and
int3
xor
mov
repz
add
sbb
push
mov
out
rol
fldcw
fst
push
sbb
std
jns
adc
sbb
stc
add
dec
pop
hlt
cli
fs
mov
into
repz
rol
cmp
dec
add
xchg
out
in
loop
jns
sbb
xchg
ss
push
push
cmp
adc
pop
clc
retf
test
aad
xor
stos
add
adc
and
fist
xchg
add
and
nop
mov
(bad)
xchg
adc
call
imul
adc
popf
outs
sbb
lock
in
or
test
js
mov
hlt
out
cdq
xchg
cli
mov
stos
cmp
and
adc
iret
out
movs
not
adc
inc
pop
adc
(bad)
jmp
add
out
cs
(bad)
hlt
adc
arpl
jo
scas
out
push
jle
sbb
sbb
(bad)
mov
aam
lea
or
mov
hlt
inc
lods
sbb
outs
and
add
test
test
sub
xor
(bad)
fucomp
int
add
xor
adc
mov
push
dec
mov
fdivr
adc
test
rol
test
daa
and
xor
leave
icebp
fsub
adc
pop
sti
test
add
fcmovne
and
ficomp
adc
mov
push
sub
jmp
push
fstp
pop
add
je
loop
shr
fcom
cmps
lds
xchg
cmp
cdq
adc
dec
pushf
push
sbb
xor
test
stos
cmps
hlt
leave
adc
je
cmp
mov
mov
push
sahf
sbb
je
cmps
stc
xor
push
xchg
lods
push
ss
adc
popf
jecxz
ficom
adc
and
lea
jl
adc
add
ds
dec
fldcw
(bad)
dec
dec
pop
aam
push
xlat
retf
xchg
mov
and
retf
push
xchg
mov
pop
cmp
mov
popf
sti
(bad)
(bad)
cmp
cmp
add
pop
mov
dec
das
je
test
cwde
imul
adc
mov
popf
int3
adc
sub
cdq
push
rcl
test
and
test
mov
ret
jnp
cld
add
cmp
sbb
jp
pop
sahf
cmp
sbb
sub
lea
mov
xlat
jb
adc
adc
js
pop
and
shr
(bad)
call
pushf
adc
sub
and
adc
push
jbe
sub
leave
adc
push
pop
adc
lahf
repnz
mov
mov
inc
sar
jmp
fdivr
jmp
in
ins
rcr
movs
dec
mov
imul
xchg
mov
mov
(bad)
int
aam
jecxz
ins
in
in
pop
cmp
das
push
(bad)
(bad)
jno
mov
lods
mov
adc
pusha
retf
test
mov
cld
sbb
je
addr16
test
sub
adc
shl
dec
xor
adc
jns
or
pop
mov
sbb
pop
dec
push
cmps
into
xchg
jb
out
adc
stos
pop
movs
push
loopne
push
push
rol
aaa
inc
lods
add
fisttp
fs
cli
enter
call
and
rol
in
out
cwde
sub
cmps
jge
retf
xadd
ins
pop
aam
jg
and
adc
call
out
ret
adc
into
dec
aad
mov
aam
clc
jmp
cmp
xchg
cmp
push
int
jae
xchg
cwde
sbb
sbb
xchg
call
outs
test
dec
adc
mov
cld
adc
push
repnz
jnp
mov
js
mov
sbb
add
push
mov
adc
enter
xor
push
lods
addr16
jo
jb
pop
or
sbb
out
ds
push
adc
inc
mov
adc
in
or
xor
sbb
xchg
xor
popa
sbb
jb
and
cdq
pop
movs
mov
aas
in
ds
xchg
cli
outs
sub
add
dec
das
adc
fxtract
and
les
cmp
ds
add
xchg
xor
fs
out
mov
push
mov
in
jnp
cld
mov
(bad)
adc
xchg
lods
push
aaa
pop
aam
inc
fs
test
adc
imul
stos
jbe
(bad)
in
xchg
xor
xchg
push
loop
in
xchg
fbld
outs
xchg
jne
nop
mov
xor
adc
int
popf
std
sub
adc
(bad)
jmp
cs
loopne
js
mov
retf
dec
mov
jo
and
add
out
cs
(bad)
in
sbb
and
sub
fadd
cmp
int
ja
aam
cwde
inc
jle
imul
xchg
daa
and
dec
adc
xchg
or
jns
cmp
mov
ja
les
adc
or
jns
inc
lock
mov
mov
xchg
(bad)
mov
cmp
fsubr
xlat
mov
loopne
fcom
in
cwde
fist
cld
push
pop
sbb
test
fsub
fyl2x
adc
loope
or
add
(bad)
inc
mov
mov
popa
mov
push
sbb
dec
pusha
scas
hlt
ss
xor
movs
sub
retf
push
pop
mov
fild
mov
push
push
and
lahf
adc
mov
jno
fwait
push
jmp
cwde
mov
mov
das
(bad)
push
adc
aad
out
cmc
iret
stos
leave
adc
cmp
cmp
mov
mov
retf
and
leave
adc
push
cmps
jmp
mov
sar
pop
mov
sbb
xchg
aam
outs
xlat
adc
lea
popa
push
adc
int
ds
fst
sbb
stos
enter
or
push
pop
cmps
test
rcr
or
adc
sbb
test
jae
and
jp
loop
push
inc
cmps
mov
dec
in
jg
adc
sub
fwait
adc
dec
cmp
iret
mov
jmp
shl
es
pop
adc
mov
add
movs
add
retf
ins
mov
push
jp
in
stos
xor
sahf
ds
mov
sub
inc
jmp
xlat
push
sub
sbb
loopne
fcomp
adc
pop
rcr
mov
adc
jb
call
jl
dec
push
jae
pop
jge
mov
and
push
add
scas
dec
adc
mov
inc
clc
pop
add
mov
hlt
pop
retf
movs
fadd
pop
add
sbb
mov
jo
inc
call
pop
bound
retf
dec
in
jmp
adc
es
(bad)
test
adc
fidiv
mov
sub
imul
mov
in
neg
outs
lods
push
movs
ins
popa
mov
fwait
push
into
xor
adc
aas
mov
js
pop
retf
adc
cmp
imul
add
(bad)
stos
adc
fdivr
jmp
inc
loopne
addr16
sbb
adc
pushf
clc
stos
add
pop
lods
rol
mov
out
sub
cmp
mulps
xchg
pop
ins
mov
jns
push
xor
call
outs
stos
lea
push
dec
pop
aad
push
cli
adc
adc
jl
in
(bad)
mov
ins
inc
je
jmp
xchg
movs
pop
in
adc
rcl
(bad)
aam
cmp
jmp
sbb
cli
adc
sub
shl
dec
jns
int3
mov
cmp
daa
cmp
sbb
and
and
loop
adc
sahf
push
loop
push
xchg
call
in
mov
and
adc
lods
fs
out
(bad)
mov
shr
imul
popf
lea
xor
dec
out
jl
xchg
adc
scas
es
mov
and
lods
add
xor
adc
jb
aaa
fs
jl
mov
adc
inc
ret
addr16
sbb
std
xor
adc
mov
not
pop
jbe
(bad)
shl
adc
xor
sbb
and
sbb
adc
call
inc
sub
js
in
cwde
ret
imul
fwait
stos
ror
aam
or
jmp
jle
pop
xchg
inc
push
sub
daa
add
mov
dec
jp
jmp
(bad)
push
push
push
mov
std
jecxz
stos
adc
fwait
gs
cs
xchg
lods
xor
loop
hlt
mov
mov
push
out
rcl
adc
retf
adc
jecxz
sbb
push
xlat
and
add
xchg
xor
and
scas
mov
int3
or
push
adc
ret
sbb
xchg
add
sub
mov
cld
hlt
add
ja
adc
pop
out
jmp
loope
das
inc
in
sub
xor
push
adc
frstor
mov
aad
ficom
inc
mov
sar
adc
push
int3
fistp
add
inc
inc
sub
cmps
test
mov
imul
xor
add
adc
adc
leave
inc
sbb
lods
std
arpl
push
(bad)
push
mov
shl
stc
lods
movs
sub
mov
sub
jl
adc
adc
push
cvtdq2ps
fsubrp
cmp
les
push
pusha
xchg
sub
int3
adc
jge
idiv
pushf
adc
jmp
in
inc
add
cmp
stos
mov
mov
and
int3
pop
adc
icebp
pop
arpl
push
ror
fsub
mov
mov
test
push
sub
xchg
xchg
outs
shl
or
adc
call
adc
shl
je
cs
pop
mov
fsubr
adc
aaa
push
mov
sbb
hlt
push
dec
jae
js
ret
repnz
in
popf
mov
test
adc
fs
mov
add
lods
and
mov
hlt
test
mov
xchg
std
sbb
mov
push
test
adc
ret
or
aad
das
ins
cmp
test
mov
and
and
mov
mov
test
(bad)
fnstsw
adc
call
sub
add
not
xchg
cmc
loopne
push
adc
clc
(bad)
push
dec
jp
jge
inc
mov
cdq
lahf
cmp
repnz
jmp
test
mov
mov
or
mov
push
push
in
xor
adc
addr16
retf
pop
mov
mov
mov
dec
daa
sbb
dec
in
sub
cmc
adc
aaa
aas
inc
(bad)
arpl
or
mov
mov
mov
adc
fwait
je
inc
mov
test
loopne
xor
adc
mov
xor
aam
mov
adc
mov
out
mov
push
pop
adc
imul
xlat
mov
out
lock
stc
or
add
push
lods
mov
mov
xchg
shl
adc
mov
cmp
inc
out
rol
aam
fadd
mov
imul
xchg
lds
mov
adc
add
pop
stos
clc
das
push
and
mov
jae
jno
sbb
add
(bad)
jmp
pop
(bad)
sub
or
inc
dec
dec
and
jnp
inc
mov
pop
repz
arpl
push
fdivr
pop
push
xchg
pop
pop
push
data16
stos
pusha
fwait
push
mov
push
cmp
ficom
movs
std
cdq
fsub
enter
add
pusha
push
mov
inc
xchg
push
sbb
movs
cmp
or
jno
pop
adc
cmps
daa
pop
mov
int3
sbb
adc
(bad)
cmp
adc
mov
enter
in
pop
js
fiadd
inc
es
popa
adc
outs
(bad)
imul
sub
repz
jb
mov
sahf
mov
adc
xor
pop
shl
pop
adc
sbb
out
sbb
in
sahf
call
ds
stos
push
dec
adc
rep
cmp
pushf
inc
adc
jnp
dec
pop
pop
or
mov
retf
or
adc
dec
iret
jns
add
xor
repz
jp
es
stos
or
xchg
test
xchg
js
xchg
adc
sub
xchg
xor
out
push
rol
outs
ror
adc
jnp
movs
sbb
fmul
xchg
ja
nop
adc
cmps
xor
dec
js
call
inc
xor
imul
in
mov
adc
xlat
arpl
adc
sub
dec
and
jo
and
repnz
call
out
scas
pushf
lock
mov
sbb
(bad)
or
dec
adc
dec
jnp
hlt
or
pop
in
xor
xor
ja
clc
shr
movntq
out
loope
sar
pop
lock
push
lds
gs
frstor
les
mov
or
jmp
loopne
adc
(bad)
dec
pop
(bad)
mov
cmp
test
out
sbb
add
inc
mov
adc
sub
loopne
fsubrp
fild
arpl
dec
cmp
fsubr
and
loopne
sub
xor
ins
push
xchg
scas
push
and
mov
inc
push
dec
jb
inc
add
movs
rcl
adc
xchg
hlt
arpl
xchg
jb
adc
mov
mov
pop
iret
or
leave
inc
pop
idiv
adc
pusha
sar
cld
jo
and
pop
(bad)
adc
xchg
(bad)
shl
rcr
fst
loopne
mov
jecxz
jp
and
xchg
xchg
or
dec
dec
cmc
outs
stos
push
pop
ds
mov
sbb
adc
lea
or
(bad)
retf
xchg
retf
adc
mov
mov
and
aaa
pop
(bad)
movs
cmps
out
xchg
adc
mov
push
popa
mov
adc
popf
hlt
push
jnp
ficomp
lds
outs
or
call
int3
mov
sbb
mov
adc
inc
mov
repz
test
xor
cmps
jbe
ret
xchg
add
cmc
push
ins
scas
push
adc
mov
adc
sahf
xor
xchg
inc
(bad)
loopne
sub
out
(bad)
push
push
xchg
cmp
cmps
mov
adc
adc
dec
sahf
pop
lds
push
adc
push
in
mov
adc
leave
push
mov
sub
add
and
aam
lahf
cmc
sbb
lods
xor
fdivr
lahf
or
adc
cmp
jp
cmp
in
arpl
icebp
mov
push
or
xchg
mov
jno
add
test
dec
test
pop
das
adc
out
(bad)
adc
xchg
ret
cdq
clc
sbb
adc
in
test
push
in
mov
sbb
cdq
test
je
popa
sbb
mov
or
xor
mov
push
pop
inc
cmc
and
adc
add
push
adc
pop
mov
adc
iret
fidiv
pop
mov
jns
inc
mov
pop
add
add
xchg
cld
inc
xchg
push
jmp
outs
call
sbb
ret
fild
xchg
mov
lsl
adc
pop
(bad)
arpl
call
inc
dec
cmp
jmp
cmp
out
push
out
or
int3
inc
adc
or
sar
inc
adc
adc
xchg
sbb
push
adc
retf
(bad)
out
ins
movs
es
adc
cs
movs
and
out
or
adc
js
daa
loope
jns
adc
sub
push
pusha
pop
jge
jg
mul
ins
mov
aam
adc
call
adc
fisubr
out
inc
pop
adc
push
and
xor
std
dec
xlat
repz
mov
mov
mov
adc
int3
loopne
ins
cmps
and
fcom
sahf
scas
add
xor
jmp
adc
idiv
adc
aas
pop
loopne
into
fnsave
hlt
sub
or
loop
and
or
cwde
push
pushf
adc
addr16
test
das
les
xchg
loope
jbe
popf
adc
xor
push
adc
inc
mov
je
sub
pop
aaa
or
aam
iret
rcr
cli
push
pop
ss
xchg
cmp
push
xor
push
stos
dec
aas
les
xchg
and
xchg
mov
ret
fnstenv
nop
push
inc
lahf
shl
sbb
rcl
ror
std
mov
aaa
pop
pop
sub
lahf
jbe
daa
jb
popf
js
add
sti
xchg
aam
cli
push
xchg
adc
gs
fisub
es
out
(bad)
hlt
(bad)
pushf
fst
adc
add
jg
fwait
inc
ss
in
adc
ins
xlat
add
scas
xchg
outs
adc
jle
mov
sbb
sub
or
into
movs
dec
xchg
sub
ret
jne
cmp
ja
adc
or
and
xor
ins
lock
shl
xor
sbb
adc
add
or
jge
adc
add
jle
aad
retf
cmp
mov
push
jp
jmp
rol
scas
stos
out
ss
inc
clc
icebp
xchg
or
add
inc
mov
push
inc
dec
test
int3
lock
cs
fcom
(bad)
ficom
xor
stc
test
and
movs
sub
stos
std
pop
xchg
aaa
push
daa
push
pop
adc
mov
inc
pop
adc
mov
and
ins
xchg
jge
aam
aas
pop
gs
xchg
sub
pushf
inc
pop
mov
mov
test
pop
dec
cmp
adc
xchg
mov
ficom
ret
in
jnp
cmps
inc
pop
rcl
leave
jecxz
sub
add
sub
mov
mov
lea
shl
in
outs
fdivr
fldenv
xchg
pushf
or
lock
ss
pop
xor
mov
inc
xchg
aaa
dec
inc
ins
adc
sbb
popa
mov
jae
jmp
popf
mov
dec
sar
cmp
test
cwde
cmps
movs
and
sbb
in
xor
inc
mov
lea
addr16
and
imul
inc
je
push
(bad)
push
add
lock
adc
aam
mov
or
das
sahf
and
imul
sub
jmp
xchg
add
fs
outs
push
pop
dec
retf
adc
mov
mov
inc
push
pop
push
scas
and
push
adc
jge
fisttp
out
mov
xor
fwait
inc
adc
mov
fs
push
xor
mov
cmc
in
jg
and
popf
push
adc
out
in
jge
mov
lods
dec
je
bound
fcmovnbe
in
pop
adc
add
jmp
call
daa
js
retf
jno
test
cmc
jg
xor
sbb
not
pop
in
popa
lods
je
add
mov
and
mov
imul
mov
pop
sub
sar
data16
rcl
pop
fmul
cld
pop
jge
adc
fidiv
retf
or
add
push
mov
ret
sub
imul
and
mov
adc
adc
ret
adc
sub
mov
adc
(bad)
into
in
test
addr16
pop
lock
stos
retf
jmp
push
fs
in
xlat
adc
fistp
xchg
jns
inc
in
fimul
xor
jle
pop
hlt
test
jne
adc
mov
fisubr
ror
dec
inc
xlat
movs
mov
adc
out
cmp
(bad)
movs
adc
das
inc
fs
or
adc
dec
dec
push
mov
fldln2
mov
mov
repnz
adc
add
inc
out
nop
and
dec
pop
jge
icebp
dec
js
adc
mov
cmps
push
dec
mov
and
les
adc
es
cmc
and
cmps
adc
xor
jmp
repz
and
sbb
bound
adc
into
cmp
adc
div
mov
add
add
lahf
les
pusha
cs
lea
push
push
inc
adc
out
adc
jp
in
addr16
jl
adc
add
iret
and
aas
push
int3
pop
adc
cmp
cld
adc
imul
mov
jecxz
dec
xchg
mov
sbb
xchg
xchg
movs
adc
sbb
mov
xor
adc
shr
repz
fdivr
pop
sbb
sub
or
shr
clc
xchg
scas
sti
adc
addr16
fwait
push
pop
gs
test
and
jmp
(bad)
popa
xchg
or
adc
shr
jmp
sub
mov
xchg
xchg
jo
push
shrd
adc
jle
rcl
mov
in
adc
or
mov
cli
jne
test
ja
data16
adc
lea
loope
nop
jbe
adc
cmp
push
ins
xchg
adc
in
cmp
mov
jmp
stos
jmp
fdivr
jo
cwde
pop
call
add
jecxz
hlt
shl
ss
repnz
sar
pop
add
test
inc
add
in
mov
dec
jmp
add
push
stc
call
in
sbb
sub
inc
movs
push
bound
push
jnp
mov
out
push
inc
and
jl
hlt
push
inc
aas
xor
adc
xchg
push
test
inc
add
adc
pushf
sbb
and
jns
(bad)
out
icebp
mov
leave
std
push
xor
or
into
dec
mov
mov
adc
sti
and
cmps
aaa
adc
push
xchg
mov
aam
mov
aas
clc
lods
jecxz
adc
cwde
mov
nop
push
rcl
sub
push
aad
xor
call
enter
adc
push
fsub
retf
stc
adc
(bad)
ins
jns
mov
cmp
mov
mov
sub
mov
adc
into
add
popf
inc
mov
aaa
xor
dec
loopne
mov
in
cwde
aam
add
pop
test
add
inc
outs
sub
xchg
xor
out
mov
dec
call
or
xor
or
pop
lods
ins
test
xchg
mov
ja
mov
inc
mov
xchg
sbb
scas
cld
js
ja
adc
push
mov
pop
mov
dec
out
sub
mov
in
enter
push
das
xchg
movs
jge
ja
in
pop
mov
cmps
lahf
lds
scas
rcl
mov
cmp
(bad)
jnp
cli
push
jp
xchg
frstpm(287
pusha
adc
xor
and
push
addr16
out
fcom
inc
adc
cmp
in
jge
mov
(bad)
dec
dec
out
sbb
das
ret
cld
loop
or
cdq
sbb
fcom
jp
jns
mov
sbb
mov
push
sahf
mul
mov
data16
xor
push
xor
jo
inc
loope
test
adc
mov
cs
pop
(bad)
xchg
adc
mov
jb
sbb
imul
call
retf
adc
adc
pop
xor
sbb
enter
jg
adc
or
dec
dec
pop
sbb
mov
push
call
pmaddwd
inc
pop
mov
mov
cwde
call
sub
jmp
adc
xlat
xchg
(bad)
adc
gs
inc
out
rcl
cmps
adc
adc
xor
cmp
pop
sbb
jmp
pop
lods
je
outs
adc
jbe
dec
mov
out
mov
cmp
pop
adc
hlt
movs
mov
adc
(bad)
xchg
daa
imul
push
adc
mov
add
jmp
sub
call
adc
sbb
sub
pop
push
xchg
sbb
pop
or
adc
jb
dec
jno
lgs
mov
xor
adc
mov
frstor
and
pop
and
repz
jge
jb
mov
sbb
adc
cwde
ret
aas
mov
jge
repnz
int3
sub
inc
adc
pop
int
sbb
ficom
popf
call
loopne
adc
dec
xchg
pop
xchg
je
jbe
adc
mov
fs
add
xchg
adc
jl
adc
sbb
or
xor
inc
push
sub
hlt
cmp
adc
sub
test
lahf
xchg
push
retf
aas
mov
fwait
xchg
jl
add
xchg
jno
pop
mov
rcl
mov
xchg
(bad)
fcom
pop
xchg
mov
cdq
cs
push
or
inc
or
gs
sti
push
cld
enter
xor
(bad)
add
sahf
out
add
adc
sub
je
adc
jno
shr
lea
jle
(bad)
mov
mov
call
iret
or
dec
jae
fbstp
lods
sti
out
or
adc
loope
push
je
loop
sbb
adc
stc
sub
mov
fst
sub
xchg
retf
push
out
xchg
mov
adc
sbb
adc
fmul
push
ret
(bad)
in
arpl
inc
movs
adc
test
sub
outs
ss
cld
mov
(bad)
out
fild
add
xlat
xor
pop
or
lods
jmp
jmp
fimul
cmp
stc
adc
fwait
(bad)
push
xchg
imul
fidivr
in
push
jnp
(bad)
sbb
and
inc
in
mov
inc
nop
sub
push
xchg
dec
imul
mov
dec
dec
js
adc
adc
leave
pop
jbe
cmp
xchg
call
and
dec
sbb
lock
stc
adc
cmp
jae
ins
cmps
inc
jecxz
xor
in
mov
adc
cs
outs
adc
outs
xchg
lahf
or
fldenv
iret
or
jg
and
retf
loopne
call
ret
shl
inc
adc
cmp
jne
into
mov
mov
or
jae
adc
sub
sub
test
cld
imul
jae
aad
std
test
cwde
sar
push
(bad)
sbb
aam
inc
sub
mov
xchg
cld
mul
sbb
or
aam
movs
sbb
cdq
jns
add
jnp
cmp
sub
adc
xor
fwait
dec
rcr
pop
push
mov
into
cli
pusha
jmp
imul
mov
repz
adc
retf
std
pop
js
daa
push
push
adc
or
cwde
push
adc
pop
mov
jge
inc
adc
pop
jns
mov
lds
loop
dec
clc
adc
mov
jp
outs
or
in
xchg
jmp
adc
js
addr16
repz
push
les
add
sbb
out
sbb
hlt
adc
out
adc
in
cmp
adc
(bad)
pop
imul
mov
push
xor
pop
mov
push
cmc
sar
je
ror
push
loopne
add
ins
outs
popf
popa
ds
mov
jmp
or
xor
fdiv
pop
(bad)
jbe
mov
adc
push
inc
fldcw
adc
jo
icebp
pop
mul
pop
add
test
rcl
xor
adc
and
jno
adc
test
adc
outs
mov
or
inc
and
dec
mov
retf
sar
pushf
mov
sbb
sub
mov
xchg
jmp
mov
aas
xlat
aaa
call
jbe
inc
cmp
in
shl
adc
arpl
adc
pop
dec
adc
mov
xlat
outs
push
pop
(bad)
outs
xor
in
dec
mul
sti
adc
std
sbb
cmp
inc
mov
cmp
test
sbb
push
push
dec
shr
push
stos
sub
push
and
adc
lahf
or
pop
push
ret
into
mov
pop
xchg
mov
es
enter
cmp
sbb
(bad)
mov
cld
jecxz
aad
and
adc
xor
lods
repz
cmp
push
stc
sbb
jl
adc
aas
mov
pusha
pop
call
sbb
les
or
sti
es
shl
hlt
lock
ret
adc
je
outs
ror
xchg
rcl
loop
sub
pop
aaa
or
rol
adc
cmp
adc
xor
es
mov
and
out
sub
xchg
or
mov
pop
and
outs
sti
rcr
mov
test
stc
pop
or
ucomiss
adc
push
or
and
js
adc
jp
std
push
hlt
cli
aad
sub
mov
mov
repz
push
leave
push
sbb
pop
ins
call
and
sbb
cmp
jb
fiadd
movs
sbb
aad
retf
add
xchg
sti
dec
inc
cwde
lods
adc
dec
in
jne
xor
loop
ja
rol
lods
loope
adc
int3
mov
out
stc
adc
xchg
xchg
xlat
fnsave
aam
push
push
cmp
inc
jmp
enter
fisttp
add
pop
ins
adc
add
mov
ss
call
icebp
mov
dec
adc
mov
arpl
adc
repnz
push
mov
aas
adc
jmp
adc
(bad)
stc
or
xchg
adc
loopne
punpckhdq
xor
repz
or
adc
ds
hlt
shl
aam
xchg
and
cs
sar
inc
mov
test
arpl
(bad)
jno
pop
and
sbb
jns
fsub
adc
(bad)
mov
xchg
inc
mov
dec
lock
jo
jecxz
inc
(bad)
adc
mov
ror
sub
bound
outs
push
mov
adc
push
add
fld
add
(bad)
or
pushf
mov
lea
lahf
xor
cmc
arpl
adc
jp
jmp
adc
xor
call
leave
repnz
sub
cld
mov
xchg
inc
mov
call
xchg
fadd
test
push
adc
test
xchg
scas
test
jmp
ret
pop
xchg
jb
adc
stos
sub
mov
sub
sahf
cmp
xchg
and
xor
loop
lds
adc
adc
adc
push
mov
sbb
movs
jbe
dec
outs
inc
sub
push
sbb
adc
pop
pop
push
jmp
das
clflush
cdq
mov
adc
mov
aad
pushf
jnp
push
and
jecxz
and
sub
movs
(bad)
sub
test
and
xor
bound
in
repnz
inc
adc
sub
xor
mov
movs
fs
adc
js
xor
add
retf
inc
fisubr
mov
adc
add
loop
lods
je
adc
scas
neg
movs
xchg
data16
mov
aam
add
sub
xor
fst
pop
pop
push
xchg
dec
mov
fs
imul
sti
out
pop
push
std
in
fidivr
setne
adc
in
inc
mov
xchg
mov
adc
mov
fadd
ret
js
sub
add
adc
jmp
adc
jecxz
sub
stos
cmp
sbb
mov
aam
mov
pop
cdq
(bad)
jge
or
pushf
in
rol
das
adc
in
adc
ins
pop
cmp
out
adc
and
arpl
outs
mov
movs
lea
mov
test
adc
fs
mov
daa
sbb
adc
jge
cmp
in
sub
or
and
and
js
xchg
or
push
jmp
pop
cmp
mov
adc
mov
dec
dec
add
xor
das
aad
mov
or
mov
and
pop
mov
dec
and
xchg
cli
ret
and
adc
loopne
xor
xchg
adc
cli
xchg
pop
into
stc
xor
adc
inc
or
sbb
cmp
je
ficomp
test
xchg
push
les
ja
pop
sbb
pop
jbe
fsub
shr
sub
adc
mov
in
jmp
test
jle
js
push
and
cmps
es
lahf
pop
xchg
mov
inc
jmp
test
(bad)
mov
add
push
mov
lock
icebp
push
arpl
dec
and
jnp
pushf
cmp
std
jno
sub
sbb
lds
sub
arpl
jne
xchg
xchg
rcl
sti
mov
cmp
dec
adc
int
mov
pop
and
adc
push
out
xchg
mov
pop
adc
inc
and
repnz
and
or
int
adc
mov
mov
call
mov
dec
add
or
pop
xchg
dec
push
arpl
stc
jne
rcr
ja
cld
dec
out
adc
enter
stos
lock
jno
sub
sub
jg
icebp
mov
loope
call
push
mov
jmp
fsub
clc
xchg
fisttp
das
out
ds
jbe
test
dec
and
push
stos
cmp
jmp
xor
loopne
inc
inc
sub
aam
int3
fsub
test
fiadd
push
and
pop
xor
adc
cmp
sub
adc
dec
push
iret
push
dec
xor
push
adc
and
dec
inc
sbb
jns
push
push
out
adc
xchg
leave
sub
xchg
or
push
mov
fucomip
pop
sbb
clc
mov
cmp
adc
mov
pop
pop
adc
in
leave
aad
bound
fs
call
adc
neg
loope
(bad)
nop
out
mov
sbb
or
daa
shr
mov
xchg
aam
fcom
enter
pop
or
jbe
retf
sbb
sub
and
dec
pop
and
mov
mov
jns
jae
test
and
add
sahf
mov
dec
push
and
test
cwde
repz
fwait
adc
std
ret
sbb
mov
or
arpl
adc
adc
mov
dec
mov
and
push
add
and
mov
cmp
sahf
adc
add
jae
nop
jmp
mov
pop
ins
adc
adc
cmps
out
pop
push
fild
test
es
adc
mov
push
out
stos
add
push
push
push
aas
jge
test
pop
adc
and
scas
sbb
adc
xchg
adc
jnp
push
std
jp
cmps
adc
in
sub
hlt
addr16
mov
add
xchg
mov
cmp
xlat
dec
retf
add
in
and
sub
(bad)
cdq
mov
and
movs
mov
jns
adc
xchg
add
add
sbb
(bad)
not
fwait
test
shl
popa
add
push
mov
pop
mov
cmps
fstp
lock
mov
cmc
mov
xchg
push
into
inc
aaa
imul
xchg
adc
pop
mov
ficom
nop
dec
(bad)
hlt
add
(bad)
pop
ss
out
mov
lea
jno
sbb
add
je
hlt
ret
adc
sub
mov
adc
or
xor
mov
shr
mov
adc
sahf
or
aad
aaa
and
aam
dec
adc
sub
mov
jno
inc
call
sbb
mov
inc
adc
mov
cmp
sbb
cld
mov
(bad)
outs
aam
xor
sahf
jmp
pop
pop
mov
cmp
adc
fs
adc
sbb
push
lea
xchg
pop
pusha
push
daa
inc
adc
jo
ret
jns
xor
std
into
mov
pop
test
add
adc
mov
sbb
add
lock
adc
cmp
inc
sahf
lock
sub
dec
jecxz
sbb
jl
push
sub
inc
call
adc
dec
iret
mov
popf
sub
xchg
test
and
icebp
adc
fadd
jne
push
jbe
adc
jno
pop
jl
shl
pop
add
aaa
out
adc
arpl
fs
std
frstor
adc
mov
cmp
in
sbb
test
ud1
mov
stos
push
lock
xchg
daa
aam
xchg
in
ja
into
ret
(bad)
clc
adc
cmp
xchg
scas
inc
std
xor
sbb
in
sahf
pop
outs
inc
and
sub
fidivr
js
nop
pusha
sti
ja
dec
adc
test
fst
ins
pop
out
call
adc
inc
dec
and
adc
and
adc
int
dec
dec
ins
mov
adc
scas
sbb
adc
sbb
fbld
or
imul
aas
or
dec
in
mov
stos
ja
mov
out
popa
jg
sar
xacquire
clc
xor
jle
cmp
scas
adc
cmp
in
cmps
call
imul
pushf
jmp
push
jmp
add
mov
sbb
sbb
inc
iret
sbb
test
hlt
pop
mov
shr
xchg
jae
in
inc
xchg
mov
add
adc
fs
cmp
cld
jo
retf
mov
fdivrp
mov
ret
mov
cwde
jno
sub
adc
mov
and
push
shl
push
jge
sbb
inc
jo
push
rcr
call
imul
pushf
pop
cmp
cmps
out
std
popf
popa
leave
adc
xchg
pop
cmp
cmp
mov
adc
mov
ins
cmps
adc
jae
xchg
xor
je
adc
inc
loopne
push
pop
and
or
movs
sbb
cwde
out
add
adc
(bad)
sti
lods
enter
adc
xor
jp
dec
jmp
mov
add
inc
cmps
lods
(bad)
out
mov
out
(bad)
jae
dec
cld
repnz
inc
adc
ss
add
outs
push
dec
in
xchg
test
cwde
lock
sbb
sub
add
ja
mov
fild
(bad)
pop
xchg
outs
adc
repnz
sti
fadd
arpl
ret
ins
addr16
add
dec
fs
movs
lahf
pop
mov
adc
lea
mov
mov
int3
sub
sub
inc
repnz
cmp
sti
jo
adc
out
jge
xlat
jmp
ins
fcom
pop
fisub
push
sti
adc
jge
xor
loop
stos
inc
mov
mov
push
adc
(bad)
icebp
or
cmp
mov
in
cmp
addr16
(bad)
sbb
sahf
xchg
add
es
loope
inc
bound
int3
retf
mov
adc
outs
cmp
(bad)
push
bound
mov
aam
repz
call
jbe
cmp
lock
adc
jl
add
mov
jecxz
int3
scas
popa
sub
or
xor
adc
xor
mov
push
add
aam
imul
add
in
adc
stos
sub
or
imul
aas
xor
cwde
xlat
adc
jo
and
add
ret
ficom
hlt
(bad)
dec
add
in
popa
xor
pop
mov
sar
call
stos
aaa
shr
clc
pop
push
aad
jmp
adc
xlat
mov
aaa
adc
inc
mov
aas
adc
adc
push
mov
push
aaa
adc
cmp
jns
adc
pop
leave
or
outs
sbb
add
mov
push
or
adc
movs
add
icebp
or
ret
cmps
push
or
adc
push
push
mov
pusha
mov
mov
adc
inc
or
aaa
sub
out
out
xchg
or
adc
inc
dec
inc
iret
(bad)
mov
sbb
dec
mov
mov
aas
mov
in
es
inc
sahf
adc
xor
repz
mov
loopne
adc
sub
fisub
sbb
cld
out
enter
push
pop
sbb
dec
adc
call
adc
(bad)
(bad)
xchg
pop
mov
mov
in
adc
cmps
test
sub
fucomp
in
in
sub
jp
jecxz
sub
xor
data16
js
imul
lods
xchg
xchg
adc
adc
xchg
mov
cmp
add
mov
and
popa
das
adc
shr
out
retf
pop
adc
fsub
cld
pop
(bad)
cmp
sbb
adc
js
mov
sti
add
fwait
cli
jl
jecxz
dec
lea
cs
xchg
out
stc
(bad)
(bad)
adc
outs
out
adc
in
rcl
and
pop
loop
fisub
sbb
push
ins
popa
lea
shr
(bad)
sbb
sahf
aaa
aam
mov
dec
fsub
cmp
call
loopne
adc
ja
mov
loope
cli
push
mov
outs
push
xor
fld
ret
arpl
push
or
adc
in
fmul
lds
sbb
cmp
inc
adc
aaa
scas
test
or
inc
ss
neg
cld
push
adc
add
mov
cdq
lods
in
adc
(bad)
mov
sbb
fidiv
hlt
stc
push
shr
outs
push
jae
mov
push
movs
mov
mov
outs
push
adc
ror
push
out
lahf
inc
adc
gs
sub
cmc
push
adc
fcmove
xchg
adc
push
xchg
adc
mov
ficomp
mov
and
test
adc
loop
mov
push
(bad)
fs
aam
adc
cmps
in
shr
iret
mov
loopne
gs
jecxz
jle
mov
lea
std
sub
dec
adc
outs
sbb
jmp
fldpi
aam
enter
or
sbb
mov
xor
mov
movs
call
icebp
cmps
adc
mov
jae
dec
rol
outs
adc
repnz
enter
stos
adc
cld
jne
mov
pop
movs
push
fisttp
push
or
enter
adc
popa
cs
dec
sub
sbb
jl
call
mov
fdivr
dec
neg
lods
aad
mov
push
cld
inc
jp
adc
ret
cmc
sbb
add
and
and
jae
dec
pop
jp
push
imul
sbb
pop
push
sub
mov
hlt
xor
ret
gs
xchg
inc
adc
push
pushf
rcl
sub
cmp
hlt
mov
jge
es
adc
inc
jno
lahf
fs
adc
xor
jne
cs
adc
je
add
arpl
jp
adc
push
in
push
jno
std
cld
es
adc
inc
stos
and
mov
retf
fsub
xchg
adc
aaa
in
das
aas
adc
pop
cdq
iret
jmp
retf
daa
in
adc
pop
cmp
hlt
or
neg
and
adc
ins
jo
fldenv
xor
adc
push
mov
xchg
jb
jmp
rcl
jg
add
adc
inc
fisubr
pop
add
add
adc
fcmovb
adc
out
(bad)
jbe
xchg
adc
mov
mov
adc
in
adc
adc
sbb
inc
sub
or
dec
nop
pusha
das
adc
cli
add
outs
jns
stos
fsubr
push
adc
(bad)
jmp
mov
adc
push
mov
popf
add
add
adc
aaa
inc
adc
jmp
mov
fist
pusha
sbb
mov
push
dec
xor
gs
cmp
test
adc
lods
(bad)
and
jbe
iret
mov
jo
ficom
out
idiv
xchg
data16
ror
sub
and
jno
sbb
xchg
mov
mov
mov
ret
dec
adc
dec
ds
cmp
xchg
in
adc
xchg
jg
xor
repz
adc
loop
add
pop
enter
imul
ins
adc
or
mov
xchg
mov
fild
out
into
xor
je
mov
pop
cmps
or
pop
adc
sbb
or
inc
les
adc
jnp
sti
dec
cmp
outs
rcl
das
inc
adc
pop
xor
in
gs
or
jp
sub
fild
cmp
icebp
imul
or
push
stos
mov
cmp
xchg
mov
mov
inc
xchg
pop
imul
adc
icebp
add
rol
adc
ror
aas
cmp
adc
mov
jb
pop
fmul
test
iret
or
inc
jae
js
jmp
adc
leave
xor
adc
sub
shl
jnp
iret
repnz
adc
xor
and
stos
shl
adc
adc
int
jge
adc
mov
xor
out
rcl
mov
pop
and
dec
and
or
int
mov
adc
add
xor
aaa
xchg
inc
lock
lock
pushf
rcl
push
(bad)
std
fisttp
push
adc
shl
sahf
mov
inc
mov
add
fimul
adc
sub
pop
jle
jae
inc
xchg
daa
add
push
mov
icebp
outs
push
(bad)
sbb
test
pop
inc
dec
test
lods
jbe
push
mov
sub
xchg
rcr
pop
hlt
stc
push
adc
ret
push
fcom
iret
push
mov
jge
fs
adc
jbe
xchg
out
dec
inc
stos
adc
xor
push
lods
adc
in
xchg
pushf
pop
jne
sbb
or
fsub
sahf
adc
dec
mov
mov
ret
sub
fcom
xor
mov
and
add
adc
(bad)
ja
shl
adc
adc
jne
sub
dec
adc
mov
lea
push
(bad)
push
outs
repnz
cs
adc
jno
pushf
ss
enter
jl
lods
adc
retf
pop
xor
fsub
xlat
je
push
sbb
pop
ins
mov
jecxz
jae
inc
push
repnz
adc
popf
fcomp
add
addr16
xchg
mov
test
cwde
sbb
push
fwait
mov
jge
adc
adc
add
in
test
xchg
xchg
enter
lods
inc
pushf
cmp
ret
cs
call
mov
jae
ins
sti
adc
dec
lds
sbb
jmp
jmp
into
inc
icebp
sub
jne
movs
dec
sahf
hlt
int
pop
call
in
and
cmp
in
in
push
inc
mov
dec
sbb
mov
sbb
jbe
mov
xchg
adc
outs
clc
icebp
mov
(bad)
hlt
jp
movs
in
scas
jge
lock
adc
fisub
and
adc
jns
cld
lahf
sbb
mov
sbb
cs
(bad)
aaa
add
xor
push
or
pop
fsubr
xor
inc
xchg
mov
aas
retf
xor
popa
lea
outs
mov
adc
xor
adc
clc
jo
adc
gs
imul
mov
dec
adc
adc
imul
popa
aam
push
lods
inc
adc
in
iret
lds
push
call
inc
inc
call
jno
leave
dec
add
aam
popf
mov
adc
dec
mov
enter
jecxz
pop
mov
pop
jns
into
ins
and
aad
test
jmp
adc
test
hlt
xlat
lods
sub
(bad)
sbb
in
mov
js
aam
loopne
popf
sbb
fist
pop
xor
outs
mov
adc
dec
jnp
sar
pop
(bad)
and
inc
cli
adc
movs
(bad)
fild
stos
in
adc
daa
sub
adc
push
call
loope
movs
arpl
mul
pop
inc
loopne
sbb
jecxz
out
mov
push
ret
(bad)
dec
out
adc
mov
and
and
fwait
pop
pop
mov
adc
es
mov
(bad)
xor
cmp
repz
cs
adc
xchg
movs
sbb
adc
pop
jo
push
(bad)
into
adc
imul
dec
sbb
test
adc
xchg
test
dec
les
dec
fs
sub
xchg
jbe
inc
sub
adc
and
pop
adc
lock
mul
add
fsubp
fmul
sbb
push
and
xchg
cmp
and
test
add
add
push
fist
xchg
push
rcr
cmps
add
jb
nop
popf
outs
cli
rcl
movs
or
pop
adc
std
adc
pop
sbb
pop
adc
ret
add
sub
push
scas
mov
sti
xchg
pusha
adc
cli
xchg
mov
ds
push
mov
xchg
jmp
fmul
les
in
jmp
adc
push
mov
xor
dec
je
pop
ins
adc
inc
daa
ror
ja
(bad)
iret
ins
jg
fsubr
jle
dec
jae
mov
pop
out
dec
or
jne
in
cmp
push
call
aad
cmp
(bad)
cmp
int3
das
sbb
pop
mov
pop
imul
fnstsw
sbb
arpl
(bad)
jl
cmp
mov
lods
jmp
adc
jmp
fisttp
xchg
pop
push
jnp
adc
repnz
leave
fiadd
jo
not
mov
icebp
ja
adc
sub
cmp
inc
adc
retf
push
int3
adc
sbb
loopne
in
ficom
es
aas
outs
mov
mov
inc
dec
into
push
test
bound
adc
push
adc
mov
xor
adc
out
jae
mov
stos
int3
fs
and
out
sahf
mov
adc
cmp
fucomip
xchg
out
adc
aas
mov
xor
fs
stos
adc
mov
cmp
mov
lock
mov
rcl
shl
push
adc
jecxz
les
std
lea
retf
mov
ret
icebp
jne
vpunpckhwd
adc
and
call
fidivr
xor
mov
push
das
aaa
adc
ja
cmps
and
dec
mov
mov
stos
add
adc
repnz
cdq
popf
sbb
(bad)
push
inc
mov
dec
inc
jne
test
cwde
pcmpeqb
fst
sbb
or
add
jb
adc
xchg
mov
push
cld
mov
pop
mov
mov
rcl
add
mov
ins
das
lock
mov
pop
outs
dec
cs
adc
sahf
sub
out
add
pushf
imul
sbb
mov
push
adc
call
xchg
pop
in
(bad)
(bad)
shl
adc
repz
push
adc
ins
cmps
push
retf
jge
lods
mov
pop
xlat
call
inc
scas
jl
adc
enter
outs
cmp
ds
jno
adc
xchg
je
scas
in
sbb
rcr
cmp
adc
daa
push
je
xchg
std
ds
repz
in
and
cld
adc
xor
test
inc
push
retf
cmp
jno
mov
shl
xchg
jecxz
idiv
pushf
scas
inc
push
cld
in
push
push
test
ins
adc
and
jbe
jl
fs
adc
jns
je
jge
push
cli
adc
fild
pop
and
xchg
pop
xchg
or
ficomp
adc
and
fwait
inc
push
add
and
adc
pop
shl
jno
mov
add
cmps
jge
adc
scas
ret
push
sub
dec
call
adc
mov
jns
mov
mov
xchg
and
lods
aad
dec
add
or
and
inc
adc
pusha
(bad)
mov
jl
adc
lea
popf
adc
inc
sub
adc
pop
push
cmp
mov
outs
cli
push
(bad)
push
dec
or
jecxz
mov
pushf
sub
jb
movs
scas
push
dec
loope
mov
mov
ins
xchg
pusha
xor
mul
call
dec
and
jne
lods
cmp
adc
fsubr
fistp
pop
adc
(bad)
jl
xchg
in
jmp
mov
mov
aas
aam
in
mov
push
pop
and
push
xor
clc
sbb
jb
and
sub
mov
retf
into
stos
dec
aad
sub
cdq
sbb
imul
inc
mov
adc
popa
xchg
dec
jbe
in
adc
sti
shr
sbb
mov
or
ins
hlt
or
push
adc
dec
imul
pushf
rcl
js
lahf
jp
imul
dec
sub
xchg
test
ins
xchg
inc
cli
unpcklps
jb
repz
xchg
pop
rcl
rcl
pop
ficom
mov
fdivr
jge
adc
dec
cli
iret
or
adc
sbb
into
hlt
sti
cdq
push
not
rol
out
aas
adc
mov
sbb
loope
lock
test
cmp
iret
cs
pushf
push
jae
int3
jns
in
jle
sub
sbb
mov
add
sti
pop
push
or
ficom
aaa
hlt
xor
ja
int
out
pusha
test
loope
jnp
lock
jg
mov
push
or
sub
fnstsw
and
dec
inc
neg
adc
scas
pop
aas
fsub
mov
push
dec
pop
nop
and
mov
in
(bad)
xor
add
dec
sbb
leave
pop
fwait
pushf
add
test
jo
mov
mov
jns
ins
sahf
mov
xor
push
loop
adc
push
stos
cdq
push
arpl
push
push
sub
mov
or
rol
inc
push
adc
cmp
xchg
fidivr
adc
mov
jecxz
adc
fild
mov
or
mov
push
adc
and
ret
fcomp
inc
cmps
aas
mov
xchg
les
push
rol
mov
inc
jecxz
and
mov
cwde
mov
sub
ins
push
outs
mov
dec
ficom
adc
cmp
mov
xor
popa
fist
retf
xor
xchg
int3
push
cmps
inc
dec
test
mov
mov
gs
jbe
call
loope
mov
aam
(bad)
stos
test
cwde
sbb
enter
add
push
add
push
fist
xchg
cwde
or
in
and
mov
clc
mov
ret
test
rcr
retf
mov
loopne
data16
addr16
jg
retf
sahf
push
mov
mov
stc
jno
ret
jmp
bnd
loopne
in
(bad)
adc
dec
ficom
sbb
pop
add
xchg
mov
pushf
adc
mov
rcl
xlat
cmp
sub
aad
ja
mov
test
cmp
clc
adc
(bad)
mov
jl
jp
popa
inc
fucom
push
push
push
pop
imul
adc
aad
into
jo
mov
adc
jno
bound
mov
push
push
addr16
or
stos
(bad)
adc
pusha
cdq
(bad)
int
adc
add
les
cmc
test
hlt
je
ins
loopne
imul
sbb
out
mov
or
jo
int3
push
sub
icebp
fwait
add
fidivr
inc
mov
mov
adc
daa
imul
adc
in
(bad)
leave
fs
cld
gs
add
loope
adc
inc
int3
js
retf
mov
xor
sti
adc
out
add
ret
jnp
sub
fistp
pop
push
nop
test
call
or
stos
adc
scas
adc
and
enter
jg
aam
cmp
xlat
into
mov
add
outs
sub
adc
pop
adc
(bad)
repnz
push
loop
sbb
sbb
adc
dec
in
je
fcom
or
icebp
daa
add
xchg
ds
cld
fs
stc
inc
in
fcomp
adc
xchg
cdq
addr16
xchg
sub
arpl
pop
xchg
jno
enter
or
lods
imul
and
inc
dec
ins
ins
lods
test
mov
dec
sbb
adc
lds
bound
adc
push
and
sbb
push
repz
push
jb
outs
icebp
imul
rcl
lds
sbb
xchg
sbb
in
in
test
adc
pop
fimul
out
pusha
int3
adc
sar
inc
add
adc
sbb
adc
or
fdiv
dec
push
push
fidiv
push
mov
shr
pop
adc
aam
jmp
adc
mov
add
enter
sti
mov
adc
fld
std
adc
dec
sahf
fdivr
je
pop
adc
jge
or
push
lods
bnd
and
cld
call
cli
fcomp
push
sbb
push
or
(bad)
sbb
ins
adc
test
inc
and
push
loop
imul
cs
sbb
scas
xchg
(bad)
or
jle
adc
sbb
jno
or
ret
dec
push
imul
xchg
jne
pushf
mov
ja
and
out
std
adc
movs
imul
dec
or
mov
jmp
jbe
fnsave
adc
aas
sbb
int
mov
inc
push
jmp
push
mov
scas
pop
mov
xchg
mov
fisubr
(bad)
imul
push
icebp
mov
sbb
mov
inc
adc
or
add
adc
(bad)
clc
imul
(bad)
xchg
jae
jns
loope
popa
push
sub
ja
push
rol
push
add
cwde
xor
push
add
add
adc
pop
rcr
xchg
call
mov
xchg
push
in
mov
mov
stos
mov
out
pop
adc
enter
pusha
cmp
xor
in
mov
stc
idiv
les
and
cmps
add
push
jae
imul
loopne
jne
jecxz
stos
popf
adc
sbb
lea
sub
mov
retf
fst
aam
enter
or
div
jl
adc
xor
add
sbb
mov
test
jge
or
out
mov
sbb
push
inc
pop
popf
fist
cld
push
popa
or
dec
fnsave
je
add
bound
cmp
js
sbb
xchg
adc
inc
xor
aas
xchg
(bad)
adc
retf
ret
and
xor
imul
iret
adc
jmp
addr16
in
(bad)
fnstsw
ss
retf
adc
es
cmp
loop
pop
adc
ret
cmp
and
adc
enter
cmc
jge
sbb
pop
and
lahf
ins
adc
adc
cmp
fist
clc
nop
lock
adc
xlat
jp
xchg
enter
out
movs
jns
cmp
adc
in
push
int3
xor
push
push
clc
mov
sbb
bound
xchg
dec
stc
mov
fst
sti
pop
sbb
xchg
in
cdq
jmp
pop
mov
retf
add
xor
leave
adc
add
xor
adc
push
data16
loope
xchg
inc
jo
jg
xor
ret
jne
adc
enter
ja
mov
stos
mov
push
dec
adc
or
clc
mov
sahf
pop
jmp
pop
jg
lds
loop
std
mov
inc
popf
adc
mov
jno
pusha
imul
test
and
sbb
mov
lods
pop
dec
push
adc
pcmpgtd
mov
inc
adc
jns
mov
adc
jmp
adc
das
aas
fs
lock
enter
adc
adc
or
adc
fbld
mov
add
imul
outs
dec
cmps
push
dec
jle
pop
mov
cmp
sbb
movs
adc
jbe
fs
daa
adc
or
xchg
dec
iret
push
lock
punpcklbw
inc
arpl
(bad)
adc
and
adc
and
fdivr
mov
pop
punpckldq
dec
adc
fwait
mov
sub
mov
loope
sbb
or
mov
push
xchg
data16
pop
and
add
je
cdq
popa
bnd
add
sbb
retf
push
push
into
cmp
cmp
sub
mov
sbb
add
iret
int
test
mov
les
jge
pop
jmp
adc
jbe
pop
jle
fnsave
test
push
dec
daa
pop
enter
xchg
in
jno
pop
or
sbb
iret
int3
call
jmp
pop
jmp
aam
stos
cld
adc
xchg
xlat
xchg
add
lods
movs
mov
sbb
or
inc
mov
sbb
loope
je
adc
fistp
pop
or
dec
jmp
in
cli
pop
pop
cwde
xchg
gs
adc
push
adc
out
mov
adc
adc
mov
mov
push
cmp
loop
mov
int
jp
adc
push
scas
jo
add
je
inc
int
or
jb
dec
xadd
cdq
jne
fs
pushf
gs
(bad)
cmp
fist
or
in
lahf
sahf
and
retf
std
adc
xor
adc
cmp
add
loop
adc
enter
(bad)
int3
into
sbb
pop
in
and
ins
test
ins
(bad)
mov
out
adc
sub
xor
in
adc
sbb
(bad)
lods
jb
adc
int3
daa
loope
(bad)
and
adc
fisub
outs
adc
push
test
push
lods
push
aam
push
movs
jmp
push
adc
(bad)
ds
mov
push
inc
adc
dec
jbe
sub
inc
push
adc
pop
cmp
adc
std
nop
mov
adc
pop
(bad)
(bad)
lock
adc
cmp
sbb
adc
outs
into
mov
adc
cdq
loopne
inc
gs
in
ins
mov
call
shl
dec
loopne
mov
jecxz
pusha
adc
mov
call
inc
outs
into
adc
ds
mov
fld
enter
cmp
enter
push
mov
xor
adc
lods
shl
cmp
int3
aad
retf
mov
jl
adc
jae
push
cmp
dec
xor
lahf
add
sahf
or
mov
dec
loop
jge
cmc
mov
xor
fisttp
adc
add
loope
adc
xchg
les
sbb
push
inc
mov
ja
or
ins
mov
adc
mov
ror
call
xchg
push
mov
adc
jp
jmp
or
jno
outs
mov
loopne
sbb
mov
hlt
xor
(bad)
mov
push
mov
mov
lods
jge
lds
pop
in
out
sbb
lahf
test
or
mov
jne
clc
sbb
xchg
pop
adc
in
sub
addr16
arpl
shl
xchg
test
xlat
mov
mov
push
clc
and
adc
adc
das
hlt
xchg
nop
(bad)
sbb
adc
cdq
pushf
(bad)
mov
call
retf
in
mov
mov
push
adc
cmc
jmp
test
and
int
fld
les
imul
dec
bound
adc
cwde
mov
jg
cmps
jmp
test
cmp
cmp
fisub
inc
adc
lds
cs
inc
(bad)
bnd
jno
mov
xchg
sbb
adc
push
clc
ret
retf
dec
adc
dec
jmp
clc
sbb
jae
jns
imul
adc
sub
stos
in
inc
jmp
frstor
xlat
adc
mov
mov
test
ror
adc
aam
into
adc
(bad)
mov
mov
cli
sbb
repnz
pop
lahf
dec
mov
mov
les
retf
mov
pop
pop
push
in
mov
jecxz
add
mov
call
js
adc
push
movs
dec
or
clc
adc
arpl
int3
adc
or
xor
jmp
mov
pop
or
dec
jmp
sbb
mov
lods
dec
mov
inc
mov
mov
jmp
adc
lea
shl
ret
xchg
and
and
cmps
adc
jl
pop
loopne
add
lods
into
loope
repz
test
mov
add
idiv
adc
(bad)
int3
mov
movs
test
xor
movs
retf
rcl
xchg
adc
repnz
or
adc
rcr
dec
and
cmp
addr16
test
dec
add
imul
push
push
xchg
push
xchg
fidivr
push
or
inc
jo
push
pushf
mov
jmp
add
pop
adc
adc
jns
adc
fmul
out
pop
in
ret
adc
cs
or
jmp
pop
js
adc
adc
cli
repnz
gs
lock
push
out
inc
outs
add
ins
daa
ins
push
cmp
adc
repnz
loop
xchg
add
jae
sbb
imul
aad
adc
test
in
sbb
mov
adc
jecxz
cmps
cmp
call
addr16
aam
xor
loope
adc
lock
adc
aam
and
xor
xor
adc
push
scas
adc
cwde
cmp
shr
adc
add
fstp
dec
outs
or
fist
push
pop
xlat
fist
fldcw
(bad)
adc
call
cmp
add
mov
js
int3
movs
fldenv
jae
sub
out
push
sub
sbb
push
push
jle
ds
adc
jbe
or
add
enter
outs
push
clc
cmp
push
xchg
shr
xchg
mov
cmp
jnp
out
ror
int3
leave
inc
adc
pop
cmp
adc
mov
and
call
je
stos
retf
rcl
xchg
inc
jle
mov
xchg
pop
jecxz
dec
dec
mov
lea
add
sar
sar
sbb
add
cli
das
adc
or
adc
mov
(bad)
push
aaa
mov
rcl
lahf
push
jmp
and
cmp
stc
jbe
jae
std
mov
sbb
mov
dec
aas
(bad)
es
cwde
cmp
fwait
test
ret
adc
movs
add
into
(bad)
jnp
xchg
dec
xchg
neg
int3
rcl
lahf
jne
inc
js
pop
adc
retf
hlt
es
cwde
add
in
cdq
adc
fnstcw
mov
test
mov
fcom
pop
jmp
push
pop
sub
sbb
gs
jbe
push
sbb
mov
in
push
jb
inc
adc
mov
sahf
xchg
adc
xchg
sub
pop
mov
add
scas
call
mov
mov
pop
xchg
aad
sub
in
je
movs
sbb
addr16
ret
push
mov
pop
adc
cmp
inc
mov
mov
sbb
adc
sbb
in
(bad)
das
lods
adc
fdivr
and
aam
retf
adc
xchg
pop
xor
add
mov
fcmovnu
out
neg
mov
data16
js
popa
loopne
push
sbb
adc
nop
test
mov
cdq
xchg
adc
jnp
sbb
adc
repz
jae
aad
push
jmp
(bad)
cld
add
jmp
mov
popa
in
jno
xchg
and
movs
sbb
adc
jne
loopne
aaa
sub
sub
jbe
inc
(bad)
adc
add
int
jns
sub
stos
adc
(bad)
adc
or
aad
scas
cmp
icebp
xlat
jno
mov
sub
iret
ror
(bad)
adc
pop
xchg
cmp
mov
adc
rcr
(bad)
mov
imul
jno
cld
sbb
lods
cmp
mov
movs
or
test
adc
push
mov
nop
adc
xor
fs
cmps
and
inc
add
lods
aaa
cli
stos
out
je
sbb
xor
outs
add
pusha
adc
pop
mov
add
xor
adc
aam
cmp
mov
inc
adc
hlt
and
cmp
pop
adc
mov
jg
add
cmp
retf
pop
lods
cmp
cmps
aad
xchg
mov
icebp
sbb
dec
adc
xor
call
repz
pop
popf
adc
xchg
jbe
outs
stos
xor
cmp
outs
inc
pop
adc
lods
sub
pop
stos
or
cdq
push
iret
shl
adc
inc
or
test
std
(bad)
imul
dec
stos
xchg
jno
ja
cmp
outs
pop
push
mul
adc
repnz
adc
adc
sbb
(bad)
enter
push
lea
mov
pop
cs
jmp
les
je
(bad)
sti
inc
aam
pop
adc
and
push
out
lea
xor
inc
call
and
rcl
and
cmp
je
push
push
cwde
xchg
dec
scas
and
push
pop
sbb
jbe
and
fwait
mov
sub
jge
mov
mov
or
not
xchg
out
fs
dec
inc
or
lock
test
sbb
out
fnstsw
sub
adc
push
stos
jae
mov
jecxz
mov
xor
jmp
fcom
pop
imul
fmul
icebp
xchg
test
(bad)
sub
adc
lds
push
sbb
test
inc
or
inc
xchg
xchg
xchg
lods
dec
xor
xor
push
(bad)
fs
fisub
out
xchg
stc
mov
jns
rcr
sub
dec
jbe
push
out
fisubr
mov
inc
cwde
outs
mov
hlt
push
sub
aam
cmp
and
test
inc
mov
pushf
mov
adc
sub
add
loop
push
mov
sbb
test
pop
test
jnp
push
xchg
cmp
jne
into
xchg
out
inc
loopne
adc
jecxz
push
dec
mov
lea
test
add
push
arpl
jmp
fcom
adc
mov
sub
js
out
adc
push
aaa
mov
cmps
hlt
adc
in
cmc
(bad)
shl
jl
adc
and
fwait
popf
dec
ins
adc
cld
loopne
js
dec
cmp
lea
sar
test
adc
pop
push
fwait
repnz
xor
add
aam
mov
mov
call
mov
add
mov
test
push
xchg
adc
add
imul
jb
fmul
jge
sahf
adc
inc
cmps
mov
adc
mov
jmp
ror
sub
sub
in
test
sbb
imul
fs
and
call
mov
xor
arpl
jge
bound
setg
mov
jl
mov
mov
add
cmp
lods
adc
jmp
movs
push
aam
popf
push
cmp
cwde
mov
test
push
ja
dec
hlt
cmp
outs
das
mov
dec
inc
adc
imul
or
mov
jne
cmc
and
push
je
mov
add
push
jmp
mov
loope
adc
sbb
mov
adc
mov
dec
mov
jg
lea
mov
inc
pusha
push
pop
dec
setns
pushf
mov
fidiv
(bad)
sbb
push
les
jo
pop
mov
adc
sub
inc
dec
jns
sub
fsubr
dec
retf
ja
pop
in
mov
pop
mov
xor
call
mov
pusha
call
aad
pushf
(bad)
in
aam
push
or
les
mov
dec
jbe
or
xchg
adc
idiv
adc
or
(bad)
sbb
out
adc
adc
outs
and
(bad)
arpl
sbb
std
je
pop
cmp
xor
sbb
sbb
mov
xor
xor
les
sub
adc
or
and
mov
sub
xchg
inc
pop
mov
test
sub
mov
push
xchg
xor
in
call
es
loopne
mov
cwde
sbb
fdiv
mov
psubsb
sbb
adc
mov
pop
sub
popa
sbb
sbb
dec
pushf
call
nop
ffree
xchg
mov
adc
mov
cmps
xor
clc
jns
inc
jo
mov
stos
in
int3
idiv
adc
xchg
xlat
iret
jo
jmp
retf
cmp
inc
test
sub
std
imul
stos
adc
jmp
xchg
sbb
xchg
and
js
xchg
call
cmp
(bad)
sbb
movs
rcl
and
fnstcw
std
adc
mov
aas
pop
adc
cmp
cs
ins
inc
xchg
js
or
imul
out
gs
stos
and
mov
sti
(bad)
sbb
pushf
adc
lods
mov
and
je
int
jne
(bad)
push
scas
add
hlt
dec
loopne
out
adc
or
enter
idiv
or
sti
in
jne
add
hlt
adc
sbb
out
add
jl
sbb
lods
fwait
sti
mov
rcl
dec
inc
fnsave
adc
cmp
repz
dec
in
adc
or
dec
fcom
push
fld
icebp
imul
cmp
xchg
mov
adc
movs
jno
add
mov
lds
int3
adc
lods
(bad)
jle
(bad)
cmp
mov
stc
mov
adc
daa
sub
sub
push
adc
push
push
nop
xor
lahf
adc
dec
push
imul
pushf
push
sub
sub
cmp
outs
xchg
lea
mov
pushf
push
shr
(bad)
es
out
dec
aaa
ja
loop
ins
adc
cs
repnz
xchg
and
in
adc
cmps
push
mov
mov
rcl
push
loopne
adc
cld
jecxz
outs
test
in
lea
push
inc
into
adc
arpl
ds
mov
popa
enter
adc
les
mov
mov
dec
stos
out
mov
xor
aaa
movs
pop
mov
mov
mov
enter
scas
in
adc
sub
adc
popa
sub
loopne
out
adc
inc
lock
sbb
pop
add
nop
adc
rol
cmc
adc
and
inc
mov
popf
pop
xchg
add
test
ins
or
mov
adc
push
call
adc
shr
ror
mov
adc
in
mov
xchg
xlat
push
movs
adc
cmps
xor
in
push
xchg
mov
adc
push
mov
pop
or
mov
fisttp
clc
mov
popa
lea
jp
pop
mov
call
dec
xor
ret
jbe
adc
cmp
xchg
rcl
jmp
out
adc
xchg
cmp
push
(bad)
jno
adc
cs
mov
fwait
in
cmc
inc
clc
div
cmps
mov
adc
leave
call
jo
scas
mov
mov
or
bsf
aam
ja
cmps
adc
push
dec
sub
pop
push
xchg
pop
vpsrld
push
leave
and
mov
inc
test
jge
imul
mov
mov
mov
dec
js
movs
cld
add
fnstcw
leave
out
adc
shl
fld
jmp
mov
cmp
jnp
aaa
add
hlt
pop
sbb
clc
imul
xchg
call
pop
cmp
out
mov
pop
stos
in
out
outs
push
xchg
mov
adc
data16
adc
jne
out
movs
int
gs
pop
les
daa
mov
pmaxsw
adc
cmp
dec
arpl
mov
jb
dec
lods
add
push
out
cmp
adc
mov
rcl
add
clc
xchg
mov
dec
cmp
call
sub
jl
xchg
and
fsub
in
les
cmc
lds
int
js
mov
(bad)
addr16
aas
je
imul
sub
jp
sbb
xor
sbb
rcl
adc
adc
pop
les
sahf
adc
aaa
cwde
cmps
jbe
js
adc
mov
rol
stos
jns
sbb
aam
dec
inc
mov
or
ss
leave
inc
jae
push
inc
adc
mov
adc
xchg
and
imul
mov
stos
pop
add
and
cs
arpl
xchg
js
add
fisubr
stos
adc
xor
std
mov
neg
jl
adc
pop
loopne
xchg
imul
jno
js
call
sti
adc
popa
cli
mov
ds
and
call
(bad)
(bad)
adc
fcmovnbe
adc
cmp
and
stc
adc
loop
mov
sahf
int
arpl
add
ins
jle
push
cdq
sbb
sub
dec
retf
int
or
cmc
cld
pop
hlt
shr
mov
out
sub
dec
je
dec
sub
mov
push
test
clc
or
fst
shl
cmp
mov
xor
jmp
fdivr
ja
repnz
inc
xlat
and
in
cdq
sub
test
mov
(bad)
into
and
mov
add
retf
add
mov
lods
jle
cli
int3
adc
xchg
iret
scas
test
push
and
sub
mov
retf
push
sub
in
push
adc
mov
push
fsub
inc
push
adc
call
adc
fistp
xchg
sub
adc
xchg
adc
movs
add
fist
inc
adc
leave
sub
inc
cmp
call
sahf
cs
adc
add
(bad)
pop
adc
out
jle
test
pop
(bad)
loopne
ss
adc
jb
or
cmp
ds
(bad)
fld
sbb
jns
lds
hlt
fcmovne
adc
ins
dec
xor
adc
outs
into
aaa
scas
cmps
push
cmps
adc
mov
mov
adc
mov
fdiv
adc
jg
popf
les
cld
xchg
push
lods
mov
mov
add
xor
sbb
adc
add
jge
adc
xchg
add
push
inc
ja
hlt
ret
loop
xor
in
mov
je
add
aam
sahf
inc
(bad)
je
loopne
int
mov
push
ja
xchg
pop
jg
imul
push
adc
aad
jnp
push
loop
in
push
dec
dec
dec
add
mov
adc
push
aad
push
jge
cmp
aam
test
cli
adc
mov
mov
mov
nop
or
pop
jnp
les
jp
and
movs
xor
xor
adc
pop
cmc
enter
cdq
adc
jp
xchg
bound
nop
cld
adc
das
pusha
mov
cdq
enter
cs
adc
xor
push
adc
jbe
inc
je
test
js
inc
jl
popa
jmp
mov
jo
xchg
leave
xor
or
inc
adc
push
sbb
mov
nop
xor
add
adc
pop
pop
sub
pop
push
rcl
lds
jp
sub
xchg
stos
mov
clc
and
test
mov
imul
dec
rcl
setae
mov
sbb
sbb
js
mov
cmp
aad
dec
push
jg
not
xchg
xlat
adc
clc
mov
sbb
inc
ins
pop
add
aas
adc
adc
xchg
mov
cmp
sbb
retf
push
pop
mov
outs
mov
jecxz
mov
cmp
cwde
iret
cmp
into
mov
mov
xchg
jno
add
in
addr16
jo
aad
pusha
dec
bts
push
call
and
enter
xor
push
pushf
mov
fs
pop
fcom
dec
sub
fist
pop
out
out
dec
out
pop
inc
mov
enter
call
mov
adc
push
xor
(bad)
repz
push
cmps
int
push
sbb
add
daa
aas
scas
xchg
adc
in
fisub
pop
sub
das
sbb
xor
call
adc
clc
test
mov
xchg
pop
jo
in
jbe
adc
call
shl
(bad)
adc
add
push
(bad)
in
adc
(bad)
or
jae
iret
and
lahf
push
push
inc
push
movs
adc
rcr
fsubr
jbe
adc
popf
jp
xchg
pop
lahf
icebp
adc
push
loopne
xchg
sbb
xchg
adc
add
adc
loopne
jae
es
jnp
cmp
jne
adc
aad
fistp
mov
or
ror
aaa
int3
sar
bound
cli
cs
iret
adc
push
mov
jne
out
ds
adc
mov
and
adc
iret
imul
stos
push
pop
push
int
sub
jmp
pop
push
add
aam
das
or
hlt
cwde
(bad)
or
sbb
fstp
jge
pop
add
jae
jle
loope
test
lock
mov
or
xor
jg
(bad)
xor
cmp
loope
adc
xor
or
jmp
call
jle
fs
ds
cli
adc
pop
test
push
or
hlt
icebp
mov
pop
ins
adc
add
pop
inc
pushf
adc
xor
adc
(bad)
fisub
adc
stc
(bad)
lahf
cmp
push
js
sub
jmp
shl
mov
push
jmp
out
sub
push
sub
push
lds
xchg
int
(bad)
gs
jne
push
push
mov
xor
sbb
out
fsubr
ror
les
ds
mov
mov
scas
push
sti
in
jne
adc
repz
sar
push
test
push
retf
adc
out
mov
lea
xchg
add
outs
jmp
xchg
ds
clc
fnstenv
ss
add
cmps
outs
test
inc
call
mov
leave
sbb
lahf
addr16
sub
das
add
or
sbb
dec
adc
mov
push
popf
add
scas
mov
(bad)
and
xchg
adc
ja
add
fwait
test
scas
sbb
adc
pop
add
pop
push
mul
xchg
div
jnp
mov
add
loope
ret
push
outs
add
aaa
sbb
mov
or
dec
jbe
in
jne
jmp
cmp
mov
and
pop
adc
jecxz
push
pop
jmp
dec
add
fisub
mov
adc
push
pop
adc
fcomp
jb
hlt
jge
es
push
xchg
(bad)
lahf
out
hlt
jne
stos
push
sbb
clc
(bad)
or
jg
jp
pushf
mov
(bad)
adc
mov
addr16
out
rcl
repz
xchg
cmc
imul
mov
mov
stc
jb
dec
mov
jmp
inc
inc
in
lea
cdq
xchg
jbe
mov
adc
xchg
retf
shl
sub
cmc
adc
mov
pop
adc
inc
fbstp
push
stc
ss
mov
mov
arpl
mov
loope
pop
xchg
or
lock
test
loop
icebp
imul
pop
pop
retf
adc
sbb
adc
sbb
add
mov
pop
ret
jno
mov
add
mov
ret
rcr
sub
inc
inc
movs
bswap
in
pusha
bound
ins
inc
jns
sbb
stos
pop
dec
mov
jmp
xchg
aam
sbb
ins
loop
adc
cmps
pop
les
fstp
rcl
adc
jmp
inc
in
sbb
imul
aaa
push
xchg
outs
loop
adc
push
push
inc
mov
cmp
cdq
cmp
mov
ds
push
and
sub
push
and
push
adc
jl
or
popf
adc
and
sti
or
add
cs
loopne
adc
mov
dec
pmuludq
or
and
mov
cmps
aam
xor
jb
mov
push
inc
jbe
ror
aam
adc
adc
aad
repz
mov
sub
jl
jbe
aas
jge
mov
in
retf
sbb
out
repz
loopne
call
mov
movs
aas
pop
test
xor
shl
and
inc
adc
test
adc
or
das
adc
mov
xor
jae
or
repz
loopne
adc
aam
jl
repnz
adc
push
xchg
dec
(bad)
jnp
imul
add
cli
xchg
xchg
nop
ret
imul
stc
add
xchg
lods
aas
int3
fsub
imul
lds
jnp
push
add
dec
sti
push
xchg
iret
cli
stos
cmp
adc
fild
and
lods
and
fxch
pop
(bad)
mov
pop
adc
sbb
and
in
loop
imul
repnz
into
cli
imul
iret
adc
mov
mov
adc
fst
cmp
in
jne
(bad)
or
test
ja
int3
dec
adc
cdq
jnp
loope
dec
retf
adc
push
xor
mov
sbb
xor
add
xor
cmc
sub
shl
jmp
fmul
adc
push
inc
push
adc
or
adc
sub
inc
and
icebp
rcl
push
and
pop
inc
push
aaa
mov
js
outs
xchg
int3
sbb
inc
jno
ficom
das
stc
clc
fwait
pop
in
push
movs
lods
shr
sbb
push
dec
arpl
push
mov
sbb
inc
add
xor
mov
das
xchg
hlt
mov
div
pushf
stos
adc
(bad)
mov
out
lock
dec
cmp
mov
mov
mov
xchg
lods
test
mov
cmps
hlt
mov
xchg
fsub
lahf
ror
bswap
mov
mov
dec
fimul
add
in
in
jb
adc
enter
imul
popf
cmp
and
dec
xor
pop
adc
xchg
aaa
fcomp
dec
add
mov
adc
shl
stos
test
push
arpl
adc
push
dec
sub
adc
in
call
adc
mov
mov
adc
ficom
sbb
sar
inc
push
dec
ds
imul
pop
bound
inc
mov
ja
add
ins
mov
repnz
adc
(bad)
xor
sahf
jp
std
add
and
pusha
div
adc
mov
not
out
call
fwait
or
sub
inc
mov
div
aas
retf
das
in
jge
adc
add
clc
lahf
jg
sub
scas
adc
mov
test
(bad)
pinsrw
or
in
cmc
in
movs
hlt
adc
pop
lea
(bad)
(bad)
frstor
push
lods
push
mov
mov
push
xor
push
dec
rcl
push
xor
inc
aam
jmp
pop
retf
retf
mov
mov
imul
ja
pop
adc
xchg
ficom
out
test
sbb
cmps
call
ret
push
je
mov
cld
pop
mov
dec
std
fisubr
adc
rol
stos
aam
ins
sbb
mov
fwait
lods
jae
dec
lock
adc
inc
mov
cmp
in
dec
(bad)
adc
ins
pop
fld
sbb
xchg
mov
scas
push
gs
mov
lods
jb
aad
adc
je
add
adc
cmovno
adc
cmp
repnz
xor
push
adc
mov
cmp
sbb
aaa
sub
nop
outs
pop
mov
mov
mov
mov
sbb
push
movs
cwde
adc
addr16
adc
add
adc
shl
loope
mov
sub
and
(bad)
mov
std
xchg
mov
adc
repnz
pop
out
or
cmc
adc
sbb
adc
xor
sub
adc
cli
and
test
dec
repz
add
push
pop
add
sbb
sahf
hlt
pop
aas
sbb
mov
inc
sub
or
rcr
dec
pop
jmp
adc
pop
loop
fdiv
jbe
pusha
loope
je
push
pop
rol
adc
and
in
clc
mov
cwde
daa
iret
in
pop
inc
adc
js
jae
test
adc
je
adc
icebp
jle
stos
pop
xchg
pop
xchg
xchg
xor
(bad)
call
mov
jb
clc
add
adc
cdq
nop
xlat
sub
rol
into
mov
pop
lods
fsub
mov
pop
jecxz
bound
or
in
and
sti
movs
pop
sar
adc
sub
out
push
and
adc
dec
out
clc
push
(bad)
xchg
adc
or
sahf
push
mov
adc
popa
mov
jmp
jno
adc
push
icebp
add
and
dec
(bad)
test
pop
or
ds
scas
sbb
mov
cmps
mov
mov
xchg
sbb
xchg
fs
aas
adc
fdivr
jle
push
push
adc
xchg
add
call
pushf
rcl
test
adc
inc
mov
push
test
repz
mov
test
in
icebp
mov
jmp
inc
out
sahf
lods
stc
clc
aam
int3
mov
xchg
ficomp
cmp
cdq
mov
mov
push
lods
add
push
or
mov
inc
inc
test
jb
adc
hlt
inc
sub
xchg
imul
mov
bound
out
inc
sbb
fdiv
jge
jl
mov
repz
and
in
js
cmps
inc
push
in
push
xchg
lea
rcl
cmp
cmp
hlt
jecxz
inc
mov
lea
ins
sub
adc
adc
fstp
ds
rcl
fcom
adc
or
or
xor
mov
rcr
aaa
adc
xor
mov
cs
adc
and
inc
bnd
ficom
cmp
call
dec
in
imul
cwde
popa
ss
adc
adc
inc
cmps
and
add
cld
ss
adc
jg
push
jno
arpl
mov
adc
inc
repnz
dec
ret
jmp
adc
sub
cmp
and
sahf
ja
sbb
popf
push
mov
sub
int
out
adc
add
not
sbb
xchg
cmp
or
hlt
loopne
shl
inc
sub
jge
pop
das
lods
pop
or
lahf
adc
jle
scas
inc
jae
mov
repnz
jmp
icebp
hlt
in
push
pop
ret
movs
and
mov
jbe
mov
rcr
mov
mov
sub
dec
adc
iret
adc
retf
jle
das
in
and
(bad)
scas
movs
xchg
cdq
xchg
(bad)
jmp
stos
and
fwait
xor
cmc
sar
pop
xchg
div
hlt
mov
jmp
popa
mov
add
push
in
adc
mov
test
fnstenv
dec
jg
test
call
imul
cli
mov
fcmovbe
adc
pop
lds
enter
jae
clc
push
and
pop
jno
stos
jmp
dec
dec
int
ret
jns
mov
inc
retf
scas
fisttp
fiadd
pop
(bad)
call
and
inc
cs
push
push
aam
ins
sub
xchg
js
(bad)
js
enter
retf
rol
adc
lahf
adc
lock
adc
cmps
clc
cmp
cli
adc
fcomp
adc
outs
xchg
in
gs
(bad)
cmp
(bad)
jecxz
mov
adc
lock
movs
jns
mov
fs
mov
leave
push
fwait
aam
push
mov
(bad)
jmp
arpl
sbb
or
aam
or
adc
aad
mov
adc
inc
das
dec
mov
retf
mov
dec
clc
mov
jmp
addr16
adc
jno
es
or
and
push
out
repz
js
jb
mul
scas
pop
pushf
jl
scas
(bad)
xor
ficom
inc
(bad)
push
sbb
scas
sbb
and
ja
in
test
les
(bad)
pop
push
dec
bnd
jg
xchg
xor
repz
call
rol
adc
and
iret
adc
aas
push
push
dec
retf
mov
loopne
mov
jmp
inc
stos
test
xchg
xor
jg
pop
xchg
popf
add
mov
adc
sbb
nop
movs
jo
mov
test
shr
sub
cmp
pushf
adc
or
or
js
ror
sti
dec
enter
in
das
mov
dec
repnz
out
pop
(bad)
add
xor
pop
and
lds
and
loope
jp
cmp
ins
jle
retf
bnd
adc
test
adc
dec
es
xlat
sub
or
cdq
call
jne
shl
sub
dec
ja
add
loope
outs
xchg
push
pop
push
out
mov
or
xor
sub
cmp
fs
inc
repnz
ds
mov
dec
out
adc
out
mov
test
and
mov
psllw
(bad)
push
cmp
inc
mov
mov
int3
pcmpgtw
(bad)
dec
mov
fisubr
sbb
jmp
sub
inc
jb
push
out
push
sub
test
push
pop
push
icebp
mov
dec
cwde
xor
in
push
shl
or
xchg
jle
xor
pushf
push
dec
(bad)
fbstp
pop
cmp
leave
xchg
sbb
cmp
out
stos
retf
inc
in
push
dec
push
jbe
jne
call
xchg
in
clc
shl
loopne
jns
mov
mov
lea
adc
pop
xchg
jns
cmps
adc
xchg
ds
fst
lahf
pop
enter
or
adc
ss
test
xadd
sti
daa
out
jge
out
adc
sub
inc
xchg
and
inc
mov
mov
dec
stos
pop
aam
pop
loop
adc
sahf
mov
aad
sbb
fild
test
not
mov
mov
adc
inc
add
ret
shl
ins
movs
xor
mov
push
adc
mov
call
sub
inc
fsubrp
jb
pop
out
sub
stos
inc
adc
adc
lea
inc
jl
and
cmc
push
adc
mul
or
aas
jl
jge
sar
(bad)
sbb
icebp
dec
stos
scas
mov
loop
clc
sub
bound
stc
je
xor
mov
daa
xor
xchg
push
mov
lahf
scas
shl
sbb
cmovge
mov
adc
sbb
cli
(bad)
and
pushf
adc
jp
call
js
jo
xchg
cmc
je
aaa
adc
push
scas
adc
imul
xchg
sar
and
das
or
sbb
and
sar
adc
cdq
push
pop
mov
popa
rcr
gs
cli
adc
push
fcmove
or
mov
fsubr
cmp
xlat
add
aam
aam
ins
adc
adc
sub
dec
xchg
pop
stos
addr16
adc
sub
pop
icebp
ss
fwait
push
test
(bad)
aad
and
inc
xlat
add
arpl
(bad)
in
inc
adc
scas
call
aam
xchg
adc
adc
adc
cmp
sbb
movs
outs
pop
out
push
(bad)
outs
fldln2
pop
dec
das
test
mov
cmp
sub
cmp
mov
pushf
mov
mov
pop
push
pusha
sub
push
cmp
jge
sti
addr16
arpl
sub
aaa
or
sbb
adc
out
mov
retf
pop
or
mov
ss
dec
adc
push
gs
jle
xor
mov
jmp
es
pop
ins
jbe
ret
add
xor
rcl
dec
stc
push
jb
pop
in
jl
lock
jo
loopne
sbb
push
dec
or
je
add
push
hlt
adc
sbb
pushf
cmp
les
sbb
aam
sbb
xchg
loope
xor
adc
sar
add
adc
sbb
jmp
into
inc
ins
push
adc
cld
mov
mov
lods
test
out
xchg
aaa
aam
stos
stc
cdq
add
mov
mov
push
mov
retf
add
adc
nop
cmp
jne
mov
adc
fdiv
push
test
sub
je
jae
cmp
jnp
adc
sti
push
cmps
jg
call
loopne
fcomp
adc
out
sub
aam
js
movs
and
aas
adc
and
dec
mul
xchg
adc
int
jge
ins
jae
push
xchg
push
adc
adc
sub
lods
call
or
lds
bound
push
ja
jge
es
jb
loope
add
mov
mov
cmp
ffree
iret
inc
cmp
mov
xchg
jmp
cmp
jmp
adc
out
fcmovnu
add
mov
test
sbb
clc
test
jnp
adc
icebp
fwait
stos
jae
mov
jo
es
js
and
xchg
in
in
ins
fisttp
test
push
jecxz
stc
add
jp
add
xor
xchg
push
xor
push
jne
adc
push
je
test
and
adc
sahf
adc
inc
jnp
in
pop
sub
xchg
pop
(bad)
(bad)
mov
pushf
loop
xor
lods
test
out
clc
aam
leave
enter
adc
sub
mov
adc
ins
lock
in
mov
aam
xchg
outs
aas
sbb
loopne
mov
add
sbb
pop
jnp
cmp
sbb
hlt
xchg
jmp
shr
enter
arpl
sub
retf
shl
mov
or
aaa
fstp
adc
cmps
(bad)
loopne
mov
mov
(bad)
xlat
xor
and
jne
jg
adc
arpl
mov
dec
addr16
test
imul
dec
adc
inc
mov
xchg
xchg
inc
add
and
dec
mov
daa
pop
push
mov
mov
add
shr
xor
cwde
mov
adc
sahf
jno
outs
mov
sub
aam
jmp
xchg
je
cmp
leave
les
pop
pop
xchg
pop
fmul
lock
adc
stc
mov
adc
les
adc
aaa
dec
jge
add
pop
add
int3
xchg
call
sbb
clc
loop
fdecstp
mov
and
adc
push
push
jmp
dec
movs
adc
jl
addr16
out
push
adc
fs
xor
sub
mov
mov
dec
(bad)
in
cmp
mov
adc
ficomp
popa
cdq
mov
scas
mov
movs
fs
outs
mov
adc
je
or
mul
adc
data16
cmp
or
cmps
scas
xor
push
pop
popa
inc
push
mov
jg
cli
xchg
push
sbb
dec
mov
pop
test
adc
pop
sbb
cld
lds
or
xchg
mov
inc
loopne
add
xchg
jno
adc
adc
jae
sbb
add
push
dec
adc
mov
rcl
adc
jns
mov
call
stos
push
(bad)
and
rcr
adc
aam
inc
daa
xlat
adc
jmp
mov
mov
mov
adc
jno
cmp
sbb
enter
add
push
jle
dec
add
mov
cmp
mov
outs
fs
add
daa
push
(bad)
adc
push
jne
int3
push
popf
adc
pusha
cmp
adc
and
leave
adc
lods
(bad)
sub
mov
mov
push
pavgw
adc
repnz
mov
mov
xor
jl
test
es
ss
and
adc
xor
jne
adc
sahf
lahf
jb
sub
sbb
push
cmp
idiv
into
nop
xor
sub
mov
pop
iret
adc
(bad)
call
mov
les
lds
jbe
or
xor
rol
mov
loopne
adc
sbb
hlt
pop
and
outs
adc
xchg
cmp
adc
aad
sub
stos
cs
in
aas
leave
inc
xchg
ror
adc
mov
into
xchg
sbb
adc
mov
sahf
and
ror
mov
mov
add
xor
jle
out
pop
(bad)
push
(bad)
mov
jge
mov
movs
inc
enter
sub
cli
pop
adc
and
es
sbb
mov
cmc
jbe
das
in
inc
int3
adc
and
hlt
popa
adc
loop
add
int
iret
adc
ins
inc
add
in
jle
push
int
fmul
adc
mov
and
adc
or
xchg
lahf
xchg
in
hlt
stos
pop
ja
jns
out
adc
jnp
rcr
ficom
xor
add
push
(bad)
sbb
(bad)
stc
sub
cld
int
in
jmp
mov
sub
pop
fs
and
adc
jne
jmp
xor
icebp
ins
adc
push
add
add
add
outs
adc
in
int3
sbb
test
(bad)
cmp
pop
inc
adc
xor
jge
sub
adc
icebp
jl
push
not
inc
inc
push
bound
push
int
lods
sbb
stos
jmp
clc
push
mov
sbb
mov
test
cs
pushf
sbb
or
adc
xor
leave
cmp
and
sbb
ins
mov
adc
sbb
in
pop
adc
mov
mov
push
cdq
loopne
sub
daa
or
sub
push
outs
nop
pop
xlat
ds
outs
adc
push
jp
enter
push
or
gs
xor
xlat
leave
adc
aaa
hlt
add
cld
add
xchg
mov
xlat
dec
repnz
popf
push
shl
enter
nop
mov
adc
cwde
adc
or
fwait
mov
xchg
cmp
inc
push
imul
test
or
inc
dec
add
add
xchg
mov
ins
mov
adc
mov
xor
cmp
sahf
adc
ins
dec
mov
lock
and
jmp
imul
adc
jae
je
dec
adc
push
push
aaa
pop
rol
adc
xchg
ins
push
mov
in
push
or
xchg
jge
lods
pop
pop
pop
adc
push
lahf
cmp
xor
clc
xchg
adc
jns
mov
push
jbe
in
xchg
jmp
fst
xchg
adc
loop
js
std
mov
(bad)
cli
ss
dec
fsubr
imul
sahf
and
dec
(bad)
cs
dec
cdq
ss
pop
or
mov
je
fcomp
xor
in
xchg
adc
pusha
xor
popa
cmp
dec
mov
icebp
push
aam
mov
inc
add
out
lods
sbb
jge
adc
xchg
push
stos
mov
adc
pop
aad
lea
js
inc
(bad)
sub
lds
or
outs
inc
mov
(bad)
adc
pop
add
adc
cmp
fs
icebp
sub
dec
ror
bswap
or
pop
lds
sbb
xor
pop
stos
xchg
or
jne
aad
pop
adc
ins
dec
mov
xlat
xor
loopne
out
xchg
and
mov
ins
pop
adc
addr16
sbb
nop
jle
pop
aas
adc
shl
ds
xchg
cli
dec
cmp
into
mov
sbb
stc
fst
adc
pop
fidivr
push
dec
cmp
inc
mov
sbb
lds
cmps
adc
in
pop
mov
je
addr16
adc
adc
mov
mov
adc
mov
int3
(bad)
xor
add
mov
arpl
xchg
lods
sbb
xor
repz
dec
mov
in
inc
sbb
jl
sti
lods
aas
mov
lods
into
fwait
sbb
sub
mov
pop
sbb
jno
call
jge
les
inc
es
je
add
popf
shl
add
hlt
sbb
iret
in
adc
ror
or
mov
adc
push
fs
cmp
cmp
jnp
imul
shr
xchg
loopne
sub
xor
cmp
add
mov
hlt
shr
jno
rcl
pop
sbb
xor
add
bound
adc
imul
sti
nop
scas
ret
cli
mov
gs
xchg
movs
and
test
out
mov
pop
cmp
pop
in
and
jmp
push
loop
loope
out
int
lea
int3
fcom
scas
pop
mov
adc
sbb
out
inc
stos
int3
dec
adc
mov
sub
adc
shl
adc
mov
inc
loope
(bad)
fist
mov
jo
jno
jmp
xchg
fstp
adc
cmp
xor
mov
dec
cmp
fcom
dec
pop
adc
ret
add
mov
lods
add
cmp
jge
mov
add
hlt
push
inc
shl
adc
lods
cmc
pop
outs
int3
data16
mov
fiadd
fyl2xp1
and
int
sub
xchg
jns
sbb
cwde
hlt
icebp
push
xchg
es
inc
xchg
dec
sar
call
arpl
sbb
cmp
push
call
popa
leave
push
adc
cmp
push
hlt
xor
aam
jbe
jl
popf
ja
stc
xchg
fs
adc
loopne
mov
add
lea
and
hlt
pop
arpl
sti
mov
mov
enter
or
pop
loop
inc
mov
xor
mov
mov
or
cmps
add
jmp
int3
mov
xchg
mov
push
adc
repnz
adc
imul
cld
add
cli
in
aad
loope
sub
adc
sbb
mov
mov
adc
lahf
jle
std
pop
push
dec
mov
cmp
or
xchg
adc
jbe
add
xor
mov
or
sbb
leave
hlt
xor
sub
(bad)
sub
sub
or
aam
jmp
mov
xor
pop
adc
push
call
popa
test
sbb
adc
fcom
mov
dec
adc
clc
add
cli
jnp
mov
adc
in
add
add
xlat
aad
adc
in
xchg
jnp
cld
mov
mov
pop
push
dec
adc
aaa
add
(bad)
push
enter
jb
(bad)
mov
lahf
mov
mov
sub
mov
cmp
jnp
in
outs
je
sub
data16
mov
popa
retf
jo
adc
xor
test
scas
mov
jg
retf
nop
dec
imul
pushf
test
push
xchg
pop
adc
lahf
test
lds
shr
xor
xchg
(bad)
mov
xchg
outs
jno
sub
jmp
xor
ret
aad
mov
adc
dec
and
xchg
dec
pop
out
pop
adc
add
jnp
adc
push
stos
adc
and
in
dec
pop
test
adc
cwde
inc
xlat
mov
test
mov
not
pop
movs
xchg
adc
cmp
add
(bad)
fst
pop
repnz
inc
outs
nop
xor
dec
add
pop
mov
in
movs
push
cmp
inc
push
movs
cmc
pushf
loopne
call
rcr
aaa
fist
push
addr16
inc
pusha
bound
mov
fdiv
sbb
sub
xor
add
inc
dec
into
clc
fisttp
dec
retf
dec
xchg
inc
gs
popa
jns
jb
hlt
adc
dec
outs
sbb
fild
repz
cmp
jb
popa
pushf
sbb
jl
cmp
inc
dec
into
inc
push
jp
mov
je
das
cs
and
outs
push
call
sub
clc
pop
adc
dec
add
jne
xor
mov
sub
popa
outs
jge
movs
sub
in
adc
inc
or
ins
mov
adc
adc
cmp
ret
fnstsw
xlat
imul
adc
xchg
add
xchg
adc
add
xchg
loopne
mov
mov
xchg
aam
pushf
mov
adc
xchg
clc
pop
sub
add
adc
(bad)
jl
push
outs
dec
arpl
in
sti
adc
scas
xor
and
gs
daa
es
xor
or
(bad)
fild
gs
fsub
mov
adc
int
in
pop
push
ins
dec
xor
push
mov
in
jle
add
or
adc
pusha
dec
mov
xchg
lds
sbb
hlt
test
out
ja
push
xchg
or
dec
lock
xor
xor
inc
fstp
xchg
jmp
and
shr
adc
sbb
lea
pop
mov
inc
(bad)
test
shl
dec
pop
icebp
jle
cmps
sub
jo
inc
pop
test
lods
inc
sub
adc
sti
ins
dec
(bad)
pop
ret
and
dec
jp
stc
es
inc
pop
push
aam
or
adc
in
push
cmp
push
movs
adc
std
push
out
mov
cli
adc
cmps
ror
push
xor
mov
arpl
mov
xor
sub
lahf
push
mov
mov
dec
leave
rcl
cmp
mov
mov
aam
mov
sbb
ror
push
cmps
push
test
mov
xor
loopne
in
adc
fxch
push
mov
lea
(bad)
sub
out
add
adc
or
pusha
xlat
mov
ins
jnp
adc
mov
in
cld
retf
mov
sub
loope
jne
not
mov
cmps
es
mov
pusha
in
lods
pop
jae
adc
popf
adc
push
cld
push
push
and
dec
cmps
mov
test
cwde
stos
clc
fcomp
sbb
and
inc
push
xlat
popf
xchg
test
mov
add
je
ret
mov
xchg
hlt
sub
aam
cmp
and
push
fstp
inc
or
fist
nop
jmp
fstp
mov
repnz
popf
cmc
adc
pop
add
jno
data16
or
adc
outs
mov
stos
push
add
fld
adc
or
xchg
sbb
mov
jmp
xor
stos
mov
mov
sbb
addr16
loopne
push
gs
int3
call
xchg
js
xchg
adc
dec
adc
push
adc
in
les
or
test
xor
xor
mov
push
retf
or
cmp
sub
cmc
jle
push
je
cld
add
mov
dec
adc
popa
xchg
adc
push
xor
sub
pop
cmp
nop
mov
jg
mov
push
inc
inc
enter
rcr
pop
(bad)
icebp
jnp
adc
mov
add
adc
xchg
test
or
sub
push
mov
popf
repz
(bad)
mov
xor
adc
ret
xchg
sub
sbb
pop
jecxz
(bad)
in
jns
fsubp
call
stos
cdq
fs
jmp
push
jecxz
lahf
cmps
adc
xlat
cmp
test
sub
mov
rcr
inc
adc
sti
ficom
xor
cmp
sbb
mov
push
adc
lds
ror
adc
mov
out
xor
movs
cmps
push
adc
fs
lods
daa
mov
in
or
stc
clc
dec
int3
pusha
mov
adc
arpl
sub
adc
div
cmp
pop
(bad)
adc
test
mov
mov
dec
adc
iret
shl
sub
add
fcom
and
fwait
adc
repz
or
jmp
inc
jl
jmp
aas
sbb
fld
xor
imul
sbb
fsub
dec
test
adc
les
into
mov
mov
nop
dec
cmps
xor
icebp
jmp
mov
inc
repz
cmp
(bad)
dec
nop
or
cmp
cwde
in
push
call
adc
push
imul
(bad)
stos
and
adc
cli
xchg
hlt
push
xor
test
hlt
push
nop
sub
sbb
sub
ins
xchg
or
popf
push
xor
sbb
or
sbb
js
ss
sti
loop
xchg
adc
(bad)
mov
gs
retf
ret
sbb
jbe
hlt
fs
adc
adc
xchg
ins
and
int
clc
out
data16
pop
scas
or
call
call
aam
or
call
pushf
pusha
fimul
mov
movs
enter
cmp
loopne
jl
movs
mov
lock
es
sti
fnsave
in
test
adc
dec
cmp
xchg
mov
pop
and
dec
xchg
and
jl
(bad)
aam
in
fadd
sbb
fild
jmp
and
movs
aad
cdq
adc
lahf
mov
pop
xor
xchg
adc
loope
lods
mov
inc
adc
popf
mov
mov
push
aam
fimul
in
hlt
stc
dec
push
out
in
sbb
push
scas
lods
push
(bad)
push
push
rcl
push
pusha
mov
fs
ror
pop
xor
aaa
push
adc
mov
inc
jle
js
icebp
out
in
repnz
adc
arpl
adc
pop
xor
adc
jle
in
dec
icebp
cmps
adc
cmp
rcl
je
inc
loopne
sbb
mov
addr16
adc
xchg
and
ds
sbb
in
sbb
or
hlt
retf
test
adc
aaa
out
fcom
jae
fisub
mov
cmc
or
jge
xor
inc
ins
popf
in
xchg
ja
xchg
jb
adc
adc
pop
dec
xchg
add
aam
sub
call
adc
inc
add
dec
xchg
lahf
or
mov
sub
inc
dec
loope
ret
fbstp
inc
ins
call
data16
call
std
and
pop
sub
dec
jmp
mov
sub
mov
adc
adc
cmc
xor
out
les
or
push
jo
adc
clc
adc
ja
add
jge
mov
xchg
add
dec
rol
aam
fsub
idiv
adc
xor
jp
aam
in
adc
or
popf
mov
imul
not
bound
outs
adc
(bad)
retf
js
rol
addr16
and
sub
cdq
rcl
retf
mov
jne
xchg
gs
xchg
adc
jae
jmp
(bad)
xchg
xchg
xor
xchg
cli
in
neg
xor
in
jge
jmp
mov
icebp
es
lea
sub
call
add
out
inc
fisubr
push
loopne
imul
add
fcom
mov
popf
stos
jno
adc
clc
add
out
adc
imul
jg
jo
push
in
daa
and
pop
fsubr
cmp
adc
call
loop
mov
aad
add
lea
xchg
jnp
into
xchg
daa
and
xchg
inc
rcr
jle
jno
dec
in
adc
lahf
cmp
pop
sub
daa
outs
in
adc
or
inc
dec
mov
retf
repnz
cmp
cmp
adc
enter
repnz
jb
add
icebp
pop
cmps
and
adc
pusha
les
jbe
and
or
lods
retf
cmps
loop
sub
jae
mov
cmc
mov
mov
(bad)
dec
je
xchg
jge
scas
stos
mov
clc
and
xchg
jl
mov
adc
and
aad
inc
bound
data16
jl
sbb
pop
push
pop
daa
into
cli
cwde
and
xchg
xchg
sbb
hlt
jmp
gs
jecxz
(bad)
in
aaa
lahf
pop
xchg
(bad)
sbb
aam
adc
pop
and
inc
or
test
or
sub
movs
das
adc
jnp
cmp
sti
lock
test
cmp
push
adc
call
bound
repnz
xchg
adc
mov
nop
sub
mov
clc
adc
popa
loopne
std
push
add
fmul
adc
call
ror
lock
js
pop
adc
mov
lea
sub
adc
sub
adc
adc
xchg
xchg
leave
and
adc
loop
out
adc
dec
dec
adc
ins
sub
shr
push
lock
sbb
(bad)
mov
addr16
test
stos
jne
pop
(bad)
fdiv
repnz
ds
cmp
loope
ins
dec
movs
lock
mov
out
xor
pop
leave
fisttp
cmps
adc
cmp
add
call
jmp
adc
call
adc
pop
mov
in
adc
test
mov
add
ss
dec
fs
pop
ret
popa
lock
adc
add
dec
or
lods
inc
adc
(bad)
lock
leave
rcl
ficomp
repnz
inc
adc
push
sub
adc
push
(bad)
pop
push
and
or
cdq
adc
push
sbb
adc
rcl
pop
push
dec
int3
adc
xchg
cs
or
mov
mov
adc
fist
mov
out
sub
je
jne
stc
cmp
aad
mov
ror
repnz
adc
add
rol
push
pop
mov
adc
in
mov
lea
xlat
sub
sbb
push
sti
ds
mov
inc
jo
clc
outs
std
adc
retf
push
xor
in
and
scas
cmps
cwde
fadd
cdq
mov
shl
pop
xacquire
adc
cld
aam
or
dec
pop
jmp
test
cwde
lods
in
fwait
data16
sbb
pop
out
jecxz
gs
pop
out
adc
xor
push
mov
hlt
or
or
in
xchg
add
adc
inc
sahf
bound
add
mov
jmp
jmp
adc
iret
jmp
xchg
inc
push
mov
arpl
(bad)
push
add
push
fst
lds
pop
and
and
jne
cmp
mov
push
int3
clc
adc
ds
jp
mov
mov
movs
adc
fst
addr16
xchg
pushf
mov
cmp
mov
in
lods
lods
sbb
dec
enter
in
fiadd
mov
call
and
mov
test
xchg
xor
mov
rcr
cmc
mov
mov
jmp
adc
cmp
jo
(bad)
adc
je
mov
jae
pop
adc
xchg
add
or
test
pop
adc
sbb
pop
xor
add
add
adc
pushf
jo
aam
les
jno
push
add
jl
adc
sub
ret
lds
dec
scas
push
retf
xor
pop
shl
jns
adc
call
arpl
imul
je
xchg
aad
fs
clc
aam
dec
(bad)
mov
inc
add
(bad)
jnp
loop
aas
xor
adc
adc
loope
adc
aam
cmp
sbb
sub
pop
and
inc
xchg
outs
inc
mov
adc
mov
inc
jecxz
and
movs
pusha
lahf
pop
push
adc
pop
daa
and
push
adc
pop
mov
jl
pusha
adc
repnz
arpl
xor
sbb
inc
cmp
add
popa
mov
aam
fsub
dec
cmp
int3
cmp
dec
sub
imul
mov
jecxz
es
bound
icebp
pavgb
adc
fs
repz
jb
fcom
mov
jl
int3
or
adc
mov
mov
xor
adc
(bad)
pop
sbb
jg
add
out
repnz
adc
push
ret
pop
sub
(bad)
jbe
dec
pop
clc
xor
scas
ins
rcr
and
xchg
aaa
fadd
in
xchg
sbb
or
and
iret
adc
adc
outs
cmp
inc
sbb
adc
data16
(bad)
dec
mov
adc
mov
xchg
sub
cmp
add
pop
nop
adc
pushf
push
shr
jbe
pop
mov
mov
or
sbb
fisub
dec
adc
jge
sar
dec
adc
or
call
adc
out
(bad)
(bad)
out
adc
(bad)
mov
imul
ds
and
cld
add
lods
adc
mov
dec
cmp
pushf
aas
scas
out
mov
add
aam
adc
dec
sahf
cli
pop
or
unpcklps
loop
hlt
xchg
clc
and
ja
sahf
adc
cmps
jmp
loope
sbb
cli
cld
pop
pop
or
out
fld
lds
and
(bad)
mov
scas
sub
pop
xchg
in
dec
fcomi
adc
call
cli
aam
pushf
js
test
repz
jge
rcl
icebp
sub
cdq
sub
pop
mov
shl
int3
jb
jbe
(bad)
and
adc
jno
jne
mov
mov
pop
rcl
add
or
xor
inc
rcl
or
dec
mov
iret
jecxz
xchg
adc
out
mov
inc
jbe
fild
outs
mov
fdivr
mov
scas
sar
jnp
mov
and
and
and
mov
xor
jnp
sbb
cs
adc
dec
mov
imul
xchg
adc
add
adc
sub
daa
mov
enter
and
js
ror
and
adc
pop
mov
lods
ret
push
push
cmps
aam
scas
mov
mov
xchg
shl
repnz
clc
add
mov
loope
inc
dec
mov
in
add
ins
test
leave
push
xchg
rcr
out
cmp
add
les
xchg
adc
neg
adc
ret
clc
jns
cmp
mov
jge
mov
push
xchg
repz
add
jecxz
pop
jmp
adc
sub
cmp
xor
int3
add
adc
dec
dec
aas
xor
mov
in
daa
adc
call
lahf
pusha
adc
popf
scas
dec
sub
push
mov
push
int
fsub
es
cli
in
loopne
movs
or
addr16
adc
cld
push
push
sbb
test
xchg
daa
repz
mov
mov
mov
lahf
not
shr
ja
dec
mov
fisttp
adc
in
sbb
xchg
sbb
adc
fincstp
call
dec
adc
imul
adc
(bad)
movs
jo
cdq
loopne
(bad)
xor
mov
enter
js
adc
hlt
retf
adc
test
adc
or
imul
xchg
add
jg
add
clc
ins
adc
stos
add
or
mov
sub
mov
int3
sbb
mov
retf
dec
adc
add
push
arpl
lock
mov
jle
hlt
jl
adc
push
iret
aaa
jl
test
push
mov
cld
(bad)
mov
push
and
or
jae
adc
and
mov
clc
xor
adc
xor
aam
(bad)
sbb
xor
out
jge
imul
stc
test
lea
outs
sub
sub
mov
fidiv
cmp
scas
pop
jp
in
fucomp
stos
mov
lock
and
ss
mov
dec
jle
inc
sub
sub
rcl
or
adc
pop
mov
jno
das
adc
pop
pop
sbb
stc
enter
cmp
mov
ins
cld
icebp
nop
adc
fist
lods
cmp
push
mov
adc
mov
adc
and
dec
xchg
cmp
jmp
inc
and
fcmovu
rcl
hlt
stos
sub
adc
neg
jmp
retf
rcl
inc
daa
adc
mov
fadd
jle
aas
adc
sub
add
xchg
mov
add
sar
sbb
push
adc
lock
imul
clc
mov
aad
lods
int3
cs
adc
xchg
fdivr
lea
gs
inc
rcr
je
lods
or
add
stos
adc
std
in
adc
scas
retf
bound
mov
dec
adc
jmp
adc
ret
loope
or
movs
jns
ins
push
lock
sbb
jl
jmp
es
xchg
les
or
or
inc
sbb
adc
jb
fbld
push
mov
push
shl
jl
pop
ja
xchg
ins
in
aas
movs
cli
dec
sub
inc
in
hlt
ror
iret
hlt
cli
push
and
adc
adc
adc
repnz
adc
jge
adc
cs
push
adc
out
sbb
(bad)
cmp
ins
sub
das
neg
push
je
lods
pop
repz
ror
mov
cld
std
jmp
sub
loopne
jb
addr16
adc
xor
add
push
pop
xchg
mov
pushf
popf
les
add
out
fimul
mov
cli
xlat
push
movs
cmp
(bad)
mov
push
(bad)
adc
jae
and
je
hlt
clc
jno
sbb
or
add
fadd
mov
jg
retf
jb
repz
push
jl
mov
xor
fwait
in
fiadd
jmp
and
cdq
xchg
or
adc
pop
test
pop
jnp
retf
mov
sbb
xchg
loope
dec
add
xchg
pop
retf
lea
push
mov
mov
xor
xchg
mov
pop
mov
out
jnp
pop
adc
and
pop
cmp
pop
pop
xchg
lods
sbb
jne
cmp
das
jle
iret
or
mov
mov
and
mov
cmps
push
and
pop
cmp
dec
and
retf
je
sbb
push
adc
ins
imul
adc
jo
ret
jge
xor
adc
lods
adc
jno
push
adc
cdq
add
scas
fist
adc
add
pop
push
test
les
inc
loopne
rol
xchg
push
cmp
imul
sbb
mov
sbb
or
fucomi
retf
cld
adc
out
adc
shl
jle
lods
out
repnz
and
xchg
lods
imul
mov
loope
pusha
popf
call
shl
imul
xchg
iret
int3
idiv
dec
jp
cdq
in
jl
dec
and
mov
movs
dec
adc
jecxz
stos
adc
mov
xchg
test
mov
mov
jmp
cld
jo
out
icebp
push
imul
in
int
jmp
push
push
adc
pop
shl
(bad)
ds
push
es
ss
ja
mov
in
inc
ret
mov
jno
pop
xor
sbb
clc
fs
rcl
pop
and
lea
adc
movs
sbb
or
jg
setno
mov
dec
ficom
popf
cmp
mov
mov
iret
cmp
aas
xchg
sahf
pushf
or
mov
adc
cwde
inc
jge
mov
shl
pop
cmp
cmp
xor
shl
idiv
movs
adc
mov
scas
arpl
or
dec
scas
jns
xor
mov
lahf
fs
push
call
push
push
int3
pusha
adc
aaa
ficomp
inc
push
out
adc
enter
mov
or
jnp
adc
gs
stos
jae
popa
loop
sub
sbb
or
in
mov
or
mov
adc
jne
add
adc
ins
mov
xchg
sbb
fcomp
mov
stos
int3
sbb
outs
push
sub
ja
ins
adc
mov
out
retf
ret
je
or
imul
mov
jmp
pop
xor
imul
fcomip
cwde
out
cdq
outs
test
cdq
rcl
sti
test
sub
add
retf
add
or
push
iret
iret
imul
and
mov
les
pop
adc
lods
sbb
jne
imul
int3
inc
dec
loopne
xor
nop
retf
jmp
jne
ins
adc
cld
in
pmaxsw
in
out
loope
icebp
mov
add
mov
cmp
push
lods
add
xchg
jnp
xlat
adc
lods
imul
lock
cld
or
xchg
inc
mov
mov
add
sbb
nop
xchg
lock
xor
outs
push
xchg
daa
pusha
(bad)
dec
je
add
int3
sub
movs
clc
adc
dec
jmp
(bad)
inc
fimul
in
inc
mov
jnp
inc
inc
nop
rcl
mov
xor
cwde
add
retf
mov
or
pop
sbb
sti
out
out
dec
clc
pop
retf
not
enter
adc
fild
jns
sbb
pushf
cmps
xor
add
fld
jl
adc
mov
out
cmp
test
inc
repnz
xchg
or
xchg
sbb
outs
xor
and
dec
pop
jmp
(bad)
outs
not
xchg
xor
enter
lock
push
in
imul
arpl
rcl
push
adc
mov
xchg
jl
jmp
loopne
and
std
pop
in
push
ss
xor
sub
pushf
adc
xor
dec
pushf
jns
xor
into
mov
out
cmp
stos
les
jp
xor
ret
lods
or
scas
cmp
xor
rol
mov
test
pushf
sbb
in
daa
push
mov
ja
xchg
aam
fist
mov
loop
add
sbb
repnz
shl
ins
dec
mov
imul
mov
retf
mov
jne
sub
inc
loop
daa
adc
test
lods
add
adc
xchg
das
mov
push
addr16
je
cmp
jl
sti
fs
pop
scas
mov
pushf
cmp
adc
add
outs
out
mov
mov
xchg
test
adc
jae
jg
add
into
scas
ss
and
shl
jg
and
mov
push
push
jne
lods
push
jle
adc
mov
dec
inc
fstp
into
sbb
and
jb
jae
jne
sub
or
cli
push
adc
test
stos
movlhps
jle
nop
cmp
std
(bad)
ds
push
or
mov
jmp
nop
inc
retf
rol
cmp
mov
cmps
pop
xchg
and
mov
hlt
inc
pusha
aas
or
lods
mov
in
jecxz
cmp
add
adc
xchg
scas
scas
lods
jge
test
mov
lods
push
aad
jcxz
test
stos
and
jmp
push
adc
xor
adc
mov
dec
pop
mov
jle
in
into
push
adc
je
xchg
stos
cmp
adc
add
sub
mov
or
xor
leave
adc
dec
xor
jb
arpl
jno
call
jns
push
adc
push
ins
icebp
jmp
dec
mov
je
sbb
push
fisubr
jae
xchg
je
test
xor
ja
ds
push
jo
jg
call
ret
dec
adc
je
arpl
dec
jnp
ficom
ins
int3
jmp
pop
jg
xchg
scas
xor
pushf
push
cdq
sub
and
test
aam
scas
jnp
adc
fcmove
stos
xchg
push
xor
xchg
cld
pop
fnstsw
adc
push
jp
dec
cmp
rcl
lods
cdq
xchg
out
fcom
mov
popf
push
es
adc
scas
punpcklbw
push
test
push
xor
jno
xchg
into
js
pop
cmps
add
outs
cmp
sbb
mov
add
xchg
(bad)
xor
adc
cs
jp
dec
xchg
ins
adc
mov
mov
outs
sti
repz
loopne
ret
mov
pop
xor
test
xchg
clc
adc
sub
rol
scas
in
adc
(bad)
addr16
jg
imul
jle
movs
cli
sub
retf
fcmovnbe
add
ins
fs
fwait
test
adc
out
mov
add
je
mov
jb
pushf
jne
jno
push
add
fstp
jo
add
lahf
adc
cwde
popa
add
and
aaa
adc
push
rcl
xor
inc
jle
aad
adc
mov
mov
pop
loope
(bad)
xchg
aas
pop
add
std
mov
mov
add
xor
repnz
rol
test
xor
mov
add
add
inc
push
adc
fcmovb
into
dec
loopne
cld
popa
jns
repz
sbb
jne
adc
push
hlt
jge
inc
adc
or
dec
sub
adc
les
cdq
loope
inc
pop
mov
push
(bad)
ds
pop
sbb
mov
call
enter
fdivr
aad
jbe
mov
imul
dec
mov
je
dec
mov
mov
push
push
push
leave
cli
int
xor
dec
data16
call
(bad)
jo
jmp
dec
leave
push
push
and
aam
sub
retf
sti
cld
adc
je
imul
adc
jns
sbb
push
mov
loopne
adc
dec
jne
adc
icebp
jmp
or
mov
mov
jb
push
inc
xor
sub
data16
scas
cmps
shl
int
mov
pop
mov
adc
out
test
hlt
repnz
xchg
imul
mov
popa
push
sar
fs
pop
xchg
sbb
mov
pop
adc
retf
mov
fadd
pop
jl
xchg
scas
mov
adc
sub
cld
jg
xchg
xchg
adc
and
neg
sti
inc
inc
aam
cmps
adc
inc
call
push
adc
and
jmp
imul
test
retf
push
push
rcl
in
lahf
(bad)
xor
test
sbb
ins
or
ins
mov
imul
jno
sbb
aas
int
out
and
dec
inc
xchg
add
add
in
push
sub
push
adc
and
daa
xchg
xor
movs
inc
add
jmp
fstp
ffree
iret
fstp
mov
adc
and
(bad)
aam
in
aad
popa
adc
(bad)
lock
ror
lods
adc
pusha
mov
inc
pusha
dec
inc
js
xchg
pop
or
push
fcomp
push
pop
loope
mov
adc
popa
call
into
pop
sbb
push
iret
js
nop
rcr
mov
pop
int
fcom
adc
and
je
sub
dec
push
cmps
or
cmps
jae
out
xchg
and
sahf
adc
add
fst
lock
push
push
mov
cld
pushf
outs
xchg
ret
adc
shl
loope
mov
clc
add
addr16
xchg
cmp
aam
icebp
out
aaa
mov
cmp
or
xchg
sbb
and
lahf
leave
jg
add
and
test
test
ins
push
(bad)
cmps
adc
or
imul
push
fimul
out
in
xor
pop
aaa
xor
and
mov
in
aad
and
jno
adc
jl
push
dec
xchg
mov
aam
pop
les
(bad)
hlt
ficom
xor
(bad)
bound
aas
es
sti
inc
das
aam
sbb
sub
push
(bad)
cmp
lahf
xchg
addr16
sbb
jle
adc
dec
pop
mul
push
or
xchg
int3
lds
adc
test
push
das
fmulp
jb
cmc
je
adc
out
bound
pop
cdq
adc
ror
in
or
adc
int3
jecxz
push
pop
cmp
mov
loop
test
or
es
stc
hlt
daa
jmp
sbb
mov
push
jg
add
jae
pushf
mov
jp
and
je
inc
adc
in
repz
sahf
cmp
jl
adc
cli
mov
pop
xchg
inc
clc
shr
movs
or
xor
(bad)
mov
pushf
jmp
sbb
sbb
stc
sti
repnz
sbb
ins
inc
adc
jmp
mov
pop
jmp
lods
push
add
adc
add
cs
jbe
in
adc
addr16
ss
or
sbb
pop
ins
sbb
clc
fisubr
cmp
retf
pop
scas
loope
adc
mov
adc
mov
adc
jo
and
ret
sbb
xchg
xlat
mov
cmp
push
mov
fimul
jb
cmp
mov
popa
mov
xchg
mov
mov
repz
xchg
xchg
adc
scas
test
adc
call
mov
adc
fadd
xor
int3
in
adc
mov
ins
fcom
in
rol
ss
mov
adc
mov
daa
xchg
mov
xchg
or
pop
sar
lods
cdq
adc
add
in
or
sbb
add
add
adc
dec
or
ret
mov
in
dec
loope
(bad)
scas
push
mov
ret
xchg
sub
in
ret
xchg
cwde
pop
jnp
cmp
out
sub
gs
xchg
xor
call
cmp
sbb
inc
mov
aad
push
aas
cmp
sub
adc
jmp
ins
lahf
cmps
push
imul
fld
mov
jl
aas
leave
pusha
out
and
outs
xchg
sahf
fldenv
pop
push
mov
das
shl
push
sti
std
imul
mov
inc
nop
popa
xor
out
adc
or
fiadd
xchg
jle
cdq
xchg
call
daa
and
and
push
cli
cmp
lock
es
je
or
xchg
in
fcom
ds
stos
mov
push
mov
shl
or
xor
stc
mov
scas
cmp
adc
pushf
xchg
and
and
sub
push
inc
cld
jbe
pop
popf
add
mov
stos
mov
es
mov
push
dec
mov
cmp
adc
pop
push
mov
and
adc
sbb
fwait
adc
adc
dec
xor
mov
cmps
out
nop
hlt
adc
sbb
mov
fmul
mov
push
xchg
sub
push
sahf
loop
push
xor
sbb
mov
lock
adc
test
shl
std
cmp
and
mov
xor
adc
or
dec
cmp
add
cdq
mov
jbe
cmp
mov
inc
xchg
(bad)
dec
cmp
fwait
hlt
adc
jbe
ret
mov
cmp
adc
or
(bad)
adc
call
adc
and
mov
xchg
loope
sub
xchg
(bad)
nop
adc
add
movs
std
gs
outs
xor
adc
or
fist
ja
ins
push
in
jg
xor
adc
ret
mov
push
ins
movs
aaa
in
push
push
mov
imul
xchg
rcr
ds
jp
xor
push
sbb
and
cmp
adc
(bad)
xchg
xor
pushf
stos
out
in
shr
adc
xlat
(bad)
fisub
mov
or
xor
mov
(bad)
cmps
sub
fs
ja
sub
aaa
fsubr
ficomp
dec
inc
aam
enter
add
adc
add
mov
mov
adc
sub
or
repnz
dec
mov
mov
cmps
sbb
fwait
mov
adc
(bad)
psubusb
sbb
shl
xchg
in
pop
mov
and
mov
lock
adc
or
repz
aam
retf
cdq
adc
lahf
dec
cmp
xchg
cmc
fcomp
cmp
lahf
push
push
and
outs
stos
xchg
push
scas
retf
es
xchg
ret
push
adc
cmp
add
ret
sbb
sub
dec
push
add
xchg
cmp
push
sbb
push
push
mov
pop
push
lea
dec
or
pop
(bad)
xor
xchg
adc
mov
(bad)
dec
mov
push
adc
dec
retf
pusha
inc
(bad)
adc
push
movs
mov
fcom
ret
loop
xor
sbb
jb
fs
or
and
adc
mov
dec
push
and
call
aam
enter
jne
mov
xchg
pop
adc
(bad)
mov
daa
pop
(bad)
adc
stos
cmc
mov
add
adc
adc
sbb
loop
jnp
jl
adc
inc
push
idiv
dec
jmp
loopne
or
fnop
out
or
jg
daa
pusha
push
outs
rcl
(bad)
mov
inc
or
inc
adc
and
outs
into
add
cli
fwait
je
pop
popa
sbb
dec
adc
(bad)
sub
ins
cmps
or
inc
pop
shl
clc
shl
mov
sub
xchg
aam
dec
in
add
inc
add
hlt
sti
or
pop
push
adc
xchg
into
loope
sbb
mov
retf
adc
mov
inc
int
adc
std
jo
adc
pop
or
pop
mov
dec
add
sub
mov
add
cmp
add
sbb
pop
in
call
add
xor
mov
dec
pop
push
adc
jmp
mov
cmp
push
lods
and
cmp
jg
mov
(bad)
mov
inc
je
sti
adc
mov
sub
adc
retf
cmps
sub
adc
or
inc
idiv
cld
add
push
fcomp
retf
aam
inc
push
aaa
adc
ins
inc
stos
xchg
fwait
mov
pop
cmp
xchg
loopne
mov
push
cli
xchg
adc
and
sbb
add
cmps
lea
repz
fwait
out
aad
jno
adc
dec
xor
adc
(bad)
mov
or
in
sbb
cmp
add
mov
jl
dec
push
addr16
das
push
add
clc
in
cmps
ins
sahf
pop
sbb
xchg
xchg
adc
pop
pop
test
or
adc
pop
(bad)
stos
fcom
add
mov
aam
push
adc
in
cmp
mov
(bad)
adc
add
neg
mov
xor
jmp
adc
(bad)
sar
in
adc
rol
ds
lahf
aad
mov
shl
mov
sub
cmp
push
cld
push
in
inc
jp
jge
sub
js
add
rol
aas
fidiv
rcl
popf
jge
cmps
cmp
and
jmp
sar
in
mov
retf
dec
xor
in
jg
popf
add
int3
adc
adc
jo
inc
sbb
cmp
je
push
out
mov
xlat
pop
push
add
test
dec
(bad)
adc
dec
jb
cli
cmp
cld
adc
ins
jne
cs
sbb
pop
or
adc
or
push
jp
fistp
iret
or
mov
pop
adc
or
inc
xchg
adc
dec
into
push
pop
stos
fld
adc
bound
invd
xlat
cmp
mov
push
cmp
ror
loopne
aad
xchg
sbb
add
out
adc
fmulp
adc
add
adc
loope
push
les
adc
out
mov
jno
push
mov
sbb
sub
mov
adc
cmp
into
(bad)
(bad)
imul
xor
and
adc
ja
jmp
mov
push
es
imul
int3
lds
xchg
add
sub
fnstenv
pop
sti
inc
jmp
ja
sbb
retf
stc
lods
inc
push
loopne
das
mov
or
cmp
xchg
inc
adc
inc
and
add
jb
xlat
jns
lods
adc
les
cmp
imul
dec
movs
jl
aam
adc
mov
imul
fistp
loop
push
inc
in
mov
jae
arpl
adc
pop
xchg
pop
jp
pop
and
adc
push
sub
adc
test
inc
and
sub
cld
ins
movs
call
icebp
pop
iret
xor
ins
retf
stos
adc
rcr
movs
fisttp
push
mov
sub
vpavgb
pushf
popa
push
adc
hlt
scas
cdq
rcr
in
retf
cmp
mov
popf
xchg
pop
mov
adc
mov
and
sar
or
push
lods
mulps
cmps
push
out
cmp
mov
mov
out
mov
adc
icebp
mov
adc
cmp
test
es
cli
adc
fbld
jecxz
lods
pop
(bad)
test
jae
sub
cmp
sbb
jbe
rcr
jmp
sbb
adc
pusha
or
mov
sub
in
das
(bad)
in
hlt
rcl
pop
pop
sbb
mov
adc
mov
inc
out
aam
imul
dec
leave
loope
enter
xor
inc
cmp
call
mov
mov
(bad)
jmp
ins
in
xlat
in
unpckhps
and
push
mov
mov
push
lods
xchg
std
ret
dec
(bad)
js
mov
retf
in
jae
xchg
pushf
(bad)
aad
mov
sub
lods
mov
mov
out
mov
hlt
push
or
not
adc
sbb
add
or
mov
pushf
int3
gs
sbb
sub
lock
sti
addr16
pop
cmp
mov
push
mov
lea
retfw
or
add
sbb
sub
xchg
rcl
cmp
xchg
leave
dec
sbb
xchg
in
aas
adc
push
push
adc
popa
mov
daa
dec
jg
push
in
sub
hlt
inc
and
and
add
ret
popa
xchg
jmp
sti
push
adc
pop
push
inc
sub
ins
jl
mov
push
xor
sub
mov
retf
into
adc
inc
idiv
hlt
jge
xchg
jne
adc
cli
inc
data16
jae
gs
test
in
jne
xor
cmp
and
stc
xor
xchg
ins
fbld
jb
mov
dec
xchg
and
in
aad
imul
or
rcl
dec
adc
mov
fwait
je
retf
adc
jmp
ret
sbb
add
movs
jp
or
cmp
adc
ja
sbb
cmp
and
push
stc
add
mov
pop
outs
mov
inc
dec
cwde
add
cmp
sbb
mov
or
es
std
arpl
pop
(bad)
int3
in
push
frstor
mov
addr16
idiv
sbb
or
pop
xchg
or
inc
and
popf
rcl
adc
out
mov
inc
in
sub
shr
jle
out
mov
adc
adc
aam
nop
call
adc
mov
cwde
sbb
or
xchg
in
dec
cmp
or
adc
loopne
and
dec
xchg
adc
in
popf
movs
push
sbb
cdq
test
dec
dec
xchg
mov
in
les
xchg
inc
sub
lods
stos
mov
mov
dec
mov
cdq
jg
mov
adc
push
mul
adc
es
jne
xor
leave
xchg
sub
popa
scas
xor
cmc
addr16
jo
sbb
mov
mov
dec
push
xchg
hlt
int3
adc
jbe
ins
shl
inc
adc
into
lds
adc
lods
bound
pop
add
mov
inc
adc
sub
icebp
cli
adc
ins
cmps
jmp
add
add
xor
hlt
jns
loopne
add
js
mov
in
mov
mov
mov
or
adc
and
mov
sbb
sbb
xchg
or
mov
lea
out
cmp
inc
xchg
adc
pop
ins
(bad)
sbb
mov
mov
fmul
xor
jno
cmp
ins
scas
hlt
pop
test
adc
xchg
js
pop
loopne
cmp
and
fwait
sub
in
adc
xchg
fisttp
fcom
std
pop
pop
sbb
(bad)
in
mov
ins
adc
jmp
push
pop
jmp
(bad)
in
jns
push
cmps
jmp
in
shl
out
adc
xor
mov
aad
mov
test
adc
sub
adc
mov
jns
push
daa
adc
out
ret
aam
in
int3
sub
outs
loopne
push
or
or
jp
push
lods
fs
adc
shl
and
lock
mov
dec
movs
ret
or
das
je
mov
int3
sbb
mov
xlat
out
loopne
test
adc
lods
xchg
imul
sbb
scas
aas
pusha
add
mov
int3
xchg
lods
and
add
test
outs
pop
pushf
retf
xor
xchg
rol
cmp
imul
mov
cmp
pop
pop
in
jbe
retf
mov
stos
add
dec
dec
ds
pop
adc
sahf
ret
sub
lahf
adc
pop
in
push
xchg
arpl
adc
cmps
shl
adc
daa
icebp
nop
xchg
mov
(bad)
jne
std
outs
je
adc
pop
loop
push
and
es
aad
jge
jmp
or
mov
dec
xchg
and
cmp
das
lods
les
adc
inc
jecxz
imul
in
mov
std
add
jmp
aad
mov
sar
mov
or
mov
sub
scas
jmp
jne
test
rcr
out
cmc
hlt
in
pop
scas
add
cmc
(bad)
mov
mov
add
adc
mov
sbb
cmps
cmp
mov
adc
fstp
(bad)
in
sbb
adc
mov
pop
(bad)
pop
aam
xchg
sbb
movs
jns
ins
cld
xchg
cmp
ds
mov
fwait
jge
cmps
repnz
adc
(bad)
mov
push
fcom
or
pusha
inc
pop
(bad)
call
cwde
out
jnp
mov
jae
mov
dec
ja
pusha
or
add
popa
pop
adc
mov
push
mov
and
mov
das
push
mov
rcr
fisub
push
shl
adc
or
adc
retf
adc
inc
dec
stc
in
mov
jge
jbe
push
in
jecxz
popf
jnp
cmc
cs
inc
rcl
retf
pusha
imul
mov
stc
sub
dec
popa
jno
(bad)
mov
mov
mov
xor
leave
lea
unpcklps
or
add
mov
in
pop
adc
movs
pusha
inc
mov
xchg
mov
lods
ret
sub
test
aam
cmps
das
mov
push
cdq
int3
cmp
mov
xchg
sbb
adc
push
cs
jmp
out
xor
nop
jbe
fcom
fst
clc
xchg
sar
mov
shr
push
int
adc
pusha
jmp
or
sub
adc
nop
test
sub
dec
adc
lds
inc
and
in
popa
xchg
dec
call
jle
imul
or
or
sbb
mov
(bad)
sbb
inc
int3
aas
bound
mov
popf
mov
and
imul
sub
sbb
adc
push
or
xchg
xchg
arpl
mov
test
sbb
xchg
pop
fsub
daa
mov
xchg
shl
mov
and
jg
xchg
push
imul
adc
adc
int
retf
shl
pop
lods
sbb
fisttp
daa
ins
sbb
lds
adc
xor
sbb
out
mov
sub
daa
adc
sbb
xchg
push
push
mov
addr16
shl
sub
adc
bound
jle
cmp
(bad)
in
mov
adc
hlt
cmp
pop
ficom
jmp
jne
hlt
jmp
cld
jns
sub
lea
(bad)
pop
pop
xor
arpl
and
loope
test
fsubr
lds
push
jmp
sbb
sub
fs
mov
mov
inc
mov
aad
std
push
lea
xchg
cwde
stos
repz
cmp
ins
xchg
cmps
test
mov
call
and
mov
dec
rcr
lock
jmp
imul
nop
and
ret
repnz
adc
inc
imul
ror
xchg
jmp
xchg
pop
in
ret
mov
add
dec
or
xor
out
(bad)
xchg
adc
ret
xchg
retf
xchg
pop
add
bound
xlat
or
mov
sbb
adc
jae
mov
stos
pushf
int3
or
sbb
and
test
mov
movs
mov
pop
mov
iret
sahf
sti
mov
pop
or
fidiv
inc
ret
cld
cld
xchg
loop
pusha
xchg
std
lock
call
sub
fld
mov
push
mov
mov
or
je
movs
and
or
xchg
sub
movs
out
retf
push
ja
push
mov
retf
sub
stos
adc
cs
mov
retf
jmp
cmp
mov
adc
sub
mov
cmc
jmp
data16
lods
mov
into
cmp
adc
pop
xor
xchg
aad
into
or
stos
xchg
push
xchg
push
ins
and
inc
lock
(bad)
pop
and
int3
cs
in
and
cwde
call
iret
or
dec
or
fs
sbb
ret
xor
cmp
or
and
or
or
xor
dec
ja
and
in
repnz
jne
retf
xchg
or
inc
and
adc
xor
inc
or
jb
jmp
icebp
add
jl
clc
enter
mov
inc
adc
mov
adc
idiv
sub
dec
fadd
xor
shl
fld
fbld
in
push
std
iret
pop
adc
inc
push
retf
popf
sub
in
fcomi
inc
adc
mov
in
push
adc
ins
call
les
add
dec
cs
pop
adc
int
bnd
xor
sbb
add
cmp
aad
push
pop
ds
pop
inc
adc
dec
dec
inc
mov
cwde
cmp
retf
jp
add
sbb
dec
in
pop
bound
or
clc
xor
push
adc
(bad)
jg
test
(bad)
adc
scas
dec
add
cmp
sub
imul
lock
movs
cld
fcmovb
push
mov
leave
pop
cmps
retf
dec
adc
xor
cmp
jle
jno
fcomp
mov
pop
or
mov
(bad)
jecxz
loopne
bound
xchg
jle
push
iret
fldenv
jmp
adc
adc
push
inc
pop
leave
bnd
inc
jg
and
test
nop
sub
add
je
(bad)
pop
adc
adc
out
mov
and
std
hlt
push
je
scas
adc
or
add
das
push
xchg
jnp
or
and
cli
outs
mov
adc
in
xchg
xlat
popa
pop
jnp
push
push
mov
movs
inc
adc
jb
jns
adc
ret
push
mov
inc
inc
icebp
mov
mov
sub
add
stos
jle
pop
pop
repnz
inc
or
aad
adc
xor
xchg
add
rcr
pop
fnstcw
jmp
cmps
sub
movs
callw
(bad)
cmp
sbb
xchg
mov
ficom
ret
xlat
sar
pusha
adc
jo
fadd
adc
mov
mov
xchg
adc
cmp
jp
jmp
xor
lods
sbb
pushf
movs
arpl
inc
mov
jmp
lahf
add
sbb
lods
aam
fs
dec
popa
push
adc
add
dec
rcl
adc
push
cli
in
mov
push
add
in
cmp
jno
in
push
jae
xchg
fstp
push
cmps
adc
mov
lods
mov
and
mov
ja
dec
mov
push
jns
inc
cmc
je
or
adc
aam
fidivr
rol
xchg
test
adc
cmps
ds
or
jbe
adc
idiv
pushf
cmp
cmp
(bad)
pop
sub
jl
adc
mov
xlat
and
xchg
jp
or
adc
pop
aas
xchg
es
adc
push
mov
lahf
adc
or
jmp
data16
sub
cmp
pop
and
xchg
jo
idiv
adc
(bad)
in
lds
sub
mov
xchg
rol
fs
xor
pushf
mov
or
mov
jmp
jp
lock
sbb
xchg
lods
and
jl
popa
dec
bnd
adc
aam
pop
imul
sbb
inc
mov
movs
idiv
popf
adc
retf
adc
add
je
mov
push
adc
retf
aam
push
xchg
loope
cwde
dec
movs
push
xchg
aam
aas
xchg
scas
xor
ins
int
or
pusha
in
call
imul
mov
dec
test
add
sbb
clc
retf
push
add
(bad)
or
nop
cmp
es
pop
push
js
or
push
stos
stos
popf
dec
adc
sbb
add
jmp
arpl
adc
pop
jp
dec
pop
pop
stc
xor
inc
sar
push
or
out
rcl
je
clc
jo
mov
or
(bad)
mov
mov
movs
push
xchg
test
sub
aam
dec
mov
aaa
in
jecxz
je
mov
mov
pop
push
cmp
xchg
and
add
pop
loope
sbb
lods
jae
lahf
inc
mov
mov
push
sbb
idiv
daa
ret
xchg
add
adc
mov
cmps
cli
fsub
sbb
add
mov
pop
out
adc
mov
xchg
or
cmp
adc
out
ins
adc
mov
out
lods
mov
mov
js
mov
test
out
mov
jl
adc
retf
push
pop
clc
loope
gs
sub
cwde
ja
cmp
adc
test
ror
xor
cmc
dec
mov
xor
cs
adc
fidivr
jle
mov
rcl
(bad)
push
pop
jg
shr
daa
mov
push
aam
xchg
mov
das
loop
xchg
xchg
(bad)
out
cmp
movs
cmp
retf
cmps
iret
pop
jne
rcl
not
adc
clc
add
call
mov
and
xor
mov
push
sbb
(bad)
loopne
mov
in
test
add
adc
sbb
xchg
ficomp
mov
out
jnp
scas
mov
inc
or
dec
or
sbb
xchg
loope
mov
or
push
pop
lods
hlt
xor
das
sbb
push
sbb
add
xchg
inc
adc
int3
shl
jnp
dec
in
xchg
loopne
cmps
dec
cmp
or
cld
and
cmp
mov
pushf
jp
icebp
sbb
sti
xchg
jmp
aaa
adc
leave
inc
push
cmps
sbb
movs
iret
out
push
cmps
inc
push
out
xor
add
xor
(bad)
nop
cmp
rcl
xchg
imul
fidivr
xchg
retf
sbb
mov
sub
mov
dec
(bad)
cmp
les
outs
fnstenv
sti
adc
fisubr
inc
test
fmul
push
adc
lods
add
cmp
pop
test
sbb
in
xchg
adc
xchg
retf
cld
xchg
push
imul
mov
sbb
mul
outs
xor
and
imul
xor
in
int3
push
adc
aas
push
or
cmps
rcl
ins
dec
bound
xor
inc
mov
push
ins
adc
vcvtps2pd
pop
pusha
pop
fst
xor
dec
pop
sub
inc
sti
aas
in
push
ficomp
add
adc
int3
xchg
xchg
(bad)
push
cmp
pusha
lods
repnz
into
cmp
bound
mov
in
xchg
mov
xchg
pop
cmc
call
ja
push
int3
mov
dec
sbb
cmps
xor
std
jnp
push
ins
imul
mov
cmp
cdq
mov
call
sub
or
ins
jo
push
lahf
jmp
pusha
shl
cmps
adc
out
sbb
jle
cmp
nop
test
and
mov
je
sub
ins
xchg
fs
imul
stc
retf
and
push
adc
nop
or
adc
push
outs
lock
fsub
add
push
add
call
xor
leave
mov
mov
cmp
in
adc
push
jb
movs
mov
push
std
fs
and
in
adc
mov
jae
mov
push
(bad)
mov
dec
fdiv
adc
mov
or
(bad)
pop
mov
test
daa
adc
pop
je
mov
jge
adc
popa
cmp
sbb
add
ins
jge
popf
xor
clc
lahf
mov
mov
mov
xchg
(bad)
jmp
add
mov
cmc
and
outs
sti
push
out
mov
test
mov
inc
dec
xchg
push
jle
das
in
mov
push
dec
inc
adc
aam
pop
sahf
or
adc
xchg
adc
cli
mov
(bad)
dec
push
sub
jb
pusha
adc
inc
mov
into
addr16
ins
stos
pushf
test
imul
out
jle
pop
mov
mov
loop
adc
or
retf
lock
and
pop
push
aaa
loope
push
adc
ret
rcl
cs
(bad)
inc
pushf
test
add
fsubp
inc
dec
sub
cmp
js
cmps
sbb
mov
bnd
int
int3
adc
scas
imul
cwde
cld
xor
stc
mov
lahf
cwde
in
push
cwde
rcl
imul
inc
pop
call
packuswb
outs
movs
sbb
fwait
aam
leave
mov
xchg
mov
sub
sbb
cwde
push
movs
frstor
cdq
mov
pop
jle
scas
dec
xor
cmp
cdq
fdiv
je
and
mov
sbb
xchg
inc
adc
sub
imul
jno
(bad)
jge
add
std
(bad)
aas
sbb
adc
fsubr
or
fadd
adc
dec
repnz
jae
aaa
ins
dec
loop
int
jecxz
and
retf
xchg
push
push
in
retf
sub
mov
dec
jle
test
mov
pop
je
inc
xchg
push
adc
ss
out
push
and
or
add
xchg
loopne
in
adc
popa
(bad)
sub
mov
add
adc
call
nop
and
ds
shl
cdq
xor
xchg
push
sub
lock
psubq
jecxz
leave
cli
shl
fild
call
sar
sbb
inc
jb
(bad)
pushf
cmp
cmps
loope
xchg
pop
sbb
das
sahf
jmp
call
xchg
sbb
retf
mov
cli
cmp
shl
sbb
sahf
test
add
popf
and
sar
sub
repz
xor
xor
xchg
out
adc
jle
mov
mov
mov
push
sbb
cld
dec
jmp
add
aas
repz
loopne
push
push
or
popa
sbb
les
retf
push
sub
and
mov
addr16
jbe
and
je
mov
ja
push
xor
scas
hlt
adc
out
fisttp
and
sub
sub
addr16
or
test
ins
movs
outs
jl
inc
aam
dec
sub
loopne
push
sbb
retf
mov
ja
cdq
cwde
ror
mov
out
cmp
loop
and
ror
push
fwait
push
mov
sbb
fdivr
and
movs
jp
add
add
dec
add
xchg
inc
jl
mov
in
inc
fdiv
aam
push
xor
and
retf
fld
add
add
imul
out
push
xor
mov
sub
jo
dec
inc
and
cdq
lock
sbb
sbb
or
xchg
aam
out
inc
push
add
dec
retf
popa
push
pmuludq
add
jp
xchg
xchg
pop
or
and
mov
lds
mov
retf
xor
jecxz
push
sbb
mov
and
aam
push
cmp
sub
outs
inc
imul
call
dec
xchg
xor
xchg
dec
in
ds
xor
xchg
adc
sub
aad
and
test
ins
ficomp
inc
dec
jno
push
rcr
inc
push
int3
ret
mov
push
es
dec
push
in
mov
fwait
add
in
ins
xor
loopne
cmps
sbb
repnz
scas
jecxz
push
mov
mov
adc
and
pop
adc
(bad)
jmp
ss
movs
adc
cmps
jbe
xchg
sbb
aam
push
rcr
mov
mov
div
pop
dec
and
dec
fcmovnu
adc
or
cmp
icebp
adc
or
pop
xor
pop
pop
cmp
pop
cmp
dec
adc
jp
add
jne
and
xor
inc
retf
ret
fwait
inc
aam
clc
ror
and
in
cld
out
outs
mov
xor
mov
push
push
lahf
xchg
pop
movs
xor
xchg
ds
adc
xchg
pop
xor
fdiv
adc
es
mov
(bad)
dec
out
pop
xchg
repz
push
addr16
adc
js
adc
or
mov
popa
iret
sbb
call
stos
dec
popf
addr16
mov
xchg
cmps
mov
hlt
test
mov
arpl
sar
cli
adc
(bad)
dec
pushf
mov
movs
inc
xor
jg
xchg
sub
hlt
inc
out
lock
or
push
add
xchg
adc
xor
aaa
(bad)
out
adc
cmp
cli
xchg
sub
ins
arpl
sbb
bound
stc
aas
push
xchg
mov
adc
fstp
cli
xor
scas
mov
xchg
adc
out
sbb
ret
mov
cwde
adc
mov
mov
mov
xchg
aam
xor
sbb
idiv
into
out
jge
xor
aas
pop
in
dec
leave
stos
fs
mov
stos
sbb
sbb
hlt
cmp
js
adc
sub
fcmovb
sbb
dec
push
lea
inc
xchg
cmp
int3
fstp
int3
cmp
adc
enter
push
shr
adc
and
addr16
cmps
das
sbb
std
movs
je
inc
cmp
sbb
adc
in
(bad)
loope
je
inc
aaa
push
adc
cdq
bound
sbb
(bad)
adc
out
dec
inc
pop
fcomp
rcl
push
push
sbb
mov
or
cmp
sbb
int
sub
fistp
xor
mov
adc
sbb
hlt
fist
xchg
(bad)
fcomp
(bad)
mov
outs
das
mov
dec
fild
in
xchg
push
scas
cmp
popf
loope
adc
pop
dec
xor
(bad)
adc
push
hlt
mov
add
div
je
jns
adc
xor
and
cmp
jp
adc
rcr
cmps
or
sahf
push
jb
fcom
adc
inc
ret
in
inc
sub
pop
enter
mov
push
mov
mov
jne
xchg
cdq
adc
push
push
dec
mov
adc
out
adc
sub
rcr
inc
and
fild
mov
pop
adc
sub
lods
loopne
adc
pop
test
xchg
mov
dec
cmp
jecxz
and
push
jbe
and
dec
adc
jmp
mov
xchg
dec
scas
adc
adc
jl
les
(bad)
call
add
cmc
or
sub
test
lods
pop
adc
mov
in
xchg
adc
mov
or
cmps
fild
fcom
loopne
mov
jmp
cmps
adc
pusha
push
inc
pop
into
bnd
jmp
jno
cld
adc
add
gs
pop
push
(bad)
pop
stc
push
jne
jl
ss
adc
dec
jmp
repz
loope
pushf
sub
out
outs
mov
fsub
inc
or
je
cmp
mov
adc
xor
in
retf
jb
inc
inc
lea
xchg
rcr
xchg
in
jecxz
and
je
cdq
fdivr
and
xchg
sti
mov
retf
shr
jnp
fs
push
dec
out
jb
mov
mov
jge
and
mov
push
int3
fwait
jbe
push
mov
outs
jno
or
cmp
jmp
ficomp
dec
push
je
mov
adc
std
ret
cwde
loope
out
xchg
stos
dec
xchg
or
cdq
dec
retf
lock
sbb
jge
inc
sbb
pop
add
xor
adc
adc
or
jmp
inc
or
(bad)
std
syscall
call
push
xor
hlt
xchg
int
sbb
push
rol
push
lahf
mov
les
xor
inc
fisub
mov
adc
out
adc
test
mov
inc
ds
rcr
pop
pop
sub
enter
sub
push
movs
dec
jle
cdq
fwait
cmp
mov
mov
fsub
fmulp
push
adc
sbb
mov
adc
add
in
call
sub
cmp
cmps
sbb
xchg
cmps
lahf
mov
inc
adc
es
aas
or
stos
adc
add
add
int
jno
cmp
xchg
inc
pop
pop
mov
sub
push
mov
jne
aad
add
cwde
sub
sub
mov
adc
jg
add
inc
movs
es
and
ficomp
inc
hlt
mov
sbb
pop
adc
test
arpl
inc
outs
or
int3
and
jbe
inc
xor
neg
aas
mov
or
push
xlat
xor
sbb
cli
dec
adc
dec
ret
sub
jge
sub
sbb
test
scas
fstp
fwait
jle
lahf
nop
retf
push
out
xor
lds
adc
mov
dec
and
mov
inc
nop
xor
adc
out
mov
adc
mov
test
and
mov
retf
mov
xor
enter
mul
cmp
mov
(bad)
lock
adc
movs
lods
out
xchg
mov
xchg
je
sti
sbb
retf
pop
les
into
jnp
or
adc
or
adc
mov
add
mov
adc
inc
movs
and
sub
leave
cmps
das
push
jns
and
shl
inc
and
jmp
push
adc
cli
and
mov
xchg
jne
sub
xchg
dec
sar
or
xchg
dec
fist
xor
pushf
loopne
or
iret
cmps
movs
cs
adc
mov
ss
mov
cmps
add
and
xchg
js
sub
push
and
cmp
repz
stos
pop
ins
icebp
sub
adc
jmp
std
jbe
je
cmc
xchg
dec
out
cwde
lds
add
add
test
and
pop
(bad)
hlt
push
pop
dec
or
xchg
push
and
mov
inc
ins
inc
(bad)
shl
xchg
cld
dec
out
cmps
stos
jmp
hlt
adc
jno
jg
add
push
jmp
shl
xor
adc
inc
sub
(bad)
adc
fnstenv
cmp
in
cdq
lods
xchg
sub
pop
cs
and
adc
adc
adc
ret
dec
inc
aaa
xor
pop
nop
repz
cmp
mov
js
mov
imul
je
pop
cmp
adc
pop
cmp
xor
mov
adc
mov
test
and
(bad)
out
xchg
and
out
out
je
sbb
adc
jle
stc
mov
xchg
pop
ret
sbb
out
push
mov
adc
mov
push
ss
jae
daa
sbb
xor
add
outs
adc
enter
les
repz
das
adc
cs
jge
in
pop
xchg
inc
and
xchg
mov
sbb
adc
mov
cmp
mov
push
es
js
sbb
mov
lods
mov
sbb
jp
fwait
ins
call
mov
lock
jl
in
test
addr16
adc
jne
push
xchg
js
iret
adc
test
dec
icebp
xor
int3
xchg
adc
mov
adc
(bad)
je
aas
adc
div
popa
out
adc
data16
sti
in
adc
call
adc
pop
mov
mul
xchg
add
cld
outs
dec
push
xchg
cdq
lock
nop
and
int
ret
loope
ja
dec
out
push
adc
retf
or
dec
in
mov
xchg
adc
mov
add
mov
dec
or
mov
mov
fild
js
dec
xchg
adc
aad
sar
fucom
adc
nop
ficomp
(bad)
sbb
mov
inc
lahf
shr
je
fidivr
add
jp
adc
add
adc
ss
push
adc
(bad)
cmps
mov
je
or
xor
adc
into
adc
les
add
mov
dec
pushf
pop
push
xchg
mov
and
ja
xchg
inc
jbe
stos
xchg
call
or
ret
pop
popf
xchg
push
clc
xchg
gs
pop
nop
cmp
inc
cmc
jp
inc
outs
and
mov
xchg
and
pop
aad
pop
xchg
inc
ins
mov
mov
test
adc
xchg
sbb
xchg
je
jg
retf
fsubr
mov
std
sbb
retf
cdq
fmul
fild
movs
(bad)
mov
imul
cmps
adc
inc
dec
push
test
into
aam
dec
sub
xor
jno
(bad)
mov
jmp
cmp
or
push
in
xchg
sbb
scas
cli
adc
jle
inc
xchg
lods
popf
out
fs
jp
in
adc
mov
aas
aad
adc
inc
leave
stos
ja
adc
sub
rol
xchg
les
(bad)
cmp
arpl
adc
mov
add
add
cld
dec
mov
adc
add
add
stc
pop
dec
sub
adc
add
les
inc
mov
pop
xchg
sar
movs
pop
push
adc
fs
aad
shr
lods
pop
movs
cmps
add
add
mov
sbb
cld
les
xchg
sbb
dec
fs
dec
add
push
jecxz
lods
adc
cs
fs
loopne
ror
sti
repnz
push
(bad)
call
sub
adc
adc
fsincos
mov
push
sbb
or
adc
adc
ds
popa
inc
enter
sahf
les
outs
jg
inc
pop
and
adc
fistp
xchg
adc
or
push
pop
idiv
int
jp
out
mov
or
stc
stc
in
mov
adc
vcvtps2pd
add
rcl
adc
add
cmps
add
or
retf
mov
sti
or
adc
enter
pop
and
add
cmp
mov
cmps
outs
sahf
adc
pop
popf
mov
fs
adc
data16
das
arpl
adc
mov
push
loop
adc
and
sbb
call
dec
push
adc
lds
pushf
push
fsubr
push
push
nop
(bad)
and
dec
mov
mov
(bad)
ds
js
adc
add
arpl
pop
xchg
std
pushf
push
loope
adc
sub
dec
push
xchg
scas
mov
fnsave
pop
mov
jns
and
mov
cmp
push
cmp
push
sbb
adc
push
mov
pop
xchg
sbb
stc
adc
or
mov
mov
(bad)
mov
adc
sbb
xlat
jo
or
xchg
cmp
es
sub
jp
cmps
in
imul
xchg
fcompp
sbb
push
popf
into
mov
adc
div
pop
cmp
xor
(bad)
(bad)
mov
mov
test
loop
mov
ret
(bad)
mov
stc
mov
pop
inc
int3
retf
cs
xchg
mov
movs
stos
rol
jo
or
adc
sub
jae
and
mov
mov
or
into
adc
ret
xchg
add
xrelease
dec
pop
(bad)
cmp
dec
lods
inc
mov
and
inc
xchg
mov
xchg
or
je
pop
sbb
fcom
ins
sti
or
cmc
sub
adc
or
fldcw
sbb
inc
hlt
int3
mov
push
push
adc
fsub
out
cmp
in
nop
xor
push
mov
sbb
jno
clc
mov
retf
cmc
xchg
sahf
shl
cli
jae
sbb
mov
or
inc
adc
sub
iret
jmp
rcl
lods
inc
mov
adc
xchg
idiv
aam
xchg
cmp
out
(bad)
fld
inc
pop
mov
pop
(bad)
fsubr
mov
mov
sbb
or
push
addr16
pop
xor
cmp
cmps
sahf
aad
fcomp
shr
mov
sbb
jle
add
shr
cmc
adc
push
pushf
es
dec
rcl
pop
ins
jp
cmp
adc
mov
and
adc
fild
int3
inc
mov
add
les
sub
jmp
imul
cmp
mov
cmp
cmp
pop
test
je
(bad)
aam
sbb
or
mov
in
cmp
cld
inc
rcr
and
inc
adc
in
ja
(bad)
cli
fist
sub
and
call
aam
daa
and
pop
sbb
xor
retf
cli
push
ins
cwde
mov
add
jne
fisttp
mov
les
xchg
out
stos
cmp
pop
ds
rcl
lock
add
adc
jmp
(bad)
xor
ja
lea
xor
out
iret
cmps
pcmpgtb
jo
jnp
jne
div
cdq
or
dec
ins
xor
jbe
add
retf
or
cld
out
push
shl
cmp
xor
mov
repnz
retf
jge
sbb
mov
loopne
push
mov
pusha
int3
dec
cmp
sub
inc
ficom
push
or
cmps
or
mov
dec
je
mov
out
adc
xor
jmp
sbb
mov
pushf
enter
cld
vmovapd
(bad)
in
pushf
mov
sbb
push
add
(bad)
repz
push
jmp
dec
mov
scas
imul
pop
rol
jmp
cmp
repz
cmp
add
inc
icebp
adc
and
mov
sub
test
ss
adc
or
cmp
clc
jl
or
jnp
enter
jo
sbb
add
sbb
xchg
xchg
xchg
out
cmp
and
jae
icebp
mov
adc
adc
fdiv
test
mov
sub
test
push
clc
stc
sbb
les
aam
in
or
js
push
into
sub
mov
jecxz
arpl
adc
jne
movs
mov
push
jns
repz
cmc
fadd
arpl
in
cld
and
aam
pusha
inc
mov
in
loopne
dec
repz
rcr
push
not
(bad)
(bad)
ins
inc
sub
out
out
adc
cmp
test
aaa
pop
and
or
adc
add
scas
add
cmp
xor
pusha
or
rcl
jb
xlat
push
sbb
stos
xor
lds
int
out
cmp
push
xchg
xor
pop
push
hlt
or
push
into
cmc
or
fsub
ja
fs
(bad)
adc
cwde
dec
stc
inc
out
ins
push
mov
and
xor
push
push
sub
adc
ja
mov
and
ins
and
push
dec
test
mov
pop
sbb
pusha
add
jns
adc
hlt
add
mov
std
fsubr
cli
fst
xchg
add
repnz
jmp
das
mov
lds
adc
push
jnp
outs
repnz
and
inc
mov
mov
xchg
div
xor
fsub
(bad)
fcomp
push
ss
scas
outs
dec
dec
mov
and
xchg
sub
std
cmp
mov
add
dec
inc
push
inc
jae
jno
loope
push
sub
fadd
sbb
ds
add
movs
or
adc
iret
pop
out
test
pop
out
retf
lods
stos
rcr
imul
cmp
adc
popa
inc
sub
ficomp
adc
sbb
imul
enter
repz
retf
ds
mov
icebp
mov
cmc
mov
mov
add
push
push
ins
test
rcr
ret
jne
fdiv
cld
idiv
inc
loope
int3
jl
out
repnz
jns
(bad)
iret
push
add
retf
call
mov
in
jo
xor
adc
loop
fs
iret
fcom
ret
dec
add
adc
mov
mov
adc
and
add
dec
fcom
push
ds
mov
(bad)
test
pop
mov
(bad)
dec
adc
xchg
sbb
adc
inc
dec
xchg
ins
sbb
and
fsubr
push
fimul
enter
shl
lods
adc
in
scas
xchg
cwde
sub
in
sahf
out
jbe
cli
xlat
push
loopne
inc
pushf
adc
mov
jle
adc
mov
(bad)
not
in
and
jnp
sbb
pminub
adc
retf
jmp
and
adc
sub
mov
pop
cmc
dec
xor
test
daa
cmp
daa
adc
pop
test
mov
cwde
int
pop
fst
out
mov
les
pop
mov
jmp
mov
dec
push
and
jbe
jle
push
sub
adc
fiadd
(bad)
mov
push
pusha
(bad)
fld
cmp
fs
cld
pop
lahf
adc
xchg
movs
fcom
mov
inc
adc
fisubr
xchg
imul
mov
stc
add
shr
enter
mov
lds
xchg
jp
mov
dec
adc
sbb
or
sub
scas
js
and
jne
inc
jmp
popa
int
inc
inc
cmp
cdq
xchg
mov
sti
sub
data16
xor
pop
adc
cmp
ss
ins
fst
push
cmp
xchg
adc
xchg
fiadd
sub
mov
loop
hlt
and
icebp
mov
das
int
xchg
not
cmp
retf
mov
arpl
jle
cmp
push
xchg
and
enter
jae
sbb
dec
cmp
mov
lds
fld
add
sti
das
cwde
sbb
inc
lods
repnz
cmp
jnp
xchg
or
std
mov
stc
test
and
inc
mov
int3
ret
xor
stos
ins
jne
pop
loope
mov
(bad)
js
push
push
data16
imul
jl
mov
in
add
ret
ror
bound
mov
xor
out
xor
adc
loop
call
push
cmp
out
or
mov
xchg
mov
iret
adc
int3
cmc
cmp
lock
add
popa
mov
jmp
mov
jo
push
movs
mov
dec
adc
push
cmp
sbb
loope
rcl
scas
pop
pushf
add
lock
jmp
aas
out
mov
cdq
pop
jle
std
xchg
jne
jo
sbb
cmp
bound
ds
adc
or
sar
mov
mov
mov
adc
mov
loopne
movs
stos
adc
scas
test
fbld
ss
fstp
jb
stos
push
adc
test
sbb
add
aam
iret
mov
in
xor
ret
outs
in
into
lock
scas
dec
movs
int
int3
es
pop
pop
and
xchg
imul
addr16
cs
sti
adc
shl
push
mov
push
push
movs
xchg
sbb
add
adc
and
mov
adc
std
push
mov
jmp
push
fnstenv
or
in
mov
adc
mov
push
mov
in
test
jge
adc
sbb
cmp
push
pop
loopne
mov
xor
ja
or
sbb
loopne
and
xor
cmp
in
sub
pusha
add
push
cmp
cmp
or
add
and
xchg
sbb
pop
lock
cmp
xchg
rcl
das
cmp
cmp
pop
adc
loopne
xchg
daa
retf
jmp
out
mov
adc
in
std
fst
cmp
stos
xchg
mov
push
adc
mov
push
mov
rcl
sbb
or
mov
add
arpl
and
mov
add
jnp
or
jmp
clc
push
nop
adc
scas
out
mov
sub
aam
jecxz
(bad)
addr16
cwde
mov
mov
xor
dec
mov
(bad)
adc
bound
hlt
adc
jmp
jge
test
adc
fwait
and
cmps
cmp
hlt
rcr
dec
mov
imul
(bad)
push
xchg
pop
adc
jb
out
xchg
test
or
int
push
jmp
jg
int
addr16
cld
xchg
movs
ins
inc
or
stc
adc
inc
fild
ja
aam
adc
rcl
aas
mov
cmc
mov
adc
jmp
pop
adc
rcr
fdiv
jmp
mov
cld
shl
cli
test
sahf
mov
mov
xor
adc
rcl
xor
in
add
push
call
data16
fmul
les
push
out
push
and
mov
xchg
lds
xor
or
push
push
je
push
pop
lds
sbb
pop
ins
ror
xor
sub
pusha
stos
adc
cdq
sbb
dec
int3
xchg
mov
inc
fidivr
or
mov
out
push
add
neg
out
adc
aad
int3
dec
or
push
xor
mov
mov
pop
jmp
aam
adc
sar
push
mov
data16
xor
je
adc
mov
or
and
cld
xchg
retf
neg
push
mov
test
cmps
xchg
scas
dec
inc
add
retf
(bad)
or
adc
xor
fdivr
mov
push
pop
xchg
cli
mov
pop
add
adc
jo
sbb
xor
inc
in
nop
adc
mov
mov
adc
in
call
pop
adc
pushf
popf
int3
iret
scas
adc
xor
mov
loopne
ins
repnz
aam
pop
adc
int3
mov
mov
cmp
adc
js
fs
adc
(bad)
cmps
mov
repnz
sbb
loop
retf
in
sub
adc
pushf
dec
dec
adc
lea
jecxz
mov
rcl
jle
or
fsub
push
lods
xlat
repz
xor
xor
sub
out
add
pop
push
scas
nop
out
xor
ins
lahf
cmp
je
sbb
icebp
adc
dec
sub
jle
inc
aaa
and
outs
adc
cmp
in
push
ss
cmps
(bad)
xor
sub
fst
ja
mov
or
pop
cmp
adc
out
pop
int3
jl
add
add
or
mov
sbb
scas
test
push
adc
inc
call
xchg
sbb
cdq
ds
sbb
or
add
int3
mov
inc
imul
inc
push
fcomp
and
adc
stos
jge
pushf
mov
cwde
and
sub
adc
aam
test
adc
xchg
push
push
jecxz
movs
stos
adc
sub
jp
or
and
adc
pop
cmp
sub
or
(bad)
call
leave
xor
mov
rol
hlt
mov
cld
adc
or
jmp
xchg
loop
add
sahf
movs
sbb
inc
(bad)
ins
cmps
int
in
ret
in
loop
add
cli
lods
test
add
xchg
xchg
scas
fwait
mov
cli
jle
push
xor
dec
fcom
sub
dec
xchg
iret
mov
icebp
rcl
test
push
hlt
(bad)
sbb
mov
repnz
mov
imul
popa
out
sbb
repnz
test
fld
popf
pusha
or
sbb
ret
outs
dec
lds
enter
xchg
call
sbb
clc
inc
sub
fisub
stos
in
adc
es
push
gs
and
test
adc
xor
or
jo
push
fldcw
cmp
push
data16
push
add
adc
push
adc
imul
or
shl
mov
cwde
cmp
ins
ins
xchg
push
sbb
leave
out
das
push
mov
xchg
dec
pop
or
call
les
sbb
xor
push
retf
sbb
xchg
icebp
(bad)
shr
je
mov
mov
pop
shr
(bad)
out
mov
xchg
iret
pop
sbb
(bad)
aam
movs
xchg
mov
add
jmp
sbb
loopne
ds
mov
inc
and
cmps
push
or
ret
or
sbb
in
sbb
stos
push
xor
xchg
out
sbb
push
push
pop
push
or
es
push
cmp
cmp
out
xchg
mov
loope
sbb
push
lock
sbb
push
push
out
stc
xchg
xor
jle
enter
jge
adc
in
xor
xchg
retf
jecxz
fadd
push
push
jge
rcl
enter
int
mov
imul
pop
and
dec
adc
aam
sub
and
or
fcom
jmp
cmp
push
xchg
sbb
(bad)
ins
mov
mov
out
std
and
adc
fsub
push
add
add
stos
push
xor
nop
sub
inc
and
(bad)
jno
jp
stc
fnstcw
mov
dec
in
mov
loope
dec
popa
hlt
leave
aaa
adc
and
pusha
cmps
sbb
jbe
pushf
jo
int3
push
cli
mov
xor
jnp
and
adc
adc
add
sar
adc
dec
mov
push
and
out
outs
or
popa
jge
pmaxub
test
jle
or
and
push
movs
dec
bound
lock
mov
mov
sub
dec
scas
inc
repnz
lock
call
repz
sbb
xor
scas
sbb
test
add
imul
pushf
outs
iret
push
push
loope
xchg
arpl
xor
cwde
dec
sbb
aad
(bad)
ja
aad
inc
into
int3
or
sbb
sub
jg
out
add
cmp
xor
dec
lock
fmul
sbb
sbb
aaa
int3
inc
hlt
add
xchg
sbb
fimul
rcr
inc
mov
dec
adc
or
std
outs
out
(bad)
add
aam
nop
push
add
clc
loope
push
xor
(bad)
imul
lahf
cld
fwait
xchg
adc
pop
xor
mov
cli
cmp
mov
pop
pop
cld
inc
test
pushf
pusha
jb
xor
dec
shl
retf
enter
arpl
add
ins
sub
mov
mov
dec
push
imul
aaa
adc
xor
xor
xchg
out
mov
sub
pop
inc
push
ins
ins
cmp
xchg
addr16
cmps
lock
lods
adc
mov
mov
adc
(bad)
rcr
stos
dec
xchg
sbb
shl
adc
lods
adc
inc
je
movs
cmps
aam
pop
push
push
xchg
not
and
fst
fstp
aam
out
adc
cwde
pop
jns
lahf
in
add
jmp
pop
out
loope
adc
jb
ret
push
push
dec
push
in
jmp
dec
mov
les
pushf
add
fs
and
mov
sub
pop
push
adc
or
(bad)
test
es
movs
and
push
mov
and
rcl
adc
push
inc
arpl
je
xchg
pop
pop
jbe
pop
push
inc
xchg
jb
mov
aad
fist
sbb
and
add
cld
in
jne
and
outs
dec
adc
mov
ins
sbb
and
sub
imul
aaa
mov
aam
mov
dec
sbb
push
adc
pop
sbb
cld
and
xchg
stmxcsr
adc
scas
lods
dec
leave
jmp
lods
stos
test
sbb
jne
jno
loop
lock
xchg
pop
aas
hlt
inc
lahf
mov
adc
inc
ins
int
add
in
repnz
mov
es
cbw
gs
xor
fiadd
hlt
jg
pop
pop
inc
(bad)
push
aas
test
sbb
out
dec
scas
lods
jae
cmp
frstor
mov
aad
je
fdivr
loopne
adc
jp
xor
mov
mov
pop
ja
retf
mov
frstor
adc
popf
mov
aas
in
add
icebp
hlt
(bad)
cmp
(bad)
xchg
adc
repz
adc
sbb
movs
retf
mov
xchg
and
and
imul
shl
adc
dec
xchg
rol
and
scas
sar
xor
scas
sbb
(bad)
mov
inc
and
xchg
popf
mov
and
adc
pop
jecxz
and
mov
adc
push
cs
sbb
aam
xlat
adc
aad
lahf
loope
and
add
push
mov
push
jae
cli
fdivr
mov
jmp
mov
jmp
push
loope
push
int
rcr
push
fmul
xchg
loopne
push
pop
xchg
test
adc
lds
xchg
and
cdq
(bad)
hlt
push
std
(bad)
in
xchg
bound
aaa
mov
call
gs
leave
cmps
and
retf
dec
mov
sti
jg
jbe
push
fiadd
sbb
popa
dec
mov
jmp
aad
in
stos
js
add
inc
mov
lods
mov
loope
(bad)
sbb
retf
in
mov
xchg
aaa
aas
dec
jno
pusha
jmp
mov
call
xchg
inc
loop
pop
shl
aam
pop
adc
adc
pushf
sbb
test
movs
push
shl
loopne
jl
and
inc
cli
fst
out
xor
mov
push
retf
xlat
inc
test
mov
je
es
push
push
popf
cwde
cli
inc
repnz
push
into
xchg
int3
and
xor
sbb
jmp
sub
stos
stos
pop
bound
mov
adc
jecxz
and
int3
stos
adc
push
xchg
ins
rcl
popf
adc
inc
movs
inc
pop
dec
out
or
(bad)
iret
adc
inc
int3
outs
retf
dec
sbb
cmp
hlt
addr16
adc
scas
lock
icebp
mov
push
inc
mov
gs
xchg
adc
in
cdq
loope
test
jbe
div
stc
adc
scas
cli
cld
vpinsrb
int
and
jge
cmc
fnstsw
jb
mov
adc
add
sub
sbb
sub
add
xchg
sahf
pop
xchg
retf
data16
call
mov
in
in
xlat
imul
paddw
adc
push
fnstsw
jmp
xor
xchg
push
(bad)
(bad)
sbb
in
xor
sbb
movups
add
adc
pusha
imul
pop
addr16
xlat
sti
jbe
push
pop
mov
push
adc
xchg
pop
adc
daa
pop
ins
mov
aas
jle
mov
and
ret
out
enter
xchg
add
lods
dec
jne
cmc
inc
adc
push
loopne
ds
shl
and
xchg
loopne
xor
clc
cmp
pop
retf
pop
push
adc
in
in
fcmovu
dec
add
cmp
adc
es
xchg
mov
mov
(bad)
mov
xchg
cmp
arpl
aaa
mov
jmp
out
sbb
stos
dec
sub
push
into
(bad)
pop
adc
sbb
fxch
sti
and
xchg
jl
xor
mov
lock
in
fnstcw
loopne
int3
jnp
xor
xor
cld
cli
and
sbb
shr
fmul
xor
shl
test
mov
sbb
cmp
fistp
or
sahf
or
cmp
clc
and
or
popf
adc
aaa
and
xor
int
(bad)
jp
mov
popa
lock
pushf
and
lahf
popf
(bad)
cmp
clc
xor
pop
inc
movs
sub
cld
fadd
xchg
and
inc
mov
xor
pushf
cmp
and
pushf
scas
push
sbb
and
push
xchg
std
leave
add
xor
outs
das
ins
jmp
shr
out
and
in
push
xchg
out
neg
or
jnp
sbb
retf
inc
push
push
sub
je
hlt
test
data16
xchg
(bad)
aas
mov
rol
sbb
stc
daa
in
cwde
shr
dec
cmp
mov
mov
call
pop
adc
cmovl
(bad)
call
inc
in
xor
pop
cld
add
adc
sbb
cmp
std
das
icebp
add
xchg
cs
cmp
xor
out
mov
hlt
pushf
(bad)
adc
aam
xchg
sti
gs
mov
adc
sub
adc
mov
sub
rcl
or
adc
jno
hlt
sub
and
test
scas
cmp
jle
mov
mul
ja
sbb
fnsave
mov
pop
push
je
hlt
jle
loop
sbb
int
jnp
les
cmps
(bad)
adc
icebp
cmp
dec
hlt
ins
jmp
cli
imul
adc
std
and
jbe
mov
mov
or
or
mov
jge
jmp
test
fsubrp
int
rcr
sti
xchg
push
jg
cmp
mov
add
mov
adc
inc
es
adc
clc
sahf
ins
adc
rcr
mov
std
or
adc
dec
retf
push
fs
loope
jmp
pop
ja
adc
xchg
adc
mov
push
adc
lods
push
bound
retf
js
mov
mov
or
popf
sbb
popa
pop
int3
adc
lods
imul
xor
xchg
sbb
or
in
adc
cmp
adc
jecxz
adc
repz
mov
pop
(bad)
sbb
stc
sbb
fild
cmp
sbb
jmp
mov
inc
ror
int3
dec
jmp
dec
test
dec
(bad)
aam
or
pushf
fdiv
loop
sbb
loopne
sub
adc
aam
mov
hlt
sbb
mov
ror
and
jne
lods
and
inc
push
imul
pop
cmps
or
pop
adc
je
pop
mov
mov
mov
scas
sub
in
in
add
jb
call
xor
js
not
mov
adc
mov
mov
les
pop
mov
das
mov
adc
xchg
adc
movs
pop
inc
arpl
add
fisttp
test
hlt
inc
inc
fwait
adc
or
inc
shl
sub
and
mov
fcom
dec
adc
xchg
imul
adc
or
aam
fist
jmp
mov
mov
mov
addr16
scas
pop
jnp
and
stos
loopne
and
imul
adc
mov
cmp
fs
adc
adc
xor
int
cwde
popa
push
push
push
add
mov
out
push
hlt
xchg
or
call
lds
ja
adc
mov
mov
add
or
jle
dec
adc
inc
or
adc
xor
push
aaa
mov
(bad)
lea
adc
repnz
adc
and
in
mov
push
cmc
mov
push
test
inc
add
push
pop
inc
es
xchg
mov
adc
push
rcl
ret
ds
adc
mov
les
xchg
fcom
mov
pop
xor
iret
in
lods
mov
ja
adc
lahf
test
and
mov
(bad)
into
cmps
or
dec
out
or
mov
repnz
ins
adc
jns
jae
cmps
hlt
sbb
int3
scas
adc
jae
or
pop
(bad)
sar
rol
xchg
or
sti
xchg
adc
cmp
sbb
jle
push
gs
add
cmp
cmp
je
out
fst
test
test
xor
cld
and
pop
hlt
data16
in
pushf
dec
rcr
in
xchg
pop
xchg
dec
and
xor
js
xchg
mov
stos
iret
(bad)
imul
frndint
es
cli
sbb
add
sub
sub
adc
xchg
jae
adc
pop
aad
sbb
retf
sbb
jge
push
test
(bad)
fsub
or
adc
into
mov
div
int
push
adc
das
adc
jbe
dec
or
ins
or
adc
jge
push
push
sbb
(bad)
in
mov
ror
mov
xchg
mov
jns
jae
xchg
sub
adc
mov
in
jo
xor
push
xor
mov
add
aam
inc
movs
sar
mov
sub
aam
aad
sbb
inc
ret
int3
mov
push
ins
mov
push
jmp
dec
mov
push
sbb
test
jae
retf
das
lahf
cld
cmp
cvtps2pd
(bad)
ss
inc
mov
inc
int3
ret
mov
jno
dec
sbb
stos
jae
sbb
aas
cli
std
xor
jecxz
add
and
fst
xlat
ins
test
adc
push
pop
popa
cwde
push
xor
adc
mov
cmp
xchg
loop
movs
sub
push
jp
xchg
fwait
ins
xor
pushf
je
aad
xor
sar
mov
movs
xchg
mov
movs
push
pop
add
cmp
add
mov
xor
mov
mov
loope
jecxz
nop
inc
stos
call
aaa
push
rcr
retf
push
jno
mov
or
adc
scas
les
test
xchg
dec
shr
xchg
dec
adc
push
push
out
add
xor
and
ins
movs
movs
xor
push
cmp
fld
adc
xor
add
push
out
and
adc
or
cmc
xor
adc
out
scas
test
mov
pop
icebp
jmp
jge
bound
aam
or
push
jnp
cmps
adc
lods
nop
imul
jge
shl
adc
imul
inc
jg
pop
adc
into
jbe
xchg
out
jge
sbb
push
es
scas
into
push
inc
loop
stos
adc
add
imul
rol
push
or
enter
cmp
sub
repz
or
jnp
jae
sbb
pop
fsub
push
ret
pop
gs
adc
jnp
jmp
sahf
shr
pop
mov
add
or
xchg
mov
(bad)
pop
(bad)
loopne
adc
push
and
inc
add
adc
movs
jmp
imul
mov
and
adc
xlat
lahf
pop
stos
or
xor
adc
mov
jecxz
push
pushf
pop
fst
retf
rcl
clc
adc
and
fdiv
adc
jmp
mov
inc
push
adc
jne
mov
adc
out
dec
(bad)
aas
aam
or
push
mov
jmp
and
adc
jmp
mov
fs
xchg
cs
xchg
enter
aaa
adc
xchg
ja
inc
leave
inc
dec
cmps
push
loopne
adc
inc
sub
nop
mov
sbb
xor
xor
dec
jg
jecxz
inc
(bad)
addr16
fdivrp
or
xor
push
xchg
adc
(bad)
sbb
adc
shl
jecxz
mov
add
push
inc
jb
stc
push
ja
xchg
ins
dec
or
int
ss
loop
inc
arpl
(bad)
in
mov
xchg
fdiv
cld
movs
add
aam
mul
cmp
scas
fcom
inc
lods
dec
xchg
adc
fstp
push
jne
mov
ss
scas
lahf
mov
mov
pop
(bad)
adc
loop
xchg
inc
xor
ss
cmp
cmp
mov
ins
in
shr
cld
in
loop
dec
fwait
push
rcr
ds
pop
pop
ja
or
dec
cli
sahf
inc
sub
sbb
movs
sbb
jecxz
cli
mov
adc
xor
aad
mov
adc
icebp
mov
dec
xor
xchg
or
xor
cmp
mov
in
add
arpl
call
push
sahf
push
adc
mov
jbe
int3
hlt
adc
sub
dec
test
mov
adc
(bad)
ficom
pop
jbe
lea
add
add
call
and
xchg
addr16
jmp
xchg
dec
es
pop
sbb
aaa
rcr
test
jns
jmp
test
or
xchg
(bad)
pop
mov
aas
jns
(bad)
ins
push
push
pop
fdiv
jae
out
into
test
jmp
adc
dec
imul
stos
hlt
push
cmp
push
mov
jecxz
push
xchg
sbb
mov
in
adc
mov
fdivr
test
cmp
leave
test
in
fwait
sub
mov
ds
mov
cmp
or
jge
movs
aad
jl
add
(bad)
in
(bad)
inc
adc
loope
(bad)
es
fnstsw
jo
sbb
jl
mov
adc
jmp
jnp
enter
push
jbe
jnp
movs
pop
xchg
sbb
pop
cmp
scas
scas
or
and
jbe
int
hlt
fs
movs
mov
adc
mov
push
lds
out
push
movs
mov
out
adc
push
out
mov
mov
push
jmp
xor
in
jle
xchg
inc
dec
scas
sbb
imul
test
ja
pop
inc
adc
call
push
push
pop
pop
icebp
lds
aam
push
mov
pusha
std
add
adc
adc
sbb
fsubr
jmp
cmc
movs
pushf
test
aaa
fidiv
lods
fcmove
sbb
rcl
dec
push
retf
scas
jmp
xchg
mov
pusha
mov
cld
push
sahf
mov
inc
adc
hlt
js
or
jno
scas
add
jb
and
inc
adc
push
shl
add
(bad)
and
and
or
xor
inc
jp
ret
cmp
xchg
xchg
push
add
mov
cmp
jmp
in
inc
int3
test
mov
pop
or
mov
sub
scas
imul
sbb
dec
loop
loope
jo
sbb
retf
xlat
mov
stc
movs
mov
sbb
cld
jae
sbb
lds
xchg
int3
cmp
xchg
jmp
(bad)
shl
out
aam
add
xchg
mov
cmp
pop
movs
ficom
jp
sar
adc
out
cwde
mov
aam
clc
dec
je
retf
sbb
push
xchg
pop
dec
out
out
add
scas
adc
leave
adc
ror
js
jnp
out
and
sar
icebp
push
fwait
pop
sti
adc
mov
adc
shr
(bad)
jae
ret
add
xchg
out
ins
mov
ja
lods
fiadd
push
xchg
push
ret
mov
sbb
mov
inc
sbb
adc
xchg
push
rol
and
pop
in
shr
jmp
and
in
test
xlat
or
sub
rcr
test
and
shl
cmp
out
gs
mov
push
xlat
ja
push
sbb
test
sub
icebp
or
push
sbb
sbb
add
push
xor
push
fs
popf
int
and
jnp
(bad)
inc
ins
loope
jg
leave
sbb
stc
sbb
ins
mov
cmps
adc
mov
mov
in
xor
mov
das
adc
mov
popa
retf
jb
and
(bad)
cmp
sbb
xchg
dec
or
(bad)
jno
and
fsubr
lods
mov
dec
inc
xchg
aad
dec
inc
mov
inc
cmp
sbb
addr16
sub
cmps
repz
xor
mov
inc
or
retf
test
adc
test
bound
hlt
imul
mov
inc
adc
arpl
jl
cld
cmp
cmps
or
add
lods
mov
dec
jbe
fld
imul
sbb
stos
je
sahf
bound
adc
inc
xchg
or
mov
xchg
inc
xchg
mov
call
cmc
dec
test
ss
in
xchg
mov
je
in
sar
in
fadd
int
cmp
sbb
and
inc
adc
icebp
fisubr
cld
adc
iret
pop
lods
jno
adc
pop
mov
ficom
jnp
and
movs
call
call
adc
scas
ja
sar
test
or
push
and
dec
xor
lock
push
cmps
aaa
mov
push
addr16
sti
inc
xor
outs
xchg
fistp
fstp
cli
sbb
mov
idiv
js
cmps
fdiv
ror
std
movs
sbb
addr16
adc
push
lea
sbb
sbb
or
hlt
pop
in
stc
inc
sbb
int3
push
xor
adc
idiv
mov
stos
mov
(bad)
ins
adc
mov
aad
adc
xchg
cmp
stc
and
adc
vmread
adc
pop
sub
cdq
adc
xchg
lahf
leave
sub
cld
das
movs
cmps
push
push
inc
adc
xor
jmp
jle
ss
arpl
inc
mov
in
in
sbb
add
scas
mov
pop
outs
(bad)
adc
sahf
out
dec
jno
fisub
sbb
hlt
fldenv
push
add
dec
adc
and
mov
adc
inc
sub
pushf
out
push
adc
push
cld
adc
cdq
dec
(bad)
test
das
out
mov
push
les
mov
dec
call
outs
pusha
sbb
mov
sub
call
into
mov
mov
xchg
int
ins
je
inc
scas
btc
adc
lods
sbb
mov
cmp
shl
mov
fcomp
and
call
adc
(bad)
popf
mov
or
sbb
imul
cmp
and
jmp
jmp
pop
(bad)
dec
inc
xchg
and
pop
rcr
push
rcl
cmp
in
shr
or
sub
repnz
adc
xchg
mov
inc
mov
inc
push
push
adc
shl
stc
mov
jmp
loopne
jmp
lock
adc
into
sub
xchg
sub
ins
inc
stc
retf
aam
mov
shr
stos
add
pop
enter
sbb
jg
outs
aam
adc
xchg
and
rcl
iret
retf
icebp
clc
jae
adc
rol
push
sbb
xchg
test
jecxz
or
xor
push
call
hlt
pmaddwd
stos
outs
cmp
shl
dec
mov
dec
adc
fist
push
ins
int3
mov
in
inc
mov
adc
push
add
and
aad
sbb
(bad)
neg
pop
in
cmp
int3
or
addr16
sbb
mov
daa
ffree
push
adc
cmps
pop
push
mov
in
sbb
in
out
movs
cli
clc
mov
add
loop
ret
or
push
xchg
xchg
xchg
std
adc
mov
repnz
je
repz
jmp
jle
sub
popf
(bad)
mul
adc
push
sahf
iret
mov
in
es
sar
les
cmp
outs
and
out
pusha
adc
sbb
inc
add
loop
mov
pusha
cli
mov
push
jno
fiadd
movs
sbb
pop
js
lods
cwde
mov
adc
mov
adc
xchg
rcl
sbb
adc
pop
jne
or
adc
mov
retf
dec
sub
push
out
movs
adc
and
mov
sub
push
adc
xor
imul
sti
fild
add
sbb
xchg
jge
in
mov
in
inc
div
add
stos
test
stc
popf
ds
fwait
pop
push
adc
retf
pushf
addr16
ins
pop
scas
push
dec
imul
xor
shl
inc
adc
outs
gs
stos
je
in
jo
adc
ret
inc
leave
xor
xor
mov
push
or
aaa
pop
icebp
adc
das
setle
scas
ds
xchg
js
mov
imul
les
scas
mov
ror
adc
xor
data16
mov
nop
icebp
xchg
jl
ret
fs
inc
jge
das
mov
push
jae
adc
xchg
or
cmp
or
cmp
ds
les
adc
dec
adc
je
cmp
rcl
stos
ja
sti
xor
jnp
jbe
aaa
outs
xor
inc
in
xchg
(bad)
(bad)
aam
sub
out
repz
pop
push
(bad)
push
or
or
dec
xchg
shl
add
adc
pop
pop
call
push
xor
ret
ds
push
movs
test
mov
nop
sbb
push
adc
jmp
das
adc
add
shr
adc
adc
les
into
push
xor
mov
add
sbb
lods
pop
and
jmp
mov
xchg
pop
or
push
(bad)
and
mov
ds
push
cmp
out
imul
mov
(bad)
lds
hlt
pop
sub
xchg
adc
xchg
push
clc
popf
adc
mov
mov
into
xor
add
mov
jne
add
fcmovbe
hlt
xor
mov
les
enter
xor
or
adc
movs
or
adc
call
add
lahf
nop
stc
mov
or
test
aam
cmp
mov
inc
idiv
xadd
std
add
je
out
jl
pop
cdq
cld
mov
mov
dec
int
jbe
adc
je
mov
push
push
xchg
sub
jg
fs
shr
cmp
mov
pop
gs
lods
hlt
aam
pop
mov
call
inc
dec
add
scas
aam
aaa
add
sub
imul
je
int3
add
push
pop
adc
cmps
fnop
mov
dec
cmp
mov
pusha
fs
lods
mov
or
in
xchg
scas
adc
pop
adc
aad
loope
push
imul
push
aam
retf
cmp
adc
cmp
loope
adc
and
and
aaa
je
inc
rcr
retf
xchg
test
(bad)
stc
pop
jecxz
and
hlt
(bad)
xchg
push
je
xor
int3
iret
jae
lods
retf
jae
movs
xchg
pop
mov
xor
dec
adc
adc
int3
and
in
(bad)
ror
test
jmp
(bad)
int3
shr
retf
push
inc
data16
jmp
movs
gs
cmp
push
or
cdq
dec
pop
and
call
or
and
clc
pop
sub
lahf
call
scas
fnstcw
or
push
aam
xchg
(bad)
les
push
jle
inc
cdq
ins
adc
(bad)
sbb
fldlg2
repz
ins
das
jnp
rol
jecxz
push
mov
int3
add
adc
jo
(bad)
fsubr
or
aam
pop
and
xchg
hlt
pop
jg
push
or
pushf
mov
je
aaa
sbb
arpl
mov
rol
adc
test
push
dec
sti
xlat
mov
sub
cwde
loop
adc
imul
sbb
pop
push
pop
mov
dec
xor
mov
les
adc
lock
mov
and
jle
mov
dec
and
mov
xchg
aam
pop
int3
mov
mov
adc
repnz
jbe
mov
inc
int3
das
xchg
xchg
jge
iret
xchg
(bad)
movs
outs
mov
push
sahf
cmps
xor
dec
cmps
pop
call
mov
mov
in
test
in
adc
dec
xchg
add
movs
cmp
push
jg
jge
inc
mov
mov
dec
jl
and
pushf
pusha
adc
push
aad
sahf
jbe
and
sbb
imul
push
adc
out
cmps
and
adc
adc
stos
sub
repz
xchg
dec
gs
(bad)
push
hlt
cwde
xchg
es
xchg
(bad)
push
xor
popf
mov
pop
and
(bad)
movlps
stos
jge
lea
cli
daa
adc
dec
xor
lock
sub
mov
nop
loope
inc
jge
jne
loopne
cmp
mov
jb
clc
mov
rcl
and
push
sub
scas
cld
mov
pop
mov
fnstcw
fst
stos
in
mov
and
push
ins
je
cld
test
mov
dec
sub
cdq
mov
icebp
cli
jg
adc
mov
sbb
cmp
(bad)
pop
loop
xor
add
mov
mov
cli
ins
dec
inc
xor
(bad)
into
and
idiv
repz
std
in
imul
xadd
mov
jmp
lahf
cwde
pop
loop
adc
(bad)
arpl
adc
ins
adc
fild
imul
fs
pusha
cmps
adc
push
repz
pop
adc
fldenv
pop
push
enter
mov
and
out
bound
adc
stos
adc
mov
popa
ds
sub
lds
ror
mov
jmp
cli
cmp
aaa
jmp
and
addr16
xor
data16
(bad)
clc
cmp
push
sub
mov
adc
fldenv
je
jmp
sar
int3
mov
in
neg
mov
repz
sub
mov
mov
xor
jmp
aaa
loopne
pop
fidiv
aam
or
call
push
mov
in
sha256rnds2
cwde
adc
outs
in
adc
jmp
adc
fist
adc
cli
sub
mov
out
ds
xor
(bad)
sahf
into
mov
adc
fild
repnz
lods
call
lods
call
xor
rol
or
repnz
jae
mov
test
cmp
pop
push
das
imul
stos
out
out
adc
inc
and
cmp
adc
ficom
leave
repnz
shr
push
movs
add
lahf
push
jl
cmp
retf
xchg
fadd
jg
and
jge
pushf
in
ins
mov
adc
adc
xlat
les
adc
xchg
pop
shr
stc
daa
addr16
punpcklbw
out
lock
imul
test
ret
mul
inc
je
(bad)
mov
or
inc
dec
lods
pop
mov
adc
cdq
push
daa
lea
fild
xchg
sub
cs
rcl
jmp
sbb
pushf
dec
jb
aad
call
iret
xchg
mov
dec
mov
mov
dec
mov
in
and
outs
imul
jno
test
jb
ret
adc
adc
inc
imul
out
adc
lods
loopne
outs
jb
out
adc
add
push
mov
sub
dec
pop
and
cmp
jmp
out
popa
add
(bad)
sbb
dec
xlat
sub
xor
adc
test
das
adc
adc
fcomp
in
stos
mov
dec
and
scas
xor
adc
les
leave
stc
icebp
rol
jl
aas
adc
retf
rol
mov
iret
or
jno
jmp
dec
adc
mov
pop
(bad)
cmps
daa
adc
(bad)
sbb
out
int
adc
mov
and
mov
in
pop
fbld
mov
adc
loopne
retf
iret
sub
lods
jp
movs
sub
mov
call
adc
inc
lahf
shr
jnp
pop
adc
ret
das
retf
sbb
inc
rcr
lods
shl
adc
sbb
dec
adc
sbb
fs
nop
wbinvd
in
pop
icebp
inc
sbb
xchg
xor
gs
aas
cdq
sbb
fistp
daa
cmps
cmp
adc
gs
test
adc
mov
fs
pcmpeqw
cmp
call
mov
(bad)
enter
adc
(bad)
pop
dec
lods
sub
xor
test
aaa
test
imul
xchg
enter
jmp
and
scas
cmp
rcl
fwait
icebp
jmp
cmps
adc
lahf
aaa
jl
aas
cli
sub
adc
cmp
out
iret
adc
jno
jmp
dec
loopne
sub
mov
(bad)
mov
call
sahf
xchg
into
adc
ret
xor
ss
not
cwde
les
sub
lods
je
sti
adc
imul
movs
add
adc
cmps
(bad)
mov
or
sbb
pop
int3
jge
cdq
or
in
pop
loop
mov
fld
test
mov
scas
xlat
xchg
lods
(bad)
cs
shl
push
push
adc
adc
in
adc
fisubr
push
jg
adc
test
sub
adc
jmp
test
inc
adc
ins
cmps
dec
ret
inc
adc
or
hlt
loopne
xor
daa
mov
push
mov
adc
inc
sub
and
xchg
inc
fbld
pushf
xchg
jo
sub
adc
push
inc
loope
into
adc
push
jp
retf
xchg
aad
and
scas
and
and
fist
cmc
sbb
jne
jl
mov
jl
sbb
(bad)
(bad)
movs
call
daa
push
jmp
loope
lock
cmp
ficom
movs
jmp
mov
pushf
add
push
(bad)
adc
daa
push
jo
pop
cmp
jp
popa
mov
cwde
adc
xchg
cmp
pop
ins
movs
pop
adc
mov
push
pop
scas
imul
push
in
call
adc
popa
mov
push
and
clc
adc
dec
adc
cmp
mov
outs
mov
mov
adc
adc
aam
push
mov
push
inc
adc
dec
cmp
in
cmp
dec
sub
test
xchg
push
fcomp
mov
loop
fsub
inc
pop
icebp
data16
or
cli
and
add
aam
retf
jno
add
arpl
add
sbb
cmp
inc
je
int3
push
or
adc
retf
fidivr
jg
in
int3
(bad)
inc
mov
mov
push
xor
out
jle
loop
out
fdivp
ins
xchg
loopne
and
dec
or
or
popf
adc
and
scas
xchg
sbb
repz
out
into
push
fmul
out
push
xor
sub
mov
out
xchg
push
sbb
sbb
clc
mov
push
inc
pop
cmc
je
aaa
jns
repz
adc
sahf
inc
sub
hlt
mov
or
jecxz
inc
cmps
scas
or
xchg
int3
pop
data16
(bad)
scas
call
add
sahf
je
in
add
mov
sbb
cld
ror
adc
popf
and
sbb
out
jge
inc
jecxz
and
int3
push
repz
fstp
sub
mov
outs
ret
cmp
jmp
pop
inc
pop
mov
sub
sbb
jecxz
or
sbb
out
pusha
retf
push
(bad)
push
out
pop
adc
int3
inc
je
loop
push
(bad)
pusha
jmp
add
sbb
sbb
sar
fstp
add
cwde
ret
adc
cmp
or
dec
in
stc
adc
adc
adc
enter
add
dec
neg
aam
sbb
das
scas
jbe
test
ror
pop
sbb
pop
mov
out
push
retf
inc
jbe
mov
movs
in
sti
mov
repnz
sub
mov
lods
cld
push
mov
retf
adc
retf
lods
add
push
dec
sub
repnz
(bad)
sub
jge
dec
push
xchg
dec
shl
mov
sbb
pop
push
inc
je
(bad)
xor
loope
push
adc
int
fdiv
ficomp
cwde
pop
push
ret
test
or
xor
ficom
adc
sti
or
mov
adc
or
jg
xchg
in
push
adc
xchg
loop
mov
jecxz
push
ds
or
xchg
aaa
imul
and
loope
aaa
lods
adc
loope
jo
shr
xchg
and
(bad)
icebp
movs
mov
or
mov
popa
mov
test
in
or
(bad)
test
xor
std
push
outs
cld
push
pop
xor
adc
cwde
xor
int3
stos
mov
xchg
mov
or
shl
movs
add
das
pop
cmp
sbb
pushf
outs
jmp
or
cmp
pop
in
ss
sub
(bad)
(bad)
enter
std
xchg
push
sbb
fsubrp
cmp
inc
aaa
and
xor
call
jnp
fadd
mov
(bad)
inc
mov
adc
dec
stos
push
cdq
loop
mov
cmp
adc
push
out
js
sub
rol
lods
icebp
adc
outs
test
jne
retf
xchg
ins
xor
sbb
stos
outs
sub
adc
loop
jp
fcomi
pop
adc
call
pop
xlat
(bad)
loopne
rol
ret
xchg
ss
inc
aam
sub
movs
mov
or
retf
push
mov
arpl
lods
or
pusha
call
xlat
mov
push
cmps
int3
pop
int
arpl
cdq
push
dec
and
icebp
ins
rcr
cli
xchg
adc
retf
xor
int3
inc
push
adc
dec
mov
xchg
and
and
cmps
call
xchg
int3
hlt
adc
ins
es
and
and
(bad)
fisttp
inc
ds
out
cmps
jl
and
adc
adc
cmc
mov
or
mov
inc
mov
or
adc
add
shl
mov
in
pop
in
inc
out
loopne
and
fidiv
add
adc
mov
inc
js
cmps
sbb
inc
les
push
adc
loope
xor
inc
call
or
in
xor
fmul
xor
xlat
in
jb
sbb
(bad)
mov
push
repz
xchg
in
cmp
mov
or
fnsave
adc
xor
adc
fldcw
jmp
clc
adc
xchg
outs
iret
add
adc
loope
std
mov
pop
ror
repz
xchg
mov
mov
or
shl
fs
adc
pop
sbb
unpcklps
gs
popa
scas
aad
adc
cmp
jmp
xchg
pop
daa
xchg
or
add
in
test
enter
adc
pop
iret
out
mov
(bad)
sbb
cmp
pop
out
xor
test
rcl
sub
adc
pop
pop
ins
xchg
jl
scas
ficom
jge
inc
mov
mov
adc
add
sub
in
not
sbb
push
(bad)
push
sar
aam
ins
out
cmp
xor
outs
mov
sbb
or
mov
adc
int3
cmc
retf
xchg
dec
in
and
jo
(bad)
jmp
adc
sub
arpl
xchg
push
rcl
mov
out
lods
sub
adc
sub
enter
adc
ret
ror
(bad)
aam
test
jmp
jmp
sub
push
add
adc
mov
(bad)
gs
mov
imul
fwait
mov
cmp
jnp
xor
ss
push
push
out
stos
(bad)
int3
test
fs
(bad)
stc
int
inc
out
fmul
in
dec
fldenv
leave
fs
popf
mov
pop
icebp
es
fcomip
retf
rcl
in
loopne
jno
sbb
push
(bad)
loopne
sbb
je
sbb
mov
mov
leavew
in
adc
pop
adc
movs
mov
lods
xor
cmp
addr16
push
cmp
and
sub
inc
inc
aam
retf
cmp
pop
or
push
adc
cli
call
in
mov
pop
hlt
aad
test
dec
xchg
(bad)
fcomp
mov
cld
jbe
push
inc
push
sbb
push
jmp
movs
repnz
or
mov
pop
xor
mov
add
inc
jp
pop
rcr
jne
test
ss
cs
int3
es
fcomp
xor
sbb
dec
pop
(bad)
dec
std
cs
dec
mov
mov
xchg
hlt
daa
call
xor
cli
jle
dec
inc
int3
call
outs
je
sub
arpl
lahf
cmp
xor
add
into
daa
or
mov
mov
jne
retf
(bad)
and
adc
rol
je
movs
push
arpl
adc
fcom
and
int3
jp
pop
adc
push
sti
inc
mov
sbb
pop
movs
loop
cmp
fadd
adc
test
fcom
mov
rcl
sub
mov
mov
adc
mov
adc
xchg
loop
xchg
dec
jmp
push
shl
adc
xlat
ror
adc
int
imul
jne
cmp
out
or
mov
or
ins
fbstp
test
xor
outs
fadd
jne
adc
pop
(bad)
sub
mov
dec
sti
in
clc
mov
push
repz
adc
(bad)
pop
lods
popa
sbb
add
cmps
aam
das
dec
repz
jg
push
pusha
inc
pop
rcr
adc
jne
and
pop
dec
das
mov
adc
sbb
pop
out
mul
ja
retf
push
jae
xchg
cmp
mov
mov
repnz
pop
push
xor
hlt
mov
iret
push
pop
dec
pop
sub
jg
sahf
or
gs
or
ins
fs
repnz
mov
cmp
ins
ins
dec
movs
mov
(bad)
add
das
loop
push
repnz
repz
adc
rcr
outs
cwde
enter
neg
pushf
bound
jno
adc
or
sahf
mov
or
mov
cdq
adc
shr
enter
adc
xor
ins
and
add
lock
clc
pop
jmp
and
out
ja
xor
cmps
xchg
mov
les
cmp
movs
mov
push
jb
aas
mov
dec
and
xor
mov
not
cmps
inc
rcr
cli
jo
jecxz
ins
sbb
(bad)
push
and
clc
mov
adc
test
ficomp
pop
mov
add
test
enter
js
fwait
icebp
arpl
cmc
sar
xlat
outs
push
adc
mov
push
mov
hlt
les
(bad)
loopne
xor
inc
xchg
push
sub
fs
push
pop
int
arpl
adc
xor
jp
fwait
sti
retf
sbb
aaa
inc
int
adc
(bad)
and
jmp
lahf
mov
aam
sbb
adc
retf
xor
out
call
sub
adc
adc
mov
addr16
adc
test
add
lods
adc
cmc
fcomp
jle
adc
mov
sbb
fidiv
outs
cmp
cmc
outs
inc
xor
in
ficom
adc
and
cmp
(bad)
xchg
aad
adc
mul
scas
imul
push
hlt
stos
cmp
adc
jl
add
rcr
add
jmp
aam
mov
shr
pop
mov
or
jp
push
test
inc
test
lahf
push
movs
pop
push
lock
sbb
outs
xchg
xor
xor
and
jge
jecxz
adc
or
mov
mov
out
(bad)
out
popf
iret
aam
jl
sbb
inc
push
out
jle
clc
sbb
mov
push
popa
xchg
mov
test
idiv
unpcklps
dec
and
adc
movs
sub
cmp
adc
scas
inc
adc
mov
lods
xchg
sbb
xchg
in
shl
add
(bad)
pop
jmp
(bad)
out
(bad)
retf
aaa
fmul
call
enter
adc
mov
add
push
dec
in
retf
dec
jl
dec
dec
scas
fistp
xor
idiv
(bad)
loop
jmp
int3
mov
ror
in
and
ins
int
jle
imul
(bad)
xchg
rol
pcmpeqw
mov
cmp
int3
jmp
xchg
js
les
mov
iret
popa
fldcw
mov
cld
sbb
retf
dec
shl
mov
add
jo
call
mov
std
jmp
pop
mov
out
pop
in
jnp
arpl
mov
cld
imul
int
hlt
out
push
jl
mov
mov
mov
inc
test
adc
cwde
fcomp
sbb
pop
xchg
les
adc
sub
ret
aam
pop
leave
or
shl
cmp
dec
jg
mov
adc
push
sahf
stc
adc
in
lea
mov
mov
movs
mov
xchg
adc
repz
push
and
lock
shl
adc
xchg
inc
cmp
inc
cmp
adc
push
movs
jle
jp
sub
jae
mov
pslld
scas
es
push
xor
adc
xor
adc
sub
mov
sbb
ja
je
pop
push
mov
ss
sar
mov
xchg
jp
fmul
cmp
arpl
in
dec
xor
and
sub
adc
out
pop
fst
jns
xor
and
(bad)
sub
inc
pop
adc
xlat
pop
iret
mov
out
(bad)
jmp
inc
sub
or
cdq
jbe
iret
les
shl
fldenv
mov
xor
jnp
js
outs
ret
aam
adc
mov
mov
or
adc
inc
jnp
and
xlat
in
adc
add
push
mov
lods
popa
fsub
dec
adc
push
jno
mov
fsub
xor
sbb
rep
push
jecxz
int3
int
adc
sbb
fmulp
push
jbe
test
cmp
loope
cmp
push
mov
icebp
jmp
mov
xchg
into
repz
stos
adc
dec
call
enter
test
fdivr
inc
push
in
sbb
out
stos
pop
je
xchg
cli
out
sub
push
cli
xlat
sub
aam
pop
mov
adc
xor
jmp
xchg
push
xchg
jae
test
pop
ins
aam
and
iret
push
fcom
mov
jle
mov
or
adc
lea
(bad)
mov
push
dec
xchg
adc
mov
pop
xor
xchg
adc
cld
ret
cli
ret
aaa
sbb
je
fadd
loopne
and
push
int3
fist
adc
into
cs
sbb
scas
adc
test
je
xchg
adc
and
jne
jle
or
in
enterw
sar
js
ins
push
jo
xchg
(bad)
sbb
mov
mov
nop
mov
in
adc
es
jle
cld
mov
in
inc
dec
sbb
xchg
pop
xor
ror
xchg
in
dec
pop
daa
or
cmp
lods
dec
mov
pop
push
loope
push
xor
xor
retf
das
ins
jo
and
push
aaa
pop
dec
xor
je
inc
bnd
pop
fwait
scas
mov
push
pandn
jmp
nop
jbe
and
mov
cmp
push
cdq
shl
xchg
add
aaa
nop
cmps
cld
call
cmp
stc
and
stos
add
xchg
outs
adc
retf
adc
cmp
adc
(bad)
scas
pop
hlt
xchg
pushf
call
fidiv
sti
xchg
xor
jge
in
xor
std
adc
cdq
(bad)
fild
and
retf
into
add
(bad)
and
iret
xor
cmp
pop
mov
adc
test
les
lods
jmp
retf
adc
mov
in
ins
push
and
inc
adc
(bad)
(bad)
das
push
call
loopne
clc
adc
into
push
pop
cli
popf
push
fisttp
mov
xor
and
ret
push
outs
jmp
jbe
sbb
push
mov
ds
hlt
out
pushf
xchg
adc
mov
pop
jle
dec
stos
mov
xor
lock
inc
mov
sub
push
test
jmp
inc
in
sub
jns
in
int
into
sub
cmc
ficom
xchg
mov
dec
or
pop
mov
lods
adc
add
or
pop
lea
push
and
scas
inc
sbb
xor
pop
data16
fsubr
neg
push
retf
aas
mov
xchg
push
or
sub
mov
inc
test
ror
xchg
icebp
ins
adc
fwait
push
jl
adc
ins
aad
addr16
cmp
lahf
aam
fcom
sub
fldenv
push
dec
sbb
or
inc
ins
and
sub
xor
cs
adc
dec
in
xchg
fisub
loop
es
fst
pop
imul
jp
sbb
xor
inc
adc
xor
mov
adc
lods
cdq
ds
js
test
push
inc
(bad)
jl
sub
add
les
pop
adc
outs
sbb
stos
dec
xor
daa
out
loop
adc
and
and
je
pop
std
fbstp
push
push
push
(bad)
adc
mov
mov
cli
fcomp
jecxz
aam
and
daa
nop
iret
xchg
aas
adc
vmwrite
std
pop
movs
out
mov
or
xchg
dec
mov
test
pop
hlt
ins
mov
ins
inc
mov
cwde
pop
jle
adc
adc
jno
and
mov
test
adc
int3
lods
into
(bad)
or
cmp
push
add
adc
add
imul
ja
or
paddw
pop
(bad)
jp
loop
push
sbb
push
jmp
and
push
or
xchg
sub
test
or
jno
sbb
sbb
in
lock
mov
add
add
or
mov
mov
adc
jmp
sub
xchg
jl
enter
(bad)
push
add
lahf
movs
pop
sahf
xchg
fcmovb
bound
pop
pop
xlat
call
xchg
sbb
mov
aad
dec
and
jg
pop
je
(bad)
sbb
int3
and
stc
sbb
call
call
or
std
sub
push
fistp
push
mov
inc
or
stc
xchg
fs
jae
sbb
push
enter
add
mov
jl
jmp
lods
add
pushf
pop
neg
ret
sub
aam
int3
inc
mov
xor
jbe
not
jmp
imul
imul
push
xchg
jmp
adc
mov
mov
jp
mov
sbb
icebp
jmp
push
xor
sbb
mov
add
fidivr
in
dec
sbb
jle
sub
fldcw
(bad)
(bad)
mov
xor
seta
loop
call
sub
xor
(bad)
(bad)
xor
test
mov
sub
cmp
imul
pop
jmp
icebp
adc
js
adc
stc
cs
ficomp
cld
inc
adc
inc
jecxz
adc
adc
mov
inc
mov
lock
cmp
cmps
adc
imul
sahf
cmc
int3
cli
lods
mov
push
xor
and
adc
inc
dec
sub
dec
stos
in
xor
sar
call
xchg
sbb
adc
cmps
lds
jge
adc
mov
jne
cmps
int
adc
add
cmc
shr
popf
adc
push
scas
test
data16
push
div
cmp
push
pop
mov
adc
add
int3
add
in
mov
inc
popa
inc
adc
rol
mov
mov
adc
(bad)
mov
(bad)
adc
in
sahf
dec
hlt
mov
cmp
and
sub
jmp
aas
sub
or
popf
xchg
adc
sbb
mov
mov
and
mov
inc
jmp
iret
call
lods
mov
xlat
jge
fs
sub
iret
xor
add
push
stos
push
mov
cmp
and
mov
jae
inc
aad
xchg
adc
cld
test
push
jns
sbb
jmp
idiv
push
xor
or
inc
pop
fidiv
or
dec
in
cmc
ficomp
aad
ror
xchg
xchg
fdivr
and
imul
dec
sbb
cs
ja
in
cld
sar
js
(bad)
push
xor
mov
lods
and
sub
xchg
stos
push
cmp
adc
lods
mov
cmp
sbb
dec
mov
dec
push
mov
adc
jmp
and
xor
cmps
mov
mov
xor
scas
outs
gs
in
jp
mov
push
(bad)
mov
loope
push
cmp
mov
rcr
loope
add
aad
mov
inc
adc
xchg
and
out
(bad)
cmps
sbb
add
stos
jno
daa
not
push
mov
mov
bound
stos
mov
mov
cmp
and
cs
rol
imul
popa
xchg
pop
xor
in
ins
inc
push
bnd
mov
rcr
push
int3
cmc
inc
cmp
icebp
cmps
ret
adc
sbb
mov
movs
and
sbb
push
push
cmp
push
(bad)
test
mov
mov
xchg
add
sbb
(bad)
mov
push
sar
ja
sbb
retf
das
xchg
and
push
jl
aad
test
(bad)
and
dec
inc
sub
jg
js
cmps
popa
adc
sub
or
(bad)
cli
add
or
je
pop
and
sub
cdq
pop
sahf
or
dec
xor
or
push
ret
(bad)
popf
and
xchg
dec
dec
daa
mov
fwait
int3
int3
inc
add
gs
dec
ror
fidiv
jle
lock
sbb
loope
(bad)
mov
sub
imul
jbe
push
int3
lods
pusha
cld
push
call
inc
xchg
gs
or
adc
mov
test
mov
adc
loop
dec
xor
jg
mov
push
stos
push
in
sar
stos
sbb
scas
adc
xor
scas
mov
pop
xchg
mov
jg
lea
enter
jl
gs
test
hlt
dec
pop
int3
dec
push
(bad)
sti
cmp
xor
sub
mov
mov
aas
cdq
mov
mov
neg
sti
jmp
stc
fucomp
lock
mov
sbb
imul
xchg
inc
loop
arpl
or
into
mov
xor
iret
sbb
jmp
pop
pop
out
mov
pop
add
ficomp
jb
test
push
xchg
mov
jl
xchg
aad
push
stos
in
push
ret
push
add
jge
call
pop
aaa
dec
fcomp
fwait
test
subps
pop
sbb
mov
jmp
xchg
loop
mov
lock
retf
dec
inc
xor
mov
add
xchg
loope
mov
adc
xchg
ins
mov
scas
adc
adc
ds
pop
sbb
ins
mov
cmp
cmc
xchg
sub
test
jp
icebp
(bad)
stc
(bad)
in
pop
and
jmp
sbb
popa
aas
retf
jns
xor
dec
mov
aaa
xchg
mov
cs
xchg
adc
int
int3
or
fisub
pop
enter
repz
mov
push
addr16
jno
dec
add
mov
mov
arpl
mov
je
mov
repz
mov
mov
je
pushf
sub
xchg
fwait
jmp
mov
retf
ds
mov
xchg
and
dec
addr16
jne
ficomp
jnp
sahf
cmps
pop
int
push
mov
add
add
call
mov
push
push
sub
out
dec
clc
lock
xchg
test
pop
inc
cdq
int3
jns
mov
lea
add
retf
aam
ja
and
adc
adc
aam
ss
mov
rol
cwde
loope
cli
movs
repnz
adc
shl
das
adc
sbb
mov
int3
mov
mov
push
repnz
push
jp
mov
in
out
and
and
std
inc
mov
out
or
jo
shl
je
cdq
sbb
sub
jnp
out
adc
pop
loop
and
inc
cmp
push
xchg
nop
mov
or
test
mov
sbb
inc
adc
movs
les
mov
mov
sbb
pop
pop
inc
inc
lods
loope
sub
adc
sub
jnp
sbb
imul
push
retf
push
or
das
imul
retf
cmps
push
adc
mov
sbb
jne
jno
dec
sahf
lahf
sbb
retf
test
and
adc
mov
clc
and
dec
or
dec
and
pusha
sub
mov
mov
xchg
jl
arpl
les
sbb
or
and
xor
in
les
push
dec
xchg
aad
mov
(bad)
retf
rol
pop
pushf
fist
mov
adc
ficomp
add
ret
mov
ror
and
retf
mov
bound
and
push
ja
inc
jno
push
popa
or
repz
adc
in
xchg
fsubr
out
dec
xor
lahf
jmp
mov
xor
jne
mov
dec
jecxz
fst
xchg
loop
jmp
inc
add
outs
fs
inc
fcomp
test
jae
es
add
mov
push
cmps
push
scas
lahf
cmp
push
xchg
leave
adc
mov
jbe
retf
pop
in
push
nop
jmp
push
adc
gs
or
fmulp
dec
pop
adc
bound
adc
arpl
scas
xchg
cmp
in
or
in
xchg
mov
imul
and
mov
pop
repz
jns
aad
lods
pop
or
adc
cmps
pop
mov
cli
in
fnstcw
not
mov
pop
inc
jae
xchg
and
das
fadd
imul
mov
add
jle
sbb
pop
mov
aaa
(bad)
cld
ins
adc
or
stos
dec
push
pop
adc
je
xrelease
pop
pop
les
sub
jo
(bad)
sbb
xor
dec
dec
iret
add
push
cs
adc
push
sub
pop
mov
call
(bad)
fwait
push
movs
xchg
mov
jo
mov
push
imul
mov
inc
call
movs
xchg
mov
xlat
pop
xor
cmp
mov
xchg
sti
jp
adc
fld
cld
push
loop
mov
bound
rcl
ror
movs
pop
jo
pop
push
sti
pop
sbb
scas
mov
cld
xchg
call
in
and
fst
sbb
ret
jle
adc
clc
add
sbb
pushf
(bad)
jmp
fild
les
and
in
xor
adc
inc
in
out
mov
sbb
cmp
cmp
stos
data16
xchg
inc
in
and
cwde
repz
and
adc
int3
jecxz
mov
mov
xchg
daa
repz
icebp
aam
inc
int3
pop
inc
cmc
call
pop
sbb
ins
lds
add
mov
repz
cmp
sbb
inc
inc
aas
adc
xchg
jbe
xchg
xchg
jle
sbb
aam
in
sbb
int
xchg
mov
mov
push
add
ret
adc
dec
in
ins
and
retf
push
lds
das
inc
push
sub
add
in
int3
ror
mov
into
and
out
adc
popf
jmp
loopne
adc
outs
stos
mov
aam
mov
inc
ins
dec
jmp
aas
jle
addr16
ret
sbb
jbe
test
cmps
mov
mov
adc
xchg
push
outs
inc
add
mov
push
fadd
je
xchg
jp
in
xchg
adc
xchg
push
push
mov
pop
jmp
xchg
sub
scas
iret
adc
lock
ja
xor
mov
dec
sbb
push
xor
fdivr
test
sbb
adc
or
jl
mov
xchg
xor
inc
movs
sbb
xchg
adc
test
scas
sbb
aam
xor
test
loopne
gs
jbe
sub
push
ja
adc
arpl
dec
loopne
adc
jb
sar
mov
push
cmovl
mov
popf
data16
xor
aaa
add
sub
xor
ins
adc
inc
test
dec
or
ret
jmp
int3
and
push
fninit
xchg
les
add
cwde
fistp
mov
jle
sbb
sub
inc
jp
inc
js
adc
xchg
adc
xchg
clc
cld
aas
fisubr
cmp
add
mov
and
jmp
jl
push
sbb
mov
push
dec
xor
adc
sub
mov
je
adc
sbb
xchg
sub
xor
push
mov
mov
pop
jge
and
lahf
mov
xchg
or
and
fdivr
or
or
aam
jmp
or
(bad)
push
sub
pushf
adc
mov
gs
dec
(bad)
out
test
pop
adc
fcom
pusha
mov
add
jb
fs
mov
push
aad
xor
pop
iret
mov
push
pop
scas
cmps
adc
gs
pop
popf
das
ds
sbb
cwde
xchg
pop
cld
xchg
hlt
sbb
dec
test
and
sbb
aaa
loope
aas
add
push
fist
shr
arpl
adc
push
xchg
test
in
xchg
gs
je
lods
nop
mov
xchg
inc
inc
int3
jae
pushf
cmps
add
dec
or
out
sub
ja
loop
test
and
aas
or
adc
jle
(bad)
mov
ffree
cld
je
add
aam
push
imul
sbb
xchg
(bad)
call
xchg
adc
in
mov
mov
enter
and
lock
mov
add
xchg
inc
sub
xchg
cld
inc
pop
rcr
dec
adc
movs
ret
(bad)
pop
pop
out
mov
xchg
fwait
mov
leave
nop
adc
add
cli
or
fs
hlt
rcr
fmul
retf
inc
mov
sbb
dec
jg
ds
cmp
outs
mov
fldpi
mov
mov
push
ficomp
or
sbb
in
add
sbb
int3
xor
fchs
jmp
mov
movs
push
ds
inc
dec
mul
pop
dec
add
icebp
push
mov
adc
lock
push
sub
dec
adc
inc
and
jb
rcl
xor
cmp
push
fsubr
and
jb
std
push
mov
dec
adc
hlt
pop
adc
adc
ss
mov
imul
and
int
mov
and
test
and
call
sahf
mov
mov
mov
in
jnp
push
jmp
in
daa
sar
or
scas
jne
shl
stos
xor
xor
mov
sbb
cmp
and
(bad)
in
mov
je
shl
pop
addr16
lods
aad
test
push
(bad)
xchg
daa
lods
sub
xchg
sar
daa
iret
addr16
sub
cdq
out
repnz
xchg
xor
adc
dec
sub
sub
cmp
lods
jo
sbb
outs
xlat
adc
arpl
jbe
fidiv
add
sbb
mul
or
jae
and
stos
lea
fidiv
cmc
aam
sub
movs
push
lea
les
or
in
mov
adc
loop
(bad)
in
dec
ins
adc
ret
xor
mov
xor
sbb
imul
dec
cmp
push
icebp
adc
jp
mov
mov
mov
out
mov
cmp
int
mov
adc
leave
adc
aaa
in
push
in
jg
retf
push
das
inc
lock
imul
adc
or
out
das
sbb
push
lds
mov
jb
xchg
add
aam
retf
jnp
adc
push
mov
fs
(bad)
in
fstp
cmp
or
inc
in
inc
arpl
inc
int
mov
sub
dec
mov
stos
out
push
mov
fcomp
xor
xchg
xor
lods
adc
push
cli
icebp
jecxz
cmps
mov
mov
data16
jb
mov
sar
mov
arpl
push
adc
mov
popf
xchg
mov
mov
dec
lock
pop
and
push
call
push
push
inc
add
gs
out
adc
add
pop
jo
mov
xor
dec
cli
xor
cld
sbb
adc
pop
xor
fiadd
fstp
rcl
inc
inc
hlt
cmps
add
rcl
jecxz
lahf
or
in
mov
add
and
mov
dec
popf
sub
fsub
je
mul
pop
test
jmp
retf
inc
fsub
test
adc
xchg
xchg
sar
in
repz
aad
jno
xchg
addr16
test
sbb
and
(bad)
scas
lods
pop
adc
les
or
or
push
int3
loope
adc
mov
enter
retf
std
ficom
push
inc
pop
icebp
cmc
mov
pushf
or
push
retf
cmp
mov
sbb
mov
das
hlt
mov
test
sbb
sbb
add
push
pop
aam
stos
in
inc
mov
movs
cmp
(bad)
(bad)
(bad)
mov
mov
sub
push
dec
neg
shl
pop
hlt
fwait
or
es
xor
pop
dec
cmp
jle
jmp
adc
xchg
and
cmp
inc
push
ret
jmp
je
lods
addr16
push
mov
push
lods
int
in
in
push
or
add
into
push
push
jl
into
sbb
jne
repz
test
jns
shl
daa
mov
leave
push
rcpps
pop
or
adc
and
xchg
and
ret
leave
jb
add
clc
adc
and
cmc
sbb
dec
xchg
gs
mov
adc
repnz
push
lock
push
movs
xor
cmps
cmp
xchg
imul
std
je
and
add
test
jmp
cmp
cmp
or
or
jmp
fsubr
cmps
add
test
or
or
jne
sbb
into
xor
adc
push
in
je
jle
mov
scas
mov
loop
mov
push
push
push
adc
loop
test
into
mov
xor
sub
inc
sub
addr16
pop
adc
cmps
adc
cmp
ss
lods
outs
jp
stos
xchg
adc
les
dec
pop
(bad)
in
rcl
mov
xchg
lahf
xchg
add
push
jg
mov
sbb
xchg
push
pop
pushf
out
pusha
sbb
jge
xor
dec
push
outs
lds
xchg
adc
mov
xchg
mov
jmp
test
sbb
dec
aaa
rcl
mov
inc
retf
inc
clc
xor
push
movs
neg
sub
std
sbb
inc
dec
shr
or
cmp
inc
mov
in
sbb
hlt
mov
jbe
adc
mov
ja
int3
jns
adc
leave
adc
push
arpl
and
and
or
xor
and
add
in
inc
adc
mov
shl
int
xchg
rol
xor
lock
adc
test
clc
mov
xor
add
xor
xor
outs
neg
stos
xchg
xchg
pusha
mov
xchg
xchg
imul
cld
dec
jns
adc
loopne
lea
and
in
lods
pusha
div
add
pop
xor
gs
adc
and
dec
adc
and
mov
lock
movs
cmc
in
clc
pop
retf
enter
jb
mov
add
xor
push
xor
xchg
jmp
xchg
cli
or
aam
daa
adc
cwde
adc
xor
out
cmp
mov
addr16
popa
push
aam
adc
pop
lods
sbb
(bad)
pop
push
adc
adc
push
xor
sbb
push
and
push
aam
mov
or
aam
jl
sub
cmc
ss
mov
or
or
icebp
in
inc
lds
pop
sub
sahf
xchg
jmp
cmp
sbb
lahf
push
sub
adc
mov
int3
add
movs
jb
dec
jl
fcomp
pop
mov
xor
mov
fcmovnu
adc
sub
mov
leave
out
mov
ffree
fdiv
movs
push
sub
lahf
xchg
jle
call
adc
mov
movs
test
div
jp
inc
and
pusha
sahf
cdq
pop
cwde
push
xor
stos
imul
unpcklps
adc
loope
into
shl
ins
adc
mov
jl
aam
mov
cmps
popf
xchg
mov
push
not
lods
cmps
loope
hlt
int3
cwde
inc
inc
inc
adc
hlt
rcr
mov
add
jae
pop
das
sbb
ins
dec
xor
and
shl
mov
inc
call
cmp
or
sbb
mov
pop
nop
iret
sbb
mov
adc
icebp
lods
inc
and
test
mov
ja
cli
movs
retf
int3
xchg
sahf
jmp
and
enter
add
repnz
pushf
ret
push
mov
movs
fsub
adc
xor
sar
add
pop
out
inc
jo
mov
push
mov
push
pop
sar
and
mov
mov
xchg
xchg
mov
ins
jmp
retf
inc
adc
and
mov
dec
and
in
(bad)
stos
in
lds
ds
and
pop
sbb
loop
sub
sbb
or
adc
(bad)
loope
lods
(bad)
adc
pop
in
sub
ins
inc
test
shl
xor
js
shl
imul
movs
adc
pop
sub
mov
jge
pop
or
retf
fist
jl
cmp
in
fsubr
sar
rcr
push
xor
jmp
or
sahf
in
wbinvd
adc
push
adc
jnp
test
adc
stc
sub
push
xchg
fwait
jmp
lea
adc
lahf
outs
inc
pop
scas
pusha
fisubr
adc
push
push
lods
xchg
jl
add
or
stos
adc
xchg
mov
cs
or
pop
(bad)
adc
add
add
xor
xchg
cli
dec
xor
push
and
cld
ficom
mov
add
xchg
jmp
mov
push
neg
sbb
sbb
or
mov
mov
int3
xor
les
mov
xor
xor
gs
lods
aad
push
fsubr
adc
inc
test
dec
in
jge
pop
sub
clc
lds
je
mov
cs
aad
(bad)
hlt
mov
xchg
in
push
(bad)
(bad)
int3
inc
pop
lock
pop
push
dec
nop
mov
ins
xchg
lea
fwait
out
rcr
sbb
enter
mov
lods
adc
sbb
retf
arpl
out
lahf
mov
adc
xor
(bad)
jecxz
or
fldcw
mov
cmp
or
test
sbb
mov
aas
lahf
xor
push
adc
loopne
add
mov
inc
xor
dec
cmp
adc
fsubp
adc
cmps
sbb
fcom
add
imul
jp
adc
mov
or
mov
xor
pop
ror
jno
sub
int
cli
lea
adc
mov
jle
ds
push
fist
jns
add
movs
adc
outs
mov
mov
adc
push
out
lds
push
xor
push
inc
adc
xor
xlat
int
jecxz
cdq
ja
cwde
sbb
sub
int3
dec
addr16
and
push
push
cdq
lea
or
dec
ins
xchg
sub
outs
out
adc
and
sub
jecxz
lock
mov
inc
int
nop
push
ja
xchg
push
out
data16
or
mov
inc
fadd
inc
out
movs
popf
adc
scas
xchg
int
adc
sbb
jl
stos
dec
pushf
adc
movs
clc
mov
adc
cs
imul
xor
lock
xor
sahf
int
stos
adc
add
push
retf
or
rol
sbb
jo
inc
fisttp
add
pushf
mov
adc
or
xor
pop
int
test
not
mov
daa
fmul
mov
mov
cld
push
movs
fnstsw
cmp
lods
pop
inc
imul
jns
sbb
jp
sub
(bad)
in
xor
or
adc
repnz
xchg
aaa
in
aam
(bad)
push
aaa
cdq
pop
inc
ficom
jp
imul
mov
aas
jb
push
xchg
retf
dec
add
adc
jbe
dec
fs
adc
dec
cwde
cld
push
lock
cli
lahf
cmp
sub
adc
ds
dec
les
scas
hlt
pop
data16
(bad)
mov
mov
adc
pop
pop
ret
movs
inc
adc
or
pop
mov
test
dec
cmc
mov
adc
popa
mov
lods
adc
idiv
enter
shr
ds
loop
push
les
jne
jae
sbb
out
mov
icebp
mov
inc
cwde
adc
mov
popa
int3
sbb
adc
arpl
adc
xor
jl
pop
scas
stos
mov
jmp
and
mov
aas
out
cmps
mov
fst
div
popa
out
sar
adc
aaa
add
aad
adc
in
and
loope
loopne
sub
inc
add
adc
and
xor
xchg
addr16
mov
dec
or
jmp
add
dec
sti
fidivr
out
xor
jo
gs
sbb
(bad)
clc
in
retf
mov
cmps
imul
cmp
mov
xor
adc
fcmovbe
inc
mov
test
pop
adc
inc
int3
dec
into
repnz
or
add
call
xor
adc
pop
bound
mov
mov
mov
xchg
je
or
lahf
das
mov
add
mov
arpl
xor
mov
push
arpl
lea
or
fist
cli
stc
xor
pop
cmp
hlt
pop
adc
adc
mov
fnop
in
out
sbb
pop
add
push
mov
(bad)
cli
arpl
add
adc
xor
add
jecxz
or
cmps
(bad)
(bad)
lock
xchg
fisttp
xor
stos
shl
mov
cld
inc
adc
or
aas
stos
inc
out
inc
adc
jg
int3
(bad)
cmp
(bad)
popf
push
adc
pop
sbb
(bad)
jmp
push
fwait
lds
jb
sub
add
into
sti
loope
or
or
push
pop
inc
push
leave
dec
sub
cs
xor
sub
xor
inc
xchg
jmp
xchg
in
les
push
icebp
pop
loope
or
je
mov
dec
(bad)
adc
test
cmp
xchg
push
adc
sbb
das
xchg
pop
hlt
dec
std
int3
pop
mov
jne
out
in
test
jnp
(bad)
adc
cmp
loop
jmp
adc
sub
nop
mov
lahf
(bad)
(bad)
xor
retf
ds
pusha
mov
dec
sbb
fcom
gs
adc
cwde
sahf
leavew
in
jne
adc
adc
jmp
jmp
adc
fcmovb
xchg
nop
ret
dec
inc
xchg
adc
ja
nop
mov
adc
hlt
out
cmps
in
das
js
push
fnsave
jbe
test
xchg
loope
out
outs
push
cmp
rcl
cmc
imul
pop
dec
jo
aam
and
fstp
pop
ret
dec
jg
push
not
xchg
and
cmp
mov
inc
aaa
or
imul
mov
ret
out
in
push
mov
cmp
ins
push
inc
test
xchg
popa
xchg
or
aam
push
adc
pop
push
out
cld
inc
int
xor
test
inc
mov
ins
lods
inc
les
in
out
mov
dec
imul
fdivr
adc
or
in
push
in
std
xchg
sbb
call
push
popa
adc
cmp
icebp
test
push
inc
hlt
aam
into
rcr
aas
adc
xor
lods
fisttp
xchg
(bad)
lock
adc
jecxz
stos
add
enter
sub
cmp
adc
pop
retf
mov
adc
sbb
stos
lds
or
ds
inc
adc
dec
mov
lods
cdq
stos
inc
in
les
inc
jle
cmc
adc
xchg
lahf
add
and
jge
ficomp
inc
or
and
loop
out
mov
pop
test
and
test
fisttp
inc
sbb
fistp
push
sub
adc
retf
js
inc
dec
xchg
nop
stos
pop
xor
jmp
push
xchg
sub
adc
push
sbb
xchg
leave
xchg
pop
cmp
jno
mov
idiv
aad
xchg
jae
xor
aas
jle
cmp
adc
scas
cli
push
xchg
into
repnz
push
cmps
xor
loopne
(bad)
mov
pop
sbb
neg
out
icebp
rol
dec
mov
outs
adc
and
out
imul
mov
cli
loope
je
or
add
or
xor
adc
sahf
fdiv
in
sbb
loopne
mov
lods
pop
or
jo
push
jle
inc
not
je
sub
sbb
or
sti
sub
push
inc
add
push
or
mov
call
fs
loop
inc
cmp
sub
ss
xchg
xchg
and
jge
jg
(bad)
push
sbb
into
sbb
fs
je
xchg
aaa
rol
cwde
sbb
rcl
je
xchg
push
(bad)
imul
mov
jmp
in
js
clc
dec
fwait
push
retf
mov
jmp
and
jmp
fadd
mov
ficom
lods
push
adc
and
add
fiadd
xchg
sahf
rcl
fidiv
mov
mov
je
adc
and
cld
inc
(bad)
cmps
sbb
out
pop
fsub
sub
in
mov
mov
fwait
jl
cmp
shl
mov
mov
jg
mov
enter
jno
push
push
(bad)
js
jno
std
popf
leave
add
movs
in
adc
sbb
jnp
adc
adc
add
jb
mov
mov
jecxz
ret
ins
adc
out
enter
sbb
(bad)
ds
inc
aas
push
pop
xchg
pop
test
sbb
sub
cli
or
jmp
xor
test
inc
add
fcmovnb
sub
sbb
cli
sti
sahf
(bad)
ss
sub
adc
int3
nop
dec
inc
test
js
(bad)
or
add
lea
scas
jbe
add
xchg
inc
ins
aaa
inc
rcr
jmp
mov
aam
icebp
sub
dec
mov
in
mov
mov
in
xor
cmps
popf
xchg
sub
xor
out
js
dec
gs
mov
xchg
test
jecxz
aaa
sar
mul
out
xchg
std
adc
les
gs
test
or
inc
lea
xchg
and
sbb
sub
add
stc
test
sbb
adc
je
push
sub
cmps
push
xor
jmp
xchg
adc
and
adc
mov
xchg
shr
jge
pop
fwait
ss
push
lahf
jmp
dec
loope
add
hlt
fmul
xchg
xor
(bad)
(bad)
adc
cli
lea
xor
adc
dec
outs
imul
in
stos
mov
push
enter
ja
les
jo
xchg
mov
sbb
retf
pop
add
jns
fcom
sbb
jnp
fild
push
mov
mov
mov
add
jl
xor
aas
stos
mov
lods
mov
sahf
rcr
jp
ds
add
imul
and
mov
xor
repz
inc
xchg
loope
or
mov
movs
fcom
sbb
adc
js
aaa
dec
enter
mov
xor
call
(bad)
fdiv
bound
fbld
cmp
rcl
je
or
pop
or
adc
xchg
cmps
xchg
call
xchg
pop
lahf
sbb
enter
mov
mov
mov
in
scas
adc
adc
ja
rcr
mov
retf
jmp
imul
clc
int3
iret
cdq
sbb
and
jmp
jae
test
dec
and
in
push
adc
clc
sbb
fcmovu
adc
jp
cmp
pop
push
cdq
loope
sub
loopne
rol
add
and
dec
sbb
out
mov
adc
loope
mov
movs
xchg
or
push
jo
xchg
lods
add
fist
sbb
jmp
adc
add
pushf
jl
xor
sbb
pop
out
ins
mov
sub
jo
pushf
sbb
adc
add
ret
xchg
adc
std
aad
jp
(bad)
push
adc
mov
ins
push
sbb
in
pop
ds
shl
scas
cmp
cli
loopne
(bad)
adc
(bad)
xor
fldcw
rol
lock
jle
lahf
mov
dec
xor
pop
adc
dec
fpatan
mov
cdq
jp
ja
pop
test
mov
call
das
xor
stc
imul
ja
xchg
inc
jl
rcr
sbb
outs
jge
mov
cmc
sbb
ds
mov
and
adc
cmps
dec
and
lds
xor
test
push
adc
adc
jl
scas
xor
ins
je
adc
push
dec
push
jge
jmp
and
inc
jne
(bad)
fs
pop
pushf
adc
sub
cdq
push
test
cmp
or
adc
jbe
ins
dec
adc
sub
fisttp
loope
adc
mov
sti
pop
hlt
sbb
sbb
call
adc
adc
iret
scas
cmp
inc
mov
aam
dec
or
adc
dec
outs
sbb
mov
xchg
ror
sbb
cmps
inc
iret
xchg
outs
(bad)
stc
sbb
int3
hlt
xor
or
mov
jmp
jnp
adc
addr16
jp
imul
cmps
mov
(bad)
shr
(bad)
(bad)
sbb
dec
leave
lods
(bad)
es
ret
pop
xor
inc
jne
addr16
xor
fcmovnu
std
push
mov
bound
push
add
jl
movs
fadd
popf
jo
xor
js
mov
inc
or
cmp
sbb
lods
xchg
sbb
ror
add
frndint
xchg
sub
mov
sub
and
sbb
fldenv
pop
push
adc
jb
jmp
adc
push
popf
jmp
push
ret
add
adc
jae
clc
fnstsw
sbb
fldcw
pop
mov
mov
mov
mov
cmp
add
adc
int
hlt
int
nop
add
aam
lods
add
mov
sbb
stc
fcom
sub
pop
ja
movs
lods
andps
cld
adc
add
mov
push
clc
mov
int
push
mov
and
xchg
gs
in
pop
inc
sub
int
iret
mov
pop
or
cmp
into
xor
stos
les
test
test
ds
adc
das
xorps
dec
dec
shr
xor
xchg
or
mov
sbb
xor
push
or
add
es
jle
adc
jmp
leave
mov
sti
jne
(bad)
aam
mov
lea
and
div
shr
fisttp
mov
push
movs
mov
dec
jecxz
add
sbb
stos
sub
inc
into
pusha
inc
sbb
adc
sbb
rcl
adc
pextrw
mov
jmp
inc
pop
aad
(bad)
hlt
cli
adc
cmps
xchg
test
aad
pop
std
and
movs
adc
pop
dec
mov
sbb
inc
push
icebp
mov
pop
cmc
adc
ins
je
movs
add
imul
pop
hlt
push
mov
mov
inc
aas
add
lds
inc
adc
scas
mov
push
pop
cmps
and
push
repz
add
aas
in
xchg
scas
stc
inc
push
sbb
lahf
in
arpl
lock
pop
mov
jb
loop
pop
inc
std
mov
adc
icebp
out
scas
repz
inc
push
adc
pop
aas
into
cmp
ss
test
rol
jmp
not
out
iret
sahf
mov
xchg
out
and
fst
or
pop
adc
mov
adc
out
pop
popa
cmp
and
idiv
adc
adc
into
aam
jns
sar
sar
xchg
inc
popf
or
adc
add
mov
(bad)
call
dec
aam
test
(bad)
hlt
rcr
adc
das
sahf
aam
ins
adc
inc
test
jecxz
mov
cmp
std
mov
add
fwait
and
int
adc
cmp
dec
adc
outs
mov
pop
out
jnp
cmp
push
aas
mov
push
mov
test
out
xor
mov
xchg
adc
aam
mov
and
adc
push
push
fwait
mov
loop
push
test
loopne
retf
les
jp
adc
hlt
xlat
cld
mov
xchg
cmp
aas
xchg
dec
clc
dec
repz
or
xchg
cs
sbb
jl
and
xchg
cmp
dec
sti
adc
bound
mov
mov
shr
sbb
jge
xchg
pop
movs
adc
dec
xchg
ret
dec
xchg
dec
cmp
loope
jbe
mov
leave
pushf
mov
ja
inc
sub
or
pop
out
xchg
fdiv
fdivr
sbb
scas
adc
ror
adc
adc
jmp
enter
test
push
aad
xchg
pop
inc
or
cld
mov
outs
fs
and
dec
push
add
inc
jl
adc
movs
add
stos
sbb
fisttp
loop
cld
pop
shr
mov
cmps
into
jg
aam
call
or
pushf
les
pop
aam
cmp
loope
cmp
sbb
ja
inc
loop
xor
adc
aaa
jns
fadd
movs
je
xchg
mov
in
and
adc
clc
jmp
in
aad
mov
xchg
jp
jmp
and
repnz
adc
xchg
daa
es
cwde
push
add
jge
fist
stos
sbb
stos
dec
add
retf
mov
adc
dec
sbb
jmp
lock
mov
popf
push
imul
adc
pushf
aad
push
xor
cmp
jl
fidiv
sbb
cmp
jg
scas
mov
adc
dec
push
pop
add
scas
in
loope
cmps
inc
lahf
sub
bound
mov
pop
retf
adc
jecxz
dec
jo
data16
cmp
sub
js
jno
pop
sbb
xchg
push
(bad)
jecxz
or
cmc
repz
fwait
adc
stc
adc
mov
imul
mov
adc
out
shl
arpl
out
ficomp
ret
dec
push
mov
pushf
ins
adc
sub
cmp
or
(bad)
fst
jo
xchg
cli
sbb
jmp
push
ins
push
sbb
stc
fnstsw
inc
or
mov
fist
gs
pop
push
sub
jb
or
lock
adc
jmp
(bad)
sub
or
movs
and
in
adc
inc
in
das
add
jo
cmps
cli
jl
jmp
sub
stos
je
ins
adc
inc
adc
jp
adc
int3
mov
ins
inc
sbb
popf
test
es
int
mov
adc
js
pop
cs
push
push
cmp
jno
mov
int3
in
xor
rcr
adc
and
je
lock
in
and
sbb
pop
inc
js
xchg
push
leave
dec
sub
popa
retf
dec
mov
out
repnz
scas
(bad)
sahf
xchg
inc
jo
mov
movs
out
push
popa
dec
adc
pop
fsubr
xchg
in
pop
push
div
js
ins
es
jnp
dec
loop
pop
mov
cld
mov
sbb
in
ret
fisubr
adc
dec
(bad)
sahf
adc
std
adc
cmc
(bad)
adc
gs
mov
push
into
lock
mov
leave
jecxz
inc
sbb
fsub
jae
mov
test
inc
add
or
inc
push
cmc
cwde
pop
popa
cdq
jne
sbb
xchg
push
aaa
sbb
xchg
xor
je
lds
dec
and
push
adc
int3
and
mov
call
pushf
pop
mov
adc
xchg
aam
je
jle
push
popa
(bad)
daa
cs
dec
xchg
test
and
cld
jg
push
sub
sbb
lock
scas
je
mov
fisub
inc
xchg
and
pop
pushf
fcom
xchg
pop
in
dec
xor
mov
mov
push
pop
stc
rcl
scas
adc
and
cli
das
adc
dec
inc
xchg
xchg
xchg
mov
fcmovnbe
outs
adc
scas
mov
push
xlat
das
(bad)
je
outs
push
mov
xor
dec
std
lock
mov
xor
gs
xor
mov
mov
rcr
push
adc
fcmovnbe
xor
(bad)
sahf
adc
jle
in
and
xchg
pop
xor
mov
dec
inc
mov
lahf
push
mov
in
scas
xchg
adc
popa
call
(bad)
(bad)
lock
mov
js
jne
push
jo
hlt
and
pop
cmp
adc
out
mov
xchg
mov
sbb
jbe
xchg
into
xor
dec
adc
jle
fsub
push
imul
pop
or
sbb
adc
xor
cmp
adc
mov
mov
out
push
adc
jge
retf
gs
pusha
stos
sbb
inc
ret
push
cld
adc
push
sub
test
clc
pop
push
outs
mov
mov
adc
mov
xor
cwde
cs
jae
pop
or
push
je
loop
jle
push
add
xchg
call
adc
repnz
add
xor
and
icebp
push
ja
imul
out
xor
xchg
out
gs
adc
stos
pop
mov
(bad)
dec
cmp
xor
xchg
cmp
repz
xor
sub
addr16
mov
pop
sbb
je
inc
bound
sti
cdq
ret
ins
aaa
add
rcr
stc
pop
hlt
sub
xor
jns
rcl
les
out
fisttp
(bad)
test
gs
in
aad
adc
mov
pop
ins
cli
arpl
aaa
jecxz
xchg
ds
aam
xor
adc
test
xor
adc
fidivr
in
cld
test
xchg
in
push
add
loope
retf
adc
in
cmps
or
inc
mov
fs
xchg
int3
cmp
mov
xchg
ins
aaa
jmp
dec
inc
retf
adc
(bad)
jle
and
mov
rol
arpl
test
dec
adc
pop
(bad)
mov
out
mov
add
xchg
sub
mov
xor
cmp
sbb
scas
sahf
push
inc
(bad)
adc
repz
call
inc
aam
int3
or
hlt
dec
add
mov
outs
sbb
pop
pop
xchg
push
rcr
clc
imul
xchg
retf
das
fadd
rep
mov
(bad)
sahf
add
out
dec
mov
sub
fld
fcomip
repnz
sbb
cmp
mov
mov
add
fstp
pop
dec
inc
aaa
enter
call
jae
or
popf
inc
or
push
mov
mov
test
dec
outs
cmp
and
mov
pop
xor
push
sbb
retf
and
shl
in
cmps
jmp
mov
jns
into
xor
inc
cli
jne
push
push
mov
fistp
jge
loopne
cmps
adc
mov
dec
movs
adc
retf
test
ds
or
int3
mov
popa
inc
or
sub
pusha
cmp
adc
inc
cmp
enter
xchg
adc
jmp
gs
xchg
(bad)
repz
dec
call
cdq
sub
in
jge
cmp
test
fcom
ret
or
and
adc
fisub
fldenv
pusha
xchg
xchg
ficom
mov
shl
cmp
(bad)
and
xor
adc
inc
call
ja
cmp
out
aam
xchg
loop
mov
adc
and
ret
sbb
xor
aas
sub
mov
movs
sahf
inc
or
push
jmp
mov
push
or
ret
std
movs
(bad)
adc
jbe
mov
daa
adc
fisub
push
dec
push
add
into
sbb
pushf
imul
fmul
pusha
adc
or
fisubr
pop
and
mov
dec
mov
loope
adc
enter
call
and
mov
dec
icebp
xor
int3
ja
rcl
or
or
loop
jl
cmp
inc
sbb
xor
xor
xchg
adc
xchg
sbb
inc
out
xchg
xor
adc
mov
and
lea
ja
test
scas
in
pop
rol
mov
sub
xor
int
sub
loope
adc
and
das
xor
sbb
mov
jns
add
adc
xchg
push
sub
pop
inc
jp
scas
in
jl
dec
xchg
rol
mov
aaa
add
lods
xchg
push
mov
xchg
scas
ss
mov
mov
dec
jb
adc
in
xchg
fwait
pop
push
push
mov
mov
jg
pusha
jmp
adc
pop
jns
dec
test
ds
fwait
xor
xor
mov
mov
jmp
popa
addr16
retf
mov
pop
gs
retf
pushf
inc
call
inc
aas
sbb
mov
adc
push
fcom
ficom
mov
out
test
or
(bad)
mov
retf
and
scas
push
lock
je
rcl
cld
or
adc
cmp
xlat
sbb
dec
push
ds
repz
push
push
add
call
scas
in
mov
sub
dec
fidivr
and
mov
jne
and
lock
cmp
mov
in
mov
cs
add
dec
xchg
stos
je
dec
imul
and
sub
sbb
ins
cmc
add
gs
cmp
loopne
(bad)
in
out
mov
pop
int3
psubsb
dec
movs
dec
dec
cmp
inc
or
sub
adc
(bad)
dec
adc
retf
cld
aad
push
mov
push
test
inc
loopne
cmps
adc
sti
retf
sbb
or
dec
mov
adc
xchg
(bad)
loope
pop
lock
data16
cwde
idiv
retf
mov
cmp
push
fwait
into
(bad)
jge
and
into
jg
arpl
jae
imul
je
aad
retf
or
adc
jo
jecxz
hlt
push
scas
dec
test
aaa
jl
jl
dec
sub
xor
mov
ror
fild
sub
push
xchg
or
xlat
sbb
retf
fnstenv
sahf
mov
int3
loop
test
ss
pusha
mov
movs
loope
add
mov
test
add
inc
mov
and
jbe
fidivr
fsub
cmps
inc
xchg
scas
jae
push
(bad)
push
repnz
dec
sbb
dec
sbb
out
imul
or
ds
mov
int
sbb
gs
pop
xor
or
xor
add
xchg
xchg
pop
xor
(bad)
ret
dec
adc
outs
ins
xchg
int3
xchg
int
push
adc
fisttp
(bad)
xchg
movs
cli
nop
inc
or
jbe
(bad)
push
xchg
mov
or
pop
sub
add
push
cld
mov
mov
xor
inc
fisttp
sub
xor
push
fmul
mov
neg
cli
cmc
push
mov
sbb
in
(bad)
adc
mov
xlat
out
and
enter
add
pushf
stos
inc
ins
in
jo
add
test
xchg
scas
xchg
fs
adc
push
loopne
je
retf
jl
mov
dec
imul
sbb
test
ret
stc
xchg
sti
add
xchg
push
and
mov
test
cmps
pop
data16
ds
std
pop
adc
dec
jo
push
mov
loop
lods
xchg
nop
or
sbb
pop
xchg
stos
ins
push
mov
jmp
mov
add
ret
cdq
mov
stos
or
cld
mov
inc
or
push
add
mov
inc
lahf
lds
div
mov
mov
cmps
adc
(bad)
movs
dec
xchg
inc
push
int3
push
ds
jne
fistp
retf
push
in
and
add
pushf
push
lds
add
div
xor
push
dec
mov
mov
shl
ss
repz
jo
push
(bad)
push
cmp
test
push
int3
in
xchg
push
retf
inc
call
jp
mov
xlat
ds
mov
or
in
loopne
push
xor
cmp
cmp
mov
les
xchg
leave
scas
lahf
mov
xchg
fbld
fcom
lds
retf
adc
xor
sbb
ins
mov
and
cmp
or
js
lea
inc
adc
mov
sbb
and
not
adc
mov
inc
inc
sbb
ds
push
jb
aam
out
add
inc
shl
xchg
adc
pop
jno
fs
imul
ror
push
inc
and
dec
inc
sbb
std
mov
test
call
sbb
push
lea
inc
jmp
aam
push
pop
mov
pop
shr
(bad)
pop
pop
ja
outs
or
adc
addr16
nop
dec
xchg
and
popf
and
pop
mov
and
lahf
outs
add
fnstenv
and
mov
cld
dec
rol
inc
jmp
scas
cmp
retf
or
xchg
cmp
mov
ja
add
jnp
cmp
sahf
nop
adc
test
or
stos
push
and
add
jae
cwde
les
loopne
sbb
xchg
scas
adc
adc
xchg
push
lea
cmp
pop
mov
jb
and
cld
or
xor
ds
daa
lock
pushf
sub
xchg
outs
or
or
sbb
fcom
mov
jecxz
cdq
fnstsw
aam
or
xchg
jae
push
and
fwait
pop
dec
and
sbb
dec
loope
or
push
test
sbb
adc
pop
arpl
pop
clc
cld
jnp
adc
shl
mov
lea
iret
mov
inc
adc
or
pop
mov
fst
xchg
loopne
in
out
xor
ret
cmp
jnp
adc
ror
or
ins
or
push
ja
loop
int3
bound
fcomp
cmps
repnz
and
nop
and
(bad)
hlt
mov
idiv
sti
or
xor
call
mov
dec
push
ret
test
mov
jp
les
dec
xor
(bad)
push
mov
mov
cmp
loope
adc
in
xor
lahf
adc
inc
out
in
setae
xor
(bad)
fisub
xchg
out
cli
mov
mov
inc
or
in
movs
pop
fimul
jo
clc
mov
push
jmp
rol
inc
and
xchg
adc
xor
xor
jne
shr
cdq
rol
int
out
jg
loope
push
or
das
adc
push
lea
ss
retf
cmc
in
push
adc
sub
inc
cwde
(bad)
pusha
shl
fdiv
push
imul
sti
lahf
push
iret
fld1
outs
mov
movs
loopne
and
in
adc
imul
cli
test
push
dec
sbb
jnp
and
xchg
xchg
mov
adc
or
mov
rol
xor
cmp
out
xlat
mov
ins
jo
push
adc
mov
mov
mul
lods
sbb
and
jge
das
push
out
cmp
adc
dec
aad
hlt
fsub
loope
fnstcw
or
and
inc
adc
mov
push
push
pop
leave
inc
outs
sbb
push
cli
dec
jae
les
call
inc
imul
icebp
mov
daa
adc
out
cmp
aas
adc
push
daa
popf
jo
inc
pop
bound
xchg
aam
cld
sub
push
xor
inc
jae
ds
or
xchg
popa
sbb
popa
inc
int3
iret
cmps
bound
or
ja
inc
mov
into
xor
inc
loopne
jp
ret
xchg
jae
jmp
xor
movs
xchg
cmc
sub
fwait
push
or
adc
movs
idiv
sar
add
add
mov
push
xor
in
xor
cmp
sub
sub
push
ins
fbld
xor
lock
jno
adc
ins
push
test
xlat
int3
xchg
lods
pop
mov
adc
dec
adc
sbb
enter
into
leave
dec
movs
xchg
lds
ins
jmp
retf
add
cmc
pop
push
imul
lock
jns
gs
xchg
daa
in
mov
cmps
xor
aad
adc
std
cwde
push
cmp
(bad)
ja
lods
dec
mov
ret
lods
mov
xchg
adc
jae
retf
ds
retf
fist
jo
lea
in
inc
sbb
lea
ds
mov
mov
or
aas
sub
jmp
xor
sbb
mov
sbb
hlt
std
cmp
in
ret
and
mov
into
stc
push
adc
xchg
dec
dec
lods
sub
push
sbb
rcr
call
pop
fldenv
jne
fcmovbe
or
mov
xor
inc
xor
imul
lock
adc
sbb
cdq
div
popf
iret
ficom
mov
mov
mov
retf
idiv
adc
push
mov
rcr
sbb
and
mov
sbb
xlat
loope
out
in
sub
clc
dec
rcl
adc
inc
jmp
xor
xchg
jl
cmc
add
rcr
push
loop
pop
imul
icebp
out
les
(bad)
lds
xlat
pop
popa
in
stc
sbb
pop
inc
hlt
call
adc
popf
pusha
sub
jno
sbb
cmp
fs
xchg
push
dec
jae
in
cmps
mov
xchg
mov
out
mov
and
sbb
mov
jne
cmp
push
cwde
jmp
adc
xchg
in
test
retf
mov
popf
lahf
xchg
enter
pop
mov
adc
loopne
xlat
jae
sub
scas
movs
aam
sahf
mov
or
xchg
push
inc
stos
pop
popf
in
cmp
(bad)
imul
add
mov
adc
rcr
movs
mov
mov
inc
xchg
imul
jns
adc
(bad)
arpl
jmp
stos
jno
jo
mov
test
jbe
les
repnz
xor
in
test
jle
(bad)
out
push
pusha
je
mov
js
out
pop
xlat
data16
adc
inc
push
lock
jmp
adc
cmps
cdq
sbb
addr16
retf
cmp
mov
mov
repz
outs
adc
fdivr
pop
shl
mov
jae
inc
std
fcomp
xchg
sti
pusha
and
xchg
hlt
out
cmp
dec
cmp
push
data16
mov
mov
lock
adc
inc
and
mov
xchg
adc
into
adc
cmp
xor
xchg
es
aam
adc
push
fistp
adc
push
int3
inc
pop
(bad)
mov
enter
cmp
daa
sbb
es
rcr
add
jmp
xchg
(bad)
and
mov
cmp
aam
ins
aad
lds
aas
fmul
adc
and
pop
je
cs
jmp
bound
cld
ins
test
or
dec
ins
adc
inc
adc
inc
jle
push
jne
mov
sub
adc
je
dec
push
daa
fiadd
pop
js
inc
dec
pop
xchg
addr16
pop
sbb
push
jl
je
and
pop
sbb
cdq
adc
nop
out
and
cdq
out
and
test
dec
inc
cmps
rcl
lods
inc
xor
add
add
es
jmp
dec
fldenv
stos
mov
push
xchg
push
out
cmc
jle
jne
aas
add
imul
jmp
retf
rcr
xchg
push
in
gs
adc
sub
mov
cmps
loopne
add
adc
pop
adc
out
mov
inc
sub
adc
push
je
push
in
xchg
push
mov
in
aam
xchg
and
outs
push
repz
mov
in
inc
and
imul
ins
mov
or
xor
int3
jne
rcl
dec
jg
pushf
loope
xor
popa
pop
jmp
pop
adc
push
xor
cwde
test
xchg
xchg
mov
or
sbb
sbb
pop
adc
in
cmp
retf
movs
cld
adc
pop
test
jle
dec
mov
imul
xor
cld
pop
push
pushf
int3
lods
shl
or
rcr
icebp
and
xchg
xchg
inc
rcl
jmp
and
push
aam
or
inc
xor
out
sbb
xchg
jg
ror
jp
sub
mov
adc
clc
pop
jne
out
(bad)
fld
stos
xchg
jnp
into
inc
fisub
sbb
int3
xchg
rol
jae
mov
xchg
int3
sbb
shr
stc
fcomp
jne
sbb
xchg
push
mov
in
sbb
adc
cmp
sub
lods
adc
lock
repz
xchg
loop
jle
outs
pop
jmp
movs
jns
adc
pop
xchg
xchg
aad
mov
cmp
cld
movs
sar
test
mov
xchg
sahf
in
dec
xchg
data16
add
adc
aad
not
es
dec
test
ficomp
int3
ret
cmc
inc
sub
xchg
xor
loopne
aad
inc
mov
pop
xchg
stc
adc
sub
xor
adc
fadd
adc
xor
popa
in
lods
adc
test
and
in
pop
sar
xlat
adc
cmp
adc
ins
adc
sub
out
or
sub
aaa
aas
nop
call
mov
fnstsw
fs
inc
inc
pushf
(bad)
out
pop
sbb
imul
adc
xor
push
clc
cmp
xor
stc
push
sub
out
popa
aas
enter
adc
(bad)
fld
push
cwde
neg
add
adc
int
push
ins
inc
stos
loop
mov
lds
inc
mov
adc
out
pop
push
ja
unpcklps
jge
adc
or
into
mov
data16
inc
movs
cmp
xchg
inc
mov
xchg
adc
jg
sbb
adc
adc
lds
mov
mov
test
mov
aaa
adc
inc
xor
addr16
xchg
sti
inc
and
mov
push
fisub
adc
(bad)
stc
loope
icebp
call
aas
test
sbb
repz
test
(bad)
push
int3
and
pop
adc
add
lock
push
(bad)
(bad)
imul
cld
push
and
xchg
call
sar
(bad)
outs
test
adc
add
lock
adc
mov
movs
xchg
in
nop
inc
mov
stc
les
sbb
pop
iret
sbb
arpl
aad
or
cmp
gs
or
setp
popf
cmp
jnp
sub
repnz
mov
je
pop
jmp
fistp
mov
push
pop
push
adc
(bad)
sbb
xchg
pop
add
adc
imul
retf
push
out
movs
xlat
sar
pop
and
mov
push
push
pushf
add
push
mov
mov
jge
sbb
add
push
aam
adc
retf
lods
movs
xor
adc
inc
jns
into
iret
ss
fs
outs
push
sub
or
call
adc
xchg
rcl
imul
int3
loope
mov
add
mov
mov
mov
push
mov
sub
sbb
aad
pop
adc
dec
adc
push
cmp
rcl
or
daa
mov
push
mov
jae
add
xlat
pusha
(bad)
in
repnz
lods
retf
sub
inc
sbb
stos
(bad)
cs
jnp
sti
nop
cmp
push
sahf
cmps
add
adc
lock
aas
pop
dec
fcmovnu
ds
lahf
aad
int3
mov
jmp
not
jg
ss
jp
add
stos
in
scas
out
movs
ret
rcl
pop
fs
(bad)
xor
cmc
mov
mov
mov
push
inc
es
inc
into
cld
cmp
dec
clc
retf
mov
add
inc
cld
cmps
xchg
push
or
xchg
dec
xchg
sbb
push
int3
mov
push
test
push
mov
nop
pop
pop
inc
je
dec
jle
mov
mov
mov
fiadd
ins
or
add
das
imul
pxor
xchg
dec
pop
enter
(bad)
scas
push
stos
sub
inc
dec
and
sbb
(bad)
sub
inc
mov
or
out
push
mov
add
jmp
rol
loop
add
dec
inc
push
call
inc
fs
aaa
ins
add
fcomp
mov
call
ret
mov
mov
adc
sbb
and
test
jb
mov
dec
and
adc
cmp
jae
pop
adc
add
call
outs
sti
das
push
cmp
test
jno
mov
cld
mov
rcl
lods
loopne
ds
sbb
pop
cmp
shr
jo
push
jb
xchg
jge
pop
mov
icebp
iret
add
mov
aaa
mov
ret
mov
jecxz
push
inc
sub
jo
push
cmp
ins
in
inc
pop
les
sub
pop
es
and
out
popf
nop
inc
adc
lds
adc
mov
xlat
adc
sub
xchg
lods
call
adc
pop
cmp
mov
sub
call
mov
stos
adc
xchg
push
hlt
jno
mov
push
mov
adc
imul
in
imul
xor
sahf
xor
inc
loopne
xlat
jno
cli
xor
fcomip
jns
test
call
push
xor
int3
or
in
aam
dec
mov
sub
inc
adc
je
cmp
adc
cdq
aaa
fcomp
cmp
js
leave
(bad)
push
and
adc
imul
mov
sbb
aam
jmp
and
call
mov
into
fisttp
scas
sub
cld
jg
mov
int3
jle
inc
sbb
inc
or
daa
xchg
pop
pop
dec
dec
das
out
pop
cmc
mov
and
jb
xchg
pop
push
out
sti
hlt
mov
inc
lds
adc
fisubr
adc
out
(bad)
pop
cdq
push
mov
addr16
enter
aaa
cwde
sahf
movs
pop
aam
and
retf
sub
inc
push
mov
stos
je
jo
jle
xor
lods
pushf
test
rcl
xchg
sti
cld
in
inc
or
js
jns
retf
(bad)
loop
(bad)
int3
xor
out
push
retf
adc
add
adc
lds
or
cmp
pop
adc
push
mov
je
mov
retf
push
mov
in
push
cmp
inc
in
push
out
call
mov
js
push
fcom
xlat
lods
loop
hlt
es
sbb
xchg
push
jae
xor
je
jge
leave
cmp
or
or
ins
retw
test
push
push
push
xor
jnp
fs
cmp
aad
xchg
inc
sub
sub
pop
inc
aas
jp
and
mov
pop
adc
push
sub
(bad)
enter
mov
push
pusha
mov
out
movs
mov
cmp
adc
sub
test
in
xor
or
add
fiadd
dec
push
pop
loopne
retf
(bad)
std
sbb
in
fstp
mov
ins
pop
sbb
jo
or
aaa
aas
ret
out
xchg
nop
mov
mov
add
dec
sub
jnp
adc
pop
test
sbb
fild
fdivr
test
int3
pop
test
in
adc
cli
xor
call
rcl
shr
adc
daa
sar
loop
and
push
pop
pop
cmp
iret
pop
xor
aas
leave
outs
data16
dec
inc
inc
in
sbb
pop
adc
lds
fcmovnb
dec
int
sbb
inc
and
adc
sbb
pop
sub
or
mov
mov
cmp
jae
or
and
adc
cmp
in
outs
jmp
aas
inc
jecxz
adc
je
out
(bad)
lods
mov
jno
xor
push
dec
in
dec
loope
sti
imul
jnp
test
(bad)
jns
sbb
outs
test
sbb
mov
fadd
(bad)
xchg
inc
mov
lods
ret
push
popa
jmp
add
xchg
in
mov
add
mov
pop
xor
push
mov
out
mov
ret
add
adc
(bad)
adc
jo
shl
pop
add
jbe
(bad)
adc
jns
call
inc
adc
lahf
sub
sub
pop
cmp
mov
scas
das
mov
in
jg
pop
in
lahf
xchg
adc
test
mov
sub
ja
sbb
loopne
mov
sbb
and
adc
sahf
fs
push
pop
push
cmp
mov
adc
xchg
adc
adc
mov
(bad)
in
std
je
or
addr16
push
leave
data16
ftst
xchg
xchg
mov
retf
arpl
scas
dec
and
sbb
or
into
adc
adc
ins
test
mov
mov
fsubr
out
adc
xchg
fs
jmp
and
or
push
sbb
aas
arpl
rol
xchg
adc
jg
or
out
shl
dec
rep
mov
sub
sub
cmps
xchg
popa
mov
popf
xor
xchg
lds
div
push
fidiv
inc
(bad)
loop
leave
mov
jae
loopne
cmp
lock
shl
fcomp
mov
pop
add
cdq
xchg
hlt
adc
pop
ds
lods
adc
ja
jmp
adc
cdq
ds
retf
js
push
lods
aas
or
inc
cdq
popa
aad
mov
adc
or
ss
adc
rcl
sbb
cmp
inc
inc
(bad)
jmp
adc
adc
dec
push
adc
int
std
cmp
adc
fld
ret
mov
pop
adc
ss
fwait
pop
scas
aaa
adc
sub
mov
arpl
sbb
jb
pop
adc
push
sbb
and
mov
jno
sbb
mov
(bad)
aad
or
dec
je
xchg
push
adc
out
shl
xor
pop
jb
jae
neg
int3
jecxz
rol
and
cmp
les
les
mov
sbb
cmc
out
aam
daa
shl
in
mov
mov
push
mov
cli
mov
imul
xchg
sbb
(bad)
in
inc
test
mov
pushf
mov
int
inc
retf
mov
mov
mov
cmps
jo
in
in
retf
das
xor
mov
mov
mov
jnp
int3
xchg
jbe
iret
jmp
mov
sub
sbb
sahf
data16
es
call
push
cld
idiv
xchg
cli
fs
(bad)
adc
hlt
jge
mov
mov
and
mov
in
aad
jge
xchg
sahf
xchg
xchg
mov
or
push
int3
pop
repz
adc
outs
fimul
add
adc
push
or
mov
les
in
pop
xor
mov
call
adc
cwde
fmul
adc
pop
add
push
adc
push
sub
add
arpl
dec
jns
inc
clc
stc
lock
mov
xchg
je
stos
mov
add
xchg
inc
mov
je
fxch
pop
stos
push
imul
(bad)
mov
dec
adc
ins
add
cmp
pusha
push
aaa
xchg
iret
push
popf
add
repz
es
push
adc
pushf
pop
adc
and
popa
enter
(bad)
scas
loope
sti
mov
sbb
add
inc
gs
in
inc
jp
jno
pop
jnp
sbb
add
call
xchg
imul
scas
jg
adc
stc
push
test
into
xchg
retf
iret
mov
jl
sahf
outs
xchg
dec
xchg
aas
pop
jno
stos
imul
mov
clc
test
jecxz
mov
dec
mov
cwde
and
jbe
(bad)
aam
adc
stc
xlat
loopne
xor
mov
adc
ja
mov
xor
cmp
push
adc
loope
repnz
dec
ret
and
dec
add
repz
pushf
mov
sbb
sub
adc
scas
inc
fmul
xor
lds
mov
or
loop
dec
fild
and
por
inc
xlat
call
sbb
fist
test
lea
adc
mov
xchg
cmp
iret
jbe
stos
js
add
inc
or
push
test
adc
(bad)
mov
adc
xchg
push
and
int3
jg
adc
mov
inc
ins
push
adc
dec
adc
pop
cmps
fs
in
xchg
xor
ret
sbb
push
mov
repz
sbb
xchg
or
pop
xchg
shl
jnp
push
push
push
xor
pop
icebp
jo
gs
push
ins
(bad)
xchg
sbb
popf
bound
xchg
aas
jne
push
inc
mov
aam
enter
adc
(bad)
jbe
in
inc
jo
inc
push
and
jecxz
dec
aam
cmp
cmp
neg
test
adc
inc
pop
xchg
cmps
xchg
mov
push
test
ss
jmp
ficom
jecxz
hlt
push
or
aam
adc
sahf
sbb
sub
pop
adc
retw
fsub
jno
push
rcr
add
icebp
out
sub
push
fsub
xchg
das
adc
jle
aaa
sbb
ret
pop
xor
push
and
mov
cmp
cld
and
(bad)
adc
in
lahf
or
jle
mov
xlat
pop
jns
cmp
les
ret
mov
fwait
xchg
push
xor
dec
and
loop
pusha
call
adc
ret
cmp
js
scas
pop
pushf
push
pop
mov
xchg
xchg
xor
sbb
movs
pop
ins
call
into
xor
adc
add
sar
in
sbb
bound
add
cmps
scas
js
xchg
aam
jmp
hlt
pop
mov
fist
xchg
in
mul
push
cmp
mov
or
fdivr
adc
imul
pop
mov
push
mov
aam
mov
xor
xchg
lods
cdq
pop
mov
adc
push
and
dec
adc
add
xor
test
push
popf
mov
call
jb
xchg
stos
out
js
ins
pusha
push
xchg
js
call
sbb
outs
jge
xor
fstp
and
xor
mov
(bad)
out
and
xchg
cmp
dec
cmps
sar
nop
dec
jmp
inc
aaa
aam
aam
jecxz
test
cmp
fucomip
xchg
dec
pop
in
leave
in
cld
mov
out
sbb
int3
retf
lahf
xchg
loope
sbb
shl
das
clc
ss
or
sub
xchg
mov
ret
cmc
test
ins
jle
scas
ss
mov
push
scas
daa
push
enter
mov
sbb
push
mov
sub
popf
imul
shr
ror
add
mov
adc
in
int3
add
fiadd
ds
je
cwde
inc
push
scas
xchg
popf
ds
lock
fsubr
pop
push
push
scas
ja
out
lock
push
and
bound
dec
enter
mov
push
mov
ror
fdiv
inc
mov
sub
mov
or
loopne
mov
fistp
xor
jp
sub
adc
arpl
enter
push
inc
sbb
push
sti
add
xchg
mov
sbb
setp
and
fsub
adc
and
out
retf
xchg
fnstsw
movs
cmp
xlat
dec
mov
in
adc
jns
mov
xlat
in
stos
test
adc
xchg
enter
xchg
lds
sub
pop
mov
clc
ficomp
jnp
loopne
mov
mov
or
ficomp
hlt
cli
ins
adc
stos
xor
xlat
mov
nop
lods
jmp
pcmpgtw
mov
dec
dec
pop
hlt
xchg
push
dec
pop
in
aam
lods
pop
je
xchg
dec
dec
xchg
xor
push
jmp
mov
mov
je
(bad)
in
fs
iret
mov
scas
push
and
aaa
add
mov
icebp
mov
in
pop
daa
aad
jmp
cmps
mov
ins
mov
and
push
jnp
fsubr
add
push
dec
fmul
daa
(bad)
sahf
sti
dec
xor
pop
popa
loopne
jecxz
xor
mov
loope
adc
push
pop
imul
adc
ror
sub
fwait
push
arpl
hlt
mov
jb
retf
enter
sbb
pop
cld
aas
out
mov
xchg
shl
xchg
mov
xor
scas
mov
push
mov
adc
je
ret
pop
xchg
mov
lock
es
xchg
xor
lds
aad
movq
dec
jb
adc
dec
test
frstor
mov
cs
mov
in
mov
sbb
push
cld
add
adc
retf
dec
xchg
rcr
pop
xor
push
mov
add
push
xor
adc
xlat
sbb
lock
jnp
jecxz
inc
sub
dec
push
hlt
out
jns
dec
add
stos
sub
outs
pop
add
xchg
sub
pop
fisub
loop
adc
mov
jo
test
push
jge
jmp
arpl
sbb
dec
adc
cmp
in
fyl2xp1
loopne
jecxz
ficomp
sbb
(bad)
xchg
pop
cmp
pop
xor
je
jno
movs
jp
shl
adc
mov
and
cmp
outs
pop
call
sbb
or
aad
lods
sbb
mov
call
mov
repnz
addr16
loopne
dec
jg
dec
sub
adc
mov
ret
call
jmp
xor
gs
jge
adc
inc
inc
fld
jno
stos
mov
xchg
or
push
mov
pop
lahf
call
es
push
xor
in
push
jbe
xchg
jecxz
imul
adc
xchg
cmp
sbb
jnp
push
call
arpl
cmp
ins
pop
imul
or
pop
aam
mov
loopne
inc
fcom
mov
repnz
or
xchg
xchg
jmp
data16
dec
adc
dec
jmp
test
je
cmps
sub
pop
add
cmp
jecxz
cmp
adc
ret
dec
ins
fisubr
out
adc
xor
sub
movs
test
hlt
movs
push
lds
adc
sbb
hlt
pusha
test
dec
aad
sahf
xchg
cdq
and
rol
jne
adc
sbb
pop
cwde
mov
fnstcw
xchg
scas
aam
int3
add
cmc
sbb
and
xchg
mov
aas
mov
push
mov
add
pop
stos
mov
popa
imul
add
(bad)
aam
jecxz
cmp
mov
jl
jg
inc
and
sbb
ror
cmovl
out
add
pop
add
sbb
retf
xchg
pop
mov
fst
push
jp
pop
jl
shl
cmp
cdq
and
fist
addr16
cmp
xchg
in
adc
dec
in
sbb
fidivr
ret
loope
das
retf
inc
add
test
add
sbb
pop
sbb
fs
dec
mov
fist
rcl
pop
sub
rcl
mov
cmp
hlt
rol
dec
mov
jle
adc
mov
and
les
pop
sub
push
or
stc
pusha
rol
mov
xor
adc
sahf
arpl
popa
jecxz
adc
pop
xchg
adc
cmp
pushf
ins
adc
push
mov
mov
cmps
mov
data16
and
paddd
int3
and
test
(bad)
jmp
add
aam
mov
dec
cmp
jmp
dec
pop
adc
in
adc
mov
xor
cmp
sbb
inc
pop
test
or
xchg
popa
jne
leave
inc
daa
push
adc
push
xor
xchg
push
adc
sti
fisttp
push
dec
xor
out
clc
adc
mov
xchg
int
or
mov
mov
fld
add
jnp
mov
fist
out
shl
or
sbb
xchg
std
data16
pop
adc
cli
fwait
ja
jg
inc
push
xchg
xor
dec
xor
mov
int3
and
sti
(bad)
rcr
jnp
mov
or
adc
pop
retf
mov
push
je
adc
ror
xor
mov
lods
shr
dec
aad
cs
or
bound
push
fcmovbe
sub
mov
paddq
pop
jne
push
nop
pop
lock
xchg
cmp
pop
inc
sub
inc
push
dec
lea
add
push
scas
in
pushf
add
push
jecxz
repnz
or
push
pop
push
fld
ficom
inc
and
adc
xchg
pop
(bad)
sbb
outs
js
adc
mov
push
ret
adc
in
xchg
and
repnz
adc
sbb
ds
adc
push
fcom
adc
dec
mov
xchg
in
popf
dec
push
lods
int3
addr16
adc
mov
or
add
fld
add
iret
ficom
jg
jae
fldenv
add
xchg
(bad)
sub
fcmovne
adc
les
pop
mov
jae
and
mov
(bad)
jns
mov
in
(bad)
cmp
rcl
dec
in
xor
out
adc
mov
dec
popa
out
popa
mov
test
or
push
adc
enter
mov
inc
mov
outs
ja
pushf
adc
jns
pop
add
jp
push
xchg
icebp
lea
int
outs
outs
test
sbb
ins
push
add
inc
in
fs
ss
aam
mov
cmp
cwde
idiv
xor
xchg
inc
dec
xor
aaa
mov
push
jle
xchg
fsub
test
shl
movs
inc
aam
mov
push
jg
shl
or
cmp
icebp
bound
inc
ds
sbb
adc
mov
(bad)
rcl
dec
ja
adc
pop
repz
or
push
adc
push
aas
and
cld
icebp
fwait
mov
aad
test
add
je
and
es
add
retf
movs
sbb
fiadd
jno
mov
std
adc
inc
add
mov
mov
or
sysexit
and
dec
sub
sub
mov
fmul
retf
repz
xchg
push
ret
test
inc
push
xchg
in
and
inc
add
adc
jne
sbb
lods
mov
loop
nop
jns
adc
pop
stc
lock
int
mov
xor
repz
clc
mov
sahf
es
mov
mov
adc
hlt
push
popa
add
cli
cld
jmp
mov
jns
pop
mov
pop
in
ins
and
sbb
inc
adc
push
outs
pusha
arpl
adc
jae
aad
mov
ror
dec
push
mov
inc
cmp
ret
loopne
lods
mov
xor
in
push
cwde
cmp
adc
mov
xchg
sbb
pop
popa
and
repnz
or
jmp
xchg
scas
xlat
xchg
bound
adc
lock
dec
xor
das
jns
inc
pusha
mov
in
fmul
fcmovbe
call
shr
jp
push
rcl
xor
adc
jb
inc
ja
pop
in
sbb
dec
out
mov
mov
scas
(bad)
jmp
imul
xchg
jnp
sub
data16
(bad)
adc
and
add
inc
std
ret
adc
adc
xor
pop
xor
rep
shr
fnstcw
mov
and
mov
test
inc
sbb
fsub
lea
adc
and
sahf
rcl
aaa
mov
mov
retf
jl
sbb
mov
test
pop
je
pusha
mov
xchg
inc
mov
lods
dec
or
jmp
sub
xchg
inc
adc
xchg
fbstp
or
adc
dec
add
mov
push
adc
add
mov
adc
pop
out
lock
out
push
addr16
aam
cld
and
cmps
pop
push
adc
xchg
retf
xor
bound
sub
ror
ss
sbb
stos
in
xchg
cli
cmp
cmp
and
mov
in
add
jge
adc
dec
in
enter
dec
adc
cs
fs
gs
sub
neg
inc
sahf
mov
pop
push
sbb
cdq
push
sub
test
aam
popf
cmp
fs
adc
in
int3
push
lahf
adc
data16
dec
dec
mov
ror
(bad)
rcr
push
push
imul
mov
jmp
pop
test
fwait
inc
lds
and
adc
cmp
adc
sub
sbb
jno
mov
icebp
mov
shl
adc
hlt
jb
outs
jo
fs
mov
(bad)
(bad)
in
push
adc
dec
xchg
pop
lds
scas
cmp
mov
mul
gs
fcos
adc
xchg
dec
int
pop
jo
sbb
sbb
das
mov
retf
push
inc
push
push
dec
clc
loopne
sbb
jge
cmp
pop
mov
(bad)
pop
adc
test
ja
add
and
mov
mov
jnp
add
and
stos
repz
data16
cli
in
and
sti
xchg
leave
or
int
out
jge
(bad)
mul
imul
or
jo
sub
scas
or
cmp
fnstsw
xchg
int
add
mov
adc
dec
ror
in
aas
hlt
sub
enter
mov
test
push
lahf
xchg
das
fxch
sti
fs
adc
sar
fnstsw
loop
cmp
in
push
jp
push
inc
and
adc
xchg
ja
(bad)
ss
jb
xor
pop
fwait
add
adc
jmp
push
cmp
pop
ret
jbe
lock
in
pop
or
mov
lods
hlt
adc
mov
adc
adc
pop
lock
loopne
clc
add
ss
mov
inc
or
or
fchs
sub
iret
mov
sbb
pop
mov
in
push
cmps
cmp
inc
push
pushf
push
pop
jmp
call
jp
rol
aas
adc
gs
sbb
jecxz
cmp
icebp
test
mov
imul
cli
icebp
adc
sbb
mov
out
lahf
push
test
sbb
push
xor
call
xchg
iret
push
outs
or
xchg
loope
sbb
bound
mov
fwait
cmc
pop
stc
stos
mov
lock
jge
adc
aas
push
repnz
les
inc
neg
sbb
retf
ins
jne
mov
lods
aad
mov
xor
adc
adc
jo
(bad)
jmp
aaa
stc
sub
mov
test
push
aad
sar
jae
sbb
add
dec
in
add
xchg
push
jp
(bad)
adc
push
push
(bad)
retf
mov
xchg
not
jmp
in
xchg
pop
jns
shr
adc
dec
iret
pop
loope
and
mov
pop
adc
jmp
adc
frstor
pop
mov
or
adc
mov
and
add
mov
shl
cdq
enter
pop
xor
test
(bad)
aam
aad
jmp
mov
push
xor
shr
xlat
daa
sbb
push
xchg
ror
gs
adc
mov
pop
pop
in
mov
aaa
out
aam
popa
scas
jb
retf
cs
call
cmps
push
pop
sbb
xor
sbb
push
jo
retf
mov
sub
movs
and
xchg
jmp
scas
out
stc
push
or
je
add
mov
and
mov
(bad)
fiadd
aam
pusha
call
lock
or
repz
rcl
fnstcw
pop
ins
sub
jmp
mov
jns
add
mov
jne
jecxz
les
sbb
neg
mov
adc
es
std
pop
jmp
adc
sub
aad
in
adc
test
xchg
das
dec
psadbw
cwde
adc
jmp
shl
jnp
sbb
shr
inc
mov
push
dec
dec
aad
adc
jecxz
mov
cmp
cmp
mov
sbb
sub
icebp
push
nop
pop
xor
push
push
mov
ret
cmp
adc
lea
arpl
or
inc
jnp
jne
mov
inc
mov
xchg
sbb
mov
aam
out
lods
cmps
jmp
dec
cmps
data16
add
lea
xchg
enter
popw
pop
sbb
xchg
clc
mov
retf
mov
ds
(bad)
lahf
in
addr16
add
lea
mov
mov
sub
int3
add
out
mov
cmc
mov
jg
lods
retf
cmp
or
nop
push
ins
jmp
xor
js
mov
cmp
push
rep
popf
adc
xor
and
xchg
adc
add
lea
or
push
popa
scas
adc
jecxz
stc
daa
mov
mov
jmp
inc
or
outs
adc
inc
icebp
dec
or
adc
cs
js
fwait
adc
adc
mov
jle
adc
dec
mov
pop
or
les
push
sahf
es
into
lock
pop
xor
adc
xchg
das
les
jecxz
add
call
cmp
cmp
loopne
arpl
adc
lods
les
add
aam
test
test
dec
mov
mov
int3
rcr
repnz
stos
cmp
stc
adc
dec
shl
mov
xchg
jne
(bad)
xchg
nop
adc
dec
mov
mov
lea
lods
(bad)
dec
fwait
adc
xor
jb
mov
push
and
jns
or
push
and
dec
mov
cmps
mov
xchg
sqrtps
enter
pop
aad
ret
xor
in
sbb
test
rcr
stos
or
retf
(bad)
retf
fild
les
and
and
imul
inc
or
retf
add
(bad)
adc
(bad)
pushf
je
mov
and
retf
and
imul
xchg
mov
cli
pop
in
int3
sbb
getsec
fmul
mov
outs
popf
sub
aam
shl
hlt
xor
dec
push
std
inc
movs
jle
leave
sbb
(bad)
rol
invd
push
xchg
retf
add
call
cmp
sbb
push
jl
push
loop
jno
mov
adc
xor
push
mov
mov
hlt
jmp
xchg
adc
popf
jbe
jge
arpl
push
xchg
scas
sub
xchg
in
add
adc
adc
(bad)
adc
div
es
jg
mov
cmps
addr16
fidivr
adc
dec
push
leave
push
call
loop
lds
adc
int3
and
adc
repz
xchg
or
shl
dec
in
or
mov
xor
inc
and
shl
test
adc
or
lea
lods
stos
add
push
mov
out
mov
mov
stc
jp
mov
inc
imul
in
adc
adc
je
mov
adc
lods
jg
jb
mov
in
mov
sbb
pop
fist
retf
lock
sbb
push
test
pop
mov
push
shl
sbb
fadd
jecxz
jg
fcom
and
adc
test
test
hlt
jns
adc
test
fsubr
adc
and
pop
push
or
fstp
inc
aam
xchg
psrlq
pusha
push
ret
mov
inc
sahf
cld
mov
call
ja
lods
call
xlat
lds
pop
adc
mov
add
test
sub
dec
test
inc
aas
or
aam
iret
das
xchg
jmp
fadd
cs
xchg
das
inc
lods
dec
ja
add
sti
pop
xchg
push
sub
mov
add
pop
cmps
ror
ror
int3
adc
je
jge
loop
jl
ret
and
mov
into
mov
sub
shl
adc
and
cwde
jecxz
xchg
mov
(bad)
fisubr
jmp
hlt
(bad)
mov
sbb
xchg
adc
push
mov
stos
push
pop
out
jb
sub
xor
add
xchg
mov
cmp
mov
add
fldlg2
retf
adc
and
lea
push
lods
aad
cmp
push
rcr
jg
(bad)
jns
pmovmskb
dec
adc
repz
ficom
adc
inc
ss
sbb
mov
pusha
mov
push
mov
push
ins
or
adc
adc
out
in
repnz
out
mov
fwait
in
in
call
je
inc
xor
adc
add
add
ss
adc
outs
iret
fsubr
fsubr
test
ins
repnz
or
addr16
test
push
cwde
mov
repz
xchg
mov
adc
cmp
(bad)
(bad)
popf
out
add
in
jne
adc
mov
adc
jmp
loopne
add
dec
or
push
test
adc
in
adc
(bad)
popa
ffree
jmp
xchg
(bad)
or
(bad)
aam
hlt
sub
in
in
sbb
outs
adc
mov
mov
xchg
push
in
push
or
mov
add
cmp
cmps
xor
mov
(bad)
jge
imul
lods
pop
and
pushf
cmp
iret
sbb
mov
pop
and
xchg
std
push
cmps
sub
leave
sbb
inc
push
or
fwait
int3
mov
inc
pop
out
jne
push
push
push
cmp
in
aas
retf
repz
mov
test
or
jae
jae
call
xor
stos
sbb
ja
(bad)
xor
dec
dec
adc
xchg
pop
mov
in
xchg
adc
popa
sub
test
adc
ja
stc
jl
adc
mov
sub
pop
xor
mov
push
sub
adc
fdiv
cmp
cs
xchg
(bad)
imul
adc
ret
xchg
mov
addr16
retf
cmp
arpl
stos
rcl
inc
cmp
push
rcr
jmp
loopne
sub
push
xor
adc
mov
aad
jno
mov
enter
imul
dec
(bad)
in
pop
out
ins
cli
hlt
mov
jno
cmp
stos
mov
ds
repnz
sbb
xor
xchg
mov
xchg
sbb
adc
pop
ret
and
loopne
es
iret
push
scas
mov
mov
push
cmps
dec
adc
and
xchg
out
jge
inc
mov
iret
add
cli
fwait
cmp
adc
add
xchg
addr16
sahf
adc
xor
jae
jo
mov
sub
jle
std
bound
pusha
fsub
dec
adc
xor
mov
push
out
push
(bad)
movs
mov
fsub
adc
ins
push
ror
or
adc
add
ror
sbb
adc
bound
enter
mov
adc
cwde
inc
ds
(bad)
push
aad
adc
mov
cmp
dec
stos
popa
mov
shl
sub
outs
push
xlat
loope
ss
aam
sub
push
adc
sub
adc
push
push
sbb
aad
xchg
gs
jb
popa
inc
adc
or
adc
out
jp
out
inc
adc
gs
adc
jmp
shr
mov
adc
repz
fld
or
cwde
sbb
add
push
pusha
int3
popf
adc
mov
movs
pushf
outs
mov
adc
mov
cli
enter
push
add
test
ins
mov
jl
adc
adc
clc
push
push
loopne
adc
js
scas
push
dec
push
pop
adc
jp
xor
or
cs
mov
pushf
(bad)
cli
and
xchg
pop
mov
out
adc
out
rcl
xchg
pop
repnz
and
scas
cmp
sbb
mov
xor
or
xchg
xchg
xchg
inc
mov
shl
cmp
ficom
ja
ss
cmp
ds
cmps
adc
push
std
shl
test
xor
push
adc
push
stos
loop
dec
sub
adc
sbb
inc
outs
inc
lods
test
pop
lahf
repz
icebp
sbb
add
out
jno
inc
dec
out
fmul
mov
xor
push
repnz
shr
lds
sti
ret
push
ror
xchg
xchg
push
mov
xor
into
sbb
fsub
push
xchg
not
xchg
nop
das
xchg
cmp
sbb
lock
mov
xchg
pusha
(bad)
pop
pop
jbe
mov
sbb
lods
jmp
test
retf
push
jne
fwait
rol
xchg
sar
pop
test
js
inc
cdq
sub
or
push
mov
mov
not
ins
mov
je
imul
fcmovnbe
and
pop
sbb
mov
pop
fst
adc
or
and
sbb
jg
fidiv
cmp
or
cwde
adc
sbb
sti
xor
clc
pop
lods
and
xlat
aam
pop
jmp
add
inc
inc
(bad)
lods
in
xchg
test
ins
sbb
and
dec
pop
cdq
int3
retf
jnp
in
pop
dec
test
or
les
movs
daa
in
xor
je
or
imul
or
jmp
or
and
sar
add
retf
jne
jmp
mov
pop
aad
inc
or
mov
or
dec
or
fwait
adc
sti
test
pop
call
cmp
dec
adc
mov
pop
mov
jle
xor
aam
cwde
add
sar
(bad)
push
or
sbb
int3
push
adc
repz
int3
inc
lss
pop
push
pop
pop
mov
aas
lahf
adc
dec
mov
int3
push
adc
push
push
and
inc
shr
jmp
dec
mov
inc
xor
xlat
jmp
cdq
imul
(bad)
popa
xchg
pop
rcl
ins
fst
sbb
lahf
xchg
and
sub
or
cdq
test
pop
aas
cld
retf
xchg
lahf
repnz
(bad)
mov
stc
xor
cdq
ins
cmc
ja
lock
cdq
push
sbb
in
xor
pop
jmp
pop
pusha
ins
push
xchg
pop
ins
sbb
(bad)
in
xor
pop
push
and
cmps
and
and
pop
fiadd
and
adc
ins
pop
addr16
mov
int
push
ret
lahf
jo
pop
push
inc
daa
mov
dec
aas
or
cld
adc
adc
pop
pop
std
pop
cmp
mov
repz
cmps
mov
or
sub
xor
ror
dec
jmp
les
cld
sbb
xor
and
hlt
and
push
(bad)
adc
push
cld
xor
push
(bad)
jmp
add
in
mov
add
or
out
xor
call
adc
jbe
jno
cmp
adc
mov
mov
adc
mov
fst
and
std
jge
adc
adc
and
mov
jle
sbb
sub
cmp
jl
fidiv
call
test
adc
mov
jo
ss
sub
jne
imul
or
rcl
(bad)
mov
mov
push
in
sahf
cmp
cld
sahf
into
mov
iret
mov
sbb
pop
or
sub
adc
popf
scas
adc
ja
mov
sbb
sbb
add
mov
xor
mov
adc
mov
jle
(bad)
outs
or
aam
mov
int3
xchg
xchg
sbb
inc
or
mov
cmp
fcmovu
loope
cmp
addr16
mov
lahf
jo
jmp
pop
cli
pop
loopne
adc
cmps
sbb
cwde
and
dec
dec
(bad)
pop
stos
adc
sahf
and
or
cmp
(bad)
mov
xor
adc
push
mov
(bad)
mov
mov
cld
push
pop
ins
test
cmp
push
addr16
xchg
xchg
xor
cmp
and
fbstp
imul
shl
int3
(bad)
xchg
je
fs
int3
test
clc
sbb
xchg
push
loopne
pusha
pop
add
shl
arpl
cli
popa
adc
loop
add
add
inc
mov
rcr
adc
jg
adc
shr
stos
inc
rcl
aas
test
retf
adc
xor
out
mov
cmp
add
aad
cld
inc
and
test
das
cmc
fcom
and
jbe
push
mov
jle
fmul
inc
push
ds
dec
fld
jns
sbb
push
(bad)
xchg
and
enter
adc
loopne
push
repnz
js
xchg
lds
cmc
addr16
jl
jmp
add
dec
adc
lahf
out
pop
(bad)
xor
push
mov
mov
pusha
dec
es
sbb
or
sbb
outs
stos
jb
jmp
rol
inc
adc
(bad)
dec
inc
pop
movs
or
loope
add
iret
adc
sahf
jle
mov
adc
ins
(bad)
pop
aam
inc
mov
inc
imul
out
adc
test
sbb
mov
cmp
inc
shl
cs
xor
test
push
(bad)
sbb
fwait
lods
cli
push
inc
pop
repz
add
stos
or
in
adc
or
cmc
push
and
int3
inc
ins
jns
and
mov
mov
sbb
clc
or
cmp
xchg
cdq
sti
das
clc
fisttp
pop
addr16
cld
lock
fisub
mov
shld
ins
add
jmp
es
push
mov
leave
fnsave
xchg
popf
int
movs
jge
mul
add
les
cmp
jne
adc
and
xor
fstp
add
ins
inc
push
out
cmp
mov
repnz
in
inc
jp
or
test
jle
push
xor
pop
mov
nop
jp
xchg
mov
fimul
xor
leave
sub
popa
ja
fldenv
pop
in
and
dec
stos
ficom
sbb
sbb
xchg
rcl
mov
xchg
sub
retf
rcr
ins
js
test
gs
and
outs
scas
xor
sbb
mov
and
dec
xchg
sti
sub
inc
adc
test
mov
repz
jbe
adc
aam
sar
movs
rcl
push
cmp
pop
mov
add
push
adc
in
inc
mov
add
popa
loop
pop
jae
jmp
and
(bad)
cmc
adc
mov
call
int3
jno
mov
cdq
out
mov
fiadd
lds
and
dec
mov
push
push
call
(bad)
jle
xor
retf
push
mov
ret
cmp
sbb
add
push
jb
and
jecxz
sub
gs
ss
dec
sbb
test
add
syscall
and
pop
push
repnz
les
push
fsub
lock
adc
xchg
hlt
das
sub
jp
pop
xor
add
icebp
mov
or
retf
(bad)
fmul
mov
add
pop
jae
push
mov
aas
dec
and
in
mov
or
push
adc
mov
mov
sbb
xchg
mov
in
cmp
pusha
inc
and
push
mov
sbb
adc
out
cmps
jo
and
adc
cmp
push
cmp
fidiv
cmc
xchg
dec
fld
aad
es
mov
xchg
mov
int3
ret
fcompp
pop
and
cmp
jmp
popf
es
mov
push
sbb
add
mov
adc
in
jp
movs
fwait
push
gs
popf
cli
loop
pop
mov
out
mov
xchg
ret
es
push
(bad)
in
xor
sbb
test
jnp
jns
adc
test
push
stos
and
adc
hlt
lahf
mov
fs
mov
cdq
adc
adc
ja
fwait
adc
xor
adc
repnz
sbb
stos
jns
int
lods
es
sub
add
test
jns
xor
mov
loop
adc
jmp
sbb
pop
sub
mov
sbb
call
jbe
push
push
push
ror
cmp
xor
add
mov
push
test
data16
rcl
fdivrp
ins
loope
add
cmp
jmp
in
or
sub
sub
sub
adc
and
jmp
jg
out
(bad)
push
fwait
test
aad
outs
add
aam
loop
test
lahf
inc
jne
cmp
cmp
pop
and
or
adc
nop
pop
or
mov
cwde
xchg
mov
sbb
je
iret
push
pop
rcl
adc
dec
dec
pop
dec
xchg
icebp
push
adc
into
jne
lahf
pop
addr16
adc
ds
push
dec
push
sbb
adc
xchg
aas
xor
icebp
mov
push
push
mov
inc
aas
cs
mov
and
sbb
(bad)
adc
(bad)
inc
out
rcr
jp
(bad)
fsub
fcom
shl
pushf
add
pop
add
mov
cmp
stos
pusha
adc
sbb
test
pop
dec
cmps
test
ins
push
loop
adc
adc
scas
shl
mov
jge
les
xchg
aas
adc
rcr
in
mov
push
aam
ror
rcl
jmp
xchg
fs
(bad)
das
xchg
not
fcom
stos
je
push
sub
push
ficom
xor
jecxz
mov
push
mov
in
pushf
retf
dec
fcomp
mov
mov
add
mov
pop
jmp
ret
inc
sub
sti
shr
imul
es
add
jle
xchg
loop
arpl
je
ret
int3
mov
mov
jg
push
dec
shr
je
ficom
out
or
retf
nop
xchg
xchg
cmp
cli
mov
fst
pushf
test
movs
fs
repz
sub
mov
fcom
test
inc
daa
adc
or
mov
jb
ins
fisttp
push
sbb
test
repnz
push
retf
and
iret
lods
push
rol
inc
in
xor
xchg
pop
xor
and
and
jp
jae
adc
xchg
xor
pop
jmp
dec
jo
in
inc
adc
shl
sbb
(bad)
out
addr16
jmp
xchg
sahf
sbb
mov
xor
sbb
bound
jmp
pusha
push
mov
in
mov
aas
in
int3
enter
xor
mov
sahf
scas
fs
mov
pop
leave
jle
inc
aam
imul
clc
scas
lock
ins
pusha
int3
add
mov
mov
ror
cmp
adc
and
pop
dec
out
or
in
(bad)
je
dec
mov
sub
xchg
mov
or
mov
push
mov
sbb
xor
test
fs
fcmove
out
(bad)
sbb
push
pop
in
sbb
mov
int3
fimul
add
sbb
stos
retf
sbb
out
ret
cwde
rcr
xor
adc
fimul
cmp
or
push
mov
retf
mov
xchg
mov
test
mov
cld
cmps
cld
dec
jmp
(bad)
mov
int3
or
jnp
jecxz
loopne
cmps
or
jecxz
in
arpl
aas
add
je
lss
mov
loop
push
repnz
jmp
mov
jne
sub
adc
scas
jp
rol
in
cmp
test
mov
xchg
xchg
pop
xchg
jb
sub
mov
inc
lods
adc
cmp
push
loop
xor
pop
test
adc
ss
mov
dec
and
popa
aaa
xor
shl
adc
mov
jecxz
cwde
sbb
adc
or
rol
dec
xchg
xor
jge
ins
jl
adc
cmp
push
dec
(bad)
jmp
pop
movs
pop
adc
adc
setae
adc
fist
inc
nop
std
fs
pop
sbb
adc
xlat
cs
dec
mov
and
(bad)
and
push
jg
push
cs
mov
inc
scas
lock
fiadd
stos
push
pop
adc
out
ds
or
adc
hlt
mov
in
ror
push
push
adc
inc
mov
shl
cmp
fucom
xchg
adc
jg
push
push
pop
outs
mov
stos
in
inc
int3
xchg
aas
push
test
scas
cmp
les
adc
jmp
arpl
outs
pop
cdq
and
jo
idiv
or
sbb
cmp
push
fsub
pusha
dec
adc
lds
adc
pop
sti
fstp
test
inc
retf
mov
sbb
sbb
push
pop
push
mov
frndint
sahf
inc
push
adc
cmps
jmp
pop
jp
inc
fs
jne
and
adc
push
lahf
in
xor
xor
pop
adc
mov
pop
and
or
add
lods
xchg
adc
push
(bad)
inc
lods
mul
or
sbb
out
push
and
mov
fisubr
or
mov
adc
push
dec
mov
jmp
pusha
movs
mov
addr16
ficomp
dec
jbe
fst
clc
adc
add
xchg
jo
(bad)
inc
inc
fst
jle
mov
add
fst
add
adc
pop
pop
les
aas
sub
shl
mov
shl
shl
push
or
inc
inc
fisub
in
xor
add
push
push
mov
pop
rcl
jg
rcr
push
ss
xor
ja
(bad)
push
and
je
or
inc
popf
adc
stc
sbb
jecxz
daa
jge
movs
push
repz
div
out
adc
pop
and
sub
clc
xchg
mov
mov
mov
push
xor
lods
adc
adc
jne
pop
pop
dec
and
cmp
mov
std
(bad)
movs
imul
fimul
mov
push
push
test
aam
adc
jp
ss
icebp
lock
pop
mov
je
cdq
cmp
push
sti
rol
or
xchg
out
rcl
daa
ss
fmulp
nop
sub
in
shr
cmps
xor
leave
imul
(bad)
lds
xor
mov
(bad)
cmp
and
popf
mov
aam
in
adc
mov
pop
fmul
adc
sahf
pop
dec
inc
test
sbb
popf
push
pop
outs
movs
test
xchg
mov
sub
lock
fstp
into
hlt
clc
aam
jle
mov
cmp
inc
out
je
xchg
scas
xor
aaa
mov
push
or
xor
and
ror
sub
or
data16
push
pop
aaa
adc
hlt
adc
lods
cmps
inc
add
retf
cdq
xor
or
inc
xchg
mov
popf
adc
(bad)
retf
xchg
or
sti
popa
push
sub
retf
jl
pop
aam
mov
xchg
inc
retf
xor
loope
call
movs
mov
(bad)
add
cmp
jmp
retf
mov
push
inc
rcr
mov
mov
iret
pop
movs
or
pop
push
or
mov
fs
adc
ss
or
add
imul
mov
and
ins
inc
add
cdq
je
inc
in
pusha
xlat
scas
or
jmp
pop
add
inc
das
pop
dec
sbb
jecxz
adc
sbb
mov
cmps
and
clc
fwait
loop
out
es
or
sub
(bad)
aad
retf
sbb
cmp
sbb
jne
and
push
cs
enter
mov
sub
ret
adc
and
cli
add
xchg
arpl
(bad)
adc
push
icebp
dec
pop
int3
or
pushf
adc
inc
imul
lahf
dec
mov
sub
sbb
iret
and
inc
inc
jb
imul
sti
xchg
cwde
xor
(bad)
cwde
lods
je
or
pop
mov
out
mov
pop
div
outs
lock
das
jge
mov
sub
test
outs
add
xchg
mov
outs
call
aaa
fs
sbb
out
sahf
mov
ds
push
push
push
xchg
adc
pop
pop
jne
popf
xor
call
and
pop
adc
in
(bad)
leave
adc
adc
movs
push
fwait
ss
js
hlt
lds
mov
push
out
in
push
adc
test
les
adc
out
mul
ror
pusha
and
pushf
ins
add
aam
adc
fnsave
mov
aaa
mov
shl
ja
and
add
dec
sub
xchg
jmp
rol
cmp
leave
add
sbb
adc
fild
mov
icebp
ficom
aaa
and
jl
sbb
dec
(bad)
jns
enter
adc
daa
or
stos
nop
in
icebp
xor
xor
ds
(bad)
ficom
and
push
mov
clc
inc
xchg
in
dec
xchg
loop
out
mov
das
data16
and
ret
popf
or
pushf
mov
ds
fdivr
add
cmp
call
stc
fldenv
xchg
jp
adc
or
stos
mov
and
ficom
mov
xchg
jbe
or
inc
mov
mov
adc
push
xchg
jmp
push
push
mov
in
test
and
mov
adc
push
loop
xchg
mov
jno
movs
xchg
sub
in
leave
call
add
stc
loop
std
in
out
loope
sub
mov
fwait
xor
adc
cdq
pusha
fsub
leave
sub
adc
outs
pop
push
jmp
or
mov
xchg
dec
inc
add
add
inc
int
pop
adc
cvtps2pd
dec
adc
psubd
adc
push
in
int3
out
adc
sar
into
push
inc
cmp
inc
sub
adc
jno
cmp
cs
in
xchg
or
xchg
xchg
jl
adc
cmp
or
out
in
aaa
adc
jge
jp
xlat
jnp
sbb
lock
rol
cmps
aam
adc
div
jns
fcom
cs
ins
in
out
in
dec
push
rol
(bad)
push
lahf
sub
fisub
jge
sbb
add
jl
retf
sbb
sbb
xor
sbb
inc
xor
mov
xchg
scas
mov
push
sub
jo
in
pop
in
cmp
adc
imul
mov
das
sbb
and
pop
fs
cmp
es
mov
dec
stos
or
fdivr
jge
add
push
or
ds
js
add
xor
push
mov
jo
cli
xchg
adc
hlt
std
test
cmp
push
aam
cld
mov
(bad)
ins
repz
mov
adc
sar
fs
xor
mov
adc
push
aaa
call
iret
pop
pusha
and
add
call
call
imul
shl
fist
icebp
mov
fdiv
mov
jmp
es
jecxz
add
out
jns
xchg
pushf
pop
adc
mov
imul
mov
adc
pop
adc
sar
adc
adc
mov
outs
sub
pop
inc
sete
call
dec
inc
out
lock
jae
sbb
xlat
je
hlt
pop
jnp
adc
aam
pop
fstp
mov
inc
into
scas
jp
xor
or
inc
enter
arpl
sar
xchg
aam
sbb
adc
ret
mov
inc
jno
les
or
ins
mov
fsubr
xchg
or
clc
out
or
stos
movs
dec
cli
loope
mov
test
jnp
mov
rcr
dec
adc
push
cmp
xchg
adc
inc
stos
xor
aam
xor
adc
repnz
imul
jns
cmps
aad
xor
fsubr
leave
sbb
clc
rcr
push
push
mov
mov
fnstcw
xor
enter
pop
jmp
aas
loopne
dec
add
aam
adc
clc
lods
movs
jmp
jmp
inc
pop
mov
les
mov
cmp
adc
and
rcr
into
outs
adc
mov
xor
sub
ja
push
out
movs
pop
adc
icebp
cmp
inc
jge
jmp
ds
std
out
fdivr
mov
mov
adc
sbb
cmp
push
pop
adc
xor
aaa
adc
pop
mov
push
fldenv
lock
ja
loope
lods
(bad)
xchg
jmp
push
repz
popa
or
sbb
jnp
mov
pop
adc
xchg
repz
jecxz
mov
sbb
mov
aaa
mov
sub
into
lahf
out
pop
xor
and
sti
sbb
cmp
xchg
add
inc
pop
push
mov
jmp
sub
repnz
pop
int
pop
push
xchg
cmp
adc
repz
lea
dec
lock
push
scas
adc
std
das
test
nop
int3
(bad)
adc
test
int
shl
pop
adc
pop
dec
push
inc
sbb
out
mov
movlps
sbb
loope
jmp
lods
dec
inc
loop
xor
mov
adc
dec
push
cmp
adc
scas
pushf
test
and
dec
stc
pop
sbb
adc
cwde
push
jmp
and
cmc
adc
loop
dec
fisttp
adc
inc
retf
(bad)
dec
pop
adc
out
lahf
mov
sub
shl
scas
add
leave
push
dec
xchg
in
je
jne
stc
or
xchg
mov
xchg
pop
adc
movs
in
loopne
(bad)
lock
xchg
xor
call
jnp
adc
push
mov
pop
imul
adc
mov
repnz
sub
mov
mov
sub
push
add
add
inc
sbb
and
dec
cwde
lock
xor
pop
mov
jne
mov
sub
sbb
cmp
adc
fisttp
leave
sbb
das
mov
push
push
sub
nop
popf
loop
add
das
clc
(bad)
rcr
test
call
push
les
pop
dec
aad
rcl
jecxz
inc
push
adc
xor
into
cmps
div
repz
lea
int3
and
sbb
push
ja
jne
sti
cmp
or
mov
in
mov
add
mov
or
fistp
xor
daa
jg
jmp
ror
stos
jb
pop
mov
fcom
clc
inc
hlt
mov
adc
cmps
and
cdq
or
fdivr
mov
xorps
clc
ss
or
jl
ins
mov
shl
pop
mov
cmps
inc
test
dec
push
and
test
int3
mov
jmp
ss
adc
ret
movs
or
sbb
and
fwait
dec
inc
jecxz
xor
sub
add
sbb
push
mov
adc
aad
jno
loop
test
jp
cmp
pop
push
push
push
inc
xor
das
mov
(bad)
cld
test
movs
jge
pop
retf
inc
jnp
sbb
pop
jns
pushfw
pop
movs
bound
inc
xlat
pop
mov
push
leave
and
dec
adc
rol
pop
outs
adc
and
ins
add
adc
push
mov
lahf
popf
dec
inc
adc
add
clc
pop
les
cmp
jbe
retf
stos
sbb
adc
jnp
cmp
xor
and
adc
add
call
ins
adc
add
push
or
adc
adc
test
cmp
pusha
retf
mov
xchg
aaa
in
je
cmp
adc
dec
dec
(bad)
out
adc
lock
and
aam
adc
ds
push
fstp
ins
inc
mov
dec
and
push
adc
sbb
inc
and
(bad)
pop
xor
xchg
not
(bad)
jbe
push
retf
xchg
fstp
(bad)
sub
stos
lds
dec
xchg
jbe
enter
fmul
in
pop
mov
pop
dec
and
imul
or
mov
cwde
push
sbb
and
add
ret
arpl
adc
fwait
retf
inc
pop
inc
sbb
jnp
add
mov
mov
xor
mov
icebp
(bad)
pop
push
adc
xchg
cmc
adc
push
pusha
mov
out
pop
and
push
adc
movs
mov
or
mov
imul
adc
push
sbb
sub
add
push
mov
pop
adc
xor
ror
xor
imul
test
sub
clc
in
adc
jg
aaa
pop
shl
adc
sub
jle
xor
or
or
pop
sbb
call
adc
aad
retf
rcl
or
stos
jecxz
add
mov
test
call
ja
outs
xor
push
pop
daa
test
out
in
mov
out
mov
pop
ret
aaa
cmc
mov
rol
dec
dec
cmp
frstor
jp
adc
cmps
imul
adc
repnz
sub
xor
pop
stos
mov
push
pop
add
popf
adc
cld
jmp
pop
push
mov
rol
mov
pop
pushf
push
addr16
dec
mov
gs
cmp
pop
add
xchg
mov
pop
out
cmp
test
setno
ja
icebp
push
mov
loopne
sbb
rcr
aad
sub
adc
cmp
xor
test
repz
and
cdq
and
clc
xor
pop
dec
xor
rcl
adc
lea
jge
imul
les
xchg
popf
(bad)
rcl
adc
pop
jg
pop
ret
rcl
sub
mul
movs
and
xchg
icebp
nop
xor
leave
lock
lea
xor
sti
jmp
mov
push
movs
fst
adc
cmp
idiv
test
les
dec
data16
dec
leave
arpl
adc
out
lea
sbb
xor
mov
mov
push
add
or
add
cmp
adc
rcr
xchg
xchg
ins
sysenter
adc
push
cmp
arpl
push
xor
inc
pop
in
adc
sub
mov
cmp
xchg
push
je
test
mov
outs
js
(bad)
in
xor
in
movntq
or
xchg
jae
add
mov
jbe
or
out
stos
movs
test
ins
ret
push
sub
push
push
in
pop
ins
test
scas
popf
rcr
and
dec
rol
mov
test
mov
add
sub
aam
push
xor
push
inc
sbb
adc
aam
es
xchg
leave
sbb
call
dec
mov
test
and
and
lods
push
int3
inc
dec
push
loop
xor
test
cli
push
es
push
arpl
adc
xchg
loop
sbb
jmp
or
and
pop
ins
inc
pop
in
xor
adc
adc
sahf
cmps
sbb
mov
scas
push
dec
pop
in
aad
or
sbb
push
ins
pusha
sbb
inc
sbb
int3
ss
inc
mov
test
mov
in
or
jbe
ins
push
add
call
push
je
mov
xchg
nop
xchg
dec
gs
mov
popa
scas
ja
xor
xchg
mov
(bad)
push
hlt
mov
mov
mov
jecxz
icebp
lock
sbb
push
cwde
push
out
and
adc
js
pop
push
iret
xor
bound
xchg
mov
pop
xchg
sbb
loop
aam
lahf
or
imul
lock
les
dec
cmps
in
jp
push
sbb
(bad)
pop
lock
xchg
inc
pmaddwd
jmp
xlat
cmp
dec
pop
adc
jbe
ds
cmps
outs
movs
call
cdq
adc
ja
movs
jmp
in
out
adc
(bad)
daa
push
add
jmp
fisttp
inc
xchg
clc
sti
mov
xchg
mov
jns
or
(bad)
aam
sbb
xor
add
das
retf
lea
hlt
sbb
nop
dec
or
scas
cmp
cld
dec
or
push
pop
and
jg
call
dec
fidiv
add
cwde
pusha
add
xchg
add
leave
dec
shl
call
adc
push
out
xor
out
lock
sub
es
adc
jmp
add
je
fwait
mov
pushf
call
call
mov
adc
push
or
(bad)
stos
mov
popf
push
movs
test
mov
sbb
cmps
rcl
sub
call
xor
loop
in
mov
mov
les
mov
cli
mov
cmp
jo
test
push
pop
ficom
mul
dec
adc
pop
lods
stos
add
test
sub
adc
(bad)
sub
test
add
xchg
jecxz
retf
cmp
cld
mov
or
cmp
cwde
js
xor
adc
inc
mov
imul
call
cmp
inc
in
lea
sub
xchg
mov
es
test
sbb
adc
inc
jp
inc
mov
xor
xchg
and
test
or
sti
jmp
adc
xor
xor
jecxz
lea
cmp
(bad)
into
push
adc
cwde
jge
mov
rol
es
das
fdivr
(bad)
sbb
cdq
out
pop
pop
adc
mov
push
lahf
in
cmp
xor
loope
adc
and
pop
test
dec
inc
sahf
or
sub
mov
or
pop
adc
dec
and
inc
pop
(bad)
and
adc
test
adc
fidiv
or
out
adc
push
push
outs
pop
(bad)
aad
xchg
xor
shl
adc
or
retf
add
(bad)
mov
rcl
faddp
push
adc
sahf
mov
push
push
cdq
jns
lea
cmp
adc
repnz
pop
(bad)
xchg
outs
add
mov
cmp
push
leave
nop
sbb
and
repz
sbb
es
jecxz
fisub
jge
and
jae
or
push
xlat
xchg
hlt
jne
int3
ret
adc
sub
or
xchg
sbb
adc
arpl
das
cmp
data16
jbe
xor
mov
rol
imul
sbb
add
xchg
es
fld
shr
xchg
push
stos
mov
fs
jmp
retf
and
add
in
out
in
leave
mov
(bad)
fnstcw
pop
enter
adc
rcr
xlat
xchg
sub
sar
repnz
sbb
and
or
add
sbb
inc
shl
test
aas
movs
sub
pop
xor
pop
popf
inc
retf
pop
in
mov
adc
fisttp
cmc
sbb
mov
sti
or
jge
in
jmp
add
adc
fscale
push
in
(bad)
xchg
in
js
scas
out
pop
mov
test
outs
pusha
mov
adc
es
cmp
or
call
xchg
adc
push
cmps
rol
or
inc
cmc
push
mov
and
sbb
pusha
in
or
sub
push
lds
add
mov
xchg
xchg
ins
pop
les
fs
cmc
pop
adc
(bad)
imul
sbb
scas
movs
ror
leave
xchg
xor
push
sub
jp
mov
in
ret
dec
adc
and
mov
inc
lods
adc
push
dec
sub
push
push
(bad)
jns
push
enter
movs
dec
jle
xchg
dec
pusha
les
sub
and
int
nop
jp
xchg
fnsave
shr
test
or
sub
push
outs
in
mov
xchg
xchg
jmp
push
xor
dec
call
add
ins
in
pop
add
cmc
pop
sub
pop
push
in
fwait
adc
cmp
adc
xor
and
ret
sub
adc
pop
cmp
popa
pop
aam
adc
ret
cmps
lea
sti
sub
jno
jmp
lock
add
jge
nop
adc
jb
sar
jae
cmps
outs
xchg
enter
iret
movs
dec
pop
sub
mov
sbb
adc
jno
cld
push
cmc
fisttp
xchg
and
aam
mov
adc
mov
leave
mov
fwait
repz
mov
xchg
in
jmp
fcomp
std
add
xchg
sub
je
ds
mov
push
jb
(bad)
xchg
gs
rol
in
mov
adc
inc
adc
pop
adc
mov
in
mov
mov
and
lods
ja
loope
fs
push
adc
cmp
mov
push
clc
lods
data16
repnz
adc
push
(bad)
fist
push
cmp
xchg
sub
add
pop
ins
mov
mov
repz
imul
(bad)
loopne
hlt
push
xor
xchg
loope
xchg
scas
cmps
xchg
lods
push
cmp
jl
(bad)
fdivr
aas
and
in
dec
push
cwde
sbb
adc
jne
in
ins
mov
data16
in
jmp
mov
pop
test
stc
movs
or
repnz
mov
jmp
xchg
rcl
les
inc
das
retf
mov
jo
push
aas
int3
(bad)
lea
imul
adc
sar
jae
cs
stos
je
dec
std
sbb
call
ins
pusha
movs
jmp
or
push
call
cmovl
ret
push
aas
in
movs
call
lods
ror
(bad)
cmp
adc
and
push
jo
out
shl
sbb
add
popf
pop
scas
push
dec
jp
pop
pusha
stos
xchg
or
daa
sbb
retf
loopne
movs
xchg
std
jp
cmps
int3
movs
fiadd
icebp
pop
(bad)
in
mov
fwait
jmp
call
and
dec
in
cld
lods
xchg
and
nop
sbb
(bad)
mov
sbb
cdq
jmp
mov
pop
ror
add
push
sbb
and
sub
cld
or
or
fld
loope
mov
push
daa
out
xchg
out
sbb
test
push
jnp
adc
jl
dec
dec
js
xor
inc
adc
cmp
aam
rcl
adc
and
and
js
mov
fcmovnu
gs
leave
adc
xchg
ror
cmps
test
mov
adc
push
stc
cld
adc
cli
pushf
jp
push
out
test
or
movs
nop
repnz
xchg
fst
push
sbb
inc
mov
adc
add
(bad)
aad
mov
ja
mov
adc
ss
xor
aaa
inc
repnz
mov
adc
cli
inc
int3
dec
shr
add
scas
stos
icebp
test
adc
mov
sbb
pop
jb
aam
push
in
test
std
ret
or
push
sbb
in
mov
scas
and
test
dec
pop
or
adc
sbb
mov
add
mov
sbb
sub
add
mov
adc
out
(bad)
inc
push
aad
(bad)
xor
jle
or
and
sbb
lock
loope
mov
or
push
xor
aad
mov
add
repnz
sbb
adc
xchg
cmps
pushf
or
adc
sub
cmp
out
push
in
inc
fdiv
or
(bad)
std
push
cmp
sar
xchg
mov
aam
pop
test
cmp
(bad)
in
xchg
mov
inc
xor
cmp
mov
sub
lahf
adc
aam
cmp
push
mov
xchg
pop
mov
dec
jne
adc
imul
or
push
lods
mov
push
sahf
lock
and
arpl
adc
and
lahf
sub
in
shl
cld
arpl
jbe
aas
mov
adc
xor
or
adc
push
dec
adc
arpl
mov
js
mov
imul
test
fisub
aam
out
fs
ds
mov
fimul
arpl
aam
xor
imul
pop
outs
xchg
xor
xor
push
int3
xor
pushf
and
dec
mov
add
adc
aad
adc
xor
loop
lods
sbb
adc
mov
pop
mov
dec
adc
xchg
mov
or
cdq
fmul
imul
out
clc
mov
frstor
loopne
pop
or
rcl
mov
xchg
jg
jge
add
rcl
in
inc
in
and
cmp
add
and
test
pop
add
adc
or
dec
je
bound
push
mov
jne
int3
or
int3
pop
sbb
inc
dec
loop
push
dec
mov
ficomp
jl
imul
int3
sbb
lahf
inc
mul
popf
lods
and
adc
mov
sahf
lahf
pop
aad
addr16
das
cdq
adc
repz
adc
je
fst
clc
aam
push
outs
sub
loopne
pop
mov
int3
xor
rol
cli
add
cmp
cmc
int3
jb
adc
mov
dec
push
jmp
mov
in
(bad)
(bad)
mov
xchg
jle
and
jo
sbb
sbb
ins
pop
aam
sbb
sub
das
mov
test
xchg
sahf
sub
and
add
push
dec
sub
in
jl
adc
sub
loopne
stc
sbb
add
es
into
cmp
jne
pop
lods
xor
test
bound
adc
jecxz
xchg
push
xchg
mov
adc
movs
mov
adc
mov
add
clc
je
in
push
lahf
call
outs
xchg
stos
xor
data16
hlt
fild
adc
ret
push
add
in
in
pusha
sbb
rcr
out
and
xchg
jmp
mov
push
pop
jbe
out
push
mov
push
push
xchg
lock
inc
mov
(bad)
push
jne
rol
aas
unpcklps
jl
mov
mov
adc
inc
(bad)
jecxz
mov
mov
into
out
pop
pop
add
das
jae
(bad)
adc
in
outs
(bad)
jge
add
inc
fs
out
pop
sub
pop
popa
adc
inc
(bad)
mov
or
icebp
mov
xor
jg
jl
in
ja
jae
dec
je
aam
add
div
ds
outs
xchg
xor
inc
pop
cmp
push
pop
push
lock
mov
or
adc
inc
mov
push
arpl
in
enter
xchg
push
and
ret
jge
das
mov
int
adc
jecxz
lahf
sub
nop
adc
and
aam
mov
dec
adc
in
rcl
jge
jne
bound
test
pop
sbb
aam
js
pop
cmps
movs
sbb
shr
(bad)
sub
and
and
push
scas
stos
sbb
adc
and
jo
cmp
mov
dec
push
fiadd
int3
mov
shr
cmp
jne
popa
sahf
push
sar
mov
scas
xchg
aad
call
inc
jns
(bad)
xchg
push
outs
test
mov
or
adc
dec
xchg
fwait
inc
xchg
adc
mov
add
add
cmp
xor
ins
sar
in
out
nop
mov
iret
retf
adc
loope
ja
sbb
(bad)
fwait
shr
jecxz
ins
mov
shl
pop
lds
dec
cwde
push
mov
aaa
in
mov
outs
mov
shl
jg
adc
mov
inc
sbb
stos
out
lds
ins
sbb
pop
fild
movs
scas
ins
stc
icebp
movs
je
mov
stos
pop
and
inc
test
lods
daa
adc
aam
sbb
test
adc
or
mov
add
icebp
lahf
cmp
test
dec
ins
inc
loope
movs
jae
sbb
and
cmp
mov
call
inc
adc
adc
movs
mov
out
cmp
sub
mov
daa
add
jmp
or
adc
jle
aaa
fsubp
xor
test
sub
adc
not
or
aam
ret
aad
xchg
call
push
pop
imul
push
mov
ret
je
push
add
jle
add
fbld
adc
sub
xchg
adc
popa
mov
mov
and
ins
ss
cwde
sbb
sub
xchg
mov
cmp
pop
loop
loop
sbb
mov
adc
cmc
and
push
xor
push
cmps
scas
jmp
mov
aaa
jmp
ja
std
inc
int3
cli
hlt
push
xchg
enter
dec
in
mov
cli
adc
ins
mov
add
or
dec
in
leave
adc
mov
inc
push
out
cmp
std
and
xchg
test
mov
pop
ret
add
jp
add
fwait
push
aam
xchg
adc
dec
jns
pushf
cld
xor
nop
mov
jecxz
push
sub
add
add
add
mov
pusha
adc
cmp
lods
rcl
hlt
lods
push
mov
mov
outs
jnp
lds
mov
scas
movs
adc
jle
jmp
in
lods
loop
mov
dec
inc
icebp
sub
sbb
mov
and
addr16
dec
jmp
js
jg
cs
into
or
movs
dec
pop
imul
inc
or
adc
xchg
pop
inc
sub
iret
mov
rcr
imul
cmp
adc
sub
mov
adc
fisub
cli
adc
dec
rcl
mov
stos
pop
mov
and
push
add
cmp
jmp
(bad)
aam
shl
or
mov
test
test
xchg
cdq
ss
cmp
ss
pop
jmp
fdiv
ins
dec
in
and
outs
mov
push
cld
in
cmp
mov
xchg
movs
movs
and
icebp
jmp
sahf
ss
cmp
hlt
sbb
arpl
or
mov
push
pop
les
in
jmp
or
dec
pop
adc
cmp
in
cwde
js
aad
pop
xor
or
test
adc
mov
ror
sbb
data16
xor
ret
cmp
sbb
out
push
js
push
call
loopne
mov
inc
xchg
daa
mov
sub
cmp
dec
cdq
mulps
dec
hlt
rcr
mov
and
or
xor
mul
repz
adc
fwait
test
push
mov
and
add
stc
aad
push
and
in
iret
cmp
push
adc
test
lods
xchg
fimul
dec
jg
adc
ret
jp
push
(bad)
xchg
movs
sub
adc
pop
jl
adc
xor
add
sar
pop
xor
xchg
adc
jmp
aam
sbb
add
pusha
add
sub
adc
ret
jne
pop
push
icebp
inc
stc
fdivp
sbb
pusha
in
call
mov
pop
sbb
and
xchg
mov
xlat
cmps
push
adc
jns
in
data16
pop
retf
jne
gs
adc
clc
mov
adc
push
pop
push
cmp
popf
es
mov
xchg
rcl
and
jle
mov
sti
lds
rcl
int3
hlt
shl
aam
loope
std
adc
cmps
push
jge
inc
call
and
pop
add
lds
in
push
cmp
or
mov
inc
int3
test
xchg
jb
mov
cmps
jbe
dec
cmp
or
js
push
test
xor
cwde
xchg
push
push
loope
inc
and
lock
mov
sbb
xor
xchg
mov
or
mov
aaa
add
jle
and
pop
xchg
mov
jbe
push
xchg
and
in
adc
xchg
pop
movs
pop
mov
cmp
sub
hlt
pushf
vpaddusw
pop
rcr
cmp
mov
adc
mov
and
adc
cmp
mov
(bad)
pusha
and
sub
add
jg
mov
sbb
sbb
xor
pop
sub
xor
shl
ins
sbb
shl
inc
dec
mov
and
cmps
jp
push
mov
ret
mov
test
xchg
pop
xchg
mov
mov
int3
into
pusha
mov
push
pop
gs
jno
push
jne
cwde
data16
and
clc
sub
mov
cmp
imul
cmp
sbb
adc
add
lea
and
fcom
nop
arpl
jnp
xchg
xor
aas
push
add
or
dec
sti
and
mov
cmp
push
adc
neg
xor
gs
adc
mov
sub
scas
call
jmp
aam
or
cmp
aam
ins
std
adc
(bad)
adc
xor
inc
dec
call
adc
jl
xor
adc
xchg
jmp
sub
adc
outs
pop
inc
sbb
sbb
ins
(bad)
adc
jg
scas
rcr
call
xor
xchg
arpl
out
xchg
push
jg
sub
adc
jno
sbb
das
dec
xchg
fisub
sbb
dec
xchg
arpl
sub
je
repz
out
and
xchg
dec
cmc
in
test
scas
adc
push
fucom
pop
sub
xchg
adc
xor
xchg
mov
adc
jmp
sub
mov
push
adc
inc
daa
and
and
or
pusha
test
xor
loop
retf
inc
push
cwde
jle
fld
pop
jge
adc
neg
addr16
mov
loopne
mov
inc
xor
xrelease
loopne
mov
adc
test
or
imul
cwde
adc
in
jmp
je
aad
and
fldenv
push
repnz
mov
test
push
out
retf
xor
mov
mov
xchg
adc
dec
retf
push
sbb
es
in
pusha
sub
fs
xchg
or
push
add
sbb
sbb
cmp
or
xlat
pop
loope
ss
in
or
cmp
(bad)
fadd
jnp
push
sub
in
sbb
call
mov
icebp
mov
ja
dec
movs
call
into
iret
sub
push
sub
push
mov
out
xchg
add
rcl
adc
sar
call
sbb
test
hlt
xor
cs
das
loopne
in
enter
cmp
xchg
mov
mov
mov
xor
sbb
(bad)
in
in
lods
icebp
loop
test
aam
xchg
loopne
sbb
sbb
mov
neg
adc
add
pop
adc
lahf
cmp
inc
sbb
ins
inc
jecxz
adc
prefetcht1
sbb
outs
stos
in
jmp
(bad)
pop
popa
and
xor
ja
push
adc
leave
or
(bad)
in
mov
nop
add
push
test
mov
jmp
cld
mov
inc
(bad)
out
movs
sub
adc
push
add
fsub
inc
sbb
sub
loope
sub
or
add
xor
adc
push
cmp
repz
push
test
xor
xor
xchg
test
cdq
jns
ret
hlt
dec
fisub
arpl
add
pop
add
inc
imul
cmc
pop
in
sbb
das
push
xchg
adc
int3
fisttp
movs
jnp
add
push
fimul
jns
in
shr
aaa
mov
icebp
cmps
adc
test
cmp
loope
or
add
pusha
dec
mov
ins
rcl
ins
sub
in
push
xor
jae
mul
scas
das
pop
adc
push
jb
cmps
xor
test
(bad)
jns
xchg
mov
jbe
sub
and
adc
mov
add
sbb
js
(bad)
out
in
push
dec
push
pop
aam
jp
clc
pop
mov
call
icebp
or
pop
pop
mov
lea
cdq
es
xchg
stc
imul
test
mov
daa
xor
or
cmp
retf
ficom
invd
nop
jns
sbb
inc
sbb
sbb
scas
mov
mov
arpl
jmp
fucomi
xchg
push
in
adc
idiv
bound
adc
mov
lahf
inc
fadd
je
repnz
sub
or
mov
adc
xor
mov
mov
jp
loope
sbb
sbb
adc
add
lea
xor
adc
sahf
push
add
jns
stc
inc
and
push
adc
mov
push
inc
hlt
or
out
adc
pop
out
es
add
sbb
xor
or
or
loopne
aad
mov
adc
sub
outs
outs
sbb
gs
(bad)
in
adc
mov
jnp
adc
scas
nop
int3
in
call
stos
stos
cmp
push
repz
(bad)
daa
xchg
ss
sbb
mov
nop
jg
scas
adc
outs
gs
mov
pop
xchg
sbb
imul
(bad)
loope
cmps
out
hlt
push
jp
sub
xchg
jne
dec
das
xchg
xor
push
cld
cdq
daa
inc
(bad)
repnz
or
das
adc
adc
fidiv
jae
fstp
pop
rcl
add
les
in
sahf
pop
adc
cmps
mov
adc
mov
cmps
sbb
and
sbb
bound
lahf
adc
(bad)
sbb
iret
xchg
inc
mov
std
imul
inc
jmp
jmp
shr
xor
jbe
repnz
fidiv
loopne
das
pop
jge
ss
and
ja
aad
lea
rcr
ret
sub
adc
push
mov
cmp
sub
mov
retf
out
into
inc
push
in
ins
bound
xor
int3
aad
imul
inc
mov
xlat
nop
sbb
hlt
lods
mov
dec
sahf
stos
adc
push
fidiv
test
ins
xor
call
out
je
mov
dec
in
aad
aam
repnz
imul
mov
cmp
and
push
xchg
idiv
mov
dec
mov
lods
xchg
add
(bad)
rcr
jbe
aam
push
inc
add
int3
call
mov
mov
add
lock
mov
jno
jnp
mov
sbb
(bad)
sti
jecxz
xchg
pusha
push
push
sti
sbb
xchg
xchg
ins
loop
or
loopne
mov
retf
or
adc
adc
mov
and
adc
adc
popf
cmp
mov
inc
dec
fnstcw
mov
pop
aaa
sbb
sbb
sbb
push
mov
call
fdivr
out
sbb
fdivr
dec
scas
adc
fsubp
outs
xor
adc
push
xor
sub
fwait
movs
das
add
adc
cld
ss
or
mov
pop
inc
daa
mov
sub
adc
ins
out
movs
adc
and
stc
mov
mov
hlt
and
mov
pusha
fdivr
enter
add
xchg
(bad)
out
sbb
xchg
mov
xor
call
push
inc
mov
dec
sub
push
cmp
sbb
sbb
pop
or
adc
cmps
call
jno
ror
sahf
sbb
dec
sti
aad
push
push
xor
or
pop
jmp
cmc
jmp
jb
imul
sahf
jo
iret
in
adc
lahf
dec
retf
out
cdq
sub
sbb
fwait
cmc
stos
lods
jne
xchg
in
mov
sti
sbb
jmp
and
fs
cmp
adc
sbb
push
mov
(bad)
pop
pusha
adc
rcl
hlt
int
xlat
out
adc
daa
adc
push
mov
mov
pushf
sbb
(bad)
add
adc
lahf
inc
retf
mov
adc
inc
and
inc
pop
fsubrp
loop
and
sbb
adc
xlat
push
addr16
loope
sbb
cli
ficom
xchg
push
lods
pop
fs
cs
mov
adc
sbb
retf
cld
mov
sti
dec
adc
push
hlt
mov
add
push
mov
xor
(bad)
out
adc
add
jg
push
mov
xchg
stc
mov
adc
stos
xchg
pop
arpl
jecxz
imul
in
inc
retf
inc
push
rcl
inc
mov
inc
adc
std
iret
mov
call
mov
inc
out
xlat
or
sub
and
adc
add
sub
shr
js
push
jg
cmp
sub
cmp
jbe
adc
or
sbb
and
sar
(bad)
pusha
rcl
out
jp
aam
gs
pushf
adc
ins
aam
xor
sbb
cmp
jns
(bad)
jbe
dec
neg
pushf
jmp
dec
aam
xchg
aam
in
pusha
xchg
cli
mov
or
adc
sbb
mov
clc
xchg
adc
fstp
mov
mov
aas
sbb
push
sbb
adc
mov
hlt
fwait
or
dec
mov
aas
out
out
or
loop
rol
xor
cmps
cmps
push
jmp
js
xchg
cmp
jae
in
jmp
lahf
daa
sub
out
or
ss
mov
xor
jle
popa
out
out
bound
stos
xor
stos
js
jg
jmp
sbb
fisub
mov
and
in
shr
inc
adc
and
add
(bad)
and
add
call
call
fs
xor
push
inc
out
mov
pop
jp
sub
sbb
push
das
mov
sti
cmp
adc
enter
icebp
retf
pop
cmp
aad
inc
sub
add
mov
push
in
fcom
les
jae
ins
add
cmp
out
and
push
repnz
ret
sar
cmps
pop
xchg
jo
adc
call
sbb
jb
cmp
aaa
sbb
push
test
nop
adc
or
adc
gs
xchg
inc
lock
int3
imul
adc
popa
fstp
inc
mov
push
adc
mov
cmp
adc
add
inc
mov
mov
jl
loop
add
sbb
(bad)
stos
repnz
push
jo
test
fdiv
adc
push
adc
push
fimul
nop
(bad)
jl
test
xchg
das
dec
lea
(bad)
sbb
cmps
push
push
xchg
stos
inc
retf
ret
mov
imul
mov
adc
adc
ins
es
imul
xor
mov
and
sub
in
sub
push
ja
mov
call
mov
pop
xor
pop
ret
call
sbb
sub
mov
(bad)
xor
mov
loop
xchg
aaa
adc
lahf
movs
or
pop
jae
inc
ins
fsubr
fnstsw
loopne
pop
pop
retf
scas
call
into
stos
dec
jmp
int3
data16
(bad)
xchg
lahf
(bad)
rcl
xchg
sbb
sub
mov
sbb
xor
cld
fnstsw
dec
jl
jmp
add
fs
aad
mov
lock
iret
cwde
out
(bad)
adc
mov
ficom
data16
mov
mov
rcr
push
pop
retf
in
adc
xor
not
fdivr
xor
or
or
mov
adc
mov
push
sbb
push
dec
adc
cdq
jmp
cmp
repz
ja
adc
mov
jp
pop
lds
mov
mov
popa
push
jno
dec
and
je
or
adc
fcomp
mov
mov
xor
std
pop
lods
xchg
cmp
fisubr
adc
vprotd
and
pop
sub
in
adc
dec
imul
in
fcomp
mov
sbb
dec
lea
sbb
jbe
cmp
fdivr
mov
jne
stc
xchg
data16
movs
loop
add
mov
jae
push
push
mov
mov
push
sbb
pop
(bad)
mov
or
xor
dec
sbb
mov
jne
test
adc
cmps
jge
stos
mov
sub
add
dec
fbld
cmp
mov
ret
add
pop
adc
cmp
lea
jl
adc
mov
adc
pusha
sbb
push
adc
mov
(bad)
fsub
sti
adc
or
cmp
cdq
jo
(bad)
sub
arpl
ror
push
(bad)
fisttp
cmp
stos
adc
mov
imul
push
in
int
les
repnz
push
cmp
adc
imul
jae
push
sub
dec
xchg
push
xlat
xchg
data16
pop
pop
pop
mov
sti
mov
fst
in
adc
sbb
(bad)
repnz
mov
adc
scas
pushf
lds
int3
mov
iret
cmp
lock
mov
mov
jp
dec
or
xchg
sbb
gs
push
inc
jmp
leave
loop
in
ret
push
adc
ins
xchg
and
sbb
shl
(bad)
adc
pop
pusha
or
push
scas
movs
push
xor
push
mov
or
cmps
mov
arpl
inc
fs
cmp
rcl
lahf
seta
adc
sub
fcomp
mov
cdq
movs
lock
cld
adc
outs
xchg
loope
daa
cli
je
sub
lock
mov
(bad)
rol
xor
leave
fmul
jmp
sti
imul
ret
test
sbb
mov
adc
test
cdq
fcomp
pop
adc
fst
fnstsw
push
imul
xchg
clc
dec
adc
dec
ret
and
jecxz
enter
repnz
ror
je
push
out
out
xchg
ret
sbb
ins
ret
(bad)
inc
inc
xchg
hlt
mov
xor
pop
push
dec
jge
hlt
mov
ins
sbb
mov
jmp
mov
call
add
stos
mov
je
fnstsw
mov
aad
outs
or
stos
sar
jecxz
inc
(bad)
loopne
or
add
mov
outs
imul
sbb
cmp
stos
inc
and
or
xchg
aam
ja
fld
dec
cwde
mov
(bad)
push
std
leave
inc
adc
cld
aam
(bad)
jg
clc
pop
or
or
xchg
lea
scas
cmp
mov
enter
clc
out
mov
add
retf
jnp
lahf
jp
mov
jns
mov
cmps
aam
lds
pop
add
mov
rol
jmp
dec
pop
and
mov
sbb
fidiv
enter
xchg
pop
dec
push
sbb
aas
mov
retf
cmp
std
aaa
push
sbb
mov
mov
mov
sbb
(bad)
(bad)
test
sbb
push
cmp
sbb
jle
xchg
dec
jb
xchg
mov
pushf
cmp
or
int3
fdivr
in
(bad)
xor
sbb
std
pop
call
out
enter
cdq
retf
jle
sub
in
pop
int3
inc
aaa
adc
jl
and
movs
outs
in
fst
call
dec
mov
lahf
in
loop
fxch
jno
mov
ror
in
(bad)
int
push
or
adc
fisubr
jmp
add
mov
push
pop
adc
div
rcl
aaa
mov
into
(bad)
outs
inc
and
jnp
cmc
(bad)
push
mov
dec
cld
gs
sbb
xor
cmp
mov
mov
hlt
adc
dec
rol
push
or
xchg
outs
push
inc
fsubr
aam
(bad)
add
out
lds
sti
fild
sub
pop
adc
xor
lahf
or
aaa
pop
push
xor
std
arpl
int3
jg
jae
je
pextrw
scas
mov
xchg
arpl
not
mov
and
sbb
cmc
in
cmps
mov
xchg
shr
pop
add
xor
je
adc
stc
or
pop
jbe
jb
rcl
and
adc
push
push
adc
sub
out
mov
mov
hlt
(bad)
adc
ins
dec
repz
mov
pusha
outs
mov
xchg
out
xor
and
jp
adc
addr16
aas
inc
adc
movs
adc
test
mov
scas
xor
mov
push
jmp
scas
not
inc
scas
loope
mulps
ret
lods
shr
adc
dec
inc
xor
xor
sbb
in
sar
fdivr
xchg
xor
pop
outs
lea
vmovaps
div
xor
adc
cmc
enter
fdiv
inc
and
shr
cs
inc
sbb
out
(bad)
test
es
jmp
das
sub
adc
es
int
adc
jl
arpl
leave
sub
lds
and
aas
xor
out
hlt
enter
sti
test
mov
movs
sub
push
in
movs
mov
inc
js
pusha
sbb
cld
das
and
or
int3
in
mul
xor
jae
lock
xchg
mul
shl
jne
pop
out
pop
sti
mov
pop
xor
push
push
dec
sbb
xchg
stc
push
rcl
out
adc
pop
iret
movs
xchg
sbb
xor
in
xchg
lods
add
jge
hlt
mov
jae
ror
adc
sub
sahf
cmps
cwde
pop
loope
mov
jbe
ins
in
jmp
xchg
popf
shr
int3
arpl
dec
ds
aas
ror
xlat
xchg
push
aaa
inc
movs
add
mov
adc
or
or
pop
push
xor
sub
fdivr
aam
jb
xor
xor
xchg
sbb
mov
jl
pop
inc
cwde
xchg
cmp
xchg
out
add
loop
mov
and
pop
xchg
mov
cmp
jo
sbb
push
movs
nop
adc
push
cmp
ror
mov
cmps
adc
(bad)
je
fldpi
sbb
xchg
icebp
xchg
cdq
fmul
mov
push
(bad)
mov
pusha
sbb
and
xor
or
xor
adc
sbb
ss
adc
mov
adc
add
into
adc
imul
stc
sar
adc
gs
ins
add
mov
pop
pop
jae
sbb
out
push
cmp
xchg
aam
retf
stos
popa
aam
jmp
push
aam
addr16
pop
and
les
xchg
(bad)
xchg
cmp
sar
cmp
(bad)
inc
in
pop
fs
cmp
lock
(bad)
test
jno
sbb
les
jns
xor
call
xchg
mov
loope
mov
retf
push
in
hlt
aam
clc
test
jmp
movs
mov
adc
cmc
jg
mov
mov
dec
das
jp
mov
sbb
push
div
cli
mov
mov
icebp
int3
inc
jmp
into
das
xchg
stc
popa
out
add
add
movs
mov
test
repnz
pushf
mov
jg
lods
sub
cdq
push
or
xchg
and
retf
ror
int
jg
in
push
adc
xchg
pop
repnz
shl
mov
ins
fist
cmp
add
sbb
rcl
call
out
daa
push
mov
push
test
dec
iret
or
add
scas
dec
add
cmp
cmp
das
mov
jb
imul
lds
in
add
push
outs
adc
fsubr
in
push
(bad)
jecxz
movs
in
mov
xchg
adc
mov
cli
or
and
fcmovnb
pop
sub
adc
sar
push
sbb
leave
sti
or
mov
push
(bad)
xor
jmp
aad
scas
pop
jecxz
xchg
(bad)
in
jmp
mov
outs
and
jne
in
adc
push
imul
and
div
in
pop
add
mov
repnz
sbb
fstp
pusha
cld
sbb
fdiv
ficomp
jae
mov
add
push
clc
aad
or
cmps
push
stos
or
rcl
jbe
les
adc
mov
push
cdq
pop
and
push
jb
aaa
add
xchg
into
or
movs
out
or
and
call
pop
clc
mov
fadd
imul
retf
pushf
add
cmp
mov
lahf
mov
pop
outs
sbb
aam
mov
push
adc
dec
add
and
stos
mov
adc
fwait
mov
retf
aam
sub
sbb
xchg
cld
push
inc
jmp
repnz
mov
xchg
pop
pop
lds
push
es
cld
and
aad
popa
adc
inc
div
pop
scas
mov
mov
movs
fwait
pop
sub
cli
adc
xchg
leave
mov
dec
loope
in
sub
inc
xchg
mov
aad
pop
or
pop
call
add
int3
ins
rol
retf
dec
mov
push
je
ins
pop
jno
adc
jmp
test
adc
add
fld
retf
adc
xor
cmp
jnp
adc
dec
cwde
push
and
jecxz
popa
call
inc
test
xor
sbb
int3
adc
add
out
sbb
test
out
aam
jmp
xor
push
jns
and
mov
xor
(bad)
jns
fdivr
lock
mov
ficom
inc
add
lahf
mov
xor
lods
mov
cmp
xchg
and
hlt
fisttp
aas
hlt
sub
pop
lods
add
mov
and
pop
retf
adc
or
out
xor
pop
(bad)
bound
enter
std
mov
js
adc
imul
adc
test
sub
dec
push
addr16
(bad)
and
sub
(bad)
cli
icebp
clc
add
sti
mov
jns
push
ror
ror
push
test
dec
outs
stc
cmp
jmp
mov
push
adc
mov
jmp
inc
xor
xchg
fnstenv
in
mov
pusha
arpl
sbb
cmp
adc
or
outs
out
stos
imul
sub
adc
jmp
rcr
addr16
test
and
and
push
adc
xchg
fst
xchg
xchg
(bad)
mov
inc
clc
pop
adc
ret
in
ja
jp
pop
fidiv
or
cmp
ins
int
cdq
loopne
xlat
or
push
(bad)
adc
lea
and
push
mov
ins
mov
xor
int3
sbb
fsub
data16
cmp
sub
adc
xchg
retf
xlat
int
retf
retf
je
call
aam
cld
retf
inc
xchg
cmps
adc
lock
out
std
cmp
push
test
xchg
adc
leave
jno
mov
test
iret
neg
mov
mov
fist
arpl
xchg
or
xchg
fmul
adc
xchg
retf
nop
adc
js
dec
cwde
mov
xchg
retf
cmp
jmp
fild
dec
not
in
sub
ret
mov
inc
jge
xchg
pop
sbb
ins
call
jge
call
loopne
pop
and
jg
out
test
mov
xchg
sbb
jle
mov
aas
loope
fist
std
pop
out
outs
arpl
mov
xchg
arpl
(bad)
xchg
push
rcl
cwde
test
sbb
xor
aam
sub
pop
in
mov
adc
jmp
rcl
jno
out
(bad)
jmp
push
inc
mov
fbld
hlt
das
add
stos
fdiv
shl
test
in
ret
(bad)
push
mov
je
add
jbe
movs
or
adc
jns
xlat
loopne
fwait
xchg
int3
pop
xchg
retf
push
xchg
(bad)
sub
or
repnz
and
test
sbb
sbb
sub
(bad)
call
push
pop
xchg
fadd
shr
sbb
add
fst
(bad)
cmc
jmp
scas
(bad)
cdq
call
rcr
and
(bad)
adc
mov
push
fld
fs
retf
movs
(bad)
mov
fisub
test
mov
adc
daa
mov
shl
jle
loop
stos
je
sbb
loope
retf
push
imul
aam
mov
push
loope
adc
mov
mov
ins
in
push
ins
sbb
pop
sbb
data16
mov
nop
outs
outs
dec
push
add
inc
pop
fdecstp
jg
push
pop
imul
cld
xchg
jbe
sub
loop
adc
cli
test
fidivr
loope
fadd
gs
ins
clc
cmp
loope
pop
sub
aam
daa
sub
push
push
aaa
jecxz
jnp
adc
sti
adc
std
fcmovnb
adc
cmps
or
clc
pop
adc
aaa
xchg
fsubr
xchg
mov
faddp
pop
mov
loop
sbb
and
stos
stos
jge
out
aam
imul
push
in
fstp
mov
adc
cs
ltr
adc
add
inc
inc
inc
outs
lock
adc
mov
push
in
pop
adc
(bad)
mov
test
xor
add
add
(bad)
aam
and
shl
xor
push
push
mov
cmp
hlt
jno
jb
add
in
push
out
test
pop
push
aaa
out
retf
xor
push
and
or
out
mov
and
and
fnstcw
jecxz
xor
mov
cmp
retf
jecxz
jmp
dec
iret
inc
retf
inc
jb
fld
pop
xor
sbb
xor
test
rol
js
lock
adc
or
sbb
cmc
call
adc
aas
or
sbb
adc
dec
mov
dec
enter
dec
xchg
jnp
sbb
pop
jle
pminub
sti
bound
or
push
scas
(bad)
aam
xlat
jno
lods
data16
jno
(bad)
push
aaa
aam
cmp
add
mov
inc
leave
in
inc
mov
push
inc
push
lock
jl
cmp
fsub
xchg
sbb
retf
fidiv
push
add
leave
push
adc
rcr
sbb
sbb
xchg
fild
ja
mov
sahf
out
outs
pop
inc
xlat
shl
aam
dec
mov
stos
cmp
lods
xor
jmp
and
add
jl
push
add
jle
add
rcl
jp
dec
jnp
pop
xchg
xchg
test
adc
cli
xchg
idiv
add
sbb
lods
ret
add
stc
pop
inc
pop
fcomip
scas
in
test
mov
sub
lods
les
int3
push
pop
into
jmp
addr16
enter
adc
int
mov
sub
gs
adc
push
lds
adc
in
cmps
cmps
push
fs
adc
rol
jp
mov
ffreep
ret
adc
push
(bad)
jne
scas
adc
xlat
and
or
nop
stc
cmp
jne
inc
and
pop
sub
adc
(bad)
js
out
adc
push
out
sub
int3
je
push
popf
movs
sbb
adc
mov
cwde
mov
adc
aas
aam
pop
cli
mov
stos
lods
cmp
jbe
adc
gs
imul
xor
frstor
mov
loopne
lds
jg
xchg
les
das
adc
push
jnp
xchg
push
adc
adc
repnz
inc
dec
xchg
inc
out
imul
neg
jmp
pushf
fnstsw
or
sbb
mov
int3
aam
lds
sti
repz
es
push
xor
lock
lods
scas
sub
inc
adc
aas
and
sahf
jle
fist
cmp
mov
aam
push
int
push
repz
cld
adc
jmp
sub
xchg
lods
xor
out
add
retf
daa
ss
scas
pushf
shl
push
popa
inc
adc
lea
idiv
inc
mov
push
in
sub
mov
or
je
mov
or
push
jmp
push
es
repz
mov
sub
cdq
in
ret
(bad)
cmp
push
pop
int3
xor
fild
dec
enter
xor
pop
cli
mov
sbb
je
das
jp
adc
dec
mov
and
lods
retf
or
cli
rol
adc
rcr
sub
xlat
or
xor
inc
adc
sbb
cmp
mov
cmp
hlt
lea
pop
sbb
je
mov
inc
popf
mov
scas
xchg
adc
mov
mov
mov
les
scas
arpl
adc
fcomp
dec
adc
movs
xor
scas
clc
xchg
pushf
aaa
mov
jge
in
das
fldenv
popa
ja
dec
mov
pop
inc
fucomp
aam
lahf
mov
sub
adc
je
mov
popf
adc
pop
loop
or
call
mov
mov
(bad)
and
bound
call
mov
loopne
push
imul
pop
sbb
adc
shl
aaa
pop
ds
xchg
imul
cli
push
sbb
cmp
outs
gs
hlt
mov
rcr
push
mov
sti
movs
adc
dec
std
mov
ins
push
hlt
pop
iret
mov
cmp
and
mov
loop
ror
mov
adc
bswap
and
in
inc
adc
mov
inc
jle
(bad)
sti
adc
push
xchg
and
inc
adc
lods
or
unpcklps
jb
call
sbb
inc
and
sub
es
movs
xchg
mov
adc
adc
xchg
sbb
add
gs
adc
je
ret
xor
outs
mov
adc
in
adc
push
and
out
jnp
frstor
in
adc
mov
pop
mov
adc
fmulp
and
adc
dec
test
mov
inc
adc
mov
dec
inc
out
or
addps
loopne
jnp
jp
xor
cli
popf
pop
movs
stos
pop
retf
fist
ss
daa
pop
push
and
mov
and
push
dec
add
and
jae
jns
ficom
das
ins
adc
lods
sti
je
adc
sub
test
loop
xchg
and
jbe
or
lea
out
cli
aad
or
inc
mov
leave
xchg
push
rcl
in
or
retf
dec
imul
or
daa
sbb
and
cld
imul
call
mov
fcomp
(bad)
call
jle
not
(bad)
clc
rcl
jns
in
(bad)
sar
fsub
inc
call
pop
ins
nop
test
gs
test
ret
mov
adc
dec
push
arpl
pop
fwait
test
adc
jno
and
into
adc
sbb
push
sbb
fimul
jg
xor
popf
mov
pushf
adc
sbb
aad
add
je
cmp
or
aaa
into
xchg
xor
xor
pop
int3
int
push
shl
call
xchg
sub
xchg
stc
in
add
in
int3
dec
adc
cwde
rcr
rol
nop
add
jle
mov
mov
fxch
lods
and
pop
ror
popa
adc
cmp
inc
std
ficomp
jl
push
ror
aam
retf
mov
dec
(bad)
mov
dec
push
jno
movs
cmp
lock
xchg
or
inc
mov
mov
call
retf
xor
shl
sbb
fld
and
arpl
adc
popa
scas
test
sar
sbb
(bad)
adc
enter
stos
xchg
cmp
push
cld
dec
ins
test
mov
add
rol
push
cs
movs
lods
adc
xor
pop
ins
repz
loop
or
cmp
scas
imul
cmc
or
add
xor
in
push
adc
dec
or
iret
fcom
aam
push
jg
es
cmp
jl
sbb
das
sahf
outs
sbb
mov
in
aad
pop
cmp
push
add
adc
push
or
jecxz
ficom
mov
cwde
adc
in
sub
sbb
call
add
xchg
inc
in
loop
mov
dec
dec
ror
xchg
push
outs
pop
cmp
jl
or
inc
in
jmp
nop
in
gs
xor
loope
dec
sub
mov
retf
adc
fucom
xchg
scas
mov
test
dec
xor
xchg
xchg
and
jp
adc
fistp
xchg
(bad)
ins
sub
xchg
jnp
jmp
je
std
xor
fsubrp
sti
cmp
sbb
or
xor
jmp
scas
pop
aas
and
into
xchg
out
scas
xchg
scas
jle
je
int3
inc
add
aam
aaa
sbb
js
jae
pop
int3
das
mov
jge
inc
xchg
sub
fiadd
or
sbb
loopne
and
pushf
mov
jns
sbb
dec
aam
inc
test
push
cmp
mov
xchg
pushw
in
nop
aam
pop
out
mov
push
adc
out
jmp
ss
aad
ss
addr16
lahf
cmp
cld
aas
mov
mov
adc
sbb
adc
xor
adc
fimul
call
xchg
push
sub
mov
mov
div
or
push
rcr
daa
(bad)
cld
adc
push
jg
rol
add
mov
sbb
fbld
fsub
adc
jb
aaa
mov
sub
xor
and
test
cmp
bound
pop
adc
stos
jbe
dec
fcom
mov
in
out
cmp
adc
jecxz
repnz
test
ror
nop
or
adc
out
push
pushf
push
push
mov
cmps
lds
lods
or
mov
sbb
inc
ficom
add
dec
sub
mov
adc
xchg
cwde
cmp
mov
fld
(bad)
xchg
push
xor
and
jge
lods
or
adc
cli
fdiv
adc
mov
jo
leave
jb
dec
cmps
cmp
pop
adc
(bad)
ds
dec
push
ins
adc
inc
jno
or
jmp
call
pusha
aam
pop
mov
sar
inc
dec
adc
xor
rol
adc
cdq
pushf
in
fmul
inc
adc
(bad)
fidivr
les
clc
sti
adc
fmul
mov
add
adc
adc
imul
cmp
sti
xchg
popf
mov
sbb
pop
xchg
mov
and
jg
xchg
sbb
js
add
xchg
lods
cwde
xor
mov
push
ror
and
xchg
pop
pop
retf
and
push
sub
cmc
mov
mov
(bad)
dec
sbb
(bad)
and
xchg
sub
repnz
(bad)
jne
pushf
adc
loopne
mov
dec
mov
push
or
rcr
adc
std
das
imul
scas
push
cwde
or
adc
sbb
outs
out
inc
sub
std
push
xchg
dec
mov
movs
sbb
inc
shr
push
aas
pop
daa
mov
lea
mov
lods
jne
xchg
mov
dec
push
or
xchg
mov
aad
dec
nop
push
leave
push
jmp
adc
cld
cmp
xchg
pop
aam
(bad)
and
and
cwde
hlt
es
out
lods
push
retf
mov
fstp
mov
retf
movs
loop
inc
mov
aaa
fsub
push
cld
and
gs
inc
lahf
sbb
int3
adc
pushf
dec
add
clc
push
fisttp
(bad)
lods
(bad)
push
adc
(bad)
jg
rcl
jmp
fs
inc
dec
or
test
jmp
inc
inc
scas
or
pop
ror
pop
add
scas
mov
xchg
mov
sbb
out
xchg
inc
or
jg
xlat
pop
dec
push
jp
xor
mov
jo
sbb
mov
add
std
inc
mov
push
push
aas
pop
adc
imul
fadd
or
lahf
dec
sbb
lods
or
dec
xchg
mov
(bad)
imul
add
adc
inc
enter
retf
mov
mov
or
pop
scas
pop
shrd
push
or
jmp
xchg
bound
scas
shl
and
and
push
fcom
dec
or
jne
test
inc
icebp
daa
mov
adc
pop
stc
inc
test
jecxz
or
out
aaa
scas
inc
or
sar
(bad)
arpl
fisubr
dec
sbb
rcr
mov
aas
jae
loope
mov
sbb
inc
xchg
dec
pop
pop
pop
retf
jmp
mov
add
retf
push
mov
fmul
sub
push
loope
retf
in
jno
or
sti
dec
stos
or
cmp
(bad)
push
dec
mov
imul
cld
inc
cmps
je
retf
jge
pushf
or
std
cdq
add
sub
in
mov
fwait
retf
and
add
out
sbb
sub
dec
icebp
call
fs
hlt
stos
mov
cmp
mov
pop
pop
ds
push
jecxz
dec
inc
cwde
js
and
mov
xor
mov
sbb
jmp
(bad)
inc
outs
loope
sbb
fcomip
fcom
imul
mov
repz
cmp
add
mov
jb
test
scas
stos
lea
sbb
inc
(bad)
pop
add
dec
ja
bound
fldenv
push
push
xchg
pop
xchg
mov
add
mov
pop
push
test
or
inc
or
inc
dec
or
push
ins
push
fs
add
aaa
bound
cmc
dec
and
neg
inc
popa
jl
xlat
xchg
sub
cdq
dec
dec
shl
mov
jmp
xor
lds
add
mov
cdq
pop
in
pop
sbb
sbb
xchg
pop
les
mov
retf
call
ret
sub
cmp
sbb
sub
stos
dec
add
popf
or
adc
mov
sub
jl
pop
int
lock
add
mov
(bad)
jp
add
icebp
adc
jge
push
mov
stos
mov
xor
inc
add
fdivr
xor
push
sub
rcl
inc
daa
addr16
out
jb
pop
push
sub
in
adc
(bad)
repz
push
fmul
push
fimul
and
mov
and
stos
mov
jl
jns
out
inc
adc
pop
test
pop
mov
adc
daa
cmp
xchg
xor
out
ss
mov
push
mov
adc
dec
pushf
call
mov
mov
(bad)
aad
sbb
and
sbb
jmp
jne
adc
mov
(bad)
fucomip
in
ds
shr
ja
aad
les
cdq
dec
daa
lock
adc
ror
cmp
cmp
cdq
xor
test
sbb
lea
xchg
pop
test
pop
push
xor
shl
retf
shl
cmps
mov
ret
mov
and
or
hlt
ficom
ja
and
aaa
shl
dec
push
pusha
pop
fsub
retf
adc
fcom
adc
pop
push
lahf
mov
mov
cmp
bound
lahf
cmp
push
aad
mov
pop
xchg
pop
jb
dec
jp
jecxz
jnp
xor
mov
rcl
cdq
and
stos
lock
dec
pop
sbb
imul
popf
dec
mov
dec
icebp
mov
call
push
or
cmps
lods
test
inc
leave
jmp
(bad)
jb
imul
push
clc
repnz
pop
pushf
cmp
dec
(bad)
push
mov
int
xchg
xor
jbe
push
adc
adc
adc
pop
outs
out
stos
jbe
xchg
loop
cld
gs
std
sbb
push
fisubr
sbb
or
xchg
in
cld
push
mov
xor
(bad)
cli
or
aam
mov
adc
shl
cmp
pop
clc
cmp
mov
in
cmp
test
mov
lods
int
pop
adc
lds
xchg
adc
sahf
test
fwait
test
push
mov
push
popf
nop
in
retf
adc
mov
in
or
sbb
push
xchg
xlat
dec
jbe
sbb
aam
mov
pop
adc
mov
movs
loopne
in
ja
cmp
lods
ins
xor
or
lods
xchg
test
mov
push
jno
push
fnsave
sbb
push
pop
nop
dec
outs
frndint
adc
ret
pusha
dec
jb
clc
xor
and
scas
push
inc
mov
outs
push
movs
sbb
fadd
xchg
jmp
je
mov
or
pop
mov
xchg
(bad)
adc
xchg
stos
test
sub
sbb
ins
mov
cmp
es
adc
mov
repz
in
stos
push
xchg
ficomp
and
leave
mov
xchg
fst
cs
hlt
mov
pop
or
outs
or
(bad)
movs
sub
pop
pop
push
or
pushf
cli
hlt
daa
and
je
adc
cwde
aas
es
or
and
xchg
jb
lods
jae
pop
scas
mov
mov
iret
adc
test
icebp
and
loop
xor
mov
dec
sub
out
ss
xchg
sti
addr16
ja
xchg
repnz
aam
dec
call
adc
lods
jl
or
push
or
jecxz
push
mov
adc
sub
icebp
ret
ja
push
fs
ds
fimul
adc
mov
in
xchg
scas
movs
ret
sysenter
push
adc
push
mov
nop
aam
and
jge
popa
lods
das
and
jnp
adc
gs
adc
pop
test
add
xchg
sbb
jle
adc
add
pop
in
test
jl
cmps
clc
js
xchg
cdq
sbb
mov
ins
lods
icebp
pop
mov
movs
jmp
pop
adc
shl
fdivrp
lds
mov
data16
test
(bad)
xchg
test
fld
in
adc
inc
sub
in
add
push
add
adc
seta
iret
adc
xchg
out
mov
test
and
mov
and
ja
fdiv
pop
dec
xchg
call
retf
cwde
mov
push
xor
mov
bnd
jmp
cmps
data16
add
cwde
aad
cmps
xchg
fst
adc
sbb
mov
dec
jle
shl
inc
adc
ret
int3
iret
movs
sti
xchg
adc
cmp
scas
add
(bad)
scas
and
(bad)
and
ins
jns
cmp
aam
sbb
jg
in
fnsave
sbb
pop
pusha
and
js
push
ins
jg
outs
mov
inc
lods
or
das
nop
sar
jmp
es
dec
adc
sbb
not
xor
cmp
pop
mov
sub
shl
arpl
adc
adc
push
push
and
in
test
in
bound
pop
and
fcmovne
mov
mov
out
dec
cs
inc
push
sbb
mov
(bad)
mov
retf
sub
lea
push
ja
cwde
mov
cs
sbb
push
int
mov
adc
retf
loope
adc
aas
add
sub
lods
aam
jb
sbb
rcl
jle
out
jns
pop
push
jae
xchg
loop
in
pop
es
push
sub
pop
in
and
arpl
stc
jns
jo
adc
test
dec
adc
call
cmc
xor
(bad)
adc
ret
and
jmp
out
push
push
fidivr
loopne
add
inc
fwait
pop
inc
int3
mov
movs
jmp
mov
xor
in
sbb
in
push
sbb
imul
mov
sahf
in
push
(bad)
cli
inc
lea
hlt
aad
jecxz
pop
mov
int
aam
inc
arpl
and
mov
adc
aas
dec
movs
push
cs
sbb
shr
mov
mov
push
xchg
iret
bound
adc
je
data16
xor
inc
repnz
mov
retf
dec
jmp
mov
adc
dec
dec
dec
cmp
fs
inc
jb
repz
jmp
lock
sbb
dec
shl
adc
aad
and
add
dec
mov
xor
clc
adc
ss
ins
aad
inc
shr
xor
test
mov
and
out
xchg
test
mov
arpl
(bad)
iret
clc
stos
mov
in
dec
cmp
xor
fmul
pop
mov
repz
pop
xlat
in
lahf
push
ja
gs
retf
stos
or
shl
dec
mov
jg
pop
ret
call
xor
sbb
jecxz
inc
adc
aas
jmp
hlt
int
retf
xor
sub
pop
or
cmps
hlt
gs
(bad)
mov
jmp
sbb
rcl
jl
enter
adc
test
add
add
adc
loop
ret
fcom
mov
adc
xchg
das
mov
test
push
in
fwait
sbb
mov
das
mov
adc
sbb
pop
out
adc
je
rcl
xor
les
and
jmp
or
push
test
out
add
mov
push
mov
lods
push
dec
sbb
push
cmc
rcl
scas
sbb
int
(bad)
jg
(bad)
inc
arpl
fistp
cmp
cmp
lods
ret
pushf
push
std
iret
adc
mov
xor
sbb
dec
add
(bad)
das
jo
ror
mov
fs
in
mov
dec
lock
mov
inc
(bad)
cld
mov
adc
or
sub
icebp
adc
outs
pop
enter
pop
push
int
test
lahf
je
ds
pop
call
push
mov
pop
mov
mov
xor
jno
pop
push
and
cli
jbe
loope
lods
lds
mov
loop
fstp
and
sbb
mov
mov
cmp
adc
or
cld
mov
(bad)
sbb
inc
push
dec
shl
std
scas
test
push
sub
mov
jns
mov
xchg
in
ins
inc
and
add
movs
pop
movs
inc
mov
inc
sub
pusha
pop
cmp
cmp
stc
xchg
repz
lahf
aas
mov
aad
xor
shl
sbb
jg
aam
movs
jecxz
adc
ficom
ins
sbb
xchg
int3
mov
jmp
out
push
jg
add
adc
dec
and
inc
popf
in
(bad)
aas
cmp
mov
shr
inc
lock
enter
lahf
scas
stc
sahf
adc
push
lods
pop
mov
cwde
into
inc
sbb
mov
data16
add
mov
sub
xor
cwde
adc
neg
lods
data16
adc
jmp
adc
sbb
cmp
loope
loope
jmp
jecxz
fdiv
sbb
outs
loop
adc
in
add
dec
in
push
xor
(bad)
sbb
dec
add
fsub
or
xor
jno
js
jb
sbb
into
scas
ds
xchg
adc
cmp
cmp
test
cmc
dec
in
sbb
pop
xor
shr
jae
xchg
shl
cmc
mov
dec
and
mov
retf
ins
add
mov
(bad)
jmp
sbb
std
les
shr
sbb
xchg
loope
in
lea
je
xor
les
int3
sbb
jmp
sub
pop
or
fsub
sbb
les
je
inc
retf
stc
or
mov
or
jmp
inc
mov
adc
mov
push
sub
shl
push
sbb
add
jmp
mov
push
mov
(bad)
popa
jne
loop
jbe
inc
add
dec
outs
in
jae
jno
adc
clc
(bad)
sub
jns
call
pop
mov
push
mov
or
dec
movs
mov
cli
mov
sbb
pushf
aam
lea
push
les
jo
or
and
adc
inc
fld
mov
push
lock
adc
scas
sbb
push
jge
and
push
push
adc
push
aad
imul
inc
cdq
hlt
mov
xor
pusha
movs
cmps
retf
in
sub
outs
faddp
jae
je
fcomp
dec
lahf
sub
dec
sti
jmp
fidiv
aam
xor
xchg
loope
mov
test
inc
sub
mov
add
pop
cs
inc
adc
and
xor
js
adc
xchg
hlt
repnz
pop
loop
fadd
mov
es
cmp
sbb
or
lods
jmp
popa
repnz
xor
loope
sub
xchg
imul
mov
(bad)
call
(bad)
push
stos
and
call
inc
jmp
sbb
call
int3
pop
mov
push
icebp
adc
sub
out
fbstp
popf
in
dec
les
jb
int
popf
pop
mov
sbb
xchg
data16
fld
movs
jae
push
xchg
or
iret
adc
xchg
pop
scas
dec
push
pop
rcl
mov
jbe
adc
inc
xor
not
out
stos
jecxz
out
cld
arpl
push
(bad)
adc
adc
hlt
xor
adc
(bad)
out
pushf
dec
mov
push
call
add
test
lock
fldcw
cmp
and
mov
xor
fadd
out
push
add
and
rcl
sbb
jo
into
jge
fild
fdivr
je
jae
aam
xor
jne
cmps
jle
adc
cwde
bound
jo
xchg
js
mov
xor
adc
pop
add
sbb
or
out
push
fmul
clc
call
or
out
push
adc
xchg
xor
and
adc
pop
ins
popf
or
and
push
call
iret
pop
ins
test
mov
xchg
es
xor
int3
cmps
fstp
adc
ja
dec
cs
sbb
and
out
mov
inc
pop
jae
out
and
xlat
mov
cli
dec
cmp
repz
xchg
cld
cmps
mov
das
push
ret
test
cwde
call
mov
test
push
inc
sbb
xor
pop
adc
push
add
in
aaa
inc
test
into
xor
mov
retf
fimul
fsub
not
or
retf
imul
(bad)
xchg
bound
adc
push
push
sbb
sub
push
inc
push
sub
rcl
cld
adc
cmp
inc
adc
cs
cdq
sbb
call
stc
xchg
aad
les
jb
pop
jae
pusha
iret
sbb
xor
popf
dec
loope
enter
or
mov
add
ret
mov
adc
ud0
ds
hlt
test
pop
mov
cmps
outs
adc
aad
xor
loop
add
mov
adc
inc
pop
repz
push
inc
add
loop
and
push
test
fwait
adc
fsubr
hlt
jl
jmp
int3
cmp
pop
inc
enter
jbe
fadd
or
push
sar
js
mov
rol
xor
jb
jmp
outs
in
xor
mov
add
idiv
fisub
add
data16
mov
xor
inc
icebp
jmp
cmps
pop
inc
lock
int3
test
mov
popf
mov
addr16
xor
or
dec
adc
idiv
mov
cmc
pop
and
mov
aaa
fsub
imul
ja
mov
aam
push
xchg
aaa
bound
enter
lods
jmp
cmp
fst
js
cmp
jb
add
or
pop
sbb
xchg
int
call
cmps
push
adc
fwait
jnp
xor
fldenv
dec
inc
adc
sbb
fcmovbe
in
add
cmp
sti
xchg
sar
push
cmp
pushf
add
sbb
xchg
jae
adc
sbb
movs
jge
and
pop
outs
mov
or
in
cdq
out
sbb
mov
cmp
cld
movs
adc
jg
pop
jmp
mov
aam
in
inc
jo
stc
lock
cdq
add
adc
ja
add
mov
inc
hlt
dec
adc
lds
xchg
aaa
xor
out
sbb
jmp
sbb
push
jge
sti
ins
ficom
xor
inc
add
add
and
xlat
add
stc
mul
rcl
clc
lods
mov
adc
cmp
mov
fidivr
retf
scas
and
push
les
mov
loop
or
je
jmp
ins
jmp
addr16
jns
(bad)
out
(bad)
fst
jg
adc
jp
fidiv
xchg
data16
test
dec
mov
ins
hlt
mov
jns
push
arpl
pop
(bad)
call
xor
outs
adc
sub
lahf
push
mov
and
mov
scas
mov
bound
popa
push
pop
cmp
arpl
and
(bad)
push
mov
jmp
or
mov
nop
pushf
dec
ss
adc
loope
sbb
adc
mov
add
mov
add
and
sbb
call
into
test
sbb
xchg
xchg
pop
je
out
cli
out
xchg
adc
rcl
push
pop
std
jg
inc
test
popa
push
lods
and
pop
add
xor
scas
test
adc
and
ffree
sub
jge
or
sbb
aas
adc
dec
jle
add
and
pop
push
inc
fnstenv
test
sub
retf
stos
out
add
mov
sbb
shl
movs
jl
jbe
xchg
mov
pop
cmp
sub
mov
adc
(bad)
out
mov
push
ss
call
sub
cld
fadd
out
(bad)
mov
clc
loopne
and
sub
sti
retf
loop
or
daa
and
pop
bound
sti
pop
push
repz
fs
bound
test
or
shl
mov
dec
mov
out
call
imul
js
fdivr
dec
cmp
mov
test
or
pop
adc
push
pop
retf
dec
fst
retf
or
fmul
sbb
scas
(bad)
out
mov
adc
jb
pop
out
push
adc
jp
sub
push
and
add
xor
fisubr
repnz
adc
jge
dec
fisubr
mov
adc
cwde
add
pop
loopne
adc
and
sub
outs
jg
pop
push
aad
mov
xchg
adc
sub
lea
call
or
clc
rcl
inc
pop
rcl
jo
sbb
xor
clc
aas
adc
ins
jb
lahf
addr16
jl
adc
sub
mov
in
cmps
cmps
mov
imul
xchg
adc
add
call
adc
hlt
imul
xchg
cmp
sbb
mov
adc
bswap
adc
mov
xchg
test
mov
ss
sahf
call
inc
xchg
fist
xchg
xor
arpl
cmps
and
imul
fdiv
aam
gs
lods
mov
mov
pop
aam
adc
inc
xor
dec
xor
xor
addr16
pop
cmp
pop
pop
int
fcmovu
inc
in
sub
aad
pop
sbb
push
out
fprem1
xchg
pop
add
adc
mov
call
adc
pushf
sbb
mov
xchg
in
outs
push
sti
shl
adc
imul
pusha
cdq
xchg
adc
xlat
push
std
repz
xor
leavew
pop
adc
les
pusha
jo
shl
xchg
outs
add
push
iret
sahf
fs
pop
retf
mov
ss
adc
sub
nop
inc
fdiv
or
mov
std
fld
fcom
rcr
mov
jo
in
xchg
retf
repz
pop
popa
sbb
test
fs
out
pushf
pop
jmp
sti
stos
gs
pop
inc
adc
inc
popf
xchg
inc
inc
add
sbb
out
mov
loop
jmp
repz
stos
sbb
in
movs
rol
js
adc
es
popf
push
lea
adc
inc
lahf
mov
push
push
mov
inc
inc
mov
adc
in
fnstsw
mov
mov
ja
jle
or
retf
jno
neg
nop
xchg
dec
(bad)
cmc
addr16
mov
inc
sbb
fdiv
in
inc
jbe
adc
pop
in
icebp
pop
sbb
adc
xchg
jb
sub
xor
ins
or
jle
pop
sbb
ret
int3
add
dec
or
pop
pop
and
lea
xchg
xor
mov
adc
(bad)
inc
enter
and
std
int3
cmp
shl
inc
mov
int3
and
inc
inc
retf
mov
push
sbb
xor
xchg
push
and
sub
rcl
aas
stos
or
out
add
ja
aam
cld
pop
test
cmp
adc
ret
iret
ror
pusha
push
repnz
(bad)
jmp
mov
movs
imul
dec
adc
inc
xchg
mov
ins
jae
jg
dec
icebp
dec
int3
cs
dec
adc
mov
retf
jae
sbb
and
push
pop
les
retf
shl
clc
call
mov
adc
add
cli
popa
sbb
sbb
movs
mov
inc
adc
into
xchg
jecxz
push
pop
dec
cmp
fcom
adc
adc
push
(bad)
fbstp
sbb
pop
(bad)
mov
test
and
xor
int
mov
xchg
sub
push
adc
push
add
xor
mov
mov
cmp
adc
xchg
(bad)
js
ret
std
sahf
jmp
cdq
mov
add
cld
mov
adc
push
cli
push
cmc
in
pop
sti
dec
mov
loope
lods
or
adc
sahf
inc
push
popf
and
stos
adc
mov
push
push
mov
pop
stc
adc
ja
adc
xor
mov
push
fidivr
loopne
add
or
or
repnz
inc
je
jbe
pop
sbb
bnd
jb
add
pop
scas
sbb
les
clc
les
(bad)
js
idiv
jmp
dec
xlat
scas
fwait
clc
fcomp
test
movs
adc
mov
or
adc
nop
scas
test
sub
and
cmp
dec
test
push
adc
ret
mov
jno
adc
ins
adc
cmps
leave
dec
pop
add
gs
stos
mov
sub
push
and
xchg
sub
push
adc
cmp
adc
and
jns
adc
adc
inc
(bad)
mov
adc
or
lea
inc
cmc
jmp
mov
icebp
adc
add
mov
and
adc
sar
mov
mov
and
stc
pop
pop
dec
dec
xor
rcl
pop
(bad)
lods
fwait
movs
dec
in
jne
lods
rcr
push
adc
into
dec
cmps
xor
dec
jl
out
bound
or
mov
mov
je
inc
or
adc
xchg
std
scas
pusha
cmp
xchg
mov
hlt
fcom
call
adc
aam
push
and
ins
adc
fcomi
xchg
stos
fcom
adc
add
cld
or
xor
adc
in
xchg
cmp
ret
sbb
lahf
neg
cmp
je
pop
sbb
gs
fwait
inc
pushf
std
and
mov
(bad)
into
xlat
aam
mov
int3
xor
(bad)
mov
push
pop
pusha
repz
ja
mov
nop
cmp
repz
and
test
aam
stos
jmp
repnz
adc
pushf
call
pop
repz
jae
loope
pop
add
pop
idiv
push
mov
retf
loop
loope
loop
mov
mov
retf
jno
adc
jmp
pop
adc
mov
ins
cmc
dec
stos
hlt
jo
aad
cmp
pop
jae
retf
mov
cdq
pop
out
push
push
fistp
aaa
aam
aas
and
xchg
dec
das
add
jae
mov
mov
jo
push
jmp
mov
dec
cmp
adc
iret
adc
sbb
int3
cld
and
in
int3
xchg
scas
mov
pop
ins
xchg
sbb
cmp
cmovns
or
and
retf
inc
mov
push
test
dec
jb
movs
hlt
xchg
pop
push
ja
movs
xchg
xchg
shl
sbb
jbe
jp
aaa
imul
js
ss
retf
mov
adc
add
nop
dec
sbb
and
sbb
inc
(bad)
int3
and
mov
out
dec
inc
add
adc
pop
cmp
int3
inc
cmps
xchg
out
add
push
and
mov
xchg
jae
aam
dec
dec
xchg
mov
fnsave
or
jnp
loope
inc
std
pop
hlt
dec
je
dec
mov
(bad)
repz
retf
jp
mov
mov
sbb
or
xchg
push
aam
sub
ja
and
iret
call
pop
test
or
es
mov
pop
inc
cld
and
in
mov
(bad)
cmps
or
outs
xor
(bad)
or
int3
test
cmp
mov
adc
dec
iret
push
movs
arpl
xor
and
xor
jb
inc
inc
lods
lea
lahf
dec
and
cmp
cmps
lods
scas
ret
pushf
(bad)
dec
gs
(bad)
aam
pop
sti
lea
mov
jno
jmp
xchg
mov
cmp
ret
test
dec
pop
sub
scas
mov
or
fs
aam
mov
push
jmp
ror
aam
mov
or
dec
sbb
sbb
hlt
inc
lock
inc
imul
nop
pushf
mov
int3
xchg
in
mov
hlt
add
std
stos
jecxz
pop
sti
aad
jmp
dec
test
inc
retf
push
sbb
cld
push
test
or
in
lea
mov
ret
and
cs
xchg
repnz
lea
aas
push
(bad)
lods
pop
adc
inc
mov
push
jmp
dec
das
push
push
or
mov
test
adc
jns
xchg
sbb
xor
aam
xor
sbb
sub
xlat
and
jmp
adc
adc
rcr
mov
push
je
out
inc
aam
mov
mov
inc
in
not
movs
push
iret
aas
push
pushf
sbb
adc
pop
cmp
gs
stc
sar
adc
inc
sbb
out
inc
xor
test
dec
push
jmp
mov
pop
inc
nop
push
sbb
stc
mov
mov
mov
push
dec
dec
push
mov
or
out
shl
xchg
mov
sub
outs
adc
(bad)
pushf
cmps
aad
mov
inc
and
sub
stos
cmp
stc
mov
hlt
int3
jo
sbb
pop
movs
addr16
nop
fcomip
pop
ret
int3
fst
push
shr
sbb
out
cs
hlt
push
mov
or
mov
inc
xor
push
mov
ins
and
stc
sub
cmp
nop
mov
pop
mov
sbb
pop
adc
rcl
ja
mov
call
add
daa
and
or
je
pop
dec
pop
adc
xor
out
aad
gs
rcl
sub
or
jp
or
cmps
mov
cmp
pop
xchg
dec
inc
in
and
jbe
or
call
out
xchg
clc
mov
mov
movs
xor
test
and
xor
clc
fimul
mov
mov
or
add
xchg
dec
rcl
retf
mov
daa
cs
dec
scas
jmp
test
jl
aad
outs
shl
push
mov
adc
push
fs
adc
jae
out
mov
rol
dec
xchg
push
aas
adc
jmp
int3
shl
sub
adc
fimul
enter
or
in
push
adc
xor
sub
ins
ss
repz
cmp
repz
pop
(bad)
xor
dec
cli
xor
fsubr
dec
push
add
lds
jp
enter
xchg
mov
test
and
aam
sub
retf
cmps
cs
mov
or
sub
and
adc
push
dec
or
jne
mov
push
(bad)
xchg
fdivr
icebp
push
mov
cmp
scas
(bad)
les
push
stos
xchg
xchg
mov
(bad)
out
cdq
cmps
xchg
mov
add
adc
add
test
adc
jecxz
adc
inc
adc
pop
cmp
sub
adc
arpl
adc
cmp
call
mov
ds
jns
xchg
fs
dec
fsub
cwde
jle
mov
dec
arpl
fcom
adc
push
xchg
inc
pop
inc
xor
adc
pop
test
adc
add
(bad)
sar
xor
outs
cmp
hlt
adc
(bad)
pop
xor
das
cs
mov
shr
aam
bound
adc
(bad)
hlt
fwait
mov
aam
xor
dec
mov
adc
pop
out
add
sbb
pop
sbb
mov
push
pop
fdivr
mov
out
jmp
push
sub
sbb
cwde
rcr
jnp
add
cmps
gs
in
adc
push
dec
lods
pushf
pop
sbb
jb
pop
std
outs
mov
cmp
jecxz
mov
mov
std
wrmsr
cdq
pop
lahf
adc
ficom
icebp
xor
cmp
nop
mov
sbb
je
adc
bound
loopne
pop
adc
dec
call
hlt
pop
sahf
cmps
push
sub
xchg
lea
addr16
xchg
dec
mov
or
jmp
out
in
xchg
retf
cmp
adc
cwde
gs
jmp
inc
or
je
push
mov
push
aad
add
rol
xchg
jns
inc
int3
adc
cmp
cmps
leave
adc
ret
imul
out
mov
das
je
add
fmul
repnz
inc
push
or
sbb
xor
xor
addr16
push
sbb
aam
cwde
cmp
pop
jbe
pop
inc
in
and
aam
movs
aad
and
sbb
xchg
bnd
fld
aam
xor
push
retf
hlt
mov
and
test
or
mov
push
prefetcht2
cmp
and
dec
and
aaa
test
jl
mov
ss
adc
push
dec
xchg
ins
pop
aas
in
cmps
es
mov
loop
jmp
fistp
sbb
xor
push
dec
fs
(bad)
rcl
lea
sub
adc
cmp
inc
cld
mov
cmp
shr
mov
in
add
retf
nop
adc
call
adc
or
dec
cmp
adc
fisub
cmp
inc
jle
je
adc
nop
ja
mul
adc
shr
push
fild
adc
sbb
add
into
push
mov
shr
inc
in
mov
adc
mov
jp
(bad)
inc
nop
adc
fadd
adc
stc
xor
adc
into
pop
adc
add
test
rcl
stos
pop
jl
or
enter
pop
rep
mov
ss
(bad)
lahf
pop
in
bound
add
xor
rcr
inc
sub
or
loop
mov
jmp
cmp
sub
mov
push
xchg
adc
pop
mov
fadd
pop
inc
mov
dec
inc
adc
adc
in
pop
xor
call
mov
inc
mov
ja
ins
pop
xor
push
iret
fnstenv
sub
adc
jge
test
pop
and
push
mov
je
sub
clc
leave
inc
sbb
jecxz
cmps
jne
in
and
stc
xor
cld
inc
fcomi
adc
pop
cmp
mov
inc
add
dec
sub
inc
xor
adc
and
out
lds
xchg
sbb
and
mov
mul
imul
(bad)
adc
adc
inc
or
push
hlt
cmp
pop
jecxz
std
in
or
aam
lods
xchg
inc
jo
pop
popf
inc
or
in
sbb
mov
push
pop
xchg
cmp
inc
push
sbb
fucomp
(bad)
cmp
mov
mov
cmp
hlt
xchg
jnp
xor
ins
cmps
retf
icebp
adc
add
pop
out
jle
mov
jl
outs
sbb
push
adc
sub
addr16
adc
xchg
data16
push
push
not
and
inc
out
jl
les
adc
jmp
adc
bswap
movs
aaa
sbb
loopne
scas
ins
sbb
in
mov
push
push
cmp
pop
sbb
int3
lods
stos
pop
gs
jb
xchg
mov
mov
sub
ror
or
mov
jle
and
pop
push
popa
inc
xor
aam
fwait
ds
adc
dec
or
mov
outs
shl
mov
mov
(bad)
(bad)
stos
popa
stc
cmp
movs
fs
mov
mov
push
test
jecxz
and
xor
cwd
imul
add
jne
int3
fisttp
call
adc
cmps
outs
das
pop
jp
std
adc
(bad)
sub
adc
out
jg
addr16
adc
ds
cld
out
in
jmp
add
inc
and
data16
arpl
mov
or
or
mov
(bad)
sub
stos
push
xchg
stc
add
jns
ja
mov
stos
xchg
in
push
cmc
repz
out
nop
mov
jb
pop
aam
and
mov
in
inc
repz
lahf
ins
(bad)
adc
xor
adc
ja
pop
(bad)
je
movs
scas
adc
pusha
sbb
in
jle
dec
adc
fmul
mov
adc
mov
fdiv
push
dec
adc
pop
rcl
imul
or
adc
push
cli
fsub
jno
std
and
mov
xchg
call
lds
sbb
dec
cmps
cmp
cld
xor
(bad)
jl
inc
call
jle
les
xchg
push
in
aad
push
mov
daa
fdiv
sbb
sti
xor
push
pop
xor
sbb
mov
pop
add
rcl
adc
movs
or
retf
cmps
push
adc
cld
lea
ret
jg
ja
inc
mov
inc
or
scas
cmp
or
or
xchg
xchg
adc
jmp
mov
and
adc
inc
ins
rol
inc
and
addr16
inc
xchg
inc
cmp
xlat
cmps
dec
pop
adc
scas
cmp
fdivr
adc
(bad)
jnp
pop
cmps
bound
mov
inc
dec
sbb
inc
shr
adc
repz
push
adc
push
(bad)
pop
jnp
lods
test
dec
sub
inc
pop
or
mov
xchg
adc
mov
add
cmp
jge
out
xor
cdq
pop
xchg
test
mov
and
mov
xlat
ins
data16
jmp
xor
and
add
int3
sub
sbb
add
add
xor
mov
push
scas
cdq
cdq
mov
call
lds
adc
popa
pop
jecxz
out
iret
and
cmp
push
retf
mov
fcomp
add
xor
dec
icebp
sar
xchg
dec
mov
cmp
adc
push
or
or
jp
mov
mov
test
dec
push
cmp
gs
addr16
push
aaa
jecxz
push
clc
push
and
in
mov
dec
mov
mov
popf
jbe
inc
(bad)
call
mov
int3
fisub
popa
adc
ss
in
sub
mov
jmp
push
mov
fld
add
out
push
retf
adc
or
fs
(bad)
dec
sub
mov
mov
aaa
or
les
sbb
xchg
ins
fisub
push
shl
pop
xchg
cmc
push
mov
mov
test
inc
pop
mov
fisub
out
mov
std
mov
int3
aad
and
pop
fistp
xor
jge
adc
add
push
loop
jg
aaa
add
in
in
push
or
adc
pop
adc
xchg
dec
pusha
xor
cmc
push
adc
mov
stos
adc
adc
retf
loopne
adc
jno
jae
jp
lods
push
nop
hlt
push
cmp
dec
jns
mov
leave
ins
push
fistp
push
adc
sub
jmp
stc
je
cmp
inc
(bad)
push
pushf
inc
arpl
jne
in
sbb
inc
push
mov
mov
call
jge
sbb
sti
scas
idiv
lea
and
pop
sbb
int
nop
aam
test
sbb
cld
inc
or
or
add
or
mov
push
pop
dec
aas
sbb
or
and
adc
scas
and
push
sbb
(bad)
or
fnop
jns
adc
out
or
pop
add
xchg
xchg
add
int3
add
push
aam
fcom
imul
adc
sub
jmp
adc
fsubp
inc
sub
aaa
rcr
sub
sub
adc
aaa
and
push
mov
inc
adc
(bad)
jp
sar
imul
rcl
js
or
les
xchg
hlt
fwait
test
rol
aam
add
stos
pusha
inc
sbb
movs
xor
nop
sub
xchg
repz
lods
bound
movs
int3
push
pop
adc
mov
pop
pushf
mov
xor
adc
adc
cmp
push
jb
dec
daa
adc
repz
push
or
dec
aas
int3
inc
or
xchg
mul
xor
je
shl
adc
icebp
xchg
jnp
je
sub
loope
mov
jmp
ret
in
cld
mov
inc
mov
jb
dec
mov
in
enter
pusha
cmc
aaa
xchg
cmp
or
jbe
add
cmps
or
(bad)
(bad)
fsub
adc
xchg
mov
push
or
es
sub
push
ss
push
sbb
loope
or
push
clc
jo
push
cld
cli
jns
je
mov
adc
xor
enter
or
adc
addr16
add
movs
sub
push
and
into
sbb
xchg
outs
je
cmp
cld
lock
cmps
xchg
inc
scas
sbb
loope
adc
sub
std
popf
and
cmp
adc
or
enter
scas
pop
jns
rcl
dec
jne
sbb
int3
mov
jge
retf
pop
jae
test
adc
fadd
lock
inc
sbb
out
xor
mov
ja
or
add
sbb
retf
cmp
xchg
call
popf
mov
jns
pop
nop
popf
xor
and
in
addr16
pop
ja
cld
ss
int3
pop
fs
fdiv
cld
sbb
sub
mov
test
mov
std
mov
nop
out
push
cmp
cmp
loop
mov
dec
dec
inc
mov
and
je
test
jbe
mov
or
mov
inc
dec
arpl
sbb
(bad)
hlt
repnz
call
sahf
pop
xor
and
jmp
mov
or
loope
adc
xor
pop
mov
cmp
pushf
adc
sahf
pop
fwait
mov
push
popf
sbb
cmp
lahf
test
retf
xor
loopne
out
sub
adc
or
rol
imul
clc
add
aaa
xor
push
and
pop
gs
jmp
mov
lahf
call
add
adc
cmp
or
adc
test
xor
pop
push
mov
adc
cdq
lahf
(bad)
enter
xor
call
adc
or
mov
jno
sub
xor
aam
mov
inc
and
mov
adc
inc
retf
xchg
aaa
repnz
mov
out
mov
jbe
js
xchg
mov
push
sets
jmp
mov
and
fidiv
mov
push
xor
iret
fisttp
push
adc
xchg
pop
divps
jmp
lahf
dec
push
repnz
push
ins
pop
dec
lds
jp
sub
sbb
jne
pop
jno
mov
mov
xchg
popa
movs
fdivr
adc
sbb
xor
xchg
out
add
and
jp
adc
(bad)
aad
cmps
lahf
arpl
fist
daa
sbb
cli
inc
fwait
rcl
sub
stos
xchg
inc
shl
pop
out
lahf
adc
shl
(bad)
adc
into
adc
jnp
push
ins
jmp
cmp
adc
adc
push
sbb
stc
and
or
div
je
mov
mov
pop
nop
xchg
push
push
daa
int3
je
and
mul
adc
sbb
cmp
push
adc
cmp
fisubr
adc
fisub
adc
push
mov
mov
xchg
sbb
test
stc
adc
pop
push
rcl
cld
dec
xchg
out
cmps
adc
scas
out
xor
movs
or
popa
mov
enter
je
ss
call
outs
mov
adc
mov
mov
add
bnd
xchg
and
mov
xchg
pop
inc
pop
mov
cli
xchg
adc
mov
add
xchg
mov
jne
adc
(bad)
dec
std
mov
xlat
enter
inc
es
push
adc
clc
adc
adc
inc
inc
loopne
mov
xor
(bad)
mov
xchg
pop
push
cli
fnstsw
loop
xchg
bound
mov
ficom
push
fcompp
inc
aas
hlt
(bad)
hlt
lods
add
dec
rcl
xchg
adc
cmp
push
rcl
ja
hlt
sbb
loop
inc
adc
cld
sbb
fs
and
ror
dec
(bad)
out
fild
xchg
(bad)
js
sbb
jmp
ficom
repz
jp
add
or
adc
je
fwait
xchg
test
outs
jb
mov
adc
retf
push
jnp
push
ds
sbb
add
xor
sar
sbb
pop
(bad)
popa
adc
or
gs
fs
cmps
adc
mov
inc
xchg
and
mov
and
push
xchg
inc
and
out
int3
out
invd
call
or
mov
lea
aam
movs
dec
pop
mov
lods
ret
out
cwde
nop
not
sbb
ss
pop
aam
adc
or
mov
pop
mov
retf
imul
inc
dec
jmp
adc
data16
ins
arpl
fisub
ret
loop
or
adc
shl
adc
sbb
mov
mov
sub
jo
xor
hlt
outs
sahf
add
cmp
jbe
pusha
jmp
fist
inc
cdq
adc
pushf
fs
lods
std
push
jae
xchg
push
icebp
jbe
and
cs
xor
mov
push
mov
sbb
fnstsw
xchg
mov
cmp
dec
adc
sti
ffree
nop
int3
int
sub
push
or
sbb
(bad)
jne
jo
xor
frstor
adc
popa
mov
das
loope
ins
imul
push
adc
sbb
adc
scas
aaa
lahf
jle
adc
mov
(bad)
mov
movs
xor
adc
sub
cmp
push
inc
push
nop
in
aaa
pop
and
lods
mov
in
dec
push
jl
shl
adc
stos
push
jns
mov
jmp
mov
dec
adc
mov
adc
es
cli
and
inc
stos
pop
push
popa
gs
iret
stc
adc
inc
dec
push
enter
sub
cmp
cmps
bound
test
pop
or
push
out
pop
push
push
mov
fistp
repz
xor
jge
or
je
mov
in
xor
and
enter
xchg
sbb
sbb
iret
mov
sbb
rol
add
sbb
arpl
add
jle
xchg
cmp
iret
adc
dec
dec
inc
std
scas
ins
mov
sbb
sbb
in
stos
cmps
fdivr
jno
in
mov
js
jnp
sbb
cmp
mov
aam
stc
cld
add
jbe
sub
movs
sbb
add
int3
pusha
jmp
add
fwait
inc
or
xor
mov
mov
xor
mov
mov
and
dec
in
loopne
mov
add
cmp
daa
push
mov
pop
fsubr
pop
jo
xlat
addr16
and
ss
es
adc
std
rcr
adc
xchg
dec
dec
enter
adc
aaa
bound
std
xlat
push
cld
sub
arpl
in
hlt
out
hlt
sbb
mov
ja
call
push
clc
out
dec
shr
cmps
jmp
jge
adc
call
mov
sub
mov
ret
xor
lock
xchg
mov
adc
outs
pop
add
jecxz
adc
push
in
ins
mov
and
push
adc
lahf
xchg
cmp
adc
aas
(bad)
or
cli
pop
pop
and
sbb
gs
hlt
sbb
sbb
ja
test
pop
adc
sub
popa
adc
jbe
add
inc
push
es
aam
mov
movs
popf
out
hlt
cmps
mov
fs
jcxz
aam
ins
inc
fucomip
push
add
jns
cli
adc
nop
xchg
cmps
xor
in
movs
mul
jnp
adc
push
adc
les
stos
jp
or
xchg
aam
dec
adc
mov
adc
test
sbb
lods
shr
fdiv
dec
mov
and
stos
jge
lock
pop
sub
xchg
push
call
add
and
int3
adc
or
and
ret
out
push
adc
cwde
gs
es
adc
outs
outs
sahf
(bad)
call
inc
add
mov
ins
pusha
mov
jg
adc
out
xchg
je
mov
mov
pop
rcl
push
xchg
rcr
adc
mov
aam
mov
push
shr
push
jge
movs
cld
shl
out
mov
mov
sbb
adc
imul
push
das
push
and
xchg
sbb
into
inc
adc
test
fprem1
adc
fstp
clc
adc
cmps
xchg
hlt
ficom
test
fucomip
je
ror
dec
les
daa
push
(bad)
adc
cwde
xchg
sbb
push
jle
sbb
add
(bad)
mov
pop
mov
arpl
add
add
sub
xchg
adc
retf
add
mov
out
fadd
inc
jle
outs
ins
cmps
sbb
sub
xchg
fwait
test
mov
jnp
repnz
popf
mov
jmp
or
mov
jno
mov
push
adc
pushf
dec
and
and
push
mov
aad
fst
adc
cmp
dec
mov
adc
and
jo
nop
add
(bad)
jb
add
jns
out
or
not
dec
and
aad
mov
xchg
mov
movs
inc
add
push
add
push
mov
(bad)
fist
sub
sbb
adc
cli
and
jge
sbb
mov
(bad)
fcom
jp
je
cmp
sbb
(bad)
adc
dec
dec
sub
xor
out
xchg
xchg
push
(bad)
adc
jb
aam
shl
xchg
inc
jbe
jmp
jmp
lods
pop
mov
add
lds
sbb
sbb
gs
adc
and
cmp
hlt
clc
outs
test
pop
xor
call
jmp
inc
adc
pmullw
inc
push
nop
jae
and
or
fidiv
adc
mov
mov
mov
pop
lods
data16
xchg
inc
cmc
mov
lds
xchg
je
or
sub
into
mov
daa
jg
and
sbb
inc
int3
inc
cmc
ins
pop
inc
adc
adc
cs
in
aad
xor
ficomp
ins
fdiv
inc
adc
jg
cmp
scas
add
push
add
enter
mov
stos
ds
add
adc
loopne
or
mov
adc
repz
dec
pushf
adc
(bad)
fimul
pop
shr
movs
adc
adc
sahf
push
mov
pushf
dec
sbb
jmp
add
daa
jae
ret
js
rcl
mov
push
adc
(bad)
and
and
pushf
ss
int3
neg
push
in
(bad)
cmps
adc
aad
fisub
out
pop
adc
or
lods
push
inc
out
sbb
ja
das
std
adc
aam
mov
shr
cwde
and
push
lods
push
xor
gs
sub
adc
out
sbb
push
fmul
xchg
sbb
pop
mov
cdq
jmp
add
xchg
cmp
call
sub
pop
ja
adc
test
lea
adc
adc
push
pop
leave
aad
in
lods
and
push
push
in
imul
push
dec
xchg
ins
adc
and
mov
adc
sbb
test
mov
jae
xchg
mov
(bad)
or
out
daa
out
jbe
aaa
cmp
adc
sub
ficom
inc
les
mov
rcr
div
out
out
pop
ret
xlat
test
fsubr
lahf
addr16
test
das
jmp
adc
or
push
and
ins
cmp
adc
test
inc
dec
push
int3
retf
pop
jecxz
pop
scas
sbb
cmp
sub
dec
adc
loope
(bad)
rcr
ja
fimul
adc
xchg
jmp
mov
das
test
idiv
sbb
adc
inc
add
fucomp
movs
ds
xor
int3
arpl
xor
dec
lods
inc
imul
sahf
mov
sbb
cdq
xor
push
jmp
adc
jae
xor
pushf
scas
sbb
and
sub
push
dec
add
pushf
nop
mov
add
sbb
adc
inc
and
add
xchg
adc
test
cmp
xchg
sar
aad
pushf
outs
pop
and
popa
mov
and
fcmovbe
aam
add
addr16
mov
ins
aam
cmp
iret
cmp
cmp
scas
jmp
mov
lods
aam
movs
stc
add
adc
pushf
daa
mov
add
inc
and
xor
mov
out
or
test
out
cli
out
push
bound
mov
fcom
and
xchg
pushf
sbb
(bad)
outs
cli
dec
cmc
cwde
push
jne
jmp
adc
and
mov
les
popf
gs
adc
movs
pop
shl
push
xor
push
mov
cwde
dec
fcomp
adc
mov
push
or
push
add
inc
jmp
scas
or
mov
movs
lahf
jl
adc
(bad)
xchg
aam
out
pop
mov
ins
in
or
jb
jg
inc
or
fsubr
or
push
popa
in
pop
adc
pop
sbb
data16
cmp
fstp
cmps
js
jnp
adc
or
mov
sbb
or
inc
pop
fidivr
jae
daa
push
das
in
mov
mov
clc
dec
push
call
inc
aam
in
cmp
add
mov
ret
popf
add
out
js
ds
mov
jecxz
dec
xchg
and
addr16
and
adc
stos
cmps
adc
jmp
lahf
enter
or
mov
push
and
leave
ret
aad
arpl
adc
adc
lods
push
ret
jecxz
or
aas
mov
pop
mov
sbb
mov
pop
jnp
arpl
push
mov
adc
push
les
dec
sub
movs
sub
cmp
jb
xor
ret
fucomip
dec
pushf
in
outs
mov
dec
pop
or
or
xchg
movs
adc
mov
adc
cwde
js
sub
mov
aaa
mov
or
les
pop
pop
je
es
xchg
out
movs
mov
pop
and
jge
xlat
iret
add
aam
push
lea
and
nop
xchg
jns
loop
adc
pushf
mov
cmp
xor
bound
sub
xor
xchg
loope
push
into
dec
cmps
das
mov
shl
cld
(bad)
sbb
mov
and
stos
pop
adc
mov
inc
sbb
dec
das
(bad)
les
jns
aam
inc
inc
movs
cld
add
sub
add
xor
pop
push
arpl
outs
inc
push
pop
push
fidivr
rcl
sub
pop
shl
xchg
call
cmp
sbb
stos
or
jnp
or
aam
test
sub
inc
jmp
int3
or
pop
add
loop
xchg
add
test
jle
pop
pop
enter
int3
cmp
les
pop
pop
stos
jl
push
push
fcomip
cmp
inc
pop
retf
dec
not
(bad)
addr16
jns
in
push
sahf
ins
xor
stos
inc
movs
aam
push
into
adc
and
ss
call
sbb
rol
xchg
or
jmp
test
inc
pop
std
je
adc
pop
jb
push
adc
(bad)
jo
pop
cmp
pop
mov
jbe
cmps
add
push
or
shl
lods
push
enter
in
xchg
push
push
(bad)
xchg
movs
ja
test
out
xchg
data16
lahf
dec
repnz
mov
dec
fcomp
push
icebp
pop
mov
hlt
sub
ror
je
pop
adc
push
call
inc
test
sar
mov
and
xchg
and
xor
dec
es
or
test
inc
aas
push
adc
repz
dec
or
push
sub
lock
test
jmp
popf
mov
call
cmps
add
xchg
movs
mov
sbb
mov
lahf
mov
into
cmps
sar
or
mov
push
jae
sbb
jno
hlt
or
push
mov
cmp
adc
push
adc
imul
adc
in
movs
aam
jae
add
es
fwait
jo
rcr
dec
push
movs
(bad)
cmps
mov
ins
or
sbb
xchg
push
shl
inc
push
mov
jmp
xchg
jl
adc
adc
inc
nop
and
or
cmp
(bad)
xor
adc
ret
mov
pop
adc
and
add
push
cmc
adc
inc
rcl
jmp
add
sub
not
fidivr
mov
push
stc
adc
je
cwde
mov
and
jns
(bad)
ret
push
xchg
movs
fsubr
cmps
sub
cdq
mov
fcmovne
in
jne
push
inc
dec
sub
xor
or
push
adc
pop
sub
jmp
enter
xlat
and
lods
call
jl
cmp
adc
xchg
adc
mov
adc
shr
push
sbb
lock
cmp
jg
(bad)
lahf
shr
xchg
jp
pop
or
adc
addr16
dec
aam
dec
adc
cld
jp
aam
daa
outs
adc
jg
div
(bad)
addr16
inc
add
mov
mov
test
mov
daa
adc
add
pushf
dec
in
aaa
int
icebp
mov
dec
cmps
mov
dec
fbld
rcr
mov
retf
aas
add
pop
cmp
(bad)
int3
or
inc
(bad)
adc
scas
das
mov
dec
fiadd
push
lods
rol
add
dec
inc
xchg
xor
inc
imul
stc
sbb
sbb
xor
mov
stos
jmp
lahf
jnp
lea
js
mov
je
jge
xchg
and
mov
ret
xchg
cmp
ret
fcomp
or
push
and
cmps
push
popf
in
sbb
or
jo
jae
push
xlat
cmps
out
fmul
call
mov
test
adc
add
sub
ror
add
pop
ret
xchg
fwait
movs
dec
pop
retf
mov
sbb
xchg
xchg
fld
out
or
adc
les
dec
and
xchg
sub
mov
xchg
xchg
mov
test
es
cli
xor
fcomp
add
and
dec
pusha
lock
or
test
push
lods
sub
popf
js
pop
mov
jmp
rdmsr
je
add
sti
popf
pop
xchg
es
int3
imul
xor
sbb
xor
retf
pop
mov
mov
ja
daa
loope
adc
or
out
ins
push
xor
mov
pop
(bad)
std
adc
fwait
xchg
and
ins
jno
mov
je
and
dec
iret
push
movs
sub
dec
adc
hlt
jb
inc
mov
or
call
inc
sar
or
test
lock
arpl
adc
mov
addr16
stc
adc
xor
sub
jecxz
aaa
(bad)
sbb
idiv
jno
outs
cmp
movs
fdiv
add
aam
sub
shl
lahf
not
enter
(bad)
fadd
loop
fst
inc
and
jno
push
xchg
cmc
pop
pop
unpcklps
loope
inc
xor
repz
(bad)
mov
and
fnstsw
sub
loop
inc
js
sub
mov
xchg
test
adc
es
cmps
xor
adc
or
add
enter
in
sbb
jmp
mov
or
clc
inc
inc
push
xchg
adc
arpl
nop
call
inc
pop
jmp
imul
pop
adc
mov
inc
push
ins
pop
and
and
data16
retf
in
inc
leave
cmps
scas
push
mov
pop
adc
mov
sbb
into
fcom
std
sbb
xchg
shl
adc
xchg
das
xlat
fisttp
sbb
les
push
aad
push
into
call
sbb
mov
push
adc
adc
fs
sbb
jne
inc
fcmovnbe
sbb
out
movs
in
mov
sbb
aaa
add
sub
and
retf
cmps
push
inc
push
sbb
or
ja
clc
adc
push
dec
aaa
sar
adc
mov
jp
cmp
(bad)
adc
or
bound
aas
loopne
test
outs
daa
pop
in
(bad)
int3
scas
(bad)
sahf
adc
fcomp
xor
rcr
xor
mov
hlt
iret
adc
jl
mov
pop
sbb
mov
and
pop
or
sbb
lahf
out
cs
jnp
cmp
mov
es
imul
or
adc
bound
sbb
retf
cmp
mov
jge
mov
(bad)
cmps
mov
fisttp
je
push
outs
push
mov
xor
leave
repnz
hlt
push
fiadd
inc
fidivr
dec
adc
or
imul
ret
sbb
jp
lahf
mov
mov
dec
add
and
pop
push
test
cmps
and
bound
in
sti
retf
loop
aam
rcr
sub
call
(bad)
mov
mov
mov
jle
cwde
push
adc
xor
xchg
sub
jmp
push
mov
(bad)
lds
cmp
adc
adc
adc
adc
and
lahf
jg
sub
in
sbb
jmp
adc
xchg
jae
and
rol
sub
test
adc
loopne
push
inc
sub
(bad)
ja
addr16
mov
adc
neg
adc
push
aaa
popa
scas
clc
sti
push
add
jo
aam
cmp
ins
enter
adc
and
adc
mov
and
cmps
lahf
retf
and
push
push
inc
xor
das
mov
sub
nop
aam
pushf
mov
out
enter
jmp
pop
mov
cmc
dec
jns
dec
loop
sub
in
pop
xchg
xchg
ror
loopne
hlt
pop
(bad)
sbb
lods
aam
test
sbb
and
(bad)
stos
popfw
mov
sub
xchg
xor
push
imul
sub
add
adc
jnp
xchg
and
xor
jno
push
test
mov
rol
retf
dec
fcom
add
in
arpl
and
xor
and
shl
retf
test
push
nop
je
push
jne
mov
xchg
inc
ins
adc
sahf
add
das
out
cld
imul
loop
fisubr
leave
fisubr
or
jno
push
add
cmps
adc
loopne
je
(bad)
in
sub
cmp
sbb
xchg
cwde
jp
cmp
test
cmp
lahf
les
inc
adc
icebp
shr
and
add
div
sbb
adc
cld
pop
outs
jmp
mov
not
jne
pushf
xor
or
test
pop
in
retf
test
hlt
or
jp
aas
xchg
push
and
nop
add
dec
xchg
ficomp
mov
mov
out
repnz
adc
loope
rcl
mov
xor
pop
bound
push
daa
cmp
rcr
dec
adc
cmps
mov
jp
movs
lea
mov
xchg
inc
push
dec
push
ficomp
ins
test
adc
(bad)
adc
mov
addr16
adc
je
mov
das
nop
repz
push
jl
and
pusha
and
dec
sar
ss
shl
mov
aaa
je
sbb
fs
xchg
sub
push
jae
cmp
xor
sahf
jnp
and
in
lods
fcmovnb
jmp
js
lahf
inc
mov
xchg
sbb
je
fbld
std
and
pop
add
inc
aaa
inc
std
lock
call
lahf
fnstsw
xchg
aad
or
mov
push
mov
std
and
int
dec
test
ds
pop
cs
sub
aad
es
xor
dec
test
imul
and
or
jmp
leave
dec
dec
je
stos
je
xor
push
jmp
movs
mov
(bad)
out
adc
arpl
inc
or
push
xchg
mov
and
(bad)
mov
and
push
loop
cmc
dec
ins
xor
xor
inc
cmp
inc
lods
fisubr
jo
xchg
xor
call
sub
movs
int3
xchg
adc
cli
push
(bad)
push
(bad)
call
ret
int
cmc
int3
in
cdq
xor
adc
xchg
mov
push
and
xor
lock
in
adc
ins
add
aad
inc
jecxz
bnd
add
aam
imul
popf
and
sub
push
int3
xor
popa
jecxz
xor
dec
mov
fldenv
cmps
mov
sub
fcomp
adc
fs
pop
push
jg
outs
cmp
mov
ficomp
adc
stos
popa
sub
rcr
xor
push
add
push
mov
in
lds
adc
or
cmp
not
sub
push
xor
xchg
aaa
adc
push
test
fst
jmp
add
mov
add
retf
jns
je
add
(bad)
xor
xchg
test
loope
movs
add
int3
ins
stos
shl
jg
or
stc
or
(bad)
pop
push
mov
adc
in
scas
jns
adc
scas
jo
sbb
push
jg
into
or
arpl
mov
push
push
adc
and
ret
push
test
mov
jno
test
mov
jnp
out
xlat
push
adc
xchg
mov
call
pop
dec
test
cmp
xor
sbb
pop
jo
xor
mov
cmc
sbb
(bad)
int3
jp
jmp
cld
inc
mov
add
jmp
outs
xor
or
or
mov
adc
push
int3
fimul
xchg
and
aad
add
pop
retf
lods
jno
pop
sahf
push
and
cmp
cld
mov
pop
push
adc
mov
(bad)
imul
in
jbe
scas
aam
cmp
cmp
xor
lods
mov
mov
sub
add
aas
(bad)
ins
sbb
movs
adc
xchg
enter
push
adc
popa
jp
clc
(bad)
mov
pop
adc
jbe
int
int3
cmps
rcr
lods
call
movs
mov
ret
cmp
aam
jg
adc
out
or
aam
xchg
xor
(bad)
call
loop
loopne
push
mov
shl
in
dec
jl
imul
(bad)
xlat
aad
aam
std
adc
dec
scas
mov
ds
hlt
hlt
outs
je
cwde
adc
xchg
mov
imul
addr16
xor
adc
and
and
push
push
sbb
jp
xchg
jnp
enter
xor
mov
mov
add
jo
adc
inc
xchg
push
lock
shl
pop
not
addr16
adc
out
fs
pop
mov
in
mov
mov
and
xchg
das
xchg
dec
sbb
adc
addr16
mov
mov
lea
mov
jmp
jno
outs
imul
add
pop
adc
xlat
sbb
add
stc
adc
and
push
mov
jbe
sbb
gs
adc
mov
xlat
lahf
inc
outs
adc
mov
test
(bad)
mov
dec
cli
and
ins
xchg
adc
adc
inc
test
gs
in
pop
dec
add
je
sub
or
inc
mov
push
jo
repnz
mov
retf
outs
arpl
push
neg
push
hlt
adc
mov
pop
sqrtps
fs
mov
scas
jmp
fs
push
out
mov
repnz
shl
popa
adc
jnp
leave
shl
daa
ss
int
retf
movs
inc
and
mov
sbb
inc
inc
adc
mov
ss
push
cmps
add
call
rcl
repz
adc
retf
rol
ret
push
outs
rcr
jl
cli
jge
dec
push
aad
push
mov
pop
jle
and
data16
cmp
adc
mov
inc
aaa
and
mov
not
push
repz
loop
int
jmp
and
sub
push
mov
dec
ja
scas
inc
and
push
pop
out
jmp
jno
or
in
jmp
call
call
ds
xor
mov
xchg
dec
retf
mov
lock
jge
repz
sahf
loop
adc
dec
cli
push
mov
adc
enter
jb
ss
aam
inc
xor
add
out
loope
movs
mov
adc
pop
xchg
shr
dec
and
adc
push
push
pop
or
(bad)
push
out
xor
adc
inc
add
movs
mov
cli
addr16
test
cld
jne
push
mov
ins
out
mov
dec
mov
fs
adc
push
aas
dec
stc
outs
aad
adc
jmp
int3
push
xor
(bad)
in
jne
std
adc
lods
xor
dec
pop
daa
out
and
rol
into
in
aaa
movs
xor
(bad)
lock
adc
call
icebp
mov
retf
or
lds
xchg
inc
int
jp
stc
sbb
xlat
jg
jge
xor
adc
adc
in
pop
call
push
sub
test
and
ds
inc
aaa
cmps
adc
in
aam
push
or
fcom
pusha
jle
sub
push
push
sbb
adc
cmp
inc
ins
loop
mov
push
xchg
pop
adc
sahf
pop
xchg
ret
pusha
fimul
ret
inc
int3
sub
add
xchg
xchg
cdq
sbb
fsub
push
push
jmp
ds
xchg
xchg
mov
cs
lahf
mov
cmps
push
adc
int3
and
dec
shl
stos
jmp
mov
jg
adc
cmps
stos
(bad)
adc
retf
push
cmp
jg
fwait
cmc
push
in
hlt
retf
cmp
int
and
gs
push
je
addps
mov
jle
adc
test
test
shr
push
push
dec
cmp
call
pushf
sbb
addr16
jg
test
pop
xchg
loop
ins
xchg
push
dec
dec
sbb
int3
mov
mov
sbb
in
es
movs
sti
lahf
in
mov
les
fnstcw
add
push
jl
repnz
jp
test
xor
mov
int
leave
adc
pop
loop
and
mov
outs
mov
push
mov
jmp
idiv
pop
rol
xchg
das
movs
push
fs
shl
adc
ficomp
adc
movs
lea
xor
inc
sub
in
icebp
cmp
outs
pop
xchg
(bad)
xor
sbb
loope
ss
xor
jge
or
pushf
ret
dec
jnp
cmp
shr
(bad)
mov
xchg
dec
xchg
mov
(bad)
shr
dec
xor
lahf
lea
fidivr
hlt
sbb
add
xchg
shl
add
cmp
aad
inc
sti
dec
dec
imul
sbb
(bad)
icebp
or
xchg
cld
fs
loop
ja
cmps
mov
out
jl
clc
mov
test
sbb
ins
mov
xchg
sbb
jmp
inc
xchg
jo
and
inc
or
fidiv
xchg
fs
sbb
daa
xchg
mov
adc
inc
add
test
dec
sbb
shr
int
lods
adc
push
mov
fcom
cdq
dec
push
jl
pop
add
push
pusha
outs
movs
adc
xor
jnp
and
sub
push
mov
adc
or
jb
jae
rcr
and
pop
popa
aas
in
inc
rcl
inc
xchg
push
shl
xchg
cmovae
sub
or
clc
out
cmp
xchg
sahf
or
call
mov
sti
test
std
das
jmp
mov
out
adc
into
mov
adc
das
xchg
int3
mov
xchg
jmp
mov
xlat
adc
mov
xor
adc
xor
or
imul
sti
add
adc
cmp
adc
pop
mov
pop
push
mov
mov
sbb
scas
add
mov
push
retf
es
pop
loope
ins
mov
lds
add
mul
scas
je
fwait
mov
imul
pop
and
xor
pushf
xchg
gs
ss
bound
cmp
or
sbb
cmp
mov
pop
cdq
jnp
and
sti
lock
sub
mov
mov
adc
xchg
cdq
and
js
adc
pushf
add
stos
cs
inc
pusha
xchg
shr
lock
test
ss
cvtps2pd
aaa
adc
xor
dec
sbb
fwait
push
aaa
test
les
dec
adc
jl
retf
dec
mov
or
movs
jle
adc
pop
push
loop
(bad)
popf
xor
call
int
xchg
jne
cld
in
iret
aaa
in
jmp
je
push
mov
repnz
pop
jb
cdq
adc
out
jl
in
mov
clc
div
inc
mov
push
(bad)
push
adc
or
mov
push
das
cs
push
ins
xchg
jae
into
jbe
add
fstp
in
push
lock
adc
inc
ja
mov
dec
hlt
pop
fwait
sti
and
mov
sbb
adc
shl
and
gs
mov
sub
inc
jmp
sbb
sbb
movs
mov
in
push
mov
pop
in
test
daa
mov
fcomp
fwait
gs
or
fisttp
aam
inc
test
or
aaa
add
cmp
dec
mov
ins
sbb
sbb
push
out
mov
mov
inc
hlt
adc
mov
enter
fdivr
jo
xor
jle
inc
add
or
ins
popf
add
push
add
or
cmp
shl
adc
popa
aam
pop
sbb
push
sbb
js
and
mov
je
cs
rol
sbb
out
push
jae
loope
xor
mov
xchg
adc
jae
cmp
sahf
dec
(bad)
mov
cwde
mov
push
fsubp
push
cmp
daa
(bad)
loopne
cmc
fstp
pop
xchg
into
les
leave
imul
push
mov
and
inc
dec
dec
jmp
jmp
aaa
fnsave
lea
sub
mov
xor
jle
mov
and
sar
and
xchg
ins
ds
sub
jmp
sub
addr16
inc
je
fs
stos
cmps
enter
push
imul
push
mov
mov
std
xor
repz
sub
fadd
push
sub
cmp
je
mov
inc
xchg
mov
shl
sbb
sbb
imul
ja
ds
call
adc
je
stc
les
retf
lock
in
dec
mov
call
hlt
pushf
xchg
mov
or
jmp
jns
push
xor
leave
movs
dec
adc
inc
mov
test
jns
and
dec
adc
sub
rol
mov
cmps
ins
cld
xchg
dec
retf
push
in
outs
adc
mov
pop
add
cmp
mov
xor
retf
inc
dec
jmp
pop
es
pop
pop
dec
out
mul
test
push
sbb
pop
sbb
das
jns
rcr
mov
pop
adc
jp
and
fst
cld
es
xchg
mov
sbb
arpl
adc
and
dec
mov
lds
adc
push
in
xchg
mov
jle
xor
das
pop
cmc
cmps
adc
inc
mov
or
xchg
fimul
lods
movs
dec
dec
adc
test
dec
ins
inc
mov
xchg
jmp
dec
pop
inc
cmps
fldcw
sbb
dec
xor
add
sbb
movs
test
and
lds
adc
jb
outs
ins
or
fldenv
adc
sahf
in
and
mov
outs
pop
and
out
out
adc
jg
sub
aaa
das
lods
sub
and
inc
dec
mov
adc
adc
ds
ss
fadd
mov
and
jb
rcl
push
(bad)
cmp
adc
pop
pop
out
add
stos
inc
add
and
mov
xor
clc
inc
fdiv
aas
lock
adc
xor
xchg
pop
xlat
push
loop
jbe
xor
int3
nop
lahf
push
dec
sbb
js
or
or
jg
xchg
mov
pusha
sbb
cmps
call
push
frstor
ins
movs
cld
and
push
mov
xchg
adc
inc
test
push
xor
outs
adc
scas
scas
sbb
pop
dec
movs
adc
in
jg
mov
add
or
retf
xchg
hlt
pop
pop
pop
adc
out
cmp
adc
adc
je
mov
cmp
mov
pop
add
out
pop
dec
sbb
shl
jmp
cmps
cs
lahf
mov
in
dec
repnz
fidiv
(bad)
arpl
cmp
push
inc
xor
int
nop
outs
out
sub
in
(bad)
ficom
movs
jmp
or
and
lods
xchg
clc
fcmovu
pop
mov
mov
div
test
(bad)
in
(bad)
into
xchg
dec
mov
push
loopne
or
mov
adc
xchg
aad
loop
adc
jmp
push
cwde
out
fbld
dec
cli
call
jno
and
sbb
icebp
inc
(bad)
hlt
xchg
ins
pop
pop
cwde
push
pop
xchg
stc
aam
js
ret
jg
cmp
jle
xchg
arpl
xchg
inc
xor
xor
ficom
or
loop
push
add
(bad)
je
das
jmp
jbe
lods
push
push
and
sub
ins
cli
xchg
mov
hlt
inc
push
in
into
and
fistp
jb
lods
adc
repz
sub
pusha
mov
mov
loope
pop
test
dec
xchg
sub
in
add
push
inc
sbb
out
xchg
push
mov
arpl
mov
int
std
cld
inc
jne
adc
add
aad
fnstsw
cld
pop
or
mov
xchg
rol
dec
arpl
in
loop
xchg
ss
repnz
adc
loopne
xchg
fidiv
mov
dec
addr16
lds
mov
iret
mov
(bad)
jno
and
and
mov
aaa
jne
inc
push
sbb
inc
and
fsubp
je
(bad)
retf
loope
xchg
stos
inc
mov
call
daa
mov
fs
cmps
adc
sub
cdq
inc
fwait
addr16
add
retf
(bad)
aas
stos
jae
repz
sub
sbb
lods
dec
sbb
add
push
pop
ror
mov
(bad)
ds
jg
test
sbb
dec
std
mov
or
dec
ret
adc
cmc
icebp
inc
xor
dec
sub
adc
dec
and
int
shl
rol
and
xor
adc
retf
(bad)
ss
mov
popf
movs
str
mov
mov
add
ins
js
repz
push
mov
pop
sti
or
push
mov
neg
add
inc
outs
cwde
imul
sbb
daa
(bad)
and
mov
adc
inc
jae
(bad)
(bad)
xchg
push
push
enter
mov
(bad)
pushf
dec
sbb
mov
adc
int3
movs
cmp
inc
cmp
je
inc
retf
jns
inc
sti
fcomip
adc
ss
dec
and
mov
int3
adc
mov
xor
or
dec
imul
arpl
sbb
nop
out
cs
sbb
mov
in
push
xor
aad
daa
push
pop
call
or
daa
adc
mov
out
or
fs
retf
xchg
pushf
dec
sbb
cs
sub
add
cmp
std
push
sar
mov
push
pushf
cmps
sahf
xchg
test
fadd
add
xchg
test
mov
dec
ins
adc
xor
sti
mov
cmp
xchg
xor
and
pop
jge
dec
in
pop
adc
push
and
jp
and
add
hlt
xchg
in
jmp
inc
pushf
(bad)
outs
jle
cmp
pop
xchg
neg
test
clc
push
call
popa
pop
jmp
adc
fs
jb
push
jmp
cmc
aad
push
mov
push
aam
adc
sub
adc
push
mov
xor
loope
sbb
mov
jge
mov
fld
data16
adc
icebp
sbb
jmp
xchg
int
push
push
add
xor
pop
add
add
dec
or
dec
addr16
ja
push
(bad)
mov
shl
mov
dec
jmp
xor
data16
ds
or
inc
adc
jb
popa
jmp
inc
and
clc
aaa
xor
and
mov
push
adc
adc
pop
dec
adc
inc
les
pop
adc
push
fisub
jbe
ja
add
aam
sub
mov
and
arpl
adc
addr16
ffreep
adc
retfw
push
ins
movs
int
sbb
mov
push
cmp
add
or
ds
and
out
adc
loopne
mov
out
int3
jge
adc
adc
sub
ror
push
adc
iret
jmp
inc
cld
jo
and
or
xor
xor
lahf
test
cmp
bound
and
mov
in
add
push
mov
mov
sbb
cmp
push
xlat
cli
sub
dec
xchg
mov
aas
(bad)
je
xor
pop
stos
popa
test
xchg
aas
enter
les
dec
test
mov
ror
mov
xchg
(bad)
inc
in
vmwrite
jge
jne
sub
push
std
push
xchg
pop
fadd
dec
xor
sar
pop
shr
mov
adc
aam
fnstcw
inc
popf
call
scas
mov
lods
pop
shl
and
adc
pop
in
and
in
xor
xor
mov
xchg
cmp
cmp
fdiv
(bad)
add
pop
scas
xor
pusha
mov
cdq
xchg
sub
jle
xchg
pop
loopne
cmp
shl
mov
fs
js
push
pop
in
je
adc
push
sub
dec
outs
das
je
sub
out
push
sub
addr16
mov
cmp
adc
mov
inc
aam
cmp
mov
add
adc
push
(bad)
push
loop
jae
adc
xor
cmc
xor
les
mov
(bad)
push
add
in
adc
xchg
push
jmp
test
sub
out
mov
(bad)
and
jo
add
cmps
jg
outs
aas
dec
adc
scas
cwde
xchg
scas
pop
push
or
(bad)
mov
jmp
jne
pop
dec
std
cdq
into
xchg
pop
cmc
push
clc
test
xchg
or
pop
dec
and
inc
dec
sbb
test
mov
or
jge
adc
mov
sub
jmp
in
ins
sub
cmps
lea
adc
sbb
push
adc
inc
cmc
int3
xlat
lods
mov
push
jae
shl
enter
xchg
or
adc
add
int
xlat
or
and
cmp
dec
fsubr
inc
ret
sub
inc
jmp
neg
ins
xchg
int
pop
mov
adc
mov
sub
arpl
loope
xchg
pop
stos
lds
idiv
xchg
sbb
mov
mov
mov
(bad)
xchg
retf
shl
je
int3
(bad)
aam
jns
cmps
daa
out
and
push
push
aad
dec
and
lods
in
inc
stos
in
call
mov
retf
push
xchg
mov
loope
jmp
jge
repz
imul
fnstcw
adc
add
sub
mov
test
int
sti
cmp
mov
jg
add
ds
xchg
inc
js
pop
sub
add
add
jp
pop
clc
in
(bad)
push
(bad)
and
cld
ss
mov
and
int3
outs
jg
std
cmps
push
imul
push
cmps
mov
imul
int
dec
and
icebp
mov
les
(bad)
xchg
pop
xchg
push
test
mov
lods
imul
jb
repz
mov
or
push
sbb
fcomip
sub
push
cld
inc
xor
adc
inc
pushf
mov
ins
imul
out
add
mov
mov
pop
repz
mov
(bad)
sub
push
cmp
push
outs
pop
inc
or
dec
dec
aam
dec
add
adc
jnp
test
xor
inc
pop
sub
addr16
mov
adc
inc
pop
rcr
dec
inc
mov
std
loopne
popa
inc
ja
adc
iret
and
dec
jmp
into
xchg
adc
test
stc
sbb
mov
out
jmp
(bad)
adc
pushf
inc
loopne
mov
adc
fcom
neg
bound
shl
(bad)
aad
jge
je
jb
in
clc
retf
(bad)
sahf
stos
in
add
or
jge
adc
loope
lods
cmc
popa
retf
rcl
pop
pop
leave
fnsetpm(287
pop
int3
jl
int3
sub
in
inc
pop
fisttp
test
jae
shl
sahf
jo
sub
adc
sub
sub
test
dec
cmps
xchg
nop
lahf
shl
shr
fs
jnp
push
mov
sub
add
sbb
test
xor
add
inc
rcl
jmp
cmc
rcl
(bad)
jne
loopne
enter
or
push
inc
call
adc
cld
retf
stos
mov
pop
sbb
dec
add
pop
or
gs
into
enter
rol
mov
pop
or
out
cdq
push
stos
push
adc
and
(bad)
jge
out
enter
cmc
inc
call
out
(bad)
or
mov
mov
je
or
lock
test
mov
pop
test
jb
test
dec
jg
pop
adc
stos
xchg
out
ss
out
pop
xchg
adc
cdq
movs
dec
dec
jle
mov
les
cmp
retf
rcr
mov
stos
jg
push
js
repnz
(bad)
and
es
int3
xchg
add
div
jmp
aad
dec
adc
retf
(bad)
stc
adc
add
stos
adc
pop
test
sti
push
bound
add
mov
in
mov
inc
dec
jecxz
cmp
mov
adc
mov
inc
inc
cld
xlat
mov
retf
or
mov
fisttp
in
add
adc
inc
inc
mov
dec
sub
rcl
inc
pushf
std
adc
push
adc
dec
je
out
pop
adc
push
jnp
sub
gs
imul
arpl
cmp
test
je
mov
pop
aam
(bad)
and
les
mov
cmp
movs
xor
enter
int3
loopne
dec
in
fisubr
jo
not
inc
out
(bad)
jmp
jecxz
nop
sbb
ror
cmp
mov
adc
cmp
adc
cmps
shl
outs
push
xor
adc
rcr
xor
adc
xchg
lahf
cmp
push
mov
add
xchg
inc
or
pop
mov
ss
adc
mov
pushf
ret
push
pop
push
adc
cmps
pusha
ins
enter
arpl
adc
popf
das
mov
inc
nop
lods
imul
adc
aas
mov
loopne
inc
adc
adc
cmp
fs
push
std
out
mov
pushf
sbb
les
dec
fnstsw
push
ret
xchg
inc
inc
in
dec
xlat
inc
add
sub
retf
sbb
adc
fdiv
jg
or
sbb
aas
or
sbb
call
rcr
xor
xor
jb
mov
repz
mov
cmp
mov
mov
call
rcr
adc
ins
mov
ss
js
sbb
mov
dec
jmp
mov
jge
push
pop
inc
push
ss
fcomp
jb
(bad)
jmp
rcr
push
aas
fs
jl
inc
mov
mov
fistp
adc
loope
stos
dec
jnp
adc
add
loopne
adc
pop
jo
(bad)
jbe
jns
sbb
call
rcr
push
push
es
cdq
xchg
pop
jmp
mov
ret
adc
sub
sbb
jle
adc
rol
ds
retf
mov
or
push
(bad)
adc
xor
adc
adc
mov
sbb
cli
jns
fistp
xchg
adc
mov
mov
add
mov
mov
xchg
push
(bad)
(bad)
lock
pop
addr16
sub
out
movs
adc
or
sbb
scas
ror
push
lock
mov
js
(bad)
pop
scas
call
inc
dec
sti
fcmovnu
adc
adc
adc
(bad)
ins
mov
mov
addr16
xchg
imul
retf
out
dec
fst
adc
imul
or
push
mov
in
sbb
adc
lods
and
adc
jne
xor
jno
or
ss
in
mov
adc
pop
sub
repnz
push
pop
in
cmp
jo
xchg
xchg
ror
push
shr
mov
adc
jnp
in
push
mov
mov
fldenv
out
mov
xor
gs
and
mov
sub
call
shl
inc
es
fisubr
mov
or
adc
pop
(bad)
repz
call
in
pushf
inc
add
xchg
cwde
and
mov
pop
xchg
xor
call
enter
pusha
cli
mov
adc
xlat
loopne
out
sub
adc
mov
fild
mov
mov
mov
push
sub
rol
jmp
cmp
adc
shl
xchg
mov
(bad)
cmc
adc
cmp
aaa
jmp
xor
enter
sbb
rcl
(bad)
xchg
repz
xor
rcr
aam
mov
and
mov
ins
sbb
inc
fld
iret
push
(bad)
and
adc
xor
push
pop
ds
pop
sub
adc
inc
mov
repnz
add
push
sub
test
enter
loopne
pop
lods
adc
mov
dec
lods
adc
mov
jp
adc
sbb
jae
jmp
aad
pop
out
sbb
push
add
push
aam
and
or
mov
test
sbb
addr16
push
and
xchg
push
cwde
mov
or
sbb
in
xor
stc
loop
adc
jecxz
inc
js
and
cli
sbb
clc
call
mov
cmp
aad
jmp
dec
add
jmp
mov
adc
mov
and
mov
jno
push
retf
popa
mov
adc
jg
shl
mov
stc
aam
jnp
push
(bad)
ds
jmp
loope
cmp
(bad)
cwde
fbstp
loopne
test
xchg
leave
adc
dec
fcomp
clc
push
int3
pop
das
hlt
adc
call
add
or
ror
out
sbb
loope
xor
sbb
int3
pop
and
mov
pop
xchg
bound
cmp
dec
rol
sbb
hlt
mov
jo
clc
cs
cmp
adc
enter
in
fnstenv
test
fnstenv
cli
in
adc
adc
test
dec
sub
cmp
xchg
movs
clc
les
arpl
adc
jmp
pop
xchg
in
xor
les
pushf
in
pop
sti
ror
loop
(bad)
jmp
jbe
stos
add
rcl
fadd
pushf
inc
xor
xor
or
sub
inc
data16
out
in
std
rcl
sbb
gs
adc
xchg
lods
push
mov
mov
xor
loopne
add
cmc
pop
cmp
add
outs
fist
ss
addr16
adc
adc
in
push
cld
les
adc
adc
fidiv
and
and
dec
mov
or
out
add
and
movs
inc
ss
fisubr
pop
cmp
push
out
outs
call
cdq
stos
mov
mov
adc
and
cli
pushf
cli
test
movs
(bad)
imul
jns
sti
and
pop
inc
pop
dec
adc
push
cmps
sbb
xchg
xchg
sub
adc
in
ins
jmp
inc
ds
int3
inc
in
retf
aaa
push
xchg
in
inc
sti
mov
les
and
sbb
lds
or
adc
(bad)
leave
inc
repz
ror
and
push
mov
jp
ds
sbb
push
and
cmps
fld
je
jp
sbb
movs
inc
mov
sbb
scas
fiadd
xor
cmps
sub
arpl
aaa
xchg
bound
push
pop
sbb
in
ins
and
mov
pop
xor
inc
or
out
leave
je
adc
cmp
jmp
pop
in
cmp
mov
cmp
repnz
js
inc
out
push
inc
ds
pop
pop
adc
push
jge
in
push
pop
or
adc
loope
daa
in
adc
aad
cmp
stos
xor
rcr
nop
cmp
aad
sub
int
xor
add
cdq
nop
mov
dec
sub
mov
inc
ret
shl
cmp
ss
iret
icebp
mov
add
sbb
pop
pop
mov
pop
adc
push
sbb
or
adc
pop
rcr
das
cmp
adc
aam
pop
mov
dec
adc
add
dec
adc
adc
xchg
stos
add
push
adc
add
push
adc
xchg
jl
bound
and
(bad)
cld
je
adc
repnz
push
xchg
lahf
fs
dec
mov
sbb
sbb
cwde
ret
popa
ret
and
or
jmp
cli
je
loopne
push
mov
cwde
xchg
mov
adc
scas
dec
inc
push
mov
adc
adc
into
and
dec
in
sbb
and
test
fisubr
xlat
test
loope
mov
in
repnz
inc
jmp
sbb
aam
cs
push
dec
mov
aaa
scas
xchg
retf
int3
or
cmp
fwait
movs
stos
pop
test
mov
push
scas
sub
sbb
cmp
inc
jne
and
jge
cmc
pushf
stos
iret
inc
test
mov
or
sub
push
iret
dec
lods
or
adc
dec
mov
or
xchg
ja
in
pop
and
fs
mov
and
push
xor
es
push
daa
out
cld
lahf
lods
cmps
dec
sbb
ss
test
push
dec
pop
mov
push
fsubrp
mov
ins
adc
cld
fadd
mov
icebp
cdq
add
int
xchg
sbb
stos
pushf
in
jl
bound
aam
adc
mov
add
mov
clc
out
fcom
mov
and
int3
div
push
push
sub
adc
cdq
xchg
pop
fwait
xchg
ficom
scas
jbe
cmp
cmps
jb
ja
cmp
jp
pop
and
in
std
lods
aam
stos
jns
or
push
fist
pop
inc
movs
in
mov
mov
fs
shl
adc
cmc
sub
ja
out
add
add
push
xchg
idiv
xor
dec
inc
repnz
lods
cmc
mov
fsubr
fadd
shr
sub
loopne
mov
(bad)
dec
lods
push
clc
fadd
fdiv
scas
mov
adc
mov
mov
sub
das
out
(bad)
(bad)
jecxz
sbb
cld
enter
in
rol
xchg
ss
jo
popa
in
push
repz
test
cdq
push
(bad)
fld
mov
adc
in
lods
je
add
gs
sub
rcl
pop
fs
fidiv
adc
mov
sub
arpl
xchg
adc
sub
adc
jge
sub
jo
aas
adc
les
retf
jae
fwait
add
or
ins
mov
pop
mov
aaa
pop
popf
and
mov
in
sahf
mov
stos
stos
push
xchg
adc
mov
(bad)
mov
add
in
mov
rol
iret
ja
push
xchg
mov
call
ror
repnz
push
and
inc
adc
call
adc
jae
push
and
mov
aam
jl
out
fidiv
adc
(bad)
loopne
mov
adc
jns
add
call
(bad)
scas
adc
sbb
in
inc
adc
xchg
mov
pop
xor
push
xor
test
imul
es
pop
inc
and
aam
inc
js
inc
xor
sub
jnp
sbb
cld
mov
dec
xor
mov
dec
xchg
out
call
jg
push
push
bound
in
stos
daa
test
sub
repnz
dec
js
hlt
sar
jbe
jge
push
adc
loop
ficom
test
add
push
adc
int3
adc
xlat
xchg
and
cmc
call
cmp
pop
bound
adc
es
sub
jmp
std
test
dec
gs
es
sbb
pushf
adc
push
push
nop
jno
cwde
mov
call
adc
loope
pop
xor
or
adc
push
add
ss
(bad)
or
stos
aam
retf
je
cmovnp
sbb
and
repnz
ins
dec
sub
adc
shr
movs
mov
pop
les
mov
adc
jns
sbb
add
(bad)
aam
es
xchg
sbb
in
and
mov
sub
lea
stos
rcr
in
jne
mov
aam
mov
and
mov
sub
xor
into
(bad)
das
(bad)
cmp
fistp
add
jge
test
pop
sbb
lds
(bad)
ins
gs
and
xor
outs
movs
mov
test
mov
pop
inc
xor
stos
adc
inc
in
(bad)
mov
fadd
dec
adc
mov
pop
sub
mov
cmp
adc
aas
sub
pop
sbb
add
ret
sbb
arpl
push
dec
enter
rol
jo
or
sar
push
cld
cli
clc
jg
cld
and
jne
enter
jbe
ds
pop
sbb
inc
mov
sbb
pop
cs
adc
cmps
cli
add
sti
jp
(bad)
cld
outs
in
test
out
int
les
ror
movs
hlt
cwde
push
push
cmp
xchg
pusha
push
aas
and
adc
xchg
rcl
test
sbb
adc
mov
cmp
jns
inc
adc
in
and
mov
add
(bad)
shr
adc
sbb
iret
enter
movs
(bad)
inc
adc
xchg
jnp
les
adc
sbb
cs
mov
dec
mov
daa
out
or
clc
adc
xchg
adc
sub
cmps
cmp
push
leave
add
bound
inc
pop
in
cmc
xchg
popf
inc
div
mov
sub
fnstenv
add
and
xchg
and
or
aam
cmp
jmp
mov
cmc
cmp
popa
xchg
jmp
les
jp
imul
xor
xchg
adc
lea
mov
cli
pop
outs
aaa
sar
repnz
xchg
out
int3
inc
call
inc
dec
fnstenv
inc
mov
sbb
jo
push
(bad)
push
int3
push
mov
(bad)
sbb
adc
fs
or
mov
cdq
scas
push
jo
das
loopne
inc
add
sti
aam
cmc
add
pop
mov
pop
sbb
sub
pop
xchg
imul
ret
ficom
cmp
loopne
xor
add
ss
mov
aas
loop
aad
push
mov
push
lahf
xor
scas
cmp
and
sub
and
outs
jns
cmp
jl
sar
lock
call
dec
xchg
mov
mov
sar
mov
fcomp
dec
push
(bad)
xchg
dec
mov
push
adc
stos
shl
gs
push
dec
(bad)
ins
push
ja
adc
and
mov
pop
add
cs
or
fldcw
adc
test
jmp
rol
rol
imul
out
and
ds
mov
push
xor
aam
not
aad
je
jge
adc
dec
xor
mov
sub
and
scas
inc
test
mov
mov
ret
dec
add
ins
repz
imul
call
aas
or
movs
sbb
adc
jg
pop
les
gs
push
xlat
xor
xchg
jae
add
adc
dec
aam
xchg
leave
(bad)
icebp
lock
dec
or
loopne
adc
pop
mov
iret
add
inc
movs
xchg
mov
outs
adc
mov
stos
jmp
lea
outs
sbb
out
int
je
mov
ins
push
cmc
in
into
aam
push
mov
test
mov
lods
iret
call
aam
sub
cmps
add
scas
mov
(bad)
fcom
lahf
xchg
sbb
sbb
adc
mov
sub
adc
ror
lods
adc
and
iret
xchg
pop
jecxz
adc
mov
jne
adc
shl
sysret
in
adc
icebp
xchg
imul
js
cmps
out
jmp
stos
sbb
sbb
pop
imul
std
inc
in
and
outs
jp
jmp
xor
or
fs
push
sbb
add
(bad)
sbb
sub
xor
test
test
mov
movs
movs
pop
in
stos
(bad)
jmp
mov
xchg
and
scas
outs
cmps
adc
mov
leave
hlt
icebp
xchg
call
aas
mov
adc
ds
mov
sbb
mov
adc
bound
iret
or
fld
xchg
fisttp
mov
nop
ins
xchg
ins
into
fist
mov
add
out
sbb
jle
adc
sub
jl
test
fld
pop
lahf
loopne
add
addr16
mov
sub
inc
adc
popf
dec
gs
lods
test
and
iret
adc
movs
cld
or
xchg
xor
js
or
push
in
cmp
push
imul
inc
aad
push
xchg
push
fucomip
imul
inc
pop
fsubr
das
retf
or
adc
sbb
imul
mov
(bad)
shl
add
xor
test
adc
das
xor
mov
es
add
aad
data16
std
inc
jg
jns
and
pusha
icebp
(bad)
loop
push
in
push
inc
push
pop
out
repnz
xchg
int
mov
rol
ror
mov
sbb
dec
cmp
xchg
adc
leave
stc
popf
popf
(bad)
shl
loope
shl
lahf
rcr
sbb
jb
sbb
xor
pop
jne
loop
cdq
je
push
push
push
retf
call
ss
(bad)
stos
pop
xchg
push
test
in
fldcw
ins
(bad)
lods
sbb
sbb
push
iret
mov
fistp
retf
sub
add
pushf
fdiv
xchg
repz
adc
mov
pop
add
push
(bad)
clc
cmp
inc
pop
call
sub
mov
test
nop
adc
addr16
pop
or
adc
fstp
loopne
add
jmp
outs
lahf
xor
(bad)
cli
mov
inc
cmp
stos
movs
ret
adc
adc
add
xchg
push
retf
scas
out
xchg
adc
sbb
dec
retf
or
xlat
sbb
dec
in
sbb
je
adc
retf
rcl
cmp
addr16
mov
mov
inc
cmp
loopne
mov
cmps
clc
es
clc
cs
inc
sar
jle
and
in
retf
loopne
shr
or
jp
mov
xor
jl
(bad)
cmp
dec
cs
sub
retf
xor
test
outs
movs
pusha
out
out
dec
adc
cld
push
in
xchg
pop
rcr
in
popa
test
jl
and
lock
mov
pop
mov
clc
adc
lods
fwait
mov
cmps
mov
sbb
daa
std
xchg
lea
dec
lahf
sbb
inc
mov
xchg
jle
lods
inc
(bad)
aam
pop
jmp
mov
neg
add
sbb
and
add
call
pop
dec
sub
sbb
adc
retf
ins
adc
add
cmps
push
pop
mov
repnz
pop
jne
in
hlt
fucom
adc
sar
mov
dec
jle
xor
(bad)
xchg
lods
push
imul
jns
out
or
cld
or
adc
xor
jbe
push
sbb
or
jo
aad
loop
mov
aam
sbb
adc
or
sti
enter
or
inc
retf
retf
sbb
cmp
mov
ror
mov
mov
pop
or
inc
ins
loope
jne
imul
es
call
pop
or
and
xor
and
not
fldenv
stos
retf
and
retf
jmp
xor
sbb
dec
mov
or
mov
add
adc
jle
and
lock
xor
mov
xchg
push
sbb
out
xor
(bad)
push
add
cli
add
inc
or
xchg
mov
stc
push
out
jge
add
adc
addr16
xchg
lds
in
dec
or
in
and
mov
mov
mov
mov
int3
or
mov
jl
pop
movs
adc
sbb
ret
out
out
jg
xchg
pop
sub
mov
es
push
rol
dec
scas
adc
jp
inc
mov
cld
push
hlt
mov
fidivr
xor
or
inc
sub
jno
js
adc
push
inc
mov
adc
lahf
sub
mov
cmp
jns
mov
in
mov
xchg
inc
mov
fiadd
xchg
lahf
xchg
xchg
mov
pusha
push
fild
adc
neg
pop
imul
dec
nop
in
jecxz
pop
inc
mov
je
in
sahf
add
call
daa
fmul
(bad)
adc
xlat
jg
jmp
ror
mov
adc
loop
fcmove
jecxz
stos
adc
cs
mov
out
das
cmp
pop
inc
mov
xor
sbb
mov
pop
test
scas
cmps
xor
jo
stc
sub
and
iret
mov
dec
mov
add
mov
mov
mov
adc
adc
outs
push
sbb
cdq
shl
dec
stos
or
dec
(bad)
jecxz
into
cld
adc
mov
adc
adc
sar
out
xchg
sbb
adc
popf
add
movs
test
sbb
xor
add
xchg
or
jmp
fcomp
sbb
jae
adc
mov
push
xor
mov
inc
mov
mov
adc
call
divps
repz
(bad)
jecxz
sub
je
rcr
cld
dec
adc
jne
cmp
scas
cmp
push
adc
ins
out
mov
pop
jl
test
sub
lea
mov
mov
pop
cmp
adc
push
inc
pop
dec
movs
adc
xchg
mov
dec
es
je
lea
push
xchg
call
add
mov
fadd
jl
pop
ret
nop
dec
sub
sbb
and
cli
pushf
dec
adc
xchg
sub
jb
(bad)
outs
sbb
out
inc
rcr
and
mov
(bad)
fdivr
or
int3
mov
aaa
or
or
es
pop
test
iret
pop
icebp
cld
retf
add
retf
sub
pusha
inc
mov
or
shr
std
mov
xor
fnstenv
mov
inc
jbe
pop
sbb
int3
push
loop
aad
(bad)
push
je
(bad)
dec
inc
retf
loope
(bad)
mov
adc
mov
pop
aaa
sbb
(bad)
inc
xor
call
mov
je
inc
sub
(bad)
pop
(bad)
adc
adc
mov
ret
mov
lods
mov
mov
leave
inc
aaa
mov
loop
cmps
test
mov
inc
add
out
lahf
loope
xor
pop
mov
ins
scas
mov
add
fistp
inc
je
pop
adc
xchg
std
leave
adc
xchg
pusha
inc
mov
int3
mov
add
cld
mov
pop
add
in
jne
mov
xchg
mov
and
push
ss
call
cli
push
inc
repz
adc
adc
fld
or
push
xchg
or
jmp
add
dec
push
pop
sub
xchg
inc
dec
sti
gs
fild
dec
dec
int
rcl
sbb
add
pop
int3
gs
adc
sub
lea
mov
shl
jo
pusha
push
hlt
retf
push
icebp
std
mov
(bad)
and
add
mov
rol
add
or
int3
dec
sbb
arpl
call
mov
pop
or
ins
and
push
sub
sub
cmp
jmp
inc
aas
cld
jnp
inc
addr16
push
out
mov
adc
sub
fist
leave
popa
or
adc
popf
add
nop
call
add
push
scas
xor
dec
lock
movs
int
push
loopne
inc
jae
sub
mov
add
aam
adc
mov
adc
outs
arpl
push
(bad)
fcom
adc
mov
xor
xor
pop
adc
jae
push
rcr
add
push
mov
adc
stos
mov
sub
mov
adc
sti
xor
mov
dec
sub
push
ror
fsub
push
test
xchg
push
test
or
lock
push
and
mov
pushf
inc
idiv
inc
adc
pop
movs
outs
sub
jb
call
and
pop
and
inc
gs
xor
mov
xchg
lock
xor
(bad)
adc
cmps
inc
add
lock
adc
retf
lds
jge
lahf
jae
std
sub
xchg
jno
sbb
jle
ds
inc
adc
arpl
outs
outs
add
adc
xchg
in
xchg
hlt
les
jmp
sbb
cli
add
retf
inc
push
loop
test
retf
ins
mov
bound
ror
dec
xchg
hlt
push
ss
dec
popa
loop
adc
mov
test
repz
fbld
lock
push
jmp
dec
sbb
xlat
stos
pop
inc
rol
adc
jns
sub
das
jmp
pusha
jmp
ficomp
dec
ficom
stos
adc
je
adc
jle
shr
push
add
arpl
sub
bound
and
mov
inc
xlat
imul
or
sub
sar
int3
test
out
(bad)
jmp
out
into
ins
cmps
ret
inc
retf
je
pop
(bad)
ficomp
sbb
std
scas
and
xchg
adc
fisub
repnz
lock
(bad)
jp
add
mov
leave
add
dec
fdiv
xchg
pop
jnp
test
into
jno
ficomp
lods
xchg
mov
push
add
push
(bad)
push
fisub
pop
stos
pop
addr16
jecxz
dec
and
push
and
outs
and
fnstcw
outs
ins
dec
mov
in
add
not
pop
orps
adc
adc
shl
sbb
inc
lods
call
shl
addr16
jmp
lahf
mov
cmp
or
mov
mov
hlt
adc
fwait
lock
pop
dec
cwde
adc
sbb
les
mov
aam
mov
cld
loop
popf
pusha
dec
adc
mov
clc
fst
xchg
mov
loopne
add
sub
stos
dec
jmp
aad
pop
xor
aaa
dec
adc
cwde
inc
mov
pop
sbb
das
ins
xor
adc
mov
hlt
mov
stc
jg
lds
or
arpl
ret
cdq
mov
imul
cmp
xchg
sbb
lea
cld
jecxz
adc
call
hlt
ins
fld
(bad)
or
pop
in
mov
retf
aam
inc
jecxz
adc
or
cmp
out
ficomp
in
pop
or
movs
int3
pop
scas
adc
push
pop
retf
xchg
dec
(bad)
mov
in
mov
ret
pop
xchg
dec
xchg
rcr
loop
xchg
or
fsub
call
outs
stc
adc
popa
sahf
pop
mov
int
adc
ja
stos
xchg
dec
ds
adc
cmp
nop
call
add
dec
(bad)
fdivp
je
loop
test
push
cmp
movs
aad
das
mov
inc
or
jmp
data16
in
mov
push
sbb
clc
rcr
pop
adc
xchg
sbb
adc
in
xor
sub
add
xchg
call
mov
push
arpl
mov
adc
aad
ins
hlt
jl
jg
xor
dec
movs
sbb
cmps
jmp
xor
or
dec
daa
rcl
in
aad
in
sub
xchg
mov
icebp
aam
shl
sbb
mov
stos
jnp
call
fwait
mov
cmp
bound
outs
mov
(bad)
scas
pop
inc
or
aaa
cmps
xchg
sub
pusha
test
cli
pop
mov
add
into
cmp
or
stc
int3
push
fdivr
push
pop
or
push
neg
mov
ror
add
and
jecxz
dec
push
std
adc
mov
cmp
dec
jl
arpl
cmp
adc
jg
xor
cmps
cmps
retf
sbb
jge
or
sahf
xchg
iret
push
cs
(bad)
aam
pop
(bad)
mov
push
and
pop
cmp
adc
pop
ds
jecxz
xchg
mov
enter
xor
stos
retf
adc
add
xchg
mov
out
in
ret
imul
inc
mov
ja
inc
pop
fld
adc
iret
mov
fcom
sbb
pushf
adc
psllw
pop
idiv
xchg
and
adc
jmp
jbe
xchg
mov
adc
pusha
aam
or
mov
sti
loop
and
push
pushf
cs
fs
adc
xchg
or
or
ret
xor
enter
and
adc
or
ss
mov
stc
je
(bad)
adc
xor
outs
lock
mov
out
mov
push
in
aam
outs
push
sub
test
xor
aaa
dec
out
dec
inc
cld
adc
push
mov
sar
jo
stc
or
aam
inc
cmp
xor
pop
jg
pop
inc
ret
jno
scas
or
ficomp
or
stos
push
je
leave
out
adc
imul
sti
jne
sub
dec
out
fdivp
dec
adc
out
addr16
mov
xchg
test
jmp
or
(bad)
dec
or
sbb
das
cli
and
hlt
into
adc
(bad)
out
xor
pop
jb
lods
inc
je
dec
lea
dec
icebp
cli
test
jbe
jnp
dec
idiv
mov
sti
lods
cld
adc
or
or
bound
mov
and
imul
push
lods
(bad)
adc
lods
adc
stos
jmp
in
pop
dec
inc
push
fist
push
xchg
imul
adc
mov
int3
xchg
push
xchg
lock
mov
or
push
cmp
sbb
hlt
les
xor
mov
pop
or
rcl
loop
retf
ret
lahf
mov
inc
test
add
fsubr
repnz
movs
sbb
dec
push
sbb
xchg
jae
adc
cmp
aam
popf
mov
movs
inc
adc
fistp
mov
lds
adc
cmp
call
cs
mov
cld
imul
push
call
js
push
sub
cmp
jne
sbb
xchg
or
fcomi
push
mov
or
adc
sahf
les
inc
push
test
add
push
push
or
jle
inc
sbb
mov
dec
lahf
add
test
data16
fs
pop
cmp
cdq
xchg
popa
or
jecxz
jmp
sub
(bad)
repnz
adc
sbb
rcr
hlt
leave
inc
in
adc
xchg
inc
cmp
ins
outs
test
and
inc
out
aam
pop
aas
mov
push
adc
leave
adc
xor
iret
xchg
shl
mov
push
test
data16
mov
fiadd
test
in
inc
movs
xchg
adc
mov
fidiv
adc
push
xor
sbb
xchg
mov
cs
hlt
test
sbb
pop
lods
adc
scas
adc
fild
xchg
mov
imul
jb
inc
push
mov
push
frstpm(287
and
ss
out
fmul
adc
fild
inc
add
scas
lahf
and
dec
and
fild
jbe
pop
enter
adc
das
std
iret
xchg
xchg
and
push
push
jno
pop
sbb
fild
adc
cdq
cmp
sti
adc
mov
sbb
dec
daa
and
repnz
ins
fst
clc
add
mov
jb
sbb
xchg
push
adc
movs
pop
in
fld
sub
jmp
les
adc
loope
fmul
adc
adc
loop
dec
jle
data16
retf
pop
or
jl
adc
and
xor
and
push
sub
mov
fisub
(bad)
pop
sbb
dec
xor
jl
push
sar
in
addr16
push
les
test
dec
xor
inc
dec
ss
adc
jbe
push
outs
in
mov
scas
aas
sbb
aad
imul
xchg
cmp
(bad)
sub
out
call
sbb
ret
jmp
xor
push
ins
or
or
or
addr16
mov
push
inc
xchg
cmp
retf
ret
push
cmps
or
pop
imul
dec
popa
xor
pusha
nop
and
or
adc
and
mov
lods
in
stos
call
adc
test
mov
int3
call
inc
test
je
cli
ja
test
lahf
repnz
outs
out
out
movs
or
adc
jb
jecxz
or
mov
pop
pop
fstp
iret
in
popf
mov
sbb
(bad)
out
fcmovne
mov
push
retf
sub
xlat
clc
push
cmp
in
sti
(bad)
push
je
std
push
pop
std
in
jbe
jo
sbb
pop
mov
mov
push
and
int
fild
push
out
fidiv
aam
(bad)
jnp
shl
jnp
out
fdivr
xchg
retf
or
ret
mov
add
jmp
mov
sahf
ror
neg
push
mov
push
ss
repz
add
mov
pop
cmp
push
mov
sbb
dec
aaa
sbb
and
aam
jg
dec
add
lea
mov
add
loop
dec
add
inc
sti
xchg
inc
lock
inc
mov
pop
add
jp
xor
je
mov
out
pop
retf
mov
sbb
mov
push
aaa
mov
js
mov
mov
aas
in
(bad)
mov
and
mov
int3
jbe
inc
out
fcomp
pop
mov
shl
scas
or
push
jb
popa
dec
adc
cmp
int3
mov
adc
dec
mov
aam
xchg
fsubr
dec
in
(bad)
or
dec
retf
adc
cmp
jmp
dec
dec
loope
push
pop
mov
jo
pop
stos
ret
sbb
mov
fisubr
ds
push
or
adc
jp
cmp
cld
ror
adc
sar
in
adc
pop
push
mov
adc
enter
sbb
test
ds
into
inc
push
pop
lahf
sub
aad
adc
xor
retf
push
mov
adc
mov
dec
lods
push
fcom
ror
cmps
xchg
adc
retf
adc
shl
mul
in
ds
pop
pop
mov
sbb
mov
sar
cdq
imul
push
jp
xor
sti
jecxz
pop
mov
xor
cmp
jb
jno
out
adc
popf
jnp
cmp
call
adc
jecxz
push
lahf
not
pop
adc
jae
jmp
pop
data16
fmul
repnz
stc
pmulhw
inc
jle
arpl
adc
add
jge
ss
add
dec
enter
xchg
lods
pop
sub
xor
call
mov
sbb
hlt
lahf
movs
mov
rcl
mov
xchg
add
dec
sbb
add
retf
adc
adc
or
out
inc
scas
nop
addr16
cmp
and
mov
jae
sbb
movs
in
xor
mov
adc
sbb
idiv
push
adc
cmp
lds
daa
mov
xor
or
imul
in
aas
push
fnstcw
sub
into
push
jb
xchg
jns
pushf
inc
xor
rcr
sbb
leavew
lods
pop
mov
icebp
xchg
aad
pop
inc
cwde
lock
adc
xor
or
xchg
sub
jmp
test
ins
push
inc
clc
imul
shl
loopne
lds
xor
xor
pop
std
ret
cmp
call
lock
dec
in
sbb
pop
or
xchg
out
xrelease
pop
sub
push
adc
test
mov
(bad)
enter
xchg
xor
cmp
jae
xor
dec
sbb
retf
mov
push
cld
fwait
dec
adc
mov
pop
adc
call
sub
mov
mov
sbb
test
xchg
retf
pop
in
or
adc
mov
loop
xchg
data16
repz
cli
sbb
pop
or
adc
push
cmp
adc
aaa
iret
enter
or
xor
loope
mov
pop
mov
outs
je
stc
and
test
add
adc
mov
sbb
jl
or
loop
push
sub
out
ror
adc
retf
(bad)
test
adc
or
fidivr
ds
fucomi
test
lods
cli
adc
out
ja
lds
mov
push
hlt
cmc
movs
jns
js
xlat
sar
sbb
xchg
dec
or
jbe
pop
push
lahf
jb
shr
mov
sub
fild
aaa
repnz
cmc
push
adc
or
xor
cmp
xchg
xchg
cmp
hlt
add
aad
inc
xchg
loope
jmp
dec
sahf
and
in
(bad)
mov
push
push
xchg
jge
dec
jns
or
jl
bound
add
retf
(bad)
mov
jno
cli
or
sbb
and
cmc
mov
lods
out
xchg
pop
pop
sbb
or
cmp
mov
mov
out
and
mov
cmp
imul
(bad)
fucomp
cmp
(bad)
out
inc
dec
fcomip
enter
imul
adc
cmp
outs
sub
mov
add
loope
inc
pop
or
or
in
mov
adc
sbb
hlt
pop
mov
xchg
inc
or
fsub
enter
mov
in
lds
inc
adc
out
sti
adc
jne
adc
mov
ror
iret
adc
pop
fldenv
in
mov
imul
push
ds
out
xchg
fldenv
sbb
sbb
push
aam
add
inc
data16
or
mov
out
scas
jg
test
mov
or
xor
jl
and
sbb
xor
sbb
dec
pop
popa
jno
nop
adc
mov
or
mov
gs
jno
mov
rol
mov
jae
aam
dec
sub
inc
adc
dec
shl
adc
or
push
sbb
adc
dec
inc
ins
push
xor
sub
mov
push
dec
iret
cmps
movs
lock
jp
xor
sbb
adc
in
stos
sar
pop
add
jmp
cmps
lock
mov
or
push
addr16
dec
push
(bad)
cmp
dec
sub
rcr
jbe
or
mov
push
cmc
loop
movs
mov
sbb
lock
popf
xchg
adc
adc
and
sbb
pushf
fdiv
jmp
xchg
mov
sub
call
call
stos
jl
push
(bad)
push
mov
addr16
ret
les
push
aaa
jns
mov
sbb
mov
loop
add
idiv
pop
jnp
and
jge
xchg
pop
hlt
push
or
shl
dec
mov
mov
je
pop
shr
push
mov
sbb
arpl
or
cmps
cli
sti
aam
cmp
mov
push
adc
test
add
imul
movs
int
int3
push
sub
adc
and
pop
push
sbb
cmps
sbb
(bad)
(bad)
scas
pop
push
and
mov
mov
push
sub
adc
fucomip
push
pop
xchg
inc
shl
ja
shl
xchg
adc
sbb
rcl
iret
sub
jb
imul
(bad)
adc
ins
pop
in
pop
loope
xor
and
dec
scas
jnp
test
retf
fnsave
popf
push
sub
add
xchg
gs
adc
es
push
or
or
sbb
sbb
(bad)
idiv
out
push
sub
sub
pop
(bad)
and
sbb
push
mov
cwde
jne
xchg
test
adc
or
mov
and
pop
mov
addr16
adc
dec
aas
leave
fisub
adc
push
lahf
pop
sbb
add
mov
push
jle
cmp
movs
sub
fild
lods
fisttp
out
xor
imul
outs
imul
xchg
push
sar
js
sbb
addr16
xor
xchg
ficomp
adc
mov
cmp
icebp
pushf
adc
loopne
or
adc
test
sbb
adc
loope
(bad)
fucomip
jne
adc
pop
aas
fld
xchg
xor
xor
push
sub
xlat
popf
stc
mov
and
repnz
jmp
mov
xchg
push
inc
mov
xchg
xlat
aas
je
push
sub
cmc
pop
add
std
mov
std
cmp
fisttp
jae
std
xor
xor
sbb
inc
nop
sar
mov
xor
out
std
(bad)
imul
je
retf
dec
push
ret
jecxz
push
jo
cmp
jbe
imul
jmp
jge
fsubr
fisttp
inc
push
sbb
push
adc
xchg
xlat
out
sub
push
cs
cwde
idiv
(bad)
mov
stc
adc
pop
mov
lock
sub
adc
mov
test
sbb
xor
cwde
test
mov
mov
lock
mov
push
adc
in
call
adc
daa
lock
cs
lds
push
out
mov
mov
repz
lods
sahf
pop
sbb
xchg
pop
mov
pop
call
aad
push
jmp
dec
jecxz
mov
push
mov
call
call
push
out
mov
add
or
push
push
data16
inc
and
call
test
test
sbb
out
xchg
xchg
push
cmp
cmp
cmp
int
jge
adc
aas
loopne
adc
pop
cmp
setp
push
push
push
outs
fcom
add
int
add
xor
xor
jbe
sar
stc
in
jge
and
jg
cmps
sbb
fdivr
les
jmp
or
imul
in
push
xor
jp
dec
sbb
adc
enter
add
adc
lahf
pushf
xor
push
aam
sub
mov
mov
imul
or
retf
sbb
sbb
loopne
jg
sahf
(bad)
push
adc
icebp
in
inc
jb
push
pop
jge
adc
pop
pop
rcl
ins
mov
inc
or
and
dec
repnz
adc
xor
retf
push
pusha
cmps
rcr
fimul
popf
or
adc
add
inc
std
sub
leave
push
jns
or
cmp
or
outs
adc
aam
or
add
add
jle
ror
adc
or
stos
sti
lea
leave
push
xchg
inc
dec
nop
lods
movs
and
mov
push
bound
arpl
xlat
jne
adc
cmp
xchg
sbb
and
or
dec
dec
jg
mov
sbb
pusha
jmp
mov
sub
mov
aad
(bad)
jmp
and
stc
stos
xor
xor
xor
shr
push
imul
sub
mov
sbb
adc
int3
ins
and
cld
ja
adc
cmp
mov
adc
jge
emms
xlat
(bad)
mov
fs
pop
ror
sbb
jmp
mov
mov
(bad)
jnp
xchg
rcl
inc
xchg
mov
pop
adc
fisttp
fmul
push
sbb
and
ins
push
repz
mov
pop
not
sahf
mov
sub
add
add
adc
fadd
or
sbb
jns
xchg
add
jl
and
es
enter
mov
aam
jnp
dec
adc
xchg
into
(bad)
cld
fwait
add
mov
add
lods
pop
inc
mov
push
sub
adc
fxch
xor
lea
mov
ret
adc
xchg
mov
scas
sub
push
inc
or
mov
fmul
and
test
je
mov
int
sbb
les
cli
pop
sbb
add
mov
sbb
sub
xchg
ins
rcl
in
push
mov
push
xor
adc
and
sbb
mov
sti
lock
and
ins
cmps
add
loopne
adc
sbb
push
push
test
lahf
aas
push
in
fild
call
jb
mov
(bad)
or
imul
cld
mov
pop
jge
icebp
lds
adc
inc
push
cmc
int3
stos
mov
xchg
inc
sbb
adc
adc
push
inc
xchg
ds
and
adc
pop
and
adc
mov
jne
cld
(bad)
sahf
jnp
adc
push
fnstsw
mov
xlat
add
loop
sub
sbb
inc
into
adc
shr
push
fsub
cmp
add
shl
adc
dec
add
or
(bad)
push
out
loop
and
jle
jg
clc
push
in
dec
jne
scas
mov
sbb
sub
pop
cdq
xchg
cmp
add
ins
add
les
fs
outs
jo
shl
adc
inc
pushf
or
(bad)
jge
inc
adc
and
inc
fnstsw
mov
lock
addr16
loopne
(bad)
xor
es
jo
adc
aaa
and
fild
pop
inc
ret
ret
xchg
adc
inc
inc
pop
mov
adc
test
sbb
dec
int3
aas
mov
(bad)
xor
(bad)
xchg
ins
pushf
icebp
cmps
cmp
pop
sbb
adc
or
adc
sbb
lods
dec
out
fs
in
dec
mov
pop
clc
pushf
stc
cli
inc
adc
sub
fcom
call
jg
mov
jecxz
pushf
lds
ret
imul
sub
out
jmp
fist
fcmovnu
push
or
adc
add
sbb
test
adc
pop
cli
fidivr
mul
add
sub
jp
adc
pop
mov
sbb
lds
pop
call
and
add
push
popf
pop
add
lods
pop
adc
movs
sbb
fnstcw
add
addr16
retf
mov
dec
cmp
scas
in
ins
add
cld
loop
fsubr
dec
dec
jo
stos
push
cmp
pop
or
or
mov
mov
cmp
sti
xchg
je
(bad)
rcr
movs
popf
adc
push
sbb
mov
xchg
jb
dec
or
push
aaa
das
ja
lock
xchg
out
xchg
mov
dec
inc
das
in
popa
adc
test
shr
xor
xchg
clc
inc
std
inc
leave
mov
push
push
jo
push
stc
fcmovne
movs
dec
gs
scas
mov
lods
pop
xor
fist
test
xchg
div
test
movs
cmp
scas
unpcklps
and
out
sbb
rol
(bad)
sbb
in
adc
aam
ins
mov
jle
test
pop
cmp
fild
popa
mov
movs
dec
inc
adc
dec
sar
outs
aad
cmp
xor
call
pop
and
mov
aad
(bad)
fsubrp
out
lds
pop
int
and
xchg
(bad)
cmp
xor
lock
mov
add
or
xor
adc
adc
and
in
pop
ret
sub
cmp
pop
sub
sub
stc
mov
gs
and
mov
fdivr
ss
out
test
cdq
popa
in
lahf
mov
add
push
int
cmps
push
gs
fcom
ss
mov
and
sub
adc
mov
mov
popf
(bad)
pop
adc
rcr
gs
xor
pushf
mov
fs
xor
sbb
or
movs
adc
push
push
scas
scas
cli
xchg
adc
mov
adc
(bad)
mov
popf
fs
out
cld
fstp
sub
jge
jge
lods
mov
or
add
dec
sbb
xchg
fsubr
(bad)
push
test
jmp
mov
add
inc
retf
shl
addr16
out
dec
loope
dec
mov
mov
sub
inc
rep
arpl
int3
sub
mov
or
xchg
or
xchg
aas
or
cmc
jle
test
repz
mov
sti
push
adc
movs
inc
sub
sbb
jae
and
scas
int3
mov
add
in
cmps
pop
dec
and
mov
adc
push
cmp
movs
pop
adc
mov
inc
out
xchg
inc
out
adc
xchg
imul
adc
loopne
push
inc
out
(bad)
in
mov
or
in
hlt
fbstp
cmp
in
push
std
ja
out
test
call
shr
or
sub
not
stos
js
push
adc
out
leave
pop
ror
sbb
jecxz
ror
xchg
jl
sbb
adc
xor
loop
(bad)
mov
test
pop
and
aas
mov
push
neg
jnp
loop
repz
inc
inc
movs
in
add
lods
nop
das
js
(bad)
out
push
daa
aaa
mov
dec
ret
dec
xor
or
push
idiv
int3
xchg
adc
les
lahf
jmp
push
push
push
xchg
dec
jae
sub
jo
add
jmp
mov
or
dec
mov
in
stc
mov
jmp
sub
pushf
or
mov
jmp
inc
arpl
xchg
mov
or
cmps
nop
sub
stos
or
movs
jo
and
adc
pusha
push
int3
imul
sbb
and
pop
adc
or
mov
cmp
mov
cmc
inc
lods
or
jns
inc
lods
adc
lea
adc
xor
fsubr
cmp
or
add
jecxz
stc
lods
push
call
loope
lods
aad
inc
adc
cwde
xchg
pop
leave
adc
ror
pop
add
pusha
mov
inc
outs
adc
sbb
xor
pop
pop
adc
pushf
cmc
mov
push
or
push
pop
pop
mov
push
mov
lds
enter
shl
push
sbb
jmp
ret
adc
lock
push
xor
jno
inc
push
mov
push
push
dec
sbb
adc
xchg
jle
xchg
sub
mov
xlat
jbe
adc
or
cld
xor
jle
cmps
loop
mov
push
and
in
xchg
adc
(bad)
mov
out
lea
adc
push
cli
call
add
aas
and
stos
adc
sbb
mov
out
pop
mov
adc
sub
sub
cmc
adc
int3
add
mov
adc
nop
repz
mov
mov
push
cmp
sti
sub
push
fld
jne
add
(bad)
iret
xor
scas
mov
dec
push
sub
adc
mov
cs
call
aam
data16
push
les
add
sbb
jp
sbb
repz
scas
sub
and
sbb
call
adc
stc
sti
gs
bound
push
cs
test
shr
jb
cli
mov
mov
jmp
lock
xchg
int
xchg
vmread
or
sbb
cdq
cli
jecxz
jmp
outs
xlat
adc
leave
mov
adc
out
xor
ror
into
mov
pop
and
div
pop
lods
and
jne
inc
xor
jge
neg
dec
add
jl
sbb
bound
or
inc
inc
ins
jg
mov
out
mov
dec
bound
(bad)
icebp
adc
pop
inc
jp
xor
sub
test
ins
dec
jecxz
aam
jno
and
mov
iret
adc
xchg
push
and
aaa
xchg
push
and
cmp
or
or
and
lock
das
mov
ror
loopne
sub
dec
adc
sbb
sahf
data16
push
push
mov
mov
jge
jbe
push
cmp
inc
add
xchg
into
js
pop
pushw
mov
sub
mov
int3
xor
mov
retf
push
adc
push
ja
push
outs
lods
je
mov
sub
mov
in
sub
lods
ja
jmp
add
and
in
adc
or
je
cs
push
jmp
add
in
icebp
adc
es
fld
pop
shr
or
mov
enter
adc
enter
retf
push
dec
adc
outs
sub
push
mov
pop
push
retf
adc
ret
or
xchg
shr
adc
shl
dec
sbb
inc
lods
fmul
stc
call
adc
pop
adc
mov
movs
shl
pop
out
je
mov
sub
mov
jp
std
retf
mov
adc
fldcw
ss
out
int3
mov
add
ins
and
adc
cld
inc
sbb
adc
or
dec
stos
pop
(bad)
xor
je
retf
jne
mov
push
loop
clc
sub
imul
out
aaa
hlt
loop
cmp
out
push
in
adc
inc
sbb
sbb
dec
call
push
push
dec
lea
add
mov
retf
cld
add
xchg
cli
js
push
and
sbb
clc
mov
loopne
dec
pop
mov
icebp
ins
pop
aam
test
pop
mov
and
fnstcw
int3
sbb
adc
inc
push
jmp
iret
leave
cmc
(bad)
or
fst
mov
test
mov
sahf
scas
loope
add
jne
xchg
push
cmc
dec
outs
addr16
mov
aad
leave
scas
add
and
sub
or
sub
daa
aaa
adc
mov
sub
stc
add
mov
inc
pop
mov
inc
sbb
popa
xor
popf
push
inc
std
and
ins
dec
loopne
out
push
stc
sbb
add
pop
sbb
sbb
push
sahf
addr16
inc
cmp
jmp
and
(bad)
ins
dec
std
cmc
jle
lds
fst
out
imul
add
int3
pusha
xchg
xlat
or
imul
xor
inc
test
xlat
out
pusha
and
dec
adc
pushf
pop
aam
sub
jle
mov
scas
ret
rcl
aad
cmp
ds
add
or
cld
movs
cmp
(bad)
jbe
sbb
fist
mov
in
retf
icebp
stos
pop
gs
or
adc
sbb
sub
jbe
jns
push
iret
adc
jne
jecxz
(bad)
lods
hlt
push
sbb
retf
into
(bad)
mov
add
push
adc
call
adc
stos
pop
add
icebp
popf
shr
sbb
pop
ss
fdivr
movs
not
sahf
add
mov
and
cmp
test
out
das
(bad)
inc
cdq
adc
adc
scas
add
adc
pushf
pop
popf
mul
dec
dec
inc
fsubr
mov
(bad)
dec
into
fist
stos
or
addr16
in
pop
mov
jnp
add
loope
xchg
push
ror
arpl
sysenter
dec
jmp
pop
jbe
icebp
into
push
mov
adc
es
les
int3
ins
out
adc
xor
and
cmp
xchg
xchg
ror
push
sbb
push
pushf
push
fbstp
ds
mov
sbb
adc
std
jnp
imul
pop
aam
cmp
popa
pop
cmp
mov
adc
gs
ret
and
dec
xchg
or
push
sbb
and
mov
dec
cmps
les
sbb
and
sbb
loope
movs
mov
mov
adc
xchg
jns
jecxz
in
add
xor
jmp
sahf
add
(bad)
hlt
jmp
cmp
adc
fsubr
jmp
enter
out
or
push
call
dec
add
and
int
pop
daa
popf
pushf
fisttp
jne
cmps
addr16
xchg
pop
addr16
push
out
out
dec
and
sub
movs
dec
stos
pop
int3
aad
in
push
xchg
xchg
imul
adc
retf
jne
sti
icebp
adc
push
sar
adc
into
jnp
scas
inc
fdivr
pop
stc
adc
sbb
cli
mov
push
test
pusha
sbb
lds
sar
sub
pop
mov
jo
and
adc
retf
mov
ds
pop
js
fidivr
icebp
test
inc
push
or
nop
les
mov
jnp
inc
mov
dec
sub
sub
mov
add
inc
xchg
jle
(bad)
adc
mov
adc
repnz
push
mov
pop
cmp
cld
jns
adc
inc
dec
or
dec
xor
ins
sbb
cmp
std
jp
fnsave
outs
lock
fild
push
arpl
ja
rcr
or
ficom
les
mov
push
adc
mov
(bad)
sbb
or
mul
and
push
adc
dec
cmp
mov
aas
(bad)
(bad)
fist
pop
fdivr
mov
xor
mov
mov
adc
mov
fs
adc
cmc
int
sti
mov
inc
add
jge
jge
test
cmps
icebp
das
sbb
mov
retf
std
mov
pusha
clc
addr16
add
or
lock
mov
add
out
cs
in
mov
leave
mov
xchg
xchg
mov
(bad)
and
inc
cdq
outs
(bad)
xchg
or
adc
sub
inc
inc
sbb
push
mov
pop
pusha
adc
fisub
jno
movs
jl
or
sbb
sub
and
sub
out
add
lock
lods
fst
jge
sbb
call
mov
aam
int
mov
out
call
retf
mov
jg
add
jg
imul
adc
(bad)
hlt
in
sub
xchg
push
jp
popa
retf
lds
cs
out
imul
je
pop
and
int3
lods
xchg
or
xchg
mov
mov
in
shl
aad
(bad)
retf
mov
sbb
and
int3
xchg
xchg
stos
mov
(bad)
hlt
cmp
xchg
daa
xchg
jg
pop
loopne
fadd
inc
pop
aas
in
retf
sbb
fimul
push
adc
mov
push
dec
mov
add
sahf
add
loopne
jbe
out
fisttp
inc
dec
xchg
inc
rcr
retf
scas
pop
or
je
cdq
and
rcr
call
retf
push
jne
rol
jmp
xor
cmovb
mov
ror
int3
test
adc
(bad)
repz
ss
cmp
pop
inc
repz
and
add
inc
nop
xchg
xchg
push
shr
jne
lahf
(bad)
aas
lahf
xor
sub
enter
sti
mov
cli
and
ficom
sahf
push
xor
push
(bad)
aas
ret
out
jmp
dec
jge
cmps
in
push
lock
arpl
imul
xchg
mov
lods
adc
arpl
mov
push
loope
xchg
test
jp
gs
dec
inc
xor
retf
stc
and
loop
sti
test
mov
int3
in
ficom
mov
xlat
out
mov
pop
push
mov
repnz
int3
cs
inc
pop
lahf
pushf
dec
inc
adc
mov
imul
popf
int3
push
sbb
push
test
push
int
mov
cdq
mov
push
shl
xchg
or
out
jmp
aas
dec
xchg
inc
int3
pop
aad
repz
and
jmp
dec
je
aaa
xchg
add
push
(bad)
adc
fldcw
sahf
or
lods
sbb
xor
mov
pushf
pushf
out
push
addr16
or
loopne
or
sub
sbb
jne
adc
or
sbb
stos
rcl
aaa
inc
xchg
cmp
pop
jns
int3
ins
lods
push
add
or
jmp
out
sbb
bound
push
push
(bad)
addr16
pop
cld
push
into
xchg
iret
cli
ins
or
in
(bad)
aam
mov
aaa
push
je
xlat
fbstp
sub
dec
repz
xor
dec
retf
imul
adc
add
and
jb
jmp
fisub
mov
xchg
rcr
setp
xor
dec
pop
mov
cmps
add
jge
ret
xor
pushf
hlt
push
cmps
inc
cmc
adc
test
pusha
jmp
and
or
shr
cmp
xchg
xchg
pop
push
(bad)
call
mov
adc
sbb
pop
xor
aam
jl
data16
sbb
sbb
sbb
push
adc
mov
mov
and
cmc
shl
ftst
aaa
les
push
xchg
popf
adc
push
das
adc
add
ja
or
sbb
sub
or
xchg
pop
(bad)
in
in
rcl
(bad)
in
fdivr
adc
das
ins
xor
mov
pushf
mov
mov
mov
loop
xor
lods
push
adc
adc
inc
in
inc
cmp
in
jmp
add
fadd
adc
mov
xchg
mov
pop
jb
adc
jns
inc
or
aam
xor
adc
inc
adc
bound
cmp
test
adc
push
cmc
pop
xor
outs
lds
cli
loopne
(bad)
xchg
mov
imul
in
xor
movs
fs
das
repnz
or
outs
push
xchg
add
mov
adc
and
ds
adc
cmp
inc
ins
shr
mov
ret
lods
(bad)
sbb
dec
out
xchg
sbb
je
mov
cmp
ins
adc
fadd
push
cdq
sbb
pop
push
outs
jle
sbb
(bad)
mov
push
(bad)
mov
cdq
lock
inc
hlt
mov
push
sub
out
es
dec
call
rol
ret
cmp
fmulp
cmp
cdq
pop
xchg
jno
ss
(bad)
cmc
xchg
sub
sbb
aad
xchg
daa
xor
jns
loopne
je
jmp
add
fist
inc
cmp
in
push
fsubp
dec
adc
cmp
fucomi
repz
mov
fidiv
pop
cmp
aad
outs
mov
pop
inc
add
test
jle
cs
adc
push
mov
xor
fsubp
inc
mov
call
push
popa
mov
add
icebp
lock
les
jns
adc
xchg
mov
dec
mov
sbb
or
sbb
lock
add
and
lods
or
cmps
int3
test
pop
pop
dec
ror
push
jg
cmp
xor
sub
push
fiadd
inc
ds
xor
sbb
retf
aam
pop
fldenv
pop
and
dec
cmc
popf
push
inc
push
sbb
push
fstp
jge
xchg
in
fmul
out
mov
push
fs
repnz
jmp
lock
xchg
push
fldcw
lock
adc
ror
call
dec
push
sub
ins
iret
ficomp
scas
rcl
add
inc
aas
into
adc
sub
push
cld
adc
mov
pop
int
fmul
mov
fdivr
adc
and
xchg
adc
outs
loope
test
xchg
adc
xchg
leave
rol
fcom
inc
sub
jge
adc
cld
icebp
nop
sbb
sbb
pop
and
popa
sub
mov
sti
les
sbb
or
test
inc
cmps
push
inc
jmp
aam
out
movs
adc
pushf
sahf
xlat
inc
dec
fwait
add
enter
mov
lahf
inc
retf
ins
dec
call
or
mov
(bad)
div
mov
mov
mov
gs
sub
adc
loopne
dec
or
adc
adc
add
sbb
nop
pop
fcomip
ror
test
fs
mov
cmc
adc
add
dec
push
xchg
xor
in
icebp
test
xor
xor
sbb
ins
sti
and
cmp
retf
nop
mov
je
cdq
(bad)
and
inc
mov
pop
mov
aas
adc
and
adc
pop
sub
and
cmc
or
je
push
xchg
hlt
pop
cmps
sbb
dec
mov
push
and
push
lahf
addr16
add
out
shl
mov
mov
push
nop
aam
jp
fisttp
jnp
push
xchg
adc
jmp
push
loope
sbb
rcl
push
aaa
ss
mov
xor
je
push
or
push
daa
fsub
cmp
push
sub
mov
popa
sahf
in
retf
pop
dec
gs
hlt
mov
xchg
adc
(bad)
sbb
(bad)
jbe
sub
mov
or
xlat
fcomip
jge
cld
adc
dec
out
and
lea
adc
imul
outs
adc
(bad)
push
push
shl
cmps
cli
inc
pop
movs
and
sbb
(bad)
cwde
sub
pop
imul
call
ss
pop
pop
ret
aaa
scas
push
jl
adc
push
pop
adc
inc
dec
mov
mov
inc
add
xor
stos
out
xchg
outs
stos
adc
push
xchg
adc
cmp
popf
cmc
fld
leave
adc
mov
mov
call
js
rcl
jg
or
retf
mov
push
pop
mov
mov
pop
lods
cmp
daa
not
fimul
nop
icebp
jge
adc
or
(bad)
aam
jno
or
push
push
push
push
push
addr16
jle
aas
or
adc
push
jmp
int
or
jnp
in
or
push
mov
stc
fstp
adc
loopne
cs
add
mov
jmp
pop
in
push
call
add
jnp
push
xlat
sub
add
fwait
and
sti
cld
hlt
mov
mov
jp
imul
rcl
adc
push
xchg
jle
mov
adc
int
into
xchg
inc
in
js
and
cmp
inc
arpl
dec
xchg
mov
pop
or
bound
adc
push
punpcklbw
add
lds
call
xchg
daa
xchg
jg
or
jnp
push
xor
add
les
jmp
(bad)
dec
mov
cli
fcom
add
adc
outs
push
inc
adc
mov
and
mov
xor
and
dec
push
in
mul
mov
mov
std
dec
int3
in
jmp
inc
pop
sub
adc
sbb
or
jno
mov
fs
mov
push
or
stos
add
pop
pop
dec
ret
adc
and
xchg
nop
jo
mov
cwde
lahf
(bad)
sbb
push
fdivr
not
movs
addr16
mov
push
push
jo
aad
pop
xor
push
push
push
mov
fdivr
mov
daa
adc
call
es
jl
xchg
adc
mov
in
or
sub
arpl
adc
stos
xchg
imul
rcl
enter
adc
int
stos
jge
push
rcl
mov
nop
or
clc
cmp
mov
mov
stc
scas
popf
adc
repz
fucomip
arpl
cmp
lea
movs
jno
jg
pushf
ffree
test
adc
cld
adc
aad
add
clc
retf
xor
push
sbb
mov
add
out
jne
adc
sbb
out
call
cli
cmp
outs
jmp
neg
adc
sbb
pcmpgtb
sub
aad
mov
jns
fwait
out
jmp
adc
scas
stc
or
loop
daa
(bad)
clc
in
add
xlat
push
mov
(bad)
(bad)
out
hlt
sti
arpl
cmp
sub
pop
cmps
shr
push
push
sbb
scas
mov
mov
cmps
pusha
retf
adc
std
jl
push
in
aaa
addr16
xor
inc
mov
dec
mov
dec
adc
les
dec
adc
adc
add
cs
out
mov
into
inc
imul
pop
daa
sbb
xchg
test
or
adc
rcr
add
adc
fs
cmp
xchg
dec
arpl
mov
push
rol
fdivr
call
pop
push
pushf
(bad)
adc
fadd
xchg
add
sbb
mov
adc
stos
shl
stos
jnp
or
les
adc
pop
adc
out
push
cli
repz
or
mov
push
out
pop
std
adc
dec
cwde
sbb
mov
test
dec
and
push
dec
adc
sbb
call
adc
push
jl
sbb
xor
or
sub
test
aam
jge
adc
xor
retf
dec
push
push
jmp
enter
sar
imul
pop
and
mov
or
mov
adc
mov
add
std
das
lea
sub
adc
outs
jp
sti
sbb
pop
xor
scas
clc
pop
ds
mov
pop
add
out
nop
dec
fs
mov
cmp
or
cmp
xchg
add
lods
mov
jbe
push
sbb
shl
mov
loopne
inc
adc
pop
adc
fnsave
je
adc
jecxz
sar
inc
adc
push
sub
adc
enter
pop
or
int3
xchg
jg
rcl
adc
retf
(bad)
mov
in
sbb
frstor
xlat
repz
inc
xlat
and
push
(bad)
sti
aad
xchg
mov
xchg
dec
mov
jmp
lds
int3
mov
out
or
in
aad
(bad)
fidivr
out
aaa
xchg
stos
dec
sbb
mov
mov
sub
push
mov
mov
or
aam
loopne
sahf
push
retf
aaa
fucom
mov
cmp
xchg
int3
int3
jae
add
xchg
hlt
sbb
pop
adc
scas
outs
pop
stos
shl
popf
adc
or
aad
imul
enter
loop
adc
or
shl
je
dec
cmp
adc
cmp
mov
or
pushf
xor
bswap
imul
add
sbb
dec
ins
push
repz
sbb
or
hlt
popf
fwait
in
jmp
test
mov
lods
ss
lods
xchg
xor
dec
js
sbb
neg
push
mov
addr16
int3
hlt
ja
in
fcom
scas
je
out
mov
xchg
mov
mov
or
inc
xchg
std
enter
cmp
in
cli
mov
rcr
cmps
jmp
retf
clc
sbb
jmp
cld
pop
add
push
jle
jae
and
push
(bad)
loop
adc
mov
jmp
ins
xor
cmp
pushf
sbb
jae
or
or
sti
jecxz
scas
dec
mov
popf
pop
into
jne
nop
ss
cmp
dec
mov
xchg
add
adc
sbb
scas
sbb
leave
dec
push
rcr
dec
call
cld
or
adc
sub
adc
std
sbb
xchg
sar
hlt
test
sbb
dec
sbb
xor
aam
add
xor
mov
out
push
inc
lods
inc
hlt
inc
aad
cmp
and
cmp
aam
adc
pushf
dec
dec
jle
je
jo
in
add
test
rcl
je
retf
stc
or
mov
or
or
call
dec
in
adc
pop
aad
retf
cs
sti
(bad)
(bad)
and
dec
mov
sub
(bad)
out
sbb
xchg
test
add
push
and
push
fisubr
xchg
add
adc
adc
sub
and
sbb
or
jge
cli
fidivr
mov
mov
mov
push
push
fld
mov
dec
dec
sbb
xchg
fs
inc
cwde
lock
cmps
and
adc
sbb
push
xchg
dec
ins
ret
sub
and
cmp
mov
pop
imul
test
ficomp
push
push
js
mov
loope
fwait
adc
out
out
push
adc
ins
push
pop
sbb
leave
cmps
fnstenv
fstp
and
stos
add
sub
movs
jne
xchg
ja
int
ins
js
pop
sbb
adc
dec
pop
add
out
fcomp
in
jnp
scas
jmp
jl
out
push
jecxz
adc
pushf
or
sub
sbb
(bad)
jne
adc
mov
les
leave
lods
pop
push
mov
push
in
fimul
push
pop
mov
(bad)
pop
jbe
neg
mov
add
or
jg
jl
aas
pop
addr16
adc
push
push
dec
cld
das
fadd
dec
pop
fcomp
js
mov
adc
mov
dec
outs
sbb
fcom
push
in
test
add
push
pushf
pop
add
xor
adc
dec
push
js
les
pusha
sbb
mov
mov
xchg
mov
nop
mov
js
adc
out
outs
sbb
loopne
imul
arpl
in
out
mov
or
ins
pushf
lods
dec
adc
mov
pop
sbb
enter
or
mov
pop
dec
repz
sti
movs
add
retf
bound
mov
add
push
stc
test
push
es
std
xchg
in
cmps
add
lahf
int
ret
and
push
movs
popf
inc
adc
push
test
shl
xlat
sub
mov
jb
xor
adc
and
pop
push
mov
sub
xor
jo
dec
bound
or
mov
aas
inc
mov
mov
test
mov
mov
fdiv
mov
dec
daa
mov
and
jns
std
push
or
ret
shr
fistp
push
dec
sub
jmp
mov
push
imul
aas
je
mov
push
fs
test
cmp
cwde
loopne
push
lods
or
ret
adc
inc
jns
or
sbb
dec
loope
dec
inc
or
adc
mov
push
cdq
adc
out
sbb
ret
or
jmp
adc
xor
fisub
pop
pop
and
push
and
sti
push
arpl
loop
cmps
xor
adc
out
push
out
mov
or
adc
mov
jmp
sub
push
les
adc
out
cmps
jne
push
lea
adc
stos
mov
popa
les
call
xlat
adc
stos
and
or
int
pop
push
inc
adc
mov
popf
jae
jnp
or
add
sti
add
xchg
cmp
xor
adc
xor
pusha
test
or
jecxz
sub
mov
add
retf
dec
das
stc
imul
in
int3
fcom
add
xchg
loope
jg
dec
cmp
adc
test
dec
mov
cmp
stos
test
js
xchg
cli
jle
out
pushw
and
mov
push
int
cmp
xchg
adc
adc
or
inc
test
loop
adc
dec
(bad)
or
and
xor
cdq
ret
mov
inc
pop
or
xchg
arpl
cmp
(bad)
scas
popf
jge
ss
pop
pop
jbe
push
sbb
mov
push
je
xor
add
mov
jle
push
(bad)
jp
xchg
xor
sbb
cmp
push
dec
les
push
or
push
adc
call
cmp
mov
xchg
adc
in
lahf
(bad)
int
push
sahf
cli
cdq
jnp
stos
adc
sti
mov
jbe
jns
xchg
adc
mov
and
test
lahf
adc
cs
pop
xor
retf
(bad)
and
cmp
xchg
imul
jno
push
outs
push
movs
idiv
push
hlt
jl
ss
mov
scas
rcr
push
ins
inc
xchg
mov
inc
xchg
mov
movs
call
jnp
addr16
and
lods
and
std
data16
sub
imul
or
mov
mov
test
and
sbb
cmp
fcom
clc
jb
sbb
pop
push
movntps
loopne
fcom
iret
inc
add
dec
bound
dec
idiv
jne
mov
push
adc
inc
pop
rcl
pop
fimul
push
inc
mov
lds
int
sti
mov
adc
pop
mov
ret
das
mov
inc
cwde
scas
dec
push
lock
cmp
sub
arpl
cmc
int3
nop
mov
adc
daa
mov
jnp
or
mov
movs
mov
jbe
popf
fbld
mov
in
mov
mov
in
cmps
sub
ficom
or
or
shl
ins
jmp
lods
ficom
fadd
mov
jmp
scas
xchg
push
sbb
xchg
nop
cdq
adc
shr
xor
mov
data16
cmps
adc
xlat
xchg
sbb
add
int
cmps
sbb
mov
add
xchg
in
aas
or
mov
aam
dec
inc
adc
pop
jmp
mov
in
cmp
in
jnp
repz
push
sub
add
dec
aad
push
sub
mov
sub
adc
ret
and
adc
jmp
loop
jmp
push
and
jns
add
adc
stc
inc
push
in
xlat
sub
mov
push
adc
(bad)
call
out
retf
adc
dec
mov
fistp
push
mov
jbe
daa
cmc
lods
push
lds
stos
(bad)
mov
and
imul
ss
push
push
adc
jl
mov
lahf
in
adc
jns
es
int3
sub
mov
adc
push
adc
lds
lods
adc
pop
or
(bad)
mov
(bad)
adc
sbb
sbb
push
pop
xor
sub
in
jge
and
cli
adc
(bad)
idiv
popf
jmp
xor
xchg
xchg
cdq
dec
(bad)
adc
mov
retf
adc
inc
adc
gs
in
mov
in
pusha
fucomip
in
mov
je
or
das
adc
mov
call
iret
cmp
push
ja
test
ds
xor
adc
and
in
out
and
mov
inc
mov
arpl
lahf
mov
rcl
popa
jmp
mov
nop
fnstenv
repz
ret
in
mov
mov
call
aam
sbb
push
add
(bad)
xchg
stos
push
jmp
xchg
aad
dec
rcr
push
inc
(bad)
in
xor
xor
iret
ja
hlt
push
cmp
aas
pop
pop
inc
or
mov
adc
(bad)
scas
xchg
xchg
retf
(bad)
int3
aaa
je
sbb
sbb
mov
enter
loop
pusha
or
push
shr
pushf
mov
scas
popa
and
fdiv
adc
call
fidivr
sbb
int3
and
xchg
mov
or
add
push
jg
retf
frstor
jl
lock
cwde
ss
arpl
add
xchg
loope
mov
out
popa
push
add
int3
fisttp
(bad)
dec
repz
push
cli
jne
shl
cld
adc
pop
(bad)
push
loope
adc
ins
pop
push
xor
sbb
mov
sub
push
push
push
mov
ret
iret
dec
out
mov
cmps
pushf
in
adc
neg
mov
adc
sbb
adc
or
cmp
xor
jecxz
icebp
cmps
xor
imul
push
xor
push
cmp
jns
adc
xchg
shr
das
sbb
mov
jle
mov
mov
add
xchg
xchg
rol
and
dec
icebp
add
adc
int
test
ret
or
call
inc
cmp
call
push
add
shr
retf
push
popa
adc
fld
mov
cmp
leave
xor
adc
xlat
mov
sub
call
sbb
mov
jecxz
and
xor
pop
xchg
ror
sbb
pop
push
shl
in
cmp
add
sub
jno
fwait
cld
les
adc
mov
std
aaa
dec
es
fadd
fcomp
jnp
mov
inc
mov
mov
xor
or
pop
movs
xor
daa
mov
stos
ja
call
(bad)
in
in
scas
iret
inc
and
cmp
lods
retf
(bad)
hlt
outs
xchg
xor
sbb
mov
lahf
js
test
or
jmp
mov
push
push
or
stos
mov
xchg
sti
cmp
mov
cmp
xchg
in
xor
(bad)
mov
xor
or
call
jg
call
iret
inc
xor
shl
scas
mov
add
pushf
sub
xchg
or
xor
aad
mov
inc
mov
and
(bad)
aaa
cs
loop
adc
pushf
lds
pop
das
cmp
ins
ret
sub
jne
sti
mov
loop
mov
in
adc
xchg
je
popf
jno
jge
arpl
mov
jge
enter
jno
cld
pop
inc
pop
fwait
unpcklps
push
test
loope
mov
hlt
cdq
add
and
adc
pop
jbe
daa
jb
gs
std
pop
xchg
adc
inc
dec
mov
adc
fnstcw
inc
aad
js
es
fdivr
push
imul
(bad)
mov
popf
(bad)
shl
adc
stos
jbe
jo
sti
cmp
push
pop
and
hlt
sbb
outs
pmulhw
jle
mov
scas
pop
mov
mov
sbb
repnz
lds
movs
(bad)
adc
dec
shl
add
mov
(bad)
mov
cdq
pop
cmp
sbb
in
sbb
repnz
repnz
pop
pop
pop
adc
loop
shl
nop
ret
fsubr
aad
fwait
push
or
xchg
jb
xchg
leave
and
scas
adc
mov
iret
xchg
mov
cld
adc
pop
xor
mov
adc
clc
lock
pop
mov
jmp
mov
mov
xor
add
push
pop
fwait
xchg
cmc
adc
lock
imul
lods
jnp
jge
jle
adc
pop
scas
and
pop
shl
inc
not
push
pop
inc
ss
(bad)
lock
sub
fstp
movs
ror
(bad)
mov
(bad)
pop
inc
mov
in
and
sub
test
cmp
xchg
inc
adc
or
pop
xlat
cld
sbb
fadd
dec
push
les
and
push
xchg
inc
popa
mov
retf
jne
xchg
aaa
xor
xor
adc
mov
xchg
clc
cmp
pusha
cwde
mov
out
adc
or
adc
jne
mov
jg
mov
push
sub
imul
rcl
ss
and
push
in
mov
adc
jle
lahf
mov
aaa
mov
loop
adc
adc
dec
push
mov
adc
sub
inc
xor
pop
adc
je
aam
pop
int3
mov
mov
movs
adc
loop
outs
ret
sub
scas
push
in
aad
ins
jo
xchg
xchg
adc
jno
add
repz
cmps
push
stos
jmp
adc
out
pop
pushf
jo
pop
in
push
cmp
mov
sbb
pop
fstp
ret
jae
xchg
cmps
cmps
clc
xchg
xor
dec
push
inc
push
xchg
sahf
in
adc
cmp
mov
in
pop
mov
xchg
unpcklps
cld
es
(bad)
push
in
data16
(bad)
sahf
rcl
push
jecxz
mov
push
push
pop
jge
xchg
jae
cmps
test
xor
fbstp
adc
loopne
jle
and
or
in
adc
sub
daa
inc
sub
sub
xlat
or
out
xchg
dec
sbb
in
ficomp
hlt
adc
cmp
inc
popf
stos
mov
les
dec
sub
sub
sbb
enter
ins
fidiv
or
sub
push
retw
push
stc
xchg
retf
mov
in
dec
dec
test
pop
or
lods
dec
(bad)
jmp
shl
add
scas
daa
popa
add
arpl
lock
jb
data16
iret
adc
push
mov
add
push
adc
xchg
xlat
fiadd
mov
mul
adc
adc
fbld
pop
clc
lahf
test
aaa
out
fcomp
popf
sub
sbb
hlt
mov
je
jb
mov
push
and
lods
loope
adc
movs
aaa
popf
jle
push
and
add
sub
call
or
(bad)
dec
stos
mov
ins
xor
push
pushf
icebp
adc
and
jmp
mov
pushf
add
outs
cli
dec
mov
mov
xchg
retf
test
pushf
fcom
cwde
mov
jmp
cmp
or
jne
sbb
ins
dec
push
ds
sbb
jnp
popf
ins
in
fdivp
sub
mov
es
rcl
pop
movs
xchg
adc
repnz
cmp
xor
je
dec
add
clc
mov
pop
or
repnz
jae
mov
adc
inc
push
and
call
std
pop
pop
mov
adc
xchg
xlat
inc
les
xor
out
pop
ret
mov
(bad)
sti
and
adc
sub
movs
xchg
call
jne
int3
add
sahf
pop
aad
retf
test
add
and
lods
adc
test
cmc
call
mov
mov
ficom
les
pop
mov
mov
mov
xchg
repnz
cmp
cmc
pop
adc
sahf
rcr
push
test
mov
jb
or
xor
loop
stos
mov
fcomip
xchg
call
mov
mov
push
sbb
mov
fs
add
sub
adc
adc
rol
in
inc
adc
ret
sub
ss
add
xor
mov
mov
jmp
xor
out
out
mov
mov
movs
xchg
xor
or
retf
shl
lea
mov
adc
xchg
clc
bound
cmp
les
xor
push
paddd
(bad)
out
xor
dec
aaa
push
adc
pushf
inc
cdq
mov
push
pop
jmp
pop
das
repnz
push
adc
xchg
fwait
(bad)
clc
mov
int
mov
fcomp
jne
dec
sub
dec
ins
ror
into
add
mov
mov
adc
xor
icebp
xor
adc
jle
pop
adc
sub
xchg
push
add
and
das
(bad)
fimul
sub
pop
and
ss
push
ret
mov
fnstcw
fidivr
jmp
jg
add
and
sub
out
fcom
push
xor
sbb
jge
push
cmp
div
pop
cwde
mov
in
and
sub
cmps
jo
ror
shl
fisub
lock
adc
pushf
icebp
xor
sub
push
shl
leave
jle
aas
ds
loope
add
adc
pop
dec
scas
sbb
cs
jg
arpl
or
cwde
jnp
ins
ret
add
cli
fsub
call
lods
loop
sub
sbb
into
fwait
bnd
xchg
jp
push
fiadd
test
retf
adc
sbb
dec
clc
out
mov
les
vmwrite
popf
(bad)
aaa
mov
adc
stos
jle
js
cmc
cdq
and
adc
outs
aam
es
adc
test
mov
inc
dec
stc
loop
data16
scas
mov
cmp
int3
or
cmp
mov
inc
inc
dec
mov
pusha
ss
sti
ret
clc
test
cmc
shl
outs
sahf
sub
retf
mov
hlt
push
les
mov
enter
lds
cmp
lahf
dec
pop
adc
out
jo
xor
in
mov
outs
mov
shl
push
adc
mov
cmc
test
fs
cmp
scas
xor
fidivr
adc
jbe
push
jmp
ss
repz
fadd
dec
jmp
lods
add
push
xlat
call
pusha
je
in
int
mov
cmp
adc
add
adc
jno
adc
mov
cwde
lahf
add
fst
loop
leave
xor
xor
daa
rol
pop
push
adc
ss
imul
jmp
dec
leave
or
or
cmp
rol
mov
cmp
dec
retf
dec
cmps
sub
dec
adc
mov
repz
inc
mov
adc
(bad)
(bad)
dec
dec
push
repz
iret
mov
cmps
inc
retf
mov
mov
jl
dec
adc
retf
jmp
fild
cmp
pop
adc
dec
cli
xchg
adc
cmp
mov
sub
inc
loopne
xchg
inc
inc
adc
push
jo
(bad)
pop
aaa
adc
pop
pop
cmp
shl
in
lock
inc
xchg
adc
ror
adc
cmp
sbb
push
cmp
sti
cwde
inc
add
repnz
jno
push
add
or
sub
xor
aam
in
in
(bad)
dec
push
xor
sub
xchg
mov
retf
jecxz
jmp
mov
adc
mov
scas
stc
aaa
mov
test
dec
jae
add
pop
test
arpl
jle
dec
ror
cmp
rcr
ja
call
adc
int3
mov
xor
adc
dec
test
in
mov
sbb
mov
(bad)
mov
(bad)
pop
push
ret
mov
cli
inc
xchg
inc
loop
push
loope
inc
int
js
and
push
adc
pusha
sub
in
ret
dec
ss
jb
hlt
paddusw
xor
fsub
jge
adc
lods
or
rcl
aaa
out
mov
cmp
arpl
sbb
dec
inc
in
leave
and
lods
xchg
aam
jae
(bad)
mov
or
adc
inc
and
dec
xor
jmp
jle
or
repz
pop
(bad)
sub
cld
dec
push
sbb
jmp
cli
ficom
stc
aas
mov
adc
out
iret
movs
(bad)
aaa
in
push
adc
dec
aas
mov
in
out
imul
out
jge
mov
popf
test
fs
aaa
and
out
test
shl
adc
xchg
or
mov
loop
nop
mov
adc
xchg
adc
push
or
dec
fisubr
xchg
adc
leave
stos
mov
sbb
ins
test
ret
movs
push
xor
cld
fnstcw
sti
push
jl
and
mov
push
cmp
pop
push
sub
movs
repz
jno
out
push
jmp
fldcw
xor
loopne
adc
mov
stc
pop
jg
repz
outs
mov
inc
lods
adc
aam
(bad)
cmps
xor
add
add
in
mov
xchg
pop
retf
mov
mov
fucomi
push
mov
pop
sbb
mov
ficom
push
push
sbb
aad
ss
adc
adc
ret
dec
xchg
shl
dec
mov
aas
pop
add
jae
ja
nop
fcomp
arpl
jge
rol
pop
movs
pusha
cli
mov
cmps
and
adc
inc
call
mov
inc
jne
xor
cli
xchg
es
push
shl
inc
push
sbb
mov
rcr
push
clc
repnz
in
mov
adc
lods
xor
xor
aaa
mov
stc
xor
jge
dec
jmp
(bad)
(bad)
pop
(bad)
fnstsw
imul
fst
lods
pop
pop
(bad)
repz
cmps
push
in
jae
arpl
mov
cs
push
dec
leave
in
jo
data16
cmp
add
adc
fiadd
jbe
push
mov
mov
sbb
adc
daa
sbb
xchg
adc
push
pop
retf
cmc
or
mov
jge
push
pop
neg
jns
sbb
ds
cmp
mov
adc
frstor
xchg
retf
mov
shl
pop
(bad)
cmp
je
push
loopne
retf
xor
pop
xchg
test
xchg
push
imul
add
pusha
sbb
repnz
xor
das
fisttp
dec
aam
add
movs
je
add
lods
and
cmps
cmps
add
dec
(bad)
cmp
xchg
mov
jmp
mov
add
push
xchg
mov
xor
push
cmps
nop
push
(bad)
out
mov
mov
(bad)
int3
lock
jns
and
sbb
pop
push
mov
loopne
and
mov
dec
repnz
outs
movs
adc
aas
sub
(bad)
push
mov
adc
lock
ret
imul
pop
xchg
jno
jge
add
adc
retf
inc
cmc
adc
pop
fnop
daa
shl
xchg
push
adc
and
add
sbb
adc
jmp
fisub
push
and
ror
adc
jnp
or
cmps
and
jle
sub
xchg
retf
push
sbb
in
fldenv
xor
adc
mov
pop
int
adc
mov
cmp
mov
xchg
push
jnp
cmp
lods
and
add
dec
(bad)
adc
add
imul
mov
pop
adc
cmp
std
jl
jp
and
lods
adc
cmc
int3
fidiv
jno
adc
and
in
pop
mov
adc
add
mov
cmp
adc
lock
sbb
pop
adc
jno
mov
pop
es
cmp
nop
cdq
out
clc
(bad)
ins
adc
fidivr
icebp
cwde
les
cmp
adc
test
adc
mov
sbb
jnp
int
call
icebp
sbb
dec
jb
adc
ja
push
sahf
loopne
mov
or
out
add
xchg
adc
sbb
and
cmp
test
ds
add
mov
pop
push
sub
cmps
adc
iret
scas
push
xor
in
dec
xchg
loope
call
ds
add
sub
ss
pop
mov
push
aaa
adc
test
lahf
cli
out
adc
jbe
sub
std
pop
mov
das
out
inc
scas
aam
xor
xor
and
test
mov
int
int3
leave
je
pop
add
adc
sti
add
(bad)
jp
cmp
pop
mov
xchg
mov
rcl
push
sub
(bad)
not
ror
(bad)
dec
push
fnstenv
adc
call
bound
ret
in
adc
jmp
cs
and
mov
lods
pop
xlat
and
bound
or
pop
int
pop
mov
add
pushf
ins
adc
mov
or
pop
jmp
push
jb
mov
push
out
in
mov
push
xchg
mov
div
add
pushf
adc
adc
mov
push
jae
fsubr
aam
jns
loopne
cmp
je
ss
dec
push
aas
int3
xor
out
xchg
mov
stos
sti
jmp
cli
push
repz
std
fdiv
scas
in
cmp
les
in
fisubr
enter
lods
push
imul
dec
ja
push
lods
mov
fnsave
ret
not
fcmovu
add
mov
cmps
jmp
add
xchg
shr
lahf
adc
dec
aam
into
sbb
mov
adc
dec
out
adc
add
pusha
inc
xchg
sbb
je
cmp
ins
mov
out
mov
daa
add
mov
cdq
ret
xchg
jo
hlt
pop
inc
jecxz
jmp
pop
cmp
lds
fucom
shl
jp
add
adc
mov
(bad)
xor
and
cmp
pop
arpl
int3
sub
jae
pop
dec
jb
out
xor
push
nop
mov
mov
mov
push
adc
scas
adc
aas
dec
push
xchg
add
xor
and
in
(bad)
ror
aam
movs
add
xchg
mov
cmps
clc
push
aaa
mov
xchg
xor
retf
sub
les
jge
jecxz
fucomip
jmp
mov
fucomp
mov
ret
loopne
jne
push
imul
btr
dec
loopne
cs
iret
out
pusha
dec
adc
clc
mov
xchg
mov
mov
mov
push
retf
inc
es
push
je
push
imul
xor
retf
rcr
ds
or
aas
addr16
sets
jne
xchg
out
aam
out
mov
cmp
cld
ror
adc
pop
shr
mov
push
or
arpl
push
sbb
add
adc
xchg
daa
inc
add
adc
imul
pop
adc
popa
and
xchg
arpl
adc
sub
pop
push
movs
push
or
jne
int
or
xchg
adc
push
addr16
mov
mov
leave
push
minps
retf
dec
inc
fisubr
sbb
cmc
aad
js
push
iret
inc
jae
add
ins
repnz
mov
mov
sub
adc
aad
inc
mov
or
stos
dec
cmp
and
pop
xchg
je
add
imul
push
fdiv
adc
outs
movs
dec
xchg
nop
test
aad
pop
je
sbb
jl
mov
fcmovnb
or
xor
test
mov
in
and
push
in
adc
xor
cli
mov
sti
imul
sbb
adc
and
jnp
loopne
mov
xor
aas
pop
movs
mov
inc
push
jecxz
fist
mov
loop
aas
gs
or
xchg
pop
jmp
pop
test
cmp
fcom
mov
inc
jmp
rcr
neg
adc
cmc
mov
stos
pop
adc
or
test
mov
inc
xor
sub
lock
shl
push
call
sahf
and
retf
or
sti
lahf
inc
cdq
fs
out
pop
jne
rcl
add
dec
sbb
and
bound
xor
mov
in
or
sti
push
pop
dec
dec
mov
push
push
test
add
cmp
jmp
pop
dec
push
aam
aad
leave
push
(bad)
ss
push
xor
add
popa
ins
cmps
fs
jmp
(bad)
or
mov
cmp
push
adc
mov
pop
push
adc
scas
mov
xor
dec
aad
les
jmp
(bad)
adc
jne
push
push
nop
dec
xchg
adc
hlt
not
pop
fstp
mov
clc
shr
xchg
or
adc
cmc
dec
out
fadd
lds
ret
cmp
mov
mov
(bad)
xchg
sbb
push
and
xchg
xlat
adc
add
(bad)
adc
sti
push
sub
fwait
repnz
xor
int3
aad
bound
rcl
pusha
mov
imul
adc
in
int
push
pop
mov
es
add
mov
mov
push
cmp
dec
loopne
and
movs
fs
imul
loopne
mov
xchg
pushf
aam
sbb
(bad)
les
jmp
and
push
mov
je
data16
xchg
call
push
and
mov
dec
mov
and
sub
xchg
std
loope
das
sbb
je
mov
out
loope
xchg
or
aaa
mov
std
ss
call
cmp
hlt
and
xor
push
int3
cmp
movs
fisttp
or
fs
aad
or
gs
push
pop
adc
or
(bad)
mov
xor
das
pop
rol
enter
sbb
imul
pusha
or
jne
inc
out
push
retf
sbb
mov
movs
adc
nop
dec
xor
xchg
adc
pop
rcr
popf
adc
repz
dec
add
sub
out
cs
pusha
adc
scas
fisttp
add
xchg
lds
out
mov
pop
jns
xor
fdivr
out
clc
sub
mov
xor
fstp
sbb
inc
(bad)
sbb
xor
adc
xor
ds
adc
jmp
mov
aaa
adc
and
(bad)
aas
push
(bad)
das
xchg
into
je
cmp
in
xchg
aad
adc
js
jmp
sbb
jp
add
shr
cmps
(bad)
in
jb
cmp
cs
jmp
mov
inc
sbb
imul
shr
pop
mov
pop
mov
retf
inc
xor
jecxz
push
mov
rcl
mov
mov
sub
and
cli
out
test
xor
mov
ins
sti
int3
aam
lea
pusha
fnstenv
push
(bad)
les
jno
adc
mov
loope
frstor
xchg
adc
and
cmp
mov
fld
js
data16
cwde
xor
and
fnstenv
pop
aam
(bad)
imul
push
mov
adc
dec
fnsave
fsubr
aas
cdq
add
pop
cld
sahf
repz
inc
ds
pop
or
mov
adc
dec
(bad)
push
mov
xor
je
cmp
sub
jmp
ds
movs
push
jmp
das
mov
jnp
adc
out
cdq
xor
cmp
retf
or
fcomp
adc
test
test
das
sub
pop
rcr
adc
stos
int
test
pop
and
jp
mov
call
or
stos
mov
mov
xchg
mov
data16
cli
cmp
sub
into
xchg
scas
cld
pop
fs
fimul
int3
pop
sbb
test
push
inc
popf
je
scas
cld
adc
stc
xor
retf
or
jmp
imul
fistp
add
cmp
stos
sub
jg
movs
mov
retf
mov
mov
arpl
jnp
push
test
cmp
pop
cmp
lods
ds
mov
mov
xor
ins
sub
jbe
adc
out
sbb
xchg
int3
imul
scas
in
pop
push
and
test
mov
xor
(bad)
push
and
inc
adc
test
outs
inc
adc
imul
push
in
data16
mov
push
pop
sub
mov
sub
nop
mov
shl
xchg
dec
adc
jmp
adc
(bad)
stos
push
movs
cmp
mov
pop
call
adc
arpl
out
xor
push
(bad)
jae
sahf
add
sub
mov
not
sub
rcr
cmp
dec
out
mov
sub
ss
sbb
retf
mov
dec
dec
sbb
daa
adc
(bad)
adc
outs
jb
and
int
cld
movs
daa
or
adc
rcl
add
mov
mov
test
mov
adc
pop
aad
dec
pop
push
sti
add
pop
pop
jmp
mov
dec
call
add
test
xchg
lea
fs
int
xor
sub
and
or
sbb
pop
add
pop
clc
mov
jge
mov
icebp
mov
xchg
mov
jl
sbb
enter
or
adc
sbb
sub
push
sbb
int
test
(bad)
(bad)
xchg
or
movs
mov
loopne
dec
push
ins
dec
pop
stc
jmp
mov
outs
push
mov
mov
xchg
jae
adc
push
inc
sbb
adc
(bad)
mov
je
inc
sub
sbb
add
xchg
adc
mov
mov
jle
push
xchg
dec
cmp
scas
(bad)
lock
inc
int3
sub
lock
les
or
sbb
ins
cmps
mov
xor
adc
in
imul
js
bound
sar
xchg
inc
les
data16
sti
add
or
test
adc
pop
pop
add
fisub
sahf
out
mov
scas
xacquire
xchg
mov
mov
adc
and
mov
push
out
xor
(bad)
mov
jle
jno
adc
sbb
lea
adc
mov
jns
sbb
xchg
je
hlt
(bad)
mov
bound
xchg
cld
rcr
xlat
test
lods
lods
mov
dec
sti
fwait
retf
adc
inc
sbb
fwait
mov
and
and
jecxz
dec
push
lods
(bad)
call
je
push
arpl
jns
jbe
sbb
mov
fnsave
stc
push
and
mov
sub
cmp
push
icebp
xchg
pop
pop
(bad)
sti
push
stc
adc
and
mov
adc
jno
scas
sbb
push
lahf
adc
jle
stos
ins
aad
dec
pop
lock
aad
cmp
and
aam
hlt
sbb
adc
dec
adc
mov
pop
call
add
iret
mov
repnz
das
(bad)
xlat
in
sbb
je
sbb
imul
fidivr
xchg
bound
sub
xchg
dec
add
adc
int3
mov
jnp
pop
xchg
inc
into
and
mov
ror
cdq
push
jo
mov
retf
xchg
push
cdq
pushf
adc
push
loop
cs
and
fild
pop
cld
movs
add
aam
(bad)
shl
les
addr16
test
(bad)
movs
repz
mov
jmp
loopne
jl
ret
push
or
inc
sub
movs
push
mov
push
(bad)
push
inc
push
in
imul
popf
fwait
cdq
fbstp
lahf
cmp
xor
inc
mov
lods
mov
and
call
ds
or
das
push
push
sub
ret
loop
test
push
dec
cli
xchg
and
mov
inc
add
sub
mov
adc
(bad)
jecxz
mov
adc
shl
adc
stc
fld
cld
and
jle
movs
cld
adc
adc
and
mov
mov
pushf
pop
addr16
scas
stos
or
call
loop
or
(bad)
fs
inc
adc
data16
xor
stos
adc
sbb
dec
or
inc
xchg
mov
out
in
sbb
mov
jb
in
sub
jmp
scas
mov
je
mov
lods
pop
pop
dec
movs
std
les
int3
ret
pop
cli
(bad)
data16
fcmovnb
test
xor
fsub
int3
iret
aam
fcom
ror
sub
scas
and
inc
rcl
sti
rcl
pop
out
out
call
int
xor
in
repnz
imul
mov
cmp
push
mov
push
scas
push
aad
jns
imul
pushf
aaa
pusha
out
(bad)
jno
call
aas
push
mov
xchg
and
outs
push
adc
dec
outs
test
hlt
out
push
call
inc
test
dec
movs
int3
or
or
pop
mov
add
jnp
cdq
fmul
sbb
das
xor
sub
int3
cmc
add
mov
and
xor
sbb
test
mov
cwde
pop
sbb
fdivr
push
push
mov
aam
retf
dec
(bad)
call
in
ficomp
test
call
pushf
add
clc
jl
adc
(bad)
mov
xor
mov
fcomp
lahf
imul
xchg
ins
adc
inc
mov
jmp
push
cmp
pop
adc
xchg
add
jae
sub
not
pop
(bad)
aaa
inc
scas
push
adc
std
aam
adc
pop
out
test
mov
enter
and
cmc
fsub
out
adc
xor
push
pop
adc
add
push
xchg
dec
out
adc
pop
popf
out
pop
dec
mov
mov
xchg
shl
test
xchg
adc
cmp
leave
mov
ins
adc
dec
into
pop
(bad)
mov
mov
mov
xor
fst
ds
icebp
adc
xchg
xchg
call
mov
mov
pop
ins
dec
ds
adc
push
fldz
test
push
fadd
jns
ja
je
xchg
lods
sub
mov
inc
pop
sahf
mov
sub
sbb
pop
jecxz
dec
sub
adc
rcr
cwde
(bad)
out
mov
and
adc
shr
lods
and
pop
xor
inc
loopne
sbb
outs
data16
xchg
xor
fwait
xor
mov
ja
mov
outs
or
popf
mov
inc
mov
xchg
mov
popa
adc
jno
cld
fisub
pop
pop
adc
cmp
ffree
mov
call
push
adc
scas
mov
cmps
adc
aas
mov
ins
and
shl
pusha
rol
ret
pop
rol
pusha
std
hlt
popf
jl
adc
push
jg
test
mov
xchg
pop
mov
(bad)
cmp
loopne
adc
or
jo
jmp
add
stos
adc
imul
jmp
jmp
jmp
fxch
jno
call
test
jg
loopne
rcr
ficomp
and
sahf
or
comiss
push
mov
mov
mov
adc
push
loop
sbb
je
sbb
and
and
mov
cdq
int3
fild
inc
mov
sbb
in
push
push
and
sbb
adc
loope
jne
test
sti
fldcw
push
cwde
stos
jge
dec
jg
dec
aad
jle
sbb
clc
mov
clc
int3
mov
es
call
rcr
leave
mov
push
dec
xchg
mov
cmp
mov
(bad)
rcr
or
mov
(bad)
pop
sbb
int3
test
popf
aad
ja
call
push
leave
jmp
nop
repnz
or
dec
loop
or
cmp
sbb
ja
sbb
sub
xchg
sbb
shl
cdq
dec
xor
jo
(bad)
ins
xchg
and
cmp
fcomi
fadd
xor
inc
enter
inc
and
rcl
sub
call
inc
sar
pop
cmps
push
push
inc
jg
mov
sbb
inc
loopne
fcom
lods
push
dec
imul
mov
popf
cld
call
stos
push
test
jmp
call
push
inc
or
pop
or
call
js
pop
or
ja
leave
mov
inc
pusha
pop
add
(bad)
pop
sub
sti
push
mov
jo
add
rcl
xchg
xor
sub
dec
dec
imul
loopne
cmp
fimul
push
mov
adc
dec
adc
adc
add
out
cld
dec
add
leave
imul
inc
sbb
std
sbb
xor
outs
push
icebp
ss
gs
inc
ror
jge
not
popf
add
aas
outs
cld
imul
call
mov
push
xchg
mov
and
push
or
je
loope
or
stos
cld
sbb
ins
xor
sbb
retf
pop
mov
mov
popa
aaa
fadd
mov
xchg
jle
ss
fcmovnu
add
mov
jmp
ins
test
outs
mov
rol
adc
cld
out
mov
mov
mov
jecxz
dec
or
es
lahf
jmp
sbb
push
scas
pop
xchg
int
xchg
std
es
in
or
xchg
aam
mov
jmp
sub
or
je
xchg
rcl
imul
shr
xchg
and
cmps
jmp
movs
jmp
cmps
int3
lahf
sbb
or
loopne
cwde
or
mov
out
cwde
retf
mov
xor
dec
add
call
sbb
sub
cwde
xchg
les
idiv
mov
dec
xor
loope
icebp
lds
add
xchg
stos
dec
jmp
ds
cwde
bound
bound
add
int
ins
push
loop
inc
aad
cld
cdq
mov
int3
adc
sub
out
mov
sbb
sub
aas
cmps
jle
mov
fcomi
in
add
imul
jg
fst
and
sub
cmc
or
pop
mov
in
ror
inc
adc
movs
inc
jp
cld
mov
dec
int3
mov
xor
jae
inc
ins
xor
adc
push
aad
(bad)
mov
push
in
or
dec
sbb
pop
int3
cmps
and
and
jmp
add
cmps
bound
cmp
out
dec
int3
mov
cli
enter
out
sub
or
aas
adc
add
icebp
sbb
push
les
rcr
cmps
or
push
lock
cld
(bad)
fucomp
push
sub
ret
ds
xchg
push
fdivr
adc
mov
mov
sub
or
or
adc
add
pop
adc
dec
dec
pop
cmp
stc
fstp
loopne
adc
sbb
mov
leave
push
das
mov
pop
jns
and
add
add
inc
hlt
sub
push
lock
jg
jno
mov
adc
call
test
inc
lods
lock
pushf
and
inc
xor
push
xchg
imul
push
mov
jns
test
sbb
mov
push
data16
aam
xlat
xchg
xor
test
dec
jg
xor
adc
jge
jecxz
jbe
and
lods
out
cmp
imul
adc
mov
sbb
mov
dec
in
call
jne
enter
lods
jmp
and
or
mov
xor
lods
out
push
xor
jecxz
add
scas
int3
popw
loope
sub
aad
cmps
dec
sbb
push
xor
scas
pop
jmp
sbb
mov
iret
jmp
(bad)
cld
fsub
clc
pop
xchg
or
out
mov
scas
mov
inc
fisubr
out
jns
xor
pusha
adc
inc
retf
xor
pop
jne
test
sar
xchg
ins
neg
xchg
clc
ja
jno
jp
mov
mov
xchg
js
inc
sahf
rol
and
mov
pop
pop
sbb
jmp
mov
xchg
fild
adc
pushf
dec
pop
pop
addr16
mov
sub
adc
xor
mov
jo
in
dec
out
mov
in
fs
shl
xchg
jae
inc
xchg
adc
les
and
out
sbb
add
aas
in
hlt
adc
jmp
sub
clc
adc
add
ret
into
and
psrlw
int
sbb
or
int3
lds
and
add
mov
adc
hlt
cmp
mov
jmp
cli
and
dec
int3
xor
jne
clc
xor
or
adc
xor
add
pop
es
adc
dec
icebp
iret
cdq
cmp
cmp
data16
pop
jge
adc
jp
(bad)
in
ror
lock
cmc
aam
cmp
dec
push
xchg
dec
sbb
lahf
out
bound
inc
or
pop
xchg
pop
loopne
scas
hlt
ins
push
adc
imul
cdq
or
fadd
mov
pop
test
mov
lods
add
je
stc
loop
aam
cmp
mov
fisub
aaa
pop
fmul
cmps
gs
pushf
push
je
pop
jae
mov
mov
in
xor
and
sbb
push
mov
fdiv
inc
push
call
cmc
mov
in
frstor
sbb
dec
xor
push
push
sub
jae
push
and
pop
arpl
push
scas
xchg
dec
jno
(bad)
lods
adc
cmps
xchg
cwde
mov
xchg
adc
inc
mov
and
mov
aas
jne
pop
mov
xchg
jp
loopne
pusha
retf
xor
nop
ja
xor
xchg
sbb
(bad)
jmp
or
xchg
adc
ins
xor
mov
jl
movs
pushf
test
pusha
sahf
ins
shr
stos
sbb
sbb
inc
out
lock
mov
in
cld
dec
xchg
and
js
jbe
out
mov
sbb
in
sbb
jnp
push
jge
sbb
mov
mov
dec
mov
loopne
out
mov
mov
stc
xchg
iret
or
(bad)
adc
push
pop
movs
in
adc
gs
inc
jne
call
xor
xchg
rcl
int3
enter
scas
cwde
mov
jo
and
inc
lods
adc
inc
mul
das
rcl
add
in
or
push
aaa
mov
pop
xor
fs
xchg
loope
(bad)
out
sub
cmp
mov
push
das
aam
jb
enter
mov
mov
aaa
stos
je
sub
or
aas
jecxz
or
(bad)
mov
dec
jno
mov
inc
and
adc
popa
(bad)
sub
xor
ss
sub
jbe
pushf
lds
mov
xor
dec
(bad)
adc
int3
fs
xchg
test
pop
call
fdivrp
fisub
sub
adc
adc
lds
inc
or
hlt
sar
js
jg
or
in
leave
cmp
(bad)
aad
test
test
inc
and
add
push
lods
aad
cmp
int
mov
adc
xchg
(bad)
pushf
fs
mov
mov
push
xor
sbb
mov
retf
es
sbb
xor
out
test
mov
sbb
loopne
loope
out
adc
add
sbb
popa
add
int3
pop
push
rcl
mov
dec
cmc
out
lds
movs
pop
and
sbb
xchg
scas
pop
call
jae
add
cmp
lock
ja
je
aad
in
retf
cmp
push
dec
adc
sbb
retf
cmp
out
outs
imul
adc
push
xchg
pop
mov
les
jp
retf
jl
loop
adc
out
je
retf
or
and
das
imul
and
in
mov
(bad)
sbb
xchg
shl
lods
je
xchg
pop
ret
push
xor
push
lahf
test
sbb
or
sbb
fwait
repz
hlt
xor
pop
xor
int3
out
ss
push
add
nop
out
in
or
cmp
mov
or
scas
out
js
stos
xchg
sahf
int
or
xor
or
jge
inc
fs
or
fistp
inc
cmp
cld
test
sbb
inc
dec
xchg
xchg
aas
clc
cmp
xlat
and
repnz
pop
push
mov
pushf
cmp
adc
ds
outs
inc
add
adc
jo
call
adc
xchg
pop
stos
mov
dec
cmps
ss
das
adc
daa
das
std
shl
scas
mov
retf
mov
push
jecxz
addr16
or
pop
jae
aam
fsub
retf
mov
iret
rcl
test
xchg
and
jl
adc
outs
adc
add
mov
jge
add
pop
push
lods
mov
lock
or
xor
dec
mov
jmp
sbb
sti
frstor
lods
inc
xlat
jg
xchg
mov
and
(bad)
sbb
xor
jmp
adc
aam
retf
cmps
mov
mov
inc
enter
adc
lea
lock
sbb
push
inc
sti
and
dec
cmp
cmc
and
retf
xor
lock
jns
stc
lahf
mov
dec
jge
mov
int3
adc
push
mov
jnp
cli
imul
(bad)
jge
out
xor
icebp
aas
dec
addr16
mov
in
nop
mov
inc
pop
dec
es
add
hlt
mov
ss
xchg
aad
into
jp
xchg
dec
aaa
data16
or
sbb
jbe
cmp
(bad)
sbb
inc
cmps
mov
dec
call
dec
push
daa
push
out
rol
clc
call
cdq
and
mov
inc
add
out
stc
aaa
jge
push
sbb
nop
scas
(bad)
mov
dec
push
stos
ror
xchg
push
fcomi
xchg
xchg
dec
es
xor
jp
adc
push
add
mov
pop
add
ffreep
(bad)
push
dec
xchg
push
jmp
xchg
jmp
aad
ins
inc
je
rcl
inc
call
ret
or
or
jmp
lods
pop
mov
in
jg
xor
pop
push
in
mov
lds
cmc
inc
inc
xchg
sbb
mov
cmp
adc
mov
push
ret
ins
or
xor
and
sar
adc
jae
mov
out
icebp
sub
mov
xor
in
cmp
addr16
stos
jbe
push
push
adc
jns
inc
mov
push
and
rcl
retf
push
mov
cli
sbb
add
sub
mov
adc
mov
sub
cmp
xor
jo
or
hlt
inc
mov
adc
addr16
fimul
je
imul
and
or
xlat
inc
out
lds
fs
(bad)
test
inc
pop
adc
xchg
dec
daa
mov
out
cld
pop
sbb
js
and
hlt
fdiv
pop
push
dec
xchg
repnz
jb
sub
mov
nop
adc
mov
sar
adc
sub
pop
ret
add
stos
push
xchg
mov
sbb
xchg
retf
aam
jae
pop
adc
vphaddubd
cdq
xchg
and
or
lods
lahf
sbb
mov
outs
xchg
ins
cmp
(bad)
out
adc
cmp
js
outs
dec
or
jg
dec
mov
rcl
ss
xor
movs
ja
not
inc
ins
call
pushf
and
jb
xchg
scas
add
aam
mov
(bad)
dec
pop
sub
iret
scas
jns
pop
mov
dec
sahf
int
icebp
mov
sub
xchg
into
jg
mov
(bad)
cmp
and
inc
or
cld
cmps
aam
scas
int
and
push
pop
leave
shl
stc
inc
mov
inc
jmp
ret
mov
mov
pushf
mov
adc
stos
xor
adc
mov
or
int3
dec
add
sub
mov
xor
mov
not
cmp
inc
sub
xchg
fcom
jne
and
clc
loope
xchg
(bad)
jmp
xor
xchg
xchg
jge
add
enter
movs
adc
stos
pop
jg
sti
(bad)
daa
adc
or
shl
or
cwde
lock
jmp
adc
rcl
es
mov
mov
push
int3
mov
adc
xchg
xor
sahf
mov
cld
sti
lahf
retf
xchg
adc
mov
stos
sub
sbb
data16
dec
pop
and
ins
cmp
mov
mov
sbb
pop
pop
frstor
sbb
adc
sar
push
test
mov
imul
ror
or
fsub
aam
add
adc
popa
cmp
xchg
jg
adc
addr16
add
push
push
push
xchg
push
pop
sbb
test
in
adc
add
(bad)
stos
and
sbb
push
jl
out
call
shl
out
fsubr
stos
call
sbb
jo
jle
xchg
inc
sbb
aam
jl
stos
inc
sti
pop
or
in
xchg
jbe
imul
ins
out
jecxz
fs
sbb
inc
addr16
mov
add
push
push
(bad)
inc
ret
fcom
xchg
cmp
sub
cmp
sbb
pop
adc
cmp
mov
and
call
sbb
popf
ins
xchg
sub
push
div
in
(bad)
lahf
fldcw
xor
imul
jmp
(bad)
dec
rcr
and
sbb
mov
mov
dec
scas
aad
dec
sahf
nop
fwait
loope
adc
dec
or
xor
(bad)
frstor
mov
shl
shl
dec
aad
int3
les
pop
adc
mov
adc
retf
aas
mov
pop
mov
repnz
push
mov
add
or
aam
jge
enter
and
cs
jge
retf
pushf
call
test
jnp
push
cli
xchg
pop
add
fisub
pop
dec
in
sub
sbb
les
cld
or
je
pop
scas
lock
int3
and
in
out
bound
(bad)
mov
aad
sbb
ins
out
ret
push
adc
pop
fwait
mov
in
cmp
xor
pop
adc
add
repnz
pushf
jns
or
fcom
adc
push
or
int3
pop
xor
xchg
xor
or
ss
mov
ins
loopne
ins
sbb
add
je
stos
(bad)
sbb
add
or
jae
mov
cmps
stc
xchg
dec
cmp
loop
and
aad
cmp
jae
mov
in
adc
shl
(bad)
lea
mov
jbe
push
push
cs
jl
adc
mov
dec
add
fs
aaa
repnz
punpckhwd
sar
inc
xchg
mov
sti
ss
mov
add
sbb
cmps
xlat
or
inc
cmp
push
or
rcr
ds
push
push
les
mov
inc
nop
mov
and
xor
mov
or
fwait
push
cwde
xchg
mov
mov
cli
adc
push
xor
sti
inc
pop
in
outs
sbb
(bad)
mov
repz
dec
sub
out
adc
jnp
mov
adc
pop
mov
cmp
adc
adc
mov
into
loop
mov
in
ins
sub
mov
popa
jns
push
push
enter
movs
lods
push
out
das
adc
ins
jl
xchg
xor
add
aad
(bad)
mov
xor
mov
jb
in
inc
test
xchg
cwde
jle
mov
imul
and
adc
mov
inc
push
adc
xchg
pop
shl
mov
jl
dec
cmp
cmps
push
mov
sbb
push
mov
jp
and
outs
imul
test
dec
xchg
inc
add
or
push
mov
not
mov
adc
inc
mov
sbb
jg
cs
pop
out
arpl
in
popf
sar
data16
adc
pushf
mov
push
adc
push
xchg
cmp
pop
test
pop
rol
lods
or
xchg
or
ret
mov
movs
repz
call
mov
not
add
inc
adc
push
addr16
loop
cmp
std
ret
mov
imul
or
xchg
es
test
arpl
and
aaa
xchg
push
pop
dec
(bad)
sbb
int3
jne
mov
xor
push
cld
hlt
cmps
jo
adc
add
lods
sbb
fisub
mov
and
lahf
cli
rcl
loop
mov
out
setno
pop
inc
or
push
bound
test
(bad)
add
scas
inc
mov
clc
adc
mov
pop
popa
sbb
loopne
in
addr16
adc
xor
lds
cld
inc
(bad)
push
sub
inc
mov
retf
leave
adc
pop
adc
punpcklwd
fstp
in
mov
rcr
loope
aam
add
call
push
pop
in
xor
adc
sbb
mov
fdivr
add
lahf
pushf
(bad)
mov
gs
ficomp
call
into
jne
pop
cmps
scas
jle
adc
sub
sar
mov
pusha
pop
fwait
in
inc
adc
jb
xchg
jl
scas
adc
dec
outs
cli
fisub
retf
adc
mov
push
lods
pop
push
or
or
push
test
out
lds
addr16
jecxz
push
xchg
nop
call
push
adc
ja
dec
and
or
mov
leave
push
aam
imul
pop
test
loop
aam
cmp
cld
push
adc
sub
add
aam
push
out
sub
test
mov
xor
pusha
cmp
jp
jmp
call
jecxz
push
push
test
pop
push
sti
pusha
push
sbb
push
cli
adc
mov
sbb
or
dec
sub
cmp
fnstcw
inc
and
cmp
jmp
mov
mov
mov
xchg
mov
mov
sub
fldenv
(bad)
adc
sbb
xchg
pop
adc
mov
inc
jmp
jg
cmp
fst
adc
pop
setbe
aas
xlat
mov
rcr
cmp
les
adc
push
dec
call
push
xchg
ins
aaa
pusha
sbb
adc
sar
adc
(bad)
in
data16
xor
out
mov
ins
xchg
aam
pop
fnstcw
sbb
jmp
shr
idiv
sub
aam
rcl
adc
push
dec
call
jns
adc
int
fld
sahf
cld
sub
out
ds
es
les
sub
or
xchg
push
imul
adc
or
sti
adc
pop
repz
pop
call
loop
(bad)
xor
mov
sub
add
adc
std
push
sub
aaa
jmp
sub
xchg
xor
sub
les
cmp
add
xchg
(bad)
dec
shl
mov
cmp
cmp
je
in
jl
jmp
hlt
mov
inc
pop
pusha
sub
xor
(bad)
add
aaa
adc
sbb
mov
ds
sbb
jbe
ja
adc
push
dec
push
mov
aam
imul
ret
cld
cmp
fist
xchg
push
leave
js
push
dec
adc
pop
fcom
add
push
rcr
push
popa
aad
sbb
or
jge
dec
xchg
jb
pop
dec
push
inc
adc
mov
dec
adc
fcom
lods
add
adc
jae
jle
adc
and
out
pop
clc
pop
jae
adc
xchg
add
xor
xor
lods
cs
push
sub
mov
bound
vcvttsd2si
push
xchg
push
lock
adc
cld
gs
xchg
xchg
fisub
sbb
sti
xchg
cmp
clc
or
jmp
fldenv
and
xor
inc
hlt
scas
mov
aas
call
inc
sub
lock
jg
dec
fdiv
xchg
repnz
push
pop
push
test
mov
mov
lahf
add
adc
jge
daa
mov
cmp
or
xor
add
mov
jo
repnz
jmp
call
xchg
out
sub
inc
mov
adc
xor
cmp
mov
sbb
je
pop
cmps
sbb
cmp
mov
push
sub
jge
cmp
lds
arpl
inc
push
aam
xchg
in
test
adc
mov
fs
lea
pop
cmps
cmps
in
(bad)
and
mov
adc
sbb
ficomp
lea
xchg
or
push
int3
retf
imul
mov
push
dec
xchg
mov
fild
retf
jne
mov
inc
and
dec
adc
mov
adc
or
adc
stos
retf
mov
sbb
mov
test
and
lods
mov
push
clc
jmp
adc
adc
fs
addr16
es
adc
jo
pop
jns
and
jb
daa
sbb
adc
iret
into
cli
in
jl
or
push
psraw
retf
xchg
repnz
mov
ret
and
pop
xchg
stc
sbb
mov
mov
xchg
enter
es
popf
lahf
xchg
test
cli
inc
mov
fwait
sub
out
xlat
into
jge
cmp
adc
push
ins
adc
xor
mov
mov
dec
mov
push
push
fwait
sti
addr16
into
aam
fbstp
pop
ss
xchg
pop
and
mov
in
jnp
test
push
sbb
loope
sahf
out
std
jne
dec
(bad)
sub
sub
neg
pop
jne
div
jecxz
mov
adc
add
or
add
mov
inc
pusha
jle
aaa
jecxz
mov
mov
pop
test
out
jno
cmp
push
jns
ins
clc
movs
rcl
imul
int3
movs
pop
cmps
into
ror
call
and
je
out
cmp
cmp
pop
aad
(bad)
mov
pop
int3
and
inc
mov
into
clc
sbb
inc
inc
mov
dec
sub
icebp
popa
(bad)
jbe
dec
mov
fiadd
mov
jmp
(bad)
out
push
adc
sub
cmp
add
and
xor
mov
in
push
push
ret
sub
loope
rcr
mov
mov
adc
jbe
int3
push
fldenv
sub
not
out
arpl
inc
pop
idiv
add
pop
test
aas
fistp
int3
lods
icebp
sbb
retf
inc
push
mov
xlat
dec
aaa
sbb
nop
scas
and
mov
inc
xchg
and
or
cmovs
jo
fmulp
sbb
rcl
fist
mov
aam
sbb
repnz
add
retf
ins
xchg
cld
cld
xlat
inc
or
sti
or
cld
in
repz
jmp
add
pop
add
call
es
popa
je
rol
movs
loope
mov
mov
add
sahf
mov
xchg
out
sahf
shl
aam
sub
test
cli
inc
in
daa
add
xor
lahf
inc
inc
leave
mov
ja
fldcw
std
push
nop
cmps
xchg
add
push
sbb
xor
add
movs
push
pop
cmps
mov
mov
popf
shld
cwde
sbb
lds
ficom
fstp
scas
test
jle
mov
mov
lea
fchs
cmps
jmp
mov
outs
dec
inc
repz
adc
nop
movs
xor
push
inc
adc
and
adc
pop
outs
mov
pop
jbe
cli
aam
rcl
push
pop
sbb
mov
in
fisttp
nop
jo
adc
aad
jno
push
mov
pop
pop
jmp
enter
scas
clc
sbb
adc
in
dec
cmp
cmc
int3
and
inc
pusha
cmps
xchg
out
sbb
enter
stos
rcr
sbb
add
hlt
std
stos
sbb
mov
lock
mov
inc
pop
(bad)
fdiv
sbb
jmp
sar
cmp
or
rcr
in
popa
adc
dec
mov
icebp
pop
xchg
xor
pop
test
in
fidivr
popf
je
push
jle
(bad)
cmp
adc
nop
sbb
mov
inc
cmps
mov
inc
test
adc
(bad)
xchg
xchg
pop
adc
mov
jno
int3
cmp
mov
mov
adc
or
dec
adc
mov
xor
retf
repnz
sbb
add
xchg
push
aam
and
fistp
movs
ficomp
adc
fsub
lds
pop
sbb
in
in
mov
fstp
push
hlt
sbb
xchg
(bad)
mov
bound
js
adc
cmc
into
push
test
out
sub
push
out
xchg
sub
mov
mov
ror
and
ret
ins
out
(bad)
mov
lds
js
jle
jns
popa
push
adc
or
test
adc
mov
leave
mov
stos
std
retf
out
sbb
or
mov
push
push
rcr
push
mov
retf
in
stc
sbb
mov
or
fcom
mov
bound
push
in
inc
pop
adc
sbb
dec
mov
adc
or
imul
adc
add
xor
adc
xor
fadd
jp
stos
mov
pop
inc
mov
ret
pushf
mov
push
js
xor
hlt
add
fadd
sub
push
or
lods
mov
xlat
clc
xor
ret
adc
cdq
pop
sbb
dec
retf
cmp
je
int3
outs
repz
imul
jge
and
call
aaa
into
adc
outs
jne
mov
sbb
jmp
dec
stos
adc
jnp
jmp
movs
dec
mov
adc
jmp
xchg
int3
ss
shl
enter
mov
mov
mov
pop
add
loopne
sbb
loop
call
ins
sbb
rcr
mov
icebp
mov
cmp
lods
jmp
addr16
and
fnstcw
dec
add
xlat
mov
mov
xchg
(bad)
adc
pop
adc
jecxz
cmps
cdq
jns
int
xchg
mov
leave
fistp
jecxz
cmp
es
popf
xchg
mov
arpl
adc
pusha
in
dec
inc
ds
xchg
jge
adc
and
(bad)
sbb
jae
mov
xchg
hlt
cli
add
idiv
std
jbe
mov
jne
sbb
adc
daa
add
test
and
not
jnp
jno
xchg
out
clc
fisub
repz
xchg
imul
call
sbb
adc
and
lods
aad
cmp
mov
or
(bad)
retf
pop
imul
sub
(bad)
sbb
jbe
mov
and
es
outs
arpl
ss
movs
stos
adc
push
adc
push
aaa
inc
cmp
mov
push
sbb
loop
enter
or
xor
fs
outs
dec
sahf
loopne
mov
adc
lds
mov
cmps
adc
std
lahf
jp
popa
adc
pusha
mov
sbb
mov
sti
push
cmp
sub
lods
in
(bad)
jp
ss
push
in
movs
scas
adc
sbb
push
dec
add
xor
adc
movs
xchg
outs
(bad)
and
hlt
retf
stos
pop
inc
sub
adc
xchg
pusha
(bad)
push
xchg
retf
and
adc
lods
stc
or
pop
test
call
pop
nop
cdq
add
pop
push
mov
pop
and
imul
lock
mov
cmp
test
xlat
xchg
adc
jmp
mov
je
data16
fdivr
adc
jecxz
movs
inc
sub
fdivr
fld
push
mov
pop
pushf
icebp
sub
adc
push
enter
fstp
mov
and
add
shl
and
sti
sub
adc
sub
addr16
adc
mov
cwde
dec
sbb
mov
or
adc
add
in
adc
imul
rol
add
mov
hlt
int3
lods
addr16
loop
pusha
imul
lds
adc
jecxz
rcr
and
push
adc
mov
jmp
loopne
adc
and
cwde
ret
mov
in
jmp
cli
inc
mov
lahf
aam
fcomp
adc
add
adc
mov
out
retf
adc
test
rcl
sbb
sbb
mov
jecxz
sbb
add
jno
sbb
(bad)
xor
out
xor
or
adc
test
adc
push
outs
fadd
fdivr
adc
popa
test
push
push
sbb
(bad)
cmp
jno
pushf
xchg
iret
push
mov
mov
fmul
lods
cmp
cmp
xor
aad
push
imul
ja
cmc
sar
mov
fs
adc
pop
push
sbb
int3
in
(bad)
pop
adc
or
push
push
adc
xchg
pop
sub
pop
push
fsubr
inc
jmp
cdq
xchg
push
mov
fs
cmps
mov
sub
aaa
imul
xchg
mov
mov
cmp
cmp
mov
stc
outs
or
in
stos
mov
std
repz
cmps
dec
sub
loopne
jmp
out
and
mov
(bad)
clc
cmps
inc
in
jae
shr
ja
xchg
mov
in
mov
into
jmp
ror
mov
mov
mov
fnstenv
jle
adc
lock
lods
clc
iret
xchg
sbb
and
fistp
or
jg
ins
dec
inc
mov
mov
jl
daa
into
psadbw
inc
and
jmp
out
dec
inc
push
push
aam
mov
in
test
retf
add
dec
dec
test
push
pusha
adc
shr
mov
adc
je
sub
fiadd
adc
fsub
les
add
adc
jecxz
or
out
dec
mov
pusha
jmp
push
popf
add
xor
lock
test
inc
xor
xor
das
test
dec
add
sti
int3
aaa
sub
add
sub
and
(bad)
adc
pushf
cmps
mov
inc
sub
cmp
pop
shr
aas
sbb
aam
lea
imul
(bad)
cmp
icebp
pop
cmp
push
sbb
and
repnz
jp
and
pop
ins
retf
cwde
jmp
leave
mov
hlt
dec
dec
mov
add
sbb
and
ret
push
div
ret
jb
(bad)
mov
imul
lahf
neg
push
xchg
push
xchg
ret
bnd
lahf
adc
leave
mov
jbe
int3
mov
ror
push
aaa
into
sti
inc
in
mov
(bad)
adc
repz
inc
imul
xchg
fdivr
xchg
loopne
pop
xlat
(bad)
cwde
loop
sbb
scas
push
add
outs
xchg
or
jle
leave
in
out
aam
aas
inc
xor
jmp
outs
je
popf
jo
cmp
ins
(bad)
mov
movs
xor
adc
fs
(bad)
push
mov
sub
xchg
pop
adc
frstor
outs
iret
adc
ins
aad
js
in
xchg
xor
adc
adc
sahf
std
xor
gs
fild
aam
jbe
push
jnp
cli
pop
jae
stos
add
(bad)
push
pop
and
fdiv
(bad)
in
mov
outs
shl
adc
repz
call
pushf
adc
pusha
jmp
push
cmp
retf
in
jecxz
jle
out
daa
xchg
bound
jmp
pop
in
pop
idiv
fcom
xchg
cmp
cld
sar
sub
sbb
call
or
rcr
mov
mov
sub
xchg
movs
(bad)
(bad)
out
cdq
pusha
adc
dec
and
aas
inc
push
sub
sbb
mov
add
jge
and
add
cs
pop
pushf
retf
loop
adc
enter
test
add
cmp
fiadd
sti
adc
adc
or
jl
ins
adc
clc
pop
sbb
or
addr16
adc
popf
xchg
push
pop
imul
sbb
sub
fs
mov
test
mov
test
sub
out
movs
or
bound
addr16
fdiv
movs
fwait
mov
ins
adc
adc
cmps
popf
out
or
das
jo
sti
xor
loop
and
pushf
ret
and
addr16
jae
mov
adc
sti
cmp
sbb
xor
aad
(bad)
dec
fist
pop
(bad)
lods
loopne
add
adc
pop
inc
in
ins
je
xor
in
shl
cs
test
mov
popf
pop
repz
retfw
hlt
mov
adc
pop
cwde
mov
adc
je
sbb
mov
cli
popa
popa
mov
cmps
add
dec
mov
adc
aas
repnz
jmp
arpl
sbb
xchg
idiv
jg
jp
ds
lea
fdivrp
les
adc
pop
sub
dec
rol
add
shrd
ins
test
iret
sub
lods
push
xor
repz
outs
xchg
pusha
pop
movlps
addr16
add
das
(bad)
call
adc
sahf
out
out
adc
mov
push
sti
dec
(bad)
push
adc
neg
cmp
clc
sbb
xchg
shl
sub
lea
inc
and
adc
leave
pop
call
sbb
aaa
cmps
outs
clc
dec
sbb
adc
lods
inc
je
fnstcw
add
adc
mov
stos
xchg
adc
out
fs
fiadd
pushf
or
pusha
mov
jmp
cmp
push
or
dec
pop
adc
mov
cmp
fsub
test
outs
ror
repz
pop
adc
or
and
adc
dec
pop
in
mov
adc
std
and
neg
sub
mov
popf
push
jle
pushf
repz
out
dec
div
dec
retf
leave
push
jno
gs
and
inc
mov
sbb
ror
aas
dec
adc
std
movs
(bad)
repz
cmp
mov
adc
retf
sub
adc
dec
xor
jnp
sbb
xor
mov
add
test
std
clc
loop
adc
pop
mov
push
pop
fbstp
adc
xchg
retf
push
adc
or
jb
jno
sbb
stos
mov
xchg
jmp
mov
pop
xchg
ja
add
or
mov
loopne
mov
adc
cmp
jge
enter
call
xchg
sub
mov
int3
jo
mov
cmp
movs
fst
xchg
call
xor
cmp
ins
jle
loop
and
xchg
adc
(bad)
fimul
cs
das
adc
(bad)
mov
mov
add
shl
lahf
out
rcl
mov
ins
push
xchg
fucomip
test
(bad)
cmc
test
pusha
je
add
xchg
test
sub
sahf
adc
and
imul
add
mov
adc
mov
fmul
dec
push
fldcw
in
inc
sbb
test
popf
pushf
cdq
jp
pop
inc
jl
mov
adc
iret
ficom
adc
mov
fmul
mov
adc
push
xchg
dec
cld
nop
pop
call
add
push
push
loopne
scas
fistp
out
fcom
outs
cmp
inc
test
data16
ins
bound
sub
outs
adc
mov
fs
jae
or
in
xchg
in
adc
mov
push
sar
jge
adc
mov
cmp
adc
sbb
push
stos
add
jge
mov
sub
dec
push
adc
dec
mov
rol
into
adc
data16
adc
test
movs
aad
iret
push
adc
mov
test
xchg
mov
inc
sahf
cmp
or
test
push
adc
scas
outs
je
pop
xchg
fcom
(bad)
loop
mov
int3
adc
out
xchg
aad
rcr
fidiv
cmp
xchg
and
sub
cdq
dec
(bad)
scas
gs
std
push
inc
cmps
test
je
sub
cmps
cmp
scas
mov
add
mov
cmps
xchg
pusha
imul
adc
dec
xchg
sbb
aam
inc
scas
arpl
xchg
popf
sub
or
xchg
sub
enter
imul
or
adc
loop
and
dec
mov
lea
push
leave
cli
adc
and
ins
bound
sub
ins
adc
mov
clc
jl
sub
sar
scas
in
mov
inc
mov
adc
fsub
mov
inc
adc
cwde
aam
push
xor
(bad)
lods
aad
das
nop
mov
xchg
jg
sbb
in
lds
sub
push
xlat
lods
cli
fucomip
mov
push
push
sub
fwait
call
sub
fs
ins
stos
sbb
(bad)
cmp
std
retf
ja
out
adc
es
loope
adc
out
das
inc
imul
aam
mov
outs
aam
iret
mov
sub
pop
out
push
test
out
cmp
in
push
gs
lods
adc
pop
mov
lea
inc
adc
fadd
fistp
inc
jmp
div
xor
jge
cmp
mov
add
jne
lods
or
movs
fs
adc
xor
je
jmp
cdq
addr16
pop
out
xor
mov
cli
test
xlat
aas
push
mov
adc
repnz
lahf
xlat
shl
adc
or
jbe
sub
in
pop
add
adc
out
sbb
adc
and
sti
call
add
in
popf
xchg
das
aas
test
mov
lock
bnd
sbb
lods
sbb
mul
inc
xor
sub
test
xor
test
cmp
xor
enter
ss
cmp
inc
imul
adc
sub
sbb
pop
push
scas
(bad)
shl
adc
sub
add
adc
pop
pop
je
push
xor
fnstcw
movs
(bad)
adc
and
cs
mov
xchg
lahf
fcom
out
unpcklps
leave
(bad)
push
adc
sub
retf
lea
fst
adc
out
or
add
ss
cs
jg
mov
mov
sbb
cmc
or
ficomp
in
sub
push
enter
add
pop
push
xor
rcl
rcl
sbb
imul
ins
push
call
rcl
fst
xor
mov
adc
mov
test
xchg
ins
aam
pop
add
addr16
or
adc
push
mov
jl
ret
movs
mov
dec
adc
jno
mov
(bad)
imul
mov
sub
pop
xchg
push
call
fist
xor
scas
popa
inc
add
inc
es
mov
in
fwait
sub
xor
push
adc
add
adc
xchg
(bad)
sbb
aaa
(bad)
(bad)
lods
xchg
push
mov
adc
xchg
jp
(bad)
repnz
fst
shl
cmp
and
fadd
fs
sbb
cmps
mov
sbb
(bad)
in
(bad)
adc
aas
sbb
popa
jbe
ds
ja
mov
pop
pop
iret
enter
sbb
mov
jns
mov
pop
push
ja
sbb
mov
outs
stos
mov
shl
in
ins
inc
pop
std
inc
in
or
and
fwait
adc
shr
jne
cmc
and
pop
adc
xchg
push
adc
adc
arpl
adc
ins
dec
jp
out
fdiv
sbb
mov
inc
das
mov
arpl
sbb
pop
add
les
loope
jnp
mov
sub
test
sti
out
test
dec
inc
(bad)
outs
push
adc
mov
cmp
mov
popf
loop
push
outs
popf
adc
retf
mov
and
out
sbb
mov
mov
push
and
inc
inc
mov
test
je
dec
add
popf
je
cmp
leave
fiadd
arpl
adc
or
call
xchg
pop
xchg
adc
xchg
xchg
mov
and
stos
ret
pop
arpl
enter
inc
dec
mov
imul
mov
xchg
repz
aaa
xor
es
aaa
test
nop
daa
sti
dec
inc
movs
aas
sbb
mov
fist
ins
pop
inc
out
retf
jle
cmp
lock
push
mov
sar
xchg
les
jmp
pop
mov
out
mov
adc
mov
(bad)
retf
pop
jae
push
ret
or
lods
loope
or
push
icebp
pop
scas
inc
jecxz
cmp
fdivr
mov
out
push
inc
rcl
fcomi
push
adc
in
sbb
adc
mov
or
sbb
out
gs
adc
sahf
push
js
push
pop
sbb
cmps
mov
dec
fs
test
mov
outs
not
in
pop
adc
ret
mov
ret
push
clc
imul
push
mov
push
iret
sbb
jno
stc
sbb
push
stos
aas
jmp
loop
std
adc
pop
hlt
addr16
mov
adc
xchg
sahf
(bad)
dec
or
cmps
jmp
iret
sbb
mov
push
sbb
rcl
or
sbb
sbb
jae
icebp
call
and
loop
jnp
adc
dec
retf
fisub
rol
xor
xchg
push
cmp
add
(bad)
ficom
push
adc
(bad)
test
mov
xchg
or
adc
dec
leave
imul
mov
aad
adc
xchg
sahf
daa
xor
inc
pop
fdiv
ds
cld
add
mov
ror
js
pop
push
cmps
mov
dec
dec
adc
jle
or
je
test
xor
adc
mov
mov
adc
pusha
dec
jmp
or
dec
lods
adc
cli
sub
aaa
pusha
cmp
sar
in
sbb
sub
mov
in
ret
imul
test
cmp
sub
adc
jbe
repz
pop
adc
mov
dec
sbb
mov
jp
and
bound
adc
mov
sub
adc
dec
jbe
fbld
ficom
fcmovne
inc
es
lods
and
push
in
sub
or
adc
test
hlt
pop
adc
cmp
int3
scas
not
in
mov
mov
pusha
jno
mov
cmp
jns
cmp
fs
repnz
aaa
or
loope
sbb
xchg
call
cdq
(bad)
push
add
ret
ins
adc
adc
inc
xor
push
repz
mov
(bad)
mov
rol
mov
sbb
push
(bad)
sti
inc
xchg
mov
adc
mov
xor
pop
sub
xchg
adc
ins
inc
inc
aaa
popa
lahf
xchg
js
sub
fs
adc
in
mov
and
imul
int3
jno
test
pop
or
in
and
hlt
mov
adc
(bad)
cmp
xor
cmp
mov
jge
retf
xlat
jge
push
fs
adc
add
mov
xchg
inc
inc
out
add
push
(bad)
sbb
sub
xor
or
rol
scas
add
jl
dec
sbb
cmp
(bad)
cmps
adc
push
(bad)
dec
adc
dec
adc
imul
mov
cli
jo
add
adc
je
xor
xor
xchg
xor
pushf
mov
scas
sbb
pop
stos
adc
(bad)
outs
mov
stc
cld
xor
cdq
jnp
mov
adc
pusha
bound
pop
or
add
mov
pop
sub
fisubr
adc
mov
or
not
mov
adc
xor
test
sub
xchg
jns
or
adc
mov
adc
add
cmp
xchg
add
shl
lods
cwde
xchg
sbb
icebp
ins
cmp
sar
xor
jns
mov
mov
or
push
loopne
sbb
mov
mov
adc
fwait
cdq
repnz
jb
add
cmp
push
cli
xchg
loopne
mov
push
jne
daa
icebp
xchg
out
xchg
mov
adc
cs
fbld
add
gs
hlt
inc
stos
fild
bound
push
add
enter
scas
test
xlat
lods
mov
ja
hlt
xchg
adc
sbb
shl
xlat
mov
leave
xchg
or
inc
cld
add
inc
push
retf
in
in
and
jbe
icebp
outs
addr16
lock
add
mov
pop
pop
adc
retf
in
mov
popf
(bad)
into
dec
ins
xchg
sub
xchg
push
pop
retf
sub
add
les
adc
inc
arpl
fist
inc
ja
and
int
in
jl
gs
fcmovnbe
std
stos
rcl
jb
call
push
xor
(bad)
sbb
xlat
dec
pop
jl
push
dec
add
mov
fsubr
cmp
pop
cmp
cmps
loopne
arpl
push
enter
sbb
or
mov
in
adc
daa
pop
fnstenv
jl
push
sti
and
aam
test
mov
out
or
ds
movs
cdq
sbb
adc
cdq
sub
add
js
es
push
mov
addr16
xchg
aam
adc
push
sbb
mov
and
arpl
idiv
sbb
sbb
jp
fsub
pop
cld
xlat
mov
retf
dec
repz
movs
into
or
dec
push
adc
enter
lods
sbb
retf
test
ja
loopne
int3
ins
jmp
popa
js
fst
sbb
jne
or
and
dec
in
jg
adc
dec
call
icebp
loop
gs
and
cwde
cmp
clc
ror
sbb
scas
or
movs
push
xchg
mov
xor
sbb
xchg
loopne
jae
popf
shl
inc
adc
gs
dec
int
or
pop
iret
adc
xor
sub
sbb
fidiv
xchg
jae
call
dec
inc
pusha
jl
mov
fiadd
push
cmp
out
shl
push
call
aam
int3
pop
cld
out
lea
push
retf
dec
push
(bad)
fs
adc
outs
push
sahf
aas
add
sbb
mov
adc
xchg
dec
loopne
cmc
aaa
adc
adc
enter
retf
and
aam
jmp
adc
lea
out
dec
mov
adc
das
aaa
(bad)
mov
repz
sbb
jg
mov
aam
mov
mov
daa
or
ds
push
dec
push
stc
shr
cwde
dec
scas
mov
mov
adc
neg
jne
adc
repnz
adc
sbb
and
pop
xchg
shr
adc
sub
mov
dec
push
repz
jno
cmp
pop
shl
adc
popa
stos
adc
mov
push
fadd
aas
mov
jne
sbb
xchg
mov
out
rcl
(bad)
or
test
call
lods
cdq
and
jbe
les
enter
sbb
inc
pop
fistp
in
cli
cwde
xchg
call
je
mov
jmp
fist
or
movs
adc
inc
daa
xor
scas
push
adc
or
mov
adc
and
lahf
fsub
movs
mov
aaa
dec
xor
jge
mov
rcl
sbb
jo
out
adc
cmp
cli
imul
and
xchg
xchg
cmp
mov
in
xor
xor
int3
xchg
cmps
and
hlt
or
adc
sbb
loope
sbb
pusha
jle
or
ret
add
sbb
aas
hlt
xor
pop
cmps
adc
call
adc
loop
cmp
repnz
cli
inc
adc
aam
and
push
aam
and
dec
daa
outs
mov
rcr
mov
xchg
arpl
adc
adc
out
jl
in
rol
push
xor
sbb
les
and
xchg
(bad)
in
xor
push
dec
adc
sbb
pop
inc
leave
mov
mov
ficomp
jmp
test
inc
std
pop
xchg
and
lds
pusha
mov
pop
test
fistp
std
data16
mov
cmc
cs
adc
stos
loop
pop
es
xchg
hlt
je
dec
sub
dec
not
cld
push
sahf
stos
inc
psadbw
je
adc
jno
cmp
loope
and
lods
rcl
inc
xor
shl
or
push
mov
or
push
push
loopne
push
and
test
cli
sar
hlt
imul
or
loopne
adc
xchg
popf
sar
or
xchg
gs
push
or
sub
cmp
adc
mov
mov
mov
ins
or
sbb
and
cmp
dec
and
fwait
mov
adc
or
scas
cdq
neg
adc
pop
xor
aaa
ror
and
add
movs
mov
jmp
push
cli
imul
inc
cmp
mov
pop
cmps
sti
xchg
lods
hlt
mov
popa
retf
add
aad
daa
push
jecxz
adc
mov
ja
cwde
pop
mov
jle
add
sub
mov
inc
retf
adc
stc
push
xchg
out
jo
or
xor
cmps
mov
inc
cmps
push
(bad)
outs
(bad)
sbb
dec
dec
rcl
xchg
sbb
push
mov
adc
mov
rcr
repnz
mov
jo
into
test
adc
leave
sar
xor
push
repz
cdq
dec
dec
mov
adc
nop
mov
adc
das
out
cmp
jb
aam
ins
xchg
push
lods
jne
adc
adc
push
(bad)
inc
pop
adc
cmp
rcr
adc
sti
inc
cmp
adc
out
aam
loope
push
push
mov
mov
out
lds
test
adc
ins
lahf
retf
sub
push
xor
xor
sbb
dec
ins
jne
pop
push
jnp
arpl
pusha
mov
xchg
mov
call
push
out
xchg
sbb
inc
loope
mov
into
xor
out
jmp
cmps
mov
in
or
jmp
les
stos
rcl
xor
mov
in
jl
lds
add
mov
sbb
mov
iret
adc
pop
fwait
mov
out
cli
xor
and
imul
add
cmc
adc
add
(bad)
xchg
adc
aas
pusha
cmp
daa
es
ins
push
cmp
jmp
call
jl
add
test
stos
ins
add
cmp
mov
shl
mov
adc
(bad)
mov
loop
xchg
mov
fwait
inc
iret
es
imul
cmp
pushf
or
push
(bad)
fisttp
mov
xor
jmp
test
and
les
ret
imul
out
retf
in
cld
cmp
push
std
sbb
cwde
and
hlt
jne
imul
jbe
xchg
xlat
nop
jge
call
mov
fs
add
cmp
call
xchg
in
imul
and
mov
cmp
stc
mov
dec
in
int3
cmp
fbld
mul
std
cld
(bad)
sahf
ss
xchg
aas
adc
out
retf
sar
jbe
movntq
pop
in
push
por
mov
push
cmp
push
xor
daa
ret
push
xchg
xchg
pop
jle
les
mov
pop
cmps
and
call
push
cmp
cld
xchg
aam
add
inc
mov
jae
data16
rcl
add
mov
mov
scas
xchg
and
adc
imul
hlt
aam
sbb
out
fadd
inc
les
lock
and
cld
cmp
cmp
cdq
daa
sub
fnstcw
leave
mov
mov
push
mul
inc
int3
or
mov
sub
sub
jb
addr16
aam
outs
mov
test
retf
(bad)
in
mov
outs
test
add
stos
dec
rcr
outs
inc
adc
loop
dec
iret
mov
mov
loope
inc
jnp
call
mov
sub
pop
adc
adc
xlat
aad
arpl
push
jl
cld
adc
cmc
adc
call
movs
xor
inc
std
outs
je
cmp
push
push
sbb
imul
enter
pop
xor
in
jl
mov
mov
pop
jmp
xor
xchg
mov
sbb
push
adc
adc
fsubr
add
leave
or
shl
retf
cld
hlt
mov
adc
cdq
bound
sbb
sub
push
rcl
data16
adc
xchg
jg
enter
mov
in
adc
push
repz
stc
pop
scas
mov
sub
lahf
adc
jge
dec
(bad)
pop
das
push
adc
inc
cli
icebp
int3
and
sub
(bad)
xlat
leave
mov
lahf
jmp
cwde
jmp
dec
pop
sub
mov
mov
cs
test
in
sub
jae
mov
adc
call
and
push
popa
rcr
data16
or
jb
ins
xchg
pop
adc
rcr
cmp
int
jp
jecxz
lea
hlt
call
sub
cmps
fsubr
adc
(bad)
mov
xchg
xor
call
ins
cli
xchg
mov
lds
in
xchg
das
ins
addr16
push
(bad)
arpl
and
adc
shl
xchg
adc
pusha
xchg
mov
cmp
leave
cmp
or
inc
mov
sbb
shr
or
aam
push
adc
cs
cmp
in
inc
adc
stos
dec
test
xor
das
cli
jle
out
int3
inc
mov
adc
out
test
call
pop
bound
and
xor
add
sbb
arpl
or
sbb
add
xchg
and
add
xchg
inc
aaa
in
mov
pop
pop
(bad)
call
jl
fadd
pop
inc
loopne
mov
popa
retf
push
jmp
push
bnd
adc
das
sbb
mov
and
sub
sub
push
(bad)
adc
sub
and
cmp
cld
mov
mov
adc
cmp
adc
mov
fs
pop
push
push
inc
and
adc
adc
ret
mov
adc
push
push
not
and
in
in
mov
push
add
or
jg
test
adc
fist
cmp
sbb
ins
(bad)
(bad)
jae
pusha
pop
adc
lods
(bad)
fidiv
arpl
rcr
scas
repnz
stc
jp
fsub
cdq
or
adc
rcr
pop
mov
clc
push
inc
xor
jmp
aam
jnp
daa
lock
or
imul
adc
xor
popa
xor
scas
xchg
jg
aad
iret
pop
push
out
jne
add
mov
push
or
sbb
xchg
repz
fwait
aam
je
repnz
mov
in
das
sub
cmps
mov
pop
imul
inc
jp
mov
nop
jo
mov
jno
shl
ret
pop
xchg
xchg
jge
push
adc
pop
rcl
adc
mov
aaa
sbb
and
shr
mov
jle
and
push
fcom
pop
jo
add
popa
push
and
lock
mov
aaa
dec
fucom
xchg
sar
out
mov
out
and
push
inc
mov
repnz
les
adc
enter
inc
popa
aam
sub
xchg
mov
aas
sub
fild
fsubr
imul
pop
push
and
adc
adc
hlt
int
pop
in
loope
adc
push
xchg
ss
cmp
jns
lods
stos
xchg
dec
pop
fst
loope
mov
lock
sbb
sbb
adc
mov
jb
dec
mov
cmp
push
add
mov
in
adc
lahf
fsubr
adc
jp
imul
out
js
adc
repz
mov
adc
scas
mov
into
pop
popa
adc
add
clc
push
dec
es
test
(bad)
aad
adc
mov
cmps
adc
and
sbb
adc
(bad)
xchg
mov
jb
mov
rcl
xor
cmp
xor
daa
dec
test
jo
imul
hlt
repnz
lahf
loopne
pop
dec
mov
and
clc
add
pop
push
movs
adc
dec
(bad)
nop
and
dec
cwde
sahf
adc
xchg
sbb
xchg
jmp
lahf
rol
cdq
test
xor
out
adc
dec
std
cmp
int3
and
mov
jp
loope
stos
push
aaa
ret
mov
push
jmp
sub
push
aad
add
mov
mov
push
xchg
add
fist
fadd
jmp
aad
adc
(bad)
xchg
fcmove
or
sbb
inc
mov
cmps
adc
or
jnp
adc
mov
cmps
dec
in
sete
push
xlat
retf
lahf
into
mov
or
sub
mov
fidivr
aad
mov
rol
push
and
xor
adc
retf
imul
or
neg
pop
mov
aam
lods
(bad)
out
and
mov
mov
fnstenv
jae
push
mov
or
inc
fwait
movs
add
leave
jo
mov
or
inc
ds
add
pop
(bad)
push
daa
and
xor
jp
xor
pop
cli
out
adc
lds
xchg
mov
mov
jmp
pop
mov
xchg
xor
sbb
ret
xchg
div
gs
jbe
(bad)
(bad)
shl
into
fnstenv
pop
cmp
dec
leave
adc
pop
cmp
cs
call
dec
jnp
aad
test
adc
(bad)
pusha
lods
(bad)
or
pop
xchg
inc
jmp
es
cmps
mov
push
ror
xlat
xor
adc
pop
inc
aad
retf
push
(bad)
pop
out
xor
dec
sub
fldz
jle
pusha
sub
or
push
jne
push
push
mov
or
inc
xchg
sbb
int3
fxtract
pop
pop
outs
sub
gs
icebp
retf
fcmovne
pop
popf
mov
push
cld
mov
cmp
int3
add
sbb
jg
test
add
jmp
shr
movs
adc
mov
ficom
or
adc
adc
nop
adc
test
sbb
adc
lds
dec
adc
dec
fdiv
jmp
fstp
inc
or
mov
push
jmp
sub
test
mov
jmp
inc
ins
int
add
sbb
sar
mov
xchg
jns
xchg
dec
jmp
add
movs
inc
enter
stos
mov
retf
inc
sti
aad
aaa
mov
mov
xor
push
dec
adc
stc
aas
mov
arpl
ja
xor
out
mov
inc
xor
or
jle
loopne
in
push
pop
sub
je
retf
rcr
loopne
out
shr
pop
popa
test
add
jg
mov
jmp
ret
fld
adc
sti
fs
pushf
add
inc
lock
pop
jns
sbb
ins
adc
xor
jnp
out
adc
mov
push
sbb
xchg
popf
sti
mov
call
pop
adc
add
dec
jmp
fadd
call
mov
sbb
xor
mov
jle
pop
or
je
pop
dec
int3
or
cmps
out
call
pop
fstp
nop
and
aas
(bad)
out
push
retf
inc
or
enter
gs
test
retf
scas
or
fs
js
adc
pminub
les
es
push
fisttp
push
pushf
lods
adc
out
in
int3
les
lock
adc
(bad)
pop
sbb
add
test
outs
push
in
xchg
hlt
xor
or
dec
sti
mov
retf
mov
xchg
js
mov
lds
cdq
hlt
jge
adc
fldenv
jno
fisttp
adc
cmc
popf
mov
in
sub
push
dec
adc
or
push
pop
adc
mov
icebp
(bad)
cmc
push
stc
hlt
dec
test
adc
into
pop
push
daa
fist
popa
loope
lods
or
into
adc
mov
pop
loop
rcl
sub
in
lea
adc
jge
jmp
xchg
and
jmp
das
jle
pop
sbb
xchg
out
jo
in
cmp
adc
xchg
inc
idiv
dec
adc
push
dec
cs
xor
ret
sbb
jnp
into
test
imul
and
test
adc
mov
ins
ror
adc
or
cmp
rol
push
pop
aam
out
(bad)
adc
imul
jbe
push
pop
adc
sub
mov
xor
jae
push
dec
xchg
bound
push
jae
loopne
inc
in
aas
sti
and
xor
cmps
out
cwde
adc
inc
or
(bad)
in
cmp
jne
scas
and
stc
shl
sbb
popf
dec
mov
mov
cmp
shl
mov
adc
test
loop
mov
cmps
adc
dec
out
pop
cmpps
cli
xchg
cmp
stos
push
cld
outs
popa
call
push
fidiv
cmp
jmp
ins
xchg
cli
adc
push
(bad)
inc
lods
icebp
fsub
test
sbb
imul
sahf
inc
aam
(bad)
outs
or
adc
mov
ffree
loopne
adc
adc
mov
sbb
ds
xchg
inc
mov
jnp
mov
ror
in
cwde
arpl
add
jecxz
js
xor
das
xchg
loopne
jl
arpl
inc
cmp
pop
adc
stc
cmp
outs
(bad)
adc
mov
lock
ins
adc
jmp
rcr
ret
mov
mov
adc
mov
or
jno
out
adc
call
loop
push
push
rol
pop
mov
sbb
pusha
push
stos
or
mov
dec
adc
xor
fmul
add
xchg
push
pop
mov
jmp
(bad)
xlat
imul
mov
mov
retf
pop
fwait
mov
adc
out
fst
or
aam
mov
jne
xchg
and
pop
ficom
dec
push
push
sub
movs
cmp
sub
cli
sar
xor
jle
jae
sub
pop
xchg
dec
sub
cwde
stos
pop
xchg
out
ja
aaa
adc
jnp
jmp
xor
sahf
and
adc
adc
cmc
in
lods
adc
push
jno
fsub
and
stos
xor
or
(bad)
lds
fimul
fldenv
out
movs
push
scas
or
adc
mov
cmc
mov
mov
fsub
push
sbb
xor
je
(bad)
sub
stc
adc
aaa
add
loope
fadd
pop
fcomip
mov
retf
dec
push
and
jmp
mov
lods
mov
or
dec
jne
add
icebp
aad
fbld
sub
adc
sub
cli
adc
dec
push
cmc
push
cld
push
sbb
pop
cmc
and
cli
pop
mov
jmp
movs
sub
stc
rcl
ds
jmp
inc
adc
cli
dec
xor
out
adc
xchg
inc
daa
jbe
sub
add
xchg
or
imul
adc
popa
dec
js
test
popf
ds
stos
aas
adc
lds
arpl
push
xor
dec
cmp
jns
movs
inc
fidiv
std
lods
sbb
or
ret
fdivr
mov
pop
rcl
push
xor
out
sbb
and
je
fwait
imul
std
inc
cmp
inc
mov
mov
jmp
jg
and
add
outs
mov
jae
mov
mov
xchg
jb
int3
retf
in
jecxz
shr
sub
sub
ins
adc
add
adc
push
sbb
inc
arpl
shl
fdiv
jmp
xor
mov
push
hlt
push
sar
sbb
adc
(bad)
out
cmps
mov
repz
sub
or
adc
push
cmp
add
mov
push
jne
lods
test
jg
jle
fild
inc
inc
xchg
(bad)
retf
xlat
jmp
int3
sub
mov
pop
dec
xchg
aas
jmp
gs
int3
scas
cmp
cmps
outs
(bad)
stos
pop
call
std
adc
jmp
loopne
sbb
popa
fld
mov
xlat
movs
jb
adc
cmp
out
lods
(bad)
fist
add
jl
sti
mov
frstor
xor
add
into
sbb
(bad)
retf
jne
shl
jmp
aam
mov
lods
sub
adc
push
aam
rcr
add
in
(bad)
shl
adc
or
je
sahf
xchg
ret
imul
fisub
pusha
pop
in
sbb
jae
arpl
mov
pop
(bad)
mov
je
jo
pusha
in
push
(bad)
test
mov
lock
in
or
push
sbb
or
inc
jae
pushf
lods
pop
push
cmps
sub
movs
adc
inc
dec
and
retf
jmp
daa
xlat
mov
(bad)
imul
sbb
mov
adc
repz
adc
cmps
ss
pop
scas
ret
cld
dec
adc
and
mov
adc
addr16
or
adc
sbb
or
call
js
addr16
or
adc
fidivr
fwait
or
aas
xor
jbe
mov
fcom
aam
jmp
mov
fmul
or
jge
(bad)
hlt
popf
mov
sbb
jl
adc
add
out
stos
jge
cld
inc
mov
lea
add
(bad)
das
adc
out
fistp
push
and
mov
daa
pop
and
in
out
arpl
data16
out
ins
push
stc
iret
sub
stos
mov
adc
shr
mov
cld
idiv
or
adc
adc
mov
out
xchg
enter
mov
sti
adc
sub
pop
push
movs
xchg
icebp
mov
dec
adc
adc
pop
adc
lods
xlat
adc
sahf
jbe
sub
stos
in
sbb
repz
xchg
and
int3
pop
ds
out
bound
dec
sar
adc
inc
(bad)
adc
dec
rcr
jnp
out
cwde
adc
cmps
xlat
mov
mov
fmul
pop
js
enter
shl
pushf
or
fisub
loopne
or
(bad)
les
push
in
pop
cmp
jae
(bad)
adc
xchg
mov
mov
outs
add
mov
xchg
hlt
cmps
or
call
inc
(bad)
cmp
mov
mov
int
je
call
and
test
jl
fsincos
aaa
jbe
fsub
pushf
pop
pop
and
adc
adc
sahf
(bad)
aas
test
pop
outs
cdq
mov
mov
xchg
clc
es
into
jo
in
push
movs
enter
fadd
mov
(bad)
test
xor
clc
fiadd
sti
outs
das
add
or
ja
retf
int3
adc
sub
(bad)
and
pop
sub
sbb
jmp
call
or
or
dec
jecxz
jno
adc
in
shl
mov
(bad)
sub
fist
inc
cmp
popf
xchg
xor
inc
out
push
xchg
shl
jns
(bad)
and
mov
fldenv
in
gs
movs
out
xchg
out
xor
mov
and
xor
cmc
push
movs
inc
adc
stc
sbb
(bad)
fild
xchg
int3
cmps
and
mov
cmp
mov
xor
jmp
ret
dec
jne
push
mov
pop
push
xor
dec
mov
mov
cmp
movs
iret
ins
rcl
inc
mov
inc
mov
rcr
imul
in
cwde
cmp
daa
fiadd
add
adc
lods
and
(bad)
or
fisubr
ds
pop
adc
lods
in
xchg
test
sbb
sbb
dec
adc
sti
jmp
call
ror
push
add
in
jb
mov
cmp
xor
pop
adc
inc
pop
hlt
or
cmp
lock
dec
and
pop
lods
mov
or
out
adc
ss
pop
mov
ins
stc
movs
fbld
(bad)
mov
adc
lods
and
repz
ins
adc
stos
adc
xor
jl
dec
imul
and
xchg
xor
mov
sbb
jmp
push
sbb
out
jecxz
push
mov
and
cmps
aam
(bad)
icebp
inc
outs
popa
adc
ret
out
xchg
out
lahf
call
bound
xchg
sbb
adc
adc
scas
gs
stc
repnz
not
mov
(bad)
(bad)
dec
adc
jmp
fcom
inc
xor
dec
bound
je
cmp
jl
adc
push
outs
sub
jle
aaa
xor
bound
popf
dec
ins
clc
sub
adc
call
adc
mov
pop
into
je
inc
lods
xor
fs
inc
dec
outs
jl
ret
ds
xchg
adc
movs
test
jne
pop
call
add
mov
mov
call
adc
lods
push
jge
(bad)
mov
call
pop
mov
les
in
inc
jmp
mov
loope
adc
jp
shl
in
test
lock
xlat
inc
js
pusha
ss
(bad)
push
mov
xchg
xchg
xchg
rcl
jecxz
add
mov
movs
or
inc
call
add
ja
add
mov
pop
stos
pop
adc
sar
jecxz
mov
xchg
xchg
popf
adc
inc
mov
shl
mov
sub
inc
pusha
sub
sbb
ficomp
int3
mov
or
cdq
retf
mov
aas
xchg
into
std
and
add
mov
cwde
xchg
inc
jo
adc
add
xchg
je
cmc
inc
sbb
inc
xchg
loop
and
out
movs
sahf
sub
push
jmp
(bad)
psubb
fucomp
shl
add
sbb
inc
call
add
push
mov
lahf
das
outs
lds
jecxz
sbb
dec
int3
aaa
bnd
sbb
sub
sbb
jmp
pop
arpl
jecxz
inc
jnp
add
mov
mov
inc
pop
movs
inc
pop
ins
aaa
stos
int
mov
or
retf
sbb
adc
leave
rcr
pop
sub
out
jmp
pushf
sahf
arpl
add
push
adc
jnp
lods
adc
mov
movs
pushf
fwait
adc
or
xor
mov
xchg
rcr
pusha
cdq
cmp
(bad)
rol
fsub
push
out
inc
dec
and
es
js
es
pushf
jl
add
mov
xchg
sub
cmp
mov
and
sub
fcomp
mov
push
xor
add
in
loope
push
sbb
adc
adc
xor
adc
xor
xor
mov
adc
std
xor
stos
push
cmps
pop
pop
fsubr
xlat
in
sbb
jnp
cld
inc
test
adc
and
cmp
cmp
adc
jl
push
in
jg
pop
jns
mov
and
arpl
test
aad
popf
add
adc
xchg
(bad)
outs
repnz
pushf
in
add
or
and
adc
xchg
pop
xor
into
jmp
test
pop
popf
inc
test
sbb
and
loopne
movs
push
retf
cmc
pop
sbb
adc
fadd
loop
mov
hlt
dec
jmp
mov
repz
int3
cld
into
jmp
sub
arpl
sub
xchg
push
add
fs
xchg
retf
imul
fwait
xchg
xor
mov
cmps
mov
dec
sbb
out
(bad)
xchg
push
sbb
rol
push
push
fisub
adc
outs
dec
inc
mov
aas
adc
aam
stos
jns
mov
fidiv
cli
iret
or
rol
adc
arpl
and
test
hlt
iret
cdq
sbb
aad
jne
loop
sbb
(bad)
ficom
xchg
mov
js
sar
rcr
push
and
fadd
pusha
out
adc
ja
inc
outs
and
pop
aas
cs
sub
iret
pop
sub
and
dec
mov
mov
ss
push
adc
mov
adc
pop
push
inc
nop
test
ret
ds
out
mov
adc
hlt
or
cdq
in
inc
js
ror
and
xchg
and
jmp
in
mov
es
test
mov
push
loopne
aaa
adc
test
mov
mov
ds
(bad)
repnz
arpl
mov
adc
sbb
or
mov
xor
and
mov
or
adc
mov
adc
fiadd
mov
bnd
dec
imul
clc
inc
mov
ins
(bad)
sub
xlat
pop
mov
push
in
aad
sbb
dec
lods
mov
(bad)
mov
sar
sub
mov
dec
fld
hlt
cdq
pop
sbb
sub
pop
sbb
cmova
add
xor
pop
cmp
adc
xchg
add
and
movs
rcl
test
dec
imul
test
dec
das
ss
movs
pop
rcr
sbb
rcl
cmp
fstp
adc
mov
lock
mov
test
ficom
jae
ins
adc
movs
cmp
(bad)
xor
xchg
adc
dec
pusha
xor
and
push
adc
push
adc
call
out
xchg
xchg
add
scas
gs
or
mov
int3
mov
or
hlt
jl
sbb
pop
cld
(bad)
cmp
in
(bad)
jmp
push
fstp
add
in
cmps
adc
inc
inc
sub
aad
lea
xchg
push
(bad)
(bad)
outs
xor
in
mov
push
mov
sub
xchg
push
je
pop
sbb
adc
mov
lds
es
dec
dec
movlps
jo
mov
scas
stc
inc
int3
xlat
pop
fistp
mov
push
std
retf
popf
push
adc
jmp
adc
cmp
bound
cmp
das
xchg
jns
not
enter
mov
fadd
jne
pop
add
adc
ja
loopne
ins
and
jmp
add
fs
adc
jns
ds
dec
scas
and
lahf
jecxz
pop
xchg
pushf
mov
pop
call
dec
in
jno
sbb
pusha
adc
lea
sub
aam
xchg
test
jne
or
(bad)
neg
xor
neg
or
adc
sub
and
adc
retf
into
mov
mov
dec
enter
push
test
adc
add
ss
mov
or
fisub
add
mov
adc
(bad)
dec
adc
int3
scas
mov
test
fdivr
jecxz
adc
push
push
cli
inc
(bad)
gs
addr16
sub
pushf
sbb
mov
push
adc
pop
inc
aas
add
arpl
mov
add
in
mov
call
or
test
mov
sub
push
fist
cli
movs
adc
and
sub
push
imul
call
mov
xchg
xchg
xchg
push
stos
xchg
inc
mov
jl
shr
ins
(bad)
sti
sub
std
in
test
in
pop
loopne
fdivrp
add
fnstcw
adc
pop
xor
aam
jle
xor
popa
in
fsub
inc
add
imul
les
out
mov
adc
push
bound
mov
les
test
mov
jnp
(bad)
inc
gs
fwait
push
push
aas
or
mov
dec
arpl
fs
stos
sub
jnp
adc
lea
out
adc
add
sub
dec
in
fadd
call
inc
jne
in
add
adc
pop
in
or
adc
std
repz
mov
scas
pop
jl
inc
lods
cs
adc
and
(bad)
cdq
ja
adc
pop
sbb
aam
pop
and
jmp
pop
adc
pushf
std
adc
adc
fld
sbb
adc
sbb
or
adc
stos
and
test
cs
(bad)
fstp
cmp
adc
add
aam
rcl
dec
daa
out
mov
dec
cli
sbb
jb
xor
adc
push
in
pusha
push
ins
mov
sbb
retf
out
hlt
inc
inc
not
cmps
movs
dec
iret
mov
adc
jecxz
dec
rcl
inc
js
cmc
repnz
mov
aaa
sub
pop
add
stos
jge
(bad)
in
pusha
pop
adc
movs
int
sub
call
cli
inc
imul
je
adc
mov
call
mov
test
sub
adc
loopne
out
add
xchg
adc
test
pop
out
mov
adc
push
cmp
adc
(bad)
jmp
mov
cmp
retf
xor
cli
dec
cld
in
jb
sbb
xchg
repnz
cmps
sar
adc
fbld
dec
adc
hlt
jp
loop
jbe
sbb
add
jmp
xchg
mov
pop
(bad)
sbb
cmp
test
lds
adc
mov
sub
call
lahf
stos
push
retf
adc
repz
pop
cmps
jo
jnp
xchg
sub
inc
xchg
jno
cmp
cmp
jmp
hlt
rcl
jl
popf
es
or
adc
ret
cmps
jnp
call
push
cmp
out
fcom
in
jg
out
sub
in
adc
dec
dec
push
out
fs
mov
enter
ins
jnp
not
movs
(bad)
call
add
mov
adc
call
sbb
cld
cmp
jno
fisttp
mov
sbb
retf
jl
(bad)
clc
xlat
aad
(bad)
(bad)
sbb
adc
pop
leave
pop
xchg
out
sahf
clc
data16
dec
and
xchg
push
adc
add
fs
shl
jmp
or
adc
dec
test
add
mov
cmp
js
cli
jb
and
adc
in
dec
xlat
pop
add
data16
rcr
xchg
std
cmp
enter
jge
mov
sub
add
jno
int3
adc
and
cmps
(bad)
add
or
je
cmps
add
fidivr
movs
ds
loop
movs
fstp
pop
pop
imul
xchg
xchg
mov
rol
arpl
adc
and
push
xor
push
mov
xchg
jne
and
(bad)
push
aaa
sub
icebp
adc
jnp
pop
cld
not
or
sbb
retf
jae
jno
sahf
or
mov
mov
jmp
ins
add
adc
gs
cs
adc
in
(bad)
int3
pusha
enter
cmp
(bad)
sub
or
test
leave
cmps
mov
mov
sub
xchg
xchg
cmp
out
adc
neg
retf
xchg
xor
cmp
loop
lock
jo
pop
shl
and
retf
cli
jle
fadd
sbb
stc
inc
(bad)
fisubr
movs
xchg
sbb
add
out
hlt
ja
add
mov
clc
sbb
cwde
inc
adc
pop
arpl
test
mov
push
xor
and
add
sbb
rcl
pop
or
sbb
xor
push
int3
lea
movs
dec
add
aas
push
leave
not
bound
xor
push
jns
mov
push
adc
or
icebp
and
iret
xchg
mov
push
cmp
xchg
or
call
icebp
adc
shl
jne
xchg
jg
xor
inc
adc
lea
fwait
call
push
adc
sub
out
sub
das
cs
mov
add
push
sbb
lods
stos
pusha
mov
sbb
test
and
aam
sti
push
mov
mov
sub
mov
inc
sub
push
sbb
add
jecxz
mov
cmp
and
add
(bad)
mov
test
mov
mov
iret
push
xor
jo
or
movs
sbb
int3
hlt
sahf
sbb
aam
jle
mov
lea
pushf
sbb
adc
repz
jmp
rcl
pop
pop
mov
lods
push
movs
aam
fst
jp
test
push
std
out
fadd
test
aas
push
aam
xchg
pop
outs
adc
stos
shl
or
jns
les
push
pop
movs
stos
push
sbb
lods
aaa
and
jno
mov
dec
call
ror
pop
mov
dec
enter
outs
rol
fsubr
cmp
mov
mov
unpcklps
pushf
dec
xchg
in
or
mov
(bad)
stc
inc
mov
adc
jge
push
mov
xchg
sub
jb
dec
ret
inc
add
inc
adc
add
mov
mov
pop
add
or
cli
daa
dec
ds
adc
xor
sar
fidivr
movs
aas
adc
mov
pop
or
pushf
bound
les
adc
inc
and
adc
mov
mov
stos
xor
dec
inc
(bad)
add
mov
out
loop
rcl
inc
icebp
push
outs
dec
(bad)
push
cmp
imul
dec
jg
jmp
ins
cmps
jge
xor
loopne
cmp
ins
dec
inc
or
inc
fadd
inc
xchg
loope
inc
sbb
test
sub
fild
je
shr
cdq
fs
call
(bad)
retf
out
push
jl
adc
popf
mov
sahf
and
leave
or
iret
mov
adc
ror
stos
mov
adc
xchg
add
jnp
and
pushf
mov
adc
test
xchg
add
push
xor
push
addr16
mov
repz
outs
sub
adc
(bad)
(bad)
jp
adc
movs
sbb
(bad)
adc
loopne
cli
xor
sub
jmp
pop
cld
(bad)
adc
loope
xchg
xor
dec
hlt
mov
sbb
or
or
jge
(bad)
rcr
rol
ret
mov
adc
xchg
xchg
clc
icebp
retf
stc
les
inc
test
dec
add
push
in
adc
or
mov
rol
xchg
adc
dec
cmps
jmp
cli
ficom
cwde
and
mov
xchg
mov
mov
cmp
inc
lahf
jp
inc
loopne
adc
in
lds
adc
jle
xlat
sub
rcl
icebp
test
inc
pop
sbb
mov
mov
lahf
lahf
and
adc
pushf
mov
jg
fidivr
mov
popa
call
(bad)
xlat
(bad)
pop
repnz
je
fdivrp
adc
push
fadd
dec
ds
xchg
stc
push
gs
cmps
div
mov
xchg
inc
xchg
stos
loopne
add
push
jp
loope
fwait
adc
xchg
and
cs
dec
pop
xor
pop
xchg
jg
cld
xor
adc
mov
repz
das
jns
or
jb
lahf
adc
mov
daa
or
adc
pop
stos
mov
pop
pop
add
sbb
sub
mov
adc
mov
popa
loope
dec
adc
fild
in
scas
cmp
jns
pop
stos
sbb
sub
loop
lods
or
aam
xchg
mov
add
adc
adc
dec
pop
jg
jne
test
mov
idiv
shr
into
adc
jg
pop
sub
popf
pop
fwait
pop
push
adc
mov
inc
mov
inc
mov
jecxz
in
movs
xchg
and
adc
test
cld
pusha
jmp
adc
clc
mov
xchg
push
lock
repz
xchg
push
add
sub
js
push
adc
retf
hlt
in
push
pusha
mov
pop
xor
adc
xchg
test
(bad)
cli
mov
lahf
test
mov
push
popf
jecxz
and
mov
cmp
cld
pop
lods
repz
repnz
jnp
retf
mov
jg
lds
inc
in
nop
add
sbb
loop
test
sub
maskmovq
mul
adc
imul
movs
jno
repz
cld
xor
mov
gs
clc
aaa
pop
jecxz
push
add
or
pusha
stc
xor
and
jmp
mov
(bad)
int
cmp
jmp
retf
inc
ror
nop
push
cli
fwait
push
out
outs
imul
int3
in
(bad)
pop
cli
sti
movs
mov
add
jb
daa
loopne
xor
or
pusha
jmp
js
adc
xor
cmp
cli
mov
sbb
add
jg
aaa
test
ret
ins
scas
clc
cmp
adc
in
test
mov
sub
sub
dec
cs
leave
sbb
outs
lock
pop
mov
mov
or
adc
sbb
lods
xor
call
cld
(bad)
pushf
pop
adc
pop
push
pop
adc
idiv
inc
int
adc
and
fsub
daa
or
imul
jne
inc
push
aas
adc
test
sbb
pusha
pop
scas
repnz
in
or
fisub
jge
adc
sahf
neg
pop
or
cmc
and
jmp
mov
pop
push
cmp
in
out
addr16
push
push
dec
daa
pop
and
mov
push
add
ds
cmp
std
inc
adc
add
ss
bound
cmp
adc
pop
dec
inc
lods
pop
adc
stc
mov
or
clc
sar
loop
adc
push
jno
mul
shl
push
cmp
sbb
cld
push
mov
pop
mov
arpl
mov
add
inc
sub
add
daa
sub
xor
or
jp
jmp
xchg
test
gs
clc
adc
cmp
adc
mov
and
jo
loop
in
or
adc
cmp
clc
retf
jb
adc
adc
(bad)
mov
add
hlt
cli
sbb
outs
js
cld
fs
retf
rcl
ins
jbe
cmp
xor
adc
add
pop
shl
lods
inc
mov
push
xchg
xchg
and
jne
test
rol
sub
cmp
cld
sar
xchg
dec
add
inc
addr16
inc
xchg
aas
mov
stos
cmp
out
rcl
mov
clc
sub
hlt
dec
gs
hlt
xor
mov
jge
adc
arpl
sub
stos
mov
pop
mov
icebp
adc
idiv
daa
dec
inc
sub
sbb
ret
adc
adc
shl
and
scas
les
nop
rcr
xlat
hlt
xor
in
add
push
mov
repnz
jmp
push
(bad)
dec
adc
shr
pop
out
push
cmps
loop
ret
mov
mov
mov
push
hlt
sbb
adc
fs
adc
mov
or
hlt
retf
in
lahf
sar
or
mov
scas
sahf
add
cld
adc
iret
call
or
cmp
rcl
push
pop
jo
daa
sbb
jl
ins
sbb
pop
outs
call
jno
stc
push
mov
push
mov
inc
xor
sbb
adc
popa
push
inc
mov
call
test
jp
movs
push
test
add
cli
fwait
adc
xchg
ds
cld
add
fs
push
cmp
jo
cmp
dec
pop
sbb
jecxz
in
out
cmp
addps
adc
and
sub
test
in
cwde
inc
(bad)
mov
or
pop
jg
sbb
addr16
mov
cmp
pop
and
and
xchg
in
mov
inc
adc
add
sbb
(bad)
dec
adc
xchg
fstp
scas
int3
loope
push
aad
fdiv
xor
and
mov
cwde
jae
aaa
popw
jnp
sbb
cs
imul
sub
sbb
push
jmp
aaa
add
push
shr
dec
mov
in
ins
or
test
fadd
inc
scas
aam
(bad)
fs
(bad)
sbb
cld
ss
dec
adc
in
inc
push
push
mov
movs
adc
fwait
in
mov
jmp
call
push
cmp
sbb
(bad)
pop
mov
add
adc
mov
mov
pop
je
popa
inc
lahf
lock
les
xchg
adc
jns
cli
jmp
mov
call
mov
jecxz
or
retf
mov
mov
adc
(bad)
mov
int3
test
add
retf
lods
int3
sbb
nop
ss
mov
cwde
neg
adc
inc
add
into
dec
sbb
pop
das
pop
jno
popa
jmp
out
fnstsw
adc
adc
jp
dec
jl
mov
icebp
push
popw
lea
or
out
retf
xchg
aam
inc
sbb
in
push
pushf
hlt
and
pop
push
adc
retf
mov
(bad)
dec
add
popa
cwde
pop
jb
sahf
loope
test
pop
xchg
sbb
out
bswap
mov
cmps
and
xchg
retf
shl
mov
inc
add
pop
in
xor
push
sahf
jbe
cld
adc
xchg
pop
fild
sar
ds
xor
adc
outs
div
pushf
lahf
xor
xor
or
xchg
dec
das
rcl
mov
mov
jle
ret
in
xchg
and
sbb
rep
inc
fidiv
movhlps
adc
cmp
add
je
cwde
push
outs
push
loopne
adc
pop
xor
stc
movs
mov
push
imul
add
sbb
push
push
or
fs
test
push
frstor
jge
pop
and
sbb
icebp
and
in
inc
retf
(bad)
jge
push
and
das
lock
adc
inc
mov
mov
jnp
(bad)
cmp
adc
fwait
jle
(bad)
adc
pop
xor
hlt
adc
mov
fs
mov
inc
mov
xchg
(bad)
adc
mov
out
adc
mov
adc
push
pop
cmp
inc
popa
push
fistp
fst
add
loop
jne
or
adc
or
arpl
mov
adc
dec
aad
xchg
movs
inc
adc
and
xor
into
scas
mov
call
sub
aad
not
pop
or
add
sbb
leave
adc
push
in
xchg
xchg
es
(bad)
fild
mov
idiv
or
xchg
jo
inc
cmc
jmp
jge
add
sbb
jl
movs
adc
gs
mov
pop
stc
mov
xor
xchg
mov
adc
ss
dec
pop
outs
scas
sbb
add
push
add
xor
test
adc
or
or
loopne
add
pop
xchg
inc
icebp
hlt
test
mov
jo
cld
ja
iret
sbb
fstp
push
lds
pop
pop
cwde
stos
cdq
aam
mov
or
xchg
push
adc
loope
add
mov
das
jnp
daa
dec
adc
pop
popa
xor
xlat
in
scas
mov
lods
into
and
hlt
cmp
pop
mov
call
push
movs
jne
repz
and
sub
in
je
jb
sbb
push
clc
dec
inc
call
mov
xchg
fist
push
dec
sub
or
loopne
jmp
xchg
repnz
mov
mov
mov
or
out
mov
mov
fnsave
xchg
add
retf
jmp
jle
int3
test
sub
mov
jnp
sub
lods
cmp
push
add
push
retf
das
mov
or
and
or
stos
inc
sub
pop
adc
daa
movs
into
cmp
xor
popa
xor
int3
out
adc
sub
and
push
jmp
mov
inc
cwde
push
or
imul
mov
mov
addr16
sub
aaa
adc
mov
sub
in
or
mov
push
xchg
loopne
xchg
push
cmps
outs
sub
test
adc
and
daa
or
pop
lock
add
stos
pop
pop
sar
popf
xchg
add
jl
sub
sub
pop
xchg
cld
fisubr
push
mov
adc
loop
push
hlt
mov
dec
cmp
add
pop
fnstcw
add
in
out
fcmovne
adc
jne
jecxz
and
loopne
xchg
test
lods
or
push
adc
and
cmps
(bad)
fmul
pop
xchg
xchg
adc
pop
pusha
icebp
(bad)
pop
jg
call
dec
mov
add
aaa
cs
setg
push
xor
daa
aas
fcmovbe
mov
pop
sbb
in
and
add
std
adc
lahf
cdq
jns
sbb
stc
mov
push
inc
sub
push
cmp
pusha
xor
sbb
out
or
movs
pop
lock
in
mov
fwait
ret
jae
sbb
mov
jle
lock
jmp
inc
adc
movs
inc
movs
push
mov
pushf
fs
jp
ret
xchg
push
ins
jns
pusha
inc
popa
or
push
sbb
inc
push
in
sbb
jo
add
std
jmp
cwde
mov
loop
cmps
jnp
dec
pop
popf
adc
adc
mov
push
pop
inc
xchg
xchg
in
mov
popf
push
aam
or
adc
nop
adc
mov
xchg
aad
adc
imul
sub
adc
pop
jo
mov
inc
jae
adc
jnp
or
in
xchg
jl
adc
xor
xchg
sbb
or
push
cmp
fdivr
ja
gs
fucomip
leave
dec
add
test
retf
loope
mov
mov
dec
xchg
movs
xchg
and
add
(bad)
dec
ins
xchg
adc
fcom
xor
pop
lods
xchg
adc
stos
jg
sbb
mov
xor
xchg
dec
mov
imul
ins
mov
inc
in
call
mov
inc
xchg
cmp
cmp
add
leave
adc
cdq
movs
dec
shr
dec
fwait
mov
adc
mov
not
in
push
sbb
js
xchg
pushf
sbb
mov
adc
push
mov
jg
not
push
sbb
aaa
xor
xlat
sbb
or
pop
dec
sub
call
fadd
add
or
sahf
xor
or
fisubr
fdiv
add
jge
adc
add
mov
in
mov
jl
adc
(bad)
mov
aam
mov
mov
ss
mov
pop
clc
inc
aam
inc
mov
sbb
push
out
and
mov
xchg
addr16
adc
dec
js
or
push
add
and
jnp
in
adc
xor
je
adc
and
push
push
adc
leave
sub
mov
xlat
mov
and
in
imul
aad
add
sbb
pop
mov
pop
or
(bad)
mov
inc
dec
xor
mov
push
gs
int3
das
xchg
add
mov
cs
arpl
inc
or
stos
or
xchg
push
scas
mov
mov
dec
(bad)
cld
retf
mov
or
js
(bad)
in
js
sub
lahf
inc
or
xlat
test
xchg
add
push
sar
and
or
aaa
pop
pop
lds
cld
push
push
ja
movs
ficom
dec
sub
fistp
and
(bad)
(bad)
cmp
ret
ret
popf
out
cld
or
jmp
push
nop
fldenv
ja
pop
adc
test
neg
movs
add
jae
in
mov
shr
ret
mov
cmp
cli
xchg
adc
cmps
in
imul
(bad)
bound
and
je
and
adc
xchg
mov
cmp
bnd
hlt
adc
xor
push
daa
adc
and
call
adc
xchg
dec
push
std
push
adc
ja
sbb
or
jae
add
stc
cmp
mov
jmp
xchg
fsubr
ret
add
jle
or
sub
add
sbb
sbb
ret
xchg
push
mov
pop
add
mov
inc
retf
lds
jnp
or
icebp
in
dec
cmp
stos
sub
sbb
push
int3
sub
aaa
std
(bad)
pop
add
mov
icebp
mov
adc
mov
and
sahf
jl
cwde
inc
jne
ret
jmp
xchg
pusha
loopne
adc
sub
jmp
fimul
sbb
push
push
inc
push
in
das
push
dec
adc
mov
cmps
je
xor
movs
je
(bad)
mov
mov
sbb
sub
inc
ror
pop
sbb
cmc
add
sbb
sbb
clc
mov
cmp
and
stos
push
popa
mov
adc
repz
jmp
xchg
loope
pop
rcl
push
es
out
in
cmp
sbb
pop
fdivp
or
in
out
fadd
xor
into
test
jne
cmp
enter
adc
mov
sub
hlt
add
cmp
xor
cld
mov
aad
sar
sbb
cmc
mov
in
jle
adc
sub
ror
inc
adc
in
stos
dec
stos
cli
sti
cli
dec
push
mov
add
adc
sbb
add
cmp
addr16
popf
cs
ins
sbb
xchg
sub
cli
adc
sub
pop
das
sub
push
push
lock
jo
sub
adc
repz
or
push
adc
adc
fwait
jne
xor
sub
inc
fsub
aam
push
xchg
xor
jns
rol
adc
jp
mov
inc
daa
jo
jbe
push
lock
adc
dec
sub
and
movs
xchg
add
fwait
and
lods
adc
mov
fmul
and
int3
mov
mov
or
fisub
fldcw
retf
mov
jle
lahf
aad
adc
aam
mov
mov
inc
iret
sbb
and
mov
adc
test
in
test
fdivr
add
adc
lahf
dec
mov
(bad)
ficomp
cmp
test
and
mov
and
push
(bad)
xor
retf
jmp
add
push
mov
push
in
les
xor
iret
mov
sbb
add
xor
imul
mov
adc
ins
cmp
in
pop
call
call
inc
ins
fsub
sub
outs
and
aam
mov
adc
xchg
mov
mov
sahf
out
dec
xlat
dec
mov
in
lahf
pop
loope
sbb
lock
ss
mov
jmp
adc
sbb
cmps
lds
cld
ror
xchg
sub
adc
ds
and
aam
pop
inc
lods
lock
mov
cmps
out
outs
sbb
xor
sub
adc
jmp
mov
pop
icebp
aas
pop
movhps
mov
adc
retf
push
push
out
xchg
out
adc
cmp
fsub
jmp
pop
mov
xchg
int
dec
scas
ss
push
fst
arpl
in
push
cmp
pop
in
push
outs
mov
sti
bound
xchg
adc
(bad)
fucomi
sbb
sbb
mov
and
test
jmp
inc
push
movs
sar
adc
dec
cmp
sbb
lock
xlat
jl
dec
sbb
iret
push
jmp
ret
movs
xchg
push
sub
out
xchg
and
je
mov
xchg
dec
jl
hlt
cmp
enter
xor
shl
mov
into
cli
add
lea
adc
js
ficom
(bad)
jmp
pushf
or
cmp
cmp
mov
add
in
(bad)
in
inc
in
pop
sbb
lock
xor
inc
mov
mov
push
or
fsub
xchg
push
push
adc
jl
js
push
cmp
imul
sbb
add
sbb
scas
jbe
cmps
aam
jo
mov
test
mov
sub
or
or
mov
add
and
pop
(bad)
daa
adc
dec
lea
fidivr
ja
adc
aam
mov
movs
inc
xor
jl
sahf
lahf
cld
adc
into
cmp
cli
mov
outs
cmp
add
mov
movs
out
je
je
push
sbb
pop
movs
sbb
mov
nop
pop
leave
sub
cmp
(bad)
pop
sbb
and
push
adc
in
daa
xor
and
icebp
push
mov
aam
add
ja
mov
aaa
inc
jecxz
adc
test
push
rcl
cwde
pop
call
add
mov
das
cwde
fdiv
sub
or
and
sbb
(bad)
in
add
sub
cmp
mov
shl
mov
pop
addr16
mov
xor
fdivr
or
dec
aam
ror
or
xor
retf
xchg
cmp
cmps
push
push
lods
shl
das
adc
push
cmps
adc
sub
pop
in
xchg
das
js
repz
retf
in
xor
fnstcw
sbb
adc
aam
sbb
sub
jno
xchg
dec
mov
add
adc
stc
fmul
and
xchg
adc
cwde
fild
inc
jmp
mov
pop
push
lea
sbb
push
cdq
shr
mov
xchg
out
mov
shl
(bad)
adc
sub
loopne
add
adc
jne
adc
pop
cmps
adc
or
mov
inc
in
mov
test
(bad)
out
pop
xchg
mov
pop
xchg
cmp
in
popf
scas
dec
in
push
fidiv
xchg
adc
and
mov
adc
mov
test
add
add
mov
pop
adc
fild
xchg
push
and
cmp
lds
sbb
aam
jp
loopne
(bad)
mov
inc
out
cmp
cmc
stos
(bad)
mov
adc
jns
sbb
adc
cmp
std
iret
call
cmc
test
xlat
bound
jge
sbb
fisub
jp
pop
popa
inc
movs
mov
aaa
adc
push
xchg
fldenv
imul
(bad)
inc
sahf
adc
xor
push
sbb
xor
or
jbe
sahf
loopne
scas
sbb
cmp
inc
aam
into
out
ins
adc
neg
adc
ss
int3
fstp
mov
fstp
adc
int3
mov
lock
push
pop
cmp
mov
test
cwde
adc
mov
test
ins
jecxz
in
adc
aam
sti
cs
adc
ss
sbb
adc
shl
adc
js
bound
(bad)
pop
jl
cli
mov
test
cwde
shr
(bad)
pop
scas
call
sahf
movs
es
pop
retf
xor
dec
shr
das
mov
aam
movs
add
pop
imul
xchg
enter
mov
xchg
cmps
or
jp
call
test
popa
inc
and
pop
cmp
xchg
out
xchg
mov
dec
setbe
es
enter
pop
cmp
ins
jmp
scas
aam
les
outs
adc
sti
or
xor
push
cmp
inc
js
mov
cmp
sbb
in
ror
mov
in
cwde
in
ficom
pop
retf
fwait
adc
adc
xor
and
dec
push
in
in
sub
rcl
xor
arpl
in
push
test
xlat
mov
xchg
in
fcom
xchg
inc
gs
adc
(bad)
ins
fsubr
add
dec
rcl
loopne
out
test
hlt
movs
dec
adc
inc
pop
xchg
dec
mov
adc
pop
in
push
push
fstp
inc
addr16
and
xchg
sub
scas
fdivr
adc
add
mov
(bad)
adc
(bad)
rol
push
stos
jmp
jmp
adc
dec
call
push
int3
mov
xchg
cmc
xchg
cmp
adc
retf
sub
add
jle
in
adc
adc
mov
sub
inc
hlt
dec
popf
dec
lahf
js
mov
jmp
movs
data16
out
mov
aam
out
out
call
fs
sbb
or
xchg
cld
inc
stc
inc
adc
call
add
arpl
or
in
mov
push
mov
add
pop
int
sahf
shl
adc
sub
movs
neg
inc
xchg
jae
xor
push
jnp
retf
popf
retf
mov
add
pop
adc
ret
into
test
es
repnz
adc
out
mov
inc
sbb
test
hlt
outs
ror
icebp
imul
sbb
aam
jb
rcl
push
mov
xor
cdq
enter
xchg
adc
cmp
(bad)
sub
retf
call
int3
rcr
inc
and
mov
(bad)
adc
push
mov
int3
test
pop
clc
gs
add
mov
add
jle
xchg
(bad)
cdq
xchg
leave
(bad)
int3
test
int3
sar
fadd
adc
lea
imul
pop
pusha
dec
popf
(bad)
push
into
out
fistp
mov
xor
sub
push
cmc
(bad)
sub
dec
sub
popf
cld
inc
retf
pop
aad
pop
pop
mov
xchg
lahf
mov
adc
call
mov
push
inc
(bad)
add
dec
outs
shl
in
ds
xor
sbb
out
fstp
mov
mov
sbb
(bad)
les
xchg
sbb
pusha
je
mov
sbb
gs
add
fadd
pop
icebp
jmp
call
sub
loop
iret
jbe
(bad)
lahf
push
gs
push
sub
xchg
cmps
lds
cmp
into
popf
(bad)
mov
pop
jge
push
test
pop
xor
add
jl
in
out
js
mov
jns
add
adc
mov
popa
push
jne
mov
in
sbb
pop
jge
ins
ficom
fcmovnbe
push
lock
stos
out
faddp
int3
cmp
jmp
cmp
frndint
inc
cwde
fild
loopne
cld
and
ror
jae
movs
(bad)
ins
mov
std
je
add
call
mov
and
dec
adc
adc
(bad)
repz
mov
addr16
pop
sub
data16
lock
fdivr
movs
mov
add
cs
dec
cmp
xchg
push
xchg
cld
inc
mov
leave
mov
add
mov
test
jmp
(bad)
out
sar
aam
iret
retf
sub
or
mov
sub
fmul
call
enter
int3
aas
adc
pop
pop
mov
adc
in
cmps
dec
lock
xchg
push
push
add
cmc
aas
xor
mul
loopne
test
pop
inc
and
sub
in
and
mov
(bad)
outs
xchg
call
pop
add
mov
xchg
or
mov
pop
adc
mov
add
xchg
lods
aaa
mul
mov
cmc
cmp
jp
add
add
jnp
out
ss
adc
adc
mov
and
test
cmc
into
jae
push
xchg
jb
push
adc
jecxz
sub
std
lds
mov
adc
push
jg
pop
jns
jmp
adc
and
mov
jmp
pop
mov
popa
sbb
out
into
mov
mov
int
or
push
lea
loopne
dec
adc
push
push
movs
cli
popa
lods
push
push
data16
test
jmp
movlps
adc
scas
ja
jne
gs
inc
ficomp
xlat
int3
fsub
bound
lds
int3
lods
and
xchg
cmps
jb
add
inc
xchg
mov
scas
pushw
mov
push
cld
sbb
mov
ja
dec
test
popa
xchg
je
into
lods
push
inc
sbb
shl
aas
loopne
test
xor
(bad)
and
pop
in
cmp
loop
or
movs
inc
std
aaa
adc
shl
jbe
inc
xchg
mov
dec
and
daa
xor
ja
retf
sbb
cmps
inc
push
adc
xchg
dec
aaa
dec
push
add
cmc
out
in
jns
xchg
mov
pop
adc
pushf
(bad)
in
jnp
fidivr
cmp
adc
jmp
or
xor
jb
adc
lods
mov
add
adc
cmp
or
mov
and
(bad)
cmp
jbe
adc
call
adc
xor
push
loopne
clc
sbb
cli
shl
jecxz
mov
mov
cmp
push
pop
xor
rcr
xchg
retf
test
adc
pop
add
xor
adc
mov
add
inc
arpl
sbb
ins
push
ror
rol
icebp
xor
imul
push
sub
adc
mov
push
out
in
out
out
rcl
lods
push
lea
cmp
popa
push
jnp
xlat
test
add
mov
cli
sbb
xchg
je
repz
jno
jae
aas
sub
inc
cwde
pop
(bad)
div
pop
sbb
and
jg
jmp
adc
mov
adc
add
dec
mov
sbb
ins
dec
aaa
mov
loope
mov
leave
adc
out
shl
cmp
cdq
mov
xchg
adc
cmp
xor
loopne
jl
xor
jmp
fadd
std
adc
pop
fst
jnp
push
(bad)
jmp
aad
sub
and
dec
add
ins
ja
adc
(bad)
cmc
xor
fdiv
das
fisub
outs
adc
sbb
add
push
mov
mov
mov
inc
xchg
xor
loope
adc
test
dec
mov
and
lock
jae
pop
mov
or
jl
(bad)
adc
lea
mov
in
vcvtps2dq
xor
jg
or
jnp
adc
jecxz
retf
mov
je
test
jmp
(bad)
movs
test
xchg
test
pusha
add
push
and
adc
mov
int
xchg
adc
mov
jg
out
arpl
or
sbb
pop
movs
mov
push
dec
push
mov
add
int
call
add
adc
cmp
or
rol
pop
cld
(bad)
cmps
ss
mov
xor
cli
cdq
loop
push
pop
or
fisub
mov
mov
mov
pop
xchg
cmp
out
aaa
loope
scas
outs
or
pop
xchg
and
aad
pop
push
dec
adc
adc
pop
sbb
xchg
sbb
das
inc
push
pop
ret
mov
xor
shl
jp
or
add
jb
aad
fwait
inc
setg
int
or
pushf
into
ss
dec
cdq
mov
cld
mov
adc
xor
dec
or
imul
jnp
les
fidiv
adc
pop
je
xor
aas
mov
mov
cmp
push
mov
adc
cmc
pop
call
mov
clc
shr
xchg
(bad)
aam
ret
cwde
imul
or
test
jne
sub
xor
pusha
out
dec
xchg
xchg
and
pop
adc
mov
lds
cmp
in
mov
add
xchg
popa
sbb
xor
adc
cmp
sub
push
aad
cmp
retf
xchg
adc
or
xchg
ret
fld
sbb
(bad)
and
not
fldenv
in
ja
sbb
mov
enter
pop
push
and
icebp
clc
pusha
inc
sbb
push
icebp
lahf
mov
(bad)
push
je
add
cmp
adc
push
vunpckhps
xor
xor
inc
popf
pusha
push
cwde
mov
push
ds
cmps
in
rcl
jle
xchg
ins
pop
dec
push
lods
xchg
and
fld
in
dec
nop
in
adc
loope
shl
adc
ss
dec
out
adc
pop
aas
xchg
add
rcr
sbb
cdq
aaa
je
add
push
sub
xchg
sbb
xchg
leave
imul
loope
or
imul
add
rcl
out
les
test
adc
popf
test
leave
xor
icebp
jmp
lds
les
loope
jns
in
out
xlat
int3
lock
sbb
jmp
rol
in
es
mov
sbb
popf
adc
adc
dec
adc
adc
mov
inc
push
fst
push
pop
loop
sti
fldenv
adc
add
loopne
fdiv
or
addr16
inc
adc
imul
and
leave
imul
mov
and
ds
movs
fwait
dec
dec
fmul
out
aas
out
jp
cmp
jmp
or
(bad)
ins
push
adc
and
cmp
in
xor
sbb
mov
adc
mov
cmps
cmp
shl
dec
mov
sub
xor
inc
mov
push
mov
adc
popa
and
jbe
adc
aaa
(bad)
or
les
and
fs
call
ins
cmp
adc
retf
icebp
jp
adc
cmp
popa
or
fsub
out
lahf
jg
adc
and
inc
adc
pusha
mov
fwait
test
push
dec
jmp
push
ret
pop
ins
mov
sbb
repnz
adc
mov
jno
imul
ds
loop
cmp
sbb
mov
inc
adc
out
adc
mov
jb
data16
jg
pop
lock
cs
or
xchg
adc
stos
adc
loop
popa
cmps
jl
sbb
(bad)
lock
adc
mov
scas
or
ins
dec
fadd
adc
lea
adc
pop
push
cmp
xchg
outs
lods
sahf
scas
js
mov
call
xor
je
pop
add
adc
ror
sub
xor
adc
xor
movs
loop
cmps
cmps
sbb
pop
dec
sub
xchg
fwait
test
sahf
test
push
push
sub
mov
mov
stos
mov
push
shl
jno
cmp
mov
test
and
cwde
or
mov
push
adc
cmp
cmp
push
cdq
retf
jecxz
stos
adc
and
pop
test
xor
in
mov
sar
arpl
int
mov
mov
popa
inc
jo
add
stc
mov
in
jecxz
scas
dec
cmp
jbe
aam
xor
cld
inc
iret
push
adc
mov
add
or
jnp
mov
rcl
adc
and
fcomp
mov
popf
mov
clc
push
mov
fcmovnbe
mov
enter
adc
into
ss
jle
push
mov
mov
inc
fs
adc
push
sbb
inc
sbb
mov
and
sahf
loopne
adc
push
sbb
stc
je
sub
push
and
and
and
je
adc
dec
jmp
push
test
adc
mov
shr
bound
and
fwait
and
aaa
(bad)
ret
leave
in
dec
fisttp
adc
enter
shr
mov
xlat
fs
es
mov
mov
adc
inc
movs
dec
cld
adc
jg
lea
pop
sub
lods
sub
xchg
imul
jp
int3
sbb
mov
out
adc
(bad)
dec
call
push
or
inc
int3
mov
ins
rcl
pop
jae
mov
jl
pop
unpcklps
push
(bad)
pop
in
ss
inc
pop
mov
scas
jno
dec
or
call
jno
inc
aam
mov
jne
jbe
dec
mov
push
push
and
test
mov
cmp
inc
shr
inc
stc
or
inc
mov
ss
movs
test
jns
add
sub
adc
mov
les
int3
jmp
add
pushf
ins
cmc
repz
push
mov
lock
sub
xchg
out
adc
inc
div
mov
pop
cld
jmp
adc
dec
adc
jg
sbb
call
sbb
call
sub
pop
adc
adc
das
cmp
mov
jae
pusha
retf
jb
push
or
mov
sub
mov
fsub
or
mov
push
adc
xchg
inc
sahf
test
pop
imul
and
sub
into
adc
cmp
pop
sbb
xor
fld
sub
jns
adc
retf
fs
mov
add
cmp
sbb
and
fs
adc
adc
push
sbb
daa
push
jmp
xchg
mov
pushf
adc
mov
(bad)
aad
lods
std
les
pop
ds
adc
in
push
xchg
js
cmp
push
cmc
sbb
in
xor
xchg
mov
hlt
rcl
cmc
adc
add
ins
sbb
dec
nop
sbb
adc
xchg
mov
add
mov
clc
call
aam
out
mov
sbb
cmp
movs
lods
lea
inc
dec
imul
rcl
ss
fadd
fidivr
(bad)
jmp
call
shl
outs
sbb
ins
mov
jnp
mov
das
jl
and
jecxz
fadd
mov
and
xchg
rcr
adc
fnsetpm(287
hlt
enter
and
outs
xchg
loop
pop
jmp
mov
adc
xchg
stc
mov
or
stos
aas
dec
stos
fdiv
pxor
pop
out
in
aaa
and
icebp
fst
adc
stos
out
cld
cli
mov
adc
cdq
sbb
arpl
adc
sub
jo
data16
xor
mov
sbb
test
push
xlat
std
adc
jo
push
push
mov
push
adc
dec
test
iret
into
cmp
inc
mov
aam
les
push
cli
sbb
repnz
ret
int3
pop
dec
(bad)
dec
cmc
dec
and
sub
mul
std
outs
adc
xchg
sbb
xor
repnz
lods
dec
je
movs
cwde
xchg
push
inc
inc
xchg
lods
(bad)
movs
fdiv
adc
jno
out
push
xor
es
cmp
adc
test
sbb
loope
mov
gs
adc
push
(bad)
adc
imul
and
push
sbb
out
jle
push
mov
xchg
je
mov
in
dec
xchg
mov
das
jp
scas
push
push
xor
je
rcl
(bad)
mov
add
imul
out
sbb
and
jnp
push
inc
iret
xchg
movs
push
adc
lods
pusha
stos
dec
and
push
cld
stos
adc
mov
ins
mov
adc
push
add
xor
cdq
lahf
cmp
pushf
inc
jp
adc
pushf
movs
dec
iret
loopne
xchg
or
inc
push
dec
adc
mov
stc
and
jbe
cmp
ror
push
icebp
retf
push
mov
xlat
sbb
mov
sbb
cld
icebp
shl
ret
xlat
imul
shl
ss
(bad)
nop
cmp
ror
outs
or
xchg
adc
cmp
xchg
adc
js
jbe
jle
icebp
adc
int
xchg
data16
je
stc
pop
das
sbb
js
in
retf
aad
ds
and
adc
mov
adc
pop
push
add
sub
adc
xchg
push
and
enter
adc
xchg
iret
sbb
fsub
movs
jbe
popa
dec
jno
rcr
cmp
mov
jmp
mov
adc
fs
push
mov
jecxz
imul
mov
into
sub
dec
loopne
in
int
xchg
ins
aaa
pop
loopne
jne
adc
mov
mov
add
xchg
jge
or
adc
sub
in
add
pop
mov
inc
lock
xchg
xchg
iret
loop
hlt
int3
sbb
mov
jg
cs
loop
adc
sub
adc
mov
fdiv
sub
and
retf
(bad)
retf
push
push
jecxz
adc
mov
jno
adc
mov
fbld
sbb
cmp
ins
shl
sbb
or
mov
xor
adc
push
(bad)
icebp
aad
mov
pop
fnsave
adc
or
lds
stc
sub
mov
and
gs
dec
(bad)
pop
ss
ret
aam
mov
lods
xchg
fst
and
xchg
in
adc
pusha
jmp
mov
loope
xor
and
sub
pop
and
xlat
mov
xchg
cmps
xchg
shl
push
adc
add
repnz
mov
shl
adc
cmp
adc
sbb
inc
rcr
ins
hlt
sbb
mov
push
aaa
stos
push
jbe
sub
repnz
adc
leave
in
mov
dec
sbb
icebp
fiadd
mov
and
rcr
pop
pusha
stos
push
xor
test
test
retf
repnz
call
mov
aad
push
test
xchg
add
fsubr
addr16
aad
sub
stc
es
mov
adc
sub
sbb
sub
sub
aaa
(bad)
fldenv
and
xchg
inc
xchg
inc
rcr
and
mov
lds
movs
mov
adc
xchg
cs
inc
or
add
fcmovnb
loop
xor
adc
mov
mov
adc
sbb
fimul
fld
xchg
jne
pop
gs
or
push
call
and
call
cmp
out
(bad)
les
loopne
popa
adc
push
fadd
das
(bad)
jle
adc
aaa
and
jp
or
int3
lods
adc
in
xor
fsub
push
(bad)
xor
push
popa
ret
fcomp
mov
jmp
pop
adc
sbb
rcl
add
aam
mov
int3
shl
std
adc
push
push
mov
mov
mov
xchg
xor
ds
aaa
pop
int3
adc
ss
in
aad
jg
push
neg
or
leave
xchg
mov
jge
sbb
sbb
popf
mov
cmc
adc
dec
sbb
adc
or
jge
adc
xchg
xchg
sbb
adc
fld
sbb
mov
jmp
jle
xor
(bad)
(bad)
fsubrp
inc
pop
jg
pop
adc
fcmovnbe
fwait
xchg
push
sbb
sbb
loop
retf
xor
rcr
cs
int
fiadd
movs
fsubr
stos
mov
and
cli
test
in
xchg
scas
imul
shl
push
lods
retf
aaa
fsub
aam
rol
sub
pop
or
push
sbb
fcmovb
mov
ss
inc
inc
adc
xchg
pushf
or
addr16
pop
fist
xor
retf
mov
dec
fcmove
outs
mov
xor
mov
imul
inc
(bad)
mov
rcr
push
retf
or
cmp
icebp
cmp
mov
call
xlat
sub
aam
jl
and
test
push
cmc
and
sbb
xchg
idiv
mov
mov
mov
int3
add
push
adc
cmps
(bad)
pusha
adc
hlt
xchg
imul
mov
in
xchg
dec
sar
dec
adc
and
cmp
push
adc
mov
and
daa
xor
push
xchg
fwait
cmps
jge
xor
enter
pop
in
int
jg
stos
dec
mov
cs
push
push
jns
shl
pop
fld
xor
(bad)
lock
(bad)
xor
pop
sbb
imul
xrelease
add
ror
aam
mov
add
retf
ror
loopne
fldcw
hlt
(bad)
jge
adc
lds
int3
repz
jle
adc
xchg
jne
pop
test
int
xchg
in
lahf
jmp
pop
jae
adc
loope
pop
pop
aam
and
adc
push
pop
sbb
adc
in
sub
mov
sbb
into
comiss
inc
xlat
retf
adc
cmc
shl
not
jae
push
stc
sahf
and
add
dec
aam
push
jb
les
pop
mov
or
pop
in
lea
xchg
mov
push
enter
mov
jae
jmp
int3
call
jecxz
and
movs
sub
mov
int3
lods
cmp
and
xchg
fxtract
pop
add
arpl
outs
push
call
out
sub
jmp
sbb
mov
fisttp
inc
cld
movs
xor
loop
sub
mov
xchg
push
cli
pop
in
pop
dec
icebp
out
fwait
das
je
dec
adc
pop
adc
adc
push
(bad)
push
retf
into
aad
sub
nop
cmp
in
mov
aaa
dec
pop
cmc
int3
mov
sub
add
adc
sub
fldenv
pop
or
sbb
sub
sbb
(bad)
test
mov
neg
ror
jmp
jmp
cmp
aas
sub
sbb
xchg
mov
inc
dec
pop
lods
adc
xlat
repz
int3
sub
out
sbb
stos
mov
xor
(bad)
push
xchg
mov
adc
xchg
jns
add
jecxz
dec
pop
cmp
sti
imul
sbb
out
xlat
in
fld
mov
jne
cld
hlt
mov
xchg
ss
xchg
push
adc
aaa
bnd
(bad)
mov
pop
push
int3
ficom
dec
sub
lods
mov
and
jecxz
sub
jmp
fist
add
pusha
pop
mov
inc
dec
int3
sbb
dec
inc
jbe
add
xor
lea
jo
add
not
xor
scas
xlat
xchg
iret
adc
inc
adc
mov
add
lods
sub
jmp
mov
cmp
sbb
lahf
jg
xchg
jl
loopne
outs
adc
add
adc
stos
sbb
adc
mov
dec
push
jp
mov
jbe
popf
push
out
std
adc
mov
cmp
and
xchg
movs
dec
push
push
hlt
sti
mov
out
add
push
test
sar
xchg
test
jb
das
imul
mov
dec
or
push
fcomp
xor
je
js
pop
sub
int
add
cmp
push
in
dec
xchg
xchg
into
sub
mul
scas
mov
mov
pop
add
adc
in
lods
dec
add
push
clc
shl
adc
scas
pop
loopne
or
mov
xor
sbb
adc
mov
jge
push
adc
rcl
fsubr
mov
lods
je
mov
(bad)
adc
cwde
mov
popf
and
mov
cmp
dec
inc
sub
mov
ins
mov
out
xor
retf
lods
sbb
adc
inc
call
loop
adc
mov
mov
adc
mov
inc
xor
cmc
movs
adc
pop
cmp
sahf
add
push
cwde
out
jle
adc
dec
ins
outs
not
cmp
in
mov
cmc
sub
out
iret
mov
hlt
imul
gs
daa
inc
or
push
fadd
jne
mov
inc
movs
adc
sub
shl
in
sub
xlat
rol
xor
sbb
mov
ins
sbb
lahf
push
in
dec
mov
pop
sbb
inc
into
and
aam
test
clc
(bad)
ror
ss
mov
inc
imul
pop
hlt
jbe
in
je
neg
push
(bad)
into
(bad)
aam
out
jg
loopne
adc
repz
xchg
cmps
adc
push
out
fsubr
sub
adc
mov
jne
arpl
ins
cmp
outs
jmp
mov
rcl
mov
cld
cmp
stos
mul
jnp
adc
fcom
add
xchg
cmp
jne
push
in
lods
and
aam
retf
mov
(bad)
sti
cmp
xchg
aam
addr16
sub
push
clc
test
pop
or
loope
push
mov
adc
mov
cwde
push
test
pushf
mov
popf
nop
jmp
adc
sbb
mov
mov
mov
mov
and
movs
int3
jne
cmp
es
xor
and
add
gs
test
adc
xchg
sub
(bad)
or
div
adc
mov
or
adc
xchg
loopne
pop
xchg
sbb
stc
dec
dec
adc
sub
mov
pop
push
int
pusha
ins
movs
mov
or
mov
arpl
loop
aaa
das
aaa
push
dec
mov
int
in
sar
popa
mov
sbb
icebp
cmp
xchg
push
push
scas
fsubp
je
leave
lock
hlt
dec
mov
pop
sub
outs
pop
cmp
or
adc
jae
jo
aaa
scas
sbb
js
cdq
sbb
call
pop
ror
mov
mov
jp
inc
add
add
inc
data16
je
leave
retf
jae
movs
sbb
pop
addr16
out
(bad)
std
in
repnz
ret
jl
(bad)
jno
stos
adc
add
in
adc
shl
sub
mov
pushw
or
jne
mov
sahf
aad
int
ret
pop
xor
pop
add
xchg
mov
dec
dec
inc
adc
addr16
mov
push
leave
(bad)
push
ins
cmp
sbb
int3
int3
adc
cmps
dec
enter
pop
cdq
add
jmp
pop
(bad)
out
pop
popa
sbb
cwde
xchg
(bad)
pop
sar
sti
sahf
das
push
call
iret
mov
push
mov
retf
fsubr
bound
pop
or
inc
arpl
cli
inc
jae
out
inc
loop
fidivr
dec
fist
dec
int3
retf
or
mov
(bad)
ins
xchg
adc
add
inc
cmp
lods
jle
adc
into
pop
scas
mov
loopne
and
int3
dec
mov
sbb
xchg
sar
je
sbb
pop
imul
inc
sbb
retf
cdq
stos
jmp
adc
call
scas
push
loope
aas
cld
cmp
mov
(bad)
jg
sti
jle
mov
cdq
push
lock
xchg
xchg
test
push
retf
dec
dec
and
(bad)
sti
addr16
ins
xlat
(bad)
out
push
xchg
mov
adc
add
or
adc
pop
sahf
pop
mov
(bad)
adc
out
imul
dec
cmps
nop
outs
fadd
pop
xor
call
or
xchg
lds
rcl
out
test
xor
repnz
aas
data16
add
push
jbe
push
jp
jmp
es
mov
and
dec
and
dec
mov
adc
rol
call
test
ret
push
aam
outs
ficomp
ss
mov
cmc
call
mov
inc
int3
out
adc
dec
sbb
fdiv
adc
jle
dec
mov
es
adc
xchg
xchg
loope
hlt
push
mov
inc
mul
mov
cmp
jns
int
icebp
int3
sbb
stos
sbb
popf
wbinvd
jno
adc
dec
cmp
mov
hlt
xchg
neg
add
pop
mov
rcl
mov
imul
push
pushf
test
sbb
push
dec
iret
outs
xor
dec
adc
ret
in
push
(bad)
inc
adc
mov
or
(bad)
mov
mov
mov
push
cmp
cmp
pop
push
adc
sahf
fadd
aad
mov
mov
inc
daa
xchg
ror
lds
and
(bad)
xchg
loop
jmp
jae
call
add
adc
fidivr
fs
je
ins
xor
pop
aas
(bad)
clc
dec
mov
mov
sub
cli
jl
data16
sti
int3
in
ja
ffreep
jmp
lds
push
rcl
popa
popf
cdq
jle
jmp
out
and
cdq
sbb
movs
mov
jmp
sub
out
xor
push
pop
lods
mov
data16
mov
dec
mov
jg
das
xchg
dec
movs
scas
mov
xchg
or
mov
retf
jo
aas
test
push
dec
adc
adc
(bad)
dec
fnstcw
or
loop
jl
jg
sar
ficomp
and
dec
hlt
push
mov
imul
jnp
sbb
shr
(bad)
mov
pop
cmps
cmp
add
in
int3
inc
aam
jne
xchg
test
xor
add
test
jno
rcr
inc
jge
in
xor
inc
jecxz
adc
pop
pop
jno
aas
jne
adc
xchg
sbb
push
cmp
fld
inc
xchg
push
sti
jbe
movs
mov
clc
mov
cmp
outs
js
loope
call
(bad)
addr16
fadd
adc
jmp
jmp
push
push
push
push
cdq
push
repnz
and
xchg
and
jl
cmp
jmp
jb
mov
inc
mov
scas
push
xor
sbb
int3
mov
cmc
push
jge
ss
or
pushf
sbb
adc
pop
sbb
adc
test
aam
mov
cli
xchg
mov
mov
xlat
lods
sub
mov
in
ja
pop
sar
imul
xchg
push
mov
fs
push
sbb
call
outs
adc
lea
hlt
mov
mov
pop
ss
xchg
jnp
sbb
out
pusha
call
std
in
mov
dec
and
or
jp
sub
int3
iret
mov
dec
push
pop
dec
jns
jg
adc
jo
adc
stos
jno
push
aaa
shr
adc
test
lahf
dec
retf
movs
inc
clc
and
xor
fwait
jo
test
and
jbe
pop
push
fnstcw
fst
test
outs
or
mov
shl
inc
push
xchg
leave
or
es
jb
fcom
inc
scas
sub
stos
stos
xchg
pushf
push
cmp
push
xchg
pop
xchg
mov
mov
mov
(bad)
sar
push
adc
shl
out
retf
mov
popf
inc
addr16
sub
pop
test
adc
movs
inc
fdivr
mov
ins
adc
pop
inc
rcr
xchg
jae
std
adc
xchg
xchg
adc
fs
mov
lock
call
inc
ret
sbb
push
xor
in
mov
outs
cli
in
and
lods
in
hlt
pop
cmps
xchg
movs
jbe
(bad)
sbb
sub
inc
adc
inc
inc
lods
mov
xor
mov
sbb
cmp
sub
ds
aas
cmp
outs
mov
shl
in
mov
adc
mov
sub
and
rcl
push
out
movs
mov
push
out
fst
sbb
(bad)
call
pop
fmul
mov
cmps
jmp
jmp
imul
shr
and
or
inc
rcl
inc
lds
fidivr
adc
cmp
gs
pop
sbb
sub
clc
js
push
rcr
adc
pop
cmp
mov
push
add
call
movs
xchg
ror
sbb
push
xor
adc
mov
imul
cmps
fnsave
cli
jp
ja
add
lods
movs
adc
inc
sbb
mov
jge
fild
test
xor
cmp
mov
mov
cmp
or
(bad)
push
lods
cmp
sub
sub
inc
cmp
movs
dec
adc
mov
adc
push
xor
xor
out
ret
push
add
sub
mov
jg
fs
mov
xchg
adc
std
jbe
dec
ins
sbb
sbb
push
fsub
jecxz
push
ret
out
sahf
rcl
(bad)
out
xor
mov
mov
adc
adc
pop
adc
cmps
jge
enter
inc
jnp
lods
adc
fsub
adc
repz
call
and
inc
cmps
mov
(bad)
scas
add
sbb
jmp
mov
mov
les
adc
jle
fist
add
sbb
(bad)
and
pop
int3
cmp
and
retf
jns
stos
sub
xor
and
stos
sbb
mov
cld
jne
nop
sbb
inc
fcomp
mov
xchg
xor
and
aad
cmps
sbb
fidiv
fldcw
test
retf
xlat
and
jle
ret
xor
cdq
xor
movs
dec
add
scas
in
dec
or
xchg
lods
xchg
es
aaa
mov
test
or
pop
jge
adc
and
xchg
dec
adc
or
xchg
enter
dec
mov
shl
aas
leave
sub
cmps
fidivr
mov
jb
popa
add
aad
sbb
adc
xor
xor
sti
je
lods
add
stos
movs
aam
pushf
int
push
mov
sub
xchg
sub
movs
xchg
jp
inc
mov
or
dec
retf
push
and
adc
popa
adc
retf
int
(bad)
pop
xchg
loop
push
fsub
daa
xchg
sub
cs
push
or
jmp
cmp
sar
or
adc
pop
jecxz
push
adc
mov
lea
pop
add
sbb
adc
mov
pusha
push
jg
jmp
mov
cmp
jecxz
fild
mov
xchg
adc
add
sub
push
js
aam
cmps
loop
dec
mov
cmp
enter
addr16
jge
adc
pop
loop
sti
push
push
mov
inc
adc
sbb
mov
sbb
cli
cmps
mov
xchg
add
popf
shl
scas
dec
stc
out
or
xor
test
inc
(bad)
push
mov
sub
push
or
mov
inc
fistp
int3
ret
je
fst
inc
xchg
mov
push
test
push
dec
adc
push
cmp
sub
push
and
rcl
adc
fldenv
jnp
in
(bad)
cmp
mov
pop
aad
push
adc
jmp
cmp
aas
xchg
mov
loope
es
jge
dec
pop
popa
call
jmp
arpl
mov
xlat
adc
in
xor
adc
cli
cs
push
adc
cmp
xchg
in
inc
jne
scas
movd
imul
(bad)
movs
xor
arpl
jl
sub
inc
xor
add
adc
loope
push
sar
in
xchg
pop
jb
je
push
outs
sbb
adc
push
xchg
cmp
or
in
push
adc
jecxz
emms
and
xchg
ins
pop
movs
adc
jae
add
dec
iret
je
fs
sbb
push
hlt
clc
push
pop
in
call
vmwrite
(bad)
push
xor
sub
adc
enter
jns
test
add
and
ds
push
add
lds
cld
jb
adc
and
ret
mov
stos
hlt
(bad)
imul
sbb
cld
outs
adc
loopne
push
xor
add
cld
xchg
sbb
xchg
jmp
or
adc
pop
pusha
mov
cmc
pop
movs
adc
in
sar
sbb
jb
push
inc
push
mov
add
call
pop
std
call
push
sub
pop
jge
add
aaa
push
push
std
in
mov
and
adc
movs
mov
adc
xor
add
and
inc
mov
outs
adc
sbb
jle
imul
cmp
lahf
je
xor
push
sbb
dec
in
jmp
inc
test
in
sub
push
cwde
mov
add
loopne
ins
std
push
fild
arpl
xchg
or
push
adc
add
jo
mov
mov
sar
cmps
adc
jno
pop
out
std
jae
cli
std
add
das
pop
int3
push
jmp
test
jne
mov
sub
imul
jg
mov
pop
icebp
mov
call
push
fsub
push
lahf
js
sub
mov
ins
arpl
mov
dec
mov
jne
retf
sbb
cmp
jmp
mov
and
test
(bad)
push
and
push
sub
pop
pushf
mov
adc
sbb
jge
aas
aaa
push
je
test
cli
repz
and
jmp
mov
xor
xor
in
cmps
mov
in
jecxz
adc
sub
mov
out
fs
outs
mov
(bad)
aaa
and
icebp
adc
test
movs
retf
push
jo
xchg
adc
pusha
push
stos
inc
adc
pop
out
mov
dec
dec
inc
pushf
test
jmp
jp
push
add
cld
and
adc
in
sub
cs
je
push
pop
stc
adc
shr
adc
ja
adc
pop
in
test
pop
push
xor
fstp
pusha
cdq
pop
mov
or
addr16
or
scas
adc
push
dec
mov
jp
add
xor
cld
retf
fsubr
sahf
inc
outs
xchg
lods
jp
push
pop
pop
dec
push
adc
fs
jge
mov
add
sbb
jecxz
mov
enter
(bad)
in
mov
inc
jb
dec
or
add
mov
push
hlt
sbb
rol
fst
(bad)
mov
xrelease
pop
and
and
and
sbb
les
pop
xchg
fisttp
aam
nop
adc
mov
scas
xchg
enter
rcr
push
ret
cmc
pop
test
icebp
adc
pop
sub
push
mov
in
jg
mov
popf
in
in
cmp
add
mov
int3
jg
add
scas
dec
jp
popa
loop
mov
pop
int3
inc
(bad)
adc
daa
sbb
test
mov
test
fstp
pop
mov
add
leave
push
and
inc
or
lahf
xor
data16
mov
dec
retf
pop
push
sub
or
bound
int
adc
lods
aam
mov
pop
imul
cmps
pushf
cld
push
mov
test
add
add
cmp
lock
cmps
sbb
xchg
addr16
nop
pop
das
jp
pop
sub
adc
sub
push
aaa
mov
ret
in
push
adc
inc
xchg
sub
adc
dec
inc
mov
mov
mov
mov
rcl
mov
clc
hlt
adc
stos
jbe
pxor
stos
test
pop
or
sbb
jmp
push
and
dec
bound
pop
daa
iret
lock
mov
movs
cmp
sti
mov
cmps
ror
sbb
data16
pusha
push
cmp
jmp
jae
adc
pop
jl
cmps
adc
dec
fadd
stc
xchg
or
rcl
aas
in
lods
sub
out
and
int3
out
mov
fmul
in
adc
xor
cmp
lock
xchg
mov
cmps
dec
adc
xchg
ret
push
cwde
push
not
xchg
test
add
clc
outs
dec
hlt
ror
(bad)
adc
add
cmp
jbe
pop
mov
movs
ins
jne
push
icebp
jo
rcl
cmp
sbb
mov
inc
pushf
hlt
sbb
cld
adc
fadd
adc
bnd
cmp
adc
xchg
dec
sub
dec
mov
pop
adc
jmp
adc
add
mov
loopne
adc
jle
and
lahf
hlt
adc
nop
test
or
xor
sbb
int
mov
and
out
pop
pushf
test
and
jnp
adc
or
fiadd
mov
ror
xchg
cdq
icebp
xchg
fbstp
xor
jbe
and
mov
repnz
xchg
or
adc
cmp
adc
mov
sar
push
ins
ss
cmp
aam
jmp
rcl
fs
push
(bad)
adc
and
cdq
clc
and
adc
clc
or
xchg
xchg
icebp
pop
shr
out
jb
leave
(bad)
xchg
pop
add
movs
call
cmp
xor
or
(bad)
mov
or
arpl
adc
outs
pop
inc
pop
(bad)
mov
mov
scas
in
in
mov
jg
daa
and
cwde
sub
mov
sbb
in
push
push
cs
sbb
add
es
jo
mov
scas
hlt
scas
xchg
dec
xor
mov
int3
jmp
loopne
push
inc
xor
push
retf
rcr
ss
mov
xchg
and
dec
mov
pop
or
mov
adc
fs
test
and
xchg
dec
nop
xchg
inc
adc
xlat
loop
stos
inc
push
mov
aaa
mov
push
push
repz
repz
and
ins
enter
gs
sub
add
popf
and
adc
ret
mov
cwde
mov
push
xchg
push
pop
into
inc
adc
xlat
ficomp
adc
dec
sub
in
addr16
push
popa
(bad)
outs
sysenter
cwde
add
loopne
push
add
xchg
arpl
fcomp
sbb
jp
(bad)
(bad)
loope
pop
inc
xor
dec
call
add
xchg
fcom
pop
imul
pop
in
adc
das
mov
inc
jmp
or
inc
out
imul
call
push
in
and
shl
je
repz
mov
sub
mov
or
jnp
adc
fsub
dec
je
retf
movs
cwde
xchg
pop
push
push
test
and
mov
adc
cdq
inc
xor
lods
adc
jbe
xchg
sub
inc
mov
inc
ins
shl
push
mov
inc
pop
pop
ins
mov
mov
(bad)
mov
hlt
or
test
es
outs
(bad)
jmp
stos
sbb
xor
lea
sub
xchg
sbb
adc
mov
push
push
adc
popf
or
sub
popa
stos
in
inc
shl
fmulp
cmp
pusha
ins
sbb
out
out
push
sub
inc
sub
pop
push
int
mov
cmp
or
fnstcw
sbb
mov
test
sbb
imul
in
inc
iret
fs
and
(bad)
adc
adc
call
iret
mov
outs
ins
xor
xchg
fcom
fild
js
clc
and
xor
sbb
int3
sbb
mov
int3
mov
pop
sub
and
mov
sub
movs
es
aaa
jg
dec
dec
push
adc
int
dec
adc
xor
adc
jmp
bound
adc
sbb
push
and
scas
ror
pushf
inc
std
lock
hlt
cmp
int
(bad)
push
cli
add
out
xchg
mov
popa
ss
mov
cmp
repz
jg
mov
and
ret
fstp
out
loope
(bad)
in
pushf
and
xor
adc
neg
mov
xchg
push
inc
xchg
dec
lods
ins
arpl
ret
ret
call
xchg
sbb
(bad)
adc
push
ror
arpl
(bad)
or
call
and
mov
dec
inc
xor
mov
out
iret
mov
or
mov
adc
cmp
lods
fnclex
dec
fs
adc
lock
scas
jae
adc
mov
xchg
jns
push
mov
rcl
gs
outs
xchg
test
jbe
shr
dec
pop
sub
outs
or
adc
outs
out
in
aaa
mov
push
movs
mov
ret
adc
imul
jge
cmps
dec
adc
repnz
movs
adc
sub
fcmove
cld
xor
jmp
(bad)
adc
push
aaa
call
push
push
push
arpl
gs
lahf
aad
out
in
ds
and
inc
das
stc
xchg
xor
and
push
jmp
aam
out
push
jmp
hlt
cmc
push
(bad)
adc
xchg
imul
push
test
inc
adc
dec
push
inc
push
inc
mov
adc
mov
pop
mov
int
push
ficomp
ret
sbb
add
inc
sbb
mov
data16
stc
push
push
cs
inc
(bad)
ins
pop
mov
int3
popf
mov
sub
pushf
in
out
xlat
push
sahf
jle
(bad)
push
aam
mov
je
fwait
xchg
popf
retf
add
xor
cmps
imul
xchg
add
jns
lahf
imul
mov
lods
adc
push
aas
inc
cmp
adc
jecxz
retf
dec
in
xor
mov
cmp
xlat
push
cmp
inc
mov
das
test
xchg
scas
daa
into
rcl
inc
jmp
(bad)
lahf
cmps
sbb
mov
and
adc
or
pop
push
scas
xor
bound
repnz
inc
pop
outs
jne
sbb
cmp
imul
cmp
je
in
pop
jge
leave
jbe
in
jmp
out
movs
cmps
adc
ins
mov
adc
iret
jmp
adc
cmp
leave
adc
jb
pop
add
mov
xchg
shl
inc
xchg
mov
jge
add
fst
stc
ds
adc
lea
jmp
push
dec
pop
(bad)
mov
mov
jmp
push
out
push
test
sub
repnz
div
mov
retf
(bad)
push
inc
xchg
adc
(bad)
sti
xchg
leave
add
mov
pop
retf
xchg
in
not
je
cmp
out
mov
adc
ret
int3
jae
call
jmp
jl
push
dec
in
in
or
jo
mov
xor
rol
loopne
add
(bad)
mov
sbb
cld
adc
rcr
das
or
arpl
pop
outs
stos
call
cli
scas
pop
lock
push
jnp
sahf
icebp
hlt
adc
adc
dec
imul
pop
cld
cmps
sub
call
enter
dec
adc
dec
mov
mov
pop
mov
imul
jmp
add
scas
xchg
sub
cmps
not
xor
mov
adc
fistp
mov
inc
pop
pop
ins
adc
adc
iret
jp
or
push
jns
rol
scas
adc
call
sbb
lahf
mov
push
mov
out
pop
int3
sub
xchg
dec
adc
jno
lods
repnz
xor
cld
call
cmp
fild
lods
dec
or
test
int
movs
cmp
out
mov
sbb
imul
dec
inc
in
retf
shl
adc
call
xchg
in
adc
test
movaps
adc
mov
lods
cmp
push
shr
pop
push
fwait
sub
add
mov
and
out
pusha
adc
repz
int3
dec
mov
push
test
xor
in
stos
mov
nop
pop
push
ins
or
mov
retf
xor
xor
adc
add
test
retf
inc
jno
sbb
sahf
or
or
adc
lods
js
mov
or
adc
out
pop
fs
sbb
ins
push
sub
ins
jnp
mov
dec
add
movs
outs
mov
jne
ja
mov
aam
mov
adc
ins
dec
fld
imul
push
popa
xchg
scas
fld
push
xchg
and
adc
inc
cs
inc
and
iret
int3
cmp
dec
cmps
xor
adc
(bad)
jl
push
out
jp
pop
es
dec
sub
pop
adc
mov
out
and
test
xchg
jl
cmp
adc
dec
add
inc
dec
push
sti
cs
retf
pop
push
loop
push
and
xor
loope
xor
mov
(bad)
scas
cmc
(bad)
(bad)
xchg
iret
dec
sub
cmp
push
inc
in
retf
fwait
imul
cmc
je
xchg
loop
jmp
sub
pop
xchg
jnp
push
sbb
xor
xchg
aaa
(bad)
sbb
pop
and
ds
call
(bad)
and
cli
adc
mov
mov
or
mov
cld
pop
adc
or
inc
xchg
ja
popa
jp
or
and
xor
jne
cmps
and
xchg
jp
js
or
loop
inc
fcom
adc
int
mov
mov
xchg
sbb
xchg
cdq
xchg
in
fistp
ret
adc
stos
js
pop
or
icebp
adc
and
dec
adc
(bad)
xor
movs
push
cs
jmp
ret
jnp
inc
dec
or
inc
xchg
shr
outs
mov
outs
scas
cmp
jecxz
retf
jl
in
cwde
mov
mov
pop
loopne
or
pop
pusha
inc
inc
adc
outs
mov
cmps
or
adc
retf
fadd
and
add
sub
cmp
adc
sub
pop
and
dec
mov
mov
unpcklps
arpl
and
ret
mov
sbb
dec
pop
and
lods
jne
adc
sbb
xor
mov
push
jecxz
shl
jnp
fcom
adc
jne
mov
push
mov
add
pop
in
ret
arpl
inc
fsub
ins
add
js
and
test
jnp
adc
pop
(bad)
jg
outs
jns
add
dec
out
sbb
sbb
adc
mov
retf
jno
sbb
cmp
inc
aam
push
fild
rcl
xor
pop
adc
inc
add
adc
mov
inc
dec
jecxz
adc
retf
lea
jo
xor
enter
repz
ins
(bad)
sahf
test
dec
stos
in
cld
ficomp
aas
sub
xor
movs
adc
cmps
jg
push
aam
push
sbb
jecxz
ret
mov
mov
popa
idiv
adc
mov
or
mov
pop
mov
fs
lds
rcl
gs
shl
adc
dec
xchg
push
aaa
xchg
adc
out
shl
or
cmp
xchg
jp
test
aad
popf
adc
pop
scas
sbb
cmp
inc
xchg
add
out
jge
pop
cmp
adc
fistp
inc
and
jnp
adc
popf
lock
xor
(bad)
jbe
inc
data16
out
jb
iret
fadd
mov
adc
test
aas
sbb
add
sub
ror
cld
sbb
minps
lea
inc
test
mov
cmp
jp
or
sub
cli
cld
test
mov
aam
xor
scas
jmp
cmps
jecxz
pop
inc
stos
add
fucomip
add
int3
dec
(bad)
je
ror
mov
mul
adc
in
iret
adc
sahf
cmc
push
sbb
push
int3
aad
aaa
adc
jmp
mov
inc
inc
hlt
push
stos
out
xchg
xchg
movs
in
xor
push
push
call
xchg
dec
out
js
push
mov
(bad)
pop
lahf
mov
jp
inc
retf
xor
sub
sbb
out
pop
adc
mov
inc
jp
popf
adc
sbb
cmp
das
ins
sub
and
data16
hlt
inc
mov
xchg
lods
call
mov
add
jg
imul
loope
cwde
int3
fs
xor
or
or
push
lods
add
scas
in
lahf
addr16
fsubr
push
adc
rol
test
push
push
sbb
and
mov
xchg
movs
xor
adc
or
adc
and
mov
pusha
or
inc
xchg
adc
aaa
repnz
push
push
repnz
mov
cmp
mov
pop
sub
pop
imul
add
retf
pusha
or
sbb
sbb
cmp
cmp
xor
and
dec
hlt
xchg
mov
in
jge
mov
sub
pop
bound
adc
inc
fwait
inc
mov
cmp
fdivr
jmp
fwait
push
and
in
movs
mov
ficom
fbld
adc
fldenv
and
mov
jne
mov
int
dec
jns
jb
pusha
sub
dec
mov
test
sbb
mov
fcmovu
cmps
adc
nop
sub
fisubr
sbb
add
movs
add
leave
popa
adc
add
ror
add
mov
sbb
int3
aas
pop
fcom
fiadd
adc
xchg
mov
adc
adc
rcr
jnp
mov
sbb
cmp
into
nop
sub
(bad)
in
jae
in
jo
loop
gs
data16
sar
and
test
das
stc
pop
adc
lahf
je
cmp
aaa
lods
retf
adc
shl
mov
push
push
push
sbb
pop
xchg
cmps
mov
sub
imul
xchg
mov
test
fsub
fs
ss
sbb
sbb
inc
sbb
hlt
outs
arpl
push
dec
les
cmp
push
add
ds
mov
and
sbb
cmp
stos
adc
call
gs
adc
dec
push
push
adc
lds
push
xchg
xor
mov
push
lods
or
fcmovbe
mov
lea
adc
cmp
call
out
aam
push
pop
cs
adc
or
jmp
jmp
jp
jmp
je
mov
push
pop
scas
je
call
push
adc
neg
pop
test
es
jno
mov
jmp
pop
cmp
sub
push
jb
cli
cmp
adc
mov
cmp
sbb
push
leave
jae
mov
xchg
aad
inc
sbb
js
dec
shl
nop
push
sub
scas
adc
or
sbb
pop
aas
in
adc
pop
lea
mov
ins
shr
adc
adc
or
arpl
int3
fist
retf
mov
xchg
dec
sub
inc
loopne
and
inc
cmp
add
das
pusha
adc
or
adc
sbb
popa
sub
jle
aam
mov
pusha
jg
test
scas
bound
adc
cdq
les
adc
sar
xchg
movs
inc
shl
cmp
cmps
mov
fcomp
loope
sbb
and
xor
lods
mov
xchg
cmp
test
adc
cli
add
imul
aam
jnp
or
mov
pop
push
xor
sub
imul
dec
and
and
push
sub
xchg
retf
cmp
jmp
sbb
dec
js
not
mov
mov
cdq
cmp
cmp
xor
mov
sbb
jle
in
xchg
pop
loopne
sub
(bad)
ins
mov
test
(bad)
neg
dec
xchg
sbb
aaa
les
hlt
sub
pop
icebp
lahf
sub
push
sahf
mov
outs
add
adc
add
pop
outs
cmps
nop
aam
pop
jl
sbb
cld
xchg
retf
mov
cmp
imul
fist
ret
(bad)
sub
xor
(bad)
dec
ins
out
xor
aam
dec
outs
mov
call
pop
out
lock
sbb
retf
(bad)
and
xor
push
xchg
scas
daa
lds
movs
mov
xchg
dec
or
sahf
fistp
add
sbb
int
push
movs
push
fimul
adc
push
rcr
lods
xchg
pop
retf
mov
xor
jae
lods
out
mov
arpl
in
sbb
cmp
lea
fst
cmp
not
mov
leave
add
add
(bad)
out
movs
xchg
fdivr
icebp
xor
xlat
cli
cwde
adc
dec
packsswb
adc
out
push
pushf
jl
pop
xor
iret
test
xor
out
popf
adc
and
and
(bad)
push
pop
adc
ret
cld
inc
mov
shl
xor
ret
adc
aam
mov
mov
jmp
movs
add
mov
add
fsubr
sti
xchg
push
adc
xchg
mov
fisub
adc
(bad)
dec
push
ja
mov
dec
scas
xchg
neg
lock
mov
and
mov
jbe
sbb
sbb
sub
sbb
mov
stc
adc
sub
push
call
dec
adc
push
mov
pop
sub
push
push
and
pop
adc
imul
(bad)
psadbw
test
mov
adc
adc
inc
cmp
adc
inc
fimul
cld
mov
xchg
sahf
loop
fadd
lock
mov
dec
adc
or
sti
mov
div
or
sar
call
mov
cmps
mov
fabs
rcr
(bad)
lds
adc
fild
or
xor
push
test
sar
pop
push
mov
mov
cli
stc
fisubr
mov
fistp
adc
pop
adc
sub
inc
adc
dec
jg
dec
push
pop
test
xchg
mov
push
push
adc
out
xchg
fdivr
pop
sub
loopne
retf
jmp
lods
mov
adc
sub
into
mov
lock
xchg
je
pusha
push
cs
mov
ror
enter
mov
dec
daa
push
sahf
loope
sbb
lds
test
adc
out
aas
mov
in
add
adc
(bad)
mov
sbb
test
adc
fsubp
and
pop
das
mov
popa
cwde
sbb
pop
push
inc
mov
adc
lock
and
pop
mov
adc
test
and
(bad)
adc
xor
xchg
adc
pop
inc
pop
cmp
popa
stos
cwde
repnz
aas
dec
adc
xor
ds
xchg
ror
sub
cmp
adc
int3
test
push
cmp
xor
adc
mov
pop
popf
cmp
and
sub
or
aam
adc
mov
dec
dec
in
outs
xchg
sbb
adc
mov
push
mov
ficom
hlt
ret
out
adc
or
xor
xlat
adc
jmp
adc
sbb
shl
aad
in
dec
mov
bound
cmps
inc
and
das
ja
mov
mov
sub
std
fisttp
les
clc
mov
cmp
sbb
leave
jg
repnz
adc
mov
mov
out
sub
xor
jns
repz
or
inc
push
and
ficomp
int3
or
inc
lods
in
and
scas
inc
mov
sbb
aad
(bad)
push
cmp
lock
mov
je
add
xchg
and
push
dec
inc
cmp
cmp
xor
add
shl
stos
dec
push
call
xchg
mov
cli
mov
mov
pop
jae
ins
mov
mov
sub
dec
push
aaa
data16
inc
add
ror
adc
mov
inc
fwait
add
mov
(bad)
sti
and
push
fld
sub
adc
ss
dec
adc
or
jno
iret
cwde
int
out
mov
shl
in
xor
push
mov
ror
push
clc
mov
repz
neg
aam
and
aad
mov
push
and
jne
jge
mov
test
adc
pop
xor
jl
adc
inc
fadd
test
dec
and
pop
xor
adc
in
mov
adc
(bad)
push
mov
push
xor
sahf
cmp
jecxz
repnz
sub
arpl
jae
xchg
(bad)
je
je
out
sub
inc
test
ins
xchg
dec
repnz
ror
xor
not
sbb
jo
aaa
fwait
ss
xchg
test
xor
cld
fwait
cmp
pop
cwde
and
mov
repnz
mov
cmps
pop
sbb
xor
xchg
in
aad
mov
add
hlt
mov
or
cmp
movs
mov
mov
adc
ds
lock
pop
(bad)
xor
call
xlat
loopne
cmp
jno
adc
sbb
fsub
aas
cdq
je
jo
in
cmc
aam
mov
add
jbe
mov
loope
popa
xchg
pop
cmp
mov
cli
pushf
mov
sbb
push
pop
lods
adc
add
xor
cmp
jno
sub
pop
arpl
xchg
dec
push
adc
mov
bound
add
adc
loopne
jp
aas
pop
jl
push
mov
fs
aam
gs
cmp
or
test
pop
dec
lock
pop
ret
shl
push
add
pushf
std
repnz
cmps
jmp
mov
xchg
fistp
sbb
xchg
je
outs
dec
psrlq
data16
sbb
sbb
push
push
dec
dec
mov
outs
mov
cwde
iret
scas
clc
ror
jbe
repnz
adc
adc
sets
aaa
fnstenv
mov
xchg
jge
sbb
into
xor
stos
mov
mov
scas
addr16
and
add
mov
pop
adc
cmc
aad
movs
mov
cmp
adc
push
std
push
enter
cmc
fild
imul
adc
retf
leave
dec
add
fist
inc
pop
jno
xchg
adc
and
sub
in
leave
dec
sub
aam
xor
add
lods
sbb
adc
mov
add
push
mov
and
xchg
add
test
rcl
mov
and
jmp
fidivr
xor
or
das
gs
push
repz
sbb
inc
adc
mov
pop
out
lea
dec
lods
mov
jae
sub
nop
mov
cmp
xchg
repz
popf
fild
mov
xor
cmp
cmp
mov
jecxz
leave
push
pushf
lahf
push
pop
outs
adc
push
ja
loop
mov
mov
nop
cmp
xchg
ss
sahf
pushf
lds
xchg
mov
cli
xchg
(bad)
adc
nop
xor
aam
pop
sahf
cmp
jne
pop
dec
cs
fidivr
aam
arpl
sbb
(bad)
addr16
repnz
in
inc
jne
cmp
mov
out
inc
mov
je
adc
aam
ror
adc
mov
push
pop
cmp
dec
mov
mov
xor
mov
cwde
retf
push
hlt
sbb
test
pusha
pop
sti
dec
(bad)
sbb
call
inc
pushf
jae
xchg
inc
int3
lea
mov
mov
xor
pop
sub
das
or
dec
adc
shl
fist
sahf
rcl
int
(bad)
aam
ja
and
pop
in
imul
imul
lds
std
sbb
xchg
pushf
int3
adc
inc
and
sbb
and
mov
add
inc
int3
and
aad
daa
push
push
inc
loopne
aaa
ds
lods
adc
push
lock
add
cmps
mov
jbe
out
xchg
fs
or
jmp
popf
sbb
xchg
fnstsw
fnstcw
or
adc
in
sbb
scas
aad
sub
call
xor
inc
and
mov
jmp
lahf
in
sub
sti
pop
adc
add
adc
loop
jmp
shl
inc
call
sub
retf
dec
cmp
les
add
cwde
adc
xchg
icebp
push
aam
sbb
push
fdivr
(bad)
inc
pop
jmp
mov
ds
add
xchg
sbb
xchg
jecxz
jmp
dec
leave
adc
cdq
add
aam
jbe
mov
cmp
sub
sbb
inc
jg
xchg
loope
sbb
mov
mov
xor
je
int3
sub
push
lock
(bad)
hlt
(bad)
sbb
mov
out
or
push
inc
inc
loop
sub
xchg
retf
sub
cmp
jg
enter
sbb
pusha
pop
daa
adc
lock
neg
fldenv
adc
mov
jmp
inc
out
call
xchg
mov
mov
fsubp
int3
ror
lods
dec
cmp
nop
cdq
sub
fsub
mov
ins
push
out
mov
mov
int
lock
je
ss
stos
adc
sub
rol
pop
xor
in
icebp
xchg
adc
mov
movs
mov
mov
or
fld
adc
cmp
push
inc
sbb
fadd
xchg
mov
jp
add
mov
test
push
xor
mov
cmp
dec
js
pusha
adc
pop
stos
or
and
out
outs
inc
sub
dec
ret
adc
fstp
imul
fbld
sub
and
adc
and
pop
outs
xor
sub
jnp
mov
sbb
inc
in
in
ret
cwde
and
inc
pop
cld
cmps
push
data16
sbb
pop
into
mov
ins
xor
add
xchg
adc
fnop
imul
fwait
ds
cwde
xchg
xlat
sar
xor
push
mov
or
mov
aas
add
push
mov
fnsave
imul
push
adc
mov
jg
xchg
out
out
mov
js
test
sbb
adc
lahf
pop
cmc
mov
ret
rsm
mov
(bad)
adc
sub
mov
adc
js
push
jmp
xor
dec
push
inc
pop
mov
cmps
inc
repz
mov
dec
mov
div
out
div
xor
hlt
push
pushf
or
fwait
xlat
aam
xchg
mov
das
lock
or
or
rcr
ret
pop
cld
rol
xor
sbb
scas
fcmovb
repz
stos
xor
jmp
dec
sbb
das
adc
movs
mov
adc
js
pop
test
in
inc
push
push
mov
adc
xchg
jb
mov
lods
out
pop
in
mov
out
test
jl
cli
sub
dec
dec
xor
push
movs
adc
xor
mov
or
mov
push
xor
sbb
jb
ja
sbb
mov
xchg
xchg
inc
add
adc
xor
aam
mov
sub
adc
loopne
pop
pop
fs
idiv
call
cmp
ud1
out
mov
jbe
pop
pop
imul
mov
push
bound
dec
push
repz
dec
loope
cmc
xchg
sbb
stos
ror
(bad)
int3
or
pop
mov
jmp
ficom
out
mov
cmp
jne
(bad)
cmps
ins
clc
mov
pop
sub
sub
adc
inc
das
jl
adc
add
(bad)
outs
pushf
dec
or
and
xchg
imul
or
dec
or
movs
push
cmps
int3
xchg
mov
pusha
mov
sub
mov
cwde
push
inc
ins
push
sbb
pop
idiv
or
out
sub
aad
jp
out
jno
psadbw
retf
int3
(bad)
sti
mov
pusha
rcr
mov
int3
ins
in
scas
stos
pop
mov
push
cdq
mov
mov
xchg
and
sbb
mov
idiv
and
push
adc
adc
xchg
nop
cwde
ret
outs
sub
mov
es
or
test
sbb
jl
fs
push
inc
jo
aam
shl
out
fmulp
and
adc
mov
jmp
jg
loop
sbb
fidiv
enter
push
ss
out
loope
xchg
adc
xchg
test
iret
inc
mov
adc
pusha
addr16
push
cmp
cwde
adc
and
(bad)
push
cmc
fcom
repnz
shl
jmp
inc
test
repnz
xchg
pop
faddp
nop
sbb
out
fadd
daa
xchg
fidivr
cmp
scas
sub
inc
es
sbb
lahf
imul
add
adc
xchg
adc
jno
xor
mov
retf
add
test
adc
inc
xchg
mov
sub
icebp
fcom
cwde
mov
dec
cmp
shl
sbb
imul
enter
call
xchg
aaa
iret
xchg
iret
pop
test
shl
jo
adc
adc
pusha
xor
xchg
in
cmps
fsubr
mov
sbb
ja
mov
in
icebp
cmp
movs
mov
sub
movs
lahf
add
hlt
fisub
cli
jl
adc
lea
in
push
push
xlat
dec
rcl
in
lods
pop
cmp
jno
adc
pop
inc
movs
adc
ret
adc
sbb
neg
test
call
jmp
cli
push
test
outs
push
imul
(bad)
xchg
xchg
xchg
pslld
jne
adc
sub
sbb
rol
je
sti
jbe
les
jne
jge
adc
or
gs
xchg
inc
fst
in
sbb
adc
retf
pop
mov
call
push
sub
mov
dec
fisub
das
adc
lea
pop
adc
push
out
out
fidivr
sbb
test
popa
nop
mov
mov
lock
mov
add
jmp
les
xor
mov
mov
mov
rcr
push
(bad)
pop
arpl
adc
lods
(bad)
push
fcos
cmps
mov
pop
loopne
adc
es
jge
loop
or
mov
call
es
(bad)
add
push
sub
jmp
mov
add
repz
ja
rol
ss
outs
xchg
pop
fidivr
mov
xchg
neg
ret
fsub
(bad)
ins
movs
test
retf
and
jb
in
push
xchg
xor
ins
dec
mov
je
retf
scas
sub
jle
aad
lea
jmp
retf
out
mov
not
(bad)
rcl
mov
loopne
push
jns
test
sbb
inc
sbb
mov
daa
pop
test
stc
test
or
xor
out
rcl
inc
add
scas
mov
fxch
ret
jmp
scas
xchg
lock
mov
dec
add
stos
repnz
xor
int3
gs
test
jns
fs
sbb
and
sbb
or
mov
xor
fs
rcl
xor
test
arpl
adc
jmp
jo
ja
out
push
mov
adc
sbb
add
movs
ja
jecxz
and
ror
sbb
sbb
outs
in
cmp
test
cmp
and
and
call
xor
xchg
sbb
adc
repnz
dec
ins
add
cmc
ss
jnp
push
rol
lahf
sub
mov
(bad)
outs
xor
(bad)
adc
adc
xchg
cmp
push
push
cmp
call
inc
div
call
clc
repz
loope
dec
(bad)
stos
pop
jb
xchg
jle
cmp
pop
sub
shl
adc
int3
stc
mov
cwde
cld
xor
dec
add
jno
clc
aas
dec
adc
push
cwde
popf
pop
stos
adc
or
jmp
pop
adc
aaa
mov
jb
cli
push
mov
(bad)
loopne
adc
add
push
stc
pop
call
mov
add
mov
je
imul
pushf
popf
adc
dec
xchg
fld
daa
stos
jmp
enter
push
adc
and
or
jb
data16
mov
xchg
icebp
xchg
repnz
arpl
adc
xlat
lods
push
mov
dec
inc
sub
xchg
mov
pop
outs
lds
in
shl
sub
std
xchg
cmp
cmp
das
fidiv
push
adc
les
jecxz
sbb
xchg
cmps
pop
adc
sbb
or
fisubr
or
push
adc
add
outs
xchg
pop
adc
cld
adc
pop
push
pop
mov
iret
mov
lds
aad
fdivr
push
fst
inc
pop
dec
adc
(bad)
int3
and
imul
push
add
(bad)
jmp
mov
daa
loope
shl
daa
jne
not
sbb
push
adc
push
js
xchg
sub
repz
rcl
mov
aaa
(bad)
std
mov
or
mov
mov
or
dec
add
xchg
adc
mov
cmp
xor
adc
cmp
std
cmc
pop
mov
adc
xchg
pop
stos
test
adc
mov
push
pop
or
cwde
loope
out
adc
or
in
aam
(bad)
jg
(bad)
adc
loopne
dec
mov
push
dec
adc
rcr
aam
xchg
in
xor
test
add
icebp
jmp
mov
and
push
cmp
pop
call
push
cmp
or
bound
adc
das
xchg
arpl
xchg
ds
xlat
outs
retf
fs
sbb
movs
aam
rcr
dec
adc
out
mov
popf
cld
xchg
push
test
cmp
or
xor
adc
retf
mov
push
mov
inc
call
ror
out
cmps
mov
out
jns
push
call
xchg
xlat
inc
push
rcl
bound
mov
adc
add
jmp
add
xor
fist
xchg
rol
in
call
xor
jo
jnp
pop
dec
out
mov
inc
icebp
lods
ins
aad
mov
vpperm
pusha
lea
cmp
ins
adc
movs
scas
xchg
jg
stc
adc
(bad)
jmp
jge
aaa
es
pop
ret
mov
arpl
and
pop
xchg
in
push
fist
xor
pop
loop
lds
movs
in
push
xor
jnp
or
inc
loope
xor
mov
sti
ret
arpl
push
cmc
bound
dec
aam
add
xchg
bnd
pushf
cmp
loop
cmp
out
int3
fs
sub
lock
repz
inc
mov
or
aam
cdq
test
lods
adc
jb
sbb
mov
addr16
adc
pop
cmp
fsub
xchg
les
in
lods
xchg
mov
adc
loopne
mov
jp
stc
jbe
enter
mov
mov
xchg
and
inc
adc
cmp
fcomp
in
enter
xchg
ret
sub
adc
imul
or
adc
ret
retf
inc
mov
mov
pop
pop
adc
mov
mov
sbb
cld
mov
sub
mov
jmp
ret
inc
adc
push
mov
jns
add
cmp
cli
in
and
aam
jmp
adc
inc
test
inc
adc
clc
pop
mov
jl
push
cmp
inc
mov
adc
test
sbb
sahf
or
adc
stos
pop
sbb
push
frstor
or
push
les
mov
pop
mov
outs
out
stos
jbe
aam
push
adc
stc
mov
mov
fcomp
movs
pusha
cmp
mov
aad
push
add
xchg
or
adc
or
pusha
lods
outs
push
adc
jge
adc
xor
or
adc
leave
test
sbb
rcl
adc
jns
dec
pop
mov
ss
call
mov
test
cmp
xor
jge
shr
push
xor
dec
adc
adc
push
cmps
mov
lea
adc
std
in
jmp
xchg
inc
cmp
xchg
add
add
ja
push
imul
adc
or
adc
sbb
arpl
call
add
mov
mov
adc
js
add
dec
xchg
fadd
popa
ror
jae
das
adc
in
or
mov
ja
sbb
adc
mov
mov
push
pop
out
stos
adc
inc
pop
adc
call
ds
adc
jnp
cmp
lods
out
adc
sub
adc
dec
int
mov
outs
jle
xchg
cmp
adc
push
shl
inc
xchg
adc
test
adc
jp
mov
adc
push
test
cmp
xchg
test
mov
js
dec
icebp
or
imul
adc
cli
add
add
sar
rol
jle
movs
xchg
aaa
jno
fsub
and
stos
jg
adc
into
fisttp
adc
jg
movs
outs
jge
mov
mov
adc
adc
add
cs
cwde
aad
xchg
sbb
mov
push
and
nop
cmp
fwait
push
das
inc
in
cli
xchg
aam
cmp
push
cmp
dec
adc
jmp
aam
xor
lock
xchg
mov
arpl
call
or
in
xor
pop
sub
(bad)
pop
and
and
pop
push
sub
cmp
stos
fwait
rol
and
es
js
xor
or
or
out
push
jecxz
aad
push
jle
push
rcl
or
retf
sbb
or
or
hlt
fs
js
loope
sub
jmp
jno
or
popf
inc
ja
out
das
pop
mov
sbb
xchg
scas
xchg
sub
(bad)
fst
in
or
jbe
lods
fadd
data16
or
scas
(bad)
jle
push
mov
adc
ins
xchg
ds
xchg
push
or
push
test
jo
and
sti
and
dec
sub
mov
fild
mov
std
retf
adc
in
cmp
or
rcr
sahf
out
bound
popa
inc
jmp
std
test
int3
not
cld
sbb
lods
lods
add
and
cmps
jg
es
cwde
mov
and
or
ficom
cwde
loop
aam
imul
aad
adc
xor
dec
in
movs
inc
adc
cmps
jno
out
fsubp
nop
adc
and
mov
fmul
adc
dec
mov
ins
es
cmps
adc
mov
das
sub
dec
xor
aam
mov
sbb
fadd
adc
ins
mov
sub
xor
push
(bad)
xor
aam
fcmovb
movs
push
dec
ins
adc
cmp
test
stos
adc
sbb
(bad)
push
adc
les
sti
and
test
loop
add
and
xchg
adc
jp
lods
and
inc
adc
mov
mov
arpl
add
mov
pop
add
pop
xor
sbb
into
inc
in
in
inc
arpl
or
jnp
aaa
and
dec
adc
iret
mov
mov
popa
ficomp
mov
xchg
fwait
adc
repnz
cmp
imul
xchg
int
mov
jg
xchg
mov
xor
mov
mov
stos
fimul
inc
cmp
jae
(bad)
and
and
or
add
xchg
jno
mov
mov
xor
pop
fcomp
cmps
test
push
outs
stc
jmp
aad
cmp
les
loop
int
ins
pop
fdiv
adc
sub
ret
(bad)
in
adc
xchg
mul
push
mov
mov
inc
adc
ret
jo
lds
xchg
cmp
pusha
sub
push
dec
mov
cmp
push
pop
inc
xor
idiv
xchg
pushf
push
xchg
push
cld
stos
xor
cmp
jp
out
std
inc
and
fstp
bnd
or
out
dec
and
cmps
jecxz
xchg
push
dec
pop
test
mov
pushf
(bad)
hlt
jmp
dec
sub
jns
mov
ret
mov
xchg
adc
fnstcw
mov
or
and
cmp
xor
jecxz
ret
and
and
mov
mov
adc
xchg
mov
repnz
adc
ficom
pop
and
fs
push
cmp
pop
mov
das
add
movs
nop
adc
lea
xor
outs
pop
jmp
stc
cwde
rcl
or
mov
dec
adc
retf
outs
xchg
add
mov
mov
stc
je
dec
je
sahf
mov
mov
add
xchg
xchg
xchg
in
ss
inc
jmp
popf
lods
retf
outs
mov
int3
and
inc
ss
bound
aam
xchg
shr
push
and
scas
sub
cmps
cmp
out
push
jae
fcmovne
xchg
dec
cmp
hlt
std
movs
out
inc
repz
pop
or
in
in
sbb
scas
jo
fisttp
add
sub
mov
aad
daa
push
and
sbb
jmp
nop
add
daa
inc
xor
cwde
or
pop
or
gs
and
xchg
xchg
mov
call
sti
retf
aaa
(bad)
sbb
bnd
mov
(bad)
sbb
ja
cmp
cmps
and
sub
cld
stc
dec
adc
add
test
jae
mov
push
jecxz
jns
xor
and
push
cmc
std
xchg
add
xchg
xlat
sub
jbe
lds
inc
aam
iret
in
cld
xchg
sbb
xor
or
je
or
pop
(bad)
xchg
les
mov
add
fnsave
sbb
sbb
xchg
push
icebp
jne
xor
test
shr
(bad)
adc
test
or
loop
mov
mov
fcomp
mov
scas
outs
fnstenv
add
mov
adc
lds
mov
adc
int
sbb
jl
and
in
cdq
mov
adc
jp
mov
jns
adc
(bad)
shl
icebp
js
pop
sbb
add
jecxz
adc
(bad)
mov
adc
cld
out
fs
sti
xchg
adc
icebp
aam
cli
pop
fcomp
adc
addr16
out
jno
inc
arpl
adc
sbb
fs
lea
pop
jge
mov
lea
pop
xchg
sbb
fcmovnb
retf
out
fsub
pop
adc
jp
rcr
mov
adc
das
out
push
xchg
rol
ret
or
xchg
loope
mov
cmp
adc
sbb
imul
sbb
xor
cmp
adc
inc
shl
lahf
jge
pop
imul
push
adc
int3
xor
sti
xchg
cdq
adc
daa
mov
pop
sbb
div
imul
outs
adc
sub
inc
sar
adc
or
jmp
int
xor
xor
xchg
mov
lods
adc
call
sbb
lea
inc
syscall
pop
sub
icebp
cli
cli
push
es
push
in
push
les
mov
nop
(bad)
mov
adc
pop
ret
cmps
repnz
adc
xchg
fucomp
mov
mov
add
push
(bad)
or
push
xchg
adc
into
fisubr
pop
xor
xchg
retf
test
pusha
inc
jmp
nop
out
pop
mov
sbb
std
data16
xchg
rcl
or
pop
hlt
and
leave
je
push
into
(bad)
mov
out
in
xchg
add
mov
pop
and
push
cmp
je
lahf
push
(bad)
scas
adc
out
add
sar
jae
shl
sub
push
adc
sbb
bnd
imul
lds
movs
retf
jg
push
jb
push
aam
call
hlt
cmp
push
in
dec
adc
mov
dec
ss
sbb
sar
push
mov
jp
xor
popf
cmc
xchg
sbb
xor
imul
(bad)
aad
pushf
pop
ins
pop
inc
in
mov
dec
push
jg
loope
jmp
leave
call
push
stos
adc
repz
pop
mov
xchg
sbb
ins
sbb
lods
and
xor
adc
in
inc
jmp
sbb
movs
lods
bound
sbb
pusha
out
(bad)
push
mov
push
add
or
mov
clc
push
retf
(bad)
push
fstp
sbb
adc
xchg
loopne
call
dec
fcmovnu
mov
in
dec
(bad)
dec
mov
and
fs
daa
adc
in
pop
mov
sbb
adc
stc
cmp
jg
stos
adc
pop
sub
shl
lods
je
mov
movs
mov
or
xchg
(bad)
pop
add
or
and
mov
xor
shr
sbb
test
xchg
pop
div
das
jg
push
jl
arpl
sbb
std
loopne
das
adc
mov
push
lea
sahf
gs
cmp
(bad)
int3
das
pop
add
adc
or
pop
dec
(bad)
in
push
mov
aaa
pop
xchg
dec
sub
pusha
xchg
aam
xlat
test
dec
jmp
xchg
xchg
mov
lods
adc
xor
(bad)
in
ret
push
dec
inc
adc
push
cmp
pushf
sub
hlt
add
sti
sbb
cmc
push
push
adc
out
dec
adc
xor
push
pop
pop
fstp
cmp
sbb
sub
cwde
mov
ins
je
mov
mov
cmc
jp
(bad)
mov
mov
dec
adc
dec
call
in
and
and
add
sub
lods
aaa
lahf
fist
add
dec
pop
mov
rcl
adc
pop
iret
out
ja
xchg
ds
(bad)
mov
dec
cli
clc
(bad)
jnp
pop
test
xor
mov
and
sub
cli
cmps
cld
or
sub
enter
hlt
neg
ret
cmp
movs
je
dec
add
push
or
and
std
out
or
(bad)
xchg
pusha
dec
sti
shr
sbb
into
pop
pop
xor
stc
ret
cmp
sbb
xchg
rcr
ins
add
aaa
adc
lds
sbb
xchg
es
nop
test
dec
mov
sub
jp
jbe
jmp
gs
hlt
pslld
adc
shl
pop
int
nop
repz
in
das
cmp
mov
ret
cmp
xor
sbb
clc
movs
jbe
mov
cld
sbb
adc
cmp
or
jmp
xchg
clc
pop
aad
in
sbb
push
xchg
pop
cld
out
icebp
fsub
adc
retf
mov
cld
clc
repz
ds
mov
and
lods
sub
repz
(bad)
mov
and
movs
push
ins
adc
shr
and
ds
repnz
je
mov
add
lahf
lea
jb
xor
out
dec
xchg
jmp
cmp
jecxz
jb
add
out
adc
dec
rep
test
adc
fcmovnb
inc
xchg
stc
jns
scas
pop
stos
adc
test
push
adc
and
sbb
sbb
lea
fcom
mov
mov
or
in
dec
enter
cmps
test
adc
fisttp
pop
sub
mov
cmp
mov
cld
fcom
out
out
mov
push
or
pop
in
push
shl
inc
in
js
inc
mov
imul
pop
cmps
aam
sbb
popf
sbb
sbb
dec
jne
out
sbb
sbb
dec
ficomp
cs
mov
push
in
push
adc
sahf
pop
call
mov
imul
sbb
inc
add
push
pop
retf
adc
cmp
jl
xchg
xchg
cmp
ds
jge
fadd
cmc
push
jmp
scas
mov
adc
test
xlat
adc
rcr
dec
adc
push
or
out
and
add
mov
cdq
xchg
int
fldcw
nop
push
fdivr
loope
pmaxub
adc
dec
sahf
inc
scas
jne
pusha
adc
call
adc
out
into
nop
dec
ss
pop
push
sbb
cmps
cdq
loopne
push
pop
std
mul
repz
retf
sbb
mov
adc
or
and
pop
jns
mov
out
dec
mov
ins
bound
inc
aam
leave
test
daa
mov
xor
bound
loop
iret
ret
(bad)
scas
sbb
cld
icebp
imul
or
xchg
xor
sub
pop
aaa
dec
adc
or
pop
out
cli
sbb
aam
(bad)
fcom
shr
adc
inc
xchg
adc
mov
fs
pusha
fucomi
sti
movs
mov
lea
addr16
rcr
adc
jl
aam
push
call
adc
jmp
push
adc
arpl
popf
lods
or
es
mov
dec
mov
xor
xor
ins
imul
inc
nop
adc
sbb
std
cmc
add
add
lahf
ficom
mov
dec
pop
cmc
pop
cmp
dec
(bad)
aad
lock
or
fist
stc
cmps
mov
inc
xchg
ror
data16
xor
xchg
xchg
mov
and
mov
jg
sbb
adc
in
test
xchg
xor
mov
xor
stos
hlt
inc
pushf
push
add
push
stc
repnz
xor
jge
test
jmp
adc
dec
hlt
lods
test
hlt
cdq
aaa
sub
in
sbb
push
push
xor
sub
lock
or
pop
icebp
pop
add
aam
not
mov
shl
or
push
in
cmovs
mov
pop
sbb
sub
fmul
out
jns
daa
in
jecxz
fcom
jmp
cmc
popf
add
ds
mov
jp
xchg
add
rcr
pop
jmp
(bad)
jge
adc
aaa
inc
fucomi
adc
mov
jp
or
outs
pop
not
outs
ss
add
sub
jae
push
imul
test
lods
lea
push
ins
cmps
das
fldcw
mov
or
push
xchg
cdq
inc
cmp
cmp
add
jo
push
fsub
adc
int
in
mov
pop
push
cmp
pushf
adc
xchg
and
cld
ins
adc
lahf
xor
push
pop
pop
pusha
sbb
add
sub
adc
sub
(bad)
cwde
adc
push
movs
shl
xchg
sbb
pop
cmp
adc
hlt
cld
mov
cmps
jecxz
xor
fnstsw
adc
and
pop
int
xchg
mov
in
fcom
js
inc
push
out
addr16
sub
inc
stos
adc
mov
clc
mov
push
shl
test
adc
inc
and
dec
(bad)
loopne
sbb
push
sbb
retf
ficomp
(bad)
add
push
push
push
sub
inc
cmps
dec
sbb
scas
xchg
push
mov
lds
sbb
inc
mov
dec
into
cmps
sub
pop
repz
xchg
add
mov
scas
sti
test
int3
push
leave
xchg
imul
ret
pop
mov
scas
rcl
adc
sbb
add
xor
lock
cmp
enter
retf
inc
arpl
sub
sbb
pop
mov
add
adc
shl
jns
push
out
add
and
or
mov
jl
push
inc
sub
and
add
jbe
aaa
mov
addr16
adc
aad
lahf
sbb
lds
retf
cmp
ss
mov
add
jbe
mov
pushf
mov
sti
jl
je
out
jo
pop
dec
jne
cmc
xor
sahf
push
adc
int
cmp
stos
jb
shr
or
mov
mov
xlat
mov
je
(bad)
retf
out
xchg
retf
mov
mov
dec
xor
add
and
and
push
or
mov
repnz
or
inc
pop
sub
adc
push
sbb
lea
fst
adc
xlat
das
jno
cmp
fidivr
jp
out
mov
cmps
test
lds
shr
mov
push
jg
neg
loope
xor
sbb
push
mov
adc
mov
pop
fcom
call
outs
adc
jp
jmp
jl
arpl
inc
cmps
inc
push
movs
jno
ss
dec
(bad)
xchg
xchg
sbb
cli
push
cmp
adc
mov
repz
ret
mov
sub
xchg
scas
xchg
inc
inc
clc
or
int3
sub
ins
je
cmp
push
cmp
sub
inc
add
aam
iret
pop
popf
das
adc
into
push
bound
push
stc
je
sbb
mov
push
sbb
sbb
rcr
adc
loope
shr
cmps
or
in
call
and
out
and
loope
inc
dec
xchg
(bad)
pop
inc
jle
adc
jbe
mov
rcl
fld
dec
adc
fst
xchg
imul
add
adc
hlt
pop
mov
push
loopne
or
adc
rcl
adc
ins
test
sbb
ins
int3
(bad)
lods
int3
and
or
(bad)
in
xor
nop
sub
addr16
mov
test
adc
stos
ss
dec
cmp
cmc
ja
adc
xchg
jae
inc
xor
jnp
mov
xchg
cli
clc
sub
jo
stos
jmp
ds
mov
adc
adc
mov
inc
das
cmp
jbe
dec
jns
mov
pop
in
outs
in
idiv
add
lock
inc
cmp
repnz
sbb
dec
stos
cmc
aam
jmp
jg
ins
jno
adc
adc
cmp
test
pop
or
out
js
in
movs
imul
aam
or
lock
mov
and
(bad)
int3
adc
out
adc
mov
mov
adc
xor
(bad)
outs
adc
fst
sbb
test
jae
call
adc
or
and
dec
popa
mov
addr16
cmp
dec
adc
or
stos
sub
addr16
repnz
mov
into
shl
lods
mov
test
jp
sar
adc
cmp
adc
jno
push
push
xor
arpl
in
adc
mov
fnstenv
test
rcr
cwde
lock
xchg
pusha
mov
ins
add
sbb
cmp
pop
pop
push
pusha
xchg
dec
fmul
pop
ror
aad
xchg
jge
jmp
ds
push
xor
jp
adc
and
push
pop
mov
mov
pop
addr16
adc
sub
adc
xor
cmp
cdq
lods
in
(bad)
test
pop
cli
fidiv
and
mov
adc
addr16
out
shr
jle
jno
xlat
lock
push
in
sub
jnp
sbb
fwait
aad
jns
int
add
push
lds
dec
pop
in
les
jl
jbe
adc
or
dec
pop
mov
popf
hlt
out
adc
movs
lea
mov
das
data16
mov
fstp
jge
ins
adc
test
xor
aam
aam
ja
dec
adc
icebp
das
cmp
adc
out
mov
sub
popa
aad
and
les
retf
push
cmps
fsub
gs
loope
pop
push
or
leave
shl
ret
adc
ficomp
imul
and
imul
sub
rcr
and
mov
movs
test
adc
rcl
daa
(bad)
sbb
sub
clc
ja
pusha
add
adc
mov
cld
adc
mov
and
and
rcr
push
jno
jne
pop
mov
ror
push
adc
add
mov
ret
push
pop
push
jae
and
sbb
test
jge
dec
adc
sub
sbb
stos
pop
fwait
sahf
sti
mov
push
adc
mov
adc
imul
push
jl
int
mov
rcr
sub
ss
ins
add
mov
mov
jmp
out
fistp
sbb
rcl
out
adc
jl
xchg
jbe
pop
clc
and
adc
hlt
daa
pop
mov
push
mov
jno
sub
lock
xchg
cdq
out
sbb
add
pop
push
jb
scas
mov
xor
movs
and
mov
adc
(bad)
call
std
inc
fucomp
dec
ss
iret
adc
mov
adc
retf
shl
jno
jmp
mov
sbb
sub
(bad)
add
shl
scas
and
pushf
out
out
add
and
inc
call
jp
(bad)
push
push
adc
dec
in
inc
or
mov
sbb
in
jmp
mov
cmps
out
dec
add
pcmpgtd
sti
sahf
adc
mov
js
sub
retf
ret
dec
out
add
(bad)
push
push
or
sahf
lea
cmp
mov
aas
sub
(bad)
aad
jb
pop
inc
cs
xchg
jne
rcl
dec
mov
mov
lods
ins
data16
add
push
sbb
pop
mov
into
or
adc
adc
push
in
jmp
imul
jb
sbb
lahf
or
dec
adc
add
leave
adc
adc
add
mov
popf
std
(bad)
repz
imul
and
aam
mov
and
push
jb
pop
jmp
leave
rcr
adc
(bad)
push
xor
btr
cmp
fwait
test
adc
adc
fild
mov
pushf
pop
jge
bound
in
and
fwait
push
ffreep
jno
mov
add
cdq
aam
dec
inc
adc
xor
inc
into
jge
xlat
adc
adc
and
adc
dec
and
sbb
adc
pop
push
iret
addr16
lahf
or
push
arpl
sbb
test
jg
scas
lock
jge
leave
xchg
jns
ror
xchg
mov
push
or
ins
mov
cld
sbb
jle
retf
adc
adc
adc
xchg
xchg
inc
fs
cdq
adc
sbb
jb
mov
addr16
push
xor
retf
pop
sar
data16
pusha
and
out
push
pop
aam
sti
out
daa
xchg
scas
ins
push
push
adc
add
xchg
jne
iret
pushf
push
hlt
add
adc
aad
out
push
pop
jmp
in
mov
rol
into
dec
xchg
repnz
adc
jle
in
sbb
sub
ret
sub
push
test
cwde
push
jno
ins
pop
sbb
xchg
add
repz
lods
clc
inc
mov
rcr
btc
outs
xlat
fucom
add
mov
cmc
or
pop
addr16
push
cmp
pusha
jns
inc
or
nop
mov
xchg
aas
cld
sti
int3
gs
xchg
pop
outs
pop
das
popa
adc
mov
imul
adc
xor
cmps
push
(bad)
int3
mov
pop
mov
xor
call
adc
ins
scas
repnz
(bad)
cmp
out
cmp
hlt
out
push
popa
adc
int
and
mov
loopne
push
jmp
repz
shr
fst
sub
sbb
mov
cld
push
adc
cmp
int
repz
push
leave
nop
adc
shl
mov
(bad)
mov
xchg
adc
jae
adc
or
push
(bad)
into
inc
call
pop
test
sub
js
pop
scas
sbb
or
retf
jno
adc
lahf
adc
cmp
mov
outs
cs
mov
ins
popf
add
add
add
adc
mov
xor
pop
ins
or
cmc
je
sub
mov
mov
lahf
xchg
in
jecxz
adc
ja
adc
xor
out
sti
in
outs
xchg
adc
arpl
sbb
xchg
adc
(bad)
enter
stos
addr16
(bad)
loopne
ret
adc
mov
test
push
sar
call
adc
cmp
sar
adc
(bad)
or
dec
sbb
ja
mov
mov
mov
or
mov
dec
jge
sbb
jmp
cmc
fs
std
xchg
das
clc
inc
fwait
mov
adc
cmp
adc
mov
adc
dec
adc
add
push
add
rcl
xor
leave
jmp
or
jmp
adc
test
push
pop
push
pop
shl
in
test
push
scas
adc
cli
cmp
and
(bad)
xchg
jo
mov
add
xchg
imul
pop
std
and
jg
aas
adc
xor
xchg
adc
test
imul
sbb
add
pushf
xchg
or
xchg
loope
or
add
movs
or
jp
adc
jne
xchg
xor
jo
inc
pop
loopne
hlt
int3
in
je
cld
cmp
inc
sbb
xchg
dec
mov
cmp
or
and
xor
mov
in
scas
loopne
mov
pop
into
pop
lods
int3
test
adc
cs
stos
js
mov
out
push
mov
(bad)
ds
push
icebp
lea
out
popf
xchg
sbb
jb
push
push
aam
mov
fcmovne
jecxz
popa
cmp
dec
mov
or
int3
(bad)
in
imul
xchg
push
xor
sti
outs
out
call
cdq
mov
mov
lea
adc
mov
clc
mov
cli
daa
push
cmp
sbb
rol
in
loope
push
push
push
mov
fcom
clc
and
or
iret
jmp
push
lahf
jns
xlat
aam
jae
adc
mov
dec
pop
fs
jl
jo
pop
(bad)
xor
aam
fisub
sbb
xlat
inc
or
(bad)
in
ret
dec
push
(bad)
inc
mov
sti
pop
adc
jmp
aad
cmp
adc
xchg
test
push
(bad)
stc
xor
ror
sub
or
sbb
lea
jl
movs
clc
push
out
inc
dec
inc
icebp
adc
mov
add
aad
loope
sbb
dec
or
js
and
outs
adc
xlat
rcl
adc
popa
neg
loopne
jp
adc
pop
cmps
xor
scas
cwde
mov
std
sub
in
rcl
mov
jbe
xchg
movs
adc
jp
adc
ins
es
shl
mov
push
cmp
popa
adc
ror
cmc
(bad)
push
jnp
inc
jmp
mov
cmp
cmps
popf
not
jmp
lea
cli
pop
das
leave
imul
call
jbe
scas
in
outs
push
add
lahf
in
or
fisubr
mov
mov
dec
or
in
mov
sub
fs
adc
or
pop
into
push
jae
lds
adc
call
cmp
mov
add
lahf
xor
xlat
xchg
adc
stos
mov
mov
in
fstp
aam
lods
pop
jo
mov
int3
rcl
outs
jmp
ret
rcr
adc
and
xchg
test
inc
push
adc
sbb
cmp
or
xor
fdiv
fs
arpl
xor
push
or
retf
xor
mov
add
or
mov
neg
mov
xor
push
push
push
pop
adc
mov
jge
enter
adc
sub
in
dec
popa
loop
sbb
jge
hlt
adc
sahf
dec
xor
or
pop
sub
mov
retf
and
push
(bad)
repz
or
sbb
(bad)
inc
scas
nop
loop
test
mov
cmp
adc
xor
fs
mov
cmp
adc
int3
in
jg
sbb
lahf
(bad)
fwait
xchg
push
(bad)
loop
mov
ret
adc
dec
cli
add
mov
int3
push
sbb
jmp
xchg
lea
int3
repnz
int3
(bad)
fwait
sub
add
mov
sub
imul
es
xchg
adc
mov
jp
adc
push
out
jmp
sub
push
sbb
sub
repnz
in
iret
clc
jmp
pop
(bad)
pop
retf
sbb
enter
mov
or
jmp
fdivr
out
retf
enter
or
inc
fstp
and
mov
dec
fbstp
dec
ficomp
and
cmp
sti
push
jmp
add
fcom
pop
cmps
and
and
xchg
lahf
loop
xchg
retf
dec
dec
jmp
add
or
adc
clc
pop
pop
pop
jmp
pusha
jo
pop
outs
cmp
fldenv
jno
cmp
mov
jp
and
in
js
jb
fnstsw
test
pusha
out
jmp
cmc
and
adc
jl
into
pop
mov
stos
clc
sub
rol
or
aam
dec
fadd
pop
or
adc
test
out
aam
dec
or
cli
test
xlat
rcl
dec
aas
xchg
fdivr
mov
pop
jmp
mov
call
inc
mov
mov
fstp
jmp
xchg
icebp
call
(bad)
in
cmp
sahf
jle
xor
test
or
mov
(bad)
jno
inc
div
lahf
push
jae
retf
lock
aam
cli
fsub
pop
add
cli
mov
dec
fist
inc
data16
cs
push
cmps
sub
outs
jmp
mov
push
xchg
or
xor
movs
cmp
cdq
arpl
mov
repz
int3
in
in
imul
mov
sub
jp
pop
jo
add
push
addr16
add
adc
test
clc
inc
es
adc
xchg
push
cmp
lahf
mov
xchg
mov
(bad)
push
push
stc
in
mov
jno
retf
ror
add
adc
or
mov
loope
(bad)
push
adc
arpl
mov
rcl
(bad)
dec
stos
call
lods
xchg
and
cmps
fild
adc
sbb
ja
loopne
adc
mov
out
mov
xchg
mov
(bad)
push
xor
and
test
pusha
or
jp
les
add
jo
jle
push
aam
inc
lods
jns
rcl
mov
or
outs
inc
sbb
and
je
outs
inc
push
imul
add
xor
out
iret
and
push
jnp
pop
nop
dec
popf
nop
cmp
jl
xor
mov
int
out
leave
in
adc
ds
(bad)
dec
adc
jp
jb
mov
data16
add
adc
stc
iret
mov
push
cmp
xor
(bad)
loopne
push
adc
cmc
popa
cld
outs
add
fnstenv
test
fwait
push
or
mov
add
test
outs
adc
popa
cmc
rol
aam
imul
arpl
xchg
adc
sbb
xchg
inc
push
pop
pop
adc
pop
pop
fistp
inc
cld
and
xchg
push
jecxz
cmp
add
mov
mov
lods
pop
loopne
ja
enter
scas
dec
inc
adc
or
jae
inc
adc
sbb
xchg
retf
cmp
aam
movhps
pushf
arpl
rcl
sub
(bad)
xor
sbb
mov
sub
lock
popf
inc
cmp
jge
pop
(bad)
outs
out
jmp
sbb
push
adc
cmps
inc
mov
push
(bad)
nop
aaa
jo
jge
mov
inc
mov
adc
sbb
mov
(bad)
xchg
mov
not
xchg
repz
hlt
inc
or
popa
jmp
mov
sbb
mov
add
adc
(bad)
loope
je
stos
rcl
cmovs
scas
les
mov
aas
sbb
cmp
fmul
sub
adc
xchg
in
enter
adc
mov
les
adc
jne
dec
pop
mov
and
ins
mov
or
repnz
adc
imul
inc
sbb
pop
ins
in
or
loopne
rcr
ja
int3
(bad)
adc
pop
sti
jmp
xor
mov
add
pop
add
ds
jmp
stc
ret
sbb
inc
das
ret
pextrw
adc
push
mov
lock
and
add
ret
hlt
shr
popa
movs
jmp
inc
push
rcr
adc
lds
xchg
in
in
mov
xor
jecxz
fmul
inc
push
cmps
dec
shr
push
adc
dec
xchg
xor
aas
les
pop
das
push
xchg
cld
ss
pop
cmp
pop
pushf
movs
adc
mov
push
jnp
sbb
enter
xor
inc
call
sti
xchg
ror
(bad)
je
sub
mov
jmp
and
adc
fldenv
imul
jae
adc
mov
push
popa
sbb
add
lods
aam
pop
scas
ret
add
xor
movs
and
and
fbld
mov
call
sub
mov
int3
pop
mov
mov
adc
xchg
jne
inc
push
fcom
adc
cmps
test
sbb
and
shl
xchg
pop
dec
int
test
rcl
cld
mov
into
mov
out
pop
sbb
mov
jge
cld
fistp
jg
mov
dec
push
adc
lods
adc
enter
in
jmp
push
loopne
inc
lds
or
mov
daa
or
loope
cmp
sub
sub
xor
out
push
sbb
ret
sbb
je
vcvtpd2dq
mov
mov
(bad)
aam
ror
cmp
mov
shl
xchg
adc
cmps
int3
and
cmp
xor
movs
cld
xchg
clc
xchg
loopne
jmp
mov
push
xchg
aas
dec
xor
mov
and
ret
mov
pop
dec
inc
jmp
or
mov
loop
jg
out
inc
push
pop
jmp
add
mov
xchg
outs
fxch
fisttp
dec
mov
or
imul
mov
scas
sbb
fdivr
call
call
fadd
adc
adc
inc
(bad)
movs
or
inc
je
dec
pop
sbb
sbb
out
hlt
jno
sahf
adc
mov
sub
int3
sbb
rol
pop
adc
cmc
loopne
inc
jne
pop
adc
push
xchg
jmp
jmp
inc
lods
(bad)
push
mov
jge
adc
mov
dec
mov
adc
ror
cmp
sar
push
inc
or
icebp
pop
pop
idiv
sbb
aad
adc
and
(bad)
in
mov
call
and
dec
mov
mov
mov
ret
je
dec
scas
mov
jns
retf
pusha
je
lock
retf
(bad)
add
clc
div
bnd
dec
ficomp
sahf
xor
mov
push
and
les
shl
hlt
add
add
mov
push
sbb
retf
cmps
movs
mov
int3
or
cmps
(bad)
add
sub
arpl
cld
je
add
xchg
inc
fwait
adc
jb
pop
adc
xchg
ins
dec
mov
cmp
or
je
aaa
je
int3
inc
icebp
mov
xchg
(bad)
nop
stos
movs
cmps
bnd
jmp
(bad)
jne
mov
mov
add
adc
push
in
in
js
ds
rol
jae
pop
rol
xor
or
and
mov
adc
(bad)
pushf
mov
sbb
mov
dec
adc
jp
jno
jo
pop
jnp
sub
jmp
lods
adc
dec
sub
pop
jae
int3
and
cs
loopne
push
stos
lahf
sub
imul
xchg
pop
std
sbb
or
out
popf
or
lea
in
mov
mov
pop
inc
fnstsw
adc
xchg
sti
call
jb
cmp
je
pop
sub
in
neg
cmps
jne
hlt
push
test
je
iret
cmp
adc
pop
sti
sub
push
repnz
push
or
popa
retf
mov
jecxz
es
mov
out
cmp
and
push
je
jmp
adc
add
xchg
loope
rcr
adc
dec
cmp
mov
inc
retf
hlt
push
sbb
and
test
outs
out
pushf
adc
sub
xchg
mov
and
mov
xor
ret
adc
xor
stc
cwde
cmp
and
test
les
(bad)
mov
adc
xchg
dec
outs
dec
rcr
mov
cmp
sbb
or
ror
les
call
leave
test
mov
in
xor
mov
lahf
or
and
dec
sbb
mov
mov
sbb
call
or
loop
cmp
inc
mov
pushf
out
mov
push
test
js
jmp
cmp
jmp
(bad)
sbb
jne
mov
fst
gs
xchg
mov
sub
movs
jle
mov
loope
xor
mov
fistp
bound
jmp
inc
fdivr
adc
cmps
icebp
push
adc
inc
dec
jmp
adc
sbb
or
ss
ins
aam
xor
push
(bad)
cmp
hlt
(bad)
imul
(bad)
enter
push
jp
sti
mov
xchg
cmp
test
adc
inc
dec
(bad)
in
cmp
inc
lock
scas
mov
sub
neg
dec
xchg
pslld
sub
and
sbb
arpl
stos
dec
xchg
fwait
ret
xchg
hlt
ins
int3
adc
nop
sbb
and
ds
aas
out
inc
cld
lods
add
shr
xchg
adc
mov
cli
sub
popa
sbb
cmp
mov
dec
enter
out
outs
jo
js
xlat
mov
mov
push
jp
mov
adc
xchg
sbb
pop
cmp
adc
cs
test
and
icebp
call
add
(bad)
fdiv
add
add
xchg
lods
sbb
je
aad
rol
push
xchg
ret
pop
fdivr
xlat
adc
sbb
xchg
(bad)
or
rcl
in
mov
fwait
je
sbb
out
xchg
ja
cmps
mov
dec
jae
outs
adc
pop
jnp
adc
int3
mov
push
enter
or
ja
and
addr16
fwait
xor
cmp
out
adc
mov
dec
adc
adc
(bad)
movs
jmp
sub
movs
enter
and
inc
push
ja
adc
(bad)
jmp
push
adc
out
(bad)
and
xor
or
movs
in
dec
adc
cmc
jp
sahf
push
push
fsub
jmp
push
cmc
adc
in
jecxz
es
mov
mov
movs
dec
adc
mov
push
fcom
mov
sub
(bad)
shl
adc
dec
adc
adc
fsub
aas
adc
data16
push
js
hlt
adc
ret
outs
push
dec
mov
sub
and
adc
and
jg
es
pop
aas
xchg
(bad)
adc
push
ja
xchg
mov
jnp
adc
mov
cmp
loop
sbb
push
test
sbb
hlt
addr16
les
adc
enter
daa
and
add
(bad)
(bad)
adc
ror
repz
pop
in
pushf
ss
adc
inc
shrd
ss
movs
fld
xchg
mov
stos
test
inc
push
pop
dec
or
pop
mov
jne
pop
mov
xchg
sbb
jno
mov
cli
fdiv
dec
xchg
mov
mov
scas
jns
ficom
xor
push
std
and
jmp
aas
push
jge
and
das
add
push
fadd
hlt
xor
in
xchg
sbb
and
adc
or
add
aam
mov
cmc
mov
jno
adc
out
mov
adc
sbb
push
(bad)
jmp
adc
popa
pop
ins
out
adc
lea
retf
aas
push
mov
xor
xchg
int3
inc
hlt
xchg
(bad)
jno
stc
into
xchg
call
dec
cli
sar
aam
mov
(bad)
cmp
mov
gs
adc
mov
xor
mov
push
push
loop
call
rcl
xor
gs
sahf
ret
sbb
addr16
mov
add
pop
dec
xor
mov
sub
sbb
rcr
dec
jmp
push
les
das
test
pop
out
test
test
cdq
(bad)
mov
cs
or
sub
loop
retf
xchg
push
sbb
lods
out
lds
and
pop
jne
stc
sbb
sahf
enter
adc
(bad)
lods
stos
push
mov
xchg
dec
jg
xor
and
rcl
pushf
ret
xchg
in
xor
fisub
push
(bad)
cmp
mov
pop
push
push
sahf
adc
pop
mov
adc
loope
movs
int
or
adc
push
inc
out
mov
adc
hlt
out
enter
mov
jns
inc
movs
inc
sub
(bad)
(bad)
adc
out
scas
push
fcmove
cmovo
sbb
inc
fadd
inc
mov
cld
fs
sbb
sbb
xchg
and
jno
cmp
mov
loope
in
jg
in
or
fcom
cwde
ror
and
adc
cmp
rcr
gs
cmp
push
int3
adc
mov
movs
cld
sub
cmc
adc
jmp
aas
pop
adc
js
loop
inc
out
adc
retf
push
aam
adc
imul
mov
adc
and
sbb
outs
jmp
sahf
fnstsw
popf
xor
test
arpl
mov
das
iret
lds
ret
sub
xor
adc
push
fwait
or
jmp
fcom
addr16
movs
loope
lods
aam
fimul
mov
add
pop
push
xchg
jecxz
push
jb
add
pop
add
stc
addr16
mov
push
pop
out
hlt
or
sbb
push
pop
cmp
adc
int3
push
test
pop
es
cmps
xchg
loope
nop
(bad)
xchg
push
es
pop
adc
cmps
adc
or
rcl
outs
dec
je
lds
retf
test
pusha
or
test
adc
add
mov
enter
mov
jns
xlat
inc
adc
xor
and
stc
aas
sbb
adc
xor
dec
xchg
adc
and
imul
ja
outs
jle
adc
movs
push
dec
fiadd
lock
adc
sbb
mov
xor
sbb
jmp
xchg
sub
adc
jns
inc
and
lods
push
adc
mov
aam
mov
push
mov
mov
loope
pop
cwde
or
sbb
arpl
or
into
adc
test
jge
cmp
inc
add
push
sar
(bad)
mov
push
xor
xchg
cld
movs
enter
icebp
and
sub
dec
movs
in
xchg
ins
or
xor
jmp
fidivr
and
out
aad
dec
and
ror
loope
mov
sub
pusha
in
inc
or
sar
nop
aaa
out
dec
ret
adc
movs
push
ss
(bad)
cmps
adc
push
adc
sbb
cli
jmp
pusha
xchg
xchg
lods
push
retf
idiv
adc
ret
rcr
ins
xchg
sub
adc
loope
and
cdq
clc
(bad)
adc
push
mov
inc
push
loope
xchg
mov
pushf
inc
jp
xchg
mov
lods
cmc
dec
or
pusha
adc
mov
das
mov
mov
and
movs
adc
daa
xor
jmp
adc
ss
out
ins
adc
jo
cli
ds
sub
js
mov
loop
arpl
daa
test
pop
adc
pop
fcom
adc
push
sbb
fst
xor
lock
aas
push
frstor
out
ins
out
adc
in
inc
int3
repz
cli
scas
pop
daa
cmps
xchg
pop
aam
popa
and
nop
push
push
(bad)
jno
test
sbb
adc
fwait
neg
push
pop
jo
outs
les
xlat
xchg
cdq
add
cmps
mov
inc
sub
das
(bad)
hlt
fisub
adc
nop
and
or
jmp
in
adc
nop
jmp
pop
xchg
cmp
ss
sbb
aam
loop
sbb
cmp
pop
cwde
mov
and
lahf
mov
or
xor
adc
cs
dec
or
push
lock
cmp
das
neg
sbb
cmp
add
inc
and
adc
xchg
bound
xchg
int
in
inc
inc
mov
adc
rcl
fld
(bad)
cmc
sbb
xchg
xchg
xor
stos
pop
mov
jne
(bad)
xchg
jb
ins
lahf
imul
push
add
daa
mov
scas
adc
ficomp
dec
imul
push
repnz
fwait
inc
jmp
jg
pop
mov
test
adc
mov
and
(bad)
imul
push
inc
jl
aaa
push
dec
sbb
mov
xor
jle
je
and
and
sbb
call
xchg
xor
push
add
cmp
jbe
not
retf
pushf
sbb
xchg
pusha
adc
mov
imul
into
sbb
xor
stc
push
mov
test
xor
adc
cmp
adc
push
xchg
outs
retf
rcr
iret
call
push
shr
cmp
push
hlt
xor
xchg
jle
test
mov
xchg
adc
sbb
out
cmp
adc
stc
push
int3
xchg
lock
mov
ret
adc
inc
test
retf
in
out
and
push
push
push
cmp
dec
mov
xor
test
cld
mov
loopne
pop
es
cmp
and
adc
retf
sub
repnz
inc
push
cmp
into
loop
out
adc
ret
nop
ffreep
(bad)
inc
sbb
mov
cld
repz
jno
sbb
jne
mov
mov
cmp
xor
mov
inc
adc
xor
rcr
adc
mov
call
jg
inc
jle
xor
popf
(bad)
fldpi
and
jge
rcl
es
xor
sub
scas
cmp
ss
xor
std
adc
jb
mov
adc
or
lea
inc
outs
adc
cmp
xchg
sbb
mov
and
(bad)
std
xchg
or
scas
jo
hlt
mov
leave
in
adc
adc
test
mov
adc
pusha
sub
sar
call
aaa
adc
popf
(bad)
adc
mov
inc
int3
test
icebp
xor
and
mov
or
pop
out
(bad)
icebp
sbb
fwait
and
push
cmp
inc
addr16
and
adc
cmp
push
enter
inc
mov
adc
xor
out
mov
popf
(bad)
sbb
add
jmp
sti
jmp
add
inc
loope
inc
jmp
out
adc
ins
sub
sbb
mov
or
sbb
xchg
jmp
test
fidiv
or
dec
push
inc
test
sub
xchg
pop
mov
xor
adc
mov
and
xchg
sar
adc
mov
jmp
mov
iret
pop
push
ins
xor
fst
jge
in
or
je
aaa
jns
adc
dec
fcmovbe
mov
pop
fcomip
and
xor
ror
inc
in
mov
mov
sub
jns
pop
jae
adc
mov
(bad)
sbb
sub
mov
das
sbb
imul
cmp
and
jl
arpl
in
mov
ja
sub
sbb
dec
imul
push
les
push
add
ins
push
push
push
mov
mov
out
mov
adc
rol
pop
cmp
repnz
cli
adc
iret
mov
adc
or
(bad)
inc
lds
add
push
push
movs
imul
(bad)
mov
mov
sub
lods
jge
ja
test
pop
xchg
popf
dec
adc
add
mov
adc
ds
imul
into
xor
outs
div
sti
adc
jge
inc
adc
loope
ins
mov
inc
xchg
data16
or
dec
rcl
mov
mov
shl
jl
lods
ds
mov
xchg
mov
out
fsubr
mov
test
idiv
inc
leave
dec
ins
mov
cld
or
fcom
xor
jmp
test
out
dec
sub
mov
mov
fdivrp
xor
xchg
cmps
cdq
jno
cli
fwait
mov
pushf
aam
xchg
stos
adc
mov
xchg
and
pop
nop
adc
fwait
inc
inc
rol
aam
ja
push
cmp
pop
and
adc
scas
pushf
adc
lock
mov
pusha
inc
adc
pop
inc
jle
test
pushf
jl
mov
xor
ret
jp
lock
mov
cld
jge
loop
adc
lahf
jmp
mov
aas
adc
repnz
rcr
mov
and
fsub
mov
adc
xchg
adc
push
jns
cmp
mov
add
fst
add
fild
adc
pop
xor
pop
loopne
adc
dec
repnz
cmp
out
adc
loope
sar
add
adc
mov
xchg
fsubr
nop
jbe
push
(bad)
out
jb
adc
outs
inc
(bad)
or
lods
mov
cmp
fs
int
retf
je
mul
adc
add
addr16
call
retf
pop
test
(bad)
or
hlt
inc
mov
sub
fisttp
movs
rcl
pusha
adc
pop
cmp
adc
fmul
push
sub
(bad)
aam
xchg
int
call
xchg
sahf
mov
dec
or
les
add
jge
retf
push
adc
out
jnp
mov
push
dec
jmp
xchg
das
xchg
mov
sub
loopne
aam
dec
outs
sbb
test
in
outs
lds
or
xchg
fiadd
sub
je
xchg
pop
push
sub
dec
mov
repz
push
mov
jmp
adc
mov
cwde
pop
ret
pop
fmul
adc
add
icebp
xor
and
add
or
loope
pop
mov
(bad)
sub
adc
cmp
push
add
cmps
sar
test
pop
jg
sub
cmps
or
dec
and
loopne
repz
push
sbb
xor
pop
das
fnstcw
xor
mov
adc
repnz
add
cmps
jl
add
or
repz
adc
mov
pop
test
cld
jl
in
jmp
add
movs
shr
adc
mov
cmc
std
adc
cwde
cs
and
popf
cld
mov
(bad)
popf
push
adc
push
test
mov
pop
test
sbb
add
cmc
(bad)
mov
out
pusha
mov
jle
adc
or
push
repnz
cmp
jae
bound
aam
xchg
adc
fcomp
fdiv
adc
cs
xchg
sti
test
fadd
adc
pop
mov
out
ret
mov
call
mov
xchg
in
mov
cdq
(bad)
mov
icebp
in
xchg
cli
cmp
pusha
cs
ins
inc
(bad)
push
and
xchg
xchg
push
rcr
cli
push
into
or
neg
addr16
jp
lds
inc
ins
xor
adc
out
adc
push
stos
call
inc
add
sbb
jbe
bound
xor
adc
out
and
sbb
adc
mov
call
adc
lahf
inc
lock
push
aaa
pop
push
or
imul
push
(bad)
(bad)
fcom
into
mov
or
inc
test
out
in
mov
cmps
lods
push
pop
fwait
div
xor
aad
pop
xchg
sbb
and
idiv
jne
dec
xor
push
pop
popa
aas
je
sbb
sbb
mov
adc
fldenv
test
xchg
adc
xchg
sbb
cmp
xchg
(bad)
int
jge
adc
cwde
cmps
push
dec
repnz
inc
adc
inc
or
pop
jle
jl
call
and
retf
push
and
int3
fmul
adc
adc
cmp
push
pop
mov
jp
ror
je
(bad)
cmp
rcr
xchg
sbb
das
adc
aaa
sbb
lds
imul
adc
pop
jno
sub
and
adc
xor
jae
mov
and
les
es
loop
aam
outs
hlt
retf
inc
ins
clc
push
adc
nop
aaa
stos
sub
sub
in
mov
test
sti
aam
shr
fld
bound
test
xchg
ins
data16
pop
or
push
rcr
sub
cmp
adc
out
ret
push
adc
adc
fnstcw
sahf
sub
adc
cmp
adc
dec
data16
add
cmp
xchg
adc
mov
loop
mov
mov
(bad)
adc
xchg
es
cmp
and
push
xor
outs
in
out
mov
mov
push
std
imul
int3
jbe
or
clc
sbb
xchg
bound
xchg
nop
fstp
and
loop
jmp
call
push
jnp
and
iret
lds
gs
mov
int3
inc
cmp
fs
sub
out
lds
pop
jae
or
imul
in
lock
xor
into
xchg
mov
sub
lods
adc
aam
add
mov
xlat
xchg
adc
pop
push
push
int3
push
lods
pushw
stos
push
push
mov
retf
fadd
dec
sbb
push
in
fcmovnb
pop
or
scas
adc
inc
mov
aas
mov
pop
rcr
shr
je
pop
mov
mov
mov
add
adc
add
dec
inc
adc
mov
aas
in
pop
push
or
and
cmp
(bad)
hlt
retf
sti
xchg
jmp
rol
popa
aas
retf
inc
aam
scas
gs
or
inc
enter
add
test
adc
out
ja
leave
cmps
scas
es
pop
dec
adc
mov
sbb
xlat
inc
sub
out
add
pop
push
adc
jmp
adc
sbb
call
ret
add
adc
mov
nop
cwde
push
in
adc
inc
inc
fmul
xor
jmp
movs
push
jmp
jbe
xor
jae
sbb
mov
mov
jmp
fwait
mov
(bad)
adc
cmps
adc
loope
cmps
gs
stos
rcr
dec
aam
(bad)
and
xor
pusha
xor
bswap
sbb
aam
pop
pop
loopne
(bad)
int3
sub
mov
xchg
push
popf
popa
les
and
inc
adc
out
mov
xchg
jno
in
sbb
or
inc
mov
jecxz
test
mov
cmp
mov
loopne
push
loope
lds
les
dec
sbb
nop
test
push
scas
xchg
int3
(bad)
call
push
cld
int3
mov
out
movs
inc
sbb
inc
mov
add
add
das
imul
movs
pop
sbb
cmp
jne
outs
mov
std
xchg
aad
lods
push
ins
adc
cld
inc
repnz
out
dec
inc
(bad)
inc
movs
add
push
aaa
call
or
jmp
dec
int3
cmc
bound
pusha
data16
bnd
and
clc
out
adc
aam
xchg
cmp
aam
inc
test
pop
adc
rcr
stos
sar
in
or
xchg
leave
sbb
sub
cdq
fsqrt
les
imul
lods
dec
jg
mov
js
(bad)
adc
ds
icebp
push
sub
xor
pop
inc
aam
lea
cmp
dec
adc
cmp
lock
mov
inc
daa
add
std
out
jnp
cmp
or
inc
push
push
gs
dec
adc
cmp
lock
aam
stc
xlat
cmps
pop
(bad)
mul
popf
adc
out
gs
dec
fcmovnu
ret
aas
sbb
in
jg
lds
or
xlat
test
mov
adc
push
pop
push
lods
es
shr
push
fdiv
adc
mov
ret
clc
rcr
shr
fidiv
pop
(bad)
adc
enter
jl
test
jbe
fs
dec
jmp
cmps
sub
ds
mov
jae
(bad)
repnz
sbb
sub
jle
sbb
adc
sbb
je
in
std
loopne
ret
cmp
sar
mov
add
fdiv
cs
mov
in
dec
cmp
fnstcw
ret
mov
push
rol
mov
pop
outs
iret
es
pop
xchg
inc
dec
fcmovnbe
mov
xor
mov
xchg
lods
and
mov
out
adc
mov
push
std
in
ja
jp
imul
test
xor
sbb
icebp
pop
ficom
test
dec
push
unpcklps
add
bnd
push
sub
shl
retf
stc
leave
push
fwait
(bad)
pop
sbb
sub
mov
arpl
clc
xor
xchg
mov
add
bound
out
adc
sub
jne
cmp
jmp
rcl
dec
call
push
mov
and
adc
inc
jmp
sub
cmps
add
cdq
xor
call
mov
lods
mov
dec
and
adc
sahf
ror
sub
adc
sub
(bad)
dec
jbe
adc
fldenv
ins
inc
hlt
sbb
push
adc
or
or
enter
jo
dec
aas
mov
adc
sbb
test
lods
jl
adc
arpl
or
jg
push
xchg
pop
adc
add
xor
jecxz
mov
je
xchg
enter
xlat
in
cld
dec
add
inc
adc
ins
aad
push
in
stos
bound
not
aam
popf
push
loopne
in
cli
lahf
adc
test
adc
sbb
jg
xchg
inc
pop
out
adc
out
adc
jp
ror
push
call
in
out
xchg
jmp
fnstcw
(bad)
cmps
cmp
sbb
hlt
pop
sub
(bad)
push
mov
push
adc
sbb
adc
push
rcr
(bad)
mov
push
mov
adc
sbb
dec
pop
xor
loopne
xchg
push
leave
(bad)
add
xchg
not
imul
adc
xchg
addr16
hlt
add
out
and
rcr
sbb
xor
(bad)
retf
xchg
fist
retf
inc
in
out
test
xchg
aad
lock
dec
pop
dec
repnz
push
xchg
fwait
jmp
mul
lods
sub
pop
rol
int3
mov
pop
sbb
rol
aas
push
lahf
mov
call
and
retf
cli
xor
repz
adc
in
add
sbb
push
push
jo
sub
cmp
inc
push
ins
(bad)
mov
xchg
popf
jl
sbb
cdq
jmp
ins
fldcw
mov
data16
adc
daa
push
xchg
lods
xchg
adc
xchg
xchg
cmp
pop
(bad)
lds
neg
hlt
loopne
xchg
stos
jno
add
retf
xchg
push
adc
out
adc
hlt
pushf
and
dec
add
loope
fadd
jg
fs
les
fdivr
adc
xor
inc
sub
inc
add
pop
ffreep
ins
cdq
xchg
mov
adc
push
mov
jmp
xchg
int3
sbb
sbb
cs
pop
bound
mov
inc
test
pop
mov
sahf
adc
push
cwde
(bad)
cmp
gs
ins
xchg
adc
add
push
add
sahf
fdiv
xchg
adc
and
pushf
xor
add
cdq
and
sbb
mov
cmc
cs
push
inc
aam
cli
retf
mov
adc
inc
mov
stos
(bad)
dec
adc
into
jns
ins
out
adc
aam
mov
push
pop
add
adc
xchg
fst
pop
inc
adc
retf
repnz
jb
(bad)
lds
and
adc
push
jno
mov
int3
imul
into
mov
add
inc
out
cmp
ret
inc
leave
imul
dec
nop
inc
adc
adc
adc
mov
pop
dec
dec
jmp
xor
jnp
lock
out
in
mov
movs
mov
mov
jo
mov
sub
repnz
jge
(bad)
push
sbb
sahf
in
out
mov
xor
jae
in
mov
add
jmp
xor
jmp
adc
pop
std
cmp
bound
imul
add
or
and
sub
imul
int
aad
pop
cmp
sub
stos
pop
fild
sbb
push
xchg
dec
sbb
fucom
pop
imul
or
sbb
mov
(bad)
mov
je
pop
rcl
hlt
ror
mov
lea
leave
xchg
xor
push
inc
in
and
push
ret
stos
sbb
adc
mov
(bad)
(bad)
jl
add
hlt
in
imul
push
and
sbb
cmc
ins
mov
sbb
xor
xchg
test
popf
adc
add
(bad)
dec
add
mov
mov
clc
in
stc
sub
push
in
std
repz
jns
mov
adc
sbb
(bad)
adc
and
popf
sbb
lahf
sbb
fcomp
int
mov
cmp
(bad)
sbb
std
adc
sub
das
(bad)
or
adc
xchg
test
cmp
push
and
rol
imul
jbe
adc
pop
(bad)
aaa
and
jg
adc
xchg
imul
push
adc
ja
or
or
shl
inc
mov
inc
int3
add
and
and
jnp
pop
retf
sub
mov
add
adc
dec
retf
jg
or
gs
add
jnp
aam
cmp
mov
mov
pop
xchg
pusha
mov
adc
mov
test
fdiv
adc
xchg
adc
mov
rcl
(bad)
call
sub
adc
gs
push
adc
push
cwde
mov
pop
ins
arpl
adc
adc
cli
dec
sbb
mov
test
xor
push
aam
mov
xlat
outs
cdq
out
inc
hlt
xor
push
adc
std
add
fld
push
inc
dec
push
mov
retf
push
mov
push
and
mov
mov
sbb
(bad)
imul
push
stos
scas
popf
mov
or
adc
push
out
push
icebp
jl
push
test
pushf
fcmovu
mov
and
pop
adc
jne
pmulhw
out
push
mov
and
xchg
(bad)
push
cwde
push
aaa
adc
pusha
mov
pop
test
into
adc
cld
push
adc
jl
sbb
pushf
retf
adc
imul
jns
mov
xchg
inc
cmp
adc
xchg
xor
js
pushf
out
and
lods
pop
loopne
sub
test
jmp
sti
gs
adc
mov
imul
push
int3
mov
inc
push
mov
hlt
adc
pop
in
pop
xchg
inc
in
loop
mov
or
into
adc
mov
mov
movs
fist
add
mov
pop
xor
iret
mov
retf
loopne
fbld
adc
call
adc
adc
jnp
test
xchg
pusha
(bad)
jmp
cmps
push
push
std
or
jg
dec
daa
cmp
sbb
je
sub
out
jp
xchg
or
add
lea
sub
jge
dec
xchg
sub
enter
lock
loop
xchg
int3
pop
das
xor
adc
sub
and
push
int3
cmp
iret
inc
sbb
rol
div
aaa
pusha
movs
xor
je
pop
cdq
jno
dec
pop
sar
push
add
lea
arpl
mov
mov
jae
jecxz
cmp
push
fsubr
pop
imul
out
or
dec
ins
stos
jecxz
arpl
push
xchg
leave
mov
jo
out
scas
inc
jecxz
movs
ss
cmc
adc
xlat
(bad)
retf
lds
imul
xor
or
sar
pop
add
sti
mov
pop
xchg
adc
sbb
loopne
cdq
xor
or
add
inc
imul
cmp
or
add
and
pop
ins
cmp
je
int3
sbb
sti
imul
(bad)
retf
fucomip
adc
imul
es
ins
mov
cmc
out
movs
vphadddq
sub
inc
adc
mov
cmp
add
inc
jns
mov
aaa
repnz
imul
xchg
mov
sbb
and
pop
mov
shl
test
es
push
(bad)
sbb
pop
push
test
adc
mov
aad
adc
pop
in
aaa
add
dec
enter
pop
fistp
neg
aad
test
xlat
les
loopne
adc
sbb
xor
dec
mov
mov
pushf
adc
and
mov
jge
rcr
xchg
push
fcomp
dec
mov
push
adc
jbe
add
push
cld
cdq
cmp
mov
push
imul
jo
adc
sti
mov
ror
cwde
popa
or
rcl
loope
adc
mov
clc
inc
je
adc
sub
in
stc
popf
add
push
mov
jl
mov
daa
icebp
clc
pop
in
out
js
ja
dec
hlt
pop
out
adc
repnz
popf
test
jo
icebp
mov
rcr
retf
pushf
or
lods
mov
dec
(bad)
push
add
jl
mov
pop
scas
cmp
pop
je
dec
in
mov
xchg
ins
xchg
sbb
xor
test
fldcw
sbb
es
inc
hlt
aad
adc
mov
jbe
clc
rcl
and
jmp
mov
outs
ror
mov
mov
nop
jns
fild
ss
adc
int
xor
xchg
jecxz
gs
ja
adc
mov
daa
mov
je
xor
xor
ins
lods
xchg
mov
ins
shr
sbb
inc
and
adc
add
mov
and
or
cmp
test
fwait
adc
stos
sbb
xchg
adc
pop
mov
xor
cdq
jle
cmp
xchg
mov
mov
cmc
adc
cs
(bad)
push
jne
push
mov
pop
add
inc
mov
lods
aam
and
retf
scas
inc
inc
hlt
and
inc
out
icebp
push
or
mov
mov
aaa
(bad)
(bad)
ret
movhlps
retf
and
or
imul
xchg
mov
or
mov
mov
sbb
stos
xchg
js
xor
xchg
int3
dec
adc
xlat
call
std
push
movq
xchg
adc
dec
sbb
and
xchg
int3
mov
js
adc
push
mov
(bad)
adc
pop
aas
push
dec
cli
clc
sbb
dec
push
xchg
hlt
mov
mov
push
shr
(bad)
pop
adc
and
fstsw
fld
imul
and
and
or
and
stos
addr16
adc
jno
in
jg
sti
enter
leave
push
sbb
inc
adc
jle
sub
loope
sbb
jno
xor
and
sub
(bad)
adc
and
mov
xor
fnstcw
ja
xor
sbb
adc
jg
(bad)
cli
inc
mov
scas
pop
push
cmp
add
adc
bound
jl
dec
in
mov
cli
jle
addr16
cmp
stos
xchg
mov
mov
dec
sbb
out
cmp
adc
iret
aaa
xchg
add
cmp
cli
sub
and
mov
inc
fcomi
inc
clc
ins
adc
xchg
aaa
sbb
or
(bad)
fmul
adc
xor
adc
and
mov
and
jbe
pop
mov
and
mov
stos
mov
movd
adc
in
pop
and
or
aas
lods
fistp
arpl
jnp
xchg
outs
shr
out
into
mov
ds
xchg
mov
std
sub
or
xor
inc
into
int3
into
add
imul
jmp
clc
int3
retf
sub
mov
mov
loope
(bad)
popf
push
(bad)
mov
retf
xor
sahf
cmp
inc
sbb
cmc
dec
not
fstp
pop
int3
cmps
xor
les
rcl
or
xor
inc
pop
stos
pop
push
and
out
xchg
and
jns
mov
push
adc
mov
pop
movs
add
lahf
and
cmp
pop
nop
cmps
dec
inc
jge
adc
pop
jmp
dec
ret
outs
adc
mov
fsubr
adc
daa
xchg
(bad)
adc
out
push
(bad)
scas
gs
xchg
les
cmps
xor
(bad)
ins
fcom
(bad)
lods
fbld
lock
loop
lea
iret
xor
scas
sub
out
add
scas
mov
adc
sub
icebp
push
adc
mov
jae
adc
rol
adc
and
iret
jg
jecxz
adc
mov
pop
and
andnps
and
cmp
call
inc
inc
je
stos
sbb
adc
pop
imul
std
inc
add
retf
or
adc
mov
mov
in
adc
cmovb
cmp
push
adc
add
add
pop
(bad)
hlt
push
xchg
sub
jmp
fisttp
das
imul
out
xchg
adc
mov
push
and
int
sbb
arpl
out
mov
jg
adc
stc
iret
pop
(bad)
popf
ins
lahf
jno
bnd
inc
adc
outs
test
pop
adc
jmp
daa
jge
xor
imul
adc
or
in
xor
mov
or
mov
push
lods
jae
scas
sub
ficom
lea
call
sub
aam
mul
out
sub
or
lods
test
iret
les
mov
xchg
jae
sahf
movd
in
icebp
adc
imul
adc
out
pop
aas
cwde
sbb
(bad)
imul
mov
outs
sbb
mov
inc
in
inc
mov
pop
pop
adc
sar
cmp
outs
add
(bad)
push
dec
enter
xor
test
or
jg
pop
pop
into
push
adc
out
xchg
ins
and
into
push
pop
leave
stc
icebp
adc
sub
add
aas
xlat
les
cmps
das
cmp
adc
call
lods
adc
outs
dec
jecxz
adc
pop
aam
mov
add
std
scas
dec
mov
(bad)
xor
ss
fucomip
mov
push
push
out
adc
cli
(bad)
iret
pop
lods
bound
mov
adc
pusha
lea
sub
adc
shr
pop
xor
mov
in
je
sar
dec
jns
dec
hlt
cmc
and
iret
mov
pop
aad
xor
adc
shl
in
xor
icebp
pusha
imul
sbb
data16
cmc
xor
xor
loopne
cmp
sbb
adc
sub
ret
adc
cmp
push
aam
iret
adc
bound
and
pop
dec
lds
hlt
xor
test
or
push
jg
xor
pop
jmp
mov
fwait
xchg
and
scas
xor
movs
dec
aam
adc
retf
adc
fld
or
lahf
push
jl
aas
stc
cld
fld
fdivr
cmps
xor
mov
call
retf
dec
in
outs
adc
mov
cmc
js
arpl
mov
ret
out
mov
ror
in
sbb
pop
jg
mov
cmp
lods
imul
add
fdiv
outs
lahf
xchg
movs
push
stos
mov
out
je
inc
rcl
lods
fsub
nop
adc
cmp
dec
mov
dec
dec
popf
push
sub
imul
inc
cmc
out
inc
adc
mov
or
adc
dec
nop
mov
ror
jbe
test
cmp
sbb
push
fcmovne
or
and
in
mov
ror
in
div
in
push
ds
lods
pusha
stos
addr16
inc
aad
push
adc
std
pushf
mov
dec
fld
lods
js
xchg
sbb
push
xchg
jge
adc
mov
xchg
dec
shr
add
ins
dec
int
out
fsub
push
repnz
mov
sbb
adc
fdivr
sbb
in
adc
addr16
out
das
rcl
sbb
jmp
pop
popa
xchg
adc
(bad)
cli
push
sub
push
out
(bad)
(bad)
scas
and
xlat
cmps
call
adc
gs
ficom
bound
in
adc
pop
test
das
adc
push
pop
fdiv
mov
(bad)
add
xor
inc
push
sub
cmp
mov
adc
mov
test
lds
enter
call
jge
xor
dec
in
jg
and
retf
dec
mov
inc
add
push
out
icebp
out
out
mov
push
dec
mov
xchg
test
add
mov
nop
int3
add
adc
xor
mov
push
and
sub
cld
cli
int
jp
xchg
loop
int
lock
es
fsub
aas
outs
out
pop
mov
clc
data16
fdivrp
out
(bad)
gs
adc
xchg
ins
sub
cmp
push
xchg
xchg
jmp
out
int3
dec
(bad)
ftst
jle
fdivp
pop
xchg
sub
inc
adc
icebp
adc
clc
add
gs
adc
retf
mov
sub
xchg
enter
rcl
xchg
push
sbb
push
or
les
jmp
xor
and
lock
inc
fisubr
imul
adc
ja
shl
mov
ins
xchg
jmp
adc
push
sub
xchg
add
stc
cmp
jg
sub
adc
xchg
and
(bad)
mov
mov
mov
xor
adc
push
mov
adc
into
loop
pop
div
push
mov
dec
pop
adc
and
cmp
lds
retf
add
cmp
jmp
adc
je
fnstsw
or
daa
mov
movs
clc
sar
push
adc
fsubp
fild
inc
sti
mov
push
fistp
jbe
xor
push
inc
cmp
adc
fidiv
xchg
pop
add
xlat
jp
push
or
movs
jle
xor
adc
pop
push
inc
cmp
cmp
adc
repz
mov
outs
jmp
dec
icebp
adc
retf
imul
(bad)
imul
xchg
sbb
jno
fidivr
push
push
loope
push
mov
repz
jl
cmp
aam
mov
dec
rcl
adc
aam
jmp
and
jge
adc
or
rcl
and
jmp
jle
or
jge
sbb
adc
popa
or
mov
cmps
sub
out
jge
loopne
mov
xchg
(bad)
or
inc
sahf
sbb
cmps
cdq
adc
xor
div
add
add
fidivr
adc
add
xlat
push
(bad)
(bad)
arpl
cmp
pop
dec
xor
mov
loop
add
cmp
jle
data16
adc
push
mov
jo
cli
xor
bound
retf
sub
mov
ret
jb
(bad)
cmps
gs
lods
in
sti
pop
jbe
dec
adc
xor
fidiv
(bad)
xchg
aam
daa
mov
adc
mov
lods
sahf
ins
xchg
cmp
int3
iret
out
adc
mov
in
xchg
and
cs
hlt
jle
aaa
fisub
adc
xchg
pop
jg
pop
(bad)
icebp
adc
ins
dec
hlt
adc
push
mov
mov
push
repnz
mov
adc
push
mov
adc
adc
popa
les
push
sub
lock
sub
neg
mov
adc
or
ja
push
mov
push
sub
stc
inc
or
int3
popa
mov
push
ret
jl
retf
inc
jp
addr16
out
and
lahf
mov
lods
xchg
loop
push
cdq
inc
jne
cdq
cld
inc
add
test
int3
bound
pop
inc
or
das
out
push
popa
repz
mov
fldenv
jecxz
pop
sti
push
add
fwait
adc
retf
push
int3
push
aad
and
inc
popf
add
pop
retf
pop
(bad)
xchg
fld
repnz
fs
scas
mov
add
xchg
adc
cs
lods
inc
add
and
std
bound
loopne
mov
pop
sti
ins
mov
hlt
(bad)
repnz
lea
add
or
sbb
cmps
js
xor
(bad)
push
int
cmp
mov
mov
xchg
mov
pop
lahf
int3
sahf
std
out
mov
ins
data16
scas
adc
add
fsubp
or
dec
je
adc
and
and
and
add
pop
add
mov
or
jmp
icebp
mov
les
and
shl
fimul
mov
sbb
(bad)
jl
and
stos
or
inc
inc
push
add
adc
cli
adc
add
call
(bad)
pop
xchg
xchg
push
sbb
fbstp
mov
inc
or
push
dec
pop
outs
lahf
sub
sub
fidiv
fs
adc
mov
push
xchg
sub
add
mov
stc
arpl
mov
neg
push
xchg
mov
inc
xchg
out
jo
(bad)
jmp
cs
adc
cmp
mov
gs
call
xchg
movs
repnz
sbb
mov
add
aam
enter
add
imul
retf
sbb
and
test
add
daa
adc
or
or
dec
push
out
nop
mov
int3
xchg
test
mov
push
cmp
in
xchg
and
cmp
adc
sub
jmp
bnd
pop
(bad)
icebp
cmps
mov
(bad)
retf
div
jge
adc
aaa
sub
inc
mov
div
dec
fwait
(bad)
cmp
mov
adc
fwait
cs
test
or
cld
adc
sbb
cdq
sahf
and
mov
mov
fdivr
jmp
(bad)
dec
push
xor
cli
add
test
fild
fsubr
jmp
mov
push
sbb
dec
scas
mov
es
in
icebp
xor
mov
in
and
add
pop
jge
sbb
in
mov
lods
aam
push
(bad)
int3
cld
je
push
cmp
je
pop
push
and
push
xor
cld
cmps
scas
(bad)
je
jae
fwait
and
mov
inc
xchg
dec
mov
sbb
push
pop
inc
fiadd
test
movs
push
inc
in
mov
push
(bad)
cmp
mov
add
retf
ret
pop
sahf
push
inc
popf
sbb
adc
or
jb
mov
out
fwait
sbb
mov
inc
mov
and
xchg
jmp
les
xlat
push
mov
pop
inc
retf
cmp
ins
scas
pusha
pop
ret
repnz
or
dec
sti
ins
xor
add
adc
mov
pop
cwde
ins
cmovae
xchg
mov
mov
push
sbb
call
mov
out
inc
sbb
int
adc
call
mov
xchg
jmp
imul
popa
mov
movs
je
in
push
test
mov
adc
rcr
or
ss
fistp
mov
fxch
xchg
retf
int3
adc
ror
and
xor
out
push
in
imul
jl
xchg
sbb
mov
adc
int
ror
movs
fwait
jns
xor
and
adc
fucomi
(bad)
pop
getsec
rcl
jo
add
add
arpl
cmp
call
cmp
xor
popa
outs
dec
dec
sub
mov
or
mov
sbb
inc
or
jb
call
sub
cmps
or
pusha
mov
shr
pop
outs
imul
xor
xor
mov
mov
adc
leave
mov
cwde
in
add
xchg
std
into
fldenv
sahf
jmp
adc
cld
dec
ja
js
cmps
inc
rcr
retf
daa
mov
test
cdq
lods
retf
dec
xor
fidiv
jae
jle
add
js
(bad)
mov
inc
and
cld
rcl
test
jl
sbb
mov
sub
and
lahf
dec
imul
loopne
adc
ins
push
push
jmp
mov
jns
scas
xchg
jmp
jno
dec
in
test
jo
sbb
scas
loop
daa
jmp
int3
rep
je
(bad)
xor
int3
mov
stos
push
int
xor
cmp
fcmove
sub
call
or
push
hlt
lds
imul
xchg
cs
mov
leave
shl
inc
cli
dec
test
addr16
push
jo
xor
test
retf
nop
sbb
dec
not
popa
xchg
sti
out
in
push
sub
push
adc
imul
add
adc
call
sub
enter
mov
retf
mov
cmp
xchg
pop
jg
call
adc
aam
aaa
out
adc
cwde
cld
inc
xchg
enter
inc
cmp
test
ins
mov
xchg
pop
inc
int3
lock
mov
ret
gs
xchg
cld
(bad)
cwde
pop
cmp
(bad)
sub
rol
mov
inc
fist
pop
inc
stos
lods
dec
adc
jae
shl
sbb
or
aam
add
(bad)
cmps
imul
arpl
mov
pop
rcr
clc
loop
in
jnp
add
lods
mov
jne
xor
mov
xchg
inc
adc
add
mov
adc
cli
iret
leave
sbb
ins
fdivr
pop
sbb
pop
mov
sub
aaa
mov
out
in
cmp
or
out
outs
shl
pop
dec
and
mov
adc
adc
pop
adc
cmp
fmul
mov
xchg
ins
pop
call
(bad)
loope
cmp
jecxz
pop
adc
xor
int3
lods
xchg
pop
inc
jg
into
das
es
ret
adc
iret
jns
mov
in
mov
or
inc
mov
call
mov
inc
dec
rcl
scas
sbb
icebp
js
mov
xor
nop
dec
leave
sub
xor
push
fld
jmp
sbb
sti
add
retf
mov
jmp
adc
mov
dec
test
push
xor
out
fcom
and
jge
xlat
(bad)
pop
mov
dec
aam
in
and
ins
push
xor
fld
dec
mov
add
xchg
xor
cwde
mov
inc
pop
fisubr
cmp
shl
adc
fbld
xor
or
rol
lods
imul
pushf
sbb
push
daa
imul
cmp
sbb
cmp
push
adc
push
and
add
or
adc
push
sti
fcmovnb
xchg
push
aaa
xor
pop
dec
xor
fwait
jne
or
jmp
mul
shl
xor
xor
popf
adc
inc
xchg
ins
mov
test
test
cmps
fidivr
xor
adc
aaa
add
adc
or
ins
dec
mov
je
cs
push
das
mov
lods
adc
mov
adc
ret
ins
fwait
add
mov
test
jge
push
jnp
dec
sub
adc
xchg
add
mov
inc
push
adc
dec
mov
xor
rol
enter
jge
out
and
rol
cmp
call
pop
add
loopne
mov
lods
int
or
xor
adc
lds
lock
pop
pop
(bad)
test
adc
or
xchg
in
outs
inc
loop
add
(bad)
mul
(bad)
adc
mov
mov
cli
mov
(bad)
loope
pop
jecxz
add
rcr
sub
dec
jae
pop
cmp
inc
retf
and
xor
adc
jnp
push
xchg
mov
pop
mov
mov
adc
mov
and
loopne
xor
fcom
popa
adc
lahf
or
and
es
rcr
or
mov
loope
ret
xor
in
leave
push
lods
mov
in
nop
adc
mov
movs
ds
hlt
fstp
inc
mov
fnstcw
pop
adc
add
push
outs
dec
and
mov
xchg
pop
call
pop
sbb
repnz
add
rcl
in
inc
es
pop
adc
sbb
or
xor
push
aas
lods
xchg
sub
inc
je
mov
push
rcl
adc
jmp
pop
mov
fstp
arpl
adc
xor
mov
push
cs
shr
data16
jb
out
mov
pusha
movs
add
adc
pushf
jae
cmp
sub
je
iret
push
inc
retf
dec
mov
stos
popf
mov
dec
xchg
outs
retf
(bad)
fst
into
fimul
or
adc
pop
sub
out
jge
in
dec
push
mov
xor
in
adc
push
pop
adc
xchg
lahf
push
jnp
jb
jmp
sub
jmp
push
xchg
icebp
aas
sbb
les
ret
add
repz
push
adc
cdq
jns
sbb
adc
cmp
in
sbb
mov
xor
and
jmp
fld
pop
xor
xchg
jb
push
sbb
(bad)
jmp
ja
lahf
adc
pop
leave
sub
cld
fwait
(bad)
ins
dec
cmc
or
inc
nop
mov
aam
xor
ficom
call
push
push
jbe
push
push
out
xor
add
in
cwde
inc
pop
mov
mov
jae
mov
push
xor
xchg
xor
mov
or
jecxz
inc
(bad)
push
jge
jns
adc
xchg
dec
sub
(bad)
repnz
int3
repz
stc
adc
retf
adc
loopne
xor
outs
not
int3
ret
stos
xor
and
push
mov
ror
jecxz
jbe
sub
call
pop
out
repz
popa
adc
push
das
sub
(bad)
inc
retf
xchg
cmps
in
ins
shl
add
sti
cmc
enter
or
sbb
into
lock
out
stos
test
aas
test
jg
shl
add
pop
xchg
push
int3
adc
(bad)
pop
in
fnsave
cdq
lock
and
imul
clc
retf
cmp
call
sbb
mov
shr
mov
inc
jae
add
div
adc
mov
mov
push
inc
outs
jl
scas
pop
xchg
push
xor
adc
cmp
lods
xor
inc
mov
adc
out
fxam
je
dec
ds
jb
or
test
fwait
xchg
ss
int3
movs
adc
sahf
pop
das
out
cmp
aam
fisttp
in
xchg
inc
push
daa
lods
jns
add
xor
stc
and
adc
movs
mov
add
fidivr
shl
addr16
adc
std
lahf
(bad)
push
jecxz
mov
jl
mov
call
ret
sahf
fsubr
inc
adc
adc
pop
inc
shl
jns
mov
aam
nop
sbb
adc
xor
xchg
mov
ins
xchg
mov
clc
push
cld
sbb
shl
fcomp
retf
adc
bound
hlt
sti
mov
push
cs
sbb
pop
and
ins
cmps
mov
cmp
arpl
sub
idiv
sti
sub
fimul
(bad)
xchg
neg
dec
sbb
push
mov
pop
sahf
mov
out
xor
sbb
js
cmp
mov
sub
add
aam
pop
cmp
(bad)
in
cmp
mov
cmc
sbb
mov
rcr
xchg
push
cmp
push
cmp
dec
mov
adc
xor
daa
dec
lock
pop
cmps
cmp
popf
add
and
fldcw
and
cmps
adc
cmc
out
into
test
mov
dec
dec
adc
push
lods
jmp
call
hlt
cwde
mov
adc
mov
(bad)
scas
adc
cmp
adc
mov
mov
push
mov
or
xor
movs
std
ror
(bad)
lea
adc
push
pop
fsub
lahf
sbb
push
inc
mov
movs
jmp
or
dec
enter
les
xlat
xchg
or
mov
es
mov
shl
in
fcmovne
icebp
mov
adc
mov
sub
clc
ror
stos
call
jp
ret
push
sbb
xchg
and
jecxz
dec
jmp
and
test
xchg
fidiv
mov
sbb
je
add
adc
and
push
test
pop
pop
retf
and
rcr
push
aad
fstp
or
scas
mov
jo
addr16
xchg
xchg
and
stos
xor
cld
mov
dec
in
sub
cmps
mov
mov
dec
arpl
dec
cld
xchg
xor
adc
(bad)
mov
adc
shl
mov
mov
gs
dec
adc
in
jp
icebp
repnz
inc
mov
xor
or
push
pop
push
adc
mov
sbb
mov
pop
(bad)
outs
mov
push
xchg
jno
pop
cmp
xor
les
ss
(bad)
std
nop
adc
es
mov
push
mov
out
out
cmp
gs
xor
int3
mov
(bad)
pop
lods
into
scas
mov
mov
jbe
xchg
xor
or
mov
inc
dec
jecxz
xchg
pop
std
adc
test
test
dec
out
stos
jp
ss
je
cmps
adc
loopne
or
dec
out
ret
retf
gs
mov
add
mov
sbb
xchg
in
jbe
call
aas
adc
stc
fldenv
out
or
push
in
in
shr
rol
std
cmp
xor
add
or
mov
and
cmps
mov
in
pusha
pop
adc
jl
ror
data16
pop
and
dec
adc
enter
and
das
cmp
call
mov
lea
ss
xchg
jl
mov
aam
loopne
fwait
arpl
stos
mov
push
arpl
test
adc
adc
les
adc
in
shl
mov
gs
hlt
sub
sbb
out
es
xchg
in
jmp
mov
pop
xchg
fdivr
pop
call
stos
cdq
cmps
mov
adc
mov
arpl
stos
mov
jns
add
inc
push
(bad)
call
adc
push
lea
xlat
mov
or
test
jge
pushf
jg
xor
repz
int3
xchg
(bad)
cmp
mov
or
pop
or
retf
aam
dec
pop
ins
cmp
cli
jbe
ret
les
xchg
xchg
out
or
jo
mov
add
aam
neg
cld
mov
fimul
inc
xor
in
arpl
xlat
adc
jo
test
hlt
cmp
loopne
cmp
into
adc
sub
xchg
out
into
and
mov
les
sbb
xchg
gs
mov
adc
xchg
xor
and
es
div
and
inc
sbb
adc
push
cmp
jae
sub
ins
out
das
sub
imul
jmp
jge
xchg
push
and
inc
leave
(bad)
les
mov
ins
mov
adc
jae
xchg
cmp
xchg
jnp
mov
adc
shr
movs
pop
adc
adc
dec
jmp
lock
adc
es
rep
aad
scas
add
hlt
push
adc
xor
jmp
aas
enter
mov
rcl
mov
loop
cmp
shr
in
frstor
pop
fild
test
add
fdivr
popa
add
xor
loop
rcr
mov
sub
cmp
popa
and
imul
xor
fsub
test
xor
les
push
mov
adc
repnz
repz
sbb
cwde
mov
pushf
rsm
mov
aaa
inc
mov
int3
xor
pop
xchg
rcl
repnz
adc
jb
jl
arpl
add
xor
ffree
adc
cmp
(bad)
cmc
fnstenv
jmp
mov
mov
and
repz
add
xor
jmp
addr16
push
shl
(bad)
pop
mov
add
cmp
dec
cwde
mov
adc
xchg
gs
clc
mov
mov
adc
sti
test
cmc
cs
cmp
fcomp
jb
cmp
(bad)
hlt
adc
mov
and
rcr
not
push
jnp
jo
pop
xor
int3
xor
lahf
inc
sub
fsub
xchg
push
std
repnz
mov
adc
xor
jne
out
ins
(bad)
aad
inc
ss
int3
bt
xor
adc
test
jecxz
and
push
bound
retf
dec
loop
or
and
fstp
dec
pop
popf
adc
inc
pop
xor
fs
cmp
out
popf
sbb
push
es
mov
push
loope
test
(bad)
mov
test
and
out
inc
xchg
scas
or
nop/reserved
ins
push
pop
or
lods
xor
aam
adc
push
push
mov
pop
ss
fst
jecxz
lock
xchg
test
daa
xor
retf
aas
je
pop
dec
loop
jecxz
dec
out
ss
pushf
lods
adc
je
jbe
in
and
xchg
(bad)
out
mov
adc
pusha
nop
add
xchg
adc
push
push
add
pop
das
(bad)
adc
sbb
adc
jne
loop
in
add
iret
(bad)
fs
inc
sbb
lds
mov
mov
sti
mov
cmp
mov
xchg
sbb
pop
in
push
cli
add
out
mov
and
xor
adc
jge
push
dec
hlt
int3
dec
push
push
call
adc
cmp
les
lds
(bad)
adc
jnp
ror
lods
cwde
sbb
loopne
sbb
pop
mov
xchg
and
add
add
leave
cmp
(bad)
xchg
adc
shl
fmul
aaa
adc
sbb
pushf
enter
cmp
mov
fsub
xor
add
push
adc
sar
in
scas
inc
cmp
sub
jne
sub
adc
mov
stos
fild
adc
adc
pushf
sub
dec
es
in
ret
test
arpl
push
pop
cmp
jl
loop
out
lahf
add
add
call
mov
pop
inc
loope
shl
pop
mov
inc
adc
js
stc
out
mov
cmp
fxch
jo
jmp
dec
mov
movs
cmp
test
mov
mov
neg
jmp
fldenv
sbb
dec
pusha
mov
adc
xor
jnp
in
imul
stc
inc
cmp
adc
ds
rcl
adc
adc
dec
or
adc
jbe
lahf
out
adc
mov
xlat
push
dec
sub
sub
dec
jmp
mov
nop
fld
mov
out
aaa
or
mov
sbb
outs
mov
sbb
retf
xchg
in
call
je
mov
cli
test
mov
xor
stc
stos
jl
inc
sub
enter
sub
or
push
jp
pop
mov
adc
mov
adc
xchg
push
adc
xchg
lock
sub
inc
fisubr
pop
movs
in
and
mov
mov
aam
fdiv
rcr
test
in
jg
cli
sbb
xchg
mov
adc
or
and
mov
mov
mov
retf
pop
jmp
xchg
xor
dec
fnstsw
pop
xchg
xchg
mov
sbb
inc
add
cld
jmp
aas
inc
mov
ins
adc
dec
fsub
add
lods
xchg
shl
into
pop
leave
push
sbb
dec
add
in
add
or
imul
or
add
cmps
fmul
pop
cwde
outs
dec
xchg
addr16
ins
ror
(bad)
sbb
lea
sub
adc
mov
inc
mov
sbb
imul
push
retf
out
(bad)
xor
pop
xchg
mov
in
dec
pop
adc
jmp
sub
ins
dec
push
icebp
add
fld
cmps
inc
mov
push
push
(bad)
mov
pop
xor
outs
rcl
data16
je
add
out
mov
inc
jmp
movs
je
scas
cmp
jmp
cli
test
adc
pop
xchg
jbe
(bad)
dec
push
and
push
add
inc
xlat
inc
call
arpl
or
mov
cld
sbb
inc
cwde
cmp
pop
test
adc
jae
mov
mov
aaa
adc
xor
std
mov
mov
ficomp
jecxz
test
mov
push
repz
iret
push
cmp
xchg
dec
hlt
adc
jl
or
sub
jmp
test
fs
and
sub
lahf
adc
and
sar
jmp
mov
cs
xor
call
rcr
mov
xlat
add
arpl
lods
mov
dec
ss
lock
repz
ror
loop
dec
stos
jno
cld
xor
inc
adc
test
das
les
aas
mov
mov
(bad)
gs
icebp
cmp
adc
push
cs
or
loope
pop
ja
push
xchg
adc
cdq
jns
out
js
xor
adc
xchg
push
rcr
es
stos
adc
(bad)
out
inc
mov
adc
mov
xchg
dec
sbb
jo
std
jmp
fdivr
out
jb
cmps
sahf
add
stc
cmps
mov
mov
das
aam
push
loope
pop
mov
adc
pop
dec
sbb
ficomp
outs
push
cmp
jle
js
cmc
mov
push
(bad)
scas
add
sbb
aam
pop
cmp
in
hlt
and
push
out
ret
and
or
mov
jb
fist
add
jae
inc
(bad)
in
mov
fisubr
in
retf
inc
ficomp
and
ins
in
out
adc
shl
push
ins
cdq
adc
mov
pusha
ss
pop
xchg
mov
sbb
and
js
jne
outs
pushf
dec
int3
jb
lods
adc
sub
minps
rcl
xlat
loop
lods
pop
adc
fbstp
and
push
(bad)
sbb
push
les
imul
addps
pop
movs
adc
out
movs
mov
cmps
adc
xchg
push
in
adc
in
sbb
adc
fisttp
sbb
or
sub
je
sbb
out
stos
(bad)
mov
mov
xchg
pop
lahf
jnp
jle
cmc
call
mov
add
ja
adc
movs
fadd
inc
adc
xor
lock
stc
or
(bad)
(bad)
push
mov
or
popf
(bad)
push
(bad)
pop
xor
push
arpl
out
(bad)
sbb
push
outs
aam
xor
retf
movs
mov
mov
add
jno
in
cwde
aaa
inc
not
jnp
adc
push
xchg
cs
syscall
sub
leave
xchg
inc
dec
cmps
and
xchg
mov
into
adc
xor
mov
inc
in
pop
outs
sbb
loopne
addr16
push
sub
or
cli
stos
push
or
push
adc
jge
(bad)
xor
frstor
imul
je
ins
scas
adc
faddp
repz
jbe
inc
pusha
fiadd
xchg
nop
xor
xchg
sbb
push
jbe
cmps
fucomip
loop
not
(bad)
xor
sbb
rcr
xchg
cmc
hlt
js
mov
sub
(bad)
retf
mov
fnstenv
loopne
adc
pop
popa
or
outs
mov
cmps
sti
cmp
sub
jmp
cld
mov
cmp
aas
cs
je
ins
pop
or
dec
mov
cwde
xchg
push
jo
daa
aam
dec
cld
popf
dec
push
xor
inc
loop
enter
xor
or
(bad)
fcmovu
xchg
aas
fld
jbe
mov
call
fnstenv
gs
ret
inc
mov
sub
ja
(bad)
je
je
pop
cld
call
xchg
repnz
popf
adc
mov
sbb
(bad)
arpl
enter
inc
cld
jmp
in
jmp
or
sub
out
cmp
int3
xor
dec
push
cmp
mov
ins
fcom
jle
(bad)
imul
leave
cld
loopne
inc
data16
int3
not
add
adc
jg
push
or
das
adc
xor
shl
pushf
repnz
adc
leave
xchg
mov
pop
rcr
and
loopne
xlat
sub
movs
rol
fsubr
jae
test
adc
inc
in
adc
sub
aad
addr16
push
mov
jmp
pop
jae
xchg
xor
sahf
iret
sub
xchg
xor
add
loop
ret
inc
pop
scas
or
fcom
lea
cli
push
sbb
add
out
adc
mov
cmp
iret
into
test
aas
aam
pop
test
mov
lahf
fs
adc
popw
in
sti
out
(bad)
dec
lds
add
fild
fdivr
mov
retf
stos
jae
xchg
xor
lock
mov
clc
aas
pop
cld
lds
iret
add
outs
inc
inc
and
sahf
adc
sub
or
aas
push
fsub
adc
jbe
aam
lods
cli
adc
mov
jnp
je
inc
sbb
pop
addr16
xchg
lahf
cmps
mov
enter
arpl
dec
sar
out
adc
popf
cmp
lea
cmc
aad
jbe
xchg
out
les
loop
mov
es
sbb
aam
icebp
push
mov
je
pop
push
sbb
leave
pop
jne
cmp
push
repz
std
rol
lock
mov
push
mov
fld
mov
adc
fcmovbe
data16
aaa
outs
sbb
jae
lahf
popa
rcl
sub
sbb
cmp
sub
test
sar
fcomp
jo
sti
cmp
popa
adc
into
outs
adc
xchg
cmps
fld
sbb
cld
aam
dec
pop
imul
in
push
add
xchg
shl
cmp
test
mov
(bad)
sbb
(bad)
out
in
je
lods
adc
pop
outs
jl
or
dec
adc
jnp
out
cwde
add
test
(bad)
mov
push
push
in
nop
jge
cld
xchg
add
inc
adc
fistp
xchg
jl
adc
js
or
outs
xor
pop
add
push
aaa
cmp
data16
fnstsw
pushf
gs
cs
sar
xchg
push
adc
in
cmp
test
mov
in
xchg
push
sbb
ins
dec
push
sti
xchg
sti
shr
movs
pop
jmp
rcl
imul
sub
pop
dec
mov
dec
sbb
cdq
or
and
push
or
mov
in
pop
pop
imul
push
and
mov
adc
ficom
mov
in
icebp
push
sbb
imul
mov
adc
int
sbb
fcom
or
mov
(bad)
int3
mov
xor
sbb
xchg
dec
sahf
sbb
int3
pop
xor
add
in
pop
xchg
mov
rol
pop
arpl
mov
adc
ins
jae
pusha
xor
mov
leave
or
adc
fsub
rcl
mov
push
retf
jnp
add
inc
xor
(bad)
aam
cmp
add
hlt
mov
cmp
pop
pop
aam
test
repnz
(bad)
cmp
sbb
adc
jo
dec
mov
mov
adc
fldenv
imul
shr
(bad)
xchg
sub
adc
cmp
out
fld
cwde
enter
retf
push
sub
xor
mov
addr16
adc
push
retw
std
hlt
sbb
mov
iret
cmp
push
lock
adc
aad
hlt
push
call
loop
add
add
inc
xchg
ja
cwde
js
xor
jl
adc
leave
xchg
fist
jmp
mov
jb
push
adc
mov
mov
out
xchg
mov
mov
sbb
add
data16
bnd
jbe
aam
sahf
dec
add
or
xchg
mov
mov
and
sub
ss
inc
mov
adc
out
cli
or
inc
lock
ss
ja
push
sub
cmc
xchg
and
cmps
loope
retf
mov
push
sub
xchg
gs
dec
xor
add
stos
ins
jmp
ror
lock
jne
sbb
sbb
pop
mov
adc
loope
push
pushf
xor
push
jmp
mov
pop
stos
jb
(bad)
xor
jmp
jmp
out
mov
xchg
mov
movs
dec
adc
cli
jnp
(bad)
xor
inc
or
push
xchg
push
mov
ret
and
dec
adc
xor
adc
adc
ret
mov
pop
outs
fnstcw
adc
test
xchg
inc
ret
enter
pop
(bad)
or
mov
add
mov
or
xor
shl
loopne
sbb
lahf
aam
ret
or
sub
mov
dec
xchg
cmp
aam
cmp
lods
add
xor
mov
sbb
addr16
aas
lea
add
cmp
pop
jo
or
inc
inc
movs
pop
cwde
cld
adc
pop
stos
pop
retf
mov
in
xor
repz
sbb
lods
inc
fs
cmp
xor
pop
cmps
sub
sbb
sti
iret
cmp
std
mov
movs
lea
xchg
cmp
into
adc
pop
(bad)
out
icebp
jb
outs
pop
ins
adc
xor
cmp
xchg
jle
jne
sbb
mov
(bad)
test
lock
xchg
(bad)
hlt
mov
inc
loop
xlat
imul
jbe
scas
std
ds
adc
jnp
retf
rcr
dec
cmc
aad
sub
test
pop
xchg
pop
in
sbb
out
xchg
sbb
bound
enter
aam
test
hlt
xor
out
(bad)
sbb
cmp
push
push
adc
out
or
lahf
and
fdivr
fiadd
in
clc
ja
js
(bad)
sti
mov
dec
std
adc
cmp
adc
cwde
jno
scas
ja
sbb
rcl
arpl
mov
jg
and
ss
hlt
adc
xlat
pusha
jl
jo
adc
sbb
cmp
xor
in
push
aam
jecxz
out
fdiv
jmp
arpl
adc
in
cmps
push
xchg
lock
adc
xor
nop
adc
adc
out
gs
jmp
mov
or
pop
pop
pop
ficom
dec
add
adc
xchg
jbe
daa
(bad)
adc
adc
xchg
mov
push
adc
cmp
push
inc
add
(bad)
out
push
push
xor
jg
inc
call
push
dec
popa
add
call
push
add
out
jae
adc
cmp
es
pop
adc
inc
jecxz
shl
xchg
rcr
sahf
jle
xchg
sbb
dec
aas
stos
mov
ins
jle
mov
mov
push
inc
stos
pop
gs
div
in
or
jne
xchg
(bad)
les
push
icebp
js
enter
(bad)
sbb
ds
loopne
iret
push
sbb
in
adc
xor
mov
or
mov
jmp
xchg
mul
ins
stos
cmp
adc
scas
js
ins
clc
popa
mov
cmp
dec
(bad)
fidivr
xor
scas
mov
lods
call
nop
mov
xchg
sbb
sub
jp
clc
ss
sub
mov
rcl
lods
fcomip
and
in
pop
(bad)
xchg
daa
pushf
repnz
sub
adc
(bad)
mov
push
and
enter
adc
mov
lods
shl
nop
xor
jle
xor
movs
in
test
jno
mov
inc
push
push
dec
dec
xchg
hlt
arpl
in
add
pop
cdq
mov
pop
adc
push
xchg
cmc
pop
add
jle
es
sbb
sbb
dec
sub
fst
sub
dec
mov
ja
adc
adc
xchg
or
push
loop
lds
jg
adc
or
xor
ins
pusha
push
add
mov
unpcklps
out
cmp
sbb
jo
pop
dec
push
xchg
repnz
xchg
ret
fwait
mov
mov
push
or
je
dec
fdivp
push
and
lahf
push
mov
das
jnp
sbb
imul
adc
int3
(bad)
mov
imul
xchg
iret
mov
shl
cmps
out
add
aam
repnz
call
push
nop
retf
aas
out
test
scas
out
xchg
call
adc
mov
pop
dec
test
adc
js
in
mov
sub
ret
push
adc
mov
and
adc
mov
icebp
jae
test
imul
sub
shr
ins
adc
test
or
sbb
stc
xchg
std
pop
dec
fcom
adc
(bad)
sbb
mov
scas
inc
sub
out
leave
adc
gs
sub
adc
mov
aad
inc
push
aaa
sbb
xchg
or
sbb
neg
mov
dec
dec
sbb
ret
add
movs
push
test
fst
push
inc
jae
cli
xor
mov
icebp
hlt
add
mov
mov
lahf
arpl
adc
pop
sbb
retf
xchg
hlt
out
xchg
ja
mov
jp
adc
jb
pop
into
dec
sbb
and
or
mov
push
stc
push
or
pushf
mov
xchg
(bad)
mov
or
mov
iret
adc
outs
clc
dec
jne
(bad)
retf
sti
imul
sbb
mov
cmps
clc
adc
lods
jmp
jg
pop
push
in
or
push
je
repz
lods
loop
je
jmp
dec
into
adc
pop
xor
icebp
fldcw
and
xor
mov
adc
jmp
jns
pop
or
nop
xor
push
std
fdiv
push
imul
and
int
pop
pop
xchg
mov
sbb
mov
popa
add
cmp
inc
test
hlt
hlt
shr
adc
sub
lock
cmps
sub
out
dec
lods
mov
stc
sbb
xchg
clc
xchg
test
and
mov
sub
outs
(bad)
hlt
sbb
mov
push
mov
xor
push
pusha
cmp
ds
ror
sahf
dec
push
icebp
je
dec
fdivr
not
mov
sub
push
ins
out
(bad)
and
xor
movs
pop
sub
imul
test
test
hlt
icebp
and
sti
sbb
int3
aas
enter
cld
mov
outs
jecxz
adc
adc
adc
jnp
push
jl
cmp
pop
imul
and
pop
popf
xchg
out
inc
jb
jp
lea
or
mov
repz
icebp
jge
pop
call
mov
(bad)
or
mov
div
addr16
cmp
adc
imul
cmp
xchg
daa
adc
rol
movs
dec
pop
push
adc
lock
cli
call
dec
ins
retf
(bad)
push
sub
in
sbb
ss
xor
int3
cdq
adc
push
pop
std
outs
imul
sub
int
es
or
and
and
push
xchg
inc
adc
jo
idiv
imul
rcr
addr16
sub
stc
adc
stos
jnp
xchg
dec
(bad)
mov
ja
(bad)
loopne
xchg
ret
mov
iret
cdq
and
data16
mov
aas
mov
or
call
cld
fwait
in
xchg
push
adc
xchg
div
out
push
push
adc
xchg
mov
and
cwde
pusha
jmp
ss
adc
xchg
pop
add
jmp
mul
test
xor
adc
iret
cmp
sar
mov
les
push
cmc
cmps
adc
push
and
sar
adc
cmp
sub
iret
arpl
add
mov
sar
cmps
into
adc
pop
adc
jmp
inc
fbld
movs
mov
popf
dec
jo
sub
out
adc
cmc
cli
inc
adc
cwde
stc
lods
jns
mov
mov
jbe
cwde
in
aaa
lock
mov
stc
adc
(bad)
aad
clc
test
xchg
adc
jmp
add
mov
cmp
fcmovbe
or
sbb
xchg
je
pop
inc
adc
cmp
int3
xor
sbb
cmps
or
retf
adc
lahf
jecxz
push
enter
fild
js
sbb
push
dec
xchg
js
sub
repnz
fwait
mov
js
adc
mov
mov
and
jo
test
fild
mov
jno
hlt
push
in
adc
clc
adc
adc
movs
test
loop
jecxz
sub
xor
inc
les
bound
lds
and
aam
xchg
pop
cmp
test
sub
cmp
ret
sbb
mov
or
daa
fcmovbe
xchg
xor
adc
adc
adc
popf
inc
loope
and
pushf
arpl
adc
or
fcmove
push
fs
repz
jae
int3
stos
mov
ss
out
sbb
fwait
mov
push
jmp
icebp
jnp
pop
ins
pusha
addr16
mov
dec
lahf
jle
pop
and
(bad)
outs
repnz
fnstsw
dec
ins
hlt
cs
int3
pop
repnz
sbb
add
pop
lods
add
call
xlat
add
mov
ret
das
out
push
je
js
scas
jmp
or
add
pop
push
dec
rcl
jl
adc
push
mov
add
aad
mov
out
dec
adc
or
pop
idiv
push
sbb
push
adc
ss
pop
add
mov
call
loop
inc
push
adc
sbb
or
or
dec
mov
sub
mov
dec
inc
das
dec
sahf
pop
push
jl
sbb
pop
jae
jmp
mov
int3
mov
mov
sub
je
into
int3
or
test
retf
(bad)
imul
adc
int3
mov
lods
imul
icebp
sub
sbb
retf
adc
fild
jmp
ret
lea
nop
fcomip
je
clc
aad
adc
jmp
retf
std
push
fsub
das
inc
retf
enter
in
out
gs
es
or
out
fsub
hlt
lahf
loop
add
pop
add
ins
div
test
cld
push
adc
das
push
jg
pop
popf
jg
mov
das
int3
pop
inc
(bad)
mov
jge
push
mov
rcr
inc
repnz
(bad)
lock
xchg
fistp
xor
fcomp
aas
jo
mov
mov
mov
scas
xor
jmp
mov
(bad)
adc
or
pop
cmc
retf
xchg
mov
nop
aas
xor
pop
ficom
dec
icebp
dec
adc
ret
loopne
and
or
xor
or
pushf
leave
movs
js
ret
adc
xor
and
stc
mov
rol
pop
jns
(bad)
imul
stos
adc
ds
fldenv
push
xlat
and
mov
gs
test
sbb
adc
jbe
mov
das
js
or
xchg
rcl
mov
mov
add
pop
dec
je
jbe
call
mov
pop
int
inc
out
adc
sub
adc
ret
jle
or
adc
pusha
retf
and
and
loop
in
or
mov
bound
add
and
hlt
mov
or
mov
sub
ffree
xchg
mov
test
or
adc
dec
test
pop
adc
or
js
nop
les
mov
mov
push
aas
xor
adc
clc
lahf
dec
mov
adc
in
inc
add
jns
add
idiv
xchg
mov
and
sub
shl
add
out
dec
mov
mov
mov
jmp
push
ins
add
or
sbb
adc
imul
sub
push
stc
lock
xchg
push
out
les
xchg
pop
in
inc
je
jecxz
test
js
inc
dec
stos
add
cmp
cwde
data16
adc
pop
fmul
adc
xchg
push
xor
fsub
cld
enter
mov
aam
lea
xchg
xchg
or
in
adc
test
mov
scas
mov
popf
jl
cmp
aas
and
mov
adc
mov
fistp
pop
lea
gs
loopne
adc
outs
adc
aam
cmc
inc
adc
pop
es
mov
in
adc
adc
leave
xor
adc
pop
mov
xor
adc
fmul
and
adc
in
(bad)
mov
mov
mov
in
jbe
or
test
xor
cdq
adc
dec
jg
loope
xchg
jb
cmp
adc
cmp
leave
cmp
inc
xchg
and
in
adc
adc
pop
inc
push
call
push
xor
adc
data16
(bad)
cmp
cmp
test
lods
sbb
or
ins
push
xchg
pushf
sbb
xor
popf
xchg
stos
movs
scas
cmp
popa
cmp
or
pop
fwait
xor
repz
mov
hlt
scas
xchg
data16
lock
inc
rcl
adc
(bad)
jbe
add
repnz
adc
in
aaa
xlat
(bad)
pushf
lahf
mov
dec
daa
mov
popa
loopne
adc
sar
(bad)
test
icebp
push
lds
pop
pop
add
inc
or
cmp
cmp
add
push
div
mov
mov
cli
pop
shl
adc
adc
add
ret
xchg
lds
mov
mov
adc
sahf
lahf
inc
dec
sbb
jo
aaa
sbb
fbld
fwait
out
mov
mov
inc
lds
push
cmp
loopne
adc
sub
sqrtps
test
inc
or
out
aam
ja
lds
outs
pop
fnstcw
out
arpl
js
adc
adc
mov
lock
cli
out
adc
rcl
add
arpl
dec
adc
cmp
cmp
mov
push
xchg
xchg
pushf
(bad)
pop
mov
push
out
clc
and
das
xor
fadd
inc
mov
push
das
dec
lock
xchg
sbb
pop
pusha
push
leave
pop
test
sub
dec
call
adc
mov
ss
pop
push
stos
movs
dec
jo
inc
mov
dec
dec
sub
movs
out
ja
mov
(bad)
sbb
inc
call
in
mov
ins
call
pop
and
je
xchg
cmp
sbb
addr16
rdmsr
inc
lods
aaa
pop
stc
xchg
mov
cld
aad
pop
pushf
stos
or
aad
xchg
xchg
xchg
scas
mov
fadd
sub
mov
xchg
fsub
repz
aas
or
inc
adc
cs
cmps
pop
out
add
int
inc
or
adc
lea
in
sub
daa
jmp
cdq
in
(bad)
(bad)
hlt
dec
xor
test
adc
pop
mov
fnstsw
mov
add
fnstenv
pop
lods
mov
add
data16
fisubr
shl
std
adc
jp
(bad)
enter
adc
mov
mov
aaa
out
(bad)
and
add
dec
movs
outs
mov
daa
loop
inc
adc
push
pop
inc
xchg
movs
or
adc
loopne
xchg
xchg
push
int3
das
repz
inc
ins
pop
in
shl
les
je
pop
cmc
sbb
push
jecxz
inc
and
stos
add
cld
pminsw
xchg
cmp
(bad)
out
adc
dec
mov
adc
push
sbb
pushf
movs
sub
xchg
or
adc
push
(bad)
in
or
or
adc
ss
ja
xchg
repnz
bound
jns
test
push
push
cld
xchg
mov
retf
cld
rcr
loopne
int3
imul
dec
jge
je
addr16
(bad)
adc
mov
(bad)
mov
mov
mov
mov
sbb
and
(bad)
fwait
jmp
push
hlt
loopne
daa
push
ret
add
lahf
int3
hlt
arpl
xor
xor
or
pop
mov
and
scas
movs
int3
std
and
add
pop
pop
arpl
xlat
dec
hlt
or
outs
sub
sub
fsub
xlat
push
ins
test
mov
adc
push
fadd
jb
call
fsubr
popf
sub
lods
mov
jae
loope
xor
dec
push
nop
retf
pop
adc
push
aaa
pusha
push
in
xchg
jmp
cmps
push
(bad)
adc
pop
add
jnp
movs
call
ins
iret
mov
fdiv
pop
(bad)
lds
loopne
pop
add
fsub
cmc
scas
push
xchg
sub
or
scas
out
je
(bad)
cmp
adc
cli
push
stos
data16
out
in
sbb
inc
out
jge
jbe
ins
mov
inc
dec
jmp
stc
add
adc
gs
mov
xor
in
neg
rcr
mov
test
sbb
add
pop
adc
adc
(bad)
jnp
call
daa
adc
out
movs
loopne
adc
and
adc
dec
mov
arpl
adc
sti
fstp
test
sbb
cdq
std
pop
sahf
adc
pop
and
fs
pop
loope
div
mov
xor
xchg
jne
mov
pop
les
mov
add
inc
adc
(bad)
or
dec
adc
add
ins
push
push
call
(bad)
cdq
sbb
pop
xor
jp
test
outs
fcomp
mov
mov
cmp
js
mov
adc
bound
cmc
cs
mov
inc
xor
mov
adc
ret
sbb
daa
xchg
ds
stos
mov
pusha
into
mov
ds
dec
adc
xchg
call
fs
pop
(bad)
hlt
icebp
in
pop
push
mov
mov
xchg
sub
imul
sub
movs
cmp
sbb
call
adc
popa
fimul
test
(bad)
lods
push
or
pop
cmp
bound
add
dec
pop
xchg
add
xchg
xlat
loop
int
push
ror
xchg
lahf
call
cmp
es
sbb
push
call
ds
adc
inc
sub
icebp
xor
xlat
xchg
xchg
push
adc
push
mov
mov
sbb
xchg
movs
pushf
mov
jp
call
mov
repz
push
je
cwde
popa
repnz
shr
lds
jne
ret
and
jmp
mov
pop
je
in
and
mov
leave
fsubr
pop
retf
mov
test
daa
pop
add
pop
retf
(bad)
cld
or
sbb
out
hlt
and
jo
xchg
xchg
rcr
push
inc
in
cmps
cmp
mov
push
cmp
xor
fistp
xor
int
or
test
out
leave
or
add
cmps
push
xor
in
outs
mov
repz
sbb
mov
cmps
mov
xor
jae
(bad)
aas
adc
sub
pop
mov
out
dec
sbb
mov
retf
pushf
ss
pop
push
dec
mov
dec
call
pop
pop
adc
test
push
sub
data16
and
pop
adc
inc
and
lds
mov
sbb
adc
ror
mov
lahf
push
dec
js
out
push
adc
jecxz
jb
clc
test
ja
or
mov
xchg
leave
jnp
mov
gs
cmps
pop
and
pop
xchg
mov
jle
out
popf
call
sti
imul
xchg
pop
outs
cmp
sbb
push
adc
mov
cmps
add
imul
adc
mov
jae
lea
adc
xchg
std
and
or
fucomp
test
jmp
aam
add
pop
xchg
sbb
push
(bad)
je
mov
sbb
sbb
daa
pop
loopne
ins
lea
adc
loope
mov
loopne
push
add
and
xor
push
fcomi
lods
adc
push
mov
sbb
sbb
je
fsub
pop
mov
xor
pop
pop
xor
loop
push
lods
sbb
repz
out
lds
sbb
fsubr
dec
push
jae
test
mov
xchg
inc
rcl
(bad)
cmps
jbe
cwde
mov
sbb
je
test
xor
cdq
adc
jg
push
xlat
mov
adc
inc
lods
int
das
fldl2e
mov
push
jmp
sbb
mov
pop
push
cmp
mov
aaa
mov
paddd
repz
jmp
and
xor
daa
xlat
shl
inc
adc
ja
(bad)
jg
stc
fwait
bound
and
cld
sbb
gs
ds
repz
pop
dec
sbb
or
hlt
dec
jae
cmp
adc
std
adc
sub
sbb
das
or
jae
es
not
scas
stc
in
and
xor
xor
sbb
aam
int
push
in
shl
cmc
lods
xchg
rcl
fist
add
mov
jns
push
fbld
cmp
stos
mov
and
inc
in
adc
mov
adc
rol
adc
shl
jnp
jmp
jno
cmp
aad
pop
xor
and
fs
inc
cmp
mov
pop
pop
clc
add
sbb
cli
inc
push
leave
rcl
pop
not
mov
fst
call
pop
retf
inc
push
stos
stc
jl
adc
pop
(bad)
mov
jge
add
xor
sbb
jg
sub
stos
ror
push
jo
pop
sbb
jecxz
div
into
mov
push
lock
shr
mov
mov
mov
adc
imul
add
push
aad
jmp
mov
cmp
mov
and
xor
jne
sbb
jmp
jg
jge
in
push
pop
hlt
dec
out
jle
cmp
repz
push
dec
or
loopne
sub
pop
jnp
xor
pusha
pop
adc
or
add
mov
jne
and
data16
rcl
push
ja
popf
xor
fstp
adc
loope
es
fs
daa
scas
das
dec
jb
out
jae
cs
movs
sub
and
sbb
xor
sbb
dec
push
xchg
ja
fdivrp
arpl
jge
jmp
(bad)
movs
mov
jmp
push
xchg
xchg
pop
mov
jns
xchg
scas
pop
inc
call
jl
jge
adc
aaa
mov
setp
ror
or
stos
in
cmps
stc
iret
cli
cs
adc
jle
add
int
adc
push
movs
ds
xchg
inc
je
mov
imul
push
cmc
jmp
mov
loope
dec
mov
in
(bad)
pusha
popf
xchg
jmp
jne
mov
push
lea
or
cmps
nop
pop
adc
mov
int
add
adc
scas
retf
push
fmul
mov
(bad)
pop
xchg
fst
sbb
ret
push
push
mov
sub
mov
xchg
iret
pop
xor
xor
and
push
adc
rcl
and
fidiv
int
mov
mov
in
popf
fisubr
mov
or
jmp
xchg
jmp
adc
jae
or
xchg
inc
(bad)
adc
out
xchg
stos
outs
dec
mov
xchg
imul
push
inc
sbb
or
jnp
xor
jl
cmp
cmp
jbe
sub
(bad)
aam
adc
and
mov
xor
mov
lahf
adc
or
sbb
xchg
lock
adc
jo
scas
jmp
out
dec
lods
(bad)
test
cs
adc
jp
sbb
sahf
nop
cmp
xchg
pusha
cli
stos
push
adc
jae
push
or
jns
loope
add
jmp
jno
enter
cmp
ss
loop
sub
test
or
cli
jle
sbb
idiv
pop
jge
cwde
xor
rcl
adc
js
sub
in
ins
pusha
jne
add
fld
adc
fadd
inc
ficom
(bad)
pop
pop
mov
sbb
cmps
(bad)
push
xor
fwait
bound
aad
rcr
cli
push
repnz
not
and
dec
ss
out
movs
aad
out
repz
jmp
adc
cmc
retf
scas
call
retf
aaa
dec
pop
adc
outs
jmp
ret
sti
retf
jne
adc
out
imul
cld
inc
call
inc
sub
xor
xor
cmps
cwde
imul
les
lahf
(bad)
sti
cmp
pushf
in
int
and
adc
retf
fsub
out
stos
int3
add
xor
addr16
call
adc
lock
sub
and
push
fwait
pop
adc
retf
fist
push
cmp
sbb
mov
(bad)
aam
mov
loope
std
xchg
sbb
inc
cmp
mov
cld
int3
mov
std
aas
rcr
adc
xchg
std
ficomp
mov
sbb
aad
int3
add
push
cs
cmps
jne
in
mov
leave
lahf
adc
push
push
adc
inc
dec
push
xlat
rcl
pop
mov
sub
dec
and
xchg
push
pop
inc
test
push
push
xchg
fcomp
ins
ds
sub
std
hlt
dec
cmp
or
sbb
test
adc
or
js
push
enter
adc
xchg
inc
je
ja
jnp
dec
fdivr
ret
mov
xchg
adc
adc
mov
inc
adc
sbb
repnz
sahf
jmp
out
push
jmp
arpl
sub
mov
fucomp
in
or
dec
push
sbb
sbb
jae
in
cwde
xor
cmp
ret
add
sar
fimul
push
retf
repnz
adc
(bad)
pop
mov
pop
clc
adc
mov
div
jp
pop
mov
not
xor
into
btr
add
and
mov
sbb
sbb
(bad)
xchg
adc
add
pop
pop
sbb
sbb
inc
push
sub
inc
jecxz
push
out
fs
je
xor
hlt
push
add
sbb
cmps
fdiv
lea
scas
mov
mov
pop
fsubr
(bad)
jnp
ins
add
repz
push
xor
fwait
fs
outs
add
mov
mov
xchg
stos
popa
retf
push
adc
or
cmps
xor
and
ja
stos
sub
pop
outs
sub
push
jbe
cmps
shl
jecxz
cmp
jl
adc
jo
cdq
mov
jbe
xchg
mov
jae
sti
in
loope
and
mov
arpl
(bad)
rcl
adc
and
pop
cmc
pop
adc
repnz
dec
adc
cmps
loope
mov
icebp
cmp
hlt
les
xchg
mov
sar
jp
lods
adc
dec
clc
cs
add
sub
test
ror
mov
pop
jns
mov
scas
adc
xchg
and
xchg
(bad)
xchg
xchg
outs
test
mov
fwait
test
imul
pushf
adc
inc
out
cmp
push
(bad)
adc
cmp
add
in
retf
int3
and
aad
sahf
jmp
ret
ret
adc
std
hlt
push
add
pushf
(bad)
jg
inc
jmp
unpcklps
div
cmp
ret
mov
aas
push
ror
and
aam
inc
in
daa
mov
or
ror
jne
loopne
xchg
jbe
push
and
adc
jmp
adc
retf
mov
adc
mov
mov
ss
xor
loopne
cli
adc
stos
data16
push
cwde
rol
nop
cmps
mov
adc
mov
add
loope
adc
sahf
sub
shl
inc
out
adc
clc
sbb
int3
xor
xchg
adc
jns
inc
xor
(bad)
call
xor
add
cmps
int3
popa
push
jbe
ins
fldl2e
movs
clc
hlt
test
cmp
adc
enter
push
in
sbb
push
cmp
fist
or
xchg
mov
xor
mov
js
xor
call
aaa
data16
out
ds
out
mov
pop
retf
clc
jmp
pop
dec
mov
sub
je
sub
dec
retf
lock
test
sti
or
mov
jo
pop
cmp
inc
rcl
call
adc
push
add
retf
cld
arpl
and
xchg
or
xor
sub
dec
das
add
dec
popa
fbstp
jae
mov
xor
mov
and
lahf
das
mov
inc
arpl
fistp
jmp
mov
stos
xchg
mov
dec
mov
inc
dec
aam
xchg
cwde
call
cdq
stos
jns
paddusb
adc
xchg
int3
stos
dec
leave
jb
in
mov
inc
jmp
jnp
out
fcomp
mov
jg
xor
pushf
mov
sub
push
ins
adc
jmp
sbb
xor
xor
aaa
mov
gs
adc
dec
jle
stc
icebp
fcomp
and
sbb
sub
outs
ins
stc
enter
les
dec
icebp
xlat
jae
shl
in
pushf
push
xchg
mov
aaa
jmp
test
(bad)
cmp
fdivr
gs
femms
sub
in
cmp
adc
ins
mov
data16
rcl
adc
inc
js
in
xor
das
call
clc
push
sti
(bad)
in
xchg
pop
enter
sub
push
cmp
jnp
and
xchg
lds
xchg
ins
dec
mov
add
aam
xor
imul
scas
cli
std
cwde
xchg
in
rcl
xchg
pop
mov
adc
icebp
adc
xor
scas
pop
sub
addr16
sbb
adc
test
xor
sub
cmp
adc
xor
or
ja
push
inc
mov
call
or
mov
(bad)
pusha
xor
mov
add
push
cmp
movs
sahf
cmp
lods
fld
jmp
inc
fidivr
pop
nop
mov
add
out
xchg
lahf
retf
popa
adc
mov
in
or
stos
in
je
mov
and
rcr
cli
stos
aam
vpmulhuw
aaa
in
sbb
jns
mov
inc
mov
jbe
cdq
mov
outs
in
popa
cli
imul
jbe
sbb
and
pop
mov
mov
adc
mov
cdq
add
repnz
test
pop
inc
icebp
jo
lahf
arpl
das
call
outs
cld
fs
out
mov
cmp
ss
add
dec
xchg
xchg
mov
or
(bad)
int3
retf
loope
(bad)
mov
ror
sbb
aas
into
movs
pusha
int3
cmp
add
daa
aas
das
xchg
mov
scas
adc
into
out
push
xor
ret
sbb
aaa
sti
push
rol
jle
mov
adc
push
fnstcw
jl
leave
fsubr
adc
mov
retf
lods
push
mov
loope
jecxz
adc
mov
movntq
dec
in
(bad)
cld
cmp
das
adc
push
inc
sbb
pop
cmps
cli
mov
xchg
outs
pop
add
inc
cmc
xchg
add
pop
adc
movs
xor
adc
pop
iret
les
in
add
movs
test
jle
sbb
bound
and
or
jl
mov
jae
adc
leave
mov
ret
outs
fisub
jns
ror
mov
mov
adc
cdq
sbb
into
or
sti
gs
bound
aaa
adc
sub
mov
fsub
jbe
cmp
(bad)
xor
ret
push
mov
inc
push
sar
push
pop
xor
mov
dec
cmps
adc
push
sub
es
adc
sub
arpl
xor
pop
xchg
in
fidivr
adc
dec
inc
and
int3
in
adc
xor
sbb
icebp
add
(bad)
aaa
fwait
cmp
dec
inc
xchg
sbb
add
mov
icebp
cmp
cdq
xchg
imul
(bad)
gs
loop
adc
pop
mov
xchg
sti
enter
int3
lea
mov
and
and
or
xor
add
and
aaa
loopne
adc
mov
in
test
jb
dec
push
ins
inc
inc
adc
push
cmp
cld
xchg
fcmovbe
sub
pop
jl
mov
jmp
loope
mov
shl
movs
mov
xor
(bad)
cli
and
stos
dec
(bad)
xchg
cli
jl
sbb
add
out
cld
popf
mov
cmps
enter
imul
adc
and
adc
adc
xchg
in
push
outs
xor
daa
in
adc
stc
jle
cmp
mov
push
call
cld
mov
add
jg
adc
xchg
inc
jmp
rol
movs
push
pop
add
or
dec
clc
xchg
cmps
inc
xor
jmp
(bad)
xlat
dec
mov
mov
and
repz
add
or
bts
adc
repnz
xchg
jg
(bad)
ja
out
jmp
cmc
das
mov
fisttp
xchg
xor
add
jle
shr
pop
cmp
loope
push
adc
aad
hlt
call
inc
adc
mov
retf
fdiv
xchg
jle
fldenv
popa
addr16
adc
xchg
sbb
add
stc
adc
rol
(bad)
fnstcw
and
adc
jmp
call
leave
sub
adc
push
int
les
adc
ss
out
sub
repnz
dec
call
and
dec
hlt
ja
mov
adc
cli
fidiv
adc
pop
movs
xor
sbb
pushf
mov
(bad)
fadd
adc
adc
mov
adc
mov
retf
(bad)
les
adc
sar
outs
pop
(bad)
std
push
add
pop
xchg
(bad)
adc
inc
not
push
mov
pop
shl
xchg
dec
aas
pop
cs
jl
or
mov
jmp
adc
repz
out
hlt
gs
mov
adc
arpl
add
and
cmp
jae
(bad)
or
adc
fcom
rol
add
jmp
bound
sbb
daa
mov
xor
hlt
stos
es
ror
inc
push
xchg
sbb
adc
aad
add
xchg
outs
adc
push
or
inc
mov
out
mov
xlat
add
adc
ficom
std
ss
stos
mov
adc
rcl
cld
adc
fisttp
outs
ficom
xor
(bad)
adc
dec
stc
xlat
and
(bad)
or
iret
fbld
adc
inc
pop
lods
movs
xor
test
xor
dec
fs
out
cmc
adc
mov
adc
jge
stos
mov
xchg
stc
cwde
inc
inc
in
in
sbb
or
pop
adc
xor
and
mov
daa
push
cld
(bad)
lea
mov
movs
aaa
xchg
repz
fstp
cmps
inc
mov
jp
adc
push
mov
adc
push
pop
push
arpl
lea
hlt
jo
jmp
cmp
aas
mov
jns
xchg
lds
push
shl
lea
inc
mov
add
push
mov
jbe
(bad)
pop
adc
fcmovu
ja
(bad)
or
inc
adc
jb
fiadd
sub
(bad)
xchg
stos
out
pop
shl
push
jne
xchg
sub
in
xor
or
sbb
xchg
(bad)
xor
clc
popa
mov
call
mov
inc
xchg
aas
enter
xchg
push
adc
fcomp
test
aam
jl
ss
shl
pop
call
jmp
cmp
sub
stos
inc
add
pop
stos
nop
pop
jmp
xor
je
or
(bad)
enter
out
mov
push
or
cli
adc
mov
push
jge
push
and
aam
inc
pop
out
jmp
retf
push
jb
push
mov
stos
fcomp
pop
push
xor
cmp
cld
and
(bad)
into
hlt
leave
lods
movs
lds
cdq
cmp
ss
cmps
or
mov
or
sub
daa
xchg
adc
push
inc
ds
adc
les
mov
pushf
icebp
nop
pop
xor
jg
cmp
dec
xchg
es
mov
fsubr
data16
int3
cmc
retf
mov
int
mov
js
inc
and
inc
(bad)
retf
outs
push
and
fcom
pop
out
scas
pushf
add
xor
hlt
jnp
cmp
xor
jecxz
sub
movs
lea
dec
adc
xchg
or
cmps
mov
jmp
fisubr
pop
sbb
xlat
in
sbb
out
outs
out
push
jmp
enter
adc
sub
and
xor
sub
adc
xchg
jl
sar
adc
in
pop
fiadd
movs
cmc
stos
sbb
add
adc
inc
push
jne
adc
(bad)
rol
out
pop
mov
movs
cdq
repz
or
adc
jg
cmc
rol
hlt
fwait
test
jle
adc
(bad)
adc
jmp
adc
aaa
jnp
rcl
lods
ret
popf
adc
out
xchg
(bad)
ins
adc
adc
dec
push
fdivr
sbb
inc
adc
pushf
test
jae
adc
sar
xlat
pop
idiv
adc
mov
nop
sbb
jb
mov
in
push
in
ins
out
out
pop
arpl
jne
fdiv
aam
xchg
push
xchg
mov
sub
xchg
mov
stc
push
pop
push
cmp
pusha
cmps
repz
stc
movs
and
xchg
cmp
push
xchg
or
sub
in
sub
adc
sahf
sub
(bad)
in
or
inc
dec
in
or
hlt
adc
fsub
xchg
sahf
imul
adc
sbb
mov
push
rcr
cld
push
jmp
test
je
(bad)
pushf
adc
ds
das
inc
aas
mov
adc
stos
test
xchg
scas
or
mov
call
mov
push
adc
cmp
lock
mov
and
retf
pop
jnp
sub
and
cmp
cmp
mov
adc
sbb
add
outs
xchg
pop
inc
push
sbb
call
or
std
fstp
sti
pop
sbb
adc
mov
mov
aaa
xchg
xor
outs
lea
leave
xor
sbb
ins
mov
adc
pusha
or
mov
xchg
dec
dec
call
push
pop
mov
xor
mov
add
sub
xchg
cmp
jmp
pop
repz
adc
das
dec
(bad)
cld
les
fist
add
xor
repnz
xchg
push
cld
push
arpl
nop
adc
sub
dec
xor
and
(bad)
ss
hlt
cmp
and
jnp
xor
mov
sbb
ja
jmp
jge
in
inc
mov
repnz
stos
cdq
pop
pushf
mov
or
nop
mov
cmc
into
adc
mov
call
sbb
dec
in
mov
aam
lea
and
add
mov
les
test
cmp
jp
mov
xor
pop
out
es
dec
test
mov
cmc
rcr
or
mov
xchg
cwde
movzx
adc
lds
jg
pop
and
add
in
adc
xchg
pop
loop
sbb
push
jl
cmp
out
out
or
mov
xchg
pop
inc
inc
aam
cmps
das
cwde
add
hlt
sbb
and
call
arpl
cmp
xor
adc
outs
cwde
enter
hlt
adc
gs
out
xchg
jne
fld
ret
and
in
shl
jle
(bad)
mov
pop
mov
mov
fldln2
mov
test
xlat
icebp
adc
call
adc
fwait
(bad)
or
cmp
sub
loope
(bad)
stos
or
out
cs
iret
scas
adc
in
mov
or
sub
jns
lahf
adc
fimul
or
push
aad
jp
stos
inc
cmp
es
cmp
sbb
xchg
aam
inc
movs
ss
enter
xchg
out
je
addr16
push
dec
pop
dec
sbb
cli
cmp
lds
sub
pop
stc
push
imul
pop
dec
or
bnd
push
push
mov
adc
pop
(bad)
pop
cli
pop
inc
mov
out
xchg
mov
out
(bad)
cli
add
mov
sbb
fndisi(8087
jnp
out
repnz
jmp
xchg
cmps
idiv
sub
mov
adc
stos
rcl
fs
leave
adc
sar
int3
push
pop
stc
sbb
and
inc
jno
mov
lods
in
sbb
sub
adc
push
sti
xchg
in
add
pop
fs
aad
jbe
pusha
arpl
and
jbe
pop
dec
mov
lock
(bad)
in
retf
xor
imul
and
enter
iret
gs
test
dec
iret
adc
(bad)
mov
pushf
ds
imul
add
rcr
push
pop
rcr
in
es
xchg
xor
retf
sbb
dec
fiadd
jae
hlt
add
push
xchg
jmp
and
ror
inc
adc
sub
out
es
sub
ja
or
mov
fwait
or
movs
(bad)
in
mov
gs
cwde
pop
jnp
adc
hlt
stos
adc
or
or
das
push
dec
(bad)
xor
mov
xchg
adc
stos
daa
retf
jnp
and
sbb
outs
jmp
xor
sbb
call
call
repz
push
rcr
ss
pusha
imul
call
adc
push
mov
aaa
adc
push
push
pushf
movs
ds
retf
xor
add
xchg
xchg
fstp
out
rcl
add
hlt
imul
mov
xchg
cmps
lods
adc
mov
pop
iret
aam
or
adc
adc
xor
sub
sub
arpl
int3
(bad)
push
jge
iret
add
and
pop
mov
mov
adc
cmps
mov
lds
loop
and
std
fdiv
add
cmp
lods
ins
xchg
clflush
movs
sahf
movs
adc
imul
and
retf
iret
xor
xchg
gs
or
fwait
ins
fs
adc
pusha
inc
inc
aad
imul
xor
xor
push
cs
cmp
ds
sub
pusha
adc
std
fmul
out
fst
inc
pushf
xchg
push
xchg
push
lea
dec
pop
ror
retf
dec
adc
imul
jl
mov
retf
loope
mov
test
pusha
ins
jle
icebp
or
pop
xchg
and
mov
adc
mov
out
cdq
cmp
dec
sbb
inc
sbb
mov
and
adc
xchg
pop
jbe
addr16
lock
push
pop
js
xor
mov
and
mov
push
sub
jmp
gs
and
ret
add
xor
adc
mov
and
hlt
aam
push
sbb
adc
addr16
ds
xchg
repz
fwait
lods
aam
xlat
jns
les
(bad)
sbb
out
sub
jecxz
push
mov
out
sbb
retf
out
ins
adc
jne
ret
int3
neg
inc
inc
jmp
leave
aaa
je
mov
inc
retf
call
dec
adc
mov
push
scas
leave
sbb
push
aam
in
int3
lahf
cli
jl
into
inc
pusha
cwde
sbb
clc
push
stc
cli
(bad)
push
mov
pop
lods
imul
mov
aaa
inc
pmaxsw
sub
retf
loope
out
adc
pop
(bad)
cmps
(bad)
ins
popa
adc
inc
int3
aaa
test
jnp
dec
xchg
jb
adc
out
(bad)
call
push
adc
mov
dec
sti
mov
or
sub
test
sub
cmps
(bad)
push
adc
stc
sbb
aam
xor
jmp
jge
(bad)
popf
cld
pusha
adc
mov
fs
mov
shr
mov
mov
cmps
pop
jmp
jnp
pop
pop
call
lods
fsub
int3
sub
(bad)
enter
cld
(bad)
imul
scas
cmp
or
fsubr
adc
and
xchg
mov
stos
sahf
lods
push
mov
add
and
pop
ins
adc
xchg
movs
sbb
ret
pop
lea
nop
xor
fwait
sbb
sub
sub
jae
lahf
rcl
shr
pop
ins
test
xchg
mov
bound
gs
lahf
cmp
jp
mov
xchg
dec
retf
mov
sub
xchg
test
cmp
fadd
cli
inc
sub
add
push
fld
jb
rcr
mov
add
xchg
fimul
xchg
adc
in
jne
jp
inc
ins
cmc
mov
ret
sub
icebp
cmp
xchg
loopne
jmp
dec
inc
std
adc
rcr
pop
es
jmp
lahf
aam
test
adc
retf
jge
add
adc
int
movs
xchg
mov
adc
retf
add
push
adc
in
inc
jo
jg
adc
daa
lods
stc
mov
pop
jns
push
pop
cmp
mov
enter
pop
mov
xchg
(bad)
jbe
in
jmp
lods
cmp
push
sub
sbb
sub
out
jbe
nop
adc
jmp
mov
in
jo
inc
stc
jnp
je
push
pop
cmp
adc
add
xlat
push
cmp
aaa
fwait
gs
in
lea
pushf
test
cmp
add
icebp
xchg
jne
mov
push
(bad)
xor
out
fs
rcl
aad
mov
inc
or
fist
addr16
int3
jmp
xchg
sti
sub
sub
lods
xor
je
cmc
sbb
or
aam
or
jle
test
fidivr
jl
sbb
sub
push
scas
xchg
out
jbe
or
add
movs
cld
cmps
pop
xor
lods
sbb
or
xchg
adc
xor
test
jecxz
mov
cmps
inc
and
loopne
mul
shr
je
push
cdq
fcom
je
dec
jnp
or
mov
lock
cld
jle
out
add
mov
xchg
cmps
pop
push
fisttp
mov
in
in
aas
int3
popf
scas
dec
xor
jmp
rcr
pop
or
xchg
sub
add
(bad)
pop
xchg
call
mov
es
neg
xor
push
inc
pop
in
fidivr
ret
xchg
sub
and
pop
fidivr
mov
mov
xchg
or
add
sbb
cmp
mov
or
inc
in
jge
add
sbb
sbb
ficomp
xchg
jmp
inc
push
jbe
in
lods
shr
push
ins
mov
retf
scas
inc
inc
movs
nop
mov
adc
aam
xlat
sbb
sbb
sbb
fst
cmp
pop
sbb
ja
cmp
jb
dec
mov
test
das
retf
repnz
sub
xchg
(bad)
std
out
movs
mov
jmp
adc
inc
or
mov
xchg
inc
or
push
aaa
(bad)
mov
in
mov
jl
lds
lock
test
add
mov
test
fs
push
sub
pop
loope
mov
mov
sbb
int3
push
mov
dec
ret
push
lods
ins
push
std
sti
or
mov
and
adc
and
popa
xor
push
sbb
mov
mov
pop
mov
xchg
cmp
push
or
aam
xor
cdq
push
mov
pop
movs
cld
retf
inc
jle
cmp
sbb
retf
ins
aad
add
cmp
inc
xchg
add
adc
(bad)
mov
iret
inc
nop
dec
inc
or
cli
lods
frstor
int3
movs
aas
ret
das
test
ret
lds
add
dec
dec
cmps
xchg
in
push
pop
sti
sbb
inc
movs
dec
inc
imul
or
sbb
or
retf
mov
retf
imul
cmps
dec
add
aad
fld
jp
pop
fld
or
xchg
call
xchg
scas
es
xchg
mov
std
inc
cmp
ficom
xchg
sbb
and
add
sahf
adc
fimul
call
xchg
mov
cmp
lahf
rep
adc
mov
pop
and
adc
lds
xor
jmp
adc
sbb
lds
push
jge
loopne
sub
adc
xchg
fistp
jecxz
adc
out
imul
or
lods
adc
xchg
inc
iret
pop
nop
sbb
ficom
inc
push
pop
and
xor
outs
adc
shl
fdiv
es
push
mov
jnp
pop
jae
inc
sub
sub
hlt
sub
ins
bound
adc
lock
xchg
aad
or
add
movs
popa
wbinvd
pop
mov
test
mov
push
add
les
or
stos
push
sub
je
and
adc
enter
in
pop
lds
adc
cmps
mov
mov
push
mov
mov
xchg
pop
movs
xor
push
inc
cwde
jle
je
cmps
inc
ror
repnz
jb
sub
rep
mov
loope
mov
adc
push
scas
leave
or
sbb
mov
pop
push
xlat
lods
xchg
test
push
or
cmps
sub
stos
icebp
test
inc
adc
jmp
push
pushf
push
mov
ins
xchg
or
dec
xchg
or
cmc
pushf
js
pop
mov
leave
adc
xor
mov
or
test
sbb
stc
bound
sub
outs
lea
ins
xchg
sti
sbb
pop
jb
push
fiadd
cmps
cld
ss
enter
retf
in
mov
and
jl
test
or
mov
push
xor
in
es
pushf
rcl
imul
fist
(bad)
repz
pop
pop
popf
and
cdq
adc
movs
out
push
in
es
aaa
jp
(bad)
cmps
cmp
scas
jae
(bad)
dec
out
adc
or
xchg
out
retf
enter
pushf
push
or
aas
xchg
fcom
arpl
ror
cmp
mov
cdq
pushf
sbb
jmp
ins
shl
push
test
jecxz
mov
push
adc
retf
xor
popa
aam
ds
aas
push
test
retf
jle
push
and
adc
or
jecxz
xlat
mov
or
fld
cmp
movs
outs
in
dec
je
pop
inc
pop
adc
enter
xor
in
dec
adc
mov
in
push
adc
movs
pop
fwait
cmp
push
por
or
mov
adc
shl
adc
jno
(bad)
jmp
cmp
xor
sub
pop
vsubpd
jbe
inc
sub
xchg
fcom
mov
mov
push
xor
int3
cmps
lods
rcl
add
arpl
pop
jecxz
adc
sub
test
cld
es
mov
dec
js
jp
inc
punpcklwd
pop
adc
cmp
out
mov
inc
and
push
sub
mov
pusha
std
or
mov
xlat
inc
jp
mov
retf
stos
jmp
out
mov
dec
mov
out
mov
movs
clc
div
mov
nop
aam
push
mov
fsubrp
fidiv
clc
cmp
retf
or
out
aam
inc
jl
push
or
xor
(bad)
test
or
loopne
into
mov
arpl
sbb
iret
imul
test
pop
or
cwde
loopne
rol
hlt
inc
mov
jmp
je
mov
out
shl
pop
or
or
inc
dec
push
add
movs
push
int3
stos
mov
and
fisttp
add
adc
ds
int3
inc
xor
pop
call
das
cmp
mov
pop
dec
sbb
movs
push
mov
neg
sbb
xchg
mov
aad
test
cmp
xor
loopne
inc
adc
xor
xchg
push
pushf
cmp
sub
loop
data16
xor
adc
mov
mov
addr16
cmp
sbb
add
aam
(bad)
xlat
xor
adc
lahf
dec
adc
xchg
adc
mul
jno
pop
int
pop
dec
xchg
imul
sbb
pop
daa
test
dec
adc
xchg
mov
cli
adc
fsubr
mov
ret
sub
daa
out
neg
es
push
adc
sbb
fcom
mov
fld
mov
jg
inc
dec
jae
cld
call
or
data16
sbb
les
mov
xor
xor
in
sub
cli
adc
in
sub
adc
icebp
dec
jo
scas
ror
jns
ss
sbb
jge
xchg
ins
lods
add
jnp
add
inc
jmp
xor
ds
xor
adc
cmp
adc
pusha
and
movs
(bad)
xchg
dec
push
jns
sub
and
push
or
shl
not
dec
sbb
dec
movs
sbb
cmp
mov
dec
adc
inc
adc
jge
sahf
add
out
or
int
sbb
push
sbb
hlt
jmp
ss
mov
out
sahf
rcr
jmp
and
(bad)
sub
jae
sti
ins
sbb
pop
mov
in
add
adc
mov
jbe
aam
push
cmps
mov
jns
xlat
pop
loopne
retf
push
push
mov
sti
pop
ds
leave
cmp
and
call
rcl
or
xor
fldcw
mov
jmp
idiv
jno
nop
inc
fidivr
xchg
jo
mov
or
inc
push
jmp
push
adc
sti
mov
mov
xor
outs
(bad)
xchg
adc
inc
mov
(bad)
movs
lods
pop
call
cs
jno
imul
mov
jecxz
add
and
in
in
fistp
jecxz
popa
test
xchg
cmc
cmps
mov
cmp
hlt
xor
aam
push
push
sub
aad
lds
sub
sbb
je
fnsave
je
popa
push
sub
stc
in
ins
cdq
adc
sbb
jne
jecxz
call
loopne
adc
inc
imul
jae
loopne
adc
leave
mov
ret
sbb
jmp
loop
ja
add
int3
push
or
int3
or
inc
cmp
aam
inc
int3
mov
cmps
jmp
lahf
cmps
push
ins
icebp
adc
push
inc
jle
int3
ins
enter
mov
sbb
mov
adc
jg
je
int3
(bad)
mov
dec
popf
mov
icebp
adc
fist
mov
dec
jge
pushf
das
pushf
mov
(bad)
xchg
and
xchg
aaa
mov
push
or
sbb
adc
xchg
je
enter
adc
test
je
push
sahf
sub
dec
jge
fnsave
stc
push
addr16
and
inc
xor
pop
jne
int3
push
test
shl
inc
or
jo
jnp
add
push
lods
call
(bad)
or
aaa
out
sbb
sbb
icebp
adc
jbe
cmp
push
int3
push
and
xchg
into
aam
movs
hlt
push
std
adc
adc
lea
push
(bad)
mov
fmul
mov
xor
xchg
shr
rol
jmp
shl
pop
aam
adc
dec
mov
and
adc
adc
inc
xor
dec
scas
sbb
sub
imul
adc
cmps
sbb
inc
aam
push
pusha
jge
mov
outs
mov
jl
adc
js
jmp
ret
ret
cmp
jp
rol
xor
bound
sbb
mov
std
sar
pop
pusha
and
adc
jmp
sbb
mov
jmp
fsub
jmp
pop
leave
fist
fdiv
ss
sbb
xor
pop
and
loopne
mov
ja
xor
and
xchg
in
add
inc
sub
int3
adc
cmp
and
bound
sbb
aam
push
aad
adc
pop
lds
or
rcl
cwde
repz
gs
adc
adc
jbe
mov
out
xchg
enter
test
(bad)
adc
cld
pop
xlat
and
inc
jg
retf
xchg
repz
inc
adc
enter
es
jle
xor
push
pop
dec
pop
aam
adc
mov
div
mov
xchg
inc
cmp
lds
adc
stc
jmp
mov
fwait
les
stos
xchg
dec
fistp
aaa
inc
mov
(bad)
adc
sub
das
adc
clc
mov
mov
mov
aas
daa
not
cld
jmp
cmp
out
xchg
cmps
cwde
push
mov
push
dec
stos
dec
mov
lods
imul
lock
js
sub
enter
push
mov
daa
mov
dec
gs
ins
inc
xor
xchg
dec
jmp
pop
repz
sub
imul
inc
xor
add
mov
addr16
push
sbb
fwait
add
jmp
leave
(bad)
jnp
arpl
lahf
add
xchg
in
mov
xor
int3
dec
outs
arpl
and
jns
call
xchg
push
jo
adc
nop
fiadd
lods
mov
mov
call
pop
scas
adc
lds
mov
test
xchg
cdq
fs
adc
adc
push
fimul
jmp
out
lods
xchg
mov
adc
cmp
test
fisub
je
in
inc
push
sbb
lds
not
pop
mov
in
sar
xor
add
faddp
xchg
adc
scas
call
inc
or
add
mov
push
and
out
sbb
mov
sub
pusha
and
lock
not
rcl
call
gs
dec
pop
sbb
push
xor
push
cli
aam
inc
lods
push
in
xchg
fmulp
jo
stos
cmp
add
scas
mov
cmps
pop
jmp
ja
xor
lods
adc
je
mul
daa
push
popa
int
ror
stc
fdiv
in
cwde
imul
enter
retf
add
(bad)
repnz
inc
sar
adc
sahf
imul
stos
push
push
rol
pop
or
inc
cs
sbb
jb
add
pop
int
cwde
hlt
dec
xor
enter
adc
imul
retf
test
adc
cli
pop
fisttp
sbb
sbb
imul
dec
inc
out
iret
push
sahf
inc
arpl
pop
and
rcl
xchg
or
xor
aam
adc
int3
cs
inc
xor
sbb
loop
stc
adc
mov
repnz
inc
in
add
adc
test
jg
retf
std
aas
adc
xchg
sub
les
inc
jl
lea
add
and
xchg
mov
call
fnstcw
je
icebp
in
jp
mov
je
cmps
mov
jl
and
das
adc
adc
sub
nop
mov
sbb
push
(bad)
dec
cmc
movs
rcr
stos
imul
cmps
push
fadd
mov
ret
pop
aas
xor
(bad)
clc
lahf
adc
imul
jg
push
out
cli
es
outs
cmp
dec
cmps
push
bound
cmp
cmp
test
push
xor
dec
xlat
and
sub
icebp
nop
push
jg
pop
adc
xor
mov
repnz
and
loope
mov
enter
lea
mov
fwait
retf
sbb
mov
push
cmp
out
(bad)
outs
arpl
adc
add
xchg
popa
test
daa
xchg
inc
inc
stc
loopne
ret
sti
int
mov
lods
loop
add
mov
aam
pop
inc
sti
adc
test
loopne
cmp
mov
or
and
repnz
mov
xor
push
pop
aas
cld
jecxz
xor
add
enter
jno
ret
xor
mov
pusha
mov
dec
adc
cli
imul
mov
adc
sub
mulps
dec
test
xchg
(bad)
cmp
loope
and
xchg
and
fnstenv
adc
push
inc
push
fcomp
inc
adc
inc
add
call
sub
enter
push
add
unpcklps
lods
push
in
ins
mov
push
pop
inc
mov
and
push
push
repnz
adc
ins
fidiv
cmp
xor
pushf
cmc
leave
dec
mov
sbb
(bad)
out
pop
lahf
cmp
mov
hlt
sahf
jb
adc
adc
rcl
sbb
js
arpl
push
leave
jo
xchg
movs
idiv
es
mov
stos
retf
mov
sahf
ret
mov
jns
scas
adc
in
cdq
jno
es
jns
sbb
cmps
mov
sbb
aam
mov
xor
or
mov
add
mov
add
inc
and
enter
popf
sbb
dec
sub
in
adc
sub
xchg
out
pop
retf
xchg
sti
test
push
sbb
clc
popa
ret
mov
cwde
bound
xchg
(bad)
stos
in
lahf
sti
ja
or
rol
nop
jo
imul
leave
(bad)
adc
pop
lock
push
adc
adc
repz
not
fist
lods
add
mov
cmp
in
add
mov
aam
adc
adc
aam
dec
xchg
add
in
lods
movs
sub
(bad)
hlt
in
jmp
or
push
mov
cmps
xor
xor
in
jmp
jne
ret
adc
mov
mov
cmp
add
aaa
inc
jmp
or
adc
cmps
sub
in
outs
lods
adc
mov
or
or
imul
sub
pop
enter
xchg
rol
aam
dec
adc
pop
das
bound
fistp
sbb
xor
sbb
fistp
aaa
mov
sbb
cmp
(bad)
dec
leave
ret
test
movs
adc
pop
push
mov
adc
add
aad
mov
adc
lahf
movs
hlt
push
fist
js
inc
mov
xchg
and
jne
jp
sbb
movs
push
sahf
(bad)
rol
sbb
mov
adc
imul
aad
dec
push
adc
iret
mov
gs
adc
and
inc
xor
es
mov
movs
mov
(bad)
test
call
mov
or
adc
mov
and
pop
imul
mov
mov
clc
stos
xchg
(bad)
je
(bad)
lock
sbb
jo
(bad)
daa
push
jne
sbb
ror
sbb
xchg
dec
sub
inc
cli
rol
sub
in
cmp
ss
cdq
sub
adc
jo
sub
out
sub
rcl
cmp
sbb
pop
push
fdivr
aam
(bad)
call
xchg
jmp
dec
sar
dec
adc
repnz
mov
fld
nop
and
sub
mov
sub
mov
xchg
push
adc
pop
lds
fsubr
mov
push
call
push
dec
push
popf
into
push
test
out
xor
push
lods
repnz
inc
adc
test
std
mov
xor
mov
xchg
or
cwde
jle
or
add
je
mov
pop
retf
hlt
je
aam
aaa
sti
add
mov
inc
lock
cmp
in
or
jb
push
scas
pop
jns
sub
les
pop
and
(bad)
fwait
imul
xor
cld
mov
cwde
pusha
sub
in
or
xchg
pop
or
push
(bad)
jbe
out
jp
cld
jg
push
test
add
adc
mov
push
fs
sahf
hlt
rol
rcr
jno
int
cmp
push
das
(bad)
fidiv
mov
adc
iret
mov
out
pop
out
and
cli
jge
mov
in
loopne
sbb
jne
fstp
ins
mov
loopne
lock
sbb
call
arpl
adc
sti
(bad)
mov
push
adc
sbb
add
pushf
and
pop
pushf
mov
(bad)
in
imul
sub
fstp
push
or
push
push
sbb
adc
or
jb
and
sti
mov
nop
inc
mov
push
xor
in
in
pop
mov
lds
adc
push
je
hlt
adc
movs
stos
jmp
into
(bad)
aas
jp
xor
push
arpl
icebp
fdiv
(bad)
cli
std
xor
adc
mov
hlt
or
ret
adc
pop
dec
jmp
add
lds
push
push
movs
movs
cmps
hlt
jg
out
cmp
and
test
std
and
inc
popf
push
or
ja
aam
mov
clc
ficom
or
into
dec
pop
and
adc
pop
das
leave
icebp
bound
popa
jb
add
mov
add
arpl
mov
jp
lock
ds
and
push
loope
push
in
mov
push
adc
xchg
call
loopne
sar
sub
dec
add
out
xor
mov
outs
mov
adc
dec
clc
and
out
jno
cmp
sbb
inc
in
adc
add
jmp
mov
xor
outs
inc
aam
mov
adc
call
rep
jae
in
dec
jmp
mov
add
push
jle
nop
add
xchg
add
and
jmp
or
popa
sub
call
call
in
cmp
pop
loop
mov
adc
dec
adc
xchg
adc
loop
mov
jge
adc
mov
std
daa
movs
adc
add
xchg
inc
push
dec
adc
push
test
sub
push
add
das
xchg
lods
adc
cmc
sub
or
cmp
push
jmp
mov
mov
mov
adc
sub
sahf
loope
sub
data16
(bad)
sbb
pop
shl
pop
jl
test
call
les
adc
cmp
adc
cld
fstp
add
hlt
inc
or
inc
int
and
jno
mov
sbb
inc
ins
loope
push
xor
in
cli
(bad)
js
cmc
aad
nop
jbe
stos
push
stos
xor
sbb
dec
xchg
add
inc
ja
mul
retf
hlt
(bad)
adc
test
adc
push
or
fwait
pop
das
retf
sbb
inc
xchg
adc
retf
mov
rcl
fs
adc
push
outs
inc
iret
mov
add
mov
xchg
pop
test
push
adc
dec
dec
or
mov
mov
pop
outs
aam
sar
mov
push
pop
inc
nop
inc
cmp
int3
cdq
cmp
in
les
dec
add
add
dec
pop
outs
call
rol
popf
inc
stos
bound
mov
adc
mov
cmps
and
adc
adc
aam
ror
inc
and
push
jmp
push
fadd
addr16
enter
movhps
rol
mov
pop
mov
adc
push
rcr
pop
xlat
and
inc
fsub
(bad)
dec
fcomp
sub
nop
ins
ins
pushf
add
outs
xlat
and
xor
aad
cmp
lods
test
sbb
js
xchg
jmp
ins
xchg
xchg
lods
call
cmp
data16
jle
aad
sbb
call
inc
adc
adc
stos
test
call
or
xchg
lods
push
ins
jb
popa
and
fdivr
push
das
mov
and
xchg
shr
clc
xchg
fstp
fs
adc
or
dec
mov
in
push
mov
rcr
sti
test
mul
cs
aam
push
stos
adc
xlat
repnz
lds
jnp
adc
pop
in
aas
fld
adc
sub
jae
mov
jecxz
pop
adc
adc
clc
and
dec
and
dec
scas
sbb
mov
mov
or
(bad)
pop
mov
in
adc
lock
dec
xor
in
jmp
fst
sbb
data16
add
rsqrtps
aad
inc
add
adc
aas
sub
cmps
das
cdq
test
inc
push
pop
sbb
imul
ins
cli
jmp
xchg
ret
sub
xor
test
xchg
push
in
xor
inc
mov
add
push
mov
in
stos
in
add
retf
popf
cmp
adc
mov
ret
leave
stos
mov
das
enter
add
mov
add
lock
adc
in
xor
fwait
jbe
pushf
icebp
adc
test
jnp
jmp
cwde
xor
(bad)
adc
xor
je
sub
mov
test
adc
inc
or
xchg
adc
leave
xor
inc
pop
cmp
aam
fsub
sbb
fst
aas
(bad)
mov
out
adc
dec
xchg
mov
adc
mov
mov
xchg
xchg
and
xor
adc
inc
aaa
leave
aam
jne
cs
dec
(bad)
pop
xchg
jae
retf
adc
movs
int3
pop
fs
scas
ret
jmp
jg
sbb
lods
mov
int3
push
jmp
push
xchg
in
cmc
(bad)
int3
sbb
iret
out
clc
inc
dec
push
or
sbb
into
dec
in
jne
mov
jns
mov
jnp
or
ret
sbb
stc
push
lods
fild
shr
icebp
mov
es
fnstcw
sbb
daa
ins
mov
rcr
psrlq
push
rcr
pop
fimul
sbb
mov
ret
mov
or
icebp
dec
addps
adc
sub
or
jae
mov
pop
int
in
ror
fst
daa
(bad)
adc
pop
or
stos
xchg
pop
adc
adc
in
(bad)
push
dec
xchg
xchg
dec
ss
lods
out
jo
pushf
jecxz
outs
movs
jbe
xlat
test
in
or
pop
hlt
in
cld
out
popa
in
dec
es
pop
sub
fisubr
mov
and
cmp
mov
push
bound
push
clc
xchg
outs
push
cmp
add
mov
pop
test
sub
mov
push
adc
clc
pop
inc
fcmovb
mov
push
loop
mov
mov
pop
inc
int
hlt
imul
inc
pop
adc
lea
adc
mov
ss
cmp
push
repz
cmp
inc
or
or
ret
pop
adc
outs
jmp
push
mov
nop
(bad)
pop
jb
int3
or
rcl
je
adc
std
jp
aas
dec
out
push
push
cmp
out
xor
add
js
mov
sub
retf
test
push
add
call
push
xor
or
pop
pop
push
mov
push
inc
(bad)
push
sub
adc
sahf
xchg
push
cmps
clc
jnp
mov
jge
inc
mov
lahf
into
sub
push
jo
int3
aaa
cwde
push
leave
aaa
mov
sub
sub
jne
loopne
xor
loopne
es
aam
sub
push
jno
stos
enter
inc
and
and
in
leave
push
pusha
and
icebp
lods
sub
adc
lahf
inc
jl
aas
cli
adc
xlat
pop
popf
cmps
and
in
iret
sbb
adc
retf
les
adc
mov
(bad)
jmp
out
add
push
pusha
jne
mov
adc
mov
xchg
mov
ins
push
xor
(bad)
cld
fistp
scas
cmc
cwde
or
mov
mov
inc
mov
sub
rol
scas
mov
leave
fcom
lahf
xchg
add
hlt
movs
das
mov
pop
rcl
lods
mov
or
fmul
imul
dec
test
adc
in
add
push
imul
inc
cmps
out
sub
adc
sub
rol
(bad)
loopne
outs
cmp
out
adc
adc
mov
in
sbb
mov
sub
js
sbb
and
std
push
sbb
aad
stos
lea
jp
mov
and
loop
and
pop
and
push
xchg
and
push
rcl
in
jmp
mov
outs
fst
or
xor
aam
adc
adc
push
ins
lds
popf
cli
inc
adc
fsub
aam
loop
call
push
imul
push
ins
and
fmul
or
cmp
xor
clc
xchg
rcl
and
jbe
(bad)
repz
adc
arpl
push
(bad)
in
add
xor
mov
jmp
sub
jl
mov
dec
repnz
popa
retf
(bad)
ins
fild
test
ins
inc
mov
out
mov
psadbw
jecxz
jmp
cld
xchg
bound
js
mov
xor
add
jmp
lahf
(bad)
push
mov
in
outs
imul
repz
push
aad
div
aaa
out
(bad)
push
or
xor
xlat
or
dec
sbb
jne
ins
add
adc
out
xor
adc
cmc
push
cmc
pushf
inc
adc
sub
in
mov
jbe
pop
xchg
jne
jmp
addr16
xor
add
xor
adc
pop
(bad)
cdq
fdiv
retf
pop
test
push
mov
adc
rol
popf
ror
adc
ret
or
in
jg
pop
paddusw
mov
sbb
fmul
and
xchg
push
xchg
dec
adc
add
retf
popf
mov
loop
loope
retf
mov
(bad)
jbe
sub
jl
popf
test
adc
sub
inc
pop
pop
cmp
ret
rcr
in
jmp
push
mov
push
fmul
fnstcw
ficomp
imul
push
pusha
lea
mov
into
push
test
adc
and
outs
xchg
in
ret
adc
add
xabort
retf
or
pushf
push
test
push
loope
call
cdq
adc
stos
add
xchg
sub
mov
jbe
out
scas
imul
sar
out
mov
adc
pop
fstp
xchg
popa
push
aas
adc
push
iret
pop
ja
xchg
call
add
pop
daa
stc
jbe
sub
sub
sti
push
xchg
mov
sub
imul
int
push
fstp
sbb
fsub
shl
cmp
xlat
mov
fdiv
lds
jne
cwde
dec
or
pop
mov
icebp
and
mov
fs
das
sbb
mov
scas
dec
xchg
inc
int3
aaa
(bad)
lock
pop
push
out
mov
retf
mov
out
cmp
add
xor
fs
and
and
and
adc
cmp
aam
dec
int
dec
cmp
movs
cli
(bad)
fistp
loop
test
sub
add
(bad)
aam
je
js
sub
pop
xor
push
or
and
std
xor
sub
stos
ror
cmp
mov
fisub
or
add
dec
mov
and
mov
jle
out
mov
pop
sahf
and
or
mov
push
add
cmps
(bad)
xchg
pop
cmp
inc
sbb
add
push
and
jne
mov
popf
mov
pushf
stc
loop
test
xchg
push
int
dec
xor
aaa
sahf
retf
add
mov
ja
adc
xor
in
jmp
nop
in
mov
movs
outs
inc
and
pop
mov
loope
inc
mov
fcom
std
jbe
repnz
pop
push
or
adc
imul
repz
jnp
jg
mov
cdq
out
pop
cmp
(bad)
hlt
and
sbb
sbb
inc
dec
nop
adc
cmc
aad
inc
adc
std
imul
not
cmps
cli
mov
inc
mov
sbb
and
in
sbb
add
push
dec
xor
mov
adc
add
je
mov
dec
imul
adc
adc
pop
jmp
mov
pop
fldenv
outs
inc
das
int
call
aam
out
shl
sbb
icebp
nop
jns
fld
lock
xchg
xchg
fs
outs
mov
cmps
mov
mov
adc
mov
cld
fcom
cmps
stos
sbb
cmp
inc
fisub
inc
push
retf
xlat
or
xchg
jns
xchg
push
jge
sbb
out
adc
repz
arpl
add
inc
push
inc
and
push
pop
loope
imul
ds
jp
push
fwait
test
xor
add
aad
adc
imul
adc
or
mov
inc
and
enter
xchg
lock
xchg
pop
arpl
xchg
aad
jg
sbb
or
mov
shl
sub
xchg
mov
cli
cmc
inc
pop
pop
cmp
push
icebp
jmp
ret
sbb
or
std
adc
cld
fwait
add
xor
icebp
inc
stc
mov
xor
loopne
adc
cdq
popa
sbb
push
xchg
mov
jo
xchg
hlt
jge
bnd
push
mov
in
jns
lock
cli
std
fst
add
xchg
lods
rcl
xchg
es
lods
dec
(bad)
xor
jmp
outs
cmp
and
movs
add
je
or
test
arpl
or
fst
or
sbb
xchg
scas
mov
test
cmps
xchg
mov
xor
les
adc
push
mov
int3
ror
sbb
aas
in
movhps
mov
shr
jge
and
xor
imul
inc
mov
stos
adc
out
cdq
xchg
popf
sbb
adc
xchg
daa
loop
sub
add
push
mov
pop
or
ss
or
adc
and
repnz
dec
std
(bad)
es
(bad)
cmp
ret
idiv
pusha
xor
mov
cmp
ret
push
gs
cmps
stc
cmp
sub
push
sbb
adc
sub
xor
out
(bad)
adc
ret
push
push
movs
jle
adc
mov
xor
popa
xlat
push
pusha
xchg
mov
in
je
push
push
dec
add
or
rol
leave
xchg
adc
mov
in
nop
jo
add
lods
shl
cmc
pop
xor
shr
lea
adc
stc
or
stos
aas
(bad)
sti
adc
mov
cli
lock
scas
adc
js
mov
push
mov
inc
arpl
shr
adc
xchg
cmp
fucomi
jg
out
jne
xchg
jo
ss
pusha
push
jns
mov
xor
retf
enter
xchg
ror
xchg
push
hlt
retf
test
dec
adc
adc
retf
cmps
push
sbb
loopne
xchg
push
nop
sti
jbe
jmp
movs
inc
repnz
pop
xor
mov
(bad)
ss
in
adc
mov
push
lds
pop
addr16
mov
push
inc
mov
sbb
mov
fiadd
cmps
push
xor
jmp
leave
mov
aas
push
aad
pop
div
sahf
jl
data16
lods
adc
out
test
jmp
jmp
shr
out
fst
mov
pop
push
shr
retf
jno
in
dec
imul
cmp
and
cmps
loopne
jno
push
push
or
add
outs
xchg
xchg
and
add
lods
pop
pop
mov
icebp
sub
adc
inc
mov
bound
lock
and
sbb
repz
jbe
push
iret
mov
and
xchg
fidiv
cmp
call
out
jo
cmp
pop
xor
push
adc
xor
jp
adc
ret
push
and
pusha
(bad)
in
sbb
lods
int
xor
inc
pop
adc
cmp
and
or
cmc
dec
xchg
int3
(bad)
xchg
test
dec
(bad)
cmp
adc
adc
ins
inc
int
dec
call
mov
push
push
pop
outs
dec
and
push
adc
dec
sbb
out
cmps
(bad)
iret
jge
aam
and
sub
pop
lea
mov
push
sbb
adc
addr16
stos
cmp
cmp
pop
and
push
adc
mov
mov
jne
loop
test
adc
rol
or
sub
adc
mov
xchg
(bad)
push
cwde
stos
add
xchg
xchg
inc
ss
movs
or
sbb
aad
popa
cld
sbb
lea
mov
out
ss
lods
adc
add
push
repnz
and
popf
sbb
mov
push
in
add
addr16
fist
scas
jbe
xchg
fs
dec
out
jmp
(bad)
fsub
daa
imul
test
retf
xor
cwde
int
push
xchg
mov
or
or
mov
rcr
sbb
mov
aam
fxch
xchg
aad
outs
test
sti
pop
fadd
sbb
idiv
in
sbb
aaa
cld
or
xchg
sbb
inc
pop
push
shl
mov
pushf
shl
jecxz
ss
pop
jl
jne
sbb
jl
test
ds
push
xlat
mov
ss
daa
popa
adc
es
(bad)
sbb
cmc
ret
dec
jmp
push
in
adc
and
sbb
jne
add
sub
inc
leave
xchg
push
ss
cmp
sbb
mov
inc
mov
data16
adc
jns
in
inc
pop
add
aas
pop
mov
aad
add
or
fwait
add
in
les
test
loopne
fwait
aam
mov
adc
inc
jge
adc
xchg
add
or
out
out
mov
sahf
adc
dec
fdiv
cwde
adc
dec
or
leave
lock
in
xor
aam
fwait
dec
xchg
hlt
jmp
(bad)
xchg
jp
int
das
mov
or
out
test
fist
xchg
scas
movs
retf
in
loop
or
or
xchg
scas
xor
int3
imul
dec
js
fwait
pusha
cdq
retf
and
pop
cmp
fisttp
push
adc
xor
or
pop
adc
test
cmp
pop
addr16
push
(bad)
aaa
add
xchg
inc
push
je
(bad)
cmp
das
or
adc
or
sbb
aad
jmp
mov
fcomi
xchg
arpl
sbb
sub
pop
adc
mov
popf
fs
movs
or
cmps
repnz
pop
in
xchg
pop
ret
adc
sub
cwde
(bad)
(bad)
push
jg
push
xlat
adc
lods
inc
fsubr
ins
adc
jne
pop
cmc
jb
daa
adc
mov
cmp
arpl
cli
adc
cmp
dec
test
sub
xchg
loope
and
fcomp
and
int3
repnz
icebp
xor
mov
ss
mov
jo
dec
adc
inc
fwait
jnp
arpl
aas
adc
dec
jne
dec
lods
adc
cmps
cmp
jbe
leave
test
jmp
and
xor
add
adc
mov
adc
or
pop
dec
cmps
in
mov
pop
push
sub
adc
pop
xchg
adc
les
push
bound
push
test
hlt
pcmpgtw
sbb
xor
lods
pop
les
js
sbb
retf
outs
sub
test
pop
and
jp
cld
adc
mov
mov
mov
adc
sbb
mov
jl
adc
add
xchg
or
jmp
imul
(bad)
jmp
clc
jl
out
lods
into
idiv
xor
mov
and
mov
outs
sbb
sti
dec
jae
push
adc
fldenv
inc
xor
cs
clc
jmp
dec
imul
jge
shr
retf
xlat
pop
xchg
cwde
call
inc
sbb
cld
mov
imul
stc
pop
add
in
pop
stc
pop
lods
jle
xchg
dec
frstor
mov
loopne
xor
or
mov
jbe
mov
push
mov
add
inc
push
enter
inc
sub
faddp
sti
popf
cmp
int3
mov
or
test
test
push
adc
inc
sub
imul
mov
int
cmps
addr16
arpl
jmp
cdq
pop
adc
ja
push
sti
add
dec
and
mov
lea
push
xchg
jge
jne
pop
retf
shl
dec
pop
in
add
ins
aas
pop
adc
mov
sahf
into
mov
mov
stos
retf
arpl
add
jno
inc
dec
mov
push
xchg
mov
fistp
pop
jno
out
mov
mov
mov
adc
xchg
adc
(bad)
loop
jns
retf
hlt
repz
or
inc
arpl
out
jo
pushf
cmp
push
ss
xchg
jnp
adc
data16
shl
push
and
adc
cmp
int3
shl
jp
push
pop
cwde
hlt
aam
mov
aam
iret
mov
adc
xor
rcr
jmp
ret
repz
addr16
inc
inc
xchg
fistp
sti
xchg
push
ret
pop
mov
sbb
push
sbb
adc
jmp
fsub
test
pop
(bad)
adc
adc
xlat
fs
push
or
push
sbb
cmp
push
cwde
xchg
adc
(bad)
push
adc
ret
mov
pop
and
or
inc
loopne
jmp
inc
shl
sbb
(bad)
ficom
leave
push
cmp
mov
hlt
fstp
add
(bad)
out
push
sub
cmp
mov
cwde
and
inc
out
add
xchg
dec
inc
push
add
cld
adc
arpl
inc
or
call
repz
or
loop
loopne
or
arpl
add
push
and
adc
mov
adc
stos
xor
xchg
das
std
add
adc
clc
out
xchg
mov
xchg
push
cmps
sbb
mov
sbb
hlt
out
mov
outs
push
xor
mov
popa
and
dec
sbb
in
ret
stos
repz
xchg
hlt
mov
ret
in
sbb
adc
das
xchg
add
ds
js
sbb
outs
aam
mov
sti
movs
inc
out
lods
or
jle
aas
jmp
shr
pop
xor
dec
(bad)
out
xor
cmp
fadd
stos
gs
inc
add
dec
adc
mov
sbb
test
movs
push
xor
sbb
mov
popa
fwait
inc
pop
popf
bound
adc
or
add
xor
loop
leave
rol
dec
mov
popf
daa
ror
jp
loopne
adc
mov
mov
ficomp
sbb
add
jns
aam
scas
cmp
les
cli
lods
in
jl
stos
mov
add
xlat
or
sbb
xchg
pop
je
daa
ins
out
out
adc
jo
cmps
xor
inc
adc
mov
call
dec
jne
mov
popa
ds
icebp
out
adc
in
(bad)
pop
mov
add
adc
cdq
mov
and
das
ja
push
sub
push
xchg
aad
and
inc
lods
ror
push
cdq
inc
dec
cmp
mov
mov
cmp
lods
loop
repnz
mov
sbb
les
pusha
lods
push
call
daa
jecxz
imul
das
sbb
mov
ret
(bad)
xchg
mov
lahf
and
jg
cmps
pop
mov
inc
adc
ret
lods
cdq
pusha
sbb
shr
mov
jecxz
xchg
nop
jg
mov
add
adc
adc
fisttp
pop
jmp
ret
fist
movs
ja
xchg
inc
push
adc
repnz
jle
ins
and
xchg
adc
inc
ffree
ss
jns
and
dec
popf
cli
inc
sbb
push
sbb
mov
cdq
cmp
adc
and
ins
xchg
stc
add
movs
(bad)
arpl
pop
pop
xchg
aaa
frstor
adc
ret
add
movs
fsub
in
and
je
jge
adc
or
pop
rcl
sbb
push
fsubr
xchg
adc
push
adc
sahf
inc
push
adc
or
test
push
sbb
in
pop
inc
add
fs
stc
mov
xchg
enter
or
add
in
push
or
fucomi
sbb
jmp
xchg
hlt
pop
adc
nop
sbb
out
les
ja
pop
xchg
out
or
add
xchg
pop
hlt
(bad)
sbb
test
out
jnp
push
ret
push
cmp
sub
inc
cmp
xchg
pop
repz
push
les
dec
pop
test
mov
cmc
pushf
jnp
mov
jne
dec
fistp
jbe
pop
mov
mov
push
push
adc
fisttp
test
not
in
pop
pop
pop
or
push
or
les
sbb
push
clc
adc
and
push
xchg
inc
mov
dec
fidiv
stc
leave
rcr
fistp
cmps
sbb
inc
cmc
std
xchg
pop
inc
add
call
mov
mov
add
adc
test
inc
je
push
inc
jmp
jno
icebp
cmc
xchg
in
push
movs
neg
adc
clc
add
xor
out
mov
fist
cmp
pop
scas
add
mov
or
sub
mov
iret
fbstp
adc
dec
test
popf
xor
xchg
jb
sbb
and
cmps
or
stc
mov
sbb
cmp
push
fsub
ficomp
ss
gs
fdiv
popf
scas
xor
dec
test
mov
push
sub
arpl
jl
or
push
mov
jne
xor
adc
mov
jle
cmp
cli
adc
dec
fcmovnbe
xor
cmp
xchg
leave
ret
ja
fnstsw
mov
ds
test
nop
out
out
rol
inc
movs
jl
adc
sub
out
test
pusha
cmc
mov
daa
aam
retf
sbb
scas
mov
fwait
shl
sbb
les
cli
jns
add
rcl
out
sbb
xchg
cmp
mov
add
call
test
cmp
aas
test
cmc
mov
out
neg
(bad)
cmp
lods
mov
push
dec
xchg
mov
lds
repnz
pop
adc
xchg
jnp
sahf
and
movs
adc
int
push
push
push
push
sti
out
xor
fwait
cwde
fchs
adc
jbe
int3
ds
mov
adc
fdivr
xchg
adc
retf
je
nop
xchg
sub
iret
sar
mov
retf
sbb
mov
jo
xchg
cmp
arpl
sub
xchg
call
pop
dec
int3
cmp
mov
push
pushf
mov
and
imul
aas
xchg
fmul
adc
push
and
ficomp
pop
mov
and
pushf
mov
add
or
iret
pop
hlt
addr16
cld
div
ins
out
outs
lods
mov
jb
movs
xchg
retf
pop
cmps
adc
xchg
scas
das
pop
xchg
cmovb
xchg
push
shl
add
xchg
les
les
into
cmp
ins
xchg
lahf
inc
lea
mov
jmp
outs
inc
jo
loopne
xor
mov
int3
mov
cmps
into
pop
imul
push
xor
inc
mov
enter
xchg
push
or
hlt
fld
xchg
pop
mov
aad
lea
jmp
call
xchg
mov
cli
sub
mov
enter
ret
inc
rol
xor
pushf
pop
mov
lock
aam
neg
scas
(bad)
(bad)
or
hlt
adc
sub
jmp
sbb
dec
(bad)
repz
and
inc
outs
in
out
jnp
lods
push
int3
or
jmp
lea
xchg
inc
cmp
xchg
adc
or
adc
mov
or
int
and
pop
hlt
cmp
dec
add
cld
ret
pop
daa
mov
idiv
mov
xor
movs
push
ror
in
mov
sbb
xchg
adc
and
(bad)
in
cs
adc
(bad)
xchg
sbb
les
js
push
cmp
fidiv
call
loopne
adc
adc
cwde
or
das
push
sbb
call
pushf
and
out
je
push
jnp
jmp
adc
call
stc
jmp
or
xchg
pop
test
sbb
and
sbb
and
and
lock
sti
adc
(bad)
test
rol
push
inc
sbb
jo
ficom
(bad)
and
xchg
(bad)
ins
add
call
push
es
sbb
stos
xchg
adc
xchg
sbb
adc
push
hlt
lock
imul
es
pushf
jg
mov
sub
adc
(bad)
fwait
mov
adc
ror
and
xchg
jle
adc
fcomp
jo
mov
scas
inc
adc
fidiv
add
int
sbb
cmp
test
mov
xor
dec
add
push
lahf
dec
and
jne
std
sub
mov
or
fcom
clc
jmp
adc
cmps
add
sub
scas
push
pop
popf
adc
mul
out
adc
add
popf
out
test
sub
call
sbb
adc
jmp
jecxz
hlt
inc
popf
xchg
cwde
xchg
pop
fstp
and
jle
imul
arpl
adc
adc
sub
push
mov
sub
shufps
aam
std
sub
xor
cld
xor
out
adc
sub
push
lea
push
pusha
push
lock
ins
push
rcl
movs
in
pop
xchg
mov
std
iret
out
data16
dec
adc
adc
cmp
js
sbb
inc
mov
sub
cmps
lock
call
fiadd
cmp
push
popa
xchg
iret
repz
add
jo
(bad)
int
leave
test
stos
fwait
xchg
adc
les
outs
mov
arpl
int
xchg
push
es
ss
repnz
push
div
mov
jbe
xchg
ins
inc
je
cmp
(bad)
adc
ret
fild
inc
adc
mov
mov
popa
stos
cwde
aaa
add
and
stos
xor
adc
sbb
aam
push
sbb
out
aad
mov
cmps
adc
enter
or
rcl
xor
dec
rcl
and
adc
fs
sub
lods
adc
push
sar
aad
adc
or
add
in
outs
or
inc
loop
pop
and
cmp
ss
call
xlat
not
push
push
inc
stos
jmp
push
adc
cdq
and
cld
xchg
arpl
adc
lods
add
or
push
adc
adc
and
dec
lods
adc
ja
sub
cdq
cmp
lea
test
push
nop
addr16
fcomi
push
cdq
mov
adc
test
mov
repz
icebp
aam
xor
jmp
(bad)
xchg
xchg
popa
adc
mov
inc
out
das
in
cmps
push
jne
add
xchg
and
adc
test
rol
es
int3
dec
cmc
(bad)
jnp
jnp
sbb
adc
or
mov
arpl
in
mov
pusha
ret
and
or
add
out
ds
clc
sbb
mov
push
rcr
inc
cli
not
fs
hlt
stos
data16
iret
cli
push
sbb
mov
dec
dec
(bad)
adc
sbb
mov
adc
icebp
mov
outs
xor
or
adc
push
stos
jnp
ret
adc
cmp
jno
or
inc
hlt
mov
stc
mov
cmp
mov
retf
sub
inc
xchg
jecxz
push
bound
sbb
test
je
clc
push
jl
mov
cmc
jae
adc
pop
nop
mov
xor
xchg
adc
inc
inc
pushf
outs
scas
push
xchg
mov
out
dec
daa
into
push
data16
add
cmps
repnz
push
in
sbb
cmp
inc
sub
adc
dec
sbb
aaa
stc
test
adc
es
fs
cld
xor
push
out
xchg
adc
pop
xchg
retf
mov
jne
lahf
iret
sbb
addr16
jb
push
cli
jmp
stos
aas
movs
mov
mov
push
je
ins
sbb
(bad)
inc
les
pop
mov
test
sti
sbb
mov
jle
shr
scas
or
ins
loop
mov
test
mov
mov
retf
(bad)
mov
cmp
lahf
xlat
pop
push
shl
and
mov
std
add
push
(bad)
imul
je
and
aaa
pop
mov
adc
(bad)
cmp
ror
aaa
fist
sbb
xchg
pop
repz
push
outs
clc
(bad)
std
jmp
mov
in
fs
push
and
sbb
dec
(bad)
adc
int3
adc
cmp
repnz
and
sbb
mov
sbb
sbb
scas
dec
aas
xor
repnz
cmp
jge
repz
hlt
movs
sub
mov
rol
push
sub
add
mov
in
jecxz
out
adc
pop
xchg
sub
mov
dec
sar
leave
ret
(bad)
cmc
enter
adc
adc
push
mov
outs
dec
hlt
ds
or
xor
add
cli
xchg
cmp
mov
push
or
adc
lds
and
out
ror
ins
js
mov
repnz
and
adc
push
outs
inc
mov
push
adc
lea
stos
movs
inc
ret
push
mov
dec
adc
cmps
or
call
mov
cmp
movs
jo
adc
popf
dec
retf
rcl
xor
add
adc
popf
nop
pop
stc
fadd
adc
jl
and
pop
cmps
adc
fs
outs
and
and
xlat
add
cmp
fisub
fxch
ins
ins
in
adc
push
mov
daa
inc
mov
shl
xor
lods
bound
imul
xor
sbb
sub
sbb
sub
aas
pop
cli
outs
adc
(bad)
adc
adc
loop
leave
adc
push
fs
ret
add
cmps
lds
push
ins
add
mov
ds
jmp
pop
int
xchg
aad
add
sbb
pop
movs
repz
cdq
inc
inc
test
sub
inc
add
mov
xchg
pop
jge
inc
pop
jnp
(bad)
pop
sbb
adc
inc
and
std
arpl
jbe
push
sbb
cmp
or
aad
in
sbb
adc
scas
jno
(bad)
xor
in
push
adc
or
retf
imul
and
call
inc
sub
ficom
(bad)
fdiv
xor
hlt
jecxz
lea
movs
pop
inc
mov
pushf
and
mul
retf
data16
push
and
loop
outs
(bad)
movs
push
adc
leave
dec
daa
jo
sbb
adc
jae
scas
adc
or
pop
or
hlt
add
ds
mov
add
xor
cmp
xor
ficom
cs
inc
nop
mov
cmp
cdq
and
adc
ins
dec
push
inc
adc
cld
ret
jl
ret
adc
out
xor
jmp
add
dec
(bad)
fist
pop
adc
push
fdivp
hlt
mov
bnd
call
out
adc
jmp
jno
enter
cmp
xchg
not
adc
int3
rcl
js
xchg
dec
psadbw
leave
cmp
adc
jo
lds
out
fadd
cli
dec
inc
repz
mov
add
mov
inc
pop
xor
add
jae
mov
add
push
xor
pop
loop
push
adc
out
scas
(bad)
popf
cs
sbb
dec
adc
sub
repz
ja
adc
cmp
jp
ret
adc
movs
pop
cmp
mov
adc
and
rol
lea
rcr
mov
xor
ins
dec
mov
xchg
dec
call
and
in
or
into
jo
push
push
jns
sbb
cld
xor
push
pop
pop
aam
jmp
aaa
lock
xor
and
jb
jmp
repz
not
sub
xchg
pop
std
je
mov
imul
ds
aad
call
je
movs
xchg
cdq
sbb
repnz
daa
scas
xor
rcl
pop
data16
pop
adc
das
movs
js
fmul
pop
movs
jecxz
hlt
sbb
inc
xor
aaa
ss
div
adc
mov
push
cld
xor
jnp
push
shr
adc
cmp
adc
mov
sbb
iret
enter
test
adc
cmp
dec
js
jbe
adc
out
dec
sub
mov
add
sub
dec
push
int3
movs
pop
or
add
xchg
out
outs
adc
push
scas
mov
test
pop
sbb
mov
sbb
xchg
or
and
out
int3
fcom
mov
test
or
or
mov
gs
jmp
retf
inc
adc
fwait
sti
mov
lods
jnp
jmp
mov
mov
push
out
ficomp
adc
mov
pusha
clc
adc
popa
inc
dec
movs
out
bound
or
xor
int3
mov
or
add
add
inc
pushf
gs
mov
ret
test
lahf
xlat
pop
not
adc
mov
pop
add
jmp
push
mov
sub
adc
int3
bnd
ret
sbb
sub
pop
push
js
xchg
pop
add
pop
pop
pop
push
out
adc
push
pop
push
push
mov
xchg
inc
into
mov
gs
cmp
adc
add
in
aaa
mov
dec
push
ficom
(bad)
mov
stc
lods
cmp
inc
pop
addr16
imul
loopne
adc
js
out
movs
fdivr
inc
ins
int3
(bad)
adc
push
(bad)
mov
sub
adc
inc
push
inc
pop
xor
retf
jecxz
adc
imul
adc
in
mov
pop
adc
mov
jmp
cmp
std
lods
fs
dec
cmps
aaa
or
pop
adc
pminsw
sbb
enter
and
push
or
adc
xor
sbb
cmp
xchg
and
in
add
repz
mov
mov
push
shr
and
fs
loopne
rcr
add
fmul
lods
adc
mov
cdq
xchg
inc
push
and
lds
pushf
pop
and
sbb
sti
or
arpl
mov
dec
pop
adc
add
mov
outs
stc
out
push
mov
loop
(bad)
ret
stc
and
mov
imul
in
out
fidivr
xchg
mov
jecxz
sub
ja
mov
fsub
scas
mov
lods
add
and
xchg
lock
in
dec
or
or
and
sub
adc
hlt
cmps
xchg
lahf
xor
(bad)
push
pop
std
xchg
jg
movs
addr16
sbb
aad
and
xor
cmps
repz
adc
(bad)
fsubp
inc
in
and
std
sub
push
into
scas
scas
aas
sub
or
cdq
sar
and
mov
sub
push
xor
sbb
sbb
outs
sti
das
cmp
pop
hlt
sahf
in
inc
adc
mov
adc
(bad)
movs
or
dec
sbb
clc
xchg
dec
jmp
les
sub
test
scas
aaa
mov
or
adc
in
mov
jne
adc
xchg
ror
adc
les
sbb
arpl
add
shl
test
dec
inc
sbb
pop
jge
adc
ret
cmp
mov
or
repz
jl
test
push
add
cmp
add
sbb
les
add
xchg
add
clc
sub
fisubr
test
les
inc
hlt
adc
movs
test
xor
cmp
retf
outs
or
add
aad
pop
cld
int3
mov
sbb
mov
pop
push
int3
out
pushf
adc
es
icebp
mov
push
cld
jg
fidiv
jg
push
ins
fiadd
test
fwait
adc
ret
imul
inc
and
les
dec
outs
push
jnp
loope
call
mov
fnsave
in
push
xchg
rol
cmp
xor
adc
test
xchg
hlt
retf
mov
cwde
and
cdq
xlat
inc
(bad)
push
push
xor
movs
jae
test
mov
test
inc
pop
ins
cmp
jecxz
xor
lods
adc
cmp
(bad)
push
icebp
das
setle
cmp
push
push
ins
push
inc
adc
jecxz
sub
push
imul
push
outs
outs
adc
xchg
stos
dec
into
shl
das
jmp
test
mov
int
cwde
fucom
jmp
xrelease
sub
adc
inc
ja
adc
and
stc
inc
xchg
xchg
mov
sbb
and
or
xchg
ficom
pop
scas
cmps
xchg
xor
push
fld
movs
jmp
ins
sbb
push
fmul
scas
adc
push
add
mov
aad
pop
imul
or
jge
cmp
adc
lods
je
ja
(bad)
and
sahf
mov
js
in
cmp
test
jge
pop
adc
retf
pop
mov
adc
adc
xor
or
adc
std
jmpw
cli
xchg
sub
mov
in
inc
out
outs
mov
fstp
call
sub
jl
push
retf
adc
inc
test
in
js
add
cli
pop
daa
jo
adc
jl
test
loopne
cmp
in
xchg
lahf
jmp
dec
adc
fst
iret
and
aaa
ss
mov
xchg
cmps
scas
data16
xor
retf
and
xchg
adc
mov
adc
mov
mov
sub
adc
ret
das
imul
add
dec
fs
and
lods
inc
jnp
inc
sub
cmp
add
call
rcr
jmp
mov
addr16
cmp
adc
dec
mov
in
sbb
xchg
adc
repnz
cld
xchg
and
push
movs
fnstcw
aam
jbe
sub
aas
adc
sbb
std
cmp
and
std
mov
pop
movs
mov
cwde
rcl
popa
fsub
loope
xor
rcr
adc
mov
aam
lock
push
push
stc
fnstcw
dec
stc
fmul
adc
jo
push
mov
jmp
xor
outs
pop
xor
cmc
or
mov
out
adc
xlat
ret
inc
pusha
sbb
mov
push
in
int3
xor
pop
in
mov
aam
test
popf
jno
xor
push
mov
rcl
xchg
push
pop
mov
mov
mov
add
xor
jge
pop
xlat
adc
fiadd
sahf
adc
pop
fstp
sub
pop
movs
xchg
jecxz
imul
sbb
pop
movs
hlt
test
retf
cdq
stos
ds
xchg
lock
lods
cmps
and
mov
push
xor
adc
adc
dec
adc
jl
lea
xchg
leave
jae
bound
loopne
jmp
lods
adc
mov
push
rdmsr
cld
loopne
lahf
mov
cmp
mov
int3
shl
movs
mov
pop
loopne
jae
pop
and
in
scas
dec
adc
daa
and
push
icebp
jecxz
push
ror
xchg
in
mov
repnz
jne
je
pop
adc
sbb
gs
jns
outs
and
pop
and
jb
add
pop
or
add
les
fwait
rol
push
inc
movs
fsub
ret
and
mov
repnz
or
push
xlat
sub
imul
and
stc
popf
in
stos
jnp
aad
mov
jmp
pop
enter
xchg
and
push
inc
dec
push
(bad)
mov
div
(bad)
out
(bad)
(bad)
(bad)
mov
jbe
or
inc
test
loopne
dec
adc
in
int
jmp
pop
sub
xchg
lds
arpl
call
dec
adc
adc
xchg
loop
cmp
in
cld
and
sti
(bad)
dec
std
test
int3
mov
or
pop
rol
lods
addr16
loopne
and
fsubr
icebp
mov
(bad)
arpl
jnp
in
push
int3
adc
adc
inc
dec
adc
sbb
jl
ins
repz
xchg
cmp
ins
scas
(bad)
pop
pop
xchg
adc
inc
dec
push
mov
adc
and
mov
adc
jmp
pop
fwait
leave
pop
aad
adc
movs
mov
sub
std
inc
stos
int
xchg
adc
popf
das
mov
cmp
fist
push
sbb
xlat
mov
mov
enter
or
adc
cdq
shl
pop
adc
out
cli
and
jmp
into
jae
pusha
push
sub
fild
bound
imul
sar
mov
retf
adc
pop
jb
mov
aaa
lock
inc
nop
sbb
adc
test
adc
lock
je
jbe
les
pop
add
xchg
das
push
pop
(bad)
in
es
pop
xchg
or
mov
and
clc
std
xchg
cmc
lods
int
fdiv
shl
xor
enter
xchg
adc
imul
adc
iret
sbb
sar
adc
stos
lea
push
fcom
xchg
retf
retf
lahf
inc
xor
jae
adc
xchg
nop
fisubr
sahf
mov
mov
add
div
sbb
cld
fisttp
sbb
xor
mov
mov
pop
dec
adc
sub
push
mov
inc
and
xor
in
and
(bad)
lods
adc
push
es
hlt
mov
ds
aad
push
mov
adc
adc
mov
xchg
imul
adc
push
lahf
sbb
sub
movsx
push
mov
push
and
mov
push
fisttp
leave
adc
popf
iret
pop
or
pop
or
mov
fwait
jmp
ds
mov
inc
and
rcl
mov
cmp
cmp
in
fs
inc
or
pop
js
adc
retf
mov
xor
and
xchg
adc
sti
fist
pusha
adc
mov
imul
ja
sbb
shl
mov
scas
xchg
mov
jmp
inc
jbe
adc
lahf
xchg
aad
mov
into
push
lahf
mov
cmp
xchg
scas
loopne
jne
mov
scas
mov
xchg
retf
push
xor
gs
xchg
pop
loopne
or
retf
scas
int3
aam
dec
ret
jnp
cld
stos
cmp
adc
addr16
push
push
call
clc
adc
xor
call
pop
sti
outs
mov
jns
rcr
in
push
jbe
data16
test
pop
add
xlat
shr
adc
add
fdivr
leave
les
movs
jnp
adc
cli
adc
pop
movs
pop
adc
xchg
jbe
add
mov
sbb
jmp
inc
aad
adc
or
scas
adc
scas
xchg
sub
je
xchg
cmp
jle
fcmovnbe
add
mov
mov
xor
adc
fidiv
xor
jo
pop
fmul
jp
aam
cld
ins
(bad)
adc
sub
not
mov
inc
adc
adc
jne
into
pop
mov
hlt
in
outs
lock
rol
hlt
push
retf
add
sbb
inc
test
inc
int3
je
popa
push
sub
pop
test
jmp
cmc
repz
inc
cmps
adc
adc
mov
mov
sti
les
jl
mov
rol
jae
outs
adc
fsub
(bad)
adc
adc
and
inc
mov
data16
imul
in
ins
xchg
jo
in
in
push
push
cli
outs
add
ins
push
xchg
cli
mov
sub
add
xor
adc
aaa
fwait
sbb
sbb
adc
nop
cmp
cmps
lods
lahf
std
adc
mov
sahf
js
adc
or
inc
mov
adc
movs
fs
cwde
mov
fld
popa
stos
test
int
sahf
loopne
jmp
lods
cmp
adc
movs
or
sbb
push
mov
xchg
dec
sbb
xchg
inc
fs
xchg
sbb
dec
fsubrp
ja
mov
sub
(bad)
mov
addr16
retf
dec
adc
cwde
rcl
xlat
jg
sub
push
add
stc
xor
in
sub
aas
add
push
xchg
ds
pusha
je
dec
push
add
outs
aam
sub
ss
cmc
call
or
call
test
adc
ret
mov
jno
pop
not
test
sub
sahf
lahf
xor
stos
cmps
add
mov
aaa
adc
add
mov
add
mov
out
xchg
fidivr
adc
fdivr
push
pop
jnp
push
dec
push
aaa
ret
push
mov
mov
mov
in
push
fld
(bad)
cdq
sbb
test
popf
mov
adc
mov
sub
sbb
push
xor
addr16
pop
pusha
cdq
aad
gs
ds
add
mov
adc
inc
dec
jmp
outs
mov
adc
jmp
test
adc
rcl
ret
push
mov
xor
mov
cmovns
shl
pop
xchg
in
mov
mov
adc
xlat
sbb
aad
adc
std
add
out
je
pop
je
mov
ret
pop
call
xchg
aas
inc
mov
fidivr
push
mov
fild
movs
push
leave
jno
jae
dec
cli
push
sbb
inc
fbstp
adc
mov
jns
out
jae
mov
pop
xchg
stos
retf
and
inc
ret
cmp
xor
ins
xchg
adc
jmp
xchg
aam
mov
jo
mov
pop
inc
or
sbb
repz
mov
adc
inc
loop
call
das
aaa
mov
pop
add
ja
add
sti
adc
mov
adc
add
sbb
ficomp
data16
test
les
(bad)
icebp
(bad)
mov
ja
add
jge
data16
mov
push
imul
out
xor
mov
arpl
mov
add
and
aas
pop
push
or
xor
(bad)
scas
adc
pop
loope
dec
jle
or
loope
(bad)
cmp
fistp
jns
cmps
jp
xor
pop
ss
out
jns
fdiv
mov
into
sub
stos
inc
retf
(bad)
jmp
inc
add
mov
adc
or
xchg
inc
inc
cmp
mov
int3
aaa
mov
out
in
aad
push
dec
je
rcr
xor
hlt
xchg
pop
dec
sub
dec
fldl2t
adc
or
cwde
out
cmps
ficom
ret
popf
into
adc
repnz
push
out
in
(bad)
push
mov
cld
adc
call
adc
cmp
jmp
das
or
in
pop
cs
imul
mov
test
lods
adc
scas
ret
add
adc
sbb
in
jmp
pushf
test
pop
(bad)
mov
ins
mov
aas
mov
and
or
pusha
cmp
adc
xor
xchg
cld
pop
retf
shl
adc
outs
sbb
(bad)
cmp
fs
cmc
xchg
ss
fcomi
sbb
jg
mov
pop
cmc
xchg
daa
adc
push
push
pushf
jl
pop
push
pop
or
sbb
inc
adc
mov
inc
dec
in
aam
clc
rol
mov
xor
jp
dec
inc
cdq
hlt
jo
push
leave
and
addr16
cmp
popa
fild
ds
test
or
cmps
cs
cmps
aam
sti
in
mov
inc
or
sar
mov
hlt
xor
aam
mul
push
inc
cmp
sar
pop
push
int
add
or
jne
sbb
pop
pop
jo
test
adc
pushw
lock
dec
loopne
push
sbb
sub
std
adc
jb
loop
es
in
push
iret
cdq
xor
(bad)
dec
mov
adc
mov
ja
das
and
cld
sbb
xor
outs
int
sbb
mov
in
push
dec
pop
inc
dec
add
mov
jg
pop
lahf
mov
add
xchg
sbb
adc
inc
dec
mov
or
imul
idiv
mov
fistp
or
scas
jl
jb
enter
je
xor
add
mov
es
dec
push
or
cmp
push
mov
pop
sbb
into
sbb
cmp
pop
call
int3
test
adc
lea
out
add
jo
in
inc
and
xchg
js
test
ret
popf
test
(bad)
in
inc
mov
fdiv
shr
in
mov
adc
mov
mov
mov
adc
jmp
sbb
aam
dec
call
push
cs
add
adc
and
in
mov
stc
xor
pop
sbb
(bad)
lock
adc
inc
sbb
repnz
adc
xchg
inc
push
fwait
jp
loopne
adc
push
loope
xchg
pop
movs
ficom
adc
and
lods
(bad)
jg
mov
hlt
sbb
fnstcw
call
mov
ss
sti
ds
retf
nop
aad
jmp
mov
ret
fdivp
cmp
sbb
xor
call
rcl
test
inc
aaa
das
mov
push
xchg
fbld
or
or
push
aaa
mov
xchg
into
mov
je
add
icebp
test
jl
pusha
je
xor
call
xchg
push
adc
sti
out
rol
pop
and
pop
and
cld
rcl
cmp
gs
mov
dec
jbe
adc
push
inc
xor
sbb
repz
inc
in
out
(bad)
int3
rol
or
leave
cmp
inc
add
not
stos
inc
add
(bad)
out
pusha
in
out
movs
or
loope
sti
ret
aam
retf
call
mov
mov
sbb
add
push
icebp
aam
mov
cli
and
popa
or
ret
push
shl
adc
les
(bad)
adc
push
mul
in
sbb
sahf
add
imul
jno
mov
jne
adc
inc
je
jl
adc
push
mov
lods
(bad)
popa
fidivr
loope
adc
dec
push
inc
push
fcomp
lock
cmp
sbb
cli
cli
fist
cmp
ds
mov
mov
and
sub
sbb
mov
xchg
sbb
fild
out
mov
add
and
je
jl
int3
inc
imul
mov
push
lea
cmp
call
inc
stos
lds
adc
inc
inc
mov
adc
stos
xchg
jmp
in
nop
jmp
ins
xor
sahf
fbld
ror
pop
push
aam
lock
pop
(bad)
scas
cmps
or
dec
pop
fcmovnbe
dec
adc
data16
mov
bnd
aad
ins
outs
add
jmp
aam
cmp
push
adc
(bad)
sbb
aas
repz
adc
mov
cmp
adc
hlt
dec
in
or
sets
jns
dec
lods
xchg
je
scas
add
mov
inc
data16
cld
xchg
cdq
and
leave
sbb
pop
call
sbb
xchg
push
std
into
push
xchg
lahf
xor
and
ret
pushf
test
outs
cmps
into
nop
pop
adc
cmp
pushf
adc
mov
dec
jno
adc
mov
sbb
loopne
pop
(bad)
sbb
aam
jno
dec
retf
sub
dec
or
jle
jge
fsubr
xchg
jae
jmp
pop
retf
lock
call
xchg
sub
rcl
test
jbe
repz
fisubr
jb
and
jae
xchg
int3
lds
xchg
pop
rcr
inc
repz
push
push
hlt
mov
xchg
cmp
add
dec
call
out
sbb
mov
imul
je
repz
fimul
out
retf
hlt
push
adc
sti
bound
jge
adc
xor
cdq
shl
adc
jns
test
(bad)
stc
loopne
fcom
mov
ja
push
push
pushf
add
cmp
ret
ds
repz
cmp
fwait
scas
dec
out
adc
xor
daa
not
xor
mov
adc
adc
aad
cmp
add
(bad)
jge
sahf
push
xor
hlt
retf
mov
cmp
pop
sbb
mov
inc
inc
sbb
mov
pusha
push
jmp
and
mov
adc
or
pop
cmp
aam
xchg
jae
adc
sbb
cmc
xor
and
popf
es
jae
sbb
xor
test
loop
int
das
and
mov
inc
or
push
test
sbb
dec
mov
pusha
jmp
xchg
dec
xchg
sbb
pop
xchg
test
jae
mov
(bad)
arpl
shl
jge
sbb
cmp
fisub
jbe
loop
and
movs
pop
adc
retf
fiadd
fcom
lea
adc
sbb
retf
mov
sbb
fldpi
sub
xor
movs
push
out
adc
sub
sub
add
adc
inc
in
sub
mov
jg
mov
adc
inc
pop
pop
test
add
dec
inc
dec
cmp
stos
adc
jmp
push
es
fcomp
push
(bad)
idiv
adc
or
stc
adc
aam
outs
cmc
cmp
adc
fild
stos
adc
mov
enter
adc
add
ja
cld
test
adc
mul
adc
add
movs
sahf
jne
gs
dec
jo
ficomp
into
aam
cmp
(bad)
fmul
ficom
(bad)
mov
add
fadd
xchg
arpl
jns
adc
cs
xchg
adc
adc
and
aas
dec
in
adc
add
cmp
out
inc
adc
pop
or
jmp
xor
sbb
sbb
or
dec
cmp
test
push
or
mov
push
(bad)
mov
jl
gs
mov
in
rcr
or
fcom
adc
adc
fmul
adc
cmp
call
mov
add
adc
push
in
xchg
sbb
adc
pusha
jns
push
frstor
outs
mov
dec
inc
jbe
pop
adc
mov
or
and
push
cli
loopne
adc
add
stos
inc
repnz
lahf
mov
sbb
sbb
mov
fiadd
ja
xchg
(bad)
xor
or
(bad)
call
sbb
xchg
mov
lods
stos
out
jg
push
xchg
pop
add
scas
pop
mov
inc
mov
lock
and
xchg
push
sub
loopne
addr16
add
je
sbb
mov
(bad)
out
out
sar
or
sbb
out
scas
imul
mov
jae
mov
add
mov
adc
into
pop
scas
ja
cmp
in
call
retf
sbb
cmp
and
pop
ss
push
xchg
into
mov
es
retf
dec
jne
bound
cmp
or
sbb
aam
push
adc
shr
mov
and
xchg
aam
das
clc
(bad)
push
adc
fnstsw
xchg
push
in
fcomp
stc
push
es
fist
or
data16
sbb
or
and
adc
sub
pop
mov
sbb
dec
lock
(bad)
(bad)
rcr
mov
mov
inc
mov
imul
or
adc
aas
mov
shr
adc
push
shr
inc
jecxz
add
gs
add
ret
retf
mov
push
jbe
repnz
or
sbb
or
xor
adc
shl
(bad)
push
push
push
adc
add
nop
adc
pop
mov
cmp
addr16
mov
mov
or
cmps
cld
std
adc
push
imul
cmps
test
xor
push
fcom
fst
out
cmps
mov
mov
out
push
jne
movs
mov
ss
jg
adc
out
cmp
adc
into
dec
add
or
xor
adc
jns
adc
sbb
fabs
inc
push
pop
into
sub
scas
mov
adc
adc
sbb
mov
cmps
loope
sbb
inc
out
cmp
data16
mov
fnstsw
fprem1
lods
jle
lahf
jmp
adc
push
je
jle
cmp
xchg
adc
cmp
lahf
fld
cmp
jmp
push
adc
cdq
rcr
cld
out
push
and
push
cdq
pop
push
sbb
mov
jne
push
cmp
jnp
and
out
icebp
ja
and
ins
ror
inc
inc
mov
je
or
call
jecxz
retf
es
mov
xchg
into
dec
mov
and
or
int3
gs
mov
repnz
and
shl
je
(bad)
int3
neg
icebp
mov
jmp
sti
jns
inc
int3
inc
and
dec
mov
sub
adc
xor
test
std
sbb
inc
cld
int3
shl
jmp
sti
sbb
cmc
pushf
adc
dec
daa
test
mov
leave
ficom
lods
(bad)
jg
cmp
(bad)
sbb
adc
xchg
dec
jae
fldcw
push
mov
inc
push
dec
std
loopne
stos
stos
sub
mov
inc
cwde
iret
cmp
inc
xchg
aad
jns
xchg
pop
into
or
push
in
inc
aam
jmp
dec
xor
or
(bad)
mov
les
(bad)
out
loop
outs
jp
inc
xchg
or
test
sahf
in
adc
je
and
adc
inc
xchg
call
les
xor
mov
ins
adc
dec
out
or
outs
imul
sub
je
inc
cmp
pop
je
test
adc
aam
push
xor
test
inc
mov
test
lods
retf
and
cli
cdq
(bad)
repnz
or
push
jb
xchg
adc
retf
in
xchg
stos
xchg
test
in
iret
sub
push
sbb
dec
clc
loopne
cmp
push
push
(bad)
push
push
and
mov
stos
mov
pop
pusha
and
sbb
mov
mov
mov
pop
mov
js
or
stos
arpl
aad
ins
cwde
cwde
(bad)
mov
sbb
sbb
ds
aam
ror
and
mov
xchg
push
add
cli
sahf
cmp
jmp
mov
je
push
pop
sbb
xchg
js
es
imul
dec
jge
push
cmp
inc
repz
cmp
and
sbb
xor
call
lock
pop
add
push
push
lahf
leave
push
cmps
lock
rcl
cmp
(bad)
and
repnz
aam
rcr
cmps
int
jb
inc
lods
jmp
or
shl
gs
retf
adc
xchg
pop
jmp
rcr
call
push
lock
cli
out
xchg
xor
int3
mul
(bad)
fld
xchg
cmp
cdq
sbb
scas
pop
ss
pop
mov
cmps
neg
shl
push
in
ficom
jnp
pop
adc
cmc
sbb
jmp
push
jmp
jl
or
add
adc
ins
fild
pop
(bad)
pop
aam
rcr
xor
sub
adc
cmps
and
push
scas
test
(bad)
adc
mov
sub
cmps
fsubr
mov
stc
adc
lock
mov
stos
loop
movs
xlat
and
ds
and
sbb
and
ja
cmc
or
(bad)
not
push
dec
adc
leave
sar
add
pop
ja
and
fidivr
adc
jmp
xor
and
in
cmp
les
movs
imul
add
adc
cmp
mov
jmp
lds
(bad)
sbb
inc
std
jbe
xor
rcr
mov
sub
cdq
je
and
xor
cmps
adc
lea
jmp
add
dec
adc
aad
mov
arpl
xchg
mov
loopne
dec
adc
scas
outs
mov
rcr
dec
test
stos
loop
adc
gs
add
mov
sub
jmp
adc
jb
adc
push
(bad)
out
jecxz
xor
mov
ss
dec
pushf
cli
add
pop
add
ror
push
in
and
mov
sti
cmp
lods
xchg
adc
jo
add
in
fdivr
es
inc
hlt
in
(bad)
mov
push
cmp
push
adc
mov
cmp
rcl
pop
fadd
cli
pop
lods
or
ret
aam
fs
adc
aaa
sti
(bad)
data16
pop
or
adc
jo
cli
fisttp
mov
mov
adc
push
sahf
dec
das
cmp
and
mov
jne
jl
push
test
xchg
iret
pop
(bad)
cmps
mov
inc
es
pushf
push
jl
xor
out
(bad)
ins
nop
cli
or
adc
test
sti
and
sub
xor
lods
aad
mov
adc
das
(bad)
fldenv
cdq
ins
adc
adc
data16
push
jae
mov
pop
cmp
jno
aam
fnstsw
sti
xor
dec
mov
adc
movs
mov
fistp
jmp
mov
scas
rol
hlt
std
sub
cmc
push
push
movs
and
adc
jmp
sbb
call
fimul
test
push
sub
cmps
cli
inc
mov
mov
movs
in
shl
and
outs
jl
or
mov
(bad)
jmp
cld
xchg
adc
into
xchg
outs
push
and
rcl
pop
add
das
add
lock
clc
rcr
stc
iret
enter
rol
adc
mov
push
add
mov
movq
and
adc
push
adc
iret
cmp
xchg
xchg
jle
rcl
add
call
ret
dec
jns
(bad)
in
fldenv
gs
add
sub
jmp
ret
adc
int3
ss
mov
cs
mov
inc
test
mov
ret
gs
pop
sub
retf
mov
add
adc
js
jno
ins
mov
xor
xor
mov
sub
imul
xor
test
push
pop
int3
jmp
or
jb
sar
sbb
mov
ficom
test
cmps
in
in
add
iret
imul
push
xchg
sbb
sub
jne
or
sbb
mov
test
inc
dec
icebp
jnp
cmp
adc
test
jno
push
pop
jmp
nop
jmp
xchg
xchg
sbb
jb
sbb
dec
mov
and
mov
push
sub
mov
adc
add
sbb
out
loop
cli
mov
xlat
cmp
adc
sub
push
js
wrmsr
scas
xchg
cs
fnstcw
bound
ror
sahf
or
aam
mov
jns
unpcklps
cwde
add
dec
in
sar
loop
iret
adc
test
adc
add
mov
retf
xchg
or
mov
sub
sbb
clc
xchg
jecxz
xor
ins
jp
std
ins
or
aas
inc
or
enter
imul
out
in
adc
out
aam
mov
paddw
xchg
sub
sbb
inc
dec
xlat
push
xchg
cmps
ins
popa
stos
xchg
into
push
mov
xchg
inc
xor
aas
push
test
mov
inc
adc
sbb
not
cmp
retf
mov
jmp
push
outs
adc
gs
push
mov
adc
inc
ret
jmp
jecxz
in
mov
ret
jb
ficom
aad
push
inc
adc
sub
lahf
out
xor
adc
mov
cs
jecxz
adc
ins
xlat
fcom
push
cmp
(bad)
stos
xchg
adc
sub
jnp
int
inc
adc
call
sub
imul
rcl
mov
adc
ss
dec
inc
sahf
inc
adc
mov
stc
stc
jmp
aas
adc
cmc
and
or
adc
push
jp
(bad)
xor
les
imul
adc
jmp
and
sbb
mov
xchg
clc
stos
jge
inc
iret
lods
sub
xchg
mov
push
adc
adc
inc
into
hlt
out
test
push
mov
xchg
lods
(bad)
cmp
push
sbb
or
call
pop
fsubr
push
cmp
push
jb
mov
xor
retf
xchg
popf
or
aad
pop
ds
sub
or
scas
icebp
adc
and
shl
adc
fadd
mov
jb
in
ret
es
retf
adc
mov
mov
std
mov
mul
adc
pop
push
inc
into
adc
dec
push
add
test
push
push
sub
xor
xchg
scas
jnp
adc
dec
pop
(bad)
adc
push
push
sbb
push
dec
add
and
ficom
adc
repz
pop
aam
fcomp
fwait
not
data16
adc
retf
sub
pop
repz
call
jmp
and
(bad)
jge
leave
fdiv
or
adc
aad
arpl
loop
ins
jle
int
mov
sahf
and
adc
push
(bad)
mov
adc
fidivr
add
dec
xchg
retf
stos
jmp
test
shl
mov
cmp
movs
arpl
and
cmp
addr16
idiv
inc
cdq
cmc
fst
call
(bad)
sbb
pop
into
jmp
test
dec
adc
sub
dec
(bad)
leave
push
adc
inc
mov
mov
(bad)
jmp
dec
pop
les
mov
neg
cmps
or
sub
adc
shr
lods
movs
cs
adc
out
xchg
lea
ja
in
xchg
imul
fsub
adc
jp
movs
lods
int
dec
cmps
adc
adc
ror
adc
or
xchg
pusha
lahf
bswap
in
adc
ins
jg
iret
xchg
push
adc
adc
mov
in
inc
retf
cmp
jp
cmp
aam
mov
cmp
push
xchg
es
add
push
lock
cmp
sub
in
fdivp
data16
fimul
(bad)
hlt
dec
mov
cdq
call
and
dec
cs
inc
(bad)
hlt
in
es
jmp
gs
aaa
les
clc
adc
adc
fwait
aam
mov
adc
inc
sub
fidivr
fist
push
test
dec
out
mov
nop
aad
loopne
and
movs
xchg
outs
pop
std
in
jmp
mov
add
sbb
and
jno
dec
pop
jg
aad
aam
adc
lods
out
sub
data16
xchg
cmp
adc
fcmovnb
adc
add
enter
inc
gs
sub
sbb
fisub
fist
ins
and
mov
es
add
xor
imul
repz
popa
aas
push
or
lods
test
(bad)
cld
pushf
jmp
jecxz
jmp
out
sbb
fsub
idiv
adc
jmp
in
dec
adc
sbb
fucomp
sub
add
out
jmp
mov
shr
cmps
jb
jmp
mov
fcomip
jmp
jmp
and
gs
pop
aas
or
xchg
loope
stos
jns
pop
jo
ins
push
pop
pop
cmc
push
sbb
lods
jne
les
push
mov
add
repnz
das
pop
in
adc
xor
sub
pop
xor
or
cmp
call
dec
push
jae
ins
imul
fldcw
repnz
sbb
push
inc
fisub
add
adc
int
fdivr
fs
(bad)
(bad)
scas
adc
ins
inc
cmp
sar
adc
imul
xchg
movs
pop
mov
enter
cdq
xor
cmp
xor
pop
and
xchg
ficom
adc
cmps
add
movs
push
dec
push
mov
out
adc
pop
xor
outs
adc
je
lods
mov
xchg
movs
push
xor
xchg
mov
retf
rcr
dec
mov
into
movs
test
cli
sbb
mov
sbb
adc
push
sbb
cs
adc
add
cmp
test
or
not
sbb
add
xlat
loope
mov
dec
adc
test
rol
push
add
aad
xor
jbe
xlat
jl
call
jmp
jmp
xchg
xor
push
clc
adc
jne
fchs
xchg
adc
mov
jg
adc
test
and
jo
push
fisubr
imul
dec
jg
retf
xor
mov
iret
fnstsw
sti
jnp
lods
adc
xor
(bad)
mov
sbb
ror
adc
mov
je
mov
loop
fs
(bad)
jo
push
adc
dec
and
imul
inc
call
aam
lods
rcr
bound
call
adc
adc
daa
jecxz
add
aaa
in
data16
or
mov
fstp
gs
ffree
inc
adc
lods
loopne
fdiv
add
ret
pop
fsub
out
cmp
xor
push
cld
push
sbb
push
adc
ret
lods
cld
ror
out
and
adc
dec
jns
shl
or
jp
je
sbb
in
and
cdq
adc
fdiv
mov
in
jmp
fld
sub
xchg
adc
popf
push
cmp
ja
arpl
xor
sar
hlt
jecxz
loopne
ret
enter
(bad)
cli
inc
adc
pop
aam
inc
and
icebp
adc
mov
ja
adc
add
sub
enter
test
retf
(bad)
outs
cmp
add
xchg
adc
bound
movs
adc
sar
inc
cmp
and
add
add
mov
xor
jnp
push
pop
les
pop
mov
cdq
outs
lock
addr16
adc
in
mov
push
adc
sub
sti
dec
push
jno
sbb
repnz
xor
adc
call
adc
loope
test
retf
xor
adc
loopne
cli
test
sub
(bad)
cmp
inc
sub
dec
mov
jb
inc
imul
mov
adc
or
inc
inc
mov
xor
test
sahf
xor
push
mov
stos
nop
pop
mov
arpl
in
lock
scas
icebp
push
ds
push
mov
xor
jmp
add
in
fdiv
mov
icebp
call
and
sub
jne
push
and
inc
adc
jb
es
cld
loop
aam
stc
icebp
cwde
sbb
push
jnp
pop
(bad)
hlt
push
dec
je
jno
xchg
dec
xchg
adc
hlt
adc
arpl
stos
jp
mov
in
adc
scas
test
push
xchg
ss
and
cli
rcr
add
jne
cwde
cli
and
ins
jno
icebp
xchg
(bad)
xchg
jl
push
(bad)
adc
out
jecxz
(bad)
scas
sbb
push
out
ins
lahf
dec
jae
and
shl
push
add
sub
shl
add
pop
jo
(bad)
out
daa
mov
popa
jns
or
nop
adc
add
scas
mov
push
leave
xchg
xchg
rcl
out
sbb
mov
(bad)
ins
push
xor
adc
imul
shl
aas
mov
inc
or
dec
mov
fadd
inc
xchg
cmp
add
add
jo
push
(bad)
lods
les
sbb
or
xor
push
inc
jae
xor
sbb
adc
cmc
xchg
sub
fs
jl
adc
xchg
push
cmp
sbb
and
xor
or
mov
(bad)
fst
mov
out
fist
jae
leave
dec
shl
aad
xor
sub
and
pushf
int3
je
sub
pop
in
cmps
std
jle
les
xchg
cmp
call
add
jae
jnp
and
and
cmp
mov
in
cmps
retf
add
mov
cmp
fisub
adc
cld
pop
inc
adc
fnstenv
ins
sbb
adc
xchg
dec
out
and
inc
jmp
sub
mov
fldenv
cmc
push
pop
jo
mov
mov
push
(bad)
and
add
xchg
and
js
lahf
ficom
sbb
in
mov
adc
pop
aad
jmp
shl
cld
adc
sbb
mov
jmp
fbstp
shr
shl
adc
xor
push
and
movs
and
imul
push
push
hlt
or
xchg
mov
das
mov
mov
in
mov
into
sbb
xlat
inc
sahf
fisub
dec
mov
cmp
cmp
adc
test
into
inc
adc
pop
inc
xchg
movs
pop
push
(bad)
jmp
inc
push
pop
jmp
and
push
mov
(bad)
pop
stc
fcom
jno
adc
cmp
test
cdq
sbb
or
popf
jge
sbb
jmp
cli
dec
sbb
cmps
push
rcl
jnp
adc
clc
add
jne
jecxz
jg
sbb
pop
and
fsub
in
xchg
lahf
lea
adc
xlat
push
leave
rcr
jl
push
dec
jns
movs
jle
and
inc
jmp
(bad)
push
scas
(bad)
ins
dec
mov
repz
fistp
in
push
fisubr
xchg
xchg
jmp
push
jnp
mov
popa
and
cdq
adc
lahf
jecxz
xchg
cmp
dec
mov
or
fst
adc
jnp
jo
movs
adc
jne
adc
mov
fstp
adc
dec
adc
outs
(bad)
cmp
icebp
aam
xor
sub
jae
stc
mov
in
push
mov
shl
dec
and
aam
cmps
xlat
sbb
jns
hlt
ins
sbb
pop
call
or
repnz
mov
ins
cmps
scas
push
pop
int3
jmp
jp
xor
mov
das
sbb
xor
sbb
xchg
adc
adc
sbb
lock
inc
adc
(bad)
or
mov
cmps
mov
retf
push
pop
stos
sbb
sub
or
mov
xor
add
comiss
fdiv
and
retf
cmp
adc
xchg
ins
out
mov
add
sbb
test
call
adc
int3
cli
les
and
loope
outs
xchg
dec
and
dec
mov
cmp
leave
adc
sub
call
mov
sub
mov
retf
int3
xor
sbb
inc
mov
adc
push
jmp
int3
ds
out
jecxz
in
push
dec
cld
iret
and
fs
fwait
and
call
jg
adc
cmp
mov
pop
xor
inc
pop
adc
retf
mov
xchg
in
popa
shl
xchg
pop
rol
xchg
sbb
dec
(bad)
in
mov
or
les
rol
dec
in
mov
xchg
inc
push
mov
jo
or
adc
aad
das
scas
push
jmp
sbb
(bad)
pop
cwde
popa
cs
int3
cmc
adc
les
mov
inc
add
loopne
mov
cdq
pop
(bad)
xor
add
push
movs
gs
push
rcr
sbb
add
xchg
and
cwde
adc
cmp
adc
cli
pusha
xor
xor
arpl
sbb
add
in
push
pop
cdq
inc
enter
out
out
cmp
popa
repz
jmp
rcl
dec
loopne
mov
xor
in
sub
sbb
in
scas
out
cwde
add
jnp
das
mov
cmp
cmp
and
dec
push
add
in
mov
adc
push
cmp
repz
daa
sub
cs
pushf
inc
cwde
mov
mov
push
push
lds
out
hlt
lea
out
jmp
inc
mov
in
add
(bad)
(bad)
clc
jne
(bad)
ss
fadd
sub
imul
test
pop
dec
add
pop
pop
repnz
in
and
adc
push
mov
cmps
nop
adc
jo
jp
scas
lahf
fwait
adc
icebp
xchg
aas
(bad)
hlt
je
or
shr
pop
cmp
fs
xor
sbb
pop
cdq
sub
mov
push
adc
jne
cmp
mov
dec
push
mov
and
cmp
ss
jg
adc
xor
cmps
cmps
pop
dec
sti
aad
mov
dec
inc
call
xchg
pop
sub
jo
add
dec
sbb
xchg
in
loope
(bad)
cmps
jae
int3
bnd
adc
or
test
scas
lods
adc
jb
add
push
mov
pop
sbb
dec
mov
push
jg
xchg
adc
(bad)
(bad)
xor
adc
or
lods
inc
imul
bnd
adc
jbe
fmul
cli
fisub
push
sub
out
and
push
out
xor
add
loop
xchg
xchg
xchg
adc
aam
dec
mov
das
enter
(bad)
sbb
adc
push
loopne
adc
lea
jnp
adc
repz
in
adc
cdq
adc
add
(bad)
adc
test
enterw
in
push
mov
dec
sahf
(bad)
es
adc
cli
sti
mov
and
aaa
sub
jecxz
jp
nop
repz
fsubr
repz
lock
jmp
xor
adc
pop
neg
inc
iret
lds
sti
xchg
mov
clc
push
outs
push
stc
sbb
arpl
push
sbb
adc
pop
enter
ins
inc
push
and
inc
or
mov
(bad)
and
adc
add
sbb
ret
aaa
shr
adc
and
or
test
test
je
adc
lock
push
mov
lea
dec
dec
or
aam
inc
in
das
cmp
fdivr
mov
bound
push
xor
repz
cdq
sbb
mov
movs
or
adc
cmp
ja
mov
test
std
lods
aaa
cmc
adc
cmp
or
adc
cli
cld
(bad)
out
and
adc
call
aas
adc
fdivr
mov
shl
adc
mov
jae
adc
mov
(bad)
jp
pop
and
sahf
push
ss
pop
sub
mov
pushf
push
dec
xor
hlt
pop
sbb
in
dec
pop
loop
repz
adc
mov
pop
sbb
shr
pusha
jmp
jnp
and
cmps
push
mov
js
or
es
call
push
pop
aam
xor
jo
pop
into
test
mov
xchg
fsubrp
in
mov
sub
or
jnp
lds
mov
push
push
mov
add
mov
xchg
xchg
push
in
ret
mov
clc
loop
and
cmp
sbb
mov
std
push
cmp
fdiv
sbb
mov
je
loop
xchg
push
adc
out
sub
mov
cli
mov
xchg
(bad)
push
adc
pop
aas
push
(bad)
leave
icebp
dec
adc
shl
dec
jmp
repnz
in
fcomp
pop
test
adc
mov
fdiv
adc
jae
adc
mov
scas
cdq
lods
rol
inc
std
xor
push
ss
jecxz
cmp
push
xchg
into
shrd
adc
mov
stos
mov
sub
xorps
jo
test
xchg
jns
mov
push
add
int3
rcl
add
rcl
jns
data16
jo
in
ror
js
fs
movs
jp
pusha
mov
mov
inc
adc
mov
dec
xchg
sbb
loopne
out
test
pop
test
stos
jmp
pop
mov
xor
shl
aam
outs
sbb
mov
dec
jecxz
cmc
mov
hlt
daa
ret
int
dec
ins
push
mov
adc
push
pop
mov
imul
ss
add
sbb
loope
jl
jbe
push
imul
movs
fwait
add
jo
cmp
call
mov
adc
movs
mov
inc
ret
pop
jb
js
push
add
push
adc
jp
stc
sbb
pop
mov
pop
or
xlat
mov
add
add
retf
mov
dec
call
loopne
adc
fistp
stos
mov
sbb
push
sbb
mov
in
add
adc
scas
and
push
add
mov
in
cs
xor
or
out
daa
in
imul
or
lahf
fisttp
out
iret
mov
mov
adc
cdq
hlt
out
fbld
xor
je
dec
cmp
push
into
jbe
jo
jmp
mov
pop
mov
jmp
int3
test
sti
adc
and
jg
out
test
and
jmp
jge
aas
cmc
hlt
xlat
retf
mov
fst
outs
xchg
jg
leave
je
mov
sahf
cmp
mov
sub
xor
xor
inc
inc
mov
icebp
in
aad
addr16
loopne
jne
and
sub
mov
es
mov
fadd
sbb
mov
xor
gs
pop
jo
mov
pop
jg
je
loop
pusha
test
std
in
retf
dec
dec
(bad)
or
adc
push
xchg
mov
nop
pop
pop
pushf
test
es
(bad)
mov
mov
arpl
cwde
pushf
bound
or
cld
cli
cld
leave
push
and
out
out
ins
jmp
pop
mov
sbb
(bad)
push
ss
mov
xchg
fcom
and
sbb
push
dec
jmp
mov
dec
xchg
jp
sahf
adc
cmp
mov
add
add
jmp
push
inc
cmc
mov
xor
movs
test
adc
xchg
inc
sar
mov
adc
cmps
loope
mov
sti
or
iret
adc
mov
mov
adc
pop
xchg
ss
(bad)
cmp
xchg
pop
cmp
jle
and
outs
shl
adc
jp
rol
inc
ror
and
fisubr
adc
sub
mov
fst
jbe
xor
mov
and
cli
gs
repz
test
data16
add
inc
xor
dec
and
pusha
adc
jmp
add
or
int3
add
and
mov
cs
push
ja
das
stos
idiv
call
jo
mov
(bad)
repz
xchg
outs
and
rcr
sub
ja
and
add
mov
add
mov
pop
pop
jle
add
bound
sbb
jae
ficom
push
sbb
retf
push
push
out
adc
and
in
(bad)
adc
inc
inc
adc
retf
add
xchg
aam
jmp
fcomp
dec
shl
std
fisttp
cmp
xchg
sbb
xchg
aad
push
adc
xor
int3
and
out
dec
mov
bswap
xchg
ficom
movs
push
arpl
push
mov
sbb
mov
test
jae
mov
lahf
jnp
mov
push
xor
out
enter
mov
and
or
dec
cwde
mov
fs
and
into
inc
out
push
enter
shl
hlt
aam
adc
and
mov
call
mov
and
mov
push
ficomp
pop
jnp
not
hlt
outs
lods
xchg
mov
test
push
not
push
cs
jb
idiv
(bad)
aam
xchg
adc
add
jmp
mov
or
adc
fwait
test
jns
imul
xor
outs
adc
jnp
je
fwait
mov
clc
nop
push
jle
push
adc
mov
pop
cmps
daa
sub
adc
(bad)
pop
add
jmp
loope
popf
push
lahf
mov
xchg
inc
xchg
sub
sbb
lock
mov
jno
adc
cmps
pop
jle
adc
loope
adc
ret
retf
in
add
dec
cmp
pop
adc
dec
nop
xchg
out
xor
clc
mov
aam
xor
add
fs
sbb
xchg
(bad)
mov
push
lods
or
mov
xor
fst
cmps
dec
xor
out
adc
mov
jne
cs
and
adc
mov
scas
clc
sbb
mov
dec
push
jbe
popa
and
sbb
aas
dec
fisub
sbb
les
pop
addr16
repnz
xchg
adc
mov
adc
(bad)
mul
xlat
cmp
jmp
adc
adc
pop
frstpm(287
mov
mov
ds
adc
adc
rol
push
push
mov
xor
inc
ins
inc
adc
(bad)
ror
imul
lahf
xchg
rol
jmp
add
and
ins
cld
loop
out
(bad)
gs
add
xor
fucom
add
(bad)
mov
or
fist
push
jnp
pushf
add
fadd
mov
and
out
retf
iret
add
test
sub
push
stos
into
sub
dec
popf
ins
xchg
cmp
add
ss
xchg
sub
push
mov
push
(bad)
mov
xchg
ins
pop
push
xor
retf
aas
enter
sbb
mov
mov
int3
inc
(bad)
xchg
or
clc
or
inc
cmp
mov
sub
xor
sub
gs
push
push
mov
pop
xchg
and
mov
push
mov
ffree
call
dec
xchg
adc
(bad)
jmp
sub
or
mov
fldenv
cld
mov
pop
pop
leave
or
fistp
dec
adc
inc
adc
mov
push
test
bswap
icebp
aaa
dec
lods
xchg
jle
loope
add
sbb
jge
mov
out
push
dec
mov
sub
fmul
cmp
int3
mov
xor
pop
xchg
leave
sbb
and
and
loope
scas
in
adc
mov
pop
push
xchg
mov
lock
push
rcl
bound
adc
and
cmps
mov
or
ret
scas
adc
mov
in
aas
aad
sub
in
mov
loope
aam
inc
adc
enter
jle
std
xchg
shl
mov
outs
(bad)
pushf
cmp
cwde
fs
inc
push
pop
cmp
jns
adc
ret
frstor
jb
inc
mov
adc
shl
add
(bad)
in
adc
in
fwait
mov
jp
xor
dec
aam
and
adc
iret
mov
xchg
lahf
mov
adc
lds
ror
out
adc
repz
enter
dec
lahf
mov
neg
lock
rol
out
adc
ja
dec
arpl
pop
ins
repnz
adc
inc
and
sti
adc
into
and
sbb
fwait
ins
adc
pop
xor
pop
es
xchg
movs
dec
hlt
fadd
aas
mov
imul
and
clc
mov
(bad)
mov
inc
adc
or
jge
out
hlt
jb
jo
push
stos
dec
je
and
xchg
test
xor
lea
add
cmp
mov
and
loopne
mov
adc
mov
call
or
nop
adc
aaa
push
shl
pop
mov
push
dec
fdivp
cmp
fdivr
sub
clc
adc
sbb
hlt
sbb
mov
or
shl
rol
and
adc
or
jnp
xor
mov
push
adc
cwde
cmp
fbstp
add
push
out
jb
(bad)
mov
mov
outs
stos
sub
pop
jnp
adc
xor
dec
int3
mov
xor
jne
stos
les
dec
xor
data16
retf
mov
loop
daa
mov
xor
pop
js
popw
scas
jae
daa
add
mov
cmp
loop
sbb
push
cwde
clc
and
in
pop
adc
mov
pop
ins
adc
adc
lods
dec
push
add
nop
das
cli
adc
scas
outs
cs
stos
stc
dec
adc
mov
mov
sbb
ficom
add
dec
mov
iret
adc
enter
inc
sub
mov
mov
ror
sub
adc
dec
adc
addr16
enter
adc
(bad)
cmp
dec
xchg
cmp
push
xor
pop
inc
xchg
jb
jae
mov
dec
ret
adc
sbb
sbb
mov
pop
jmp
mov
bound
fidivr
pusha
imul
adc
mov
mov
fwait
adc
cmp
jecxz
add
dec
push
hlt
cs
and
add
(bad)
fcom
mov
and
(bad)
adc
mov
ficomp
test
fist
xchg
adc
repz
(bad)
mov
jmp
jp
jne
xor
add
sbb
adc
mov
adc
push
dec
fist
fbld
daa
adc
(bad)
or
dec
mov
jecxz
popa
pop
call
mov
or
jg
inc
jmp
sbb
or
mov
inc
lods
ret
(bad)
(bad)
cmps
mov
aam
push
cs
mov
push
out
adc
xor
arpl
push
and
xor
push
test
loope
xchg
mov
sub
icebp
hlt
setnp
aaa
arpl
adc
sahf
or
adc
inc
fdivr
dec
fcom
stos
jge
clc
jnp
adc
mov
(bad)
repnz
jl
push
dec
xor
mov
push
pushf
push
pop
inc
in
or
frstor
mov
int3
sbb
inc
lods
rcl
sub
cmc
lahf
adc
mov
js
add
sar
adc
xor
jae
sti
inc
xchg
push
mov
cmp
xchg
rcr
les
adc
lock
xor
sahf
inc
push
pop
mov
imul
pushf
mov
out
adc
js
xor
mov
push
adc
iret
pop
mov
sbb
imul
xor
xor
(bad)
shr
mov
fmul
loope
mov
aaa
(bad)
push
shl
lods
xor
and
test
jae
jnp
pop
pusha
push
push
mov
mov
or
cmp
or
stos
push
mov
adc
mov
jno
push
call
cmp
xchg
std
std
push
mov
and
pop
or
and
adc
adc
ja
sbb
mul
adc
jne
add
fisub
mov
outs
adc
(bad)
dec
add
sbb
or
data16
add
arpl
add
movs
fwait
adc
aaa
push
in
mov
inc
repnz
push
ror
xor
not
cli
mov
adc
retf
dec
adc
sub
int
sub
sbb
mov
shl
mov
(bad)
lods
push
xor
dec
and
out
adc
adc
icebp
dec
lea
out
pop
adc
mov
in
mov
xchg
imul
cmp
sar
add
mov
xchg
cmps
adc
xchg
lods
fs
mov
dec
ds
in
lea
adc
and
inc
cmp
inc
mov
push
and
int
adc
popa
and
repz
push
or
add
adc
sar
pusha
adc
mov
pop
jnp
ret
popa
jmp
jmp
push
icebp
push
adc
leave
lahf
(bad)
adc
xchg
shl
shr
cs
fwait
mov
test
cmps
fdivr
mov
xchg
push
pop
pop
cs
cmp
adc
test
sar
pop
pop
adc
mov
gs
sti
pop
add
inc
sbb
xor
pop
dec
rcl
cwde
out
inc
sub
into
adc
ffree
nop
dec
popa
fchs
and
fsub
jbe
add
sub
(bad)
out
loopne
and
push
push
shl
mov
aad
add
pop
stos
clc
in
jg
ret
fsub
cmps
add
pop
xchg
xor
sbb
aam
dec
push
add
push
jns
mov
mov
mov
les
mov
adc
xor
jbe
push
xchg
jl
adc
sti
jb
scas
fcom
pop
out
mov
pop
sub
jmp
repz
mov
and
(bad)
mov
jp
loope
aas
sti
inc
adc
sub
lea
xchg
and
in
mov
mov
cwde
adc
cmc
and
adc
repz
adc
jp
fsubr
xchg
enter
lods
fsub
stos
dec
in
adc
or
hlt
dec
sbb
or
jmp
jne
repnz
and
scas
add
stos
ins
imul
int3
xor
mov
pop
fist
push
nop
adc
ins
fisub
dec
int
add
mov
lods
je
adc
ins
(bad)
and
rcr
rcr
sbb
or
pop
int3
add
and
and
pop
je
mov
dec
push
mov
int3
or
or
call
sti
pop
add
ins
loope
mov
dec
inc
inc
adc
pop
cwde
cmp
mov
dec
push
loop
inc
jg
jecxz
enter
or
pop
adc
adc
in
je
mov
clc
imul
adc
lds
retf
fistp
repz
shr
xchg
aas
je
xchg
mov
sbb
fwait
cmps
out
sbb
mov
popf
xchg
ds
sbb
sub
mov
mov
pop
mov
pop
sbb
es
and
test
cmp
mov
dec
xor
adc
xor
sbb
adc
aad
das
xor
mov
jne
xor
inc
xlat
in
push
sbb
xchg
std
mov
ja
mov
jno
sahf
cmp
pop
mov
and
and
xchg
add
push
nop
add
fs
adc
push
pushf
jmp
int
jl
das
je
jo
jns
sub
adc
add
inc
retf
push
mov
repz
lea
jb
xchg
cmps
test
je
ret
dec
jbe
popa
aas
repz
xor
aad
das
lds
cmps
fidivr
mov
sti
sub
popa
mov
mov
fs
bound
add
xor
jno
xor
dec
aas
push
and
data16
mov
pop
stc
dec
pushf
(bad)
push
ins
sub
in
push
pop
jg
fcom
and
add
push
sbb
cmc
jnp
test
data16
pop
push
aam
aam
repnz
ret
push
cbw
in
push
clc
push
xchg
icebp
add
xchg
outs
push
adc
add
push
mov
movs
sbb
xchg
cli
dec
cld
dec
in
ret
stos
adc
sahf
loop
in
cmc
arpl
xchg
outs
dec
inc
push
loop
push
out
not
out
or
or
(bad)
push
sub
adc
or
sub
aam
mov
out
mov
(bad)
test
movs
xor
outs
sbb
fcomp
adc
(bad)
imul
cmp
jle
aaa
das
js
call
idiv
fcomp
cmp
xor
jmp
shr
mov
add
push
or
adc
jg
(bad)
pop
xchg
and
dec
adc
cmp
test
ins
into
in
pop
mov
cmp
nop
adc
sub
test
sbb
(bad)
and
adc
fs
jne
movs
or
call
lock
data16
(bad)
cmps
adc
jae
inc
ins
fadd
add
mov
inc
ret
mov
pop
xchg
repnz
adc
add
inc
int3
lods
adc
pop
inc
or
mov
xchg
dec
fisubr
out
jmp
and
or
pop
sar
test
adc
push
ss
hlt
cs
and
test
pop
pop
ret
aaa
fmul
xor
mov
test
xchg
dec
cld
xchg
fild
(bad)
jno
retf
cmp
push
push
(bad)
in
push
(bad)
pop
hlt
sbb
pop
scas
adc
(bad)
mov
pop
repnz
cmp
movs
adc
sub
and
inc
lea
call
cmps
jl
int
dec
shl
sub
call
sbb
clc
inc
in
sub
or
pop
lahf
dec
sbb
(bad)
in
jmp
lds
xor
sbb
sub
cmp
jle
sbb
mov
call
push
mov
or
std
test
adc
add
fbld
adc
pop
mov
inc
or
or
mov
aaa
pop
mov
inc
je
mov
fsub
adc
dec
enter
sub
sbb
ins
mov
pop
xchg
xchg
xchg
pop
mov
mov
mov
xor
xchg
cmp
jg
adc
inc
test
fld
js
cmp
jle
pusha
cmps
dec
lods
adc
jae
adc
retf
fidiv
xchg
sahf
cmc
xor
sub
adc
repnz
sbb
call
nop
std
data16
jecxz
pop
cwde
hlt
cmps
fild
inc
je
add
adc
xor
pop
popa
or
mov
jecxz
adc
rcr
js
dec
lods
adc
mov
fs
jmp
retf
jmp
and
arpl
mov
mov
add
out
aas
mov
(bad)
lods
int
adc
pop
imul
mov
data16
pop
adc
or
jle
xor
xchg
push
adc
jne
jnp
xchg
adc
sub
call
les
ds
sbb
je
fst
mov
(bad)
sub
adc
test
xor
add
xchg
push
sub
push
loope
test
rcr
arpl
adc
cmp
rcl
mov
mov
xlat
pusha
xchg
adc
addr16
or
add
inc
es
scas
xor
push
and
test
fadd
aaa
xchg
jl
pop
rcl
adc
pop
xor
or
adc
push
xor
test
mov
sahf
rcl
dec
addr16
jmp
sbb
inc
in
pop
loopne
aam
sbb
in
add
cs
repz
cld
jge
xchg
mov
xchg
push
sbb
test
bswap
and
cmp
jge
add
push
test
sbb
mov
mov
mov
xchg
loopne
out
xchg
jbe
bswap
adc
out
test
lahf
mov
ror
sti
jb
sbb
shr
add
ins
out
(bad)
mov
mov
ret
retf
rol
ret
sar
cwde
aam
aam
imul
cld
call
and
repnz
loop
mov
cdq
or
inc
sub
dec
and
dec
jo
aam
enter
add
mov
push
(bad)
and
addr16
jle
lock
clc
mov
mov
sbb
cld
mov
aaa
xchg
ret
in
inc
adc
inc
and
nop
xchg
adc
xchg
fmul
icebp
pop
xchg
int3
std
pop
jl
ja
and
pop
sar
inc
loopne
jmp
jecxz
in
ds
ja
xchg
scas
ffreep
jmp
dec
mov
aaa
arpl
lods
add
adc
fiadd
ds
ret
jo
cmp
sbb
jl
loop
push
xchg
sbb
scas
jmp
retf
popa
ret
xchg
pop
dec
mov
out
mov
pusha
je
xchg
rol
push
fisubr
sbb
loopne
sub
sub
outs
aam
fcmovne
cmp
ficomp
fcomp
sbb
adc
or
cmp
or
jbe
cmp
pop
rcr
mov
in
out
mov
dec
pop
adc
int3
push
mov
dec
lock
xor
sbb
add
xchg
jl
pop
push
(bad)
int3
(bad)
fbld
mov
adc
je
cmp
cmp
mov
pusha
adc
shl
jle
lods
add
movs
jae
jb
push
mov
aam
dec
dec
push
test
je
sbb
fist
add
pop
push
hlt
sbb
pop
push
dec
adc
lock
stos
mov
mov
adc
es
xor
(bad)
rcr
lods
and
mov
xor
sbb
sub
mov
(bad)
cmps
or
sbb
mov
adc
xchg
add
inc
push
test
xchg
sub
push
ret
ins
shl
cmp
fwait
arpl
jle
int3
xchg
js
ja
add
vandps
lock
in
int3
je
dec
pop
mov
pop
inc
or
cmp
jg
ja
xor
sub
loopne
loopne
adc
pop
loope
shl
push
nop
sbb
mov
mov
and
js
in
add
sahf
dec
dec
pop
icebp
jp
cli
add
sbb
fmul
jmp
stos
cld
movs
ins
cmc
push
cmp
adc
out
je
and
mov
loopne
cmps
fldenv
cmp
pop
je
inc
in
adc
imul
aam
and
leave
mov
mov
(bad)
call
cmp
adc
mov
pushf
or
repnz
ss
test
jle
in
outs
stos
push
sub
je
pop
(bad)
adc
not
push
ss
mov
xchg
pop
rcl
add
rcl
ins
xchg
sub
push
nop
repz
push
adc
rcl
retf
in
outs
inc
pop
xchg
pop
fwait
adc
push
or
mov
mov
shl
lods
inc
stc
pop
push
jne
jmp
jp
retf
inc
pusha
push
push
ins
cmp
add
and
and
icebp
pushf
ins
push
lods
out
inc
leave
inc
mov
bswap
mov
push
out
adc
mov
retf
ror
int
xor
push
stc
push
ficomp
or
fldcw
push
out
int3
hlt
out
mov
xlat
mov
repz
pop
dec
aad
imul
add
sbb
fs
inc
dec
retf
fild
adc
sub
(bad)
data16
ins
push
inc
call
pop
xlat
addr16
je
inc
push
push
pop
xchg
ins
(bad)
fld
inc
adc
adc
fnsave
movs
mov
sbb
push
aaa
fwait
mov
sub
cmp
inc
gs
fidiv
rcl
dec
cmp
call
inc
es
or
adc
arpl
add
(bad)
cmp
call
mov
dec
push
pop
and
xor
pop
imul
and
or
sbb
mov
and
and
aam
shl
push
inc
aam
and
and
push
jnp
stc
je
cmp
mov
dec
mov
mov
xor
mov
cld
in
das
sbb
inc
mov
je
sub
inc
and
movs
fsubr
add
adc
cdq
and
inc
xchg
mov
add
mov
data16
je
repz
test
out
ret
or
(bad)
push
loope
sub
add
imul
data16
and
dec
inc
add
add
dec
pop
sub
cli
pop
cdq
scas
sub
xchg
aam
jle
aaa
add
jnp
test
dec
xor
aam
int3
and
dec
mov
sub
adc
jb
sub
je
xchg
mov
pop
stos
daa
into
repnz
fs
push
fisttp
add
dec
adc
in
jbe
not
xchg
mov
into
jnp
adc
sub
mov
sbb
lods
cmp
xchg
jge
aaa
in
ins
shl
gs
xchg
add
movs
sbb
sti
aas
push
jbe
sbb
ficom
std
mov
sub
(bad)
mov
fwait
jnp
adc
jne
add
and
pop
xchg
out
push
jl
push
sub
add
inc
sub
push
jae
sub
out
and
pop
xor
outs
adc
jl
lock
(bad)
fild
or
mov
adc
sahf
popa
adc
cmps
or
fcmovbe
hlt
sbb
loope
rcl
sahf
fcomp
ret
mov
mov
lock
jge
jmp
adc
(bad)
arpl
sahf
adc
test
jmp
sub
icebp
iret
call
add
in
or
test
das
inc
in
adc
pusha
in
popf
mov
add
push
test
jnp
call
popa
or
and
xchg
in
pop
test
clc
sbb
push
sub
xchg
sub
inc
lock
ds
movs
movs
sbb
sbb
int3
std
ret
mov
je
dec
add
mov
mov
test
out
test
push
mov
out
les
adc
mov
or
inc
hlt
pop
retf
pop
lods
repz
push
(bad)
and
mov
call
aaa
sbb
add
mov
mov
out
fdiv
add
sti
test
icebp
and
rcl
dec
sbb
arpl
sbb
lahf
cs
dec
adc
jg
sbb
sub
(bad)
out
cli
dec
jle
or
leave
enter
pop
xchg
inc
adc
or
aam
call
out
cmp
inc
pop
add
into
mov
pop
and
je
sbb
lea
xchg
out
xchg
dec
aam
xchg
lods
and
scas
sub
retf
sbb
and
retf
adc
add
mov
cmps
dec
mov
push
or
pop
xchg
nop
mov
test
jg
(bad)
rcl
sbb
mov
jl
out
dec
retf
mov
xchg
jmp
inc
daa
cmps
sub
xor
ds
push
push
sar
and
pop
rcr
mov
scas
ds
int3
daa
push
das
pushf
push
mov
rol
nop
and
cwde
sbb
mov
xchg
push
adc
push
shr
add
cmp
push
or
data16
lock
mov
mov
cmp
xor
jmp
and
pop
fnstcw
popf
retf
cmp
jl
jmp
push
adc
xor
adc
mov
mov
fild
in
dec
adc
xor
stos
cmp
lds
add
push
xchg
jge
sbb
idiv
sub
xor
inc
and
push
and
retf
popf
test
enter
push
mov
lock
call
push
mov
addr16
push
mov
sbb
push
(bad)
cmps
rcl
adc
pop
pop
jp
dec
lea
loopne
aam
push
inc
aam
mov
imul
pop
adc
jecxz
bnd
or
xor
inc
dec
sbb
std
outs
xchg
jl
int
cmps
adc
fisubr
adc
sbb
sar
mov
in
xchg
push
sub
mov
push
dec
jns
inc
fwait
loopne
xchg
adc
xchg
fisttp
(bad)
idiv
xor
inc
adc
in
mov
adc
ret
push
pop
movs
jecxz
cmps
arpl
adc
outs
lock
push
mov
aaa
pop
inc
inc
in
fwait
or
inc
sar
push
mov
je
aad
inc
fadd
mov
cmc
inc
adc
jmp
xchg
mov
inc
ins
mov
sub
fisub
sbb
daa
pop
xchg
aaa
pop
ins
and
mov
jle
mov
sub
fistp
cmp
rcr
fidivr
cmp
scas
xchg
(bad)
or
cmp
xchg
idiv
jl
and
adc
and
adc
(bad)
fstp
or
pop
fdivr
sub
and
jmp
ds
jg
mov
fsub
sub
mov
aam
mov
adc
sbb
jns
repz
adc
clc
mov
sub
push
mov
add
cmp
inc
push
imul
jne
xchg
xchg
(bad)
adc
aad
fldenv
jbe
lods
aam
repz
and
cwde
pop
adc
mov
sbb
cld
pmulhw
mov
shl
cdq
and
cli
push
adc
xor
out
loope
ins
shl
sbb
mov
lods
adc
dec
cs
xchg
test
adc
fs
sahf
xchg
pop
sbb
pop
cmps
push
pop
sub
(bad)
mov
mov
push
jnp
mov
and
retf
jmp
inc
mov
jle
or
add
je
xor
mov
arpl
lods
push
push
jl
cmp
push
push
and
js
in
jns
je
fwait
mov
test
lahf
jg
imul
inc
push
mov
in
outs
test
ficom
stos
les
pop
(bad)
adc
icebp
movs
and
js
call
leave
lahf
adc
adc
inc
movs
or
int
sub
lods
xlat
ret
dec
inc
call
or
mov
std
push
mov
out
fimul
sbb
adc
cmp
cld
sbb
push
dec
aad
call
ins
inc
test
xor
and
mov
adc
fdivr
outs
push
cmp
fisub
cs
xchg
stos
jge
inc
sub
jne
add
(bad)
adc
call
push
cmp
daa
mov
stos
retf
fst
pop
xor
sub
bound
adc
test
pop
out
movs
movs
in
bound
or
and
stc
cmps
inc
push
test
jg
scas
mov
(bad)
lock
aaa
adc
addr16
(bad)
pushf
xchg
test
pusha
cmp
pop
out
out
aaa
dec
jne
nop
mov
fcom
stc
inc
movs
pop
cwde
jbe
push
adc
add
pop
es
adc
not
mov
mov
push
cmps
pop
pop
adc
test
or
or
adc
dec
jp
mov
test
mov
push
add
or
jp
shl
dec
dec
neg
add
neg
pushf
inc
fidiv
jp
sub
ds
cwde
push
loop
adc
dec
sub
sbb
jno
stc
(bad)
in
mov
mov
xor
mov
xor
adc
add
retf
cli
pop
jmp
dec
sub
jmp
ret
sub
sbb
mov
inc
and
adc
xlat
inc
inc
dec
shl
and
adc
adc
movs
sbb
adc
(bad)
mov
sbb
les
arpl
adc
movs
mov
push
and
inc
push
enter
adc
out
push
adc
push
nop
fnstcw
into
aam
repz
mov
aaa
or
adc
xchg
cmp
sti
cmp
aas
xchg
mov
ds
mov
jb
xchg
in
movs
idiv
sbb
cmp
push
push
adc
mov
stc
xor
dec
aad
xchg
sti
test
or
test
mov
aad
pop
pusha
cmps
test
retf
ins
inc
movs
mov
xchg
pop
add
jmp
addr16
mov
and
out
dec
dec
je
add
mov
retf
loop
jmp
xor
dec
mov
inc
sbb
scas
xchg
call
pop
aas
jge
fwait
dec
xchg
adc
addr16
sti
add
rcr
add
ret
aad
out
aam
adc
push
jmp
out
sbb
jb
aam
inc
into
xchg
pop
or
test
xchg
cmp
data16
sub
push
fnstsw
aad
sbb
or
sar
test
movs
jle
fcmovu
sub
xchg
cs
rcl
std
in
rcl
cmp
mov
int3
cld
inc
pop
inc
mov
out
pusha
ret
adc
xlat
mov
data16
xchg
push
xor
enter
and
mov
imul
inc
mov
push
xor
pop
push
adc
xlat
and
out
mov
sbb
imul
imul
xor
mov
(bad)
dec
and
pop
adc
in
pop
lds
jno
mov
mov
xor
sbb
mov
adc
fsub
jmp
inc
out
retf
pop
bound
or
gs
stc
jb
mov
add
outs
je
je
fldcw
clc
push
ja
in
nop
sar
shl
push
test
mov
leave
and
xor
mov
cmc
cmp
adc
fwait
call
outs
jge
pop
inc
ins
(bad)
in
adc
lea
lods
adc
fsubr
cmp
adc
and
sub
dec
mov
or
sub
cwde
adc
fsub
dec
rcr
sub
outs
aas
xchg
mov
cmps
test
xchg
jmp
in
xchg
lock
cmp
xor
popa
adc
std
jmp
retf
push
mov
int3
cmp
stos
pop
mov
add
int3
daa
sub
sbb
cld
jmp
xchg
(bad)
mov
imul
cmps
mov
push
xchg
sbb
in
mov
imul
cld
call
pop
adc
xchg
fldenv
cmp
fmul
add
call
mov
jg
mov
fisub
icebp
lock
loopne
adc
lahf
out
push
fistp
pop
enter
push
sbb
push
and
adc
popa
push
ins
iret
mov
fs
push
movs
xchg
cmp
cmc
adc
scas
(bad)
sbb
inc
push
pop
sub
add
xchg
adc
lods
out
mov
or
fnsave
in
out
push
mov
(bad)
hlt
ficom
cdq
add
and
jae
mov
adc
dec
pop
(bad)
mov
sbb
shl
jns
mov
mov
cli
jmp
fs
fsubrp
lahf
mov
sahf
fwait
add
and
adc
sub
mov
add
jmp
adc
mov
xchg
ret
(bad)
loop
adc
aam
adc
inc
xchg
sbb
xchg
xlat
mov
ins
inc
mov
adc
dec
or
(bad)
jge
adc
inc
pop
mov
movs
test
dec
in
mov
(bad)
mov
add
das
adc
ds
or
cmp
fdivr
pop
mov
inc
addr16
sbb
adc
loopne
outs
in
std
jb
clc
mov
push
push
pushf
push
and
or
push
test
sub
(bad)
fwait
and
arpl
mov
imul
aam
push
adc
pop
pop
pop
neg
fwait
mov
push
aad
inc
cmc
in
dec
mov
sahf
leave
adc
adc
aas
push
into
adc
mov
inc
stos
fld
aam
sbb
adc
add
and
js
lahf
push
mov
clc
bound
or
pop
ror
das
jp
xchg
jecxz
sbb
lahf
mov
xchg
not
adc
fidiv
pusha
int
mov
add
and
xlat
je
adc
jb
out
int3
pop
retf
or
mov
je
add
aam
fcom
leave
in
xchg
and
cmp
retf
scas
cmps
cmps
sti
jg
and
movs
mov
int
cmps
dec
in
sbb
xlat
(bad)
(bad)
and
fsubp
push
sbb
mov
xchg
scas
test
pop
push
ins
int3
sub
std
inc
mov
mov
les
inc
mov
loop
(bad)
jl
in
and
cld
ror
xlat
pop
sub
cmp
push
fdiv
or
add
jbe
fstp
xchg
sub
dec
idiv
les
add
mov
jns
je
sbb
retf
dec
push
in
add
in
out
dec
rol
xchg
adc
sub
popa
out
in
adc
mov
mov
cli
xor
mov
into
ror
fwait
mov
add
or
or
test
out
push
push
dec
mov
clc
jbe
xor
loope
aas
sahf
adc
in
repz
test
mov
shl
enter
jecxz
pushf
(bad)
push
(bad)
jmp
cmc
adc
nop
aas
test
fadd
dec
sub
jb
aaa
cs
cmp
(bad)
iret
mov
ffreep
data16
aam
retf
pop
dec
sbb
leave
iret
enter
(bad)
mov
in
rcl
lods
fild
cmp
add
push
sti
push
enter
adc
in
sbb
adc
push
xor
js
adc
aaa
lods
ffree
add
jmp
or
cmp
stos
mov
adc
jge
test
and
dec
jp
jmp
or
ja
sahf
sbb
test
(bad)
sub
(bad)
mov
popa
test
adc
(bad)
popf
sbb
rcl
inc
mov
pop
adc
cmp
ret
add
push
adc
lods
mov
jmp
cli
movs
or
aad
adc
in
ret
je
add
sahf
and
in
out
or
jns
inc
sbb
into
adc
jle
xchg
(bad)
hlt
test
ja
mov
pop
lods
int3
xchg
mov
sub
mov
adc
ss
cmp
push
aaa
xor
inc
adc
or
retf
fwait
inc
es
aam
stos
ins
sbb
add
outs
xchg
jp
(bad)
rcr
xor
xor
and
push
je
mov
xchg
pop
pop
push
mov
mov
inc
dec
xor
fldenv
adc
ret
adc
out
daa
mov
push
inc
in
adc
jmp
sar
mov
stos
push
inc
mov
in
hlt
mov
inc
into
push
push
push
sbb
cmp
add
loopne
sbb
or
or
mov
add
xor
sbb
(bad)
loope
mov
mov
cmps
(bad)
pop
sub
fs
fidivr
xor
mov
jmp
ja
sbb
retf
mov
xchg
sub
mov
fild
out
mov
xchg
adc
cmps
adc
and
(bad)
or
stc
dec
sub
sbb
int3
fnsave
retf
inc
cmp
xchg
hlt
or
ret
cmps
int
and
adc
lock
inc
in
mov
out
hlt
sbb
mov
and
push
lock
adc
inc
and
xchg
pop
data16
je
xchg
ficom
(bad)
mov
outs
cmps
ss
jl
cmp
cli
ror
jg
cmp
xchg
std
fdiv
loop
adc
fnstenv
jp
(bad)
sbb
hlt
mov
add
dec
call
sbb
(bad)
imul
lds
dec
or
or
test
push
js
fs
retf
(bad)
push
push
adc
cmp
cmp
dec
cmps
in
arpl
and
push
iret
aam
inc
test
push
and
ja
adc
mov
sub
in
or
adc
jno
sbb
imul
adc
retf
xchg
shl
push
or
idiv
inc
dec
imul
push
pop
je
mov
xor
imul
cmps
mov
xor
lock
cmp
mov
(bad)
test
mov
sbb
das
cmp
xchg
hlt
push
cmc
pushf
adc
(bad)
sbb
jge
jns
add
push
xchg
fisubr
mov
retf
jae
rcr
and
cmps
sub
icebp
aam
xor
sub
sbb
cmc
leave
aam
ins
mov
popa
adc
scas
sbb
int3
or
ins
ds
sbb
call
repz
adc
(bad)
aam
fld
push
(bad)
adc
loope
aad
jno
adc
fsubr
push
int3
aam
test
push
out
fwait
retf
sbb
loope
cmc
xor
je
jno
mov
push
mov
pop
and
call
xor
inc
fisttp
sub
loopne
jne
sub
test
xchg
retf
(bad)
mov
and
and
xor
sbb
adc
in
es
fs
lods
mov
add
inc
push
out
xor
mov
adc
dec
shl
adc
enter
sub
fwait
push
mov
shr
fdiv
push
popf
mov
mov
pop
mov
ins
adc
addr16
adc
mov
push
bound
jp
sbb
adc
icebp
int3
imul
mov
lock
adc
inc
pop
(bad)
iret
into
mov
test
xchg
adc
dec
das
or
adc
xchg
aaa
xlat
lea
adc
sub
mov
push
xchg
fiadd
and
fild
cmc
sti
stc
aas
and
mov
mov
mov
test
sbb
adc
(bad)
lods
rol
out
adc
cmp
ja
popa
cwde
sahf
mov
into
or
out
mov
mov
hlt
add
cdq
mov
xor
cmp
cmp
loope
fs
shr
ss
pop
mov
mov
inc
nop
nop/reserved
aas
rcr
movs
sub
mov
adc
imul
dec
cli
mov
or
ins
sbb
cmps
daa
push
repz
xchg
stos
pop
cmp
push
and
push
sbb
rol
add
enter
xchg
pop
push
pop
mov
and
dec
hlt
and
(bad)
out
and
and
sub
cld
lea
cmp
imul
adc
sub
lock
xchg
xchg
fcomp
ret
mov
pusha
adc
mov
(bad)
shr
aaa
popa
jbe
sahf
or
add
je
cld
test
adc
inc
jmp
outs
test
xchg
aad
inc
ja
cmp
xchg
mov
loop
mov
or
rol
pop
(bad)
icebp
(bad)
clc
cmps
xchg
adc
scas
in
ret
(bad)
lock
sbb
mov
shl
sbb
mov
shl
(bad)
fadd
sub
cli
adc
or
jne
or
xor
dec
repnz
call
hlt
mov
mov
loop
adc
cmp
push
mov
xor
in
scas
imul
test
scas
lahf
pop
mov
aam
aam
inc
mov
xor
addr16
adc
jle
ror
repnz
dec
push
loope
int3
aaa
adc
mov
stc
je
mov
and
adc
sub
outs
xor
(bad)
movs
inc
ins
cmp
aas
(bad)
jg
add
ficom
jp
cmp
retf
mov
fstp
cmps
loop
clc
arpl
and
pop
xor
sbb
retf
fs
and
dec
imul
imul
sbb
imul
mov
jae
cwde
and
int3
(bad)
cmps
nop
adc
sti
mov
out
hlt
inc
pop
xchg
out
pop
jnp
daa
mov
xchg
xchg
xchg
xor
mov
sbb
in
loop
imul
ins
out
icebp
jae
mov
jl
out
pusha
xor
leave
(bad)
in
push
adc
sahf
mov
jno
idiv
jo
stos
test
sar
jmp
icebp
cmp
sub
pop
outs
stos
push
push
mov
mov
add
sahf
cmp
mov
inc
pop
neg
xlat
xchg
imul
mov
in
out
popf
jnp
in
cmc
sbb
mov
clc
adc
into
std
hlt
ins
pop
jo
adc
in
fidiv
ins
and
dec
xor
repnz
push
cmc
adc
jne
sahf
loopne
pushf
and
adc
retf
mov
iret
enter
add
in
ins
ss
xor
or
or
xor
mov
sub
mov
jecxz
mul
(bad)
push
retf
mov
mov
lock
movs
mov
adc
adc
inc
ja
jp
mov
mov
fist
push
xchg
loope
scas
or
fdiv
pop
inc
out
iret
push
push
test
mov
daa
mov
jp
pusha
faddp
push
adc
jne
aam
in
cmp
and
mov
xchg
les
rcr
in
lods
jne
cmp
dec
pop
sbb
jecxz
pop
imul
cli
arpl
dec
pop
inc
and
stc
ja
mov
mov
and
fldln2
loopne
jecxz
push
sbb
scas
hlt
hlt
pop
popf
push
test
scas
or
mov
cwde
inc
jno
out
push
dec
lock
je
jbe
sub
les
mov
cs
aad
pop
mov
adc
loopne
dec
jne
xchg
xchg
sbb
push
mov
out
cmp
and
retf
adc
jmp
mov
mov
pop
sar
xor
movs
and
fs
and
push
push
and
or
pop
fnstcw
adc
adc
mov
push
adc
int
in
push
adc
add
outs
(bad)
xor
adc
inc
add
adc
not
(bad)
push
jecxz
xor
dec
cdq
aad
and
enter
xchg
mov
(bad)
ss
mov
sbb
pushf
pop
movs
aad
lods
adc
mov
mov
add
adc
arpl
das
cdq
cmc
push
xchg
mov
in
jmp
mov
jno
and
leave
and
out
stc
or
xor
sub
ret
cmp
loop
pusha
cld
aaa
or
pusha
popf
dec
call
sbb
test
inc
clc
shl
xor
xchg
jge
fistp
pop
or
jmp
xlat
out
ficom
pop
aam
mov
dec
xor
mov
(bad)
push
out
test
jmp
and
(bad)
mov
cmp
xchg
retf
jb
int3
clc
inc
mov
xchg
leave
lahf
lock
jmp
dec
jns
cs
adc
xor
lods
and
pushf
imul
adc
inc
sub
mov
ficomp
push
jl
cmp
aam
mul
std
adc
in
rcl
inc
hlt
leave
add
pop
xor
dec
jo
xor
sbb
inc
nop
sbb
cmps
add
adc
and
ret
movs
pop
and
push
lods
test
outs
idiv
mov
gs
adc
push
test
jge
adc
jo
push
(bad)
jmp
mov
ss
xor
adc
in
mov
fcom
test
push
rcl
shr
push
push
mov
xchg
and
adc
push
cmp
mov
in
jo
fdivr
outs
lods
adc
pop
and
ja
in
add
(bad)
fsubr
sub
push
aas
dec
cmc
sbb
jb
or
jecxz
ret
add
rol
(bad)
jmp
cld
bnd
add
and
xor
or
js
sbb
das
xchg
(bad)
pop
fwait
retf
xchg
mov
mov
rcr
pop
push
pop
movs
dec
mov
jns
and
jmp
rol
aaa
push
enter
inc
sbb
add
adc
inc
and
jle
xor
push
mov
fisub
cmp
jnp
and
push
iret
movs
xor
push
push
xor
or
ror
add
pop
ret
fcomp
xlat
aam
push
mov
push
xor
fwait
lahf
or
arpl
aam
jns
mov
xlat
scas
pop
fsubr
cli
ja
and
xchg
call
popa
mov
lods
sbb
nop
in
outs
jle
les
je
fisttp
out
adc
lock
pop
mov
cmp
cmps
push
mov
xor
in
adc
imul
sbb
(bad)
aaa
push
mov
jg
sub
xchg
not
cwde
jle
das
jl
adc
ret
shl
add
mov
xchg
mov
outs
mov
jmp
inc
in
or
sub
movs
or
adc
mov
push
pop
mov
retf
sub
out
xor
fisubr
jl
xor
test
call
pop
add
dec
js
push
cmps
mov
adc
jae
repz
(bad)
ror
mov
jmp
sbb
xchg
sub
js
addr16
(bad)
mov
pop
aaa
(bad)
xchg
jle
inc
std
jbe
imul
aas
(bad)
das
jge
fstp
into
cmc
push
cmps
jmp
retf
aad
adc
(bad)
scas
add
int3
mov
call
pushf
call
adc
fist
mov
dec
cs
stos
jmp
lds
xchg
xchg
pop
mov
sub
add
xchg
jg
pop
dec
xor
cmc
adc
movs
pop
fcmovnbe
outs
stc
adc
mov
sbb
xlat
mov
in
dec
cmps
ss
and
mov
adc
icebp
and
jge
mov
sbb
dec
or
adc
lock
pop
push
daa
movs
adc
add
adc
pop
adc
dec
adc
and
fld
xor
fcom
dec
adc
movs
dec
xchg
mov
adc
xor
out
out
iret
mov
push
stc
pop
sbb
mov
mov
jmp
retf
inc
sahf
pop
xchg
mov
pop
fidiv
leave
and
xchg
xchg
or
and
mov
in
jbe
and
or
inc
out
mov
and
popa
adc
bound
xlat
rol
ss
repz
dec
int
movs
add
and
push
ins
rcr
mov
jle
test
adc
jne
lods
push
cmp
adc
adc
sub
jno
pop
adc
mov
cli
sub
ret
test
pop
xchg
push
arpl
sbb
imul
mov
push
mov
inc
push
adc
(bad)
daa
imul
sub
mov
fwait
sbb
test
jge
xchg
or
mov
ror
sti
push
inc
xchg
mov
clc
arpl
jne
jmp
in
repz
and
cmp
jae
je
cmp
push
dec
lds
ret
adc
inc
stos
in
fst
adc
sar
mov
add
shl
loopne
nop
sbb
pop
jb
add
int3
test
adc
test
loope
popa
inc
cs
push
adc
cdq
xchg
sbb
loop
adc
out
mov
int
adc
add
ret
sub
in
add
mov
or
arpl
dec
push
jns
test
mov
imul
adc
les
cli
add
xor
pushf
xchg
hlt
adc
adc
test
and
mov
iret
mov
sbb
rol
sbb
or
mov
mov
sti
adc
sbb
mov
in
xor
cmps
cdq
fsub
loopne
adc
iret
(bad)
and
dec
lahf
and
pushf
ins
test
adc
push
inc
pusha
repz
cmp
lock
sar
and
mov
data16
sar
int
sub
jecxz
adc
pop
loope
clc
cmp
or
int
(bad)
mov
jle
mov
call
push
stos
aam
jl
mov
mov
out
out
lods
sbb
outs
jmp
movs
push
sbb
div
and
push
mov
imul
sbb
in
mov
adc
adc
adc
or
cmps
shl
adc
imul
sahf
and
repnz
or
xchg
push
loop
ins
adc
xchg
cdq
jp
dec
frstor
inc
aam
aaa
add
loopne
or
xor
in
out
push
in
pop
and
sbb
fwait
bound
clc
fisub
pop
dec
fs
(bad)
cli
call
xchg
subps
mov
mov
test
and
loop
adc
add
test
xor
push
push
adc
or
jmp
push
dec
test
popa
adc
out
pop
mov
push
xchg
out
mov
call
dec
jbe
sbb
scas
pop
arpl
loope
jmp
das
adc
fidivr
nop
adc
retf
jae
sti
jbe
jno
in
clc
cmp
cmc
jmp
std
imul
pop
adc
push
xor
and
retf
pop
jae
cs
push
adc
pop
xchg
mov
adc
int
xlat
sub
mov
adc
sub
cmp
popa
pop
pop
inc
lahf
pop
in
and
repz
sub
(bad)
pop
xor
push
stos
shr
pop
inc
(bad)
adc
leave
enter
daa
test
not
std
sbb
push
(bad)
sti
or
adc
dec
push
jb
xchg
call
inc
add
pop
call
rol
jg
pop
push
jge
sahf
iret
into
or
mov
sbb
cmp
mov
or
jl
in
or
sub
add
inc
xor
in
or
pop
ins
stc
cwde
bound
push
jge
add
test
test
leave
test
and
xchg
(bad)
adc
retf
mov
and
pop
push
pusha
sub
mov
leave
push
std
fsub
pop
jmp
inc
mov
adc
add
movs
les
push
adc
(bad)
in
int3
or
ja
mov
cmp
mov
retf
mov
(bad)
lock
jne
mov
adc
outs
pop
add
imul
jb
pop
lods
jae
jae
sbb
cdq
mov
ror
hlt
cmp
loope
in
test
jp
ja
or
push
cmp
and
pop
rcr
ret
frstor
push
jl
inc
xchg
or
xchg
fcomip
cdq
add
adc
push
test
pop
test
pop
sbb
in
xchg
mov
xor
aaa
sbb
mov
adc
jno
fbld
xchg
loopne
fwait
and
xchg
pop
sbb
xchg
and
dec
fs
pop
inc
push
mov
cld
dec
mov
xchg
push
mov
and
imul
ds
hlt
aaa
ret
push
jne
(bad)
div
lods
leave
cmps
pop
xchg
adc
sub
or
jmp
adc
push
cmps
dec
xor
adc
sub
mov
rcl
call
call
xchg
pop
lods
pop
push
inc
imul
inc
pop
cdq
mov
fstp
sar
dec
xor
call
sub
sub
sub
mov
adc
les
mov
sub
clc
sub
mov
cld
in
leave
add
xchg
xchg
inc
daa
adc
adc
jmp
mov
cs
les
pop
loopne
add
arpl
push
fnstenv
adc
add
push
rcr
cmp
pop
add
add
jle
sbb
xchg
sub
add
fs
mov
test
dec
outs
or
mov
pop
ja
xor
out
add
jne
push
fild
adc
scas
mov
sti
dec
pop
int3
push
call
xchg
mov
sbb
jg
jge
into
xor
add
cmps
mov
or
ins
cld
out
adc
scas
fcmovne
popf
je
dec
retf
xchg
ins
ret
add
push
sbb
test
mov
je
mov
xchg
ficom
cmp
call
(bad)
push
jbe
inc
shr
retf
stos
repnz
test
push
les
cmp
xor
xchg
leave
sbb
jecxz
icebp
mov
test
bound
repz
mov
aam
dec
mov
xchg
pop
sub
mov
xchg
ret
jecxz
retf
(bad)
neg
adc
int3
mov
mov
fs
jl
je
pop
xchg
test
cs
mov
shl
call
test
ins
push
fwait
adc
xor
enter
das
sub
lods
adc
ds
dec
mov
dec
jb
mov
jmp
sbb
aam
test
mov
mov
sti
jecxz
mov
xor
shl
(bad)
adc
das
in
mov
add
xchg
xor
xchg
fcom
int
fst
cs
out
mov
ficom
fwait
dec
push
push
mov
xchg
cmp
jb
ss
out
cmp
mov
test
adc
mov
aam
adc
inc
jmp
je
ja
sbb
pop
xchg
dec
mov
ds
and
stc
push
cmp
add
scas
push
aaa
jge
push
jl
adc
pop
xor
ffree
out
mov
adc
push
call
and
mov
add
aas
xlat
vpsrlw
inc
xchg
mov
cmp
iret
ins
(bad)
cmps
or
sahf
mov
adc
mov
xor
(bad)
mov
jbe
test
push
leave
dec
out
adc
sub
sbb
jne
push
pop
(bad)
mov
aam
clc
xor
ja
cmps
hlt
scas
mov
and
jg
push
dec
dec
push
adc
inc
and
lea
xchg
ret
xlat
bound
jo
fwait
xchg
or
mov
int
jecxz
dec
xor
test
push
and
das
pusha
adc
fs
or
push
mov
leave
dec
xchg
cmp
or
push
inc
jmp
mov
ins
adc
sahf
es
sub
adc
(bad)
cld
xchg
in
xchg
fidiv
(bad)
push
call
fcom
adc
ret
dec
ret
mov
mov
call
out
adc
shl
cmps
ja
inc
adc
dec
push
xchg
xor
adc
scas
xchg
inc
mov
adc
add
imul
ss
sbb
inc
rcr
dec
push
xchg
div
pop
dec
adc
or
nop
jg
or
outs
mov
pop
dec
push
or
out
xor
test
mov
ficom
in
aad
and
std
and
out
and
sbb
(bad)
dec
hlt
sub
push
lea
popa
in
pop
nop
retf
out
and
test
test
mov
push
int3
push
adc
stc
jp
xor
(bad)
pop
movs
rcl
sbb
mov
mov
and
ret
push
add
adc
push
pop
mov
sbb
xor
sbb
push
adc
sub
cwde
inc
dec
lds
adc
push
pop
test
ror
outs
pop
in
adc
or
pop
bound
push
(bad)
fld
jecxz
cli
lock
adc
scas
outs
push
pop
sbb
cmp
test
call
push
sbb
fdiv
adc
inc
shl
cmp
adc
xchg
xor
mov
les
fidiv
adc
nop
mov
push
cmp
mov
std
sbb
and
adc
mov
es
jp
xlat
test
xchg
cdq
mov
nop
adc
imul
pop
xchg
hlt
push
aam
mov
daa
in
cmp
arpl
and
cwde
mov
jbe
mov
aaa
hlt
sbb
cmp
mov
out
sbb
add
pop
je
out
inc
fs
daa
push
inc
adc
or
data16
das
in
dec
aam
cmps
stos
and
mov
std
bound
pop
int3
lea
adc
icebp
xor
xor
adc
ficom
pop
js
cli
retf
jo
push
and
jge
movs
adc
mov
mov
adc
adc
and
jnp
sub
test
add
xchg
mov
add
jg
adc
sahf
adc
fadd
dec
push
jbe
rcl
test
movs
cmc
and
out
stc
ror
adc
inc
hlt
dec
nop
je
push
adc
pop
sbb
xor
lods
arpl
lea
dec
sbb
and
jmp
test
jl
adc
popa
push
or
adc
jge
leave
mov
sub
pop
pop
shl
lahf
arpl
hlt
cld
dec
cdq
leave
adc
ret
adc
addr16
andps
inc
jbe
lods
adc
les
stos
xchg
adc
ins
lea
inc
push
dec
cld
idiv
sbb
pop
mov
jmp
(bad)
cmp
inc
sub
jmp
mov
int3
mov
movs
add
fisub
mov
sub
das
adc
out
jmp
rcr
outs
mov
adc
cs
pcmpeqb
mov
ins
popf
(bad)
jge
sub
push
cmps
in
iret
xor
retf
xchg
mov
jno
push
dec
movs
aam
and
sbb
daa
pusha
rol
loope
sbb
inc
jns
xchg
adc
jae
shl
in
pop
lods
ss
jmp
and
adc
pop
inc
call
push
cld
imul
jmp
sbb
stos
mov
pusha
add
repz
cmp
sbb
arpl
in
je
pop
add
mov
cmp
pop
adc
lods
push
sbb
shl
adc
(bad)
nop
add
sbb
rcr
ror
mov
lods
push
push
adc
popf
push
out
call
test
cmc
or
in
xchg
retf
aam
repnz
not
pop
imul
mov
dec
fcmovnbe
mov
and
cmp
or
cld
sbb
jne
cmp
adc
fs
add
dec
rcl
iret
and
loopne
stos
daa
xor
sbb
adc
adc
sbb
das
jmp
sbb
test
sbb
xchg
mov
xchg
jnp
add
int3
fdiv
dec
adc
adc
adc
popf
mov
xchg
mov
outs
adc
cmp
or
adc
scas
sbb
cmp
mov
add
or
add
fistp
bt
sar
fldln2
imul
pop
dec
mov
sbb
inc
mov
jo
mov
ja
mov
push
sbb
pop
dec
cwde
adc
mov
jecxz
shl
(bad)
adc
mov
inc
sbb
cwde
jnp
popa
add
sbb
ficomp
sti
cmps
jmp
retf
xchg
fisttp
je
xor
in
adc
mov
sbb
dec
stos
add
in
dec
pop
jge
xchg
sub
arpl
add
adc
push
cmp
adc
push
lock
je
or
adc
dec
aaa
(bad)
in
xchg
adc
xor
xchg
cmps
je
jbe
push
sbb
push
push
adc
repnz
and
mov
es
add
adc
jno
inc
je
sub
or
push
dec
xor
fiadd
and
std
push
dec
out
xchg
sbb
sbb
pop
and
je
pop
daa
sbb
out
pop
sbb
adc
or
or
das
jmp
retf
xchg
jne
or
mov
cmp
scas
jle
not
outs
aaa
adc
retf
jnp
(bad)
vmovshdup
or
add
jnp
sub
lock
adc
ja
xchg
and
shr
sahf
ret
in
lods
jmp
or
cmp
or
mov
xchg
mov
rol
cld
mov
adc
test
ja
bound
lds
cmps
adc
loopne
sub
sub
cmp
(bad)
jmp
les
adc
mov
add
xchg
int3
mov
mov
mov
or
add
fst
lock
cmp
push
adc
xchg
push
or
iret
and
sbb
adc
movs
and
dec
adc
ffree
add
ja
cmps
enter
xor
ins
bound
int
and
call
and
aam
aam
shr
jnp
outs
mov
jns
popa
dec
out
mov
loop
push
pop
aam
sahf
test
and
and
and
sub
xchg
(bad)
sbb
jl
call
pop
jae
and
call
mov
or
lds
adc
mov
xchg
add
jmp
in
dec
shr
popa
test
mov
fistp
sbb
cmp
enter
adc
test
shl
(bad)
mov
sub
pop
pop
add
test
popf
pop
cs
(bad)
aad
in
test
dec
inc
lds
mov
ja
call
imul
jp
out
xor
xchg
xor
push
sbb
clc
or
stos
mov
inc
adc
gs
jae
sbb
loop
mov
mov
xchg
data16
mov
mov
mov
cmp
xor
ins
fs
push
hlt
mov
mov
push
and
mov
stos
cdq
cmp
in
jnp
stc
addr16
retf
je
dec
xchg
sub
aad
xchg
rcr
xlat
inc
mov
adc
outs
iret
enter
sbb
pop
jne
popf
pop
pop
scas
sbb
add
std
and
sbb
jbe
push
repz
popf
test
mov
add
jmp
xchg
and
adc
pop
pop
adc
inc
in
in
test
call
adc
xor
int3
sub
adc
enter
lock
cmp
push
dec
prefetch
out
ins
loop
xchg
aam
xchg
(bad)
adc
je
cmp
stc
and
in
jge
xor
in
ds
push
in
mov
(bad)
mov
ins
adc
xchg
int3
or
mov
jecxz
mov
add
or
xchg
std
movs
imul
(bad)
lahf
xchg
lahf
int3
int
mov
in
mov
fild
enter
sub
mov
std
xchg
push
call
fs
xchg
xchg
jmp
ins
je
retf
mov
mov
dec
bound
adc
mov
fs
push
test
mov
movs
or
inc
cmps
ins
jbe
mov
les
inc
and
in
inc
sbb
fst
and
xchg
scas
mov
cwde
in
sbb
pop
ins
outs
sub
mov
push
fucomi
xchg
imul
clc
movs
adc
call
adc
out
imul
inc
xchg
sub
dec
push
xor
adc
add
je
pop
movs
dec
fs
fs
rcr
mov
xor
imul
lods
mov
ds
cmp
inc
or
fdivr
mov
ins
push
dec
call
adc
bnd
adc
or
cmps
adc
or
adc
mov
loop
jl
push
aam
aas
adc
sbb
sub
cmp
adc
xor
not
xchg
lahf
pop
push
xchg
sbb
push
sti
ror
adc
mov
es
push
(bad)
scas
xchg
shr
neg
lahf
js
push
jg
ss
jns
or
imul
push
data16
movs
jmp
pop
jne
sbb
inc
fwait
or
dec
sub
mov
sub
jmp
xor
fimul
or
dec
dec
xchg
ret
(bad)
mov
fiadd
sub
sbb
xchg
and
sub
lea
adc
ret
dec
retf
jb
out
adc
push
out
test
lods
test
fstp
ficom
in
jo
loop
in
(bad)
int3
xor
test
lds
push
mov
mov
pop
xchg
and
ins
xchg
xor
rol
das
push
adc
hlt
loopne
mov
mov
in
push
cld
std
leave
popf
clc
mov
(bad)
pushf
hlt
add
shl
fisttp
mov
push
jo
retf
ins
aaa
into
out
xchg
jmp
fistp
push
sbb
and
and
pop
xchg
mov
or
push
mov
cli
aam
(bad)
scas
push
ss
int3
cwde
sbb
xor
movs
out
xor
stos
retf
jo
icebp
mov
fsub
iret
sbb
aam
cmp
scas
fimul
push
add
fprem
inc
adc
sub
jmp
add
mov
inc
mov
movs
ds
cdq
xchg
mov
jmp
mov
or
adc
inc
pop
adc
(bad)
jecxz
sbb
mov
(bad)
and
adc
in
popf
jge
adc
jmp
cmp
push
jecxz
jl
adc
mov
mov
mov
mov
rcr
je
dec
in
jecxz
mov
xchg
xchg
sbb
repz
aad
xchg
nop
jno
(bad)
lock
jne
data16
ins
jnp
and
mov
jbe
pop
sahf
xor
adc
pop
es
xor
jmp
(bad)
xor
sbb
or
sub
sub
adc
fisub
mov
and
fxch
xchg
push
pop
sub
cmps
mov
or
int3
stc
push
cwde
fisttp
sbb
(bad)
in
jmp
repz
sti
aaa
or
jmp
cmps
fdiv
mov
sub
pop
popa
loope
mov
stc
popf
mov
sbb
imul
mov
scas
pop
fidiv
fld
xor
ds
test
test
lods
mov
stos
cdq
leave
mov
mov
sub
sbb
shl
sub
sbb
jo
jne
bound
pop
(bad)
aad
mov
push
fxch
push
sbb
cmp
ror
adc
cli
xchg
push
or
and
push
fwait
mov
mov
repnz
push
int3
adc
cld
cwde
cli
pop
movs
jmp
jmp
inc
sub
pop
lahf
retf
cmc
(bad)
cli
inc
in
popa
daa
dec
mov
sti
push
sbb
ins
and
lahf
aam
lods
out
add
imul
mov
push
and
div
add
sbb
call
inc
in
xor
das
gs
jg
mov
xchg
(bad)
adc
push
(bad)
xchg
mov
add
scas
outs
je
(bad)
fisub
daa
xor
movs
jo
lea
ficom
fcom
add
lods
sub
or
inc
pusha
xchg
cli
mov
dec
adc
xchg
mov
push
pop
inc
mov
ret
cmps
icebp
(bad)
jns
add
sbb
inc
or
cmp
popa
xor
cmp
aas
and
sub
in
sbb
inc
(bad)
outs
scas
push
in
adc
sub
cmp
xchg
jne
adc
mov
adc
dec
mov
add
fsub
data16
and
test
xchg
aad
adc
pushf
jbe
mov
lods
jns
movs
dec
jp
imul
mov
popa
and
xchg
aam
pop
stc
inc
mov
cmp
sti
cdq
mov
adc
ror
imul
test
jmp
pushf
push
retf
mov
or
push
fnstcw
aas
out
push
(bad)
adc
lods
fisttp
outs
sbb
sar
pushf
jl
inc
inc
mov
cld
inc
lahf
jp
or
inc
add
mov
not
cmps
cdq
jns
or
push
sbb
retf
dec
and
sbb
cwde
cmps
cld
das
adc
sbb
mov
sub
cmp
bound
xchg
and
sahf
adc
das
sub
jmp
shl
in
call
jge
pusha
ret
adc
or
inc
retf
and
sbb
aad
mov
movs
adc
pop
test
add
sar
push
loope
pop
fnsave
in
cli
xchg
cmp
dec
mov
mov
test
clc
fdiv
mov
sbb
(bad)
xor
jp
adc
daa
push
or
mov
fldcw
jge
inc
or
fiadd
mov
call
adc
sti
(bad)
imul
je
push
iret
pop
test
inc
nop
sbb
pushf
ds
je
dec
sbb
xchg
xor
mov
mov
mov
mov
in
lods
cmpxchg
hlt
sbb
jbe
xor
retf
adc
sub
aaa
es
enter
lods
cli
not
push
jno
xchg
fmulp
movs
shl
ror
adc
sub
das
adc
xchg
lds
loop
sbb
pop
jo
or
repnz
fwait
add
popf
mov
(bad)
adc
movs
push
shl
xlat
and
cwde
in
call
arpl
mov
jmp
mov
adc
mov
pop
sahf
adc
push
lods
std
fcmovne
mov
cmps
push
rol
lock
jns
xchg
in
push
aad
dec
and
dec
es
jp
add
addr16
repz
bound
sbb
retf
ins
cli
std
test
(bad)
loopne
fsubr
push
dec
add
clc
adc
repz
mov
cmp
xor
push
movups
xchg
aam
dec
rdmsr
pop
dec
jmp
mov
mov
test
(bad)
add
sbb
test
inc
pop
in
mov
adc
push
cld
lock
sub
adc
push
add
in
and
adc
jecxz
and
int3
adc
jg
clc
inc
dec
cdq
jle
xchg
cwde
sub
fdiv
ja
cmc
xchg
jge
adc
int
pop
xchg
lea
retf
icebp
mov
je
sbb
add
pop
(bad)
mov
fldcw
dec
pop
push
adc
sbb
and
mov
out
mov
cmp
repz
data16
adc
inc
jecxz
call
icebp
jbe
adc
mov
in
cmps
push
cmps
call
movs
adc
add
pop
in
dec
mov
mov
inc
into
mov
in
dec
lds
movs
dec
fld
int3
adc
inc
and
test
or
push
clc
ror
shl
sahf
gs
push
adc
test
(bad)
sbb
mov
retf
test
repz
xchg
addr16
fcomp
xlat
loop
loope
pop
es
or
inc
jo
adc
xchg
push
push
xchg
pop
or
or
adc
pop
stos
sbb
aas
int3
sub
push
pop
xlat
mov
test
xchg
or
fdiv
out
adc
ds
add
or
inc
je
iret
add
cmps
sbb
pop
(bad)
adc
mov
inc
cmp
scas
out
fmul
int3
out
into
adc
and
les
mov
dec
aam
lock
xchg
dec
sub
int
or
and
dec
sbb
mov
sub
xchg
sbb
xor
jl
ja
enter
jecxz
inc
pop
pop
fstp
add
jnp
xchg
mov
push
xchg
ins
std
adc
fisttp
mov
(bad)
rcl
inc
aaa
fdivr
adc
sbb
shr
xchg
aam
ret
mov
rcl
fimul
sbb
sbb
pop
lods
and
lods
repz
xchg
adc
jne
mov
adc
call
popf
or
jp
inc
mov
inc
mov
loopne
xchg
or
and
out
test
dec
mov
adc
push
xchg
sub
gs
adc
sbb
stos
mov
cmps
aam
xchg
mov
aad
mov
dec
sbb
sbb
cmp
hlt
test
addr16
out
xchg
dec
xor
cli
ds
and
repnz
mov
mov
sti
add
mov
adc
xor
rcl
fbstp
adc
xchg
jle
lahf
pop
inc
inc
hlt
scas
push
stos
fnsave
pop
fild
test
adc
jmp
pop
xor
mov
sub
bound
in
xor
mov
pop
jle
int
sar
xchg
adc
lods
mov
dec
inc
pop
cld
or
fisttp
fucomi
xor
jg
jmp
xor
add
xlat
jae
fidiv
data16
sti
adc
fbstp
aam
bound
pop
xor
arpl
push
dec
punpckldq
scas
and
scas
sbb
sub
pop
xor
das
xor
test
xchg
jae
imul
lock
int3
mov
sbb
mov
mov
mov
add
dec
mov
data16
std
cmp
retf
cdq
fdiv
mov
and
add
inc
fsubp
cmp
inc
aam
and
add
inc
cdq
adc
clc
adc
mov
movs
popa
adc
dec
mov
inc
test
adc
adc
fidivr
cli
int3
adc
sub
mov
nop
cmp
jl
dec
inc
mov
(bad)
sub
adc
jmp
adc
call
mov
aam
popa
push
xchg
movs
mov
dec
adc
mov
aam
push
add
push
sbb
xor
pop
arpl
jg
lds
mov
push
outs
stc
or
pop
mov
sub
push
mov
cmp
cmp
add
scas
scas
and
repz
add
cmp
sub
jne
fisttp
adc
pushf
imul
retf
jecxz
inc
jae
add
mov
and
enter
fild
cmps
mov
aam
jl
lahf
aad
mov
enter
xchg
mov
mov
adc
out
scas
aad
push
add
retf
jmp
adc
pop
dec
and
or
pop
xor
sub
loopne
sub
push
xor
imul
adc
scas
sbb
mov
cmps
adc
xchg
push
push
outs
into
in
adc
inc
test
jno
jl
jmp
dec
imul
(bad)
adc
mov
gs
aad
or
xor
jmp
inc
enter
add
dec
mov
jecxz
in
jg
push
adc
popa
inc
push
neg
mov
adc
sub
movs
aas
arpl
out
popf
call
dec
shr
sub
and
xchg
cmp
std
adc
(bad)
lds
sbb
push
lods
mov
mov
out
arpl
adc
out
lods
push
(bad)
jmp
mov
xchg
out
add
fisubr
xchg
fidivr
adc
mov
dec
js
outs
sahf
jle
idiv
jne
int
adc
xchg
xchg
sets
lahf
enter
and
ins
inc
xor
and
loope
idiv
pop
xchg
mov
adc
mov
pop
aam
pop
mov
mov
in
cmp
mov
mov
not
cvtps2pd
inc
jecxz
sbb
cmp
jo
fistp
test
out
test
push
out
cmp
jmp
movs
int3
xchg
pusha
cmp
xor
push
cwde
adc
or
gs
adc
jno
xlat
mov
and
xor
mov
icebp
lahf
out
shl
or
adc
loope
mov
adc
lods
rcr
adc
and
mov
add
out
inc
aam
(bad)
js
dec
test
aaa
cmovp
sbb
(bad)
mov
in
lock
es
pop
retf
xor
xchg
sub
pusha
(bad)
movs
in
enter
adc
dec
add
cwde
aaa
(bad)
jb
adc
sbb
adc
jp
scas
push
xor
retf
mov
les
jnp
adc
int3
adc
inc
push
sub
retf
or
push
adc
and
daa
pop
lahf
pop
mov
(bad)
push
cmc
pop
mov
sti
adc
retf
dec
sub
cmp
inc
mov
(bad)
int
mov
mov
out
sbb
mov
xchg
rcl
adc
daa
xchg
repz
or
add
dec
cmc
mov
test
daa
stos
mov
adc
mov
push
movs
jb
nop
shr
pushf
sar
mov
xchg
jb
add
sbb
aam
in
jl
mov
push
outs
fisubr
js
adc
xlat
xchg
call
popf
fcomp
xchg
jmp
pop
mov
sar
mov
jns
inc
icebp
push
pop
xor
sub
outs
rcl
inc
add
mov
cs
retf
push
dec
mov
fld
adc
mov
inc
rcl
mov
neg
je
add
in
ficom
rol
mov
xchg
and
pop
mov
jg
arpl
imul
xor
xor
cmp
add
ret
inc
js
adc
test
and
clc
bound
popa
lds
jp
in
xchg
aas
or
push
loope
lahf
adc
cmps
call
out
lds
repnz
test
cmp
adc
ins
in
and
adc
xchg
test
sub
cmp
int3
and
sub
sub
mov
mov
jp
das
sbb
pop
inc
imul
mov
mov
or
or
lea
or
dec
and
adc
fiadd
leave
adc
loopne
inc
sbb
push
or
dec
adc
push
shl
jle
jmp
adc
sar
adc
hlt
pop
mov
call
aaa
aam
mov
adc
outs
mov
jne
xlat
adc
lahf
mov
data16
out
adc
call
(bad)
dec
aaa
pop
je
out
sub
cmp
mov
adc
(bad)
sbb
nop
cwde
jbe
in
fcomip
stc
mov
pop
outs
pop
add
lods
clc
and
sbb
adc
pushf
ss
push
add
es
or
mov
and
adc
pusha
and
mov
sub
cmp
je
out
popa
outs
adc
stos
movs
dec
adc
call
dec
xor
and
push
mov
repz
mov
adc
mov
jmp
sbb
mov
xchg
xchg
stc
pop
test
not
je
jmp
jl
jmp
jnp
jb
leave
add
in
push
in
(bad)
pop
mov
lock
out
push
movs
mov
pop
and
or
pop
rcl
fmul
xor
xchg
adc
xchg
xchg
mul
cmp
adc
push
cmp
scas
inc
push
in
pop
ins
movs
je
dec
adc
scas
inc
cld
sar
retf
cmps
push
call
aam
or
push
cmc
mov
and
mov
call
test
sar
inc
into
mov
or
in
mov
int3
xlat
sbb
js
lds
hlt
xor
fidiv
cdq
pop
in
or
scas
jecxz
mov
sbb
mov
cmp
retf
push
retf
jnp
repnz
inc
cmp
add
test
jmp
pop
mov
mov
lds
movs
mov
sbb
inc
in
add
test
push
push
xor
push
repz
xor
retf
push
loopne
pop
jmp
push
xchg
dec
imul
jne
pop
sar
daa
or
adc
or
clc
mov
mov
push
jl
adc
jg
sar
cmps
rcr
mov
xchg
cmp
shl
pusha
adc
leave
iret
jmp
jp
inc
inc
push
hlt
mov
push
rcl
iret
ficom
jl
(bad)
lods
xor
push
cmp
xor
out
scas
adc
sub
les
aam
out
adc
xchg
push
test
sbb
cwde
adc
jo
cmp
sbb
pop
stos
imul
pop
mov
xor
mov
sub
(bad)
out
in
mov
sbb
fcom
rcr
sbb
es
jb
aam
mov
or
pop
mov
es
cmps
shl
fdivr
adc
loope
xlat
pop
ds
adc
adc
mov
hlt
cdq
sti
jmp
test
push
push
push
push
ja
fsub
adc
sub
mov
adc
and
cld
frstor
xchg
jmp
loope
enter
repz
into
dec
dec
push
pop
call
cdq
cld
pop
mov
(bad)
in
test
pop
push
dec
adc
ror
xor
stc
movs
imul
pop
sbb
inc
add
sub
or
imul
shr
sub
cld
push
mov
(bad)
rcl
(bad)
aad
rcl
jae
in
pop
hlt
ds
or
mov
mov
loope
cmps
mov
fadd
pop
hlt
pop
movs
ret
test
lock
out
adc
icebp
xor
mov
push
add
lods
idiv
ja
or
and
add
xchg
push
lods
jo
cmp
add
arpl
jb
mov
(bad)
popa
mov
(bad)
xchg
cmps
std
jno
icebp
and
pop
cmp
fwait
xor
add
push
mov
std
lods
imul
fyl2xp1
pop
add
mov
frstor
xor
xchg
pushf
pop
shl
mov
jmp
ss
ja
iret
or
sbb
mov
imul
jmp
int3
pop
mov
clc
push
or
out
dec
jp
shr
lods
sub
push
and
adc
mov
xor
adc
add
fisub
shl
ja
cmp
push
movs
fld
and
adc
sub
cmc
iret
call
call
aam
push
adc
dec
lock
dec
adc
int3
and
mov
add
add
mov
push
lock
mov
adc
dec
clc
js
aam
ficom
pop
jnp
add
stos
cli
fcomp
test
sbb
jne
jg
test
leave
addr16
add
adc
icebp
imul
xor
fldenv
sbb
js
stc
(bad)
lods
dec
push
cs
push
test
fisttp
aas
fiadd
ror
mov
(bad)
add
xchg
pop
ja
pop
lods
sub
adc
lds
adc
retf
add
loope
and
adc
inc
je
sbb
cld
and
jl
sbb
ds
add
jp
pusha
mov
adc
lods
das
xor
daa
fisubr
aam
or
test
lods
addr16
adc
jnp
mov
add
retfw
xchg
inc
xchg
cmp
jecxz
jb
test
mov
push
mov
outs
repnz
jg
pop
test
cmp
test
mov
or
ret
adc
sahf
sbb
lods
stos
arpl
mov
cmp
cld
sbb
dec
mov
jbe
jmp
fs
adc
jp
xor
in
xchg
cli
adc
mul
sbb
pop
push
(bad)
ja
test
push
sub
jle
out
jno
fdiv
dec
pop
je
adc
mov
movs
jbe
jae
cmp
sub
pop
jo
adc
fistp
adc
adc
inc
inc
cmp
push
xchg
lods
push
xchg
mov
not
ins
mov
xor
xchg
cs
sbb
dec
ss
xchg
pop
sub
cmp
xchg
ret
das
lea
or
xchg
(bad)
adc
pop
jae
loope
pop
gs
jge
push
jno
jp
jmp
mov
pop
and
dec
arpl
add
int3
shl
(bad)
jle
adc
(bad)
fdiv
into
inc
sbb
retf
push
addr16
sbb
aaa
adc
clc
or
icebp
sub
jge
cmps
nop
jb
int3
into
and
adc
into
sahf
sub
inc
imul
jmp
adc
outs
pop
add
or
add
loope
call
adc
mov
sti
dec
sub
int
int3
mov
std
fnsave
(bad)
and
mov
ficomp
sahf
mov
inc
xchg
retf
dec
xor
pop
lahf
or
pop
push
jmp
xchg
inc
ins
or
pusha
xchg
sbb
arpl
mov
hlt
test
cmp
add
ficom
push
and
movs
dec
pop
hlt
ret
shl
in
mov
fsubr
in
in
dec
sub
xchg
ror
(bad)
sbb
dec
(bad)
call
or
mov
sub
cli
cs
loope
data16
inc
push
pop
call
out
push
in
lock
aaa
jbe
hlt
sub
push
adc
shr
adc
test
movs
rol
fs
sbb
in
cmp
xor
and
push
bound
sbb
push
adc
jmp
stc
inc
fwait
sub
xor
stos
dec
adc
push
jmp
ficom
call
aam
push
cmp
out
cli
push
sahf
cmps
stos
icebp
mov
inc
or
in
dec
clc
pop
jmp
or
ret
lahf
pop
rcr
fs
mov
push
in
xchg
push
dec
imul
loope
jmp
mov
(bad)
sub
mov
xlat
sbb
in
dec
stc
xor
repz
dec
cmps
or
sbb
int
push
daa
test
sti
mov
xchg
aaa
pop
sti
call
add
pop
xchg
or
push
push
repnz
lods
dec
js
in
adc
adc
or
sub
stos
xor
je
test
push
cmp
xchg
cmc
jo
je
movs
push
sub
or
imul
mov
shl
fimul
fnstenv
or
retf
xchg
aad
mov
imul
cmp
cmp
aas
xor
(bad)
mov
cmp
scas
std
pushf
cdq
lock
enter
dec
std
popa
mov
stos
sysenter
xchg
cld
jle
shr
xchg
dec
repz
int3
imul
jne
cmc
inc
push
xor
mov
xor
xchg
movs
in
fiadd
xchg
stc
icebp
aas
dec
push
inc
sbb
icebp
stos
nop
(bad)
(bad)
push
push
and
loop
out
les
mov
xchg
leave
mov
sbb
cld
loop
out
scas
stos
mov
(bad)
retf
pop
out
out
push
movs
adc
add
fild
push
inc
mov
dec
pop
js
frstor
mov
mov
adc
rol
and
in
sbb
repnz
and
je
fcom
mov
add
mov
xchg
adc
icebp
popa
fidiv
loopne
add
pop
mov
xchg
loop
ficom
pop
into
(bad)
ret
sbb
retf
dec
and
int3
add
dec
adc
les
popf
and
adc
nop
pop
dec
hlt
aam
or
fild
mov
add
adc
loopne
in
pop
jl
outs
sbb
adc
cmc
adc
pop
in
pop
sub
add
test
cli
sbb
dec
in
outs
adc
jno
or
mov
xor
adc
(bad)
fbld
add
pop
psrlq
pop
add
adc
mov
popa
inc
mov
or
cmp
xchg
mov
mov
adc
aam
repz
(bad)
push
test
ret
cmc
mov
mov
loop
push
les
jo
aas
stos
sub
xor
clc
(bad)
adc
imul
or
jne
cmp
adc
add
test
mov
lea
aaa
les
cmp
daa
push
pop
adc
xchg
mov
cmps
lods
jmp
adc
shl
stos
es
adc
xor
sti
pop
dec
hlt
es
adc
(bad)
dec
mov
lea
adc
movs
outs
repnz
lods
sub
xor
out
(bad)
inc
sti
mov
mov
mov
imul
pop
cmp
mov
mov
adc
rcl
and
xchg
jno
nop
call
das
cli
mov
cmp
imul
inc
inc
inc
nop
xor
xchg
test
loopne
inc
jmp
sbb
icebp
jp
xchg
sbb
xchg
sti
cmp
clc
call
div
jmp
fwait
xor
add
mov
pop
adc
push
test
pop
out
addr16
inc
inc
in
cmc
sbb
mov
push
xchg
xor
cmp
sub
out
jne
int
not
adc
(bad)
xor
xchg
xlat
inc
sar
sbb
dec
je
pop
adc
push
sti
jmp
adc
jo
cmps
mov
sub
movs
or
xchg
inc
pop
cmp
fadd
mov
test
add
into
and
inc
dec
repz
arpl
stc
(bad)
stos
push
sub
lock
jp
loope
xor
cmp
jmp
rol
aad
into
shl
dec
xor
adc
fld
loope
sub
mov
xchg
outs
cmp
sub
cmp
int
popa
push
test
jmp
mov
cmc
mov
push
add
dec
adc
aam
and
hlt
call
mov
cmp
pusha
xchg
cld
das
stos
out
into
mov
sbb
adc
popa
imul
adc
mov
sbb
adc
into
add
mov
cmc
lahf
aad
jnp
(bad)
push
sub
jmp
out
ds
add
adc
pop
inc
les
into
mov
mov
rcl
scas
mov
mov
test
call
push
mov
xchg
adc
repnz
push
xchg
push
push
adc
sbb
mov
popa
mov
mov
mov
int3
rcl
cmp
cmps
repnz
adc
lods
xchg
dec
pop
loop
arpl
leave
jmp
jno
xchg
retf
rcr
sbb
loop
jmp
arpl
adc
mov
and
and
cld
out
push
adc
popa
movs
sub
inc
adc
sti
dec
jnp
arpl
jmp
fcomp
adc
dec
outs
(bad)
jmp
mov
xor
out
mov
cld
jecxz
(bad)
push
sti
pop
mov
lock
(bad)
mov
xchg
or
mov
bound
stos
int3
mov
lahf
push
sbb
adc
sahf
(bad)
int3
(bad)
fisub
je
fld
add
xor
retf
outs
mov
test
push
cmp
push
shl
push
call
dec
jne
push
adc
(bad)
in
pop
inc
mov
xchg
mov
fsub
or
lods
loope
dec
push
ins
push
add
xor
or
scas
shl
ret
adc
out
inc
or
in
or
es
push
adc
inc
add
push
inc
dec
sbb
call
mov
cmp
or
jge
pop
stos
(bad)
xchg
xor
push
adc
fld
(bad)
dec
mov
xchg
(bad)
stos
sbb
pop
addr16
pop
sar
sub
mov
jae
retf
aas
xchg
in
cli
lods
adc
int
out
sahf
in
cld
push
sbb
data16
push
inc
mov
retf
ss
and
sar
scas
lock
pop
sbb
stos
push
pop
cdq
test
jmp
cmp
fstp
sub
imul
dec
sbb
pop
(bad)
scas
push
sbb
jmp
test
sub
retf
leave
xor
out
js
or
bound
mov
iret
sub
dec
jae
movs
loope
rcr
xchg
inc
fild
or
xor
out
fsub
xchg
sub
stos
and
mov
cmp
in
std
ret
add
adc
(bad)
dec
and
mul
xor
ss
add
(bad)
mov
arpl
xor
lock
push
lods
inc
into
adc
aaa
les
pushf
movs
jle
jg
sbb
repz
pop
sbb
jo
(bad)
sbb
mov
jnp
hlt
cmc
(bad)
arpl
scas
mov
xchg
adc
rol
lock
mov
or
aam
sar
cs
jo
xchg
adc
cmp
(bad)
cdq
adc
adc
ret
mov
les
cmp
adc
push
ds
pop
xchg
cmc
push
cmp
sar
fwait
sub
sub
or
ror
adc
addr16
cli
cwde
adc
or
lahf
mov
pop
ja
mov
rcl
cld
test
dec
push
sti
cli
arpl
dec
xlat
adc
push
pop
ss
lock
mov
cli
cmp
and
test
imul
cld
and
dec
icebp
sub
adc
shl
xlat
mov
cmp
out
fistp
jecxz
out
pop
pushf
outs
arpl
sub
das
out
pop
fdiv
push
int3
aad
adc
mov
in
xchg
imul
mov
pop
adc
mov
push
push
adc
test
push
mov
mov
ss
int3
ficom
mov
out
add
adc
push
adc
sbb
outs
adc
jbe
lods
cmp
cli
movlps
pop
scas
xchg
xor
hlt
leave
adc
jno
dec
sub
in
adc
mov
push
std
push
addr16
out
sub
(bad)
push
xor
dec
push
adc
push
movs
lock
mov
retf
cdq
lds
aaa
or
pop
fwait
jg
hlt
adc
fld
add
adc
lock
push
adc
dec
add
addr16
in
dec
fidiv
adc
addr16
std
sbb
in
adc
test
xchg
adc
adc
sub
outs
js
loope
push
sar
call
push
and
inc
in
scas
call
pop
gs
sub
outs
push
pop
mov
jmp
rcl
out
ss
lods
test
repz
dec
imul
popf
mov
ins
lock
pop
and
pop
int3
neg
mov
es
dec
cdq
repnz
jge
cld
mov
test
int
sbb
sbb
fdivr
push
push
les
adc
mov
out
mov
add
xor
mov
mov
cmp
out
jne
stc
add
dec
lds
lods
cmc
outs
xchg
sar
pop
pop
inc
sbb
jbe
push
stos
jmp
mov
das
sbb
mov
inc
cwde
dec
lods
(bad)
in
inc
jb
fcomp
mov
sub
mov
adc
mov
(bad)
dec
in
xchg
adc
sub
(bad)
retf
mov
jnp
adc
push
xchg
adc
adc
lahf
jg
cmp
cli
add
inc
into
stos
hlt
es
mov
lods
mov
imul
sub
xchg
jb
mov
rcl
ror
sbb
out
jbe
aam
sahf
and
cmp
mov
mov
mov
push
xor
stc
pusha
add
icebp
dec
xchg
sbb
ret
adc
in
inc
fcom
cmps
or
push
jae
cld
(bad)
ror
push
mov
adc
sub
sbb
fcom
pushf
inc
into
push
out
sub
inc
mov
test
push
neg
aam
pop
fdivr
mov
js
cmp
pop
sbb
inc
adc
cmp
out
inc
adc
add
add
and
adc
mov
repz
mov
aas
sbb
ins
sbb
(bad)
or
sbb
push
mov
je
sar
arpl
jmp
jae
sbb
and
outs
int3
adc
pushf
cs
imul
stc
enter
mov
dec
lds
pop
add
pusha
push
pushw
sbb
les
mov
ror
jae
scas
add
ret
fst
loop
pop
xchg
call
stos
lods
xchg
(bad)
pop
adc
pop
jb
mov
and
xor
jo
xchg
mov
mov
jmp
aas
jmp
pop
add
(bad)
sbb
test
ret
adc
and
sbb
and
add
push
adc
call
pop
fdivr
cmps
daa
pusha
xchg
sbb
mov
sbb
jbe
lods
jb
xchg
xchg
jge
or
dec
inc
ret
sub
pop
popa
aad
mov
dec
pop
(bad)
xor
les
adc
aad
sbb
dec
sub
ficom
shl
adc
dec
mov
add
mov
fs
cmp
pop
cmovs
and
jg
pop
adc
loop
pop
jl
adc
add
jge
xor
sbb
xchg
or
int3
dec
jne
in
inc
aam
imul
inc
loope
mov
inc
inc
out
test
adc
lahf
pop
push
loopne
neg
push
ins
dec
pop
xchg
xchg
scas
cmp
adc
xor
xor
mov
addr16
and
into
mov
int3
ror
jbe
xchg
xchg
jle
adc
movs
jp
int3
and
sub
(bad)
push
(bad)
ss
enter
adc
push
xor
cmp
adc
hlt
push
out
arpl
inc
shr
loopne
dec
inc
mov
cmp
xchg
mov
push
sbb
adc
pop
outs
ja
mov
rcr
jo
dec
sub
inc
adc
cli
data16
pop
mov
and
imul
adc
or
nop
fcmovbe
outs
popa
fs
or
addr16
jbe
sti
sbb
inc
sbb
cmc
int
xchg
cs
adc
and
sub
mov
adc
cmc
ror
xor
imul
clc
adc
adc
xchg
push
in
dec
adc
xor
xor
sbb
(bad)
or
hlt
adc
adc
adc
lods
mov
xor
cmp
or
dec
sub
clc
cld
jbe
rcl
jae
mov
sub
dec
or
aas
into
inc
in
hlt
data16
adc
xor
and
popf
sbb
hlt
popf
adc
jge
cmp
imul
js
shr
push
aad
xor
or
les
adc
nop
pop
xchg
fsubp
ins
jbe
or
cs
adc
int
dec
sbb
aam
ficomp
daa
inc
repnz
xchg
adc
es
cmp
out
jnp
pop
arpl
icebp
add
mov
push
cli
adc
xchg
mov
add
jp
je
in
inc
add
mov
fstp
lds
fsave
in
daa
in
xchg
sub
xor
xor
or
mov
adc
outs
push
jmp
adc
(bad)
jb
push
dec
push
in
cmps
push
mov
arpl
(bad)
cdq
lods
lea
adc
jno
sub
cmp
inc
sub
pop
pop
aad
pop
add
mov
push
jmp
sub
aad
sar
(bad)
cli
mov
cmc
push
dec
lahf
adc
out
push
pop
jp
xchg
fld
push
hlt
(bad)
sbb
mov
imul
aam
pop
cmp
jnp
test
dec
hlt
inc
push
xchg
frstpm(287
sub
ja
xchg
push
sbb
mov
xor
int3
sub
push
fs
cmps
adc
pop
and
add
push
mov
mov
cmp
sbb
(bad)
push
push
test
xchg
cld
fisub
unpcklps
adc
sti
(bad)
addr16
adc
adc
mov
daa
rcr
(bad)
xlat
xchg
cmp
push
xchg
jge
jmp
add
or
sub
push
xchg
sbb
adc
imul
xchg
jg
fist
imul
aaa
cld
cmc
sahf
or
sbb
jnp
leave
in
adc
and
xchg
out
dec
pop
movs
mov
or
sbb
aam
xchg
sbb
dec
jbe
cmp
out
sbb
(bad)
push
jb
sti
xchg
and
aas
aad
daa
ror
cwde
in
mov
mov
pop
mov
adc
lock
out
jno
and
adc
cmps
out
ja
mov
retf
xor
cdq
jmp
test
out
dec
sbb
loope
push
cmp
xchg
rol
ins
call
and
jg
xchg
fnsave
dec
not
mov
or
pop
jle
push
pop
das
pop
ins
adc
add
retf
add
into
int3
mov
jge
push
mov
xchg
repnz
fwait
ret
adc
into
cmps
mov
pushf
(bad)
mov
pop
mov
or
mov
or
xor
mov
cmp
dec
mov
adc
add
inc
and
pop
add
xor
sbb
jmp
sbb
jb
mov
lea
mov
(bad)
dec
mov
sbb
xchg
cdq
popa
mov
adc
sti
jne
mov
jnp
adc
push
cwde
push
xor
cmp
sbb
or
aad
pop
hlt
pusha
sub
or
push
sbb
sbb
add
push
div
test
jge
call
xlat
pop
not
sbb
sub
mov
in
hlt
add
cdq
sti
push
cld
shl
xchg
jecxz
xchg
out
aad
add
xor
retf
push
ficom
shr
xchg
mov
pop
dec
and
fbstp
js
mov
cmp
out
ror
mov
jg
xor
cwde
jb
adc
and
mov
push
loop
pop
or
adc
clc
mov
cmps
add
adc
cmp
cmp
cmps
and
and
mov
movs
adc
lods
retf
and
pop
mov
jbe
enter
adc
fadd
pop
and
push
hlt
popf
push
out
hlt
loop
adc
mov
aas
push
and
dec
in
adc
push
rol
out
pop
sbb
inc
arpl
adc
(bad)
sub
enter
pop
mov
add
dec
add
ret
call
mov
pandn
push
shl
cli
fidiv
loope
cmc
fstp
mov
push
add
fs
pop
inc
(bad)
(bad)
mov
movs
popa
sub
aam
fidivr
cmps
adc
aam
(bad)
ins
push
fsubr
mov
ja
sti
test
loope
sbb
push
mov
pushf
icebp
jae
fsub
jnp
call
lea
pop
xchg
push
adc
sbb
cmp
ja
addr16
neg
adc
jne
xor
sub
lahf
pop
ins
jae
mov
xchg
dec
mov
pop
adc
push
ret
adc
push
jg
dec
xchg
and
es
out
jmp
pop
cmp
xlat
adc
imul
inc
stc
sbb
cmp
xchg
mov
jl
and
mov
scas
adc
sub
jecxz
test
int3
rol
jne
adc
jns
inc
mov
pop
cli
cld
adc
cmp
mov
add
push
inc
scas
(bad)
xchg
pop
aam
jl
cmc
fwait
mov
ss
hlt
iret
sti
or
sbb
pushf
jbe
pop
jo
outs
mov
adc
aaa
lods
and
adc
and
mov
psubb
push
xchg
sbb
push
mov
fs
in
cld
jbe
adc
xchg
sub
sbb
js
aam
push
lea
fs
out
loopne
psubd
adc
stos
leave
lahf
adc
jl
push
pop
xor
hlt
test
adc
jg
mov
xor
movs
cmp
add
and
cmp
gs
sbb
daa
es
mov
les
aas
sti
pop
adc
cmp
mov
aam
pop
jno
push
inc
out
mov
clc
push
mov
jae
sbb
arpl
cmp
mov
jp
and
dec
out
xchg
mov
cmps
addr16
mov
dec
sub
test
adc
jl
(bad)
xchg
daa
sbb
adc
fwait
pop
dec
jne
out
sbb
adc
arpl
adc
push
sbb
mov
add
jns
and
xchg
add
sub
hlt
dec
jl
das
sub
cmp
lock
sub
push
adc
mov
jo
xchg
neg
lock
out
or
je
jl
adc
mov
dec
dec
xchg
jl
sti
jp
out
inc
out
movs
sub
jb
fdiv
outs
mov
adc
cld
cdq
adc
xor
mov
or
adc
fwait
aaa
sub
arpl
test
adc
(bad)
iret
mov
sbb
mov
fucomip
fstp
jmp
and
test
ins
clc
add
adc
or
mov
mov
jg
adc
fisttp
aam
push
outs
cmps
pushf
sbb
mov
mov
xor
add
jmp
call
and
pop
test
(bad)
lock
jge
xchg
inc
ins
stos
in
mov
scas
adc
or
(bad)
mov
shl
lock
adc
lock
ss
ret
pop
xlat
adc
jmp
adc
jb
shl
fs
pop
or
jae
mov
xchg
xchg
sub
xor
sti
call
xchg
fld
loope
push
gs
pop
fwait
adc
cdq
ficomp
in
sub
out
fdiv
add
adc
mov
xchg
ins
adc
(bad)
mov
(bad)
xchg
adc
fcomp
xlat
ficom
mov
adc
xor
or
cli
cmps
adc
mov
mov
arpl
jnp
sbb
dec
popf
iret
cld
push
and
xchg
adc
inc
sbb
mov
fadd
push
je
das
outs
jae
sub
jge
dec
ss
pusha
adc
inc
inc
add
jbe
fist
push
sbb
adc
fxch
mov
and
lahf
(bad)
outs
js
and
scas
fistp
add
fucomip
dec
jbe
jge
psrlq
out
repnz
ss
aas
jmp
das
xchg
neg
jg
mov
loopne
adc
mov
add
push
data16
mov
movs
and
dec
xor
ret
xchg
nop
ins
cdq
or
test
and
xor
mov
jl
or
jbe
sbb
aad
retf
out
sbb
mov
ja
test
fistp
pop
cmp
mov
sub
cli
in
inc
stos
mov
push
adc
bound
loopne
mov
or
test
stc
pop
push
xchg
xchg
cwde
mov
cmps
xor
setns
arpl
mov
adc
mov
push
dec
and
push
mov
popa
(bad)
gs
ss
xchg
fild
or
hlt
adc
das
pop
in
xchg
repz
adc
cdq
add
loope
mov
cli
add
gs
xor
lds
cmp
and
fmul
xchg
cwde
jmp
mov
push
jmp
test
xchg
adc
(bad)
stos
jnp
cmp
ds
imul
lods
daa
int3
adc
es
out
mov
pop
lods
add
mov
ss
leave
adc
and
scas
fabs
bound
xchg
inc
lahf
nop
cmp
test
xor
add
cs
mov
sub
outs
lea
rcl
int3
icebp
ret
out
adc
popa
dec
dec
lahf
sub
aas
out
retf
les
xchg
cmps
dec
adc
lock
sbb
jno
jmp
and
bound
jmp
mov
daa
pusha
mov
out
(bad)
scas
jnp
jg
rcl
stos
xor
sub
imul
lock
inc
pop
jmp
out
and
popa
jg
mov
push
push
pop
mov
lahf
ins
sub
xor
xchg
das
mov
xor
jmp
rol
lods
fisub
xchg
fstp
call
dec
hlt
xchg
cmp
int3
shl
ja
in
adc
icebp
outs
imul
inc
mov
sub
mov
push
sbb
imul
loopne
lods
shr
outs
adc
das
mov
pop
adc
xor
push
push
xchg
push
pop
and
hlt
cld
inc
adc
(bad)
shl
add
(bad)
push
in
dec
jmp
cld
loope
das
cmp
cmp
pop
sbb
adc
add
scas
and
outs
repz
push
leave
jmp
dec
dec
xor
adc
mov
lods
pop
(bad)
cmps
cmp
inc
test
mov
adc
cmp
xchg
jmp
daa
cmp
adc
pusha
les
je
xchg
xchg
ror
xor
push
(bad)
into
fbld
retf
or
cmp
sahf
iret
dec
lods
repnz
sub
push
popa
lea
xchg
inc
sub
jle
cs
ins
repnz
jno
adc
fwait
and
iret
mov
je
mov
es
call
imul
inc
mov
outs
adc
test
fist
imul
cmps
std
inc
and
outs
jp
das
out
inc
adc
mov
mov
in
pop
fs
lock
dec
add
sub
xor
adc
test
imul
adc
xchg
mov
mov
leave
adc
icebp
fsubr
sbb
lahf
push
jl
les
xor
iret
or
jno
adc
lea
les
outs
test
cwde
pop
fsubr
mov
adc
(bad)
xor
out
out
adc
add
or
ret
pop
adc
repz
popf
adc
push
out
sub
lods
sbb
sub
push
inc
sub
lock
sbb
les
and
push
stos
mov
jae
xchg
dec
push
outs
mov
mov
pop
mov
dec
push
add
cli
cmp
xchg
adc
sub
cs
pop
ss
aas
mov
fistp
and
pop
jg
mov
add
jne
sbb
test
aas
pop
addr16
adc
jo
push
(bad)
jg
fadd
jno
(bad)
es
out
sub
xor
sbb
xchg
xchg
ds
jne
ret
pop
push
stos
lock
xchg
and
xor
adc
add
retf
icebp
aam
sbb
arpl
mov
adc
in
cmps
inc
inc
(bad)
xchg
mov
mov
movs
adc
les
icebp
mov
pop
fcmovnbe
adc
adc
out
mov
xchg
shl
adc
sub
inc
(bad)
in
test
mov
lods
inc
jge
out
sub
or
sub
add
mov
jmp
jno
and
das
stc
out
je
push
adc
imul
inc
lods
xchg
sbb
iret
jg
scas
sub
jae
adc
xchg
es
shl
rcpps
dec
xchg
and
mov
push
adc
clc
xchg
pop
adc
adc
sub
arpl
ror
fiadd
hlt
retf
outs
shr
cmp
sbb
xor
adc
push
shl
dec
sbb
xchg
ins
in
lahf
imul
sbb
rcr
add
fldenv
sub
jecxz
push
ins
out
mov
data16
and
pop
adc
(bad)
or
push
xor
adc
and
pop
js
loopne
jns
mov
daa
scas
mov
pop
add
inc
cmp
and
adc
fscale
adc
lock
movs
xor
cld
jecxz
xor
mov
inc
inc
or
adc
out
mov
push
xchg
or
repnz
inc
int
fild
inc
sub
cld
mov
mov
nop
call
stos
inc
pop
fsub
pop
ret
icebp
adc
aas
or
scas
cmp
mov
je
mov
movs
jmp
adc
xchg
push
out
cmc
into
jle
jno
test
adc
pop
fnstcw
in
in
xchg
add
std
sti
push
stc
rol
shl
enter
mov
test
adc
cmp
(bad)
ret
dec
gs
aam
mov
push
xor
jns
int
jl
xor
cld
cdq
adc
icebp
pop
addr16
movs
call
or
test
adc
xor
div
stos
mov
pop
adc
mov
cmp
mov
cs
mov
stos
cmp
inc
adc
cwde
jbe
ds
xor
push
jne
test
push
mov
daa
shrd
in
mov
jmp
adc
sub
gs
mov
mov
repz
sbb
xor
jo
cmp
in
jle
in
mov
enter
cld
adc
push
daa
lahf
cmp
mov
add
mov
cld
arpl
cli
pusha
adc
push
or
add
adc
into
sbb
and
ins
inc
addr16
adc
popa
adc
jmp
adc
adc
mov
add
xchg
or
jl
adc
cmpps
sub
push
cmp
call
jnp
mov
xchg
adc
in
inc
and
jmp
not
adc
movs
lea
out
icebp
adc
push
shl
mov
dec
xor
idiv
jns
add
aad
in
jmp
loope
pushf
jl
dec
jno
adc
icebp
and
mov
ds
adc
enter
ins
cli
push
add
sbb
sbb
xor
retf
vphaddbw
adc
dec
jmp
dec
jne
and
xchg
adc
inc
sub
dec
adc
sub
pop
mov
in
ins
push
cwde
dec
pop
adc
les
shl
cmp
fwait
aam
cmp
fsubr
(bad)
daa
sub
cld
add
(bad)
pop
rcpps
sbb
lds
jl
jle
rcl
jns
sbb
xlat
add
fidiv
xor
adc
adc
adc
add
(bad)
mov
das
adc
xchg
sbb
sbb
jg
inc
cmp
push
das
mov
or
clc
ja
adc
rol
inc
in
loop
push
int3
xchg
adc
ficom
dec
mov
or
scas
stc
repnz
adc
fist
ja
inc
stos
pop
xor
add
mov
xor
lea
sbb
adc
sbb
pop
es
push
or
je
sahf
push
sti
in
mov
inc
lock
loopne
dec
mov
dec
sub
mov
scas
jnp
jae
test
sbb
or
imul
(bad)
sbb
test
into
out
push
dec
stos
test
arpl
inc
add
cld
aad
stos
pop
push
pop
gs
cli
sbb
mov
pushf
inc
adc
jne
scas
retf
jp
xor
rol
mov
sub
mov
mov
push
pop
in
lds
pop
mov
mov
push
push
and
mov
add
movs
xor
and
fcom
or
inc
sub
leave
jo
jbe
adc
jmp
xor
xchg
es
mov
xchg
or
repnz
push
mov
sbb
aad
pushf
in
pop
adc
inc
mov
mov
mov
jle
dec
stos
sbb
in
inc
inc
ror
in
sub
movs
xor
xor
sub
ja
mov
adc
cmc
inc
dec
xor
and
movs
or
adc
cmp
mov
sub
test
xchg
push
jle
dec
rcl
add
xchg
pop
mov
xchg
add
sbb
inc
adc
jbe
int3
mov
mov
sbb
(bad)
(bad)
std
fs
or
and
and
push
or
sub
xchg
jl
fiadd
add
sbb
rcr
xor
ins
dec
hlt
and
fdiv
adc
test
cdq
mov
inc
js
inc
mov
xchg
loop
jge
adc
add
push
or
mov
jnp
jmp
xor
and
icebp
rcr
inc
lea
mov
aad
jns
mov
sbb
cmp
pop
aam
pop
mov
jb
push
adc
dec
inc
and
test
dec
push
push
mov
xor
dec
jno
test
mov
adc
jns
stos
pop
xor
adc
push
push
xor
lock
adc
adc
cmc
mov
mov
xor
cli
lods
adc
dec
inc
pop
jmp
test
push
dec
add
add
lock
pop
add
xchg
push
scas
ds
dec
stos
adc
xchg
sbb
aaa
das
in
std
(bad)
pop
cmps
xor
sbb
add
retf
hlt
mov
push
and
or
loop
add
jmp
inc
add
fnstsw
ins
mov
mov
imul
stc
pop
popa
xchg
adc
mov
call
pop
lea
sbb
enter
push
into
out
or
push
xchg
add
loop
mov
scas
and
hlt
pop
in
fs
xor
push
mov
adc
stos
in
jecxz
jg
sbb
adc
outs
sub
mov
add
outs
sbb
mov
ins
test
cdq
dec
ss
dec
pop
or
mov
inc
test
mov
aam
xchg
in
inc
mov
hlt
pop
mov
dec
retf
xchg
rol
inc
or
jo
fucomip
scas
mov
pop
inc
and
cmp
out
je
mov
ins
pop
nop
repz
adc
xor
xchg
push
adc
and
jno
mov
inc
cdq
cmc
into
pop
push
dec
adc
mov
mov
push
sub
sbb
cdq
addr16
shl
adc
ret
jle
test
hlt
dec
jmp
add
jno
loope
or
adc
std
movs
mov
xchg
jl
sbb
mov
sub
and
push
pop
xchg
iret
sbb
xor
dec
adc
xchg
lea
pop
dec
and
pop
sbb
push
jbe
or
adc
imul
(bad)
or
add
sub
sahf
cmp
pusha
adc
enter
mov
adc
call
lods
in
pusha
jmp
mov
add
add
xchg
out
fild
xchg
les
push
addr16
retf
loop
mov
jbe
xchg
and
sbb
test
jmp
cmp
stos
in
add
add
out
add
adc
sub
mov
cmp
mov
mov
sbb
aaa
and
jnp
repnz
dec
jnp
push
in
out
hlt
jb
cmp
or
jl
loopne
push
adc
jbe
scas
or
cmp
cmp
mov
inc
adc
add
mov
int3
jl
inc
or
mov
inc
dec
add
movs
inc
popa
mov
loopne
int3
aas
test
hlt
lahf
or
int3
xor
fisttp
loope
ins
rcl
(bad)
sbb
push
and
jae
xor
dec
cmp
xor
pushf
lods
sbb
push
movs
xchg
push
in
retf
je
dec
adc
mov
repz
push
dec
sbb
dec
jno
and
mov
push
pushf
repnz
push
retf
fucomip
int3
stos
add
or
or
je
das
stc
jl
xor
sub
lahf
inc
mov
push
fsub
mov
ret
add
fst
sbb
pop
push
adc
outs
pop
cmps
jno
mov
push
sub
xor
loop
das
lahf
je
adc
out
test
xor
outs
fstp
mov
sub
xchg
push
dec
out
fcom
call
and
pop
sub
test
xchg
adc
adc
adc
inc
cmps
ins
cdq
jp
inc
adc
ds
jecxz
or
iret
jbe
xchg
in
mov
fst
cmp
aas
xchg
sar
mul
ins
jg
xchg
cmps
push
jae
mov
call
sti
push
not
mov
loope
xor
sbb
dec
push
fs
inc
and
clc
sbb
pop
xor
mov
out
xor
adc
call
bound
cmp
jmp
dec
out
jo
push
sahf
mov
aaa
dec
inc
adc
push
movs
stc
not
test
icebp
cmp
jae
jecxz
xacquire
pop
pop
in
adc
fiadd
jnp
sbb
push
ss
mov
and
mov
in
(bad)
mov
and
movs
jno
ins
mov
fwait
pop
push
mov
jo
fcmovnb
adc
mov
aam
xchg
stos
int3
sbb
jg
daa
test
icebp
and
shl
mov
cmp
cld
stc
outs
mov
mov
adc
imul
das
in
push
jecxz
push
jnp
inc
test
xchg
xchg
or
fist
popa
add
pop
clc
ds
movs
cmp
in
adc
push
xchg
out
pop
test
sbb
sahf
jnp
xor
test
push
imul
arpl
adc
js
popf
imul
or
and
mov
enter
movs
dec
dec
push
push
fdivr
stos
adc
adc
cmp
xchg
inc
jne
es
mov
lds
cmp
das
clc
adc
adc
js
mov
pop
stc
fild
fdivr
mov
jns
mov
xor
(bad)
adc
(bad)
pop
or
stos
sbb
cmp
ins
mov
retf
icebp
mov
imul
pop
jne
pusha
xchg
inc
push
dec
scas
cmp
sti
adc
rcr
mov
and
ins
ds
outs
jne
jb
adc
dec
adc
pop
gs
adc
ja
mov
adc
inc
xchg
jae
inc
or
ins
xchg
xor
int
jmp
popa
imul
mov
adc
mov
mov
aam
jle
das
ror
mov
aaa
add
mov
xchg
add
xor
ficom
xor
es
dec
adc
leave
mov
adc
mov
sbb
adc
movs
inc
push
pop
ins
and
mov
cmp
xchg
push
xor
mov
into
ins
adc
adc
js
fisubr
dec
in
mov
xchg
loope
pop
sub
sbb
push
xchg
je
repnz
adc
inc
das
and
ins
pop
iret
sbb
sbb
push
push
dec
ins
repz
dec
xchg
xor
push
sub
xchg
push
push
lahf
unpckhps
adc
imul
sbb
mov
jl
pushf
js
ins
addr16
mul
jbe
or
jmp
ud0
jl
push
sahf
push
jge
(bad)
adc
dec
sbb
aad
mov
cmp
cdq
fnstcw
adc
int
mov
adc
xchg
scas
dec
push
jp
ret
adc
sub
jno
clc
and
retf
sbb
imul
(bad)
jge
retf
cmp
leave
adc
test
adc
cmps
mov
into
adc
imul
dec
adc
and
js
add
xchg
jnp
daa
mov
adc
loopne
pop
retf
sbb
(bad)
xor
lods
fcom
call
cwde
jle
add
sub
mov
push
(bad)
dec
jbe
fsubr
into
jmp
adc
(bad)
aam
call
or
add
call
cmc
fsubr
sbb
adc
ret
dec
mov
jmp
shr
inc
mov
js
mov
fidivr
inc
call
les
push
xchg
dec
cmp
enter
fxch
xor
dec
mov
jle
cmp
fcmovnbe
mov
jo
add
or
xor
into
mov
mov
les
xchg
add
fst
xchg
cmp
sahf
fimul
gs
loop
adc
cmp
or
and
xor
inc
xor
xchg
cmp
jae
lods
xchg
retf
into
call
je
or
loope
inc
arpl
fbstp
(bad)
xchg
fisub
inc
mov
mov
popf
xchg
call
je
rol
lods
out
sahf
adc
fsubr
int3
xchg
jnp
pushf
push
sub
fisub
sbb
and
mov
and
mov
clc
ret
and
test
or
sti
test
lahf
push
cmp
add
int3
mov
scas
push
adc
jbe
sti
push
sub
leave
adc
mov
mov
lahf
loop
loop
add
movaps
sbb
gs
loop
clc
mov
lods
push
mov
dec
xcrypt-cbc
cmps
adc
ds
adc
pop
jp
daa
adc
sysexit
mov
es
shl
push
xchg
mov
push
cli
inc
jmp
push
aad
add
jmp
adc
push
clc
lds
pop
jne
ins
push
xor
lods
cld
scas
shr
push
(bad)
jae
dec
fdivr
sbb
fld
push
cmp
cmps
adc
pop
mov
retf
nop
adc
mov
sbb
sti
je
nop
and
adc
jle
inc
loop
mov
adc
sub
xor
out
adc
sub
adc
or
adc
rol
sub
adc
sbb
mov
sub
adc
fisubr
js
pop
loopne
sahf
mov
mov
cmp
clc
adc
push
push
mov
inc
sbb
call
hlt
or
mov
or
mov
inc
xor
push
mov
xor
call
mov
and
sbb
push
(bad)
adc
dec
xchg
sbb
jecxz
sbb
into
mov
movs
xchg
nop
sar
bound
mov
push
adc
sbb
pushf
push
popa
movs
add
mov
adc
inc
lods
sbb
adc
jns
dec
shl
push
add
lds
pop
and
inc
leave
in
test
dec
xchg
xchg
not
cld
jae
pop
jb
adc
sub
adc
stos
xchg
daa
and
jg
sbb
imul
arpl
adc
fdiv
cmc
ret
mov
and
mov
cmps
xchg
sbb
arpl
cs
push
mov
mov
dec
fisttp
adc
sbb
iret
xchg
(bad)
cmp
xchg
add
repz
xor
nop
adc
stos
add
sbb
in
out
test
adc
pusha
dec
fistp
test
sbb
hlt
and
and
aaa
loop
jb
ins
ins
cmps
cmp
adc
cmp
(bad)
fld
sbb
in
xor
or
test
inc
adc
pop
pop
mov
xchg
fcomp
dec
xchg
sub
pop
xchg
adc
(bad)
jmp
xor
inc
inc
test
xor
mov
sub
imul
stos
push
push
jne
out
jb
adc
mov
or
mov
adc
push
aaa
out
xor
adc
pusha
push
mov
xchg
je
(bad)
out
adc
push
shl
and
xchg
leave
xchg
jae
das
xchg
adc
pop
jmp
pushw
sub
mov
ds
in
clc
jo
(bad)
sub
test
xor
bound
sub
push
and
adc
les
jno
inc
mov
pushf
icebp
adc
push
sti
fcmovbe
in
mov
add
sub
lahf
mov
in
aaa
or
mov
fst
(bad)
test
sub
(bad)
push
adc
cwde
in
pusha
or
mov
sbb
jmp
jmp
cli
cmps
int
ficomp
fs
or
sti
adc
mov
(bad)
adc
add
call
dec
jg
(bad)
in
mov
add
inc
adc
adc
(bad)
sub
ds
xor
(bad)
push
adc
fdiv
xchg
(bad)
or
aaa
xchg
add
and
lods
xor
enter
jmp
pop
pop
jb
aad
int3
fnstenv
outs
xchg
sub
and
adc
sub
stos
xor
mov
test
cmp
jg
dec
pop
sbb
test
xor
adc
lods
jns
adc
and
gs
add
or
mov
sbb
or
fisttp
xchg
cld
enter
inc
sbb
sub
xor
and
cmp
cmp
aad
in
rcl
inc
dec
call
call
xor
jp
sub
push
xchg
sub
add
mov
adc
mov
ss
pop
jmp
inc
xchg
push
jo
xchg
inc
jp
addr16
mov
mov
adc
cmp
(bad)
(bad)
push
out
inc
out
adc
pop
mov
sar
lock
adc
jecxz
push
mov
or
adc
and
and
xchg
xchg
sub
pushf
xchg
dec
arpl
call
inc
and
js
adc
push
add
lods
jns
xlat
shr
retf
or
in
xchg
es
sub
pop
xor
clc
fsub
inc
dec
in
push
adc
mov
es
inc
inc
push
sbb
cli
shl
dec
adc
into
outs
push
push
sbb
mov
jbe
adc
add
js
adc
ins
out
cmps
je
add
jo
sbb
movs
inc
push
sbb
dec
mov
les
jb
lods
or
or
adc
push
sbb
stos
mov
pop
adc
mov
sbb
sbb
mov
cld
out
loopne
js
sub
push
and
push
mov
in
push
sbb
ins
xchg
and
mov
test
add
jge
push
sub
xor
pop
and
mov
pop
ds
xchg
xchg
ins
push
jno
cmp
(bad)
dec
xor
add
bound
cld
loopne
adc
out
mov
add
adc
jge
int
inc
jg
adc
retf
xchg
repnz
pop
pop
out
test
shr
out
mov
or
sbb
xor
aam
rol
cmps
xchg
mov
cs
lea
add
ins
dec
mov
mov
cmp
aam
push
sbb
movlps
and
mov
jl
(bad)
call
lea
repnz
inc
call
jmp
ret
adc
xor
cmp
adc
fbld
push
in
out
inc
and
(bad)
push
enter
push
adc
jmp
adc
(bad)
sub
mov
test
and
adc
add
push
mov
call
hlt
aas
cmps
mov
sub
or
xor
mov
sbb
icebp
inc
jecxz
inc
adc
dec
rol
test
retf
cmc
mov
icebp
mov
xchg
inc
(bad)
je
cmps
addr16
jge
push
push
inc
in
add
sbb
xchg
push
mov
pop
pusha
in
and
hlt
xchg
cmp
xor
cdq
or
out
add
xor
jno
sbb
jo
add
push
out
lahf
jmp
(bad)
and
inc
xchg
sahf
lods
mov
iret
sbb
xor
addr16
jl
test
xchg
mov
fld
add
xlat
dec
jg
pop
jl
adc
(bad)
adc
and
lahf
cmovns
adc
pop
push
out
xor
pop
adc
and
leave
mov
jmp
mov
sbb
adc
imul
cmp
nop
adc
adc
rcl
or
hlt
xlat
ja
cmps
sbb
add
adc
shr
adc
inc
ss
not
in
cli
jnp
inc
stc
or
pop
aam
push
sub
adc
in
mov
(bad)
repz
pop
out
cmp
mov
arpl
add
lods
and
stc
adc
repz
cdq
popa
xchg
jl
in
pop
out
call
int3
inc
and
push
pop
dec
cmp
outs
adc
xchg
mov
push
cmps
adc
jg
ret
mov
jmp
jecxz
test
or
sub
xor
jmp
jbe
pop
arpl
ds
mov
test
out
sti
lock
imul
cmp
aaa
pop
out
push
retf
(bad)
fstp
adc
int
pop
jmp
lods
add
shl
in
xchg
and
inc
add
add
pop
jecxz
and
and
pop
mov
ins
adc
addr16
adc
inc
mov
cmp
mov
cmp
test
xor
xchg
add
icebp
std
dec
ins
or
retf
fisubr
mov
inc
fnstsw
sub
adc
and
or
(bad)
pop
mov
dec
push
leave
fucomi
les
adc
ret
cmc
int3
sub
cli
adc
xor
clc
shl
push
and
(bad)
lods
adc
fucom
push
dec
xor
inc
sbb
stos
mov
add
mov
leave
lock
adc
push
sub
mov
mov
leave
jmp
sbb
aad
in
add
mov
fiadd
xor
(bad)
and
dec
pop
sbb
pushf
inc
adc
ja
adc
addr16
pop
xor
and
dec
xchg
jae
or
cmp
test
xchg
or
and
ficomp
sbb
adc
stc
ins
dec
adc
cld
add
xchg
jle
mov
mov
sahf
and
pop
xor
aam
push
fdivr
adc
repz
imul
dec
cmp
xor
xchg
ins
push
cmc
jmp
hlt
rol
lock
mov
jae
ret
mov
mov
xchg
les
imul
mov
scas
adc
stc
xchg
inc
push
mov
or
das
shr
daa
add
addr16
xchg
aad
aad
stos
adc
jo
fimul
cmp
std
jbe
jg
xor
cmp
jno
or
adc
shr
les
push
arpl
sbb
dec
sbb
push
ficomp
xchg
mov
fs
xchg
(bad)
and
mov
jbe
out
jmp
jns
out
inc
jl
movs
int3
test
daa
retf
push
inc
jecxz
lods
ins
sbb
push
and
(bad)
rcl
rol
or
cli
xchg
pusha
adc
sub
inc
mov
and
push
loop
cs
push
dec
and
lods
adc
adc
cmp
loopne
push
cdq
jns
adc
dec
mov
jl
fs
jmp
pop
fdivr
lock
mov
xchg
lods
mov
test
fld
lods
inc
mov
(bad)
(bad)
test
adc
and
sub
dec
or
adc
vmread
scas
pushf
inc
mov
sti
inc
enter
push
cmps
mov
pop
jmp
mov
and
fstp
jmp
out
fcomip
xchg
hlt
ficom
mov
dec
pop
int3
movs
mov
push
xor
add
frstor
add
or
dec
adc
mov
jae
push
xchg
and
or
xchg
repnz
jecxz
adc
mov
(bad)
je
push
adc
movs
adc
mov
pop
ds
dec
andnps
int3
push
adc
iret
xor
ja
xchg
mov
addr16
cmp
inc
pop
popa
mov
fsubr
repnz
adc
mov
call
lods
mov
adc
hlt
mov
jnp
and
adc
push
out
mov
imul
in
and
xchg
jcxz
and
int3
cld
sub
jg
je
lock
xchg
inc
pop
retf
xchg
stc
(bad)
aam
mov
dec
sub
sub
stos
ret
bound
mov
xchg
mov
mov
sbb
fdiv
stc
mov
xchg
dec
adc
sbb
and
fld
dec
enter
loopne
jbe
mov
fdiv
ja
inc
push
cmp
and
xchg
js
popa
xor
lahf
xchg
les
inc
je
cdq
ins
aad
sub
ins
mov
call
call
daa
cmp
popa
int3
sub
or
mov
cdq
or
push
in
popa
sbb
frstor
or
int3
jecxz
lea
dec
out
adc
mov
mov
ss
(bad)
retf
mov
repnz
inc
into
and
and
enter
stos
loop
aaa
inc
es
cli
mul
adc
ins
lods
or
shl
lds
fistp
psubsw
mov
push
mov
arpl
add
xchg
lods
data16
add
xchg
dec
mov
leave
pop
adc
adc
sub
sbb
(bad)
les
mov
gs
sahf
mov
push
ficom
dec
dec
nop
xchg
add
push
repnz
adc
sbb
xlat
sbb
mov
and
mov
std
je
sbb
sti
in
adc
cmc
pop
xchg
ss
adc
and
(bad)
sbb
aam
adc
jno
or
inc
adc
and
xor
fs
push
adc
cwde
sbb
loop
mov
adc
jge
stos
mov
sbb
adc
into
add
mov
push
adc
dec
adc
sub
pop
ins
add
sbb
pusha
(bad)
jg
inc
stos
loopne
and
lock
stos
popa
push
mov
xchg
sbb
add
adc
movs
iret
ror
lea
and
std
sbb
jmp
jae
adc
dec
push
lds
cld
jb
mov
or
xchg
idiv
xchg
rcr
mov
loopne
push
inc
cmp
mov
or
mov
in
fimul
push
xchg
xchg
jmp
mov
mov
sub
test
movs
xchg
outs
xchg
jmp
adc
dec
iret
push
dec
sub
sbb
dec
in
in
dec
jne
je
in
dec
adc
inc
(bad)
shl
or
mov
xor
in
add
jmp
mov
mov
into
cmc
cmp
and
mov
push
icebp
mov
arpl
inc
xor
xor
xor
cmps
pop
jmp
pop
and
or
dec
mov
mov
in
repz
mov
lods
sets
jne
xchg
mov
enter
push
mov
imul
aas
nop
das
js
inc
xor
les
push
adc
addr16
das
adc
mov
jae
aas
or
adc
in
test
lahf
xchg
test
aad
xchg
ss
ret
inc
std
cmc
cld
and
mov
je
fisubr
aam
scas
dec
pusha
push
push
in
jne
mov
dec
popf
mov
push
pop
sti
cld
(bad)
adc
xor
dec
jne
lock
fmul
(bad)
fmul
pop
xor
stos
xchg
adc
jp
pop
push
(bad)
aam
int3
mov
push
or
retf
xchg
sub
in
dec
sbb
adc
push
mov
sbb
dec
xchg
je
pusha
es
into
in
mov
xchg
aam
ret
dec
data16
data16
adc
cmp
pop
data16
test
xchg
les
sbb
addr16
lods
cs
xchg
add
fadd
fst
add
add
mov
je
push
adc
rcr
adc
mov
jecxz
adc
add
or
std
add
fs
xchg
sbb
xchg
in
dec
jnp
mov
or
or
loope
jg
add
(bad)
cdq
jno
dec
sbb
mov
mov
retf
inc
and
sbb
mov
inc
inc
add
das
sbb
bnd
xor
cdq
or
pop
in
xor
mov
inc
test
pop
jg
xchg
inc
pop
pop
adc
adc
mov
or
jns
adc
add
scas
leave
call
sbb
aaa
lahf
mov
mov
out
pop
int3
sub
adc
dec
push
jno
lods
repnz
ret
leave
and
sbb
ins
or
sbb
(bad)
arpl
xchg
call
xchg
adc
mov
cli
mov
adc
std
stc
push
shr
pop
push
fwait
sub
add
mov
and
sub
pusha
adc
repz
adc
mov
test
sbb
add
nop
pop
push
xor
xor
(bad)
push
retf
pminub
aam
adc
xor
mov
dec
adc
fmulp
dec
out
pop
aad
mov
dec
in
push
sbb
fidivr
xchg
scas
xchg
arpl
test
xchg
adc
ret
fwait
icebp
xor
push
dec
(bad)
aas
adc
jp
mov
cmps
adc
in
xchg
xor
xchg
cmp
loopne
fidivr
sbb
lods
adc
lock
pop
pop
and
cmp
xor
(bad)
les
mov
js
fmul
adc
out
das
jbe
mov
add
fwait
inc
shr
out
pop
xchg
mov
fsubr
ficom
lock
aaa
push
lds
ins
dec
push
cwde
inc
cmp
out
sahf
int
pop
mov
sbb
jne
fcom
lods
js
sub
cdq
lods
push
mov
pop
in
mov
enter
ins
aad
enter
in
push
leave
rcl
inc
cdq
cmp
push
(bad)
ror
adc
imul
out
sub
addr16
adc
addr16
add
and
aas
mov
adc
or
es
pop
xabort
sbb
ror
or
xor
popf
and
mov
stc
sbb
inc
fsubr
or
les
dec
inc
icebp
pop
lahf
sub
cmps
dec
xchg
adc
dec
push
adc
push
mov
fs
jmp
aad
xchg
mov
call
in
cmc
cli
popa
or
xchg
or
rcl
sub
ja
pop
hlt
enter
push
cmps
and
test
jno
push
(bad)
out
call
adc
xlat
bnd
mov
push
adc
inc
shl
in
aas
add
dec
mov
out
push
and
in
jl
loop
fst
mov
lahf
sub
das
mov
daa
add
(bad)
push
dec
ins
adc
stc
pop
lds
jae
in
arpl
xchg
les
les
adc
cmps
cld
mov
add
lds
lahf
sub
jno
cli
and
int3
inc
call
adc
sbb
into
xor
sub
sub
sbb
js
frstor
adc
clc
fxch
sub
outs
mov
fadd
outs
ins
dec
sbb
sbb
shr
sbb
mov
mov
adc
sbb
les
ss
jp
(bad)
sub
push
cmps
adc
pop
jle
pop
test
cmp
xor
adc
stos
loopne
cmp
scas
push
out
inc
jo
test
dec
in
(bad)
loop
adc
mov
rol
ins
stc
int3
sub
adc
pop
bound
adc
test
fs
mov
jmp
push
iret
mov
mov
add
sbb
in
mov
movs
ret
aas
xor
sbb
int3
sti
stos
mov
push
in
push
adc
clc
mov
push
in
fnstsw
pop
add
in
jmp
sar
adc
aam
imul
nop
add
push
outs
mov
push
out
btr
lea
or
movs
jns
nop
adc
adc
adc
imul
arpl
jl
lea
or
ss
adc
aaa
cmps
loopne
test
(bad)
movs
jge
cmp
xchg
xchg
jne
icebp
and
retf
push
mov
push
adc
xlat
jecxz
push
xchg
adc
mov
cld
lock
out
sbb
mov
dec
add
jp
cmp
jne
retf
xor
or
dec
add
enterw
pusha
ds
aam
lods
ja
push
lahf
ds
xor
aas
popf
adc
add
imul
fs
jmp
sbb
imul
aaa
fdiv
add
adc
pop
ins
scas
cmp
push
dec
jmp
bound
movs
inc
xchg
adc
lock
aas
xor
aaa
sahf
data16
sub
jae
jl
jle
sbb
outs
mov
xchg
jmp
push
out
sar
out
inc
or
out
rcr
jnp
pop
scas
sbb
ds
fmul
dec
retf
add
lods
inc
jge
sub
out
fs
mov
ret
and
int3
cli
repz
stc
cmp
add
mov
ficomp
bound
dec
rcl
pop
pushf
or
xchg
adc
jne
mov
sbb
scas
imul
movs
adc
adc
pop
ret
xor
repz
and
jp
out
mov
dec
jl
aam
inc
cmp
add
push
inc
push
mov
cmp
call
inc
mov
loopne
xchg
pusha
or
fsub
xchg
pop
ret
icebp
movs
aam
mov
inc
jp
sbb
ins
add
xor
mov
sar
lods
fist
mov
and
pop
adc
cmp
aas
lea
mov
xor
inc
xchg
jmp
mov
mov
retf
xchg
cmp
scas
adc
jp
dec
and
sub
test
das
xchg
xor
xchg
push
retf
pop
in
nop
lds
jmp
push
jg
sbb
cmp
mov
inc
inc
clc
adc
inc
adc
cwde
out
lock
sysenter
cmp
adc
jecxz
test
pushf
or
xchg
outs
push
mov
add
mov
adc
pop
hlt
cmp
retf
and
adc
add
daa
adc
outs
ja
addr16
mov
outs
aaa
adc
fnstenv
dec
or
std
xchg
xchg
sub
push
ror
aas
iret
sahf
fcomp
daa
xor
xchg
jns
ins
adc
dec
xor
and
imul
push
in
lods
jp
pop
sub
push
adc
cmp
jl
sbb
mov
inc
(bad)
adc
lock
scas
pushf
push
adc
ins
cwde
int3
inc
dec
cmp
stc
sbb
sub
test
and
pop
(bad)
out
out
dec
xchg
rcl
mov
jb
xor
test
in
sbb
loope
sbb
push
mov
sahf
add
retf
out
and
jbe
mov
fild
xor
pop
ins
or
xchg
pushf
call
add
push
xor
ins
adc
(bad)
mov
and
adc
sub
arpl
push
retf
mov
fnsave
xchg
loope
push
(bad)
hlt
daa
repnz
cdq
idiv
adc
push
dec
(bad)
fidivr
push
cli
jge
aam
mov
pop
push
jbe
fidiv
pop
dec
jmp
jns
call
cmp
es
mov
sbb
stc
adc
int3
push
pop
icebp
pushf
cmp
fxch
jbe
add
ror
adc
cmps
outs
jecxz
pusha
mov
pusha
dec
adc
or
(bad)
pop
call
jp
sbb
fdiv
pcmpeqb
dec
xchg
push
and
adc
push
data16
pop
lahf
mov
bound
xor
sub
adc
icebp
loopne
jb
xor
push
pop
or
das
xchg
fistp
push
ror
xchg
adc
fst
je
repnz
and
dec
adc
into
cmps
int
adc
xor
mov
retf
pop
inc
sbb
retf
loopne
cld
les
xchg
dec
out
aaa
aaa
movs
sbb
cmp
scas
addr16
or
dec
lock
scas
xchg
mov
js
(bad)
mov
loop
sar
push
add
xor
int3
leave
cmp
add
fcom
xchg
shl
scas
ret
pop
in
and
in
sub
push
xchg
push
mov
int3
mov
movs
sbb
jne
xchg
retf
in
popf
dec
push
sbb
ss
sbb
push
add
mov
clc
mov
or
mov
ficomp
lds
dec
mov
jno
xor
rol
cmp
bnd
aaa
fisub
lock
mov
adc
mov
outs
pop
lock
sub
fcomp
adc
and
pop
call
je
mov
stos
arpl
inc
fst
data16
std
movs
push
fst
(bad)
mov
adc
int3
mov
jmp
sub
jb
mov
mov
out
outs
push
sub
nop
xchg
in
add
loop
or
add
pop
push
xchg
pusha
mov
xor
sub
popf
add
call
jle
and
ror
jae
aad
pop
sub
ror
xor
add
les
imul
rol
jo
ds
mov
jmp
and
int
loop
push
gs
(bad)
cli
ja
out
rcr
push
loopne
cmp
jmp
cmp
test
call
fisttp
fdiv
dec
cmps
push
sbb
leave
push
mov
in
fisttp
adc
enter
sub
lods
out
and
sbb
movs
sub
(bad)
push
fadd
adc
cmps
(bad)
sbb
xchg
jge
das
jns
push
push
pop
cmps
fistp
dec
dec
popa
adc
cwde
cmp
stos
or
daa
jle
test
xchg
loop
iret
cmps
nop
ja
sti
fs
adc
add
call
add
sbb
dec
adc
cmp
sar
add
jp
fmul
(bad)
dec
adc
test
out
and
repz
cmp
call
jo
imul
mov
cmp
xchg
mov
and
loopne
mov
outs
adc
test
test
loopne
adc
mov
dec
hlt
inc
jbe
adc
inc
push
or
fist
sbb
push
mov
cmp
in
dec
mov
gs
mov
mov
aas
jmp
dec
xor
cmps
loope
out
pop
imul
mov
jae
aad
out
mov
pop
pop
jbe
lods
in
in
dec
mov
dec
in
mov
imul
in
pop
setno
cmps
xor
cmp
jnp
xchg
das
(bad)
xor
dec
retf
cmp
pusha
adc
mov
dec
push
loop
test
pop
and
scas
cli
in
scas
shl
mov
adc
inc
sub
sbb
scas
adc
sub
fwait
mov
mov
pop
jb
jle
movs
mov
adc
sbb
(bad)
mov
push
dec
adc
aam
sub
stos
sub
xlat
es
and
(bad)
xor
aaa
add
xor
mov
pop
ficom
jnp
mov
adc
cs
or
cmps
mov
jmp
adc
test
adc
(bad)
rcr
mov
bound
add
sbb
aad
ret
mov
and
out
lods
scas
push
inc
adc
lds
in
scas
jo
push
test
js
stc
push
das
(bad)
mov
int
adc
into
fidiv
jge
int3
adc
addr16
jae
dec
jmp
dec
pop
pop
sbb
pop
xchg
pop
cmp
push
cmp
pop
sbb
scas
cmp
iret
adc
push
lea
push
adc
push
adc
inc
test
cld
push
jecxz
ins
dec
sbb
(bad)
repz
adc
gs
xor
pop
fisttp
sbb
mov
aam
and
imul
or
sbb
sbb
jne
add
mov
adc
jae
pop
jecxz
xchg
cdq
or
add
add
dec
int
ret
fscale
test
and
fistp
ret
and
rcl
aaa
add
ja
pop
inc
adc
adc
sbb
adc
arpl
adc
mov
daa
mov
jne
(bad)
xchg
inc
out
dec
sub
sub
xchg
dec
test
ficom
lock
pop
rcr
inc
pop
add
adc
mov
int3
jns
push
data16
scas
ss
pop
in
loope
call
inc
test
sub
fisttp
outs
fcomp
push
sbb
popa
xchg
std
mov
pushf
adc
(bad)
dec
sub
ret
leave
enter
into
les
sbb
mov
cmc
dec
xchg
loope
sbb
inc
(bad)
lahf
je
dec
mov
adc
mov
mov
and
adc
dec
bnd
jno
xlat
data16
mov
sub
sbb
adc
pop
outs
sub
shl
mov
or
pop
out
outs
sti
and
mov
or
mov
lock
ret
adc
jbe
js
pop
cmps
outs
dec
adc
mov
add
lods
adc
lods
aad
cld
adc
sub
shl
cwde
adc
mov
add
daa
sub
adc
xor
and
jle
test
push
call
imul
dec
xor
xor
jo
cmps
aam
lds
js
rcl
pop
push
aam
iret
mov
mov
and
stos
adc
mov
rol
lea
outs
or
sbb
jno
sahf
pop
dec
das
jmp
sbb
mov
adc
push
call
dec
scas
iret
push
(bad)
(bad)
ss
dec
mov
jl
aaa
loope
sbb
pop
fiadd
and
je
sbb
mov
dec
scas
cwde
adc
xchg
push
(bad)
les
jge
xor
sbb
dec
sbb
cdq
push
loopne
push
jmp
sbb
sar
fcomp
mov
or
stos
jns
call
adc
test
jo
cwde
cmps
or
xchg
call
std
lock
aas
add
or
call
jecxz
jne
lock
aam
fsubr
or
jns
js
sub
push
out
xor
imul
and
pusha
mov
clc
out
retf
mov
cmc
test
lods
call
pop
xor
mov
out
call
cmp
sub
je
mov
popf
inc
sbb
fidiv
in
stos
cdq
jb
sub
and
(bad)
sbb
fcomip
mov
xor
ins
fs
out
aad
cmp
and
into
sbb
call
repz
nop
adc
call
and
adc
dec
mov
sbb
cld
fucom
leave
adc
scas
mov
jnp
and
scas
pop
mov
jmp
jbe
or
pop
adc
popf
fist
jge
mov
jle
mov
push
inc
jp
je
xchg
xor
out
in
out
or
ds
punpcklwd
dec
add
and
pop
aaa
inc
push
adc
dec
int3
sub
ficomp
cmps
dec
retf
or
add
sbb
sbb
or
mov
xor
sub
adc
psubw
adc
arpl
ror
aam
loope
pop
imul
pop
push
mov
cmp
xchg
into
movs
cld
mov
dec
cmps
pop
aad
pop
adc
mov
sti
adc
test
push
mov
pop
sub
xor
ja
scas
push
mov
mov
ds
fisttp
xlat
dec
xchg
sbb
pusha
pop
jp
sbb
inc
sbb
lea
adc
dec
mov
(bad)
gs
je
sub
sbb
or
pop
xchg
clc
mov
les
mov
jp
bound
loop
out
lods
rcr
adc
mov
in
(bad)
fwait
and
fsub
push
pop
push
dec
cmp
adc
addr16
xchg
sub
inc
pop
fadd
push
aad
jno
popa
xchg
popf
and
cmc
outs
ficom
aas
mov
pushf
popa
cmp
je
pop
sbb
sbb
add
std
dec
xor
jle
outs
(bad)
adc
inc
mov
push
dec
ins
loope
in
sbb
aas
jns
mov
les
not
std
xchg
add
adc
add
pop
cmps
jne
adc
test
push
adc
jge
push
and
in
mov
or
push
inc
mov
into
psrad
fdivr
out
test
ins
xchg
clc
les
push
sar
mov
push
jmp
mov
ds
in
mov
and
jmp
cdq
adc
mov
test
or
mul
in
lea
in
push
mov
adc
into
adc
xchg
push
adc
fisub
mov
dec
inc
pop
adc
pop
mov
imul
adc
inc
fisub
cmp
lds
add
mov
adc
cmc
and
pop
sbb
adc
mov
mov
mov
mov
adc
jne
fisttp
out
add
hlt
(bad)
sar
push
popa
adc
push
imul
ss
lods
xchg
xchg
popa
aam
mov
xlat
retf
aam
ss
jecxz
lods
adc
mov
cmc
cs
sbb
std
xchg
xchg
in
dec
pop
dec
and
or
add
jge
sbb
mov
shl
add
push
adc
mov
rcr
pop
push
in
inc
call
sub
ss
xor
(bad)
and
retf
dec
add
out
push
and
dec
xor
scas
dec
adc
pop
mov
(bad)
mov
push
jmp
mov
in
mov
xor
jge
das
pop
mov
test
dec
fs
cmp
xchg
in
dec
adc
loope
and
je
imul
or
rcl
cmp
rcl
out
dec
fprem
(bad)
jmp
jae
jp
dec
or
idiv
pusha
shl
cli
sbb
inc
jnp
adc
jno
adc
test
cmp
call
pop
push
out
int3
les
pop
mov
add
mov
adc
divps
adc
add
xchg
dec
xor
adc
sub
push
out
adc
out
mov
les
xchg
jle
(bad)
aad
push
mov
adc
enter
inc
sub
xor
lock
in
xor
mov
pop
dec
sub
dec
(bad)
outs
loop
movs
jb
iret
jae
idiv
adc
cmp
jne
xor
fbld
imul
call
jb
and
and
cld
mov
movs
adc
enter
adc
jns
mov
inc
and
and
cdq
lock
xchg
adc
mov
lods
xor
dec
adc
and
clc
cmps
or
xchg
xor
scas
dec
sub
mov
fnsave
test
xchg
sub
and
mov
cmps
or
aaa
dec
add
arpl
mov
je
xor
inc
xchg
fcom
adc
scas
mov
inc
jle
rcl
iret
fisub
cmp
jo
pop
push
mov
xor
mov
pop
loopne
dec
aad
push
retf
mov
(bad)
ins
jne
push
pop
xchg
stos
stos
and
hlt
dec
mov
pop
or
jge
in
sbb
pop
cmp
imul
mov
imul
aam
gs
sub
or
sbb
inc
xchg
mov
pop
mov
mov
ds
enter
lea
and
or
push
sbb
outs
push
(bad)
adc
and
push
pop
stos
and
adc
icebp
mov
cs
pop
adc
rcr
push
imul
or
adc
enter
fsubp
out
int3
push
push
scas
ss
aas
js
fcom
fist
nop
jo
and
sar
adc
push
aad
jle
push
pop
adc
sub
xchg
mov
sbb
mov
push
pop
mov
les
pop
xchg
push
rcl
inc
pop
es
fidivr
ret
sbb
movs
scas
push
push
aam
enter
mov
add
and
mov
cmc
xchg
movs
jmp
mov
adc
pusha
inc
pop
and
ss
add
ret
xor
int
je
adc
lahf
test
jecxz
retf
mov
cmp
hlt
popf
add
out
xor
(bad)
repnz
fdivp
cmp
mov
push
and
cmp
xchg
push
adc
jp
jbe
and
mov
add
cmp
mov
mov
test
adc
dec
add
adc
cmp
mov
imul
mov
outs
adc
xor
sub
xlat
xchg
shl
out
push
mov
addr16
(bad)
adc
sbb
sahf
mov
fs
pusha
cmps
jmp
stc
adc
dec
sub
jae
ret
movs
adc
adc
jl
fadd
adc
and
cmp
adc
enter
add
inc
xor
iret
add
call
adc
xchg
test
shr
sbb
xchg
jecxz
dec
jp
and
inc
cli
sahf
adc
jb
ja
fs
adc
sub
repnz
sti
jge
loopne
jmp
js
aas
jmp
adc
mov
(bad)
movs
or
cmp
push
cli
dec
call
aam
cli
sbb
jbe
(bad)
clc
lods
call
ds
dec
(bad)
scas
cmps
out
xchg
imul
pusha
fdiv
lock
pop
or
inc
fst
pop
dec
adc
mov
movs
jmp
adc
out
dec
retf
adc
jge
in
sbb
push
out
mov
clc
and
(bad)
aam
or
adc
add
test
lock
mov
pusha
stos
pop
push
or
mov
add
push
ds
adc
sbb
or
jg
xchg
adc
xor
cmp
in
rcr
xchg
inc
jns
nop
mov
jb
add
jge
push
sahf
mov
mov
aaa
(bad)
test
fiadd
pop
out
inc
and
fisttp
call
xor
aas
adc
or
jbe
sti
test
jne
cmp
fstp
ret
adc
adc
neg
ficom
enter
les
int
gs
jmp
mov
push
test
test
jmp
pop
fist
arpl
xchg
dec
sahf
frstor
adc
and
test
adc
ficomp
jo
out
mov
clc
ss
lahf
pop
movs
inc
not
adc
add
add
xor
jge
in
adc
movs
mov
mov
in
pop
out
push
mov
icebp
in
sub
inc
in
rcl
scas
aam
enter
add
je
movs
sbb
test
xor
icebp
ja
pop
gs
(bad)
imul
fcom
out
ret
jle
adc
lds
adc
mov
mov
or
and
adc
sbb
mov
arpl
adc
pop
or
(bad)
jg
lds
es
jmp
call
xor
cmp
sub
add
loope
mov
in
mov
in
ror
push
shl
pop
cld
sub
hlt
cdq
add
lods
out
push
sub
into
jmp
or
std
pop
int3
cli
getsec
mov
inc
mov
dec
adc
add
dec
paddb
movnti
jns
inc
pushf
jns
sbb
fst
int3
sub
ins
jo
sbb
mul
cmc
stc
push
fwait
movs
nop
push
xchg
push
stos
pop
jmp
mov
neg
int3
push
test
push
mov
and
stos
jmp
mov
pop
mov
imul
add
clc
pop
retf
aaa
adc
sbb
in
imul
inc
mov
cdq
dec
adc
outs
xchg
(bad)
sbb
sbb
mov
ds
adc
inc
add
add
push
pop
cwde
bound
adc
or
nop
in
pop
cli
lahf
adc
clc
scas
push
test
inc
ficom
pushf
scas
out
mov
cdq
xor
call
sbb
adc
mov
and
lods
xchg
mov
mov
cmp
jg
aas
cmp
pop
xchg
push
enter
ror
adc
into
aam
push
pop
push
adc
xchg
in
imul
movs
ja
mov
adc
cmp
les
loope
pop
not
ss
xor
aaa
mov
and
adc
dec
movs
addr16
xor
je
test
jmp
xchg
and
inc
push
inc
add
test
push
jecxz
xchg
pop
inc
ret
cld
mov
jecxz
pushf
in
popf
fs
jg
add
add
outs
xchg
sbb
(bad)
mov
mov
mov
cwde
sbb
add
lahf
pop
or
(bad)
rcr
stos
mov
or
and
jge
mov
adc
int3
shl
or
inc
adc
sub
push
hlt
adc
retf
mov
pusha
adc
xor
test
(bad)
hlt
das
dec
xchg
out
xor
scas
in
je
and
mov
les
xchg
pop
inc
add
pop
xchg
mov
(bad)
cmps
mov
cdq
adc
push
jno
xor
and
sub
cdq
stos
push
inc
shr
stc
je
jne
std
or
dec
xor
jnp
and
xchg
stos
(bad)
mov
dec
cmc
in
lods
mov
cli
fst
lock
pop
inc
adc
(bad)
dec
fld
jne
(bad)
cmps
mov
les
dec
(bad)
rcr
jae
adc
ficom
cwde
fucom
test
mov
movs
xor
xor
iret
sbb
lods
push
push
frstor
inc
push
dec
adc
add
cmps
xlat
aad
neg
adc
outs
adc
mov
xor
ja
shl
cld
adc
jmp
add
icebp
adc
arpl
inc
push
cmp
cmp
out
fidiv
push
xchg
ins
mov
mov
test
ja
cmps
xchg
pop
aaa
add
pushf
sub
adc
pop
stc
mov
nop
js
call
clc
ficom
leave
sti
mov
iret
inc
or
inc
fdivr
mov
mov
push
(bad)
aad
xchg
adc
dec
clc
mov
push
(bad)
pop
stos
or
sub
pop
pop
adc
dec
cmp
aam
push
push
and
(bad)
sti
push
pop
pop
in
arpl
outs
ficom
jno
daa
das
jns
jge
dec
and
lods
fst
retf
mov
js
sbb
inc
inc
sub
adc
pop
adc
adc
pop
push
repz
loope
adc
push
cli
mov
shr
rcl
fwait
or
sub
mov
pop
adc
fsub
adc
pop
jae
push
out
jg
int3
jne
xor
fild
mov
stos
ret
push
stos
mov
cmp
fadd
repz
pop
retf
cmp
ja
cld
aad
popf
sub
jb
hlt
fmul
aam
and
dec
pusha
push
push
mov
or
das
inc
xchg
addr16
enter
ins
pusha
cmc
movs
popa
mov
rcl
mov
lock
lahf
icebp
aas
std
sub
sbb
xor
retf
sub
pop
pop
sbb
std
sub
popa
push
or
movs
aad
xchg
dec
and
fcom
(bad)
adc
add
dec
fbstp
xor
bound
xor
add
sti
mov
in
test
jecxz
pop
in
neg
retf
cmc
dec
dec
dec
inc
adc
pinsrw
dec
pop
retf
or
adc
aas
add
aad
popf
mov
rcr
mov
fiadd
mov
pop
in
jb
inc
add
xchg
add
push
aad
bound
retf
(bad)
sbb
addr16
stos
xchg
std
into
(bad)
add
sub
retf
aam
imul
lock
mov
jnp
loopne
aam
inc
out
int3
repnz
xor
add
lahf
shr
xchg
shr
shr
mov
sbb
(bad)
out
jnp
adc
sbb
dec
add
jmp
dec
sbb
retf
daa
xchg
lods
outs
retf
mov
test
jecxz
push
xor
sub
inc
fild
cld
adc
push
dec
in
or
hlt
cmp
test
int3
mov
cmps
sbb
cwde
push
clc
sbb
int
into
neg
ret
cmps
int3
mov
sub
imul
cmc
dec
fistp
icebp
hlt
out
lods
idiv
adc
lea
outs
das
pop
sub
in
out
jecxz
je
pop
mov
xchg
repz
mov
adc
adc
ret
sbb
xor
(bad)
aam
fld
adc
loopne
adc
shl
pop
lock
cmp
fsub
pusha
sahf
inc
dec
adc
xchg
jmp
mov
scas
int3
add
aaa
adc
mov
jb
mov
xor
inc
aas
sbb
push
cs
in
push
in
cld
mov
mov
scas
xchg
(bad)
or
push
dec
scas
push
es
mov
std
push
xchg
sbb
push
add
je
pop
xor
and
mov
xor
sahf
mov
in
adc
xchg
adc
ins
(bad)
or
pop
or
out
adc
adc
loopne
adc
or
(bad)
mov
mov
sbb
pop
ds
vmovq
adc
out
jge
js
xor
adc
call
mov
dec
hlt
jnp
inc
ins
std
adc
mov
xor
stos
inc
adc
inc
push
outs
jnp
(bad)
iret
scas
jle
(bad)
es
push
std
cmp
cs
xchg
push
clc
cmps
pop
adc
and
inc
movs
and
ja
mov
mov
adc
or
fldenv
in
int3
xchg
btr
add
and
in
icebp
fdivr
jno
daa
in
dec
shl
popf
push
inc
out
xor
(bad)
xor
mov
mov
out
std
ins
dec
out
addr16
xchg
dec
jnp
xor
aam
push
mov
inc
into
std
or
xchg
addr16
movs
je
add
mov
imul
pop
js
xchg
push
jne
pop
imul
inc
retf
xor
jno
shr
lock
pop
in
dec
sub
cmp
inc
jmp
dec
jmp
jbe
shr
lds
mov
in
mov
out
lahf
mov
mov
add
mov
repz
inc
mov
daa
cmps
mov
test
xchg
int
fdivp
rol
retf
xor
sub
outs
clc
adc
scas
push
mov
mov
cmps
cmc
sub
xor
push
add
clc
mov
pop
sub
ficom
dec
add
inc
stos
pop
cmp
pushf
int3
mov
mov
bound
xor
shr
cmp
addr16
pop
mov
lods
jne
retf
mov
(bad)
and
pop
call
out
test
jl
adc
cli
dec
xor
inc
aaa
xor
mov
add
sbb
adc
jmp
div
adc
push
out
addr16
sub
push
adc
leave
pop
es
push
xchg
jp
in
xchg
jne
pushf
lds
ss
aaa
adc
sbb
adc
les
loop
sub
stos
(bad)
out
shl
popf
jl
in
cmp
movs
jle
add
enter
adc
popf
sar
push
mov
paddusb
xchg
mov
lds
cmc
add
cmp
pop
cmp
imul
jns
add
popa
leave
inc
push
dec
stc
call
push
add
mov
push
lea
cmp
imul
test
mov
xchg
sbb
and
pop
mov
aad
or
mov
inc
fadd
fsub
sub
mov
cdq
xor
ror
xchg
dec
xchg
and
sub
adc
out
arpl
shl
cmp
imul
fisub
sar
push
lods
packuswb
test
fist
inc
leave
hlt
shl
retf
pop
push
adc
mov
in
inc
and
test
xchg
mov
fidivr
data16
or
call
jp
add
pop
stos
rcl
add
out
xchg
fst
xchg
call
sbb
or
cli
(bad)
push
sub
sub
cmp
adc
sti
push
ds
call
lods
(bad)
loopne
imul
pop
push
xor
les
push
and
pop
and
outs
test
pop
and
jno
adc
stos
xor
jp
shl
or
lods
aam
int3
adc
sti
movs
xchg
in
imul
or
jg
ins
cmp
fst
xor
and
fist
mov
sub
pop
rol
imul
jae
leave
sub
xchg
mov
xor
arpl
adc
dec
xchg
push
out
adc
cli
fmul
adc
test
rcl
xchg
push
adc
retf
or
out
xor
in
cmps
icebp
cmp
dec
xor
(bad)
sti
fild
inc
add
pop
adc
adc
jnp
ret
aas
or
gs
xor
push
push
mov
pop
(bad)
cmc
pushf
xor
mov
inc
fst
jbe
ins
(bad)
loopne
or
iret
fcom
adc
punpckhwd
(bad)
retf
mov
or
retf
fbstp
adc
ret
sbb
push
or
push
sbb
adc
adc
jnp
ss
push
test
xchg
or
mov
test
xchg
clc
clc
lahf
jl
pop
add
xor
lahf
jp
xchg
aaa
xor
cld
sbb
jl
ss
lahf
push
(bad)
adc
cli
cmps
and
add
js
ficom
pop
mov
mov
pop
xor
fwait
neg
dec
xchg
loop
inc
je
out
cmp
xor
mov
js
in
loop
ret
xchg
jne
sbb
adc
call
inc
inc
and
out
lods
push
call
or
stc
xor
cmp
add
cmp
and
adc
pushf
xchg
(bad)
jl
push
repz
pop
cmps
pop
rol
rol
loope
mov
cmp
stos
enter
push
int3
dec
cdq
cmc
mov
push
xchg
das
or
jns
test
cmc
jbe
pop
adc
stos
mov
fst
in
adc
mov
in
iret
imul
rol
(bad)
mov
jg
pop
out
shr
cmps
movs
pop
sar
enter
cwde
add
dec
out
gs
imul
ss
in
les
xchg
mov
loopne
cwde
adc
shl
addr16
adc
in
inc
mov
mov
or
cdq
cld
fld
xchg
into
(bad)
jmp
cmp
lods
fwait
call
retf
push
jg
inc
mov
sub
cwde
test
xor
sbb
push
mov
(bad)
jmp
inc
cwde
mov
jbe
fdivr
dec
mov
fistp
popf
les
and
jmp
adc
test
cmp
inc
fcom
mov
sahf
int
adc
ins
push
mov
adc
rol
jge
xchg
sbb
mov
cld
add
adc
outs
in
mov
repnz
mov
and
pushf
adc
mov
data16
push
inc
pusha
mov
sbb
jge
jb
jae
sbb
jg
adc
push
xchg
in
jl
sub
xchg
mov
daa
and
pop
adc
adc
mov
ins
jne
adc
fbld
stos
les
jbe
not
xchg
pop
adc
dec
hlt
mov
dec
je
adc
jmp
cmp
int
loop
cli
mov
mov
jmp
lods
arpl
into
mov
out
sub
repz
xchg
mov
popf
jge
das
sbb
arpl
push
xchg
icebp
int3
mov
cli
sbb
sti
ret
aam
jge
jo
jbe
test
push
and
push
mov
add
mov
and
and
pushf
sbb
push
jnp
pop
xchg
jl
cli
ins
cmp
out
xor
xor
arpl
adc
inc
cmp
retf
in
popa
mov
pusha
daa
adc
adc
dec
dec
mov
adc
jnp
fcomp
pop
scas
mov
jg
xchg
push
mov
in
adc
adc
or
fs
xchg
or
adc
mov
push
inc
retf
adc
add
idiv
ficomp
push
fst
mov
dec
fisttp
adc
inc
fcomp
cmps
rcl
cmp
adc
add
mov
push
popa
or
adc
mov
rcr
shl
fcmovu
scas
pop
std
(bad)
cmp
or
mov
sbb
cmp
and
movs
lods
jecxz
add
adc
icebp
jnp
push
jmp
je
pushf
adc
gs
in
fistp
hlt
in
adc
retf
and
enter
fs
das
into
push
in
in
jge
inc
dec
xor
mov
scas
out
imul
mov
test
and
and
jp
adc
popf
add
icebp
xor
push
das
jno
jge
adc
adc
adc
dec
js
movs
pop
out
adc
push
cli
xchg
cli
sbb
(bad)
das
mov
cmps
(bad)
jns
xchg
movs
mov
popf
movs
sbb
jnp
mov
jb
ret
sub
lfs
cld
sbb
arpl
inc
push
in
and
(bad)
and
mov
clc
inc
in
retf
enter
or
std
push
pop
mov
adc
pop
retf
test
ins
push
inc
inc
adc
and
inc
or
adc
retf
mov
aad
in
or
jno
repz
out
xor
and
add
sbb
int3
pop
dec
lods
adc
es
cmp
mov
adc
repz
mul
cdq
inc
xchg
cdq
aam
ficomp
call
inc
mov
dec
cs
dec
aam
loop
cmps
inc
cmp
retf
jmp
addr16
and
lods
mov
jecxz
in
lods
push
loopne
sbb
xor
scas
xchg
push
aad
or
jo
popf
sub
imul
out
mov
cld
add
cli
pop
stos
sar
int3
in
stos
mov
pop
mov
cmps
or
sbb
adc
sbb
int3
and
xchg
cmp
pop
or
mov
or
xchg
and
adc
imul
cs
jmp
xor
xchg
push
xor
adc
jne
aam
cmp
int3
cwde
mov
pop
jg
push
push
cld
and
adc
pop
jo
xchg
adc
test
inc
cmp
push
je
xor
sbb
xchg
mov
xor
inc
jmp
int3
add
fcomp
pop
ret
mov
or
(bad)
out
imul
std
ret
test
push
not
je
jge
mov
(bad)
sbb
cld
fstp
fcom
sub
pop
or
mov
es
not
adc
in
inc
push
enter
adc
cs
pop
or
dec
sub
(bad)
mov
into
(bad)
daa
adc
and
shl
adc
ror
pop
cs
cmp
xchg
(bad)
push
inc
add
imul
adc
cmp
cwde
xor
mov
xchg
stos
or
int
shr
rcl
jns
loopne
and
adc
cdq
outs
div
mov
inc
adc
adc
aam
pop
ss
pop
les
dec
mov
sub
xor
aaa
cmp
sbb
retf
push
push
and
aaa
and
adc
dec
loop
xor
call
lea
inc
shr
ret
sbb
int3
jne
push
out
es
les
xlat
add
adc
dec
shl
rcl
enter
adc
mov
add
mov
and
leave
adc
jg
xchg
dec
hlt
push
jge
dec
movs
adc
xlat
and
sbb
pop
push
cmp
cmp
push
jp
jno
xchg
nop
adc
ret
dec
push
sbb
jne
xor
xchg
sbb
pop
daa
icebp
stc
xor
mov
inc
pop
aam
sub
stos
adc
mov
mov
push
xor
xlat
cli
lahf
push
pop
lar
imul
std
pop
mov
add
je
aaa
lods
test
mov
out
lock
add
pop
cld
jnp
popf
hlt
mov
sub
imul
(bad)
sbb
cmp
push
in
pop
mov
idiv
xchg
or
fcom
xchg
lods
stos
popf
shl
repz
xchg
adc
ss
jae
xlat
push
int
jb
sbb
call
dec
inc
adc
movs
mov
test
ins
sbb
pop
mov
call
mov
add
movs
push
pusha
int
imul
sbb
jbe
dec
add
js
push
pop
dec
or
or
mov
mov
push
mov
inc
call
dec
hlt
cmps
out
aaa
arpl
mov
sub
push
mov
mov
inc
mov
adc
xor
push
(bad)
push
cmc
(bad)
jae
int3
cmp
ror
or
xor
mov
jp
mov
cmp
push
adc
stos
xor
pop
jl
data16
mov
in
mov
repnz
in
pusha
mov
inc
pop
xor
mov
push
dec
int3
aas
xor
inc
out
xchg
nop
mov
lods
mov
mov
bound
add
adc
fwait
xchg
(bad)
push
ins
loopne
in
or
adc
xchg
adc
and
xchg
push
adc
nop
cli
setae
test
cwde
sbb
cmp
imul
loopne
sti
mov
in
dec
adc
pop
idiv
jno
ss
pop
popa
iret
idiv
test
add
adc
test
xchg
std
xlat
push
dec
lock
fs
xor
adc
stos
cmp
or
push
xor
dec
xchg
adc
aam
daa
fnstsw
loopne
test
call
pop
adc
out
sub
xor
mov
shr
xchg
fwait
ror
bnd
fsubr
loope
or
mov
aaa
pop
adc
sub
jae
jb
push
xor
es
add
ret
cmp
(bad)
ficom
mov
jnp
cwde
push
je
cs
mov
jge
mov
mov
and
cdq
mov
call
cli
jge
add
sub
aas
mov
sbb
cld
push
icebp
adc
and
cmp
push
sbb
aad
inc
sub
outs
mov
inc
mov
or
ins
xor
xor
nop
mov
sbb
lahf
push
adc
dec
or
lock
mov
adc
mov
inc
imul
adc
xlat
inc
or
xor
fsub
cmp
es
pop
imul
cld
retf
pop
jl
jmp
dec
mov
cmp
jno
sbb
cmp
dec
jne
cli
adc
clc
pop
ss
push
test
dec
sar
fs
daa
mov
pop
popf
test
push
js
ss
xchg
and
aaa
arpl
adc
cmp
in
call
je
xchg
sti
loope
push
push
push
jg
dec
mov
cmp
push
push
xor
mov
adc
sub
cmp
std
lea
or
mov
mov
xchg
(bad)
hlt
ja
mov
inc
sbb
or
xchg
outs
inc
sahf
mov
xor
inc
xchg
daa
fsub
sbb
dec
adc
mov
jno
inc
cs
cdq
push
(bad)
adc
daa
fs
ins
dec
xor
scas
iret
scas
popf
popa
test
and
in
mov
push
push
hlt
sbb
adc
inc
in
mov
cwde
and
or
mul
ins
test
mov
dec
sub
xor
and
adc
dec
sub
test
adc
adc
mov
das
fs
cmps
push
cs
pop
inc
jne
or
lods
movs
outs
sahf
data16
jo
push
xchg
sar
mov
repnz
popa
xor
loopne
xchg
sub
pop
xor
jmp
shl
cmp
adc
or
stc
add
adc
mov
mov
adc
mov
pop
cmp
int
pop
jb
push
cld
ret
push
or
hlt
js
call
mov
cmp
sub
(bad)
mov
or
scas
adc
xchg
(bad)
inc
xchg
adc
sub
adc
call
hlt
adc
mov
shl
jmp
adc
jno
stos
xchg
shl
cmp
lds
jae
inc
push
mov
fcomp
jmp
fdiv
rcl
popf
jae
inc
in
enter
xor
pop
aam
dec
xor
movs
pop
adc
rcl
adc
cmp
or
or
cld
dec
arpl
popf
xchg
outs
(bad)
stos
adc
icebp
iret
pop
push
xor
int3
adc
mov
or
outs
test
push
aas
aam
mov
adc
(bad)
sti
out
pop
rol
adc
cwde
pop
pop
mov
(bad)
adc
pop
pop
push
adc
push
xor
mov
clc
and
mul
es
aam
jle
push
fisub
xchg
push
movs
stos
jno
xchg
mov
pusha
pop
adc
jmp
fidiv
lods
mov
test
popa
adc
or
mov
pop
aam
inc
fldenv
mov
xchg
cmps
adc
xchg
pop
cmc
movs
dec
aad
sar
sub
test
clc
and
cmp
push
pusha
imul
rol
popf
jmp
xchg
xchg
add
and
pop
adc
cmp
je
repnz
xor
bound
mov
fst
imul
xlat
adc
cdq
cmp
popa
data16
loopne
push
in
imul
jecxz
pop
sbb
or
inc
mov
imul
pop
cdq
adc
xchg
pushf
jne
rcl
and
sti
cdq
jae
push
bound
sar
in
xchg
mov
sbb
(bad)
clc
pop
je
fs
xor
push
and
adc
es
dec
fcomp
sub
out
popf
inc
jae
jmp
pop
imul
loopne
add
adc
rcl
xchg
idiv
jnp
(bad)
retf
in
xchg
cli
inc
or
jnp
or
aad
add
aam
dec
je
ds
xor
outs
idiv
mov
cld
adc
or
repz
add
aam
adc
xchg
cmp
js
push
adc
out
xchg
adc
jns
mov
mov
mov
jae
shr
sbb
cmps
mov
arpl
cld
push
or
fwait
cmp
inc
(bad)
out
(bad)
adc
in
cld
fldcw
(bad)
pop
movs
ins
loopne
ret
mov
daa
nop/reserved
call
in
add
fs
jns
dec
or
sbb
leave
add
icebp
pop
adc
xor
sbb
shl
lea
xchg
ja
shr
lahf
call
mov
xor
xchg
fldcw
jbe
mov
xor
dec
pop
mov
in
mov
lea
loopne
jmp
aam
fwait
mov
aam
mov
xchg
loope
lahf
xchg
push
mov
std
and
adc
ins
fcmovbe
adc
fadd
and
push
into
unpcklps
inc
sub
or
vpsubsb
jge
ds
gs
xlat
xchg
adc
addps
add
pop
push
pop
or
sbb
sub
iret
mov
xchg
(bad)
in
aam
or
cmp
xchg
lds
or
(bad)
mov
push
mov
push
repnz
fs
fsubr
xchg
xchg
mov
sub
popf
movs
dec
std
ss
or
cmc
push
icebp
push
imul
scas
sbb
jbe
mov
out
adc
retf
push
lock
pop
sbb
test
test
jo
sub
call
mov
cs
(bad)
jb
adc
mov
(bad)
das
into
std
dec
or
and
ret
xchg
xchg
sbb
mov
adc
jp
xchg
dec
jmp
outs
adc
mov
xchg
adc
sub
imul
in
xor
je
inc
popa
adc
(bad)
rcl
add
and
int3
adc
(bad)
adc
push
sti
xchg
out
add
aaa
adc
mov
adc
emms
sub
add
lods
sbb
in
xchg
pop
xor
leave
es
ins
xchg
int
arpl
pusha
in
adc
retf
fisubr
out
out
pop
ins
add
std
or
je
pop
adc
sbb
stos
xchg
mov
inc
push
mov
call
outs
loopne
sbb
retf
jmp
cld
outs
add
xor
xchg
cli
arpl
(bad)
sbb
and
xchg
jl
inc
arpl
in
popf
jb
stc
xchg
xchg
lock
sub
adc
fwait
popa
mov
pop
test
inc
pop
retf
dec
out
inc
push
mov
(bad)
cmp
rcl
cmp
repnz
rol
mov
cmp
shl
loop
dec
jb
arpl
xor
movs
shl
(bad)
ficomp
lahf
js
imul
les
mov
aam
jnp
adc
call
pushf
bound
mov
add
dec
aam
push
sub
aad
xor
in
scas
sub
mov
sub
adc
adc
cmp
fcomp
dec
(bad)
shl
aas
add
rcr
sub
mov
dec
ss
je
adc
in
int
or
and
jmp
sub
aam
inc
mov
out
out
adc
or
fsub
adc
or
jp
mov
mov
mov
aas
mov
(bad)
cmc
pop
xor
enter
lods
add
cmp
push
imul
dec
jmp
adc
lock
int
sub
inc
xchg
sub
nop
sbb
shl
fld
js
mov
push
pop
ja
jge
sbb
sub
mov
test
or
sbb
mov
adc
mov
xor
xor
adc
jmp
or
xor
push
inc
add
cmp
or
clc
xor
int
pop
jecxz
and
enter
dec
mov
cmp
push
push
push
and
rcl
fst
ficomp
inc
stos
push
out
xor
test
scas
or
test
out
cmp
je
das
ds
mov
xchg
arpl
pop
pop
cmps
adc
pop
imul
cmc
bound
movs
gs
mov
push
arpl
je
jmp
not
dec
ja
jns
mov
iret
cmp
scas
and
in
jne
in
popa
das
xlat
adc
rcr
adc
push
mov
iret
sbb
adc
and
jg
out
or
pop
ret
sbb
pop
push
sub
mov
xchg
add
push
leave
stos
push
pop
push
pop
adc
sbb
fldenv
repnz
xchg
dec
stc
sahf
fist
sbb
test
add
add
xchg
imul
jo
add
daa
sbb
std
push
rep
add
add
sbb
dec
fcom
mov
dec
retf
je
rcr
in
mov
sub
mov
cmp
or
ret
and
pop
pop
(bad)
in
inc
movs
mov
and
sti
test
adc
mov
add
adc
pop
inc
push
mov
mov
in
inc
push
test
sbb
call
jmp
movs
xchg
pop
xchg
mov
xchg
push
scas
iret
inc
adc
aad
test
mov
mov
test
pop
or
sub
sub
dec
cli
adc
xchg
outs
or
clc
mov
add
adc
jnp
pop
gs
sar
and
shl
retf
xchg
dec
mov
add
pop
imul
sahf
cmp
push
push
mov
cmps
hlt
push
pop
sbb
and
add
js
std
pop
mov
adc
rol
aam
aaa
std
lea
mov
call
in
inc
int3
repz
in
or
inc
(bad)
lods
push
movs
adc
and
mov
adc
or
ret
xchg
dec
repnz
movs
out
push
xor
mov
shr
sbb
aam
mov
out
dec
push
cmp
loop
mov
in
pop
mov
mov
inc
(bad)
xchg
fadd
(bad)
idiv
mov
inc
or
mov
push
rcr
mov
jo
sbb
add
sub
sahf
xor
adc
mov
fs
stc
push
jle
rcl
retf
mov
adc
xchg
mov
cmp
outs
(bad)
adc
adc
xchg
in
pop
add
arpl
je
aad
std
sbb
stos
mov
inc
adc
adc
mul
pusha
or
cld
aad
sbb
sbb
xchg
or
pop
xchg
movs
pop
xchg
mov
pusha
and
loopne
into
out
sub
addr16
in
movs
imul
pop
and
xor
sub
push
and
data16
inc
je
stc
adc
out
cs
cmps
sub
scas
(bad)
sbb
jmp
sub
add
cmp
xchg
lahf
xchg
mov
inc
xchg
test
mov
outs
je
adc
into
(bad)
movs
movs
pop
xor
adc
or
pop
dec
add
xor
aaa
test
sbb
mov
jl
mov
frstor
ret
jge
adc
mov
cmp
adc
dec
xchg
movzx
fisubr
mov
fdiv
sbb
rcl
adc
fidivr
jl
loop
outs
in
cli
and
inc
pop
clc
sub
ret
loop
shl
mov
mov
mov
jb
aas
jno
dec
and
cdq
adc
cmp
out
mov
(bad)
and
add
int3
pop
repnz
sbb
jp
push
mov
mov
add
push
inc
cli
cmp
(bad)
sbb
gs
push
sub
retf
hlt
xchg
push
les
push
dec
scas
pop
mov
xor
push
aaa
sti
xchg
mov
push
cs
sbb
push
adc
aam
das
test
int3
cli
jmp
adc
div
or
inc
inc
cmps
xor
push
in
jle
push
xchg
xchg
mov
das
mov
jmp
adc
out
icebp
jns
push
cmp
adc
enter
mov
out
jnp
aad
mov
das
les
repz
adc
aas
sbb
mov
sbb
mov
ds
sub
inc
dec
sub
pop
sbb
inc
push
adc
enter
ss
or
adc
add
dec
test
bswap
in
movs
mov
and
pop
ja
mov
jp
mov
inc
mov
ss
dec
bound
sbb
push
sub
iret
sbb
stos
loop
adc
pop
inc
(bad)
in
fs
jae
or
dec
repnz
fst
out
xchg
test
adc
sbb
es
mov
shl
or
add
add
adc
aad
bound
sub
push
adc
dec
or
in
push
jbe
mov
and
xor
loop
gs
or
push
je
neg
ret
adc
out
cld
jbe
cmp
test
sub
fcom
shr
adc
and
das
jmp
in
xchg
(bad)
push
add
xor
sbb
xchg
push
adc
or
scas
adc
or
xor
aam
retf
adc
pop
push
aaa
rcl
mov
and
pop
mov
add
mov
adc
mov
adc
mov
lods
or
ss
jmp
add
cmps
aam
adc
add
enter
in
jne
mov
xor
adc
in
ja
daa
movs
sub
inc
push
aad
mov
mov
cmps
xor
jbe
adc
cdq
inc
dec
sbb
lock
(bad)
pop
das
rol
sub
pop
pop
adc
arpl
out
xor
jmp
adc
aam
cmp
push
mov
sub
movs
jg
ins
xlat
in
xchg
sahf
adc
es
fmul
mov
fisub
fisttp
sub
or
push
cwde
adc
jge
fbld
dec
ja
sub
xor
sbb
(bad)
inc
pop
shr
and
dec
cmp
fadd
xchg
jmp
stos
inc
dec
mov
xchg
and
in
lods
in
adc
cmc
sbb
int3
add
pushf
push
xchg
cmc
inc
aaa
sbb
xchg
retf
retf
mov
shl
jnp
jecxz
adc
push
ins
int3
aaa
xchg
and
adc
push
pusha
rcr
mov
ror
inc
push
jp
push
ins
sbb
push
push
sub
push
ins
dec
push
inc
test
jne
jmp
adc
add
arpl
repz
dec
cmp
sbb
mov
les
sahf
cld
adc
sbb
push
pushf
loope
adc
inc
or
push
adc
call
jmp
jmp
dec
push
inc
repz
cdq
aad
jns
cmp
or
adc
push
sub
xor
fnstenv
movs
test
jne
adc
mov
adc
daa
push
add
fistp
xchg
je
jecxz
in
test
adc
je
xor
into
jnp
and
adc
popa
jp
inc
sub
xor
pop
push
shl
test
mov
lods
jecxz
mov
cmps
adc
(bad)
push
mov
shl
call
mov
adc
push
aad
iret
inc
and
sbb
std
push
leave
xchg
xchg
sbb
in
(bad)
cmp
mov
ficomp
mov
mov
retf
push
and
xor
mov
xor
pushf
xchg
xchg
or
sar
cmp
dec
xor
add
dec
or
jle
sub
cld
xor
cmp
ja
xor
cmps
sbb
push
pop
sbb
mov
das
fbld
pop
cmc
int3
lea
retf
jge
or
fisttp
aas
xlat
pushf
(bad)
loope
out
std
jmp
xchg
imul
out
cmp
sub
cmp
(bad)
mov
jno
push
adc
dec
icebp
lds
jns
adc
jb
mov
fnstenv
mov
adc
inc
or
outs
cmc
adc
(bad)
aam
enter
aam
ficomp
mov
shl
pop
adc
test
fidiv
sub
call
xchg
mov
push
adc
dec
(bad)
test
popa
jmp
jae
xchg
jl
ficom
rol
lahf
jg
pop
pop
loopne
hlt
das
ds
js
test
lods
push
or
nop
in
ja
and
mov
call
or
out
lea
or
cld
xchg
mov
ror
cmps
xor
adc
inc
je
test
dec
movs
aad
mov
dec
push
inc
rcr
rcl
scas
addr16
push
mov
xor
dec
inc
(bad)
adc
push
adc
jp
jns
or
nop
adc
sar
test
and
and
inc
sub
ss
sbb
fdiv
sbb
cdq
retf
jb
and
mov
rcl
or
mov
adc
mov
test
adc
(bad)
repz
repnz
jmp
push
xor
fnstsw
xor
and
push
sti
arpl
jb
push
jg
js
xchg
push
dec
rol
je
adc
xor
and
pop
adc
inc
out
(bad)
and
adc
and
or
sar
mov
aaa
js
mul
mov
aam
ret
int
scas
(bad)
adc
js
mov
push
xchg
imul
add
dec
mov
jmp
ret
and
lea
add
shr
movs
sub
test
repnz
adc
pusha
inc
pop
fmul
add
add
sub
aad
adc
dec
push
dec
xchg
mov
sti
mov
fdiv
sbb
cmps
adc
data16
(bad)
cdq
jns
js
cld
pop
gs
pop
adc
push
sub
xchg
adc
(bad)
ins
mov
add
pop
adc
push
leave
(bad)
pop
push
adc
out
add
inc
dec
cli
jae
adc
lds
hlt
pushf
movs
xchg
and
dec
pop
add
(bad)
and
pop
sub
je
(bad)
in
jle
loop
sub
loopne
lea
stc
xchg
adc
inc
shl
cmp
rcr
add
or
sub
inc
push
mov
sbb
mov
mov
xchg
pusha
push
push
sahf
add
adc
addr16
jne
retf
sub
push
pop
jmp
nop
enter
cs
bound
(bad)
hlt
daa
test
inc
cmps
es
movs
jle
(bad)
stos
aad
std
jmp
adc
jmp
mov
call
bnd
sbb
mov
out
cmp
mov
loope
mov
add
gs
cmp
es
in
cdq
dec
lahf
xor
jbe
jecxz
cld
dec
leave
jp
call
or
xchg
adc
into
hlt
fsub
jb
mov
fisttp
out
leave
and
add
into
push
retf
sub
in
mov
push
mov
repnz
lods
add
xlat
sbb
adc
(bad)
cmp
or
loopne
or
cmps
push
and
ins
and
xchg
cmp
mov
cmp
movs
xchg
or
cmc
fsub
hlt
fld
(bad)
call
jl
and
cmp
sub
jae
mov
add
imul
neg
mov
lock
dec
xor
and
out
jmp
adc
(bad)
fisttp
mov
je
loopne
dec
loopne
or
test
cmps
in
(bad)
push
jae
repnz
cmp
adc
jnp
inc
add
(bad)
add
jmp
push
adc
adc
mov
inc
ror
xlat
adc
lahf
jmp
(bad)
sub
xchg
xor
je
stos
xchg
xchg
adc
mov
pop
clc
adc
xchg
jge
jne
push
bound
je
mov
sbb
test
cwde
fcomi
addr16
adc
ds
daa
adc
xchg
add
jge
gs
pop
push
jmp
pop
add
ins
fisttp
sbb
cwde
adc
xchg
or
(bad)
xor
or
std
jl
mov
cmp
fadd
lds
adc
bnd
test
out
scas
in
mov
add
pushf
and
push
mov
out
shl
sbb
stos
or
lea
mov
nop
outs
xor
mov
pop
loope
or
cmps
xchg
inc
loopne
pop
xor
or
sbb
shl
adc
mov
xchg
cmp
adc
pop
fwait
popa
stos
gs
clc
in
add
sahf
cli
es
adc
or
call
pop
repnz
adc
add
push
arpl
adc
fs
inc
loope
adc
test
pushf
or
mov
mov
cli
cs
aam
pop
fisub
pop
sbb
in
mov
in
imul
stos
jb
and
jmp
jecxz
mov
mov
int3
clc
push
and
sahf
test
mov
sbb
adc
jbe
cmp
add
sti
call
ins
mov
dec
mov
call
rol
inc
lock
or
fisubr
dec
out
popa
ins
push
dec
and
hlt
pusha
xlat
test
adc
xchg
fisttp
stos
sbb
xchg
cmp
es
out
stc
loop
inc
xchg
or
and
mov
and
out
and
sbb
and
pushf
(bad)
cwde
(bad)
xchg
pop
and
add
push
dec
xor
lods
std
adc
ret
pop
test
in
add
out
xchg
push
(bad)
jg
mov
loop
popa
fsub
sub
loope
ficom
push
test
je
inc
push
xchg
xor
retf
jo
std
aam
popf
das
push
sbb
xor
(bad)
inc
add
xor
ins
pop
pusha
fist
dec
(bad)
adc
and
xor
push
retf
enter
(bad)
(bad)
out
loopne
xor
xchg
sbb
test
jl
call
mov
dec
es
js
adc
sbb
shr
xor
push
dec
inc
push
retf
push
mov
adc
call
dec
xchg
inc
int3
mov
sub
(bad)
fsub
cmps
mov
retf
out
addr16
fs
and
cmp
in
ja
call
dec
and
rol
xchg
add
nop
cld
mov
or
sahf
pop
aad
mov
lods
outs
daa
sahf
imul
(bad)
cld
pop
fimul
mov
pop
jne
and
pop
cwde
neg
pop
loopne
cmp
enter
or
call
fisttp
push
in
mov
popa
cmc
and
sbb
jmp
mov
xchg
ror
pop
ret
sub
dec
jge
cmp
jmp
aam
xor
adc
xor
push
dec
aas
in
and
into
shl
loope
stos
loop
mov
cmc
dec
js
pop
xor
ss
inc
leave
adc
jno
cmp
cmp
and
rcl
adc
mov
popf
ins
xor
mov
cmp
and
movs
pop
inc
mov
mov
xchg
inc
mov
xor
loopne
inc
push
gs
imul
inc
jge
cld
xor
jo
cmp
(bad)
xchg
mov
pop
inc
adc
clc
aad
inc
ins
jne
push
rcr
and
mov
in
jl
lea
adc
imul
adc
mov
sbb
sar
in
mov
jmp
mov
lods
inc
mov
mov
or
and
push
std
fs
scas
pop
push
(bad)
iret
xlat
sbb
hlt
xor
mov
or
adc
mov
mov
xchg
fiadd
iret
adc
jmp
fcom
hlt
or
test
cs
jge
movs
xor
push
sbb
ds
nop
sub
xchg
and
inc
adc
jmp
adc
leave
adc
push
adc
and
inc
mov
jmp
fstp
into
leave
lock
cmp
hlt
and
outs
arpl
or
xor
hlt
xchg
jbe
inc
or
dec
push
ins
in
cdq
rcr
xor
add
leave
inc
push
test
aad
or
aaa
jmp
mov
jl
loope
(bad)
into
adc
nop
loopne
lahf
add
inc
pop
pop
mov
adc
xchg
scas
mov
mov
mov
inc
push
fcomp
jg
and
jae
adc
xchg
pop
jne
into
add
jmp
jle
mov
daa
xchg
das
jp
test
mov
pop
sbb
js
outs
in
or
xor
sbb
cmp
(bad)
push
xor
aam
dec
js
cmp
in
sti
aam
retf
or
les
and
adc
out
push
lock
out
retf
xor
inc
xchg
xchg
fs
push
retf
and
cmp
jle
jmp
or
add
push
adc
test
test
jmp
cld
repnz
lock
adc
cmp
loope
adc
ins
out
mov
adc
pop
data16
lods
add
loopne
cmp
cmp
sub
pop
cmp
popa
xchg
jecxz
mov
ins
push
cmp
pop
and
xchg
push
pop
sbb
adc
aas
mov
and
adc
push
xlat
inc
call
out
xchg
or
or
std
movs
pop
xchg
in
jbe
adc
adc
mov
cmps
xchg
sub
pop
(bad)
lods
xchg
cmp
retf
xchg
add
(bad)
(bad)
mov
cmp
push
scas
addr16
mov
retf
jmp
xchg
dec
sub
in
adc
nop
push
ja
fisttp
adc
je
mov
adc
bound
or
adc
cmp
aam
std
in
fwait
or
xor
pop
adc
mov
outs
adc
adc
test
dec
or
xchg
push
sbb
out
dec
sbb
adc
sahf
popf
push
mov
stos
aam
ret
xchg
dec
out
jo
fwait
adc
cmc
imul
rol
dec
fidivr
ret
push
pop
pusha
sar
movs
adc
repnz
stos
push
int3
adc
fistp
mov
repz
dec
push
pusha
sub
mov
aad
fsub
cmp
aad
fs
push
lea
xchg
scas
mov
pop
xor
inc
push
push
mov
fxch
xchg
inc
out
pop
nop
and
adc
adc
adc
lahf
jae
(bad)
call
xor
or
int3
hlt
mov
shl
adc
sub
in
retf
pop
in
int3
stc
dec
repz
xchg
cwde
les
js
mov
push
pushf
das
adc
fist
je
int3
pop
dec
out
mov
retf
inc
aad
pop
xchg
push
pop
adc
movs
es
repz
in
mov
loope
call
xchg
aam
lds
fsubr
jno
cld
fwait
rol
(bad)
in
into
lahf
jno
pop
sbb
mov
sbb
jge
sub
hlt
inc
les
pop
pushf
push
mov
push
out
push
cdq
jmp
adc
in
cmps
jge
pop
outs
cld
push
cmp
loop
mov
or
daa
pushf
ret
adc
push
cmp
cdq
adc
cmp
pop
das
push
mov
icebp
stc
pop
ins
or
and
sub
adc
pop
mov
into
xchg
leave
pop
shl
sub
adc
adc
xchg
sub
fwait
push
push
adc
jmp
push
out
push
adc
nop
inc
je
cwde
mov
popf
xchg
hlt
mov
xchg
shl
mov
repnz
aam
fstp
loopne
mov
cmps
int3
push
(bad)
mov
mov
xchg
sub
cmp
inc
push
xlat
ret
mov
(bad)
adc
or
or
jo
and
in
ss
xchg
jae
js
push
mov
std
retf
jno
push
sub
pop
mov
sub
imul
int3
repnz
sti
inc
(bad)
xor
out
push
pop
adc
mov
in
adc
ds
mov
mov
bound
inc
sub
sub
in
dec
retf
xchg
loopne
jecxz
test
mov
std
movs
sub
fisttp
fadd
scas
push
int3
mov
add
or
mov
push
xchg
pop
push
aas
jecxz
inc
jg
add
xchg
out
push
and
std
adc
mov
sub
cmp
(bad)
push
ins
jnp
test
enter
popa
adc
aam
stc
aas
push
or
push
sub
clc
mov
imul
cli
rcr
cmp
or
int3
outs
imul
std
xor
cli
fsub
xor
cdq
pusha
or
adc
dec
mov
ret
sub
not
cmc
dec
in
jno
add
and
xchg
or
push
repnz
mov
adc
or
jb
test
out
push
jmp
push
xor
aas
jecxz
or
out
mov
sub
sahf
imul
rcr
dec
or
xchg
aad
add
or
cli
xlat
test
fadd
gs
push
dec
mov
push
lahf
inc
hlt
aaa
jo
inc
jae
sbb
ficom
repz
xlat
mov
mov
xchg
xor
ins
pop
sbb
mov
sar
int3
or
in
movs
sbb
mov
xor
sar
adc
mov
cdq
jnp
mov
inc
fdivrp
xchg
mov
add
das
xor
mov
adc
adc
cld
mov
fist
loope
unpcklps
call
adc
jnp
xor
arpl
xor
inc
les
fs
adc
xchg
pop
test
cmp
mov
(bad)
jp
cmp
loope
mov
cmp
addr16
jg
out
xchg
and
adc
dec
adc
sbb
xchg
adc
mov
call
adc
adc
inc
push
scas
aam
jae
lds
sub
adc
daa
pop
sub
fwait
push
lods
sahf
fcmovnu
mov
das
xor
add
cdq
fbld
pop
rcr
ins
mov
fild
hlt
and
das
lahf
pop
test
xchg
js
push
(bad)
dec
pop
xchg
loopne
xor
fsubr
mov
ja
stos
adc
xor
sbb
and
jns
pusha
(bad)
adc
popa
pop
outs
in
jmp
cmc
adc
in
add
mov
jp
lds
sti
jnp
or
ins
sbb
adc
js
scas
clc
jmp
pop
or
and
pop
push
pop
mov
(bad)
and
sub
not
mov
cmc
or
stos
retf
cmp
shl
ins
jns
or
aaa
add
cmps
call
retf
mul
cwde
in
mov
retf
push
push
jo
call
inc
clc
add
pop
pop
mov
std
jo
ror
loop
call
sub
aam
mov
loope
std
in
adc
hlt
je
push
xor
add
dec
cmp
les
imul
ss
addr16
mov
add
popf
adc
jnp
ror
push
pushf
xlat
sbb
push
sub
jmp
sbb
inc
sub
push
jl
push
cmp
adc
rol
jmp
cs
xor
shr
cli
xor
and
in
loop
cmc
sbb
(bad)
cmp
out
adc
sub
out
ja
inc
shl
dec
adc
jbe
cmp
sub
inc
adc
push
jb
xchg
aas
inc
jecxz
cmp
cmc
adc
mov
jp
fwait
adc
repnz
and
xor
jne
mov
mov
pop
ror
inc
adc
jmp
idiv
xchg
xchg
cmps
and
out
in
lea
xchg
ins
add
das
aaa
rcl
jo
sbb
aaa
rol
adc
mov
push
mov
loop
imul
pop
mov
jne
fdivrp
test
push
ret
aam
ds
aad
xchg
ss
(bad)
adc
cmp
mov
(bad)
out
add
mov
aam
push
(bad)
jns
inc
mov
xchg
iret
aad
icebp
adc
movs
int3
hlt
rcr
aas
push
mov
adc
popa
push
mov
hlt
cmp
cmp
out
adc
add
mov
push
scas
xor
jmp
fdiv
outs
xchg
out
pop
or
aaa
inc
mov
outs
enter
hlt
bswap
adc
xor
push
stc
lock
or
xor
pop
adc
mov
cmp
lods
xchg
and
and
xchg
xor
(bad)
ficom
imul
xchg
mov
and
sub
xlat
push
aas
pushf
mov
adc
sub
or
or
mov
push
xchg
fadd
pop
inc
lods
adc
rcr
lea
push
int3
imul
jno
addr16
cmps
jbe
mov
push
push
adc
lahf
cmp
in
jl
ja
adc
xchg
sbb
dec
jno
push
adc
adc
stc
cmp
clc
fiadd
and
hlt
push
pop
sbb
sbb
out
push
ins
cmp
lea
sbb
adc
jmp
jmp
outs
cld
adc
push
ins
xor
gs
xlat
adc
push
mov
xor
push
outs
je
and
rol
jge
or
inc
adc
xchg
ins
push
iret
push
mov
xchg
cmc
adc
fisttp
shr
out
sbb
adc
fistp
add
imul
mov
cmp
adc
xchg
cli
ds
fist
jne
adc
sar
stc
imul
cdq
mul
cmp
leave
jnp
mov
adc
xchg
ror
sbb
sub
xchg
push
xchg
das
je
adc
ja
inc
xchg
xchg
sbb
push
aad
aam
adc
pop
fbstp
in
outs
jp
jno
xchg
or
add
popf
jno
sbb
push
mov
imul
clc
sub
mov
jae
lds
cmp
dec
out
loope
adc
test
dec
lock
fimul
adc
and
jg
lods
repz
pusha
inc
mov
sbb
cdq
pushf
and
in
jmp
and
cmc
xchg
pop
jmp
fldenv
fcomp
xor
pop
or
mov
sbb
(bad)
jg
fsubr
cmp
sbb
call
xchg
hlt
pop
jns
push
or
idiv
adc
iret
xchg
cmp
out
mov
daa
sbb
imul
inc
vpshlw
dec
jnp
in
adc
gs
imul
pop
sbb
dec
test
popf
cmovb
cmp
clc
cmp
outs
xor
pop
ror
add
mov
cdq
push
inc
xor
mov
popa
ret
leave
nop
mov
js
jmp
sub
aam
mov
das
mov
icebp
call
iret
cmp
adc
enter
cmp
or
icebp
(bad)
mov
sbb
sbb
fimul
push
es
mov
add
mov
sbb
adc
jne
push
xor
test
cld
mov
push
jge
mov
movs
fstp
jl
sbb
xlat
xchg
data16
daa
je
outs
(bad)
jmp
cwde
fwait
xor
inc
pop
sbb
outs
adc
or
mov
or
inc
mov
adc
xchg
pop
mov
test
cwde
popa
xor
pop
xchg
ins
adc
mov
mov
fdiv
inc
or
adc
inc
xchg
mov
adc
int3
push
add
gs
sahf
push
push
dec
loop
adc
push
cli
xchg
adc
pop
xor
lahf
pop
or
sbb
mov
data16
mov
les
movs
adc
sub
enter
dec
adc
push
stos
std
pushf
push
cs
pop
cmps
pop
hlt
jle
cld
jecxz
pop
dec
mov
mov
retf
mov
mov
pushf
jmp
mov
test
scas
cmp
ret
pop
clc
pushf
pop
cwde
sub
out
cmp
leave
sti
imul
mov
mov
les
ud1
xchg
aam
es
mov
cwde
leave
jbe
adc
mov
pushf
loope
lods
jns
inc
ds
out
scas
sbb
rcr
inc
or
retf
xor
add
and
sub
retf
sbb
leave
push
xchg
pop
imul
fmul
outs
adc
adc
or
adc
enter
sbb
ins
inc
adc
arpl
adc
(bad)
mov
fwait
mov
and
jmp
lods
lea
jne
xchg
hlt
sbb
in
adc
cwde
mov
ret
sub
push
in
dec
mov
adc
jnp
xor
mov
cmps
dec
pusha
push
in
in
int3
jae
sub
jb
adc
aaa
lahf
mov
in
arpl
pop
pop
scas
dec
add
mov
or
push
sub
aam
or
sbb
sbb
ins
leave
jmp
adc
cmp
aaa
neg
test
push
imul
pop
ret
add
push
out
jge
xor
inc
sub
lea
mov
jns
inc
add
loop
pop
adc
int3
ins
push
sbb
pop
push
mov
xor
test
and
inc
rcl
cld
or
or
nop
adc
shr
addr16
adc
jp
stc
lds
arpl
adc
aam
cwde
test
sub
jnp
cmc
mov
xor
cwde
ins
xchg
loope
les
rcl
frstor
dec
arpl
(bad)
fistp
push
lock
movs
inc
scas
push
and
mov
pop
adc
loope
popf
mov
push
adc
add
jmp
out
stc
sbb
repz
lds
mov
je
inc
add
or
shr
rol
dec
cld
or
icebp
xor
adc
gs
jb
jne
repz
push
ins
fild
sbb
adc
push
sbb
fisttp
scas
adc
push
mov
adc
lods
pop
adc
ins
(bad)
and
movs
popf
sbb
cld
adc
adc
dec
adc
shr
call
movs
test
cmps
pop
adc
xor
ja
loope
bound
addr16
stos
mov
mov
pop
cwde
xchg
rcl
push
adc
dec
(bad)
loopne
daa
xor
add
ror
lock
xchg
push
fwait
mov
jno
lods
setbe
adc
push
in
fcom
xchg
push
sar
jl
adc
inc
cmp
push
mov
and
cwde
mov
mov
pop
(bad)
out
or
ins
lock
sbb
vfixupimmps
mov
inc
xchg
hlt
jle
inc
sahf
push
pop
jp
push
fisttp
fidivr
mov
pop
mov
cmp
js
aad
cmp
stos
mov
repnz
or
sbb
stos
or
arpl
adc
jns
add
in
cmp
mov
movs
add
rcl
sub
sub
pop
test
pop
imul
lock
cmps
mov
sbb
js
les
aam
mov
out
push
mov
and
sbb
xor
push
es
xor
aaa
retf
inc
je
jge
or
xor
jl
test
retf
push
mov
or
lea
loope
aam
dec
jecxz
adc
mov
mov
ret
jl
adc
push
je
out
fdiv
cmp
adc
jno
jecxz
(bad)
push
in
adc
sbb
fcom
mov
loope
inc
or
cli
push
pop
ficomp
sbb
dec
ins
sub
not
jae
and
repnz
cli
xchg
adc
mov
int3
jnp
jae
or
cmp
ret
cmp
push
push
rcr
and
dec
je
dec
test
and
add
leave
mov
mov
std
mov
mov
in
fistp
mov
jbe
jecxz
jnp
in
out
pushf
xlat
bnd
sbb
jecxz
ins
sbb
imul
(bad)
adc
retf
sub
mov
xor
loope
hlt
cmps
das
ret
sbb
out
sub
mov
jecxz
xchg
adc
int
mov
xchg
adc
sbb
out
xor
cld
mov
dec
push
cdq
pop
stc
xlat
(bad)
js
or
daa
call
adc
arpl
push
out
vmovntps
in
and
jo
push
mov
mov
cmp
div
push
rcr
aad
test
cdq
add
inc
aam
cmps
xor
cmp
adc
xor
sbb
fucomp
xor
sbb
jne
out
out
adc
or
and
leave
sbb
cmp
hlt
data16
sub
retf
adc
inc
xor
pop
push
inc
out
das
test
sbb
rol
xchg
hlt
ret
clc
cmp
(bad)
and
adc
push
push
test
mov
or
rcr
loopne
mov
loop
inc
adc
ror
pop
(bad)
add
inc
mov
adc
cld
(bad)
mov
adc
cmp
sbb
xchg
add
and
sar
les
push
adc
loop
push
ret
mov
push
jne
push
mov
mov
lea
jmp
xchg
bound
in
mov
sbb
xchg
adc
pop
hlt
xor
out
add
les
movs
xchg
clc
xchg
(bad)
jmp
int3
cld
or
inc
shl
loop
or
jmp
repz
adc
hlt
pop
mov
dec
nop
push
adc
in
movs
ins
pop
cmp
cmp
xor
fdiv
sbb
aad
cmp
loope
into
xor
xchg
inc
mov
sub
xchg
push
addr16
adc
mov
xchg
adc
adc
mov
mov
adc
jb
scas
lock
mov
mov
mov
ja
icebp
cdq
jnp
inc
or
mov
jns
dec
mov
mov
imul
dec
jb
adc
popf
and
xchg
neg
fwait
adc
jno
add
inc
test
imul
(bad)
mov
sbb
mov
pop
adc
dec
lods
mov
push
pop
(bad)
adc
test
or
sbb
call
scas
loopne
dec
jns
stos
std
repnz
and
push
into
or
push
adc
xchg
jns
in
call
mov
ja
pop
sbb
aam
push
ss
sbb
cwde
mov
adc
je
fadd
add
pop
sub
cli
aaa
ror
mov
arpl
dec
les
cmp
je
mov
cdq
adc
fbstp
lods
mov
stos
stc
dec
mov
jl
adc
shr
mov
xor
adc
sbb
pop
push
mov
repnz
xor
sub
add
cvttps2pi
inc
xchg
jmp
cs
xchg
push
mov
jmp
adc
and
ins
adc
mov
pop
lea
adc
imul
out
je
xchg
sbb
push
pop
test
and
sbb
jne
sub
dec
in
lahf
bound
cmc
cld
push
mov
shr
jmp
inc
nop
es
lds
pop
and
and
hlt
push
fcomp
adc
mov
rcl
push
out
es
fs
push
cmp
pop
dec
xor
xchg
jnp
ja
add
out
inc
mov
xchg
std
mov
xor
mov
sub
lods
ins
and
add
inc
ds
push
sbb
in
jns
dec
ret
pop
fisubr
jae
cmp
cwde
push
sub
inc
jge
retf
icebp
cli
aam
sahf
add
into
loope
jb
mov
push
adc
pop
lock
xchg
fnstsw
fild
pushf
pop
hlt
mov
push
andps
sub
jmp
(bad)
pusha
int3
into
add
fsubr
hlt
push
and
pop
and
pop
adc
xchg
sub
add
cwde
sar
int3
outs
lahf
lods
fld
out
cld
fstp
dec
jmp
cmp
(bad)
test
lahf
std
cmp
scas
test
call
jl
cmc
inc
adc
or
shl
popf
movs
daa
cmp
xchg
imul
push
pop
or
lahf
ins
push
inc
ror
test
and
mov
sub
inc
rcr
sbb
in
ins
push
adc
int3
xor
inc
fmul
stc
loop
adc
mov
inc
jmp
cmp
retf
inc
repz
call
inc
imul
jns
iret
sbb
dec
adc
sub
adc
in
lock
add
cmp
xchg
aaa
xor
test
mov
sub
into
jp
fwait
jge
xchg
daa
adc
mov
jmp
sbb
mov
push
xor
sbb
mov
aam
(bad)
iret
ds
imul
pop
mov
lods
sub
rol
das
xchg
mov
mov
mov
cwde
leave
pop
mov
sub
inc
mov
pop
test
and
cs
adc
add
xchg
out
in
movs
xchg
pushf
push
xchg
xor
adc
push
fisubr
iret
cmps
arpl
mov
push
push
sub
xchg
mov
mov
cmp
(bad)
sbb
rcr
fild
sbb
cmp
inc
outs
in
pop
arpl
aad
aam
je
std
inc
fs
in
and
pusha
addr16
retf
sub
inc
cmp
imul
dec
adc
stc
aas
loope
sbb
shl
adc
loopne
mov
repz
in
adc
test
mul
je
in
and
mov
ss
adc
repz
hlt
add
cld
scas
cmp
add
je
mov
mov
aam
mov
scas
xor
dec
mov
rcr
xchg
jno
mov
je
jmp
in
cmp
pop
push
sahf
movs
xchg
add
pop
sbb
jg
xor
(bad)
mov
adc
fsub
mov
or
or
push
outs
scas
icebp
fdiv
call
mov
(bad)
push
movs
jno
ins
adc
scas
pushf
inc
push
add
cli
sbb
dec
aam
inc
call
lea
mov
push
or
or
mov
inc
test
in
(bad)
sub
in
push
and
movs
pop
(bad)
adc
rol
inc
in
ins
es
push
mov
adc
mov
scas
push
inc
dec
adc
or
mov
cmp
inc
lods
xchg
and
cld
cmps
test
out
and
pop
jl
retf
sbb
dec
ins
xor
dec
out
or
ss
cdq
lahf
push
mov
(bad)
aam
jne
mov
push
mov
movs
jmp
jbe
ins
je
dec
jle
ficom
repz
pop
ror
(bad)
inc
lods
sbb
(bad)
int3
sar
inc
push
xchg
cmps
leave
inc
inc
les
mov
dec
cmps
repz
jnp
sti
test
retf
xchg
pop
imul
push
or
and
mov
mov
pop
sub
fild
mov
repnz
mov
lahf
clc
das
int3
mov
ins
cmp
lods
jecxz
pop
xchg
mov
sahf
adc
mov
push
sti
adc
in
xchg
sbb
aad
call
mov
je
add
add
adc
jge
imul
xor
xchg
in
out
std
push
add
cwde
sti
bound
ins
(bad)
dec
sub
mov
movs
or
int3
sar
mov
je
retf
cli
mov
sub
cmp
cli
ret
adc
xchg
std
pop
les
jmp
and
sbb
ret
xchg
clc
out
push
mov
xchg
int3
sub
popf
jns
sbb
adc
js
adc
movzx
aam
in
ror
icebp
jmp
jp
fdivr
jne
inc
leave
cmps
xchg
into
mov
in
xor
hlt
arpl
jmp
je
mov
mov
sbb
jmp
mov
push
sbb
std
push
jbe
jno
jae
cli
push
or
jecxz
in
push
adc
arpl
add
pop
sahf
xor
out
hlt
sbb
mov
sub
int
mov
adc
jbe
data16
fidivr
mov
adc
adc
das
popf
fisttp
mov
ins
aad
(bad)
adc
cmc
icebp
rcl
sbb
lahf
xor
jg
movs
pop
and
lods
inc
mov
mov
sbb
and
mov
pushf
mov
adc
cmp
out
js
repz
loopne
call
adc
jg
imul
mov
pop
(bad)
data16
sbb
pop
out
adc
out
sbb
mov
jnp
jecxz
(bad)
jmp
add
sbb
push
mov
retf
mov
push
sbb
pop
mov
and
ins
xchg
push
mov
dec
ret
loope
jnp
push
xchg
mov
xor
mov
popf
ret
ret
xchg
adc
popa
gs
in
call
adc
lods
call
ss
fdivp
inc
in
pop
jmp
test
push
adc
aam
cmp
popa
pop
and
cwde
jmp
cmp
jmp
jnp
xor
call
(bad)
cmps
daa
push
mov
pushf
add
cmp
inc
je
mov
lods
inc
cmps
icebp
xchg
or
mov
mov
jp
test
adc
pop
push
dec
dec
xchg
push
nop
push
fstp
call
adc
mov
les
add
mov
adc
mov
mov
aad
xlat
int3
jmp
adc
cdq
inc
lods
mov
or
out
je
je
push
pop
repnz
pop
mov
or
push
inc
hlt
sub
gs
dec
xchg
xor
movs
cs
add
mov
inc
idiv
xchg
xor
std
push
mul
dec
setns
sbb
in
ins
pop
add
test
or
enter
mov
add
cld
lds
cmp
fnstenv
test
bound
fwait
out
adc
pop
gs
ss
pop
add
in
aas
aam
mov
jecxz
xor
loop
nop
clc
sub
inc
adc
adc
in
into
js
outs
pop
adc
mov
imul
pop
mov
das
and
xchg
adc
loop
mov
adc
ret
push
sbb
sbb
adc
or
in
or
pop
sti
xchg
sbb
xor
sar
sbb
add
das
pop
mov
add
ficom
clc
dec
stc
sub
lock
arpl
push
(bad)
push
pushf
call
aam
cmp
mov
arpl
ds
imul
xor
lea
jo
inc
cli
lods
adc
ja
(bad)
pop
adc
inc
out
mov
cmp
aas
push
les
and
jg
push
mov
adc
mov
dec
neg
or
push
mov
jp
ret
int3
pop
fwait
es
adc
sbb
push
in
jmp
cmp
repz
sbb
ins
jae
mov
cmp
popf
hlt
lds
push
out
xor
cmp
arpl
adc
mov
dec
mov
aaa
pop
je
xchg
sbb
sub
int
mov
call
push
outs
adc
movs
sbb
dec
repz
movs
ins
shr
push
dec
fdivrp
adc
iret
js
jmp
cmc
fst
dec
nop
loope
fisubr
adc
dec
jo
pop
arpl
adc
inc
popf
out
into
adc
test
popw
sub
mov
push
dec
xchg
ins
lds
xchg
addr16
inc
fwait
add
adc
fldcw
jp
(bad)
cwde
into
dec
cmps
jo
in
and
adc
movs
in
call
mov
pusha
cmp
ins
mov
push
add
sbb
add
loop
pop
mov
push
inc
fild
dec
clc
cs
lahf
push
scas
imul
mulps
adc
push
je
(bad)
sbb
inc
adc
jg
aam
es
jl
dec
cmps
xchg
dec
push
sub
or
sbb
adc
mov
sbb
push
rol
aas
jbe
mov
xlat
ins
ins
mov
sbb
dec
test
repz
cmp
icebp
call
dec
mov
jae
and
pop
jnp
or
xor
mov
adc
inc
and
pop
adc
jge
add
adc
shl
shr
xchg
inc
push
dec
fcmove
je
push
xor
mov
shr
adc
xor
mov
into
stos
cmps
adc
inc
inc
fild
(bad)
mov
mov
push
adc
retf
sub
adc
ins
out
sbb
add
outs
dec
jae
pop
fsub
push
out
xchg
lea
ret
or
nop
in
add
adc
jae
and
out
jo
jb
mov
cwde
adc
pop
push
dec
iret
jmp
mov
test
ret
adc
and
push
inc
push
sbb
retf
movs
es
add
mov
dec
rcl
in
addr16
jmp
xchg
jns
les
sub
ret
adc
or
xchg
xor
in
mov
add
scas
push
clc
adc
cmp
inc
adc
lea
jb
sbb
sbb
fsub
inc
loopne
sbb
cdq
mov
fdiv
xchg
adc
cs
and
iret
mov
sbb
retf
and
and
int3
jmp
adc
sahf
sbb
je
lods
int3
sbb
push
loope
lahf
jmp
sbb
mov
pop
and
call
fmul
std
hlt
and
pushf
inc
adc
mov
mov
sub
adc
sbb
cmp
sti
push
pop
mov
sbb
addr16
jmp
adc
mov
sar
pusha
inc
and
pop
cmp
ret
aam
sbb
jne
inc
cmp
sbb
daa
in
pop
xchg
mov
jmp
enter
pop
icebp
jmp
cmp
pop
sbb
pop
iret
dec
push
xchg
scas
cmp
dec
push
xchg
xor
adc
xchg
jb
xchg
hlt
xchg
mov
sbb
sbb
outs
imul
out
sub
dec
(bad)
push
cwde
shl
mov
adc
loope
adc
repnz
stc
fstp
adc
mov
push
push
adc
cdq
rcr
push
xor
dec
push
adc
xor
cs
ja
or
and
movs
xchg
pushf
pusha
xor
pop
pusha
in
jae
jne
cld
les
(bad)
fstp
ja
aam
jb
xor
cmp
pushf
mov
adc
inc
mov
sbb
mov
xor
inc
adc
cmp
inc
push
adc
add
leave
push
pop
sar
nop
fidiv
push
pop
jg
loop
fwait
in
imul
xchg
nop
mov
repnz
jg
xchg
mov
fild
mov
scas
mov
arpl
(bad)
lock
and
pop
mov
dec
sbb
movs
pop
idiv
xor
aad
jp
mov
mov
mov
in
cmps
mov
push
in
aaa
imul
mov
push
fstp
dec
jne
mov
push
mov
fstp
ffree
adc
sbb
movs
dec
push
xchg
ds
jbe
mov
mov
jo
dec
xchg
rcr
and
or
cmp
in
xchg
les
cmps
push
push
jne
les
dec
es
lds
int3
inc
xor
mov
sbb
mov
add
dec
adc
jnp
push
xor
pop
add
je
fs
stc
jmp
call
inc
inc
stc
movs
bound
leave
dec
aas
push
outs
repnz
ret
adc
cmp
int
sbb
lahf
aam
mov
pushf
(bad)
mov
xchg
sbb
mov
rol
rcr
aas
je
sbb
repz
pusha
gs
add
inc
aad
add
sti
mov
inc
ror
push
or
jmp
xchg
movs
lds
in
(bad)
je
fidivr
and
retf
inc
dec
mov
mov
dec
jmp
sub
pop
sbb
adc
sbb
adc
js
cs
push
add
and
lea
fist
pop
push
mov
jmp
adc
sar
jmp
clc
mov
adc
mov
in
pop
aam
out
jle
cmp
loop
fcom
fild
int3
les
mov
dec
jns
ret
pop
loopne
sbb
cmps
xchg
pop
xchg
jmp
mov
jl
ror
rcr
pusha
sbb
or
xlat
popf
sbb
arpl
mov
xchg
je
push
jmp
imul
aaa
add
xchg
retf
repz
adc
mov
popf
inc
and
fdiv
shl
adc
fdivr
mov
ja
setbe
mov
(bad)
loope
test
cmp
lods
xor
ins
sbb
les
push
dec
or
and
jmp
int3
add
or
xlat
pop
or
push
mov
daa
lods
call
sub
xchg
cmc
inc
(bad)
cmp
aas
in
jle
dec
movs
ja
mov
test
jmp
or
mov
or
js
mov
test
dec
add
es
popa
sub
call
mov
mov
popf
bound
mov
aam
xor
aaa
je
cmp
adc
in
sub
fbld
pop
mov
lods
ss
xor
int3
jns
pop
inc
add
dec
sbb
das
shl
lods
int3
gs
data16
sbb
hlt
or
push
mov
pop
adc
or
(bad)
pop
popa
movs
jmp
ror
jecxz
std
retf
dec
(bad)
test
xlat
cmps
push
jb
and
pop
mov
adc
adc
pusha
push
xchg
lock
adc
inc
repnz
or
fsubr
cmp
pop
adc
jmp
push
dec
jbe
mov
mov
pushf
aam
nop
das
sbb
adc
mov
mov
xlat
je
add
daa
and
aaa
xor
mov
lahf
dec
push
out
cmp
les
rcr
cmc
outs
xchg
cmp
mov
push
push
sbb
adc
shr
div
fdiv
mov
mov
retf
push
dec
mov
sub
cmc
in
retf
push
adc
pusha
sub
aas
mov
mov
cld
or
xchg
imul
sbb
bound
mov
or
lock
and
or
popa
ja
jl
push
jmp
cdq
fcom
add
lods
or
adc
xchg
in
fwait
mov
fist
jg
fdivrp
test
add
in
push
add
xor
call
mov
and
sub
pop
jae
sbb
out
adc
mov
pop
fcom
mov
dec
cmp
jle
adc
push
jnp
inc
test
push
push
mov
(bad)
push
inc
or
push
(bad)
(bad)
mov
in
lods
xor
jae
test
jns
mov
adc
inc
pop
xchg
(bad)
les
ins
xchg
mov
or
pop
xlat
sbb
mov
out
push
jecxz
dec
or
aam
hlt
push
addr16
pop
pop
inc
mov
push
push
call
loop
(bad)
fcom
ins
scas
in
adc
pop
mov
loope
jp
(bad)
mov
js
pop
push
stos
in
push
fwait
clc
add
xchg
pop
dec
adc
sub
jecxz
loopne
adc
(bad)
cld
sbb
mov
(bad)
sbb
loop
push
xchg
inc
adc
popf
out
loope
jns
stc
ss
xchg
stos
cmp
xor
sbb
xchg
gs
arpl
adc
(bad)
js
sbb
adc
or
cmp
mov
pause
movs
jbe
xchg
cmp
aam
adc
rcl
hlt
jnp
xchg
es
out
or
in
sub
jb
mov
adc
jge
popa
stos
icebp
add
pop
or
push
sbb
out
xchg
test
mov
push
ins
clc
std
mov
pop
inc
retf
mov
and
aas
scas
pop
pop
aas
xor
add
cmp
sbb
xor
(bad)
pushf
mov
inc
xchg
xchg
retf
mov
hlt
out
jne
and
dec
adc
mov
pop
and
out
dec
movs
pop
std
shl
lods
mov
mov
int3
pop
jmp
sbb
pop
cmc
push
sar
inc
cs
or
adc
dec
cs
push
sbb
and
or
iret
jle
mov
ret
aad
adc
and
stos
shrd
inc
out
lock
stos
or
fs
sahf
push
pop
pop
(bad)
stos
clc
mov
ins
cmps
movs
in
retf
mov
xor
sbb
jg
or
call
jge
inc
cmp
push
cwde
retf
jmp
sub
add
inc
inc
push
aaa
in
mov
mov
jne
test
es
scas
popa
sbb
popf
cmc
mov
popf
fs
xor
mov
int3
test
mov
icebp
ret
adc
sbb
jmp
daa
fdivr
std
mov
loop
rcr
add
sbb
jmp
das
jae
es
loop
adc
adc
popf
adc
mov
outs
(bad)
mov
jne
jecxz
mov
aam
xlat
pusha
pop
sbb
dec
aam
mov
xchg
test
xor
pushf
inc
or
lea
adc
cmps
mov
pop
adc
std
popf
(bad)
jns
inc
jp
inc
push
inc
cmps
dec
mov
xor
outs
dec
cmp
cmp
fadd
icebp
outs
mov
ror
push
nop
adc
enter
ds
mov
push
stc
and
bound
xchg
ins
dec
mov
dec
aaa
hlt
adc
cdq
shl
mov
mov
loop
mov
std
push
(bad)
dec
dec
adc
sbb
inc
adc
movs
mov
ins
lahf
xchg
adc
mov
rcl
or
lds
add
movs
data16
push
test
mov
sbb
je
pop
jecxz
xchg
pop
cmp
and
mov
mov
not
(bad)
es
push
dec
and
mov
xchg
jg
popf
in
std
mov
aaa
cmp
mov
test
pushf
in
cmps
aam
mov
pushf
(bad)
adc
hlt
mov
fsubr
pushf
mov
adc
fcom
mov
pop
aam
mov
adc
rcl
sar
rol
adc
add
aad
aaa
pop
rcl
cmp
pop
xor
ret
imul
sbb
ficomp
je
out
scas
stc
cmp
lea
jmp
adc
xor
add
add
in
retf
push
pop
lahf
jl
mov
jle
jecxz
mov
pushf
xchg
test
adc
mov
lock
rcr
sbb
mov
inc
pop
mov
and
pop
les
arpl
mov
mov
adc
mov
pop
fnstcw
retf
ror
in
hlt
stos
xor
adc
pop
fidivr
and
lods
jb
add
sub
pop
adc
in
push
data16
pop
adc
inc
dec
mov
shl
sub
aas
mov
mov
cmp
test
adc
(bad)
xchg
fld
add
or
push
sub
and
and
xchg
pop
mov
push
adc
test
loop
iret
pop
cmc
push
push
dec
pop
(bad)
cli
xchg
dec
nop
xchg
or
adc
mov
xchg
xchg
mov
iret
add
out
scas
aaa
adc
icebp
pop
pop
pushf
ret
popf
push
adc
xor
int
cli
inc
inc
xchg
fsub
inc
je
jge
mov
aad
pop
xchg
rol
mov
push
adc
dec
cs
sub
push
lds
push
pop
adc
ss
and
pop
scas
adc
jmp
push
out
out
cmp
adc
cmp
mov
test
test
jo
adc
fst
pop
jle
sub
addr16
dec
xchg
sbb
mov
ja
sbb
sub
adc
aam
push
add
imul
jmp
enter
clc
in
xor
adc
add
sbb
jl
fcom
cmp
sbb
adc
test
mov
dec
xchg
xor
js
inc
mov
jp
bound
cmp
cs
call
add
adc
rol
not
adc
mov
les
mov
jno
and
xor
das
into
sbb
mov
cli
cmc
adc
add
adc
xor
jle
xchg
mov
aam
neg
clc
aad
jnp
adc
shl
xlat
pop
loopne
sbb
rol
pop
jl
pop
jae
sub
std
add
sub
xor
xor
popf
mov
push
dec
push
jmp
cld
xchg
shr
xchg
pop
adc
xor
sub
mov
cmp
int
add
cwde
cmp
iret
xchg
cdq
call
hlt
sbb
inc
jle
adc
or
adc
sbb
stc
call
pop
(bad)
cmp
adc
fcomp
das
mov
cmps
out
push
shl
mov
cld
jmp
loop
mov
push
cmp
(bad)
cmp
cmp
xchg
and
pushf
add
shr
push
cmp
mov
dec
scas
neg
and
push
stc
lahf
xor
xchg
in
pop
repz
push
adc
sbb
push
cmp
and
in
mov
xor
test
push
push
adc
(bad)
dec
xor
adc
out
aam
popa
jl
and
loop
push
xchg
sbb
jae
adc
or
or
mov
mov
in
addr16
shl
cli
pop
mov
push
adc
lods
mov
and
out
jnp
vmovdqa
push
dec
sbb
mov
mov
ins
inc
mov
int3
push
sar
cmps
hlt
icebp
mov
cmp
and
hlt
or
cld
push
daa
fiadd
add
icebp
and
jmp
popa
mov
retf
in
jecxz
cmps
inc
xchg
daa
in
sbb
retf
fcom
fist
fwait
repz
mov
xchg
out
(bad)
sti
jmp
je
adc
retf
or
hlt
inc
(bad)
pop
aad
sahf
jmp
and
loope
mov
and
sbb
test
mul
in
in
inc
jecxz
int
dec
ins
sub
hlt
retf
stos
mov
jne
fwait
xor
hlt
lahf
dec
fisttp
(bad)
xor
dec
or
inc
pop
pop
cmp
test
or
adc
mov
inc
aas
inc
pop
out
xlat
pusha
in
mov
aad
pop
adc
sbb
adc
push
ror
xchg
rol
xor
mov
out
in
leave
add
cwde
pop
adc
into
(bad)
out
cdq
(bad)
aad
and
lods
push
fadd
repnz
hlt
sbb
mov
mov
retf
adc
and
or
push
mov
adc
(bad)
xor
sub
adc
repnz
xchg
sti
dec
arpl
mov
xchg
test
imul
hlt
or
and
add
les
arpl
out
das
pop
adc
outs
and
sub
adc
enter
sbb
aas
pop
adc
jge
push
xchg
pop
imul
xor
or
mov
dec
test
fsubr
stos
add
fisubr
aad
and
iret
mov
lods
je
adc
in
hlt
push
adc
aam
aad
jbe
xchg
mov
sti
sbb
adc
out
xor
dec
retf
adc
adc
test
cmps
dec
repnz
es
or
call
je
jno
and
mov
add
inc
retf
jecxz
cs
push
xor
sbb
and
xor
xchg
jle
jl
add
adc
add
enter
jle
or
cmp
retf
out
clc
idiv
mov
xchg
or
jnp
das
push
rcr
jg
push
adc
mov
and
shl
xchg
xor
pop
inc
dec
retf
xor
daa
test
std
push
mov
test
es
movs
out
shl
jno
int
adc
int3
out
mov
add
(bad)
mov
and
xchg
in
lods
(bad)
loope
not
sti
sub
retf
ds
cmp
xchg
bound
jmp
call
dec
and
gs
nop
mov
sub
fmul
outs
push
xchg
xchg
call
mov
jb
(bad)
es
cli
(bad)
or
xchg
(bad)
rcr
cdq
test
lock
(bad)
imul
dec
xchg
inc
in
retf
ds
out
inc
pushf
and
repnz
cdq
fsub
pop
lds
stos
sbb
dec
mov
jo
or
push
or
jmp
pop
sti
mov
adc
mov
xor
xlat
mov
adc
push
mov
retf
repz
add
in
mov
in
cmc
adc
arpl
add
add
data16
sbb
sub
mov
(bad)
clc
cmp
push
test
pop
in
in
sahf
mov
aam
adc
fdivr
out
sub
adc
mov
and
call
int3
leave
ret
adc
sub
imul
xchg
jl
push
mov
cs
push
in
push
adc
ins
dec
inc
inc
fcom
imul
outs
sbb
mov
adc
and
xchg
dec
icebp
adc
test
bound
push
pushf
add
mov
push
fwait
xchg
mov
xchg
add
xlat
xor
fiadd
adc
inc
xor
mov
ins
cli
jae
sbb
ins
mov
idiv
dec
imul
mov
out
dec
mov
in
dec
cdq
push
(bad)
in
xchg
cmps
mov
jbe
adc
add
push
inc
xrelease
mov
inc
nop
add
in
lds
pop
xor
mov
add
adc
(bad)
adc
jmp
push
loope
clc
test
outs
inc
xor
fstp
data16
lods
xchg
pop
push
adc
xchg
sahf
pusha
int
sub
dec
movs
push
push
clc
mov
shr
mov
ficom
push
addr16
in
add
test
and
pop
push
jae
pop
jle
and
movs
adc
adc
stos
push
jno
xor
in
mov
aam
cmp
fisttp
int3
fdivr
mov
test
mov
sbb
add
sbb
retf
mov
ins
mov
sbb
dec
test
mov
sbb
push
mov
xor
adc
push
mov
xor
adc
jo
imul
ffree
cmp
test
or
clc
ficom
add
fdivr
inc
sbb
adc
adc
jne
and
sbb
and
cmp
sbb
mov
mov
repz
inc
add
adc
cmp
div
dec
cdq
call
mov
xor
rcl
and
and
fist
clc
lock
imul
and
les
fcmovu
mov
mov
les
into
jmp
and
mov
adc
jge
lods
sbb
sub
adc
dec
scas
xchg
add
xchg
in
dec
mov
repz
aam
add
xchg
leave
imul
ja
(bad)
or
fcom
xor
push
pop
retf
outs
dec
out
dec
cmp
outs
(bad)
in
(bad)
dec
or
mov
xchg
dec
cld
mov
sub
out
pop
mov
shl
and
adc
lock
bnd
cld
sti
xchg
repnz
stos
mov
add
push
jmp
outs
clc
sub
clc
stos
pop
xor
cdq
pop
dec
mov
mul
lock
mov
and
(bad)
jl
sti
xchg
pop
retf
(bad)
ror
loopne
gs
dec
outs
je
cmps
stc
cmps
pop
retf
pop
push
mov
jmp
jmp
hlt
sbb
cmp
out
xor
(bad)
in
dec
push
pop
mov
ror
inc
(bad)
jg
push
mov
in
(bad)
sbb
fs
ficomp
sti
xchg
daa
lock
std
inc
mov
test
ins
fs
das
and
je
jecxz
cmc
dec
inc
aad
lds
xor
adc
sbb
ss
mov
inc
and
add
push
cdq
pusha
inc
retf
sbb
loope
jmp
mov
xchg
cmps
in
or
repnz
aaa
fld
inc
add
add
xchg
into
bound
adc
jecxz
in
pusha
(bad)
push
fsub
adc
inc
adc
mov
and
add
pop
push
adc
cmps
(bad)
iret
xchg
ins
dec
clc
(bad)
sbb
mov
mov
xor
pusha
push
adc
add
test
cdq
retf
in
inc
push
fbld
sbb
add
push
push
outs
pop
mov
adc
xor
cdq
add
mov
cmp
aaa
jecxz
ja
adc
jnp
in
sub
jns
fistp
dec
mov
cmp
fild
mov
popf
fisub
inc
adc
int
push
nop
cmp
arpl
dec
loopne
mov
aaa
dec
pop
cmp
out
adc
mov
fist
dec
ja
scas
inc
outs
mov
pushf
jmp
add
aas
sbb
out
inc
push
out
pop
fs
inc
int3
mov
retf
jmp
retf
push
adc
pop
int3
or
pop
out
outs
ins
(bad)
pop
dec
jecxz
and
test
push
scas
popa
loopne
jnp
adc
mov
pop
imul
ins
mov
std
or
icebp
addr16
push
(bad)
jbe
pop
sbb
cld
je
aad
mov
inc
push
jno
icebp
dec
aaa
(bad)
adc
clc
jns
imul
push
dec
adc
cmp
ficom
in
jae
mov
mov
mov
popf
mov
fwait
mov
pop
push
adc
aad
cmp
call
mov
push
mov
gs
test
in
je
xchg
add
repnz
ret
push
jle
cs
mov
movs
leave
adc
dec
sbb
in
mov
adc
cs
je
xor
lods
adc
inc
jae
xchg
outs
in
ins
adc
loopne
fild
out
xchg
aas
in
adc
in
cmp
lds
mov
pop
sbb
aaa
loopne
mov
or
or
adc
xchg
js
aad
add
push
pop
mov
sub
out
adc
scas
out
cld
sbb
and
leave
pop
stc
adc
push
aaa
and
loop
lea
adc
inc
(bad)
dec
and
push
aaa
xlat
repnz
adc
imul
fld
arpl
adc
push
push
std
add
je
push
xor
adc
ins
cli
dec
sub
into
dec
push
xchg
ins
xchg
push
mov
xor
pop
iret
adc
nop
sbb
adc
out
lds
xor
adc
jno
loopne
inc
rol
inc
imul
adc
cli
sti
jnp
fs
iret
inc
hlt
aam
int3
shl
add
pop
cmp
(bad)
cmp
adc
pand
in
pop
push
xchg
movs
lods
lds
hlt
popa
jbe
mov
(bad)
idiv
pop
out
adc
push
loope
imul
sbb
adc
scas
mov
lds
out
dec
dec
adc
jmp
adc
test
push
cmp
cmp
jecxz
sbb
imul
mov
imul
dec
adc
mov
add
scas
xchg
add
pop
sbb
ins
or
add
pop
jmp
in
cmp
xchg
mov
xor
lods
add
push
cmp
dec
mov
pop
lds
adc
shl
pop
and
or
adc
mov
jecxz
in
aad
stos
(bad)
sub
mov
out
adc
mov
add
cmp
adc
daa
mov
jo
xchg
(bad)
arpl
aam
xlat
cmp
jl
movs
leave
hlt
mov
lods
ins
adc
movs
jmp
adc
sbb
sar
pusha
clc
adc
jnp
mov
int3
or
inc
push
xchg
fst
cmps
cmps
jg
pop
outs
das
push
jmp
retf
push
push
scas
xchg
mov
adc
ficom
pushf
add
aam
mov
pop
(bad)
adc
sbb
push
out
ret
fmul
stos
test
popf
fnsave
jns
rol
xchg
fnstenv
pop
jb
repnz
gs
loopne
mov
out
in
pop
imul
mov
push
mov
ror
mov
mov
xchg
pop
adc
stc
ja
and
or
cmovbe
cmps
adc
cmp
mov
adc
fcom
cs
stos
sbb
xor
cmp
add
jmp
cmps
mov
ds
ins
nop
jae
adc
rcl
jle
push
outs
mov
out
pop
fcom
adc
in
mov
fisubr
xchg
sti
xchg
adc
jnp
cmp
aaa
and
sbb
jns
out
push
lods
dec
push
jl
in
std
fisttp
outs
jmp
loop
adc
(bad)
lods
(bad)
xor
repnz
ss
mov
arpl
dec
repz
fmul
enter
sbb
aam
sbb
xchg
or
loop
jmp
dec
push
xor
mov
mov
mov
sbb
cwde
cmp
mov
pop
jmp
adc
test
or
adc
and
lock
std
or
lds
jb
or
and
cdq
push
dec
pushf
iret
add
adc
in
dec
fadd
dec
mov
jl
xchg
inc
xchg
enter
jo
xchg
ja
dec
(bad)
in
mul
sub
xor
pop
mov
in
clc
inc
jnp
sbb
call
movs
fnstcw
shr
adc
pop
es
pop
add
int
sub
repnz
xchg
or
adc
pop
sahf
adc
addr16
aaa
adc
mov
cdq
nop
adc
xor
mov
out
adc
xchg
rcr
fadd
loopne
xchg
(bad)
jp
xchg
repz
cld
movs
outs
push
xchg
lock
xchg
cmp
les
xor
jecxz
mov
adc
jp
out
out
xor
xchg
mov
jecxz
xor
dec
inc
adc
repnz
push
xchg
cld
add
test
inc
imul
icebp
fidivr
scas
lock
in
push
sub
mov
adc
xor
or
les
gs
int3
ror
mov
and
out
std
adc
sub
cmp
retf
dec
adc
mov
pusha
cmp
cmp
cli
pop
mov
add
mov
fst
retf
rol
xchg
pop
mov
pop
add
or
stos
or
scas
pushf
test
inc
push
mov
sub
sub
mov
pusha
gs
push
call
adc
mov
mul
sbb
into
mov
loope
inc
outs
add
jg
ds
add
das
sub
lods
xchg
mov
fild
daa
push
sub
shl
sahf
mov
aas
push
lock
xlat
ins
xor
inc
adc
xor
jge
dec
push
jmp
mov
sbb
sub
xchg
(bad)
arpl
mov
jae
xor
push
sti
enter
gs
sbb
call
aad
pop
adc
pop
mov
xlat
inc
mov
icebp
push
push
gs
pop
and
adc
fisttp
ror
rcl
aas
mov
mov
mov
movs
adc
in
xchg
sbb
push
(bad)
ficom
mov
retf
add
push
test
addr16
dec
nop
push
push
scas
adc
xchg
mov
or
ret
push
dec
into
cmp
loope
push
daa
leave
loopne
adc
ins
mov
add
test
adc
pop
inc
lea
jb
push
sbb
pop
jns
movs
xchg
repnz
adc
sub
and
xchg
cli
not
pusha
sbb
sbb
push
aam
xor
shr
jecxz
mov
mov
ficom
and
jo
mov
iret
inc
out
fcomp
xchg
(bad)
aaa
or
mov
scas
sbb
adc
in
dec
xchg
repz
aaa
add
(bad)
ficom
enter
jg
jle
cmc
and
push
test
das
test
cwde
sub
pop
rol
stos
sbb
pop
ficomp
jb
or
lea
stos
cmps
mov
jg
adc
push
sbb
out
push
push
mov
or
or
sbb
loopne
ss
js
ss
adc
gs
jmp
sbb
adc
lds
or
in
inc
inc
adc
or
dec
daa
or
stos
out
addr16
mov
adc
mov
icebp
pop
adc
das
xchg
mov
jge
adc
cmp
inc
pop
adc
stos
(bad)
cmp
in
cmp
adc
shr
loopne
arpl
adc
out
mov
adc
mov
inc
pop
pop
outs
(bad)
sbb
cmp
dec
shl
inc
movs
xlat
sbb
or
es
sbb
push
pop
in
adc
push
cmp
sbb
out
mov
xlat
fld
and
out
stos
xor
shr
inc
ins
stos
add
ins
or
sbb
je
int3
retf
or
cld
mov
bound
hlt
xchg
movs
popa
(bad)
mov
in
je
outs
push
and
das
xchg
aam
test
in
push
adc
scas
adc
xchg
shl
aam
(bad)
sub
scas
fadd
xchg
ins
retf
leave
fnstenv
dec
in
and
mov
jnp
in
inc
adc
add
or
mov
ret
jg
inc
xor
xchg
clc
xchg
inc
stos
mov
test
int3
xchg
pop
fnsave
cmp
dec
test
cmc
or
adc
mov
loope
adc
and
add
(bad)
fild
sbb
sti
jne
aam
shl
std
jle
(bad)
scas
ja
loopne
xchg
mov
sar
push
mov
sbb
out
rcr
jo
loope
pop
imul
mov
adc
(bad)
sbb
inc
int3
int
mov
adc
and
cli
sbb
cs
adc
or
sub
mov
mov
pusha
aam
jb
mov
ins
cmp
aaa
inc
enter
mov
sbb
test
jo
mov
cmc
and
cmp
neg
in
mov
adc
ins
sub
add
adc
push
cmp
push
adc
mov
inc
aas
adc
ins
(bad)
and
pop
adc
fcomp
repz
cdq
pop
bound
push
adc
sub
stc
add
repnz
push
cwde
mov
xchg
add
mov
jecxz
imul
cmc
pop
cmp
cmp
cmp
into
addr16
aam
into
aam
pop
push
mov
mov
and
inc
aam
jmp
push
hlt
push
out
(bad)
mov
pop
in
scas
xchg
jns
sbb
pop
cmp
scas
adc
inc
cmps
fadd
loop
adc
and
clc
fsub
cld
sbb
sbb
fmul
mov
or
mov
push
mov
xchg
add
mov
jg
jns
or
mov
sub
xchg
out
adc
cmp
xor
cwde
shl
xchg
jne
leave
and
retf
mov
rcl
repnz
aas
fstp
inc
imul
ficom
jg
and
fbstp
leave
push
test
out
mov
imul
mov
sti
cmp
cli
mov
sbb
or
sub
sti
adc
dec
cwde
pop
cli
xchg
in
enter
test
mov
mov
xor
call
adc
pop
pop
dec
mov
mov
sub
inc
mov
adc
push
fcomip
fnstenv
xlat
inc
or
leave
nop
outs
dec
inc
push
pop
sbb
(bad)
cwde
loopne
lods
xchg
ror
pop
neg
sbb
int3
in
not
push
and
out
sbb
jno
sahf
xor
mov
loopne
xchg
add
js
and
sbb
add
adc
fwait
and
adc
xor
movs
fsub
adc
js
fucomip
loope
ja
mov
inc
push
out
mov
xchg
cmp
jb
cmp
xchg
mov
aaa
xor
test
mov
jnp
sbb
mov
cmp
call
mov
arpl
cmp
aam
fsub
cmp
xchg
fld
mov
and
ret
push
xchg
je
fsubr
loope
xor
in
xchg
cmp
pop
mov
adc
push
rcl
xor
(bad)
imul
sbb
jae
cld
sub
mov
xor
aad
push
jle
ficom
xchg
fwait
(bad)
imul
or
mov
lds
inc
sbb
fsub
jmp
(bad)
fst
ret
jp
and
jmp
ror
in
das
bound
push
idiv
dec
pop
jb
rol
hlt
and
(bad)
cld
add
and
aaa
in
pop
outs
inc
add
mov
mov
jg
sub
and
xchg
mov
jns
out
movs
cmp
sbb
xchg
int3
adc
js
jb
push
pop
into
adc
xor
call
sbb
xor
das
test
popf
jbe
adc
adc
sbb
sbb
pop
not
out
sahf
and
add
jp
outs
jl
fcom
lods
loopne
push
lods
aam
adc
jns
add
inc
pushf
adc
jle
(bad)
out
in
adc
or
pusha
sbb
pop
pop
adc
int
test
add
push
xor
inc
add
hlt
cmp
pop
sbb
adc
sub
sub
push
retf
rcl
mov
(bad)
aam
out
push
adc
ficomp
bnd
sbb
(bad)
(bad)
(bad)
and
in
jno
cmp
mov
adc
xor
mov
lds
inc
imul
fbstp
pop
sub
pop
adc
test
mov
repz
movs
icebp
call
fstp
jnp
aas
adc
push
add
test
scas
loop
and
push
and
mov
cmp
aaa
adc
imul
mov
mov
jl
adc
xchg
mov
xchg
fwait
mov
sub
bound
and
ins
pop
push
aam
popa
push
fild
mov
stc
dec
aad
ins
sub
cmp
mov
jb
fcmovb
and
aaa
inc
xchg
fnop
jmp
sbb
dec
jno
pop
ins
popaw
pop
in
popf
call
cmc
mov
mov
jo
movs
adc
or
es
ins
out
pusha
sbb
pop
push
retf
pop
pop
aam
mov
adc
inc
cmp
adc
pop
inc
mov
lock
adc
(bad)
sub
(bad)
and
add
adc
clc
and
mov
push
leave
jae
cs
cmc
fidivr
and
mov
xchg
test
fmul
enter
fwait
test
jecxz
add
fdiv
inc
adc
test
pop
xor
aas
aad
xchg
inc
es
jle
mov
in
push
ja
(bad)
jecxz
test
sbb
adc
lods
arpl
push
dec
jb
scas
ja
jne
adc
add
cmp
mov
mov
loopne
add
leave
dec
adc
and
mov
push
popf
xchg
xchg
pop
push
dec
xor
sbb
icebp
test
sub
and
xor
mov
je
lods
sbb
mov
xlat
pushfw
pop
shr
mov
pop
or
cdq
aad
out
push
inc
(bad)
into
fistp
retf
sbb
adc
lahf
push
adc
loopne
mov
xchg
adc
dec
xor
je
rcr
jnp
fild
lods
data16
cmp
xchg
sbb
add
std
jae
popa
xchg
lock
mov
or
loop
and
adc
adc
push
pop
pop
imul
jmp
ror
push
das
add
jno
fsubr
push
mov
lock
es
xchg
shl
mov
outs
mov
mov
mov
inc
cli
in
jecxz
ins
ds
adc
sbb
loopne
cmp
cmp
nop
xor
push
out
xor
inc
jno
mov
test
(bad)
fwait
mov
retf
inc
jg
stc
stos
sti
xor
or
fsubr
iret
aam
jbe
pop
jge
adc
and
xor
fadd
dec
xchg
cld
hlt
mov
push
test
inc
jge
packsswb
add
sti
push
adc
cmp
xchg
or
je
in
cdq
ja
aas
out
mov
movs
jno
enter
and
cmps
movs
adc
pop
(bad)
in
add
mov
sbb
ror
add
xor
div
push
adc
fisub
dec
xchg
fdiv
call
test
pop
adc
xchg
leave
sub
mov
mov
xor
dec
and
in
jge
push
imul
pop
scas
xchg
aaa
out
adc
add
xchg
lock
fbstp
sub
xor
(bad)
movs
or
cmp
xor
mov
sub
push
movs
loopne
dec
je
or
(bad)
push
dec
nop
(bad)
mov
mov
push
test
mov
push
dec
push
jle
leave
xchg
inc
xchg
jg
pop
dec
dec
stos
cwde
or
jp
mov
js
pop
jecxz
jne
dec
and
cmp
sbb
jae
pop
fisub
(bad)
mul
gs
or
retf
add
push
cld
push
cmp
int3
jo
imul
(bad)
cdq
fsub
xlat
push
stos
(bad)
push
aam
repnz
lods
dec
mov
sar
lock
sbb
mov
mov
test
imul
into
jmp
lods
je
pushf
mov
lahf
xor
xchg
xchg
ds
fs
test
test
sub
movs
aaa
add
je
shl
mov
fs
cwde
jmp
push
push
retf
ror
out
mov
inc
cmps
fidiv
mov
fs
test
pop
and
or
or
xor
xor
or
movs
mov
dec
xor
es
pop
lds
call
pop
sbb
popa
jp
cld
test
adc
sbb
xchg
std
test
add
fwait
lock
push
hlt
pop
jl
and
mov
mov
add
loopne
rol
cmp
scas
add
cdq
retf
cld
push
cmp
repnz
das
or
mov
mov
add
xchg
xchg
pop
repnz
ror
add
and
rol
or
or
mov
fdiv
xor
retf
scas
shl
out
dec
fstp
dec
mov
cmp
sti
movs
daa
mov
repz
mov
inc
jecxz
arpl
add
pop
xchg
neg
push
adc
(bad)
adc
in
xor
mov
mov
loope
xchg
out
xchg
sub
dec
add
jbe
rcl
push
scas
adc
lds
sub
test
pusha
popf
jmp
mov
cmp
pop
addr16
je
pop
fistp
adc
pop
ret
inc
inc
adc
mov
add
fadd
and
push
adc
imul
hlt
sbb
cdq
xor
sbb
jo
in
mov
xchg
adc
mov
scas
push
adc
imul
fnclex
adc
test
popa
dec
adc
pop
movs
sar
and
leave
cmp
aam
lock
adc
sti
mov
and
xchg
pop
push
pop
rol
aam
push
enter
cli
ins
pop
jecxz
adc
xchg
int
push
pushf
adc
mov
inc
jmp
retf
jg
dec
aaa
adc
lods
xor
pop
dec
aam
push
das
(bad)
test
aad
retf
add
in
mov
mov
rol
adc
and
fisttp
popa
mov
shr
pop
fisub
mov
ffree
test
imul
mov
xchg
cmc
mov
retf
ret
pop
cld
sahf
out
xchg
inc
sbb
rcr
cmp
les
sbb
jmp
dec
mov
retf
and
sbb
push
xor
das
daa
adc
(bad)
sub
push
cwde
sbb
mov
add
push
enter
sbb
call
sub
inc
not
adc
pop
adc
repz
addr16
inc
adc
xchg
scas
retf
icebp
fidiv
jb
es
adc
dec
out
adc
stos
data16
mov
cmp
cmc
xchg
sbb
gs
ins
mov
sbb
in
xchg
repnz
sahf
aad
mov
bound
add
mov
leave
xchg
adc
push
aas
and
sbb
out
xchg
js
jg
ja
cmp
test
(bad)
les
jmp
cwde
sbb
arpl
shl
or
push
inc
or
mov
(bad)
fist
ja
mov
test
mov
shl
aas
push
jb
dec
sbb
xor
xchg
imul
(bad)
jne
syscall
movs
clc
jl
jae
fwait
js
aam
rcl
lods
pop
xchg
add
sti
pop
fadd
mov
cmp
mov
push
test
mov
push
out
loop
fdivr
pop
or
cmps
(bad)
imul
aas
lock
es
lahf
call
inc
test
lea
xlat
adc
scas
(bad)
sbb
(bad)
adc
mov
call
cmp
sti
cmps
and
mov
call
add
dec
pop
aam
addr16
and
rol
js
jno
aaa
mov
adc
repz
lea
or
clc
leave
movs
inc
scas
jg
mov
add
mov
cmp
int3
ins
cmc
dec
out
adc
aam
stos
adc
and
aad
imul
int3
data16
jno
aaa
adc
inc
push
sbb
dec
neg
out
dec
mov
adc
out
daa
sub
(bad)
bound
clc
push
dec
inc
scas
aam
mov
adc
push
mov
sti
es
push
adc
(bad)
xor
xor
lock
dec
adc
test
cmp
add
shl
std
in
int3
and
pop
push
mov
jo
mov
sub
xor
into
mov
arpl
mov
loopne
adc
inc
push
out
test
pop
cld
fstp
cmps
popf
sar
cmp
retf
cmp
fnstenv
pop
inc
mov
inc
stos
(bad)
outs
push
inc
sub
jbe
loopne
or
mov
jae
jecxz
sbb
clc
inc
dec
hlt
int3
loop
call
pop
pop
sbb
fistp
arpl
sbb
fst
or
mov
add
call
adc
xchg
inc
call
loop
fiadd
cmp
jno
pop
inc
test
cmp
push
adc
pop
adc
dec
xchg
xchg
sub
sub
imul
sbb
je
jl
dec
fstp
sbb
ficom
pop
mov
lods
jg
sbb
adc
mov
dec
pop
retf
shr
mov
mov
xchg
xchg
out
mov
std
push
mov
ins
add
movs
test
jne
hlt
mov
adc
mov
mov
push
adc
call
jle
(bad)
stc
mov
pop
movs
xchg
sbb
jle
jge
aam
dec
fimul
mov
out
jb
ror
adc
out
enter
add
cmp
jl
adc
sahf
(bad)
cld
jecxz
in
pop
xchg
push
jo
adc
cmp
test
dec
loop
add
adc
fbld
ss
dec
push
das
xchg
mov
cmp
push
dec
mov
lods
push
xor
adc
dec
mov
(bad)
mov
jmp
adc
mov
adc
xchg
mov
fsubr
dec
pop
aas
or
adc
sub
sub
cmp
ja
test
(bad)
bound
shr
add
mov
push
jbe
sar
cld
in
push
pop
pop
scas
dec
add
bound
adc
cli
xchg
and
and
das
test
fnstsw
xchg
popa
or
hlt
pop
push
jmp
call
pusha
lahf
push
rcr
inc
(bad)
stc
sub
fist
pop
aas
(bad)
sbb
jp
mov
and
jmp
cmp
push
sahf
push
adc
adc
rol
out
mov
pop
out
jb
lods
jp
aas
xchg
cmps
mov
cmc
loope
mov
pop
sub
retf
cwde
out
loop
cdq
in
pop
cld
and
out
jge
fldcw
adc
pop
ds
repnz
and
int
aas
adc
je
pushf
dec
test
inc
dec
mov
sbb
int
fld
mov
xchg
inc
(bad)
int3
sub
dec
sub
and
inc
(bad)
test
enter
in
jle
xchg
pushf
jne
idiv
je
xchg
adc
arpl
push
clc
in
imul
movs
dec
cs
adc
sub
aas
int
les
adc
cmp
fs
pop
fmul
xchg
imul
or
push
pushf
push
call
sbb
and
loopne
test
loop
xor
pop
pushf
sti
mov
aas
stos
aaa
in
push
sar
jne
adc
and
(bad)
sbb
xchg
ins
fiadd
fst
movs
adc
mov
loopne
das
xor
fwait
adc
scas
stc
or
aam
call
sub
ret
jl
mov
(bad)
aaa
jns
push
push
adc
mov
pop
xor
xchg
(bad)
(bad)
sub
sbb
in
ins
lea
ret
push
mov
xor
int
adc
out
outs
imul
pop
mov
inc
jb
or
hlt
adc
sti
add
int3
mov
adc
dec
push
out
mov
jno
ror
int3
push
std
gs
shl
sub
mov
xchg
imul
nop
and
and
dec
leave
int
int
pop
jae
pop
out
cmc
addr16
pushf
rcr
xchg
sbb
jb
mov
ja
mov
push
retf
mov
adc
mov
mov
xchg
push
push
mov
jno
push
or
adc
retf
out
gs
xor
movs
cmp
add
imul
xchg
shl
pop
adc
push
jmp
ja
push
test
fisub
jo
pushf
push
pop
mov
push
sbb
jns
clc
adc
lods
inc
dec
push
outs
mov
les
aas
push
loope
pop
in
mov
add
je
mov
adc
dec
and
pop
jno
fidivr
aas
mov
cmp
retf
aam
out
sbb
xchg
pop
xor
rcl
addr16
adc
pop
icebp
sbb
fld
sbb
jbe
mov
pop
push
adc
sbb
lods
rcr
bound
popf
add
xchg
xchg
inc
outs
mov
dec
jp
ins
dec
mov
das
stc
fs
shl
arpl
xor
xchg
test
or
xchg
xchg
mov
lds
loopne
movs
jmp
loopne
rcl
out
out
adc
cmp
jmp
pop
ret
add
pushf
iret
mov
adc
pop
aaa
inc
lods
mov
inc
adc
(bad)
dec
cmps
dec
inc
sbb
adc
mov
jecxz
push
mov
inc
mov
cmc
fisttp
adc
inc
sbb
daa
arpl
or
lea
dec
stos
ins
fs
ret
xchg
and
in
mov
mov
or
out
adc
push
ret
outs
and
icebp
push
pop
inc
add
xor
dec
cmp
aaa
jmp
add
repnz
and
(bad)
xchg
stos
fwait
jmp
mov
mov
adc
xlat
pop
xor
rol
arpl
adc
mov
jns
movs
and
retf
push
push
xor
sub
lock
xor
sti
sub
sbb
mov
adc
xor
mov
adc
enter
mov
sar
mov
mov
push
popa
xchg
(bad)
adc
xchg
pop
scas
loopne
mov
adc
xchg
sahf
repz
imul
ins
pop
aam
dec
ins
call
adc
std
iret
xchg
xchg
or
stc
add
stc
push
jmp
imul
xchg
adc
in
push
ret
inc
xchg
xlat
aam
sub
adc
and
sbb
dec
cmp
adc
dec
cmp
imul
cld
adc
cmp
movs
add
nop
adc
pop
shl
push
(bad)
out
fs
add
lea
test
pop
rcl
push
aam
aas
out
unpcklps
inc
mov
mov
adc
push
mov
repz
adc
or
ins
dec
sbb
sbb
and
xor
and
adc
inc
imul
adc
xor
jl
push
arpl
sbb
mov
or
aam
pusha
jmp
add
xchg
cmp
dec
cli
mov
push
or
cdq
add
cmp
cdq
in
lods
es
inc
and
std
push
push
or
adc
cmp
fwait
adc
out
push
push
xchg
adc
cwde
movs
addr16
and
retf
rcr
outs
and
bound
push
adc
enter
xchg
add
adc
clc
or
mov
inc
inc
shr
push
cmps
or
or
sub
in
pop
stos
and
icebp
call
sbb
out
(bad)
aam
pop
adc
shl
push
out
jbe
scas
and
test
inc
inc
das
out
retf
sbb
ficomp
sub
push
sub
sahf
ins
xor
(bad)
lods
pop
in
int3
xchg
or
sbb
sbb
jbe
fsubp
adc
lods
push
mov
(bad)
icebp
stc
(bad)
shl
aam
sbb
adc
or
fxch
and
aam
ins
(bad)
and
add
outs
pop
lea
lods
dec
xchg
addr16
xchg
aaa
sbb
(bad)
out
cmp
das
inc
inc
fnstenv
aas
or
retf
inc
lods
mov
add
es
pop
int3
ja
std
call
popf
inc
ja
dec
icebp
fist
and
mov
dec
call
mov
(bad)
int3
pop
jnp
jbe
inc
sbb
into
imul
(bad)
mov
mov
(bad)
movs
leave
cmp
out
(bad)
adc
ror
rcl
cmp
inc
nop
jecxz
inc
jno
adc
aam
and
fstp
push
dec
mov
push
aaa
pop
and
lock
push
adc
add
xchg
pop
dec
loope
mov
xchg
jae
adc
mov
in
ret
adc
xor
or
push
adc
fwait
push
and
fld
fs
stos
mov
enter
in
fadd
ret
pusha
imul
sbb
cmp
pop
add
adc
je
or
xchg
call
repnz
or
sub
icebp
or
push
movs
loopne
inc
sub
or
cwde
test
push
push
mov
inc
dec
sub
icebp
push
into
popa
dec
lahf
outs
es
fild
jecxz
add
mov
jb
inc
rcr
inc
in
xchg
inc
mov
es
xchg
xchg
arpl
add
mov
out
fcmovnb
dec
fiadd
int3
push
inc
jg
das
sahf
retf
test
fnstenv
int3
inc
aad
pop
sub
jmp
push
xchg
fistp
mov
sti
out
addr16
fstp
xchg
mov
mov
test
adc
fld
mov
mov
adc
out
retf
mov
repnz
jbe
xchg
popf
hlt
inc
cmp
dec
jle
fs
sbb
pop
jae
(bad)
in
int3
xor
mov
inc
dec
jae
add
mov
jbe
inc
stos
or
aaa
xchg
or
push
dec
jg
inc
(bad)
mov
adc
fs
sub
xchg
xchg
(bad)
lahf
in
pop
ret
and
adc
les
ret
dec
cmp
movs
lds
mov
lock
sysexit
js
je
mov
sti
jecxz
add
xchg
push
pop
mov
dec
push
shr
cmp
movs
adc
cs
lods
les
sbb
cmp
aam
inc
jo
adc
scas
inc
cwde
xchg
movs
push
adc
mov
push
into
stos
pop
push
loopne
mov
imul
or
mov
shl
call
lea
adc
inc
xchg
(bad)
jae
pusha
jmp
jmp
(bad)
movs
pop
sub
je
mov
mov
jecxz
sbb
call
test
or
in
or
jns
int3
xchg
pop
jnp
mov
loop
sar
cmp
retf
aaa
icebp
cmove
movs
adc
into
mov
aaa
sbb
add
int3
xchg
dec
and
(bad)
ds
in
adc
imul
dec
or
cld
in
dec
pop
push
sbb
jmp
inc
int
rcl
in
lock
jae
cmp
cdq
add
add
inc
ss
sar
push
stc
and
ja
add
inc
mov
fsub
iret
gs
sub
pop
sar
movs
adc
bound
bnd
iret
sbb
jno
movs
jmp
fdivr
sub
stos
repz
lds
jg
adc
adc
push
rol
sbb
push
and
push
cmp
out
jge
inc
push
push
sahf
mov
xchg
and
sbb
sbb
aam
ds
adc
xchg
mov
mov
sub
call
pop
aad
mov
cmp
mov
mov
adc
dec
jmp
cmp
adc
xor
adc
push
inc
sub
dec
mov
test
adc
pop
mov
pop
ds
cli
adc
xchg
push
push
out
jno
xchg
adc
fs
repz
mov
les
test
jb
test
cmp
jns
je
mov
in
mov
adc
fidivr
mov
cmp
enter
cmp
outs
mul
or
ins
cmc
and
popf
xchg
mov
cld
xchg
out
xor
adc
das
sbb
xchg
push
push
sub
aaa
shr
daa
lea
icebp
aas
pop
jne
sub
add
call
into
scas
mov
test
in
ret
dec
pop
xor
sbb
sub
and
std
not
adc
hlt
data16
scas
ja
adc
rcl
jge
sbb
lock
jmp
cld
inc
jge
mov
add
xchg
jge
dec
add
sbb
je
mov
xor
inc
popf
mov
aaa
test
xchg
push
jns
push
out
adc
add
popa
mov
bound
adc
mov
out
(bad)
xor
or
pop
sub
xlat
sbb
adc
jmp
cmp
lea
jmp
mov
stos
pusha
xchg
scas
pop
aaa
add
jge
sub
dec
es
sub
aas
pop
fnstsw
or
add
or
xchg
(bad)
mov
fwait
sbb
fistp
aad
addr16
jmp
mov
sub
sbb
add
stos
gs
and
push
arpl
(bad)
iret
jecxz
push
jmp
scas
retf
jo
mov
sub
pop
dec
aam
dec
xchg
cmp
sar
pop
fiadd
je
in
xchg
je
es
xor
jecxz
je
inc
int3
mov
sbb
sbb
fmul
in
ror
pop
dec
adc
test
sub
lea
cmp
xor
ins
and
push
popf
sub
adc
ins
push
add
repnz
xor
lahf
fadd
out
cmc
push
das
test
fisubr
pop
adc
sub
nop
pop
dec
sbb
loopne
fbld
mov
sbb
(bad)
es
jmp
lds
adc
mov
xchg
add
ds
or
enter
dec
call
xchg
inc
add
dec
add
adc
mov
xchg
xor
sub
retf
inc
xchg
cdq
push
loopne
fcom
outs
movs
mov
enter
or
mov
sbb
lods
hlt
shld
call
out
adc
aad
jne
lods
js
adc
mov
ins
push
xor
adc
push
xor
mul
addr16
mov
sbb
pusha
test
loope
int
aad
adc
in
mov
adc
inc
(bad)
sub
pop
retf
cmc
xchg
mov
jg
xchg
cld
add
movs
xchg
mov
movs
popf
xor
fmul
adc
stos
test
cli
sub
mov
loopne
adc
or
jns
add
data16
adc
xlat
in
(bad)
jmp
adc
or
xor
outs
mov
clc
mov
inc
call
dec
jp
push
rcr
es
xchg
shr
mov
jecxz
nop
pushf
xchg
ss
mov
sbb
iret
fidiv
pop
sub
int3
and
aaa
dec
xchg
(bad)
fwait
jmp
sahf
outs
jmp
or
cmp
jmp
jns
out
lea
add
jp
mov
(bad)
in
xor
sbb
mov
add
xor
sti
out
in
sub
pop
push
or
adc
je
xlat
in
mov
xor
punpcklqdq
fs
fsubr
and
jg
pop
dec
in
ror
in
out
arpl
dec
int
mov
sbb
and
ins
adc
ins
adc
cmp
push
loop
and
adc
stos
push
mov
add
mov
rcr
nop
aaa
enter
test
dec
push
out
or
add
lds
(bad)
xor
fidivr
cdq
pop
mov
fadd
sbb
ret
jle
jmp
std
outs
lods
adc
shl
rcl
and
push
cmps
adc
lods
inc
iret
imul
ret
xchg
ins
mov
sub
mov
lds
fmul
pop
adc
imul
cmp
test
repnz
and
ja
in
jbe
mov
adc
inc
neg
(bad)
push
aas
rcl
iret
mov
stos
add
or
sub
push
inc
out
sub
add
mov
inc
jle
das
push
pop
jne
cwde
jge
xor
pop
aas
pop
mov
cmp
or
mov
icebp
adc
dec
stos
lea
in
int3
sahf
jmp
rol
pop
mov
ins
hlt
das
js
ins
xchg
pop
mov
imul
fsubr
cld
or
sbb
in
add
js
xchg
mov
sub
adc
loopne
cmps
mov
jmp
sbb
les
adc
xor
dec
jns
cld
inc
adc
mov
retf
mov
(bad)
sti
xor
adc
out
(bad)
sbb
xor
push
dec
xor
mov
nop
xchg
loopne
xor
(bad)
sbb
lock
jnp
push
or
bound
sbb
mov
jmp
shl
(bad)
cmp
sub
repnz
out
(bad)
pop
in
and
dec
mov
or
int3
aam
pop
idiv
std
(bad)
mov
add
inc
or
cmps
jae
inc
and
or
aam
xor
adc
xchg
aad
scas
mov
adc
js
ins
pop
jmp
leave
cmps
lock
jge
push
popf
fwait
or
adc
sub
out
mov
or
pushf
hlt
adc
jae
push
lahf
call
mov
push
mov
ins
pop
mov
pop
jns
aam
inc
and
in
stc
pusha
movs
sub
adc
dec
mov
adc
mov
xchg
and
repz
mov
(bad)
pop
or
jae
fist
retf
add
outs
sti
ins
inc
(bad)
retf
pop
xlat
iret
(bad)
sbb
and
add
dec
inc
lahf
xchg
push
call
mov
popf
movs
push
ss
repz
nop
xchg
and
not
ins
or
loop
and
xchg
scas
stos
jo
fcmovne
mov
(bad)
cmp
xor
push
in
sbb
imul
rcl
xor
in
test
adc
out
aaa
xchg
inc
adc
ds
lds
stos
sub
mov
or
test
sbb
mov
dec
xchg
repz
jmp
and
loop
push
aaa
scas
mov
inc
popf
inc
es
mov
out
adc
out
shl
out
fwait
add
push
cmp
fild
test
inc
mov
les
fs
inc
mov
(bad)
jp
push
(bad)
dec
inc
in
adc
mov
aas
dec
mov
xor
fs
adc
adc
into
(bad)
dec
jecxz
adc
ja
mov
adc
or
in
stos
push
mov
mov
push
stos
or
out
or
dec
xchg
pop
cdq
and
std
adc
arpl
jmp
cmp
test
inc
in
lods
aaa
xor
cdq
lods
nop
mov
(bad)
adc
repnz
and
pop
xchg
aam
pop
cmp
and
sbb
in
aaa
xor
sbb
mov
sbb
jl
fs
adc
and
into
adc
shl
dec
mov
fldenv
mov
inc
adc
xor
sar
(bad)
sbb
mov
adc
push
int
mov
and
xor
fwait
rol
push
adc
dec
call
adc
pushf
dec
movs
mov
(bad)
add
shl
cmc
sar
sbb
mov
sbb
addr16
or
jo
adc
cmp
cmp
imul
in
ds
xor
add
es
and
xchg
adc
outs
je
or
popa
or
push
fs
push
inc
push
es
dec
push
sbb
ins
cmp
adc
jmp
scas
dec
jb
push
test
mov
cmp
jns
aam
push
outs
sub
jnp
sub
or
cld
inc
adc
ins
pop
scas
gs
or
jle
xchg
and
cmp
pop
adc
cwde
call
mov
add
push
loopne
test
nop
pop
xchg
outs
fst
push
lea
mov
sti
js
shl
jle
inc
xchg
(bad)
mov
and
inc
mov
sti
adc
mov
cmp
mov
enter
pop
sbb
sub
mov
(bad)
sbb
fstp
lods
xchg
fdivrp
sbb
or
je
mov
lea
fmul
inc
add
retf
retf
adc
jmp
adc
ins
out
(bad)
adc
jecxz
dec
loop
cmp
loopne
xchg
push
xor
(bad)
mov
hlt
xchg
rol
lahf
js
cmp
push
lock
dec
jg
popf
retf
mov
xchg
loopne
aaa
addr16
int3
pop
popa
inc
lea
fs
jo
call
mov
dec
push
cmp
aad
mov
leave
je
or
std
lods
mov
mov
jmp
or
sub
pusha
mov
jge
pop
lods
fdivr
jmp
(bad)
jg
push
cmp
jmp
mov
add
pop
aaa
loopne
std
xchg
hlt
je
mov
adc
ss
fcomp
sbb
mov
push
fcmovnb
push
mov
leave
in
popa
and
movs
aas
and
adc
adc
xor
and
pop
aam
loopne
in
xchg
adc
push
xor
ret
inc
int3
aam
and
pop
adc
xchg
cwde
std
xchg
(bad)
mov
(bad)
sub
adc
xchg
icebp
retf
adc
xor
jle
sahf
xchg
xchg
push
popa
jmp
sbb
je
mov
mov
iret
(bad)
aam
mov
cmp
mov
popa
shl
jp
adc
mov
sbb
cmps
or
mov
rol
pop
push
out
lods
push
fbld
mov
fs
je
sbb
and
pop
adc
ja
cmc
mov
push
popa
inc
dec
mov
sbb
cmp
mov
pop
adc
lock
lahf
pop
xchg
add
test
xchg
cmps
icebp
test
mov
sub
scas
outs
call
stos
(bad)
mov
push
and
sbb
cli
ds
sub
ins
loop
jecxz
inc
jmp
dec
daa
mov
stos
sbb
ins
xchg
xor
push
cld
mul
arpl
adc
inc
jmp
icebp
fucomip
aas
xchg
mov
mov
mov
jge
cmp
mov
call
mov
jno
xchg
dec
mov
dec
je
cmps
jns
ins
pop
xchg
mov
in
(bad)
dec
adc
adc
out
cmps
(bad)
fcmove
cmps
mov
adc
fnsave
or
in
or
retf
pop
mov
sub
xchg
or
(bad)
xor
adc
call
popf
and
cmp
push
pop
cmp
inc
mov
push
retf
mov
rol
add
int3
arpl
inc
(bad)
xchg
out
in
ins
push
mov
cmp
add
mov
std
dec
idiv
pop
pushf
out
pop
xor
xchg
push
inc
xchg
jle
ja
nop
mov
dec
inc
ja
test
int3
ds
scas
lods
in
dec
dec
loope
mov
aad
mov
mov
mov
or
sbb
and
mov
xor
mov
inc
push
push
xchg
mov
es
cmp
xor
and
pop
mov
loopne
mov
add
dec
call
jns
in
push
outs
ins
aaa
mov
adc
push
(bad)
jge
dec
lods
daa
or
popf
cwde
adc
inc
cmp
and
sub
adc
aaa
and
xor
pusha
fsubr
adc
(bad)
dec
or
inc
cmps
(bad)
(bad)
adc
call
das
addr16
inc
imul
popf
vunpcklps
mov
jns
adc
jmp
jl
in
mov
mov
or
or
fimul
adc
sbb
(bad)
and
xor
adc
aaa
fs
or
ds
add
out
loopne
adc
lock
addr16
test
xchg
jmp
xchg
ret
lock
aam
clc
cmp
ins
xor
or
cld
xor
adc
adc
jbe
mov
jns
outs
sbb
movs
ss
dec
call
jmp
loope
cld
pop
xor
arpl
mov
cdq
add
les
mov
retf
cmp
xor
fnstcw
inc
push
push
sbb
hlt
pop
dec
add
out
sbb
test
call
push
ret
ret
call
ficomp
pop
jl
movs
push
cmp
arpl
fwait
adc
lea
enter
push
pop
dec
xchg
adc
adc
std
(bad)
ret
xor
adc
inc
jne
sbb
xchg
pop
xchg
adc
dec
movs
cmp
push
adc
cld
stos
aas
aad
retf
sbb
inc
aam
ss
cli
cld
add
push
pop
(bad)
mov
into
cwde
xchg
cmp
jg
xor
push
mov
clc
xchg
jp
push
push
mov
rol
sub
mov
jno
and
sar
adc
pop
das
(bad)
pop
in
adc
leave
dec
xchg
cmc
jo
inc
push
nop
sbb
push
adc
std
mov
call
add
sbb
mov
and
fsubr
adc
adc
add
inc
push
test
icebp
mov
xor
mov
fcomip
push
cmp
aam
adc
pop
std
hlt
ins
adc
call
mov
jae
xchg
dec
test
jne
mov
or
nop
out
pop
push
icebp
sbb
test
inc
sbb
fcmovne
or
in
push
xchg
hlt
mov
das
shl
daa
ret
or
mov
dec
adc
std
fiadd
sbb
shl
dec
mov
xchg
mov
movs
mov
xchg
mov
xchg
mov
cld
lods
or
pop
jp
xchg
inc
dec
(bad)
aam
pusha
jns
pusha
jg
pop
gs
aas
test
or
loope
icebp
sbb
popf
xchg
mov
clc
iret
add
hlt
gs
push
pop
test
sar
clc
icebp
jge
aas
cs
mov
xchg
add
xchg
shr
lods
bound
pop
and
retf
data16
xor
push
dec
sbb
cdq
fs
jle
push
dec
push
mov
push
dec
xchg
out
pop
jp
sub
xchg
sahf
pop
jb
lahf
retf
xchg
mov
pop
call
pop
sbb
and
jae
and
mov
stos
mov
test
push
in
xchg
imul
std
mov
ins
cmps
dec
sbb
imul
xchg
inc
inc
add
int3
ret
push
loope
dec
sub
bound
pop
(bad)
and
adc
and
fdiv
add
inc
lock
arpl
xor
add
xor
or
leave
mov
in
jmp
add
fs
lock
aam
int3
daa
cdq
inc
dec
sbb
and
movs
cwde
stc
and
push
test
int
aaa
dec
fcom
rcr
mov
or
and
dec
xor
lahf
cmps
stos
pop
add
xchg
xchg
fcomp
(bad)
or
jno
adc
xchg
aam
pusha
pop
xchg
mov
adc
ja
out
jae
(bad)
loope
out
xor
loop
jnp
cld
int3
and
push
bound
outs
leave
sahf
adc
adc
sbb
jb
ror
mov
repnz
sub
ja
push
mov
push
sbb
adc
pushf
test
icebp
sub
lods
xor
adc
in
jmp
cld
ror
or
push
sbb
test
ss
adc
ret
adc
js
jns
bound
inc
cmp
mov
dec
movs
stc
imul
stos
xor
jg
fst
fsub
in
adc
add
cld
ficom
sub
shl
xor
in
adc
test
into
arpl
in
movs
jb
aaa
jg
push
inc
dec
adc
or
ret
enter
adc
xchg
or
pop
int3
lds
repz
fld
int3
push
cwde
pop
aas
add
jg
daa
loop
mov
movs
push
pop
out
test
ficom
in
in
scas
push
cmp
loop
adc
adc
out
xor
idiv
(bad)
movs
daa
mov
push
ficomp
je
pushf
xchg
dec
bound
lds
xor
mov
out
and
push
sbb
retf
test
call
xor
jae
pop
jbe
movs
mov
and
int3
xor
icebp
dec
jle
aas
and
loop
in
sbb
cwde
mov
out
sbb
int3
sbb
dec
pop
jnp
aad
xor
mov
mov
jo
mov
push
sub
out
(bad)
or
neg
in
jae
xchg
data16
pushf
push
xlat
movs
or
imul
inc
hlt
xchg
das
adc
jb
lea
xchg
ja
xor
and
out
inc
jmp
sub
xchg
int
aam
dec
outs
ret
adc
jmp
mov
adc
adc
mov
repnz
mov
mov
and
in
loope
mov
or
ins
adc
gs
push
sbb
pusha
inc
(bad)
xchg
ins
jb
stos
adc
cmps
xchg
adc
popa
movs
enter
loopne
pop
repnz
sub
jmp
mov
pop
xchg
mov
mov
push
dec
std
xor
jns
fxch
aam
mov
ds
mov
cmp
scas
cmp
out
sar
jge
sbb
cld
shr
scas
imul
adc
jmp
adc
pop
je
pop
push
retf
aam
data16
adc
and
mov
test
retf
or
cdq
cmp
mov
jp
mov
fcmovnb
inc
les
or
mov
xchg
jns
imul
mov
sbb
and
int3
adc
daa
popa
dec
sub
push
sbb
mov
pop
pusha
pop
adc
cmps
shl
(bad)
sbb
sbb
inc
fisttp
fst
or
sbb
outs
hlt
mov
pop
mov
adc
je
push
and
(bad)
ret
data16
pop
ja
and
(bad)
sbb
pop
push
xor
adc
or
ins
out
pop
lds
shl
sbb
jle
mov
in
sbb
xchg
test
adc
or
bound
or
adc
xor
sub
xchg
ror
mov
int
retf
cmp
sbb
neg
and
and
popf
add
shl
iret
fiadd
ret
inc
inc
adc
mov
cmp
adc
inc
js
pusha
ret
or
aaa
aad
cmc
hlt
dec
repnz
lahf
cld
fsub
psrlw
das
push
sbb
shr
hlt
push
sub
xor
jbe
mov
cmp
dec
rcr
sbb
sbb
test
das
sbb
leave
push
adc
(bad)
xchg
aaa
aas
and
retf
aaa
cmps
jle
cwd
lods
in
ins
jnp
jecxz
push
adc
add
imul
pop
xor
dec
pop
inc
out
jns
pop
fs
jne
loopne
push
mov
ins
xchg
and
out
mov
sahf
movs
sahf
jno
or
retf
out
shr
mov
push
jno
mov
mov
sbb
xor
aad
pushf
fiadd
(bad)
jne
scas
pop
sbb
ins
sbb
aaa
int3
dec
out
or
pop
in
and
stos
enter
mov
xchg
(bad)
clc
shr
push
mul
jmp
dec
repnz
xor
jmp
ins
(bad)
lahf
enter
imul
adc
xlat
ins
jno
jmp
and
add
repnz
or
xchg
pop
ja
test
mov
adc
cmps
outs
push
fild
adc
pop
movs
in
jnp
inc
pop
jmp
xchg
jb
in
mov
icebp
jmp
push
adc
mov
sbb
xchg
cmp
imul
adc
ins
in
add
pop
cmp
out
jmp
shr
retf
mov
shr
sub
movs
pop
or
stc
cld
xor
adc
popf
jge
add
int3
lods
adc
inc
dec
mov
arpl
loopne
shl
lock
or
jmp
or
bnd
push
mov
mov
xchg
pop
pop
push
in
cmp
int
add
leave
sbb
daa
cli
cs
aam
mov
jnp
or
popa
xchg
loop
cmp
hlt
fild
ja
jne
cld
xchg
push
mov
cmp
pop
mov
push
lahf
mov
mov
mov
jb
clc
adc
das
enter
jns
addr16
iret
mov
push
xor
pop
(bad)
call
cs
add
adc
inc
and
adc
inc
mov
jno
mov
dec
sbb
jbe
(bad)
aaa
adc
mov
gs
mov
adc
inc
scas
mov
dec
shl
adc
mov
fcomp
xchg
add
mov
sub
inc
sahf
stc
pop
mov
cmc
stc
call
push
retf
(bad)
hlt
and
adc
mov
jg
stos
dec
adc
adc
xchg
test
adc
mov
test
mov
jne
sub
sub
std
sti
lods
jp
aad
mov
add
inc
repz
cwde
retf
ds
imul
int3
inc
loope
(bad)
in
test
or
pop
or
xchg
xor
cmc
ds
call
mov
(bad)
cmp
in
fld
pushf
cmp
pop
push
mov
(bad)
cmova
ret
popf
je
test
(bad)
add
ret
addr16
xchg
jns
jnp
jp
adc
outs
pop
lds
rcl
or
js
adc
popf
push
rcr
outs
mov
sub
aaa
or
adc
iret
sub
jo
jnp
sbb
push
stos
inc
push
pop
test
hlt
pusha
call
les
sbb
(bad)
test
mov
cwde
mov
adc
mov
ins
adc
mov
pop
jmp
cmps
adc
push
cmp
in
dec
mov
sub
rcr
adc
jbe
push
fistp
icebp
dec
clc
jns
pop
(bad)
(bad)
xor
cmp
mov
inc
std
xor
sub
call
cmps
(bad)
imul
add
repz
push
mov
pop
xchg
aaa
stos
push
or
outs
inc
sbb
adc
jmp
ret
shl
mov
out
out
adc
adc
movs
lods
rcl
fcmovbe
push
aam
push
je
sbb
sti
mov
lods
push
(bad)
mov
dec
mov
aaa
inc
aad
ja
in
or
push
pop
jmp
cld
xchg
cdq
aad
stos
push
aaa
repz
ins
pop
xchg
and
mov
mov
rol
inc
jne
push
pop
xor
jge
imul
cmp
repz
jne
addr16
sbb
out
sbb
inc
leave
jno
cmp
je
aam
in
xchg
inc
loopne
pop
icebp
in
inc
iret
mov
in
sub
xchg
adc
mov
enter
mov
jne
adc
jl
sbb
push
pop
and
sahf
ins
push
ins
add
ds
rcl
dec
daa
test
cmp
xchg
push
push
xor
cwde
jnp
lock
cdq
ss
add
xor
movs
inc
sub
push
or
adc
push
or
push
adc
pushf
cmp
out
mov
lock
addr16
push
adc
les
imul
adc
dec
sub
adc
repz
out
(bad)
js
nop
add
shr
adc
push
(bad)
imul
fwait
inc
ins
std
lods
push
or
push
call
xchg
adc
js
mov
adc
aas
out
jno
(bad)
fnsave
push
mov
adc
adc
rcr
arpl
ds
cli
sbb
pop
cdq
dec
adc
cld
adc
scas
fld
push
sbb
cmp
ins
iret
in
popa
cmp
lds
push
ins
popf
movs
sti
ret
and
into
addr16
inc
adc
push
lods
arpl
inc
jg
adc
sar
dec
or
stos
in
test
mov
icebp
jno
aam
pop
push
cmps
jl
inc
fdiv
test
jmp
lods
jo
or
sbb
nop
xchg
shr
fwait
mov
sbb
or
jmp
cmps
xchg
jno
dec
sub
push
sub
adc
sub
into
xchg
ins
in
mov
mov
xchg
loope
adc
fcomp
adc
xor
jg
adc
adc
iret
jmp
or
and
inc
push
repnz
pusha
xchg
cld
test
sar
out
stos
sbb
mov
aas
mov
cld
add
dec
lods
sbb
mov
ss
cmp
push
(bad)
in
clc
adc
jno
ja
sbb
mov
sbb
je
sbb
sub
add
pop
leave
(bad)
push
sub
jmp
pop
ja
out
push
pop
lahf
out
xor
inc
mov
les
cdq
add
je
dec
popf
cld
pop
ins
sub
mov
(bad)
cmps
xchg
retf
es
(bad)
into
cdq
(bad)
jo
mov
and
unpcklps
es
push
jns
sbb
in
cmp
lahf
mov
add
dec
mov
adc
mov
loope
std
bound
enter
lds
out
add
sbb
jmp
mov
jg
mov
in
sbb
ins
ret
test
xchg
imul
push
ins
stc
pop
jnp
fimul
dec
mov
jb
push
adc
retf
xor
adc
scas
aam
jl
bound
(bad)
xor
iret
repnz
dec
out
ds
pop
inc
sti
xor
loopne
adc
adc
leave
ss
xor
into
push
loope
pop
xchg
xor
loopne
cmp
test
stc
dec
xor
ror
or
int3
shr
int3
inc
outs
cld
inc
retf
mov
ffreep
jno
retf
lds
add
mov
push
mov
jne
loop
jp
or
mov
hlt
lds
loopne
imul
adc
jmp
and
mov
pop
fistp
adc
pop
div
mov
into
add
and
mov
push
mov
push
int3
cmp
mov
adc
dec
pop
ss
and
je
lahf
jnp
and
retf
mov
adc
ds
cmp
cli
shl
sbb
lods
arpl
dec
jge
dec
cmp
dec
sbb
add
int3
test
add
or
clc
pop
push
and
pop
dec
adc
dec
in
mov
out
movs
and
div
sub
cmp
adc
xlat
xor
mov
std
nop
js
sbb
mov
fcmovbe
(bad)
pop
add
mov
xchg
jnp
leave
sbb
(bad)
sbb
mov
loope
add
pop
pop
mov
pop
dec
(bad)
push
fsub
movs
leave
int3
pop
push
mov
xchg
sets
enter
dec
jne
mov
sbb
jae
icebp
mov
movs
push
popa
push
call
fsub
mov
imul
int3
adc
xchg
inc
sbb
iret
ds
jne
cmps
dec
lods
adc
pop
sti
ror
push
pop
mov
xchg
xlat
(bad)
aam
or
(bad)
mov
xor
adc
add
and
adc
jbe
rol
fsubr
ja
pop
sti
loope
test
cs
adc
xor
push
cmp
pop
adc
sub
(bad)
call
scas
dec
pusha
sub
add
test
mov
adc
jecxz
jmp
stc
push
jbe
(bad)
aaa
imul
mov
out
mov
dec
adc
jmp
in
or
cmp
cdq
fadd
adc
xchg
int3
(bad)
inc
jmp
and
mov
xor
mov
neg
dec
xchg
outs
cmp
daa
fadd
div
test
adc
aaa
xor
sub
mov
adc
call
adc
cmp
cmp
or
or
adc
adc
sub
sbb
push
push
sbb
adc
sbb
imul
cmc
pop
pusha
xor
adc
push
imul
adc
pop
or
fisttp
les
pop
aam
cwde
sahf
fs
xor
or
dec
pop
cmp
mov
not
or
adc
cmp
jmp
mul
sbb
pop
lock
mov
ins
cmp
lds
in
call
retf
and
ins
popa
addr16
mov
imul
add
sub
adc
aad
mov
adc
push
xchg
sbb
clc
inc
mov
movs
int3
xchg
in
(bad)
jg
and
mov
fdiv
mov
push
arpl
adc
fst
adc
into
push
adc
pop
lods
xchg
hlt
clc
fisub
pop
dec
push
test
sbb
iret
push
popf
dec
shl
push
pop
pop
lds
mov
mov
sbb
pop
leave
out
int3
out
jb
je
jnp
adc
retf
fcom
sti
(bad)
shl
mov
adc
mov
repz
je
daa
adc
hlt
mov
call
jmp
fdiv
cli
push
mov
pop
inc
xor
hlt
aam
jmp
xor
adc
cli
and
cmps
popf
(bad)
mov
loopne
sub
cld
inc
mov
test
loop
adc
lock
inc
sti
aad
clc
adc
cmp
mov
jns
add
cmps
lea
popa
(bad)
fcomp
les
leave
arpl
jne
push
pop
jmp
es
or
out
mov
adc
pop
mov
popa
sar
pushf
adc
xor
shr
and
repnz
push
repz
adc
repz
mov
(bad)
adc
and
dec
movs
and
int
push
stos
push
lea
test
dec
push
xchg
ss
dec
in
adc
je
out
cld
ret
mov
iret
repnz
xchg
mov
or
mov
movs
cmc
enter
sbb
add
aam
in
push
push
jnp
sub
mov
adc
scas
aaa
push
jge
adc
in
in
cmp
or
jo
daa
push
xchg
xchg
popa
jmp
dec
es
loop
movs
mov
cmc
push
push
sbb
adc
retf
mov
iret
dec
idiv
push
adc
loopne
and
push
mov
xor
push
test
loop
pop
sub
arpl
in
stos
and
inc
mov
seto
ds
add
push
call
inc
adc
pop
ret
cmps
and
push
cmp
stc
push
mov
cmp
out
xor
xor
mov
pop
outs
cmps
imul
loope
mov
pop
(bad)
xchg
adc
sbb
or
addr16
add
lods
movs
mov
add
jecxz
inc
xchg
add
pop
enter
push
loop
pop
(bad)
call
test
(bad)
pop
imul
adc
inc
dec
(bad)
mov
mov
xor
xchg
aam
cmps
retf
test
retf
sub
ja
pop
xor
je
(bad)
pusha
std
push
sub
and
clc
ins
pop
mov
out
dec
push
not
sub
cdq
lods
je
inc
xor
add
dec
push
int3
xchg
mov
or
div
push
sub
rcl
mov
or
(bad)
mov
sub
cdq
out
retf
stos
dec
aam
dec
fwait
and
mov
add
(bad)
mov
stos
mov
mov
adc
xor
inc
push
lea
push
pop
aam
scas
adc
pop
loope
push
pop
pop
call
ss
xlat
adc
cwde
ret
and
int3
push
jae
mov
into
repnz
or
adc
(bad)
ins
(bad)
dec
and
aaa
jecxz
(bad)
xor
and
mov
shr
cmc
(bad)
(bad)
cld
cmp
push
fiadd
pop
dec
nop
lock
dec
and
je
fldcw
mov
cdq
and
jnp
ins
or
pop
dec
xchg
int3
sbb
imul
imul
aam
test
loope
pushf
popf
jecxz
xchg
mov
mov
sbb
arpl
cmp
cs
mov
retf
iret
pop
jns
jmp
sbb
enter
ja
add
push
pushf
int3
jno
adc
cmp
inc
or
ret
pop
dec
add
call
aas
or
xor
enter
push
xchg
cli
mov
add
push
popf
dec
(bad)
sbb
retf
loopne
call
mov
sbb
mov
pusha
ins
jmp
push
and
xchg
mov
sub
inc
xor
adc
fdivr
sub
or
pop
adc
aad
std
repnz
jo
(bad)
popa
jb
xchg
adc
pop
sahf
sub
test
mov
or
push
into
push
(bad)
dec
cmc
xor
gs
xor
lods
and
or
shl
mov
push
xchg
repnz
mov
dec
lods
adc
sahf
or
push
add
xchg
out
lds
adc
xchg
fsub
adc
(bad)
(bad)
dec
jg
jmp
mov
je
push
mov
jle
test
fld
dec
loope
adc
(bad)
in
jg
popa
dec
push
lahf
fadd
in
je
or
mov
mov
adc
mov
fs
mov
mov
add
or
fsubrp
call
and
fs
pushf
repz
fild
lods
xor
mov
addr16
pop
loopne
or
stos
sbb
xchg
fistp
adc
out
or
icebp
xor
push
(bad)
mov
sbb
adc
mov
sbb
test
push
cmp
ins
(bad)
(bad)
push
fidivr
sbb
mov
pop
repnz
in
sbb
aas
mov
sbb
mov
imul
sahf
jns
icebp
sub
xchg
nop
test
mov
lahf
inc
add
retf
out
jmp
or
call
jp
sub
pop
pop
pop
ins
pusha
sbb
pop
retf
cmp
sub
push
lahf
push
inc
sub
and
push
repz
cmp
push
ds
es
push
aam
mov
xor
cld
jg
arpl
sub
into
dec
jmp
fwait
sbb
xor
in
int3
sub
jmp
fidivr
inc
retf
es
call
cs
mov
fstp
(bad)
stos
push
aad
lods
mov
cmp
or
in
int
out
iret
sbb
stos
push
mov
mov
imul
in
push
loop
je
loopne
lock
fimul
or
mov
leave
repnz
inc
sbb
inc
(bad)
xor
adc
mov
ror
jnp
lods
jle
ret
sbb
fwait
or
in
pop
add
mov
outs
stos
fs
mov
or
jge
mov
clc
xchg
lods
cmp
jle
repnz
adc
int3
outs
add
popf
xchg
and
inc
fs
jae
adc
fld
mov
std
retf
sub
fwait
arpl
mov
jecxz
mov
sub
nop
mov
pop
mov
jb
adc
aas
mov
adc
sub
loope
fucomi
xchg
jae
jecxz
pop
sbb
test
add
(bad)
sub
or
ret
adc
jp
or
inc
repz
arpl
(bad)
push
call
xchg
loopne
mov
inc
ins
bnd
repz
fs
pop
addr16
adc
jmp
je
repnz
movs
fs
xchg
popf
enter
xchg
fild
mov
jl
xor
imul
sti
pop
popf
pop
sbb
cwde
loope
sub
stc
js
fbld
mov
out
fadd
push
movs
inc
pop
jb
je
and
xchg
int3
cmp
xchg
mov
inc
jecxz
dec
xor
retf
lea
ins
adc
dec
lds
leave
inc
test
in
dec
loope
xlat
push
mov
int3
jecxz
xor
outs
rol
xchg
adc
mov
jle
sbb
inc
bound
or
dec
mov
jnp
cmp
aaa
call
retf
(bad)
stc
sub
lods
push
xchg
ins
mov
loop
adc
inc
push
jmp
cli
test
call
repz
xor
dec
push
cmp
xor
imul
shr
xchg
cwde
dec
je
mov
dec
inc
adc
in
in
call
lahf
lods
lock
sbb
push
call
shr
push
test
and
outs
mov
add
ds
sub
imul
pop
scas
(bad)
div
adc
stc
dec
add
xchg
or
or
repnz
xor
xor
mov
adc
nop
fwait
lds
mov
push
test
(bad)
hlt
pop
inc
dec
cmps
sbb
mov
adc
fimul
cmp
icebp
xchg
mov
adc
arpl
xchg
adc
movs
ins
fbstp
adc
adc
daa
xchg
mov
push
sub
out
xchg
adc
dec
repz
and
jae
inc
push
in
shl
push
pop
xchg
aaa
xchg
or
mov
pop
jns
cli
unpcklps
movs
ja
sbb
int
(bad)
into
(bad)
nop
jp
cwde
aam
mov
sub
xor
mov
xor
push
in
add
push
jnp
jmp
icebp
rcr
leave
xor
jbe
mov
jmp
dec
inc
pop
inc
loop
or
xchg
sbb
ds
lea
aas
je
xor
in
add
push
ins
mov
mov
retf
add
in
dec
test
int3
or
sahf
in
dec
sub
mov
loope
pop
fnstenv
cmps
cli
pop
pop
mov
or
add
in
fst
jmp
add
and
rcr
dec
push
dec
es
je
stc
popa
pop
sbb
inc
movs
and
and
loopne
repz
sar
jbe
nop
rol
inc
(bad)
xchg
lahf
cdq
jns
ds
xchg
jbe
and
sbb
test
je
push
adc
loope
xlat
pusha
fsub
inc
mov
adc
sub
adc
pop
lods
mov
pop
sbb
adc
bound
fwait
adc
or
ins
adc
(bad)
push
retf
addr16
std
ss
push
cdq
not
sub
jne
sahf
and
jb
and
ins
mov
test
(bad)
mov
enter
sbb
jmp
addr16
xor
leave
mov
scas
push
inc
daa
test
pop
adc
or
inc
int3
cmp
adc
pop
pop
retf
pop
cdq
in
add
jae
push
daa
scas
adc
inc
mov
jo
cmps
mov
pop
adc
jmp
call
mov
arpl
call
jnp
enter
sub
or
or
sbb
movs
aaa
and
mov
push
dec
mov
fnstenv
adc
or
movs
adc
mov
(bad)
imul
adc
inc
adc
neg
fwait
xchg
ficomp
int3
sar
lods
sahf
cdq
nop
sbb
icebp
mov
hlt
shl
mov
inc
mov
mov
mov
add
out
jbe
je
lds
cli
fiadd
cmc
aam
mov
push
xor
jmp
add
and
adc
mov
dec
aas
(bad)
sar
popa
mov
stc
sub
sub
xor
arpl
xor
(bad)
pop
dec
lds
(bad)
push
pop
pop
fidiv
xchg
fisttp
out
iret
mov
adc
inc
xchg
repz
outs
sbb
add
sub
pop
pop
mov
push
cwde
push
cwde
add
xchg
xor
ins
or
pop
xor
ins
pop
push
js
fsubr
addr16
inc
cmps
xor
int3
and
push
out
mov
jge
cli
rcr
adc
cmp
stos
jne
cmp
jnp
in
jge
push
jb
out
imul
sub
sbb
(bad)
xor
xchg
jno
out
lock
scas
stos
test
adc
mov
data16
movs
adc
jne
clc
call
and
scas
jecxz
mov
pop
arpl
movs
ss
ds
packuswb
jne
out
inc
jne
xchg
dec
push
xchg
dec
test
rcl
ret
adc
push
adc
aad
test
or
das
cmp
loopne
cmp
or
aas
int
sbb
int3
stc
push
push
sbb
aad
mov
in
add
in
inc
cmps
cdq
cld
repz
movs
test
ficomp
or
rcl
enter
ret
cmp
cdq
mov
fcomp
pop
aaa
sbb
xchg
(bad)
leave
sub
imul
mov
cld
cwde
cmp
pop
std
imul
mov
mov
lds
in
movs
push
push
push
sbb
inc
xchg
imul
aam
mov
pop
idiv
pop
cs
adc
sbb
jge
repnz
cwde
cmp
ins
into
or
push
xchg
test
jmp
arpl
mov
or
sbb
add
push
icebp
adc
test
push
sbb
inc
ins
cli
xchg
adc
fcom
popa
sub
push
jp
adc
sub
and
adc
int3
push
mov
xor
mov
xor
mov
movs
cmps
(bad)
adc
test
stos
push
inc
xor
mov
(bad)
mov
rol
inc
retf
mov
and
mov
jmp
and
xchg
cmc
bound
or
add
pop
adc
in
sub
xor
or
dec
ret
mov
daa
jp
and
add
not
loop
mov
(bad)
adc
loope
fisttp
int3
mov
adc
cmp
add
adc
sbb
cmc
fcomp
pop
mov
mov
cmp
sub
ss
sahf
in
retf
push
cwde
pop
popa
int
add
je
sub
push
dec
jb
shl
retf
sbb
cmps
aam
test
clc
push
lods
xlat
xchg
popa
cmc
jp
xchg
icebp
mov
loope
inc
call
adc
addr16
(bad)
push
and
ficomp
mov
or
mov
sbb
push
fldl2e
or
out
enter
cmp
and
adc
push
sub
mov
in
inc
add
ror
pop
aam
xlat
mov
xchg
test
push
or
xchg
pop
in
arpl
adc
mov
xchg
push
inc
jmp
fwait
inc
call
inc
mov
jecxz
push
adc
clc
jl
inc
sbb
pop
es
aam
lods
sbb
dec
add
mov
inc
jg
xor
es
fsub
dec
push
jmp
and
mov
adc
push
aam
mov
sub
xor
je
xchg
scas
clc
stos
fs
mov
test
loopne
retf
xor
test
adc
out
jno
std
dec
popf
lock
pop
sbb
add
test
jno
mov
lock
sbb
loope
mov
dec
(bad)
into
cmp
and
mov
cmp
fisub
sbb
jmp
call
loopne
add
xchg
mov
call
inc
sahf
pop
cmc
imul
(bad)
pop
leave
adc
mov
cmc
pop
and
(bad)
hlt
mov
test
fs
mov
fild
aam
xchg
sub
fcomp
or
cmc
outs
mov
cmp
add
test
adc
in
mov
xor
mov
ss
inc
lods
lods
retf
(bad)
sbb
push
adc
inc
inc
adc
sbb
inc
adc
mov
or
jbe
adc
pop
xchg
ds
retf
fiadd
addr16
adc
outs
iret
adc
fadd
sahf
adc
mov
lock
in
adc
aad
jno
or
mov
push
je
pop
sahf
and
pusha
outs
loope
mov
or
mov
jns
outs
mov
out
pop
adc
mov
pop
jmp
pop
in
scas
pop
pop
fist
es
mov
jp
out
adc
jae
fstp
adc
cmps
movs
xchg
inc
rcr
ds
jno
aaa
loop
xor
add
lods
sub
dec
dec
fs
and
add
push
adc
ret
ins
out
xor
ret
ror
hlt
sbb
hlt
mov
push
jle
jae
push
int3
test
dec
rcl
xchg
xchg
mov
and
or
adc
sub
pop
xchg
fs
fimul
pusha
fbstp
add
jne
in
pushf
xchg
or
not
movs
and
jle
out
fnsave
test
cmp
cmp
jg
jnp
add
adc
mov
loop
je
dec
pop
scas
jmp
inc
je
jecxz
or
push
sbb
adc
adc
xchg
sti
xchg
imul
pop
xchg
stos
dec
int3
retf
xor
push
std
add
adc
dec
outs
push
in
add
inc
test
call
ja
xor
jae
push
lahf
dec
lahf
jmp
add
or
inc
pop
cmp
xor
call
jns
fdivr
or
xor
mov
out
(bad)
into
aam
nop
loop
test
sti
outs
and
jmp
int3
jne
data16
popa
mov
out
shr
and
and
and
xlat
lahf
jmp
lahf
cld
xchg
adc
call
mov
and
inc
loope
aad
jg
adc
fadd
sub
xor
jge
retf
mov
in
ret
aaa
mov
jbe
add
mov
scas
hlt
lahf
pop
div
in
adc
push
inc
ins
retf
lds
arpl
adc
fild
inc
sbb
popa
pop
add
scas
or
rcl
push
or
adc
mov
xor
xor
sbb
jmp
adc
pusha
sbb
shl
and
cmc
cs
add
mov
cld
sbb
inc
dec
ret
test
outs
adc
adc
xor
cli
sbb
mov
out
jne
in
imul
rcr
adc
loop
xchg
stos
retf
adc
daa
and
add
aad
out
adc
and
dec
pop
sti
sbb
aam
xchg
cwde
pop
adc
jge
imul
test
mov
cmp
rcl
xchg
scas
in
adc
adc
mov
mov
jecxz
push
rcl
push
push
jbe
(bad)
pop
in
ins
and
pusha
cdq
fs
adc
jmp
xor
adc
xchg
fild
je
push
outs
mov
xchg
xchg
mov
dec
and
loop
ins
mov
jne
jns
xchg
mov
cmp
sbb
cmc
push
push
hlt
shl
mov
xchg
xchg
call
aad
faddp
mov
mov
mov
cmps
xlat
retf
adc
fld
adc
call
xchg
xchg
pop
pop
dec
jmp
leave
jg
sbb
pop
inc
ins
push
or
jecxz
loopne
arpl
mov
dec
cmp
(bad)
push
lahf
sbb
and
arpl
pop
push
adc
sbb
adc
mov
xlat
fcomp
pop
arpl
pop
loop
retf
dec
cmp
repnz
sbb
add
fdivr
fadd
adc
enter
push
mov
mov
call
jo
pop
int3
das
mov
(bad)
xlat
xchg
je
nop
in
and
or
rol
push
fwait
or
adc
and
scas
pop
je
push
cmp
mov
out
xchg
adc
cld
jecxz
test
xchg
and
jae
lock
popf
ins
fld
out
mov
sar
jle
mov
push
inc
clc
pop
adc
das
les
cmp
retf
cdq
and
sbb
movs
xchg
push
ret
jl
(bad)
lods
cdq
inc
stos
mov
xchg
push
call
les
or
xor
js
inc
mov
iret
sbb
call
jge
xor
pop
or
out
data16
test
push
push
lods
arpl
sbb
movs
(bad)
rcl
or
and
cmp
xor
xchg
std
sub
fcomp
shr
out
push
stc
jb
cmp
push
lahf
fcom
and
xor
adc
std
push
mov
cmp
imul
aaa
add
adc
fdiv
(bad)
loop
shr
adc
xor
sub
out
aam
sub
loope
in
bound
inc
aam
mov
push
rcl
mov
not
imul
lock
mov
rol
jmp
popa
xchg
add
mov
push
inc
mov
test
sti
test
xor
jecxz
jmp
or
pusha
out
aam
pop
add
add
cmp
push
xchg
ins
je
movs
xor
or
sbb
dec
aaa
xchg
fiadd
mul
lea
xchg
jb
and
adc
aam
in
add
fs
enter
jnp
xchg
stos
aas
xchg
out
out
cmc
or
retf
inc
rol
frstor
js
inc
fs
adc
aam
cmp
dec
call
bound
pop
adc
test
mov
mov
push
lsl
movs
in
inc
lahf
arpl
movs
or
sbb
jb
or
jne
stos
or
imul
into
adc
xor
loop
adc
mov
or
fild
adc
push
xchg
pextrw
add
imul
mov
mov
cmp
adc
adc
(bad)
(bad)
push
jmp
mov
bound
adc
sbb
dec
sub
mov
fist
push
sbb
push
mov
or
out
xor
(bad)
nop
aam
dec
push
clc
sub
adc
jmp
adc
out
fadd
sbb
movs
ja
lods
dec
in
xchg
mov
mov
inc
shl
push
push
add
in
bound
mov
rcl
in
in
gs
daa
and
mov
inc
jmp
lock
adc
mov
cld
fwait
in
test
mov
and
mov
shl
xchg
lds
rol
scas
popa
(bad)
mov
xchg
jl
jmp
loope
mov
adc
imul
iret
jb
int3
loope
or
or
mov
add
adc
xchg
out
push
jbe
inc
adc
icebp
push
cmp
stos
mov
add
and
and
push
xor
mov
sbb
das
mov
je
test
into
sbb
mov
cdq
cmp
adc
dec
mov
hlt
jno
xchg
and
sbb
(bad)
cli
and
sbb
lods
fist
je
movs
sbb
dec
mov
push
inc
dec
fadd
je
xchg
inc
daa
(bad)
mov
ins
push
add
or
lds
jae
sbb
dec
in
dec
sbb
repnz
push
test
in
cli
in
es
enter
adc
mov
ins
push
mov
(bad)
dec
xor
imul
lods
clc
out
mov
adc
adc
lds
or
pop
pop
mov
xchg
xor
ss
or
int3
adc
mov
pop
lds
jne
add
jmp
enter
xchg
xchg
dec
adc
push
out
mov
mov
push
and
sti
push
leave
mov
mov
cmc
jge
mov
inc
or
jnp
(bad)
stc
test
out
jbe
(bad)
adc
cmp
gs
fcom
imul
lahf
xor
jns
std
xor
pop
mov
add
adc
mov
sbb
push
pop
(bad)
ficomp
push
xchg
test
ins
js
jnp
and
cmp
and
cmp
iret
push
stos
xchg
dec
dec
(bad)
in
sbb
xor
popa
loopne
adc
fadd
add
leave
(bad)
adc
cmc
cmps
mov
push
and
mov
adc
out
ss
pop
clc
and
test
lods
je
add
mov
(bad)
pop
movs
inc
fisub
daa
test
cmp
rcl
ins
xchg
adc
sub
inc
cmp
adc
add
fistp
fs
adc
and
sub
cli
or
push
aam
and
loop
aad
icebp
fwait
adc
stc
clc
jmp
ret
imul
jo
jp
add
adc
mov
add
enter
in
jnp
mov
in
and
adc
sub
mov
loopne
adc
jo
cmps
das
cdq
not
jmp
cmp
mov
call
call
dec
in
data16
movs
jb
push
rcl
inc
test
mov
xchg
mov
push
stc
int
xchg
and
jns
pop
jle
and
xchg
aad
add
fisubr
je
inc
push
pusha
pop
rcl
cli
xlat
int
test
cmp
jnp
retf
fbld
dec
jo
inc
ins
cmp
push
push
int3
jmp
out
pop
les
ins
adc
arpl
cld
or
push
xchg
jmp
mov
repnz
pop
mov
call
int3
out
ret
rcl
pop
loopne
push
push
and
(bad)
ficom
test
adc
pop
jmp
pop
nop
or
cmp
popf
jnp
sahf
cwde
out
mov
aam
xchg
mov
(bad)
dec
pop
sbb
in
ficom
adc
xor
inc
mov
test
popa
sbb
sar
push
or
add
dec
ins
cmp
test
adc
test
idiv
ds
pusha
push
xlat
pushf
lods
cld
imul
movs
xchg
mov
cli
aam
xchg
sbb
(bad)
test
loope
mov
push
fisttp
dec
cmc
sbb
imul
mov
dec
or
mov
imul
xor
mov
ss
cwde
push
(bad)
ss
push
sbb
xor
dec
inc
mov
in
and
imul
aam
addr16
push
dec
and
pop
fidivr
in
(bad)
arpl
sub
clc
ror
ds
mov
ds
pop
or
adc
test
jecxz
test
adc
or
cmps
not
ins
mov
mov
xor
je
xchg
mov
push
call
inc
shl
ret
push
push
addr16
sbb
fdivr
nop
adc
add
add
dec
adc
pop
das
pushf
(bad)
and
mov
cmp
pop
mov
pop
jae
cmp
into
fadd
arpl
nop
imul
sbb
ret
loop
ror
test
jle
cs
dec
shr
adc
mul
loope
cmps
push
in
test
jae
das
xor
fcmovu
shl
mov
xchg
movs
lahf
call
adc
push
xor
pop
and
(bad)
rcl
mov
xchg
mov
jge
xor
add
ds
mov
xchg
test
lock
dec
mov
popf
push
aam
es
pop
push
out
rol
sbb
ins
adc
push
pop
test
fist
mov
add
xlat
mov
inc
mov
je
and
lock
push
adc
mov
int3
push
mov
xor
pop
jmp
jle
retf
int
aam
pop
ss
and
mov
mov
dec
push
push
sub
mov
push
cmp
ficomp
pop
push
cdq
sub
fiadd
lods
mov
std
and
shl
xor
lahf
mov
inc
ret
sahf
(bad)
fstp
leave
mov
pop
jmp
sbb
jmp
in
xor
lods
cmp
jg
adc
scas
dec
or
jmp
and
loope
mov
int3
add
inc
mov
cmps
adc
sti
push
mov
je
(bad)
lahf
mov
das
cmp
sbb
xor
mov
push
adc
push
add
rcr
jp
add
call
retf
pop
sahf
sbb
arpl
mov
and
fs
mov
les
not
xchg
test
lds
push
sub
mov
adc
pop
push
adc
js
mov
leave
cmp
out
or
mov
outs
xchg
fs
inc
out
imul
(bad)
bound
pop
test
adc
fnstcw
sub
adc
movs
in
xor
sub
imul
push
mov
xchg
fnstenv
ja
call
shl
push
je
scas
cmp
cmp
xor
aam
add
lock
adc
sbb
xlat
retfw
bound
loop
(bad)
js
mov
ror
adc
dec
jg
pop
and
sbb
mov
xchg
scas
lods
mov
lock
aad
and
retf
xor
xchg
add
test
je
in
mov
in
aas
loopne
out
adc
not
retf
push
push
mov
je
jge
arpl
movs
push
mov
jmp
pop
adc
dec
mov
fidivr
push
out
add
repz
je
div
mov
add
jmp
xor
imul
jmp
mov
std
mov
cmps
dec
adc
repz
add
jg
pop
inc
das
cmps
inc
js
jno
pop
xor
icebp
cmps
sub
xchg
jmp
movs
mov
test
(bad)
(bad)
pop
or
sbb
outs
aam
and
pop
adc
icebp
repz
cmp
mov
add
xchg
fdiv
add
icebp
int3
in
inc
adc
test
xchg
xor
stc
add
xchg
fist
pop
and
leave
ret
inc
pop
dec
pop
int3
pop
int3
and
test
pop
dec
loopne
lahf
addr16
adc
mov
nop
mov
inc
and
int3
pusha
hlt
adc
pushf
mov
lahf
push
fstp
push
sub
cmp
stos
mov
mov
adc
push
fs
sbb
aam
jecxz
adc
js
pusha
inc
fild
cld
int
outs
adc
icebp
scas
mov
lock
adc
ss
fs
in
mov
inc
jmp
imul
adc
mov
cmp
add
test
(bad)
xchg
or
cmp
rcl
int
push
(bad)
clc
mov
icebp
pop
fld
jl
cmp
popa
mov
test
inc
push
adc
stc
idiv
loope
pop
hlt
out
jbe
push
sbb
adc
push
adc
dec
scas
cmp
adc
xor
xchg
cmps
sub
rcr
adc
pop
and
mov
repz
imul
push
cmp
mov
movs
xchg
xchg
fsub
adc
aad
popf
sub
sbb
stos
jmp
and
or
cmc
sbb
pusha
adc
sbb
shl
adc
adc
test
mov
jb
ret
ds
imul
je
mov
je
data16
inc
cmps
rol
call
mov
repnz
mov
cdq
mov
ss
stc
mov
xchg
out
sbb
mov
lods
push
aam
test
out
jnp
push
loope
rcl
inc
push
sub
jb
pop
fidivr
les
mov
mov
es
into
or
int3
adc
enter
add
das
movs
cdq
inc
adc
mov
int
out
jo
arpl
aas
lock
push
sub
ins
dec
cmc
call
dec
mov
pop
pop
lods
je
sbb
mov
cli
hlt
sbb
cwde
loop
int3
and
loope
or
ins
pusha
enter
mov
bound
sahf
sub
jge
ror
push
retf
loopne
jecxz
jae
lock
xchg
icebp
add
enter
pusha
loope
ror
stc
mov
lahf
jo
retf
mul
stos
inc
dec
je
test
hlt
xor
xor
lahf
adc
fiadd
mov
popa
call
mov
add
jo
rcl
add
pop
adc
dec
inc
test
adc
push
aad
mov
test
mov
adc
stc
mov
mov
outs
jnp
std
je
jecxz
and
adc
mov
add
adc
movs
sub
repz
pop
fcomp
add
pushf
xchg
push
(bad)
mov
sti
dec
sub
mov
ins
pop
jmp
sahf
(bad)
aad
adc
pop
dec
pop
xor
shl
sbb
dec
aam
or
pop
jle
adc
out
mov
arpl
rcl
cld
in
add
int
mov
jg
mov
data16
cld
cmps
cs
adc
in
xchg
push
pop
mov
add
js
ror
fisttp
xor
sub
push
adc
shl
(bad)
fisubr
adc
jle
cmp
ret
call
repz
jo
nop
ins
sbb
outs
pop
adc
call
mov
in
xchg
push
lock
cli
cmp
in
sbb
call
sbb
or
outs
mov
es
cmps
sbb
cdq
(bad)
out
xchg
add
aas
imul
and
pop
push
or
retf
jae
loopne
ror
fisubr
fdiv
cli
push
or
sbb
ror
jmp
inc
imul
(bad)
out
enter
mov
cld
(bad)
out
jecxz
jg
or
xchg
int3
or
icebp
xchg
push
jne
imul
push
adc
sub
lahf
push
je
in
sub
inc
mov
mov
sti
js
leave
imul
push
pushf
mov
lahf
mov
retf
mov
mov
adc
loopne
or
jae
or
xchg
cmp
dec
or
pop
enter
outs
movs
or
je
sub
outs
dec
push
jo
push
stos
mov
inc
imul
cmps
clc
call
add
aas
lods
stc
pop
cmp
pop
je
aad
or
ret
or
ins
mov
(bad)
push
in
dec
out
pop
sbb
jo
cld
add
fstp
jmp
fsub
nop
cmp
xchg
xor
and
push
adc
xor
sub
into
pop
cmps
dec
fbld
test
dec
mov
cmp
mov
sub
adc
mov
push
dec
es
iret
data16
retf
xor
movs
stos
adc
cmp
mov
sbb
icebp
les
adc
js
fwait
adc
stc
add
movs
cmp
or
repz
fst
inc
or
xchg
xlat
ffreep
add
cmp
adc
test
mov
pop
mov
jmp
adc
lahf
add
loope
fdivr
xchg
adc
outs
mov
adc
mov
push
add
mov
mov
sbb
ds
mov
xlat
repz
sbb
sahf
(bad)
movs
inc
movs
inc
sub
in
les
aaa
sahf
icebp
cli
and
adc
and
ret
adc
cmc
das
add
pop
push
(bad)
adc
ror
push
sub
and
cmp
sbb
push
push
mov
jmp
stos
push
jae
xchg
mov
nop
lods
in
popf
pop
imul
adc
jp
rcl
jns
adc
push
mov
mov
sahf
test
out
push
mov
cmp
sti
lock
ds
cmps
push
je
adc
lock
in
jecxz
cmp
aaa
inc
xchg
push
jl
inc
push
nop
mov
ja
push
fs
sbb
or
std
inc
stos
pop
jl
adc
fnstcw
add
adc
inc
pop
and
jo
adc
mov
leave
inc
sbb
sbb
mov
cmp
push
adc
in
popf
xor
and
cli
adc
mov
xchg
jp
int3
jno
mov
xchg
pushf
or
sbb
push
pushf
mov
dec
lods
xchg
adc
js
and
xchg
jge
push
jbe
jmp
adc
clc
test
je
cmc
adc
xor
jne
cwde
cld
test
enter
retf
(bad)
adc
mov
adc
into
adc
iret
movs
or
sub
adc
dec
adc
push
or
add
stos
push
mov
jmp
rdmsr
xchg
cld
pop
icebp
rcr
pop
shr
arpl
pop
pushf
or
adc
fcom
jl
inc
in
ss
out
fimul
jbe
xchg
jge
dec
mov
sti
adc
int
dec
mov
cmc
enter
es
in
iret
sub
out
or
fidiv
cmp
das
movs
xchg
cld
enter
cmp
stc
int3
les
dec
hlt
aam
sub
mov
das
ja
and
mov
fadd
mov
jae
popa
fs
paddq
daa
sar
bound
mov
sbb
or
pop
jecxz
cmp
mov
mov
cmc
into
aas
push
int3
jne
mov
cmps
dec
ins
inc
cmp
(bad)
nop
rcl
pop
push
cld
lock
pop
add
hlt
sub
pop
add
cli
out
adc
inc
in
(bad)
cwde
jge
mov
test
ficom
push
fcom
xor
adc
fwait
or
dec
sbb
xchg
fs
push
jo
pop
cli
sti
push
div
push
xor
cmp
inc
adc
fcomp
mov
adc
ds
mov
adc
push
push
sbb
out
sub
mov
push
lea
xchg
shl
mov
xchg
call
leave
dec
push
jbe
adc
mov
jmp
push
not
shl
out
pop
sub
ror
std
sbb
xor
cmc
add
adc
test
push
test
shl
add
or
adc
and
jbe
sbb
cmp
mov
inc
imul
fdivp
and
stos
int3
push
or
xchg
mov
xor
push
xchg
test
cmps
fiadd
adc
push
stos
daa
(bad)
lods
gs
pop
or
mov
les
jo
pop
jl
stos
not
push
sub
sbb
inc
rol
stc
retf
pop
int3
cmp
or
ret
rcl
pusha
sbb
pop
outs
dec
pop
cmp
mov
fnstcw
sbb
fsubr
sbb
mov
test
fcmove
hlt
adc
push
cs
rol
mov
fucomp
rol
cmp
jmp
adc
push
sar
sub
pop
dec
push
xlat
retf
adc
or
in
sbb
iret
mov
jecxz
sbb
push
fcomp
movs
xchg
jle
clc
pop
cld
rcr
adc
aam
call
mov
in
mov
test
cmp
jmp
sbb
(bad)
jno
add
rcl
popf
sbb
adc
xchg
xor
push
cld
push
sub
cmp
push
dec
push
sar
jns
sar
push
pop
xor
xor
cdq
(bad)
cli
pushf
xchg
cmps
cwde
xlat
lods
pop
xchg
sbb
shl
xor
dec
mov
test
ficomp
and
ss
adc
xor
adc
lods
sbb
test
xor
pushf
or
mov
inc
rcr
sar
jg
push
rcr
inc
jno
jecxz
call
into
scas
dec
adc
test
jg
ins
xlat
pushf
in
or
jmp
mov
sbb
ficom
adc
shl
test
adc
sub
xchg
xchg
sti
mov
push
bound
inc
jecxz
fcmove
dec
pop
push
stos
hlt
or
xor
adc
ds
xchg
repz
in
pop
(bad)
push
cwde
pop
daa
and
add
imul
push
add
jne
in
(bad)
push
je
fisttp
push
dec
adc
cmp
fcom
or
xchg
int
pop
mov
std
push
or
(bad)
cmp
jnp
push
ds
ds
push
dec
enter
sub
test
(bad)
shl
call
xchg
sbb
adc
cld
imul
xchg
jno
and
adc
push
rcl
push
push
adc
loopne
int3
ins
not
push
xchg
mov
leave
and
aad
rol
adc
add
mov
jmp
lods
mov
sub
aaa
xor
xor
ss
mov
out
dec
jo
cdq
sbb
xor
fidivr
adc
inc
push
mov
mov
pushf
icebp
adc
pop
pop
mov
in
ins
jge
jg
movs
lahf
out
mov
inc
lea
inc
add
data16
adc
push
stos
xchg
sub
test
lock
add
sub
sbb
mov
les
cmp
(bad)
pop
adc
mov
xor
mov
xor
movs
inc
in
or
xchg
push
mov
jl
adc
mov
test
and
jb
mov
mov
push
cmps
mov
xchg
xor
push
daa
adc
repnz
mov
xor
add
hlt
add
addr16
cmps
aaa
xor
jg
sub
and
rcr
fwait
xchg
cmp
das
daa
sbb
inc
mov
js
and
(bad)
sub
mov
xor
adc
sbb
xchg
aam
addr16
sbb
mov
outs
jmp
test
mov
sub
pop
sbb
stc
pop
mov
in
imul
push
cmc
pushf
movs
and
stc
je
stos
adc
int3
fsubr
outs
scas
adc
mov
cdq
push
sbb
aaa
and
mov
in
pop
push
jb
push
jp
or
hlt
adc
sbb
fldpi
mov
and
fcomp
mov
scas
imul
dec
pop
mov
sub
lods
stc
xchg
inc
cmp
adc
aam
(bad)
js
sbb
in
addr16
or
ins
fbld
lahf
mov
int
xor
adc
mov
xchg
fdiv
sub
push
xchg
xor
xor
sbb
jnp
adc
lods
enter
cmps
ja
sbb
and
push
fld
inc
imul
dec
push
mov
hlt
(bad)
sbb
dec
mov
jmp
les
cld
jnp
add
mov
imul
out
test
es
(bad)
cld
mov
add
test
repz
sbb
sbb
stc
je
in
les
cmp
xchg
jg
pop
sub
in
jge
or
or
gs
pusha
daa
sub
movs
adc
cmps
push
rcl
push
clc
sub
adc
mov
sbb
push
cmp
cld
or
fsub
aaa
cmp
mov
adc
repnz
shl
icebp
xor
xor
shl
sahf
xor
daa
adc
es
pusha
pop
sub
popa
pop
xchg
pop
cmp
inc
push
mov
adc
xchg
sub
clc
jns
sti
hlt
mov
sbb
sahf
and
add
(bad)
aam
xchg
js
sbb
pop
out
aas
jl
adc
push
add
xor
pmulhw
sub
xor
adc
stos
add
adc
sub
fdiv
dec
xor
or
adc
sub
xor
lea
xchg
lds
test
in
inc
xor
outs
inc
out
hlt
sbb
or
sbb
mov
addr16
les
cvttps2pi
jmp
leave
sbb
add
add
inc
mov
adc
or
stos
push
adc
aam
sbb
hlt
pop
movs
cli
pop
popf
call
fwait
js
sbb
cmps
adc
dec
mov
outs
adc
ret
sub
add
ficom
cld
and
jge
popf
add
cmp
in
test
aam
pop
hlt
outs
or
mov
inc
pop
push
or
aaa
xor
imul
jbe
xchg
pop
int3
xor
push
adc
add
mov
mov
lds
push
cmp
pop
aam
fwait
xchg
push
ins
pop
icebp
imul
imul
dec
aam
cmps
mov
test
icebp
mov
shl
test
and
scas
nop
mov
sbb
test
add
pop
inc
mov
stos
xchg
jp
not
popa
xchg
cs
loopne
or
push
je
sub
rol
stos
aas
jns
mov
mov
out
dec
lods
cmps
xchg
in
inc
mov
pop
jae
pop
push
or
adc
dec
ins
push
lock
hlt
ds
sbb
test
cmp
fwait
add
pop
mov
inc
mov
adc
imul
cmps
mov
or
ins
adc
ror
aam
xor
sbb
pop
inc
push
push
test
jns
cmp
dec
sahf
pop
aad
sub
xor
popa
out
fisub
std
int3
and
movzx
nop
std
int3
loop
push
ret
jnp
mov
ficom
push
add
xchg
in
hlt
pusha
stos
int
jmp
mov
cmc
or
sbb
cdq
pmulhuw
nop
daa
fnsave
movs
pushf
jne
rol
pop
push
mov
add
inc
pop
out
cmc
pop
sub
cmp
xchg
(bad)
mov
arpl
sar
dec
cmps
xchg
or
call
pop
sub
sub
jo
cmp
adc
nop
cwde
js
inc
add
mov
inc
cli
xor
or
dec
pop
lods
pop
add
jno
out
in
and
sar
push
mov
mov
inc
test
cmps
cmps
sbb
fst
fcomp
cs
xor
inc
in
and
dec
adc
dec
psllw
imul
adc
and
jl
dec
(bad)
cmps
pop
lahf
xor
mov
sbb
in
in
sbb
mov
test
mov
retf
mov
sbb
into
test
mov
data16
add
adc
sub
push
jp
xchg
xchg
(bad)
aam
xchg
scas
repz
cmp
jle
scas
inc
daa
push
jno
int
mov
lods
mov
dec
movs
jo
stos
movs
jb
mov
or
push
pop
enter
push
(bad)
jmp
inc
jns
aas
in
pop
movs
(bad)
pop
xchg
cmps
mov
inc
inc
jbe
cs
add
cdq
adc
adc
mov
outs
mov
repz
aad
movs
cld
addr16
sti
xchg
cmps
jle
or
pushf
pop
loopne
push
sub
enter
and
pushf
mov
mov
lea
jmp
jns
out
or
in
pop
(bad)
aaa
outs
inc
push
adc
aam
ret
cdq
add
jno
sbb
xchg
ds
jle
cmps
cdq
add
jae
daa
xor
push
(bad)
int
jmp
in
(bad)
inc
cld
mov
popf
ror
test
xlat
push
xchg
rcr
xor
mov
out
mov
popa
gs
adc
jb
cmp
add
xor
lds
jle
push
or
jg
daa
jb
dec
call
mov
and
pop
jmp
pop
cld
(bad)
lea
add
pop
aaa
in
and
mov
lea
jo
call
lods
inc
jno
sbb
mov
jmp
mov
bts
sar
inc
mov
bt
sub
clc
repnz
pushf
lea
jne
clc
test
shrd
mov
xor
test
ror
sub
btc
btc
mov
cmc
cmc
pushf
sub
stc
stc
mov
push
pop
jmp
push
lea
call
pusha
pusha
push
lea
jae
pusha
pusha
setb
lea
jp
mov
dec
not
pushf
inc
setno
not
mov
mov
lea
jmp
inc
sub
not
pusha
xchg
seta
lods
mov
pushf
not
push
call
call
push
rol
or
outs
push
xor
retf
cmp
mov
les
push
call
add
jo
dec
pop
pop
pop
cmc
out
cdq
mov
addr16
mov
xchg
dec
xor
(bad)
in
sub
add
icebp
pop
push
inc
ins
add
cmp
cmps
xchg
mov
sar
les
push
call
pushf
push
rcl
jl
mov
pop
das
repnz
xchg
addr16
movs
or
dec
add
push
push
jbe
pop
cmp
sub
sbb
pop
mov
loopne
sbb
xchg
inc
jmp
call
mov
pushf
lea
jmp
mov
call
stc
push
shrd
lea
push
sub
mov
lea
ror
call
call
shl
pushf
mov
mov
jmp
jmp
stc
push
cmp
not
stc
call
stc
rcr
mov
clc
jmp
stc
sub
call
call
pusha
pushf
mov
jmp
mov
call
mov
push
push
lea
jmp
mov
pusha
pushf
pop
pushf
call
pusha
jmp
pusha
push
mov
push
pushf
lea
jmp
pushf
pop
push
lea
je
pushf
push
pop
pusha
mov
pushf
mov
lea
jmp
push
mov
mov
jmp
mov
mov
mov
mov
mov
lea
jmp
push
jmp
or
bt
pushf
mov
bt
seto
mov
push
mov
test
sub
push
clc
test
shr
pusha
jmp
add
add
pusha
push
pop
push
lea
jmp
sub
jmp
pusha
jmp
call
jmp
mov
pushf
pushf
pushf
mov
lea
jmp
push
pusha
stc
cmp
pusha
jmp
pushf
jmp
call
mov
mov
pusha
push
pushf
pop
mov
mov
mov
push
push
pop
mov
pushf
mov
lea
jmp
jmp
sub
call
and
ror
mov
adc
bsr
push
sub
pop
movzx
clc
ror
inc
bsf
adc
stc
not
movzx
xor
adc
lea
rcl
sub
xor
stc
lea
movzx
cmp
cmp
mov
bt
add
push
cmp
or
push
push
lea
je
call
aad
sbb
cmp
mov
cmp
sub
pusha
mov
mov
lea
jmp
pushf
call
neg
xchg
dec
btr
bswap
pushf
inc
bswap
rol
lea
shrd
sub
push
clc
shrd
lea
add
xchg
mov
mov
inc
add
neg
dec
cmp
shrd
mov
bt
inc
add
bt
shl
xor
shld
clc
inc
jmp
mov
lea
repz
shl
sbb
inc
push
ror
sar
movsx
push
bswap
not
or
mov
dec
neg
dec
dec
shr
shl
bswap
xchg
xadd
bsf
sbb
mov
bt
sub
push
movzx
lea
movsx
xor
movzx
lea
mov
bt
jmp
mov
push
mov
push
pushf
mov
lea
jmp
jmp
push
pop
pushf
mov
lea
jmp
mov
push
mov
pushf
pushf
pop
push
call
mov
push
jmp
shl
bt
ror
cmc
mov
jmp
idiv
pushf
mov
call
movsx
call
jmp
call
pushf
pop
pushf
jmp
jmp
test
push
call
stc
add
pushf
pusha
pushf
jmp
pusha
mov
mov
pushf
mov
mov
pushf
pusha
mov
call
stc
movzx
mov
btr
mov
push
clc
bt
call
call
mov
push
mov
mov
lea
jle
mov
pusha
pusha
pushf
mov
lea
jmp
pushf
pusha
mov
push
push
mov
pushf
push
lea
jmp
jmp
cmc
and
pushf
call
pop
mov
not
mov
lea
push
lea
jno
bswap
push
movsx
movsx
repz
jmp
pushf
pop
pushf
mov
push
call
movzx
pushf
jmp
movsx
not
mov
push
push
push
mov
push
mov
pushf
lea
jmp
bsr
bts
mov
push
cmc
add
pushf
pusha
mov
pushf
pushf
mov
lea
jmp
push
pop
pushf
pushf
lea
jmp
lea
jne
call
mov
mov
call
mov
mov
jmp
mov
pushf
pusha
lea
jmp
call
pushf
pusha
shld
pushf
call
pushf
pop
mov
push
push
pop
mov
push
mov
mov
lea
jmp
call
sete
mov
test
sub
clc
pusha
add
mov
pushf
pop
push
jmp
pushf
push
mov
lea
jo
pusha
mov
pusha
pushf
pop
call
push
pushf
mov
pushf
call
mov
pushf
mov
pushf
push
pushf
mov
call
pusha
call
shrd
rdtsc
shrd
mov
shl
stc
bt
setbe
mov
cmc
pushf
call
call
pusha
jmp
pusha
bswap
dec
inc
test
bsf
not
rcr
shrd
add
not
call
lea
btr
movzx
pusha
mov
push
neg
mov
jmp
movzx
xchg
rcl
mov
bts
btr
aam
cmc
pop
std
pop
btr
or
or
popf
bswap
xchg
cwde
rdtsc
pop
mov
movsx
cdq
pop
lea
movzx
bswap
pop
jmp
call
add
jmp
mov
push
mov
mov
mov
lea
jmp
neg
push
stc
add
bt
cmp
xor
jmp
pushf
pop
push
push
push
pop
mov
push
lea
jmp
jmp
stc
mov
test
bt
add
push
pushf
pushf
pushf
lea
jmp
movzx
movsx
setp
mov
rol
mov
bt
sub
call
jmp
jp
idiv
call
jmp
jmp
clc
cmc
xor
cmp
add
call
push
mov
mov
mov
pushf
lea
jmp
sub
push
call
bt
test
test
xor
stc
pusha
cmp
xchg
pushf
test
push
jmp
jmp
pushf
pusha
pusha
mov
mov
push
mov
pushf
mov
call
push
pop
mov
pushf
pushf
lea
jmp
push
jmp
add
call
not
cmc
clc
mov
and
push
mov
pushf
push
pushf
pop
mov
jmp
jmp
mov
pusha
push
lea
jmp
jmp
movsx
cmp
mov
movzx
add
bts
jmp
sar
rol
jmp
pushf
mov
jmp
mov
pushf
mov
push
lea
jmp
pushf
pop
jmp
jmp
sbb
daa
aad
mov
test
add
cmp
cmc
pushf
not
test
lea
call
push
mov
mov
push
mov
inc
stc
clc
add
push
call
push
lea
jmp
pusha
lea
jno
push
call
stc
rol
clc
test
sub
mov
pushf
pushf
clc
xor
push
test
cmc
test
cwde
pushf
clc
call
pusha
pushf
mov
mov
pushf
call
add
mov
pushf
pushf
lea
jmp
call
xor
movzx
sar
bsr
add
btc
stc
not
ror
movzx
mov
dec
inc
not
call
mov
call
shrd
daa
movzx
movzx
pushf
test
pushf
pusha
xor
push
clc
stc
add
call
jmp
mov
stc
stc
push
stc
sub
jmp
mov
push
mov
jmp
pusha
mov
push
mov
pushf
mov
pushf
mov
call
pushf
push
push
mov
call
mov
pushf
push
pushf
pop
push
push
pushf
push
pop
pushf
pushf
lea
jmp
mov
call
sub
push
mov
mov
push
lea
jmp
mov
call
push
mov
cwde
not
movsx
mov
pusha
lea
cpuid
push
cmc
test
push
sub
sub
jns
clc
cmc
cmp
call
cmc
movzx
clc
call
push
mov
jmp
pushf
call
pushf
cmp
add
stc
ror
call
add
jmp
lods
xor
cmc
sub
sub
xor
sub
mov
sub
in
sub
fdiv
sub
sub
sub
or
sub
mov
and
dec
xor
xchg
xor
and
sub
mov
sub
xchg
and
sub
sar
call
sub
xor
sub
sar
call
sub
fistp
sub
mov
sub
sar
call
sub
mov
and
scas
push
sub
mov
sub
call
sub
cwde
sub
(bad)
aas
sub
mov
sub
inc
cmp
js
sub
leave
das
sub
fwait
das
sub
scas
push
sub
dec
xor
mov
sub
xchg
push
sub
leave
das
sub
loopne
sub
(bad)
xor
mov
sub
mov
sub
push
aas
sub
adc
sub
repnz
sub
adc
sub
xor
sub
mov
sub
or
sub
out
cmp
mov
sub
nop
and
js
sub
inc
push
sub
(bad)
aas
sub
and
cmp
ret
sub
call
sub
jb
sub
and
es
nop
and
arpl
call
sub
(bad)
aas
sub
ss
call
sub
(bad)
aas
sub
mov
and
sub
mul
sub
mov
sub
cmp
das
sub
sub
sub
cmp
push
sub
push
push
sub
leave
das
sub
cwde
sub
or
call
sub
lods
xor
xchg
and
sub
mov
das
sub
sbb
sub
or
sub
or
sub
mov
cs
push
aas
sub
sbb
sub
mov
sub
or
call
sub
push
aas
sub
in
sub
ss
call
sub
cmc
sub
sub
xchg
xor
cmc
sub
sub
inc
push
sub
sar
call
sub
mul
sub
sbb
sub
repnz
sub
jb
sub
mov
cmp
(bad)
xor
loopne
sub
inc
cmp
jle
sub
adc
sub
js
sub
mov
sub
push
aas
sub
sar
call
sub
xchg
push
sub
fdiv
sub
fistp
sub
cdq
and
gs
out
cmp
xchg
sub
mov
sub
sar
call
sub
loopne
sub
repnz
sub
xchg
xor
gs
push
aas
sub
leave
das
sub
in
sub
test
aaa
sub
cmp
aaa
sub
mov
sub
xchg
push
sub
cdq
and
xor
sub
and
sub
arpl
call
sub
test
ss
fistp
sub
sub
sub
gs
mov
sub
mov
sub
popa
xor
mov
cmp
mov
xor
sbb
sub
cwde
sub
xchg
and
sub
sbb
sub
or
call
sub
inc
cmp
in
sub
fdiv
sub
loop
sub
xchg
push
sub
and
xor
lods
xor
sar
call
sub
js
sub
repnz
sub
fwait
das
sub
or
sub
cwde
sub
push
and
sub
repnz
sub
mov
sub
lods
xor
test
ss
mov
sub
or
sub
or
sub
xchg
xor
ss
call
sub
xchg
xor
xchg
and
sub
loop
sub
jle
sub
push
aas
sub
out
cmp
push
aas
sub
mov
cmp
loopne
sub
fwait
das
sub
js
sub
test
cs
nop
and
ss
call
inc
and
mov
pushf
jmp
neg
shl
dec
rol
mov
btc
mov
test
pusha
cmp
push
add
pusha
mov
push
mov
pushf
mov
mov
lea
jmp
pushf
pushf
mov
pushf
pusha
push
mov
call
pushf
pop
mov
push
pop
mov
lea
jmp
rcr
shr
bt
mov
setb
jg
bt
push
mov
cmc
call
call
lea
jne
bt
rcl
bt
xor
movzx
movzx
pop
pusha
lea
jmp
xadd
rol
shr
add
mov
rol
dec
mov
pushf
sub
pusha
cmc
test
shr
call
bts
mov
and
mov
pusha
sub
bt
stc
jmp
pushf
push
jmp
push
call
pushf
mov
pushf
pop
mov
jmp
push
mov
push
mov
pusha
call
pushf
pop
pusha
pushf
mov
push
pop
push
pushf
push
lea
jmp
cmp
bswap
btc
lea
mov
jmp
add
test
pushf
sub
pushf
stc
call
xor
stc
pushf
bt
add
mov
cmp
stc
cmc
sub
bt
test
cbw
pushf
stc
jmp
mov
mov
mov
mov
call
pusha
xor
stc
pushf
call
movsx
mov
cwde
mov
jmp
pusha
mov
call
mov
call
mov
pushf
push
jmp
jmp
mov
push
mov
pusha
call
lea
jne
clc
cmp
sub
push
push
xchg
lea
jns
pushf
pushf
pushf
mov
push
mov
push
push
push
push
ret
mov
pusha
pushf
pushf
push
lea
jmp
push
pushf
inc
jmp
push
mov
lea
jmp
pushf
push
pop
mov
mov
mov
lea
jmp
jmp
add
rcl
btc
bt
shrd
xor
bswap
shl
add
pusha
lea
bswap
inc
not
stc
sar
movzx
clc
lea
ror
mov
stc
sub
jo
xor
jmp
jmp
jmp
mov
push
jmp
test
pushf
mov
clc
test
test
add
push
pusha
call
pushf
mov
mov
push
mov
push
jmp
push
push
jmp
mov
jmp
mov
mov
inc
push
pushf
lea
jbe
dec
pusha
mov
push
call
call
jmp
movzx
mov
push
lea
jmp
pushf
push
push
mov
push
pushf
pop
mov
push
pop
mov
lea
jmp
movsx
call
xchg
lea
lea
call
mov
mov
jmp
push
mov
call
jmp
push
pop
mov
mov
mov
lea
jmp
pushf
pushf
inc
mov
pushf
mov
mov
lea
jmp
inc
add
pusha
neg
test
bswap
mov
ror
add
sub
add
pop
sub
cmp
bsf
xor
neg
rol
bt
add
shl
bswap
neg
xor
bsf
test
add
pop
movsx
mov
pop
inc
rcr
shl
bswap
btc
movzx
movsx
and
or
sub
mov
call
pusha
mov
push
mov
pusha
mov
mov
push
jmp
mov
mov
mov
call
push
mov
call
pushf
call
mov
mov
mov
jmp
mov
jmp
not
and
sbb
mov
stc
neg
sub
pop
lea
bswap
mov
movsx
push
not
lea
pushf
pop
pusha
mov
pop
push
xchg
not
mov
not
bswap
lea
call
pushf
mov
push
push
pushf
lea
jmp
pusha
mov
call
mov
pushf
mov
pushf
mov
mov
pushf
lea
jmp
shld
not
stc
mov
stc
test
clc
push
sub
test
bt
and
jmp
pushf
mov
jmp
not
cmc
test
not
clc
jmp
mov
jmp
jmp
jmp
push
push
pushf
pop
pushf
jmp
push
pushf
mov
pushf
mov
mov
lea
jmp
shl
shl
test
mov
mov
mov
clc
stc
push
mov
sub
bt
shl
push
pusha
mov
call
call
call
sbb
rol
xor
pusha
rcr
pop
mov
pusha
mov
cmc
test
shl
bt
cmc
shr
cmc
or
pushf
mov
clc
mov
xor
jmp
clc
shrd
sbb
mov
pushf
sub
push
pushf
call
add
push
mov
push
pushf
inc
mov
jmp
mov
pushf
bt
clc
jmp
div
mov
mov
pushf
pushf
jmp
sub
lea
jne
pusha
pusha
mov
mov
call
bswap
bt
cmp
cmc
bt
add
call
pushf
mov
push
push
push
pushf
lea
jmp
mov
test
sub
pusha
jmp
mov
pushf
mov
call
cmc
mov
clc
sub
mov
inc
push
mov
pushf
mov
pushf
push
pushf
lea
jmp
mov
mov
call
call
pushf
mov
mov
pushf
mov
mov
pushf
pushf
push
lea
jmp
mov
mov
mov
jmp
pushf
push
mov
lea
jne
neg
push
stc
mov
bt
and
clc
cmp
push
call
pushf
mov
push
pushf
lea
jmp
aaa
shl
rcl
mov
bt
pusha
jmp
not
movzx
shl
mov
shrd
mov
jmp
bt
jmp
pushf
push
pop
mov
push
push
pushf
lea
jmp
mov
pushf
mov
pushf
pushf
jmp
movzx
not
movzx
jle
mov
mov
mov
jmp
pushf
mov
push
mov
jmp
jmp
pusha
mov
call
mov
jmp
inc
bsr
lea
cmp
cmp
pusha
pusha
lea
ja
shl
aas
mov
aam
or
aaa
sbb
lea
btc
pushf
sub
dec
cmp
lahf
bt
lea
call
push
pop
push
mov
pushf
push
lea
jmp
mov
jmp
add
test
call
mov
call
mov
push
jmp
push
pusha
mov
jmp
rep
neg
or
adc
mov
pop
btr
pushf
mov
bt
jmp
mov
call
sub
mov
bt
pushf
clc
ror
clc
clc
cmc
pushf
not
bt
cmc
call
pushf
pop
mov
jmp
movsx
setae
dec
mov
sub
dec
rcl
mov
bt
pushf
add
call
call
add
pusha
pushf
pop
mov
push
pop
pushf
pushf
push
pushf
lea
jmp
jmp
jmp
push
mov
mov
push
push
mov
pushf
mov
mov
call
mov
pusha
push
call
mov
call
push
xchg
pop
mov
push
pusha
xchg
call
call
jmp
sub
shrd
mov
call
daa
mov
rcr
mov
add
or
cmc
neg
mov
cmc
add
cmp
jmp
mov
pusha
push
push
lea
jmp
clc
rol
movsx
mov
bsr
mov
jmp
mov
pushf
pushf
mov
pushf
mov
lea
jmp
pushf
call
mov
mov
mov
mov
lea
jmp
sbb
mov
neg
mov
pushf
sub
call
call
mov
call
cmc
push
popf
mov
mov
lea
jmp
lea
jo
pusha
mov
mov
pusha
lea
jmp
push
mov
mov
call
mov
mov
mov
jmp
call
jmp
jmp
push
jmp
mov
pushf
push
lea
jmp
sub
mov
jmp
push
mov
std
cld
pusha
push
pushf
jmp
shrd
mov
pushf
not
mov
bt
rol
setae
mov
push
bt
sub
push
pusha
mov
call
mov
pusha
mov
lea
jmp
rdtsc
xchg
lahf
movsx
mov
lahf
lahf
movsx
mov
jmp
push
jmp
mov
push
call
not
bt
movzx
pushf
rcr
xor
dec
call
mov
push
pop
pushf
mov
lea
jmp
pushf
mov
pushf
push
jmp
bt
clc
add
jmp
pusha
neg
jmp
mov
push
jmp
stc
bts
mov
shr
or
shrd
mov
cmc
cmc
push
call
cmp
pusha
inc
dec
mov
push
sub
cmp
jmp
pushf
call
pushf
push
rol
test
pushf
cmc
jmp
push
mov
jmp
bt
push
add
mov
pusha
pusha
mov
mov
mov
pushf
push
pushf
push
ret
jmp
push
pop
pushf
lea
jmp
pushf
mov
pusha
push
call
push
pop
push
mov
lea
jmp
call
test
jmp
call
call
bt
stc
add
push
push
pusha
call
push
jmp
mov
mov
pushf
pushf
mov
jmp
pushf
mov
mov
pushf
push
mov
call
shl
xchg
mov
rol
clc
setno
add
jmp
cmp
clc
clc
and
clc
jmp
pushf
pop
pusha
push
mov
push
pop
pushf
push
pushf
lea
jmp
pushf
mov
jmp
cmp
xor
pusha
pushf
dec
clc
cmp
pushf
call
push
mov
pusha
mov
lea
jmp
jmp
jmp
pusha
pusha
push
pop
push
pushf
lea
jmp
sub
bt
mul
pushf
jmp
mov
mov
jmp
mov
mov
pushf
pushf
push
ret
cmp
add
pusha
jmp
mov
pusha
push
pushf
lea
jmp
pushf
lea
jne
movsx
xor
setae
call
mov
call
pushf
call
sub
test
xor
cmp
cmp
call
call
call
not
sar
cmp
add
call
push
push
pushf
push
pop
mov
lea
jmp
aaa
mov
add
pusha
dec
not
mov
and
ror
stc
mov
cmp
test
add
mov
cmp
cmp
stc
shrd
call
call
movsx
or
shl
bt
mov
jmp
jmp
mov
mov
mov
call
pushf
mov
mov
lea
jmp
call
mov
pushf
pushf
mov
mov
push
push
pushf
call
call
mov
call
mov
mov
pushf
mov
push
mov
jmp
pusha
pushf
pusha
mov
push
push
pushf
mov
lea
jmp
call
sub
push
jmp
push
mov
pushf
mov
pushf
mov
mov
mov
pushf
lea
jmp
call
jmp
push
push
call
push
mov
jmp
inc
mov
add
neg
mov
cmc
sub
jmp
call
jmp
mov
pusha
pushf
lea
jmp
cwde
cmc
sub
pushf
lea
jbe
pushf
pusha
mov
pushf
mov
lea
jmp
pusha
dec
mov
jmp
mov
call
mov
pushf
pushf
lea
jmp
mov
mov
mov
pushf
mov
mov
lea
jmp
pushf
pushf
push
mov
push
pusha
pushf
pushf
push
ret
shr
pushf
mov
pushf
pushf
pop
pusha
lea
jg
pop
push
push
pushf
lea
jmp
shrd
ror
aam
sar
mov
sar
pushf
mov
clc
pushf
add
call
pushf
mov
pushf
pusha
push
push
lea
jmp
dec
not
sub
pusha
add
neg
clc
bswap
add
movsx
inc
bt
xor
stc
movsx
cmp
mov
pushf
test
push
add
pushf
mov
push
pushf
push
pushf
lea
jmp
mov
mov
jmp
xchg
rdtsc
call
push
mov
pushf
pusha
mov
mov
pushf
pushf
mov
lea
jmp
sub
mov
call
pushf
pushf
push
mov
push
mov
call
call
btc
neg
mov
inc
mov
test
sub
cmc
pusha
imul
push
pusha
mov
mov
mov
call
mov
lea
jne
mov
bt
rcl
inc
mov
call
mov
pushf
push
mov
pusha
push
mov
mov
mov
pushf
call
call
shl
mov
bt
cmc
jmp
push
push
push
popf
pushf
pusha
lea
jmp
movzx
not
bsf
mov
das
shrd
stc
mov
push
call
mov
push
push
ret
pushf
mov
push
mov
pusha
pushf
mov
call
jmp
inc
bsr
mov
inc
cmp
and
ror
add
btr
not
rcl
ror
seto
call
call
shl
jmp
mov
pushf
push
push
lea
jmp
bt
xor
call
call
call
pusha
div
push
call
jmp
bt
bt
imul
pushf
jmp
not
mov
pusha
push
idiv
pushf
push
mov
pushf
call
pusha
pushf
mov
mov
mov
pushf
mov
mov
mov
pusha
pushf
jmp
mov
lea
jne
push
push
mov
mov
call
pushf
pusha
mov
call
jmp
jmp
pushf
jmp
mov
call
adc
mov
cmp
seta
cmp
pusha
mov
cmp
clc
bt
add
pusha
call
call
add
mov
bt
cmp
sub
cmc
ror
pusha
not
clc
xor
pushf
mov
sub
test
sub
pusha
jmp
jmp
push
neg
mov
shl
cwde
mov
stc
mov
sub
bt
mov
pusha
mul
pushf
call
push
pop
push
pushf
push
lea
jmp
pushf
push
mov
push
lea
jge
pusha
mov
pusha
mov
pushf
lea
jmp
push
pusha
not
call
xchg
ror
btr
mov
stc
rol
bt
add
not
mov
mov
pusha
mov
push
mov
push
pushf
mov
lea
jmp
push
mov
pushf
pushf
mov
mov
push
mov
mov
mov
push
pushf
lea
jmp
mov
jmp
push
lea
jne
pushf
mov
push
mov
lea
jmp
mov
mov
jmp
mov
push
lea
jmp
pusha
push
mov
call
jmp
mov
jmp
jmp
pushf
pusha
mov
mov
pusha
mov
mov
pushf
push
lea
jge
push
pusha
mov
mov
pusha
push
call
mov
mov
pushf
mov
mov
lea
jmp
mov
call
pushf
pop
mov
mov
mov
push
pop
push
pushf
mov
lea
jmp
aaa
movsx
cwde
or
mov
cmc
push
pushf
cmp
add
pushf
mov
pushf
mov
push
push
lea
jmp
mov
pushf
pop
mov
push
pop
push
pushf
lea
jmp
push
pushf
mov
mov
mov
lea
jmp
clc
cmp
jmp
push
lea
pop
pop
pushf
lea
mov
movzx
xchg
mov
xchg
mov
cwde
push
mov
movsx
mov
pushf
push
ret
jmp
mov
pushf
mov
mov
pushf
pushf
lea
jmp
ror
pushf
pusha
not
bswap
inc
sbb
add
jmp
call
pusha
pushf
push
mov
mov
mov
mov
pushf
push
ret
mov
push
mov
pushf
mov
call
mov
mov
mov
mov
mov
mov
pusha
mov
jmp
shr
bts
btc
add
mov
xor
sub
ror
pusha
mov
push
add
pushf
mov
pushf
mov
lea
jmp
shl
mov
call
mov
mov
mov
mov
push
mov
lea
jmp
