xor
aas
repnz
adc
inc
xor
add
jae
jno
arpl
mov
jg
push
popa
sub
inc
adc
outs
leave
pop
jns
ja
sbb
add
aaa
jg
add
mov
jae
sti
enter
inc
pop
pop
jno
repnz
jae
jae
mov
jno
jg
cli
jns
jnp
jo
sub
mov
jg
sar
daa
pop
hlt
sub
loopne
sub
push
pop
jg
add
aaa
or
and
pop
ins
not
mov
cld
xchg
or
mov
ja
mov
out
leave
inc
aaa
mov
add
jg
add
aaa
jg
inc
iret
hlt
cmp
mov
iret
cmp
je
bnd
hlt
add
mov
jns
aaa
bnd
mov
test
or
(bad)
adc
aaa
hlt
jns
pop
iret
cmp
xor
jg
inc
xor
inc
mov
jg
push
data16
ins
add
or
cmp
jne
mov
jne
lock
iret
cmp
arpl
jge
imul
or
jle
sub
das
enter
repz
outs
daa
sub
in
hlt
add
add
sub
or
cmp
repnz
or
push
sub
pop
outs
adc
fs
in
sti
enter
cmp
leave
inc
aaa
je
add
add
mov
jno
test
jl
xchg
jns
aas
xchg
inc
jns
jg
sar
mov
add
mov
xchg
das
xchg
daa
iret
cmp
aaa
cld
mov
mov
jg
icebp
dec
jg
xchg
jnp
add
jg
pop
push
and
inc
aaa
jg
add
xchg
xchg
movs
sbb
cmp
outs
(bad)
js
aaa
jg
rcl
jns
aaa
jg
mov
adc
cmp
aaa
das
sbb
add
sub
mov
sub
or
test
pop
jns
out
push
pop
xchg
jnp
add
xchg
cmp
aaa
xchg
ins
jle
jg
xor
iret
cmp
jne
xchg
pop
iret
cmp
jne
xchg
inc
inc
jg
xchg
addr16
int3
mov
add
xchg
jg
add
mov
jle
in
dec
or
sub
mov
mov
mov
adc
pop
jg
add
mov
pop
xchg
ja
xchg
in
inc
jg
mov
cld
cmp
jnp
vmovups
std
rcr
cli
mov
cli
lea
aas
xor
mov
sub
fistp
xchg
loope
jg
xor
adc
cmp
test
js
aaa
cld
mov
add
idiv
xchg
sbb
mov
sti
enter
icebp
outs
inc
mov
int3
xchg
inc
mov
and
hlt
sub
loopne
xchg
jne
pusha
rcl
or
lock
adc
jg
cmp
jo
outs
aaa
adc
or
enter
lods
push
jns
mov
adc
or
inc
enter
inc
imul
inc
outs
xchg
xchg
fdivr
lock
enter
inc
push
jns
mov
sbb
add
pop
aaa
jg
out
cmp
xor
mov
and
int3
hlt
sub
loopne
sub
mov
mov
sbb
cs
add
cmp
add
ror
xor
xchg
dec
cli
inc
xchg
or
jg
jo
or
pop
add
inc
adc
ror
xor
xchg
jb
idiv
xchg
add
mov
sub
sar
xchg
adc
inc
jae
xchg
cmpxchg
mov
dec
mov
jno
cmp
jns
push
xchg
pop
cld
sbb
aaa
mul
cli
xor
int
aaa
dec
xchg
jne
cmp
ss
push
aas
jo
add
inc
test
stc
mov
aas
stc
cmp
jg
cld
push
cmp
icebp
mov
mov
mov
mul
cmc
mov
cld
mov
ja
inc
add
or
cli
jb
repnz
aas
idiv
test
jle
jo
inc
cmp
inc
cld
sar
jg
pop
imul
mov
fisttp
add
mov
outs
mov
cli
pop
jg
xor
lock
ss
xchg
enter
jne
repnz
aas
idiv
test
jle
jo
inc
mov
add
add
fsubr
std
push
(bad)
repnz
aas
cmc
ins
aas
mov
add
mov
xor
push
mov
xchg
mov
sti
jl
aaa
add
enter
ins
mov
push
mov
sub
pop
cmp
repz
ins
lock
rcr
xor
xchg
pop
in
jl
jns
mov
xor
adc
fnstsw
data16
imul
(bad)
push
imul
jno
cmps
jns
hlt
cmp
icebp
jnp
add
hlt
sub
loopne
das
sub
hlt
and
lock
mov
rcr
mov
lock
retf
dec
(bad)
out
adc
bnd
lds
mov
mov
cld
sub
mov
es
mov
sbb
jmp
or
inc
aaa
hlt
cmp
icebp
jnp
add
cmc
push
mov
pop
ins
mov
push
mov
sub
jo
hlt
and
lock
test
cmp
jg
add
cmp
mov
jnp
mov
push
mov
and
aad
jp
lds
push
in
cmp
mov
dec
lds
and
hlt
sub
loopne
sub
mov
(bad)
int3
xor
das
mov
jle
mov
cmp
jns
inc
jae
pop
(bad)
cmp
test
enter
mov
pop
daa
in
jg
in
inc
add
jo
das
in
and
pop
pop
imul
and
mov
pop
ds
test
inc
ja
ins
inc
jg
mov
adc
xchg
aaa
jg
push
enter
aaa
adc
jns
mov
mov
lock
push
sub
loopne
das
sub
hlt
or
mov
aad
aaa
jg
loop
cmp
cdq
xchg
cmp
fcomp
mov
hlt
aas
add
or
das
sub
(bad)
(bad)
jl
aaa
mov
ret
xchg
mov
xchg
push
pop
ins
mov
push
mov
sub
push
mov
jnp
dec
mov
mov
and
cld
pop
add
adc
jns
mov
outs
cwde
inc
aaa
xchg
mov
(bad)
(bad)
ins
cmp
mov
lock
jo
cmp
mov
lds
das
ins
xchg
adc
(bad)
or
div
or
jbe
jo
test
xchg
sahf
cmp
mov
jg
add
fdiv
inc
add
in
jo
lds
or
aas
xchg
or
cmp
and
rol
add
imul
mov
fistp
das
push
mov
jb
sbb
mov
test
add
inc
aaa
add
adc
int
aaa
jg
jge
cmp
jbe
icebp
jle
add
dec
retf
cmp
mov
xor
mov
in
jne
jns
das
fsubp
cmps
jne
sub
mov
mov
cmp
aaa
jg
adc
xchg
or
fbstp
js
les
cwde
cli
leave
sub
pop
test
cmp
cmp
jae
and
xchg
sub
fnsave
cmps
lock
mov
xchg
aaa
jg
inc
ret
das
repnz
aas
hlt
cmp
addr16
inc
cli
pusha
arpl
inc
retf
cld
add
aaa
jo
cs
xchg
jns
mov
js
aaa
cld
sbb
aaa
inc
cmp
jns
sbb
mov
cli
xor
int
aaa
hlt
cmp
push
jp
mov
jg
add
jns
dec
retf
cmp
out
push
mov
in
sbb
jns
outs
mul
arpl
cmp
std
mov
retf
cmp
mov
outs
lock
jnp
add
dec
ja
jp
sub
cmp
sub
jb
clc
out
movs
push
jns
ds
fiadd
pop
mov
inc
(bad)
das
repnz
aaa
jg
mov
jo
inc
dec
clc
out
inc
or
add
leave
sub
stos
fdivr
add
mov
idiv
ds
add
cli
aaa
jg
inc
cmp
fxch
add
out
cli
lods
cli
leave
xor
mov
in
jne
jns
cmp
in
jne
sub
enter
jb
inc
inc
iret
jo
sub
add
aaa
jg
ffree
pushf
lock
xchg
mov
mov
push
mov
sub
push
mov
pop
nop
adc
add
test
lock
sbb
aaa
hlt
cmp
mov
dec
add
cli
repz
inc
outs
mov
add
iret
push
or
xchg
push
hlt
cmp
mov
dec
or
add
jno
jae
js
pop
out
fild
xchg
sub
jg
sar
mov
add
ret
xor
fild
jg
ffree
add
push
cmp
push
or
fistp
add
aaa
xchg
cmp
iret
mov
ret
test
movs
or
pop
fsubr
inc
aas
cmc
jge
or
add
dec
add
mov
test
mov
ja
cmp
jg
or
xchg
mov
test
inc
jo
jo
pop
dec
pushf
ja
xchg
or
jns
inc
test
aaa
adc
jns
aaa
pop
jns
aaa
aas
adc
ins
adc
mov
adc
xchg
jne
jg
mov
lock
js
inc
xchg
(bad)
pop
jg
dec
ret
cs
inc
ja
jo
xchg
shr
adc
pop
jge
cmc
xlat
cmp
xchg
mov
fsub
add
fild
add
(bad)
mov
rol
pop
jg
push
popa
sub
pop
push
sahf
xor
mul
ret
mov
xchg
enter
xlat
cmp
jns
mov
xor
repz
enter
div
sar
jg
mov
jle
mov
adc
jns
(bad)
push
add
enter
out
push
mov
leave
enter
mov
xchg
enter
retf
add
stos
fdivr
add
fadd
cld
in
add
cmp
jb
jo
inc
aam
out
push
jae
add
leave
sub
push
sahf
cmp
leave
sub
jo
jns
mov
jo
cmp
jg
mov
jle
mov
repnz
(bad)
xchg
jecxz
inc
aaa
das
repnz
jb
jo
cmp
jle
aaa
jg
push
xchg
ds
cmp
dec
cmp
aas
idiv
cli
leave
xor
sti
add
aaa
(bad)
xchg
pushf
inc
jg
mov
das
fcomp
mov
idiv
ds
jns
push
cld
les
cmp
in
pop
aaa
jg
mov
aaa
jo
cmps
xor
outs
ss
daa
in
jg
or
xchg
addr16
ins
repnz
cmp
mov
cli
leave
add
pop
jg
repnz
cld
test
hlt
jo
add
xchg
xor
cli
retf
cli
leave
cmp
mov
sub
fistp
add
aaa
cld
mov
mov
add
xchg
jg
cmp
cmp
ss
mov
jle
mov
adc
cmp
aaa
xchg
jmp
sar
xchg
aaa
jg
and
adc
xlat
cmp
xchg
enter
rol
cli
enter
cmp
add
in
jg
push
xchg
ds
jns
xchg
mov
jne
enter
inc
pop
adc
(bad)
cdq
inc
aaa
repnz
clc
enter
fisttp
cli
enter
or
jae
mov
xchg
enter
aaa
adc
cmp
aaa
xchg
jne
enter
cmp
cli
aaa
jg
and
adc
add
ret
xchg
jae
cli
enter
cmp
add
in
jg
push
xchg
ds
std
mov
cmp
cmp
pop
adc
(bad)
cdq
inc
aaa
repnz
clc
enter
(bad)
mov
enter
or
jae
mov
xchg
enter
aaa
adc
cmp
aaa
xchg
icebp
lock
cmp
cli
aaa
jg
(bad)
cli
int
leave
cmp
jg
xchg
push
jg
repnz
cld
lods
enter
hlt
adc
cmp
aaa
xchg
sub
sar
xchg
aaa
jg
(bad)
cli
int
leave
cmp
jg
add
pop
cdq
inc
aaa
pop
sub
ret
xchg
jae
cli
enter
jae
js
mov
test
leave
sub
and
mov
jns
inc
bound
add
setns
repnz
clc
enter
fisttp
mov
add
mov
xchg
enter
aaa
cld
les
inc
imul
clc
enter
fistp
xchg
adc
jp
mov
jg
movs
arpl
cmp
aaa
(bad)
mov
ret
mov
xchg
enter
xor
mov
mov
sti
enter
mov
xchg
enter
jmp
xchg
addr16
inc
cli
pusha
and
inc
retf
jbe
or
repnz
mov
mov
sub
jo
test
cld
add
aaa
jo
mov
xchg
stos
xchg
enter
cmps
lock
mov
test
xchg
jle
mov
xchg
push
or
jg
ret
xchg
enter
mov
xchg
enter
aaa
repnz
xchg
enter
mov
sub
mov
xchg
enter
enter
fsubr
cld
ror
add
popf
enter
mov
jg
add
ds
jns
mov
sub
mov
xchg
enter
enter
aaa
jg
inc
retf
(bad)
mov
or
jo
add
jg
mov
das
repnz
xchg
addr16
inc
cli
pusha
inc
lock
retf
jbe
jno
xchg
mov
fild
cld
fxch
add
stc
mov
mov
jbe
out
jns
mov
mov
aaa
jg
adc
xchg
addr16
cld
in
enter
mov
idiv
ds
jns
mov
cmp
aaa
jg
mov
aaa
or
enter
fistp
add
leave
sub
mov
mov
xchg
enter
xor
jns
aaa
xchg
sub
jg
xlat
cmp
repnz
cld
mov
add
mov
das
adc
cmp
xchg
enter
pop
jg
xchg
imul
mov
xchg
enter
mov
xchg
enter
enter
mov
xchg
enter
cmps
add
rol
jge
aaa
jg
mov
leave
cmp
daa
neg
add
fild
inc
cli
pusha
push
lock
retf
mul
xchg
jns
mov
jnp
aaa
cld
fsubr
mov
sub
mov
cmp
leave
sub
jo
jns
mov
inc
jle
aaa
jbe
or
repnz
lods
enter
mov
sub
jo
test
cld
add
aaa
jo
cli
ss
xchg
jg
in
jg
outs
aaa
xchg
sub
aaa
jg
test
cmp
mov
cli
xor
add
leave
xor
mov
xchg
addr16
jne
add
add
or
sti
enter
mov
jg
not
add
stc
mov
mov
jbe
pop
jle
add
leave
cmp
test
mov
das
repnz
aaa
jg
mov
jo
cmp
gs
jg
mov
aaa
jo
or
jg
mov
das
adc
leave
xor
mov
hlt
inc
cli
pusha
pop
lock
retf
mul
xchg
jns
mov
jns
aaa
sbb
mov
aas
jo
(bad)
aaa
jg
xchg
jg
xor
cli
sbb
retf
cli
adc
sti
enter
enter
aas
idiv
cli
retf
ffree
pushf
lock
cli
mov
add
jg
ret
xchg
enter
aaa
adc
xchg
enter
enter
pop
and
clc
enter
(bad)
adc
mov
mov
xchg
mov
xchg
inc
js
inc
xchg
or
xchg
enter
retf
adc
cli
addr16
cld
std
enter
mov
test
leave
sub
int3
push
jns
mov
jne
xor
cld
clc
enter
pop
daa
cdq
inc
aaa
repnz
clc
enter
fistp
add
mov
mov
xchg
aaa
or
daa
bound
rcr
mov
add
popa
ja
add
sar
leave
add
add
enter
fwait
add
popa
ja
adc
dec
cli
popa
ja
mul
xor
enter
leave
xor
rol
xchg
cli
leave
xor
add
leave
cmp
mov
xchg
leave
sub
pop
sub
mov
test
jno
hlt
cld
aad
add
daa
aaa
jg
out
cli
leave
cli
leave
xor
mov
lods
cli
leave
cmp
hlt
cld
ror
add
(bad)
add
fxch
add
push
and
mov
das
repnz
push
mov
int3
hlt
sub
loopne
adc
cmp
add
aaa
jg
popa
mov
jg
jmp
mov
fwait
dec
pop
and
bnd
test
lock
ins
outs
jge
add
aaa
cld
mov
add
mov
lahf
lock
xchg
add
enter
mov
cmp
sbb
xchg
fcomp
inc
xlat
jle
add
hlt
hlt
sbb
lock
test
xor
scas
lock
pop
imul
cmps
aaa
jg
add
aaa
sub
out
jge
ins
mov
push
or
jg
fist
aas
jns
aaa
adc
jns
mov
sbb
push
cld
xchg
sbb
aas
(bad)
out
inc
jmp
sar
jg
repnz
idiv
mov
retf
cmp
xor
cmp
es
xchg
addr16
aaa
jg
and
loopne
add
cmps
aas
jns
lock
cwde
jbe
jge
aaa
jg
int
mov
(bad)
lock
pushf
jbe
jge
aaa
jg
cmc
jno
jns
ja
cmp
scas
ds
div
jnp
jg
cmp
jg
add
aaa
jg
and
push
ds
ficomp
jnp
aaa
cmp
jns
idiv
inc
and
mov
jge
mov
inc
out
aaa
xchg
inc
pop
aaa
jg
or
loopne
add
cmp
push
pop
aaa
jg
add
cmp
fnclex
cmp
jbe
xchg
add
jp
call
lock
fidiv
add
test
jns
retf
add
jne
pop
das
loopne
add
not
clc
in
push
pop
jns
mov
popa
call
cmp
aaa
xchg
dec
cli
enter
das
loopne
add
not
sar
idiv
das
loopne
add
enter
das
loopne
add
not
clc
(bad)
jmp
jns
mov
popa
call
cmp
aaa
xchg
cdq
sti
enter
das
loopne
add
not
lock
mov
les
jg
ret
in
aaa
jge
add
enter
das
loopne
add
not
clc
hlt
arpl
add
jbe
jnp
xor
loopne
aaa
jge
add
enter
inc
retf
cmp
jbe
clc
in
jmp
call
jns
xchg
xchg
in
aaa
jle
cmp
dec
mov
push
ds
ficomp
xchg
cwde
jbe
cli
lds
ds
out
jns
xchg
cmp
inc
aaa
jle
or
idiv
add
aaa
jle
cmp
xchg
add
jne
cli
add
loopne
add
aaa
jg
int
mov
les
jp
mov
mov
jns
cmp
inc
aaa
pop
clc
hlt
ret
add
aaa
(bad)
movs
jne
jbe
xor
fld
jbe
jns
cld
or
mov
rol
stc
add
or
inc
cli
adc
mov
or
loopne
add
xor
int
aaa
xchg
dec
movs
fnclex
cmp
jbe
xchg
and
jp
call
jns
mov
popa
call
mov
add
mov
cmp
jns
xor
inc
aaa
aas
jbe
idiv
add
aaa
fisttp
movs
jne
lock
mov
les
leave
jl
xchg
cmp
jns
mov
jp
movs
jne
cli
in
idiv
cmp
cmp
or
std
xor
jns
dec
mov
jo
cmp
jns
dec
lock
leave
cmp
or
jns
aaa
or
jae
cmp
ja
cli
cmp
cmp
dec
mov
jnp
add
xor
aas
xchg
ja
inc
aaa
jge
cmp
pop
stc
or
loopne
add
push
mov
add
aaa
jo
add
loop
add
jb
stc
js
jp
or
js
add
out
cmp
cmps
aas
jns
fsub
cmc
jno
ins
or
idiv
(bad)
cmp
ja
fmul
xor
inc
aaa
or
ins
add
cmps
aas
jns
fsub
cmc
jno
ins
or
idiv
lahf
fdivr
add
ja
fdivr
xor
inc
aaa
or
int
aaa
test
ja
dec
lds
jne
pushf
cmp
rcr
pop
ins
mov
push
mov
shl
jne
repnz
jns
enter
jne
adc
and
mov
cmp
es
jne
lock
rcr
ins
pop
lds
add
aaa
jg
adc
or
cmp
aaa
jg
icebp
stos
ds
jl
cmp
aaa
jg
xor
imul
add
jg
pop
xchg
cmp
or
xchg
adc
sub
lock
jge
hlt
outs
sub
cmp
add
enter
jne
mov
add
out
idiv
mov
lock
(bad)
mov
jns
mov
add
retf
jg
add
cmp
mov
imul
jecxz
mov
add
ss
add
jne
lock
xlat
cmp
jns
jb
jnp
aaa
jg
fld
cmps
lock
lock
add
jg
xchg
jns
dec
ret
hlt
jo
(bad)
jl
aaa
jg
mov
pop
jg
add
repnz
sub
ds
out
dec
mov
cdq
addr16
sub
adc
jg
inc
fwait
xchg
jmp
jb
sub
inc
fcomi
inc
xchg
adc
lea
add
cmp
movs
pop
jg
add
enter
cld
push
jns
mov
push
jno
jg
jo
xchg
cmp
aaa
jg
add
cmp
enter
jb
sub
and
cmp
fdiv
lods
adc
repnz
cmp
mov
mov
push
mov
mov
sub
mov
push
mov
inc
cmp
cmp
mov
xchg
pusha
ret
jg
xlat
mov
xchg
adc
pop
jg
add
cmp
push
enter
aaa
repnz
addr16
xchg
pop
loopne
add
cmp
mov
test
hlt
sub
loopne
shl
jne
std
push
xchg
ret
or
jo
adc
out
aaa
and
(bad)
neg
pusha
hlt
or
mov
or
inc
aaa
dec
xchg
cmp
add
jae
js
enter
inc
push
jbe
jae
jnp
enter
inc
arpl
jae
jp
enter
inc
outs
jbe
jae
jge
enter
cmp
jae
aaa
jg
inc
daa
repnz
cmp
cmp
cmp
mov
jns
sub
xchg
aaa
jg
mov
xor
inc
(bad)
cmp
icebp
add
mov
jnp
sub
mov
cld
xchg
push
cmp
ins
adc
mov
cli
in
xor
add
inc
xchg
add
cmp
cmp
pop
mov
adc
mov
jns
cmp
sub
pop
lods
ins
mov
push
mov
ffreep
and
std
mov
xchg
and
js
mov
jge
out
cmp
mov
jge
jb
repnz
daa
repnz
xchg
jnp
push
ret
imul
ss
add
jb
adc
and
inc
add
ret
cmp
jb
js
add
or
cmp
jnp
push
mov
jns
jo
test
xor
inc
mov
inc
xor
dec
mov
cld
xchg
add
leave
jge
or
or
add
iret
cld
xchg
add
imul
mov
jl
fnstsw
lds
idiv
ss
add
inc
sbb
std
jg
inc
add
cld
xchg
pop
mov
jg
inc
cs
mov
jp
or
jo
test
xor
in
aaa
jg
jno
inc
nop
add
mov
xchg
and
js
mov
jge
out
mov
inc
iret
hlt
cmp
mov
xchg
in
xor
sub
mov
jg
test
inc
js
test
inc
ss
mov
jnp
or
jo
test
xor
ss
jo
add
inc
inc
jno
inc
xchg
or
popa
in
cmp
jns
mov
ins
jl
int
xchg
add
jg
inc
mov
jns
aaa
jg
xchg
and
int3
hlt
sub
loopne
xchg
jne
popa
sub
add
sub
out
xor
inc
cmp
or
mov
xchg
push
aaa
jg
hlt
mov
xchg
push
aaa
jg
pop
jno
cmp
sbb
mov
add
cmp
cmp
imul
and
inc
aaa
dec
mov
push
fucomip
(bad)
cli
enter
inc
retf
cmp
or
pop
cmp
jg
add
retf
jg
or
cmc
ins
add
sbb
cmps
aas
jns
jb
or
fcomp
add
idiv
mov
jg
inc
iret
test
int
mov
icebp
mov
sub
add
jp
mov
mov
add
jle
xchg
jnp
inc
iret
mov
cmp
std
mov
retf
cmp
iret
repnz
xchg
jnp
inc
iret
mov
inc
add
jg
push
popa
jo
push
daa
mov
ins
pop
mov
xchg
mov
jne
imul
mov
fist
add
fistp
cli
enter
call
and
aaa
dec
add
cli
call
mov
add
cmp
call
outs
jbe
mov
xchg
cli
enter
push
ret
cmp
mov
push
cmp
cld
neg
add
jne
jnp
xor
jmp
lahf
mov
jbe
cmp
mov
cmp
jns
mov
xor
mov
jo
nop
les
mov
jb
mov
aad
lock
xchg
mov
ins
push
scas
ds
jo
jns
mov
xor
and
inc
aaa
(bad)
cld
neg
add
fadd
stc
cmp
mov
jbe
jp
xchg
icebp
cli
mov
enter
sub
mov
adc
out
cmp
xor
or
cmp
addr16
add
enter
inc
retf
cmp
enter
mov
js
aaa
xchg
sbb
enter
out
mov
or
nop
jecxz
xchg
mov
mov
jl
aaa
aas
jns
mov
xchg
cli
enter
push
pop
jns
aaa
jg
in
cmp
jns
mov
mov
(bad)
std
fadd
jns
aaa
jg
cwde
ret
nop
xchg
inc
test
xor
mov
add
cmp
enter
mov
add
fadd
cmps
cli
enter
enter
cmp
cmp
ds
stc
fcmovne
cmp
jmp
xor
mul
out
jl
stc
mov
jnp
mov
xchg
inc
mov
jns
aaa
jg
fdiv
jg
or
jg
mov
xchg
aaa
test
jg
add
(bad)
jg
jae
or
addr16
es
sbb
xchg
aaa
jg
add
enter
enter
mov
xchg
cli
enter
enter
xor
int
aaa
or
call
sub
fidivr
jp
aaa
jo
nop
les
jnp
and
xchg
ja
lock
ret
nop
xchg
mov
(bad)
jmp
xchg
cli
enter
mov
mov
test
and
in
icebp
fadd
lock
xchg
jnp
(bad)
jge
dec
retf
jle
test
nop
xchg
mov
(bad)
jmp
or
jne
stc
mov
aaa
or
ins
imul
cs
jmp
jl
add
jg
add
enter
dec
jl
mov
hlt
cld
movs
jmp
out
cli
enter
xor
lock
(bad)
enter
mov
jge
and
aad
enter
jecxz
xchg
mov
adc
mov
sub
and
push
aaa
jg
and
xchg
push
cli
(bad)
or
cli
mov
add
movs
fcmove
cmp
aam
xchg
aaa
or
and
and
push
mov
cmp
aaa
jle
cli
mov
xchg
loop
xor
int
aaa
jo
nop
les
jnp
mov
push
hlt
shr
add
ja
jbe
mov
mov
ins
and
mov
pop
jns
aaa
jg
in
test
jns
mov
xor
cli
sbb
jg
js
jg
or
xor
inc
nop
add
mov
jno
cmp
inc
add
jg
push
ss
mov
hlt
ins
add
jg
add
jae
jge
mov
cmps
cli
enter
jmp
rcr
mov
test
pop
test
aaa
or
(bad)
cld
xchg
push
mov
jns
and
mov
aaa
or
(bad)
cld
xchg
add
xor
mov
jg
mov
fsub
pop
mov
add
enter
xor
add
mov
jg
xchg
xor
pop
jnp
adc
xchg
fdivr
lock
add
xchg
xchg
mov
inc
(bad)
xchg
call
cmps
jmp
leave
in
cmps
jmp
jge
mov
enter
mov
inc
add
jg
add
or
add
mov
inc
push
aaa
jg
add
or
add
mov
inc
add
jg
add
push
adc
mov
inc
arpl
mov
xchg
cli
enter
jmp
xchg
enter
enter
into
add
aam
xchg
aaa
or
xchg
jg
nop
ret
nop
xchg
neg
nop
pop
neg
repnz
idiv
enter
enter
ret
nop
xchg
aaa
jnp
add
inc
retf
cmp
enter
fadd
cld
neg
add
xor
jbe
sbb
int3
hlt
sub
loopne
xchg
inc
push
popa
sub
pop
aas
mov
test
or
jg
ret
jb
js
dec
fwait
hlt
xor
cmp
aaa
mov
test
pusha
das
aaa
jg
js
repnz
or
jns
(bad)
fcomi
js
repnz
xchg
mov
jns
(bad)
(bad)
ds
or
mov
sbb
jb
jns
and
jp
sub
popf
jo
(bad)
cmp
xor
test
push
sbb
iret
idiv
jb
jns
xchg
jg
add
bound
jbe
mov
cmp
add
mov
adc
(bad)
ss
iret
inc
ss
mov
std
ja
jge
jb
js
cmp
add
add
jbe
std
ja
jge
jb
js
cmp
jo
cld
cdq
add
cmp
xor
iret
inc
ss
mov
test
jg
jo
(bad)
cmp
xor
cmp
mov
sub
repnz
jg
jo
mov
add
or
jb
jge
jb
js
dec
mov
mov
xchg
enter
aaa
xchg
outs
(bad)
xor
iret
push
ret
adc
or
jb
js
cmp
inc
xor
lock
ss
iret
push
or
jns
aaa
or
jb
js
cmp
mov
(bad)
neg
mov
and
cs
das
sbb
aaa
mov
(bad)
pop
cmp
sub
add
aaa
test
or
jo
idiv
cmp
jle
jae
js
fdivr
xchg
jle
call
mov
and
pop
(bad)
mov
jge
aaa
jg
jge
jg
push
pusha
rcr
jnp
add
aaa
mov
cli
enter
inc
jae
cli
inc
ja
xor
xchg
addr16
adc
jg
xor
xchg
addr16
jbe
aaa
jg
shl
(bad)
mov
push
or
ror
cmp
enter
aaa
xchg
mov
jg
pop
hlt
sub
loopne
xchg
imul
es
aaa
adc
jns
pop
jl
add
aaa
jg
cli
inc
ja
jne
jg
mov
cld
xchg
inc
data16
js
jg
add
dec
(bad)
lock
rcr
outs
aaa
sub
mov
cld
mov
in
and
test
rcr
outs
aaa
cld
add
aaa
or
jb
lock
(bad)
xchg
jg
jb
lock
mov
ins
push
aaa
jg
in
add
jns
mov
(bad)
xchg
retf
jns
imul
xchg
jae
push
pusha
sar
lods
cmp
std
push
xchg
ret
adc
xor
jns
aaa
mov
mov
ret
mov
xchg
dec
mov
or
jg
loop
cmp
outs
aaa
adc
sub
mov
aas
stc
cmp
jg
cld
mov
sub
or
push
add
pop
jge
cmc
xlat
cmp
sub
addr16
mov
mov
inc
ret
idiv
add
hlt
sub
loopne
das
das
push
mov
ins
adc
test
aaa
pop
stc
add
pop
jg
add
test
mov
add
mov
mov
mov
adc
jns
fist
add
jb
sub
inc
outs
xchg
sub
push
fistp
add
fdivr
std
push
xchg
ret
mov
(bad)
neg
inc
ja
inc
retf
repz
sbb
jle
add
fdivr
mov
inc
js
jo
add
dec
mov
inc
retf
idiv
stc
or
ds
inc
aaa
xchg
int3
push
aaa
jg
xlat
cmp
jns
mov
imul
jnp
push
pop
dec
cdq
inc
aaa
xchg
in
push
aaa
jg
sar
inc
pop
cmp
xchg
xor
xchg
jb
or
jo
mov
inc
js
add
(bad)
ss
adc
push
sub
add
imul
push
sub
mov
bnd
mov
shr
test
or
cmp
aaa
es
cli
fsubr
xor
add
sub
jo
mov
pop
pop
in
jg
adc
mov
push
mov
pop
ins
mov
push
mov
sub
push
mov
add
and
idiv
add
cld
sbb
aaa
cld
sbb
aaa
cld
sbb
aaa
repnz
mov
jg
push
aaa
jg
not
idiv
jo
sbb
mov
jbe
ja
icebp
inc
enter
test
jns
rcr
cmp
jl
mov
addr16
xchg
stc
js
jge
add
ds
jg
push
enter
mov
aas
jnp
jb
xchg
es
mov
aaa
jg
mov
xor
mul
inc
(bad)
add
xor
xchg
jnp
pop
cmp
loopne
mov
mov
jbe
aaa
hlt
sub
cmp
imul
mov
or
mov
xor
mov
jo
dec
aad
cwde
mov
js
shl
cmp
cmp
cmp
mov
sub
into
push
aad
(bad)
(bad)
cmp
add
cmp
cmp
sub
loope
cmp
(bad)
push
out
jmp
add
mov
test
add
mov
jmp
sub
ja
xchg
cmps
out
cmp
ja
jmp
xchg
cmps
out
jmp
xchg
cmps
out
inc
frstor
movs
jmp
add
mov
shr
retf
mov
jmp
sbb
ja
xchg
cmps
out
cli
lds
out
jmp
xchg
cmps
out
or
cmps
out
jmp
xchg
cmps
out
push
in
mov
pop
jmp
(bad)
fistp
add
cmps
out
jmp
add
ja
jmp
xchg
cmps
hlt
xor
cmps
out
jmp
xchg
cmps
dec
push
cmps
out
jmp
xchg
cmps
inc
mov
cmps
out
jmp
xchg
cmps
cld
mov
xchg
jg
xchg
cmps
or
cmps
out
jmp
mov
add
mov
add
xchg
jns
and
dec
(bad)
push
out
jmp
add
pop
jnp
xchg
cmps
out
es
cmps
out
jmp
xchg
cmps
out
or
xchg
mov
test
out
jmp
xchg
cmps
out
dec
xlat
cmps
out
jmp
xchg
cmps
out
lock
out
jmp
xchg
cmps
out
call
xchg
outs
out
jmp
or
push
dec
jmp
std
cmps
out
jmp
xchg
cmps
out
rol
xchg
cmps
out
or
xchg
mov
lock
mov
dec
xlat
cmps
out
jmp
xchg
cmps
out
lock
out
jmp
xchg
cmps
out
call
xchg
outs
out
jmp
out
and
dec
xchg
push
dec
jmp
std
cmps
out
jmp
xchg
cmps
out
sbb
push
xchg
inc
adc
cmp
fisttp
push
pusha
hlt
and
mov
cmp
jb
dec
jae
and
inc
retf
idiv
mov
xchg
lock
shl
cmp
push
mov
inc
xlat
idiv
rcr
mov
lock
retf
sbb
in
sar
add
aaa
mov
mov
xor
ss
mov
lea
stc
js
jg
add
cmp
test
jns
jb
sar
jg
mov
cmp
sub
mov
mov
aad
mov
(bad)
mov
or
imul
xor
or
jg
add
ss
cmp
sub
iret
mov
idiv
stc
pop
ja
xchg
aaa
jg
mov
sub
shl
jns
cmp
cmp
mul
das
hlt
inc
lds
push
int
test
add
jb
sub
int
add
(bad)
and
aaa
mov
mov
cmp
xor
xchg
jo
inc
cmp
inc
ret
cmp
ja
enter
ins
mov
push
mov
sub
push
mov
sbb
test
test
jns
lea
push
imul
lock
rcl
(bad)
into
pusha
push
iret
mov
imul
mov
mov
jo
dec
mov
add
enter
scas
xchg
mov
jbe
or
jo
js
mov
inc
test
and
mov
js
add
pusha
jo
js
mov
inc
lods
mov
inc
ror
xor
aaa
adc
mov
inc
aaa
jl
in
addr16
nop
dec
aaa
jg
shr
mov
jne
lock
retf
xchg
outs
test
inc
xor
jb
repnz
ret
push
outs
cli
inc
retf
jnp
int
cmp
les
inc
cmp
inc
cmps
fcom
mov
xchg
adc
cmps
jp
iret
hlt
ins
(bad)
cld
cmp
xor
lods
mov
out
ret
push
cmp
dec
aaa
jg
inc
jmp
fmul
jg
js
jo
cli
mov
mov
lock
ret
(bad)
xor
aaa
idiv
aaa
hlt
add
cmp
xchg
popf
imul
cmp
inc
add
pop
cmp
test
fs
aaa
jg
sar
mov
jne
lock
ret
xchg
outs
test
out
inc
add
jb
repnz
ret
push
outs
cli
inc
ret
jnp
int
cmp
les
inc
cmp
inc
cmps
fcom
mov
xchg
adc
mov
mov
aaa
dec
imul
xor
mov
inc
(bad)
or
inc
ror
xchg
aam
hlt
ins
nop
xlat
ret
mov
jg
or
mov
iret
push
fsubr
popf
mov
jmp
cmp
dec
nop
js
xor
adc
das
test
mov
xchg
sub
cmp
test
enter
pop
jg
add
pop
jg
add
inc
ja
cmp
jns
jb
adc
enter
enter
xor
add
mov
or
xor
xchg
std
jg
jns
idiv
es
ins
mov
push
mov
jge
add
inc
pop
lock
mov
cli
xchg
clc
enter
mov
or
add
enter
(bad)
aam
add
mov
test
enter
shl
lea
(bad)
rcl
sbb
mov
aad
idiv
(bad)
mov
cmp
adc
jns
icebp
cmp
sar
add
sbb
fnstsw
data16
imul
(bad)
push
imul
cmp
add
cmp
or
cli
enter
jl
jns
cmc
mov
xor
xchg
add
cld
add
add
enter
cmps
fidivr
add
aaa
repnz
dec
add
aaa
test
aaa
adc
jns
aaa
pop
jns
aaa
aas
hlt
or
xchg
addr16
jl
aaa
jg
add
xchg
mov
mov
icebp
iret
jne
sub
add
jns
pop
jg
add
xchg
addr16
js
aaa
jg
std
mov
test
enter
aaa
jg
mov
add
aaa
cmp
jns
pop
mov
cld
cli
leave
add
aaa
(bad)
mov
mov
das
adc
call
add
aaa
jg
in
or
add
jne
adc
call
mov
xchg
enter
aaa
jg
test
bound
aaa
sub
imul
mov
jns
mov
jno
aaa
jg
shl
pop
(bad)
mov
sub
sub
jo
rcr
fs
push
xchg
ret
or
ret
jns
mov
test
mov
jg
cmp
jo
outs
aaa
adc
or
enter
push
ss
mov
aas
stc
cmp
jg
cld
mov
jle
mov
or
or
ss
enter
je
jns
push
sub
loopne
ror
add
std
ss
ret
ins
in
cmp
pop
jle
cli
inc
imul
enter
push
jg
add
push
sub
shr
(bad)
jmp
or
or
ja
add
jg
xchg
addr16
hlt
sub
loopne
das
cs
mov
scas
or
jg
inc
iret
das
hlt
inc
retf
das
adc
aaa
adc
jns
inc
jae
jo
xchg
fmul
jg
lds
dec
(bad)
xchg
or
or
aaa
or
aaa
jns
ds
test
mov
jns
push
mov
stc
dec
aaa
jg
jo
xchg
or
aaa
jg
lds
mov
(bad)
neg
mov
addr16
mov
(bad)
bnd
sbb
(bad)
jl
aaa
jg
loop
cmp
add
pop
data16
aaa
adc
xchg
xchg
inc
dec
aaa
jg
lds
dec
(bad)
hlt
inc
das
das
das
outs
aaa
adc
xchg
xchg
push
dec
aaa
jg
lds
xchg
xchg
jl
aaa
jg
(bad)
shr
jg
repnz
cmp
mov
xchg
xchg
inc
aaa
jg
mov
addr16
(bad)
mov
sub
rcr
mov
xchg
ret
test
jne
jns
adc
xor
aaa
jg
in
sar
jns
mov
stos
cmp
sbb
add
aas
xchg
cmp
aaa
jg
outs
aaa
adc
sbb
jne
xchg
movs
jno
jns
retf
stos
cmp
push
mov
js
mov
stos
cmp
aaa
idiv
push
adc
into
sub
mov
push
mov
mov
push
cmps
inc
aaa
imul
or
data16
sub
hlt
or
mov
xor
rcl
inc
retf
idiv
stc
mov
inc
inc
or
lock
push
cmps
sub
or
nop
cmp
mov
jne
iret
push
mov
add
shl
aaa
test
jo
inc
cmp
or
or
jo
test
inc
repnz
daa
mov
outs
add
mov
xor
ja
inc
mov
jle
push
fist
mov
adc
jg
cli
inc
(bad)
lock
cmps
sub
inc
outs
xchg
shl
mov
lock
mul
xor
xchg
jle
jb
fisubr
jg
pop
ins
mov
push
mov
sub
push
mov
adc
mov
mov
jns
mov
scas
sahf
xchg
ja
outs
ja
mov
inc
ret
(bad)
xchg
jbe
jg
xor
xchg
outs
or
push
jo
inc
jne
mov
dec
cli
cmc
inc
idiv
jno
or
inc
call
fdiv
jbe
dec
xor
mov
add
mov
sub
std
mov
add
repz
mov
lock
lea
and
xchg
mov
repz
jb
jbe
jb
inc
inc
iret
or
es
ins
mov
push
mov
jge
in
mov
jns
sub
mov
mov
int3
xor
jg
mov
aaa
cld
fsubr
enter
mov
mov
xchg
or
(bad)
mov
enter
mov
js
(bad)
jb
aaa
cld
(bad)
std
enter
inc
jb
in
sar
nop
and
jns
inc
imul
mov
xchg
enter
aaa
jg
mov
mov
xor
out
add
or
stos
xchg
enter
aaa
jnp
add
movs
cmp
test
leave
add
jp
jns
shl
cld
aad
add
pop
jnp
add
aaa
jg
cmc
ss
lock
mov
mov
clc
enter
inc
jns
into
idiv
leave
enter
int
xchg
jnp
add
call
ja
shl
xchg
ja
dec
call
add
aaa
jg
sar
adc
aaa
jg
getsec
jg
pushf
rol
ins
(bad)
lahf
cmp
leave
adc
repz
dec
jb
jns
cmp
mov
fisttp
add
aaa
jg
repnz
sub
xchg
pusha
pop
inc
fidiv
cs
add
jns
mov
imul
inc
xchg
add
jns
cmp
mov
push
pop
(bad)
cdq
inc
aaa
or
enter
adc
jns
mov
jno
add
test
leave
adc
repz
leave
jae
jns
cmp
mov
push
pop
(bad)
cdq
inc
aaa
or
enter
fdivr
jns
mov
jno
(bad)
mov
clc
enter
lods
cmp
mov
add
mov
jl
adc
lock
aaa
jg
data16
jg
pushf
rol
sti
enter
call
stc
cmp
adc
and
cli
test
leave
sub
push
mov
adc
jg
shl
xor
jg
getsec
jg
pushf
rol
ins
(bad)
lahf
cmp
leave
adc
repz
psubsb
xchg
enter
aaa
jg
sar
mov
idiv
add
aaa
out
cld
mov
jl
and
mov
jne
xchg
fist
add
pop
jl
inc
aaa
or
enter
and
jns
mov
jno
in
jns
mov
add
mov
jl
adc
mov
data16
jg
pushf
rol
sti
enter
call
sar
aaa
cld
mov
sub
jg
popf
je
jns
fistp
scas
mov
inc
aaa
repnz
fcmovne
add
aaa
repnz
fcmovne
add
mov
xchg
enter
jmp
add
mov
add
aaa
jg
repnz
cld
add
pop
xchg
dec
je
jns
push
jg
add
mov
sub
or
cmp
aaa
jg
shl
pop
inc
aaa
jg
getsec
jg
pushf
rol
ins
(bad)
lahf
cmp
leave
adc
repz
repz
jns
fild
jae
aaa
jg
repnz
cld
add
ins
adc
jmp
add
aaa
jg
sar
lods
inc
aaa
jg
getsec
jg
pushf
rol
ins
(bad)
lahf
cmp
leave
adc
repz
xchg
jmp
imul
retf
add
jne
sub
test
ins
in
movs
cmp
jns
aaa
out
cld
mov
jl
and
mov
jne
xchg
(bad)
cmp
(bad)
fisub
mov
idiv
add
aaa
out
cld
mov
jl
and
mov
jne
xchg
fild
cmp
fild
add
aaa
jg
repnz
cld
add
pop
xchg
sub
push
jg
add
mov
sub
or
pop
inc
aaa
jg
shl
add
aaa
jo
jo
jg
xchg
jg
inc
ss
ret
mov
jns
enter
ins
xor
mov
sar
cmp
hlt
cld
mov
mov
xchg
enter
enter
inc
hlt
les
mov
xchg
enter
or
cmp
push
sub
jg
dec
fstp
xchg
push
mov
xor
mov
sbb
ret
enter
ins
mov
jns
enter
mov
mov
mov
add
enter
aaa
jo
jg
add
enter
mov
sub
mov
xchg
enter
jmp
xor
add
fist
add
aaa
jg
repnz
cld
add
ins
adc
cmp
xchg
enter
aaa
jg
sar
mov
idiv
add
aaa
out
cld
mov
jl
and
mov
jne
xchg
fistp
add
fbld
jae
aaa
jg
repnz
cld
add
ins
adc
xlat
cmp
xchg
enter
aaa
jg
sar
cld
mov
aaa
jg
cli
mov
xchg
enter
enter
mov
xchg
enter
leave
add
enter
(bad)
idiv
add
mov
xchg
enter
aaa
jg
mov
aaa
jo
dec
ss
mov
push
mov
jg
add
enter
mov
js
aaa
hlt
cld
std
enter
mov
xchg
enter
pop
cmps
inc
aaa
repnz
icebp
enter
fbstp
cmp
mov
cmp
enter
ss
cld
mov
rol
push
jg
mov
das
jbe
mov
xchg
enter
ret
add
jg
add
test
addr16
sar
enter
xor
cld
cmc
enter
or
sbb
retf
or
xchg
addr16
sbb
in
in
inc
jns
mov
popa
mov
rcr
cli
mov
xor
(bad)
inc
add
aaa
jg
repnz
cld
add
ins
adc
cmp
xchg
enter
aaa
jg
sar
clc
cmp
jg
getsec
jg
pushf
rol
ins
cld
mov
test
leave
adc
repz
pop
or
mov
scas
mov
push
pop
(bad)
cdq
inc
aaa
or
enter
dec
inc
jns
mov
jno
or
ds
jg
repz
jns
enter
leave
xor
aaa
jg
cli
addr16
enter
fistp
cli
enter
mov
xor
cli
std
sti
enter
jmp
add
aaa
jg
sar
nop
cmp
jg
getsec
jg
pushf
rol
ins
push
cmp
leave
adc
repz
ror
jns
cmp
mov
push
pop
mov
inc
aaa
or
enter
aam
jns
mov
jno
(bad)
push
mov
jg
getsec
jg
pushf
rol
ins
(bad)
lahf
cmp
leave
adc
repz
aaa
jmp
add
aaa
jg
sar
sbb
aaa
jg
getsec
jg
pushf
rol
in
js
jns
mov
add
gs
(bad)
stc
enter
pop
inc
cmps
inc
aaa
sub
xchg
outs
xchg
sub
jg
mov
scas
mov
push
pop
and
stc
enter
jl
jns
mov
jno
fstp
sbb
cmp
jg
getsec
jg
pushf
rol
ins
cld
mov
test
leave
adc
repz
(bad)
jg
mov
scas
mov
push
pop
(bad)
cdq
inc
aaa
or
enter
int3
inc
jns
mov
jno
add
mov
add
mov
jl
adc
fdivr
aaa
jg
data16
jg
pushf
rol
sti
enter
call
fld
cld
mov
inc
aaa
or
enter
test
add
(bad)
mov
clc
enter
push
inc
jns
mov
add
mov
jl
and
mov
jne
xchg
(bad)
inc
add
pop
arpl
stc
enter
pop
inc
jns
mov
jno
sbb
jns
mov
add
mov
jl
and
mov
jne
xchg
fbstp
mov
inc
aaa
or
enter
add
add
(bad)
push
mov
jg
getsec
jg
pushf
rol
ins
(bad)
lahf
cmp
leave
adc
repz
sub
test
addr16
cld
stc
enter
pop
jge
inc
aaa
das
xchg
leave
or
xchg
outs
xchg
test
cmp
mov
push
pop
(bad)
cdq
inc
aaa
or
enter
cld
inc
jns
mov
jno
(bad)
push
mov
jg
mov
add
aaa
cld
mov
add
aaa
jg
repnz
cld
add
ins
adc
xlat
cmp
xchg
enter
aaa
jg
sar
xor
aaa
jg
in
xor
jns
rol
and
jg
mov
sub
in
jmp
add
fbld
add
aaa
jg
repnz
cld
add
ins
adc
xlat
cmp
xchg
enter
aaa
jg
sar
cmps
fdiv
xchg
fist
add
mov
mov
jns
cmp
mov
push
pop
(bad)
cdq
inc
aaa
or
enter
enter
mov
jno
mov
mov
add
mov
jl
adc
sar
aaa
jg
data16
jg
pushf
rol
sti
enter
call
fld
aaa
cld
mov
inc
aaa
or
enter
add
mov
jns
xor
pop
jns
aaa
aas
xchg
xchg
dec
cmp
fild
adc
mov
add
aaa
adc
xchg
enter
add
in
enter
mov
retf
retf
sub
add
xor
jg
cmc
rcr
cli
mov
dec
jns
mov
and
ins
mov
push
mov
jle
add
dec
pop
lock
push
xchg
ret
xchg
mov
jns
cmp
cmp
addr16
repnz
hlt
or
xchg
addr16
movs
aas
aaa
jg
add
aaa
repnz
cli
leave
add
mov
cdq
cmc
enter
sub
cmp
ss
cmp
or
mov
jmp
add
mov
(bad)
adc
jmp
jns
in
mov
movs
inc
aaa
pop
jp
aaa
call
xchg
pop
lock
push
xchg
ret
mov
jmp
sub
mov
(bad)
jb
add
mov
test
enter
xchg
jecxz
cli
enter
aas
inc
cmp
mov
and
jno
xor
add
mov
xchg
mov
cmp
icebp
cld
mov
xor
jg
push
aas
repnz
nop
xchg
add
aaa
jg
or
cli
enter
enter
add
mov
repnz
xchg
mov
sub
jne
in
popf
retf
mov
push
or
or
retf
in
and
add
enter
scas
add
aaa
hlt
sub
mov
xor
cmp
add
mov
imul
(bad)
retf
ins
aaa
test
dec
add
retf
outs
daa
adc
test
enter
push
jg
mov
dec
or
inc
jns
pop
jnp
add
retf
push
pop
shl
fnstenv
adc
aaa
jg
in
iret
nop
xchg
mov
pop
or
or
lods
dec
add
pop
jge
add
enter
aaa
jg
or
xchg
addr16
mov
add
aaa
or
retf
cli
sub
cli
enter
retf
cli
xor
cli
enter
retf
cli
sbb
cli
enter
add
test
idiv
cdq
retf
or
or
adc
mov
add
aaa
repnz
stc
leave
add
aaa
test
mov
test
enter
retf
add
rcr
add
enter
push
jg
outs
jae
jns
mov
xchg
enter
movq
repz
cli
jae
jns
(bad)
adc
mov
test
enter
mov
xchg
enter
aaa
sbb
cli
aaa
jg
mov
aaa
or
lock
xchg
sti
enter
mov
inc
ins
aaa
jg
or
fwait
jmp
test
enter
pop
jns
aaa
adc
jns
aaa
repnz
stc
leave
add
add
or
jo
jmp
jg
cli
adc
cli
enter
aaa
jg
jmp
in
clc
enter
call
mov
test
enter
lock
jns
mov
imul
enter
mov
mov
xchg
addr16
or
jne
xchg
inc
add
mov
jbe
jo
pop
xchg
push
aaa
jg
lea
jg
test
jle
sbb
or
int
movs
or
add
aaa
jg
mov
aaa
or
aaa
(bad)
jns
fild
dec
add
aaa
jg
loop
cli
sbb
ret
js
aaa
repnz
stc
leave
add
aaa
jg
add
adc
cld
stc
leave
add
enter
or
pop
xchg
jg
std
ss
ret
cli
mov
aaa
(bad)
xchg
pop
sbb
out
xor
fcomp
mov
sub
pop
dec
jns
mov
sbb
jg
in
mov
jns
pop
jg
mov
add
aaa
or
retf
in
mov
add
enter
mov
mov
mov
loopne
xchg
ins
push
popa
sub
pop
and
pop
add
addr16
rcr
xor
idiv
in
add
jns
cmc
sbb
push
leave
or
movs
dec
add
mov
outs
xchg
leave
add
jns
cmc
sbb
push
shr
add
jns
cmc
sbb
push
ret
(bad)
xchg
pushf
add
jns
cmp
or
jo
push
sar
sub
mov
push
push
pop
jg
rol
dec
mov
or
idiv
iret
dec
or
aas
sub
in
jns
mov
jne
inc
ja
cmc
mov
jl
fild
or
cmp
cmp
mov
das
xchg
inc
push
jg
cli
inc
outs
jbe
jb
hlt
inc
xor
mov
xor
daa
jge
in
adc
add
mov
cmp
or
jo
push
shl
adc
push
jg
mov
sub
sub
and
in
and
jns
mov
xchg
ret
das
in
mov
add
popa
xchg
xor
jg
in
inc
dec
jns
mov
and
(bad)
(bad)
neg
(bad)
dec
add
mov
jo
ss
mov
xchg
ja
jns
mov
out
jnp
jg
or
cld
(bad)
xchg
sbb
sub
jg
ret
ds
jns
mov
mov
cdq
cli
enter
aaa
jg
sar
mov
int
add
pop
jg
mov
rcr
cli
mov
xchg
daa
ret
cdq
cli
enter
aaa
repnz
mov
mov
sub
fcomip
push
add
or
jg
push
enter
enter
add
xchg
ja
lds
xchg
enter
les
add
mov
xor
push
mov
fnsave
and
pop
(bad)
mov
gs
sbb
push
popa
sub
pop
aas
sar
je
rol
jg
repnz
cld
icebp
call
push
mov
jg
in
pop
dec
jns
mov
aas
stc
cmp
jg
cld
mov
movs
js
gs
jbe
enter
aas
pop
sub
jne
sub
pusha
dec
jns
mov
jno
ja
jns
rcr
cli
mov
xor
mov
mov
jns
mov
cdq
cli
enter
add
xchg
ja
loope
jg
mov
scas
mov
adc
cdq
inc
aaa
repnz
add
fistp
add
mov
je
aaa
jg
mov
cmp
mov
sub
(bad)
aaa
(bad)
sbb
into
sub
xchg
pusha
pop
and
jne
hlt
mov
pusha
xchg
in
aaa
jg
shl
add
aaa
jg
getsec
jg
pushf
rol
ins
(bad)
lahf
cmp
enter
lods
dec
jns
mov
jno
add
jns
enter
mov
jns
mov
jno
(bad)
mov
cli
enter
add
mov
add
mov
jl
and
mov
jne
hlt
xor
xchg
addr16
sub
aaa
jg
sar
push
getsec
jg
pushf
rol
in
enter
mov
add
repnz
pop
daa
movs
inc
aaa
repnz
fisttp
mov
ins
and
cli
jns
enter
push
mov
jns
enter
in
jns
mov
ins
in
test
add
aaa
out
cld
mov
jl
and
mov
jne
hlt
xor
xchg
addr16
test
aaa
jg
sar
jae
jne
hlt
xor
xchg
addr16
les
aaa
jg
sar
pop
inc
dec
jns
mov
add
mov
jl
and
mov
jne
hlt
xor
xchg
addr16
call
sar
jp
jne
hlt
xor
xchg
addr16
add
aaa
jg
sar
inc
aaa
aaa
jg
getsec
jg
pushf
rol
in
adc
add
aaa
out
cld
repnz
pop
daa
movs
inc
aaa
repnz
fbld
add
pop
push
cmps
inc
aaa
repnz
add
fist
add
fist
jae
aaa
jg
repnz
cld
add
imul
xlat
cmp
cdq
cli
enter
add
ja
cmc
push
(bad)
lock
pop
xor
inc
aaa
repnz
add
fist
mov
add
aaa
jg
repnz
cld
add
imul
xlat
cmp
cdq
cli
enter
push
jg
xchg
ja
pop
jmp
jg
cli
enter
push
jg
xchg
ja
jne
jg
mov
scas
mov
adc
cdq
inc
aaa
repnz
add
fcomip
dec
add
mov
push
adc
jg
jo
repnz
add
pop
push
movs
inc
aaa
repnz
add
fistp
dec
add
fistp
add
aaa
jg
repnz
cld
add
imul
xlat
cmp
cdq
cli
enter
push
jg
xchg
ja
add
mov
cdq
cli
enter
push
jg
xchg
ja
(bad)
jns
shl
cld
in
call
xchg
movs
xor
aaa
jg
pushf
rol
ins
(bad)
lahf
cmp
enter
int3
dec
jns
mov
jno
or
mov
mov
mov
pop
jns
pusha
repnz
pop
imul
push
(bad)
dec
add
(bad)
dec
add
aaa
jg
repnz
cld
add
imul
xlat
cmp
cdq
cli
enter
pop
jg
xchg
ja
fucomi
cmp
cdq
cli
enter
pop
jg
xchg
ja
repz
fistp
dec
add
aaa
jg
repnz
cld
add
imul
xlat
cmp
cdq
cli
enter
pop
jg
xchg
ja
and
cmp
mov
sub
jno
add
aaa
jg
repnz
sub
xchg
pusha
pop
and
jne
hlt
mov
pusha
xchg
jl
aaa
jg
shl
test
xor
xchg
addr16
ins
xor
aas
adc
jnp
aaa
adc
jns
fs
call
or
xchg
mov
ds
jg
xor
xchg
addr16
ins
sub
jg
add
enter
mov
sub
add
sub
jg
mov
mov
push
add
fdiv
cmc
rcr
cli
mov
mov
push
mov
jnp
add
jl
out
mov
mov
xchg
aaa
dec
pop
hlt
and
fs
shr
aaa
jg
push
aas
repnz
xchg
retf
mov
rcr
cli
mov
jg
push
fild
add
enter
loope
jns
mov
jns
mov
adc
pop
jg
adc
mov
aaa
jg
add
jg
mov
das
adc
and
add
enter
adc
or
pop
jge
aaa
jg
or
xchg
addr16
mov
add
aaa
(bad)
push
push
aaa
jg
loop
cli
stc
dec
xor
enter
enter
mov
test
enter
int
xchg
cmp
add
aaa
jg
movs
jmp
jns
mov
xchg
enter
sbb
mov
das
hlt
or
xchg
addr16
loopne
aaa
jg
mov
add
enter
iret
idiv
mov
das
xchg
sbb
repz
std
push
xchg
ret
sar
cmp
rol
jns
mov
loope
enter
sub
mov
cli
ss
std
ss
ret
sar
sub
out
xchg
outs
repnz
mov
mov
sub
aaa
adc
jns
aaa
adc
xchg
enter
fistp
add
mov
js
aaa
or
retf
in
hlt
push
jns
(bad)
adc
add
mov
cmp
idiv
cli
enter
jne
adc
cmp
xchg
enter
sbb
xchg
outs
mov
cli
aaa
xchg
push
test
jb
add
leave
add
aaa
xchg
pop
cs
jg
ret
ds
jp
aaa
xchg
adc
aaa
jg
or
cli
ss
cld
jp
add
shl
ss
ins
aaa
(bad)
jns
fbstp
jge
aaa
jg
and
xchg
int
jg
mov
dec
or
cli
jmp
in
push
int3
xchg
mov
jne
enter
cmp
mov
aaa
jg
cmp
xchg
xchg
rol
lds
sti
int
aaa
jg
add
enter
mov
xchg
xor
jg
sub
int3
xchg
retf
in
into
test
clc
repnz
add
enter
sbb
mov
push
add
jmp
jns
fisttp
mov
sub
je
inc
aaa
xchg
sub
repnz
stos
add
mov
or
retf
in
(bad)
test
cli
mov
jne
adc
cld
cdq
retf
xchg
dec
sub
retf
enter
loopne
xchg
rcr
cli
mov
push
jns
lock
in
enter
aaa
jg
add
les
jg
add
enter
push
jg
mov
push
or
push
jns
mov
and
ins
mov
add
sub
loopne
xchg
imul
rcr
inc
lock
rcr
push
fbstp
push
add
enter
je
jns
mov
jge
push
pop
aas
xchg
jno
jg
mov
sub
in
sub
add
aaa
mov
ret
pusha
sub
jg
jo
repnz
add
fild
cmp
addr16
daa
inc
aaa
adc
jo
aaa
jg
ret
mov
mov
enter
hlt
inc
retf
das
das
in
or
add
aaa
jg
inc
retf
xchg
jg
iret
push
or
(bad)
jge
aaa
jg
lea
jg
push
pusha
ror
xor
repnz
cld
stc
fadd
jl
inc
ja
in
pop
jg
mov
test
ror
xor
xchg
cmp
jo
add
enter
fild
js
inc
jae
xor
xchg
addr16
xor
inc
xchg
aaa
jg
add
mov
adc
popa
xchg
loopne
aaa
jg
ret
(bad)
es
(bad)
mov
xchg
or
jl
inc
push
clc
bnd
jns
push
mov
xchg
ins
mov
mov
sub
mov
lea
leave
push
add
addr16
jns
enter
jne
xchg
adc
jg
or
jl
ins
enter
mov
cmc
push
add
mov
jg
inc
ss
cli
add
inc
aaa
xchg
pushf
sub
cs
add
cmp
cmp
mov
je
mov
sub
ret
and
or
adc
jns
aaa
adc
jns
pop
jg
add
fist
add
sub
xor
jne
xchg
mov
jg
test
in
adc
pop
dec
xchg
(bad)
cmp
aaa
adc
xchg
mov
cmp
aaa
adc
xchg
sbb
cmp
aaa
adc
xchg
sub
cmp
aaa
test
sub
xor
jbe
xchg
xor
sub
xor
jbe
xchg
and
sub
xor
jne
xchg
adc
sub
xor
jne
xchg
add
iret
push
or
out
add
aaa
adc
xchg
(bad)
loop
add
aaa
adc
xchg
mov
mov
add
pop
dec
xchg
scas
fdivr
add
aaa
test
imul
adc
cmp
cli
add
inc
and
jg
and
jmp
add
fisttp
add
add
fadd
xchg
pusha
and
jg
cmp
stc
cmp
mov
cmp
aaa
test
retf
or
jns
fcomp
add
aaa
pop
cmps
xor
stc
enter
jbe
xchg
loope
jg
outs
retf
or
jns
cld
pop
jns
xchg
jg
inc
aaa
pop
cmps
xor
stc
enter
ja
xchg
lds
jg
outs
retf
or
jns
nop
pop
jns
xchg
pop
fadd
pop
cmps
xor
stc
enter
jbe
xchg
cdq
adc
outs
retf
or
jns
mov
jns
xchg
push
loopne
aaa
pop
cmps
xor
stc
enter
jbe
xchg
jge
jg
mov
jle
mov
adc
fadd
xchg
and
aaa
jg
sbb
stc
cmp
mov
cmp
aaa
and
xchg
imul
mov
mov
ins
ret
add
movs
add
in
cmp
test
enter
xchg
ja
inc
aaa
(bad)
xchg
inc
xor
outs
aaa
das
xchg
ins
adc
mov
sub
sbb
sub
or
jns
aaa
sub
inc
retf
push
cmp
addr16
cmp
sbb
mov
jg
add
addr16
movs
fidiv
adc
in
cmp
jns
fist
add
jbe
adc
jbe
adc
jb
push
inc
(bad)
cld
xchg
popa
addr16
jns
mov
adc
in
cmp
cmp
adc
cmps
xor
cmp
add
cmp
jae
cmp
aaa
hlt
cmp
sbb
mov
adc
ds
push
pop
mov
mov
add
aaa
fcomp
movs
jne
adc
pop
jg
add
adc
pop
ret
jnp
aaa
adc
jno
and
lock
mov
mov
aaa
jg
add
adc
out
aaa
xchg
sub
aaa
jg
add
jbe
adc
jbe
adc
aaa
adc
jns
aaa
das
adc
cmp
cmp
adc
cmps
dec
fidivr
add
add
cmp
jae
cmp
xor
adc
jns
pop
addr16
pop
mov
add
aaa
(bad)
cmps
jne
adc
jbe
adc
jbe
adc
aaa
pop
fld
pop
jg
add
jne
adc
in
cmp
mov
or
dec
push
add
add
inc
aaa
adc
fld
imul
sar
adc
jns
pop
icebp
mov
fidiv
adc
aaa
fsubr
jbe
adc
jbe
adc
jne
adc
sbb
scas
aaa
jg
outs
and
jp
mov
adc
call
movs
cmp
adc
cmps
(bad)
cmp
aaa
adc
jns
addr16
push
and
jg
jo
cmp
cmp
jg
xor
loop
add
aaa
adc
out
aaa
adc
fld
pop
push
add
jg
aaa
pop
aad
add
xor
stc
push
pop
mov
cld
fbstp
adc
aaa
fdivr
movs
jne
lock
ss
ret
xchg
add
cmp
push
fistp
add
aaa
adc
jns
pop
sar
aaa
pop
jp
mov
adc
call
movs
cmp
adc
jns
sbb
cmp
enter
add
inc
aaa
adc
fld
imul
jg
ins
ss
ins
aaa
jg
push
pop
adc
inc
aaa
pop
mov
add
aaa
fsubr
cmps
jne
clc
repnz
pop
jns
pop
jg
xor
loopne
add
jae
cmp
aaa
jg
ins
enter
pop
imul
pop
jns
aaa
das
adc
cmp
cmp
adc
jns
inc
fidivr
add
add
cmp
jae
cmp
pop
addr16
aaa
pop
mov
add
jne
cmp
aaa
adc
jns
xchg
dec
loopne
aaa
adc
out
aaa
adc
fld
imul
dec
js
aaa
adc
jns
pop
ins
mov
fidiv
adc
aaa
fmul
std
ss
ret
xchg
add
cmp
jae
cmp
pop
xor
fld
aaa
jg
ins
xor
mov
in
mov
jmp
inc
aaa
adc
out
aaa
adc
fld
adc
jns
pop
out
jns
aaa
adc
stc
push
pop
mov
js
jne
adc
fs
jns
xchg
sti
fadd
adc
out
aaa
adc
fld
adc
jns
pop
mov
ins
ins
aaa
jg
push
pop
out
fild
pop
js
jne
adc
and
add
aaa
test
aaa
or
jns
aaa
or
jns
das
adc
jns
pop
imul
aaa
jmp
ins
jmp
cmp
aaa
pop
jns
aaa
jg
fst
jg
cmps
pop
loopne
add
add
cmp
push
fistp
add
pop
mov
aaa
adc
stc
push
pop
mov
js
jne
adc
test
jns
xchg
pop
out
aaa
adc
out
aaa
adc
fld
outs
ins
lods
jg
add
aaa
adc
stc
push
pop
pushf
mov
fdiv
adc
aaa
fsub
cmps
jne
xchg
ins
iret
add
rcr
in
inc
xchg
(bad)
(bad)
neg
mov
xchg
jb
jg
ins
ret
add
adc
mov
jns
fild
cli
enter
xchg
ja
inc
aaa
test
aaa
or
jns
les
add
popa
xchg
xchg
sbb
jg
jmp
xchg
add
cmp
jb
push
inc
ret
das
repnz
iret
push
cmp
addr16
jns
mov
adc
call
movs
cmp
aaa
xchg
shl
ds
aaa
or
jns
aaa
das
adc
mov
(bad)
cli
in
push
das
adc
pop
imul
aaa
jmp
ins
(bad)
cmps
cmp
aaa
adc
jns
xchg
jnp
inc
aaa
dec
outs
aaa
or
jns
aaa
or
jns
sbb
add
jb
cli
in
push
das
adc
adc
jmp
ins
jmp
cmp
aaa
adc
jns
xchg
pop
fld
adc
jns
aaa
adc
jns
aaa
adc
jns
pop
jg
add
(bad)
pop
add
sub
xor
jbe
xchg
in
jg
outs
aaa
or
jns
aaa
or
jns
push
adc
ins
ins
xor
stc
push
pop
mov
cld
fbstp
adc
aaa
fcom
std
push
xchg
ret
mov
ins
je
jns
enter
jbe
xchg
xchg
sub
ins
inc
movs
cmp
ss
cli
add
add
aaa
jg
cmp
or
aaa
adc
jns
enter
jbe
xchg
pop
sub
out
and
aaa
add
jg
xor
loop
add
aaa
adc
out
aaa
adc
fld
pop
push
add
jg
aaa
pop
imul
pop
jl
test
movs
fidiv
adc
aaa
xchg
inc
sbb
jg
test
push
jns
add
inc
aaa
adc
fld
pop
push
add
jg
cmp
adc
xor
stc
push
pop
mov
cld
fbstp
adc
aaa
fcom
jbe
xchg
push
add
test
jns
aaa
or
jns
daa
pop
clc
add
pop
imul
pop
jns
aaa
das
adc
cmp
cmp
sub
cmps
inc
fidivr
add
mov
dec
dec
call
cmp
adc
aaa
jg
ins
hlt
jg
add
addr16
cmp
jne
adc
in
cmp
add
aaa
jg
xor
aaa
or
jns
aaa
or
jns
daa
pop
test
aaa
jg
outs
push
pop
jns
aaa
das
adc
in
cmp
cmp
sub
cmps
(bad)
loop
add
add
cmp
jae
cmp
pop
(bad)
jns
aaa
pop
fld
aaa
jg
ins
xor
mov
in
cmp
jns
xchg
jmp
inc
aaa
adc
out
aaa
adc
fld
imul
cdq
jns
aaa
adc
jns
pop
add
fidiv
adc
aaa
fadd
add
jbe
adc
jbe
adc
aaa
pop
xchg
pop
jg
add
jne
adc
in
cmp
loopne
aaa
jg
movs
xchg
cmp
dec
xor
or
jns
das
pop
sti
add
pop
imul
aaa
jmp
ins
cmps
fnstsw
add
aaa
pop
jns
aaa
jg
sub
cmps
sub
cmp
aaa
jg
add
jbe
adc
jne
adc
pop
imul
aaa
jmp
ins
jmp
cmp
aaa
pop
jns
aaa
jg
and
jg
cmps
pop
loopne
add
add
cmp
push
fistp
add
pop
and
adc
jns
addr16
movs
fidiv
adc
jge
add
aaa
fcomp
jbe
adc
jbe
adc
jbe
adc
pop
in
add
aaa
jg
sbb
jns
addr16
call
cmp
int3
sbb
jg
popf
xchg
cmp
xchg
mov
mov
xchg
mov
push
mov
sub
push
mov
mov
outs
aaa
pop
stc
add
pop
jg
push
pop
jg
add
fcomip
arpl
leave
xor
jg
add
mov
mov
lock
fcomp
jg
pusha
retf
jg
inc
ret
jnp
add
addr16
addr16
or
pop
inc
int
aaa
pop
js
aaa
call
xchg
addr16
pop
retf
or
outs
aaa
or
sub
sub
jo
or
cld
mov
or
or
xor
sub
inc
outs
adc
cmp
test
jmp
cli
enter
(bad)
cld
push
add
jb
lock
and
hlt
sub
loopne
xchg
jno
aaa
jg
push
mov
movaps
mov
ins
xchg
iret
cmp
enter
fs
mov
mov
jns
cmp
add
in
and
mov
xchg
outs
adc
mov
xchg
enter
das
jg
test
jnp
es
mov
xor
xchg
addr16
je
aaa
jg
js
jl
adc
mov
inc
aaa
repnz
add
fisttp
xchg
dec
sub
test
jge
es
ins
mov
jg
xor
xchg
addr16
mov
js
jp
adc
dec
enter
cld
add
fistp
add
xor
push
add
enter
pushf
push
xchg
inc
outs
adc
cmp
xchg
enter
and
mov
mov
cli
enter
dec
xor
pop
cli
mov
jg
xor
xchg
addr16
or
aaa
jg
js
jbe
adc
(bad)
inc
aaa
repnz
add
fbld
add
cmp
into
cmp
enter
je
jns
mov
xchg
inc
outs
adc
jg
cli
enter
and
mov
push
mov
or
push
int
add
enter
cmp
add
inc
outs
adc
jg
cli
enter
and
test
ja
es
sub
jne
hlt
xor
xchg
addr16
cwde
adc
jg
add
out
cmp
cmp
enter
aaa
loope
add
enter
jne
adc
ja
cmp
enter
ds
loope
jg
xchg
push
lock
rcr
cli
mov
add
aaa
sub
loopne
sub
mov
(bad)
mov
iret
push
or
repnz
in
ss
xchg
mov
jno
test
xchg
dec
das
jg
pop
imul
mov
(bad)
xchg
xor
jg
push
popa
sub
sbb
mov
dec
mov
jg
jecxz
cli
popf
repnz
pop
or
cld
call
fild
add
aaa
jg
or
jg
pushf
rol
cli
mov
mov
enter
es
aad
jne
hlt
sbb
xchg
addr16
nop
adc
jg
mov
xor
int
add
enter
clc
push
add
mov
xchg
ins
ror
cmp
enter
cwde
push
add
enter
es
js
jne
hlt
sbb
xchg
addr16
in
adc
jg
mov
xor
push
add
enter
dec
push
add
aaa
jg
mov
xor
push
add
enter
ins
push
add
enter
es
ss
jg
sbb
xchg
addr16
cmp
aaa
jg
mov
aas
or
pop
int3
cmp
enter
adc
add
mov
xchg
ins
mov
cli
xchg
repnz
xor
add
enter
es
shl
fimul
xchg
adc
jg
mov
cmp
push
add
enter
in
jns
mov
cli
cdq
repnz
mov
mov
enter
es
xchg
mov
jg
sbb
xchg
addr16
aam
aaa
jg
mov
cmp
push
add
enter
movs
imul
ret
enter
es
pop
mov
jg
sbb
xchg
addr16
add
aaa
jg
jne
cmp
mov
enter
fiadd
lahf
mov
idiv
add
aaa
xchg
xchg
jmp
daa
idiv
in
rol
cli
enter
mov
xchg
repnz
mov
jp
aaa
test
icebp
sbb
aaa
dec
mov
movs
jne
xchg
jecxz
add
fild
jbe
jmp
jnp
add
retf
add
aaa
jg
mov
or
jg
test
inc
jbe
sbb
jns
icebp
cli
xchg
enter
mov
cmp
out
cmp
test
enter
das
jg
xchg
jae
mov
shl
cld
ffree
add
iret
add
das
jg
mov
data16
add
xchg
std
imul
mov
dec
jg
xchg
pop
in
aaa
jge
xor
fadd
pop
push
fdiv
hlt
or
xchg
addr16
je
aaa
jg
jmp
jae
add
aaa
pop
data16
hlt
or
xchg
addr16
mov
aaa
jg
shr
xor
jnp
add
enter
sub
jns
mov
cli
lods
repnz
mov
sub
daa
cmps
cmp
enter
sub
pop
jl
inc
aaa
repnz
stc
iret
add
aaa
cld
mov
sti
enter
cmp
add
enter
xor
hlt
or
xchg
addr16
sbb
jg
or
xchg
addr16
or
aaa
jg
shl
jns
mov
cmp
and
outs
ss
(bad)
fnsave
hlt
or
xchg
addr16
cmc
cwde
enter
cmp
or
repnz
stc
retf
add
loopne
jns
outs
idiv
std
iret
add
rcr
cli
mov
xchg
xor
jg
cli
add
movs
jne
adc
out
cmp
cmp
and
xchg
outs
adc
mov
xchg
enter
and
add
and
mov
xchg
pop
mov
inc
add
add
cli
enter
retf
add
cli
enter
rol
ret
xor
enter
enter
retf
add
or
xchg
addr16
add
aaa
jg
shl
cld
stc
iret
add
aaa
idiv
aad
add
enter
and
jns
mov
add
inc
fbld
cld
icebp
iret
add
rcr
cli
mov
xchg
icebp
iret
add
mov
sub
pop
ins
jns
mov
sub
mov
add
dec
es
mov
das
adc
enter
inc
aas
jns
aaa
adc
jns
addr16
mov
aaa
jg
or
xchg
addr16
mov
xchg
cli
enter
mov
cli
jle
enter
fild
imul
jg
ins
ja
bound
aaa
es
stos
int
xchg
and
(bad)
xor
mov
(bad)
sbb
aaa
jg
mov
jg
push
popa
sub
xor
ds
jne
adc
aaa
xchg
ins
pop
aaa
jg
adc
or
adc
jg
add
sub
push
cmps
lock
mov
loopne
add
jbe
in
add
retf
add
aaa
xchg
and
aaa
jg
cli
aaa
jg
ins
cmps
fidivr
add
aaa
xchg
dec
adc
jg
in
sub
jns
mov
mov
jns
mov
xchg
cli
enter
aas
xchg
mov
aaa
jg
add
out
fadd
repnz
mov
add
enter
or
cld
sbb
jg
xchg
or
inc
aaa
ja
and
cmp
jne
clc
(bad)
ins
inc
jns
(bad)
ins
add
push
outs
sub
js
cld
sub
mov
es
cmp
add
enter
fist
ins
add
adc
addr16
cs
rcl
sbb
mov
aad
idiv
idiv
add
enter
adc
lds
jg
sbb
pop
adc
jg
mov
mov
xchg
icebp
cli
xlat
call
mov
xchg
cli
enter
xchg
cmp
cmp
enter
xor
add
xchg
xchg
xchg
addr16
mov
add
aaa
repnz
cmps
fild
mov
pushf
and
fcom
lock
mov
sub
enter
mov
mov
jbe
aaa
pop
(bad)
fnsave
adc
icebp
cmps
cmp
aaa
xchg
in
aaa
jg
fld
cmps
lock
mov
xor
xor
jns
aaa
mov
mov
aaa
pop
jmp
ret
out
cmp
cmp
aaa
repnz
add
scas
inc
aaa
(bad)
fs
xchg
pop
rcr
jne
adc
icebp
cmps
cmp
aaa
xchg
inc
push
aaa
jg
fld
cmps
lock
mov
xor
mov
cmp
aaa
mov
mov
aaa
pop
jmp
ret
out
cmp
cmp
aaa
cld
mov
call
icebp
test
jns
aaa
mov
mov
dec
mov
outs
aaa
adc
jns
aaa
jg
inc
pop
jg
inc
aaa
xchg
hlt
or
jg
inc
adc
push
(bad)
jbe
aaa
mov
jns
mov
cli
int3
jmp
jns
mov
cmp
enter
ss
cld
pop
jg
jo
sub
mov
sub
or
jg
add
pop
jge
cmc
xlat
cmp
xchg
mov
jb
xchg
aaa
jg
inc
(bad)
das
hlt
add
adc
aaa
jg
mov
mov
inc
mov
js
inc
xchg
add
repnz
xchg
or
in
dec
jo
add
(bad)
das
adc
pop
(bad)
cdq
inc
aaa
or
adc
mov
out
cli
int
enter
adc
jo
xchg
mov
aaa
jg
add
movs
cmp
out
jle
mov
fimul
jbe
lock
sti
bnd
dec
aas
jns
jb
adc
aaa
xchg
enter
lock
jecxz
mov
ins
xor
jns
pop
jg
lods
cmp
mov
mov
add
mov
jns
mov
dec
jns
rcr
mov
xor
lock
push
aaa
jg
ret
jns
aaa
jg
inc
(bad)
jg
add
out
idiv
in
inc
jo
add
add
cmp
pop
jg
add
pop
jg
iret
aaa
pop
cwde
fidiv
adc
in
cmp
pushf
or
jg
add
hlt
jmp
jne
adc
cmp
outs
aaa
xchg
arpl
xor
inc
add
sbb
in
fnsave
xchg
icebp
cmp
ins
dec
cmps
cmp
aaa
jg
sbb
or
jg
cdq
cmp
outs
ss
xchg
lock
aad
enter
aaa
jg
fstp
cmps
lock
mov
sub
mov
xchg
cli
enter
cmp
add
aaa
pop
js
aaa
call
xchg
addr16
inc
js
and
cmp
cmp
in
adc
xchg
mov
popa
pop
aaa
jg
sbb
jns
aaa
pop
mov
ja
adc
cmp
push
fistp
cld
lods
fld
adc
aaa
adc
mov
aaa
jg
in
je
jns
pop
jg
icebp
ss
outs
or
jns
add
jns
fsub
inc
shr
xchg
xchg
cmp
mov
push
mov
loope
xchg
call
add
mov
push
ja
aaa
jbe
jo
and
pop
(bad)
mov
pushf
test
inc
jnp
aaa
sub
push
mov
and
loop
cmp
or
js
aaa
add
iret
jge
sbb
jno
aaa
inc
push
adc
js
aaa
or
es
add
aaa
jg
cmp
mov
js
aaa
xchg
push
or
pop
retf
cmp
aaa
jg
ins
ret
add
jne
xchg
sbb
add
enter
iret
idiv
add
enter
rol
lock
xchg
mov
sub
sbb
or
jg
lds
sti
cld
add
repz
xchg
ds
cld
jae
add
mov
adc
add
mov
push
in
ror
xchg
or
mov
test
enter
retf
xchg
jnp
nop
out
xchg
sbb
mov
enter
inc
dec
adc
cli
cdq
clc
enter
out
add
retf
cs
test
enter
pop
jg
xor
cmp
aaa
test
or
int
aaa
jg
and
fcom
mov
jg
std
push
xchg
ret
sbb
test
bswap
inc
aaa
jg
or
dec
adc
fadd
or
mov
jle
aaa
or
jns
outs
cdq
xchg
outs
xchg
xor
aaa
jg
std
push
xchg
ret
out
aaa
inc
cmp
cmp
dec
add
jg
add
aaa
xchg
push
add
jg
add
jb
or
enter
aam
jns
mov
cli
xchg
clc
enter
fidivr
add
mov
cmp
jb
jns
or
jmp
inc
or
or
cmp
dec
pushf
jbe
or
cwde
jbe
or
cmps
jne
or
movs
jne
or
cmps
jne
or
call
ins
call
jns
pop
jg
jo
xchg
int3
or
jg
add
xchg
or
add
adc
jne
or
pushf
jbe
or
pop
iret
imul
aaa
pop
xchg
enter
daa
xchg
or
aaa
jg
ret
jns
mov
mov
xchg
jg
sub
xchg
addr16
adc
aaa
jg
adc
xchg
fiadd
add
iret
idiv
add
enter
add
mov
aaa
jg
mov
aaa
or
aaa
adc
cmp
cmp
jns
add
pushf
getsec
jg
(bad)
jg
(bad)
mov
xchg
enter
retf
ret
mov
test
enter
inc
retf
cmp
aaa
jg
ins
enter
mov
sub
add
fadd
xchg
adc
aaa
jg
mov
add
add
xor
daa
in
jg
cwde
retf
cli
fs
test
cmp
cli
aaa
jg
and
pop
dec
mov
in
cwde
jne
add
jne
xchg
pop
cmp
jp
add
aaa
mov
cli
enter
mov
xchg
enter
mov
fnsave
hlt
add
xchg
addr16
adc
aaa
jg
shl
xchg
retf
cli
or
aas
jns
in
jns
mov
test
enter
pop
adc
ja
jne
adc
aaa
or
jns
fdiv
add
aaa
repnz
clc
leave
add
or
jo
cld
adc
loopne
jns
aaa
xchg
jo
aaa
jg
xor
jmp
aaa
xchg
(bad)
add
jg
or
xchg
aaa
xchg
inc
or
xor
xor
dec
jns
inc
inc
jnp
adc
sahf
shl
adc
aaa
or
jns
inc
jbe
add
aaa
(bad)
cld
stc
leave
add
enter
inc
xabort
jle
jns
mov
sub
mov
test
enter
out
cmp
test
enter
cmp
jns
rep
adc
aaa
jg
mov
das
xchg
mov
cmp
aaa
inc
clc
leave
add
pop
jg
ret
jns
aaa
xchg
sub
jg
xor
xor
aaa
jg
or
xchg
addr16
hlt
retf
push
pop
push
mov
hlt
retf
push
fbld
add
pop
cmp
repnz
clc
leave
add
jbe
xchg
cmp
add
pop
jg
add
aaa
adc
jns
enter
jbe
xchg
cdq
aas
jg
in
mov
mov
or
xchg
addr16
hlt
retf
push
pop
(bad)
hlt
retf
push
(bad)
jae
aaa
cld
mov
add
leave
add
jbe
xchg
sbb
jg
test
jg
and
pop
adc
inc
aaa
adc
jns
enter
jbe
xchg
xor
jg
in
sbb
mov
cmp
enter
ss
cld
mov
jp
pop
adc
push
shl
adc
aaa
or
jns
enter
fiadd
cld
dec
add
mov
xchg
enter
retf
cli
or
add
inc
pop
and
pop
push
scas
inc
aaa
adc
jns
enter
jbe
xchg
lds
jg
in
mov
add
enter
mov
xchg
enter
mov
mov
mov
das
hlt
add
xchg
addr16
push
fnsave
hlt
add
xchg
addr16
mov
shl
xchg
retf
cli
or
ds
sbb
add
enter
pop
adc
push
add
aaa
or
jns
jo
jns
fidivr
jnp
aaa
mov
xchg
mov
xchg
enter
retf
cli
or
add
inc
pop
and
pop
xchg
scas
inc
aaa
adc
jns
enter
jbe
xchg
or
ss
add
enter
mov
cld
mov
ja
inc
add
or
sti
enter
inc
xlat
clc
jmp
test
enter
mov
test
enter
out
cmp
test
enter
aas
jg
xchg
outs
shr
jg
repnz
cld
loope
add
enter
aaa
adc
jns
aaa
pop
jns
aaa
aas
adc
ds
mov
jns
mov
adc
pop
jg
add
enter
xor
test
bswap
inc
aaa
jg
inc
mov
jg
int
aas
stc
cmp
jg
cld
mov
jmp
pop
dec
loopne
aaa
or
leave
add
pop
jg
sbb
xchg
addr16
cmp
enter
xor
mov
cld
mov
ja
inc
add
or
jmp
addr16
retf
push
enter
enter
xor
outs
aaa
repnz
jmp
pop
jge
cmc
xlat
cmp
xchg
enter
aaa
jg
mov
add
inc
xchg
ds
pushf
jns
add
pop
jnp
add
aaa
jg
ins
pop
out
cmp
aaa
idiv
cmc
leave
add
lock
jns
or
add
jg
or
mov
inc
mov
js
inc
xchg
(bad)
pop
jg
nop
fild
adc
or
add
jg
add
enter
ss
xchg
shl
xchg
fild
xor
pop
push
aaa
jg
add
cmp
pop
jnp
add
int
aaa
pop
add
jne
adc
cmp
jns
(bad)
cmc
cli
enter
pop
jp
xor
loopne
add
aaa
test
or
or
inc
jae
jo
xchg
pushf
add
jg
pop
ins
mov
adc
mov
jne
popa
sub
jo
sar
ss
ret
jne
aaa
jle
add
aaa
jg
js
jbe
xor
jns
or
std
movs
jne
or
enter
jbe
xchg
movs
xor
test
test
in
stos
ds
cmp
dec
test
jnp
add
jne
or
enter
jbe
xchg
jno
jg
add
inc
aaa
or
add
inc
aaa
xchg
sbb
aaa
jg
xor
jmp
pop
loopne
add
aaa
test
mov
loopne
add
pop
loopne
add
aaa
inc
dec
and
and
inc
jne
cmp
xchg
(bad)
cmp
aaa
inc
dec
and
adc
cmp
xchg
mov
cmp
aaa
xchg
jne
xor
rcr
xor
inc
dec
in
stos
ds
xor
fs
add
fadd
or
sub
inc
aaa
test
add
inc
aaa
or
sub
inc
aaa
inc
dec
sbb
hlt
fs
add
inc
aaa
or
sub
fadd
inc
dec
and
xor
sub
sti
fadd
or
sub
inc
aaa
jbe
jno
or
or
inc
jae
push
fisttp
jge
aaa
xchg
jg
iret
push
or
jg
cli
adc
inc
aaa
out
jmp
cli
adc
inc
aaa
out
jmp
cli
adc
inc
aaa
out
jmp
cli
adc
inc
aaa
out
jmp
cli
adc
inc
aaa
out
jmp
cli
adc
inc
aaa
out
jmp
cli
adc
inc
aaa
out
jmp
cli
adc
inc
aaa
out
jmp
push
mov
sar
idiv
es
pop
lock
ja
xchg
push
xor
xchg
ja
inc
retf
jbe
jno
idiv
test
pop
or
or
jp
std
pop
or
mov
xor
and
aaa
adc
sub
jno
xchg
push
xchg
jns
aaa
jg
add
xor
add
fcom
xor
xchg
aaa
jg
mov
jno
test
(bad)
inc
ror
mov
jno
mov
fucomi
and
cmp
add
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
mov
out
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
inc
aaa
out
jmp
cli
adc
inc
aaa
out
jmp
cli
adc
inc
aaa
out
jmp
cli
adc
inc
aaa
out
jmp
cli
adc
inc
aaa
out
jmp
cli
adc
inc
aaa
out
jmp
cli
adc
inc
aaa
out
jmp
cli
adc
inc
aaa
out
jmp
cli
adc
inc
aaa
out
jmp
cli
adc
inc
aaa
out
jmp
cli
adc
inc
aaa
out
jmp
cli
adc
inc
aaa
out
jmp
cli
adc
inc
aaa
out
jmp
cli
adc
inc
aaa
out
jmp
cli
adc
inc
aaa
out
jmp
cli
adc
inc
aaa
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
lea
out
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
cli
adc
jmp
