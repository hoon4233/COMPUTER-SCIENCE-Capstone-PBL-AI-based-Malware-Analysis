push
push
push
call
jmp
inc
sub
sub
dec
dec
push
inc
xor
and
jo
jb
addr16
cmp
and
push
inc
push
inc
and
arpl
sub
inc
ins
ins
and
addr16
gs
jb
gs
and
gs
jae
outs
outs
cmp
and
add
dec
push
xor
add
adc
add
xchg
iret
sub
int3
int3
int3
int3
int3
int3
int3
int3
inc
xor
adc
add
add
add
add
add
add
add
inc
xor
adc
add
xchg
aaa
push
add
add
add
inc
adc
pavgb
sbb
cmp
(bad)
ror
cmp
add
mov
cmc
call
int
push
int
mov
sub
jns
hlt
movs
and
pop
mov
in
aad
xor
sbb
and
(bad)
mov
cmc
lds
pop
imul
jge
xchg
push
stc
sbb
cbw
push
fst
nop
sub
mov
addr16
xlat
or
mov
pop
shl
mov
imul
jns
mov
ja
inc
xor
inc
xchg
sahf
xor
mov
pop
fisttp
loopne
pop
out
leave
div
mov
xchg
pop
cmp
js
(bad)
out
jp
std
test
sbb
out
cmp
and
les
add
add
add
add
add
sahf
xor
add
popf
jg
push
aad
scas
test
rol
mov
pop
add
leave
inc
or
cmp
push
push
test
sub
mov
adc
push
stos
imul
(bad)
sub
xchg
(bad)
mov
(bad)
xchg
loop
mov
dec
in
js
xor
jae
xchg
xchg
sti
mov
cwde
fcmovbe
sahf
jnp
neg
aas
cmp
pop
(bad)
call
xlat
pop
sti
mov
jmp
mov
pushf
push
ins
dec
lea
mov
(bad)
cmp
pop
loope
push
retfw
jge
das
(bad)
adc
mov
outs
push
les
sub
cmp
fnsave
pop
iret
(bad)
adc
ret
int
and
jb
push
jle
and
call
mov
ds
cs
mov
pop
mov
cmp
xchg
(bad)
pop
sahf
jbe
push
stos
push
out
jcxz
aam
jp
ds
mov
pop
jp
or
pop
jp
les
xchg
and
cmp
div
cmp
adc
jle
loope
push
push
jns
sbb
jmp
inc
lea
out
cmps
cmp
jmp
out
fdiv
iret
adc
imul
jmp
jl
fwait
mov
rcl
ja
loop
aaa
or
sti
dec
dec
movs
pop
idiv
cmp
mov
popf
(bad)
jb
out
cmp
(bad)
imul
jecxz
cmp
mov
je
jge
jno
cdq
cmp
sar
adc
data16
fimul
(bad)
pop
int3
mov
jno
gs
imul
movs
movs
push
dec
jae
push
and
inc
pop
xchg
daa
test
(bad)
xor
mov
xchg
je
sar
inc
pushf
loope
pop
nop
mov
sbb
dec
movs
jge
jno
dec
add
rcr
cmp
dec
pop
inc
jp
ror
xchg
fisttp
movs
push
nop
mov
popf
mov
imul
sbb
mov
imul
push
imul
popf
pop
jno
inc
call
out
xchg
jb
mov
gs
mov
fild
lahf
imul
pop
fsubr
adc
iret
ret
iret
ret
into
push
xchg
pop
sbb
shl
(bad)
adc
add
push
mov
cmp
pop
(bad)
and
cmc
pusha
add
sub
lods
mov
in
mov
push
mov
sbb
or
pushf
nop
ret
pop
aad
adc
rcr
daa
mov
push
mov
sbb
add
cld
lds
sub
jl
imul
push
mov
mov
jbe
data16
(bad)
hlt
shr
call
sbb
lock
cli
push
(bad)
fs
and
inc
dec
scas
jbe
inc
sti
cmp
or
xor
out
imul
stos
mov
sub
push
mov
add
psraw
aad
push
push
stos
xor
(bad)
lea
jge
cld
jmp
jbe
push
es
or
or
inc
push
pushf
ja
(bad)
xchg
dec
pop
jo
ret
cmps
lahf
jno
mov
(bad)
in
(bad)
jge
cld
movs
retf
mov
das
pop
mov
mov
in
push
lods
mov
mov
jmp
pop
fistp
(bad)
jg
dec
data16
out
jg
dec
out
test
cmp
cmp
outs
in
js
cmp
inc
loope
mov
inc
lea
push
cmp
fdivr
loopne
ja
mov
xor
xchg
jne
fxtract
sbb
retf
addr16
xchg
xchg
dec
fnsave
cmc
mov
xlat
dec
jae
cli
fsub
mov
xlat
xor
push
scas
jge
fwait
adc
cwde
das
das
out
(bad)
stc
cld
xor
int3
aaa
sub
dec
outs
pushf
outs
imul
mov
repz
xchg
cmps
mov
xchg
jecxz
jecxz
add
mov
(bad)
into
int
pop
popa
mov
sub
add
fadd
adc
sahf
or
pusha
or
pusha
or
pusha
or
pop
or
cmc
adc
mov
inc
imul
in
fnsave
push
fs
int3
xor
xchg
ins
jae
fsubp
mov
mov
xchg
leave
mov
fbstp
inc
xchg
sbb
iret
lea
dec
inc
(bad)
dec
add
shl
loop
imul
fldcw
jns
xor
xor
repz
into
mov
in
(bad)
stc
mov
push
dec
stc
out
scas
in
adc
xchg
mov
movs
outs
fidiv
jae
mov
cmp
repz
mov
jmp
aaa
(bad)
aaa
inc
mov
push
test
jmp
dec
out
sub
fcmovu
int
movs
jae
inc
ds
lods
je
lods
je
lods
xor
jae
ds
pop
pop
jns
cmp
xchg
xchg
into
stc
sar
jge
popa
data16
int3
(bad)
test
pop
data16
dec
xlat
push
push
ins
cdq
mov
sbb
fnsave
jp
fldcw
int
mov
stos
loope
jmp
hlt
lock
out
cmps
fwait
outs
test
(bad)
stc
mov
scas
or
mov
sub
fstp
aas
push
jns
popf
jno
mov
inc
sbb
(bad)
mov
jp
add
push
ins
in
fs
xor
dec
add
cdq
lods
aas
jae
cdq
jp
cdq
jp
cdq
jp
cdq
jp
into
cs
add
mov
aam
int
jmp
aam
int
jmp
aam
int
jmp
stos
mov
xchg
sub
mov
cdq
in
lock
jbe
cmp
xchg
int
and
je
cmp
xchg
sub
mov
xor
icebp
cdq
ins
xor
int3
fs
gs
cdq
ins
imul
pushf
lods
into
xchg
imul
sar
out
gs
int
jmp
sub
fstp
outs
jns
mov
cmps
jb
push
fld
dec
repnz
out
es
ret
fsub
stos
into
shl
mov
test
inc
xchg
cmp
aad
pop
jmp
push
xor
push
mov
(bad)
imul
sar
fisubr
xor
repnz
lahf
arpl
repz
pop
mov
cmp
ds
out
shl
ds
iret
cmps
std
stc
lods
ds
cmps
dec
out
sar
je
ds
scas
neg
cmp
xchg
arpl
mov
jbe
mov
sub
iret
fisubr
xor
pop
jg
push
xchg
out
xor
pop
jmp
(bad)
imul
in
push
cmp
sbb
cmp
push
pop
push
(bad)
push
pusha
test
pop
mov
push
stos
pop
mov
mov
xor
mov
push
ins
push
xchg
mov
inc
cmp
xor
mov
mov
mov
and
cmps
clc
(bad)
jo
test
aas
bound
pop
ja
push
cmc
add
xchg
test
into
aaa
cmp
repz
mov
and
or
sbb
lds
(bad)
dec
out
dec
stos
js
fdiv
jmp
xchg
js
ja
push
dec
mov
xchg
out
int
call
sbb
clc
cmp
mov
xor
xchg
icebp
pop
data16
gs
pop
mov
xchg
cdq
outs
cdq
sbb
pop
sub
call
movs
outs
jp
jb
ror
imul
fst
push
cmp
jmp
repz
fmul
aaa
sub
dec
out
sar
hlt
cmp
rol
out
pop
lahf
daa
jge
sahf
hlt
icebp
jns
(bad)
out
fisub
popf
dec
mov
addr16
cmp
into
or
in
lahf
xchg
daa
jge
sahf
hlt
xor
(bad)
cmp
popf
or
dec
jmp
call
into
dec
dec
out
cmps
jae
sar
cmp
and
dec
out
cmps
jae
cmps
jae
jmp
loope
fcom
jmp
cmp
cmp
daa
popf
stos
mov
data16
jnp
(bad)
mov
xchg
aaa
out
(bad)
stc
stos
xchg
iret
pop
ds
pop
ds
mov
inc
into
repnz
lahf
loope
xor
mov
loopne
daa
push
mov
xor
inc
pusha
cmp
add
pusha
adc
or
push
mov
jecxz
adc
shl
dec
rol
inc
adc
pop
add
imul
int3
add
sbb
push
pop
inc
or
cmp
int3
add
push
int3
add
or
or
cs
or
and
pusha
cmp
pushf
add
adc
jo
mov
push
mov
pop
in
out
sti
jns
jle
mov
pop
ins
xchg
mov
int
clc
cmp
ins
pushf
(bad)
xor
sub
into
inc
mov
sbb
mov
cmp
lahf
ret
jmp
repnz
jl
loope
dec
jmp
(bad)
xchg
fwait
jp
dec
mov
enter
xchg
mul
out
mov
xor
pop
fwait
stc
mov
inc
pop
jne
cli
sbb
rcl
dec
mov
int
inc
loop
push
shl
push
jle
or
out
sbb
ret
bnd
fld
div
inc
loope
mov
iret
jno
sub
(bad)
repnz
loopne
mov
ror
mov
xchg
out
sub
ds
fbld
fisttp
inc
mov
xchg
jl
pop
jl
sti
sbb
(bad)
mov
lea
sub
jle
pop
mov
(bad)
gs
iret
(bad)
jmp
jbe
loope
inc
out
out
mov
mov
jno
jge
fistp
pushf
repz
loope
ds
jg
das
nop
out
xchg
jl
jge
dec
pop
and
add
cli
test
jl
jle
cld
jp
xor
mov
sub
pop
stc
(bad)
out
iret
ja
call
adc
xchg
bound
sbb
stos
jbe
sub
or
leave
iret
xchg
xadd
cmp
sub
cld
sahf
out
dec
mov
bnd
outs
jo
mov
cmp
dec
(bad)
jns
jl
sbb
push
stc
iret
pop
jnp
jne
push
jle
add
xchg
out
test
pop
enter
loopne
rol
call
(bad)
in
or
fsubr
jle
nop
std
pop
or
in
jbe
das
pusha
pop
mov
stos
mov
pop
in
mov
sti
adc
fild
lock
test
mov
jge
imul
jno
outs
jg
std
(bad)
and
aad
xchg
add
inc
cld
cs
jne
mov
pop
aaa
cwde
and
cld
es
cmp
pop
(bad)
mov
loop
xchg
jmp
hsubpd
cmova
push
cmp
sbb
shl
jge
mov
leave
outs
mov
or
xchg
jg
add
nop
fild
out
and
repnz
retf
(bad)
push
dec
jno
cld
jmp
fsubp
enter
fnstcw
pop
lods
mov
(bad)
cmp
lods
add
sahf
hlt
cli
pop
pop
xchg
xchg
call
jae
dec
mov
cs
cwde
sti
std
push
test
aaa
mov
sti
mov
cs
sti
xchg
sub
in
jle
xchg
std
jmp
(bad)
inc
sti
in
sbb
std
mov
cld
cmp
push
sub
int
or
idiv
sub
jb
add
out
mov
iret
popa
repnz
in
stc
arpl
dec
loopne
sar
cmp
jno
mov
inc
or
and
xchg
aas
pop
mov
pop
(bad)
jl
movs
jo
shr
sub
out
dec
out
repnz
in
loope
pop
mov
cmps
retf
mov
xchg
inc
cmp
push
jle
pop
sub
rcl
mov
retf
xor
(bad)
fild
pop
scas
add
outs
lock
fisttp
xlat
or
sbb
loopne
repnz
jne
imul
aas
sub
retf
jg
mov
sub
xlat
adc
stc
jo
cmp
adc
ds
repz
mov
pop
addps
jl
aad
xlat
add
jo
loopne
inc
jl
pop
sub
push
test
call
jo
loopne
mov
jl
mov
pop
push
out
mov
push
or
or
sub
inc
add
loop
push
stc
test
out
xchg
add
out
cmp
xchg
out
xchg
dec
mov
imul
loopne
test
scas
pop
jg
fild
call
push
mov
jl
stc
clc
stos
add
(bad)
(bad)
loope
or
scas
cli
jmp
loopne
int
out
pop
mov
(bad)
pop
cmp
mov
cmc
rep
push
push
iret
jle
jo
shr
sub
(bad)
in
mov
mov
pop
daa
push
sbb
hlt
jle
xlat
add
push
lock
jle
fsub
inc
sti
popf
mov
rcl
sete
xchg
sub
sbb
enter
out
inc
call
and
in
add
jne
inc
retf
jne
stos
in
xchg
fisttp
mov
pop
sub
mov
push
stc
jp
cmp
jne
cwde
cld
pop
mov
pop
mov
mov
adc
sbb
retf
in
shr
repnz
retf
aas
or
push
stc
cmc
jo
shl
mov
push
pop
cmps
jle
mov
pop
scas
imul
ror
cmp
fisttp
xlat
pop
outs
mov
pop
add
jbe
jl
pop
sub
icebp
fsubr
fisttp
or
out
mov
sub
lahf
or
sbb
leave
out
stc
push
(bad)
cmp
and
add
iret
scas
and
push
icebp
in
jg
mov
xchg
fnsetpm(287
jmp
or
in
in
loopne
mov
jae
pop
mov
jle
cld
bound
jb
cld
add
add
push
in
jo
push
pop
cmps
enter
cmp
inc
leave
xchg
enter
stc
and
xchg
aas
pop
add
push
std
mov
std
jo
push
stc
and
push
fsubr
cmp
cld
dec
stc
ins
je
ds
dec
in
loopne
cmp
(bad)
mov
pop
sub
mov
sub
push
ret
out
pop
mov
idiv
outs
retf
test
cmp
arpl
or
add
stc
dec
cmp
jge
repz
sbb
enter
in
rcl
mov
call
scas
push
cmp
idiv
or
sub
mov
js
(bad)
xlat
repnz
and
in
mov
pop
out
mov
mov
loop
inc
stc
add
xlat
cmp
cmp
mov
outs
(bad)
jmp
mov
mov
jge
mov
icebp
jl
in
or
mov
pop
sbb
fsubr
and
sub
pop
mov
sahf
xchg
lahf
sub
add
in
in
rcl
or
sub
pop
or
xchg
pop
sub
and
xor
jmp
mov
enter
retf
(bad)
adc
lods
cld
dec
stc
fnsave
cmp
retf
in
rcl
jo
jns
sbb
xlat
rcl
sub
mov
cmp
or
cmp
mov
(bad)
pop
cmp
repnz
jbe
test
daa
loope
mov
outs
fyl2xp1
ret
retf
out
inc
pop
xchg
dec
push
ficomp
jns
mov
inc
jle
jg
jl
sbb
inc
jle
jl
sbb
xchg
scas
xchg
fbstp
and
scas
in
nop
fild
pop
jle
sbb
dec
ds
inc
jbe
aaa
enter
mov
adc
jl
sbb
lods
cld
pop
stc
xor
xchg
xchg
pop
das
pop
add
ficom
and
xchg
dec
rcl
add
retf
outs
and
xchg
jg
jle
sbb
mov
jo
sub
rcl
cmp
mov
lahf
in
ficomp
dec
icebp
pop
stc
(bad)
in
clc
loope
cmp
mov
fs
jl
jle
sbb
mov
cmp
lahf
repnz
in
rcl
or
in
retf
enter
leave
out
mov
stc
xor
ja
xchg
mul
xchg
enter
jnp
sbb
mov
pop
and
cld
adc
pop
repnz
retf
enter
stc
inc
jo
inc
stc
mov
inc
repnz
pop
ret
xchg
aas
retf
outs
xchg
fistp
and
ds
push
stc
add
stc
mov
iret
in
jp
xchg
mov
pop
sbb
das
inc
fwait
sbb
jo
shl
out
inc
pop
fdivr
adc
mov
outs
test
pop
jo
daa
aas
pop
jle
sbb
xchg
das
xchg
scas
test
jns
xchg
in
loope
mov
loope
pop
jle
jl
sbb
nop
scas
nop
das
xchg
test
jae
mov
enter
in
cmp
jle
jg
cld
sahf
test
push
add
or
inc
repnz
loope
dec
stc
(bad)
jo
and
mov
mov
mov
mov
scas
xchg
pop
xchg
mov
jmp
std
loope
cmp
or
pop
jle
mov
sbb
movs
cwde
and
dec
xchg
jg
jle
sbb
and
aad
or
xchg
fild
adc
and
enter
add
xchg
fbld
in
retf
aaa
rcl
and
retf
out
mov
and
enter
enter
in
and
repnz
repnz
fcomp
mov
add
in
in
shl
stc
leave
repnz
jo
pusha
mov
cmp
inc
mov
cdq
sub
push
jle
sbb
xchg
scas
xchg
pop
add
pop
call
lods
dec
xchg
enter
in
jo
ret
cld
sahf
cmp
sub
mov
das
lahf
and
pop
call
pop
call
(bad)
jmp
xlat
ret
xchg
and
and
call
pop
call
(bad)
jmp
stos
call
in
loope
xor
jmp
xor
(bad)
sbb
outs
xchg
fbstp
cld
xor
mov
cmp
mov
xchg
jecxz
pop
xchg
out
and
enter
loopne
pop
(bad)
ins
stc
cmp
xchg
jg
fiadd
mov
enter
add
pop
aas
push
sbb
jae
adc
sar
mov
mov
cs
xchg
lods
lahf
retf
out
xchg
jne
iret
in
ret
xchg
stc
(bad)
iret
in
loope
leave
(bad)
iret
in
loope
sub
iret
in
ret
xchg
add
rcl
xchg
or
sbb
imul
dec
aam
mov
(bad)
mov
ret
cli
mov
sub
mov
outs
in
add
pop
aas
xchg
fisttp
inc
(bad)
(bad)
iret
in
loopne
lods
lahf
retf
outs
and
pop
aas
xchg
fild
inc
jmp
lahf
mov
outs
in
add
mov
(bad)
pop
mov
sbb
ins
repz
(bad)
out
stc
mov
leave
mov
fisubr
push
xor
cld
das
fild
inc
into
mov
pop
jle
sbb
mov
jo
jl
jmp
ss
test
sbb
bnd
repnz
jo
mov
jo
rol
test
pop
cmp
lea
stc
xor
repnz
sbb
repnz
cmp
mov
mov
popa
jecxz
or
rol
ins
jo
pusha
movs
jl
mov
and
cmp
push
mov
pop
jle
fsub
mov
fmul
pop
scas
or
jb
das
mov
sub
scas
push
in
inc
(bad)
cmp
jle
mov
jle
jl
sbb
push
dec
stc
in
jo
loopne
stc
sti
in
ds
dec
shl
jno
aas
jp
into
pop
gs
in
idiv
jo
loopne
push
idiv
outs
jmp
jo
loopne
push
idiv
jo
mov
in
xchg
outs
test
pop
repz
mov
mov
ret
push
sub
mov
dec
xchg
out
leave
test
pop
stc
in
repnz
dec
enter
add
mov
out
xchg
out
test
or
in
push
xlat
add
in
push
xlat
or
std
inc
mov
enter
add
add
mov
push
in
mov
mov
jecxz
mov
jp
outs
fbstp
jns
add
jp
mov
ror
enter
retf
xchg
push
sbb
jo
loopne
stc
sbb
dec
loope
loopne
stc
pop
repnz
xchg
shr
lds
(bad)
or
fdivr
imul
mov
mov
cmp
jl
jle
sbb
xchg
aas
dec
mov
out
push
jle
sbb
mov
addr16
loope
in
repnz
mov
and
in
and
add
nop
pop
sub
jg
jl
mov
and
sbb
xlat
icebp
pop
and
push
or
(bad)
jne
pop
mov
and
jl
scas
sbb
sub
mov
fdivr
cmp
sti
in
xchg
out
sbb
out
xchg
fbld
fild
imul
js
(bad)
imul
cmps
cld
jbe
push
mov
das
retf
aaa
shr
in
add
sub
pusha
xchg
cld
cmp
lock
pmulhw
jo
aaa
jecxz
mov
out
mov
jae
jl
pop
sub
xchg
das
xchg
outs
sub
retf
(bad)
xchg
scas
xchg
aas
push
jg
sub
std
dec
xchg
pop
xchg
inc
push
iret
add
jne
fs
ret
adc
dec
cmp
cwde
into
imul
(bad)
sub
sbb
xchg
aas
inc
jle
dec
xchg
adc
enter
and
cs
and
retf
mov
pop
fisttp
xchg
mov
sbb
mov
in
sbb
stos
in
ret
stc
jmp
xlat
ret
xchg
lahf
enter
push
mov
push
(bad)
outs
stc
cmp
pop
(bad)
jnp
mov
enter
repnz
enter
pop
sti
ret
xchg
addr16
xchg
xadd
das
xchg
mov
loopne
rep
fnstenv
inc
cmp
jle
jmp
jae
aas
retf
out
test
push
mov
out
sub
test
mov
or
fisttp
inc
pop
nop
aas
inc
mov
addr16
scas
xchg
das
retf
pop
pop
inc
jle
pop
sub
and
mov
fldcw
pop
xchg
scas
xchg
das
retf
lahf
sub
inc
jle
jg
jl
sbb
inc
(bad)
adc
leave
jo
dec
(bad)
imul
cmp
imul
enter
stos
repnz
leave
out
mov
stc
frstpm(287
xchg
jo
xchg
cld
jge
or
repnz
xchg
jnp
enter
enter
(bad)
aas
sub
repnz
ficom
sbb
psubw
in
loope
fwait
repnz
enter
mov
xor
popf
cld
jle
jg
bnd
xor
cld
sbb
adc
xchg
das
xchg
test
leave
out
mov
repnz
out
and
enter
sbb
push
(bad)
push
cmp
inc
stc
shl
cmp
enter
push
mov
(bad)
jl
jne
fs
dec
sub
enter
leave
das
and
leave
scas
xchg
movnti
scas
test
jnp
mov
dec
cs
and
outs
stc
out
retf
in
fstp
mov
mov
adc
adc
(bad)
jge
jle
sbb
dec
(bad)
daa
repnz
loopne
lahf
jne
jp
mov
fbld
mov
(bad)
repz
sbb
cld
push
mov
mov
jo
shl
imul
pop
scas
sbb
mov
inc
push
add
repnz
stos
lahf
jne
sbb
aaa
lods
jge
inc
push
clc
in
das
fisttp
xchg
add
rcl
loopne
mov
fs
or
xchg
fild
inc
or
aas
mov
push
inc
or
jmp
add
xchg
out
xchg
outs
test
inc
repnz
adc
rcl
cmp
inc
jle
jl
sbb
sub
push
add
loopne
xchg
adc
in
retf
out
xchg
mov
loopne
sbb
add
jnp
dec
mov
and
pop
jo
lods
cld
xor
lea
pushf
cld
dec
stc
push
cmp
pop
(bad)
push
stc
push
jo
sub
jl
sbb
and
inc
jle
sbb
sub
jl
sbb
and
cmp
enter
loopne
test
mov
cld
sub
dec
cmp
cld
imul
jg
cld
push
cmp
cld
pop
repnz
jo
pusha
stc
jae
aaa
rcl
xchg
xchg
in
xchg
pop
add
enter
xchg
push
in
xchg
scas
test
shl
das
xchg
scas
and
repnz
enter
jmp
loopne
or
scas
retf
ss
bound
jo
pop
(bad)
push
ins
jo
xchg
cld
aaa
in
rcl
rcl
add
in
xchg
pop
or
xchg
mov
cmp
stc
mov
mov
dec
stc
jnp
mov
enter
enter
sub
out
leave
lfs
xchg
jg
fiadd
mov
(bad)
in
add
xchg
jg
(bad)
sbb
dec
sbb
in
stc
cmps
ins
fadd
xchg
mov
and
leave
aas
jcxz
mov
push
ja
in
stc
pop
in
loope
pop
(bad)
and
pop
(bad)
adc
inc
(bad)
xor
movs
mov
call
out
cmp
jmp
mov
rcl
and
frndint
das
fild
inc
jmp
out
cld
das
pop
xchg
daa
(bad)
das
mov
repz
or
scas
jbe
and
add
(bad)
das
out
xchg
cmps
frndint
das
aas
jo
and
aam
jg
cmp
int
repnz
enter
retf
ja
xchg
xor
xchg
fisttp
inc
push
frndint
das
fild
inc
bound
dec
scas
and
mov
pop
ds
addr16
outs
in
add
ins
(bad)
xchg
lahf
or
add
sub
(bad)
das
mov
repz
ins
repz
mov
push
popf
jo
loopne
ss
aaa
ret
xchg
jae
(bad)
mov
test
or
ret
xchg
rep
(bad)
xchg
scas
test
lahf
mov
pop
mov
repz
mov
(bad)
add
repz
jne
adc
mov
(bad)
add
outs
repz
mov
pop
jle
sbb
shl
stc
ss
inc
fwait
jmp
xlat
rcl
or
mov
dec
xchg
rcl
sar
inc
call
mov
jne
out
in
jo
(bad)
stc
ss
in
jo
retf
bnd
jg
and
push
inc
push
leave
aas
and
fbld
add
cs
jg
jle
pop
adc
out
jecxz
(bad)
in
jo
fadd
stos
popf
das
pushf
subps
call
fild
in
lods
lahf
ret
ins
add
fbld
or
xchg
pop
pop
inc
mov
or
nop
fbld
sbb
scas
and
repnz
pop
stc
jle
adc
dec
in
mov
mov
idiv
repz
sbb
into
stos
out
bnd
punpckhbw
mov
iret
(bad)
loopne
sub
in
mov
jne
inc
sbb
add
adc
xlat
cmp
pop
push
mov
inc
aaa
call
cmovbe
mov
xchg
je
lods
push
cmp
mov
outs
adc
adc
inc
and
push
loopne
adc
push
shl
mov
mov
pop
test
push
scas
or
rol
xor
rol
mov
rol
mov
pusha
jp
adc
add
outs
xor
push
or
pop
(bad)
aad
jecxz
inc
cdq
fidiv
in
pop
mov
mov
fnstcw
xchg
es
mov
add
pop
mov
sub
mov
jge
push
xor
mov
add
inc
pop
push
cli
inc
push
push
adc
in
and
mov
inc
cdq
sub
test
sub
add
xchg
out
(bad)
jns
pusha
aas
dec
sub
xchg
jns
adc
inc
js
xor
inc
pop
(bad)
jb
nop
inc
cmp
in
out
sub
adc
jbe
scas
(bad)
ss
jmp
dec
loopne
pushf
das
repnz
daa
loop
inc
loopne
pushf
daa
into
mov
mov
fisubr
ficom
lahf
daa
fnstenv
mov
out
push
mov
add
in
or
jge
mov
imul
dec
adc
in
inc
aas
jmp
outs
pop
gs
inc
pushf
pop
cmp
add
xchg
call
std
xor
jg
jo
(bad)
xchg
jmp
iret
jo
cmp
inc
aam
mov
(bad)
xchg
inc
pop
or
mov
push
or
sub
add
in
(bad)
stc
and
mov
inc
fimul
fidiv
xchg
add
mov
add
mul
jge
mov
scas
jno
jmp
inc
adc
cmp
aaa
add
cmp
sub
pop
nop
xchg
add
test
ins
fisttp
lods
mov
xchg
test
imul
pop
inc
sbb
inc
fiadd
mov
jnp
in
add
movs
dec
movs
and
jno
xchg
jecxz
push
nop
push
jno
adc
movs
or
push
pop
mov
xor
add
retf
loop
scas
outs
loopne
cld
cli
xchg
es
adc
jbe
sub
adc
jb
nop
add
mov
sar
or
inc
and
inc
add
test
ins
add
xchg
cmp
mov
gs
push
add
dec
mov
and
fldenv
cs
add
fdiv
mov
int
or
or
inc
add
mov
outs
outs
or
fdivr
aas
retf
pop
repnz
rol
inc
clc
push
cmp
(bad)
fsubr
add
or
lods
or
or
mov
inc
fucomip
push
or
mov
sub
inc
push
(bad)
dec
cmp
cmp
jmp
(bad)
call
mov
imul
jl
out
add
xor
cs
stc
and
xor
push
push
fcomp
ss
shl
rol
mov
repnz
cmp
popa
cld
mov
cs
ret
jge
mov
gs
pusha
sub
xchg
out
out
add
xor
cmp
inc
int3
add
jecxz
add
arpl
ins
ror
popa
sub
inc
or
mov
sbb
das
adc
addr16
fisub
mov
pop
std
jg
sti
lods
add
dec
cmp
jmp
mov
sbb
push
cmp
shl
rcl
pop
loopne
jo
jne
xlat
(bad)
in
pop
jo
sub
sahf
dec
ficomp
icebp
dec
sar
mov
je
xchg
or
inc
adc
call
fld
adc
data16
and
fisttp
or
cmc
add
cmp
xchg
pop
inc
fiadd
sub
aam
push
ror
call
iret
test
repz
aas
repnz
mov
cmc
mov
adc
ja
fisttp
xor
retf
mov
xor
mov
ret
jo
mov
adc
sub
call
(bad)
mov
add
pminsw
in
push
mov
imul
cmp
aam
xchg
dec
movs
dec
aam
dec
nop
xadd
xchg
jmp
mov
mov
cdq
mov
in
inc
sti
jo
gs
clc
inc
push
add
retf
shl
mov
mov
add
shl
cmp
mov
or
inc
jmp
jmp
std
adc
inc
sbb
call
sbb
popa
(bad)
dec
call
imul
pop
mov
(bad)
std
xor
push
in
lahf
idiv
mov
div
mov
arpl
repnz
hlt
mov
jns
mov
loop
ret
repz
ret
sahf
lods
cmp
arpl
xchg
fs
sbb
loopne
sar
jnp
dec
int
push
fcomp
mov
arpl
inc
mov
cmp
shr
jle
xor
dec
lds
std
(bad)
arpl
lahf
ins
jecxz
loop
mov
lds
(bad)
push
data16
js
mov
out
into
mov
jo
loope
in
mov
in
xchg
bound
(bad)
gs
fnstenv
(bad)
aad
popf
mov
jbe
div
xor
adc
xor
iret
jno
pusha
mov
stc
(bad)
bound
scas
add
cmp
aas
mov
sbb
movs
loop
mov
sbb
sub
or
arpl
push
in
leave
cwde
nop
jecxz
imul
inc
arpl
cmp
sbb
fidivr
lock
xor
sbb
push
pusha
sbb
cmc
xor
in
cmp
push
pop
jb
fsub
mov
out
xchg
jmp
scas
movs
mov
mov
arpl
in
pop
shl
scas
stos
mov
cmc
jne
jl
pop
(bad)
(bad)
fisttp
xlat
xlat
mov
out
mov
mov
mov
pop
lock
(bad)
sar
iret
mov
icebp
mov
inc
ds
mov
stc
jl
lahf
lds
jle
mov
sbb
and
int3
mov
in
cdq
setg
lock
lahf
pop
mov
sub
cmp
mov
fdiv
call
out
rcr
arpl
fisttp
cmp
add
mov
add
in
(bad)
mov
cmp
(bad)
mov
out
fisub
aas
icebp
mov
sahf
arpl
mov
mov
fcom
(bad)
pop
mov
(bad)
fadd
fmul
mov
push
icebp
jno
sbb
enter
pop
jecxz
(bad)
dec
mov
push
cmp
jno
jmp
mov
xor
pop
inc
pop
ja
jne
ins
imul
mov
scas
xor
cmc
jg
ins
test
mov
mov
mov
idiv
in
(bad)
pushf
fld
mov
ret
ds
(bad)
les
std
cdq
std
pushf
std
sar
sbb
cmps
lea
aaa
sbb
sbb
sbb
ss
ins
pushf
gs
sub
(bad)
and
std
fadd
push
inc
arpl
popf
shr
arpl
push
int
mov
sub
xor
mov
add
dec
pushf
stos
cmp
add
jmp
fadd
cmp
xlat
loopne
mov
sub
(bad)
popf
mov
xlat
pop
fmul
xor
js
(bad)
pop
cmps
(bad)
pop
out
scas
pop
cmp
imul
jae
out
mov
scas
sub
adc
repz
mul
and
into
fistp
pop
xchg
aad
xor
mov
pop
xor
addr16
cmp
(bad)
dec
mov
sbb
xor
xchg
jno
arpl
mov
mov
pop
xor
in
sub
or
inc
fdivrp
mov
fwait
aaa
call
arpl
ret
sbb
jmp
pop
mov
cmp
mov
lds
mov
mov
scas
inc
jns
in
mov
or
neg
je
jecxz
mov
pop
(bad)
jno
jecxz
int3
sahf
cmp
call
inc
scas
add
ja
gs
lods
cwde
xlat
loop
mov
mov
data16
sbb
cld
fldenv
ds
mov
sbb
xchg
xor
push
pop
iret
clc
mov
cld
shr
pop
wrmsr
xchg
pushf
push
in
ins
mov
xlat
sbb
pop
ja
call
push
fcomp
sub
loope
mov
imul
lds
(bad)
loop
sti
xor
jmp
sbb
sbb
sbb
xor
addr16
xchg
int
xor
lahf
adc
pop
ins
(bad)
out
cmp
jne
loop
xor
popa
jl
shl
fild
addr16
inc
jb
fisubr
std
pop
adc
aad
lahf
jmp
lods
std
jnp
in
jg
jnp
arpl
or
std
fsub
pop
aas
xchg
push
clc
sub
iret
sbb
sub
iret
sbb
pop
and
test
sub
mov
ja
leave
pop
mov
sub
mov
out
aad
lods
pop
iret
jb
retf
cmc
sub
pop
retf
repnz
add
mov
pop
mov
mov
ror
cmp
scas
icebp
mov
inc
repz
cdq
imul
loopne
call
xchg
stc
int3
sub
repz
arpl
in
mov
jno
jecxz
(bad)
fimul
xchg
scas
mov
mov
loope
xchg
add
neg
sti
ds
add
cdq
push
lahf
sahf
add
push
mov
dec
cmps
(bad)
cmp
(bad)
mov
push
xchg
(bad)
push
lea
mov
jge
jmp
pop
ret
jno
pop
(bad)
mov
mov
sbb
ss
cmps
(bad)
lea
imul
lods
sub
xchg
imul
es
in
rcl
mov
pop
stos
mov
lods
cmc
adc
fnstcw
nop
jmp
scas
inc
push
fild
(bad)
call
adc
jmp
ja
fimul
push
cmp
movs
adc
cdq
fbstp
mov
test
in
and
dec
std
int3
add
daa
inc
cld
(bad)
aad
add
popf
dec
loope
or
sub
or
outs
mov
add
std
mov
retf
inc
cmp
test
movs
xlat
stc
cmp
cmp
out
inc
adc
std
xor
cld
mov
int
or
lahf
adc
aas
xlat
adc
jecxz
xsaveopt
inc
add
imul
out
or
cmp
enter
push
out
sub
xor
cmp
js
cld
dec
mov
cmp
sti
fdivr
(bad)
push
shr
lods
xor
or
mov
ins
in
mov
jmp
jmp
out
bound
shr
call
pop
test
xchg
ss
(bad)
sbb
mov
std
inc
repnz
jmp
stos
ins
into
nop
aas
push
jmp
(bad)
or
jle
adc
xor
ins
and
mov
xor
int3
imul
out
push
iret
dec
cld
fnstsw
cld
jge
jp
mov
cmps
inc
sti
jnp
(bad)
jno
fisttp
jge
mov
mov
mov
mov
mul
daa
stc
mov
xchg
scas
iret
pop
add
adc
(bad)
cmps
cmc
jg
repz
cld
(bad)
cld
jmp
sub
in
in
cmp
dec
mov
std
fdivr
sbb
iret
mov
sti
test
xor
aaa
pop
(bad)
aas
sbb
sti
jb
loope
cs
pop
jle
jbe
sti
imul
mov
mov
je
into
inc
std
das
fnstsw
sti
neg
mov
movs
das
mov
mov
pop
je
pop
ret
sti
not
push
dec
mov
ret
pop
mov
imul
sbb
outs
shl
cmp
test
pop
jo
lahf
jo
or
out
clflush
std
mov
cld
mov
bound
ins
fninit
push
(bad)
(bad)
lods
cld
cmc
enter
and
jg
push
mov
push
(bad)
out
cld
sub
fwait
dec
call
add
inc
sub
lock
cmp
dec
sub
mov
inc
inc
sbb
mov
popf
fmul
and
pop
fmul
call
cdq
pop
and
mov
mov
das
mov
inc
fiadd
pop
shr
pop
jle
jecxz
mov
int
ja
or
in
inc
iret
pop
in
out
mov
fstp
xor
dec
std
lods
fsubr
mov
fnstcw
mov
out
cmp
jecxz
sub
jg
or
jae
out
inc
xchg
mov
push
pop
loop
add
cmp
jb
sbb
cld
popf
and
cmp
jmp
jne
push
je
xchg
stc
sti
jg
cmps
ja
out
imul
mov
cmp
sub
jmp
ficom
or
sti
push
aaa
or
retf
push
sub
in
mov
popf
(bad)
sar
cmp
(bad)
sub
dec
in
mov
mov
cmc
mov
pop
jmp
leave
sub
sub
xchg
fadd
sbb
pop
call
pop
cvtps2pd
cmp
or
and
or
ror
or
push
sbb
in
inc
cmp
jl
lock
jbe
add
push
or
add
sbb
mov
adc
sub
inc
int3
sti
cmps
pop
test
xchg
out
lds
imul
aas
push
mov
cwde
std
xor
lea
mov
test
jae
inc
jmp
aaa
aaa
xchg
dec
lahf
into
xchg
push
movs
repz
test
(bad)
jecxz
outs
fdivp
aam
xchg
outs
test
(bad)
out
aas
outs
fbstp
jmp
xchg
out
fcomp
fyl2xp1
std
addr16
mov
xchg
sub
adc
mov
scas
jl
xor
idiv
jmp
lock
sbb
sahf
or
xor
fdivr
inc
cmps
lahf
mov
in
mov
lahf
aas
imul
mov
rcl
jg
dec
scas
test
pop
push
mov
mov
inc
out
(bad)
std
movs
outs
outs
jg
cli
mov
sub
lock
xor
in
cmp
in
jl
xor
stc
sub
jp
les
lahf
mov
push
xrelease
sbb
jp
xor
out
aam
call
inc
jbe
lock
addr16
cli
shr
sbb
int3
xchg
arpl
imul
mov
iret
mov
out
lds
jge
xchg
pop
sti
loope
retf
pop
cld
(bad)
loopne
rcr
outs
call
aad
fnsave
add
sbb
and
pusha
push
mov
pop
int
mov
inc
es
adc
pop
adc
sub
imul
mov
fs
pusha
cs
ret
gs
jo
xor
push
(bad)
add
or
js
(bad)
lock
cmps
stos
das
iret
xor
retf
jnp
maskmovq
jmp
aam
test
neg
inc
dec
mov
jns
push
inc
mov
and
pop
sbb
or
imul
out
lock
lock
mov
ret
dec
les
mov
outs
mov
sar
outs
mov
sar
retf
fdivr
sub
fnsave
dec
and
jmp
pop
and
dec
pop
pop
fild
rep
and
addr16
push
add
int3
daa
cmp
(bad)
out
dec
mov
pop
ret
mov
sub
sub
aam
scas
jmp
retf
stos
cmps
imul
pusha
aad
shl
dec
xchg
fst
dec
push
fnsave
xor
fimul
movs
mov
inc
adc
(bad)
mov
xchg
(bad)
fmul
cmp
and
jecxz
cmp
cmp
ins
pushf
adc
das
xchg
xor
mov
xchg
mov
jg
(bad)
xchg
je
arpl
sti
les
jp
mov
stos
cmp
adc
clc
inc
stos
in
mov
(bad)
inc
retf
retf
sub
enter
or
adc
adc
add
add
add
adc
add
mov
add
mov
rol
sbb
push
lods
mov
inc
mov
mov
ss
push
mov
push
out
stos
or
(bad)
ins
sbb
cwde
arpl
jns
neg
hlt
(bad)
fnstcw
or
add
je
jne
mov
push
adc
push
repnz
ds
jns
and
mov
stc
movs
out
lahf
repz
out
out
out
out
ja
xchg
es
dec
iret
push
(bad)
sbb
dec
stos
mov
lock
pop
xchg
mov
fwait
lock
lods
mov
inc
cmp
mov
fs
aad
lods
retf
repz
sbb
cs
sbb
leave
and
mov
fcom
push
jge
fist
fs
push
lods
fwait
jmp
pop
mov
outs
(bad)
pop
fwait
sar
sti
cmp
test
addr16
mov
pop
(bad)
addr16
rcl
hlt
rol
std
adc
xor
dec
pop
inc
(bad)
mov
jnp
test
adc
jl
mov
push
dec
cmp
xor
mov
push
js
push
mov
popf
inc
adc
shl
in
(bad)
dec
cmps
xchg
fdiv
ds
scas
add
adc
mov
sbb
pop
mov
jnp
das
sub
push
push
xor
leave
sti
movq
int
mov
mov
gs
pop
idiv
ss
push
push
push
dec
add
arpl
fmul
jo
pop
out
inc
aas
mov
movs
aam
(bad)
cmp
sub
dec
mov
mov
jecxz
sbb
mov
je
add
(bad)
mov
sahf
call
dec
xchg
push
jae
fdivr
cmp
mov
shl
clc
addr16
xchg
sub
sub
cmp
mov
test
add
xchg
dec
sbb
lock
and
or
fadd
neg
lods
mov
in
shr
xor
jle
dec
lahf
sar
repz
scas
loop
jbe
add
push
in
mov
sbb
xor
xchg
mov
test
test
pop
imul
push
sbb
push
mov
mov
xlat
(bad)
aam
lods
repz
pusha
gs
aam
fisubr
scas
mov
movs
mov
sbb
call
cmps
push
adc
pop
push
pop
cmps
imul
(bad)
std
inc
mov
push
cmps
mov
clc
stos
shr
mov
(bad)
rol
ret
sti
out
pop
imul
jne
dec
arpl
(bad)
icebp
popf
inc
pop
push
sub
jl
dec
jns
jmp
xor
test
xchg
cmps
call
fdivp
mov
test
push
cmc
fwait
dec
pop
(bad)
xor
jmp
xchg
sbb
xchg
jbe
dec
fwait
outs
jo
xchg
daa
cmc
pusha
add
mov
fist
mov
fucom
sub
(bad)
jle
sub
repz
int
std
inc
pushf
push
jg
test
pop
rcr
aaa
loopne
sti
dec
dec
add
jnp
mov
cs
rcr
cmp
xor
hlt
mov
das
pop
lea
outs
daa
sub
cmp
cmp
adc
pop
pop
frstor
in
mov
xor
sbb
mov
sub
popa
dec
int3
xor
cmp
jbe
push
int3
sti
stos
cmp
and
loope
mov
arpl
jae
scas
in
(bad)
mov
push
and
mov
sub
sbb
in
mov
(bad)
addr16
shr
mov
neg
les
push
cmps
push
fwait
in
mov
adc
test
rcr
mov
lods
neg
popa
stos
sbb
xor
fidiv
dec
fbld
les
fcom
or
xchg
push
dec
xor
push
mov
or
jmp
push
data16
mov
stc
test
xchg
aad
fistp
cmp
daa
adc
bound
xchg
ja
jns
aad
(bad)
ja
pop
pop
lds
adc
in
icebp
inc
xor
shl
sahf
xchg
cmp
fld1
test
push
cmp
icebp
xor
shl
jno
pop
out
xchg
jbe
clc
jno
add
pop
or
in
retf
sbb
jecxz
outs
in
mov
out
pop
dec
rcr
std
test
test
dec
stos
ja
mov
retf
popf
fistp
loop
fisubr
xchg
push
(bad)
adc
xor
fistp
jbe
xchg
fsubrp
cmp
inc
fisub
adc
sbb
out
shr
dec
mov
push
cwde
mov
stc
inc
pop
arpl
aas
test
dec
test
mov
sbb
out
and
cmps
sub
xchg
into
pop
push
call
sahf
mov
or
inc
jl
cmp
es
push
call
cmp
push
push
mov
dec
jb
rcl
xchg
aas
xor
mov
mul
out
xor
mov
pop
call
lea
outs
dec
jmp
es
inc
je
dec
in
pusha
jbe
push
sub
mov
(bad)
ds
jmp
mov
movs
push
dec
jmp
test
movs
and
icebp
sub
out
pop
lds
ffree
retf
mov
and
les
pop
xchg
inc
fild
push
nop
in
int3
add
push
add
xor
repz
xor
jo
xchg
(bad)
cli
mov
clc
sti
shl
dec
jnp
test
ret
adc
dec
lods
dec
repz
jb
out
add
aaa
add
add
rol
shr
pop
ins
jb
repz
ret
ins
xor
jge
xor
arpl
dec
test
mov
out
xlat
ret
push
inc
idiv
test
imul
push
and
fsubr
mov
adc
mov
repz
pop
out
jge
inc
xor
jbe
aad
xchg
pop
jp
loop
ins
cmp
in
and
ins
jmp
xor
arpl
add
or
(bad)
(bad)
enter
imul
mov
leave
cmps
popf
mov
cmp
retf
in
setae
(bad)
jo
movs
ds
ficom
cs
sbb
sti
xor
mov
pop
nop
loopne
outs
(bad)
add
sub
or
(bad)
scas
cld
add
sti
into
inc
inc
icebp
in
jns
scas
leave
cwde
inc
jae
clc
jecxz
mov
jns
in
mov
(bad)
cmps
jne
(bad)
repz
jp
aas
outs
iret
mov
cmps
into
jmp
cmp
in
call
mov
scas
jb
add
push
(bad)
loopne
sbb
cmp
add
imul
xchg
mov
fs
std
int
std
xchg
cmc
sbb
add
aam
fcomip
icebp
sub
mov
repnz
xor
fisub
jecxz
mov
mov
push
mov
test
mov
ins
(bad)
je
test
icebp
jbe
outs
jb
cmps
fs
inc
jmp
fnstcw
cmp
daa
add
jb
pop
inc
lods
dec
cld
or
and
mov
or
jno
push
inc
sbb
mov
sbb
jmp
ss
repnz
sbb
mov
sbb
cdq
xchg
or
test
push
into
lods
sbb
pop
leave
es
test
data16
lods
push
out
sub
mov
push
cs
sbb
aaa
jl
push
push
jne
aaa
dec
lods
push
push
xchg
pop
idiv
ror
jmp
imul
mov
adc
jnp
ror
push
mov
aad
sub
out
inc
div
imul
jmp
js
inc
and
jno
gs
and
dec
(bad)
retf
sub
bound
lods
lods
cmp
mov
xchg
cmp
shl
ins
and
iret
pop
sbb
push
jl
mov
sbb
pop
mov
fchs
imul
cld
mov
aam
fsub
call
daa
xchg
push
popa
inc
aaa
mov
push
mov
and
repnz
cli
inc
mov
or
cld
scas
sub
pop
cdq
hlt
scas
dec
cli
aad
jg
mov
inc
ins
mov
gs
(bad)
stos
cmp
mov
pusha
ins
daa
mov
std
cmp
sub
adc
pushf
call
rol
mov
arpl
mov
das
ins
cmp
ins
inc
in
les
sti
(bad)
ds
jo
popf
cdq
mov
xlat
sub
outs
stos
ss
push
repnz
(bad)
daa
inc
and
mov
mov
inc
cmp
xor
stos
mov
jae
or
enter
sbb
pop
in
cmps
adc
xchg
pop
adc
inc
and
mov
or
into
scas
or
cmp
dec
in
nop
cli
cmp
dec
jl
loop
shr
mov
and
idiv
xchg
popa
sar
or
jl
add
adc
int
sub
pop
and
xor
mov
xchg
push
(bad)
inc
cdq
xlat
sub
pop
sub
xchg
cdq
test
mov
mov
mov
repz
repz
in
jle
mov
movs
fcomp
mov
push
xor
adc
cmps
push
ffree
cmp
xor
adc
push
fimul
pop
call
adc
mov
in
sub
movs
cmp
imul
and
push
pop
sub
mov
sub
stos
rcr
mov
mov
push
pop
fdivr
fwait
in
(bad)
adc
pop
push
cmp
xor
mov
aad
sbb
add
test
stos
jns
inc
jae
aas
in
push
aad
mov
mov
mov
jge
and
cmps
pop
fistp
aas
xor
pusha
adc
test
add
loopne
or
inc
cmp
xor
pushf
data16
push
(bad)
mov
movs
mov
(bad)
or
shr
xchg
cmp
xor
loope
pop
inc
mov
sbb
and
js
je
add
xchg
add
push
push
pop
(bad)
out
sbb
jnp
daa
les
pop
and
adc
pop
outs
lahf
outs
ins
jno
mov
xlat
xchg
jbe
lea
sub
or
movs
pop
pop
ds
sbb
cld
push
jmp
lea
sub
test
mov
inc
test
dec
xchg
ds
or
xchg
into
push
push
jno
mov
cmp
stos
jb
inc
dec
mov
int
call
fsubr
pop
ror
xor
sub
(bad)
lea
sub
push
mov
test
inc
dec
inc
add
xchg
push
xor
mov
push
or
or
ja
adc
loopne
sub
idiv
(bad)
shl
xchg
sbb
jp
(bad)
adc
test
mov
addr16
or
das
dec
or
iret
mul
mov
mov
in
and
sbb
push
mov
xchg
repz
jns
push
into
or
ret
mov
dec
pop
xor
cmps
and
xchg
ja
mov
jne
mov
pop
rol
mov
cmps
loope
sahf
(bad)
in
sahf
mov
popf
sar
rol
(bad)
rol
sbb
pop
inc
repz
sub
(bad)
clc
scas
sub
xchg
dec
jmp
inc
mov
and
or
add
cmc
xchg
push
lahf
jmp
scas
movsx
add
jbe
lods
mov
mov
push
mov
mov
pop
dec
(bad)
fcom
pop
pop
retf
push
(bad)
xchg
push
inc
add
mov
dec
pop
lods
fisubr
sub
mov
xchg
cmp
pop
xchg
add
fbld
dec
jmp
push
retf
jne
adc
movs
mov
stos
scas
sahf
pop
add
mov
jmp
inc
das
out
shl
add
cmp
fidivr
cld
mov
inc
icebp
and
jb
data16
popa
popf
out
jo
dec
ret
adc
fisttp
cld
dec
mov
mov
jp
popa
fistp
pop
push
push
test
inc
lds
sub
aad
mov
xor
push
mov
enter
shl
fbld
pop
fistp
mov
fmul
sub
addr16
cmp
mov
jae
fsubp
adc
in
push
sbb
jle
mov
cmp
pop
jo
mov
pop
leave
stos
stos
cmp
dec
push
sub
sub
movs
dec
sbb
inc
push
sub
xor
adc
xchg
scas
jle
or
or
and
mov
sbb
ins
ret
xor
inc
sub
push
xor
add
mov
inc
cmp
push
cmp
fist
push
cwde
cmp
lgs
xor
sbb
icebp
cdq
(bad)
jl
iret
mov
xlat
add
fistp
lock
fiadd
mov
sub
push
pop
and
pop
pop
dec
minps
jp
xchg
adc
mov
pop
int3
mov
adc
bound
in
stos
push
lock
out
int
mov
pop
cmp
mov
fistp
mov
fs
stos
enter
jns
jl
xor
cmp
xchg
iret
dec
std
pop
fidivr
retf
cdq
mov
mov
lea
jle
add
push
push
inc
xchg
cli
jns
inc
fidiv
cmp
mov
scas
jmp
fimul
rol
and
arpl
or
inc
fcomp
sub
shl
mov
pop
rol
loope
or
and
out
cmps
sbb
cld
push
cld
dec
icebp
stos
shr
push
popf
and
bound
push
push
pop
sahf
or
aad
test
sti
cli
aad
pop
out
and
popa
and
lds
sub
scas
scas
xchg
out
(bad)
call
iret
add
fstp
bound
loop
adc
repnz
ror
out
and
mov
(bad)
push
mov
int3
jmp
sahf
in
data16
jne
add
pusha
ins
(bad)
mov
imul
inc
(bad)
mov
stc
cmps
add
inc
lods
xor
add
fild
sar
push
sets
dec
mov
or
mov
cli
shl
jo
inc
das
shr
inc
sub
es
sbb
retf
dec
sub
ret
lahf
aas
das
data16
xor
sti
gs
cmovl
mov
push
inc
nop
mov
inc
ror
fnstcw
cmp
in
loop
call
sbb
xchg
mov
loope
mov
fcom
sbb
ins
and
je
(bad)
or
or
ins
out
adc
jo
and
repnz
mov
std
imul
mov
les
loop
jns
or
ja
inc
test
test
cdq
outs
stos
adc
mov
inc
adc
mov
push
bound
fmul
inc
xor
ror
dec
arpl
xchg
fcomp
loope
jle
mov
call
adc
mov
xchg
mov
arpl
fiadd
jmp
ja
or
xchg
je
outs
daa
jle
dec
xorps
mov
mov
icebp
cmp
dec
push
stos
xchg
mov
sbb
cdq
or
xor
cmps
lods
into
iret
sub
ret
sub
inc
or
xor
inc
and
scas
push
jp
js
add
addr16
enter
inc
movs
mov
std
repnz
cmp
mov
lahf
jmp
pop
ret
jle
movs
sti
inc
inc
loop
sti
and
(bad)
jmp
cmp
mov
sbb
imul
pop
xor
int
cmc
lock
sub
or
xor
ss
rol
sub
xchg
jle
hlt
inc
mov
rcl
or
rol
inc
out
ret
inc
hlt
popf
loope
dec
ror
es
push
daa
out
imul
sub
call
mov
mov
mov
mov
xchg
sub
jnp
and
mov
movs
scas
int3
ds
mov
in
push
cmps
mov
mov
jnp
and
hlt
daa
jmp
jge
sbb
(bad)
hlt
cmp
scas
cmp
xor
cmp
push
shl
cmc
lock
add
in
inc
repz
rol
frstor
dec
and
out
pushw
xor
iret
xor
pusha
cmp
retf
mov
inc
inc
mov
and
mov
clc
jns
xor
imul
les
rcl
lods
inc
mov
aas
cmp
les
mov
dec
inc
rcr
jle
iret
and
jle
sbb
repnz
fs
and
out
fs
and
jmp
mov
out
sub
sbb
ret
nop
cmp
dec
cmp
xor
mov
test
jns
ins
xchg
xchg
dec
mov
mov
fild
nop
cli
cmp
or
std
(bad)
aad
or
jle
mov
ror
inc
retf
cmp
pop
sbb
mov
sub
sbb
test
push
push
sbb
and
pop
pop
fnsave
js
js
ret
scas
ds
pop
or
lods
and
loop
loop
cmp
les
mov
adc
xor
jmp
jmp
ror
adc
push
push
pop
je
popa
push
in
mov
sbb
and
ss
pusha
into
arpl
aaa
dec
and
fisub
hlt
push
(bad)
mov
idiv
dec
(bad)
xchg
(bad)
(bad)
call
cmp
jno
jl
add
fdivr
mov
push
bound
out
xchg
lods
cmp
cmp
leave
dec
mov
xor
pop
sahf
ins
scas
dec
ss
and
xor
add
mov
mov
popa
out
sub
push
mov
cmp
in
lahf
mov
stos
data16
movs
mov
jp
and
es
sub
jb
inc
outs
cld
ds
dec
mov
and
jge
(bad)
stos
fs
ins
ret
test
or
arpl
xchg
mov
jnp
fcom
pusha
fistp
rol
xchg
cli
jno
outs
xchg
data16
push
sub
fwait
pop
inc
sub
(bad)
mov
cdq
xchg
mov
mov
sbb
cs
pop
jl
daa
sub
rol
mov
mov
nop
push
dec
push
scas
jno
imul
dec
das
mov
xlat
xlat
pop
jb
push
neg
retf
rol
ins
mov
inc
mov
ret
imul
cmc
(bad)
jnp
ds
popa
mov
add
rol
pop
or
cld
sub
dec
sar
cld
sub
push
pusha
jb
dec
ja
scas
inc
push
jb
mov
xor
shl
push
adc
mov
mul
pmullw
out
cmp
mov
mov
sbb
dec
inc
in
test
sbb
dec
pushf
adc
jnp
(bad)
pop
cmp
pop
(bad)
in
iret
adc
dec
sti
dec
cmp
mov
push
and
xchg
sbb
sub
fdecstp
push
div
jnp
pop
lods
push
push
rcl
pop
jle
adc
(bad)
iret
sbb
in
push
loopne
movs
pop
dec
cmps
(bad)
adc
ja
call
cmp
adc
push
lds
xchg
push
sub
fsub
aaa
push
in
jne
inc
leave
add
gs
mov
jmp
retf
jns
adc
je
fs
push
push
sahf
sub
mov
xchg
out
retf
(bad)
scas
retf
loope
inc
push
(bad)
sub
imul
pop
dec
les
outs
mov
pop
(bad)
cdq
adc
stos
mov
mov
and
pop
push
(bad)
or
xchg
adc
dec
icebp
dec
pop
(bad)
out
retf
fisub
cdq
add
push
xor
add
pusha
mov
add
mov
aaa
mov
mov
and
mov
sti
xor
xlat
aaa
sbb
sbb
mov
jecxz
mov
push
rcr
jns
leave
mov
dec
rol
test
cmp
jns
adc
push
ret
out
jo
out
push
push
cmp
sub
mov
mov
mov
adc
arpl
test
pop
xchg
fbld
js
jnp
cmps
out
fsub
(bad)
nop
sbb
dec
mov
cmps
arpl
lock
into
xchg
cmps
sahf
test
mov
mov
adc
and
enter
in
ins
or
inc
adc
sar
bound
(bad)
jns
stc
repz
xchg
mov
cmp
jo
mov
jge
xor
xor
sbb
mov
data16
and
aas
xchg
out
pusha
push
add
ret
movs
int
ds
xchg
mov
adc
std
aad
fidiv
fbld
sub
ret
repnz
out
test
das
sahf
jecxz
cwde
js
int3
pop
mov
stos
jno
pop
mov
jno
cmps
pop
adc
and
sbb
push
daa
ficomp
xor
cmc
loope
(bad)
fist
inc
nop
(bad)
push
or
or
ret
sub
jbe
push
loope
fs
mov
dec
jns
push
(bad)
repz
jp
mov
inc
dec
pop
mov
and
cmp
push
dec
(bad)
loop
jns
dec
fxtract
ins
xchg
xchg
imul
cmc
or
dec
inc
outs
mov
jnp
push
das
test
or
pop
adc
xchg
outs
and
outs
pop
xchg
sar
repz
(bad)
ins
mov
mov
gs
dec
cs
push
scas
dec
jecxz
hlt
aaa
sbb
repz
jle
sbb
sbb
bound
sbb
inc
scas
cmp
imul
xchg
test
sahf
mov
imul
scas
cld
in
xchg
das
jns
mov
cs
adc
mov
dec
(bad)
shr
xchg
cld
data16
mov
push
mov
repnz
and
ins
lods
(bad)
mov
mov
(bad)
retf
pop
or
mov
enter
add
push
and
mov
out
mov
cld
out
jge
mov
adc
pop
pop
jbe
jl
or
pop
mov
cs
xchg
cmc
xor
jb
sbb
xchg
pop
inc
xchg
push
scas
jle
sbb
xchg
cmp
fmul
cmps
push
dec
adc
sbb
out
int3
loop
push
xchg
imul
pop
xchg
inc
fdivr
inc
sbb
xchg
ficom
stos
dec
loopne
inc
aam
xor
pusha
in
cld
push
or
push
mov
jbe
jp
mov
mov
ret
xor
(bad)
fcmovnbe
repz
ds
fcom
je
and
test
pop
dec
mov
push
ja
ror
iret
out
call
jmp
js
inc
lock
bound
cmp
fwait
cmp
add
push
hlt
jmp
(bad)
cwde
dec
fld
mov
jmp
and
in
aaa
jp
retf
jl
lock
cmp
ins
aad
inc
aad
movs
jmp
ds
pushf
in
sbb
shr
jne
sti
push
pop
cmps
push
mov
xor
jge
or
rcl
jb
rcr
mov
pusha
(bad)
dec
pusha
push
pusha
jmp
pop
xor
icebp
repz
das
imul
dec
xchg
loope
aaa
jecxz
push
(bad)
outs
test
out
add
jae
stos
pop
loop
in
xor
push
repnz
xchg
shr
loop
adc
in
mov
lock
inc
out
sub
je
cmp
mov
dec
sbb
inc
out
jb
adc
sqrtps
inc
lods
test
adc
movs
test
dec
scas
cs
inc
fs
cmovs
adc
add
retf
xchg
imul
push
retf
push
in
adc
std
jmp
gs
dec
mov
cmp
xor
push
push
fisubr
sahf
adc
sti
fisubr
jl
dec
mov
mov
in
icebp
sbb
loope
in
mov
cmp
(bad)
sahf
cmps
movs
xor
popf
xchg
repnz
inc
mov
loop
jns
jmp
inc
(bad)
xor
outs
xchg
xchg
dec
imul
stc
ja
pop
ins
mov
mov
mov
loope
test
cmp
cmp
repz
sbb
cli
(bad)
pop
test
(bad)
call
fdiv
mov
xor
scas
sub
rcl
inc
int3
sahf
clc
xor
or
jnp
and
fcmovne
into
(bad)
push
repz
fmul
js
jnp
cli
inc
fldenv
add
retf
mov
sbb
stos
cmp
frstor
loop
enter
jae
leave
xor
out
adc
ins
adc
xor
sub
pop
int3
dec
cmp
sub
fsub
repz
fcomp
sahf
outs
xor
xchg
xchg
ja
ss
(bad)
arpl
cmp
adc
mov
mov
add
stc
sbb
sbb
repnz
popa
xchg
xor
push
rol
sub
jnp
add
shl
inc
inc
data16
ror
jnp
dec
inc
das
in
and
mov
shl
fnstsw
fdivp
cmp
fwait
cmp
bound
mov
inc
(bad)
ret
jns
add
jb
sahf
dec
movs
pop
cmps
xchg
and
jmp
ja
sbb
js
test
imul
outs
lock
scas
repnz
push
rol
imul
add
cmp
pop
sar
inc
mov
out
xor
push
sub
xchg
mov
sub
xlat
es
adc
std
jo
xchg
cmps
adc
sbb
enter
dec
in
icebp
pop
inc
test
push
or
cwde
inc
sbb
push
(bad)
data16
pusha
ins
or
into
ret
cwde
sahf
or
and
popa
pushf
push
int3
mov
xchg
popa
es
pop
push
int3
xchg
or
mov
xor
retf
or
sbb
ret
xor
or
or
cld
and
jecxz
pusha
push
enter
cmps
xor
push
addr16
cmp
repz
test
push
retf
addr16
stos
or
push
cdq
call
dec
or
sar
cwde
mov
sahf
retf
ret
xor
cld
xor
push
rcl
jmp
or
pop
sahf
and
cmp
scas
mov
mov
mov
int3
xchg
shr
pushf
mov
xchg
xor
xor
popf
hlt
xchg
mov
ret
loop
sub
pushf
addr16
(bad)
cmp
cmp
fild
jns
rol
scas
xchg
data16
adc
cmp
sbb
in
sbb
jne
mov
dec
dec
xchg
outs
ins
sbb
mov
stos
push
mov
dec
sub
inc
ror
in
mov
(bad)
xchg
clc
leave
inc
dec
inc
mov
add
dec
cld
and
xchg
jnp
dec
dec
cwde
sbb
push
mov
cmp
enter
sbb
mov
xor
movs
cmp
std
xchg
mov
mov
push
xor
cmp
inc
jg
mov
aas
cmps
popa
rol
loope
and
pop
push
test
jmp
pushf
pushf
outs
add
push
sub
jmp
push
imul
(bad)
cmc
sbb
dec
sub
push
jo
outs
(bad)
icebp
xor
jge
jp
push
and
cmp
jo
and
pop
pop
fsub
fild
fwait
data16
inc
icebp
add
fidivr
fiadd
lods
jl
int
sub
adc
dec
inc
xor
mov
or
(bad)
fidiv
cmp
sub
sti
out
jge
jne
jae
jg
fsubr
add
add
frstor
fadd
stc
cmp
inc
shr
std
jge
stos
or
mov
jb
icebp
dec
leave
test
cmp
dec
mov
xor
pop
mov
and
push
push
cmp
iret
inc
add
iret
fsubr
xchg
xor
not
push
mov
pop
xchg
in
xchg
push
fidivr
xchg
popf
pop
mov
test
dec
jg
mov
(bad)
dec
mov
test
or
repz
repnz
loop
retf
arpl
psubusb
push
xchg
ror
(bad)
jecxz
fwait
popa
mov
cmp
(bad)
int3
jmp
sahf
daa
call
push
(bad)
jno
pop
imul
and
pusha
cli
dec
daa
mov
icebp
jbe
pop
in
mov
stc
mov
xchg
dec
data16
lock
es
imul
dec
mov
mov
into
dec
cli
or
dec
leave
jp
push
adc
out
sub
push
sar
cmp
aam
jb
add
mov
and
pop
adc
rcl
gs
iret
ins
shl
cmps
mov
mov
call
sub
add
(bad)
es
push
lods
pop
ss
inc
imul
je
sub
dec
inc
into
mov
and
xor
cmp
dec
jae
or
add
sbb
(bad)
sar
arpl
dec
jge
push
daa
pop
mov
mov
movs
mov
dec
jnp
and
lods
pushf
ins
in
jmp
lds
cmp
or
cmp
sbb
lods
push
adc
adc
sub
cmc
push
retf
cli
push
test
dec
push
cmc
fidivr
mov
cli
aaa
and
dec
jmp
adc
arpl
enter
rcl
add
xchg
cmps
bswap
dec
in
and
retf
fsub
lds
in
repz
xchg
jns
addr16
jnp
scas
jnp
retf
mov
imul
scas
scas
popf
xchg
mov
fiadd
adc
mov
shl
pusha
test
bswap
xor
fs
adc
cs
out
enter
ins
mov
outs
pop
sbb
gs
fsub
dec
cdq
clc
dec
out
or
mov
js
lock
or
mov
push
stc
mov
inc
aad
cmp
fdiv
add
ret
push
ins
or
jb
pop
pop
sub
ds
sti
icebp
add
add
rol
or
neg
fadd
fnsave
add
mov
xor
inc
ror
sbb
jle
rol
sbb
or
jb
leave
push
mov
shr
into
jmp
sar
(bad)
pop
or
mov
inc
ret
jecxz
fild
loop
inc
adc
add
cmp
cmc
push
mov
repz
in
jmp
iret
ss
out
int3
int
jp
test
xchg
and
push
ret
mov
fild
pushf
cld
call
jg
imul
jle
sti
icebp
adc
(bad)
int
neg
jno
jg
and
sbb
xor
jno
in
cmp
(bad)
lock
xchg
adc
fsubr
retf
cli
cs
(bad)
mov
xchg
sbb
and
(bad)
addr16
push
(bad)
fcomip
sub
inc
iret
inc
cmps
out
mov
shl
sar
dec
pminub
mov
rcr
leave
pop
xchg
inc
inc
cmp
in
xchg
iret
mov
mov
out
(bad)
jecxz
pop
dec
xor
pushf
lods
inc
xchg
pop
aad
lahf
inc
jl
pop
ret
sub
sbb
fnstenv
mov
loopne
add
cmp
inc
stc
imul
push
push
push
clc
fwait
jbe
xchg
and
cmp
adc
loopne
icebp
dec
dec
test
test
aaa
retfw
cld
mov
add
xor
call
cli
retf
scas
movs
inc
sti
mov
jg
push
movs
repz
sbb
out
inc
cmc
arpl
sar
aas
call
jo
aad
push
cmp
sahf
pop
ja
pop
in
test
fld
rol
imul
mov
cmps
or
inc
dec
and
pop
pusha
popa
cmc
out
ss
ss
popf
push
unpckhps
lods
jl
adc
cli
in
in
and
jecxz
cld
sub
leave
xlat
popa
addr16
in
fstp
retf
rcr
xchg
inc
push
jb
mov
or
adc
int
and
cmp
lock
jmp
shl
and
popa
stos
adc
jbe
es
je
dec
ficom
jns
mov
repnz
inc
mov
rcr
rcr
push
dec
loopne
fiadd
test
mov
movs
(bad)
jbe
mov
out
cli
ret
fisub
dec
fdivr
daa
mov
imul
jo
cli
sub
add
pop
arpl
std
lods
xlat
loopne
cmp
adc
in
inc
sbb
mov
push
sti
add
xor
and
adc
add
and
jb
ss
nop
push
mov
jo
adc
test
inc
loopne
mov
push
sub
mov
cmp
mov
int3
mov
mov
cmps
ds
sahf
xchg
dec
and
push
fld
add
xchg
add
add
ss
fwait
inc
jg
mov
arpl
adc
fadd
stos
mov
movs
mov
loopne
ds
jmp
sub
jle
pop
inc
je
inc
push
pop
xchg
in
cmp
jg
lods
jbe
cdq
jg
imul
dec
pop
jae
(bad)
pop
mov
jo
out
aas
das
and
les
sbb
mov
retf
jb
stc
jmp
push
adc
pop
nop
retf
mov
leave
imul
call
daa
idiv
stos
sbb
arpl
lock
push
in
mov
scas
jg
out
jno
mov
push
jmp
dec
and
xchg
jge
push
out
fadd
xchg
mov
pop
sbb
imul
scas
popf
or
pop
add
add
cmp
xor
mov
adc
cld
out
test
and
test
mov
fldenv
lds
mov
xor
xor
call
pop
mov
sti
xor
repnz
loop
push
es
cmp
jno
les
fwait
and
pop
mov
and
push
xor
inc
add
fldl2t
es
push
adc
mov
iret
add
test
rcr
cli
data16
lods
outs
aam
into
cli
cli
lods
dec
repnz
fcmovnu
lea
rol
fstp
jmp
add
aam
jmp
inc
stos
sbb
add
and
xor
jge
sahf
inc
(bad)
jge
lods
repz
inc
push
popf
adc
pop
fdivr
jns
pcmpgtd
fisubr
stc
cmp
fist
cmc
fs
daa
adc
pushf
mov
(bad)
int3
sub
push
push
adc
mov
xor
(bad)
out
sub
xchg
pusha
ins
stos
mov
dec
fdivr
retf
outs
sbb
fnop
or
lea
fild
(bad)
pop
lds
cmp
mov
mov
or
or
aad
fdiv
les
repnz
mov
call
mov
ja
cwde
bswap
js
movs
std
adc
stos
daa
xor
cmp
repz
data16
(bad)
sbb
jae
xchg
add
in
leave
push
ffreep
pop
xchg
jmp
mov
bound
mov
xchg
xchg
xchg
sbb
shl
push
adc
xor
mov
inc
stos
mov
popf
or
jno
mov
fld
dec
inc
bound
test
stc
bound
mov
fst
ds
shl
mov
dec
xor
pop
jns
or
dec
ja
mov
fdiv
loopne
mov
mov
or
cmp
sti
and
aas
aas
ja
mov
inc
jecxz
jge
movs
js
sbb
mov
jb
jb
adc
xlat
loope
and
and
int
into
(bad)
int3
jns
das
ret
ss
je
mov
test
out
rcl
inc
xchg
push
inc
adc
stos
outs
enter
or
(bad)
pop
mov
inc
xchg
adc
xor
rcl
sbb
push
xlat
int
pop
cwde
mov
sbb
push
repnz
aas
inc
add
inc
pop
pop
jns
pop
dec
test
mov
mov
loop
and
jp
out
push
add
sbb
add
pusha
or
inc
xchg
pop
cmp
or
and
fcomp
repnz
xchg
jae
dec
mov
sub
fbstp
mov
stc
test
and
mov
sub
inc
les
push
in
out
cmps
repz
sbb
mov
cwde
dec
cli
(bad)
je
and
mov
sub
mov
adc
mov
mov
push
and
xor
mov
cmp
out
cmp
mov
fisttp
jae
jne
jno
adc
jbe
aaa
test
dec
lds
dec
int
(bad)
mov
xlat
pop
outs
lods
mov
pop
pop
jae
hlt
sub
push
aaa
push
xor
les
movs
sbb
pop
adc
mov
out
jmp
push
mov
leave
add
retf
lds
sbb
pop
daa
scas
out
pop
in
mov
pop
loope
in
stc
dec
jns
pop
sub
xlat
leave
imul
pop
pop
and
out
xchg
push
lds
pop
push
xlat
es
mov
xchg
dec
leave
stos
sub
jne
or
sti
adc
mov
sbb
in
imul
jae
stos
test
mov
lahf
(bad)
popa
addr16
pushf
dec
jnp
bound
nop
xchg
lea
aas
shl
nop
or
(bad)
ins
ret
rcr
outs
ret
(bad)
sti
and
pop
and
and
jns
test
cs
push
mov
mov
ins
stos
out
repnz
in
sbb
and
imul
inc
shr
sbb
push
jns
pop
cs
xchg
push
jge
mov
mov
mov
add
push
cmp
mov
dec
cdq
lds
push
xchg
inc
movs
and
std
and
fs
retf
mov
mov
std
pop
(bad)
loope
mov
jno
mov
xlat
cmc
dec
imul
push
shr
pop
repnz
ret
push
ins
(bad)
std
or
xchg
out
mov
shr
lahf
jle
retf
dec
(bad)
jl
xchg
dec
inc
in
inc
jmp
adc
(bad)
repz
xrelease
jb
xchg
ins
add
sti
jnp
shr
sbb
sub
jo
cld
adc
mov
loopne
mov
mov
push
sub
cmp
(bad)
jbe
leave
fdivp
push
rcr
mul
mov
jle
mov
or
and
dec
cmc
add
xchg
and
ret
mov
pushf
jecxz
cmps
fs
push
mov
or
scas
jno
mov
jp
mov
xor
retf
mov
pop
mov
ret
fisubr
jg
xor
stos
sub
pop
and
sub
pop
inc
in
sti
lds
ja
neg
pushf
in
sbb
mov
inc
inc
cmp
addr16
xchg
sbb
jecxz
out
imul
sbb
std
adc
data16
out
sti
or
cmp
dec
push
test
cmps
add
pop
jne
cmp
jne
push
pop
(bad)
pusha
cwde
daa
push
sbb
mov
jg
aad
jnp
push
pop
adc
mov
(bad)
cmp
jno
xchg
scas
outs
cs
daa
lods
dec
xor
xor
push
mov
xlat
movs
jbe
popf
and
xchg
addr16
xor
dec
cli
mov
mov
fistp
fwait
cs
es
call
mov
daa
jns
push
iret
push
xchg
adc
pop
xchg
push
ins
xor
inc
mov
xor
dec
xchg
repz
jb
dec
aam
popa
in
xlat
out
gs
inc
ds
sbb
cmp
je
jle
jmp
push
scas
push
fld
xor
in
in
repz
sti
xchg
in
in
mov
mov
xor
je
js
ds
fcomp
xor
rcr
jp
enter
in
in
sbb
ficom
add
jmp
out
ins
push
push
lods
rcr
std
jge
pop
stos
add
jne
mov
sub
(bad)
push
pusha
cmps
cmovg
shl
mov
jns
dec
dec
adc
(bad)
addr16
jge
cwde
push
mov
or
shl
test
adc
(bad)
pusha
div
in
add
mov
sbb
in
mov
aaa
fiadd
cmp
or
fchs
cdq
data16
cdq
sbb
movs
mov
mov
mov
loope
fs
call
movs
mov
dec
imul
in
retf
cmp
fiadd
cmp
mov
test
lods
movs
lds
(bad)
arpl
rcl
dec
or
xchg
or
and
inc
test
mov
pop
sub
jge
xchg
fucomip
and
dec
icebp
stos
inc
sub
cld
mov
sub
inc
cmps
xchg
mov
pushf
adc
dec
mov
imul
pushf
jg
out
sbb
scas
std
in
(bad)
arpl
mov
pop
cwde
sub
xor
mov
std
or
out
fmul
inc
repz
mov
jecxz
lods
xchg
call
or
fimul
sbb
jmp
fstp
dec
dec
xor
pushf
(bad)
aas
sub
or
loop
in
xor
mov
mov
ss
pushf
jno
push
cmp
aad
jp
and
inc
fisub
mov
mov
inc
pop
cmp
int
xor
or
sbb
xor
mov
adc
ret
sub
xor
aad
adc
bound
pop
int
adc
sub
cmp
icebp
loop
neg
push
(bad)
sti
jl
pop
loop
repz
in
xchg
mov
ror
ret
push
std
or
enter
lahf
dec
jno
pop
xor
dec
sub
adc
scas
mov
out
push
inc
push
or
scas
shl
jnp
push
shr
jbe
ja
cmp
mov
pop
sbb
mov
popf
pusha
dec
sbb
fs
mov
retf
inc
pop
fsubp
mov
sub
dec
push
clc
jle
(bad)
xor
jnp
fisttp
gs
mov
nop
stos
add
xchg
push
stos
mov
ja
jae
sti
sbb
cmc
stos
jne
lea
xchg
mov
pop
fstp
mov
loope
ins
lods
sbb
lock
adc
daa
icebp
in
cmp
scas
mov
xchg
push
les
(bad)
pop
xor
jne
(bad)
fyl2xp1
in
repz
stc
sbb
push
out
inc
inc
mov
jns
xlat
clc
xlat
fistp
aam
rcl
(bad)
cmp
xchg
pop
imul
mov
push
or
test
adc
repnz
jne
fwait
mov
push
add
mov
leave
outs
mov
mov
jg
mov
repz
cmc
pop
(bad)
sub
jg
es
(bad)
sbb
mov
loop
movs
mov
clc
aaa
jbe
fldcw
dec
shl
arpl
bound
xchg
mov
lods
inc
bound
pusha
jl
sbb
push
sbb
cmps
push
push
aam
sub
test
jae
mov
data16
ret
pop
push
sar
inc
ds
cwde
dec
cmp
out
shl
test
mov
adc
fs
dec
movs
ds
js
call
test
(bad)
cmp
pushf
in
add
nop
repnz
mov
dec
cmp
lahf
push
rol
jmp
loopne
jl
add
and
and
call
hlt
lds
jno
fwait
mov
scas
stos
cmps
(bad)
xchg
xchg
pusha
mov
test
iret
mov
and
and
pop
mov
lea
push
mov
inc
xor
imul
ins
(bad)
int3
dec
mov
or
mov
mov
fwait
je
mov
icebp
inc
test
stos
lock
lock
inc
test
out
test
and
cmp
popf
movs
int
xor
icebp
(bad)
in
jmp
test
jl
stos
dec
pop
out
test
xor
call
retf
cmp
and
inc
stos
mov
lds
mov
mov
add
sub
cmp
ud0
mov
mov
stos
adc
jne
nop
sahf
jbe
pop
push
div
dec
sub
call
jg
dec
push
movs
bound
sub
cs
xor
add
sbb
mov
xor
icebp
call
and
dec
xchg
sbb
test
daa
adc
out
add
addr16
push
pop
loop
mov
rcpps
fidivr
cli
je
jg
ret
aas
adc
imul
mov
xchg
cdq
les
fs
fdivr
and
in
dec
jl
mov
mov
jns
cmp
sahf
push
mov
mov
mov
ss
push
(bad)
or
scas
in
daa
xchg
pusha
(bad)
jmp
cld
inc
loopne
jne
aad
xlat
mov
xchg
std
xchg
xchg
fistp
lock
lock
sbb
mov
push
push
loope
mov
fnstenv
das
pop
lods
imul
pop
xchg
loop
int3
cli
mov
arpl
ds
jmp
mov
jle
arpl
sbb
neg
mov
jnp
add
xchg
pop
(bad)
out
sub
jb
push
xor
inc
js
push
inc
test
jge
cli
xchg
ins
adc
inc
leave
jno
mov
add
mov
into
rol
mov
adc
jno
gs
jb
xor
push
push
(bad)
fwait
mov
jmp
pop
leave
mov
or
lock
jne
popf
add
or
pushf
test
outs
pop
popa
test
mov
sub
sbb
jle
je
loop
hlt
outs
mov
clc
cmps
xchg
sbb
add
ins
xor
inc
cld
add
pushf
fisub
int
jg
loop
mov
and
dec
aam
call
iret
(bad)
fbstp
(bad)
push
ds
loope
push
xchg
pop
sahf
sub
movs
xor
xor
aas
bound
iret
jmp
mov
jg
into
jae
mov
xchg
cs
mov
inc
les
adc
sbb
fdiv
jmp
inc
sahf
pop
test
mov
rcr
(bad)
push
dec
outs
dec
dec
fsubr
lahf
pop
and
rcl
fs
repnz
xlat
xor
and
sti
xchg
je
and
pushf
rcr
jae
jne
mov
test
mov
cmp
out
mov
mov
shrd
xchg
popf
lahf
jg
outs
dec
mov
rcl
mov
arpl
in
sbb
inc
lds
fsub
push
mov
into
test
and
push
ds
or
lods
sbb
ins
pop
sti
outs
inc
leave
test
fadd
test
cmc
pop
or
std
push
stos
or
pop
mov
pushf
dec
sbb
mov
retf
scas
scas
mov
push
inc
aas
shl
cmp
in
mov
cld
mov
mov
add
(bad)
in
xchg
cmc
test
lahf
int3
retf
test
in
not
push
aas
cmps
icebp
or
sbb
test
dec
cli
add
jne
fld
jne
mov
jmp
fstp
jne
pop
fsubr
inc
(bad)
into
popf
fnstcw
mov
(bad)
lods
jge
scas
and
xchg
pop
sub
mov
hlt
ss
or
jnp
xchg
repnz
bound
cmc
mov
iret
ja
aaa
jp
(bad)
mov
es
sub
push
les
fldenv
lahf
mov
sbb
mov
imul
outs
mov
xor
mov
mov
cld
jns
inc
mov
les
mov
aam
push
(bad)
mov
inc
mov
mov
inc
pusha
outs
std
and
outs
lea
add
shl
fldenv
push
xor
xchg
cmc
addr16
xchg
cmp
sbb
call
or
cs
sub
nop
mov
xchg
nop
lahf
add
mov
arpl
ret
and
sub
sbb
xor
dec
or
push
mov
addr16
xchg
(bad)
fcmovnu
shr
call
push
das
in
test
mov
ret
test
mov
out
int
mov
std
add
dec
jmp
mov
xchg
add
clc
(bad)
lea
fisttp
fiadd
movs
sbb
gs
jno
out
fs
sub
icebp
pop
fsubr
nop
int3
xchg
ss
cmp
dec
jecxz
jb
push
cdq
(bad)
push
dec
mov
outs
pop
imul
xor
mov
jecxz
sub
push
jl
dec
leave
mov
jnp
pop
aad
in
aaa
mov
popf
int
mov
mov
dec
mov
imul
cmp
push
out
inc
call
inc
and
jmp
movs
ret
scas
inc
mov
stos
imul
jno
add
xchg
jo
test
inc
xor
push
inc
cld
cld
dec
not
leave
imul
lea
(bad)
jns
jb
mov
in
gs
fldenv
sub
or
xor
add
cmp
cmps
mov
out
inc
sub
repnz
out
call
pop
loop
sar
add
push
int3
fld
or
loop
fidiv
rcr
pop
inc
shr
xor
into
sti
hlt
frstor
xchg
or
dec
cmp
add
sub
jg
mov
fsub
push
cld
xchg
(bad)
adc
mov
pop
push
pop
sbb
cmp
jae
sti
adc
fstp
cmp
retf
pop
mov
inc
nop
cdq
dec
push
mov
stos
mov
aas
test
arpl
test
iret
fdiv
add
fwait
ds
push
(bad)
inc
mov
sub
sahf
sbb
fisub
push
cdq
dec
cmp
in
data16
add
retf
dec
icebp
cmp
sub
cmp
jge
jmp
(bad)
mov
mov
cdq
push
ror
mov
jle
or
jl
push
aaa
repz
and
pop
cmp
sbb
test
imul
fst
stos
not
fsub
ins
dec
cli
scas
mov
pop
(bad)
mov
mov
repz
cli
in
adc
jl
out
add
outs
mov
mov
icebp
xchg
mov
repnz
out
jno
(bad)
fdiv
loop
push
adc
jg
imul
in
cmp
aad
mov
inc
mov
sahf
sub
scas
pop
mov
ret
in
jmp
mov
lds
or
ins
cmp
imul
popa
mov
test
sub
cmp
mov
inc
int
add
sub
jnp
cli
xor
jnp
add
shl
inc
aaa
xchg
ins
cwde
je
outs
jno
jle
movs
ror
and
jmp
stc
data16
aam
mov
fcom
stc
pop
das
xlat
inc
movs
pop
pop
mov
aad
dec
fdiv
out
inc
lods
retf
or
pop
xor
and
and
add
inc
xchg
les
push
pop
cmp
aad
xor
jge
ficom
(bad)
fisttp
jmp
out
and
jmp
push
xchg
mov
dec
jecxz
repz
aaa
gs
ss
leave
pop
stc
pop
retf
pop
outs
sbb
pop
movs
adc
jne
addr16
pop
aad
push
mov
xchg
dec
and
sub
push
shr
mov
data16
jp
aas
jb
popf
adc
push
in
mov
dec
enter
mov
aaa
mov
scas
aas
les
je
gs
shr
icebp
fwait
cmp
pop
retf
jg
sub
inc
push
out
(bad)
rcr
sub
jg
sti
sub
push
sub
push
xor
inc
retf
sahf
adc
out
retf
int3
pop
out
(bad)
cld
mov
cld
and
adc
mov
imul
icebp
mov
sbb
inc
ja
loope
stos
mov
or
jmp
dec
xchg
mov
pop
add
jecxz
sbb
and
pop
ror
cmp
loop
push
xchg
ret
pop
or
shl
fdivr
and
or
je
push
push
xor
jge
fisttp
scas
iret
adc
mov
and
in
repz
outs
jecxz
pop
adc
lds
sbb
mov
mov
fisub
shl
pop
cmp
aad
stc
outs
ds
into
xor
mov
hlt
dec
jl
adc
nop
mov
addr16
mov
add
dec
cld
add
ins
call
push
lock
push
mov
and
outs
sbb
sub
outs
xchg
popf
lahf
xchg
loop
sar
sub
or
cmp
dec
mov
xchg
scas
mov
(bad)
and
adc
rcr
je
cs
stos
push
adc
jns
mov
push
pop
adc
gs
inc
xchg
sub
mov
lods
mov
js
repnz
cmps
stos
in
icebp
movs
dec
fild
or
and
xor
dec
popf
add
rol
dec
add
xor
fmul
shr
lahf
inc
push
fsub
push
push
popf
jno
xlat
push
test
bound
gs
shl
sar
or
ja
mov
cld
cmp
cld
cld
jl
jge
cmp
fdiv
cmp
pop
jp
add
not
(bad)
leave
aam
mov
into
shr
xchg
push
repnz
test
movs
fsub
enter
add
dec
dec
xor
out
xchg
aam
popf
ss
or
aas
mov
inc
or
add
stos
ss
inc
pop
dec
into
mov
nop
and
push
pusha
dec
pop
in
bound
(bad)
cli
push
ins
sbb
pop
rol
in
in
mov
sbb
mov
ja
jle
sbb
mov
xchg
and
mov
imul
jmp
xor
or
pop
add
inc
pop
mov
dec
into
movs
int
mov
fisubr
and
xor
cmp
pusha
jmp
addr16
inc
rcl
mov
aas
cdq
or
outs
pop
push
mov
int3
pusha
movs
mov
ja
pusha
lods
mov
icebp
mov
retf
inc
lahf
cdq
mov
imul
ins
dec
jbe
mov
(bad)
cmp
cmp
shr
test
ins
out
cmps
pop
cmp
add
dec
int3
dec
jne
jmp
(bad)
mov
mov
pop
sub
hlt
sbb
xor
xchg
je
or
je
jnp
imul
test
ss
cmc
cli
pop
clc
aas
pop
adc
mov
jmp
loope
xor
dec
inc
pusha
xlat
inc
into
data16
(bad)
cld
ins
sbb
cmc
xor
xchg
in
pushf
and
movs
push
out
movs
(bad)
or
das
fsub
imul
int
cmc
dec
aam
dec
cli
fs
out
lods
xor
aaa
xor
jle
shl
jecxz
ret
mov
pop
cmp
movs
(bad)
cld
mov
lock
stos
shl
mov
enter
aam
fucom
adc
fwait
sub
or
lahf
hlt
inc
iret
leave
lds
test
xor
or
cmp
xor
inc
ficom
and
mov
mov
mov
sti
or
jnp
outs
or
mov
push
leave
push
jbe
mov
inc
iret
fist
push
jno
add
sar
xor
xchg
push
hlt
ror
xor
pop
push
push
and
pop
(bad)
shl
enter
popf
sbb
mov
mov
mov
cwde
push
push
and
pop
jg
pop
mov
outs
sub
and
movs
iret
iret
sub
sub
sbb
data16
cmps
add
jbe
cdq
add
pop
add
mov
sti
pop
mov
stos
adc
ret
pop
pop
test
fsubr
cmps
add
lahf
sub
adc
pop
mov
in
out
aas
mov
jg
les
sar
mov
xchg
add
int3
(bad)
scas
fisub
xor
sbb
mov
push
mov
jecxz
cli
(bad)
pop
mov
mov
out
adc
cmp
repz
sub
aad
pop
into
pop
fcom
mov
popa
sub
cs
mov
sub
mov
cld
shl
mov
jae
cmp
add
mov
lea
call
mov
scas
sbb
jno
lock
test
mov
jle
jle
xor
mov
shr
mov
movs
push
stos
push
je
adc
in
aad
les
(bad)
ret
jle
loopne
sbb
push
or
xor
mov
fs
movs
sbb
ret
out
movs
adc
push
je
and
pop
aad
push
gs
mov
cmp
fimul
mov
(bad)
ss
mov
sbb
cmc
jbe
enter
les
lahf
clc
cmp
into
sbb
mov
mov
sub
mov
sbb
(bad)
stc
je
pop
scas
dec
fmul
push
loop
jecxz
inc
mov
cdq
das
and
test
iret
or
adc
adc
add
mov
clc
pop
push
dec
cld
dec
inc
push
and
adc
in
mov
adc
jno
mov
stos
ja
movs
rep
je
retf
jbe
cmp
scas
hlt
adc
or
pop
outs
fisub
jno
inc
mov
fisub
and
push
iret
out
or
in
xchg
xor
mov
fist
mov
mov
mov
inc
fwait
retf
movs
push
cmp
icebp
enter
ret
retf
push
stos
and
jo
mov
mov
jg
aad
mov
lods
inc
test
fst
and
outs
(bad)
cmp
fidivr
add
fild
test
mov
cli
sbb
div
enter
cmps
ss
ins
pop
popf
retf
fisub
inc
or
mov
repz
ins
xchg
dec
aam
lock
fs
cmps
popa
ss
shr
nop
jmp
xchg
cs
or
mov
lahf
fwait
ret
ins
iret
cmp
imul
shr
rcr
rcr
or
adc
loopne
in
cmp
adc
push
stc
cwde
ja
int3
jae
add
push
push
mov
dec
cmp
push
mov
shl
adc
mov
push
mov
dec
je
inc
sbb
(bad)
mov
shl
lahf
mov
lds
xchg
xchg
jle
and
inc
bound
ins
or
mov
jp
push
dec
jl
xor
jno
aaa
int3
fcomp
mov
pop
cmps
out
adc
sub
jg
clc
cld
cmp
out
(bad)
fbld
mov
es
cmp
xchg
sar
jmp
add
mov
sub
repz
(bad)
shl
outs
fucomip
add
cmp
add
or
mov
jge
pop
sbb
dec
stos
sahf
ds
pop
daa
dec
mov
sbb
dec
sbb
mov
sub
adc
mov
out
stc
fst
sbb
or
jg
repz
xchg
jmp
retf
push
jge
imul
in
in
imul
test
inc
pop
inc
cmp
rol
push
push
pop
(bad)
mov
test
xchg
ror
dec
mov
test
add
mov
das
push
sbb
cmovne
xchg
adc
jns
sub
or
inc
mov
sar
scas
add
sbb
(bad)
stc
dec
imul
pop
jmp
aad
adc
xor
sub
out
jb
cld
in
aam
push
dec
stc
outs
ins
scas
jle
bound
lods
pop
lods
adc
inc
cwde
fwait
push
ja
imul
xor
packsswb
outs
push
push
inc
sbb
sti
data16
push
push
xor
les
je
out
mov
mov
rcr
jmp
xchg
daa
xchg
sahf
hlt
movs
loop
sar
cs
mov
fwait
mov
imul
jmp
push
xchg
aaa
test
jo
cmps
popf
mov
dec
je
mov
outs
and
jbe
ins
inc
pushf
outs
mov
mov
in
xchg
mov
test
adc
out
cli
jns
push
(bad)
pushf
jg
pop
lds
stos
pop
ins
dec
jb
cwde
in
ds
mov
repnz
fadd
jns
cmp
shl
sbb
or
mov
and
xchg
xor
ret
dec
jmp
stos
stos
iret
dec
outs
mov
or
dec
stos
and
sub
in
add
dec
inc
sbb
mov
mov
pop
imul
not
test
mov
jno
mov
mov
xor
pop
in
sub
pop
fnsave
mov
mov
sahf
inc
mov
pop
fnstenv
mov
cmps
sub
mov
(bad)
aam
pop
popf
pop
add
add
fist
lock
(bad)
out
xchg
pop
lods
pop
mov
xchg
fild
imul
push
inc
and
sub
xchg
dec
mov
inc
pop
xchg
das
mov
xchg
(bad)
cmp
shl
xchg
inc
(bad)
fidivr
sub
cwde
(bad)
jl
xchg
lods
loope
add
test
push
adc
adc
(bad)
xchg
iret
icebp
mov
pop
sbb
aaa
scas
pop
and
xor
stos
or
dec
movs
mov
xor
pop
out
sbb
daa
mov
mov
xor
jbe
adc
jne
and
dec
mov
inc
mov
sti
push
and
cmp
dec
inc
xlat
adc
pusha
sub
add
mov
and
add
dec
mov
and
cdq
sbb
stos
sub
pusha
pop
ss
push
popf
test
fidiv
inc
cwde
dec
daa
mov
popf
push
mov
lds
add
cmp
dec
jno
out
and
call
sub
test
xor
sbb
jb
jle
jecxz
test
pop
fdivp
test
jbe
nop
xchg
mov
xchg
(bad)
fadd
arpl
cmps
stos
lds
or
ins
fld
jae
xor
popf
add
aam
sub
(bad)
push
pop
and
and
add
pop
rcr
ret
stos
iret
test
add
inc
adc
jne
xchg
dec
lods
mov
ins
adc
aad
out
loopne
outs
mov
push
push
cmp
shl
jle
stos
mov
add
popf
mul
xchg
repz
dec
push
in
lock
call
outs
mov
pushf
out
xchg
into
jmp
sti
loopne
xor
loope
mov
jne
dec
imul
adc
mov
repnz
dec
daa
push
(bad)
daa
mov
xchg
jle
(bad)
scas
xor
fwait
mov
imul
popf
pop
lahf
xchg
call
inc
add
shl
jp
(bad)
loopne
inc
xor
dec
fld
mov
and
imul
addr16
mov
xor
mov
(bad)
je
call
mov
push
outs
cmp
imul
cmp
add
fist
push
ins
sub
or
dec
xchg
addr16
add
pop
into
pop
mov
pop
cmps
jne
scas
lahf
push
ds
out
(bad)
mov
push
jne
in
pop
cmp
mov
add
or
fcomp
sar
in
not
scas
test
mov
scas
inc
add
mov
iret
rcr
jp
xchg
in
sub
mov
jle
in
aam
aaa
outs
aad
xor
xchg
(bad)
cmp
pop
pop
push
cmp
or
cmp
fwait
jmp
hlt
pop
cwde
addr16
xor
popa
mov
jo
cmp
in
movs
mov
iret
iret
mov
and
in
mov
mov
or
push
push
push
jg
push
sbb
pop
int3
retf
jmp
(bad)
lods
xor
cpuid
push
mov
sbb
mov
dec
fs
sub
push
mov
and
xchg
clc
out
addr16
fiadd
jmp
std
js
push
jmp
mov
shr
rol
lods
xchg
repnz
stos
sbb
fwait
cld
repz
or
das
or
push
add
in
shl
les
retf
nop
inc
sbb
xor
fst
xor
stc
jb
cmp
repnz
jnp
mov
jg
(bad)
fidiv
std
push
sahf
add
sub
(bad)
(bad)
(bad)
sub
or
mov
dec
adc
sti
inc
mov
dec
sti
mov
leave
(bad)
inc
dec
fsub
in
stos
mov
xchg
das
jecxz
imul
test
pusha
mov
sbb
test
cld
rol
leave
lds
dec
or
call
(bad)
outs
and
sar
into
pop
call
daa
add
repz
retf
repz
repnz
pop
jns
mov
sub
adc
repz
fwait
das
xchg
ficom
jnp
jl
push
push
inc
mov
test
mul
popa
jmp
cmp
or
sub
pop
mov
cli
xchg
fwait
jbe
inc
sub
mov
mov
repz
jns
call
bound
push
sbb
sbb
pop
cmps
jns
pop
push
imul
cmp
inc
cmp
cmp
imul
cmp
out
(bad)
mov
out
jae
je
add
sbb
mov
xchg
(bad)
add
mov
dec
es
mov
mov
enter
and
mov
mov
add
xchg
fistp
mov
icebp
inc
lds
ror
dec
sbb
xchg
ins
or
and
push
iret
imul
lea
cmp
ins
jge
lods
pop
mov
push
jl
cwde
(bad)
shl
test
pushaw
ret
inc
imul
pop
(bad)
and
or
mov
push
mov
cmp
mov
iret
jl
sbb
mov
js
mov
rol
mov
je
jmp
mov
cmp
sub
das
int3
and
xrelease
cmp
(bad)
jmp
stos
out
xor
cmp
or
(bad)
push
leave
sbb
sbb
dec
and
push
jmp
fsubr
daa
test
pop
pop
sub
retf
mov
xchg
jmp
dec
add
xor
xor
clc
lods
es
push
mov
aad
cmp
pop
mov
inc
inc
jno
pushf
jnp
(bad)
call
rol
mov
dec
xchg
mov
bound
or
rol
movs
jne
mov
clc
xchg
addr16
(bad)
mov
cmp
fs
loopne
arpl
pop
pop
popf
inc
enter
ficom
in
push
add
dec
pusha
shl
pop
sub
pop
inc
dec
fmul
or
xchg
idiv
aas
jnp
lods
stos
xor
shl
add
sbb
enter
iret
enter
sub
jnp
mov
aas
push
push
dec
retf
div
cs
push
inc
mov
sbb
xchg
fistp
ja
xchg
cmps
xchg
mov
int
cdq
enter
icebp
inc
repnz
add
xor
mov
stc
inc
retf
push
test
(bad)
sbb
cmp
out
je
fmul
int
cmp
(bad)
neg
or
pop
js
and
mov
pushf
dec
and
rcl
lods
pop
inc
adc
fdiv
xchg
pop
mov
pop
or
mov
cs
addr16
scas
xor
ror
pushf
sbb
jns
imul
push
repnz
jae
jmp
push
imul
cs
xlat
or
outs
adc
or
inc
shr
aas
push
jmp
mov
sahf
loope
popf
jmp
push
mov
and
pushf
xchg
in
inc
inc
inc
stos
and
jae
sbb
test
cdq
dec
call
daa
jmp
xor
cmp
(bad)
jo
out
cmp
adc
sbb
mov
mov
cwde
bound
xchg
imul
mov
jno
lea
test
ds
in
mov
nop
daa
cdq
xchg
or
push
scas
mov
mov
jae
aad
jns
enter
in
and
mov
sub
imul
js
stos
sbb
jl
jne
rcr
in
adc
cmp
aaa
rcl
in
loop
inc
jmp
inc
push
adc
outs
pop
jb
jge
sbb
cmp
add
sahf
scas
in
inc
pop
imul
add
pop
push
add
push
std
test
push
push
push
imul
lods
ins
into
cmp
mov
sbb
clc
and
cmps
out
xor
cdq
mov
test
jmp
jmp
shl
and
hlt
and
inc
(bad)
outs
add
iret
xor
mov
mov
xor
cs
sar
mov
xchg
(bad)
push
xor
ret
in
add
pusha
idiv
repz
ror
push
sbb
or
imul
fidiv
xchg
xchg
jl
ret
xchg
fdiv
repz
push
jge
dec
xor
sub
ficom
jmp
(bad)
in
aas
sti
popa
mov
shl
nop
pop
jb
cli
int3
mov
xor
jg
int3
sbb
cmc
mov
xchg
push
inc
mov
jb
fsubr
std
mov
arpl
mov
sub
aas
shr
or
pop
mov
push
xchg
xchg
jle
(bad)
xor
stc
cdq
push
fs
outs
and
adc
xor
stc
and
or
stc
stc
mov
call
and
stc
mov
cmp
mov
stc
icebp
xchg
into
mov
cmps
cld
pop
dec
repnz
daa
aas
mov
out
cmps
leave
iret
adc
out
jmp
xchg
leave
adc
cmp
sub
retf
push
cmp
mov
sub
pop
xor
mov
loopne
mov
xchg
ins
dec
cmp
lds
sbb
pop
pop
test
and
mov
popa
inc
fidiv
jl
xchg
pushf
push
jmp
leave
sub
xor
cmp
pop
pop
dec
hlt
je
push
imul
cli
mov
mov
xlat
jle
pop
(bad)
in
inc
xchg
pusha
(bad)
and
cmp
rcr
dec
arpl
cld
fidivr
inc
mov
sub
lods
mov
mov
push
pop
xor
(bad)
fsubr
jle
clc
aaa
push
scas
jbe
dec
fisttp
not
cmps
int3
outs
pop
mov
sbb
(bad)
add
push
sub
in
stos
xchg
xor
inc
ds
push
sub
lds
in
in
sub
jae
out
sub
sbb
mov
pop
mov
enter
mov
add
ror
fbld
mov
and
xor
mov
pop
dec
test
sbb
xor
sbb
mov
sbb
fisub
xacquire
sub
sub
inc
out
xchg
xor
sahf
xchg
test
push
daa
xchg
ss
ins
pop
ss
pop
or
outs
call
sbb
jne
rep
inc
xchg
pop
pop
loope
push
aas
sbb
jne
sbb
icebp
aaa
mov
test
cs
dec
jne
sub
dec
xchg
mov
cmp
cmps
rol
aam
adc
inc
retf
dec
sub
icebp
iret
test
jns
pop
xchg
mov
mov
ins
dec
jns
fistp
add
scas
sub
add
std
and
es
lock
arpl
pop
or
(bad)
mov
jnp
repnz
mov
(bad)
leave
push
inc
arpl
mov
sar
not
push
xchg
xchg
xchg
sahf
cmp
and
mov
mov
out
das
shl
xor
sub
add
das
ror
or
push
add
test
xor
dec
inc
mov
sub
std
inc
loop
mov
dec
xchg
loop
jbe
cld
ss
jns
mov
jg
push
sub
and
xor
mov
adc
test
aaa
cs
or
mov
sub
shl
cmp
fdiv
sbb
mov
jae
and
mov
repz
outs
dec
sahf
out
sub
lds
mov
je
jle
and
mov
xchg
call
retf
xchg
call
idiv
movs
cmp
jb
iret
sbb
push
pop
dec
shl
xor
cld
or
retf
lods
sub
xor
sbb
push
push
mov
(bad)
sti
dec
pop
repnz
xchg
clc
ret
cs
shr
out
loope
mov
pop
(bad)
and
(bad)
mov
aad
and
enter
mov
lea
scas
fimul
push
jg
pop
les
mov
stos
mov
jmp
push
icebp
in
add
mov
scas
arpl
nop
pop
int3
leave
pop
js
sar
gs
es
(bad)
and
and
push
xor
ja
mov
aad
adc
add
add
or
mov
(bad)
add
push
xor
pushf
dec
inc
bound
clc
pmaxub
stos
cmc
add
sbb
lea
nop
popa
xor
push
jb
mov
jge
movs
aam
pop
sbb
repnz
or
sti
ret
and
mov
or
imul
dec
(bad)
cwde
mov
or
leave
cmc
pushf
pop
loopne
(bad)
mov
jb
movs
mov
gs
add
and
inc
leave
imul
inc
push
sub
repnz
in
cmps
pop
pop
cmp
cwde
ins
lea
aad
dec
cmp
repnz
adc
mov
test
push
xor
fs
and
(bad)
fimul
rol
mov
cli
stc
mov
xor
and
sub
ja
jmp
movs
cld
sub
and
xchg
imul
push
test
mov
nop
leave
dec
sar
iret
mov
fcomp
sbb
inc
push
ja
dec
push
in
and
loopne
pop
sub
cmp
mov
hlt
adc
push
in
int3
loopne
cmp
imul
fisttp
add
mov
(bad)
aad
xchg
dec
xor
out
cmps
mov
pop
mov
cmp
sub
mov
jbe
dec
or
jno
push
xchg
(bad)
ja
std
lock
ja
ds
sbb
lea
pop
sti
ins
or
jmp
(bad)
fstp
inc
dec
push
add
mov
popf
inc
pop
stos
inc
inc
test
shl
shr
push
cmc
ins
fs
sbb
punpcklwd
xchg
cmp
clc
push
jmp
jecxz
test
cmp
ror
cdq
lods
loope
hlt
xor
sbb
js
and
bound
mov
(bad)
xor
(bad)
push
aas
lock
mov
push
jp
lds
inc
test
mov
pop
shl
test
adc
pushf
gs
ror
mov
cmp
icebp
in
mov
fwait
mov
push
mov
xchg
ja
push
cmp
and
lods
lahf
push
aaa
xor
cwde
test
push
sti
mov
sbb
call
(bad)
clc
ins
mov
test
sahf
ja
es
outs
lods
and
imul
fmul
sti
push
adc
xchg
or
xchg
(bad)
sub
dec
sahf
aam
inc
pusha
ja
adc
aad
xlat
sbb
xor
nop
(bad)
loope
ds
mov
call
sub
sbb
ins
aad
pop
mov
arpl
adc
jl
cwde
lods
pop
scas
popf
mov
shr
repz
imul
fnsave
stos
mov
lds
pop
xchg
pop
add
lods
test
cmc
inc
retf
mov
mov
leave
xchg
adc
lea
xchg
jg
iret
mov
jo
pop
and
loopne
sbb
push
cdq
jl
jle
stc
aas
push
retf
mov
ins
pop
add
inc
push
pop
mov
dec
out
mov
add
stos
add
pop
jg
jno
sub
or
push
ret
push
loopne
into
in
mov
daa
std
sar
imul
aam
inc
sub
and
sti
aaa
aam
(bad)
xor
in
iret
jnp
push
lock
clc
fbld
cdq
xor
push
mov
icebp
xchg
sbb
in
out
jl
cmps
fidivr
div
fnsave
mov
xor
in
pusha
pushf
fsubrp
sub
add
sbb
mov
inc
jbe
sub
cwde
xchg
scas
mov
push
(bad)
ds
fstp
pop
rcl
pop
dec
mov
je
jp
stos
lods
xchg
dec
movs
(bad)
mov
adc
popa
mov
pop
call
lea
jne
and
fld
jb
sub
je
inc
inc
aam
mov
clc
popf
pop
pop
xchg
pop
add
mov
sub
cmps
add
not
div
retf
lods
pop
sbb
sbb
push
jge
int
(bad)
and
push
or
adc
pop
cmp
mov
ficom
push
adc
rcl
movs
out
jmp
fs
movlps
out
inc
and
cld
out
sub
cmp
and
ret
push
pop
cmps
mov
sbb
shr
je
cli
mov
xchg
cmps
fstp
mov
adc
nop
xor
test
mov
or
push
sbb
push
das
xchg
mov
ret
call
ror
adc
add
mov
inc
inc
je
pop
retf
inc
out
std
enter
cmp
std
dec
cld
out
shl
addr16
(bad)
scas
and
pop
push
inc
(bad)
fnstsw
sbb
sbb
jle
inc
inc
jb
cmp
hlt
ret
enter
std
das
mov
jmp
xor
pop
cmps
retf
add
inc
sub
pop
mov
cdq
mov
test
fstp
add
in
sti
jae
cli
leave
mov
mov
cdq
pop
xchg
mov
inc
loop
mov
repnz
sub
out
mov
outs
imul
das
retf
xor
add
pop
nop
and
test
pop
jg
sub
jmp
out
mov
scas
inc
cld
dec
cld
xchg
icebp
aaa
sahf
xchg
addr16
inc
sub
das
jp
xlat
scas
cmp
call
div
mov
inc
push
mov
rol
xchg
inc
pop
add
sbb
pop
add
cdq
xchg
in
add
mov
das
jns
dec
out
loopne
fcmovbe
shr
scas
adc
mov
out
int3
inc
mov
mov
mov
jmp
mov
fnstenv
cmps
out
xchg
std
dec
jp
mov
or
xor
shl
fucomp
hlt
rol
pushf
lock
clc
mov
int
xor
xchg
jle
in
scas
cmp
ja
fdiv
jge
repnz
mov
pop
xchg
jl
mov
adc
shl
add
pushf
adc
test
add
clc
mov
call
les
xchg
sbb
mov
mov
jmp
mov
lds
jne
push
retf
xor
(bad)
(bad)
lahf
mov
mov
ja
mov
outs
dec
aas
ja
pop
xor
jno
sub
imul
repz
sti
out
cli
repnz
xor
adc
lods
jo
pusha
ret
push
mov
movs
ja
in
aas
mov
pavgb
je
js
std
add
push
cmp
in
enter
dec
wbinvd
xchg
hlt
ror
mov
iret
push
adc
xor
stc
inc
ret
pushf
sub
sub
(bad)
retf
iret
xchg
loopne
iret
iret
jecxz
mov
pop
int3
and
lds
jb
ja
push
ret
in
in
and
adc
shr
inc
add
adc
mov
inc
sti
or
or
push
jnp
jne
ds
sbb
mov
add
cli
adc
pop
mov
das
daa
sbb
sbb
jne
xor
jno
(bad)
mov
xchg
ss
ror
addr16
push
or
cmps
inc
call
movd
ja
mov
inc
pop
fistp
and
sub
mov
xchg
cs
test
mov
cli
jmp
pop
mov
mov
sub
pop
iret
inc
cmc
jns
inc
mov
shl
xor
mov
das
pop
jmp
shl
stc
or
push
(bad)
out
lock
inc
mov
fstp
imul
jmp
xchg
and
cwde
fld
mov
push
shl
and
mov
adc
sub
and
mov
loop
lock
movs
sub
je
call
pop
lea
fld
popa
mov
dec
mov
push
into
pop
add
in
nop
mov
inc
in
stos
cmp
popf
sub
and
stc
xchg
stc
add
or
call
jns
mov
xchg
xchg
inc
sbb
jg
mov
jg
iret
popf
call
cdq
jmp
retf
call
loopne
in
dec
fwait
inc
(bad)
loopne
add
scas
adc
and
pop
nop
inc
xor
daa
test
lods
js
sub
iret
shl
loopne
imul
dec
(bad)
pop
pop
mov
xor
mov
call
xor
push
push
out
(bad)
icebp
in
outs
mov
fwait
vmwrite
stos
adc
jno
pop
repnz
push
inc
push
stc
in
xchg
dec
icebp
push
and
out
lds
call
adc
loope
neg
mov
jmp
sub
push
mov
mov
ja
shr
div
mov
js
sbb
outs
cmp
lea
sub
jno
test
mov
mov
mov
adc
mov
mov
outs
nop
and
cwde
int3
inc
sbb
scas
test
jno
mov
xor
leave
and
shr
fisttp
push
mov
aam
push
jmp
push
in
rcl
loope
ins
jmp
mov
cmp
jae
push
xchg
ds
retf
fs
push
mov
and
cmp
aas
mov
(bad)
jmp
retf
push
(bad)
retf
sbb
ret
xor
test
inc
js
adc
ror
js
test
call
adc
mov
ds
mov
inc
scas
or
sbb
fild
add
icebp
or
pop
cmp
js
and
dec
cwde
pop
mov
frstor
push
in
jge
mov
push
daa
cmp
push
fs
dec
jle
mov
sub
retf
push
out
out
inc
dec
mov
sbb
inc
ss
(bad)
push
stos
neg
clc
pop
cwde
ins
in
mov
stos
not
xor
add
repz
das
jns
lods
mov
cmp
cmps
push
scas
xor
jmp
xlat
shr
add
test
out
daa
addr16
add
sti
or
inc
cmp
sub
mov
jmp
xchg
pop
cmp
cld
jns
jo
cmp
pop
(bad)
mov
jns
ret
cmp
les
int
push
mov
xor
cmc
shl
jge
(bad)
in
clc
outs
stos
cmp
dec
push
les
xor
repnz
ror
nop
inc
inc
cmp
jno
xchg
xor
call
lds
adc
mov
xchg
xor
cmp
sbb
movs
retf
sub
sub
jmp
jg
(bad)
adc
repnz
call
xchg
mov
cli
(bad)
adc
or
dec
mov
pop
sahf
add
shl
jne
pusha
dec
mov
out
call
lock
sbb
and
out
outs
icebp
sbb
cmp
pop
out
pop
cmps
mov
pop
pushw
pop
add
aad
neg
dec
int3
inc
inc
cmp
mov
pop
adc
lods
ins
popa
jno
push
pop
cmp
mov
dec
movs
(bad)
jl
out
jl
fld
cmc
mov
cmp
es
pop
movs
dec
xchg
sbb
ds
push
and
fadd
xor
rcl
xlat
add
add
mov
mov
mov
lods
mov
push
and
adc
and
pop
imul
stc
loope
sbb
mov
daa
mov
shr
mov
mov
bound
dec
add
daa
mov
cmp
and
inc
jae
aad
dec
cmp
test
mov
push
inc
push
push
cwde
mov
cmp
aam
addr16
test
pop
add
daa
push
dec
jmp
loope
and
sub
mov
popw
pop
lods
and
imul
xor
pop
mov
inc
push
pop
fadd
xchg
fisubr
into
dec
mov
add
mov
enter
dec
out
jo
ins
loop
pop
inc
fistp
sub
pop
mov
xlat
shl
push
shr
dec
pop
dec
imul
inc
jb
mov
rcr
stc
cwde
jb
cmp
icebp
xchg
aas
dec
bound
not
mov
or
sub
bound
sub
mov
push
jp
adc
inc
jb
scas
call
mov
rol
test
mov
dec
mov
popf
cwde
ins
sbb
iret
test
add
mov
imul
mov
(bad)
adc
mov
push
sbb
mov
fwait
xchg
sbb
movs
add
out
enter
pop
sub
push
out
std
xlat
dec
imul
enter
mov
fistp
jl
xchg
jl
test
in
pop
sub
xor
sbb
mov
pop
mov
out
push
mov
push
std
js
adc
sbb
clc
fldcw
repnz
(bad)
adc
adc
movs
jb
std
and
data16
mov
inc
ss
sub
sbb
jmp
lahf
(bad)
adc
cmp
jo
mov
xor
stos
loop
stos
push
add
add
scas
cwde
xlat
loope
adc
push
cs
dec
sbb
test
jmp
and
jnp
ret
jne
loop
sti
xchg
add
push
sub
and
cmp
frstor
int3
jb
push
outs
sub
test
jg
stc
pop
mov
mov
adc
(bad)
jp
hlt
mov
jl
pop
fwait
adc
fisub
mov
add
jae
xchg
mov
pop
mov
sub
xor
scas
(bad)
mov
fucomi
dec
shl
or
neg
imul
not
mov
sti
cmp
(bad)
add
(bad)
lock
mov
cli
fild
or
jl
cld
in
scas
cmp
ss
push
adc
and
imul
fnstcw
icebp
push
mov
jb
out
sbb
and
shl
ret
test
in
out
pop
int3
mov
and
adc
pop
rcr
inc
stc
mov
imul
hlt
lock
imul
movs
mov
bound
ds
int
jmp
dec
jne
pop
fwait
cmp
inc
aam
test
out
lahf
std
lds
xor
in
lods
iret
push
add
ret
outs
shl
pop
lahf
test
add
mov
push
retf
and
movs
neg
push
out
mov
fisub
out
adc
xor
xor
cld
pop
loopne
cdq
mov
and
and
push
addr16
jo
cmp
es
mov
xchg
jno
xor
pushf
popf
jecxz
loopne
and
jno
push
adc
ret
push
and
mov
mov
sub
dec
inc
pop
adc
(bad)
xchg
dec
loopne
mov
es
pop
mov
mov
sub
sub
or
and
lds
test
ret
push
add
xchg
js
call
out
popf
je
jge
pop
out
loop
popa
jmp
xor
pop
das
enter
lahf
sub
xchg
mov
sub
fsub
push
jmp
fs
outs
sbb
jp
leave
addr16
imul
mov
sub
icebp
mov
mov
cmp
sti
jo
or
es
imul
xchg
stc
retf
cdq
icebp
shr
push
pop
dec
push
adc
sti
fcomip
cs
out
fild
fcmovne
mov
(bad)
jge
neg
fild
(bad)
cmp
fistp
jge
mov
sub
jle
in
out
adc
xchg
test
cmps
mov
and
gs
lods
adc
fwait
mov
fisttp
in
iret
lods
dec
stos
ds
pusha
mov
int
ins
add
dec
fisubr
daa
out
xchg
clc
pop
jae
outs
imul
jle
enter
and
or
lahf
xchg
add
cmp
adc
mov
cmp
in
cmp
icebp
sar
out
icebp
fld
outs
out
adc
sub
sub
out
jmp
mov
outs
test
lock
scas
dec
cdq
pusha
imul
and
ja
or
jmp
test
(bad)
xor
sub
sbb
push
adc
dec
and
push
mov
jg
dec
inc
sbb
inc
test
sub
pushf
fild
xor
test
sub
nop
daa
fcom
pop
mov
jp
xchg
mov
mov
jae
icebp
popf
cmp
cdq
aam
enter
in
or
test
std
push
je
mov
in
pop
xchg
sub
fimul
inc
sub
scas
mov
aad
pop
leave
or
test
js
push
scas
loopne
shl
mov
mov
jmp
aaa
cmp
sahf
aaa
les
lock
mov
sti
adc
add
repz
or
lods
retf
push
fcomi
clc
mov
stos
or
retf
bound
mov
add
inc
pop
add
aaa
cld
cmc
lock
clc
rcl
mov
ds
sbb
aas
pop
xchg
cmp
aaa
cld
stc
sub
pop
mov
ret
loop
movd
leave
mov
pop
(bad)
mul
sbb
mov
add
push
xadd
add
repz
push
out
sub
push
adc
sub
movs
jmp
out
and
daa
push
mov
mov
aad
stc
fisub
mov
daa
shl
lock
dec
mov
xchg
les
push
mov
pop
sbb
jecxz
adc
pop
out
imul
fld
div
mov
retf
shl
test
rcl
clc
and
sub
test
sub
xor
pop
dec
mov
mov
xchg
(bad)
mov
outs
jo
push
enter
pop
mov
jg
xchg
loop
sub
je
loopne
push
inc
cmp
inc
leave
or
add
adc
xor
rcl
cwde
pop
mov
cmp
or
or
inc
mov
mov
ins
and
xchg
outs
(bad)
adc
mov
push
sub
stos
dec
sub
sub
push
pop
es
jne
mov
pop
(bad)
leave
movs
sbb
adc
xchg
xchg
movs
and
ins
sub
in
pop
call
cmp
mov
pop
xor
enter
jle
jne
pop
repnz
xor
or
sub
cld
mov
fstp
in
stos
stos
fcmovbe
in
add
pop
je
dec
dec
xchg
das
outs
fist
lods
div
xor
add
xchg
fidivr
out
cwde
add
cmc
sub
pusha
mov
and
mov
dec
pop
sbb
lds
iret
push
mov
inc
fs
xchg
push
out
in
mov
mov
pop
shl
repnz
sti
xchg
jno
pop
mov
mov
pop
and
popf
mov
mov
xchg
pop
bound
ja
shl
movs
push
retf
inc
xor
inc
add
xor
fadd
cmp
mov
or
(bad)
fist
inc
repnz
xchg
rcr
div
sar
mov
inc
(bad)
bound
aas
pop
push
sbb
or
call
ficom
aam
mov
lock
fmul
rcl
jg
iret
mov
mov
fs
dec
in
mov
adc
fwait
or
jecxz
pop
jmp
data16
je
icebp
jp
jmp
scas
test
mov
cmp
jp
test
std
loop
pop
ins
dec
mov
or
leave
push
mov
pop
mov
or
pushf
dec
call
cld
add
ss
sub
fistp
data16
ins
fwait
dec
fucomip
push
bound
out
out
ja
jecxz
or
xchg
xchg
mov
scas
add
sub
adc
dec
aam
xchg
or
push
push
(bad)
clc
adc
push
cdq
das
cmps
in
std
test
shl
js
(bad)
or
mov
dec
dec
xlat
and
(bad)
xchg
adc
dec
dec
test
repnz
xchg
mov
int
dec
lods
add
shl
or
jmp
mov
mov
and
pop
inc
push
enter
lds
xchg
dec
pop
loope
out
fld
nop
push
aam
adc
add
js
fmul
xchg
out
xor
in
data16
push
jl
mov
out
and
cmp
repnz
jno
push
push
xor
add
scas
cmp
out
out
inc
imul
jns
test
add
ficom
adc
or
out
imul
dec
imul
sbb
pop
adc
dec
dec
movs
cwde
shl
mov
neg
fsubr
pop
sbb
(bad)
or
aam
mov
sub
adc
dec
(bad)
mov
push
sar
mov
mov
sbb
mov
repz
int
les
shr
retf
addr16
inc
jecxz
fst
les
adc
ja
jmp
mov
xchg
sar
lock
inc
and
mov
retf
adc
aas
inc
cdq
or
arpl
psubsb
add
(bad)
sti
idiv
enter
and
mov
pop
jae
adc
cmps
(bad)
(bad)
jp
jp
loope
jmp
aaa
push
lds
mov
je
add
not
(bad)
and
test
icebp
repnz
test
add
mov
cmp
xchg
or
ja
ss
stc
xlat
lods
adc
cmp
dec
repz
sar
add
sub
adc
jno
sub
cmc
pop
ret
xor
and
sbb
jle
retf
ss
jmp
out
xchg
hlt
cli
xor
lahf
sahf
imul
xchg
aam
out
mov
inc
ins
cli
inc
test
mov
jo
mov
ror
xchg
(bad)
sbb
dec
popf
dec
shr
sbb
push
push
call
xchg
cmp
arpl
xchg
push
in
cmps
push
lods
cmp
test
push
int3
mov
inc
sub
mov
dec
cdq
jle
arpl
jmp
lods
pop
cmp
aas
mov
sbb
jbe
imul
dec
inc
dec
mov
or
xor
(bad)
lds
(bad)
xor
fbstp
std
add
sub
adc
movs
imul
inc
std
cmp
inc
nop
fld
push
outs
std
sub
push
cwde
ds
jb
lods
shr
inc
sub
inc
hlt
dec
push
xchg
les
out
mov
mov
fiadd
std
test
sbb
(bad)
loop
or
shl
call
fstp
pop
xchg
dec
mov
mov
outs
bound
or
cmp
out
lods
cmps
dec
jnp
mov
loop
call
ror
push
inc
cmp
xor
mov
or
dec
inc
movs
or
pushf
and
sub
fbstp
retf
pop
mov
mov
and
ins
jecxz
loop
xchg
adc
or
jno
push
sbb
and
(bad)
out
in
jecxz
inc
in
adc
pop
shl
jp
fwait
push
out
(bad)
mov
dec
jno
ins
mov
mov
test
fiadd
nop
pop
sbb
mov
pop
and
sub
sub
outs
add
addr16
aam
or
mov
(bad)
pop
jp
jg
call
call
ret
add
pop
clc
jg
cld
pop
hlt
mov
in
leave
push
cld
xor
xchg
test
jle
inc
add
dec
je
test
inc
outs
mov
adc
icebp
fwait
das
inc
or
fisubr
mov
push
les
and
rcr
pop
cwde
frstor
repnz
sbb
adc
cs
lahf
cmps
fst
std
jno
push
adc
jmp
mov
sub
mov
mov
movs
and
imul
(bad)
scas
popf
lea
(bad)
mov
aas
sub
sub
mov
cmp
add
test
mov
outs
das
(bad)
out
mov
sbb
leave
jecxz
xchg
fcomi
jnp
pop
sar
clc
jg
jle
addr16
out
sub
movs
(bad)
fndisi(8087
xor
mov
imul
sar
in
lock
pop
int3
mov
pop
cli
fs
fwait
pop
out
nop
retf
popf
jb
gs
scas
dec
repnz
clc
mov
push
dec
rcl
rcl
inc
xchg
out
and
out
pcmpgtd
shl
mov
test
pop
les
push
cli
popa
dec
sub
arpl
and
cmps
hlt
lahf
lods
mov
xor
adc
sbb
jle
xor
ret
sti
sar
mov
mov
ror
add
mov
repz
loope
cmp
cdq
jl
shl
inc
jns
aaa
ins
cmc
mov
sub
cmp
test
adc
or
push
sub
scas
adc
push
test
xchg
xchg
jne
or
cmps
mov
mov
mov
ret
aaa
jecxz
js
aas
or
jp
mov
sti
mov
xlat
mov
movs
xchg
xor
dec
mov
cs
mov
and
cwde
xor
sbb
add
cld
out
and
enter
ins
bound
push
mov
ret
sahf
aad
xchg
test
mov
cs
idiv
loope
aad
sub
lahf
pop
dec
jo
and
mov
addr16
ins
mov
retf
dec
xchg
lods
cmp
push
add
xchg
sub
jle
les
mov
mul
sub
or
mov
dec
cmp
shl
sti
aad
or
dec
mov
mov
sub
sbb
xchg
jne
in
xchg
adc
mov
sub
inc
or
inc
leave
add
jge
jg
loopne
popf
jb
inc
xor
mov
mov
or
push
cmp
pop
ins
movs
inc
xor
dec
je
inc
arpl
mov
std
pop
enter
xor
mov
add
sbb
inc
add
adc
scas
cmp
sub
or
lods
mov
push
dec
xchg
popa
jl
bound
xor
push
add
aas
outs
xor
add
out
nop
out
retf
sub
sbb
adc
int
push
mov
mov
add
adc
jmp
call
pop
jb
std
dec
sbb
and
xor
and
mov
xor
nop
nop
int
jae
inc
xor
add
jmp
fs
push
loope
fnstsw
mov
cmc
scas
jo
pop
pop
out
and
add
out
push
and
ss
lock
jmp
mov
push
inc
xchg
fwait
popa
or
xchg
jmp
rol
pop
mov
lahf
xlat
sbb
(bad)
arpl
scas
sbb
mov
daa
in
lahf
lods
ins
add
das
mov
pop
das
mov
(bad)
jae
daa
dec
xchg
mov
inc
cs
sub
inc
pusha
jno
mov
jae
xchg
int3
retf
mov
bnd
push
ficomp
xlat
xchg
into
das
ret
or
jl
nop
mov
and
cli
jne
jnp
hlt
push
sbb
ins
push
mov
cmp
test
jmp
pop
sub
call
rol
sub
pop
stos
xchg
neg
int3
pop
jecxz
xlat
icebp
push
lea
push
data16
ret
xchg
pop
sub
sar
mov
mov
lock
mov
cmp
lods
dec
call
retf
cmps
push
xor
pop
ja
rcr
mov
pop
pusha
mov
repnz
cwde
jl
fwait
xchg
fistp
xchg
fdivrp
add
xchg
jmp
hlt
or
adc
sub
pop
sub
mov
and
jle
pop
pop
mov
retf
sbb
cmc
out
cmps
mov
outs
das
repz
add
jae
jne
mov
ret
jmp
push
lock
dec
jp
pop
call
leave
cmp
xchg
and
test
mov
dec
repz
je
pop
mov
or
push
jo
and
fsub
or
cmp
xor
lea
loope
stos
xchg
jl
mov
xchg
iret
in
mov
push
push
int3
pop
add
mov
and
adc
leave
cmp
xor
(bad)
(bad)
popa
ret
push
xchg
shr
xor
mov
call
xor
pop
or
lock
push
pop
xchg
ja
mov
hlt
outs
int3
cmp
jns
pop
sahf
sub
jae
mov
sti
mov
cdq
outs
out
push
in
adc
out
scas
movs
outs
rcl
scas
jp
clc
aaa
mov
add
sub
and
sub
in
jmp
out
mov
dec
cli
push
dec
mov
cmp
mov
mov
mov
in
repz
mov
or
loopne
popa
xchg
mov
or
add
dec
loopne
sbb
xchg
xor
sub
lea
and
les
inc
into
xlat
das
xor
shl
cmp
mov
jae
jmp
pop
icebp
retf
xchg
cli
inc
movs
ret
sbb
pop
(bad)
and
(bad)
test
rcl
and
inc
dec
or
jbe
aad
sahf
(bad)
cmp
push
fwait
das
mov
iret
dec
test
inc
cdq
aad
repnz
adc
pop
jmp
and
test
fldenv
pop
mov
or
xlat
mov
or
ds
(bad)
cmp
mov
mov
loopne
lea
inc
jge
pop
outs
lods
adc
or
push
mov
ins
inc
aas
scas
std
imul
push
fistp
mov
les
mov
pop
repnz
test
in
jae
out
std
bound
pushf
push
cmp
dec
mov
cld
add
push
in
xlat
cld
pop
jne
push
call
movs
inc
scas
out
mov
enter
jo
xor
cs
mov
ficom
imul
icebp
imul
mov
pop
jmp
mov
int3
rcl
xlat
fimul
or
in
sbb
xor
adc
jg
popf
(bad)
jbe
test
xlat
jmp
stos
aam
aam
adc
jl
loop
sub
retf
mov
aad
test
(bad)
xchg
xchg
retf
sub
and
jo
aas
mov
int
bound
shl
mov
loop
push
test
adc
adc
push
lahf
xchg
lods
pop
imul
push
(bad)
std
xor
and
pop
int
adc
inc
test
jg
imul
test
sbb
dec
adc
mov
movs
xchg
sub
ds
sub
retf
mov
pop
pushf
shl
and
sbb
out
movs
leave
adc
inc
nop
push
dec
in
pop
imul
mov
mov
pop
cmp
bound
fist
xor
outs
add
or
push
(bad)
(bad)
mov
add
aad
lahf
repnz
retf
mov
jb
push
fld
inc
in
ret
fist
lods
leave
jbe
mov
scas
jl
cmp
sbb
mov
pop
lea
stos
xor
cmps
xchg
inc
pop
ret
mov
addr16
div
xchg
inc
bound
lock
mul
mov
je
pusha
(bad)
lds
pop
add
(bad)
ror
add
push
and
add
aad
lea
hlt
dec
lods
in
in
pop
fs
mov
xor
xor
push
xor
and
adc
lds
shl
mov
dec
ins
cmp
call
in
ja
jge
(bad)
pop
mov
shl
nop
clc
xchg
push
dec
es
int3
aaa
ficomp
pop
jge
rol
xchg
add
pop
cdq
in
sub
retf
xchg
(bad)
mov
sar
cmp
aam
cs
jle
jmp
sahf
mov
jae
xlat
std
scas
outs
cmp
ins
fisub
dec
jecxz
int
pushf
jle
xchg
lock
int
cmp
fwait
mov
js
nop
in
cmp
sti
xlat
xor
pop
xor
pusha
pusha
adc
mov
sahf
in
jge
icebp
shl
sbb
in
loope
xor
xchg
add
pop
mov
mov
mov
pop
lock
imul
enter
push
hlt
scas
scas
push
fidivr
sub
xchg
outs
dec
cmc
test
dec
ins
cmp
push
jl
lahf
jp
lock
adc
std
adc
daa
outs
inc
xor
imul
and
push
inc
pop
repnz
popa
inc
(bad)
lods
(bad)
enter
fnsave
cmp
mov
sbb
push
mov
dec
dec
nop
sub
enter
mov
mov
push
out
inc
stos
ja
jmp
push
shr
inc
add
imul
dec
enter
aas
repnz
hlt
es
xchg
xchg
imul
xchg
gs
cmp
or
push
push
lods
leave
jp
call
les
test
pop
pop
fmul
out
outs
push
mov
jnp
mov
cmp
lods
jle
(bad)
mul
push
sub
pop
sahf
push
sub
ficomp
mov
mov
sbb
ror
addr16
adc
frstor
rcr
add
mov
fisub
shl
mov
ja
mov
and
mov
inc
adc
in
jns
inc
jbe
xchg
pop
pop
ret
jg
cmps
pop
cmps
dec
ins
dec
adc
ins
xchg
movs
shl
add
sub
fwait
pop
mov
div
or
(bad)
xchg
mul
cdq
outs
sbb
lds
sbb
out
sti
stos
(bad)
adc
(bad)
aas
or
gs
xor
dec
push
pop
loope
stc
ins
loope
std
sub
jl
sbb
mov
xor
test
jp
xchg
push
lahf
xchg
dec
int3
and
and
pop
ja
pop
sub
lock
xchg
or
repz
aas
fidivr
jl
jg
inc
mov
dec
add
call
(bad)
jge
clc
pop
push
sub
push
mov
ja
lock
lock
sti
xor
iret
test
cmp
jge
out
test
push
and
mov
inc
xchg
pop
or
pop
cli
jne
xor
xor
jl
shl
or
adc
add
jbe
dec
xchg
jge
jl
outs
enter
mov
pop
mov
jne
iret
pop
mov
retf
adc
shr
adc
loope
lea
test
gs
pop
into
outs
mov
rcl
fdivr
scas
aas
lahf
fnsetpm(287
sub
fcmovu
dec
or
dec
call
inc
jp
aad
mov
in
and
mov
push
push
fcom
mov
out
push
(bad)
push
cs
xchg
out
(bad)
ja
cmp
mov
gs
push
mov
shl
out
(bad)
aaa
ja
aas
cwde
(bad)
mov
jle
jb
inc
push
not
rcr
xchg
push
pop
and
or
dec
repnz
(bad)
inc
in
cmps
lock
or
inc
mov
or
and
jo
and
call
add
aas
(bad)
(bad)
ins
inc
adc
inc
add
call
test
and
jne
arpl
jl
ret
sub
mov
mov
fnsave
mov
or
inc
push
or
and
iret
cld
iret
cmp
dec
shl
jle
(bad)
(bad)
aas
call
out
int3
cdq
cdq
xor
pushf
cdq
sbb
lods
repnz
mov
add
jl
aas
xchg
jecxz
fimul
pushf
add
lea
or
call
lock
cmps
in
stos
or
xor
mov
push
pop
dec
or
sar
leave
xlat
cmps
inc
xchg
xchg
lahf
mov
push
push
xchg
gs
or
mov
pop
icebp
xchg
xchg
jg
or
neg
(bad)
cs
ins
in
es
fmul
in
mov
sbb
inc
sti
add
xor
lahf
std
arpl
out
mov
cmp
rcr
cmp
sbb
or
adc
jecxz
rol
cli
add
in
mov
jmp
sbb
in
xor
jg
jbe
or
jle
mov
lahf
outs
xor
xor
repz
into
std
arpl
push
arpl
mov
or
sub
in
sub
out
jb
ret
cdq
cld
enter
and
call
rol
jecxz
loop
jb
in
in
sub
push
jmp
and
out
pop
loope
stos
pop
stos
loopne
xchg
cmp
xchg
fsubr
bnd
dec
neg
pop
fmul
(bad)
das
inc
out
das
push
xlat
out
fidiv
in
jecxz
mov
jecxz
adc
sbb
retf
popa
add
mov
aaa
out
add
scas
fstp
fcom
pop
popa
fwait
test
hlt
xchg
jnp
dec
push
aam
fistp
jbe
mov
fidiv
sbb
clc
in
sub
pop
retf
adc
xchg
inc
or
retf
xchg
movs
(bad)
sub
add
mov
dec
cmc
sub
ins
rcl
fist
lock
pop
dec
enter
jae
movs
je
and
adc
push
xlat
inc
mov
rcl
rcl
in
pop
jg
adc
and
mov
add
sbb
jne
dec
xchg
inc
pop
loope
or
shl
retf
fild
test
or
xchg
jmp
test
rol
lock
xor
sbb
cld
cmps
pop
scas
dec
xchg
cli
jne
fcomi
sub
add
test
xchg
aam
push
rol
retf
test
xor
adc
(bad)
dec
mov
aas
mov
and
rcr
dec
cmps
out
xlat
arpl
pop
lods
out
dec
sti
add
ret
mov
or
inc
push
leave
pop
data16
jl
or
dec
aad
stos
(bad)
xor
adc
stc
sbb
dec
sbb
pop
inc
push
mov
mov
retf
mov
clc
daa
xchg
cmp
push
aad
mov
xor
pop
fdiv
jp
adc
je
cmp
xchg
push
call
cmc
dec
jmp
cld
outs
pushf
adc
or
xor
cmp
jno
retf
add
int3
cmp
add
xchg
das
les
fisub
jae
pushf
and
sbb
ss
dec
loopne
call
(bad)
mov
dec
daa
rol
push
clc
xlat
mov
int3
in
xchg
push
pop
or
(bad)
loope
mov
sbb
mov
cmp
cmp
fsub
sbb
out
sub
pop
ret
fs
pop
mov
adc
cmp
div
out
adc
(bad)
push
in
pop
mov
pop
xchg
es
lock
xor
cmps
jbe
jmp
mov
sub
push
dec
out
mov
adc
je
sub
xor
push
(bad)
mov
mov
ror
adc
fwait
lahf
cmp
sub
mov
fldenv
movs
call
into
push
and
(bad)
jnp
pop
jp
xchg
jb
test
(bad)
aam
inc
mov
ficom
sub
mov
xor
sub
icebp
movs
jecxz
ret
add
xchg
add
call
leave
in
inc
int3
and
mov
push
xchg
aam
mov
cmp
out
(bad)
psubusb
loope
or
mov
add
cs
adc
aaa
pusha
fild
inc
ror
push
mov
sbb
(bad)
inc
rol
pusha
int3
pop
cmp
icebp
scas
dec
int3
js
xchg
(bad)
xor
pop
xor
inc
outs
jge
push
push
inc
xchg
(bad)
fwait
nop
adc
sbb
sbb
cwde
push
pop
jle
sub
icebp
mov
push
fdiv
and
pop
push
rcr
push
jo
add
jbe
pop
xor
add
sub
push
gs
call
lock
push
shl
push
mov
pop
in
les
jmp
out
or
add
mov
push
mov
imul
rol
shl
cs
retf
sbb
les
jbe
ja
test
or
rcr
mov
mov
in
repnz
bound
jo
mov
jp
cs
fsubr
out
xchg
jno
icebp
and
push
mov
imul
xchg
and
xor
lods
or
movs
adc
std
and
pusha
cs
xchg
lds
mov
retf
cmps
ss
push
jmp
loope
mov
jecxz
xor
and
fisttp
sbb
aad
clc
xchg
pushf
jae
mov
sahf
repz
aad
loopne
push
ds
shl
clc
in
test
aas
loope
dec
dec
push
cmps
icebp
jg
xor
pop
call
dec
js
push
pop
sbb
mov
retf
xchg
aam
icebp
and
mov
push
pop
shl
loopne
jl
pop
movq
xchg
test
add
lock
inc
movs
out
call
dec
xchg
clc
test
mov
je
jge
ds
lahf
xchg
xchg
mov
xchg
(bad)
push
mov
dec
xchg
fmul
mov
cmp
pop
mov
(bad)
mov
arpl
dec
fidivr
jo
mov
pop
pop
sbb
and
rol
push
sahf
pop
movs
int
in
ret
bound
mov
enter
or
shl
mov
jmp
call
out
xchg
push
(bad)
push
(bad)
pushf
retf
cmp
les
xor
add
int
(bad)
out
fist
xor
(bad)
imul
lahf
xchg
xor
in
test
add
ficom
cmp
imul
adc
mov
and
mov
repz
push
add
mov
fild
mov
addr16
scas
in
jne
or
add
add
lock
ss
out
icebp
sbb
pop
add
(bad)
jno
mov
call
inc
call
mov
popa
outs
fmul
out
sbb
cs
idiv
jb
sub
repz
outs
icebp
loop
aam
push
mov
ds
push
add
jmp
stc
lock
or
ret
add
inc
jns
(bad)
cli
repnz
loope
and
cmp
paddb
sti
sbb
sti
or
clc
std
stos
loope
loop
rcl
xchg
mov
inc
cs
data16
ins
loope
or
cmp
stos
and
cmps
jg
out
imul
(bad)
mov
sub
sbb
enter
jo
outs
lods
add
adc
mov
xlat
fsubp
out
loope
sub
jmp
outs
das
jg
repz
daa
push
pop
imul
push
fdivr
mov
inc
jg
mov
and
nop
fs
es
jg
(bad)
and
out
pushf
push
push
cmps
mov
ins
fndisi(8087
call
inc
or
shl
scas
fmul
push
sbb
push
retf
into
and
sar
in
out
dec
enter
dec
mov
sbb
xchg
(bad)
xor
ins
push
mov
dec
daa
test
xor
jbe
pop
xchg
stc
xor
and
jns
push
ret
inc
cmps
nop
pop
sar
mov
inc
xor
(bad)
cld
dec
push
fidiv
jns
jecxz
aad
dec
in
jge
test
mov
outs
lds
into
push
mov
mov
idiv
jbe
xchg
dec
dec
ds
mov
in
ins
sbb
pop
pop
push
lods
(bad)
push
or
push
cli
out
in
mov
add
sar
sub
mov
imul
js
pop
push
test
lock
ja
sub
ret
dec
jle
mov
lods
pop
shl
rol
xor
imul
scas
xor
(bad)
(bad)
cmp
mov
xchg
in
clc
leave
pop
cmps
arpl
jl
pop
jnp
or
outs
xor
jmp
sbb
and
into
das
daa
addr16
sub
fldenv
jg
sbb
retf
ficom
fst
and
cmp
sahf
(bad)
mov
inc
jnp
shl
sbb
xchg
lods
cmp
jnp
jg
inc
sbb
or
lahf
movs
cmp
ficomp
push
jecxz
xor
ins
xchg
mov
arpl
pop
lea
fs
adc
xor
rcr
adc
mov
popa
xchg
pop
(bad)
or
xor
mov
loopne
or
push
mov
in
jns
aas
cmp
outs
mov
jge
repnz
and
jl
movs
mov
pop
movs
xchg
popa
cdq
rcr
xor
xchg
out
or
inc
dec
addr16
(bad)
scas
lds
test
xor
add
mov
xor
jb
dec
xor
xchg
cmps
push
push
sti
ds
xchg
adc
xor
jge
fnstsw
cmps
and
mov
push
pop
pop
cmp
ffree
(bad)
cli
jl
in
test
fisttp
repz
sbb
pop
fcomp
jb
and
push
xchg
pop
cdq
imul
sub
inc
mov
dec
fsub
and
fadd
addr16
sbb
inc
jle
repz
add
movs
hlt
xchg
xchg
cmps
std
aam
mov
imul
xchg
clc
aam
sbb
inc
or
sub
cmps
aaa
sbb
es
out
sti
jae
(bad)
aas
ret
dec
jb
daa
jmp
and
sbb
icebp
es
test
add
cmp
es
rol
aaa
pop
lods
iret
jmp
inc
jl
fwait
call
neg
stos
inc
mov
pop
or
dec
mov
dec
in
fwait
dec
jmp
pop
retf
int3
xchg
push
cmp
pop
ret
nop
cli
pop
adc
sub
adc
nop
inc
push
shl
xor
shl
jbe
imul
dec
jns
jmp
shl
xchg
test
scas
pop
lds
cs
mov
bound
sahf
test
dec
test
stc
pop
lock
lock
dec
icebp
sub
or
mov
dec
jg
out
cld
jp
cmp
ins
call
mov
lods
ins
add
sbb
fadd
fs
or
xor
jnp
mov
cmp
int
inc
test
lea
in
shl
adc
pusha
fist
and
pop
and
adc
mov
ffree
jle
sbb
fisttp
iret
les
adc
or
xchg
pop
fidiv
ds
dec
ror
push
stos
js
movs
adc
mov
or
test
cvtps2pi
mov
pop
push
xchg
(bad)
jns
div
sbb
pop
hlt
pop
repnz
(bad)
fild
out
ror
loop
pop
sbb
mov
push
push
repz
pop
xchg
cmc
arpl
sub
scas
xchg
inc
pop
icebp
xchg
mov
xchg
pop
xor
mov
mov
mov
ss
mov
sub
mov
mov
mov
sbb
pop
test
push
pop
lds
or
test
out
sub
cmps
popa
and
inc
mov
(bad)
xor
test
inc
and
dec
push
sub
cmp
or
out
sbb
mov
dec
cmp
jae
sub
cdq
scas
xchg
loop
dec
mov
and
mov
mov
sahf
test
mov
jns
rep
arpl
iret
xchg
aam
xor
fdivr
repnz
push
jecxz
cmp
cdq
or
pop
adc
pusha
aaa
add
hlt
mov
aam
(bad)
inc
mov
jns
sbb
stos
ds
loop
dec
jno
lds
mov
loopne
rcr
adc
push
xchg
fwait
jns
iret
mov
sub
(bad)
ret
jmp
push
pop
sahf
pop
ds
cdq
int
iret
in
call
cmp
and
mov
jl
nop
dec
and
push
icebp
push
mov
cmp
cmp
retf
ret
xchg
mov
cmp
inc
imul
fisttp
jge
icebp
popf
mov
shr
sbb
loopne
push
dec
jle
fiadd
jne
or
ret
sti
bswap
mov
cld
lahf
inc
aad
pop
in
mov
adc
(bad)
loop
push
sub
in
div
div
xchg
es
fwait
cmp
and
sbb
test
in
and
cwde
imul
(bad)
int
lock
int
jo
mov
stc
add
jp
sbb
mov
repnz
mov
add
cmp
add
popf
not
scas
pop
inc
fiadd
loopne
add
imul
enter
xchg
sbb
dec
repz
scas
mov
fcmovnb
and
int3
test
xor
cdq
call
mov
jno
retf
push
addr16
xchg
jbe
ret
test
pop
pop
pushw
push
clc
outs
jo
das
inc
push
loop
sub
push
sub
cmp
test
movs
stos
jmp
(bad)
pop
stc
(bad)
mov
js
mov
sbb
into
adc
inc
cdq
(bad)
mov
movs
aaa
mov
loop
aam
xchg
idiv
ret
mov
scas
cmps
test
shl
out
idiv
mov
mov
test
clc
outs
popa
cli
pop
jno
pop
jmp
repz
and
frstor
shl
sbb
sti
inc
mov
pop
aad
mov
pop
ins
cmp
xchg
and
add
adc
fidivr
leave
jns
scas
dec
pmulhuw
add
mov
and
clc
int
and
sub
xor
xchg
mov
mov
out
and
or
test
pop
cmp
out
cld
or
add
movs
dec
cli
cmps
pop
test
dec
aas
lea
jmp
xchg
fisubr
xchg
pop
adc
(bad)
loop
les
inc
xor
push
out
std
push
mov
or
stc
cmp
iret
fld
dec
shr
retf
arpl
inc
and
and
mov
arpl
sub
stos
lds
scas
and
fst
frstor
inc
push
mov
icebp
ins
inc
mov
stos
xchg
aam
push
push
nop
and
cmp
xor
xchg
dec
rcl
lods
adc
mov
mov
xor
fisttp
icebp
pop
sbb
dec
enter
cmp
xor
lahf
xchg
js
inc
jge
push
mov
and
mov
aam
test
mov
les
outs
das
adc
hlt
lods
ret
mov
shl
sub
call
mov
psubb
test
(bad)
inc
fistp
inc
sub
mov
jmp
inc
add
cs
inc
add
test
jmp
scas
aas
lock
cmovs
push
bound
mov
push
test
cwde
adc
mov
xchg
jne
dec
inc
cwde
out
mov
xchg
sar
push
ins
cmps
push
xchg
cmps
pop
or
pop
call
mov
out
mov
(bad)
and
jl
cmp
xor
outs
cmc
pop
dec
inc
xchg
outs
daa
scas
pop
fcmovb
repnz
adc
cmc
mov
pop
iret
xrelease
outs
jo
push
hlt
test
cmp
cdq
add
or
mov
sub
in
xchg
sub
mov
mul
sbb
push
push
mov
sub
or
mov
rcr
repnz
cmc
xor
jae
xor
arpl
cld
inc
jle
add
hlt
pop
in
mov
in
xlat
dec
xchg
mov
xchg
repnz
fs
pop
mov
dec
ins
push
lock
jg
pmulhw
or
pop
xchg
dec
mov
es
sbb
mov
dec
xchg
fwait
leave
ret
dec
xchg
and
prefetch
and
repz
xchg
cmp
push
(bad)
mov
or
xchg
in
ret
pop
sub
retf
cmc
cmp
ins
xor
pop
mov
stos
lods
push
jg
fcom
cmp
fistp
outs
sbb
xor
lea
int3
int3
out
pop
call
adc
pop
movs
enter
xchg
push
push
xor
dec
adc
push
dec
rol
sub
dec
mov
in
cmps
pop
xchg
or
push
arpl
pop
dec
sbb
pop
xchg
inc
dec
imul
push
test
xchg
push
imul
push
jnp
imul
(bad)
push
mov
stos
std
fist
sbb
dec
cmp
ja
inc
loopne
jo
out
sbb
push
movs
xchg
push
push
inc
push
retf
inc
push
scas
pop
xchg
repz
or
xchg
call
jmp
out
push
xor
adc
pop
cmp
lahf
dec
inc
dec
cmps
mov
jge
pop
in
(bad)
ja
sti
repnz
dec
dec
jge
xchg
ds
push
inc
push
sahf
(bad)
push
cmps
inc
inc
inc
or
mov
imul
and
xlat
add
xor
popa
(bad)
imul
shr
in
sbb
cdq
add
inc
movs
or
pop
jge
xor
adc
leave
in
pop
ds
les
mov
jns
adc
inc
lds
sbb
call
shr
(bad)
and
or
movs
sar
icebp
sahf
inc
mov
jge
inc
lds
mov
aas
xor
js
jl
clc
mov
js
test
sub
jle
ret
jae
pop
ret
jp
jae
cmp
fsub
mov
jb
xchg
mov
loop
cwde
push
sub
test
rcl
mov
xor
pop
mov
imul
or
jae
dec
icebp
(bad)
lock
outs
cmps
mov
sbb
call
fbld
adc
jmp
not
mov
repz
and
dec
cmp
push
movs
out
dec
mov
aas
fist
getsec
inc
stos
push
scas
aad
xchg
or
push
pop
inc
fs
cmp
lods
xchg
ds
scas
pop
xchg
mov
sub
out
jo
ins
add
fwait
pop
lahf
in
popf
xchg
and
sar
xlat
inc
dec
ja
ja
mov
cli
into
jmp
out
lahf
dec
fnstcw
in
scas
pop
movs
pushf
or
mov
jae
pop
fsub
or
dec
sub
in
xor
xor
sbb
(bad)
aaa
leave
cli
js
and
fs
xchg
add
call
xchg
dec
cwde
pop
fmul
xlat
or
inc
jb
(bad)
pop
jb
jo
adc
movs
ret
sbb
call
jmp
add
sub
mov
push
inc
or
push
cmp
mov
mov
in
dec
les
movs
ds
in
jbe
push
adc
cli
jl
and
mov
mov
inc
cmps
lods
int3
test
ins
in
fwait
jge
mov
rcl
jne
dec
adc
push
rcr
jb
pop
push
sbb
shl
jnp
fild
lods
addr16
mov
es
xchg
cmc
sbb
mov
cli
ror
sbb
mov
out
mov
lock
inc
jno
int
dec
dec
xchg
xor
aam
push
(bad)
sub
loop
pop
lds
jns
mov
loop
mov
nop
test
shr
mov
mov
cmp
shr
mov
fild
clc
dec
test
loopne
jecxz
cmc
push
push
inc
mov
push
mov
shr
call
xchg
cdq
pop
in
mov
stc
fwait
inc
imul
xchg
out
stc
aad
int3
push
push
out
mov
fisubr
push
cmp
jae
push
push
fiadd
mov
pop
push
mov
or
xchg
jmp
(bad)
xlat
sahf
or
mov
(bad)
cmp
or
and
cwde
int3
std
adc
add
loop
sar
mov
xchg
call
dec
cmc
ins
or
repnz
(bad)
fbld
sub
aas
out
js
test
adc
loop
ds
pop
xor
ret
sub
and
sub
and
popf
mov
les
add
lahf
sub
inc
xlat
mov
jne
adc
sbb
dec
cdq
fstp
bnd
mov
mov
xor
add
mov
or
jg
aad
sbb
(bad)
loope
adc
mov
scas
sbb
scas
jge
push
seta
popf
xor
int3
cs
inc
adc
push
push
cmp
and
add
push
psubusb
loopne
call
js
ja
xchg
adc
loope
leave
ins
mov
xchg
repz
inc
push
popf
mov
pop
scas
inc
jns
xor
mov
jno
jns
dec
push
(bad)
jno
adc
mov
stos
cmp
push
popa
ja
push
stos
js
scas
inc
pop
mov
xchg
call
imul
aad
xchg
cmp
sub
and
sbb
and
shl
repnz
sar
xchg
add
movs
xchg
ret
cmp
out
bound
cmp
rcr
add
sub
pop
and
cmps
repz
push
push
push
ins
rcr
nop
mov
pop
add
cmps
ins
adc
pop
gs
imul
div
out
xor
sbb
cmp
dec
and
inc
dec
pop
jl
and
fmul
cdq
cmp
cmps
test
fwait
jnp
pop
fiadd
rcl
adc
fadd
mov
mov
movs
push
cwde
sub
dec
mov
push
jae
jns
pop
stos
sbb
xchg
leave
pop
lds
adc
sub
push
fdivr
sbb
jmp
push
push
mov
repnz
or
sahf
mov
(bad)
xlat
xchg
jle
xlat
xchg
add
stos
mov
xor
arpl
std
leave
cmc
rcl
aam
jg
mov
dec
aam
into
inc
mov
push
aaa
out
shr
mov
movs
ins
sbb
(bad)
pusha
in
jecxz
jp
inc
js
int
call
cmp
jmp
mov
out
ret
mov
outs
push
loope
pushf
and
fcomp
pop
enter
dec
(bad)
jno
push
pusha
int
retf
adc
js
je
sar
mov
push
inc
mov
push
push
xchg
data16
xchg
dec
popa
lock
mov
cdq
pop
out
xor
sub
mov
rcr
mov
cmps
(bad)
cmp
movs
mov
xchg
shl
xor
push
add
and
fcomp
mov
push
mov
dec
movs
out
adc
les
mov
enter
je
inc
std
neg
rcr
enter
sub
icebp
sbb
and
xchg
jns
pop
je
out
nop
add
fcomp
lock
ficom
movs
jb
out
and
pop
xor
push
jmp
sub
pop
pop
jmp
push
jne
or
lock
(bad)
loopne
inc
out
(bad)
mov
cmc
jb
lock
dec
std
inc
and
dec
jg
call
sbb
jnp
inc
call
loopne
shl
inc
loop
and
mov
pushf
idiv
inc
jle
mov
mov
out
xchg
cmp
les
dec
sub
mov
mov
sbb
es
pop
xchg
inc
cmc
xor
daa
iret
popf
ror
jnp
dec
mov
call
jp
inc
pop
jecxz
mov
mov
sub
repnz
daa
stc
enter
es
repnz
js
test
pop
fidivr
fdivr
push
push
in
cmp
mov
loope
(bad)
stos
push
inc
outs
cmps
mov
test
aad
leave
test
loop
push
push
fwait
dec
xor
sahf
out
cld
jno
mov
std
rol
fwait
and
mov
stc
cs
data16
out
outs
ss
arpl
movs
jbe
mov
jne
mov
and
adc
je
mov
or
into
in
imul
xchg
ins
movq2dq
(bad)
jb
fidiv
mov
mov
pop
push
jge
push
ins
arpl
adc
mov
sbb
js
icebp
pop
mov
inc
mov
lds
mov
xor
(bad)
mov
enter
inc
mov
iret
mov
sar
in
and
fchs
mov
sbb
in
dec
or
mov
stc
add
movs
and
add
and
jb
push
or
xchg
push
loopne
bound
jbe
dec
mov
jp
rcr
movs
mov
lahf
aam
sub
jp
lea
aad
js
or
mov
lea
retf
sub
in
setne
mov
ficomp
scas
in
push
pop
or
movs
jnp
ins
pop
enter
push
xchg
in
push
push
popf
push
mov
cli
loope
add
aad
arpl
xor
and
clc
stos
fsub
mov
aas
jbe
scas
dec
movs
imul
icebp
loope
mov
stc
xchg
rcr
jge
xchg
ror
adc
mov
ins
icebp
dec
adc
push
cli
add
or
or
xlat
jmp
sbb
push
mov
stos
fldenv
enter
push
mov
sub
mov
inc
pop
mov
call
jae
sbb
mov
mov
jno
jne
push
clc
and
mov
fs
mov
mov
shr
xchg
and
pop
jmp
(bad)
ins
loopne
push
cmp
jge
in
(bad)
xchg
cmp
gs
cwde
mov
xchg
les
in
movs
cld
cli
cld
retf
cld
jp
cmp
jg
jb
out
nop
xor
repz
movs
int
enter
sub
scas
leave
repnz
jge
test
inc
or
ret
leave
rcl
in
stc
sub
or
inc
cmp
inc
aad
or
(bad)
sbb
xchg
inc
in
mov
fsubr
fist
test
sub
mov
ret
and
fistp
mov
add
adc
push
pop
add
repz
outs
daa
push
icebp
test
xor
push
adc
mov
dec
enter
sub
jp
ins
ds
jns
fadd
xchg
xchg
push
int3
ror
push
scas
xchg
sahf
jb
aad
mov
in
pusha
pop
or
adc
and
pusha
and
xchg
bound
inc
jo
sub
fdiv
dec
dec
push
ds
mov
push
mov
ret
lahf
mov
out
push
sti
push
mov
movs
(bad)
clc
or
or
xchg
push
sub
scas
cmp
lock
fs
dec
add
aas
in
mov
int3
fisubr
xchg
retf
(bad)
in
cmp
push
out
lock
pushf
sub
adc
mov
retf
push
aas
shl
rcr
dec
(bad)
sahf
(bad)
mov
and
dec
inc
inc
shr
push
xor
addr16
mov
iret
add
xchg
and
pop
repz
adc
dec
test
js
jb
sbb
mov
dec
inc
mov
jne
xchg
inc
stc
add
xor
and
fistp
push
push
adc
xchg
out
(bad)
lods
loopne
adc
mov
pop
retf
push
and
mov
adc
scas
inc
pop
xor
pop
add
lock
and
fdivr
mov
adc
or
hlt
push
fnstenv
js
repnz
jno
(bad)
in
lahf
lods
xchg
fdivrp
out
test
jp
adc
push
inc
mov
inc
sbb
pop
jb
pop
or
mov
pop
nop
cdq
sar
dec
pop
xchg
cdq
xchg
sub
xlat
inc
in
cmps
cmp
fisub
rol
dec
or
(bad)
xchg
mov
xor
adc
ffree
pop
in
pushf
push
sub
inc
cmp
jle
out
xor
test
dec
lods
mov
cld
dec
call
push
imul
out
dec
clc
add
int3
movs
or
push
int
xor
and
movs
or
icebp
cmps
test
aam
cwde
sbb
out
push
sbb
xor
dec
and
es
inc
sti
cs
out
xchg
clc
pop
test
push
pop
rcr
inc
mov
mov
pop
sub
out
std
arpl
xchg
(bad)
mov
jp
les
sub
(bad)
mov
leave
es
pusha
sub
xor
cld
fadd
(bad)
daa
sti
icebp
xchg
arpl
js
and
dec
cs
mov
mov
test
cmp
inc
adc
adc
imul
inc
hlt
mov
sub
mov
das
or
test
clc
add
or
push
add
neg
das
in
sub
or
mov
test
adc
movs
jmp
mov
mov
mov
jl
clc
sub
jmp
mov
or
popa
scas
sub
xor
aaa
daa
aam
sub
es
cdq
and
adc
sub
inc
inc
mov
sub
push
shl
jle
adc
repz
pop
pop
sahf
test
jp
(bad)
adc
mov
test
loop
(bad)
cmps
cmps
imul
inc
cld
mov
out
out
push
mov
ret
mov
and
in
inc
mov
cmp
out
cmps
ret
mov
add
add
adc
and
and
out
adc
fs
add
pop
mov
or
jns
dec
adc
push
jg
pop
(bad)
xor
and
call
popa
dec
sahf
jmp
mov
xchg
mov
aaa
les
aam
and
adc
aam
movs
xor
xchg
icebp
fst
cmp
xchg
call
ror
mov
and
lea
cmp
dec
test
push
call
lock
mov
sbb
add
inc
cmp
pop
ror
dec
push
movs
repz
enter
adc
sub
sar
sub
add
shr
xchg
cmp
mov
fwait
pop
lea
mov
popa
xchg
push
cmps
lea
or
imul
cmp
cli
call
sbb
fwait
ret
icebp
xchg
(bad)
aam
mov
or
xor
push
aam
push
add
jl
and
repz
mov
out
adc
mov
push
or
mov
mov
bound
call
movs
mov
icebp
scas
push
push
clc
jo
pop
mov
es
call
cmp
push
pop
add
sti
cli
loope
ret
mov
mov
loopne
jb
hlt
add
jecxz
lock
pop
push
sahf
mov
in
clc
hlt
repnz
and
fild
jne
mov
or
mov
cmp
xchg
adc
jns
(bad)
push
mov
jo
pop
xor
fisub
push
icebp
out
xor
les
and
push
jmp
out
outs
ret
pop
je
stos
sbb
into
lahf
rcl
jmp
xor
dec
inc
lahf
stos
mov
js
rcl
add
repnz
dec
mov
dec
cwde
sub
mov
out
out
ror
std
cmc
xor
dec
and
sub
stos
mov
push
gs
sbb
and
sbb
and
faddp
int3
in
cmp
jmp
cli
pop
ret
sar
sub
cmps
ror
cwde
cmps
push
dec
and
popf
sub
or
out
dec
out
dec
xchg
mov
cmp
in
mov
sub
adc
ss
movs
cld
cmp
sub
ret
jge
mov
sar
jge
dec
fstp
or
adc
outs
sub
aam
mov
test
push
mov
xchg
dec
(bad)
inc
push
stc
ret
movs
add
push
mov
and
and
mov
xchg
cmp
mov
sbb
jge
or
sub
stos
stc
jb
pop
icebp
inc
ret
mov
jmp
inc
ret
mov
push
push
cmp
pop
(bad)
ins
(bad)
cmc
cmp
mov
out
push
cld
dec
inc
inc
and
inc
in
fsub
mov
test
jg
movs
rol
add
popf
inc
mov
sub
arpl
lds
rcr
push
cmp
enter
in
sbb
dec
lods
mov
add
retf
mul
aaa
int
ins
cmp
and
pop
sbb
(bad)
out
popa
retf
stc
out
jo
mov
sub
ds
push
sbb
adc
int3
sbb
cmps
mov
xchg
xchg
mov
pop
or
fsub
sbb
js
jle
nop
sbb
xor
pop
xchg
push
jnp
jge
imul
popa
adc
rcl
ss
lock
mov
lock
pop
dec
sti
or
(bad)
div
xchg
cmp
dec
pop
push
aad
jbe
call
dec
xchg
xlat
ret
pop
aam
aam
push
adc
ror
push
pop
sbb
loopne
fild
or
in
popf
sub
add
inc
ret
adc
push
jmp
mov
scas
sub
lock
ins
push
jge
fidivr
es
jns
ret
rcr
enter
sub
adc
sbb
jo
test
push
sub
loop
es
push
jg
add
add
lds
dec
or
mov
add
shl
mov
mov
retf
shl
enter
lods
cmps
shr
inc
sbb
push
dec
cmp
loope
mov
sahf
test
mov
imul
or
mov
jg
mov
cmp
outs
mov
popf
push
int3
push
arpl
xor
fisttp
cli
xor
mov
mov
aas
lahf
push
retf
sbb
in
mov
and
jb
test
scas
sub
call
repz
call
add
add
jno
or
(bad)
dec
xchg
jge
mov
imul
mov
scas
js
das
(bad)
xlat
int
jle
jno
leave
retf
pushf
or
loope
repnz
xor
jecxz
mov
fs
sbb
push
mov
and
cmps
xlat
adc
je
sbb
sar
push
mov
mov
aam
mov
stos
scas
aaa
ret
xchg
pop
hlt
xor
adc
mov
adc
or
xchg
pop
pop
popa
sbb
inc
hlt
push
add
fwait
lea
es
inc
jo
div
test
jg
sub
scas
dec
or
sti
jmp
push
cmp
mov
mov
in
cdq
fild
aad
mov
mov
and
icebp
retf
imul
add
or
aas
add
ret
movs
fmul
xchg
mov
test
ror
ss
popa
cmp
add
push
or
lods
rcl
inc
shl
loop
push
das
ret
sbb
ficom
sbb
jns
mov
rcr
xor
push
jl
pop
out
cmp
iret
icebp
fild
mov
test
xchg
into
sub
fcmovnbe
movs
push
loop
ds
sbb
imul
aaa
sbb
cwde
and
adc
mov
leave
cmp
dec
fidivr
repz
dec
pop
dec
leave
mov
cmp
jl
sbb
outs
and
lea
xchg
pop
jecxz
adc
in
cmp
ds
sahf
adc
stos
pop
sbb
ss
inc
fld
scas
sbb
ss
pop
mov
enter
in
call
jns
cmp
pop
nop
and
mov
dec
adc
aad
dec
adc
fstp
cmp
jno
fcomp
xchg
repnz
aad
retf
pop
pop
adc
sbb
outs
adc
data16
mov
ins
mov
out
add
mov
fidivr
loope
cwde
lea
movs
pop
mov
les
ins
test
inc
jmp
cwde
into
push
sti
nop
add
aad
inc
leave
in
mov
pusha
xor
cdq
cs
xor
cmps
stos
pop
retf
adc
pop
mov
xchg
hlt
cwde
dec
cld
clc
sub
je
aas
jge
jbe
test
leave
push
movs
xor
ret
pop
mov
mov
adc
xchg
loopne
nop
push
mov
xchg
xor
cli
(bad)
aad
sub
jo
scas
scas
(bad)
sti
aam
arpl
into
leave
pop
cli
call
push
pop
mov
sbb
ss
pop
pop
lods
cmp
push
leave
test
fld
stc
and
adc
mov
jg
jno
fsub
(bad)
and
out
push
in
mov
aam
sub
mov
jo
and
lea
repnz
or
(bad)
in
and
mov
fxch
jb
pop
push
aaa
repz
fwait
inc
mov
adc
aam
aaa
pop
mov
dec
or
je
mov
dec
enter
cmp
popw
repnz
or
jbe
add
inc
idiv
call
(bad)
push
call
out
popf
add
pop
pusha
jp
fsubp
aaa
sti
jb
gs
lock
(bad)
add
sub
xor
dec
ja
call
lock
popa
test
or
jns
(bad)
fcmovnu
mov
mov
sub
pslld
adc
mov
imul
sbb
add
dec
lds
and
fistp
(bad)
dec
adc
mov
adc
inc
outs
mov
es
sbb
dec
jns
ror
int3
add
aad
push
mov
sbb
loop
sbb
repnz
(bad)
jmp
pop
fidiv
(bad)
fild
das
call
gs
(bad)
shl
push
mov
or
popa
call
sbb
call
mov
mov
mov
add
push
xor
fld
push
ret
sbb
push
push
xor
or
sahf
xchg
mov
idiv
jg
shl
xchg
test
adc
mov
push
cmp
aas
mov
mov
inc
adc
mov
sub
sbb
xchg
cmp
xchg
out
mov
inc
jle
mov
fcmovb
enter
iret
repnz
mov
repnz
xchg
xchg
rcl
ror
inc
stos
or
mov
shl
popa
inc
dec
sbb
dec
cs
and
cs
loopne
(bad)
sub
xchg
adc
dec
fnsave
daa
dec
add
or
pop
dec
ret
cmp
mov
sub
mov
rcl
pop
call
add
es
daa
mov
sti
aam
cmps
mov
icebp
inc
jge
xchg
jb
(bad)
push
inc
in
push
daa
add
test
stc
out
and
nop
xlat
mov
mov
loopne
jmp
aam
xchg
pop
mov
out
fidiv
(bad)
cmps
sub
sub
pop
mov
call
cmc
addr16
push
jmp
lods
cs
(bad)
call
xchg
in
jbe
test
xor
sar
cmp
mov
(bad)
mov
cdq
data16
add
sub
call
stos
jo
cmp
xor
jnp
out
cmp
nop
jmp
mov
jecxz
int
fnstenv
mov
fnstenv
push
fwait
mov
in
mov
int
inc
sbb
or
mov
aaa
and
aaa
dec
dec
out
push
shl
jo
inc
jg
out
or
jmp
xchg
mov
push
mov
pop
js
movs
pop
and
inc
lea
daa
push
cmp
(bad)
add
fisttp
jg
jp
xor
jo
and
outs
or
jns
jmp
and
sbb
ins
stos
jae
ret
mov
in
or
scas
loope
mov
pop
lea
out
shl
dec
retf
lds
lea
in
xchg
adc
jno
scas
sbb
hlt
movs
and
cmp
sub
cwde
push
mov
dec
inc
mov
pop
(bad)
or
adc
frstor
jnp
pop
jmp
mov
pop
mov
cld
push
push
inc
jb
cld
stos
push
out
mov
mov
push
cmp
sub
jnp
xor
mov
iret
(bad)
aas
sbb
mov
(bad)
jne
dec
and
fisubr
clc
push
movs
or
mov
fs
out
shl
cmp
cmps
mov
mov
xor
mov
ret
iret
aaa
neg
scas
out
xchg
outs
lods
(bad)
(bad)
mov
pop
xchg
add
add
scas
sub
out
dec
mul
fidivr
cmps
je
cwde
fistp
cmp
cmp
pop
(bad)
outs
pop
cmps
ficomp
mov
xchg
mov
sub
jo
movs
lahf
sub
daa
add
sub
xlat
inc
jg
inc
ds
jp
fisub
fbstp
dec
and
inc
push
cmps
push
mov
add
jno
data16
mov
clc
fdiv
xor
adc
outs
sar
and
out
mov
push
add
dec
vcvttsd2si
iret
mov
stos
pop
clc
pop
push
mov
stc
xchg
les
hlt
and
cwde
or
fcom
sbb
pop
lods
and
shr
imul
mov
cld
es
movs
mov
imul
fwait
call
fdivr
xchg
mov
xor
leave
push
mov
call
inc
call
and
ror
jp
mov
lock
inc
jae
in
daa
push
pop
jns
cmps
pop
icebp
or
or
test
fmul
fdiv
js
pop
cmp
call
rcl
inc
das
es
aas
daa
dec
gs
div
shr
dec
cmps
pushf
das
mov
mov
fistp
bndstx
xlat
(bad)
ins
scas
ins
and
sub
lock
pop
fs
sbb
test
jb
jno
sbb
pusha
xchg
scas
xchg
xchg
aam
(bad)
xchg
test
jbe
mov
movs
mov
enter
mov
imul
mov
pop
(bad)
mov
mov
or
inc
jg
sbb
stos
daa
pop
adc
addr16
jns
fild
in
fbstp
mov
push
loopne
call
rcr
ret
dec
test
dec
xor
fadd
(bad)
jmp
fcomp
lahf
lahf
sbb
add
jmp
cmovbe
(bad)
outs
push
(bad)
into
adc
xor
fdiv
pop
pop
das
cmc
retf
pop
fst
jl
fmul
loop
sub
adc
dec
loop
pop
cmp
(bad)
lods
jl
dec
bound
mov
mov
ss
retf
mov
adc
sbb
adc
aas
lea
push
mov
push
push
mov
pop
push
mov
or
jbe
shl
sub
mov
mov
or
push
jnp
shl
pop
in
mov
(bad)
mov
mov
(bad)
ret
add
dec
inc
sub
or
xor
cwde
mov
push
jnp
shl
pop
in
stc
add
fild
push
mov
or
jbe
shl
sub
rol
bound
or
jbe
shl
dec
sbb
add
sbb
sbb
outs
mov
jbe
adc
jmp
jp
std
ror
dec
push
fild
mov
push
call
add
cld
mov
in
push
sti
pop
jecxz
jecxz
sub
inc
pop
add
and
mov
cli
mov
cwde
jae
mov
loopne
fcom
arpl
mov
sbb
inc
repz
cld
xlat
mov
sub
mov
cmp
cmp
das
lods
adc
cli
(bad)
sti
xor
inc
mov
fnstcw
pop
out
xchg
les
sub
mov
adc
push
cld
bnd
and
test
fild
inc
mov
inc
cmp
or
xchg
xor
sbb
cmp
ret
jl
xchg
mov
mov
shl
jmp
mov
fs
add
dec
fst
pop
mov
clc
in
push
sbb
in
out
clc
mov
sub
sbb
push
lock
retw
scas
clc
jge
int
pop
inc
popa
mov
ins
fcmove
jne
bnd
cmp
jne
sub
push
mov
out
push
mov
mov
dec
mov
into
(bad)
pop
aam
std
data16
xchg
pop
mov
push
fs
sub
repnz
dec
add
pop
sahf
dec
mov
fld
out
iret
dec
enter
inc
shl
aaa
movs
cs
or
mov
imul
out
fisub
(bad)
cdq
sub
add
das
fs
fdivr
emms
or
ret
cmps
mov
push
std
dec
push
sbb
inc
push
and
scas
xchg
pop
aam
pop
inc
jmp
push
dec
mov
out
fild
sub
dec
inc
jmp
imul
push
ds
sbb
or
push
and
add
mov
inc
jl
pop
sbb
loope
retf
jle
sahf
out
das
repz
jle
icebp
call
sub
stc
pop
jbe
jo
push
aam
jmp
xchg
retf
sahf
daa
sub
scas
imul
xchg
es
cmps
jge
imul
loopne
push
popa
sbb
cmp
adc
push
pushf
fild
mov
out
jno
mov
jae
inc
pop
mov
inc
mov
fdiv
and
add
xchg
inc
rcr
(bad)
or
fwait
sbb
push
gs
mov
cmp
push
ror
and
inc
je
mov
scas
jae
jp
sub
call
int3
mov
stc
imul
pop
lock
fdivr
sbb
hlt
popf
ret
and
in
les
mov
push
cmp
imul
mov
(bad)
xor
push
mov
jnp
cld
aad
scas
cmps
and
push
add
jo
adc
mov
bnd
stos
xchg
mov
jb
test
jecxz
test
in
imul
pop
and
call
popf
stos
adc
lea
repnz
aas
std
(bad)
cs
bnd
scas
lahf
cmp
mov
jle
or
pop
sbb
xor
test
jmp
and
adc
rcr
clc
bnd
(bad)
sbb
mov
call
push
mov
fcmovne
leave
fisubr
fisubr
pop
jg
fcomp
daa
in
push
push
loop
sbb
inc
push
outs
lods
shr
pop
cmp
mov
in
or
clc
movs
adc
cwde
dec
ins
mov
test
inc
clc
sub
dec
ja
data16
jb
xor
call
and
sub
sbb
in
test
push
icebp
retf
movs
and
and
fbstp
inc
sub
cdq
js
mov
neg
call
shl
pop
(bad)
sub
out
mov
std
pop
cld
pop
cmp
ja
in
inc
aaa
push
mov
mov
adc
sbb
xor
mov
(bad)
push
cmp
jle
mov
in
adc
cmps
shl
lock
enter
sti
sbb
mov
in
lods
mov
pop
xchg
les
outs
outs
adc
mov
fdiv
out
(bad)
(bad)
ins
out
mov
xchg
call
call
cmps
(bad)
jg
ins
std
cmps
cmp
call
(bad)
push
pop
fdivr
mov
dec
mov
cs
aaa
fsubr
pop
(bad)
fild
cmp
push
mov
and
adc
push
icebp
mov
lock
retf
(bad)
shl
retf
push
adc
adc
dec
add
or
cmp
test
xor
int3
and
pop
ja
outs
daa
jl
and
cmp
jmp
sub
in
dec
mov
fsubr
xor
lahf
retf
in
push
sbb
fistp
fcmovnbe
add
cmp
(bad)
sahf
mov
mov
icebp
imul
dec
enter
mov
clc
push
in
popf
cmp
jecxz
ins
fldcw
daa
jle
ins
dec
sar
fld
ret
outs
in
rcl
add
dec
and
sbb
sub
inc
cmp
daa
out
fwait
mov
in
addr16
inc
dec
lods
mov
hlt
mov
fistp
adc
div
add
or
xchg
and
and
test
mov
mov
dec
loopne
add
in
pop
test
and
movs
shl
mov
inc
xchg
fist
xor
xchg
and
or
out
mov
add
into
adc
jns
dec
add
inc
inc
shl
shl
add
push
enter
xor
cwde
cld
sub
pusha
mov
xor
add
add
pop
xor
arpl
pusha
repnz
or
add
and
add
and
rcl
cmp
cmp
add
sbb
mov
xchg
inc
ret
jmp
push
and
dec
xchg
add
rol
sub
add
popa
leave
and
adc
ds
xor
sub
push
or
fsub
or
mov
loope
adc
sub
add
test
dec
push
xchg
mov
sti
sub
push
ret
jno
and
jns
hlt
add
arpl
sar
sbb
rcr
cmp
push
fwait
pop
movs
ss
or
sub
xchg
fwait
xor
shl
ss
test
in
mov
in
leave
mov
ss
push
xlat
jg
inc
cli
sbb
test
pop
leave
dec
push
and
add
cmp
mov
icebp
pop
inc
push
test
rcl
cmp
add
shl
xor
dec
pop
in
or
pop
pushf
mov
mov
inc
push
shl
and
jge
ret
push
add
adc
adc
xor
test
pusha
inc
(bad)
add
jmp
mov
cmp
dec
(bad)
movs
leave
inc
loopne
adc
std
and
das
xchg
sub
lock
push
mov
and
lods
test
pusha
push
push
mov
sub
dec
inc
rcr
into
inc
shr
cli
or
rcr
jb
test
in
sub
pop
add
adc
mov
add
and
and
int3
std
xchg
cmp
popa
addr16
add
in
js
add
inc
loopne
or
js
add
or
imul
or
bound
lock
std
adc
xchg
retf
jmp
mov
shl
js
add
mov
mov
inc
fldcw
sub
cld
jbe
out
fcomp
pop
cmps
ins
data16
sub
enter
sub
ror
dec
fsubr
fdiv
and
xchg
out
and
out
test
dec
fdiv
mov
dec
test
add
ja
mov
ins
test
adc
ret
mov
sar
shl
jp
mov
repz
ficom
xor
repnz
inc
push
xlat
test
(bad)
sub
aam
xchg
pop
call
pop
cmp
mov
pusha
(bad)
test
jno
or
cmps
sahf
mov
daa
xor
shl
or
pcmpeqb
cmps
sahf
sar
(bad)
test
pushf
jp
repz
fistp
stc
fnstenv
test
sub
ret
lea
ins
mov
pusha
jo
std
sbb
or
jecxz
lock
test
mov
vcmpfalsesd
(bad)
daa
mov
in
cmps
push
adc
(bad)
repz
jb
sub
jne
pushf
cmp
dec
sbb
push
inc
les
(bad)
jge
pop
(bad)
and
inc
rcl
and
(bad)
aaa
jl
in
mov
cmc
mov
pushf
xchg
test
movs
mov
cmp
xchg
xor
mov
js
lea
fst
xor
mov
retf
inc
arpl
das
sbb
sub
mov
add
sbb
(bad)
push
push
push
jns
mov
(bad)
jmp
inc
inc
cmps
push
mov
loopne
xchg
test
cdq
stc
ds
pop
or
add
cs
int
fwait
add
es
and
arpl
inc
pop
jecxz
cmps
jns
stos
cmp
lods
lea
add
icebp
fs
lock
cld
push
ss
pop
lods
or
mov
leave
stos
pop
cmp
fild
or
jbe
mov
aas
fmul
test
fst
inc
sub
imul
pop
outs
xor
cli
mov
mov
aas
pop
dec
mul
jno
jnp
std
jmp
dec
lahf
rcr
or
push
cmp
xor
or
adc
cwde
ins
(bad)
loopne
out
mov
ds
dec
cmps
es
cmps
cmps
add
cmp
out
add
je
retf
adc
inc
push
cmp
jb
das
mov
test
mov
cmps
sub
jecxz
es
sti
(bad)
call
stos
test
mov
aas
test
std
daa
fimul
push
xor
push
movs
in
lea
mov
mov
(bad)
xlat
add
mov
jmp
sbb
out
xlat
mov
outs
add
jle
lgs
add
pop
inc
dec
cmps
mov
and
adc
lods
psrlw
mov
inc
sub
push
inc
mov
mov
dec
sbb
push
stos
stos
bound
push
and
dec
nop
call
push
in
lods
pop
jecxz
mov
lock
mov
mov
(bad)
ror
push
rcr
mov
xchg
mov
pop
cli
retf
jge
ret
pusha
ror
sti
in
scas
cmc
and
fst
scas
inc
mov
clc
int3
imul
and
(bad)
cmps
jb
xor
dec
dec
xor
sbb
(bad)
push
jp
or
xchg
or
cs
xor
cld
inc
shl
mov
test
mov
cwde
inc
ins
add
and
pop
lock
inc
push
pop
adc
jmp
nop
pop
dec
(bad)
test
les
loop
mov
mov
xor
dec
push
dec
imul
jnp
sahf
popf
sbb
mov
popf
xor
mov
jne
call
repnz
sub
ret
sub
adc
jle
jge
lds
loope
jo
push
sbb
or
retf
je
pop
sti
push
or
sub
mov
pop
cwde
and
imul
cmp
sub
mov
cmp
addr16
add
cmp
lds
(bad)
pusha
mov
xor
cmp
pop
daa
adc
fwait
loopne
or
test
push
mov
loope
adc
fisttp
or
imul
je
jge
stos
lock
xchg
lods
subps
cdq
push
shl
jb
push
xor
lds
or
lds
into
dec
push
aaa
jle
mov
sahf
neg
fidivr
aas
dec
fst
or
cmps
mov
lods
jg
adc
jmp
xor
pop
das
loop
(bad)
imul
cmp
je
mov
scas
call
sub
dec
cmp
outs
jp
cmc
cli
mov
xlat
ds
dec
mul
leave
int
mov
push
test
cmps
cli
aam
imul
mov
stos
sar
sbb
test
push
pop
mov
les
imul
lea
mov
das
jno
aad
ss
sbb
popf
dec
inc
sbb
inc
pop
fadd
rcr
out
mov
push
retf
jnp
iret
mov
sti
fisubr
pop
imul
cmp
(bad)
movs
jg
sbb
mov
(bad)
xor
add
pop
lahf
inc
jp
lods
scas
cmps
jg
add
(bad)
or
sub
cmp
popf
and
jp
test
mov
test
sub
fsubr
inc
mov
xchg
test
jne
test
bound
ret
adc
shl
fldenv
mov
inc
and
dec
mov
cmp
cmp
jnp
ss
sahf
(bad)
movs
xchg
bound
std
and
xor
pop
adc
imul
adc
fisub
aaa
lock
test
sbb
inc
dec
(bad)
or
xchg
mov
mov
arpl
xor
jle
cmp
repnz
dec
mov
jge
je
loop
aam
xchg
push
sub
sub
xchg
cmp
mov
pop
rol
int
shl
cmp
push
hlt
push
sbb
(bad)
mov
bound
fldenv
jp
cwde
dec
push
lods
shl
hlt
push
out
push
or
add
stc
fwait
sub
sbb
cmp
hlt
push
jnp
mov
mov
inc
int3
fisub
jl
lds
outs
out
and
and
out
ja
push
arpl
sbb
push
sub
mov
enter
jbe
push
outs
pushf
cmp
clc
mov
add
fadd
sub
dec
push
or
mov
std
xor
aas
or
arpl
cdq
out
in
push
xchg
sti
dec
push
pusha
xchg
inc
or
scas
xor
aas
(bad)
and
(bad)
aas
into
and
xor
arpl
test
adc
cmp
sub
pop
xlat
and
out
jae
sbb
xor
(bad)
jb
iret
cmp
sub
or
mov
xchg
das
cs
neg
sbb
mov
mov
enter
test
jo
fsubp
rcl
inc
and
(bad)
ins
mov
and
or
mov
jecxz
xchg
iret
mov
popf
pop
mov
cs
aad
sub
xchg
jae
cli
(bad)
in
sbb
lock
bound
fs
xchg
lods
rol
dec
push
jbe
inc
cdq
daa
aam
cmp
fcom
movs
in
icebp
push
pop
mov
fs
push
mov
or
pushf
dec
popa
mov
(bad)
cmp
add
jl
and
and
lods
ret
push
xor
stc
pop
jo
data16
in
int3
in
in
pop
adc
fwait
dec
jecxz
sub
stc
ret
push
repz
ins
adc
imul
mov
push
jnp
xor
sahf
adc
ins
and
jp
pop
jb
xlat
int3
scas
jns
inc
dec
in
fwait
cdq
mov
xor
mov
(bad)
fisub
std
push
cli
inc
sbb
lods
lea
mov
pop
gs
xchg
dec
or
xor
add
pop
add
ds
and
iret
scas
dec
and
(bad)
sbb
push
into
int
sbb
sub
sti
mov
or
lock
arpl
das
jo
retf
xor
mov
push
lods
mov
xor
jp
fbstp
mov
int3
dec
pop
lea
in
or
shl
xor
shl
jle
and
mov
fild
aad
aaa
jge
adc
sub
or
dec
inc
scas
mov
sub
les
xlat
cs
xor
xor
sub
mov
shl
(bad)
in
popa
sub
loop
xor
call
aaa
test
scas
bound
sbb
sbb
sbb
push
jne
mov
std
adc
mov
jae
test
inc
dec
xchg
sbb
cmp
cmp
pop
imul
data16
rcl
je
shl
out
push
dec
rcr
jb
xor
data16
in
mov
jle
pop
mov
ins
and
call
xlat
mov
popf
dec
fcmovbe
mov
cs
ret
adc
ret
retf
push
xor
ss
rol
xchg
mov
retf
in
imul
inc
(bad)
add
ret
lock
mov
dec
xchg
inc
call
sar
shl
pop
(bad)
pop
inc
push
push
adc
mov
cmp
fisub
push
push
loope
xchg
cmps
bnd
gs
test
aam
sbb
sub
add
and
lock
cmps
mov
pop
push
sar
sub
and
dec
cmps
retf
rcl
fmul
inc
sbb
lock
fidivr
push
xor
sub
cld
mov
out
test
jns
std
pandn
retf
mov
add
xchg
ds
cmp
mov
sbb
jecxz
push
movs
push
ror
je
mov
cmp
lahf
dec
jbe
and
mov
sbb
inc
test
or
xor
shl
aas
stos
movs
pop
sahf
aad
std
xchg
(bad)
jmp
test
ja
inc
mov
(bad)
cld
add
pop
hlt
xchg
cmp
xchg
jbe
in
jp
aad
mov
sub
mov
loope
push
popf
shl
pop
push
sub
or
fs
into
popf
and
out
in
in
jae
adc
mov
dec
outs
xchg
(bad)
dec
pop
ffree
repnz
jmp
scas
mov
xchg
icebp
sbb
mov
adc
(bad)
push
ins
fild
mov
sahf
fidiv
mov
ja
jno
cmps
cmc
aas
cmp
mov
retf
nop
mov
les
loop
jbe
pop
xchg
jb
hlt
sti
xchg
(bad)
jg
xlat
pop
retf
mul
loopne
dec
xor
(bad)
clc
jo
xchg
push
frstor
inc
jmp
test
cmc
mov
fisttp
pop
fild
mov
(bad)
ins
mov
jle
js
mov
scas
cmp
cld
xchg
and
std
push
push
xor
xchg
mov
ins
outs
lods
mov
xchg
in
add
push
cmp
(bad)
dec
aas
xor
scas
dec
pop
mov
xchg
ins
adc
cmp
je
mov
pushf
daa
aad
push
mov
pop
jnp
ins
jae
push
dec
rcl
cmps
jecxz
popa
inc
out
std
xchg
out
xor
pop
inc
push
xchg
push
xor
test
xchg
aad
movs
mov
sbb
sbb
pushf
icebp
rcr
push
pop
mov
jb
mov
xchg
enter
xor
dec
mov
lds
add
loope
movs
push
push
xor
bnd
ficom
mov
test
fwait
outs
loope
sub
jle
cld
popf
xor
mov
(bad)
jge
mov
rcl
mov
popf
sbb
inc
cmp
clc
xchg
lock
pop
push
icebp
jle
popa
repz
cmp
sbb
and
cmp
pop
rcl
push
cmps
xchg
pop
xchg
xor
adc
enter
mov
add
into
shl
std
dec
pop
dec
fcomip
cmp
ret
jae
movs
mov
retf
and
sahf
mov
push
mov
push
es
mov
jb
jo
sub
xor
aam
pop
aas
mov
adc
(bad)
xchg
test
add
frstor
(bad)
jg
adc
fcomp
nop
cli
or
cwde
sub
test
outs
xchg
mov
jnp
add
rcl
push
mov
pop
dec
std
adc
dec
mov
jmp
push
sbb
mov
cmp
mov
add
jecxz
sub
mov
lods
std
punpcklbw
jp
pop
mov
mov
add
cwde
lock
xchg
aad
mov
imul
movs
dec
shl
pop
cmps
sbb
xchg
xchg
push
push
gs
push
push
push
add
and
mov
jb
sbb
shl
mov
mov
add
fisttp
fidivr
xor
repnz
icebp
arpl
inc
lods
mov
cmp
cld
cdq
push
push
fidiv
mov
mov
(bad)
aam
mov
xor
sub
inc
and
push
shr
xchg
mov
sub
call
mov
and
mov
mov
jae
popf
test
or
loopne
sub
and
cli
mov
ret
pop
hlt
sbb
pop
lahf
pop
shr
push
ficomp
pop
jl
mov
popa
xchg
jmp
lock
xchg
or
inc
in
in
add
dec
inc
cmps
arpl
icebp
cmp
jecxz
aas
pop
push
pop
std
dec
or
adc
mov
into
adc
outs
jns
test
sti
push
dec
dec
push
stc
and
dec
sub
loope
cmps
dec
mov
dec
fld
sbb
daa
and
push
jle
add
popf
data16
je
in
push
les
or
nop
iret
jbe
adc
dec
sbb
push
aaa
stos
imul
mov
xor
add
jg
cs
xor
fstp
pop
mov
push
push
sbb
cmc
gs
or
stos
gs
daa
data16
cmps
add
cmps
pop
mov
sub
sbb
lahf
or
or
mov
jge
scas
repnz
mov
jge
in
and
jecxz
mov
xchg
jnp
cmp
jle
and
in
mov
hlt
stos
sub
adc
xchg
inc
enter
sbb
or
arpl
sub
clc
jmp
leave
ins
push
xor
push
mov
mov
inc
aad
mov
jbe
lahf
lock
push
add
pop
fwait
inc
push
or
cdq
popa
mov
or
push
inc
add
(bad)
pop
dec
sub
sub
cld
cmp
pop
sti
push
cli
loop
mov
mov
inc
dec
data16
loopne
jo
pop
mov
mov
outs
loop
xchg
sub
mov
loopne
mov
push
jo
add
push
ins
sbb
add
fs
inc
cdq
adc
ror
lods
(bad)
sahf
rcl
mov
aad
retf
cwde
push
lds
xchg
mov
jl
jmp
and
pop
ss
test
push
pusha
fwait
ret
adc
mov
inc
fstp
test
fisub
push
call
sbb
cmp
das
push
imul
cli
lods
add
push
cmps
mov
int
sub
pop
jp
jbe
(bad)
jb
fmul
adc
pop
and
retf
sbb
push
mov
jmp
(bad)
(bad)
jmp
or
jge
cmp
outs
ror
das
xchg
inc
pop
xchg
add
sti
out
retf
push
xchg
ds
test
hlt
iret
xor
inc
out
loope
sbb
mov
frstor
push
push
lods
sbb
aad
(bad)
xchg
leave
dec
es
or
test
into
dec
push
fidiv
jp
nop
and
push
into
ret
or
xchg
or
sbb
and
and
fnstcw
retf
mov
in
out
mov
cmp
ss
imul
repnz
jne
aam
push
das
push
sbb
(bad)
mov
xchg
or
std
pop
test
icebp
int3
into
mov
div
dec
xchg
mov
adc
xor
pop
mov
aas
sbb
and
and
jae
lods
inc
mov
dec
add
imul
out
imul
and
pop
pop
cld
ins
fwait
scas
add
jmp
push
bound
jmp
fstp
xchg
out
jge
mov
dec
movs
push
fcom
clc
(bad)
retf
jo
cmp
sub
cmp
cli
hlt
cmp
neg
repz
cld
rcr
das
xchg
ins
dec
jmp
es
sub
outs
loopne
jnp
jb
lahf
jp
and
push
mov
xor
mov
scas
jb
std
xchg
push
pop
mov
jp
cmc
loop
jne
test
adc
enter
jns
(bad)
(bad)
xchg
mov
test
add
jmp
arpl
adc
repnz
movs
sub
fstp
mov
(bad)
test
es
pop
pop
push
rep
inc
nop
fimul
adc
scas
(bad)
inc
loope
add
and
cwde
je
jbe
test
out
repz
or
mul
dec
shl
std
es
push
retf
repz
mov
sub
ficom
cli
ss
jmp
stc
sbb
dec
mov
xchg
mov
mov
mov
xchg
xor
(bad)
call
pop
(bad)
fcom
xchg
ins
sub
imul
shr
out
scas
jne
imul
xchg
or
and
push
add
hlt
mov
or
mov
aam
xor
push
xor
and
push
lds
vpmovsxwd
push
xor
add
add
push
sub
push
pop
add
leave
lods
xchg
jo
pop
hlt
inc
dec
xchg
out
mul
les
inc
mov
ret
mov
sbb
test
cwde
mov
imul
outs
std
test
aas
add
push
push
je
jae
aaa
xor
mov
rcl
stos
mov
mov
or
push
add
pop
mov
popf
(bad)
dec
inc
mov
sub
jmp
std
cwde
stc
jl
clc
push
outs
sbb
mov
fsub
mov
mov
push
stc
(bad)
mov
xchg
xchg
push
or
sahf
inc
retf
mov
ds
mov
xor
stos
sbb
push
sub
in
mov
jge
xlat
outs
dec
gs
movs
pop
les
inc
sub
mov
push
bound
or
mov
or
sub
mov
sub
mov
fdiv
push
int
xchg
xchg
push
std
xor
sbb
cdq
pushf
jmp
add
xor
rol
inc
mov
in
cmc
dec
gs
cmp
(bad)
xor
ins
aaa
(bad)
int
inc
push
scas
pop
dec
add
into
cmp
push
not
pop
out
add
das
ror
pushf
inc
cmc
movs
inc
test
ss
movs
repz
jg
mov
jl
(bad)
push
js
cli
int3
and
mov
xchg
dec
hlt
aaa
test
sbb
(bad)
repz
add
enter
scas
push
adc
call
sbb
or
inc
ds
retf
sub
pop
loopne
pusha
cmps
add
xchg
and
hlt
or
stc
jl
dec
stos
aaa
ins
shr
cmp
add
sub
xchg
es
xchg
cmp
pop
dec
loop
pop
push
mov
jl
push
scas
cld
and
pop
inc
add
mov
out
scas
cs
mov
les
sub
and
sub
mov
jns
pushf
psrad
cdq
push
dec
cmps
aad
jo
rcl
lods
dec
dec
xchg
movs
xchg
cmc
xchg
jecxz
shr
fisubr
idiv
xchg
imul
xchg
ss
mov
test
sbb
add
cdq
xor
jns
out
push
dec
ss
inc
int3
mov
fstp
retf
test
call
cdq
dec
(bad)
data16
mov
popa
fwait
xor
fucom
js
das
push
cmp
imul
out
pop
dec
aaa
xchg
lahf
cmp
retf
mov
les
in
das
in
mov
push
mov
cdq
dec
addr16
je
push
int3
daa
inc
push
cmp
cmp
sub
das
sar
jmp
xchg
adc
fistp
mov
repnz
pop
mov
pop
sub
inc
dec
jo
adc
mov
mov
inc
push
outs
push
or
fs
(bad)
mov
push
aam
(bad)
call
ss
(bad)
hlt
mov
in
jbe
retf
push
ins
fwait
jmp
hlt
cmp
mov
sbb
dec
retf
into
stos
shr
aam
inc
pop
jmp
dec
jno
enter
xchg
mov
and
sbb
push
mov
fst
les
mov
inc
push
adc
test
ret
icebp
mov
jb
popf
adc
dec
movs
pop
xor
jle
jno
test
loope
jno
ins
in
pop
sbb
imul
sbb
loope
ja
push
icebp
ret
popf
mov
cmp
bound
into
inc
test
add
and
test
ja
mov
fistp
adc
out
mov
sti
sub
icebp
or
or
dec
dec
popa
mov
call
pop
aad
or
(bad)
shld
(bad)
daa
movs
(bad)
out
(bad)
cmp
adc
sbb
mov
daa
(bad)
and
test
gs
mov
out
cmps
outs
and
repnz
push
repz
adc
jl
jae
fs
push
xor
ret
sub
aam
cmp
je
ja
(bad)
push
jmp
or
in
retf
pop
ret
cs
ret
cmp
pusha
pusha
(bad)
out
xchg
cmp
jae
outs
push
movs
mov
dec
movs
(bad)
scas
ret
push
pop
ja
adc
arpl
movs
movs
mov
add
(bad)
popa
clc
jb
ins
pop
mov
shr
add
push
stos
lods
aam
shl
test
inc
dec
nop
test
in
pop
gs
out
sahf
rcl
inc
mov
cmp
stos
cmps
adc
sbb
sub
xor
ror
mov
pop
test
out
cmp
add
das
jl
cmp
fstp
mov
xchg
push
repnz
inc
stos
pop
dec
adc
inc
pop
fwait
pop
cmps
out
scas
push
out
stos
in
sbb
push
shr
test
mov
or
jno
ret
jmp
iret
jle
imul
cmc
xchg
dec
ret
pop
jmp
std
and
cmp
mov
lds
sub
out
lahf
xchg
ss
call
out
(bad)
das
mov
pop
jle
push
scas
mov
loopne
cwde
aam
fwait
hlt
aaa
push
loopne
js
ror
pop
ds
mov
and
dec
jns
dec
sahf
dec
pop
in
fwait
and
cld
cmps
dec
sbb
enter
pop
add
(bad)
out
xor
aaa
add
int
push
into
mov
inc
jo
das
sub
ins
jns
jg
retf
inc
enter
iret
xlat
into
inc
jnp
jge
mov
jno
xor
cmp
aam
test
mov
hlt
sbb
repz
mov
data16
jmp
jae
in
dec
mov
mov
inc
dec
shl
mov
or
mov
mov
aam
mov
dec
fadd
stos
call
test
jo
dec
push
(bad)
sub
or
sub
dec
push
or
add
pop
stos
mov
outs
cdq
adc
outs
xchg
jge
jbe
loopne
adc
(bad)
out
jge
push
aam
and
sub
xchg
mov
pop
dec
mov
pop
call
retf
inc
lock
shr
aaa
pop
jns
aas
mov
in
frstor
out
xchg
arpl
lods
add
loope
mov
or
test
jno
ins
jb
pop
jne
int
js
pop
repz
and
jae
pop
outs
jnp
sub
(bad)
rep
call
inc
js
retf
movs
xor
jmp
hlt
cmp
push
popa
fwait
movs
pop
(bad)
adc
ja
add
cmp
sbb
pop
mov
ins
pcmpeqw
mov
sti
fstp
clc
adc
mov
ds
hlt
pop
inc
lahf
sbb
jecxz
rcr
xchg
and
or
inc
test
push
pop
adc
nop
adc
cmp
pop
xor
xor
shr
inc
loop
sub
add
fsubr
jmp
scas
add
sub
test
shr
fs
(bad)
loope
xor
sbb
scas
sahf
cmp
mov
xor
fist
imul
imul
jae
adc
xlat
mov
mov
dec
pop
adc
imul
mov
fs
jp
push
xchg
push
jecxz
cmp
pop
mov
retf
cwde
test
sbb
mov
and
lahf
cmp
and
imul
fwait
push
add
xchg
popa
imul
call
pop
pushf
xchg
pop
or
das
mov
ds
push
inc
into
pop
std
inc
cld
imul
push
xchg
adc
xor
jge
jno
leave
fbstp
push
mov
sti
jne
popa
or
lods
mov
jle
ins
xlat
push
js
cmc
je
cmp
inc
sub
das
push
in
mov
push
jg
jmp
mov
imul
(bad)
jge
ds
call
jge
ins
jnp
inc
or
jae
push
adc
cmp
in
mov
loope
or
test
inc
ret
xor
loope
jns
mov
movs
xchg
fisub
pop
fisub
jle
mov
iret
das
call
out
inc
add
popf
sub
xor
push
add
lock
mov
js
sub
je
dec
scas
and
jae
and
sbb
mov
sub
lods
and
clc
scas
imul
push
call
sbb
rcl
movs
or
push
inc
cmc
into
sub
pop
aaa
push
popa
aaa
jl
push
not
test
lds
fcmovne
sbb
xchg
xor
aad
sbb
ret
mov
shr
inc
xlat
pop
fdivr
aad
iret
inc
sbb
jl
sbb
xor
je
jno
jne
(bad)
sbb
mov
(bad)
ins
cmps
add
push
leave
and
xchg
out
fs
jae
pushf
addr16
shr
dec
xor
jbe
(bad)
mov
int3
push
sbb
mov
mov
enter
or
adc
mov
test
sub
dec
fsubr
jecxz
sub
mov
out
imul
or
sbb
repz
jmp
pusha
ins
pop
or
rcr
inc
sub
mov
into
in
cmp
adc
xor
xchg
inc
xchg
mov
or
popa
iret
and
adc
stc
popf
in
push
cmc
adc
sbb
popa
ret
retf
lock
mov
or
xor
bound
(bad)
pop
cmc
out
or
jle
jg
cmps
repnz
jge
test
popf
loop
xchg
lgs
nop
outs
dec
sbb
and
cld
pushf
mov
cs
xor
popf
push
lods
das
push
cdq
lds
cmp
jle
cmp
adc
into
sbb
mov
push
fdivr
test
dec
cld
sbb
jne
loop
xor
loop
jmp
out
cmc
push
jno
mov
leave
xchg
mov
enter
adc
push
add
dec
cmp
popa
mov
push
xchg
adc
push
imul
mov
addr16
jge
jp
std
dec
jns
iret
and
dec
adc
jp
pushf
pop
stos
and
movs
mov
inc
hlt
scas
push
push
sub
xchg
mov
pop
inc
mov
fdivr
mov
jbe
leave
adc
in
outs
pop
fdiv
xchg
test
scas
loop
jne
xchg
mov
out
jmp
dec
repnz
rcl
lock
in
and
(bad)
sahf
stc
cld
icebp
and
mov
inc
iret
jmp
loope
mov
neg
mov
xor
and
jnp
sub
inc
adc
imul
cmp
ja
arpl
xchg
pop
jae
shl
dec
push
xor
lahf
or
int3
push
pop
xchg
addr16
mov
add
jae
test
data16
push
hlt
cli
adc
mov
push
adc
in
mov
aaa
icebp
arpl
(bad)
jmp
sbb
xchg
(bad)
pop
dec
sti
and
jbe
scas
lds
cmp
pop
hlt
(bad)
cwde
ret
or
(bad)
enter
in
les
jl
cmp
cmp
mov
sbb
push
dec
jns
cmp
ss
scas
dec
iret
xchg
push
sbb
xlat
mov
out
cmp
mov
mov
repnz
rcl
(bad)
bswap
xchg
sub
fadd
in
scas
cli
jae
cmp
cmc
xor
mov
sub
sub
mov
and
mov
scas
lods
sahf
stos
fiadd
test
out
call
inc
repz
pop
cmc
out
ret
adc
or
add
call
mov
pop
add
cmps
loope
inc
mov
js
ficomp
pop
add
test
cmp
ss
out
pmuludq
sub
fstp
les
ffreep
or
add
outs
xchg
xor
movs
jg
aam
retf
cmp
test
mov
(bad)
jmp
xchg
pop
cdq
push
sub
pop
leave
or
das
cmp
mov
and
and
pop
popf
sbb
nop
dec
sub
inc
sub
ffreep
fwait
std
add
clc
pop
cmc
lock
inc
push
jmp
lods
add
retf
aaa
xchg
fs
sbb
out
call
sub
mov
cld
jmp
inc
sub
dec
cwde
pop
cs
sti
push
imul
jo
out
cmp
(bad)
fisttp
sub
inc
retf
pop
call
rcl
mov
test
cmp
xchg
mov
sub
mov
jnp
mov
mov
dec
aas
aad
pop
push
call
pop
mov
cmp
mov
nop
aas
jmp
dec
in
sbb
mov
pop
aaa
pop
call
inc
pop
jae
(bad)
fwait
iret
jg
aas
jnp
test
cmps
dec
lds
shl
in
jp
je
call
jl
stos
sub
mov
addr16
push
cmc
xlat
sar
cmps
(bad)
enter
ins
call
mov
test
movs
fimul
mov
xor
in
xor
jecxz
sar
outs
in
mov
or
mul
xor
movs
sti
fsub
xor
pop
cmps
mov
imul
dec
cmp
cmp
mov
fstp
push
movzx
(bad)
imul
sub
cmp
cli
or
test
mov
adc
out
mov
mov
dec
mov
out
xor
xchg
popf
addr16
repz
daa
cmp
(bad)
shrd
call
xlat
inc
loopne
loopne
gs
lds
pop
adc
adc
sub
pop
std
enter
push
lock
cmp
rcl
inc
sub
xchg
jle
adc
mov
or
mov
out
cli
daa
inc
push
je
pop
call
xchg
ins
xchg
mov
pop
call
loop
mov
xchg
push
call
outs
sbb
sbb
mov
sub
(bad)
fwait
adc
call
push
cwde
jbe
stos
into
pop
adc
add
sar
ins
cs
test
xor
int
fwait
lock
push
cwde
xor
cs
add
push
mov
mov
push
jo
lea
ret
or
or
std
jge
je
rol
sbb
push
das
xchg
jp
hlt
stc
nop
iret
cld
scas
das
push
scas
jmp
cmp
imul
ins
call
test
mov
repz
std
enter
mov
pop
(bad)
scas
push
xor
add
aad
dec
mov
jle
cmp
sbb
sbb
icebp
adc
cmc
fisttp
jmp
mov
fidivr
aad
scas
jmp
push
mov
std
push
mov
cmc
sbb
sbb
scas
popa
ins
dec
or
ins
fistp
pop
mov
push
aas
aas
jmp
jle
mov
imul
inc
std
sub
push
push
sub
push
jo
fidiv
mov
jle
and
inc
push
mov
cwde
(bad)
sbb
ins
inc
cmp
(bad)
fwait
jnp
hlt
add
push
mov
push
mov
je
les
sub
aad
mov
test
push
nop
add
pop
retf
mov
mov
or
cmps
imul
loop
sub
out
jg
mov
adc
test
xchg
(bad)
xor
ins
int
ret
dec
jl
dec
mov
pusha
leave
in
mov
mov
xchg
push
add
in
inc
sub
(bad)
xor
push
aas
pop
xchg
xlat
jns
xchg
mov
lfs
out
cwde
xor
xlat
xor
(bad)
std
dec
fwait
adc
mov
add
xchg
hlt
ja
pop
lock
dec
stc
push
pop
fdivr
int
call
mov
ffree
pop
(bad)
(bad)
jge
sbb
xor
je
xchg
cmp
jb
mov
jo
out
mov
mov
or
out
(bad)
jp
xor
hlt
iret
nop
(bad)
xor
in
mov
retf
cmp
mov
rcl
punpcklbw
leave
jge
xchg
jae
mov
cmp
popf
ins
in
mov
dec
pop
push
jecxz
push
jmp
out
int
or
xchg
mov
mov
aad
test
in
inc
or
rcl
push
pop
xchg
(bad)
xor
sub
inc
sbb
in
mov
mov
push
test
rcr
daa
bt
pop
lods
loop
push
leave
leave
dec
je
or
cmps
aaa
cld
mov
cli
adc
fdiv
retf
test
sub
push
sub
xor
scas
add
ins
push
mov
sbb
fistp
mov
loope
les
in
add
ret
inc
cmp
push
sbb
icebp
cmps
cmps
xor
xor
cmp
stos
repnz
push
dec
dec
imul
iret
cmps
jg
jnp
test
sub
fs
ror
fcmove
fcmovnb
out
and
add
inc
(bad)
popa
cmp
ins
xor
xor
mov
ja
sub
mov
pop
dec
scas
push
jg
or
pop
int3
stos
nop
iret
in
sbb
mul
sti
cwde
out
ins
mov
retf
and
loop
je
enter
aad
inc
fwait
push
push
retf
mov
push
adc
(bad)
inc
inc
addr16
cld
movs
movs
xor
cmps
sbb
loope
mov
jno
cwde
mov
xchg
ins
in
mov
out
and
loopne
or
sbb
xchg
xchg
and
icebp
jae
jo
mov
int
cmc
jecxz
push
jns
cmp
push
or
inc
out
mov
outs
adc
std
shl
mov
arpl
fldenv
xor
pop
xchg
je
push
sbb
cmp
jns
mov
xor
dec
shl
and
loopne
(bad)
int3
icebp
call
pop
or
lds
pop
cmc
ins
(bad)
jge
fmulp
push
movs
lods
dec
xchg
out
mov
dec
adc
pop
xchg
popa
aam
sub
fist
and
scas
pop
mov
iret
outs
imul
icebp
aaa
adc
cld
(bad)
(bad)
jmp
inc
gs
inc
lods
adc
fdiv
je
test
mov
sub
in
in
push
mov
xchg
cmp
iret
jecxz
and
inc
pop
popf
rol
or
rol
pushf
arpl
in
(bad)
pop
cli
inc
retf
lds
(bad)
lds
iret
mov
pop
popa
rcr
test
nop
cdq
rcl
mov
jnp
retf
stc
shr
xor
js
js
mov
push
cs
rol
fsubr
test
jmp
mov
fcom
cld
lea
jbe
not
xchg
mov
adc
nop
repz
cmps
jae
jecxz
(bad)
or
mov
out
or
stc
mov
mov
into
std
ins
pop
mov
ja
jb
inc
pop
ins
mov
push
fld
cwde
hlt
xor
inc
ficomp
sbb
inc
push
ret
xor
mov
sar
xchg
mov
cmp
sub
cmp
or
xchg
aad
dec
ret
fst
cdq
push
(bad)
mov
arpl
sub
div
sbb
push
lods
aas
aam
fbld
sbb
xor
pop
pop
push
sub
scas
cmp
gs
std
jne
mov
test
inc
mul
clc
cmp
jge
fs
mov
lods
nop
(bad)
clc
test
sar
sbb
lods
jne
leave
rcr
jb
les
retf
popa
scas
mov
loope
cmp
mov
pop
ret
push
cmps
mov
mov
and
(bad)
in
arpl
or
sar
mov
pop
aam
shr
(bad)
sub
addr16
je
mov
xchg
inc
and
lahf
ror
into
mov
push
loopne
cmp
xchg
je
pop
outs
xchg
movups
jae
mov
cmp
mov
cmc
ja
out
inc
stc
and
push
ret
ffreep
pop
xor
push
clc
cld
pusha
xchg
int3
in
into
in
retf
sahf
mov
fidivr
adc
hlt
ja
fist
pop
stos
ret
adc
mov
cmp
call
shr
jecxz
sub
push
push
or
pop
lea
push
icebp
cmp
xchg
push
je
gs
bound
mov
push
dec
cmps
jae
xrelease
adc
mov
aam
sbb
jmp
pop
aam
mov
stos
mov
out
pusha
lods
fadd
or
xor
aam
xchg
jp
xlat
shl
xor
mov
jne
pushf
ficomp
mov
mov
add
test
mov
jmp
cli
mov
jnp
push
std
pop
pop
cmps
jle
stos
dec
retf
icebp
(bad)
out
popf
loope
loopne
movs
cli
dec
daa
iret
retf
add
mov
mov
jnp
push
test
pop
sbb
dec
pop
pxor
out
sahf
mov
loop
cli
jp
stc
iret
iret
les
pop
or
scas
hlt
out
loop
jne
cmp
and
mov
xchg
add
je
cmp
addr16
test
imul
packssdw
xchg
mov
kmovq
sub
shl
movs
mov
pusha
sbb
inc
and
xchg
xchg
cs
push
lahf
cwde
mov
mov
xor
sub
movs
lea
jmp
rcl
rol
push
adc
int3
aad
sbb
test
jae
push
push
gs
(bad)
pop
pushf
(bad)
pop
cli
xlat
loop
lock
(bad)
push
dec
ds
shl
xor
fwait
cmp
or
sub
lods
cmp
mov
push
hlt
dec
and
dec
cld
lahf
shr
xlat
mov
outs
fcomip
out
add
cdq
fcomp
sbb
mov
and
inc
ss
inc
jne
mov
dec
jae
out
(bad)
jge
sbb
fnsave
in
cli
dec
arpl
leave
ins
rol
out
and
fldcw
out
push
popa
cmp
dec
ret
and
adc
(bad)
jmp
(bad)
adc
in
mov
enter
jle
jmp
retf
mov
mov
aas
ja
and
jno
cmc
push
add
cmp
cwde
inc
xchg
push
dec
ins
cmp
adc
data16
cli
or
loop
stc
inc
stos
aad
add
lds
(bad)
mov
mov
fwait
inc
push
mov
adc
adc
push
lahf
(bad)
and
cmps
fimul
inc
jb
xor
out
out
sbb
inc
stc
jnp
mov
in
repnz
pop
jp
adc
dec
ja
repnz
pop
adc
xchg
sub
sub
xchg
outs
stc
adc
jns
add
pop
std
push
push
arpl
es
and
mov
mov
bound
adc
inc
dec
in
jae
xchg
pop
fwait
push
leave
bound
xchg
in
loope
out
push
sub
or
outs
cmc
mov
outs
mov
sar
mov
sub
mul
out
lods
retf
loopne
les
imul
and
sbb
mov
stos
in
out
lods
xchg
inc
fisub
add
mov
inc
push
xor
and
dec
mov
inc
call
inc
lea
sbb
sbb
cmp
inc
repz
out
loop
popf
retf
adc
sbb
test
sub
jne
adc
xor
icebp
fist
sub
cmp
sbb
jecxz
out
cmp
cmp
sub
xchg
pop
jb
xchg
int
or
mov
hlt
mov
dec
stc
(bad)
sti
dec
out
not
pop
add
movs
adc
jmp
sbb
pusha
mov
jg
das
inc
in
add
push
ss
push
push
jae
dec
sbb
sub
xchg
(bad)
jle
lods
clc
sbb
ret
sub
mov
js
test
ins
stos
xor
jbe
xlat
mov
mov
jecxz
sub
movs
into
das
fucom
fimul
ins
and
test
push
cmc
adc
aad
sub
hlt
frstor
push
mov
dec
jmp
lods
or
lds
scas
jp
jnp
pop
in
adc
xchg
icebp
pop
dec
push
icebp
mov
das
push
or
leave
xchg
stos
xchg
lea
das
cs
ror
and
iret
in
xor
test
aad
jecxz
popa
mov
popf
cmp
fs
sbb
pusha
addr16
aaa
retf
sbb
jmp
mov
sbb
and
xor
mov
sub
and
cmp
mov
repz
mov
aad
pusha
add
pop
xchg
(bad)
lods
(bad)
inc
pop
imul
popf
mov
cmp
sub
or
push
jl
imul
ss
imul
jl
je
fwait
js
lds
sbb
cmp
adc
xor
sbb
sbb
sbb
or
sbb
les
cmp
sbb
repz
hlt
lea
sbb
mov
push
in
dec
cmp
adc
aam
pop
mov
jne
inc
and
jge
jb
mov
cdq
(bad)
lea
je
ss
push
push
or
jnp
cmp
dec
xor
retf
lea
lea
mov
std
stc
cmp
repz
mov
enter
pushf
inc
repnz
adc
mov
repnz
mov
sub
jmp
bound
and
pop
sub
ja
and
xor
sahf
shl
aaa
jae
shl
xor
and
cmps
rol
out
add
adc
repz
(bad)
fs
jmp
push
bound
xor
lahf
mov
xor
mul
iret
fadd
pop
and
outs
(bad)
iret
aas
ins
in
outs
and
mov
xchg
cmp
sahf
and
mov
scas
outs
or
sbb
les
mov
aaa
fistp
mov
inc
mov
scas
aaa
sti
cmp
or
(bad)
cmp
sbb
ja
mov
cmp
dec
fld
aam
je
das
sahf
push
test
retf
(bad)
enter
or
repz
jle
or
lds
(bad)
pop
dec
sub
data16
fdivr
adc
xchg
xchg
test
xlat
(bad)
mov
jmp
jb
rol
bound
inc
addr16
push
lea
shr
shl
xor
lds
mov
fidivr
adc
mov
cmp
stos
xchg
leave
xchg
div
dec
aaa
push
test
aam
sbb
push
outs
inc
scas
in
mov
mov
pop
and
jmp
jge
lahf
imul
es
mov
push
mov
xchg
sbb
mov
mov
sbb
cld
adc
clc
and
cmp
add
add
cli
pop
or
les
call
sti
sbb
shl
jmp
call
pop
test
in
and
mov
mov
adc
retf
sub
inc
jo
push
imul
pushf
mov
(bad)
mov
pop
xchg
xor
in
add
pop
js
imul
movs
mov
pop
jp
pop
out
adc
mov
out
mov
js
loopne
fiadd
lods
jl
xlat
cmp
jg
stos
aam
inc
mov
add
out
cli
mov
cs
xor
pop
inc
(bad)
mov
xor
fldenv
test
dec
mov
ss
and
sbb
or
cmps
ds
push
or
jns
sub
mov
cmp
in
mov
pop
mov
inc
push
mov
imul
(bad)
fimul
pop
aad
xchg
lahf
sub
push
push
lea
fild
idiv
xchg
pop
dec
ret
ds
test
cmp
adc
pop
pop
sbb
xor
sahf
sub
cmps
dec
test
dec
js
push
and
add
pusha
or
push
mov
cmp
cli
enter
mov
and
mov
ja
movs
mov
into
stc
sub
sub
popf
in
add
into
cld
pusha
cmp
jl
xchg
inc
or
sub
adc
out
cmc
stc
jl
shl
data16
push
mov
arpl
pop
je
loop
push
xchg
out
xlat
jno
jmp
lods
aam
and
jnp
inc
and
push
mov
mov
dec
xchg
sbb
or
jo
call
push
sahf
mov
or
sar
shld
stos
in
dec
les
scas
mov
js
dec
push
mov
test
in
ret
inc
aas
inc
or
aaa
add
lds
push
xor
sbb
adc
call
cmp
jp
enter
mov
xchg
aaa
mov
shl
out
mov
das
sbb
xor
sahf
dec
cli
or
mov
inc
mov
add
test
or
in
aas
mov
xchg
and
mov
cmp
jo
cmp
into
mov
jg
mov
not
repnz
push
out
push
cmp
or
push
push
in
push
sub
addr16
ja
mov
mov
xor
dec
push
sbb
in
nop
jp
imul
jo
(bad)
mul
xchg
inc
mov
movups
inc
iret
icebp
jecxz
jmp
stos
arpl
cld
leave
cmp
mov
bound
cmc
rcl
xchg
mov
rol
xchg
js
nop
div
pop
movs
bnd
loope
push
mov
or
pop
cs
xchg
stos
pop
lds
ja
push
dec
test
xchg
sti
add
jle
push
mov
push
mov
sbb
pop
mov
lea
shr
jno
mov
int3
mov
nop
pop
inc
dec
mov
pop
xor
add
dec
imul
jp
push
nop
add
and
mov
dec
cmp
(bad)
push
popf
mov
jno
xor
ja
in
les
pop
lahf
push
pop
jge
stc
call
ins
sar
adc
movs
out
dec
pop
addr16
shl
add
mov
mov
jmp
xchg
test
arpl
fs
mov
push
aad
lahf
test
xchg
(bad)
jge
inc
dec
push
mov
pop
jp
xchg
dec
aam
sbb
adc
xchg
stos
push
lea
retf
push
jg
outs
rol
inc
jne
mov
pop
in
mov
xchg
ins
lods
aad
retf
pop
push
and
inc
jae
inc
xchg
sar
(bad)
jae
movs
cmc
mov
jae
les
lods
sub
mov
movs
mov
sar
add
xor
neg
jae
jns
dec
idiv
mov
sub
je
pop
or
fadd
xchg
pop
jmp
std
xchg
push
push
das
es
sbb
(bad)
and
push
mov
addr16
cli
mov
adc
or
cmp
xor
ins
jecxz
push
imul
adc
repnz
in
lds
sbb
and
jmp
aas
push
retw
mov
pusha
mov
mov
ss
int3
shr
pinsrw
test
sbb
and
xchg
xchg
iret
int3
je
jmp
fcmove
cmps
arpl
dec
xor
rcl
mov
jnp
data16
mov
push
add
shl
add
adc
xor
daa
dec
xlat
fsub
dec
xor
inc
lds
xor
add
cmp
sti
(bad)
popa
mov
test
shr
sub
xor
outs
mov
sbb
inc
out
fstp
xor
add
ss
jmp
and
in
cmc
scas
cli
repnz
add
and
loope
scas
adc
call
addr16
pop
cli
fidivr
out
(bad)
test
mov
pop
(bad)
push
push
fwait
jmp
xor
mov
jge
dec
push
fistp
xchg
iret
jns
dec
call
dec
(bad)
out
ret
cdq
les
pop
int
arpl
cmps
call
mov
test
cwde
stos
mov
mov
cmp
fdiv
jmp
mov
std
cmp
mov
loopne
push
sti
pushf
fcomi
or
hlt
pop
push
push
jmp
cmp
(bad)
call
das
icebp
mov
imul
pop
in
pop
and
pop
icebp
pop
aaa
imul
outs
sub
rcl
shl
(bad)
pop
push
popa
cmp
movs
enter
lods
xor
cmc
inc
pop
sub
(bad)
adc
or
aaa
call
lods
add
mov
(bad)
mov
(bad)
shl
inc
mov
mov
and
or
push
mov
ret
push
ds
dec
pushf
jb
hlt
movs
shl
popf
fldz
repz
mov
out
test
stc
loopne
mov
push
stc
mov
pop
clc
add
sub
jbe
pop
jno
and
rcr
jno
(bad)
fst
out
pop
stos
into
mov
mov
cmps
cld
jne
(bad)
icebp
inc
movs
outs
add
pop
xchg
scas
shr
imul
(bad)
dec
ss
add
outs
out
dec
aad
popf
movs
scas
mov
push
mov
or
and
retf
xor
jbe
inc
cmp
call
(bad)
push
push
adc
push
cmp
cwde
cmp
push
fldcw
xchg
sar
cmp
pusha
mov
inc
mov
sti
pop
pusha
out
mov
ror
jb
push
repz
das
ficomp
pop
outs
mov
jo
xchg
popf
xor
sbb
xor
xchg
add
aas
fisubr
cli
inc
test
std
push
cli
je
xchg
sti
and
int3
pusha
outs
movs
xlat
repnz
and
movs
adc
jp
mov
cmps
mov
es
into
inc
add
inc
dec
repz
scas
and
(bad)
(bad)
push
lods
push
and
cmc
fnstcw
jbe
push
and
stos
cmps
mov
cmc
push
dec
test
cmp
aam
out
or
mov
ficomp
push
pushf
mov
ins
js
in
adc
xchg
cmps
mov
cli
mov
aas
push
shl
jb
loopne
inc
jmp
mov
cmp
pusha
push
jecxz
xchg
stos
mov
js
in
xchg
(bad)
xchg
imul
xor
dec
mov
cmps
jl
pushf
lahf
cmp
repnz
jle
fs
dec
cmp
std
mov
es
out
fstp
out
imul
sti
xchg
sahf
out
adc
out
xchg
imul
add
dec
repz
xchg
out
mov
into
adc
xlat
push
adc
mov
pop
bound
call
repnz
push
adc
push
popa
cmp
pushf
and
popf
xor
rcl
mov
mov
sbb
rcl
sub
test
loope
or
sbb
dec
or
adc
push
add
bound
mov
pushf
test
mov
cmp
cmp
xor
aam
jne
(bad)
ror
cs
push
pop
sub
sub
jno
xchg
hlt
adc
stos
arpl
mov
jbe
xor
add
cmovle
pop
jmp
in
pop
mov
popa
ins
mov
push
ins
retf
xchg
jmp
and
call
mov
pop
stos
retf
call
ins
jnp
aaa
fwait
xchg
call
mov
lahf
stos
xor
call
icebp
and
out
pop
movs
xchg
iret
sti
adc
add
mov
out
test
sub
jns
rcl
cs
xlat
shl
cmp
enter
sbb
cs
fisubr
ficom
push
push
mov
mov
into
mov
pop
(bad)
adc
sub
push
pop
mov
mov
rcl
retf
cmp
retf
cdq
xlat
adc
out
test
cld
enter
xor
out
pop
cmps
retf
pop
jp
dec
fs
lahf
pop
repnz
in
jbe
jmp
xor
jno
xor
mov
or
mov
jbe
inc
jo
ins
mov
lahf
daa
icebp
inc
and
adc
mov
inc
sub
int3
mov
sbb
mov
and
loopne
sar
hlt
ss
sar
push
call
imul
aas
sub
add
lea
retf
bound
adc
push
(bad)
jl
or
jmp
shl
mov
fwait
retf
jmp
lds
into
mov
pop
test
inc
sub
dec
fidivr
out
push
scas
inc
adc
test
inc
dec
outs
fist
pushf
or
sbb
jle
stc
mov
std
jne
xchg
mov
(bad)
xchg
pop
fdiv
and
mov
mov
mov
mov
xchg
sub
or
popf
xor
xor
(bad)
stc
scas
out
jae
mov
dec
sahf
in
shr
pop
retf
jnp
fidiv
xor
xrelease
sub
sbb
(bad)
pop
dec
mov
ret
repz
cwde
outs
xor
cmps
adc
cmp
jle
pop
sar
jl
mov
lock
mov
push
fild
je
jmp
je
mov
mov
add
sbb
sub
out
mov
mov
aaa
out
popf
loope
and
vminpd
and
mov
test
lea
cmps
sbb
jb
pushf
mov
(bad)
xchg
and
dec
jno
cmps
cmp
mov
mov
loopne
dec
pop
(bad)
jg
sbb
repnz
mov
mov
add
xchg
dec
xor
xchg
outs
dec
cmp
pop
(bad)
cld
repz
test
push
imul
(bad)
jg
clc
loope
cmc
mov
pop
sbb
(bad)
movs
mov
popf
fbstp
scas
mov
or
pop
sbb
and
push
inc
add
scas
cmp
frstor
repnz
retf
in
clc
inc
dec
movs
in
xchg
clc
and
push
sbb
mov
cs
arpl
rcl
stos
or
sar
out
add
sbb
test
inc
aam
jae
mov
out
push
cmp
push
pop
pop
cld
mov
xchg
dec
pop
div
in
jnp
push
jno
mov
inc
js
call
pop
retf
inc
add
loope
or
movs
leave
cmps
cmps
xchg
test
shr
lahf
(bad)
out
mov
out
stos
mov
in
mov
sbb
shl
int
dec
sub
dec
(bad)
cmp
pop
sti
pop
ret
and
cdq
aam
hlt
add
loopne
ds
or
mov
data16
add
xchg
dec
ret
mov
cmp
dec
xchg
xchg
jb
scas
pop
(bad)
stos
jmp
jo
adc
clc
inc
pushf
add
rol
icebp
inc
push
jb
js
push
(bad)
lods
mov
call
xor
pusha
mov
std
or
(bad)
(bad)
mov
inc
inc
dec
jno
xchg
cmps
and
mov
jp
add
dec
test
xor
out
mov
stc
test
sar
stc
repz
fwait
jmp
mov
inc
rol
cs
xchg
pop
pop
sub
clc
sub
jns
mov
test
pop
pop
es
xchg
loope
in
adc
jle
ins
(bad)
push
fabs
(bad)
push
jmp
pushf
call
and
imul
sub
je
xor
or
push
lods
sbb
daa
jge
add
add
js
cmp
out
jne
jbe
inc
mov
jne
std
fwait
push
sbb
fwait
(bad)
jb
jne
pop
fwait
sbb
pop
push
mov
out
add
add
cli
pop
neg
xor
xchg
(bad)
int3
jg
mov
rcr
out
cmp
dec
fmul
cmps
ret
jl
hlt
cmp
mov
cli
xor
das
mov
int3
mov
fwait
add
iret
push
loope
cs
add
inc
retf
outs
mov
dec
pop
aas
enter
arpl
mov
sub
out
test
fisubr
and
ret
push
cld
or
inc
addr16
imul
lea
push
out
jmp
adc
dec
xchg
not
adc
xor
fs
les
je
mov
adc
aas
arpl
jecxz
adc
pop
inc
les
shl
in
cmp
mov
lahf
cli
scas
div
call
popa
push
daa
sbb
dec
pop
mov
adc
pusha
cmps
lds
adc
jne
jle
inc
push
ins
mov
pop
and
shr
mov
out
mul
scas
imul
aam
xchg
sbb
jno
add
adc
retf
daa
cmp
pop
faddp
(bad)
sahf
nop
cmp
bound
test
enter
cmp
inc
xchg
pop
inc
cmp
ja
adc
jp
mov
push
cs
sub
jb
out
popa
sub
fild
ins
ds
ins
fwait
pop
push
jo
(bad)
clc
pop
jne
jo
push
dec
pop
inc
mov
add
pusha
dec
das
mov
les
jg
rol
mov
cs
ret
dec
dec
iret
jmp
addr16
add
adc
jae
aad
out
mov
call
mov
fstp
jmp
or
dec
mov
mov
jbe
xrelease
stc
das
(bad)
es
ret
in
add
rcr
mov
call
sahf
pop
lods
pop
pop
aaa
lods
xchg
loope
sub
cli
jge
jge
sub
jmp
imul
inc
adc
out
(bad)
in
cmp
loop
jae
add
inc
out
jmp
xor
inc
mov
movs
sti
mov
adc
jge
adc
cdq
jmp
sub
xchg
cli
or
pop
in
push
add
mov
sub
mov
cdq
imul
out
stc
or
push
mov
cmp
add
inc
fstp
fld
add
fadd
add
test
icebp
cmp
test
dec
xchg
push
enter
aas
loopne
xchg
mov
fiadd
ins
cli
sub
xchg
test
jmp
or
ret
xor
mov
clc
fld
inc
rep
fs
fwait
out
popf
ja
fsubr
aaa
jge
fwait
lds
lahf
sbb
lods
add
ffree
inc
rcr
mov
adc
xor
(bad)
lock
sbb
push
arpl
or
add
or
xchg
pop
outs
push
sbb
mov
dec
fsub
lock
test
jecxz
iret
bsf
cwde
loopne
rol
jne
adc
addr16
jb
test
inc
cs
push
in
or
int3
aad
fldenv
push
jae
mov
add
jne
push
sbb
dec
adc
in
sbb
sbb
pop
data16
(bad)
cli
adc
loopne
movs
das
xor
int
cli
(bad)
jg
je
cmp
int3
repz
cmp
xchg
cmp
call
aaa
cmp
jg
adc
inc
cmps
push
and
call
(bad)
jmp
push
retf
xchg
adc
push
sub
js
popf
and
fcom
sub
sub
in
mov
lods
xor
mov
cwde
fsub
lahf
pushf
out
xor
pusha
pop
pop
dec
xor
das
pushf
out
mov
jmp
cld
rcl
pop
cmps
sub
fdiv
popa
cli
imul
xchg
push
in
call
push
stos
mov
shr
sahf
imul
leave
pop
or
jg
es
gs
inc
pop
clc
mov
int3
pushf
mov
jmp
add
cmp
ja
stos
cmp
pop
inc
js
jge
scas
pop
mov
enter
or
ret
mov
rcr
inc
stos
push
push
loopne
cmps
pop
clc
test
jmp
or
xchg
iret
push
jle
pop
ds
dec
jb
push
mov
xchg
pop
jae
pop
cmp
cmp
sar
popf
int
dec
sbb
dec
pop
dec
hlt
pop
ins
ds
int
dec
and
addr16
xchg
call
std
push
fwait
mov
mov
arpl
xor
mov
xchg
into
mov
ins
or
sub
sahf
popf
(bad)
ficomp
adc
retf
test
stos
imul
int3
dec
jb
xchg
add
mov
inc
test
push
adc
shl
leave
and
adc
and
push
in
sbb
out
cli
and
in
push
mov
not
lods
lods
mov
dec
aad
or
mov
sub
adc
aam
add
out
imul
into
cmp
out
out
(bad)
stc
jge
(bad)
data16
(bad)
fidivr
neg
imul
xor
xchg
or
cmp
std
loopne
pop
push
mov
inc
popa
inc
mov
js
sbb
jne
sbb
int
loopne
xor
jmp
stc
inc
or
cmp
sbb
test
out
jmp
mov
loope
jl
int3
sbb
xchg
cmp
pop
jnp
mov
and
xchg
mov
push
fstp
add
xchg
push
loop
cmp
dec
fwait
sub
daa
call
mov
in
and
add
int
out
call
cs
sbb
in
hlt
(bad)
pusha
sbb
cmp
cmp
test
outs
inc
add
ret
arpl
call
adc
adc
out
in
fimul
jp
jmp
sbb
xor
adc
call
inc
out
loopne
in
pop
div
push
jp
ja
loop
mov
nop
cmp
rcl
mov
sahf
rcr
cmp
and
iret
push
and
test
clc
and
retf
call
cmps
cmps
outs
adc
push
sub
jo
loopne
adc
inc
movs
dec
mov
ds
(bad)
in
out
in
inc
nop
ror
lahf
jmp
push
cwde
pop
out
xchg
into
mov
sbb
jnp
shl
test
cmp
call
mov
into
cmps
mov
fldcw
fnstenv
mov
retf
cmc
fld
xor
and
lods
jnp
je
loop
pop
sbb
test
scas
pop
inc
fstp
movs
add
mov
or
icebp
sbb
js
add
pop
adc
rol
outs
mov
pop
ror
mov
dec
pop
jnp
cld
ret
push
popa
call
dec
or
daa
dec
aad
lahf
loop
ret
cmp
mov
jg
ror
pop
xchg
push
shr
xor
inc
jns
lods
sub
(bad)
dec
imul
(bad)
mov
sbb
xor
idiv
inc
add
test
bound
stos
shl
push
xlat
dec
popf
aam
loop
jbe
mov
xchg
push
imul
sub
test
sub
mov
xor
push
push
ss
aaa
jmp
fisttp
call
and
and
std
retf
pop
sub
dec
inc
or
push
fld
rcl
xchg
ret
inc
sbb
adc
sbb
scas
xor
fidivr
xor
jg
mov
mov
cdq
sar
xor
pop
xor
cmp
push
fadd
or
lods
or
add
ror
fcmovnu
mov
ret
ja
xchg
mov
idiv
test
pop
sti
aas
xor
ror
sbb
or
xor
ror
loopne
or
mov
dec
fild
pop
jns
popa
sub
xor
push
add
or
lods
je
or
or
(bad)
pushf
jne
pusha
mov
xor
push
enter
jecxz
xchg
mov
mov
push
cmc
push
inc
daa
leave
add
xor
push
pop
mov
cwde
fwait
loop
loope
ins
jbe
fidiv
xchg
iret
imul
mov
xor
out
sub
ins
mov
xor
loope
ret
mov
jno
js
idiv
loope
icebp
xchg
fist
into
pop
dec
jge
sahf
and
out
mov
inc
scas
js
in
in
cld
xor
push
sub
cli
pop
imul
aad
sbb
and
in
cmp
repz
cmp
cs
mov
xor
xor
out
adc
add
pushf
jge
xchg
xchg
mov
retf
cs
fwait
cmp
(bad)
xchg
inc
jo
jle
lds
dec
lods
ror
div
ss
(bad)
rcr
int3
pop
jmp
in
imul
mov
repnz
cmc
rol
or
xchg
jmp
fs
call
mov
inc
clc
mov
add
xchg
inc
pop
jg
fld
call
lahf
add
scas
mov
adc
shl
add
xor
mov
xchg
iret
rol
push
push
xchg
xchg
mov
xor
lods
sbb
sbb
mov
and
jmp
shr
rcl
push
mov
pop
or
xchg
in
dec
pop
push
ficomp
jo
dec
stos
sub
out
stos
mov
out
(bad)
lock
int
sbb
addr16
fcomp
inc
ret
icebp
xor
lock
sti
and
outs
sbb
(bad)
fnsave
jmp
xor
pop
test
in
neg
fbstp
je
xlat
aam
dec
int3
or
mov
sti
mov
pop
push
in
jnp
sub
arpl
jbe
inc
fs
test
xor
js
mov
pop
addr16
(bad)
jle
push
pop
mov
jb
rcl
ret
and
dec
and
in
inc
out
push
jmp
cmp
fstp
push
shl
mov
jae
xchg
push
ret
or
aad
test
dec
mov
inc
dec
cdq
or
mov
push
nop
popfw
repz
adc
or
xchg
(bad)
aas
mov
mov
or
cmp
cld
dec
jo
cmp
ret
push
fistp
mov
pop
sbb
sbb
xor
jge
mov
xchg
sub
jnp
mov
inc
cs
mov
and
popa
(bad)
test
gs
cmp
push
fcom
sbb
xor
call
rol
mov
mov
aas
mov
cmp
inc
scas
add
(bad)
fsub
js
in
and
jge
push
or
sub
jmp
hlt
pop
dec
mov
adc
icebp
xchg
and
cmp
inc
mov
stos
mov
les
adc
ret
xchg
int
daa
inc
clc
or
cmp
jae
bound
sahf
pop
jae
leave
das
daa
pop
mov
mov
cli
push
pop
xlat
cmp
push
pop
pushw
sti
sbb
sbb
mov
inc
out
sub
pop
pmuludq
ret
dec
cmps
or
hlt
mov
lds
or
fwait
mov
lock
or
add
mov
imul
mov
(bad)
sbb
mov
pop
pop
(bad)
arpl
retf
pop
or
cmp
in
stos
pop
je
lea
or
arpl
(bad)
lds
sbb
lods
xchg
ds
jecxz
sar
mov
cmp
bound
dec
mov
mov
fmul
lea
daa
inc
mov
and
loope
ret
sbb
push
jns
sbb
inc
sahf
(bad)
pop
daa
sbb
outs
ss
add
sub
jmp
(bad)
push
out
push
xor
xchg
mov
mov
cs
inc
cdq
mov
mov
test
or
pop
xor
mov
shl
fst
fldcw
inc
cld
dec
push
dec
rol
mov
cmp
fadd
sub
lahf
ins
pusha
xchg
lock
and
push
into
add
js
pop
push
cs
inc
lods
jo
rcr
jne
push
lock
(bad)
les
clc
jae
add
fcmovnbe
mov
retf
daa
into
mov
stos
ret
call
and
push
push
mov
sub
outs
ffreep
mul
inc
adc
out
sar
push
lds
fwait
jecxz
and
sbb
fild
cmc
pop
test
mov
test
es
sub
sub
(bad)
dec
dec
pop
retf
mov
jno
lods
add
(bad)
(bad)
pop
cmp
mov
xchg
cmp
adc
xchg
inc
xlat
movs
cli
pushf
test
jo
jo
mov
cli
add
mov
rcl
push
shr
call
stc
mov
sub
mov
(bad)
and
stos
ror
sti
pushf
push
into
jg
xchg
jg
pop
mov
cdq
mov
out
pop
test
dec
sar
jmp
(bad)
jbe
xor
jnp
pop
push
fdivr
inc
fnstenv
(bad)
sqrtps
pop
aaa
in
enterw
push
or
(bad)
jo
pop
lods
cmp
int
xor
loopne
in
mov
pop
out
xchg
stc
jo
pop
popf
xor
inc
imul
pusha
test
in
fild
inc
enter
out
ja
imul
push
dec
mov
in
stos
rcr
int
pop
cld
inc
cmp
add
add
paddsw
(bad)
push
dec
scas
mov
fisttp
push
fidiv
xor
fld
imul
loop
add
ror
out
clc
(bad)
int3
add
or
mov
outs
jno
ds
loopne
in
in
(bad)
fstp
daa
and
in
sti
shr
je
int
int3
(bad)
or
ficomp
push
(bad)
repnz
mov
in
cwde
jmp
add
(bad)
leave
inc
adc
push
jae
test
jb
jne
int3
mov
sbb
pusha
int
xor
sbb
xor
arpl
push
les
addr16
inc
aam
adc
cmp
jle
or
repz
in
sub
push
push
aaa
arpl
mov
out
shl
call
sahf
sub
lock
sub
mov
cdq
push
jmp
or
shr
inc
lods
sub
cmp
mov
lahf
cli
add
fstp
jno
mov
lods
ret
lods
fild
jmp
or
mov
sub
scas
fxam
mov
out
call
shl
sbb
rcl
adc
dec
stos
cmp
or
and
test
sar
push
mov
pop
lock
dec
jo
jmp
mov
in
sub
xchg
sti
inc
and
push
fsubr
xor
fist
bnd
sub
nop
add
fmul
mov
test
or
inc
sbb
rol
mov
icebp
movs
adc
inc
push
sbb
and
push
ror
inc
icebp
push
mov
mov
data16
pop
enter
(bad)
icebp
ja
ins
int3
stc
pop
test
in
mov
in
mov
and
push
in
push
fistp
adc
rcr
hlt
sahf
call
sub
inc
lock
jl
sub
and
cs
retf
dec
(bad)
adc
mov
cmc
mov
ja
jb
cmps
pop
cmc
(bad)
outs
aad
mov
mov
mov
in
fisttp
sbb
rcr
enter
xchg
jl
not
inc
sub
jp
imul
fist
nop
inc
jmp
push
ins
pop
movs
ss
and
std
loope
sbb
cmp
outs
sub
icebp
add
aam
cwde
and
stos
jno
lods
jl
xchg
add
xchg
push
scas
jo
pop
in
clc
lods
addr16
xchg
les
push
add
or
retf
leave
or
arpl
sub
sub
rcl
pop
cmc
mov
xchg
(bad)
icebp
ins
xlat
lock
lahf
loope
dec
mov
dec
scas
xchg
mov
sub
add
je
sub
push
and
ss
call
pop
stc
jge
aas
sub
sti
pop
pushw
or
mov
sub
cmp
xor
clc
mov
jnp
add
pushf
into
jge
xor
out
xor
mov
push
dec
das
fistp
push
es
inc
jl
(bad)
shl
mov
cmp
leave
adc
pop
gs
fistp
inc
cmp
das
cmp
mov
fld
push
dec
or
push
mov
test
fwait
jno
test
or
mov
or
shl
out
popf
xor
imul
call
test
xchg
sti
mov
stos
jns
mov
gs
ret
test
mov
push
pushf
add
sbb
int
dec
lods
stc
sbb
push
bound
xchg
jo
xchg
xchg
pop
push
push
not
outs
mov
int3
xchg
rcr
or
(bad)
adc
or
mov
ins
cmps
push
sub
stos
adc
ja
cmp
pop
das
ins
push
or
std
fisub
in
ins
mov
test
mov
std
fldlg2
add
test
sbb
inc
cwde
cwde
outs
rcl
add
cmp
push
sub
sub
cmp
add
mov
or
push
cwde
add
mov
repz
std
fs
xchg
sbb
cwde
fs
ins
dec
xchg
fist
mov
or
fnstsw
gs
dec
je
(bad)
or
in
or
mov
jno
aam
adc
or
mov
fs
sti
das
push
mov
push
xchg
and
mov
or
retf
cmps
dec
rcr
in
add
mov
aaa
ds
lea
jo
daa
xlat
sub
xchg
push
stos
jo
ds
pushf
jmp
mov
sbb
lods
pop
mov
enter
imul
scas
push
gs
or
add
cs
xor
mov
(bad)
add
rol
fbstp
shld
cs
sub
pop
ds
push
das
test
push
leave
add
push
xchg
enter
add
ficom
pop
ffreep
pop
movs
sub
inc
inc
and
push
ret
jns
jecxz
dec
repz
mov
stos
push
or
mov
push
shl
sub
xchg
dec
rcr
iret
xchg
push
arpl
xor
inc
lds
rcl
push
lods
mov
fwait
dec
out
popf
mov
neg
test
imul
adc
sub
shl
pusha
pop
lock
ror
jns
das
adc
or
imul
fwait
jbe
jb
std
jl
je
repz
retf
push
retf
push
push
retf
mov
and
jno
xchg
xchg
ins
add
loope
movs
sar
pop
xor
jo
mov
push
inc
ret
fdiv
dec
shr
mov
dec
or
adc
ffreep
shl
and
pop
bound
inc
adc
cdq
loope
fs
addr16
retf
xchg
pop
mov
jb
daa
mov
(bad)
mov
inc
adc
test
jp
jmp
xor
mov
or
xor
sbb
call
dec
ret
dec
(bad)
pop
sub
inc
ds
hlt
push
dec
cmp
test
(bad)
test
loope
mov
(bad)
xor
rcl
imul
pushf
movs
(bad)
cmp
mov
stos
jg
dec
stos
ret
cmp
cmp
test
jo
or
sahf
sbb
mov
icebp
loop
xor
outs
xchg
arpl
add
cli
mov
loop
jmp
idiv
stos
mov
jl
outs
xchg
std
jbe
pop
ror
in
stos
ins
mov
mov
sbb
push
repz
pop
sti
jnp
xchg
cmp
xchg
bound
mov
loop
mov
in
ror
fnsave
lods
xchg
push
popa
sub
push
inc
pusha
hlt
jmp
inc
arpl
or
xor
pop
cmp
clc
(bad)
xchg
mov
inc
retf
retf
shl
lods
stc
inc
out
fsub
jmp
stos
sub
into
out
mov
xchg
out
es
enter
mov
pop
add
dec
pop
pusha
add
fsub
mov
jle
mov
dec
jmp
or
jne
mov
mov
cs
and
mov
and
sbb
add
mov
push
push
adc
test
ja
loope
pop
cmps
adc
cmp
pusha
cmps
mov
fs
sti
in
push
add
inc
pop
ins
nop
outs
cld
dec
lods
xor
mov
cmps
dec
adc
rcl
pmovmskb
pop
(bad)
imul
sar
push
cld
xchg
pushf
jp
dec
or
das
add
pop
push
pop
pop
mov
ror
or
xor
aaa
sbb
mov
jnp
ins
mov
loop
cwde
xor
mov
icebp
push
jge
jle
ins
pop
or
jg
cmc
mov
inc
(bad)
ror
pop
iret
xchg
sbb
cwde
xchg
jp
sub
imul
dec
pop
and
xor
sahf
or
movs
add
mov
lgs
loop
aam
sbb
sbb
xchg
and
shl
push
retf
cmp
dec
loope
and
mov
dec
outs
mov
push
add
sbb
sbb
or
pop
(bad)
mov
popf
mov
(bad)
stos
fs
out
inc
and
cld
std
mov
jmp
fs
(bad)
js
push
xor
sub
hlt
add
cmp
push
pushf
mov
pop
not
add
jge
jns
loopne
xchg
data16
sub
adc
add
cmps
loopne
push
jo
cmp
repnz
ss
retf
xchg
ds
test
cmps
pop
dec
inc
mov
sub
jae
nop
push
sub
adc
mov
outs
adc
cmp
retf
inc
xor
push
xor
jno
(bad)
xchg
mov
xchg
sub
inc
clc
push
jg
cmps
mov
outs
xor
lods
test
mov
add
pushf
rcr
fldcw
(bad)
lock
sub
dec
dec
push
std
out
bound
movs
push
adc
clc
or
sub
idiv
fdivr
jbe
cmp
inc
out
mov
pop
mov
or
jno
test
movs
addr16
xchg
adc
add
imul
retf
test
in
in
cli
push
dec
adc
gs
xchg
mov
(bad)
jmp
in
jmp
mov
jmp
mov
test
iret
movs
ins
inc
mov
stos
mov
or
add
dec
cmc
jne
movhps
inc
ds
sbb
mov
lock
fadd
xor
das
shl
outs
sbb
push
adc
(bad)
out
xor
or
pop
jae
jl
sbb
mov
ja
push
pop
es
iret
push
shr
(bad)
gs
test
jne
xchg
pop
or
imul
and
mov
sti
rol
jg
inc
loope
mov
dec
jnp
fwait
mov
es
(bad)
fild
aas
jb
cwde
loopne
sbb
shl
push
dec
push
jl
cmp
into
mov
mov
popf
neg
and
sbb
js
pop
pushf
fistp
jns
mov
jecxz
jmp
pop
and
or
loope
and
fistp
and
cmps
out
xchg
std
ret
aas
and
cmp
inc
jnp
scas
mov
mov
dec
jno
push
or
stos
(bad)
or
cdq
pop
popf
or
adc
fwait
pinsrw
fwait
ror
add
(bad)
push
fmul
mov
push
jae
jo
mov
lods
jae
or
out
dec
test
sbb
cmp
pop
pop
mov
jg
xchg
popf
cmp
sbb
adc
pop
movs
daa
jg
and
stos
div
push
loope
test
dec
sbb
jb
mov
dec
lahf
push
jb
add
add
arpl
jno
dec
add
imul
retf
mov
mov
hlt
aam
xchg
mov
cmc
ss
inc
stos
hlt
xchg
ja
adc
retf
stos
addr16
repz
std
push
push
cmp
cmp
test
call
cld
adc
add
push
or
cmp
in
fild
pop
dec
cmp
dec
sbb
sbb
xchg
stos
cdq
sub
test
xchg
ret
push
mov
adc
popf
push
loop
or
xchg
pop
clc
sub
sbb
sahf
fsubrp
repz
sub
aaa
shl
inc
inc
adc
push
pause
cdq
xlat
or
sbb
ret
mov
cwde
(bad)
cld
cmp
rcr
xchg
add
push
and
cwde
lahf
movs
xchg
jle
lea
inc
mov
mov
push
and
and
xchg
and
or
dec
call
cwde
call
jbe
ret
mov
dec
lds
sub
jle
inc
rol
into
add
imul
ret
and
pop
cdq
aam
dec
pop
pop
sbb
gs
and
sbb
div
push
das
inc
push
dec
ffree
mov
shl
inc
mov
dec
fistp
shl
mov
mov
int3
repz
push
mov
cmp
mov
pop
jmp
jno
cmps
push
scas
cmp
ror
dec
stos
xchg
and
or
push
mov
pop
adc
cwde
xchg
push
inc
aad
pop
(bad)
loopne
mov
fs
jns
popa
jmp
test
stos
out
ret
sbb
xlat
or
sahf
dec
xchg
lods
and
out
sub
jp
or
xchg
cmp
das
pop
push
sub
add
bound
sub
mov
jae
cmp
(bad)
mov
xor
mov
inc
movs
or
or
dec
xchg
lahf
in
dec
adc
push
adc
test
retf
cld
mov
push
retf
mov
and
movs
mov
aaa
push
adc
loope
adc
mov
push
data16
inc
pop
adc
add
in
pop
repz
push
scas
xchg
into
cli
fcomp
jae
popa
xor
push
and
pop
fisubr
and
scas
xor
jnp
dec
inc
or
fcmovnb
inc
cmp
mov
inc
xor
cmp
ds
adc
mov
inc
xchg
fdivp
addr16
and
xor
xchg
mov
xor
pop
pop
xor
xchg
push
shl
cmovne
scas
imul
(bad)
icebp
pop
inc
xchg
jo
lea
and
jmp
inc
ret
pop
xchg
mov
das
mov
xor
sub
mov
lods
push
xchg
mov
cmp
aas
jnp
int3
mov
cmp
lods
jle
loope
push
mov
dec
(bad)
fdivr
or
mov
add
or
jns
pop
pop
out
sbb
icebp
pop
xchg
shl
stc
and
add
(bad)
mov
adc
add
jmp
dec
cwde
jbe
sub
lea
ror
adc
loopne
in
fistp
cmp
aam
and
ror
hlt
(bad)
lock
mov
fstp
xchg
sub
cmp
dec
pop
adc
pop
and
cs
stos
and
out
retf
and
sbb
xchg
inc
inc
verr
cmp
push
push
call
or
add
or
xchg
ins
mov
je
xchg
pushf
mov
jecxz
rol
pop
dec
push
jns
and
das
sbb
mov
sahf
cmps
sar
adc
sar
push
cli
lahf
push
jmp
mov
in
ins
int
in
jbe
in
cmps
xchg
call
mov
(bad)
jbe
xor
and
ds
dec
adc
dec
adc
cmp
cmp
test
add
data16
sti
and
fimul
mov
mov
xor
(bad)
les
jns
adc
jl
leave
dec
sub
lock
(bad)
sub
mov
inc
or
fsubr
shl
jo
jbe
call
lock
mov
xchg
add
(bad)
in
fnstenv
sbb
outs
jbe
ds
dec
push
sub
xor
push
xchg
add
not
das
adc
pop
ret
cld
mov
xchg
ds
push
dec
pop
push
push
or
inc
imul
hlt
xor
int3
inc
pop
fst
in
cmp
clc
loope
mov
sub
or
popa
clc
mov
(bad)
ins
mov
idiv
jmp
cmp
shr
push
jle
sti
pop
and
mov
mov
push
pushf
ins
or
imul
cwde
int
pop
xor
and
std
cmp
addr16
js
fsub
fsubrp
xchg
ins
push
inc
(bad)
pop
fist
pop
(bad)
stos
ror
test
add
push
in
pop
rol
adc
mov
shr
fdiv
std
or
cmps
fbld
or
imul
pop
ficomp
or
(bad)
jl
icebp
jg
jbe
pop
test
add
xor
jle
jo
pop
(bad)
retf
cmc
test
(bad)
mov
push
sub
call
pop
push
push
sub
sbb
loopne
sar
cmp
and
and
cld
out
popf
sbb
mov
dec
das
cmp
jnp
sub
mov
or
xchg
mov
cwde
fs
adc
ret
sbb
movs
inc
cs
sbb
xchg
adc
sub
mov
out
jecxz
dec
mov
and
and
aaa
ret
movs
icebp
(bad)
mov
movs
lods
or
inc
pusha
mov
pop
and
sub
retf
mov
daa
jae
in
sbb
jnp
mov
push
repz
into
push
out
pop
and
psubd
fs
cmp
jb
push
sub
les
push
push
or
sub
iret
hlt
or
xor
(bad)
jmp
xchg
dec
mov
mov
out
push
js
std
les
sti
arpl
stc
mov
and
shr
mov
lahf
movs
inc
ror
shl
pop
cmc
loopne
inc
sub
movs
cld
push
es
push
jle
lods
push
aam
add
loop
inc
jne
pop
in
fistp
ins
xchg
out
xchg
xchg
jmp
jmp
cmc
rcl
pop
test
rcl
inc
(bad)
pop
and
jecxz
jb
call
rcr
xchg
(bad)
jmp
enter
call
imul
push
jo
sub
pop
rol
jo
ja
push
dec
mov
xor
inc
sub
ror
ror
add
inc
xchg
sub
pop
mov
in
shl
mov
push
cdq
test
inc
test
pop
and
add
imul
sbb
fadd
mov
std
or
xor
xchg
ror
add
cmp
in
dec
fistp
ins
lods
and
ins
inc
sbb
test
popf
xchg
mov
mov
mov
push
jnp
or
cwde
lds
data16
push
pop
cdq
push
inc
add
mov
retf
in
rcr
in
jne
cmp
lock
outs
or
(bad)
fs
pop
cmp
sahf
loop
lods
jbe
js
cwde
jbe
out
das
in
movs
pop
das
mov
dec
out
rcr
add
cs
push
(bad)
loopne
dec
popf
aas
in
pop
es
pop
hlt
mov
push
cmps
into
adc
call
scas
pop
pop
push
mov
bound
cwde
push
loope
mov
stc
enter
rcl
pop
fiadd
popa
test
jle
call
in
enter
inc
xor
pop
lods
repz
xchg
adc
je
lahf
ins
jg
and
in
xchg
xchg
mov
in
stc
es
mov
leave
lods
call
mov
fldenv
mov
jle
loop
cmps
neg
add
test
addr16
add
std
mov
lds
cmp
adc
push
push
xchg
cmp
sub
retf
test
cmp
cmps
mov
dec
lods
xlat
aas
pusha
jmp
lds
sub
sbb
push
gs
inc
inc
sbb
jg
xchg
inc
dec
repnz
adc
adc
mov
fs
xor
or
(bad)
lods
call
sbb
and
jp
aas
aam
or
loopne
arpl
rol
add
push
out
and
dec
dec
adc
pushf
fwait
or
mov
ret
mov
cmp
mov
inc
push
cmp
sbb
popa
mov
pop
sub
and
fisttp
dec
and
bswap
mov
cmp
mov
sbb
inc
retf
mov
push
xchg
cmp
add
stc
imul
dec
hlt
dec
xchg
out
icebp
and
sub
mov
ds
stos
sbb
imul
push
cld
cld
les
sub
mov
mov
pop
imul
or
fwait
inc
(bad)
or
push
inc
xchg
lahf
jne
int
es
mov
imul
pop
(bad)
cmp
je
fidivr
mov
pop
outs
mov
add
sub
xchg
outs
sub
mov
dec
jge
jecxz
cs
out
test
cwde
into
outs
push
jp
imul
std
sub
int3
cmps
mov
fadd
sub
fwait
push
(bad)
dec
rol
mov
pop
ret
xor
adc
(bad)
pop
sub
sbb
fwait
addr16
pop
mov
repz
add
fcomp
mov
cmp
cld
push
in
imul
add
dec
addr16
mov
mov
les
in
push
imul
lahf
cmps
neg
int3
jmp
das
int
dec
adc
mov
mov
and
inc
ins
test
(bad)
mov
jle
jle
xchg
(bad)
cmps
add
sub
and
dec
mov
(bad)
addr16
(bad)
dec
xor
fnstenv
imul
cdq
inc
mov
xchg
mov
cdq
mov
call
fimul
dec
cli
push
mov
stos
sbb
add
lea
xchg
adc
and
inc
nop
in
cmp
mov
inc
ret
and
test
xchg
pop
dec
imul
inc
std
xlat
iret
imul
hlt
ins
punpcklwd
add
inc
cmp
pmaddwd
adc
mov
jmp
std
gs
aam
push
int3
out
shr
cmps
sub
push
and
pop
and
ss
cmc
and
pop
jb
dec
adc
hlt
and
fiadd
test
mov
and
in
outs
mov
fisub
push
add
and
addr16
leave
cmp
add
adc
push
(bad)
mov
adc
jmp
push
test
cmp
addr16
add
int3
push
hlt
outs
rcr
retf
push
mov
add
pusha
mov
adc
dec
adc
or
ror
fcmovne
cdq
xchg
sub
idiv
or
aaa
(bad)
xchg
push
mov
or
pushf
shl
cmp
xchg
sub
outs
xor
jmp
adc
sub
jmp
xor
out
aas
idiv
clc
addr16
fcmovbe
stos
push
push
movs
mov
ins
test
icebp
xchg
pop
push
jo
leave
int3
mov
ret
xchg
jo
cmc
and
xor
push
add
les
cmps
test
les
lods
add
ror
pushf
mov
ret
(bad)
hlt
inc
js
sti
jp
pop
ret
jp
fsubr
lahf
lods
add
and
cmp
cmc
rcl
cli
jno
pop
or
jl
(bad)
pop
ret
call
cmp
pop
jg
xchg
mov
rol
nop
add
nop
xor
sub
mov
cs
ret
push
and
mov
cdq
add
jecxz
mov
fisttp
or
movs
pop
xchg
loope
ret
fdivr
xor
and
test
mov
pop
mov
sbb
mov
adc
lea
ret
shl
adc
push
push
fwait
push
mov
pop
sub
mov
push
dec
jmp
xchg
dec
(bad)
fmul
sub
(bad)
mov
test
pop
sub
daa
inc
pop
push
add
loope
inc
push
mov
add
int
xor
into
call
or
(bad)
stc
mov
(bad)
test
jns
and
ret
retf
out
aaa
jle
ret
fcmovnbe
and
fxch
jns
push
mov
pop
pusha
imul
imul
and
or
(bad)
shl
xor
loope
xchg
mov
add
sub
mov
aam
aam
fidivr
aas
(bad)
xchg
or
dec
jns
hlt
ins
in
jle
or
(bad)
in
jnp
mov
jl
jl
mov
mov
mov
pop
ror
mov
xchg
mov
lds
js
push
pusha
int
or
ins
loope
mov
inc
cli
call
mov
fimul
or
bound
lods
jecxz
fwait
xchg
shld
pop
pop
push
jbe
adc
aas
pop
or
cmp
jo
scas
jge
ror
movs
mov
jg
mov
mov
jg
scas
adc
lds
jge
mov
je
jl
cmp
fidiv
test
xor
aam
push
or
repnz
push
jae
aaa
inc
out
out
ror
push
fcom
fsubr
stos
iret
pop
add
xor
or
cdq
xchg
jl
sbb
adc
(bad)
fs
cmp
mov
xchg
sbb
mul
or
gs
in
pop
mov
or
js
push
fs
es
fs
or
shl
dec
xchg
fild
adc
ins
fucomp
sbb
mov
movs
aas
mov
pop
icebp
ins
xor
dec
mov
neg
aad
jmp
mov
pop
popf
pop
test
push
mov
ret
inc
lds
int
or
xor
fidivr
inc
push
mov
jmp
div
push
iret
push
movs
xor
addr16
mov
loope
xor
push
jne
nop
cmp
cld
jecxz
mov
ins
and
daa
mov
add
dec
test
jbe
jg
outs
dec
aam
(bad)
outs
push
inc
sbb
stos
add
ins
push
adc
mov
pop
inc
jb
loopne
cld
cdq
popa
in
lods
add
xor
cmp
xchg
sbb
push
aam
mov
mov
sub
mov
rcl
rol
ja
shr
nop
aam
sub
xor
inc
push
mov
aad
jb
mov
push
icebp
(bad)
loopne
popf
mov
adc
sbb
pop
(bad)
imul
repz
mov
int3
fstp
mov
loop
push
je
xor
(bad)
mov
ss
mov
fcmovnb
fldcw
inc
jae
mov
mov
push
pop
push
mov
pop
js
or
sub
frstor
inc
ficom
push
out
sbb
pop
loopne
sub
xor
mov
ss
in
add
js
inc
jnp
imul
push
inc
outs
lock
and
repnz
stc
push
dec
add
dec
and
add
xchg
pop
adc
xor
dec
lds
scas
push
sti
or
dec
push
cmp
push
mov
or
sub
or
test
push
or
lods
es
dec
pop
or
scas
push
mov
adc
push
cmp
jle
adc
sahf
cwde
jns
aas
xchg
add
sub
push
nop
or
dec
imul
add
cld
int3
or
test
jo
loope
popa
enter
(bad)
mov
in
inc
adc
mov
xor
fs
stos
add
loopne
adc
retf
adc
ss
push
mov
das
jnp
sub
xchg
xor
or
add
or
sbb
add
add
or
mov
pop
retf
es
push
add
call
fmul
scas
aad
jg
fnsetpm(287
test
mov
movs
cmp
icebp
sahf
sub
cmp
sbb
test
lock
push
popf
icebp
cdq
add
ins
or
push
xor
pop
inc
add
mov
inc
(bad)
push
and
push
jl
push
jl
shr
mov
lock
repz
inc
iret
jmp
aad
stc
mov
loop
xchg
push
stos
mov
push
test
cmp
gs
jmp
push
test
dec
mov
icebp
mov
ret
stos
sub
mov
sub
mov
call
adc
sbb
(bad)
xor
jmp
xchg
pop
retf
test
loop
loopne
mov
jno
pop
loope
addr16
mov
jecxz
cli
test
xor
icebp
loope
mov
out
bswap
adc
stos
mov
push
jg
pushf
mul
into
push
pop
enter
or
pushf
mov
in
daa
xchg
jns
addr16
(bad)
xor
adc
stos
push
rcl
dec
dec
sbb
cld
or
test
cmp
imul
add
aaa
aad
cwde
xchg
xor
or
jae
or
inc
mov
dec
retf
sub
xchg
shl
dec
scas
push
jae
dec
into
mov
sub
sub
fisttp
xchg
dec
fs
ss
inc
(bad)
adc
dec
fs
and
mov
xchg
fs
xchg
call
and
push
push
les
inc
dec
xor
in
and
fistp
or
sbb
push
mov
sbb
imul
inc
xor
dec
push
imul
push
or
inc
in
adc
xchg
dec
sub
mov
mov
call
cmp
mov
dec
and
and
mov
mov
dec
sub
jne
inc
xchg
push
jmp
mov
or
call
mov
hlt
pusha
lods
adc
or
retw
or
cs
neg
cli
and
xor
xor
outs
pop
adc
rcr
pop
jae
and
(bad)
ds
jne
or
adc
cli
jmp
inc
and
xchg
inc
sub
rcl
loop
in
and
fs
test
lock
mov
movs
cmc
mov
sbb
leave
xchg
dec
jno
push
xchg
sub
pop
(bad)
gs
push
push
push
sub
add
imul
out
inc
scas
jl
stos
cdq
pop
lea
scas
aam
push
fcomi
leave
mov
cmp
and
enter
mov
pop
pop
sub
dec
jno
push
mov
adc
pop
fstp
mov
mov
pop
jmp
scas
int3
xchg
and
add
test
ror
adc
lock
test
bound
ja
test
add
scas
shr
pop
int
stos
sahf
push
mov
cmps
test
outs
or
jmp
aas
or
jp
out
fwait
jo
(bad)
outs
sar
pop
mul
vpacksswb
xchg
fistp
out
inc
push
shl
sub
popa
push
push
cmp
sar
or
sahf
or
jno
or
sub
dec
out
ins
sbb
and
mov
mov
or
jnp
jle
or
dec
cdq
pop
or
int
or
daa
das
inc
jp
pusha
(bad)
jae
inc
mov
xchg
mov
add
mov
cmp
icebp
imul
push
stc
fnsave
jns
inc
pop
lods
hlt
aad
adc
push
add
jmp
in
(bad)
lock
pop
add
out
xor
push
int3
sub
out
add
aaa
fdiv
mov
push
out
xchg
stos
dec
pusha
jp
push
pop
imul
imul
sti
mov
cmps
jmp
dec
lods
inc
and
hlt
jae
dec
mov
cmp
and
jne
repz
or
push
outs
cmp
clc
adc
gs
cmp
jmp
mov
test
xor
pop
mov
jg
push
enter
int
js
sar
imul
aas
popa
mov
sbb
loop
retf
xchg
mov
push
clc
cdq
jbe
and
adc
mov
sub
mov
mov
bound
add
mov
mov
sub
jns
pop
mov
jnp
mov
pop
adc
mov
and
xchg
mov
cmp
fistp
mov
cmp
cmps
and
iret
mov
xchg
fcomi
or
bound
mov
je
cmps
int
es
adc
into
dec
mov
mov
sub
ret
cmps
xor
pop
inc
js
and
push
mov
hlt
lds
rol
sub
iret
rcl
push
mov
int
push
imul
xor
jbe
xchg
movs
pop
rcl
lea
mov
sub
inc
cmp
ficom
pop
fidivr
mov
sub
xor
dec
test
popa
xor
adc
out
rcl
pop
pushf
cmp
xchg
add
pop
jnp
stc
and
sbb
xchg
xchg
std
push
jmp
mov
idiv
daa
loopne
dec
in
js
push
adc
add
or
fbld
cmp
test
add
add
push
adc
mov
enter
pop
jp
in
xchg
psraw
xlat
adc
xchg
retf
popa
lahf
das
jge
fimul
(bad)
mov
mov
and
jae
test
add
and
inc
dec
mov
pop
das
test
jmp
jle
fdivr
(bad)
clc
and
mov
xor
stc
and
aas
adc
xchg
pop
pop
dec
loopne
xor
xor
adc
rcl
mov
(bad)
sbb
adc
movs
adc
lock
or
pop
mov
lods
adc
jno
cmp
mov
push
mov
stos
adc
ret
dec
adc
fsubrp
mov
cmp
out
cmp
sbb
dec
xchg
scas
dec
icebp
jle
adc
cwde
xor
jbe
imul
mov
pop
jno
shr
out
out
inc
sbb
pop
or
popf
jne
jne
fnsave
jo
mov
out
aaa
sbb
cmp
cdq
inc
mov
xchg
and
jle
loope
and
push
retf
aas
adc
xor
xlat
idiv
mov
ret
xor
push
fwait
xchg
js
in
sbb
sbb
popf
add
loope
out
jl
cwde
and
ret
icebp
(bad)
in
cmp
cmp
xor
scas
mov
inc
mov
(bad)
out
dec
rcl
clc
(bad)
lahf
mov
ret
icebp
dec
fld
popf
and
loop
add
pushf
loope
sar
cdq
push
pop
xor
push
add
adc
mov
inc
dec
and
loopne
jl
lods
(bad)
scas
mov
cmp
mov
sbb
add
addr16
punpcklbw
sbb
pusha
ret
adc
out
fisub
repnz
push
aam
retf
mov
fst
inc
sub
aaa
daa
jecxz
ja
clc
aas
sbb
jnp
mov
sahf
mov
(bad)
icebp
dec
out
push
xchg
cwde
mov
(bad)
arpl
inc
jno
repnz
aaa
ret
push
xchg
mov
jge
jecxz
sbb
ds
ror
das
xchg
push
pop
xor
and
dec
(bad)
sar
mov
pop
je
xchg
xchg
into
mov
pop
sbb
dec
mov
(bad)
lock
pop
out
push
or
loopne
arpl
mov
cmps
jg
aas
out
xor
inc
int3
nop
jne
and
ss
jg
sbb
fdiv
retf
cwde
pusha
dec
(bad)
pusha
xchg
jg
jmp
cli
lock
sub
in
xchg
aad
cvtpi2ps
push
pop
jnp
test
or
or
lea
loop
jbe
cmps
xor
sbb
clc
in
or
or
fist
iret
cmp
(bad)
or
xchg
pop
pushf
cld
push
test
or
in
cmps
sub
neg
mov
pop
mov
call
mov
inc
mov
inc
das
repz
add
data16
sti
mov
adc
ja
xchg
icebp
xchg
ins
(bad)
repz
fstp
or
mov
mov
inc
ss
fstp
in
mov
aaa
adc
add
mov
pop
jle
loop
mov
pop
inc
jl
mov
dec
sbb
jno
loopne
fcmovu
mov
sub
scas
pop
adc
sub
cli
aas
sub
push
lock
retf
adc
sub
jbe
jecxz
and
repz
ss
lahf
inc
jl
mov
ins
jg
jl
sub
pop
ds
cmc
mov
or
or
fisttp
cmps
out
rol
mov
test
bound
push
repnz
push
call
or
jne
xor
popf
and
mov
jmp
push
retf
test
fidivr
ins
or
sbb
addr16
js
into
fld
popf
hlt
xlat
int
lea
sti
ret
loop
ret
jb
repnz
fnstsw
jbe
pop
mov
xchg
cmp
pop
not
pusha
jne
sub
add
(bad)
rcl
push
cdq
and
cs
lods
xor
leave
std
sub
add
push
cmp
scas
push
mov
and
pop
clc
cmp
and
pusha
jb
test
mov
sbb
mov
add
and
push
inc
std
dec
ret
dec
mov
out
sbb
fs
dec
xchg
jecxz
pop
scas
sub
cmps
pop
ins
xchg
push
ret
in
push
es
jns
sbb
dec
div
xor
pop
push
mov
pop
pop
(bad)
out
leave
scas
add
sbb
push
and
cld
pop
dec
icebp
out
in
shl
mov
push
add
jb
mov
enter
adc
push
jb
cs
ja
add
xchg
fbstp
mov
(bad)
nop
mov
aam
jne
or
adc
out
sti
lods
mov
mov
jle
test
jg
stos
fs
pusha
fnstenv
sub
xor
(bad)
mov
ins
mov
cs
or
enter
mov
xchg
mov
sub
js
inc
cmp
ret
cld
mov
lds
imul
pop
iret
pop
jae
push
sbb
aad
cli
scas
test
mov
hlt
imul
cs
xchg
cmc
jbe
nop
or
xlat
xor
mov
repz
movs
jmp
imul
pop
pop
dec
mov
xchg
or
fsub
sbb
outs
sub
test
movs
jnp
inc
jb
int3
mov
fsubr
xor
pushf
push
lds
mov
hlt
xor
sub
add
add
aam
sub
push
imul
pop
aad
cmps
dec
jbe
rol
push
add
ror
into
add
cdq
push
xchg
xor
pusha
(bad)
xchg
cmps
shr
(bad)
xchg
pop
repz
cmp
mov
mov
movs
das
outs
and
jns
dec
xchg
add
hlt
add
sub
inc
sbb
xor
out
inc
mov
add
popf
jo
(bad)
mov
adc
sub
loopne
xchg
mov
movs
sbb
or
fstp
test
mov
sub
push
or
or
and
(bad)
adc
mov
ins
pop
sti
sbb
dec
iret
cld
lock
pop
pop
stos
ret
sbb
xchg
adc
lahf
iret
gs
dec
mov
mov
ror
push
adc
or
fild
shr
fidivr
jbe
repnz
lods
jl
jo
adc
lds
jns
mov
mov
aaa
push
gs
mov
inc
jne
(bad)
stc
or
lock
stos
inc
xchg
lahf
push
jge
mov
dec
inc
aaa
cmp
jp
inc
mov
cmp
mov
xlat
mov
pop
xchg
repnz
in
pushf
outs
loopne
js
mov
adc
pop
sub
cmp
mov
cmp
sbb
push
inc
shr
pop
xor
movs
push
cmp
sbb
(bad)
scas
rcr
dec
pop
outs
test
mov
jle
(bad)
iret
add
es
adc
fsub
std
jbe
jle
sti
ror
loopne
into
fimul
mov
sub
pop
cmps
pop
js
dec
lgs
movs
adc
xor
stos
inc
out
neg
(bad)
setbe
push
leave
add
pop
xor
retf
mov
add
repz
imul
(bad)
pusha
(bad)
pop
clc
lock
retf
mov
add
repnz
icebp
sub
dec
stos
add
sahf
and
mov
mov
sbb
test
add
add
fadd
push
push
inc
enter
xlat
mov
sub
dec
cmps
mov
aaa
lahf
mov
push
adc
retf
dec
inc
sub
mov
dec
push
and
adc
das
sbb
loope
inc
xchg
mov
sbb
sub
aad
cmp
cmp
adc
sbb
arpl
xor
mov
loope
gs
mov
lods
inc
lods
cmps
jne
xor
adc
movs
retf
or
dec
mov
inc
mov
(bad)
cmc
stos
pushf
jae
jg
cli
retf
or
retf
scas
ficom
push
icebp
sub
xor
push
cdq
jbe
repz
push
gs
cmc
cdq
jbe
push
add
fsub
push
or
shl
mov
lods
loopne
cmp
rol
jo
mov
jno
ds
mov
mov
and
jl
je
inc
sbb
movs
cmps
popa
mov
je
jb
push
push
shl
jmp
hlt
ins
adc
push
aam
dec
jmp
popf
rol
inc
imul
dec
jg
stos
data16
mov
cmps
inc
aaa
aaa
jae
out
stos
xchg
mov
aas
xchg
add
sub
mov
and
push
test
push
inc
cli
(bad)
retf
mov
push
sbb
sbb
pusha
jno
or
aad
cmp
sbb
sahf
and
fwait
push
leave
jecxz
and
inc
cmps
adc
xchg
fistp
mov
inc
das
sub
(bad)
mov
pop
pop
mov
cdq
lods
xor
cwde
movs
mov
(bad)
sbb
hlt
mov
mov
pusha
sbb
test
pop
mov
in
pusha
jg
xchg
gs
hlt
push
mov
enter
out
sbb
pop
mov
jmp
repz
pop
mov
push
inc
and
jecxz
mov
mov
mov
jmp
ret
aaa
imul
retf
mov
pusha
iret
xor
jbe
(bad)
ins
and
(bad)
aad
out
jbe
data16
pop
or
mov
mov
jl
sub
mov
outs
cmps
xacquire
sub
jmp
fldenv
repnz
pop
movs
pop
jnp
(bad)
jl
sub
fcomp
lahf
or
ins
xchg
pop
out
les
(bad)
int
in
ds
xor
mov
into
sbb
add
leave
shl
fmul
ins
cmp
mov
clc
daa
jo
(bad)
call
inc
ror
or
test
movs
je
mov
push
loopne
loop
add
push
sbb
adc
jo
pop
pushf
xor
jmp
push
inc
loope
jo
mul
mov
prefetch
cld
aad
adc
stc
adc
das
cmc
popf
outs
jecxz
clc
aad
das
into
or
inc
and
aaa
in
pop
mov
push
mov
xchg
cmc
push
hlt
inc
pop
or
sar
test
jge
sbb
sti
int
pop
jmp
test
or
arpl
inc
and
mov
pop
sar
clc
inc
ins
loopne
mov
ja
call
in
dec
cmp
dec
mov
push
pop
inc
mov
std
jle
or
out
loop
xor
push
mov
jno
jne
pop
cmc
mov
jl
(bad)
(bad)
xor
shr
push
stos
sbb
out
ds
je
xlat
or
pop
imul
jnp
jge
ret
repnz
adc
sar
imul
imul
mov
imul
jge
push
inc
frstor
div
push
inc
dec
fild
pop
test
out
imul
std
add
mov
add
push
fisttp
movs
pop
lock
mov
xchg
dec
pusha
adc
fcom
jmp
in
test
or
adc
or
sbb
mov
test
ror
(bad)
pop
div
sahf
pop
les
clc
sub
xor
out
xor
or
movs
adc
aad
iret
push
hlt
repz
fld
sub
xchg
into
call
mov
cmp
clc
mov
clc
jo
cmp
sub
out
jb
xchg
rcr
pop
push
cwde
fisub
fs
leave
cmp
push
mov
cmp
xchg
mov
add
inc
sub
std
shl
and
repz
sbb
pop
inc
mov
sbb
dec
push
test
rcl
loop
arpl
push
leave
xor
add
push
jmp
sbb
imul
loop
ret
xchg
inc
xor
mov
sub
nop
rcl
into
inc
js
dec
stc
xchg
fadd
pop
pop
or
mov
jg
xor
xor
pextrw
inc
xchg
dec
jmp
mov
ret
and
mov
xor
loopne
mul
fmul
in
push
call
daa
dec
adc
inc
add
xlat
jg
std
push
or
sar
mov
or
jnp
push
mov
call
ins
mov
dec
pand
fdivr
sub
and
add
out
xor
clc
jg
fucom
popa
jns
ud2
xlat
mov
mov
dec
jmp
jl
pop
cmp
aaa
push
test
xchg
(bad)
sbb
inc
fwait
cli
push
aaa
push
or
sbb
out
dec
aam
add
outs
inc
xor
adc
xor
push
int3
fcmovnu
inc
rol
bound
pop
xchg
mov
loop
xor
jg
push
std
mov
mov
cli
and
pop
clc
mov
aad
movs
pop
in
mov
cld
inc
adc
pusha
ss
rcl
test
fist
mov
inc
jl
jg
add
mov
test
das
daa
not
xor
call
stos
pop
xor
std
(bad)
clc
cmp
not
cld
xor
ins
adc
xchg
lahf
lods
js
aam
ja
dec
mov
inc
test
and
inc
inc
xchg
loopne
jge
test
mov
pop
imul
cmp
push
cwde
pop
es
out
fsub
fild
jmp
cmp
mov
pop
les
hlt
out
and
push
xor
sub
cwde
lds
xchg
into
ds
adc
sbb
fnstcw
in
mov
jg
outs
in
movs
into
(bad)
loope
movs
and
lahf
in
xchg
push
mov
movs
scas
loop
jbe
bound
mov
mov
aad
in
sub
hlt
outs
ds
add
mov
shl
mov
add
mov
add
sub
in
xchg
pusha
sbb
add
mov
pop
shl
pop
iret
jno
jnp
test
aam
clc
xchg
jmp
(bad)
(bad)
jns
push
mov
je
push
loopne
sbb
cs
ud2
test
sbb
add
dec
imul
mov
pop
lds
hlt
jp
sub
and
sbb
mov
xchg
add
ins
sbb
mov
retfw
or
xchg
sbb
ret
(bad)
call
fidivr
pushf
test
ins
out
cwde
xchg
or
cmp
ss
dec
jge
push
jmp
add
cld
adc
cmp
xor
inc
jb
xchg
jo
imul
in
(bad)
(bad)
xchg
cmp
repnz
dec
fsin
imul
mov
push
pop
scas
xchg
or
popf
cmp
(bad)
jo
push
xor
jbe
aam
jae
mov
push
add
mul
cmp
cmc
or
outs
pop
or
int3
stc
adc
sahf
sbb
in
movs
stc
bound
pushf
cmp
ret
pop
xchg
add
sub
ftst
ins
and
scas
cmps
add
xlat
adc
mov
xchg
and
scas
cmp
nop
jbe
neg
js
dec
pop
add
aad
mov
stos
xor
les
inc
jo
mov
xchg
or
ret
inc
mov
pop
popf
clc
lahf
enter
mov
inc
into
mov
or
sbb
sbb
adc
or
mov
imul
les
mov
shl
lods
cmps
xor
dec
mov
xor
test
add
adc
inc
mov
das
out
outs
pop
pop
push
jne
(bad)
iret
fs
dec
xor
or
inc
ror
mov
test
dec
or
loopne
test
add
push
mov
call
mov
fst
cli
ins
ins
stos
push
adc
mov
mov
push
dec
sbb
pop
arpl
sbb
mov
jge
div
sti
arpl
sahf
jnp
jns
cld
pushf
iret
sar
out
gs
nop
stos
cld
jg
ja
rcr
and
adc
sub
xor
adc
xor
jg
adc
mov
into
add
or
fsubr
sbb
pop
mov
popa
stos
repnz
mov
aas
push
lahf
cmp
sbb
push
adc
cmc
scas
and
ins
add
xchg
(bad)
std
adc
dec
adc
pop
pop
out
sbb
cmp
rcl
das
dec
push
cmp
rol
cdq
cmc
pop
sbb
jp
test
dec
push
outs
mov
lahf
out
add
mov
push
les
(bad)
sub
push
ja
mov
dec
dec
or
int
xchg
or
cld
jl
daa
repnz
mov
and
fwait
or
repz
and
add
pushf
stos
jle
pop
xchg
aam
ins
pop
pop
jle
pop
test
iret
retf
int
mov
stc
sub
lds
scas
jg
xor
mov
(bad)
mov
push
test
(bad)
(bad)
pop
push
out
jno
out
ja
loop
cmp
rcl
imul
jmp
jno
sti
aaa
adc
lods
invd
mov
stos
push
std
xchg
lods
fnstsw
pushf
(bad)
aam
arpl
sbb
test
mov
xchg
sti
mov
sub
push
in
mov
je
pop
ss
cmps
xchg
rcr
cld
cs
cmp
cmps
test
mov
push
push
ss
and
cmps
add
in
loopne
mov
jmp
stos
mov
inc
call
loope
lds
inc
loope
imul
xor
push
cld
cmp
int
das
movsx
clc
gs
push
mov
in
(bad)
mov
jmp
adc
icebp
ror
js
shl
lock
ret
xor
push
loope
adc
xchg
ret
push
jbe
push
push
dec
adc
dec
xchg
lea
test
cs
loope
mov
mov
shl
or
push
xchg
cmp
sbb
jl
or
dec
jmp
fiadd
imul
jne
sub
and
jmp
ficom
push
call
mov
lahf
icebp
sar
pushf
xchg
fsubrp
inc
add
mov
aad
jo
imul
fadd
ror
jge
pop
inc
dec
jbe
adc
mov
ret
popa
cld
faddp
out
dec
cld
into
loope
(bad)
fild
aaa
pop
sub
sub
xor
test
cmp
push
pop
sahf
cs
js
cld
lock
jecxz
mov
gs
sbb
lea
cmp
in
xor
out
mov
inc
jmp
and
imul
pop
(bad)
pop
ss
push
xlat
sub
scas
push
fild
outs
movs
mov
and
aad
repz
sbb
out
out
sti
repz
sbb
rol
pop
repnz
(bad)
cli
jmp
ja
(bad)
hlt
popa
je
das
jmp
jp
add
cmp
jmp
jp
or
outs
jae
xchg
sub
and
push
js
stc
and
mov
xor
iret
cwde
jge
sahf
inc
mov
jecxz
add
sbb
das
stc
jle
ins
ret
jmp
out
(bad)
ret
or
popf
lods
loop
ja
pop
call
mov
(bad)
and
sub
pop
jmp
xor
add
mov
lds
jae
pop
test
adc
aas
sbb
mov
or
pop
cmp
push
rcr
adc
cmp
mov
cmp
add
xor
pop
dec
imul
loop
cmp
or
outs
sub
test
inc
jg
dec
lds
and
pop
xchg
in
jp
jl
stos
es
push
jl
push
sub
fcmovb
ret
cs
outs
xchg
dec
std
ins
jl
or
in
sbb
ss
pop
mov
aam
cmp
les
ins
xor
outs
arpl
arpl
fadd
sbb
sub
ins
lods
hlt
push
sub
and
pop
xchg
out
pmulhuw
aaa
pushf
out
lock
add
mov
mov
or
sub
(bad)
js
push
rol
dec
gs
jg
inc
xchg
or
add
in
shl
pop
arpl
shrd
addr16
retf
in
push
outs
das
cmp
test
loopne
mov
sbb
test
fptan
dec
and
sbb
shl
dec
bound
pop
shl
sti
and
cmp
cmp
xchg
pop
mov
cmp
ss
mov
xchg
inc
in
js
mov
out
(bad)
mov
xchg
cmp
(bad)
out
pop
jae
or
xchg
pop
adc
aaa
je
sti
js
mov
or
out
push
jge
ret
xchg
repnz
adc
add
daa
mov
mov
mov
inc
pushf
and
jge
pop
shr
lea
in
aam
loopne
pop
dec
dec
sub
les
xor
iret
jp
or
mov
pop
jmp
pop
cs
jno
pop
sub
mov
addr16
mov
call
cs
sbb
call
das
cmp
daa
scas
cmp
aam
or
lahf
sub
lahf
xor
in
(bad)
adc
ins
jnp
pop
retf
inc
xchg
out
add
mov
fwait
sub
cmc
or
cmps
and
es
dec
xchg
sub
cmp
test
adc
mov
das
push
push
jp
fisubr
or
shr
retf
xchg
ins
sar
mov
inc
sbb
pushf
call
in
jbe
or
int
sub
ret
jp
mov
sar
frndint
call
jge
in
fisub
jmp
fld
jecxz
jne
xchg
push
jge
mov
lods
or
pop
cmp
shr
aad
push
pushf
dec
dec
imul
mov
push
jecxz
fs
mov
out
rol
pop
push
cld
mov
dec
inc
dec
and
in
jl
pushf
pop
std
sub
jp
out
inc
shr
unpcklps
daa
sti
leave
aaa
pop
fidiv
repz
(bad)
cli
inc
push
test
repnz
and
cmps
and
mov
out
lods
or
fwait
cmp
leave
enter
inc
adc
xor
adc
aad
out
ja
push
push
mov
or
call
inc
ror
shl
rcl
jmp
cmps
cwde
fld
push
out
mov
push
retf
inc
cs
daa
inc
pop
(bad)
hlt
ds
mov
dec
dec
movs
into
add
rcr
adc
imul
xor
jg
in
inc
mov
loopne
cmp
daa
cmp
inc
adc
mov
rcl
jmp
pop
pop
mov
inc
pop
addr16
nop/reserved
lods
repz
xor
movs
mov
pop
push
xchg
pushf
rcr
test
imul
in
xor
fwait
pushf
mov
inc
jp
movs
sub
and
scas
mov
imul
mov
ror
int3
pop
call
fcom
test
in
sbb
cmps
cmovbe
bound
mov
lods
mov
ds
jl
stos
out
xor
sub
mov
and
ficomp
adc
in
(bad)
mov
hlt
push
mov
push
test
adc
test
xor
jb
mov
inc
fist
mov
and
inc
mov
mov
in
xchg
lock
je
fnstsw
and
push
pop
loopne
pushf
stos
adc
xchg
mov
jae
and
jne
test
mov
(bad)
sti
enter
ret
jmp
cvtps2pi
cmp
ficomp
(bad)
jg
jmp
pusha
call
sub
outs
aaa
or
ss
lods
lea
(bad)
sbb
pop
cwde
mov
and
pop
mov
dec
stc
aas
rol
push
mov
arpl
xor
and
mov
stos
fwait
cmp
or
sbb
and
test
mov
add
movs
stc
hlt
jle
ret
bound
repz
or
outs
loop
cwde
mul
test
mov
pop
pop
sbb
mov
in
push
in
xchg
pop
in
outs
mov
fsubr
in
jae
xchg
mov
lds
leave
(bad)
imul
push
retf
test
ss
push
iret
xor
xor
cmp
sbb
aas
mov
(bad)
cmp
cld
and
push
mov
jns
test
pop
jne
mov
lods
shl
pop
lahf
mov
lahf
call
push
mov
xor
pop
aam
dec
outs
es
fdivr
or
fldcw
xchg
pop
in
dec
sbb
push
mov
aaa
fiadd
call
jl
test
shl
repz
fdivr
cmc
sbb
and
sar
xor
jg
cli
stos
ficomp
push
ret
hlt
mov
sbb
mov
add
push
and
sahf
cld
(bad)
bound
das
inc
inc
int3
ficomp
pop
stc
movs
dec
shl
inc
fld
ins
cld
or
xchg
mov
cmp
cmp
jo
add
dec
jmp
xor
jae
mov
or
loope
es
retf
mov
sbb
and
mov
adc
sub
jmp
aaa
fcom
or
mov
daa
mov
ror
jns
adc
sbb
push
push
loop
xchg
jae
test
mov
xor
repz
pop
mov
mov
loopne
sbb
mov
leave
out
fs
mov
mov
loopne
jmp
dec
pop
ret
scas
ret
mov
xlat
adc
jge
jmp
fincstp
into
retf
cli
(bad)
cmp
xor
cmp
sub
(bad)
mov
pop
fdiv
in
hlt
mov
or
cmp
sbb
dec
cmps
jp
mov
addr16
mov
jge
pop
jmp
cmc
rol
sbb
fdiv
inc
(bad)
je
in
out
repnz
jl
or
leave
jg
or
mov
dec
std
jne
or
or
in
jns
jle
mov
cmp
(bad)
aas
adc
jg
retf
fs
pop
fimul
repz
xor
jmp
(bad)
push
rcl
std
sbb
push
sahf
mov
jg
cmp
mov
in
xchg
sub
xchg
cld
aas
cmp
sar
retf
add
mov
add
movs
sbb
push
(bad)
jmp
rol
ret
stc
fwait
scas
ins
pop
(bad)
out
sub
xchg
add
cdq
popa
test
into
mov
pop
jns
mov
jbe
adc
out
mov
leave
aad
cmp
mov
pop
outs
loopne
sub
inc
push
and
scas
ficomp
jle
adc
(bad)
out
lods
or
cmp
out
and
jp
iret
pop
xchg
enter
pop
sub
and
mov
cmp
jno
pop
jge
pop
out
mov
sbb
xor
adc
out
inc
pop
mov
cmp
mul
test
ret
xchg
mov
mov
jle
retf
xchg
fistp
adc
and
shr
cmp
jno
mov
dec
(bad)
cmovl
ins
jnp
sahf
jne
outs
jbe
movs
dec
out
fmul
repnz
hlt
pop
shr
(bad)
fld
test
aam
sti
push
mov
int3
arpl
mov
div
(bad)
leave
cmps
jle
pop
pop
hlt
outs
dec
mov
or
fisubr
call
mov
fwait
clc
stc
pop
mov
popf
(bad)
or
test
inc
idiv
jbe
xor
lds
mov
(bad)
(bad)
(bad)
jb
push
xchg
cmp
pop
icebp
inc
add
adc
mov
ret
jns
sbb
mov
jp
sbb
and
(bad)
out
sti
cdq
(bad)
in
sub
call
mov
and
retf
imul
retf
imul
mov
inc
dec
into
aas
(bad)
imul
and
xchg
mov
cmp
fcomp
jecxz
rol
arpl
inc
mov
lahf
(bad)
mov
mov
(bad)
jnp
sar
div
mov
lea
mov
ins
mov
xchg
sti
add
pushf
pushf
fs
or
dec
mov
add
cdq
aad
jge
fisubr
adc
jbe
jl
push
cli
mov
not
dec
push
cmp
mov
mov
aas
loopne
or
sub
add
scas
out
cmc
jmp
inc
es
inc
jne
stc
std
or
pushf
and
aad
ins
inc
xchg
or
(bad)
cmp
sub
cmp
add
repnz
enter
pop
ss
mov
retf
sub
xchg
xor
mov
scas
jecxz
jmp
pop
inc
dec
sub
xchg
xchg
hlt
(bad)
(bad)
cmp
or
dec
repnz
inc
pushf
jl
pop
adc
popa
ds
pop
cmp
arpl
repz
sbb
arpl
pop
daa
add
ror
mov
adc
xchg
sbb
mov
pop
retf
pusha
fistp
dec
dec
push
or
inc
cli
loop
push
in
or
inc
out
scas
xor
adc
dec
jb
mov
jbe
push
(bad)
rcr
sub
mov
cmp
sbb
ror
loop
sub
sub
cli
fcom
loop
jnp
jmp
pop
cmp
jp
dec
retf
movs
and
mov
push
hlt
inc
bound
addr16
xchg
sbb
jno
fcmovbe
mov
arpl
sbb
jns
cmps
mov
shr
mov
and
sahf
movs
xor
fdivr
arpl
mov
enter
dec
push
scas
dec
xchg
jle
clc
test
dec
sub
or
xchg
pusha
sbb
imul
and
pushf
sbb
jae
lock
pop
xor
or
sub
mov
mov
mov
leave
retf
inc
push
sbb
xchg
xchg
sbb
fld
mov
cmp
jo
add
sbb
push
sub
and
sti
fisttp
xchg
daa
inc
in
jmp
lea
and
add
xchg
mov
or
add
stos
pusha
sbb
pushf
cmp
mov
push
pop
aad
aas
mov
scas
pop
and
imul
and
dec
ret
icebp
ss
outs
add
int
aad
push
cmp
sbb
xchg
test
or
(bad)
sbb
pop
cmp
or
fidiv
vpsrlq
popf
dec
add
imul
aam
and
repz
js
pop
sub
int
fs
jb
and
push
and
mov
and
mov
adc
adc
int3
mov
jg
mov
dec
cmp
loopne
lea
das
push
adc
mov
bswap
lahf
cdq
mov
jle
push
xchg
and
xchg
in
retf
pop
imul
(bad)
les
add
xchg
in
and
(bad)
and
inc
jg
lods
jb
dec
sbb
in
sub
pop
pop
jb
(bad)
xor
pop
call
aas
call
dec
push
lods
inc
mov
sub
mov
out
mov
pop
test
inc
adc
adc
mov
xor
inc
or
xchg
iret
adc
lods
mov
lock
xchg
cwde
fidivr
fwait
ins
cmp
int
inc
mov
retf
clc
xchg
jecxz
and
xor
aam
push
neg
dec
add
adc
cwde
mov
xchg
ret
mov
fiadd
mov
jmp
dec
push
or
stc
popa
loop
mov
mov
pop
(bad)
not
push
jp
jp
gs
xor
mov
push
outs
out
cmp
shl
neg
aas
mov
cmp
outs
outs
sbb
jl
jg
dec
inc
or
xchg
add
pusha
das
lods
(bad)
data16
adc
cmc
mov
jmp
jl
mov
cwde
mov
sub
sbb
jnp
xchg
mov
xchg
imul
imul
shr
mov
ret
pop
je
das
ficom
out
div
jmp
call
movs
xor
add
jno
inc
mov
xchg
jae
and
leave
xchg
pushf
cmp
adc
inc
retf
out
out
jno
jp
pop
or
dec
sub
ja
fwait
dec
lds
jne
xchg
popf
jae
ficom
pop
retf
out
mov
adc
push
inc
clc
add
add
jmp
push
rcr
mov
or
arpl
cmp
imul
push
mov
pop
xchg
pop
shr
sbb
push
fisubr
sub
mov
in
cmp
dec
or
addr16
jbe
loop
xchg
jp
sub
rol
pushf
sbb
pop
mov
cmp
or
push
xchg
loop
arpl
mov
inc
mov
lgs
out
mov
xchg
test
cmp
xchg
cmp
jle
or
jne
xchg
rcl
popa
lock
ficomp
xor
sub
fcom
jp
jb
or
dec
sbb
or
fcmovu
rol
shr
(bad)
push
sbb
shr
xchg
mov
cmp
movs
jo
or
xor
hlt
aad
inc
push
fstp
jmp
jns
xchg
push
add
nop
jb
sbb
mov
xor
fistp
push
cmp
mov
pop
scas
icebp
dec
in
repnz
addr16
inc
sahf
pop
scas
cld
scas
cmp
push
scas
es
js
sti
xor
mov
pusha
loop
test
and
in
cmc
mov
daa
test
push
fwait
imul
not
xchg
and
iret
xchg
cmp
ret
(bad)
inc
(bad)
shr
jb
lods
pop
aas
adc
(bad)
mov
(bad)
ds
mov
cmc
xor
mov
push
mov
pop
xchg
fld
sub
je
inc
clc
out
fldcw
mov
xor
pop
ss
sahf
nop
pop
mul
cmps
arpl
lods
push
jne
imul
inc
jne
push
or
(bad)
loope
add
sub
stos
jmp
jnp
dec
and
(bad)
mov
cmp
jae
jmp
fisub
adc
je
add
push
jmp
aaa
mov
xchg
ret
pop
sub
std
sub
scas
movs
int
enter
imul
mov
sbb
mov
xchg
pushf
je
mov
jmp
jns
out
imul
xor
mov
imul
retf
mov
aas
dec
mov
ret
push
cmp
out
fist
jp
xor
or
and
adc
lahf
mov
or
pusha
cmc
mov
add
xor
dec
inc
or
dec
nop
clc
push
mov
popf
cs
(bad)
push
stos
pushf
hlt
ins
pushf
sub
daa
(bad)
icebp
std
adc
dec
pop
adc
jnp
push
call
mov
pop
jge
rcr
adc
xchg
dec
rol
cmp
or
sub
mov
lods
movs
retf
imul
ins
(bad)
ja
mov
(bad)
xor
jne
not
cs
mov
lock
and
cld
push
jmp
adc
mul
mov
and
xchg
add
repz
pusha
fild
and
sbb
lds
mov
and
js
xor
je
xchg
or
jmp
mov
jmp
gs
call
dec
mov
lea
jge
ins
div
xchg
pop
add
not
push
inc
add
sub
test
leave
jmp
add
bound
and
pop
dec
cli
lods
cdq
mov
push
add
jecxz
(bad)
cld
add
push
jne
jmp
pop
rol
cdq
and
repz
jbe
loopne
out
test
jae
push
sbb
iret
into
jecxz
fist
jns
inc
add
call
inc
leave
sbb
cli
xchg
call
loope
in
fst
or
mov
pop
jbe
shl
ret
cmp
data16
add
inc
nop
test
pop
add
xchg
jecxz
retf
shl
mov
pop
add
pop
jge
or
fidiv
jno
retf
cli
addr16
(bad)
int
(bad)
xchg
pop
leave
jmp
adc
and
cmps
mov
mov
xor
inc
daa
xor
jne
ss
cld
lods
sub
fld
xor
jne
jb
xchg
loop
mov
lods
mov
mov
(bad)
ffreep
mov
xchg
xchg
movs
pop
icebp
sbb
push
icebp
int3
pop
scas
(bad)
in
mov
push
aad
mov
sbb
scas
in
aas
push
sbb
mov
dec
sahf
mov
add
fs
push
fist
out
cmps
sbb
mov
cmp
out
mov
lds
push
cmps
push
pop
aad
lock
cdq
loopne
mov
jno
cmp
ins
mov
jl
jne
pushw
mov
sbb
sahf
in
push
sbb
ja
hlt
pop
push
mov
cmp
mov
loop
jno
adc
pop
in
loop
jge
and
mov
aam
cdq
push
and
lahf
jb
test
mov
adc
rol
out
cmps
add
xchg
div
mov
mov
push
das
mov
retf
cdq
call
jns
ret
retf
dec
lock
std
or
sbb
nop
out
adc
cmp
fs
mov
cwde
inc
cmp
mov
daa
or
jge
ret
mov
mov
inc
sub
ret
sbb
stos
retf
and
ss
not
mov
es
and
rol
add
xlat
dec
sub
and
enter
aam
je
or
cmps
shl
data16
pop
js
adc
mov
add
add
(bad)
push
mov
into
inc
jo
xchg
int3
add
mov
lods
or
lods
xchg
pusha
bound
fs
jl
and
nop
pop
dec
ja
and
mov
xor
out
sub
push
mov
pop
cmc
sar
in
sbb
cld
pop
jmp
out
(bad)
(bad)
es
inc
push
sub
cmp
(bad)
int3
cmp
jbe
mov
cmp
cdq
pop
pop
adc
std
mov
out
mov
rcr
ins
mov
dec
sbb
movs
sbb
mov
cmp
jg
fwait
pop
cmp
cmps
ds
gs
ss
mov
jp
sub
(bad)
push
adc
jb
sub
cmp
aad
add
in
jg
sub
jae
inc
cmp
inc
jae
lea
cmp
fcomp
push
lds
adc
ss
int3
adc
sbb
arpl
(bad)
frstor
or
pop
lods
enter
jp
pop
adc
push
dec
xchg
add
dec
adc
fld
(bad)
jecxz
pusha
fist
scas
arpl
ins
sti
cmp
sbb
sbb
je
movs
pop
lods
in
ret
gs
ds
xchg
add
inc
enter
xchg
pop
push
mov
test
xchg
xor
pop
stos
jne
mov
aad
je
mov
add
cmp
add
xchg
test
sar
or
pop
and
mov
lea
mov
sub
push
rsqrtps
out
push
and
call
lahf
xchg
repnz
cmp
inc
sbb
sub
cdq
jp
lds
push
xchg
pop
cmp
xchg
lea
pop
sahf
mov
and
in
sbb
and
retf
in
fimul
mov
sub
iret
pushf
sbb
fistp
adc
movs
cmp
test
leave
lock
xor
cmp
jns
mov
sub
enter
push
mov
test
xchg
pop
sbb
cmps
xchg
(bad)
shl
or
or
pop
lea
dec
aas
imul
inc
pop
sbb
outs
enter
xchg
test
mov
mov
mov
stc
mov
dec
or
sbb
popf
or
sbb
cwde
enter
xchg
inc
(bad)
dec
and
push
std
cmp
out
(bad)
jno
adc
pushf
or
jnp
popf
cli
fsubr
leave
xchg
jp
or
neg
icebp
ss
mov
loop
(bad)
loop
pop
mov
icebp
mov
mov
jno
sub
movs
repnz
or
mov
retf
push
jns
and
dec
ja
mov
test
rcl
lods
mov
jae
pop
mov
and
cmp
adc
popf
add
xor
and
cdq
repnz
mov
pop
fcomp
mov
xor
je
sub
adc
daa
ret
cmps
stos
fs
repnz
sbb
(bad)
pop
cli
leave
in
pusha
(bad)
(bad)
(bad)
dec
xlat
in
push
push
and
pop
push
fld
or
leave
aas
adc
les
into
shl
push
aam
sbb
mov
das
push
pop
pop
not
push
cmps
out
test
in
pop
dec
es
addr16
ror
jns
gs
int
mov
and
mov
mov
stc
push
outs
inc
or
fdivr
sbb
sub
retf
leave
ins
inc
(bad)
hlt
shr
repnz
pop
jp
in
mov
push
cmp
jns
dec
repnz
add
mov
imul
and
daa
scas
inc
pushf
je
sub
jecxz
xor
repnz
adc
dec
inc
pop
pop
inc
and
loopne
jge
mov
loopne
mov
in
xchg
jmp
cmp
mov
stos
retf
(bad)
sub
jge
pusha
adc
adc
jg
xchg
scas
jle
mov
dec
in
enter
pop
jno
add
dec
in
imul
out
xchg
add
mov
(bad)
xor
sbb
sbb
xor
dec
add
pop
xchg
cs
pop
shl
stos
lds
repz
mov
pushf
xchg
enter
imul
pop
jl
xchg
repz
mov
popf
mov
inc
inc
es
mov
es
jns
jno
jge
xchg
push
jbe
adc
adc
xor
pop
je
out
pop
test
mov
xchg
or
cdq
push
ror
lds
lods
sbb
inc
push
daa
push
pop
imul
and
mov
clc
or
or
inc
sahf
push
cmps
aad
pop
pop
pusha
dec
pushf
dec
xor
mov
jecxz
and
adc
fst
retf
fadd
lock
loopne
adc
pop
test
les
pop
push
retf
icebp
mov
lahf
lods
add
pavgw
xchg
adc
xor
jge
or
inc
xor
xor
adc
out
scas
fiadd
sub
loop
mov
pop
aam
sbb
mov
pop
inc
mov
sbb
test
shl
nop
and
and
jle
pop
lahf
mov
sub
xchg
push
or
xchg
outs
out
movs
sub
fild
shl
(bad)
iret
popf
cli
mov
mov
dec
dec
inc
cmp
(bad)
stos
cmps
sub
or
aaa
cmp
mov
jmp
add
mov
mov
push
stos
jb
jb
inc
sti
and
loop
int
call
ja
retf
(bad)
imul
push
jg
dec
cmp
jmp
xor
pusha
jmp
in
retf
out
jge
loope
pop
adc
arpl
dec
pop
popa
daa
mov
mov
jmp
repz
test
push
adc
iret
dec
dec
lahf
cmp
je
cwde
or
xor
out
idiv
fwait
mov
pop
push
adc
fdivr
je
(bad)
nop
(bad)
nop
movs
mov
js
daa
rcr
push
ficomp
ins
jbe
sub
rcr
xchg
pop
cli
(bad)
sar
nop
popf
xchg
popa
fisttp
push
in
jmp
mov
aam
pop
adc
and
push
adc
mov
nop
jecxz
pop
leave
iret
int
retf
jne
(bad)
jmp
dec
pop
ror
mov
adc
pusha
fidiv
into
imul
shl
popa
inc
call
out
sub
or
rcr
push
(bad)
dec
jg
and
rcl
test
adc
xor
adc
test
shr
test
jp
adc
gs
adc
out
mov
cmp
or
clc
into
mov
and
stos
jnp
loop
cli
je
inc
mov
push
xchg
into
pop
(bad)
push
push
jo
jl
xor
inc
fisttp
movs
loope
push
jecxz
outs
gs
jo
cs
sbb
cmp
ja
xchg
cs
xchg
cmps
sub
adc
inc
sti
adc
test
dec
ss
pop
movs
je
cmp
or
xor
lock
dec
movs
ds
xlat
(bad)
imul
(bad)
sbb
adc
je
inc
pop
push
mov
mov
push
inc
mov
mov
nop
dec
sbb
ja
cmp
cmp
push
imul
sbb
jmp
cmp
loope
push
fs
sbb
cmp
adc
xchg
or
mov
or
and
sar
popa
fld
sbb
fucomi
imul
mov
cmp
xchg
xor
sbb
pop
lea
les
mov
(bad)
popf
mov
mov
movs
adc
inc
cwde
inc
fisub
hlt
adc
push
inc
sub
inc
pop
fnsave
pop
jg
test
push
sub
add
xchg
rcr
cmc
stos
ret
xor
dec
scas
ds
nop
rol
adc
inc
in
push
or
mov
jecxz
test
adc
in
mov
push
dec
jae
cld
out
loope
xchg
aam
push
stc
jl
push
push
shl
aas
sbb
cmp
sbb
pop
mov
bound
cdq
jno
jbe
inc
icebp
jbe
adc
adc
jno
scas
pop
xor
test
jg
or
adc
js
stos
and
mov
int
ins
hlt
ret
(bad)
std
movs
repz
jmp
jge
cmp
inc
sub
push
mov
sub
sub
mov
mov
in
mov
into
dec
push
pop
mov
jmp
mov
imul
(bad)
mov
and
mov
call
cdq
mov
sbb
mov
mov
aad
retf
aam
jno
cld
push
mov
jno
shl
jg
movs
movs
push
xor
dec
les
push
or
sub
pop
aaa
mov
xchg
adc
scas
(bad)
std
inc
cmp
mov
mov
push
adc
ins
mov
or
fdiv
cmp
lss
xor
cmp
and
je
push
in
stos
jbe
push
push
scas
(bad)
popa
jnp
cmp
xchg
or
sub
cli
add
sbb
sbb
pop
inc
stos
fiadd
retf
pop
cmp
xchg
ja
enter
out
test
ins
int3
sub
out
sub
and
adc
pop
jp
test
and
pop
cli
sub
popa
pop
mov
daa
cmp
cmp
bt
js
repnz
clc
inc
pop
inc
lahf
push
leave
adc
(bad)
out
scas
push
pop
mov
mov
hlt
push
cmp
pop
ins
fsubrp
jo
push
push
pop
daa
test
jnp
cwde
mov
arpl
sar
inc
test
(bad)
jecxz
cdq
iret
ror
sbb
inc
neg
ret
inc
mov
jg
mov
mov
div
adc
ficom
dec
(bad)
xor
push
jae
mov
xchg
sbb
neg
add
in
push
loopne
xchg
out
push
das
sbb
and
je
daa
iret
nop
pop
mov
push
popf
pop
dec
pop
push
and
cmp
fistp
push
cli
xchg
or
aas
xor
shl
das
or
in
mov
in
mov
ja
out
ror
and
push
jmp
cmp
jo
jb
les
jge
dec
arpl
mov
sahf
movs
push
inc
(bad)
pop
lock
test
enter
jo
out
ret
sahf
jg
mov
into
das
push
mov
sbb
or
enter
mov
in
(bad)
push
(bad)
mov
mov
test
inc
pushf
push
call
cmps
bound
scas
xchg
pop
add
xor
dec
cmp
leave
daa
dec
loope
jmp
add
mov
push
out
mov
pusha
inc
add
dec
cli
aas
fidiv
jmp
lea
out
push
arpl
rcl
mov
lods
adc
jmp
add
mov
sahf
in
aad
xchg
movs
adc
xor
mov
pop
sbb
cmp
pop
shr
fisttp
pop
dec
(bad)
push
(bad)
mov
shr
inc
fstp
sti
call
push
in
push
gs
sti
push
adc
test
retf
xchg
addr16
(bad)
jmp
jge
mov
mov
iret
std
dec
enter
mov
jbe
lock
in
call
nop
add
sti
repnz
frstpm(287
add
inc
adc
scas
sbb
iret
div
pop
sbb
gs
add
repz
jg
or
(bad)
jns
pop
nop
in
(bad)
push
jns
ret
dec
enter
xor
out
mov
jg
pop
nop
pop
(bad)
(bad)
or
jo
pop
repnz
nop
xchg
cld
xchg
mov
retf
cmp
clc
(bad)
repz
jns
push
inc
movs
clc
mul
mov
aas
stc
out
jae
and
sbb
xchg
inc
clc
in
xchg
xchg
jo
lods
arpl
sub
int3
jecxz
bound
xchg
imul
shl
inc
mov
loope
daa
lock
pusha
(bad)
ficom
inc
ds
mov
mov
movs
into
xchg
(bad)
ficomp
lds
pop
mov
mov
cld
sub
daa
aaa
xchg
(bad)
(bad)
jbe
xlat
pop
aad
inc
jmp
pop
ficom
mov
push
out
mov
sub
fidiv
jmp
push
fild
and
(bad)
add
or
xor
push
sbb
or
and
out
and
fwait
or
xchg
or
xchg
in
cmp
xor
jl
je
xchg
mov
xor
xor
cmps
or
repnz
(bad)
mov
sahf
add
jecxz
ins
es
stos
pop
mov
shl
mov
inc
leave
retf
int3
cmp
push
adc
jl
jmp
xchg
mov
sti
mov
ds
jne
scas
jne
adc
push
mov
lock
frstor
imul
ficomp
inc
pop
aam
mov
push
sbb
iret
push
repnz
xchg
lods
in
inc
mov
pop
arpl
pop
addr16
lods
fsubr
mov
hlt
jmp
enter
retf
jecxz
(bad)
sub
cli
inc
mov
or
mov
inc
jo
pop
adc
pop
aas
xor
fdiv
and
repz
cmp
int3
in
jmp
out
adc
pop
gs
dec
cmp
stos
pavgw
cmps
sbb
aas
mov
dec
mov
add
pop
lea
cli
fs
fdiv
push
adc
cmp
cmp
arpl
fistp
push
out
leave
ins
mov
shl
nop
inc
jle
je
lahf
xchg
ds
add
cmps
outs
push
popf
pop
aad
add
out
aam
out
idiv
add
stos
sbb
fwait
inc
mul
push
jle
inc
and
xor
sub
mov
push
adc
fild
and
pop
or
mov
cld
cmp
mov
sar
add
cs
hlt
dec
fstp
add
scas
(bad)
cmc
std
dec
xor
cmp
imul
inc
data16
dec
cld
pop
jle
clc
dec
ret
int3
mov
(bad)
jbe
jmp
cmps
(bad)
sbb
stos
mov
push
stos
sar
mov
scas
hlt
retf
xchg
(bad)
icebp
fmul
xor
mov
jb
jne
outs
pop
sub
mov
cs
cmp
in
xor
xchg
mov
adc
inc
(bad)
xchg
inc
ret
lahf
out
mov
push
push
mov
call
add
push
aad
outs
fucomp
sbb
cmp
jo
shl
add
imul
push
cmp
jmp
test
fwait
dec
lods
ret
cs
test
push
int3
lds
xchg
mov
pop
xor
or
dec
loopne
push
mov
sub
stos
inc
mov
std
je
repnz
mov
mov
xor
cmp
shl
cs
bound
fwait
icebp
or
jae
scas
push
out
popa
dec
inc
push
into
push
lock
jo
je
dec
and
or
loope
inc
test
aaa
and
fcmovb
sub
repz
cmp
cmp
sbb
lock
les
lods
loope
call
addr16
xchg
pop
jmp
push
test
aam
jg
daa
pop
es
rol
jns
cli
mov
inc
push
outs
or
shr
jle
inc
imul
sti
lock
(bad)
cli
cli
cmc
mov
dec
mov
stos
inc
jmp
fcmovnbe
mov
and
popf
loopne
dec
push
cmp
xchg
xor
xlat
call
rcl
movs
and
(bad)
je
add
ins
add
ins
out
or
test
pop
daa
ds
psubsb
inc
jmp
mov
repnz
mov
mov
or
ror
adc
jle
push
and
aas
adc
fs
push
(bad)
cmp
outs
mov
mov
movs
movs
jmp
pop
not
cmp
inc
fist
rcr
stos
ss
pop
cmp
mov
cmp
sub
cwde
out
mov
inc
mov
movs
mov
or
add
push
enter
inc
lock
fcmovnu
fwait
dec
in
pusha
pop
ja
sar
sbb
imul
xchg
fcomp
outs
xchg
mov
enter
stos
(bad)
dec
jmp
loop
(bad)
lods
cmp
lea
adc
sbb
mov
in
or
loop
cmp
push
sbb
cmp
scas
test
arpl
pusha
inc
and
cmps
aad
jmp
adc
adc
pop
stc
mov
(bad)
adc
adc
xor
adc
(bad)
retf
and
aam
cmp
aad
ds
mov
les
xchg
fstp
jmp
xlat
es
cmp
cmc
mov
scas
lock
and
jl
loop
sub
and
xor
or
push
jns
test
in
mov
fstp
push
jl
jl
mov
or
daa
sub
in
mov
jo
lea
and
pop
call
stc
dec
cmp
jl
xor
hlt
sub
mov
add
push
adc
mov
inc
das
push
sti
cmp
fldenv
cli
ja
out
sti
f2xm1
clc
sub
out
xchg
out
pop
inc
xchg
xchg
adc
stos
(bad)
cmps
daa
mov
sbb
push
pop
out
popa
ss
xlat
cmps
pop
sub
mov
iret
mov
addr16
dec
test
inc
mov
inc
dec
in
cmp
call
imul
(bad)
push
jns
imul
fild
ins
pop
and
pop
xlat
inc
sub
sbb
sub
lds
movs
xor
std
mov
mov
aad
sub
hlt
div
dec
xchg
fidivr
mov
inc
adc
pop
stc
add
scas
test
ins
push
and
dec
xor
xor
retf
and
and
cmp
mov
and
mov
or
pop
xor
call
sub
mov
sub
enter
pop
ds
scas
movs
test
jo
push
cmp
xor
inc
adc
mov
repz
xor
and
jnp
lods
fisub
(bad)
mov
push
xchg
imul
xchg
ficom
mov
sbb
pushf
pop
cld
and
or
in
imul
and
out
enter
xor
shl
or
push
sub
adc
add
(bad)
retf
movs
push
sbb
movs
loop
push
dec
inc
fwait
mov
jecxz
out
dec
loop
push
pop
lahf
shl
xor
test
dec
sbb
cmp
pop
test
push
mov
xchg
cs
mov
jecxz
lods
jae
bound
lea
icebp
jmp
cmp
lea
out
jae
(bad)
cmp
addr16
hlt
pop
mov
mov
ret
(bad)
fcmovne
xchg
or
retf
sub
sub
pop
mov
or
(bad)
lods
popa
jmp
jp
push
ins
in
cmp
inc
pop
fdivr
jo
rcr
pop
scas
mov
scas
pop
call
sbb
add
add
aad
fstp
in
adc
and
test
push
(bad)
mov
cmp
je
add
repz
jmp
jecxz
mov
xlat
add
test
stos
test
sub
pop
call
push
and
test
test
sub
out
add
cld
sbb
cmps
ror
rcl
loope
push
sti
jecxz
ins
or
lock
xor
(bad)
out
pushf
mov
scas
jle
repz
xchg
rol
cli
jmp
lods
mov
sbb
adc
adc
jecxz
or
retf
aam
dec
(bad)
sub
aam
(bad)
dec
push
jne
xor
and
mov
nop
rol
retf
in
pop
inc
retf
xor
outs
sti
add
cmp
stos
cs
mov
mov
xor
aaa
xchg
and
lds
lahf
aam
loope
shl
push
mov
push
cmp
cmp
jns
and
mov
cmp
add
jge
pop
or
dec
js
rcr
add
dec
inc
fiadd
in
aad
repnz
in
rcl
ficom
retf
mov
arpl
jno
repnz
mov
jae
mov
rcr
sti
dec
cwde
mov
push
mov
dec
and
shr
ret
pop
call
into
popa
and
push
xor
push
push
push
cld
in
dec
xchg
mov
xor
es
(bad)
xchg
mov
pop
dec
daa
push
mov
das
iret
int3
lea
xor
out
sahf
pop
loope
mov
cwde
sub
pop
xor
mov
mov
sbb
idiv
jo
and
xchg
ficom
jmp
daa
cmc
inc
enter
xchg
adc
daa
jbe
adc
xor
push
ret
jnp
mov
dec
loopne
pop
sbb
add
rcr
xlat
mov
outs
push
jg
sbb
sbb
shr
cmp
mov
stos
imul
mov
mov
loop
call
movups
push
pause
shl
(bad)
mov
mov
daa
fisttp
movs
fld
add
sahf
aas
push
cmps
in
call
ficomp
pop
jle
adc
sbb
mov
enter
cmc
cmp
jae
pop
xchg
add
test
sar
inc
fisubr
dec
jmp
sbb
or
call
shr
sar
xor
lods
fisub
ja
in
fnstsw
movs
dec
and
mov
pushf
bound
js
pop
lahf
adc
jae
ds
imul
mov
xor
in
ds
jmp
and
sbb
push
cmps
and
dec
repz
arpl
(bad)
mov
js
or
xchg
mov
jno
out
jbe
xchg
(bad)
retf
xor
and
push
enter
jbe
mov
xor
(bad)
pop
mov
sub
(bad)
aaa
out
and
aaa
sbb
fistp
retf
clc
pushf
into
jmp
enter
ins
int3
mov
ins
outs
clc
clc
add
call
ins
adc
mov
into
pop
or
xchg
repz
push
jno
pop
cs
call
mov
aaa
repz
mov
(bad)
js
cli
pop
cmp
jmp
push
jne
enter
sbb
rcr
loopne
ds
dec
add
add
frstor
xor
movs
jno
aaa
rcr
dec
adc
inc
repz
sar
inc
mov
dec
lods
or
es
sbb
or
imul
lea
ja
rcl
loopne
lods
cmp
inc
sbb
clc
into
add
and
inc
in
xchg
add
out
jb
push
push
fxch
repz
rol
shr
mov
rcl
lahf
out
xchg
loopne
mov
xchg
sub
lea
xchg
xor
xchg
ror
cmp
iret
fcmovnb
pusha
in
cmp
inc
mov
jo
out
mov
jmp
dec
ss
mov
adc
jmp
mov
jmp
into
shr
mov
adc
and
icebp
fcom
cmp
(bad)
jmp
repz
and
nop
pop
mov
rol
mov
int3
loop
pop
retf
mov
das
(bad)
(bad)
or
lds
inc
jmp
push
xchg
push
sub
adc
xor
push
shl
jle
aaa
pop
jbe
repz
cmps
cdq
cld
sar
inc
jmp
sub
sub
pop
je
cld
xchg
sahf
or
push
hlt
fsubr
ins
mov
ja
cmp
dec
cmp
add
in
cmp
mov
stc
push
pop
jg
pop
imul
jne
mov
and
test
ss
adc
call
(bad)
pop
das
sub
movs
pop
inc
lea
shl
into
(bad)
push
sahf
int
mov
inc
jge
shr
sbb
inc
rcl
mov
dec
and
push
inc
inc
retf
push
jp
mov
add
xchg
(bad)
lds
xor
add
xor
sbb
sahf
(bad)
call
ja
or
mov
rcr
sahf
cmp
lea
cmc
test
sub
in
ja
push
cmp
aam
inc
imul
jl
cmp
inc
iret
adc
popf
ds
add
ret
aam
call
xchg
ja
in
push
dec
jp
and
adc
scas
inc
pusha
mov
(bad)
cdq
jp
popa
cs
clc
mov
iret
adc
clc
pop
dec
sub
xor
xchg
popa
and
in
xchg
leave
aaa
mov
cmp
lock
out
mov
jg
(bad)
push
cdq
cmp
sub
(bad)
xlat
repz
jle
lahf
loopne
out
sub
or
ins
pop
dec
jo
mov
mov
pop
lfs
and
xchg
and
sub
imul
xchg
repz
or
jmp
or
mov
mov
hlt
mov
(bad)
fs
sub
rol
sub
cmp
sub
jae
cmp
and
xchg
(bad)
imul
movs
pusha
cdq
lds
sbb
mov
sub
int3
movs
repnz
push
sbb
sbb
pop
in
xor
ret
adc
cs
dec
ja
dec
lock
sti
icebp
gs
ja
test
aaa
ins
mov
rol
jo
dec
scas
mov
cmp
push
sbb
mov
daa
cli
mov
pop
outs
aam
adc
test
repz
(bad)
jbe
lahf
and
xchg
ja
pop
rcl
adc
mov
mov
daa
lods
xlat
retf
pop
pop
scas
dec
ror
dec
data16
stc
mov
dec
out
fdivr
ss
pushf
dec
lods
repnz
mov
stc
pop
iret
push
js
or
cmp
xor
retf
push
sub
inc
mov
pop
sub
inc
in
add
das
sub
sub
lea
push
push
xchg
imul
pop
or
aam
iret
pop
inc
das
jbe
pop
dec
mov
fmul
icebp
jle
xchg
ja
sub
lods
add
pop
or
fwait
lods
in
mov
mov
pop
and
xor
add
xor
test
call
inc
xor
scas
jmp
cmp
cmc
(bad)
jo
cmp
xor
pushf
aam
push
fcomp
mov
sub
mov
cmp
stos
in
jmp
jae
dec
stc
and
cdq
mov
fldcw
mov
jmp
mov
fld
pop
div
mov
into
mov
push
mov
jmp
mov
mov
push
push
in
pop
fsub
in
int3
outs
pop
scas
fstp
dec
fisub
fmulp
mov
out
or
jo
test
mov
stos
fld
push
cmp
dec
inc
fld
mov
inc
popf
frstpm(287
retf
xchg
cdq
sbb
clc
sub
mov
sahf
and
(bad)
mov
push
xor
aaa
(bad)
ret
xchg
jns
mov
inc
and
shr
mov
inc
jg
and
inc
sbb
out
xchg
clc
std
push
mov
sbb
dec
sti
or
dec
shr
xchg
repz
mov
retf
and
dec
rcl
mov
movs
push
jne
scas
out
shl
fcomp
retf
nop
or
in
mov
mov
mov
jne
mov
sub
out
movs
xchg
ficomp
xor
push
aaa
rcr
in
in
mov
inc
jl
mov
push
lods
sar
or
adc
outs
ret
popa
xor
in
stos
out
movs
movs
scas
les
daa
mov
jae
fwait
(bad)
or
lods
cli
jmp
retf
mov
jl
out
mov
out
ss
jnp
or
(bad)
popf
push
jne
push
pop
test
cli
xchg
push
retf
mov
loope
mov
cmps
enter
push
adc
out
and
sti
and
lds
pusha
sbb
inc
int
and
test
or
or
dec
loope
(bad)
jno
dec
mov
sbb
pop
aad
out
data16
je
sub
test
push
mov
push
out
das
mov
(bad)
cmp
sub
jmp
(bad)
dec
popa
xor
out
fsubr
sbb
(bad)
jo
push
outs
jb
mov
jecxz
push
(bad)
clc
pop
sub
scas
cmp
cmp
dec
dec
push
xor
or
add
fs
adc
dec
push
in
fwait
mov
jbe
mov
dec
sti
mov
pop
xchg
xor
inc
out
mov
retf
(bad)
leave
cmp
stc
repz
nop
xchg
jge
icebp
(bad)
lods
les
fxtract
into
aad
lds
jmp
mov
add
xchg
dec
imul
xor
jp
jb
jmp
outs
push
inc
hlt
push
outs
xor
iret
pop
and
scas
scas
push
or
inc
sub
mov
ret
mov
fild
in
rol
fwait
xchg
iret
xchg
dec
mov
inc
xchg
js
jae
fsubr
fmul
arpl
jo
mov
into
into
and
popa
je
fdivr
daa
jns
push
repz
xchg
xchg
or
stos
mov
aad
sar
mov
xchg
xchg
leave
push
or
or
mov
pop
xchg
cld
xor
call
xor
cld
xchg
adc
push
mov
shl
pop
mov
jmp
stos
jl
sbb
xchg
sub
sub
jge
mov
inc
scas
cmp
rcr
call
out
jg
je
loopne
ja
inc
in
cmps
leave
push
or
mov
push
add
fwait
outs
imul
pop
adc
push
pop
pusha
cmp
mov
or
mov
mov
and
scas
xchg
xchg
mov
mov
sbb
jae
or
adc
push
arpl
leave
inc
aad
mov
adc
cmc
push
mov
sbb
(bad)
xor
xchg
xchg
sbb
xor
pop
rol
repz
sbb
scas
ja
not
and
ret
imul
(bad)
dec
jl
cmp
inc
daa
mov
stos
loope
xchg
mov
mov
call
xor
cs
ins
loop
pop
mov
imul
add
inc
mov
sub
dec
jbe
inc
or
or
adc
out
loop
push
mov
add
imul
pop
in
mov
repnz
rol
ja
jne
and
(bad)
enter
retf
add
jno
dec
fist
out
inc
jmp
js
je
pop
lods
add
push
nop
add
push
jmp
lds
pop
mul
xchg
aaa
dec
and
lock
test
daa
pushf
ds
lock
(bad)
xor
push
sar
call
jmp
popa
jnp
lahf
push
(bad)
push
add
call
mov
jp
daa
(bad)
or
jae
arpl
retf
dec
push
daa
jno
sub
push
data16
xchg
pop
scas
or
xchg
jmp
push
push
pusha
dec
loopne
shl
imul
mov
pop
fst
mov
enter
add
shr
addr16
sub
aad
icebp
dec
or
aas
xor
mov
push
mov
stc
dec
jge
jmp
mov
mov
es
cmp
(bad)
and
sub
bound
sbb
mov
das
inc
int3
mov
inc
ds
not
loope
sbb
push
xor
mov
inc
cmp
inc
xchg
(bad)
dec
push
movups
punpckhbw
popf
jg
add
and
adc
fs
das
hlt
(bad)
(bad)
ins
out
inc
leave
retf
inc
dec
sub
pop
xor
inc
enter
dec
ret
xchg
mov
mov
into
movs
xor
jg
pop
push
dec
add
xchg
aad
addr16
xchg
icebp
retf
(bad)
mov
popf
add
outs
mov
dec
sub
ss
movs
cmp
pop
sub
or
xchg
jbe
aaa
pop
pop
mov
adc
mov
push
adc
movs
cli
(bad)
add
scas
fimul
aas
jle
adc
xchg
test
mov
iret
jle
xor
mov
xchg
jmp
aas
aam
xor
shr
push
xor
fsub
mov
jecxz
call
push
jp
or
push
sub
jb
inc
mov
or
add
shl
in
cmp
icebp
js
xor
or
cmps
adc
and
or
ja
fwait
or
or
lds
stos
pop
xchg
out
loope
pop
pop
das
sub
mov
adc
cli
test
inc
jbe
enter
jae
sbb
xchg
call
sub
mov
sub
cmc
pop
mov
mov
das
pop
into
fistp
leave
jb
cld
cli
adc
adc
sahf
inc
mov
not
dec
(bad)
and
frstor
mov
test
ror
(bad)
(bad)
mov
inc
push
(bad)
into
fs
dec
xor
or
xor
adc
or
and
push
xor
mov
inc
ins
sub
popa
loop
xchg
leave
jbe
imul
enter
loop
add
out
sbb
(bad)
push
inc
sar
out
out
sti
fstp
mov
fidiv
fist
jp
mov
pop
sti
mov
out
test
add
out
pop
mul
clc
pop
adc
push
or
mov
cmp
sub
push
or
add
xchg
push
ret
loopne
bound
sbb
jmp
call
push
lock
xor
push
pop
pop
pop
rcl
or
repnz
repnz
iret
xchg
nop
ret
push
mov
out
xchg
add
mov
scas
mov
clc
leave
inc
mov
ja
test
pop
mov
nop
fimul
and
or
lock
test
out
imul
sub
xor
inc
in
dec
into
(bad)
fs
xor
shl
pusha
mov
mov
and
stc
dec
clc
inc
mov
cmp
push
mov
xchg
dec
(bad)
mov
mov
jmp
dec
int
sub
push
ins
mov
imul
xor
pop
fisttp
mov
push
add
inc
jecxz
mov
std
xchg
push
cmp
sbb
lods
xchg
lods
adc
cmps
hlt
scas
mov
push
xor
call
popa
ss
aas
pop
ds
ins
(bad)
jmp
shr
inc
cld
stos
mov
add
push
ins
sar
and
out
cmp
cmps
arpl
sbb
cmp
lods
xchg
mov
mov
push
and
and
xor
cdq
repnz
dec
dec
cmp
cmps
jp
aam
cmp
ins
pop
fsubr
cmp
pop
sub
outs
cmp
ss
pop
pop
aam
inc
add
xchg
pop
(bad)
dec
icebp
add
sar
test
mov
pop
rcr
sbb
test
mov
and
shl
mov
adc
test
mov
nop
mov
scas
and
jns
pop
fs
jg
sar
(bad)
scas
shl
mov
jo
mov
fcomp
ror
rcr
ficom
xchg
das
mov
xchg
iret
xor
push
fst
jle
mov
dec
in
cmp
idiv
out
mov
push
sti
push
in
neg
test
or
mov
jmp
(bad)
ss
dec
add
mov
mov
mov
jbe
ds
out
cs
sub
mov
pop
xor
mov
std
adc
in
shl
xchg
pop
jb
xchg
ss
in
adc
popa
call
cwde
out
sbb
jp
stos
and
ss
pop
sub
xor
pop
test
cmp
cld
cmovnp
fnstcw
xchg
cmp
lds
xlat
inc
(bad)
mov
jp
inc
cmp
xor
pop
mov
stos
icebp
pop
add
ins
cli
jmp
push
stos
jno
push
fisub
pushf
imul
sub
pop
jns
jns
jnp
rol
outs
dec
in
and
inc
test
rol
xchg
out
pop
in
adc
push
stos
call
rol
dec
adc
push
mov
jmp
or
sbb
retf
jne
sti
mov
mov
(bad)
hlt
gs
sub
fcmovne
outs
cli
es
mov
adc
push
(bad)
mov
push
shl
inc
fmul
fisttp
imul
jmp
pop
(bad)
int
jne
sti
mov
movs
xchg
scas
mov
jmp
pop
pop
xchg
xor
jmp
xchg
mov
stos
adc
sti
xor
xlat
loope
test
fcmovbe
in
arpl
mov
stc
xor
aam
(bad)
test
lea
sahf
xchg
cmps
std
mov
dec
push
mov
sub
adc
test
sbb
loope
mov
mov
cmp
inc
aam
dec
stos
popa
cmp
inc
lahf
test
ins
xchg
dec
mov
fs
and
xchg
arpl
lahf
je
js
inc
push
pop
pop
fwait
sbb
pop
fist
(bad)
sbb
je
inc
push
fld
dec
cwde
mov
mov
fimul
repnz
sbb
int3
out
xchg
out
mov
xor
fsubr
ins
sahf
push
ror
inc
ins
mov
dec
xor
inc
adc
xchg
inc
cli
xchg
call
sub
int3
addr16
ja
and
inc
mov
ficomp
mov
out
jecxz
sbb
out
dec
sahf
jmp
cld
cmps
arpl
and
je
mov
mov
add
imul
arpl
inc
mov
jmp
dec
loope
(bad)
out
xchg
xor
and
pop
sub
sub
loopne
mov
push
adc
mov
or
xor
mov
pop
or
int3
mov
rcr
dec
stos
mov
test
ins
mov
fnsave
mov
dec
xchg
arpl
(bad)
int
movs
push
out
sbb
outs
push
mov
mov
aad
imul
add
dec
push
sub
push
mov
push
mov
ds
(bad)
outs
mov
outs
pop
rcl
mov
sbb
jmp
std
ficom
push
ficom
imul
and
pusha
or
xor
and
pop
or
cmps
dec
add
sbb
push
mov
call
outs
lods
cmps
ss
out
jno
ss
pop
retf
test
inc
mov
add
mov
in
sub
inc
sub
inc
xchg
shl
mov
sahf
sbb
sbb
nop
ror
fsubr
sbb
mov
push
ret
call
shl
mov
in
push
jecxz
cmp
or
push
loopne
fsub
gs
dec
sbb
xchg
ins
jne
loopne
dec
jbe
dec
adc
ret
dec
mov
rcr
fimul
(bad)
or
mov
ror
es
sub
fnstsw
test
xor
retf
lods
push
aam
loop
ja
mov
aad
stc
pcmpeqw
stos
fadd
xchg
pop
adc
mov
push
aaa
push
and
xchg
rcr
and
push
add
sbb
jp
adc
sbb
adc
push
cli
add
mov
stc
sbb
ja
movs
stos
jmp
mov
xor
aad
xor
enter
xor
dec
cli
(bad)
add
pop
mov
push
mov
pushf
neg
repz
fild
pop
ds
inc
push
cmp
sbb
icebp
inc
out
jnp
loop
mov
xchg
sbb
in
mov
jbe
mov
push
mov
dec
add
sbb
sub
push
outs
dec
xlat
pusha
ret
mov
aaa
push
push
int
jne
mov
mov
in
test
mov
or
retf
inc
dec
mov
daa
xchg
jge
adc
mov
out
out
cwde
aad
in
push
mov
movs
xchg
mov
pop
fadd
pop
movs
imul
push
or
push
xchg
loop
cmps
jp
jno
bound
aam
pushf
or
push
sbb
and
shr
(bad)
rol
cmp
in
adc
(bad)
xchg
push
push
test
push
fidiv
sti
loope
mov
add
jle
adc
xor
ret
dec
lods
cmp
pusha
dec
rcr
mov
lock
int3
fs
or
mov
or
mov
leave
sbb
jmp
es
(bad)
jns
ins
rol
mov
sbb
es
jne
add
push
call
add
ds
jb
ja
arpl
jle
jo
pop
(bad)
(bad)
addr16
aam
arpl
nop
sub
fisub
push
mov
xor
test
push
or
or
out
outs
sub
mov
mov
jns
rol
mov
push
lods
xchg
pop
loope
cmp
mov
pop
arpl
adc
movs
out
inc
in
ds
(bad)
xchg
mov
pop
leave
add
jge
sbb
dec
jmp
pop
mov
push
cmp
in
into
cmp
out
xor
(bad)
and
dec
push
xchg
dec
in
imul
pop
pusha
(bad)
cmp
ds
inc
sub
mov
popa
int
scas
int
and
push
and
aaa
les
std
cmps
and
jg
ret
mov
sbb
sub
imul
mov
sub
pop
daa
retf
fldenv
aam
and
push
lahf
stc
jmp
add
loop
loopne
ins
cmp
sbb
das
and
xor
cld
jecxz
test
cli
xor
sub
sbb
(bad)
and
xchg
test
div
je
cmps
(bad)
cli
out
pop
pop
loop
arpl
push
sbb
jge
(bad)
les
add
mov
adc
in
cmps
mov
arpl
ins
mov
mov
dec
xchg
cmp
push
xchg
mov
inc
mov
push
std
test
jp
imul
xor
mov
cli
jb
sub
popf
inc
popf
scas
stos
mov
pop
lock
sbb
in
pop
mov
sub
in
dec
mov
dec
mov
leave
movs
mov
call
jne
xchg
and
sub
cmp
mov
xchg
xor
retf
in
leave
sbb
xor
dec
ins
push
jle
push
test
fstp
inc
push
inc
test
ss
xchg
lods
in
mov
dec
in
test
fistp
fidivr
pop
into
cmp
push
call
sbb
jl
sbb
jmp
push
call
adc
xchg
ror
mov
jecxz
stos
adc
pop
ror
fisubr
out
jp
iret
jmp
jmp
and
mov
cmp
sub
lds
out
loop
xchg
jp
mov
xchg
adc
lahf
jns
mov
das
mov
movs
bound
out
push
cmps
mov
pop
(bad)
sub
jge
xchg
pop
popf
fwait
es
jne
cmps
sub
lods
(bad)
fs
push
push
pop
jg
fidiv
fimul
sub
lods
hlt
adc
leave
je
or
iret
in
jb
jecxz
ficomp
sub
icebp
dec
call
call
pop
sbb
mov
dec
retf
push
cli
sub
xchg
mov
push
mov
imul
mov
xchg
stos
lea
mov
mov
inc
pop
jle
movs
ror
popa
aaa
xchg
push
dec
in
cmps
jp
or
jge
(bad)
sbb
jnp
and
fadd
in
mov
jmp
(bad)
mov
xchg
stos
cdq
lea
xlat
movs
bound
xor
cwde
repnz
and
jae
iret
das
fnsave
xchg
mov
shl
pusha
fdiv
es
mov
mov
not
(bad)
in
loope
(bad)
ficomp
jmp
cwde
fmul
jnp
test
xor
adc
xor
sub
mov
ret
cmovb
add
jmp
adc
ss
xchg
xchg
add
dec
mov
adc
sbb
je
mov
xor
pop
jmp
xchg
pop
ror
mov
je
lock
jb
or
outs
sub
jle
dec
popf
push
shl
hlt
fsubr
bound
(bad)
xchg
sar
test
fcomp
jg
mov
loopne
or
pop
lea
inc
push
cmp
scas
sub
call
sub
sbb
push
jnp
push
pop
mov
fwait
mov
lock
cs
std
fs
xchg
dec
movs
or
fs
jmp
clc
in
ja
(bad)
adc
sbb
cmp
push
fdivr
or
xchg
xchg
mov
jne
xchg
scas
or
lahf
or
hlt
std
inc
dec
ds
cwde
dec
and
and
mov
dec
jle
fidiv
adc
enter
popa
or
jnp
mov
fild
dec
push
cmp
cmp
mov
dec
dec
ret
push
in
or
sbb
scas
add
sahf
or
arpl
sbb
outs
ss
lea
mov
push
cmp
mov
pop
adc
(bad)
arpl
jae
inc
pop
mov
or
(bad)
fist
mov
or
jg
movs
lahf
jmp
(bad)
mov
enter
js
lods
icebp
mov
sub
inc
push
push
retf
les
dec
int
xchg
dec
push
jo
fwait
inc
in
imul
add
into
sahf
pop
sub
inc
shr
xor
push
imul
jb
outs
pop
adc
adc
xchg
jno
retf
mov
xlat
cmp
jge
int
mov
dec
and
mov
mov
in
retw
in
call
mov
dec
pop
adc
not
push
out
fmul
pop
in
xor
retf
lods
jmp
pop
mov
push
jl
mov
push
pop
mov
test
addr16
sbb
sub
adc
jp
retf
out
js
cmp
sahf
outs
jbe
ins
ins
imul
bnd
addr16
neg
mov
enter
data16
loope
cmp
scas
dec
cli
ja
inc
ins
out
inc
das
sub
mov
retf
movs
sub
add
sbb
aaa
mov
adc
inc
int
fidiv
pop
or
xchg
sbb
sub
xchg
xchg
push
xchg
dec
jmp
dec
outs
push
(bad)
retf
rcl
dec
pushw
xor
mov
(bad)
loop
cli
out
stos
test
xor
pop
push
mov
in
add
repz
stos
mov
cmp
not
loopne
popf
sbb
test
xor
and
pop
out
pop
cmp
cmp
lock
mov
cmp
xchg
dec
cmc
aam
push
jbe
inc
and
retf
or
daa
hlt
movs
mov
sub
shl
xchg
cmp
shr
pop
jns
mov
and
and
ins
inc
push
mov
retf
cs
lods
cmp
xlat
or
xor
and
imul
push
fistp
out
loopne
call
xchg
push
pop
pop
jb
adc
ret
cmps
sbb
outs
or
and
sub
cmp
es
imul
lock
idiv
mov
nop
mov
jbe
inc
in
cmp
inc
jle
ror
xchg
adc
cdq
fsub
or
mov
push
into
test
dec
mov
mov
adc
je
xchg
stos
arpl
xchg
and
cwde
data16
test
mov
and
outs
add
inc
loop
in
ret
das
mov
sbb
out
popa
(bad)
jle
mov
sub
hlt
cmc
out
mov
cmovne
arpl
mov
call
imul
push
inc
pop
ins
pop
not
pushf
xor
dec
sub
(bad)
fcom
cmp
push
popa
push
and
pop
adc
loop
fiadd
cmp
xlat
pop
cld
clc
push
imul
jecxz
mov
aam
push
sbb
inc
jg
mov
(bad)
fdivr
sub
and
lds
inc
xchg
push
jbe
loopne
icebp
rcr
dec
and
or
scas
js
xchg
shl
push
xor
out
and
inc
das
mov
and
shr
dec
jns
nop
jg
call
or
push
out
mov
sahf
jp
and
lea
test
fstp
sub
(bad)
adc
lahf
mov
movs
jns
push
hlt
out
jae
mov
mov
add
jmp
mov
pop
cmp
push
and
ds
ins
pop
adc
fidivr
sbb
adc
push
mov
(bad)
out
cdq
xchg
iret
and
cmp
xchg
add
gs
inc
cld
call
je
arpl
mov
sar
das
mov
cmp
retf
(bad)
je
sbb
sbb
push
ja
add
mov
dec
pushf
mov
(bad)
add
xchg
movs
mov
in
lods
push
pop
inc
push
adc
fwait
rcr
lds
xchg
lds
jnp
loopne
shr
mov
and
pop
and
push
call
shl
adc
call
or
inc
add
rol
int
add
dec
cmp
nop
cmp
jmp
les
call
imul
rol
out
ja
cli
loope
jmp
or
movs
retf
loope
pop
mov
mov
or
cli
sub
sub
jnp
mov
aad
adc
pushf
cwde
rol
jmp
mov
add
pop
cmp
jecxz
popa
jne
xor
inc
(bad)
xor
test
test
mov
fs
push
pop
icebp
arpl
add
sub
cmp
sub
into
pop
aas
jns
loopne
pop
add
in
xchg
test
add
sahf
sar
add
push
mov
scas
out
adc
adc
in
add
jmp
jl
mov
cmp
push
inc
or
rol
cs
sub
icebp
cmp
mov
out
aad
addr16
adc
ds
adc
psllw
pop
cld
nop
pop
not
inc
xlat
pop
mov
stc
pop
sub
ret
xor
repz
mov
adc
repz
pop
xor
pop
xlat
or
pop
pop
adc
ffreep
push
adc
fsubr
into
repnz
jl
jge
or
add
add
pop
jl
lods
add
sub
(bad)
xchg
cmps
ds
fadd
cmps
xor
sahf
loop
fcomp
or
loop
out
push
mov
(bad)
test
inc
in
jns
ja
push
and
mov
lahf
adc
clc
ds
xor
jno
inc
into
shl
addr16
jp
push
mov
dec
jno
push
jae
push
and
outs
(bad)
faddp
cmp
mov
cmp
xchg
xchg
mov
pop
mov
push
jmp
mov
mov
cmps
and
pop
(bad)
fsubr
rcl
pop
mov
cmps
(bad)
and
adc
inc
fisub
xor
mov
and
addr16
sub
outs
sub
add
pop
lock
arpl
punpckhdq
outs
xor
and
inc
sti
mov
sub
jae
push
call
test
fidiv
and
sub
in
sbb
xchg
out
int
mov
sar
rcl
fsub
sub
push
cmp
or
and
mov
jnp
mov
imul
jns
(bad)
adc
sub
dec
cwde
mov
pusha
(bad)
aas
stc
sub
bnd
sbb
fdivr
sahf
pop
pop
inc
dec
inc
outs
popa
and
fld
out
out
(bad)
out
and
cmp
sbb
dec
neg
dec
gs
nop
push
cmp
stc
pop
retf
mov
vmovdqa
data16
imul
scas
mov
sbb
sub
jnp
ds
arpl
xchg
sahf
jg
jle
daa
xchg
sbb
sar
loope
cld
jne
xchg
mov
sahf
(bad)
mov
shl
mov
lods
imul
inc
pop
out
push
push
out
ja
mov
add
test
mov
iret
nop
enter
nop
cld
fiadd
gs
xchg
and
inc
jle
xor
rol
sub
inc
mov
outs
pop
pop
es
dec
not
xor
pop
xor
or
inc
push
or
and
(bad)
mov
call
push
jg
loopne
mov
cmp
sub
ins
stos
sub
jmp
inc
inc
mov
fiadd
inc
test
pop
je
rol
xor
popf
dec
bound
in
out
setne
sahf
dec
cmp
icebp
mov
imul
jle
xchg
rcl
sub
push
gs
adc
xchg
stc
push
mov
pop
or
pop
sbb
jnp
mov
js
inc
cmp
sub
sbb
sub
fwait
mov
mov
mov
scas
cmp
and
and
adc
repz
std
scas
dec
or
ret
mov
js
dec
test
adc
scas
(bad)
push
xor
cwde
mov
cmp
mov
loopne
or
stos
dec
adc
aas
inc
xor
sub
fnstsw
(bad)
jo
mov
js
(bad)
movzx
jmp
jae
cmp
jo
xor
retf
mov
xchg
sub
daa
push
sub
loope
ss
hlt
popa
lahf
sti
push
and
int3
push
rol
ja
sbb
div
adc
fprem
call
add
outs
mov
pop
mov
pop
popa
iret
stc
movs
inc
gs
sub
cmc
repz
dec
shl
in
mov
xor
retf
addr16
aad
scas
jecxz
sub
xor
mov
jae
inc
jns
rol
sbb
push
mov
jo
hlt
stc
xchg
hlt
push
cmp
(bad)
rcl
sti
mov
ret
loopne
lea
repnz
cdq
(bad)
popf
jp
(bad)
stos
movs
test
mov
fistp
fdivr
or
test
or
hlt
iret
lock
jae
arpl
ins
cmp
into
ror
ss
mov
daa
xor
iret
loopne
imul
xor
iret
inc
inc
cmp
repnz
xor
adc
cmp
fadd
ss
pop
cli
rol
cmp
xchg
stc
mov
mov
jns
cdq
sbb
adc
sub
add
inc
xchg
stos
push
mov
or
fiadd
lahf
dec
int3
mov
clc
mov
pop
icebp
neg
in
imul
push
int3
sbb
scas
out
fwait
cmp
adc
xor
mov
out
adc
sbb
in
mov
or
out
pop
aam
push
sahf
sub
jmp
adc
clc
dec
xchg
fs
adc
sbb
popa
cmp
stos
inc
movs
cmc
or
adc
mov
and
cmp
or
bound
jb
popf
icebp
xor
bound
sbb
dec
mov
pop
icebp
fmul
(bad)
out
cmp
shl
xor
pushf
xsha1
cmps
retf
xchg
rcl
jb
aad
loope
lahf
call
cmp
and
mov
mov
pop
stos
pop
inc
imul
adc
adc
call
mov
jbe
mov
hlt
xchg
xor
sahf
cwde
shr
paddq
bound
jae
or
mov
test
xchg
call
adc
or
shr
lahf
mov
sbb
xchg
fidivr
imul
js
inc
cmps
adc
ror
ds
fcom
dec
ja
cmp
cli
fadd
adc
cmps
pushf
fidivr
test
inc
addr16
xchg
xor
test
cmc
test
cmp
inc
call
neg
sbb
add
mov
hlt
cli
int
rol
hlt
and
pop
jne
iret
lods
mov
mov
and
mov
test
jns
mov
iret
retf
arpl
cmc
sub
pop
int
push
mov
push
push
ud0
call
xchg
pop
ja
mov
adc
loop
scas
mov
adc
sub
ds
in
stos
pop
xor
xor
pop
or
mov
pop
loope
bound
fdivrp
sub
mov
push
shl
mov
rol
pop
xor
not
push
xchg
or
add
data16
fnstsw
fsub
mov
xchg
xchg
in
or
out
fadd
push
jg
cmp
push
cmp
cmp
out
cli
call
fcomp
lahf
jmp
xchg
int3
mov
adc
dec
cmps
jo
outs
xrelease
sbb
or
shl
cli
sub
repnz
inc
xchg
inc
mov
and
bound
out
in
mov
xchg
push
jne
jmp
ret
add
mov
(bad)
push
adc
push
jge
cmp
push
mov
daa
ss
cmp
loop
in
sbb
outs
aaa
cmp
repnz
js
cmp
pop
ins
movs
or
jg
push
inc
outs
retf
push
adc
(bad)
fsub
pushf
das
or
pop
nop
sub
test
dec
ds
and
fistp
gs
addr16
add
or
les
nop
sub
pop
inc
inc
imul
ror
cmc
and
pop
ds
loopne
sub
push
push
xor
push
adc
or
mov
or
cdq
cmp
idiv
mov
(bad)
repz
sub
xor
jnp
mov
pop
jecxz
sub
cmp
(bad)
and
lods
xchg
nop
fld
inc
sbb
ss
sbb
inc
daa
xchg
gs
fistp
sub
jae
cdq
mov
jl
sbb
xor
jmp
sbb
daa
stc
xchg
stos
and
popf
pop
push
imul
pushf
jmp
es
adc
les
sbb
mov
pop
mov
and
jl
mov
or
push
dec
or
addr16
push
pop
retf
pop
inc
xchg
ror
ss
mov
mov
dec
push
arpl
pop
lahf
xor
inc
lock
or
sbb
cmps
dec
xchg
cmp
retf
sar
leave
cld
int3
cwde
int3
(bad)
ror
dec
(bad)
xor
adc
mov
sbb
mov
push
aas
cmp
pop
scas
sub
mov
pop
into
popf
sar
retf
pushf
mov
pushf
jns
sub
pop
iret
sub
and
(bad)
cmc
jb
je
pop
popf
push
sub
shl
clc
popf
pop
lock
mov
sub
out
sub
out
inc
jmp
mov
xlat
fstp
xor
mov
xor
cli
add
out
fld
push
jns
mov
lahf
or
movs
lea
jb
xor
fnstenv
jmp
test
sahf
lock
lea
xlat
sbb
mov
mov
cwde
fdiv
hlt
sbb
xchg
cdq
xchg
arpl
aas
ins
push
addr16
ss
adc
pushf
enter
retf
stos
hlt
add
scas
ja
inc
movs
(bad)
rcl
gs
mov
xlat
pop
lds
out
xor
stos
or
fist
dec
fcom
popa
aam
mov
(bad)
(bad)
ds
push
loop
mov
push
dec
xor
bound
and
cld
push
sub
sbb
dec
dec
xchg
sbb
lds
(bad)
xchg
cmp
inc
dec
add
adc
mov
ret
pop
fild
mov
pop
jg
sbb
mov
push
movs
push
cmp
xor
xchg
rol
jb
jb
call
jnp
jmp
xchg
in
cli
mov
mov
test
mov
pop
mov
dec
(bad)
mov
adc
sbb
int3
in
outs
inc
pop
mov
mov
int3
(bad)
(bad)
int
movs
jmp
push
push
ins
sti
in
sub
dec
xchg
push
mov
jns
scas
pushf
mov
retf
xchg
in
xor
imul
inc
imul
ss
retf
push
sbb
push
xchg
js
out
iret
test
pop
jg
sub
in
mov
mov
push
mov
dec
sub
add
sub
mov
mov
jecxz
jnp
add
jge
icebp
fs
jge
mov
test
int3
cdq
xchg
push
pop
lock
bound
retf
enter
or
xor
cld
iret
xor
mov
lea
stos
mov
les
cli
dec
adc
mov
stos
retf
retf
les
arpl
(bad)
adc
test
pop
mov
cld
cs
inc
aas
mov
pop
stos
mov
jb
push
mov
stos
cld
push
test
stc
dec
mov
jnp
jno
mov
pop
or
lds
jg
cmp
lods
and
ret
jno
mov
cmps
outs
pop
jbe
sub
in
jno
out
js
cmp
xor
scas
mov
int
pop
add
lods
in
mov
xchg
mov
ja
xchg
xchg
xchg
mov
lahf
into
and
xchg
pusha
mov
push
std
frstor
jl
lods
and
xchg
xchg
jno
xchg
inc
std
inc
fld
mov
push
(bad)
(bad)
push
mov
pop
sub
mov
cs
or
fcomp
xor
test
nop
enter
data16
xor
sahf
dec
cmp
ja
call
mov
scas
mov
stos
and
push
cmp
dec
and
xchg
call
fcmovnbe
ret
push
out
jg
lea
mov
rcl
test
data16
jae
dec
(bad)
pushf
mov
lahf
int3
cmp
inc
repnz
dec
xlat
mov
sbb
ret
in
adc
dec
push
lods
lods
pop
iret
cmp
dec
jle
loopne
sub
mov
cmp
ror
loop
pusha
mov
xlat
fmulp
push
neg
dec
push
xchg
fwait
inc
in
cmc
mov
fmul
in
fcomp
mov
add
mov
movzx
mov
xor
inc
int3
aaa
xlat
nop
mov
repz
xchg
mov
sbb
xchg
scas
push
jle
sub
or
xor
add
cmp
jg
sbb
inc
es
push
icebp
mov
sub
jno
shl
into
sub
sub
sub
pop
sbb
sub
add
pop
pop
out
push
leave
sti
inc
out
in
sbb
adc
and
pushf
pop
and
mov
and
daa
push
and
and
mov
enter
(bad)
int
push
pop
pop
xchg
in
aas
pop
pop
inc
ins
push
push
fcom
or
mov
xlat
fld
pop
mov
mov
lock
(bad)
cs
clc
loop
or
je
cmp
ror
cwde
xchg
push
(bad)
sub
jnp
sbb
xlat
jmp
gs
push
jo
outs
inc
dec
xor
(bad)
mov
pop
mov
mov
repz
dec
(bad)
mov
jle
(bad)
adc
std
icebp
and
in
mov
enter
cli
mov
xchg
push
retf
outs
outs
mov
aaa
lods
shl
add
xchg
aam
cmp
dec
xlat
and
xor
xchg
mov
fdiv
jmp
jno
movs
and
mov
push
xchg
mov
dec
aam
sbb
test
movs
cmp
cmps
lds
aas
xlat
dec
jnp
outs
aam
pop
retf
(bad)
fidivr
popf
inc
shr
inc
sbb
cli
cmp
and
mov
out
cs
popa
jg
hlt
jnp
adc
test
mov
sbb
jecxz
pusha
popa
add
and
stc
adc
mov
sbb
sub
mov
ss
inc
(bad)
jmp
pop
dec
fisubr
jge
retf
pushf
out
into
cmc
mov
shl
or
dec
fdiv
mov
xchg
das
jno
ins
adc
mov
in
(bad)
adc
mov
inc
rcr
mov
jl
xchg
call
sbb
dec
sbb
jmp
mov
mov
(bad)
mov
or
sub
fdivrp
fdivr
jne
jmp
ficom
xchg
mov
or
cmp
push
(bad)
fistp
dec
adc
pop
mov
pushf
test
cs
aas
push
xor
xchg
test
outs
imul
or
add
inc
in
loopne
lds
xchg
jne
les
sbb
cmp
neg
out
adc
push
cmp
ja
and
ins
loope
xor
bound
retf
inc
xchg
sbb
inc
out
ds
(bad)
xlat
jne
mov
push
adc
mov
outs
mov
adc
add
cmp
leave
out
in
sub
mov
stos
loop
inc
lds
jnp
dec
push
sti
sub
add
jle
and
pop
jmp
mov
std
into
shr
or
sahf
mov
xor
mov
push
xor
cmps
jnp
into
fnstsw
neg
imul
std
in
out
mov
jge
aas
inc
mov
lahf
dec
mov
jle
das
mov
aas
mov
xor
test
fwait
pop
shl
dec
xor
leave
mov
leave
jge
imul
pop
jns
xor
push
push
mov
int3
fimul
sub
ins
add
test
adc
movs
adc
mov
jae
arpl
enter
mov
sahf
mov
mov
xor
pop
push
pop
and
sti
or
ss
push
cmc
add
into
aaa
xchg
pop
loop
not
sub
dec
imul
(bad)
or
leave
push
stc
or
fdiv
mov
not
pop
add
jl
test
inc
enter
ror
xor
sbb
cmp
test
mov
icebp
and
cmc
mov
(bad)
test
dec
xchg
fld
in
(bad)
test
pop
jmp
retf
dec
stc
inc
ret
fabs
sbb
les
cmps
add
xchg
push
xchg
or
out
aaa
jl
cs
loope
popa
mov
lahf
mov
fstp
fstp
push
repnz
fild
add
ja
ins
loope
push
or
xchg
inc
mov
int
mov
repnz
ja
xchg
cmp
fcmovnu
pop
or
pop
fisubr
or
test
xlat
int
jnp
dec
and
sbb
aad
out
sbb
int3
inc
xor
pop
ins
push
fwait
ss
xor
lods
aam
sub
dec
xchg
(bad)
adc
jecxz
in
in
fs
arpl
jo
int
sbb
and
loopne
push
adc
stos
je
test
mov
test
pop
adc
dec
xchg
inc
test
pop
ins
in
ret
mov
mov
cmp
into
and
daa
xchg
inc
or
loop
sbb
dec
leave
sbb
xor
cmp
dec
mov
aam
push
out
inc
mov
pop
dec
jb
(bad)
in
call
jg
push
push
and
push
(bad)
mov
inc
jle
pop
inc
inc
pop
fst
aas
in
cmps
arpl
pop
dec
out
xchg
cmp
adc
ins
cmp
dec
rcl
pushf
and
xor
sub
(bad)
xchg
aas
mov
xchg
jg
inc
pop
fadd
add
addr16
stc
jnp
fs
fisttp
xchg
in
pop
sub
fcmove
mov
jmp
bound
in
aad
mov
imul
or
loopne
test
dec
xchg
or
dec
mov
cli
fwait
les
cmp
les
push
(bad)
test
mov
pop
out
or
mov
clc
fbstp
add
je
dec
push
retf
jg
sti
inc
imul
xchg
sbb
in
mov
or
clc
xor
je
outs
and
push
sahf
call
ret
and
cmp
ins
mov
adc
popa
stc
movs
fwait
dec
hlt
je
shl
sub
shl
xchg
loop
popa
fistp
pop
pop
adc
rcl
mov
cmc
mov
imul
je
daa
loop
setl
into
mov
sub
cmp
sbb
adc
gs
fcom
add
dec
outs
les
or
add
loop
stos
dec
pop
bnd
jae
test
sbb
jl
fdiv
sbb
and
add
add
sbb
dec
cwde
mov
sbb
hlt
sbb
call
adc
mov
mov
test
jne
cmc
pop
les
xchg
xor
xchg
inc
mov
ins
lods
jmp
popf
push
adc
push
lods
push
ja
inc
adc
jl
icebp
cwde
(bad)
pop
push
mov
dec
push
cmp
inc
dec
loop
xchg
mov
xchg
fcom
sub
das
stos
jmp
or
mov
aam
shl
inc
aaa
xchg
push
or
out
addr16
add
push
(bad)
fidiv
fs
mov
rcl
aas
mov
jecxz
inc
push
push
je
add
icebp
push
adc
pop
std
mov
out
mov
hlt
lahf
sbb
mov
lock
and
jb
loope
inc
or
mov
cs
shr
dec
shr
and
es
neg
lods
movs
lock
icebp
xchg
mov
rol
mov
or
sub
xchg
adc
outs
retf
jmp
out
push
inc
ins
mov
mov
pop
lods
test
jne
cmps
nop
mov
or
jmp
xlat
fsubrp
movs
pushf
scas
ja
(bad)
xlat
jecxz
rcr
test
pop
call
mov
addr16
or
jae
js
test
fcomp
cmps
retf
pop
in
enter
cld
sbb
xchg
push
jmp
shl
mov
dec
test
inc
adc
pop
out
sbb
jne
mov
cmp
pop
repz
ror
push
jmp
scas
lahf
dec
jmp
xchg
pushf
(bad)
ficomp
outs
pushf
dec
cmps
mov
(bad)
repz
out
mov
or
pop
retf
call
or
push
pop
loop
lods
xchg
push
and
mov
xlat
les
je
aam
sub
jae
cmp
mov
in
popa
cmp
mov
inc
and
push
popa
pushf
jecxz
xor
pop
ret
add
mov
dec
aaa
loopne
into
(bad)
or
test
je
aas
xor
cmp
arpl
mov
sub
adc
rcr
movs
push
adc
adc
test
dec
rcl
push
pushf
fst
imul
(bad)
dec
push
pusha
lods
shl
movs
js
push
int3
hlt
(bad)
mov
adc
movs
loop
mov
dec
stc
mov
(bad)
cmp
ins
mov
rol
test
cdq
ret
ret
xor
xchg
out
cmp
jge
cmp
xor
cmp
leave
fnclex
jecxz
sbb
nop
js
out
retf
ror
cmp
sub
in
ins
pushf
out
les
sub
cmp
xchg
cmp
int
imul
jle
(bad)
jmp
adc
dec
xor
cmp
inc
xchg
psubsb
sub
outs
sub
inc
sub
xor
jb
push
arpl
stc
mov
pop
sub
xchg
inc
and
pop
int3
lds
mov
in
ror
cwde
mov
cmp
jge
mov
xchg
ds
in
cld
cs
dec
movs
das
xor
int3
shl
bound
call
sub
push
jne
(bad)
push
jno
mov
mov
scas
clc
or
mov
int
outs
jmp
ins
pop
icebp
imul
ins
inc
or
inc
sub
push
arpl
repz
outs
add
cvtps2pd
xor
in
jmp
xchg
jmp
pushf
sar
mov
cdq
mov
xchg
mov
call
cmc
nop
(bad)
aad
cmp
xchg
(bad)
mov
inc
js
outs
ret
inc
and
sub
je
cwde
cmps
test
pop
or
add
in
dec
xchg
xchg
or
and
lahf
mov
pop
imul
add
data16
sbb
movs
mov
adc
rol
and
out
dec
stc
push
jo
pusha
and
outs
mov
xchg
jae
sahf
nop
jmp
xchg
lahf
dec
loope
jno
adc
call
dec
out
repz
pushf
push
add
jg
rcr
xor
cwde
sbb
retf
push
lock
inc
pop
(bad)
enter
sub
sub
stos
inc
imul
out
adc
mov
enter
lea
push
movs
add
pop
fnstenv
mov
and
and
jmp
mov
mov
int3
xchg
popa
xchg
ror
cs
ja
imul
call
and
mov
add
movs
loop
sti
mov
imul
xchg
xchg
repz
pop
xor
iret
or
xchg
adc
rcr
(bad)
out
mov
pop
mov
and
sbb
push
movs
cmp
int
fadd
mov
mov
aaa
daa
sub
ret
mov
push
inc
hlt
dec
jge
cli
add
rcr
sbb
into
xchg
jmp
int
out
imul
scas
mov
push
fdivr
mov
sbb
(bad)
jo
xchg
scas
loope
sub
cmp
xor
dec
data16
fidiv
aad
xor
ss
lock
xchg
pop
cmp
clc
pop
jb
fwait
movs
imul
fbld
push
hlt
add
test
add
lds
(bad)
daa
or
add
xchg
mov
dec
lods
imul
je
test
rcr
xchg
inc
adc
sbb
lea
inc
pop
addr16
test
jge
fist
(bad)
iret
les
sti
jmp
inc
repnz
sub
jp
rcr
mov
call
adc
adc
push
mov
mov
je
jp
pop
lods
iret
(bad)
push
(bad)
clc
adc
cmp
dec
shl
movs
pop
lods
leave
ds
outs
pushf
push
test
and
pop
xchg
adc
and
add
xchg
pusha
xor
(bad)
out
sub
xor
shl
scas
(bad)
ja
add
cmp
cmps
shl
dec
mul
pop
int3
jp
scas
pop
add
lods
lods
cmp
data16
dec
sbb
push
sub
(bad)
in
sbb
push
lock
and
cld
in
pushf
pop
or
push
ins
test
and
mov
cdq
or
xor
cmps
aaa
test
int
sbb
int
daa
int
or
xchg
mov
pop
stc
lds
jmp
test
fidiv
(bad)
xchg
(bad)
sar
xchg
cmc
rol
out
outs
ficomp
sbb
mov
jmp
sbb
fmul
popf
imul
cli
out
jg
pop
enter
repz
(bad)
leave
xchg
mov
adc
arpl
mov
adc
jno
cmp
xchg
mov
and
pop
mov
test
add
jge
(bad)
fdivr
daa
jmp
loopne
xchg
mov
sub
shl
(bad)
add
dec
test
pop
xchg
sar
dec
mov
test
or
iret
sar
out
or
sbb
scas
mov
popf
inc
std
xor
inc
std
mov
out
mov
loope
sti
jo
adc
int
adc
jmp
mov
and
sub
fsubr
and
mov
sub
jge
mov
dec
xor
dec
(bad)
dec
std
cmp
dec
ror
mov
sbb
cs
popf
iret
adc
mov
xchg
int
pop
fisttp
jmp
adc
cmps
cmp
fisub
jb
aaa
add
in
push
inc
loopne
leave
(bad)
jnp
(bad)
cmps
mov
(bad)
rol
dec
jns
xchg
stc
repnz
call
and
sub
rcl
pop
sub
inc
jae
aad
xchg
adc
test
inc
mov
cwde
or
retf
(bad)
(bad)
jge
cli
cmp
mov
imul
cmp
xlat
enter
dec
sub
mov
jne
mov
in
push
and
sti
push
dec
std
xchg
push
xor
ficom
xlat
sahf
push
jmp
pop
xor
popa
mov
push
shr
rcl
data16
cmps
jo
adc
movs
je
add
dec
sub
mov
test
shl
adc
fistp
mov
popf
mov
sub
jo
mov
ret
and
js
dec
in
dec
nop
xchg
mov
adc
scas
mov
psrld
aad
int
add
xchg
cwde
dec
mov
or
aas
arpl
mov
xchg
and
int3
mov
into
shl
dec
jo
adc
loopne
xchg
add
std
or
sbb
js
repz
repz
pop
and
fyl2x
push
lods
or
or
xor
or
push
push
outs
fist
fmul
je
sti
outs
add
xor
ror
push
iret
ins
arpl
or
push
mov
repz
lods
pop
cwde
mov
pop
in
adc
cs
test
cmp
ret
out
inc
stc
imul
cmp
je
out
xor
ja
pop
imul
in
cs
daa
loopne
(bad)
cs
xlat
mov
loop
jl
aaa
sub
mov
xchg
lods
add
jmp
hlt
inc
mov
fcomp
jle
xor
dec
mov
in
or
scas
out
sub
jo
dec
xor
jge
(bad)
adc
int
jmp
cmc
mov
jns
sbb
icebp
xchg
adc
pop
enter
repz
ss
ins
retf
jmp
push
ja
mov
pop
push
sub
cwde
fiadd
out
ss
cmp
scas
push
cmp
loop
jns
add
cmp
retf
stos
and
lds
int
in
cmp
mov
sbb
pop
xchg
inc
inc
push
add
dec
mov
mov
stc
sbb
mov
xor
mov
sar
out
movs
imul
mov
cmp
xor
sti
arpl
aam
ficomp
call
xor
push
sub
call
mov
mov
xchg
adc
xchg
ret
push
aam
push
jecxz
jno
inc
cmc
loope
pop
std
test
sbb
cmc
adc
or
jnp
push
js
jmp
adc
rol
cmps
loopne
jecxz
sub
rcr
and
inc
lods
xor
and
(bad)
ja
sahf
hlt
sti
(bad)
pop
cwde
dec
or
mov
pop
daa
pop
sbb
jmp
daa
movs
or
add
push
dec
test
or
cmps
or
sbb
cmps
xor
aaa
les
xor
outs
dec
clc
lods
rcl
into
lahf
dec
xchg
cmp
mov
dec
pop
mov
pop
inc
mov
retf
fist
fisttp
and
mov
pushf
imul
fst
dec
mov
repnz
jnp
mov
mov
pop
aas
or
and
inc
(bad)
cmp
push
mov
clc
or
jle
call
sbb
movs
xchg
cmp
ret
push
ficom
aam
cld
out
mov
stc
outs
pusha
push
push
jae
xor
push
(bad)
fldcw
adc
test
mov
imul
les
stos
das
idiv
add
pop
(bad)
push
push
add
and
or
test
shl
adc
mov
call
cwde
inc
adc
addr16
clc
xlat
loopne
adc
gs
add
imul
fld
or
stos
mov
test
push
push
clc
loop
cli
loop
xchg
stos
mov
adc
rcl
mov
stos
xchg
dec
ins
cmp
and
ja
hlt
stc
mov
sub
mov
inc
or
daa
mov
mov
and
mov
loopne
fbld
cdq
aaa
push
mov
fisubr
and
xor
inc
jns
xor
inc
out
ficom
cli
movs
ror
shl
pop
push
and
and
pop
fldcw
and
push
push
mov
add
fst
imul
scas
add
lea
int
fisubr
dec
clc
push
or
daa
jnp
enter
pop
push
lock
mov
call
aam
mov
jae
xchg
fcom
adc
jmp
stc
sub
or
add
clc
(bad)
mov
out
xor
mov
add
mov
dec
cmp
adc
fimul
adc
ficom
cmp
(bad)
mov
or
push
add
gs
sub
jno
(bad)
push
mov
sub
test
or
and
jp
aaa
cdq
call
cmp
cmp
sub
pop
adc
and
mov
das
mov
fisub
(bad)
mov
push
pop
sub
pop
(bad)
push
and
pop
adc
dec
xor
xor
xchg
(bad)
jle
fild
outs
pop
aaa
jmp
fsubr
cmp
in
je
cli
jmp
scas
pop
jno
data16
jl
or
mov
(bad)
dec
outs
mov
sbb
jge
(bad)
clc
cmp
cmp
les
adc
mul
(bad)
repz
retf
in
ds
cwde
cli
jg
imul
xchg
jecxz
into
xlat
jb
loope
adc
(bad)
jle
xchg
sub
aam
dec
daa
and
cmps
enter
sbb
fs
or
mov
xor
dec
xchg
(bad)
popa
std
mov
outs
(bad)
jp
xchg
out
inc
cld
aad
call
aaa
(bad)
outs
retf
movs
clc
xor
daa
lea
mov
js
js
mov
sbb
movs
ds
xlat
outs
test
push
cmp
daa
fidiv
cs
(bad)
aas
addr16
cmp
test
cld
sti
ffreep
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov
test
jbe
mov
push
push
mov
mov
mov
mov
mov
shl
mov
pop
shr
rep
mov
and
rep
pop
ret
nop
push
mov
push
mov
test
jle
mov
mov
sub
mov
mov
inc
dec
jne
mov
pop
pop
ret
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov
sub
test
push
push
push
push
mov
je
mov
test
je
test
je
mov
test
jle
mov
push
mov
push
push
push
push
call
mov
add
test
jne
mov
mov
pop
pop
pop
pop
add
ret
mov
add
test
jne
push
call
add
push
call
add
mov
mov
pop
pop
pop
pop
add
ret
push
lea
push
push
call
mov
mov
add
lea
mov
mov
push
push
push
push
push
mov
mov
mov
mov
call
mov
mov
add
mov
test
je
push
push
call
add
push
call
add
mov
mov
test
je
mov
push
call
add
mov
pop
pop
pop
pop
add
ret
mov
pop
pop
pop
mov
pop
add
ret
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push
mov
xor
cmp
je
mov
mov
mov
mov
push
mov
mov
mov
mov
mov
call
add
mov
pop
ret
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov
xor
mov
mov
mov
ret
ret
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push
mov
push
mov
push
mov
mov
mov
lea
cmp
jbe
sub
mov
mov
push
add
mov
push
push
call
mov
mov
add
add
mov
push
push
push
push
push
call
add
mov
pop
pop
pop
ret
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push
mov
push
mov
mov
push
push
push
call
mov
mov
add
push
push
add
push
call
mov
add
add
mov
pop
pop
ret
nop
nop
nop
nop
nop
push
mov
mov
push
push
call
mov
add
push
push
call
mov
add
push
push
call
add
pop
ret
nop
nop
nop
nop
nop
nop
mov
mov
mov
push
mov
mov
mov
mov
mov
add
mov
add
mov
add
mov
add
mov
add
mov
add
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
push
mov
xor
mov
mov
call
add
ret
mov
push
push
mov
push
push
mov
call
mov
mov
add
cmp
jne
xor
pop
pop
pop
ret
xor
mov
mov
inc
mov
mov
mov
push
call
mov
mov
add
test
push
jne
push
call
add
push
call
jmp
call
add
test
jne
push
call
add
test
jne
mov
test
je
mov
test
jne
mov
mov
mov
sub
push
push
push
call
mov
add
pop
pop
pop
ret
nop
mov
push
push
push
mov
and
call
add
mov
pop
ret
nop
nop
nop
nop
nop
nop
push
push
push
mov
mov
push
mov
mov
and
cmp
ja
mov
mov
shr
sub
mov
mov
pop
pop
pop
pop
ret
mov
mov
mov
shr
mov
mov
mov
cmp
jb
cmp
jae
xor
sub
mov
and
or
inc
mov
mov
sub
mov
shr
add
mov
mov
mov
pop
pop
pop
pop
ret
push
call
add
mov
mov
mov
add
shl
or
mov
mov
mov
sub
mov
shr
sub
mov
add
mov
mov
pop
pop
pop
pop
ret
nop
nop
nop
sub
push
push
push
mov
push
push
push
call
add
cmp
jne
mov
push
push
push
call
mov
add
add
push
push
push
call
mov
add
add
push
push
push
call
mov
add
add
push
push
push
call
mov
add
push
push
push
call
mov
mov
mov
add
push
push
push
push
push
call
add
test
jne
mov
mov
mov
push
push
push
push
push
call
add
test
jne
pop
pop
pop
pop
add
ret
cmp
jne
mov
mov
pop
pop
pop
pop
add
ret
push
push
call
add
mov
add
push
push
mov
call
add
lea
inc
push
push
push
mov
call
add
push
push
call
mov
add
add
xor
push
push
call
xor
add
mov
inc
cmp
mov
jbe
mov
push
push
lea
push
push
push
call
add
test
jne
mov
xor
add
test
jbe
mov
mov
and
xor
xor
push
mov
mov
push
call
mov
add
sub
je
dec
je
dec
je
mov
jmp
push
push
call
add
add
xor
jmp
push
push
call
add
add
xor
jmp
push
push
call
mov
add
add
xor
mov
lea
cmp
ja
mov
inc
dec
mov
jne
cmp
jb
mov
mov
mov
mov
add
mov
push
push
push
call
mov
mov
mov
add
push
push
push
push
push
call
add
test
jne
mov
mov
mov
push
push
push
push
push
call
add
test
jne
pop
pop
pop
pop
add
ret
mov
pop
pop
pop
pop
add
ret
mov
pop
pop
pop
mov
pop
add
ret
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov
xor
push
mov
mov
mov
push
push
and
call
add
mov
pop
ret
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub
lea
push
push
push
push
push
push
push
call
mov
add
xor
test
jle
mov
xor
mov
inc
lea
inc
cmp
jl
mov
lea
xor
mov
add
add
add
shl
mov
cmp
jle
cmp
je
mov
xor
lea
movsx
add
cmp
jg
inc
add
cmp
jl
mov
xor
test
jle
mov
mov
test
je
mov
and
mov
mov
xor
mov
inc
lea
jmp
mov
mov
inc
cmp
jl
xor
test
mov
jle
mov
xor
mov
cmp
jle
mov
mov
xor
lea
xor
lea
mov
shl
mov
and
shr
or
shl
dec
test
jg
mov
mov
mov
inc
cmp
mov
jl
mov
push
push
push
call
add
dec
test
mov
jl
mov
mov
test
je
cmp
ja
mov
shl
mov
xor
mov
lea
lea
mov
add
add
cmp
jb
jmp
mov
mov
mov
mov
mov
and
lea
lea
mov
jmp
mov
cmp
jne
mov
mov
not
mov
mov
mov
add
add
mov
mov
xor
movsx
mov
mov
test
not
je
lea
jmp
lea
mov
xor
shl
mov
inc
cmp
jb
mov
mov
mov
dec
jns
xor
pop
pop
pop
pop
add
ret
mov
pop
pop
pop
mov
mov
pop
add
ret
nop
nop
nop
nop
nop
push
push
push
mov
push
mov
test
je
and
push
push
call
add
mov
cmp
jb
mov
push
and
call
mov
xor
mov
add
and
shr
or
mov
jmp
mov
cmp
jae
push
call
and
add
shl
or
push
call
add
mov
and
push
call
xor
add
mov
and
or
not
and
cmp
je
mov
mov
pop
pop
pop
pop
ret
test
je
mov
mov
sub
mov
cmp
jb
mov
mov
mov
mov
sub
add
cmp
jae
cmp
jae
mov
jmp
mov
mov
push
push
push
call
mov
mov
mov
add
mov
add
sub
add
cmp
mov
mov
jb
push
call
mov
mov
add
cmp
je
mov
mov
cmp
jne
mov
mov
mov
push
push
push
mov
call
add
test
jne
push
call
add
and
mov
mov
pop
pop
pop
xor
pop
ret
nop
nop
nop
nop
nop
nop
mov
xor
push
mov
mov
inc
mov
mov
cmp
mov
jb
push
call
add
mov
pop
ret
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push
mov
mov
test
je
inc
mov
pop
ret
mov
mov
mov
push
push
push
call
add
test
jne
inc
mov
add
mov
mov
add
mov
pop
ret
nop
nop
push
push
mov
push
push
call
mov
add
cmp
jae
mov
mov
mov
mov
inc
mov
mov
cmp
jne
mov
mov
mov
push
push
push
mov
call
add
jmp
je
push
sub
call
mov
add
sub
mov
dec
cmp
jae
add
mov
mov
mov
mov
mov
inc
inc
cmp
mov
jne
mov
mov
mov
push
push
push
mov
call
add
cmp
jne
mov
dec
jne
jmp
pop
pop
pop
ret
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push
push
push
mov
cmp
jle
mov
mov
pop
pop
pop
ret
mov
mov
and
mov
test
jge
push
push
call
mov
mov
and
add
movsx
mov
and
not
or
mov
mov
shr
test
jge
movsx
mov
and
not
or
inc
cmp
mov
jbe
mov
mov
pop
pop
pop
ret
push
push
jmp
mov
movsx
mov
test
jne
mov
mov
pop
pop
pop
ret
and
push
push
call
mov
add
and
cmp
jne
mov
test
je
mov
mov
pop
pop
pop
ret
mov
push
push
and
call
add
xor
mov
push
push
or
call
add
test
jne
mov
mov
mov
sub
push
push
push
call
mov
add
xor
mov
mov
push
push
call
add
add
mov
pop
pop
pop
ret
cmp
jl
sub
mov
and
xor
mov
and
shr
dec
add
shl
mov
push
and
push
lea
call
add
pop
mov
pop
pop
ret
nop
nop
nop
push
push
push
push
mov
push
mov
mov
and
mov
test
jge
push
call
mov
mov
add
xor
and
movsx
mov
and
not
or
inc
shr
mov
test
jl
push
jmp
mov
xor
movsx
mov
push
call
add
cmp
jge
movsx
pop
pop
pop
pop
ret
and
mov
shr
dec
cmp
ja
xor
and
mov
add
mov
mov
mov
push
shl
and
push
add
call
add
mov
pop
pop
pop
pop
ret
mov
push
push
and
call
mov
xor
mov
add
and
lea
shl
push
push
add
call
and
mov
add
add
shl
pop
add
mov
pop
mov
pop
pop
ret
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov
mov
push
mov
mov
push
shr
je
mov
add
mov
add
dec
jne
and
je
mov
mov
inc
inc
dec
jne
pop
pop
ret
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push
mov
mov
push
and
push
mov
mov
shl
or
mov
shl
or
mov
shl
shr
or
test
je
mov
add
dec
jne
and
je
mov
inc
dec
jne
pop
pop
pop
ret
nop
nop
nop
nop
nop
nop
nop
nop
push
mov
mov
test
je
mov
pop
ret
mov
push
push
push
mov
mov
sub
mov
add
sub
mov
cmp
je
nop
nop
int3
nop
nop
mov
test
je
int3
mov
mov
lea
mov
test
jle
mov
neg
mov
jmp
mov
mov
mov
add
add
nop
mov
lea
cmp
je
int3
nop
nop
nop
nop
nop
mov
mov
push
push
push
push
call
add
nop
mov
mov
mov
push
mov
push
push
push
push
lea
push
call
mov
mov
add
inc
lea
mov
cmp
mov
jl
pop
pop
mov
pop
pop
ret
nop
push
mov
mov
mov
lea
push
push
mov
push
push
push
call
add
test
je
nop
nop
int3
nop
nop
nop
mov
pop
ret
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov
push
mov
test
mov
jbe
push
push
mov
push
mov
xor
sub
lea
cdq
sub
sar
test
jle
mov
mov
mov
and
and
add
sub
cmp
jne
cmp
jge
test
jl
mov
mov
sub
mov
add
sub
inc
cdq
sub
sar
cmp
jl
mov
mov
mov
add
sub
mov
mov
jne
pop
pop
pop
mov
pop
ret
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
gs
ins
outs
fs
je
jb
gs
add
inc
outs
jne
outs
daa
je
popa
ins
ins
outs
arpl
and
ins
outs
jb
and
add
dec
gs
inc
js
push
gs
fs
je
and
das
and
das
and
das
and
add
add
dec
gs
inc
js
push
jb
je
dec
je
and
das
and
add
ins
pop
outs
inc
outs
ins
jo
gs
gs
outs
jae
je
outs
outs
and
add
outs
dec
jb
imul
imul
and
add
outs
inc
outs
ins
jo
gs
gs
jne
push
imul
and
add
add
nop
jg
adc
adc
or
or
or
or
add
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
