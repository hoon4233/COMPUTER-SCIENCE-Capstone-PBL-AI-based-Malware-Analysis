import os
import torch
import torch.nn as nn
import torch.optim as optim
from torch.optim import lr_scheduler
import torch.backends.cudnn as cudnn

import torchvision.transforms as transforms

from models import wide_resnet, MyDataset
import argparse

from util import read_data_set, load_x_data, load_y_data
from collections import Counter
from torchsummary import summary

import gc
gc.collect()
torch.cuda.empty_cache()

import time
start_time = time.time()

parser = argparse.ArgumentParser(description='wide-resnet')
parser.add_argument('--lr', default=0.1, help='')
parser.add_argument('--resume', default=None, help='')
parser.add_argument('--batch_size', default=256, help='')
# parser.add_argument('--batch_size', default=256, help='')
parser.add_argument('--num_worker', default=2, help='')
args = parser.parse_args()

device = 'cuda' if torch.cuda.is_available() else 'cpu'

print('==> Preparing data..')
transforms_train = transforms.Compose([
	# transforms.ToTensor(),
	transforms.Normalize(0.5, 0.5),
	# transforms.Normalize(0.008, 0.03),
])
transforms_test = transforms.Compose([
	# transforms.ToTensor(),
	transforms.Normalize(0.5, 0.5),
	# transforms.Normalize(0.008, 0.03),
])

# DATA_SET_PATH = "../data/opcode/"
# train_data, train_label, test_data, test_label = read_data_set(DATA_SET_PATH, 2000)
# print(f"len(train_label) : {len(train_label)}, len(test_label : {len(test_label)}")
import pickle
from scipy.sparse import csr_matrix
TRAIN_X_PATH = "train_x.pickle"
VALID_X_PATH = "valid_x.pickle"
TRAIN_Y_PATH = "train_y.pickle"
VALID_Y_PATH = "valid_y.pickle"

train_data = load_x_data(TRAIN_X_PATH)
test_data = load_x_data(VALID_X_PATH)
train_label = load_y_data(TRAIN_Y_PATH)
test_label = load_y_data(VALID_Y_PATH)
# print(train_data.shape, Counter(train_label))
# print(test_data.shape, Counter(test_label))
# exit()

train_dataset = MyDataset(train_data, train_label)
test_dataset = MyDataset(test_data, test_label)
#print("END load DATA, time :", start_time-time.time())
start_time = time.time()
# exit()
train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=args.batch_size,
	                      shuffle=True, num_workers=args.num_worker)
test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=args.batch_size,
	                     shuffle=False, num_workers=args.num_worker)
# exit()
# there are 10 classes so the dataset name is cifar-10
classes = ('nor', 'mal')

print('==> Making model..')

net = wide_resnet()
print("==> Model init ok")
net = net.to(device)
print("==> net to device ok")
summary(net, (train_data.shape[1], train_data.shape[2], train_data.shape[3]))
exit()

if device == 'cuda':
	net = torch.nn.DataParallel(net)
	cudnn.benchmark = True

if args.resume is not None:
	checkpoint = torch.load('./save_model/' + args.resume)
	net.load_state_dict(checkpoint['net'])

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(net.parameters(), lr=0.1,
	                  momentum=0.9, weight_decay=5e-4)
step_lr_scheduler = lr_scheduler.MultiStepLR(optimizer, milestones=[60, 120, 160], gamma=0.2)

def train(epoch):
	net.train()

	train_loss = 0
	correct = 0
	total = 0

	for batch_idx, (inputs, targets) in enumerate(train_loader):
		inputs = inputs.to(device)
		targets = targets.to(device)
		outputs = net(inputs)
		loss = criterion(outputs, targets)

		optimizer.zero_grad()
		loss.backward()
		optimizer.step()

		train_loss += loss.item()
		_, predicted = outputs.max(1)
		total += targets.size(0)
		correct += predicted.eq(targets).sum().item()
		print('IN TRAIN, epoch : {} [{}/{}]| loss: {:.3f} | acc: {:.3f}'.format(epoch, batch_idx,
			  len(train_loader), train_loss/(batch_idx+1), 100.*correct/total))



def test(epoch, best_acc):
	net.eval()

	test_loss = 0
	correct = 0
	total = 0

	with torch.no_grad():
		for batch_idx, (inputs, targets) in enumerate(test_loader):
			inputs = inputs.to(device)
			targets = targets.to(device)
			outputs = net(inputs)
			loss = criterion(outputs, targets)

			test_loss += loss.item()
			_, predicted = outputs.max(1)
			total += targets.size(0)
			correct += predicted.eq(targets).sum().item()

			print('IN TEST, epoch : {} [{}/{}]| loss: {:.3f} | acc: {:.3f}'.format(epoch, batch_idx,
			  len(test_loader), test_loss/(batch_idx+1), 100 * correct/total))

	acc = 100 * correct / total

	if acc > best_acc:
		print('==> Saving model..')
		state = {
		    'net': net.state_dict(),
		    'acc': acc,
		    'epoch': epoch,
		}
		if not os.path.isdir('save_model'):
		    os.mkdir('save_model')
		torch.save(state, './save_model/ckpt.pth')
		best_acc = acc

	return best_acc


if __name__=='__main__':
	best_acc = 0
	NUM_OF_EPOCH = 20
	final_acc = -1
	if args.resume is None:
		for epoch in range(NUM_OF_EPOCH):
			step_lr_scheduler.step()
			train(epoch)
			best_acc = test(epoch, best_acc)
			final_acc = max(best_acc, final_acc)
			print(f'IN epoch : {epoch}, best test accuracy is {best_acc}')
		print(f"IN entire epoch, best test acc is {final_acc}")
	else:
		test(epoch=0, best_acc=0)